void static InstrumentationUtils.createFlowUUID()()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  os_log_s *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  void *v33;
  Class isa;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_s *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  os_log_s *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, char *, uint64_t);
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  OUTLINED_FUNCTION_55_1();
  v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_15();
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  v9 = (char *)&v65 - v8;
  v10 = OUTLINED_FUNCTION_66_6();
  v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_52_9();
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v65 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v65 - v17;
  __chkstk_darwin(v16);
  OUTLINED_FUNCTION_77_3();
  v20 = __chkstk_darwin(v19);
  v70 = (char *)&v65 - v21;
  __chkstk_darwin(v20);
  v23 = (char *)&v65 - v22;
  static InstrumentationUtils.getOrchestrationRequestId()((uint64_t)v9);
  OUTLINED_FUNCTION_63_6((uint64_t)v9);
  if (v24)
  {
    outlined destroy of UUID?((uint64_t)v9);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    v25 = OUTLINED_FUNCTION_48();
    v26 = OUTLINED_FUNCTION_65_5(v25, (uint64_t)static Logger.voiceCommands);
    v27 = (os_log_s *)Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_20_9(v28))
    {
      v29 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
      *(_WORD *)v29 = 0;
      _os_log_impl( &dword_0,  v27,  (os_log_type_t)v11,  "#SLF SELF Log, invalid executionRequestId string, cannot derive flowId form it",  v29,  2u);
      OUTLINED_FUNCTION_1_0((uint64_t)v29);
    }

    v30 = 1LL;
  }

  else
  {
    v67 = v15;
    v68 = v3;
    v31 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v31(v23, v9, v10);
    v32 = (uint64_t)v23;
    v33 = (void *)objc_opt_self(&OBJC_CLASS___AssistantSiriAnalytics);
    v69 = v32;
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v35 = [v33 derivedIdentifierForComponentName:3 fromSourceIdentifier:isa];

    if (v35)
    {
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v35);

      v31(v7, v1, v10);
      OUTLINED_FUNCTION_58_1((uint64_t)v7, 0LL);
      OUTLINED_FUNCTION_63_6((uint64_t)v7);
      if (!v24)
      {
        v66 = (void (*)(uint64_t, char *, uint64_t))v31;
        v31(v70, v7, v10);
        if (one-time initialization token for voiceCommands != -1) {
          swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
        }
        v36 = OUTLINED_FUNCTION_48();
        OUTLINED_FUNCTION_65_5(v36, (uint64_t)static Logger.voiceCommands);
        OUTLINED_FUNCTION_75_4((uint64_t)v18);
        v37 = (uint64_t)v67;
        v38 = v69;
        v39 = OUTLINED_FUNCTION_75_4((uint64_t)v67);
        v40 = (os_log_s *)Logger.logObject.getter(v39);
        v41 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v40, v41))
        {
          v42 = OUTLINED_FUNCTION_38(22LL);
          v65 = OUTLINED_FUNCTION_38(64LL);
          v72 = v65;
          *(_DWORD *)v42 = 136315394;
          v43 = ((uint64_t (*)(void))UUID.uuidString.getter)();
          v71 = OUTLINED_FUNCTION_47_11(v43, v44);
          OUTLINED_FUNCTION_70_5();
          OUTLINED_FUNCTION_20();
          v45 = OUTLINED_FUNCTION_76_3((uint64_t)v18);
          *(_WORD *)(v42 + 12) = 2080;
          v46 = UUID.uuidString.getter(v45);
          v71 = OUTLINED_FUNCTION_47_11(v46, v47);
          OUTLINED_FUNCTION_70_5();
          OUTLINED_FUNCTION_20();
          OUTLINED_FUNCTION_76_3(v37);
          OUTLINED_FUNCTION_24_9( &dword_0,  v40,  v41,  "#SLF SELF Log, created flowId: %s orchestrationId: %s",  (uint8_t *)v42);
          v48 = v65;
          OUTLINED_FUNCTION_23_9(v65, v49, (uint64_t)&type metadata for Any + 8);
          OUTLINED_FUNCTION_1_0(v48);
          OUTLINED_FUNCTION_1_0(v42);

          OUTLINED_FUNCTION_76_3(v69);
        }

        else
        {

          OUTLINED_FUNCTION_44_5(v37);
          OUTLINED_FUNCTION_44_5((uint64_t)v18);
          OUTLINED_FUNCTION_44_5(v38);
        }

        v3 = v68;
        v66(v68, v70, v10);
        v30 = 0LL;
        goto LABEL_23;
      }
    }

    else
    {
      OUTLINED_FUNCTION_58_1((uint64_t)v7, 1LL);
    }

    outlined destroy of UUID?((uint64_t)v7);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    v50 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_65_5(v50, (uint64_t)static Logger.voiceCommands);
    v51 = v69;
    v52 = OUTLINED_FUNCTION_88_1(v0, v69, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16));
    v53 = (os_log_s *)Logger.logObject.getter(v52);
    v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      v56 = OUTLINED_FUNCTION_38(32LL);
      v72 = v56;
      *(_DWORD *)v55 = 136315138;
      v57 = lazy protocol witness table accessor for type UUID and conformance UUID();
      v58 = dispatch thunk of CustomStringConvertible.description.getter(v10, v57);
      v60 = OUTLINED_FUNCTION_47_11(v58, v59);
      v61 = OUTLINED_FUNCTION_72_1(v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v61, v62, v63);
      OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_44_5(v0);
      _os_log_impl(&dword_0, v53, v54, "#SLF SELF Log, failed to created from: %s", v55, 0xCu);
      v30 = 1LL;
      OUTLINED_FUNCTION_30_3(v56, v64, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v56);
      OUTLINED_FUNCTION_1_0((uint64_t)v55);

      OUTLINED_FUNCTION_44_5(v69);
    }

    else
    {

      OUTLINED_FUNCTION_44_5(v0);
      OUTLINED_FUNCTION_44_5(v51);
      v30 = 1LL;
    }

    v3 = v68;
  }

LABEL_23:
  OUTLINED_FUNCTION_58_1(v3, v30);
  OUTLINED_FUNCTION_24_0();
}

      v11 = 0LL;
      memset(v139, 0, sizeof(v139));
      v138 = 0u;
    }

    v130 = v27;
    v29 = v136;
    v30 = OUTLINED_FUNCTION_7_21();
    v31 = [v29 valueForKey:v30];

    if (v31)
    {
      _bridgeAnyObjectToAny(_:)(v134);
      swift_unknownObjectRelease(v31);
    }

    else
    {
      memset(v134, 0, sizeof(v134));
    }

    outlined init with take of String?( (uint64_t)v134,  (uint64_t)v135,  &demangling cache variable for type metadata for Any?);
    if (v135[3])
    {
      if ((OUTLINED_FUNCTION_35_6( (uint64_t)v133,  (uint64_t)v135,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String) & 1) != 0)
      {
        v47 = v133[0];
        v48 = v133[1];
        v49 = swift_isUniquelyReferenced_nonNull_native(v7);
        v135[0] = v7;
        OUTLINED_FUNCTION_41_19(v130);
        OUTLINED_FUNCTION_17_6();
        if (v20) {
          goto LABEL_95;
        }
        v52 = v50;
        v53 = v51;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, String>);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v49, v7))
        {
          v54 = specialized __RawDictionaryStorage.find<A>(_:)(v130, v26);
          if ((v53 & 1) != (v55 & 1)) {
            goto LABEL_99;
          }
          v52 = v54;
        }

        v7 = v135[0];
        if ((v53 & 1) != 0)
        {
          v56 = (void *)(*(void *)(v135[0] + 56) + 16 * v52);
          swift_bridgeObjectRelease(v56[1]);
          *v56 = v47;
          v56[1] = v48;
        }

        else
        {
          OUTLINED_FUNCTION_8_26();
          *v60 = v130;
          v60[1] = v26;
          v61 = (void *)(*(void *)(v7 + 56) + 16 * v52);
          *v61 = v47;
          v61[1] = v48;
          v62 = *(void *)(v7 + 16);
          v20 = __OFADD__(v62, 1LL);
          v63 = v62 + 1;
          if (v20) {
            goto LABEL_97;
          }
          *(void *)(v7 + 16) = v63;
          OUTLINED_FUNCTION_11_11();
        }

        OUTLINED_FUNCTION_69();
        swift_bridgeObjectRelease(0x8000000000000000LL);
        v0 = v128;
      }

      else
      {

        OUTLINED_FUNCTION_69();
      }
    }

    else
    {

      OUTLINED_FUNCTION_69();
      outlined destroy of URL?((uint64_t)v135, &demangling cache variable for type metadata for Any?);
    }

    goto LABEL_58;
  }

      v9 = (v17 - 1) & v17;
    }
  }

  result = swift_release(v3);
  *v2 = v6;
  return result;
}

    v10 = (v17 - 1) & v17;
  }

  v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_35:
    result = swift_release_n(v3, 2LL);
    v2 = v31;
    goto LABEL_37;
  }

  v17 = *(void *)(v8 + 8 * v18);
  if (v17)
  {
    v13 = v18;
    goto LABEL_23;
  }

  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_35;
    }
    v17 = *(void *)(v8 + 8 * v13);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }

uint64_t static InstrumentationUtils.getOrchestrationRequestId()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for SiriEnvironment(0LL);
  uint64_t v5 = static SiriEnvironment.default.getter();
  uint64_t v6 = SiriEnvironment.currentRequest.getter();
  uint64_t v7 = swift_release(v5);
  uint64_t v8 = CurrentRequest.executionRequestId.getter(v7);
  uint64_t v10 = v9;
  swift_release(v6);
  if (v10)
  {
    static InstrumentationUtils.createUUID(id:)(v8, v10, (uint64_t)v4);
    swift_bridgeObjectRelease(v10);
    uint64_t v11 = type metadata accessor for UUID(0LL);
    if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1LL, v11) == 1)
    {
      outlined destroy of UUID?((uint64_t)v4);
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v12 = type metadata accessor for Logger(0LL);
      uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)static Logger.voiceCommands);
      v14 = (os_log_s *)Logger.logObject.getter(v13);
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)v16 = 0;
        _os_log_impl( &dword_0,  v14,  v15,  "#SLF SELF Log, invalid executionRequestId string, cannot derive flowId form it",  v16,  2u);
        swift_slowDealloc(v16, -1LL, -1LL);
      }

      uint64_t v17 = a1;
      uint64_t v18 = 1LL;
    }

    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(a1, v4, v11);
      uint64_t v17 = a1;
      uint64_t v18 = 0LL;
    }

    return __swift_storeEnumTagSinglePayload(v17, v18, 1LL, v11);
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    uint64_t v20 = __swift_project_value_buffer(v19, (uint64_t)static Logger.voiceCommands);
    v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v23 = 0;
      _os_log_impl( &dword_0,  v21,  v22,  "#SLF SELF Log, invalid executionRequestId, cannot derive flowId form it",  v23,  2u);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    uint64_t v24 = type metadata accessor for UUID(0LL);
    return __swift_storeEnumTagSinglePayload(a1, 1LL, 1LL, v24);
  }

void static InstrumentationUtils.emitLinkFlowStartedInstrumentation(targetBundle:action:)()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_66_6();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v4);
  id v5 = OUTLINED_FUNCTION_14_20(objc_allocWithZone(&OBJC_CLASS___FLOWLINKSchemaFLOWLINKActionContext));
  if (v5)
  {
    v38 = v5;
    id v6 = OUTLINED_FUNCTION_14_20(objc_allocWithZone(&OBJC_CLASS___FLOWLINKSchemaFLOWLinkActionStarted));
    if (!v6)
    {
      OUTLINED_FUNCTION_26_13(v38);
      return;
    }

    v36 = v6;
    id v37 = OUTLINED_FUNCTION_14_20(objc_allocWithZone(&OBJC_CLASS___FLOWLINKSchemaFLOWLINKActionTier1));
    if (!v37)
    {
      OUTLINED_FUNCTION_14_18();
      OUTLINED_FUNCTION_26_13(v36);
      return;
    }

    LNAction.asSELFAction()();
    if (!v7)
    {
      OUTLINED_FUNCTION_14_18();

      OUTLINED_FUNCTION_26_13(v37);
      return;
    }

    uint64_t v8 = v7;
    outlined bridged method (mbgnn) of @objc FLOWLINKSchemaFLOWLINKActionTier1.appBundleId.setter(v3, v1, v37);
    unint64_t v9 = OUTLINED_FUNCTION_80_2();
    UUID.init()(v9);
    id v10 = SISchemaUUID.__allocating_init(nsuuid:)();
    [v37 setLinkId:v10];
    [v8 setLinkId:v10];
    OUTLINED_FUNCTION_23_16(v36, "setCurrentAction:");
    [v38 setStartedOrChanged:v36];
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v11 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.voiceCommands);
    id v12 = OUTLINED_FUNCTION_79_1();
    id v13 = v36;
    id v14 = v12;
    id v15 = v13;
    v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v39 = v10;
      uint64_t v18 = OUTLINED_FUNCTION_38(22LL);
      uint64_t v19 = OUTLINED_FUNCTION_38(64LL);
      uint64_t v41 = v19;
      *(_DWORD *)uint64_t v18 = 136315394;
      uint64_t ObjectType = swift_getObjectType(v14);
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FLOWLINKSchemaFLOWLINKActionContext.Type);
      uint64_t v21 = OUTLINED_FUNCTION_71_3(v20, v20);
      uint64_t v23 = OUTLINED_FUNCTION_47_11(v21, v22);
      uint64_t v24 = OUTLINED_FUNCTION_72_1(v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v24, v25, v26);

      OUTLINED_FUNCTION_37();
      *(_WORD *)(v18 + 12) = 2080;
      uint64_t ObjectType = swift_getObjectType(v15);
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FLOWLINKSchemaFLOWLinkActionStarted.Type);
      uint64_t v28 = OUTLINED_FUNCTION_71_3(v27, v27);
      unint64_t v30 = v29;
      uint64_t ObjectType = OUTLINED_FUNCTION_47_11(v28, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v41, v18 + 14);

      swift_bridgeObjectRelease(v30);
      OUTLINED_FUNCTION_24_9(&dword_0, v16, v17, "#SLF SELF emitting contextEvent: %s event: %s", (uint8_t *)v18);
      OUTLINED_FUNCTION_23_9(v19, v31, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v19);
      uint64_t v32 = v18;
      id v10 = v39;
      OUTLINED_FUNCTION_1_0(v32);
    }

    else
    {
    }

    OUTLINED_FUNCTION_37_13();
    Logger.logObject.getter(v33);
    os_log_type_t v34 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_21_6(v34))
    {
      v35 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
      *(_WORD *)v35 = 0;
      _os_log_impl( &dword_0,  (os_log_t)&selRef__setCachedSiriLanguageCode_,  (os_log_type_t)v16,  "#SLF SELF emitting tier 1",  v35,  2u);
      OUTLINED_FUNCTION_1_0((uint64_t)v35);
    }

    OUTLINED_FUNCTION_37_13();
  }

  OUTLINED_FUNCTION_24_0();
}

#error "74BDC: call analysis failed (funcsize=59)"
#error "74C60: call analysis failed (funcsize=100)"
#error "74E10: call analysis failed (funcsize=99)"
#error "74FC4: call analysis failed (funcsize=100)"
void static InstrumentationUtils.emitActionConversionStartedInstrumentation(parseUUID:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  void *v13;
  char v14;
  uint64_t v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  OUTLINED_FUNCTION_55_1();
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v3);
  id v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v6 = (void *)OUTLINED_FUNCTION_66_6();
  uint64_t v7 = *(v6 - 1);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_53_10();
  __chkstk_darwin(v8);
  id v10 = (char *)&v29 - v9;
  uint64_t v11 = OUTLINED_FUNCTION_14_20(objc_allocWithZone(&OBJC_CLASS___FLOWLINKSchemaFLOWLINKActionConversionContext));
  if (v11)
  {
    unint64_t v30 = v11;
    id v12 = OUTLINED_FUNCTION_14_20(objc_allocWithZone(&OBJC_CLASS___FLOWLINKSchemaFLOWLINKActionConversionStarted));
    if (!v12)
    {
      OUTLINED_FUNCTION_26_13(v30);
      return;
    }

    id v13 = v12;
    outlined init with copy of UUID?(v2, (uint64_t)v5);
    OUTLINED_FUNCTION_63_6((uint64_t)v5);
    if (v14)
    {
      outlined destroy of UUID?((uint64_t)v5);
    }

    else
    {
      OUTLINED_FUNCTION_88_1((uint64_t)v10, (uint64_t)v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32));
      OUTLINED_FUNCTION_80_2();
      OUTLINED_FUNCTION_88_1(v0, (uint64_t)v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
      id v5 = (char *)SISchemaUUID.__allocating_init(nsuuid:)();
      OUTLINED_FUNCTION_60_8(v13, "setParseHypothesisId:");

      (*(void (**)(char *, void *))(v7 + 8))(v10, v6);
    }

    OUTLINED_FUNCTION_23_16(v30, "setStartedOrChanged:");
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    id v15 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.voiceCommands);
    OUTLINED_FUNCTION_79_1();
    OUTLINED_FUNCTION_32_9();
    OUTLINED_FUNCTION_27_15();
    OUTLINED_FUNCTION_30_14();
    OUTLINED_FUNCTION_31_12();
    v16 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_23_7(v16))
    {
      os_log_type_t v17 = OUTLINED_FUNCTION_38(22LL);
      uint64_t v18 = OUTLINED_FUNCTION_38(64LL);
      uint64_t v32 = v18;
      uint64_t v31 = OUTLINED_FUNCTION_12_19(4.8151e-34);
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FLOWLINKSchemaFLOWLINKActionConversionContext.Type);
      uint64_t v20 = OUTLINED_FUNCTION_71_3(v19, v19);
      unint64_t v22 = OUTLINED_FUNCTION_47_11(v20, v21);
      OUTLINED_FUNCTION_56_12(v22);

      OUTLINED_FUNCTION_28_4();
      uint64_t v31 = OUTLINED_FUNCTION_6_18();
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FLOWLINKSchemaFLOWLINKActionConversionStarted.Type);
      uint64_t v24 = OUTLINED_FUNCTION_71_3(v23, v23);
      uint64_t v26 = OUTLINED_FUNCTION_47_11(v24, v25);
      OUTLINED_FUNCTION_56_12(v26);

      OUTLINED_FUNCTION_28_4();
      OUTLINED_FUNCTION_5_18(&dword_0, v27, v28, "#SLF SELF emitting contextEvent: %s event: %s");
      OUTLINED_FUNCTION_40_5((uint64_t)&type metadata for Any);
      OUTLINED_FUNCTION_1_0(v18);
      OUTLINED_FUNCTION_1_0(v17);
    }

    else
    {
    }

    OUTLINED_FUNCTION_29_13();
  }

  OUTLINED_FUNCTION_24_0();
}

#error "7546C: call analysis failed (funcsize=114)"
#error "75620: call analysis failed (funcsize=100)"
void static InstrumentationUtils.emitEntityDisambiguationEndedInstrumentation()()
{
  id v0;
  id v1;
  void *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v0 = OUTLINED_FUNCTION_14_20(objc_allocWithZone(&OBJC_CLASS___FLOWLINKSchemaFLOWLINKEntityDisambiguationContext));
  if (v0)
  {
    uint64_t v20 = v0;
    uint64_t v1 = OUTLINED_FUNCTION_14_20(objc_allocWithZone(&OBJC_CLASS___FLOWLINKSchemaFLOWLINKEntityDisambiguationEnded));
    if (v1)
    {
      uint64_t v2 = v1;
      uint64_t v3 = OUTLINED_FUNCTION_42_8(v1, "setExists:");
      OUTLINED_FUNCTION_19_13(v3, "setEnded:", v4, v5, v6, v7, v8, v9, v18, v20);
      OUTLINED_FUNCTION_37_13();
      OUTLINED_FUNCTION_57_8(v10, v11, v12, v13, v14, v15, v16, v17, v19, v21);
      OUTLINED_FUNCTION_5_15(v2);
    }

    else
    {
      OUTLINED_FUNCTION_5_15(v20);
    }
  }

  else
  {
    OUTLINED_FUNCTION_73_3();
  }

#error "75864: call analysis failed (funcsize=99)"
#error "75A30: call analysis failed (funcsize=129)"
#error "75C3C: call analysis failed (funcsize=99)"
#error "75E08: call analysis failed (funcsize=129)"
#error "76014: call analysis failed (funcsize=99)"
#error "761E0: call analysis failed (funcsize=129)"
#error "763F0: call analysis failed (funcsize=100)"
#error "765A0: call analysis failed (funcsize=99)"
#error "76754: call analysis failed (funcsize=100)"
#error "76904: call analysis failed (funcsize=99)"
#error "76B7C: call analysis failed (funcsize=128)"
uint64_t static InstrumentationUtils.createUUID(id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_s *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v17;
  id v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  UUID.init(uuidString:)(a1, a2);
  unint64_t v9 = type metadata accessor for UUID(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1LL, v9) == 1)
  {
    outlined destroy of UUID?((uint64_t)v8);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    id v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = __swift_project_value_buffer(v10, (uint64_t)static Logger.voiceCommands);
    id v12 = (os_log_s *)Logger.logObject.getter(v11);
    id v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      id v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v14 = 0;
      _os_log_impl(&dword_0, v12, v13, "#SLF SELF Log - invalid string, cannot derive uuid", v14, 2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    id v15 = 1LL;
  }

  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(a3, v8, v9);
    id v15 = 0LL;
  }

  return __swift_storeEnumTagSinglePayload(a3, v15, 1LL, v9);
}

void outlined bridged method (mbgnn) of @objc FLOWLINKSchemaFLOWLINKAutoShortcutTemplateUsed.autoshortcutTemplate.setter( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setAutoshortcutTemplate:v4];
}

void outlined bridged method (mbgnn) of @objc FLOWLINKSchemaFLOWLINKAppShortcutGeneralizedExecutionUsed.appShortcutId.setter( uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  [a3 setAppShortcutId:v4];
  OUTLINED_FUNCTION_5_15(v4);
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    uint64_t v1 = type metadata accessor for UUID(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }

  return result;
}

void outlined bridged method (mbgnn) of @objc FLOWLINKSchemaFLOWLINKActionTier1.appBundleId.setter( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setAppBundleId:v4];
}

unint64_t type metadata accessor for SISchemaUUID()
{
  unint64_t result = lazy cache variable for type metadata for SISchemaUUID;
  if (!lazy cache variable for type metadata for SISchemaUUID)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___SISchemaUUID);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
  }

  return result;
}

void outlined bridged method (mbgnn) of @objc FLOWLINKSchemaFLOWLINKActionParameter.name.setter( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setName:v4];
}

ValueMetadata *type metadata accessor for InstrumentationUtils()
{
  return &type metadata for InstrumentationUtils;
}

void OUTLINED_FUNCTION_0_21(id a1)
{
}

uint64_t OUTLINED_FUNCTION_2_19( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  a11 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a11, v12 + 8, v11);
}

  ;
}

uint64_t OUTLINED_FUNCTION_4_20(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return String.init<A>(describing:)(va, a1);
}

void OUTLINED_FUNCTION_5_18(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_6_18()
{
  *(_WORD *)(v1 + 12) = 2080;
  return swift_getObjectType(v0);
}

uint64_t OUTLINED_FUNCTION_8_20(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

  ;
}

id OUTLINED_FUNCTION_10_13( uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  return a10;
}

uint64_t OUTLINED_FUNCTION_12_19(float a1)
{
  *uint64_t v2 = a1;
  return swift_getObjectType(v1);
}

id OUTLINED_FUNCTION_14_20(void *a1)
{
  return [a1 *(SEL *)(v1 + 3592)];
}

uint64_t OUTLINED_FUNCTION_15_11(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_16_18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  return String.init<A>(describing:)(va, a2);
}

uint64_t OUTLINED_FUNCTION_18_19( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  a11 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a11, v12 + 8, v11);
}

id OUTLINED_FUNCTION_19_13( int a1, const char *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  return objc_msgSend(a10, a2, v10);
}

id OUTLINED_FUNCTION_23_16(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_25_18()
{
  return swift_getObjectType(v0);
}

void OUTLINED_FUNCTION_26_13(id a1)
{
}

id OUTLINED_FUNCTION_27_15()
{
  return v0;
}

void OUTLINED_FUNCTION_29_13()
{
}

id OUTLINED_FUNCTION_30_14()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_31_12()
{
  return Logger.logObject.getter();
}

id OUTLINED_FUNCTION_32_9()
{
  return v0;
}

void OUTLINED_FUNCTION_34_12()
{
}

void OUTLINED_FUNCTION_35_15()
{
}

uint64_t OUTLINED_FUNCTION_36_12()
{
  *(_WORD *)(v1 + 12) = 2080;
  return swift_getObjectType(v0);
}

void OUTLINED_FUNCTION_37_13()
{
}

  ;
}

void OUTLINED_FUNCTION_40_13()
{
}

id OUTLINED_FUNCTION_42_8(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, 1);
}

BOOL OUTLINED_FUNCTION_43_9(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_44_5(uint64_t a1)
{
  return v1(a1, v2);
}

void OUTLINED_FUNCTION_45_8()
{
}

uint64_t OUTLINED_FUNCTION_47_11(uint64_t a1, unint64_t a2)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 88));
}

void OUTLINED_FUNCTION_49_11(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

  ;
}

  ;
}

id OUTLINED_FUNCTION_54_12(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  return a9;
}

uint64_t OUTLINED_FUNCTION_56_12(uint64_t a1)
{
  *(void *)(v3 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 96, v2 + 8, v1);
}

void OUTLINED_FUNCTION_57_8( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t OUTLINED_FUNCTION_58_10()
{
  return (*(uint64_t (**)(uint64_t, void))(v1 + 8))(v0, *(void *)(v2 - 160));
}

id OUTLINED_FUNCTION_60_8(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_63_6(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1LL, v1);
}

uint64_t OUTLINED_FUNCTION_65_5(uint64_t a1, uint64_t a2)
{
  return __swift_project_value_buffer(a1, a2);
}

uint64_t OUTLINED_FUNCTION_66_6()
{
  return type metadata accessor for UUID(0LL);
}

uint64_t OUTLINED_FUNCTION_69_4()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 96, v1, v0);
}

uint64_t OUTLINED_FUNCTION_70_5()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 96, v1, v0);
}

uint64_t OUTLINED_FUNCTION_71_3(uint64_t a1, uint64_t a2)
{
  return String.init<A>(describing:)(v2 - 96, a2);
}

uint64_t OUTLINED_FUNCTION_72_1(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

  ;
}

uint64_t OUTLINED_FUNCTION_74_4()
{
  return swift_release(v0);
}

uint64_t OUTLINED_FUNCTION_75_4(uint64_t a1)
{
  return v1(a1, v3, v2);
}

uint64_t OUTLINED_FUNCTION_76_3(uint64_t a1)
{
  return v2(a1, v1);
}

  ;
}

id OUTLINED_FUNCTION_78_1()
{
  return SISchemaUUID.__allocating_init(nsuuid:)();
}

id OUTLINED_FUNCTION_79_1()
{
  return *(id *)(v0 - 104);
}

unint64_t OUTLINED_FUNCTION_80_2()
{
  return type metadata accessor for SISchemaUUID();
}

  ;
}

id OUTLINED_FUNCTION_82_1( uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  return objc_msgSend(a10, a2, a9);
}

id OUTLINED_FUNCTION_84_2()
{
  return v0;
}

  ;
}

id OUTLINED_FUNCTION_86_0(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2 & 1);
}

uint64_t OUTLINED_FUNCTION_87_1()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_88_1@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

void *LNActionMetadata.firstParameterMetadata(from:)(void *a1)
{
  id v3 = [v1 parameters];
  unint64_t v4 = type metadata accessor for LNActionParameterMetadata();
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  os_log_type_t v6 = specialized Sequence.first(where:)(v5, a1);
  swift_bridgeObjectRelease(v5);
  return v6;
}

unint64_t type metadata accessor for LNActionParameterMetadata()
{
  unint64_t result = lazy cache variable for type metadata for LNActionParameterMetadata;
  if (!lazy cache variable for type metadata for LNActionParameterMetadata)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___LNActionParameterMetadata);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNActionParameterMetadata);
  }

  return result;
}

void *specialized Sequence.first(where:)(unint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_22;
  }
  uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a1);
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v17))
  {
    uint64_t v19 = v2;
    unint64_t v20 = v2 & 0xC000000000000001LL;
    for (uint64_t i = 4LL; ; ++i)
    {
      id v5 = v20 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v2) : *(id *)(v2 + 8 * i);
      os_log_type_t v6 = v5;
      uint64_t v7 = i - 3;
      if (__OFADD__(i - 4, 1LL)) {
        break;
      }
      uint64_t v8 = outlined bridged method (pb) of @objc INIntentSlotDescription.name.getter(v5);
      uint64_t v10 = v9;
      id v11 = [a2 parameterName];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;

      if (v10)
      {
        if (v8 == v12 && v10 == v14)
        {

          swift_bridgeObjectRelease(v19);
          swift_bridgeObjectRelease(v10);
LABEL_20:
          swift_bridgeObjectRelease(v14);
          return v6;
        }

        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v10, v12, v14, 0LL);
        swift_bridgeObjectRelease(v10);
        swift_bridgeObjectRelease(v14);
        if ((v16 & 1) != 0)
        {

          uint64_t v14 = v19;
          goto LABEL_20;
        }
      }

      else
      {

        swift_bridgeObjectRelease(v14);
      }

      uint64_t v2 = v19;
      if (v7 == v3)
      {

        swift_bridgeObjectRelease(v19);
        return 0LL;
      }
    }

    __break(1u);
LABEL_22:
    if (v2 < 0) {
      uint64_t v17 = v2;
    }
    else {
      uint64_t v17 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
  }

  swift_bridgeObjectRelease(v2);
  return 0LL;
}

{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v55;
  uint64_t v3 = v2;
  if (a1 >> 62) {
    goto LABEL_19;
  }
  id v5 = *(void **)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  os_log_type_t v6 = OUTLINED_FUNCTION_54_7();
  if (v5)
  {
    do
    {
      v52 = v3;
      v53 = a1 & 0xC000000000000001LL;
      for (uint64_t i = 4LL; ; ++i)
      {
        id v15 = v53 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1) : *(id *)(a1 + 8 * i);
        char v16 = i - 3;
        if (__OFADD__(i - 4, 1LL)) {
          break;
        }
        v55 = v15;
        uint64_t v17 = [v15 identifier];
        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v20 = v19;

        uint64_t v21 = [a2 enumerationIdentifier];
        unint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v24 = v23;

        if (v18 == v22 && v20 == v24)
        {
          OUTLINED_FUNCTION_24_26(v25, v26, v27, v28, v29, v30, v31, v32, v51, v52, v53, a2);
          OUTLINED_FUNCTION_2_6();
          OUTLINED_FUNCTION_69();
LABEL_17:
          id v5 = v55;
          OUTLINED_FUNCTION_69();
          return v5;
        }

        uint64_t v3 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v22, v24, 0LL);
        OUTLINED_FUNCTION_69();
        os_log_type_t v34 = swift_bridgeObjectRelease(v24);
        if ((v3 & 1) != 0)
        {
          OUTLINED_FUNCTION_24_26(v34, v35, v36, v37, v38, v39, v40, v41, v51, v52, v53, a2);
          goto LABEL_17;
        }

        if ((void *)v16 == v5)
        {
          OUTLINED_FUNCTION_24_26(v42, v43, v44, v45, v46, v47, v48, v49, v51, v52, v53, a2);
          OUTLINED_FUNCTION_2_6();
          return 0LL;
        }
      }

      __break(1u);
LABEL_19:
      OUTLINED_FUNCTION_54_7();
      os_log_type_t v6 = OUTLINED_FUNCTION_58_9();
      id v5 = (void *)v6;
    }

    while (v6);
  }

  OUTLINED_FUNCTION_24_26(v6, v7, v8, v9, v10, v11, v12, v13, v51, v52, v53, a2);
  OUTLINED_FUNCTION_2_6();
  return v5;
}

uint64_t ListShortcutsFlow.__allocating_init(deviceState:aceServiceInvoker:catWrapper:)( void *a1, void *a2, uint64_t a3)
{
  uint64_t v7 = swift_allocObject(v3, 112LL, 7LL);
  ListShortcutsFlow.init(deviceState:aceServiceInvoker:catWrapper:)(a1, a2, a3);
  return v7;
}

uint64_t AutoShortcutDialogTemplating.deviceState.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 16, a1);
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.deviceState.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 56, a1);
}

uint64_t CustomIntentResponseGenerator.continueInAppCATWrapperSimple.getter()
{
  return swift_retain(*(void *)(v0 + 96));
}

uint64_t ListShortcutsFlow.init(deviceState:aceServiceInvoker:catWrapper:)( void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  outlined init with copy of DeviceState((uint64_t)a2, v3 + 16);
  outlined init with copy of DeviceState((uint64_t)a1, v3 + 56);
  *(void *)(v3 + 104) = a3;
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  swift_retain(a3);
  char v10 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v8, v9);
  uint64_t v11 = type metadata accessor for ViewFactory(0LL);
  OUTLINED_FUNCTION_51(v11);
  uint64_t v12 = ViewFactory.init(ttsEnabled:)(v10 & 1);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  *(void *)(v4 + 96) = v12;
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v4;
}

uint64_t ListShortcutsFlow.on(input:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Input(0LL);
  uint64_t v33 = *(void *)(v2 - 8);
  uint64_t v34 = v2;
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_35();
  uint64_t v35 = v4 - v3;
  uint64_t v5 = type metadata accessor for VoiceCommandsNLIntent(0LL);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_35();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for Parse(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_35();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = type metadata accessor for NLIntent(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_35();
  uint64_t v18 = v17 - v16;
  Input.parse.getter(v19);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v10 + 88))(v13, v9) == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v10 + 96))(v13, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v18, v13, v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v8, v18, v14);
    if (one-time initialization token for voiceCommandVerbNode != -1) {
      swift_once( &one-time initialization token for voiceCommandVerbNode,  one-time initialization function for voiceCommandVerbNode);
    }
    uint64_t v20 = static VoiceCommandsNLIntent.voiceCommandVerbNode;
    uint64_t v21 = lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow( (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent,  255LL,  type metadata accessor for VoiceCommandsNLIntent,  (uint64_t)&protocol conformance descriptor for VoiceCommandsNLIntent);
    IntentNodeTraversable.value<A>(forNode:)(v20, v5, v21);
    if (v37 == 3)
    {
      outlined destroy of VoiceCommandsNLIntent(v8);
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v14);
      return 1LL;
    }

    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v23, (uint64_t)static Logger.voiceCommands);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v35, a1, v34);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v32 = swift_slowAlloc(32LL, -1LL);
      uint64_t v37 = v32;
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v28 = lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow( (unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter(v34, v28);
      unint64_t v31 = v30;
      uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v27 + 4);
      swift_bridgeObjectRelease(v31);
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v35, v34);
      _os_log_impl(&dword_0, v25, v26, "Received NLV3 intent that is not list shortcuts intent: %s", v27, 0xCu);
      swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v32);
      OUTLINED_FUNCTION_1_0((uint64_t)v27);
    }

    else
    {

      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v35, v34);
    }

    outlined destroy of VoiceCommandsNLIntent(v8);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v14);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  }

  return 0LL;
}

uint64_t ListShortcutsFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ListShortcutsFlow();
  uint64_t v6 = lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow( &lazy protocol witness table cache variable for type ListShortcutsFlow and conformance ListShortcutsFlow,  v5,  (uint64_t (*)(uint64_t))type metadata accessor for ListShortcutsFlow,  (uint64_t)&protocol conformance descriptor for ListShortcutsFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v6);
}

uint64_t ListShortcutsFlow.execute()(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for TemplatingResult(0LL);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = OUTLINED_FUNCTION_9_0(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v2 = *(void *)(*(void *)v1 + 96LL);
  *(void *)(*(void *)v1 + 104LL) = a1;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v2 = *(void **)(v1 + 88);
  uint64_t v3 = *(void *)(v1 + 48);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  static ExecuteResponse.complete()(a1);
  swift_release();
  OUTLINED_FUNCTION_12_5();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t ListShortcutsFlow.execute()()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = type metadata accessor for ViewFactory(0LL);
  OUTLINED_FUNCTION_51(v2);
  v0[7] = ViewFactory.init(ttsEnabled:)(1LL);
  uint64_t v3 = *(int **)(class metadata base offset for ListShortcutsCATs + **(void **)(v1 + 104) + 8);
  uint64_t v6 = (uint64_t (*)(void))((char *)v3 + *v3);
  uint64_t v4 = (void *)swift_task_alloc(v3[1]);
  v0[8] = v4;
  void *v4 = v0;
  v4[1] = ListShortcutsFlow.execute();
  return v6(v0[6]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v2 = *(void *)(*(void *)v1 + 64LL);
  *(void *)(*(void *)v1 + 72LL) = v0;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v1 = v0[3];
  uint64_t v2 = dispatch thunk of ViewFactory.makeUtteranceViews(template:listenAfterSpeaking:canUseServerTTS:)(v0[6], 0LL, 1LL);
  type metadata accessor for SiriKitAceViewBuilder(0LL);
  dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)(v1 + 56);
  uint64_t v3 = dispatch thunk of SiriKitAceViewBuilder.withUtteranceViews(utteranceViews:)(v2);
  v0[10] = v3;
  swift_bridgeObjectRelease(v2);
  OUTLINED_FUNCTION_12_5();
  v0[11] = [objc_allocWithZone(SAUIAddViews) init];
  uint64_t v4 = (void *)swift_task_alloc(dword_2174FC);
  v0[12] = v4;
  void *v4 = v0;
  v4[1] = ListShortcutsFlow.execute();
  return ListShortcutsFlow.buildAceViews(aceViewBuilder:)(v3);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v1 = *(void **)(v0 + 24);
  outlined bridged method (mbnn) of @objc SAUIAddViews.views.setter(*(void *)(v0 + 104), *(void **)(v0 + 88));
  uint64_t v2 = v1 + 2;
  uint64_t v4 = v1[5];
  uint64_t v3 = v1[6];
  __swift_project_boxed_opaque_existential_1(v2, v4);
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to AceServiceInvokerAsync.submit<A>(_:)[1]);
  *(void *)(v0 + 112) = v5;
  uint64_t v6 = type metadata accessor for SABaseCommand();
  *uint64_t v5 = v0;
  v5[1] = ListShortcutsFlow.execute();
  return AceServiceInvokerAsync.submit<A>(_:)(*(void *)(v0 + 88), v4, v6, v3);
}

{
  uint64_t v0;
  return swift_unexpectedError(*(void *)(v0 + 72), "SiriLinkFlowPlugin/ListShortcutsFlow.swift", 42LL, 1LL, 51LL);
}

uint64_t ListShortcutsFlow.execute()(void *a1)
{
  if (v1) {
    swift_errorRelease(v1);
  }
  else {

  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_0_0();
}

uint64_t ListShortcutsFlow.buildAceViews(aceViewBuilder:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for TemplatingText(0LL);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = OUTLINED_FUNCTION_9_0(v4);
  uint64_t v5 = type metadata accessor for TemplatingSection(0LL);
  v2[7] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[8] = v6;
  v2[9] = OUTLINED_FUNCTION_9_0(v6);
  uint64_t v7 = type metadata accessor for TemplatingResult(0LL);
  v2[10] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[11] = v8;
  v2[12] = OUTLINED_FUNCTION_9_0(v8);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t ListShortcutsFlow.buildAceViews(aceViewBuilder:)()
{
  uint64_t v1 = *(void **)(v0 + 24);
  uint64_t v2 = v1[10];
  uint64_t v3 = v1[11];
  __swift_project_boxed_opaque_existential_1(v1 + 7, v2);
  uint64_t v4 = dispatch thunk of DeviceState.isPhone.getter(v2, v3);
  if ((v4 & 1) != 0)
  {
    uint64_t v5 = *(void **)(*(void *)(v0 + 24) + 104LL);
    uint64_t v6 = v1[10];
    uint64_t v7 = v1[11];
    __swift_project_boxed_opaque_existential_1(v1 + 7, v6);
    uint64_t v8 = DeviceState.asSiriKitDeviceState()(v6, v7);
    *(void *)(v0 + 104) = v8;
    uint64_t v9 = *(int **)(*v5 + class metadata base offset for ListShortcutsCATs);
    uint64_t v15 = (int *)((char *)v9 + *v9);
    uint64_t v10 = (void *)swift_task_alloc(v9[1]);
    *(void *)(v0 + 112) = v10;
    *uint64_t v10 = v0;
    v10[1] = ListShortcutsFlow.buildAceViews(aceViewBuilder:);
    return ((uint64_t (*)(void, uint64_t))v15)(*(void *)(v0 + 96), v8);
  }

  else
  {
    uint64_t v12 = dispatch thunk of SiriKitAceViewBuilder.build()(v4);
    uint64_t v13 = *(void *)(v0 + 72);
    uint64_t v14 = *(void *)(v0 + 48);
    swift_task_dealloc(*(void *)(v0 + 96));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v12);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v2 = *(void *)(*(void *)v1 + 112LL);
  *(void *)(*(void *)v1 + 120LL) = v0;
  swift_task_dealloc(v2);
  if (!v0) {
    swift_release();
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_0_0();
}

{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v1 = [objc_allocWithZone(SAAppsLaunchApp) init];
  outlined bridged method (mbgnn) of @objc SAAppsLaunchApp.launchId.setter();
  uint64_t v2 = [objc_allocWithZone(SAUIButton) init];
  unint64_t result = TemplatingResult.sections.getter(v2);
  if (*(void *)(result + 16))
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(v0 + 72);
    os_log_type_t v26 = *(void *)(v0 + 80);
    uint64_t v27 = *(void *)(v0 + 96);
    uint64_t v7 = *(void *)(v0 + 56);
    uint64_t v6 = *(void *)(v0 + 64);
    uint64_t v8 = *(void *)(v0 + 40);
    uint64_t v9 = *(void *)(v0 + 48);
    uint64_t v10 = *(void *)(v0 + 32);
    uint64_t v25 = *(void *)(v0 + 88);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))( v5,  result + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)),  v7);
    uint64_t v11 = swift_bridgeObjectRelease(v4);
    TemplatingSection.content.getter(v11);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    uint64_t v13 = TemplatingText.text.getter(v12);
    uint64_t v15 = v14;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
    outlined bridged method (mbnn) of @objc SAUIButton.text.setter(v13, v15, v2);
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v17 = swift_allocObject(v16, 40LL, 7LL);
    *(_OWORD *)(v17 + 16) = xmmword_17E150;
    *(void *)(v17 + 32) = v1;
    uint64_t v28 = v17;
    specialized Array._endMutation()(v17, v18, v19);
    uint64_t v20 = v1;
    outlined bridged method (mbnn) of @objc SAUIButton.commands.setter(v28, v2);
    uint64_t v21 = dispatch thunk of SiriKitAceViewBuilder.addButton(button:)(v2);
    unint64_t v22 = dispatch thunk of SiriKitAceViewBuilder.build()(v21);
    OUTLINED_FUNCTION_12_5();

    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v27, v26);
    uint64_t v23 = *(void *)(v0 + 72);
    uint64_t v24 = *(void *)(v0 + 48);
    swift_task_dealloc(*(void *)(v0 + 96));
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v22);
  }

  else
  {
    __break(1u);
  }

  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 120);
  swift_release(*(void *)(v0 + 104));
  return swift_unexpectedError(v1, "SiriLinkFlowPlugin/ListShortcutsFlow.swift", 42LL, 1LL, 71LL);
}

uint64_t ListShortcutsFlow.deinit()
{
  return v0;
}

uint64_t ListShortcutsFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 112LL, 7LL);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance ListShortcutsFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128LL))();
}

uint64_t protocol witness for Flow.execute() in conformance ListShortcutsFlow(uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 136LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makePromptForTCCAcceptance(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return v7(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance ListShortcutsFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for ListShortcutsFlow();
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t type metadata accessor for ListShortcutsFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin17ListShortcutsFlow);
}

uint64_t base witness table accessor for Flow in ListShortcutsFlow(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow( &lazy protocol witness table cache variable for type ListShortcutsFlow and conformance ListShortcutsFlow,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for ListShortcutsFlow,  (uint64_t)&protocol conformance descriptor for ListShortcutsFlow);
}

uint64_t base witness table accessor for SiriEnvironmentLocating in ListShortcutsFlow(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow( &lazy protocol witness table cache variable for type ListShortcutsFlow and conformance ListShortcutsFlow,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for ListShortcutsFlow,  (uint64_t)&protocol conformance descriptor for ListShortcutsFlow);
}

uint64_t INIntentSlotValueType.getIntentSlotValue(userDialogAct:locale:locationResolver:locationProvider:dateTimeResolver:contactResolver:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  uint64_t v9 = type metadata accessor for Locale(0LL);
  v8[10] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[11] = v10;
  v8[12] = OUTLINED_FUNCTION_9_0(v10);
  uint64_t v11 = type metadata accessor for TimeZone(0LL);
  v8[13] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v8[14] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[15] = swift_task_alloc(v13);
  v8[16] = swift_task_alloc(v13);
  uint64_t v14 = type metadata accessor for Calendar(0LL);
  v8[17] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v8[18] = v15;
  v8[19] = OUTLINED_FUNCTION_9_0(v15);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  v8[20] = OUTLINED_FUNCTION_9_0(*(void *)(v16 - 8));
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  v8[21] = OUTLINED_FUNCTION_9_0(*(void *)(v17 - 8));
  return swift_task_switch( INIntentSlotValueType.getIntentSlotValue(userDialogAct:locale:locationResolver:locationProvider:dateTimeResolver:contactResolver:),  0LL,  0LL);
}

uint64_t INIntentSlotValueType.getIntentSlotValue(userDialogAct:locale:locationResolver:locationProvider:dateTimeResolver:contactResolver:)( uint64_t a1)
{
  uint64_t v6 = *(void *)(v4 + 72);
  switch(v6)
  {
    case 10LL:
      Siri_Nlu_External_UserDialogAct.personValue(contactResolver:locale:)(*(void **)(v4 + 64), *(void *)(v4 + 32));
      id v12 = v11;
      uint64_t v13 = *(void *)(v4 + 16);
      if (!v11) {
        goto LABEL_41;
      }
      uint64_t v14 = &lazy cache variable for type metadata for INPerson;
      uint64_t v15 = &OBJC_CLASS___INPerson_ptr;
      goto LABEL_15;
    case 11LL:
    case 12LL:
    case 13LL:
    case 15LL:
    case 16LL:
    case 17LL:
    case 18LL:
    case 20LL:
    case 22LL:
    case 23LL:
    case 25LL:
    case 28LL:
    case 29LL:
    case 31LL:
    case 33LL:
    case 34LL:
    case 35LL:
    case 37LL:
      goto LABEL_8;
    case 14LL:
      uint64_t v21 = static Calendar.current.getter(a1);
      static TimeZone.current.getter(v21);
      unint64_t v22 = (void *)swift_task_alloc(dword_21D59C);
      *(void *)(v4 + 176) = v22;
      *unint64_t v22 = v4;
      v22[1] = INIntentSlotValueType.getIntentSlotValue(userDialogAct:locale:locationResolver:locationProvider:dateTimeResolver:contactResolver:);
      OUTLINED_FUNCTION_13_15();
      return Siri_Nlu_External_UserDialogAct.dateComponentsValue(dateTimeResolving:locationProviding:locale:calendar:timeZone:)( v23,  v24,  v25,  v26);
    case 19LL:
      OUTLINED_FUNCTION_4_21();
      uint64_t v29 = (unint64_t *)&lazy cache variable for type metadata for NSUnitLength;
      unint64_t v30 = &OBJC_CLASS___NSUnitLength_ptr;
      goto LABEL_31;
    case 21LL:
    case 26LL:
      uint64_t v7 = Siri_Nlu_External_UserDialogAct.doubleValue.getter();
      uint64_t v8 = *(void *)(v4 + 16);
      if ((v9 & 1) != 0) {
        goto LABEL_38;
      }
      uint64_t v10 = &type metadata for Double;
      goto LABEL_20;
    case 24LL:
      uint64_t v7 = Siri_Nlu_External_UserDialogAct.intValue.getter();
      uint64_t v8 = *(void *)(v4 + 16);
      if ((v31 & 1) != 0) {
        goto LABEL_38;
      }
      uint64_t v10 = &type metadata for Int64;
LABEL_20:
      *(void *)(v8 + 24) = v10;
      *(void *)uint64_t v8 = v7;
      goto LABEL_42;
    case 27LL:
      static TimeZone.current.getter(a1);
      uint64_t v32 = (void *)swift_task_alloc(dword_21D5A4);
      *(void *)(v4 + 192) = v32;
      *uint64_t v32 = v4;
      v32[1] = INIntentSlotValueType.getIntentSlotValue(userDialogAct:locale:locationResolver:locationProvider:dateTimeResolver:contactResolver:);
      OUTLINED_FUNCTION_13_15();
      return Siri_Nlu_External_UserDialogAct.placementValue(locationResolving:locationProviding:locale:timeZone:)( v33,  v34,  v35,  v36);
    case 30LL:
      goto LABEL_22;
    case 32LL:
      OUTLINED_FUNCTION_4_21();
      uint64_t v29 = (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature;
      unint64_t v30 = &OBJC_CLASS___NSUnitTemperature_ptr;
      goto LABEL_31;
    case 36LL:
      Siri_Nlu_External_UserDialogAct.urlValue.getter(*(void *)(v4 + 168));
      uint64_t v39 = *(void *)(v4 + 168);
      uint64_t v40 = type metadata accessor for URL(0LL);
      OUTLINED_FUNCTION_14_21(v40);
      if (v41)
      {
        outlined destroy of URL?(v39, (uint64_t *)&demangling cache variable for type metadata for URL?);
        *(_OWORD *)&dword_0 = 0u;
        *(_OWORD *)&dword_10 = 0u;
      }

      else
      {
        v56 = OUTLINED_FUNCTION_20_21();
        OUTLINED_FUNCTION_10_14((uint64_t)v56);
      }

      goto LABEL_42;
    case 38LL:
      OUTLINED_FUNCTION_4_21();
      uint64_t v29 = (unint64_t *)&lazy cache variable for type metadata for NSUnitMass;
      unint64_t v30 = &OBJC_CLASS___NSUnitMass_ptr;
      goto LABEL_31;
    case 39LL:
      OUTLINED_FUNCTION_4_21();
      uint64_t v29 = (unint64_t *)&lazy cache variable for type metadata for NSUnitVolume;
      unint64_t v30 = &OBJC_CLASS___NSUnitVolume_ptr;
      goto LABEL_31;
    case 40LL:
      OUTLINED_FUNCTION_4_21();
      uint64_t v29 = (unint64_t *)&lazy cache variable for type metadata for NSUnitSpeed;
      unint64_t v30 = &OBJC_CLASS___NSUnitSpeed_ptr;
LABEL_31:
      OUTLINED_FUNCTION_72(v28, v29, v30);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v3, v1);
      id v42 = (id)NSDimension.init(forLocale:)(v2);
      uint64_t v43 = v3;
      goto LABEL_32;
    case 41LL:
      uint64_t v51 = *(void *)(v4 + 32);
      id v42 = [(id)objc_opt_self(NSUnitEnergy) kilowattHours];
      uint64_t v43 = v51;
LABEL_32:
      uint64_t v44 = Siri_Nlu_External_UserDialogAct.measurementValue(locale:)(v43);
      unsigned __int8 v47 = v46;
      if (v46 == 0xFF)
      {
        v52 = *(_OWORD **)(v4 + 16);

        _OWORD *v52 = 0u;
        v52[1] = 0u;
      }

      else
      {
        uint64_t v48 = v44;
        v49 = *(void **)(v4 + 16);
        if ((v46 & 1) != 0)
        {
          v54 = v45;
          id v55 = [objc_allocWithZone(NSMeasurement) initWithDoubleValue:v45 unit:*(double *)&v44];
          outlined consume of ParsedMeasurement?(v48, v54, v47);
          v49[3] = type metadata accessor for NSError( 0LL,  &lazy cache variable for type metadata for NSMeasurement,  &OBJC_CLASS___NSMeasurement_ptr);

          void *v49 = v55;
        }

        else
        {
          id v50 = [objc_allocWithZone(NSMeasurement) initWithDoubleValue:v42 unit:*(double *)&v44];
          v49[3] = type metadata accessor for NSError( 0LL,  &lazy cache variable for type metadata for NSMeasurement,  &OBJC_CLASS___NSMeasurement_ptr);

          void *v49 = v50;
        }
      }

      goto LABEL_42;
    default:
      if (v6 == 1)
      {
        char v53 = Siri_Nlu_External_UserDialogAct.BOOLValue.getter();
        uint64_t v8 = *(void *)(v4 + 16);
        if (v53 != 2)
        {
          *(void *)(v8 + 24) = &type metadata for Bool;
          *(_BYTE *)uint64_t v8 = v53 & 1;
          goto LABEL_42;
        }
      }

      else
      {
        if (v6 == 53)
        {
          id v11 = Siri_Nlu_External_UserDialogAct.currencyValue(locale:)();
          id v12 = v11;
          uint64_t v13 = *(void *)(v4 + 16);
          if (v11)
          {
            uint64_t v14 = (unint64_t *)&lazy cache variable for type metadata for INCurrencyAmount;
            uint64_t v15 = &OBJC_CLASS___INCurrencyAmount_ptr;
LABEL_15:
            *(void *)(v13 + 24) = OUTLINED_FUNCTION_72((uint64_t)v11, v14, v15);
            *(void *)uint64_t v13 = v12;
          }

          else
          {
LABEL_41:
            *(_OWORD *)uint64_t v13 = 0u;
            *(_OWORD *)(v13 + 16) = 0u;
          }

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 112);
  *(void *)(v3 + 200) = a1;
  *(void *)(v3 + 208) = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  if (v1) {
    uint64_t v5 = INIntentSlotValueType.getIntentSlotValue(userDialogAct:locale:locationResolver:locationProvider:dateTimeResolver:contactResolver:);
  }
  else {
    uint64_t v5 = INIntentSlotValueType.getIntentSlotValue(userDialogAct:locale:locationResolver:locationProvider:dateTimeResolver:contactResolver:);
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *(void *)(v1 + 200);
  uint64_t v3 = *(void *)(v1 + 16);
  if (v2)
  {
    *(void *)(v3 + 24) = OUTLINED_FUNCTION_72( a1,  &lazy cache variable for type metadata for CLPlacemark,  &OBJC_CLASS___CLPlacemark_ptr);
    *(void *)uint64_t v3 = v2;
  }

  else
  {
    *(_OWORD *)uint64_t v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
  }

  OUTLINED_FUNCTION_1_18();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v1 + 8));
}

LABEL_38:
      *(_OWORD *)uint64_t v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      goto LABEL_42;
  }

      v83 = (v35 - 1) & v35;
      v84 = v36;
      uint64_t v33 = __clz(__rbit64(v35)) + (v36 << 6);
    }

    uint64_t v38 = (uint64_t *)(*(void *)(v82 + 48) + 16 * v33);
    uint64_t v39 = v38[1];
    v89 = *v38;
    uint64_t v40 = v6[2];
    if (v40)
    {
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRetain(v39);
      char v41 = 0LL;
      id v42 = 0.5;
      v87 = v40;
      while (1)
      {
        if (v41 >= v6[2])
        {
          __break(1u);
          goto LABEL_76;
        }

        uint64_t v43 = v31[v41];
        if (*(void *)(v43 + 16)) {
          break;
        }
LABEL_52:
        if (++v41 == v40)
        {
          swift_bridgeObjectRelease(v6);
          goto LABEL_65;
        }
      }

      Hasher.init(_seed:)(v90, *(void *)(v43 + 40));
      swift_bridgeObjectRetain(v43);
      String.hash(into:)(v90, v89, v39);
      uint64_t v44 = Hasher._finalize()();
      v45 = -1LL << *(_BYTE *)(v43 + 32);
      unsigned __int8 v46 = v44 & ~v45;
      unsigned __int8 v47 = v43 + 56;
      if (((*(void *)(v43 + 56 + ((v46 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v46) & 1) == 0)
      {
        swift_bridgeObjectRelease(v43);
        goto LABEL_52;
      }

      uint64_t v48 = v31;
      v49 = v6;
      id v50 = *(void *)(v43 + 48);
      uint64_t v51 = (void *)(v50 + 16 * v46);
      v52 = v51[1];
      char v53 = *v51 == v89 && v52 == v39;
      if (!v53 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v51, v52, v89, v39, 0LL) & 1) == 0)
      {
        v54 = ~v45;
        id v55 = (v46 + 1) & v54;
        if (((*(void *)(v47 + ((v55 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v55) & 1) == 0)
        {
LABEL_63:
          swift_bridgeObjectRelease(v43);
          uint64_t v6 = v49;
          goto LABEL_50;
        }

        v56 = (uint64_t *)(v50 + 16 * v55);
        v57 = *v56;
        v58 = v56[1];
        for (j = *v56 == v89; ; j = *v61 == v89)
        {
          v60 = j && v58 == v39;
          if (v60 || (_stringCompareWithSmolCheck(_:_:expecting:)(v57, v58, v89, v39, 0LL) & 1) != 0) {
            break;
          }
          id v55 = (v55 + 1) & v54;
          if (((*(void *)(v47 + ((v55 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v55) & 1) == 0) {
            goto LABEL_63;
          }
          v61 = (uint64_t *)(v50 + 16 * v55);
          v57 = *v61;
          v58 = v61[1];
        }
      }

      swift_bridgeObjectRelease(v43);
      uint64_t v6 = v49;
      id v42 = v42 + 1.0;
LABEL_50:
      char v31 = v48;
      uint64_t v40 = v87;
      goto LABEL_52;
    }

    swift_bridgeObjectRetain(v39);
    id v42 = 0.5;
LABEL_65:
    v62 = log10(v27 / v42);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v85);
    v90[0] = v85;
    v64 = specialized __RawDictionaryStorage.find<A>(_:)(v89, v39);
    v66 = *(void *)(v85 + 16);
    v67 = (v65 & 1) == 0;
    v68 = v66 + v67;
    if (__OFADD__(v66, v67)) {
      break;
    }
    v69 = v64;
    v70 = v65;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Double>);
    v71 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v68);
    v72 = v89;
    if (v71)
    {
      v73 = specialized __RawDictionaryStorage.find<A>(_:)(v89, v39);
      if ((v70 & 1) != (v74 & 1)) {
        goto LABEL_80;
      }
      v69 = v73;
      v72 = v89;
    }

    uint64_t v32 = (void *)v90[0];
    if ((v70 & 1) != 0)
    {
      *(double *)(*(void *)(v90[0] + 56) + 8 * v69) = v62;
    }

    else
    {
      *(void *)(v90[0] + 8 * (v69 >> 6) + 64) |= 1LL << v69;
      v75 = (uint64_t *)(v32[6] + 16 * v69);
      *v75 = v72;
      v75[1] = v39;
      *(double *)(v32[7] + 8 * v69) = v62;
      v76 = v32[2];
      v77 = __OFADD__(v76, 1LL);
      v78 = v76 + 1;
      if (v77) {
        goto LABEL_77;
      }
      v32[2] = v78;
      swift_bridgeObjectRetain(v39);
    }

    swift_bridgeObjectRelease(v39);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    unint64_t v30 = v83;
    uint64_t v26 = v84;
  }

uint64_t INIntentSlotValueType.getIntentSlotValue(userDialogAct:locale:locationResolver:locationProvider:dateTimeResolver:contactResolver:)()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 128LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 104LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 112LL);
  *(void *)(*(void *)v1 + 184LL) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if (v0) {
    uint64_t v6 = INIntentSlotValueType.getIntentSlotValue(userDialogAct:locale:locationResolver:locationProvider:dateTimeResolver:contactResolver:);
  }
  else {
    uint64_t v6 = INIntentSlotValueType.getIntentSlotValue(userDialogAct:locale:locationResolver:locationProvider:dateTimeResolver:contactResolver:);
  }
  return swift_task_switch(v6, 0LL, 0LL);
}

{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v2 = *(void *)(v1 + 160);
  uint64_t v3 = type metadata accessor for DateComponents(0LL);
  OUTLINED_FUNCTION_14_21(v3);
  if (v4)
  {
    outlined destroy of URL?(v2, &demangling cache variable for type metadata for DateComponents?);
    *uint64_t v0 = 0u;
    v0[1] = 0u;
  }

  else
  {
    uint64_t v5 = OUTLINED_FUNCTION_20_21();
    OUTLINED_FUNCTION_10_14((uint64_t)v5);
  }

  OUTLINED_FUNCTION_1_18();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_9_16(*(void *)(v0 + 168));
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_12_9(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_9_16(*(void *)(v0 + 168));
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_12_9(*(uint64_t (**)(void))(v0 + 8));
}

void INIntentSlotValueType.toUsoTaskBuilder()(uint64_t a1)
{
  switch(a1)
  {
    case 10LL:
      OUTLINED_FUNCTION_0_5();
      OUTLINED_FUNCTION_2_5();
      static UsoTaskBuilder_execute_common_VoiceCommand.personTaskBuilder(value:)();
      break;
    case 14LL:
      OUTLINED_FUNCTION_0_5();
      static UsoTaskBuilder_execute_common_VoiceCommand.dateTaskBuilder()();
      break;
    case 19LL:
    case 32LL:
    case 38LL:
    case 39LL:
    case 40LL:
    case 41LL:
      OUTLINED_FUNCTION_0_5();
      static UsoTaskBuilder_execute_common_VoiceCommand.unitTaskBuilder(value:symbol:unitName:)( 0LL,  1,  0LL,  0LL,  0LL,  0LL);
      break;
    case 21LL:
    case 24LL:
    case 26LL:
      OUTLINED_FUNCTION_0_5();
      static UsoTaskBuilder_execute_common_VoiceCommand.numberTaskBuilder()();
      break;
    case 27LL:
      OUTLINED_FUNCTION_0_5();
      static UsoTaskBuilder_execute_common_VoiceCommand.placemarkTaskBuilder()();
      break;
    case 30LL:
      goto LABEL_10;
    case 36LL:
      OUTLINED_FUNCTION_0_5();
      OUTLINED_FUNCTION_2_5();
      static UsoTaskBuilder_execute_common_VoiceCommand.urlTaskBuilder(value:)();
      break;
    default:
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v2 = type metadata accessor for Logger(0LL);
      uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
      uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
      os_log_type_t v5 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        *(_DWORD *)uint64_t v6 = 134217984;
        uint64_t v9 = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v6 + 4);
        _os_log_impl( &dword_0,  v4,  v5,  "SiriLinkFlow does not yet support providing NLV4 context for parameter type: %ld.",  v6,  0xCu);
        OUTLINED_FUNCTION_1_0((uint64_t)v6);
      }

LABEL_10:
      OUTLINED_FUNCTION_0_5();
      uint64_t v7 = OUTLINED_FUNCTION_2_5();
      static UsoTaskBuilder_execute_common_VoiceCommand.stringTaskBuilder(value:)(v7, v8);
      break;
  }

uint64_t OUTLINED_FUNCTION_1_18()
{
  return swift_task_dealloc(*(void *)(v0 + 168));
}

  ;
}

uint64_t OUTLINED_FUNCTION_9_16(uint64_t a1)
{
  return swift_task_dealloc(a1);
}

uint64_t OUTLINED_FUNCTION_10_14(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))(a1, v2, v1);
}

  ;
}

uint64_t OUTLINED_FUNCTION_14_21(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, a1);
}

void *OUTLINED_FUNCTION_20_21()
{
  v1[3] = v0;
  return __swift_allocate_boxed_opaque_existential_1(v1);
}

void *Values.no.unsafeMutableAddressor()
{
  return &static Values.no;
}

void *Values.yes.unsafeMutableAddressor()
{
  return &static Values.yes;
}

void *Nodes.domain.unsafeMutableAddressor()
{
  return &static Nodes.domain;
}

const char *Values.domainName.unsafeMutableAddressor()
{
  return "voiceCommands";
}

void *Nodes.confirmation.unsafeMutableAddressor()
{
  return &static Nodes.confirmation;
}

void *Nodes.text.unsafeMutableAddressor()
{
  return &static Nodes.text;
}

void *Nodes.scalar.unsafeMutableAddressor()
{
  return &static Nodes.scalar;
}

void *Nodes.dateTime.unsafeMutableAddressor()
{
  return &static Nodes.dateTime;
}

void *Nodes.unit.unsafeMutableAddressor()
{
  return &static Nodes.unit;
}

void *Nodes.contact.unsafeMutableAddressor()
{
  return &static Nodes.contact;
}

void *Nodes.option.unsafeMutableAddressor()
{
  return &static Nodes.option;
}

void *Nodes.voiceCommandReference.unsafeMutableAddressor()
{
  return &static Nodes.voiceCommandReference;
}

void *Nodes.location.unsafeMutableAddressor()
{
  return &static Nodes.location;
}

void *Labels.voiceCommandName.unsafeMutableAddressor()
{
  return &static Labels.voiceCommandName;
}

unint64_t static Labels.voiceCommandName.getter()
{
  return OUTLINED_FUNCTION_0_22(16LL);
}

void *Labels.category.unsafeMutableAddressor()
{
  return &static Labels.category;
}

unint64_t static Labels.category.getter()
{
  return OUTLINED_FUNCTION_0_22(20LL);
}

void *Labels.voiceCommandConfirmation.unsafeMutableAddressor()
{
  return &static Labels.voiceCommandConfirmation;
}

unint64_t static USONodes.confirmation.getter()
{
  return OUTLINED_FUNCTION_0_22(24LL);
}

void *Labels.reference.unsafeMutableAddressor()
{
  return &static Labels.reference;
}

unint64_t static Labels.reference.getter()
{
  return OUTLINED_FUNCTION_0_22(21LL);
}

void *Labels.text.unsafeMutableAddressor()
{
  return &static Labels.text;
}

unint64_t static Labels.text.getter()
{
  return OUTLINED_FUNCTION_0_22(16LL);
}

void *Labels.scalar.unsafeMutableAddressor()
{
  return &static Labels.scalar;
}

unint64_t static Labels.scalar.getter()
{
  return OUTLINED_FUNCTION_0_22(18LL);
}

void *Labels.unit.unsafeMutableAddressor()
{
  return &static Labels.unit;
}

unint64_t static Labels.unit.getter()
{
  return OUTLINED_FUNCTION_0_22(16LL);
}

void *Labels.dateTime.unsafeMutableAddressor()
{
  return &static Labels.dateTime;
}

unint64_t static Labels.dateTime.getter()
{
  return OUTLINED_FUNCTION_0_22(20LL);
}

void *Labels.location.unsafeMutableAddressor()
{
  return &static Labels.location;
}

unint64_t static Labels.location.getter()
{
  return OUTLINED_FUNCTION_0_22(20LL);
}

void *Labels.contact.unsafeMutableAddressor()
{
  return &static Labels.contact;
}

unint64_t static Labels.contact.getter()
{
  return OUTLINED_FUNCTION_0_22(19LL);
}

void *Labels.option.unsafeMutableAddressor()
{
  return &static Labels.option;
}

unint64_t static Labels.option.getter()
{
  return OUTLINED_FUNCTION_0_22(18LL);
}

void *Values.abort.unsafeMutableAddressor()
{
  return &static Values.abort;
}

unint64_t static Values.abort.getter()
{
  return OUTLINED_FUNCTION_0_22(55LL);
}

unint64_t static Values.yes.getter()
{
  return OUTLINED_FUNCTION_0_22(52LL);
}

unint64_t static Values.no.getter()
{
  return OUTLINED_FUNCTION_0_22(51LL);
}

void *Values.previous.unsafeMutableAddressor()
{
  return &static Values.previous;
}

unint64_t static Values.previous.getter()
{
  return OUTLINED_FUNCTION_0_22(55LL);
}

void *Values.next.unsafeMutableAddressor()
{
  return &static Values.next;
}

unint64_t static Values.next.getter()
{
  return OUTLINED_FUNCTION_0_22(51LL);
}

void *Values.repeat.unsafeMutableAddressor()
{
  return &static Values.repeat;
}

unint64_t static Values.repeat.getter()
{
  return OUTLINED_FUNCTION_0_22(53LL);
}

uint64_t static Values.domainName.getter()
{
  return 0x6D6F436563696F76LL;
}

unint64_t static Nodes.domain.getter()
{
  return OUTLINED_FUNCTION_0_22(31LL);
}

void *Nodes.voiceCommandName.unsafeMutableAddressor()
{
  return &static Nodes.voiceCommandName;
}

unint64_t static Nodes.voiceCommandName.getter()
{
  return OUTLINED_FUNCTION_0_22(34LL);
}

unint64_t static Nodes.confirmation.getter()
{
  return OUTLINED_FUNCTION_0_22(42LL);
}

unint64_t static Nodes.voiceCommandReference.getter()
{
  return OUTLINED_FUNCTION_0_22(39LL);
}

unint64_t static Nodes.text.getter()
{
  return OUTLINED_FUNCTION_0_22(34LL);
}

unint64_t static Nodes.scalar.getter()
{
  return OUTLINED_FUNCTION_0_22(36LL);
}

unint64_t static Nodes.unit.getter()
{
  return OUTLINED_FUNCTION_0_22(34LL);
}

unint64_t static Nodes.dateTime.getter()
{
  return OUTLINED_FUNCTION_0_22(38LL);
}

unint64_t static Nodes.location.getter()
{
  return OUTLINED_FUNCTION_0_22(38LL);
}

unint64_t static Nodes.contact.getter()
{
  return OUTLINED_FUNCTION_0_22(37LL);
}

unint64_t static Nodes.option.getter()
{
  return OUTLINED_FUNCTION_0_22(36LL);
}

void *Nodes.pagination.unsafeMutableAddressor()
{
  return &static Nodes.pagination;
}

unint64_t static Nodes.pagination.getter()
{
  return OUTLINED_FUNCTION_0_22(40LL);
}

void type metadata accessor for Labels()
{
}

void type metadata accessor for Values()
{
}

void type metadata accessor for Nodes()
{
}

unint64_t OUTLINED_FUNCTION_0_22(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
}

void *specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  return specialized _arrayForceCast<A, B>(_:)( a1,  (uint64_t)&type metadata for WFChooseFromListDisambiguationItem,  (uint64_t)&protocol witness table for WFChooseFromListDisambiguationItem,  (uint64_t)&unk_1F65C0);
}

{
  int64_t v1;
  void *v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v8;
  ValueMetadata *v9;
  _UNKNOWN **v10;
  _BYTE v11[88];
  void *v12;
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    id v12 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = a1 + 32;
    do
    {
      outlined init with copy of CustomIntentDisambiguationItem(v4, (uint64_t)v11);
      id v12 = v2;
      uint64_t v6 = v2[2];
      os_log_type_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v5 > 1),  v6 + 1,  1);
        uint64_t v2 = v12;
      }

      uint64_t v9 = &type metadata for CustomIntentDisambiguationItem;
      uint64_t v10 = &protocol witness table for CustomIntentDisambiguationItem;
      *(void *)&uint64_t v8 = swift_allocObject(&unk_1F6610, 97LL, 7LL);
      outlined init with copy of CustomIntentDisambiguationItem((uint64_t)v11, v8 + 16);
      v2[2] = v6 + 1;
      outlined init with take of AceServiceInvokerAsync(&v8, (uint64_t)&v2[5 * v6 + 4]);
      outlined destroy of CustomIntentDisambiguationItem((uint64_t)v11);
      v4 += 88LL;
      --v1;
    }

    while (v1);
  }

  return v2;
}

{
  uint64_t v1;
  void *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    id v12 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v4 = (uint64_t *)(a1 + 32);
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v10 = *v4;
      swift_bridgeObjectRetain_n(v10, 2LL);
      os_log_type_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
      swift_dynamicCast(&v11, &v10, v5, v6, 7LL);
      uint64_t v7 = v11;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v12;
      }

      uint64_t v8 = v2[2];
      if (v8 >= v2[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v12;
      }

      v2[2] = v8 + 1;
      v2[v8 + 4] = v7;
      ++v4;
      --v1;
    }

    while (v1);
  }

  return v2;
}

{
  return specialized _arrayForceCast<A, B>(_:)( a1,  (uint64_t)&type metadata for ShortcutsLinkDisambiguationItem,  (uint64_t)&protocol witness table for ShortcutsLinkDisambiguationItem,  (uint64_t)&unk_1F65E8);
}

{
  int64_t v1;
  void *v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void v9[2];
  _OWORD v10[2];
  void *v11;
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    id v11 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      os_log_type_t v5 = *v4;
      v9[0] = *(v4 - 1);
      v9[1] = v5;
      swift_bridgeObjectRetain(v5);
      swift_dynamicCast(v10, v9, &type metadata for String, (char *)&type metadata for Any + 8, 7LL);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v2[2] + 1LL, 1);
        uint64_t v2 = v11;
      }

      uint64_t v7 = v2[2];
      uint64_t v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v6 > 1),  v7 + 1,  1);
        uint64_t v2 = v11;
      }

      v4 += 2;
      v2[2] = v7 + 1;
      outlined init with take of Any(v10, &v2[4 * v7 + 4]);
      --v1;
    }

    while (v1);
  }

  return v2;
}

void *specialized _arrayForceCast<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v4 = *(void *)(a1 + 16);
  os_log_type_t v5 = _swiftEmptyArrayStorage;
  if (v4)
  {
    uint64_t v28 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v4, 0);
    os_log_type_t v5 = _swiftEmptyArrayStorage;
    uint64_t v7 = (void **)(a1 + 80);
    do
    {
      uint64_t v8 = (uint64_t)*(v7 - 5);
      uint64_t v9 = (uint64_t)*(v7 - 3);
      uint64_t v22 = (uint64_t)*(v7 - 4);
      uint64_t v23 = (uint64_t)*(v7 - 6);
      uint64_t v10 = *(v7 - 2);
      uint64_t v11 = (uint64_t)*(v7 - 1);
      id v12 = *v7;
      uint64_t v28 = v5;
      unint64_t v13 = v5[2];
      unint64_t v14 = v5[3];
      int64_t v24 = v13 + 1;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v9);
      id v15 = v10;
      swift_bridgeObjectRetain(v11);
      id v16 = v12;
      if (v13 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v14 > 1),  v24,  1);
        os_log_type_t v5 = v28;
      }

      v7 += 7;
      uint64_t v26 = a2;
      uint64_t v27 = a3;
      uint64_t v17 = (void *)swift_allocObject(a4, 72LL, 7LL);
      *(void *)&__int128 v25 = v17;
      v17[2] = v23;
      v17[3] = v8;
      v17[4] = v22;
      v17[5] = v9;
      v17[6] = v10;
      v17[7] = v11;
      v17[8] = v16;
      v5[2] = v24;
      outlined init with take of AceServiceInvokerAsync(&v25, (uint64_t)&v5[5 * v13 + 4]);
      --v4;
    }

    while (v4);
  }

  return v5;
}

void *specialized Array.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return specialized Array.init<A>(_:)( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

{
  return specialized Array.init<A>(_:)( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

void *specialized Array.init<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  if ((a4 & 1) == 0) {
    goto LABEL_2;
  }
  uint64_t v11 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  uint64_t v12 = swift_unknownObjectRetain_n(a1, 2LL);
  unint64_t v13 = (void *)swift_dynamicCastClass(v12, v11);
  if (!v13)
  {
    OUTLINED_FUNCTION_28_11();
    unint64_t v13 = _swiftEmptyArrayStorage;
  }

  uint64_t v14 = v13[2];
  uint64_t v15 = swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v15 = a1;
  if (v14 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease(v15);
LABEL_2:
    uint64_t v10 = (void *)a5(a1, a2, a3, a4);
    goto LABEL_9;
  }

  uint64_t v10 = (void *)swift_dynamicCastClass(a1, v11);
  if (!v10)
  {
    OUTLINED_FUNCTION_28_11();
    uint64_t v10 = _swiftEmptyArrayStorage;
  }

uint64_t CustomIntentNLContextProvider.deviceState.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 16, a1);
}

void CustomIntentNLContextProvider.__allocating_init(deviceState:)(__int128 *a1)
{
  uint64_t v3 = swift_allocObject(v1, 56LL, 7LL);
  outlined init with take of AceServiceInvokerAsync(a1, v3 + 16);
  OUTLINED_FUNCTION_1();
}

uint64_t WorkflowHomePodSnippetProvider.init(deviceState:)(__int128 *a1)
{
  return v1;
}

uint64_t CustomIntentNLContextProvider.makeNeedsValueContextFor(intent:parameter:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[17] = a4;
  v5[18] = v4;
  v5[15] = a2;
  v5[16] = a3;
  v5[14] = a1;
  uint64_t v6 = OUTLINED_FUNCTION_56_3();
  v5[19] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[20] = v7;
  v5[21] = OUTLINED_FUNCTION_9_0(v7);
  return OUTLINED_FUNCTION_21_0();
}

void CustomIntentNLContextProvider.makeNeedsValueContextFor(intent:parameter:)()
{
  if (INIntent.isBooleanParameter(parameterName:)(*(Swift::String *)(v0 + 128)))
  {
    VoiceCommandNLContextProvider.makeContextForBoolNeedsValuePrompt(intent:parameter:)();
  }

  else
  {
    uint64_t v20 = *(void *)(v0 + 128);
    uint64_t v21 = *(void *)(v0 + 136);
    id v22 = [*(id *)(v0 + 120) _codableDescription];
    outlined bridged method (mbgnn) of @objc INCodableDescription.attribute(byName:)(v20, v21, v22);
    int64_t v24 = v23;

    if (!v24)
    {
      type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand(0LL);
      static UsoTaskBuilder_execute_common_VoiceCommand.stringTaskBuilder(value:)(0LL, 0LL);
      VoiceCommandNLContextProvider.makeContextForNeedsValue(taskBuilder:)(v25);
      OUTLINED_FUNCTION_53_7();
      goto LABEL_8;
    }

    CustomIntentNLContextProvider.intentCodableAttributeToUsoTaskBuilder(attribute:)(v24);
    uint64_t v27 = swift_retain(v26);
    VoiceCommandNLContextProvider.makeContextForNeedsValue(taskBuilder:)(v27);
    OUTLINED_FUNCTION_53_7();
    if (INCodableAttribute.requiresDictationPrompt()())
    {
      NLContextUpdate.dictationPromptTargetDomain.setter(0xD00000000000001FLL, 0x80000000001935E0LL);
      uint64_t v28 = INCodableAttribute.promptTargets()();
      NLContextUpdate.dictationPromptTargetNodes.setter(v28);
    }

    else
    {
      NLContextUpdate.weightedPromptTargetDomain.setter(0xD00000000000001FLL);
      uint64_t v29 = INCodableAttribute.promptTargets()();
      NLContextUpdate.weightedPromptResponseTargets.setter(v29);
    }

    OUTLINED_FUNCTION_53_7();
  }

  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v3 = *(void **)(v0 + 120);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = OUTLINED_FUNCTION_23_4(v4);
  *(_OWORD *)(v5 + 16) = xmmword_17E150;
  id v6 = v3;
  uint64_t v7 = OUTLINED_FUNCTION_15_12();
  *(void *)(v0 + 16) = v3;
  *(_BYTE *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = v7;
  *(void *)(v0 + 40) = v8;
  *(void *)(v0 + 48) = v2;
  *(void *)(v0 + 56) = v1;
  *(void *)(v0 + 72) = 0LL;
  *(void *)(v0 + 80) = 0LL;
  *(void *)(v0 + 64) = 0LL;
  OUTLINED_FUNCTION_24_14();
  swift_bridgeObjectRetain(v1);
  uint64_t v9 = CustomIntentStateAttachment.asDictionary()();
  objc_allocWithZone(&OBJC_CLASS___SABaseAceObject);
  swift_bridgeObjectRetain(v9);
  @nonobjc SABaseAceObject.init(dictionary:)(v10);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v14 = *(void *)(v0 + 160);
    uint64_t v13 = *(void *)(v0 + 168);
    uint64_t v30 = *(void *)(v0 + 152);
    uint64_t v16 = *(void *)(v0 + 112);
    uint64_t v15 = *(void **)(v0 + 120);
    swift_bridgeObjectRelease();

    OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_28_4();
    uint64_t v17 = swift_bridgeObjectRelease();
    *(void *)(v5 + 32) = v12;
    specialized Array._endMutation()(v17, v18, v19);
    NLContextUpdate.conversationStateAttachments.setter(v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v16, v13, v30);
LABEL_8:
    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  __break(1u);
}

void static CustomIntentNLContextProvider.attributeForParameter(intent:parameter:)( void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = [a1 _codableDescription];
  outlined bridged method (mbgnn) of @objc INCodableDescription.attribute(byName:)(a2, a3, v5);

  OUTLINED_FUNCTION_2();
}

void CustomIntentNLContextProvider.intentCodableAttributeToUsoTaskBuilder(attribute:)(void *a1)
{
  uint64_t v2 = objc_opt_self(&OBJC_CLASS___INCodableCustomObjectAttribute);
  if (OUTLINED_FUNCTION_10_12(v2))
  {
LABEL_2:
    type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand(0LL);
    static UsoTaskBuilder_execute_common_VoiceCommand.stringTaskBuilder(value:)(0LL, 0LL);
    return;
  }

  uint64_t v3 = objc_opt_self(&OBJC_CLASS___INCodableEnumAttribute);
  if (OUTLINED_FUNCTION_10_12(v3))
  {
    unint64_t v4 = lazy protocol witness table accessor for type CustomIntentNLContextProviderError and conformance CustomIntentNLContextProviderError();
    uint64_t v5 = swift_allocError(&type metadata for CustomIntentNLContextProviderError, v4, 0LL, 0LL);
    swift_willThrow(v5, v6, v7, v8, v9);
  }

  else
  {
    uint64_t v10 = objc_opt_self(&OBJC_CLASS___INCodableObjectAttribute);
    if (!OUTLINED_FUNCTION_10_12(v10))
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v14 = type metadata accessor for Logger(0LL);
      __swift_project_value_buffer(v14, (uint64_t)static Logger.voiceCommands);
      id v15 = a1;
      uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v24 = swift_slowAlloc(32LL, -1LL);
        uint64_t v27 = v24;
        *(_DWORD *)uint64_t v18 = 136315138;
        id v19 = v15;
        id v20 = [v19 description];
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v23 = v22;

        uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v18 + 4);

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v16, v17, "Unsupported INCodableAttribute when building SystemDialogAct %s", v18, 0xCu);
        swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
        OUTLINED_FUNCTION_1_0(v24);
        OUTLINED_FUNCTION_1_0((uint64_t)v18);
      }

      else
      {
      }

      goto LABEL_2;
    }

    uint64_t v11 = objc_opt_self(&OBJC_CLASS___INCodableObjectAttribute);
    uint64_t v12 = (void *)swift_dynamicCastObjCClassUnconditional(a1, v11, 0LL, 0LL, 0LL);
    id v13 = a1;
    INIntentSlotValueType.toUsoTaskBuilder()((uint64_t)[v12 valueType]);
  }

uint64_t CustomIntentNLContextProvider.makeNeedsDisambiguationContextFor(intent:parameter:resolutionResult:disambiguationItems:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[24] = a6;
  v7[25] = v6;
  v7[22] = a4;
  v7[23] = a5;
  v7[20] = a2;
  v7[21] = a3;
  v7[19] = a1;
  uint64_t v8 = type metadata accessor for Locale(0LL);
  v7[26] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[27] = v9;
  v7[28] = OUTLINED_FUNCTION_9_0(v9);
  uint64_t v10 = OUTLINED_FUNCTION_56_3();
  v7[29] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v7[30] = v11;
  v7[31] = OUTLINED_FUNCTION_9_0(v11);
  return OUTLINED_FUNCTION_21_0();
}

void CustomIntentNLContextProvider.makeNeedsDisambiguationContextFor(intent:parameter:resolutionResult:disambiguationItems:)()
{
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void **)(v0 + 160);
  specialized _arrayForceCast<A, B>(_:)(*(void *)(v0 + 192));
  VoiceCommandNLContextProvider.makeContextForDisambiguation(items:)();
  OUTLINED_FUNCTION_69();
  id v4 = [v3 _codableDescription];
  outlined bridged method (mbgnn) of @objc INCodableDescription.attribute(byName:)(v2, v1, v4);
  uint64_t v6 = v5;

  if (!v6) {
    goto LABEL_9;
  }
  unint64_t v7 = *(void *)(v0 + 224);
  uint64_t v8 = *(void **)(v0 + 200);
  uint64_t v41 = *(void *)(v0 + 216);
  uint64_t v42 = *(void *)(v0 + 208);
  uint64_t v9 = *(void *)(v0 + 176);
  uint64_t v10 = *(void **)(v0 + 160);
  uint64_t v11 = *(void *)(v0 + 168);
  uint64_t v40 = v6;
  uint64_t v12 = INCodableAttribute.disambiguationPromptTargets()();
  NLContextUpdate.weightedPromptResponseTargets.setter(v12);
  id v13 = v8 + 2;
  uint64_t v14 = v8[5];
  uint64_t v15 = v8[6];
  __swift_project_boxed_opaque_existential_1(v13, v14);
  dispatch thunk of DeviceState.siriLocale.getter(v14, v15);
  INIntentResolutionResult.getDisplayHints(intent:parameter:locale:shouldIncludeOrdinalReference:)(v10, v11, v9, v7, 1);
  uint64_t v17 = v16;
  (*(void (**)(unint64_t, uint64_t))(v41 + 8))(v7, v42);
  NLContextUpdate.displayHints.setter(v17);
  uint64_t v18 = (uint64_t)v10;
  uint64_t v19 = v0 + 112;
  INIntentResolutionResult.safeJSONDictionaryRepresentation(for:parameterName:)(v18);
  specialized Dictionary.subscript.getter(0x6F697463656C6573LL, 0xEE00736D6574496ELL, v20, (_OWORD *)(v0 + 112));
  OUTLINED_FUNCTION_20();
  if (*(void *)(v0 + 136))
  {
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[AnyHashable : Any]]);
    else {
      uint64_t v22 = 0LL;
    }
  }

  else
  {
    outlined destroy of Any?(v19);
    uint64_t v22 = 0LL;
  }

  uint64_t v24 = *(void *)(v0 + 168);
  uint64_t v23 = *(void *)(v0 + 176);
  uint64_t v25 = *(void **)(v0 + 160);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v27 = OUTLINED_FUNCTION_23_4(v26);
  *(_OWORD *)(v27 + 16) = xmmword_17E150;
  id v28 = v25;
  uint64_t v29 = OUTLINED_FUNCTION_15_12();
  *(void *)(v0 + 16) = v25;
  *(_BYTE *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = v29;
  *(void *)(v0 + 40) = v30;
  *(void *)(v0 + 48) = v24;
  *(void *)(v0 + 56) = v23;
  *(void *)(v0 + 72) = 0LL;
  *(void *)(v0 + 80) = 0LL;
  *(void *)(v0 + 64) = v22;
  OUTLINED_FUNCTION_24_14();
  swift_bridgeObjectRetain(v23);
  CustomIntentStateAttachment.asDictionary()();
  objc_allocWithZone(&OBJC_CLASS___SABaseAceObject);
  uint64_t v31 = OUTLINED_FUNCTION_5_14();
  @nonobjc SABaseAceObject.init(dictionary:)(v31);
  if (v32)
  {
    uint64_t v33 = v32;
    uint64_t v34 = *(void **)(v0 + 160);
    OUTLINED_FUNCTION_37();

    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_28_4();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)(v27 + 32) = v33;
    specialized Array._endMutation()(v35, v36, v37);
    OUTLINED_FUNCTION_25_19();

LABEL_9:
    uint64_t v38 = *(void *)(v0 + 232);
    uint64_t v39 = *(void *)(v0 + 152);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v0 + 240) + 32LL))(v39, *(void *)(v0 + 248), v38);
    __swift_storeEnumTagSinglePayload(v39, 0LL, 1LL, v38);
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  __break(1u);
}

void CustomIntentNLContextProvider.makeNeedsConfirmationContextFor(intent:parameter:resolutionResult:)( void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v3 = OUTLINED_FUNCTION_23_4(v2);
  *(_OWORD *)(v3 + 16) = xmmword_17E150;
  id v4 = a1;
  OUTLINED_FUNCTION_15_12();
  OUTLINED_FUNCTION_5_14();
  uint64_t v5 = CustomIntentStateAttachment.asDictionary()();
  id v6 = objc_allocWithZone(&OBJC_CLASS___SABaseAceObject);
  swift_bridgeObjectRetain(v5);
  @nonobjc SABaseAceObject.init(dictionary:)(v7);
  if (v8)
  {
    uint64_t v9 = v8;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_37();
    swift_bridgeObjectRelease();

    uint64_t v10 = OUTLINED_FUNCTION_69();
    *(void *)(v3 + 32) = v9;
    specialized Array._endMutation()(v10, v11, v12);
    OUTLINED_FUNCTION_25_19();
  }

  else
  {
    __break(1u);
  }

void CustomIntentNLContextProvider.makeContextForConfirmIntent(intent:confirmIntentResponse:acceptLabel:denyLabel:)( void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SemanticValue?);
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_83();
  uint64_t v54 = v9;
  uint64_t v58 = type metadata accessor for DisplayHint(0LL);
  uint64_t v10 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  OUTLINED_FUNCTION_83();
  uint64_t v57 = v11;
  uint64_t v12 = type metadata accessor for SemanticValue(0LL);
  uint64_t v55 = *(void *)(v12 - 8);
  uint64_t v56 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v51 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v51 - v15;
  uint64_t v52 = a3;
  uint64_t v53 = a4;
  VoiceCommandNLContextProvider.makeContextForConfirmation(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:)();
  uint64_t v17 = type metadata accessor for MachineUtteranceBuilder(0LL);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  MachineUtteranceBuilder.init()();
  Swift::String v18 = INIntent.category()();
  dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)( 0xD000000000000014LL,  0x8000000000194C80LL,  v18._countAndFlagsBits,  v18._object);
  swift_release();
  uint64_t v19 = OUTLINED_FUNCTION_69();
  uint64_t v20 = dispatch thunk of MachineUtteranceBuilder.build()(v19);
  uint64_t v22 = v21;
  swift_release();
  NLContextUpdate.nlInput.setter(v20, v22);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v24 = OUTLINED_FUNCTION_23_4(v23);
  *(_OWORD *)(v24 + 16) = xmmword_17E150;
  id v25 = a1;
  uint64_t v26 = OUTLINED_FUNCTION_15_12();
  id v60 = v25;
  char v61 = 1;
  v62 = v26;
  uint64_t v63 = v27;
  uint64_t v64 = 0LL;
  uint64_t v65 = 0LL;
  uint64_t v66 = 0LL;
  v67 = a2;
  uint64_t v68 = 0LL;
  char v69 = 1;
  uint64_t v70 = 0LL;
  char v71 = 1;
  id v28 = a2;
  uint64_t v29 = CustomIntentStateAttachment.asDictionary()();
  id v30 = objc_allocWithZone(&OBJC_CLASS___SABaseAceObject);
  swift_bridgeObjectRetain(v29);
  @nonobjc SABaseAceObject.init(dictionary:)(v31);
  if (v32)
  {
    uint64_t v33 = v32;

    swift_bridgeObjectRelease_n(0LL, 2LL);
    OUTLINED_FUNCTION_28_4();

    uint64_t v34 = swift_bridgeObjectRelease();
    *(void *)(v24 + 32) = v33;
    uint64_t v59 = v24;
    specialized Array._endMutation()(v34, v35, v36);
    OUTLINED_FUNCTION_25_19();
    Swift::String v37 = INIntent.verb()();
    swift_bridgeObjectRelease();
    unint64_t v38 = ((unint64_t)v37._object >> 56) & 0xF;
    if (v38)
    {
      uint64_t v39 = v53;
      swift_bridgeObjectRetain(v53);
      SemanticValue.init(string:label:)(v52, v39, 0xD000000000000018LL, 0x8000000000194CA0LL);
      uint64_t v40 = v54;
      uint64_t v41 = v56;
      __swift_storeEnumTagSinglePayload(v54, 1LL, 1LL, v56);
      uint64_t v42 = v55;
      uint64_t v43 = v51;
      (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v51, v16, v41);
      uint64_t v44 = v57;
      DisplayHint.init(idValue:displayValue:)(v40, v43);
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DisplayHint>);
      uint64_t v46 = *(unsigned __int8 *)(v10 + 80);
      uint64_t v47 = (v46 + 32) & ~v46;
      uint64_t v48 = swift_allocObject(v45, v47 + *(void *)(v10 + 72), v46 | 7);
      *(_OWORD *)(v48 + 16) = xmmword_17E650;
      uint64_t v49 = v48 + v47;
      uint64_t v50 = v58;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v49, v44, v58);
      NLContextUpdate.displayHints.setter(v48);
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v44, v50);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v16, v41);
    }

    OUTLINED_FUNCTION_24_0();
  }

  else
  {
    __break(1u);
  }

void CustomIntentNLContextProvider.makeContextForPagination(intent:parameterName:displayHints:selectionItems:paginatedItems:)( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8 = v7;
  v98 = a5;
  v99 = a4;
  uint64_t v14 = OUTLINED_FUNCTION_56_3();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<CustomIntentDisambiguationItem>);
  uint64_t v96 = a6;
  uint64_t v97 = v18;
  uint64_t v19 = PaginatedItemContainer.items.getter(v18);
  specialized _arrayForceCast<A, B>(_:)(v19);
  OUTLINED_FUNCTION_20();
  uint64_t v95 = v8;
  VoiceCommandNLContextProvider.makeContextForDisambiguation(items:)();
  OUTLINED_FUNCTION_69();
  NLContextUpdate.weightedPromptResponseOptions.setter(&outlined read-only object #0 of CustomIntentNLContextProvider.makeContextForPagination(intent:parameterName:displayHints:selectionItems:paginatedItems:));
  NLContextUpdate.dictationPromptTargetNodes.setter(&outlined read-only object #1 of CustomIntentNLContextProvider.makeContextForPagination(intent:parameterName:displayHints:selectionItems:paginatedItems:));
  NLContextUpdate.dictationPromptAbortValues.setter(&outlined read-only object #2 of CustomIntentNLContextProvider.makeContextForPagination(intent:parameterName:displayHints:selectionItems:paginatedItems:));
  id v93 = a1;
  id v20 = [a1 _codableDescription];
  uint64_t v94 = a2;
  outlined bridged method (mbgnn) of @objc INCodableDescription.attribute(byName:)(a2, a3, v20);
  id v22 = v21;

  if (!v22) {
    goto LABEL_35;
  }
  if (!v99 || !v98)
  {
LABEL_34:

LABEL_35:
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a7, v17, v14);
    goto LABEL_36;
  }

  id v89 = v22;
  uint64_t v88 = a3;
  uint64_t v90 = v15;
  uint64_t v91 = v14;
  uint64_t v92 = a7;
  uint64_t v23 = v97;
  Swift::Int v24 = PaginatedItemContainer.getCurrentPageIndex()();
  uint64_t v25 = PaginatedItemContainer.pageSize.getter(v23);
  uint64_t v26 = v24 * v25;
  if ((unsigned __int128)(v24 * (__int128)v25) >> 64 != (v24 * v25) >> 63)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }

  uint64_t v27 = *(void *)(PaginatedItemContainer.page.getter(v23) + 16);
  swift_bridgeObjectRelease();
  uint64_t v28 = v26 + v27;
  if (__OFADD__(v26, v27))
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }

  if (v99[2] < v28 || v98[2] < v28)
  {

    (*(void (**)(uint64_t, char *, uint64_t))(v90 + 32))(v92, v17, v91);
LABEL_36:
    OUTLINED_FUNCTION_24_0();
    return;
  }

  if (v28 < v26) {
    goto LABEL_43;
  }
  if ((v26 & 0x8000000000000000LL) == 0)
  {
    uint64_t v29 = (uint64_t)(v98 + 4);
    unint64_t v30 = (2 * v28) | 1;
    swift_bridgeObjectRetain(v98);
    uint64_t v32 = specialized Array.init<A>(_:)( v31,  v29,  v26,  v30,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
    uint64_t v33 = __chkstk_darwin(v32);
    int v87 = v95;
    uint64_t v95 = v33;
    v98 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySDySSypGGG_Say11SiriKitFlow11DisplayHintVGs5NeverOTg5017_sSiSDySSypGSay11fg6Flow11ij33VGIgygo_Si6offset_AA7elementtAEs5K11OIegnrzr_TRSiAhNIgygo_Tf1cn_n( v33,  (uint64_t (*)(uint64_t, uint64_t, __n128))partial apply for closure #1 in CustomIntentNLContextProvider.makeContextForPagination(intent:parameterName:displayHints:selectionItems:paginatedItems:));
    uint64_t v34 = v98[2];
    if (v34)
    {
      uint64_t v35 = v98 + 4;
      uint64_t v36 = _swiftEmptyArrayStorage;
      while (1)
      {
        uint64_t v37 = *v35;
        uint64_t v38 = *(void *)(*v35 + 16LL);
        uint64_t v39 = v36[2];
        uint64_t v40 = v39 + v38;
        if (__OFADD__(v39, v38)) {
          break;
        }
        swift_bridgeObjectRetain(*v35);
        uint64_t v41 = OUTLINED_FUNCTION_5_14();
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v41);
        if (!(_DWORD)isUniquelyReferenced_nonNull_native || v40 > v36[3] >> 1)
        {
          if (v39 <= v40) {
            uint64_t v43 = v39 + v38;
          }
          else {
            uint64_t v43 = v39;
          }
          uint64_t v36 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v43,  1LL,  (uint64_t)v36);
        }

        if (*(void *)(v37 + 16))
        {
          uint64_t v44 = v36[2];
          uint64_t v45 = (v36[3] >> 1) - v44;
          uint64_t v46 = type metadata accessor for DisplayHint(0LL);
          if (v45 < v38) {
            goto LABEL_39;
          }
          uint64_t v47 = *(void *)(v46 - 8);
          unint64_t v48 = (*(unsigned __int8 *)(v47 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
          uint64_t v49 = *(void *)(v47 + 72);
          uint64_t v50 = (char *)v36 + v48 + v49 * v44;
          unint64_t v51 = v37 + v48;
          uint64_t v52 = v49 * v38;
          uint64_t v53 = &v50[v52];
          unint64_t v54 = v51 + v52;
          swift_arrayInitWithCopy(v50);
          if (v38)
          {
            uint64_t v56 = v36[2];
            BOOL v57 = __OFADD__(v56, v38);
            uint64_t v58 = v56 + v38;
            if (v57) {
              goto LABEL_40;
            }
            v36[2] = v58;
          }
        }

        else if (v38)
        {
          goto LABEL_38;
        }

        OUTLINED_FUNCTION_20();
        OUTLINED_FUNCTION_28_4();
        ++v35;
        if (!--v34) {
          goto LABEL_32;
        }
      }

      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }

LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  OUTLINED_FUNCTION_2_9();
  OUTLINED_FUNCTION_3_25();
  OUTLINED_FUNCTION_3_9(v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87);
  __break(1u);
}

void *CustomIntentNLContextProvider.getOrdinalReference(index:count:selectionItem:)( unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SemanticValue(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if (!*(void *)(a3 + 16)) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(0x65756C6176LL, 0xE500000000000000LL);
  if ((v11 & 1) == 0) {
    return _swiftEmptyArrayStorage;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v10, (uint64_t)v19);
  outlined init with take of Any(v19, v20);
  type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INIntentResolutionResult,  &OBJC_CLASS___INIntentResolutionResult_ptr);
  uint64_t v12 = static INIntentResolutionResult.makeAsIdString(input:)((uint64_t)v20);
  SemanticValue.init(string:label:)(v12, v13, 0xD000000000000012LL, 0x8000000000194DA0LL);
  static INIntentResolutionResult.inferOrdinalDisplayValues(index:count:)(a1, a2);
  uint64_t v15 = v14;
  __chkstk_darwin(v14);
  *(void *)&v18[-16] = v9;
  uint64_t v16 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_11SiriKitFlow11DisplayHintVs5NeverOTg5( (void (*)(void *, __n128))partial apply for closure #1 in static INIntentResolutionResult.makeOrdinalDisplayHints(idValue:index:count:),  (uint64_t)&v18[-32],  v15);
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  __swift_destroy_boxed_opaque_existential_1Tm(v20);
  return v16;
}

void *_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySDySSypGGG_Say11SiriKitFlow11DisplayHintVGs5NeverOTg5017_sSiSDySSypGSay11fg6Flow11ij33VGIgygo_Si6offset_AA7elementtAEs5K11OIegnrzr_TRSiAhNIgygo_Tf1cn_n( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, __n128))
{
  uint64_t v4 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  if (v4)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = a1 + 32;
    do
    {
      uint64_t v7 = *(void *)(v6 + 8 * v5);
      __n128 v8 = swift_bridgeObjectRetain(v7);
      uint64_t v9 = a2(v5, v7, v8);
      swift_bridgeObjectRelease();
      unint64_t v10 = _swiftEmptyArrayStorage[2];
      if (v10 >= _swiftEmptyArrayStorage[3] >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++v5;
      _swiftEmptyArrayStorage[2] = v10 + 1;
      _swiftEmptyArrayStorage[v10 + 4] = v9;
    }

    while (v4 != v5);
  }

  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void CustomIntentNLContextProvider.init()(uint64_t a1, uint64_t a2)
{
}

uint64_t CustomIntentNLContextProvider.__ivar_destroyer()
{
  return __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
}

uint64_t WorkflowHomePodSnippetProvider.deinit()
{
  return v0;
}

uint64_t WorkflowHomePodSnippetProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

void @nonobjc SABaseAceObject.init(dictionary:)(uint64_t a1)
{
  if (a1)
  {
    v2.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    OUTLINED_FUNCTION_37();
  }

  else
  {
    v2.super.isa = 0LL;
  }

  [v1 initWithDictionary:v2.super.isa];

  OUTLINED_FUNCTION_2();
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)()
{
  if (v0 < 0)
  {
    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_4_22();
  }

  else
  {
    OUTLINED_FUNCTION_27_16();
    if (!v4 && v3)
    {
      BOOL v3 = v2 >= v1;
      BOOL v4 = v2 == v1;
    }

    else
    {
      BOOL v3 = 0;
      BOOL v4 = 0;
    }

    if (v4 || !v3) {
      return OUTLINED_FUNCTION_5_19(v1);
    }
    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_3_25();
  }

  uint64_t result = OUTLINED_FUNCTION_3_9(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
  __break(1u);
  return result;
}

{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  BOOL v3;
  BOOL v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  OUTLINED_FUNCTION_14_22();
  if (v0 < 0)
  {
    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_4_22();
  }

  else
  {
    OUTLINED_FUNCTION_27_16();
    if (!v4 && v3)
    {
      BOOL v3 = v2 >= v1;
      BOOL v4 = v2 == v1;
    }

    else
    {
      BOOL v3 = 0;
      BOOL v4 = 0;
    }

    if (v4 || !v3) {
      return OUTLINED_FUNCTION_5_19(v1);
    }
    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_3_25();
  }

  uint64_t result = OUTLINED_FUNCTION_3_9(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
  __break(1u);
  return result;
}

{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  BOOL v3;
  BOOL v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  OUTLINED_FUNCTION_14_22();
  if (v0 < 0)
  {
    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_4_22();
  }

  else
  {
    OUTLINED_FUNCTION_16_19();
    if (!v4 && v3)
    {
      BOOL v3 = v2 >= v1;
      BOOL v4 = v2 == v1;
    }

    else
    {
      BOOL v3 = 0;
      BOOL v4 = 0;
    }

    if (v4 || !v3) {
      return OUTLINED_FUNCTION_5_19(v1);
    }
    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_3_25();
  }

  uint64_t result = OUTLINED_FUNCTION_3_9(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
  __break(1u);
  return result;
}

{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  BOOL v3;
  BOOL v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  OUTLINED_FUNCTION_14_22();
  if (v0 < 0)
  {
    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_4_22();
  }

  else
  {
    OUTLINED_FUNCTION_16_19();
    if (!v4 && v3)
    {
      BOOL v3 = v2 >= v1;
      BOOL v4 = v2 == v1;
    }

    else
    {
      BOOL v3 = 0;
      BOOL v4 = 0;
    }

    if (v4 || !v3) {
      return OUTLINED_FUNCTION_5_19(v1);
    }
    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_3_25();
  }

  uint64_t result = OUTLINED_FUNCTION_3_9(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
  __break(1u);
  return result;
}

{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  OUTLINED_FUNCTION_14_22();
  if (v3 < 0)
  {
    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_4_22();
  }

  else
  {
    BOOL v4 = v0 + 88 * v1;
    if (v2 + 88 * v1 > v0)
    {
      uint64_t v5 = v4 >= v2;
      uint64_t v6 = v4 == v2;
    }

    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
    }

    if (v6 || !v5) {
      return OUTLINED_FUNCTION_5_19(v2);
    }
    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_3_25();
  }

  uint64_t result = OUTLINED_FUNCTION_3_9(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  OUTLINED_FUNCTION_14_22();
  if (v3 < 0)
  {
    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_4_22();
  }

  else
  {
    BOOL v4 = v0 + 32 * v1;
    if (v2 + 32 * v1 > v0)
    {
      uint64_t v5 = v4 >= v2;
      uint64_t v6 = v4 == v2;
    }

    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
    }

    if (v6 || !v5) {
      return OUTLINED_FUNCTION_5_19(v2);
    }
    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_3_25();
  }

  uint64_t result = OUTLINED_FUNCTION_3_9(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_4_22();
  }

  else
  {
    if (&__dst[8 * a2] <= __src || &__src[8 * a2] <= __dst) {
      return memcpy(__dst, __src, 8 * a2);
    }
    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_3_25();
  }

  uint64_t result = (void *)OUTLINED_FUNCTION_3_9(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_4_22();
  }

  else
  {
    OUTLINED_FUNCTION_10_15();
    if (!v5 && v4)
    {
      BOOL v4 = v3 >= v2;
      BOOL v5 = v3 == v2;
    }

    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }

    if (v5 || !v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Double));
      uint64_t v6 = OUTLINED_FUNCTION_6_19();
      return OUTLINED_FUNCTION_1_19(v6);
    }

    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_3_25();
  }

  uint64_t result = OUTLINED_FUNCTION_3_9(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  unint64_t *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_4_22();
  }

  else
  {
    OUTLINED_FUNCTION_7_15();
    if (!v7 && v6)
    {
      uint64_t v6 = v5 >= v2;
      uint64_t v7 = v5 == v2;
    }

    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
    }

    if (v7 || !v6)
    {
      type metadata accessor for NSError(0LL, v3, v4);
      uint64_t v8 = OUTLINED_FUNCTION_6_19();
      return OUTLINED_FUNCTION_1_19(v8);
    }

    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_3_25();
  }

  uint64_t result = OUTLINED_FUNCTION_3_9(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  __break(1u);
  return result;
}

{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_4_22();
  }

  else
  {
    OUTLINED_FUNCTION_7_15();
    if (!v5 && v4)
    {
      BOOL v4 = v3 >= v2;
      BOOL v5 = v3 == v2;
    }

    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }

    if (v5 || !v4)
    {
      type metadata accessor for UsoEntityBuilder_common_VoiceCommandPayload(0LL);
      uint64_t v6 = OUTLINED_FUNCTION_6_19();
      return OUTLINED_FUNCTION_1_19(v6);
    }

    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_3_25();
  }

  uint64_t result = OUTLINED_FUNCTION_3_9(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_4_22();
  }

  else
  {
    OUTLINED_FUNCTION_7_15();
    if (!v6 && v5)
    {
      BOOL v5 = v4 >= v2;
      uint64_t v6 = v4 == v2;
    }

    else
    {
      BOOL v5 = 0;
      uint64_t v6 = 0;
    }

    if (v6 || !v5)
    {
      __swift_instantiateConcreteTypeFromMangledName(v3);
      uint64_t v7 = OUTLINED_FUNCTION_6_19();
      return OUTLINED_FUNCTION_1_19(v7);
    }

    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_3_25();
  }

  uint64_t result = OUTLINED_FUNCTION_3_9(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_4_22();
  }

  else
  {
    OUTLINED_FUNCTION_10_15();
    if (!v5 && v4)
    {
      BOOL v4 = v3 >= v2;
      BOOL v5 = v3 == v2;
    }

    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }

    if (v5 || !v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int, value: String));
      uint64_t v6 = OUTLINED_FUNCTION_6_19();
      return OUTLINED_FUNCTION_1_19(v6);
    }

    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_3_25();
  }

  uint64_t result = OUTLINED_FUNCTION_3_9(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)( unint64_t a1, uint64_t a2, unint64_t a3)
{
  return specialized UnsafeMutablePointer.initialize(from:count:)( a1,  a2,  a3,  (uint64_t (*)(void))&type metadata accessor for UsoIdentifier);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)( a1,  a2,  a3,  (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)( a1,  a2,  a3,  (uint64_t (*)(void))&type metadata accessor for DisplayHint);
}

{
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_4_22();
  }

  else
  {
    unint64_t v3 = a1 + 40 * a2;
    if (a3 + 40 * a2 > a1)
    {
      BOOL v4 = v3 >= a3;
      BOOL v5 = v3 == a3;
    }

    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }

    if (v5 || !v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationItemProtocol);
      uint64_t v6 = OUTLINED_FUNCTION_6_19();
      return OUTLINED_FUNCTION_1_19(v6);
    }

    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_3_25();
  }

  uint64_t result = OUTLINED_FUNCTION_3_9(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)( a1,  a2,  a3,  (uint64_t (*)(void))&type metadata accessor for SpeakableString);
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)( unint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(void))
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_4_22();
  }

  else
  {
    uint64_t v6 = *(void *)(*(void *)(a4(0LL) - 8) + 72LL) * a2;
    unint64_t v7 = a3 + v6;
    unint64_t v8 = a1 + v6;
    if (v7 <= a1 || v8 <= a3)
    {
      uint64_t v10 = OUTLINED_FUNCTION_6_19();
      return OUTLINED_FUNCTION_1_19(v10);
    }

    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_3_25();
  }

  uint64_t result = OUTLINED_FUNCTION_3_9(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  __break(1u);
  return result;
}

void outlined bridged method (mbgnn) of @objc INCodableDescription.attribute(byName:)( uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [a3 attributeByName:v4];

  OUTLINED_FUNCTION_1();
}

unint64_t lazy protocol witness table accessor for type CustomIntentNLContextProviderError and conformance CustomIntentNLContextProviderError()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentNLContextProviderError and conformance CustomIntentNLContextProviderError;
  if (!lazy protocol witness table cache variable for type CustomIntentNLContextProviderError and conformance CustomIntentNLContextProviderError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CustomIntentNLContextProviderError,  &type metadata for CustomIntentNLContextProviderError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentNLContextProviderError and conformance CustomIntentNLContextProviderError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentNLContextProviderError and conformance CustomIntentNLContextProviderError;
  if (!lazy protocol witness table cache variable for type CustomIntentNLContextProviderError and conformance CustomIntentNLContextProviderError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CustomIntentNLContextProviderError,  &type metadata for CustomIntentNLContextProviderError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentNLContextProviderError and conformance CustomIntentNLContextProviderError);
  }

  return result;
}

void partial apply for closure #1 in CustomIntentNLContextProvider.makeContextForPagination(intent:parameterName:displayHints:selectionItems:paginatedItems:)( unint64_t a1, uint64_t a2)
{
}

uint64_t type metadata accessor for CustomIntentNLContextProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin29CustomIntentNLContextProvider);
}

uint64_t storeEnumTagSinglePayload for CustomIntentNLContextProviderError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_7BC88 + 4 * asc_1822F0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_7BCA8 + 4 * byte_1822F5[v4]))();
  }
}

_BYTE *sub_7BC88(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_7BCA8(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_7BCB0(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_7BCB8(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_7BCC0(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_7BCC8(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CustomIntentNLContextProviderError()
{
  return &type metadata for CustomIntentNLContextProviderError;
}

uint64_t objectdestroyTm()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t partial apply for closure #1 in static INIntentResolutionResult.makeOrdinalDisplayHints(idValue:index:count:)( uint64_t *a1)
{
  return closure #1 in static INIntentResolutionResult.makeOrdinalDisplayHints(idValue:index:count:)( a1,  *(void *)(v1 + 16));
}

uint64_t outlined init with copy of CustomIntentDisambiguationItem(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_7BD88()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  if ((*(_BYTE *)(v0 + 96) & 1) != 0) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 64));
  }
  else {
    swift_bridgeObjectRelease(*(void *)(v0 + 72));
  }
  return swift_deallocObject(v0, 97LL, 7LL);
}

uint64_t outlined destroy of CustomIntentDisambiguationItem(uint64_t a1)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_1_19(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_5_19(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

uint64_t OUTLINED_FUNCTION_6_19()
{
  return v0;
}

  ;
}

  ;
}

  ;
}

void *OUTLINED_FUNCTION_15_12()
{
  return INIntent.bundleId.getter();
}

  ;
}

uint64_t OUTLINED_FUNCTION_19_14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_stdlib_reportUnimplementedInitializer(a1, 48LL, a3, 6LL, 0LL);
}

void OUTLINED_FUNCTION_24_14()
{
  *(_BYTE *)(v0 + 88) = 1;
  *(void *)(v0 + 96) = 0LL;
  *(_BYTE *)(v0 + 104) = 1;
}

uint64_t OUTLINED_FUNCTION_25_19()
{
  return NLContextUpdate.conversationStateAttachments.setter();
}

  ;
}

uint64_t OUTLINED_FUNCTION_28_11()
{
  return swift_unknownObjectRelease(v0);
}

void CustomIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)( uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  v25[2] = a7;
  v25[3] = a8;
  v25[0] = a5;
  v25[1] = a6;
  uint64_t v15 = a10[3];
  uint64_t v16 = a10[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a10, v15);
  OUTLINED_FUNCTION_66_1();
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v20 + 16))(v19);
  OUTLINED_FUNCTION_54_13(a1, a2, a3, a4, v21, v22, v23, v24, a9, (uint64_t)v19, v10, v15, v16);
  __swift_destroy_boxed_opaque_existential_1Tm(a10);
  OUTLINED_FUNCTION_24_0();
}

void *CustomIntentResponseGenerator.deinit()
{
  return v0;
}

uint64_t CustomIntentResponseGenerator.makeErrorResponse(app:intent:intentResponse:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = type metadata accessor for DialogPhase(0LL);
  v5[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[10] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[11] = swift_task_alloc(v8);
  v5[12] = swift_task_alloc(v8);
  uint64_t v9 = type metadata accessor for OutputGenerationManifest(0LL);
  v5[13] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[14] = v10;
  v5[15] = OUTLINED_FUNCTION_9_0(v10);
  uint64_t v11 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  v5[16] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[17] = v12;
  v5[18] = OUTLINED_FUNCTION_9_0(v12);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentResponseGenerator.makeErrorResponse(app:intent:intentResponse:)()
{
  uint64_t v1 = v0[17];
  (*(void (**)(void, void, void))(v1 + 104))( v0[18],  enum case for RFFeatureFlags.ResponseFramework._SMART(_:),  v0[16]);
  char v2 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  if ((v2 & 1) != 0)
  {
    int v3 = *(int **)(**(void **)(v0[8] + 56LL) + 168LL);
    uint64_t v11 = (uint64_t (*)(void))((char *)v3 + *v3);
    uint64_t v4 = (void *)swift_task_alloc(v3[1]);
    v0[19] = v4;
    void *v4 = v0;
    v4[1] = CustomIntentResponseGenerator.makeErrorResponse(app:intent:intentResponse:);
    return v11();
  }

  else
  {
    uint64_t v6 = (void *)swift_task_alloc(dword_2177BC);
    v0[26] = v6;
    *uint64_t v6 = v0;
    v6[1] = CustomIntentResponseGenerator.makeErrorResponse(app:intent:intentResponse:);
    uint64_t v7 = OUTLINED_FUNCTION_57_9();
    return CustomIntentResponseGenerator.makeErrorResponse_rfv1(app:intent:intentResponse:)(v7, v8, v9, v10);
  }

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  void *v21;
  uint64_t v22;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v1 = (void *)v0[20];
  int v3 = v0[11];
  char v2 = v0[12];
  id v5 = v0[9];
  uint64_t v4 = v0[10];
  uint64_t v6 = (void *)v0[8];
  uint64_t v34 = v0[6];
  uint64_t v35 = v0[5];
  static DialogPhase.completion.getter();
  uint64_t v7 = [v1 catId];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  OutputGenerationManifest.init(dialogPhase:_:)(v3, CustomIntentDisambiguationItemContainer.init(items:), 0LL);
  OutputGenerationManifest.responseViewId.setter(v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v5);
  OutputGenerationManifest.listenAfterSpeaking.setter(0LL);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*v6 + 168LL))(v34);
  OutputGenerationManifest.canUseServerTTS.setter(v9 & 1);
  uint64_t v10 = OUTLINED_FUNCTION_43_10();
  swift_initStackObject(v10, v0 + 2);
  uint64_t v11 = (void *)static SAAppInfoFactory.createAppInfo(app:)(v35);
  AppNameResolver.resolveAppNameWithAppInfo(appInfo:)(v11);
  uint64_t v13 = v12;
  uint64_t v15 = v14;

  swift_bridgeObjectRelease(v15);
  if ((v15 & 0x2000000000000000LL) != 0) {
    uint64_t v16 = HIBYTE(v15) & 0xF;
  }
  else {
    uint64_t v16 = v13 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v17 = v6[5];
  uint64_t v18 = v6[6];
  __swift_project_boxed_opaque_existential_1(v6 + 2, v17);
  if (((dispatch thunk of DeviceState.isPhone.getter(v17, v18) & 1) != 0
     || (uint64_t v19 = v6[5],
         __swift_project_boxed_opaque_existential_1(v6 + 2, v19),
         (dispatch thunk of DeviceState.isPad.getter(v19) & 1) != 0))
    && v16)
  {
    uint64_t v20 = *(int **)(*(void *)v0[8] + 176LL);
    uint64_t v36 = (uint64_t (*)(uint64_t))((char *)v20 + *v20);
    uint64_t v21 = (void *)swift_task_alloc(v20[1]);
    v0[21] = v21;
    void *v21 = v0;
    v21[1] = CustomIntentResponseGenerator.makeErrorResponse(app:intent:intentResponse:);
    uint64_t v22 = OUTLINED_FUNCTION_57_9();
    return v36(v22);
  }

  else
  {
    uint64_t v24 = (void *)v0[20];
    uint64_t v25 = type metadata accessor for ResponseFactory(0LL);
    OUTLINED_FUNCTION_51(v25);
    v0[23] = ResponseFactory.init()();
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v27 = OUTLINED_FUNCTION_19(v26, 40LL);
    *(_OWORD *)(v27 + 16) = xmmword_17E150;
    *(void *)(v27 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v24;
    uint64_t v38 = v27;
    specialized Array._endMutation()(v27, v28, v29);
    v0[24] = v38;
    uint64_t v31 = v24;
    uint64_t v32 = (void *)swift_task_alloc(v30);
    v0[25] = v32;
    *uint64_t v32 = v0;
    v32[1] = CustomIntentResponseGenerator.makeErrorResponse(app:intent:intentResponse:);
    uint64_t v33 = OUTLINED_FUNCTION_57_9();
    return v37(v33, v38);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 176) = v0;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  (*(void (**)(void, void))(*(void *)(v0 + 112) + 8LL))(*(void *)(v0 + 120), *(void *)(v0 + 104));
  OUTLINED_FUNCTION_32_10();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_22_2(v1);
}

{
  uint64_t v0;
  uint64_t v2;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_12_16(*(void *)(v0 + 200), &v2);
  OUTLINED_FUNCTION_20();
  swift_release();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v1 = *(void *)(v0 + 112);

  (*(void (**)(void, void))(v1 + 8))(*(void *)(v0 + 120), *(void *)(v0 + 104));
  OUTLINED_FUNCTION_32_10();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  char v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_22_2(v2);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;
  int v3 = *v0;
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_12_16(*(void *)(v3 + 208), &v3);
  OUTLINED_FUNCTION_33_11();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 112);

  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  swift_task_dealloc(*(void *)(v0 + 144));
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentResponseGenerator.makeErrorResponse(app:intent:intentResponse:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v2 + 152);
  uint64_t v4 = *v2;
  *(void *)(v4 + 160) = a1;
  swift_task_dealloc(v3);
  if (v1)
  {
    OUTLINED_FUNCTION_33_11();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v4 + 8));
  }

  else
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

uint64_t CustomIntentResponseGenerator.makeErrorResponse_rfv1(app:intent:intentResponse:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = OUTLINED_FUNCTION_44_6();
  v5[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[10] = v7;
  uint64_t v8 = OUTLINED_FUNCTION_9_0(v7);
  v5[11] = v8;
  uint64_t v9 = OUTLINED_FUNCTION_43_10();
  v5[12] = swift_initStackObject(v9, v5 + 2);
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to static ErrorTemplates.genericError()[1]);
  v5[13] = v10;
  *uint64_t v10 = v5;
  v10[1] = CustomIntentResponseGenerator.makeErrorResponse_rfv1(app:intent:intentResponse:);
  return static ErrorTemplates.genericError()(v8);
}

uint64_t CustomIntentResponseGenerator.makeErrorResponse_rfv1(app:intent:intentResponse:)()
{
  *(void *)(v1 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v0;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int *v10;
  void *boxed_opaque_existential_1;
  void *v12;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v2 = OUTLINED_FUNCTION_29_14();
  if ((dispatch thunk of DeviceState.isPhone.getter(v2, v3) & 1) == 0)
  {
    uint64_t v4 = OUTLINED_FUNCTION_29_14();
    if ((dispatch thunk of DeviceState.isPad.getter(v4) & 1) == 0) {
      goto LABEL_7;
    }
  }

  id v5 = *(void *)(v1 + 96);
  uint64_t v6 = (void *)static SAAppInfoFactory.createAppInfo(app:)(*(void *)(v1 + 40));
  AppNameResolver.resolveAppNameWithAppInfo(appInfo:)(v6);
  OUTLINED_FUNCTION_50_12();
  swift_bridgeObjectRelease(v7);

  uint64_t v8 = HIBYTE(v0) & 0xF;
  if ((v0 & 0x2000000000000000LL) == 0) {
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v8)
  {
    uint64_t v9 = *(void **)(v1 + 32);
    uint64_t v10 = *(int **)(**(void **)(v1 + 64) + 184LL);
    v9[3] = OUTLINED_FUNCTION_54_4();
    v9[4] = &protocol witness table for AceOutput;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v9);
    uint64_t v19 = (int *)((char *)v10 + *v10);
    uint64_t v12 = (void *)swift_task_alloc(v10[1]);
    *(void *)(v1 + 120) = v12;
    *uint64_t v12 = v1;
    v12[1] = CustomIntentResponseGenerator.makeErrorResponse_rfv1(app:intent:intentResponse:);
    return ((uint64_t (*)(void *, void, void, void, void))v19)( boxed_opaque_existential_1,  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56),  *(void *)(v1 + 88));
  }

  else
  {
LABEL_7:
    uint64_t v14 = (void *)swift_task_alloc(dword_217864);
    *(void *)(v1 + 136) = v14;
    unint64_t *v14 = v1;
    v14[1] = CustomIntentResponseGenerator.makeErrorResponse_rfv1(app:intent:intentResponse:);
    uint64_t v15 = OUTLINED_FUNCTION_57_9();
    return CustomIntentResponseGenerator.processGenericErrorResponseWithText(app:intent:templateResult:)( v15,  v16,  v17,  v18);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 128) = v0;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_41_12();
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  OUTLINED_FUNCTION_40_0();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_22_2(v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 144) = v0;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  swift_release();
  OUTLINED_FUNCTION_60_9();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void **)(v0 + 32);
  swift_release();
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  __swift_deallocate_boxed_opaque_existential_1(v2);
  OUTLINED_FUNCTION_60_9();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_41_12();
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  OUTLINED_FUNCTION_60_9();
  return OUTLINED_FUNCTION_22_2(*(uint64_t (**)(void))(v1 + 8));
}

void CustomIntentResponseGenerator.makeDomainFlowActivity(activityType:intent:)()
{
  uint64_t v4 = type metadata accessor for ActivityType(0LL);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_18_11();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v3, v2);
  uint64_t v6 = CustomIntentResponseGenerator.shortcutsActionsFromIntent(intent:)(v0);
  uint64_t v7 = *(void *)(v1 + 72);
  uint64_t v8 = type metadata accessor for ShortcutsFlowActivity(0LL);
  OUTLINED_FUNCTION_51(v8);
  swift_retain(v7);
  ShortcutsFlowActivity.init(activityType:underlyingActions:siriEnvironment:)(v3, (uint64_t)v6, v7);
  OUTLINED_FUNCTION_2();
}

BOOL static CustomIntentsDialogTemplating.canUseServerTTS(intent:)()
{
  return !INIntent.isRestricted()();
}

uint64_t CustomIntentResponseGenerator.processPunchoutWithDialogAndButton(app:intent:intentResponse:dialogResult:outputManifest:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[12] = a6;
  v7[13] = v6;
  v7[10] = a4;
  v7[11] = a5;
  v7[8] = a2;
  v7[9] = a3;
  v7[7] = a1;
  uint64_t v8 = type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0LL);
  v7[14] = v8;
  v7[15] = OUTLINED_FUNCTION_9_0(*(void *)(v8 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentResponseGenerator.processPunchoutWithDialogAndButton(app:intent:intentResponse:dialogResult:outputManifest:)()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(**(void **)(v0[13] + 56LL) + 232LL));
  v0[16] = v1;
  *uint64_t v1 = v0;
  v1[1] = CustomIntentResponseGenerator.processPunchoutWithDialogAndButton(app:intent:intentResponse:dialogResult:outputManifest:);
  return v3(v0[8]);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  OUTLINED_FUNCTION_12_2();
  uint64_t v4 = *v3;
  OUTLINED_FUNCTION_12_16(v2[16], v5);
  if (v1)
  {
    swift_task_dealloc(v2[15]);
    return OUTLINED_FUNCTION_22_2(*(uint64_t (**)(void))(v4 + 8));
  }

  else
  {
    v2[17] = v0;
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *boxed_opaque_existential_1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  char *v20;
  uint64_t v21;
  uint64_t v1 = v0[17];
  uint64_t v2 = (void *)v0[15];
  uint64_t v3 = v0[10];
  uint64_t v4 = (void *)v0[11];
  uint64_t v6 = v0[8];
  uint64_t v5 = v0[9];
  uint64_t v7 = type metadata accessor for SAIntentGroupLaunchAppWithIntent();
  uint64_t v8 = (void *)static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)(v6, v5, v3);
  v0[18] = v8;
  dispatch thunk of LabelExecutionResult.subscript.getter();
  OUTLINED_FUNCTION_50_12();
  CodableAceObject.init(wrappedValue:)(v8, v7);
  *uint64_t v2 = v1;
  v2[1] = v1;
  uint64_t v9 = type metadata accessor for ResponseFactory(0LL);
  OUTLINED_FUNCTION_51(v9);
  v0[19] = ResponseFactory.init()();
  uint64_t v10 = type metadata accessor for WorkflowDataModels(0LL);
  v0[5] = v10;
  v0[6] = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  outlined init with copy of WorkflowDataModels.CustomIntentErrorModel((uint64_t)v2, (uint64_t)boxed_opaque_existential_1);
  swift_storeEnumTagMultiPayload(boxed_opaque_existential_1, v10, 3LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v13 = OUTLINED_FUNCTION_19(v12, 40LL);
  *(_OWORD *)(v13 + 16) = xmmword_17E150;
  *(void *)(v13 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v4;
  uint64_t v21 = v13;
  specialized Array._endMutation()(v13, v14, v15);
  v0[20] = v21;
  uint64_t v17 = v4;
  uint64_t v18 = (void *)swift_task_alloc(v16);
  v0[21] = v18;
  *uint64_t v18 = v0;
  v18[1] = CustomIntentResponseGenerator.processPunchoutWithDialogAndButton(app:intent:intentResponse:dialogResult:outputManifest:);
  return ((uint64_t (*)(void, void *, uint64_t, void))v20)(v0[7], v0 + 2, v21, v0[12]);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;
  OUTLINED_FUNCTION_50_0();
  uint64_t v1 = v0 + 2;
  uint64_t v2 = v0[20];
  OUTLINED_FUNCTION_12_16(v0[21], &v4);
  swift_release();
  swift_bridgeObjectRelease(v2);
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v1 = *(void **)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 120);
  swift_release();

  outlined destroy of WorkflowDataModels.CustomIntentErrorModel(v2);
  OUTLINED_FUNCTION_40_0();
  uint64_t v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_3_14(v3);
}

uint64_t CustomIntentResponseGenerator.processPunchOutWithDialogAndButton_prerfv2(app:intent:intentResponse:templateResult:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[11] = a5;
  v6[12] = v5;
  v6[9] = a3;
  v6[10] = a4;
  v6[7] = a1;
  v6[8] = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v6[13] = OUTLINED_FUNCTION_9_0(*(void *)(v7 - 8));
  uint64_t v8 = OUTLINED_FUNCTION_44_6();
  v6[14] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v6[15] = v9;
  v6[16] = OUTLINED_FUNCTION_9_0(v9);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentResponseGenerator.processPunchOutWithDialogAndButton_prerfv2(app:intent:intentResponse:templateResult:)()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(**(void **)(v0[12] + 56) + 240LL));
  v0[17] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = CustomIntentResponseGenerator.processPunchOutWithDialogAndButton_prerfv2(app:intent:intentResponse:templateResult:);
  return OUTLINED_FUNCTION_17_18(v0[16], v0[8], v3);
}

{
  uint64_t v0;
  uint64_t **v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t **v5;
  uint64_t v2 = (*v1)[17];
  uint64_t v3 = *v1;
  v3[18] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    uint64_t v5 = (uint64_t **)swift_task_alloc(dword_2177F4);
    v3[19] = (uint64_t)v5;
    *uint64_t v5 = v3;
    v5[1] = (uint64_t *)CustomIntentResponseGenerator.processPunchOutWithDialogAndButton_prerfv2(app:intent:intentResponse:templateResult:);
    return CustomIntentResponseGenerator.makeDefaultOpenAppButtonViewBuilder(app:intent:intentResponse:launchAppButtonTemplate:)( v3[8],  v3[9],  v3[10],  v3[16]);
  }

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  OUTLINED_FUNCTION_12_2();
  uint64_t v4 = v2[19];
  *uint64_t v5 = *v3;
  v2[20] = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    v2[21] = v0;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v14 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v2 = *(void **)(v0 + 96);
  uint64_t v4 = v2 + 2;
  uint64_t v6 = v2[5];
  uint64_t v5 = v2[6];
  __swift_project_boxed_opaque_existential_1(v2 + 2, v6);
  uint64_t v7 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v6, v5);
  LOBYTE(v5) = v7;
  uint64_t v8 = dispatch thunk of SiriKitAceViewBuilder.build()(v7);
  uint64_t v9 = OUTLINED_FUNCTION_56_3();
  OUTLINED_FUNCTION_50_1(v1, v10, v11, v9);
  *(void *)(v0 + 48) = 0LL;
  *(_OWORD *)(v0 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v3,  v4,  v5 & 1,  v8,  0LL,  1LL,  v1,  _swiftEmptyArrayStorage,  v0 + 16);
  OUTLINED_FUNCTION_20();
  swift_release();
  outlined destroy of Any?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of Any?(v1, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_53_11(v14);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_20_0();
  uint64_t v12 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return v12();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_61_10();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  (*(void (**)(void, void))(*(void *)(v0 + 120) + 8LL))(*(void *)(v0 + 128), *(void *)(v0 + 112));
  OUTLINED_FUNCTION_61_10();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentResponseGenerator.makeYesAndNoButton_preRFv2(intent:app:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v5, v6, v7);
}

uint64_t CustomIntentResponseGenerator.makeYesAndNoButton_preRFv2(intent:app:)()
{
  uint64_t v2 = v1[3];
  uint64_t v3 = *(void *)(v1[5] + 56LL);
  INIntent.verb()();
  OUTLINED_FUNCTION_50_12();
  v1[6] = v4;
  uint64_t v5 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(*(void *)v3 + 160LL));
  v1[7] = v5;
  *uint64_t v5 = v1;
  v5[1] = CustomIntentResponseGenerator.makeYesAndNoButton_preRFv2(intent:app:);
  return v7(v2, v0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  OUTLINED_FUNCTION_12_2();
  void *v4 = *v3;
  *(void *)(v2 + 64) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_bridgeObjectRelease();
    *(void *)(v2 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v0;
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentResponseGenerator.makeYesAndNoButton_preRFv2(intent:app:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 72);
  uint64_t v3 = *(uint64_t **)(v1 + 16);
  App.appIdentifier.getter(a1);
  id v4 = OUTLINED_FUNCTION_35_16(0);
  uint64_t v5 = 7562617LL;
  unint64_t v6 = 0xE300000000000000LL;
  specialized Dictionary.subscript.getter(7562617LL, 0xE300000000000000LL, v2);
  if (v8)
  {
    uint64_t v5 = v7;
    unint64_t v6 = v8;
  }

  id v9 = v4;
  id v10 = OUTLINED_FUNCTION_35_16(1);
  swift_bridgeObjectRelease();
  specialized Dictionary.subscript.getter(0x6C65636E6163LL, 0xE600000000000000LL, v2);
  uint64_t v12 = v11;
  unint64_t v14 = v13;

  swift_bridgeObjectRelease();
  if (v14) {
    uint64_t v15 = v12;
  }
  else {
    uint64_t v15 = 0x6C65636E6163LL;
  }
  unint64_t v16 = 0xE600000000000000LL;
  if (v14) {
    unint64_t v16 = v14;
  }
  *uint64_t v3 = v5;
  v3[1] = v6;
  v3[2] = (uint64_t)v9;
  v3[3] = v15;
  v3[4] = v16;
  v3[5] = (uint64_t)v10;
  uint64_t v17 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_16_0(v17);
}

uint64_t CustomIntentResponseGenerator.processGenericErrorResponseWithText(app:intent:templateResult:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[9] = a4;
  v5[10] = v4;
  v5[7] = a1;
  v5[8] = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v5[11] = OUTLINED_FUNCTION_9_0(*(void *)(v6 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentResponseGenerator.processGenericErrorResponseWithText(app:intent:templateResult:)()
{
  uint64_t v2 = *(void **)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v5 = *(void **)(v0 + 56);
  uint64_t v6 = v2[5];
  uint64_t v7 = v2[6];
  __swift_project_boxed_opaque_existential_1(v2 + 2, v6);
  LOBYTE(v6) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v6, v7);
  LOBYTE(v7) = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(0);
  char v8 = (*(uint64_t (**)(uint64_t))(*v2 + 168LL))(v4);
  uint64_t v9 = OUTLINED_FUNCTION_56_3();
  OUTLINED_FUNCTION_50_1(v1, v10, v11, v9);
  uint64_t v12 = OUTLINED_FUNCTION_54_4();
  *(_OWORD *)(v0 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
  *(void *)(v0 + 48) = 0LL;
  *(_OWORD *)(v0 + 16) = 0u;
  v5[3] = v12;
  v5[4] = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v5);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v3,  v2 + 2,  v6 & 1,  _swiftEmptyArrayStorage,  v7 & 1,  v8 & 1,  v1,  _swiftEmptyArrayStorage,  v0 + 16);
  outlined destroy of Any?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of Any?(v1, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_20_0();
  unint64_t v13 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_16_0(v13);
}

uint64_t CustomIntentResponseGenerator.makeDefaultOpenAppButtonViewBuilder(app:intent:intentResponse:launchAppButtonTemplate:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[11] = a4;
  v5[12] = v4;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  uint64_t v6 = type metadata accessor for TemplatingText(0LL);
  v5[13] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[14] = v7;
  v5[15] = OUTLINED_FUNCTION_9_0(v7);
  uint64_t v8 = type metadata accessor for TemplatingSection(0LL);
  v5[16] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[17] = v9;
  v5[18] = OUTLINED_FUNCTION_9_0(v9);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v5[19] = OUTLINED_FUNCTION_9_0(*(void *)(v10 - 8));
  uint64_t v11 = OUTLINED_FUNCTION_54_4();
  v5[20] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[21] = v12;
  v5[22] = OUTLINED_FUNCTION_9_0(v12);
  uint64_t v13 = OUTLINED_FUNCTION_44_6();
  v5[23] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v5[24] = v14;
  v5[25] = OUTLINED_FUNCTION_9_0(v14);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentResponseGenerator.makeDefaultOpenAppButtonViewBuilder(app:intent:intentResponse:launchAppButtonTemplate:)()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(**(void **)(v0[12] + 56) + 240LL));
  v0[26] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = CustomIntentResponseGenerator.makeDefaultOpenAppButtonViewBuilder(app:intent:intentResponse:launchAppButtonTemplate:);
  return OUTLINED_FUNCTION_17_18(v0[25], v0[8], v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 216) = v0;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 120);
  swift_task_dealloc(*(void *)(v0 + 200));
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void CustomIntentResponseGenerator.makeDefaultOpenAppButtonViewBuilder(app:intent:intentResponse:launchAppButtonTemplate:)()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(void **)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 64);
  type metadata accessor for SAIntentGroupLaunchAppWithIntent();
  uint64_t v7 = (void *)static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)(v6, v5, v4);
  uint64_t v8 = v3 + 2;
  uint64_t v9 = v3[5];
  uint64_t v10 = v3[6];
  __swift_project_boxed_opaque_existential_1(v8, v9);
  LOBYTE(v9) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v9, v10);
  LOBYTE(v4) = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(0);
  uint64_t v11 = OUTLINED_FUNCTION_56_3();
  OUTLINED_FUNCTION_50_1(v2, v12, v13, v11);
  *(_OWORD *)(v0 + 16) = 0u;
  *(void *)(v0 + 48) = 0LL;
  *(_OWORD *)(v0 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v1,  v8,  v9 & 1,  _swiftEmptyArrayStorage,  v4 & 1,  1LL,  v2,  _swiftEmptyArrayStorage,  v0 + 16);
  outlined destroy of Any?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of Any?(v2, &demangling cache variable for type metadata for NLContextUpdate?);
  id v14 = [objc_allocWithZone(SAResultCallback) init];
  uint64_t v15 = AceOutput.commands.getter([v14 setCode:SAResultCallbackAnyErrorCodeValue]);
  uint64_t v16 = v15;
  if ((unint64_t)v15 >> 62)
  {
    if (v15 < 0) {
      uint64_t v29 = v15;
    }
    else {
      uint64_t v29 = v15 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v15);
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v29);
    if (v17) {
      goto LABEL_3;
    }
LABEL_19:
    OUTLINED_FUNCTION_2_6();
    goto LABEL_20;
  }

  uint64_t v17 = *(void *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(v15);
  if (!v17) {
    goto LABEL_19;
  }
LABEL_3:
  if (v17 < 1)
  {
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v71 = v8;
  uint64_t v18 = 0LL;
  uint64_t v19 = (void *)(v0 + 56);
  do
  {
    if ((v16 & 0xC000000000000001LL) != 0) {
      id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v16);
    }
    else {
      id v20 = *(id *)(v16 + 8 * v18 + 32);
    }
    uint64_t v21 = v20;
    *uint64_t v19 = &OBJC_PROTOCOL___SAClientBoundCommand;
    uint64_t v22 = swift_dynamicCastObjCProtocolConditional(v20, 1LL, v19);
    if (v22)
    {
      uint64_t v23 = v22;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      unint64_t v25 = *(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
      unint64_t v24 = *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
      if (v25 >= v24 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1LL);
      }
      uint64_t v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v23);
      specialized Array._endMutation()(v26, v27, v28);
    }

    else
    {
    }

    ++v18;
  }

  while (v17 != v18);
  OUTLINED_FUNCTION_2_6();
  uint64_t v8 = v71;
LABEL_20:
  OUTLINED_FUNCTION_2_6();
  outlined bridged method (mbnn) of @objc SAResultCallback.commands.setter();
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v31 = OUTLINED_FUNCTION_19(v30, 40LL);
  *(_OWORD *)(v31 + 16) = xmmword_17E150;
  *(void *)(v31 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v14;
  uint64_t v75 = v31;
  specialized Array._endMutation()(v31, v32, v33);
  id v34 = v14;
  outlined bridged method (mbnn) of @objc SABaseClientBoundCommand.callbacks.setter(v75);
  uint64_t v36 = TemplatingResult.sections.getter(v35);
  uint64_t v37 = *(void *)(v36 + 16);
  swift_bridgeObjectRelease(v36);
  if (!v37)
  {
    uint64_t v54 = *(void *)(v0 + 192);
    uint64_t v74 = *(void *)(v0 + 200);
    uint64_t v56 = *(void *)(v0 + 176);
    uint64_t v55 = *(void *)(v0 + 184);
    uint64_t v57 = *(void *)(v0 + 160);
    uint64_t v58 = *(void *)(v0 + 168);
    unint64_t v59 = lazy protocol witness table accessor for type CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors and conformance CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors();
    uint64_t v60 = swift_allocError( &type metadata for CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors,  v59,  0LL,  0LL);
    *id v61 = 0;
    swift_willThrow(v60, v61, v62, v63, v64);

    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v56, v57);
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v74, v55);
    swift_task_dealloc(*(void *)(v0 + 200));
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  type metadata accessor for SiriKitAceViewBuilder(0LL);
  uint64_t v38 = dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)(v8);
  uint64_t v39 = TemplatingResult.sections.getter(v38);
  if (*(void *)(v39 + 16))
  {
    uint64_t v70 = *(void *)(v0 + 184);
    uint64_t v72 = *(void *)(v0 + 200);
    uint64_t v68 = *(void *)(v0 + 176);
    uint64_t v69 = *(void *)(v0 + 192);
    uint64_t v66 = *(void *)(v0 + 168);
    uint64_t v67 = *(void *)(v0 + 160);
    uint64_t v40 = *(void *)(v0 + 144);
    uint64_t v73 = *(void *)(v0 + 152);
    uint64_t v42 = *(void *)(v0 + 128);
    uint64_t v41 = *(void *)(v0 + 136);
    uint64_t v43 = v7;
    uint64_t v45 = *(void *)(v0 + 112);
    uint64_t v44 = *(void *)(v0 + 120);
    uint64_t v65 = v34;
    uint64_t v46 = *(void *)(v0 + 104);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v41 + 16))( v40,  v39 + ((*(unsigned __int8 *)(v41 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80)),  v42);
    uint64_t v47 = OUTLINED_FUNCTION_20();
    TemplatingSection.content.getter(v47);
    uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
    uint64_t v49 = TemplatingText.text.getter(v48);
    uint64_t v51 = v50;
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
    id v52 = v43;
    uint64_t v53 = dispatch thunk of SiriKitAceViewBuilder.addButton(label:command:)(v49, v51, v52);

    swift_release();
    swift_bridgeObjectRelease(v51);

    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v68, v67);
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v72, v70);
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_20_0();
    swift_task_dealloc(v73);
    swift_task_dealloc(v40);
    OUTLINED_FUNCTION_15_0();
    (*(void (**)(uint64_t))(v0 + 8))(v53);
    return;
  }

LABEL_25:
  __break(1u);
}

  uint64_t v42 = swift_bridgeObjectRelease(v90);
  uint64_t v43 = CodeGenBase.entity.getter(v42);
  uint64_t v44 = static UsoBuilderConversionUtils.convertEntityToGraph(entity:)();
  swift_release(v43);
  uint64_t v45 = static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)(v44, 1LL);
  uint64_t v47 = v46;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v48 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v48, (uint64_t)static Logger.voiceCommands);
  uint64_t v49 = swift_bridgeObjectRetain(v47);
  uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
  uint64_t v51 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v50, v51))
  {
    id v52 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v53 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v94 = v53;
    *(_DWORD *)id v52 = 136315138;
    swift_bridgeObjectRetain(v47);
    uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v47, &v94);
    uint64_t v55 = OUTLINED_FUNCTION_64_4(v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v55, v56, v52 + 4);
    swift_bridgeObjectRelease_n(v47, 3LL);
    _os_log_impl(&dword_0, v50, v51, "Unable to create measurement unit from %s", v52, 0xCu);
    swift_arrayDestroy(v53, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v53);
    OUTLINED_FUNCTION_1_0((uint64_t)v52);

    swift_release(v44);
  }

  else
  {

    swift_release(v44);
    swift_bridgeObjectRelease_n(v47, 2LL);
  }

  return 0LL;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    uint64_t v13 = (v18 - 1) & v18;
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  uint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    uint64_t v9 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

void *CustomIntentResponseGenerator.shortcutsActionsFromIntent(intent:)(void *a1)
{
  id v4 = [a1 _metadata];
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  outlined bridged method (ob) of @objc _INPBIntentMetadata.launchId.getter(v4);
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  OUTLINED_FUNCTION_50_12();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ShortcutsAction>);
  uint64_t v7 = OUTLINED_FUNCTION_19(v6, 80LL);
  *(_OWORD *)(v7 + 16) = xmmword_17E650;
  [a1 _intentCategory];
  Swift::String v8 = INIntentCategory.asINPBString()();
  id v9 = [a1 typeName];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  *(void *)(v7 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v1;
  *(void *)(v7 + 40) = v2;
  *(Swift::String *)(v7 + 48) = v8;
  *(void *)(v7 + 64) = v10;
  *(void *)(v7 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v12;
  return (void *)v7;
}

void CustomIntentResponseGenerator.deviceState.getter(uint64_t a1@<X8>)
{
}

uint64_t CustomIntentResponseGenerator.snippetProvider.getter()
{
  return swift_retain(*(void *)(v0 + 64));
}

uint64_t CustomIntentResponseGenerator.siriEnvironment.getter()
{
  return swift_retain(*(void *)(v0 + 72));
}

void CustomIntentResponseGenerator.voiceCommandName.getter()
{
}

void CustomIntentResponseGenerator.responseFactory.getter(uint64_t a1@<X8>)
{
}

void CustomIntentResponseGenerator.__allocating_init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)( uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  v26[2] = a7;
  v26[3] = a8;
  v26[0] = a5;
  v26[1] = a6;
  uint64_t v15 = (void *)OUTLINED_FUNCTION_19(v10, 144LL);
  uint64_t v16 = a10[3];
  uint64_t v17 = a10[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a10, v16);
  OUTLINED_FUNCTION_66_1();
  __chkstk_darwin(v18);
  id v20 = (char *)v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v21 + 16))(v20);
  OUTLINED_FUNCTION_54_13(a1, a2, a3, a4, v22, v23, v24, v25, a9, (uint64_t)v20, v15, v16, v17);
  __swift_destroy_boxed_opaque_existential_1Tm(a10);
  OUTLINED_FUNCTION_24_0();
}

void ShortcutsFlowActivity.__allocating_init(activityType:underlyingActions:siriEnvironment:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = OUTLINED_FUNCTION_59_5();
  swift_allocObject(v6, v7, v8);
  ShortcutsFlowActivity.init(activityType:underlyingActions:siriEnvironment:)(v3, a2, a3);
  OUTLINED_FUNCTION_2();
}

BOOL static WorkflowDialogTemplatingError.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void WorkflowDialogTemplatingError.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int WorkflowDialogTemplatingError.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static WorkflowDialogTemplatingError.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors()
{
  return WorkflowDialogTemplatingError.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors( uint64_t a1)
{
}

uint64_t CustomIntentResponseGenerator.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 144LL, 7LL);
}

void ShortcutsAction.appId.setter()
{
  *uint64_t v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_2();
}

void ShortcutsAction.intentCategory.setter()
{
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + 24) = v0;
  OUTLINED_FUNCTION_2();
}

void ShortcutsAction.intentName.setter()
{
  *(void *)(v1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v2;
  *(void *)(v1 + 40) = v0;
  OUTLINED_FUNCTION_2();
}

uint64_t ShortcutsAction.CodingKeys.init(stringValue:)(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6449707061LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v5 = 0xE500000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449707061LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6143746E65746E69LL && a2 == 0xEE0079726F676574LL)
  {
    unint64_t v8 = 0xEE0079726F676574LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6143746E65746E69LL, 0xEE0079726F676574LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x614E746E65746E69LL && a2 == 0xEA0000000000656DLL)
  {
    swift_bridgeObjectRelease(0xEA0000000000656DLL);
    return 2LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x614E746E65746E69LL, 0xEA0000000000656DLL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t ShortcutsAction.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x6449707061LL;
  }
  if (a1 == 1) {
    return 0x6143746E65746E69LL;
  }
  return 0x614E746E65746E69LL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ShortcutsAction.CodingKeys()
{
  return ShortcutsAction.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ShortcutsAction.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = ShortcutsAction.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ShortcutsAction.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ShortcutsAction.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ShortcutsAction.encode(to:)(void *a1)
{
  id v4 = v1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ShortcutsAction.CodingKeys>);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_18_11();
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  unint64_t v10 = lazy protocol witness table accessor for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_1F6858, &unk_1F6858, v10, v8, v9);
  uint64_t v11 = *v4;
  uint64_t v12 = v4[1];
  char v20 = 0;
  OUTLINED_FUNCTION_15_13(v11, v12, (uint64_t)&v20);
  if (!v2)
  {
    uint64_t v13 = v4[2];
    uint64_t v14 = v4[3];
    char v19 = 1;
    OUTLINED_FUNCTION_15_13(v13, v14, (uint64_t)&v19);
    uint64_t v15 = v4[4];
    uint64_t v16 = v4[5];
    char v18 = 2;
    OUTLINED_FUNCTION_15_13(v15, v16, (uint64_t)&v18);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
}

uint64_t ShortcutsAction.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ShortcutsAction.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_38_14();
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  unint64_t v9 = lazy protocol witness table accessor for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_1F6858, &unk_1F6858, v9, v7, v8);
  if (v2) {
    return OUTLINED_FUNCTION_51_13();
  }
  char v26 = 0;
  uint64_t v10 = OUTLINED_FUNCTION_40_14((uint64_t)&v26);
  uint64_t v12 = v11;
  uint64_t v23 = v10;
  char v25 = 1;
  swift_bridgeObjectRetain(v11);
  uint64_t v13 = OUTLINED_FUNCTION_40_14((uint64_t)&v25);
  uint64_t v15 = v14;
  uint64_t v21 = v13;
  char v24 = 2;
  OUTLINED_FUNCTION_17_1();
  uint64_t v22 = v15;
  uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)(&v24, v5);
  uint64_t v18 = v17;
  uint64_t v19 = v16;
  OUTLINED_FUNCTION_14_23(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  OUTLINED_FUNCTION_17_1();
  OUTLINED_FUNCTION_51_13();
  OUTLINED_FUNCTION_20();
  swift_bridgeObjectRelease(v22);
  uint64_t result = OUTLINED_FUNCTION_69();
  *a2 = v23;
  a2[1] = v12;
  a2[2] = v21;
  a2[3] = v22;
  a2[4] = v19;
  a2[5] = v18;
  return result;
}

double protocol witness for Decodable.init(from:) in conformance ShortcutsAction@<D0>( void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }

  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ShortcutsAction(void *a1)
{
  return ShortcutsAction.encode(to:)(a1);
}

uint64_t key path setter for ShortcutsFlowActivity.underlyingActions : ShortcutsFlowActivity( void *a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(class metadata base offset for ShortcutsFlowActivity + **a2 + 16);
  uint64_t v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

double ShortcutsFlowActivity.underlyingActions.getter()
{
  uint64_t v1 = (void *)(v0 + direct field offset for ShortcutsFlowActivity.underlyingActions);
  OUTLINED_FUNCTION_30_12(v0 + direct field offset for ShortcutsFlowActivity.underlyingActions, (uint64_t)v3, 0LL);
  *(void *)&double result = swift_bridgeObjectRetain(*v1).n128_u64[0];
  return result;
}

uint64_t ShortcutsFlowActivity.underlyingActions.setter(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + direct field offset for ShortcutsFlowActivity.underlyingActions);
  OUTLINED_FUNCTION_30_12((uint64_t)v3, (uint64_t)v6, 1LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

void ShortcutsFlowActivity.underlyingActions.modify(uint64_t a1)
{
}

uint64_t ShortcutsFlowActivity.init(activityType:underlyingActions:siriEnvironment:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_38_14();
  *(void *)(v4 + direct field offset for ShortcutsFlowActivity.underlyingActions) = _swiftEmptyArrayStorage;
  uint64_t v8 = ActivityType.rawValue.getter();
  uint64_t v10 = v9;
  if (a3)
  {
    uint64_t v11 = swift_retain(a3);
    SiriEnvironment.flowTask.getter(v11);
    uint64_t v12 = OUTLINED_FUNCTION_49_12();
    dispatch thunk of FlowTaskProvider.creationTime.getter(v12);
    swift_release();
    uint64_t v13 = type metadata accessor for Date(0LL);
    if (__swift_getEnumTagSinglePayload(v5, 1LL, v13) != 1)
    {
      double v16 = Date.timeIntervalSince1970.getter();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(v5, v13);
      uint64_t v15 = 0LL;
      double v14 = v16;
      goto LABEL_6;
    }

    outlined destroy of Any?(v5, &demangling cache variable for type metadata for Date?);
  }

  double v14 = 0.0;
  uint64_t v15 = 1LL;
LABEL_6:
  DefaultFlowActivity.init(activityName:activityType:activityStartTime:)( 0xD000000000000018LL,  0x8000000000194E40LL,  v8,  v10,  *(void *)&v14,  v15);
  OUTLINED_FUNCTION_49_12();
  uint64_t v17 = type metadata accessor for ActivityType(0LL);
  OUTLINED_FUNCTION_53_11(*(void *)(v17 - 8));
  uint64_t v18 = (uint64_t *)(v4 + direct field offset for ShortcutsFlowActivity.underlyingActions);
  OUTLINED_FUNCTION_30_12(v4 + direct field offset for ShortcutsFlowActivity.underlyingActions, (uint64_t)v21, 1LL);
  uint64_t v19 = *v18;
  *uint64_t v18 = v3;
  swift_bridgeObjectRelease(v19);
  return v4;
}

uint64_t ShortcutsFlowActivity.__allocating_init(from:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_59_5();
  swift_allocObject(v1, v2, v3);
  return ShortcutsFlowActivity.init(from:)(v0);
}

uint64_t ShortcutsFlowActivity.init(from:)(void *a1)
{
  *(void *)(v1 + direct field offset for ShortcutsFlowActivity.underlyingActions) = _swiftEmptyArrayStorage;
  outlined init with copy of AppShortcutInvoking((uint64_t)a1, (uint64_t)v5);
  uint64_t v3 = DefaultFlowActivity.init(from:)(v5);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v3;
}

void ShortcutsFlowActivity.init(activityName:activityType:activityStartTime:)( uint64_t a1, uint64_t a2)
{
}

uint64_t ShortcutsFlowActivity.__ivar_destroyer()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + direct field offset for ShortcutsFlowActivity.underlyingActions));
}

void ShortcutsFlowActivity.deinit()
{
  uint64_t v0 = DefaultFlowActivity.deinit();
  swift_bridgeObjectRelease(*(void *)(v0 + direct field offset for ShortcutsFlowActivity.underlyingActions));
  OUTLINED_FUNCTION_1();
}

uint64_t ShortcutsFlowActivity.__deallocating_deinit()
{
  uint64_t v0 = DefaultFlowActivity.deinit();
  swift_bridgeObjectRelease(*(void *)(v0 + direct field offset for ShortcutsFlowActivity.underlyingActions));
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

void *specialized CustomIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)( uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13)
{
  v34[3] = a12;
  v34[4] = a13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v34);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a12 - 8) + 32LL))( boxed_opaque_existential_1,  a10,  a12);
  a11[10] = a1;
  a11[11] = a2;
  outlined init with copy of AppShortcutInvoking((uint64_t)a4, (uint64_t)(a11 + 2));
  a11[9] = a3;
  a11[12] = a9;
  outlined init with copy of AppShortcutInvoking((uint64_t)v34, (uint64_t)(a11 + 13));
  outlined init with copy of AppShortcutInvoking((uint64_t)a4, (uint64_t)v33);
  uint64_t v20 = one-time initialization token for shared;
  swift_bridgeObjectRetain(a2);
  swift_retain(a3);
  swift_retain(a9);
  if (v20 != -1) {
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  }
  uint64_t v21 = static WFDialogState.shared;
  swift_retain(static WFDialogState.shared);
  swift_release();
  swift_release();
  uint64_t v22 = OUTLINED_FUNCTION_43_10();
  uint64_t v23 = OUTLINED_FUNCTION_19(v22, 16LL);
  __swift_destroy_boxed_opaque_existential_1Tm(v34);
  uint64_t v24 = type metadata accessor for CustomIntentsDialogTemplating();
  uint64_t v25 = OUTLINED_FUNCTION_19(v24, 152LL);
  specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)( v33,  v21,  0LL,  1,  a5,  a6,  a7,  a8,  v23,  v25);
  uint64_t v27 = v26;
  a11[7] = v26;
  uint64_t v28 = a11[9];
  uint64_t v29 = type metadata accessor for CustomIntentSnippetProvider();
  OUTLINED_FUNCTION_19(v29, 88LL);
  a11[8] = CustomIntentSnippetProvider.init(voiceCommandName:templatingService:deviceState:siriEnvironment:)( a1,  a2,  v27,  a4,  v28);
  swift_retain(v27);
  swift_retain(v28);
  return a11;
}

uint64_t type metadata accessor for ShortcutsFlowActivity(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for ShortcutsFlowActivity;
  if (!type metadata singleton initialization cache for ShortcutsFlowActivity) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ShortcutsFlowActivity);
  }
  return result;
}

unint64_t type metadata accessor for SAIntentGroupLaunchAppWithIntent()
{
  unint64_t result = lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent;
  if (!lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___SAIntentGroupLaunchAppWithIntent);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store( result,  (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent);
  }

  return result;
}

uint64_t outlined init with copy of WorkflowDataModels.CustomIntentErrorModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of WorkflowDataModels.CustomIntentErrorModel(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ShortcutsAction.CodingKeys, &unk_1F6858);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ShortcutsAction.CodingKeys, &unk_1F6858);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ShortcutsAction.CodingKeys, &unk_1F6858);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ShortcutsAction.CodingKeys, &unk_1F6858);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors and conformance CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors and conformance CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors;
  if (!lazy protocol witness table cache variable for type CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors and conformance CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors,  &type metadata for CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors and conformance CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors and conformance CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors;
  if (!lazy protocol witness table cache variable for type CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors and conformance CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors,  &type metadata for CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors and conformance CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors);
  }

  return result;
}

uint64_t sub_7EC14@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for ShortcutsFlowActivity + **a1 + 8))();
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for CustomIntentResponseGenerator()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin29CustomIntentResponseGenerator);
}

uint64_t storeEnumTagSinglePayload for CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_7ECC0 + 4 * byte_182425[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_7ECF4 + 4 * asc_182420[v4]))();
}

uint64_t sub_7ECF4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_7ECFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x7ED04LL);
  }
  return result;
}

uint64_t sub_7ED10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x7ED18LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_7ED1C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_7ED24(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors()
{
  return &type metadata for CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors;
}

ValueMetadata *type metadata accessor for ShortcutsAction()
{
  return &type metadata for ShortcutsAction;
}

uint64_t type metadata completion function for ShortcutsFlowActivity(uint64_t a1)
{
  uint64_t v2 = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0LL, 1LL, &v2, a1 + class metadata base offset for ShortcutsFlowActivity);
}

uint64_t ObjC metadata update function for ShortcutsFlowActivity()
{
  return type metadata accessor for ShortcutsFlowActivity(0LL);
}

uint64_t storeEnumTagSinglePayload for ShortcutsAction.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_7EDF0 + 4 * byte_18242F[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_7EE24 + 4 * byte_18242A[v4]))();
}

uint64_t sub_7EE24(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_7EE2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x7EE34LL);
  }
  return result;
}

uint64_t sub_7EE40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x7EE48LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_7EE4C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_7EE54(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ShortcutsAction.CodingKeys()
{
  return &unk_1F6858;
}

uint64_t OUTLINED_FUNCTION_14_23@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_15_13(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

uint64_t OUTLINED_FUNCTION_17_18(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t OUTLINED_FUNCTION_29_14()
{
  uint64_t v2 = *(void *)(v1 + 40);
  __swift_project_boxed_opaque_existential_1(v0, v2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_32_10()
{
  return swift_task_dealloc(*(void *)(v0 + 144));
}

uint64_t OUTLINED_FUNCTION_33_11()
{
  return swift_task_dealloc(*(void *)(v0 + 144));
}

uint64_t OUTLINED_FUNCTION_34_13(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_stdlib_reportUnimplementedInitializer(a1, 40LL, a3, 50LL, 0LL);
}

id OUTLINED_FUNCTION_35_16(char a1)
{
  return static SLFConfirmationItemConverter.toDirectInvocationCommand(confirmation:appBundleId:deviceState:)( a1,  v1,  v2,  v3);
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_40_14(uint64_t a1)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_41_12()
{
  return swift_release(*(void *)(v0 + 96));
}

uint64_t OUTLINED_FUNCTION_43_10()
{
  return type metadata accessor for AppNameResolver();
}

uint64_t OUTLINED_FUNCTION_44_6()
{
  return type metadata accessor for TemplatingResult(0LL);
}

uint64_t OUTLINED_FUNCTION_49_12()
{
  return swift_release(v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_51_13()
{
  return __swift_destroy_boxed_opaque_existential_1Tm(v0);
}

uint64_t OUTLINED_FUNCTION_53_11@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

void *OUTLINED_FUNCTION_54_13( uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13)
{
  return specialized CustomIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)( a1,  a2,  a3,  a4,  *(void *)(v13 - 112),  *(void *)(v13 - 104),  *(void *)(v13 - 96),  *(void *)(v13 - 88),  a9,  a10,  a11,  a12,  a13);
}

uint64_t OUTLINED_FUNCTION_57_9()
{
  return *(void *)(v0 + 32);
}

uint64_t OUTLINED_FUNCTION_59_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_60_9()
{
  return swift_task_dealloc(*(void *)(v0 + 88));
}

uint64_t OUTLINED_FUNCTION_61_10()
{
  return swift_task_dealloc(*(void *)(v0 + 128));
}

Swift::String __swiftcall INIntentCategory.asINPBString()()
{
  if (v0 >= 10 && __OFADD__(v0++, 1LL))
  {
LABEL_31:
    __break(1u);
    JUMPOUT(0x7F280LL);
  }

  if (v0 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_30;
  }

  if (v0 > 0x7FFFFFFF)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  switch((int)v0)
  {
    case 1:
      uint64_t v2 = @"CATEGORY_INFORMATION";
      goto LABEL_27;
    case 2:
      uint64_t v2 = @"CATEGORY_PLAY_AUDIO";
      goto LABEL_27;
    case 3:
      uint64_t v2 = @"CATEGORY_PLAY_VIDEO";
      goto LABEL_27;
    case 4:
      uint64_t v2 = @"CATEGORY_ORDER";
      goto LABEL_27;
    case 5:
      uint64_t v2 = @"CATEGORY_NAVIGATION";
      goto LABEL_27;
    case 6:
      uint64_t v2 = @"CATEGORY_START";
      goto LABEL_27;
    case 7:
      uint64_t v2 = @"CATEGORY_SHARE";
      goto LABEL_27;
    case 8:
      uint64_t v2 = @"CATEGORY_CREATE";
      goto LABEL_27;
    case 9:
      uint64_t v2 = @"CATEGORY_SEARCH";
      goto LABEL_27;
    case 11:
      uint64_t v2 = @"CATEGORY_TOGGLE";
      goto LABEL_27;
    case 12:
      uint64_t v2 = @"CATEGORY_DOWNLOAD";
      goto LABEL_27;
    case 13:
      uint64_t v2 = @"CATEGORY_LOG";
      goto LABEL_27;
    case 14:
      uint64_t v2 = @"CATEGORY_CHECK_IN";
      goto LABEL_27;
    case 15:
      uint64_t v2 = @"CATEGORY_WORKFLOW";
      goto LABEL_27;
    case 16:
      uint64_t v2 = @"CATEGORY_REQUEST";
      goto LABEL_27;
    case 17:
      uint64_t v2 = @"CATEGORY_SET";
      goto LABEL_27;
    case 18:
      uint64_t v2 = @"CATEGORY_CALL_AUDIO";
      goto LABEL_27;
    case 19:
      uint64_t v2 = @"CATEGORY_CALL_VIDEO";
      goto LABEL_27;
    case 20:
      uint64_t v2 = @"CATEGORY_PLAY_SOUND";
      goto LABEL_27;
    case 21:
      uint64_t v2 = @"CATEGORY_USER_ACTIVITY";
LABEL_27:
      uint64_t v3 = v2;
      break;
    default:
      uint64_t v2 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  v0));
      break;
  }

  uint64_t v4 = v2;
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  uint64_t v8 = v5;
  uint64_t v9 = v7;
  result._object = v9;
  result._countAndFlagsBits = v8;
  return result;
}

INPerson __swiftcall Contact.toINPerson()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactHandle?);
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_35();
  uint64_t v47 = v2 - v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_35();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for PersonNameComponents(0LL);
  uint64_t v48 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_35();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = Contact.namePrefix.getter();
  uint64_t v45 = v12;
  uint64_t v46 = v11;
  uint64_t v13 = Contact.givenName.getter();
  uint64_t v43 = v14;
  uint64_t v44 = v13;
  uint64_t v15 = Contact.middleName.getter();
  uint64_t v41 = v16;
  uint64_t v42 = v15;
  uint64_t v17 = Contact.familyName.getter();
  uint64_t v19 = v18;
  uint64_t v20 = Contact.nameSuffix.getter();
  uint64_t v22 = v21;
  uint64_t v23 = Contact.nickname.getter();
  uint64_t v25 = v24;
  __swift_storeEnumTagSinglePayload(v6, 1LL, 1LL, v7);
  uint64_t v26 = PersonNameComponents.init(namePrefix:givenName:middleName:familyName:nameSuffix:nickname:phoneticRepresentation:)( v46,  v45,  v44,  v43,  v42,  v41,  v17,  v19,  v20,  v22,  v23,  v25,  v6);
  uint64_t v27 = Contact.handles.getter(v26);
  specialized Collection.first.getter(v27, v47);
  swift_bridgeObjectRelease(v27);
  uint64_t v28 = type metadata accessor for ContactHandle(0LL);
  if (__swift_getEnumTagSinglePayload(v47, 1LL, v28) == 1)
  {
    outlined destroy of ContactHandle?(v47);
    uint64_t v29 = 0LL;
    uint64_t v30 = 0LL;
  }

  else
  {
    uint64_t v29 = ContactHandle.value.getter();
    uint64_t v30 = v31;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8LL))(v47, v28);
  }

  id v32 = objc_allocWithZone(&OBJC_CLASS___INPersonHandle);
  id v33 = @nonobjc INPersonHandle.init(value:type:)(v29, v30, 0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v6, v10, v7);
  uint64_t v34 = __swift_storeEnumTagSinglePayload(v6, 0LL, 1LL, v7);
  uint64_t v35 = Contact.id.getter(v34);
  uint64_t v37 = v36;
  id v38 = objc_allocWithZone(&OBJC_CLASS___INPerson);
  id v39 = @nonobjc INPerson.init(personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:)( v33,  v6,  0LL,  0LL,  0LL,  v35,  v37,  0LL,  0LL);
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v10, v7);
  return (INPerson)v39;
}

uint64_t outlined destroy of ContactHandle?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactHandle?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

id @nonobjc INPersonHandle.init(value:type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v6 = 0LL;
  }

  id v7 = [v3 initWithValue:v6 type:a3];

  return v7;
}

id @nonobjc INPerson.init(personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  uint64_t v16 = type metadata accessor for PersonNameComponents(0LL);
  Class isa = 0LL;
  if (__swift_getEnumTagSinglePayload(a2, 1LL, v16) != 1)
  {
    Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8LL))(a2, v16);
  }

  if (a4)
  {
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a4);
  }

  else
  {
    NSString v18 = 0LL;
  }

  if (!a7)
  {
    NSString v19 = 0LL;
    if (a9) {
      goto LABEL_8;
    }
LABEL_10:
    NSString v20 = 0LL;
    goto LABEL_11;
  }

  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a7);
  if (!a9) {
    goto LABEL_10;
  }
LABEL_8:
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a9);
LABEL_11:
  id v21 = [v10 initWithPersonHandle:a1 nameComponents:isa displayName:v18 image:a5 contactIdentifier:v19 customIdentifier:v20];

  return v21;
}

uint64_t DeviceState.asSiriKitDeviceState()(uint64_t a1, uint64_t a2)
{
  v7[3] = a1;
  v7[4] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v7);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(boxed_opaque_existential_1, v2, a1);
  return SirikitDeviceState.__allocating_init(from:)(v7);
}

void DeviceState.asWFSiriRunSource()()
{
  if ((OUTLINED_FUNCTION_1_20() & 1) == 0 && (OUTLINED_FUNCTION_3_26() & 1) == 0) {
    OUTLINED_FUNCTION_2_20();
  }
  OUTLINED_FUNCTION_2();
}

void DeviceState.currentDevice.getter()
{
  if ((OUTLINED_FUNCTION_1_20() & 1) == 0
    && (OUTLINED_FUNCTION_3_26() & 1) == 0
    && (OUTLINED_FUNCTION_2_20() & 1) == 0
    && (dispatch thunk of DeviceState.isMac.getter(v1, v0) & 1) == 0
    && (dispatch thunk of DeviceState.isPad.getter(v1) & 1) == 0)
  {
    dispatch thunk of DeviceState.isAppleTV.getter(v1, v0);
  }

  OUTLINED_FUNCTION_2();
}

uint64_t OUTLINED_FUNCTION_1_20()
{
  return dispatch thunk of DeviceState.isHomePod.getter();
}

uint64_t OUTLINED_FUNCTION_2_20()
{
  return dispatch thunk of DeviceState.isWatch.getter(v1, v0);
}

uint64_t OUTLINED_FUNCTION_3_26()
{
  return dispatch thunk of DeviceState.isCarPlay.getter(v1, v0);
}

void LinkActionDialogTemplating.__allocating_init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)()
{
  uint64_t v5 = OUTLINED_FUNCTION_48_10(v3, v4, v13);
  OUTLINED_FUNCTION_39_14(v5, v6, v7, v8, v9, v10, v11, v12, v14);
  __swift_destroy_boxed_opaque_existential_1Tm(v0);
  OUTLINED_FUNCTION_24_0();
}

uint64_t LinkActionDialogTemplating.makeParameterPromptDialog(parameterName:customPrompt:actionMetadata:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v5[7] = OUTLINED_FUNCTION_20_10(v6);
  v5[8] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t LinkActionDialogTemplating.makeParameterPromptDialog(parameterName:customPrompt:actionMetadata:)()
{
  uint64_t v2 = v1[4];
  v1[9] = *(void *)(v1[6] + 64LL);
  if (v2)
  {
    uint64_t v3 = (void *)swift_task_alloc(dword_21CCF4);
    v1[10] = v3;
    *uint64_t v3 = v1;
    v3[1] = LinkActionDialogTemplating.makeParameterPromptDialog(parameterName:customPrompt:actionMetadata:);
    return OUTLINED_FUNCTION_37_14(v1[8]);
  }

  else
  {
    uint64_t v5 = OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_75_5(v5);
    uint64_t v6 = (void *)v1[9];
    uint64_t v7 = v1[7];
    uint64_t v9 = v1[2];
    uint64_t v8 = v1[3];
    OUTLINED_FUNCTION_9_4();
    OUTLINED_FUNCTION_24_15(v9, v8);
    __swift_storeEnumTagSinglePayload(v7, 0LL, 1LL, v0);
    id v10 = OUTLINED_FUNCTION_25_20();
    unint64_t v11 = OUTLINED_FUNCTION_64_6();
    OUTLINED_FUNCTION_41_13(v11);
    OUTLINED_FUNCTION_121_0();
    id v12 = [(id)objc_opt_self(LNSystemProtocol) searchSystemProtocol];
    OUTLINED_FUNCTION_74_5((uint64_t)v12);
    OUTLINED_FUNCTION_120_1();
    OUTLINED_FUNCTION_1_2();
    id v13 = OUTLINED_FUNCTION_25_20();
    OUTLINED_FUNCTION_141((uint64_t)v13);
    OUTLINED_FUNCTION_35_10();
    id v15 = OUTLINED_FUNCTION_123_1(v14, "deleteEntitySystemProtocol");
    OUTLINED_FUNCTION_73_4((uint64_t)v15);
    OUTLINED_FUNCTION_118_1();
    OUTLINED_FUNCTION_37();
    uint64_t v16 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunLinkActionCATsSimple + *v6 + 112));
    v1[11] = v16;
    uint64_t v17 = OUTLINED_FUNCTION_70_6( v16,  (uint64_t)LinkActionDialogTemplating.makeParameterPromptDialog(parameterName:customPrompt:actionMetadata:));
    return OUTLINED_FUNCTION_45_9(v17, v18, v19, v20, v21);
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 80));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  OUTLINED_FUNCTION_68_4();
  uint64_t v1 = (void *)v0[9];
  uint64_t v2 = v0[7];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  OUTLINED_FUNCTION_5_14();
  OUTLINED_FUNCTION_24_15(v4, v3);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  __swift_storeEnumTagSinglePayload(v2, 0LL, 1LL, v5);
  uint64_t v6 = OUTLINED_FUNCTION_25_20();
  uint64_t v7 = OUTLINED_FUNCTION_64_6();
  OUTLINED_FUNCTION_41_13(v7);
  OUTLINED_FUNCTION_121_0();
  uint64_t v8 = [(id)objc_opt_self(LNSystemProtocol) searchSystemProtocol];
  OUTLINED_FUNCTION_74_5((uint64_t)v8);
  OUTLINED_FUNCTION_120_1();
  OUTLINED_FUNCTION_1_2();
  uint64_t v9 = OUTLINED_FUNCTION_25_20();
  OUTLINED_FUNCTION_141((uint64_t)v9);
  OUTLINED_FUNCTION_35_10();
  unint64_t v11 = OUTLINED_FUNCTION_123_1(v10, "deleteEntitySystemProtocol");
  OUTLINED_FUNCTION_73_4((uint64_t)v11);
  OUTLINED_FUNCTION_118_1();
  OUTLINED_FUNCTION_37();
  id v12 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunLinkActionCATsSimple + *v1 + 112));
  v0[11] = v12;
  id v13 = OUTLINED_FUNCTION_70_6( v12,  (uint64_t)LinkActionDialogTemplating.makeParameterPromptDialog(parameterName:customPrompt:actionMetadata:));
  return OUTLINED_FUNCTION_45_9(v13, v14, v15, v16, v17);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  OUTLINED_FUNCTION_104();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_77_1();
  OUTLINED_FUNCTION_10_0(v5);
  v0[12] = v1;
  swift_task_dealloc(v6);
  uint64_t v7 = v0[8];
  outlined destroy of URL?(v0[7], &demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of URL?(v7, &demangling cache variable for type metadata for SpeakableString?);
  if (v1)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_45_7(v8, v9, v10);
  }

  else
  {
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_20_0();
    return (*(uint64_t (**)(uint64_t))(v2 + 8))(v4);
  }

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(v0 + 64));
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t LinkActionDialogTemplating.makeParameterPromptDialog_preRFv2(parameterName:customPrompt:actionMetadata:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  _OWORD v6[2] = a1;
  v6[3] = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v6[8] = OUTLINED_FUNCTION_20_10(v7);
  v6[9] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t LinkActionDialogTemplating.makeParameterPromptDialog_preRFv2(parameterName:customPrompt:actionMetadata:)()
{
  uint64_t v2 = v1[5];
  v1[10] = *(void *)(v1[7] + 56LL);
  if (v2)
  {
    uint64_t v3 = (void *)swift_task_alloc(dword_21CCF4);
    v1[11] = v3;
    *uint64_t v3 = v1;
    v3[1] = LinkActionDialogTemplating.makeParameterPromptDialog_preRFv2(parameterName:customPrompt:actionMetadata:);
    return OUTLINED_FUNCTION_37_14(v1[9]);
  }

  else
  {
    uint64_t v5 = OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_75_5(v5);
    uint64_t v6 = (void *)v1[10];
    uint64_t v7 = v1[8];
    uint64_t v9 = v1[3];
    uint64_t v8 = v1[4];
    OUTLINED_FUNCTION_9_4();
    OUTLINED_FUNCTION_24_15(v9, v8);
    __swift_storeEnumTagSinglePayload(v7, 0LL, 1LL, v0);
    id v10 = OUTLINED_FUNCTION_25_20();
    unint64_t v11 = OUTLINED_FUNCTION_64_6();
    OUTLINED_FUNCTION_41_13(v11);
    OUTLINED_FUNCTION_121_0();
    id v12 = [(id)objc_opt_self(LNSystemProtocol) searchSystemProtocol];
    OUTLINED_FUNCTION_74_5((uint64_t)v12);
    OUTLINED_FUNCTION_120_1();
    OUTLINED_FUNCTION_1_2();
    id v13 = OUTLINED_FUNCTION_25_20();
    OUTLINED_FUNCTION_141((uint64_t)v13);
    OUTLINED_FUNCTION_35_10();
    id v15 = OUTLINED_FUNCTION_123_1(v14, "deleteEntitySystemProtocol");
    OUTLINED_FUNCTION_73_4((uint64_t)v15);
    OUTLINED_FUNCTION_118_1();
    OUTLINED_FUNCTION_37();
    uint64_t v16 = OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunLinkActionCATs + *v6 + 56));
    uint64_t v17 = (void *)OUTLINED_FUNCTION_110_1(v16);
    uint64_t v18 = OUTLINED_FUNCTION_65_6(v17);
    return OUTLINED_FUNCTION_46_13(v18, v19, v20, v21, v22, v23);
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_3_0(*(void *)(*(void *)v0 + 88LL));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  OUTLINED_FUNCTION_68_4();
  uint64_t v1 = (void *)v0[10];
  uint64_t v2 = v0[8];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  OUTLINED_FUNCTION_5_14();
  OUTLINED_FUNCTION_24_15(v4, v3);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  __swift_storeEnumTagSinglePayload(v2, 0LL, 1LL, v5);
  uint64_t v6 = OUTLINED_FUNCTION_25_20();
  uint64_t v7 = OUTLINED_FUNCTION_64_6();
  OUTLINED_FUNCTION_41_13(v7);
  OUTLINED_FUNCTION_121_0();
  uint64_t v8 = [(id)objc_opt_self(LNSystemProtocol) searchSystemProtocol];
  OUTLINED_FUNCTION_74_5((uint64_t)v8);
  OUTLINED_FUNCTION_120_1();
  OUTLINED_FUNCTION_1_2();
  uint64_t v9 = OUTLINED_FUNCTION_25_20();
  OUTLINED_FUNCTION_141((uint64_t)v9);
  OUTLINED_FUNCTION_35_10();
  unint64_t v11 = OUTLINED_FUNCTION_123_1(v10, "deleteEntitySystemProtocol");
  OUTLINED_FUNCTION_73_4((uint64_t)v11);
  OUTLINED_FUNCTION_118_1();
  OUTLINED_FUNCTION_37();
  id v12 = OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunLinkActionCATs + *v1 + 56));
  id v13 = (void *)OUTLINED_FUNCTION_110_1(v12);
  uint64_t v14 = OUTLINED_FUNCTION_65_6(v13);
  return OUTLINED_FUNCTION_46_13(v14, v15, v16, v17, v18, v19);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  OUTLINED_FUNCTION_104();
  id v13 = v2;
  uint64_t v14 = v3;
  id v12 = (void *)v1;
  uint64_t v4 = *(void **)v1;
  id v12 = v4;
  uint64_t v6 = v4[8];
  uint64_t v5 = v4[9];
  OUTLINED_FUNCTION_10_0(&v12);
  v4[13] = v0;
  swift_task_dealloc(v7);
  OUTLINED_FUNCTION_89_2(v6);
  OUTLINED_FUNCTION_89_2(v5);
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_45_7(v8, v9, v10);
  }

  else
  {
    swift_task_dealloc(v4[9]);
    OUTLINED_FUNCTION_40_0();
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(v0 + 72));
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t LinkActionDialogTemplating.makeParameterValueConfirmation(customPrompt:parameterValue:)( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[5] = OUTLINED_FUNCTION_20_10(v3);
  v2[6] = OUTLINED_FUNCTION_11_0();
  uint64_t v4 = OUTLINED_FUNCTION_126_1();
  v2[7] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[8] = v5;
  v2[9] = OUTLINED_FUNCTION_9_0(v5);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t LinkActionDialogTemplating.makeParameterValueConfirmation(customPrompt:parameterValue:)()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 16);
  OUTLINED_FUNCTION_122_0(*(void *)(v0 + 32));
  uint64_t v3 = OUTLINED_FUNCTION_119_0();
  *(void *)(v0 + 80) = ((uint64_t (*)(uint64_t))Locale.identifier.getter)(v3);
  *(void *)(v0 + 88) = v4;
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  if (v2)
  {
    uint64_t v5 = swift_task_alloc(dword_21CCF4);
    uint64_t v6 = (void *)OUTLINED_FUNCTION_110_1(v5);
    *uint64_t v6 = v0;
    v6[1] = LinkActionDialogTemplating.makeParameterValueConfirmation(customPrompt:parameterValue:);
    return OUTLINED_FUNCTION_35_17(*(void *)(v0 + 48));
  }

  else
  {
    uint64_t v8 = *(void *)(v0 + 48);
    OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_125_0(v8, 1LL);
    id v9 = [*(id *)(v0 + 24) displayRepresentation];
    if (v9)
    {
      id v10 = v9;
      id v11 = [v9 title];

      NSString v12 = String._bridgeToObjectiveC()();
      OUTLINED_FUNCTION_37();
      id v13 = [v11 localizedStringForLocaleIdentifier:v12];

      uint64_t v14 = OUTLINED_FUNCTION_147();
      uint64_t v16 = v15;

      OUTLINED_FUNCTION_24_15(v14, v16);
      uint64_t v17 = 0LL;
    }

    else
    {
      OUTLINED_FUNCTION_37();
      uint64_t v17 = 1LL;
    }

    uint64_t v18 = *(void *)(v0 + 32);
    OUTLINED_FUNCTION_125_0(*(void *)(v0 + 40), v17);
    uint64_t v19 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunLinkActionCATsSimple
                                                    + **(void **)(v18 + 64)
                                                    + 128));
    *(void *)(v0 + 104) = v19;
    uint64_t v20 = OUTLINED_FUNCTION_117_1( v19,  (uint64_t)LinkActionDialogTemplating.makeParameterValueConfirmation(customPrompt:parameterValue:));
    return v21(v20);
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_3_0(*(void *)(*(void *)v0 + 96LL));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  OUTLINED_FUNCTION_104();
  uint64_t v1 = [*(id *)(v0 + 24) displayRepresentation];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = [v1 title];

    uint64_t v4 = String._bridgeToObjectiveC()();
    OUTLINED_FUNCTION_14();
    uint64_t v5 = [v3 localizedStringForLocaleIdentifier:v4];

    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;

    OUTLINED_FUNCTION_24_15(v6, v8);
    id v9 = 0LL;
  }

  else
  {
    OUTLINED_FUNCTION_14();
    id v9 = 1LL;
  }

  id v11 = *(void *)(v0 + 32);
  id v10 = *(void *)(v0 + 40);
  NSString v12 = OUTLINED_FUNCTION_61_1();
  __swift_storeEnumTagSinglePayload(v10, v9, 1LL, v12);
  id v13 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunLinkActionCATsSimple
                                                  + **(void **)(v11 + 64)
                                                  + 128));
  *(void *)(v0 + 104) = v13;
  uint64_t v14 = OUTLINED_FUNCTION_117_1( v13,  (uint64_t)LinkActionDialogTemplating.makeParameterValueConfirmation(customPrompt:parameterValue:));
  return v15(v14);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_10_0(v3);
  *(void *)(v2 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    *(void *)(v2 + 120) = v0;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 48);
  OUTLINED_FUNCTION_89_2(*(void *)(v0 + 40));
  OUTLINED_FUNCTION_89_2(v1);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  return OUTLINED_FUNCTION_15_2(*(void *)(v0 + 120), *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 48);
  OUTLINED_FUNCTION_89_2(*(void *)(v0 + 40));
  OUTLINED_FUNCTION_89_2(v1);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t LinkActionDialogTemplating.makeParameterValueConfirmationPattern_preRFv2(customPrompt:parameterValue:)( uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = OUTLINED_FUNCTION_126_1();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = OUTLINED_FUNCTION_9_0(v5);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = OUTLINED_FUNCTION_9_0(*(void *)(v6 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t LinkActionDialogTemplating.makeParameterValueConfirmationPattern_preRFv2(customPrompt:parameterValue:)()
{
  if (*(void *)(v0 + 16))
  {
    uint64_t v3 = (void *)swift_task_alloc(dword_21CCF4);
    *(void *)(v0 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v3;
    *uint64_t v3 = v0;
    v3[1] = LinkActionDialogTemplating.makeParameterValueConfirmationPattern_preRFv2(customPrompt:parameterValue:);
    return OUTLINED_FUNCTION_35_17(*(void *)(v0 + 64));
  }

  else
  {
    uint64_t v5 = OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_16_20(v5);
    id v6 = [*(id *)(v0 + 24) displayRepresentation];
    uint64_t v7 = v6;
    if (v6)
    {
      uint64_t v2 = *(void *)(v0 + 48);
      uint64_t v1 = *(void *)(v0 + 40);
      id v8 = [v6 title];

      OUTLINED_FUNCTION_67_5();
      uint64_t v7 = (void *)OUTLINED_FUNCTION_129_1();
      OUTLINED_FUNCTION_66_7();
      OUTLINED_FUNCTION_142_0();
      OUTLINED_FUNCTION_140_0();
      id v9 = OUTLINED_FUNCTION_60_8(v8, "localizedStringForLocaleIdentifier:");
      OUTLINED_FUNCTION_35_10();

      OUTLINED_FUNCTION_147();
      OUTLINED_FUNCTION_141_0();
    }

    else
    {
      id v8 = 0LL;
    }

    id v10 = (void *)OUTLINED_FUNCTION_51_14();
    *(void *)(v0 + 88) = v10;
    v10[2] = v2;
    v10[3] = v7;
    v10[4] = v8;
    id v11 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v1 + 64));
    *(void *)(v0 + 96) = v11;
    *id v11 = v0;
    v11[1] = LinkActionDialogTemplating.makeParameterValueConfirmationPattern_preRFv2(customPrompt:parameterValue:);
    uint64_t v12 = OUTLINED_FUNCTION_81_3();
    return OUTLINED_FUNCTION_23_17(v12, v13, v14, v15, v16, v17);
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 72));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  OUTLINED_FUNCTION_38_1();
  uint64_t v3 = [*(id *)(v0 + 24) displayRepresentation];
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v2 = *(void *)(v0 + 48);
    uint64_t v1 = *(void *)(v0 + 40);
    uint64_t v5 = [v3 title];

    OUTLINED_FUNCTION_67_5();
    uint64_t v4 = (void *)OUTLINED_FUNCTION_129_1();
    OUTLINED_FUNCTION_66_7();
    OUTLINED_FUNCTION_142_0();
    OUTLINED_FUNCTION_140_0();
    id v6 = OUTLINED_FUNCTION_60_8(v5, "localizedStringForLocaleIdentifier:");
    OUTLINED_FUNCTION_35_10();

    OUTLINED_FUNCTION_147();
    OUTLINED_FUNCTION_141_0();
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  uint64_t v7 = (void *)OUTLINED_FUNCTION_51_14();
  *(void *)(v0 + 88) = v7;
  v7[2] = v2;
  v7[3] = v4;
  v7[4] = v5;
  id v8 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v1 + 64));
  *(void *)(v0 + 96) = v8;
  *id v8 = v0;
  v8[1] = LinkActionDialogTemplating.makeParameterValueConfirmationPattern_preRFv2(customPrompt:parameterValue:);
  id v9 = OUTLINED_FUNCTION_81_3();
  return OUTLINED_FUNCTION_23_17(v9, v10, v11, v12, v13, v14);
}

uint64_t LinkActionDialogTemplating.makeParameterValueConfirmationPattern_preRFv2(customPrompt:parameterValue:)( uint64_t a1)
{
  v2[13] = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = v2[10];
  if (!v1) {
    v2[14] = a1;
  }
  swift_bridgeObjectRelease(v6);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v1;
  OUTLINED_FUNCTION_17_19(a1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_15_2(*(void *)(v1 + 112), *(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v1;
  OUTLINED_FUNCTION_17_19(a1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t LinkActionDialogTemplating.actionConfirmationHeader_preRFv2(customDialog:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = OUTLINED_FUNCTION_94_0();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = OUTLINED_FUNCTION_9_0(v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingSection?);
  v2[7] = OUTLINED_FUNCTION_9_0(*(void *)(v5 - 8));
  uint64_t v6 = OUTLINED_FUNCTION_44_6();
  v2[8] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[9] = v7;
  v2[10] = OUTLINED_FUNCTION_9_0(v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[11] = OUTLINED_FUNCTION_9_0(*(void *)(v8 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t LinkActionDialogTemplating.actionConfirmationHeader_preRFv2(customDialog:)()
{
  if (*(void *)(v0 + 16))
  {
    uint64_t v1 = swift_task_alloc(dword_21CCF4);
    uint64_t v2 = (void *)OUTLINED_FUNCTION_110_1(v1);
    *uint64_t v2 = v0;
    v2[1] = LinkActionDialogTemplating.actionConfirmationHeader_preRFv2(customDialog:);
    return OUTLINED_FUNCTION_14_24(*(void *)(v0 + 88));
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 88);
    uint64_t v5 = OUTLINED_FUNCTION_61_1();
    __swift_storeEnumTagSinglePayload(v4, 1LL, 1LL, v5);
    OUTLINED_FUNCTION_87_2();
    uint64_t v7 = OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunLinkActionCATs + v6 + 8));
    uint64_t v8 = (void *)OUTLINED_FUNCTION_127_0(v7);
    uint64_t v9 = OUTLINED_FUNCTION_47_12(v8);
    return OUTLINED_FUNCTION_17_18(v9, v10, v11);
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_3_0(*(void *)(*(void *)v0 + 96LL));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  OUTLINED_FUNCTION_87_2();
  uint64_t v1 = OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunLinkActionCATs + v0 + 8));
  uint64_t v2 = (void *)OUTLINED_FUNCTION_127_0(v1);
  uint64_t v3 = OUTLINED_FUNCTION_47_12(v2);
  return OUTLINED_FUNCTION_17_18(v3, v4, v5);
}

{
  OUTLINED_FUNCTION_57_10();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

void LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)()
{
  uint64_t v5 = OUTLINED_FUNCTION_48_10(v3, v4, v13);
  OUTLINED_FUNCTION_39_14(v5, v6, v7, v8, v9, v10, v11, v12, v14);
  __swift_destroy_boxed_opaque_existential_1Tm(v0);
  OUTLINED_FUNCTION_24_0();
}

uint64_t LinkActionDialogTemplating.makeActionPerformedPattern_preRFv2(customResponse:useSonicStatus:)( uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 136) = a2;
  *(void *)(v3 + 64) = a1;
  *(void *)(v3 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 80) = OUTLINED_FUNCTION_9_0(*(void *)(v4 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t LinkActionDialogTemplating.makeActionPerformedPattern_preRFv2(customResponse:useSonicStatus:)()
{
  if (*(void *)(v1 + 64))
  {
    uint64_t v2 = (void *)swift_task_alloc(dword_21CCF4);
    *(void *)(v1 + 88) = v2;
    *uint64_t v2 = v1;
    v2[1] = LinkActionDialogTemplating.makeActionPerformedPattern_preRFv2(customResponse:useSonicStatus:);
    return OUTLINED_FUNCTION_35_17(*(void *)(v1 + 80));
  }

  else
  {
    uint64_t v4 = OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_16_20(v4);
    uint64_t v5 = *(void *)(v1 + 80);
    char v6 = *(_BYTE *)(v1 + 136);
    uint64_t v7 = OUTLINED_FUNCTION_10_16(*(void *)(v1 + 72));
    *(void *)(v1 + 96) = v7;
    *(void *)(v7 + 16) = v5;
    if ((v6 & 1) != 0)
    {
      uint64_t v8 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(v0 + 24));
      *(void *)(v1 + 104) = v8;
      *uint64_t v8 = v1;
      v8[1] = LinkActionDialogTemplating.makeActionPerformedPattern_preRFv2(customResponse:useSonicStatus:);
    }

    else
    {
      uint64_t v9 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(v0 + 16));
      *(void *)(v1 + 120) = v9;
      *uint64_t v9 = v1;
      v9[1] = LinkActionDialogTemplating.makeActionPerformedPattern_preRFv2(customResponse:useSonicStatus:);
    }

    uint64_t v10 = OUTLINED_FUNCTION_99();
    return OUTLINED_FUNCTION_23_17(v10, v11, v12, v13, v14, v15);
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_3_0(*(void *)(*(void *)v0 + 88LL));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v3 = *(unsigned __int8 *)(v1 + 136);
  uint64_t v4 = OUTLINED_FUNCTION_10_16(*(void *)(v1 + 72));
  *(void *)(v1 + 96) = v4;
  *(void *)(v4 + 16) = v2;
  if (v3 == 1)
  {
    uint64_t v5 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(v0 + 24));
    *(void *)(v1 + 104) = v5;
    *uint64_t v5 = v1;
    v5[1] = LinkActionDialogTemplating.makeActionPerformedPattern_preRFv2(customResponse:useSonicStatus:);
  }

  else
  {
    char v6 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(v0 + 16));
    *(void *)(v1 + 120) = v6;
    *char v6 = v1;
    v6[1] = LinkActionDialogTemplating.makeActionPerformedPattern_preRFv2(customResponse:useSonicStatus:);
  }

  uint64_t v7 = OUTLINED_FUNCTION_99();
  return OUTLINED_FUNCTION_23_17(v7, v8, v9, v10, v11, v12);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  OUTLINED_FUNCTION_50_0();
  v3[2] = v1;
  v3[3] = v2;
  v3[4] = v0;
  uint64_t v4 = v3[13];
  *uint64_t v5 = *v1;
  v3[14] = v0;
  swift_task_dealloc(v4);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  OUTLINED_FUNCTION_50_0();
  v3[5] = v1;
  v3[6] = v2;
  v3[7] = v0;
  OUTLINED_FUNCTION_116_1(v3[15], (uint64_t)v3);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t LinkActionDialogTemplating.makeActionPerformedPattern_preRFv2(customResponse:useSonicStatus:)( uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 24);
  OUTLINED_FUNCTION_60_10(a1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_15_2(v2, *(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v2 = *(void *)(v1 + 48);
  OUTLINED_FUNCTION_60_10(a1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_15_2(v2, *(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v1;
  OUTLINED_FUNCTION_60_10(a1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v1;
  OUTLINED_FUNCTION_60_10(a1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t LinkActionDialogTemplating.makeActionConfirmationPattern_preRFv2(customResponse:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v1;
  OUTLINED_FUNCTION_17_19(a1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_8_4(*(void *)(v1 + 72), *(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v1;
  OUTLINED_FUNCTION_17_19(a1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t LinkActionDialogTemplating.makeActionConfirmationPattern_preRFv2(customResponse:)()
{
  if (v1[2])
  {
    uint64_t v2 = (void *)swift_task_alloc(dword_21CCF4);
    v1[5] = v2;
    uint64_t v3 = OUTLINED_FUNCTION_109_0(v2);
    return OUTLINED_FUNCTION_56_13(v3);
  }

  else
  {
    uint64_t v5 = OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_16_20(v5);
    uint64_t v6 = v1[4];
    uint64_t v7 = OUTLINED_FUNCTION_10_16(v1[3]);
    v1[6] = v7;
    *(void *)(v7 + 16) = v6;
    uint64_t v8 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v0 + 8));
    v1[7] = v8;
    *uint64_t v8 = v1;
    v8[1] = LinkActionDialogTemplating.makeActionConfirmationPattern_preRFv2(customResponse:);
    uint64_t v9 = OUTLINED_FUNCTION_100_1();
    return OUTLINED_FUNCTION_7_12(v9, v10, v11, v12, v13, v14);
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_3_0(*(void *)(*(void *)v0 + 40LL));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  OUTLINED_FUNCTION_104();
  uint64_t v2 = v1[4];
  uint64_t v3 = OUTLINED_FUNCTION_10_16(v1[3]);
  v1[6] = v3;
  *(void *)(v3 + 16) = v2;
  uint64_t v4 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v0 + 8));
  v1[7] = (uint64_t)v4;
  void *v4 = v1;
  v4[1] = LinkActionDialogTemplating.makeActionConfirmationPattern_preRFv2(customResponse:);
  uint64_t v5 = OUTLINED_FUNCTION_100_1();
  return OUTLINED_FUNCTION_7_12(v5, v6, v7, v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_10_0(v3);
  *(void *)(v2 + 64) = v1;
  swift_task_dealloc();
  if (!v1) {
    *(void *)(v2 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v0;
  }
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

uint64_t LinkActionDialogTemplating.makeContinueInAppPattern(customResponse:)()
{
  uint64_t v1 = type metadata accessor for CATOption(0LL);
  v0[2] = OUTLINED_FUNCTION_9_0(*(void *)(v1 - 8));
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v3 = OUTLINED_FUNCTION_9_0(*(void *)(v2 - 8));
  v0[3] = v3;
  uint64_t v4 = (void *)swift_task_alloc(dword_21CCF4);
  v0[4] = v4;
  void *v4 = v0;
  v4[1] = LinkActionDialogTemplating.makeContinueInAppPattern(customResponse:);
  return LNDialog.asSpeakableString.getter(v3);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 32));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t (*v8)(void, uint64_t (*)(), uint64_t);
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = type metadata accessor for RunLinkActionCATPatternsExecutor(0LL);
  static CATOption.defaultMode.getter(v3);
  uint64_t v4 = (void *)CATWrapper.__allocating_init(options:globals:)(v1, 0LL);
  v0[5] = v4;
  uint64_t v5 = swift_task_alloc(32LL);
  v0[6] = v5;
  *(void *)(v5 + 16) = v2;
  uint64_t v6 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunLinkActionCATPatternsExecutor
                                                 + *v4
                                                 + 48));
  v0[7] = v6;
  *uint64_t v6 = v0;
  v6[1] = LinkActionDialogTemplating.makeContinueInAppPattern(customResponse:);
  return v8( 0LL,  partial apply for closure #1 in LinkActionDialogTemplating.makeActionPerformedPattern_preRFv2(customResponse:useSonicStatus:),  v5);
}

uint64_t LinkActionDialogTemplating.makeContinueInAppPattern(customResponse:)(uint64_t a1)
{
  v2[8] = v1;
  swift_task_dealloc(v5);
  OUTLINED_FUNCTION_61();
  uint64_t v6 = v2[6];
  if (!v1) {
    v2[9] = a1;
  }
  swift_task_dealloc(v6);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v1;
  OUTLINED_FUNCTION_17_19(a1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_15_2(*(void *)(v1 + 72), *(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v1;
  OUTLINED_FUNCTION_17_19(a1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t LinkActionDialogTemplating.makeParameterValueDisambiguationPattern_preRFv2(customPrompt:items:)( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t LinkActionDialogTemplating.makeParameterValueDisambiguationPattern_preRFv2(customPrompt:items:)()
{
  if (v1[2])
  {
    uint64_t v2 = (void *)swift_task_alloc(dword_21CCF4);
    v1[6] = v2;
    *uint64_t v2 = v1;
    v2[1] = LinkActionDialogTemplating.makeParameterValueDisambiguationPattern_preRFv2(customPrompt:items:);
    return OUTLINED_FUNCTION_56_13(v1[5]);
  }

  else
  {
    uint64_t v4 = OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_16_20(v4);
    uint64_t v5 = v1[5];
    uint64_t v6 = OUTLINED_FUNCTION_10_16(v1[4]);
    v1[7] = v6;
    *(void *)(v6 + 16) = v5;
    uint64_t v7 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v0 + 72));
    v1[8] = v7;
    *uint64_t v7 = v1;
    v7[1] = LinkActionDialogTemplating.makeParameterValueDisambiguationPattern_preRFv2(customPrompt:items:);
    uint64_t v8 = OUTLINED_FUNCTION_101_0();
    return OUTLINED_FUNCTION_55_11(v8, v9, v10, v11, v12, v13, v14);
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_3_0(*(void *)(*(void *)v0 + 48LL));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  OUTLINED_FUNCTION_104();
  uint64_t v2 = v1[5];
  uint64_t v3 = OUTLINED_FUNCTION_10_16(v1[4]);
  v1[7] = v3;
  *(void *)(v3 + 16) = v2;
  uint64_t v4 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v0 + 72));
  v1[8] = (uint64_t)v4;
  void *v4 = v1;
  v4[1] = LinkActionDialogTemplating.makeParameterValueDisambiguationPattern_preRFv2(customPrompt:items:);
  uint64_t v5 = OUTLINED_FUNCTION_101_0();
  return OUTLINED_FUNCTION_55_11(v5, v6, v7, v8, v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_12_13();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

uint64_t LinkActionDialogTemplating.makeParameterValueDisambiguationPattern_preRFv2(customPrompt:items:)( uint64_t a1)
{
  return OUTLINED_FUNCTION_8_4(*(void *)(v1 + 80), *(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v1;
  OUTLINED_FUNCTION_17_19(a1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t closure #1 in LinkActionDialogTemplating.makeParameterValueConfirmationPattern_preRFv2(customPrompt:parameterValue:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined assign with copy of SpeakableString?(a2, a1);
  if (a4)
  {
    swift_bridgeObjectRetain(a4);
    SpeakableString.init(print:speak:)(a3, a4, 0LL, 0LL);
    uint64_t v11 = type metadata accessor for SpeakableString(0LL);
    uint64_t v12 = 0LL;
  }

  else
  {
    uint64_t v11 = type metadata accessor for SpeakableString(0LL);
    uint64_t v12 = 1LL;
  }

  __swift_storeEnumTagSinglePayload((uint64_t)v10, v12, 1LL, v11);
  uint64_t v13 = type metadata accessor for RunLinkActionParameterConfirmationParameters(0LL);
  return outlined assign with take of SpeakableString?((uint64_t)v10, a1 + *(int *)(v13 + 24));
}

uint64_t LinkActionDialogTemplating.extractDialogAndParamDetails(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Locale(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_getErrorValue(a2, v37, v36);
  uint64_t v10 = dispatch thunk of Error._code.getter(v36[1], v36[2]);
  if (v10 == 2005)
  {
    uint64_t v14 = 1LL;
LABEL_15:
    uint64_t v32 = type metadata accessor for SpeakableString(0LL);
    __swift_storeEnumTagSinglePayload(a1, 1LL, 1LL, v32);
    return v14;
  }

  if (v10 == 2014)
  {
    uint64_t v15 = (void *)_convertErrorToNSError(_:)(a2);
    id v16 = objc_msgSend(v15, "ln_staticDeferredLocalizedString");

    if (v16)
    {
      uint64_t v17 = v3 + 2;
      uint64_t v19 = v3[5];
      uint64_t v18 = v3[6];
      __swift_project_boxed_opaque_existential_1(v17, v19);
      uint64_t v20 = dispatch thunk of DeviceState.siriLocale.getter(v19, v18);
      Locale.identifier.getter(v20);
      uint64_t v22 = v21;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      NSString v23 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v22);
      id v24 = [v16 localizedStringForLocaleIdentifier:v23];

      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v25;

      goto LABEL_8;
    }

    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v27 = type metadata accessor for Logger(0LL);
    uint64_t v28 = __swift_project_value_buffer(v27, (uint64_t)static Logger.voiceCommands);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl( &dword_0,  v29,  v30,  "#LinkActionDialogTemplating could not create error dialog from .localizedStringResource error.",  v31,  2u);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    goto LABEL_14;
  }

  if (v10 != 2009)
  {
LABEL_14:
    uint64_t v14 = 0LL;
    goto LABEL_15;
  }

  swift_getErrorValue(a2, v35, v34);
  uint64_t v11 = Error.localizedDescription.getter(v34[1], v34[2]);
  uint64_t v13 = v12;
LABEL_8:
  swift_bridgeObjectRetain(v13);
  SpeakableString.init(print:speak:)(v11, v13, 0LL, 0LL);
  uint64_t v26 = type metadata accessor for SpeakableString(0LL);
  __swift_storeEnumTagSinglePayload(a1, 0LL, 1LL, v26);
  swift_bridgeObjectRelease(v13);
  return 0LL;
}

uint64_t LinkActionDialogTemplating.makeFailureHandlingIntentDialog(error:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v1;
  OUTLINED_FUNCTION_17_19(a1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_8_4(*(void *)(v1 + 56), *(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v1;
  OUTLINED_FUNCTION_17_19(a1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t LinkActionDialogTemplating.makeFailureHandlingIntentDialog(error:)()
{
  uint64_t v1 = v0[3];
  char v2 = LinkActionDialogTemplating.extractDialogAndParamDetails(from:)(v0[4], v0[2]);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunLinkActionCATsSimple
                                                  + **(void **)(v1 + 64)
                                                  + 80));
  v0[5] = (uint64_t)v3;
  *uint64_t v3 = v0;
  v3[1] = LinkActionDialogTemplating.makeFailureHandlingIntentDialog(error:);
  return OUTLINED_FUNCTION_78_2(v0[4], v2 & 1, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_10_0(v3);
  *(void *)(v2 + 48) = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    *(void *)(v2 + 56) = v0;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

uint64_t LinkActionDialogTemplating.makeGenericError()()
{
  *(void *)(v1 + 16) = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v1 + 24) = OUTLINED_FUNCTION_9_0(*(void *)(v2 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v6)(void);
  uint64_t v1 = v0[3];
  uint64_t v2 = *(void **)(v0[2] + 64LL);
  uint64_t v3 = OUTLINED_FUNCTION_61_1();
  __swift_storeEnumTagSinglePayload(v1, 1LL, 1LL, v3);
  uint64_t v4 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunLinkActionCATsSimple + *v2 + 80));
  v0[4] = v4;
  void *v4 = v0;
  v4[1] = LinkActionDialogTemplating.makeGenericError();
  return OUTLINED_FUNCTION_78_2(v0[3], 0LL, v6);
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(v0 + 24));
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t LinkActionDialogTemplating.makeGenericError()(uint64_t a1)
{
  *(void *)(v1 + 40) = v2;
  uint64_t v7 = swift_task_dealloc(v6);
  OUTLINED_FUNCTION_60_10(v7, &demangling cache variable for type metadata for SpeakableString?);
  if (v2)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_23_1(a1, *(uint64_t (**)(void))(v3 + 8));
  }

uint64_t LinkActionDialogTemplating.makeFailureHandlingIntentDialog_preRFv2(error:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t LinkActionDialogTemplating.makeFailureHandlingIntentDialog_preRFv2(error:)()
{
  uint64_t v1 = v0[4];
  char v2 = LinkActionDialogTemplating.extractDialogAndParamDetails(from:)(v0[5], v0[3]);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunLinkActionCATs
                                                  + **(void **)(v1 + 56)
                                                  + 40));
  v0[6] = v3;
  *uint64_t v3 = v0;
  v3[1] = LinkActionDialogTemplating.makeFailureHandlingIntentDialog_preRFv2(error:);
  return v5(v0[2], v0[5], v2 & 1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v2 = *(void *)(*(void *)v1 + 48LL);
  *(void *)(*(void *)v1 + 56LL) = v0;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t LinkActionDialogTemplating.makeFailureHandlingIntentDialog_preRFv2(error:)(uint64_t a1)
{
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v1;
  OUTLINED_FUNCTION_17_19(a1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t LinkActionDialogTemplating.makeNeedsDisambiguationTitle(customPrompt:items:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t LinkActionDialogTemplating.makeNeedsDisambiguationTitle(customPrompt:items:)()
{
  if (*(void *)(v0 + 24))
  {
    uint64_t v1 = *(void *)(v0 + 16);
    *(void *)(v0 + 48) = *(void *)(*(void *)(v0 + 32) + 64LL);
    if (v1)
    {
      uint64_t v2 = (void *)swift_task_alloc(dword_21CCF4);
      *(void *)(v0 + 56) = v2;
      *uint64_t v2 = v0;
      v2[1] = LinkActionDialogTemplating.makeNeedsDisambiguationTitle(customPrompt:items:);
      return LNDialog.asSpeakableString.getter(*(void *)(v0 + 40));
    }

    else
    {
      uint64_t v9 = OUTLINED_FUNCTION_61_1();
      OUTLINED_FUNCTION_16_20(v9);
      uint64_t v10 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunLinkActionCATsSimple
                                                      + **(void **)(v0 + 48)
                                                      + 96));
      *(void *)(v0 + 64) = v10;
      *uint64_t v10 = v0;
      v10[1] = LinkActionDialogTemplating.makeNeedsDisambiguationTitle(customPrompt:items:);
      uint64_t v11 = OUTLINED_FUNCTION_133_0(*(void *)(v0 + 40));
      return OUTLINED_FUNCTION_36_1(v11, v12, v13);
    }
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)static Logger.voiceCommands);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl( &dword_0,  v6,  v7,  "#LinkActionDialogTemplating makeNeedsDisambiguationTitle NO disambiguation items",  v8,  2u);
      OUTLINED_FUNCTION_1_0((uint64_t)v8);
    }

    swift_task_dealloc();
    return OUTLINED_FUNCTION_23_1(0LL, *(uint64_t (**)(void))(v0 + 8));
  }

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  uint64_t v3 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunLinkActionCATsSimple
                                                 + **(void **)(v1 + 48)
                                                 + 96));
  *(void *)(v1 + 64) = v3;
  *uint64_t v3 = v2;
  v3[1] = LinkActionDialogTemplating.makeNeedsDisambiguationTitle(customPrompt:items:);
  uint64_t v4 = OUTLINED_FUNCTION_133_0(*(void *)(v1 + 40));
  return OUTLINED_FUNCTION_36_1(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_12_13();
  outlined destroy of URL?(*(void *)(v2 + 40), &demangling cache variable for type metadata for SpeakableString?);
  if (v1)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_task_dealloc();
    return OUTLINED_FUNCTION_23_1(v0, *(uint64_t (**)(void))(v3 + 8));
  }

{
  uint64_t v0;
  swift_task_dealloc();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t LinkActionDialogTemplating.makeNeedsDisambiguationTitle_preRFv2(customPrompt:items:)( uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = OUTLINED_FUNCTION_94_0();
  v3[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[7] = v5;
  v3[8] = OUTLINED_FUNCTION_9_0(v5);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingSection?);
  void v3[9] = OUTLINED_FUNCTION_9_0(*(void *)(v6 - 8));
  uint64_t v7 = OUTLINED_FUNCTION_44_6();
  v3[10] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[11] = v8;
  v3[12] = OUTLINED_FUNCTION_9_0(v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[13] = OUTLINED_FUNCTION_9_0(*(void *)(v9 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t LinkActionDialogTemplating.makeNeedsDisambiguationTitle_preRFv2(customPrompt:items:)()
{
  if (v0[3])
  {
    uint64_t v1 = (void *)swift_task_alloc(dword_21CCF4);
    v0[14] = v1;
    *uint64_t v1 = v0;
    v1[1] = LinkActionDialogTemplating.makeNeedsDisambiguationTitle_preRFv2(customPrompt:items:);
    return OUTLINED_FUNCTION_14_24(v0[13]);
  }

  else
  {
    uint64_t v3 = OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_16_20(v3);
    uint64_t v4 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunLinkActionCATs
                                                   + **(void **)(v0[5] + 56LL)
                                                   + 48));
    uint64_t v5 = OUTLINED_FUNCTION_103_0(v4);
    return OUTLINED_FUNCTION_77_4(v5, v6, v7, v8);
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 112));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v1 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunLinkActionCATs
                                                 + **(void **)(*(void *)(v0 + 40) + 56LL)
                                                 + 48));
  uint64_t v2 = OUTLINED_FUNCTION_103_0(v1);
  return OUTLINED_FUNCTION_77_4(v2, v3, v4, v5);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_116_1(*(void *)(v0 + 120), v0);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t LinkActionDialogTemplating.makeNeedsDisambiguationTitle_preRFv2(customPrompt:items:)(uint64_t a1)
{
  uint64_t v2 = TemplatingResult.sections.getter(a1);
  OUTLINED_FUNCTION_139_0(v2);
  OUTLINED_FUNCTION_20();
  uint64_t v3 = OUTLINED_FUNCTION_108_1();
  uint64_t v4 = OUTLINED_FUNCTION_93_0(v3);
  if ((_DWORD)v4 == 1)
  {
    OUTLINED_FUNCTION_17_19(v4, &demangling cache variable for type metadata for TemplatingSection?);
    uint64_t v5 = 0LL;
    unint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v8 = v1[7];
    uint64_t v7 = v1[8];
    uint64_t v9 = v1[6];
    TemplatingSection.content.getter(v4);
    uint64_t v10 = OUTLINED_FUNCTION_97_1();
    uint64_t v11 = TemplatingText.text.getter(v10);
    unint64_t v6 = v12;
    uint64_t v13 = v9;
    uint64_t v5 = v11;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v13);
  }

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v14, (uint64_t)static Logger.voiceCommands);
  uint64_t v15 = swift_bridgeObjectRetain_n(v6, 2LL);
  id v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v19 = v1[12];
  uint64_t v20 = v1[13];
  uint64_t v21 = v1[10];
  uint64_t v22 = v1[11];
  if (v18)
  {
    uint64_t v31 = v1[13];
    NSString v23 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v29 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v32 = v29;
    uint64_t v30 = v21;
    *(_DWORD *)NSString v23 = 136315138;
    if (v6) {
      uint64_t v24 = v5;
    }
    else {
      uint64_t v24 = 0x2D6C696E2DLL;
    }
    if (v6) {
      unint64_t v25 = v6;
    }
    else {
      unint64_t v25 = 0xE500000000000000LL;
    }
    OUTLINED_FUNCTION_5_14();
    v1[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2, v1 + 3, v23 + 4);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_46();
    _os_log_impl( &dword_0,  v16,  v17,  "#LinkActionDialogTemplating makeNeedsDisambiguationTitle (pre-RF2.0) needsDisambiguationText=%s",  v23,  0xCu);
    swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v29);
    OUTLINED_FUNCTION_1_0((uint64_t)v23);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v19, v30);
    uint64_t v26 = v31;
  }

  else
  {

    OUTLINED_FUNCTION_46();
    OUTLINED_FUNCTION_35_3(v19, *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
    uint64_t v26 = v20;
  }

  outlined destroy of URL?(v26, &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_143_0();
  return v27();
}

{
  uint64_t v1;
  OUTLINED_FUNCTION_17_19(a1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t LinkActionDialogTemplating.makeConfirmAndCancelButton(confirmationActionName:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = OUTLINED_FUNCTION_126_1();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = OUTLINED_FUNCTION_9_0(v4);
  uint64_t v5 = (void *)swift_task_alloc(dword_217A6C);
  v2[7] = v5;
  *uint64_t v5 = v2;
  v5[1] = LinkActionDialogTemplating.makeConfirmAndCancelButton(confirmationActionName:);
  return OUTLINED_FUNCTION_76_4(0LL, 0xE000000000000000LL);
}

uint64_t LinkActionDialogTemplating.makeConfirmAndCancelButton(confirmationActionName:)()
{
  v0[8] = v3;
  v0[9] = v4;
  OUTLINED_FUNCTION_54_0(v5);
  if (v1)
  {
    swift_task_dealloc();
    return OUTLINED_FUNCTION_3_4(*(uint64_t (**)(void))(v2 + 8));
  }

  else
  {
    uint64_t v7 = (void *)swift_task_alloc(async function pointer to static LabelTemplates.cancel()[1]);
    v0[10] = v7;
    *uint64_t v7 = v2;
    v7[1] = LinkActionDialogTemplating.makeConfirmAndCancelButton(confirmationActionName:);
    return static LabelTemplates.cancel()();
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_77_1();
  OUTLINED_FUNCTION_50_5();
  *(void *)(v0 + 88) = v3;
  *(void *)(v0 + 96) = v4;
  OUTLINED_FUNCTION_54_0(v5);
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    return OUTLINED_FUNCTION_3_4(*(uint64_t (**)(void))(v2 + 8));
  }

  else
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

{
  uint64_t v0;
  void *v1;
  id v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  NSString v17;
  id v18;
  uint64_t v19;
  Swift::String v20;
  void *v21;
  id v22;
  void *v23;
  NSString v24;
  id v25;
  uint64_t v26;
  OUTLINED_FUNCTION_17_0();
  uint64_t v1 = *(void **)(v0 + 16);
  if (!v1)
  {
    uint64_t v8 = *(void *)(v0 + 88);
    uint64_t v7 = *(void *)(v0 + 96);
    uint64_t v10 = *(void *)(v0 + 64);
    uint64_t v9 = *(void *)(v0 + 72);
LABEL_16:
    OUTLINED_FUNCTION_47_3();
    return OUTLINED_FUNCTION_26_14(v10, v9, v8, v7, *(uint64_t (**)(void))(v0 + 8));
  }

  uint64_t v2 = v1;
  uint64_t v3 = (char *)[v2 type];
  if (!v3)
  {
    OUTLINED_FUNCTION_130_0();
    uint64_t v11 = (void *)swift_task_alloc(dword_217A6C);
    *(void *)(v0 + 136) = v11;
    *uint64_t v11 = v0;
    v11[1] = LinkActionDialogTemplating.makeConfirmAndCancelButton(confirmationActionName:);
    uint64_t v5 = OUTLINED_FUNCTION_102_0();
    return LinkActionDialogTemplating.makeConfirmationButtonLabel(confirmationVerb:)(v5, v6);
  }

  if (v3 == (_BYTE *)&dword_0 + 2)
  {
    uint64_t v14 = *(void *)(v0 + 40);
    uint64_t v13 = *(void *)(v0 + 48);
    OUTLINED_FUNCTION_122_0(*(void *)(v0 + 24));
    OUTLINED_FUNCTION_119_0();
    OUTLINED_FUNCTION_129_1();
    OUTLINED_FUNCTION_35_3(v13, *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
    uint64_t v15 = [v2 acceptLabel];
    uint64_t v9 = *(void *)(v0 + 72);
    if (v15)
    {
      id v16 = v15;
      OUTLINED_FUNCTION_20();
      os_log_type_t v17 = OUTLINED_FUNCTION_151_0();
      BOOL v18 = OUTLINED_FUNCTION_60_8(v16, "localizedStringForLocaleIdentifier:");

      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v9 = v19;
    }

    else
    {
      uint64_t v10 = *(void *)(v0 + 64);
    }

    uint64_t v22 = [v2 denyLabel];
    if (v22)
    {
      NSString v23 = v22;
      swift_bridgeObjectRelease();
      uint64_t v24 = OUTLINED_FUNCTION_151_0();
      OUTLINED_FUNCTION_1_2();
      unint64_t v25 = [v23 localizedStringForLocaleIdentifier:v24];

      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v7 = v26;
    }

    else
    {

      OUTLINED_FUNCTION_1_2();
      uint64_t v8 = *(void *)(v0 + 88);
      uint64_t v7 = *(void *)(v0 + 96);
    }

    goto LABEL_16;
  }

  if (v3 == (_BYTE *)&dword_0 + 1)
  {
    OUTLINED_FUNCTION_130_0();
    uint64_t v4 = (void *)swift_task_alloc(dword_217A6C);
    *(void *)(v0 + 104) = v4;
    void *v4 = v0;
    v4[1] = LinkActionDialogTemplating.makeConfirmAndCancelButton(confirmationActionName:);
    uint64_t v5 = 0x7472617473LL;
    unint64_t v6 = 0xE500000000000000LL;
    return LinkActionDialogTemplating.makeConfirmationButtonLabel(confirmationVerb:)(v5, v6);
  }

  uint64_t v20 = LNConfirmationActionName.toIntentVerb()();
  *(void *)(v0 + 168) = v20._object;
  uint64_t v21 = (void *)swift_task_alloc(dword_217A74);
  *(void *)(v0 + 176) = v21;
  void *v21 = v0;
  v21[1] = LinkActionDialogTemplating.makeConfirmAndCancelButton(confirmationActionName:);
  return LinkActionDialogTemplating.makeConfirmationButtonLabelForCategory(verb:)( v20._countAndFlagsBits,  (uint64_t)v20._object);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  OUTLINED_FUNCTION_83_0();
  OUTLINED_FUNCTION_47_3();
  uint64_t v0 = OUTLINED_FUNCTION_98();
  return OUTLINED_FUNCTION_26_14(v0, v1, v2, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  OUTLINED_FUNCTION_83_0();
  OUTLINED_FUNCTION_47_3();
  uint64_t v0 = OUTLINED_FUNCTION_98();
  return OUTLINED_FUNCTION_26_14(v0, v1, v2, v3, v4);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v2 = (void *)*v1;
  OUTLINED_FUNCTION_50_5();
  v2[23] = v3;
  v2[24] = v4;
  v2[25] = v0;
  OUTLINED_FUNCTION_54_0(v5);
  OUTLINED_FUNCTION_14();
  if (v0)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_20();
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v1 = *(void *)(v0 + 192);
  OUTLINED_FUNCTION_83_0();
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 192);
    uint64_t v3 = (uint64_t *)(v0 + 184);
    OUTLINED_FUNCTION_130_0();
  }

  else
  {
    uint64_t v2 = *(void *)(v0 + 72);
    uint64_t v3 = (uint64_t *)(v0 + 64);
  }

  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 96);
  unint64_t v6 = *v3;
  OUTLINED_FUNCTION_47_3();
  return OUTLINED_FUNCTION_26_14(v6, v2, v5, v4, *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_83_0();
  OUTLINED_FUNCTION_47_3();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_83_0();
  OUTLINED_FUNCTION_47_3();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_83_0();
  OUTLINED_FUNCTION_47_3();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t LinkActionDialogTemplating.makeConfirmAndCancelButton(confirmationActionName:)( uint64_t a1, uint64_t a2)
{
  v3[14] = v2;
  swift_task_dealloc();
  if (v2)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    v3[15] = a2;
    v3[16] = a1;
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v2;
  void *v3;
  void *v6;
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_10_0(v6);
  v3[18] = v2;
  swift_task_dealloc();
  if (v2)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    v3[19] = a2;
    v3[20] = a1;
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t LinkActionDialogTemplating.makeConfirmationButtonLabel(confirmationVerb:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = OUTLINED_FUNCTION_94_0();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = OUTLINED_FUNCTION_9_0(v5);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingSection?);
  v3[8] = OUTLINED_FUNCTION_9_0(*(void *)(v6 - 8));
  uint64_t v7 = OUTLINED_FUNCTION_44_6();
  void v3[9] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[10] = v8;
  v3[11] = OUTLINED_FUNCTION_9_0(v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[12] = OUTLINED_FUNCTION_20_10(v9);
  uint64_t v10 = OUTLINED_FUNCTION_11_0();
  uint64_t v11 = OUTLINED_FUNCTION_131_0(v10);
  v3[14] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v3[15] = v12;
  v3[16] = OUTLINED_FUNCTION_9_0(v12);
  uint64_t v13 = OUTLINED_FUNCTION_61_1();
  v3[17] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v3[18] = v14;
  v3[19] = OUTLINED_FUNCTION_9_0(v14);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t LinkActionDialogTemplating.makeConfirmationButtonLabel(confirmationVerb:)()
{
  uint64_t v1 = v0[18];
  uint64_t v3 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v4 = v0[14];
  uint64_t v6 = v0[2];
  uint64_t v5 = v0[3];
  OUTLINED_FUNCTION_9_4();
  OUTLINED_FUNCTION_24_15(v6, v5);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))( v2,  enum case for RFFeatureFlags.ResponseFramework._SMART(_:),  v4);
  LOBYTE(v5) = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_136(v0[19], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
  OUTLINED_FUNCTION_137();
  if ((v5 & 1) != 0)
  {
    uint64_t v8 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunLinkActionCATsSimple + v7 + 56));
    v0[20] = v8;
    *uint64_t v8 = v0;
    v8[1] = LinkActionDialogTemplating.makeConfirmationButtonLabel(confirmationVerb:);
    return v11(v0[13]);
  }

  else
  {
    uint64_t v10 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunLinkActionCATs + v7 + 24));
    v0[23] = v10;
    *uint64_t v10 = v0;
    v10[1] = LinkActionDialogTemplating.makeConfirmationButtonLabel(confirmationVerb:);
    return ((uint64_t (*)(void, void))v11)(v0[11], v0[12]);
  }

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_10_0(v3);
  v2[21] = v1;
  swift_task_dealloc(v4);
  uint64_t v5 = v2[13];
  if (!v1) {
    v2[22] = v0;
  }
  outlined destroy of URL?(v5, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  OUTLINED_FUNCTION_28_1();
  dispatch thunk of LabelExecutionResult.subscript.getter();
  swift_release();
  uint64_t v2 = *(void *)(v0 + 152);
  OUTLINED_FUNCTION_124_0();
  v3(v2);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  swift_task_dealloc(v1);
  OUTLINED_FUNCTION_143_0();
  return OUTLINED_FUNCTION_11_17(v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  OUTLINED_FUNCTION_50_0();
  uint64_t v3 = *(void *)(v2 + 184);
  void *v4 = *v1;
  *(void *)(v2 + 19__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v0;
  uint64_t v5 = swift_task_dealloc(v3);
  OUTLINED_FUNCTION_60_10(v5, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  OUTLINED_FUNCTION_28_1();
  uint64_t v3 = TemplatingResult.sections.getter(v2);
  OUTLINED_FUNCTION_139_0(v3);
  OUTLINED_FUNCTION_20();
  uint64_t v4 = OUTLINED_FUNCTION_108_1();
  uint64_t v5 = OUTLINED_FUNCTION_93_0(v4);
  if ((_DWORD)v5 == 1)
  {
    OUTLINED_FUNCTION_17_19(v5, &demangling cache variable for type metadata for TemplatingSection?);
    uint64_t v6 = 0LL;
    uint64_t v7 = 0xE000000000000000LL;
  }

  else
  {
    uint64_t v9 = *(void *)(v0 + 48);
    uint64_t v8 = *(void *)(v0 + 56);
    TemplatingSection.content.getter(v5);
    uint64_t v10 = OUTLINED_FUNCTION_97_1();
    uint64_t v6 = TemplatingText.text.getter(v10);
    uint64_t v7 = v11;
    OUTLINED_FUNCTION_57_4(v8, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
  }

  (*(void (**)(void, void))(*(void *)(v0 + 80) + 8LL))(*(void *)(v0 + 88), *(void *)(v0 + 72));
  uint64_t v12 = *(void *)(v0 + 152);
  OUTLINED_FUNCTION_124_0();
  v13(v12);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  swift_task_dealloc(v1);
  return OUTLINED_FUNCTION_11_17(v6, v7, *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_62_9();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_62_9();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t LinkActionDialogTemplating.makeConfirmationButtonLabelForCategory(verb:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = OUTLINED_FUNCTION_94_0();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = OUTLINED_FUNCTION_9_0(v5);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingSection?);
  v3[8] = OUTLINED_FUNCTION_9_0(*(void *)(v6 - 8));
  uint64_t v7 = OUTLINED_FUNCTION_44_6();
  void v3[9] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[10] = v8;
  v3[11] = OUTLINED_FUNCTION_9_0(v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[12] = OUTLINED_FUNCTION_20_10(v9);
  uint64_t v10 = OUTLINED_FUNCTION_11_0();
  uint64_t v11 = OUTLINED_FUNCTION_131_0(v10);
  v3[14] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v3[15] = v12;
  v3[16] = OUTLINED_FUNCTION_9_0(v12);
  uint64_t v13 = OUTLINED_FUNCTION_61_1();
  v3[17] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v3[18] = v14;
  v3[19] = OUTLINED_FUNCTION_9_0(v14);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t LinkActionDialogTemplating.makeConfirmationButtonLabelForCategory(verb:)()
{
  uint64_t v1 = v0[18];
  uint64_t v3 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v4 = v0[14];
  uint64_t v6 = v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v7 = v0[2];
  uint64_t v9 = v5[5];
  uint64_t v8 = v5[6];
  __swift_project_boxed_opaque_existential_1(v5 + 2, v9);
  uint64_t v10 = DeviceState.asSiriKitDeviceState()(v9, v8);
  v0[20] = v10;
  swift_bridgeObjectRetain(v6);
  OUTLINED_FUNCTION_24_15(v7, v6);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))( v2,  enum case for RFFeatureFlags.ResponseFramework._SMART(_:),  v4);
  char v11 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_17_4(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
  uint64_t v13 = v0[19];
  if ((v11 & 1) != 0)
  {
    uint64_t v14 = v0[13];
    OUTLINED_FUNCTION_145_0(v13, v12);
    OUTLINED_FUNCTION_149_0();
    OUTLINED_FUNCTION_82_2();
    uint64_t v15 = (void *)swift_task_alloc(v14);
    v0[21] = v15;
    *uint64_t v15 = v0;
    v15[1] = LinkActionDialogTemplating.makeConfirmationButtonLabelForCategory(verb:);
    return OUTLINED_FUNCTION_11_17(v10, v0[13], v19);
  }

  else
  {
    uint64_t v17 = v0[12];
    OUTLINED_FUNCTION_145_0(v13, v12);
    OUTLINED_FUNCTION_149_0();
    OUTLINED_FUNCTION_82_2();
    BOOL v18 = (void *)swift_task_alloc(v17);
    v0[24] = v18;
    *BOOL v18 = v0;
    v18[1] = LinkActionDialogTemplating.makeConfirmationButtonLabelForCategory(verb:);
    return ((uint64_t (*)(void, uint64_t, void))v19)(v0[11], v10, v0[12]);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_17_0();
  *(_BYTE *)(v0 + 208) = 2;
  uint64_t v1 = dispatch thunk of LabelExecutionResult.subscript.getter(v0 + 208);
  uint64_t v3 = v2;
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_66_7();
  swift_task_dealloc();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  OUTLINED_FUNCTION_50_0();
  uint64_t v3 = *(void *)(v2 + 96);
  void *v4 = *v1;
  *(void *)(v2 + 200) = v0;
  swift_task_dealloc();
  outlined destroy of URL?(v3, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_28_1();
  OUTLINED_FUNCTION_52_10();
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_28_1();
  OUTLINED_FUNCTION_52_10();
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t LinkActionDialogTemplating.makeConfirmationButtonLabelForCategory(verb:)(uint64_t a1)
{
  v2[22] = v1;
  swift_task_dealloc();
  uint64_t v5 = v2[13];
  if (!v1) {
    v2[23] = a1;
  }
  outlined destroy of URL?(v5, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v2 = TemplatingResult.sections.getter(a1);
  OUTLINED_FUNCTION_138_0(v2);
  OUTLINED_FUNCTION_20();
  uint64_t v3 = OUTLINED_FUNCTION_108_1();
  uint64_t v4 = OUTLINED_FUNCTION_104_1(v3);
  uint64_t v5 = v1[19];
  uint64_t v6 = v1[18];
  uint64_t v7 = v1[10];
  uint64_t v8 = v1[11];
  if ((_DWORD)v4 == 1)
  {
    swift_release();
    OUTLINED_FUNCTION_35_3(v8, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
    uint64_t v9 = OUTLINED_FUNCTION_57_4(v5, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    OUTLINED_FUNCTION_17_19(v9, &demangling cache variable for type metadata for TemplatingSection?);
  }

  else
  {
    id v16 = v1[19];
    uint64_t v10 = v1[7];
    uint64_t v14 = v1[6];
    uint64_t v15 = v1[5];
    TemplatingSection.content.getter(v4);
    char v11 = OUTLINED_FUNCTION_96_0();
    TemplatingText.text.getter(v11);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v10, v15);
    OUTLINED_FUNCTION_35_3(v8, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
    OUTLINED_FUNCTION_57_4(v16, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  }

  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_143_0();
  return v12();
}

uint64_t LinkActionDialogTemplating.makeContinueButton()()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_217A6C);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = LinkActionDialogTemplating.makeContinueButton();
  uint64_t v2 = OUTLINED_FUNCTION_102_0();
  return OUTLINED_FUNCTION_76_4(v2, v3);
}

uint64_t LinkActionDialogTemplating.makeContinueButton()(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = OUTLINED_FUNCTION_3_0(*(void *)(v6 + 16));
  if (!v2)
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2;
  }

  return OUTLINED_FUNCTION_36_1(v7, v8, *(uint64_t (**)(void))(v3 + 8));
}

uint64_t LinkActionDialogTemplating.actionPerformedDialog(customPrompt:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v1;
  OUTLINED_FUNCTION_17_19(a1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_8_4(*(void *)(v1 + 64), *(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v1;
  OUTLINED_FUNCTION_17_19(a1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t LinkActionDialogTemplating.actionPerformedDialog(customPrompt:)()
{
  if (v0[2])
  {
    uint64_t v1 = (void *)swift_task_alloc(dword_21CCF4);
    v0[5] = v1;
    uint64_t v2 = OUTLINED_FUNCTION_109_0(v1);
    return OUTLINED_FUNCTION_14_24(v2);
  }

  else
  {
    uint64_t v4 = v0[4];
    uint64_t v5 = OUTLINED_FUNCTION_61_1();
    __swift_storeEnumTagSinglePayload(v4, 1LL, 1LL, v5);
    OUTLINED_FUNCTION_86_1();
    uint64_t v7 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunLinkActionCATsSimple + v6 + 32));
    v0[6] = v7;
    uint64_t v8 = OUTLINED_FUNCTION_31_13(v7, (uint64_t)LinkActionDialogTemplating.actionPerformedDialog(customPrompt:));
    return OUTLINED_FUNCTION_8_4(v8, v9);
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_3_0(*(void *)(*(void *)v0 + 40LL));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  OUTLINED_FUNCTION_86_1();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunLinkActionCATsSimple + v1 + 32));
  *(void *)(v0 + 48) = v2;
  uint64_t v3 = OUTLINED_FUNCTION_31_13(v2, (uint64_t)LinkActionDialogTemplating.actionPerformedDialog(customPrompt:));
  return OUTLINED_FUNCTION_8_4(v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_4_15();
  if (!v1) {
    *(void *)(v2 + 64) = v0;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

uint64_t LinkActionDialogTemplating.actionPerformedDialog_preRFv2(customPrompt:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = OUTLINED_FUNCTION_94_0();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = OUTLINED_FUNCTION_9_0(v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingSection?);
  v2[7] = OUTLINED_FUNCTION_9_0(*(void *)(v5 - 8));
  uint64_t v6 = OUTLINED_FUNCTION_44_6();
  v2[8] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[9] = v7;
  v2[10] = OUTLINED_FUNCTION_9_0(v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[11] = OUTLINED_FUNCTION_9_0(*(void *)(v8 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v1;
  OUTLINED_FUNCTION_17_19(a1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t LinkActionDialogTemplating.actionPerformedDialog_preRFv2(customPrompt:)()
{
  if (*(void *)(v0 + 16))
  {
    uint64_t v1 = swift_task_alloc(dword_21CCF4);
    uint64_t v2 = (void *)OUTLINED_FUNCTION_110_1(v1);
    *uint64_t v2 = v0;
    v2[1] = LinkActionDialogTemplating.actionPerformedDialog_preRFv2(customPrompt:);
    return OUTLINED_FUNCTION_14_24(*(void *)(v0 + 88));
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 88);
    uint64_t v5 = OUTLINED_FUNCTION_61_1();
    __swift_storeEnumTagSinglePayload(v4, 1LL, 1LL, v5);
    OUTLINED_FUNCTION_87_2();
    uint64_t v7 = OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunLinkActionCATs + v6 + 16));
    uint64_t v8 = (void *)OUTLINED_FUNCTION_127_0(v7);
    uint64_t v9 = OUTLINED_FUNCTION_47_12(v8);
    return OUTLINED_FUNCTION_17_18(v9, v10, v11);
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_3_0(*(void *)(*(void *)v0 + 96LL));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  OUTLINED_FUNCTION_87_2();
  uint64_t v1 = OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunLinkActionCATs + v0 + 16));
  uint64_t v2 = (void *)OUTLINED_FUNCTION_127_0(v1);
  uint64_t v3 = OUTLINED_FUNCTION_47_12(v2);
  return OUTLINED_FUNCTION_17_18(v3, v4, v5);
}

{
  OUTLINED_FUNCTION_57_10();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  OUTLINED_FUNCTION_28_1();
  uint64_t v2 = TemplatingResult.sections.getter(v1);
  OUTLINED_FUNCTION_138_0(v2);
  OUTLINED_FUNCTION_20();
  uint64_t v3 = OUTLINED_FUNCTION_108_1();
  uint64_t v4 = OUTLINED_FUNCTION_104_1(v3);
  uint64_t v5 = v0[9];
  if ((_DWORD)v4 == 1)
  {
    uint64_t v6 = OUTLINED_FUNCTION_17_4(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    uint64_t v7 = OUTLINED_FUNCTION_60_10(v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_17_19(v7, &demangling cache variable for type metadata for TemplatingSection?);
  }

  else
  {
    uint64_t v9 = v0[5];
    uint64_t v8 = v0[6];
    uint64_t v10 = v0[4];
    TemplatingSection.content.getter(v4);
    char v11 = OUTLINED_FUNCTION_96_0();
    TemplatingText.text.getter(v11);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    uint64_t v12 = OUTLINED_FUNCTION_17_4(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    OUTLINED_FUNCTION_60_10(v12, &demangling cache variable for type metadata for SpeakableString?);
  }

  swift_task_dealloc(v0[11]);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_143_0();
  return OUTLINED_FUNCTION_11_17(v13, v14, v15);
}

uint64_t LinkActionDialogTemplating.actionConfirmationHeader(customDialog:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t LinkActionDialogTemplating.actionConfirmationHeader(customDialog:)()
{
  if (v0[2])
  {
    uint64_t v1 = (void *)swift_task_alloc(dword_21CCF4);
    v0[5] = v1;
    uint64_t v2 = OUTLINED_FUNCTION_109_0(v1);
    return OUTLINED_FUNCTION_14_24(v2);
  }

  else
  {
    uint64_t v4 = v0[4];
    uint64_t v5 = OUTLINED_FUNCTION_61_1();
    __swift_storeEnumTagSinglePayload(v4, 1LL, 1LL, v5);
    OUTLINED_FUNCTION_86_1();
    uint64_t v7 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunLinkActionCATsSimple + v6 + 16));
    v0[6] = v7;
    uint64_t v8 = OUTLINED_FUNCTION_31_13(v7, (uint64_t)LinkActionDialogTemplating.actionConfirmationHeader(customDialog:));
    return OUTLINED_FUNCTION_8_4(v8, v9);
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_3_0(*(void *)(*(void *)v0 + 40LL));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  OUTLINED_FUNCTION_86_1();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunLinkActionCATsSimple + v1 + 16));
  *(void *)(v0 + 48) = v2;
  uint64_t v3 = OUTLINED_FUNCTION_31_13(v2, (uint64_t)LinkActionDialogTemplating.actionConfirmationHeader(customDialog:));
  return OUTLINED_FUNCTION_8_4(v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_4_15();
  if (!v1) {
    *(void *)(v2 + 64) = v0;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

uint64_t LinkActionDialogTemplating.deinit()
{
  return v0;
}

uint64_t LinkActionDialogTemplating.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 128LL, 7LL);
}

void *specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)( __int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  a7[14] = a8;
  a7[15] = a9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a7 + 11);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32LL))(boxed_opaque_existential_1, a6, a8);
  outlined init with take of AceServiceInvokerAsync(a1, (uint64_t)(a7 + 2));
  a7[7] = a2;
  a7[8] = a3;
  a7[9] = a4;
  a7[10] = a5;
  return a7;
}

uint64_t partial apply for closure #1 in LinkActionDialogTemplating.makeParameterValueConfirmationPattern_preRFv2(customPrompt:parameterValue:)( uint64_t a1)
{
  return closure #1 in LinkActionDialogTemplating.makeParameterValueConfirmationPattern_preRFv2(customPrompt:parameterValue:)( a1,  v1[2],  v1[3],  v1[4]);
}

uint64_t partial apply for closure #2 in LinkActionDialogTemplating.makeActionPerformedPattern_preRFv2(customResponse:useSonicStatus:)( uint64_t a1)
{
  return outlined assign with copy of SpeakableString?(*(void *)(v1 + 16), a1);
}

uint64_t type metadata accessor for LinkActionDialogTemplating()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin26LinkActionDialogTemplating);
}

uint64_t outlined assign with copy of SpeakableString?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of SpeakableString?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_10_16@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(32LL);
}

uint64_t OUTLINED_FUNCTION_11_17(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t OUTLINED_FUNCTION_14_24(uint64_t a1)
{
  return LNDialog.asSpeakableString.getter(a1);
}

uint64_t OUTLINED_FUNCTION_16_20(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 1LL, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_17_19(uint64_t a1, uint64_t *a2)
{
  return outlined destroy of URL?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_23_17( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

uint64_t OUTLINED_FUNCTION_24_15(uint64_t a1, uint64_t a2)
{
  return SpeakableString.init(print:speak:)(a1, a2, 0LL, 0LL);
}

id OUTLINED_FUNCTION_25_20()
{
  return [v0 *(SEL *)(v1 + 3688)];
}

uint64_t OUTLINED_FUNCTION_26_14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t OUTLINED_FUNCTION_31_13@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 32);
}

uint64_t OUTLINED_FUNCTION_35_17(uint64_t a1)
{
  return LNDialog.asSpeakableString.getter(a1);
}

uint64_t OUTLINED_FUNCTION_37_14(uint64_t a1)
{
  return LNDialog.asSpeakableString.getter(a1);
}

void *OUTLINED_FUNCTION_39_14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)( v14,  v13,  v12,  v11,  v10,  v16,  v9,  v15,  a9);
}

uint64_t OUTLINED_FUNCTION_41_13(uint64_t a1)
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, a1);
}

uint64_t OUTLINED_FUNCTION_45_9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t OUTLINED_FUNCTION_46_13( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

uint64_t OUTLINED_FUNCTION_47_12(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 80);
}

uint64_t OUTLINED_FUNCTION_48_10@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, uint64_t a3)
{
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))( (char *)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
}

uint64_t OUTLINED_FUNCTION_51_14()
{
  *(void *)(v1 + 80) = v0;
  __swift_project_boxed_opaque_existential_1( (void *)(*(void *)(v1 + 32) + 88LL),  *(void *)(*(void *)(v1 + 32) + 112LL));
  return swift_task_alloc(48LL);
}

uint64_t OUTLINED_FUNCTION_52_10()
{
  return swift_release(*(void *)(v0 + 160));
}

uint64_t OUTLINED_FUNCTION_55_11( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  return a7();
}

uint64_t OUTLINED_FUNCTION_56_13(uint64_t a1)
{
  return LNDialog.asSpeakableString.getter(a1);
}

uint64_t OUTLINED_FUNCTION_57_10()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 104);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v0;
  return swift_task_dealloc(v5);
}

uint64_t OUTLINED_FUNCTION_60_10(uint64_t a1, uint64_t *a2)
{
  return outlined destroy of URL?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_62_9()
{
  return (*(uint64_t (**)(void, void))(v0[18] + 8LL))(v0[19], v0[17]);
}

unint64_t OUTLINED_FUNCTION_64_6()
{
  return type metadata accessor for LNSystemProtocol();
}

uint64_t OUTLINED_FUNCTION_65_6(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 16);
}

uint64_t OUTLINED_FUNCTION_66_7()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_67_5()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return dispatch thunk of DeviceState.siriLocale.getter(v2, v3);
}

  ;
}

uint64_t OUTLINED_FUNCTION_70_6@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 64);
}

uint64_t OUTLINED_FUNCTION_73_4(uint64_t a1)
{
  return specialized Sequence<>.contains(_:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_74_5(uint64_t a1)
{
  return specialized Sequence<>.contains(_:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_75_5(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 1LL, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_76_4(uint64_t a1, uint64_t a2)
{
  return LinkActionDialogTemplating.makeConfirmationButtonLabel(confirmationVerb:)(a1, a2);
}

uint64_t OUTLINED_FUNCTION_77_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_78_2(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t OUTLINED_FUNCTION_81_3()
{
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_82_2()
{
  return swift_retain(v0);
}

void OUTLINED_FUNCTION_83_0()
{
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_89_2(uint64_t a1)
{
  return outlined destroy of URL?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_93_0(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_94_0()
{
  return type metadata accessor for TemplatingText(0LL);
}

uint64_t OUTLINED_FUNCTION_96_0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_97_1()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v0 - 8) + 8LL))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_98()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_99()
{
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_100_1()
{
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_101_0()
{
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_102_0()
{
  return 0x65756E69746E6F63LL;
}

uint64_t OUTLINED_FUNCTION_103_0(void *a1)
{
  *(void *)(v2 + 120) = a1;
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 96);
}

uint64_t OUTLINED_FUNCTION_104_1(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, a1);
}

  ;
}

uint64_t OUTLINED_FUNCTION_108_1()
{
  return type metadata accessor for TemplatingSection(0LL);
}

uint64_t OUTLINED_FUNCTION_109_0(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 32);
}

uint64_t OUTLINED_FUNCTION_110_1(uint64_t result)
{
  *(void *)(v1 + 96) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_116_1@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *uint64_t v2 = *v4;
  *(void *)(a2 + 128) = v3;
  return swift_task_dealloc(a1);
}

uint64_t OUTLINED_FUNCTION_117_1@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 48);
}

void OUTLINED_FUNCTION_118_1()
{
}

uint64_t OUTLINED_FUNCTION_119_0()
{
  return dispatch thunk of DeviceState.siriLocale.getter(v0, v1);
}

void OUTLINED_FUNCTION_120_1()
{
}

void OUTLINED_FUNCTION_121_0()
{
}

void *OUTLINED_FUNCTION_122_0@<X0>(uint64_t a1@<X8>)
{
  return __swift_project_boxed_opaque_existential_1((void *)(a1 + 16), *(void *)(a1 + 40));
}

id OUTLINED_FUNCTION_123_1(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

  ;
}

uint64_t OUTLINED_FUNCTION_125_0(uint64_t a1, uint64_t a2)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1LL, v2);
}

uint64_t OUTLINED_FUNCTION_126_1()
{
  return type metadata accessor for Locale(0LL);
}

uint64_t OUTLINED_FUNCTION_127_0(uint64_t result)
{
  *(void *)(v1 + 104) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_129_1()
{
  return Locale.identifier.getter();
}

uint64_t OUTLINED_FUNCTION_130_0()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 72));
}

uint64_t OUTLINED_FUNCTION_131_0(uint64_t a1)
{
  *(void *)(v1 + 104) = a1;
  return type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
}

uint64_t OUTLINED_FUNCTION_133_0@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

  ;
}

uint64_t OUTLINED_FUNCTION_136@<X0>( uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(v2, a1, v3);
}

uint64_t OUTLINED_FUNCTION_137()
{
  return __swift_storeEnumTagSinglePayload(v0, 0LL, 1LL, v1);
}

uint64_t OUTLINED_FUNCTION_138_0(uint64_t a1)
{
  return specialized Collection.first.getter(a1, v1);
}

uint64_t OUTLINED_FUNCTION_139_0(uint64_t a1)
{
  return specialized Collection.first.getter(a1, v1);
}

uint64_t OUTLINED_FUNCTION_140_0()
{
  return swift_bridgeObjectRelease(v0);
}

void OUTLINED_FUNCTION_141_0()
{
}

NSString OUTLINED_FUNCTION_142_0()
{
  return String._bridgeToObjectiveC()();
}

  ;
}

uint64_t OUTLINED_FUNCTION_145_0@<X0>( uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(v2, a1, v3);
}

uint64_t OUTLINED_FUNCTION_147()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_149_0()
{
  return __swift_storeEnumTagSinglePayload(v0, 0LL, 1LL, v1);
}

NSString OUTLINED_FUNCTION_151_0()
{
  return String._bridgeToObjectiveC()();
}

uint64_t CustomIntentExecutionFlow.__allocating_init(runner:intent:voiceCommandName:deviceIdiom:deviceState:aceServiceInvoker:appPolicyHandler:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, void *a7, uint64_t a8, void *a9)
{
  char v17 = a6 & 1;
  uint64_t v18 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  CustomIntentExecutionFlow.init(runner:intent:voiceCommandName:deviceIdiom:deviceState:aceServiceInvoker:appPolicyHandler:)( a1,  a2,  a3,  a4,  a5,  v17,  a7,  a8,  a9);
  return v18;
}

uint64_t CustomIntentExecutionFlow.exitValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = type metadata accessor for CustomIntentExecutionFlow.State(0LL);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_46_11();
  uint64_t v6 = v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state;
  OUTLINED_FUNCTION_30_12(v6, (uint64_t)v17, 0LL);
  outlined init with copy of CustomIntentExecutionFlow.State(v6, v2);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v2, v4);
  switch(EnumCaseMultiPayload)
  {
    case 7:
      goto LABEL_7;
    case 3:
      char v11 = *(_BYTE *)(v2 + 8);
      *(void *)a1 = *(void *)v2;
      *(_BYTE *)(a1 + 8) = v11;
LABEL_7:
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
      return OUTLINED_FUNCTION_20_22(v12);
    case 2:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
      uint64_t v8 = OUTLINED_FUNCTION_129();
      return v9(v8);
    default:
      unint64_t v13 = lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors();
      uint64_t v14 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for RunVoiceShortcutFlowErrors, v13);
      *uint64_t v15 = 0;
      *(void *)a1 = v14;
      *(_BYTE *)(a1 + 8) = 0;
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
      OUTLINED_FUNCTION_20_22(v16);
      return outlined destroy of CustomIntentExecutionFlow.State(v2);
  }

void *CustomIntentExecutionFlow.init(runner:intent:voiceCommandName:deviceIdiom:deviceState:aceServiceInvoker:appPolicyHandler:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, void *a7, uint64_t a8, void *a9)
{
  char v11 = v9;
  uint64_t v19 = type metadata accessor for UUID(0LL);
  uint64_t v48 = *(void *)(v19 - 8);
  uint64_t v49 = v19;
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_39_15();
  uint64_t v20 = (char *)v11 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_input;
  uint64_t v21 = type metadata accessor for Input(0LL);
  uint64_t v22 = (uint64_t)v20;
  NSString v23 = (void *)a1;
  __swift_storeEnumTagSinglePayload(v22, 1LL, 1LL, v21);
  v11[13] = a3;
  v11[14] = a4;
  outlined init with copy of AppShortcutInvoking(a1, (uint64_t)(v11 + 15));
  OUTLINED_FUNCTION_64_7(v24, (uint64_t)(v11 + 3));
  uint64_t v51 = (void *)a8;
  outlined init with copy of AppShortcutInvoking(a8, (uint64_t)(v11 + 8));
  OUTLINED_FUNCTION_64_7(v25, (uint64_t)v53);
  if ((a6 & 1) != 0)
  {
    __swift_project_boxed_opaque_existential_1(v53, v53[3]);
    DeviceState.currentDevice.getter();
    a5 = v26;
  }

  uint64_t v27 = __swift_destroy_boxed_opaque_existential_1Tm(v53);
  v11[2] = a5;
  *((_BYTE *)v11 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_appBlockedByScreentime) = 0;
  OUTLINED_FUNCTION_64_7( v27,  (uint64_t)v11 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_appPolicyHandler);
  if (a2)
  {
    id v28 = a2;
    id v29 = [v28 _metadata];
    id v30 = v29;
    if (!v29)
    {
      id v31 = [objc_allocWithZone(_INPBIntentMetadata) init];
      if (!v31)
      {
        id v30 = 0LL;
        goto LABEL_8;
      }

      id v30 = v31;
    }

    uint64_t v32 = UUID.init()(v29);
    uint64_t v33 = UUID.uuidString.getter(v32);
    uint64_t v35 = v34;
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v10, v49);
    outlined bridged method (mbnn) of @objc _INPBIntentMetadata.intentId.setter(v33, v35, v30);

LABEL_8:
    objc_msgSend(v28, "_setMetadata:", v30, v48, v49);

    uint64_t v36 = (char *)v11 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state;
    *(void *)((char *)v11 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state) = a2;
    goto LABEL_10;
  }

  uint64_t v36 = (char *)v11 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state;
  *(void *)((char *)v11 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state) = 0LL;
LABEL_10:
  uint64_t v37 = OUTLINED_FUNCTION_41_14();
  swift_storeEnumTagMultiPayload(v36, v37, 0LL);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v38 = OUTLINED_FUNCTION_48();
  id v39 = (os_log_s *)__swift_project_value_buffer(v38, (uint64_t)static Logger.voiceCommands);
  id v40 = a2;
  Logger.logObject.getter(v40);
  os_log_type_t v41 = OUTLINED_FUNCTION_58();
  if (os_log_type_enabled(v39, v41))
  {
    uint64_t v42 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v43 = OUTLINED_FUNCTION_38(32LL);
    v53[0] = v43;
    *(_DWORD *)uint64_t v42 = 136315138;
    if (a2
      && (uint64_t v44 = outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter( v40,  (SEL *)&selRef_identifier),  v45))
    {
      unint64_t v46 = v45;
    }

    else
    {
      swift_bridgeObjectRelease(0LL);
      unint64_t v46 = 0xE500000000000000LL;
      uint64_t v44 = 0x7974706D65LL;
    }

    uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v42 + 4);

    swift_bridgeObjectRelease(v46);
    _os_log_impl(&dword_0, v39, v41, "intent id: %s", v42, 0xCu);
    swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v43);
    OUTLINED_FUNCTION_1_0((uint64_t)v42);
  }

  else
  {
  }

  __swift_destroy_boxed_opaque_existential_1Tm(a9);
  __swift_destroy_boxed_opaque_existential_1Tm(v51);
  __swift_destroy_boxed_opaque_existential_1Tm(a7);
  __swift_destroy_boxed_opaque_existential_1Tm(v23);
  return v11;
}

uint64_t type metadata accessor for CustomIntentExecutionFlow.State(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for CustomIntentExecutionFlow.State,  (uint64_t)&nominal type descriptor for CustomIntentExecutionFlow.State);
}

uint64_t outlined init with copy of CustomIntentExecutionFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CustomIntentExecutionFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CustomIntentExecutionFlow.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CustomIntentExecutionFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t CustomIntentExecutionFlow.on(input:)(uint64_t a1)
{
  uint64_t v75 = OUTLINED_FUNCTION_41_14();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_61_6();
  OUTLINED_FUNCTION_43_11();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_43_11();
  __chkstk_darwin(v6);
  uint64_t v74 = (os_log_s *)((char *)&v68 - v7);
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
  uint64_t v71 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  OUTLINED_FUNCTION_61_6();
  OUTLINED_FUNCTION_43_11();
  __chkstk_darwin(v8);
  uint64_t v70 = (os_log_s *)((char *)&v68 - v9);
  *(void *)&__int128 v77 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v76 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  char v11 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Parse(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_46_11();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  OUTLINED_FUNCTION_15();
  uint64_t v15 = __chkstk_darwin(v14);
  char v17 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v68 - v18;
  uint64_t v20 = type metadata accessor for Input(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16LL))(v19, a1, v20);
  __swift_storeEnumTagSinglePayload((uint64_t)v19, 0LL, 1LL, v20);
  outlined init with take of Input?((uint64_t)v19, (uint64_t)v17, &demangling cache variable for type metadata for Input?);
  uint64_t v21 = v1;
  uint64_t v22 = v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_input;
  OUTLINED_FUNCTION_15_6(v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_input, (uint64_t)&v84);
  outlined assign with take of Input?((uint64_t)v17, v22);
  uint64_t v23 = swift_endAccess(&v84);
  Input.parse.getter(v23);
  int v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 88))(v2, v12);
  if (v24 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    OUTLINED_FUNCTION_36_13();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    uint64_t v25 = (void *)Parse.ServerConversion.siriKitIntent.getter();
    uint64_t v26 = (char *)[v25 _type];

    if (v26 == (_BYTE *)&dword_0 + 2)
    {
      uint64_t v27 = (void *)Parse.ServerConversion.siriKitIntent.getter();
      CustomIntentExecutionFlow.processCustomIntentConversionResult(conversionResult:)(v27, 0);

      OUTLINED_FUNCTION_34_0();
      type metadata accessor for NLIntent(0LL);
      uint64_t v28 = OUTLINED_FUNCTION_47_13();
      v29(v28);
      return 1LL;
    }

    OUTLINED_FUNCTION_34_0();
    type metadata accessor for NLIntent(0LL);
    uint64_t v39 = OUTLINED_FUNCTION_47_13();
    goto LABEL_28;
  }

  if (v24 == enum case for Parse.directInvocation(_:))
  {
    OUTLINED_FUNCTION_36_13();
    uint64_t v30 = v76;
    id v31 = v11;
    uint64_t v32 = OUTLINED_FUNCTION_129();
    uint64_t v33 = v77;
    uint64_t v35 = v34(v32);
    uint64_t v36 = Parse.DirectInvocation.identifier.getter(v35);
    uint64_t v38 = v37;
    if (v36 == 0xD00000000000003BLL && v37 == 0x80000000001937F0LL)
    {
      swift_bridgeObjectRelease(0x80000000001937F0LL);
    }

    else
    {
      char v42 = OUTLINED_FUNCTION_167(v36, v37, 0xD00000000000003BLL, 0x80000000001937F0LL);
      swift_bridgeObjectRelease(v38);
      if ((v42 & 1) == 0) {
        goto LABEL_27;
      }
    }

    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v43 = OUTLINED_FUNCTION_48();
    uint64_t v44 = (os_log_s *)__swift_project_value_buffer(v43, (uint64_t)static Logger.voiceCommands);
    Logger.logObject.getter(v44);
    os_log_type_t v45 = OUTLINED_FUNCTION_58();
    if (os_log_type_enabled(v44, v45))
    {
      unint64_t v46 = (uint8_t *)OUTLINED_FUNCTION_57_1();
      *(_WORD *)unint64_t v46 = 0;
      OUTLINED_FUNCTION_47_1( &dword_0,  v44,  v45,  "CustomIntentExecutionFlow on input: direct Invocation done button",  v46);
      OUTLINED_FUNCTION_1_0((uint64_t)v46);
    }

    uint64_t v47 = v21 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state;
    OUTLINED_FUNCTION_30_12( v21 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state,  (uint64_t)v79,  0LL);
    uint64_t v48 = v74;
    outlined init with copy of CustomIntentExecutionFlow.State(v47, (uint64_t)v74);
    if (swift_getEnumCaseMultiPayload(v48, v75) == 5)
    {
      OUTLINED_FUNCTION_44_7();
      uint64_t v49 = *(void (**)(char *, os_log_s *, uint64_t))(v71 + 32);
      uint64_t v50 = v70;
      uint64_t v51 = v72;
      v49((char *)v70, v48, v72);
      uint64_t v52 = v73;
      v49((char *)v73, v50, v51);
      OUTLINED_FUNCTION_51_15(v52);
      OUTLINED_FUNCTION_13_16(v52);
      OUTLINED_FUNCTION_15_6(v47, (uint64_t)&v84);
      OUTLINED_FUNCTION_50_13();
      uint64_t v53 = &v84;
LABEL_22:
      swift_endAccess(v53);
      return 1LL;
    }

    uint64_t v54 = outlined destroy of CustomIntentExecutionFlow.State((uint64_t)v48);
    uint64_t v55 = Parse.DirectInvocation.userData.getter(v54);
    if (v55)
    {
      uint64_t v48 = (os_log_s *)v55;
      static ShortcutDoneButtonConverter.toShortcutDoneButton(userData:)(v55, v80);
      swift_bridgeObjectRelease(v48);
      outlined init with take of Input?( (uint64_t)v80,  (uint64_t)&v81,  &demangling cache variable for type metadata for ShortcutDoneButton?);
      if ((void)v82)
      {
        __int128 v84 = v81;
        __int128 v85 = v82;
        uint64_t v86 = v83;
        os_log_type_t v56 = v44;
        Logger.logObject.getter(v55);
        os_log_type_t v57 = OUTLINED_FUNCTION_164();
        if (OUTLINED_FUNCTION_40(v57))
        {
          uint64_t v58 = (uint8_t *)OUTLINED_FUNCTION_57_1();
          *(_WORD *)uint64_t v58 = 0;
          OUTLINED_FUNCTION_47_1( &dword_0,  v48,  v56,  "CustomIntentExecutionFlow creating exit value with done button.",  v58);
          OUTLINED_FUNCTION_1_0((uint64_t)v58);
        }

        OUTLINED_FUNCTION_44_7();
        uint64_t v59 = v86;
        __int128 v77 = v85;
        outlined init with take of Input?( (uint64_t)&v84,  (uint64_t)v87,  (uint64_t *)&demangling cache variable for type metadata for String?);
        outlined release of String?((uint64_t)v87);
        uint64_t v60 = v69;
        *uint64_t v69 = v59;
        *(_OWORD *)(v60 + 1) = v77;
        (*(void (**)(void *, void, uint64_t))(v71 + 104))( v60,  enum case for RCHFlowResult.complete<A, B>(_:),  v72);
        uint64_t v61 = v73;
        uint64_t v62 = OUTLINED_FUNCTION_129();
        v63(v62);
        OUTLINED_FUNCTION_51_15(v61);
        OUTLINED_FUNCTION_13_16(v61);
        OUTLINED_FUNCTION_15_6(v47, (uint64_t)v78);
        OUTLINED_FUNCTION_50_13();
        uint64_t v53 = (__int128 *)v78;
        goto LABEL_22;
      }
    }

    os_log_type_t v65 = v44;
    Logger.logObject.getter(v55);
    os_log_type_t v66 = OUTLINED_FUNCTION_164();
    if (OUTLINED_FUNCTION_40(v66))
    {
      uint64_t v67 = (uint8_t *)OUTLINED_FUNCTION_57_1();
      *(_WORD *)uint64_t v67 = 0;
      OUTLINED_FUNCTION_47_1( &dword_0,  v48,  v65,  "CustomIntentExecutionFlow on input: incorrect state for done button",  v67);
      OUTLINED_FUNCTION_1_0((uint64_t)v67);
    }

LABEL_27:
    os_log_type_t v41 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    uint64_t v39 = (uint64_t)v31;
    uint64_t v40 = v33;
LABEL_28:
    v41(v39, v40);
    return 0LL;
  }

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v2, v12);
  return 0LL;
}

uint64_t CustomIntentExecutionFlow.execute()(uint64_t a1)
{
  v2[31] = a1;
  v2[32] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
  v2[33] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[34] = v4;
  v2[35] = OUTLINED_FUNCTION_4_0(v4);
  v2[36] = OUTLINED_FUNCTION_11_0();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowFactory<CustomIntentRCHFlowStrategy>);
  v2[37] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[38] = v6;
  v2[39] = OUTLINED_FUNCTION_9_0(v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INIntent, INIntentResponse>);
  v2[40] = OUTLINED_FUNCTION_9_0(*(void *)(v7 - 8));
  uint64_t v8 = OUTLINED_FUNCTION_41_14();
  v2[41] = v8;
  v2[42] = OUTLINED_FUNCTION_4_0(*(void *)(v8 - 8));
  v2[43] = OUTLINED_FUNCTION_11_0();
  v2[44] = OUTLINED_FUNCTION_11_0();
  return swift_task_switch(CustomIntentExecutionFlow.execute(), 0LL, 0LL);
}

{
  void *v1;
  uint64_t v2;
  os_log_s *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v3 = *(os_log_s **)(v2 + 360);
  Logger.logObject.getter(a1);
  uint64_t v4 = OUTLINED_FUNCTION_58();
  uint64_t v5 = OUTLINED_FUNCTION_31_0(v4);
  uint64_t v6 = *(void *)(v2 + 384);
  if (v5)
  {
    uint64_t v7 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    *(_WORD *)uint64_t v7 = 0;
    OUTLINED_FUNCTION_47_1( &dword_0,  v3,  (os_log_type_t)v1,  "CustomIntentExecutionFlow error submitting empty dialog",  v7);
    OUTLINED_FUNCTION_1_0((uint64_t)v7);
  }

  swift_errorRelease(v6);

  OUTLINED_FUNCTION_21_16();
  OUTLINED_FUNCTION_21_1();
  OUTLINED_FUNCTION_8_21();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_12_9(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t CustomIntentExecutionFlow.execute()()
{
  uint64_t v1 = *(os_log_s **)(v0 + 352);
  uint64_t v2 = *(void *)(v0 + 328);
  uint64_t v3 = *(void *)(v0 + 256) + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state;
  OUTLINED_FUNCTION_30_12(v3, v0 + 144, 0LL);
  uint64_t v4 = OUTLINED_FUNCTION_45();
  outlined init with copy of CustomIntentExecutionFlow.State(v4, v5);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v1, v2);
  switch((int)EnumCaseMultiPayload)
  {
    case 0:
      uint64_t v7 = *(void *)(v0 + 344);
      uint64_t v8 = **(void ***)(v0 + 352);
      uint64_t v10 = *(void *)(v0 + 328);
      uint64_t v9 = *(void *)(v0 + 336);
      if (!v8)
      {
        unint64_t v98 = lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors();
        uint64_t v99 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for RunVoiceShortcutFlowErrors, v98);
        *uint64_t v100 = 0;
        *(void *)uint64_t v7 = v99;
        *(_BYTE *)(v7 + 8) = 0;
        OUTLINED_FUNCTION_26_15(v7, v10);
        OUTLINED_FUNCTION_61_11();
        OUTLINED_FUNCTION_15_6(v3, v0 + 192);
        OUTLINED_FUNCTION_33_12(v9);
        uint64_t v101 = swift_endAccess(v0 + 192);
        static ExecuteResponse.complete()(v101);
        goto LABEL_42;
      }

      uint64_t v11 = *(void *)(v0 + 256);
      *(void *)uint64_t v7 = v8;
      swift_storeEnumTagMultiPayload(v7, v10, 1LL);
      OUTLINED_FUNCTION_61_11();
      OUTLINED_FUNCTION_15_6(v3, v0 + 168);
      id v12 = v8;
      OUTLINED_FUNCTION_33_12(v9);
      swift_endAccess(v0 + 168);
      outlined init with copy of AppShortcutInvoking( v11 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_appPolicyHandler,  v0 + 16);
      uint64_t v13 = outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(v12, (SEL *)&selRef_launchId);
      if (v14) {
        unint64_t v15 = v13;
      }
      else {
        unint64_t v15 = 0xD000000000000013LL;
      }
      if (v14) {
        unint64_t v16 = v14;
      }
      else {
        unint64_t v16 = 0x80000000001920C0LL;
      }
      uint64_t v17 = type metadata accessor for VoiceCommandsScreentimeCheckFlowStrategy();
      uint64_t v18 = OUTLINED_FUNCTION_19(v17, 72LL);
      outlined init with take of AceServiceInvokerAsync((__int128 *)(v0 + 16), v18 + 16);
      *(void *)(v18 + 56) = v15;
      *(void *)(v18 + 64) = v16;
      uint64_t v129 = v17;
      lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type VoiceCommandsScreentimeCheckFlowStrategy and conformance VoiceCommandsScreentimeCheckFlowStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for VoiceCommandsScreentimeCheckFlowStrategy,  (uint64_t)&protocol conformance descriptor for VoiceCommandsScreentimeCheckFlowStrategy);
      uint64_t v130 = v19;
      *(void *)&__int128 v128 = v18;
      uint64_t v20 = swift_retain(v18);
      static OutputPublisherFactory.makeOutputPublisherAsync()(v126, v20);
      uint64_t v21 = type metadata accessor for ScreentimeCheckFlow(0LL);
      OUTLINED_FUNCTION_51(v21);
      *(void *)(v0 + 240) = ScreentimeCheckFlow.init(strategy:outputPublisher:)(&v128, v126);
      uint64_t v22 = OUTLINED_FUNCTION_19((uint64_t)&unk_1F6968, 32LL);
      *(void *)(v22 + 16) = partial apply for implicit closure #3 in implicit closure #2 in CustomIntentExecutionFlow.execute();
      *(void *)(v22 + 24) = v11;
      swift_retain(v11);
      static ExecuteResponse.ongoing<A>(next:childCompletion:)( v0 + 240,  _s11SiriKitFlow05GuardC6ResultOIegy_ACIegn_TRTA_0,  v22,  v21,  &protocol witness table for ScreentimeCheckFlow);

      OUTLINED_FUNCTION_34_0();
      swift_release();
      goto LABEL_18;
    case 1:
      uint64_t v23 = *(void *)(v0 + 256);
      int v24 = **(void ***)(v0 + 352);
      if (*(_BYTE *)(v23 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_appBlockedByScreentime) == 1)
      {
        static ExecuteResponse.complete()(EnumCaseMultiPayload);
      }

      else
      {
        uint64_t v77 = *(void *)(v0 + 320);
        uint64_t v78 = *(void *)(v23 + 104);
        uint64_t v79 = *(void *)(v23 + 112);
        uint64_t v80 = ObjC metadata update function for CustomIntentExecutionFlow();
        lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type CustomIntentExecutionFlow and conformance CustomIntentExecutionFlow,  type metadata accessor for CustomIntentExecutionFlow,  (uint64_t)&protocol conformance descriptor for CustomIntentExecutionFlow);
        uint64_t v82 = SiriEnvironmentLocating<>.siriEnvironment.getter(v80, v81);
        specialized static RCHChildFlowProducersAsync.forCustomIntents(voiceCommandName:originDevice:runner:siriEnvironment:deviceState:)( v78,  v79,  v23 + 120,  v82,  v23 + 24,  v77);
        swift_release();
        uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowFactory<INIntent, INIntentResponse>);
        OUTLINED_FUNCTION_51(v83);
        uint64_t v84 = RCHChildFlowFactory.init(producers:)(v77);
        type metadata accessor for App(0LL);
        uint64_t v85 = outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(v24, (SEL *)&selRef_launchId);
        uint64_t v123 = App.__allocating_init(appIdentifier:)(v85, v86);
        if (one-time initialization token for voiceCommands != -1) {
          swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
        }
        uint64_t v125 = v0 + 224;
        uint64_t v87 = OUTLINED_FUNCTION_48();
        uint64_t v88 = (os_log_s *)__swift_project_value_buffer(v87, (uint64_t)static Logger.voiceCommands);
        id v89 = v24;
        Logger.logObject.getter(v89);
        os_log_type_t v90 = OUTLINED_FUNCTION_58();
        if (os_log_type_enabled(v88, v90))
        {
          v120 = (uint64_t *)(v0 + 216);
          uint64_t v91 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
          uint64_t v92 = OUTLINED_FUNCTION_38(32LL);
          *(void *)&v126[0] = v92;
          *(_DWORD *)uint64_t v91 = 136315138;
          uint64_t v93 = outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(v89, (SEL *)&selRef_intentId);
          if (!v94) {
            uint64_t v93 = 0x7974706D65LL;
          }
          uint64_t v95 = v84;
          if (v94) {
            unint64_t v96 = v94;
          }
          else {
            unint64_t v96 = 0xE500000000000000LL;
          }
          uint64_t *v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v96, (uint64_t *)v126);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v120, v125, v91 + 4);
          unint64_t v97 = v96;
          uint64_t v84 = v95;
          swift_bridgeObjectRelease(v97);

          _os_log_impl(&dword_0, v88, v90, "CustomIntentExecutionFlow intent id: %s", v91, 0xCu);
          swift_arrayDestroy(v92, 1LL, (char *)&type metadata for Any + 8);
          OUTLINED_FUNCTION_1_0(v92);
          OUTLINED_FUNCTION_1_0((uint64_t)v91);
        }

        else
        {
        }

        uint64_t v102 = *(void *)(v0 + 304);
        uint64_t v103 = *(void *)(v0 + 312);
        uint64_t v104 = *(void *)(v0 + 296);
        uint64_t v105 = *(void *)(v0 + 256);
        uint64_t v106 = type metadata accessor for CustomIntentRCHFlowStrategy();
        id v107 = v89;
        static Device.current.getter(v126, v107);
        CustomIntentRCHFlowStrategy.__allocating_init(intent:deviceState:)((uint64_t)v107, v126);
        *(void *)(v0 + 224) = v108;
        lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type CustomIntentRCHFlowStrategy and conformance CustomIntentRCHFlowStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for CustomIntentRCHFlowStrategy,  (uint64_t)&protocol conformance descriptor for CustomIntentRCHFlowStrategy);
        uint64_t v110 = v109;
        swift_retain(v84);
        RCHFlowFactory.init(strategy:childFlowFactory:)(v125, v84, v106, v110);
        uint64_t v111 = RCHFlowFactory.makeRCHFlowWithResolvedApp(_:intent:)(v123, v107, v104);
        swift_retain(v105);
        static ExecuteResponse.ongoing<A>(next:childCompletion:)( v111,  partial apply for implicit closure #7 in implicit closure #6 in CustomIntentExecutionFlow.execute(),  v105);
        swift_release();
        swift_release();
        OUTLINED_FUNCTION_34_0();
        swift_release();

        uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
        uint64_t v51 = v103;
        uint64_t v52 = v104;
LABEL_41:
        v53(v51, v52);
      }

{
  void *v0;
  uint64_t v1;
  if (one-time initialization token for shared != -1) {
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  }
  (*(void (**)(void))(*(void *)static WFDialogState.shared + 248LL))();
  OUTLINED_FUNCTION_21_16();

  OUTLINED_FUNCTION_21_1();
  OUTLINED_FUNCTION_8_21();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_12_9(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t CustomIntentExecutionFlow.execute()(void *a1)
{
  uint64_t v4 = *(void *)(*(void *)v2 + 376LL);
  *(void *)(*(void *)v2 + 384LL) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    uint64_t v5 = CustomIntentExecutionFlow.execute();
  }

  else
  {

    uint64_t v5 = CustomIntentExecutionFlow.execute();
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t implicit closure #3 in implicit closure #2 in CustomIntentExecutionFlow.execute()(char a1)
{
  return CustomIntentExecutionFlow.processScreentimeCheckCompletion(guardFlowResult:)(a1 & 1);
}

uint64_t specialized static RCHChildFlowProducersAsync.forCustomIntents(voiceCommandName:originDevice:runner:siriEnvironment:deviceState:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v103 = a4;
  uint64_t v99 = a3;
  uint64_t v106 = a2;
  uint64_t v108 = a1;
  uint64_t v8 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INIntent,  &OBJC_CLASS___INIntent_ptr);
  uint64_t v12 = type metadata accessor for NSError( 0LL,  &lazy cache variable for type metadata for INIntentResponse,  &OBJC_CLASS___INIntentResponse_ptr);
  uint64_t v100 = a6;
  uint64_t v104 = v12;
  RCHChildFlowProducersAsync.init()(v11);
  uint64_t v13 = type metadata accessor for ModeInfoProvider();
  swift_allocObject(v13, 24LL, 7LL);
  id v107 = ModeInfoProvider.init()();
  uint64_t v101 = (void *)a5;
  outlined init with copy of AppShortcutInvoking(a5, (uint64_t)v112);
  uint64_t v14 = type metadata accessor for RunCustomIntentCATs(0LL);
  static CATOption.defaultMode.getter(v14);
  uint64_t v15 = CATWrapper.__allocating_init(options:globals:)(v10, 0LL);
  uint64_t v16 = type metadata accessor for RunCustomIntentCATsSimple(0LL);
  static CATOption.defaultMode.getter(v16);
  uint64_t v102 = v16;
  uint64_t v17 = CATWrapperSimple.__allocating_init(options:globals:)(v10, 0LL);
  uint64_t v18 = type metadata accessor for CustomIntentNeedsValueFlowStrategy();
  swift_allocObject(v18, 80LL, 7LL);
  CustomIntentNeedsValueFlowStrategy.init(deviceState:catWrapper:catWrapperSimple:)(v112, v15, v17);
  *(void *)&v112[0] = v19;
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type CustomIntentNeedsValueFlowStrategy and conformance CustomIntentNeedsValueFlowStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for CustomIntentNeedsValueFlowStrategy,  (uint64_t)&protocol conformance descriptor for CustomIntentNeedsValueFlowStrategy);
  uint64_t v21 = static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)(v112, v18, v20);
  uint64_t v23 = v22;
  swift_release();
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INIntent, INIntentResponse>);
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter(v21, v23, v24);
  outlined init with copy of AppShortcutInvoking(a5, (uint64_t)v112);
  swift_bridgeObjectRetain(v106);
  uint64_t v25 = v103;
  uint64_t v26 = swift_retain(v103);
  static CATOption.defaultMode.getter(v26);
  uint64_t v27 = CATWrapper.__allocating_init(options:globals:)(v10, 0LL);
  static CATOption.defaultMode.getter(v27);
  uint64_t v28 = CATWrapperSimple.__allocating_init(options:globals:)(v10, 0LL);
  uint64_t v29 = type metadata accessor for RunVoiceCommandCATs(0LL);
  static CATOption.defaultMode.getter(v29);
  uint64_t v30 = CATWrapper.__allocating_init(options:globals:)(v10, 0LL);
  uint64_t v31 = type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  static CATOption.defaultMode.getter(v31);
  uint64_t v32 = CATWrapperSimple.__allocating_init(options:globals:)(v10, 0LL);
  uint64_t v33 = type metadata accessor for ResponseFactory(0LL);
  uint64_t v34 = *(unsigned int *)(v33 + 48);
  uint64_t v35 = *(unsigned __int16 *)(v33 + 52);
  uint64_t v105 = v33;
  swift_allocObject(v33, v34, v35);
  uint64_t v36 = ResponseFactory.init()();
  uint64_t v37 = type metadata accessor for CustomIntentNeedsConfirmationFlowStrategy(0LL);
  uint64_t v38 = swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
  uint64_t v39 = v106;
  uint64_t v40 = v27;
  uint64_t v41 = v24;
  uint64_t v42 = v32;
  uint64_t v43 = (uint64_t)v107;
  *(void *)&v112[0] = specialized CustomIntentNeedsConfirmationFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:responseFactory:)( v108,  v106,  v25,  v112,  v40,  v28,  v30,  v42,  v36,  v38);
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type CustomIntentNeedsConfirmationFlowStrategy and conformance CustomIntentNeedsConfirmationFlowStrategy,  type metadata accessor for CustomIntentNeedsConfirmationFlowStrategy,  (uint64_t)&protocol conformance descriptor for CustomIntentNeedsConfirmationFlowStrategy);
  uint64_t v44 = v37;
  uint64_t v45 = v101;
  uint64_t v47 = static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)(v112, v44, v46);
  uint64_t v49 = v48;
  swift_release();
  RCHChildFlowProducersAsync.needsConfirmationFlowProducer.setter(v47, v49, v41);
  outlined init with copy of AppShortcutInvoking((uint64_t)v45, (uint64_t)v112);
  swift_bridgeObjectRetain(v39);
  swift_retain(v25);
  uint64_t v50 = swift_retain(v43);
  static CATOption.defaultMode.getter(v50);
  uint64_t v51 = CATWrapperSimple.__allocating_init(options:globals:)(v10, 0LL);
  uint64_t v52 = type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy();
  uint64_t v53 = swift_allocObject(v52, 152LL, 7LL);
  uint64_t v54 = v108;
  specialized CustomIntentNeedsDisambiguationFlowStrategy.init(voiceCommandName:deviceState:modeInfoProvider:siriEnvironment:runCustomIntentCatWrapperSimple:)( v108,  v39,  v112,  v43,  v25,  v51,  v53);
  *(void *)&v112[0] = v55;
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type CustomIntentNeedsDisambiguationFlowStrategy and conformance CustomIntentNeedsDisambiguationFlowStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy,  (uint64_t)&protocol conformance descriptor for CustomIntentNeedsDisambiguationFlowStrategy);
  uint64_t v57 = static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)(v112, v52, v56);
  uint64_t v59 = v58;
  swift_release();
  RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter(v57, v59, v41);
  outlined init with copy of AppShortcutInvoking((uint64_t)v45, (uint64_t)v112);
  uint64_t v60 = type metadata accessor for CustomIntentUnsupportedValueFlowStrategy();
  swift_allocObject(v60, 64LL, 7LL);
  *(void *)&v112[0] = CustomIntentUnsupportedValueFlowStrategy.init(deviceState:)(v112);
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type CustomIntentUnsupportedValueFlowStrategy and conformance CustomIntentUnsupportedValueFlowStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for CustomIntentUnsupportedValueFlowStrategy,  (uint64_t)"9/\a");
  uint64_t v62 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)(v112, v60, v61);
  uint64_t v64 = v63;
  swift_release();
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter(v62, v64, v41);
  outlined init with copy of AppShortcutInvoking((uint64_t)v45, (uint64_t)v112);
  uint64_t v65 = type metadata accessor for CustomIntentConfirmIntentFlowStrategy(0LL);
  swift_allocObject(v65, *(unsigned int *)(v65 + 48), *(unsigned __int16 *)(v65 + 52));
  swift_bridgeObjectRetain(v39);
  swift_retain(v25);
  *(void *)&v112[0] = CustomIntentConfirmIntentFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:)( v54,  v39,  v25,  v112);
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type CustomIntentConfirmIntentFlowStrategy and conformance CustomIntentConfirmIntentFlowStrategy,  type metadata accessor for CustomIntentConfirmIntentFlowStrategy,  (uint64_t)"a\t\a");
  uint64_t v67 = static RCHChildFlowFactoryHelper.makeConditionalConfirmIntentFlowProducer<A>(strategy:_:)( v112,  closure #1 in static RCHChildFlowProducersAsync.forCustomIntents(voiceCommandName:originDevice:runner:siriEnvironment:deviceState:),  0LL,  v65,  v66);
  uint64_t v69 = v68;
  swift_release();
  RCHChildFlowProducersAsync.confirmIntentFlowProducer.setter(v67, v69, v41);
  outlined init with copy of AppShortcutInvoking((uint64_t)v45, (uint64_t)v112);
  uint64_t v70 = type metadata accessor for CustomIntentHandleIntentFlowStrategy();
  swift_allocObject(v70, 64LL, 7LL);
  swift_bridgeObjectRetain(v39);
  swift_retain(v25);
  *(void *)&v112[0] = CustomIntentHandleIntentFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:)( v54,  v39,  v25,  v112);
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type CustomIntentHandleIntentFlowStrategy and conformance CustomIntentHandleIntentFlowStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for CustomIntentHandleIntentFlowStrategy,  (uint64_t)")<\a");
  uint64_t v72 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)(v112, v70, v71);
  uint64_t v74 = v73;
  swift_release();
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter(v72, v74, v41);
  uint64_t v75 = v45[3];
  __swift_project_boxed_opaque_existential_1(v45, v75);
  if ((dispatch thunk of DeviceState.isHomePod.getter(v75) & 1) != 0)
  {
    outlined init with copy of AppShortcutInvoking(v99, (uint64_t)v112);
    outlined init with copy of AppShortcutInvoking((uint64_t)v45, (uint64_t)v110);
    uint64_t v76 = type metadata accessor for CustomIntentContinueInAppWithDialogStrategy();
    swift_allocObject(v76, 104LL, 7LL);
    *(void *)&v112[0] = CustomIntentContinueInAppWithDialogStrategy.init(runner:deviceState:)(v112, v110);
    lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type CustomIntentContinueInAppWithDialogStrategy and conformance CustomIntentContinueInAppWithDialogStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for CustomIntentContinueInAppWithDialogStrategy,  (uint64_t)&protocol conformance descriptor for CustomIntentContinueInAppWithDialogStrategy);
    uint64_t v79 = static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithHandoffToCompanionProducer<A>(strategy:)( v112,  v76,  v77);
  }

  else
  {
    outlined init with copy of AppShortcutInvoking((uint64_t)v45, (uint64_t)v112);
    uint64_t v81 = type metadata accessor for ContinueInAppCATWrapperSimple(0LL);
    memset(v110, 0, sizeof(v110));
    uint64_t v111 = 0LL;
    swift_allocObject(v81, *(unsigned int *)(v81 + 48), *(unsigned __int16 *)(v81 + 52));
    outlined init with copy of DeviceState?((uint64_t)v110, (uint64_t)v109);
    swift_bridgeObjectRetain(v39);
    swift_retain(v25);
    SiriKitFlowCATWrapperSimple.init(deviceState:)();
    uint64_t v83 = v82;
    outlined destroy of Any?((uint64_t)v110, &demangling cache variable for type metadata for DeviceState?);
    swift_allocObject(v105, *(unsigned int *)(v105 + 48), *(unsigned __int16 *)(v105 + 52));
    uint64_t v84 = ResponseFactory.init()();
    uint64_t v85 = type metadata accessor for CustomIntentContinueInAppFlowStrategy();
    uint64_t v86 = swift_allocObject(v85, 64LL, 7LL);
    specialized CustomIntentContinueInAppFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:continueInAppCATWrapperSimple:responseFactory:)( v108,  v39,  v25,  v112,  v83,  v84,  v86);
    *(void *)&v112[0] = v87;
    lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type CustomIntentContinueInAppFlowStrategy and conformance CustomIntentContinueInAppFlowStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for CustomIntentContinueInAppFlowStrategy,  (uint64_t)&protocol conformance descriptor for CustomIntentContinueInAppFlowStrategy);
    uint64_t v79 = static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithAutomaticPunchOutProducer<A>(strategy:)( v112,  v85,  v88);
  }

  uint64_t v80 = v78;
  swift_release();
  RCHChildFlowProducersAsync.continueInAppFlowProducer.setter(v79, v80, v41);
  outlined init with copy of AppShortcutInvoking((uint64_t)v45, (uint64_t)v112);
  uint64_t v89 = v105;
  swift_allocObject(v105, *(unsigned int *)(v105 + 48), *(unsigned __int16 *)(v105 + 52));
  uint64_t v90 = ResponseFactory.init()();
  uint64_t v91 = type metadata accessor for CustomIntentTCCFlowStrategy();
  uint64_t v92 = (void *)swift_allocObject(v91, 136LL, 7LL);
  v92[10] = &type metadata for EnableTCCLabelsProvider;
  v92[11] = &protocol witness table for EnableTCCLabelsProvider;
  v92[15] = v89;
  v92[16] = &protocol witness table for ResponseFactory;
  v92[12] = v90;
  outlined init with take of AceServiceInvokerAsync(v112, (uint64_t)(v92 + 2));
  *(void *)&v112[0] = v92;
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type CustomIntentTCCFlowStrategy and conformance CustomIntentTCCFlowStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for CustomIntentTCCFlowStrategy,  (uint64_t)&protocol conformance descriptor for CustomIntentTCCFlowStrategy);
  uint64_t v94 = static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)(v112, v91, v104, v93);
  uint64_t v96 = v95;
  swift_release();
  RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter(v94, v96, v41);
  return swift_release();
}

uint64_t CustomIntentExecutionFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = ObjC metadata update function for CustomIntentExecutionFlow();
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type CustomIntentExecutionFlow and conformance CustomIntentExecutionFlow,  type metadata accessor for CustomIntentExecutionFlow,  (uint64_t)&protocol conformance descriptor for CustomIntentExecutionFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v5);
}

void CustomIntentExecutionFlow.isReadRequest(intent:intentResponse:deviceState:)( void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for InteractionType(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v29[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v29[-1] - v11;
  uint64_t v13 = CustomIntentExecutionFlow.getReadItems(intent:intentResponse:)(a1, a2);
  uint64_t v14 = *(void *)(v13 + 16);
  swift_bridgeObjectRelease(v13);
  outlined init with copy of AppShortcutInvoking(a3, (uint64_t)v35);
  if (v14)
  {
    uint64_t v15 = OUTLINED_FUNCTION_7_16(v35);
    char v17 = dispatch thunk of DeviceState.isWatch.getter(v15, v16);
    outlined init with copy of AppShortcutInvoking((uint64_t)v35, (uint64_t)v34);
    if ((v17 & 1) != 0)
    {
      OUTLINED_FUNCTION_54_14();
    }

    else
    {
      uint64_t v18 = OUTLINED_FUNCTION_7_16(v34);
      char v20 = dispatch thunk of DeviceState.isCarPlay.getter(v18, v19);
      OUTLINED_FUNCTION_54_14();
      if ((v20 & 1) == 0)
      {
        uint64_t v21 = OUTLINED_FUNCTION_7_16(v33);
        char v22 = dispatch thunk of DeviceState.isHomePod.getter(v21);
        __swift_destroy_boxed_opaque_existential_1Tm(v33);
        OUTLINED_FUNCTION_58_11();
        if ((v22 & 1) == 0)
        {
          uint64_t v23 = OUTLINED_FUNCTION_7_16(v32);
          char v24 = dispatch thunk of DeviceState.isEyesFree.getter(v23);
          __swift_destroy_boxed_opaque_existential_1Tm(v32);
          OUTLINED_FUNCTION_57_11();
          if ((v24 & 1) == 0)
          {
            uint64_t v25 = v30;
            uint64_t v26 = v31;
            __swift_project_boxed_opaque_existential_1(v29, v30);
            dispatch thunk of DeviceState.interactionType.getter(v25, v26);
            (*(void (**)(char *, void, uint64_t))(v7 + 104))( v10,  enum case for InteractionType.dialogDriven(_:),  v6);
            specialized == infix<A>(_:_:)();
            uint64_t v27 = *(void (**)(char *, uint64_t))(v7 + 8);
            v27(v10, v6);
            v27(v12, v6);
          }

          goto LABEL_8;
        }

uint64_t CustomIntentExecutionFlow.getReadItems(intent:intentResponse:)(void *a1, void *a2)
{
  if (!a2) {
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  id v3 = a2;
  uint64_t v4 = outlined bridged method (pb) of @objc INIntentResponse.propertiesByName.getter(v3);
  if (!v4)
  {

    return (uint64_t)_swiftEmptyArrayStorage;
  }

  uint64_t v5 = v4;
  id v6 = [a1 typeName];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  v10._countAndFlagsBits = v7;
  v10._object = v9;
  uint64_t v45 = v3;
  object = INIntentResponse.localizedResponseTemplate(intentName:)(v10)._object;
  type metadata accessor for CATSpeakableString();
  uint64_t v12 = static CATSpeakableString.getPropertiesInTemplateString(templateString:)();
  swift_bridgeObjectRelease(v9);
  uint64_t result = swift_bridgeObjectRelease(object);
  int64_t v14 = 0LL;
  uint64_t v47 = v5 + 64;
  uint64_t v15 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & *(void *)(v5 + 64);
  int64_t v48 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v50 = v12;
  uint64_t v44 = v12 + 9;
  uint64_t v18 = &type metadata for AnyHashable;
  uint64_t v19 = &type metadata for String;
  uint64_t v49 = v5;
  while (v17)
  {
    unint64_t v20 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    unint64_t v21 = v20 | (v14 << 6);
LABEL_8:
    outlined init with copy of AnyHashable(*(void *)(v5 + 48) + 40 * v21, (uint64_t)&v55);
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v21, (uint64_t)v57 + 8);
LABEL_27:
    outlined init with take of Input?( (uint64_t)&v55,  (uint64_t)&v59,  &demangling cache variable for type metadata for (key: AnyHashable, value: Any)?);
    if (!*((void *)&v60 + 1))
    {
      swift_bridgeObjectRelease(v50);
      swift_release();

      return (uint64_t)_swiftEmptyArrayStorage;
    }

    outlined init with take of Any(&v62, v54);
    __int128 v55 = v59;
    __int128 v56 = v60;
    *(void *)&v57[0] = v61;
    if ((swift_dynamicCast(&v52, &v55, v18, v19, 6LL) & 1) != 0)
    {
      int64_t v51 = v14;
      uint64_t v25 = v19;
      uint64_t v26 = v18;
      uint64_t v27 = v53;
      uint64_t v28 = v50[2];
      if (v28)
      {
        uint64_t v29 = v52;
        uint64_t v30 = v50[4];
        uint64_t v31 = v50[5];
        BOOL v32 = v30 == v52 && v31 == v53;
        if (v32 || (OUTLINED_FUNCTION_167(v30, v31, v52, v53) & 1) != 0)
        {
LABEL_44:
          swift_bridgeObjectRelease(v27);
          uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v54);
          goto LABEL_45;
        }

        if (v28 != 1)
        {
          uint64_t v34 = v50[6];
          uint64_t v35 = v50[7];
          if (v34 == v29 && v35 == v27) {
            goto LABEL_44;
          }
          uint64_t result = OUTLINED_FUNCTION_167(v34, v35, v29, v27);
          if ((result & 1) != 0) {
            goto LABEL_44;
          }
          if (v28 != 2)
          {
            uint64_t v37 = v44;
            uint64_t v38 = 2LL;
            do
            {
              uint64_t v39 = v38 + 1;
              if (__OFADD__(v38, 1LL)) {
                goto LABEL_61;
              }
              uint64_t v40 = *(v37 - 1);
              uint64_t v41 = *v37;
              if (v40 == v29 && v41 == v27) {
                goto LABEL_44;
              }
              uint64_t v46 = v38;
              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, v29, v27, 0LL);
              if ((result & 1) != 0) {
                goto LABEL_44;
              }
              v37 += 2;
              uint64_t v38 = v46 + 1;
            }

            while (v39 != v28);
          }
        }
      }

      swift_bridgeObjectRelease(v27);
      outlined init with take of Any(v54, &v55);
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      uint64_t result = swift_dynamicCast(&v52, &v55, (char *)&type metadata for Any + 8, v33, 6LL);
      if ((result & 1) != 0)
      {
        swift_bridgeObjectRelease(v50);

        uint64_t v43 = v52;
        swift_release();
        return v43;
      }

LABEL_62:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  uint64_t v64 = objc_msgSend(v2, "typeName", v121);
  uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v67 = v66;

  v140 = (uint64_t)INIntent.bundleId.getter();
  v141 = v68;
  *(void *)&v138 = 46LL;
  *((void *)&v138 + 1) = 0xE100000000000000LL;
  v137[0] = 95LL;
  v137[1] = 0xE100000000000000LL;
  lazy protocol witness table accessor for type String and conformance String();
  OUTLINED_FUNCTION_44_9();
  OUTLINED_FUNCTION_6_25();
  uint64_t v75 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v69,  v70,  v71,  v72,  v73,  v74,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v0);
  v132 = v76;
  v140 = v65;
  v141 = v67;
  *(void *)&v138 = 46LL;
  *((void *)&v138 + 1) = 0xE100000000000000LL;
  uint64_t v77 = OUTLINED_FUNCTION_42_12((uint64_t)&v138, (uint64_t)&type metadata for String, (uint64_t)&type metadata for String);
  specialized BidirectionalCollection.last.getter(v77);
  uint64_t v79 = v78;
  swift_bridgeObjectRelease(v77);
  if (v79) {
    swift_bridgeObjectRelease(v67);
  }
  OUTLINED_FUNCTION_1_2();
  uint64_t v80 = OUTLINED_FUNCTION_19_19();
  OUTLINED_FUNCTION_51(v80);
  uint64_t v81 = OUTLINED_FUNCTION_25_23(v75, v132);
  uint64_t v82 = 0LL;
  uint64_t v83 = v7;
  OUTLINED_FUNCTION_9_22();
  uint64_t v86 = v85 & v84;
  uint64_t v88 = v87;
  if ((v85 & v84) == 0) {
    goto LABEL_66;
  }
LABEL_65:
  uint64_t v89 = __clz(__rbit64(v86));
  v86 &= v86 - 1;
  for (uint64_t i = v89 | (v82 << 6); ; uint64_t i = __clz(__rbit64(v92)) + (v82 << 6))
  {
    uint64_t v96 = (uint64_t *)(*(void *)(v83 + 48) + 16 * i);
    uint64_t v98 = *v96;
    unint64_t v97 = v96[1];
    uint64_t v99 = (uint64_t *)(*(void *)(v83 + 56) + 16 * i);
    uint64_t v100 = *v99;
    uint64_t v101 = v99[1];
    uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v103 = (__n128 *)OUTLINED_FUNCTION_23_4(v102);
    uint64_t v104 = OUTLINED_FUNCTION_5_25(v103, (__n128)xmmword_17E150);
    OUTLINED_FUNCTION_51(v104);
    swift_bridgeObjectRetain(v97);
    OUTLINED_FUNCTION_11_11();
    uint64_t v105 = UsoPrimitiveStringBuilder.init(value:)(v100, v101);
    v103[2].n128_u64[0] = v105;
    v140 = (uint64_t)v103;
    specialized Array._endMutation()(v105, v106, v107);
    uint64_t v81 = v88;
    dispatch thunk of UsoOpenTaskBuilder.setArgumentBuilders(argumentName:builders:)(v98, v97, v140);
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_69();
    if (v86) {
      goto LABEL_65;
    }
LABEL_66:
    if (__OFADD__(v82, 1LL))
    {
      __break(1u);
      goto LABEL_92;
    }

    OUTLINED_FUNCTION_14_28();
    if (v19 == v20)
    {
LABEL_87:
      swift_release();
      uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v109 = OUTLINED_FUNCTION_23_4(v108);
      *(_OWORD *)(v109 + 16) = xmmword_17E150;
      *(void *)(v109 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v81;
      v140 = v109;
      specialized Array._endMutation()(v109, v110, v111);
      swift_retain(v81);
      OUTLINED_FUNCTION_39_22();
      OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_38_18();
      if (v88)
      {
        OUTLINED_FUNCTION_23_6();
        OUTLINED_FUNCTION_37_11();
        OUTLINED_FUNCTION_34_16(v112, v113, v114, (uint64_t)&v139[8]);
        OUTLINED_FUNCTION_11_3();
        swift_release();
        outlined destroy of URL?(v125, &demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoGraph?);
      }

      else
      {
        OUTLINED_FUNCTION_32_14();
        __swift_storeEnumTagSinglePayload(v115, v116, v117, v126);
        id v118 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v124 + 32))(v123, v125, v126);
        OUTLINED_FUNCTION_72( v118,  &lazy cache variable for type metadata for USOSerializedGraph,  &OBJC_CLASS___USOSerializedGraph_ptr);
        uint64_t v119 = (void *)OUTLINED_FUNCTION_46_19();
        v120 = OUTLINED_FUNCTION_27_20( objc_allocWithZone(&OBJC_CLASS___SIRINLUUserWantedToProceed),  "initWithReference:");
        [objc_allocWithZone(SIRINLUSystemOffered) initWithOfferedAct:v120];
        OUTLINED_FUNCTION_11_3();

        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v123, v126);
      }

      OUTLINED_FUNCTION_24_0();
      return;
    }

    OUTLINED_FUNCTION_17_26();
    uint64_t v82 = v91;
    if (!v92)
    {
      uint64_t v82 = v91 + 1;
      OUTLINED_FUNCTION_21_19();
      if (v19 == v20) {
        goto LABEL_87;
      }
      OUTLINED_FUNCTION_24_19();
      if (!v92)
      {
        uint64_t v82 = v93 + 2;
        OUTLINED_FUNCTION_21_19();
        if (v19 == v20) {
          goto LABEL_87;
        }
        OUTLINED_FUNCTION_24_19();
        if (!v92) {
          break;
        }
      }
    }

uint64_t CustomIntentExecutionFlow.processCustomIntentConversionResult(conversionResult:)(void *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for CustomIntentExecutionFlow.State(0LL);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_27_17();
  __chkstk_darwin(v8);
  Swift::String v10 = (uint64_t *)&v27[-v9 - 8];
  if ((a2 & 1) != 0)
  {
    *Swift::String v10 = (uint64_t)a1;
    OUTLINED_FUNCTION_23_18();
    OUTLINED_FUNCTION_13_16((uint64_t)v10);
    OUTLINED_FUNCTION_15_6(v3 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state, (uint64_t)v27);
    swift_errorRetain(a1);
    uint64_t v13 = OUTLINED_FUNCTION_129();
  }

  else
  {
    id v11 = a1;
    outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(v11, (SEL *)&selRef_launchId);
    if (v12)
    {
      swift_bridgeObjectRelease(v12);
    }

    else
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v15 = OUTLINED_FUNCTION_48();
      __swift_project_value_buffer(v15, (uint64_t)static Logger.voiceCommands);
      uint64_t v16 = OUTLINED_FUNCTION_58();
      os_log_type_t v17 = v16;
      uint64_t v18 = (os_log_s *)Logger.logObject.getter(v16);
      if (os_log_type_enabled(v18, v17))
      {
        uint64_t v19 = (uint8_t *)OUTLINED_FUNCTION_57_1();
        *(_WORD *)uint64_t v19 = 0;
        OUTLINED_FUNCTION_47_1(&dword_0, v18, v17, "No launchId found in INIntent", v19);
        OUTLINED_FUNCTION_1_0((uint64_t)v19);
      }

      unint64_t v20 = lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors();
      uint64_t v21 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for RunVoiceShortcutFlowErrors, v20);
      *int64_t v22 = 0;
      *Swift::String v10 = v21;
      OUTLINED_FUNCTION_23_18();
      OUTLINED_FUNCTION_13_16((uint64_t)v10);
      OUTLINED_FUNCTION_15_6(v3 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state, (uint64_t)v27);
      uint64_t v23 = OUTLINED_FUNCTION_45();
      outlined assign with take of CustomIntentExecutionFlow.State(v23, v24);
      swift_endAccess(v27);
    }

    *Swift::String v10 = (uint64_t)v11;
    swift_storeEnumTagMultiPayload(v10, v6, 1LL);
    OUTLINED_FUNCTION_13_16((uint64_t)v10);
    OUTLINED_FUNCTION_15_6(v3 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state, (uint64_t)v27);
    uint64_t v13 = OUTLINED_FUNCTION_45();
  }

  outlined assign with take of CustomIntentExecutionFlow.State(v13, v14);
  return swift_endAccess(v27);
}

uint64_t CustomIntentExecutionFlow.processCustomIntentExecutionResult(executionResult:)()
{
  uint64_t v3 = OUTLINED_FUNCTION_41_14();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_27_17();
  __chkstk_darwin(v5);
  uint64_t v7 = (void *)((char *)v55 - v6);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
  uint64_t v9 = *(uint64_t (***)(uint64_t, uint64_t))(v8 - 8);
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_39_15();
  OUTLINED_FUNCTION_10_17((uint64_t)v2);
  int v10 = v9[11]((uint64_t)v2, v8);
  if (v10 == enum case for RCHFlowResult.complete<A, B>(_:))
  {
    v55[1] = v3;
    uint64_t v56 = v0;
    OUTLINED_FUNCTION_1_7(v9[12]);
    id v11 = (void *)v2[1];
    uint64_t v12 = (void *)v2[2];
    swift_release();
    uint64_t v13 = (void *)((char *)v1 + 24);
    uint64_t v14 = v1;
    id v15 = v12;
    CustomIntentExecutionFlow.isReadRequest(intent:intentResponse:deviceState:)(v11, v12, (uint64_t)v1 + 24);
    char v17 = v16;

    if ((v17 & 1) != 0)
    {
      uint64_t v18 = (uint64_t)v7
      *uint64_t v7 = (uint64_t)v11;
      v7[1] = (uint64_t)v15;
      OUTLINED_FUNCTION_10_17(v18);
      uint64_t v19 = OUTLINED_FUNCTION_63_7();
      swift_storeEnumTagMultiPayload(v19, v20, 4LL);
      uint64_t v21 = v56;
      outlined init with take of CustomIntentExecutionFlow.State((uint64_t)v7, v56);
      uint64_t v22 = (uint64_t)v14 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state;
      OUTLINED_FUNCTION_15_6( (uint64_t)v14 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state,  (uint64_t)v57);
      uint64_t v23 = v21;
LABEL_22:
      uint64_t v37 = v22;
      goto LABEL_23;
    }

    uint64_t v26 = v14;
    if ([v15 _intentResponseCode] == &dword_4)
    {
      uint64_t v27 = ObjC metadata update function for CustomIntentExecutionFlow();
      lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type CustomIntentExecutionFlow and conformance CustomIntentExecutionFlow,  type metadata accessor for CustomIntentExecutionFlow,  (uint64_t)&protocol conformance descriptor for CustomIntentExecutionFlow);
      uint64_t v29 = v28;
      uint64_t v30 = v27;
      uint64_t v1 = v14;
      uint64_t v31 = (os_log_s *)SiriEnvironmentLocating<>.siriEnvironment.getter(v30, v29);
      static CustomIntentExecutionFlow.isSkippingWaitForDone(intent:deviceState:siriEnvironment:)(v11, v13, v31);
      char v33 = v32;
      OUTLINED_FUNCTION_34_0();
      if ((v33 & 1) != 0)
      {

        OUTLINED_FUNCTION_10_17((uint64_t)v7);
        uint64_t v34 = OUTLINED_FUNCTION_63_7();
        swift_storeEnumTagMultiPayload(v34, v35, 6LL);
        uint64_t v25 = (uint64_t)v7;
        uint64_t v0 = v56;
        goto LABEL_9;
      }

      uint64_t v0 = v56;
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v47 = OUTLINED_FUNCTION_48();
      OUTLINED_FUNCTION_84(v47, (uint64_t)static Logger.voiceCommands);
      os_log_type_t v48 = OUTLINED_FUNCTION_58();
      if (os_log_type_enabled(v26, v48))
      {
        uint64_t v49 = (uint8_t *)OUTLINED_FUNCTION_57_1();
        *(_WORD *)uint64_t v49 = 0;
        os_log_type_t v50 = v48;
        uint64_t v51 = (uint64_t)v49;
        OUTLINED_FUNCTION_47_1(&dword_0, v26, v50, "CustomIntentExecutionFlow setting state to wait for done.", v49);
        OUTLINED_FUNCTION_1_0(v51);
        uint64_t v52 = (os_log_s *)v15;
      }

      else
      {
        uint64_t v52 = v26;
        uint64_t v1 = (os_log_s *)v11;
        id v11 = v15;
      }

      OUTLINED_FUNCTION_10_17((uint64_t)v7);
      uint64_t v53 = OUTLINED_FUNCTION_63_7();
      swift_storeEnumTagMultiPayload(v53, v54, 5LL);
      uint64_t v40 = (uint64_t)v7;
    }

    else
    {

      OUTLINED_FUNCTION_10_17((uint64_t)v7);
      uint64_t v38 = OUTLINED_FUNCTION_63_7();
      OUTLINED_FUNCTION_48_11(v38, v39);
      uint64_t v40 = (uint64_t)v7;
      uint64_t v0 = v56;
    }

    OUTLINED_FUNCTION_13_16(v40);
    uint64_t v22 = (uint64_t)v26 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state;
    goto LABEL_21;
  }

  if (v10 == enum case for RCHFlowResult.error<A, B>(_:))
  {
    OUTLINED_FUNCTION_1_7(v9[12]);
    char v24 = *((_BYTE *)v2 + 8);
    *uint64_t v7 = *v2;
    *((_BYTE *)v7 + 8) = v24;
    OUTLINED_FUNCTION_26_15((uint64_t)v7, v3);
    uint64_t v25 = (uint64_t)v7;
LABEL_9:
    OUTLINED_FUNCTION_13_16(v25);
    uint64_t v22 = (uint64_t)v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state;
LABEL_21:
    OUTLINED_FUNCTION_15_6(v22, (uint64_t)v57);
    uint64_t v23 = v0;
    goto LABEL_22;
  }

  if (v10 != enum case for RCHFlowResult.cancelled<A, B>(_:))
  {
    unint64_t v41 = lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors();
    uint64_t v42 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for RunVoiceShortcutFlowErrors, v41);
    *uint64_t v43 = 0;
    *uint64_t v7 = v42;
    *((_BYTE *)v7 + 8) = 0;
    OUTLINED_FUNCTION_26_15((uint64_t)v7, v3);
    OUTLINED_FUNCTION_13_16((uint64_t)v7);
    OUTLINED_FUNCTION_15_6( (uint64_t)v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state,  (uint64_t)v57);
    uint64_t v44 = OUTLINED_FUNCTION_129();
    outlined assign with take of CustomIntentExecutionFlow.State(v44, v45);
    swift_endAccess(v57);
    return OUTLINED_FUNCTION_1_7(v9[1]);
  }

  swift_storeEnumTagMultiPayload(v7, v3, 7LL);
  uint64_t v36 = (char *)v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state;
  OUTLINED_FUNCTION_15_6( (uint64_t)v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state,  (uint64_t)v57);
  uint64_t v23 = (uint64_t)v7;
  uint64_t v37 = (uint64_t)v36;
LABEL_23:
  outlined assign with take of CustomIntentExecutionFlow.State(v23, v37);
  return swift_endAccess(v57);
}

void static CustomIntentExecutionFlow.isSkippingWaitForDone(intent:deviceState:siriEnvironment:)( void *a1, void *a2, os_log_s *a3)
{
  id v8 = [a1 typeName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_46_14();
  unint64_t v9 = 0x8000000000193600LL;
  if (v4 == 0xD000000000000051LL && v3 == 0x8000000000193600LL) {
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_167(v4, v3, 0xD000000000000051LL, 0x8000000000193600LL);
  OUTLINED_FUNCTION_56_14();
  if ((v4 & 1) != 0) {
    goto LABEL_7;
  }
  id v10 = [a1 typeName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_46_14();
  unint64_t v9 = 0x8000000000194FE0LL;
  if (v4 == 0xD00000000000005ALL && v3 == 0x8000000000194FE0LL)
  {
LABEL_6:
    swift_bridgeObjectRelease(v9);
    goto LABEL_7;
  }

  OUTLINED_FUNCTION_167(v4, v3, 0xD00000000000005ALL, 0x8000000000194FE0LL);
  OUTLINED_FUNCTION_56_14();
  if ((v4 & 1) != 0 || INIntent.shouldSupressIntentResponseDialog()())
  {
LABEL_7:
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v11 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v11, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v12 = OUTLINED_FUNCTION_164();
    if (OUTLINED_FUNCTION_43_9(v12))
    {
      uint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_57_1();
      *(_WORD *)uint64_t v13 = 0;
      uint64_t v14 = "#CustomIntentExecutionFlow isSkippingWaitForDone - skipping wait for done due to smart prompt";
LABEL_11:
      OUTLINED_FUNCTION_47_1(&dword_0, a3, (os_log_type_t)a1, v14, v13);
LABEL_12:
      OUTLINED_FUNCTION_1_0((uint64_t)v13);
      goto LABEL_27;
    }

    goto LABEL_27;
  }

  type metadata accessor for CustomIntentsDialogTemplating();
  if ((static CustomIntentsDialogTemplating.isShortcutsInternalCustomIntent(intent:)(a1) & 1) == 0
    && (id v15 = [a1 _metadata]) != 0
    && (v16 = v15, unsigned int v17 = [v15 showsWhenRun], v16, v17)
    && (type metadata accessor for CustomIntentSnippetProvider(),
        static CustomIntentSnippetProvider.isDoneButtonEligible(deviceState:intent:siriEnvironment:)(a2, a1)))
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v18 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v18, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v19 = OUTLINED_FUNCTION_164();
    if (OUTLINED_FUNCTION_43_9(v19))
    {
      uint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_57_1();
      *(_WORD *)uint64_t v13 = 0;
      OUTLINED_FUNCTION_47_1( &dword_0,  a3,  (os_log_type_t)a1,  "#CustomIntentExecutionFlow isSkippingWaitForDone - will wait for done; button present",
        v13);
      goto LABEL_12;
    }
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v20 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v20, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v21 = OUTLINED_FUNCTION_164();
    if (OUTLINED_FUNCTION_43_9(v21))
    {
      uint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_57_1();
      *(_WORD *)uint64_t v13 = 0;
      uint64_t v14 = "#CustomIntentExecutionFlow isSkippingWaitForDone - skipping wait for done";
      goto LABEL_11;
    }
  }

uint64_t CustomIntentExecutionFlow.processScreentimeCheckCompletion(guardFlowResult:)(char a1)
{
  uint64_t result = static GuardFlowResult.== infix(_:_:)(a1 & 1, 1LL);
  if ((result & 1) != 0) {
    *(_BYTE *)(v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_appBlockedByScreentime) = 1;
  }
  return result;
}

void *CustomIntentExecutionFlow.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm((void *)((char *)v0
                                                        + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_appPolicyHandler));
  return v0;
}

uint64_t CustomIntentExecutionFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t protocol witness for Flow.on(input:) in conformance CustomIntentExecutionFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 264LL))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance CustomIntentExecutionFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 280LL))();
}

uint64_t protocol witness for Flow.execute() in conformance CustomIntentExecutionFlow(uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 272LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makePromptForTCCAcceptance(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return v7(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance CustomIntentExecutionFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 248LL))();
}

void outlined bridged method (mbnn) of @objc _INPBIntentMetadata.intentId.setter( uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  [a3 setIntentId:v5];
}

uint64_t outlined assign with take of Input?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of CustomIntentExecutionFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CustomIntentExecutionFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of CustomIntentExecutionFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CustomIntentExecutionFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for CustomIntentExecutionFlow(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for CustomIntentExecutionFlow,  (uint64_t)&nominal type descriptor for CustomIntentExecutionFlow);
}

uint64_t partial apply for implicit closure #3 in implicit closure #2 in CustomIntentExecutionFlow.execute()( char a1)
{
  return implicit closure #3 in implicit closure #2 in CustomIntentExecutionFlow.execute()(a1 & 1);
}

uint64_t sub_87D34()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void _s11SiriKitFlow05GuardC6ResultOIegy_ACIegn_TRTA_0(unsigned __int8 *a1)
{
}

void base witness table accessor for Flow in CustomIntentExecutionFlow()
{
}

void base witness table accessor for SiriEnvironmentLocating in CustomIntentExecutionFlow()
{
}

uint64_t ObjC metadata update function for CustomIntentExecutionFlow()
{
  return type metadata accessor for CustomIntentExecutionFlow(0LL);
}

void type metadata completion function for CustomIntentExecutionFlow(uint64_t a1)
{
  v6[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[1] = "(";
  _OWORD v6[2] = "(";
  v6[3] = &unk_182908;
  v6[4] = "(";
  uint64_t v2 = type metadata accessor for CustomIntentExecutionFlow.State(319LL);
  if (v3 <= 0x3F)
  {
    v6[5] = *(void *)(v2 - 8) + 64LL;
    type metadata accessor for Input?(319LL);
    if (v5 <= 0x3F)
    {
      v6[6] = *(void *)(v4 - 8) + 64LL;
      v6[7] = &unk_182920;
      v6[8] = "(";
      swift_updateClassMetadata2(a1, 256LL, 9LL, v6, a1 + 80);
    }
  }

void type metadata accessor for Input?(uint64_t a1)
{
  if (!lazy cache variable for type metadata for Input?)
  {
    uint64_t v2 = type metadata accessor for Input(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Input?);
    }
  }

char *initializeBufferWithCopyOfBuffer for CustomIntentExecutionFlow.State(char *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v13 = *(char **)a2;
    *(void *)a1 = *(void *)a2;
    a1 = &v13[(v6 + 16LL) & ~(unint64_t)v6];
    swift_retain(v13);
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        id v8 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        id v9 = v8;
        id v10 = a1;
        uint64_t v11 = a3;
        uint64_t v12 = 0LL;
        goto LABEL_12;
      case 1u:
        uint64_t v14 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        id v15 = v14;
        id v10 = a1;
        uint64_t v11 = a3;
        uint64_t v12 = 1LL;
        goto LABEL_12;
      case 2u:
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
        (*(void (**)(char *, _BYTE *, uint64_t))(*(void *)(v16 - 8) + 16LL))(a1, a2, v16);
        id v10 = a1;
        uint64_t v11 = a3;
        uint64_t v12 = 2LL;
        goto LABEL_12;
      case 3u:
        uint64_t v17 = *(void *)a2;
        swift_errorRetain(*(void *)a2);
        *(void *)a1 = v17;
        a1[8] = a2[8];
        id v10 = a1;
        uint64_t v11 = a3;
        uint64_t v12 = 3LL;
        goto LABEL_12;
      case 4u:
        uint64_t v18 = *(void **)a2;
        os_log_type_t v19 = (void *)*((void *)a2 + 1);
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = v19;
        id v20 = v18;
        id v21 = v19;
        uint64_t v23 = &a1[v22];
        char v24 = &a2[v22];
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16LL))(v23, v24, v25);
        id v10 = a1;
        uint64_t v11 = a3;
        uint64_t v12 = 4LL;
        goto LABEL_12;
      case 5u:
        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
        (*(void (**)(char *, _BYTE *, uint64_t))(*(void *)(v26 - 8) + 16LL))(a1, a2, v26);
        id v10 = a1;
        uint64_t v11 = a3;
        uint64_t v12 = 5LL;
        goto LABEL_12;
      case 6u:
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
        (*(void (**)(char *, _BYTE *, uint64_t))(*(void *)(v27 - 8) + 16LL))(a1, a2, v27);
        id v10 = a1;
        uint64_t v11 = a3;
        uint64_t v12 = 6LL;
LABEL_12:
        swift_storeEnumTagMultiPayload(v10, v11, v12);
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

void destroy for CustomIntentExecutionFlow.State(id *a1, uint64_t a2)
{
  uint64_t v2 = a1;
  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
    case 1u:

      break;
    case 2u:
    case 5u:
    case 6u:
      goto LABEL_5;
    case 3u:
      swift_errorRelease(*v2);
      break;
    case 4u:

      uint64_t v2 = (id *)((char *)v2
LABEL_5:
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
      (*(void (**)(id *, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
      break;
    default:
      return;
  }

char *initializeWithCopy for CustomIntentExecutionFlow.State(char *a1, _BYTE *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      int v6 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      id v7 = v6;
      id v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 0LL;
      goto LABEL_10;
    case 1u:
      uint64_t v11 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      id v12 = v11;
      id v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 1LL;
      goto LABEL_10;
    case 2u:
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
      (*(void (**)(char *, _BYTE *, uint64_t))(*(void *)(v13 - 8) + 16LL))(a1, a2, v13);
      id v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 2LL;
      goto LABEL_10;
    case 3u:
      uint64_t v14 = *(void **)a2;
      swift_errorRetain(*(void *)a2);
      *(void *)a1 = v14;
      a1[8] = a2[8];
      id v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 3LL;
      goto LABEL_10;
    case 4u:
      id v15 = *(void **)a2;
      uint64_t v16 = (void *)*((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v16;
      id v17 = v15;
      id v18 = v16;
      id v20 = &a1[v19];
      id v21 = &a2[v19];
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16LL))(v20, v21, v22);
      id v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 4LL;
      goto LABEL_10;
    case 5u:
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
      (*(void (**)(char *, _BYTE *, uint64_t))(*(void *)(v23 - 8) + 16LL))(a1, a2, v23);
      id v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 5LL;
      goto LABEL_10;
    case 6u:
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
      (*(void (**)(char *, _BYTE *, uint64_t))(*(void *)(v24 - 8) + 16LL))(a1, a2, v24);
      id v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 6LL;
LABEL_10:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

char *assignWithCopy for CustomIntentExecutionFlow.State(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of CustomIntentExecutionFlow.State((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        int v6 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        id v7 = v6;
        id v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 0LL;
        goto LABEL_11;
      case 1u:
        uint64_t v11 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        id v12 = v11;
        id v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 1LL;
        goto LABEL_11;
      case 2u:
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL))(a1, a2, v13);
        id v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 2LL;
        goto LABEL_11;
      case 3u:
        uint64_t v14 = *(void **)a2;
        swift_errorRetain(*(void *)a2);
        *(void *)a1 = v14;
        a1[8] = a2[8];
        id v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 3LL;
        goto LABEL_11;
      case 4u:
        id v15 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        uint64_t v16 = (void *)*((void *)a2 + 1);
        *((void *)a1 + 1) = v16;
        id v17 = v15;
        id v18 = v16;
        id v20 = &a1[v19];
        id v21 = &a2[v19];
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16LL))(v20, v21, v22);
        id v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 4LL;
        goto LABEL_11;
      case 5u:
        uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16LL))(a1, a2, v23);
        id v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 5LL;
        goto LABEL_11;
      case 6u:
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16LL))(a1, a2, v24);
        id v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 6LL;
LABEL_11:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

_OWORD *initializeWithTake for CustomIntentExecutionFlow.State(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 2u:
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      id v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 2LL;
      goto LABEL_7;
    case 4u:
      *a1 = *a2;
      uint64_t v11 = (char *)a1 + v10;
      id v12 = (char *)a2 + v10;
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32LL))(v11, v12, v13);
      id v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 4LL;
      goto LABEL_7;
    case 5u:
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v14 - 8) + 32LL))(a1, a2, v14);
      id v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 5LL;
      goto LABEL_7;
    case 6u:
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v15 - 8) + 32LL))(a1, a2, v15);
      id v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 6LL;
LABEL_7:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

_OWORD *assignWithTake for CustomIntentExecutionFlow.State(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of CustomIntentExecutionFlow.State((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 2u:
        uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
        id v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 2LL;
        goto LABEL_8;
      case 4u:
        *a1 = *a2;
        uint64_t v11 = (char *)a1 + v10;
        id v12 = (char *)a2 + v10;
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32LL))(v11, v12, v13);
        id v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 4LL;
        goto LABEL_8;
      case 5u:
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v14 - 8) + 32LL))(a1, a2, v14);
        id v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 5LL;
        goto LABEL_8;
      case 6u:
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v15 - 8) + 32LL))(a1, a2, v15);
        id v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 6LL;
LABEL_8:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

void type metadata completion function for CustomIntentExecutionFlow.State(uint64_t a1)
{
  v6[0] = "\b";
  v6[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  type metadata accessor for RCHFlowResult<INIntent, INIntentResponse>(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(v2 - 8) + 64LL;
    _OWORD v6[2] = v4;
    v6[3] = &unk_182958;
    swift_getTupleTypeLayout3( v5,  (char *)&value witness table for Builtin.UnknownObject + 64,  (char *)&value witness table for Builtin.UnknownObject + 64,  v4);
    v6[4] = v5;
    v6[5] = v4;
    v6[6] = v4;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 7LL, v6);
  }

void type metadata accessor for RCHFlowResult<INIntent, INIntentResponse>(uint64_t a1)
{
  if (!lazy cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>)
  {
    uint64_t v2 = type metadata accessor for NSError( 255LL,  (unint64_t *)&lazy cache variable for type metadata for INIntent,  &OBJC_CLASS___INIntent_ptr);
    uint64_t v3 = type metadata accessor for NSError( 255LL,  &lazy cache variable for type metadata for INIntentResponse,  &OBJC_CLASS___INIntentResponse_ptr);
    unint64_t v4 = type metadata accessor for RCHFlowResult(a1, v2, v3);
    if (!v5) {
      atomic_store( v4,  (unint64_t *)&lazy cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
    }
  }

uint64_t outlined init with copy of DeviceState?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeviceState?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

void outlined init with take of Input?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = OUTLINED_FUNCTION_45();
  v4(v3);
  OUTLINED_FUNCTION_1();
}

uint64_t OUTLINED_FUNCTION_7_16(void *a1)
{
  return v1;
}

uint64_t OUTLINED_FUNCTION_8_21()
{
  return swift_task_dealloc(*(void *)(v0 + 352));
}

uint64_t OUTLINED_FUNCTION_10_17(uint64_t a1)
{
  return v1(a1, v3, v2);
}

uint64_t OUTLINED_FUNCTION_13_16(uint64_t a1)
{
  return outlined init with take of CustomIntentExecutionFlow.State(a1, v1);
}

uint64_t OUTLINED_FUNCTION_20_22(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 104LL))(v1, v2, a1);
}

uint64_t OUTLINED_FUNCTION_21_16()
{
  return static ExecuteResponse.complete()();
}

uint64_t OUTLINED_FUNCTION_23_18()
{
  *(_BYTE *)(v1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0;
  return swift_storeEnumTagMultiPayload(v1, v0, 3LL);
}

uint64_t OUTLINED_FUNCTION_26_15(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 3LL);
}

  ;
}

uint64_t OUTLINED_FUNCTION_33_12(uint64_t a1)
{
  return outlined assign with take of CustomIntentExecutionFlow.State(a1, v1);
}

uint64_t OUTLINED_FUNCTION_36_13()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 96))(v0, v1);
}

  ;
}

uint64_t OUTLINED_FUNCTION_41_14()
{
  return type metadata accessor for CustomIntentExecutionFlow.State(0LL);
}

void OUTLINED_FUNCTION_43_11()
{
  *(void *)(v1 - 256) = v0;
}

uint64_t OUTLINED_FUNCTION_44_7()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

void OUTLINED_FUNCTION_46_14()
{
}

uint64_t OUTLINED_FUNCTION_47_13()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_48_11(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 2LL);
}

uint64_t OUTLINED_FUNCTION_50_13()
{
  return outlined assign with take of CustomIntentExecutionFlow.State(v0, v1);
}

uint64_t OUTLINED_FUNCTION_51_15(uint64_t a1)
{
  return swift_storeEnumTagMultiPayload(a1, v1, 6LL);
}

void OUTLINED_FUNCTION_54_14()
{
}

uint64_t OUTLINED_FUNCTION_56_14()
{
  return swift_bridgeObjectRelease(v0);
}

void OUTLINED_FUNCTION_57_11()
{
}

void OUTLINED_FUNCTION_58_11()
{
}

uint64_t OUTLINED_FUNCTION_61_11()
{
  return outlined init with take of CustomIntentExecutionFlow.State(v1, v0);
}

uint64_t OUTLINED_FUNCTION_63_7()
{
  return v0;
}

void OUTLINED_FUNCTION_64_7(uint64_t a1, uint64_t a2)
{
}

void static ShortcutDoneButtonConverter.toShortcutDoneButton(userData:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (!*(void *)(a1 + 16)) {
    goto LABEL_25;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(0x614E746E65746E69LL, 0xEA0000000000656DLL);
  if ((v5 & 1) == 0) {
    goto LABEL_25;
  }
  uint64_t v6 = outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v79);
  OUTLINED_FUNCTION_7_17(0x6144746E65746E69LL, 0xEA00000000006174LL, &v79);
  if (!v80)
  {
    OUTLINED_FUNCTION_20();
LABEL_24:
    outlined destroy of Any?((uint64_t)&v79);
    goto LABEL_25;
  }

  if ((OUTLINED_FUNCTION_0_23(v11, v12, v13, (uint64_t)&type metadata for Data, v14, v15) & 1) == 0)
  {
    OUTLINED_FUNCTION_20();
LABEL_25:
    uint64_t v51 = 0LL;
    unint64_t v52 = 0LL;
    id v18 = 0LL;
    goto LABEL_26;
  }

  NSString v16 = String._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_20();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v18 = (id)INIntentCreate(v16, isa);

  if (!v18)
  {
    OUTLINED_FUNCTION_1_21();
    uint64_t v51 = 0LL;
    unint64_t v52 = 0LL;
LABEL_26:
    id v31 = 0LL;
LABEL_27:
    uint64_t v37 = 0LL;
    goto LABEL_28;
  }

  OUTLINED_FUNCTION_3_27((uint64_t)"intentResponseName", v69, v71, v73, v76, v79);
  if (!v80)
  {
    OUTLINED_FUNCTION_1_21();
LABEL_23:

    goto LABEL_24;
  }

  if ((OUTLINED_FUNCTION_0_23(v19, v20, v21, (uint64_t)&type metadata for String, v22, v23) & 1) == 0)
  {
    OUTLINED_FUNCTION_1_21();
LABEL_30:

    goto LABEL_25;
  }

  OUTLINED_FUNCTION_3_27((uint64_t)"intentResponseData", v70, v72, v74, v77, v79);
  if (!v80)
  {
    OUTLINED_FUNCTION_1_21();
    OUTLINED_FUNCTION_20();
    goto LABEL_23;
  }

  if ((OUTLINED_FUNCTION_0_23(v24, v25, v26, (uint64_t)&type metadata for Data, v27, v28) & 1) == 0)
  {
    OUTLINED_FUNCTION_1_21();
    OUTLINED_FUNCTION_20();
    goto LABEL_30;
  }

  NSString v29 = String._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_20();
  Class v30 = Data._bridgeToObjectiveC()().super.isa;
  id v31 = (id)INIntentResponseCreate(v29, v30);

  if (!v31)
  {
    OUTLINED_FUNCTION_1_21();

    outlined consume of Data._Representation(v75, v78);
    uint64_t v51 = 0LL;
    unint64_t v52 = 0LL;
    id v18 = 0LL;
    goto LABEL_27;
  }

  OUTLINED_FUNCTION_7_17(0x6449707061LL, 0xE500000000000000LL, &v79);
  if (!v80)
  {
    OUTLINED_FUNCTION_1_21();

    OUTLINED_FUNCTION_6_20(v53, v54, v55, v56, v57, v58, v59, v60, v75, v78);
    goto LABEL_24;
  }

  if ((OUTLINED_FUNCTION_0_23(v32, v33, v34, (uint64_t)&type metadata for String, v35, v36) & 1) == 0)
  {
    OUTLINED_FUNCTION_1_21();

    OUTLINED_FUNCTION_6_20(v61, v62, v63, v64, v65, v66, v67, v68, v75, v78);
    goto LABEL_25;
  }

  type metadata accessor for App(0LL);
  uint64_t v37 = App.__allocating_init(appIdentifier:)(v75, v78);
  OUTLINED_FUNCTION_7_17(0x776F6C666B726F77LL, 0xEC000000656D614ELL, &v79);
  uint64_t v38 = OUTLINED_FUNCTION_1_21();
  uint64_t v46 = OUTLINED_FUNCTION_6_20(v38, v39, v40, v41, v42, v43, v44, v45, v75, v78);
  if (!v80)
  {
    outlined destroy of Any?((uint64_t)&v79);
    goto LABEL_35;
  }

  if ((OUTLINED_FUNCTION_0_23(v46, v47, v48, (uint64_t)&type metadata for String, v49, v50) & 1) == 0)
  {
LABEL_35:
    uint64_t v51 = 0LL;
    unint64_t v52 = 0LL;
    goto LABEL_28;
  }

  uint64_t v51 = v75;
  unint64_t v52 = v78;
LABEL_28:
  *a2 = v51;
  a2[1] = v52;
  a2[2] = (uint64_t)v18;
  a2[3] = (uint64_t)v31;
  a2[4] = v37;
}

id static ShortcutDoneButtonConverter.toUserData(shortcutDoneButton:)(uint64_t *a1)
{
  uint64_t v54 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  uint64_t v5 = a1[1];
  if (v5)
  {
    uint64_t v6 = *a1;
    *((void *)&v53 + 1) = &type metadata for String;
    *(void *)&__int128 v52 = v6;
    *((void *)&v52 + 1) = v5;
    swift_bridgeObjectRetain(v5);
    specialized Dictionary.subscript.setter((uint64_t)&v52);
  }

  uint64_t v7 = (void *)a1[3];
  id v8 = (id)a1[2];
  id v9 = v7;
  outlined bridged method (ob) of @objc PBCodable.data.getter([v8 backingStore]);
  if (v10 >> 60 != 15)
  {
    id v11 = OUTLINED_FUNCTION_5_20();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_9_17();
    *((void *)&v53 + 1) = &type metadata for String;
    *((void *)&v52 + 1) = v3;
    uint64_t v19 = OUTLINED_FUNCTION_8_22( v12,  v13,  0xEA0000000000656DLL,  v14,  v15,  v16,  v17,  v18,  (uint64_t)&type metadata for String);
    uint64_t v20 = specialized Dictionary.subscript.setter((uint64_t)v19);
    *((void *)&v53 + 1) = &type metadata for Data;
    *((void *)&v52 + 1) = v2;
    uint64_t v28 = OUTLINED_FUNCTION_8_22(v20, v21, v22, v23, v24, v25, v26, v27, v1);
    specialized Dictionary.subscript.setter((uint64_t)v28);
  }

  id result = objc_msgSend(v9, "backingStore", v52);
  if (result)
  {
    outlined bridged method (ob) of @objc PBCodable.data.getter(result);
    if (v30 >> 60 != 15)
    {
      id v31 = OUTLINED_FUNCTION_5_20();
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_9_17();
      *(void *)&__int128 v52 = &type metadata for String;
      *((void *)&v52 + 1) = v3;
      swift_bridgeObjectRetain(v3);
      v32._countAndFlagsBits = 0x65736E6F70736552LL;
      v32._object = (void *)0xE800000000000000LL;
      String.append(_:)(v32);
      uint64_t v33 = swift_bridgeObjectRelease(v3);
      *((void *)&v53 + 1) = &type metadata for String;
      uint64_t v41 = OUTLINED_FUNCTION_2_21(v33, v34, v35, v36, v37, v38, v39, v40, v52);
      *((void *)&v53 + 1) = &type metadata for Data;
      *((void *)&v52 + 1) = v2;
      OUTLINED_FUNCTION_2_21(v41, v42, v43, v44, v45, v46, v47, v48, v1);
    }

    uint64_t v49 = swift_retain(a1[4]);
    uint64_t v50 = App.appIdentifier.getter(v49);
    if (v51)
    {
      *((void *)&v53 + 1) = &type metadata for String;
      *(void *)&__int128 v52 = v50;
      *((void *)&v52 + 1) = v51;
    }

    else
    {
      __int128 v52 = 0u;
      __int128 v53 = 0u;
    }

    specialized Dictionary.subscript.setter((uint64_t)&v52);

    swift_release();
    return (id)v54;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t ShortcutDoneButton.app.getter()
{
  return swift_retain(*(void *)(v0 + 32));
}

uint64_t outlined bridged method (ob) of @objc PBCodable.data.getter(void *a1)
{
  id v2 = [a1 data];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t destroy for ShortcutDoneButton(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 32));
}

void *initializeWithCopy for ShortcutDoneButton(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  unint64_t v4 = (void *)a2[2];
  uint64_t v5 = (void *)a2[3];
  a1[2] = v4;
  a1[3] = v5;
  uint64_t v6 = a2[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v3);
  id v7 = v4;
  id v8 = v5;
  swift_retain(v6);
  return a1;
}

void *assignWithCopy for ShortcutDoneButton(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = (void *)a2[2];
  id v7 = (void *)a1[2];
  a1[2] = v6;
  id v8 = v6;

  id v9 = (void *)a2[3];
  unint64_t v10 = (void *)a1[3];
  a1[3] = v9;
  id v11 = v9;

  uint64_t v12 = a2[4];
  uint64_t v13 = a1[4];
  a1[4] = v12;
  swift_retain(v12);
  swift_release(v13);
  return a1;
}

uint64_t assignWithTake for ShortcutDoneButton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease(*(void *)(a1 + 8));
  uint64_t v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = *(_OWORD *)(a2 + 8);

  uint64_t v5 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShortcutDoneButton(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShortcutDoneButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)id result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ShortcutDoneButton()
{
  return &type metadata for ShortcutDoneButton;
}

ValueMetadata *type metadata accessor for ShortcutDoneButtonConverter()
{
  return &type metadata for ShortcutDoneButtonConverter;
}

uint64_t OUTLINED_FUNCTION_0_23(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  return swift_dynamicCast((uint64_t *)va, va1, v6 + 8, a4, 6LL);
}

uint64_t OUTLINED_FUNCTION_1_21()
{
  return outlined consume of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_2_21( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return specialized Dictionary.subscript.setter((uint64_t)&a9);
}

void OUTLINED_FUNCTION_3_27(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 a6)
{
}

id OUTLINED_FUNCTION_5_20()
{
  return [v1 *(SEL *)(v0 + 64)];
}

uint64_t OUTLINED_FUNCTION_6_20( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  return outlined consume of Data._Representation(v10, a10);
}

void OUTLINED_FUNCTION_7_17(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
}

uint64_t *OUTLINED_FUNCTION_8_22( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

void OUTLINED_FUNCTION_9_17()
{
}

uint64_t LinkActivityManager.__allocating_init(bundleId:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject(v2, 32LL, 7LL);
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t LinkActivityManager.init(bundleId:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t LinkActivityManager.sessionIDString()()
{
  return LinkActivityManager.sessionIDString()(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8), v0, 0LL, 0LL);
}

uint64_t LinkActivityManager.sessionIDString()( uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

uint64_t WFDialogState.deinit()
{
  return v0;
}

uint64_t LinkActivityManager.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for LinkActivityManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin19LinkActivityManager);
}

Swift::String __swiftcall LNConfirmationActionName.toIntentVerb()()
{
  uint64_t v1 = (char *)[v0 type] - 3;
  uint64_t v2 = (void *)0xE200000000000000LL;
  uint64_t v3 = 28516LL;
  switch((unint64_t)v1)
  {
    case 0uLL:
      break;
    case 1uLL:
      uint64_t v2 = (void *)0xE300000000000000LL;
      uint64_t v3 = 7239026LL;
      break;
    case 2uLL:
      uint64_t v3 = 28519LL;
      break;
    case 3uLL:
      uint64_t v2 = (void *)0xE400000000000000LL;
      uint64_t v3 = 2003134838LL;
      break;
    case 4uLL:
      uint64_t v2 = (void *)0xE400000000000000LL;
      uint64_t v3 = 1852141679LL;
      break;
    case 5uLL:
      uint64_t v2 = (void *)0xE500000000000000LL;
      uint64_t v3 = 0x726564726FLL;
      break;
    case 6uLL:
      uint64_t v2 = (void *)0xE400000000000000LL;
      uint64_t v3 = 1802465122LL;
      break;
    case 7uLL:
      uint64_t v2 = (void *)0xE300000000000000LL;
      unsigned __int16 v4 = 24944;
      goto LABEL_11;
    case 8uLL:
      uint64_t v2 = (void *)0xE300000000000000LL;
      unsigned __int16 v4 = 30050;
LABEL_11:
      uint64_t v3 = v4 | 0x790000u;
      break;
    case 9uLL:
      uint64_t v2 = (void *)0xE700000000000000LL;
      uint64_t v3 = 0x74736575716572LL;
      break;
    case 0xAuLL:
      uint64_t v2 = (void *)0xEF6E6F6974616769LL;
      uint64_t v3 = 0x76616E7472617473LL;
      break;
    case 0xBuLL:
      uint64_t v2 = (void *)0xE500000000000000LL;
      uint64_t v3 = 0x6572616873LL;
      break;
    case 0xCuLL:
      uint64_t v2 = (void *)0xE400000000000000LL;
      uint64_t v3 = 1953722224LL;
      break;
    case 0xDuLL:
      uint64_t v2 = (void *)0xE400000000000000LL;
      uint64_t v3 = 1684956531LL;
      break;
    case 0xEuLL:
      uint64_t v2 = (void *)0xE600000000000000LL;
      uint64_t v3 = 0x657461657263LL;
      break;
    case 0xFuLL:
      uint64_t v2 = (void *)0xE300000000000000LL;
      uint64_t v3 = 6579297LL;
      break;
    case 0x10uLL:
      uint64_t v2 = (void *)0xE600000000000000LL;
      uint64_t v3 = 0x686372616573LL;
      break;
    case 0x11uLL:
      uint64_t v3 = 1684957542LL;
      uint64_t v2 = (void *)0xE400000000000000LL;
      break;
    case 0x12uLL:
      uint64_t v2 = (void *)0xE600000000000000LL;
      uint64_t v3 = 0x7265746C6966LL;
      break;
    case 0x13uLL:
      uint64_t v2 = (void *)0xE600000000000000LL;
      uint64_t v3 = 0x656C67676F74LL;
      break;
    case 0x14uLL:
      uint64_t v2 = (void *)0xE700000000000000LL;
      uint64_t v5 = 0x6F206E727574LL;
      goto LABEL_29;
    case 0x15uLL:
      uint64_t v2 = (void *)0xE800000000000000LL;
      uint64_t v3 = 0x66666F206E727574LL;
      break;
    case 0x16uLL:
      uint64_t v3 = 7628147LL;
      uint64_t v2 = (void *)0xE300000000000000LL;
      break;
    case 0x17uLL:
      uint64_t v2 = (void *)0xE800000000000000LL;
      uint64_t v3 = 0x64616F6C6E776F64LL;
      break;
    case 0x18uLL:
      uint64_t v2 = (void *)0xE300000000000000LL;
      uint64_t v3 = 7628135LL;
      break;
    case 0x19uLL:
      uint64_t v2 = (void *)0xE700000000000000LL;
      uint64_t v5 = 0x696B63656863LL;
LABEL_29:
      uint64_t v3 = v5 & 0xFFFFFFFFFFFFLL | 0x6E000000000000LL;
      break;
    case 0x1AuLL:
      uint64_t v2 = (void *)0xE300000000000000LL;
      uint64_t v3 = 6778732LL;
      break;
    case 0x1BuLL:
      uint64_t v2 = (void *)0xE700000000000000LL;
      uint64_t v3 = 0x61746164646461LL;
      break;
    case 0x1CuLL:
      uint64_t v2 = (void *)0xE400000000000000LL;
      uint64_t v3 = 1819042147LL;
      break;
    case 0x1DuLL:
      uint64_t v2 = (void *)0xE400000000000000LL;
      uint64_t v3 = 2036427888LL;
      break;
    case 0x1EuLL:
      uint64_t v2 = (void *)0xEA0000000000646ELL;
      uint64_t v3 = 0x756F732079616C70LL;
      break;
    default:
      uint64_t v3 = 0LL;
      uint64_t v2 = (void *)0xE000000000000000LL;
      break;
  }

  result._object = v2;
  result._countAndFlagsBits = v3;
  return result;
}

void WFRunVoiceShortcutFlow.__allocating_init(deviceState:appPolicyHandler:)(uint64_t a1, void *a2)
{
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance WFRunVoiceShortcutFlowError()
{
  return EnablementMode.hashValue.getter(*v0);
}

void WFRunVoiceShortcutFlowError.hashValue.getter(unsigned __int8 a1)
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance WFRunVoiceShortcutFlowError( uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  Hasher._combine(_:)(v2);
  Hasher._finalize()();
  OUTLINED_FUNCTION_23_8();
}

uint64_t ShortcutIdentification.getIdentifyingName(vcClient:)(void *a1)
{
  Swift::UInt v2 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to specialized ShortcutIdentification.getIdentifyingName(vcClient:));
  *(void *)(v1 + 16) = v2;
  *Swift::UInt v2 = v1;
  v2[1] = ShortcutIdentification.getIdentifyingName(vcClient:);
  OUTLINED_FUNCTION_75_6();
  return v4();
}

uint64_t ShortcutIdentification.getIdentifyingName(vcClient:)()
{
  uint64_t v0 = OUTLINED_FUNCTION_52_11();
  return v1(v0);
}

void WFRunVoiceShortcutFlow.init(deviceState:appPolicyHandler:)(uint64_t a1, void *a2)
{
}

uint64_t WFRunVoiceShortcutFlow.on(input:)(uint64_t a1)
{
  uint64_t v106 = type metadata accessor for VoiceCommandsNLIntent(0LL);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_83();
  uint64_t v105 = v3;
  uint64_t v4 = OUTLINED_FUNCTION_49_13();
  uint64_t v5 = type metadata accessor for NLIntent(v4);
  uint64_t v103 = *(void *)(v5 - 8);
  uint64_t v104 = v5;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_83();
  uint64_t v102 = v7;
  uint64_t v8 = OUTLINED_FUNCTION_49_13();
  uint64_t v9 = type metadata accessor for WFRunVoiceShortcutFlow.State(v8);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_35();
  uint64_t v13 = (uint64_t *)(v12 - v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VoiceCommandTask?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_35();
  uint64_t v17 = v16 - v15;
  uint64_t v101 = type metadata accessor for ShortcutIdentification(0LL);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_83();
  uint64_t v96 = v19;
  uint64_t v20 = OUTLINED_FUNCTION_49_13();
  uint64_t v21 = type metadata accessor for Siri_Nlu_External_UserParse(v20);
  uint64_t v98 = *(void *)(v21 - 8);
  uint64_t v99 = v21;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v22);
  OUTLINED_FUNCTION_83();
  uint64_t v97 = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_15();
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v100 = (uint64_t)&v92 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25);
  uint64_t v112 = (char *)&v92 - v27;
  uint64_t v28 = OUTLINED_FUNCTION_49_13();
  uint64_t v113 = type metadata accessor for USOParse(v28);
  uint64_t v111 = *(void *)(v113 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v29);
  OUTLINED_FUNCTION_83();
  uint64_t v110 = v30;
  uint64_t v31 = OUTLINED_FUNCTION_49_13();
  uint64_t v32 = type metadata accessor for Parse(v31);
  uint64_t v108 = *(void *)(v32 - 8);
  uint64_t v109 = v32;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v33);
  OUTLINED_FUNCTION_35();
  uint64_t v36 = v35 - v34;
  uint64_t v37 = type metadata accessor for Input(0LL);
  uint64_t v38 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  OUTLINED_FUNCTION_35();
  uint64_t v41 = v40 - v39;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v42 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v42, (uint64_t)static Logger.voiceCommands);
  uint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 16);
  uint64_t v114 = a1;
  uint64_t v44 = OUTLINED_FUNCTION_81_4(v41, a1, v43);
  uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
  os_log_type_t v46 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = OUTLINED_FUNCTION_38(12LL);
    uint64_t v92 = v36;
    uint64_t v48 = (uint8_t *)v47;
    uint64_t v49 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v93 = v17;
    uint64_t v50 = v49;
    v116[0] = v49;
    uint64_t v94 = v9;
    *(_DWORD *)uint64_t v48 = 136315138;
    uint64_t v95 = v13;
    uint64_t v51 = Input.description.getter();
    uint64_t v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, v116);
    uint64_t v13 = v95;
    uint64_t v9 = v94;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, v116, v48 + 4);
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_53_12();
    _os_log_impl(&dword_0, v45, v46, "#WFRunVoiceShortcutFlow on input: %s", v48, 0xCu);
    OUTLINED_FUNCTION_30_3(v50, v53, (uint64_t)&type metadata for Any + 8);
    uint64_t v54 = v50;
    uint64_t v17 = v93;
    OUTLINED_FUNCTION_1_0(v54);
    uint64_t v55 = (uint64_t)v48;
    uint64_t v36 = v92;
    OUTLINED_FUNCTION_1_0(v55);
  }

  else
  {
    OUTLINED_FUNCTION_53_12();
  }

  uint64_t v56 = (uint64_t)v112;
  Input.parse.getter(v57);
  uint64_t v58 = v108;
  int v59 = (*(uint64_t (**)(uint64_t, uint64_t))(v108 + 88))(v36, v109);
  uint64_t v60 = v113;
  uint64_t v62 = v110;
  uint64_t v61 = v111;
  if (v59 == enum case for Parse.NLv3IntentOnly(_:))
  {
    OUTLINED_FUNCTION_40_15(*(uint64_t (**)(uint64_t, uint64_t))(v58 + 96));
    uint64_t v64 = v102;
    uint64_t v63 = v103;
    uint64_t v65 = v104;
    OUTLINED_FUNCTION_81_4(v102, v36, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v103 + 32));
    uint64_t v66 = v105;
    OUTLINED_FUNCTION_81_4(v105, v64, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 16));
    if (one-time initialization token for voiceCommandNameNode != -1) {
      swift_once( &one-time initialization token for voiceCommandNameNode,  one-time initialization function for voiceCommandNameNode);
    }
    uint64_t v67 = static VoiceCommandsNLIntent.voiceCommandNameNode;
    lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent,  type metadata accessor for VoiceCommandsNLIntent,  (uint64_t)&protocol conformance descriptor for VoiceCommandsNLIntent);
    IntentNodeTraversable.value<A>(forNode:)(v67, v106, v68);
    uint64_t v70 = v116[0];
    uint64_t v69 = v116[1];
    outlined destroy of AutoShortcutInvocation(v66, type metadata accessor for VoiceCommandsNLIntent);
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v64, v65);
    if (!v69)
    {
      uint64_t v71 = v13;
      uint64_t v72 = v9;
      uint64_t v73 = 4LL;
      goto LABEL_17;
    }

    *uint64_t v13 = v70;
    v13[1] = v69;
    swift_storeEnumTagMultiPayload(v13, v101, 0LL);
LABEL_11:
    uint64_t v71 = v13;
    uint64_t v72 = v9;
    uint64_t v73 = 0LL;
LABEL_17:
    swift_storeEnumTagMultiPayload(v71, v72, v73);
    uint64_t v85 = v107 + OBJC_IVAR____TtC18SiriLinkFlowPlugin22WFRunVoiceShortcutFlow_state;
    OUTLINED_FUNCTION_15_6(v107 + OBJC_IVAR____TtC18SiriLinkFlowPlugin22WFRunVoiceShortcutFlow_state, (uint64_t)v116);
    outlined assign with take of WFRunVoiceShortcutFlow.State((uint64_t)v13, v85);
    swift_endAccess(v116);
    return 1LL;
  }

  if (v59 == enum case for Parse.uso(_:))
  {
    OUTLINED_FUNCTION_40_15(*(uint64_t (**)(uint64_t, uint64_t))(v58 + 96));
    uint64_t v74 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 32))(v62, v36, v60);
    uint64_t v75 = USOParse.userParse.getter(v74);
    uint64_t v76 = Siri_Nlu_External_UserParse.userDialogActs.getter(v75);
    OUTLINED_FUNCTION_12_3(v98);
    specialized Collection.first.getter(v76, v56);
    swift_bridgeObjectRelease(v76);
    uint64_t v77 = v100;
    outlined init with copy of Siri_Nlu_External_UserDialogAct?( v56,  v100,  &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    uint64_t v78 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
    if (__swift_getEnumTagSinglePayload(v77, 1LL, v78) == 1)
    {
      outlined destroy of Result<Output, Error>( v56,  &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      OUTLINED_FUNCTION_61_12();
      outlined destroy of Result<Output, Error>( v77,  &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      uint64_t v79 = type metadata accessor for VoiceCommandTask(0LL);
      __swift_storeEnumTagSinglePayload(v17, 1LL, 1LL, v79);
LABEL_19:
      outlined destroy of Result<Output, Error>(v17, &demangling cache variable for type metadata for VoiceCommandTask?);
      return 0LL;
    }

    Siri_Nlu_External_UserDialogAct.convertToVoiceCommandTask()();
    outlined destroy of Result<Output, Error>( v56,  &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    OUTLINED_FUNCTION_61_12();
    OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v78 - 8) + 8LL));
    uint64_t v87 = type metadata accessor for VoiceCommandTask(0LL);
    if (OUTLINED_FUNCTION_79_2(v17) != 1)
    {
      uint64_t v88 = v96;
      OUTLINED_FUNCTION_75_6();
      outlined init with take of VoiceCommandTask(v89, v90, v91);
      outlined init with take of VoiceCommandTask(v88, (uint64_t)v13, type metadata accessor for ShortcutIdentification);
      goto LABEL_11;
    }

    outlined destroy of AutoShortcutInvocation(v17, type metadata accessor for VoiceCommandTask);
  }

  else
  {
    unint64_t v80 = lazy protocol witness table accessor for type WFRunVoiceShortcutFlowError and conformance WFRunVoiceShortcutFlowError();
    uint64_t v81 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for WFRunVoiceShortcutFlowError, v80);
    *uint64_t v82 = 0;
    *uint64_t v13 = v81;
    swift_storeEnumTagMultiPayload(v13, v9, 2LL);
    uint64_t v83 = v58;
    uint64_t v84 = v107 + OBJC_IVAR____TtC18SiriLinkFlowPlugin22WFRunVoiceShortcutFlow_state;
    OUTLINED_FUNCTION_15_6(v107 + OBJC_IVAR____TtC18SiriLinkFlowPlugin22WFRunVoiceShortcutFlow_state, (uint64_t)v116);
    outlined assign with take of WFRunVoiceShortcutFlow.State((uint64_t)v13, v84);
    swift_endAccess(v116);
    OUTLINED_FUNCTION_40_15(*(uint64_t (**)(uint64_t, uint64_t))(v83 + 8));
  }

  return 0LL;
}

uint64_t WFRunVoiceShortcutFlow.execute()(uint64_t a1)
{
  v2[53] = a1;
  v2[54] = v1;
  uint64_t v3 = type metadata accessor for DateTimeResolver(0LL);
  v2[55] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[56] = v4;
  v2[57] = OUTLINED_FUNCTION_4_0(v4);
  v2[58] = OUTLINED_FUNCTION_11_0();
  uint64_t v5 = type metadata accessor for CATOption(0LL);
  v2[59] = OUTLINED_FUNCTION_9_0(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for ShortcutIdentification(0LL);
  v2[60] = OUTLINED_FUNCTION_9_0(*(void *)(v6 - 8));
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  v2[61] = OUTLINED_FUNCTION_4_0(*(void *)(v7 - 8));
  v2[62] = OUTLINED_FUNCTION_11_0();
  v2[63] = OUTLINED_FUNCTION_11_0();
  v2[64] = OUTLINED_FUNCTION_11_0();
  uint64_t v8 = OUTLINED_FUNCTION_48();
  v2[65] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[66] = v9;
  v2[67] = OUTLINED_FUNCTION_4_0(v9);
  v2[68] = OUTLINED_FUNCTION_11_0();
  uint64_t v10 = type metadata accessor for WFRunVoiceShortcutFlow.State(0LL);
  v2[69] = v10;
  v2[70] = OUTLINED_FUNCTION_4_0(*(void *)(v10 - 8));
  v2[71] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  static OutputPublisherFactory.makeOutputPublisherAsync()(v1 + 11, a1);
  uint64_t v2 = v1[15];
  __swift_project_boxed_opaque_existential_1(v1 + 11, v1[14]);
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  v1[79] = v3;
  *uint64_t v3 = v1;
  v3[1] = WFRunVoiceShortcutFlow.execute();
  uint64_t v4 = OUTLINED_FUNCTION_129();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v4, v5, v2);
}

void WFRunVoiceShortcutFlow.execute()()
{
  uint64_t v1 = v0[71];
  uint64_t v2 = v0[69];
  uint64_t v3 = v0[54];
  uint64_t v4 = OBJC_IVAR____TtC18SiriLinkFlowPlugin22WFRunVoiceShortcutFlow_state;
  v0[72] = OBJC_IVAR____TtC18SiriLinkFlowPlugin22WFRunVoiceShortcutFlow_state;
  uint64_t v5 = v3 + v4;
  swift_beginAccess(v3 + v4, v0 + 35, 0LL, 0LL);
  OUTLINED_FUNCTION_74_6(v5, v6, type metadata accessor for WFRunVoiceShortcutFlow.State);
  uint64_t v7 = (char *)sub_8A288 + 4 * byte_182A50[swift_getEnumCaseMultiPayload(v1, v2)];
  __asm { BR              X10 }

uint64_t sub_8A288()
{
  uint64_t v1 = v0[71];
  uint64_t v2 = v0[54];
  v0[49] = WFRunVoiceShortcutFlow.makeGuardFlows()();
  uint64_t v3 = OUTLINED_FUNCTION_19((uint64_t)&unk_1F6AB0, 32LL);
  *(void *)(v3 + 16) = partial apply for implicit closure #2 in implicit closure #1 in WFRunVoiceShortcutFlow.execute();
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = type metadata accessor for GuardFlow(0LL);
  swift_retain(v2);
  static ExecuteResponse.ongoing<A>(next:childCompletion:)( v0 + 49,  _s11SiriKitFlow05GuardC6ResultOIegy_ACIegn_TRTA_0,  v3,  v4,  &protocol witness table for GuardFlow);
  swift_release();
  swift_release();
  outlined destroy of AutoShortcutInvocation(v1, type metadata accessor for ShortcutIdentification);
  uint64_t v5 = OUTLINED_FUNCTION_24_16();
  uint64_t v15 = v7;
  uint64_t v16 = v6;
  swift_task_dealloc(v5);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_20_2();
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  OUTLINED_FUNCTION_29_1();
  return v8(v8, v9, v10, v11, v12, v13);
}

uint64_t WFRunVoiceShortcutFlow.execute()()
{
  *(void *)(v1 + 600) = v0;
  *(void *)(v1 + 60__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v2;
  OUTLINED_FUNCTION_54_0(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  void *v0;
  uint64_t v1;
  os_log_type_t v2;
  _WORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  objc_class *v17;
  char *v18;
  id v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[2];
  uint64_t v42;
  void v43[5];
  void v44[5];
  void v45[6];
  if (*(void *)(v1 + 608))
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    __swift_project_value_buffer(*(void *)(v1 + 520), (uint64_t)static Logger.voiceCommands);
    OUTLINED_FUNCTION_9_5();
    uint64_t v2 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_45_0(v2))
    {
      uint64_t v3 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      *uint64_t v3 = 0;
      OUTLINED_FUNCTION_27_0( &dword_0,  v4,  v5,  "#WFRunVoiceShortcutFlow has shortcut name, moving onto WorkflowRunnerFlow");
      OUTLINED_FUNCTION_1_0((uint64_t)v3);
    }

    uint64_t v37 = *(_OWORD *)(v1 + 600);

    *(_OWORD *)(v1 + 16) = v37;
    *(_OWORD *)(v1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
    *(_OWORD *)(v1 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_BYTE *)(v1 + 80) = 0;
    uint64_t v42 = 0LL;
    memset(v41, 0, sizeof(v41));
    if (one-time initialization token for shared != -1) {
      swift_once(&one-time initialization token for shared, one-time initialization function for shared);
    }
    uint64_t v6 = *(void *)(v1 + 472);
    uint64_t v7 = *(void *)(v1 + 456);
    uint64_t v8 = *(void *)(v1 + 464);
    uint64_t v9 = *(void *)(v1 + 448);
    uint64_t v35 = *(void *)(v1 + 440);
    uint64_t v38 = *(void *)(v1 + 480);
    uint64_t v36 = static WFDialogState.shared;
    swift_retain(static WFDialogState.shared);
    uint64_t v10 = static AceService.currentAsync.getter(v43);
    uint64_t v11 = static Device.current.getter(v44, v10);
    static OutputPublisherFactory.makeOutputPublisherAsync()(v45, v11);
    type metadata accessor for RunCustomIntentCATs(0LL);
    OUTLINED_FUNCTION_59();
    uint64_t v34 = OUTLINED_FUNCTION_41_15();
    type metadata accessor for RunVoiceCommandCATs(0LL);
    OUTLINED_FUNCTION_59();
    uint64_t v33 = OUTLINED_FUNCTION_41_15();
    type metadata accessor for RunVoiceCommandCATsSimple(0LL);
    OUTLINED_FUNCTION_59();
    uint64_t v12 = CATWrapperSimple.__allocating_init(options:globals:)(v6, 0LL);
    type metadata accessor for WorkflowRunnerCATPatternsExecutor(0LL);
    OUTLINED_FUNCTION_59();
    uint64_t v13 = OUTLINED_FUNCTION_41_15();
    static AceService.currentAsync.getter((void *)(v1 + 168));
    uint64_t v14 = type metadata accessor for LocationProvider();
    uint64_t v15 = OUTLINED_FUNCTION_19(v14, 64LL);
    *(void *)(v15 + 16) = 0x3FA999999999999ALL;
    uint64_t v16 = outlined init with take of AceServiceInvokerAsync((__int128 *)(v1 + 168), v15 + 24);
    DateTimeResolver.init()(v16);
    uint64_t v17 = (objc_class *)type metadata accessor for WorkflowRunnerFlow(0LL);
    uint64_t v18 = (char *)objc_allocWithZone(v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v8, v35);
    swift_retain(v15);
    uint64_t v19 = specialized WorkflowRunnerFlow.init(workflowRunnerInput:workflowRunner:dialogState:aceServiceInvoker:deviceState:outputPublisher:runCustomCatWrapper:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:locationGuardFlowProvider:locationProvider:dateTimeResolver:linkRCHFlowFactory:)( (const void *)(v1 + 16),  (uint64_t)v41,  v36,  (uint64_t)v43,  (uint64_t)v44,  (uint64_t)v45,  v34,  v33,  v12,  v13,  (uint64_t)closure #1 in variable initialization expression of static SLFLocationAccessGuardProvider.makeGuardFlow,  0LL,  v15,  v7,  (uint64_t)closure #1 in variable initialization expression of LinkRCHFlowFactory.getFlow,  0LL,  v18);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v35);
    swift_release();
    *(void *)(v1 + 384) = v19;
    lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type WorkflowRunnerFlow and conformance WorkflowRunnerFlow,  type metadata accessor for WorkflowRunnerFlow,  (uint64_t)&protocol conformance descriptor for WorkflowRunnerFlow);
    static ExecuteResponse.complete<A>(next:)(v1 + 384, v17, v20);
    outlined destroy of AutoShortcutInvocation(v38, type metadata accessor for ShortcutIdentification);
  }

  else
  {
    uint64_t v21 = *(uint64_t **)(v1 + 560);
    uint64_t v22 = *(void *)(v1 + 480);
    uint64_t v23 = *(void *)(v1 + 432) + *(void *)(v1 + 576);
    uint64_t v24 = lazy protocol witness table accessor for type WFRunVoiceShortcutFlowError and conformance WFRunVoiceShortcutFlowError();
    uint64_t v25 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for WFRunVoiceShortcutFlowError, v24);
    *uint64_t v26 = 4;
    char *v21 = v25;
    uint64_t v27 = OUTLINED_FUNCTION_129();
    swift_storeEnumTagMultiPayload(v27, v28, 2LL);
    OUTLINED_FUNCTION_15_6(v23, v1 + 232);
    outlined assign with take of WFRunVoiceShortcutFlow.State((uint64_t)v21, v23);
    swift_endAccess(v1 + 232);
    OUTLINED_FUNCTION_83_1();
    outlined destroy of AutoShortcutInvocation(v22, type metadata accessor for ShortcutIdentification);
  }

  uint64_t v29 = OUTLINED_FUNCTION_24_16();
  uint64_t v39 = v31;
  uint64_t v40 = v30;
  swift_task_dealloc(v29);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_20_2();
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 624) = v0;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 640) = v0;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

#error "8AFC0: call analysis failed (funcsize=45)"
#error "8B058: call analysis failed (funcsize=37)"
#error "8B104: call analysis failed (funcsize=42)"
uint64_t WFRunVoiceShortcutFlow.makeGuardFlows()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10[2];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  outlined init with copy of AppShortcutInvoking(v0 + 72, (uint64_t)&v11);
  static Device.current.getter(v10, v1);
  uint64_t v2 = type metadata accessor for WFScreentimeCheckFlowStrategy();
  swift_allocObject(v2, 112LL, 7LL);
  uint64_t v3 = WFScreentimeCheckFlowStrategy.init(appPolicyHandler:bundleId:deviceState:)( &v11,  0xD000000000000013LL,  0x80000000001920C0LL,  v10);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CommonFlowGuard>);
  uint64_t v5 = *(void *)(type metadata accessor for CommonFlowGuard(0LL) - 8);
  uint64_t v6 = swift_allocObject( v4,  ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
       + 2LL * *(void *)(v5 + 72),
         *(unsigned __int8 *)(v5 + 80) | 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_17E660;
  static CommonFlowGuard.disallowInSharingMode.getter();
  uint64_t v12 = v2;
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( (unint64_t *)&lazy protocol witness table cache variable for type WFScreentimeCheckFlowStrategy and conformance WFScreentimeCheckFlowStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for WFScreentimeCheckFlowStrategy,  (uint64_t)")G\a");
  uint64_t v13 = v7;
  *(void *)&uint64_t v11 = v3;
  swift_retain(v3);
  static CommonFlowGuard.ensuringAppIsPermittedByScreentime(using:)(&v11);
  __swift_destroy_boxed_opaque_existential_1Tm(&v11);
  uint64_t v8 = static CommonGuardFlowUtils.makeGuardFlow(withGuards:)(v6);
  swift_bridgeObjectRelease(v6);
  swift_release();
  return v8;
}

uint64_t implicit closure #2 in implicit closure #1 in WFRunVoiceShortcutFlow.execute()(char a1)
{
  return WFRunVoiceShortcutFlow.onGuardFlowsFinished(exitValue:)(a1 & 1);
}

uint64_t WFRunVoiceShortcutFlow.onGuardFlowsFinished(exitValue:)(char a1)
{
  uint64_t v3 = type metadata accessor for WFRunVoiceShortcutFlow.State(0LL);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)&v33[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v4);
  uint64_t v8 = &v33[-v7];
  uint64_t v9 = type metadata accessor for ShortcutIdentification(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = &v33[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin22WFRunVoiceShortcutFlow_state;
  swift_beginAccess(v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin22WFRunVoiceShortcutFlow_state, v34, 0LL, 0LL);
  outlined init with copy of AutoShortcutInvocation( v12,  (uint64_t)v8,  type metadata accessor for WFRunVoiceShortcutFlow.State);
  if (swift_getEnumCaseMultiPayload(v8, v3))
  {
    outlined destroy of AutoShortcutInvocation((uint64_t)v8, type metadata accessor for WFRunVoiceShortcutFlow.State);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    uint64_t v14 = __swift_project_value_buffer(v13, (uint64_t)static Logger.voiceCommands);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_0, v15, v16, "#WFRunVoiceShortcutFlow onGuardFlowsFinished unexpected state", v17, 2u);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    unint64_t v18 = lazy protocol witness table accessor for type WFRunVoiceShortcutFlowError and conformance WFRunVoiceShortcutFlowError();
    uint64_t v19 = swift_allocError(&type metadata for WFRunVoiceShortcutFlowError, v18, 0LL, 0LL);
    *uint64_t v20 = 2;
    *uint64_t v6 = v19;
LABEL_14:
    uint64_t v21 = v6;
    uint64_t v22 = v3;
    uint64_t v23 = 2LL;
    goto LABEL_15;
  }

  outlined init with take of VoiceCommandTask( (uint64_t)v8,  (uint64_t)v11,  type metadata accessor for ShortcutIdentification);
  if ((a1 & 1) != 0)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    uint64_t v25 = __swift_project_value_buffer(v24, (uint64_t)static Logger.voiceCommands);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl(&dword_0, v26, v27, "#WFRunVoiceShortcutFlow guard flow check failed", v28, 2u);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    unint64_t v29 = lazy protocol witness table accessor for type WFRunVoiceShortcutFlowError and conformance WFRunVoiceShortcutFlowError();
    uint64_t v30 = swift_allocError(&type metadata for WFRunVoiceShortcutFlowError, v29, 0LL, 0LL);
    *uint64_t v31 = 3;
    outlined destroy of AutoShortcutInvocation((uint64_t)v11, type metadata accessor for ShortcutIdentification);
    *uint64_t v6 = v30;
    goto LABEL_14;
  }

  outlined init with take of VoiceCommandTask( (uint64_t)v11,  (uint64_t)v6,  type metadata accessor for ShortcutIdentification);
  uint64_t v21 = v6;
  uint64_t v22 = v3;
  uint64_t v23 = 1LL;
LABEL_15:
  swift_storeEnumTagMultiPayload(v21, v22, v23);
  swift_beginAccess(v12, v33, 33LL, 0LL);
  outlined assign with take of WFRunVoiceShortcutFlow.State((uint64_t)v6, v12);
  return swift_endAccess(v33);
}

uint64_t WFRunVoiceShortcutFlow.makeOutputForPromptForShortcutName()(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[4] = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v2[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[6] = v5;
  v2[7] = OUTLINED_FUNCTION_4_0(v5);
  v2[8] = OUTLINED_FUNCTION_11_0();
  uint64_t v6 = type metadata accessor for OutputGenerationManifest(0LL);
  void v2[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[10] = v7;
  v2[11] = OUTLINED_FUNCTION_9_0(v7);
  uint64_t v8 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  v2[12] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[13] = v9;
  v2[14] = OUTLINED_FUNCTION_9_0(v9);
  uint64_t v10 = type metadata accessor for NLContextUpdate(0LL);
  v2[15] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[16] = v11;
  v2[17] = OUTLINED_FUNCTION_9_0(v11);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 144);
  *(void *)(*v2 + 15__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v1;
  swift_task_dealloc(v5);
  if (!v1) {
    *(void *)(v4 + 160) = a1;
  }
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v6, v7, v8);
}

uint64_t WFRunVoiceShortcutFlow.makeOutputForPromptForShortcutName()()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  (*(void (**)(void))(**(void **)(v0[3] + 24LL) + 224LL))();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))( v1,  enum case for RFFeatureFlags.ResponseFramework._SMART(_:),  v3);
  char v4 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  uint64_t v5 = OUTLINED_FUNCTION_129();
  v6(v5);
  if ((v4 & 1) != 0)
  {
    uint64_t v7 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(**(void **)(v0[3] + 16LL) + 288LL));
    v0[18] = v7;
    *uint64_t v7 = v0;
    v7[1] = WFRunVoiceShortcutFlow.makeOutputForPromptForShortcutName();
    return v12();
  }

  else
  {
    uint64_t v9 = (void *)v0[2];
    v9[3] = type metadata accessor for AceOutput(0LL);
    v9[4] = &protocol witness table for AceOutput;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v9);
    uint64_t v11 = (void *)swift_task_alloc(dword_217F74);
    v0[24] = v11;
    *uint64_t v11 = v0;
    v11[1] = WFRunVoiceShortcutFlow.makeOutputForPromptForShortcutName();
    return WFRunVoiceShortcutFlow.makeOutputForPromptForShortcutName_prerfv2(_:)( (uint64_t)boxed_opaque_existential_1,  v0[17]);
  }

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v1 = (void *)v0[20];
  uint64_t v20 = v0[17];
  unint64_t v18 = v0[16];
  uint64_t v19 = v0[15];
  uint64_t v3 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v5 = v0[5];
  char v4 = v0[6];
  uint64_t v6 = v0[4];
  static DialogPhase.confirmed.getter();
  uint64_t v7 = [v1 catId];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  OutputGenerationManifest.init(dialogPhase:_:)(v3, CustomIntentDisambiguationItemContainer.init(items:), 0LL);
  OutputGenerationManifest.responseViewId.setter(v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v5);
  OutputGenerationManifest.canUseServerTTS.setter(1LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v6, v20, v19);
  OUTLINED_FUNCTION_26_16(v6);
  OutputGenerationManifest.nlContextUpdate.setter(v6);
  OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
  uint64_t v9 = type metadata accessor for ResponseFactory(0LL);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v0[21] = ResponseFactory.init()();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v11 = OUTLINED_FUNCTION_19(v10, 40LL);
  *(_OWORD *)(v11 + 16) = xmmword_17E150;
  *(void *)(v11 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v1;
  uint64_t v22 = v11;
  specialized Array._endMutation()(v11, v12, v13);
  v0[22] = v22;
  uint64_t v15 = v1;
  os_log_type_t v16 = (void *)swift_task_alloc(v14);
  v0[23] = v16;
  void *v16 = v0;
  v16[1] = WFRunVoiceShortcutFlow.makeOutputForPromptForShortcutName();
  return ((uint64_t (*)(void, uint64_t, void))v21)(v0[2], v22, v0[11]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_50_0();
  swift_task_dealloc(*(void *)(v0 + 184));
  OUTLINED_FUNCTION_20();
  swift_release();
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v1, v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 80);

  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  uint64_t v3 = *(void *)(v0 + 136);
  OUTLINED_FUNCTION_91_1();
  (*(void (**)(uint64_t))(v1 + 8))(v3);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 200) = v0;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 136);
  OUTLINED_FUNCTION_91_1();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_12_9(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  uint64_t v1 = *(void **)(v0 + 16);
  OUTLINED_FUNCTION_14_5(*(void *)(v0 + 128));
  __swift_deallocate_boxed_opaque_existential_1(v1);
  OUTLINED_FUNCTION_35_18();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_12_9(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_14_5(*(void *)(v0 + 128));
  OUTLINED_FUNCTION_35_18();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_12_9(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t WFRunVoiceShortcutFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type WFRunVoiceShortcutFlow and conformance WFRunVoiceShortcutFlow,  type metadata accessor for WFRunVoiceShortcutFlow,  (uint64_t)&protocol conformance descriptor for WFRunVoiceShortcutFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v5, v6);
}

uint64_t WFRunVoiceShortcutFlow.makeOutputForPromptForShortcutName_prerfv2(_:)(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  void v3[9] = v2;
  v3[7] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[10] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for TemplatingResult(0LL);
  v3[11] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[12] = v6;
  v3[13] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(WFRunVoiceShortcutFlow.makeOutputForPromptForShortcutName_prerfv2(_:), 0LL, 0LL);
}

uint64_t WFRunVoiceShortcutFlow.makeOutputForPromptForShortcutName_prerfv2(_:)()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(**(void **)(v0[9] + 16LL) + 296LL));
  v0[14] = v1;
  *uint64_t v1 = v0;
  v1[1] = WFRunVoiceShortcutFlow.makeOutputForPromptForShortcutName_prerfv2(_:);
  return v3(v0[13]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 120) = v0;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Bool v9;
  uint64_t v10;
  uint64_t v12;
  OUTLINED_FUNCTION_51_0();
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v12 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v4 = *(void **)(v0 + 72);
  uint64_t v6 = v4 + 4;
  uint64_t v7 = v4[7];
  uint64_t v8 = v4[8];
  __swift_project_boxed_opaque_existential_1(v4 + 4, v7);
  LOBYTE(OUTLINED_FUNCTION_12_15(v5, v6, v7) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v7, v8);
  uint64_t v9 = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  uint64_t v10 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v3, v5, v10);
  __swift_storeEnumTagSinglePayload(v3, 0LL, 1LL, v10);
  *(void *)(v0 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0LL;
  *(_OWORD *)(v0 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  ((void (*)(uint64_t, void *, uint64_t, void *, Swift::Bool, uint64_t, uint64_t, void *, uint64_t))static AceOutputHelper.makeConfirmedViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:))( v1,  v6,  v7 & 1,  _swiftEmptyArrayStorage,  v9,  1LL,  v3,  _swiftEmptyArrayStorage,  v0 + 16);
  outlined destroy of Result<Output, Error>( v0 + 16,  (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of Result<Output, Error>(v3, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v12);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_20_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(v0 + 104));
  OUTLINED_FUNCTION_40_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t WFRunVoiceShortcutFlow.deinit()
{
  return v0;
}

uint64_t WFRunVoiceShortcutFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t protocol witness for Flow.on(input:) in conformance WFRunVoiceShortcutFlow(uint64_t a1)
{
  return WFRunVoiceShortcutFlow.on(input:)(a1) & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance WFRunVoiceShortcutFlow( uint64_t a1, uint64_t a2)
{
  return WFRunVoiceShortcutFlow.execute(completion:)(a1, a2);
}

uint64_t protocol witness for Flow.execute() in conformance WFRunVoiceShortcutFlow(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_217F5C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makePromptForTCCAcceptance(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return WFRunVoiceShortcutFlow.execute()(a1);
}

id specialized WorkflowRunnerFlow.init(workflowRunnerInput:workflowRunner:dialogState:aceServiceInvoker:deviceState:outputPublisher:runCustomCatWrapper:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:locationGuardFlowProvider:locationProvider:dateTimeResolver:linkRCHFlowFactory:)( const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(a17);
  uint64_t v53 = type metadata accessor for WorkflowRunnerFlow.State(0LL);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v20);
  OUTLINED_FUNCTION_83();
  uint64_t v52 = v21;
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>);
  uint64_t v50 = *(void *)(v51 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v22);
  OUTLINED_FUNCTION_83();
  uint64_t v49 = v23;
  uint64_t v24 = OUTLINED_FUNCTION_49_13();
  type metadata accessor for CATOption(v24);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v25);
  OUTLINED_FUNCTION_35();
  uint64_t v28 = v27 - v26;
  v65[3] = type metadata accessor for LocationProvider();
  v65[4] = &protocol witness table for LocationProvider;
  v65[0] = a13;
  uint64_t v29 = type metadata accessor for DateTimeResolver(0LL);
  v63[3] = v29;
  uint64_t v64 = &protocol witness table for DateTimeResolver;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v63);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 32LL))( boxed_opaque_existential_1,  a14,  v29);
  outlined init with take of SiriWorkflowRunnerInput( a1,  &a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput]);
  outlined init with copy of AppShortcutInvoking( a4,  (uint64_t)&a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker]);
  outlined init with copy of AppShortcutInvoking( a5,  (uint64_t)&a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState]);
  *(void *)&a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_dialogState] = a3;
  outlined init with copy of AppShortcutInvoking( a6,  (uint64_t)&a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher]);
  outlined init with copy of AppShortcutInvoking( (uint64_t)v65,  (uint64_t)&a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_locationProvider]);
  outlined init with copy of AppShortcutInvoking( (uint64_t)v63,  (uint64_t)&a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_dateTimeResolver]);
  uint64_t v31 = &a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_linkRCHFlowFactory];
  *(void *)uint64_t v31 = a15;
  *((void *)v31 + 1) = a16;
  *(void *)&a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_runVoiceCommandsCatWrapperSimple] = a9;
  uint64_t v32 = &a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_locationGuardFlowProvider];
  *(void *)uint64_t v32 = a11;
  *((void *)v32 + 1) = a12;
  outlined init with copy of Siri_Nlu_External_UserDialogAct?( a2,  (uint64_t)&v60,  &demangling cache variable for type metadata for SiriWorkflowRunning?);
  if (v61)
  {
    outlined init with take of AceServiceInvokerAsync(&v60, (uint64_t)v62);
    outlined init with take of AceServiceInvokerAsync( v62,  (uint64_t)&a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner]);
    OUTLINED_FUNCTION_166( (uint64_t)a17,  (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SiriWorkflowRunnerInput);
    OUTLINED_FUNCTION_14_8();
    OUTLINED_FUNCTION_132((uint64_t)&v67);
    OUTLINED_FUNCTION_57_12();
    OUTLINED_FUNCTION_132((uint64_t)&v66);
  }

  else
  {
    uint64_t v33 = a17;
    outlined retain of SiriWorkflowRunnerInput( (uint64_t)a1,  (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SiriWorkflowRunnerInput);
    OUTLINED_FUNCTION_14_8();
    OUTLINED_FUNCTION_132((uint64_t)&v67);
    OUTLINED_FUNCTION_57_12();
    OUTLINED_FUNCTION_132((uint64_t)&v66);
    outlined destroy of Result<Output, Error>( (uint64_t)&v60,  &demangling cache variable for type metadata for SiriWorkflowRunning?);
    OUTLINED_FUNCTION_85_3();
    outlined init with copy of AppShortcutInvoking(a4, (uint64_t)&v60);
    uint64_t v34 = type metadata accessor for SiriWorkflowRunner();
    OUTLINED_FUNCTION_19(v34, 192LL);
    outlined retain of SiriWorkflowRunnerInput( (uint64_t)a1,  (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SiriWorkflowRunnerInput);
    uint64_t v35 = SiriWorkflowRunner.init(workflowRunnerInput:deviceState:aceServiceInvoker:)(a1, (uint64_t)v62, &v60);
    uint64_t v36 = &v33[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner];
    *((void *)v36 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 3) = v34;
    *((void *)v36 + 4) = &protocol witness table for SiriWorkflowRunner;
    *(void *)uint64_t v36 = v35;
  }

  OUTLINED_FUNCTION_85_3();
  type metadata accessor for WorkflowRunnerCATs(0LL);
  OUTLINED_FUNCTION_14_8();
  OUTLINED_FUNCTION_57_12();
  swift_retain(a7);
  swift_retain(a8);
  uint64_t v37 = OUTLINED_FUNCTION_57_12();
  static CATOption.defaultMode.getter(v37);
  uint64_t v38 = CATWrapper.__allocating_init(options:globals:)(v28, 0LL);
  type metadata accessor for WorkflowRunnerCATsSimple(0LL);
  OUTLINED_FUNCTION_97_2();
  uint64_t v39 = OUTLINED_FUNCTION_95();
  type metadata accessor for RunCustomIntentCATsSimple(0LL);
  OUTLINED_FUNCTION_97_2();
  uint64_t v40 = OUTLINED_FUNCTION_95();
  uint64_t v41 = type metadata accessor for WorkflowDialogTemplating();
  OUTLINED_FUNCTION_19(v41, 120LL);
  WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)( (uint64_t)v62,  a3,  v38,  v39,  a7,  v40,  a8,  a9,  a10);
  *(void *)&a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_dialogTemplating] = v42;
  uint64_t v43 = *(void *)&a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner + 24];
  uint64_t v44 = *(void *)&a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner + 32];
  __swift_project_boxed_opaque_existential_1( &a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner],  v43);
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v44);
  AsyncStream.makeAsyncIterator()(v51);
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
  swift_storeEnumTagMultiPayload(v52, v53, 0LL);
  outlined init with take of VoiceCommandTask( v52,  (uint64_t)&a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state],  type metadata accessor for WorkflowRunnerFlow.State);

  v59.receiver = a17;
  v59.super_class = ObjectType;
  id v45 = objc_msgSendSuper2(&v59, "init");
  swift_release(a3);
  swift_release(a7);
  swift_release(a8);
  swift_release(a9);
  swift_release(a10);
  swift_release(a12);
  uint64_t v46 = swift_release(a16);
  OUTLINED_FUNCTION_166( v46,  (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SiriWorkflowRunnerInput);
  __swift_destroy_boxed_opaque_existential_1Tm(v63);
  __swift_destroy_boxed_opaque_existential_1Tm(v65);
  OUTLINED_FUNCTION_162((uint64_t)&v68);
  OUTLINED_FUNCTION_162((uint64_t)&v64);
  OUTLINED_FUNCTION_162((uint64_t)v65);
  outlined destroy of Result<Output, Error>(a2, &demangling cache variable for type metadata for SiriWorkflowRunning?);
  return v45;
}

uint64_t specialized WFRunVoiceShortcutFlow.init(deviceState:appPolicyHandler:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v13 = __swift_allocate_boxed_opaque_existential_1(&v37);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32LL))(v13, a2, a4);
  uint64_t v14 = a3 + OBJC_IVAR____TtC18SiriLinkFlowPlugin22WFRunVoiceShortcutFlow_state;
  uint64_t v15 = type metadata accessor for WFRunVoiceShortcutFlow.State(0LL);
  swift_storeEnumTagMultiPayload(v14, v15, 3LL);
  outlined init with copy of AppShortcutInvoking((uint64_t)a1, a3 + 32);
  outlined init with copy of AppShortcutInvoking((uint64_t)a1, (uint64_t)v36);
  if (one-time initialization token for shared != -1) {
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  }
  uint64_t v16 = static WFDialogState.shared;
  type metadata accessor for WorkflowRunnerCATs(0LL);
  uint64_t v17 = swift_retain(v16);
  static CATOption.defaultMode.getter(v17);
  uint64_t v35 = CATWrapper.__allocating_init(options:globals:)(v12, 0LL);
  uint64_t v18 = type metadata accessor for WorkflowRunnerCATsSimple(0LL);
  static CATOption.defaultMode.getter(v18);
  uint64_t v19 = CATWrapperSimple.__allocating_init(options:globals:)(v12, 0LL);
  uint64_t v20 = type metadata accessor for RunCustomIntentCATs(0LL);
  static CATOption.defaultMode.getter(v20);
  uint64_t v21 = CATWrapper.__allocating_init(options:globals:)(v12, 0LL);
  uint64_t v22 = type metadata accessor for RunCustomIntentCATsSimple(0LL);
  static CATOption.defaultMode.getter(v22);
  uint64_t v23 = CATWrapperSimple.__allocating_init(options:globals:)(v12, 0LL);
  uint64_t v24 = type metadata accessor for RunVoiceCommandCATs(0LL);
  static CATOption.defaultMode.getter(v24);
  uint64_t v25 = CATWrapper.__allocating_init(options:globals:)(v12, 0LL);
  uint64_t v26 = type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  static CATOption.defaultMode.getter(v26);
  uint64_t v27 = CATWrapperSimple.__allocating_init(options:globals:)(v12, 0LL);
  uint64_t v28 = type metadata accessor for WorkflowRunnerCATPatternsExecutor(0LL);
  static CATOption.defaultMode.getter(v28);
  uint64_t v29 = CATWrapper.__allocating_init(options:globals:)(v12, 0LL);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  uint64_t v30 = type metadata accessor for WorkflowDialogTemplating();
  swift_allocObject(v30, 120LL, 7LL);
  WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)( (uint64_t)v36,  v16,  v35,  v19,  v21,  v23,  v25,  v27,  v29);
  *(void *)(a3 + 16) = v31;
  uint64_t v32 = type metadata accessor for WorkflowNLContextProvider();
  *(void *)(a3 + 24) = swift_allocObject(v32, 16LL, 7LL);
  outlined init with take of AceServiceInvokerAsync(&v37, a3 + 72);
  return a3;
}

uint64_t specialized ShortcutIdentification.getIdentifyingName(vcClient:)(uint64_t a1, uint64_t a2)
{
  v2[3] = a1;
  v2[4] = a2;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v2[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[6] = v5;
  v2[7] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for ShortcutIdentification(0LL);
  v2[8] = v6;
  void v2[9] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  swift_retain(a1);
  return swift_task_switch(specialized ShortcutIdentification.getIdentifyingName(vcClient:), 0LL, 0LL);
}

{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v3 = *(void *)(v2 + 72);
  OUTLINED_FUNCTION_74_6(*(void *)(v2 + 32), a2, type metadata accessor for ShortcutIdentification);
  uint64_t v4 = OUTLINED_FUNCTION_79_2(v3);
  uint64_t v5 = *(uint64_t **)(v2 + 72);
  if (v4 == 1)
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t *, void))(*(void *)(v2 + 48) + 32LL))( *(void *)(v2 + 56),  v5,  *(void *)(v2 + 40));
    uint64_t v7 = UUID.uuidString.getter(v6);
    uint64_t v9 = v8;
    *(void *)(v2 + 80) = v8;
    uint64_t v10 = (void *)swift_task_alloc(dword_21616C);
    *(void *)(v2 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v10;
    *uint64_t v10 = v2;
    v10[1] = specialized ShortcutIdentification.getIdentifyingName(vcClient:);
    return VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:)(v7, v9);
  }

  else
  {
    uint64_t v13 = *v5;
    uint64_t v12 = v5[1];
    swift_release();
    OUTLINED_FUNCTION_72_2();
    OUTLINED_FUNCTION_15_0();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v13, v12);
  }

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v3 = v2[10];
  OUTLINED_FUNCTION_74_6(v2[3], a2, type metadata accessor for ShortcutIdentification);
  if (OUTLINED_FUNCTION_79_2(v3) == 1)
  {
    uint64_t v4 = v2[5];
    uint64_t v5 = OUTLINED_FUNCTION_2_12(*(uint64_t (**)(uint64_t, uint64_t))(v2[7] + 32));
    uint64_t v6 = UUID.uuidString.getter(v5);
    uint64_t v8 = v7;
    v2[13] = v7;
    uint64_t v9 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v4 + 32));
    v2[14] = (uint64_t)v9;
    *uint64_t v9 = v2;
    v9[1] = specialized ShortcutIdentification.getIdentifyingName(vcClient:);
    return v13(v6, v8, v2[4], v2[5]);
  }

  else
  {
    OUTLINED_FUNCTION_12_3(v2[11]);
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_33_0();
    uint64_t v11 = OUTLINED_FUNCTION_129();
    return v12(v11);
  }

uint64_t specialized ShortcutIdentification.getIdentifyingName(vcClient:)()
{
  *(void *)(v2 + 96) = v0;
  *(void *)(v2 + 104) = v1;
  OUTLINED_FUNCTION_54_0(v3);
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  os_log_s *v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v2 = v1[13];
  if (v2)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v3 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.voiceCommands);
    uint64_t v4 = OUTLINED_FUNCTION_66_8();
    Logger.logObject.getter(v4);
    uint64_t v5 = OUTLINED_FUNCTION_58();
    if (os_log_type_enabled(v0, v5))
    {
      uint64_t v6 = v1[12];
      uint64_t v20 = v1[7];
      uint64_t v18 = v1[6];
      uint64_t v19 = v1[5];
      uint64_t v7 = (_DWORD *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v8 = OUTLINED_FUNCTION_38(32LL);
      uint64_t v21 = v8;
      *uint64_t v7 = 136315138;
      swift_bridgeObjectRetain(v2);
      v1[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v2, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2, v1 + 3, v7 + 1);
      OUTLINED_FUNCTION_96_1();
      OUTLINED_FUNCTION_55_12(&dword_0, v0, v9, "shortcut identifier matches shortcutName=%s");
      OUTLINED_FUNCTION_30_3(v8, v10, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v8);
      OUTLINED_FUNCTION_1_0((uint64_t)v7);

      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v20, v19);
      swift_release();
    }

    else
    {
      uint64_t v12 = v1[6];
      uint64_t v11 = v1[7];
      uint64_t v13 = v1[5];

      OUTLINED_FUNCTION_11();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
      swift_release();
    }
  }

  else
  {
    OUTLINED_FUNCTION_14_5(v1[6]);
    swift_release();
  }

  OUTLINED_FUNCTION_72_2();
  OUTLINED_FUNCTION_15_0();
  uint64_t v14 = OUTLINED_FUNCTION_52_11();
  return OUTLINED_FUNCTION_17_20(v14, v15, v16);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_42_1();
  *(void *)(v2 + 120) = v0;
  *(void *)(v2 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v1;
  OUTLINED_FUNCTION_54_0(v3);
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  os_log_s *v0;
  void *v1;
  os_log_type_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v3 = v1[16];
  if (v3)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v4 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.voiceCommands);
    uint64_t v5 = OUTLINED_FUNCTION_66_8();
    Logger.logObject.getter(v5);
    uint64_t v6 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_21_6(v6))
    {
      uint64_t v7 = v1[15];
      uint64_t v17 = v1[7];
      uint64_t v18 = v1[6];
      uint64_t v19 = v1[8];
      uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v9 = OUTLINED_FUNCTION_38(32LL);
      uint64_t v20 = v9;
      *(_DWORD *)uint64_t v8 = 136315138;
      swift_bridgeObjectRetain(v3);
      v1[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v3, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2, v1 + 3, v8 + 4);
      OUTLINED_FUNCTION_96_1();
      _os_log_impl(&dword_0, v0, v2, "shortcut identifier matches shortcutName=%s", v8, 0xCu);
      OUTLINED_FUNCTION_30_3(v9, v10, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v9);
      OUTLINED_FUNCTION_1_0((uint64_t)v8);

      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v18);
    }

    else
    {
      uint64_t v12 = v1[7];
      uint64_t v11 = v1[8];
      uint64_t v13 = v1[6];

      OUTLINED_FUNCTION_11();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    }
  }

  else
  {
    OUTLINED_FUNCTION_14_5(v1[7]);
  }

  (*(void (**)(void, void))(v1[11] + 8LL))(v1[12], v1[4]);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  uint64_t v14 = OUTLINED_FUNCTION_52_11();
  return v15(v14);
}

uint64_t specialized ShortcutIdentification.getIdentifyingName(vcClient:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[3] = a2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  v4[6] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[7] = v7;
  v4[8] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for ShortcutIdentification(0LL);
  v4[9] = v8;
  v4[10] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)(a3 - 8);
  v4[11] = v9;
  v4[12] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(void))(v9 + 16))();
  return swift_task_switch(specialized ShortcutIdentification.getIdentifyingName(vcClient:), 0LL, 0LL);
}

uint64_t type metadata accessor for WFRunVoiceShortcutFlow.State(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for WFRunVoiceShortcutFlow.State,  (uint64_t)&nominal type descriptor for WFRunVoiceShortcutFlow.State);
}

uint64_t type metadata accessor for ShortcutIdentification(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for ShortcutIdentification,  (uint64_t)&nominal type descriptor for ShortcutIdentification);
}

unint64_t lazy protocol witness table accessor for type WFRunVoiceShortcutFlowError and conformance WFRunVoiceShortcutFlowError()
{
  unint64_t result = lazy protocol witness table cache variable for type WFRunVoiceShortcutFlowError and conformance WFRunVoiceShortcutFlowError;
  if (!lazy protocol witness table cache variable for type WFRunVoiceShortcutFlowError and conformance WFRunVoiceShortcutFlowError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WFRunVoiceShortcutFlowError,  &type metadata for WFRunVoiceShortcutFlowError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WFRunVoiceShortcutFlowError and conformance WFRunVoiceShortcutFlowError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WFRunVoiceShortcutFlowError and conformance WFRunVoiceShortcutFlowError;
  if (!lazy protocol witness table cache variable for type WFRunVoiceShortcutFlowError and conformance WFRunVoiceShortcutFlowError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WFRunVoiceShortcutFlowError,  &type metadata for WFRunVoiceShortcutFlowError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WFRunVoiceShortcutFlowError and conformance WFRunVoiceShortcutFlowError);
  }

  return result;
}

uint64_t outlined assign with take of WFRunVoiceShortcutFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WFRunVoiceShortcutFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for VoiceCommandTask(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for VoiceCommandTask,  (uint64_t)&nominal type descriptor for VoiceCommandTask);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in WFRunVoiceShortcutFlow.execute()( char a1)
{
  return implicit closure #2 in implicit closure #1 in WFRunVoiceShortcutFlow.execute()(a1 & 1);
}

uint64_t sub_8D0D4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for WFRunVoiceShortcutFlow(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for WFRunVoiceShortcutFlow,  (uint64_t)&nominal type descriptor for WFRunVoiceShortcutFlow);
}

unint64_t lazy protocol witness table accessor for type EnablementMode and conformance EnablementMode()
{
  unint64_t result = lazy protocol witness table cache variable for type EnablementMode and conformance EnablementMode;
  if (!lazy protocol witness table cache variable for type EnablementMode and conformance EnablementMode)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EnablementMode,  &type metadata for EnablementMode);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type EnablementMode and conformance EnablementMode);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for WFRunVoiceShortcutFlowError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for WFRunVoiceShortcutFlowError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_8D260 + 4 * byte_182A5C[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_8D294 + 4 * byte_182A57[v4]))();
}

uint64_t sub_8D294(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_8D29C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x8D2A4LL);
  }
  return result;
}

uint64_t sub_8D2B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x8D2B8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_8D2BC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_8D2C4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WFRunVoiceShortcutFlowError()
{
  return &type metadata for WFRunVoiceShortcutFlowError;
}

uint64_t *initializeBufferWithCopyOfBuffer for VoiceCommandTask(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v11);
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      uint64_t v7 = a2[2];
      a1[1] = a2[1];
      a1[2] = v7;
      swift_bridgeObjectRetain(v7);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 1LL;
    }

    else
    {
      uint64_t v12 = type metadata accessor for ShortcutIdentification(0LL);
      if (swift_getEnumCaseMultiPayload(a2, v12) == 1)
      {
        uint64_t v13 = type metadata accessor for UUID(0LL);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16LL))(a1, a2, v13);
        uint64_t v14 = a1;
        uint64_t v15 = v12;
        uint64_t v16 = 1LL;
      }

      else
      {
        uint64_t v17 = a2[1];
        *a1 = *a2;
        a1[1] = v17;
        swift_bridgeObjectRetain(v17);
        uint64_t v14 = a1;
        uint64_t v15 = v12;
        uint64_t v16 = 0LL;
      }

      swift_storeEnumTagMultiPayload(v14, v15, v16);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }

  return a1;
}

uint64_t destroy for VoiceCommandTask(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
  }

  else
  {
    uint64_t v4 = type metadata accessor for ShortcutIdentification(0LL);
    if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
    {
      uint64_t v5 = type metadata accessor for UUID(0LL);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(a1, v5);
    }

    uint64_t v3 = *(void *)(a1 + 8);
  }

  return swift_bridgeObjectRelease(v3);
}

uint64_t initializeWithCopy for VoiceCommandTask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
    *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = v6;
    swift_bridgeObjectRetain(v6);
    uint64_t v7 = a1;
    uint64_t v8 = a3;
    uint64_t v9 = 1LL;
  }

  else
  {
    uint64_t v10 = type metadata accessor for ShortcutIdentification(0LL);
    if (swift_getEnumCaseMultiPayload(a2, v10) == 1)
    {
      uint64_t v11 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
      uint64_t v12 = a1;
      uint64_t v13 = v10;
      uint64_t v14 = 1LL;
    }

    else
    {
      uint64_t v15 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v15;
      swift_bridgeObjectRetain(v15);
      uint64_t v12 = a1;
      uint64_t v13 = v10;
      uint64_t v14 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v12, v13, v14);
    uint64_t v7 = a1;
    uint64_t v8 = a3;
    uint64_t v9 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v7, v8, v9);
  return a1;
}

uint64_t assignWithCopy for VoiceCommandTask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AutoShortcutInvocation(a1, type metadata accessor for VoiceCommandTask);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = *(void *)(a2 + 8);
      uint64_t v6 = *(void *)(a2 + 16);
      *(void *)(a1 + 16) = v6;
      swift_bridgeObjectRetain(v6);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 1LL;
    }

    else
    {
      uint64_t v10 = type metadata accessor for ShortcutIdentification(0LL);
      if (swift_getEnumCaseMultiPayload(a2, v10) == 1)
      {
        uint64_t v11 = type metadata accessor for UUID(0LL);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
        uint64_t v12 = a1;
        uint64_t v13 = v10;
        uint64_t v14 = 1LL;
      }

      else
      {
        *(void *)a1 = *(void *)a2;
        uint64_t v15 = *(void *)(a2 + 8);
        *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v15;
        swift_bridgeObjectRetain(v15);
        uint64_t v12 = a1;
        uint64_t v13 = v10;
        uint64_t v14 = 0LL;
      }

      swift_storeEnumTagMultiPayload(v12, v13, v14);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v7, v8, v9);
  }

  return a1;
}

void *initializeWithTake for VoiceCommandTask(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v6 = type metadata accessor for ShortcutIdentification(0LL);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      uint64_t v7 = type metadata accessor for UUID(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
    }

    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

void *assignWithTake for VoiceCommandTask(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AutoShortcutInvocation((uint64_t)a1, type metadata accessor for VoiceCommandTask);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      uint64_t v6 = type metadata accessor for ShortcutIdentification(0LL);
      if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
      {
        uint64_t v7 = type metadata accessor for UUID(0LL);
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
        swift_storeEnumTagMultiPayload(a1, v6, 1LL);
      }

      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
      }

      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t type metadata completion function for VoiceCommandTask(uint64_t a1)
{
  uint64_t result = type metadata accessor for ShortcutIdentification(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_182C38;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v4);
    return 0LL;
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for EnablementMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_8D8C4 + 4 * byte_182A66[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_8D8F8 + 4 * byte_182A61[v4]))();
}

uint64_t sub_8D8F8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_8D900(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x8D908LL);
  }
  return result;
}

uint64_t sub_8D914(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x8D91CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_8D920(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_8D928(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EnablementMode()
{
  return &type metadata for EnablementMode;
}

uint64_t *initializeBufferWithCopyOfBuffer for ShortcutIdentification(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v11);
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v7 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 1LL;
    }

    else
    {
      uint64_t v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      swift_bridgeObjectRetain(v12);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }

  return a1;
}

uint64_t destroy for ShortcutIdentification(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
}

void *initializeWithCopy for ShortcutIdentification(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    uint64_t v6 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    uint64_t v7 = a1;
    uint64_t v8 = a3;
    uint64_t v9 = 1LL;
  }

  else
  {
    uint64_t v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    swift_bridgeObjectRetain(v10);
    uint64_t v7 = a1;
    uint64_t v8 = a3;
    uint64_t v9 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v7, v8, v9);
  return a1;
}

void *assignWithCopy for ShortcutIdentification(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AutoShortcutInvocation((uint64_t)a1, type metadata accessor for ShortcutIdentification);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v6 = type metadata accessor for UUID(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 1LL;
    }

    else
    {
      *a1 = *a2;
      uint64_t v10 = a2[1];
      a1[1] = v10;
      swift_bridgeObjectRetain(v10);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v7, v8, v9);
  }

  return a1;
}

void *initializeWithTake for ShortcutIdentification(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    uint64_t v6 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *assignWithTake for ShortcutIdentification(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AutoShortcutInvocation((uint64_t)a1, type metadata accessor for ShortcutIdentification);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v6 = type metadata accessor for UUID(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t type metadata completion function for ShortcutIdentification(uint64_t a1)
{
  v4[0] = &unk_182C78;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v4);
    return 0LL;
  }

  return result;
}

uint64_t ObjC metadata update function for WFRunVoiceShortcutFlow()
{
  return type metadata accessor for WFRunVoiceShortcutFlow(0LL);
}

uint64_t type metadata completion function for WFRunVoiceShortcutFlow(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  void v4[2] = "(";
  v4[3] = "(";
  uint64_t result = type metadata accessor for WFRunVoiceShortcutFlow.State(319LL);
  if (v3 <= 0x3F)
  {
    v4[4] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for WFRunVoiceShortcutFlow.State( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v14);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    switch(EnumCaseMultiPayload)
    {
      case 2:
        uint64_t v15 = *a2;
        swift_errorRetain(v15);
        *a1 = v15;
        uint64_t v16 = a1;
        uint64_t v17 = a3;
        uint64_t v18 = 2LL;
LABEL_16:
        swift_storeEnumTagMultiPayload(v16, v17, v18);
        return a1;
      case 1:
        uint64_t v19 = type metadata accessor for ShortcutIdentification(0LL);
        if (swift_getEnumCaseMultiPayload(a2, v19) == 1)
        {
          uint64_t v20 = type metadata accessor for UUID(0LL);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v20 - 8) + 16LL))(a1, a2, v20);
          uint64_t v21 = a1;
          uint64_t v22 = v19;
          uint64_t v23 = 1LL;
        }

        else
        {
          uint64_t v24 = a2[1];
          *a1 = *a2;
          a1[1] = v24;
          swift_bridgeObjectRetain(v24);
          uint64_t v21 = a1;
          uint64_t v22 = v19;
          uint64_t v23 = 0LL;
        }

        swift_storeEnumTagMultiPayload(v21, v22, v23);
        uint64_t v16 = a1;
        uint64_t v17 = a3;
        uint64_t v18 = 1LL;
        goto LABEL_16;
      case 0:
        uint64_t v9 = type metadata accessor for ShortcutIdentification(0LL);
        if (swift_getEnumCaseMultiPayload(a2, v9) == 1)
        {
          uint64_t v10 = type metadata accessor for UUID(0LL);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16LL))(a1, a2, v10);
          uint64_t v11 = a1;
          uint64_t v12 = v9;
          uint64_t v13 = 1LL;
        }

        else
        {
          uint64_t v25 = a2[1];
          *a1 = *a2;
          a1[1] = v25;
          swift_bridgeObjectRetain(v25);
          uint64_t v11 = a1;
          uint64_t v12 = v9;
          uint64_t v13 = 0LL;
        }

        swift_storeEnumTagMultiPayload(v11, v12, v13);
        uint64_t v16 = a1;
        uint64_t v17 = a3;
        uint64_t v18 = 0LL;
        goto LABEL_16;
    }

    memcpy(a1, a2, *(void *)(v5 + 64));
  }

  return a1;
}

uint64_t destroy for WFRunVoiceShortcutFlow.State(void *a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 2) {
    return swift_errorRelease(*a1);
  }
  if (result <= 1)
  {
    uint64_t v4 = type metadata accessor for ShortcutIdentification(0LL);
    if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
    {
      uint64_t v5 = type metadata accessor for UUID(0LL);
      return (*(uint64_t (**)(void *, uint64_t))(*(void *)(v5 - 8) + 8LL))(a1, v5);
    }

    else
    {
      return swift_bridgeObjectRelease(a1[1]);
    }
  }

  return result;
}

uint64_t *initializeWithCopy for WFRunVoiceShortcutFlow.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v12 = *a2;
      swift_errorRetain(v12);
      *a1 = v12;
      uint64_t v13 = a1;
      uint64_t v14 = a3;
      uint64_t v15 = 2LL;
LABEL_14:
      swift_storeEnumTagMultiPayload(v13, v14, v15);
      return a1;
    case 1:
      uint64_t v16 = type metadata accessor for ShortcutIdentification(0LL);
      if (swift_getEnumCaseMultiPayload(a2, v16) == 1)
      {
        uint64_t v17 = type metadata accessor for UUID(0LL);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v17 - 8) + 16LL))(a1, a2, v17);
        uint64_t v18 = a1;
        uint64_t v19 = v16;
        uint64_t v20 = 1LL;
      }

      else
      {
        uint64_t v21 = a2[1];
        *a1 = *a2;
        a1[1] = v21;
        swift_bridgeObjectRetain(v21);
        uint64_t v18 = a1;
        uint64_t v19 = v16;
        uint64_t v20 = 0LL;
      }

      swift_storeEnumTagMultiPayload(v18, v19, v20);
      uint64_t v13 = a1;
      uint64_t v14 = a3;
      uint64_t v15 = 1LL;
      goto LABEL_14;
    case 0:
      uint64_t v7 = type metadata accessor for ShortcutIdentification(0LL);
      if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
      {
        uint64_t v8 = type metadata accessor for UUID(0LL);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
        uint64_t v9 = a1;
        uint64_t v10 = v7;
        uint64_t v11 = 1LL;
      }

      else
      {
        uint64_t v22 = a2[1];
        *a1 = *a2;
        a1[1] = v22;
        swift_bridgeObjectRetain(v22);
        uint64_t v9 = a1;
        uint64_t v10 = v7;
        uint64_t v11 = 0LL;
      }

      swift_storeEnumTagMultiPayload(v9, v10, v11);
      uint64_t v13 = a1;
      uint64_t v14 = a3;
      uint64_t v15 = 0LL;
      goto LABEL_14;
  }

  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  return a1;
}

uint64_t *assignWithCopy for WFRunVoiceShortcutFlow.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AutoShortcutInvocation((uint64_t)a1, type metadata accessor for WFRunVoiceShortcutFlow.State);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    switch(EnumCaseMultiPayload)
    {
      case 2:
        uint64_t v12 = *a2;
        swift_errorRetain(v12);
        *a1 = v12;
        uint64_t v13 = a1;
        uint64_t v14 = a3;
        uint64_t v15 = 2LL;
LABEL_15:
        swift_storeEnumTagMultiPayload(v13, v14, v15);
        return a1;
      case 1:
        uint64_t v16 = type metadata accessor for ShortcutIdentification(0LL);
        if (swift_getEnumCaseMultiPayload(a2, v16) == 1)
        {
          uint64_t v17 = type metadata accessor for UUID(0LL);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v17 - 8) + 16LL))(a1, a2, v17);
          uint64_t v18 = a1;
          uint64_t v19 = v16;
          uint64_t v20 = 1LL;
        }

        else
        {
          *a1 = *a2;
          uint64_t v22 = a2[1];
          a1[1] = v22;
          swift_bridgeObjectRetain(v22);
          uint64_t v18 = a1;
          uint64_t v19 = v16;
          uint64_t v20 = 0LL;
        }

        swift_storeEnumTagMultiPayload(v18, v19, v20);
        uint64_t v13 = a1;
        uint64_t v14 = a3;
        uint64_t v15 = 1LL;
        goto LABEL_15;
      case 0:
        uint64_t v7 = type metadata accessor for ShortcutIdentification(0LL);
        if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
        {
          uint64_t v8 = type metadata accessor for UUID(0LL);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
          uint64_t v9 = a1;
          uint64_t v10 = v7;
          uint64_t v11 = 1LL;
        }

        else
        {
          *a1 = *a2;
          uint64_t v21 = a2[1];
          a1[1] = v21;
          swift_bridgeObjectRetain(v21);
          uint64_t v9 = a1;
          uint64_t v10 = v7;
          uint64_t v11 = 0LL;
        }

        swift_storeEnumTagMultiPayload(v9, v10, v11);
        uint64_t v13 = a1;
        uint64_t v14 = a3;
        uint64_t v15 = 0LL;
        goto LABEL_15;
    }

    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *initializeWithTake for WFRunVoiceShortcutFlow.State(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v9 = type metadata accessor for ShortcutIdentification(0LL);
    if (swift_getEnumCaseMultiPayload(a2, v9) == 1)
    {
      uint64_t v10 = type metadata accessor for UUID(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32LL))(a1, a2, v10);
      swift_storeEnumTagMultiPayload(a1, v9, 1LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
    }

    uint64_t v11 = a1;
    uint64_t v12 = a3;
    uint64_t v13 = 1LL;
    goto LABEL_12;
  }

  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = type metadata accessor for ShortcutIdentification(0LL);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      uint64_t v8 = type metadata accessor for UUID(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, v7, 1LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
    }

    uint64_t v11 = a1;
    uint64_t v12 = a3;
    uint64_t v13 = 0LL;
LABEL_12:
    swift_storeEnumTagMultiPayload(v11, v12, v13);
    return a1;
  }

  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  return a1;
}

void *assignWithTake for WFRunVoiceShortcutFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AutoShortcutInvocation((uint64_t)a1, type metadata accessor for WFRunVoiceShortcutFlow.State);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = type metadata accessor for ShortcutIdentification(0LL);
      if (swift_getEnumCaseMultiPayload(a2, v9) == 1)
      {
        uint64_t v10 = type metadata accessor for UUID(0LL);
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32LL))(a1, a2, v10);
        swift_storeEnumTagMultiPayload(a1, v9, 1LL);
      }

      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
      }

      uint64_t v11 = a1;
      uint64_t v12 = a3;
      uint64_t v13 = 1LL;
      goto LABEL_13;
    }

    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = type metadata accessor for ShortcutIdentification(0LL);
      if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
      {
        uint64_t v8 = type metadata accessor for UUID(0LL);
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
        swift_storeEnumTagMultiPayload(a1, v7, 1LL);
      }

      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
      }

      uint64_t v11 = a1;
      uint64_t v12 = a3;
      uint64_t v13 = 0LL;
LABEL_13:
      swift_storeEnumTagMultiPayload(v11, v12, v13);
      return a1;
    }

    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

uint64_t type metadata completion function for WFRunVoiceShortcutFlow.State(uint64_t a1)
{
  uint64_t result = type metadata accessor for ShortcutIdentification(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = v4[0];
    void v4[2] = "\b";
    swift_initEnumMetadataMultiPayload(a1, 256LL, 3LL, v4);
    return 0LL;
  }

  return result;
}

void outlined init with copy of Siri_Nlu_External_UserDialogAct?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_2_12(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  OUTLINED_FUNCTION_1();
}

uint64_t OUTLINED_FUNCTION_2_22()
{
  return swift_task_dealloc(*(void *)(v0 + 568));
}

uint64_t OUTLINED_FUNCTION_17_20(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t OUTLINED_FUNCTION_24_16()
{
  return *(void *)(v0 + 568);
}

uint64_t OUTLINED_FUNCTION_26_16(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 0LL, 1LL, v1);
}

uint64_t OUTLINED_FUNCTION_32_11(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
  *int v2 = a1;
  return swift_storeEnumTagMultiPayload(v2, v3, 2LL);
}

unint64_t OUTLINED_FUNCTION_33_13()
{
  return lazy protocol witness table accessor for type WFRunVoiceShortcutFlowError and conformance WFRunVoiceShortcutFlowError();
}

uint64_t OUTLINED_FUNCTION_35_18()
{
  return swift_task_dealloc(*(void *)(v0 + 136));
}

uint64_t OUTLINED_FUNCTION_36_14()
{
  return specialized WFRunVoiceShortcutFlow.init(deviceState:appPolicyHandler:)(v1, v4, v0, v2, v3);
}

uint64_t OUTLINED_FUNCTION_39_16()
{
  return swift_errorRelease(v0);
}

uint64_t OUTLINED_FUNCTION_40_15@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_41_15()
{
  return CATWrapper.__allocating_init(options:globals:)(v0, 0LL);
}

uint64_t OUTLINED_FUNCTION_45_10@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD000000000000033LL,  a1 | 0x8000000000000000LL,  (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_47_14()
{
  return outlined assign with take of WFRunVoiceShortcutFlow.State(v0, v1);
}

uint64_t OUTLINED_FUNCTION_49_13()
{
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_52_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_53_12()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

void OUTLINED_FUNCTION_55_12(void *a1, os_log_s *a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_57_12()
{
  return swift_retain(v0);
}

uint64_t OUTLINED_FUNCTION_61_12()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_66_8()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t OUTLINED_FUNCTION_70_7( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return swift_task_dealloc(a11);
}

uint64_t OUTLINED_FUNCTION_71_4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_task_dealloc(a10);
}

uint64_t OUTLINED_FUNCTION_72_2()
{
  return swift_task_dealloc(*(void *)(v0 + 72));
}

void OUTLINED_FUNCTION_74_6(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

  ;
}

uint64_t OUTLINED_FUNCTION_77_5( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_79_2(uint64_t a1)
{
  return swift_getEnumCaseMultiPayload(a1, v1);
}

uint64_t OUTLINED_FUNCTION_81_4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

void OUTLINED_FUNCTION_82_3(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_83_1()
{
  return static ExecuteResponse.complete()();
}

void OUTLINED_FUNCTION_85_3()
{
}

uint64_t OUTLINED_FUNCTION_87_3(uint64_t a1)
{
  return StaticString.description.getter(a1, 119LL, 2LL);
}

void OUTLINED_FUNCTION_88_2(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_95()
{
  return CATWrapperSimple.__allocating_init(options:globals:)(v0, 0LL);
}

uint64_t OUTLINED_FUNCTION_96_1()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

uint64_t OUTLINED_FUNCTION_97_2()
{
  return static CATOption.defaultMode.getter();
}

uint64_t LNConnection.perform(action:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation.BufferingPolicy);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_35();
  uint64_t v8 = v7 - v6;
  uint64_t v12 = v2;
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  (*(void (**)(uint64_t, void))(v9 + 104))( v7 - v6,  enum case for AsyncThrowingStream.Continuation.BufferingPolicy.unbounded<A, B>(_:));
  return AsyncThrowingStream.init<>(_:bufferingPolicy:_:)( &type metadata for LinkConnectionEvent,  v8,  partial apply for closure #1 in LNConnection.perform(action:options:),  v11,  &type metadata for LinkConnectionEvent);
}

uint64_t closure #1 in LNConnection.perform(action:options:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, a1, v8);
  static AceService.currentAsync.getter(v18);
  id v12 = objc_allocWithZone((Class)type metadata accessor for AnonymousConnectionDelegate(0LL));
  id v13 = AnonymousConnectionDelegate.init(continuation:aceService:)((uint64_t)v10, v18);
  id v14 = [a2 executorForAction:a3 options:a4 delegate:v13];
  [v14 perform];
  uint64_t v15 = swift_allocObject(&unk_1F6DF0, 32LL, 7LL);
  *(void *)(v15 + 16) = v13;
  *(void *)(v15 + 24) = v14;
  return AsyncThrowingStream.Continuation.onTermination.setter( partial apply for closure #1 in closure #1 in LNConnection.perform(action:options:),  v15,  v8);
}

uint64_t partial apply for closure #1 in LNConnection.perform(action:options:)(uint64_t a1)
{
  return closure #1 in LNConnection.perform(action:options:)( a1,  *(void **)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32));
}

void AnonymousConnectionDelegate.__allocating_init(continuation:aceService:)(uint64_t a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  AnonymousConnectionDelegate.init(continuation:aceService:)(a1, a2);
  OUTLINED_FUNCTION_2();
}

void closure #1 in closure #1 in LNConnection.perform(action:options:)(uint64_t a1, uint64_t a2, void *a3)
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v4, (uint64_t)static Logger.voiceCommands);
  id v5 = a3;
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v20 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    id v10 = v5;
    id v11 = [v10 description];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v14 = v13;

    uint64_t v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v8 + 4);

    swift_bridgeObjectRelease(v14);
    _os_log_impl(&dword_0, v6, v7, "Stopping executor %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl(&dword_0, v16, v17, "AsyncStream terminated", v18, 2u);
    swift_slowDealloc(v18, -1LL, -1LL);
  }
}

uint64_t AnonymousConnectionDelegate.aceService.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState( v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin27AnonymousConnectionDelegate_aceService,  a1);
}

uint64_t AnonymousConnectionDelegate.continuation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin27AnonymousConnectionDelegate_continuation;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

id AnonymousConnectionDelegate.init(continuation:aceService:)(uint64_t a1, void *a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v2);
  outlined init with copy of DeviceState( (uint64_t)a2,  (uint64_t)&v2[OBJC_IVAR____TtC18SiriLinkFlowPlugin27AnonymousConnectionDelegate_aceService]);
  uint64_t v6 = &v2[OBJC_IVAR____TtC18SiriLinkFlowPlugin27AnonymousConnectionDelegate_continuation];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation);
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  v11.receiver = v2;
  v11.super_class = ObjectType;
  id v9 = objc_msgSendSuper2(&v11, "init");
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return v9;
}

void AnonymousConnectionDelegate.executor(_:needsConfirmationWith:)(uint64_t a1, void *a2)
{
}

void AnonymousConnectionDelegate.executor(_:needsActionConfirmationWith:)(uint64_t a1, void *a2)
{
}

void AnonymousConnectionDelegate.executor(_:needsDisambiguationWith:)(uint64_t a1, void *a2)
{
}

void AnonymousConnectionDelegate.executor(_:needsValueWith:)(uint64_t a1, void *a2)
{
}

void AnonymousConnectionDelegate.executor(_:needsConfirmationWith:)( uint64_t a1, void *a2, const char *a3, char a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation.YieldResult);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_46_11();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v9 = OUTLINED_FUNCTION_48();
  id v10 = (os_log_s *)__swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
  id v11 = a2;
  Logger.logObject.getter(v11);
  os_log_type_t v12 = OUTLINED_FUNCTION_58();
  if (os_log_type_enabled(v10, v12))
  {
    uint64_t v21 = v8;
    unint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v20 = (void *)OUTLINED_FUNCTION_38(8LL);
    *(_DWORD *)unint64_t v13 = 138412290;
    id v22 = v11;
    id v14 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v13 + 4);
    *uint64_t v20 = v11;

    OUTLINED_FUNCTION_31_2(&dword_0, v10, v12, a3, v13);
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_30_3((uint64_t)v20, v16, v15);
    OUTLINED_FUNCTION_1_0((uint64_t)v20);
    uint64_t v17 = (uint64_t)v13;
    uint64_t v8 = v21;
    OUTLINED_FUNCTION_1_0(v17);
  }

  else
  {
  }

  id v22 = v11;
  uint64_t v23 = 0LL;
  char v24 = a4;
  id v18 = v11;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation);
  OUTLINED_FUNCTION_18_20(v19);
  OUTLINED_FUNCTION_9_18(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  OUTLINED_FUNCTION_24_0();
}

void AnonymousConnectionDelegate.executor(_:didFinishWith:error:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_35();
  uint64_t v9 = v8 - v7;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation.YieldResult);
  uint64_t v10 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  OUTLINED_FUNCTION_35();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = OUTLINED_FUNCTION_48();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_35();
  uint64_t v18 = v17 - v16;
  if (a3)
  {
    uint64_t v19 = v5;
    OUTLINED_FUNCTION_11_18();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v20 = (os_log_s *)__swift_project_value_buffer(v14, (uint64_t)static Logger.voiceCommands);
    OUTLINED_FUNCTION_11_18();
    uint64_t v21 = OUTLINED_FUNCTION_11_18();
    Logger.logObject.getter(v21);
    os_log_type_t v22 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_23_7(v22))
    {
      uint64_t v23 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v24 = OUTLINED_FUNCTION_38(32LL);
      uint64_t v47 = a3;
      uint64_t v48 = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      OUTLINED_FUNCTION_11_18();
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v26 = String.init<A>(describing:)(&v47, v25);
      unint64_t v28 = v27;
      uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v23 + 4);
      swift_bridgeObjectRelease(v28);
      OUTLINED_FUNCTION_43_0();
      OUTLINED_FUNCTION_43_0();
      OUTLINED_FUNCTION_31_2( &dword_0,  v20,  (os_log_type_t)v6,  "AnonymousConnectionDelegate finished with error: %s",  v23);
      OUTLINED_FUNCTION_30_3(v24, v29, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v24);
      OUTLINED_FUNCTION_1_0((uint64_t)v23);
    }

    else
    {
      OUTLINED_FUNCTION_43_0();
      OUTLINED_FUNCTION_43_0();
    }

    uint64_t v48 = a3;
    OUTLINED_FUNCTION_11_18();
    AsyncThrowingStream.Continuation.finish(throwing:)(&v48, v19);
    OUTLINED_FUNCTION_43_0();
    goto LABEL_16;
  }

  uint64_t v42 = v10;
  uint64_t v43 = v9;
  uint64_t v44 = v5;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v30 = __swift_project_value_buffer(v14, (uint64_t)static Logger.voiceCommands);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v18, v30, v14);
  uint64_t v31 = (uint64_t)a2;
  id v32 = a2;
  uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v41 = v6;
    uint64_t v35 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v40 = (void *)OUTLINED_FUNCTION_38(8LL);
    *(_DWORD *)uint64_t v35 = 138412290;
    if (!v31) {
      goto LABEL_18;
    }
    uint64_t v48 = (uint64_t)v32;
    id v36 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v35 + 4);
    *uint64_t v40 = v31;

    OUTLINED_FUNCTION_31_2(&dword_0, v33, v34, "AnonymousConnectionDelegate finished with result: %@", v35);
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_30_3((uint64_t)v40, v38, v37);
    OUTLINED_FUNCTION_1_0((uint64_t)v40);
    OUTLINED_FUNCTION_1_0((uint64_t)v35);
    uint64_t v6 = v41;
  }

  else
  {

    uint64_t v33 = (os_log_s *)v32;
  }

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))( v43,  v46 + OBJC_IVAR____TtC18SiriLinkFlowPlugin27AnonymousConnectionDelegate_continuation,  v44);
  if (v31)
  {
    uint64_t v48 = v31;
    uint64_t v49 = 0LL;
    char v50 = 6;
    id v39 = v32;
    AsyncThrowingStream.Continuation.yield(_:)(&v48, v44);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v43, v44);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v13, v45);
    uint64_t v48 = 0LL;
    AsyncThrowingStream.Continuation.finish(throwing:)(&v48, v44);
LABEL_16:
    OUTLINED_FUNCTION_24_0();
    return;
  }

  __break(1u);
LABEL_18:
  __break(1u);
}

uint64_t AnonymousConnectionDelegate.executorEnvironmentForViewSnippet(_:)(uint64_t a1)
{
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = v1;
  return swift_task_switch(AnonymousConnectionDelegate.executorEnvironmentForViewSnippet(_:), 0LL, 0LL);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 128);
  *(void *)(v3 + 136) = a1;
  *(void *)(v3 + 144) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    uint64_t v5 = AnonymousConnectionDelegate.executorEnvironmentForViewSnippet(_:);
  }

  else
  {

    uint64_t v5 = AnonymousConnectionDelegate.executorEnvironmentForViewSnippet(_:);
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t AnonymousConnectionDelegate.executorEnvironmentForViewSnippet(_:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = OUTLINED_FUNCTION_48();
  *(void *)(v1 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = __swift_project_value_buffer(v3, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_9_5();
  os_log_type_t v4 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_23_7(v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)uint64_t v5 = 0;
    OUTLINED_FUNCTION_47_1(&dword_0, v0, v2, "AnonymousConnectionDelegate executorEnvironmentForViewSnippet", v5);
    OUTLINED_FUNCTION_1_0((uint64_t)v5);
  }

  static Device.current.getter((void *)(v1 + 16), v6);
  uint64_t v7 = *(void *)(v1 + 40);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 16), v7);
  char v8 = dispatch thunk of DeviceState.isHomePod.getter(v7);
  uint64_t v9 = __swift_destroy_boxed_opaque_existential_1Tm((void *)(v1 + 16));
  if ((v8 & 1) != 0)
  {
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_45_0(v11))
    {
      uint64_t v12 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
      *(_WORD *)uint64_t v12 = 0;
      OUTLINED_FUNCTION_47_1( &dword_0,  v10,  (os_log_type_t)(v1 + 16),  "Executing on Homepod. Returning nil for view snippet environment.",  v12);
      OUTLINED_FUNCTION_1_0((uint64_t)v12);
    }

    return (*(uint64_t (**)(void))(v1 + 8))(0LL);
  }

  else
  {
    uint64_t v14 = (void *)(*(void *)(v1 + 104) + OBJC_IVAR____TtC18SiriLinkFlowPlugin27AnonymousConnectionDelegate_aceService);
    uint64_t v16 = v14[3];
    uint64_t v15 = v14[4];
    __swift_project_boxed_opaque_existential_1(v14, v16);
    id v17 = [objc_allocWithZone(SAUISnippetDisplayConfigurationRequest) init];
    *(void *)(v1 + 120) = v17;
    uint64_t v18 = (void *)swift_task_alloc(async function pointer to AceServiceInvokerAsync.submit<A>(_:)[1]);
    *(void *)(v1 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v18;
    uint64_t v19 = OUTLINED_FUNCTION_72( (uint64_t)v18,  (unint64_t *)&lazy cache variable for type metadata for SABaseCommand,  &OBJC_CLASS___SABaseCommand_ptr);
    *uint64_t v18 = v1;
    v18[1] = AnonymousConnectionDelegate.executorEnvironmentForViewSnippet(_:);
    return AceServiceInvokerAsync.submit<A>(_:)(v17, v16, v19, v15);
  }

{
  os_log_type_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  os_log_s *v16;
  os_log_type_t v17;
  BOOL v18;
  os_log_s *v19;
  uint8_t *v20;
  os_log_s *v21;
  uint64_t v22;
  os_log_type_t v2 = *(void *)(v1 + 136);
  uint64_t v3 = objc_opt_self(&OBJC_CLASS___SAUISnippetDisplayConfigurationResponse);
  os_log_type_t v4 = swift_dynamicCastObjCClass(v2, v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    uint64_t v6 = *(void **)(v1 + 136);
    uint64_t v7 = *(void **)(v1 + 96);
    OUTLINED_FUNCTION_72( v4,  &lazy cache variable for type metadata for LNSnippetEnvironment,  &OBJC_CLASS___LNSnippetEnvironment_ptr);
    char v8 = v6;
    uint64_t v9 = [v7 options];
    uint64_t v10 = [v9 environment];

    os_log_type_t v11 = [v10 localeIdentifier];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;

    uint64_t v15 = static LNSnippetEnvironment.make(from:localeIdentifier:)(v5, v12, v14);
    swift_bridgeObjectRelease(v14);
  }

  else
  {
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(0LL);
    id v17 = static os_log_type_t.error.getter();
    uint64_t v18 = OUTLINED_FUNCTION_45_0(v17);
    uint64_t v19 = *(os_log_s **)(v1 + 136);
    if (v18)
    {
      uint64_t v20 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
      *(_WORD *)uint64_t v20 = 0;
      OUTLINED_FUNCTION_47_1( &dword_0,  v16,  v0,  "SnippetDisplayConfigurationRequest got unexpected response, going with default snippet size",  v20);
      OUTLINED_FUNCTION_1_0((uint64_t)v20);
      uint64_t v21 = v16;
    }

    else
    {
      uint64_t v21 = *(os_log_s **)(v1 + 136);
      uint64_t v19 = v16;
    }

    OUTLINED_FUNCTION_72( v22,  &lazy cache variable for type metadata for LNSnippetEnvironment,  &OBJC_CLASS___LNSnippetEnvironment_ptr);
    uint64_t v15 = OUTLINED_FUNCTION_17_21(360.0);
  }

  return (*(uint64_t (**)(id))(v1 + 8))(v15);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v15;
  uint64_t v1 = *(void *)(v0 + 144);

  swift_errorRetain(v1);
  os_log_type_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 144);
    uint64_t v6 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v7 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v15 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_getErrorValue(v5, v0 + 80, v0 + 56);
    char v8 = Error.localizedDescription.getter(*(void *)(v0 + 64), *(void *)(v0 + 72));
    uint64_t v10 = v9;
    *(void *)(v0 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v6 + 4);
    swift_bridgeObjectRelease(v10);
    OUTLINED_FUNCTION_23_6();
    OUTLINED_FUNCTION_23_6();
    OUTLINED_FUNCTION_31_2( &dword_0,  v3,  v4,  "Hit error while trying to fetch snippet display config from UI layer %s",  v6);
    OUTLINED_FUNCTION_30_3(v7, v11, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v7);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);

    uint64_t v12 = OUTLINED_FUNCTION_23_6();
  }

  else
  {
    OUTLINED_FUNCTION_39_0();
    OUTLINED_FUNCTION_39_0();
    OUTLINED_FUNCTION_39_0();
  }

  OUTLINED_FUNCTION_72( v12,  &lazy cache variable for type metadata for LNSnippetEnvironment,  &OBJC_CLASS___LNSnippetEnvironment_ptr);
  uint64_t v13 = OUTLINED_FUNCTION_17_21(360.0);
  return (*(uint64_t (**)(id))(v0 + 8))(v13);
}

uint64_t @objc closure #1 in AnonymousConnectionDelegate.executorEnvironmentForViewSnippet(_:)( void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_2182A4;
  id v7 = a1;
  a3;
  char v8 = (void *)swift_task_alloc(v6);
  v3[5] = v8;
  *char v8 = v3;
  v8[1] = @objc closure #1 in AnonymousConnectionDelegate.executorEnvironmentForViewSnippet(_:);
  return AnonymousConnectionDelegate.executorEnvironmentForViewSnippet(_:)((uint64_t)v7);
}

uint64_t @objc closure #1 in AnonymousConnectionDelegate.executorEnvironmentForViewSnippet(_:)(void *a1)
{
  uint64_t v3 = *(void (***)(void, void))(*v1 + 32);
  uint64_t v5 = *(void **)(*v1 + 16);
  os_log_type_t v4 = *(void **)(*v1 + 24);
  uint64_t v7 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 40));

  ((void (**)(void, void *))v3)[2](v3, a1);
  _Block_release(v3);

  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t _runTaskForBridgedAsyncMethod(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for TaskPriority(0LL);
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 1LL, 1LL, v7);
  char v8 = (void *)swift_allocObject(&unk_1F6D78, 48LL, 7LL);
  v8[2] = 0LL;
  v8[3] = 0LL;
  v8[4] = a1;
  v8[5] = a2;
  uint64_t v9 = (void *)swift_allocObject(&unk_1F6DA0, 48LL, 7LL);
  v9[2] = 0LL;
  v9[3] = 0LL;
  v9[4] = &_sIeghH_IeAgH_TRTATu;
  v9[5] = v8;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5( (uint64_t)v6,  (uint64_t)&_sIeAgH_ytIeAgHr_TRTATu,  (uint64_t)v9);
  return swift_release();
}

uint64_t AnonymousConnectionDelegate.executor(_:shouldRunShowOutputAction:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v0 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.voiceCommands);
  uint64_t v1 = (os_log_s *)OUTLINED_FUNCTION_9_5();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)uint64_t v3 = 0;
    OUTLINED_FUNCTION_47_1(&dword_0, v1, v2, "AnonymousConnectionDelegate shouldRunShowOutputAction return false", v3);
    OUTLINED_FUNCTION_1_0((uint64_t)v3);
  }

  return 0LL;
}

uint64_t AnonymousConnectionDelegate.executor(_:needsContinueInAppWith:)(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation.YieldResult);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_46_11();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v6 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_9_5();
  os_log_type_t v7 = OUTLINED_FUNCTION_58();
  if (os_log_type_enabled(v2, v7))
  {
    char v8 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)char v8 = 0;
    OUTLINED_FUNCTION_47_1(&dword_0, v2, v7, "AnonymousConnectionDelegate needsContinueInAppWith request", v8);
    OUTLINED_FUNCTION_1_0((uint64_t)v8);
  }

  v12[0] = a2;
  v12[1] = 0LL;
  char v13 = 4;
  id v9 = a2;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation);
  AsyncThrowingStream.Continuation.yield(_:)(v12, v10);
  return OUTLINED_FUNCTION_9_18(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
}

void AnonymousConnectionDelegate.executor(_:needsAppProtectionUnlockWithCompletionHandler:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation.YieldResult);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_46_11();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v7 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_9_5();
  os_log_type_t v8 = OUTLINED_FUNCTION_58();
  if (os_log_type_enabled(v3, v8))
  {
    id v9 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)id v9 = 0;
    OUTLINED_FUNCTION_47_1(&dword_0, v3, v8, "AnonymousConnectionDelegate needsAppProtectionUnlock", v9);
    OUTLINED_FUNCTION_1_0((uint64_t)v9);
  }

  swift_retain(a3);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation);
  OUTLINED_FUNCTION_18_20(v10);
  OUTLINED_FUNCTION_9_18(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  OUTLINED_FUNCTION_24_0();
}

void AnonymousConnectionDelegate.init()()
{
}

uint64_t protocol witness for LinkConnection.perform(action:options:) in conformance LNConnection( uint64_t a1, uint64_t a2)
{
  return LNConnection.perform(action:options:)(a1, a2);
}

uint64_t _sIeghH_IeAgH_TR(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc(a3[1]);
  *(void *)(v3 + 16) = v4;
  void *v4 = v3;
  v4[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnEmptyParse(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return v6();
}

uint64_t _sIeAgH_ytIeAgHr_TR(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnEmptyParse(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return v7();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload(a1, 1LL, v6);
  if ((_DWORD)EnumTagSinglePayload == 1)
  {
    outlined destroy of TaskPriority?(a1);
    uint64_t v8 = 7168LL;
  }

  else
  {
    unsigned __int8 v9 = TaskPriority.rawValue.getter(EnumTagSinglePayload);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v8 = v9 | 0x1C00LL;
  }

  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v10);
    uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
    uint64_t v15 = v14;
    swift_unknownObjectRelease(v10);
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = 0LL;
  }

  uint64_t v16 = swift_allocObject(&unk_1F6DC8, 32LL, 7LL);
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  if (v15 | v13)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    id v17 = v19;
    _OWORD v19[2] = v13;
    v19[3] = v15;
  }

  else
  {
    id v17 = 0LL;
  }

  return swift_task_create( v8,  v17,  (char *)&type metadata for () + 8,  &_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATu,  v16);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_()
{
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

id outlined copy of LinkConnectionEvent(id result, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
      uint64_t result = result;
      break;
    case 5:
      uint64_t result = (id)swift_retain(a2);
      break;
    default:
      return result;
  }

  return result;
}

void destroy for LinkConnectionEvent(uint64_t a1)
{
}

void outlined consume of LinkConnectionEvent(void *a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:

      break;
    case 5:
      swift_release(a2);
      break;
    default:
      return;
  }

void initializeBufferWithCopyOfBuffer for LinkConnectionEvent(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of LinkConnectionEvent(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  OUTLINED_FUNCTION_2();
}

uint64_t assignWithCopy for LinkConnectionEvent(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of LinkConnectionEvent(*(id *)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of LinkConnectionEvent(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for LinkConnectionEvent(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of LinkConnectionEvent(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkConnectionEvent(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFA && *(_BYTE *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 249;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 6) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkConnectionEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 250;
    *(void *)(result + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0LL;
    if (a3 >= 0xFA) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFA) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for LinkConnectionEvent(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for LinkConnectionEvent(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for LinkConnectionEvent()
{
  return &type metadata for LinkConnectionEvent;
}

uint64_t ObjC metadata update function for AnonymousConnectionDelegate()
{
  return type metadata accessor for AnonymousConnectionDelegate(0LL);
}

uint64_t type metadata accessor for AnonymousConnectionDelegate(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for AnonymousConnectionDelegate;
  if (!type metadata singleton initialization cache for AnonymousConnectionDelegate) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AnonymousConnectionDelegate);
  }
  return result;
}

void type metadata completion function for AnonymousConnectionDelegate(uint64_t a1)
{
  v4[0] = "(";
  type metadata accessor for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    swift_updateClassMetadata2(a1, 256LL, 2LL, v4, a1 + 80);
  }

void type metadata accessor for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation(uint64_t a1)
{
  if (!lazy cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation)
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    unint64_t v3 = type metadata accessor for AsyncThrowingStream.Continuation( a1,  &type metadata for LinkConnectionEvent,  v2,  &protocol self-conformance witness table for Error);
    if (!v4) {
      atomic_store( v3,  (unint64_t *)&lazy cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation);
    }
  }

uint64_t sub_90960()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool) -> ()( char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16LL))(*(void *)(v1 + 16), a1 & 1);
}

uint64_t sub_90998()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t partial apply for @objc closure #1 in AnonymousConnectionDelegate.executorEnvironmentForViewSnippet(_:)()
{
  uint64_t v2 = (void *)v0[2];
  unint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_21835C);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makePromptForTCCAcceptance(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return ((uint64_t (*)(void *, void *, void *))((char *)&async function pointer to @objc closure #1 in AnonymousConnectionDelegate.executorEnvironmentForViewSnippet(_:)
                                                         + async function pointer to @objc closure #1 in AnonymousConnectionDelegate.executorEnvironmentForViewSnippet(_:)))( v2,  v3,  v4);
}

uint64_t _sIeghH_IeAgH_TRTA()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_218374);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnEmptyParse(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&_sIeghH_IeAgH_TRTu + _sIeghH_IeAgH_TRTu))( v2,  v3,  v4);
}

uint64_t objectdestroy_9Tm()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t _sIeAgH_ytIeAgHr_TRTA(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  char v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_218384);
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnEmptyParse(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sIeAgH_ytIeAgHr_TRTu
                                                                   + _sIeAgH_ytIeAgHr_TRTu))( a1,  v4,  v5,  v6);
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_90BA8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_218394);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for VoiceShortcutClientWrapping.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:) in conformance VoiceShortcutClientWrapper;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu))( a1,  v4);
}

uint64_t sub_90C3C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void partial apply for closure #1 in closure #1 in LNConnection.perform(action:options:)(uint64_t a1)
{
}

uint64_t OUTLINED_FUNCTION_9_18@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_11_18()
{
  return swift_errorRetain(v0);
}

id OUTLINED_FUNCTION_17_21(double a1)
{
  return static LNSnippetEnvironment.make(size:)(a1, 9.22337204e18);
}

uint64_t OUTLINED_FUNCTION_18_20(uint64_t a1)
{
  return AsyncThrowingStream.Continuation.yield(_:)(v1 - 104, a1);
}

void VoiceCommandNLContextProvider.makeContextForConfirmation(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_29_15();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_18_11();
  NLContextUpdate.init()();
  unint64_t v3 = OUTLINED_FUNCTION_10_18();
  NLContextUpdate.weightedPromptTargetDomain.setter(v3);
  OUTLINED_FUNCTION_1_22();
  OUTLINED_FUNCTION_43_12();
  NLContextUpdate.weightedPromptAbortValues.setter(&outlined read-only object #0 of VoiceCommandNLContextProvider.makeContextForConfirmation(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:));
  NLContextUpdate.weightedPromptResponseTargets.setter(&outlined read-only object #1 of VoiceCommandNLContextProvider.makeContextForConfirmation(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:));
  NLContextUpdate.weightedPromptResponseOptions.setter(&outlined read-only object #2 of VoiceCommandNLContextProvider.makeContextForConfirmation(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:));
  VoiceCommandNLContextProvider.buildSDAForConfirmation(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:)();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  unint64_t v5 = (*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = OUTLINED_FUNCTION_14_25(v4, v5 + *(void *)(v2 + 72));
  *(_OWORD *)(v6 + 16) = xmmword_17E650;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 16))(v6 + v5, v0, v1);
  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_17_7(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_24_0();
}

uint64_t VoiceCommandNLContextProvider.makeContextForDisambiguation(items:)()
{
  uint64_t v0 = OUTLINED_FUNCTION_29_15();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  NLContextUpdate.init()(v2);
  unint64_t v5 = OUTLINED_FUNCTION_10_18();
  NLContextUpdate.weightedPromptTargetDomain.setter(v5);
  OUTLINED_FUNCTION_1_22();
  OUTLINED_FUNCTION_43_12();
  VoiceCommandNLContextProvider.buildSDAForDisambiguation(items:)();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  unint64_t v7 = (*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v8 = OUTLINED_FUNCTION_14_25(v6, v7 + *(void *)(v1 + 72));
  *(_OWORD *)(v8 + 16) = xmmword_17E650;
  OUTLINED_FUNCTION_75(v8 + v7, (uint64_t)v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
  NLContextUpdate.nluSystemDialogActs.setter(v8);
  return OUTLINED_FUNCTION_20_23((uint64_t)v4, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
}

void VoiceCommandNLContextProvider.getDisplayHints(items:)()
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SemanticValue?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v3);
  uint64_t v39 = (uint64_t)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DisplayHint(0LL);
  uint64_t v37 = *(void *)(v5 - 8);
  uint64_t v38 = v5;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_39_15();
  uint64_t v7 = type metadata accessor for SemanticValue(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_61_6();
  uint64_t v36 = v9;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v40 = _swiftEmptyArrayStorage;
  uint64_t v35 = *(void *)(v2 + 16);
  if (v35)
  {
    unint64_t v13 = type metadata accessor for INIntentResolutionResult();
    unint64_t v14 = 0LL;
    uint64_t v15 = (void *)(v2 + 32);
    unint64_t v30 = 0x8000000000194CE0LL;
    unint64_t v31 = v13;
    uint64_t v33 = v8;
    uint64_t v34 = v0;
    uint64_t v32 = v7;
    do
    {
      uint64_t v16 = v7;
      uint64_t v17 = v15[3];
      uint64_t v18 = v15[4];
      __swift_project_boxed_opaque_existential_1(v15, v17);
      uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 32))(v17, v18);
      SemanticValue.init(string:label:)(v19, v20, 0xD000000000000010LL, v30);
      uint64_t v21 = v39;
      OUTLINED_FUNCTION_42_9(v39);
      __swift_storeEnumTagSinglePayload(v21, 0LL, 1LL, v16);
      uint64_t v22 = v36;
      OUTLINED_FUNCTION_42_9(v36);
      DisplayHint.init(idValue:displayValue:)(v21, v22);
      uint64_t v23 = (uint64_t)v40;
      if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) == 0) {
        uint64_t v23 = OUTLINED_FUNCTION_40_16(0LL, *(void *)(v23 + 16) + 1LL);
      }
      unint64_t v25 = *(void *)(v23 + 16);
      unint64_t v24 = *(void *)(v23 + 24);
      if (v25 >= v24 >> 1) {
        uint64_t v23 = OUTLINED_FUNCTION_40_16(v24 > 1, v25 + 1);
      }
      *(void *)(v23 + 16) = v25 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v37 + 32))( v23 + ((*(unsigned __int8 *)(v37 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))
      + *(void *)(v37 + 72) * v25,
        v34,
        v38);
      uint64_t v40 = (void *)v23;
      uint64_t v26 = v35;
      static INIntentResolutionResult.inferOrdinalDisplayValues(index:count:)(v14, v35);
      uint64_t v28 = v27;
      __chkstk_darwin(v27);
      *(&v29 - __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = (uint64_t)v12;
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_11SiriKitFlow11DisplayHintVs5NeverOTg5( (void (*)(void *, __n128))partial apply for closure #1 in VoiceCommandNLContextProvider.getDisplayHints(items:),  (uint64_t)(&v29 - 4),  v28);
      swift_bridgeObjectRelease();
      specialized Array.append<A>(contentsOf:)();
      uint64_t v7 = v32;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v32);
      v15 += 5;
      ++v14;
    }

    while (v26 != v14);
  }

  OUTLINED_FUNCTION_24_0();
}

void VoiceCommandNLContextProvider.buildSDAForConfirmation(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:)()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_38_15();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_39_15();
  uint64_t v6 = OUTLINED_FUNCTION_44_8();
  if ((v6 & 1) != 0)
  {
    if (v4 && v2)
    {
      VoiceCommandNLContextProvider.buildSDAForActionConfirmationWithCustomLabel(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:)();
      return;
    }

    VoiceCommandNLContextProvider.buildSDAForActionConfirmationWithYesNo()();
  }

  else
  {
    uint64_t v7 = Siri_Nlu_External_SystemDialogAct.init()(v6);
    Siri_Nlu_External_SystemOffered.init()(v7);
    Siri_Nlu_External_SystemDialogAct.offered.setter(v0);
  }

  OUTLINED_FUNCTION_24_0();
}

void VoiceCommandNLContextProvider.buildSDAForActionConfirmationWithYesNo()()
{
  uint64_t v32 = v4;
  uint64_t v5 = OUTLINED_FUNCTION_38_15();
  uint64_t v30 = *(void *)(v5 - 8);
  uint64_t v31 = v5;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_61_6();
  uint64_t v29 = v7;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v28 = OUTLINED_FUNCTION_30_15();
  uint64_t v33 = *(void *)(v28 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_17_22();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_18_21();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v13);
  uint64_t v14 = OUTLINED_FUNCTION_16_21();
  uint64_t v15 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed(v14);
  uint64_t v27 = *(void *)(v15 - 8);
  uint64_t v16 = v27;
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_53_10();
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v26 - v18;
  uint64_t v20 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_51(v20);
  OUTLINED_FUNCTION_32_12();
  Siri_Nlu_External_UserWantedToProceed.init()();
  UsoTaskBuilder.asUsoGraph()();
  uint64_t v21 = Siri_Nlu_External_UserWantedToProceed.reference.setter(v0);
  Siri_Nlu_External_UserDialogAct.init()(v21);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 16))(v1, v19, v15);
  uint64_t v22 = Siri_Nlu_External_UserDialogAct.wantedToProceed.setter(v1);
  Siri_Nlu_External_SystemOffered.init()(v22);
  uint64_t v23 = v28;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v3, v2, v28);
  Siri_Nlu_External_SystemOffered.offeredAct.setter(v3);
  OUTLINED_FUNCTION_34_14();
  uint64_t v25 = v29;
  uint64_t v24 = v30;
  OUTLINED_FUNCTION_75(v29, (uint64_t)v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16));
  Siri_Nlu_External_SystemDialogAct.offered.setter(v25);
  swift_release();
  OUTLINED_FUNCTION_20_23((uint64_t)v10, *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8));
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v2, v23);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v19, v15);
  OUTLINED_FUNCTION_24_0();
}

void VoiceCommandNLContextProvider.buildSDAForActionConfirmationWithCustomLabel(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:)()
{
  v10[1] = v1;
  uint64_t v2 = type metadata accessor for Siri_Nlu_External_SystemGaveOptions(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_53_10();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v10 - v5;
  VoiceCommandNLContextProvider.buildTaskFor(label:alternatives:confirmation:)();
  VoiceCommandNLContextProvider.buildTaskFor(label:alternatives:confirmation:)();
  Siri_Nlu_External_SystemGaveOptions.init()();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserDialogAct>);
  uint64_t v8 = *(void *)(OUTLINED_FUNCTION_30_15() - 8);
  uint64_t v9 = swift_allocObject( v7,  ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
       + 2LL * *(void *)(v8 + 72),
         *(unsigned __int8 *)(v8 + 80) | 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_17E660;
  UsoTaskBuilder_execute_common_VoiceCommand.toUserDialogAct()();
  UsoTaskBuilder_execute_common_VoiceCommand.toUserDialogAct()();
  Siri_Nlu_External_SystemGaveOptions.choices.setter(v9);
  OUTLINED_FUNCTION_34_14();
  OUTLINED_FUNCTION_75(v0, (uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  Siri_Nlu_External_SystemDialogAct.gaveOptions.setter(v0);
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_20_23((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_24_0();
}

void VoiceCommandNLContextProvider.makeContextForNeedsValue(taskBuilder:)(uint64_t a1)
{
  uint64_t v8 = OUTLINED_FUNCTION_44_8();
  if ((v8 & 1) != 0 && a1)
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
    *(_OWORD *)(OUTLINED_FUNCTION_14_25( v9,  ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
                + *(void *)(v4 + 72))
              + 16) = xmmword_17E650;
    swift_retain(a1);
    VoiceCommandNLContextProvider.buildSDAForNeedsValue(taskBuilder:)();
    OUTLINED_FUNCTION_22_13();
    swift_release();
  }

  else
  {
    uint64_t v10 = Siri_Nlu_External_SystemDialogAct.init()(v8);
    Siri_Nlu_External_SystemPrompted.init()(v10);
    Siri_Nlu_External_SystemDialogAct.prompted.setter(v3);
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
    unint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v13 = OUTLINED_FUNCTION_14_25(v11, v12 + *(void *)(v4 + 72));
    *(_OWORD *)(v13 + 16) = xmmword_17E650;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 16))(v13 + v12, v2, v1);
    OUTLINED_FUNCTION_22_13();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v1);
    OUTLINED_FUNCTION_8_2();
  }

void VoiceCommandNLContextProvider.buildSDAForNeedsValue(taskBuilder:)()
{
  uint64_t v3 = OUTLINED_FUNCTION_25();
  type metadata accessor for Siri_Nlu_External_SystemPrompted(v3);
  OUTLINED_FUNCTION_9_19();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_53_10();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_36_15();
  Siri_Nlu_External_SystemPrompted.init()();
  UsoTaskBuilder.asUsoGraph()();
  uint64_t v6 = Siri_Nlu_External_SystemPrompted.target.setter(v0);
  Siri_Nlu_External_SystemDialogAct.init()(v6);
  OUTLINED_FUNCTION_19_15();
  Siri_Nlu_External_SystemDialogAct.prompted.setter(v1);
  OUTLINED_FUNCTION_31_14();
  OUTLINED_FUNCTION_8_2();
}

void VoiceCommandNLContextProvider.makeContextForBoolNeedsValuePrompt(intent:parameter:)()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v31 = v8;
  uint64_t v9 = OUTLINED_FUNCTION_29_15();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_18_11();
  uint64_t v11 = type metadata accessor for NLContextUpdate(0LL);
  uint64_t v29 = *(void *)(v11 - 8);
  uint64_t v30 = v11;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_27_18();
  NLContextUpdate.init()();
  unint64_t v13 = OUTLINED_FUNCTION_10_18();
  NLContextUpdate.weightedPromptTargetDomain.setter(v13);
  OUTLINED_FUNCTION_1_22();
  OUTLINED_FUNCTION_43_12();
  NLContextUpdate.weightedPromptAbortValues.setter(&outlined read-only object #0 of VoiceCommandNLContextProvider.makeContextForBoolNeedsValuePrompt(intent:parameter:));
  NLContextUpdate.weightedPromptResponseTargets.setter(&outlined read-only object #1 of VoiceCommandNLContextProvider.makeContextForBoolNeedsValuePrompt(intent:parameter:));
  uint64_t v14 = NLContextUpdate.weightedPromptResponseOptions.setter(&outlined read-only object #2 of VoiceCommandNLContextProvider.makeContextForBoolNeedsValuePrompt(intent:parameter:));
  if (!v7 || !v3) {
    goto LABEL_6;
  }
  id v15 = v7;
  uint64_t v16 = (void *)INIntent.BOOLeanAttributeMetadata(parameterName:)(v5, v3);
  if (!v16)
  {

LABEL_6:
    (*(void (**)(uint64_t))(*(void *)v0 + 152LL))(v14);
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
    uint64_t v27 = (__n128 *)OUTLINED_FUNCTION_8_23(v26);
    OUTLINED_FUNCTION_13_17(v27, (__n128)xmmword_17E650);
    OUTLINED_FUNCTION_33_14();
    goto LABEL_7;
  }

  uint64_t v17 = v16;
  id v18 = [v16 localizedTrueDisplayName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v15;
  uint64_t v20 = v19;

  id v21 = [v17 localizedFalseDisplayName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;

  VoiceCommandNLContextProvider.buildSDAForActionConfirmationWithCustomLabel(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:)();
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  uint64_t v25 = (__n128 *)OUTLINED_FUNCTION_8_23(v24);
  OUTLINED_FUNCTION_13_17(v25, (__n128)xmmword_17E650);
  OUTLINED_FUNCTION_33_14();

LABEL_7:
  OUTLINED_FUNCTION_17_7(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(v31, v1, v30);
  OUTLINED_FUNCTION_24_0();
}

void VoiceCommandNLContextProvider.buildSDAForBoolNeedsValuePrompt()()
{
  uint64_t v35 = v3;
  uint64_t v4 = OUTLINED_FUNCTION_38_15();
  uint64_t v33 = *(void *)(v4 - 8);
  uint64_t v34 = v4;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_61_6();
  uint64_t v32 = v6;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v30 - v8;
  uint64_t v31 = OUTLINED_FUNCTION_30_15();
  uint64_t v10 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  OUTLINED_FUNCTION_17_22();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_18_21();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v12);
  uint64_t v13 = OUTLINED_FUNCTION_16_21();
  uint64_t v14 = type metadata accessor for Siri_Nlu_External_UserStatedTask(v13);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v30 = v14;
  uint64_t v16 = __chkstk_darwin(v14);
  id v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  id v21 = (char *)&v30 - v20;
  Siri_Nlu_External_UserStatedTask.init()(v19);
  uint64_t v22 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_51(v22);
  OUTLINED_FUNCTION_32_12();
  UsoTaskBuilder.asUsoGraph()();
  swift_release();
  uint64_t v23 = Siri_Nlu_External_UserStatedTask.task.setter(v0);
  Siri_Nlu_External_UserDialogAct.init()(v23);
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v21, v14);
  uint64_t v24 = Siri_Nlu_External_UserDialogAct.userStatedTask.setter(v18);
  Siri_Nlu_External_SystemOffered.init()(v24);
  uint64_t v25 = v10;
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  uint64_t v27 = v31;
  v26(v2, v1, v31);
  Siri_Nlu_External_SystemOffered.offeredAct.setter(v2);
  OUTLINED_FUNCTION_34_14();
  uint64_t v29 = v32;
  uint64_t v28 = v33;
  OUTLINED_FUNCTION_75(v32, (uint64_t)v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 16));
  Siri_Nlu_External_SystemDialogAct.offered.setter(v29);
  OUTLINED_FUNCTION_20_23((uint64_t)v9, *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v1, v27);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v21, v30);
  OUTLINED_FUNCTION_24_0();
}

void VoiceCommandNLContextProvider.buildSDAForDisambiguation(items:)()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = OUTLINED_FUNCTION_30_15();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_SystemGaveOptions(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)v29 - v14;
  Siri_Nlu_External_SystemGaveOptions.init()(v13);
  uint64_t v16 = OUTLINED_FUNCTION_44_8();
  if ((v16 & 1) == 0) {
    goto LABEL_21;
  }
  uint64_t v30 = v15;
  uint64_t v31 = v12;
  uint64_t v32 = v9;
  uint64_t v33 = v8;
  uint64_t v37 = _swiftEmptyArrayStorage;
  uint64_t v17 = *(void *)(v1 + 16);
  if (v17)
  {
    uint64_t v18 = v1 + 32;
    OUTLINED_FUNCTION_28_8();
    do
    {
      outlined init with copy of DeviceState(v18, (uint64_t)v34);
      uint64_t v19 = v35;
      uint64_t v20 = v36;
      __swift_project_boxed_opaque_existential_1(v34, v35);
      uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 40))(v19, v20);
      __swift_destroy_boxed_opaque_existential_1Tm(v34);
      specialized Array.append<A>(contentsOf:)(v21);
      v18 += 40LL;
      --v17;
    }

    while (v17);
    OUTLINED_FUNCTION_28_4();
    uint64_t v22 = (uint64_t)v37;
  }

  else
  {
    uint64_t v22 = (uint64_t)_swiftEmptyArrayStorage;
  }

  if (!((unint64_t)v22 >> 62))
  {
    uint64_t v23 = *(void *)((char *)&dword_10 + (v22 & 0xFFFFFFFFFFFFF8LL));
    if (v23) {
      goto LABEL_9;
    }
LABEL_19:
    OUTLINED_FUNCTION_28_4();
    uint64_t v25 = _swiftEmptyArrayStorage;
LABEL_20:
    uint64_t v15 = v30;
    uint64_t v16 = Siri_Nlu_External_SystemGaveOptions.choices.setter(v25);
    uint64_t v9 = v32;
    uint64_t v12 = v31;
LABEL_21:
    Siri_Nlu_External_SystemDialogAct.init()(v16);
    OUTLINED_FUNCTION_75((uint64_t)v12, (uint64_t)v15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16));
    Siri_Nlu_External_SystemDialogAct.gaveOptions.setter(v12);
    OUTLINED_FUNCTION_20_23((uint64_t)v15, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
    OUTLINED_FUNCTION_24_0();
    return;
  }

  if (v22 < 0) {
    uint64_t v28 = v22;
  }
  else {
    uint64_t v28 = v22 & 0xFFFFFFFFFFFFFF8LL;
  }
  OUTLINED_FUNCTION_28_8();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter(v28);
  OUTLINED_FUNCTION_28_4();
  if (!v23) {
    goto LABEL_19;
  }
LABEL_9:
  v34[0] = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v23 & ~(v23 >> 63),  0LL);
  if ((v23 & 0x8000000000000000LL) == 0)
  {
    v29[1] = v3;
    uint64_t v24 = 0LL;
    uint64_t v25 = (void *)v34[0];
    do
    {
      swift_retain(*(void *)(v22 + 8 * v24 + 32));
      UsoEntityBuilder_common_VoiceCommandPayload.toUserDialogAct()();
      swift_release();
      v34[0] = v25;
      unint64_t v27 = v25[2];
      unint64_t v26 = v25[3];
      if (v27 >= v26 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v26 > 1,  v27 + 1,  1LL);
        uint64_t v25 = (void *)v34[0];
      }

      ++v24;
      v25[2] = v27 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))( (unint64_t)v25 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
      + *(void *)(v5 + 72) * v27,
        v7,
        v4);
    }

    while (v23 != v24);
    OUTLINED_FUNCTION_28_4();
    goto LABEL_20;
  }

  __break(1u);
}

unint64_t type metadata accessor for INIntentResolutionResult()
{
  unint64_t result = lazy cache variable for type metadata for INIntentResolutionResult;
  if (!lazy cache variable for type metadata for INIntentResolutionResult)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___INIntentResolutionResult);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INIntentResolutionResult);
  }

  return result;
}

void VoiceCommandNLContextProvider.buildTaskFor(label:alternatives:confirmation:)()
{
  char v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = type metadata accessor for UsoIdentifier(0LL);
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_53_1();
  uint64_t v10 = type metadata accessor for UsoEntityBuilder_common_VoiceCommand(0LL);
  OUTLINED_FUNCTION_51(v10);
  uint64_t v11 = UsoEntityBuilder_common_VoiceCommand.init()();
  dispatch thunk of UsoEntityBuilder_common_VoiceCommand.setName(value:)(v8, v6);
  if ((v2 & 1) != 0) {
    uint64_t v12 = 0x747065636361LL;
  }
  else {
    uint64_t v12 = 0x7463656A6572LL;
  }
  UsoIdentifier.init(value:appBundleId:namespace:)( v12,  0xE600000000000000LL,  0xD000000000000015LL,  0x80000000001953D0LL,  0xD000000000000018LL,  0x8000000000194CA0LL);
  dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)(v0);
  OUTLINED_FUNCTION_41_16();
  uint64_t v13 = *(void *)(v4 + 16);
  if (v13)
  {
    swift_bridgeObjectRetain(v4);
    uint64_t v18 = v4;
    uint64_t v14 = (uint64_t *)(v4 + 40);
    do
    {
      uint64_t v15 = *(v14 - 1);
      uint64_t v16 = *v14;
      OUTLINED_FUNCTION_28_8();
      UsoIdentifier.init(value:appBundleId:namespace:)(v15, v16, 0xD00000000000001BLL, 0x80000000001953F0LL, 0LL, 0LL);
      dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)(v0);
      OUTLINED_FUNCTION_41_16();
      v14 += 2;
      --v13;
    }

    while (v13);
    swift_bridgeObjectRelease(v18);
  }

  uint64_t v17 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_51(v17);
  OUTLINED_FUNCTION_32_12();
  dispatch thunk of Uso_VerbTemplateBuilder_ReferenceVoiceCommandPayload.setReference(value:)(v11);
  swift_release();
  OUTLINED_FUNCTION_24_0();
}

uint64_t closure #1 in VoiceCommandNLContextProvider.getDisplayHints(items:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SemanticValue?);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for SemanticValue(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v18 - v12;
  uint64_t v14 = *a1;
  uint64_t v15 = a1[1];
  swift_bridgeObjectRetain(v15);
  SemanticValue.init(string:label:)(v14, v15, 0xD000000000000015LL, 0x8000000000194CC0LL);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v16(v6, a2, v7);
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0LL, 1LL, v7);
  v16(v11, (uint64_t)v13, v7);
  DisplayHint.init(idValue:displayValue:)(v6, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

void UsoTaskBuilder_execute_common_VoiceCommand.toUserDialogAct()()
{
  uint64_t v3 = OUTLINED_FUNCTION_25();
  type metadata accessor for Siri_Nlu_External_UserStatedTask(v3);
  OUTLINED_FUNCTION_9_19();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_53_10();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_36_15();
  Siri_Nlu_External_UserStatedTask.init()();
  UsoTaskBuilder.asUsoGraph()();
  uint64_t v6 = Siri_Nlu_External_UserStatedTask.task.setter(v0);
  Siri_Nlu_External_UserDialogAct.init()(v6);
  OUTLINED_FUNCTION_19_15();
  Siri_Nlu_External_UserDialogAct.userStatedTask.setter(v1);
  OUTLINED_FUNCTION_31_14();
  OUTLINED_FUNCTION_8_2();
}

uint64_t UsoEntityBuilder_common_VoiceCommandPayload.toUserDialogAct()()
{
  uint64_t v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_51(v1);
  OUTLINED_FUNCTION_32_12();
  dispatch thunk of Uso_VerbTemplateBuilder_ReferenceVoiceCommandPayload.setPayload(value:)( v0,  &protocol witness table for UsoEntityBuilder_common_VoiceCommandPayload);
  UsoTaskBuilder_execute_common_VoiceCommand.toUserDialogAct()();
  return swift_release();
}

uint64_t partial apply for closure #1 in VoiceCommandNLContextProvider.getDisplayHints(items:)(uint64_t *a1)
{
  return closure #1 in VoiceCommandNLContextProvider.getDisplayHints(items:)(a1, *(void *)(v1 + 16));
}

uint64_t type metadata accessor for VoiceCommandNLContextProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin29VoiceCommandNLContextProvider);
}

uint64_t OUTLINED_FUNCTION_1_22()
{
  return NLContextUpdate.currentDomainName.setter(0x6D6F436563696F76LL, 0xED000073646E616DLL);
}

uint64_t OUTLINED_FUNCTION_8_23(uint64_t a1)
{
  return swift_allocObject( a1,  ((*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
         + *(void *)(v1 + 72),
           *(unsigned __int8 *)(v1 + 80) | 7LL);
}

  ;
}

unint64_t OUTLINED_FUNCTION_10_18()
{
  return 0xD00000000000001FLL;
}

uint64_t OUTLINED_FUNCTION_13_17(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)a1 + v2, v4, v3);
}

uint64_t OUTLINED_FUNCTION_14_25(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, v2 | 7);
}

uint64_t OUTLINED_FUNCTION_16_21()
{
  return 0LL;
}

  ;
}

uint64_t OUTLINED_FUNCTION_18_21()
{
  return type metadata accessor for Siri_Nlu_External_UsoGraph(0LL);
}

uint64_t OUTLINED_FUNCTION_19_15()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v0);
}

uint64_t OUTLINED_FUNCTION_20_23@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_22_13()
{
  return NLContextUpdate.nluSystemDialogActs.setter(v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_29_15()
{
  return type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL);
}

uint64_t OUTLINED_FUNCTION_30_15()
{
  return type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
}

uint64_t OUTLINED_FUNCTION_31_14()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_32_12()
{
  return UsoTaskBuilder_execute_common_VoiceCommand.init()();
}

uint64_t OUTLINED_FUNCTION_33_14()
{
  return NLContextUpdate.nluSystemDialogActs.setter(v0);
}

uint64_t OUTLINED_FUNCTION_34_14()
{
  return Siri_Nlu_External_SystemDialogAct.init()();
}

  ;
}

uint64_t OUTLINED_FUNCTION_38_15()
{
  return type metadata accessor for Siri_Nlu_External_SystemOffered(0LL);
}

uint64_t OUTLINED_FUNCTION_39_17()
{
  return type metadata accessor for Siri_Nlu_External_UsoGraph(0LL);
}

uint64_t OUTLINED_FUNCTION_40_16(uint64_t a1, uint64_t a2)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1LL, v2);
}

uint64_t OUTLINED_FUNCTION_41_16()
{
  return v2(v1, v0);
}

uint64_t OUTLINED_FUNCTION_42_9(uint64_t a1)
{
  return v1(a1, v3, v2);
}

uint64_t OUTLINED_FUNCTION_43_12()
{
  return NLContextUpdate.weightedPromptStrict.setter(1LL);
}

uint64_t OUTLINED_FUNCTION_44_8()
{
  return SiriLinkFlowFeatureFlags.isEnabled.getter(0LL);
}

uint64_t UserDefaultsWrapper.__allocating_init()()
{
  uint64_t v1 = swift_allocObject(v0, 56LL, 7LL);
  UserDefaultsWrapper.init()();
  return v1;
}

void *UserDefaultsWrapper.init()()
{
  v0[2] = 0x75616665444D4143LL;
  v0[3] = 0xEB0000000073746CLL;
  v0[4] = 0xD000000000000021LL;
  v0[5] = 0x8000000000192150LL;
  v0[6] = [objc_allocWithZone(NSUserDefaults) init];
  return v0;
}

Swift::Void __swiftcall UserDefaultsWrapper.recordFirstRunShown(bundleId:)(Swift::String bundleId)
{
  uint64_t v2 = v1;
  object = bundleId._object;
  uint64_t countAndFlagsBits = bundleId._countAndFlagsBits;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
  uint64_t v6 = swift_bridgeObjectRetain_n(object, 2LL);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    v28[0] = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    OUTLINED_FUNCTION_80();
    uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v9 + 4);
    swift_bridgeObjectRelease_n(object, 3LL);
    _os_log_impl(&dword_0, v7, v8, "Storing ambiguous first run shown for %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v10);
    OUTLINED_FUNCTION_1_0((uint64_t)v9);
  }

  else
  {

    swift_bridgeObjectRelease_n(object, 2LL);
  }

  uint64_t v11 = (void *)v2[6];
  NSString v12 = OUTLINED_FUNCTION_3_28();
  id v13 = [v11 dictionaryForKey:v12];

  uint64_t v14 = (char *)&type metadata for Any + 8;
  if (v13)
  {
    uint64_t v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v13,  &type metadata for String,  v14,  &protocol witness table for String);
  }

  else
  {
    uint64_t v15 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v14,  &protocol witness table for String);
  }

  uint64_t v30 = v15;
  uint64_t v17 = v2[4];
  uint64_t v16 = v2[5];
  swift_bridgeObjectRetain(v16);
  specialized Dictionary.subscript.getter(v17, v16, v15, v28);
  swift_bridgeObjectRelease(v16);
  if (v29)
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (swift_dynamicCast(&v27, v28, (char *)&type metadata for Any + 8, v18, 6LL))
    {
      uint64_t v19 = v27;
      goto LABEL_14;
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)v28);
  }

  uint64_t v19 = _swiftEmptyArrayStorage;
LABEL_14:
  OUTLINED_FUNCTION_80();
  if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
  {
    OUTLINED_FUNCTION_1_23();
    uint64_t v19 = v25;
  }

  unint64_t v20 = v19[2];
  if (v20 >= v19[3] >> 1)
  {
    OUTLINED_FUNCTION_1_23();
    uint64_t v19 = v26;
  }

  _OWORD v19[2] = v20 + 1;
  uint64_t v21 = &v19[2 * v20];
  v21[4] = countAndFlagsBits;
  v21[5] = object;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  v28[0] = (uint64_t)v19;
  swift_bridgeObjectRetain(v16);
  specialized Dictionary.subscript.setter((uint64_t)v28);
  uint64_t v22 = v30;
  OUTLINED_FUNCTION_80();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v22);
  NSString v24 = OUTLINED_FUNCTION_3_28();
  [v11 setObject:isa forKey:v24];
  swift_bridgeObjectRelease(v22);
}

uint64_t UserDefaultsWrapper.deinit()
{
  return v0;
}

uint64_t UserDefaultsWrapper.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t type metadata accessor for UserDefaultsWrapper()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin19UserDefaultsWrapper);
}

void OUTLINED_FUNCTION_1_23()
{
}

NSString OUTLINED_FUNCTION_3_28()
{
  return String._bridgeToObjectiveC()();
}

uint64_t RunCustomIntentReadingDelegate.__allocating_init(templater:deviceState:outputPublisher:)( uint64_t a1, void *a2, __int128 *a3)
{
  uint64_t v7 = OUTLINED_FUNCTION_19(v3, 192LL);
  RunCustomIntentReadingDelegate.init(templater:deviceState:outputPublisher:)(a1, a2, a3);
  return v7;
}

uint64_t RunCustomIntentReadingDelegate.viewFactory.getter()
{
  return swift_retain(*(void *)(v0 + 24));
}

_OWORD *RunCustomIntentReadingDelegate.templater.getter@<X0>(_OWORD *a1@<X8>)
{
  return outlined init with copy of RunCustomIntentReadingDelegate.Templating((_OWORD *)(v1 + 32), a1);
}

void RunCustomIntentReadingDelegate.outputPublisher.getter(uint64_t a1@<X8>)
{
}

uint64_t RunCustomIntentReadingDelegate.init(templater:deviceState:outputPublisher:)( uint64_t a1, void *a2, __int128 *a3)
{
  uint64_t v4 = v3;
  *(void *)(v3 + 16) = 5LL;
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v8);
  char v10 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v8, v9);
  uint64_t v11 = type metadata accessor for ViewFactory(0LL);
  OUTLINED_FUNCTION_51(v11);
  *(void *)(v4 + 24) = ViewFactory.init(ttsEnabled:)(v10 & 1);
  outlined init with copy of AppDisplayInfo?( a1,  (uint64_t)v13,  &demangling cache variable for type metadata for RunCustomIntentReadingDelegate.Templating?);
  if (v13[3])
  {
    outlined destroy of Any?( a1,  &demangling cache variable for type metadata for RunCustomIntentReadingDelegate.Templating?);
    memcpy(__dst, v13, sizeof(__dst));
  }

  else
  {
    static RunCustomIntentReadingDelegate.Templating.default(pageSize:)(5LL, __dst);
    outlined destroy of Any?( a1,  &demangling cache variable for type metadata for RunCustomIntentReadingDelegate.Templating?);
    outlined destroy of Any?( (uint64_t)v13,  &demangling cache variable for type metadata for RunCustomIntentReadingDelegate.Templating?);
  }

  memcpy((void *)(v4 + 32), __dst, 0x78uLL);
  outlined init with take of AceServiceInvokerAsync(a3, v4 + 152);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  return v4;
}

_OWORD *outlined init with copy of RunCustomIntentReadingDelegate.Templating(_OWORD *a1, _OWORD *a2)
{
  return a2;
}

uint64_t static RunCustomIntentReadingDelegate.Templating.default(pageSize:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for IntroduceCustomIntentCatTemplater();
  uint64_t v5 = OUTLINED_FUNCTION_19(v4, 24LL);
  *(void *)(v5 + 16) = a1;
  a2[3] = v4;
  a2[4] = (uint64_t)&protocol witness table for IntroduceCustomIntentCatTemplater;
  *a2 = v5;
  uint64_t v6 = type metadata accessor for DescribeCustomIntentItemCatTemplater();
  uint64_t v7 = OUTLINED_FUNCTION_19(v6, 16LL);
  a2[8] = v6;
  a2[9] = (uint64_t)&protocol witness table for DescribeCustomIntentItemCatTemplater;
  a2[5] = v7;
  uint64_t v8 = type metadata accessor for OfferMoreItemsCatTemplater();
  uint64_t result = OUTLINED_FUNCTION_19(v8, 16LL);
  a2[13] = v8;
  a2[14] = (uint64_t)&protocol witness table for OfferMoreItemsCatTemplater;
  a2[10] = result;
  return result;
}

uint64_t RunCustomIntentReadingDelegate.makeAction(introducingItems:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = type metadata accessor for IntroduceCustomIntentViewBuilder();
  uint64_t v5 = OUTLINED_FUNCTION_19(v4, 24LL);
  *(void *)(v5 + 16) = v3;
  OUTLINED_FUNCTION_5_21(v1 + 32, v6);
  uint64_t v7 = type metadata accessor for IntroduceCustomIntentOutputProvider();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_19(v7, 104LL);
  v8[6] = v4;
  v8[7] = &protocol witness table for IntroduceCustomIntentViewBuilder;
  v8[2] = a1;
  v8[3] = v5;
  outlined init with take of AceServiceInvokerAsync(v14, (uint64_t)(v8 + 8));
  OUTLINED_FUNCTION_5_21(v1 + 152, v9);
  uint64_t v10 = type metadata accessor for OutputAction(0LL);
  OUTLINED_FUNCTION_51(v10);
  swift_retain(v3);
  __n128 v11 = swift_bridgeObjectRetain(a1);
  uint64_t v12 = OutputAction.init(publisher:nextAction:producer:)( v14,  0LL,  0LL,  partial apply for implicit closure #2 in implicit closure #1 in RunCustomIntentReadingDelegate.makeAction(introducingItems:),  v8,  v11);
  lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( &lazy protocol witness table cache variable for type OutputAction and conformance OutputAction,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for OutputAction,  (uint64_t)&protocol conformance descriptor for OutputAction);
  return v12;
}

uint64_t RunCustomIntentReadingDelegate.makeAction(forItem:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = type metadata accessor for DescribeCustomIntentItemViewBuilder();
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 24LL);
  *(void *)(v4 + 16) = v2;
  swift_retain(v2);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItem<String>);
  PaginatedItem.item.getter(v17, v5);
  uint64_t v6 = v17[0];
  uint64_t v7 = v17[1];
  OUTLINED_FUNCTION_5_21(v0 + 72, v8);
  uint64_t v9 = type metadata accessor for DescribeCustomIntentItemOutputProvider();
  uint64_t v10 = (void *)OUTLINED_FUNCTION_19(v9, 112LL);
  v10[7] = v3;
  v10[8] = &protocol witness table for DescribeCustomIntentItemViewBuilder;
  v10[3] = v7;
  v10[4] = v4;
  void v10[2] = v6;
  outlined init with take of AceServiceInvokerAsync(v16, (uint64_t)(v10 + 9));
  OUTLINED_FUNCTION_5_21(v1 + 152, v11);
  uint64_t v12 = type metadata accessor for OutputAction(0LL);
  OUTLINED_FUNCTION_51(v12);
  uint64_t v14 = OutputAction.init(publisher:nextAction:producer:)( v16,  0LL,  0LL,  partial apply for implicit closure #2 in implicit closure #1 in RunCustomIntentReadingDelegate.makeAction(forItem:),  v10,  v13);
  lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( &lazy protocol witness table cache variable for type OutputAction and conformance OutputAction,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for OutputAction,  (uint64_t)&protocol conformance descriptor for OutputAction);
  return v14;
}

uint64_t RunCustomIntentReadingDelegate.makeGroup(withActions:nextPage:)(uint64_t a1, uint64_t a2)
{
  uint64_t v81 = (uint64_t *)(v6 - v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (page: Page, group: ActionGrouping)?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_35();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Page, ActionGrouping));
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_35();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = type metadata accessor for Page(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  unint64_t v20 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v73 - v21;
  outlined init with copy of AppDisplayInfo?( a2,  v10,  &demangling cache variable for type metadata for (page: Page, group: ActionGrouping)?);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (page: Page, group: ActionGrouping));
  if (__swift_getEnumTagSinglePayload(v10, 1LL, v23) == 1)
  {
    outlined destroy of Any?(v10, &demangling cache variable for type metadata for (page: Page, group: ActionGrouping)?);
    uint64_t v24 = type metadata accessor for ActionGroupTransition(0LL);
    uint64_t v25 = (uint64_t)v81;
    OUTLINED_FUNCTION_6_21(v24, v26, v27, v24);
    uint64_t v28 = type metadata accessor for StaticActionGroup(0LL);
    OUTLINED_FUNCTION_51(v28);
    swift_bridgeObjectRetain(a1);
    uint64_t v30 = OUTLINED_FUNCTION_7_18(v29, v25);
  }

  else
  {
    uint64_t v31 = *(int *)(v23 + 48);
    uint64_t v32 = *(int *)(v11 + 48);
    uint64_t v79 = a1;
    uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32);
    __int128 v77 = *(_OWORD *)(v10 + v31);
    uint64_t v34 = v10;
    uint64_t v35 = v16;
    v33(v15, v34, v16);
    *(_OWORD *)(v15 + v3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v77;
    uint64_t v36 = (uint64_t *)(v15 + *(int *)(v11 + 48));
    uint64_t v38 = *v36;
    uint64_t v37 = v36[1];
    uint64_t v73 = v38;
    uint64_t v74 = v37;
    uint64_t v39 = v22;
    uint64_t v78 = v22;
    uint64_t v40 = v35;
    v33((uint64_t)v22, v15, v35);
    uint64_t v41 = type metadata accessor for OfferMoreItemsCatTemplater();
    uint64_t v42 = OUTLINED_FUNCTION_19(v41, 16LL);
    uint64_t v43 = *(void *)(v80 + 24);
    uint64_t v44 = type metadata accessor for OfferMoreItemsViewBuilder();
    uint64_t v45 = OUTLINED_FUNCTION_19(v44, 24LL);
    *(void *)(v45 + 16) = v43;
    uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
    uint64_t v76 = v40;
    v46(v20, v39, v40);
    uint64_t v47 = type metadata accessor for OfferMoreItemsOutputProvider(0LL);
    uint64_t v48 = OUTLINED_FUNCTION_51(v47);
    *(void *)&__int128 v77 = v17;
    uint64_t v49 = v48;
    char v50 = (uint64_t *)(v48 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_templating);
    v50[3] = v41;
    v50[4] = (uint64_t)&protocol witness table for OfferMoreItemsCatTemplater;
    uint64_t v75 = v42;
    *char v50 = v42;
    uint64_t v51 = (uint64_t *)(v48 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_viewBuilder);
    v51[3] = v44;
    v51[4] = (uint64_t)&protocol witness table for OfferMoreItemsViewBuilder;
    *uint64_t v51 = v45;
    v33(v48 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_nextPage, (uint64_t)v20, v40);
    type metadata accessor for ContinueReadingConfirmationFlowStrategy(0LL);
    uint64_t v52 = type metadata accessor for RunCustomIntentReadingDelegate.CustomIntentsConfirmResponseParser();
    uint64_t v53 = OUTLINED_FUNCTION_19(v52, 16LL);
    v83[3] = v52;
    lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( &lazy protocol witness table cache variable for type RunCustomIntentReadingDelegate.CustomIntentsConfirmResponseParser and conformance RunCustomIntentReadingDelegate.CustomIntentsConfirmResponseParser,  v54,  (uint64_t (*)(uint64_t))type metadata accessor for RunCustomIntentReadingDelegate.CustomIntentsConfirmResponseParser,  (uint64_t)"1@\a");
    v83[4] = v55;
    v83[0] = v53;
    swift_retain(v43);
    swift_retain(v42);
    swift_retain(v45);
    swift_retain(v49);
    ContinueReadingConfirmationFlowStrategy.__allocating_init(outputProducer:confirmationResponseParser:)( partial apply for implicit closure #2 in implicit closure #1 in RunCustomIntentReadingDelegate.makeAction(forItem:),  v49,  v83);
    uint64_t v56 = type metadata accessor for ContinueReadingConfirmationFlowStrategy.ContinueReadingActionGroupReturning(0LL);
    OUTLINED_FUNCTION_51(v56);
    uint64_t v57 = swift_unknownObjectRetain(v73);
    uint64_t v58 = ContinueReadingConfirmationFlowStrategy.ContinueReadingActionGroupReturning.init(yesGroup:noGroup:cancelGroup:)( v57,  v74,  0LL,  0LL,  0LL,  0LL);
    uint64_t v59 = dispatch thunk of ContinueReadingConfirmationFlowStrategy.makeFlow(outputPublisher:)(v80 + 152);
    uint64_t v82 = v58;
    v83[0] = v59;
    uint64_t v60 = type metadata accessor for AnyFlowAndActionGroupReturning(0LL);
    OUTLINED_FUNCTION_51(v60);
    swift_retain(v58);
    uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForConfirmationFlow<ContinueReadingConfirmationFlowStrategy>);
    unint64_t v62 = lazy protocol witness table accessor for type PromptForConfirmationFlow<ContinueReadingConfirmationFlowStrategy> and conformance PromptForConfirmationFlow<A>();
    uint64_t v63 = AnyFlowAndActionGroupReturning.init<A, B>(flow:groupReturning:)( v83,  &v82,  v61,  v56,  v62,  &protocol witness table for ContinueReadingConfirmationFlowStrategy.ContinueReadingActionGroupReturning);
    uint64_t v64 = (uint64_t)v81;
    *uint64_t v81 = v63;
    type metadata accessor for FlowTransition(0LL);
    uint64_t v65 = OUTLINED_FUNCTION_8_24();
    v66(v65);
    uint64_t v67 = type metadata accessor for ActionGroupTransition(0LL);
    uint64_t v68 = OUTLINED_FUNCTION_8_24();
    v69(v68);
    __swift_storeEnumTagSinglePayload(v64, 0LL, 1LL, v67);
    uint64_t v70 = type metadata accessor for StaticActionGroup(0LL);
    OUTLINED_FUNCTION_51(v70);
    uint64_t v71 = v79;
    swift_bridgeObjectRetain(v79);
    swift_retain(v63);
    uint64_t v30 = OUTLINED_FUNCTION_7_18(v71, v64);
    swift_release();
    swift_release();
    swift_unknownObjectRelease(v57);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v76);
  }

  lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( &lazy protocol witness table cache variable for type StaticActionGroup and conformance StaticActionGroup,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for StaticActionGroup,  (uint64_t)&protocol conformance descriptor for StaticActionGroup);
  return v30;
}

uint64_t RunCustomIntentReadingDelegate.CustomIntentsConfirmResponseParser.parseConfirmationResponse(input:)@<X0>( uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SiriKitConfirmationState(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v26 - v7;
  uint64_t v9 = type metadata accessor for Parse(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_35();
  uint64_t v13 = v12 - v11;
  Input.parse.getter(v14);
  static VoiceCommandConfirmationUtils.getSiriKitConfirmationState(parse:)(v13);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v8, v2);
  int v15 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
  if (v15 != enum case for SiriKitConfirmationState.unset(_:))
  {
    if (v15 != enum case for SiriKitConfirmationState.cancelled(_:))
    {
      if (v15 == enum case for SiriKitConfirmationState.confirmed(_:))
      {
        uint64_t v19 = (unsigned int *)&enum case for ConfirmationResponse.confirmed(_:);
LABEL_8:
        uint64_t v20 = *v19;
        uint64_t v21 = OUTLINED_FUNCTION_9_20();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104LL))(a1, v20, v21);
        uint64_t v17 = a1;
        uint64_t v18 = 0LL;
        uint64_t v16 = v21;
        return __swift_storeEnumTagSinglePayload(v17, v18, 1LL, v16);
      }

      if (v15 != enum case for SiriKitConfirmationState.rejected(_:))
      {
        uint64_t v23 = OUTLINED_FUNCTION_9_20();
        OUTLINED_FUNCTION_6_21(v23, v24, v25, v23);
        return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      }
    }

    uint64_t v19 = (unsigned int *)&enum case for ConfirmationResponse.rejected(_:);
    goto LABEL_8;
  }

  uint64_t v16 = OUTLINED_FUNCTION_9_20();
  uint64_t v17 = a1;
  uint64_t v18 = 1LL;
  return __swift_storeEnumTagSinglePayload(v17, v18, 1LL, v16);
}

uint64_t protocol witness for ConfirmationResponseParsing.parseConfirmationResponse(input:) in conformance RunCustomIntentReadingDelegate.CustomIntentsConfirmResponseParser()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80LL))();
}

void RunCustomIntentReadingDelegate.Templating.intro.getter(uint64_t a1@<X8>)
{
}

void RunCustomIntentReadingDelegate.Templating.itemDescription.getter(uint64_t a1@<X8>)
{
}

void RunCustomIntentReadingDelegate.Templating.offerMore.getter(uint64_t a1@<X8>)
{
}

uint64_t RunCustomIntentReadingDelegate.Templating.init(intro:itemDescription:offerMore:)@<X0>( __int128 *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  return outlined init with take of AceServiceInvokerAsync(a3, a4 + 80);
}

uint64_t RunCustomIntentReadingDelegate.deinit()
{
  return v0;
}

uint64_t RunCustomIntentReadingDelegate.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 192LL, 7LL);
}

uint64_t protocol witness for PaginatedConversationDelegate.makeAction(introducingItems:) in conformance RunCustomIntentReadingDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
}

uint64_t protocol witness for PaginatedConversationDelegate.makeAction(forItem:) in conformance RunCustomIntentReadingDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

uint64_t protocol witness for PaginatedConversationDelegate.makeGroup(withActions:nextPage:) in conformance RunCustomIntentReadingDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in RunCustomIntentReadingDelegate.makeAction(introducingItems:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112LL))();
}

uint64_t type metadata accessor for RunCustomIntentReadingDelegate.CustomIntentsConfirmResponseParser()
{
  return objc_opt_self(&OBJC_CLASS____TtCC18SiriLinkFlowPlugin30RunCustomIntentReadingDelegate34CustomIntentsConfirmResponseParser);
}

unint64_t lazy protocol witness table accessor for type PromptForConfirmationFlow<ContinueReadingConfirmationFlowStrategy> and conformance PromptForConfirmationFlow<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptForConfirmationFlow<ContinueReadingConfirmationFlowStrategy> and conformance PromptForConfirmationFlow<A>;
  if (!lazy protocol witness table cache variable for type PromptForConfirmationFlow<ContinueReadingConfirmationFlowStrategy> and conformance PromptForConfirmationFlow<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PromptForConfirmationFlow<ContinueReadingConfirmationFlowStrategy>);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PromptForConfirmationFlow<A>, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PromptForConfirmationFlow<ContinueReadingConfirmationFlowStrategy> and conformance PromptForConfirmationFlow<A>);
  }

  return result;
}

void *outlined destroy of RunCustomIntentReadingDelegate.Templating(void *a1)
{
  return a1;
}

uint64_t type metadata accessor for RunCustomIntentReadingDelegate()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin30RunCustomIntentReadingDelegate);
}

uint64_t destroy for RunCustomIntentReadingDelegate.Templating(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_1Tm(a1 + 10);
}

_OWORD *initializeWithCopy for RunCustomIntentReadingDelegate.Templating(_OWORD *a1, _OWORD *a2)
{
  __int128 v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  __int128 v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)a1 + 40, (uint64_t)a2 + 40);
  __int128 v6 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  return a1;
}

void *assignWithCopy for RunCustomIntentReadingDelegate.Templating(void *a1, void *a2)
{
  return a1;
}

void *__swift_memcpy120_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x78uLL);
}

uint64_t assignWithTake for RunCustomIntentReadingDelegate.Templating(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(void *)(a2 + 72);
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(a1 + 80));
  __int128 v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(void *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for RunCustomIntentReadingDelegate.Templating(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 120))
    {
      LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RunCustomIntentReadingDelegate.Templating( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0u;
    *(_OWORD *)(result + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 120) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RunCustomIntentReadingDelegate.Templating()
{
  return &type metadata for RunCustomIntentReadingDelegate.Templating;
}

void OUTLINED_FUNCTION_5_21(uint64_t a1, uint64_t a2, ...)
{
}

uint64_t OUTLINED_FUNCTION_6_21(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(v4, 1LL, 1LL, a4);
}

uint64_t OUTLINED_FUNCTION_7_18(uint64_t a1, uint64_t a2)
{
  return StaticActionGroup.init(actions:transition:debugDescription:)(a1, a2, 0xD000000000000011LL);
}

uint64_t OUTLINED_FUNCTION_8_24()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_9_20()
{
  return type metadata accessor for ConfirmationResponse(0LL);
}

uint64_t ShortcutsLinkPromptForContinueInAppFlowStrategy.__allocating_init(appBundleId:deviceState:outputPublisher:)( uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  uint64_t v9 = swift_allocObject(v4, 112LL, 7LL);
  ShortcutsLinkPromptForContinueInAppFlowStrategy.init(appBundleId:deviceState:outputPublisher:)(a1, a2, a3, a4);
  return v9;
}

uint64_t ShortcutsLinkPromptForContinueInAppFlowStrategy.init(appBundleId:deviceState:outputPublisher:)( uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  outlined init with take of AceServiceInvokerAsync(a3, v4 + 32);
  outlined init with take of AceServiceInvokerAsync(a4, v4 + 72);
  return v4;
}

void ShortcutsLinkPromptForContinueInAppFlowStrategy.actionForInput(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Parse(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_35();
  uint64_t v31 = v6 - v5;
  uint64_t v7 = type metadata accessor for Input(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_35();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_35();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = type metadata accessor for TaskPriority(0LL);
  __swift_storeEnumTagSinglePayload(v15, 1LL, 1LL, v16);
  uint64_t v17 = (void *)OUTLINED_FUNCTION_23_4((uint64_t)&unk_1F6F38);
  void v17[2] = 0LL;
  v17[3] = 0LL;
  v17[4] = v1;
  swift_retain(v1);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( v15,  (uint64_t)&async function pointer to partial apply for closure #1 in ShortcutsLinkPromptForContinueInAppFlowStrategy.actionForInput(_:),  (uint64_t)v17);
  swift_release();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v18 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.voiceCommands);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v30 = v3;
    uint64_t v22 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v23 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v33 = v23;
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v24 = Input.description.getter();
    uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v22 + 4);
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_9_8(v11, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
    OUTLINED_FUNCTION_31_2(&dword_0, v20, v21, "#ShortcutsLinkPromptForContinueInAppFlowStrategy on input: %s", v22);
    OUTLINED_FUNCTION_30_3(v23, v26, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v23);
    uint64_t v27 = (uint64_t)v22;
    uint64_t v3 = v30;
    OUTLINED_FUNCTION_1_0(v27);
  }

  else
  {
    OUTLINED_FUNCTION_9_8(v11, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  }

  Input.parse.getter(v28);
  char v29 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)(v31);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v31, v3);
  __asm { BR              X10 }

uint64_t closure #1 in ShortcutsLinkPromptForContinueInAppFlowStrategy.actionForInput(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 96) = a4;
  return swift_task_switch(closure #1 in ShortcutsLinkPromptForContinueInAppFlowStrategy.actionForInput(_:), 0LL, 0LL);
}

uint64_t closure #1 in ShortcutsLinkPromptForContinueInAppFlowStrategy.actionForInput(_:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = OUTLINED_FUNCTION_48();
  v2[13] = __swift_project_value_buffer(v3, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_9_5();
  os_log_type_t v4 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)uint64_t v5 = 0;
    OUTLINED_FUNCTION_47_1( &dword_0,  v0,  v1,  "#ShortcutsLinkPromptForContinueInAppFlowStrategy submitting empty output to clear screen and prevent double-taps",  v5);
    OUTLINED_FUNCTION_1_0((uint64_t)v5);
  }

  uint64_t v6 = v2[12];

  outlined init with copy of DeviceState(v6 + 72, (uint64_t)(v2 + 2));
  uint64_t v7 = v2[5];
  uint64_t v8 = v2[6];
  __swift_project_boxed_opaque_existential_1(v2 + 2, v7);
  static OutputUtils.makeTemporaryOutput()(v2 + 7);
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  v2[14] = v9;
  *uint64_t v9 = v2;
  v9[1] = closure #1 in ShortcutsLinkPromptForContinueInAppFlowStrategy.actionForInput(_:);
  uint64_t v10 = OUTLINED_FUNCTION_47_15();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v10, v7, v8);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  OUTLINED_FUNCTION_50_0();
  uint64_t v3 = v2 + 7;
  os_log_type_t v4 = v2[14];
  *uint64_t v5 = *v1;
  v2[15] = v0;
  swift_task_dealloc(v4);
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  os_log_type_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  unint64_t v2 = *(void *)(v1 + 120);
  uint64_t v3 = *(os_log_s **)(v1 + 104);
  os_log_type_t v4 = __swift_destroy_boxed_opaque_existential_1Tm((void *)(v1 + 16));
  Logger.logObject.getter(v4);
  uint64_t v5 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v5))
  {
    uint64_t v6 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)uint64_t v6 = 0;
    OUTLINED_FUNCTION_47_1( &dword_0,  v3,  v0,  "#ShortcutsLinkPromptForContinueInAppFlowStrategy failed to submit empty output to clear screen",  v6);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
  }

  swift_errorRelease(v2);

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t ShortcutsLinkPromptForContinueInAppFlowStrategy.parseConfirmationResponse(input:)( uint64_t a1, uint64_t a2)
{
  v2[3] = a1;
  v2[4] = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  v2[5] = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for Parse(0LL);
  v2[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[7] = v5;
  v2[8] = OUTLINED_FUNCTION_9_0(v5);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t ShortcutsLinkPromptForContinueInAppFlowStrategy.parseConfirmationResponse(input:)(uint64_t a1)
{
  unint64_t v2 = (os_log_s *)v1[8];
  Input.parse.getter(a1);
  unsigned __int8 v3 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)((uint64_t)v2);
  uint64_t v4 = (os_log_s *)v3;
  OUTLINED_FUNCTION_37_15();
  if (v3 == 3)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v5 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
    OUTLINED_FUNCTION_9_5();
    os_log_type_t v6 = OUTLINED_FUNCTION_73();
    if (!OUTLINED_FUNCTION_31_0(v6)) {
      goto LABEL_26;
    }
    uint64_t v7 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)uint64_t v7 = 0;
    uint64_t v8 = "#ShortcutsLinkPromptForContinueInAppFlowStrategy failed to receive confirmation";
    goto LABEL_25;
  }

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v9 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
  unint64_t v2 = (os_log_s *)OUTLINED_FUNCTION_9_5();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v10))
  {
    uint64_t v11 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v12 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v30 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    if (v3)
    {
      if (v3 == 1) {
        uint64_t v13 = 28526LL;
      }
      else {
        uint64_t v13 = 0x6C65636E6163LL;
      }
      if (v3 == 1) {
        unint64_t v14 = 0xE200000000000000LL;
      }
      else {
        unint64_t v14 = 0xE600000000000000LL;
      }
    }

    else
    {
      unint64_t v14 = 0xE300000000000000LL;
      uint64_t v13 = 7562617LL;
    }

    v1[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2, v1 + 3, v11 + 4);
    swift_bridgeObjectRelease(v14);
    OUTLINED_FUNCTION_31_2( &dword_0,  v2,  v10,  "#ShortcutsLinkPromptForContinueInAppFlowStrategy received confirmation: %s",  v11);
    OUTLINED_FUNCTION_30_3(v12, v15, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v12);
    OUTLINED_FUNCTION_1_0((uint64_t)v11);
  }

  if (v3)
  {
    if (v3 == 1)
    {
      Logger.logObject.getter(v16);
      os_log_type_t v17 = OUTLINED_FUNCTION_73();
      if (OUTLINED_FUNCTION_31_0(v17))
      {
        uint64_t v7 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
        *(_WORD *)uint64_t v7 = 0;
        uint64_t v8 = "#ShortcutsLinkPromptForContinueInAppFlowStrategy shouldn't receive no in parse";
LABEL_25:
        OUTLINED_FUNCTION_47_1(&dword_0, v4, (os_log_type_t)v2, v8, v7);
        OUTLINED_FUNCTION_1_0((uint64_t)v7);
      }
    }

    else
    {
      Logger.logObject.getter(v16);
      os_log_type_t v22 = OUTLINED_FUNCTION_73();
      if (OUTLINED_FUNCTION_31_0(v22))
      {
        uint64_t v7 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
        *(_WORD *)uint64_t v7 = 0;
        uint64_t v8 = "#ShortcutsLinkPromptForContinueInAppFlowStrategy shouldn't receive cancel in parse";
        goto LABEL_25;
      }
    }

LABEL_26:
    unint64_t v23 = lazy protocol witness table accessor for type ShortcutsLinkConfirmationError and conformance ShortcutsLinkConfirmationError();
    uint64_t v24 = swift_allocError(&type metadata for ShortcutsLinkConfirmationError, v23, 0LL, 0LL);
    swift_willThrow(v24, v25, v26, v27, v28);
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_18_0();
    os_log_type_t v21 = (uint64_t (*)(void))v1[1];
    return v21();
  }

  uint64_t v18 = v1[5];
  uint64_t v19 = enum case for ConfirmationResponse.confirmed(_:);
  uint64_t v20 = type metadata accessor for ConfirmationResponse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104LL))(v18, v19, v20);
  __swift_storeEnumTagSinglePayload(v18, 0LL, 1LL, v20);
  SimpleConfirmationResponseProvider.init(_:)(v18);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  os_log_type_t v21 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return v21();
}

    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    os_log_type_t v10 = v17;
    goto LABEL_14;
  }

  outlined init with copy of SpeakableString?(a4, (uint64_t)&v20, &demangling cache variable for type metadata for Any?);
  if (v21)
  {
    outlined init with take of Any(&v20, &v22);
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) != 0)
    {
      if ((a5 & 0x8000000000000000LL) == 0) {
        goto LABEL_10;
      }
    }

    else
    {
      specialized _ArrayBuffer._consumeAndCreateNew()();
      os_log_type_t v10 = v16;
      if ((a5 & 0x8000000000000000LL) == 0)
      {
LABEL_10:
        if (v10[2] > a5)
        {
          uint64_t v11 = &v10[4 * a5 + 4];
          __swift_destroy_boxed_opaque_existential_1Tm(v11);
          outlined init with take of Any(&v22, v11);
LABEL_22:
          a6[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
          *a6 = v10;
          return;
        }

        goto LABEL_25;
      }
    }

    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  outlined destroy of URL?((uint64_t)&v20, &demangling cache variable for type metadata for Any?);
  if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    os_log_type_t v10 = v19;
  }

  uint64_t v13 = v10[2];
  if (v13 > a5)
  {
    unint64_t v14 = v13 - 1;
    uint64_t v15 = (char *)&v10[4 * a5];
    __swift_destroy_boxed_opaque_existential_1Tm((void *)v15 + 4);
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v15 + 64, v14 - a5, v15 + 32);
    void v10[2] = v14;
    goto LABEL_22;
  }

  __break(1u);
}

uint64_t ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation(itemToConfirm:)( uint64_t a1, uint64_t a2)
{
  v3[32] = a2;
  v3[33] = v2;
  v3[31] = a1;
  uint64_t v4 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  v3[34] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[35] = v5;
  v3[36] = OUTLINED_FUNCTION_9_0(v5);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[37] = OUTLINED_FUNCTION_9_0(*(void *)(v6 - 8));
  uint64_t v7 = type metadata accessor for DialogPhase(0LL);
  v3[38] = OUTLINED_FUNCTION_9_0(*(void *)(v7 - 8));
  uint64_t v8 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[39] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[40] = v9;
  v3[41] = OUTLINED_FUNCTION_9_0(v9);
  uint64_t v10 = type metadata accessor for NLContextUpdate(0LL);
  v3[42] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[43] = v11;
  v3[44] = OUTLINED_FUNCTION_9_0(v11);
  uint64_t v12 = type metadata accessor for CATOption(0LL);
  v3[45] = OUTLINED_FUNCTION_9_0(*(void *)(v12 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v7;
  uint64_t v4 = *(void *)(*(void *)v3 + 392LL);
  uint64_t v5 = *(void **)v3;
  v5[50] = a1;
  v5[51] = a2;
  v5[52] = v2;
  OUTLINED_FUNCTION_54_0(v4);
  if (v2)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    uint64_t v7 = (void *)swift_task_alloc(async function pointer to static LabelTemplates.cancel()[1]);
    v5[53] = v7;
    *uint64_t v7 = v5;
    v7[1] = ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation(itemToConfirm:);
    return static LabelTemplates.cancel()();
  }

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(*(void *)v3 + 424LL);
  v4[54] = a1;
  v4[55] = a2;
  v4[56] = v2;
  OUTLINED_FUNCTION_54_0(v5);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  uint64_t v1 = *((void *)v0 + 45);
  uint64_t v2 = type metadata accessor for ShortcutsLinkNLContextProvider();
  uint64_t inited = swift_initStackObject(v2, v0 + 14);
  *((void *)v0 + 46) = inited;
  static Device.current.getter((void *)v0 + 18, inited);
  type metadata accessor for RunLinkActionCATs(0LL);
  OUTLINED_FUNCTION_59();
  uint64_t v4 = OUTLINED_FUNCTION_97(v1);
  type metadata accessor for RunLinkActionCATsSimple(0LL);
  OUTLINED_FUNCTION_59();
  uint64_t v5 = OUTLINED_FUNCTION_96(v1);
  type metadata accessor for RunVoiceCommandCATs(0LL);
  OUTLINED_FUNCTION_59();
  uint64_t v6 = OUTLINED_FUNCTION_97(v1);
  type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  OUTLINED_FUNCTION_59();
  uint64_t v7 = OUTLINED_FUNCTION_96(v1);
  type metadata accessor for RunLinkActionCATPatternsExecutor(0LL);
  OUTLINED_FUNCTION_59();
  OUTLINED_FUNCTION_97(v1);
  uint64_t v8 = OUTLINED_FUNCTION_70_3();
  uint64_t v9 = (void *)swift_initStackObject(v8, v0 + 1);
  *((void *)v0 + 47) = v9;
  *((void *)v0 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)( v0 + 9,  v4,  v5,  v6,  v7,  (uint64_t)(v0 + 14),  v9);
  uint64_t v10 = (__int128 **)swift_task_alloc(dword_217A6C);
  *((void *)v0 + 49) = v10;
  *uint64_t v10 = v0;
  v10[1] = (__int128 *)ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation(itemToConfirm:);
  return LinkActionDialogTemplating.makeConfirmationButtonLabel(confirmationVerb:)( 0x65756E69746E6F63LL,  0xE800000000000000LL);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_46_15();
  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_6_22();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_log_s *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v1 = *(void *)(v0 + 432);
  uint64_t v2 = *(void *)(v0 + 440);
  uint64_t v4 = *(void *)(v0 + 400);
  unsigned __int8 v3 = *(void *)(v0 + 408);
  uint64_t v5 = *(void *)(v0 + 352);
  uint64_t v40 = *(void *)(v0 + 344);
  uint64_t v41 = *(void *)(v0 + 336);
  uint64_t v6 = *(void *)(v0 + 296);
  uint64_t v7 = *(void *)(v0 + 304);
  uint64_t v42 = *(void *)(v0 + 280);
  uint64_t v43 = *(void *)(v0 + 272);
  uint64_t v44 = *(void *)(v0 + 288);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v2);
  ShortcutsLinkNLContextProvider.makeContextForActionConfirmation(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:)( v4,  v3,  v1,  v2,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v2);
  uint64_t v8 = swift_bridgeObjectRelease(v3);
  static DialogPhase.confirmation.getter(v8, v9, v10);
  OutputGenerationManifest.init(dialogPhase:_:)(v7, CustomIntentDisambiguationItemContainer.init(items:), 0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v6, v5, v41);
  __swift_storeEnumTagSinglePayload(v6, 0LL, 1LL, v41);
  OutputGenerationManifest.nlContextUpdate.setter(v6);
  uint64_t v11 = static TemplatingResult.getListenAfterSpeakingDisabled()();
  OutputGenerationManifest.listenAfterSpeaking.setter((v11 & 1) == 0);
  (*(void (**)(uint64_t, void, uint64_t))(v42 + 104))( v44,  enum case for RFFeatureFlags.ResponseFramework._SMART(_:),  v43);
  LOBYTE(v1) = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8));
  if ((v1 & 1) != 0)
  {
    uint64_t v12 = *(void *)(v0 + 264);
    type metadata accessor for App(0LL);
    uint64_t v13 = *(void *)(v12 + 16);
    *(void *)(v0 + 456) = v13;
    unint64_t v14 = *(void *)(v12 + 24);
    *(void *)(v0 + 464) = v14;
    swift_bridgeObjectRetain(v14);
    App.__allocating_init(appIdentifier:)(v13, v14);
    uint64_t v15 = specialized App.toAppDisplayName(_:appInfoResolving:isFirstParty:)(v12 + 32, 2);
    os_log_type_t v17 = v16;
    OUTLINED_FUNCTION_12_5();
    *(void *)(v0 + 47__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v17;
    *(void *)(v0 + 480) = v15;
    uint64_t v18 = v15 & 0xFFFFFFFFFFFFLL;
    uint64_t v19 = 0xE000000000000000LL;
    if (v17) {
      uint64_t v19 = v17;
    }
    else {
      uint64_t v18 = 0LL;
    }
    if ((v19 & 0x2000000000000000LL) != 0) {
      uint64_t v18 = HIBYTE(v19) & 0xF;
    }
    if (!v18)
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v20 = *(void *)(v0 + 264);
      os_log_type_t v21 = OUTLINED_FUNCTION_48();
      os_log_type_t v22 = __swift_project_value_buffer(v21, (uint64_t)static Logger.voiceCommands);
      unint64_t v23 = swift_retain(v20);
      uint64_t v24 = (os_log_s *)v22;
      Logger.logObject.getter(v23);
      uint64_t v25 = OUTLINED_FUNCTION_73();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
        uint64_t v27 = OUTLINED_FUNCTION_38(32LL);
        uint64_t v45 = v27;
        *(_DWORD *)uint64_t v26 = 136315138;
        swift_bridgeObjectRetain(v14);
        *(void *)(v0 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v26 + 4);
        OUTLINED_FUNCTION_14();
        swift_release();
        OUTLINED_FUNCTION_31_2( &dword_0,  v24,  v25,  "#ShortcutsLinkPromptForContinueInAppFlowStrategy: failed to get app's displayName; bundleId='%s'",
          v26);
        OUTLINED_FUNCTION_30_3(v27, v28, (uint64_t)&type metadata for Any + 8);
        OUTLINED_FUNCTION_1_0(v27);
        OUTLINED_FUNCTION_1_0((uint64_t)v26);
      }

      else
      {
        swift_release();
      }
    }

    *(void *)(v0 + 48__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = [*(id *)(v0 + 256) dialog];
    uint64_t v38 = (void *)swift_task_alloc(dword_217A94);
    *(void *)(v0 + 496) = v38;
    void *v38 = v0;
    v38[1] = ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation(itemToConfirm:);
    OUTLINED_FUNCTION_47_15();
    OUTLINED_FUNCTION_29_1();
    return LinkActionDialogTemplating.actionConfirmationHeader(customDialog:)(v39);
  }

  else
  {
    char v29 = (void *)swift_task_alloc(dword_21874C);
    *(void *)(v0 + 55__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v29;
    *char v29 = v0;
    v29[1] = ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation(itemToConfirm:);
    OUTLINED_FUNCTION_29_1();
    return ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:continueLabel:cancelLabel:manifest:)( v30,  v31,  v32,  v33,  v34,  v35,  v36);
  }

{
  uint64_t v0;
  void *v1;
  OUTLINED_FUNCTION_50_0();
  uint64_t v1 = (void *)(v0 + 184);
  swift_task_dealloc(*(void *)(v0 + 544));
  swift_release();
  OUTLINED_FUNCTION_14();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v2 = (void *)v0[64];
  unsigned __int8 v3 = v0[59];
  uint64_t v4 = v0[51];
  swift_bridgeObjectRelease(v0[58]);
  swift_bridgeObjectRelease(v4);
  OUTLINED_FUNCTION_14();
  if (v3) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = 0xE000000000000000LL;
  }
  swift_bridgeObjectRelease(v5);
  outlined consume of Data?(0LL, 0xF000000000000000LL);
  OUTLINED_FUNCTION_20();
  swift_release();
  swift_release();

  OUTLINED_FUNCTION_15_14();
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  swift_task_dealloc(v3);
  uint64_t v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_3_14(v6);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  OUTLINED_FUNCTION_50_0();
  unsigned __int8 v3 = v2[69];
  uint64_t v4 = v2[51];
  *uint64_t v5 = *v1;
  v2[70] = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  OUTLINED_FUNCTION_46_15();
  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_15_14();
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  swift_task_dealloc(v0);
  uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_3_14(v2);
}

{
  uint64_t v0;
  swift_bridgeObjectRelease(*(void *)(v0 + 408));
  OUTLINED_FUNCTION_12_5();
  swift_release();
  OUTLINED_FUNCTION_6_22();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_23_19();
  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_9_8(v1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_6_22();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_2_1(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_23_19();
  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_9_8(v1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_6_22();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_2_1(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation(itemToConfirm:)( uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 496LL);
  *(void *)(*(void *)v2 + 504LL) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = (void *)v4[61];
  if (v1)
  {
    unint64_t v7 = v4[59];

    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_20();
    if (v7) {
      unint64_t v8 = v7;
    }
    else {
      unint64_t v8 = 0xE000000000000000LL;
    }
    swift_bridgeObjectRelease(v8);
  }

  else
  {

    v4[64] = a1;
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

void ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  uint64_t v1 = (void *)v0[64];
  uint64_t v2 = v0[59];
  uint64_t v3 = v0[58];
  uint64_t v24 = v0[55];
  if (v2) {
    unint64_t v4 = v0[59];
  }
  else {
    unint64_t v4 = 0xE000000000000000LL;
  }
  if (v2) {
    uint64_t v5 = v0[60];
  }
  else {
    uint64_t v5 = 0LL;
  }
  id v6 = objc_msgSend(v1, "catId", v0[50], v0[57], v0[51], v0[54]);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  OutputGenerationManifest.responseViewId.setter(v7);
  swift_bridgeObjectRetain(v3);
  Swift::String_optional v8 = DialogExecutionResult.firstDialogFullPrint()();
  v0[65] = v8.value._object;
  uint64_t v9 = type metadata accessor for ResponseFactory(0LL);
  OUTLINED_FUNCTION_51(v9);
  v0[66] = ResponseFactory.init()();
  uint64_t v10 = type metadata accessor for WorkflowDataModels(0LL);
  v0[26] = v10;
  v0[27] = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 23);
  void *boxed_opaque_existential_1 = v21;
  boxed_opaque_existential_1[1] = v3;
  boxed_opaque_existential_1[2] = v5;
  boxed_opaque_existential_1[3] = v4;
  boxed_opaque_existential_1[4] = v20;
  boxed_opaque_existential_1[5] = v22;
  boxed_opaque_existential_1[6] = v23;
  boxed_opaque_existential_1[7] = v24;
  *((_OWORD *)boxed_opaque_existential_1 + 4) = xmmword_1830D0;
  *((_BYTE *)boxed_opaque_existential_1 + 80) = 0;
  *(Swift::String_optional *)(boxed_opaque_existential_1 + 11) = v8;
  swift_storeEnumTagMultiPayload(boxed_opaque_existential_1, v10, 5LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v13 = OUTLINED_FUNCTION_23_4(v12);
  *(_OWORD *)(v13 + 16) = xmmword_17E150;
  *(void *)(v13 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v1;
  uint64_t v25 = v13;
  specialized Array._endMutation()(v13, v14, v15);
  v0[67] = v25;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v24);
  outlined copy of Data?(0LL, 0xF000000000000000LL);
  swift_bridgeObjectRetain(v8.value._object);
  id v17 = v1;
  uint64_t v18 = (void *)swift_task_alloc(v16);
  v0[68] = v18;
  *uint64_t v18 = v0;
  v18[1] = ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation(itemToConfirm:);
  OUTLINED_FUNCTION_29_1();
  __asm { BR              X4 }

uint64_t ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:continueLabel:cancelLabel:manifest:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[42] = a7;
  v8[43] = v7;
  v8[40] = a5;
  v8[41] = a6;
  v8[38] = a3;
  v8[39] = a4;
  v8[36] = a1;
  v8[37] = a2;
  uint64_t v9 = type metadata accessor for OutputGenerationManifest(0LL);
  v8[44] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[45] = v10;
  v8[46] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for CATOption(0LL);
  v8[47] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:continueLabel:cancelLabel:manifest:),  0LL,  0LL);
}

uint64_t ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:continueLabel:cancelLabel:manifest:)( uint64_t a1)
{
  uint64_t v3 = v2[47];
  unint64_t v4 = (void *)v2[37];
  static Device.current.getter(v2 + 31, a1);
  type metadata accessor for RunLinkActionCATs(0LL);
  OUTLINED_FUNCTION_5_8();
  uint64_t v5 = OUTLINED_FUNCTION_97(v3);
  type metadata accessor for RunLinkActionCATsSimple(0LL);
  OUTLINED_FUNCTION_5_8();
  uint64_t v6 = OUTLINED_FUNCTION_96(v3);
  type metadata accessor for RunVoiceCommandCATs(0LL);
  OUTLINED_FUNCTION_5_8();
  uint64_t v7 = OUTLINED_FUNCTION_97(v3);
  type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  OUTLINED_FUNCTION_5_8();
  uint64_t v8 = OUTLINED_FUNCTION_96(v3);
  type metadata accessor for RunLinkActionCATPatternsExecutor(0LL);
  OUTLINED_FUNCTION_5_8();
  OUTLINED_FUNCTION_97(v3);
  uint64_t v9 = OUTLINED_FUNCTION_70_3();
  uint64_t inited = (void *)swift_initStackObject(v9, v2 + 2);
  v2[48] = inited;
  v2[49] = specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)( (__int128 *)(v2 + 31),  v5,  v6,  v7,  v8,  v1,  inited);
  v2[50] = [v4 dialog];
  uint64_t v11 = (void *)swift_task_alloc(dword_217A2C);
  v2[51] = v11;
  *uint64_t v11 = v2;
  v11[1] = ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:continueLabel:cancelLabel:manifest:);
  OUTLINED_FUNCTION_47_15();
  return LinkActionDialogTemplating.makeContinueInAppPattern(customResponse:)();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v3 = *v2;
  unint64_t v4 = *(void *)(*v2 + 408);
  *(void *)(v3 + 416) = a1;
  *(void *)(v3 + 424) = v1;
  OUTLINED_FUNCTION_54_0(v4);
  if (!v1) {

  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:continueLabel:cancelLabel:manifest:)()
{
  *(void *)(v0 + 43__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = [*(id *)(v0 + 296) dialog];
  uint64_t v1 = (void *)swift_task_alloc(dword_217A14);
  *(void *)(v0 + 440) = v1;
  *uint64_t v1 = v0;
  v1[1] = ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:continueLabel:cancelLabel:manifest:);
  uint64_t v2 = OUTLINED_FUNCTION_47_15();
  return LinkActionDialogTemplating.actionConfirmationHeader_preRFv2(customDialog:)(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  OUTLINED_FUNCTION_10_1();
  uint64_t v5 = *(void *)(v4 + 440);
  *uint64_t v6 = *v3;
  *(void *)(v4 + 44__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v1;
  swift_task_dealloc(v5);
  if (!v1)
  {

    *(void *)(v4 + 456) = v0;
    *(void *)(v4 + 464) = v2;
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;
  void v13[5];
  uint64_t v1 = v0[57];
  uint64_t v12 = v0[58];
  uint64_t v2 = v0[43];
  unint64_t v4 = v0[40];
  uint64_t v3 = v0[41];
  uint64_t v6 = v0[38];
  uint64_t v5 = v0[39];
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v8 = *(void *)(v2 + 24);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v3);
  static Device.current.getter(v13, v9);
  ActionConfirmationVisual.init(appBundleId:confirmButton:noButton:destructive:prompt:viewData:deviceState:)( v7,  v8,  v6,  v5,  v4,  v3,  0,  v12,  (uint64_t)(v0 + 18),  v1,  0LL,  0xF000000000000000LL,  v13);
  uint64_t v10 = (void *)swift_task_alloc(dword_2164B4);
  v0[59] = v10;
  *uint64_t v10 = v0;
  v10[1] = ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:continueLabel:cancelLabel:manifest:);
  return ActionConfirmationVisual.data.getter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  OUTLINED_FUNCTION_10_1();
  uint64_t v5 = v4[59];
  *uint64_t v6 = *v3;
  v4[60] = v1;
  swift_task_dealloc(v5);
  if (!v1)
  {
    v4[61] = v0;
    v4[62] = v2;
    outlined release of ActionConfirmationVisual(v4 + 18);
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v11;
  uint64_t v1 = (void *)v0[52];
  uint64_t v3 = v0[45];
  uint64_t v2 = v0[46];
  unint64_t v4 = v0[44];
  uint64_t v5 = v0[42];
  outlined bridged method (mbnn) of @objc PatternExecutionResult.visual.setter(v0[62], v0[61], v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  uint64_t v6 = [v1 patternId];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  OutputGenerationManifest.responseViewId.setter(v7);
  uint64_t v8 = type metadata accessor for ResponseFactory(0LL);
  OUTLINED_FUNCTION_51(v8);
  v0[63] = ResponseFactory.init()();
  v0[64] = v9;
  *uint64_t v9 = v0;
  v9[1] = ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:continueLabel:cancelLabel:manifest:);
  return ((uint64_t (*)(void, void, void))v11)(v0[36], v0[52], v0[46]);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  OUTLINED_FUNCTION_50_0();
  uint64_t v3 = *(void *)(v2 + 512);
  void *v4 = *v1;
  *(void *)(v2 + 520) = v0;
  swift_task_dealloc(v3);
  swift_release();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_37_15();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return v1();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_29_16();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  uint64_t v1 = *(void **)(v0 + 416);

  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_29_16();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  uint64_t v1 = *(void **)(v0 + 416);
  outlined release of ActionConfirmationVisual((void *)(v0 + 144));

  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_29_16();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 360);

  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_29_16();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

void *DescribeCustomIntentItemOutputProvider.deinit()
{
  return v0;
}

uint64_t DescribeCustomIntentItemOutputProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 112LL, 7LL);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance ShortcutsLinkPromptForContinueInAppFlowStrategy( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_218734);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnEmptyParse(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return ShortcutsLinkPromptForContinueInAppFlowStrategy.parseConfirmationResponse(input:)(a1, a2);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makePromptForConfirmation(itemToConfirm:) in conformance ShortcutsLinkPromptForContinueInAppFlowStrategy( uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (void *)swift_task_alloc(dword_218744);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnEmptyParse(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation(itemToConfirm:)(a1, v4);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:) in conformance ShortcutsLinkPromptForContinueInAppFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to PromptForConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:)[1]);
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnEmptyParse(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return PromptForConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:) in conformance ShortcutsLinkPromptForContinueInAppFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to PromptForConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:)[1]);
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnEmptyParse(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return PromptForConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse() in conformance ShortcutsLinkPromptForContinueInAppFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PromptForConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse()[1]);
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnEmptyParse(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return PromptForConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse()(a1, v7, a3);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShortcutsLinkPromptForContinueInAppFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PromptForConfirmationFlowStrategyAsync.makeFlowCancelledResponse()[1]);
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makePromptForTCCAcceptance(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return PromptForConfirmationFlowStrategyAsync.makeFlowCancelledResponse()(a1, v7, a3);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeErrorResponse(_:) in conformance ShortcutsLinkPromptForContinueInAppFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to PromptForConfirmationFlowStrategyAsync.makeErrorResponse(_:)[1]);
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnEmptyParse(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return PromptForConfirmationFlowStrategyAsync.makeErrorResponse(_:)(a1, a2, v9, a4);
}

uint64_t sub_95A48()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t partial apply for closure #1 in ShortcutsLinkPromptForContinueInAppFlowStrategy.actionForInput(_:)( uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_218724);
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = protocol witness for VoiceShortcutClientWrapping.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:) in conformance VoiceShortcutClientWrapper;
  return closure #1 in ShortcutsLinkPromptForContinueInAppFlowStrategy.actionForInput(_:)(a1, v4, v5, v6);
}

unint64_t lazy protocol witness table accessor for type ShortcutsLinkConfirmationError and conformance ShortcutsLinkConfirmationError()
{
  unint64_t result = lazy protocol witness table cache variable for type ShortcutsLinkConfirmationError and conformance ShortcutsLinkConfirmationError;
  if (!lazy protocol witness table cache variable for type ShortcutsLinkConfirmationError and conformance ShortcutsLinkConfirmationError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ShortcutsLinkConfirmationError,  &type metadata for ShortcutsLinkConfirmationError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ShortcutsLinkConfirmationError and conformance ShortcutsLinkConfirmationError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ShortcutsLinkConfirmationError and conformance ShortcutsLinkConfirmationError;
  if (!lazy protocol witness table cache variable for type ShortcutsLinkConfirmationError and conformance ShortcutsLinkConfirmationError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ShortcutsLinkConfirmationError,  &type metadata for ShortcutsLinkConfirmationError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ShortcutsLinkConfirmationError and conformance ShortcutsLinkConfirmationError);
  }

  return result;
}

uint64_t type metadata accessor for ShortcutsLinkPromptForContinueInAppFlowStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin47ShortcutsLinkPromptForContinueInAppFlowStrategy);
}

uint64_t OUTLINED_FUNCTION_6_22()
{
  return swift_task_dealloc(*(void *)(v0 + 360));
}

uint64_t OUTLINED_FUNCTION_15_14()
{
  return (*(uint64_t (**)(void, void))(v0[40] + 8LL))(v0[41], v0[39]);
}

uint64_t OUTLINED_FUNCTION_23_19()
{
  return swift_release(*(void *)(v0 + 384));
}

uint64_t OUTLINED_FUNCTION_29_16()
{
  return swift_task_dealloc(*(void *)(v0 + 376));
}

uint64_t OUTLINED_FUNCTION_37_15()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_46_15()
{
  return swift_release(*(void *)(v0 + 384));
}

uint64_t OUTLINED_FUNCTION_47_15()
{
  return v0;
}

SiriLinkFlowPlugin::CustomIntentDefinition_optional __swiftcall INCodableDescription.asCustomIntentDescription()()
{
  return (SiriLinkFlowPlugin::CustomIntentDefinition_optional)static CustomRequestDefinition.buildFromIntentDescription(intentDescription:)(v0);
}

void INCodableDescription.attributeForParameter(intent:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

id SiriStateObserver.__allocating_init(runnerClient:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return SiriStateObserver.init(runnerClient:)(a1);
}

id SiriStateObserver.init(runnerClient:)(void *a1)
{
  v1[OBJC_IVAR____TtC18SiriLinkFlowPlugin17SiriStateObserver_shouldCancelRunner] = 1;
  outlined init with copy of DeviceState( (uint64_t)a1,  (uint64_t)&v1[OBJC_IVAR____TtC18SiriLinkFlowPlugin17SiriStateObserver_runnerClient]);
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for SiriStateObserver();
  id v3 = objc_msgSendSuper2(&v5, "init");
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v3;
}

uint64_t type metadata accessor for SiriStateObserver()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin17SiriStateObserver);
}

void SiriStateObserver.notifyObserver(_:didChangeStateFrom:to:)(uint64_t a1, char a2, char a3)
{
  uint64_t v4 = v3;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  unint64_t v7 = a3 & 2;
  uint64_t v8 = a2 & 2;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v11 = v10;
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc(14LL, -1LL);
    *(_DWORD *)uint64_t v14 = 67109376;
    uint64_t v16 = OUTLINED_FUNCTION_4_23(v14, v15, v14 + 4, v14 + 8);
    *(_WORD *)(v14 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 1024;
    LODWORD(v33[0]) = v7 >> 1;
    OUTLINED_FUNCTION_4_23(v16, v17, v14 + 10, v14 + 14);
    _os_log_impl( &dword_0,  v12,  v13,  "#SiriStateObserver.notifyObserver has fromState: %{BOOL}d, toState: %{BOOL}d",  (uint8_t *)v14,  0xEu);
    OUTLINED_FUNCTION_1_0(v14);
  }

  if ((v8 != 0) == (v7 != 0))
  {
    uint64_t v19 = (void *)Logger.logObject.getter(v18);
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_40(v23))
    {
      uint64_t v21 = (uint8_t *)OUTLINED_FUNCTION_57_1();
      *(_WORD *)uint64_t v21 = 0;
      uint64_t v22 = "#SiriStateObserver.notifyObserver active session state didn't change, returning...";
      goto LABEL_11;
    }

LABEL_12:
    return;
  }

  if (v7)
  {
    uint64_t v19 = (void *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_40(v20))
    {
      uint64_t v21 = (uint8_t *)OUTLINED_FUNCTION_57_1();
      *(_WORD *)uint64_t v21 = 0;
      uint64_t v22 = "#SiriStateObserver.notifyObserver still has active session, returning...";
LABEL_11:
      _os_log_impl(&dword_0, (os_log_t)v19, v11, v22, v21, 2u);
      OUTLINED_FUNCTION_1_0((uint64_t)v21);
      goto LABEL_12;
    }

    goto LABEL_12;
  }

  uint64_t v24 = OBJC_IVAR____TtC18SiriLinkFlowPlugin17SiriStateObserver_shouldCancelRunner;
  int v25 = *(unsigned __int8 *)(v4 + OBJC_IVAR____TtC18SiriLinkFlowPlugin17SiriStateObserver_shouldCancelRunner);
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  if (v25 == 1)
  {
    if (v28)
    {
      char v29 = (_WORD *)OUTLINED_FUNCTION_57_1();
      *char v29 = 0;
      OUTLINED_FUNCTION_2_23(&dword_0, v26, v27, "#SiriStateObserver stopping runner client");
      OUTLINED_FUNCTION_1_0((uint64_t)v29);
    }

    outlined init with copy of DeviceState( v4 + OBJC_IVAR____TtC18SiriLinkFlowPlugin17SiriStateObserver_runnerClient,  (uint64_t)v33);
    uint64_t v30 = v34;
    uint64_t v31 = v35;
    __swift_project_boxed_opaque_existential_1(v33, v34);
    (*(void (**)(uint64_t, uint64_t))(v31 + 56))(v30, v31);
    __swift_destroy_boxed_opaque_existential_1Tm(v33);
  }

  else
  {
    if (v28)
    {
      uint64_t v32 = (_WORD *)OUTLINED_FUNCTION_57_1();
      *uint64_t v32 = 0;
      OUTLINED_FUNCTION_2_23( &dword_0,  v26,  v27,  "#SiriStateObserver not canceling the runner because shouldCancelRunner = false, flipping the switch...");
      OUTLINED_FUNCTION_1_0((uint64_t)v32);
    }

    *(_BYTE *)(v4 + v2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 1;
  }

              uint64_t v21 = v24;
LABEL_9:
              os_log_type_t v11 = (v22 - 1) & v22;
              uint64_t v15 = __clz(__rbit64(v22)) + (v21 << 6);
              v131 = v21;
              goto LABEL_4;
            }
          }
        }
      }

  (*(void (**)(char *, uint64_t))(v64 + 8))(v17, v35);
  return v25;
}

  if (v18 >= 1)
  {
    uint64_t v19 = 0LL;
    os_log_type_t v20 = _swiftEmptyArrayStorage;
    do
    {
      if ((v17 & 0xC000000000000001LL) != 0) {
        uint64_t v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v17);
      }
      else {
        uint64_t v21 = *(id *)(v17 + 8 * v19 + 32);
      }
      uint64_t v22 = v21;
      os_log_type_t v23 = outlined bridged method (mbgnb) of @objc INCodableEnumValueSynonym.localizedSynonym(forLanguage:)( a2,  a3,  v21,  (SEL *)&selRef_localizedSynonymForLanguage_);
      if (v24)
      {
        int v25 = v23;
        uint64_t v26 = v24;
        if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
        {
          OUTLINED_FUNCTION_201();
          os_log_type_t v20 = v35;
        }

        os_log_type_t v27 = v20[2];
        if (v27 >= v20[3] >> 1)
        {
          OUTLINED_FUNCTION_201();
          os_log_type_t v20 = v36;
        }

        _OWORD v20[2] = v27 + 1;
        BOOL v28 = &v20[2 * v27];
        v28[4] = v25;
        v28[5] = v26;
      }

      char v29 = outlined bridged method (mbgnb) of @objc INCodableEnumValueSynonym.localizedSynonym(forLanguage:)( a2,  a3,  v22,  (SEL *)&selRef_localizedPronunciationHintForLanguage_);
      if (v30)
      {
        uint64_t v31 = v29;
        uint64_t v32 = v30;
        if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
        {
          OUTLINED_FUNCTION_201();
          os_log_type_t v20 = v37;
        }

        uint64_t v33 = v20[2];
        if (v33 >= v20[3] >> 1)
        {
          OUTLINED_FUNCTION_201();
          os_log_type_t v20 = v38;
        }

        _OWORD v20[2] = v33 + 1;
        uint64_t v34 = &v20[2 * v33];
        v34[4] = v31;
        void v34[5] = v32;
      }

      ++v19;
    }

    while (v18 != v19);
    OUTLINED_FUNCTION_20();
    return (uint64_t)v20;
  }

  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

Swift::Void __swiftcall SiriStateObserver.doNotCancelRunner()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_57_1();
    *uint64_t v6 = 0;
    OUTLINED_FUNCTION_2_23(&dword_0, v4, v5, "#SiriStateObserver resetContinuationOnAppLaunch");
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
  }

  *(_BYTE *)(v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin17SiriStateObserver_shouldCancelRunner) = 0;
}

void SiriStateObserver.init()()
{
}

id SiriStateObserver.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SiriStateObserver();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void OUTLINED_FUNCTION_2_23(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_4_23(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v4, a3);
}

uint64_t ContactResolving.makeRecommendations(queries:config:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContactResolver(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t v5 = ContactResolver.init()();
  uint64_t v6 = dispatch thunk of ContactResolver.makeRecommendations(queries:config:)(a1, a2);
  swift_release(v5);
  return v6;
}

uint64_t ContactResolving.contactResolverConfig(locale:)(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for RecommenderType(0LL);
  uint64_t v35 = *(void *)(v1 - 8);
  uint64_t v36 = v1;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_35();
  uint64_t v5 = v4 - v3;
  uint64_t v34 = type metadata accessor for SearchSuggestedContacts(0LL);
  uint64_t v32 = *(void *)(v34 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_35();
  uint64_t v9 = v8 - v7;
  type metadata accessor for ContactResolverDomain(0LL);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_35();
  uint64_t v13 = v12 - v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactHandleTypePreference?);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_35();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = type metadata accessor for Locale(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_35();
  uint64_t v22 = v21 - v20;
  uint64_t v23 = type metadata accessor for SiriEnvironment(0LL);
  uint64_t v24 = static SiriEnvironment.default.getter(v23);
  SiriEnvironment.flowTask.getter(v24);
  uint64_t v25 = swift_release();
  uint64_t v26 = dispatch thunk of FlowTaskProvider.id.getter(v25);
  unint64_t v28 = v27;
  swift_release();
  if (!v28)
  {
    uint64_t v26 = 0LL;
    unint64_t v28 = 0xE000000000000000LL;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v22, a1, v18);
  uint64_t v29 = type metadata accessor for ContactHandleTypePreference(0LL);
  uint64_t v30 = __swift_storeEnumTagSinglePayload(v17, 1LL, 1LL, v29);
  static ContactResolverDomain.all.getter(v30);
  (*(void (**)(uint64_t, void, uint64_t))(v32 + 104))( v9,  enum case for SearchSuggestedContacts.ifOnlyMatchIsSuggested(_:),  v34);
  (*(void (**)(uint64_t, void, uint64_t))(v35 + 104))( v5,  enum case for RecommenderType.mlRecommender(_:),  v36);
  return ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:handleTypePreference:recommender:customGenerator:includeResolutionSignals:)( v26,  v28,  0x74756374726F6853LL,  0xE900000000000073LL,  v22,  1LL,  1LL,  &outlined read-only object #0 of ContactResolving.contactResolverConfig(locale:),  v13,  v9,  v17,  v5,  0LL,  0LL,  0);
}

uint64_t protocol witness for ContactResolving.contactResolverConfig(locale:) in conformance ContactResolver( uint64_t a1)
{
  return ContactResolving.contactResolverConfig(locale:)(a1);
}

uint64_t protocol witness for ContactResolving.makeRecommendations(queries:config:) in conformance ContactResolver( uint64_t a1, uint64_t a2)
{
  return dispatch thunk of ContactResolver.makeRecommendations(queries:config:)(a1, a2);
}

void WorkflowDialogTemplating.__allocating_init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v18 = v17;
  uint64_t v19 = (void *)swift_allocObject(v10, 120LL, 7LL);
  outlined init with take of AceServiceInvokerAsync(v18, (uint64_t)(v19 + 2));
  v19[7] = v16;
  v19[8] = v15;
  v19[9] = v14;
  v19[10] = v13;
  v19[11] = v12;
  v19[12] = v11;
  v19[13] = v9;
  v19[14] = a9;
  OUTLINED_FUNCTION_24_0();
}

void WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v10[7] = v16;
  v10[8] = v15;
  v10[9] = v14;
  v10[10] = v13;
  v10[11] = v12;
  v10[12] = v11;
  v10[13] = v9;
  v10[14] = a9;
  OUTLINED_FUNCTION_24_0();
}

uint64_t WorkflowDialogTemplating.makeShowAlertPattern(request:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)WorkflowDialogTemplating.makeShowAlertPattern(request:));
}

uint64_t WorkflowDialogTemplating.makeShowAlertPattern(request:)()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = *(void **)(v0[3] + 112LL);
  uint64_t v3 = swift_task_alloc(32LL);
  v0[4] = v3;
  *(void *)(v3 + 16) = v1;
  uint64_t v4 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for WorkflowRunnerCATPatternsExecutor
                                                 + *v2
                                                 + 16));
  v0[5] = v4;
  void *v4 = v0;
  v4[1] = WorkflowDialogTemplating.makeShowAlertPattern(request:);
  return v6(0LL, partial apply for closure #1 in WorkflowDialogTemplating.makeShowAlertPattern(request:), v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_0_15();
  if (v1)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 32));
    return OUTLINED_FUNCTION_23_1(v0, *(uint64_t (**)(void))(v3 + 8));
  }

{
  uint64_t (*v0)(void);
  OUTLINED_FUNCTION_81_5();
  uint64_t v0 = (uint64_t (*)(void))OUTLINED_FUNCTION_131_1();
  return OUTLINED_FUNCTION_27_2(v0);
}

uint64_t closure #1 in WorkflowDialogTemplating.makeShowAlertPattern(request:)(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined bridged method (pb) of @objc WFChooseFromListDialogRequest.message.getter(a2, (SEL *)&selRef_message);
  if (v8)
  {
    SpeakableString.init(print:speak:)(v7, v8, 0LL, 0LL);
    uint64_t v9 = type metadata accessor for SpeakableString(0LL);
    uint64_t v10 = 0LL;
  }

  else
  {
    uint64_t v9 = type metadata accessor for SpeakableString(0LL);
    uint64_t v10 = 1LL;
  }

  __swift_storeEnumTagSinglePayload((uint64_t)v6, v10, 1LL, v9);
  uint64_t v11 = type metadata accessor for WorkflowRunnerShowAlertParameters(0LL);
  return outlined assign with take of SpeakableString?((uint64_t)v6, a1 + *(int *)(v11 + 20));
}

uint64_t partial apply for closure #1 in WorkflowDialogTemplating.makeShowAlertPattern(request:)(uint64_t a1)
{
  return closure #1 in WorkflowDialogTemplating.makeShowAlertPattern(request:)(a1, *(void **)(v1 + 16));
}

uint64_t WorkflowDialogTemplating.makeShowAlertDialog(request:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_17_19(a1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_40_0();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_131_1();
  return OUTLINED_FUNCTION_27_2(v1);
}

uint64_t WorkflowDialogTemplating.makeShowAlertDialog(request:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(void))
{
  uint64_t v11 = v9[3];
  uint64_t v10 = v9[4];
  uint64_t v12 = (void *)v9[2];
  outlined bridged method (pb) of @objc WFChooseFromListDialogRequest.message.getter(v12, (SEL *)&selRef_message);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  outlined bridged method (pb) of @objc WFChooseFromListDialogRequest.message.getter(v12, (SEL *)&selRef_prompt);
  WorkflowDialogTemplating.getCustomPrompt(message:prompt:)(v14, v16, v17, v18, v10);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_2_6();
  uint64_t v19 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for WorkflowRunnerCATsSimple
                                                  + **(void **)(v11 + 72)
                                                  + 32));
  v9[5] = v19;
  *uint64_t v19 = v9;
  v19[1] = WorkflowDialogTemplating.makeShowAlertDialog(request:);
  return OUTLINED_FUNCTION_0_3(v9[4], a9);
}

uint64_t WorkflowDialogTemplating.makeShowAlertDialog(request:)()
{
  if (!v1) {
    *(void *)(v2 + 56) = v0;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

uint64_t WorkflowDialogTemplating.confirmInteractionDialog(request:shouldShowAppAttribution:)( uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = OUTLINED_FUNCTION_20_10(v4);
  *(void *)(v3 + 40) = OUTLINED_FUNCTION_11_0();
  *(void *)(v3 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_11_0();
  *(void *)(v3 + 56) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowDialogTemplating.confirmInteractionDialog(request:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  id v16 = OUTLINED_FUNCTION_123_2(*(void **)(v14 + 16));
  id v17 = [v16 intentResponse];
  *(void *)(v14 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v17;

  if (v17)
  {
    id v18 = OUTLINED_FUNCTION_122_1();
    id v19 = [v18 intent];
    *(void *)(v14 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v19;

    OUTLINED_FUNCTION_65_7(v20, (SEL *)&selRef_prompt);
    OUTLINED_FUNCTION_46_16(v21, v22);
    OUTLINED_FUNCTION_90_1();
    *(void *)(v14 + 80) = OUTLINED_FUNCTION_17_23();
    uint64_t v23 = outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(v19);
    uint64_t v25 = WorkflowDialogTemplating.getAppName(bundleId:)(v23, v24);
    uint64_t v27 = v26;
    OUTLINED_FUNCTION_56_1();
    if (v27)
    {
      OUTLINED_FUNCTION_24_15(v25, v27);
      uint64_t v28 = 0LL;
    }

    else
    {
      uint64_t v28 = 1LL;
    }

    uint64_t v41 = *(void *)(v14 + 56);
    OUTLINED_FUNCTION_61_1();
    uint64_t v42 = 1LL;
    OUTLINED_FUNCTION_4_13(v41, v28);
    if (v18)
    {
      OUTLINED_FUNCTION_24_15(v15, (uint64_t)v18);
      uint64_t v42 = 0LL;
    }

    uint64_t v43 = *(void *)(v14 + 40);
    uint64_t v44 = OUTLINED_FUNCTION_4_13(*(void *)(v14 + 48), v42);
    OUTLINED_FUNCTION_14_19(v44, "_intentCategory");
    Swift::String v45 = INIntentCategory.asINPBString()();
    OUTLINED_FUNCTION_24_15(v45._countAndFlagsBits, (uint64_t)v45._object);
    uint64_t v46 = OUTLINED_FUNCTION_4_13(v43, 0LL);
    id v47 = OUTLINED_FUNCTION_14_19(v46, "verb");
    OUTLINED_FUNCTION_121_1((uint64_t)v47);
    OUTLINED_FUNCTION_119_1();
    OUTLINED_FUNCTION_24_15(v43, v28);
    OUTLINED_FUNCTION_126_2();
    uint64_t v49 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunVoiceCommandCATsSimple
                                                     + v48
                                                     + 96));
    *(void *)(v14 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v49;
    void *v49 = v14;
    v49[1] = WorkflowDialogTemplating.confirmInteractionDialog(request:shouldShowAppAttribution:);
    OUTLINED_FUNCTION_87_4();
    OUTLINED_FUNCTION_24_7();
    return v57(v50, v51, v52, v53, v54, v55, v56, v57, a9, a10, a11, a12, a13, a14);
  }

  else
  {
    unint64_t v29 = lazy protocol witness table accessor for type WorkflowDialogTemplatingError and conformance WorkflowDialogTemplatingError();
    uint64_t v30 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for WorkflowDialogTemplatingError, v29);
    OUTLINED_FUNCTION_103_1(v30, v31);
    OUTLINED_FUNCTION_116_2();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_24_7();
    return v32(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10, a11, a12, a13, a14);
  }

uint64_t WorkflowDialogTemplating.confirmInteractionDialog(request:shouldShowAppAttribution:)(uint64_t a1)
{
  uint64_t v11 = (void *)*v2;
  uint64_t v4 = v11;
  OUTLINED_FUNCTION_10_0(&v11);
  v4[12] = v1;
  swift_task_dealloc(v5);
  OUTLINED_FUNCTION_34_0();
  uint64_t v6 = v4[6];
  uint64_t v7 = v4[7];
  uint64_t v8 = v4[4];
  uint64_t v9 = v4[5];
  if (!v1) {
    v4[13] = a1;
  }
  OUTLINED_FUNCTION_42_10(v8);
  OUTLINED_FUNCTION_42_10(v9);
  OUTLINED_FUNCTION_42_10(v6);
  OUTLINED_FUNCTION_42_10(v7);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t WorkflowDialogTemplating.confirmInteractionDialog(request:shouldShowAppAttribution:)()
{
  uint64_t v1 = *(void **)(v0 + 64);

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_0_3(*(void *)(v0 + 104), *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  uint64_t v1 = *(void **)(v0 + 64);

  OUTLINED_FUNCTION_116_2();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t WorkflowDialogTemplating.confirmInteractionDialog_prerfv2(request:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a2;
  *(void *)(v4 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v3;
  *(_BYTE *)(v4 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a3;
  *(void *)(v4 + 16) = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 40) = OUTLINED_FUNCTION_20_10(v5);
  *(void *)(v4 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_11_0();
  *(void *)(v4 + 56) = OUTLINED_FUNCTION_11_0();
  *(void *)(v4 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowDialogTemplating.confirmInteractionDialog_prerfv2(request:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  id v16 = OUTLINED_FUNCTION_123_2(*(void **)(v14 + 24));
  id v17 = [v16 intentResponse];
  *(void *)(v14 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v17;

  if (v17)
  {
    id v18 = OUTLINED_FUNCTION_122_1();
    id v19 = [v18 intent];
    *(void *)(v14 + 80) = v19;

    OUTLINED_FUNCTION_65_7(v20, (SEL *)&selRef_prompt);
    OUTLINED_FUNCTION_46_16(v21, v22);
    OUTLINED_FUNCTION_90_1();
    *(void *)(v14 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_17_23();
    uint64_t v23 = outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(v19);
    uint64_t v25 = WorkflowDialogTemplating.getAppName(bundleId:)(v23, v24);
    uint64_t v27 = v26;
    OUTLINED_FUNCTION_56_1();
    if (v27)
    {
      OUTLINED_FUNCTION_24_15(v25, v27);
      uint64_t v28 = 0LL;
    }

    else
    {
      uint64_t v28 = 1LL;
    }

    uint64_t v41 = *(void *)(v14 + 64);
    OUTLINED_FUNCTION_61_1();
    uint64_t v42 = 1LL;
    OUTLINED_FUNCTION_4_13(v41, v28);
    if (v18)
    {
      OUTLINED_FUNCTION_24_15(v15, (uint64_t)v18);
      uint64_t v42 = 0LL;
    }

    uint64_t v43 = *(void *)(v14 + 48);
    uint64_t v44 = OUTLINED_FUNCTION_4_13(*(void *)(v14 + 56), v42);
    OUTLINED_FUNCTION_14_19(v44, "_intentCategory");
    Swift::String v45 = INIntentCategory.asINPBString()();
    OUTLINED_FUNCTION_24_15(v45._countAndFlagsBits, (uint64_t)v45._object);
    uint64_t v46 = OUTLINED_FUNCTION_4_13(v43, 0LL);
    id v47 = OUTLINED_FUNCTION_14_19(v46, "verb");
    OUTLINED_FUNCTION_121_1((uint64_t)v47);
    OUTLINED_FUNCTION_119_1();
    OUTLINED_FUNCTION_24_15(v43, v28);
    OUTLINED_FUNCTION_126_2();
    uint64_t v49 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunVoiceCommandCATs + v48 + 48));
    *(void *)(v14 + 96) = v49;
    void *v49 = v14;
    v49[1] = WorkflowDialogTemplating.confirmInteractionDialog_prerfv2(request:shouldShowAppAttribution:);
    OUTLINED_FUNCTION_59_6();
    OUTLINED_FUNCTION_24_7();
    return v58(v50, v51, v52, v53, v54, v55, v56, v57, a9, a10, a11, a12, a13, a14);
  }

  else
  {
    unint64_t v29 = lazy protocol witness table accessor for type WorkflowDialogTemplatingError and conformance WorkflowDialogTemplatingError();
    uint64_t v30 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for WorkflowDialogTemplatingError, v29);
    OUTLINED_FUNCTION_103_1(v30, v31);
    OUTLINED_FUNCTION_124_1();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_24_7();
    return v32(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10, a11, a12, a13, a14);
  }

uint64_t WorkflowDialogTemplating.confirmInteractionDialog_prerfv2(request:shouldShowAppAttribution:)()
{
  uint64_t v3 = v1[7];
  uint64_t v2 = v1[8];
  uint64_t v5 = v1[5];
  uint64_t v4 = v1[6];
  OUTLINED_FUNCTION_51_3();
  *(void *)(v6 + 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v0;
  swift_task_dealloc(v7);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_43_13(v5);
  OUTLINED_FUNCTION_43_13(v4);
  OUTLINED_FUNCTION_43_13(v3);
  OUTLINED_FUNCTION_43_13(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  OUTLINED_FUNCTION_104();
  uint64_t v1 = *(void **)(v0 + 72);

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_18_2(v2);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v1 = *(void **)(v0 + 72);

  OUTLINED_FUNCTION_124_1();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t WorkflowDialogTemplating.inputTextDialog_rfv1(request:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[6] = OUTLINED_FUNCTION_20_10(v4);
  v3[7] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

#error "97090: call analysis failed (funcsize=134)"
uint64_t WorkflowDialogTemplating.inputTextDialog_rfv1(request:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 80) = v0;
  uint64_t v3 = swift_task_dealloc(v2);
  OUTLINED_FUNCTION_78_3(v3, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

uint64_t WorkflowDialogTemplating.inputTextDialog_rfv1(request:)(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_3_14(v1);
}

{
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_17_19(a1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_132_0();
  return OUTLINED_FUNCTION_3_14(v1);
}

uint64_t WorkflowDialogTemplating.inputTextDialog(request:)(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[5] = OUTLINED_FUNCTION_20_10(v3);
  v2[6] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v1;
  OUTLINED_FUNCTION_17_19(a1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_15_2(*(void *)(v1 + 80), *(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v1;
  OUTLINED_FUNCTION_17_19(a1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t WorkflowDialogTemplating.inputTextDialog(request:)()
{
  id v3 =  objc_msgSend( objc_msgSend(*(id *)(v2 + 24), "textFieldConfiguration"),  "keyboardType");
  OUTLINED_FUNCTION_50_6();
  if (v0)
  {
    uint64_t v4 = OUTLINED_FUNCTION_105_0();
    OUTLINED_FUNCTION_104_2();
  }

  else
  {
    uint64_t v4 = 0LL;
    uint64_t v1 = 0LL;
  }

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v5 = OUTLINED_FUNCTION_48();
  uint64_t v6 = OUTLINED_FUNCTION_31_15(v5, (uint64_t)static Logger.voiceCommands);
  Logger.logObject.getter(v6);
  os_log_type_t v7 = OUTLINED_FUNCTION_58();
  uint64_t v41 = (uint64_t (*)(void))v4;
  if (OUTLINED_FUNCTION_61_0(v7))
  {
    uint64_t v8 = (_DWORD *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v42 = OUTLINED_FUNCTION_38(32LL);
    *uint64_t v8 = 136315138;
    OUTLINED_FUNCTION_113_1();
    uint64_t v9 = OUTLINED_FUNCTION_5_14();
    uint64_t v13 = OUTLINED_FUNCTION_95_0(v9, v10, v11, v12);
    OUTLINED_FUNCTION_58_12(v13, v14, v15, v16, v17, v18, v19, v20, v40, v2 + 24, (void *)(v2 + 16));
    OUTLINED_FUNCTION_56_1();
    OUTLINED_FUNCTION_46();
    OUTLINED_FUNCTION_51_1(&dword_0, v21, v22, "#WorkflowDialogTemplating.inputTextDialog inputType: %s");
    OUTLINED_FUNCTION_30_3(v42, v23, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v42);
    OUTLINED_FUNCTION_1_0((uint64_t)v8);
  }

  else
  {
    OUTLINED_FUNCTION_46();
  }

  uint64_t v25 = *(void *)(v2 + 24);
  uint64_t v24 = *(void **)(v2 + 32);
  OUTLINED_FUNCTION_65_7(v26, (SEL *)&selRef_message);
  OUTLINED_FUNCTION_65_7(v27, (SEL *)&selRef_prompt);
  OUTLINED_FUNCTION_54_15(v28, v29);
  swift_bridgeObjectRelease(v25);
  OUTLINED_FUNCTION_69();
  uint64_t v30 = v24 + 2;
  uint64_t v31 = v24[5];
  uint64_t v32 = v24[6];
  __swift_project_boxed_opaque_existential_1(v30, v31);
  *(void *)(v2 + 56) = OUTLINED_FUNCTION_19_16(v31, v32);
  if (v1) {
    OUTLINED_FUNCTION_24_15((uint64_t)v41, v1);
  }
  uint64_t v33 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_128(v33);
  uint64_t v35 = (void *)OUTLINED_FUNCTION_69_5(*(void *)(class metadata base offset for WorkflowRunnerCATsSimple + v34 + 16));
  *(void *)(v2 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v35;
  void *v35 = v2;
  v35[1] = WorkflowDialogTemplating.inputTextDialog(request:);
  uint64_t v36 = OUTLINED_FUNCTION_87_4();
  return OUTLINED_FUNCTION_36_16(v36, v37, v38, v41);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v3 = OUTLINED_FUNCTION_89_3();
  OUTLINED_FUNCTION_84_3(v3, v4);
  uint64_t v5 = *(void *)(v2 + 40);
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  outlined destroy of URL?(v5, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t WorkflowDialogTemplating.inputDateDialog(request:)(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[5] = OUTLINED_FUNCTION_20_10(v3);
  v2[6] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowDialogTemplating.inputDateDialog(request:)()
{
  id v3 =  objc_msgSend( objc_msgSend(*(id *)(v2 + 24), "configuration"),  "datePickerMode");
  OUTLINED_FUNCTION_50_6();
  if (v0)
  {
    uint64_t v4 = OUTLINED_FUNCTION_105_0();
    OUTLINED_FUNCTION_104_2();
  }

  else
  {
    uint64_t v4 = 0LL;
    uint64_t v1 = 0LL;
  }

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v5 = OUTLINED_FUNCTION_48();
  uint64_t v6 = OUTLINED_FUNCTION_31_15(v5, (uint64_t)static Logger.voiceCommands);
  Logger.logObject.getter(v6);
  os_log_type_t v7 = OUTLINED_FUNCTION_58();
  uint64_t v37 = (uint64_t (*)(void))v4;
  if (OUTLINED_FUNCTION_61_0(v7))
  {
    uint64_t v8 = (_DWORD *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v38 = OUTLINED_FUNCTION_38(32LL);
    *uint64_t v8 = 136315138;
    OUTLINED_FUNCTION_113_1();
    uint64_t v9 = OUTLINED_FUNCTION_5_14();
    uint64_t v13 = OUTLINED_FUNCTION_95_0(v9, v10, v11, v12);
    OUTLINED_FUNCTION_58_12(v13, v14, v15, v16, v17, v18, v19, v20, v36, v2 + 24, (void *)(v2 + 16));
    OUTLINED_FUNCTION_56_1();
    OUTLINED_FUNCTION_46();
    OUTLINED_FUNCTION_51_1(&dword_0, v21, v22, "#WorkflowDialogTemplating.inputDateDialog inputType: %s");
    OUTLINED_FUNCTION_30_3(v38, v23, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v38);
    OUTLINED_FUNCTION_1_0((uint64_t)v8);
  }

  else
  {
    OUTLINED_FUNCTION_46();
  }

  uint64_t v24 = *(void **)(v2 + 32);
  uint64_t v25 = (void *)v24[9];
  uint64_t v27 = v24[5];
  uint64_t v26 = v24[6];
  __swift_project_boxed_opaque_existential_1(v24 + 2, v27);
  uint64_t v28 = OUTLINED_FUNCTION_19_16(v27, v26);
  *(void *)(v2 + 56) = v28;
  if (v1) {
    OUTLINED_FUNCTION_24_15((uint64_t)v37, v1);
  }
  uint64_t v29 = OUTLINED_FUNCTION_61_1();
  uint64_t v30 = OUTLINED_FUNCTION_77_6(v29);
  OUTLINED_FUNCTION_93_1(v30, (SEL *)&selRef_message);
  OUTLINED_FUNCTION_93_1(v31, (SEL *)&selRef_prompt);
  OUTLINED_FUNCTION_55_13(v32, v33);
  OUTLINED_FUNCTION_28_4();
  OUTLINED_FUNCTION_69();
  uint64_t v34 = (void *)OUTLINED_FUNCTION_69_5(*(void *)(*v25 + class metadata base offset for WorkflowRunnerCATsSimple));
  *(void *)(v2 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v34;
  *uint64_t v34 = v2;
  v34[1] = WorkflowDialogTemplating.inputDateDialog(request:);
  return OUTLINED_FUNCTION_36_16(v28, *(void *)(v2 + 48), *(void *)(v2 + 40), v37);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_41_17();
  OUTLINED_FUNCTION_34_0();
  uint64_t v4 = *(void *)(v3 + 48);
  OUTLINED_FUNCTION_99_0(*(void *)(v3 + 40));
  OUTLINED_FUNCTION_99_0(v4);
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_45_7(v5, v6, v7);
  }

  else
  {
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_0_3(v2, *(uint64_t (**)(void))(v1 + 8));
  }

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(v0 + 48));
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t WorkflowDialogTemplating.inputDateDialog_prerfv2(request:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[6] = OUTLINED_FUNCTION_20_10(v4);
  v3[7] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

#error "97AA4: call analysis failed (funcsize=133)"
uint64_t WorkflowDialogTemplating.inputDateDialog_prerfv2(request:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v8)(void);
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_38_16();
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_43_13(v2);
  OUTLINED_FUNCTION_43_13(v1);
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_45_7(v4, v5, v6);
  }

  else
  {
    swift_task_dealloc(*(void *)(v3 + 56));
    OUTLINED_FUNCTION_40_0();
    uint64_t v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_18_2(v8);
  }

uint64_t WorkflowDialogTemplating.inputDateDialog_prerfv2(request:)()
{
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_132_0();
  return OUTLINED_FUNCTION_27_2(v1);
}

uint64_t WorkflowDialogTemplating.chooseFromListDialog(request:disambiguationItems:siriEnvironment:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  void v4[5] = v3;
  void v4[2] = a1;
  void v4[3] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[6] = OUTLINED_FUNCTION_10_8(v5);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowDialogTemplating.chooseFromListDialog(request:disambiguationItems:siriEnvironment:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = v10[5];
  OUTLINED_FUNCTION_98_0(v12, (SEL *)&selRef_message);
  OUTLINED_FUNCTION_98_0(v13, (SEL *)&selRef_prompt);
  OUTLINED_FUNCTION_56_15(v14, v15);
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_28_4();
  v10[7] = OUTLINED_FUNCTION_70_8();
  uint64_t v16 = *(void **)(v11 + 88);
  v10[8] = OUTLINED_FUNCTION_17_23();
  uint64_t v17 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunCustomIntentCATsSimple + *v16 + 80));
  v10[9] = v17;
  *uint64_t v17 = v10;
  v17[1] = WorkflowDialogTemplating.chooseFromListDialog(request:disambiguationItems:siriEnvironment:);
  OUTLINED_FUNCTION_87_4();
  OUTLINED_FUNCTION_45_11();
  return v21(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10);
}

uint64_t WorkflowDialogTemplating.chooseFromListDialog(request:disambiguationItems:siriEnvironment:)()
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(*v1 + 72);
  uint64_t v4 = *v1;
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc(v5);
  if (v0)
  {
    OUTLINED_FUNCTION_34_0();
    OUTLINED_FUNCTION_37();
  }

  else
  {
    OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_34_0();
    *(void *)(v4 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v3;
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_45_7(v6, v7, v8);
}

uint64_t WorkflowDialogTemplating.chooseFromListDialog(request:disambiguationItems:siriEnvironment:)( uint64_t a1)
{
  return OUTLINED_FUNCTION_8_4(*(void *)(v1 + 88), *(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_17_19(a1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_40_0();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_132_0();
  return OUTLINED_FUNCTION_27_2(v1);
}

uint64_t WorkflowDialogTemplating.chooseFromListDialog_preRFv2(request:disambiguationItems:siriEnvironment:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v5[7] = OUTLINED_FUNCTION_10_8(v6);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowDialogTemplating.chooseFromListDialog_preRFv2(request:disambiguationItems:siriEnvironment:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = v10[6];
  OUTLINED_FUNCTION_98_0(v12, (SEL *)&selRef_message);
  OUTLINED_FUNCTION_98_0(v13, (SEL *)&selRef_prompt);
  OUTLINED_FUNCTION_56_15(v14, v15);
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_28_4();
  v10[8] = OUTLINED_FUNCTION_70_8();
  uint64_t v16 = *(void **)(v11 + 80);
  v10[9] = OUTLINED_FUNCTION_17_23();
  uint64_t v17 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunCustomIntentCATs + *v16 + 40));
  v10[10] = v17;
  *uint64_t v17 = v10;
  v17[1] = WorkflowDialogTemplating.chooseFromListDialog_preRFv2(request:disambiguationItems:siriEnvironment:);
  OUTLINED_FUNCTION_59_6();
  OUTLINED_FUNCTION_45_11();
  return v22(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10);
}

uint64_t WorkflowDialogTemplating.chooseFromListDialog_preRFv2(request:disambiguationItems:siriEnvironment:)()
{
  *(void *)(v0 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    OUTLINED_FUNCTION_61();
    OUTLINED_FUNCTION_14();
  }

  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_61();
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

uint64_t WorkflowDialogTemplating.chooseFromListDialog_preRFv2(request:disambiguationItems:siriEnvironment:)( uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_27_2(v1);
}

{
  uint64_t v1;
  OUTLINED_FUNCTION_17_19(a1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t WorkflowDialogTemplating.makeContinueInAppDialog(app:)(uint64_t a1)
{
  v2[20] = a1;
  v2[21] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
  v2[22] = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  OUTLINED_FUNCTION_49_4();
  uint64_t v5 = *v3;
  OUTLINED_FUNCTION_12_16(*(void *)(v2 + 184), v6);
  uint64_t v7 = swift_task_dealloc(*(void *)(v2 + 176));
  if (!v1) {
    uint64_t v7 = a1;
  }
  return OUTLINED_FUNCTION_23_1(v7, *(uint64_t (**)(void))(v5 + 8));
}

uint64_t WorkflowDialogTemplating.makeContinueInAppDialog(app:)()
{
  uint64_t v1 = v0[21];
  if ((OUTLINED_FUNCTION_83_2() & 1) != 0)
  {
    uint64_t v2 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(*(void *)v0[21] + 272LL));
    v0[23] = v2;
    *uint64_t v2 = v0;
    v2[1] = WorkflowDialogTemplating.makeContinueInAppDialog(app:);
    return v14();
  }

  else
  {
    uint64_t v4 = v0[22];
    outlined init with copy of DeviceState(v1 + 16, (uint64_t)(v0 + 2));
    uint64_t v5 = type metadata accessor for ContinueInAppCATWrapperSimple(0LL);
    swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
    outlined init with copy of DeviceState?((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
    SiriKitFlowCATWrapperSimple.init(deviceState:)();
    uint64_t v7 = v6;
    v0[24] = v6;
    outlined destroy of URL?((uint64_t)(v0 + 2), &demangling cache variable for type metadata for DeviceState?);
    uint64_t v8 = *(void *)(v1 + 40);
    uint64_t v9 = *(void *)(v1 + 48);
    uint64_t v10 = (void *)OUTLINED_FUNCTION_45();
    __swift_project_boxed_opaque_existential_1(v10, v11);
    uint64_t v12 = OUTLINED_FUNCTION_19_16(v8, v9);
    v0[25] = v12;
    v0[15] = &type metadata for AppInfoResolver;
    v0[16] = &protocol witness table for AppInfoResolver;
    App.toAppDisplayInfo(_:appInfoResolving:isFirstParty:)(v1 + 16, v0 + 12, 2, v4);
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 12);
    uint64_t v13 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(*v7 + class metadata base offset for ContinueInAppCATWrapperSimple));
    v0[26] = v13;
    *uint64_t v13 = v0;
    v13[1] = WorkflowDialogTemplating.makeContinueInAppDialog(app:);
    return ((uint64_t (*)(uint64_t, void))v14)(v12, v0[22]);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  OUTLINED_FUNCTION_50_0();
  v3[17] = v1;
  v3[18] = v2;
  v3[19] = v0;
  OUTLINED_FUNCTION_51_3();
  *(void *)(v4 + 216) = v0;
  uint64_t v6 = swift_task_dealloc(v5);
  OUTLINED_FUNCTION_78_3(v6, &demangling cache variable for type metadata for AppDisplayInfo?);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  uint64_t v1;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 144);
  swift_task_dealloc(*(void *)(v0 + 176));
  return OUTLINED_FUNCTION_8_4(v1, *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  swift_release();
  swift_task_dealloc(*(void *)(v0 + 176));
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t WorkflowDialogTemplating.makeContinueInAppDialog_preRFv2(app:)(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
  v3[15] = OUTLINED_FUNCTION_10_8(v4);
  uint64_t v5 = type metadata accessor for TemplatingResult(0LL);
  v3[16] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[17] = v6;
  v3[18] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowDialogTemplating.makeContinueInAppDialog_preRFv2(app:)()
{
  uint64_t v1 = v0[14] + 16LL;
  if ((OUTLINED_FUNCTION_83_2() & 1) != 0)
  {
    uint64_t v2 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(*(void *)v0[14] + 280LL));
    v0[19] = v2;
    *uint64_t v2 = v0;
    v2[1] = WorkflowDialogTemplating.makeContinueInAppDialog_preRFv2(app:);
    return v6(v0[12]);
  }

  else
  {
    uint64_t v4 = v0[15];
    v0[5] = &type metadata for AppInfoResolver;
    v0[6] = &protocol witness table for AppInfoResolver;
    App.toAppDisplayInfo(_:appInfoResolving:isFirstParty:)(v1, v0 + 2, 2, v4);
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2);
    outlined init with copy of DeviceState(v1, (uint64_t)(v0 + 7));
    v0[20] = v5;
    *uint64_t v5 = v0;
    v5[1] = WorkflowDialogTemplating.makeContinueInAppDialog_preRFv2(app:);
    return static ResponseTemplates.continueInApp(appDisplayInfo:deviceState:)(v0[18], v0[15], v0 + 7);
  }

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  OUTLINED_FUNCTION_77_1();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_12_16(*(void *)(v0 + 152), v3);
  swift_task_dealloc(*(void *)(v0 + 144));
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v2 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 16__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v0;
  uint64_t v3 = swift_task_dealloc(v2);
  uint64_t v4 = OUTLINED_FUNCTION_60_10(v3, &demangling cache variable for type metadata for DeviceState?);
  OUTLINED_FUNCTION_78_3(v4, &demangling cache variable for type metadata for AppDisplayInfo?);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  void *v0;
  uint64_t (*v1)(void);
  (*(void (**)(void, void, void))(v0[17] + 32LL))(v0[12], v0[18], v0[16]);
  swift_task_dealloc(v0[18]);
  OUTLINED_FUNCTION_40_0();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_27_2(v1);
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(v0 + 144));
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t WorkflowDialogTemplating.makeOpenInteractionFailedDialog()()
{
  *(void *)(v1 + 16) = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v1 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = OUTLINED_FUNCTION_10_8(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_0_15();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_release();
    OUTLINED_FUNCTION_40_0();
    uint64_t v2 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v1 = OUTLINED_FUNCTION_89_3();
  uint64_t v3 = OUTLINED_FUNCTION_84_3(v1, v2);
  OUTLINED_FUNCTION_78_3(v3, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    OUTLINED_FUNCTION_40_0();
    uint64_t v5 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_15_2(v5, v6);
  }

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(void);
  OUTLINED_FUNCTION_49_4();
  OUTLINED_FUNCTION_10_0(v2);
  *(void *)(v1 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_release();
    OUTLINED_FUNCTION_40_0();
    uint64_t v5 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_23_1(v5, v6);
  }

{
  uint64_t v0;
  swift_release();
  OUTLINED_FUNCTION_97_3();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_97_3();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  swift_release();
  OUTLINED_FUNCTION_97_3();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t WorkflowDialogTemplating.makeOpenInteractionFailedDialog()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char v12 = OUTLINED_FUNCTION_53_13();
  uint64_t v13 = v10[2];
  if ((v12 & 1) != 0)
  {
    uint64_t v14 = OUTLINED_FUNCTION_3_29(v11);
    OUTLINED_FUNCTION_102_1(v14);
    uint64_t v16 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunVoiceCommandCATsSimple
                                                    + v15
                                                    + 160));
    v10[5] = v16;
    void *v16 = v10;
    v16[1] = WorkflowDialogTemplating.makeOpenInteractionFailedDialog();
    OUTLINED_FUNCTION_87_4();
LABEL_7:
    OUTLINED_FUNCTION_45_11();
    return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10);
  }

  char v17 = OUTLINED_FUNCTION_62_10();
  uint64_t v18 = *(void **)(v13 + 104);
  v10[7] = OUTLINED_FUNCTION_3_29(v11);
  if ((v17 & 1) == 0)
  {
    uint64_t v21 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunVoiceCommandCATsSimple
                                                    + *v18
                                                    + 144));
    v10[10] = v21;
    void *v21 = v10;
    v21[1] = WorkflowDialogTemplating.makeOpenInteractionFailedDialog();
    goto LABEL_7;
  }

  uint64_t v19 = OUTLINED_FUNCTION_52_12();
  if (v20) {
    OUTLINED_FUNCTION_24_15(v19, v20);
  }
  uint64_t v31 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_127_1(v31);
  uint64_t v33 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunVoiceCommandCATsSimple + v32 + 176));
  v10[8] = v33;
  *uint64_t v33 = v10;
  v33[1] = WorkflowDialogTemplating.makeOpenInteractionFailedDialog();
  OUTLINED_FUNCTION_45_11();
  return v36(v34, v35, v36, v37, v38, v39, v40, v41, a9, a10);
}

uint64_t WorkflowDialogTemplating.makeOpenInteractionFailedDialog_preRFv2()(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowDialogTemplating.makeOpenInteractionFailedDialog_preRFv2()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char v12 = OUTLINED_FUNCTION_53_13();
  uint64_t v13 = v10[3];
  if ((v12 & 1) != 0)
  {
    uint64_t v14 = *(void **)(v13 + 96);
    v10[5] = OUTLINED_FUNCTION_3_29(v11);
    uint64_t v15 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunVoiceCommandCATs + *v14 + 80));
    v10[6] = v15;
    *uint64_t v15 = v10;
    v15[1] = WorkflowDialogTemplating.makeOpenInteractionFailedDialog_preRFv2();
    OUTLINED_FUNCTION_59_6();
LABEL_7:
    OUTLINED_FUNCTION_45_11();
    return v23(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10);
  }

  char v16 = OUTLINED_FUNCTION_62_10();
  char v17 = *(void **)(v13 + 96);
  v10[8] = OUTLINED_FUNCTION_3_29(v11);
  if ((v16 & 1) == 0)
  {
    uint64_t v20 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunVoiceCommandCATs + *v17 + 72));
    v10[11] = v20;
    *uint64_t v20 = v10;
    v20[1] = WorkflowDialogTemplating.makeOpenInteractionFailedDialog_preRFv2();
    goto LABEL_7;
  }

  uint64_t v18 = OUTLINED_FUNCTION_52_12();
  if (v19) {
    OUTLINED_FUNCTION_24_15(v18, v19);
  }
  uint64_t v30 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_127_1(v30);
  uint64_t v32 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunVoiceCommandCATs + v31 + 88));
  v10[9] = v32;
  *uint64_t v32 = v10;
  v32[1] = WorkflowDialogTemplating.makeOpenInteractionFailedDialog_preRFv2();
  OUTLINED_FUNCTION_45_11();
  return v36(v33, v34, v35, v36, v37, v38, v39, v40, a9, a10);
}

uint64_t WorkflowDialogTemplating.makeOpenInteractionFailedDialog_preRFv2()()
{
  *(void *)(v0 + 56) = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    swift_release();
    OUTLINED_FUNCTION_40_0();
    uint64_t v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_3_14(v5);
  }

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);
  OUTLINED_FUNCTION_49_4();
  OUTLINED_FUNCTION_10_0(v2);
  *(void *)(v1 + 80) = v0;
  uint64_t v4 = swift_task_dealloc(v3);
  OUTLINED_FUNCTION_60_10(v4, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_40_0();
    uint64_t v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return v6();
  }

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v5)(void);
  OUTLINED_FUNCTION_77_1();
  OUTLINED_FUNCTION_10_0(v2);
  *(void *)(v0 + 96) = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    swift_release();
    OUTLINED_FUNCTION_40_0();
    uint64_t v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_3_14(v5);
  }

{
  uint64_t v0;
  swift_release();
  OUTLINED_FUNCTION_81_5();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_81_5();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  swift_release();
  OUTLINED_FUNCTION_81_5();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t WorkflowDialogTemplating.makeHandoffDialog()()
{
  *(void *)(v1 + 16) = v0;
  return OUTLINED_FUNCTION_6_2((uint64_t)WorkflowDialogTemplating.makeHandoffDialog());
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v1 = v0[2];
  uint64_t v2 = *(void **)(v1 + 88);
  v0[3] = OUTLINED_FUNCTION_3_29((void *)(v1 + 16));
  uint64_t v3 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunCustomIntentCATsSimple + *v2 + 208));
  v0[4] = v3;
  uint64_t v4 = OUTLINED_FUNCTION_88_3(v3, (uint64_t)WorkflowDialogTemplating.makeHandoffDialog());
  return OUTLINED_FUNCTION_23_1(v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_39_18();
  if (v1)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_release();
    return OUTLINED_FUNCTION_23_1(v0, *(uint64_t (**)(void))(v2 + 8));
  }

{
  uint64_t v0;
  swift_release();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t WorkflowDialogTemplating.makeHandoffDialog_preRFv2()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)WorkflowDialogTemplating.makeHandoffDialog_preRFv2());
}

uint64_t WorkflowDialogTemplating.makeHandoffDialog_preRFv2()()
{
  uint64_t v1 = OUTLINED_FUNCTION_3_29((void *)(*(void *)(v0 + 24) + 16LL));
  OUTLINED_FUNCTION_102_1(v1);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunCustomIntentCATs + v2 + 104));
  *(void *)(v0 + 40) = v3;
  uint64_t v4 = OUTLINED_FUNCTION_74_7(v3);
  return OUTLINED_FUNCTION_36_1(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_24_17();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    swift_release();
    return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v1 + 8));
  }

{
  uint64_t (*v0)(void);
  swift_release();
  uint64_t v0 = (uint64_t (*)(void))OUTLINED_FUNCTION_131_1();
  return OUTLINED_FUNCTION_27_2(v0);
}

uint64_t WorkflowDialogTemplating.makePromptForShortcutName()()
{
  *(void *)(v1 + 16) = v0;
  return OUTLINED_FUNCTION_6_2((uint64_t)WorkflowDialogTemplating.makePromptForShortcutName());
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v1 = v0[2];
  uint64_t v2 = *(void **)(v1 + 104);
  v0[3] = OUTLINED_FUNCTION_3_29((void *)(v1 + 16));
  uint64_t v3 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunVoiceCommandCATsSimple + *v2 + 192));
  v0[4] = v3;
  uint64_t v4 = OUTLINED_FUNCTION_88_3(v3, (uint64_t)WorkflowDialogTemplating.makePromptForShortcutName());
  return OUTLINED_FUNCTION_23_1(v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_39_18();
  if (v1)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_release();
    return OUTLINED_FUNCTION_23_1(v0, *(uint64_t (**)(void))(v2 + 8));
  }

uint64_t WorkflowDialogTemplating.makePromptForShortcutName_prerfv2()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)WorkflowDialogTemplating.makePromptForShortcutName_prerfv2());
}

uint64_t WorkflowDialogTemplating.makePromptForShortcutName_prerfv2()()
{
  uint64_t v1 = OUTLINED_FUNCTION_3_29((void *)(*(void *)(v0 + 24) + 16LL));
  OUTLINED_FUNCTION_102_1(v1);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunVoiceCommandCATs + v2 + 96));
  *(void *)(v0 + 40) = v3;
  uint64_t v4 = OUTLINED_FUNCTION_74_7(v3);
  return OUTLINED_FUNCTION_36_1(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_24_17();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    swift_release();
    return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v1 + 8));
  }

uint64_t WorkflowDialogTemplating.makeFinalDonePattern()()
{
  *(void *)(v1 + 16) = v0;
  return OUTLINED_FUNCTION_6_2((uint64_t)WorkflowDialogTemplating.makeFinalDonePattern());
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v3)(void, SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *)(Swift::OpaquePointer), void);
  uint64_t v1 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(**(void **)(*(void *)(v0 + 16) + 112LL)
                                                 + class metadata base offset for WorkflowRunnerCATPatternsExecutor));
  *(void *)(v0 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v1;
  *uint64_t v1 = v0;
  v1[1] = WorkflowDialogTemplating.makeFinalDonePattern();
  return v3(0LL, CustomIntentDisambiguationItemContainer.init(items:), 0LL);
}

uint64_t WorkflowDialogTemplating.makeFinalDonePattern()(uint64_t a1)
{
  uint64_t v5 = *v2;
  uint64_t v6 = OUTLINED_FUNCTION_12_16(*(void *)(v4 + 24), &v8);
  if (!v1) {
    uint64_t v6 = a1;
  }
  return OUTLINED_FUNCTION_15_2(v6, *(uint64_t (**)(void))(v5 + 8));
}

uint64_t WorkflowDialogTemplating.makeUnsupportedOnCarPlayErrorDialog()()
{
  *(void *)(v1 + 16) = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v1 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = OUTLINED_FUNCTION_10_8(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t (*v9)(uint64_t);
  uint64_t v1 = (void *)v0[2];
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v2);
  v0[4] = OUTLINED_FUNCTION_19_16(v2, v3);
  uint64_t v4 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_77(v4);
  uint64_t v6 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunVoiceCommandCATsSimple + v5 + 64));
  v0[5] = v6;
  *uint64_t v6 = v0;
  v6[1] = WorkflowDialogTemplating.makeUnsupportedOnCarPlayErrorDialog();
  uint64_t v7 = OUTLINED_FUNCTION_87_4();
  return v9(v7);
}

{
  uint64_t (*v0)(void);
  OUTLINED_FUNCTION_97_3();
  uint64_t v0 = (uint64_t (*)(void))OUTLINED_FUNCTION_131_1();
  return OUTLINED_FUNCTION_27_2(v0);
}

uint64_t WorkflowDialogTemplating.makeUnsupportedOnCarPlayErrorDialog()(uint64_t a1)
{
  uint64_t v4 = OUTLINED_FUNCTION_24_17();
  OUTLINED_FUNCTION_60_10(v4, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  if (v1)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_15_2(a1, *(uint64_t (**)(void))(v2 + 8));
  }

uint64_t WorkflowDialogTemplating.makeUnsupportedOnCarPlayErrorDialog_prerfv2()(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowDialogTemplating.makeUnsupportedOnCarPlayErrorDialog_prerfv2()()
{
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v2);
  v0[5] = OUTLINED_FUNCTION_19_16(v2, v3);
  uint64_t v4 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_77(v4);
  uint64_t v6 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunVoiceCommandCATs + v5 + 32));
  v0[6] = v6;
  *uint64_t v6 = v0;
  v6[1] = WorkflowDialogTemplating.makeUnsupportedOnCarPlayErrorDialog_prerfv2();
  uint64_t v7 = OUTLINED_FUNCTION_59_6();
  return v9(v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v6 = *v1;
  uint64_t v2 = v6;
  OUTLINED_FUNCTION_10_0(&v6);
  *(void *)(v2 + 56) = v0;
  uint64_t v4 = swift_task_dealloc(v3);
  OUTLINED_FUNCTION_78_3(v4, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_34_0();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 32));
    return OUTLINED_FUNCTION_3_14((uint64_t (*)(void))v1[1]);
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_81_5();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t WorkflowDialogTemplating.makeErrorDialog(customDialog:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[5] = OUTLINED_FUNCTION_20_10(v4);
  v3[6] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowDialogTemplating.makeErrorDialog(customDialog:)()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = OUTLINED_FUNCTION_3_29((void *)(v0[4] + 16LL));
  v0[7] = v2;
  if (v1)
  {
    uint64_t v4 = v0[2];
    uint64_t v3 = v0[3];
    swift_bridgeObjectRetain(v3);
    OUTLINED_FUNCTION_24_15(v4, v3);
  }

  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_40_17(v5);
  uint64_t v7 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunVoiceCommandCATsSimple + v6 + 32));
  v0[8] = v7;
  *uint64_t v7 = v0;
  v7[1] = WorkflowDialogTemplating.inputDateDialog(request:);
  return v9(v2, v0[6], v0[5]);
}

uint64_t WorkflowDialogTemplating.makeErrorDialog_prerfv2(customDialog:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  void v4[5] = v3;
  void v4[2] = a1;
  void v4[3] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[6] = OUTLINED_FUNCTION_20_10(v5);
  v4[7] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowDialogTemplating.makeErrorDialog_prerfv2(customDialog:)()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = OUTLINED_FUNCTION_3_29((void *)(v0[5] + 16LL));
  v0[8] = v2;
  if (v1)
  {
    uint64_t v4 = v0[3];
    uint64_t v3 = v0[4];
    swift_bridgeObjectRetain(v3);
    OUTLINED_FUNCTION_24_15(v4, v3);
  }

  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_40_17(v5);
  uint64_t v7 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunVoiceCommandCATs + v6 + 16));
  v0[9] = v7;
  *uint64_t v7 = v0;
  v7[1] = WorkflowDialogTemplating.inputDateDialog_prerfv2(request:);
  return v9(v0[2], v2, v0[7], v0[6]);
}

void WorkflowDialogTemplating.mapDisambiguationItemList(disambiguationList:siriEnvironment:)(uint64_t a1)
{
  uint64_t v2 = OUTLINED_FUNCTION_61_1();
  uint64_t v53 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v3);
  id v47 = (char *)&v47 - v7;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v47 - v8;
  static OutputUtils.shouldReadItemsInDisambiguationList(siriEnvironment:)();
  if ((v10 & 1) != 0)
  {
    uint64_t v11 = *(void *)(a1 + 16);
    char v12 = _swiftEmptyArrayStorage;
    uint64_t v51 = v2;
    if (v11)
    {
      uint64_t v48 = v5;
      uint64_t v57 = _swiftEmptyArrayStorage;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v11, 0LL);
      v49.n128_u64[0] = type metadata accessor for CATSpeakableString();
      char v12 = v57;
      uint64_t v13 = (void **)(a1 + 80);
      do
      {
        uint64_t v52 = v12;
        uint64_t v14 = (uint64_t)*(v13 - 6);
        uint64_t v15 = (uint64_t)*(v13 - 5);
        uint64_t v16 = (uint64_t)*(v13 - 3);
        char v17 = *v13;
        uint64_t v50 = *(v13 - 2);
        OUTLINED_FUNCTION_5_14();
        id v18 = v17;
        swift_bridgeObjectRetain_n(v15, 2LL);
        swift_bridgeObjectRetain(v16);
        uint64_t v19 = v49.n128_u64[0];
        static CATSpeakableString.applyTTSHint(speak:)();
        OUTLINED_FUNCTION_118_2();
        OUTLINED_FUNCTION_56_1();
        uint64_t v55 = v14;
        uint64_t v56 = v19;
        if (v16)
        {
          swift_bridgeObjectRetain(v16);
          uint64_t v20 = static CATSpeakableString.applyTTSHint(speak:)();
          unint64_t v22 = v21;
          swift_bridgeObjectRelease(v16);
          uint64_t v23 = HIBYTE(v22) & 0xF;
          if ((v22 & 0x2000000000000000LL) == 0) {
            uint64_t v23 = v20 & 0xFFFFFFFFFFFFLL;
          }
          if (v23)
          {
            v54._uint64_t countAndFlagsBits = 0x209480E220LL;
            v54._object = (void *)0xA500000000000000LL;
            v24._uint64_t countAndFlagsBits = v20;
            v24._object = (void *)v22;
            String.append(_:)(v24);
            OUTLINED_FUNCTION_2_6();
            String.append(_:)(v54);
          }

          OUTLINED_FUNCTION_2_6();
        }

        OUTLINED_FUNCTION_24_15(v55, v56);

        OUTLINED_FUNCTION_37();
        swift_bridgeObjectRelease(v16);
        OUTLINED_FUNCTION_56_1();
        char v12 = v52;
        uint64_t v57 = v52;
        unint64_t v26 = v52[2];
        unint64_t v25 = v52[3];
        if (v26 >= v25 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v25 > 1,  v26 + 1,  1LL);
          char v12 = v57;
        }

        v13 += 7;
        void v12[2] = v26 + 1;
        OUTLINED_FUNCTION_117_2();
        uint64_t v2 = v51;
        (*(void (**)(char *, char *, uint64_t))(v28 + 32))( (char *)v12 + v27 + *(void *)(v28 + 72) * v26,  v9,  v51);
        --v11;
      }

      while (v11);
      uint64_t v5 = v48;
    }

    uint64_t v29 = v12[2];
    uint64_t v30 = v47;
    if (v29)
    {
      OUTLINED_FUNCTION_117_2();
      uint64_t v32 = (char *)v12 + v31;
      uint64_t v50 = *(char **)(v33 + 72);
      uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
      uint64_t v52 = v12;
      __n128 v35 = swift_bridgeObjectRetain(v12);
      v35.n128_u64[0] = 136315138LL;
      __n128 v49 = v35;
      uint64_t v48 = (char *)&type metadata for Any + 8;
      do
      {
        v34(v30, v32, v2);
        if (one-time initialization token for voiceCommands != -1) {
          swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
        }
        uint64_t v36 = OUTLINED_FUNCTION_48();
        __swift_project_value_buffer(v36, (uint64_t)static Logger.voiceCommands);
        uint64_t v37 = ((uint64_t (*)(char *, char *, uint64_t))v34)(v5, v30, v2);
        uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
        os_log_type_t v39 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v38, v39))
        {
          uint64_t v40 = OUTLINED_FUNCTION_38(12LL);
          uint64_t v41 = OUTLINED_FUNCTION_38(32LL);
          uint64_t v55 = v41;
          *(_DWORD *)uint64_t v40 = v49.n128_u32[0];
          uint64_t v42 = SpeakableString.speak.getter();
          *(void *)(v40 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v55);
          OUTLINED_FUNCTION_20();
          uint64_t v44 = *(void (**)(char *, uint64_t))(v53 + 8);
          v44(v5, v51);
          _os_log_impl(&dword_0, v38, v39, "itemAsString: %s", (uint8_t *)v40, 0xCu);
          swift_arrayDestroy(v41, 1LL, v48);
          uint64_t v45 = v41;
          uint64_t v2 = v51;
          OUTLINED_FUNCTION_1_0(v45);
          OUTLINED_FUNCTION_1_0(v40);

          v44(v30, v2);
        }

        else
        {

          uint64_t v46 = *(void (**)(char *, uint64_t))(v53 + 8);
          v46(v5, v2);
          v46(v30, v2);
        }

        uint64_t v32 = &v50[(void)v32];
        --v29;
      }

      while (v29);
      OUTLINED_FUNCTION_20();
    }
  }

  OUTLINED_FUNCTION_24_0();
}

uint64_t WorkflowDialogTemplating.getAppName(bundleId:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    type metadata accessor for App(0LL);
    swift_bridgeObjectRetain(a2);
    uint64_t v3 = OUTLINED_FUNCTION_45();
    uint64_t v5 = App.__allocating_init(appIdentifier:)(v3, v4);
    uint64_t v6 = type metadata accessor for AppNameResolver();
    swift_initStackObject(v6, &v9);
    uint64_t v7 = (void *)static SAAppInfoFactory.createAppInfo(app:)(v5);
    AppNameResolver.resolveAppNameWithAppInfo(appInfo:)(v7);
    OUTLINED_FUNCTION_118_2();

    OUTLINED_FUNCTION_61();
  }

  return OUTLINED_FUNCTION_45();
}

Swift::String_optional __swiftcall WorkflowDialogTemplating.getCustomDialog(intentResponse:defaultPrompt:)( INIntentResponse intentResponse, Swift::String_optional defaultPrompt)
{
  object = defaultPrompt.value._object;
  id v4 = [(id)objc_opt_self(INStringLocalizer) siriLocalizer];
  id v5 =  -[objc_class _renderedResponseWithLocalizer:requiresSiriCompatibility:]( intentResponse.super.isa,  "_renderedResponseWithLocalizer:requiresSiriCompatibility:",  v4,  1LL);
  if (v5)
  {
    uint64_t v6 = v5;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }

  else if (object)
  {
    type metadata accessor for CATSpeakableString();
    swift_bridgeObjectRetain(object);
    uint64_t v9 = static CATSpeakableString.getPropertiesInTemplateString(templateString:)();

    uint64_t v10 = v9[2];
    OUTLINED_FUNCTION_20();
    if (v10) {
      OUTLINED_FUNCTION_14();
    }
  }

  else
  {
  }

  OUTLINED_FUNCTION_2();
  result.value._object = v8;
  result.value._uint64_t countAndFlagsBits = v7;
  return result;
}

uint64_t WorkflowDialogTemplating.getCustomPrompt(message:prompt:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_18_11();
  WorkflowDialogTemplating.processText(text:)(a1, a2, v5);
  uint64_t v12 = OUTLINED_FUNCTION_61_1();
  if (__swift_getEnumTagSinglePayload(v5, 1LL, v12) == 1)
  {
    WorkflowDialogTemplating.processText(text:)(a3, a4, a5);
    return outlined destroy of URL?(v5, &demangling cache variable for type metadata for SpeakableString?);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL))(a5, v5, v12);
    return OUTLINED_FUNCTION_4_13(a5, 0LL);
  }

uint64_t WorkflowDialogTemplating.processText(text:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CharacterSet(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2)
  {
    v25[0] = a1;
    v25[1] = a2;
    OUTLINED_FUNCTION_94_1();
    unint64_t v10 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v11 = StringProtocol.trimmingCharacters(in:)(v9, &type metadata for String, v10);
    unint64_t v13 = v12;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v14 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000LL) == 0) {
      uint64_t v14 = v11 & 0xFFFFFFFFFFFFLL;
    }
    if (v14)
    {
      type metadata accessor for CATSpeakableString();
      uint64_t v15 = static CATSpeakableString.applyTTSHint(speak:)();
      uint64_t v17 = v16;
      uint64_t v18 = static CATSpeakableString.stripTTSHint(print:)();
      uint64_t v20 = v19;
      OUTLINED_FUNCTION_37();
      SpeakableString.init(print:speak:)(v18, v20, v15, v17);
      uint64_t v21 = OUTLINED_FUNCTION_61_1();
      return __swift_storeEnumTagSinglePayload(a3, 0LL, 1LL, v21);
    }

    else
    {
      uint64_t v24 = type metadata accessor for SpeakableString(0LL);
      __swift_storeEnumTagSinglePayload(a3, 1LL, 1LL, v24);
      return OUTLINED_FUNCTION_37();
    }
  }

  else
  {
    uint64_t v23 = OUTLINED_FUNCTION_61_1();
    return __swift_storeEnumTagSinglePayload(a3, 1LL, 1LL, v23);
  }

Swift::String __swiftcall String.trimSpaces()()
{
  uint64_t v1 = type metadata accessor for CharacterSet(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_18_11();
  OUTLINED_FUNCTION_94_1();
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.trimmingCharacters(in:)(v0, &type metadata for String);
  OUTLINED_FUNCTION_118_2();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  uint64_t v3 = OUTLINED_FUNCTION_45();
  result._object = v4;
  result._uint64_t countAndFlagsBits = v3;
  return result;
}

uint64_t WorkflowDialogTemplating.deinit()
{
  return v0;
}

uint64_t WorkflowDialogTemplating.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 120LL, 7LL);
}

void outlined bridged method (pb) of @objc WFShowAlertDialogRequest.message.getter(void *a1)
{
}

unint64_t lazy protocol witness table accessor for type WorkflowDialogTemplatingError and conformance WorkflowDialogTemplatingError()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDialogTemplatingError and conformance WorkflowDialogTemplatingError;
  if (!lazy protocol witness table cache variable for type WorkflowDialogTemplatingError and conformance WorkflowDialogTemplatingError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDialogTemplatingError,  &type metadata for WorkflowDialogTemplatingError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDialogTemplatingError and conformance WorkflowDialogTemplatingError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDialogTemplatingError and conformance WorkflowDialogTemplatingError;
  if (!lazy protocol witness table cache variable for type WorkflowDialogTemplatingError and conformance WorkflowDialogTemplatingError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDialogTemplatingError,  &type metadata for WorkflowDialogTemplatingError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDialogTemplatingError and conformance WorkflowDialogTemplatingError);
  }

  return result;
}

void outlined bridged method (pb) of @objc WFChooseFromListDialogRequest.message.getter(void *a1, SEL *a2)
{
  id v3 = [a1 *a2];
  if (v3)
  {
    OUTLINED_FUNCTION_121_1((uint64_t)v3);
    OUTLINED_FUNCTION_118_2();
  }

  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_2();
}

uint64_t storeEnumTagSinglePayload for WorkflowDialogTemplatingError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_9A048 + 4 * byte_183185[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_9A07C + 4 * byte_183180[v4]))();
}

uint64_t sub_9A07C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_9A084(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x9A08CLL);
  }
  return result;
}

uint64_t sub_9A098(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x9A0A0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_9A0A4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_9A0AC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WorkflowDialogTemplatingError()
{
  return &type metadata for WorkflowDialogTemplatingError;
}

uint64_t type metadata accessor for WorkflowDialogTemplating()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin24WorkflowDialogTemplating);
}

uint64_t OUTLINED_FUNCTION_3_29(void *a1)
{
  return DeviceState.asSiriKitDeviceState()(v1, v2);
}

uint64_t OUTLINED_FUNCTION_17_23()
{
  uint64_t v1 = v0 + 2;
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return DeviceState.asSiriKitDeviceState()(v3, v2);
}

uint64_t OUTLINED_FUNCTION_19_16(uint64_t a1, uint64_t a2)
{
  return DeviceState.asSiriKitDeviceState()(a1, a2);
}

uint64_t OUTLINED_FUNCTION_24_17()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 40);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v0;
  return swift_task_dealloc(v5);
}

uint64_t OUTLINED_FUNCTION_31_15(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain_n(v2, 2LL);
}

uint64_t OUTLINED_FUNCTION_35_19(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t OUTLINED_FUNCTION_36_16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_38_16()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 72);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 80) = v0;
  return swift_task_dealloc(v5);
}

uint64_t OUTLINED_FUNCTION_39_18()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 32);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 40) = v0;
  return swift_task_dealloc(v5);
}

uint64_t OUTLINED_FUNCTION_40_17(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v3, 1LL, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_41_17()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v0;
  return swift_task_dealloc(v5);
}

uint64_t OUTLINED_FUNCTION_42_10(uint64_t a1)
{
  return outlined destroy of URL?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_43_13(uint64_t a1)
{
  return outlined destroy of URL?(a1, v1);
}

  ;
}

uint64_t OUTLINED_FUNCTION_46_16(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 360LL))(v2, a1, a2);
}

uint64_t OUTLINED_FUNCTION_52_12()
{
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1(v0, v2);
  return DeviceState.userAssignedDeviceName.getter(v2, v3);
}

uint64_t OUTLINED_FUNCTION_53_13()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  return dispatch thunk of DeviceState.isCarPlay.getter(v1, v2);
}

uint64_t OUTLINED_FUNCTION_54_15(uint64_t a1, uint64_t a2)
{
  return WorkflowDialogTemplating.getCustomPrompt(message:prompt:)(v3, v4, a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_55_13(uint64_t a1, uint64_t a2)
{
  return WorkflowDialogTemplating.getCustomPrompt(message:prompt:)(v2, v4, a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_56_15(uint64_t a1, uint64_t a2)
{
  return WorkflowDialogTemplating.getCustomPrompt(message:prompt:)(v3, v4, a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_58_12( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  *a11 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a11, a10, v11);
}

uint64_t OUTLINED_FUNCTION_59_6()
{
  return *(void *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_61_13( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a9, v9 + 24, v10);
}

uint64_t OUTLINED_FUNCTION_62_10()
{
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1(v0, v2);
  return dispatch thunk of DeviceState.isWatch.getter(v2, v3);
}

void OUTLINED_FUNCTION_65_7(uint64_t a1, SEL *a2)
{
}

  ;
}

uint64_t OUTLINED_FUNCTION_69_5@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

uint64_t OUTLINED_FUNCTION_70_8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v0 + 344LL))(v2, v1);
}

void OUTLINED_FUNCTION_71_5(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_74_7(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 16);
}

uint64_t OUTLINED_FUNCTION_77_6(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, v2, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_78_3(uint64_t a1, uint64_t *a2)
{
  return outlined destroy of URL?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_81_5()
{
  return swift_task_dealloc(*(void *)(v0 + 32));
}

uint64_t OUTLINED_FUNCTION_83_2()
{
  return dispatch thunk of DeviceState.isWatch.getter(v1, v2);
}

uint64_t OUTLINED_FUNCTION_84_3@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *v3;
  *(void *)(v4 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v2;
  return swift_task_dealloc(a1);
}

uint64_t OUTLINED_FUNCTION_87_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_88_3@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t OUTLINED_FUNCTION_89_3()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = *v0;
  return *(void *)(v2 + 64);
}

uint64_t OUTLINED_FUNCTION_90_1()
{
  return swift_bridgeObjectRelease(v0);
}

void OUTLINED_FUNCTION_93_1(uint64_t a1, SEL *a2)
{
}

uint64_t OUTLINED_FUNCTION_94_1()
{
  return CharacterSet.init(charactersIn:)(657696LL, 0xE300000000000000LL);
}

uint64_t OUTLINED_FUNCTION_95_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_97_3()
{
  return swift_task_dealloc(*(void *)(v0 + 24));
}

void OUTLINED_FUNCTION_98_0(uint64_t a1, SEL *a2)
{
}

uint64_t OUTLINED_FUNCTION_99_0(uint64_t a1)
{
  return outlined destroy of URL?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_102_1(uint64_t result)
{
  *(void *)(v1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_103_1(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
  return swift_willThrow();
}

void OUTLINED_FUNCTION_104_2()
{
}

uint64_t OUTLINED_FUNCTION_105_0()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_111_1(uint64_t a1, uint64_t a2, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v2, (uint64_t *)va);
}

  ;
}

uint64_t OUTLINED_FUNCTION_116_2()
{
  return swift_task_dealloc(*(void *)(v0 + 56));
}

  ;
}

  ;
}

void OUTLINED_FUNCTION_119_1()
{
}

uint64_t OUTLINED_FUNCTION_121_1(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

id OUTLINED_FUNCTION_122_1()
{
  return [v1 *(SEL *)(v0 + 1760)];
}

id OUTLINED_FUNCTION_123_2(void *a1)
{
  return [a1 interaction];
}

uint64_t OUTLINED_FUNCTION_124_1()
{
  return swift_task_dealloc(*(void *)(v0 + 64));
}

uint64_t OUTLINED_FUNCTION_126_2()
{
  return __swift_storeEnumTagSinglePayload(v1, 0LL, 1LL, v0);
}

uint64_t OUTLINED_FUNCTION_127_1(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v2, v1, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_128(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v2, v1, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_131_1()
{
  return *(void *)(v0 + 8);
}

uint64_t OUTLINED_FUNCTION_132_0()
{
  return *(void *)(v0 + 8);
}

uint64_t WorkflowHomePodSnippetProvider.makeDisambiguationViews(disambiguationItems:shortcutName:appBundleId:utteranceViews:)()
{
  return WorkflowHomePodSnippetProvider.buildSnippetForShowAlert(dialogRequest:shortcutName:appBundleId:)( *(uint64_t (**)(uint64_t))(v0 + 8),  v0,  (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t WorkflowHomePodSnippetProvider.buildSnippetForShowAlert(dialogRequest:shortcutName:appBundleId:)( uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t WorkflowHomePodSnippetProvider.__allocating_init(deviceState:)(__int128 *a1)
{
  uint64_t v3 = swift_allocObject(v1, 56LL, 7LL);
  outlined init with take of AceServiceInvokerAsync(a1, v3 + 16);
  return v3;
}

uint64_t type metadata accessor for WorkflowHomePodSnippetProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin30WorkflowHomePodSnippetProvider);
}

uint64_t static SLFDisambiguationItemConverter.toDirectInvocationPayloadData(intent:chosenItem:parameterName:)( void *a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = type metadata accessor for String.Encoding(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_18_11();
  uint64_t v11 = static SLFDisambiguationItemConverter.getUpdatedIntent(intent:chosenItem:parameterName:)(a1, a2, a3, a4);
  if (!v11) {
    return 0LL;
  }
  unint64_t v12 = (void *)v11;
  uint64_t v13 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for Data,  &protocol witness table for String);
  id v14 = OUTLINED_FUNCTION_26(v13, "backingStore");
  uint64_t v15 = outlined bridged method (ob) of @objc PBCodable.data.getter(v14);
  if (v16 >> 60 == 15)
  {
  }

  else
  {
    uint64_t v17 = v15;
    unint64_t v18 = v16;
    outlined copy of Data._Representation(v15, v16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)( v17,  v18,  0x6144746E65746E69LL,  0xEA00000000006174LL,  isUniquelyReferenced_nonNull_native);
    uint64_t v30 = v13;
    uint64_t v20 = swift_bridgeObjectRelease();
    id v21 = OUTLINED_FUNCTION_26(v20, "typeName");
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;

    static String.Encoding.utf8.getter(v25);
    uint64_t v26 = String.data(using:allowLossyConversion:)(v4, 0LL, v22, v24);
    unint64_t v28 = v27;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v4, v9);
    specialized Dictionary.subscript.setter(v26, v28, 0x614E746E65746E69LL, 0xEA0000000000656DLL);
    outlined consume of Data?(v17, v18);

    return v30;
  }

  return v13;
}

uint64_t static SLFDisambiguationItemConverter.getUpdatedIntent(intent:chosenItem:parameterName:)( void *a1, void *a2, uint64_t a3, unint64_t a4)
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v8, (uint64_t)static Logger.voiceCommands);
  id v9 = a1;
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v34 = a2;
    unint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    v36[0] = v13;
    *(_DWORD *)unint64_t v12 = 136315138;
    uint64_t v32 = v12 + 4;
    id v14 = OUTLINED_FUNCTION_26(v13, "debugDescription");
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = a3;
    unint64_t v17 = v16;

    a2 = v34;
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v12 + 4);

    a3 = v33;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v10, v11, "SLFDisambiguationItemConverter intent: %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v13);
    OUTLINED_FUNCTION_1_0((uint64_t)v12);
  }

  else
  {
  }

  id v19 = OUTLINED_FUNCTION_26(v18, "_intentInstanceDescription");
  id v20 = static SLFDisambiguationItemConverter.slotNameToSlotDescription(intentDescription:parameterNameToResolve:)( v19,  a3,  a4);
  if (!v20)
  {

    return 0LL;
  }

  id v21 = v20;
  if ([v20 valueStyle] != (char *)&dword_0 + 3)
  {
    CustomIntentDisambiguationItem.getRawValue()((uint64_t)v36);
    uint64_t v24 = v37;
    unint64_t v28 = __swift_project_boxed_opaque_existential_1(v36, (uint64_t)v37);
    uint64_t v29 = _bridgeAnythingToObjectiveC<A>(_:)(v28, v24);
    __swift_destroy_boxed_opaque_existential_1Tm(v36);
    outlined bridged method (pb) of @objc INIntentSlotDescription.facadePropertyName.getter(v21);
    if (v30)
    {
      String._bridgeToObjectiveC()();
      OUTLINED_FUNCTION_19_17();
    }

    else
    {
      uint64_t v24 = 0LL;
    }

    objc_msgSend(v9, "setValue:forProperty:", v29, v24, v32);
    swift_unknownObjectRelease(v29);
    goto LABEL_15;
  }

  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v23 = swift_allocObject(v22, 64LL, 7LL);
  *(_OWORD *)(v23 + 16) = xmmword_17E650;
  uint64_t v24 = a2;
  CustomIntentDisambiguationItem.getRawValue()(v23 + 32);
  v25.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t result = outlined bridged method (pb) of @objc INIntentSlotDescription.facadePropertyName.getter(v21);
  if (v27)
  {
    String._bridgeToObjectiveC()();
    OUTLINED_FUNCTION_19_17();
    [v9 setValue:v25.super.isa forKey:v24];

LABEL_15:
    id v31 = v9;
    return (uint64_t)v9;
  }

  __break(1u);
  return result;
}

id static SLFDisambiguationItemConverter.toDirectInvocationPayload(intent:chosenItem:parameterName:)( void *a1, void *a2, uint64_t a3, unint64_t a4)
{
  if (!static SLFDisambiguationItemConverter.toDirectInvocationPayloadData(intent:chosenItem:parameterName:)( a1,  a2,  a3,  a4)) {
    return 0LL;
  }
  OUTLINED_FUNCTION_21_17();
  id v5 = OUTLINED_FUNCTION_8_25((uint64_t)"com.apple.siri.directInvocation.RunVoiceShortcut.disambiguationItem");
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v4);
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_17_24();
  return v5;
}

id static SLFDisambiguationItemConverter.slotNameToSlotDescription(intentDescription:parameterNameToResolve:)( void *a1, uint64_t a2, unint64_t a3)
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v6, (uint64_t)static Logger.voiceCommands);
  uint64_t v7 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    uint64_t v21 = v11;
    *(_DWORD *)uint64_t v10 = 136315138;
    swift_bridgeObjectRetain(a3);
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v10 + 4);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl(&dword_0, v8, v9, "SLFDisambiguationItemConverter.slotNameToSlotDescription parameter: %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  id v12 = outlined bridged method (mbgnn) of @objc INIntentDescription.slot(byName:)(a2, a3, a1);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  if (v12)
  {
    if (v15)
    {
      unint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v16 = 0;
      os_log_type_t v17 = v14;
      uint64_t v18 = "SLFDisambiguationItemConverter.slotNameToSlotDescription retrieved slot name";
LABEL_11:
      _os_log_impl(&dword_0, v13, v17, v18, v16, 2u);
      swift_slowDealloc(v16, -1LL, -1LL);
    }
  }

  else if (v15)
  {
    unint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v16 = 0;
    os_log_type_t v17 = v14;
    uint64_t v18 = "SLFDisambiguationItemConverter.slotNameToSlotDescription cannot find slot name";
    goto LABEL_11;
  }

  return v12;
}

id static SLFDisambiguationItemConverter.toDirectInvocationPayload(title:)(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject(v4, &v8);
  *(_OWORD *)(inited + 16) = xmmword_17E650;
  *(void *)(inited + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0x656C746974LL;
  *(void *)(inited + 40) = 0xE500000000000000LL;
  *(void *)(inited + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = &type metadata for String;
  *(void *)(inited + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a1;
  *(void *)(inited + 56) = a2;
  swift_bridgeObjectRetain(a2);
  Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  OUTLINED_FUNCTION_21_17();
  id v6 = OUTLINED_FUNCTION_8_25((uint64_t)"com.apple.siri.directInvocation.RunVoiceShortcut.disambiguationItem");
  specialized _dictionaryUpCast<A, B, C, D>(_:)(a2);
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_17_24();
  return v6;
}

id static SLFDisambiguationItemConverter.toIntent(userData:)()
{
  uint64_t v24 = v1;
  uint64_t v25 = v2;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_18_11();
  if (!*(void *)(v4 + 16)) {
    return 0LL;
  }
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(0x614E746E65746E69LL, 0xEA0000000000656DLL);
  if ((v7 & 1) == 0) {
    return 0LL;
  }
  uint64_t v8 = outlined init with copy of Any(*(void *)(v4 + 56) + 32 * v6, (uint64_t)&v22);
  uint64_t v11 = OUTLINED_FUNCTION_9_21(v8, v9, v10, (uint64_t)&type metadata for Data);
  if ((v11 & 1) == 0) {
    return 0LL;
  }
  static String.Encoding.utf8.getter(v11);
  ((void (*)(uint64_t))String.init(data:encoding:))(v0);
  if (!v12)
  {
    OUTLINED_FUNCTION_5_22();
    return 0LL;
  }

  specialized Dictionary.subscript.getter(0x6144746E65746E69LL, 0xEA00000000006174LL, v4, &v22);
  if (!v23)
  {
    OUTLINED_FUNCTION_5_22();
    OUTLINED_FUNCTION_22();
    outlined destroy of Any?((uint64_t)&v22);
    return 0LL;
  }

  if ((OUTLINED_FUNCTION_9_21(v13, v14, v15, (uint64_t)&type metadata for Data) & 1) == 0)
  {
    OUTLINED_FUNCTION_5_22();
    OUTLINED_FUNCTION_22();
    return 0LL;
  }

  NSString v16 = String._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_22();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v18 = (id)INIntentCreate(v16, isa);
  OUTLINED_FUNCTION_5_22();
  outlined consume of Data._Representation(v20, v21);

  return v18;
}

uint64_t static SLFDisambiguationItemConverter.toTitle(userData:)(uint64_t a1)
{
  if (*(void *)(a1 + 16)
    && (unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(0x656C746974LL, 0xE500000000000000LL), (v3 & 1) != 0)
    && (outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v2, (uint64_t)v6),
        (swift_dynamicCast(&v5, v6, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0))
  {
    return v5;
  }

  else
  {
    return 0LL;
  }

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)()
{
  if (v8)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  uint64_t v9 = v6;
  char v10 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, NSBundle>);
  if (OUTLINED_FUNCTION_3_30())
  {
    OUTLINED_FUNCTION_6_23();
    OUTLINED_FUNCTION_12_20();
    if (!v12) {
      goto LABEL_10;
    }
    uint64_t v9 = v11;
  }

  if ((v10 & 1) != 0)
  {
    uint64_t v13 = *(void *)(*(void *)v2 + 56LL);

    *(void *)(v13 + 8 * v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 9) = v0;
    OUTLINED_FUNCTION_8_2();
  }

  else
  {
    OUTLINED_FUNCTION_11_19();
    specialized _NativeDictionary._insert(at:key:value:)(v14, v15, v16, v17, v18);
    OUTLINED_FUNCTION_0_24(v1);
  }

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  OUTLINED_FUNCTION_20_24();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  specialized __RawDictionaryStorage.find<A>(_:)(v3, v1);
  OUTLINED_FUNCTION_1_24();
  if (v9)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  char v10 = v7;
  uint64_t v11 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, DMFPolicy>);
  if (OUTLINED_FUNCTION_3_30())
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v4, v2);
    OUTLINED_FUNCTION_13_18();
    if (!v13) {
      goto LABEL_10;
    }
    char v10 = v12;
  }

  unint64_t v14 = *v0;
  if ((v11 & 1) != 0)
  {
    *(void *)(*(void *)(v14 + 56) + 8 * v10) = v6;
    OUTLINED_FUNCTION_8_2();
  }

  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v10, v4, v2, v6, v14);
    OUTLINED_FUNCTION_0_24(v2);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  OUTLINED_FUNCTION_20_24();
  OUTLINED_FUNCTION_2_24(v3, v4, v5);
  OUTLINED_FUNCTION_1_24();
  if (v8)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  uint64_t v9 = v6;
  char v10 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [String : Any]>);
  if (OUTLINED_FUNCTION_3_30())
  {
    OUTLINED_FUNCTION_6_23();
    OUTLINED_FUNCTION_12_20();
    if (!v12) {
      goto LABEL_10;
    }
    uint64_t v9 = v11;
  }

  if ((v10 & 1) != 0)
  {
    uint64_t v13 = *(void *)(*(void *)v2 + 56LL);
    swift_bridgeObjectRelease();
    *(void *)(v13 + 8 * v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 9) = v0;
    OUTLINED_FUNCTION_8_2();
  }

  else
  {
    OUTLINED_FUNCTION_11_19();
    specialized _NativeDictionary._insert(at:key:value:)(v14, v15, v16, v17, v18);
    OUTLINED_FUNCTION_0_24(v1);
  }

{
  Swift::Int *v0;
  uint64_t *v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  Swift::Int v8;
  unint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  OUTLINED_FUNCTION_20_24();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  char v7 = v6;
  char v8 = *v0;
  specialized __RawDictionaryStorage.find<A>(_:)(v4);
  OUTLINED_FUNCTION_1_24();
  if (v11)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for SiriLinkFlowFeatureFlags);
    __break(1u);
    return;
  }

  char v12 = v9;
  uint64_t v13 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<SiriLinkFlowFeatureFlags, Bool>);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v3 & 1, v8))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v5);
    OUTLINED_FUNCTION_13_18();
    if (!v15) {
      goto LABEL_10;
    }
    char v12 = v14;
  }

  uint64_t v16 = *v1;
  if ((v13 & 1) != 0)
  {
    *(_BYTE *)(*(void *)(v16 + 56) + v1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v7 & 1;
    OUTLINED_FUNCTION_8_2();
  }

  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v12, v5, v7 & 1, v16);
  }

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)()
{
  if (v8)
  {
    __break(1u);
LABEL_10:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }

  uint64_t v9 = v6;
  char v10 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
  if (OUTLINED_FUNCTION_3_30())
  {
    OUTLINED_FUNCTION_6_23();
    OUTLINED_FUNCTION_13_18();
    if (!v12) {
      goto LABEL_10;
    }
    uint64_t v9 = v11;
  }

  if ((v10 & 1) != 0)
  {
    uint64_t v13 = (void *)(*(void *)(*(void *)v2 + 56LL) + 32 * v9);
    __swift_destroy_boxed_opaque_existential_1Tm(v13);
    return outlined init with take of Any(v0, v13);
  }

  else
  {
    OUTLINED_FUNCTION_11_19();
    specialized _NativeDictionary._insert(at:key:value:)(v15, v16, v17, v18, v19);
    return (_OWORD *)OUTLINED_FUNCTION_0_24(v1);
  }

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  Swift::Int v12 = *v5;
  specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  OUTLINED_FUNCTION_1_24();
  if (v15)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v16 = v13;
  char v17 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Data>);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a5 & 1, v12))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    OUTLINED_FUNCTION_12_20();
    if (!v19) {
      goto LABEL_10;
    }
    unint64_t v16 = v18;
  }

  uint64_t v20 = *v6;
  if ((v17 & 1) != 0)
  {
    uint64_t v21 = *(void *)(v20 + 56) + 16 * v16;
    outlined consume of Data._Representation(*(void *)v21, *(void *)(v21 + 8));
    *(void *)uint64_t v21 = a1;
    *(void *)(v21 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a2;
    OUTLINED_FUNCTION_24_0();
  }

  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, a3, a4, a1, a2, v20);
    swift_bridgeObjectRetain(a4);
  }

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(char a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::Int v12 = *v3;
  specialized __RawDictionaryStorage.find<A>(_:)(a2);
  OUTLINED_FUNCTION_1_24();
  if (v15)
  {
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v16 = v13;
  char v17 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<RFFeatureFlags.ResponseFramework, Bool>);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v12))
  {
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v17 & 1) == (v19 & 1))
    {
      unint64_t v16 = v18;
      goto LABEL_5;
    }

LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }

    char v19 = v36;
    uint64_t v20 = v37;
    uint64_t v30 = v35[1];
    unint64_t v18 = *((void *)&v35[0] + 1);
    unint64_t v16 = *(void *)&v35[0];
    goto LABEL_11;
  }

  outlined init with take of AceServiceInvokerAsync(v35, (uint64_t)v31);
  char v14 = v32;
  char v15 = v33;
  __swift_project_boxed_opaque_existential_1(v31, v32);
  unint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 8))(a2, v14, v15);
  unint64_t v18 = v17;
  __swift_destroy_boxed_opaque_existential_1Tm(v31);
LABEL_3:
  char v19 = 0LL;
LABEL_4:
  uint64_t v30 = 0u;
  uint64_t v20 = _swiftEmptyArrayStorage;
LABEL_11:
  __swift_destroy_boxed_opaque_existential_1Tm(v34);
  *(void *)a3 = v16;
  *(void *)(a3 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v18;
  uint64_t result = *(double *)&v30;
  *(_OWORD *)(a3 + 16) = v30;
  *(void *)(a3 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v19;
  *(void *)(a3 + 40) = v20;
  return result;
}

  OUTLINED_FUNCTION_38_0();
}

  *(void *)(v13 + 19__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v16;
  *(void *)(v13 + 200) = a2;
  uint64_t v24 = *(void *)(v13 + 152);
  uint64_t v25 = (void *)swift_task_alloc(dword_21CAAC);
  *(void *)(v13 + 20__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v25;
  uint64_t v26 = OUTLINED_FUNCTION_174_0(v25, (uint64_t)AutoShortcutsSetEnablementFlow.executeIntentReceived(mode:appId:));
  return AutoShortcutsSetEnablementFlow.publishConfirmation(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)( v26,  v14,  v27,  v28,  v29,  v24,  v16,  a1,  a9);
}

id outlined bridged method (mbgnn) of @objc INIntentDescription.slot(byName:)( uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [a3 slotByName:v4];

  return v5;
}

uint64_t outlined bridged method (pb) of @objc INIntentSlotDescription.facadePropertyName.getter(void *a1)
{
  id v1 = [a1 facadePropertyName];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

unint64_t type metadata accessor for SKIDirectInvocationPayload()
{
  unint64_t result = lazy cache variable for type metadata for SKIDirectInvocationPayload;
  if (!lazy cache variable for type metadata for SKIDirectInvocationPayload)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___SKIDirectInvocationPayload);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SKIDirectInvocationPayload);
  }

  return result;
}

ValueMetadata *type metadata accessor for SLFDisambiguationItemConverter()
{
  return &type metadata for SLFDisambiguationItemConverter;
}

uint64_t OUTLINED_FUNCTION_0_24(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

  ;
}

unint64_t OUTLINED_FUNCTION_2_24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
}

BOOL OUTLINED_FUNCTION_3_30()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

uint64_t OUTLINED_FUNCTION_5_22()
{
  return outlined consume of Data._Representation(v1, v0);
}

unint64_t OUTLINED_FUNCTION_6_23()
{
  return specialized __RawDictionaryStorage.find<A>(_:)(v1, v0);
}

id OUTLINED_FUNCTION_8_25@<X0>(uint64_t a1@<X8>)
{
  return SKIDirectInvocationPayload.__allocating_init(identifier:)( 0xD000000000000043LL,  (a1 - 32) | 0x8000000000000000LL);
}

uint64_t OUTLINED_FUNCTION_9_21(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v5 - 112, v5 - 96, v4 + 8, a4, 6LL);
}

  ;
}

  ;
}

  ;
}

void OUTLINED_FUNCTION_17_24()
{
}

uint64_t OUTLINED_FUNCTION_19_17()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

unint64_t OUTLINED_FUNCTION_21_17()
{
  return type metadata accessor for SKIDirectInvocationPayload();
}

uint64_t String.sanitized.getter()
{
  uint64_t v0 = type metadata accessor for CharacterSet(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::String v10 = String.lowercased()();
  static CharacterSet.punctuationCharacters.getter(v10._countAndFlagsBits);
  unint64_t v4 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v5 = StringProtocol.components(separatedBy:)(v3, &type metadata for String, v4);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_bridgeObjectRelease(v10._object);
  v10._uint64_t countAndFlagsBits = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  unint64_t v7 = lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v8 = BidirectionalCollection<>.joined(separator:)(0LL, 0xE000000000000000LL, v6, v7);
  swift_bridgeObjectRelease(v5);
  return v8;
}

uint64_t type metadata instantiation function for MatchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24LL);
}

uint64_t type metadata accessor for MatchResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MatchResult);
}

void specialized == infix<A>(_:_:)()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v0 == v3 && v2 == v4) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(v0, v4, v3);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  OUTLINED_FUNCTION_35_20();
  if (v6)
  {
    uint64_t v4 = 0xE600000000000000LL;
    uint64_t v3 = OUTLINED_FUNCTION_16_22();
  }

  else
  {
    if (v2 == 1) {
      uint64_t v3 = 0x656761507473616CLL;
    }
    else {
      uint64_t v3 = 0x726F4D726566666FLL;
    }
    if (v2 == 1) {
      uint64_t v4 = 0xE800000000000000LL;
    }
    else {
      uint64_t v4 = 0xE900000000000065LL;
    }
  }

  if ((_BYTE)v0)
  {
    else {
      uint64_t v1 = 0x726F4D726566666FLL;
    }
    else {
      uint64_t v5 = 0xE900000000000065LL;
    }
  }

  else
  {
    uint64_t v5 = 0xE600000000000000LL;
  }

  uint64_t v6 = v3 == v1 && v4 == v5;
  if (v6) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(v3, v0, v1);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

{
  OUTLINED_FUNCTION_23_20();
  OUTLINED_FUNCTION_16_22();
  __asm { BR              X10 }

{
  OUTLINED_FUNCTION_23_20();
  OUTLINED_FUNCTION_16_22();
  __asm { BR              X10 }

{
  OUTLINED_FUNCTION_23_20();
  OUTLINED_FUNCTION_16_22();
  __asm { BR              X10 }

{
  uint64_t v0;
  unsigned __int8 v1;
  char v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v0 = 0xE900000000000065LL;
  OUTLINED_FUNCTION_80_3();
  uint64_t v4 = v1;
  if (v1)
  {
    if (v1 == 1) {
      uint64_t v5 = 0x66664F7470656BLL;
    }
    else {
      uint64_t v5 = 0x6E4F7470656BLL;
    }
    if (v4 == 1) {
      uint64_t v6 = 0xE700000000000000LL;
    }
    else {
      uint64_t v6 = 0xE600000000000000LL;
    }
  }

  else
  {
    uint64_t v5 = OUTLINED_FUNCTION_78_4();
    uint64_t v6 = 0xE900000000000065LL;
  }

  if (v2)
  {
    if (v2 == 1) {
      uint64_t v3 = 0x66664F7470656BLL;
    }
    else {
      uint64_t v3 = 0x6E4F7470656BLL;
    }
    if (v2 == 1) {
      uint64_t v0 = 0xE700000000000000LL;
    }
    else {
      uint64_t v0 = 0xE600000000000000LL;
    }
  }

  if (v5 != v3 || v6 != v0) {
    OUTLINED_FUNCTION_167(v5, v6, v3, v0);
  }
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_2();
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  OUTLINED_FUNCTION_35_20();
  if (v0)
  {
    uint64_t v5 = 0xE600000000000000LL;
    uint64_t v4 = OUTLINED_FUNCTION_16_22();
  }

  else
  {
    OUTLINED_FUNCTION_39_19();
    if (v0) {
      uint64_t v4 = 0x74706D6F7270LL;
    }
    else {
      uint64_t v4 = 0x6341686372616573LL;
    }
    if (v0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = 0xEC0000006E6F6974LL;
    }
  }

  if ((_BYTE)v1)
  {
    OUTLINED_FUNCTION_39_19();
    if (v6) {
      uint64_t v2 = 0x74706D6F7270LL;
    }
    else {
      uint64_t v2 = 0x6341686372616573LL;
    }
    if (v6) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0xEC0000006E6F6974LL;
    }
  }

  else
  {
    uint64_t v8 = 0xE600000000000000LL;
  }

  if (v4 == v2 && v5 == v8) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(v4, v1, v2);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  OUTLINED_FUNCTION_35_20();
  if (v6)
  {
    uint64_t v4 = 0xE600000000000000LL;
    uint64_t v3 = OUTLINED_FUNCTION_16_22();
  }

  else
  {
    if (v2 == 1) {
      uint64_t v3 = 0x726F727265LL;
    }
    else {
      uint64_t v3 = 0x6D617261506C696ELL;
    }
    if (v2 == 1) {
      uint64_t v4 = 0xE500000000000000LL;
    }
    else {
      uint64_t v4 = 0xE800000000000000LL;
    }
  }

  if ((_BYTE)v0)
  {
    else {
      uint64_t v1 = 0x6D617261506C696ELL;
    }
    else {
      uint64_t v5 = 0xE800000000000000LL;
    }
  }

  else
  {
    uint64_t v5 = 0xE600000000000000LL;
  }

  uint64_t v6 = v3 == v1 && v4 == v5;
  if (v6) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(v3, v0, v1);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

void specialized == infix<A>(_:_:)(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x656E6F68506E6FLL;
  }
  else {
    uint64_t v3 = 0x65446D6F74737563LL;
  }
  if (v2) {
    unint64_t v4 = 0xEC00000065636976LL;
  }
  else {
    unint64_t v4 = 0xE700000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x656E6F68506E6FLL;
  }
  else {
    uint64_t v5 = 0x65446D6F74737563LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE700000000000000LL;
  }
  else {
    unint64_t v6 = 0xEC00000065636976LL;
  }
  if (v3 == v5 && v4 == v6) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(v3, a2, v5);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x64656C696166LL;
  }
  else {
    uint64_t v3 = 0x65446D6F74737563LL;
  }
  if (v2) {
    unint64_t v4 = 0xEC00000065636976LL;
  }
  else {
    unint64_t v4 = 0xE600000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x64656C696166LL;
  }
  else {
    uint64_t v5 = 0x65446D6F74737563LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE600000000000000LL;
  }
  else {
    unint64_t v6 = 0xEC00000065636976LL;
  }
  if (v3 == v5 && v4 == v6) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(v3, a2, v5);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 27503LL;
  }
  else {
    uint64_t v3 = 0x6D7269666E6F63LL;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000LL;
  }
  else {
    unint64_t v4 = 0xE200000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 27503LL;
  }
  else {
    uint64_t v5 = 0x6D7269666E6F63LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE200000000000000LL;
  }
  else {
    unint64_t v6 = 0xE700000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(v3, a2, v5);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

{
  uint64_t v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v2 = 0x6C65636E6163LL;
  if (a1)
  {
    OUTLINED_FUNCTION_68_5();
    if (v3) {
      uint64_t v5 = 28526LL;
    }
    else {
      uint64_t v5 = 7562617LL;
    }
    if (v3) {
      unint64_t v6 = v4;
    }
    else {
      unint64_t v6 = 0xE300000000000000LL;
    }
  }

  else
  {
    unint64_t v6 = 0xE600000000000000LL;
    uint64_t v5 = 0x6C65636E6163LL;
  }

  if ((_BYTE)a2)
  {
    OUTLINED_FUNCTION_68_5();
    if (v7) {
      BOOL v2 = 28526LL;
    }
    else {
      BOOL v2 = 7562617LL;
    }
    if (v7) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0xE300000000000000LL;
    }
  }

  else
  {
    uint64_t v9 = 0xE600000000000000LL;
  }

  if (v5 == v2 && v6 == v9) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(v5, a2, v2);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x6C70784568746977LL;
  }
  else {
    uint64_t v3 = 0x6E616C7078456F6ELL;
  }
  if (v2) {
    unint64_t v4 = 0xED00006E6F697461LL;
  }
  else {
    unint64_t v4 = 0xEF6E6F6974616E61LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x6C70784568746977LL;
  }
  else {
    uint64_t v5 = 0x6E616C7078456F6ELL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xEF6E6F6974616E61LL;
  }
  else {
    unint64_t v6 = 0xED00006E6F697461LL;
  }
  if (v3 == v5 && v4 == v6) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(v3, a2, v5);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x50746C7561666564LL;
  }
  else {
    uint64_t v3 = 0x61506D6F74737563LL;
  }
  if (v2) {
    unint64_t v4 = 0xEB000000006D6172LL;
  }
  else {
    unint64_t v4 = 0xEC0000006D617261LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x50746C7561666564LL;
  }
  else {
    uint64_t v5 = 0x61506D6F74737563LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xEC0000006D617261LL;
  }
  else {
    unint64_t v6 = 0xEB000000006D6172LL;
  }
  if (v3 == v5 && v4 == v6) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(v3, a2, v5);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x726F4D726566666FLL;
  }
  else {
    uint64_t v3 = 0x656761507478656ELL;
  }
  if (v2) {
    unint64_t v4 = 0xEC0000007473614CLL;
  }
  else {
    unint64_t v4 = 0xE900000000000065LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x726F4D726566666FLL;
  }
  else {
    uint64_t v5 = 0x656761507478656ELL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE900000000000065LL;
  }
  else {
    unint64_t v6 = 0xEC0000007473614CLL;
  }
  if (v3 == v5 && v4 == v6) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(v3, a2, v5);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0xD000000000000012LL;
  }
  else {
    uint64_t v3 = 0x4E707041776F6873LL;
  }
  if (v2) {
    unint64_t v4 = 0xEB00000000656D61LL;
  }
  else {
    unint64_t v4 = 0x8000000000191AF0LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0xD000000000000012LL;
  }
  else {
    uint64_t v5 = 0x4E707041776F6873LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0x8000000000191AF0LL;
  }
  else {
    unint64_t v6 = 0xEB00000000656D61LL;
  }
  if (v3 == v5 && v4 == v6) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(v3, a2, v5);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x4E707041776F6873LL;
  }
  else {
    uint64_t v3 = 0x6D6F74737563LL;
  }
  if (v2) {
    unint64_t v4 = 0xE600000000000000LL;
  }
  else {
    unint64_t v4 = 0xEB00000000656D61LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x4E707041776F6873LL;
  }
  else {
    uint64_t v5 = 0x6D6F74737563LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xEB00000000656D61LL;
  }
  else {
    unint64_t v6 = 0xE600000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(v3, a2, v5);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x4E707041776F6873LL;
  }
  else {
    uint64_t v3 = 0x6D614E7070416F6ELL;
  }
  if (v2) {
    unint64_t v4 = 0xE900000000000065LL;
  }
  else {
    unint64_t v4 = 0xEB00000000656D61LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x4E707041776F6873LL;
  }
  else {
    uint64_t v5 = 0x6D614E7070416F6ELL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xEB00000000656D61LL;
  }
  else {
    unint64_t v6 = 0xE900000000000065LL;
  }
  if (v3 == v5 && v4 == v6) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(v3, a2, v5);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

{
  specialized == infix<A>(_:_:)( a1,  a2,  (void (*)(void))InstallShortcutCATsSimple.Properties.rawValue.getter);
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x6D6F74737563LL;
  }
  else {
    uint64_t v3 = 0x61756E69746E6F63LL;
  }
  if (v2) {
    unint64_t v4 = 0xEC0000006E6F6974LL;
  }
  else {
    unint64_t v4 = 0xE600000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x6D6F74737563LL;
  }
  else {
    uint64_t v5 = 0x61756E69746E6F63LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE600000000000000LL;
  }
  else {
    unint64_t v6 = 0xEC0000006E6F6974LL;
  }
  if (v3 == v5 && v4 == v6) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(v3, a2, v5);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

{
  specialized == infix<A>(_:_:)(a1, a2, (void (*)(void))ListShortcutsCATsSimple.Properties.rawValue.getter);
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x656C62616E65LL;
  }
  else {
    uint64_t v3 = 0x656C6261736964LL;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000LL;
  }
  else {
    unint64_t v4 = 0xE600000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x656C62616E65LL;
  }
  else {
    uint64_t v5 = 0x656C6261736964LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE600000000000000LL;
  }
  else {
    unint64_t v6 = 0xE700000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(v3, a2, v5);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x7845657361726870LL;
  }
  else {
    uint64_t v3 = 0x616D7269666E6F63LL;
  }
  if (v2) {
    unint64_t v4 = 0xEC0000006E6F6974LL;
  }
  else {
    unint64_t v4 = 0xEE0073656C706D61LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x7845657361726870LL;
  }
  else {
    uint64_t v5 = 0x616D7269666E6F63LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xEE0073656C706D61LL;
  }
  else {
    unint64_t v6 = 0xEC0000006E6F6974LL;
  }
  if (v3 == v5 && v4 == v6) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(v3, a2, v5);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

{
  uint64_t v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v2 = 7562617LL;
  if (a1)
  {
    OUTLINED_FUNCTION_68_5();
    if (v3) {
      uint64_t v5 = 28526LL;
    }
    else {
      uint64_t v5 = 0x6C65636E6163LL;
    }
    if (v3) {
      unint64_t v6 = v4;
    }
    else {
      unint64_t v6 = 0xE600000000000000LL;
    }
  }

  else
  {
    unint64_t v6 = 0xE300000000000000LL;
    uint64_t v5 = 7562617LL;
  }

  if ((_BYTE)a2)
  {
    OUTLINED_FUNCTION_68_5();
    if (v7) {
      BOOL v2 = 28526LL;
    }
    else {
      BOOL v2 = 0x6C65636E6163LL;
    }
    if (v7) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0xE600000000000000LL;
    }
  }

  else
  {
    uint64_t v9 = 0xE300000000000000LL;
  }

  if (v5 == v2 && v6 == v9) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(v5, a2, v2);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x6974736567677573LL;
  }
  else {
    uint64_t v3 = 0x7470697263736564LL;
  }
  if (v2) {
    unint64_t v4 = 0xEB000000006E6F69LL;
  }
  else {
    unint64_t v4 = 0xEA00000000006E6FLL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x6974736567677573LL;
  }
  else {
    uint64_t v5 = 0x7470697263736564LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xEA00000000006E6FLL;
  }
  else {
    unint64_t v6 = 0xEB000000006E6F69LL;
  }
  if (v3 == v5 && v4 == v6) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(v3, a2, v5);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x6D6F74737563LL;
  }
  else {
    uint64_t v3 = 0x6D7269666E6F63LL;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000LL;
  }
  else {
    unint64_t v4 = 0xE600000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x6D6F74737563LL;
  }
  else {
    uint64_t v5 = 0x6D7269666E6F63LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE600000000000000LL;
  }
  else {
    unint64_t v6 = 0xE700000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(v3, a2, v5);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x6D6F74737563LL;
  }
  else {
    uint64_t v3 = 0x65756E69746E6F63LL;
  }
  if (v2) {
    unint64_t v4 = 0xED00007070416E49LL;
  }
  else {
    unint64_t v4 = 0xE600000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x6D6F74737563LL;
  }
  else {
    uint64_t v5 = 0x65756E69746E6F63LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE600000000000000LL;
  }
  else {
    unint64_t v6 = 0xED00007070416E49LL;
  }
  if (v3 == v5 && v4 == v6) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(v3, a2, v5);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

{
  uint64_t v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v2 = 0x6D7269666E6F63LL;
  if (a1)
  {
    OUTLINED_FUNCTION_39_19();
    if (v3) {
      uint64_t v5 = 0x6D6F74737563LL;
    }
    else {
      uint64_t v5 = 0x62726556736168LL;
    }
    if (v3) {
      unint64_t v6 = v4;
    }
    else {
      unint64_t v6 = 0xE700000000000000LL;
    }
  }

  else
  {
    unint64_t v6 = 0xE700000000000000LL;
    uint64_t v5 = 0x6D7269666E6F63LL;
  }

  if ((_BYTE)a2)
  {
    OUTLINED_FUNCTION_39_19();
    if (v7) {
      BOOL v2 = 0x6D6F74737563LL;
    }
    else {
      BOOL v2 = 0x62726556736168LL;
    }
    if (v7) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0xE700000000000000LL;
    }
  }

  else
  {
    uint64_t v9 = 0xE700000000000000LL;
  }

  if (v5 == v2 && v6 == v9) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(v5, a2, v2);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

void specialized == infix<A>(_:_:)(char a1)
{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  if (a1)
  {
    OUTLINED_FUNCTION_39_19();
    if (v2) {
      unint64_t v6 = 0x7265626D756ELL;
    }
    else {
      unint64_t v6 = 7107189LL;
    }
    if (v2) {
      uint64_t v1 = v5;
    }
    else {
      uint64_t v1 = 0xE300000000000000LL;
    }
  }

  else
  {
    unint64_t v6 = OUTLINED_FUNCTION_54_16();
  }

  if ((_BYTE)v3)
  {
    OUTLINED_FUNCTION_39_19();
    if (v7) {
      unint64_t v4 = 0x7265626D756ELL;
    }
    else {
      unint64_t v4 = 7107189LL;
    }
    if (v7) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0xE300000000000000LL;
    }
  }

  else
  {
    uint64_t v9 = 0xE400000000000000LL;
  }

  if (v6 == v4 && v1 == v9) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(v6, v3, v4);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

uint64_t sub_9BBB8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_9BC30 + 4 * byte_1833E4[a2]))(0x7375437070416E69LL);
}

void sub_9BC30(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x7375437070416E69LL && v2 == 0xEB000000006D6F74LL) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(a1, a2, 0x7375437070416E69LL);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

void specialized == infix<A>(_:_:)(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x6E756F436D657469LL;
  uint64_t v3 = 0xE900000000000074LL;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x656C7069746C756DLL;
    }
    else {
      uint64_t v5 = 0x72746E49776F6873LL;
    }
    if (v4 == 1) {
      uint64_t v6 = 0xED00007365676150LL;
    }
    else {
      uint64_t v6 = 0xE90000000000006FLL;
    }
  }

  else
  {
    uint64_t v5 = 0x6E756F436D657469LL;
    uint64_t v6 = 0xE900000000000074LL;
  }

  if (a2)
  {
    if (a2 == 1) {
      uint64_t v2 = 0x656C7069746C756DLL;
    }
    else {
      uint64_t v2 = 0x72746E49776F6873LL;
    }
    if (a2 == 1) {
      uint64_t v3 = 0xED00007365676150LL;
    }
    else {
      uint64_t v3 = 0xE90000000000006FLL;
    }
  }

  if (v5 != v2 || v6 != v3) {
    OUTLINED_FUNCTION_167(v5, v6, v2, v3);
  }
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_2();
}

uint64_t sub_9C24C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_9C2B8 + 4 * byte_1833EC[a2]))(0x4E707041776F6873LL);
}

void sub_9C2B8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x4E707041776F6873LL && v2 == 0xEB00000000656D61LL) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(a1, a2, 0x4E707041776F6873LL);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

uint64_t sub_9C53C()
{
  uint64_t v0 = OUTLINED_FUNCTION_16_22();
  return ((uint64_t (*)(uint64_t))((char *)sub_9C5A4 + 4 * byte_1833F4[v1]))(v0);
}

void sub_9C5A4(uint64_t a1)
{
  if (a1 != 0x6D6F74737563LL || v1 != 0xE600000000000000LL) {
    OUTLINED_FUNCTION_167(a1, v1, 0x6D6F74737563LL, 0xE600000000000000LL);
  }
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_2();
}

uint64_t sub_9C6F4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_9C738 + 4 * byte_1833FC[a2]))(0x7265626D756ELL);
}

void sub_9C738(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x7265626D756ELL && v2 == v3) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(a1, a2, 0x7265626D756ELL);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

uint64_t sub_9C7C4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_9C828 + 4 * byte_183405[a2]))(1702125924LL);
}

void sub_9C828(uint64_t a1, uint64_t a2)
{
  if (a1 == 1702125924 && v2 == 0xE400000000000000LL) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(a1, a2, 1702125924LL);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

void specialized == infix<A>(_:_:)(char a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v5 = OUTLINED_FUNCTION_64_8();
  if (v4 == v5 && v3 == v6) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(v4, v6, v5);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  if ((a1 & 1) != 0) {
    uint64_t v2 = 0x66664F6E727574LL;
  }
  else {
    uint64_t v2 = 0x6E4F657661656CLL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x66664F6E727574LL;
  }
  else {
    uint64_t v3 = 0x6E4F657661656CLL;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = OUTLINED_FUNCTION_167(v2, 0xE700000000000000LL, v3, 0xE700000000000000LL);
  }
  OUTLINED_FUNCTION_19_1(0xE700000000000000LL);
  return v4 & 1;
}

{
  uint64_t v2;
  uint64_t v3;
  char v4;
  if ((a1 & 1) != 0) {
    uint64_t v2 = 0x6E4F6E727574LL;
  }
  else {
    uint64_t v2 = 0x6C65636E6163LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x6E4F6E727574LL;
  }
  else {
    uint64_t v3 = 0x6C65636E6163LL;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = OUTLINED_FUNCTION_167(v2, 0xE600000000000000LL, v3, 0xE600000000000000LL);
  }
  OUTLINED_FUNCTION_19_1(0xE600000000000000LL);
  return v4 & 1;
}

uint64_t sub_9CC34()
{
  uint64_t v0 = OUTLINED_FUNCTION_78_4();
  return ((uint64_t (*)(uint64_t))((char *)sub_9CCA0 + 4 * byte_18340E[v1]))(v0);
}

void sub_9CCA0()
{
  if (v1 == v3 && v0 == 0xE900000000000065LL) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(v1, v2, v3);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

void specialized == infix<A>(_:_:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2 = 0x64656C62616E65LL;
  int v3 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v4 = 0x6C62616E45736177LL;
    }
    else {
      uint64_t v4 = 0x6863746177LL;
    }
    if (v3 == 1) {
      unint64_t v5 = 0xEA00000000006465LL;
    }
    else {
      unint64_t v5 = 0xE500000000000000LL;
    }
  }

  else
  {
    unint64_t v5 = 0xE700000000000000LL;
    uint64_t v4 = 0x64656C62616E65LL;
  }

  if ((_BYTE)a2)
  {
    else {
      uint64_t v2 = 0x6863746177LL;
    }
    else {
      unint64_t v6 = 0xE500000000000000LL;
    }
  }

  else
  {
    unint64_t v6 = 0xE700000000000000LL;
  }

  if (v4 == v2 && v5 == v6) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(v4, a2, v2);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

uint64_t sub_9CE58(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_9CED0 + 4 * byte_183419[a2]))(0x6C65636E6163LL);
}

void sub_9CED0(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6C65636E6163LL && v2 == v3) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(a1, a2, 0x6C65636E6163LL);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

void specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v5 = OUTLINED_FUNCTION_64_8();
  if (v4 == v5 && v3 == v6) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    OUTLINED_FUNCTION_0_25(v4, v6, v5);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

uint64_t specialized == infix<A>(_:_:)()
{
  char v0 = type metadata accessor for InteractionType(0LL);
  OUTLINED_FUNCTION_56_16( &lazy protocol witness table cache variable for type InteractionType and conformance InteractionType,  v1,  (uint64_t (*)(uint64_t))&type metadata accessor for InteractionType,  (uint64_t)&protocol conformance descriptor for InteractionType);
  OUTLINED_FUNCTION_75_7();
  OUTLINED_FUNCTION_75_7();
  if (v7 == v5 && v8 == v6) {
    OUTLINED_FUNCTION_7_19();
  }
  else {
    char v0 = OUTLINED_FUNCTION_0_25(v7, v2, v5);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  return v0 & 1;
}

void WFInputTextFlowError.hashValue.getter(uint64_t a1)
{
}

void WFInputTextTypes.hashValue.getter(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  OUTLINED_FUNCTION_73_5(a1);
  Hasher._combine(_:)(v1);
  Hasher._finalize()();
  OUTLINED_FUNCTION_23_8();
}

void protocol witness for Hashable.hashValue.getter in conformance WFInputTextTypes()
{
}

uint64_t WFInputTextFlow.exitValue.getter()
{
  unsigned __int8 v1 = *(void **)(v0 + 160);
  int v2 = *(unsigned __int8 *)(v0 + 176);
  if (v2 == 2)
  {
    swift_errorRetain(*(void *)(v0 + 160));
  }

  else if (v2 == 1)
  {
    id v3 = v1;
  }

  else
  {
    unint64_t v4 = lazy protocol witness table accessor for type WFInputTextFlowError and conformance WFInputTextFlowError();
    return swift_allocError(&type metadata for WFInputTextFlowError, v4, 0LL, 0LL);
  }

  return (uint64_t)v1;
}

unint64_t lazy protocol witness table accessor for type WFInputTextFlowError and conformance WFInputTextFlowError()
{
  unint64_t result = lazy protocol witness table cache variable for type WFInputTextFlowError and conformance WFInputTextFlowError;
  if (!lazy protocol witness table cache variable for type WFInputTextFlowError and conformance WFInputTextFlowError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WFInputTextFlowError,  &type metadata for WFInputTextFlowError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WFInputTextFlowError and conformance WFInputTextFlowError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WFInputTextFlowError and conformance WFInputTextFlowError;
  if (!lazy protocol witness table cache variable for type WFInputTextFlowError and conformance WFInputTextFlowError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WFInputTextFlowError,  &type metadata for WFInputTextFlowError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WFInputTextFlowError and conformance WFInputTextFlowError);
  }

  return result;
}

void WFInputTextFlow.__allocating_init(shortcutName:request:appBundleId:dialogTemplating:deviceState:outputPublisher:)()
{
}

void WFInputTextFlow.init(shortcutName:request:appBundleId:dialogTemplating:deviceState:outputPublisher:)()
{
  uint64_t v1 = v0;
  id v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  unint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  type metadata accessor for CATOption(0LL);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_18_9();
  *(void *)(v1 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 184) = 0LL;
  *(void *)(v1 + 19__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0LL;
  *(void *)(v1 + 16) = v17;
  *(void *)(v1 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v15;
  *(void *)(v1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v13;
  *(void *)(v1 + 40) = v11;
  *(void *)(v1 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v9;
  outlined init with copy of DeviceState((uint64_t)v5, v1 + 56);
  outlined init with copy of DeviceState((uint64_t)v5, (uint64_t)v37);
  if (v7)
  {
    swift_retain(v7);
    id v19 = v13;
    __swift_destroy_boxed_opaque_existential_1Tm(v37);
    uint64_t v20 = v7;
  }

  else
  {
    uint64_t v35 = v3;
    outlined init with copy of DeviceState((uint64_t)v37, (uint64_t)v36);
    uint64_t v21 = one-time initialization token for shared;
    id v22 = v13;
    if (v21 != -1) {
      swift_once(&one-time initialization token for shared, one-time initialization function for shared);
    }
    uint64_t v23 = static WFDialogState.shared;
    type metadata accessor for WorkflowRunnerCATs(0LL);
    uint64_t v24 = swift_retain(v23);
    static CATOption.defaultMode.getter(v24);
    uint64_t v34 = OUTLINED_FUNCTION_51_2();
    type metadata accessor for WorkflowRunnerCATsSimple(0LL);
    OUTLINED_FUNCTION_29_2();
    uint64_t v33 = OUTLINED_FUNCTION_43_14();
    type metadata accessor for RunCustomIntentCATs(0LL);
    OUTLINED_FUNCTION_29_2();
    uint64_t v32 = OUTLINED_FUNCTION_51_2();
    type metadata accessor for RunCustomIntentCATsSimple(0LL);
    OUTLINED_FUNCTION_29_2();
    uint64_t v25 = OUTLINED_FUNCTION_43_14();
    type metadata accessor for RunVoiceCommandCATs(0LL);
    OUTLINED_FUNCTION_29_2();
    uint64_t v26 = OUTLINED_FUNCTION_51_2();
    type metadata accessor for RunVoiceCommandCATsSimple(0LL);
    OUTLINED_FUNCTION_29_2();
    uint64_t v27 = OUTLINED_FUNCTION_43_14();
    type metadata accessor for WorkflowRunnerCATPatternsExecutor(0LL);
    OUTLINED_FUNCTION_29_2();
    uint64_t v28 = OUTLINED_FUNCTION_51_2();
    __swift_destroy_boxed_opaque_existential_1Tm(v37);
    uint64_t v29 = type metadata accessor for WorkflowDialogTemplating();
    OUTLINED_FUNCTION_19(v29, 120LL);
    WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)( (uint64_t)v36,  v23,  v34,  v33,  v32,  v25,  v26,  v27,  v28);
    id v3 = v35;
  }

  *(void *)(v1 + 96) = v20;
  type metadata accessor for WorkflowSnippetProvider();
  uint64_t v30 = static WorkflowSnippetProvider.getSnippetProvider(deviceState:)(v5);

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v5);
  *(void *)(v1 + 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v30;
  uint64_t v31 = type metadata accessor for WorkflowNLContextProvider();
  *(void *)(v1 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = OUTLINED_FUNCTION_19(v31, 16LL);
  outlined init with take of AceServiceInvokerAsync(v3, v1 + 120);
  *(void *)(v1 + 160) = 0LL;
  *(void *)(v1 + 16__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0LL;
  *(_BYTE *)(v1 + 176) = 3;
  OUTLINED_FUNCTION_24_0();
}

void WFInputTextFlow.on(input:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for Input(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_35();
  uint64_t v7 = v6 - v5;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v8 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.voiceCommands);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7, v2, v3);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    Swift::Int v12 = (_DWORD *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v13 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v21 = v13;
    *Swift::Int v12 = 136315138;
    uint64_t v14 = Input.description.getter();
    uint64_t v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v21);
    uint64_t v17 = OUTLINED_FUNCTION_64_4(v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v17, v18, v12 + 1);
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_66_9();
    OUTLINED_FUNCTION_55_12(&dword_0, v10, v19, "#WFInputTextFlow on input: %s");
    OUTLINED_FUNCTION_30_3(v13, v20, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v13);
    OUTLINED_FUNCTION_1_0((uint64_t)v12);
  }

  else
  {
    OUTLINED_FUNCTION_66_9();
  }

  if (*(_BYTE *)(v0 + 176) == 3 && !*(void *)(v0 + 168) && *(void *)(v0 + 160) == 1LL) {
    WFInputTextFlow.processTextResponse(input:)();
  }
  OUTLINED_FUNCTION_24_0();
}

uint64_t WFInputTextFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a1;
  *(void *)(v2 + 80) = v1;
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v3, v4, v5);
}

{
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v3 = *(void *)(v2 + 104);
  uint64_t v4 = *(os_log_s **)(v2 + 88);
  Logger.logObject.getter(a1);
  uint64_t v5 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_31_0(v5))
  {
    uint64_t v6 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    *(_WORD *)uint64_t v6 = 0;
    OUTLINED_FUNCTION_47_1(&dword_0, v4, v1, "#WFInputTextFlow error submitting output", v6);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
  }

  OUTLINED_FUNCTION_25_21();
  OUTLINED_FUNCTION_61_14();
  swift_errorRelease(v3);
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v2 + 8));
}

void WFInputTextFlow.execute()()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = v0[10];
  uint64_t v2 = OUTLINED_FUNCTION_48();
  v0[11] = __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  uint64_t v3 = swift_retain_n(v1, 4LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[10];
  if (v6)
  {
    uint64_t v24 = v0 + 8;
    uint64_t v8 = OUTLINED_FUNCTION_38(22LL);
    uint64_t v9 = OUTLINED_FUNCTION_38(64LL);
    uint64_t v25 = v9;
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v10 = *(void **)(v7 + 32);
    id v11 = [v10 message];
    uint64_t v23 = v9;
    if (v11)
    {
      Swift::Int v12 = v11;
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v15 = v14;
    }

    else
    {
      unint64_t v15 = 0xE500000000000000LL;
      uint64_t v13 = 0x7974706D65LL;
    }

    uint64_t v16 = v0[10];
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v24, v8 + 4);
    swift_bridgeObjectRelease(v15);
    swift_release_n(v16, 2LL);
    *(_WORD *)(v8 + 1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 2080;
    id v17 = [v10 prompt];
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v21 = v20;
    }

    else
    {
      unint64_t v21 = 0xE500000000000000LL;
      uint64_t v19 = 0x7974706D65LL;
    }

    uint64_t v22 = v0[10];
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v24, v0 + 9, v8 + 14);
    swift_bridgeObjectRelease(v21);
    swift_release_n(v22, 2LL);
    _os_log_impl(&dword_0, v4, v5, "#WFInputTextFlow begins execution, message: %s, prompt: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v23, 2LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v23);
    OUTLINED_FUNCTION_1_0(v8);
  }

  else
  {
    swift_release_n(v0[10], 4LL);
  }

  __asm { BR              X10 }

uint64_t WFInputTextFlow.execute()()
{
  uint64_t v3 = *(void *)(v2 + 96);
  void *v4 = *v1;
  *(void *)(v2 + 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v0;
  swift_task_dealloc(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v1 = *(void **)(v0 + 80);
  uint64_t v2 = v1[18];
  uint64_t v3 = v1[19];
  __swift_project_boxed_opaque_existential_1(v1 + 15, v2);
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v4;
  void *v4 = v0;
  v4[1] = WFInputTextFlow.execute();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 16, v2, v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  OUTLINED_FUNCTION_50_0();
  uint64_t v3 = *(void *)(v2 + 112);
  void *v4 = *v1;
  *(void *)(v2 + 120) = v0;
  swift_task_dealloc(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  char v4;
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void **)(v1 + 160);
  uint64_t v3 = *(void **)(v1 + 168);
  *(_OWORD *)(v1 + 160) = xmmword_183660;
  uint64_t v4 = *(_BYTE *)(v1 + 176);
  *(_BYTE *)(v1 + 176) = 3;
  outlined consume of WFInputTextFlow.State(v2, v3, v4);
  static ExecuteResponse.ongoing(requireInput:)(1LL);
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  os_log_type_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v2 = __swift_destroy_boxed_opaque_existential_1Tm((void *)(v1 + 16));
  uint64_t v3 = *(void *)(v1 + 120);
  uint64_t v4 = *(os_log_s **)(v1 + 88);
  Logger.logObject.getter(v2);
  os_log_type_t v5 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_31_0(v5))
  {
    BOOL v6 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    *(_WORD *)BOOL v6 = 0;
    OUTLINED_FUNCTION_47_1(&dword_0, v4, v0, "#WFInputTextFlow error submitting output", v6);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
  }

  OUTLINED_FUNCTION_25_21();
  OUTLINED_FUNCTION_61_14();
  swift_errorRelease(v3);
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t WFInputTextFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WFInputTextFlow();
  uint64_t v6 = lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow( &lazy protocol witness table cache variable for type WFInputTextFlow and conformance WFInputTextFlow,  v5,  (uint64_t (*)(uint64_t))type metadata accessor for WFInputTextFlow,  (uint64_t)&protocol conformance descriptor for WFInputTextFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v6);
}

uint64_t WFInputTextFlow.buildOutput()(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  void v2[9] = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v2[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[11] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[12] = swift_task_alloc(v6);
  v2[13] = swift_task_alloc(v6);
  uint64_t v7 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[14] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[15] = v8;
  v2[16] = OUTLINED_FUNCTION_9_0(v8);
  uint64_t v9 = type metadata accessor for NLContextUpdate(0LL);
  v2[17] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[18] = v10;
  v2[19] = OUTLINED_FUNCTION_9_0(v10);
  uint64_t v11 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  v2[20] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[21] = v12;
  v2[22] = OUTLINED_FUNCTION_9_0(v12);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v4 = *v2;
  uint64_t v7 = v4;
  uint64_t v5 = *v2;
  OUTLINED_FUNCTION_12_16(*(void *)(v4 + 200), &v7);
  if (v1)
  {
    OUTLINED_FUNCTION_37_16();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_33_0();
    swift_task_dealloc(v4);
    return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v5 + 8));
  }

  else
  {
    *(void *)(v4 + 20__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a1;
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

uint64_t WFInputTextFlow.buildOutput()()
{
  uint64_t v2 = v0[21];
  uint64_t v1 = (os_log_s *)v0[22];
  uint64_t v3 = v0[20];
  (*(void (**)(os_log_s *, void, uint64_t))(v2 + 104))( v1,  enum case for RFFeatureFlags.ResponseFramework._SMART(_:),  v3);
  uint64_t v4 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  (*(void (**)(os_log_s *, uint64_t))(v2 + 8))(v1, v3);
  if ((v4 & 1) != 0)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v5 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
    OUTLINED_FUNCTION_9_5();
    os_log_type_t v6 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_45_0(v6))
    {
      uint64_t v7 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_26_1(v7);
      OUTLINED_FUNCTION_47_1(&dword_0, v1, (os_log_type_t)v3, "#WFInputTextFlow: building rfv2 snippet", (uint8_t *)v4);
      OUTLINED_FUNCTION_1_0(v4);
    }

    uint64_t v8 = v0[8];

    uint64_t v9 = *(void *)(v8 + 96);
    uint64_t v10 = *(void *)(v8 + 32);
    v0[24] = v10;
    uint64_t v11 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(*(void *)v9 + 200LL));
    v0[25] = (uint64_t)v11;
    *uint64_t v11 = v0;
    v11[1] = WFInputTextFlow.buildOutput();
    return v17(v10);
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v13 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.voiceCommands);
    OUTLINED_FUNCTION_9_5();
    os_log_type_t v14 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_45_0(v14))
    {
      unint64_t v15 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_26_1(v15);
      OUTLINED_FUNCTION_47_1(&dword_0, v1, (os_log_type_t)v3, "#WFInputTextFlow: building rfv1 snippet", (uint8_t *)v4);
      OUTLINED_FUNCTION_1_0(v4);
    }

    uint64_t v16 = (uint64_t **)swift_task_alloc(dword_218DA4);
    v0[23] = (uint64_t)v16;
    uint8_t *v16 = v0;
    v16[1] = (uint64_t *)WFInputTextFlow.buildOutput();
    return WFInputTextFlow.buildOutput_rfv1()(v0[7]);
  }

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v1 = *v0;
  uint64_t v4 = v1;
  uint64_t v2 = *v0;
  OUTLINED_FUNCTION_12_16(*(void *)(v1 + 184), &v4);
  OUTLINED_FUNCTION_37_16();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  swift_task_dealloc(v1);
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v2 + 8));
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void *v23;
  uint64_t v24;
  uint64_t v1 = (void *)v0[26];
  uint64_t v23 = v1;
  uint64_t v19 = v0[19];
  unint64_t v20 = v0[18];
  unint64_t v21 = v0[17];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[13];
  uint64_t v5 = v0[10];
  uint64_t v4 = v0[11];
  os_log_type_t v6 = v0[9];
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(v0[8] + 112LL) + 200LL))(v0[24]);
  static DialogPhase.confirmed.getter(v7);
  uint64_t v8 = [v1 catId];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v3, v5);
  OutputGenerationManifest.init(dialogPhase:_:)(v2, CustomIntentDisambiguationItemContainer.init(items:), 0LL);
  OutputGenerationManifest.responseViewId.setter(v9);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v6, v19, v21);
  __swift_storeEnumTagSinglePayload(v6, 0LL, 1LL, v21);
  OutputGenerationManifest.nlContextUpdate.setter(v6);
  OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
  OutputGenerationManifest.canUseServerTTS.setter(1LL);
  uint64_t v10 = type metadata accessor for ResponseFactory(0LL);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v0[27] = ResponseFactory.init()();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v12 = OUTLINED_FUNCTION_19(v11, 40LL);
  *(_OWORD *)(v12 + 16) = xmmword_17E150;
  *(void *)(v12 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v23;
  uint64_t v24 = v12;
  specialized Array._endMutation()(v12, v13, v14);
  v0[28] = v24;
  uint64_t v16 = v23;
  id v17 = (void *)swift_task_alloc(v15);
  v0[29] = v17;
  *id v17 = v0;
  v17[1] = WFInputTextFlow.buildOutput();
  return ((uint64_t (*)(void *, uint64_t, void))v22)(v0 + 2, v24, v0[16]);
}

{
  uint64_t v0;
  uint64_t v2;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_12_16(*(void *)(v0 + 232), &v2);
  OUTLINED_FUNCTION_20();
  swift_release();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v5 = *(void *)(v0 + 112);
  os_log_type_t v6 = *(void *)(v0 + 120);
  uint64_t v7 = *(void *)(v0 + 56);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  outlined init with take of AceServiceInvokerAsync((__int128 *)(v0 + 16), v7);
  uint64_t v8 = *(void *)(v0 + 152);
  swift_task_dealloc(*(void *)(v0 + 176));
  swift_task_dealloc(v8);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t WFInputTextFlow.buildOutput_rfv1()(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  void v2[9] = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for NLContextUpdate(0LL);
  v2[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[11] = v5;
  v2[12] = OUTLINED_FUNCTION_9_0(v5);
  uint64_t v6 = type metadata accessor for TemplatingResult(0LL);
  v2[13] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[14] = v7;
  v2[15] = OUTLINED_FUNCTION_9_0(v7);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WFInputTextFlow.buildOutput_rfv1()()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = *(void *)(v1 + 96);
  uint64_t v3 = *(void *)(v1 + 32);
  v0[16] = v3;
  uint64_t v4 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(*(void *)v2 + 192LL));
  v0[17] = v4;
  void *v4 = v0;
  v4[1] = WFInputTextFlow.buildOutput_rfv1();
  return v6(v0[15], v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  OUTLINED_FUNCTION_50_0();
  uint64_t v3 = *(void *)(v2 + 136);
  void *v4 = *v1;
  *(void *)(v2 + 14__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v0;
  swift_task_dealloc(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 120));
  swift_task_dealloc(v1);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

void WFInputTextFlow.buildOutput_rfv1()()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v14 = *(void *)(v0 + 112);
  uint64_t v15 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v13 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v6 = *(void **)(v0 + 56);
  (*(void (**)(void))(**(void **)(v5 + 112) + 200LL))(*(void *)(v0 + 128));
  uint64_t v7 = (void *)(v5 + 56);
  uint64_t v9 = *(void *)(v5 + 80);
  uint64_t v8 = *(void *)(v5 + 88);
  __swift_project_boxed_opaque_existential_1(v7, v9);
  LOBYTE(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v9, v8);
  Swift::Bool v10 = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  OUTLINED_FUNCTION_81_4(v4, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  __swift_storeEnumTagSinglePayload(v4, 0LL, 1LL, v13);
  uint64_t v11 = type metadata accessor for AceOutput(0LL);
  *(_OWORD *)(v0 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
  *(void *)(v0 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0LL;
  *(_OWORD *)(v0 + 16) = 0u;
  v6[3] = v11;
  v6[4] = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v6);
  static AceOutputHelper.makeConfirmedViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v1,  v7,  v8 & 1,  _swiftEmptyArrayStorage,  v10,  1LL,  v4,  _swiftEmptyArrayStorage,  v0 + 16);
  outlined destroy of URL?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v4, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v13);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v1, v15);
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_34_3();
  __asm { BR              X0 }

void WFInputTextFlow.processTextResponse(input:)()
{
  uint64_t v2 = type metadata accessor for USOParse(0LL);
  uint64_t v50 = *(void *)(v2 - 8);
  uint64_t v52 = v2;
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_35();
  uint64_t v5 = (uint8_t *)(v4 - v3);
  OUTLINED_FUNCTION_103();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_35();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for NLIntent(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_35();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = type metadata accessor for Parse(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_18_11();
  Input.parse.getter(v17);
  int v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 88))(v1, v15);
  if (v18 == enum case for Parse.NLv3IntentOnly(_:))
  {
    OUTLINED_FUNCTION_17_7(*(uint64_t (**)(uint64_t, uint64_t))(v16 + 96));
    OUTLINED_FUNCTION_81_4(v14, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 32));
    OUTLINED_FUNCTION_81_4(v9, v14, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16));
    uint64_t v19 = WFInputTextFlow.getTextFromIntent(intent:)();
    uint64_t v21 = v20;
    uint64_t v22 = v0;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v23 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.voiceCommands);
    uint64_t v24 = OUTLINED_FUNCTION_60_11();
    Logger.logObject.getter(v24);
    os_log_type_t v25 = OUTLINED_FUNCTION_58();
    uint64_t v49 = v19;
    if (os_log_type_enabled(v0, v25))
    {
      uint64_t v26 = (_DWORD *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v51 = OUTLINED_FUNCTION_38(32LL);
      *uint64_t v26 = 136315138;
      if (v21) {
        unint64_t v27 = v21;
      }
      else {
        unint64_t v27 = 0xE500000000000000LL;
      }
      OUTLINED_FUNCTION_5_14();
      uint64_t v28 = OUTLINED_FUNCTION_51_16();
      uint64_t v29 = OUTLINED_FUNCTION_64_4(v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v29, v30, v26 + 1);
      OUTLINED_FUNCTION_19_1(v21);
      swift_bridgeObjectRelease(v27);
      OUTLINED_FUNCTION_46_17(&dword_0, v0, v25, "#WFInputTextFlow received text: %s");
      OUTLINED_FUNCTION_30_3(v51, v31, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v51);
      OUTLINED_FUNCTION_1_0((uint64_t)v26);
    }

    else
    {
      OUTLINED_FUNCTION_19_1(v21);
    }

    outlined destroy of VoiceCommandsNLIntent(v9);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v14, v10);
  }

  else
  {
    if (v18 != enum case for Parse.uso(_:))
    {
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v1, v15);
      goto LABEL_24;
    }

    OUTLINED_FUNCTION_17_7(*(uint64_t (**)(uint64_t, uint64_t))(v16 + 96));
    (*(void (**)(uint8_t *, uint64_t, uint64_t))(v50 + 32))(v5, v1, v52);
    if ((SiriLinkFlowFeatureFlags.isEnabled.getter(0LL) & 1) == 0)
    {
      (*(void (**)(uint8_t *, uint64_t))(v50 + 8))(v5, v52);
      goto LABEL_24;
    }

    uint64_t v22 = v0;
    uint64_t v32 = WFInputTextFlow.parseUSOInput(usoParse:)(v5);
    uint64_t v21 = v33;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v34 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v34, (uint64_t)static Logger.voiceCommands);
    uint64_t v35 = OUTLINED_FUNCTION_60_11();
    Logger.logObject.getter(v35);
    os_log_type_t v36 = OUTLINED_FUNCTION_58();
    uint64_t v49 = v32;
    if (os_log_type_enabled(v0, v36))
    {
      uint64_t v48 = v5;
      uint64_t v37 = (_DWORD *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v38 = OUTLINED_FUNCTION_38(32LL);
      *uint64_t v37 = 136315138;
      if (v21) {
        unint64_t v39 = v21;
      }
      else {
        unint64_t v39 = 0xE500000000000000LL;
      }
      OUTLINED_FUNCTION_5_14();
      uint64_t v40 = OUTLINED_FUNCTION_51_16();
      uint64_t v41 = OUTLINED_FUNCTION_64_4(v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v41, v42, v37 + 1);
      OUTLINED_FUNCTION_19_1(v21);
      swift_bridgeObjectRelease(v39);
      OUTLINED_FUNCTION_55_12(&dword_0, v0, v43, "#WFInputTextFlow received text from usoParse: %s");
      OUTLINED_FUNCTION_30_3(v38, v44, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v38);
      OUTLINED_FUNCTION_1_0((uint64_t)v37);

      (*(void (**)(uint8_t *, uint64_t))(v50 + 8))(v48, v52);
    }

    else
    {
      OUTLINED_FUNCTION_19_1(v21);

      (*(void (**)(uint8_t *, uint64_t))(v50 + 8))(v5, v52);
    }
  }

  if (v21)
  {
    uint64_t v45 = (void *)*((void *)v22 + 20);
    uint64_t v46 = (void *)*((void *)v22 + 21);
    *((void *)v22 + 20) = v49;
    *((void *)v22 + 21) = v21;
    char v47 = *((_BYTE *)v22 + 176);
    *((_BYTE *)v22 + 176) = 0;
    outlined consume of WFInputTextFlow.State(v45, v46, v47);
  }

uint64_t WFInputTextFlow.getTextFromIntent(intent:)()
{
  uint64_t v7 = v6 - v5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_18_11();
  id v10 = [*(id *)(v0 + 32) textFieldConfiguration];
  id v11 = [v10 keyboardType];

  if (!v11)
  {
    if (one-time initialization token for voiceCommandTextNode != -1) {
      swift_once( &one-time initialization token for voiceCommandTextNode,  one-time initialization function for voiceCommandTextNode);
    }
    uint64_t v28 = static VoiceCommandsNLIntent.voiceCommandTextNode;
    uint64_t v29 = OUTLINED_FUNCTION_103();
    uint64_t v31 = OUTLINED_FUNCTION_56_16( (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent,  v30,  type metadata accessor for VoiceCommandsNLIntent,  (uint64_t)&protocol conformance descriptor for VoiceCommandsNLIntent);
    OUTLINED_FUNCTION_71_6(v28, v29, v31);
    return *(void *)&v36;
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = OUTLINED_FUNCTION_55_14();
  if (v3 == v12 && v2 == v13) {
    goto LABEL_14;
  }
  uint64_t v15 = v13;
  OUTLINED_FUNCTION_167(v3, v2, v12, v13);
  OUTLINED_FUNCTION_140_0();
  swift_bridgeObjectRelease(v15);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = OUTLINED_FUNCTION_55_14();
  if (v3 == v16 && v2 == v17)
  {
LABEL_14:
    OUTLINED_FUNCTION_19_1(v2);
LABEL_15:
    if (one-time initialization token for voiceCommandScalarNode != -1) {
      swift_once( &one-time initialization token for voiceCommandScalarNode,  one-time initialization function for voiceCommandScalarNode);
    }
    uint64_t v24 = static VoiceCommandsNLIntent.voiceCommandScalarNode;
    uint64_t v25 = OUTLINED_FUNCTION_103();
    uint64_t v27 = OUTLINED_FUNCTION_56_16( (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent,  v26,  type metadata accessor for VoiceCommandsNLIntent,  (uint64_t)&protocol conformance descriptor for VoiceCommandsNLIntent);
    OUTLINED_FUNCTION_71_6(v24, v25, v27);
    if (__swift_getEnumTagSinglePayload(v7, 1LL, v8) == 1)
    {

      outlined destroy of URL?( v7,  &demangling cache variable for type metadata for Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>?);
      return 0LL;
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v1, v7, v8);
    uint64_t v33 = Scalar.value.getter(v8);
    if ((v37 & 1) != 0)
    {
      OUTLINED_FUNCTION_17_7(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));

      return 0LL;
    }

    if (floor(v36) != v36)
    {
      uint64_t v34 = ((uint64_t (*)(uint64_t))Double.description.getter)(v33);
      goto LABEL_32;
    }

    if ((~*(void *)&v36 & 0x7FF0000000000000LL) != 0)
    {
      if (v36 > -9.22337204e18)
      {
        if (v36 < 9.22337204e18)
        {
          uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
LABEL_32:
          uint64_t v32 = v34;

          OUTLINED_FUNCTION_17_7(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
          return v32;
        }

uint64_t WFInputTextFlow.parseUSOInput(usoParse:)(uint8_t *a1)
{
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v67 = (char *)&v64 - v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_35();
  uint64_t v13 = v12 - v11;
  uint64_t v68 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v14 = *(void *)(v68 - 8);
  uint64_t v15 = __chkstk_darwin(v68);
  uint64_t v65 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  int v18 = (char *)&v64 - v17;
  uint64_t v19 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_18_9();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v21 = OUTLINED_FUNCTION_48();
  uint64_t v69 = __swift_project_value_buffer(v21, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_9_5();
  os_log_type_t v22 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_20_9(v22))
  {
    uint64_t v23 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    uint64_t v64 = v14;
    uint64_t v24 = a1;
    uint64_t v25 = v8;
    uint64_t v26 = v20;
    uint64_t v27 = v3;
    uint64_t v28 = v19;
    uint64_t v29 = v23;
    *(_WORD *)uint64_t v23 = 0;
    OUTLINED_FUNCTION_47_1(&dword_0, v1, v2, "parsing uso input", v23);
    uint64_t v30 = (uint64_t)v29;
    uint64_t v19 = v28;
    uint64_t v3 = v27;
    uint64_t v20 = v26;
    uint64_t v8 = v25;
    a1 = v24;
    uint64_t v14 = v64;
    OUTLINED_FUNCTION_1_0(v30);
  }

  uint64_t v31 = OUTLINED_FUNCTION_82_4();
  uint64_t v32 = Siri_Nlu_External_UserParse.userDialogActs.getter(v31);
  uint64_t v33 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v34 = v68;
  v33(v18, v68);
  specialized Collection.first.getter(v32, v13);
  OUTLINED_FUNCTION_20();
  if (__swift_getEnumTagSinglePayload(v13, 1LL, v19) == 1)
  {
    uint64_t v35 = outlined destroy of URL?( v13,  &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    double v36 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_26_1(v38);
      OUTLINED_FUNCTION_47_1(&dword_0, v36, v37, "#WFInputTextFlow: missing UDA", a1);
      OUTLINED_FUNCTION_1_0((uint64_t)a1);
    }

    return 0LL;
  }

  (*(void (**)(os_log_s *, uint64_t, uint64_t))(v20 + 32))(v3, v13, v19);
  unint64_t v39 = v65;
  uint64_t v40 = OUTLINED_FUNCTION_82_4();
  uint64_t v41 = (os_log_s *)Siri_Nlu_External_UserParse.userDialogActs.getter(v40);
  v33(v39, v34);
  unint64_t v42 = *((void *)v41 + 2);
  OUTLINED_FUNCTION_20();
  BOOL v43 = v42 >= 2;
  uint64_t v44 = (uint64_t)v67;
  if (v43)
  {
    OUTLINED_FUNCTION_62_11();
    os_log_type_t v45 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_31_0(v45))
    {
      uint64_t v46 = (uint8_t *)OUTLINED_FUNCTION_57_1();
      *(_WORD *)uint64_t v46 = 0;
      OUTLINED_FUNCTION_47_1(&dword_0, v41, (os_log_type_t)a1, "#WFInputTextFlow: more than one task found in UDA", v46);
      OUTLINED_FUNCTION_1_0((uint64_t)v46);
    }
  }

  id v47 = [*(id *)(v66 + 32) textFieldConfiguration];
  id v48 = [v47 keyboardType];

  if (!v48) {
    goto LABEL_21;
  }
  SiriLinkFlowPlugin::WFInputTextTypes v49 = WFTextFieldKeyboardType.toInputType()();

  if (v49 - 1 >= 2)
  {
    if (v49)
    {
      Siri_Nlu_External_UserDialogAct.urlValue.getter(v44);
      outlined init with copy of URL?(v44, (uint64_t)v8);
      uint64_t v57 = type metadata accessor for URL(0LL);
      if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1LL, v57) != 1)
      {
        uint64_t v56 = URL.absoluteString.getter();
        outlined destroy of URL?(v44, (uint64_t *)&demangling cache variable for type metadata for URL?);
        OUTLINED_FUNCTION_26_17();
        (*(void (**)(char *, uint64_t))(*(void *)(v57 - 8) + 8LL))(v8, v57);
        return v56;
      }

      outlined destroy of URL?(v44, (uint64_t *)&demangling cache variable for type metadata for URL?);
      OUTLINED_FUNCTION_26_17();
      outlined destroy of URL?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for URL?);
      return 0LL;
    }

LABEL_22:
  uint64_t v56 = v55;
  (*(void (**)(os_log_s *, uint64_t))(v20 + 8))(v3, v19);
  return v56;
}

  uint64_t v23 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  uint64_t v24 = (uint64_t *)(*(void *)(v23 + 48) + 16 * a3);
  *uint64_t v24 = v8;
  v24[1] = a2;
  uint64_t v25 = *(void *)(v23 + 16);
  uint64_t v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v23 + 16) = v27;
  }
  return result;
}

      OUTLINED_FUNCTION_37();
      uint64_t v14 = v71;
      uint64_t v24 = v80;
LABEL_25:
      (*(void (**)(char *, void *))(v81 + 8))(v14, v5);
      os_log_type_t v22 = after;
      if (v22 == Array.endIndex.getter(v26, v5))
      {
        OUTLINED_FUNCTION_13_32((uint64_t)v107);
        swift_bridgeObjectRelease();
        v20._rawValue = rawValue;
        goto LABEL_29;
      }
    }

    OUTLINED_FUNCTION_11_37();
    BOOL v43 = type metadata accessor for Array(0LL);
    OUTLINED_FUNCTION_5_45(v43);
    uint64_t v14 = v32;
    uint64_t v17 = v76;
    uint64_t v24 = v80;
    uint64_t v25 = v79;
    uint64_t v5 = v39;
LABEL_24:
    uint64_t v26 = v78;
    goto LABEL_25;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_4_48();
LABEL_29:
  uint64_t v89 = (uint64_t)v20._rawValue;
  uint64_t v64 = OUTLINED_FUNCTION_10_37();
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v64);
  if ((Collection.isEmpty.getter(v64, WitnessTable) & 1) == 0) {
    return CustomIntentDisambiguationItemContainer.init(items:)(v20).items._rawValue;
  }
  OUTLINED_FUNCTION_37();
  return 0LL;
}

  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(v5);
  return 0LL;
}

SiriLinkFlowPlugin::WFInputTextTypes __swiftcall WFTextFieldKeyboardType.toInputType()()
{
  uint64_t v2 = OUTLINED_FUNCTION_29_17();
  if (v1 != v2 || v0 != v3)
  {
    uint64_t v5 = OUTLINED_FUNCTION_167(v1, v0, v2, v3);
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_37();
    if ((v5 & 1) != 0) {
      goto LABEL_8;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = OUTLINED_FUNCTION_29_17();
    if (v5 != v7 || v0 != v8)
    {
      uint64_t v10 = OUTLINED_FUNCTION_167(v5, v0, v7, v8);
      OUTLINED_FUNCTION_14();
      OUTLINED_FUNCTION_37();
      if ((v10 & 1) != 0) {
        goto LABEL_8;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = OUTLINED_FUNCTION_29_17();
      if (v10 != v11 || v0 != v12) {
        OUTLINED_FUNCTION_167(v10, v0, v11, v12);
      }
    }
  }

  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_37();
LABEL_8:
  OUTLINED_FUNCTION_2();
  return result;
}

uint64_t WFInputTextFlow.deinit()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 56));
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 120));
  outlined consume of WFInputTextFlow.State(*(void **)(v0 + 160), *(id *)(v0 + 168), *(_BYTE *)(v0 + 176));
  swift_bridgeObjectRelease(*(void *)(v0 + 192));
  return v0;
}

uint64_t WFInputTextFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 200LL, 7LL);
}

uint64_t protocol witness for Flow.on(input:) in conformance WFInputTextFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 224LL))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance WFInputTextFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 240LL))();
}

uint64_t protocol witness for Flow.execute() in conformance WFInputTextFlow(uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 232LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makePromptForTCCAcceptance(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return v7(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance WFInputTextFlow@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 208LL))();
  *(void *)a1 = result;
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v4 & 1;
  return result;
}

id @nonobjc WFInputTextDialogResponse.init(inputtedText:cancelled:)(uint64_t a1, uint64_t a2, char a3)
{
  if (a2)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v6 = 0LL;
  }

  id v7 = [v3 initWithInputtedText:v6 cancelled:a3 & 1];

  return v7;
}

void outlined consume of WFInputTextFlow.State(void *a1, id a2, char a3)
{
  switch(a3)
  {
    case 2:
      swift_errorRelease(a1);
      break;
    case 1:

      break;
    case 0:
      swift_bridgeObjectRelease(a2);
      break;
  }

uint64_t type metadata accessor for WFInputTextFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin15WFInputTextFlow);
}

unint64_t lazy protocol witness table accessor for type WFInputTextTypes and conformance WFInputTextTypes()
{
  unint64_t result = lazy protocol witness table cache variable for type WFInputTextTypes and conformance WFInputTextTypes;
  if (!lazy protocol witness table cache variable for type WFInputTextTypes and conformance WFInputTextTypes)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WFInputTextTypes,  &type metadata for WFInputTextTypes);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WFInputTextTypes and conformance WFInputTextTypes);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for WFInputTextFlowError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_9FFE0 + 4 * byte_183420[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_A0000 + 4 * byte_183425[v4]))();
  }
}

_BYTE *sub_9FFE0(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_A0000(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_A0008(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_A0010(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_A0018(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_A0020(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for WFInputTextFlowError()
{
  return &type metadata for WFInputTextFlowError;
}

uint64_t storeEnumTagSinglePayload for WFInputTextTypes(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_A0088 + 4 * byte_18342F[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_A00BC + 4 * byte_18342A[v4]))();
}

uint64_t sub_A00BC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_A00C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xA00CCLL);
  }
  return result;
}

uint64_t sub_A00D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xA00E0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_A00E4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_A00EC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WFInputTextTypes()
{
  return &type metadata for WFInputTextTypes;
}

id outlined copy of WFInputTextFlow.State(id result, id a2, char a3)
{
  switch(a3)
  {
    case 2:
      return (id)swift_errorRetain(result);
    case 1:
      return result;
    case 0:
      return (id)swift_bridgeObjectRetain(a2);
  }

  return result;
}

void destroy for WFInputTextFlow.State(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for WFInputTextFlow.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of WFInputTextFlow.State(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for WFInputTextFlow.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of WFInputTextFlow.State(*(id *)a2, v4, v5);
  NSString v6 = *(void **)a1;
  id v7 = *(void **)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of WFInputTextFlow.State(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for WFInputTextFlow.State(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of WFInputTextFlow.State(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for WFInputTextFlow.State(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 252;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 3) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WFInputTextFlow.State( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 253;
    *(void *)(result + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0LL;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for WFInputTextFlow.State(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t destructiveInjectEnumTag for WFInputTextFlow.State(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)unint64_t result = a2 - 3;
    *(void *)(result + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0LL;
    LOBYTE(a__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 3;
  }

  *(_BYTE *)(result + 16) = a2;
  return result;
}

void *type metadata accessor for WFInputTextFlow.State()
{
  return &unk_1F72B0;
}

uint64_t OUTLINED_FUNCTION_0_25(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, v4, 0LL);
}

  ;
}

uint64_t OUTLINED_FUNCTION_16_22()
{
  return 0x6D6F74737563LL;
}

uint64_t OUTLINED_FUNCTION_22_14(float *a1, float a2)
{
  *a1 = a2;
  *(void *)(v3 - 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v2;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 112, v3 - 104, a1 + 1);
}

  ;
}

uint64_t OUTLINED_FUNCTION_25_21()
{
  *(void *)(v1 + 160) = v0;
  *(void *)(v1 + 16__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0LL;
  *(_BYTE *)(v1 + 176) = 2;
  return swift_errorRetain(v0);
}

uint64_t OUTLINED_FUNCTION_26_17()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_29_17()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_37_16()
{
  return swift_task_dealloc(*(void *)(v0 + 176));
}

  ;
}

uint64_t OUTLINED_FUNCTION_43_14()
{
  return CATWrapperSimple.__allocating_init(options:globals:)(v0, 0LL);
}

void OUTLINED_FUNCTION_46_17(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_51_16()
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0, v1, (uint64_t *)(v2 - 88));
}

uint64_t OUTLINED_FUNCTION_54_16()
{
  return 1954047348LL;
}

uint64_t OUTLINED_FUNCTION_55_14()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_56_16( unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  return lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow( a1,  255LL,  a3,  a4);
}

uint64_t OUTLINED_FUNCTION_60_11()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t OUTLINED_FUNCTION_61_14()
{
  return static ExecuteResponse.complete()(v3);
}

uint64_t OUTLINED_FUNCTION_62_11()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_64_8()
{
  return v0(v1);
}

uint64_t OUTLINED_FUNCTION_66_9()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

  ;
}

uint64_t OUTLINED_FUNCTION_71_6(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IntentNodeTraversable.value<A>(forNode:)(a1, a2, a3);
}

void *OUTLINED_FUNCTION_73_5(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, 0LL);
}

uint64_t OUTLINED_FUNCTION_75_7()
{
  return dispatch thunk of RawRepresentable.rawValue.getter(v0, v1);
}

uint64_t OUTLINED_FUNCTION_78_4()
{
  return 0x6D69547473726966LL;
}

  ;
}

void OUTLINED_FUNCTION_81_6()
{
}

uint64_t OUTLINED_FUNCTION_82_4()
{
  return USOParse.userParse.getter();
}

uint64_t ShortcutsLinkNLContextProvider.makeContextForNeedsValue(valueType:)@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for NLContextUpdate(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = 0LL;
  if ((SiriLinkFlowFeatureFlags.isEnabled.getter(0LL) & 1) != 0 && a1)
  {
    id v9 = a1;
    uint64_t v10 = (uint64_t)static LNValueTypeMap.mapLNValueTypeToIntentValueType(valueType:)(v9);
    if (v12)
    {
      if (v12 != 1 && !(v10 ^ 2 | v11))
      {
        uint64_t v13 = type metadata accessor for WorkflowNLContextProvider();
        swift_allocObject(v13, 16LL, 7LL);
        VoiceCommandNLContextProvider.makeContextForBoolNeedsValuePrompt(intent:parameter:)();

        return swift_release();
      }
    }

    else
    {
      outlined consume of VoiceCommandIntentValueType(v10, v11, 0);
    }

    uint64_t v8 = LNValueType.executeCommonVoiceCommandTaskBuilder.getter();
  }

  VoiceCommandNLContextProvider.makeContextForNeedsValue(taskBuilder:)(v8);
  if (a1)
  {
    id v15 = a1;
    unint64_t v16 = (unint64_t)static LNValueTypeMap.mapLNValueTypeToIntentValueType(valueType:)(v15);
    if (v18 == 2 && v16 <= 0xD && ((1LL << v16) & 0x2881) != 0)
    {
      OUTLINED_FUNCTION_0_26((uint64_t)"com.apple.siri.nl.VoiceCommands");
      uint64_t v19 = LNValueType.toPromptTargetType()();
      NLContextUpdate.dictationPromptTargetNodes.setter(v19);
    }

    else
    {
      outlined consume of VoiceCommandIntentValueType(v16, v17, v18);
      NLContextUpdate.weightedPromptTargetDomain.setter(0xD00000000000001FLL);
      uint64_t v20 = LNValueType.toPromptTargetType()();
      NLContextUpdate.weightedPromptResponseTargets.setter(v20);
    }
  }

  else
  {
    OUTLINED_FUNCTION_0_26((uint64_t)"com.apple.siri.nl.VoiceCommands");
    NLContextUpdate.dictationPromptTargetNodes.setter(&outlined read-only object #0 of ShortcutsLinkNLContextProvider.makeContextForNeedsValue(valueType:));
  }

  swift_release();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
}

uint64_t ShortcutsLinkNLContextProvider.makeContextForActionConfirmation(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = NLContextUpdate.weightedPromptResponseTargets.setter(&outlined read-only object #0 of ShortcutsLinkNLContextProvider.makeContextForActionConfirmation(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:));
  if (a2 && a4)
  {
    swift_bridgeObjectRetain(a2);
    __n128 v13 = swift_bridgeObjectRetain(a4);
    uint64_t v14 = (void (*)(uint64_t *, void))NLContextUpdate.weightedPromptResponseTargets.modify(v23, v13);
    if (*v15)
    {
      unint64_t v16 = v15;
      os_log_type_t v22 = v14;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v17 = *(void *)(*v16 + 16LL);
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
      uint64_t v18 = *v16;
      *(void *)(v18 + 16) = v17 + 1;
      uint64_t v19 = v18 + 16 * v17;
      *(void *)(v19 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0xD000000000000022LL;
      *(void *)(v19 + 40) = 0x80000000001905A0LL;
      v22(v23, 0LL);
    }

    else
    {
      v14(v23, 0LL);
    }

    v23[0] = a5;
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a6);
    specialized Array.replaceSubrange<A>(_:with:)(0LL, 0LL, a1, a2);
    specialized Array.replaceSubrange<A>(_:with:)(0LL, 0LL, a3, a4);
    uint64_t v20 = v23[0];
    uint64_t v21 = ShortcutsLinkNLContextProvider.getDisplayHints(acceptList:denyList:)(v23[0], a6);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(a6);
    return NLContextUpdate.displayHints.setter(v21);
  }

  return result;
}

uint64_t ShortcutsLinkNLContextProvider.makeContextForDisambiguation(disambiguationItems:)(uint64_t a1)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  return NLContextUpdate.displayHints.setter(v3);
}

void *ShortcutsLinkNLContextProvider.getDisplayHints(acceptList:denyList:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SemanticValue?);
  __chkstk_darwin(v4);
  id v47 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = type metadata accessor for DisplayHint(0LL);
  uint64_t v6 = *(void *)(v48 - 8);
  uint64_t v7 = __chkstk_darwin(v48);
  os_log_type_t v45 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v40 - v9;
  uint64_t v11 = type metadata accessor for SemanticValue(0LL);
  uint64_t v49 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v46 = (char *)&v40 - v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v40 - v17;
  uint64_t v19 = *(void *)(a1 + 16);
  uint64_t v41 = a2;
  uint64_t v44 = v14;
  if (v19)
  {
    swift_bridgeObjectRetain(a1);
    uint64_t v40 = a1;
    uint64_t v20 = (void *)(a1 + 40);
    uint64_t v21 = _swiftEmptyArrayStorage;
    unint64_t v42 = 0x8000000000194CE0LL;
    unint64_t v43 = (unint64_t)v10;
    uint64_t v22 = (uint64_t)v47;
    do
    {
      uint64_t v23 = *(v20 - 1);
      uint64_t v24 = *v20;
      swift_bridgeObjectRetain(*v20);
      SemanticValue.init(string:label:)(v23, v24, 0xD000000000000010LL, v42);
      uint64_t v25 = *(void (**)(uint64_t, char *, uint64_t))(v49 + 16);
      v25(v22, v18, v11);
      __swift_storeEnumTagSinglePayload(v22, 0LL, 1LL, v11);
      uint64_t v26 = v46;
      v25((uint64_t)v46, v18, v11);
      DisplayHint.init(idValue:displayValue:)(v22, v26);
      if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0) {
        uint64_t v21 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v21[2] + 1LL,  1LL,  (uint64_t)v21);
      }
      unint64_t v28 = v21[2];
      unint64_t v27 = v21[3];
      if (v28 >= v27 >> 1) {
        uint64_t v21 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v27 > 1,  v28 + 1,  1LL,  (uint64_t)v21);
      }
      v20 += 2;
      v21[2] = v28 + 1;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))( (unint64_t)v21 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
      + *(void *)(v6 + 72) * v28,
        v43,
        v48);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v18, v11);
      --v19;
    }

    while (v19);
    swift_bridgeObjectRelease(v40);
    a2 = v41;
    uint64_t v14 = v44;
  }

  else
  {
    uint64_t v21 = _swiftEmptyArrayStorage;
  }

  uint64_t v29 = *(void *)(a2 + 16);
  if (v29)
  {
    swift_bridgeObjectRetain(a2);
    uint64_t v30 = (void *)(a2 + 40);
    unint64_t v43 = 0x8000000000194CE0LL;
    do
    {
      uint64_t v31 = v6;
      uint64_t v32 = *(v30 - 1);
      uint64_t v33 = *v30;
      swift_bridgeObjectRetain(*v30);
      SemanticValue.init(string:label:)(v32, v33, 0xD000000000000010LL, v43);
      uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
      uint64_t v35 = (uint64_t)v47;
      v34(v47, v14, v11);
      __swift_storeEnumTagSinglePayload(v35, 0LL, 1LL, v11);
      double v36 = v46;
      v34(v46, v14, v11);
      DisplayHint.init(idValue:displayValue:)(v35, v36);
      if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0) {
        uint64_t v21 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v21[2] + 1LL,  1LL,  (uint64_t)v21);
      }
      unint64_t v38 = v21[2];
      unint64_t v37 = v21[3];
      uint64_t v6 = v31;
      if (v38 >= v37 >> 1) {
        uint64_t v21 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v37 > 1,  v38 + 1,  1LL,  (uint64_t)v21);
      }
      v30 += 2;
      v21[2] = v38 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v31 + 32))( (unint64_t)v21 + ((*(unsigned __int8 *)(v31 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))
      + *(void *)(v31 + 72) * v38,
        v45,
        v48);
      uint64_t v14 = v44;
      (*(void (**)(char *, uint64_t))(v49 + 8))(v44, v11);
      --v29;
    }

    while (v29);
    swift_bridgeObjectRelease(v41);
  }

  return v21;
}

uint64_t type metadata accessor for ShortcutsLinkNLContextProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin30ShortcutsLinkNLContextProvider);
}

uint64_t OUTLINED_FUNCTION_0_26@<X0>(uint64_t a1@<X8>)
{
  return NLContextUpdate.dictationPromptTargetDomain.setter(0xD00000000000001FLL, (a1 - 32) | 0x8000000000000000LL);
}

void *specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_20;
  }
  uint64_t v6 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a1);
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v20))
  {
    uint64_t v22 = v5;
    unint64_t v23 = v5 & 0xC000000000000001LL;
    uint64_t v7 = 4LL;
    while (1)
    {
      id v8 = v23 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v5) : *(id *)(v5 + 8 * v7);
      uint64_t v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1LL)) {
        break;
      }
      uint64_t v10 = v6;
      uint64_t v11 = v8;
      uint64_t v12 = a3;
      id v13 = [v8 identifier];
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v16 = v15;

      a3 = v12;
      BOOL v17 = v14 == a2 && v16 == v12;
      if (v17)
      {
        swift_bridgeObjectRelease(v22);
        uint64_t v19 = v12;
LABEL_18:
        OUTLINED_FUNCTION_64_0();
        swift_bridgeObjectRelease(v19);
        return v11;
      }

      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, a2, v12, 0LL);
      swift_bridgeObjectRelease(v16);
      if ((v18 & 1) != 0)
      {
        uint64_t v19 = v22;
        goto LABEL_18;
      }

      ++v7;
      uint64_t v6 = v10;
      BOOL v17 = v9 == v10;
      uint64_t v5 = v22;
      if (v17)
      {
        OUTLINED_FUNCTION_64_0();
        swift_bridgeObjectRelease(v22);
        return 0LL;
      }
    }

    __break(1u);
LABEL_20:
    if (v5 < 0) {
      uint64_t v20 = v5;
    }
    else {
      uint64_t v20 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v5);
  }

  OUTLINED_FUNCTION_64_0();
  swift_bridgeObjectRelease(v5);
  return 0LL;
}

void *LNValue.localizedEnumCaseName(metadataProvider:enumIdentifier:bundleIdentifier:localeIdentifier:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = v5;
  id v13 = [v7 value];
  _bridgeAnyObjectToAny(_:)(v39);
  swift_unknownObjectRelease(v13);
  if (!swift_dynamicCast(v38, v39, (char *)&type metadata for Any + 8, &type metadata for String, 6LL))
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    uint64_t v20 = __swift_project_value_buffer(v19, (uint64_t)static Logger.voiceCommands);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (!OUTLINED_FUNCTION_20_9(v22)) {
      goto LABEL_9;
    }
    unint64_t v23 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    *(_WORD *)unint64_t v23 = 0;
    uint64_t v24 = "Failed to localize enum case name because value is not a String.";
LABEL_8:
    _os_log_impl(&dword_0, v21, (os_log_type_t)a1, v24, v23, 2u);
    swift_slowDealloc(v23, -1LL, -1LL);
LABEL_9:

    return 0LL;
  }

  uint64_t v40 = a2;
  uint64_t v14 = v38[0];
  uint64_t v15 = v38[1];
  uint64_t v16 = a1[3];
  uint64_t v17 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v16);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 16))(a4, a5, v16, v17);
  if (!v6)
  {
    a1 = (void *)v18;
    swift_bridgeObjectRetain(a3);
    uint64_t v26 = specialized Sequence.first(where:)((unint64_t)a1, v40, a3);
    swift_bridgeObjectRelease(a1);
    if (v26)
    {
      a1 = [v26 cases];

      unint64_t v27 = type metadata accessor for LNEnumCaseMetadata();
      unint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, v27);

      swift_bridgeObjectRetain(v15);
      uint64_t v29 = specialized Sequence.first(where:)(v28, v14, v15);
      OUTLINED_FUNCTION_64_0();
      swift_bridgeObjectRelease(v28);
      if (v29)
      {
        id v30 = v29;
        id v31 = [v30 displayRepresentation];
        id v32 = [v31 title];

        NSString v33 = String._bridgeToObjectiveC()();
        id v34 = [v32 localizedStringForLocaleIdentifier:v33];

        a1 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        return a1;
      }
    }

    else
    {
      OUTLINED_FUNCTION_64_0();
    }

    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v35 = type metadata accessor for Logger(0LL);
    uint64_t v36 = __swift_project_value_buffer(v35, (uint64_t)static Logger.voiceCommands);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    if (!OUTLINED_FUNCTION_20_9(v37)) {
      goto LABEL_9;
    }
    unint64_t v23 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    *(_WORD *)unint64_t v23 = 0;
    uint64_t v24 = "Failed to find matching enum case.";
    goto LABEL_8;
  }

  OUTLINED_FUNCTION_64_0();
  return a1;
}

unint64_t type metadata accessor for LNEnumCaseMetadata()
{
  unint64_t result = lazy cache variable for type metadata for LNEnumCaseMetadata;
  if (!lazy cache variable for type metadata for LNEnumCaseMetadata)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___LNEnumCaseMetadata);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNEnumCaseMetadata);
  }

  return result;
}

uint64_t static InputUtils.getBool(from:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v3, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v4 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_46_10(v5);
    OUTLINED_FUNCTION_47_1(&dword_0, v0, v1, "#InputUtils getBool", v2);
    OUTLINED_FUNCTION_1_0((uint64_t)v2);
  }

  if (one-time initialization token for voiceCommandConfirmationNode != -1) {
    swift_once( &one-time initialization token for voiceCommandConfirmationNode,  one-time initialization function for voiceCommandConfirmationNode);
  }
  OUTLINED_FUNCTION_103();
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent,  type metadata accessor for VoiceCommandsNLIntent,  (uint64_t)&protocol conformance descriptor for VoiceCommandsNLIntent);
  OUTLINED_FUNCTION_31_16(v6, v7, v6);
  return 0x2000001u >> (8 * v9);
}

void static InputUtils.getDouble(from:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v7 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v7, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v8 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_21_6(v8))
  {
    char v9 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    *(_WORD *)char v9 = 0;
    OUTLINED_FUNCTION_47_1(&dword_0, v1, v3, "#InputUtils getDouble", v9);
    OUTLINED_FUNCTION_1_0((uint64_t)v9);
  }

  if (one-time initialization token for voiceCommandScalarNode != -1) {
    swift_once( &one-time initialization token for voiceCommandScalarNode,  one-time initialization function for voiceCommandScalarNode);
  }
  OUTLINED_FUNCTION_103();
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent,  type metadata accessor for VoiceCommandsNLIntent,  (uint64_t)&protocol conformance descriptor for VoiceCommandsNLIntent);
  OUTLINED_FUNCTION_43_15(v10);
  uint64_t v11 = OUTLINED_FUNCTION_41_9(v2, 1LL, v0);
  if (v12)
  {
    OUTLINED_FUNCTION_81_7( v11,  &demangling cache variable for type metadata for Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>?);
  }

  else
  {
    OUTLINED_FUNCTION_30_16(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
    OUTLINED_FUNCTION_59_7();
    OUTLINED_FUNCTION_56_17();
  }

  OUTLINED_FUNCTION_8_2();
}

uint64_t static InputUtils.getMeasurement(from:)(uint64_t a1)
{
  uint64_t v6 = OUTLINED_FUNCTION_103();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_27_18();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v8 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.voiceCommands);
  uint64_t v9 = outlined init with copy of VoiceCommandsNLIntent(a1, v2);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_72_3(v11))
  {
    char v12 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v13 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v27 = v13;
    *(_DWORD *)char v12 = 136315138;
    lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent,  type metadata accessor for VoiceCommandsNLIntent,  (uint64_t)&protocol conformance descriptor for VoiceCommandsNLIntent);
    uint64_t v15 = NLIntentWrapper.description.getter(v6, v14);
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v12 + 4);
    OUTLINED_FUNCTION_20();
    outlined destroy of VoiceCommandsNLIntent(v2);
    OUTLINED_FUNCTION_31_2(&dword_0, v10, v3, "#InputUtils getMeasurement %s", v12);
    OUTLINED_FUNCTION_30_3(v13, v17, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v13);
    OUTLINED_FUNCTION_1_0((uint64_t)v12);
  }

  else
  {
    outlined destroy of VoiceCommandsNLIntent(v2);
  }

  if (one-time initialization token for voiceCommandScalarNode != -1) {
    swift_once( &one-time initialization token for voiceCommandScalarNode,  one-time initialization function for voiceCommandScalarNode);
  }
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent,  type metadata accessor for VoiceCommandsNLIntent,  (uint64_t)&protocol conformance descriptor for VoiceCommandsNLIntent);
  uint64_t v18 = OUTLINED_FUNCTION_129();
  OUTLINED_FUNCTION_85_4(v18, v19);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>);
  OUTLINED_FUNCTION_41_9(v1, 1LL, v20);
  if (v21)
  {
    outlined destroy of Any?( v1,  &demangling cache variable for type metadata for Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>?);
    uint64_t v22 = 0LL;
    char v23 = 1;
  }

  else
  {
    Scalar.value.getter(v20);
    uint64_t v22 = v27;
    char v23 = v28;
    OUTLINED_FUNCTION_35_3(v1, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8LL));
  }

  if (one-time initialization token for voiceCommandUnitNode != -1) {
    swift_once( &one-time initialization token for voiceCommandUnitNode,  one-time initialization function for voiceCommandUnitNode);
  }
  OUTLINED_FUNCTION_85_4(static VoiceCommandsNLIntent.voiceCommandUnitNode, v6);
  if (v27 == 88)
  {
    id v24 = 0LL;
    if ((v23 & 1) == 0) {
      return v22;
    }
  }

  else
  {
    id v24 = VoiceCommandsNLIntent.VoiceCommandUnit.unitType.getter(v27);
    if ((v23 & 1) == 0) {
      return v22;
    }
  }

  return 0LL;
}

NSAttributedString static InputUtils.getAttributedText(from:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v3, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v4 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_46_10(v5);
    OUTLINED_FUNCTION_47_1(&dword_0, v0, v1, "#InputUtils getAttributedText", v2);
    OUTLINED_FUNCTION_1_0((uint64_t)v2);
  }

  if (one-time initialization token for voiceCommandTextNode != -1) {
    swift_once( &one-time initialization token for voiceCommandTextNode,  one-time initialization function for voiceCommandTextNode);
  }
  OUTLINED_FUNCTION_103();
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent,  type metadata accessor for VoiceCommandsNLIntent,  (uint64_t)&protocol conformance descriptor for VoiceCommandsNLIntent);
  OUTLINED_FUNCTION_31_16(v6, v7, v6);
  if (!v9._object) {
    return 0LL;
  }
  type metadata accessor for NSAttributedString();
  return NSAttributedString.__allocating_init(string:)(v9);
}

uint64_t static InputUtils.getDate(dateTimeValue:locationProviding:deviceState:aceServiceInvoker:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v5[8] = v6;
  v5[9] = OUTLINED_FUNCTION_4_0(*(void *)(v6 - 8));
  v5[10] = OUTLINED_FUNCTION_11_0();
  v5[11] = OUTLINED_FUNCTION_11_0();
  uint64_t v7 = type metadata accessor for Calendar.Identifier(0LL);
  v5[12] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[13] = v8;
  v5[14] = OUTLINED_FUNCTION_9_0(v8);
  uint64_t v9 = type metadata accessor for Calendar(0LL);
  v5[15] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[16] = v10;
  v5[17] = OUTLINED_FUNCTION_9_0(v10);
  uint64_t v11 = OUTLINED_FUNCTION_74_8();
  v5[18] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[19] = v12;
  v5[20] = OUTLINED_FUNCTION_9_0(v12);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  v5[21] = OUTLINED_FUNCTION_4_0(*(void *)(v13 - 8));
  v5[22] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t static InputUtils.getDate(dateTimeValue:locationProviding:deviceState:aceServiceInvoker:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v4 = OUTLINED_FUNCTION_48();
  v3[23] = __swift_project_value_buffer(v4, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_9_5();
  os_log_type_t v5 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_45_0(v5))
  {
    uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_26_1(v6);
    OUTLINED_FUNCTION_47_1(&dword_0, v1, v0, "#InputUtils getDate", v2);
    OUTLINED_FUNCTION_1_0((uint64_t)v2);
  }

  uint64_t v7 = (uint64_t **)swift_task_alloc(dword_21900C);
  _BYTE v3[24] = (uint64_t)v7;
  *uint64_t v7 = v3;
  v7[1] = (uint64_t *)static InputUtils.getDate(dateTimeValue:locationProviding:deviceState:aceServiceInvoker:);
  return static InputUtils.getDateComponents(dateTimeValue:locationProviding:deviceState:aceServiceInvoker:)( v3[22],  v3[4],  v3[5],  v3[6],  v3[7]);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_3_0(*(void *)(*(void *)v0 + 192LL));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_s *v16;
  os_log_type_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 144);
  outlined init with copy of AppDisplayInfo?( *(void *)(v0 + 176),  v1,  &demangling cache variable for type metadata for DateComponents?);
  OUTLINED_FUNCTION_41_9(v1, 1LL, v2);
  if (v3)
  {
    uint64_t v4 = *(void *)(v0 + 168);
    os_log_type_t v5 = *(void *)(v0 + 24);
    outlined destroy of Any?(*(void *)(v0 + 176), &demangling cache variable for type metadata for DateComponents?);
    outlined destroy of Any?(v4, &demangling cache variable for type metadata for DateComponents?);
    uint64_t v6 = type metadata accessor for Date(0LL);
    OUTLINED_FUNCTION_50_1(v5, v7, v8, v6);
  }

  else
  {
    uint64_t v9 = *(void *)(v0 + 160);
    uint64_t v11 = *(void *)(v0 + 104);
    uint64_t v10 = *(void *)(v0 + 112);
    uint64_t v13 = *(void *)(v0 + 88);
    uint64_t v12 = *(void *)(v0 + 96);
    uint64_t v14 = *(void *)(v0 + 80);
    (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 152) + 32LL))( v9,  *(void *)(v0 + 168),  *(void *)(v0 + 144));
    (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))( v10,  enum case for Calendar.Identifier.gregorian(_:),  v12);
    Calendar.init(identifier:)(v10);
    OUTLINED_FUNCTION_17_4(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
    Calendar.date(from:)(v9);
    outlined init with copy of AppDisplayInfo?(v13, v14, &demangling cache variable for type metadata for Date?);
    unint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    uint64_t v17 = static os_log_type_t.debug.getter();
    uint64_t v18 = OUTLINED_FUNCTION_72_3(v17);
    uint64_t v19 = *(void *)(v0 + 176);
    uint64_t v20 = *(void *)(v0 + 152);
    char v21 = *(void *)(v0 + 136);
    uint64_t v22 = *(void *)(v0 + 120);
    unint64_t v38 = *(void *)(v0 + 128);
    char v23 = *(void *)(v0 + 80);
    if (v18)
    {
      uint64_t v36 = *(void *)(v0 + 152);
      os_log_type_t v37 = *(void *)(v0 + 144);
      uint64_t v25 = *(void *)(v0 + 64);
      id v24 = *(void *)(v0 + 72);
      uint64_t v35 = *(void *)(v0 + 160);
      uint64_t v26 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      id v34 = v19;
      uint64_t v27 = OUTLINED_FUNCTION_38(32LL);
      unint64_t v39 = v27;
      *(_DWORD *)uint64_t v26 = 136315138;
      outlined init with copy of AppDisplayInfo?(v23, v24, &demangling cache variable for type metadata for Date?);
      char v28 = String.init<A>(describing:)(v24, v25);
      id v30 = v29;
      *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v26 + 4);
      swift_bridgeObjectRelease(v30);
      outlined destroy of Any?(v23, &demangling cache variable for type metadata for Date?);
      OUTLINED_FUNCTION_31_2(&dword_0, v16, (os_log_type_t)v14, "#InputUtils.getDate() returned %s", v26);
      OUTLINED_FUNCTION_30_3(v27, v31, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v27);
      OUTLINED_FUNCTION_1_0((uint64_t)v26);

      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v21, v22);
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
      id v32 = v34;
    }

    else
    {

      outlined destroy of Any?(v23, &demangling cache variable for type metadata for Date?);
      OUTLINED_FUNCTION_78_5(v21, *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
      OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
      id v32 = v19;
    }

    outlined destroy of Any?(v32, &demangling cache variable for type metadata for DateComponents?);
    outlined init with take of Date?(*(void *)(v0 + 88), *(void *)(v0 + 24));
  }

  swift_task_dealloc(*(void *)(v0 + 176));
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static InputUtils.getDateComponents(dateTimeValue:locationProviding:deviceState:aceServiceInvoker:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[25] = a4;
  v5[26] = a5;
  v5[23] = a2;
  v5[24] = a3;
  v5[22] = a1;
  uint64_t v6 = type metadata accessor for OSSignpostError(0LL);
  v5[27] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[28] = v7;
  v5[29] = OUTLINED_FUNCTION_9_0(v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<DateTime>?);
  v5[30] = OUTLINED_FUNCTION_4_0(*(void *)(v8 - 8));
  v5[31] = OUTLINED_FUNCTION_11_0();
  uint64_t v9 = type metadata accessor for DateTimeResolver(0LL);
  _BYTE v5[32] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[33] = v10;
  v5[34] = OUTLINED_FUNCTION_9_0(v10);
  uint64_t v11 = type metadata accessor for DateTimeResolutionSpec.DateTimeConvergenceStrategy(0LL);
  v5[35] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[36] = v12;
  v5[37] = OUTLINED_FUNCTION_9_0(v12);
  uint64_t v13 = type metadata accessor for DateTimeResolutionSpec.ExpandToType(0LL);
  v5[38] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v5[39] = v14;
  _BYTE v5[40] = OUTLINED_FUNCTION_9_0(v14);
  uint64_t v15 = type metadata accessor for DateTimeResolutionSpec(0LL);
  v5[41] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v5[42] = v16;
  v5[43] = OUTLINED_FUNCTION_9_0(v16);
  uint64_t v17 = type metadata accessor for Date(0LL);
  v5[44] = OUTLINED_FUNCTION_9_0(*(void *)(v17 - 8));
  uint64_t v18 = type metadata accessor for TimeZone(0LL);
  v5[45] = OUTLINED_FUNCTION_9_0(*(void *)(v18 - 8));
  uint64_t v19 = type metadata accessor for DateTimeResolutionContext.Hemisphere(0LL);
  v5[46] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v5[47] = v20;
  v5[48] = OUTLINED_FUNCTION_4_0(v20);
  v5[49] = OUTLINED_FUNCTION_11_0();
  v5[50] = OUTLINED_FUNCTION_11_0();
  uint64_t v21 = type metadata accessor for Locale(0LL);
  v5[51] = v21;
  uint64_t v22 = *(void *)(v21 - 8);
  v5[52] = v22;
  v5[53] = OUTLINED_FUNCTION_4_0(v22);
  v5[54] = OUTLINED_FUNCTION_11_0();
  v5[55] = OUTLINED_FUNCTION_11_0();
  v5[56] = OUTLINED_FUNCTION_11_0();
  uint64_t v23 = type metadata accessor for Calendar.Identifier(0LL);
  v5[57] = v23;
  uint64_t v24 = *(void *)(v23 - 8);
  v5[58] = v24;
  v5[59] = OUTLINED_FUNCTION_9_0(v24);
  uint64_t v25 = type metadata accessor for Calendar(0LL);
  v5[60] = v25;
  uint64_t v26 = *(void *)(v25 - 8);
  v5[61] = v26;
  v5[62] = OUTLINED_FUNCTION_4_0(v26);
  v5[63] = OUTLINED_FUNCTION_11_0();
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.DateTimeValue?);
  v5[64] = OUTLINED_FUNCTION_9_0(*(void *)(v27 - 8));
  uint64_t v28 = type metadata accessor for TerminalElement.DateTimeValue(0LL);
  v5[65] = v28;
  uint64_t v29 = *(void *)(v28 - 8);
  v5[66] = v29;
  v5[67] = OUTLINED_FUNCTION_9_0(v29);
  uint64_t v30 = type metadata accessor for OSSignpostID(0LL);
  v5[68] = v30;
  uint64_t v31 = *(void *)(v30 - 8);
  v5[69] = v31;
  v5[70] = OUTLINED_FUNCTION_4_0(v31);
  v5[71] = OUTLINED_FUNCTION_11_0();
  v5[72] = OUTLINED_FUNCTION_11_0();
  uint64_t v32 = type metadata accessor for OSSignposter(0LL);
  v5[73] = v32;
  uint64_t v33 = *(void *)(v32 - 8);
  v5[74] = v33;
  v5[75] = OUTLINED_FUNCTION_9_0(v33);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t static InputUtils.getDateComponents(dateTimeValue:locationProviding:deviceState:aceServiceInvoker:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = *(void *)(v0 + 600);
  uint64_t v4 = *(void *)(v0 + 592);
  uint64_t v5 = *(void *)(v0 + 584);
  uint64_t v6 = __swift_project_value_buffer(v5, (uint64_t)static Signposter.voiceCommands);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  uint64_t v8 = OSSignposter.logHandle.getter(v7);
  uint64_t v9 = OSSignpostID.init(log:)(v8);
  uint64_t v10 = (os_log_s *)OSSignposter.logHandle.getter(v9);
  os_signpost_type_t v11 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    uint64_t v12 = (_WORD *)OUTLINED_FUNCTION_57_1();
    uint64_t v13 = OUTLINED_FUNCTION_43_5(v12);
    os_signpost_id_t v14 = OSSignpostID.rawValue.getter(v13);
    _os_signpost_emit_with_name_impl(&dword_0, v10, v11, v14, "InputUtilsGetDateComponents", "", (uint8_t *)v4, 2u);
    OUTLINED_FUNCTION_1_0(v4);
  }

  uint64_t v15 = *(void *)(v0 + 576);
  uint64_t v16 = *(void *)(v0 + 568);
  uint64_t v17 = *(void *)(v0 + 552);
  uint64_t v18 = *(uint8_t **)(v0 + 544);

  OUTLINED_FUNCTION_80_4(v16, v15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 16));
  uint64_t v19 = type metadata accessor for OSSignpostIntervalState(0LL);
  uint64_t v20 = OUTLINED_FUNCTION_51(v19);
  uint64_t v21 = v16;
  uint64_t v22 = (os_log_s *)v20;
  *(void *)(v0 + 60__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OSSignpostIntervalState.init(id:isOpen:)(v21, 1LL);
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8);
  *(void *)(v0 + 616) = v23;
  OUTLINED_FUNCTION_48_12(v23);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v24 = OUTLINED_FUNCTION_48();
  *(void *)(v0 + 62__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = __swift_project_value_buffer(v24, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_9_5();
  os_log_type_t v25 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v25))
  {
    uint64_t v26 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_43_5(v26);
    OUTLINED_FUNCTION_47_1(&dword_0, v22, (os_log_type_t)v15, "#InputUtils getDateComponents", v18);
    OUTLINED_FUNCTION_1_0((uint64_t)v18);
  }

  uint64_t v27 = *(void *)(v0 + 520);
  uint64_t v28 = *(void *)(v0 + 512);
  uint64_t v29 = *(void *)(v0 + 184);

  outlined init with copy of AppDisplayInfo?( v29,  v28,  &demangling cache variable for type metadata for TerminalElement.DateTimeValue?);
  OUTLINED_FUNCTION_41_9(v28, 1LL, v27);
  if (v30)
  {
    uint64_t v31 = *(void *)(v0 + 512);
    uint64_t v32 = *(void *)(v0 + 176);
    (*(void (**)(void, void))(*(void *)(v0 + 592) + 8LL))(*(void *)(v0 + 600), *(void *)(v0 + 584));
    swift_release();
    outlined destroy of Any?(v31, &demangling cache variable for type metadata for TerminalElement.DateTimeValue?);
    uint64_t v33 = OUTLINED_FUNCTION_74_8();
    OUTLINED_FUNCTION_50_1(v32, v34, v35, v33);
    uint64_t v36 = OUTLINED_FUNCTION_22_15();
    uint64_t v55 = v38;
    uint64_t v56 = v37;
    uint64_t v57 = *(void *)(v0 + 424);
    uint64_t v58 = *(void *)(v0 + 400);
    uint64_t v59 = *(void *)(v0 + 392);
    uint64_t v60 = *(void *)(v0 + 384);
    uint64_t v61 = *(void *)(v0 + 360);
    uint64_t v62 = *(void *)(v0 + 352);
    uint64_t v63 = *(void *)(v0 + 344);
    uint64_t v64 = *(void *)(v0 + 320);
    uint64_t v66 = *(void *)(v0 + 296);
    uint64_t v68 = *(void *)(v0 + 272);
    uint64_t v69 = *(void *)(v0 + 248);
    uint64_t v71 = *(void *)(v0 + 240);
    uint64_t v73 = *(void *)(v0 + 232);
    swift_task_dealloc(v36);
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_29_0();
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_33_0();
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v66);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v71);
    swift_task_dealloc(v73);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v41 = *(void *)(v0 + 464);
    uint64_t v40 = *(void *)(v0 + 472);
    uint64_t v42 = *(void *)(v0 + 456);
    uint64_t v65 = (void *)(v0 + 16);
    uint64_t v67 = *(void *)(v0 + 376);
    uint64_t v70 = *(void *)(v0 + 400);
    unint64_t v43 = *(void **)(v0 + 200);
    uint64_t v72 = *(void *)(v0 + 192);
    uint64_t v74 = *(void *)(v0 + 208);
    (*(void (**)(void, void, void))(*(void *)(v0 + 528) + 32LL))( *(void *)(v0 + 536),  *(void *)(v0 + 512),  *(void *)(v0 + 520));
    (*(void (**)(uint64_t, void, uint64_t))(v41 + 104))( v40,  enum case for Calendar.Identifier.gregorian(_:),  v42);
    Calendar.init(identifier:)(v40);
    OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8));
    __swift_project_boxed_opaque_existential_1(v43, v43[3]);
    uint64_t v44 = OUTLINED_FUNCTION_129();
    uint64_t v46 = dispatch thunk of DeviceState.siriLocale.getter(v44, v45);
    *(void *)(v0 + 63__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = TerminalElement.DateTimeValue.toDateTime()(v46);
    *(_DWORD *)(v0 + 66__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = enum case for DateTimeResolutionContext.Hemisphere.north(_:);
    id v47 = *(void (**)(uint64_t))(v67 + 104);
    *(void *)(v0 + 640) = v47;
    v47(v70);
    outlined init with copy of AppDisplayInfo?( v72,  v0 + 56,  &demangling cache variable for type metadata for LocationProviding?);
    outlined init with copy of DeviceState(v74, v0 + 96);
    if (*(void *)(v0 + 80))
    {
      __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 96));
      outlined init with take of AceServiceInvokerAsync((__int128 *)(v0 + 56), (uint64_t)v65);
    }

    else
    {
      outlined init with copy of DeviceState(v0 + 96, v0 + 136);
      uint64_t v48 = type metadata accessor for LocationProvider();
      uint64_t v49 = swift_allocObject(v48, 64LL, 7LL);
      OUTLINED_FUNCTION_60_12(v49);
      outlined init with take of AceServiceInvokerAsync((__int128 *)(v0 + 136), v50);
      *(void *)(v0 + 40) = v48;
      *(void *)(v0 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = &protocol witness table for LocationProvider;
      *(void *)(v0 + 16) = v49;
      __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 96));
      outlined destroy of Any?(v0 + 56, &demangling cache variable for type metadata for LocationProviding?);
    }

    uint64_t v51 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1(v65, *(void *)(v0 + 40));
    uint64_t v52 = *(int **)(v51 + 8);
    uint64_t v75 = (uint64_t (*)(uint64_t))((char *)v52 + *v52);
    os_log_type_t v53 = (void *)swift_task_alloc(v52[1]);
    *(void *)(v0 + 64__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v53;
    *os_log_type_t v53 = v0;
    v53[1] = static InputUtils.getDateComponents(dateTimeValue:locationProviding:deviceState:aceServiceInvoker:);
    uint64_t v54 = OUTLINED_FUNCTION_129();
    return v75(v54);
  }

uint64_t static InputUtils.getDateComponents(dateTimeValue:locationProviding:deviceState:aceServiceInvoker:)( uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 648LL);
  *(void *)(*(void *)v1 + 656LL) = a1;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  os_log_type_t v1;
  uint8_t *v2;
  uint64_t v3;
  void *v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  os_log_s *v17;
  os_log_type_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  os_log_s *v87;
  uint64_t v88;
  os_signpost_type_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint8_t *v136;
  os_signpost_id_t v137;
  uint64_t (*v138)(uint64_t, uint64_t);
  uint64_t v139;
  uint64_t v140;
  os_log_s *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v4 = *(void **)(v3 + 656);
  if (v4)
  {
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 640);
    uint64_t v6 = *(_DWORD *)(v3 + 664);
    uint64_t v8 = *(void *)(v3 + 392);
    uint64_t v7 = *(void *)(v3 + 400);
    uint64_t v9 = *(void *)(v3 + 368);
    uint64_t v10 = *(void *)(v3 + 376);
    OUTLINED_FUNCTION_4(a1, "lat");
    uint64_t v12 = v11;

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v7, v9);
    if (v12 <= 0.0) {
      uint64_t v13 = enum case for DateTimeResolutionContext.Hemisphere.south(_:);
    }
    else {
      uint64_t v13 = v6;
    }
    v5(v8, v13, v9);
    os_signpost_id_t v14 = OUTLINED_FUNCTION_129();
    OUTLINED_FUNCTION_80_4(v14, v15, v16);
  }

  else
  {
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(a1);
    uint64_t v18 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_45_0(v18))
    {
      uint64_t v19 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_26_1(v19);
      OUTLINED_FUNCTION_47_1(&dword_0, v17, v1, "Could not get location, setting hemisphere to north", v2);
      OUTLINED_FUNCTION_1_0((uint64_t)v2);
    }
  }

  v330 = *(void *)(v3 + 632);
  v247 = *(void *)(v3 + 488);
  v260 = *(void *)(v3 + 496);
  v273 = *(void *)(v3 + 480);
  v281 = *(void *)(v3 + 440);
  v289 = *(void *)(v3 + 504);
  uint64_t v20 = *(void *)(v3 + 424);
  uint64_t v21 = *(void *)(v3 + 432);
  uint64_t v23 = *(void *)(v3 + 376);
  uint64_t v22 = *(void *)(v3 + 384);
  uint64_t v24 = *(void *)(v3 + 360);
  os_log_type_t v25 = *(void *)(v3 + 368);
  v224 = *(void *)(v3 + 400);
  v235 = *(void *)(v3 + 352);
  v323 = *(void *)(v3 + 344);
  v297 = *(void *)(v3 + 312);
  v302 = *(void *)(v3 + 320);
  v307 = *(void *)(v3 + 304);
  v312 = *(void *)(v3 + 288);
  v317 = *(void *)(v3 + 296);
  v320 = *(void *)(v3 + 280);
  OUTLINED_FUNCTION_50_14(v281);
  OUTLINED_FUNCTION_50_14(v21);
  uint64_t v26 = OUTLINED_FUNCTION_50_14(v20);
  static TimeZone.current.getter(v26);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v22, v224, v25);
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v247 + 16))(v260, v289, v273);
  static Date.now.getter(v27);
  uint64_t v28 = type metadata accessor for DateTimeResolutionContext(0LL);
  OUTLINED_FUNCTION_51(v28);
  uint64_t v29 = DateTimeResolutionContext.init(with:regionFormat:regionAwareLanguage:timeZone:hemisphere:calendar:date:)( v281,  v21,  v20,  v24,  v22,  v260,  v235);
  (*(void (**)(uint64_t, void, uint64_t))(v297 + 104))( v302,  enum case for DateTimeResolutionSpec.ExpandToType.pointInTime(_:),  v307);
  (*(void (**)(uint64_t, void, uint64_t))(v312 + 104))( v317,  enum case for DateTimeResolutionSpec.DateTimeConvergenceStrategy.future(_:),  v320);
  char v30 = type metadata accessor for DateTime.DateTimeRange.DefinedDateTimeRange(0LL);
  uint64_t v31 = type metadata accessor for DateTime(0LL);
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type DateTime.DateTimeRange.DefinedDateTimeRange and conformance DateTime.DateTimeRange.DefinedDateTimeRange,  (uint64_t (*)(uint64_t))&type metadata accessor for DateTime.DateTimeRange.DefinedDateTimeRange,  (uint64_t)&protocol conformance descriptor for DateTime.DateTimeRange.DefinedDateTimeRange);
  uint64_t v33 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v30, v31, v32);
  uint64_t v34 = DateTimeResolutionSpec.init(expandToType:dateTimeConvergenceStrategy:overridesForDefinedDateTimeRanges:inferDurationAsInterval:witchingHourRoundOffEnabled:convergeToOperatingHours:)( v302,  v317,  v33,  1LL,  0LL,  1LL);
  DateTimeResolver.init()(v34);
  DateTimeResolver.makeRecommendation(value:context:spec:)(v330, v29, v323);
  uint64_t v36 = *(void *)(v3 + 240);
  uint64_t v35 = *(void *)(v3 + 248);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<DateTime>);
  __swift_storeEnumTagSinglePayload(v35, 0LL, 1LL, v37);
  uint64_t v38 = OUTLINED_FUNCTION_129();
  outlined init with copy of AppDisplayInfo?(v38, v39, v40);
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<DateTime>);
  OUTLINED_FUNCTION_41_9(v36, 1LL, v41);
  if (v42)
  {
    unint64_t v43 = *(void *)(v3 + 608);
    OUTLINED_FUNCTION_7_20();
    v236 = *(void *)(v3 + 376);
    v248 = *(void *)(v3 + 368);
    v261 = v44;
    uint64_t v45 = v29;
    uint64_t v46 = *(void *)(v3 + 336);
    id v47 = *(void *)(v3 + 344);
    uint64_t v48 = *(void *)(v3 + 264);
    uint64_t v49 = *(void *)(v3 + 272);
    uint64_t v50 = *(void *)(v3 + 248);
    uint64_t v51 = *(void *)(v3 + 256);
    OUTLINED_FUNCTION_95_1(v45);
    swift_release();
    swift_release();
    uint64_t v52 = &demangling cache variable for type metadata for Recommendation<DateTime>?;
    outlined destroy of Any?(v50, &demangling cache variable for type metadata for Recommendation<DateTime>?);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v49, v51);
    os_log_type_t v53 = OUTLINED_FUNCTION_35_3(v47, *(uint64_t (**)(uint64_t, uint64_t))(v46 + 8));
    uint64_t v61 = OUTLINED_FUNCTION_37_17( v53,  v54,  v55,  v56,  v57,  v58,  v59,  v60,  v174,  v183,  v193,  v203,  v213,  v224,  v236,  v248,  v261);
    uint64_t v69 = OUTLINED_FUNCTION_36_17( v61,  v62,  v63,  v64,  v65,  v66,  v67,  v68,  v175,  v184,  v194,  v204,  v214,  v225,  v237,  v249,  v262,  v273,  v281,  v289);
    __int128 v77 = OUTLINED_FUNCTION_35_21( v69,  v70,  v71,  v72,  v73,  v74,  v75,  v76,  v176,  v185,  v195,  v205,  v215,  v226,  v238,  v250,  v263,  v274,  v282,  v290,  v297,  v302,  v307);
    OUTLINED_FUNCTION_73_6( v77,  v78,  v79,  v80,  v81,  v82,  v83,  v84,  v177,  v186,  v196,  v206,  v216,  v227,  v239,  v251,  v264,  v275,  v283,  v291,  v298,  v303,  v308,  v312,  v317,  v320);
    OUTLINED_FUNCTION_71_7();
    outlined destroy of Any?(v313, &demangling cache variable for type metadata for Recommendation<DateTime>?);
LABEL_17:
    v132 = *(void *)(v3 + 176);
    v133 = OUTLINED_FUNCTION_74_8();
    v134 = v132;
    v135 = 1LL;
    goto LABEL_21;
  }

  uint64_t v85 = *(void *)(v41 - 8);
  if ((*(unsigned int (**)(void, uint64_t))(v85 + 88))(*(void *)(v3 + 240), v41) != enum case for Recommendation.confident<A>(_:))
  {
    unint64_t v43 = *(void *)(v3 + 632);
    v217 = *(void *)(v3 + 608);
    OUTLINED_FUNCTION_7_20();
    v252 = *(void *)(v3 + 368);
    v265 = v95;
    uint64_t v96 = *(void *)(v3 + 336);
    v228 = *(void *)(v3 + 344);
    v240 = *(void *)(v3 + 376);
    uint64_t v52 = *(uint64_t **)(v3 + 328);
    uint64_t v97 = *(void *)(v3 + 264);
    uint64_t v98 = v29;
    uint64_t v99 = *(void *)(v3 + 248);
    OUTLINED_FUNCTION_95_1(v98);
    swift_release();
    swift_release();
    outlined destroy of Any?(v99, &demangling cache variable for type metadata for Recommendation<DateTime>?);
    OUTLINED_FUNCTION_48_12(*(uint64_t (**)(uint64_t, uint64_t))(v97 + 8));
    uint64_t v100 = OUTLINED_FUNCTION_78_5(v228, *(uint64_t (**)(uint64_t, uint64_t))(v96 + 8));
    uint64_t v108 = OUTLINED_FUNCTION_37_17( v100,  v101,  v102,  v103,  v104,  v105,  v106,  v107,  v174,  v183,  v193,  v203,  v217,  v228,  v240,  v252,  v265);
    uint64_t v116 = OUTLINED_FUNCTION_36_17( v108,  v109,  v110,  v111,  v112,  v113,  v114,  v115,  v178,  v187,  v197,  v207,  v218,  v229,  v241,  v253,  v266,  v273,  v281,  v289);
    uint64_t v124 = OUTLINED_FUNCTION_35_21( v116,  v117,  v118,  v119,  v120,  v121,  v122,  v123,  v179,  v188,  v198,  v208,  v219,  v230,  v242,  v254,  v267,  v276,  v284,  v292,  v297,  v302,  v307);
    OUTLINED_FUNCTION_73_6( v124,  v125,  v126,  v127,  v128,  v129,  v130,  v131,  v180,  v189,  v199,  v209,  v220,  v231,  v243,  v255,  v268,  v277,  v285,  v293,  v299,  v304,  v309,  v312,  v317,  v320);
    OUTLINED_FUNCTION_71_7();
    OUTLINED_FUNCTION_35_3(v314, *(uint64_t (**)(uint64_t, uint64_t))(v85 + 8));
    goto LABEL_17;
  }

  uint64_t v86 = OUTLINED_FUNCTION_35_3(*(void *)(v3 + 240), *(uint64_t (**)(uint64_t, uint64_t))(v85 + 96));
  uint64_t v87 = (os_log_s *)OSSignposter.logHandle.getter(v86);
  uint64_t v88 = OSSignpostIntervalState.signpostID.getter();
  uint64_t v89 = static os_signpost_type_t.end.getter(v88);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    uint64_t v91 = *(void *)(v3 + 224);
    uint64_t v90 = *(void *)(v3 + 232);
    uint64_t v92 = *(void *)(v3 + 216);
    uint64_t v93 = swift_retain(*(void *)(v3 + 608));
    checkForErrorAndConsumeState(state:)(v93);
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v91 + 88))(v90, v92) == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v94 = "[Error] Interval already ended";
    }

    else
    {
      (*(void (**)(void, void))(*(void *)(v3 + 224) + 8LL))( *(void *)(v3 + 232),  *(void *)(v3 + 216));
      uint64_t v94 = "";
    }

    v136 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    *(_WORD *)v136 = 0;
    v137 = OSSignpostID.rawValue.getter(v136);
    _os_signpost_emit_with_name_impl(&dword_0, v87, v89, v137, "InputUtilsGetDateComponents", v94, v136, 2u);
    OUTLINED_FUNCTION_1_0((uint64_t)v136);
  }

  v190 = *(void *)(v3 + 632);
  v138 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 616);
  v232 = *(void *)(v3 + 608);
  v324 = *(void *)(v3 + 592);
  v326 = *(void *)(v3 + 584);
  v328 = *(void *)(v3 + 600);
  v139 = *(void *)(v3 + 560);
  v140 = *(void *)(v3 + 544);
  v318 = *(void *)(v3 + 520);
  v321 = *(void *)(v3 + 536);
  v310 = *(void *)(v3 + 504);
  v315 = *(void *)(v3 + 528);
  v300 = *(void *)(v3 + 488);
  v305 = *(void *)(v3 + 480);
  v286 = *(void *)(v3 + 408);
  v294 = *(void *)(v3 + 448);
  v269 = *(void *)(v3 + 400);
  v278 = *(void *)(v3 + 416);
  v244 = *(void *)(v3 + 376);
  v256 = *(void *)(v3 + 368);
  v200 = *(void *)(v3 + 336);
  v210 = *(void *)(v3 + 328);
  v221 = *(void *)(v3 + 344);
  v141 = v87;
  uint64_t v52 = *(uint64_t **)(v3 + 264);
  v142 = *(void *)(v3 + 272);
  unint64_t v43 = *(void *)(v3 + 256);
  v143 = *(void *)(v3 + 176);

  v144 = v138(v139, v140);
  dispatch thunk of DateTime.dateComponents.getter(v144);
  swift_release();
  swift_release();
  swift_release();
  v145 = swift_release();
  OUTLINED_FUNCTION_81_7(v145, &demangling cache variable for type metadata for Recommendation<DateTime>?);
  ((void (*)(uint64_t, uint64_t))v52[1])(v142, v43);
  v146 = (*(uint64_t (**)(uint64_t, uint64_t))(v200 + 8))(v221, v210);
  v154 = OUTLINED_FUNCTION_37_17( v146,  v147,  v148,  v149,  v150,  v151,  v152,  v153,  v174,  v190,  v200,  v210,  v221,  v232,  v244,  v256,  v269);
  v162 = OUTLINED_FUNCTION_36_17( v154,  v155,  v156,  v157,  v158,  v159,  v160,  v161,  v181,  v191,  v201,  v211,  v222,  v233,  v245,  v257,  v270,  v278,  v286,  v294);
  OUTLINED_FUNCTION_35_21( v162,  v163,  v164,  v165,  v166,  v167,  v168,  v169,  v182,  v192,  v202,  v212,  v223,  v234,  v246,  v258,  v271,  v279,  v287,  v295,  v300,  v305,  v310);
  (*(void (**)(uint64_t, uint64_t))(v315 + 8))(v321, v318);
  (*(void (**)(uint64_t, uint64_t))(v324 + 8))(v328, v326);
  v133 = OUTLINED_FUNCTION_74_8();
  v134 = v143;
  v135 = 0LL;
LABEL_21:
  __swift_storeEnumTagSinglePayload(v134, v135, 1LL, v133);
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v3 + 16));
  v170 = OUTLINED_FUNCTION_22_15();
  v259 = v172;
  v272 = v171;
  v280 = *(void *)(v3 + 424);
  v288 = *(void *)(v3 + 400);
  v296 = *(void *)(v3 + 392);
  v301 = *(void *)(v3 + 384);
  v306 = *(void *)(v3 + 360);
  v311 = *(void *)(v3 + 352);
  v316 = *(void *)(v3 + 344);
  v319 = *(void *)(v3 + 320);
  v322 = *(void *)(v3 + 296);
  v325 = *(void *)(v3 + 272);
  v327 = *(void *)(v3 + 248);
  v329 = *(void *)(v3 + 240);
  v331 = *(void *)(v3 + 232);
  swift_task_dealloc(v170);
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  swift_task_dealloc(v52);
  swift_task_dealloc(v43);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  swift_task_dealloc(v259);
  swift_task_dealloc(v272);
  swift_task_dealloc(v280);
  swift_task_dealloc(v288);
  swift_task_dealloc(v296);
  swift_task_dealloc(v301);
  swift_task_dealloc(v306);
  swift_task_dealloc(v311);
  swift_task_dealloc(v316);
  swift_task_dealloc(v319);
  swift_task_dealloc(v322);
  swift_task_dealloc(v325);
  swift_task_dealloc(v327);
  swift_task_dealloc(v329);
  swift_task_dealloc(v331);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t static InputUtils.getPlacemark(from:)(uint64_t a1)
{
  v1[2] = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<Location>?);
  v1[3] = OUTLINED_FUNCTION_9_0(*(void *)(v2 - 8));
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<Location>);
  v1[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[5] = v4;
  v1[6] = OUTLINED_FUNCTION_9_0(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v2 = *(void *)(*(void *)v1 + 72LL);
  *(void *)(*(void *)v1 + 8_swift_stdlib_reportUnimplementedInitializer("SiriLinkFlowPlugin.SiriStateObserver", 36LL, "init()", 6LL, 0LL) = a1;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  double v8;
  double v9;
  double v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Class v15;
  uint64_t v2 = *(void **)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  if (!v2)
  {
    OUTLINED_FUNCTION_14();
    goto LABEL_6;
  }

  uint64_t v4 = *(void *)(v1 + 56);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v7 = OUTLINED_FUNCTION_4(a1, "lat");
  uint64_t v9 = v8;
  OUTLINED_FUNCTION_4((uint64_t)v7, "lng");
  static InputUtils.getPlacemarkRecommendation(queryText:latitude:longitude:)(v4, v3, v6, v9, v10);
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_41_9(v6, 1LL, v5);
  if (v11)
  {
    uint64_t v12 = *(void *)(v1 + 24);

    outlined destroy of Any?(v12, &demangling cache variable for type metadata for Recommendation<Location>?);
LABEL_6:
    uint64_t v15 = 0LL;
    goto LABEL_7;
  }

  os_signpost_id_t v14 = *(void *)(v1 + 40);
  uint64_t v13 = *(void *)(v1 + 48);
  OUTLINED_FUNCTION_80_4(v13, *(void *)(v1 + 24), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 32));
  uint64_t v15 = static InputUtils.getPlacemark(_:)(v13);

  OUTLINED_FUNCTION_48_12(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
LABEL_7:
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_40_0();
  return (*(uint64_t (**)(Class))(v1 + 8))(v15);
}

uint64_t static InputUtils.getPlacemark(from:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v4 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v4, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v5 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_45_0(v5))
  {
    uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_26_1(v6);
    OUTLINED_FUNCTION_47_1(&dword_0, v1, v0, "#InputUtils getPlacemark", v2);
    OUTLINED_FUNCTION_1_0((uint64_t)v2);
  }

  *(void *)(v3 + 56) = static InputUtils.getPlacemarkQueryText(_:)();
  *(void *)(v3 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v7;
  if (v7)
  {
    uint64_t v8 = (void *)swift_task_alloc(dword_219044);
    *(void *)(v3 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v8;
    *uint64_t v8 = v3;
    v8[1] = static InputUtils.getPlacemark(from:);
    return static InputUtils.getPlacemarkQueryLatLong()();
  }

  else
  {
    OUTLINED_FUNCTION_94_2();
    OUTLINED_FUNCTION_40_0();
    return OUTLINED_FUNCTION_23_1(0LL, *(uint64_t (**)(void))(v3 + 8));
  }

uint64_t static InputUtils.getPerson(from:contactResolver:locale:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v159 = a3;
  uint64_t v165 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Contact?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_83();
  uint64_t v146 = v6;
  uint64_t v7 = OUTLINED_FUNCTION_49_13();
  uint64_t v149 = type metadata accessor for Contact(v7);
  uint64_t v154 = *(void *)(v149 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_61_6();
  uint64_t v147 = v9;
  __chkstk_darwin(v10);
  v148 = (char *)&v144 - v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<Contact>?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_61_6();
  v153 = (uint64_t *)v13;
  __chkstk_darwin(v14);
  uint64_t v156 = (uint64_t)&v144 - v15;
  uint64_t v16 = OUTLINED_FUNCTION_49_13();
  uint64_t v17 = type metadata accessor for OSSignpostError(v16);
  uint64_t v151 = *(void *)(v17 - 8);
  uint64_t v152 = v17;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_83();
  uint64_t v150 = v19;
  uint64_t v20 = OUTLINED_FUNCTION_49_13();
  uint64_t v21 = type metadata accessor for ContactResolverConfig(v20);
  uint64_t v157 = *(void *)(v21 - 8);
  uint64_t v158 = v21;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v22);
  OUTLINED_FUNCTION_83();
  uint64_t v160 = v23;
  uint64_t v24 = OUTLINED_FUNCTION_49_13();
  uint64_t v25 = type metadata accessor for ContactQuery(v24);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v162 = v25;
  uint64_t v163 = v26;
  OUTLINED_FUNCTION_91();
  uint64_t v28 = __chkstk_darwin(v27);
  char v30 = (char *)&v144 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v28);
  v161 = (char *)&v144 - v31;
  uint64_t v32 = OUTLINED_FUNCTION_49_13();
  uint64_t v168 = type metadata accessor for OSSignpostID(v32);
  uint64_t v33 = *(void *)(v168 - 8);
  __chkstk_darwin(v168);
  OUTLINED_FUNCTION_61_6();
  uint64_t v155 = v34;
  uint64_t v36 = __chkstk_darwin(v35);
  uint64_t v38 = (char *)&v144 - v37;
  __chkstk_darwin(v36);
  uint64_t v40 = (char *)&v144 - v39;
  uint64_t v41 = type metadata accessor for OSSignposter(0LL);
  uint64_t v42 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  OUTLINED_FUNCTION_63_8();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v43 = __swift_project_value_buffer(v41, (uint64_t)static Signposter.voiceCommands);
  uint64_t v166 = v42;
  uint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 16);
  uint64_t v164 = v41;
  uint64_t v45 = v44(v3, v43, v41);
  uint64_t v46 = OSSignposter.logHandle.getter(v45);
  uint64_t v47 = OSSignpostID.init(log:)(v46);
  uint64_t v167 = v3;
  uint64_t v48 = (os_log_s *)OSSignposter.logHandle.getter(v47);
  os_signpost_type_t v49 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    uint64_t v50 = (_WORD *)OUTLINED_FUNCTION_57_1();
    *uint64_t v50 = 0;
    os_signpost_id_t v51 = OSSignpostID.rawValue.getter(v50);
    OUTLINED_FUNCTION_84_4(&dword_0, v48, v49, v51, "InputUtilsGetPerson", "");
    OUTLINED_FUNCTION_1_0((uint64_t)v50);
  }

  uint64_t v52 = v168;
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v38, v40, v168);
  uint64_t v53 = type metadata accessor for OSSignpostIntervalState(0LL);
  swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
  uint64_t v54 = OSSignpostIntervalState.init(id:isOpen:)(v38, 1LL);
  uint64_t v55 = *(void (**)(char *, uint64_t))(v33 + 8);
  v55(v40, v52);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v56 = type metadata accessor for Logger(0LL);
  uint64_t v57 = __swift_project_value_buffer(v56, (uint64_t)static Logger.voiceCommands);
  uint64_t v58 = (void *)Logger.logObject.getter(v57);
  os_log_type_t v59 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_20_9(v59))
  {
    uint64_t v60 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_43_5(v60);
    OUTLINED_FUNCTION_51_17(&dword_0, v61, v62, "#InputUtils getPerson");
    OUTLINED_FUNCTION_1_0(v52);
  }

  if (!VoiceCommandsNLIntent.voiceCommandContact.getter())
  {
    uint64_t v81 = (void *)Logger.logObject.getter(0LL);
    os_log_type_t v82 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_40(v82))
    {
      uint64_t v83 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_46_10(v83);
      OUTLINED_FUNCTION_14_26(&dword_0, v84, v85, "Did not receive valid voiceCommandContact from server");
      OUTLINED_FUNCTION_1_0((uint64_t)v38);
    }

    swift_release();

    OUTLINED_FUNCTION_61_15();
    return 0LL;
  }

  v145 = (void (*)(uint64_t, uint64_t))v55;
  uint64_t v144 = v57;
  uint64_t v165 = v54;
  VoiceCommandsNLIntent.VoiceCommandContactIntentNode.toContactQuery()();
  swift_release();
  uint64_t v63 = v163;
  uint64_t v64 = v161;
  uint64_t v65 = v30;
  uint64_t v66 = v162;
  (*(void (**)(char *, char *, uint64_t))(v163 + 32))(v161, v65, v162);
  uint64_t v67 = a2[3];
  uint64_t v68 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v67);
  uint64_t v69 = v160;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 8))(v159, v67, v68);
  uint64_t v70 = a2[3];
  uint64_t v71 = a2[4];
  uint64_t v72 = a2;
  uint64_t v73 = v63;
  __swift_project_boxed_opaque_existential_1(v72, v70);
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ContactQuery>);
  uint64_t v75 = *(void *)(v63 + 72);
  uint64_t v76 = *(unsigned __int8 *)(v63 + 80);
  uint64_t isa = (v76 + 32) & ~v76;
  uint64_t v78 = swift_allocObject(v74, isa + v75, v76 | 7);
  *(_OWORD *)(v78 + 16) = xmmword_17E650;
  (*(void (**)(uint64_t, char *, uint64_t))(v73 + 16))(v78 + isa, v64, v66);
  uint64_t v79 = v169;
  uint64_t v80 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 16))(v78, v69, v70, v71);
  if (v79)
  {
    OUTLINED_FUNCTION_40_18();
    swift_bridgeObjectRelease(v78);
    OUTLINED_FUNCTION_16_23();
    (*(void (**)(char *, uint64_t))(v73 + 8))(v64, v66);
    OUTLINED_FUNCTION_61_15();
    return isa;
  }

  uint64_t v86 = v80;
  uint64_t v169 = 0LL;
  uint64_t v87 = swift_bridgeObjectRelease(v78);
  uint64_t v88 = v167;
  uint64_t v89 = (os_log_s *)OSSignposter.logHandle.getter(v87);
  uint64_t v90 = v155;
  uint64_t v91 = v165;
  uint64_t v92 = OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v93 = static os_signpost_type_t.end.getter(v92);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    uint64_t v94 = swift_retain(v91);
    uint64_t v95 = v150;
    checkForErrorAndConsumeState(state:)(v94);
    swift_release();
    uint64_t v97 = v151;
    uint64_t v96 = v152;
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v151 + 88))(v95, v152) == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v98 = "[Error] Interval already ended";
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v95, v96);
      uint64_t v98 = "";
    }

    uint64_t v99 = (_WORD *)OUTLINED_FUNCTION_57_1();
    _WORD *v99 = 0;
    os_signpost_id_t v100 = OSSignpostID.rawValue.getter(v99);
    OUTLINED_FUNCTION_84_4(&dword_0, v89, v93, v100, "InputUtilsGetPerson", v98);
    OUTLINED_FUNCTION_1_0((uint64_t)v99);
    uint64_t v88 = v167;
  }

  v145(v90, v168);
  uint64_t v101 = v156;
  specialized Collection.first.getter(v86, v156);
  swift_bridgeObjectRelease(v86);
  uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<Contact>);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v101, 1LL, v102);
  uint64_t v104 = v166;
  if (EnumTagSinglePayload == 1)
  {
LABEL_21:
    uint64_t v105 = (void *)OUTLINED_FUNCTION_39_20();
    os_log_type_t v106 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_40(v106))
    {
      uint64_t v107 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_46_10(v107);
      OUTLINED_FUNCTION_14_26(&dword_0, v108, v109, "#InputUtils ContactResolver could not recommend a contact");
      OUTLINED_FUNCTION_1_0(v86);
    }

    OUTLINED_FUNCTION_40_18();

    OUTLINED_FUNCTION_16_23();
    OUTLINED_FUNCTION_26_18();
    uint64_t v110 = OUTLINED_FUNCTION_34_15(*(uint64_t (**)(uint64_t, void))(v104 + 8));
    OUTLINED_FUNCTION_88_4(v110, &demangling cache variable for type metadata for Recommendation<Contact>?);
    return 0LL;
  }

  uint64_t v112 = v153;
  outlined init with copy of AppDisplayInfo?( v101,  (uint64_t)v153,  &demangling cache variable for type metadata for Recommendation<Contact>?);
  uint64_t v113 = *(uint64_t (***)(uint64_t, uint64_t))(v102 - 8);
  int v114 = v113[11]((uint64_t)v112, v102);
  if (v114 == enum case for Recommendation.confident<A>(_:))
  {
    OUTLINED_FUNCTION_28_12(v113[12]);
    uint64_t v115 = v154;
    uint64_t v116 = v112;
    uint64_t v117 = v148;
    uint64_t v118 = v149;
    (*(void (**)(char *, uint64_t *, uint64_t))(v154 + 32))(v148, v116, v149);
    uint64_t v119 = (void *)OUTLINED_FUNCTION_39_20();
    os_log_type_t v120 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_40(v120))
    {
      uint64_t v121 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_46_10(v121);
      OUTLINED_FUNCTION_14_26(&dword_0, v122, v123, "#InputUtils ContactResolver confidently recommended a contact");
      uint64_t v124 = v115;
      uint64_t v115 = v154;
      OUTLINED_FUNCTION_1_0(v124);
    }

    uint64_t isa = (uint64_t)Contact.toINPerson()().super.isa;
    OUTLINED_FUNCTION_40_18();
    (*(void (**)(char *, uint64_t))(v115 + 8))(v117, v118);
LABEL_34:
    OUTLINED_FUNCTION_16_23();
    OUTLINED_FUNCTION_26_18();
    uint64_t v133 = OUTLINED_FUNCTION_34_15(*(uint64_t (**)(uint64_t, void))(v166 + 8));
    OUTLINED_FUNCTION_88_4(v133, &demangling cache variable for type metadata for Recommendation<Contact>?);
    return isa;
  }

  uint64_t v125 = v149;
  uint64_t v86 = v154;
  if (v114 == enum case for Recommendation.needsConfirmation<A>(_:))
  {
    OUTLINED_FUNCTION_28_12(v113[12]);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v86 + 32))(v147, v112, v125);
    v126 = (void *)OUTLINED_FUNCTION_39_20();
    os_log_type_t v127 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_40(v127))
    {
      __int128 v128 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_46_10(v128);
      OUTLINED_FUNCTION_14_26( &dword_0,  v129,  v130,  "#InputUtils ContactResolver call returned needsConfirmation which is unsupported, returning contact");
      uint64_t v131 = v86;
      uint64_t v86 = v154;
      OUTLINED_FUNCTION_1_0(v131);
    }

    uint64_t v132 = v147;
    uint64_t isa = (uint64_t)Contact.toINPerson()().super.isa;
    OUTLINED_FUNCTION_40_18();
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v132, v125);
    goto LABEL_34;
  }

  if (v114 != enum case for Recommendation.needsDisambiguation<A>(_:))
  {
    OUTLINED_FUNCTION_28_12(v113[1]);
    uint64_t v104 = v166;
    goto LABEL_21;
  }

  OUTLINED_FUNCTION_28_12(v113[12]);
  uint64_t v134 = *v112;
  v135 = (void *)OUTLINED_FUNCTION_39_20();
  os_log_type_t v136 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_20_9(v136))
  {
    v137 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_43_5(v137);
    OUTLINED_FUNCTION_51_17( &dword_0,  v138,  v139,  "#InputUtils ContactResolver call returned needsDisambiguation which is unsupported, picking first one");
    OUTLINED_FUNCTION_1_0(v88);
  }

  uint64_t v140 = v146;
  specialized Collection.first.getter(v134, v146);
  swift_bridgeObjectRelease(v134);
  int v141 = __swift_getEnumTagSinglePayload(v140, 1LL, v125);
  uint64_t v142 = v166;
  if (v141 == 1)
  {
    OUTLINED_FUNCTION_40_18();
    OUTLINED_FUNCTION_16_23();
    OUTLINED_FUNCTION_26_18();
    OUTLINED_FUNCTION_34_15(*(uint64_t (**)(uint64_t, void))(v142 + 8));
    outlined destroy of Any?(v140, &demangling cache variable for type metadata for Contact?);
    uint64_t isa = 0LL;
  }

  else
  {
    uint64_t isa = (uint64_t)Contact.toINPerson()().super.isa;
    OUTLINED_FUNCTION_40_18();
    OUTLINED_FUNCTION_16_23();
    OUTLINED_FUNCTION_26_18();
    OUTLINED_FUNCTION_34_15(*(uint64_t (**)(uint64_t, void))(v142 + 8));
    uint64_t v143 = (*(uint64_t (**)(uint64_t, uint64_t))(v154 + 8))(v140, v125);
  }

  OUTLINED_FUNCTION_88_4(v143, &demangling cache variable for type metadata for Recommendation<Contact>?);
  return isa;
}

uint64_t static InputUtils.getURL(from:)@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v4 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v4, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v5 = OUTLINED_FUNCTION_58();
  if (os_log_type_enabled(v1, v5))
  {
    uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_43_5(v6);
    OUTLINED_FUNCTION_47_1(&dword_0, v1, v5, "#InputUtils getURL", v2);
    OUTLINED_FUNCTION_1_0((uint64_t)v2);
  }

  if (one-time initialization token for voiceCommandTextNode != -1) {
    swift_once( &one-time initialization token for voiceCommandTextNode,  one-time initialization function for voiceCommandTextNode);
  }
  uint64_t v7 = static VoiceCommandsNLIntent.voiceCommandTextNode;
  uint64_t v8 = OUTLINED_FUNCTION_103();
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent,  type metadata accessor for VoiceCommandsNLIntent,  (uint64_t)&protocol conformance descriptor for VoiceCommandsNLIntent);
  IntentNodeTraversable.value<A>(forNode:)(v7, v8, v9);
  if (v15)
  {
    String.convertedToURL()(v14, v15, a1);
    return OUTLINED_FUNCTION_20();
  }

  else
  {
    uint64_t v11 = type metadata accessor for URL(0LL);
    return OUTLINED_FUNCTION_50_1(a1, v12, v13, v11);
  }

uint64_t static InputUtils.getText(from:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v3, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v4 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v4))
  {
    os_log_type_t v5 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_46_10(v5);
    OUTLINED_FUNCTION_47_1(&dword_0, v0, v1, "#InputUtils getText", v2);
    OUTLINED_FUNCTION_1_0((uint64_t)v2);
  }

  if (one-time initialization token for voiceCommandTextNode != -1) {
    swift_once( &one-time initialization token for voiceCommandTextNode,  one-time initialization function for voiceCommandTextNode);
  }
  OUTLINED_FUNCTION_103();
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent,  type metadata accessor for VoiceCommandsNLIntent,  (uint64_t)&protocol conformance descriptor for VoiceCommandsNLIntent);
  OUTLINED_FUNCTION_31_16(v6, v7, v6);
  return v9;
}

id static InputUtils.getCurrency(from:locale:)(uint64_t a1, uint8_t *a2)
{
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_27_18();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v9 = OUTLINED_FUNCTION_48();
  os_log_type_t v10 = __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_9_5();
  os_log_type_t v11 = OUTLINED_FUNCTION_58();
  if (os_log_type_enabled(v2, v11))
  {
    uint64_t v12 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    *(_WORD *)uint64_t v12 = 0;
    OUTLINED_FUNCTION_47_1(&dword_0, v2, v11, "#InputUtils getCurrency", v12);
    OUTLINED_FUNCTION_1_0((uint64_t)v12);
  }

  if (one-time initialization token for voiceCommandScalarNode != -1) {
    swift_once( &one-time initialization token for voiceCommandScalarNode,  one-time initialization function for voiceCommandScalarNode);
  }
  uint64_t v13 = static VoiceCommandsNLIntent.voiceCommandScalarNode;
  OUTLINED_FUNCTION_103();
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent,  type metadata accessor for VoiceCommandsNLIntent,  (uint64_t)&protocol conformance descriptor for VoiceCommandsNLIntent);
  OUTLINED_FUNCTION_68_6(v13);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>);
  OUTLINED_FUNCTION_41_9(v3, 1LL, v14);
  if (v15)
  {
    outlined destroy of Any?( v3,  &demangling cache variable for type metadata for Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>?);
LABEL_11:
    os_log_type_t v19 = v10;
    Logger.logObject.getter(v18);
    os_log_type_t v20 = OUTLINED_FUNCTION_54_8();
    if (!OUTLINED_FUNCTION_40(v20))
    {
LABEL_14:

      return 0LL;
    }

    uint64_t v21 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_26_1(v21);
    uint64_t v22 = "#InputUtils missing value for currency amount";
LABEL_13:
    OUTLINED_FUNCTION_47_1(&dword_0, (os_log_s *)v7, v19, v22, a2);
    OUTLINED_FUNCTION_1_0((uint64_t)a2);
    goto LABEL_14;
  }

  Scalar.value.getter(v14);
  double v16 = v32;
  char v17 = v33;
  uint64_t v18 = OUTLINED_FUNCTION_78_5(v3, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8LL));
  if ((v17 & 1) != 0) {
    goto LABEL_11;
  }
  if (one-time initialization token for voiceCommandCurrencyUnitNode != -1) {
    swift_once( &one-time initialization token for voiceCommandCurrencyUnitNode,  one-time initialization function for voiceCommandCurrencyUnitNode);
  }
  OUTLINED_FUNCTION_68_6(static VoiceCommandsNLIntent.voiceCommandCurrencyUnitNode);
  if (v31 >= 0xBu)
  {
    if (v31 == 89)
    {
      os_log_type_t v19 = v10;
      Logger.logObject.getter(v31);
      os_log_type_t v28 = OUTLINED_FUNCTION_54_8();
      if (!OUTLINED_FUNCTION_40(v28)) {
        goto LABEL_14;
      }
      uint64_t v29 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_26_1(v29);
      uint64_t v22 = "#InputUtils missing value for currency unit";
      goto LABEL_13;
    }

    VoiceCommandsNLIntent.VoiceCommandCurrencyUnit.rawValue.getter(v31);
    String.uppercased()();
    OUTLINED_FUNCTION_14();
  }

  else
  {
    Locale.currency.getter(v31);
    uint64_t v24 = type metadata accessor for Locale.Currency(0LL);
    uint64_t v25 = OUTLINED_FUNCTION_41_9((uint64_t)v7, 1LL, v24);
    if (v15)
    {
      outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for Locale.Currency?);
    }

    else
    {
      Locale.Currency.identifier.getter(v25);
      (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8LL))(v7, v24);
    }
  }

  id v26 = [objc_allocWithZone(NSDecimalNumber) initWithDouble:v16];
  id v27 = objc_allocWithZone(&OBJC_CLASS___INCurrencyAmount);
  return @nonobjc INCurrencyAmount.init(amount:currencyCode:)(v26);
}

void one-time initialization function for NUMBERICREFERENCENODEVALUES()
{
  static InputUtils.NUMBERICREFERENCENODEVALUES = (uint64_t)&outlined read-only object #0 of one-time initialization function for NUMBERICREFERENCENODEVALUES;
}

uint64_t *InputUtils.NUMBERICREFERENCENODEVALUES.unsafeMutableAddressor()
{
  if (one-time initialization token for NUMBERICREFERENCENODEVALUES != -1) {
    swift_once( &one-time initialization token for NUMBERICREFERENCENODEVALUES,  one-time initialization function for NUMBERICREFERENCENODEVALUES);
  }
  return &static InputUtils.NUMBERICREFERENCENODEVALUES;
}

double static InputUtils.NUMBERICREFERENCENODEVALUES.getter()
{
  if (one-time initialization token for NUMBERICREFERENCENODEVALUES != -1) {
    swift_once( &one-time initialization token for NUMBERICREFERENCENODEVALUES,  one-time initialization function for NUMBERICREFERENCENODEVALUES);
  }
  *(void *)&double result = swift_bridgeObjectRetain(static InputUtils.NUMBERICREFERENCENODEVALUES).n128_u64[0];
  return result;
}

double static InputUtils.convertVoiceCommandReferenceToIndex(reference:lastInd:)( unsigned __int8 a1, uint64_t a2)
{
  if (a1 != 35)
  {
    if (one-time initialization token for NUMBERICREFERENCENODEVALUES != -1) {
      swift_once( &one-time initialization token for NUMBERICREFERENCENODEVALUES,  one-time initialization function for NUMBERICREFERENCENODEVALUES);
    }
    os_log_type_t v4 = (void *)static InputUtils.NUMBERICREFERENCENODEVALUES;
    uint64_t v5 = VoiceCommandsNLIntent.VoiceCommandReference.rawValue.getter(a1);
    uint64_t v7 = specialized Collection<>.firstIndex(of:)(v5, v6, v4);
    char v9 = v8;
    swift_bridgeObjectRelease();
    if ((v9 & 1) != 0)
    {
      switch(a1)
      {
        case 0x19u:
          uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t v14 = OUTLINED_FUNCTION_23_4(v13);
          *(void *)&double result = 1LL;
          *(_OWORD *)(v14 + 16) = xmmword_17E650;
          *(void *)(v14 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a2;
          break;
        case 0x1Au:
          uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t v16 = a2 / 2;
          if ((a2 & 1) != 0)
          {
            uint64_t v22 = swift_allocObject(v15, 48LL, 7LL);
            *(void *)&double result = 2LL;
            *(_OWORD *)(v22 + 16) = xmmword_17E660;
            *(void *)(v22 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v16;
            *(void *)(v22 + 40) = v16 + 1;
          }

          else
          {
            uint64_t v17 = OUTLINED_FUNCTION_23_4(v15);
            *(void *)&double result = 1LL;
            *(_OWORD *)(v17 + 16) = xmmword_17E650;
            *(void *)(v17 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v16;
          }

          break;
        case 0x1Du:
          uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t v19 = OUTLINED_FUNCTION_23_4(v18);
          *(void *)&double result = 1LL;
          *(_OWORD *)(v19 + 16) = xmmword_17E650;
          uint64_t v20 = a2 - 1;
          if (!__OFSUB__(a2, 1LL)) {
            goto LABEL_14;
          }
          __break(1u);
          goto LABEL_13;
        case 0x1Eu:
LABEL_13:
          uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t v19 = OUTLINED_FUNCTION_23_4(v21);
          *(void *)&double result = 1LL;
          *(_OWORD *)(v19 + 16) = xmmword_17E650;
          uint64_t v20 = a2 - 2;
          if (__OFSUB__(a2, 2LL))
          {
            __break(1u);
            JUMPOUT(0xA430CLL);
          }

void static InputUtils.getInt(from:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v7 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v7, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v8 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_21_6(v8))
  {
    char v9 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    *(_WORD *)char v9 = 0;
    OUTLINED_FUNCTION_47_1(&dword_0, v1, v3, "#InputUtils getInt", v9);
    OUTLINED_FUNCTION_1_0((uint64_t)v9);
  }

  if (one-time initialization token for voiceCommandScalarNode != -1) {
    swift_once( &one-time initialization token for voiceCommandScalarNode,  one-time initialization function for voiceCommandScalarNode);
  }
  OUTLINED_FUNCTION_103();
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent,  type metadata accessor for VoiceCommandsNLIntent,  (uint64_t)&protocol conformance descriptor for VoiceCommandsNLIntent);
  OUTLINED_FUNCTION_43_15(v10);
  uint64_t v11 = OUTLINED_FUNCTION_41_9(v2, 1LL, v0);
  if (v12)
  {
    OUTLINED_FUNCTION_81_7( v11,  &demangling cache variable for type metadata for Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>?);
LABEL_14:
    OUTLINED_FUNCTION_8_2();
    return;
  }

  OUTLINED_FUNCTION_30_16(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
  OUTLINED_FUNCTION_59_7();
  OUTLINED_FUNCTION_56_17();
  if ((v14 & 1) != 0) {
    goto LABEL_14;
  }
  if ((~*(void *)&v13 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }

  if (v13 <= -9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  if (v13 < 9.22337204e18) {
    goto LABEL_14;
  }
LABEL_17:
  __break(1u);
}

uint64_t static InputUtils.getPlacemarkQueryText(_:)()
{
  if (one-time initialization token for voiceCommandTextNode != -1) {
    swift_once( &one-time initialization token for voiceCommandTextNode,  one-time initialization function for voiceCommandTextNode);
  }
  uint64_t v0 = static VoiceCommandsNLIntent.voiceCommandTextNode;
  uint64_t v1 = type metadata accessor for VoiceCommandsNLIntent(0LL);
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent,  type metadata accessor for VoiceCommandsNLIntent,  (uint64_t)&protocol conformance descriptor for VoiceCommandsNLIntent);
  IntentNodeTraversable.value<A>(forNode:)(v0, v1, v2);
  if (v10) {
    return v9;
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)static Logger.voiceCommands);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v8 = 0;
    _os_log_impl(&dword_0, v6, v7, "#InputUtils getPlacemarkQueryText - no voiceCommandText from intent", v8, 2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  return 0LL;
}

uint64_t static InputUtils.getPlacemarkQueryLatLong()()
{
  return swift_task_switch(static InputUtils.getPlacemarkQueryLatLong(), 0LL, 0LL);
}

{
  __int128 *v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  __int128 **v4;
  static AceService.currentAsync.getter((void *)v0 + 10);
  uint64_t v1 = type metadata accessor for LocationProvider();
  uint64_t inited = swift_initStackObject(v1, v0 + 1);
  *((void *)v0 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 15) = inited;
  OUTLINED_FUNCTION_60_12(inited);
  outlined init with take of AceServiceInvokerAsync(v0 + 5, v3);
  uint64_t v4 = (__int128 **)swift_task_alloc(dword_214EEC);
  *((void *)v0 + 16) = v4;
  void *v4 = v0;
  v4[1] = (__int128 *)static InputUtils.getPlacemarkQueryLatLong();
  return LocationProvider.getCurrentLocation()();
}

uint64_t static InputUtils.getPlacemarkQueryLatLong()(uint64_t a1)
{
  uint64_t v3 = *((void *)*v1 + 15);
  OUTLINED_FUNCTION_3_0(*((void *)*v1 + 16));
  swift_setDeallocating(v3);
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v3 + 24));
  return OUTLINED_FUNCTION_23_1(a1, v1[1]);
}

uint64_t static InputUtils.getPlacemarkRecommendation(queryText:latitude:longitude:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v49 = a2;
  uint64_t v50 = a1;
  uint64_t v60 = a3;
  uint64_t v58 = type metadata accessor for LocationResolutionSpec(0LL);
  uint64_t v56 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v48 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v57 = type metadata accessor for LocationResolver(0LL);
  uint64_t v55 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v47 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Location(0LL);
  uint64_t v53 = *(void *)(v9 - 8);
  uint64_t v54 = v9;
  __chkstk_darwin(v9);
  os_log_type_t v59 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for TimeZone(0LL);
  __chkstk_darwin(v11);
  uint64_t v46 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for LocationResolutionContext(0LL);
  uint64_t v51 = *(void *)(v13 - 8);
  uint64_t v52 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for Locale(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v46 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  id v26 = (char *)&v46 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v46 - v28;
  static Device.current.getter(v61, v27);
  uint64_t v30 = v62;
  uint64_t v31 = v63;
  __swift_project_boxed_opaque_existential_1(v61, v62);
  uint64_t v32 = v31;
  uint64_t v33 = v16;
  uint64_t v34 = v47;
  dispatch thunk of DeviceState.siriLocale.getter(v30, v32);
  __swift_destroy_boxed_opaque_existential_1Tm(v61);
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v35(v26, v29, v33);
  v35(v23, v29, v33);
  uint64_t v36 = ((uint64_t (*)(char *, char *, uint64_t))v35)(v20, v29, v33);
  uint64_t v37 = v46;
  static TimeZone.current.getter(v36);
  uint64_t v38 = v23;
  uint64_t v39 = (uint64_t)v59;
  LocationResolutionContext.init(with:regionFormat:regionAwareLanguage:timeZone:latitude:longitude:)( v26,  v38,  v20,  v37,  *(void *)&a4,  0LL,  *(void *)&a5,  0LL);
  uint64_t v40 = v49;
  swift_bridgeObjectRetain(v49);
  uint64_t v41 = Location.init(locationLabel:)(v50, v40, v39);
  uint64_t v42 = LocationResolver.init()(v41);
  uint64_t v43 = v48;
  LocationResolutionSpec.init()(v42);
  LocationResolver.makeRecommendation(value:context:spec:)(v39, v15, v43);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v43, v58);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v34, v57);
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v39, v54);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v15, v52);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v29, v33);
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<Location>);
  return __swift_storeEnumTagSinglePayload(v60, 0LL, 1LL, v44);
}

Class static InputUtils.getPlacemark(_:)(uint64_t a1)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<Location>);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  type metadata accessor for Location(0LL);
  OUTLINED_FUNCTION_45_12();
  uint64_t v11 = __chkstk_darwin(v10);
  __chkstk_darwin(v11);
  uint64_t v13 = (uint8_t *)&v40 - v12;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  int v14 = (*(uint64_t (**)(uint64_t *, uint64_t))(v7 + 88))(v9, v6);
  BOOL v15 = v14 == enum case for Recommendation.confident<A>(_:)
     || v14 == enum case for Recommendation.needsConfirmation<A>(_:);
  if (v15)
  {
    OUTLINED_FUNCTION_17_4(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 96));
    goto LABEL_21;
  }

  if (v14 != enum case for Recommendation.needsDisambiguation<A>(_:))
  {
    if (v14 != enum case for Recommendation.none<A>(_:))
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v36 = OUTLINED_FUNCTION_48();
      OUTLINED_FUNCTION_84(v36, (uint64_t)static Logger.voiceCommands);
      os_log_type_t v37 = OUTLINED_FUNCTION_54_8();
      if (OUTLINED_FUNCTION_40(v37))
      {
        uint64_t v38 = (_WORD *)OUTLINED_FUNCTION_57_1();
        OUTLINED_FUNCTION_26_1(v38);
        OUTLINED_FUNCTION_47_1( &dword_0,  v1,  (os_log_type_t)v2,  "#InputUtils getPlacemark - unknown recommendation",  v13);
        OUTLINED_FUNCTION_1_0((uint64_t)v13);
      }

      OUTLINED_FUNCTION_17_4(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
      return 0LL;
    }

    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v21 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v21, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v22 = OUTLINED_FUNCTION_54_8();
    if (!OUTLINED_FUNCTION_40(v22)) {
      goto LABEL_20;
    }
    uint64_t v23 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_26_1(v23);
    uint64_t v20 = "#InputUtils getPlacemark - no recommendations";
    goto LABEL_19;
  }

  OUTLINED_FUNCTION_17_4(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 96));
  uint64_t v16 = *v9;
  specialized Collection.first.getter(v16, v2);
  swift_bridgeObjectRelease(v16);
  OUTLINED_FUNCTION_41_9(v2, 1LL, (uint64_t)v1);
  if (v15)
  {
    outlined destroy of Any?(v2, &demangling cache variable for type metadata for Location?);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v17 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v17, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v18 = OUTLINED_FUNCTION_54_8();
    if (!OUTLINED_FUNCTION_40(v18)) {
      goto LABEL_20;
    }
    uint64_t v19 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_26_1(v19);
    uint64_t v20 = "#InputUtils getPlacemark - zero recommendations for disambiguation";
LABEL_19:
    OUTLINED_FUNCTION_47_1(&dword_0, v1, (os_log_type_t)v2, v20, v13);
    OUTLINED_FUNCTION_1_0((uint64_t)v13);
LABEL_20:

    return 0LL;
  }

  uint64_t v9 = (uint64_t *)v2;
LABEL_21:
  (*(void (**)(uint8_t *, uint64_t *, os_log_s *))(v3 + 32))(v13, v9, v1);
  CLPlacemark_optional v44 = Location.toCLPlacemark()();
  if (!v44.value.super.isa)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v26 = OUTLINED_FUNCTION_48();
    uint64_t v27 = (void (*)(uint8_t *, os_log_s *))__swift_project_value_buffer( v26,  (uint64_t)static Logger.voiceCommands);
    uint64_t v28 = OUTLINED_FUNCTION_30_16(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v41 = OUTLINED_FUNCTION_38(32LL);
      uint64_t v43 = v41;
      *(_DWORD *)uint64_t v31 = 136315138;
      uint64_t v32 = Location.locationLabel.getter();
      if (v33)
      {
        uint64_t v27 = v33;
      }

      else
      {
        uint64_t v32 = 7104878LL;
        uint64_t v27 = (void (*)(uint8_t *, os_log_s *))0xE300000000000000LL;
      }

      uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, (unint64_t)v27, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v31 + 4);
      OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_55_15();
      OUTLINED_FUNCTION_31_2( &dword_0,  v29,  v30,  "#InputUtils getPlacemark - failed to convert to CLPlacemark; location-label=%s",
        v31);
      uint64_t v34 = v41;
      OUTLINED_FUNCTION_30_3(v41, v35, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v34);
      OUTLINED_FUNCTION_1_0((uint64_t)v31);
    }

    else
    {

      OUTLINED_FUNCTION_55_15();
    }

    v27(v13, v1);
    return 0LL;
  }

  Class isa = v44.value.super.isa;
  (*(void (**)(uint8_t *, os_log_s *, void))(v3 + 8))(v13, v1, *(void *)&v44.is_nil);
  return isa;
}

uint64_t Location.init(locationLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v72 = a2;
  uint64_t v73 = a1;
  uint64_t v74 = a3;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for County?);
  __chkstk_darwin(v3);
  uint64_t v71 = (uint64_t)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocationName?);
  __chkstk_darwin(v5);
  uint64_t v70 = (uint64_t)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AddressReference?);
  __chkstk_darwin(v7);
  uint64_t v69 = (uint64_t)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContinentName?);
  __chkstk_darwin(v9);
  uint64_t v68 = (uint64_t)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StreetAddress?);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Landmark?);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proximity?);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Place?);
  __chkstk_darwin(v20);
  os_log_type_t v22 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = v22;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Centroid?);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v63 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v65 = v25;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for City?);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v63 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v66 = v28;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State?);
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v63 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v67 = v31;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zipcode?);
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)&v63 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Country?);
  __chkstk_darwin(v35);
  os_log_type_t v37 = (char *)&v63 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Radius?);
  __chkstk_darwin(v38);
  uint64_t v40 = (char *)&v63 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = type metadata accessor for Radius(0LL);
  __swift_storeEnumTagSinglePayload((uint64_t)v40, 1LL, 1LL, v41);
  uint64_t v42 = type metadata accessor for Country(0LL);
  __swift_storeEnumTagSinglePayload((uint64_t)v37, 1LL, 1LL, v42);
  uint64_t v43 = type metadata accessor for Zipcode(0LL);
  __swift_storeEnumTagSinglePayload((uint64_t)v34, 1LL, 1LL, v43);
  uint64_t v44 = type metadata accessor for State(0LL);
  __swift_storeEnumTagSinglePayload((uint64_t)v31, 1LL, 1LL, v44);
  uint64_t v45 = type metadata accessor for City(0LL);
  __swift_storeEnumTagSinglePayload((uint64_t)v28, 1LL, 1LL, v45);
  uint64_t v46 = type metadata accessor for Centroid(0LL);
  __swift_storeEnumTagSinglePayload((uint64_t)v25, 1LL, 1LL, v46);
  uint64_t v47 = type metadata accessor for Place(0LL);
  __swift_storeEnumTagSinglePayload((uint64_t)v22, 1LL, 1LL, v47);
  uint64_t v48 = type metadata accessor for Proximity(0LL);
  uint64_t v49 = v19;
  __swift_storeEnumTagSinglePayload((uint64_t)v19, 1LL, 1LL, v48);
  uint64_t v50 = type metadata accessor for Landmark(0LL);
  uint64_t v51 = v16;
  __swift_storeEnumTagSinglePayload((uint64_t)v16, 1LL, 1LL, v50);
  uint64_t v52 = type metadata accessor for StreetAddress(0LL);
  uint64_t v53 = v13;
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 1LL, 1LL, v52);
  uint64_t v54 = type metadata accessor for ContinentName(0LL);
  uint64_t v55 = v68;
  __swift_storeEnumTagSinglePayload(v68, 1LL, 1LL, v54);
  uint64_t v56 = type metadata accessor for AddressReference(0LL);
  uint64_t v57 = v69;
  __swift_storeEnumTagSinglePayload(v69, 1LL, 1LL, v56);
  uint64_t v58 = type metadata accessor for LocationName(0LL);
  uint64_t v59 = v70;
  __swift_storeEnumTagSinglePayload(v70, 1LL, 1LL, v58);
  uint64_t v60 = type metadata accessor for County(0LL);
  uint64_t v61 = v71;
  __swift_storeEnumTagSinglePayload(v71, 1LL, 1LL, v60);
  return Location.init(radius:country:zipcode:state:city:centroid:place:timezone:proximity:landmark:streetAddress:continentName:addressReference:locationName:locationLabel:county:locationAccuracy:)( v40,  v37,  v34,  v67,  v66,  v65,  v64,  0LL,  0LL,  v49,  v51,  v53,  v55,  v57,  v59,  v73,  v72,  v61,  0LL,  0LL);
}

id @nonobjc INCurrencyAmount.init(amount:currencyCode:)(void *a1)
{
  NSString v3 = String._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_14();
  id v4 = [v1 initWithAmount:a1 currencyCode:v3];

  return v4;
}

uint64_t outlined init with copy of VoiceCommandsNLIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for VoiceCommandsNLIntent(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for NSAttributedString()
{
  unint64_t result = lazy cache variable for type metadata for NSAttributedString;
  if (!lazy cache variable for type metadata for NSAttributedString)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSAttributedString);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  }

  return result;
}

uint64_t outlined init with take of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for InputUtils()
{
  return &type metadata for InputUtils;
}

void OUTLINED_FUNCTION_7_20()
{
  uint64_t v2 = v0[75];
  uint64_t v3 = v0[74];
  *(void *)(v1 - 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v0[73];
  *(void *)(v1 - 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v2;
  *(void *)(v1 - 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v0[67];
  *(void *)(v1 - 120) = v3;
}

void OUTLINED_FUNCTION_14_26(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_16_23()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 184) + 8LL))(v0, *(void *)(v1 - 176));
}

uint64_t OUTLINED_FUNCTION_22_15()
{
  return *(void *)(v0 + 600);
}

uint64_t OUTLINED_FUNCTION_26_18()
{
  return (*(uint64_t (**)(void, void))(v0 + 8))(*(void *)(v1 - 152), *(void *)(v1 - 144));
}

uint64_t OUTLINED_FUNCTION_28_12@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_30_16@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v3, v2, v1);
}

uint64_t OUTLINED_FUNCTION_31_16(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IntentNodeTraversable.value<A>(forNode:)(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_34_15@<X0>(uint64_t (*a1)(uint64_t, void)@<X8>)
{
  return a1(v1, *(void *)(v2 - 128));
}

uint64_t OUTLINED_FUNCTION_35_21( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a21 + 8))(a23, a22);
}

uint64_t OUTLINED_FUNCTION_36_17( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a18 + 8))(a20, a19);
}

uint64_t OUTLINED_FUNCTION_37_17( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a15 + 8))(a17, a16);
}

uint64_t OUTLINED_FUNCTION_39_20()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_40_18()
{
  return swift_release(*(void *)(v0 - 120));
}

uint64_t OUTLINED_FUNCTION_43_15(uint64_t a1)
{
  return IntentNodeTraversable.value<A>(forNode:)(v1, v2, a1);
}

  ;
}

uint64_t OUTLINED_FUNCTION_48_12@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_50_14(uint64_t a1)
{
  return v1(a1, v2, v3);
}

void OUTLINED_FUNCTION_51_17(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_55_15()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_56_17()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_59_7()
{
  return Scalar.value.getter(v0);
}

uint64_t OUTLINED_FUNCTION_60_12(uint64_t result)
{
  *(void *)(result + 16) = 0x3FA999999999999ALL;
  return result;
}

uint64_t OUTLINED_FUNCTION_61_15()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 112) + 8LL))( *(void *)(v0 - 104),  *(void *)(v0 - 128));
}

  ;
}

uint64_t OUTLINED_FUNCTION_68_6(uint64_t a1)
{
  return IntentNodeTraversable.value<A>(forNode:)(a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_71_7()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 120) + 8LL))( *(void *)(v0 - 104),  *(void *)(v0 - 112));
}

BOOL OUTLINED_FUNCTION_72_3(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_73_6( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  return (*(uint64_t (**)(void, uint64_t))(a25 + 8))(*(void *)(v26 - 128), a26);
}

uint64_t OUTLINED_FUNCTION_74_8()
{
  return type metadata accessor for DateComponents(0LL);
}

uint64_t OUTLINED_FUNCTION_78_5@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_80_4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

void OUTLINED_FUNCTION_81_7(uint64_t a1, uint64_t *a2)
{
}

void OUTLINED_FUNCTION_84_4( void *a1, os_log_s *a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5, const char *a6)
{
}

uint64_t OUTLINED_FUNCTION_85_4(uint64_t a1, uint64_t a2)
{
  return IntentNodeTraversable.value<A>(forNode:)(a1, a2, v2);
}

void OUTLINED_FUNCTION_88_4(uint64_t a1, uint64_t *a2)
{
}

uint64_t OUTLINED_FUNCTION_94_2()
{
  return swift_task_dealloc(*(void *)(v0 + 48));
}

uint64_t OUTLINED_FUNCTION_95_1(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t RunCustomIntentCATs.confirmSlotValue(device:parameterName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_10_8(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATs.confirmSlotValue(device:parameterName:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  os_log_type_t v5 = (__n128 *)OUTLINED_FUNCTION_50_7(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  OUTLINED_FUNCTION_28_13(v6);
  OUTLINED_FUNCTION_12_4(v8, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_7_5(v9);
  if (v10)
  {
    uint64_t v11 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v12 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v12);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v13 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v14 = (void *)OUTLINED_FUNCTION_49_6(v13);
  OUTLINED_FUNCTION_29_7(v14);
  OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_45_13();
  return OUTLINED_FUNCTION_5_23(v15, v16, v17, v18, v19);
}

uint64_t RunCustomIntentCATs.confirmSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 40) = a4;
  *(void *)(v6 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v5;
  *(_BYTE *)(v6 + 96) = a5;
  OUTLINED_FUNCTION_68_7(a1, a2, a3);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v6 + 56) = OUTLINED_FUNCTION_20_10(v7);
  *(void *)(v6 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATs.confirmSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:)()
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_19(v4, 224LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_79_3(v5);
  uint64_t v7 = OUTLINED_FUNCTION_4_3(v6, (__n128)xmmword_181AE0);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    *(void *)(v2 + 56) = 0LL;
    *(void *)(v2 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  *(void *)(v2 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v3;
  OUTLINED_FUNCTION_35_22(v7);
  OUTLINED_FUNCTION_12_4(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_30_7(v10);
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v2 + 120) = v0;
    uint64_t v13 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v13);
    OUTLINED_FUNCTION_12_8();
  }

  OUTLINED_FUNCTION_54_17();
  OUTLINED_FUNCTION_67_7((uint64_t)"localizedAppName");
  OUTLINED_FUNCTION_12_4(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = OUTLINED_FUNCTION_41_5();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v2 + 16__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v0;
    uint64_t v17 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v17);
  }

  OUTLINED_FUNCTION_78_6();
  *(void *)(v2 + 216) = &type metadata for Bool;
  *(_BYTE *)(v2 + 19__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v18;
  uint64_t v19 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v20 = (void *)OUTLINED_FUNCTION_77_7(v19);
  OUTLINED_FUNCTION_56_4(v20);
  OUTLINED_FUNCTION_26_19();
  return OUTLINED_FUNCTION_5_23(v21, v22, v23, v24, v25);
}

{
  uint64_t v0;
  uint64_t (*v2)(void);
  OUTLINED_FUNCTION_24_6();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_0_0();
  }

  else
  {
    OUTLINED_FUNCTION_53_4();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_3_4(v2);
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_89_4();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t RunCustomIntentCATs.describeCustomIntentItem(device:item:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_10_8(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATs.describeCustomIntentItem(device:item:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_50_7(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    v1[7] = 0LL;
    v1[8] = 0LL;
  }

  OUTLINED_FUNCTION_66_10();
  v1[9] = v7;
  v1[10] = 1835365481LL;
  v1[11] = 0xE400000000000000LL;
  OUTLINED_FUNCTION_12_4(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_7_5(v10);
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v13 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v13);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v14 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v15 = (void *)OUTLINED_FUNCTION_49_6(v14);
  OUTLINED_FUNCTION_29_7(v15);
  OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_45_13();
  return OUTLINED_FUNCTION_5_23(v16, v17, v18, v19, v20);
}

uint64_t RunCustomIntentCATs.deviceUnlock(device:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunCustomIntentCATs.deviceUnlock(device:));
}

uint64_t RunCustomIntentCATs.deviceUnlock(device:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_72_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  uint64_t v7 = OUTLINED_FUNCTION_59_1();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_70_9(v7);
  OUTLINED_FUNCTION_48_6(v8);
  OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_55_4();
  return OUTLINED_FUNCTION_1_3(v9, v10, v11, v12, v13);
}

uint64_t RunCustomIntentCATs.disambiguateSlotValue(device:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunCustomIntentCATs.disambiguateSlotValue(device:));
}

uint64_t RunCustomIntentCATs.disambiguateSlotValue(device:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_72_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  uint64_t v7 = OUTLINED_FUNCTION_59_1();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_70_9(v7);
  OUTLINED_FUNCTION_48_6(v8);
  OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_55_4();
  return OUTLINED_FUNCTION_1_3(v9, v10, v11, v12, v13);
}

uint64_t RunCustomIntentCATs.disambiguateSlotValueItems(device:customPrompt:items:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  OUTLINED_FUNCTION_68_7(a1, a2, a3);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v5[7] = OUTLINED_FUNCTION_10_8(v6);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATs.disambiguateSlotValueItems(device:customPrompt:items:)()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_19(v2, 176LL);
  v0[8] = v3;
  uint64_t v4 = OUTLINED_FUNCTION_4_3(v3, (__n128)xmmword_17FDF0);
  if (v1)
  {
    type metadata accessor for SirikitDeviceState(v4);
  }

  else
  {
    v3[3].n128_u64[1] = 0LL;
    v3[4].n128_u64[0] = 0LL;
  }

  uint64_t v5 = v0[7];
  OUTLINED_FUNCTION_66_10();
  OUTLINED_FUNCTION_35_22(v6);
  OUTLINED_FUNCTION_12_4(v8, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_61_1();
  __swift_getEnumTagSinglePayload(v5, 1LL, v9);
  OUTLINED_FUNCTION_41_18();
  if (v10)
  {
    uint64_t v11 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v12 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v12);
    OUTLINED_FUNCTION_12_8();
  }

  unint64_t v13 = v0[5];
  v3[8].n128_u64[0] = 0x736D657469LL;
  v3[8].n128_u64[1] = 0xE500000000000000LL;
  v3[10].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  v3[9].n128_u64[0] = v13;
  swift_bridgeObjectRetain(v13);
  uint64_t v14 = (void *)OUTLINED_FUNCTION_59_1();
  v0[9] = v14;
  OUTLINED_FUNCTION_56_4(v14);
  OUTLINED_FUNCTION_45_13();
  return OUTLINED_FUNCTION_5_23(v15, v16, v17, v18, v19);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_56_18();
  if (v1)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_0_0();
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 64));
    OUTLINED_FUNCTION_40_0();
    uint64_t v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_3_4(v3);
  }

{
  uint64_t v0;
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t RunCustomIntentCATs.disambiguateSlotValueWithCustomText(device:customIntroductionPrompt:customSelectionPrompt:localizedAppName:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(_BYTE *)(v6 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a6;
  OUTLINED_FUNCTION_75_8(a1, a2, a3, a4, a5);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v6 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = OUTLINED_FUNCTION_20_10(v7);
  *(void *)(v6 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = OUTLINED_FUNCTION_11_0();
  *(void *)(v6 + 80) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATs.disambiguateSlotValueWithCustomText(device:customIntroductionPrompt:customSelectionPrompt:localizedAppName:shouldShowAppAttribution:)()
{
  unint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_19(v2, 272LL);
  *(void *)(v0 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v3;
  uint64_t v4 = OUTLINED_FUNCTION_4_3(v3, (__n128)xmmword_180120);
  if (v1)
  {
    uint64_t v4 = type metadata accessor for SirikitDeviceState(v4);
  }

  else
  {
    v3[3].n128_u64[1] = 0LL;
    v3[4].n128_u64[0] = 0LL;
  }

  uint64_t v6 = *(void *)(v0 + 80);
  uint64_t v7 = *(void *)(v0 + 32);
  v3[3].n128_u64[0] = v1;
  v3[4].n128_u64[1] = v4;
  v3[5].n128_u64[0] = 0xD000000000000018LL;
  v3[5].n128_u64[1] = 0x8000000000195870LL;
  OUTLINED_FUNCTION_12_4(v7, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  __swift_getEnumTagSinglePayload(v6, 1LL, v8);
  OUTLINED_FUNCTION_41_18();
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[7].n128_u64[1] = v8;
    uint64_t v11 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v13 = *(void *)(v0 + 40);
  v3[8].n128_u64[0] = 0xD000000000000015LL;
  v3[8].n128_u64[1] = 0x8000000000195890LL;
  OUTLINED_FUNCTION_12_4(v13, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = OUTLINED_FUNCTION_19_2();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[10].n128_u64[1] = v8;
    uint64_t v15 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v15);
  }

  uint64_t v17 = *(void *)(v0 + 48);
  v3[11].n128_u64[0] = 0xD000000000000010LL;
  v3[11].n128_u64[1] = 0x8000000000193910LL;
  OUTLINED_FUNCTION_12_4(v17, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v18 = OUTLINED_FUNCTION_16_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v18, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[13].n128_u64[1] = v8;
    uint64_t v19 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v19);
  }

  unsigned __int8 v20 = *(_BYTE *)(v0 + 112);
  v3[14].n128_u64[0] = 0xD000000000000018LL;
  v3[14].n128_u64[1] = 0x8000000000193970LL;
  v3[16].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v3[15].n128_u8[0] = v20;
  uint64_t v21 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  *(void *)(v0 + 96) = v21;
  OUTLINED_FUNCTION_85_5(v21);
  OUTLINED_FUNCTION_16_9();
  return OUTLINED_FUNCTION_5_7(v22, v23, v24, v25, v26);
}

{
  uint64_t v0;
  uint64_t (*v2)(void);
  OUTLINED_FUNCTION_43_16();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_74_9();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_22_2(v2);
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_91_2();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  return OUTLINED_FUNCTION_22_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t RunCustomIntentCATs.doneButton()(uint64_t a1)
{
  uint64_t v3 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for ScreentimeCheckFlowStrategyAsync.makeAppRestrictedByScreentimeResponse() in conformance WFScreentimeCheckFlowStrategy;
  return v5(a1, 0xD00000000000001ALL, 0x8000000000191420LL, _swiftEmptyArrayStorage);
}

uint64_t RunCustomIntentCATs.errorWithCodeCustomError(device:customDialog:localizedAppName:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  OUTLINED_FUNCTION_68_7(a1, a2, a3);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v5[7] = OUTLINED_FUNCTION_20_10(v6);
  v5[8] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATs.errorWithCodeCustomError(device:customDialog:localizedAppName:)()
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_19(v4, 176LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_79_3(v5);
  uint64_t v7 = OUTLINED_FUNCTION_4_3(v6, (__n128)xmmword_17FDF0);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    *(void *)(v2 + 56) = 0LL;
    *(void *)(v2 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  uint64_t v9 = *(void *)(v1 + 32);
  *(void *)(v2 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v3;
  *(void *)(v2 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v7;
  strcpy((char *)(v2 + 80), "customDialog");
  *(_BYTE *)(v2 + 9__swift_destroy_boxed_opaque_existential_1Tm(v0 + 3) = 0;
  *(_WORD *)(v2 + 9__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = -5120;
  OUTLINED_FUNCTION_12_4(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_30_7(v10);
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v2 + 120) = v0;
    uint64_t v13 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v13);
    OUTLINED_FUNCTION_12_8();
  }

  OUTLINED_FUNCTION_54_17();
  OUTLINED_FUNCTION_67_7((uint64_t)"localizedAppName");
  OUTLINED_FUNCTION_12_4(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = OUTLINED_FUNCTION_41_5();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v2 + 16__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v0;
    uint64_t v17 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v17);
  }

  uint64_t v18 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v19 = (void *)OUTLINED_FUNCTION_77_7(v18);
  OUTLINED_FUNCTION_56_4(v19);
  OUTLINED_FUNCTION_26_19();
  return OUTLINED_FUNCTION_5_23(v20, v21, v22, v23, v24);
}

uint64_t RunCustomIntentCATs.extensionTimedOut(device:actionName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_10_8(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATs.extensionTimedOut(device:actionName:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_50_7(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    v1[7] = 0LL;
    v1[8] = 0LL;
  }

  OUTLINED_FUNCTION_66_10();
  v1[9] = v7;
  v1[10] = 0x614E6E6F69746361LL;
  v1[11] = 0xEA0000000000656DLL;
  OUTLINED_FUNCTION_12_4(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_7_5(v10);
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v13 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v13);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v14 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v15 = (void *)OUTLINED_FUNCTION_49_6(v14);
  OUTLINED_FUNCTION_29_7(v15);
  OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_45_13();
  return OUTLINED_FUNCTION_5_23(v16, v17, v18, v19, v20);
}

uint64_t RunCustomIntentCATs.followupNotSupported(device:localizedAppName:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_10_8(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATs.followupNotSupported(device:localizedAppName:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_50_7(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    v1[7] = 0LL;
    v1[8] = 0LL;
  }

  OUTLINED_FUNCTION_66_10();
  v1[9] = v7;
  v1[10] = 0xD000000000000010LL;
  v1[11] = 0x8000000000193910LL;
  OUTLINED_FUNCTION_12_4(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_7_5(v10);
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v13 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v13);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v14 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v15 = (void *)OUTLINED_FUNCTION_49_6(v14);
  OUTLINED_FUNCTION_29_7(v15);
  OUTLINED_FUNCTION_16_9();
  return OUTLINED_FUNCTION_5_7(v16, v17, v18, v19, v20);
}

uint64_t RunCustomIntentCATs.handoffNotificationMessage(device:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunCustomIntentCATs.handoffNotificationMessage(device:));
}

uint64_t RunCustomIntentCATs.handoffNotificationMessage(device:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_72_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  uint64_t v7 = OUTLINED_FUNCTION_59_1();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_70_9(v7);
  OUTLINED_FUNCTION_48_6(v8);
  OUTLINED_FUNCTION_55_4();
  return OUTLINED_FUNCTION_1_3(v9, v10, v11, v12, v13);
}

uint64_t RunCustomIntentCATs.handoffNotificationMessageHomePodOnly(device:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunCustomIntentCATs.handoffNotificationMessageHomePodOnly(device:));
}

uint64_t RunCustomIntentCATs.handoffNotificationMessageHomePodOnly(device:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_72_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  uint64_t v7 = OUTLINED_FUNCTION_59_1();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_70_9(v7);
  OUTLINED_FUNCTION_48_6(v8);
  OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_55_4();
  return OUTLINED_FUNCTION_1_3(v9, v10, v11, v12, v13);
}

uint64_t RunCustomIntentCATs.initiateHandoff(device:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunCustomIntentCATs.initiateHandoff(device:));
}

uint64_t RunCustomIntentCATs.initiateHandoff(device:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_72_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  uint64_t v7 = OUTLINED_FUNCTION_59_1();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_70_9(v7);
  OUTLINED_FUNCTION_48_6(v8);
  OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_55_4();
  return OUTLINED_FUNCTION_1_3(v9, v10, v11, v12, v13);
}

uint64_t RunCustomIntentCATs.intentConfirmationPrompt(device:intentCategory:categoryVerb:localizedAppName:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v5[8] = OUTLINED_FUNCTION_20_10(v6);
  v5[9] = OUTLINED_FUNCTION_11_0();
  v5[10] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATs.intentConfirmationPrompt(device:intentCategory:categoryVerb:localizedAppName:)()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_19(v2, 224LL);
  v0[11] = v3;
  uint64_t v4 = OUTLINED_FUNCTION_4_3(v3, (__n128)xmmword_181AE0);
  if (v1)
  {
    uint64_t v4 = type metadata accessor for SirikitDeviceState(v4);
  }

  else
  {
    v3[3].n128_u64[1] = 0LL;
    v3[4].n128_u64[0] = 0LL;
  }

  uint64_t v5 = v0[10];
  OUTLINED_FUNCTION_16_24(v4);
  OUTLINED_FUNCTION_12_4(v7, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  __swift_getEnumTagSinglePayload(v5, 1LL, v8);
  OUTLINED_FUNCTION_41_18();
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[7].n128_u64[1] = v8;
    uint64_t v11 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = OUTLINED_FUNCTION_27_19();
  OUTLINED_FUNCTION_12_4(v12, v13, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = OUTLINED_FUNCTION_19_2();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[10].n128_u64[1] = v8;
    uint64_t v15 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v15);
  }

  OUTLINED_FUNCTION_81_8();
  OUTLINED_FUNCTION_80_5((uint64_t)"localizedAppName");
  OUTLINED_FUNCTION_12_4(v16, v17, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v18 = OUTLINED_FUNCTION_16_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v18, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[13].n128_u64[1] = v8;
    uint64_t v19 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v19);
  }

  uint64_t v20 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  v0[12] = v20;
  *uint64_t v20 = v0;
  v20[1] = RunCustomIntentCATs.intentConfirmationPrompt(device:intentCategory:categoryVerb:localizedAppName:);
  OUTLINED_FUNCTION_26_19();
  return OUTLINED_FUNCTION_5_23(v21, v22, v23, v24, v25);
}

{
  uint64_t v0;
  uint64_t (*v2)(void);
  OUTLINED_FUNCTION_43_16();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_74_9();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_22_2(v2);
  }

uint64_t RunCustomIntentCATs.intentConfirmationPromptWithTemplate(device:intentCategory:categoryVerb:localizedAppName:customDialog:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(void *)(v8 + 56) = a6;
  *(void *)(v8 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v7;
  *(_BYTE *)(v8 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a7;
  *(void *)(v8 + 40) = a4;
  *(void *)(v8 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a5;
  OUTLINED_FUNCTION_68_7(a1, a2, a3);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v8 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = OUTLINED_FUNCTION_20_10(v9);
  *(void *)(v8 + 80) = OUTLINED_FUNCTION_11_0();
  *(void *)(v8 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_11_0();
  *(void *)(v8 + 96) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATs.intentConfirmationPromptWithTemplate(device:intentCategory:categoryVerb:localizedAppName:customDialog:shouldShowAppAttribution:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_19(v2, 320LL);
  *(void *)(v0 + 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v3;
  uint64_t v4 = OUTLINED_FUNCTION_4_3(v3, (__n128)xmmword_17F3D0);
  if (v1)
  {
    uint64_t v4 = type metadata accessor for SirikitDeviceState(v4);
  }

  else
  {
    v3[3].n128_u64[1] = 0LL;
    v3[4].n128_u64[0] = 0LL;
  }

  uint64_t v5 = *(void *)(v0 + 96);
  OUTLINED_FUNCTION_16_24(v4);
  OUTLINED_FUNCTION_12_4(v7, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  __swift_getEnumTagSinglePayload(v5, 1LL, v8);
  OUTLINED_FUNCTION_41_18();
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[7].n128_u64[1] = v8;
    uint64_t v11 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = OUTLINED_FUNCTION_27_19();
  OUTLINED_FUNCTION_12_4(v12, v13, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = OUTLINED_FUNCTION_18_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[10].n128_u64[1] = v8;
    uint64_t v15 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v15);
  }

  OUTLINED_FUNCTION_80_5((uint64_t)"localizedAppName");
  OUTLINED_FUNCTION_12_4(v16, v17, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v18 = OUTLINED_FUNCTION_17_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v18, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[13].n128_u64[1] = v8;
    uint64_t v19 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v19);
  }

  OUTLINED_FUNCTION_65_8();
  v3[14].n128_u64[0] = v20;
  v3[14].n128_u64[1] = v21;
  OUTLINED_FUNCTION_12_4(v22, v23, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v24 = OUTLINED_FUNCTION_19_2();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v24, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[16].n128_u64[1] = v8;
    uint64_t v25 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v25);
  }

  unsigned __int8 v26 = *(_BYTE *)(v0 + 128);
  v3[17].n128_u64[0] = 0xD000000000000018LL;
  v3[17].n128_u64[1] = 0x8000000000193970LL;
  v3[19].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v3[18].n128_u8[0] = v26;
  uint64_t v27 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  *(void *)(v0 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v27;
  *uint64_t v27 = v0;
  v27[1] = RunCustomIntentCATs.intentConfirmationPromptWithTemplate(device:intentCategory:categoryVerb:localizedAppName:customDialog:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_26_19();
  return OUTLINED_FUNCTION_5_23(v28, v29, v30, v31, v32);
}

{
  uint64_t v0;
  uint64_t (*v2)(void);
  OUTLINED_FUNCTION_57_13();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    OUTLINED_FUNCTION_76_5();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_3_14(v2);
  }

uint64_t RunCustomIntentCATs.intentHandledResponse(device:intentCategory:categoryVerb:localizedAppName:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v5[8] = OUTLINED_FUNCTION_20_10(v6);
  v5[9] = OUTLINED_FUNCTION_11_0();
  v5[10] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATs.intentHandledResponse(device:intentCategory:categoryVerb:localizedAppName:)()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_19(v2, 224LL);
  v0[11] = v3;
  uint64_t v4 = OUTLINED_FUNCTION_4_3(v3, (__n128)xmmword_181AE0);
  if (v1)
  {
    uint64_t v4 = type metadata accessor for SirikitDeviceState(v4);
  }

  else
  {
    v3[3].n128_u64[1] = 0LL;
    v3[4].n128_u64[0] = 0LL;
  }

  uint64_t v5 = v0[10];
  OUTLINED_FUNCTION_16_24(v4);
  OUTLINED_FUNCTION_12_4(v7, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  __swift_getEnumTagSinglePayload(v5, 1LL, v8);
  OUTLINED_FUNCTION_41_18();
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[7].n128_u64[1] = v8;
    uint64_t v11 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = OUTLINED_FUNCTION_27_19();
  OUTLINED_FUNCTION_12_4(v12, v13, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = OUTLINED_FUNCTION_19_2();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[10].n128_u64[1] = v8;
    uint64_t v15 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v15);
  }

  OUTLINED_FUNCTION_81_8();
  OUTLINED_FUNCTION_80_5((uint64_t)"localizedAppName");
  OUTLINED_FUNCTION_12_4(v16, v17, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v18 = OUTLINED_FUNCTION_16_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v18, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[13].n128_u64[1] = v8;
    uint64_t v19 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v19);
  }

  unint64_t v20 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  v0[12] = v20;
  *unint64_t v20 = v0;
  v20[1] = RunCustomIntentCATs.disambiguateSlotValueWithCustomText(device:customIntroductionPrompt:customSelectionPrompt:localizedAppName:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_26_19();
  return OUTLINED_FUNCTION_5_23(v21, v22, v23, v24, v25);
}

uint64_t RunCustomIntentCATs.intentHandledResponseWithTemplate(device:intentCategory:categoryVerb:customDialog:localizedAppName:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(void *)(v8 + 56) = a6;
  *(void *)(v8 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v7;
  *(_BYTE *)(v8 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a7;
  *(void *)(v8 + 40) = a4;
  *(void *)(v8 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a5;
  OUTLINED_FUNCTION_68_7(a1, a2, a3);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v8 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = OUTLINED_FUNCTION_20_10(v9);
  *(void *)(v8 + 80) = OUTLINED_FUNCTION_11_0();
  *(void *)(v8 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_11_0();
  *(void *)(v8 + 96) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATs.intentHandledResponseWithTemplate(device:intentCategory:categoryVerb:customDialog:localizedAppName:shouldShowAppAttribution:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_19(v2, 320LL);
  *(void *)(v0 + 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v3;
  uint64_t v4 = OUTLINED_FUNCTION_4_3(v3, (__n128)xmmword_17F3D0);
  if (v1)
  {
    uint64_t v4 = type metadata accessor for SirikitDeviceState(v4);
  }

  else
  {
    v3[3].n128_u64[1] = 0LL;
    v3[4].n128_u64[0] = 0LL;
  }

  uint64_t v5 = *(void *)(v0 + 96);
  OUTLINED_FUNCTION_16_24(v4);
  OUTLINED_FUNCTION_12_4(v7, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  __swift_getEnumTagSinglePayload(v5, 1LL, v8);
  OUTLINED_FUNCTION_41_18();
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[7].n128_u64[1] = v8;
    uint64_t v11 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = OUTLINED_FUNCTION_27_19();
  OUTLINED_FUNCTION_12_4(v12, v13, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = OUTLINED_FUNCTION_18_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[10].n128_u64[1] = v8;
    uint64_t v15 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v15);
  }

  OUTLINED_FUNCTION_65_8();
  v3[11].n128_u64[0] = v16;
  v3[11].n128_u64[1] = v17;
  OUTLINED_FUNCTION_12_4(v18, v19, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v20 = OUTLINED_FUNCTION_17_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[13].n128_u64[1] = v8;
    uint64_t v21 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v21);
  }

  OUTLINED_FUNCTION_90_2();
  v3[14].n128_u64[0] = 0xD000000000000010LL;
  v3[14].n128_u64[1] = v22;
  OUTLINED_FUNCTION_12_4(v23, v24, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v25 = OUTLINED_FUNCTION_19_2();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v25, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[16].n128_u64[1] = v8;
    unsigned __int8 v26 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v26);
  }

  unsigned __int8 v27 = *(_BYTE *)(v0 + 128);
  v3[17].n128_u64[0] = 0xD000000000000018LL;
  v3[17].n128_u64[1] = 0x8000000000193970LL;
  v3[19].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v3[18].n128_u8[0] = v27;
  uint64_t v28 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  *(void *)(v0 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v28;
  *uint64_t v28 = v0;
  v28[1] = RunCustomIntentCATs.intentHandledResponseWithTemplate(device:intentCategory:categoryVerb:customDialog:localizedAppName:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_26_19();
  return OUTLINED_FUNCTION_5_23(v29, v30, v31, v32, v33);
}

{
  uint64_t v0;
  uint64_t (*v2)(void);
  OUTLINED_FUNCTION_57_13();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    OUTLINED_FUNCTION_76_5();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_3_14(v2);
  }

{
  uint64_t v0;
  swift_bridgeObjectRelease(*(void *)(v0 + 104));
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t RunCustomIntentCATs.introduceDisambiguationList(device:itemCount:pageSize:hasMultiplePages:customIntroductionPrompt:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, char a7, uint64_t a8)
{
  *(void *)(v9 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a8;
  *(void *)(v9 + 56) = v8;
  *(_BYTE *)(v9 + 9__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a7;
  *(_BYTE *)(v9 + 97) = a6;
  *(_BYTE *)(v9 + 96) = a4;
  *(void *)(v9 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a3;
  *(void *)(v9 + 40) = a5;
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a2;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v9 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = OUTLINED_FUNCTION_10_8(v10);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATs.introduceDisambiguationList(device:itemCount:pageSize:hasMultiplePages:customIntroductionPrompt:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 272LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_79_3(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_180120);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  char v7 = *(_BYTE *)(v0 + 96);
  *(void *)(v1 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v2;
  *(void *)(v1 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v6;
  *(void *)(v1 + 80) = 0x6E756F436D657469LL;
  *(void *)(v1 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0xE900000000000074LL;
  if ((v7 & 1) != 0)
  {
    uint64_t v9 = 0LL;
    uint64_t v8 = 0LL;
    *(void *)(v1 + 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
    *(void *)(v1 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0LL;
  }

  else
  {
    uint64_t v8 = *(void *)(v0 + 32);
    uint64_t v9 = &type metadata for Double;
  }

  char v10 = *(_BYTE *)(v0 + 97);
  *(void *)(v1 + 96) = v8;
  *(void *)(v1 + 120) = v9;
  *(void *)(v1 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0x657A695365676170LL;
  *(void *)(v1 + 136) = 0xE800000000000000LL;
  if ((v10 & 1) != 0)
  {
    uint64_t v12 = 0LL;
    uint64_t v11 = 0LL;
    *(void *)(v1 + 15__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0LL;
    *(void *)(v1 + 160) = 0LL;
  }

  else
  {
    uint64_t v11 = *(void *)(v0 + 40);
    uint64_t v12 = &type metadata for Double;
  }

  uint64_t v13 = *(void *)(v0 + 64);
  *(void *)(v1 + 14__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v11;
  *(void *)(v1 + 16__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v12;
  *(void *)(v1 + 176) = 0xD000000000000010LL;
  OUTLINED_FUNCTION_90_2();
  *(void *)(v1 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 184) = v14;
  *(_BYTE *)(v1 + 19__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v15;
  *(void *)(v1 + 216) = &type metadata for Bool;
  *(void *)(v1 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 224) = 0xD000000000000018LL;
  OUTLINED_FUNCTION_90_2();
  *(void *)(v1 + 23__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v16;
  OUTLINED_FUNCTION_12_4(v17, v18, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v19 = OUTLINED_FUNCTION_61_1();
  __swift_getEnumTagSinglePayload(v13, 1LL, v19);
  OUTLINED_FUNCTION_41_18();
  if (v20)
  {
    uint64_t v21 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v21, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    *(void *)(v1 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 264) = v19;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v1 + 240));
    OUTLINED_FUNCTION_34_2((uint64_t)boxed_opaque_existential_1);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v23 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v24 = (void *)OUTLINED_FUNCTION_77_7(v23);
  OUTLINED_FUNCTION_85_5(v24);
  OUTLINED_FUNCTION_16_9();
  return OUTLINED_FUNCTION_5_7(v25, v26, v27, v28, v29);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_24_6();
  if (v1)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_0_0();
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 72));
    OUTLINED_FUNCTION_40_0();
    uint64_t v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_3_4(v3);
  }

{
  uint64_t v0;
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t RunCustomIntentCATs.introduceNextDisambiguationPage(device:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunCustomIntentCATs.introduceNextDisambiguationPage(device:));
}

uint64_t RunCustomIntentCATs.introduceNextDisambiguationPage(device:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_72_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  uint64_t v7 = OUTLINED_FUNCTION_59_1();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_70_9(v7);
  OUTLINED_FUNCTION_48_6(v8);
  OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_55_4();
  return OUTLINED_FUNCTION_1_3(v9, v10, v11, v12, v13);
}

uint64_t RunCustomIntentCATs.offerMoreDisambiguationItems(device:remainingPages:customSelectionPrompt:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  *(void *)(v6 + 40) = a5;
  *(void *)(v6 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v5;
  *(_BYTE *)(v6 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a4;
  OUTLINED_FUNCTION_68_7(a1, a2, a3);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v6 + 56) = OUTLINED_FUNCTION_10_8(v7);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATs.offerMoreDisambiguationItems(device:remainingPages:customSelectionPrompt:)()
{
  unint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_19(v2, 176LL);
  *(void *)(v0 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v3;
  uint64_t v4 = OUTLINED_FUNCTION_4_3(v3, (__n128)xmmword_17FDF0);
  if (v1)
  {
    uint64_t v4 = type metadata accessor for SirikitDeviceState(v4);
  }

  else
  {
    v3[3].n128_u64[1] = 0LL;
    v3[4].n128_u64[0] = 0LL;
  }

  char v5 = *(_BYTE *)(v0 + 88);
  v3[3].n128_u64[0] = v1;
  v3[4].n128_u64[1] = v4;
  strcpy((char *)&v3[5], "remainingPages");
  v3[5].n128_u8[15] = -18;
  if ((v5 & 1) != 0)
  {
    uint64_t v7 = 0LL;
    unint64_t v6 = 0LL;
    v3[6].n128_u64[1] = 0LL;
    v3[7].n128_u64[0] = 0LL;
  }

  else
  {
    unint64_t v6 = *(void *)(v0 + 32);
    uint64_t v7 = &type metadata for Double;
  }

  uint64_t v8 = *(void *)(v0 + 56);
  v3[6].n128_u64[0] = v6;
  v3[7].n128_u64[1] = (unint64_t)v7;
  v3[8].n128_u64[0] = 0xD000000000000015LL;
  OUTLINED_FUNCTION_90_2();
  v3[8].n128_u64[1] = v9;
  OUTLINED_FUNCTION_12_4(v10, v11, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v12 = OUTLINED_FUNCTION_61_1();
  __swift_getEnumTagSinglePayload(v8, 1LL, v12);
  OUTLINED_FUNCTION_41_18();
  if (v13)
  {
    uint64_t v14 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    v3[10].n128_u64[1] = v12;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((__n128 *)v3[9].n128_u64);
    OUTLINED_FUNCTION_34_2((uint64_t)boxed_opaque_existential_1);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v16 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  *(void *)(v0 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v16;
  OUTLINED_FUNCTION_56_4(v16);
  OUTLINED_FUNCTION_16_9();
  return OUTLINED_FUNCTION_5_7(v17, v18, v19, v20, v21);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_56_18();
  if (v1)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_0_0();
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 64));
    OUTLINED_FUNCTION_40_0();
    uint64_t v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_3_4(v3);
  }

uint64_t RunCustomIntentCATs.offerMoreItems(device:remainingPages:nextPageSize:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  *(void *)(v7 + 40) = a5;
  *(void *)(v7 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v6;
  *(_BYTE *)(v7 + 81) = a6;
  *(_BYTE *)(v7 + 80) = a4;
  OUTLINED_FUNCTION_68_7(a1, a2, a3);
  return OUTLINED_FUNCTION_6_2((uint64_t)RunCustomIntentCATs.offerMoreItems(device:remainingPages:nextPageSize:));
}

uint64_t RunCustomIntentCATs.offerMoreItems(device:remainingPages:nextPageSize:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_19(v2, 176LL);
  *(void *)(v0 + 56) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_17FDF0;
  *(void *)(v3 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0x656369766564LL;
  *(void *)(v3 + 40) = 0xE600000000000000LL;
  if (v1)
  {
    uint64_t v4 = type metadata accessor for SirikitDeviceState(0LL);
    uint64_t v5 = v1;
  }

  else
  {
    uint64_t v5 = 0LL;
    uint64_t v4 = 0LL;
    *(void *)(v3 + 56) = 0LL;
    *(void *)(v3 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  char v6 = *(_BYTE *)(v0 + 80);
  *(void *)(v3 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v5;
  *(void *)(v3 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v4;
  strcpy((char *)(v3 + 80), "remainingPages");
  *(_BYTE *)(v3 + 95) = -18;
  if ((v6 & 1) != 0)
  {
    uint64_t v8 = 0LL;
    uint64_t v7 = 0LL;
    *(void *)(v3 + 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
    *(void *)(v3 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0LL;
  }

  else
  {
    uint64_t v7 = *(void *)(v0 + 32);
    uint64_t v8 = &type metadata for Double;
  }

  char v9 = *(_BYTE *)(v0 + 81);
  *(void *)(v3 + 96) = v7;
  *(void *)(v3 + 120) = v8;
  strcpy((char *)(v3 + 128), "nextPageSize");
  *(_BYTE *)(v3 + 141) = 0;
  *(_WORD *)(v3 + 14__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = -5120;
  if ((v9 & 1) != 0)
  {
    uint64_t v11 = 0LL;
    uint64_t v10 = 0LL;
    *(void *)(v3 + 15__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0LL;
    *(void *)(v3 + 160) = 0LL;
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 40);
    uint64_t v11 = &type metadata for Double;
  }

  *(void *)(v3 + 16__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v11;
  *(void *)(v3 + 14__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v10;
  OUTLINED_FUNCTION_5_2();
  uint64_t v12 = OUTLINED_FUNCTION_59_1();
  char v13 = (void *)OUTLINED_FUNCTION_49_6(v12);
  OUTLINED_FUNCTION_56_4(v13);
  OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_55_4();
  return OUTLINED_FUNCTION_1_3(v14, v15, v16, v17, v18);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_6_9();
  if (v1)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_0_0();
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 56));
    return OUTLINED_FUNCTION_3_4(*(uint64_t (**)(void))(v2 + 8));
  }

{
  uint64_t v0;
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t RunCustomIntentCATs.promptForSlotValue(device:parameterName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_10_8(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATs.promptForSlotValue(device:parameterName:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_50_7(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  OUTLINED_FUNCTION_28_13(v6);
  OUTLINED_FUNCTION_12_4(v8, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_7_5(v9);
  if (v10)
  {
    uint64_t v11 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v12 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v12);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v13 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v14 = (void *)OUTLINED_FUNCTION_49_6(v13);
  OUTLINED_FUNCTION_29_7(v14);
  OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_45_13();
  return OUTLINED_FUNCTION_5_23(v15, v16, v17, v18, v19);
}

uint64_t RunCustomIntentCATs.promptForSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 40) = a4;
  *(void *)(v6 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v5;
  *(_BYTE *)(v6 + 96) = a5;
  OUTLINED_FUNCTION_68_7(a1, a2, a3);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v6 + 56) = OUTLINED_FUNCTION_20_10(v7);
  *(void *)(v6 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATs.promptForSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:)()
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_19(v4, 224LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_79_3(v5);
  uint64_t v7 = OUTLINED_FUNCTION_4_3(v6, (__n128)xmmword_181AE0);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    *(void *)(v2 + 56) = 0LL;
    *(void *)(v2 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  *(void *)(v2 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v3;
  OUTLINED_FUNCTION_35_22(v7);
  OUTLINED_FUNCTION_12_4(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_30_7(v10);
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v2 + 120) = v0;
    uint64_t v13 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v13);
    OUTLINED_FUNCTION_12_8();
  }

  OUTLINED_FUNCTION_54_17();
  OUTLINED_FUNCTION_67_7((uint64_t)"localizedAppName");
  OUTLINED_FUNCTION_12_4(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = OUTLINED_FUNCTION_41_5();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v2 + 16__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v0;
    uint64_t v17 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v17);
  }

  OUTLINED_FUNCTION_78_6();
  *(void *)(v2 + 216) = &type metadata for Bool;
  *(_BYTE *)(v2 + 19__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v18;
  uint64_t v19 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v20 = (void *)OUTLINED_FUNCTION_77_7(v19);
  OUTLINED_FUNCTION_56_4(v20);
  OUTLINED_FUNCTION_26_19();
  return OUTLINED_FUNCTION_5_23(v21, v22, v23, v24, v25);
}

{
  uint64_t v0;
  uint64_t (*v2)(void);
  OUTLINED_FUNCTION_24_6();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_0_0();
  }

  else
  {
    OUTLINED_FUNCTION_53_4();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_3_4(v2);
  }

uint64_t RunCustomIntentCATs.readDisambiguationItems(device:items:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return OUTLINED_FUNCTION_6_2((uint64_t)RunCustomIntentCATs.readDisambiguationItems(device:items:));
}

uint64_t RunCustomIntentCATs.readDisambiguationItems(device:items:)()
{
  unint64_t v1 = v0[3];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_19(v2, 128LL);
  v0[6] = v3;
  uint64_t v4 = OUTLINED_FUNCTION_4_3(v3, (__n128)xmmword_17E660);
  if (v1)
  {
    uint64_t v4 = type metadata accessor for SirikitDeviceState(v4);
  }

  else
  {
    v3[3].n128_u64[1] = 0LL;
    v3[4].n128_u64[0] = 0LL;
  }

  unint64_t v5 = v0[4];
  v3[3].n128_u64[0] = v1;
  v3[4].n128_u64[1] = v4;
  v3[5].n128_u64[0] = 0x736D657469LL;
  v3[5].n128_u64[1] = 0xE500000000000000LL;
  v3[7].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  v3[6].n128_u64[0] = v5;
  uint64_t v6 = *((unsigned int *)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:) + 1);
  swift_retain(v1);
  swift_bridgeObjectRetain(v5);
  uint64_t v7 = (void *)swift_task_alloc(v6);
  v0[7] = v7;
  OUTLINED_FUNCTION_29_7(v7);
  OUTLINED_FUNCTION_35_8();
  return v9();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *(void *)(*v1 + 56);
  uint64_t v3 = *v1;
  *(void *)(v3 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_0_0();
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v3 + 48));
    return OUTLINED_FUNCTION_3_4(*(uint64_t (**)(void))(v3 + 8));
  }

uint64_t RunCustomIntentCATs.unsupportedSlotValue(device:parameterName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_10_8(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATs.unsupportedSlotValue(device:parameterName:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  unint64_t v5 = (__n128 *)OUTLINED_FUNCTION_50_7(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  OUTLINED_FUNCTION_28_13(v6);
  OUTLINED_FUNCTION_12_4(v8, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_7_5(v9);
  if (v10)
  {
    uint64_t v11 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v12 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v12);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v13 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v14 = (void *)OUTLINED_FUNCTION_49_6(v13);
  OUTLINED_FUNCTION_29_7(v14);
  OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_45_13();
  return OUTLINED_FUNCTION_5_23(v15, v16, v17, v18, v19);
}

uint64_t RunCustomIntentCATs.unsupportedSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 40) = a4;
  *(void *)(v6 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v5;
  *(_BYTE *)(v6 + 96) = a5;
  OUTLINED_FUNCTION_68_7(a1, a2, a3);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v6 + 56) = OUTLINED_FUNCTION_20_10(v7);
  *(void *)(v6 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATs.unsupportedSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:)()
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_19(v4, 224LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_79_3(v5);
  uint64_t v7 = OUTLINED_FUNCTION_4_3(v6, (__n128)xmmword_181AE0);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    *(void *)(v2 + 56) = 0LL;
    *(void *)(v2 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  *(void *)(v2 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v3;
  OUTLINED_FUNCTION_35_22(v7);
  OUTLINED_FUNCTION_12_4(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_30_7(v10);
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v2 + 120) = v0;
    uint64_t v13 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v13);
    OUTLINED_FUNCTION_12_8();
  }

  OUTLINED_FUNCTION_54_17();
  OUTLINED_FUNCTION_67_7((uint64_t)"localizedAppName");
  OUTLINED_FUNCTION_12_4(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = OUTLINED_FUNCTION_41_5();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v2 + 16__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v0;
    uint64_t v17 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v17);
  }

  OUTLINED_FUNCTION_78_6();
  *(void *)(v2 + 216) = &type metadata for Bool;
  *(_BYTE *)(v2 + 19__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v18;
  uint64_t v19 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v20 = (void *)OUTLINED_FUNCTION_77_7(v19);
  OUTLINED_FUNCTION_56_4(v20);
  OUTLINED_FUNCTION_26_19();
  return OUTLINED_FUNCTION_5_23(v21, v22, v23, v24, v25);
}

uint64_t type metadata accessor for RunCustomIntentCATs(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for RunCustomIntentCATs;
  if (!type metadata singleton initialization cache for RunCustomIntentCATs) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RunCustomIntentCATs);
  }
  return result;
}

uint64_t type metadata completion function for RunCustomIntentCATs(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + class metadata base offset for RunCustomIntentCATs);
}

uint64_t ObjC metadata update function for RunCustomIntentCATs()
{
  return type metadata accessor for RunCustomIntentCATs(0LL);
}

uint64_t OUTLINED_FUNCTION_5_23(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t OUTLINED_FUNCTION_16_24(uint64_t result)
{
  *(void *)(v2 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v1;
  *(void *)(v2 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = result;
  strcpy((char *)(v2 + 80), "intentCategory");
  *(_BYTE *)(v2 + 95) = -18;
  return result;
}

  ;
}

uint64_t OUTLINED_FUNCTION_27_19()
{
  uint64_t result = *(void *)(v0 + 40);
  strcpy((char *)(v1 + 128), "categoryVerb");
  *(_BYTE *)(v1 + 141) = 0;
  *(_WORD *)(v1 + 14__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = -5120;
  return result;
}

uint64_t OUTLINED_FUNCTION_28_13(uint64_t result)
{
  *(void *)(v2 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v1;
  *(void *)(v2 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = result;
  strcpy((char *)(v2 + 80), "parameterName");
  *(_WORD *)(v2 + 9__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = -4864;
  return result;
}

uint64_t OUTLINED_FUNCTION_35_22(uint64_t result)
{
  *(void *)(v1 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = result;
  strcpy((char *)(v1 + 80), "customPrompt");
  *(_BYTE *)(v1 + 9__swift_destroy_boxed_opaque_existential_1Tm(v0 + 3) = 0;
  *(_WORD *)(v1 + 9__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = -5120;
  return result;
}

  ;
}

uint64_t OUTLINED_FUNCTION_43_16()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 96);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v0;
  return swift_task_dealloc(v5);
}

  ;
}

uint64_t OUTLINED_FUNCTION_54_17()
{
  return *(void *)(v0 + 40);
}

uint64_t OUTLINED_FUNCTION_56_18()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 72);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 80) = v0;
  return swift_task_dealloc(v5);
}

uint64_t OUTLINED_FUNCTION_57_13()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 112);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 120) = v0;
  return swift_task_dealloc(v5);
}

  ;
}

void OUTLINED_FUNCTION_66_10()
{
  *(void *)(v1 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v0;
}

void OUTLINED_FUNCTION_67_7(uint64_t a1@<X8>)
{
  *(void *)(v2 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v1;
  *(void *)(v2 + 136) = (a1 - 32) | 0x8000000000000000LL;
}

uint64_t OUTLINED_FUNCTION_68_7(uint64_t result, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_70_9(uint64_t result)
{
  *(void *)(v1 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_71_8(uint64_t result)
{
  *(void *)(v2 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v1;
  *(void *)(v2 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_72_4(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_74_9()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 88));
}

uint64_t OUTLINED_FUNCTION_75_8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = a5;
  void v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  _OWORD v6[2] = result;
  v6[3] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_76_5()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 104));
}

uint64_t OUTLINED_FUNCTION_77_7(uint64_t result)
{
  *(void *)(v1 + 80) = result;
  return result;
}

void OUTLINED_FUNCTION_78_6()
{
  *(void *)(v2 + 176) = v0;
  *(void *)(v2 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 184) = (v1 - 32) | 0x8000000000000000LL;
}

uint64_t OUTLINED_FUNCTION_79_3(uint64_t result)
{
  *(void *)(v1 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = result;
  return result;
}

void OUTLINED_FUNCTION_80_5(uint64_t a1@<X8>)
{
  *(void *)(v2 + 176) = v1;
  *(void *)(v2 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 184) = (a1 - 32) | 0x8000000000000000LL;
}

uint64_t OUTLINED_FUNCTION_81_8()
{
  return *(void *)(v0 + 48);
}

  ;
}

uint64_t OUTLINED_FUNCTION_85_5(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 16);
}

uint64_t OUTLINED_FUNCTION_89_4()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 72));
}

  ;
}

uint64_t OUTLINED_FUNCTION_91_2()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 88));
}

uint64_t CustomIntentHandoffToCompanionFlowStrategy.__allocating_init(runner:deviceState:)( __int128 *a1, __int128 *a2)
{
  uint64_t v5 = swift_allocObject(v2, 96LL, 7LL);
  outlined init with take of AceServiceInvokerAsync(a1, v5 + 56);
  outlined init with take of AceServiceInvokerAsync(a2, v5 + 16);
  return v5;
}

uint64_t CustomIntentHandoffToCompanionFlowStrategy.init(runner:deviceState:)(__int128 *a1, __int128 *a2)
{
  return v2;
}

uint64_t CustomIntentHandoffToCompanionFlowStrategy.makeHandoffResponse()(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[14] = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for AceOutput(0LL);
  v2[15] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[16] = v5;
  v2[17] = OUTLINED_FUNCTION_9_0(v5);
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  v2[18] = OUTLINED_FUNCTION_9_0(*(void *)(v6 - 8));
  uint64_t v7 = type metadata accessor for TemplatingResult(0LL);
  v2[19] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[20] = v8;
  v2[21] = OUTLINED_FUNCTION_9_0(v8);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v2 = *(void *)(*(void *)v1 + 240LL);
  *(void *)(*(void *)v1 + 248LL) = a1;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentHandoffToCompanionFlowStrategy.makeHandoffResponse()()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = (void *)v0[13];
  uint64_t v3 = type metadata accessor for RunCustomIntentCATs(0LL);
  static CATOption.defaultMode.getter(v3);
  uint64_t v4 = (void *)CATWrapper.__allocating_init(options:globals:)(v1, 0LL);
  v0[22] = v4;
  uint64_t v5 = v2 + 2;
  uint64_t v6 = v2[5];
  uint64_t v7 = v2[6];
  __swift_project_boxed_opaque_existential_1(v5, v6);
  uint64_t v8 = DeviceState.asSiriKitDeviceState()(v6, v7);
  v0[23] = v8;
  uint64_t v9 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunCustomIntentCATs + *v4 + 104));
  v0[24] = v9;
  *uint64_t v9 = v0;
  v9[1] = CustomIntentHandoffToCompanionFlowStrategy.makeHandoffResponse();
  return v11(v0[21], v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v2 = *(void *)(*(void *)v1 + 192LL);
  *(void *)(*(void *)v1 + 20_swift_stdlib_reportUnimplementedInitializer("SiriLinkFlowPlugin.SiriStateObserver", 36LL, "init()", 6LL, 0LL) = v0;
  swift_task_dealloc(v2);
  if (!v0)
  {
    swift_release();
    swift_release();
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void **)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v4 = v2 + 2;
  uint64_t v5 = v2[5];
  uint64_t v6 = v2[6];
  __swift_project_boxed_opaque_existential_1(v2 + 2, v5);
  uint64_t v7 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v5, v6);
  uint64_t v8 = type metadata accessor for NLContextUpdate(0LL);
  __swift_storeEnumTagSinglePayload(v3, 1LL, 1LL, v8);
  *(void *)(v0 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0LL;
  *(_OWORD *)(v0 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v1,  v4,  v7 & 1,  _swiftEmptyArrayStorage,  0LL,  1LL,  v3,  _swiftEmptyArrayStorage,  v0 + 16);
  outlined destroy of URL?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v3, &demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to static NotificationTemplates.genericHandoffNotification()[1]);
  *(void *)(v0 + 20__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v9;
  *uint64_t v9 = v0;
  v9[1] = CustomIntentHandoffToCompanionFlowStrategy.makeHandoffResponse();
  return static NotificationTemplates.genericHandoffNotification()(v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v1 = *(void **)(v0 + 104);
  uint64_t v2 = v1[10];
  uint64_t v3 = v1[11];
  __swift_project_boxed_opaque_existential_1(v1 + 7, v2);
  uint64_t v4 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v3 + 32));
  *(void *)(v0 + 240) = v4;
  void *v4 = v0;
  v4[1] = CustomIntentHandoffToCompanionFlowStrategy.makeHandoffResponse();
  return v6(v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *boxed_opaque_existential_1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v10 = *(void *)(v0 + 160);
  char v11 = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v7 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 128);
  uint64_t v12 = *(void *)(v0 + 144);
  uint64_t v13 = *(void *)(v0 + 112);
  *(void *)(v0 + 80) = v7;
  *(void *)(v0 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = &protocol witness table for AceOutput;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v0 + 56));
  (*(void (**)(void *, uint64_t, uint64_t))(v6 + 16))(boxed_opaque_existential_1, v5, v7);
  HandoffResponse.init(output:companionNotificationText:runSiriKitExecutorCommand:)(v0 + 56, v2, v3, v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v4, v11);
  swift_task_dealloc(v4);
  swift_task_dealloc(v12);
  swift_task_dealloc(v5);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_5_24();
  swift_task_dealloc(v0);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v2 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 152);
  (*(void (**)(void, void))(*(void *)(v0 + 128) + 8LL))(*(void *)(v0 + 136), *(void *)(v0 + 120));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  OUTLINED_FUNCTION_5_24();
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v1);
  return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentHandoffToCompanionFlowStrategy.makeHandoffResponse()(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(*v3 + 208);
  *(void *)(*v3 + 216) = v2;
  swift_task_dealloc(v7);
  if (!v2)
  {
    *(void *)(v6 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 224) = a2;
    *(void *)(v6 + 23__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a1;
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t CustomIntentHandoffToCompanionFlowStrategy.deinit()
{
  return v0;
}

uint64_t CustomIntentHandoffToCompanionFlowStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 96LL, 7LL);
}

uint64_t protocol witness for HandoffSessionToCompanionFlowStrategyAsync.makeHandoffResponse() in conformance CustomIntentHandoffToCompanionFlowStrategy( uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 104LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for implicit closure #1 in CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:);
  return v7(a1);
}

uint64_t type metadata accessor for CustomIntentHandoffToCompanionFlowStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin42CustomIntentHandoffToCompanionFlowStrategy);
}

uint64_t OUTLINED_FUNCTION_5_24()
{
  return swift_task_dealloc(*(void *)(v0 + 168));
}

uint64_t CustomIntentHandleIntentFlowStrategy.__allocating_init(voiceCommandName:siriEnvironment:deviceState:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = OUTLINED_FUNCTION_19(v4, 64LL);
  CustomIntentHandleIntentFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:)(a1, a2, a3, a4);
  return v9;
}

uint64_t CustomIntentHandleIntentFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v8);
  outlined init with copy of DeviceState((uint64_t)a4, v4 + 16);
  outlined init with copy of DeviceState((uint64_t)a4, (uint64_t)v27);
  type metadata accessor for RunCustomIntentCATs(0LL);
  OUTLINED_FUNCTION_6_24();
  uint64_t v9 = OUTLINED_FUNCTION_23_21();
  type metadata accessor for RunCustomIntentCATsSimple(0LL);
  OUTLINED_FUNCTION_6_24();
  uint64_t v10 = OUTLINED_FUNCTION_24_18();
  type metadata accessor for RunVoiceCommandCATs(0LL);
  OUTLINED_FUNCTION_6_24();
  uint64_t v11 = OUTLINED_FUNCTION_23_21();
  type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  OUTLINED_FUNCTION_6_24();
  uint64_t v12 = OUTLINED_FUNCTION_24_18();
  uint64_t v13 = type metadata accessor for ContinueInAppCATWrapperSimple(0LL);
  memset(v25, 0, sizeof(v25));
  uint64_t v26 = 0LL;
  OUTLINED_FUNCTION_51(v13);
  outlined init with copy of DeviceState?((uint64_t)v25, (uint64_t)v24);
  SiriKitFlowCATWrapperSimple.init(deviceState:)();
  uint64_t v15 = v14;
  outlined destroy of DeviceState?((uint64_t)v25);
  uint64_t v16 = type metadata accessor for ResponseFactory(0LL);
  OUTLINED_FUNCTION_51(v16);
  uint64_t v17 = ResponseFactory.init()();
  uint64_t v18 = type metadata accessor for CustomIntentHandleIntentResponseGenerator();
  uint64_t v19 = (void *)OUTLINED_FUNCTION_19(v18, 144LL);
  outlined init with copy of DeviceState((uint64_t)v27, (uint64_t)v25);
  swift_retain(v17);
  uint64_t v20 = specialized CustomIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)( a1,  a2,  a3,  v25,  v9,  v10,  v11,  v12,  v15,  v17,  v19);
  __swift_destroy_boxed_opaque_existential_1Tm(v27);
  OUTLINED_FUNCTION_12_5();
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  *(void *)(v5 + 56) = v20;
  return v5;
}

uint64_t CustomIntentHandleIntentFlowStrategy.makePromptForDeviceUnlock(rchRecord:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)CustomIntentHandleIntentFlowStrategy.makePromptForDeviceUnlock(rchRecord:));
}

uint64_t CustomIntentHandleIntentFlowStrategy.makePromptForDeviceUnlock(rchRecord:)()
{
  uint64_t v2 = *(void *)(v0[4] + 56LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INIntent, INIntentResponse>);
  uint64_t v3 = IntentResolutionRecord.app.getter();
  uint64_t v4 = OUTLINED_FUNCTION_15_15(v3);
  v0[6] = v4;
  uint64_t v5 = *(int **)(*(void *)v2 + 240LL);
  uint64_t v8 = (int *)((char *)v5 + *v5);
  uint64_t v6 = (void *)swift_task_alloc(v5[1]);
  v0[7] = v6;
  *uint64_t v6 = v0;
  v6[1] = CustomIntentHandleIntentFlowStrategy.makePromptForDeviceUnlock(rchRecord:);
  return ((uint64_t (*)(void, uint64_t, uint64_t))v8)(v0[2], v1, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(void);
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 56);
  *(void *)(*v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    return swift_task_switch(CustomIntentHandleIntentFlowStrategy.makePromptForDeviceUnlock(rchRecord:), 0LL, 0LL);
  }

  OUTLINED_FUNCTION_12_5();
  uint64_t v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_3_4(v5);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_12_5();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentHandleIntentFlowStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)CustomIntentHandleIntentFlowStrategy.makeIntentHandledResponse(rchRecord:));
}

uint64_t CustomIntentHandleIntentFlowStrategy.makeIntentHandledResponse(rchRecord:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INIntent, INIntentResponse>);
  uint64_t v2 = (void *)IntentResolutionRecord.intent.getter(v1);
  uint64_t v3 = (void *)IntentResolutionRecord.intentResponse.getter(v1);
  char v4 = CustomIntentHandleIntentFlowStrategy.isReadRequest(intent:intentResponse:deviceState:)(v2, v3);

  if ((v4 & 1) != 0)
  {
    type metadata accessor for EmptyOutput(0LL);
    static EmptyOutput.instance.getter();
    uint64_t v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return v5();
  }

  else
  {
    uint64_t v7 = *(void *)(v0[4] + 56LL);
    v0[5] = IntentResolutionRecord.app.getter(v1);
    v0[6] = IntentResolutionRecord.intent.getter(v1);
    v0[7] = IntentResolutionRecord.intentResponse.getter(v1);
    uint64_t v8 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(*(void *)v7 + 224LL));
    v0[8] = v8;
    uint64_t v9 = OUTLINED_FUNCTION_13_19(v8);
    return OUTLINED_FUNCTION_4_24(v9, v10, v11, v12, v13);
  }

{
  uint64_t v0;
  void *v1;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_6_9();
  if (v0) {
    return OUTLINED_FUNCTION_14_0();
  }
  OUTLINED_FUNCTION_22_16();

  OUTLINED_FUNCTION_12_5();
  uint64_t v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_22_2(v3);
}

{
  void *v0;
  uint64_t v1;
  OUTLINED_FUNCTION_21_18();

  OUTLINED_FUNCTION_12_5();
  return OUTLINED_FUNCTION_3_4(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t CustomIntentHandleIntentFlowStrategy.makeFailureHandlingIntentResponse(rchRecord:)( uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)CustomIntentHandleIntentFlowStrategy.makeFailureHandlingIntentResponse(rchRecord:));
}

uint64_t CustomIntentHandleIntentFlowStrategy.makeFailureHandlingIntentResponse(rchRecord:)()
{
  uint64_t v1 = *(void *)(v0[4] + 56LL);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INIntent, INIntentResponse>);
  uint64_t v3 = IntentResolutionRecord.app.getter(v2);
  v0[6] = OUTLINED_FUNCTION_15_15(v3);
  v0[7] = IntentResolutionRecord.intentResponse.getter(v2);
  char v4 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(*(void *)v1 + 256LL));
  v0[8] = v4;
  uint64_t v5 = OUTLINED_FUNCTION_13_19(v4);
  return OUTLINED_FUNCTION_4_24(v5, v6, v7, v8, v10);
}

uint64_t CustomIntentHandleIntentFlowStrategy.isReadRequest(intent:intentResponse:deviceState:)( void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for InteractionType(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v30[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v30[-1] - v9;
  uint64_t v11 = CustomIntentHandleIntentFlowStrategy.getReadItems(intent:intentResponse:)(a1, a2);
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = swift_bridgeObjectRelease(v11);
  OUTLINED_FUNCTION_20_25(v13, (uint64_t)v36);
  if (v12)
  {
    uint64_t v14 = OUTLINED_FUNCTION_7_16(v36);
    char v16 = dispatch thunk of DeviceState.isWatch.getter(v14, v15);
    outlined init with copy of DeviceState((uint64_t)v36, (uint64_t)v35);
    if ((v16 & 1) != 0)
    {
      OUTLINED_FUNCTION_19_18();
    }

    else
    {
      uint64_t v18 = OUTLINED_FUNCTION_7_16(v35);
      char v20 = dispatch thunk of DeviceState.isCarPlay.getter(v18, v19);
      OUTLINED_FUNCTION_19_18();
      if ((v20 & 1) == 0)
      {
        uint64_t v22 = OUTLINED_FUNCTION_7_16(v34);
        char v23 = dispatch thunk of DeviceState.isHomePod.getter(v22);
        OUTLINED_FUNCTION_17_25();
        if ((v23 & 1) == 0)
        {
          uint64_t v24 = OUTLINED_FUNCTION_7_16(v33);
          char v25 = dispatch thunk of DeviceState.isEyesFree.getter(v24);
          OUTLINED_FUNCTION_16_25();
          if ((v25 & 1) == 0)
          {
            uint64_t v26 = v31;
            uint64_t v27 = v32;
            __swift_project_boxed_opaque_existential_1(v30, v31);
            dispatch thunk of DeviceState.interactionType.getter(v26, v27);
            (*(void (**)(char *, void, uint64_t))(v5 + 104))( v8,  enum case for InteractionType.dialogDriven(_:),  v4);
            char v17 = specialized == infix<A>(_:_:)();
            uint64_t v28 = *(void (**)(char *, uint64_t))(v5 + 8);
            v28(v8, v4);
            v28(v10, v4);
            goto LABEL_9;
          }

uint64_t CustomIntentHandleIntentFlowStrategy.getReadItems(intent:intentResponse:)(void *a1, void *a2)
{
  if (!a2) {
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  id v3 = a2;
  uint64_t v4 = outlined bridged method (pb) of @objc INIntentResponse.propertiesByName.getter(v3);
  if (!v4)
  {

    return (uint64_t)_swiftEmptyArrayStorage;
  }

  uint64_t v5 = v4;
  id v6 = [a1 typeName];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  v10._uint64_t countAndFlagsBits = v7;
  v10._object = v9;
  object = INIntentResponse.localizedResponseTemplate(intentName:)(v10)._object;
  type metadata accessor for CATSpeakableString();
  uint64_t v12 = static CATSpeakableString.getPropertiesInTemplateString(templateString:)();
  swift_bridgeObjectRelease(v9);
  uint64_t result = swift_bridgeObjectRelease(object);
  int64_t v14 = 0LL;
  uint64_t v44 = v5 + 64;
  uint64_t v15 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & *(void *)(v5 + 64);
  uint64_t v18 = &v57;
  int64_t v45 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v46 = v5;
  while (v17)
  {
    unint64_t v19 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    unint64_t v20 = v19 | (v14 << 6);
LABEL_8:
    outlined init with copy of AnyHashable(*(void *)(v5 + 48) + 40 * v20, (uint64_t)&v50);
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v52 + 8);
LABEL_27:
    outlined init with take of (key: AnyHashable, value: Any)?((uint64_t)&v50, (uint64_t)&v54);
    if (!*((void *)&v55 + 1))
    {
      swift_bridgeObjectRelease(v12);
      swift_release();

      return (uint64_t)_swiftEmptyArrayStorage;
    }

    outlined init with take of Any(v18, v49);
    __int128 v50 = v54;
    __int128 v51 = v55;
    *(void *)&v52[0] = v56;
    if ((swift_dynamicCast(&v47, &v50, &type metadata for AnyHashable, &type metadata for String, 6LL) & 1) != 0)
    {
      int64_t v24 = v14;
      char v25 = v18;
      uint64_t v26 = v48;
      uint64_t v27 = v12[2];
      if (v27)
      {
        uint64_t v28 = v47;
        uint64_t v29 = v12[4];
        uint64_t v30 = v12[5];
        BOOL v31 = v29 == v47 && v30 == v48;
        if (v31 || (OUTLINED_FUNCTION_14_27(v29, v30) & 1) != 0)
        {
LABEL_44:
          swift_bridgeObjectRelease(v26);
          uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v49);
          goto LABEL_45;
        }

        if (v27 != 1)
        {
          uint64_t v33 = v12[6];
          uint64_t v34 = v12[7];
          if (v33 == v28 && v34 == v26) {
            goto LABEL_44;
          }
          uint64_t result = OUTLINED_FUNCTION_14_27(v33, v34);
          if ((result & 1) != 0) {
            goto LABEL_44;
          }
          if (v27 != 2)
          {
            uint64_t v36 = v12 + 9;
            uint64_t v37 = 2LL;
            do
            {
              uint64_t v38 = v37 + 1;
              if (__OFADD__(v37, 1LL)) {
                goto LABEL_61;
              }
              uint64_t v39 = *(v36 - 1);
              uint64_t v40 = *v36;
              if (v39 == v28 && v40 == v26) {
                goto LABEL_44;
              }
              uint64_t v43 = v37;
              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, v28, v26, 0LL);
              if ((result & 1) != 0) {
                goto LABEL_44;
              }
              v36 += 2;
              uint64_t v37 = v43 + 1;
            }

            while (v38 != v27);
          }
        }
      }

      swift_bridgeObjectRelease(v26);
      outlined init with take of Any(v49, &v50);
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      uint64_t result = swift_dynamicCast(&v47, &v50, (char *)&type metadata for Any + 8, v32, 6LL);
      if ((result & 1) != 0)
      {
        swift_bridgeObjectRelease(v12);

        uint64_t v42 = v47;
        swift_release();
        return v42;
      }

uint64_t InstallShortcutViewFactory.deinit()
{
  return v0;
}

uint64_t InstallShortcutViewFactory.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:) in conformance CustomIntentHandleIntentFlowStrategy( uint64_t a1, uint64_t a2)
{
  id v6 = *(int **)(**(void **)v2 + 104LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for VoiceShortcutClientWrapping.installVoiceShortcut(url:voiceCommandPhrase:) in conformance VoiceShortcutClientWrapper;
  return v9(a1, a2);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance CustomIntentHandleIntentFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CustomIntentHandleIntentFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for VoiceShortcutClientWrapping.installVoiceShortcut(url:voiceCommandPhrase:) in conformance VoiceShortcutClientWrapper;
  return HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:) in conformance CustomIntentHandleIntentFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CustomIntentHandleIntentFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for VoiceShortcutClientWrapping.installVoiceShortcut(url:voiceCommandPhrase:) in conformance VoiceShortcutClientWrapper;
  return HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:) in conformance CustomIntentHandleIntentFlowStrategy( uint64_t a1, uint64_t a2)
{
  id v6 = *(int **)(**(void **)v2 + 112LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for VoiceShortcutClientWrapping.installVoiceShortcut(url:voiceCommandPhrase:) in conformance VoiceShortcutClientWrapper;
  return v9(a1, a2);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:) in conformance CustomIntentHandleIntentFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CustomIntentHandleIntentFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for VoiceShortcutClientWrapping.installVoiceShortcut(url:voiceCommandPhrase:) in conformance VoiceShortcutClientWrapper;
  return HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:) in conformance CustomIntentHandleIntentFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CustomIntentHandleIntentFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for VoiceShortcutClientWrapping.installVoiceShortcut(url:voiceCommandPhrase:) in conformance VoiceShortcutClientWrapper;
  return HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance CustomIntentHandleIntentFlowStrategy( uint64_t a1, uint64_t a2)
{
  id v6 = *(int **)(**(void **)v2 + 120LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for VoiceShortcutClientWrapping.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:) in conformance VoiceShortcutClientWrapper;
  return v9(a1, a2);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance CustomIntentHandleIntentFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CustomIntentHandleIntentFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for Flow.onAsync(input:) in conformance WFExecuteCustomIntentFlow;
  return IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)(a1, a2, v9, a4);
}

uint64_t outlined destroy of DeviceState?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeviceState?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *specialized CustomIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)( uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  uint64_t v18 = type metadata accessor for ResponseFactory(0LL);
  void v33[3] = v18;
  v33[4] = &protocol witness table for ResponseFactory;
  v33[0] = a10;
  a11[10] = a1;
  a11[11] = a2;
  OUTLINED_FUNCTION_20_25(v18, (uint64_t)(a11 + 2));
  a11[9] = a3;
  a11[12] = a9;
  uint64_t v19 = outlined init with copy of DeviceState((uint64_t)v33, (uint64_t)(a11 + 13));
  OUTLINED_FUNCTION_20_25(v19, (uint64_t)v32);
  uint64_t v20 = one-time initialization token for shared;
  swift_bridgeObjectRetain(a2);
  swift_retain(a3);
  swift_retain(a9);
  if (v20 != -1) {
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  }
  uint64_t v21 = static WFDialogState.shared;
  swift_retain(static WFDialogState.shared);
  swift_release();
  swift_release();
  uint64_t v22 = type metadata accessor for AppNameResolver();
  uint64_t v23 = OUTLINED_FUNCTION_19(v22, 16LL);
  __swift_destroy_boxed_opaque_existential_1Tm(v33);
  uint64_t v24 = type metadata accessor for CustomIntentsDialogTemplating();
  uint64_t v25 = OUTLINED_FUNCTION_19(v24, 152LL);
  specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)( v32,  v21,  0LL,  1,  a5,  a6,  a7,  a8,  v23,  v25);
  uint64_t v27 = v26;
  a11[7] = v26;
  uint64_t v28 = a11[9];
  uint64_t v29 = type metadata accessor for CustomIntentSnippetProvider();
  OUTLINED_FUNCTION_19(v29, 88LL);
  a11[8] = CustomIntentSnippetProvider.init(voiceCommandName:templatingService:deviceState:siriEnvironment:)( a1,  a2,  v27,  a4,  v28);
  swift_retain(v27);
  swift_retain(v28);
  return a11;
}

unint64_t lazy protocol witness table accessor for type CustomIntentHandleIntentFlowStrategy and conformance CustomIntentHandleIntentFlowStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentHandleIntentFlowStrategy and conformance CustomIntentHandleIntentFlowStrategy;
  if (!lazy protocol witness table cache variable for type CustomIntentHandleIntentFlowStrategy and conformance CustomIntentHandleIntentFlowStrategy)
  {
    uint64_t v1 = type metadata accessor for CustomIntentHandleIntentFlowStrategy();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CustomIntentHandleIntentFlowStrategy, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentHandleIntentFlowStrategy and conformance CustomIntentHandleIntentFlowStrategy);
  }

  return result;
}

uint64_t type metadata accessor for CustomIntentHandleIntentFlowStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin36CustomIntentHandleIntentFlowStrategy);
}

uint64_t outlined init with take of (key: AnyHashable, value: Any)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: AnyHashable, value: Any)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_4_24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t OUTLINED_FUNCTION_6_24()
{
  return static CATOption.defaultMode.getter();
}

uint64_t OUTLINED_FUNCTION_13_19(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 16);
}

uint64_t OUTLINED_FUNCTION_14_27(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v2, v3, 0LL);
}

uint64_t OUTLINED_FUNCTION_15_15(uint64_t a1)
{
  *(void *)(v2 + 40) = a1;
  return IntentResolutionRecord.intent.getter(v1);
}

uint64_t OUTLINED_FUNCTION_16_25()
{
  return outlined init with copy of DeviceState(v0 - 104, v0 - 264);
}

uint64_t OUTLINED_FUNCTION_17_25()
{
  return outlined init with copy of DeviceState(v0 - 104, v0 - 224);
}

uint64_t OUTLINED_FUNCTION_19_18()
{
  return outlined init with copy of DeviceState(v0 - 104, v0 - 184);
}

uint64_t OUTLINED_FUNCTION_20_25(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of DeviceState(v2, a2);
}

void OUTLINED_FUNCTION_21_18()
{
}

void OUTLINED_FUNCTION_22_16()
{
}

uint64_t OUTLINED_FUNCTION_23_21()
{
  return CATWrapper.__allocating_init(options:globals:)(v0, 0LL);
}

uint64_t OUTLINED_FUNCTION_24_18()
{
  return CATWrapperSimple.__allocating_init(options:globals:)(v0, 0LL);
}

void ShortcutsLinkRCHFlowStrategy.__allocating_init(appBundleId:actionMetadata:showWhenRun:deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:outputPublisher:aceServiceInvoker:linkActionPatterns:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22)
{
  char v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v31 = OUTLINED_FUNCTION_19(v22, 176LL);
  uint64_t v32 = a22[3];
  uint64_t v33 = a22[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a22, v32);
  OUTLINED_FUNCTION_66_1();
  __chkstk_darwin(v34);
  OUTLINED_FUNCTION_35();
  uint64_t v37 = v36 - v35;
  OUTLINED_FUNCTION_75(v36 - v35, v39, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 16));
  OUTLINED_FUNCTION_90_3(v30, v28, v26, v24, v40, v41, v42, v43, a21, v37, v31, v32, v33);
  __swift_destroy_boxed_opaque_existential_1Tm(a22);
  OUTLINED_FUNCTION_62_12();
  OUTLINED_FUNCTION_24_0();
}

void ShortcutsLinkRCHFlowStrategy.init(appBundleId:actionMetadata:showWhenRun:deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:outputPublisher:aceServiceInvoker:linkActionPatterns:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22)
{
  char v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v31 = a22[3];
  uint64_t v32 = a22[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a22, v31);
  OUTLINED_FUNCTION_66_1();
  __chkstk_darwin(v33);
  OUTLINED_FUNCTION_35();
  uint64_t v36 = v35 - v34;
  OUTLINED_FUNCTION_75(v35 - v34, v38, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 16));
  OUTLINED_FUNCTION_90_3(v30, v28, v26, v24, v39, v40, v41, v42, a21, v36, v22, v31, v32);
  __swift_destroy_boxed_opaque_existential_1Tm(a22);
  OUTLINED_FUNCTION_62_12();
  OUTLINED_FUNCTION_24_0();
}

void ShortcutsLinkRCHFlowStrategy.flowFor(action:needsValueRequest:actionMetadata:)()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_35();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = *(void *)(v1 + 16);
  uint64_t v13 = *(void *)(v1 + 24);
  OUTLINED_FUNCTION_39_21(v1 + 128);
  id v14 = v7;
  id v15 = v5;
  OUTLINED_FUNCTION_9_9();
  id v16 = v3;
  static Device.current.getter(v25, v16);
  type metadata accessor for RunLinkActionCATs(0LL);
  OUTLINED_FUNCTION_29_2();
  uint64_t v17 = CATWrapper.__allocating_init(options:globals:)(v11, 0LL);
  type metadata accessor for RunLinkActionCATsSimple(0LL);
  OUTLINED_FUNCTION_29_2();
  uint64_t v18 = CATWrapperSimple.__allocating_init(options:globals:)(v11, 0LL);
  uint64_t v19 = type metadata accessor for ShortcutsLinkPromptForValueFlowStrategy();
  OUTLINED_FUNCTION_19(v19, 160LL);
  ShortcutsLinkPromptForValueFlowStrategy.init(action:needsValueRequest:appBundleId:actionMetadata:deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:serviceInvoker:)( v14,  v15,  v12,  v13,  v16,  v25,  v17,  v18,  v26);
  OUTLINED_FUNCTION_39_21(v1 + 88);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForValueFlowAsync<LNValue>);
  OUTLINED_FUNCTION_51(v20);
  lazy protocol witness table accessor for type ShortcutsLinkPromptForValueFlowStrategy and conformance ShortcutsLinkPromptForValueFlowStrategy( &lazy protocol witness table cache variable for type ShortcutsLinkPromptForValueFlowStrategy and conformance ShortcutsLinkPromptForValueFlowStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for ShortcutsLinkPromptForValueFlowStrategy);
  uint64_t v22 = v21;
  uint64_t v23 = OUTLINED_FUNCTION_14_8();
  v26[0] = PromptForValueFlowAsync.init<A>(strategy:outputPublisher:)(v23, v26, v19, v22);
  lazy protocol witness table accessor for type PromptForValueFlowAsync<LNValue> and conformance PromptForValueFlowAsync<A>( &lazy protocol witness table cache variable for type PromptForValueFlowAsync<LNValue> and conformance PromptForValueFlowAsync<A>,  &demangling cache variable for type metadata for PromptForValueFlowAsync<LNValue>);
  OUTLINED_FUNCTION_68_8(v24);
  OUTLINED_FUNCTION_89_5();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_62_12();
  OUTLINED_FUNCTION_24_0();
}

void ShortcutsLinkRCHFlowStrategy.flowFor(action:disambiguatingNeedsValueRequest:actionMetadata:actionParameterMetadata:selectedValues:)()
{
  uint64_t v1 = v0;
  unint64_t v37 = v2;
  uint64_t v36 = v3;
  uint64_t v38 = v4;
  uint64_t v39 = v5;
  uint64_t v6 = type metadata accessor for Locale(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_35();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = v0[2];
  uint64_t v12 = v0[3];
  uint64_t v13 = v0[8];
  uint64_t v14 = v0[9];
  __swift_project_boxed_opaque_existential_1(v0 + 5, v13);
  uint64_t v15 = dispatch thunk of DeviceState.siriLocale.getter(v13, v14);
  uint64_t v16 = Locale.identifier.getter(v15);
  uint64_t v18 = v17;
  OUTLINED_FUNCTION_85_6(v10, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  uint64_t v19 = type metadata accessor for LinkMetadataProvider();
  uint64_t inited = swift_initStackObject(v19, &v43);
  id v21 = [objc_allocWithZone(LNMetadataProvider) init];
  *(void *)(inited + 16) = v21;
  uint64_t v22 = v11;
  uint64_t v23 = specialized LNNeedsValueRequest.toDisambiguationItems(bundleIdentifier:actionParameterMetadata:selectedValues:locale:metadataProvider:)( v11,  v12,  v36,  v37,  v16,  v18,  inited);

  swift_bridgeObjectRelease(v18);
  uint64_t v24 = v12;
  swift_bridgeObjectRetain(v12);
  id v25 = v39;
  id v26 = [v38 dialog];
  OUTLINED_FUNCTION_74_10((uint64_t)v26, (uint64_t)v42);
  outlined init with copy of AppShortcutInvoking((uint64_t)(v1 + 16), (uint64_t)v41);
  OUTLINED_FUNCTION_74_10(v27, (uint64_t)v40);
  uint64_t v28 = OUTLINED_FUNCTION_19(v19, 24LL);
  *(void *)(v28 + 16) = [objc_allocWithZone(LNMetadataProvider) init];
  uint64_t v29 = type metadata accessor for ShortcutsLinkDisambiguationFlowStrategy();
  uint64_t v30 = (void *)OUTLINED_FUNCTION_19(v29, 208LL);
  uint64_t v31 = specialized ShortcutsLinkDisambiguationFlowStrategy.init(appBundleId:actionMetadata:dialog:metadataProvider:deviceState:serviceInvoker:outputPublisher:)( v22,  v24,  (uint64_t)v25,  (uint64_t)v26,  v28,  v42,  v41,  v40,  v30);
  OUTLINED_FUNCTION_74_10((uint64_t)v31, (uint64_t)v42);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForDisambiguationFlowAsync<ShortcutsLinkDisambiguationItem, [LNValue]>);
  OUTLINED_FUNCTION_51(v32);
  lazy protocol witness table accessor for type ShortcutsLinkPromptForValueFlowStrategy and conformance ShortcutsLinkPromptForValueFlowStrategy( &lazy protocol witness table cache variable for type ShortcutsLinkDisambiguationFlowStrategy and conformance ShortcutsLinkDisambiguationFlowStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for ShortcutsLinkDisambiguationFlowStrategy);
  uint64_t v34 = v33;
  swift_retain(v31);
  *(void *)&v42[0] = PromptForDisambiguationFlowAsync.init<A>(items:strategy:outputPublisher:)( v23,  v31,  v42,  v29,  v34);
  lazy protocol witness table accessor for type PromptForValueFlowAsync<LNValue> and conformance PromptForValueFlowAsync<A>( &lazy protocol witness table cache variable for type PromptForDisambiguationFlowAsync<ShortcutsLinkDisambiguationItem, [LNValue]> and conformance PromptForDisambiguationFlowAsync<A, B>,  &demangling cache variable for type metadata for PromptForDisambiguationFlowAsync<ShortcutsLinkDisambiguationItem, [LNValue]>);
  Flow.eraseToAnyValueFlow()(v32, v35);
  swift_release();
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_24_0();
}

void ShortcutsLinkRCHFlowStrategy.flowFor(action:confirmationRequest:actionMetadata:)()
{
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_35();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = *(void *)(v0 + 24);
  uint64_t v30 = *(void *)(v0 + 16);
  OUTLINED_FUNCTION_39_21(v0 + 40);
  outlined init with copy of AppShortcutInvoking(v0 + 128, (uint64_t)v32);
  uint64_t v12 = v0 + 88;
  outlined init with copy of AppShortcutInvoking(v0 + 88, (uint64_t)v31);
  type metadata accessor for RunLinkActionCATsSimple(0LL);
  id v13 = v6;
  id v14 = v4;
  id v15 = v2;
  uint64_t v16 = OUTLINED_FUNCTION_9_9();
  static CATOption.defaultMode.getter(v16);
  uint64_t v17 = CATWrapperSimple.__allocating_init(options:globals:)(v10, 0LL);
  type metadata accessor for RunLinkActionCATPatternsExecutor(0LL);
  OUTLINED_FUNCTION_18_7();
  uint64_t v18 = OUTLINED_FUNCTION_36_6();
  type metadata accessor for RunLinkActionCATs(0LL);
  OUTLINED_FUNCTION_18_7();
  uint64_t v19 = OUTLINED_FUNCTION_36_6();
  uint64_t v20 = OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_51(v20);
  uint64_t v21 = OUTLINED_FUNCTION_57();
  uint64_t v22 = type metadata accessor for ShortcutsLinkPromptForConfirmationFlowStrategy();
  uint64_t v23 = (void *)OUTLINED_FUNCTION_19(v22, 312LL);
  uint64_t v24 = specialized ShortcutsLinkPromptForConfirmationFlowStrategy.init(action:request:actionMetadata:appBundleId:runLinkActionCatWrapperSimple:linkActionPatterns:runLinkActionCatWrapper:enableTCCLabelsProvider:responseFactory:deviceState:serviceInvoker:outputPublisher:)( (uint64_t)v13,  (uint64_t)v14,  (uint64_t)v15,  v30,  v11,  v17,  v18,  v19,  v21,  v33,  v32,  v31,  v23);
  id v25 = [v14 value];
  outlined init with copy of AppShortcutInvoking(v12, (uint64_t)v33);
  *(void *)&v32[0] = v25;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForConfirmationFlowAsync<LNValue, SimpleConfirmationResponseProvider>);
  OUTLINED_FUNCTION_51(v26);
  lazy protocol witness table accessor for type ShortcutsLinkPromptForValueFlowStrategy and conformance ShortcutsLinkPromptForValueFlowStrategy( &lazy protocol witness table cache variable for type ShortcutsLinkPromptForConfirmationFlowStrategy and conformance ShortcutsLinkPromptForConfirmationFlowStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for ShortcutsLinkPromptForConfirmationFlowStrategy);
  uint64_t v28 = v27;
  OUTLINED_FUNCTION_14_8();
  *(void *)&v33[0] = PromptForConfirmationFlowAsync.init<A>(itemToConfirm:strategy:outputPublisher:)( v32,  v24,  v33,  v22,  v28);
  lazy protocol witness table accessor for type PromptForValueFlowAsync<LNValue> and conformance PromptForValueFlowAsync<A>( &lazy protocol witness table cache variable for type PromptForConfirmationFlowAsync<LNValue, SimpleConfirmationResponseProvider> and conformance PromptForConfirmationFlowAsync<A, B>,  &demangling cache variable for type metadata for PromptForConfirmationFlowAsync<LNValue, SimpleConfirmationResponseProvider>);
  OUTLINED_FUNCTION_68_8(v29);
  OUTLINED_FUNCTION_89_5();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_62_12();
  OUTLINED_FUNCTION_24_0();
}

void *ShortcutsLinkRCHFlowStrategy.flowFor(action:actionConfirmationRequest:actionMetadata:)( void *a1, void *a2, void *a3)
{
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 24);
  outlined init with copy of AppShortcutInvoking(v3 + 40, (uint64_t)v24);
  outlined init with copy of AppShortcutInvoking(v3 + 128, (uint64_t)v23);
  OUTLINED_FUNCTION_64_9(v9, (uint64_t)v22);
  uint64_t v10 = type metadata accessor for ShortcutsLinkPromptForActionConfirmationFlowStrategy();
  OUTLINED_FUNCTION_19(v10, 224LL);
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  OUTLINED_FUNCTION_5_14();
  ShortcutsLinkPromptForActionConfirmationFlowStrategy.init(action:request:actionMetadata:appBundleId:deviceState:serviceInvoker:outputPublisher:)( v11,  v12,  v13,  v8,  v7,  v24,  v23,  v22);
  uint64_t v15 = v14;
  OUTLINED_FUNCTION_64_9(v14, (uint64_t)v24);
  v23[0] = v11;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForConfirmationFlowAsync<LNAction, SimpleConfirmationResponseProvider>);
  OUTLINED_FUNCTION_51(v16);
  lazy protocol witness table accessor for type ShortcutsLinkPromptForValueFlowStrategy and conformance ShortcutsLinkPromptForValueFlowStrategy( &lazy protocol witness table cache variable for type ShortcutsLinkPromptForActionConfirmationFlowStrategy and conformance ShortcutsLinkPromptForActionConfirmationFlowStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for ShortcutsLinkPromptForActionConfirmationFlowStrategy);
  uint64_t v18 = v17;
  id v19 = v11;
  OUTLINED_FUNCTION_14_8();
  v24[0] = PromptForConfirmationFlowAsync.init<A>(itemToConfirm:strategy:outputPublisher:)(v23, v15, v24, v10, v18);
  lazy protocol witness table accessor for type PromptForValueFlowAsync<LNValue> and conformance PromptForValueFlowAsync<A>( &lazy protocol witness table cache variable for type PromptForConfirmationFlowAsync<LNAction, SimpleConfirmationResponseProvider> and conformance PromptForConfirmationFlowAsync<A, B>,  &demangling cache variable for type metadata for PromptForConfirmationFlowAsync<LNAction, SimpleConfirmationResponseProvider>);
  Flow.eraseToAnyValueFlow()(v16, v20);
  OUTLINED_FUNCTION_25_22();
  OUTLINED_FUNCTION_61();
  return v24;
}

void ShortcutsLinkRCHFlowStrategy.flowFor(action:disambiguationRequest:selectedValues:)()
{
  uint64_t v1 = v0;
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for Locale(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_35();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = v0[8];
  uint64_t v12 = v0[9];
  OUTLINED_FUNCTION_103_2();
  uint64_t v13 = dispatch thunk of DeviceState.siriLocale.getter(v11, v12);
  uint64_t v14 = Locale.identifier.getter(v13);
  uint64_t v16 = v15;
  OUTLINED_FUNCTION_81_9(v10, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  uint64_t v17 = LNDisambiguationRequest.toDisambiguationItems(selectedValues:locale:)(v3, v14, v16);
  swift_bridgeObjectRelease(v16);
  uint64_t v18 = v1[2];
  uint64_t v19 = v1[3];
  uint64_t v20 = (void *)v1[4];
  OUTLINED_FUNCTION_5_14();
  id v21 = v20;
  id v22 = [v5 dialog];
  OUTLINED_FUNCTION_74_10((uint64_t)v22, (uint64_t)v34);
  OUTLINED_FUNCTION_84_6();
  v1 += 11;
  outlined init with copy of AppShortcutInvoking((uint64_t)v1, (uint64_t)v32);
  uint64_t v23 = type metadata accessor for LinkMetadataProvider();
  uint64_t v24 = OUTLINED_FUNCTION_19(v23, 24LL);
  *(void *)(v24 + 16) = [objc_allocWithZone(LNMetadataProvider) init];
  uint64_t v25 = type metadata accessor for ShortcutsLinkDisambiguationFlowStrategy();
  uint64_t v26 = (void *)OUTLINED_FUNCTION_19(v25, 208LL);
  uint64_t v27 = specialized ShortcutsLinkDisambiguationFlowStrategy.init(appBundleId:actionMetadata:dialog:metadataProvider:deviceState:serviceInvoker:outputPublisher:)( v18,  v19,  (uint64_t)v21,  (uint64_t)v22,  v24,  v34,  &v33,  v32,  v26);
  outlined init with copy of AppShortcutInvoking((uint64_t)v1, (uint64_t)v34);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForDisambiguationFlowAsync<ShortcutsLinkDisambiguationItem, [LNValue]>);
  OUTLINED_FUNCTION_51(v28);
  lazy protocol witness table accessor for type ShortcutsLinkPromptForValueFlowStrategy and conformance ShortcutsLinkPromptForValueFlowStrategy( &lazy protocol witness table cache variable for type ShortcutsLinkDisambiguationFlowStrategy and conformance ShortcutsLinkDisambiguationFlowStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for ShortcutsLinkDisambiguationFlowStrategy);
  uint64_t v30 = v29;
  OUTLINED_FUNCTION_14_8();
  *(void *)&v34[0] = PromptForDisambiguationFlowAsync.init<A>(items:strategy:outputPublisher:)( v17,  v27,  v34,  v25,  v30);
  lazy protocol witness table accessor for type PromptForValueFlowAsync<LNValue> and conformance PromptForValueFlowAsync<A>( &lazy protocol witness table cache variable for type PromptForDisambiguationFlowAsync<ShortcutsLinkDisambiguationItem, [LNValue]> and conformance PromptForDisambiguationFlowAsync<A, B>,  &demangling cache variable for type metadata for PromptForDisambiguationFlowAsync<ShortcutsLinkDisambiguationItem, [LNValue]>);
  Flow.eraseToAnyValueFlow()(v28, v31);
  OUTLINED_FUNCTION_25_22();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_24_0();
}

__int128 *ShortcutsLinkRCHFlowStrategy.flowFor(action:continueInAppRequest:actionMetadata:)( uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  outlined init with copy of AppShortcutInvoking(v2 + 40, (uint64_t)v16);
  OUTLINED_FUNCTION_64_9(v6, (uint64_t)v15);
  uint64_t v7 = type metadata accessor for ShortcutsLinkPromptForContinueInAppFlowStrategy();
  OUTLINED_FUNCTION_19(v7, 112LL);
  uint64_t v8 = ShortcutsLinkPromptForContinueInAppFlowStrategy.init(appBundleId:deviceState:outputPublisher:)(v4, v5, v16, v15);
  OUTLINED_FUNCTION_64_9(v8, (uint64_t)v16);
  *(void *)&v15[0] = a2;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForConfirmationFlowAsync<LNContinueInAppRequest, SimpleConfirmationResponseProvider>);
  OUTLINED_FUNCTION_51(v9);
  lazy protocol witness table accessor for type ShortcutsLinkPromptForValueFlowStrategy and conformance ShortcutsLinkPromptForValueFlowStrategy( &lazy protocol witness table cache variable for type ShortcutsLinkPromptForContinueInAppFlowStrategy and conformance ShortcutsLinkPromptForContinueInAppFlowStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for ShortcutsLinkPromptForContinueInAppFlowStrategy);
  uint64_t v11 = v10;
  OUTLINED_FUNCTION_9_9();
  id v12 = a2;
  OUTLINED_FUNCTION_14_8();
  *(void *)&v16[0] = PromptForConfirmationFlowAsync.init<A>(itemToConfirm:strategy:outputPublisher:)( v15,  v8,  v16,  v7,  v11);
  lazy protocol witness table accessor for type PromptForValueFlowAsync<LNValue> and conformance PromptForValueFlowAsync<A>( &lazy protocol witness table cache variable for type PromptForConfirmationFlowAsync<LNContinueInAppRequest, SimpleConfirmationResponseProvider> and conformance PromptForConfirmationFlowAsync<A, B>,  &demangling cache variable for type metadata for PromptForConfirmationFlowAsync<LNContinueInAppRequest, SimpleConfirmationResponseProvider>);
  Flow.eraseToAnyValueFlow()(v9, v13);
  OUTLINED_FUNCTION_25_22();
  OUTLINED_FUNCTION_61();
  return v16;
}

void ShortcutsLinkRCHFlowStrategy.flowFor(action:successResult:startedSessionId:)()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = *v0;
  uint64_t v11 = type metadata accessor for ResponseMode(0LL);
  uint64_t v58 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_35();
  uint64_t v57 = v13 - v12;
  id v14 = [(id)v0[4] systemProtocols];
  uint64_t v15 = OUTLINED_FUNCTION_72( (uint64_t)v14,  (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol,  &OBJC_CLASS___LNSystemProtocol_ptr);
  uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

  char v17 = Array<A>.isAudioStarting.getter(v16);
  swift_bridgeObjectRelease(v16);
  if ((v17 & 1) != 0)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v18 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v18, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v19 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_31_0(v19))
    {
      char v20 = v17;
      uint64_t v21 = v10;
      id v22 = v7;
      uint64_t v23 = v5;
      uint64_t v24 = v3;
      uint64_t v25 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl( &dword_0,  (os_log_t)v14,  (os_log_type_t)v16,  "#ShortcutsLinkRCHFlowStrategy action is audioStarting intent",  v25,  2u);
      uint64_t v26 = (uint64_t)v25;
      uint64_t v3 = v24;
      uint64_t v5 = v23;
      uint64_t v7 = v22;
      uint64_t v10 = v21;
      char v17 = v20;
      OUTLINED_FUNCTION_1_0(v26);
    }

    if (one-time initialization token for shared != -1) {
      swift_once(&one-time initialization token for shared, one-time initialization function for shared);
    }
    id v14 = (id)static WFDialogState.shared;
    (*(void (**)(void))(*(void *)static WFDialogState.shared + 264LL))();
  }

  if ([v9 openAppWhenRun])
  {
    id v14 = OUTLINED_FUNCTION_92_1();
    uint64_t v16 = (uint64_t)[v14 showOutputAction];

    if (v16)
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v27 = OUTLINED_FUNCTION_48();
      OUTLINED_FUNCTION_84(v27, (uint64_t)static Logger.voiceCommands);
      os_log_type_t v28 = OUTLINED_FUNCTION_58();
      if (!OUTLINED_FUNCTION_31_0(v28)) {
        goto LABEL_27;
      }
      uint64_t v29 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
      *(_WORD *)uint64_t v29 = 0;
      uint64_t v30 = "#ShortcutsLinkRCHFlowStrategy skipping dialog because openAppWhenRun = true";
LABEL_26:
      _os_log_impl(&dword_0, (os_log_t)v14, (os_log_type_t)v16, v30, v29, 2u);
      OUTLINED_FUNCTION_1_0((uint64_t)v29);
LABEL_27:

      OUTLINED_FUNCTION_39_21((uint64_t)(v1 + 16));
      uint64_t v50 = type metadata accessor for EmptyOutputAndCloseFlow();
      OUTLINED_FUNCTION_19(v50, 80LL);
      *(void *)&v60[0] = EmptyOutputAndCloseFlow.init(shouldClose:aceServiceInvoker:applicationSessionID:)( 0,  v60,  v5,  v3);
      lazy protocol witness table accessor for type ShortcutsLinkPromptForValueFlowStrategy and conformance ShortcutsLinkPromptForValueFlowStrategy( (unint64_t *)&lazy protocol witness table cache variable for type EmptyOutputAndCloseFlow and conformance EmptyOutputAndCloseFlow,  (uint64_t (*)(uint64_t))type metadata accessor for EmptyOutputAndCloseFlow);
      uint64_t v52 = v51;
      swift_bridgeObjectRetain(v3);
      Flow.eraseToAnyFlow()(v50, v52);
      goto LABEL_28;
    }
  }

  if (*((_BYTE *)v1 + 80) != 1
    || (id v14 = OUTLINED_FUNCTION_92_1(),
        LOBYTE(v16) = LNActionOutput.hasCustomOutput()(),
        v14,
        (v16 & 1) == 0))
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v48 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v48, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v49 = OUTLINED_FUNCTION_58();
    if (!OUTLINED_FUNCTION_31_0(v49)) {
      goto LABEL_27;
    }
    uint64_t v29 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)uint64_t v29 = 0;
    uint64_t v30 = "#ShortcutsLinkRCHFlowStrategy not showing anything for successResult";
    goto LABEL_26;
  }

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v31 = OUTLINED_FUNCTION_48();
  uint64_t v32 = (os_log_s *)OUTLINED_FUNCTION_84(v31, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v32, v33))
  {
    os_log_type_t v56 = v33;
    uint64_t v34 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v55 = OUTLINED_FUNCTION_38(32LL);
    *(void *)&v60[0] = v55;
    *(_DWORD *)uint64_t v34 = 136315138;
    uint64_t v53 = v34 + 4;
    __int128 v54 = v34;
    uint64_t v35 = type metadata accessor for SiriEnvironment(0LL);
    uint64_t v36 = static SiriEnvironment.default.getter(v35);
    SiriEnvironment.currentRequest.getter(v36);
    uint64_t v37 = swift_release();
    CurrentRequest.responseMode.getter(v37);
    uint64_t v38 = OUTLINED_FUNCTION_61();
    uint64_t v39 = ResponseMode.description.getter(v38);
    unint64_t v41 = v40;
    OUTLINED_FUNCTION_85_6(v57, *(uint64_t (**)(uint64_t, uint64_t))(v58 + 8));
    *(void *)&__int128 v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, (uint64_t *)v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, (char *)&v59 + 8, v53);
    swift_bridgeObjectRelease(v41);
    OUTLINED_FUNCTION_31_2( &dword_0,  v32,  v56,  "#ShortcutsLinkRCHFlowStrategy showing success snippet and dialog: %s",  v54);
    OUTLINED_FUNCTION_30_3(v55, v42, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v55);
    OUTLINED_FUNCTION_1_0((uint64_t)v54);
  }

  OUTLINED_FUNCTION_39_21((uint64_t)(v1 + 11));
  OUTLINED_FUNCTION_84_6();
  uint64_t v43 = OUTLINED_FUNCTION_19((uint64_t)&unk_1F7448, 64LL);
  *(void *)(v43 + 16) = v1;
  *(void *)(v43 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v7;
  *(void *)(v43 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v5;
  *(void *)(v43 + 40) = v3;
  *(_BYTE *)(v43 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v17 & 1;
  *(void *)(v43 + 56) = v10;
  uint64_t v44 = type metadata accessor for ShowOutputAndCloseFlow();
  OUTLINED_FUNCTION_19(v44, 113LL);
  *(void *)&v60[0] = ShowOutputAndCloseFlow.init(shouldCloseSiri:outputPublisher:aceServiceInvoker:outputGenerator:)( 0,  v60,  &v59,  (uint64_t)&async function pointer to partial apply for closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(action:successResult:startedSessionId:),  v43);
  lazy protocol witness table accessor for type ShortcutsLinkPromptForValueFlowStrategy and conformance ShortcutsLinkPromptForValueFlowStrategy( (unint64_t *)&lazy protocol witness table cache variable for type ShowOutputAndCloseFlow and conformance ShowOutputAndCloseFlow,  (uint64_t (*)(uint64_t))type metadata accessor for ShowOutputAndCloseFlow);
  uint64_t v46 = v45;
  swift_bridgeObjectRetain(v3);
  swift_retain(v1);
  id v47 = v7;
  Flow.eraseToAnyFlow()(v44, v46);
LABEL_28:
  swift_release();
  OUTLINED_FUNCTION_62_12();
  OUTLINED_FUNCTION_24_0();
}

uint64_t closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(action:successResult:startedSessionId:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  *(_BYTE *)(v7 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a6;
  *(void *)(v7 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a5;
  *(void *)(v7 + 96) = a7;
  *(void *)(v7 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a3;
  *(void *)(v7 + 80) = a4;
  *(void *)(v7 + 56) = a1;
  *(void *)(v7 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a2;
  return swift_task_switch( closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(action:successResult:startedSessionId:),  0LL,  0LL);
}

uint64_t closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(action:successResult:startedSessionId:)()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  id v4 = [*(id *)(v0 + 72) output];
  *(void *)(v0 + 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v4;
  uint64_t v5 = OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_51(v5);
  uint64_t v6 = OUTLINED_FUNCTION_57();
  *(void *)(v0 + 40) = v5;
  *(void *)(v0 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = &protocol witness table for ResponseFactory;
  *(void *)(v0 + 16) = v6;
  uint64_t v7 = (void *)swift_task_alloc(dword_2194A4);
  *(void *)(v0 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v7;
  *uint64_t v7 = v0;
  v7[1] = closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(action:successResult:startedSessionId:);
  return static ShortcutsLinkRCHFlowStrategy.makeCustomOutput(appBundleId:successOutput:startedSessionId:isAudioStartAction:deviceState:linkActionDialogTemplate:responseFactory:)( *(void *)(v0 + 56),  v2,  v3,  (uint64_t)v4,  *(void *)(v0 + 80),  *(void *)(v0 + 88),  *(_BYTE *)(v0 + 128),  v1 + 40);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  OUTLINED_FUNCTION_50_0();
  uint64_t v3 = (void *)(v2 + 16);
  id v4 = *(void **)(v2 + 104);
  OUTLINED_FUNCTION_51_3();
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc(v6);
  __swift_destroy_boxed_opaque_existential_1Tm(v3);

  if (!v0) {
    return OUTLINED_FUNCTION_22_2(*(uint64_t (**)(void))(v1 + 8));
  }
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static ShortcutsLinkRCHFlowStrategy.makeCustomOutput(appBundleId:successOutput:startedSessionId:isAudioStartAction:deviceState:linkActionDialogTemplate:responseFactory:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v9 + 120) = v20;
  *(void *)(v9 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v8;
  *(void *)(v9 + 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a8;
  *(void *)(v9 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v19;
  *(_BYTE *)(v9 + 296) = a7;
  *(void *)(v9 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a5;
  *(void *)(v9 + 96) = a6;
  *(void *)(v9 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a3;
  *(void *)(v9 + 80) = a4;
  *(void *)(v9 + 56) = a1;
  *(void *)(v9 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a2;
  uint64_t v10 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  *(void *)(v9 + 136) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v9 + 14__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v11;
  *(void *)(v9 + 15__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = OUTLINED_FUNCTION_9_0(v11);
  uint64_t v12 = type metadata accessor for DialogPhase(0LL);
  *(void *)(v9 + 160) = OUTLINED_FUNCTION_9_0(*(void *)(v12 - 8));
  uint64_t v13 = type metadata accessor for OutputGenerationManifest(0LL);
  *(void *)(v9 + 16__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v9 + 176) = v14;
  *(void *)(v9 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 184) = OUTLINED_FUNCTION_9_0(v14);
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v15, v16, v17);
}

uint64_t static ShortcutsLinkRCHFlowStrategy.makeCustomOutput(appBundleId:successOutput:startedSessionId:isAudioStartAction:deviceState:linkActionDialogTemplate:responseFactory:)( uint64_t a1)
{
  id v25 = OUTLINED_FUNCTION_4(a1, "dialog");
  *(void *)(v1 + 19__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v25;
  id v2 = OUTLINED_FUNCTION_4((uint64_t)v25, "viewSnippet");
  uint64_t v3 = v2;
  if (v2)
  {
    id v4 = OUTLINED_FUNCTION_4((uint64_t)v2, "viewData");

    uint64_t v3 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v6 = v5;
  }

  else
  {
    uint64_t v6 = 0xF000000000000000LL;
  }

  *(void *)(v1 + 200) = v3;
  *(void *)(v1 + 20__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v6;
  uint64_t v24 = (uint64_t)v3;
  uint64_t v8 = *(void *)(v1 + 152);
  uint64_t v7 = *(void *)(v1 + 160);
  uint64_t v9 = *(void *)(v1 + 136);
  uint64_t v10 = *(void *)(v1 + 144);
  uint64_t v12 = *(void *)(v1 + 88);
  uint64_t v11 = *(void *)(v1 + 96);
  static DialogPhase.summary.getter();
  uint64_t v13 = swift_task_alloc(32LL);
  *(void *)(v13 + 16) = v12;
  *(void *)(v13 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v11;
  OutputGenerationManifest.init(dialogPhase:_:)( v7,  partial apply for closure #1 in static ShortcutsLinkRCHFlowStrategy.makeCustomOutput(appBundleId:successOutput:startedSessionId:isAudioStartAction:deviceState:linkActionDialogTemplate:responseFactory:),  v13);
  swift_task_dealloc(v13);
  (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))( v8,  enum case for RFFeatureFlags.ResponseFramework._SMART(_:),  v9);
  char v14 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_85_6(v8, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
  if ((v14 & 1) != 0)
  {
    uint64_t v15 = *(void *)(v1 + 104);
    uint64_t v17 = *(void *)(v1 + 64);
    uint64_t v16 = *(void *)(v1 + 72);
    type metadata accessor for App(0LL);
    OUTLINED_FUNCTION_17_1();
    App.__allocating_init(appIdentifier:)(v17, v16);
    uint64_t v18 = specialized App.toAppDisplayName(_:appInfoResolving:isFirstParty:)(v15, 2);
    uint64_t v20 = v19;
    swift_release();
    *(void *)(v1 + 216) = v18;
    *(void *)(v1 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 224) = v20;
    uint64_t v21 = (void *)swift_task_alloc(dword_217A84);
    *(void *)(v1 + 23__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v21;
    void *v21 = v1;
    v21[1] = static ShortcutsLinkRCHFlowStrategy.makeCustomOutput(appBundleId:successOutput:startedSessionId:isAudioStartAction:deviceState:linkActionDialogTemplate:responseFactory:);
    return LinkActionDialogTemplating.actionPerformedDialog(customPrompt:)((uint64_t)v25);
  }

  else
  {
    uint64_t v23 = (void *)swift_task_alloc(dword_2194AC);
    *(void *)(v1 + 280) = v23;
    void *v23 = v1;
    v23[1] = static ShortcutsLinkRCHFlowStrategy.makeCustomOutput(appBundleId:successOutput:startedSessionId:isAudioStartAction:deviceState:linkActionDialogTemplate:responseFactory:);
    return static ShortcutsLinkRCHFlowStrategy.makeCustomOutput_preRFv2(appBundleId:isAudioStartAction:customDialog:viewData:deviceState:linkActionDialogTemplate:manifest:responseFactory:)( *(void *)(v1 + 56),  *(void *)(v1 + 64),  *(void *)(v1 + 72),  *(_BYTE *)(v1 + 296),  (uint64_t)v25,  v24,  v6,  *(void *)(v1 + 104));
  }

uint64_t static ShortcutsLinkRCHFlowStrategy.makeCustomOutput(appBundleId:successOutput:startedSessionId:isAudioStartAction:deviceState:linkActionDialogTemplate:responseFactory:)()
{
  id v2 = (void *)*v1;
  OUTLINED_FUNCTION_50_5();
  v2[30] = v3;
  v2[31] = v0;
  OUTLINED_FUNCTION_54_0(v4);
  if (v0) {
    swift_bridgeObjectRelease(v2[28]);
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  Swift::String_optional v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String_optional *boxed_opaque_existential_1;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v2 = *(void *)(v0 + 200);
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v3 = [*(id *)(v0 + 240) catId];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  OutputGenerationManifest.responseViewId.setter(v4);
  OUTLINED_FUNCTION_5_14();
  uint64_t v5 = DialogExecutionResult.firstDialogFullPrint()();
  *(void *)(v0 + 256) = v5.value._object;
  outlined copy of Data?(v2, v1);
  if (one-time initialization token for shared != -1) {
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  }
  uint64_t v24 = *(void **)(v0 + 240);
  uint64_t v6 = *(void *)(v0 + 216);
  uint64_t v7 = *(void **)(v0 + 224);
  uint64_t v8 = *(void *)(v0 + 200);
  uint64_t v23 = *(void *)(v0 + 208);
  uint64_t v9 = *(void **)(v0 + 120);
  uint64_t v11 = *(void *)(v0 + 64);
  uint64_t v10 = *(void **)(v0 + 72);
  (*(void (**)(void))(*(void *)static WFDialogState.shared + 224LL))(*(unsigned __int8 *)(v0 + 296));
  id v25 = v9[3];
  uint64_t v26 = v9[4];
  __swift_project_boxed_opaque_existential_1(v9, v25);
  uint64_t v12 = type metadata accessor for WorkflowDataModels(0LL);
  *(void *)(v0 + 40) = v12;
  lazy protocol witness table accessor for type ShortcutsLinkPromptForValueFlowStrategy and conformance ShortcutsLinkPromptForValueFlowStrategy( (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels,  type metadata accessor for WorkflowDataModels);
  *(void *)(v0 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v13;
  boxed_opaque_existential_1 = (Swift::String_optional *)__swift_allocate_boxed_opaque_existential_1((void *)(v0 + 16));
  boxed_opaque_existential_1->value._uint64_t countAndFlagsBits = v11;
  boxed_opaque_existential_1->value._object = v10;
  boxed_opaque_existential_1[1].value._uint64_t countAndFlagsBits = v6;
  boxed_opaque_existential_1[1].value._object = v7;
  boxed_opaque_existential_1[2] = v5;
  boxed_opaque_existential_1[3].value._uint64_t countAndFlagsBits = v8;
  boxed_opaque_existential_1[3].value._object = (void *)v23;
  swift_storeEnumTagMultiPayload(boxed_opaque_existential_1, v12, 9LL);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v16 = OUTLINED_FUNCTION_19(v15, 40LL);
  *(_OWORD *)(v16 + 16) = xmmword_17E150;
  *(void *)(v16 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v24;
  uint64_t v27 = v16;
  specialized Array._endMutation()(v16, v17, v18);
  *(void *)(v0 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 264) = v27;
  OUTLINED_FUNCTION_5_14();
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v7);
  outlined copy of Data?(v8, v23);
  uint64_t v19 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)[1];
  uint64_t v20 = v24;
  uint64_t v21 = (void *)swift_task_alloc(v19);
  *(void *)(v0 + 27__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v21;
  void *v21 = v0;
  v21[1] = static ShortcutsLinkRCHFlowStrategy.makeCustomOutput(appBundleId:successOutput:startedSessionId:isAudioStartAction:deviceState:linkActionDialogTemplate:responseFactory:);
  return dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)( *(void *)(v0 + 56),  v0 + 16,  v27,  *(void *)(v0 + 184),  v25,  v26);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 272));
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_98_1();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v1 = (void *)v0[30];
  id v2 = (void *)v0[24];
  swift_bridgeObjectRelease(v0[9]);
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_102_2();

  OUTLINED_FUNCTION_102_2();
  OUTLINED_FUNCTION_32_13();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  uint64_t v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_3_14(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 28__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v0;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  OUTLINED_FUNCTION_88_5();
  OUTLINED_FUNCTION_32_13();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_22_2(v1);
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_53_14();
  OUTLINED_FUNCTION_45_14();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_31();
  swift_task_dealloc(v1);
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_53_14();
  OUTLINED_FUNCTION_45_14();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_31();
  swift_task_dealloc(v1);
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ShortcutsLinkRCHFlowStrategy.flowForAppProtectionCheck()()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  OUTLINED_FUNCTION_17_1();
  uint64_t v3 = App.__allocating_init(appIdentifier:)(v2, v1);
  uint64_t v4 = OUTLINED_FUNCTION_72( v3,  (unint64_t *)&lazy cache variable for type metadata for INIntent,  &OBJC_CLASS___INIntent_ptr);
  static AppFlowFactory.makeFixedAppResolutionFlow<A>(app:)(v3, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyAppResolutionFlow<INIntent>);
  lazy protocol witness table accessor for type PromptForValueFlowAsync<LNValue> and conformance PromptForValueFlowAsync<A>( (unint64_t *)&lazy protocol witness table cache variable for type AnyAppResolutionFlow<INIntent> and conformance AnyAppResolutionFlow<A>,  &demangling cache variable for type metadata for AnyAppResolutionFlow<INIntent>);
  uint64_t v7 = Flow.eraseToAnyValueFlow()(v5, v6);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_34_0();
  return v7;
}

uint64_t *ShortcutsLinkRCHFlowStrategy.flowFor(error:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v4 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_32_4();
  uint64_t v5 = OUTLINED_FUNCTION_32_4();
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v9 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v18 = a1;
    v19[0] = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    OUTLINED_FUNCTION_32_4();
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v11 = String.init<A>(describing:)(&v18, v10);
    unint64_t v13 = v12;
    uint64_t v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v8 + 4);
    swift_bridgeObjectRelease(v13);
    OUTLINED_FUNCTION_23_6();
    OUTLINED_FUNCTION_23_6();
    OUTLINED_FUNCTION_31_2(&dword_0, v6, v7, "Failed to perform action with error: %s", v8);
    OUTLINED_FUNCTION_30_3(v9, v14, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v9);
    OUTLINED_FUNCTION_1_0((uint64_t)v8);
  }

  else
  {
    OUTLINED_FUNCTION_23_6();
    OUTLINED_FUNCTION_23_6();
  }

  outlined init with copy of AppShortcutInvoking(v2 + 88, (uint64_t)v19);
  uint64_t v15 = OUTLINED_FUNCTION_19((uint64_t)&unk_1F7470, 32LL);
  *(void *)(v15 + 16) = a1;
  *(void *)(v15 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v2;
  uint64_t v16 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  OUTLINED_FUNCTION_51(v16);
  OUTLINED_FUNCTION_32_4();
  swift_retain(v2);
  v19[0] = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v19,  &async function pointer to partial apply for closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(error:),  v15);
  Flow.eraseToAnyFlow()(v16, &protocol witness table for SimpleOutputFlowAsync);
  OUTLINED_FUNCTION_25_22();
  return v19;
}

uint64_t closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(error:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[30] = a2;
  v3[31] = a3;
  v3[29] = a1;
  uint64_t v4 = type metadata accessor for TemplatingResult(0LL);
  v3[32] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[33] = v5;
  v3[34] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(error:), 0LL, 0LL);
}

uint64_t closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(error:)()
{
  uint64_t v1 = _convertErrorToNSError(_:)(*(void *)(v0 + 240));
  *(void *)(v0 + 280) = v1;
  uint64_t v2 = NSError.isPreflightError.getter(v1);
  if ((v2 & 1) != 0)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v3 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.voiceCommands);
    OUTLINED_FUNCTION_28_7();
    uint64_t v4 = OUTLINED_FUNCTION_28_7();
    uint64_t v5 = (void *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    BOOL v7 = OUTLINED_FUNCTION_69_6(v6);
    uint64_t v8 = *(void *)(v0 + 240);
    if (v7)
    {
      uint64_t v9 = (_DWORD *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v43 = OUTLINED_FUNCTION_38(32LL);
      *uint64_t v9 = 136315138;
      swift_getErrorValue(v8, v0 + 216, v0 + 176);
      uint64_t v10 = Error.localizedDescription.getter(*(void *)(v0 + 184), *(void *)(v0 + 192));
      *(void *)(v0 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 224) = OUTLINED_FUNCTION_140(v10, v11, v12, v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v9 + 1);
      OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_43_0();
      OUTLINED_FUNCTION_43_0();
      OUTLINED_FUNCTION_40_19(&dword_0, v14, v15, "Handling preflight error: %s");
      OUTLINED_FUNCTION_30_3(v43, v16, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v43);
      OUTLINED_FUNCTION_1_0((uint64_t)v9);
    }

    else
    {
      OUTLINED_FUNCTION_43_0();
      OUTLINED_FUNCTION_43_0();
    }

    static Device.current.getter((void *)(v0 + 72), v32);
    uint64_t v33 = type metadata accessor for WorkflowSnippetProvider();
    uint64_t inited = swift_initStackObject(v33, v0 + 16);
    *(void *)(v0 + 28__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = inited;
    outlined init with take of AceServiceInvokerAsync((__int128 *)(v0 + 72), inited + 16);
    uint64_t v35 = (void *)swift_task_alloc(dword_219764);
    *(void *)(v0 + 296) = v35;
    void *v35 = v0;
    v35[1] = closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(error:);
    OUTLINED_FUNCTION_24_7();
    return WorkflowSnippetProvider.buildSnippetForPreflightError(appBundleId:)(v36, v37, v38);
  }

  else
  {
    NSError.isLinkUserCancelledError.getter(v2);
    if ((v17 & 1) == 0)
    {
      unint64_t v40 = (void *)swift_task_alloc(*(unsigned int *)(*(void *)(**(void **)(v0 + 248) + 216LL) + 4LL));
      *(void *)(v0 + 32__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v40;
      *unint64_t v40 = v0;
      v40[1] = closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(error:);
      OUTLINED_FUNCTION_24_7();
      __asm { BR              X2 }
    }

    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v18 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.voiceCommands);
    OUTLINED_FUNCTION_28_7();
    uint64_t v19 = OUTLINED_FUNCTION_28_7();
    uint64_t v20 = (void *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    BOOL v22 = OUTLINED_FUNCTION_69_6(v21);
    uint64_t v23 = *(void *)(v0 + 240);
    if (v22)
    {
      uint64_t v24 = (_DWORD *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v44 = OUTLINED_FUNCTION_38(32LL);
      *uint64_t v24 = 136315138;
      swift_getErrorValue(v23, v0 + 200, v0 + 152);
      uint64_t v25 = Error.localizedDescription.getter(*(void *)(v0 + 160), *(void *)(v0 + 168));
      *(void *)(v0 + 20__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_140(v25, v26, v27, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v24 + 1);
      OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_43_0();
      OUTLINED_FUNCTION_43_0();
      OUTLINED_FUNCTION_40_19(&dword_0, v29, v30, "Handling user cancelled error: %s");
      OUTLINED_FUNCTION_30_3(v44, v31, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v44);
      OUTLINED_FUNCTION_1_0((uint64_t)v24);
    }

    else
    {
      OUTLINED_FUNCTION_43_0();
      OUTLINED_FUNCTION_43_0();
    }

    uint64_t v42 = (void *)swift_task_alloc(async function pointer to static ResponseTemplates.taskAborted()[1]);
    *(void *)(v0 + 31__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v42;
    *uint64_t v42 = v0;
    v42[1] = closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(error:);
    OUTLINED_FUNCTION_24_7();
    return static ResponseTemplates.taskAborted()();
  }

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 296);
  *(void *)(*v1 + 30__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v0;
  swift_task_dealloc(v3);
  if (!v0)
  {
    swift_setDeallocating(*(void *)(v2 + 288));
    OUTLINED_FUNCTION_98_1();
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t (*v0)(void);
  OUTLINED_FUNCTION_72_5();
  OUTLINED_FUNCTION_52_13();
  uint64_t v0 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_27_2(v0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 320) = v0;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = *(void **)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 264);
  uint64_t v4 = *(void **)(v0 + 248);
  uint64_t v5 = *(void **)(v0 + 232);
  os_log_type_t v6 = v4 + 5;
  BOOL v7 = v4[8];
  uint64_t v8 = v4[9];
  __swift_project_boxed_opaque_existential_1(v4 + 5, v7);
  uint64_t v9 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v7, v8);
  uint64_t v10 = type metadata accessor for AceOutput(0LL);
  *(_OWORD *)(v0 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0u;
  *(void *)(v0 + 14__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  *(_OWORD *)(v0 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
  v5[3] = v10;
  v5[4] = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v5);
  static AceOutputHelper.makeCancellationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:canUseServerTTS:flowActivity:)( v1,  v6,  v9 & 1,  _swiftEmptyArrayStorage,  1LL,  v0 + 112);

  outlined destroy of Any?(v0 + 112, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  OUTLINED_FUNCTION_81_9(v1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_52_13();
  unint64_t v11 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_16_0(v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 336) = v0;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v1 = *(void **)(v0 + 280);
  swift_setDeallocating(*(void *)(v0 + 288));
  OUTLINED_FUNCTION_98_1();

  OUTLINED_FUNCTION_52_13();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_72_5();
  OUTLINED_FUNCTION_52_13();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_72_5();
  OUTLINED_FUNCTION_52_13();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ShortcutsLinkRCHFlowStrategy.makeOutputForFailureHandlingIntentDialog(error:)( uint64_t a1, uint64_t a2)
{
  _BYTE v3[24] = a2;
  v3[25] = v2;
  v3[23] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[26] = OUTLINED_FUNCTION_9_0(*(void *)(v4 - 8));
  uint64_t v5 = type metadata accessor for TemplatingResult(0LL);
  v3[27] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[28] = v6;
  v3[29] = OUTLINED_FUNCTION_9_0(v6);
  uint64_t v7 = type metadata accessor for DialogPhase(0LL);
  v3[30] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[31] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[32] = swift_task_alloc(v9);
  v3[33] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[34] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[35] = v11;
  v3[36] = OUTLINED_FUNCTION_9_0(v11);
  uint64_t v12 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  v3[37] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v3[38] = v13;
  v3[39] = OUTLINED_FUNCTION_9_0(v13);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t ShortcutsLinkRCHFlowStrategy.makeOutputForFailureHandlingIntentDialog(error:)()
{
  char v1 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_21_1();
  if ((v1 & 1) != 0)
  {
    uint64_t v2 = (uint64_t **)swift_task_alloc(dword_217A3C);
    v0[40] = (uint64_t)v2;
    *uint64_t v2 = v0;
    v2[1] = (uint64_t *)ShortcutsLinkRCHFlowStrategy.makeOutputForFailureHandlingIntentDialog(error:);
    return LinkActionDialogTemplating.makeFailureHandlingIntentDialog(error:)(v0[24]);
  }

  else
  {
    uint64_t v4 = (uint64_t **)swift_task_alloc(dword_217A4C);
    v0[45] = (uint64_t)v4;
    void *v4 = v0;
    v4[1] = (uint64_t *)ShortcutsLinkRCHFlowStrategy.makeOutputForFailureHandlingIntentDialog(error:);
    return LinkActionDialogTemplating.makeFailureHandlingIntentDialog_preRFv2(error:)(v0[29], v0[24]);
  }

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_50_5();
  *(void *)(v2 + 32__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v3;
  OUTLINED_FUNCTION_54_0(v4);
  if (v0)
  {
    swift_task_dealloc(*(void *)(v2 + 312));
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_33_0();
    OUTLINED_FUNCTION_31();
    return OUTLINED_FUNCTION_3_14((uint64_t (*)(void))v1[1]);
  }

  else
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 352));
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  os_log_type_t v4;
  BOOL v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  char v1 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  outlined init with copy of AppShortcutInvoking(v0 + 56, v0 + 96);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  uint64_t v4 = static os_log_type_t.debug.getter();
  uint64_t v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void **)(v0 + 328);
  uint64_t v8 = *(void *)(v0 + 280);
  uint64_t v7 = *(void *)(v0 + 288);
  unint64_t v9 = *(void *)(v0 + 272);
  if (v5)
  {
    uint64_t v20 = *(void *)(v0 + 288);
    uint64_t v10 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v19 = v8;
    uint64_t v11 = OUTLINED_FUNCTION_38(32LL);
    os_log_type_t v21 = v11;
    *(_DWORD *)uint64_t v10 = 136315138;
    outlined init with copy of AppShortcutInvoking(v0 + 96, v0 + 136);
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Output);
    uint64_t v13 = String.init<A>(describing:)(v0 + 136, v12);
    uint64_t v15 = v14;
    *(void *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v10 + 4);
    swift_bridgeObjectRelease(v15);
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 96));
    OUTLINED_FUNCTION_31_2(&dword_0, v3, v4, "#ShortcutsLinkRCHFlowStrategy flowFor:error; output: %s", v10);
    OUTLINED_FUNCTION_30_3(v11, v16, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v11);
    OUTLINED_FUNCTION_1_0((uint64_t)v10);

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v9);
  }

  else
  {

    __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 96));
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }

  outlined init with take of AceServiceInvokerAsync((__int128 *)(v0 + 56), *(void *)(v0 + 184));
  OUTLINED_FUNCTION_37_18();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  char v17 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return v17();
}

{
  OUTLINED_FUNCTION_23_22();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v2 = *(void *)(v0 + 224);
  char v1 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v5 = *(void **)(v0 + 184);
  uint64_t v6 = v4 + 40;
  uint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = *(void *)(v4 + 72);
  OUTLINED_FUNCTION_103_2();
  unint64_t v9 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v7, v8);
  uint64_t v10 = type metadata accessor for NLContextUpdate(0LL);
  OUTLINED_FUNCTION_50_1(v3, v11, v12, v10);
  uint64_t v13 = type metadata accessor for AceOutput(0LL);
  *(_OWORD *)(v0 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
  *(void *)(v0 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0LL;
  *(_OWORD *)(v0 + 16) = 0u;
  v5[3] = v13;
  v5[4] = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v5);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v1,  v6,  v9 & 1,  _swiftEmptyArrayStorage,  0LL,  1LL,  v3,  _swiftEmptyArrayStorage,  v0 + 16);
  outlined destroy of Any?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of Any?(v3, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_81_9(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_37_18();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  uint64_t v14 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_16_0(v14);
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(v0 + 312));
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

void ShortcutsLinkRCHFlowStrategy.makeOutputForFailureHandlingIntentDialog(error:)()
{
  char v1 = (void *)v0[41];
  uint64_t v3 = v0[32];
  uint64_t v2 = v0[33];
  uint64_t v5 = v0[30];
  uint64_t v4 = v0[31];
  static DialogPhase.error.getter();
  id v6 = [v1 catId];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  OutputGenerationManifest.init(dialogPhase:_:)(v3, CustomIntentDisambiguationItemContainer.init(items:), 0LL);
  OutputGenerationManifest.responseViewId.setter(v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v5);
  uint64_t v8 = OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_51(v8);
  v0[42] = OUTLINED_FUNCTION_57();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v10 = OUTLINED_FUNCTION_19(v9, 40LL);
  *(_OWORD *)(v10 + 16) = xmmword_17E150;
  *(void *)(v10 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v1;
  uint64_t v17 = v10;
  specialized Array._endMutation()(v10, v11, v12);
  v0[43] = v17;
  id v14 = v1;
  uint64_t v15 = (void *)swift_task_alloc(v13);
  v0[44] = v15;
  *uint64_t v15 = v0;
  v15[1] = ShortcutsLinkRCHFlowStrategy.makeOutputForFailureHandlingIntentDialog(error:);
  OUTLINED_FUNCTION_24_7();
  __asm { BR              X3 }

uint64_t closure #1 in static ShortcutsLinkRCHFlowStrategy.makeCustomOutput(appBundleId:successOutput:startedSessionId:isAudioStartAction:deviceState:linkActionDialogTemplate:responseFactory:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return OutputGenerationManifest.applicationSessionID.setter(a2, a3);
}

uint64_t static ShortcutsLinkRCHFlowStrategy.makeCustomOutput_preRFv2(appBundleId:isAudioStartAction:customDialog:viewData:deviceState:linkActionDialogTemplate:manifest:responseFactory:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 19__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v17;
  *(_OWORD *)(v8 + 176) = v16;
  *(void *)(v8 + 160) = a7;
  *(void *)(v8 + 16__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a8;
  *(void *)(v8 + 14__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a5;
  *(void *)(v8 + 15__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a6;
  *(_BYTE *)(v8 + 376) = a4;
  *(void *)(v8 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a2;
  *(void *)(v8 + 136) = a3;
  *(void *)(v8 + 120) = a1;
  uint64_t v9 = type metadata accessor for OutputGenerationManifest(0LL);
  *(void *)(v8 + 200) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 20__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v10;
  *(void *)(v8 + 216) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v8 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 224) = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SpeakableString(0LL);
  *(void *)(v8 + 23__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v8 + 240) = v13;
  unint64_t v14 = (*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v8 + 24__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = swift_task_alloc(v14);
  *(void *)(v8 + 256) = swift_task_alloc(v14);
  return swift_task_switch( static ShortcutsLinkRCHFlowStrategy.makeCustomOutput_preRFv2(appBundleId:isAudioStartAction:customDialog:viewData:deviceState:linkActionDialogTemplate:manifest:responseFactory:),  0LL,  0LL);
}

uint64_t static ShortcutsLinkRCHFlowStrategy.makeCustomOutput_preRFv2(appBundleId:isAudioStartAction:customDialog:viewData:deviceState:linkActionDialogTemplate:manifest:responseFactory:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(v3 + 144))
  {
    uint64_t v4 = (void *)swift_task_alloc(dword_21CCF4);
    *(void *)(v3 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 264) = v4;
    void *v4 = v3;
    v4[1] = static ShortcutsLinkRCHFlowStrategy.makeCustomOutput_preRFv2(appBundleId:isAudioStartAction:customDialog:viewData:deviceState:linkActionDialogTemplate:manifest:responseFactory:);
    return LNDialog.asSpeakableString.getter(*(void *)(v3 + 224));
  }

  else
  {
    OUTLINED_FUNCTION_50_1(*(void *)(v3 + 224), a2, a3, *(void *)(v3 + 232));
    outlined destroy of Any?(*(void *)(v3 + 224), &demangling cache variable for type metadata for SpeakableString?);
    *(_BYTE *)(v3 + 377) = *(void *)(v3 + 144) != 0LL;
    id v6 = (void *)swift_task_alloc(dword_217A1C);
    *(void *)(v3 + 27__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v6;
    uint64_t v7 = OUTLINED_FUNCTION_38_17( v6,  (uint64_t)static ShortcutsLinkRCHFlowStrategy.makeCustomOutput_preRFv2(appBundleId:isAudioStartAction:customDialog:viewData:deviceState:linkActionDialogTemplate:manifest:responseFactory:));
    return OUTLINED_FUNCTION_47_16(v7, v8);
  }

uint64_t static ShortcutsLinkRCHFlowStrategy.makeCustomOutput_preRFv2(appBundleId:isAudioStartAction:customDialog:viewData:deviceState:linkActionDialogTemplate:manifest:responseFactory:)()
{
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  void *v19;
  uint64_t v20;
  char v21;
  char v1 = *(void *)(v0 + 224);
  if (__swift_getEnumTagSinglePayload(v1, 1LL, *(void *)(v0 + 232)) == 1)
  {
    outlined destroy of Any?(v1, &demangling cache variable for type metadata for SpeakableString?);
    uint64_t v2 = *(void *)(v0 + 144) != 0LL;
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 248);
    uint64_t v3 = *(void *)(v0 + 256);
    uint64_t v5 = *(void *)(v0 + 240);
    id v6 = OUTLINED_FUNCTION_75(v3, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32));
    uint64_t v7 = SpeakableString.print.getter(v6);
    uint64_t v9 = v8;
    swift_bridgeObjectRelease(v8);
    if ((v9 & 0x2000000000000000LL) != 0) {
      uint64_t v10 = HIBYTE(v9) & 0xF;
    }
    else {
      uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v11 = OUTLINED_FUNCTION_75(v4, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
    if (v10)
    {
      uint64_t v2 = 1;
    }

    else
    {
      uint64_t v12 = SpeakableString.speak.getter(v11);
      unint64_t v14 = v13;
      swift_bridgeObjectRelease(v13);
      uint64_t v15 = HIBYTE(v14) & 0xF;
      if ((v14 & 0x2000000000000000LL) == 0) {
        uint64_t v15 = v12 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v2 = v15 != 0;
    }

    __int128 v16 = *(void *)(v0 + 256);
    uint64_t v17 = *(void *)(v0 + 232);
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 240) + 8LL);
    v18(*(void *)(v0 + 248), v17);
    v18(v16, v17);
  }

  *(_BYTE *)(v0 + 377) = v2;
  uint64_t v19 = (void *)swift_task_alloc(dword_217A1C);
  *(void *)(v0 + 27__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v19;
  uint64_t v20 = OUTLINED_FUNCTION_38_17( v19,  (uint64_t)static ShortcutsLinkRCHFlowStrategy.makeCustomOutput_preRFv2(appBundleId:isAudioStartAction:customDialog:viewData:deviceState:linkActionDialogTemplate:manifest:responseFactory:));
  return OUTLINED_FUNCTION_47_16(v20, v21);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_50_5();
  *(void *)(v2 + 280) = v3;
  OUTLINED_FUNCTION_54_0(v4);
  if (v0)
  {
    swift_task_dealloc(*(void *)(v2 + 256));
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v1 + 8));
  }

  else
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  Class isa;
  uint64_t v11;
  uint64_t v12;
  id v13;
  Class v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  if (*(_BYTE *)(v0 + 377) == 1)
  {
    uint64_t v2 = (void *)swift_task_alloc(dword_217A8C);
    *(void *)(v0 + 28__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v2;
    *uint64_t v2 = v0;
    v2[1] = static ShortcutsLinkRCHFlowStrategy.makeCustomOutput_preRFv2(appBundleId:isAudioStartAction:customDialog:viewData:deviceState:linkActionDialogTemplate:manifest:responseFactory:);
    return LinkActionDialogTemplating.actionPerformedDialog_preRFv2(customPrompt:)(*(void *)(v0 + 144));
  }

  uint64_t v4 = [*(id *)(v0 + 280) dialog];
  uint64_t v5 = OUTLINED_FUNCTION_72( (uint64_t)v4,  &lazy cache variable for type metadata for PatternExecutionDialog,  &OBJC_CLASS___PatternExecutionDialog_ptr);
  id v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0) {
      uint64_t v11 = v6;
    }
    else {
      uint64_t v11 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    OUTLINED_FUNCTION_17_1();
    uint64_t v7 = (void *)_CocoaArrayWrapper.endIndex.getter(v11);
    OUTLINED_FUNCTION_20();
    if (v7) {
      goto LABEL_5;
    }
  }

  else
  {
    uint64_t v7 = *(void **)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFF8LL));
    if (v7)
    {
LABEL_5:
      OUTLINED_FUNCTION_56_19();
      if ((v6 & 0xC000000000000001LL) != 0) {
        char v8 = (id)OUTLINED_FUNCTION_83_3();
      }
      else {
        char v8 = *(id *)(v6 + 32);
      }
      uint64_t v7 = v8;
      OUTLINED_FUNCTION_20();
      uint64_t v9 = v7;
      Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
      OUTLINED_FUNCTION_60_8(v9, "setSpokenOnly:");

      goto LABEL_13;
    }
  }

  OUTLINED_FUNCTION_20();
LABEL_13:
  *(void *)(v0 + 320) = v7;
  if (one-time initialization token for shared != -1) {
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  }
  uint64_t v12 = OUTLINED_FUNCTION_73_7();
  if ((v12 & 1) != 0 && v7)
  {
    OUTLINED_FUNCTION_72( v12,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
    uint64_t v13 = v7;
    unint64_t v14 = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
    OUTLINED_FUNCTION_60_8(v13, "setPrintOnly:");
  }

  uint64_t v15 = *(void *)(v0 + 160);
  if (v15 >> 60 == 15)
  {
    swift_bridgeObjectRelease(0LL);
    OUTLINED_FUNCTION_16_26();
    if (v15)
    {
      OUTLINED_FUNCTION_121_1((uint64_t)[*(id *)(v0 + 320) dialogId]);
      OUTLINED_FUNCTION_42_11();
    }

    else
    {
      char v1 = 0LL;
    }

    OutputGenerationManifest.responseViewId.setter(v1);
    OUTLINED_FUNCTION_30_17();
    OUTLINED_FUNCTION_35_23();
    uint64_t v20 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)[1]);
    OUTLINED_FUNCTION_10_19(v20);
    return OUTLINED_FUNCTION_48_13();
  }

  else
  {
    __int128 v16 = *(void *)(v0 + 152);
    uint64_t v18 = *(void *)(v0 + 128);
    uint64_t v17 = *(void *)(v0 + 136);
    outlined init with copy of AppShortcutInvoking(*(void *)(v0 + 168), v0 + 80);
    OUTLINED_FUNCTION_61_16(v16);
    OUTLINED_FUNCTION_61_16(v16);
    swift_bridgeObjectRetain(v17);
    ActionPerformedVisual.init(appBundleId:prompt:viewData:deviceState:)( v18,  v17,  0LL,  0LL,  v16,  v15,  (void *)(v0 + 80),  (void *)(v0 + 16));
    uint64_t v19 = (void *)swift_task_alloc(dword_21C334);
    *(void *)(v0 + 32__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v19;
    *uint64_t v19 = v0;
    v19[1] = static ShortcutsLinkRCHFlowStrategy.makeCustomOutput_preRFv2(appBundleId:isAudioStartAction:customDialog:viewData:deviceState:linkActionDialogTemplate:manifest:responseFactory:);
    return OUTLINED_FUNCTION_49_14();
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  Class isa;
  uint64_t v10;
  uint64_t v11;
  id v12;
  Class v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v20;
  char v1 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v3 = [*(id *)(v0 + 280) dialog];
  uint64_t v4 = OUTLINED_FUNCTION_72( (uint64_t)v3,  &lazy cache variable for type metadata for PatternExecutionDialog,  &OBJC_CLASS___PatternExecutionDialog_ptr);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    OUTLINED_FUNCTION_17_1();
    id v6 = (void *)_CocoaArrayWrapper.endIndex.getter(v10);
    OUTLINED_FUNCTION_20();
    if (v6) {
      goto LABEL_3;
    }
LABEL_10:
    OUTLINED_FUNCTION_20();
    goto LABEL_11;
  }

  id v6 = *(void **)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8LL));
  if (!v6) {
    goto LABEL_10;
  }
LABEL_3:
  OUTLINED_FUNCTION_56_19();
  if ((v5 & 0xC000000000000001LL) != 0) {
    uint64_t v7 = (id)OUTLINED_FUNCTION_83_3();
  }
  else {
    uint64_t v7 = *(id *)(v5 + 32);
  }
  id v6 = v7;
  OUTLINED_FUNCTION_20();
  char v8 = v6;
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  OUTLINED_FUNCTION_60_8(v8, "setSpokenOnly:");

LABEL_11:
  *(void *)(v0 + 320) = v6;
  if (one-time initialization token for shared != -1) {
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  }
  uint64_t v11 = OUTLINED_FUNCTION_73_7();
  if ((v11 & 1) != 0 && v6)
  {
    OUTLINED_FUNCTION_72( v11,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
    uint64_t v12 = v6;
    uint64_t v13 = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
    OUTLINED_FUNCTION_60_8(v12, "setPrintOnly:");
  }

  unint64_t v14 = *(void *)(v0 + 160);
  if (v14 >> 60 == 15)
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_16_26();
    if (v14)
    {
      OUTLINED_FUNCTION_121_1((uint64_t)[*(id *)(v0 + 320) dialogId]);
      OUTLINED_FUNCTION_42_11();
    }

    OUTLINED_FUNCTION_36_18();
    OUTLINED_FUNCTION_30_17();
    OUTLINED_FUNCTION_35_23();
    uint64_t v20 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)[1]);
    OUTLINED_FUNCTION_10_19(v20);
    return OUTLINED_FUNCTION_48_13();
  }

  else
  {
    uint64_t v15 = *(void *)(v0 + 152);
    uint64_t v17 = *(void *)(v0 + 128);
    __int128 v16 = *(void *)(v0 + 136);
    outlined init with copy of AppShortcutInvoking(*(void *)(v0 + 168), v0 + 80);
    OUTLINED_FUNCTION_61_16(v15);
    OUTLINED_FUNCTION_61_16(v15);
    swift_bridgeObjectRetain(v16);
    ActionPerformedVisual.init(appBundleId:prompt:viewData:deviceState:)( v17,  v16,  v2,  v1,  v15,  v14,  (void *)(v0 + 80),  (void *)(v0 + 16));
    uint64_t v18 = (void *)swift_task_alloc(dword_21C334);
    *(void *)(v0 + 32__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v18;
    *uint64_t v18 = v0;
    v18[1] = static ShortcutsLinkRCHFlowStrategy.makeCustomOutput_preRFv2(appBundleId:isAudioStartAction:customDialog:viewData:deviceState:linkActionDialogTemplate:manifest:responseFactory:);
    return OUTLINED_FUNCTION_49_14();
  }

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v1 = *(void *)(v0 + 160);
  outlined bridged method (mbnn) of @objc PatternExecutionResult.visual.setter( *(void *)(v0 + 352),  *(void *)(v0 + 344),  *(void **)(v0 + 280));
  OUTLINED_FUNCTION_88_5();
  OUTLINED_FUNCTION_16_26();
  if (v1)
  {
    OUTLINED_FUNCTION_121_1((uint64_t)[*(id *)(v0 + 320) dialogId]);
    OUTLINED_FUNCTION_42_11();
  }

  OUTLINED_FUNCTION_36_18();
  OUTLINED_FUNCTION_30_17();
  OUTLINED_FUNCTION_35_23();
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)[1]);
  uint64_t v3 = OUTLINED_FUNCTION_10_19(v2);
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)( v3,  v4,  v5,  v6,  v7);
}

{
  OUTLINED_FUNCTION_23_22();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  char v1 = *(void **)(v0 + 320);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 208);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  uint64_t v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return v5();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_72_5();
  OUTLINED_FUNCTION_46_18();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  char v1 = *(void **)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 160);

  outlined release of ActionPerformedVisual((void *)(v0 + 16));
  outlined consume of Data?(v3, v2);

  OUTLINED_FUNCTION_46_18();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  char v1 = *(void **)(v0 + 320);

  OUTLINED_FUNCTION_21_1();
  OUTLINED_FUNCTION_46_18();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t static ShortcutsLinkRCHFlowStrategy.makeCustomOutput_preRFv2(appBundleId:isAudioStartAction:customDialog:viewData:deviceState:linkActionDialogTemplate:manifest:responseFactory:)( uint64_t a1, uint64_t a2)
{
  uint64_t v7 = v4[36];
  *char v8 = *v3;
  v4[37] = v2;
  swift_task_dealloc(v7);
  if (!v2)
  {
    v4[38] = a2;
    v4[39] = a1;
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v7;
  void *v8;
  OUTLINED_FUNCTION_30_2();
  uint64_t v7 = v4[41];
  *char v8 = *v3;
  v4[42] = v2;
  swift_task_dealloc(v7);
  if (!v2)
  {
    v4[43] = a2;
    v4[44] = a1;
    outlined release of ActionPerformedVisual(v4 + 2);
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t ShortcutsLinkRCHFlowStrategy.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 40));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 88));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 128));
  swift_release();
  return v0;
}

uint64_t ShortcutsLinkRCHFlowStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 176LL, 7LL);
}

uint64_t specialized ShortcutsLinkRCHFlowStrategy.init(appBundleId:actionMetadata:showWhenRun:deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:outputPublisher:aceServiceInvoker:linkActionPatterns:)( uint64_t a1, uint64_t a2, void *a3, char a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v40 = a6;
  uint64_t v41 = a7;
  uint64_t v37 = (void *)a9;
  uint64_t v38 = (void *)a8;
  uint64_t v39 = a13;
  uint64_t v18 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v44[3] = a12;
  v44[4] = a13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v44);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a12 - 8) + 32LL))( boxed_opaque_existential_1,  a10,  a12);
  *(void *)(a11 + 16) = a1;
  *(void *)(a11 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a2;
  *(void *)(a11 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a3;
  outlined init with copy of AppShortcutInvoking((uint64_t)a5, a11 + 40);
  *(_BYTE *)(a11 + 80) = a4;
  BOOL v22 = v38;
  outlined init with copy of AppShortcutInvoking((uint64_t)v38, a11 + 88);
  uint64_t v23 = v37;
  outlined init with copy of AppShortcutInvoking((uint64_t)v37, a11 + 128);
  outlined init with copy of AppShortcutInvoking((uint64_t)a5, (uint64_t)v43);
  outlined init with copy of AppShortcutInvoking((uint64_t)v44, (uint64_t)v42);
  type metadata accessor for RunVoiceCommandCATs(0LL);
  id v24 = a3;
  static CATOption.defaultMode.getter(v24);
  uint64_t v25 = CATWrapper.__allocating_init(options:globals:)(v20, 0LL);
  uint64_t v26 = type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  static CATOption.defaultMode.getter(v26);
  uint64_t v27 = CATWrapperSimple.__allocating_init(options:globals:)(v20, 0LL);

  __swift_destroy_boxed_opaque_existential_1Tm(v44);
  __swift_destroy_boxed_opaque_existential_1Tm(v23);
  __swift_destroy_boxed_opaque_existential_1Tm(v22);
  __swift_destroy_boxed_opaque_existential_1Tm(a5);
  uint64_t v28 = type metadata accessor for LinkActionDialogTemplating();
  uint64_t v29 = (void *)swift_allocObject(v28, 128LL, 7LL);
  uint64_t v30 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v42, v42[3]);
  __chkstk_darwin(v30);
  uint64_t v32 = (char *)&v36 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v33 + 16))(v32);
  uint64_t v34 = specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)( v43,  v40,  v41,  v25,  v27,  (uint64_t)v32,  v29,  a12,  v39);
  __swift_destroy_boxed_opaque_existential_1Tm(v42);
  *(void *)(a11 + 16__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v34;
  return a11;
}

void *specialized LNNeedsValueRequest.toDisambiguationItems(bundleIdentifier:actionParameterMetadata:selectedValues:locale:metadataProvider:)( uint64_t a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v11 = [a3 valueType];
  uint64_t v12 = objc_opt_self(&OBJC_CLASS___LNLinkEnumerationValueType);
  uint64_t v13 = swift_dynamicCastObjCClass(v11, v12);
  if (!v13)
  {

    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v16, (uint64_t)static Logger.voiceCommands);
    id v17 = a3;
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      os_log_type_t v21 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v20 = 138412290;
      id v22 = [v17 valueType];
      uint64_t v51 = (uint64_t)v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v20 + 4);
      void *v21 = v22;

      _os_log_impl( &dword_0,  v18,  v19,  "Can only create disambiguations for LNLinkEnumerationValueType, not %@",  v20,  0xCu);
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v21, 1LL, v23);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_release();

      return _swiftEmptyArrayStorage;
    }

    swift_release();

LABEL_10:
    return _swiftEmptyArrayStorage;
  }

  if (!a4)
  {
    id v24 = (void *)v13;
    unint64_t v26 = LinkMetadataProvider.enums(forBundleIdentifier:)();
    id v27 = v11;
    uint64_t v28 = specialized Sequence.first(where:)(v26, v24);
    swift_bridgeObjectRelease(v26);
    if (v28)
    {
      type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for LNLinkEnumerationValueType,  &OBJC_CLASS___LNLinkEnumerationValueType_ptr);
      id v29 = v28;
      id v30 = [v24 enumerationIdentifier];
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v33 = v32;

      id v34 = LNLinkEnumerationValueType.__allocating_init(enumerationIdentifier:)(v31, v33);
      id v35 = [v29 cases];
      uint64_t v36 = type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for LNEnumCaseMetadata,  &OBJC_CLASS___LNEnumCaseMetadata_ptr);
      unint64_t v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v35, v36);

      swift_bridgeObjectRetain(a6);
      id v38 = v34;
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18LNEnumCaseMetadataCG_18SiriLinkFlowPlugin09ShortcutsH18DisambiguationItemVs5NeverOTg5028_sSo19LNNeedsValueRequestC18ghij5E21tol108Items16bundleIdentifier23actionParameterMetadata14selectedValues6locale16metadataProviderSayAC09ShortcutseI4m66VGSS_So08LNActionnO0CSaySo7LNValueCGSgSSAC0eO9Providing_ptFAKSo010dE9O0CXEfU1_So017LNLinkEnumerationR4TypeCSSTf1cn_n( v37,  v38,  a5,  a6);
      uint64_t v15 = v39;
      swift_release();

      swift_bridgeObjectRelease(v37);
      return (void *)v15;
    }

    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v40 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v40, (uint64_t)static Logger.voiceCommands);
    id v17 = v27;
    uint64_t v41 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v44 = swift_slowAlloc(32LL, -1LL);
      uint64_t v51 = v44;
      *(_DWORD *)uint64_t v43 = 136315138;
      id v45 = [v24 enumerationIdentifier];
      uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v48 = v47;

      uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v48, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v43 + 4);

      swift_bridgeObjectRelease(v48);
      _os_log_impl(&dword_0, v41, v42, "Could not find LNEnumMetadata for identifier: %s", v43, 0xCu);
      swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1LL, -1LL);
      swift_slowDealloc(v43, -1LL, -1LL);

      swift_release();
    }

    else
    {
      swift_release();
    }

    goto LABEL_10;
  }

  swift_bridgeObjectRetain(a6);
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo7LNValueCG_18SiriLinkFlowPlugin09ShortcutsF18DisambiguationItemVs5NeverOTg5028_sSo19LNNeedsValueRequestC18efgh5E21toj108Items16bundleIdentifier23actionParameterMetadata14selectedValues6locale16metadataProviderSayAC09ShortcutseI4k27VGSS_So08LNActionnO0CSaySo7D33CGSgSSAC0eO9Providing_ptFAkPXEfU_SSTf1cn_n( a4,  a5,  a6);
  uint64_t v15 = v14;
  swift_release();

  return (void *)v15;
}

void *specialized ShortcutsLinkDisambiguationFlowStrategy.init(appBundleId:actionMetadata:dialog:metadataProvider:deviceState:serviceInvoker:outputPublisher:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 *a8, void *a9)
{
  a9[13] = type metadata accessor for LinkMetadataProvider();
  a9[14] = &protocol witness table for LinkMetadataProvider;
  a9[10] = a5;
  a9[3] = a1;
  a9[4] = a2;
  a9[20] = a3;
  a9[2] = a4;
  outlined init with take of AceServiceInvokerAsync(a6, (uint64_t)(a9 + 5));
  outlined init with take of AceServiceInvokerAsync(a7, (uint64_t)(a9 + 15));
  outlined init with take of AceServiceInvokerAsync(a8, (uint64_t)(a9 + 21));
  return a9;
}

void *specialized ShortcutsLinkPromptForConfirmationFlowStrategy.init(action:request:actionMetadata:appBundleId:runLinkActionCatWrapperSimple:linkActionPatterns:runLinkActionCatWrapper:enableTCCLabelsProvider:responseFactory:deviceState:serviceInvoker:outputPublisher:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int128 *a10, __int128 *a11, __int128 *a12, void *a13)
{
  a13[11] = type metadata accessor for RunLinkActionCATPatternsExecutor(0LL);
  a13[12] = &protocol witness table for RunLinkActionCATPatternsExecutor;
  a13[8] = a7;
  a13[17] = &type metadata for EnableTCCLabelsProvider;
  a13[18] = &protocol witness table for EnableTCCLabelsProvider;
  a13[22] = type metadata accessor for ResponseFactory(0LL);
  a13[23] = &protocol witness table for ResponseFactory;
  a13[19] = a9;
  a13[2] = a1;
  a13[3] = a2;
  a13[4] = a3;
  a13[5] = a4;
  a13[6] = a5;
  a13[7] = a6;
  a13[13] = a8;
  outlined init with take of AceServiceInvokerAsync(a10, (uint64_t)(a13 + 24));
  outlined init with take of AceServiceInvokerAsync(a11, (uint64_t)(a13 + 29));
  outlined init with take of AceServiceInvokerAsync(a12, (uint64_t)(a13 + 34));
  return a13;
}

uint64_t sub_AE46C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t partial apply for closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(action:successResult:startedSessionId:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  char v5 = *(_BYTE *)(v0 + 48);
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v7 = (void *)swift_task_alloc(dword_219494);
  *(void *)(v1 + 16) = v7;
  uint64_t v8 = OUTLINED_FUNCTION_101_1(v7);
  return closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(action:successResult:startedSessionId:)( v8,  v9,  v2,  v3,  v4,  v5,  v6);
}

uint64_t partial apply for closure #1 in static ShortcutsLinkRCHFlowStrategy.makeCustomOutput(appBundleId:successOutput:startedSessionId:isAudioStartAction:deviceState:linkActionDialogTemplate:responseFactory:)( uint64_t a1)
{
  return closure #1 in static ShortcutsLinkRCHFlowStrategy.makeCustomOutput(appBundleId:successOutput:startedSessionId:isAudioStartAction:deviceState:linkActionDialogTemplate:responseFactory:)( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24));
}

void lazy protocol witness table accessor for type ShortcutsLinkPromptForValueFlowStrategy and conformance ShortcutsLinkPromptForValueFlowStrategy( unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  if (!*a1)
  {
    uint64_t v3 = a2(255LL);
    atomic_store(OUTLINED_FUNCTION_95_2(v3), a1);
  }

  OUTLINED_FUNCTION_1();
}

void lazy protocol witness table accessor for type PromptForValueFlowAsync<LNValue> and conformance PromptForValueFlowAsync<A>( unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    atomic_store(OUTLINED_FUNCTION_95_2(v3), a1);
  }

  OUTLINED_FUNCTION_1();
}

uint64_t sub_AE594()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t partial apply for closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(error:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = (void *)swift_task_alloc(dword_2194B4);
  *(void *)(v1 + 16) = v3;
  uint64_t v4 = OUTLINED_FUNCTION_101_1(v3);
  return closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(error:)(v4, v5, v2);
}

uint64_t type metadata accessor for ShortcutsLinkRCHFlowStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin28ShortcutsLinkRCHFlowStrategy);
}

void *outlined release of ActionPerformedVisual(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  unint64_t v5 = a1[7];
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  outlined consume of Data._Representation(v4, v5);
  return a1;
}

uint64_t OUTLINED_FUNCTION_10_19(void *a1)
{
  *(void *)(v2 + 360) = a1;
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 120);
}

uint64_t OUTLINED_FUNCTION_16_26()
{
  return (*(uint64_t (**)(void, void, void))(v0[26] + 16LL))(v0[27], v0[23], v0[25]);
}

uint64_t OUTLINED_FUNCTION_23_22()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 360);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 36__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v0;
  return swift_task_dealloc(v5);
}

uint64_t OUTLINED_FUNCTION_25_22()
{
  return swift_release(v0);
}

uint64_t OUTLINED_FUNCTION_30_17()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)v0 + 224LL))(v1);
}

uint64_t OUTLINED_FUNCTION_32_13()
{
  return (*(uint64_t (**)(void, void))(v0[22] + 8LL))(v0[23], v0[21]);
}

void *OUTLINED_FUNCTION_35_23()
{
  return __swift_project_boxed_opaque_existential_1(v0, v0[3]);
}

uint64_t OUTLINED_FUNCTION_36_18()
{
  return OutputGenerationManifest.responseViewId.setter(v0);
}

uint64_t OUTLINED_FUNCTION_37_18()
{
  return swift_task_dealloc(*(void *)(v0 + 312));
}

uint64_t OUTLINED_FUNCTION_38_17@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 144);
}

void OUTLINED_FUNCTION_39_21(uint64_t a1)
{
}

void OUTLINED_FUNCTION_40_19(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

void OUTLINED_FUNCTION_42_11()
{
}

uint64_t OUTLINED_FUNCTION_45_14()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
}

uint64_t OUTLINED_FUNCTION_46_18()
{
  return swift_task_dealloc(*(void *)(v0 + 256));
}

uint64_t OUTLINED_FUNCTION_47_16(uint64_t a1, char a2)
{
  return LinkActionDialogTemplating.makeActionPerformedPattern_preRFv2(customResponse:useSonicStatus:)(a1, a2);
}

uint64_t OUTLINED_FUNCTION_48_13()
{
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)();
}

uint64_t OUTLINED_FUNCTION_49_14()
{
  return ActionPerformedVisual.data.getter();
}

uint64_t OUTLINED_FUNCTION_52_13()
{
  return swift_task_dealloc(*(void *)(v0 + 272));
}

void OUTLINED_FUNCTION_53_14()
{
}

uint64_t OUTLINED_FUNCTION_56_19()
{
  if (v0) {
    uint64_t v1 = 1LL;
  }
  else {
    uint64_t v1 = 0LL;
  }
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, v1);
}

uint64_t OUTLINED_FUNCTION_61_16(uint64_t a1)
{
  return outlined copy of Data?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_62_12()
{
  return v0;
}

void OUTLINED_FUNCTION_64_9(uint64_t a1, uint64_t a2)
{
}

uint64_t OUTLINED_FUNCTION_68_8(uint64_t a1)
{
  return Flow.eraseToAnyValueFlow()(v1, a1);
}

BOOL OUTLINED_FUNCTION_69_6(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_72_5()
{
}

uint64_t OUTLINED_FUNCTION_73_7()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 272LL))();
}

void OUTLINED_FUNCTION_74_10(uint64_t a1, uint64_t a2)
{
}

uint64_t OUTLINED_FUNCTION_81_9@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_83_3()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v0);
}

void OUTLINED_FUNCTION_84_6()
{
}

uint64_t OUTLINED_FUNCTION_85_6@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_88_5()
{
  return outlined consume of Data?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_89_5()
{
  return swift_release(v0);
}

uint64_t OUTLINED_FUNCTION_90_3( uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return specialized ShortcutsLinkRCHFlowStrategy.init(appBundleId:actionMetadata:showWhenRun:deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:outputPublisher:aceServiceInvoker:linkActionPatterns:)( a1,  a2,  a3,  a4,  *(void **)(v13 - 112),  *(void *)(v13 - 104),  *(void *)(v13 - 96),  *(void *)(v13 - 88),  a9,  a10,  a11,  a12,  a13);
}

id OUTLINED_FUNCTION_92_1()
{
  return [v0 *(SEL *)(v1 + 104)];
}

uint64_t OUTLINED_FUNCTION_95_2(uint64_t a1)
{
  return swift_getWitnessTable(v1, a1);
}

uint64_t OUTLINED_FUNCTION_98_1()
{
  return __swift_destroy_boxed_opaque_existential_1Tm(v0);
}

uint64_t OUTLINED_FUNCTION_101_1(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_102_2()
{
  return outlined consume of Data?(v1, v0);
}

void *OUTLINED_FUNCTION_103_2()
{
  return __swift_project_boxed_opaque_existential_1(v0, v1);
}

const char *CustomUnderstandingSystemDialogActsFactory.displayStringKey.unsafeMutableAddressor()
{
  return "displayString";
}

uint64_t static CustomUnderstandingSystemDialogActsFactory.displayStringKey.getter()
{
  return 0x5379616C70736964LL;
}

void static CustomUnderstandingSystemDialogActsFactory.systemPromptedForSlotValue(intentType:bundleId:resolvedParameters:unresolvedParameter:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v20;
  a20 = v21;
  uint64_t v110 = v22;
  uint64_t v109 = v23;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoGraph?);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v30);
  OUTLINED_FUNCTION_83();
  uint64_t v111 = v31;
  uint64_t v108 = *(void *)(OUTLINED_FUNCTION_10_20() - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v32);
  OUTLINED_FUNCTION_83();
  uint64_t v107 = v33;
  uint64_t v121 = 95LL;
  unint64_t v122 = 0xE100000000000000LL;
  unint64_t v105 = lazy protocol witness table accessor for type String and conformance String();
  OUTLINED_FUNCTION_6_25();
  uint64_t v40 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v34,  v35,  v36,  v37,  v38,  v39,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v105);
  os_log_type_t v42 = v41;
  uint64_t v118 = v29;
  uint64_t v119 = v27;
  *(void *)&__int128 v116 = 46LL;
  *((void *)&v116 + 1) = 0xE100000000000000LL;
  uint64_t v43 = StringProtocol.components<A>(separatedBy:)( &v116,  &type metadata for String,  &type metadata for String,  v105,  v105);
  uint64_t v44 = specialized BidirectionalCollection.last.getter(v43);
  uint64_t v46 = v45;
  OUTLINED_FUNCTION_69();
  if (v46)
  {
    uint64_t v29 = v44;
  }

  else
  {
    swift_bridgeObjectRetain(v27);
    uint64_t v46 = v27;
  }

  uint64_t v47 = OUTLINED_FUNCTION_19_19();
  OUTLINED_FUNCTION_51(v47);
  uint64_t v48 = UsoOpenTaskBuilder.init(baseEntityString:verbString:)(v40, v42, v29, v46);
  uint64_t v49 = v48;
  if (v25)
  {
    uint64_t v114 = v48;
    uint64_t v112 = v25 + 64;
    OUTLINED_FUNCTION_9_22();
    unint64_t v52 = v51 & v50;
    __int128 v54 = &v120;
    int64_t v113 = (unint64_t)(v53 + 63) >> 6;
    OUTLINED_FUNCTION_43_17(v113 - 1);
    swift_bridgeObjectRetain(v25);
    uint64_t v55 = 0LL;
    os_log_type_t v42 = &demangling cache variable for type metadata for (key: String, value: Any)?;
    os_log_type_t v56 = (char *)&type metadata for Any + 8;
    uint64_t v57 = &type metadata for String;
    if (!v52) {
      goto LABEL_8;
    }
LABEL_6:
    unint64_t v58 = __clz(__rbit64(v52));
    v52 &= v52 - 1;
    unint64_t v59 = v58 | (v55 << 6);
LABEL_7:
    uint64_t v60 = *(void *)(v25 + 56);
    uint64_t v61 = (void *)(*(void *)(v25 + 48) + 16 * v59);
    uint64_t v62 = v61[1];
    *(void *)&__int128 v116 = *v61;
    *((void *)&v116 + 1) = v62;
    outlined init with copy of Any(v60 + 32 * v59, (uint64_t)v117);
    OUTLINED_FUNCTION_80();
    while (1)
    {
      outlined init with take of String?( (uint64_t)&v116,  (uint64_t)&v118,  (uint64_t *)&demangling cache variable for type metadata for (key: String, value: Any)?);
      uint64_t v68 = v119;
      if (!v119) {
        break;
      }
      uint64_t v69 = v118;
      outlined init with take of Any(v54, &v116);
      if ((OUTLINED_FUNCTION_35_6((uint64_t)&v121, (uint64_t)&v116, (uint64_t)v56, (uint64_t)v57) & 1) != 0)
      {
        uint64_t v115 = v69;
        uint64_t v70 = v55;
        uint64_t v71 = v57;
        uint64_t v72 = v25;
        uint64_t v73 = v56;
        uint64_t v74 = v54;
        uint64_t v75 = v121;
        unint64_t v76 = v122;
        uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v78 = (__n128 *)OUTLINED_FUNCTION_23_4(v77);
        uint64_t v79 = OUTLINED_FUNCTION_5_25(v78, (__n128)xmmword_17E150);
        OUTLINED_FUNCTION_51(v79);
        unint64_t v80 = v76;
        __int128 v54 = v74;
        os_log_type_t v56 = v73;
        uint64_t v25 = v72;
        uint64_t v57 = v71;
        uint64_t v55 = v70;
        uint64_t v81 = UsoPrimitiveStringBuilder.init(value:)(v75, v80);
        v78[2].n128_u64[0] = v81;
        *(void *)&__int128 v116 = v78;
        specialized Array._endMutation()(v81, v82, v83);
        uint64_t v84 = v116;
        dispatch thunk of UsoOpenTaskBuilder.setArgumentBuilders(argumentName:builders:)(v115, v68, v116);
        uint64_t v85 = v84;
        os_log_type_t v42 = &demangling cache variable for type metadata for (key: String, value: Any)?;
        swift_bridgeObjectRelease(v85);
      }

      OUTLINED_FUNCTION_1_2();
      if (v52) {
        goto LABEL_6;
      }
LABEL_8:
      if (__OFADD__(v55, 1LL))
      {
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_14_28();
      if (v63 != v64)
      {
        OUTLINED_FUNCTION_17_26();
        if (v66) {
          goto LABEL_12;
        }
        uint64_t v67 = v65;
        if (v65 + 1 < v113)
        {
          unint64_t v66 = *(void *)(v112 + 8 * (v65 + 1));
          if (v66)
          {
            ++v65;
LABEL_12:
            unint64_t v52 = (v66 - 1) & v66;
            unint64_t v59 = __clz(__rbit64(v66)) + (v65 << 6);
            uint64_t v55 = v65;
            goto LABEL_7;
          }

          uint64_t v67 = v65 + 1;
          if (v65 + 2 < v113)
          {
            unint64_t v66 = *(void *)(v112 + 8 * (v65 + 2));
            if (v66)
            {
              v65 += 2LL;
              goto LABEL_12;
            }

            OUTLINED_FUNCTION_14_28();
            if (v63 != v64)
            {
              OUTLINED_FUNCTION_17_26();
              if (!v66)
              {
                do
                {
                  OUTLINED_FUNCTION_14_28();
                  if (v63 == v64)
                  {
                    uint64_t v67 = v106;
                    goto LABEL_13;
                  }

                  unint64_t v66 = *(void *)(v86 + 8 * v55++);
                }

                while (!v66);
                uint64_t v65 = v55 + 4;
              }

              goto LABEL_12;
            }
          }
        }
      }

      else
      {
        uint64_t v67 = v55;
      }

LABEL_13:
      unint64_t v52 = 0LL;
      memset(v117, 0, sizeof(v117));
      uint64_t v55 = v67;
      __int128 v116 = 0u;
    }

    OUTLINED_FUNCTION_11_3();
    uint64_t v49 = v114;
  }

  uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v88 = (__n128 *)OUTLINED_FUNCTION_23_4(v87);
  uint64_t v89 = OUTLINED_FUNCTION_5_25(v88, (__n128)xmmword_17E150);
  OUTLINED_FUNCTION_51(v89);
  uint64_t v90 = UsoPrimitiveStringBuilder.init(value:)(0LL, 0xE000000000000000LL);
  v88[2].n128_u64[0] = v90;
  uint64_t v118 = (uint64_t)v88;
  specialized Array._endMutation()(v90, v91, v92);
  uint64_t v93 = v118;
  dispatch thunk of UsoOpenTaskBuilder.setArgumentBuilders(argumentName:builders:)(v109, v110, v118);
  OUTLINED_FUNCTION_37();
  uint64_t v94 = OUTLINED_FUNCTION_23_4(v87);
  *(_OWORD *)(v94 + 16) = xmmword_17E150;
  *(void *)(v94 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v49;
  uint64_t v118 = v94;
  specialized Array._endMutation()(v94, v95, v96);
  swift_retain(v49);
  OUTLINED_FUNCTION_39_22();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_38_18();
  if (v93)
  {
    OUTLINED_FUNCTION_23_6();
    OUTLINED_FUNCTION_37_11();
    OUTLINED_FUNCTION_34_16(v97, v98, v99, (uint64_t)&a16);
    swift_release();
    OUTLINED_FUNCTION_34_0();
    outlined destroy of URL?(v111, &demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoGraph?);
  }

  else
  {
    OUTLINED_FUNCTION_32_14();
    OUTLINED_FUNCTION_31_17(v100, v101, v102, (uint64_t)&a16);
    uint64_t v103 = (*(uint64_t (**)(uint64_t, uint64_t, void *))(v108 + 32))(v107, v111, v42);
    OUTLINED_FUNCTION_72( v103,  &lazy cache variable for type metadata for USOSerializedGraph,  &OBJC_CLASS___USOSerializedGraph_ptr);
    uint64_t v104 = (void *)static USOSerializedGraph.fromProto(protoGraph:)(v107);
    OUTLINED_FUNCTION_27_20(objc_allocWithZone(&OBJC_CLASS___SIRINLUSystemPrompted), "initWithReference:");
    swift_release();
    OUTLINED_FUNCTION_34_0();

    (*(void (**)(uint64_t, void *))(v108 + 8))(v107, v42);
  }

  OUTLINED_FUNCTION_24_0();
}

  OUTLINED_FUNCTION_24_0();
}

  swift_task_dealloc();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_20_2();
  uint64_t v46 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return v46();
}

void static CustomUnderstandingSystemDialogActsFactory.systemOfferedForIntentConfirmation(intent:)()
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoGraph?);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_83();
  uint64_t v125 = v4;
  uint64_t v126 = OUTLINED_FUNCTION_10_20();
  uint64_t v124 = *(void *)(v126 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_83();
  uint64_t v123 = v6;
  Swift::Int v7 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  outlined bridged method (pb) of @objc INIntent.parametersByName.getter(v2);
  if (v8)
  {
    uint64_t v0 = v8;
    unint64_t v122 = v2;
    uint64_t v131 = 0LL;
    uint64_t v127 = v8 + 64;
    OUTLINED_FUNCTION_9_22();
    unint64_t v11 = v10 & v9;
    int64_t v129 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v121 = v129 - 1;
    uint64_t v128 = v13;
    if ((v10 & v9) == 0) {
      goto LABEL_5;
    }
LABEL_3:
    unint64_t v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    unint64_t v15 = v14 | (v131 << 6);
LABEL_4:
    uint64_t v16 = *(void *)(v0 + 56);
    id v17 = (void *)(*(void *)(v0 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    *(void *)&__int128 v138 = *v17;
    *((void *)&v138 + 1) = v18;
    outlined init with copy of Any(v16 + 32 * v15, (uint64_t)v139);
    OUTLINED_FUNCTION_80();
    while (1)
    {
      outlined init with take of String?( (uint64_t)&v138,  (uint64_t)&v140,  (uint64_t *)&demangling cache variable for type metadata for (key: String, value: Any)?);
      unint64_t v26 = v141;
      if (!v141)
      {
        OUTLINED_FUNCTION_11_3();
        uint64_t v2 = v122;
        goto LABEL_62;
      }

      uint64_t v27 = v140;
      outlined init with take of Any(v142, &v138);
      outlined init with copy of Any((uint64_t)&v138, (uint64_t)v137);
      uint64_t v28 = type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INObject,  &OBJC_CLASS___INObject_ptr);
      outlined init with copy of Any((uint64_t)&v138, (uint64_t)v135);
      if (!OUTLINED_FUNCTION_35_6( (uint64_t)v134,  (uint64_t)v135,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String))
      {
        if (one-time initialization token for voiceCommands != -1) {
          swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
        }
        uint64_t v41 = type metadata accessor for Logger(0LL);
        __swift_project_value_buffer(v41, (uint64_t)static Logger.voiceCommands);
        uint64_t v42 = OUTLINED_FUNCTION_11_11();
        uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
        os_log_type_t v44 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v43, v44))
        {
          uint64_t v45 = OUTLINED_FUNCTION_38(12LL);
          uint64_t v46 = OUTLINED_FUNCTION_38(32LL);
          v135[0] = v46;
          *(_DWORD *)uint64_t v45 = 136315138;
          OUTLINED_FUNCTION_11_11();
          *(void *)(v45 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v26, v135);
          swift_bridgeObjectRelease_n(v26, 3LL);
          _os_log_impl( &dword_0,  v43,  v44,  "Tried to unwrap parameter as String when generating SystemDialogAct for: %s",  (uint8_t *)v45,  0xCu);
          swift_arrayDestroy(v46, 1LL, (char *)&type metadata for Any + 8);
          OUTLINED_FUNCTION_1_0(v46);
          OUTLINED_FUNCTION_1_0(v45);
        }

        else
        {
          swift_bridgeObjectRelease_n(v26, 2LL);
        }

LABEL_58:
        __swift_destroy_boxed_opaque_existential_1Tm(&v138);
        goto LABEL_59;
      }

      __int128 v32 = v134[0];
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
      v135[0] = v7;
      OUTLINED_FUNCTION_41_19(v27);
      OUTLINED_FUNCTION_17_6();
      if (v20) {
        goto LABEL_94;
      }
      unint64_t v36 = v34;
      char v37 = v35;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, String>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v7))
      {
        unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v26);
        if ((v37 & 1) != (v39 & 1)) {
          goto LABEL_99;
        }
        unint64_t v36 = v38;
      }

      Swift::Int v7 = v135[0];
      if ((v37 & 1) != 0)
      {
        uint64_t v40 = *(void *)(v135[0] + 56) + 16 * v36;
        swift_bridgeObjectRelease(*(void *)(v40 + 8));
        *(_OWORD *)uint64_t v40 = v32;
      }

      else
      {
        OUTLINED_FUNCTION_8_26();
        *uint64_t v57 = v27;
        v57[1] = v26;
        *(_OWORD *)(*(void *)(v7 + 56) + 16 * v36) = v32;
        uint64_t v58 = *(void *)(v7 + 16);
        BOOL v20 = __OFADD__(v58, 1LL);
        uint64_t v59 = v58 + 1;
        if (v20) {
          goto LABEL_96;
        }
        *(void *)(v7 + 16) = v59;
        OUTLINED_FUNCTION_11_11();
      }

      OUTLINED_FUNCTION_69();
      swift_bridgeObjectRelease(0x8000000000000000LL);
      __swift_destroy_boxed_opaque_existential_1Tm(&v138);
      uint64_t v0 = v128;
LABEL_59:
      __swift_destroy_boxed_opaque_existential_1Tm(v137);
      if (v11) {
        goto LABEL_3;
      }
LABEL_5:
      if (__OFADD__(v131, 1LL))
      {
LABEL_92:
        __break(1u);
        goto LABEL_93;
      }

      OUTLINED_FUNCTION_14_28();
      if (v19 != v20)
      {
        OUTLINED_FUNCTION_17_26();
        if (v22) {
          goto LABEL_9;
        }
        OUTLINED_FUNCTION_43_17(v21);
        if (v24 < v129)
        {
          unint64_t v22 = *(void *)(v127 + 8 * v24);
          if (v22) {
            goto LABEL_12;
          }
          uint64_t v131 = v24;
          if (v23 + 2 < v129)
          {
            unint64_t v22 = *(void *)(v127 + 8 * (v23 + 2));
            if (v22)
            {
              uint64_t v21 = v23 + 2;
              goto LABEL_9;
            }

            int64_t v24 = v23 + 3;
            uint64_t v131 = v23 + 2;
            if (v23 + 3 < v129)
            {
              unint64_t v22 = *(void *)(v127 + 8 * v24);
              if (!v22)
              {
                while (!__OFADD__(v24, 1LL))
                {
                  OUTLINED_FUNCTION_14_28();
                  if (v19 == v20)
                  {
                    OUTLINED_FUNCTION_43_17(v121);
                    goto LABEL_23;
                  }

                  OUTLINED_FUNCTION_17_26();
                  int64_t v24 = v25 + 1;
                  if (v22) {
                    goto LABEL_9;
                  }
                }

                goto LABEL_98;
              }

LABEL_84:
    unint64_t v86 = (v92 - 1) & v92;
  }

  OUTLINED_FUNCTION_14_28();
  if (v19 == v20) {
    goto LABEL_87;
  }
  OUTLINED_FUNCTION_17_26();
  if (v92)
  {
    uint64_t v82 = v94;
    goto LABEL_84;
  }

  while (1)
  {
    uint64_t v82 = v94 + 1;
    if (__OFADD__(v94, 1LL)) {
      break;
    }
    OUTLINED_FUNCTION_21_19();
    if (v19 == v20) {
      goto LABEL_87;
    }
    OUTLINED_FUNCTION_24_19();
    uint64_t v94 = v95 + 1;
    if (v92) {
      goto LABEL_84;
    }
  }

    if ((v76 & 1) != 0) {
      goto LABEL_133;
    }
    uint64_t v84 = &v51[16 * v53];
    unint64_t v86 = *(void *)v84;
    uint64_t v85 = *((void *)v84 + 1);
    id v64 = __OFSUB__(v85, v86);
    uint64_t v87 = v85 - v86;
    if (v64) {
      goto LABEL_135;
    }
    if (v87 < v75) {
      goto LABEL_101;
    }
LABEL_92:
    unint64_t v92 = v53 - 1;
    if (v53 - 1 >= v50)
    {
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }

    if (!v9) {
      goto LABEL_151;
    }
    uint64_t v93 = v9;
    uint64_t v94 = &v51[16 * v92];
    uint64_t v95 = *(void *)v94;
    uint64_t v96 = &v51[16 * v53];
    uint64_t v97 = *((void *)v96 + 1);
    specialized _merge<A>(low:mid:high:buffer:by:)( (char *)(v93 + 24LL * *(void *)v94),  (char *)(v93 + 24LL * *(void *)v96),  v93 + 24 * v97,  v114);
    if (v1) {
      break;
    }
    if (v97 < v95) {
      goto LABEL_124;
    }
    if (v53 > *((void *)v10 + 2)) {
      goto LABEL_125;
    }
    *(void *)uint64_t v94 = v95;
    *(void *)&v51[16 * v92 + 8] = v97;
    uint64_t v98 = *((void *)v10 + 2);
    if (v53 >= v98) {
      goto LABEL_126;
    }
    unint64_t v50 = v98 - 1;
    memmove(&v51[16 * v53], v96 + 16, 16 * (v98 - 1 - v53));
    *((void *)v10 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v98 - 1;
    uint64_t v81 = v98 > 2;
    uint64_t v9 = v113;
    if (!v81) {
      goto LABEL_101;
    }
  }

LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void static CustomUnderstandingSystemDialogActsFactory.systemOfferedForParameterConfirmation(intent:parameter:resolutionResult:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v21;
  a20 = v22;
  int64_t v24 = v23;
  unint64_t v26 = v25;
  uint64_t v28 = v27;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoGraph?);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v29);
  OUTLINED_FUNCTION_83();
  uint64_t v98 = v30;
  OUTLINED_FUNCTION_10_20();
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v31);
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_43_17(v32);
  id v33 = [v24 itemToConfirm];
  _bridgeAnyObjectToAny(_:)(v107);
  swift_unknownObjectRelease(v33);
  uint64_t v34 = outlined init with copy of Any((uint64_t)v107, (uint64_t)&v105);
  uint64_t v35 = OUTLINED_FUNCTION_72( v34,  (unint64_t *)&lazy cache variable for type metadata for INObject,  &OBJC_CLASS___INObject_ptr);
  unint64_t v97 = v26;
  if (OUTLINED_FUNCTION_26_20((uint64_t)&v104, v36, v37, v35))
  {
    uint64_t v40 = v104;
    NSString v41 = OUTLINED_FUNCTION_7_21();
    id v42 = OUTLINED_FUNCTION_27_20(v40, "valueForKey:");

    if (v42)
    {
      _bridgeAnyObjectToAny(_:)(v100);

      swift_unknownObjectRelease(v42);
    }

    else
    {

      memset(v100, 0, 32);
    }

    outlined init with take of String?( (uint64_t)v100,  (uint64_t)&v101,  &demangling cache variable for type metadata for Any?);
    if (v103)
    {
      if ((OUTLINED_FUNCTION_35_6( (uint64_t)v99,  (uint64_t)&v101,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String) & 1) != 0)
      {
        uint64_t v45 = v99[0];
        unint64_t v44 = v99[1];
        goto LABEL_12;
      }
    }

    else
    {
      outlined destroy of URL?((uint64_t)&v101, &demangling cache variable for type metadata for Any?);
    }
  }

  else
  {
    if (OUTLINED_FUNCTION_26_20((uint64_t)&v101, v38, v39, (uint64_t)&type metadata for Int))
    {
      v100[0] = v101;
      uint64_t v96 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      unint64_t v44 = v43;
      goto LABEL_20;
    }

    outlined init with copy of Any((uint64_t)v107, (uint64_t)&v101);
    if (OUTLINED_FUNCTION_35_6( (uint64_t)v100,  (uint64_t)&v101,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String))
    {
      unint64_t v44 = v100[1];
      uint64_t v45 = v100[0];
LABEL_12:
      uint64_t v96 = v45;
      goto LABEL_20;
    }

    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v46 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v46, (uint64_t)static Logger.voiceCommands);
    uint64_t v47 = swift_bridgeObjectRetain_n(v26, 2LL);
    uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v20 = 12LL;
      unint64_t v50 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v51 = OUTLINED_FUNCTION_38(32LL);
      uint64_t v101 = v51;
      *(_DWORD *)unint64_t v50 = 136315138;
      swift_bridgeObjectRetain(v26);
      uint64_t v52 = OUTLINED_FUNCTION_45_15();
      v100[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v26, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v100, &v100[1], v50 + 4);
      swift_bridgeObjectRelease_n(v26, 3LL);
      _os_log_impl( &dword_0,  v48,  v49,  "Tried to unwrap parameter as String when generating confirmation SystemDialogAct for: %s",  v50,  0xCu);
      swift_arrayDestroy(v51, 1LL, (char *)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v51);
      OUTLINED_FUNCTION_1_0((uint64_t)v50);
    }

    else
    {

      swift_bridgeObjectRelease_n(v26, 2LL);
    }
  }

  uint64_t v96 = 0LL;
  unint64_t v44 = 0xE000000000000000LL;
LABEL_20:
  __swift_destroy_boxed_opaque_existential_1Tm(&v105);
  id v54 = [v28 typeName];
  uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v57 = v56;

  uint64_t v105 = (uint64_t)INIntent.bundleId.getter();
  uint64_t v106 = v58;
  uint64_t v101 = 46LL;
  unint64_t v102 = 0xE100000000000000LL;
  v100[0] = 95LL;
  v100[1] = 0xE100000000000000LL;
  lazy protocol witness table accessor for type String and conformance String();
  OUTLINED_FUNCTION_44_9();
  OUTLINED_FUNCTION_6_25();
  uint64_t v65 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v59,  v60,  v61,  v62,  v63,  v64,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v20);
  uint64_t v67 = v66;
  uint64_t v105 = v55;
  uint64_t v106 = v57;
  uint64_t v101 = 46LL;
  unint64_t v102 = 0xE100000000000000LL;
  uint64_t v68 = OUTLINED_FUNCTION_42_12((uint64_t)&v101, (uint64_t)&type metadata for String, (uint64_t)&type metadata for String);
  specialized BidirectionalCollection.last.getter(v68);
  uint64_t v70 = v69;
  OUTLINED_FUNCTION_1_2();
  if (v70) {
    swift_bridgeObjectRelease(v57);
  }
  OUTLINED_FUNCTION_69();
  uint64_t v71 = OUTLINED_FUNCTION_19_19();
  OUTLINED_FUNCTION_51(v71);
  uint64_t v72 = OUTLINED_FUNCTION_25_23(v65, v67);
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v74 = (__n128 *)OUTLINED_FUNCTION_23_4(v73);
  uint64_t v75 = OUTLINED_FUNCTION_5_25(v74, (__n128)xmmword_17E150);
  OUTLINED_FUNCTION_51(v75);
  uint64_t v76 = UsoPrimitiveStringBuilder.init(value:)(v96, v44);
  v74[2].n128_u64[0] = v76;
  uint64_t v105 = (uint64_t)v74;
  specialized Array._endMutation()(v76, v77, v78);
  uint64_t v79 = v105;
  uint64_t v80 = OUTLINED_FUNCTION_45_15();
  dispatch thunk of UsoOpenTaskBuilder.setArgumentBuilders(argumentName:builders:)(v80, v97, v79);
  OUTLINED_FUNCTION_37();
  uint64_t v81 = OUTLINED_FUNCTION_23_4(v73);
  *(_OWORD *)(v81 + 16) = xmmword_17E150;
  *(void *)(v81 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v72;
  uint64_t v105 = v81;
  specialized Array._endMutation()(v81, v82, v83);
  uint64_t v84 = v105;
  swift_retain(v72);
  static UsoGraphBuilder.buildGraph(taskBuilders:)(v84);
  swift_bridgeObjectRelease(v84);
  OUTLINED_FUNCTION_38_18();
  if (v79)
  {
    OUTLINED_FUNCTION_23_6();
    OUTLINED_FUNCTION_37_11();
    OUTLINED_FUNCTION_34_16(v85, v86, v87, (uint64_t)&a17);
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm(v107);
    outlined destroy of URL?(v98, &demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoGraph?);
  }

  else
  {
    OUTLINED_FUNCTION_32_14();
    OUTLINED_FUNCTION_31_17(v88, v89, v90, (uint64_t)&a17);
    uint64_t v91 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v95 + 32))(v94, v98, v67);
    OUTLINED_FUNCTION_72( v91,  &lazy cache variable for type metadata for USOSerializedGraph,  &OBJC_CLASS___USOSerializedGraph_ptr);
    unint64_t v92 = (void *)static USOSerializedGraph.fromProto(protoGraph:)(v94);
    id v93 = [objc_allocWithZone(SIRINLUUserWantedToProceed) initWithReference:v92];
    OUTLINED_FUNCTION_27_20(objc_allocWithZone(&OBJC_CLASS___SIRINLUSystemOffered), "initWithOfferedAct:");
    swift_release();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v94, v67);
    __swift_destroy_boxed_opaque_existential_1Tm(v107);
  }

  OUTLINED_FUNCTION_24_0();
}

void static CustomUnderstandingSystemDialogActsFactory.systemGaveOptionsForDisambiguation(intent:parameter:options:)()
{
  uint64_t v1 = v0;
  uint64_t v58 = v2;
  uint64_t v59 = v3;
  uint64_t v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoGraph?);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_83();
  uint64_t v60 = v7;
  uint64_t v8 = OUTLINED_FUNCTION_10_20();
  uint64_t v56 = *(void *)(v8 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_83();
  uint64_t v55 = v10;
  id v11 = [v5 typeName];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  INIntent.bundleId.getter();
  unint64_t v52 = lazy protocol witness table accessor for type String and conformance String();
  OUTLINED_FUNCTION_6_25();
  uint64_t v57 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v15,  v16,  v17,  v18,  v19,  v20,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v52);
  uint64_t v62 = v21;
  uint64_t v65 = v12;
  uint64_t v66 = v14;
  v64[0] = 46LL;
  v64[1] = 0xE100000000000000LL;
  uint64_t v22 = StringProtocol.components<A>(separatedBy:)(v64, &type metadata for String, &type metadata for String, v52, v52);
  uint64_t v61 = specialized BidirectionalCollection.last.getter(v22);
  uint64_t v24 = v23;
  swift_bridgeObjectRelease(v22);
  if (v24)
  {
    swift_bridgeObjectRelease(v14);
    OUTLINED_FUNCTION_37();
  }

  else
  {
    OUTLINED_FUNCTION_37();
    uint64_t v61 = v12;
    uint64_t v24 = v14;
  }

  uint64_t v65 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v25 = *(void *)(v1 + 16);
  if (v25)
  {
    uint64_t v54 = OUTLINED_FUNCTION_19_19();
    swift_bridgeObjectRetain(v1);
    unint64_t v26 = (uint64_t *)(v1 + 40);
    uint64_t v53 = v24;
    do
    {
      uint64_t v63 = v25;
      uint64_t v27 = v8;
      uint64_t v29 = *(v26 - 1);
      uint64_t v28 = *v26;
      OUTLINED_FUNCTION_51(v54);
      swift_bridgeObjectRetain(v28);
      OUTLINED_FUNCTION_80();
      OUTLINED_FUNCTION_11_11();
      uint64_t v30 = UsoOpenTaskBuilder.init(baseEntityString:verbString:)(v57, v62, v61, v24);
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v32 = (__n128 *)OUTLINED_FUNCTION_23_4(v31);
      uint64_t v33 = OUTLINED_FUNCTION_5_25(v32, (__n128)xmmword_17E150);
      OUTLINED_FUNCTION_51(v33);
      uint64_t v34 = UsoPrimitiveStringBuilder.init(value:)(v29, v28);
      v32[2].n128_u64[0] = v34;
      v64[0] = v32;
      specialized Array._endMutation()(v34, v35, v36);
      dispatch thunk of UsoOpenTaskBuilder.setArgumentBuilders(argumentName:builders:)(v58, v59, v64[0]);
      OUTLINED_FUNCTION_1_2();
      uint64_t v37 = OUTLINED_FUNCTION_23_4(v31);
      *(_OWORD *)(v37 + 16) = xmmword_17E150;
      *(void *)(v37 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v30;
      v64[0] = v37;
      specialized Array._endMutation()(v37, v38, v39);
      swift_retain(v30);
      OUTLINED_FUNCTION_39_22();
      OUTLINED_FUNCTION_20();
      Graph.protobufGraphSiriNl(vocabManager:)(0LL);
      OUTLINED_FUNCTION_32_14();
      __swift_storeEnumTagSinglePayload(v40, v41, v42, v27);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 32))(v55, v60, v27);
      type metadata accessor for NSError( 0LL,  &lazy cache variable for type metadata for USOSerializedGraph,  &OBJC_CLASS___USOSerializedGraph_ptr);
      unint64_t v43 = (void *)OUTLINED_FUNCTION_46_19();
      id v44 = [objc_allocWithZone(SIRINLUUserStatedTask) initWithTask:v43];
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      unint64_t v46 = *(void *)((char *)&dword_10 + (v65 & 0xFFFFFFFFFFFFFF8LL));
      unint64_t v45 = *(void *)((char *)&dword_18 + (v65 & 0xFFFFFFFFFFFFFF8LL));
      if (v46 >= v45 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1LL);
      }
      v26 += 2;
      uint64_t v47 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v46, v44);
      specialized Array._endMutation()(v47, v48, v49);
      OUTLINED_FUNCTION_34_0();

      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v27);
      uint64_t v25 = v63 - 1;
      uint64_t v8 = v27;
      uint64_t v24 = v53;
    }

    while (v63 != 1);
    OUTLINED_FUNCTION_63_4();
    OUTLINED_FUNCTION_69();
    uint64_t v50 = OUTLINED_FUNCTION_45_15();
  }

  else
  {
    OUTLINED_FUNCTION_63_4();
    uint64_t v50 = v24;
  }

  uint64_t v51 = swift_bridgeObjectRelease(v50);
  OUTLINED_FUNCTION_72( v51,  &lazy cache variable for type metadata for SIRINLUSystemGaveOptions,  &OBJC_CLASS___SIRINLUSystemGaveOptions_ptr);
  SIRINLUSystemGaveOptions.__allocating_init(choices:)(v65);
  OUTLINED_FUNCTION_24_0();
}

id SIRINLUSystemGaveOptions.__allocating_init(choices:)(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserDialogAct);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  id v4 = [v2 initWithChoices:isa];

  return v4;
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0LL;
  }
  id v2 = (uint64_t *)(a1 + 32 * v1);
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain(v2[3]);
  return v3;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0LL;
  }
  id v2 = a1 + 16 * v1;
  uint64_t v3 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain(*(void *)(v2 + 24));
  return v3;
}

ValueMetadata *type metadata accessor for CustomUnderstandingSystemDialogActsFactory()
{
  return &type metadata for CustomUnderstandingSystemDialogActsFactory;
}

uint64_t OUTLINED_FUNCTION_5_25(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for UsoPrimitiveStringBuilder(0LL);
}

  ;
}

NSString OUTLINED_FUNCTION_7_21()
{
  return String._bridgeToObjectiveC()();
}

void OUTLINED_FUNCTION_8_26()
{
  *(void *)(v0 + 8 * (v1 >> 6) + 64) |= 1LL << v1;
}

  ;
}

uint64_t OUTLINED_FUNCTION_10_20()
{
  return type metadata accessor for Siri_Nl_Core_Protocol_UsoGraph(0LL);
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_19_19()
{
  return type metadata accessor for UsoOpenTaskBuilder(0LL);
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_25_23(uint64_t a1, uint64_t a2)
{
  return UsoOpenTaskBuilder.init(baseEntityString:verbString:)(a1, a2, v2, v3);
}

uint64_t OUTLINED_FUNCTION_26_20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, v5 - 152, v4, a4, 0LL);
}

id OUTLINED_FUNCTION_27_20(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_31_17@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, a3, *(void *)(a4 - 256));
}

  ;
}

uint64_t OUTLINED_FUNCTION_34_16@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, a3, *(void *)(a4 - 256));
}

uint64_t OUTLINED_FUNCTION_38_18()
{
  return Graph.protobufGraphSiriNl(vocabManager:)();
}

uint64_t OUTLINED_FUNCTION_39_22()
{
  return static UsoGraphBuilder.buildGraph(taskBuilders:)(v0);
}

unint64_t OUTLINED_FUNCTION_41_19(uint64_t a1)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_42_12(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StringProtocol.components<A>(separatedBy:)(a1, a2, a3, v3, v3);
}

void OUTLINED_FUNCTION_43_17(uint64_t a1@<X8>)
{
  *(void *)(v1 - 336) = a1;
}

uint64_t OUTLINED_FUNCTION_44_9()
{
  return v0 - 192;
}

uint64_t OUTLINED_FUNCTION_45_15()
{
  return *(void *)(v0 - 264);
}

uint64_t OUTLINED_FUNCTION_46_19()
{
  return static USOSerializedGraph.fromProto(protoGraph:)(v0);
}

uint64_t ListShortcutsCATs.launchApp(device:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch(ListShortcutsCATs.launchApp(device:), 0LL, 0LL);
}

uint64_t ListShortcutsCATs.launchApp(device:)()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = swift_allocObject(v2, 80LL, 7LL);
  v0[5] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_17E650;
  *(void *)(v3 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0x656369766564LL;
  *(void *)(v3 + 40) = 0xE600000000000000LL;
  uint64_t v4 = 0LL;
  if (v1)
  {
    uint64_t v4 = type metadata accessor for SirikitDeviceState(0LL);
  }

  else
  {
    *(void *)(v3 + 56) = 0LL;
    *(void *)(v3 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  *(void *)(v3 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v1;
  *(void *)(v3 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v4;
  uint64_t v5 = *((unsigned int *)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:) + 1);
  swift_retain(v1);
  uint64_t v6 = (void *)swift_task_alloc(v5);
  v0[6] = v6;
  *uint64_t v6 = v0;
  v6[1] = ListShortcutsCATs.launchApp(device:);
  return ((uint64_t (*)(void, unint64_t, unint64_t, uint64_t))v8)( v0[2],  0xD000000000000017LL,  0x80000000001907E0LL,  v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *(void *)(*v1 + 48);
  uint64_t v3 = *v1;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(RunVoiceCommandCATs.openAppFailed(device:), 0LL, 0LL);
  }
  swift_bridgeObjectRelease(*(void *)(v3 + 40));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t ListShortcutsCATs.viewShortcutsInApp()(uint64_t a1)
{
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for ScreentimeCheckFlowStrategyAsync.makeAppRestrictedByScreentimeResponse() in conformance WFScreentimeCheckFlowStrategy;
  return ((uint64_t (*)(uint64_t, unint64_t, unint64_t, void *))v5)( a1,  0xD000000000000020LL,  0x8000000000190800LL,  _swiftEmptyArrayStorage);
}

uint64_t type metadata accessor for ListShortcutsCATs(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for ListShortcutsCATs;
  if (!type metadata singleton initialization cache for ListShortcutsCATs) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ListShortcutsCATs);
  }
  return result;
}

uint64_t type metadata completion function for ListShortcutsCATs(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + class metadata base offset for ListShortcutsCATs);
}

uint64_t ObjC metadata update function for ListShortcutsCATs()
{
  return type metadata accessor for ListShortcutsCATs(0LL);
}

uint64_t _finalizeUninitializedArray<A>(_:)(uint64_t a1)
{
  return a1;
}

uint64_t ExactMatcher.match(term:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v103)(void *__return_ptr, uint64_t, uint64_t);
  void *v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(Swift::String *__return_ptr, uint64_t, char *);
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  Swift::String v114;
  void *v115;
  Swift::Int v116;
  void v117[2];
  uint64_t v118;
  void v119[2];
  Swift::String v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  char v125[8];
  Swift::String v126;
  uint64_t v127;
  uint64_t v128;
  id v129;
  char v130[8];
  uint64_t v5 = *v3;
  uint64_t v113 = type metadata accessor for CharacterSet(0LL);
  uint64_t v112 = *(void *)(v113 - 8);
  uint64_t v6 = __chkstk_darwin(v113);
  uint64_t v8 = (char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)(v5 + 80);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_13_20((uint64_t)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_13_20((uint64_t)&v97 - v13);
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_13_20((uint64_t)&v97 - v15);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v97 - v18;
  uint64_t v98 = v20;
  __chkstk_darwin(v17);
  uint64_t v105 = (uint64_t *)((char *)&v97 - v21);
  uint64_t v22 = String.sanitized.getter();
  uint64_t v24 = v23;
  __n128 v25 = swift_bridgeObjectRetain(a3);
  uint64_t v26 = Array.startIndex.getter(v25);
  v126._uint64_t countAndFlagsBits = v26;
  uint64_t v27 = Array.endIndex.getter(a3, v9);
  uint64_t v108 = v24;
  uint64_t v107 = v22;
  if (v26 == v27)
  {
    swift_bridgeObjectRelease(a3);
    goto LABEL_3;
  }

  uint64_t v111 = *(void *)(v5 + 88);
  uint64_t v103 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v111 + 8);
  unint64_t v102 = &v118;
  uint64_t v101 = v119;
  uint64_t v110 = v19;
  uint64_t v99 = v5;
  while (1)
  {
    BOOL v33 = OUTLINED_FUNCTION_15_16();
    OUTLINED_FUNCTION_11_20(v33);
    if (v33)
    {
      OUTLINED_FUNCTION_6_26();
      OUTLINED_FUNCTION_4_25(v34, v35);
    }

    else
    {
      uint64_t result = OUTLINED_FUNCTION_12_21();
      if (v98 != 8)
      {
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
        return result;
      }

      uint64_t v55 = result;
      v120._uint64_t countAndFlagsBits = result;
      OUTLINED_FUNCTION_4_25((uint64_t)&v120, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));
      swift_unknownObjectRelease(v55);
    }

    OUTLINED_FUNCTION_5_14();
    OUTLINED_FUNCTION_21_20(&v126._countAndFlagsBits);
    OUTLINED_FUNCTION_37();
    uint64_t v36 = *(void (**)(char *, BOOL, uint64_t))(v10 + 32);
    v36(v110, v33, v9);
    v103(v117, v9, v111);
    uint64_t v37 = v117[1];
    outlined init with take of String?( (uint64_t)v102,  (uint64_t)v130,  (uint64_t *)&demangling cache variable for type metadata for String?);
    outlined release of String?((uint64_t)v130);
    outlined init with take of String?( (uint64_t)v101,  (uint64_t)&v129,  &demangling cache variable for type metadata for INImage?);
    outlined release of INImage?(&v129);
    uint64_t v128 = v119[1];
    outlined release of [String](&v128);
    id v120 = String.lowercased()();
    static CharacterSet.punctuationCharacters.getter(v120._countAndFlagsBits);
    unint64_t v38 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v39 = StringProtocol.components(separatedBy:)(v8, &type metadata for String, v38);
    OUTLINED_FUNCTION_3_31();
    swift_bridgeObjectRelease(v120._object);
    v120._uint64_t countAndFlagsBits = v39;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    unint64_t v40 = lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v41 = OUTLINED_FUNCTION_7_22(v40);
    uint64_t v43 = v42;
    swift_bridgeObjectRelease(v37);
    OUTLINED_FUNCTION_56_1();
    uint64_t v22 = v107;
    uint64_t v24 = v108;
    if (v41 == v107 && v43 == v108)
    {
      OUTLINED_FUNCTION_56_1();
      OUTLINED_FUNCTION_1_25();
      goto LABEL_66;
    }

    char v45 = OUTLINED_FUNCTION_0_27(v41, v43);
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_1_25();
    if ((v45 & 1) != 0) {
      goto LABEL_66;
    }
    uint64_t v46 = (*(uint64_t (**)(uint64_t))(v111 + 32))(v9);
    if (v46 == v22 && v47 == v24) {
      break;
    }
    uint64_t v49 = v47;
    char v50 = OUTLINED_FUNCTION_0_27(v46, v47);
    swift_bridgeObjectRelease(v49);
    uint64_t v51 = *(void (**)(uint64_t))(v10 + 8);
    uint64_t v52 = OUTLINED_FUNCTION_50_3();
    v51(v52);
    if ((v50 & 1) != 0) {
      goto LABEL_67;
    }
    ((void (*)(char *, uint64_t))v51)(v110, v9);
    uint64_t countAndFlagsBits = v126._countAndFlagsBits;
    uint64_t v54 = OUTLINED_FUNCTION_8_27();
    uint64_t v5 = v99;
    if (countAndFlagsBits == v54)
    {
      OUTLINED_FUNCTION_37();
LABEL_3:
      OUTLINED_FUNCTION_5_14();
      uint64_t v29 = Array.startIndex.getter(v28);
      uint64_t v116 = v29;
      uint64_t v30 = OUTLINED_FUNCTION_8_27();
      uint64_t v31 = v100;
      if (v29 == v30)
      {
LABEL_4:
        OUTLINED_FUNCTION_56_1();
        OUTLINED_FUNCTION_37();
        return 0LL;
      }

      uint64_t v110 = *(char **)(v5 + 88);
      uint64_t v109 = (void (*)(Swift::String *__return_ptr, uint64_t, char *))*((void *)v110 + 1);
      uint64_t v106 = &v121;
      uint64_t v105 = &v122;
      uint64_t v111 = v10;
      while (2)
      {
        char v56 = OUTLINED_FUNCTION_15_16();
        OUTLINED_FUNCTION_11_20(v56);
        if ((v56 & 1) != 0)
        {
          OUTLINED_FUNCTION_6_26();
          OUTLINED_FUNCTION_20_26(v57, v58);
        }

        else
        {
          uint64_t result = OUTLINED_FUNCTION_12_21();
          if (v98 != 8) {
            goto LABEL_71;
          }
          uint64_t v87 = result;
          v114._uint64_t countAndFlagsBits = result;
          OUTLINED_FUNCTION_20_26((uint64_t)&v114, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));
          swift_unknownObjectRelease(v87);
        }

        OUTLINED_FUNCTION_5_14();
        OUTLINED_FUNCTION_21_20(&v116);
        OUTLINED_FUNCTION_37();
        uint64_t v103 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 32);
        v103(v104, v31, v9);
        v109(&v120, v9, v110);
        uint64_t v59 = v123;
        uint64_t v127 = v123;
        uint64_t v126 = v120;
        swift_bridgeObjectRetain(v123);
        outlined release of String?((uint64_t)&v126);
        outlined init with take of String?( (uint64_t)v106,  (uint64_t)v125,  (uint64_t *)&demangling cache variable for type metadata for String?);
        outlined release of String?((uint64_t)v125);
        outlined init with take of String?( (uint64_t)v105,  (uint64_t)&v124,  &demangling cache variable for type metadata for INImage?);
        outlined release of INImage?(&v124);
        OUTLINED_FUNCTION_16_27();
        uint64_t v60 = *(void *)(v59 + 16);
        if (v60)
        {
          uint64_t v115 = _swiftEmptyArrayStorage;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v61 = (uint64_t *)(v59 + 40);
          do
          {
            uint64_t v62 = *v61;
            uint64_t v114 = String.lowercased()();
            swift_bridgeObjectRetain(v62);
            static CharacterSet.punctuationCharacters.getter(v63);
            unint64_t v64 = lazy protocol witness table accessor for type String and conformance String();
            uint64_t v65 = StringProtocol.components(separatedBy:)(v8, &type metadata for String, v64);
            OUTLINED_FUNCTION_3_31();
            swift_bridgeObjectRelease(v114._object);
            v114._uint64_t countAndFlagsBits = v65;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
            unint64_t v66 = lazy protocol witness table accessor for type [String] and conformance [A]();
            uint64_t v67 = OUTLINED_FUNCTION_7_22(v66);
            uint64_t v69 = v68;
            OUTLINED_FUNCTION_56_1();
            swift_bridgeObjectRelease(v65);
            uint64_t v70 = v115;
            if ((swift_isUniquelyReferenced_nonNull_native(v115) & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v70 = v115;
            }

            unint64_t v71 = v70[2];
            if (v71 >= v70[3] >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v70 = v115;
            }

            v61 += 2;
            v70[2] = v71 + 1;
            uint64_t v72 = &v70[2 * v71];
            v72[4] = v67;
            v72[5] = v69;
            --v60;
          }

          while (v60);
          OUTLINED_FUNCTION_16_27();
          uint64_t v10 = v111;
          uint64_t v24 = v108;
          uint64_t v22 = v107;
        }

        else
        {
          OUTLINED_FUNCTION_16_27();
          uint64_t v70 = _swiftEmptyArrayStorage;
        }

        uint64_t v73 = v70[2];
        if (v73)
        {
          uint64_t v74 = v70[4];
          uint64_t v75 = v70[5];
          BOOL v76 = v74 == v22 && v75 == v24;
          if (v76 || (OUTLINED_FUNCTION_0_27(v74, v75) & 1) != 0)
          {
LABEL_63:
            OUTLINED_FUNCTION_37();
            OUTLINED_FUNCTION_20();
            OUTLINED_FUNCTION_56_1();
            uint64_t v88 = OUTLINED_FUNCTION_18_22();
            uint64_t v89 = OUTLINED_FUNCTION_9_23(v88, *(unsigned int *)(v88 + 48));
            static Array._adoptStorage(_:count:)(v89, 1LL);
            v103(v90, (uint64_t)v104, v9);
            OUTLINED_FUNCTION_19_20();
            uint64_t v91 = OUTLINED_FUNCTION_50_3();
            return (uint64_t)CustomIntentDisambiguationItemContainer.init(items:)((Swift::OpaquePointer)v91).items._rawValue;
          }

          uint64_t v31 = v100;
          if (v73 == 1)
          {
            OUTLINED_FUNCTION_20();
            uint64_t v10 = v111;
            goto LABEL_59;
          }

          uint64_t v77 = v70[6];
          uint64_t v78 = v70[7];
          if (v77 == v22 && v78 == v24) {
            goto LABEL_63;
          }
          uint64_t result = OUTLINED_FUNCTION_0_27(v77, v78);
          if ((result & 1) != 0) {
            goto LABEL_63;
          }
          if (v73 != 2)
          {
            uint64_t v80 = v70 + 9;
            uint64_t v81 = 2LL;
            while (1)
            {
              uint64_t v82 = v81 + 1;
              if (__OFADD__(v81, 1LL)) {
                break;
              }
              uint64_t v83 = *(v80 - 1);
              uint64_t v84 = *v80;
              if (v83 == v22 && v84 == v24) {
                goto LABEL_63;
              }
              uint64_t result = OUTLINED_FUNCTION_0_27(v83, v84);
              if ((result & 1) != 0) {
                goto LABEL_63;
              }
              v80 += 2;
              ++v81;
              if (v82 == v73) {
                goto LABEL_57;
              }
            }

            __break(1u);
            goto LABEL_70;
          }

LABEL_57:
          OUTLINED_FUNCTION_20();
          uint64_t v10 = v111;
        }

        else
        {
          OUTLINED_FUNCTION_20();
        }

        uint64_t v31 = v100;
LABEL_59:
        (*(void (**)(void *, uint64_t))(v10 + 8))(v104, v9);
        Swift::Int v86 = v116;
        if (v86 == OUTLINED_FUNCTION_8_27()) {
          goto LABEL_4;
        }
        continue;
      }
    }
  }

  OUTLINED_FUNCTION_56_1();
LABEL_66:
  uint64_t v92 = OUTLINED_FUNCTION_50_3();
  v93(v92);
LABEL_67:
  OUTLINED_FUNCTION_56_1();
  OUTLINED_FUNCTION_37();
  uint64_t v94 = OUTLINED_FUNCTION_18_22();
  uint64_t v95 = OUTLINED_FUNCTION_9_23(v94, *(unsigned int *)(v94 + 48));
  static Array._adoptStorage(_:count:)(v95, 1LL);
  v36(v96, (BOOL)v110, v9);
  OUTLINED_FUNCTION_19_20();
  uint64_t v91 = OUTLINED_FUNCTION_50_3();
  return (uint64_t)CustomIntentDisambiguationItemContainer.init(items:)((Swift::OpaquePointer)v91).items._rawValue;
}

uint64_t getContiguousArrayStorageType<A>(for:)(uint64_t a1, uint64_t a2)
{
  if (dynamic_cast_existential_0_class_conditional(a2, a2)) {
    return __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  }
  else {
    return type metadata accessor for _ContiguousArrayStorage(0LL, a2);
  }
}

uint64_t type metadata completion function for ExactMatcher(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + 96);
}

uint64_t type metadata accessor for ExactMatcher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ExactMatcher);
}

uint64_t dynamic_cast_existential_0_class_conditional(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

uint64_t OUTLINED_FUNCTION_0_27(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t OUTLINED_FUNCTION_1_25()
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(v2 - 336))(*(void *)(v2 - 360), v1, v0);
}

uint64_t OUTLINED_FUNCTION_3_31()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 312) + 8LL))(v0, *(void *)(v1 - 304));
}

uint64_t OUTLINED_FUNCTION_4_25@<X0>( uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v4 = *(void *)(v3 - 368);
  *(void *)(v3 - 336) = a2;
  return a2(v4, a1, v2);
}

  ;
}

uint64_t OUTLINED_FUNCTION_7_22(uint64_t a1)
{
  return BidirectionalCollection<>.joined(separator:)(0LL, 0xE000000000000000LL, v1, a1);
}

uint64_t OUTLINED_FUNCTION_8_27()
{
  return Array.endIndex.getter(v1, v0);
}

uint64_t OUTLINED_FUNCTION_9_23@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return swift_allocObject(a1, ((v4 + a2) & ~v4) + v3, v4 | v2);
}

uint64_t OUTLINED_FUNCTION_11_20(char a1)
{
  return Array._checkSubscript(_:wasNativeTypeChecked:)(v2, a1 & 1, v3, v1);
}

uint64_t OUTLINED_FUNCTION_12_21()
{
  return _ArrayBuffer._getElementSlowPath(_:)(v1, v2, v0);
}

void OUTLINED_FUNCTION_13_20(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

BOOL OUTLINED_FUNCTION_15_16()
{
  return Array._hoistableIsNativeTypeChecked()();
}

void *OUTLINED_FUNCTION_16_27()
{
  return outlined release of [String]((void *)(v0 - 128));
}

uint64_t OUTLINED_FUNCTION_18_22()
{
  return getContiguousArrayStorageType<A>(for:)(v0, v0);
}

uint64_t OUTLINED_FUNCTION_19_20()
{
  return type metadata accessor for Array(0LL);
}

uint64_t OUTLINED_FUNCTION_20_26@<X0>( uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(v3, a1, v2);
}

void OUTLINED_FUNCTION_21_20(Swift::Int *after)
{
}

uint64_t WorkflowMacSnippetProvider.__allocating_init(deviceState:)(__int128 *a1)
{
  uint64_t v3 = OUTLINED_FUNCTION_19(v1, 56LL);
  outlined init with take of AceServiceInvokerAsync(a1, v3 + 16);
  return v3;
}

uint64_t static WorkflowSnippetProvider.getSnippetProvider(deviceState:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  uint64_t v4 = dispatch thunk of DeviceState.isCarPlay.getter(v2, v3);
  if ((v4 & 1) != 0)
  {
    OUTLINED_FUNCTION_36_19(v4);
    uint64_t v5 = type metadata accessor for WorkflowCarplaySnippetProvider();
  }

  else
  {
    uint64_t v6 = OUTLINED_FUNCTION_13_21();
    uint64_t v8 = dispatch thunk of DeviceState.isWatch.getter(v6, v7);
    if ((v8 & 1) != 0)
    {
      OUTLINED_FUNCTION_36_19(v8);
      uint64_t v5 = type metadata accessor for WorkflowWatchSnippetProvider();
    }

    else
    {
      uint64_t v9 = OUTLINED_FUNCTION_13_21();
      uint64_t v10 = dispatch thunk of DeviceState.isHomePod.getter(v9);
      if ((v10 & 1) != 0)
      {
        OUTLINED_FUNCTION_36_19(v10);
        uint64_t v5 = type metadata accessor for WorkflowHomePodSnippetProvider();
      }

      else
      {
        uint64_t v11 = OUTLINED_FUNCTION_13_21();
        if ((dispatch thunk of DeviceState.isMac.getter(v11, v12) & 1) != 0)
        {
          outlined init with copy of DeviceState((uint64_t)a1, (uint64_t)v15);
          uint64_t v5 = type metadata accessor for WorkflowMacSnippetProvider();
        }

        else
        {
          outlined init with copy of DeviceState((uint64_t)a1, (uint64_t)v15);
          uint64_t v5 = type metadata accessor for WorkflowPhoneSnippetProvider();
        }
      }
    }
  }

  uint64_t v13 = OUTLINED_FUNCTION_19(v5, 56LL);
  outlined init with take of AceServiceInvokerAsync(v15, v13 + 16);
  return v13;
}

uint64_t WorkflowSnippetProvider.buildSnippetForChooseFromList(shortcutName:appBundleId:disambiguationItems:utteranceViews:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(*(void *)v6 + 128LL));
  *(void *)(v7 + 16) = v14;
  void *v14 = v7;
  v14[1] = LNValueType.getLNValue(nlIntent:parameterMetadata:contactResolver:locale:);
  return v16(a5, a1, a2, a3, a4, a6);
}

uint64_t WorkflowSnippetProvider.makeSnippetForShowAlert(dialogRequest:appBundleId:shortcutName:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  v0[5] = OUTLINED_FUNCTION_4_0(*(void *)(v1 - 8));
  uint64_t v2 = OUTLINED_FUNCTION_11_0();
  uint64_t v3 = OUTLINED_FUNCTION_34_17(v2);
  v0[7] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v0[8] = v4;
  v0[9] = OUTLINED_FUNCTION_9_0(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

#error "B1850: call analysis failed (funcsize=81)"
uint64_t WorkflowSnippetProvider.buildIntentSnippet(intent:intentResponse:shortcutName:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  v0[5] = OUTLINED_FUNCTION_4_0(*(void *)(v1 - 8));
  uint64_t v2 = OUTLINED_FUNCTION_11_0();
  uint64_t v3 = OUTLINED_FUNCTION_34_17(v2);
  v0[7] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v0[8] = v4;
  v0[9] = OUTLINED_FUNCTION_9_0(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

#error "B1A1C: call analysis failed (funcsize=81)"
uint64_t WorkflowSnippetProvider.buildSnippetForPreflightError(appBundleId:)( uint64_t a1,  uint64_t a2,  uint64_t a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  v4[12] = a3;
  v4[13] = v3;
  v4[10] = a1;
  v4[11] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v4[14] = OUTLINED_FUNCTION_9_0(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for TemplatingText(0LL);
  v4[15] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[16] = v7;
  v4[17] = OUTLINED_FUNCTION_9_0(v7);
  uint64_t v8 = type metadata accessor for TemplatingSection(0LL);
  v4[18] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[19] = v9;
  v4[20] = OUTLINED_FUNCTION_9_0(v9);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[21] = OUTLINED_FUNCTION_4_0(*(void *)(v10 - 8));
  v4[22] = OUTLINED_FUNCTION_11_0();
  uint64_t v11 = type metadata accessor for CATOption(0LL);
  v4[23] = OUTLINED_FUNCTION_9_0(*(void *)(v11 - 8));
  uint64_t v12 = type metadata accessor for TemplatingResult(0LL);
  v4[24] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v4[25] = v13;
  v4[26] = OUTLINED_FUNCTION_4_0(v13);
  v4[27] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowSnippetProvider.buildSnippetForPreflightError(appBundleId:)()
{
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[23];
  uint64_t v4 = v0[11];
  uint64_t v3 = v0[12];
  type metadata accessor for App(0LL);
  swift_bridgeObjectRetain(v3);
  uint64_t v5 = App.__allocating_init(appIdentifier:)(v4, v3);
  v0[28] = v5;
  uint64_t v6 = type metadata accessor for AppNameResolver();
  swift_initStackObject(v6, v0 + 7);
  uint64_t v7 = (void *)static SAAppInfoFactory.createAppInfo(app:)(v5);
  AppNameResolver.resolveAppNameWithAppInfo(appInfo:)(v7);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  v0[29] = v8;
  v0[30] = v10;

  uint64_t v12 = type metadata accessor for RunVoiceCommandCATs(0LL);
  v0[31] = v12;
  static CATOption.defaultMode.getter(v12);
  uint64_t v13 = (void *)CATWrapper.__allocating_init(options:globals:)(v2, 0LL);
  v0[32] = v13;
  swift_bridgeObjectRetain(v11);
  OUTLINED_FUNCTION_24_15(v9, v11);
  uint64_t v14 = type metadata accessor for SpeakableString(0LL);
  v0[33] = v14;
  __swift_storeEnumTagSinglePayload(v1, 0LL, 1LL, v14);
  uint64_t v15 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunVoiceCommandCATs + *v13 + 24));
  v0[34] = v15;
  *uint64_t v15 = v0;
  v15[1] = WorkflowSnippetProvider.buildSnippetForPreflightError(appBundleId:);
  return v17(v0[27], v0[22]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 272);
  uint64_t v4 = *(void *)(*v1 + 176);
  *(void *)(*v1 + 280) = v0;
  swift_task_dealloc(v3);
  outlined destroy of URL?(v4, &demangling cache variable for type metadata for SpeakableString?);
  swift_release(*(void *)(v2 + 256));
  if (v0) {
    OUTLINED_FUNCTION_20();
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 304LL);
  *(void *)(*(void *)v1 + 312LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v2[21];
    swift_release(v2[37]);
    OUTLINED_FUNCTION_12_5();
    outlined destroy of URL?(v4, &demangling cache variable for type metadata for SpeakableString?);
    swift_bridgeObjectRelease(v2[9]);
  }

  else
  {
    uint64_t v5 = v2[36];
    outlined destroy of URL?(v2[21], &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_12_5();
    swift_release(v5);
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  id v0;
  uint64_t v1;
  id v2;
  id v3;
  unint64_t v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v6 = TemplatingResult.sections.getter();
  uint64_t v7 = *(void *)(v6 + 16);
  if (!v7)
  {
    __break(1u);
LABEL_10:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v4 + 1, 1LL);
LABEL_6:
    uint64_t v42 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, v3);
    specialized Array._endMutation()(v42, v43, v44);

    goto LABEL_8;
  }

  unint64_t v66 = (uint64_t *)(v1 + 72);
  uint64_t v8 = *(void *)(v1 + 152);
  uint64_t v9 = *(void *)(v1 + 160);
  uint64_t v11 = *(void *)(v1 + 136);
  uint64_t v10 = *(void *)(v1 + 144);
  uint64_t v13 = *(void *)(v1 + 120);
  uint64_t v12 = *(void *)(v1 + 128);
  uint64_t v14 = *(void **)(v1 + 104);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16))( v9,  v6 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)),  v10);
  uint64_t v15 = OUTLINED_FUNCTION_20();
  TemplatingSection.content.getter(v15);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
  uint64_t v17 = TemplatingText.text.getter(v16);
  uint64_t v19 = v18;
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  uint64_t v20 = OUTLINED_FUNCTION_35_24(objc_allocWithZone(&OBJC_CLASS___SAAppsLaunchApp));
  outlined bridged method (mbgnn) of @objc SAAppsLaunchApp.launchId.setter();
  uint64_t v21 = v14[5];
  uint64_t v22 = v14[6];
  __swift_project_boxed_opaque_existential_1(v14 + 2, v21);
  uint64_t v23 = dispatch thunk of DeviceState.isPhone.getter(v21, v22);
  uint64_t v24 = *(void **)(v1 + 104);
  uint64_t v68 = v20;
  if ((v23 & 1) == 0)
  {
    uint64_t v30 = v24[5];
    uint64_t v31 = v24[6];
    __swift_project_boxed_opaque_existential_1(v24 + 2, v30);
    if ((dispatch thunk of DeviceState.isWatch.getter(v30, v31) & 1) == 0)
    {
      OUTLINED_FUNCTION_2_6();
      goto LABEL_8;
    }

    uint64_t v2 = OUTLINED_FUNCTION_35_24(objc_allocWithZone(&OBJC_CLASS___SASTCommandTemplateAction));
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    BOOL v33 = OUTLINED_FUNCTION_23_4(v32);
    *(_OWORD *)(v33 + 16) = xmmword_17E150;
    *(void *)(v33 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v20;
    OUTLINED_FUNCTION_56_20(v33, v34, v35);
    uint64_t v36 = v20;
    outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter( v69,  v2,  (SEL *)&selRef_setCommands_);
    uint64_t v5 = OUTLINED_FUNCTION_35_24(objc_allocWithZone(&OBJC_CLASS___SAUIDecoratedText));
    outlined bridged method (mbnn) of @objc SAUIDecoratedText.text.setter(v17, v19, v5);
    uint64_t v37 = OUTLINED_FUNCTION_35_24(objc_allocWithZone(&OBJC_CLASS___SASTButtonItem));
    [v37 setDecoratedLabel:v5];
    [v37 setCentered:1];
    [v37 setAction:v2];
    unint64_t v38 = OUTLINED_FUNCTION_35_24(objc_allocWithZone(&OBJC_CLASS___SASTItemGroup));
    uint64_t v39 = OUTLINED_FUNCTION_23_4(v32);
    *(_OWORD *)(v39 + 16) = xmmword_17E150;
    *(void *)(v39 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v37;
    OUTLINED_FUNCTION_56_20(v39, v40, v41);
    uint64_t v0 = v37;
    outlined bridged method (mbnn) of @objc SASTItemGroup.templateItems.setter(v69, v38);
    uint64_t v3 = v38;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v4 = *(void *)((char *)&dword_10 + (*v66 & 0xFFFFFFFFFFFFFF8LL));
    uint64_t v7 = *(void *)((char *)&dword_18 + (*v66 & 0xFFFFFFFFFFFFFF8LL));
    if (v4 < v7 >> 1) {
      goto LABEL_6;
    }
    goto LABEL_10;
  }

  __n128 v25 = v24 + 2;
  swift_bridgeObjectRelease(*v66);
  type metadata accessor for SiriKitAceViewBuilder(0LL);
  dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)(v25);
  uint64_t v26 = v20;
  uint64_t v27 = dispatch thunk of SiriKitAceViewBuilder.addButton(label:command:)(v17, v19, v26);
  OUTLINED_FUNCTION_2_6();

  __n128 v28 = OUTLINED_FUNCTION_12_5();
  uint64_t v29 = dispatch thunk of SiriKitAceViewBuilder.build()(v28);
  swift_release(v27);
  *unint64_t v66 = v29;
LABEL_8:
  char v45 = *(void *)(v1 + 216);
  uint64_t v46 = *(void *)(v1 + 208);
  uint64_t v60 = *(void *)(v1 + 224);
  uint64_t v61 = *(void *)(v1 + 200);
  uint64_t v47 = *(void *)(v1 + 192);
  uint64_t v62 = *(void *)(v1 + 184);
  uint64_t v63 = *(void *)(v1 + 176);
  unint64_t v64 = *(void *)(v1 + 168);
  uint64_t v65 = *(void *)(v1 + 160);
  uint64_t v67 = *(void *)(v1 + 136);
  uint64_t v48 = *(void **)(v1 + 104);
  uint64_t v49 = *(void *)(v1 + 112);
  char v50 = *(void **)(v1 + 80);
  uint64_t v51 = v48 + 2;
  uint64_t v53 = v48[5];
  uint64_t v52 = v48[6];
  __swift_project_boxed_opaque_existential_1(v48 + 2, v53);
  uint64_t v54 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v53, v52);
  uint64_t v55 = *(void *)(v1 + 72);
  char v56 = type metadata accessor for NLContextUpdate(0LL);
  __swift_storeEnumTagSinglePayload(v49, 1LL, 1LL, v56);
  uint64_t v57 = type metadata accessor for AceOutput(0LL);
  *(_OWORD *)(v1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
  *(void *)(v1 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0LL;
  *(_OWORD *)(v1 + 16) = 0u;
  v50[3] = v57;
  v50[4] = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v50);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v45,  v51,  v54 & 1,  v55,  0LL,  1LL,  v49,  _swiftEmptyArrayStorage,  v1 + 16);
  OUTLINED_FUNCTION_2_6();
  swift_release(v60);

  outlined destroy of URL?(v1 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v49, &demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v58 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
  v58(v46, v47);
  v58(v45, v47);
  OUTLINED_FUNCTION_20_0();
  swift_task_dealloc(v46);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v67);
  OUTLINED_FUNCTION_15_0();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  swift_release(*(void *)(v0 + 224));
  OUTLINED_FUNCTION_30_18();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return OUTLINED_FUNCTION_2_0(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v6 = *(void *)(v0 + 200);
  swift_release(*(void *)(v0 + 224));
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  OUTLINED_FUNCTION_30_18();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return OUTLINED_FUNCTION_2_0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t WorkflowSnippetProvider.buildSnippetForPreflightError(appBundleId:)(uint64_t a1)
{
  uint64_t v2 = v1[33];
  uint64_t v3 = v1[30];
  uint64_t v4 = v1[29];
  uint64_t v5 = v1[23];
  uint64_t v6 = v1[21];
  uint64_t v7 = (void *)v1[13];
  v1[9] = _swiftEmptyArrayStorage;
  static CATOption.defaultMode.getter(a1);
  uint64_t v8 = (void *)CATWrapper.__allocating_init(options:globals:)(v5, 0LL);
  v1[36] = v8;
  uint64_t v9 = v7 + 2;
  uint64_t v10 = v7[5];
  uint64_t v11 = v7[6];
  __swift_project_boxed_opaque_existential_1(v9, v10);
  uint64_t v12 = DeviceState.asSiriKitDeviceState()(v10, v11);
  v1[37] = v12;
  OUTLINED_FUNCTION_24_15(v4, v3);
  __swift_storeEnumTagSinglePayload(v6, 0LL, 1LL, v2);
  uint64_t v13 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunVoiceCommandCATs + *v8 + 64));
  v1[38] = v13;
  *uint64_t v13 = v1;
  v13[1] = WorkflowSnippetProvider.buildSnippetForPreflightError(appBundleId:);
  return v15(v1[26], v12, v1[21]);
}

id WorkflowSnippetProvider.makeConfirmationOptions(confirmationButtonText:cancelButtonText:appBundleId:)()
{
  id v0 = [objc_allocWithZone(SAUIConfirmationOptions) init];
  static Device.current.getter(v18, v0);
  id v3 = OUTLINED_FUNCTION_48_14(0, v1, v2, v18);
  uint64_t v4 = __swift_destroy_boxed_opaque_existential_1Tm(v18);
  static Device.current.getter(v18, v4);
  id v7 = OUTLINED_FUNCTION_48_14(2, v5, v6, v18);
  __swift_destroy_boxed_opaque_existential_1Tm(v18);
  outlined bridged method (mbgnn) of @objc SAUIConfirmationOptions.confirmText.setter();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = OUTLINED_FUNCTION_23_4(v8);
  *(_OWORD *)(v9 + 16) = xmmword_17E150;
  *(void *)(v9 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v3;
  OUTLINED_FUNCTION_55_16(v9, v10, v11);
  uint64_t v12 = v18[0];
  id v13 = v3;
  outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter( v12,  v0,  (SEL *)&selRef_setConfirmCommands_);
  outlined bridged method (mbgnn) of @objc SAUIConfirmationOptions.denyText.setter();
  uint64_t v14 = OUTLINED_FUNCTION_23_4(v8);
  *(_OWORD *)(v14 + 16) = xmmword_17E150;
  *(void *)(v14 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v7;
  OUTLINED_FUNCTION_55_16(v14, v15, v16);
  outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter( v18[0],  v0,  (SEL *)&selRef_setDenyCommands_);

  return v0;
}

Swift::Bool __swiftcall WorkflowSnippetProvider.shouldShowSnippet(intent:)(INIntent intent)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v22 - v5;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v11 = __swift_project_value_buffer(v7, (uint64_t)static Logger.voiceCommands);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v12(v10, v11, v7);
  v12(v6, (uint64_t)v10, v7);
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0LL, 1LL, v7);
  outlined init with copy of Logger?((uint64_t)v6, (uint64_t)v4);
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v4, 1LL, v7);
  if ((_DWORD)EnumTagSinglePayload == 1)
  {
    outlined destroy of URL?((uint64_t)v4, &demangling cache variable for type metadata for Logger?);
  }

  else
  {
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(EnumTagSinglePayload);
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = OUTLINED_FUNCTION_38(32LL);
      uint64_t v17 = OUTLINED_FUNCTION_38(64LL);
      uint64_t v23 = v17;
      *(_DWORD *)uint64_t v16 = 136315650;
      uint64_t v18 = OUTLINED_FUNCTION_25_24((uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriLinkFlow/SiriLinkFlowPlugin/Short"
                                             "cutRunner/snippets/WorkflowSnippetProvider.swift");
      unint64_t v20 = v19;
      uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v23);
      OUTLINED_FUNCTION_46_20();
      swift_bridgeObjectRelease(v20);
      *(_WORD *)(v16 + 1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 2048;
      uint64_t v22 = 155LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v16 + 14);
      *(_WORD *)(v16 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 2080;
      uint64_t v22 = OUTLINED_FUNCTION_44_10(69LL, 0x8000000000195B70LL, &v23);
      OUTLINED_FUNCTION_46_20();
      _os_log_impl(&dword_0, v14, v15, "FatalError at %s:%lu - %s", (uint8_t *)v16, 0x20u);
      swift_arrayDestroy(v17, 2LL, (char *)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v17);
      OUTLINED_FUNCTION_1_0(v16);
    }

    OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  }

  static SiriKitLifecycle._logCrashToEventBus(_:)(0xD000000000000045LL, 0x8000000000195B70LL);
  Swift::Bool result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000045LL,  0x8000000000195B70LL,  "/Library/Caches/com.apple.xbs/Sources/SiriLinkFlow/SiriLinkFlowPlugin/ShortcutRunner/snippets/WorkflowSnipp etProvider.swift",  123LL,  2LL);
  __break(1u);
  return result;
}

uint64_t WorkflowSnippetProvider.buildConfirmationButtons(buttonLabels:appBundleId:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  void v4[5] = v3;
  void v4[2] = a1;
  void v4[3] = a2;
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v5, v6, v7);
}

uint64_t WorkflowSnippetProvider.buildConfirmationButtons(buttonLabels:appBundleId:)()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1[2] == 2LL)
  {
    uint64_t v2 = *(void *)(v0 + 32);
    uint64_t v3 = *(void *)(v0 + 24);
    uint64_t v5 = v1[4];
    uint64_t v4 = v1[5];
    uint64_t v6 = v1[6];
    uint64_t v7 = v1[7];
    swift_bridgeObjectRetain(v4);
    __n128 v9 = swift_bridgeObjectRetain(v7);
    v8(v5, v4, v6, v7, v3, v2, v9);
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v7);
  }

  uint64_t v10 = OUTLINED_FUNCTION_52_7();
  return v11(v10);
}

uint64_t WorkflowSnippetProvider.buildSnippetForShowAlert(dialogRequest:shortcutName:appBundleId:)()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  v1[6] = v2;
  v1[7] = v0;
  v1[4] = v10;
  v1[5] = v4;
  uint64_t v12 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(*(void *)v0 + 120LL));
  v1[8] = v12;
  *uint64_t v12 = v1;
  v12[1] = WorkflowSnippetProvider.buildSnippetForShowAlert(dialogRequest:shortcutName:appBundleId:);
  return v14(v11, v5, v3, v9, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t (*v18)(uint64_t, void, void);
  OUTLINED_FUNCTION_33_3();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v2 = OUTLINED_FUNCTION_19(v1, 64LL);
  v0[9] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_17E660;
  uint64_t v3 = OUTLINED_FUNCTION_26(v2, "okButton");
  uint64_t v4 = [v3 title];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  *(void *)(v2 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v5;
  *(void *)(v2 + 40) = v7;
  uint64_t v9 = OUTLINED_FUNCTION_26(v8, "cancelButton");
  uint64_t v10 = v9;
  if (v9)
  {
    uint64_t v11 = OUTLINED_FUNCTION_26((uint64_t)v9, "title");

    uint64_t v10 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v13 = v12;
  }

  else
  {
    id v13 = 0xE000000000000000LL;
  }

  uint64_t v14 = v0[3];
  os_log_type_t v15 = v0[7];
  *(void *)(v2 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v10;
  *(void *)(v2 + 56) = v13;
  v0[10] = v14;
  uint64_t v16 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(*(void *)v15 + 168LL));
  v0[11] = v16;
  void *v16 = v0;
  v16[1] = WorkflowSnippetProvider.buildSnippetForShowAlert(dialogRequest:shortcutName:appBundleId:);
  return v18(v2, v0[5], v0[6]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_42_1();
  *(void *)(v1 + 96) = v0;
  OUTLINED_FUNCTION_54_0(v2);
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v1 = *(void **)(v0 + 96);
  uint64_t v2 = *(void **)(v0 + 80);
  [v2 setConfirmationOptions:v1];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v4 = OUTLINED_FUNCTION_23_4(v3);
  *(_OWORD *)(v4 + 16) = xmmword_17E150;
  *(void *)(v4 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v2;
  OUTLINED_FUNCTION_52_14(v4, v5, v6);

  uint64_t v7 = OUTLINED_FUNCTION_52_7();
  return v8(v7);
}

uint64_t WorkflowSnippetProvider.buildSnippetForShowAlert(dialogRequest:shortcutName:appBundleId:)( uint64_t a1)
{
  uint64_t v3 = (void *)*v1;
  v3[2] = v1;
  v3[3] = a1;
  OUTLINED_FUNCTION_3_0(v3[8]);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowSnippetProvider.buildSnippetForConfirmInteraction(dialogRequest:shortcutName:appBundleId:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v6[9] = a5;
  v6[10] = v5;
  void v6[7] = a3;
  v6[8] = a4;
  v6[5] = a1;
  v6[6] = a2;
  uint64_t v7 = type metadata accessor for CATOption(0LL);
  v6[11] = OUTLINED_FUNCTION_9_0(*(void *)(v7 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowSnippetProvider.buildSnippetForConfirmInteraction(dialogRequest:shortcutName:appBundleId:)()
{
  uint64_t v1 = v0[10];
  id v2 = OUTLINED_FUNCTION_49_15();
  id v3 = [v2 intent];
  v0[12] = v3;

  id v4 = OUTLINED_FUNCTION_49_15();
  id v5 = [v4 intentResponse];
  v0[13] = v5;

  uint64_t v6 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(*(void *)v1 + 136LL));
  v0[14] = v6;
  *uint64_t v6 = v0;
  v6[1] = WorkflowSnippetProvider.buildSnippetForConfirmInteraction(dialogRequest:shortcutName:appBundleId:);
  return v8(v3, v5, v0[6], v0[7]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_42_1();
  *(void *)(v1 + 120) = v0;
  OUTLINED_FUNCTION_54_0(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v15;
  if (*(void *)(v0 + 120))
  {
    uint64_t v1 = *(void *)(v0 + 88);
    id v2 = *(void **)(v0 + 96);
    id v3 = *(void *)(v0 + 80);
    id v4 = type metadata accessor for RunVoiceCommandCATs(0LL);
    static CATOption.defaultMode.getter(v4);
    id v5 = CATWrapper.__allocating_init(options:globals:)(v1, 0LL);
    uint64_t v6 = type metadata accessor for CATButtonLabelTemplating();
    uint64_t inited = swift_initStackObject(v6, v0 + 16);
    *(void *)(v0 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = inited;
    *(void *)(inited + 16) = v5;
    uint64_t v8 = v3 + 16;
    uint64_t v9 = [v2 verb];
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    *(void *)(v0 + 136) = v12;
    id v13 = (void *)swift_task_alloc(dword_21A25C);
    *(void *)(v0 + 14__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v13;
    *id v13 = v0;
    v13[1] = WorkflowSnippetProvider.buildSnippetForConfirmInteraction(dialogRequest:shortcutName:appBundleId:);
    return CATButtonLabelTemplating.getYesAndCancelButtonTemplates(deviceState:intentVerb:)(v8, v10, v12);
  }

  else
  {
    os_log_type_t v15 = *(void **)(v0 + 96);

    swift_task_dealloc(*(void *)(v0 + 88));
    return (*(uint64_t (**)(void *))(v0 + 8))(_swiftEmptyArrayStorage);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_42_1();
  *(void *)(v1 + 16__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v0;
  OUTLINED_FUNCTION_54_0(v2);
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  OUTLINED_FUNCTION_33_3();
  uint64_t v1 = (void *)v0[21];
  id v3 = (void *)v0[15];
  id v2 = v0[16];
  id v4 = (void *)v0[12];
  id v5 = (void *)v0[13];
  [v3 setConfirmationOptions:v1];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = OUTLINED_FUNCTION_23_4(v6);
  *(_OWORD *)(v7 + 16) = xmmword_17E150;
  *(void *)(v7 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v3;
  OUTLINED_FUNCTION_52_14(v7, v8, v9);
  uint64_t v10 = v3;

  swift_setDeallocating(v2);
  swift_release();

  swift_task_dealloc(v0[11]);
  uint64_t v11 = OUTLINED_FUNCTION_52_7();
  return v12(v11);
}

uint64_t WorkflowSnippetProvider.buildSnippetForConfirmInteraction(dialogRequest:shortcutName:appBundleId:)( uint64_t a1)
{
  uint64_t v4 = *(void *)(*(void *)v1 + 136LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 144LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 80LL);
  uint64_t v9 = *(void **)v1;
  v9[19] = a1;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  uint64_t v6 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(*(void *)v5 + 168LL));
  v9[20] = v6;
  *uint64_t v6 = v9;
  v6[1] = WorkflowSnippetProvider.buildSnippetForConfirmInteraction(dialogRequest:shortcutName:appBundleId:);
  return v8(a1, v9[8], v9[9]);
}

uint64_t WorkflowSnippetProvider.makeDisambiguationViews(disambiguationItems:shortcutName:appBundleId:utteranceViews:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  v0[5] = OUTLINED_FUNCTION_4_0(*(void *)(v1 - 8));
  uint64_t v2 = OUTLINED_FUNCTION_11_0();
  uint64_t v3 = OUTLINED_FUNCTION_34_17(v2);
  v0[7] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v0[8] = v4;
  v0[9] = OUTLINED_FUNCTION_9_0(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

#error "B3194: call analysis failed (funcsize=81)"
void outlined bridged method (mbgnn) of @objc SAAppsLaunchApp.launchId.setter()
{
  NSString v0;
  uint64_t v0 = OUTLINED_FUNCTION_50_15();
  OUTLINED_FUNCTION_26((uint64_t)v0, "setLaunchId:");
  OUTLINED_FUNCTION_5_15(v0);
}

void outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(uint64_t a1, void *a2)
{
}

void outlined bridged method (mbnn) of @objc SAUIDecoratedText.text.setter(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_20();
  [a3 setText:v4];
  OUTLINED_FUNCTION_5_15(v4);
}

void outlined bridged method (mbgnn) of @objc SAUIConfirmationOptions.confirmText.setter()
{
  NSString v0 = OUTLINED_FUNCTION_50_15();
  OUTLINED_FUNCTION_26((uint64_t)v0, "setConfirmText:");
  OUTLINED_FUNCTION_5_15(v0);
}

void outlined bridged method (mbnn) of @objc SAUIConfirmationOptions.confirmCommands.setter( uint64_t a1, void *a2)
{
}

void outlined bridged method (mbgnn) of @objc SAUIConfirmationOptions.denyText.setter()
{
  NSString v0 = OUTLINED_FUNCTION_50_15();
  OUTLINED_FUNCTION_26((uint64_t)v0, "setDenyText:");
  OUTLINED_FUNCTION_5_15(v0);
}

void outlined bridged method (mbnn) of @objc SAUIConfirmationOptions.denyCommands.setter( uint64_t a1, void *a2)
{
}

void outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter( uint64_t a1, void *a2, SEL *a3)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  objc_msgSend(a2, *a3, isa);
}

uint64_t type metadata accessor for WorkflowSnippetProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin23WorkflowSnippetProvider);
}

uint64_t OUTLINED_FUNCTION_5_26()
{
  return outlined init with copy of Logger?(v2, v0);
}

uint64_t OUTLINED_FUNCTION_8_28()
{
  return swift_slowAlloc(32LL, -1LL);
}

uint64_t OUTLINED_FUNCTION_9_24(uint64_t a1)
{
  *uint64_t v3 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3, v1, v2);
}

uint64_t OUTLINED_FUNCTION_10_21(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_project_value_buffer(v3, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
}

uint64_t OUTLINED_FUNCTION_12_22(uint64_t a1)
{
  *uint64_t v2 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2, v1, v3);
}

uint64_t OUTLINED_FUNCTION_13_21()
{
  uint64_t v1 = v0[3];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return v1;
}

void OUTLINED_FUNCTION_14_29()
{
  *(_WORD *)(v0 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 2080;
}

uint64_t OUTLINED_FUNCTION_16_28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return _assertionFailure(_:_:file:line:flags:)( a1,  a2,  a3,  a4 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL,  v6,  a6,  123LL,  2LL);
}

uint64_t OUTLINED_FUNCTION_17_27@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return swift_arrayDestroy(a5, 2LL, a1 + 8);
}

void OUTLINED_FUNCTION_18_23(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_24_20()
{
  return *(void *)v0;
}

uint64_t OUTLINED_FUNCTION_25_24(uint64_t a1)
{
  return StaticString.description.getter(a1, 123LL, 2LL);
}

uint64_t OUTLINED_FUNCTION_26_21()
{
  return (*(uint64_t (**)(void, void))(v0[8] + 8LL))(v0[5], v0[7]);
}

uint64_t OUTLINED_FUNCTION_29_18()
{
  return v3(v2, v0, v1);
}

uint64_t OUTLINED_FUNCTION_30_18()
{
  return swift_task_dealloc(*(void *)(v0 + 216));
}

  ;
}

void OUTLINED_FUNCTION_33_15()
{
  *(_WORD *)(v0 + 1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 2048;
}

uint64_t OUTLINED_FUNCTION_34_17(uint64_t a1)
{
  *(void *)(v1 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a1;
  return type metadata accessor for Logger(0LL);
}

id OUTLINED_FUNCTION_35_24(void *a1)
{
  return [a1 *(SEL *)(v1 + 3592)];
}

uint64_t OUTLINED_FUNCTION_36_19(uint64_t a1, ...)
{
  return outlined init with copy of DeviceState(v1, (uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_37_19(uint64_t a1)
{
  return static SiriKitLifecycle._logCrashToEventBus(_:)(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, v1);
}

uint64_t OUTLINED_FUNCTION_39_23(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_44_10(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL,  a2,  a3);
}

uint64_t OUTLINED_FUNCTION_46_20()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 96, v1, v0);
}

id OUTLINED_FUNCTION_48_14(char a1, uint64_t a2, uint64_t a3, void *a4)
{
  return static SLFConfirmationItemConverter.toDirectInvocationCommand(confirmation:appBundleId:deviceState:)( a1,  v5,  v4,  a4);
}

id OUTLINED_FUNCTION_49_15()
{
  return [v0 *(SEL *)(v1 + 1760)];
}

NSString OUTLINED_FUNCTION_50_15()
{
  return String._bridgeToObjectiveC()();
}

uint64_t OUTLINED_FUNCTION_52_14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Array._endMutation()(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_54_18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_55_16(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Array._endMutation()(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_56_20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Array._endMutation()(a1, a2, a3);
}

uint64_t protocol witness for DateTimeResolving.makeRecommendation(value:context:spec:) in conformance DateTimeResolver()
{
  return DateTimeResolver.makeRecommendation(value:context:spec:)();
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::Properties_optional __swiftcall RunVoiceCommandCATsSimple.Properties.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunVoiceCommandCATsSimple.Properties.init(rawValue:);
  OUTLINED_FUNCTION_88_6(v1, v2);
  OUTLINED_FUNCTION_58_2();
  OUTLINED_FUNCTION_1();
  return result;
}

uint64_t RunVoiceCommandCATsSimple.Properties.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_B3660 + 4 * byte_183AB0[a1]))( 0xD000000000000020LL,  0x8000000000190BA0LL);
}

void sub_B3660()
{
}

void protocol witness for static Equatable.== infix(_:_:) in conformance RunVoiceCommandCATsSimple.Properties( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance RunVoiceCommandCATsSimple.Properties()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunVoiceCommandCATsSimple.Properties( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RunVoiceCommandCATsSimple.Properties( uint64_t a1)
{
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.Properties@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::Properties_optional *a2@<X8>)
{
  result.value = RunVoiceCommandCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.Properties()
{
  unsigned __int8 v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = RunVoiceCommandCATsSimple.Properties.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t RunVoiceCommandCATsSimple.confirmSlotValue(device:slotName:slotValue:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_20_10(v4);
  *(void *)(v3 + 56) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATsSimple.confirmSlotValue(device:slotName:slotValue:)()
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_19(v4, 176LL);
  os_log_type_t v6 = (__n128 *)OUTLINED_FUNCTION_79_4(v5);
  uint64_t v7 = OUTLINED_FUNCTION_4_3(v6, (__n128)xmmword_17FDF0);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    v2[7] = 0LL;
    _BYTE v2[8] = 0LL;
  }

  v2[6] = v3;
  OUTLINED_FUNCTION_27_8(v7);
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v8);
  uint64_t v9 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_23_23(v9);
  if (v10)
  {
    uint64_t v11 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v0;
    uint64_t v12 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v12);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v13 = OUTLINED_FUNCTION_58_13();
  OUTLINED_FUNCTION_12_4(v13, v14, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v15 = OUTLINED_FUNCTION_32_16();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v15, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v0;
    uint64_t v16 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v16);
  }

  uint64_t v17 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v17;
  *uint64_t v17 = v1;
  v17[1] = RunVoiceCommandCATsSimple.confirmSlotValue(device:slotName:slotValue:);
  OUTLINED_FUNCTION_26_8();
  unint64_t v18 = OUTLINED_FUNCTION_73_8(32LL);
  return OUTLINED_FUNCTION_9_25(v18, v19, v20, v21);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_18_24();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_49_16();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_15_0();
    uint64_t v2 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  OUTLINED_FUNCTION_40_0();
  swift_task_dealloc(v1);
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::ConfirmSlotValueDialogIds_optional __swiftcall RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds.init(rawValue:);
  RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds.init(rawValue:)( rawValue._countAndFlagsBits,  (uint64_t)rawValue._object,  v1);
  return result;
}

uint64_t RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 27503LL;
  }
  else {
    return 0x6D7269666E6F63LL;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds( char *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::ConfirmSlotValueDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::ConfirmSlotValueDialogIds_optional *a2@<X8>)
{
  result.value = RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds()
{
  char v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t RunVoiceCommandCATsSimple.confirmSlotValueAsLabels(device:slotName:slotValue:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_20_10(v4);
  *(void *)(v3 + 56) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATsSimple.confirmSlotValueAsLabels(device:slotName:slotValue:)()
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_19(v4, 176LL);
  os_log_type_t v6 = (__n128 *)OUTLINED_FUNCTION_79_4(v5);
  uint64_t v7 = OUTLINED_FUNCTION_4_3(v6, (__n128)xmmword_17FDF0);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    v2[7] = 0LL;
    _BYTE v2[8] = 0LL;
  }

  v2[6] = v3;
  OUTLINED_FUNCTION_27_8(v7);
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v8);
  uint64_t v9 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_23_23(v9);
  if (v10)
  {
    uint64_t v11 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v0;
    uint64_t v12 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v12);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v13 = OUTLINED_FUNCTION_58_13();
  OUTLINED_FUNCTION_12_4(v13, v14, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v15 = OUTLINED_FUNCTION_32_16();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v15, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v0;
    uint64_t v16 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v16);
  }

  uint64_t v17 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  *(void *)(v1 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v17;
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds();
  *uint64_t v17 = v1;
  v17[1] = RunVoiceCommandCATsSimple.confirmSlotValueAsLabels(device:slotName:slotValue:);
  OUTLINED_FUNCTION_45_1();
  unint64_t v18 = OUTLINED_FUNCTION_72_6(32LL);
  return OUTLINED_FUNCTION_23_17(v18, v19, v20, v21, v22, v23);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_18_24();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_49_16();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_15_0();
    uint64_t v2 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds,  &type metadata for RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds,  &type metadata for RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds);
  }

  return result;
}

uint64_t RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_42_13(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    v1[7] = 0LL;
    v1[8] = 0LL;
  }

  v1[6] = v2;
  OUTLINED_FUNCTION_27_8(v6);
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v7);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v8);
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 56) = v12;
  OUTLINED_FUNCTION_74_2(v12, (uint64_t)RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v13 = OUTLINED_FUNCTION_73_8(37LL);
  return OUTLINED_FUNCTION_9_25(v13, v14, v15, v16);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_39_7();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_40_0();
    uint64_t v2 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

void RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds.init(rawValue:)(uint64_t a1, uint64_t a2)
{
  v2._rawValue = &outlined read-only object #0 of RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds.init(rawValue:);
  RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds.init(rawValue:)(a1, a2, v2);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds( uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t RunVoiceCommandCATsSimple.disambiguateSlotValueAsLabels(device:slotName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATsSimple.disambiguateSlotValueAsLabels(device:slotName:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_42_13(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    v1[7] = 0LL;
    v1[8] = 0LL;
  }

  v1[6] = v2;
  OUTLINED_FUNCTION_27_8(v6);
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v7);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v8);
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_68_9(v12);
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds();
  OUTLINED_FUNCTION_75_2((uint64_t)RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:));
  OUTLINED_FUNCTION_45_1();
  unint64_t v13 = OUTLINED_FUNCTION_72_6(37LL);
  return OUTLINED_FUNCTION_23_17(v13, v14, v15, v16, v17, v18);
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds,  &type metadata for RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds,  &type metadata for RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds);
  }

  return result;
}

uint64_t RunVoiceCommandCATsSimple.errorWithCodeCustomError(device:customDialog:localizedAppName:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_20_10(v4);
  *(void *)(v3 + 56) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATsSimple.errorWithCodeCustomError(device:customDialog:localizedAppName:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t v14 = *(void *)(v11 + 16);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v16 = OUTLINED_FUNCTION_19(v15, 176LL);
  uint64_t v17 = (__n128 *)OUTLINED_FUNCTION_79_4(v16);
  uint64_t v18 = OUTLINED_FUNCTION_4_3(v17, (__n128)xmmword_17FDF0);
  if (v14)
  {
    uint64_t v18 = type metadata accessor for SirikitDeviceState(v18);
  }

  else
  {
    v13[7] = 0LL;
    v13[8] = 0LL;
  }

  OUTLINED_FUNCTION_46_21(v18);
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v19);
  uint64_t v20 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_23_23(v20);
  if (v21)
  {
    uint64_t v22 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v22, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    void v13[15] = v10;
    uint64_t v23 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v23);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v24 = OUTLINED_FUNCTION_98_2();
  v13[16] = v12;
  v13[17] = 0x8000000000193910LL;
  OUTLINED_FUNCTION_12_4(v24, v25, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v26 = OUTLINED_FUNCTION_32_16();
  if (v21)
  {
    OUTLINED_FUNCTION_11_4(v26, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v13[21] = v10;
    uint64_t v27 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v27);
  }

  __n128 v28 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v11 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v28;
  *__n128 v28 = v11;
  v28[1] = RunVoiceCommandCATsSimple.confirmSlotValueAsLabels(device:slotName:slotValue:);
  return OUTLINED_FUNCTION_9_25(v12 + 24, 0x8000000000190C00LL, (uint64_t)v13, a10);
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::ErrorWithCodeCustomErrorDialogIds_optional __swiftcall RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds.init(rawValue:);
  RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds.init(rawValue:)( rawValue._countAndFlagsBits,  (uint64_t)rawValue._object,  v1);
  return result;
}

uint64_t RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x6C70784568746977LL;
  }
  else {
    return 0x6E616C7078456F6ELL;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds( char *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::ErrorWithCodeCustomErrorDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::ErrorWithCodeCustomErrorDialogIds_optional *a2@<X8>)
{
  result.value = RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds()
{
  char v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t RunVoiceCommandCATsSimple.errorWithCodeCustomErrorAsLabels(device:customDialog:localizedAppName:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_20_10(v4);
  *(void *)(v3 + 56) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATsSimple.errorWithCodeCustomErrorAsLabels(device:customDialog:localizedAppName:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t v14 = *(void *)(v11 + 16);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v16 = OUTLINED_FUNCTION_19(v15, 176LL);
  uint64_t v17 = (__n128 *)OUTLINED_FUNCTION_79_4(v16);
  uint64_t v18 = OUTLINED_FUNCTION_4_3(v17, (__n128)xmmword_17FDF0);
  if (v14)
  {
    uint64_t v18 = type metadata accessor for SirikitDeviceState(v18);
  }

  else
  {
    v13[7] = 0LL;
    v13[8] = 0LL;
  }

  OUTLINED_FUNCTION_46_21(v18);
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v19);
  uint64_t v20 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_23_23(v20);
  if (v21)
  {
    uint64_t v22 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v22, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    void v13[15] = v10;
    uint64_t v23 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v23);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v24 = OUTLINED_FUNCTION_98_2();
  v13[16] = v12;
  v13[17] = 0x8000000000193910LL;
  OUTLINED_FUNCTION_12_4(v24, v25, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v26 = OUTLINED_FUNCTION_32_16();
  if (v21)
  {
    OUTLINED_FUNCTION_11_4(v26, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v13[21] = v10;
    uint64_t v27 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v27);
  }

  __n128 v28 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  *(void *)(v11 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v28;
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds();
  *__n128 v28 = v11;
  v28[1] = RunVoiceCommandCATsSimple.confirmSlotValueAsLabels(device:slotName:slotValue:);
  OUTLINED_FUNCTION_45_1();
  return OUTLINED_FUNCTION_23_17( v29,  v30,  (uint64_t)v13,  (uint64_t)&type metadata for RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds,  v31,  a10);
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds,  &type metadata for RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds,  &type metadata for RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds);
  }

  return result;
}

uint64_t RunVoiceCommandCATsSimple.errorWithCodePreflightRequired(localizedAppName:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATsSimple.errorWithCodePreflightRequired(localizedAppName:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_19(v13, 80LL);
  *(void *)(v11 + 40) = v14;
  *(_OWORD *)(v14 + 16) = xmmword_17E650;
  *(void *)(v14 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v12;
  *(void *)(v14 + 40) = 0x8000000000193910LL;
  OUTLINED_FUNCTION_12_4(v10, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = OUTLINED_FUNCTION_61_1();
  uint64_t v17 = OUTLINED_FUNCTION_6_12(v16);
  if (v18)
  {
    OUTLINED_FUNCTION_11_4(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v19 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v19);
  }

  uint64_t v20 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v11 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v20;
  OUTLINED_FUNCTION_68_2(v20, (uint64_t)RunVoiceCommandCATsSimple.errorWithCodePreflightRequired(localizedAppName:));
  return OUTLINED_FUNCTION_9_25(v12 + 30, 0x8000000000190C30LL, v14, a10);
}

uint64_t RunVoiceCommandCATsSimple.errorWithCodePreflightRequired(localizedAppName:)()
{
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v1 + 40));
    OUTLINED_FUNCTION_40_0();
    uint64_t v3 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_23_1(v3, v4);
  }

void RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds.init(rawValue:)( uint64_t a1, uint64_t a2)
{
  v2._rawValue = &outlined read-only object #0 of RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds.init(rawValue:);
  RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds.init(rawValue:)(a1, a2, v2);
}

uint64_t RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds.rawValue.getter()
{
  return 0x7250747065636361LL;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds( uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds( void *a1@<X8>)
{
}

uint64_t RunVoiceCommandCATsSimple.errorWithCodePreflightRequiredAsLabels(localizedAppName:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATsSimple.errorWithCodePreflightRequiredAsLabels(localizedAppName:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_19(v13, 80LL);
  *(void *)(v11 + 40) = v14;
  *(_OWORD *)(v14 + 16) = xmmword_17E650;
  *(void *)(v14 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v12;
  *(void *)(v14 + 40) = 0x8000000000193910LL;
  OUTLINED_FUNCTION_12_4(v10, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = OUTLINED_FUNCTION_61_1();
  uint64_t v17 = OUTLINED_FUNCTION_6_12(v16);
  if (v18)
  {
    OUTLINED_FUNCTION_11_4(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v19 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v19);
  }

  *(void *)(v11 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds();
  OUTLINED_FUNCTION_69_2((uint64_t)RunVoiceCommandCATsSimple.errorWithCodePreflightRequiredAsLabels(localizedAppName:));
  OUTLINED_FUNCTION_45_1();
  return OUTLINED_FUNCTION_23_17( v20,  v21,  v14,  (uint64_t)&type metadata for RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds,  v22,  a10);
}

uint64_t RunVoiceCommandCATsSimple.errorWithCodePreflightRequiredAsLabels(localizedAppName:)()
{
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v1 + 40));
    OUTLINED_FUNCTION_40_0();
    uint64_t v3 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_23_1(v3, v4);
  }

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds,  &type metadata for RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds,  &type metadata for RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds);
  }

  return result;
}

uint64_t RunVoiceCommandCATsSimple.errorWithCodeUnsupportedOnCarPlay(device:userAssignedDeviceName:)( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATsSimple.errorWithCodeUnsupportedOnCarPlay(device:userAssignedDeviceName:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_42_13(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  OUTLINED_FUNCTION_22_17(v6);
  OUTLINED_FUNCTION_40_6();
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v7);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v8);
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 56) = v12;
  OUTLINED_FUNCTION_74_2(v12, (uint64_t)RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:));
  uint64_t v13 = OUTLINED_FUNCTION_30_19(49LL);
  return OUTLINED_FUNCTION_9_25(v13, v14, v15, v16);
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::ErrorWithCodeUnsupportedOnCarPlayDialogIds_optional __swiftcall RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds.init(rawValue:);
  RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds.init(rawValue:)( rawValue._countAndFlagsBits,  (uint64_t)rawValue._object,  v1);
  return result;
}

uint64_t RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x656E6F68506E6FLL;
  }
  else {
    return 0x65446D6F74737563LL;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds( char *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::ErrorWithCodeUnsupportedOnCarPlayDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::ErrorWithCodeUnsupportedOnCarPlayDialogIds_optional *a2@<X8>)
{
  result.value = RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds()
{
  char v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t RunVoiceCommandCATsSimple.errorWithCodeUnsupportedOnCarPlayAsLabels(device:userAssignedDeviceName:)( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATsSimple.errorWithCodeUnsupportedOnCarPlayAsLabels(device:userAssignedDeviceName:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_42_13(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  OUTLINED_FUNCTION_22_17(v6);
  OUTLINED_FUNCTION_40_6();
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v7);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v8);
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_68_9(v12);
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds();
  OUTLINED_FUNCTION_75_2((uint64_t)RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:));
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_54_19();
  return OUTLINED_FUNCTION_23_17(v13, v14, v15, v16, v17, v18);
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds,  &type metadata for RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds,  &type metadata for RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds);
  }

  return result;
}

uint64_t RunVoiceCommandCATsSimple.followupNotSupported(device:localizedAppName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATsSimple.followupNotSupported(device:localizedAppName:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_42_13(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  OUTLINED_FUNCTION_22_17(v6);
  OUTLINED_FUNCTION_40_6();
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v7);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v8);
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 56) = v12;
  OUTLINED_FUNCTION_74_2(v12, (uint64_t)RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:));
  uint64_t v13 = OUTLINED_FUNCTION_30_19(36LL);
  return OUTLINED_FUNCTION_9_25(v13, v14, v15, v16);
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::FollowupNotSupportedDialogIds_optional __swiftcall RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds.init(rawValue:);
  OUTLINED_FUNCTION_88_6(v1, v2);
  OUTLINED_FUNCTION_58_2();
  OUTLINED_FUNCTION_1();
  return result;
}

uint64_t RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_B4C18 + 4 * byte_183ABF[a1]))( 0x7070416E69LL,  0xE500000000000000LL);
}

uint64_t sub_B4C18()
{
  return 0x7375437070416E69LL;
}

uint64_t sub_B4C38()
{
  return 0x7070416E65706FLL;
}

uint64_t sub_B4C50()
{
  return 0x437070416E65706FLL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds( char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds()
{
}

void protocol witness for Hashable.hash(into:) in conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds( uint64_t a1)
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::FollowupNotSupportedDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::FollowupNotSupportedDialogIds_optional *a2@<X8>)
{
  result.value = RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds()
{
  unsigned __int8 v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t RunVoiceCommandCATsSimple.followupNotSupportedAsLabels(device:localizedAppName:)( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATsSimple.followupNotSupportedAsLabels(device:localizedAppName:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_42_13(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  OUTLINED_FUNCTION_22_17(v6);
  OUTLINED_FUNCTION_40_6();
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v7);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v8);
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_68_9(v12);
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds and conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds();
  OUTLINED_FUNCTION_75_2((uint64_t)RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:));
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_54_19();
  return OUTLINED_FUNCTION_23_17(v13, v14, v15, v16, v17, v18);
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds and conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds and conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds and conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds,  &type metadata for RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds and conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds and conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds and conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds,  &type metadata for RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds and conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds);
  }

  return result;
}

uint64_t RunVoiceCommandCATsSimple.intentConfirmationPrompt(device:customResponsesEnabled:localizedAppName:customResponse:intentCategory:intentVerb:shouldShowAppAttribution:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v7[8] = OUTLINED_FUNCTION_20_10(v8);
  v7[9] = OUTLINED_FUNCTION_11_0();
  v7[10] = OUTLINED_FUNCTION_11_0();
  v7[11] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATsSimple.intentConfirmationPrompt(device:customResponsesEnabled:localizedAppName:customResponse:intentCategory:intentVerb:shouldShowAppAttribution:)()
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_19(v4, 368LL);
  *(void *)(v1 + 96) = v5;
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17FE00);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    v5[3].n128_u64[1] = 0LL;
    v5[4].n128_u64[0] = 0LL;
  }

  OUTLINED_FUNCTION_66_11(v6);
  v5[5].n128_u64[1] = 0x8000000000193950LL;
  v5[6].n128_u8[0] = v7;
  v5[7].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v5[8].n128_u64[0] = v2;
  v5[8].n128_u64[1] = 0x8000000000193910LL;
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v8);
  uint64_t v9 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_77_8(v9);
  if (v10)
  {
    uint64_t v11 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v5[10].n128_u64[1] = v0;
    uint64_t v12 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v12);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v13 = OUTLINED_FUNCTION_53_15();
  OUTLINED_FUNCTION_12_4(v13, v14, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v15 = OUTLINED_FUNCTION_17_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v15, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v5[13].n128_u64[1] = v0;
    uint64_t v16 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v16);
  }

  uint64_t v17 = OUTLINED_FUNCTION_51_18();
  OUTLINED_FUNCTION_12_4(v17, v18, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v19 = OUTLINED_FUNCTION_19_2();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v19, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v5[16].n128_u64[1] = v0;
    uint64_t v20 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v20);
  }

  uint64_t v21 = OUTLINED_FUNCTION_57_14();
  OUTLINED_FUNCTION_12_4(v21, v22, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v23 = OUTLINED_FUNCTION_16_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v23, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v5[19].n128_u64[1] = v0;
    uint64_t v24 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v24);
  }

  OUTLINED_FUNCTION_86_2(*(_BYTE *)(v1 + 121));
  uint64_t v25 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v25;
  *uint64_t v25 = v1;
  v25[1] = RunVoiceCommandCATsSimple.intentConfirmationPrompt(device:customResponsesEnabled:localizedAppName:customResponse:intentCategory:intentVerb:shouldShowAppAttribution:);
  uint64_t v26 = OUTLINED_FUNCTION_30_19(v2 + 24);
  return OUTLINED_FUNCTION_9_25(v26, v27, v28, v29);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t (*v7)(void);
  OUTLINED_FUNCTION_55_17();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_45_7(v2, v3, v4);
  }

  else
  {
    OUTLINED_FUNCTION_92_2();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    swift_task_dealloc(v1);
    uint64_t v6 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_0_3(v6, v7);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRelease(*(void *)(v0 + 96));
  OUTLINED_FUNCTION_40_0();
  swift_task_dealloc(v1);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::IntentConfirmationPromptDialogIds_optional __swiftcall RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds.init(rawValue:)( Swift::String rawValue)
{
  return result;
}

uint64_t RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_B5198 + 4 * byte_183AC3[a1]))( 1819042147LL,  0xE400000000000000LL);
}

uint64_t sub_B5198()
{
  return 0x6E496B63656863LL;
}

uint64_t sub_B51B0()
{
  return 0x657461657263LL;
}

uint64_t sub_B51C4()
{
  return 0x6441657461657263LL;
}

unint64_t sub_B5358()
{
  return 0xD000000000000011LL;
}

uint64_t sub_B5378()
{
  return 0x776F6C666B726F77LL;
}

uint64_t sub_B5390()
{
  return 0x736F506572616873LL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::IntentConfirmationPromptDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::IntentConfirmationPromptDialogIds_optional *a2@<X8>)
{
  result.value = RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds()
{
  unsigned __int8 v1 = OUTLINED_FUNCTION_52_3();
  *unint64_t v0 = RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t RunVoiceCommandCATsSimple.intentConfirmationPromptAsLabels(device:customResponsesEnabled:localizedAppName:customResponse:intentCategory:intentVerb:shouldShowAppAttribution:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v7[8] = OUTLINED_FUNCTION_20_10(v8);
  v7[9] = OUTLINED_FUNCTION_11_0();
  v7[10] = OUTLINED_FUNCTION_11_0();
  v7[11] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATsSimple.intentConfirmationPromptAsLabels(device:customResponsesEnabled:localizedAppName:customResponse:intentCategory:intentVerb:shouldShowAppAttribution:)()
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_19(v4, 368LL);
  *(void *)(v1 + 96) = v5;
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17FE00);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    v5[3].n128_u64[1] = 0LL;
    v5[4].n128_u64[0] = 0LL;
  }

  OUTLINED_FUNCTION_66_11(v6);
  v5[5].n128_u64[1] = 0x8000000000193950LL;
  v5[6].n128_u8[0] = v7;
  v5[7].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v5[8].n128_u64[0] = v2;
  v5[8].n128_u64[1] = 0x8000000000193910LL;
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v8);
  uint64_t v9 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_77_8(v9);
  if (v10)
  {
    uint64_t v11 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v5[10].n128_u64[1] = v0;
    uint64_t v12 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v12);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v13 = OUTLINED_FUNCTION_53_15();
  OUTLINED_FUNCTION_12_4(v13, v14, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v15 = OUTLINED_FUNCTION_17_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v15, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v5[13].n128_u64[1] = v0;
    uint64_t v16 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v16);
  }

  uint64_t v17 = OUTLINED_FUNCTION_51_18();
  OUTLINED_FUNCTION_12_4(v17, v18, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v19 = OUTLINED_FUNCTION_19_2();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v19, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v5[16].n128_u64[1] = v0;
    uint64_t v20 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v20);
  }

  uint64_t v21 = OUTLINED_FUNCTION_57_14();
  OUTLINED_FUNCTION_12_4(v21, v22, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v23 = OUTLINED_FUNCTION_16_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v23, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v5[19].n128_u64[1] = v0;
    uint64_t v24 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v24);
  }

  OUTLINED_FUNCTION_86_2(*(_BYTE *)(v1 + 121));
  uint64_t v25 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  *(void *)(v1 + 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v25;
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds and conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds();
  *uint64_t v25 = v1;
  v25[1] = RunVoiceCommandCATsSimple.intentConfirmationPromptAsLabels(device:customResponsesEnabled:localizedAppName:customResponse:intentCategory:intentVerb:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_54_19();
  return OUTLINED_FUNCTION_23_17(v26, v27, v28, v29, v30, v31);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t (*v7)(void);
  OUTLINED_FUNCTION_55_17();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_45_7(v2, v3, v4);
  }

  else
  {
    OUTLINED_FUNCTION_92_2();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    swift_task_dealloc(v1);
    uint64_t v6 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_0_3(v6, v7);
  }

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds and conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds and conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds and conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds,  &type metadata for RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds and conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds and conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds and conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds,  &type metadata for RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds and conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds);
  }

  return result;
}

uint64_t RunVoiceCommandCATsSimple.intentHandledResponseDone(device:localizedAppName:intentVerb:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_20_10(v4);
  *(void *)(v3 + 56) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATsSimple.intentHandledResponseDone(device:localizedAppName:intentVerb:)()
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = OUTLINED_FUNCTION_19(v5, 176LL);
  unsigned __int8 v7 = (__n128 *)OUTLINED_FUNCTION_79_4(v6);
  uint64_t v8 = OUTLINED_FUNCTION_4_3(v7, (__n128)xmmword_17FDF0);
  if (v4)
  {
    uint64_t v8 = type metadata accessor for SirikitDeviceState(v8);
  }

  else
  {
    v2[7] = 0LL;
    _BYTE v2[8] = 0LL;
  }

  OUTLINED_FUNCTION_69_7(v8);
  OUTLINED_FUNCTION_40_6();
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v9);
  uint64_t v10 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_23_23(v10);
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v0;
    uint64_t v13 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v13);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v14 = OUTLINED_FUNCTION_59_8();
  OUTLINED_FUNCTION_12_4(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = OUTLINED_FUNCTION_32_16();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v0;
    uint64_t v17 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v17);
  }

  uint64_t v18 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v18;
  *uint64_t v18 = v1;
  v18[1] = RunVoiceCommandCATsSimple.confirmSlotValueAsLabels(device:slotName:slotValue:);
  uint64_t v19 = OUTLINED_FUNCTION_30_19(v3 + 25);
  return OUTLINED_FUNCTION_9_25(v19, v20, v21, v22);
}

void RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds.init(rawValue:)(uint64_t a1, uint64_t a2)
{
  v2._rawValue = &outlined read-only object #0 of RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds.init(rawValue:);
  RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds.init(rawValue:)(a1, a2, v2);
}

uint64_t RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds.rawValue.getter()
{
  return 0x64656C646E6168LL;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds( uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds( void *a1@<X8>)
{
}

uint64_t RunVoiceCommandCATsSimple.intentHandledResponseDoneAsLabels(device:localizedAppName:intentVerb:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_20_10(v4);
  *(void *)(v3 + 56) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATsSimple.intentHandledResponseDoneAsLabels(device:localizedAppName:intentVerb:)()
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_19(v4, 176LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_79_4(v5);
  uint64_t v7 = OUTLINED_FUNCTION_4_3(v6, (__n128)xmmword_17FDF0);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    v2[7] = 0LL;
    _BYTE v2[8] = 0LL;
  }

  OUTLINED_FUNCTION_69_7(v7);
  OUTLINED_FUNCTION_40_6();
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v8);
  uint64_t v9 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_23_23(v9);
  if (v10)
  {
    uint64_t v11 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v0;
    uint64_t v12 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v12);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v13 = OUTLINED_FUNCTION_59_8();
  OUTLINED_FUNCTION_12_4(v13, v14, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v15 = OUTLINED_FUNCTION_32_16();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v15, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v0;
    uint64_t v16 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v16);
  }

  uint64_t v17 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  *(void *)(v1 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v17;
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds and conformance RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds();
  *uint64_t v17 = v1;
  v17[1] = RunVoiceCommandCATsSimple.confirmSlotValueAsLabels(device:slotName:slotValue:);
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_54_19();
  return OUTLINED_FUNCTION_23_17(v18, v19, v20, v21, v22, v23);
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds and conformance RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds and conformance RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds and conformance RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds,  &type metadata for RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds and conformance RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds and conformance RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds and conformance RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds,  &type metadata for RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds and conformance RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds);
  }

  return result;
}

uint64_t RunVoiceCommandCATsSimple.openApp(device:localizedAppName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATsSimple.openApp(device:localizedAppName:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_42_13(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  OUTLINED_FUNCTION_22_17(v6);
  OUTLINED_FUNCTION_40_6();
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v7);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v8);
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 56) = v12;
  OUTLINED_FUNCTION_74_2(v12, (uint64_t)RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:));
  uint64_t v13 = OUTLINED_FUNCTION_30_19(23LL);
  return OUTLINED_FUNCTION_9_25(v13, v14, v15, v16);
}

void RunVoiceCommandCATsSimple.OpenAppDialogIds.init(rawValue:)(uint64_t a1, uint64_t a2)
{
  v2._rawValue = &outlined read-only object #0 of RunVoiceCommandCATsSimple.OpenAppDialogIds.init(rawValue:);
  RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds.init(rawValue:)(a1, a2, v2);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.OpenAppDialogIds( uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.OpenAppDialogIds( void *a1@<X8>)
{
}

uint64_t RunVoiceCommandCATsSimple.openAppAsLabels(device:localizedAppName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATsSimple.openAppAsLabels(device:localizedAppName:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_42_13(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  OUTLINED_FUNCTION_22_17(v6);
  OUTLINED_FUNCTION_40_6();
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v7);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v8);
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_68_9(v12);
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.OpenAppDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppDialogIds();
  OUTLINED_FUNCTION_75_2((uint64_t)RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:));
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_54_19();
  return OUTLINED_FUNCTION_23_17(v13, v14, v15, v16, v17, v18);
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.OpenAppDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.OpenAppDialogIds,  &type metadata for RunVoiceCommandCATsSimple.OpenAppDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.OpenAppDialogIds,  &type metadata for RunVoiceCommandCATsSimple.OpenAppDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppDialogIds);
  }

  return result;
}

uint64_t RunVoiceCommandCATsSimple.openAppFailed(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunVoiceCommandCATsSimple.openAppFailed(device:));
}

uint64_t RunVoiceCommandCATsSimple.openAppFailed(device:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_83_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_59_1();
  *(void *)(v0 + 40) = v7;
  OUTLINED_FUNCTION_68_2(v7, (uint64_t)RunVoiceCommandCATsSimple.openAppFailed(device:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v8 = OUTLINED_FUNCTION_94_3(29LL);
  return OUTLINED_FUNCTION_44_11(v8, v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_0_15();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_71_9();
    uint64_t v2 = OUTLINED_FUNCTION_84_7();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

{
  uint64_t v0;
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

void RunVoiceCommandCATsSimple.OpenAppFailedDialogIds.init(rawValue:)(uint64_t a1, uint64_t a2)
{
  v2._rawValue = &outlined read-only object #0 of RunVoiceCommandCATsSimple.OpenAppFailedDialogIds.init(rawValue:);
  RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds.init(rawValue:)(a1, a2, v2);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.OpenAppFailedDialogIds( uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.OpenAppFailedDialogIds( void *a1@<X8>)
{
}

uint64_t RunVoiceCommandCATsSimple.openAppFailedAsLabels(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunVoiceCommandCATsSimple.openAppFailedAsLabels(device:));
}

uint64_t RunVoiceCommandCATsSimple.openAppFailedAsLabels(device:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_83_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_59_1();
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.OpenAppFailedDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedDialogIds();
  OUTLINED_FUNCTION_69_2((uint64_t)RunVoiceCommandCATsSimple.openAppFailedAsLabels(device:));
  OUTLINED_FUNCTION_45_1();
  unint64_t v7 = OUTLINED_FUNCTION_95_3(29LL);
  return OUTLINED_FUNCTION_45_16(v7, v8, v9, v10, v11, v12);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_0_15();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_71_9();
    uint64_t v2 = OUTLINED_FUNCTION_84_7();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.OpenAppFailedDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.OpenAppFailedDialogIds,  &type metadata for RunVoiceCommandCATsSimple.OpenAppFailedDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.OpenAppFailedDialogIds,  &type metadata for RunVoiceCommandCATsSimple.OpenAppFailedDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedDialogIds);
  }

  return result;
}

uint64_t RunVoiceCommandCATsSimple.openAppFailedCarPlay(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunVoiceCommandCATsSimple.openAppFailedCarPlay(device:));
}

uint64_t RunVoiceCommandCATsSimple.openAppFailedCarPlay(device:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_83_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  unint64_t v7 = (void *)OUTLINED_FUNCTION_59_1();
  *(void *)(v0 + 40) = v7;
  OUTLINED_FUNCTION_68_2(v7, (uint64_t)RunVoiceCommandCATsSimple.openAppFailedAsLabels(device:));
  unint64_t v8 = OUTLINED_FUNCTION_94_3(36LL);
  return OUTLINED_FUNCTION_44_11(v8, v9, v10, v11);
}

void RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds.init(rawValue:)(uint64_t a1, uint64_t a2)
{
  v2._rawValue = &outlined read-only object #0 of RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds.init(rawValue:);
  RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds.init(rawValue:)(a1, a2, v2);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds( uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t RunVoiceCommandCATsSimple.openAppFailedCarPlayAsLabels(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunVoiceCommandCATsSimple.openAppFailedCarPlayAsLabels(device:));
}

uint64_t RunVoiceCommandCATsSimple.openAppFailedCarPlayAsLabels(device:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_83_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_59_1();
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds();
  OUTLINED_FUNCTION_69_2((uint64_t)RunVoiceCommandCATsSimple.openAppFailedAsLabels(device:));
  OUTLINED_FUNCTION_45_1();
  unint64_t v7 = OUTLINED_FUNCTION_95_3(36LL);
  return OUTLINED_FUNCTION_45_16(v7, v8, v9, v10, v11, v12);
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds,  &type metadata for RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds,  &type metadata for RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds);
  }

  return result;
}

uint64_t RunVoiceCommandCATsSimple.openAppFailedWatch(device:userAssignedDeviceName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATsSimple.openAppFailedWatch(device:userAssignedDeviceName:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_42_13(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  OUTLINED_FUNCTION_22_17(v6);
  OUTLINED_FUNCTION_40_6();
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v7);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v8);
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 56) = v12;
  OUTLINED_FUNCTION_74_2(v12, (uint64_t)RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:));
  uint64_t v13 = OUTLINED_FUNCTION_30_19(34LL);
  return OUTLINED_FUNCTION_9_25(v13, v14, v15, v16);
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::OpenAppFailedWatchDialogIds_optional __swiftcall RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds.init(rawValue:);
  RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds.init(rawValue:)( rawValue._countAndFlagsBits,  (uint64_t)rawValue._object,  v1);
  return result;
}

void RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds.init(rawValue:)( uint64_t a1, uint64_t a2, Swift::OpaquePointer a3)
{
}

uint64_t RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x64656C696166LL;
  }
  else {
    return 0x65446D6F74737563LL;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds( char *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::OpenAppFailedWatchDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::OpenAppFailedWatchDialogIds_optional *a2@<X8>)
{
  result.value = RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds()
{
  char v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t RunVoiceCommandCATsSimple.openAppFailedWatchAsLabels(device:userAssignedDeviceName:)( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATsSimple.openAppFailedWatchAsLabels(device:userAssignedDeviceName:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_42_13(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  OUTLINED_FUNCTION_22_17(v6);
  OUTLINED_FUNCTION_40_6();
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v7);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v8);
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_68_9(v12);
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds();
  OUTLINED_FUNCTION_75_2((uint64_t)RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:));
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_54_19();
  return OUTLINED_FUNCTION_23_17(v13, v14, v15, v16, v17, v18);
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds,  &type metadata for RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds,  &type metadata for RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds);
  }

  return result;
}

uint64_t RunVoiceCommandCATsSimple.promptForSlotValue(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunVoiceCommandCATsSimple.promptForSlotValue(device:));
}

uint64_t RunVoiceCommandCATsSimple.promptForSlotValue(device:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_83_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_59_1();
  *(void *)(v0 + 40) = v7;
  OUTLINED_FUNCTION_68_2(v7, (uint64_t)RunVoiceCommandCATsSimple.openAppFailedAsLabels(device:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v8 = OUTLINED_FUNCTION_94_3(34LL);
  return OUTLINED_FUNCTION_44_11(v8, v9, v10, v11);
}

void RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds.init(rawValue:)(uint64_t a1, uint64_t a2)
{
  v2._rawValue = &outlined read-only object #0 of RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds.init(rawValue:);
  RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds.init(rawValue:)(a1, a2, v2);
}

uint64_t RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds.rawValue.getter()
{
  return 0x74706D6F7270LL;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds( uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds( void *a1@<X8>)
{
}

uint64_t RunVoiceCommandCATsSimple.promptForSlotValueAsLabels(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunVoiceCommandCATsSimple.promptForSlotValueAsLabels(device:));
}

uint64_t RunVoiceCommandCATsSimple.promptForSlotValueAsLabels(device:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_83_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_59_1();
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds();
  OUTLINED_FUNCTION_69_2((uint64_t)RunVoiceCommandCATsSimple.openAppFailedAsLabels(device:));
  OUTLINED_FUNCTION_45_1();
  unint64_t v7 = OUTLINED_FUNCTION_95_3(34LL);
  return OUTLINED_FUNCTION_45_16(v7, v8, v9, v10, v11, v12);
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds,  &type metadata for RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds,  &type metadata for RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds);
  }

  return result;
}

uint64_t RunVoiceCommandCATsSimple.unsupportedSlotValue(device:slotName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATsSimple.unsupportedSlotValue(device:slotName:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_42_13(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    v1[7] = 0LL;
    v1[8] = 0LL;
  }

  v1[6] = v2;
  OUTLINED_FUNCTION_27_8(v6);
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v7);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v8);
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 56) = v12;
  OUTLINED_FUNCTION_74_2(v12, (uint64_t)RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:));
  unint64_t v13 = OUTLINED_FUNCTION_73_8(36LL);
  return OUTLINED_FUNCTION_9_25(v13, v14, v15, v16);
}

void RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds.init(rawValue:)(uint64_t a1, uint64_t a2)
{
  v2._rawValue = &outlined read-only object #0 of RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds.init(rawValue:);
  RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds.init(rawValue:)(a1, a2, v2);
}

void RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds.init(rawValue:)( uint64_t a1, uint64_t a2, Swift::OpaquePointer a3)
{
}

uint64_t RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds.rawValue.getter()
{
  return 0x726F707075736E75LL;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds( uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds( void *a1@<X8>)
{
}

uint64_t RunVoiceCommandCATsSimple.unsupportedSlotValueAsLabels(device:slotName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATsSimple.unsupportedSlotValueAsLabels(device:slotName:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_42_13(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    v1[7] = 0LL;
    v1[8] = 0LL;
  }

  v1[6] = v2;
  OUTLINED_FUNCTION_27_8(v6);
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v7);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v8);
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_68_9(v12);
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds();
  OUTLINED_FUNCTION_75_2((uint64_t)RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:));
  OUTLINED_FUNCTION_45_1();
  unint64_t v13 = OUTLINED_FUNCTION_72_6(36LL);
  return OUTLINED_FUNCTION_23_17(v13, v14, v15, v16, v17, v18);
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds,  &type metadata for RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds,  &type metadata for RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds);
  }

  return result;
}

uint64_t RunVoiceCommandCATsSimple.yesAndCancel(device:intentVerb:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATsSimple.yesAndCancel(device:intentVerb:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_42_13(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  OUTLINED_FUNCTION_47_17(v6);
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v7);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v8);
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 56) = v12;
  OUTLINED_FUNCTION_74_2(v12, (uint64_t)RunVoiceCommandCATsSimple.yesAndCancel(device:intentVerb:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v13 = OUTLINED_FUNCTION_73_8(28LL);
  return OUTLINED_FUNCTION_9_25(v13, v14, v15, v16);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_39_7();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_40_0();
    uint64_t v2 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::YesAndCancelDialogIds_optional __swiftcall RunVoiceCommandCATsSimple.YesAndCancelDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunVoiceCommandCATsSimple.YesAndCancelDialogIds.init(rawValue:);
  OUTLINED_FUNCTION_88_6(v1, v2);
  OUTLINED_FUNCTION_58_2();
  OUTLINED_FUNCTION_1();
  return result;
}

uint64_t RunVoiceCommandCATsSimple.YesAndCancelDialogIds.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x6C65636E6163LL;
  }
  if (a1 == 1) {
    return 28526LL;
  }
  return 7562617LL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds( char *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::YesAndCancelDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::YesAndCancelDialogIds_optional *a2@<X8>)
{
  result.value = RunVoiceCommandCATsSimple.YesAndCancelDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds()
{
  char v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = RunVoiceCommandCATsSimple.YesAndCancelDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t RunVoiceCommandCATsSimple.yesAndCancelAsLabels(device:intentVerb:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATsSimple.yesAndCancelAsLabels(device:intentVerb:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_42_13(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  OUTLINED_FUNCTION_47_17(v6);
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v7);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v8);
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_68_9(v12);
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.YesAndCancelDialogIds and conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds();
  OUTLINED_FUNCTION_75_2((uint64_t)RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:));
  OUTLINED_FUNCTION_45_1();
  unint64_t v13 = OUTLINED_FUNCTION_72_6(28LL);
  return OUTLINED_FUNCTION_23_17(v13, v14, v15, v16, v17, v18);
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.YesAndCancelDialogIds and conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.YesAndCancelDialogIds and conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.YesAndCancelDialogIds and conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.YesAndCancelDialogIds,  &type metadata for RunVoiceCommandCATsSimple.YesAndCancelDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.YesAndCancelDialogIds and conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.YesAndCancelDialogIds and conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.YesAndCancelDialogIds and conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.YesAndCancelDialogIds,  &type metadata for RunVoiceCommandCATsSimple.YesAndCancelDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.YesAndCancelDialogIds and conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.Properties and conformance RunVoiceCommandCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.Properties and conformance RunVoiceCommandCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.Properties and conformance RunVoiceCommandCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceCommandCATsSimple.Properties,  &type metadata for RunVoiceCommandCATsSimple.Properties);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.Properties and conformance RunVoiceCommandCATsSimple.Properties);
  }

  return result;
}

uint64_t type metadata accessor for RunVoiceCommandCATsSimple(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for RunVoiceCommandCATsSimple;
  if (!type metadata singleton initialization cache for RunVoiceCommandCATsSimple) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RunVoiceCommandCATsSimple);
  }
  return result;
}

uint64_t type metadata completion function for RunVoiceCommandCATsSimple(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + class metadata base offset for RunVoiceCommandCATsSimple);
}

uint64_t ObjC metadata update function for RunVoiceCommandCATsSimple()
{
  return type metadata accessor for RunVoiceCommandCATsSimple(0LL);
}

uint64_t getEnumTagSinglePayload for RunVoiceCommandCATsSimple.Properties( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF2)
  {
    if (a2 + 14 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 14) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 15;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for RunVoiceCommandCATsSimple.Properties( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF1) {
    return ((uint64_t (*)(void))((char *)&loc_B73C4 + 4 * byte_183ADF[v4]))();
  }
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_B73F8 + 4 * byte_183ADA[v4]))();
}

uint64_t sub_B73F8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_B7400(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xB7408LL);
  }
  return result;
}

uint64_t sub_B7414(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xB741CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 14;
  return result;
}

uint64_t sub_B7420(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_B7428(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for RunVoiceCommandCATsSimple.Properties()
{
}

void type metadata accessor for RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds()
{
}

void type metadata accessor for RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds()
{
}

void type metadata accessor for RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds()
{
}

void type metadata accessor for RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds()
{
}

void type metadata accessor for RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds()
{
}

uint64_t storeEnumTagSinglePayload for RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_B74D0 + 4 * byte_183AE9[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_B7504 + 4 * byte_183AE4[v4]))();
}

uint64_t sub_B7504(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_B750C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xB7514LL);
  }
  return result;
}

uint64_t sub_B7520(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xB7528LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_B752C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_B7534(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds()
{
}

uint64_t getEnumTagSinglePayload for RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xEA)
  {
    if (a2 + 22 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 22) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 23;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 22 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 22) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v3;
  }
  if (a3 >= 0xEA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xE9) {
    return ((uint64_t (*)(void))((char *)&loc_B7620 + 4 * byte_183AF3[v4]))();
  }
  *a1 = a2 + 22;
  return ((uint64_t (*)(void))((char *)sub_B7654 + 4 * byte_183AEE[v4]))();
}

uint64_t sub_B7654(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_B765C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xB7664LL);
  }
  return result;
}

uint64_t sub_B7670(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xB7678LL);
  }
  *(_BYTE *)uint64_t result = a2 + 22;
  return result;
}

uint64_t sub_B767C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_B7684(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds()
{
}

void type metadata accessor for RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds()
{
}

void type metadata accessor for RunVoiceCommandCATsSimple.OpenAppDialogIds()
{
}

void type metadata accessor for RunVoiceCommandCATsSimple.OpenAppFailedDialogIds()
{
}

void type metadata accessor for RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds()
{
}

uint64_t storeEnumTagSinglePayload for RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_B7718 + 4 * byte_183AFD[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_B774C + 4 * byte_183AF8[v4]))();
}

uint64_t sub_B774C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_B7754(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xB775CLL);
  }
  return result;
}

uint64_t sub_B7768(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xB7770LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_B7774(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_B777C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds()
{
}

void type metadata accessor for RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds()
{
}

uint64_t storeEnumTagSinglePayload for RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_B77E0 + 4 * byte_183B02[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_B7800 + 4 * byte_183B07[v4]))();
  }
}

_BYTE *sub_B77E0(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_B7800(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_B7808(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_B7810(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_B7818(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_B7820(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void type metadata accessor for RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds()
{
}

uint64_t storeEnumTagSinglePayload for RunVoiceCommandCATsSimple.YesAndCancelDialogIds( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_B7884 + 4 * byte_183B11[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_B78B8 + 4 * byte_183B0C[v4]))();
}

uint64_t sub_B78B8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_B78C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xB78C8LL);
  }
  return result;
}

uint64_t sub_B78D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xB78DCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_B78E0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_B78E8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for RunVoiceCommandCATsSimple.YesAndCancelDialogIds()
{
}

uint64_t OUTLINED_FUNCTION_5_27(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_9_25(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_18_24()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 72);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 80) = v0;
  return swift_task_dealloc(v5);
}

uint64_t OUTLINED_FUNCTION_22_17(uint64_t result)
{
  v2[6] = v1;
  void v2[9] = result;
  v2[10] = v3 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_23_23(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_30_19@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_32_16()
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, v0);
}

uint64_t OUTLINED_FUNCTION_41_20()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 48));
}

uint64_t OUTLINED_FUNCTION_42_13(uint64_t result)
{
  *(void *)(v1 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_44_11(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_45_16( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

uint64_t OUTLINED_FUNCTION_46_21(uint64_t result)
{
  *(void *)(v2 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v1;
  *(void *)(v2 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = result;
  strcpy((char *)(v2 + 80), "customDialog");
  *(_BYTE *)(v2 + 9__swift_destroy_boxed_opaque_existential_1Tm(v0 + 3) = 0;
  *(_WORD *)(v2 + 9__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = -5120;
  return result;
}

uint64_t OUTLINED_FUNCTION_47_17(uint64_t result)
{
  v2[6] = v1;
  void v2[9] = result;
  v2[10] = 0x6556746E65746E69LL;
  v2[11] = 0xEA00000000006272LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_49_16()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 64));
}

uint64_t OUTLINED_FUNCTION_51_18()
{
  uint64_t result = *(void *)(v0 + 40);
  strcpy((char *)(v1 + 224), "intentCategory");
  *(_BYTE *)(v1 + 23__swift_destroy_boxed_opaque_existential_1Tm(v0 + 9) = -18;
  return result;
}

uint64_t OUTLINED_FUNCTION_53_15()
{
  uint64_t result = *(void *)(v0 + 32);
  strcpy((char *)(v1 + 176), "customResponse");
  *(_BYTE *)(v1 + 191) = -18;
  return result;
}

  ;
}

uint64_t OUTLINED_FUNCTION_55_17()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 104);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v0;
  return swift_task_dealloc(v5);
}

uint64_t OUTLINED_FUNCTION_57_14()
{
  uint64_t result = *(void *)(v0 + 48);
  *(void *)(v1 + 27__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0x6556746E65746E69LL;
  *(void *)(v1 + 280) = 0xEA00000000006272LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_58_13()
{
  uint64_t result = *(void *)(v0 + 32);
  *(void *)(v1 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0x756C6156746F6C73LL;
  *(void *)(v1 + 136) = 0xE900000000000065LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_59_8()
{
  uint64_t result = *(void *)(v0 + 32);
  *(void *)(v1 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0x6556746E65746E69LL;
  *(void *)(v1 + 136) = 0xEA00000000006272LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_66_11(uint64_t result)
{
  v2[6] = v1;
  void v2[9] = result;
  v2[10] = 0xD000000000000016LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_68_9(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_69_7(uint64_t result)
{
  v2[6] = v1;
  void v2[9] = result;
  v2[10] = 0xD000000000000010LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_71_9()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 32));
}

unint64_t OUTLINED_FUNCTION_72_6(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
}

unint64_t OUTLINED_FUNCTION_73_8(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
}

uint64_t OUTLINED_FUNCTION_77_8(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_78_7()
{
  return 0x64656C696166LL;
}

uint64_t OUTLINED_FUNCTION_79_4(uint64_t result)
{
  *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_83_4(uint64_t result)
{
  *(void *)(v1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_84_7()
{
  return v0;
}

void OUTLINED_FUNCTION_86_2(char a1@<W8>)
{
  *(void *)(v3 + 320) = v4 + 8;
  *(void *)(v3 + 32__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = (v1 - 32) | 0x8000000000000000LL;
  *(void *)(v3 + 360) = v2;
  *(_BYTE *)(v3 + 336) = a1;
}

Swift::Int OUTLINED_FUNCTION_88_6(Swift::OpaquePointer a1, uint64_t a2)
{
  uint64_t v3 = v2;
  return _findStringSwitchCase(cases:string:)(a1, *(Swift::String *)&a2);
}

uint64_t OUTLINED_FUNCTION_89_6( uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(_BYTE *)(v8 + 121) = a7;
  *(void *)(v8 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a6;
  *(void *)(v8 + 56) = v7;
  *(void *)(v8 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a4;
  *(void *)(v8 + 40) = a5;
  *(_BYTE *)(v8 + 120) = a2;
  *(void *)(v8 + 16) = result;
  *(void *)(v8 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a3;
  return result;
}

uint64_t OUTLINED_FUNCTION_92_2()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 96));
}

unint64_t OUTLINED_FUNCTION_94_3(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
}

unint64_t OUTLINED_FUNCTION_95_3(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
}

uint64_t OUTLINED_FUNCTION_98_2()
{
  return *(void *)(v0 + 32);
}

  ;
}

  ;
}

uint64_t AppShortcutGeneralizedInvocation.action.getter()
{
  *(void *)(v1 + 16) = v0;
  return OUTLINED_FUNCTION_6_2((uint64_t)AppShortcutGeneralizedInvocation.action.getter);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[10];
  uint64_t v3 = v1[11];
  __swift_project_boxed_opaque_existential_1(v1 + 7, v2);
  uint64_t v4 = v1[5];
  uint64_t v5 = v1[6];
  unsigned int v6 = v1[1];
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  char v9 = v1[4];
  uint64_t v10 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v3 + 32));
  *(void *)(v0 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v10;
  *uint64_t v10 = v0;
  v10[1] = AppShortcutGeneralizedInvocation.action.getter;
  return v12(v4, v5, v6, v7, v8, v9, v2, v3);
}

uint64_t AppShortcutGeneralizedInvocation.action.getter(uint64_t a1)
{
  uint64_t v6 = *v2;
  uint64_t v4 = swift_task_dealloc(*(void *)(*v2 + 24));
  if (!v1) {
    uint64_t v4 = a1;
  }
  return OUTLINED_FUNCTION_5_16(v4, *(uint64_t (**)(void))(v6 + 8));
}

uint64_t AppShortcutGeneralizedInvocation.init(bundleIdentifier:appShortcutIdentifier:parameterIdentifier:provider:preferences:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int128 *a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  a9[5] = a1;
  a9[6] = a2;
  a9[3] = a5;
  a9[4] = a6;
  a9[1] = a3;
  a9[2] = a4;
  *a9 = a8;
  return outlined init with take of AceServiceInvokerAsync(a7, (uint64_t)(a9 + 7));
}

id AppShortcutGeneralizedInvocation.preferences.getter()
{
  return *v0;
}

void AppShortcutGeneralizedInvocation.preferences.setter(void *a1)
{
  *uint64_t v1 = a1;
}

void AppShortcutGeneralizedInvocation.appShortcutIdentifier.getter()
{
}

void AppShortcutGeneralizedInvocation.parameterIdentifier.getter()
{
}

void AppShortcutGeneralizedInvocation.bundleId.getter()
{
}

uint64_t AppShortcutGeneralizedInvocation.provider.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 56, a1);
}

void AppShortcutGeneralizedInvocation.ExtractionError.description.getter(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }

unint64_t sub_B7F64()
{
  v2._uint64_t countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
  return 0xD000000000000023LL;
}

void protocol witness for CustomStringConvertible.description.getter in conformance AppShortcutGeneralizedInvocation.ExtractionError()
{
}

uint64_t AppShortcutGeneralizedInvocation.autoShortcuts.getter()
{
  *(void *)(v1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v0;
  return OUTLINED_FUNCTION_6_2((uint64_t)AppShortcutGeneralizedInvocation.autoShortcuts.getter);
}

{
  uint64_t v0;
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;
  uint64_t v14;
  os_log_s *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v1 = [**(id **)(v0 + 32) languageCode];
  if (v1)
  {
    Swift::String v2 = v1;
    uint64_t v3 = *(void **)(v0 + 32);
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    *(void *)(v0 + 40) = v6;
    uint64_t v7 = v3[10];
    uint64_t v8 = v3[11];
    __swift_project_boxed_opaque_existential_1(v3 + 7, v7);
    char v9 = v3[5];
    uint64_t v10 = v3[6];
    uint64_t v11 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v8 + 8));
    *(void *)(v0 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v11;
    *uint64_t v11 = v0;
    v11[1] = AppShortcutGeneralizedInvocation.autoShortcuts.getter;
    return v18(v9, v10, v4, v6, v7, v8);
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    unint64_t v13 = OUTLINED_FUNCTION_48();
    uint64_t v14 = __swift_project_value_buffer(v13, (uint64_t)static Logger.voiceCommands);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    uint64_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_0, v15, v16, "#AppShortcutGeneralizedInvocation cannot get Siri language", v17, 2u);
      OUTLINED_FUNCTION_1_0((uint64_t)v17);
    }

    return (*(uint64_t (**)(void *))(v0 + 8))(_swiftEmptyArrayStorage);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_s *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 16) = v1;
  Swift::String v2 = (uint64_t *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v3 + 8);
  uint64_t v5 = *(void *)(v3 + 16);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v20 = v1;
    }
    else {
      uint64_t v20 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(v1);
  }

  else
  {
    uint64_t v6 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v7 = *(void *)(v0 + 64);
  uint64_t v8 = static AppShortcutGeneralizedInvocation.extractRank(from:maxRank:)(v4, v5, v6);
  if (v7)
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 56));
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    char v9 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
    OUTLINED_FUNCTION_32_4();
    uint64_t v10 = OUTLINED_FUNCTION_32_4();
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    uint64_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v23 = (void *)OUTLINED_FUNCTION_38(8LL);
      *(_DWORD *)unint64_t v13 = 138412290;
      OUTLINED_FUNCTION_32_4();
      uint64_t v14 = _swift_stdlib_bridgeErrorToNSError(v7);
      *(void *)(v0 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v13 + 4);
      void *v23 = v14;
      OUTLINED_FUNCTION_23_6();
      OUTLINED_FUNCTION_23_6();
      _os_log_impl( &dword_0,  v11,  v12,  "#AppShortcutGeneralizedInvocation could not prepare App Shortcuts list. Error: %@",  v13,  0xCu);
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v23, 1LL, v15);
      OUTLINED_FUNCTION_1_0((uint64_t)v23);
      OUTLINED_FUNCTION_1_0((uint64_t)v13);
    }

    else
    {
      OUTLINED_FUNCTION_23_6();
      OUTLINED_FUNCTION_23_6();
    }

    OUTLINED_FUNCTION_23_6();
    uint64_t v18 = _swiftEmptyArrayStorage;
    return (*(uint64_t (**)(void *))(v0 + 8))(v18);
  }

  uint64_t v16 = specialized Array.remove(at:)(v8);
  uint64_t v17 = *v2;
  if (!((unint64_t)*v2 >> 62)
    || (v17 < 0 ? (uint64_t v21 = *v2) : (uint64_t v21 = v17 & 0xFFFFFFFFFFFFFF8LL),
        swift_bridgeObjectRetain(*v2),
        uint64_t v22 = _CocoaArrayWrapper.endIndex.getter(v21),
        uint64_t result = swift_bridgeObjectRelease(v17),
        (v22 & 0x8000000000000000LL) == 0))
  {
    specialized Array.replaceSubrange<A>(_:with:)(0LL, 0LL, v16);
    uint64_t v18 = (void *)*v2;
    return (*(uint64_t (**)(void *))(v0 + 8))(v18);
  }

  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v1 = *(void *)(v0 + 64);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  Swift::String v2 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_46_0();
  uint64_t v3 = OUTLINED_FUNCTION_46_0();
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v7 = (void *)OUTLINED_FUNCTION_38(8LL);
    *(_DWORD *)uint64_t v6 = 138412290;
    OUTLINED_FUNCTION_46_0();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4);
    *uint64_t v7 = v8;
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    _os_log_impl( &dword_0,  v4,  v5,  "#AppShortcutGeneralizedInvocation could not prepare App Shortcuts list. Error: %@",  v6,  0xCu);
    char v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v7, 1LL, v9);
    OUTLINED_FUNCTION_1_0((uint64_t)v7);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
  }

  else
  {
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  OUTLINED_FUNCTION_4_8();
  return (*(uint64_t (**)(void *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t AppShortcutGeneralizedInvocation.autoShortcuts.getter(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 48LL);
  v3[7] = a1;
  v3[8] = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(v3[5]);
  if (v1) {
    uint64_t v5 = AppShortcutGeneralizedInvocation.autoShortcuts.getter;
  }
  else {
    uint64_t v5 = AppShortcutGeneralizedInvocation.autoShortcuts.getter;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t static AppShortcutGeneralizedInvocation.extractRank(from:maxRank:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v8 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v9 = StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)( 95LL,  0xE100000000000000LL,  0x7FFFFFFFFFFFFFFFLL,  1LL,  &type metadata for String,  v8);
  uint64_t v10 = v9;
  if (*(void *)(v9 + 16) < 2uLL)
  {
    swift_bridgeObjectRelease(v9);
    unint64_t v11 = lazy protocol witness table accessor for type AppShortcutGeneralizedInvocation.ExtractionError and conformance AppShortcutGeneralizedInvocation.ExtractionError();
    swift_allocError(&type metadata for AppShortcutGeneralizedInvocation.ExtractionError, v11, 0LL, 0LL);
    *(void *)uint64_t v12 = a1;
    *(void *)(v12 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a2;
    *(_BYTE *)(v12 + 16) = 0;
LABEL_15:
    swift_bridgeObjectRetain(a2);
    goto LABEL_16;
  }

  uint64_t v13 = specialized BidirectionalCollection.last.getter(v9);
  unint64_t v15 = v14;
  unint64_t v17 = v16;
  unint64_t v19 = v18;
  swift_bridgeObjectRelease(v10);
  if (!v19)
  {
    unint64_t v30 = lazy protocol witness table accessor for type AppShortcutGeneralizedInvocation.ExtractionError and conformance AppShortcutGeneralizedInvocation.ExtractionError();
    uint64_t v24 = swift_allocError(&type metadata for AppShortcutGeneralizedInvocation.ExtractionError, v30, 0LL, 0LL);
    *(void *)uint64_t v25 = 0LL;
    *(void *)(v25 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0LL;
    char v29 = 3;
    goto LABEL_12;
  }

  if (!((v13 ^ v15) >> 14))
  {
    swift_bridgeObjectRelease(v19);
LABEL_14:
    unint64_t v31 = lazy protocol witness table accessor for type AppShortcutGeneralizedInvocation.ExtractionError and conformance AppShortcutGeneralizedInvocation.ExtractionError();
    swift_allocError(&type metadata for AppShortcutGeneralizedInvocation.ExtractionError, v31, 0LL, 0LL);
    *(void *)uint64_t v32 = a1;
    *(void *)(v32 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a2;
    *(_BYTE *)(v32 + 16) = 1;
    goto LABEL_15;
  }

  uint64_t v34 = a3;
  uint64_t v20 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n( v13,  v15,  v17,  v19,  10LL);
  if ((v21 & 0x100) != 0) {
    uint64_t v20 = (uint64_t)specialized _parseInteger<A, B>(ascii:radix:)(v13, v15, v17, v19, 10LL);
  }
  uint64_t v4 = v20;
  char v22 = v21;
  swift_bridgeObjectRelease(v19);
  if ((v22 & 1) != 0) {
    goto LABEL_14;
  }
  if (v4 < 0 || v4 >= v34)
  {
    unint64_t v23 = lazy protocol witness table accessor for type AppShortcutGeneralizedInvocation.ExtractionError and conformance AppShortcutGeneralizedInvocation.ExtractionError();
    uint64_t v24 = swift_allocError(&type metadata for AppShortcutGeneralizedInvocation.ExtractionError, v23, 0LL, 0LL);
    *(void *)uint64_t v25 = v4;
    *(void *)(v25 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v34;
    char v29 = 2;
LABEL_12:
    *(_BYTE *)(v25 + 16) = v29;
LABEL_16:
    swift_willThrow(v24, v25, v26, v27, v28);
  }

  return v4;
}

uint64_t protocol witness for AppShortcutInvoking.action.getter in conformance AppShortcutGeneralizedInvocation()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_219AC4);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for AppShortcutInvoking.action.getter in conformance AppShortcutGeneralizedInvocation;
  return AppShortcutGeneralizedInvocation.action.getter();
}

uint64_t protocol witness for AppShortcutInvoking.action.getter in conformance AppShortcutGeneralizedInvocation( uint64_t a1)
{
  uint64_t v4 = OUTLINED_FUNCTION_16_1();
  if (!v1) {
    uint64_t v4 = a1;
  }
  return OUTLINED_FUNCTION_5_16(v4, *(uint64_t (**)(void))(v2 + 8));
}

uint64_t protocol witness for AppShortcutInvoking.autoShortcuts.getter in conformance AppShortcutGeneralizedInvocation()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_219ACC);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for Flow.onAsync(input:) in conformance WFExecuteCustomIntentFlow;
  return AppShortcutGeneralizedInvocation.autoShortcuts.getter();
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.appBundleId.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain(*(void *)(v0 + 48));
  return v1;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = _swift_stdlib_malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = a1 >> 16;
  if ((a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0)
  {
    uint64_t v9 = String.UTF16View.index(_:offsetBy:)(15LL, v5, a2);
    OUTLINED_FUNCTION_8_29(v9);
    return v10 | 4;
  }

  else
  {
    uint64_t v6 = String.UTF8View._foreignIndex(_:offsetBy:)(15LL, v5);
    OUTLINED_FUNCTION_8_29(v6);
    return v7 | 8;
  }

uint64_t destroy for AppShortcutGeneralizedInvocation(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1Tm((void *)(a1 + 56));
}

uint64_t initializeWithCopy for AppShortcutGeneralizedInvocation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v4;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v5;
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v8;
  *(void *)(a1 + 40) = v7;
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v9;
  uint64_t v10 = a1 + 56;
  uint64_t v11 = a2 + 56;
  __int128 v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v12;
  uint64_t v13 = v12;
  unint64_t v14 = **(void (***)(uint64_t, uint64_t, uint64_t))(v12 - 8);
  id v15 = v3;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  v14(v10, v11, v13);
  return a1;
}

uint64_t assignWithCopy for AppShortcutGeneralizedInvocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(void *)(a1 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a1 + 32);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  uint64_t v12 = *(void *)(a1 + 48);
  *(void *)(a1 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  __swift_assign_boxed_opaque_existential_1((void *)(a1 + 56), (void *)(a2 + 56));
  return a1;
}

void *__swift_memcpy96_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

uint64_t assignWithTake for AppShortcutGeneralizedInvocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a1 + 32);
  *(void *)(a1 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = *(void *)(a2 + 24);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v7;
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v9;
  swift_bridgeObjectRelease(v10);
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(a1 + 56));
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = *(void *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppShortcutGeneralizedInvocation(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 96))
    {
      LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppShortcutGeneralizedInvocation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0LL;
    *(_OWORD *)(result + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0u;
    *(_OWORD *)(result + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 96) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AppShortcutGeneralizedInvocation()
{
  return &type metadata for AppShortcutGeneralizedInvocation;
}

uint64_t outlined copy of AppShortcutGeneralizedInvocation.ExtractionError( uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t destroy for AppShortcutGeneralizedInvocation.ExtractionError(uint64_t a1)
{
  return outlined consume of AppShortcutGeneralizedInvocation.ExtractionError( *(void *)a1,  *(void *)(a1 + 8),  *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of AppShortcutGeneralizedInvocation.ExtractionError( uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AppShortcutGeneralizedInvocation.ExtractionError( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  outlined copy of AppShortcutGeneralizedInvocation.ExtractionError(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AppShortcutGeneralizedInvocation.ExtractionError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  outlined copy of AppShortcutGeneralizedInvocation.ExtractionError(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v4;
  unsigned __int8 v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of AppShortcutGeneralizedInvocation.ExtractionError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AppShortcutGeneralizedInvocation.ExtractionError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of AppShortcutGeneralizedInvocation.ExtractionError(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for AppShortcutGeneralizedInvocation.ExtractionError()
{
  return &type metadata for AppShortcutGeneralizedInvocation.ExtractionError;
}

unint64_t lazy protocol witness table accessor for type AppShortcutGeneralizedInvocation.ExtractionError and conformance AppShortcutGeneralizedInvocation.ExtractionError()
{
  unint64_t result = lazy protocol witness table cache variable for type AppShortcutGeneralizedInvocation.ExtractionError and conformance AppShortcutGeneralizedInvocation.ExtractionError;
  if (!lazy protocol witness table cache variable for type AppShortcutGeneralizedInvocation.ExtractionError and conformance AppShortcutGeneralizedInvocation.ExtractionError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AppShortcutGeneralizedInvocation.ExtractionError,  &type metadata for AppShortcutGeneralizedInvocation.ExtractionError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AppShortcutGeneralizedInvocation.ExtractionError and conformance AppShortcutGeneralizedInvocation.ExtractionError);
  }

  return result;
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  unint64_t v7 = lazy protocol witness table accessor for type Substring and conformance Substring();
  __n128 v8 = swift_bridgeObjectRetain(a4);
  uint64_t v9 = String.init<A>(_:)(&v19, &type metadata for Substring, &protocol witness table for Substring, v7, v8);
  uint64_t v11 = v9;
  unint64_t v12 = v10;
  if ((v10 & 0x1000000000000000LL) == 0)
  {
    if ((v10 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v14 = HIBYTE(v12) & 0xF;
    uint64_t v19 = v11;
    uint64_t v20 = v12 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v13 = (unsigned __int8 *)&v19;
    goto LABEL_7;
  }

  uint64_t v11 = static String._copying(_:)(v9, v10);
  unint64_t v16 = v15;
  swift_bridgeObjectRelease(v12);
  unint64_t v12 = v16;
  if ((v16 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v11 & 0x1000000000000000LL) != 0)
  {
    uint64_t v13 = (unsigned __int8 *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v14 = v11 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v13 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v11, v12);
  }

unsigned __int8 *specialized closure #1 in _parseInteger<A, B>(ascii:radix:)( unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v15 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v16 = a3 + 48;
        unsigned __int8 v17 = a3 + 55;
        unsigned __int8 v18 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = 58;
        }

        else
        {
          unsigned __int8 v18 = 97;
          unsigned __int8 v17 = 65;
        }

        if (result)
        {
          uint64_t v9 = 0LL;
          uint64_t v19 = result + 1;
          do
          {
            unsigned int v20 = *v19;
            if (v20 < 0x30 || v20 >= v16)
            {
              if (v20 < 0x41 || v20 >= v17)
              {
                uint64_t v13 = 0LL;
                if (v20 < 0x61 || v20 >= v18) {
                  return (unsigned __int8 *)v13;
                }
                char v21 = -87;
              }

              else
              {
                char v21 = -55;
              }
            }

            else
            {
              char v21 = -48;
            }

            uint64_t v22 = v9 * a3;
            uint64_t v9 = v22 + (v20 + v21);
            ++v19;
            --v15;
          }

          while (v15);
          return (unsigned __int8 *)v9;
        }

        return 0LL;
      }

      return 0LL;
    }
  }

  else
  {
    if (v4 != 45)
    {
      if (a2)
      {
        unsigned __int8 v23 = a3 + 48;
        unsigned __int8 v24 = a3 + 55;
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v23 = 58;
        }

        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v24 = 65;
        }

        if (result)
        {
          uint64_t v26 = 0LL;
          do
          {
            unsigned int v27 = *result;
            if (v27 < 0x30 || v27 >= v23)
            {
              if (v27 < 0x41 || v27 >= v24)
              {
                uint64_t v13 = 0LL;
                if (v27 < 0x61 || v27 >= v25) {
                  return (unsigned __int8 *)v13;
                }
                char v28 = -87;
              }

              else
              {
                char v28 = -55;
              }
            }

            else
            {
              char v28 = -48;
            }

            uint64_t v29 = v26 * a3;
            uint64_t v26 = v29 + (v27 + v28);
            ++result;
            --v3;
          }

          while (v3);
          return (unsigned __int8 *)(v29 + (v27 + v28));
        }

        return 0LL;
      }

      return 0LL;
    }

    if (a2 >= 1)
    {
      uint64_t v5 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v6 = a3 + 48;
        unsigned __int8 v7 = a3 + 55;
        unsigned __int8 v8 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = 58;
        }

        else
        {
          unsigned __int8 v8 = 97;
          unsigned __int8 v7 = 65;
        }

        if (result)
        {
          uint64_t v9 = 0LL;
          for (unint64_t i = result + 1; ; ++i)
          {
            unsigned int v11 = *i;
            if (v11 < 0x30 || v11 >= v6)
            {
              if (v11 < 0x41 || v11 >= v7)
              {
                uint64_t v13 = 0LL;
                if (v11 < 0x61 || v11 >= v8) {
                  return (unsigned __int8 *)v13;
                }
                char v12 = -87;
              }

              else
              {
                char v12 = -55;
              }
            }

            else
            {
              char v12 = -48;
            }

            uint64_t v14 = v9 * a3;
            uint64_t v9 = v14 - (v11 + v12);
            if (!--v5) {
              return (unsigned __int8 *)v9;
            }
          }
        }

        return 0LL;
      }

      return 0LL;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static String._copying(_:)(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = specialized Collection.subscript.getter( (uint64_t)VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit.hash(into:),  0LL,  a1,  a2);
  unint64_t v4 = v3;
  uint64_t v7 = static String._copying(_:)(v2, v5, v6, v3);
  swift_bridgeObjectRelease(v4);
  return v7;
}

uint64_t specialized Collection.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = a3;
  }
  uint64_t v5 = 7LL;
  if (((a4 >> 60) & ((a3 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v5 = 11LL;
  }
  return String.subscript.getter(15LL, v5 | (v4 << 16), a3, a4);
}

uint64_t static String._copying(_:)( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a3;
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    unint64_t v12 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v12)
    {
      uint64_t v9 = v12;
      unint64_t v8 = (unint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v12, 0LL);
      unint64_t v5 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      uint64_t v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }

    else
    {
      unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
    }

    uint64_t v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(void *)(v8 + 16));
    swift_release();
    return v14;
  }

  else
  {
    unint64_t v8 = a1 >> 16;
    uint64_t v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000LL) == 0)
    {
      if ((a3 & 0x1000000000000000LL) != 0)
      {
        uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }

unint64_t specialized Collection.count.getter( unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  if ((result & 0xC) == 4LL << v8)
  {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a3, a4);
    unint64_t v7 = result;
  }

  if ((a2 & 0xC) == v9)
  {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000LL) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }

  else if ((a4 & 0x1000000000000000LL) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }

  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }

  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }

  __break(1u);
  return result;
}

unint64_t specialized Sequence._copySequenceContents(initializing:)( unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0LL;
    goto LABEL_35;
  }

  if (a3 < 0) {
    goto LABEL_38;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0LL;
    unint64_t v12 = a4;
LABEL_35:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }

  uint64_t v11 = 0LL;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000LL) == 0) {
    LOBYTE(v1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 1;
  }
  uint64_t v15 = 4LL << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000LL) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t result = v12;
    if ((v12 & 0xC) == v15) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000LL) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
    }

    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000LL) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((_BYTE *)v28 + v18);
      }

      else
      {
        unint64_t result = v21;
        if ((a6 & 0x1000000000000000LL) == 0) {
          unint64_t result = _StringObject.sharedUTF8.getter(a6, a7);
        }
        char v19 = *(_BYTE *)(result + v18);
      }
    }

    if ((v12 & 0xC) == v15)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
      unint64_t v12 = result;
      if ((a7 & 0x1000000000000000LL) == 0)
      {
LABEL_27:
        unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65540;
        goto LABEL_31;
      }
    }

    else if ((a7 & 0x1000000000000000LL) == 0)
    {
      goto LABEL_27;
    }

    if (v23 <= v12 >> 16) {
      goto LABEL_37;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_31:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_35;
    }

    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_35;
    }
  }

  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    uint64_t result = 0LL;
    goto LABEL_8;
  }

  if ((a4 & 0x2000000000000000LL) != 0)
  {
    uint64_t v12 = HIBYTE(a4) & 0xF;
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v11 = v15;
  }

  else if ((a3 & 0x1000000000000000LL) != 0)
  {
    uint64_t v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v12 = a3 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v11 = (void *)_StringObject.sharedUTF8.getter(a3, a4);
  }

  uint64_t result = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_n( (uint64_t)v11,  v12,  a1,  a2,  a3,  a4,  a5);
  if (!v5)
  {
    char v16 = v14 & 1;
LABEL_8:
    LOBYTE(v15[0]) = (a4 & 0x1000000000000000LL) != 0;
  }

  return result;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_n( uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  unint64_t v11 = a3;
  uint64_t v12 = result;
  uint64_t v13 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000LL) == 0) {
    LOBYTE(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 13) = 1;
  }
  uint64_t v14 = 4LL << v13;
  unint64_t v15 = a3 & 0xC;
  unint64_t v16 = a3;
  if (v15 == 4LL << v13)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a5, a6);
    unint64_t v16 = result;
  }

  uint64_t v17 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x1000000000000000LL) != 0)
  {
    unint64_t v19 = a5 & 0xFFFFFFFFFFFFLL;
    if ((a6 & 0x2000000000000000LL) != 0) {
      unint64_t v19 = HIBYTE(a6) & 0xF;
    }
    if (v19 < v16 >> 16) {
      goto LABEL_96;
    }
    uint64_t result = String.UTF8View._foreignDistance(from:to:)(15LL, v16, a5, a6);
    uint64_t v18 = result;
    uint64_t v17 = HIBYTE(a6) & 0xF;
  }

  else
  {
    uint64_t v18 = v16 >> 16;
  }

  if (v15 == v14)
  {
    uint64_t v20 = v17;
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a5, a6);
    uint64_t v17 = v20;
    unint64_t v11 = result;
  }

  if ((a4 & 0xC) == v14)
  {
    unint64_t v21 = a4;
    uint64_t v22 = v17;
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v21, a5, a6);
    uint64_t v17 = v22;
    a4 = result;
    if ((a6 & 0x1000000000000000LL) == 0) {
      goto LABEL_11;
    }
  }

  else if ((a6 & 0x1000000000000000LL) == 0)
  {
LABEL_11:
    uint64_t result = (a4 >> 16) - (v11 >> 16);
    goto LABEL_22;
  }

  unint64_t v23 = a5 & 0xFFFFFFFFFFFFLL;
  if ((a6 & 0x2000000000000000LL) != 0) {
    unint64_t v23 = v17;
  }
  if (v23 < v11 >> 16) {
    goto LABEL_92;
  }
  if (v23 < a4 >> 16)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }

  uint64_t result = String.UTF8View._foreignDistance(from:to:)(v11, a4, a5, a6);
LABEL_22:
  uint64_t v24 = v18 + result;
  if (__OFADD__(v18, result))
  {
    __break(1u);
    goto LABEL_91;
  }

  if (v24 < v18)
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }

  unsigned __int8 v25 = (unsigned __int8 *)(v12 + v18);
  if (!v12) {
    unsigned __int8 v25 = 0LL;
  }
  int v26 = *v25;
  if (v26 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v37 = a7 + 48;
        unsigned __int8 v38 = a7 + 55;
        unsigned __int8 v39 = a7 + 87;
        if (a7 > 10)
        {
          unsigned __int8 v37 = 58;
        }

        else
        {
          unsigned __int8 v39 = 97;
          unsigned __int8 v38 = 65;
        }

        if (v25)
        {
          uint64_t v30 = 0LL;
          unint64_t v40 = v25 + 1;
          uint64_t v41 = result - 1;
          do
          {
            unsigned int v42 = *v40;
            if (v42 < 0x30 || v42 >= v37)
            {
              if (v42 < 0x41 || v42 >= v38)
              {
                uint64_t v35 = 0LL;
                if (v42 < 0x61 || v42 >= v39) {
                  return v35;
                }
                char v43 = -87;
              }

              else
              {
                char v43 = -55;
              }
            }

            else
            {
              char v43 = -48;
            }

            uint64_t v44 = v30 * a7;
            uint64_t v30 = v44 + (v42 + v43);
            ++v40;
            --v41;
          }

          while (v41);
          return v30;
        }

        return 0LL;
      }

      return 0LL;
    }

    goto LABEL_95;
  }

  if (v26 != 45)
  {
    if (v24 != v18)
    {
      unsigned __int8 v45 = a7 + 48;
      unsigned __int8 v46 = a7 + 55;
      unsigned __int8 v47 = a7 + 87;
      if (a7 > 10)
      {
        unsigned __int8 v45 = 58;
      }

      else
      {
        unsigned __int8 v47 = 97;
        unsigned __int8 v46 = 65;
      }

      if (v25)
      {
        uint64_t v48 = 0LL;
        do
        {
          unsigned int v49 = *v25;
          if (v49 < 0x30 || v49 >= v45)
          {
            if (v49 < 0x41 || v49 >= v46)
            {
              uint64_t v35 = 0LL;
              if (v49 < 0x61 || v49 >= v47) {
                return v35;
              }
              char v50 = -87;
            }

            else
            {
              char v50 = -55;
            }
          }

          else
          {
            char v50 = -48;
          }

          uint64_t v51 = v48 * a7;
          uint64_t v48 = v51 + (v49 + v50);
          ++v25;
          --result;
        }

        while (result);
        return v51 + (v49 + v50);
      }

      return 0LL;
    }

    return 0LL;
  }

  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v27 = a7 + 48;
      unsigned __int8 v28 = a7 + 55;
      unsigned __int8 v29 = a7 + 87;
      if (a7 > 10)
      {
        unsigned __int8 v27 = 58;
      }

      else
      {
        unsigned __int8 v29 = 97;
        unsigned __int8 v28 = 65;
      }

      if (v25)
      {
        uint64_t v30 = 0LL;
        unint64_t v31 = v25 + 1;
        uint64_t v32 = result - 1;
        while (1)
        {
          unsigned int v33 = *v31;
          if (v33 < 0x30 || v33 >= v27)
          {
            if (v33 < 0x41 || v33 >= v28)
            {
              uint64_t v35 = 0LL;
              if (v33 < 0x61 || v33 >= v29) {
                return v35;
              }
              char v34 = -87;
            }

            else
            {
              char v34 = -55;
            }
          }

          else
          {
            char v34 = -48;
          }

          uint64_t v36 = v30 * a7;
          uint64_t v30 = v36 - (v33 + v34);
          ++v31;
          if (!--v32) {
            return v30;
          }
        }
      }

      return 0LL;
    }

    return 0LL;
  }

unint64_t OUTLINED_FUNCTION_8_29(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

uint64_t OUTLINED_FUNCTION_9_26()
{
  return dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
}

  ;
}

void OUTLINED_FUNCTION_15_17(Swift::String a1)
{
}

#error "B9C3C: call analysis failed (funcsize=10)"
void LinkRCHFlow.exitValue.getter()
{
  uint64_t v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_s *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21[3];
  unint64_t v2 = v0;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  unint64_t v3 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.voiceCommands);
  uint64_t v4 = swift_retain_n(v0, 2LL);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  unint64_t v6 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_20_9(v6))
  {
    unint64_t v7 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v8 = OUTLINED_FUNCTION_38(32LL);
    v21[0] = v8;
    *(_DWORD *)unint64_t v7 = 136315138;
    OUTLINED_FUNCTION_30_12(v2 + 48, (uint64_t)&v17, 0LL);
    outlined init with copy of LinkRCHFlow.State((void *)(v2 + 48), (uint64_t)&v18);
    uint64_t v9 = String.init<A>(describing:)(&v18, &unk_1F8418);
    uint64_t v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v7 + 4);
    OUTLINED_FUNCTION_107_0(v2);
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_31_2(&dword_0, v5, v1, "Exiting LinkRCHFlow... currentState: %s", v7);
    OUTLINED_FUNCTION_30_3(v8, v11, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v8);
    OUTLINED_FUNCTION_1_0((uint64_t)v7);
  }

  else
  {

    OUTLINED_FUNCTION_107_0(v2);
  }

  uint64_t v12 = OUTLINED_FUNCTION_30_12(v2 + 48, (uint64_t)v21, 0LL);
  OUTLINED_FUNCTION_131_2(v12, v13, v14, v15, v16);
  __asm { BR              X10 }

#error "B9F54: call analysis failed (funcsize=10)"
void LinkRCHFlow.__allocating_init(action:actionMetadata:bundleId:showWhenRun:connection:workflowRunner:serviceInvoker:deviceState:overrideStrategy:outputPublisher:)( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  void (*a24)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  OUTLINED_FUNCTION_55_1();
  unsigned __int8 v46 = v25;
  unsigned __int8 v47 = v26;
  unsigned __int8 v28 = (void *)v27;
  unsigned __int8 v45 = v29;
  unint64_t v31 = v30;
  unsigned int v33 = v32;
  uint64_t v35 = v34;
  unsigned __int8 v37 = v36;
  unsigned __int8 v39 = *(void *)(v27 + 24);
  unsigned __int8 v38 = *(void *)(v27 + 32);
  unint64_t v40 = __swift_mutable_project_boxed_opaque_existential_1(v27, v39);
  __chkstk_darwin(v40);
  OUTLINED_FUNCTION_35();
  char v43 = v42 - v41;
  (*(void (**)(uint64_t))(v44 + 16))(v42 - v41);
  a24(v37, v35, v33, v31, v45, v43, v46, v47, a21, a22, a23, v24, v39, v38);
  __swift_destroy_boxed_opaque_existential_1Tm(v28);
  OUTLINED_FUNCTION_24_0();
}

uint64_t LinkRCHFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  lazy protocol witness table accessor for type LinkRCHFlow and conformance LinkRCHFlow( &lazy protocol witness table cache variable for type LinkRCHFlow and conformance LinkRCHFlow,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for LinkRCHFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v5, v6);
}

uint64_t LinkRCHFlow.execute()(uint64_t a1)
{
  v2[109] = v1;
  v2[108] = a1;
  uint64_t v3 = type metadata accessor for CATOption(0LL);
  v2[110] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

void LinkRCHFlow.execute()()
{
  uint64_t v1 = (void *)(*(void *)(v0 + 872) + 48LL);
  OUTLINED_FUNCTION_30_12((uint64_t)v1, v0 + 680, 0LL);
  outlined init with copy of LinkRCHFlow.State(v1, v0 + 80);
  __asm { BR              X10 }

#error "BA368: call analysis failed (funcsize=303)"
uint64_t LinkRCHFlow.execute()()
{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 888));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t LinkRCHFlow.execute()()
{
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 904);
  *(void *)(*v1 + 91__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v0;
  swift_task_dealloc(v3);
  if (!v0) {
    swift_task_dealloc(*(void *)(v2 + 896));
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_0_0();
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v1 = *(unsigned __int8 *)(v0 + 792);
  *(_BYTE *)(v0 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 3) = v1;
  if (v1 == 255)
  {
    uint64_t v8 = *(void *)(*(void *)(v0 + 872) + 32LL);
    uint64_t v9 = lazy protocol witness table accessor for type LinkRCHFlowError and conformance LinkRCHFlowError();
    unint64_t v10 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for LinkRCHFlowError, v9);
    *unint64_t v11 = 0xD00000000000002BLL;
    v11[1] = 0x80000000001939C0LL;
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)v8 + 208LL))();
    swift_errorRelease(v10);
    static ExecuteResponse.complete(next:)(v12);
    OUTLINED_FUNCTION_12_5();
    OUTLINED_FUNCTION_47_18();
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 512));
    OUTLINED_FUNCTION_90_4();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    unint64_t v2 = *(void *)(v0 + 784);
    *(void *)(v0 + 920) = v2;
    uint64_t v3 = *(void *)(v0 + 776);
    *(void *)(v0 + 92__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v3;
    uint64_t v4 = (void *)OUTLINED_FUNCTION_57_6();
    outlined copy of LinkConnectionEvent(v4, v5, v1);
    uint64_t v6 = (void *)swift_task_alloc(dword_219B14);
    *(void *)(v0 + 936) = v6;
    *uint64_t v6 = v0;
    v6[1] = LinkRCHFlow.execute();
    return LinkRCHFlow.responseFrom(event:iterator:)(*(void *)(v0 + 864), v3, v2, v1, v0 + 512);
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 936));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  outlined consume of LinkConnectionEvent?(*(void **)(v0 + 928), *(void *)(v0 + 920), *(_BYTE *)(v0 + 73));
  OUTLINED_FUNCTION_47_18();
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 512));
  OUTLINED_FUNCTION_90_4();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  uint64_t v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  swift_task_dealloc(*(void *)(v0 + 896));
  OUTLINED_FUNCTION_47_18();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = *(void *)(v0 + 912);
  unint64_t v2 = OUTLINED_FUNCTION_48();
  uint64_t v3 = (os_log_s *)__swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain(v1);
  uint64_t v4 = swift_errorRetain(v1);
  Logger.logObject.getter(v4);
  uint64_t v5 = OUTLINED_FUNCTION_164();
  uint64_t v6 = os_log_type_enabled(v3, v5);
  unint64_t v7 = *(void *)(v0 + 912);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v9 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v18 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_getErrorValue(v7, v0 + 808, v0 + 632);
    unint64_t v10 = Error.localizedDescription.getter(*(void *)(v0 + 640), *(void *)(v0 + 648));
    *(void *)(v0 + 84__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 848, v0 + 856, v8 + 4);
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_98_3();
    OUTLINED_FUNCTION_98_3();
    OUTLINED_FUNCTION_31_2(&dword_0, v3, v5, "Handled LinkAction error: %s", v8);
    OUTLINED_FUNCTION_30_3(v9, v12, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v9);
    OUTLINED_FUNCTION_1_0((uint64_t)v8);
  }

  else
  {
    OUTLINED_FUNCTION_98_3();
    OUTLINED_FUNCTION_98_3();
  }

  uint64_t v13 = *(void *)(v0 + 912);
  uint64_t v14 = *(void *)(v0 + 872);
  *(void *)(v0 + 816) = (*(uint64_t (**)(uint64_t))(**(void **)(v14 + 32) + 208LL))(v13);
  unint64_t v15 = OUTLINED_FUNCTION_19((uint64_t)&unk_1F8120, 32LL);
  *(void *)(v15 + 16) = v14;
  *(void *)(v15 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v13;
  swift_retain(v14);
  swift_errorRetain(v13);
  unint64_t v16 = type metadata accessor for AnyFlow(0LL);
  static ExecuteResponse.ongoing<A>(next:childCompletion:)( v0 + 816,  partial apply for closure #3 in LinkRCHFlow.execute(),  v15,  v16,  &protocol witness table for AnyFlow);
  OUTLINED_FUNCTION_12_5();
  swift_errorRelease(v13);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 512));
  OUTLINED_FUNCTION_90_4();
  return OUTLINED_FUNCTION_8_0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t LinkRCHFlow.initializeLinkConnection(connection:)(uint64_t a1)
{
  v2[25] = a1;
  v2[26] = v1;
  v2[27] = *v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>);
  v2[28] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[29] = v4;
  v2[30] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Locale(0LL);
  v2[31] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[32] = v6;
  v2[33] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v2[34] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for ResponseMode(0LL);
  v2[35] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[36] = v9;
  v2[37] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(LinkRCHFlow.initializeLinkConnection(connection:), 0LL, 0LL);
}

uint64_t LinkRCHFlow.initializeLinkConnection(connection:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[26];
  uint64_t v3 = OUTLINED_FUNCTION_48();
  uint64_t v4 = (os_log_s *)__swift_project_value_buffer(v3, (uint64_t)static Logger.voiceCommands);
  outlined init with copy of AppShortcutInvoking(v1, (uint64_t)(v0 + 10));
  uint64_t v5 = swift_retain_n(v2, 2LL);
  uint64_t v6 = v4;
  Logger.logObject.getter(v5);
  os_log_type_t v7 = OUTLINED_FUNCTION_58();
  BOOL v8 = os_log_type_enabled(v4, v7);
  uint64_t v9 = v0[26];
  if (v8)
  {
    uint64_t v10 = OUTLINED_FUNCTION_38(22LL);
    uint64_t v53 = OUTLINED_FUNCTION_38(64LL);
    uint64_t v54 = v53;
    *(_DWORD *)uint64_t v10 = 136315394;
    id v11 = [*(id *)(v9 + 16) identifier];
    os_log_type_t type = v7;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v14 = v13;

    v0[23] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 23, v0 + 24, v10 + 4);
    swift_bridgeObjectRelease(v14);
    OUTLINED_FUNCTION_107_0(v9);
    *(_WORD *)(v10 + 1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 2080;
    outlined init with copy of AppShortcutInvoking((uint64_t)(v0 + 10), (uint64_t)(v0 + 15));
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LinkConnection);
    uint64_t v16 = String.init<A>(describing:)(v0 + 15, v15);
    unint64_t v18 = v17;
    v0[24] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 25, v10 + 14);
    swift_bridgeObjectRelease(v18);
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 10);
    _os_log_impl(&dword_0, v6, type, "Starting action %s against connection %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v53, 2LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v53);
    OUTLINED_FUNCTION_1_0(v10);
  }

  else
  {
    OUTLINED_FUNCTION_107_0(v0[26]);
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 10);
  }

  uint64_t v20 = v0[36];
  uint64_t v19 = v0[37];
  uint64_t v21 = v0[34];
  uint64_t v22 = v0[27];
  id v23 = [objc_allocWithZone(LNActionExecutorOptions) init];
  v0[38] = v23;
  outlined bridged method (mbnn) of @objc LNActionExecutorOptions.clientLabel.setter( 1769105747LL,  0xE400000000000000LL,  v23);
  lazy protocol witness table accessor for type LinkRCHFlow and conformance LinkRCHFlow( &lazy protocol witness table cache variable for type LinkRCHFlow and conformance LinkRCHFlow,  v24,  (uint64_t (*)(uint64_t))type metadata accessor for LinkRCHFlow);
  uint64_t v26 = SiriEnvironmentLocating<>.siriEnvironment.getter(v22, v25);
  SiriEnvironment.currentRequest.getter(v26);
  uint64_t v27 = OUTLINED_FUNCTION_12_5();
  CurrentRequest.responseMode.getter(v27);
  OUTLINED_FUNCTION_128_0();
  ResponseMode.toLinkInteractionMode()();
  uint64_t v28 = OUTLINED_FUNCTION_9_8(v19, *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
  OUTLINED_FUNCTION_3_5(v28, "setInteractionMode:");
  [v23 setSource:3];
  static InstrumentationUtils.createFlowUUID()();
  uint64_t v29 = type metadata accessor for UUID(0LL);
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v21, 1LL, v29);
  uint64_t v31 = v0[34];
  if ((_DWORD)EnumTagSinglePayload == 1)
  {
    outlined destroy of Any?(v0[34], &demangling cache variable for type metadata for UUID?);
    NSString v33 = 0LL;
  }

  else
  {
    UUID.uuidString.getter(EnumTagSinglePayload);
    uint64_t v35 = v34;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8LL))(v31, v29);
    NSString v33 = String._bridgeToObjectiveC()();
    uint64_t v32 = swift_bridgeObjectRelease(v35);
  }

  uint64_t v36 = v0[32];
  uint64_t v37 = v0[33];
  uint64_t v38 = v0[26];
  OUTLINED_FUNCTION_3_5(v32, "setClientLabel:");

  OUTLINED_FUNCTION_72(v39, &lazy cache variable for type metadata for LNEnvironment, &OBJC_CLASS___LNEnvironment_ptr);
  uint64_t v40 = *(void *)(v38 + 232);
  uint64_t v41 = *(void *)(v38 + 240);
  __swift_project_boxed_opaque_existential_1((void *)(v38 + 208), v40);
  uint64_t v42 = dispatch thunk of DeviceState.siriLocale.getter(v40, v41);
  uint64_t v43 = Locale.identifier.getter(v42);
  uint64_t v45 = v44;
  OUTLINED_FUNCTION_9_8(v37, *(uint64_t (**)(uint64_t, uint64_t))(v36 + 8));
  id v46 = LNEnvironment.__allocating_init(localeIdentifier:)(v43, v45);
  OUTLINED_FUNCTION_3_5((uint64_t)v46, "setEnvironment:");

  id v47 = [*(id *)(v38 + 24) systemProtocols];
  uint64_t v48 = OUTLINED_FUNCTION_72( (uint64_t)v47,  (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol,  &OBJC_CLASS___LNSystemProtocol_ptr);
  uint64_t v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v47, v48);
  v0[39] = v49;

  char v50 = (void *)swift_task_alloc(dword_2157DC);
  v0[40] = v50;
  *char v50 = v0;
  v50[1] = LinkRCHFlow.initializeLinkConnection(connection:);
  return static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:systemProtocols:)( v38 + 208,  v38 + 128,  v49);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 320));
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v1 = *(void **)(v0 + 304);
  id v11 = *(void *)(v0 + 296);
  uint64_t v12 = *(void *)(v0 + 272);
  unint64_t v13 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v10 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v4 = *(void **)(v0 + 200);
  uint64_t v5 = *(void *)(v0 + 208);
  uint64_t v6 = v4[3];
  os_log_type_t v7 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v6);
  (*(void (**)(void, void *, uint64_t, uint64_t))(v7 + 8))(*(void *)(v5 + 16), v1, v6, v7);
  *(void *)(v0 + 40) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Iterator);
  lazy protocol witness table accessor for type PromptForValueFlowAsync<LNValue> and conformance PromptForValueFlowAsync<A>( &lazy protocol witness table cache variable for type AsyncThrowingStream<LinkConnectionEvent, Error>.Iterator and conformance AsyncThrowingStream<A, B>.Iterator,  &demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Iterator);
  *(void *)(v0 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v8;
  __swift_allocate_boxed_opaque_existential_1((void *)(v0 + 16));
  AsyncThrowingStream.makeAsyncIterator()(v3);

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, v3);
  *(_BYTE *)(v0 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0;
  OUTLINED_FUNCTION_15_6(v5 + 48, v0 + 160);
  outlined assign with take of LinkRCHFlow.State(v0 + 16, (void *)(v5 + 48));
  swift_endAccess(v0 + 160);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v2);
  return OUTLINED_FUNCTION_3_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t implicit closure #2 in implicit closure #1 in LinkRCHFlow.execute()(char a1)
{
  return LinkRCHFlow.processDeviceUnlockResult(exitValue:)(a1 & 1);
}

uint64_t LinkRCHFlow.processDeviceUnlockResult(exitValue:)(char a1)
{
  uint64_t v3 = (void *)(v1 + 48);
  swift_beginAccess(v1 + 48, v16, 0LL, 0LL);
  outlined init with copy of LinkRCHFlow.State((void *)(v1 + 48), (uint64_t)v14);
  if (v15 == 1)
  {
    outlined init with take of AceServiceInvokerAsync(v14, (uint64_t)v17);
    if ((a1 & 1) != 0)
    {
      unint64_t v9 = lazy protocol witness table accessor for type LinkRCHFlowError and conformance LinkRCHFlowError();
      uint64_t v10 = swift_allocError(&type metadata for LinkRCHFlowError, v9, 0LL, 0LL);
      *id v11 = 0x64656B636F6C6E55LL;
      v11[1] = 0xEF64656C69616620LL;
      __swift_destroy_boxed_opaque_existential_1Tm(v17);
      *(void *)&v14[0] = v10;
      char v4 = 9;
    }

    else
    {
      outlined init with take of AceServiceInvokerAsync(v17, (uint64_t)v14);
      char v4 = 2;
    }

    char v15 = v4;
    swift_beginAccess(v3, v13, 33LL, 0LL);
    outlined assign with take of LinkRCHFlow.State((uint64_t)v14, v3);
    BOOL v8 = (__int128 *)v13;
  }

  else
  {
    outlined destroy of LinkRCHFlow.State(v14);
    unint64_t v5 = lazy protocol witness table accessor for type LinkRCHFlowError and conformance LinkRCHFlowError();
    uint64_t v6 = swift_allocError(&type metadata for LinkRCHFlowError, v5, 0LL, 0LL);
    *os_log_type_t v7 = 0xD00000000000001BLL;
    v7[1] = 0x8000000000195F40LL;
    *(void *)&v14[0] = v6;
    char v15 = 9;
    swift_beginAccess(v1 + 48, v17, 33LL, 0LL);
    outlined assign with take of LinkRCHFlow.State((uint64_t)v14, (void *)(v1 + 48));
    BOOL v8 = v17;
  }

  return swift_endAccess(v8);
}

uint64_t closure #1 in LinkRCHFlow.execute()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a2;
  return swift_task_switch(closure #1 in LinkRCHFlow.execute(), 0LL, 0LL);
}

uint64_t closure #1 in LinkRCHFlow.execute()()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v1, v2);
  char v4 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(void *)(v0 + 56) = v4;
  void *v4 = v0;
  v4[1] = closure #1 in LinkRCHFlow.execute();
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 16, v2, v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  OUTLINED_FUNCTION_50_0();
  uint64_t v3 = *(void *)(v2 + 56);
  void *v4 = *v1;
  *(void *)(v2 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v0;
  swift_task_dealloc(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  void *v3;
  uint64_t v4;
  char v5;
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(_BYTE *)(v0 + 32);
  uint64_t v3 = *(void **)v1;
  char v4 = *(void *)(v1 + 8);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)(v0 + 16);
  unint64_t v5 = *(_BYTE *)(v1 + 16);
  *(_BYTE *)(v1 + 16) = v2;
  outlined consume of LinkConnectionEvent?(v3, v4, v5);
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LinkRCHFlow.responseFrom(event:iterator:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  *(void *)(v6 + 15__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a5;
  *(void *)(v6 + outlined init with copy of AppShortcutInvoking(v0 + 128, v1 - 160) = v5;
  *(_BYTE *)(v6 + 57) = a4;
  *(void *)(v6 + 136) = a2;
  *(void *)(v6 + 14__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a3;
  *(void *)(v6 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a1;
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v7, v8, v9);
}

void LinkRCHFlow.responseFrom(event:iterator:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = OUTLINED_FUNCTION_48();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  *(void *)(v0 + 16__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v3;
  OUTLINED_FUNCTION_108_2();
  id v4 = OUTLINED_FUNCTION_108_2();
  uint64_t v5 = (os_log_s *)v3;
  Logger.logObject.getter(v4);
  os_log_type_t v6 = OUTLINED_FUNCTION_58();
  BOOL v7 = OUTLINED_FUNCTION_45_0(v6);
  char v8 = *(_BYTE *)(v0 + 57);
  uint64_t v10 = *(void **)(v0 + 136);
  uint64_t v9 = *(void *)(v0 + 144);
  if (v7)
  {
    id v11 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v12 = OUTLINED_FUNCTION_38(32LL);
    *(_DWORD *)id v11 = 136315138;
    uint64_t v17 = v12;
    *(void *)(v0 + 40) = v10;
    *(void *)(v0 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v9;
    *(_BYTE *)(v0 + 56) = v8;
    outlined copy of LinkConnectionEvent(v10, v9, v8);
    uint64_t v13 = String.init<A>(describing:)(v0 + 40, &type metadata for LinkConnectionEvent);
    unint64_t v15 = v14;
    *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v11 + 4);
    swift_bridgeObjectRelease(v15);
    OUTLINED_FUNCTION_61_17();
    OUTLINED_FUNCTION_31_2(&dword_0, v5, (os_log_type_t)v1, "#LinkRCHFlow recieved LinkConnectionEvent: %s", v11);
    OUTLINED_FUNCTION_30_3(v12, v16, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v12);
    OUTLINED_FUNCTION_1_0((uint64_t)v11);
  }

  else
  {
    OUTLINED_FUNCTION_61_17();
  }

  __asm { BR              X10 }

uint64_t LinkRCHFlow.responseFrom(event:iterator:)()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 184LL);
  *(void *)(*(void *)v1 + 20_swift_stdlib_reportUnimplementedInitializer("SiriLinkFlowPlugin.SiriStateObserver", 36LL, "init()", 6LL, 0LL) = v0;
  swift_task_dealloc(v2);
  if (!v0)
  {
    swift_bridgeObjectRelease(0LL);
    OUTLINED_FUNCTION_12_5();
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_0_0();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v1 = v0;
  uint64_t v2 = v0[8];
  v0[12] = v2;
  uint64_t v3 = (uint64_t)(v0 + 12);
  id v4 = (os_log_s *)v0[21];
  uint64_t v5 = v0[9];
  v0[13] = v5;
  os_log_type_t v6 = OUTLINED_FUNCTION_118_3();
  Logger.logObject.getter(v6);
  BOOL v7 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_146_0(v4))
  {
    uint64_t v22 = v0[24];
    char v8 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v9 = OUTLINED_FUNCTION_38(32LL);
    *(_DWORD *)char v8 = 136315138;
    id v23 = v9;
    v0[10] = v2;
    v0[11] = v5;
    OUTLINED_FUNCTION_5_14();
    uint64_t v10 = String.init<A>(describing:)(v0 + 10, v22);
    uint64_t v12 = v11;
    v1[14] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 14, v1 + 15, v8 + 4);
    swift_bridgeObjectRelease(v12);
    OUTLINED_FUNCTION_46();
    OUTLINED_FUNCTION_31_2(&dword_0, v4, v7, "#LinkRCHFlow retrieved session id: %s", v8);
    OUTLINED_FUNCTION_30_3(v9, v13, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v9);
    OUTLINED_FUNCTION_1_0((uint64_t)v8);
  }

  else
  {
    OUTLINED_FUNCTION_46();
  }

  unint64_t v14 = v1[22];
  unint64_t v15 = v1[20];
  uint64_t v17 = (void *)v1[17];
  uint64_t v16 = v1[18];
  unint64_t v18 = *(void *)(v15 + 32);
  OUTLINED_FUNCTION_30_12(v3, (uint64_t)(v1 + 2), 0LL);
  (*(void (**)(uint64_t, void *, void, void))(*(void *)v18 + 192LL))(v14, v17, v1[12], v1[13]);
  OUTLINED_FUNCTION_28_4();
  uint64_t v19 = OUTLINED_FUNCTION_19((uint64_t)&unk_1F8170, 32LL);
  *(void *)(v19 + 16) = v15;
  *(void *)(v19 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v17;
  outlined copy of LinkConnectionEvent(v17, v16, 6);
  uint64_t v20 = swift_retain(v15);
  OUTLINED_FUNCTION_95_4(v20, (uint64_t)partial apply for closure #2 in LinkRCHFlow.responseFrom(event:iterator:));
  outlined consume of LinkConnectionEvent(v17, v16, 6);
  OUTLINED_FUNCTION_128_0();
  OUTLINED_FUNCTION_12_5();
  return OUTLINED_FUNCTION_8_0((uint64_t (*)(void))v1[1]);
}

{
  os_log_type_t v0;
  uint64_t v1;
  uint8_t *v2;
  os_log_s *v3;
  uint64_t v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v3 = *(os_log_s **)(v1 + 168);
  id v4 = swift_release();
  Logger.logObject.getter(v4);
  uint64_t v5 = OUTLINED_FUNCTION_58();
  os_log_type_t v6 = OUTLINED_FUNCTION_31_0(v5);
  BOOL v7 = *(void *)(v1 + 200);
  if (v6)
  {
    char v8 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    OUTLINED_FUNCTION_43_5(v8);
    OUTLINED_FUNCTION_47_1(&dword_0, v3, v0, "#LinkRCHFlow unable to get sessionId before time out", v2);
    OUTLINED_FUNCTION_1_0((uint64_t)v2);
  }

  swift_errorRelease(v7);

  uint64_t v9 = *(void *)(v1 + 176);
  uint64_t v10 = *(void *)(v1 + 160);
  uint64_t v12 = *(void **)(v1 + 136);
  id v11 = *(void *)(v1 + 144);
  uint64_t v13 = *(void *)(v10 + 32);
  OUTLINED_FUNCTION_30_12(v1 + 96, v1 + 16, 0LL);
  (*(void (**)(uint64_t, void *, void, void))(*(void *)v13 + 192LL))( v9,  v12,  *(void *)(v1 + 96),  *(void *)(v1 + 104));
  OUTLINED_FUNCTION_28_4();
  unint64_t v14 = OUTLINED_FUNCTION_19((uint64_t)&unk_1F8170, 32LL);
  *(void *)(v14 + 16) = v10;
  *(void *)(v14 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v12;
  outlined copy of LinkConnectionEvent(v12, v11, 6);
  unint64_t v15 = OUTLINED_FUNCTION_59_9();
  OUTLINED_FUNCTION_95_4(v15, (uint64_t)partial apply for closure #2 in LinkRCHFlow.responseFrom(event:iterator:));
  outlined consume of LinkConnectionEvent(v12, v11, 6);
  OUTLINED_FUNCTION_128_0();
  OUTLINED_FUNCTION_12_5();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t closure #3 in LinkRCHFlow.execute()(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  v8[0] = a3;
  char v9 = a4;
  uint64_t v5 = (void *)(a2 + 48);
  OUTLINED_FUNCTION_15_6(a2 + 48, (uint64_t)v7);
  swift_errorRetain(a3);
  outlined assign with take of LinkRCHFlow.State((uint64_t)v8, v5);
  return swift_endAccess(v7);
}

void LinkRCHFlow.createNeedsDisambiguationFlow(request:iterator:selectedValues:)()
{
  id v52 = v0;
  uint64_t v57 = v4;
  uint64_t v58 = v3;
  uint64_t v6 = OUTLINED_FUNCTION_50_16(v5);
  uint64_t v55 = *(void *)(v6 - 8);
  uint64_t v56 = v6;
  OUTLINED_FUNCTION_91();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v51 - v11;
  uint64_t v13 = OUTLINED_FUNCTION_33_16();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v16 = __chkstk_darwin(v13);
  OUTLINED_FUNCTION_23_24(v16, v17, v18, v19, v20, v21, v22, v23, (uint64_t)v51);
  __chkstk_darwin(v24);
  OUTLINED_FUNCTION_99_1();
  id v26 = OUTLINED_FUNCTION_70_10(v25, "parameterName");
  OUTLINED_FUNCTION_29((uint64_t)v26);
  OUTLINED_FUNCTION_80_6();
  int v27 = OUTLINED_FUNCTION_119_2();
  static InstrumentationUtils.emitActionParameterDisambiguationStartedInstrumentation(parameterName:)( v27,  v28,  v29,  v30,  v31,  v32,  v33,  v34,  v51,  v52,  v53,  (uint64_t)v54,  v55,  v56,  v57,  v58,  (uint64_t)v59,  v60,  (uint64_t)v61,  v62,  v63[0],  v63[1],  v63[2],  v64[0]);
  OUTLINED_FUNCTION_28_4();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v35 = __swift_project_value_buffer(v13, (uint64_t)static Signposter.voiceCommands);
  uint64_t v54 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v36 = v54(v0, v35, v13);
  uint64_t v37 = OSSignposter.logHandle.getter(v36);
  OSSignpostID.init(log:)(v37);
  OUTLINED_FUNCTION_113_2();
  OUTLINED_FUNCTION_124_2();
  if ((OUTLINED_FUNCTION_68_10() & 1) != 0)
  {
    uint64_t v38 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)uint64_t v38 = 0;
    os_signpost_id_t v39 = OSSignpostID.rawValue.getter(v38);
    _os_signpost_emit_with_name_impl(&dword_0, v2, v1, v39, "LinkRCHFlowNeedsDisambiguation", "", v38, 2u);
    OUTLINED_FUNCTION_1_0((uint64_t)v38);
  }

  uint64_t v41 = v55;
  uint64_t v40 = v56;
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v10, v12, v56);
  uint64_t v42 = OUTLINED_FUNCTION_84_8();
  OUTLINED_FUNCTION_51(v42);
  uint64_t v53 = OSSignpostIntervalState.init(id:isOpen:)(v10, 1LL);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v12, v40);
  id v43 = v52;
  uint64_t v44 = v59;
  uint64_t v57 = (*(uint64_t (**)(void, void *, uint64_t))(**((void **)v52 + 4) + 176LL))( *((void *)v52 + 2),  v59,  v57);
  uint64_t v45 = v58;
  OUTLINED_FUNCTION_96_2(v57, (uint64_t)v64);
  char v65 = 3;
  OUTLINED_FUNCTION_15_6((uint64_t)v43 + 48, (uint64_t)v63);
  OUTLINED_FUNCTION_26_22();
  OUTLINED_FUNCTION_24_21();
  uint64_t v46 = v54(v61, v62, v13);
  OUTLINED_FUNCTION_96_2(v46, (uint64_t)v64);
  OUTLINED_FUNCTION_21_21();
  uint64_t v49 = swift_allocObject(&unk_1F8198, v47, v48);
  uint64_t v50 = OUTLINED_FUNCTION_76_6(v49 + v45, (uint64_t)v61, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 32));
  *(void *)((char *)v2 + v4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 9) = v53;
  *(void *)(v49 + v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 15) = v43;
  OUTLINED_FUNCTION_27_21(v50, (uint64_t)&v12[v49]);
  OUTLINED_FUNCTION_59_9();
  OUTLINED_FUNCTION_40_20( (uint64_t)v44,  (uint64_t)partial apply for closure #1 in LinkRCHFlow.createNeedsDisambiguationFlow(request:iterator:selectedValues:));
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_45_5();
  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_9_8(v62, *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
  OUTLINED_FUNCTION_24_0();
}

void LinkRCHFlow.createNeedsConfirmationFlow(request:iterator:)()
{
  uint64_t v9 = v1;
  uint64_t v59 = v10;
  uint64_t v12 = OUTLINED_FUNCTION_50_16(v11);
  uint64_t v57 = *(void *)(v12 - 8);
  uint64_t v58 = v12;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_52_9();
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_18_25();
  OUTLINED_FUNCTION_127_2();
  uint64_t v16 = __chkstk_darwin(v15);
  OUTLINED_FUNCTION_23_24(v16, v17, v18, v19, v20, v21, v22, v23, v51);
  __chkstk_darwin(v24);
  OUTLINED_FUNCTION_99_1();
  id v26 = OUTLINED_FUNCTION_70_10(v25, "parameterName");
  OUTLINED_FUNCTION_29((uint64_t)v26);
  OUTLINED_FUNCTION_80_6();
  int v27 = OUTLINED_FUNCTION_119_2();
  static InstrumentationUtils.emitActionParameterConfirmationStartedInstrumentation(parameterName:)( v27,  v28,  v29,  v30,  v31,  v32,  v33,  v34,  v52,  v53,  v55,  v57,  v58,  v59,  v60,  v62,  v63,  v65,  v67[0],  v67[1],  v67[2],  v67[3],  v67[4],  v67[5]);
  uint64_t v35 = OUTLINED_FUNCTION_28_4();
  if (one-time initialization token for voiceCommands != -1) {
    uint64_t v35 = swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
  }
  uint64_t v36 = OUTLINED_FUNCTION_120_2(v35, (uint64_t)static Signposter.voiceCommands);
  uint64_t v56 = v37;
  uint64_t v38 = ((uint64_t (*)(uint64_t))v37)(v36);
  OSSignposter.logHandle.getter(v38);
  OUTLINED_FUNCTION_92_3();
  OUTLINED_FUNCTION_113_2();
  OUTLINED_FUNCTION_124_2();
  if ((OUTLINED_FUNCTION_68_10() & 1) != 0)
  {
    os_signpost_id_t v39 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    os_signpost_id_t v40 = OUTLINED_FUNCTION_38_19(v39);
    OUTLINED_FUNCTION_73_9(&dword_0, v6, v2, v40, "LinkRCHFlowNeedsConfirmation", "");
    uint64_t v41 = v8;
    uint64_t v8 = v3;
    OUTLINED_FUNCTION_1_0(v41);
  }

  OUTLINED_FUNCTION_89_7();
  uint64_t v42 = OUTLINED_FUNCTION_84_8();
  OUTLINED_FUNCTION_51(v42);
  uint64_t v54 = OUTLINED_FUNCTION_32_17();
  OUTLINED_FUNCTION_110_3();
  uint64_t v43 = OUTLINED_FUNCTION_101_2();
  uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 160))(v43, v61);
  OUTLINED_FUNCTION_88_7(v45);
  char v68 = 3;
  uint64_t v46 = v1 + 48;
  OUTLINED_FUNCTION_15_6(v9 + 48, (uint64_t)v67);
  OUTLINED_FUNCTION_26_22();
  OUTLINED_FUNCTION_24_21();
  v56(v64, v66, v4);
  OUTLINED_FUNCTION_142_1();
  OUTLINED_FUNCTION_13_22();
  uint64_t v49 = swift_allocObject(&unk_1F81C0, v47, v48);
  uint64_t v50 = OUTLINED_FUNCTION_65_9(v49);
  *(void *)((char *)v6 + v46) = v54;
  *(void *)(v46 + OUTLINED_FUNCTION_12_15(v5, v6, v7) = v9;
  OUTLINED_FUNCTION_27_21(v50, v46 + v5);
  OUTLINED_FUNCTION_59_9();
  OUTLINED_FUNCTION_40_20( (uint64_t)v0,  (uint64_t)partial apply for closure #1 in LinkRCHFlow.createNeedsConfirmationFlow(request:iterator:));
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_45_5();
  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_9_8(v66, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  OUTLINED_FUNCTION_24_0();
}

void LinkRCHFlow.createNeedsValueFlow(request:iterator:selectedValues:)()
{
  uint64_t v93 = v3;
  uint64_t v94 = v4;
  uint64_t v5 = v1;
  uint64_t v86 = v6;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v80 = OUTLINED_FUNCTION_54_20();
  uint64_t v11 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  OUTLINED_FUNCTION_52_9();
  __chkstk_darwin(v12);
  uint64_t v88 = (uint8_t *)OUTLINED_FUNCTION_18_25();
  uint64_t v84 = *((void *)v88 - 1);
  uint64_t v13 = *(void *)(v84 + 64);
  __chkstk_darwin(v88);
  OUTLINED_FUNCTION_121_2();
  uint64_t v81 = v14;
  __chkstk_darwin(v15);
  uint64_t v87 = (uint64_t)&v78 - v16;
  uint64_t v17 = *(void *)(v5 + 24);
  id v89 = v8;
  uint64_t v18 = LNActionMetadata.firstParameterMetadata(from:)(v8);
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v82 = v5;
    uint64_t v83 = v10;
    id v20 = [v18 valueType];
    if (v20
      && (uint64_t v21 = v20,
          uint64_t v22 = objc_opt_self(&OBJC_CLASS___LNArrayValueType),
          uint64_t v23 = OUTLINED_FUNCTION_10_12(v22),
          v21,
          v23))
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v24 = OUTLINED_FUNCTION_48();
      OUTLINED_FUNCTION_84(v24, (uint64_t)static Logger.voiceCommands);
      os_log_type_t v25 = OUTLINED_FUNCTION_164();
      BOOL v26 = OUTLINED_FUNCTION_40(v25);
      uint64_t v27 = v82;
      if (v26)
      {
        int v28 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
        OUTLINED_FUNCTION_26_1(v28);
        OUTLINED_FUNCTION_27( &dword_0,  v29,  v30,  "#LinkRCHFlow LNNeedsValueRequest has parameter value type LNArrayValueType, punching out to Shortcuts jr");
        OUTLINED_FUNCTION_1_0(v17);
      }

      id v31 = [(id)objc_opt_self(NSError) wfSiriExecutionRequiresShortcutsJrError];
      *(void *)&v91[0] = v31;
      char v92 = 8;
      OUTLINED_FUNCTION_15_6(v27 + 48, (uint64_t)v90);
      id v32 = v31;
      OUTLINED_FUNCTION_26_22();
      uint64_t v33 = OUTLINED_FUNCTION_24_21();
      static ExecuteResponse.complete()(v33);
    }

    else
    {
      id v85 = v19;
      id v34 = [v85 valueType];
      uint64_t v35 = objc_opt_self(&OBJC_CLASS___LNLinkEnumerationValueType);
      uint64_t v36 = OUTLINED_FUNCTION_10_12(v35);

      if (v36)
      {
        LinkRCHFlow.createDismbiguatingNeedsValueFlow(request:actionParameterMetadata:iterator:selectedValues:)();
        OUTLINED_FUNCTION_149_1();

        return;
      }

      id v46 = [v89 parameterName];
      int v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v49 = v48;

      static InstrumentationUtils.emitPromptForValueStartedInstrumentation(parameterName:)( v47,  v49,  v50,  v51,  v52,  v53,  v54,  v55,  v78,  v79,  v80,  v81,  v82,  v83,  v84,  (uint64_t)v85,  v86,  v87,  (uint64_t)v88,  (uint64_t)v89,  v90[0],  v90[1],  v90[2],  *(uint64_t *)&v91[0]);
      swift_bridgeObjectRelease(v49);
      uint64_t v56 = v82;
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v57 = v88;
      uint64_t v58 = __swift_project_value_buffer((uint64_t)v88, (uint64_t)static Signposter.voiceCommands);
      id v79 = *(id *)(v84 + 16);
      uint64_t v59 = ((uint64_t (*)(uint64_t, uint64_t, uint8_t *))v79)(v87, v58, v57);
      OSSignposter.logHandle.getter(v59);
      uint64_t v60 = OUTLINED_FUNCTION_92_3();
      uint64_t v61 = (os_log_s *)OSSignposter.logHandle.getter(v60);
      os_signpost_type_t v62 = static os_signpost_type_t.begin.getter();
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        uint64_t v57 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
        *(_WORD *)uint64_t v57 = 0;
        os_signpost_id_t v63 = OSSignpostID.rawValue.getter(v57);
        _os_signpost_emit_with_name_impl(&dword_0, v61, v62, v63, "LinkRCHFlowNeedsValue", "", v57, 2u);
        OUTLINED_FUNCTION_1_0((uint64_t)v57);
      }

      OUTLINED_FUNCTION_140_1(v2, (uint64_t)v0, *(uint64_t (**)(uint64_t, uint64_t, void))(v11 + 16));
      uint64_t v64 = OUTLINED_FUNCTION_84_8();
      OUTLINED_FUNCTION_51(v64);
      id v78 = (id)OUTLINED_FUNCTION_32_17();
      (*(void (**)(void *, uint8_t *))(v11 + 8))(v0, v57);
      uint64_t v80 = (*(uint64_t (**)(void, id, uint64_t))(**(void **)(v56 + 32) + 144LL))( *(void *)(v56 + 16),  v89,  v17);
      OUTLINED_FUNCTION_96_2(v80, (uint64_t)v91);
      char v92 = 3;
      OUTLINED_FUNCTION_15_6(v56 + 48, (uint64_t)v90);
      OUTLINED_FUNCTION_26_22();
      OUTLINED_FUNCTION_24_21();
      uint64_t v65 = v56;
      uint64_t v66 = v81;
      uint64_t v67 = ((uint64_t (*)(uint64_t, uint64_t, uint8_t *))v79)(v81, v87, v88);
      OUTLINED_FUNCTION_96_2(v67, (uint64_t)v91);
      uint64_t v68 = v84;
      uint64_t v69 = *(unsigned __int8 *)(v84 + 80);
      uint64_t v70 = (v69 + 16) & ~v69;
      unint64_t v71 = (v13 + v70 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v72 = (v71 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v73 = (v72 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v74 = (v73 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v75 = swift_allocObject(&unk_1F81E8, v74 + 40, v69 | 7);
      uint64_t v76 = (uint64_t)v88;
      (*(void (**)(uint64_t, uint64_t, uint8_t *))(v68 + 32))(v75 + v70, v66, v88);
      *(void *)(v75 + v71) = v78;
      *(void *)(v75 + v7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v65;
      id v77 = v89;
      *(void *)(v75 + v7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 3) = v89;
      outlined init with take of AceServiceInvokerAsync(v91, v75 + v74);
      OUTLINED_FUNCTION_14_8();
      OUTLINED_FUNCTION_10_6();
      OUTLINED_FUNCTION_138_1( (uint64_t)v77,  (uint64_t)partial apply for closure #1 in LinkRCHFlow.createNeedsValueFlow(request:iterator:selectedValues:));
      OUTLINED_FUNCTION_61();
      OUTLINED_FUNCTION_34_0();
      OUTLINED_FUNCTION_12_5();
      OUTLINED_FUNCTION_149_1();
      OUTLINED_FUNCTION_149_1();
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v87, v76);
    }
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v37 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v37, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v38 = OUTLINED_FUNCTION_54_8();
    if (OUTLINED_FUNCTION_40(v38))
    {
      os_signpost_id_t v39 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_26_1(v39);
      OUTLINED_FUNCTION_27( &dword_0,  v40,  v41,  "#LinkRCHFlow Could not find matching parameter data for LNNeedsValueRequest");
      OUTLINED_FUNCTION_1_0(v17);
    }

    unint64_t v42 = lazy protocol witness table accessor for type LinkRCHFlowError and conformance LinkRCHFlowError();
    uint64_t v43 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for LinkRCHFlowError, v42);
    OUTLINED_FUNCTION_75_9(v43, v44, 0xD00000000000001CLL);
    OUTLINED_FUNCTION_15_6(v5 + 48, (uint64_t)v90);
    OUTLINED_FUNCTION_57_15();
    uint64_t v45 = OUTLINED_FUNCTION_24_21();
    static ExecuteResponse.complete()(v45);
  }

  OUTLINED_FUNCTION_24_0();
}

void LinkRCHFlow.createNeedsActionConfirmationFlow(request:iterator:)()
{
  uint64_t v3 = v1;
  uint64_t v5 = v4;
  int v52 = (void *)v6;
  uint64_t v54 = v7;
  uint64_t v8 = OUTLINED_FUNCTION_54_20();
  uint64_t v50 = *(void *)(v8 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_52_9();
  __chkstk_darwin(v10);
  uint64_t v11 = OUTLINED_FUNCTION_18_25();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_121_2();
  uint64_t v51 = v14;
  int v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v46 - v17;
  static InstrumentationUtils.emitActionConfirmationStartedInstrumentation()( v16,  v19,  v20,  v21,  v22,  v23,  v24,  v25,  v46,  v47,  v48,  (uint64_t)v49,  v50,  v51,  (uint64_t)v52,  v53,  v54,  v55,  v56[0],  v56[1],  v56[2],  v56[3],  v56[4],  v56[5]);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v26 = __swift_project_value_buffer(v11, (uint64_t)static Signposter.voiceCommands);
  uint64_t v53 = v12;
  uint64_t v27 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 16);
  uint64_t v55 = v11;
  uint64_t v49 = v27;
  uint64_t v28 = ((uint64_t (*)(char *, uint64_t, uint64_t))v27)(v18, v26, v11);
  OSSignposter.logHandle.getter(v28);
  uint64_t v29 = OUTLINED_FUNCTION_92_3();
  uint64_t v30 = (os_log_s *)OSSignposter.logHandle.getter(v29);
  uint64_t v31 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    id v32 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    uint64_t v48 = v8;
    os_signpost_id_t v33 = OUTLINED_FUNCTION_38_19(v32);
    OUTLINED_FUNCTION_73_9(&dword_0, v30, (os_signpost_type_t)v31, v33, "LinkRCHFlowNeedsActionConfirmation", "");
    uint64_t v34 = (uint64_t)v18;
    uint64_t v18 = v5;
    OUTLINED_FUNCTION_1_0(v34);
  }

  id v47 = v18;

  uint64_t v35 = v50;
  OUTLINED_FUNCTION_76_6(v2, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 16));
  uint64_t v36 = OUTLINED_FUNCTION_84_8();
  OUTLINED_FUNCTION_51(v36);
  uint64_t v48 = OUTLINED_FUNCTION_32_17();
  OUTLINED_FUNCTION_9_8(v0, *(uint64_t (**)(uint64_t, uint64_t))(v35 + 8));
  uint64_t v37 = OUTLINED_FUNCTION_101_2();
  os_signpost_id_t v39 = v52;
  uint64_t v50 = (*(uint64_t (**)(uint64_t, void *))(v38 + 168))(v37, v52);
  OUTLINED_FUNCTION_141_1();
  char v57 = 3;
  OUTLINED_FUNCTION_15_6(v3 + 48, (uint64_t)v56);
  OUTLINED_FUNCTION_26_22();
  OUTLINED_FUNCTION_24_21();
  uint64_t v40 = v51;
  v49(v51, v18, v55);
  OUTLINED_FUNCTION_141_1();
  uint64_t v41 = v53;
  OUTLINED_FUNCTION_21_21();
  uint64_t v44 = swift_allocObject(&unk_1F8210, v42, v43);
  uint64_t v45 = OUTLINED_FUNCTION_76_6(v44 + v35, v40, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 32));
  *(void *)(v44 + v31) = v48;
  *(void *)(v44 + v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 13) = v3;
  OUTLINED_FUNCTION_27_21(v45, (uint64_t)&v18[v44]);
  OUTLINED_FUNCTION_59_9();
  OUTLINED_FUNCTION_138_1( (uint64_t)v39,  (uint64_t)partial apply for closure #1 in LinkRCHFlow.createNeedsActionConfirmationFlow(request:iterator:));
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_9_8((uint64_t)v47, *(uint64_t (**)(uint64_t, uint64_t))(v41 + 8));
  OUTLINED_FUNCTION_24_0();
}

uint64_t LinkRCHFlow.createContinueInAppFlow(request:iterator:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (*(uint64_t (**)(void, void *, void))(**(void **)(v1 + 32) + 184LL))( *(void *)(v1 + 16),  a1,  *(void *)(v1 + 24));
  OUTLINED_FUNCTION_100_2(v4, (uint64_t)v10);
  char v11 = 3;
  OUTLINED_FUNCTION_15_6(v2 + 48, (uint64_t)v9);
  outlined assign with take of LinkRCHFlow.State((uint64_t)v10, (void *)(v2 + 48));
  uint64_t v5 = swift_endAccess(v9);
  OUTLINED_FUNCTION_100_2(v5, (uint64_t)v10);
  uint64_t v6 = OUTLINED_FUNCTION_19((uint64_t)&unk_1F8238, 72LL);
  *(void *)(v6 + 16) = v2;
  outlined init with take of AceServiceInvokerAsync(v10, v6 + 24);
  *(void *)(v6 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a1;
  swift_retain(v2);
  id v7 = a1;
  static ExecuteResponse.ongoing<A>(next:childCompletion:)( v4,  partial apply for closure #1 in LinkRCHFlow.createContinueInAppFlow(request:iterator:),  v6);
  OUTLINED_FUNCTION_12_5();
  return swift_release();
}

uint64_t closure #1 in LinkRCHFlow.responseFrom(event:iterator:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a2;
  return swift_task_switch(closure #1 in LinkRCHFlow.responseFrom(event:iterator:), 0LL, 0LL);
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 32);
  *(void *)(v3 + 40) = a1;
  *(void *)(v3 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a2;
  swift_task_dealloc(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t closure #1 in LinkRCHFlow.responseFrom(event:iterator:)()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 40LL);
  if (v1)
  {
    uint64_t v2 = *(int **)(*(void *)v1 + 96LL);
    uint64_t v6 = (uint64_t (*)(void))((char *)v2 + *v2);
    uint64_t v3 = (void *)swift_task_alloc(v2[1]);
    *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v3;
    *uint64_t v3 = v0;
    v3[1] = closure #1 in LinkRCHFlow.responseFrom(event:iterator:);
    return OUTLINED_FUNCTION_27_2(v6);
  }

  else
  {
    uint64_t v5 = *(void **)(v0 + 16);
    *uint64_t v5 = 0LL;
    v5[1] = 0LL;
    return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
  }

{
  uint64_t v0;
  *(_OWORD *)*(void *)(v0 + 16) = *(_OWORD *)(v0 + 40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in LinkRCHFlow.responseFrom(event:iterator:)(uint64_t a1, void *a2)
{
  id v7 = a2;
  char v8 = 11;
  uint64_t v3 = (void *)(a1 + 48);
  swift_beginAccess(a1 + 48, v6, 33LL, 0LL);
  id v4 = a2;
  outlined assign with take of LinkRCHFlow.State((uint64_t)&v7, v3);
  return swift_endAccess(v6);
}

uint64_t LinkRCHFlow.runAppProtectionCheckFlow(completionHandler:iterator:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v18 = 1LL;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  char v22 = 12;
  char v8 = (void *)(v3 + 48);
  swift_beginAccess(v8, v17, 33LL, 0LL);
  outlined assign with take of LinkRCHFlow.State((uint64_t)&v18, v8);
  swift_endAccess(v17);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
  char v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_0, v11, v12, "#LinkRCHFlow runAppProtectionCheckFlow - resolving...", v13, 2u);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(v4 + 32) + 200LL))();
  outlined init with copy of AppShortcutInvoking(a3, (uint64_t)&v18);
  uint64_t v15 = (void *)swift_allocObject(&unk_1F8438, 80LL, 7LL);
  void v15[2] = v4;
  outlined init with take of AceServiceInvokerAsync((__int128 *)&v18, (uint64_t)(v15 + 3));
  v15[8] = a1;
  v15[9] = a2;
  swift_retain(v4);
  swift_retain(a2);
  static ExecuteResponse.ongoing<A>(next:childCompletion:)( v14,  partial apply for closure #1 in LinkRCHFlow.runAppProtectionCheckFlow(completionHandler:iterator:),  v15);
  swift_release();
  return swift_release();
}

void LinkRCHFlow.createDismbiguatingNeedsValueFlow(request:actionParameterMetadata:iterator:selectedValues:)()
{
  uint64_t v9 = v1;
  uint64_t v62 = v11;
  uint64_t v63 = v10;
  uint64_t v61 = v12;
  uint64_t v14 = OUTLINED_FUNCTION_50_16(v13);
  uint64_t v59 = *(void *)(v14 - 8);
  uint64_t v60 = v14;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_52_9();
  __chkstk_darwin(v16);
  OUTLINED_FUNCTION_18_25();
  OUTLINED_FUNCTION_127_2();
  uint64_t v18 = __chkstk_darwin(v17);
  OUTLINED_FUNCTION_23_24(v18, v19, v20, v21, v22, v23, v24, v25, v53);
  __chkstk_darwin(v26);
  OUTLINED_FUNCTION_99_1();
  id v28 = OUTLINED_FUNCTION_70_10(v27, "parameterName");
  OUTLINED_FUNCTION_29((uint64_t)v28);
  OUTLINED_FUNCTION_80_6();
  int v29 = OUTLINED_FUNCTION_119_2();
  static InstrumentationUtils.emitPromptForValueStartedInstrumentation(parameterName:)( v29,  v30,  v31,  v32,  v33,  v34,  v35,  v36,  v54,  v55,  v57,  v59,  v60,  v61,  v62,  v63,  v64,  v66,  v67,  v69,  v71[0],  v71[1],  v71[2],  v71[3]);
  uint64_t v37 = OUTLINED_FUNCTION_28_4();
  if (one-time initialization token for voiceCommands != -1) {
    uint64_t v37 = swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
  }
  uint64_t v38 = OUTLINED_FUNCTION_120_2(v37, (uint64_t)static Signposter.voiceCommands);
  uint64_t v58 = v39;
  uint64_t v40 = ((uint64_t (*)(uint64_t))v39)(v38);
  OSSignposter.logHandle.getter(v40);
  OUTLINED_FUNCTION_92_3();
  OUTLINED_FUNCTION_113_2();
  OUTLINED_FUNCTION_124_2();
  if ((OUTLINED_FUNCTION_68_10() & 1) != 0)
  {
    uint64_t v41 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    os_signpost_id_t v42 = OUTLINED_FUNCTION_38_19(v41);
    OUTLINED_FUNCTION_73_9(&dword_0, v6, v2, v42, "LinkRCHFlowNeedsValue", "");
    uint64_t v43 = v8;
    uint64_t v8 = v3;
    OUTLINED_FUNCTION_1_0(v43);
  }

  OUTLINED_FUNCTION_89_7();
  uint64_t v44 = OUTLINED_FUNCTION_84_8();
  OUTLINED_FUNCTION_51(v44);
  uint64_t v56 = OUTLINED_FUNCTION_32_17();
  OUTLINED_FUNCTION_110_3();
  uint64_t v45 = OUTLINED_FUNCTION_101_2();
  uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 152))(v45, v65);
  OUTLINED_FUNCTION_88_7(v47);
  char v72 = 3;
  uint64_t v48 = v1 + 48;
  OUTLINED_FUNCTION_15_6(v9 + 48, (uint64_t)v71);
  OUTLINED_FUNCTION_26_22();
  OUTLINED_FUNCTION_24_21();
  v58(v68, v70, v4);
  OUTLINED_FUNCTION_142_1();
  OUTLINED_FUNCTION_13_22();
  uint64_t v51 = swift_allocObject(&unk_1F8260, v49, v50);
  uint64_t v52 = OUTLINED_FUNCTION_65_9(v51);
  *(void *)((char *)v6 + v4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v56;
  *(void *)(v48 + OUTLINED_FUNCTION_12_15(v5, v6, v7) = v9;
  OUTLINED_FUNCTION_27_21(v52, v48 + v5);
  OUTLINED_FUNCTION_59_9();
  OUTLINED_FUNCTION_40_20( (uint64_t)v0,  (uint64_t)partial apply for closure #1 in LinkRCHFlow.createDismbiguatingNeedsValueFlow(request:actionParameterMetadata:iterator:selectedValues:));
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_45_5();
  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_9_8(v70, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  OUTLINED_FUNCTION_24_0();
}

uint64_t closure #1 in LinkRCHFlow.createNeedsValueFlow(request:iterator:selectedValues:)( uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v113 = a6;
  id v114 = a5;
  uint64_t v115 = a4;
  uint64_t v116 = a2;
  uint64_t v117 = a3;
  uint64_t v111 = type metadata accessor for OSSignpostError(0LL);
  uint64_t v110 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  uint64_t v109 = (uint64_t)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v119 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v8 = *(void (***)(uint64_t, char *, uint64_t))(v119 - 8);
  uint64_t v9 = __chkstk_darwin(v119);
  uint64_t v112 = (uint64_t)&v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v105 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<LNValue>);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v105 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v123 = (char *)&v105 - v19;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v105 - v20;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v22 = type metadata accessor for Logger(0LL);
  uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.voiceCommands);
  uint64_t v124 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v24 = v124(v21, a1, v13);
  uint64_t v108 = v23;
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v120 = v14;
  uint64_t v121 = v17;
  uint64_t v118 = v12;
  if (v27)
  {
    id v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v29 = swift_slowAlloc(32LL, -1LL);
    uint64_t v106 = v8;
    uint64_t v30 = v29;
    v127[0] = v29;
    *(_DWORD *)id v28 = 136315138;
    lazy protocol witness table accessor for type PromptForValueFlowAsync<LNValue> and conformance PromptForValueFlowAsync<A>( &lazy protocol witness table cache variable for type PromptResult<LNValue> and conformance PromptResult<A>,  &demangling cache variable for type metadata for PromptResult<LNValue>);
    uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter(v13, v31);
    unint64_t v34 = v33;
    uint64_t v125 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v127);
    uint64_t v12 = v118;
    uint64_t v14 = v120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v28 + 4);
    swift_bridgeObjectRelease(v34);
    unint64_t v122 = *(void (**)(char *, uint64_t))(v14 + 8);
    v122(v21, v13);
    _os_log_impl(&dword_0, v25, v26, "PromptForConfirmationFlow.createNeedsValueFlow received %s", v28, 0xCu);
    swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v35 = v30;
    uint64_t v8 = v106;
    swift_slowDealloc(v35, -1LL, -1LL);
    int v36 = v28;
    uint64_t v17 = v121;
    swift_slowDealloc(v36, -1LL, -1LL);
  }

  else
  {
    unint64_t v122 = *(void (**)(char *, uint64_t))(v14 + 8);
    v122(v21, v13);
  }

  uint64_t v37 = v123;
  uint64_t v38 = v124(v123, a1, v13);
  os_signpost_id_t v39 = (os_log_s *)OSSignposter.logHandle.getter(v38);
  uint64_t v40 = v117;
  uint64_t v41 = OSSignpostIntervalState.signpostID.getter();
  LODWORD(v116) = static os_signpost_type_t.end.getter(v41);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    uint64_t v42 = swift_retain(v40);
    uint64_t v43 = v109;
    checkForErrorAndConsumeState(state:)(v42);
    swift_release();
    uint64_t v44 = v110;
    uint64_t v45 = v111;
    int v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v110 + 88))(v43, v111);
    uint64_t v107 = a1;
    if (v46 == enum case for OSSignpostError.doubleEnd(_:))
    {
      char v48 = 0;
      char v47 = 0;
      uint64_t v117 = "[Error] Interval already ended";
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
      uint64_t v117 = "exitValue: %s";
      char v47 = 2;
      char v48 = 1;
    }

    uint64_t v49 = v8[2];
    uint64_t v50 = v112;
    uint64_t v51 = v8;
    uint64_t v52 = v119;
    v49(v112, v12, v119);
    uint64_t v53 = swift_slowAlloc(12LL, -1LL);
    uint64_t v54 = swift_slowAlloc(32LL, -1LL);
    v127[0] = v54;
    *(_BYTE *)uint64_t v53 = v47;
    *(_BYTE *)(v53 + 1) = v48;
    *(_WORD *)(v53 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 2080;
    lazy protocol witness table accessor for type PromptForValueFlowAsync<LNValue> and conformance PromptForValueFlowAsync<A>( &lazy protocol witness table cache variable for type PromptResult<LNValue> and conformance PromptResult<A>,  &demangling cache variable for type metadata for PromptResult<LNValue>);
    uint64_t v55 = v123;
    uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter(v13, v56);
    unint64_t v59 = v58;
    uint64_t v125 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v53 + 4);
    swift_bridgeObjectRelease(v59);
    uint64_t v60 = ((uint64_t (*)(char *, uint64_t))v122)(v55, v13);
    os_signpost_id_t v61 = OSSignpostID.rawValue.getter(v60);
    _os_signpost_emit_with_name_impl( &dword_0,  v39,  (os_signpost_type_t)v116,  v61,  "LinkRCHFlowNeedsValue",  v117,  (uint8_t *)v53,  0xCu);
    swift_arrayDestroy(v54, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1LL, -1LL);
    swift_slowDealloc(v53, -1LL, -1LL);

    uint64_t v62 = (void (*)(char *, uint64_t))v51[1];
    v62(v118, v52);
    v62((char *)v50, v52);
    uint64_t v14 = v120;
    uint64_t v17 = v121;
    a1 = v107;
  }

  else
  {
    v122(v37, v13);

    ((void (*)(char *, uint64_t))v8[1])(v12, v119);
  }

  v124(v17, a1, v13);
  uint64_t v63 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v17, v13);
  if ((_DWORD)v63 == enum case for PromptResult.answered<A>(_:))
  {
    int v71 = (*(uint64_t (**)(char *, uint64_t))(v14 + 96))(v17, v13);
    char v72 = *(void **)v17;
    static InstrumentationUtils.emitPromptForValueEndedInstrumentation()( v71,  v73,  v74,  v75,  v76,  v77,  v78,  v79,  v105,  v106,  v107,  v108,  v109,  v110,  v111,  v112,  v113,  (uint64_t)v114,  v115,  v116,  (uint64_t)v117,  (uint64_t)v118,  v119,  v120);
    [v114 respondWithValue:v72];

    outlined init with copy of AppShortcutInvoking(v113, (uint64_t)v127);
    char v80 = 2;
LABEL_19:
    char v128 = v80;
    uint64_t v81 = (void *)(v115 + 48);
LABEL_22:
    swift_beginAccess(v81, &v125, 33LL, 0LL);
LABEL_23:
    outlined assign with take of LinkRCHFlow.State((uint64_t)v127, v81);
    return swift_endAccess(&v125);
  }

  if ((_DWORD)v63 == enum case for PromptResult.error<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v17, v13);
    uint64_t v81 = (void *)(v115 + 48);
    if (v17[8] == 1)
    {
      v127[0] = *(void *)v17;
      char v82 = 8;
    }

    else
    {
      v127[0] = *(void *)v17;
      char v82 = 9;
    }

    char v128 = v82;
    goto LABEL_22;
  }

  if ((_DWORD)v63 == enum case for PromptResult.cancelled<A>(_:))
  {
    static InstrumentationUtils.emitLinkFlowCancelledInstrumentation(cancellationInitiator:)( 1,  v64,  v65,  v66,  v67,  v68,  v69,  v70,  v105,  v106,  v107,  v108,  v109,  v110,  v111,  v112,  v113,  (uint64_t)v114,  v115,  v116,  (uint64_t)v117,  (uint64_t)v118,  v119,  v120);
    v127[0] = 2LL;
    memset(&v127[1], 0, 48);
    char v80 = 12;
    goto LABEL_19;
  }

  if ((_DWORD)v63 == enum case for PromptResult.unanswered<A>(_:))
  {
    uint64_t v84 = (os_log_s *)Logger.logObject.getter(v63);
    os_log_type_t v85 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v84, v85))
    {
      uint64_t v86 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v86 = 0;
      _os_log_impl(&dword_0, v84, v85, "PromptForValueFlow received an .unanswered result, reprompting...", v86, 2u);
      swift_slowDealloc(v86, -1LL, -1LL);
    }

    static InstrumentationUtils.emitPromptForValueEndedInstrumentation()( v87,  v88,  v89,  v90,  v91,  v92,  v93,  v94,  v105,  v106,  v107,  v108,  v109,  v110,  v111,  v112,  v113,  (uint64_t)v114,  v115,  v116,  (uint64_t)v117,  (uint64_t)v118,  v119,  v120);
    id v95 = v114;
    v127[0] = (uint64_t)v114;
    v127[1] = 0LL;
    outlined init with copy of AppShortcutInvoking(v113, (uint64_t)&v127[2]);
    char v128 = 6;
    uint64_t v81 = (void *)(v115 + 48);
    swift_beginAccess(v115 + 48, &v125, 33LL, 0LL);
    id v96 = v95;
    goto LABEL_23;
  }

  unint64_t v97 = lazy protocol witness table accessor for type LinkRCHFlowError and conformance LinkRCHFlowError();
  uint64_t v98 = swift_allocError(&type metadata for LinkRCHFlowError, v97, 0LL, 0LL);
  void *v99 = 0xD000000000000022LL;
  v99[1] = 0x8000000000195F10LL;
  v127[0] = v98;
  char v128 = 9;
  uint64_t v100 = (void *)(v115 + 48);
  swift_beginAccess(v115 + 48, &v125, 33LL, 0LL);
  outlined assign with take of LinkRCHFlow.State((uint64_t)v127, v100);
  uint64_t v101 = swift_endAccess(&v125);
  unint64_t v102 = (os_log_s *)Logger.logObject.getter(v101);
  os_log_type_t v103 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v102, v103))
  {
    uint64_t v104 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v104 = 0;
    _os_log_impl(&dword_0, v102, v103, "Unexpected result", v104, 2u);
    swift_slowDealloc(v104, -1LL, -1LL);
  }

  return ((uint64_t (*)(char *, uint64_t))v122)(v17, v13);
}

void closure #1 in LinkRCHFlow.createNeedsActionConfirmationFlow(request:iterator:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t (*a21)(uint64_t), char a22)
{
  uint64_t v132 = v22;
  uint64_t v127 = v23;
  id v137 = v24;
  uint64_t v26 = v25;
  uint64_t v143 = v27;
  uint64_t v139 = v28;
  uint64_t v138 = v29;
  uint64_t v31 = v30;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v32);
  OUTLINED_FUNCTION_61_6();
  uint64_t v126 = v33;
  OUTLINED_FUNCTION_65_2();
  __chkstk_darwin(v34);
  uint64_t v136 = (uint64_t)&v123 - v35;
  uint64_t v135 = type metadata accessor for SimpleConfirmationResponseProvider(0LL);
  uint64_t v134 = *(void *)(v135 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v36);
  OUTLINED_FUNCTION_83();
  uint64_t v133 = v37;
  uint64_t v130 = type metadata accessor for OSSignpostError(0LL);
  uint64_t v129 = *(void *)(v130 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v38);
  OUTLINED_FUNCTION_83();
  uint64_t v128 = v39;
  uint64_t v141 = OUTLINED_FUNCTION_54_20();
  uint64_t v40 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  OUTLINED_FUNCTION_61_6();
  uint64_t v131 = v41;
  OUTLINED_FUNCTION_65_2();
  __chkstk_darwin(v42);
  uint64_t v44 = (char *)&v123 - v43;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<SimpleConfirmationResponseProvider>);
  int v46 = *(void **)(v45 - 8);
  __chkstk_darwin(v45);
  OUTLINED_FUNCTION_61_6();
  uint64_t v142 = v47;
  OUTLINED_FUNCTION_65_2();
  __chkstk_darwin(v48);
  uint64_t v146 = (char *)&v123 - v49;
  OUTLINED_FUNCTION_65_2();
  __chkstk_darwin(v50);
  uint64_t v52 = (char *)&v123 - v51;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v53 = OUTLINED_FUNCTION_48();
  uint64_t v54 = __swift_project_value_buffer(v53, (uint64_t)static Logger.voiceCommands);
  uint64_t v147 = (uint64_t (*)(char *, os_log_s *, uint64_t))v46[2];
  uint64_t v55 = v147(v52, v31, v45);
  uint64_t v125 = v54;
  uint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
  os_log_type_t v57 = static os_log_type_t.debug.getter();
  BOOL v58 = OUTLINED_FUNCTION_146_0(v56);
  uint64_t v144 = v31;
  uint64_t v145 = v26;
  uint64_t v140 = v40;
  if (v58)
  {
    unint64_t v59 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v60 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v123 = v44;
    uint64_t v61 = v60;
    uint64_t v150 = v60;
    *(_DWORD *)unint64_t v59 = 136315138;
    lazy protocol witness table accessor for type PromptForValueFlowAsync<LNValue> and conformance PromptForValueFlowAsync<A>( &lazy protocol witness table cache variable for type PromptResult<SimpleConfirmationResponseProvider> and conformance PromptResult<A>,  &demangling cache variable for type metadata for PromptResult<SimpleConfirmationResponseProvider>);
    uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter(v45, v62);
    uint64_t v148 = OUTLINED_FUNCTION_48_15(v63, v64);
    uint64_t v31 = v144;
    uint64_t v40 = v140;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149, v59 + 4);
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_74_11();
    OUTLINED_FUNCTION_31_2(&dword_0, v56, v57, v127, v59);
    OUTLINED_FUNCTION_30_3(v61, v65, (uint64_t)&type metadata for Any + 8);
    uint64_t v66 = v61;
    uint64_t v44 = v123;
    OUTLINED_FUNCTION_1_0(v66);
    uint64_t v67 = (uint64_t)v59;
    uint64_t v26 = v145;
    OUTLINED_FUNCTION_1_0(v67);
  }

  else
  {
    OUTLINED_FUNCTION_74_11();
  }

  uint64_t v68 = (uint64_t)v146;
  uint64_t v69 = v147(v146, v31, v45);
  int v70 = (os_log_s *)OSSignposter.logHandle.getter(v69);
  uint64_t v71 = OSSignpostIntervalState.signpostID.getter();
  LODWORD(v13__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = static os_signpost_type_t.end.getter(v71);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    uint64_t v72 = OUTLINED_FUNCTION_14_8();
    uint64_t v73 = v128;
    checkForErrorAndConsumeState(state:)(v72);
    OUTLINED_FUNCTION_61();
    uint64_t v74 = v129;
    uint64_t v75 = v130;
    int v76 = (*(uint64_t (**)(uint64_t, uint64_t))(v129 + 88))(v73, v130);
    uint64_t v124 = v46;
    if (v76 == enum case for OSSignpostError.doubleEnd(_:))
    {
      char v79 = 0;
      char v78 = 0;
      uint64_t v139 = "[Error] Interval already ended";
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v75);
      uint64_t v139 = "exitValue: %s";
      char v78 = 2;
      char v79 = 1;
    }

    char v80 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 16);
    uint64_t v81 = v131;
    char v82 = v44;
    uint64_t v83 = v141;
    OUTLINED_FUNCTION_80_4(v131, (uint64_t)v44, v80);
    uint64_t v84 = OUTLINED_FUNCTION_38(12LL);
    uint64_t v85 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v150 = v85;
    *(_BYTE *)uint64_t v84 = v78;
    *(_BYTE *)(v84 + 1) = v79;
    *(_WORD *)(v84 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 2080;
    lazy protocol witness table accessor for type PromptForValueFlowAsync<LNValue> and conformance PromptForValueFlowAsync<A>( &lazy protocol witness table cache variable for type PromptResult<SimpleConfirmationResponseProvider> and conformance PromptResult<A>,  &demangling cache variable for type metadata for PromptResult<SimpleConfirmationResponseProvider>);
    uint64_t v86 = (uint64_t)v146;
    uint64_t v88 = dispatch thunk of CustomStringConvertible.description.getter(v45, v87);
    uint64_t v90 = OUTLINED_FUNCTION_48_15(v88, v89);
    uint64_t v91 = OUTLINED_FUNCTION_91_3(v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v91, v92, v84 + 4);
    OUTLINED_FUNCTION_20();
    uint64_t v93 = OUTLINED_FUNCTION_77_9(v86);
    os_signpost_id_t v94 = OSSignpostID.rawValue.getter(v93);
    OUTLINED_FUNCTION_117_3(&dword_0, v70, (os_signpost_type_t)v138, v94, v132, v139);
    OUTLINED_FUNCTION_30_3(v85, v95, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v85);
    OUTLINED_FUNCTION_1_0(v84);

    id v96 = *(void (**)(char *, uint64_t))(v140 + 8);
    v96(v82, v83);
    v96((char *)v81, v83);
    uint64_t v31 = v144;
    uint64_t v26 = v145;
    uint64_t v77 = v142;
    int v46 = v124;
  }

  else
  {
    OUTLINED_FUNCTION_77_9(v68);

    (*(void (**)(char *, uint64_t))(v40 + 8))(v44, v141);
    uint64_t v77 = v142;
  }

  outlined init with copy of AppShortcutInvoking(v26, (uint64_t)&v150);
  char v152 = 2;
  uint64_t v97 = v143 + 48;
  OUTLINED_FUNCTION_15_6(v143 + 48, (uint64_t)&v148);
  OUTLINED_FUNCTION_69_8((uint64_t)&v150);
  OUTLINED_FUNCTION_24_21();
  v147((char *)v77, v31, v45);
  uint64_t v98 = ((uint64_t (*)(uint64_t, uint64_t))v46[11])(v77, v45);
  if ((_DWORD)v98 != enum case for PromptResult.answered<A>(_:))
  {
    if ((_DWORD)v98 == enum case for PromptResult.error<A>(_:))
    {
      OUTLINED_FUNCTION_111_2();
      if (*(_BYTE *)(v77 + 8) == 1)
      {
        uint64_t v150 = *(void *)v77;
        char v113 = 8;
      }

      else
      {
        uint64_t v150 = *(void *)v77;
        char v113 = 9;
      }
    }

    else
    {
      if ((_DWORD)v98 != enum case for PromptResult.cancelled<A>(_:))
      {
        if ((_DWORD)v98 != enum case for PromptResult.unanswered<A>(_:))
        {
          [v137 respondWithConfirmation:0];
          OUTLINED_FUNCTION_77_9(v77);
          goto LABEL_26;
        }

        uint64_t v117 = a21(0LL);
        os_log_type_t v118 = v125;
        Logger.logObject.getter(v117);
        os_log_type_t v119 = OUTLINED_FUNCTION_164();
        if (OUTLINED_FUNCTION_40(v119))
        {
          uint64_t v120 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
          *(_WORD *)uint64_t v120 = 0;
          OUTLINED_FUNCTION_47_1( &dword_0,  v31,  v118,  "PromptForConfirmationFlow received an .unanswered result, reprompting...",  v120);
          OUTLINED_FUNCTION_1_0((uint64_t)v120);
        }

        id v121 = v137;
        uint64_t v150 = (uint64_t)v137;
        outlined init with copy of AppShortcutInvoking(v26, (uint64_t)&v151);
        char v152 = a22;
        OUTLINED_FUNCTION_15_6(v97, (uint64_t)&v148);
        id v122 = v121;
        goto LABEL_25;
      }

      OUTLINED_FUNCTION_145_1( v98,  v99,  v100,  v101,  v102,  v103,  v104,  v105,  (uint64_t)v123,  v124,  v125,  v126,  (uint64_t)v127,  v128,  v129,  v130,  v131,  (uint64_t)v132,  v133,  v134,  v135,  v136,  (uint64_t)v137,  v138);
      OUTLINED_FUNCTION_86_3();
    }

    char v152 = v113;
    OUTLINED_FUNCTION_15_6(v97, (uint64_t)&v148);
LABEL_25:
    OUTLINED_FUNCTION_69_8((uint64_t)&v150);
    OUTLINED_FUNCTION_24_21();
    goto LABEL_26;
  }

  OUTLINED_FUNCTION_111_2();
  uint64_t v106 = v134;
  uint64_t v107 = v133;
  uint64_t v108 = v135;
  uint64_t v109 = OUTLINED_FUNCTION_80_4(v133, v77, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v134 + 32));
  uint64_t v110 = v136;
  SimpleConfirmationResponseProvider.confirmationResponse.getter(v109);
  uint64_t v111 = type metadata accessor for ConfirmationResponse(0LL);
  if (__swift_getEnumTagSinglePayload(v110, 1LL, v111) != 1)
  {
    uint64_t v114 = v126;
    outlined init with copy of AppDisplayInfo?( v110,  v126,  &demangling cache variable for type metadata for ConfirmationResponse?);
    uint64_t v115 = *(void *)(v111 - 8);
    int v116 = (*(uint64_t (**)(uint64_t, uint64_t))(v115 + 88))(v114, v111);
    if (v116 == enum case for ConfirmationResponse.confirmed(_:))
    {
      uint64_t v112 = 1LL;
      goto LABEL_20;
    }

    if (v116 != enum case for ConfirmationResponse.rejected(_:)) {
      (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v114, v111);
    }
  }

  uint64_t v112 = 0LL;
LABEL_20:
  a21(v112);
  [v137 respondWithConfirmation:v112];
  (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v107, v108);
  outlined destroy of Any?(v110, &demangling cache variable for type metadata for ConfirmationResponse?);
LABEL_26:
  OUTLINED_FUNCTION_24_0();
}

void closure #1 in LinkRCHFlow.createDismbiguatingNeedsValueFlow(request:actionParameterMetadata:iterator:selectedValues:)()
{
  HIDWORD(v130) = v0;
  os_signpost_type_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v144 = v5;
  uint64_t v140 = v6;
  uint64_t v142 = v7;
  uint64_t v137 = v8;
  uint64_t v10 = v9;
  uint64_t v134 = type metadata accessor for OSSignpostError(0LL);
  uint64_t v133 = *(void *)(v134 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_35();
  uint64_t v14 = v13 - v12;
  uint64_t v139 = OUTLINED_FUNCTION_54_20();
  uint64_t v138 = *(void *)(v139 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_61_6();
  uint64_t v135 = v16;
  OUTLINED_FUNCTION_65_2();
  __chkstk_darwin(v17);
  uint64_t v147 = (char *)&v129 - v18;
  uint64_t v19 = (uint8_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<[LNValue]>);
  uint64_t v20 = *((void *)v19 - 1);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v129 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v145 = (uint64_t)&v129 - v24;
  OUTLINED_FUNCTION_65_2();
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v129 - v26;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v132 = v14;
  uint64_t v28 = OUTLINED_FUNCTION_48();
  uint64_t v29 = __swift_project_value_buffer(v28, (uint64_t)static Logger.voiceCommands);
  uint64_t v30 = *(uint64_t (**)(void, void, void))(v20 + 16);
  uint64_t v148 = v10;
  uint64_t v146 = v30;
  uint64_t v31 = v30(v27, v10, v19);
  uint64_t v136 = v29;
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  BOOL v34 = OUTLINED_FUNCTION_146_0(v32);
  id v131 = v4;
  uint64_t v141 = v23;
  uint64_t v143 = v20;
  if (v34)
  {
    uint64_t v35 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v36 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v150 = v36;
    *(_DWORD *)uint64_t v35 = 136315138;
    uint64_t v129 = v2;
    lazy protocol witness table accessor for type PromptForValueFlowAsync<LNValue> and conformance PromptForValueFlowAsync<A>( &lazy protocol witness table cache variable for type PromptResult<[LNValue]> and conformance PromptResult<A>,  &demangling cache variable for type metadata for PromptResult<[LNValue]>);
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter(v19, v37);
    uint64_t v40 = OUTLINED_FUNCTION_48_15(v38, v39);
    uint64_t v41 = OUTLINED_FUNCTION_103_3(v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v41, v42, v43);
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_104_3();
    OUTLINED_FUNCTION_31_2(&dword_0, v32, v33, v129, v35);
    OUTLINED_FUNCTION_30_3(v36, v44, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v36);
    uint64_t v45 = (uint64_t)v35;
    uint64_t v23 = v141;
    OUTLINED_FUNCTION_1_0(v45);
  }

  else
  {
    OUTLINED_FUNCTION_104_3();
  }

  uint64_t v46 = v145;
  uint64_t v47 = v148;
  uint64_t v48 = OUTLINED_FUNCTION_114_1(v145);
  uint64_t v49 = (os_log_s *)OSSignposter.logHandle.getter(v48);
  uint64_t v50 = (uint64_t)v147;
  uint64_t v51 = v142;
  uint64_t v52 = OSSignpostIntervalState.signpostID.getter();
  LODWORD(v137) = static os_signpost_type_t.end.getter(v52);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    uint64_t v53 = swift_retain(v51);
    uint64_t v54 = v132;
    checkForErrorAndConsumeState(state:)(v53);
    swift_release();
    uint64_t v55 = v133;
    uint64_t v56 = v134;
    int v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v133 + 88))(v54, v134);
    uint64_t v129 = (const char *)v20;
    if (v57 == enum case for OSSignpostError.doubleEnd(_:))
    {
      char v60 = 0;
      char v59 = 0;
      uint64_t v142 = "[Error] Interval already ended";
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
      uint64_t v142 = "exitValue: %s";
      char v59 = 2;
      char v60 = 1;
    }

    uint64_t v61 = v138;
    uint64_t v62 = v135;
    OUTLINED_FUNCTION_140_1(v135, v50, *(uint64_t (**)(uint64_t, uint64_t, void))(v138 + 16));
    uint64_t v63 = OUTLINED_FUNCTION_38(12LL);
    uint64_t v64 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v150 = v64;
    *(_BYTE *)uint64_t v63 = v59;
    *(_BYTE *)(v63 + 1) = v60;
    *(_WORD *)(v63 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 2080;
    lazy protocol witness table accessor for type PromptForValueFlowAsync<LNValue> and conformance PromptForValueFlowAsync<A>( &lazy protocol witness table cache variable for type PromptResult<[LNValue]> and conformance PromptResult<A>,  &demangling cache variable for type metadata for PromptResult<[LNValue]>);
    uint64_t v65 = v145;
    uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter(v19, v66);
    uint64_t v69 = OUTLINED_FUNCTION_48_15(v67, v68);
    uint64_t v70 = OUTLINED_FUNCTION_91_3(v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v70, v71, v63 + 4);
    OUTLINED_FUNCTION_20();
    uint64_t v72 = v129;
    uint64_t v73 = ((uint64_t (*)(uint64_t, uint8_t *))v129)(v65, v19);
    os_signpost_id_t v74 = OSSignpostID.rawValue.getter(v73);
    OUTLINED_FUNCTION_117_3(&dword_0, v49, (os_signpost_type_t)v137, v74, "LinkRCHFlowNeedsDisambiguation", v142);
    OUTLINED_FUNCTION_30_3(v64, v75, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v64);
    OUTLINED_FUNCTION_1_0(v63);

    int v76 = *(void (**)(char *, uint64_t))(v61 + 8);
    v76(v147, v20);
    uint64_t v77 = v20;
    uint64_t v20 = (uint64_t)v72;
    v76((char *)v62, v77);
    uint64_t v58 = v140;
    uint64_t v23 = v141;
    uint64_t v47 = v148;
  }

  else
  {
    ((void (*)(uint64_t, uint8_t *))v20)(v46, v19);

    (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v50, v139);
    uint64_t v58 = v140;
  }

  outlined init with copy of AppShortcutInvoking(v144, (uint64_t)&v150);
  char v152 = 2;
  char v78 = (os_log_s *)(v58 + 48);
  OUTLINED_FUNCTION_15_6((uint64_t)v78, (uint64_t)v149);
  OUTLINED_FUNCTION_57_15();
  OUTLINED_FUNCTION_24_21();
  OUTLINED_FUNCTION_114_1((uint64_t)v23);
  uint64_t v79 = (*(uint64_t (**)(char *, uint8_t *))(v143 + 88))(v23, v19);
  if ((_DWORD)v79 == enum case for PromptResult.answered<A>(_:))
  {
    int v87 = OUTLINED_FUNCTION_93_2();
    uint64_t v88 = *(void *)v23;
    static InstrumentationUtils.emitActionParameterDisambiguationEndedInstrumentation()( v87,  v89,  v90,  v91,  v92,  v93,  v94,  v95,  (uint64_t)v129,  v130,  (uint64_t)v131,  v132,  v133,  v134,  v135,  v136,  v137,  v138,  v139,  v140,  (uint64_t)v141,  (uint64_t)v142,  v143,  v144);
    if ((unint64_t)v88 >> 62)
    {
      if (v88 < 0) {
        id v96 = (os_log_s *)v88;
      }
      else {
        id v96 = (os_log_s *)(v88 & 0xFFFFFFFFFFFFFF8LL);
      }
      OUTLINED_FUNCTION_5_14();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter(v96);
      OUTLINED_FUNCTION_37();
      if (v20)
      {
        OUTLINED_FUNCTION_5_14();
        id v96 = (os_log_s *)_CocoaArrayWrapper.endIndex.getter(v96);
        OUTLINED_FUNCTION_37();
        goto LABEL_15;
      }
    }

    else
    {
      id v96 = *(os_log_s **)((char *)&dword_10 + (v88 & 0xFFFFFFFFFFFFF8LL));
      if (v96)
      {
LABEL_15:
        if (v96 == (os_log_s *)((char *)&dword_0 + 1))
        {
          OUTLINED_FUNCTION_118_3();
          OUTLINED_FUNCTION_41_21();
          os_log_type_t v97 = OUTLINED_FUNCTION_164();
          if (os_log_type_enabled(v78, v97))
          {
            uint64_t v98 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
            uint64_t v99 = OUTLINED_FUNCTION_38(32LL);
            uint64_t v150 = v99;
            *(_DWORD *)uint64_t v98 = 136315138;
            uint64_t v100 = OUTLINED_FUNCTION_72( v99,  &lazy cache variable for type metadata for LNValue,  &OBJC_CLASS___LNValue_ptr);
            uint64_t v101 = OUTLINED_FUNCTION_5_14();
            uint64_t v102 = Array.description.getter(v101, v100);
            unint64_t v104 = v103;
            OUTLINED_FUNCTION_37();
            uint64_t v105 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, v104, &v150);
            uint64_t v106 = OUTLINED_FUNCTION_103_3(v105);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v106, v107, v108);
            OUTLINED_FUNCTION_46();
            swift_bridgeObjectRelease(v104);
            OUTLINED_FUNCTION_31_2( &dword_0,  v78,  v97,  "PromptForDisambiguationFlow successfully selected values: %s.",  v98);
            OUTLINED_FUNCTION_30_3(v99, v109, (uint64_t)&type metadata for Any + 8);
            OUTLINED_FUNCTION_1_0(v99);
            OUTLINED_FUNCTION_1_0((uint64_t)v98);
          }

          else
          {

            OUTLINED_FUNCTION_46();
          }

          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, (v88 & 0xC000000000000001LL) == 0);
          if ((v88 & 0xC000000000000001LL) != 0) {
            os_log_type_t v118 = (os_log_s *)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v88);
          }
          else {
            os_log_type_t v118 = (os_log_s *)*(id *)(v88 + 32);
          }
          char v78 = v118;
          OUTLINED_FUNCTION_37();
          [v131 respondWithValue:v78];
LABEL_35:

          goto LABEL_49;
        }

        OUTLINED_FUNCTION_41_21();
        os_log_type_t v111 = OUTLINED_FUNCTION_58();
        if (OUTLINED_FUNCTION_20_9(v111))
        {
          uint64_t v112 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
          OUTLINED_FUNCTION_43_5(v112);
          OUTLINED_FUNCTION_47_1( &dword_0,  v96,  (os_log_type_t)v20,  "PromptForDisambiguationFlow received multiple items, reprompting...",  v19);
          OUTLINED_FUNCTION_1_0((uint64_t)v19);
        }

        OUTLINED_FUNCTION_135();
        uint64_t v150 = (uint64_t)v96;
        uint64_t v151 = v88;
        goto LABEL_47;
      }
    }

    OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_41_21();
    os_log_type_t v126 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_31_0(v126))
    {
      uint64_t v127 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
      *(_WORD *)uint64_t v127 = 0;
      OUTLINED_FUNCTION_47_1( &dword_0,  v96,  (os_log_type_t)v88,  "PromptForDisambiguationFlow did not receive any valid input, reprompting...",  v127);
      OUTLINED_FUNCTION_1_0((uint64_t)v127);
    }

    OUTLINED_FUNCTION_135();
    uint64_t v150 = (uint64_t)v96;
    uint64_t v151 = 0LL;
LABEL_47:
    outlined init with copy of AppShortcutInvoking(v144, v113);
    char v152 = BYTE4(v130);
    OUTLINED_FUNCTION_15_6((uint64_t)v78, (uint64_t)v149);
    uint64_t v128 = v96;
    goto LABEL_48;
  }

  if ((_DWORD)v79 == enum case for PromptResult.error<A>(_:))
  {
    OUTLINED_FUNCTION_93_2();
    if (v23[8] == 1)
    {
      uint64_t v150 = *(void *)v23;
      char v110 = 8;
    }

    else
    {
      uint64_t v150 = *(void *)v23;
      char v110 = 9;
    }

    goto LABEL_27;
  }

  if ((_DWORD)v79 == enum case for PromptResult.cancelled<A>(_:))
  {
    OUTLINED_FUNCTION_145_1( v79,  v80,  v81,  v82,  v83,  v84,  v85,  v86,  (uint64_t)v129,  v130,  (uint64_t)v131,  v132,  v133,  v134,  v135,  v136,  v137,  v138,  v139,  v140,  (uint64_t)v141,  (uint64_t)v142,  v143,  v144);
    OUTLINED_FUNCTION_86_3();
LABEL_27:
    char v152 = v110;
    OUTLINED_FUNCTION_15_6((uint64_t)v78, (uint64_t)v149);
LABEL_48:
    OUTLINED_FUNCTION_57_15();
    OUTLINED_FUNCTION_24_21();
    goto LABEL_49;
  }

  if ((_DWORD)v79 == enum case for PromptResult.unanswered<A>(_:))
  {
    OUTLINED_FUNCTION_145_1( v79,  v80,  v81,  v82,  v83,  v84,  v85,  v86,  (uint64_t)v129,  v130,  (uint64_t)v131,  v132,  v133,  v134,  v135,  v136,  v137,  v138,  v139,  v140,  (uint64_t)v141,  (uint64_t)v142,  v143,  v144);
    OUTLINED_FUNCTION_41_21();
    os_log_type_t v114 = OUTLINED_FUNCTION_54_8();
    if (OUTLINED_FUNCTION_40(v114))
    {
      uint64_t v115 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_26_1(v115);
      OUTLINED_FUNCTION_27(&dword_0, v116, v117, "Unexpected .unanswered result from a disambiguation request.");
      OUTLINED_FUNCTION_1_0(v47);
    }

    goto LABEL_35;
  }

  unint64_t v119 = lazy protocol witness table accessor for type LinkRCHFlowError and conformance LinkRCHFlowError();
  uint64_t v120 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for LinkRCHFlowError, v119);
  OUTLINED_FUNCTION_75_9(v120, v121, 0xD00000000000002BLL);
  OUTLINED_FUNCTION_15_6((uint64_t)v78, (uint64_t)v149);
  OUTLINED_FUNCTION_57_15();
  OUTLINED_FUNCTION_24_21();
  OUTLINED_FUNCTION_41_21();
  os_log_type_t v122 = OUTLINED_FUNCTION_54_8();
  if (OUTLINED_FUNCTION_40(v122))
  {
    uint64_t v123 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    OUTLINED_FUNCTION_26_1(v123);
    OUTLINED_FUNCTION_27(&dword_0, v124, v125, "Unexpected result");
    OUTLINED_FUNCTION_1_0(v47);
  }

  ((void (*)(char *, uint8_t *))v20)(v23, v19);
LABEL_49:
  OUTLINED_FUNCTION_24_0();
}

void closure #1 in LinkRCHFlow.createContinueInAppFlow(request:iterator:)( uint64_t a1, uint64_t a2, uint64_t a3, id a4)
{
  uint64_t v98 = a3;
  uint64_t v99 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v91 = (uint64_t)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v89 - v9;
  uint64_t v11 = type metadata accessor for SimpleConfirmationResponseProvider(0LL);
  uint64_t v94 = *(void *)(v11 - 8);
  uint64_t v95 = v11;
  __chkstk_darwin(v11);
  uint64_t v93 = (uint64_t)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<SimpleConfirmationResponseProvider>);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v100 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v89 - v17;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  id v96 = v10;
  uint64_t v19 = type metadata accessor for Logger(0LL);
  uint64_t v20 = __swift_project_value_buffer(v19, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v97 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v21 = v97(v18, a1, v13);
  uint64_t v92 = v20;
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc(12LL, -1LL);
    id v90 = a4;
    uint64_t v25 = (uint8_t *)v24;
    uint64_t v26 = swift_slowAlloc(32LL, -1LL);
    uint64_t v89 = a1;
    uint64_t v27 = v26;
    uint64_t v104 = v26;
    *(_DWORD *)uint64_t v25 = 136315138;
    lazy protocol witness table accessor for type PromptForValueFlowAsync<LNValue> and conformance PromptForValueFlowAsync<A>( &lazy protocol witness table cache variable for type PromptResult<SimpleConfirmationResponseProvider> and conformance PromptResult<A>,  &demangling cache variable for type metadata for PromptResult<SimpleConfirmationResponseProvider>);
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter(v13, v28);
    unint64_t v31 = v30;
    uint64_t v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v25 + 4);
    swift_bridgeObjectRelease(v31);
    uint64_t v32 = *(void (**)(char *, uint64_t))(v14 + 8);
    v32(v18, v13);
    _os_log_impl(&dword_0, v22, v23, "PromptForConfirmationFlow.createContinueInAppFlow received %s", v25, 0xCu);
    swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v33 = v27;
    a1 = v89;
    swift_slowDealloc(v33, -1LL, -1LL);
    BOOL v34 = v25;
    a4 = v90;
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  else
  {
    uint64_t v32 = *(void (**)(char *, uint64_t))(v14 + 8);
    v32(v18, v13);
  }

  outlined init with copy of AppShortcutInvoking(v98, (uint64_t)&v104);
  char v108 = 2;
  uint64_t v35 = (void *)(v99 + 48);
  swift_beginAccess(v99 + 48, &v101, 33LL, 0LL);
  outlined assign with take of LinkRCHFlow.State((uint64_t)&v104, v35);
  swift_endAccess(&v101);
  uint64_t v36 = v100;
  v97(v100, a1, v13);
  uint64_t v37 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v36, v13);
  if ((_DWORD)v37 == enum case for PromptResult.answered<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v36, v13);
    uint64_t v46 = v93;
    uint64_t v45 = v94;
    uint64_t v47 = v95;
    uint64_t v48 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v94 + 32))(v93, v36, v95);
    uint64_t v49 = (uint64_t)v96;
    SimpleConfirmationResponseProvider.confirmationResponse.getter(v48);
    uint64_t v50 = type metadata accessor for ConfirmationResponse(0LL);
    if (__swift_getEnumTagSinglePayload(v49, 1LL, v50) != 1)
    {
      uint64_t v58 = v91;
      outlined init with copy of AppDisplayInfo?( v49,  v91,  &demangling cache variable for type metadata for ConfirmationResponse?);
      uint64_t v59 = *(void *)(v50 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v59 + 88))(v58, v50) == enum case for ConfirmationResponse.confirmed(_:))
      {
        static InstrumentationUtils.emitActionConfirmationEndedInstrumentation(isCorrectAction:)( 1,  v60,  v61,  v62,  v63,  v64,  v65,  v66,  v89,  v90,  v91,  v92,  v93,  v94,  v95,  (uint64_t)v96,  (uint64_t)v97,  v98,  v99,  (uint64_t)v100,  v101,  v102,  v103,  v104);
        [a4 respondWithSuccess];
LABEL_19:
        (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v46, v47);
        outlined destroy of Any?(v49, &demangling cache variable for type metadata for ConfirmationResponse?);
        return;
      }

      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v58, v50);
    }

    static InstrumentationUtils.emitActionParameterConfirmationEndedInstrumentation(isCorrectParameter:)( 0,  v51,  v52,  v53,  v54,  v55,  v56,  v57,  v89,  v90,  v91,  v92,  v93,  v94,  v95,  (uint64_t)v96,  (uint64_t)v97,  v98,  v99,  (uint64_t)v100,  v101,  v102,  v103,  v104);
    type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSError,  &OBJC_CLASS___NSError_ptr);
    id v80 = static NSError.userCancelled.getter();
    int v81 = (void *)_convertErrorToNSError(_:)(v80);

    [a4 respondWithError:v81];
    goto LABEL_19;
  }

  int v67 = v37;
  if ((_DWORD)v37 == enum case for PromptResult.error<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v36, v13);
    uint64_t v68 = swift_errorRelease(*(void *)v36);
    uint64_t v69 = (void *)Logger.logObject.getter(v68);
    os_log_type_t v70 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled((os_log_t)v69, v70))
    {
LABEL_14:

      type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSError,  &OBJC_CLASS___NSError_ptr);
      id v75 = static NSError.userCancelled.getter();
      static InstrumentationUtils.emitLinkFlowFailedInstrumentation(error:)();

      id v76 = v75;
      uint64_t v77 = (void *)_convertErrorToNSError(_:)(v76);

      [a4 respondWithError:v77];
      return;
    }

    uint64_t v71 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v71 = 0;
    uint64_t v72 = "PromptForConfirmationFlow.createContinueInAppFlow received an .error result, returning error";
    uint64_t v73 = (os_log_s *)v69;
    os_log_type_t v74 = v70;
LABEL_13:
    _os_log_impl(&dword_0, v73, v74, v72, v71, 2u);
    swift_slowDealloc(v71, -1LL, -1LL);
    goto LABEL_14;
  }

  if ((_DWORD)v37 == enum case for PromptResult.cancelled<A>(_:))
  {
    static InstrumentationUtils.emitLinkFlowCancelledInstrumentation(cancellationInitiator:)( 1,  v38,  v39,  v40,  v41,  v42,  v43,  v44,  v89,  v90,  v91,  v92,  v93,  v94,  v95,  (uint64_t)v96,  (uint64_t)v97,  v98,  v99,  (uint64_t)v100,  v101,  v102,  v103,  v104);
    type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSError,  &OBJC_CLASS___NSError_ptr);
    id v78 = static NSError.userCancelled.getter();
    uint64_t v79 = (void *)_convertErrorToNSError(_:)(v78);

    [a4 respondWithError:v79];
    uint64_t v104 = 2LL;
    __int128 v105 = 0u;
    __int128 v106 = 0u;
    __int128 v107 = 0u;
    char v108 = 12;
    swift_beginAccess(v35, &v101, 33LL, 0LL);
    outlined assign with take of LinkRCHFlow.State((uint64_t)&v104, v35);
    swift_endAccess(&v101);
    return;
  }

  int v82 = enum case for PromptResult.unanswered<A>(_:);
  uint64_t v69 = (void *)Logger.logObject.getter(v37);
  os_log_type_t v83 = static os_log_type_t.error.getter();
  BOOL v84 = os_log_type_enabled((os_log_t)v69, v83);
  if (v67 == v82)
  {
    if (!v84) {
      goto LABEL_14;
    }
    uint64_t v71 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v71 = 0;
    os_log_type_t v74 = v83;
    uint64_t v72 = "PromptForConfirmationFlow.createContinueInAppFlow received an .unanswered result, returning error";
    uint64_t v73 = (os_log_s *)v69;
    goto LABEL_13;
  }

  if (v84)
  {
    int v85 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)int v85 = 0;
    _os_log_impl( &dword_0,  (os_log_t)v69,  v83,  "PromptForConfirmationFlow.createContinueInAppFlow received an unknown result, returning error",  v85,  2u);
    swift_slowDealloc(v85, -1LL, -1LL);
  }

  type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSError,  &OBJC_CLASS___NSError_ptr);
  id v86 = static NSError.userCancelled.getter();
  static InstrumentationUtils.emitLinkFlowFailedInstrumentation(error:)();

  id v87 = v86;
  uint64_t v88 = (void *)_convertErrorToNSError(_:)(v87);

  [a4 respondWithError:v88];
  v32(v36, v13);
}

id static NSError.userCancelled.getter()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  id v3 = objc_allocWithZone(&OBJC_CLASS___NSError);
  return @nonobjc NSError.init(domain:code:userInfo:)(v0, v2, 3072LL, 0LL);
}

uint64_t closure #1 in LinkRCHFlow.runAppProtectionCheckFlow(completionHandler:iterator:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v10 = type metadata accessor for AppResolutionFlowResult(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v63 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v63 - v18;
  outlined init with copy of AppShortcutInvoking(a3, (uint64_t)&v70);
  v71[48] = 2;
  swift_beginAccess(a2 + 48, &v68, 33LL, 0LL);
  outlined assign with take of LinkRCHFlow.State((uint64_t)&v70, (void *)(a2 + 48));
  swift_endAccess(&v68);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v20(v19, a1, v10);
  int v21 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v19, v10);
  if (v21 == enum case for AppResolutionFlowResult.resolved(_:))
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v19, v10);
    uint64_t v22 = *(void *)v19;
LABEL_5:
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v23, (uint64_t)static Logger.voiceCommands);
    uint64_t v24 = swift_retain(v22);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v67 = a5;
      uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      uint64_t v70 = v28;
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v68 = v22;
      uint64_t v29 = type metadata accessor for App(0LL);
      lazy protocol witness table accessor for type LinkRCHFlow and conformance LinkRCHFlow( &lazy protocol witness table cache variable for type App and conformance App,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for App);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(v29, v30);
      unint64_t v33 = v32;
      uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69, v27 + 4);
      swift_release_n(v22, 2LL);
      swift_bridgeObjectRelease(v33);
      _os_log_impl(&dword_0, v25, v26, "#LinkRCHFlow runAppProtectionCheckFlow - resolved app: %s", v27, 0xCu);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v22, 2LL);
    }

    uint64_t v34 = 1LL;
    return a4(v34);
  }

  if (v21 == enum case for AppResolutionFlowResult.resolvedWithIntent(_:))
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v19, v10);
    uint64_t v22 = *(void *)v19;

    goto LABEL_5;
  }

  if (v21 == enum case for AppResolutionFlowResult.error(_:))
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v19, v10);
    uint64_t v36 = *(void *)v19;
    int v37 = v19[8];
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v38 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v38, (uint64_t)static Logger.voiceCommands);
    swift_errorRetain(v36);
    uint64_t v39 = swift_errorRetain(v36);
    int v40 = (os_log_s *)Logger.logObject.getter(v39);
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = swift_slowAlloc(18LL, -1LL);
      LODWORD(v67) = v37;
      uint64_t v43 = v42;
      int v44 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v43 = 138412546;
      swift_errorRetain(v36);
      uint64_t v45 = _swift_stdlib_bridgeErrorToNSError(v36);
      uint64_t v70 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71, v43 + 4);
      *int v44 = v45;
      swift_errorRelease(v36);
      swift_errorRelease(v36);
      *(_WORD *)(v43 + 1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 1024;
      LODWORD(v70) = v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, (char *)&v70 + 4, v43 + 14);
      _os_log_impl( &dword_0,  v40,  v41,  "#LinkRCHFlow runAppProtectionCheckFlow - error: %@; \n\t handled=%{BOOL}d",
        (uint8_t *)v43,
        0x12u);
      uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v44, 1LL, v46);
      swift_slowDealloc(v44, -1LL, -1LL);
      swift_slowDealloc(v43, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v36);
      swift_errorRelease(v36);
    }

    a4(0LL);
    return swift_errorRelease(v36);
  }

  else
  {
    if (v21 == enum case for AppResolutionFlowResult.cancelled(_:))
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v47 = type metadata accessor for Logger(0LL);
      uint64_t v48 = __swift_project_value_buffer(v47, (uint64_t)static Logger.voiceCommands);
      uint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
      os_log_type_t v50 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v49, v50))
      {
        int v51 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)int v51 = 0;
        _os_log_impl(&dword_0, v49, v50, "#LinkRCHFlow runAppProtectionCheckFlow - cancelled", v51, 2u);
        swift_slowDealloc(v51, -1LL, -1LL);
      }

      uint64_t v34 = 0LL;
      return a4(v34);
    }

    uint64_t v67 = a5;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v52 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v52, (uint64_t)static Logger.voiceCommands);
    uint64_t v53 = ((uint64_t (*)(char *, uint64_t, uint64_t))v20)(v17, a1, v10);
    int v54 = (os_log_s *)Logger.logObject.getter(v53);
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      int v56 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v66 = swift_slowAlloc(32LL, -1LL);
      uint64_t v70 = v66;
      int v65 = v56;
      *(_DWORD *)int v56 = 136315138;
      int v64 = v56 + 4;
      v20(v14, (uint64_t)v17, v10);
      uint64_t v57 = String.init<A>(describing:)(v14, v10);
      unint64_t v59 = v58;
      uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69, v64);
      swift_bridgeObjectRelease(v59);
      int v60 = *(void (**)(char *, uint64_t))(v11 + 8);
      v60(v17, v10);
      int v61 = v65;
      _os_log_impl( &dword_0,  v54,  v55,  "#LinkRCHFlow runAppProtectionCheckFlow - received unexpected appResolutionFlowResult: %s",  v65,  0xCu);
      uint64_t v62 = v66;
      swift_arrayDestroy(v66, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1LL, -1LL);
      swift_slowDealloc(v61, -1LL, -1LL);
    }

    else
    {
      int v60 = *(void (**)(char *, uint64_t))(v11 + 8);
      v60(v17, v10);
    }

    a4(0LL);
    return ((uint64_t (*)(char *, uint64_t))v60)(v19, v10);
  }

id LNEnvironment.__allocating_init(localeIdentifier:)(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [v4 initWithLocaleIdentifier:v5];

  return v6;
}

uint64_t LinkRCHFlow.deinit()
{
  swift_release();
  swift_release();
  outlined destroy of LinkRCHFlow.State((void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 120));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 128));
  outlined destroy of Any?(v0 + 168, &demangling cache variable for type metadata for SiriWorkflowRunning?);
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 208));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 248));
  return v0;
}

uint64_t LinkRCHFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 288LL, 7LL);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance LinkRCHFlow(uint64_t a1, uint64_t a2)
{
  return LinkRCHFlow.execute(completion:)(a1, a2);
}

uint64_t protocol witness for Flow.execute() in conformance LinkRCHFlow(uint64_t a1)
{
  id v3 = (void *)swift_task_alloc(dword_219AFC);
  *(void *)(v1 + 16) = v3;
  *id v3 = v1;
  v3[1] = protocol witness for Flow.execute() in conformance WorkflowRunnerFlow;
  return LinkRCHFlow.execute()(a1);
}

void protocol witness for Flow.exitValue.getter in conformance LinkRCHFlow(uint64_t a1@<X8>)
{
  *(void *)a1 = v2;
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v3;
}

id @nonobjc NSError.init(domain:code:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (a4)
  {
    v9.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a4);
  }

  else
  {
    v9.super.Class isa = 0LL;
  }

  id v10 = [v4 initWithDomain:v8 code:a3 userInfo:v9.super.isa];

  return v10;
}

void outlined bridged method (mbnn) of @objc LNActionExecutorOptions.clientLabel.setter( uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  [a3 setClientLabel:v5];
}

void specialized ShortcutsLinkRCHFlowStrategy.init(appBundleId:actionMetadata:showWhenRun:deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:outputPublisher:aceServiceInvoker:linkActionPatterns:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23)
{
  uint64_t v24 = v23;
  uint64_t v54 = v25;
  uint64_t v55 = v26;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  unint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  type metadata accessor for CATOption(0LL);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v37);
  OUTLINED_FUNCTION_35();
  uint64_t v40 = v39 - v38;
  uint64_t v41 = type metadata accessor for RunLinkActionCATPatternsExecutor(0LL);
  v58[3] = v41;
  v58[4] = &protocol witness table for RunLinkActionCATPatternsExecutor;
  v58[0] = a22;
  *(void *)(a23 + 16) = v36;
  *(void *)(a23 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v34;
  *(void *)(a23 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v32;
  OUTLINED_FUNCTION_100_2(v41, a23 + 40);
  *(_BYTE *)(a23 + 80) = v30;
  outlined init with copy of AppShortcutInvoking((uint64_t)v24, a23 + 88);
  outlined init with copy of AppShortcutInvoking((uint64_t)a21, a23 + 128);
  OUTLINED_FUNCTION_100_2(v42, (uint64_t)v57);
  outlined init with copy of AppShortcutInvoking((uint64_t)v58, (uint64_t)v56);
  type metadata accessor for RunVoiceCommandCATs(0LL);
  id v43 = v32;
  static CATOption.defaultMode.getter();
  CATWrapper.__allocating_init(options:globals:)(v40, 0LL);
  OUTLINED_FUNCTION_123_3();
  static CATOption.defaultMode.getter();
  uint64_t v44 = CATWrapperSimple.__allocating_init(options:globals:)(v40, 0LL);

  __swift_destroy_boxed_opaque_existential_1Tm(v58);
  __swift_destroy_boxed_opaque_existential_1Tm(a21);
  __swift_destroy_boxed_opaque_existential_1Tm(v24);
  __swift_destroy_boxed_opaque_existential_1Tm(v28);
  uint64_t v45 = type metadata accessor for LinkActionDialogTemplating();
  uint64_t v46 = (void *)OUTLINED_FUNCTION_19(v45, 128LL);
  uint64_t v47 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v56, v56[3]);
  __chkstk_darwin(v47);
  OUTLINED_FUNCTION_35();
  os_log_type_t v50 = (uint64_t *)(v49 - v48);
  OUTLINED_FUNCTION_80_4(v49 - v48, v52, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 16));
  uint64_t v53 = specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)( v57,  v54,  v55,  v30,  v44,  *v50,  v46);
  __swift_destroy_boxed_opaque_existential_1Tm(v56);
  *(void *)(a23 + 16__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v53;
  OUTLINED_FUNCTION_24_0();
}

uint64_t specialized LinkRCHFlow.__allocating_init(action:actionMetadata:bundleId:showWhenRun:connection:workflowRunner:serviceInvoker:deviceState:overrideStrategy:outputPublisher:)( void *a1, void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v27 = a7;
  uint64_t v28 = a8;
  int v26 = a5;
  uint64_t v25 = a4;
  __int128 v24 = a9;
  uint64_t v17 = *(void *)(a12 - 8);
  uint64_t v18 = __chkstk_darwin(a11);
  uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = swift_allocObject(v18, 288LL, 7LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, a6, a12);
  uint64_t v22 = specialized LinkRCHFlow.init(action:actionMetadata:bundleId:showWhenRun:connection:workflowRunner:serviceInvoker:deviceState:overrideStrategy:outputPublisher:)( a1,  a2,  a3,  v25,  v26,  (uint64_t)v20,  v27,  v28,  (void *)v24,  *((uint64_t *)&v24 + 1),  a10,  v21,  a12,  a13);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a6, a12);
  return v22;
}

uint64_t outlined init with copy of LinkRCHFlow.State(void *a1, uint64_t a2)
{
  return a2;
}

void *outlined destroy of LinkRCHFlow.State(void *a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type LinkRCHFlowError and conformance LinkRCHFlowError()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkRCHFlowError and conformance LinkRCHFlowError;
  if (!lazy protocol witness table cache variable for type LinkRCHFlowError and conformance LinkRCHFlowError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LinkRCHFlowError,  &type metadata for LinkRCHFlowError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LinkRCHFlowError and conformance LinkRCHFlowError);
  }

  return result;
}

uint64_t specialized LinkRCHFlow.init(action:actionMetadata:bundleId:showWhenRun:connection:workflowRunner:serviceInvoker:deviceState:overrideStrategy:outputPublisher:)( void *a1, void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v66 = (__int128 *)a8;
  HIDWORD(v56) = a5;
  uint64_t v63 = a4;
  uint64_t v57 = a3;
  uint64_t v62 = a11;
  uint64_t v61 = a10;
  uint64_t v18 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v70[3] = a13;
  v70[4] = a14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v70);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a13 - 8) + 32LL))( boxed_opaque_existential_1,  a6,  a13);
  *(void *)(a12 + 16) = a1;
  *(void *)(a12 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a2;
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(a14 + 16);
  id v64 = a1;
  id v23 = a2;
  __int128 v24 = v22;
  id v25 = v23;
  unint64_t v58 = boxed_opaque_existential_1;
  uint64_t v59 = a13;
  uint64_t v60 = a14;
  *(void *)(a12 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v24(a13, a14);
  *(void *)(a12 + 120) = v26;
  uint64_t v65 = a7;
  uint64_t v27 = v61;
  outlined init with copy of AppDisplayInfo?( a7,  a12 + 168,  &demangling cache variable for type metadata for SiriWorkflowRunning?);
  outlined init with copy of AppShortcutInvoking((uint64_t)a9, a12 + 208);
  if (v27)
  {
    uint64_t v28 = v62;
    swift_retain(v27);
    swift_bridgeObjectRelease(v63);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v29 = type metadata accessor for Logger(0LL);
    uint64_t v30 = __swift_project_value_buffer(v29, (uint64_t)static Logger.voiceCommands);
    uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl(&dword_0, v31, v32, "#LinkRCHFlow init - overriding strategy", v33, 2u);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    uint64_t v34 = v27;
  }

  else
  {
    outlined init with copy of AppShortcutInvoking((uint64_t)a9, (uint64_t)v69);
    uint64_t v28 = v62;
    outlined init with copy of AppShortcutInvoking((uint64_t)v62, (uint64_t)v68);
    outlined init with copy of AppShortcutInvoking((uint64_t)v66, (uint64_t)v67);
    type metadata accessor for RunLinkActionCATs(0LL);
    id v55 = v25;
    static CATOption.defaultMode.getter(v55);
    uint64_t v54 = CATWrapper.__allocating_init(options:globals:)(v20, 0LL);
    uint64_t v35 = type metadata accessor for RunLinkActionCATsSimple(0LL);
    static CATOption.defaultMode.getter(v35);
    uint64_t v36 = CATWrapperSimple.__allocating_init(options:globals:)(v20, 0LL);
    uint64_t v37 = type metadata accessor for RunLinkActionCATPatternsExecutor(0LL);
    static CATOption.defaultMode.getter(v37);
    uint64_t v38 = CATWrapper.__allocating_init(options:globals:)(v20, 0LL);
    uint64_t v39 = type metadata accessor for ShortcutsLinkRCHFlowStrategy();
    uint64_t v40 = swift_allocObject(v39, 176LL, 7LL);
    specialized ShortcutsLinkRCHFlowStrategy.init(appBundleId:actionMetadata:showWhenRun:deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:outputPublisher:aceServiceInvoker:linkActionPatterns:)( v57,  v63,  (uint64_t)v55,  BYTE4(v56) & 1,  (uint64_t)v69,  v54,  v36,  (uint64_t)v68,  (uint64_t)v67,  v38,  v40,  v53,  v54,  (uint64_t)v55,  v56,  v57,  (uint64_t)v58,  v59,  v60,  v61,  v62,  v63,  (uint64_t)v64);
  }

  *(void *)(a12 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v34;
  id v41 = [v25 systemProtocols];
  uint64_t v42 = type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol,  &OBJC_CLASS___LNSystemProtocol_ptr);
  uint64_t v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v41, v42);

  id v44 = [(id)objc_opt_self(LNSystemProtocol) sessionStartingProtocol];
  char v45 = specialized Sequence<>.contains(_:)((uint64_t)v44, v43);
  swift_bridgeObjectRelease(v43);

  if ((v45 & 1) != 0)
  {
    uint64_t v46 = v24(v59, v60);
    uint64_t v48 = v47;

    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm(v28);
    __swift_destroy_boxed_opaque_existential_1Tm(a9);
    outlined destroy of Any?(v65, &demangling cache variable for type metadata for SiriWorkflowRunning?);
    uint64_t v49 = type metadata accessor for LinkActivityManager();
    uint64_t v50 = swift_allocObject(v49, 32LL, 7LL);
    *(void *)(v50 + 16) = v46;
    *(void *)(v50 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v48;
  }

  else
  {

    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm(v28);
    __swift_destroy_boxed_opaque_existential_1Tm(a9);
    outlined destroy of Any?(v65, &demangling cache variable for type metadata for SiriWorkflowRunning?);
    uint64_t v50 = 0LL;
  }

  uint64_t v51 = v66;
  *(void *)(a12 + 40) = v50;
  outlined init with take of AceServiceInvokerAsync(v51, a12 + 128);
  outlined init with copy of AppShortcutInvoking((uint64_t)v70, a12 + 248);
  *(_OWORD *)(a12 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0u;
  *(_OWORD *)(a12 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0u;
  *(_OWORD *)(a12 + 80) = 0u;
  *(void *)(a12 + 96) = 0LL;
  *(_BYTE *)(a12 + 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 12;
  __swift_destroy_boxed_opaque_existential_1Tm(v70);
  return a12;
}

uint64_t type metadata accessor for LinkRCHFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin11LinkRCHFlow);
}

uint64_t partial apply for closure #4 in LinkRCHFlow.execute()(uint64_t a1)
{
  return closure #3 in LinkRCHFlow.execute()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), 10);
}

uint64_t partial apply for closure #1 in LinkRCHFlow.execute()()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  id v4 = (void *)swift_task_alloc(dword_219B04);
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = partial apply for closure #1 in WorkflowRunnerFlow.execute();
  return closure #1 in LinkRCHFlow.execute()(v2, v3);
}

void outlined consume of LinkConnectionEvent?(void *a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    outlined consume of LinkConnectionEvent(a1, a2, a3);
  }
}

uint64_t objectdestroyTm_0()
{
  uint64_t v1 = OUTLINED_FUNCTION_105_1();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t partial apply for closure #3 in LinkRCHFlow.execute()(uint64_t a1)
{
  return closure #3 in LinkRCHFlow.execute()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), 8);
}

void *outlined assign with take of LinkRCHFlow.State(uint64_t a1, void *a2)
{
  return a2;
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in LinkRCHFlow.execute()(char a1)
{
  return implicit closure #2 in implicit closure #1 in LinkRCHFlow.execute()(a1 & 1);
}

uint64_t sub_C0A2C()
{
  uint64_t v0 = OUTLINED_FUNCTION_105_1();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t partial apply for closure #1 in LinkRCHFlow.responseFrom(event:iterator:)(uint64_t a1)
{
  id v4 = (void *)swift_task_alloc(dword_219B24);
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance WorkflowRunnerFlow;
  return closure #1 in LinkRCHFlow.responseFrom(event:iterator:)(a1, v1);
}

uint64_t sub_C0A9C()
{
  uint64_t v1 = OUTLINED_FUNCTION_105_1();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t partial apply for closure #2 in LinkRCHFlow.responseFrom(event:iterator:)()
{
  return closure #2 in LinkRCHFlow.responseFrom(event:iterator:)(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

void partial apply for closure #1 in LinkRCHFlow.createNeedsDisambiguationFlow(request:iterator:selectedValues:)()
{
}

{
  OUTLINED_FUNCTION_33_16();
  OUTLINED_FUNCTION_7_23();
  closure #1 in LinkRCHFlow.createDismbiguatingNeedsValueFlow(request:actionParameterMetadata:iterator:selectedValues:)();
}

uint64_t partial apply for closure #1 in LinkRCHFlow.createNeedsConfirmationFlow(request:iterator:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const char *a9)
{
  return partial apply for closure #1 in LinkRCHFlow.createNeedsConfirmationFlow(request:iterator:)( a1,  "PromptForConfirmationFlow.createNeedsConfirmationFlow received %s",  a9);
}

uint64_t sub_C0AFC()
{
  unint64_t v3 = (v2 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  OUTLINED_FUNCTION_112_1(v4);
  swift_release();
  swift_release();

  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v1 + v3));
  return OUTLINED_FUNCTION_44_12(v1, v3 + 40, v0);
}

uint64_t partial apply for closure #1 in LinkRCHFlow.createNeedsValueFlow(request:iterator:selectedValues:)( uint64_t a1)
{
  uint64_t v3 = *(void *)(OUTLINED_FUNCTION_33_16() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return closure #1 in LinkRCHFlow.createNeedsValueFlow(request:iterator:selectedValues:)( a1,  v1 + v4,  *(const char **)(v1 + v5),  *(void *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void **)(v1 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)),  v1 + ((((((v5 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL));
}

uint64_t partial apply for closure #1 in LinkRCHFlow.createNeedsActionConfirmationFlow(request:iterator:)( uint64_t a1)
{
  return partial apply for closure #1 in LinkRCHFlow.createNeedsConfirmationFlow(request:iterator:)( a1,  "PromptForConfirmationFlow.createNeedsActionConfirmationFlow received %s",  "LinkRCHFlowNeedsActionConfirmation",  static InstrumentationUtils.emitActionConfirmationEndedInstrumentation(isCorrectAction:),  7LL);
}

#error "C0C3C: call analysis failed (funcsize=25)"
uint64_t sub_C0C58()
{
  uint64_t v0;
  OUTLINED_FUNCTION_102_3();
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 24));

  return swift_deallocObject(v0, 72LL, 7LL);
}

void partial apply for closure #1 in LinkRCHFlow.createContinueInAppFlow(request:iterator:)(uint64_t a1)
{
}

uint64_t objectdestroy_17Tm()
{
  unint64_t v3 = (v2 + 47) & 0xFFFFFFFFFFFFFFF8LL;
  OUTLINED_FUNCTION_112_1(v4);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v1 + v2));

  return OUTLINED_FUNCTION_44_12(v1, v3 + 8, v0);
}

void partial apply for closure #1 in LinkRCHFlow.createDismbiguatingNeedsValueFlow(request:actionParameterMetadata:iterator:selectedValues:)()
{
}

void base witness table accessor for Flow in LinkRCHFlow(uint64_t a1, uint64_t a2)
{
}

void base witness table accessor for SiriEnvironmentLocating in LinkRCHFlow(uint64_t a1, uint64_t a2)
{
}

uint64_t initializeBufferWithCopyOfBuffer for LinkRCHFlowResult(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  outlined copy of LinkRCHFlowResult(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v4;
  return a1;
}

void destroy for LinkRCHFlowResult(uint64_t a1)
{
}

void outlined consume of LinkRCHFlowResult(id a1, char a2)
{
  if (a2 == 2 || a2 == 1)
  {
    swift_errorRelease(a1);
  }

  else if (!a2)
  {
  }

uint64_t assignWithCopy for LinkRCHFlowResult(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  outlined copy of LinkRCHFlowResult(*(id *)a2, v4);
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = v3;
  char v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v4;
  outlined consume of LinkRCHFlowResult(v5, v6);
  return a1;
}

uint64_t assignWithTake for LinkRCHFlowResult(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v3;
  outlined consume of LinkRCHFlowResult(v4, v5);
  return a1;
}

ValueMetadata *type metadata accessor for LinkRCHFlowResult()
{
  return &type metadata for LinkRCHFlowResult;
}

void *initializeBufferWithCopyOfBuffer for LinkRCHFlowError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for LinkRCHFlowError(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void *assignWithCopy for LinkRCHFlowError(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

void *assignWithTake for LinkRCHFlowError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkRCHFlowError(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 16))
    {
      LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkRCHFlowError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LinkRCHFlowError()
{
  return &type metadata for LinkRCHFlowError;
}

void destroy for LinkRCHFlow.State(void *a1)
{
  uint64_t v1 = a1;
  unsigned int v2 = *((unsigned __int8 *)a1 + 56);
  if (v2 >= 0xC) {
    unsigned int v2 = *(_DWORD *)a1 + 12;
  }
  switch(v2)
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
      goto LABEL_7;
    case 4u:
    case 6u:

      swift_bridgeObjectRelease(v1[1]);
      uint64_t v3 = v1 + 2;
      goto LABEL_8;
    case 5u:
    case 7u:
      uint64_t v1 = a1 + 1;

LABEL_7:
      uint64_t v3 = v1;
LABEL_8:
      __swift_destroy_boxed_opaque_existential_1Tm(v3);
      break;
    case 8u:
    case 9u:
    case 0xAu:
      swift_errorRelease(*a1);
      break;
    case 0xBu:

      break;
    default:
      return;
  }

uint64_t initializeWithCopy for LinkRCHFlow.State(uint64_t a1, void *a2)
{
  unsigned int v3 = *((unsigned __int8 *)a2 + 56);
  if (v3 >= 0xC) {
    unsigned int v3 = *(_DWORD *)a2 + 12;
  }
  switch(v3)
  {
    case 0u:
      __int128 v4 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v4;
      (**(void (***)(uint64_t))(v4 - 8))(a1);
      *(_BYTE *)(a1 + 56) = 0;
      return a1;
    case 1u:
      __int128 v5 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v5;
      (**(void (***)(uint64_t))(v5 - 8))(a1);
      char v6 = 1;
      goto LABEL_15;
    case 2u:
      __int128 v7 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v7;
      (**(void (***)(uint64_t))(v7 - 8))(a1);
      char v6 = 2;
      goto LABEL_15;
    case 3u:
      __int128 v8 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v8;
      (**(void (***)(uint64_t))(v8 - 8))(a1);
      char v6 = 3;
      goto LABEL_15;
    case 4u:
      NSDictionary v9 = (void *)*a2;
      uint64_t v10 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v10;
      uint64_t v11 = a2 + 2;
      __int128 v12 = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 40) = v12;
      uint64_t v13 = v12;
      uint64_t v14 = **(void (***)(uint64_t, void *, uint64_t))(v12 - 8);
      id v15 = v9;
      swift_bridgeObjectRetain(v10);
      v14(a1 + 16, v11, v13);
      char v6 = 4;
      goto LABEL_15;
    case 5u:
      uint64_t v16 = (void *)*a2;
      *(void *)a1 = *a2;
      uint64_t v17 = a2 + 1;
      __int128 v18 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v18;
      uint64_t v19 = v18;
      uint64_t v20 = **(void (***)(uint64_t, void *, uint64_t))(v18 - 8);
      id v21 = v16;
      v20(a1 + 8, v17, v19);
      char v6 = 5;
      goto LABEL_15;
    case 6u:
      uint64_t v22 = (void *)*a2;
      uint64_t v23 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v23;
      __int128 v24 = a2 + 2;
      __int128 v25 = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 40) = v25;
      uint64_t v26 = v25;
      uint64_t v27 = **(void (***)(uint64_t, void *, uint64_t))(v25 - 8);
      id v28 = v22;
      swift_bridgeObjectRetain(v23);
      v27(a1 + 16, v24, v26);
      char v6 = 6;
      goto LABEL_15;
    case 7u:
      uint64_t v29 = (void *)*a2;
      *(void *)a1 = *a2;
      uint64_t v30 = a2 + 1;
      __int128 v31 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v31;
      uint64_t v32 = v31;
      uint64_t v33 = **(void (***)(uint64_t, void *, uint64_t))(v31 - 8);
      id v34 = v29;
      v33(a1 + 8, v30, v32);
      char v6 = 7;
      goto LABEL_15;
    case 8u:
      uint64_t v35 = *a2;
      swift_errorRetain(*a2);
      *(void *)a1 = v35;
      char v6 = 8;
      goto LABEL_15;
    case 9u:
      uint64_t v36 = *a2;
      swift_errorRetain(*a2);
      *(void *)a1 = v36;
      char v6 = 9;
      goto LABEL_15;
    case 0xAu:
      uint64_t v37 = *a2;
      swift_errorRetain(*a2);
      *(void *)a1 = v37;
      char v6 = 10;
LABEL_15:
      *(_BYTE *)(a1 + 56) = v6;
      break;
    case 0xBu:
      uint64_t v39 = (void *)*a2;
      *(void *)a1 = *a2;
      *(_BYTE *)(a1 + 56) = 11;
      id v40 = v39;
      break;
    default:
      __int128 v41 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v41;
      *(_OWORD *)(a1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
      break;
  }

  return a1;
}

uint64_t *assignWithCopy for LinkRCHFlow.State(uint64_t *a1, uint64_t *a2)
{
  unsigned int v2 = a1;
  if (a1 != a2)
  {
    unsigned int v4 = *((unsigned __int8 *)a1 + 56);
    if (v4 >= 0xC) {
      unsigned int v4 = *(_DWORD *)a1 + 12;
    }
    switch(v4)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
        goto LABEL_8;
      case 4u:
      case 6u:

        swift_bridgeObjectRelease(v2[1]);
        a1 = v2 + 2;
        goto LABEL_8;
      case 5u:
      case 7u:

        a1 = v2 + 1;
LABEL_8:
        __swift_destroy_boxed_opaque_existential_1Tm(a1);
        break;
      case 8u:
      case 9u:
      case 0xAu:
        swift_errorRelease(*a1);
        break;
      case 0xBu:

        break;
      default:
        break;
    }

    unsigned int v5 = *((unsigned __int8 *)a2 + 56);
    if (v5 >= 0xC) {
      unsigned int v5 = *(_DWORD *)a2 + 12;
    }
    switch(v5)
    {
      case 0u:
        uint64_t v6 = a2[3];
        v2[3] = v6;
        v2[4] = a2[4];
        (**(void (***)(uint64_t *, uint64_t *))(v6 - 8))(v2, a2);
        *((_BYTE *)v2 + 56) = 0;
        return v2;
      case 1u:
        uint64_t v10 = a2[3];
        v2[3] = v10;
        v2[4] = a2[4];
        (**(void (***)(uint64_t *, uint64_t *))(v10 - 8))(v2, a2);
        char v11 = 1;
        goto LABEL_25;
      case 2u:
        uint64_t v12 = a2[3];
        v2[3] = v12;
        v2[4] = a2[4];
        (**(void (***)(uint64_t *, uint64_t *))(v12 - 8))(v2, a2);
        char v11 = 2;
        goto LABEL_25;
      case 3u:
        uint64_t v13 = a2[3];
        v2[3] = v13;
        v2[4] = a2[4];
        (**(void (***)(uint64_t *, uint64_t *))(v13 - 8))(v2, a2);
        char v11 = 3;
        goto LABEL_25;
      case 4u:
        uint64_t v14 = (void *)*a2;
        *unsigned int v2 = *a2;
        uint64_t v15 = a2[1];
        v2[1] = v15;
        uint64_t v16 = a2 + 2;
        uint64_t v17 = a2[5];
        v2[5] = v17;
        v2[6] = a2[6];
        __int128 v18 = **(void (***)(uint64_t *, uint64_t *, uint64_t, __n128))(v17 - 8);
        id v19 = v14;
        __n128 v20 = swift_bridgeObjectRetain(v15);
        v18(v2 + 2, v16, v17, v20);
        char v11 = 4;
        goto LABEL_25;
      case 5u:
        id v21 = (void *)*a2;
        *unsigned int v2 = *a2;
        uint64_t v22 = a2 + 1;
        uint64_t v23 = a2[4];
        v2[4] = v23;
        v2[5] = a2[5];
        __int128 v24 = **(void (***)(uint64_t *, uint64_t *, uint64_t))(v23 - 8);
        id v25 = v21;
        v24(v2 + 1, v22, v23);
        char v11 = 5;
        goto LABEL_25;
      case 6u:
        uint64_t v26 = (void *)*a2;
        *unsigned int v2 = *a2;
        uint64_t v27 = a2[1];
        v2[1] = v27;
        id v28 = a2 + 2;
        uint64_t v29 = a2[5];
        v2[5] = v29;
        v2[6] = a2[6];
        uint64_t v30 = **(void (***)(uint64_t *, uint64_t *, uint64_t, __n128))(v29 - 8);
        id v31 = v26;
        __n128 v32 = swift_bridgeObjectRetain(v27);
        v30(v2 + 2, v28, v29, v32);
        char v11 = 6;
        goto LABEL_25;
      case 7u:
        uint64_t v33 = (void *)*a2;
        *unsigned int v2 = *a2;
        id v34 = a2 + 1;
        uint64_t v35 = a2[4];
        v2[4] = v35;
        v2[5] = a2[5];
        uint64_t v36 = **(void (***)(uint64_t *, uint64_t *, uint64_t))(v35 - 8);
        id v37 = v33;
        v36(v2 + 1, v34, v35);
        char v11 = 7;
        goto LABEL_25;
      case 8u:
        uint64_t v38 = *a2;
        swift_errorRetain(v38);
        *unsigned int v2 = v38;
        char v11 = 8;
        goto LABEL_25;
      case 9u:
        uint64_t v39 = *a2;
        swift_errorRetain(v39);
        *unsigned int v2 = v39;
        char v11 = 9;
        goto LABEL_25;
      case 0xAu:
        uint64_t v40 = *a2;
        swift_errorRetain(v40);
        *unsigned int v2 = v40;
        char v11 = 10;
LABEL_25:
        *((_BYTE *)v2 + 56) = v11;
        break;
      case 0xBu:
        uint64_t v42 = (void *)*a2;
        *unsigned int v2 = *a2;
        *((_BYTE *)v2 + 56) = 11;
        id v43 = v42;
        break;
      default:
        __int128 v7 = *(_OWORD *)a2;
        __int128 v8 = *((_OWORD *)a2 + 1);
        __int128 v9 = *((_OWORD *)a2 + 2);
        *(_OWORD *)((char *)v2 + 41) = *(_OWORD *)((char *)a2 + 41);
        *((_OWORD *)v2 + 1) = v8;
        *((_OWORD *)v2 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v9;
        *(_OWORD *)unsigned int v2 = v7;
        break;
    }
  }

  return v2;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v4;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for LinkRCHFlow.State(void *a1, uint64_t a2)
{
  unsigned int v2 = a1;
  if (a1 != (void *)a2)
  {
    unsigned int v4 = *((unsigned __int8 *)a1 + 56);
    if (v4 >= 0xC) {
      unsigned int v4 = *(_DWORD *)a1 + 12;
    }
    switch(v4)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
        goto LABEL_8;
      case 4u:
      case 6u:

        swift_bridgeObjectRelease(v2[1]);
        a1 = v2 + 2;
        goto LABEL_8;
      case 5u:
      case 7u:

        a1 = v2 + 1;
LABEL_8:
        __swift_destroy_boxed_opaque_existential_1Tm(a1);
        break;
      case 8u:
      case 9u:
      case 0xAu:
        swift_errorRelease(*a1);
        break;
      case 0xBu:

        break;
      default:
        break;
    }

    unsigned int v5 = *(unsigned __int8 *)(a2 + 56);
    if (v5 >= 0xC) {
      unsigned int v5 = *(_DWORD *)a2 + 12;
    }
    switch(v5)
    {
      case 0u:
        __int128 v6 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)unsigned int v2 = *(_OWORD *)a2;
        *((_OWORD *)v2 + 1) = v6;
        v2[4] = *(void *)(a2 + 32);
        *((_BYTE *)v2 + 56) = 0;
        return v2;
      case 1u:
        __int128 v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)unsigned int v2 = *(_OWORD *)a2;
        *((_OWORD *)v2 + 1) = v8;
        v2[4] = *(void *)(a2 + 32);
        char v9 = 1;
        goto LABEL_26;
      case 2u:
        __int128 v10 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)unsigned int v2 = *(_OWORD *)a2;
        *((_OWORD *)v2 + 1) = v10;
        v2[4] = *(void *)(a2 + 32);
        char v9 = 2;
        goto LABEL_26;
      case 3u:
        __int128 v11 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)unsigned int v2 = *(_OWORD *)a2;
        *((_OWORD *)v2 + 1) = v11;
        v2[4] = *(void *)(a2 + 32);
        char v9 = 3;
        goto LABEL_26;
      case 4u:
        __int128 v12 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)unsigned int v2 = *(_OWORD *)a2;
        *((_OWORD *)v2 + 1) = v12;
        *((_OWORD *)v2 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(_OWORD *)(a2 + 32);
        v2[6] = *(void *)(a2 + 48);
        char v9 = 4;
        goto LABEL_26;
      case 5u:
        __int128 v13 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)unsigned int v2 = *(_OWORD *)a2;
        *((_OWORD *)v2 + 1) = v13;
        *((_OWORD *)v2 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(_OWORD *)(a2 + 32);
        char v9 = 5;
        goto LABEL_26;
      case 6u:
        __int128 v14 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)unsigned int v2 = *(_OWORD *)a2;
        *((_OWORD *)v2 + 1) = v14;
        *((_OWORD *)v2 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(_OWORD *)(a2 + 32);
        v2[6] = *(void *)(a2 + 48);
        char v9 = 6;
        goto LABEL_26;
      case 7u:
        __int128 v15 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)unsigned int v2 = *(_OWORD *)a2;
        *((_OWORD *)v2 + 1) = v15;
        *((_OWORD *)v2 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(_OWORD *)(a2 + 32);
        char v9 = 7;
        goto LABEL_26;
      case 8u:
        *unsigned int v2 = *(void *)a2;
        char v9 = 8;
        goto LABEL_26;
      case 9u:
        *unsigned int v2 = *(void *)a2;
        char v9 = 9;
        goto LABEL_26;
      case 0xAu:
        *unsigned int v2 = *(void *)a2;
        char v9 = 10;
        goto LABEL_26;
      case 0xBu:
        *unsigned int v2 = *(void *)a2;
        char v9 = 11;
LABEL_26:
        *((_BYTE *)v2 + 56) = v9;
        break;
      default:
        __int128 v7 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)unsigned int v2 = *(_OWORD *)a2;
        *((_OWORD *)v2 + 1) = v7;
        *((_OWORD *)v2 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)((char *)v2 + 41) = *(_OWORD *)(a2 + 41);
        break;
    }
  }

  return v2;
}

uint64_t getEnumTagSinglePayload for LinkRCHFlow.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xF4 && *(_BYTE *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 244);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 >= 0xD) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for LinkRCHFlow.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF3)
  {
    *(_OWORD *)(result + 41) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_DWORD *)__n128 result = a2 - 244;
    if (a3 >= 0xF4) {
      *(_BYTE *)(result + 57) = 1;
    }
  }

  else
  {
    if (a3 >= 0xF4) {
      *(_BYTE *)(result + 57) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 56) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for LinkRCHFlow.State(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 56);
  return result;
}

uint64_t destructiveInjectEnumTag for LinkRCHFlow.State(uint64_t result, unsigned int a2)
{
  if (a2 > 0xB)
  {
    *(void *)(result + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0LL;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_DWORD *)uint64_t result = a2 - 12;
    LOBYTE(a__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 12;
  }

  *(_BYTE *)(result + 56) = a2;
  return result;
}

void *type metadata accessor for LinkRCHFlow.State()
{
  return &unk_1F8418;
}

uint64_t sub_C1988()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t partial apply for closure #1 in LinkRCHFlow.runAppProtectionCheckFlow(completionHandler:iterator:)( uint64_t a1)
{
  return closure #1 in LinkRCHFlow.runAppProtectionCheckFlow(completionHandler:iterator:)( a1,  *(void *)(v1 + 16),  v1 + 24,  *(uint64_t (**)(uint64_t))(v1 + 64),  *(void *)(v1 + 72));
}

void lazy protocol witness table accessor for type LinkRCHFlow and conformance LinkRCHFlow( unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  if (!*a1)
  {
    uint64_t v4 = a3(a2);
    atomic_store(OUTLINED_FUNCTION_95_2(v4), a1);
  }

  OUTLINED_FUNCTION_1();
}

id OUTLINED_FUNCTION_6_27()
{
  return *(id *)(v0 + 136);
}

  ;
}

void OUTLINED_FUNCTION_8_30()
{
}

  ;
}

uint64_t OUTLINED_FUNCTION_18_25()
{
  return type metadata accessor for OSSignposter(0LL);
}

  ;
}

  ;
}

void OUTLINED_FUNCTION_23_24( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 19__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = (char *)&a9 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t OUTLINED_FUNCTION_24_21()
{
  return swift_endAccess(v0 - 176);
}

void *OUTLINED_FUNCTION_26_22()
{
  return outlined assign with take of LinkRCHFlow.State(v1 - 152, v0);
}

uint64_t OUTLINED_FUNCTION_27_21(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + OUTLINED_FUNCTION_2_24(v3, v4, v5) = v2;
  return swift_retain(v4);
}

uint64_t OUTLINED_FUNCTION_32_17()
{
  return OSSignpostIntervalState.init(id:isOpen:)(v0, 1LL);
}

uint64_t OUTLINED_FUNCTION_33_16()
{
  return type metadata accessor for OSSignposter(0LL);
}

uint64_t OUTLINED_FUNCTION_38_19(_WORD *a1)
{
  *a1 = 0;
  return OSSignpostID.rawValue.getter();
}

uint64_t OUTLINED_FUNCTION_40_20(uint64_t a1, uint64_t a2)
{
  return static ExecuteResponse.ongoing<A>(next:childCompletion:)(*(void *)(v3 - 224), a2, v2);
}

uint64_t OUTLINED_FUNCTION_41_21()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_44_12(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

void OUTLINED_FUNCTION_47_18()
{
}

uint64_t OUTLINED_FUNCTION_48_15(uint64_t a1, unint64_t a2)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 152));
}

uint64_t OUTLINED_FUNCTION_50_16@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 200) = a1;
  return type metadata accessor for OSSignpostID(0LL);
}

uint64_t OUTLINED_FUNCTION_51_19()
{
  return v2;
}

uint64_t OUTLINED_FUNCTION_53_16()
{
  return swift_errorRelease(v0);
}

uint64_t OUTLINED_FUNCTION_54_20()
{
  return type metadata accessor for OSSignpostID(0LL);
}

void *OUTLINED_FUNCTION_57_15()
{
  return outlined assign with take of LinkRCHFlow.State(v1 - 152, v0);
}

uint64_t OUTLINED_FUNCTION_59_9()
{
  return swift_retain(v0);
}

void OUTLINED_FUNCTION_61_17()
{
}

uint64_t OUTLINED_FUNCTION_65_9(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(v3 + 32))(a1 + v1, *(void *)(v4 - 192), v2);
}

uint64_t OUTLINED_FUNCTION_68_10()
{
  return OS_os_log.signpostsEnabled.getter();
}

void *OUTLINED_FUNCTION_69_8(uint64_t a1)
{
  return outlined assign with take of LinkRCHFlow.State(a1, v1);
}

id OUTLINED_FUNCTION_70_10(uint64_t a1, const char *a2)
{
  *(void *)(v3 - 20__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v2;
  return [v2 a2];
}

void OUTLINED_FUNCTION_73_9( void *a1, os_log_s *a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5, const char *a6)
{
}

uint64_t OUTLINED_FUNCTION_74_11()
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8);
  *(void *)(v3 - 200) = v4;
  return v4(v0, v2);
}

uint64_t OUTLINED_FUNCTION_75_9@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *a2 = a3;
  a2[1] = (v3 - 32) | 0x8000000000000000LL;
  *(void *)(v4 - 15__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = result;
  *(_BYTE *)(v4 - 96) = 9;
  return result;
}

uint64_t OUTLINED_FUNCTION_76_6@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_77_9(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 200))(a1, v1);
}

void OUTLINED_FUNCTION_80_6()
{
}

uint64_t OUTLINED_FUNCTION_81_10()
{
  return v2;
}

uint64_t OUTLINED_FUNCTION_84_8()
{
  return type metadata accessor for OSSignpostIntervalState(0LL);
}

double OUTLINED_FUNCTION_86_3()
{
  *(void *)(v0 - 15__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 2LL;
  double result = 0.0;
  *(_OWORD *)(v0 - 14__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0u;
  *(_OWORD *)(v0 - 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0u;
  *(_OWORD *)(v0 - 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
  return result;
}

void OUTLINED_FUNCTION_88_7(uint64_t a1)
{
  *(void *)(v1 - outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 224) = a1;
  outlined init with copy of AppShortcutInvoking(*(void *)(v1 - 216), v1 - 152);
}

uint64_t OUTLINED_FUNCTION_89_7()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v0, v1);
}

uint64_t OUTLINED_FUNCTION_90_4()
{
  return swift_task_dealloc(*(void *)(v0 + 880));
}

uint64_t OUTLINED_FUNCTION_91_3(uint64_t a1)
{
  *(void *)(v1 - 176) = a1;
  return v1 - 176;
}

uint64_t OUTLINED_FUNCTION_92_3()
{
  return OSSignpostID.init(log:)();
}

uint64_t OUTLINED_FUNCTION_93_2()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 96))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_94_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_95_4(uint64_t a1, uint64_t a2)
{
  return static ExecuteResponse.ongoing(next:childCompletion:)(v2, a2, v3);
}

void OUTLINED_FUNCTION_96_2(uint64_t a1, uint64_t a2)
{
}

uint64_t OUTLINED_FUNCTION_98_3()
{
  return swift_errorRelease(v0);
}

  ;
}

void OUTLINED_FUNCTION_100_2(uint64_t a1, uint64_t a2)
{
}

uint64_t OUTLINED_FUNCTION_101_2()
{
  return *(void *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_102_3()
{
  return swift_release(*(void *)(v0 + 16));
}

uint64_t OUTLINED_FUNCTION_103_3(uint64_t a1)
{
  *(void *)(v1 - 176) = a1;
  return v1 - 176;
}

uint64_t OUTLINED_FUNCTION_104_3()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t OUTLINED_FUNCTION_105_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_107_0(uint64_t a1)
{
  return swift_release_n(a1, 2LL);
}

id OUTLINED_FUNCTION_108_2()
{
  return outlined copy of LinkConnectionEvent(v0, v1, v2);
}

  ;
}

uint64_t OUTLINED_FUNCTION_110_3()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_111_2()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 96))(v0, v2);
}

uint64_t OUTLINED_FUNCTION_112_1@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v2 + v1);
}

uint64_t OUTLINED_FUNCTION_113_2()
{
  *(void *)(v1 - outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 184) = v0;
  return OSSignposter.logHandle.getter();
}

uint64_t OUTLINED_FUNCTION_114_1(uint64_t a1)
{
  return v3(a1, v1, v2);
}

void OUTLINED_FUNCTION_115_0()
{
}

uint64_t OUTLINED_FUNCTION_116_3()
{
  return v0;
}

void OUTLINED_FUNCTION_117_3( void *a1, os_log_s *a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5, const char *a6)
{
}

uint64_t OUTLINED_FUNCTION_118_3()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t OUTLINED_FUNCTION_119_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_120_2(uint64_t a1, uint64_t a2)
{
  return v2;
}

  ;
}

uint64_t OUTLINED_FUNCTION_123_3()
{
  return type metadata accessor for RunVoiceCommandCATsSimple(0LL);
}

uint64_t OUTLINED_FUNCTION_124_2()
{
  return static os_signpost_type_t.begin.getter();
}

  ;
}

uint64_t OUTLINED_FUNCTION_128_0()
{
  return swift_release(v0);
}

uint64_t OUTLINED_FUNCTION_131_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return outlined init with copy of LinkRCHFlow.State(v5, (uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_134_0()
{
  return swift_errorRetain(v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_138_1(uint64_t a1, uint64_t a2)
{
  return static ExecuteResponse.ongoing<A>(next:childCompletion:)(v2, a2, v3);
}

uint64_t OUTLINED_FUNCTION_140_1@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, void)@<X8>)
{
  return a3(a1, a2, *(void *)(v3 - 256));
}

void OUTLINED_FUNCTION_141_1()
{
}

void OUTLINED_FUNCTION_142_1()
{
}

uint64_t OUTLINED_FUNCTION_145_1( uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  return static InstrumentationUtils.emitLinkFlowCancelledInstrumentation(cancellationInitiator:)( 1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24);
}

BOOL OUTLINED_FUNCTION_146_0(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

void OUTLINED_FUNCTION_148_0( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __n128 a10@<Q0>, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void (*a26)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
}

void OUTLINED_FUNCTION_149_1()
{
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::Properties_optional __swiftcall AutoShortcutCATsSimple.Properties.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of AutoShortcutCATsSimple.Properties.init(rawValue:),  v2);
  OUTLINED_FUNCTION_58_2();
  OUTLINED_FUNCTION_1();
  return result;
}

uint64_t AutoShortcutCATsSimple.Properties.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_C2094
                                                                     + 4 * asc_184B10[a1]))( 0xD000000000000018LL,  0x8000000000190FD0LL);
}

void sub_C2094()
{
}

void protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutCATsSimple.Properties( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance AutoShortcutCATsSimple.Properties()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AutoShortcutCATsSimple.Properties( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AutoShortcutCATsSimple.Properties( uint64_t a1)
{
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATsSimple.Properties@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::AutoShortcutCATsSimple::Properties_optional *a2@<X8>)
{
  result.value = AutoShortcutCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AutoShortcutCATsSimple.Properties()
{
  unsigned __int8 v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = AutoShortcutCATsSimple.Properties.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t AutoShortcutCATsSimple.appDisabled(device:appName:wasAlreadyEnabled:)( uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 40) = OUTLINED_FUNCTION_10_8(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutCATsSimple.appDisabled(device:appName:wasAlreadyEnabled:)()
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_19(v4, 176LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_42_13(v5);
  uint64_t v7 = OUTLINED_FUNCTION_4_3(v6, (__n128)xmmword_17FDF0);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    v2[7] = 0LL;
    _BYTE v2[8] = 0LL;
  }

  OUTLINED_FUNCTION_9_27(v7);
  OUTLINED_FUNCTION_12_4(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v10);
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    v2[15] = v0;
    __int128 v13 = OUTLINED_FUNCTION_30_20();
    OUTLINED_FUNCTION_34_2((uint64_t)v13);
    OUTLINED_FUNCTION_12_8();
  }

  char v14 = *(_BYTE *)(v1 + 72);
  v2[16] = 0xD000000000000011LL;
  v2[17] = 0x8000000000195F60LL;
  OUTLINED_FUNCTION_91_4(v14);
  __int128 v15 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 56) = v15;
  *__int128 v15 = v1;
  v15[1] = RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:);
  uint64_t v16 = OUTLINED_FUNCTION_66_12(0xD000000000000018LL);
  return OUTLINED_FUNCTION_24_1(v16, v17, v18, v19);
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::AppDisabledDialogIds_optional __swiftcall AutoShortcutCATsSimple.AppDisabledDialogIds.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of AutoShortcutCATsSimple.AppDisabledDialogIds.init(rawValue:),  v2);
  OUTLINED_FUNCTION_58_2();
  OUTLINED_FUNCTION_1();
  return result;
}

uint64_t AutoShortcutCATsSimple.AppDisabledDialogIds.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)j__OUTLINED_FUNCTION_54_21 + 4 * byte_184B1C[a1]))( 0x64656C6261736964LL,  0xE800000000000000LL);
}

uint64_t sub_C2374()
{
  return 0x6C62616E45736177LL;
}

uint64_t sub_C2390()
{
  return 0x7361576863746177LL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutCATsSimple.AppDisabledDialogIds( char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance AutoShortcutCATsSimple.AppDisabledDialogIds()
{
}

void protocol witness for Hashable.hash(into:) in conformance AutoShortcutCATsSimple.AppDisabledDialogIds( uint64_t a1)
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AutoShortcutCATsSimple.AppDisabledDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::AppDisabledDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATsSimple.AppDisabledDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::AutoShortcutCATsSimple::AppDisabledDialogIds_optional *a2@<X8>)
{
  result.value = AutoShortcutCATsSimple.AppDisabledDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AutoShortcutCATsSimple.AppDisabledDialogIds()
{
  unsigned __int8 v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = AutoShortcutCATsSimple.AppDisabledDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t AutoShortcutCATsSimple.appDisabledAsLabels(device:appName:wasAlreadyEnabled:)( uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 40) = OUTLINED_FUNCTION_10_8(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutCATsSimple.appDisabledAsLabels(device:appName:wasAlreadyEnabled:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t v13 = *(void *)(v11 + 16);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_19(v14, 176LL);
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_42_13(v15);
  uint64_t v17 = OUTLINED_FUNCTION_4_3(v16, (__n128)xmmword_17FDF0);
  if (v13)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState(v17);
  }

  else
  {
    v12[7] = 0LL;
    v12[8] = 0LL;
  }

  OUTLINED_FUNCTION_9_27(v17);
  OUTLINED_FUNCTION_12_4(v19, v18, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v20 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v20);
  if (v21)
  {
    uint64_t v22 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v22, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    v12[15] = v10;
    uint64_t v23 = OUTLINED_FUNCTION_30_20();
    OUTLINED_FUNCTION_34_2((uint64_t)v23);
    OUTLINED_FUNCTION_12_8();
  }

  char v24 = *(_BYTE *)(v11 + 72);
  v12[16] = 0xD000000000000011LL;
  v12[17] = 0x8000000000195F60LL;
  OUTLINED_FUNCTION_91_4(v24);
  id v25 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  *(void *)(v11 + 56) = v25;
  lazy protocol witness table accessor for type AutoShortcutCATsSimple.AppDisabledDialogIds and conformance AutoShortcutCATsSimple.AppDisabledDialogIds();
  *id v25 = v11;
  v25[1] = RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:);
  OUTLINED_FUNCTION_45_1();
  return OUTLINED_FUNCTION_23_3( v26,  v27,  (uint64_t)v12,  (uint64_t)&type metadata for AutoShortcutCATsSimple.AppDisabledDialogIds,  v28,  a10);
}

unint64_t lazy protocol witness table accessor for type AutoShortcutCATsSimple.AppDisabledDialogIds and conformance AutoShortcutCATsSimple.AppDisabledDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.AppDisabledDialogIds and conformance AutoShortcutCATsSimple.AppDisabledDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.AppDisabledDialogIds and conformance AutoShortcutCATsSimple.AppDisabledDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutCATsSimple.AppDisabledDialogIds,  &type metadata for AutoShortcutCATsSimple.AppDisabledDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.AppDisabledDialogIds and conformance AutoShortcutCATsSimple.AppDisabledDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.AppDisabledDialogIds and conformance AutoShortcutCATsSimple.AppDisabledDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.AppDisabledDialogIds and conformance AutoShortcutCATsSimple.AppDisabledDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutCATsSimple.AppDisabledDialogIds,  &type metadata for AutoShortcutCATsSimple.AppDisabledDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.AppDisabledDialogIds and conformance AutoShortcutCATsSimple.AppDisabledDialogIds);
  }

  return result;
}

uint64_t AutoShortcutCATsSimple.appEnabled(device:appName:wasAlreadyEnabled:)( uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 40) = OUTLINED_FUNCTION_10_8(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutCATsSimple.appEnabled(device:appName:wasAlreadyEnabled:)()
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_19(v4, 176LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_42_13(v5);
  uint64_t v7 = OUTLINED_FUNCTION_4_3(v6, (__n128)xmmword_17FDF0);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    v2[7] = 0LL;
    _BYTE v2[8] = 0LL;
  }

  OUTLINED_FUNCTION_9_27(v7);
  OUTLINED_FUNCTION_12_4(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v10);
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    v2[15] = v0;
    uint64_t v13 = OUTLINED_FUNCTION_30_20();
    OUTLINED_FUNCTION_34_2((uint64_t)v13);
    OUTLINED_FUNCTION_12_8();
  }

  char v14 = *(_BYTE *)(v1 + 72);
  v2[16] = 0xD000000000000011LL;
  v2[17] = 0x8000000000195F60LL;
  OUTLINED_FUNCTION_91_4(v14);
  uint64_t v15 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 56) = v15;
  *uint64_t v15 = v1;
  v15[1] = RunVoiceCommandCATsSimple.yesAndCancel(device:intentVerb:);
  uint64_t v16 = OUTLINED_FUNCTION_66_12(0xD000000000000017LL);
  return OUTLINED_FUNCTION_24_1(v16, v17, v18, v19);
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::AppEnabledDialogIds_optional __swiftcall AutoShortcutCATsSimple.AppEnabledDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of AutoShortcutCATsSimple.AppEnabledDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

uint64_t AutoShortcutCATsSimple.AppEnabledDialogIds.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x64656C62616E65LL;
  }
  if (a1 == 1) {
    return 0x6C62616E45736177LL;
  }
  return 0x6863746177LL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutCATsSimple.AppEnabledDialogIds( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance AutoShortcutCATsSimple.AppEnabledDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AutoShortcutCATsSimple.AppEnabledDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AutoShortcutCATsSimple.AppEnabledDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::AppEnabledDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATsSimple.AppEnabledDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::AutoShortcutCATsSimple::AppEnabledDialogIds_optional *a2@<X8>)
{
  result.value = AutoShortcutCATsSimple.AppEnabledDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AutoShortcutCATsSimple.AppEnabledDialogIds()
{
  char v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = AutoShortcutCATsSimple.AppEnabledDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t AutoShortcutCATsSimple.appEnabledAsLabels(device:appName:wasAlreadyEnabled:)( uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 40) = OUTLINED_FUNCTION_10_8(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutCATsSimple.appEnabledAsLabels(device:appName:wasAlreadyEnabled:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t v13 = *(void *)(v11 + 16);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_19(v14, 176LL);
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_42_13(v15);
  uint64_t v17 = OUTLINED_FUNCTION_4_3(v16, (__n128)xmmword_17FDF0);
  if (v13)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState(v17);
  }

  else
  {
    v12[7] = 0LL;
    v12[8] = 0LL;
  }

  OUTLINED_FUNCTION_9_27(v17);
  OUTLINED_FUNCTION_12_4(v19, v18, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v20 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v20);
  if (v21)
  {
    uint64_t v22 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v22, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    v12[15] = v10;
    uint64_t v23 = OUTLINED_FUNCTION_30_20();
    OUTLINED_FUNCTION_34_2((uint64_t)v23);
    OUTLINED_FUNCTION_12_8();
  }

  char v24 = *(_BYTE *)(v11 + 72);
  v12[16] = 0xD000000000000011LL;
  v12[17] = 0x8000000000195F60LL;
  OUTLINED_FUNCTION_91_4(v24);
  id v25 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  *(void *)(v11 + 56) = v25;
  lazy protocol witness table accessor for type AutoShortcutCATsSimple.AppEnabledDialogIds and conformance AutoShortcutCATsSimple.AppEnabledDialogIds();
  *id v25 = v11;
  v25[1] = RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:);
  OUTLINED_FUNCTION_45_1();
  return OUTLINED_FUNCTION_23_3( v26,  v27,  (uint64_t)v12,  (uint64_t)&type metadata for AutoShortcutCATsSimple.AppEnabledDialogIds,  v28,  a10);
}

unint64_t lazy protocol witness table accessor for type AutoShortcutCATsSimple.AppEnabledDialogIds and conformance AutoShortcutCATsSimple.AppEnabledDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.AppEnabledDialogIds and conformance AutoShortcutCATsSimple.AppEnabledDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.AppEnabledDialogIds and conformance AutoShortcutCATsSimple.AppEnabledDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutCATsSimple.AppEnabledDialogIds,  &type metadata for AutoShortcutCATsSimple.AppEnabledDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.AppEnabledDialogIds and conformance AutoShortcutCATsSimple.AppEnabledDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.AppEnabledDialogIds and conformance AutoShortcutCATsSimple.AppEnabledDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.AppEnabledDialogIds and conformance AutoShortcutCATsSimple.AppEnabledDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutCATsSimple.AppEnabledDialogIds,  &type metadata for AutoShortcutCATsSimple.AppEnabledDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.AppEnabledDialogIds and conformance AutoShortcutCATsSimple.AppEnabledDialogIds);
  }

  return result;
}

uint64_t AutoShortcutCATsSimple.confirmChangeEnablement(appName:isEnabling:)(uint64_t a1, char a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutCATsSimple.confirmChangeEnablement(appName:isEnabling:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_19(v2, 128LL);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_41_6(v3);
  OUTLINED_FUNCTION_16_29(v4, (__n128)xmmword_17E660);
  OUTLINED_FUNCTION_12_4(v0, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_61_1();
  uint64_t v7 = OUTLINED_FUNCTION_6_12(v6);
  if (v8)
  {
    OUTLINED_FUNCTION_11_4(v7, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v9);
  }

  OUTLINED_FUNCTION_50_17();
  OUTLINED_FUNCTION_85_7(v10);
  uint64_t v11 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v11;
  OUTLINED_FUNCTION_68_2(v11, (uint64_t)RunLinkActionCATsSimple.continueInApp(customDialog:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v12 = OUTLINED_FUNCTION_25_13(36LL);
  return OUTLINED_FUNCTION_8_13(v12, v13, v14, v15);
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::ConfirmChangeEnablementDialogIds_optional __swiftcall AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

uint64_t AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x656C62616E65LL;
  }
  else {
    return 0x656C6261736964LL;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds( char *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::ConfirmChangeEnablementDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::AutoShortcutCATsSimple::ConfirmChangeEnablementDialogIds_optional *a2@<X8>)
{
  result.value = AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds()
{
  char v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t AutoShortcutCATsSimple.confirmChangeEnablementAsLabels(appName:isEnabling:)(uint64_t a1, char a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutCATsSimple.confirmChangeEnablementAsLabels(appName:isEnabling:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_19(v1, 128LL);
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_41_6(v2);
  OUTLINED_FUNCTION_16_29(v3, (__n128)xmmword_17E660);
  OUTLINED_FUNCTION_12_4(v0, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  uint64_t v6 = OUTLINED_FUNCTION_6_12(v5);
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    char v8 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v8);
  }

  OUTLINED_FUNCTION_50_17();
  OUTLINED_FUNCTION_85_7(v9);
  uint64_t v10 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_61_4(v10);
  lazy protocol witness table accessor for type AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds();
  OUTLINED_FUNCTION_69_2((uint64_t)RunLinkActionCATsSimple.actionConfirmationHeader(customDialog:));
  OUTLINED_FUNCTION_45_1();
  unint64_t v11 = OUTLINED_FUNCTION_24_10(36LL);
  return OUTLINED_FUNCTION_7_12(v11, v12, v13, v14, v15, v16);
}

unint64_t lazy protocol witness table accessor for type AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds,  &type metadata for AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds,  &type metadata for AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds);
  }

  return result;
}

uint64_t AutoShortcutCATsSimple.confirmChangeEnablementDeclined(appName:isEnabled:)(uint64_t a1, char a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutCATsSimple.confirmChangeEnablementDeclined(appName:isEnabled:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_19(v2, 128LL);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_41_6(v3);
  OUTLINED_FUNCTION_16_29(v4, (__n128)xmmword_17E660);
  OUTLINED_FUNCTION_12_4(v0, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_61_1();
  uint64_t v7 = OUTLINED_FUNCTION_6_12(v6);
  if (v8)
  {
    OUTLINED_FUNCTION_11_4(v7, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    char v9 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v9);
  }

  OUTLINED_FUNCTION_51_20();
  OUTLINED_FUNCTION_85_7(v10);
  unint64_t v11 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v11;
  OUTLINED_FUNCTION_68_2(v11, (uint64_t)RunLinkActionCATsSimple.actionConfirmationHeader(customDialog:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v12 = OUTLINED_FUNCTION_25_13(44LL);
  return OUTLINED_FUNCTION_8_13(v12, v13, v14, v15);
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::ConfirmChangeEnablementDeclinedDialogIds_optional __swiftcall AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

uint64_t AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds.rawValue.getter(char a1)
{
  if (!a1) {
    return OUTLINED_FUNCTION_54_21();
  }
  if (a1 == 1) {
    return 0x66664F7470656BLL;
  }
  return 0x6E4F7470656BLL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds()
{
  specialized == infix<A>(_:_:)();
}

void protocol witness for Hashable.hashValue.getter in conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::ConfirmChangeEnablementDeclinedDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::AutoShortcutCATsSimple::ConfirmChangeEnablementDeclinedDialogIds_optional *a2@<X8>)
{
  result.value = AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds()
{
  char v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t AutoShortcutCATsSimple.confirmChangeEnablementDeclinedAsLabels(appName:isEnabled:)( uint64_t a1, char a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutCATsSimple.confirmChangeEnablementDeclinedAsLabels(appName:isEnabled:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_19(v1, 128LL);
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_41_6(v2);
  OUTLINED_FUNCTION_16_29(v3, (__n128)xmmword_17E660);
  OUTLINED_FUNCTION_12_4(v0, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  uint64_t v6 = OUTLINED_FUNCTION_6_12(v5);
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    char v8 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v8);
  }

  OUTLINED_FUNCTION_51_20();
  OUTLINED_FUNCTION_85_7(v9);
  uint64_t v10 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_61_4(v10);
  lazy protocol witness table accessor for type AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds();
  OUTLINED_FUNCTION_69_2((uint64_t)RunLinkActionCATsSimple.actionConfirmationHeader(customDialog:));
  OUTLINED_FUNCTION_45_1();
  unint64_t v11 = OUTLINED_FUNCTION_24_10(44LL);
  return OUTLINED_FUNCTION_7_12(v11, v12, v13, v14, v15, v16);
}

unint64_t lazy protocol witness table accessor for type AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds,  &type metadata for AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds,  &type metadata for AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds);
  }

  return result;
}

uint64_t AutoShortcutCATsSimple.disableAndCancel()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = AutoShortcutCATsSimple.disableAndCancelAsLabels();
  OUTLINED_FUNCTION_45_1();
  unint64_t v2 = OUTLINED_FUNCTION_83_5(29LL);
  return OUTLINED_FUNCTION_77_4(v2, v3, v4, v5);
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::DisableAndCancelDialogIds_optional __swiftcall AutoShortcutCATsSimple.DisableAndCancelDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of AutoShortcutCATsSimple.DisableAndCancelDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

uint64_t AutoShortcutCATsSimple.DisableAndCancelDialogIds.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x66664F6E727574LL;
  }
  else {
    return 0x6E4F657661656CLL;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds( char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::DisableAndCancelDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::AutoShortcutCATsSimple::DisableAndCancelDialogIds_optional *a2@<X8>)
{
  result.value = AutoShortcutCATsSimple.DisableAndCancelDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds()
{
  char v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = AutoShortcutCATsSimple.DisableAndCancelDialogIds.rawValue.getter(v1);
  v0[1] = 0xE700000000000000LL;
  OUTLINED_FUNCTION_1();
}

uint64_t AutoShortcutCATsSimple.disableAndCancelAsLabels()()
{
  uint64_t v2 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_82_5(v2);
  lazy protocol witness table accessor for type AutoShortcutCATsSimple.DisableAndCancelDialogIds and conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds();
  *uint64_t v0 = v1;
  v0[1] = AutoShortcutCATsSimple.disableAndCancelAsLabels();
  OUTLINED_FUNCTION_45_1();
  unint64_t v3 = OUTLINED_FUNCTION_84_9(29LL);
  return OUTLINED_FUNCTION_25_25(v3, v4, v5, v6, v7, v8);
}

unint64_t lazy protocol witness table accessor for type AutoShortcutCATsSimple.DisableAndCancelDialogIds and conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.DisableAndCancelDialogIds and conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.DisableAndCancelDialogIds and conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutCATsSimple.DisableAndCancelDialogIds,  &type metadata for AutoShortcutCATsSimple.DisableAndCancelDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.DisableAndCancelDialogIds and conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.DisableAndCancelDialogIds and conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.DisableAndCancelDialogIds and conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutCATsSimple.DisableAndCancelDialogIds,  &type metadata for AutoShortcutCATsSimple.DisableAndCancelDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.DisableAndCancelDialogIds and conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds);
  }

  return result;
}

uint64_t AutoShortcutCATsSimple.enableAndCancel()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = AutoShortcutCATsSimple.disableAndCancelAsLabels();
  OUTLINED_FUNCTION_45_1();
  unint64_t v2 = OUTLINED_FUNCTION_83_5(28LL);
  return OUTLINED_FUNCTION_77_4(v2, v3, v4, v5);
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::EnableAndCancelDialogIds_optional __swiftcall AutoShortcutCATsSimple.EnableAndCancelDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of AutoShortcutCATsSimple.EnableAndCancelDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

void AutoShortcutCATsSimple.EnableAndCancelDialogIds.rawValue.getter()
{
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds( char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::EnableAndCancelDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::AutoShortcutCATsSimple::EnableAndCancelDialogIds_optional *a2@<X8>)
{
  result.value = AutoShortcutCATsSimple.EnableAndCancelDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds()
{
  *uint64_t v0 = v1;
  v0[1] = 0xE600000000000000LL;
  OUTLINED_FUNCTION_1();
}

uint64_t AutoShortcutCATsSimple.enableAndCancelAsLabels()()
{
  uint64_t v2 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_82_5(v2);
  lazy protocol witness table accessor for type AutoShortcutCATsSimple.EnableAndCancelDialogIds and conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds();
  *uint64_t v0 = v1;
  v0[1] = AutoShortcutCATsSimple.disableAndCancelAsLabels();
  OUTLINED_FUNCTION_45_1();
  unint64_t v3 = OUTLINED_FUNCTION_84_9(28LL);
  return OUTLINED_FUNCTION_25_25(v3, v4, v5, v6, v7, v8);
}

unint64_t lazy protocol witness table accessor for type AutoShortcutCATsSimple.EnableAndCancelDialogIds and conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.EnableAndCancelDialogIds and conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.EnableAndCancelDialogIds and conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutCATsSimple.EnableAndCancelDialogIds,  &type metadata for AutoShortcutCATsSimple.EnableAndCancelDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.EnableAndCancelDialogIds and conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.EnableAndCancelDialogIds and conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.EnableAndCancelDialogIds and conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutCATsSimple.EnableAndCancelDialogIds,  &type metadata for AutoShortcutCATsSimple.EnableAndCancelDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.EnableAndCancelDialogIds and conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds);
  }

  return result;
}

uint64_t AutoShortcutCATsSimple.firstRun(app:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutCATsSimple.firstRun(app:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_19(v2, 80LL);
  uint64_t v4 = OUTLINED_FUNCTION_41_6(v3);
  *(_OWORD *)(v4 + 16) = xmmword_17E650;
  OUTLINED_FUNCTION_36_20(v4);
  OUTLINED_FUNCTION_12_4(v0, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_61_1();
  uint64_t v7 = OUTLINED_FUNCTION_6_12(v6);
  if (v8)
  {
    OUTLINED_FUNCTION_11_4(v7, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    char v9 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v9);
  }

  uint64_t v10 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v10;
  OUTLINED_FUNCTION_68_2(v10, (uint64_t)RunLinkActionCATsSimple.actionConfirmationHeader(customDialog:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v11 = OUTLINED_FUNCTION_25_13(21LL);
  return OUTLINED_FUNCTION_8_13(v11, v12, v13, v14);
}

void AutoShortcutCATsSimple.FirstRunDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of AutoShortcutCATsSimple.FirstRunDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

void AutoShortcutCATsSimple.FirstRunDialogIds.rawValue.getter()
{
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATsSimple.FirstRunDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AutoShortcutCATsSimple.FirstRunDialogIds( void *a1@<X8>)
{
}

uint64_t AutoShortcutCATsSimple.firstRunAsLabels(app:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutCATsSimple.firstRunAsLabels(app:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_19(v1, 80LL);
  uint64_t v3 = OUTLINED_FUNCTION_41_6(v2);
  *(_OWORD *)(v3 + 16) = xmmword_17E650;
  OUTLINED_FUNCTION_36_20(v3);
  OUTLINED_FUNCTION_12_4(v0, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  uint64_t v6 = OUTLINED_FUNCTION_6_12(v5);
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    char v8 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v8);
  }

  uint64_t v9 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_61_4(v9);
  lazy protocol witness table accessor for type AutoShortcutCATsSimple.FirstRunDialogIds and conformance AutoShortcutCATsSimple.FirstRunDialogIds();
  OUTLINED_FUNCTION_69_2((uint64_t)RunLinkActionCATsSimple.actionConfirmationHeader(customDialog:));
  OUTLINED_FUNCTION_45_1();
  unint64_t v10 = OUTLINED_FUNCTION_24_10(21LL);
  return OUTLINED_FUNCTION_7_12(v10, v11, v12, v13, v14, v15);
}

unint64_t lazy protocol witness table accessor for type AutoShortcutCATsSimple.FirstRunDialogIds and conformance AutoShortcutCATsSimple.FirstRunDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.FirstRunDialogIds and conformance AutoShortcutCATsSimple.FirstRunDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.FirstRunDialogIds and conformance AutoShortcutCATsSimple.FirstRunDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutCATsSimple.FirstRunDialogIds,  &type metadata for AutoShortcutCATsSimple.FirstRunDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.FirstRunDialogIds and conformance AutoShortcutCATsSimple.FirstRunDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.FirstRunDialogIds and conformance AutoShortcutCATsSimple.FirstRunDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.FirstRunDialogIds and conformance AutoShortcutCATsSimple.FirstRunDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutCATsSimple.FirstRunDialogIds,  &type metadata for AutoShortcutCATsSimple.FirstRunDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.FirstRunDialogIds and conformance AutoShortcutCATsSimple.FirstRunDialogIds);
  }

  return result;
}

uint64_t AutoShortcutCATsSimple.firstRunHomePod(app:firstPhrase:secondPhrase:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  void v4[5] = v3;
  void v4[2] = a1;
  void v4[3] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[6] = OUTLINED_FUNCTION_20_10(v5);
  v4[7] = OUTLINED_FUNCTION_11_0();
  v4[8] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutCATsSimple.firstRunHomePod(app:firstPhrase:secondPhrase:)()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_19(v2, 176LL);
  v0[9] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_17FDF0;
  OUTLINED_FUNCTION_36_20(v3);
  OUTLINED_FUNCTION_12_4(v1, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  uint64_t v6 = OUTLINED_FUNCTION_70_11(v5);
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v3 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v1;
    char v8 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v8);
  }

  uint64_t v9 = OUTLINED_FUNCTION_32_18();
  OUTLINED_FUNCTION_12_4(v9, v10, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v11 = OUTLINED_FUNCTION_41_5();
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v3 + 120) = v1;
    uint64_t v12 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v12);
  }

  uint64_t v13 = OUTLINED_FUNCTION_33_17();
  OUTLINED_FUNCTION_12_4(v13, v14, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v15 = OUTLINED_FUNCTION_32_16();
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v15, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v3 + 16__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v1;
    uint64_t v16 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v16);
  }

  uint64_t v17 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  v0[10] = v17;
  *uint64_t v17 = v0;
  v17[1] = AutoShortcutCATsSimple.firstRunHomePod(app:firstPhrase:secondPhrase:);
  unint64_t v18 = OUTLINED_FUNCTION_25_13(28LL);
  return OUTLINED_FUNCTION_8_13(v18, v19, v20, v21);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(void);
  OUTLINED_FUNCTION_34_18();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_4_1();
  }

  else
  {
    OUTLINED_FUNCTION_87_5();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_15_0();
    swift_task_dealloc(v1);
    uint64_t v3 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_15_2(v3, v4);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  OUTLINED_FUNCTION_40_0();
  swift_task_dealloc(v1);
  OUTLINED_FUNCTION_15_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::FirstRunHomePodDialogIds_optional __swiftcall AutoShortcutCATsSimple.FirstRunHomePodDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of AutoShortcutCATsSimple.FirstRunHomePodDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

uint64_t AutoShortcutCATsSimple.FirstRunHomePodDialogIds.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x7845657361726870LL;
  }
  else {
    return 0x616D7269666E6F63LL;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds( char *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::FirstRunHomePodDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::AutoShortcutCATsSimple::FirstRunHomePodDialogIds_optional *a2@<X8>)
{
  result.value = AutoShortcutCATsSimple.FirstRunHomePodDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds()
{
  char v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = AutoShortcutCATsSimple.FirstRunHomePodDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t AutoShortcutCATsSimple.firstRunHomePodAsLabels(app:firstPhrase:secondPhrase:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  void v4[5] = v3;
  void v4[2] = a1;
  void v4[3] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[6] = OUTLINED_FUNCTION_20_10(v5);
  v4[7] = OUTLINED_FUNCTION_11_0();
  v4[8] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutCATsSimple.firstRunHomePodAsLabels(app:firstPhrase:secondPhrase:)()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_19(v2, 176LL);
  v0[9] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_17FDF0;
  OUTLINED_FUNCTION_36_20(v3);
  OUTLINED_FUNCTION_12_4(v1, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  uint64_t v6 = OUTLINED_FUNCTION_70_11(v5);
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v3 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v1;
    char v8 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v8);
  }

  uint64_t v9 = OUTLINED_FUNCTION_32_18();
  OUTLINED_FUNCTION_12_4(v9, v10, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v11 = OUTLINED_FUNCTION_41_5();
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v3 + 120) = v1;
    uint64_t v12 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v12);
  }

  uint64_t v13 = OUTLINED_FUNCTION_33_17();
  OUTLINED_FUNCTION_12_4(v13, v14, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v15 = OUTLINED_FUNCTION_32_16();
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v15, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v3 + 16__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v1;
    uint64_t v16 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v16);
  }

  uint64_t v17 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  v0[10] = v17;
  lazy protocol witness table accessor for type AutoShortcutCATsSimple.FirstRunHomePodDialogIds and conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds();
  *uint64_t v17 = v0;
  v17[1] = AutoShortcutCATsSimple.firstRunHomePodAsLabels(app:firstPhrase:secondPhrase:);
  OUTLINED_FUNCTION_45_1();
  unint64_t v18 = OUTLINED_FUNCTION_24_10(28LL);
  return OUTLINED_FUNCTION_7_12(v18, v19, v20, v21, v22, v23);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(void);
  OUTLINED_FUNCTION_34_18();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_4_1();
  }

  else
  {
    OUTLINED_FUNCTION_87_5();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_15_0();
    swift_task_dealloc(v1);
    uint64_t v3 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_15_2(v3, v4);
  }

unint64_t lazy protocol witness table accessor for type AutoShortcutCATsSimple.FirstRunHomePodDialogIds and conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.FirstRunHomePodDialogIds and conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.FirstRunHomePodDialogIds and conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutCATsSimple.FirstRunHomePodDialogIds,  &type metadata for AutoShortcutCATsSimple.FirstRunHomePodDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.FirstRunHomePodDialogIds and conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.FirstRunHomePodDialogIds and conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.FirstRunHomePodDialogIds and conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutCATsSimple.FirstRunHomePodDialogIds,  &type metadata for AutoShortcutCATsSimple.FirstRunHomePodDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.FirstRunHomePodDialogIds and conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds);
  }

  return result;
}

uint64_t AutoShortcutCATsSimple.moreShortcuts(numberOfShortcuts:)(uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 56) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v2;
  return OUTLINED_FUNCTION_6_2((uint64_t)AutoShortcutCATsSimple.moreShortcuts(numberOfShortcuts:));
}

uint64_t AutoShortcutCATsSimple.moreShortcuts(numberOfShortcuts:)()
{
  char v1 = *(_BYTE *)(v0 + 56);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_19(v2, 80LL);
  uint64_t v4 = v3;
  *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_17E650;
  *(void *)(v3 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0xD000000000000011LL;
  *(void *)(v3 + 40) = 0x8000000000195F80LL;
  if ((v1 & 1) != 0)
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
    *(void *)(v3 + 56) = 0LL;
    *(void *)(v3 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  else
  {
    uint64_t v5 = *(void *)(v0 + 16);
    uint64_t v6 = &type metadata for Double;
  }

  *(void *)(v3 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v6;
  *(void *)(v3 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v5;
  char v7 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 40) = v7;
  OUTLINED_FUNCTION_68_2(v7, (uint64_t)AutoShortcutCATsSimple.moreShortcuts(numberOfShortcuts:));
  return v9(0xD00000000000001ALL, 0x80000000001910F0LL, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_0_15();
  if (v1)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 32));
    return OUTLINED_FUNCTION_23_1(v0, *(uint64_t (**)(void))(v3 + 8));
  }

void AutoShortcutCATsSimple.MoreShortcutsDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of AutoShortcutCATsSimple.MoreShortcutsDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

uint64_t AutoShortcutCATsSimple.MoreShortcutsDialogIds.rawValue.getter()
{
  return 1701998445LL;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATsSimple.MoreShortcutsDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AutoShortcutCATsSimple.MoreShortcutsDialogIds( void *a1@<X8>)
{
}

uint64_t AutoShortcutCATsSimple.moreShortcutsAsLabels(numberOfShortcuts:)(uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 56) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v2;
  return OUTLINED_FUNCTION_6_2((uint64_t)AutoShortcutCATsSimple.moreShortcutsAsLabels(numberOfShortcuts:));
}

uint64_t AutoShortcutCATsSimple.moreShortcutsAsLabels(numberOfShortcuts:)()
{
  char v1 = *(_BYTE *)(v0 + 56);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_19(v2, 80LL);
  *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_17E650;
  *(void *)(v3 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0xD000000000000011LL;
  *(void *)(v3 + 40) = 0x8000000000195F80LL;
  if ((v1 & 1) != 0)
  {
    uint64_t v5 = 0LL;
    uint64_t v4 = 0LL;
    *(void *)(v3 + 56) = 0LL;
    *(void *)(v3 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 16);
    uint64_t v5 = &type metadata for Double;
  }

  *(void *)(v3 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v5;
  *(void *)(v3 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v4;
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  lazy protocol witness table accessor for type AutoShortcutCATsSimple.MoreShortcutsDialogIds and conformance AutoShortcutCATsSimple.MoreShortcutsDialogIds();
  OUTLINED_FUNCTION_69_2((uint64_t)AutoShortcutCATsSimple.moreShortcutsAsLabels(numberOfShortcuts:));
  OUTLINED_FUNCTION_45_1();
  return v7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_0_15();
  if (v1)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 32));
    return OUTLINED_FUNCTION_23_1(v0, *(uint64_t (**)(void))(v3 + 8));
  }

unint64_t lazy protocol witness table accessor for type AutoShortcutCATsSimple.MoreShortcutsDialogIds and conformance AutoShortcutCATsSimple.MoreShortcutsDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.MoreShortcutsDialogIds and conformance AutoShortcutCATsSimple.MoreShortcutsDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.MoreShortcutsDialogIds and conformance AutoShortcutCATsSimple.MoreShortcutsDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutCATsSimple.MoreShortcutsDialogIds,  &type metadata for AutoShortcutCATsSimple.MoreShortcutsDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.MoreShortcutsDialogIds and conformance AutoShortcutCATsSimple.MoreShortcutsDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.MoreShortcutsDialogIds and conformance AutoShortcutCATsSimple.MoreShortcutsDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.MoreShortcutsDialogIds and conformance AutoShortcutCATsSimple.MoreShortcutsDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutCATsSimple.MoreShortcutsDialogIds,  &type metadata for AutoShortcutCATsSimple.MoreShortcutsDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.MoreShortcutsDialogIds and conformance AutoShortcutCATsSimple.MoreShortcutsDialogIds);
  }

  return result;
}

uint64_t AutoShortcutCATsSimple.openInShortcuts()()
{
  char v1 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 16) = v1;
  *char v1 = v0;
  v1[1] = AutoShortcutCATsSimple.disableAndCancelAsLabels();
  OUTLINED_FUNCTION_45_1();
  unint64_t v2 = OUTLINED_FUNCTION_83_5(28LL);
  return OUTLINED_FUNCTION_77_4(v2, v3, v4, v5);
}

void AutoShortcutCATsSimple.OpenInShortcutsDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of AutoShortcutCATsSimple.OpenInShortcutsDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATsSimple.OpenInShortcutsDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t AutoShortcutCATsSimple.openInShortcutsAsLabels()()
{
  uint64_t v2 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_82_5(v2);
  lazy protocol witness table accessor for type AutoShortcutCATsSimple.OpenInShortcutsDialogIds and conformance AutoShortcutCATsSimple.OpenInShortcutsDialogIds();
  *uint64_t v0 = v1;
  v0[1] = AutoShortcutCATsSimple.disableAndCancelAsLabels();
  OUTLINED_FUNCTION_45_1();
  unint64_t v3 = OUTLINED_FUNCTION_84_9(28LL);
  return OUTLINED_FUNCTION_25_25(v3, v4, v5, v6, v7, v8);
}

unint64_t lazy protocol witness table accessor for type AutoShortcutCATsSimple.OpenInShortcutsDialogIds and conformance AutoShortcutCATsSimple.OpenInShortcutsDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.OpenInShortcutsDialogIds and conformance AutoShortcutCATsSimple.OpenInShortcutsDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.OpenInShortcutsDialogIds and conformance AutoShortcutCATsSimple.OpenInShortcutsDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutCATsSimple.OpenInShortcutsDialogIds,  &type metadata for AutoShortcutCATsSimple.OpenInShortcutsDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.OpenInShortcutsDialogIds and conformance AutoShortcutCATsSimple.OpenInShortcutsDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.OpenInShortcutsDialogIds and conformance AutoShortcutCATsSimple.OpenInShortcutsDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.OpenInShortcutsDialogIds and conformance AutoShortcutCATsSimple.OpenInShortcutsDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutCATsSimple.OpenInShortcutsDialogIds,  &type metadata for AutoShortcutCATsSimple.OpenInShortcutsDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.OpenInShortcutsDialogIds and conformance AutoShortcutCATsSimple.OpenInShortcutsDialogIds);
  }

  return result;
}

uint64_t AutoShortcutCATsSimple.shortcutPhrases(phrase:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutCATsSimple.shortcutPhrases(phrase:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_19(v2, 80LL);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_41_6(v3);
  OUTLINED_FUNCTION_58_14(v4, (__n128)xmmword_17E650);
  OUTLINED_FUNCTION_12_4(v0, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_61_1();
  uint64_t v7 = OUTLINED_FUNCTION_6_12(v6);
  if (v8)
  {
    OUTLINED_FUNCTION_11_4(v7, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v9);
  }

  uint64_t v10 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v10;
  OUTLINED_FUNCTION_68_2(v10, (uint64_t)RunLinkActionCATsSimple.continueInApp(customDialog:));
  unint64_t v11 = OUTLINED_FUNCTION_25_13(28LL);
  return OUTLINED_FUNCTION_8_13(v11, v12, v13, v14);
}

void AutoShortcutCATsSimple.ShortcutPhrasesDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of AutoShortcutCATsSimple.ShortcutPhrasesDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

uint64_t AutoShortcutCATsSimple.ShortcutPhrasesDialogIds.rawValue.getter()
{
  return 0x73657361726870LL;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATsSimple.ShortcutPhrasesDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AutoShortcutCATsSimple.ShortcutPhrasesDialogIds( void *a1@<X8>)
{
}

uint64_t AutoShortcutCATsSimple.shortcutPhrasesAsLabels(phrase:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutCATsSimple.shortcutPhrasesAsLabels(phrase:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_19(v1, 80LL);
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_41_6(v2);
  OUTLINED_FUNCTION_58_14(v3, (__n128)xmmword_17E650);
  OUTLINED_FUNCTION_12_4(v0, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  uint64_t v6 = OUTLINED_FUNCTION_6_12(v5);
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    char v8 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v8);
  }

  uint64_t v9 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_61_4(v9);
  lazy protocol witness table accessor for type AutoShortcutCATsSimple.ShortcutPhrasesDialogIds and conformance AutoShortcutCATsSimple.ShortcutPhrasesDialogIds();
  OUTLINED_FUNCTION_69_2((uint64_t)RunLinkActionCATsSimple.actionConfirmationHeader(customDialog:));
  OUTLINED_FUNCTION_45_1();
  unint64_t v10 = OUTLINED_FUNCTION_24_10(28LL);
  return OUTLINED_FUNCTION_7_12(v10, v11, v12, v13, v14, v15);
}

unint64_t lazy protocol witness table accessor for type AutoShortcutCATsSimple.ShortcutPhrasesDialogIds and conformance AutoShortcutCATsSimple.ShortcutPhrasesDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ShortcutPhrasesDialogIds and conformance AutoShortcutCATsSimple.ShortcutPhrasesDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ShortcutPhrasesDialogIds and conformance AutoShortcutCATsSimple.ShortcutPhrasesDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutCATsSimple.ShortcutPhrasesDialogIds,  &type metadata for AutoShortcutCATsSimple.ShortcutPhrasesDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ShortcutPhrasesDialogIds and conformance AutoShortcutCATsSimple.ShortcutPhrasesDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ShortcutPhrasesDialogIds and conformance AutoShortcutCATsSimple.ShortcutPhrasesDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ShortcutPhrasesDialogIds and conformance AutoShortcutCATsSimple.ShortcutPhrasesDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutCATsSimple.ShortcutPhrasesDialogIds,  &type metadata for AutoShortcutCATsSimple.ShortcutPhrasesDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ShortcutPhrasesDialogIds and conformance AutoShortcutCATsSimple.ShortcutPhrasesDialogIds);
  }

  return result;
}

uint64_t AutoShortcutCATsSimple.userDenied()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = AutoShortcutCATsSimple.userDenied();
  OUTLINED_FUNCTION_45_1();
  unint64_t v2 = OUTLINED_FUNCTION_83_5(23LL);
  return OUTLINED_FUNCTION_77_4(v2, v3, v4, v5);
}

uint64_t AutoShortcutCATsSimple.userDenied()(uint64_t a1)
{
  uint64_t v6 = *v2;
  uint64_t v4 = swift_task_dealloc(*(void *)(*v2 + 16));
  if (!v1) {
    uint64_t v4 = a1;
  }
  return OUTLINED_FUNCTION_15_2(v4, *(uint64_t (**)(void))(v6 + 8));
}

void AutoShortcutCATsSimple.UserDeniedDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of AutoShortcutCATsSimple.UserDeniedDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

void AutoShortcutCATsSimple.UserDeniedDialogIds.rawValue.getter()
{
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATsSimple.UserDeniedDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AutoShortcutCATsSimple.UserDeniedDialogIds( void *a1@<X8>)
{
}

uint64_t AutoShortcutCATsSimple.userDeniedAsLabels()()
{
  uint64_t v2 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_82_5(v2);
  lazy protocol witness table accessor for type AutoShortcutCATsSimple.UserDeniedDialogIds and conformance AutoShortcutCATsSimple.UserDeniedDialogIds();
  *uint64_t v0 = v1;
  v0[1] = AutoShortcutCATsSimple.disableAndCancelAsLabels();
  OUTLINED_FUNCTION_45_1();
  unint64_t v3 = OUTLINED_FUNCTION_84_9(23LL);
  return OUTLINED_FUNCTION_25_25(v3, v4, v5, v6, v7, v8);
}

unint64_t lazy protocol witness table accessor for type AutoShortcutCATsSimple.UserDeniedDialogIds and conformance AutoShortcutCATsSimple.UserDeniedDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.UserDeniedDialogIds and conformance AutoShortcutCATsSimple.UserDeniedDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.UserDeniedDialogIds and conformance AutoShortcutCATsSimple.UserDeniedDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutCATsSimple.UserDeniedDialogIds,  &type metadata for AutoShortcutCATsSimple.UserDeniedDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.UserDeniedDialogIds and conformance AutoShortcutCATsSimple.UserDeniedDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.UserDeniedDialogIds and conformance AutoShortcutCATsSimple.UserDeniedDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.UserDeniedDialogIds and conformance AutoShortcutCATsSimple.UserDeniedDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutCATsSimple.UserDeniedDialogIds,  &type metadata for AutoShortcutCATsSimple.UserDeniedDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.UserDeniedDialogIds and conformance AutoShortcutCATsSimple.UserDeniedDialogIds);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AutoShortcutCATsSimple.Properties and conformance AutoShortcutCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.Properties and conformance AutoShortcutCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.Properties and conformance AutoShortcutCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutCATsSimple.Properties,  &type metadata for AutoShortcutCATsSimple.Properties);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.Properties and conformance AutoShortcutCATsSimple.Properties);
  }

  return result;
}

uint64_t type metadata accessor for AutoShortcutCATsSimple(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for AutoShortcutCATsSimple;
  if (!type metadata singleton initialization cache for AutoShortcutCATsSimple) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AutoShortcutCATsSimple);
  }
  return result;
}

uint64_t type metadata completion function for AutoShortcutCATsSimple(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + class metadata base offset for AutoShortcutCATsSimple);
}

uint64_t ObjC metadata update function for AutoShortcutCATsSimple()
{
  return type metadata accessor for AutoShortcutCATsSimple(0LL);
}

uint64_t getEnumTagSinglePayload for AutoShortcutCATsSimple.Properties(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF5)
  {
    if (a2 + 11 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 11) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 12;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for AutoShortcutCATsSimple.Properties( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF4) {
    return ((uint64_t (*)(void))((char *)&loc_C482C + 4 * byte_184B25[v4]))();
  }
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_C4860 + 4 * byte_184B20[v4]))();
}

uint64_t sub_C4860(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_C4868(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xC4870LL);
  }
  return result;
}

uint64_t sub_C487C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xC4884LL);
  }
  *(_BYTE *)uint64_t result = a2 + 11;
  return result;
}

uint64_t sub_C4888(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_C4890(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for AutoShortcutCATsSimple.Properties()
{
}

uint64_t storeEnumTagSinglePayload for AutoShortcutCATsSimple.AppDisabledDialogIds( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_C48F4 + 4 * byte_184B2F[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_C4928 + 4 * byte_184B2A[v4]))();
}

uint64_t sub_C4928(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_C4930(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xC4938LL);
  }
  return result;
}

uint64_t sub_C4944(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xC494CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_C4950(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_C4958(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for AutoShortcutCATsSimple.AppDisabledDialogIds()
{
}

void type metadata accessor for AutoShortcutCATsSimple.AppEnabledDialogIds()
{
}

void type metadata accessor for AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds()
{
}

uint64_t storeEnumTagSinglePayload for AutoShortcutCATsSimple.AppEnabledDialogIds( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_C49DC + 4 * byte_184B39[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_C4A10 + 4 * byte_184B34[v4]))();
}

uint64_t sub_C4A10(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_C4A18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xC4A20LL);
  }
  return result;
}

uint64_t sub_C4A2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xC4A34LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_C4A38(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_C4A40(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds()
{
}

void type metadata accessor for AutoShortcutCATsSimple.DisableAndCancelDialogIds()
{
}

void type metadata accessor for AutoShortcutCATsSimple.EnableAndCancelDialogIds()
{
}

void type metadata accessor for AutoShortcutCATsSimple.FirstRunDialogIds()
{
}

uint64_t storeEnumTagSinglePayload for AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_C4ACC + 4 * byte_184B43[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_C4B00 + 4 * byte_184B3E[v4]))();
}

uint64_t sub_C4B00(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_C4B08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xC4B10LL);
  }
  return result;
}

uint64_t sub_C4B1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xC4B24LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_C4B28(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_C4B30(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for AutoShortcutCATsSimple.FirstRunHomePodDialogIds()
{
}

void type metadata accessor for AutoShortcutCATsSimple.MoreShortcutsDialogIds()
{
}

void type metadata accessor for AutoShortcutCATsSimple.OpenInShortcutsDialogIds()
{
}

void type metadata accessor for AutoShortcutCATsSimple.ShortcutPhrasesDialogIds()
{
}

uint64_t storeEnumTagSinglePayload for AutoShortcutCATsSimple.FirstRunDialogIds(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_C4BAC + 4 * byte_184B48[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_C4BCC + 4 * byte_184B4D[v4]))();
  }
}

_BYTE *sub_C4BAC(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_C4BCC(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_C4BD4(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_C4BDC(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_C4BE4(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_C4BEC(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void type metadata accessor for AutoShortcutCATsSimple.UserDeniedDialogIds()
{
}

uint64_t OUTLINED_FUNCTION_9_27(uint64_t result)
{
  v2[6] = v1;
  void v2[9] = result;
  v2[10] = 0x656D614E707061LL;
  v2[11] = 0xE700000000000000LL;
  return result;
}

__n128 *OUTLINED_FUNCTION_16_29(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x656D614E707061LL;
  result[2].n128_u64[1] = 0xE700000000000000LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_25_25( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

void *OUTLINED_FUNCTION_30_20()
{
  return __swift_allocate_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_32_18()
{
  uint64_t result = *(void *)(v0 + 24);
  *(void *)(v1 + 80) = 0x7268507473726966LL;
  *(void *)(v1 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0xEB00000000657361LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_33_17()
{
  uint64_t result = *(void *)(v0 + 32);
  strcpy((char *)(v1 + 128), "secondPhrase");
  *(_BYTE *)(v1 + 141) = 0;
  *(_WORD *)(v1 + 14__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = -5120;
  return result;
}

uint64_t OUTLINED_FUNCTION_34_18()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 80);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v0;
  return swift_task_dealloc(v5);
}

uint64_t OUTLINED_FUNCTION_36_20(uint64_t result)
{
  *(void *)(result + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 7368801LL;
  *(void *)(result + 40) = 0xE300000000000000LL;
  return result;
}

void OUTLINED_FUNCTION_50_17()
{
  *(void *)(v0 + 80) = 0x696C62616E457369LL;
  *(void *)(v0 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0xEA0000000000676ELL;
}

void OUTLINED_FUNCTION_51_20()
{
  *(void *)(v0 + 80) = 0x656C62616E457369LL;
  *(void *)(v0 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0xE900000000000064LL;
}

uint64_t OUTLINED_FUNCTION_54_21()
{
  return 0x6D69547473726966LL;
}

uint64_t OUTLINED_FUNCTION_56_21(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(v4 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a2;
  *(void *)(v4 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v3;
  *(_BYTE *)(v4 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a3;
  *(void *)(v4 + 16) = result;
  return result;
}

__n128 *OUTLINED_FUNCTION_58_14(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x657361726870LL;
  result[2].n128_u64[1] = 0xE600000000000000LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_66_12@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_70_11(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_78_8(uint64_t result, char a2)
{
  *(_BYTE *)(v3 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a2;
  *(void *)(v3 + 16) = result;
  *(void *)(v3 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v2;
  return result;
}

uint64_t OUTLINED_FUNCTION_82_5(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

unint64_t OUTLINED_FUNCTION_83_5(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
}

unint64_t OUTLINED_FUNCTION_84_9(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
}

void OUTLINED_FUNCTION_85_7(char a1@<W8>)
{
  *(void *)(v2 + 120) = v1;
  *(_BYTE *)(v2 + 96) = a1;
}

uint64_t OUTLINED_FUNCTION_87_5()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 72));
}

  ;
}

void OUTLINED_FUNCTION_91_4(char a1@<W8>)
{
  *(void *)(v2 + 16__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v1;
  *(_BYTE *)(v2 + 14__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a1;
}

void SiriWorkflowRunnerEvent.name.getter()
{
  uint64_t v0 = type metadata accessor for SiriWorkflowRunnerEvent(0LL);
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_35();
  uint64_t v3 = v2 - v1;
  uint64_t v4 = OUTLINED_FUNCTION_45();
  outlined init with copy of SiriWorkflowRunnerEvent(v4, v5, v6);
  BOOL v7 = (char *)sub_C4EBC + 4 * byte_185570[swift_getEnumCaseMultiPayload(v3, v0)];
  __asm { BR              X10 }

unint64_t sub_C4EBC(uint64_t a1)
{
  return 0xD000000000000011LL;
}

void sub_C50C0(uint64_t a1)
{
}

uint64_t static VoiceCmdsInstrumentations.emitWaitForRequest(type:logMessage:task:updateInfo:)( char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a6;
  *(void *)(v7 + 56) = a7;
  *(void *)(v7 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a4;
  *(void *)(v7 + 40) = a5;
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a3;
  *(_BYTE *)(v7 + 100) = a1;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  *(void *)(v7 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = OUTLINED_FUNCTION_10_8(v8);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t static VoiceCmdsInstrumentations.emitWaitForRequest(type:logMessage:task:updateInfo:)()
{
  char v1 = *(_BYTE *)(v0 + 100) & 1;
  unint64_t v2 = type metadata accessor for SISchemaUUID();
  UUID.init()(v2);
  id v3 = SISchemaUUID.__allocating_init(nsuuid:)();
  *(void *)(v0 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v3;
  static VoiceCmdsInstrumentations.emitWaitForRequestStarted(type:contextId:)(v1, (uint64_t)v3);
  uint64_t v4 = (void *)swift_task_alloc(unk_219E84);
  *(void *)(v0 + 80) = v4;
  void *v4 = v0;
  v4[1] = static VoiceCmdsInstrumentations.emitWaitForRequest(type:logMessage:task:updateInfo:);
  return v6(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char v1 = *(void *)(v0 + 64);
  unint64_t v2 = *(void **)(v0 + 72);
  static VoiceCmdsInstrumentations.emitWaitForRequestEnded(contextId:duration:updateInfo:)( (uint64_t)v2,  *(unsigned int *)(v0 + 96),  *(void (**)(void *))(v0 + 48));

  swift_task_dealloc(v1);
  return OUTLINED_FUNCTION_4_26(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char v1 = *(void *)(v0 + 64);
  unint64_t v2 = *(void **)(v0 + 72);
  static VoiceCmdsInstrumentations.emitWaitForRequestEnded(contextId:duration:updateInfo:)( (uint64_t)v2,  0x100000000LL,  *(void (**)(void *))(v0 + 48));

  swift_task_dealloc(v1);
  return OUTLINED_FUNCTION_4_26(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t static VoiceCmdsInstrumentations.emitWaitForRequest(type:logMessage:task:updateInfo:)(float a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 80);
  *(void *)(*v2 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v1;
  swift_task_dealloc(v5);
  if (!v1) {
    *(float *)(v4 + 96) = a1;
  }
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v6, v7, v8);
}

id SISchemaUUID.__allocating_init(nsuuid:)()
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0));
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v3 = [v1 initWithNSUUID:isa];

  uint64_t v4 = type metadata accessor for UUID(0LL);
  OUTLINED_FUNCTION_13_5(v4);
  return v3;
}

uint64_t WaitForRequestType.getDomainExecutionType()(char a1)
{
  if ((a1 & 1) != 0) {
    return 401LL;
  }
  else {
    return 400LL;
  }
}

uint64_t static VoiceCmdsInstrumentations.emitWaitForRequestStarted(type:contextId:)(char a1, uint64_t a2)
{
  id v4 = [(id)objc_opt_self(AssistantSiriAnalytics) sharedStream];
  id v5 = [objc_allocWithZone((Class)VoiceCmdsSchemaProvisionalVoiceCmdsWaitForRequestContext) init];
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = [objc_allocWithZone((Class)VoiceCmdsSchemaProvisionalVoiceCmdsWaitForRequestContextInfo) init];
    if (v7)
    {
      id v8 = v7;
      [v6 setContextId:a2];
      [v6 setStartedOrChanged:v8];
      [v4 emitMessage:v6];

      uint64_t v6 = v8;
    }
  }

  id v9 = [objc_allocWithZone(FLOWSchemaFLOWClientEvent) init];
  if (!v9) {
    return swift_unknownObjectRelease(v4);
  }
  unint64_t v10 = v9;
  id v11 = [objc_allocWithZone(FLOWSchemaFLOWDomainExecutionContext) init];
  if (!v11)
  {

    return swift_unknownObjectRelease(v4);
  }

  uint64_t v12 = v11;
  id v13 = [objc_allocWithZone(FLOWSchemaFLOWDomainExecutionStarted) init];
  if (!v13)
  {

    return swift_unknownObjectRelease(v4);
  }

  uint64_t v14 = v13;
  if ((a1 & 1) != 0) {
    uint64_t v15 = 401LL;
  }
  else {
    uint64_t v15 = 400LL;
  }
  [v13 setDomainExecutionType:v15];
  [v12 setStartedOrChanged:v14];
  [v12 setContextId:a2];
  static SiriKitEventSender.current.getter(v18, [v10 setFlowDomainExecutionContext:v12]);
  __swift_project_boxed_opaque_existential_1(v18, v18[3]);
  type metadata accessor for SiriKitEvent(0LL);
  id v16 = v10;
  SiriKitEvent.__allocating_init(taskType:domainPerfContext:_:)( 0x746C7561666564LL,  0xE700000000000000LL,  v16,  CustomIntentDisambiguationItemContainer.init(items:),  0LL);
  dispatch thunk of SiriKitEventSending.send(_:)();
  swift_release();
  swift_unknownObjectRelease(v4);

  return __swift_destroy_boxed_opaque_existential_1Tm(v18);
}

uint64_t specialized static DurationUtil.computeDuration(task:logMessage:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  void v4[5] = a4;
  void v4[2] = a1;
  void v4[3] = a2;
  uint64_t v5 = type metadata accessor for DurationUtil(0LL);
  v4[6] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(specialized static DurationUtil.computeDuration(task:logMessage:), 0LL, 0LL);
}

uint64_t specialized static DurationUtil.computeDuration(task:logMessage:)()
{
  id v1 = (void *)OUTLINED_FUNCTION_10_23();
  *(void *)(v0 + 56) = v1;
  *id v1 = v0;
  v1[1] = specialized static DurationUtil.computeDuration(task:logMessage:);
  return OUTLINED_FUNCTION_3_32(v3);
}

{
  OUTLINED_FUNCTION_2_25();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  DurationUtil.computeDuration()();
  OUTLINED_FUNCTION_0_28(v1, type metadata accessor for DurationUtil);
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_6_28(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t specialized static DurationUtil.computeDuration(task:logMessage:)(uint64_t a1)
{
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t static DurationUtil.computeDuration(task:logMessage:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  void v4[5] = a4;
  void v4[2] = a1;
  void v4[3] = a2;
  uint64_t v5 = OUTLINED_FUNCTION_16_30();
  v4[6] = OUTLINED_FUNCTION_10_8(v5);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t static DurationUtil.computeDuration(task:logMessage:)()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_23();
  *(void *)(v0 + 56) = v1;
  *uint64_t v1 = v0;
  v1[1] = specialized static DurationUtil.computeDuration(task:logMessage:);
  return OUTLINED_FUNCTION_3_32(v3);
}

uint64_t static VoiceCmdsInstrumentations.emitWaitForRequestEnded(contextId:duration:updateInfo:)( uint64_t a1, uint64_t a2, void (*a3)(void *))
{
  id v6 = [(id)objc_opt_self(AssistantSiriAnalytics) sharedStream];
  id v7 = [objc_allocWithZone((Class)VoiceCmdsSchemaProvisionalVoiceCmdsWaitForRequestContext) init];
  if (v7)
  {
    id v8 = v7;
    id v9 = [objc_allocWithZone((Class)VoiceCmdsSchemaProvisionalVoiceCmdsWaitForRequestRemovalInfo) init];
    if (v9)
    {
      unint64_t v10 = v9;
      [v8 setContextId:a1];
      a3(v10);
      if ((a2 & 0x100000000LL) == 0)
      {
        LODWORD(v11) = a2;
        [v10 setClockSeconds:v11];
      }

      [v8 setEnded:v10];
      [v6 emitMessage:v8];
    }

    else
    {
      unint64_t v10 = v8;
    }
  }

  id v12 = [objc_allocWithZone(FLOWSchemaFLOWClientEvent) init];
  if (v12)
  {
    id v13 = v12;
    id v14 = [objc_allocWithZone(FLOWSchemaFLOWDomainExecutionContext) init];
    if (v14)
    {
      uint64_t v15 = v14;
      id v16 = [objc_allocWithZone(FLOWSchemaFLOWDomainExecutionEnded) init];
      if (v16)
      {
        uint64_t v17 = v16;
        [v15 setEnded:v16];
        [v15 setContextId:a1];
        static SiriKitEventSender.current.getter(v20, [v13 setFlowDomainExecutionContext:v15]);
        __swift_project_boxed_opaque_existential_1(v20, v20[3]);
        type metadata accessor for SiriKitEvent(0LL);
        id v18 = v13;
        SiriKitEvent.__allocating_init(taskType:domainPerfContext:_:)( 0x746C7561666564LL,  0xE700000000000000LL,  v18,  CustomIntentDisambiguationItemContainer.init(items:),  0LL);
        dispatch thunk of SiriKitEventSending.send(_:)();
        swift_release();
        swift_unknownObjectRelease(v6);

        return __swift_destroy_boxed_opaque_existential_1Tm(v20);
      }
    }

    else
    {
    }
  }

  return swift_unknownObjectRelease(v6);
}

uint64_t type metadata accessor for DurationUtil(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for DurationUtil;
  if (!type metadata singleton initialization cache for DurationUtil) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DurationUtil);
  }
  return result;
}

float Duration.asSeconds.getter()
{
  uint64_t v0 = Duration.components.getter();
  return (float)((float)v1 / 1.0e18) + (float)v0;
}

uint64_t DurationUtil.startInstant.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_45();
  return v1(v0);
}

uint64_t DurationUtil.innerMessage.getter()
{
  uint64_t v1 = OUTLINED_FUNCTION_16_30();
  swift_bridgeObjectRetain(*(void *)(v0 + *(int *)(v1 + 20) + 8));
  return OUTLINED_FUNCTION_45();
}

void DurationUtil.init(logMessage:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (one-time initialization token for lock != -1) {
    swift_once(&one-time initialization token for lock, one-time initialization function for lock);
  }
  id v6 = (void *)static DurationUtil.lock;
  [(id)static DurationUtil.lock lock];
  int v7 = static DurationUtil.nextId;
  if (static DurationUtil.nextId == -1)
  {
    __break(1u);
LABEL_11:
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    goto LABEL_7;
  }

  ++static DurationUtil.nextId;
  [v6 unlock];
  _StringGuts.grow(_:)(18LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  uint64_t v27 = 0x6E6F697461727544LL;
  unint64_t v28 = 0xEF5B235F6C697455LL;
  LODWORD(v25[0]) = v7;
  v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  v10._uint64_t countAndFlagsBits = 93LL;
  v10._object = (void *)0xE100000000000000LL;
  String.append(_:)(v10);
  uint64_t v12 = 0x6E6F697461727544LL;
  unint64_t v11 = 0xEF5B235F6C697455LL;
  if (a2)
  {
    v25[0] = 539831584LL;
    v25[1] = 0xE400000000000000LL;
    v13._uint64_t countAndFlagsBits = a1;
    v13._object = a2;
    String.append(_:)(v13);
    swift_bridgeObjectRelease(a2);
    v14._uint64_t countAndFlagsBits = 539831584LL;
    v14._object = (void *)0xE400000000000000LL;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(0xE400000000000000LL);
    uint64_t v12 = v27;
    unint64_t v11 = v28;
  }

  uint64_t v15 = (uint64_t *)(a3 + *(int *)(OUTLINED_FUNCTION_16_30() + 20));
  *uint64_t v15 = v12;
  v15[1] = v11;
  uint64_t v16 = one-time initialization token for voiceCommands;
  swift_bridgeObjectRetain(v11);
  if (v16 != -1) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v17 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v17, (uint64_t)static Logger.voiceCommands);
  uint64_t v19 = v27;
  unint64_t v18 = v28;
  uint64_t v20 = swift_bridgeObjectRetain(v28);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v24 = OUTLINED_FUNCTION_38(32LL);
    v25[0] = v24;
    *(_DWORD *)uint64_t v23 = 136315138;
    swift_bridgeObjectRetain(v18);
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v23 + 4);
    swift_bridgeObjectRelease_n(v18, 3LL);
    _os_log_impl(&dword_0, v21, v22, "started: %s ...", v23, 0xCu);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v24);
    OUTLINED_FUNCTION_1_0((uint64_t)v23);
  }

  else
  {

    swift_bridgeObjectRelease_n(v28, 2LL);
  }

uint64_t outlined destroy of SiriWorkflowRunnerEvent(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  OUTLINED_FUNCTION_13_5(v3);
  return a1;
}

Swift::Float __swiftcall DurationUtil.computeDuration()()
{
  uint64_t v1 = OUTLINED_FUNCTION_16_30();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_35();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = OUTLINED_FUNCTION_15_18();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_35();
  uint64_t v9 = v8 - v7;
  static ContinuousClock.now.getter();
  uint64_t v10 = ContinuousClock.Instant.duration(to:)(v9);
  uint64_t v11 = Duration.components.getter(v10);
  float v13 = (float)v12 / 1.0e18;
  float v14 = (float)v11;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  float v15 = v13 + v14;
  uint64_t v16 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v16, (uint64_t)static Logger.voiceCommands);
  uint64_t v17 = outlined init with copy of SiriWorkflowRunnerEvent( v0,  v4,  (void (*)(void))type metadata accessor for DurationUtil);
  unint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = OUTLINED_FUNCTION_38(22LL);
    uint64_t v26 = v5;
    uint64_t v21 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v28 = v21;
    *(_DWORD *)uint64_t v20 = 136315394;
    os_log_type_t v22 = (uint64_t *)(v4 + *(int *)(v1 + 20));
    uint64_t v23 = *v22;
    unint64_t v24 = v22[1];
    swift_bridgeObjectRetain(v24);
    double v27 = COERCE_DOUBLE(getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v28));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v20 + 4);
    swift_bridgeObjectRelease(v24);
    outlined destroy of SiriWorkflowRunnerEvent(v4, type metadata accessor for DurationUtil);
    *(_WORD *)(v20 + 1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 2048;
    double v27 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v20 + 14);
    _os_log_impl(&dword_0, v18, v19, "stopped: %s; duration=%fs", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v21);
    OUTLINED_FUNCTION_1_0(v20);

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v26);
  }

  else
  {

    outlined destroy of SiriWorkflowRunnerEvent(v4, type metadata accessor for DurationUtil);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  }

  return v15;
}

id one-time initialization function for lock()
{
  id result = [objc_allocWithZone(NSLock) init];
  static DurationUtil.lock = (uint64_t)result;
  return result;
}

uint64_t outlined init with copy of SiriWorkflowRunnerEvent( uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v4 = OUTLINED_FUNCTION_45();
  v5(v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type WaitForRequestType and conformance WaitForRequestType()
{
  unint64_t result = lazy protocol witness table cache variable for type WaitForRequestType and conformance WaitForRequestType;
  if (!lazy protocol witness table cache variable for type WaitForRequestType and conformance WaitForRequestType)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WaitForRequestType,  &type metadata for WaitForRequestType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WaitForRequestType and conformance WaitForRequestType);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for WaitForRequestType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_C6184 + 4 * byte_185582[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_C61B8 + 4 * byte_18557D[v4]))();
}

uint64_t sub_C61B8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_C61C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xC61C8LL);
  }
  return result;
}

uint64_t sub_C61D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xC61DCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_C61E0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_C61E8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WaitForRequestType()
{
  return &type metadata for WaitForRequestType;
}

ValueMetadata *type metadata accessor for VoiceCmdsInstrumentations()
{
  return &type metadata for VoiceCmdsInstrumentations;
}

uint64_t *initializeBufferWithCopyOfBuffer for DurationUtil(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v12);
  }

  else
  {
    uint64_t v7 = type metadata accessor for ContinuousClock.Instant(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain(v11);
  }

  return a1;
}

uint64_t destroy for DurationUtil(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContinuousClock.Instant(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t initializeWithCopy for DurationUtil(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t assignWithCopy for DurationUtil(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t initializeWithTake for DurationUtil(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for DurationUtil(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v12 = v8[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for DurationUtil(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_C64A8);
}

uint64_t sub_C64A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = OUTLINED_FUNCTION_15_18();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  unint64_t v8 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DurationUtil(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_C652C);
}

uint64_t sub_C652C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = OUTLINED_FUNCTION_15_18();
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3) {
    return __swift_storeEnumTagSinglePayload(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20) + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for DurationUtil(uint64_t a1)
{
  uint64_t result = type metadata accessor for ContinuousClock.Instant(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_185668;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_0_28(uint64_t a1, uint64_t (*a2)(void))
{
  return outlined destroy of SiriWorkflowRunnerEvent(v2, a2);
}

uint64_t OUTLINED_FUNCTION_2_25()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 56);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v0;
  return swift_task_dealloc(v5);
}

uint64_t OUTLINED_FUNCTION_3_32(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_4_26(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_6_28(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_10_23()
{
  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

void OUTLINED_FUNCTION_11_21()
{
}

uint64_t OUTLINED_FUNCTION_15_18()
{
  return type metadata accessor for ContinuousClock.Instant(0LL);
}

uint64_t OUTLINED_FUNCTION_16_30()
{
  return type metadata accessor for DurationUtil(0LL);
}

  ;
}

void CustomIntentsDialogTemplating.__allocating_init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)()
{
  uint64_t v13 = OUTLINED_FUNCTION_97_4(v11, v12, v21);
  OUTLINED_FUNCTION_74_12(v13, v14, v15, v16, v17, v18, v19, v20, v22, v23, v24, v25);
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  OUTLINED_FUNCTION_24_0();
}

uint64_t static CustomIntentsDialogTemplating.isShortcutsInternalCustomIntent(intent:)(void *a1)
{
  id v1 = [a1 typeName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  String.lowercased()();
  OUTLINED_FUNCTION_22();
  uint64_t countAndFlagsBits = String.lowercased()()._countAndFlagsBits;
  unint64_t v2 = lazy protocol witness table accessor for type String and conformance String();
  char v9 = OUTLINED_FUNCTION_0_19(v2, (uint64_t)&type metadata for String, v3, v4, v5, v6, v7, v8, countAndFlagsBits);
  OUTLINED_FUNCTION_1_2();
  if ((v9 & 1) != 0
    || (uint64_t v10 = String.lowercased()()._countAndFlagsBits,
        char v17 = OUTLINED_FUNCTION_0_19(v10, (uint64_t)&type metadata for String, v11, v12, v13, v14, v15, v16, v10),
        uint64_t v18 = OUTLINED_FUNCTION_1_2(),
        (v17 & 1) != 0))
  {
    OUTLINED_FUNCTION_14();
    char v25 = 1;
  }

  else
  {
    char v25 = OUTLINED_FUNCTION_0_19( v18,  (uint64_t)&type metadata for String,  v19,  v20,  v21,  v22,  v23,  v24,  0xD000000000000013LL);
    OUTLINED_FUNCTION_14();
  }

  return v25 & 1;
}

void specialized DisambiguationItemProtocol.getDisplayTitle()()
{
}

void *CustomIntentsDialogTemplating.catFamily.unsafeMutableAddressor()
{
  return &static CustomIntentsDialogTemplating.catFamily;
}

unint64_t static CustomIntentsDialogTemplating.catFamily.getter()
{
  return 0xD000000000000010LL;
}

void CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)()
{
  uint64_t v12 = OUTLINED_FUNCTION_97_4(v10, v11, v20);
  OUTLINED_FUNCTION_74_12(v12, v13, v14, v15, v16, v17, v18, v19, v21, v22, v23, v24);
  __swift_destroy_boxed_opaque_existential_1Tm(v0);
  OUTLINED_FUNCTION_24_0();
}

uint64_t CustomIntentsDialogTemplating.yesAndCancel(intentVerb:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[5] = OUTLINED_FUNCTION_9_0(*(void *)(v4 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentsDialogTemplating.yesAndCancel(intentVerb:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t v12 = v10[2];
  uint64_t v11 = v10[3];
  v10[6] = OUTLINED_FUNCTION_19_22((void *)(v10[4] + 16LL));
  OUTLINED_FUNCTION_9_4();
  OUTLINED_FUNCTION_24_15(v12, v11);
  uint64_t v13 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_25_26(v13);
  uint64_t v15 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunVoiceCommandCATsSimple + v14 + 232));
  v10[7] = v15;
  *uint64_t v15 = v10;
  v15[1] = CustomIntentsDialogTemplating.yesAndCancel(intentVerb:);
  uint64_t v16 = OUTLINED_FUNCTION_195();
  return OUTLINED_FUNCTION_101_3(v16, v17, a10);
}

uint64_t CustomIntentsDialogTemplating.yesAndCancel(intentVerb:)(uint64_t a1)
{
  uint64_t v5 = v2[5];
  if (!v1) {
    void v2[9] = a1;
  }
  _s11SiriKitFlow15NLContextUpdateVSgWOhTm_0(v5, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t CustomIntentsDialogTemplating.yesAndCancel(intentVerb:)()
{
  *(_BYTE *)(v0 + 80) = 2;
  uint64_t v1 = ((uint64_t (*)(uint64_t))dispatch thunk of LabelExecutionResult.subscript.getter)(v0 + 80);
  uint64_t v3 = v2;
  *(_BYTE *)(v0 + 81) = 0;
  uint64_t v4 = ((uint64_t (*)(uint64_t))dispatch thunk of LabelExecutionResult.subscript.getter)(v0 + 81);
  uint64_t v6 = v5;
  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_20_0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8))(v1, v3, v4, v6);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_273();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CustomIntentsDialogTemplating.yesAndCancel_rfv1(intentVerb:)(uint64_t a1, uint64_t a2)
{
  v3[15] = a2;
  v3[16] = v2;
  v3[14] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[17] = OUTLINED_FUNCTION_9_0(*(void *)(v4 - 8));
  uint64_t v5 = OUTLINED_FUNCTION_44_6();
  v3[18] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[19] = v6;
  v3[20] = OUTLINED_FUNCTION_9_0(v6);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentsDialogTemplating.yesAndCancel_rfv1(intentVerb:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t v12 = v10[14];
  uint64_t v11 = v10[15];
  uint64_t v13 = OUTLINED_FUNCTION_19_22((void *)(v10[16] + 16LL));
  v10[21] = v13;
  OUTLINED_FUNCTION_9_4();
  OUTLINED_FUNCTION_24_15(v12, v11);
  uint64_t v14 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_25_26(v14);
  uint64_t v16 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunVoiceCommandCATs + v15 + 112));
  v10[22] = v16;
  void *v16 = v10;
  v16[1] = CustomIntentsDialogTemplating.yesAndCancel_rfv1(intentVerb:);
  return OUTLINED_FUNCTION_24_1(v10[20], v13, v10[17], a10);
}

uint64_t CustomIntentsDialogTemplating.yesAndCancel_rfv1(intentVerb:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_174(*(void *)(v0 + 176), v0);
  OUTLINED_FUNCTION_128_1(v1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(v0 + 160));
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

void *CustomIntentsDialogTemplating.yesAndCancel_rfv1(intentVerb:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  uint64_t inited = swift_initStackObject(v1, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_17E660;
  *(void *)(inited + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 7562617LL;
  *(void *)(inited + 40) = 0xE300000000000000LL;
  uint64_t result = (void *)TemplatingResult.print.getter();
  if (result[2])
  {
    uint64_t v5 = result[4];
    uint64_t v4 = result[5];
    OUTLINED_FUNCTION_9_4();
    uint64_t v6 = OUTLINED_FUNCTION_37();
    *(void *)(inited + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v5;
    *(void *)(inited + 56) = v4;
    *(void *)(inited + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0x6C65636E6163LL;
    *(void *)(inited + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0xE600000000000000LL;
    uint64_t result = (void *)((uint64_t (*)(uint64_t))TemplatingResult.print.getter)(v6);
    if (result[2] >= 2uLL)
    {
      uint64_t v8 = *(void *)(v0 + 152);
      uint64_t v7 = *(void *)(v0 + 160);
      uint64_t v10 = result[6];
      uint64_t v9 = result[7];
      swift_bridgeObjectRetain(v9);
      OUTLINED_FUNCTION_20();
      *(void *)(inited + 80) = v10;
      *(void *)(inited + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v9;
      Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
      OUTLINED_FUNCTION_57_4(v7, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
      OUTLINED_FUNCTION_15_0();
      OUTLINED_FUNCTION_33_0();
      uint64_t v11 = OUTLINED_FUNCTION_23_2();
      return (void *)OUTLINED_FUNCTION_15_2(v11, v12);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t CustomIntentsDialogTemplating.inputErrorDialog()()
{
  uint64_t v1 = type metadata accessor for CATOption(0LL);
  *(void *)(v0 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 184) = OUTLINED_FUNCTION_9_0(*(void *)(v1 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 **v9;
  OUTLINED_FUNCTION_17_0();
  static Device.current.getter((void *)v0 + 18, v1);
  type metadata accessor for RunLinkActionCATs(0LL);
  OUTLINED_FUNCTION_59();
  uint64_t v2 = OUTLINED_FUNCTION_41_15();
  type metadata accessor for RunLinkActionCATsSimple(0LL);
  OUTLINED_FUNCTION_59();
  uint64_t v3 = OUTLINED_FUNCTION_241();
  type metadata accessor for RunVoiceCommandCATs(0LL);
  OUTLINED_FUNCTION_59();
  uint64_t v4 = OUTLINED_FUNCTION_41_15();
  type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  OUTLINED_FUNCTION_59();
  uint64_t v5 = OUTLINED_FUNCTION_241();
  type metadata accessor for RunLinkActionCATPatternsExecutor(0LL);
  OUTLINED_FUNCTION_59();
  uint64_t v6 = OUTLINED_FUNCTION_41_15();
  uint64_t v7 = type metadata accessor for LinkActionDialogTemplating();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_246(v7);
  *((void *)v0 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v8;
  *((void *)v0 + 25) = specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)( v0 + 9,  v2,  v3,  v4,  v5,  v6,  v8);
  uint64_t v9 = (__int128 **)swift_task_alloc(dword_217A44);
  *((void *)v0 + 26) = v9;
  *uint64_t v9 = v0;
  v9[1] = (__int128 *)CustomIntentsDialogTemplating.inputErrorDialog();
  return LinkActionDialogTemplating.makeGenericError()();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(void);
  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_10_0(v2);
  *(void *)(v1 + 216) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_release();
    OUTLINED_FUNCTION_40_0();
    uint64_t v5 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_23_1(v5, v6);
  }

{
  uint64_t v0;
  swift_release();
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentsDialogTemplating.makeParameterPromptDialog(app:parameterName:intent:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a4;
  *(void *)(v6 + 96) = v5;
  *(_BYTE *)(v6 + 176) = a5;
  *(void *)(v6 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a2;
  *(void *)(v6 + 80) = a3;
  *(void *)(v6 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v6 + 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = OUTLINED_FUNCTION_20_10(v7);
  *(void *)(v6 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = OUTLINED_FUNCTION_11_0();
  *(void *)(v6 + 120) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentsDialogTemplating.makeParameterPromptDialog(app:parameterName:intent:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t v11 = (void *)v10[12];
  uint64_t v13 = v11[5];
  uint64_t v12 = v11[6];
  __swift_project_boxed_opaque_existential_1(v11 + 2, v13);
  uint64_t v14 = OUTLINED_FUNCTION_19_16(v13, v12);
  v10[16] = v14;
  OUTLINED_FUNCTION_235();
  v10[17] = v15;
  if (v15)
  {
    uint64_t v16 = *(void (**)(uint64_t))(*(void *)v15 + 112LL);
    uint64_t v17 = OUTLINED_FUNCTION_10_6();
    v16(v17);
    uint64_t v18 = OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_106_0(v18);
    OUTLINED_FUNCTION_232();
    uint64_t v20 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunCustomIntentCATsSimple
                                                     + v19
                                                     + 368));
    v10[18] = v20;
    *uint64_t v20 = v10;
    v20[1] = CustomIntentsDialogTemplating.makeParameterPromptDialog(app:parameterName:intent:shouldShowAppAttribution:);
    uint64_t v21 = OUTLINED_FUNCTION_245();
    return OUTLINED_FUNCTION_45_9(v21, v22, v23, v24, v25);
  }

  else
  {
    uint64_t v27 = v10[13];
    uint64_t v29 = v10[9];
    uint64_t v28 = v10[10];
    OUTLINED_FUNCTION_10_6();
    swift_bridgeObjectRetain(v28);
    OUTLINED_FUNCTION_24_15(v29, v28);
    uint64_t v30 = OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_180(v27, v31, v32, v30);
    id v34 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunCustomIntentCATsSimple
                                                     + v33
                                                     + 352));
    v10[20] = v34;
    *id v34 = v10;
    v34[1] = CustomIntentsDialogTemplating.makeParameterPromptDialog(app:parameterName:intent:shouldShowAppAttribution:);
    return OUTLINED_FUNCTION_45_17(v14, v10[13], a10);
  }

uint64_t CustomIntentsDialogTemplating.makeParameterPromptDialog(app:parameterName:intent:shouldShowAppAttribution:)( uint64_t a1)
{
  uint64_t v3 = *(void *)(v2 + 120);
  uint64_t v4 = *(void *)(v2 + 112);
  OUTLINED_FUNCTION_51_3();
  *(void *)(v5 + 15__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v1;
  swift_task_dealloc(v6);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_16_31(v4);
  OUTLINED_FUNCTION_16_31(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_110_4(a1);
  uint64_t v2 = OUTLINED_FUNCTION_176(*(void *)(v1 + 160), v1);
  OUTLINED_FUNCTION_128_1(v2, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

uint64_t CustomIntentsDialogTemplating.makeParameterPromptDialog(app:parameterName:intent:shouldShowAppAttribution:)()
{
  uint64_t v0 = OUTLINED_FUNCTION_23_2();
  return OUTLINED_FUNCTION_23_1(v0, v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  swift_release();
  OUTLINED_FUNCTION_229();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  uint64_t v0 = OUTLINED_FUNCTION_23_2();
  return OUTLINED_FUNCTION_23_1(v0, v1);
}

{
  uint64_t v0;
  swift_release();
  OUTLINED_FUNCTION_227();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_227();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentsDialogTemplating.makeParameterPromptDialog_preRFv2(app:parameterName:intent:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(_BYTE *)(v7 + 14__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a6;
  *(void *)(v7 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a5;
  *(void *)(v7 + 56) = v6;
  *(void *)(v7 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a3;
  *(void *)(v7 + 40) = a4;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v7 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = OUTLINED_FUNCTION_20_10(v8);
  *(void *)(v7 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = OUTLINED_FUNCTION_11_0();
  *(void *)(v7 + 80) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentsDialogTemplating.makeParameterPromptDialog_preRFv2(app:parameterName:intent:shouldShowAppAttribution:)()
{
  v0[11] = v1;
  if (v1)
  {
    uint64_t v2 = v0[9];
    v0[12] = OUTLINED_FUNCTION_3_29((void *)(v0[7] + 16LL));
    OUTLINED_FUNCTION_57_16();
    uint64_t v3 = OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_20_27();
    OUTLINED_FUNCTION_59_10(v2, 0LL, 1LL, v3);
    uint64_t v5 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunCustomIntentCATs + v4 + 184));
    v0[13] = v5;
    *uint64_t v5 = v0;
    v5[1] = CustomIntentsDialogTemplating.makeParameterPromptDialog_preRFv2(app:parameterName:intent:shouldShowAppAttribution:);
    OUTLINED_FUNCTION_142_2();
    return OUTLINED_FUNCTION_46_13(v6, v7, v8, v9, v10, v11);
  }

  else
  {
    uint64_t v14 = v0[4];
    uint64_t v13 = v0[5];
    v0[15] = OUTLINED_FUNCTION_19_22((void *)(v0[7] + 16LL));
    OUTLINED_FUNCTION_9_4();
    OUTLINED_FUNCTION_24_15(v14, v13);
    uint64_t v15 = OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_25_26(v15);
    uint64_t v17 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunCustomIntentCATs + v16 + 176));
    v0[16] = v17;
    *uint64_t v17 = v0;
    v17[1] = CustomIntentsDialogTemplating.makeParameterPromptDialog_preRFv2(app:parameterName:intent:shouldShowAppAttribution:);
    OUTLINED_FUNCTION_143_1();
    return OUTLINED_FUNCTION_10(v18, v19, v20, v21);
  }

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_50_0();
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  OUTLINED_FUNCTION_175(v0[13], (uint64_t)v0);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_16_31(v2);
  OUTLINED_FUNCTION_16_31(v1);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  swift_release();
  swift_task_dealloc(*(void *)(v0 + 80));
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_3_14(v1);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_10_0(v2);
  *(void *)(v1 + 136) = v0;
  uint64_t v4 = swift_task_dealloc(v3);
  OUTLINED_FUNCTION_128_1(v4, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_34_0();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    swift_task_dealloc(*(void *)(v1 + 80));
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    uint64_t v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_3_14(v6);
  }

{
  uint64_t v0;
  swift_release();
  OUTLINED_FUNCTION_272();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  return OUTLINED_FUNCTION_22_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_272();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  return OUTLINED_FUNCTION_22_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentsDialogTemplating.getCustomIntroductionPrompt(disambiguationList:app:parameterName:intent:tokens:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16) >= 6uLL
    && (CustomIntentsDialogTemplating.localizedCustomPromptFor(promptDialogType:app:parameterName:intent:tokens:)(), v3))
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 112LL))(v3);
    OUTLINED_FUNCTION_12_5();
    uint64_t v4 = 0LL;
  }

  else
  {
    uint64_t v4 = 1LL;
  }

  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  return __swift_storeEnumTagSinglePayload(a2, v4, 1LL, v5);
}

uint64_t CustomIntentsDialogTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:shouldShowAppAttribution:siriEnvironment:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  *(void *)(v9 + 120) = v15;
  *(void *)(v9 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v8;
  *(_BYTE *)(v9 + 24__swift_destroy_boxed_opaque_existential_1Tm(v0 + 9) = a8;
  *(void *)(v9 + 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a5;
  *(void *)(v9 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a7;
  *(_BYTE *)(v9 + 24__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a6;
  *(void *)(v9 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a2;
  *(void *)(v9 + 96) = a3;
  *(void *)(v9 + 80) = a1;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v9 + 136) = OUTLINED_FUNCTION_20_10(v10);
  *(void *)(v9 + 14__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = OUTLINED_FUNCTION_11_0();
  *(void *)(v9 + 15__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v11, v12, v13);
}

void CustomIntentsDialogTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:shouldShowAppAttribution:siriEnvironment:)()
{
  uint64_t v1 = (void *)v0[16];
  uint64_t v2 = v0[13];
  v0[9] = _swiftEmptyArrayStorage;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Int)>);
  uint64_t inited = (__n128 *)swift_initStackObject(v3, v0 + 2);
  uint64_t v5 = OUTLINED_FUNCTION_168(inited, (__n128)xmmword_17E650);
  v5[3].n128_u64[0] = *(void *)(v2 + 16);
  uint64_t v6 = Dictionary.init(dictionaryLiteral:)( v5,  &type metadata for String,  &type metadata for Int,  &protocol witness table for String);
  uint64_t v7 = v1 + 2;
  uint64_t v9 = v1[5];
  uint64_t v8 = v1[6];
  __swift_project_boxed_opaque_existential_1(v7, v9);
  uint64_t v10 = OUTLINED_FUNCTION_19_16(v9, v8);
  v0[20] = v10;
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v6);
  CustomIntentsDialogTemplating.localizedCustomPromptFor(promptDialogType:app:parameterName:intent:tokens:)();
  uint64_t v12 = v11;
  v0[21] = v11;
  OUTLINED_FUNCTION_20();
  if (v12)
  {
    uint64_t v13 = v0[19];
    uint64_t v14 = v0[16];
    uint64_t v15 = v0[13];
    uint64_t v16 = v0[10];
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v6);
    swift_bridgeObjectRelease(v6);
    uint64_t v17 = v15;
    uint64_t v18 = v16;
    CustomIntentsDialogTemplating.getCustomIntroductionPrompt(disambiguationList:app:parameterName:intent:tokens:)( v17,  v13);
    OUTLINED_FUNCTION_56_1();
    uint64_t v19 = *(void **)(v14 + 88);
    uint64_t v20 = *(void (**)(uint64_t))(*(void *)v12 + 112LL);
    uint64_t v21 = swift_retain(v10);
    v20(v21);
    OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_165_0();
    CustomIntentsDialogTemplating.getAppName(app:)(v18);
    OUTLINED_FUNCTION_165_0();
    uint64_t v22 = (void *)swift_task_alloc(*(unsigned int *)(*(void *)(class metadata base offset for RunCustomIntentCATsSimple
                                                                 + *v19
                                                                 + 96)
                                                     + 4LL));
    v0[22] = v22;
    *uint64_t v22 = v0;
    v22[1] = CustomIntentsDialogTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:shouldShowAppAttribution:siriEnvironment:);
    OUTLINED_FUNCTION_34_3();
    __asm { BR              X5 }
  }

  uint64_t v24 = v0[16];
  swift_bridgeObjectRelease(v6);
  uint64_t v25 = *(unsigned int *)(*(void *)(class metadata base offset for RunCustomIntentCATsSimple
                                    + **(void **)(v24 + 88)
                                    + 64)
                        + 4LL);
  swift_retain(v10);
  uint64_t v26 = (void *)swift_task_alloc(v25);
  v0[25] = v26;
  *uint64_t v26 = v0;
  v26[1] = CustomIntentsDialogTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:shouldShowAppAttribution:siriEnvironment:);
  OUTLINED_FUNCTION_34_3();
  __asm { BR              X1 }

uint64_t CustomIntentsDialogTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:shouldShowAppAttribution:siriEnvironment:)()
{
  uint64_t v2 = v1[22];
  uint64_t v4 = v1[17];
  uint64_t v3 = v1[18];
  v1[23] = v5;
  v1[24] = v0;
  OUTLINED_FUNCTION_54_0(v2);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_16_31(v4);
  OUTLINED_FUNCTION_16_31(v3);
  if (v0) {
    swift_bridgeObjectRelease(v1[9]);
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_45_7(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  OUTLINED_FUNCTION_104();
  ((void (*)(id))specialized Array._makeUniqueAndReserveCapacityIfNotUnique())(*(id *)(v1 + 184));
  OUTLINED_FUNCTION_240();
  if (v3) {
    OUTLINED_FUNCTION_118_4(v0 + 1, v2);
  }
  uint64_t v4 = *(void **)(v1 + 184);
  uint64_t v5 = *(void *)(v1 + 152);
  uint64_t v6 = OUTLINED_FUNCTION_256();
  specialized Array._endMutation()(v6, v7, v8);
  OUTLINED_FUNCTION_53_7();

  _s11SiriKitFlow15NLContextUpdateVSgWOhTm_0(v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = (void *)swift_task_alloc(dword_219F64);
  uint64_t v10 = OUTLINED_FUNCTION_157_0( v9,  (uint64_t)CustomIntentsDialogTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:shouldShowAppAttribution:siriEnvironment:));
  return CustomIntentsDialogTemplating.makeJoinedSpeakableDisambiguationItemList(app:intent:parameterName:disambiguationList:deviceIsLocked:siriEnvironment:)( (uint64_t)v10,  v11,  v12,  v13,  v14,  v15,  v16);
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(*(id *)(v1 + 208));
  OUTLINED_FUNCTION_240();
  if (v3) {
    OUTLINED_FUNCTION_118_4(v0 + 1, v2);
  }
  uint64_t v4 = *(void **)(v1 + 208);
  uint64_t v5 = OUTLINED_FUNCTION_256();
  specialized Array._endMutation()(v5, v6, v7);

  uint64_t v8 = (void *)swift_task_alloc(dword_219F64);
  uint64_t v9 = OUTLINED_FUNCTION_157_0( v8,  (uint64_t)CustomIntentsDialogTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:shouldShowAppAttribution:siriEnvironment:));
  return CustomIntentsDialogTemplating.makeJoinedSpeakableDisambiguationItemList(app:intent:parameterName:disambiguationList:deviceIsLocked:siriEnvironment:)( (uint64_t)v9,  v10,  v11,  v12,  v13,  v14,  v15);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_77_1();
  uint64_t v2 = v0[28];
  v0[29] = v3;
  v0[30] = v1;
  OUTLINED_FUNCTION_54_0(v2);
  if (v1) {
    swift_bridgeObjectRelease(v0[9]);
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v1 = *(void **)(v0 + 232);
  if (v1)
  {
    uint64_t v2 = v1;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v4 = *(void *)((char *)&dword_10 + (*(void *)(v0 + 72) & 0xFFFFFFFFFFFFFF8LL));
    uint64_t v3 = *(void *)((char *)&dword_18 + (*(void *)(v0 + 72) & 0xFFFFFFFFFFFFFF8LL));
    if (v4 >= v3 >> 1) {
      OUTLINED_FUNCTION_118_4(v4 + 1, v3);
    }
    uint64_t v5 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, v2);
    specialized Array._endMutation()(v5, v6, v7);
  }

  swift_release();
  uint64_t v8 = *(void *)(v0 + 72);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  return OUTLINED_FUNCTION_15_2(v8, *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 152);
  swift_release();
  OUTLINED_FUNCTION_12_5();
  _s11SiriKitFlow15NLContextUpdateVSgWOhTm_0(v1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_153_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  return OUTLINED_FUNCTION_22_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  swift_release();
  OUTLINED_FUNCTION_153_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  return OUTLINED_FUNCTION_22_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  swift_release();
  OUTLINED_FUNCTION_153_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  return OUTLINED_FUNCTION_22_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentsDialogTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:shouldShowAppAttribution:siriEnvironment:)( uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 200);
  *(void *)(v3 + 20__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a1;
  *(void *)(v3 + 216) = v1;
  OUTLINED_FUNCTION_54_0(v4);
  OUTLINED_FUNCTION_34_0();
  if (v1) {
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t CustomIntentsDialogTemplating.offerMoreItems(remainingPages:nextPageSize:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)CustomIntentsDialogTemplating.offerMoreItems(remainingPages:nextPageSize:));
}

uint64_t CustomIntentsDialogTemplating.offerMoreItems(remainingPages:nextPageSize:)()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = *(void **)(v1 + 88);
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = OUTLINED_FUNCTION_3_29((void *)(v1 + 16));
  v0[5] = v5;
  uint64_t v6 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunCustomIntentCATsSimple + *v2 + 336));
  v0[6] = v6;
  *uint64_t v6 = v0;
  v6[1] = CustomIntentsDialogTemplating.offerMoreItems(remainingPages:nextPageSize:);
  return ((uint64_t (*)(void, void, void, void, void))v8)(v5, (double)v3, 0LL, (double)v4, 0LL);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_4_15();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_release();
    uint64_t v2 = OUTLINED_FUNCTION_84_7();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

{
  uint64_t v0;
  swift_release();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentsDialogTemplating.makeUnlockDeviceDialog()()
{
  *(void *)(v1 + 16) = v0;
  return OUTLINED_FUNCTION_6_2((uint64_t)CustomIntentsDialogTemplating.makeUnlockDeviceDialog());
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v1 = OUTLINED_FUNCTION_3_29((void *)(*(void *)(v0 + 16) + 16LL));
  OUTLINED_FUNCTION_214(v1);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunCustomIntentCATsSimple + v2 + 48));
  *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v3;
  uint64_t v4 = OUTLINED_FUNCTION_88_3(v3, (uint64_t)CustomIntentsDialogTemplating.makeUnlockDeviceDialog());
  return OUTLINED_FUNCTION_23_1(v4, v5);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_39_18();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_178();
    uint64_t v2 = OUTLINED_FUNCTION_84_7();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

uint64_t CustomIntentsDialogTemplating.makeUnlockDeviceDialog_rfv1()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)CustomIntentsDialogTemplating.makeUnlockDeviceDialog_rfv1());
}

uint64_t CustomIntentsDialogTemplating.makeUnlockDeviceDialog_rfv1()()
{
  uint64_t v1 = OUTLINED_FUNCTION_3_29((void *)(*(void *)(v0 + 24) + 16LL));
  OUTLINED_FUNCTION_102_1(v1);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunCustomIntentCATs + v2 + 24));
  *(void *)(v0 + 40) = v3;
  uint64_t v4 = OUTLINED_FUNCTION_74_7(v3);
  return OUTLINED_FUNCTION_36_1(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_24_17();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    OUTLINED_FUNCTION_177();
    return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v1 + 8));
  }

uint64_t CustomIntentsDialogTemplating.makeOpenAppDialogAsLabels(app:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  OUTLINED_FUNCTION_77_1();
  OUTLINED_FUNCTION_10_0(v5);
  *(void *)(v1 + 56) = v2;
  swift_task_dealloc(v6);
  _s11SiriKitFlow15NLContextUpdateVSgWOhTm_0( *(void *)(v1 + 32),  &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_53_7();
  if (v2)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_15_2(a1, *(uint64_t (**)(void))(v3 + 8));
  }

uint64_t CustomIntentsDialogTemplating.makeOpenAppDialogAsLabels(app:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t v11 = OUTLINED_FUNCTION_19_22((void *)(v10[3] + 16LL));
  v10[5] = v11;
  OUTLINED_FUNCTION_181();
  uint64_t v12 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_25_26(v12);
  uint64_t v14 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunVoiceCommandCATsSimple + v13 + 136));
  v10[6] = v14;
  void *v14 = v10;
  v14[1] = CustomIntentsDialogTemplating.makeOpenAppDialogAsLabels(app:);
  return OUTLINED_FUNCTION_101_3(v11, v10[4], a10);
}

uint64_t CustomIntentsDialogTemplating.makeOpenAppDialogAsLabels(app:)()
{
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentsDialogTemplating.makeOpenAppDialog_rfv1(app:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[5] = OUTLINED_FUNCTION_9_0(*(void *)(v4 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentsDialogTemplating.makeOpenAppDialog_rfv1(app:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t v11 = OUTLINED_FUNCTION_19_22((void *)(v10[4] + 16));
  v10[6] = v11;
  OUTLINED_FUNCTION_181();
  uint64_t v12 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_25_26(v12);
  uint64_t v14 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunVoiceCommandCATs + v13 + 64));
  v10[7] = (uint64_t)v14;
  void *v14 = v10;
  v14[1] = CustomIntentsDialogTemplating.makeOpenAppDialog_rfv1(app:);
  return OUTLINED_FUNCTION_24_1(v10[2], v11, v10[5], a10);
}

uint64_t CustomIntentsDialogTemplating.makeOpenAppDialog_rfv1(app:)()
{
  uint64_t v4 = OUTLINED_FUNCTION_171(*(void *)(v2 + 56), v3);
  OUTLINED_FUNCTION_128_1(v4, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_34_0();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 40));
    return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v1 + 8));
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_273();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentsDialogTemplating.makeReadDisambiguationList(disambiguationItems:)(uint64_t a1)
{
  v2[13] = a1;
  v2[14] = v1;
  uint64_t v3 = OUTLINED_FUNCTION_61_1();
  v2[15] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[16] = v4;
  v2[17] = OUTLINED_FUNCTION_9_0(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentsDialogTemplating.makeReadDisambiguationList(disambiguationItems:)()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (*(void *)(v1 + 16))
  {
    OUTLINED_FUNCTION_123_4();
    uint64_t v80 = OUTLINED_FUNCTION_6_4();
    uint64_t v3 = v1 + 32;
    uint64_t v75 = (uint64_t)(v0 + 2);
    do
    {
      OUTLINED_FUNCTION_219();
      OUTLINED_FUNCTION_16_15();
      uint64_t v2 = (void *)OUTLINED_FUNCTION_208();
      uint64_t v5 = v4;
      OUTLINED_FUNCTION_56_1();
      uint64_t v6 = v0[5];
      if (v6)
      {
        OUTLINED_FUNCTION_52_5();
        OUTLINED_FUNCTION_218();
        OUTLINED_FUNCTION_64_0();
        OUTLINED_FUNCTION_271();
        if (v15)
        {
          OUTLINED_FUNCTION_90_6( v7,  v8,  v9,  v10,  v11,  v12,  v13,  v14,  v67,  v71,  v75,  v78,  v80,  v82,  v84,  (uint64_t)v2,  v5,  v90,  v92);
          OUTLINED_FUNCTION_1_2();
          OUTLINED_FUNCTION_151_1(v90);
          uint64_t v2 = (void *)v87;
        }

        OUTLINED_FUNCTION_1_2();
      }

      OUTLINED_FUNCTION_16_15();
      uint64_t v16 = OUTLINED_FUNCTION_261();
      uint64_t v18 = v17;
      OUTLINED_FUNCTION_56_1();
      if (v6)
      {
        OUTLINED_FUNCTION_52_5();
        OUTLINED_FUNCTION_254();
        OUTLINED_FUNCTION_64_0();
        OUTLINED_FUNCTION_263();
        if (v27)
        {
          OUTLINED_FUNCTION_89_8( v19,  v20,  v21,  v22,  v23,  v24,  v25,  v26,  v67,  v71,  v75,  v78,  v80,  v82,  v84,  v16,  v18,  v90,  v92);
          uint64_t v28 = OUTLINED_FUNCTION_56_1();
          OUTLINED_FUNCTION_211( v28,  v29,  v30,  v31,  v32,  v33,  v34,  v35,  v68,  v72,  v76,  v79,  v81,  v83,  v85,  v88,  v89,  v91,  v93);
        }

        uint64_t v36 = v82;
        OUTLINED_FUNCTION_56_1();
      }

      else
      {
        uint64_t v36 = v82;
      }

      uint64_t v37 = OUTLINED_FUNCTION_166_0();
      uint64_t v45 = OUTLINED_FUNCTION_250(v37, v38, v39, v40, v41, v42, v43, v44, v67, v71, v75);
      uint64_t v53 = OUTLINED_FUNCTION_260(v45, v46, v47, v48, v49, v50, v51, v52, v69, v73, v77, v78, v80, v82, v84);
      if ((v53 & 1) == 0)
      {
        OUTLINED_FUNCTION_139_1();
        uint64_t v2 = v86;
      }

      unint64_t v59 = v2[3];
      if (v2[2] >= v59 >> 1)
      {
        OUTLINED_FUNCTION_134_1(v59);
        uint64_t v2 = v86;
      }

      OUTLINED_FUNCTION_87_6(v53, v0[17], v0[15], v54, v55, v56, v57, v58, v70, v74);
      uint64_t v84 = (uint64_t)v2;
      v3 += 88LL;
    }

    while (v36 != 1);
  }

  v0[18] = v2;
  uint64_t v60 = v0[14];
  uint64_t v61 = *(uint64_t **)(v60 + 88);
  v0[19] = OUTLINED_FUNCTION_3_29((void *)(v60 + 16));
  uint64_t v62 = (void *)OUTLINED_FUNCTION_113_3(*v61);
  v0[20] = v62;
  uint64_t v63 = OUTLINED_FUNCTION_148_1( v62,  (uint64_t)CustomIntentsDialogTemplating.makeReadDisambiguationList(disambiguationItems:));
  return OUTLINED_FUNCTION_84_10(v63, v64, v65);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(void);
  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_10_0(v2);
  *(void *)(v1 + 16__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v1 + 144));
    OUTLINED_FUNCTION_12_5();
    OUTLINED_FUNCTION_15_0();
    uint64_t v5 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_23_1(v5, v6);
  }

{
  uint64_t v0;
  swift_release();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentsDialogTemplating.makeOfferMoreDisambiguationItem(app:parameterName:intent:remainingPages:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = a5;
  void v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  _OWORD v6[2] = a1;
  v6[3] = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v6[8] = OUTLINED_FUNCTION_9_0(*(void *)(v7 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentsDialogTemplating.makeOfferMoreDisambiguationItem(app:parameterName:intent:remainingPages:)()
{
  uint64_t v1 = v0[7];
  OUTLINED_FUNCTION_235();
  uint64_t v3 = v2;
  v0[9] = v2;
  uint64_t v4 = *(void **)(v1 + 88);
  uint64_t v5 = OUTLINED_FUNCTION_3_29((void *)(v1 + 16));
  v0[10] = v5;
  if (v3)
  {
    uint64_t v6 = *(void (**)(uint64_t))(*(void *)v3 + 112LL);
    uint64_t v7 = swift_retain(v3);
    v6(v7);
    OUTLINED_FUNCTION_53_7();
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v8 = 1LL;
  }

  uint64_t v9 = v0[8];
  uint64_t v10 = v0[6];
  uint64_t v11 = OUTLINED_FUNCTION_61_1();
  __swift_storeEnumTagSinglePayload(v9, v8, 1LL, v11);
  int v12 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunCustomIntentCATsSimple + *v4 + 320));
  v0[11] = v12;
  *int v12 = v0;
  v12[1] = CustomIntentsDialogTemplating.makeOfferMoreDisambiguationItem(app:parameterName:intent:remainingPages:);
  return ((uint64_t (*)(void, void, void, void))v14)(v5, (double)v10, 0LL, v0[8]);
}

{
  uint64_t v0;
  swift_release();
  OUTLINED_FUNCTION_40_0();
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 104));
}

{
  uint64_t v0;
  swift_release();
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentsDialogTemplating.makeOfferMoreDisambiguationItem(app:parameterName:intent:remainingPages:)( uint64_t a1)
{
  v2[12] = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = v2[8];
  if (!v1) {
    v2[13] = a1;
  }
  _s11SiriKitFlow15NLContextUpdateVSgWOhTm_0(v6, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t CustomIntentsDialogTemplating.makeIntroduceDisambiguationPagination(app:intent:parameterName:intentResolutionResult:paginatedItems:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[16] = a6;
  v7[17] = v6;
  v7[14] = a3;
  v7[15] = a4;
  v7[12] = a1;
  v7[13] = a2;
  uint64_t v8 = type metadata accessor for CATOption(0LL);
  v7[18] = OUTLINED_FUNCTION_9_0(*(void *)(v8 - 8));
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v7[19] = OUTLINED_FUNCTION_20_10(v9);
  v7[20] = OUTLINED_FUNCTION_11_0();
  v7[21] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentsDialogTemplating.makeIntroduceDisambiguationPagination(app:intent:parameterName:intentResolutionResult:paginatedItems:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(void), uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<CustomIntentDisambiguationItem>);
  if (PaginatedItemContainer.getCurrentPageIndex()())
  {
    int v14 = *(void **)(v12 + 120);
    outlined bridged method (mbgnn) of @objc INCodableDescription.attribute(byName:)( *(void *)(v12 + 112),  (uint64_t)v14,  [*(id *)(v12 + 104) _codableDescription]);
    OUTLINED_FUNCTION_268();
    if (v14
      && (INCodableAttribute.localizedPrompt(promptDialogType:intent:appInfo:tokens:)( 3LL,  *(void *)(v12 + 104),  0LL,  0LL),  uint64_t v16 = v15,  v14,  v16))
    {
      uint64_t v17 = *(void *)(v12 + 144);
      uint64_t v18 = *(void *)(v12 + 152);
      uint64_t v19 = type metadata accessor for WorkflowRunnerCATsSimple(0LL);
      static CATOption.defaultMode.getter(v19);
      *(void *)(v12 + 200) = CATWrapperSimple.__allocating_init(options:globals:)(v17, 0LL);
      uint64_t v20 = OUTLINED_FUNCTION_129();
      OUTLINED_FUNCTION_24_15(v20, v21);
      uint64_t v22 = OUTLINED_FUNCTION_61_1();
      OUTLINED_FUNCTION_180(v18, v23, v24, v22);
      int v26 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for WorkflowRunnerCATsSimple
                                                      + v25
                                                      + 32));
      *(void *)(v12 + 20__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v26;
      *int v26 = v12;
      v26[1] = CustomIntentsDialogTemplating.makeIntroduceDisambiguationPagination(app:intent:parameterName:intentResolutionResult:paginatedItems:);
      uint64_t v27 = *(void *)(v12 + 152);
    }

    else
    {
      uint64_t v28 = *(void *)(v12 + 136);
      uint64_t v29 = *(void **)(v28 + 88);
      *(void *)(v12 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 224) = OUTLINED_FUNCTION_3_29((void *)(v28 + 16));
      uint64_t v30 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunCustomIntentCATsSimple
                                                      + *v29
                                                      + 304));
      *(void *)(v12 + 23__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v30;
      *uint64_t v30 = v12;
      v30[1] = CustomIntentsDialogTemplating.makeIntroduceDisambiguationPagination(app:intent:parameterName:intentResolutionResult:paginatedItems:);
      uint64_t v27 = OUTLINED_FUNCTION_195();
    }

    return OUTLINED_FUNCTION_3_23(v27, a9);
  }

  else
  {
    uint64_t v32 = *(void *)(v12 + 168);
    uint64_t v33 = PaginatedItemContainer.items.getter(v13);
    uint64_t v34 = *(void *)(v33 + 16);
    swift_bridgeObjectRelease(v33);
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Int)>);
    uint64_t v36 = (__n128 *)OUTLINED_FUNCTION_246(v35);
    uint64_t v37 = OUTLINED_FUNCTION_168(v36, (__n128)xmmword_17E650);
    v37[3].n128_u64[0] = v34;
    uint64_t v38 = Dictionary.init(dictionaryLiteral:)( v37,  &type metadata for String,  &type metadata for Int,  &protocol witness table for String);
    uint64_t v39 = PaginatedItemContainer.pageSize.getter(v13);
    OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_58_1(v32, 1LL);
    if (v39 >= v34)
    {
      OUTLINED_FUNCTION_2_6();
    }

    else
    {
      specialized _dictionaryUpCast<A, B, C, D>(_:)(v38);
      OUTLINED_FUNCTION_2_6();
      CustomIntentsDialogTemplating.localizedCustomPromptFor(promptDialogType:app:parameterName:intent:tokens:)();
      uint64_t v41 = v40;
      uint64_t v42 = OUTLINED_FUNCTION_56_1();
      if (v41)
      {
        (*(void (**)(uint64_t))(*(void *)v41 + 112LL))(v42);
        uint64_t v42 = OUTLINED_FUNCTION_12_5();
        uint64_t v43 = 0LL;
      }

      else
      {
        uint64_t v43 = 1LL;
      }

      uint64_t v45 = *(void *)(v12 + 160);
      uint64_t v44 = *(void *)(v12 + 168);
      OUTLINED_FUNCTION_242(v42, &demangling cache variable for type metadata for SpeakableString?);
      OUTLINED_FUNCTION_58_1(v45, v43);
      outlined init with take of SpeakableString?(v45, v44);
    }

    uint64_t v46 = *(void **)(v12 + 136);
    uint64_t v47 = (void *)v46[11];
    uint64_t v48 = v46[5];
    uint64_t v49 = v46[6];
    __swift_project_boxed_opaque_existential_1(v46 + 2, v48);
    *(void *)(v12 + 176) = OUTLINED_FUNCTION_19_16(v48, v49);
    uint64_t v50 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunCustomIntentCATsSimple
                                                    + *v47
                                                    + 288));
    *(void *)(v12 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 184) = v50;
    *uint64_t v50 = v12;
    v50[1] = CustomIntentsDialogTemplating.makeIntroduceDisambiguationPagination(app:intent:parameterName:intentResolutionResult:paginatedItems:);
    OUTLINED_FUNCTION_47_0();
    return v58(v51, v52, v53, v54, v55, v56, v57, v58, a9, a10, a11, a12);
  }

uint64_t CustomIntentsDialogTemplating.makeIntroduceDisambiguationPagination(app:intent:parameterName:intentResolutionResult:paginatedItems:)()
{
  void v3[9] = v1;
  v3[10] = v2;
  v3[11] = v0;
  OUTLINED_FUNCTION_51_3();
  *(void *)(v4 + 19__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v0;
  swift_task_dealloc(v5);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  _s11SiriKitFlow15NLContextUpdateVSgWOhTm_0( *(void *)(v0 + 168),  &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_116_4();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  uint64_t v1 = OUTLINED_FUNCTION_23_2();
  return OUTLINED_FUNCTION_15_2(v1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t (*v10)(void);
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_194();
  OUTLINED_FUNCTION_10_0(v2);
  *(void *)(v1 + 216) = v0;
  uint64_t v4 = swift_task_dealloc(v3);
  OUTLINED_FUNCTION_242(v4, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_61();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_45_7(v5, v6, v7);
  }

  else
  {
    swift_task_dealloc(*(void *)(v1 + 168));
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    uint64_t v9 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_0_3(v9, v10);
  }

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(void);
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_10_0(v2);
  *(void *)(v1 + 240) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    swift_release();
    swift_task_dealloc(*(void *)(v1 + 168));
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    uint64_t v5 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_15_2(v5, v6);
  }

{
  uint64_t v0;
  _s11SiriKitFlow15NLContextUpdateVSgWOhTm_0( *(void *)(v0 + 168),  &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_116_4();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_116_4();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  swift_release();
  OUTLINED_FUNCTION_116_4();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentsDialogTemplating.makeJoinedSpeakableDisambiguationItemList(app:intent:parameterName:disambiguationList:deviceIsLocked:siriEnvironment:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[14] = a7;
  v8[15] = v7;
  v8[13] = a5;
  uint64_t v9 = OUTLINED_FUNCTION_61_1();
  v8[16] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[17] = v10;
  v8[18] = OUTLINED_FUNCTION_9_0(v10);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentsDialogTemplating.makeJoinedSpeakableDisambiguationItemList(app:intent:parameterName:disambiguationList:deviceIsLocked:siriEnvironment:)()
{
  if ((v1 & 1) != 0)
  {
    uint64_t v2 = *(void *)(v0 + 104);
    uint64_t v3 = _swiftEmptyArrayStorage;
    if (*(void *)(v2 + 16))
    {
      OUTLINED_FUNCTION_123_4();
      uint64_t v81 = OUTLINED_FUNCTION_6_4();
      uint64_t v4 = v2 + 32;
      uint64_t v76 = v0 + 16;
      do
      {
        OUTLINED_FUNCTION_219();
        OUTLINED_FUNCTION_16_15();
        uint64_t v3 = (void *)OUTLINED_FUNCTION_208();
        uint64_t v6 = v5;
        OUTLINED_FUNCTION_56_1();
        uint64_t v7 = *(void *)(v0 + 40);
        if (v7)
        {
          OUTLINED_FUNCTION_52_5();
          OUTLINED_FUNCTION_218();
          OUTLINED_FUNCTION_64_0();
          OUTLINED_FUNCTION_271();
          if (v16)
          {
            OUTLINED_FUNCTION_90_6( v8,  v9,  v10,  v11,  v12,  v13,  v14,  v15,  v68,  v72,  v76,  v79,  v81,  v83,  v85,  (uint64_t)v3,  v6,  v91,  v93);
            OUTLINED_FUNCTION_1_2();
            OUTLINED_FUNCTION_151_1(v91);
            uint64_t v3 = (void *)v88;
          }

          OUTLINED_FUNCTION_1_2();
        }

        OUTLINED_FUNCTION_16_15();
        uint64_t v17 = OUTLINED_FUNCTION_261();
        uint64_t v19 = v18;
        OUTLINED_FUNCTION_56_1();
        if (v7)
        {
          OUTLINED_FUNCTION_52_5();
          OUTLINED_FUNCTION_254();
          OUTLINED_FUNCTION_64_0();
          OUTLINED_FUNCTION_263();
          if (v28)
          {
            OUTLINED_FUNCTION_89_8( v20,  v21,  v22,  v23,  v24,  v25,  v26,  v27,  v68,  v72,  v76,  v79,  v81,  v83,  v85,  v17,  v19,  v91,  v93);
            uint64_t v29 = OUTLINED_FUNCTION_56_1();
            OUTLINED_FUNCTION_211( v29,  v30,  v31,  v32,  v33,  v34,  v35,  v36,  v69,  v73,  v77,  v80,  v82,  v84,  v86,  v89,  v90,  v92,  v94);
          }

          uint64_t v37 = v83;
          OUTLINED_FUNCTION_56_1();
        }

        else
        {
          uint64_t v37 = v83;
        }

        uint64_t v38 = OUTLINED_FUNCTION_166_0();
        uint64_t v46 = OUTLINED_FUNCTION_250(v38, v39, v40, v41, v42, v43, v44, v45, v68, v72, v76);
        uint64_t v54 = OUTLINED_FUNCTION_260(v46, v47, v48, v49, v50, v51, v52, v53, v70, v74, v78, v79, v81, v83, v85);
        if ((v54 & 1) == 0)
        {
          OUTLINED_FUNCTION_139_1();
          uint64_t v3 = v87;
        }

        unint64_t v60 = v3[3];
        if (v3[2] >= v60 >> 1)
        {
          OUTLINED_FUNCTION_134_1(v60);
          uint64_t v3 = v87;
        }

        OUTLINED_FUNCTION_87_6(v54, *(void *)(v0 + 144), *(void *)(v0 + 128), v55, v56, v57, v58, v59, v71, v75);
        uint64_t v85 = (uint64_t)v3;
        v4 += 88LL;
      }

      while (v37 != 1);
    }

    *(void *)(v0 + 15__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v3;
    uint64_t v62 = *(void *)(v0 + 120);
    uint64_t v63 = *(uint64_t **)(v62 + 88);
    *(void *)(v0 + outlined init with copy of AppShortcutInvoking(v0 + 128, v1 - 160) = OUTLINED_FUNCTION_3_29((void *)(v62 + 16));
    uint64_t v64 = (void *)OUTLINED_FUNCTION_113_3(*v63);
    *(void *)(v0 + 16__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v64;
    uint64_t v65 = OUTLINED_FUNCTION_148_1( v64,  (uint64_t)CustomIntentsDialogTemplating.makeJoinedSpeakableDisambiguationItemList(app:intent:parameterName:disambiguationList:deviceIsLocked:siriEnvironment:));
    return OUTLINED_FUNCTION_84_10(v65, v66, v67);
  }

  else
  {
    swift_task_dealloc(*(void *)(v0 + 144));
    return (*(uint64_t (**)(void))(v0 + 8))(0LL);
  }

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(void);
  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_10_0(v2);
  v1[22] = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_bridgeObjectRelease(v1[19]);
    OUTLINED_FUNCTION_12_5();
    swift_task_dealloc(v1[18]);
    uint64_t v5 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_23_1(v5, v6);
  }

{
  uint64_t v0;
  swift_release();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentsDialogTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(_BYTE *)(v7 + 34__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a6;
  *(void *)(v7 + 256) = a5;
  *(void *)(v7 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 264) = v6;
  *(void *)(v7 + 240) = a3;
  *(void *)(v7 + 24__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a4;
  *(void *)(v7 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 224) = a1;
  *(void *)(v7 + 23__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v7 + 27__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = OUTLINED_FUNCTION_20_10(v8);
  *(void *)(v7 + 280) = OUTLINED_FUNCTION_11_0();
  *(void *)(v7 + 28__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentsDialogTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  int v12 = (void *)v10[32];
  int v11 = (void *)v10[33];
  uint64_t v14 = v11[5];
  uint64_t v13 = v11[6];
  __swift_project_boxed_opaque_existential_1(v11 + 2, v14);
  uint64_t v15 = OUTLINED_FUNCTION_19_16(v14, v13);
  v10[37] = v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v17 = OUTLINED_FUNCTION_246(v16);
  OUTLINED_FUNCTION_126_3((__n128 *)v17, (__n128)xmmword_17E660);
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v12 valueForKey:v18];

  if (v19)
  {
    _bridgeAnyObjectToAny(_:)(v10 + 18);
    swift_unknownObjectRelease(v19);
    outlined init with take of Any((_OWORD *)v10 + 9, (_OWORD *)(v17 + 48));
  }

  else
  {
    OUTLINED_FUNCTION_221(v10[30], (uint64_t)&type metadata for String);
  }

  int v20 = (void *)v10[31];
  uint64_t v21 = v10[30];
  *(void *)(v17 + 80) = v10[29];
  *(void *)(v17 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v21;
  OUTLINED_FUNCTION_54_7();
  id v22 = [v20 itemToConfirm];
  _bridgeAnyObjectToAny(_:)((void *)(v17 + 96));
  swift_unknownObjectRelease(v22);
  Dictionary.init(dictionaryLiteral:)( v17,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  CustomIntentsDialogTemplating.localizedCustomPromptFor(promptDialogType:app:parameterName:intent:tokens:)();
  uint64_t v24 = v23;
  v10[38] = v23;
  OUTLINED_FUNCTION_1_2();
  if (v24)
  {
    int v25 = *(void (**)(uint64_t))(*(void *)v24 + 112LL);
    uint64_t v26 = OUTLINED_FUNCTION_10_6();
    v25(v26);
    uint64_t v27 = OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_106_0(v27);
    OUTLINED_FUNCTION_232();
    uint64_t v29 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunCustomIntentCATsSimple
                                                     + v28
                                                     + 16));
    v10[39] = v29;
    *uint64_t v29 = v10;
    v29[1] = CustomIntentsDialogTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:);
    uint64_t v30 = OUTLINED_FUNCTION_245();
    return OUTLINED_FUNCTION_45_9(v30, v31, v32, v33, v34);
  }

  else
  {
    uint64_t v36 = v10[34];
    uint64_t v38 = v10[29];
    uint64_t v37 = v10[30];
    swift_bridgeObjectRetain(v37);
    OUTLINED_FUNCTION_10_6();
    OUTLINED_FUNCTION_24_15(v38, v37);
    uint64_t v39 = OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_180(v36, v40, v41, v39);
    uint64_t v43 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(v42 + class metadata base offset for RunCustomIntentCATsSimple));
    v10[41] = v43;
    *uint64_t v43 = v10;
    v43[1] = CustomIntentsDialogTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:);
    return OUTLINED_FUNCTION_45_17(v15, v10[34], a10);
  }

uint64_t CustomIntentsDialogTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:)()
{
  v3[22] = v1;
  v3[23] = v2;
  _BYTE v3[24] = v0;
  uint64_t v4 = v3[36];
  uint64_t v5 = v3[35];
  OUTLINED_FUNCTION_51_3();
  *(void *)(v6 + 320) = v0;
  swift_task_dealloc(v7);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_16_31(v5);
  OUTLINED_FUNCTION_16_31(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  swift_release();
  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_270();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  uint64_t v0 = OUTLINED_FUNCTION_23_2();
  return OUTLINED_FUNCTION_23_1(v0, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  OUTLINED_FUNCTION_50_0();
  v3[25] = v1;
  v3[26] = v2;
  v3[27] = v0;
  OUTLINED_FUNCTION_51_3();
  *(void *)(v4 + 336) = v0;
  uint64_t v6 = swift_task_dealloc(v5);
  OUTLINED_FUNCTION_128_1(v6, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  swift_release();
  OUTLINED_FUNCTION_270();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  uint64_t v0 = OUTLINED_FUNCTION_23_2();
  return OUTLINED_FUNCTION_23_1(v0, v1);
}

{
  uint64_t v0;
  swift_release();
  OUTLINED_FUNCTION_264();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_264();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentsDialogTemplating.makeParameterValueConfirmationDialog_preRFv2(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(void *)(v8 + 216) = a6;
  *(void *)(v8 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 224) = v7;
  *(_BYTE *)(v8 + 31__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a7;
  *(void *)(v8 + 200) = a4;
  *(void *)(v8 + 20__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a5;
  *(void *)(v8 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 184) = a2;
  *(void *)(v8 + 19__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a3;
  *(void *)(v8 + 176) = a1;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v8 + 23__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = OUTLINED_FUNCTION_20_10(v9);
  *(void *)(v8 + 240) = OUTLINED_FUNCTION_11_0();
  *(void *)(v8 + 24__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentsDialogTemplating.makeParameterValueConfirmationDialog_preRFv2(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:)()
{
  uint64_t v1 = (void *)v0[27];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject(v2, v0 + 2);
  OUTLINED_FUNCTION_126_3((__n128 *)inited, (__n128)xmmword_17E660);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v1 valueForKey:v4];

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(v0 + 18);
    swift_unknownObjectRelease(v5);
    outlined init with take of Any((_OWORD *)v0 + 9, (_OWORD *)(inited + 48));
  }

  else
  {
    OUTLINED_FUNCTION_221(v0[25], (uint64_t)&type metadata for String);
  }

  uint64_t v6 = v0[25];
  *(void *)(inited + 80) = v0[24];
  *(void *)(inited + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v6;
  uint64_t v7 = OUTLINED_FUNCTION_9_4();
  id v8 = OUTLINED_FUNCTION_14_19(v7, "itemToConfirm");
  _bridgeAnyObjectToAny(_:)((void *)(inited + 96));
  swift_unknownObjectRelease(v8);
  Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  CustomIntentsDialogTemplating.localizedCustomPromptFor(promptDialogType:app:parameterName:intent:tokens:)();
  uint64_t v10 = v9;
  v0[32] = v9;
  OUTLINED_FUNCTION_20();
  if (v10)
  {
    uint64_t v11 = v0[30];
    v0[33] = OUTLINED_FUNCTION_3_29((void *)(v0[28] + 16LL));
    OUTLINED_FUNCTION_57_16();
    uint64_t v12 = OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_20_27();
    OUTLINED_FUNCTION_59_10(v11, 0LL, 1LL, v12);
    uint64_t v14 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunCustomIntentCATs + v13 + 8));
    v0[34] = v14;
    void *v14 = v0;
    v14[1] = CustomIntentsDialogTemplating.makeParameterValueConfirmationDialog_preRFv2(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:);
    OUTLINED_FUNCTION_142_2();
    return OUTLINED_FUNCTION_46_13(v15, v16, v17, v18, v19, v20);
  }

  else
  {
    uint64_t v23 = v0[24];
    uint64_t v22 = v0[25];
    v0[36] = OUTLINED_FUNCTION_19_22((void *)(v0[28] + 16LL));
    OUTLINED_FUNCTION_9_4();
    OUTLINED_FUNCTION_24_15(v23, v22);
    uint64_t v24 = OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_25_26(v24);
    uint64_t v26 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(v25 + class metadata base offset for RunCustomIntentCATs));
    v0[37] = v26;
    *uint64_t v26 = v0;
    v26[1] = CustomIntentsDialogTemplating.makeParameterValueConfirmationDialog_preRFv2(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:);
    OUTLINED_FUNCTION_143_1();
    return OUTLINED_FUNCTION_10(v27, v28, v29, v30);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_50_0();
  uint64_t v3 = *(void *)(v1 + 240);
  uint64_t v2 = *(void *)(v1 + 248);
  OUTLINED_FUNCTION_51_3();
  *(void *)(v4 + 280) = v0;
  swift_task_dealloc(v5);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_16_31(v3);
  OUTLINED_FUNCTION_16_31(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  swift_release();
  swift_task_dealloc(*(void *)(v0 + 248));
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_3_14(v1);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_10_0(v2);
  *(void *)(v1 + 30__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v0;
  NSString v4 = swift_task_dealloc(v3);
  OUTLINED_FUNCTION_128_1(v4, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_34_0();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    swift_task_dealloc(*(void *)(v1 + 248));
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    uint64_t v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_3_14(v6);
  }

{
  uint64_t v0;
  swift_release();
  OUTLINED_FUNCTION_249();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  return OUTLINED_FUNCTION_22_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_249();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  return OUTLINED_FUNCTION_22_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentsDialogTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(_BYTE *)(v7 + 16__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a6;
  *(void *)(v7 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a5;
  *(void *)(v7 + 80) = v6;
  *(void *)(v7 + 56) = a3;
  *(void *)(v7 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a4;
  *(void *)(v7 + 40) = a1;
  *(void *)(v7 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v7 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_20_10(v8);
  *(void *)(v7 + 96) = OUTLINED_FUNCTION_11_0();
  *(void *)(v7 + 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentsDialogTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  *(void *)(v10 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v11;
  if (v11)
  {
    uint64_t v12 = *(void *)(v10 + 96);
    uint64_t v13 = OUTLINED_FUNCTION_3_29((void *)(*(void *)(v10 + 80) + 16LL));
    *(void *)(v10 + 120) = v13;
    OUTLINED_FUNCTION_57_16();
    uint64_t v14 = OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_20_27();
    OUTLINED_FUNCTION_59_10(v12, 0LL, 1LL, v14);
    uint64_t v16 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunCustomIntentCATsSimple
                                                     + v15
                                                     + 416));
    *(void *)(v10 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v16;
    void *v16 = v10;
    v16[1] = CustomIntentsDialogTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:);
    return OUTLINED_FUNCTION_45_9( v13,  *(void *)(v10 + 104),  *(void *)(v10 + 96),  *(unsigned __int8 *)(v10 + 168),  a10);
  }

  else
  {
    uint64_t v19 = *(void *)(v10 + 48);
    uint64_t v18 = *(void *)(v10 + 56);
    *(void *)(v10 + 14__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = OUTLINED_FUNCTION_19_22((void *)(*(void *)(v10 + 80) + 16LL));
    OUTLINED_FUNCTION_9_4();
    OUTLINED_FUNCTION_24_15(v19, v18);
    uint64_t v20 = OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_25_26(v20);
    uint64_t v22 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunCustomIntentCATsSimple
                                                     + v21
                                                     + 400));
    *(void *)(v10 + 15__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v22;
    *uint64_t v22 = v10;
    v22[1] = CustomIntentsDialogTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:);
    uint64_t v23 = OUTLINED_FUNCTION_195();
    return OUTLINED_FUNCTION_45_17(v23, v24, a10);
  }

uint64_t CustomIntentsDialogTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:)( uint64_t a1)
{
  uint64_t v4 = *(void *)(v2 + 96);
  uint64_t v3 = *(void *)(v2 + 104);
  OUTLINED_FUNCTION_51_3();
  *(void *)(v5 + 136) = v1;
  swift_task_dealloc(v6);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_16_31(v4);
  OUTLINED_FUNCTION_16_31(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t CustomIntentsDialogTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:)()
{
  uint64_t v0 = OUTLINED_FUNCTION_23_2();
  return OUTLINED_FUNCTION_23_1(v0, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t (*v10)(void);
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_194();
  OUTLINED_FUNCTION_10_0(v2);
  *(void *)(v1 + outlined init with copy of AppShortcutInvoking(v0 + 128, v1 - 160) = v0;
  uint64_t v4 = swift_task_dealloc(v3);
  OUTLINED_FUNCTION_242(v4, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_61();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_45_7(v5, v6, v7);
  }

  else
  {
    swift_task_dealloc(*(void *)(v1 + 104));
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_15_0();
    uint64_t v9 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_0_3(v9, v10);
  }

{
  uint64_t v0;
  swift_release();
  OUTLINED_FUNCTION_162_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  return OUTLINED_FUNCTION_22_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_162_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  return OUTLINED_FUNCTION_22_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentsDialogTemplating.makeParameterValueUnsupportedDialog_rfv1(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(void *)(v8 + 56) = a6;
  *(void *)(v8 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v7;
  *(_BYTE *)(v8 + 15__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a7;
  *(void *)(v8 + 40) = a4;
  *(void *)(v8 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a5;
  OUTLINED_FUNCTION_68_7(a1, a2, a3);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v8 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = OUTLINED_FUNCTION_20_10(v9);
  *(void *)(v8 + 80) = OUTLINED_FUNCTION_11_0();
  *(void *)(v8 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentsDialogTemplating.makeParameterValueUnsupportedDialog_rfv1(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:)()
{
  *(void *)(v0 + 96) = v1;
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 80);
    *(void *)(v0 + 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = OUTLINED_FUNCTION_3_29((void *)(*(void *)(v0 + 64) + 16LL));
    OUTLINED_FUNCTION_57_16();
    uint64_t v3 = OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_20_27();
    OUTLINED_FUNCTION_59_10(v2, 0LL, 1LL, v3);
    uint64_t v5 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunCustomIntentCATs + v4 + 208));
    *(void *)(v0 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v5;
    *uint64_t v5 = v0;
    v5[1] = CustomIntentsDialogTemplating.makeParameterValueUnsupportedDialog_rfv1(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:);
    OUTLINED_FUNCTION_142_2();
    return OUTLINED_FUNCTION_46_13(v6, v7, v8, v9, v10, v11);
  }

  else
  {
    uint64_t v14 = *(void *)(v0 + 32);
    uint64_t v13 = *(void *)(v0 + 40);
    *(void *)(v0 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_19_22((void *)(*(void *)(v0 + 64) + 16LL));
    OUTLINED_FUNCTION_9_4();
    OUTLINED_FUNCTION_24_15(v14, v13);
    uint64_t v15 = OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_25_26(v15);
    uint64_t v17 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunCustomIntentCATs + v16 + 200));
    *(void *)(v0 + 136) = v17;
    *uint64_t v17 = v0;
    v17[1] = CustomIntentsDialogTemplating.makeParameterValueUnsupportedDialog_rfv1(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:);
    OUTLINED_FUNCTION_143_1();
    return OUTLINED_FUNCTION_10(v18, v19, v20, v21);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v0 = OUTLINED_FUNCTION_266();
  uint64_t v3 = *(void *)(v1 + 80);
  uint64_t v2 = *(void *)(v1 + 88);
  OUTLINED_FUNCTION_173(v0, v1);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_16_31(v3);
  OUTLINED_FUNCTION_16_31(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  swift_release();
  swift_task_dealloc(*(void *)(v0 + 88));
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_3_14(v1);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_10_0(v2);
  *(void *)(v1 + 14__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v0;
  uint64_t v4 = swift_task_dealloc(v3);
  OUTLINED_FUNCTION_128_1(v4, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_34_0();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    swift_task_dealloc(*(void *)(v1 + 88));
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    uint64_t v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_3_14(v6);
  }

{
  uint64_t v0;
  swift_release();
  OUTLINED_FUNCTION_236();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  return OUTLINED_FUNCTION_22_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_236();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  return OUTLINED_FUNCTION_22_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentsDialogTemplating.makeIntentConfirmationDialog(app:intent:intentResponse:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v5 + 216) = a4;
  *(void *)(v5 + 80) = a3;
  *(void *)(v5 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v4;
  *(void *)(v5 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a1;
  *(void *)(v5 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v5 + 96) = OUTLINED_FUNCTION_20_10(v6);
  *(void *)(v5 + 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = OUTLINED_FUNCTION_11_0();
  *(void *)(v5 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = OUTLINED_FUNCTION_11_0();
  *(void *)(v5 + 120) = OUTLINED_FUNCTION_11_0();
  *(void *)(v5 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_11_0();
  *(void *)(v5 + 136) = OUTLINED_FUNCTION_11_0();
  *(void *)(v5 + 14__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

#error "CA398: call analysis failed (funcsize=172)"
uint64_t CustomIntentsDialogTemplating.makeIntentConfirmationDialog(app:intent:intentResponse:shouldShowAppAttribution:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_66_13(v0);
  uint64_t v3 = v1[17];
  uint64_t v2 = v1[18];
  uint64_t v5 = v1[15];
  uint64_t v4 = v1[16];
  OUTLINED_FUNCTION_174(v1[22], (uint64_t)v1);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_16_31(v5);
  OUTLINED_FUNCTION_16_31(v4);
  OUTLINED_FUNCTION_16_31(v3);
  OUTLINED_FUNCTION_16_31(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t CustomIntentsDialogTemplating.makeIntentConfirmationDialog(app:intent:intentResponse:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_146_1();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  uint64_t v2 = OUTLINED_FUNCTION_23_2();
  return OUTLINED_FUNCTION_15_2(v2, v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_110_4(v0);
  uint64_t v3 = v1[13];
  uint64_t v2 = v1[14];
  uint64_t v4 = v1[12];
  OUTLINED_FUNCTION_172(v1[25], (uint64_t)v1);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_16_31(v4);
  OUTLINED_FUNCTION_16_31(v3);
  OUTLINED_FUNCTION_16_31(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_45_7(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  OUTLINED_FUNCTION_28_1();

  OUTLINED_FUNCTION_75_10();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  uint64_t v1 = OUTLINED_FUNCTION_23_2();
  return OUTLINED_FUNCTION_3_23(v1, v2);
}

{
  void *v0;
  uint64_t v1;
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_234(*(void *)(v1 + 160));

  OUTLINED_FUNCTION_146_1();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t CustomIntentsDialogTemplating.makeIntentConfirmationDialog(app:intent:intentResponse:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_75_10();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_47_0();
  return v13(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10, a11, a12);
}

uint64_t CustomIntentsDialogTemplating.makeIntentConfirmationDialog_rfv1(app:intent:intentResponse:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 40) = a4;
  *(void *)(v6 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v5;
  *(_BYTE *)(v6 + 176) = a5;
  OUTLINED_FUNCTION_68_7(a1, a2, a3);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v6 + 56) = OUTLINED_FUNCTION_20_10(v7);
  *(void *)(v6 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = OUTLINED_FUNCTION_11_0();
  *(void *)(v6 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = OUTLINED_FUNCTION_11_0();
  *(void *)(v6 + 80) = OUTLINED_FUNCTION_11_0();
  *(void *)(v6 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_11_0();
  *(void *)(v6 + 96) = OUTLINED_FUNCTION_11_0();
  *(void *)(v6 + 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

#error "CA958: call analysis failed (funcsize=179)"
uint64_t CustomIntentsDialogTemplating.makeIntentConfirmationDialog_rfv1(app:intent:intentResponse:shouldShowAppAttribution:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_50_0();
  uint64_t v3 = v1[12];
  uint64_t v2 = v1[13];
  uint64_t v5 = v1[10];
  uint64_t v4 = v1[11];
  OUTLINED_FUNCTION_51_3();
  *(void *)(v6 + 14__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v0;
  swift_task_dealloc(v7);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_16_31(v5);
  OUTLINED_FUNCTION_16_31(v4);
  OUTLINED_FUNCTION_16_31(v3);
  OUTLINED_FUNCTION_16_31(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t CustomIntentsDialogTemplating.makeIntentConfirmationDialog_rfv1(app:intent:intentResponse:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_50_0();
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  OUTLINED_FUNCTION_176(v0[20], (uint64_t)v0);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_16_31(v3);
  OUTLINED_FUNCTION_16_31(v2);
  OUTLINED_FUNCTION_16_31(v1);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_45_7(v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  OUTLINED_FUNCTION_17_0();
  uint64_t v1 = *(void **)(v0 + 40);

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_3_14(v2);
}

{
  void *v0;
  uint64_t v1;
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_269();

  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t CustomIntentsDialogTemplating.makeIntentConfirmationDialog_rfv1(app:intent:intentResponse:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = *(void **)(v12 + 112);

  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_47_0();
  return v14(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
}

uint64_t CustomIntentsDialogTemplating.makeIntentHandledDialog(app:intent:intentResponse:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v5 + 20__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a4;
  *(void *)(v5 + 80) = a3;
  *(void *)(v5 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v4;
  *(void *)(v5 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a1;
  *(void *)(v5 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v5 + 96) = OUTLINED_FUNCTION_20_10(v6);
  *(void *)(v5 + 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = OUTLINED_FUNCTION_11_0();
  *(void *)(v5 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = OUTLINED_FUNCTION_11_0();
  *(void *)(v5 + 120) = OUTLINED_FUNCTION_11_0();
  *(void *)(v5 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_11_0();
  *(void *)(v5 + 136) = OUTLINED_FUNCTION_11_0();
  *(void *)(v5 + 14__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

#error "CAFC4: call analysis failed (funcsize=194)"
uint64_t CustomIntentsDialogTemplating.makeIntentHandledDialog(app:intent:intentResponse:shouldShowAppAttribution:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_66_13(v1);
  uint64_t v4 = v2[17];
  uint64_t v3 = v2[18];
  uint64_t v6 = v2[15];
  uint64_t v5 = v2[16];
  OUTLINED_FUNCTION_51_3();
  *(void *)(v7 + 176) = v0;
  swift_task_dealloc(v8);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_16_31(v6);
  OUTLINED_FUNCTION_16_31(v5);
  OUTLINED_FUNCTION_16_31(v4);
  OUTLINED_FUNCTION_16_31(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t CustomIntentsDialogTemplating.makeIntentHandledDialog(app:intent:intentResponse:shouldShowAppAttribution:)()
{
  uint64_t v1 = *(void **)(v0 + 72);
  type metadata accessor for CustomIntentsDialogTemplating();
  if ((OUTLINED_FUNCTION_216() & 1) == 0)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v2 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v2, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v3 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_31_0(v3))
    {
      uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_57_1();
      _WORD *v4 = 0;
      OUTLINED_FUNCTION_33_2( &dword_0,  v5,  v6,  "CustomIntentDialogTemplating.makeIntentHandledDialog incrementing dialogCount");
      OUTLINED_FUNCTION_1_0((uint64_t)v4);
    }

    OUTLINED_FUNCTION_80_7();
  }

  OUTLINED_FUNCTION_75_10();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  uint64_t v7 = OUTLINED_FUNCTION_29_3();
  return OUTLINED_FUNCTION_3_23(v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_110_4(v1);
  uint64_t v4 = v2[13];
  os_log_type_t v3 = v2[14];
  uint64_t v5 = v2[12];
  OUTLINED_FUNCTION_51_3();
  *(void *)(v6 + 200) = v0;
  swift_task_dealloc(v7);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_16_31(v5);
  OUTLINED_FUNCTION_16_31(v4);
  OUTLINED_FUNCTION_16_31(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_45_7(v8, v9, v10);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  OUTLINED_FUNCTION_28_1();
  uint64_t v1 = *(void **)(v0 + 72);
  type metadata accessor for CustomIntentsDialogTemplating();
  if ((OUTLINED_FUNCTION_216() & 1) == 0)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v2 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v2, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v3 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_31_0(v3))
    {
      uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_57_1();
      _WORD *v4 = 0;
      OUTLINED_FUNCTION_33_2( &dword_0,  v5,  v6,  "CustomIntentDialogTemplating.makeIntentHandledDialog incrementing dialogCount");
      OUTLINED_FUNCTION_1_0((uint64_t)v4);
    }

    OUTLINED_FUNCTION_80_7();
  }

  OUTLINED_FUNCTION_75_10();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  uint64_t v7 = OUTLINED_FUNCTION_29_3();
  return OUTLINED_FUNCTION_3_23(v7, v8);
}

{
  void *v0;
  uint64_t v1;
  OUTLINED_FUNCTION_234(*(void *)(v1 + 152));

  OUTLINED_FUNCTION_158_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  return OUTLINED_FUNCTION_2_1(*(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_158_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  return OUTLINED_FUNCTION_2_1(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentsDialogTemplating.makeIntentHandledDialog_rfv1(app:intent:intentResponse:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 40) = a4;
  *(void *)(v6 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v5;
  *(_BYTE *)(v6 + 240) = a5;
  OUTLINED_FUNCTION_68_7(a1, a2, a3);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v6 + 56) = OUTLINED_FUNCTION_20_10(v7);
  *(void *)(v6 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = OUTLINED_FUNCTION_11_0();
  *(void *)(v6 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = OUTLINED_FUNCTION_11_0();
  *(void *)(v6 + 80) = OUTLINED_FUNCTION_11_0();
  *(void *)(v6 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_11_0();
  *(void *)(v6 + 96) = OUTLINED_FUNCTION_11_0();
  *(void *)(v6 + 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = OUTLINED_FUNCTION_11_0();
  uint64_t v8 = OUTLINED_FUNCTION_44_6();
  *(void *)(v6 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v6 + 120) = v9;
  *(void *)(v6 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_4_0(v9);
  *(void *)(v6 + 136) = OUTLINED_FUNCTION_11_0();
  *(void *)(v6 + 14__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = OUTLINED_FUNCTION_11_0();
  uint64_t v10 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  *(void *)(v6 + 15__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v6 + outlined init with copy of AppShortcutInvoking(v0 + 128, v1 - 160) = v11;
  *(void *)(v6 + 16__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = OUTLINED_FUNCTION_4_0(v11);
  *(void *)(v6 + 176) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

#error "CB74C: call analysis failed (funcsize=205)"
uint64_t CustomIntentsDialogTemplating.makeIntentHandledDialog_rfv1(app:intent:intentResponse:shouldShowAppAttribution:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_50_0();
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v4 = v0[10];
  os_log_type_t v3 = v0[11];
  OUTLINED_FUNCTION_172(v0[25], (uint64_t)v0);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_16_31(v4);
  OUTLINED_FUNCTION_16_31(v3);
  OUTLINED_FUNCTION_16_31(v2);
  OUTLINED_FUNCTION_16_31(v1);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

#error "CB924: call analysis failed (funcsize=61)"
uint64_t CustomIntentsDialogTemplating.makeIntentHandledDialog_rfv1(app:intent:intentResponse:shouldShowAppAttribution:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_50_0();
  os_log_type_t v3 = v1[8];
  uint64_t v2 = v1[9];
  uint64_t v4 = v1[7];
  OUTLINED_FUNCTION_51_3();
  *(void *)(v5 + 23__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v0;
  swift_task_dealloc(v6);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_16_31(v4);
  OUTLINED_FUNCTION_16_31(v3);
  OUTLINED_FUNCTION_16_31(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_45_7(v7, v8, v9);
}

#error "CBA98: call analysis failed (funcsize=57)"
#error "CBB20: call analysis failed (funcsize=28)"
#error "CBB88: call analysis failed (funcsize=26)"
uint64_t CustomIntentsDialogTemplating.makeFailureHandlingIntentDialog(app:intent:intentResponse:)( uint64_t a1,  uint64_t a2,  uint64_t a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  v4[4] = a3;
  void v4[5] = v3;
  void v4[2] = a1;
  void v4[3] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[6] = OUTLINED_FUNCTION_20_10(v5);
  v4[7] = OUTLINED_FUNCTION_11_0();
  uint64_t v6 = OUTLINED_FUNCTION_61_1();
  v4[8] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[9] = v7;
  v4[10] = OUTLINED_FUNCTION_9_0(v7);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentsDialogTemplating.makeFailureHandlingIntentDialog(app:intent:intentResponse:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15 = v14[3];
  uint64_t v16 = v14[4];
  v14[11] = static SAAppInfoFactory.createAppInfo(app:)(v14[2]);
  OUTLINED_FUNCTION_135_0(v15);
  INIntentResponse.languageCode()();
  uint64_t v17 = OUTLINED_FUNCTION_259();
  OUTLINED_FUNCTION_114_2(v17, v18);
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_1_2();
  static LocaleUtils.siriLanguageCode()();
  LOBYTE(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 15) = OUTLINED_FUNCTION_197(v19, v20);
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_37();
  if ((v15 & 1) == 0 || !v16) {
    goto LABEL_8;
  }
  OUTLINED_FUNCTION_183(v14[5]);
  uint64_t v21 = OUTLINED_FUNCTION_217();
  char v22 = v21;
  id v23 = OUTLINED_FUNCTION_26(v21, "typeName");
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_248();
  if ((v22 & 1) == 0 || !INIntentResponse.printedDialog()())
  {
    uint64_t v25 = (void *)v14[4];
    uint64_t v26 = OUTLINED_FUNCTION_262();
    OUTLINED_FUNCTION_14();

    if (v26) {
      goto LABEL_7;
    }
LABEL_8:
    OUTLINED_FUNCTION_24_15(0LL, 0xE000000000000000LL);
    goto LABEL_9;
  }

  uint64_t v24 = (void *)v14[4];
  OUTLINED_FUNCTION_14();

LABEL_7:
  OUTLINED_FUNCTION_182();
  OUTLINED_FUNCTION_53_7();
LABEL_9:
  uint64_t v27 = v14[8];
  uint64_t v29 = (void *)v14[5];
  uint64_t v28 = v14[6];
  uint64_t v43 = v29[11];
  uint64_t v30 = v29[5];
  uint64_t v31 = v29[6];
  __swift_project_boxed_opaque_existential_1(v29 + 2, v30);
  v14[12] = OUTLINED_FUNCTION_19_16(v30, v31);
  OUTLINED_FUNCTION_150();
  OUTLINED_FUNCTION_20_27();
  OUTLINED_FUNCTION_104_4(v28, 0LL, 1LL, v27);
  uint64_t v33 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunCustomIntentCATsSimple + v32 + 128));
  v14[13] = v33;
  *uint64_t v33 = v14;
  v33[1] = CustomIntentsDialogTemplating.makeFailureHandlingIntentDialog(app:intent:intentResponse:);
  OUTLINED_FUNCTION_24_7();
  return v37(v34, v35, v36, v37, v38, v39, v40, v41, a9, a10, v43, a12, a13, a14);
}

uint64_t CustomIntentsDialogTemplating.makeFailureHandlingIntentDialog(app:intent:intentResponse:)( uint64_t a1)
{
  v2[14] = v1;
  swift_task_dealloc(v5);
  OUTLINED_FUNCTION_34_0();
  uint64_t v6 = v2[6];
  uint64_t v7 = v2[7];
  if (!v1) {
    v2[15] = a1;
  }
  OUTLINED_FUNCTION_191(v6);
  OUTLINED_FUNCTION_191(v7);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t CustomIntentsDialogTemplating.makeFailureHandlingIntentDialog(app:intent:intentResponse:)()
{
  OUTLINED_FUNCTION_82_6();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_15_2(*(void *)(v0 + 120), *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_149_2();

  OUTLINED_FUNCTION_82_6();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentsDialogTemplating.makeFailureHandlingIntentDialog_prerfv2(app:intent:intentResponse:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  OUTLINED_FUNCTION_68_7(a1, a2, a3);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v5[7] = OUTLINED_FUNCTION_20_10(v6);
  v5[8] = OUTLINED_FUNCTION_11_0();
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  v5[9] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[10] = v8;
  v5[11] = OUTLINED_FUNCTION_9_0(v8);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentsDialogTemplating.makeFailureHandlingIntentDialog_prerfv2(app:intent:intentResponse:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15 = v14[4];
  uint64_t v16 = v14[5];
  v14[12] = static SAAppInfoFactory.createAppInfo(app:)(v14[3]);
  OUTLINED_FUNCTION_135_0(v15);
  INIntentResponse.languageCode()();
  uint64_t v17 = OUTLINED_FUNCTION_259();
  OUTLINED_FUNCTION_114_2(v17, v18);
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_1_2();
  static LocaleUtils.siriLanguageCode()();
  LOBYTE(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 15) = OUTLINED_FUNCTION_197(v19, v20);
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_37();
  if ((v15 & 1) == 0 || !v16) {
    goto LABEL_8;
  }
  OUTLINED_FUNCTION_183(v14[6]);
  uint64_t v21 = OUTLINED_FUNCTION_217();
  char v22 = v21;
  id v23 = OUTLINED_FUNCTION_26(v21, "typeName");
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_248();
  if ((v22 & 1) == 0 || !INIntentResponse.printedDialog()())
  {
    uint64_t v25 = (void *)v14[5];
    uint64_t v26 = OUTLINED_FUNCTION_262();
    OUTLINED_FUNCTION_14();

    if (v26) {
      goto LABEL_7;
    }
LABEL_8:
    OUTLINED_FUNCTION_24_15(0LL, 0xE000000000000000LL);
    goto LABEL_9;
  }

  uint64_t v24 = (void *)v14[5];
  OUTLINED_FUNCTION_14();

LABEL_7:
  OUTLINED_FUNCTION_182();
  OUTLINED_FUNCTION_53_7();
LABEL_9:
  uint64_t v27 = v14[9];
  uint64_t v29 = (void *)v14[6];
  uint64_t v28 = v14[7];
  uint64_t v43 = v29[10];
  uint64_t v30 = v29[5];
  uint64_t v31 = v29[6];
  __swift_project_boxed_opaque_existential_1(v29 + 2, v30);
  v14[13] = OUTLINED_FUNCTION_19_16(v30, v31);
  OUTLINED_FUNCTION_150();
  OUTLINED_FUNCTION_20_27();
  OUTLINED_FUNCTION_104_4(v28, 0LL, 1LL, v27);
  uint64_t v33 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunCustomIntentCATs + v32 + 64));
  v14[14] = v33;
  *uint64_t v33 = v14;
  v33[1] = CustomIntentsDialogTemplating.makeFailureHandlingIntentDialog_prerfv2(app:intent:intentResponse:);
  OUTLINED_FUNCTION_24_7();
  return v38(v34, v35, v36, v37, v38, v39, v40, v41, a9, a10, v43, a12, a13, a14);
}

uint64_t CustomIntentsDialogTemplating.makeFailureHandlingIntentDialog_prerfv2(app:intent:intentResponse:)()
{
  uint64_t v0 = OUTLINED_FUNCTION_266();
  uint64_t v3 = *(void *)(v1 + 56);
  uint64_t v2 = *(void *)(v1 + 64);
  OUTLINED_FUNCTION_173(v0, v1);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_16_31(v3);
  OUTLINED_FUNCTION_16_31(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_147_0();

  OUTLINED_FUNCTION_82_6();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_3_14(v1);
}

{
  uint64_t v0;
  void *v1;
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_147_0();

  OUTLINED_FUNCTION_82_6();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentsDialogTemplating.makeHandoffDialog()()
{
  *(void *)(v1 + 16) = v0;
  return OUTLINED_FUNCTION_6_2((uint64_t)CustomIntentsDialogTemplating.makeHandoffDialog());
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v1 = OUTLINED_FUNCTION_3_29((void *)(*(void *)(v0 + 16) + 16LL));
  OUTLINED_FUNCTION_214(v1);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunCustomIntentCATsSimple + v2 + 208));
  *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v3;
  uint64_t v4 = OUTLINED_FUNCTION_88_3(v3, (uint64_t)CustomIntentsDialogTemplating.makeHandoffDialog());
  return OUTLINED_FUNCTION_23_1(v4, v5);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_39_18();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_178();
    uint64_t v2 = OUTLINED_FUNCTION_84_7();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_226();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentsDialogTemplating.makeHandoffDialog_preRFv2()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)CustomIntentsDialogTemplating.makeHandoffDialog_preRFv2());
}

uint64_t CustomIntentsDialogTemplating.makeHandoffDialog_preRFv2()()
{
  uint64_t v1 = OUTLINED_FUNCTION_3_29((void *)(*(void *)(v0 + 24) + 16LL));
  OUTLINED_FUNCTION_102_1(v1);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunCustomIntentCATs + v2 + 104));
  *(void *)(v0 + 40) = v3;
  uint64_t v4 = OUTLINED_FUNCTION_74_7(v3);
  return OUTLINED_FUNCTION_36_1(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_24_17();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    OUTLINED_FUNCTION_177();
    return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v1 + 8));
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_222();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentsDialogTemplating.makeNotificationMessageForHandoff()()
{
  *(void *)(v1 + 16) = v0;
  return OUTLINED_FUNCTION_6_2((uint64_t)CustomIntentsDialogTemplating.makeNotificationMessageForHandoff());
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t (*v10)();
  uint64_t v11;
  uint64_t (*v12)(void);
  OUTLINED_FUNCTION_104();
  uint64_t v2 = v1[2];
  uint64_t v3 = OUTLINED_FUNCTION_100_3();
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = *(void *)(v2 + 48);
  __swift_project_boxed_opaque_existential_1(v0, v4);
  uint64_t v6 = OUTLINED_FUNCTION_19_16(v4, v5);
  OUTLINED_FUNCTION_214(v6);
  uint64_t v8 = class metadata base offset for RunCustomIntentCATsSimple + v7;
  if ((v3 & 1) != 0)
  {
    uint64_t v9 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v8 + 192));
    v1[4] = v9;
    uint64_t v10 = CustomIntentsDialogTemplating.makeNotificationMessageForHandoff();
  }

  else
  {
    uint64_t v9 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v8 + 176));
    v1[6] = v9;
    uint64_t v10 = CustomIntentsDialogTemplating.makeNotificationMessageForHandoff();
  }

  uint64_t v11 = OUTLINED_FUNCTION_88_3(v9, (uint64_t)v10);
  return OUTLINED_FUNCTION_0_3(v11, v12);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_39_18();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_178();
    uint64_t v2 = OUTLINED_FUNCTION_84_7();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_4_15();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_178();
    uint64_t v2 = OUTLINED_FUNCTION_84_7();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_226();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_226();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentsDialogTemplating.makeNotificationMessageForHandoff_preRFv2()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)CustomIntentsDialogTemplating.makeNotificationMessageForHandoff_preRFv2());
}

uint64_t CustomIntentsDialogTemplating.makeNotificationMessageForHandoff_preRFv2()()
{
  uint64_t v2 = v1[3];
  char v3 = OUTLINED_FUNCTION_100_3();
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = *(void *)(v2 + 48);
  __swift_project_boxed_opaque_existential_1(v0, v4);
  uint64_t v6 = OUTLINED_FUNCTION_19_16(v4, v5);
  OUTLINED_FUNCTION_102_1(v6);
  uint64_t v8 = class metadata base offset for RunCustomIntentCATs + v7;
  if ((v3 & 1) != 0)
  {
    uint64_t v9 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v8 + 96));
    v1[5] = v9;
  }

  else
  {
    uint64_t v9 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v8 + 88));
    v1[7] = v9;
  }

  uint64_t v10 = OUTLINED_FUNCTION_74_7(v9);
  return v11(v10);
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_24_17();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    OUTLINED_FUNCTION_177();
    return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v1 + 8));
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  OUTLINED_FUNCTION_77_1();
  OUTLINED_FUNCTION_10_0(v3);
  *(void *)(v0 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    OUTLINED_FUNCTION_177();
    return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v2 + 8));
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_222();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_222();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentsDialogTemplating.doneButton()()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  v1[3] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[4] = v3;
  v1[5] = OUTLINED_FUNCTION_9_0(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  void *v5;
  void *v7;
  uint64_t (*v8)(void);
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))( v1,  enum case for RFFeatureFlags.ResponseFramework._SMART(_:),  v3);
  uint64_t v4 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if ((v4 & 1) != 0)
  {
    uint64_t v5 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunCustomIntentCATsSimple
                                                    + **(void **)(v0[2] + 88LL)
                                                    + 120));
    v0[6] = v5;
    *uint64_t v5 = v0;
    v5[1] = CustomIntentsDialogTemplating.doneButton();
    return v8();
  }

  else
  {
    uint64_t v7 = (void *)swift_task_alloc(dword_21A024);
    v0[8] = v7;
    *uint64_t v7 = v0;
    v7[1] = CustomIntentsDialogTemplating.doneButton();
    return CustomIntentsDialogTemplating.doneButton_rfv1()();
  }

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  dispatch thunk of LabelExecutionResult.subscript.getter();
  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_273();
  uint64_t v0 = OUTLINED_FUNCTION_129();
  return v1(v0);
}

uint64_t CustomIntentsDialogTemplating.doneButton()(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v6 = v4;
  OUTLINED_FUNCTION_223(v4[6], &v6);
  if (v1)
  {
    swift_task_dealloc(v4[5]);
    return (*(uint64_t (**)(void))(v2 + 8))();
  }

  else
  {
    v4[7] = a1;
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

uint64_t CustomIntentsDialogTemplating.doneButton()(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = swift_task_dealloc(*(void *)(v4 + 40));
  if (!v2)
  {
    uint64_t v8 = a1;
    uint64_t v9 = a2;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v8, v9);
}

uint64_t CustomIntentsDialogTemplating.doneButton_rfv1()()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for TemplatingText(0LL);
  v1[3] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[4] = v3;
  v1[5] = OUTLINED_FUNCTION_9_0(v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingSection?);
  v1[6] = OUTLINED_FUNCTION_9_0(*(void *)(v4 - 8));
  uint64_t v5 = type metadata accessor for TemplatingSection(0LL);
  v1[7] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v1[8] = v6;
  v1[9] = OUTLINED_FUNCTION_9_0(v6);
  uint64_t v7 = OUTLINED_FUNCTION_44_6();
  v1[10] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v1[11] = v8;
  v1[12] = OUTLINED_FUNCTION_9_0(v8);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  void *v0;
  void *v1;
  uint64_t (*v3)(void);
  uint64_t v1 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunCustomIntentCATs
                                                 + **(void **)(v0[2] + 80LL)
                                                 + 56));
  v0[13] = v1;
  *uint64_t v1 = v0;
  v1[1] = CustomIntentsDialogTemplating.doneButton_rfv1();
  return v3(v0[12]);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_175(*(void *)(v0 + 104), v0);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_190();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void CustomIntentsDialogTemplating.doneButton_rfv1()(uint64_t a1)
{
  uint64_t v3 = v1[6];
  uint64_t v2 = v1[7];
  uint64_t v4 = TemplatingResult.sections.getter(a1);
  specialized Collection.first.getter(v4, v3);
  OUTLINED_FUNCTION_20();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v3, 1LL, v2);
  uint64_t v7 = v1[11];
  uint64_t v6 = v1[12];
  if (EnumTagSinglePayload == 1)
  {
    _s11SiriKitFlow15NLContextUpdateVSgWOhTm_0( v1[6],  &demangling cache variable for type metadata for TemplatingSection?);
    unint64_t v8 = lazy protocol witness table accessor for type CustomIntentsDialogTemplatingError and conformance CustomIntentsDialogTemplatingError();
    uint64_t v9 = swift_allocError(&type metadata for CustomIntentsDialogTemplatingError, v8, 0LL, 0LL);
    swift_willThrow(v9, v10, v11, v12, v13);
    OUTLINED_FUNCTION_57_4(v6, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
    OUTLINED_FUNCTION_190();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_34_3();
    __asm { BR              X0 }
  }

  uint64_t v24 = v1[11];
  uint64_t v16 = v1[8];
  uint64_t v15 = v1[9];
  uint64_t v17 = v1[7];
  uint64_t v19 = v1[4];
  uint64_t v18 = v1[5];
  uint64_t v20 = v1[3];
  uint64_t v21 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v16 + 32))(v15, v1[6], v17);
  uint64_t v22 = TemplatingSection.content.getter(v21);
  TemplatingText.text.getter(v22);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  OUTLINED_FUNCTION_14_3(v24);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_34_3();
  __asm { BR              X2 }

void CustomIntentsDialogTemplating.localizedCustomPromptFor(promptDialogType:app:parameterName:intent:tokens:)()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  unint64_t v8 = (void *)static SAAppInfoFactory.createAppInfo(app:)(v7);
  id v9 = OUTLINED_FUNCTION_123_1((uint64_t)v8, "_codableDescription");
  OUTLINED_FUNCTION_163(v9);
  uint64_t v11 = v10;

  if (!v11) {
    goto LABEL_8;
  }
  uint64_t v12 = INCodableAttribute.localizedPrompt(promptDialogType:intent:appInfo:tokens:)(v6, (uint64_t)v4, v8, v2);
  if (!v13)
  {

LABEL_8:
    goto LABEL_11;
  }

  uint64_t v14 = v12;
  unint64_t v15 = v13;
  OUTLINED_FUNCTION_141_2();
  if (!v16)
  {

    OUTLINED_FUNCTION_22();
    goto LABEL_8;
  }

  INCodableAttribute.localizedPromptTemplate(promptDialogType:appInfo:)(v6, (char)v8);
  uint64_t v19 = v18;
  if (v17)
  {
    uint64_t v20 = v17;
    uint64_t v21 = OUTLINED_FUNCTION_6_4();
    uint64_t v22 = static CATSpeakableString.getPropertiesWithWrapperInTemplateString(templateString:)();
    uint64_t v23 = static CATSpeakableString.applyPronunciationHints(template:variablesWithWrapper:intent:intentResponse:tokens:)( v19,  v20,  v22,  v4,  0LL,  v2);
    uint64_t v25 = v24;
    OUTLINED_FUNCTION_64_0();
    OUTLINED_FUNCTION_56_1();
    OUTLINED_FUNCTION_1_5(v21);
    uint64_t v26 = v14;
    unint64_t v27 = v15;
    uint64_t v28 = v23;
    uint64_t v29 = v25;
  }

  else
  {
    uint64_t v30 = OUTLINED_FUNCTION_6_4();
    OUTLINED_FUNCTION_1_5(v30);
    uint64_t v26 = v14;
    unint64_t v27 = v15;
    uint64_t v28 = v19;
    uint64_t v29 = 0LL;
  }

  CATSpeakableString.init(_:speak:)(v26, v27, v28, v29);
  OUTLINED_FUNCTION_268();

LABEL_11:
  OUTLINED_FUNCTION_24_0();
}

void CustomIntentsDialogTemplating.localizedCustomUnsupportendPromptFor(app:parameterName:unsupportedReasonCode:intent:tokens:)()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  OUTLINED_FUNCTION_163([v3 _codableDescription]);
  unint64_t v8 = v7;

  if (v8)
  {
    id v9 = (void *)OUTLINED_FUNCTION_253();
    INCodableAttribute.localizedUnsupportedDialog(unsupportedReasonCode:intent:appInfo:tokens:)(v6, (uint64_t)v4, v9, v2);
    if (v10)
    {
      OUTLINED_FUNCTION_141_2();
      if (v11)
      {
        INCodableAttribute.localizedUnsupportedDialogTemplate(unsupportedReasonCode:appInfo:)(v6, (char)v9);
        if (v13)
        {
          uint64_t v14 = v12;
          uint64_t v15 = v13;
          OUTLINED_FUNCTION_141_2();
          if (v16)
          {
            uint64_t v17 = OUTLINED_FUNCTION_6_4();
            uint64_t v18 = static CATSpeakableString.getPropertiesWithWrapperInTemplateString(templateString:)();
            uint64_t v19 = static CATSpeakableString.applyPronunciationHints(template:variablesWithWrapper:intent:intentResponse:tokens:)( v14,  v15,  v18,  v4,  0LL,  (uint64_t)v2);
            uint64_t v21 = v20;
            OUTLINED_FUNCTION_64_0();
            swift_bridgeObjectRelease(v15);
            OUTLINED_FUNCTION_1_5(v17);
            uint64_t v22 = OUTLINED_FUNCTION_243();
            uint64_t v24 = v19;
            uint64_t v25 = v21;
LABEL_12:
            CATSpeakableString.init(_:speak:)(v22, v23, v24, v25);
            OUTLINED_FUNCTION_268();

            goto LABEL_13;
          }

          swift_bridgeObjectRelease(v15);
        }

        uint64_t v26 = OUTLINED_FUNCTION_6_4();
        OUTLINED_FUNCTION_1_5(v26);
        uint64_t v22 = OUTLINED_FUNCTION_243();
        uint64_t v24 = 0LL;
        uint64_t v25 = 0LL;
        goto LABEL_12;
      }

      OUTLINED_FUNCTION_22();
    }
  }

uint64_t CustomIntentsDialogTemplating.getAppName(app:)(uint64_t a1)
{
  uint64_t v3 = v1[17];
  uint64_t v4 = v1[18];
  __swift_project_boxed_opaque_existential_1(v1 + 14, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 8))(a1, v3, v4);
  return SpeakableString.init(print:speak:)(v5, v6, 0LL, 0LL);
}

uint64_t CustomIntentsDialogTemplating.copyPropertiesFromIntentToResponse(intent:intentResponse:)( uint64_t a1, void *a2)
{
  uint64_t v2 = (uint64_t)a2;
  if (!a2) {
    return v2;
  }
  id v3 = a2;
  id v4 = OUTLINED_FUNCTION_26((uint64_t)v3, "_dictionaryRepresentation");
  uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v4,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  id v7 = OUTLINED_FUNCTION_26(v6, "typeName");
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  v11._uint64_t countAndFlagsBits = v8;
  v11._object = v10;
  INIntentResponse.localizedResponseTemplate(intentName:)(v11);
  OUTLINED_FUNCTION_6_4();
  uint64_t v12 = static CATSpeakableString.getPropertiesInTemplateString(templateString:)();
  OUTLINED_FUNCTION_1_2();
  uint64_t v13 = OUTLINED_FUNCTION_2_6();
  id v118 = v3;
  id v14 = OUTLINED_FUNCTION_164_0(v13, "_codableDescription");
  if (!v14)
  {
    OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_14();
    return v2;
  }

  id v15 = v14;
  uint64_t v113 = v12;
  uint64_t v16 = outlined bridged method (pb) of @objc INCodableDescription.attributes.getter(v14);
  if (v16)
  {
    unint64_t v17 = v16;
    os_log_type_t v111 = v15;
    uint64_t v112 = v2;
    if ((v16 & 0xC000000000000001LL) != 0)
    {
      if (v16 >= 0) {
        v16 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      uint64_t v18 = __CocoaDictionary.makeIterator()(v16);
      uint64_t v117 = 0LL;
      uint64_t v19 = 0LL;
      unint64_t v20 = 0LL;
      unint64_t v17 = v18 | 0x8000000000000000LL;
    }

    else
    {
      uint64_t v21 = -1LL << *(_BYTE *)(v16 + 32);
      uint64_t v117 = v16 + 64;
      uint64_t v22 = ~v21;
      uint64_t v23 = -v21;
      if (v23 < 64) {
        uint64_t v24 = ~(-1LL << v23);
      }
      else {
        uint64_t v24 = -1LL;
      }
      unint64_t v20 = v24 & *(void *)(v16 + 64);
      uint64_t v19 = v22;
    }

    int64_t v25 = 0LL;
    uint64_t v110 = v19;
    uint64_t v115 = v17 & 0x7FFFFFFFFFFFFFFFLL;
    int64_t v116 = (unint64_t)(v19 + 64) >> 6;
    uint64_t v108 = (uint64_t)(v12 + 9);
    uint64_t v109 = (char *)&type metadata for Any + 8;
    os_log_type_t v114 = (char *)&type metadata for Swift.AnyObject + 8;
    if ((v17 & 0x8000000000000000LL) != 0) {
      goto LABEL_16;
    }
LABEL_14:
    if (v20)
    {
      uint64_t v26 = (v20 - 1) & v20;
      unint64_t v27 = __clz(__rbit64(v20)) | (v25 << 6);
      int64_t v28 = v25;
      goto LABEL_33;
    }

    int64_t v37 = v25 + 1;
    if (!__OFADD__(v25, 1LL))
    {
      if (v37 < v116)
      {
        unint64_t v38 = *(void *)(v117 + 8 * v37);
        int64_t v28 = v25 + 1;
        if (v38) {
          goto LABEL_32;
        }
        int64_t v28 = v25 + 2;
        if (v25 + 2 >= v116) {
          goto LABEL_89;
        }
        unint64_t v38 = *(void *)(v117 + 8 * v28);
        if (v38) {
          goto LABEL_32;
        }
        int64_t v28 = v25 + 3;
        if (v25 + 3 >= v116) {
          goto LABEL_89;
        }
        unint64_t v38 = *(void *)(v117 + 8 * v28);
        if (v38)
        {
LABEL_32:
          uint64_t v26 = (v38 - 1) & v38;
          unint64_t v27 = __clz(__rbit64(v38)) + (v28 << 6);
LABEL_33:
          uint64_t v40 = *(void **)(*(void *)(v17 + 56) + 8 * v27);
          id v34 = *(id *)(*(void *)(v17 + 48) + 8 * v27);
          id v36 = v40;
          if (v34)
          {
            while (1)
            {

              uint64_t v41 = outlined bridged method (pb) of @objc INCodableAttribute.propertyName.getter(v36);
              if (v42)
              {
                uint64_t v43 = v41;
                uint64_t v44 = v42;
                *(void *)&__int128 v122 = v41;
                *((void *)&v122 + 1) = v42;
                swift_bridgeObjectRetain(v42);
                AnyHashable.init<A>(_:)(v124, &v122, &type metadata for String, &protocol witness table for String);
                if (*(void *)(v5 + 16)
                  && (unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v124), (v46 & 1) != 0))
                {
                  OUTLINED_FUNCTION_233( *(void *)(v5 + 56) + 32 * v45,  v46,  v47,  v48,  v49,  v50,  v51,  v52,  v106,  v107,  v108,  (uint64_t)v109,  v110,  (uint64_t)v111,  v112,  (uint64_t)v113,  (uint64_t)v114,  v115,  v116,  v117,  (uint64_t)v118,  v119,  v120,  *((uint64_t *)&v120 + 1),  v121,  *((uint64_t *)&v121 + 1),  v122);
                }

                else
                {
                  __int128 v122 = 0u;
                  __int128 v123 = 0u;
                }

                OUTLINED_FUNCTION_188();
                if (!*((void *)&v123 + 1))
                {
                  OUTLINED_FUNCTION_1_2();

                  _s11SiriKitFlow15NLContextUpdateVSgWOhTm_0( (uint64_t)&v122,  &demangling cache variable for type metadata for Any?);
                  goto LABEL_87;
                }

                outlined init with take of Any(&v122, v125);
                *(void *)&__int128 v122 = v43;
                *((void *)&v122 + 1) = v44;
                swift_bridgeObjectRetain_n(v44, 2LL);
                AnyHashable.init<A>(_:)(v124, &v122, &type metadata for String, &protocol witness table for String);
                uint64_t v53 = outlined bridged method (pb) of @objc INIntentResponse.propertiesByName.getter(v118);
                if (!v53) {
                  goto LABEL_95;
                }
                uint64_t v54 = v53;
                OUTLINED_FUNCTION_1_2();
                if (*(void *)(v54 + 16) && (unint64_t v55 = OUTLINED_FUNCTION_189(), (v56 & 1) != 0))
                {
                  OUTLINED_FUNCTION_233( *(void *)(v54 + 56) + 32 * v55,  v56,  v57,  v58,  v59,  v60,  v61,  v62,  v106,  v107,  v108,  (uint64_t)v109,  v110,  (uint64_t)v111,  v112,  (uint64_t)v113,  (uint64_t)v114,  v115,  v116,  v117,  (uint64_t)v118,  v119,  v120,  *((uint64_t *)&v120 + 1),  v121,  *((uint64_t *)&v121 + 1),  v122);
                }

                else
                {
                  __int128 v122 = 0u;
                  __int128 v123 = 0u;
                }

                OUTLINED_FUNCTION_20();
                OUTLINED_FUNCTION_188();
                uint64_t v63 = *((void *)&v123 + 1);
                _s11SiriKitFlow15NLContextUpdateVSgWOhTm_0( (uint64_t)&v122,  &demangling cache variable for type metadata for Any?);
                if (!v63)
                {
                  uint64_t v64 = v113[2];
                  if (v64)
                  {
                    uint64_t v65 = v113[4];
                    uint64_t v66 = v113[5];
                    BOOL v67 = v65 == v43 && v44 == v66;
                    if (v67 || (OUTLINED_FUNCTION_125_1(v65, v66) & 1) != 0)
                    {
LABEL_55:
                      *(void *)&__int128 v122 = v43;
                      *((void *)&v122 + 1) = v44;
                      OUTLINED_FUNCTION_9_4();
                      AnyHashable.init<A>(_:)( v124,  &v122,  &type metadata for String,  &protocol witness table for String);
                      OUTLINED_FUNCTION_233( (uint64_t)v125,  v68,  v69,  v70,  v71,  v72,  v73,  v74,  v106,  v107,  v108,  (uint64_t)v109,  v110,  (uint64_t)v111,  v112,  (uint64_t)v113,  (uint64_t)v114,  v115,  v116,  v117,  (uint64_t)v118,  v119,  v120,  *((uint64_t *)&v120 + 1),  v121,  *((uint64_t *)&v121 + 1),  v122);
                      uint64_t v75 = outlined bridged method (pb) of @objc INIntentResponse.propertiesByName.getter(v118);
                      if (!v75) {
                        goto LABEL_96;
                      }
                      uint64_t v76 = (void *)v75;
                      OUTLINED_FUNCTION_1_2();
                      if (*((void *)&v123 + 1))
                      {
                        outlined init with take of Any(&v122, &v120);
                        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v76);
                        uint64_t v119 = (uint64_t)v76;
                        unint64_t v78 = OUTLINED_FUNCTION_189();
                        uint64_t v80 = v76[2];
                        BOOL v81 = (v79 & 1) == 0;
                        Swift::Int v82 = v80 + v81;
                        if (__OFADD__(v80, v81)) {
                          goto LABEL_92;
                        }
                        unint64_t v83 = v78;
                        char v84 = v79;
                        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<AnyHashable, Any>);
                        if (_NativeDictionary.ensureUnique(isUnique:capacity:)( isUniquelyReferenced_nonNull_native,  v82))
                        {
                          unint64_t v85 = OUTLINED_FUNCTION_189();
                          if ((v84 & 1) != (v86 & 1)) {
                            goto LABEL_98;
                          }
                          unint64_t v83 = v85;
                        }

                        if ((v84 & 1) != 0)
                        {
                          uint64_t v87 = (void *)(v76[7] + 32 * v83);
                          __swift_destroy_boxed_opaque_existential_1Tm(v87);
                          outlined init with take of Any(&v120, v87);
                        }

                        else
                        {
                          v76[(v83 >> 6) + 8] |= 1LL << v83;
                          outlined init with copy of AnyHashable((uint64_t)v124, v76[6] + 40 * v83);
                          outlined init with take of Any(&v120, (_OWORD *)(v76[7] + 32 * v83));
                          uint64_t v93 = v76[2];
                          BOOL v94 = __OFADD__(v93, 1LL);
                          uint64_t v95 = v93 + 1;
                          if (v94) {
                            goto LABEL_93;
                          }
                          v76[2] = v95;
                        }

                        swift_bridgeObjectRelease(0x8000000000000000LL);
                        OUTLINED_FUNCTION_188();
                      }

                      else
                      {
                        _s11SiriKitFlow15NLContextUpdateVSgWOhTm_0( (uint64_t)&v122,  &demangling cache variable for type metadata for Any?);
                        swift_bridgeObjectRetain(v76);
                        unint64_t v88 = OUTLINED_FUNCTION_189();
                        char v90 = v89;
                        OUTLINED_FUNCTION_20();
                        if ((v90 & 1) != 0)
                        {
                          char v91 = swift_isUniquelyReferenced_nonNull_native(v76);
                          uint64_t v119 = (uint64_t)v76;
                          Swift::Int v92 = v76[3];
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<AnyHashable, Any>);
                          _NativeDictionary.ensureUnique(isUnique:capacity:)(v91, v92);
                          outlined destroy of AnyHashable(v76[6] + 40 * v88);
                          outlined init with take of Any((_OWORD *)(v76[7] + 32 * v88), &v120);
                          _NativeDictionary._delete(at:)(v88, v76);
                          swift_bridgeObjectRelease(0x8000000000000000LL);
                        }

                        else
                        {
                          __int128 v120 = 0u;
                          __int128 v121 = 0u;
                        }

                        OUTLINED_FUNCTION_188();
                        _s11SiriKitFlow15NLContextUpdateVSgWOhTm_0( (uint64_t)&v120,  &demangling cache variable for type metadata for Any?);
                      }

                      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
                      OUTLINED_FUNCTION_20();
                      [v118 setPropertiesByName:isa];

                      __swift_destroy_boxed_opaque_existential_1Tm(v125);
                      goto LABEL_87;
                    }

                    if (v64 != 1)
                    {
                      uint64_t v97 = v113[6];
                      uint64_t v98 = v113[7];
                      BOOL v99 = v97 == v43 && v44 == v98;
                      if (v99 || (OUTLINED_FUNCTION_125_1(v97, v98) & 1) != 0) {
                        goto LABEL_55;
                      }
                      if (v64 != 2)
                      {
                        uint64_t v100 = (uint64_t *)v108;
                        uint64_t v101 = 2LL;
                        while (!__OFADD__(v101, 1LL))
                        {
                          uint64_t v107 = v101 + 1;
                          uint64_t v102 = *(v100 - 1);
                          uint64_t v103 = *v100;
                          BOOL v104 = v102 == v43 && v44 == v103;
                          if (v104 || (OUTLINED_FUNCTION_125_1(v102, v103) & 1) != 0) {
                            goto LABEL_55;
                          }
                          v100 += 2;
                          ++v101;
                          if (v107 == v64) {
                            goto LABEL_46;
                          }
                        }

                        goto LABEL_94;
                      }
                    }
                  }
                }

LABEL_89:
      outlined consume of [String : DMFPolicy].Iterator._Variant(v17);
      swift_bridgeObjectRelease(v113);
      OUTLINED_FUNCTION_37();

      return v112;
    }

    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
  }

  __break(1u);
LABEL_98:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

uint64_t CustomIntentsDialogTemplating.deinit()
{
  return v0;
}

uint64_t CustomIntentsDialogTemplating.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 152LL, 7LL);
}

void specialized DisambiguationItemProtocol.toDisplayString()()
{
  if (*(void *)(v0 + 24))
  {
    OUTLINED_FUNCTION_54_7();
    uint64_t v1 = static CATSpeakableString.stripTTSHint(print:)();
    unint64_t v3 = v2;
    OUTLINED_FUNCTION_2_6();
    uint64_t v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000LL) == 0) {
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFLL;
    }
    if (v4)
    {
      OUTLINED_FUNCTION_170();
      v5._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_243();
      String.append(_:)(v5);
      uint64_t v6 = OUTLINED_FUNCTION_22();
      OUTLINED_FUNCTION_198(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
      OUTLINED_FUNCTION_14();
    }

    else
    {
      OUTLINED_FUNCTION_22();
    }
  }

  OUTLINED_FUNCTION_129();
  OUTLINED_FUNCTION_167_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  OUTLINED_FUNCTION_6_4();
  uint64_t v1 = *(void *)(v0 + 24);
  OUTLINED_FUNCTION_54_7();
  static CATSpeakableString.stripTTSHint(print:)();
  OUTLINED_FUNCTION_2_6();
  if (v1)
  {
    swift_bridgeObjectRetain(v1);
    OUTLINED_FUNCTION_243();
    unint64_t v2 = static CATSpeakableString.stripTTSHint(print:)();
    uint64_t v4 = v3;
    OUTLINED_FUNCTION_22();
    Swift::String v5 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000LL) == 0) {
      Swift::String v5 = v2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5)
    {
      OUTLINED_FUNCTION_170();
      OUTLINED_FUNCTION_151_1(v2);
      uint64_t v6 = OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_198(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
      OUTLINED_FUNCTION_14();
    }

    else
    {
      OUTLINED_FUNCTION_1_2();
    }
  }

  OUTLINED_FUNCTION_129();
  OUTLINED_FUNCTION_167_0();
}

uint64_t outlined bridged method (pb) of @objc INCodableDescription.attributes.getter(void *a1)
{
  id v1 = [a1 attributes];
  if (!v1) {
    return 0LL;
  }
  unint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
  uint64_t v4 = type metadata accessor for NSError( 0LL,  &lazy cache variable for type metadata for INCodableAttribute,  &OBJC_CLASS___INCodableAttribute_ptr);
  unint64_t v5 = lazy protocol witness table accessor for type NSNumber and conformance NSObject();
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, v3, v4, v5);

  return v6;
}

uint64_t outlined bridged method (pb) of @objc INCodableAttribute.propertyName.getter(void *a1)
{
  id v1 = [a1 propertyName];
  if (!v1) {
    return 0LL;
  }
  unint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)( __int128 *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)(a10 + 136) = a11;
  *(void *)(a10 + 14__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a12;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(a10 + 112));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a11 - 8) + 32LL))( boxed_opaque_existential_1,  a9,  a11);
  *(void *)(a10 + 56) = a2;
  outlined init with take of AceServiceInvokerAsync(a1, a10 + 16);
  *(void *)(a10 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a3;
  *(_BYTE *)(a10 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a4 & 1;
  *(void *)(a10 + 80) = a5;
  *(void *)(a10 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a6;
  *(void *)(a10 + 96) = a7;
  *(void *)(a10 + 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a8;
  return a10;
}

uint64_t type metadata accessor for CustomIntentsDialogTemplating()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin29CustomIntentsDialogTemplating);
}

unint64_t lazy protocol witness table accessor for type CustomIntentsDialogTemplatingError and conformance CustomIntentsDialogTemplatingError()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentsDialogTemplatingError and conformance CustomIntentsDialogTemplatingError;
  if (!lazy protocol witness table cache variable for type CustomIntentsDialogTemplatingError and conformance CustomIntentsDialogTemplatingError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CustomIntentsDialogTemplatingError,  &type metadata for CustomIntentsDialogTemplatingError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentsDialogTemplatingError and conformance CustomIntentsDialogTemplatingError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentsDialogTemplatingError and conformance CustomIntentsDialogTemplatingError;
  if (!lazy protocol witness table cache variable for type CustomIntentsDialogTemplatingError and conformance CustomIntentsDialogTemplatingError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CustomIntentsDialogTemplatingError,  &type metadata for CustomIntentsDialogTemplatingError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentsDialogTemplatingError and conformance CustomIntentsDialogTemplatingError);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for CustomIntentsDialogTemplatingError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_CDB84 + 4 * asc_185690[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_CDBA4 + 4 * byte_185695[v4]))();
  }
}

_BYTE *sub_CDB84(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_CDBA4(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_CDBAC(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_CDBB4(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_CDBBC(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_CDBC4(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CustomIntentsDialogTemplatingError()
{
  return &type metadata for CustomIntentsDialogTemplatingError;
}

unint64_t lazy protocol witness table accessor for type NSNumber and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type NSNumber and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSNumber and conformance NSObject)
  {
    uint64_t v1 = type metadata accessor for NSError( 255LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSNumber and conformance NSObject);
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_16_31(uint64_t a1)
{
  return _s11SiriKitFlow15NLContextUpdateVSgWOhTm_0(a1, v1);
}

uint64_t OUTLINED_FUNCTION_19_22(void *a1)
{
  return DeviceState.asSiriKitDeviceState()(v1, v2);
}

uint64_t OUTLINED_FUNCTION_20_27()
{
  return CustomIntentsDialogTemplating.getAppName(app:)(v2);
}

uint64_t OUTLINED_FUNCTION_25_26(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 0LL, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_35_25( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return CustomIntentsDialogTemplating.getAppName(app:)(a11);
}

uint64_t OUTLINED_FUNCTION_45_17(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t OUTLINED_FUNCTION_47_19()
{
  return swift_task_dealloc(*(void *)(v0 + 176));
}

uint64_t OUTLINED_FUNCTION_50_18(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 0LL, 1LL, v1);
}

uint64_t OUTLINED_FUNCTION_57_16()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112LL))();
}

uint64_t OUTLINED_FUNCTION_58_15@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

uint64_t OUTLINED_FUNCTION_59_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, a3, a4);
}

uint64_t OUTLINED_FUNCTION_63_9()
{
  return DeviceState.isVox.getter(v0, v1);
}

uint64_t OUTLINED_FUNCTION_66_13(uint64_t result)
{
  uint64_t v4 = (void *)*v2;
  *(void *)(v3 - __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = *v2;
  void v4[2] = v2;
  void v4[3] = result;
  v4[4] = v1;
  return result;
}

id OUTLINED_FUNCTION_68_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_74_12( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)( v15,  v14,  v13,  v16,  v12,  *(void *)(v17 - 104),  *(void *)(v17 - 96),  *(void *)(v17 - 88),  a9,  a10,  a11,  a12);
}

void OUTLINED_FUNCTION_75_10()
{
}

uint64_t OUTLINED_FUNCTION_76_7( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void))
{
  return a8();
}

uint64_t OUTLINED_FUNCTION_77_10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  return a7();
}

uint64_t OUTLINED_FUNCTION_79_5( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

uint64_t OUTLINED_FUNCTION_80_7()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224LL))(0LL);
}

uint64_t OUTLINED_FUNCTION_81_11()
{
  return swift_task_dealloc(*(void *)(v0 + 176));
}

uint64_t OUTLINED_FUNCTION_82_6()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_84_10(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

void *OUTLINED_FUNCTION_85_8()
{
  return INIntentResponse.localizedSpokenResponse(intentName:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_87_6( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(v12 + 16) = v11;
  return (*(uint64_t (**)(unint64_t))(a10 + 32))( v12 + ((*(unsigned __int8 *)(a10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(a10 + 80))
         + *(void *)(a10 + 72) * v10);
}

void OUTLINED_FUNCTION_89_8( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  v21._uint64_t countAndFlagsBits = v19;
  v21._object = v20;
  String.append(_:)(v21);
}

void OUTLINED_FUNCTION_90_6( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  v21._uint64_t countAndFlagsBits = v19;
  v21._object = v20;
  String.append(_:)(v21);
}

uint64_t OUTLINED_FUNCTION_93_3()
{
  uint64_t v3 = __swift_storeEnumTagSinglePayload(v1, 0LL, 1LL, v2);
  return (*(uint64_t (**)(uint64_t))(*(void *)v0 + 112LL))(v3);
}

uint64_t OUTLINED_FUNCTION_97_4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, uint64_t a3)
{
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))( (char *)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
}

uint64_t OUTLINED_FUNCTION_100_3()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  return DeviceState.isActualHomePod.getter(v2, v1);
}

uint64_t OUTLINED_FUNCTION_101_3(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t OUTLINED_FUNCTION_104_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, a3, a4);
}

uint64_t OUTLINED_FUNCTION_106_0(uint64_t a1)
{
  return CustomIntentsDialogTemplating.getAppName(app:)(v2);
}

uint64_t OUTLINED_FUNCTION_109_3()
{
  uint64_t v3 = __swift_storeEnumTagSinglePayload(v2, 0LL, 1LL, v1);
  return (*(uint64_t (**)(uint64_t))(*(void *)v0 + 112LL))(v3);
}

uint64_t OUTLINED_FUNCTION_110_4(uint64_t result)
{
  uint64_t v4 = (void *)*v2;
  *(void *)(v3 - __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = *v2;
  void v4[5] = v2;
  v4[6] = result;
  v4[7] = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_111_3(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_113_3@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(*(void *)(v1 + a1 + 384) + 4LL));
}

void OUTLINED_FUNCTION_114_2(uint64_t a1, uint64_t a2)
{
}

void OUTLINED_FUNCTION_115_1()
{
}

uint64_t OUTLINED_FUNCTION_116_4()
{
  return swift_task_dealloc(*(void *)(v0 + 168));
}

uint64_t OUTLINED_FUNCTION_118_4@<X0>(uint64_t a1@<X1>, unint64_t a2@<X8>)
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a2 > 1, a1, 1LL);
}

void OUTLINED_FUNCTION_119_3()
{
}

void OUTLINED_FUNCTION_120_3()
{
}

uint64_t OUTLINED_FUNCTION_122_2( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return CustomIntentsDialogTemplating.getAppName(app:)(a9);
}

void OUTLINED_FUNCTION_123_4()
{
}

void OUTLINED_FUNCTION_124_3()
{
}

uint64_t OUTLINED_FUNCTION_125_1(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

__n128 *OUTLINED_FUNCTION_126_3(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x6574656D61726170LL;
  result[2].n128_u64[1] = 0xE900000000000072LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_128_1(uint64_t a1, uint64_t *a2)
{
  return _s11SiriKitFlow15NLContextUpdateVSgWOhTm_0(v2, a2);
}

uint64_t OUTLINED_FUNCTION_130_1( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return CustomIntentsDialogTemplating.getAppName(app:)(a9);
}

void OUTLINED_FUNCTION_131_3( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 - 96) = a7;
  *(void *)(v8 - 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a8;
  *(void *)(v8 - 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a6;
}

uint64_t OUTLINED_FUNCTION_132_1@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

void OUTLINED_FUNCTION_134_1(unint64_t a1@<X8>)
{
}

uint64_t OUTLINED_FUNCTION_135_0(uint64_t a1)
{
  return CustomIntentsDialogTemplating.copyPropertiesFromIntentToResponse(intent:intentResponse:)(a1, v1);
}

void OUTLINED_FUNCTION_139_1()
{
}

  ;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_145_2(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 0LL, 1LL, a1);
}

void OUTLINED_FUNCTION_146_1()
{
}

void OUTLINED_FUNCTION_147_0()
{
}

uint64_t OUTLINED_FUNCTION_148_1@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

void OUTLINED_FUNCTION_149_2()
{
}

uint64_t OUTLINED_FUNCTION_150()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v3, v1, v2);
}

void OUTLINED_FUNCTION_151_1(uint64_t a1)
{
  uint64_t v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_153_0()
{
  return swift_task_dealloc(*(void *)(v0 + 152));
}

void OUTLINED_FUNCTION_154()
{
}

void *OUTLINED_FUNCTION_157_0@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 224) = result;
  *unint64_t result = v2;
  result[1] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_158_0()
{
  return swift_task_dealloc(*(void *)(v0 + 144));
}

void OUTLINED_FUNCTION_160_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t OUTLINED_FUNCTION_162_0()
{
  return swift_task_dealloc(*(void *)(v0 + 104));
}

void OUTLINED_FUNCTION_163(void *a1)
{
}

id OUTLINED_FUNCTION_164_0(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t OUTLINED_FUNCTION_165_0()
{
  return __swift_storeEnumTagSinglePayload(v1, 0LL, 1LL, v0);
}

uint64_t OUTLINED_FUNCTION_166_0()
{
  return SpeakableString.init(print:speak:)(v2, v3, v0, v1);
}

  ;
}

__n128 *OUTLINED_FUNCTION_168(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x746E756F63LL;
  result[2].n128_u64[1] = 0xE500000000000000LL;
  return result;
}

  ;
}

uint64_t OUTLINED_FUNCTION_171@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *v3;
  *(void *)(v4 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v2;
  return swift_task_dealloc(a1);
}

uint64_t OUTLINED_FUNCTION_172@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *uint64_t v2 = *v4;
  *(void *)(a2 + 20__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v3;
  return swift_task_dealloc(a1);
}

uint64_t OUTLINED_FUNCTION_173@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *uint64_t v2 = *v4;
  *(void *)(a2 + 120) = v3;
  return swift_task_dealloc(a1);
}

uint64_t OUTLINED_FUNCTION_174@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *uint64_t v2 = *v4;
  *(void *)(a2 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 184) = v3;
  return swift_task_dealloc(a1);
}

uint64_t OUTLINED_FUNCTION_175@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *uint64_t v2 = *v4;
  *(void *)(a2 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v3;
  return swift_task_dealloc(a1);
}

uint64_t OUTLINED_FUNCTION_176@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *uint64_t v2 = *v4;
  *(void *)(a2 + 16__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v3;
  return swift_task_dealloc(a1);
}

uint64_t OUTLINED_FUNCTION_177()
{
  return swift_release(*(void *)(v0 + 32));
}

uint64_t OUTLINED_FUNCTION_178()
{
  return swift_release(*(void *)(v0 + 24));
}

uint64_t OUTLINED_FUNCTION_180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, 0LL, 1LL, a4);
}

uint64_t OUTLINED_FUNCTION_181()
{
  return CustomIntentsDialogTemplating.getAppName(app:)(v0);
}

uint64_t OUTLINED_FUNCTION_182()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112LL))();
}

id OUTLINED_FUNCTION_183@<X0>(uint64_t a1@<X8>)
{
  return v1;
}

uint64_t OUTLINED_FUNCTION_185()
{
  return INIntent.category()()._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_188()
{
  return outlined destroy of AnyHashable(v0 - 160);
}

unint64_t OUTLINED_FUNCTION_189()
{
  return specialized __RawDictionaryStorage.find<A>(_:)(v0 - 160);
}

uint64_t OUTLINED_FUNCTION_190()
{
  return swift_task_dealloc(*(void *)(v0 + 96));
}

uint64_t OUTLINED_FUNCTION_191(uint64_t a1)
{
  return _s11SiriKitFlow15NLContextUpdateVSgWOhTm_0(a1, v1);
}

uint64_t OUTLINED_FUNCTION_192(uint64_t a1, uint64_t a2)
{
  return static LocaleUtils.compatibleLocale(siriLocale:contentLocale:)(a1, a2, v2, v3);
}

void *OUTLINED_FUNCTION_193()
{
  return INIntentResponse.printedDialog()();
}

void OUTLINED_FUNCTION_194()
{
  *(void *)(v1 - __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_195()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_197(uint64_t a1, uint64_t a2)
{
  return static LocaleUtils.compatibleLocale(siriLocale:contentLocale:)(a1, a2, v2, v3);
}

void OUTLINED_FUNCTION_198( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  v10._uint64_t countAndFlagsBits = a9;
  v10._object = a10;
  String.append(_:)(v10);
}

void OUTLINED_FUNCTION_200()
{
}

uint64_t OUTLINED_FUNCTION_202()
{
  return INIntent.category()()._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_206()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 8));
}

uint64_t OUTLINED_FUNCTION_207@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 232LL))();
}

uint64_t OUTLINED_FUNCTION_208()
{
  return static CATSpeakableString.stripTTSHint(print:)();
}

uint64_t OUTLINED_FUNCTION_209()
{
  return static CATSpeakableString.stripTTSHint(print:)();
}

uint64_t OUTLINED_FUNCTION_210()
{
  return v3(v2, v1, v0);
}

void OUTLINED_FUNCTION_211( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  v19._uint64_t countAndFlagsBits = a18;
  v19._object = a19;
  String.append(_:)(v19);
}

uint64_t OUTLINED_FUNCTION_213()
{
  return __swift_mutable_project_boxed_opaque_existential_1(v0, *(void *)(v0 + 24));
}

uint64_t OUTLINED_FUNCTION_214(uint64_t result)
{
  *(void *)(v1 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_216()
{
  return static CustomIntentsDialogTemplating.isShortcutsInternalCustomIntent(intent:)(v0);
}

uint64_t OUTLINED_FUNCTION_217()
{
  return DeviceState.isVox.getter(v0, v1);
}

uint64_t OUTLINED_FUNCTION_218()
{
  return static CATSpeakableString.stripTTSHint(print:)();
}

uint64_t OUTLINED_FUNCTION_219()
{
  return outlined init with copy of CustomIntentDisambiguationItem(v1, v0);
}

uint64_t OUTLINED_FUNCTION_221@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void v3[9] = a2;
  v3[6] = v2;
  v3[7] = a1;
  return swift_bridgeObjectRetain(a1);
}

uint64_t OUTLINED_FUNCTION_222()
{
  return swift_release(*(void *)(v0 + 32));
}

uint64_t OUTLINED_FUNCTION_223@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *v2;
  return swift_task_dealloc(a1);
}

uint64_t OUTLINED_FUNCTION_224()
{
  return INIntentResponse.printedTemplate()().value._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_226()
{
  return swift_release(*(void *)(v0 + 24));
}

uint64_t OUTLINED_FUNCTION_227()
{
  return swift_release(*(void *)(v0 + 128));
}

uint64_t OUTLINED_FUNCTION_229()
{
  return swift_task_dealloc(*(void *)(v0 + 120));
}

uint64_t OUTLINED_FUNCTION_232()
{
  return __swift_storeEnumTagSinglePayload(v0, 0LL, 1LL, v1);
}

uint64_t OUTLINED_FUNCTION_233( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
  return outlined init with copy of Any(a1, (uint64_t)&a27);
}

uint64_t OUTLINED_FUNCTION_234(uint64_t a1)
{
  return swift_release(a1);
}

void OUTLINED_FUNCTION_235()
{
}

uint64_t OUTLINED_FUNCTION_236()
{
  return swift_task_dealloc(*(void *)(v0 + 88));
}

  ;
}

uint64_t OUTLINED_FUNCTION_241()
{
  return CATWrapperSimple.__allocating_init(options:globals:)(v0, 0LL);
}

uint64_t OUTLINED_FUNCTION_242(uint64_t a1, uint64_t *a2)
{
  return _s11SiriKitFlow15NLContextUpdateVSgWOhTm_0(v2, a2);
}

uint64_t OUTLINED_FUNCTION_243()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_245()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_246(uint64_t a1)
{
  return swift_initStackObject(a1, v1);
}

void OUTLINED_FUNCTION_248()
{
}

uint64_t OUTLINED_FUNCTION_249()
{
  return swift_task_dealloc(*(void *)(v0 + 248));
}

uint64_t OUTLINED_FUNCTION_250( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return outlined destroy of CustomIntentDisambiguationItem(a11);
}

uint64_t OUTLINED_FUNCTION_251()
{
  return 0x6B6E616C62LL;
}

uint64_t OUTLINED_FUNCTION_252()
{
  return String.lowercased()()._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_253()
{
  return static SAAppInfoFactory.createAppInfo(app:)(v0);
}

uint64_t OUTLINED_FUNCTION_254()
{
  return static CATSpeakableString.applyTTSHint(speak:)();
}

uint64_t OUTLINED_FUNCTION_256()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v0, v1);
}

uint64_t OUTLINED_FUNCTION_257()
{
  return String.lowercased()()._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_259()
{
  return INIntentResponse.printedTemplate()().value._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_260( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return swift_isUniquelyReferenced_nonNull_native(a15);
}

uint64_t OUTLINED_FUNCTION_261()
{
  return static CATSpeakableString.applyTTSHint(speak:)();
}

void *OUTLINED_FUNCTION_262()
{
  return INIntentResponse.localizedSpokenResponse(intentName:)(v1, v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_264()
{
  return swift_release(*(void *)(v0 + 296));
}

uint64_t OUTLINED_FUNCTION_266()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = *v0;
  return *(void *)(v2 + 112);
}

  ;
}

void OUTLINED_FUNCTION_268()
{
}

uint64_t OUTLINED_FUNCTION_269()
{
  return swift_release(*(void *)(v0 + 120));
}

uint64_t OUTLINED_FUNCTION_270()
{
  return swift_task_dealloc(*(void *)(v0 + 288));
}

  ;
}

uint64_t OUTLINED_FUNCTION_272()
{
  return swift_task_dealloc(*(void *)(v0 + 80));
}

uint64_t OUTLINED_FUNCTION_273()
{
  return swift_task_dealloc(*(void *)(v0 + 40));
}

void protocol witness for DisambiguationItemProtocol.getDisplayTitle() in conformance WFChooseFromListDisambiguationItem()
{
  __n128 v0 = OUTLINED_FUNCTION_0_29();
  specialized DisambiguationItemProtocol.getDisplayTitle()(v0);
  OUTLINED_FUNCTION_19_23();
}

Swift::String __swiftcall DisambiguationItemProtocol.getDisplayTitle()()
{
  result._object = v3;
  result._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t _sSSSgWObTm_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = OUTLINED_FUNCTION_45();
  v5(v4);
  return a2;
}

void *specialized DisambiguationItemProtocol.getVoiceCommandPayloadsForItem()()
{
  uint64_t v1 = type metadata accessor for UsoEntityBuilder_common_VoiceCommandPayload(0LL);
  uint64_t v2 = OUTLINED_FUNCTION_15_19(v1);
  uint64_t v3 = UsoEntityBuilder_common_VoiceCommandPayload.init()(v2);
  OUTLINED_FUNCTION_6_4();
  uint64_t v4 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain(*(void *)(v0 + 8));
  uint64_t v5 = static CATSpeakableString.stripTTSHint(print:)();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_2_6();
  dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setStringValue(value:)(v5, v7);
  OUTLINED_FUNCTION_22();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = OUTLINED_FUNCTION_23_4(v8);
  *(_OWORD *)(v9 + 16) = xmmword_17E150;
  *(void *)(v9 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v3;
  specialized Array._endMutation()(v9, v10, v11);
  uint64_t v27 = v4;
  uint64_t v12 = *(void *)(v4 + 16);
  if (v12)
  {
    uint64_t v26 = _swiftEmptyArrayStorage;
    OUTLINED_FUNCTION_10_6();
    outlined retain of [String](&v27);
    OUTLINED_FUNCTION_20_28();
    uint64_t v13 = v4 + 40;
    do
    {
      OUTLINED_FUNCTION_6_29();
      uint64_t v14 = OUTLINED_FUNCTION_16_32();
      UsoEntityBuilder_common_VoiceCommandPayload.init()(v14);
      OUTLINED_FUNCTION_5_28();
      uint64_t v15 = OUTLINED_FUNCTION_2_6();
      uint64_t UniqueAndReserveCapacityIfNot = specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
      OUTLINED_FUNCTION_4_27(UniqueAndReserveCapacityIfNot, v17, v18, v19, v20, v21, v22, v23, (uint64_t)v26);
      uint64_t v24 = OUTLINED_FUNCTION_9_28();
      specialized ContiguousArray._endMutation()(v24);
      v13 += 16LL;
      --v12;
    }

    while (v12);
    outlined release of [String](&v27);
  }

  else
  {
    OUTLINED_FUNCTION_10_6();
  }

  OUTLINED_FUNCTION_8_31();
  swift_release();
  return v26;
}

void *DisambiguationItemProtocol.getVoiceCommandPayloadsForItem()(uint64_t a1, uint64_t a2)
{
  void (*v13)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t UniqueAndReserveCapacityIfNot;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  void *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[16];
  __int128 v49;
  uint64_t v50;
  uint64_t v4 = type metadata accessor for UsoEntityBuilder_common_VoiceCommandPayload(0LL);
  OUTLINED_FUNCTION_15_19(v4);
  uint64_t v5 = ((uint64_t (*)(void))UsoEntityBuilder_common_VoiceCommandPayload.init())();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  uint64_t v8 = v7;
  dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setStringValue(value:)(v6, v7);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v10 = OUTLINED_FUNCTION_23_4(v9);
  *(_OWORD *)(v10 + 16) = xmmword_17E150;
  *(void *)(v10 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v5;
  *(void *)&uint64_t v44 = v10;
  specialized Array._endMutation()(v10, v11, v12);
  uint64_t v13 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a2 + 8);
  OUTLINED_FUNCTION_10_6();
  v13(&v44, a1, a2);
  uint64_t v14 = v47;
  uint64_t v50 = v47;
  uint64_t v49 = v44;
  swift_bridgeObjectRetain(v47);
  outlined release of String?((uint64_t)&v49);
  _sSSSgWObTm_0((uint64_t)&v45, (uint64_t)v48, (uint64_t *)&demangling cache variable for type metadata for String?);
  outlined release of String?((uint64_t)v48);
  uint64_t v21 = OUTLINED_FUNCTION_23_25( (uint64_t)&v46,  v15,  &demangling cache variable for type metadata for INImage?,  v16,  v17,  v18,  v19,  v20,  v42,  v44);
  OUTLINED_FUNCTION_22_19(v21, v22, v23, v24, v25, v26, v27);
  OUTLINED_FUNCTION_21_22();
  int64_t v28 = *(void *)(v14 + 16);
  if (v28)
  {
    uint64_t v43 = _swiftEmptyArrayStorage;
    OUTLINED_FUNCTION_20_28();
    uint64_t v29 = v14 + 40;
    do
    {
      OUTLINED_FUNCTION_6_29();
      uint64_t v30 = OUTLINED_FUNCTION_16_32();
      UsoEntityBuilder_common_VoiceCommandPayload.init()(v30);
      OUTLINED_FUNCTION_5_28();
      uint64_t v31 = OUTLINED_FUNCTION_2_6();
      uint64_t UniqueAndReserveCapacityIfNot = specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v31);
      OUTLINED_FUNCTION_4_27(UniqueAndReserveCapacityIfNot, v33, v34, v35, v36, v37, v38, v39, (uint64_t)v43);
      uint64_t v40 = OUTLINED_FUNCTION_9_28();
      specialized ContiguousArray._endMutation()(v40);
      v29 += 16LL;
      --v28;
    }

    while (v28);
  }

  OUTLINED_FUNCTION_21_22();
  OUTLINED_FUNCTION_8_31();
  swift_release();
  return v43;
}

Swift::String __swiftcall DisambiguationItemProtocol.toSpeakString()()
{
  uint64_t v2 = OUTLINED_FUNCTION_12_23();
  DisambiguationItemProtocol.getDisplaySubtitle()( v2,  v3,  (void (*)(uint64_t, uint64_t))static CATSpeakableString.applyTTSHint(speak:));
  if (v4)
  {
    OUTLINED_FUNCTION_10_24();
    if (v6)
    {
      OUTLINED_FUNCTION_1_26(v5);
      uint64_t v7 = OUTLINED_FUNCTION_22();
      OUTLINED_FUNCTION_198(v7, v8, v9, v10, v11, v12, v13, v14, v18, v19);
      swift_bridgeObjectRelease();
    }

    else
    {
      OUTLINED_FUNCTION_22();
    }
  }

  OUTLINED_FUNCTION_167_0();
  result._object = v16;
  result._uint64_t countAndFlagsBits = v15;
  return result;
}

uint64_t DisambiguationItemProtocol.asSpeakableString()()
{
  Swift::String v0 = DisambiguationItemProtocol.toDisplayString()();
  Swift::String v1 = DisambiguationItemProtocol.toSpeakString()();
  return SpeakableString.init(print:speak:)(v0._countAndFlagsBits, v0._object, v1._countAndFlagsBits, v1._object);
}

uint64_t DisambiguationItemComponent.title.getter()
{
  return OUTLINED_FUNCTION_45();
}

uint64_t DisambiguationItemComponent.subtitle.getter()
{
  return OUTLINED_FUNCTION_45();
}

uint64_t DisambiguationItemComponent.synonyms.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 40));
  *(void *)(v1 + 40) = a1;
  return result;
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *DisambiguationItemComponent.synonyms.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

Swift::String __swiftcall DisambiguationItemProtocol.toDisplayString()()
{
  if ((unint64_t)DisambiguationItemProtocol.getDisplaySubtitle()().value._object)
  {
    OUTLINED_FUNCTION_10_24();
    if (v2)
    {
      OUTLINED_FUNCTION_1_26(v1);
      uint64_t v3 = OUTLINED_FUNCTION_22();
      OUTLINED_FUNCTION_198(v3, v4, v5, v6, v7, v8, v9, v10, v14, v15);
      swift_bridgeObjectRelease();
    }

    else
    {
      OUTLINED_FUNCTION_22();
    }
  }

  OUTLINED_FUNCTION_167_0();
  result._object = v12;
  result._uint64_t countAndFlagsBits = v11;
  return result;
}

Swift::String_optional __swiftcall DisambiguationItemProtocol.getDisplaySubtitle()()
{
  result.value._object = v3;
  result.value._uint64_t countAndFlagsBits = v2;
  return result;
}

void DisambiguationItemProtocol.getDisplayTitle()( uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 8))(&v29, a1, a2);
  uint64_t v6 = v29;
  uint64_t v7 = v30;
  _sSSSgWObTm_0((uint64_t)v31, (uint64_t)v33, (uint64_t *)&demangling cache variable for type metadata for String?);
  outlined release of String?((uint64_t)v33);
  uint64_t v14 = OUTLINED_FUNCTION_23_25( (uint64_t)v32,  v8,  &demangling cache variable for type metadata for INImage?,  v9,  v10,  v11,  v12,  v13,  v29,  v30);
  uint64_t v21 = OUTLINED_FUNCTION_22_19(v14, v15, v16, v17, v18, v19, v20);
  OUTLINED_FUNCTION_14_30( (uint64_t)v21,  v22,  v23,  v24,  v25,  v26,  v27,  v28,  v29,  v30,  v31[0],  v31[1],  v32[0],  v32[1],  v32[2]);
  a3(v6, v7);
  swift_bridgeObjectRelease(v7);
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_7_24();
}

void DisambiguationItemProtocol.getDisplaySubtitle()( uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  (*(void (**)(__int128 *__return_ptr))(a2 + 8))(&v27);
  uint64_t v4 = v28;
  uint64_t v5 = v29;
  __int128 v31 = v27;
  outlined release of String?((uint64_t)&v31);
  uint64_t v12 = OUTLINED_FUNCTION_23_25( (uint64_t)v30,  v6,  &demangling cache variable for type metadata for INImage?,  v7,  v8,  v9,  v10,  v11,  v27,  *((uint64_t *)&v27 + 1));
  uint64_t v19 = OUTLINED_FUNCTION_22_19(v12, v13, v14, v15, v16, v17, v18);
  OUTLINED_FUNCTION_14_30( (uint64_t)v19,  v20,  v21,  v22,  v23,  v24,  v25,  v26,  v27,  *((uint64_t *)&v27 + 1),  v28,  v29,  v30[0],  v30[1],  v30[2]);
  if (v5)
  {
    OUTLINED_FUNCTION_6_4();
    a3(v4, v5);
    OUTLINED_FUNCTION_22();
  }

  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_7_24();
}

ValueMetadata *type metadata accessor for DisambiguationItemComponent()
{
  return &type metadata for DisambiguationItemComponent;
}

void *protocol witness for DisambiguationItemProtocol.getVoiceCommandPayloadsForItem() in conformance ShortcutsLinkDisambiguationItem()
{
  return specialized DisambiguationItemProtocol.getVoiceCommandPayloadsForItem()();
}

void *outlined retain of [String](void *a1)
{
  return a1;
}

__n128 OUTLINED_FUNCTION_0_29()
{
  return v0[2];
}

void OUTLINED_FUNCTION_1_26(uint64_t a1)
{
  uint64_t v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_4_27( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)(a9 + 16));
}

uint64_t OUTLINED_FUNCTION_5_28()
{
  return dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setStringValue(value:)(v0, v1);
}

uint64_t OUTLINED_FUNCTION_6_29()
{
  return swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
}

  ;
}

void OUTLINED_FUNCTION_8_31()
{
}

uint64_t OUTLINED_FUNCTION_9_28()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v0, v1);
}

  ;
}

uint64_t OUTLINED_FUNCTION_12_23()
{
  return v0;
}

void *OUTLINED_FUNCTION_14_30( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  a15 = a14;
  return outlined release of [String](&a15);
}

uint64_t OUTLINED_FUNCTION_15_19(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

uint64_t OUTLINED_FUNCTION_16_32()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_20_28()
{
  return specialized ContiguousArray.reserveCapacity(_:)(v0);
}

void *OUTLINED_FUNCTION_21_22()
{
  return outlined release of [String]((void *)(v0 - 88));
}

id *OUTLINED_FUNCTION_22_19(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  return outlined release of INImage?((id *)va);
}

uint64_t OUTLINED_FUNCTION_23_25( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  return _sSSSgWObTm_0(a1, (uint64_t)va, a3);
}

uint64_t IntroduceCustomIntentViewBuilder.__allocating_init(viewFactory:)(uint64_t a1)
{
  uint64_t result = swift_allocObject(v1, 24LL, 7LL);
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t IntroduceCustomIntentViewBuilder.init(viewFactory:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t CATButtonLabelTemplating.getYesAndCancelButtonTemplates(deviceState:intentVerb:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  void v4[5] = v3;
  void v4[2] = a1;
  void v4[3] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[6] = OUTLINED_FUNCTION_9_0(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for TemplatingResult(0LL);
  v4[7] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[8] = v7;
  v4[9] = OUTLINED_FUNCTION_9_0(v7);
  return swift_task_switch(CATButtonLabelTemplating.getYesAndCancelButtonTemplates(deviceState:intentVerb:), 0LL, 0LL);
}

uint64_t CATButtonLabelTemplating.getYesAndCancelButtonTemplates(deviceState:intentVerb:)()
{
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v4 = (void *)v0[2];
  uint64_t v5 = *(void **)(v0[5] + 16LL);
  uint64_t v6 = v4[3];
  uint64_t v7 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v6);
  uint64_t v8 = DeviceState.asSiriKitDeviceState()(v6, v7);
  v0[10] = v8;
  swift_bridgeObjectRetain(v2);
  SpeakableString.init(print:speak:)(v3, v2, 0LL, 0LL);
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  __swift_storeEnumTagSinglePayload(v1, 0LL, 1LL, v9);
  uint64_t v10 = *(int **)(class metadata base offset for RunVoiceCommandCATs + *v5 + 112);
  uint64_t v13 = (int *)((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc(v10[1]);
  v0[11] = v11;
  *uint64_t v11 = v0;
  v11[1] = CATButtonLabelTemplating.getYesAndCancelButtonTemplates(deviceState:intentVerb:);
  return ((uint64_t (*)(void, uint64_t, void))v13)(v0[9], v8, v0[6]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v2 = *(void *)(*(void *)v1 + 88LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 48LL);
  *(void *)(*(void *)v1 + 96LL) = v0;
  swift_task_dealloc(v2);
  outlined destroy of SpeakableString?(v3);
  swift_release();
  if (v0) {
    uint64_t v4 = CATButtonLabelTemplating.getYesAndCancelButtonTemplates(deviceState:intentVerb:);
  }
  else {
    uint64_t v4 = CATButtonLabelTemplating.getYesAndCancelButtonTemplates(deviceState:intentVerb:);
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = TemplatingResult.print.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  OUTLINED_FUNCTION_1_27();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  swift_errorRelease(*(void *)(v1 + 96));
  OUTLINED_FUNCTION_1_27();
  swift_task_dealloc(v0);
  return (*(uint64_t (**)(_UNKNOWN **))(v1 + 8))(&outlined read-only object #0 of CATButtonLabelTemplating.getYesAndCancelButtonTemplates(deviceState:intentVerb:));
}

uint64_t outlined destroy of SpeakableString?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for CATButtonLabelTemplating()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin24CATButtonLabelTemplating);
}

uint64_t OUTLINED_FUNCTION_1_27()
{
  return swift_task_dealloc(*(void *)(v0 + 72));
}

uint64_t ModeInfoProvider.__allocating_init()()
{
  uint64_t v1 = swift_allocObject(v0, 24LL, 7LL);
  ModeInfoProvider.init()();
  return v1;
}

id ModeInfoProvider.init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_35();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_35();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_35();
  uint64_t v14 = v13 - v12;
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.background.getter();
  uint64_t v22 = _swiftEmptyArrayStorage;
  unint64_t v15 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  unint64_t v17 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v16, v17, v7, v15);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))( v6,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v2);
  uint64_t v18 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000027LL,  0x8000000000196200LL,  v14,  v10,  v6,  0LL);
  objc_allocWithZone(&OBJC_CLASS___AFNotifyObserver);
  id v19 = v18;
  id result = @nonobjc AFNotifyObserver.init(name:options:queue:delegate:)( 0xD000000000000021LL,  0x8000000000196230LL,  1LL,  v18,  0LL);
  if (result)
  {
    id v21 = result;

    *(void *)(v1 + 16) = v21;
    return (id)v1;
  }

  else
  {
    __break(1u);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }

  return result;
}

Swift::Bool __swiftcall ModeInfoProvider.isSilentMode()()
{
  return [*(id *)(v0 + 16) state] == 0;
}

uint64_t protocol witness for ModeInfoProviding.isSilentMode() in conformance ModeInfoProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96LL))() & 1;
}

id @nonobjc AFNotifyObserver.init(name:options:queue:delegate:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v6 = v5;
  if (a2)
  {
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v11 = 0LL;
  }

  id v12 = [v6 initWithName:v11 options:a3 queue:a4 delegate:a5];

  swift_unknownObjectRelease(a5);
  return v12;
}

uint64_t type metadata accessor for ModeInfoProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin16ModeInfoProvider);
}

id static LNSnippetEnvironment.make(from:localeIdentifier:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_52_6();
  id v8 = [a1 estimatedVisibleSnippetDisplaySize];
  if (!v8) {
    return 0LL;
  }
  uint64_t v9 = v8;
  double v10 = (double)(uint64_t)[v8 width];
  double v11 = (double)(uint64_t)[v9 height];
  __n128 v12 = swift_bridgeObjectRetain(a3);
  Locale.init(identifier:)(a2, a3, v12);
  uint64_t v13 = type metadata accessor for Locale(0LL);
  uint64_t v14 = __swift_storeEnumTagSinglePayload(v3, 0LL, 1LL, v13);
  uint64_t v15 = OUTLINED_FUNCTION_3_33(v14, (SEL *)&selRef_dynamicTypeSize);
  uint64_t v54 = static LNSnippetEnvironmentDynamicTypeSize.make(from:)(v15, v16);
  uint64_t v17 = OUTLINED_FUNCTION_1_2();
  uint64_t v18 = OUTLINED_FUNCTION_3_33(v17, (SEL *)&selRef_textLegibilityWeight);
  uint64_t v20 = v19;
  uint64_t v53 = static LNSnippetEnvironmentLegibilityWeight.make(from:)(v18, v19);
  uint64_t v21 = swift_bridgeObjectRelease(v20);
  uint64_t v22 = OUTLINED_FUNCTION_3_33(v21, (SEL *)&selRef_textDirection);
  uint64_t v24 = v23;
  uint64_t v25 = static LNSnippetEnvironmentLayoutDirection.make(from:)(v22, v23);
  uint64_t v26 = swift_bridgeObjectRelease(v24);
  uint64_t v27 = OUTLINED_FUNCTION_3_33(v26, (SEL *)&selRef_displayColorScheme);
  uint64_t v29 = v28;
  uint64_t v30 = static LNSnippetEnvironmentColorScheme.make(from:)(v27, v28);
  uint64_t v31 = swift_bridgeObjectRelease(v29);
  uint64_t v32 = OUTLINED_FUNCTION_3_33(v31, (SEL *)&selRef_displayContrast);
  uint64_t v34 = v33;
  uint64_t v35 = static LNSnippetEnvironmentColorSchemeContrast.make(from:)(v32, v33);
  swift_bridgeObjectRelease(v34);
  id v36 = [v9 scale];
  double v38 = v37;
  uint64_t v39 = OUTLINED_FUNCTION_3_33((uint64_t)v36, (SEL *)&selRef_displayGamut);
  uint64_t v41 = v40;
  uint64_t v42 = static LNSnippetEnvironmentDisplayGamut.make(from:)(v39, v40);
  uint64_t v43 = swift_bridgeObjectRelease(v41);
  id v44 = OUTLINED_FUNCTION_4(v43, "accessibilityDifferentiateWithoutColor");
  LOBYTE(v41) = (_BYTE)v44;
  id v45 = OUTLINED_FUNCTION_4((uint64_t)v44, "accessibilityInvertColors");
  char v46 = (char)v45;
  id v47 = OUTLINED_FUNCTION_4((uint64_t)v45, "accessibilityReduceMotion");
  char v48 = (char)v47;
  char v49 = OUTLINED_FUNCTION_4((uint64_t)v47, "accessibilityReduceTransparency");
  id v50 = objc_allocWithZone(&OBJC_CLASS___LNSnippetEnvironment);
  id v51 = @nonobjc LNSnippetEnvironment.init(size:locale:dynamicTypeSize:legibilityWeight:layoutDirection:colorScheme:colorSchemeContrast:displayScale:displayGamut:accessibilityDifferentiateWithoutColor:accessibilityInvertColors:accessibilityReduceMotion:accessibilityReduceTransparency:)( v3,  v54,  v53,  v25,  v30,  v35,  v42,  v41,  v10,  v11,  v38,  v46,  v48,  v49);

  return v51;
}

id static LNSnippetEnvironment.make(size:)(double a1, double a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_52_6();
  uint64_t v6 = type metadata accessor for Locale(0LL);
  __swift_storeEnumTagSinglePayload(v2, 1LL, 1LL, v6);
  id v7 = objc_allocWithZone(&OBJC_CLASS___LNSnippetEnvironment);
  return @nonobjc LNSnippetEnvironment.init(size:locale:dynamicTypeSize:legibilityWeight:layoutDirection:colorScheme:colorSchemeContrast:displayScale:displayGamut:accessibilityDifferentiateWithoutColor:accessibilityInvertColors:accessibilityReduceMotion:accessibilityReduceTransparency:)( v2,  -1LL,  -1LL,  -1LL,  -1LL,  -1LL,  -1LL,  0,  a1,  a2,  1.0,  0,  0,  0);
}

uint64_t static LNSnippetEnvironmentDynamicTypeSize.make(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v4 == a1 && v5 == a2)
    {
LABEL_124:
      OUTLINED_FUNCTION_37();
      return -1LL;
    }

    char v7 = OUTLINED_FUNCTION_0_30(v4);
    OUTLINED_FUNCTION_37();
    if ((v7 & 1) != 0) {
      return -1LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_37();
  }

  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v8 == a1 && v9 == a2)
    {
      OUTLINED_FUNCTION_37();
      return 1LL;
    }

    char v11 = OUTLINED_FUNCTION_0_30(v8);
    OUTLINED_FUNCTION_37();
    if ((v11 & 1) != 0) {
      return 1LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_37();
  }

  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v12 == a1 && v13 == a2)
    {
      OUTLINED_FUNCTION_37();
      return 2LL;
    }

    char v15 = OUTLINED_FUNCTION_0_30(v12);
    OUTLINED_FUNCTION_37();
    if ((v15 & 1) != 0) {
      return 2LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_37();
  }

  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v17 == a1 && v18 == a2)
    {
      OUTLINED_FUNCTION_37();
      return 0LL;
    }

    char v20 = OUTLINED_FUNCTION_0_30(v17);
    OUTLINED_FUNCTION_37();
    if ((v20 & 1) != 0) {
      return 0LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_37();
  }

  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v21 == a1 && v22 == a2)
    {
      OUTLINED_FUNCTION_37();
      return 3LL;
    }

    char v24 = OUTLINED_FUNCTION_0_30(v21);
    OUTLINED_FUNCTION_37();
    if ((v24 & 1) != 0) {
      return 3LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_37();
  }

  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v25 == a1 && v26 == a2)
    {
      OUTLINED_FUNCTION_37();
      return 4LL;
    }

    char v28 = OUTLINED_FUNCTION_0_30(v25);
    OUTLINED_FUNCTION_37();
    if ((v28 & 1) != 0) {
      return 4LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_37();
  }

  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v29 == a1 && v30 == a2)
    {
      OUTLINED_FUNCTION_37();
      return 5LL;
    }

    char v32 = OUTLINED_FUNCTION_0_30(v29);
    OUTLINED_FUNCTION_37();
    if ((v32 & 1) != 0) {
      return 5LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_37();
  }

  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v33 == a1 && v34 == a2)
    {
      OUTLINED_FUNCTION_37();
      return 6LL;
    }

    char v36 = OUTLINED_FUNCTION_0_30(v33);
    OUTLINED_FUNCTION_37();
    if ((v36 & 1) != 0) {
      return 6LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_37();
  }

  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v37 == a1 && v38 == a2)
    {
      OUTLINED_FUNCTION_37();
      return 7LL;
    }

    char v40 = OUTLINED_FUNCTION_0_30(v37);
    OUTLINED_FUNCTION_37();
    if ((v40 & 1) != 0) {
      return 7LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_37();
  }

  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v41 == a1 && v42 == a2)
    {
      OUTLINED_FUNCTION_37();
      return 8LL;
    }

    char v44 = OUTLINED_FUNCTION_0_30(v41);
    OUTLINED_FUNCTION_37();
    if ((v44 & 1) != 0) {
      return 8LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_37();
  }

  uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v45 == a1 && v46 == a2)
    {
      OUTLINED_FUNCTION_37();
      return 9LL;
    }

    char v48 = OUTLINED_FUNCTION_0_30(v45);
    OUTLINED_FUNCTION_37();
    if ((v48 & 1) != 0) {
      return 9LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_37();
  }

  uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v49 == a1 && v50 == a2)
    {
      OUTLINED_FUNCTION_37();
      return 10LL;
    }

    char v52 = OUTLINED_FUNCTION_0_30(v49);
    OUTLINED_FUNCTION_37();
    if ((v52 & 1) != 0) {
      return 10LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_37();
  }

  uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!a2) {
    goto LABEL_124;
  }
  if (v53 != a1 || v54 != a2)
  {
    char v56 = OUTLINED_FUNCTION_0_30(v53);
    OUTLINED_FUNCTION_37();
    if ((v56 & 1) != 0) {
      return 11LL;
    }
    return -1LL;
  }

  OUTLINED_FUNCTION_37();
  return 11LL;
}

uint64_t static LNSnippetEnvironmentLegibilityWeight.make(from:)(uint64_t a1, uint64_t a2)
{
  return static LNSnippetEnvironmentLegibilityWeight.make(from:)(a1, a2);
}

{
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v4 == a1 && v5 == a2)
    {
      uint64_t v12 = v5;
LABEL_28:
      swift_bridgeObjectRelease(v12);
      return -1LL;
    }

    char v7 = OUTLINED_FUNCTION_60(v4, v5);
    OUTLINED_FUNCTION_1_2();
    if ((v7 & 1) != 0) {
      return -1LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_1_2();
  }

  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v8 == a1 && v9 == a2)
    {
      OUTLINED_FUNCTION_22();
      return 0LL;
    }

    char v11 = OUTLINED_FUNCTION_60(v8, v9);
    OUTLINED_FUNCTION_22();
    if ((v11 & 1) != 0) {
      return 0LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_22();
  }

  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!a2)
  {
    uint64_t v12 = v14;
    goto LABEL_28;
  }

  if (v13 != a1 || v14 != a2)
  {
    uint64_t v16 = OUTLINED_FUNCTION_0_30(v13);
    OUTLINED_FUNCTION_37();
    if ((v16 & 1) != 0) {
      return 1LL;
    }
    return -1LL;
  }

  OUTLINED_FUNCTION_37();
  return 1LL;
}

uint64_t static LNSnippetEnvironmentLayoutDirection.make(from:)(uint64_t a1, uint64_t a2)
{
  return static LNSnippetEnvironmentLegibilityWeight.make(from:)(a1, a2);
}

uint64_t static LNSnippetEnvironmentColorScheme.make(from:)(uint64_t a1, uint64_t a2)
{
  return static LNSnippetEnvironmentLegibilityWeight.make(from:)(a1, a2);
}

uint64_t static LNSnippetEnvironmentColorSchemeContrast.make(from:)(uint64_t a1, uint64_t a2)
{
  return static LNSnippetEnvironmentLegibilityWeight.make(from:)(a1, a2);
}

uint64_t static LNSnippetEnvironmentDisplayGamut.make(from:)(uint64_t a1, uint64_t a2)
{
  return static LNSnippetEnvironmentLegibilityWeight.make(from:)(a1, a2);
}

id @nonobjc LNSnippetEnvironment.init(size:locale:dynamicTypeSize:legibilityWeight:layoutDirection:colorScheme:colorSchemeContrast:displayScale:displayGamut:accessibilityDifferentiateWithoutColor:accessibilityInvertColors:accessibilityReduceMotion:accessibilityReduceTransparency:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, double a9, double a10, double a11, char a12, char a13, char a14)
{
  uint64_t v22 = type metadata accessor for Locale(0LL);
  Class isa = 0LL;
  if (__swift_getEnumTagSinglePayload(a1, 1LL, v22) != 1)
  {
    Class isa = Locale._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8LL))(a1, v22);
  }

  BYTE3(v26) = a14 & 1;
  BYTE2(v26) = a13 & 1;
  BYTE1(v26) = a12 & 1;
  LOBYTE(v26) = a8 & 1;
  id v24 = objc_msgSend( v28,  "initWithSize:locale:dynamicTypeSize:legibilityWeight:layoutDirection:colorScheme:colorSchemeContrast:displaySc ale:displayGamut:accessibilityDifferentiateWithoutColor:accessibilityInvertColors:accessibilityReduceMotion:ac cessibilityReduceTransparency:",  isa,  a2,  a3,  a4,  a5,  a6,  a9,  a10,  a11,  a7,  v26);

  return v24;
}

uint64_t outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter( void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v4;
}

uint64_t OUTLINED_FUNCTION_0_30(uint64_t a1)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, v2, v1, 0LL);
}

uint64_t OUTLINED_FUNCTION_3_33(uint64_t a1, SEL *a2)
{
  return outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter(v2, a2);
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18SiriLinkFlowPlugin34WFChooseFromListDisambiguationItemVG_So13SFCardSectionCs5NeverOTg504_s18def51Plugin28WorkflowPhoneSnippetProviderC35cardSectionsik96Items33_4EECA0108B9B644B18340581AEC8AD2DLL014disambiguationM011appBundleId13utteranceViewSaySo13mn51CG_SaySo20SAClientBoundCommand_pGtSayAA08WFChoosek4j2L4L47VG_SSSo022SAUIAssistantUtteranceY0CSgtFAjOXEfU_SSAF0rstU0CSaySo20SAClientBoundCommand_pGTf1cn_n( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    char v28 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v6);
    uint64_t v9 = (void **)(a1 + 80);
    while (1)
    {
      double v10 = *(v9 - 5);
      uint64_t v11 = (uint64_t)*(v9 - 4);
      uint64_t v12 = (uint64_t)*(v9 - 3);
      uint64_t v13 = *(v9 - 2);
      uint64_t v14 = (uint64_t)*(v9 - 1);
      char v15 = *v9;
      v26[0] = (uint64_t)*(v9 - 6);
      v26[1] = (uint64_t)v10;
      v26[2] = v11;
      v26[3] = v12;
      void v26[4] = (uint64_t)v13;
      void v26[5] = v14;
      v26[6] = (uint64_t)v15;
      id v16 = v13;
      swift_bridgeObjectRetain(v14);
      id v17 = v15;
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v12);
      closure #1 in WorkflowPhoneSnippetProvider.cardSectionsFromDisambiguationItems(disambiguationItems:appBundleId:utteranceView:)( v26,  a2,  a3,  a4,  a5,  &v27);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v18 = swift_bridgeObjectRelease();
      if (v5) {
        break;
      }
      v9 += 7;
      uint64_t v19 = v27;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v18);
      uint64_t v20 = v28[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v20);
      uint64_t v21 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v19);
      specialized ContiguousArray._endMutation()(v21);
      if (!--v6)
      {
        double v10 = v28;
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }

    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }

  else
  {
    swift_bridgeObjectRelease();
    double v10 = _swiftEmptyArrayStorage;
LABEL_7:
    swift_release();
  }

  return v10;
}

uint64_t WorkflowPhoneSnippetProvider.buildIntentSnippet(intent:intentResponse:shortcutName:)( uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a2;
  return OUTLINED_FUNCTION_6_2((uint64_t)WorkflowPhoneSnippetProvider.buildIntentSnippet(intent:intentResponse:shortcutName:));
}

uint64_t WorkflowPhoneSnippetProvider.buildIntentSnippet(intent:intentResponse:shortcutName:)()
{
  uint64_t v1 = *(void **)(v0 + 24);
  if (!v1) {
    goto LABEL_7;
  }
  uint64_t v2 = *(void **)(v0 + 16);
  id v3 = v1;
  uint64_t v4 = outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(v2);
  if (!v5)
  {

LABEL_7:
    uint64_t v30 = 0LL;
    return OUTLINED_FUNCTION_3_34(v30, *(uint64_t (**)(void))(v0 + 8));
  }

  uint64_t v6 = v4;
  uint64_t v7 = v5;
  uint64_t v9 = *(void **)(v0 + 16);
  uint64_t v8 = *(void *)(v0 + 24);
  type metadata accessor for App(0LL);
  uint64_t v10 = App.__allocating_init(appIdentifier:)(v6, v7);
  OUTLINED_FUNCTION_72( v10,  (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent,  &OBJC_CLASS___SAIntentGroupLaunchAppWithIntent_ptr);
  id v11 = v3;
  uint64_t v12 = (void *)static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)(v10, v9, v8);

  id v13 = v12;
  uint64_t v14 = (void *)static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();
  char v36 = v13;

  char v15 = (void *)static CasinoFactory.makePlaceholderCardSection()();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v17 = OUTLINED_FUNCTION_23_4(v16);
  *(_OWORD *)(v17 + 16) = xmmword_17E150;
  *(void *)(v17 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v14;
  OUTLINED_FUNCTION_5_29(v17, v18, v19);
  id v37 = v14;
  outlined bridged method (mbnn) of @objc SFCardSection.commands.setter(v38);
  id v20 = [v9 _metadata];
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = *(void **)(v0 + 16);
    [v20 setExecutionContext:2];
    [v22 _setMetadata:v21];
  }

  uint64_t v24 = *(void *)(v0 + 16);
  uint64_t v23 = *(void *)(v0 + 24);
  OUTLINED_FUNCTION_72( (uint64_t)v20,  &lazy cache variable for type metadata for SACardSnippet,  &OBJC_CLASS___SACardSnippet_ptr);
  uint64_t v25 = OUTLINED_FUNCTION_23_4(v16);
  *(_OWORD *)(v25 + 16) = xmmword_17E150;
  *(void *)(v25 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v15;
  OUTLINED_FUNCTION_5_29(v25, v26, v27);
  id v28 = v11;
  id v29 = v15;
  uint64_t v30 = static SACardSnippet.makeFromCardSectionsWithIntentData(cardSections:intent:intentResponse:shouldGenerateAceId:)( v38,  v24,  v23);

  swift_bridgeObjectRelease();
  uint64_t v31 = OUTLINED_FUNCTION_23_4(v16);
  *(_OWORD *)(v31 + 16) = xmmword_17E150;
  *(void *)(v31 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v36;
  OUTLINED_FUNCTION_5_29(v31, v32, v33);
  id v34 = v36;
  outlined bridged method (mbnn) of @objc SACardSnippet.referencedCommands.setter();

  swift_release();
  return OUTLINED_FUNCTION_3_34(v30, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t WorkflowPhoneSnippetProvider.makeDisambiguationViews(disambiguationItems:shortcutName:appBundleId:utteranceViews:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v7[5] = a6;
  v7[6] = v6;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)WorkflowPhoneSnippetProvider.makeDisambiguationViews(disambiguationItems:shortcutName:appBundleId:utteranceViews:));
}

uint64_t WorkflowPhoneSnippetProvider.makeDisambiguationViews(disambiguationItems:shortcutName:appBundleId:utteranceViews:)()
{
  uint64_t v1 = *(void *)(v0 + 40);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v17 = *(void *)(v0 + 40);
    }
    else {
      uint64_t v17 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*(void *)(v0 + 40));
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v17);
  }

  else
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain(*(void *)(v0 + 40));
  }

  if (v2)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, (v1 & 0xC000000000000001LL) == 0);
    if ((v1 & 0xC000000000000001LL) != 0) {
      id v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, *(void *)(v0 + 40));
    }
    else {
      id v3 = *(id *)(*(void *)(v0 + 40) + 32LL);
    }
    OUTLINED_FUNCTION_20();
  }

  else
  {
    swift_bridgeObjectRelease();
    id v3 = 0LL;
  }

  uint64_t v4 = *(void *)(v0 + 40);
  unint64_t v5 = WorkflowPhoneSnippetProvider.cardSectionsFromDisambiguationItems(disambiguationItems:appBundleId:utteranceView:)( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  v3);

  OUTLINED_FUNCTION_72(v6, &lazy cache variable for type metadata for SACardSnippet, &OBJC_CLASS___SACardSnippet_ptr);
  uint64_t v7 = (void *)static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:)(v5, 1LL);
  swift_bridgeObjectRelease();
  outlined bridged method (mbnn) of @objc SACardSnippet.referencedCommands.setter();
  OUTLINED_FUNCTION_72( v8,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
  id v9 = v7;
  Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  OUTLINED_FUNCTION_48_7((uint64_t)isa, "setListenAfterSpeaking:");

  [v9 setCanUseServerTTS:0];
  id v11 = static CustomIntentPlatformSpecificSnippets.makeDialogFromUtteranceView(utteranceViews:)(v4);
  if (v11)
  {
    uint64_t v12 = v11;
    OUTLINED_FUNCTION_48_7((uint64_t)v11, "setDialog:");
  }

  uint64_t v13 = *(void *)(v0 + 48);
  type metadata accessor for SiriKitAceViewBuilder(0LL);
  dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)(v13 + 16);
  dispatch thunk of SiriKitAceViewBuilder.addSnippet(snippet:)(v9);
  uint64_t v14 = swift_release();
  uint64_t v15 = dispatch thunk of SiriKitAceViewBuilder.build()(v14);
  swift_release();

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v15);
}

uint64_t WorkflowPhoneSnippetProvider.makeSnippetForShowAlert(dialogRequest:appBundleId:shortcutName:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)WorkflowPhoneSnippetProvider.makeSnippetForShowAlert(dialogRequest:appBundleId:shortcutName:));
}

uint64_t WorkflowPhoneSnippetProvider.makeSnippetForShowAlert(dialogRequest:appBundleId:shortcutName:)()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = [objc_allocWithZone(SAAppsLaunchApp) init];
  outlined bridged method (mbgnn) of @objc SAAppsLaunchApp.launchId.setter();
  id v3 = v2;
  uint64_t v4 = (void *)static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();

  outlined bridged method (pb) of @objc WFShowAlertDialogRequest.message.getter(v1);
  LOWORD(v2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 257;
  OUTLINED_FUNCTION_6_30();
  id v11 = (void *)static CasinoFactory.makeRowCardSection(possibleTitle:possibleLeadingSubtitle:possibleTrailingSubtitle:possibleImage:possibleMonogramLetters:possibleContactIdentifiers:possibleImageUri:maxLines:shouldCropToCircle:shouldUseDefaultImageSize:)( v5,  v6,  v7,  v8,  v9,  v10);
  OUTLINED_FUNCTION_20();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v13 = OUTLINED_FUNCTION_23_4(v12);
  *(_OWORD *)(v13 + 16) = xmmword_17E150;
  *(void *)(v13 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v4;
  OUTLINED_FUNCTION_8_32(v13, v14, v15);
  id v16 = v4;
  outlined bridged method (mbnn) of @objc SFCardSection.commands.setter(v25);
  id v17 = objc_msgSend(objc_allocWithZone(INStartCallIntent), "init", 0, 0, 0, 0, 1, v24);
  OUTLINED_FUNCTION_72( (uint64_t)v17,  &lazy cache variable for type metadata for SACardSnippet,  &OBJC_CLASS___SACardSnippet_ptr);
  uint64_t v18 = OUTLINED_FUNCTION_23_4(v12);
  *(_OWORD *)(v18 + 16) = xmmword_17E150;
  *(void *)(v18 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v11;
  OUTLINED_FUNCTION_8_32(v18, v19, v20);
  id v21 = v11;
  uint64_t v22 = static SACardSnippet.makeFromCardSectionsWithIntentData(cardSections:intent:intentResponse:shouldGenerateAceId:)( v25,  v17,  0LL);

  swift_bridgeObjectRelease();
  return OUTLINED_FUNCTION_3_34(v22, *(uint64_t (**)(void))(v0 + 8));
}

Swift::Bool __swiftcall WorkflowPhoneSnippetProvider.shouldShowSnippet(intent:)(INIntent intent)
{
  return INIntent.showsWhenRun.getter() & 1;
}

unint64_t WorkflowPhoneSnippetProvider.cardSectionsFromDisambiguationItems(disambiguationItems:appBundleId:utteranceView:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for ImageSize(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = &v32[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  unint64_t v33 = (unint64_t)_swiftEmptyArrayStorage;
  id v34 = _swiftEmptyArrayStorage;
  if (a4)
  {
    id v14 = a4;
    outlined bridged method (pb) of @objc SAUIAssistantUtteranceView.text.getter(v14);
    (*(void (**)(_BYTE *, void, uint64_t))(v11 + 104))(v13, enum case for ImageSize.original(_:), v10);
    OUTLINED_FUNCTION_6_30();
    uint64_t v23 = (void *)static CasinoFactory.makeRowCardSection(possibleTitle:imageSize:possibleLeadingSubtitle:possibleTrailingSubtitle:possibleImage:possibleMonogramLetters:possibleContactIdentifiers:possibleImageUri:maxLines:shouldCropToCircle:)( v15,  v16,  v17,  v18,  v19,  v20,  v21,  v22);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
    id v24 = v23;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v24);
    unint64_t v26 = *(void *)((char *)&dword_10 + (v33 & 0xFFFFFFFFFFFFFF8LL));
    unint64_t v25 = *(void *)((char *)&dword_18 + (v33 & 0xFFFFFFFFFFFFFF8LL));
    if (v26 >= v25 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1LL);
    }
    uint64_t v27 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v26, v24);
    specialized Array._endMutation()(v27, v28, v29);
  }

  swift_bridgeObjectRetain(a3);
  swift_retain(v5);
  uint64_t v30 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18SiriLinkFlowPlugin34WFChooseFromListDisambiguationItemVG_So13SFCardSectionCs5NeverOTg504_s18def51Plugin28WorkflowPhoneSnippetProviderC35cardSectionsik96Items33_4EECA0108B9B644B18340581AEC8AD2DLL014disambiguationM011appBundleId13utteranceViewSaySo13mn51CG_SaySo20SAClientBoundCommand_pGtSayAA08WFChoosek4j2L4L47VG_SSSo022SAUIAssistantUtteranceY0CSgtFAjOXEfU_SSAF0rstU0CSaySo20SAClientBoundCommand_pGTf1cn_n( a1,  a2,  a3,  v5,  &v34);
  specialized Array.append<A>(contentsOf:)((uint64_t)v30);
  return v33;
}

void closure #1 in WorkflowPhoneSnippetProvider.cardSectionsFromDisambiguationItems(disambiguationItems:appBundleId:utteranceView:)( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, uint64_t *a6@<X8>)
{
  id v51 = a6;
  uint64_t v49 = a3;
  uint64_t v50 = a5;
  uint64_t v48 = a2;
  uint64_t v8 = type metadata accessor for ImageSize(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *a1;
  uint64_t v13 = (void *)a1[1];
  uint64_t v15 = a1[2];
  uint64_t v14 = a1[3];
  uint64_t v47 = a1[4];
  type metadata accessor for CATSpeakableString();
  swift_bridgeObjectRetain(v13);
  uint64_t v46 = v12;
  uint64_t v45 = static CATSpeakableString.stripTTSHint(print:)();
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for ImageSize.default(_:), v8);
  if (v14)
  {
    swift_bridgeObjectRetain(v14);
    uint64_t v15 = static CATSpeakableString.stripTTSHint(print:)();
    uint64_t v19 = v18;
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v19 = 0LL;
  }

  uint64_t v47 = static CasinoFactory.makeRowCardSection(possibleTitle:imageSize:possibleLeadingSubtitle:possibleTrailingSubtitle:possibleImage:possibleMonogramLetters:possibleContactIdentifiers:possibleImageUri:maxLines:shouldCropToCircle:)( v45,  v17,  v11,  v15,  v19,  0LL,  0LL,  v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  id v20 = static SLFDisambiguationItemConverter.toDirectInvocationPayload(title:)(v46, v13);
  uint64_t v21 = a4[5];
  uint64_t v22 = a4[6];
  __swift_project_boxed_opaque_existential_1(a4 + 2, v21);
  uint64_t v23 = (void *)DeviceState.asInvocationContext.getter(v21, v22);
  [v23 setInputOrigin:SAInputOriginDialogButtonTapValue];
  id v24 = (void *)objc_opt_self(&OBJC_CLASS___SKIDirectInvocation);
  id v25 = [v24 runSiriKitExecutorCommandWithContext:v23 payload:v20];
  id v26 = [objc_allocWithZone(SAIntentGroupSiriKitAppSelectionState) init];
  id v27 = [objc_allocWithZone(SASyncAppIdentifyingInfo) init];
  NSString v28 = String._bridgeToObjectiveC()();
  [v27 setBundleId:v28];

  [v26 setRequestedApp:v27];
  [v25 setAppSelectionState:v26];

  id v29 = [v24 wrapCommandInStartLocalRequest:v25];
  id v30 = v29;
  uint64_t v31 = (void *)static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();

  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v33 = swift_allocObject(v32, 40LL, 7LL);
  *(_OWORD *)(v33 + 16) = xmmword_17E150;
  *(void *)(v33 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v31;
  uint64_t v52 = v33;
  specialized Array._endMutation()(v33, v34, v35);
  uint64_t v36 = v52;
  id v37 = v31;
  uint64_t v38 = v47;
  outlined bridged method (mbnn) of @objc SFCardSection.commands.setter(v36);
  id v39 = v30;
  char v40 = v50;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v39);
  uint64_t v41 = *(void *)((char *)&dword_10 + (*v40 & 0xFFFFFFFFFFFFF8LL));
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v41);
  uint64_t v42 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v41, v39);
  specialized Array._endMutation()(v42, v43, v44);

  *id v51 = v38;
}

void outlined bridged method (mbnn) of @objc SFCardSection.commands.setter(uint64_t a1)
{
  Class isa = OUTLINED_FUNCTION_11_22().super.isa;
  int v1 = OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_9_29(v1, "setCommands:", v2, v3, v4, v5, v6, v7, v8, (uint64_t)isa);
  OUTLINED_FUNCTION_5_15(v10);
}

void outlined bridged method (mbnn) of @objc SACardSnippet.referencedCommands.setter()
{
  Class isa = OUTLINED_FUNCTION_11_22().super.isa;
  int v0 = OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_9_29(v0, "setReferencedCommands:", v1, v2, v3, v4, v5, v6, v7, (uint64_t)isa);
  OUTLINED_FUNCTION_5_15(v9);
}

uint64_t type metadata accessor for WorkflowPhoneSnippetProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin28WorkflowPhoneSnippetProvider);
}

uint64_t OUTLINED_FUNCTION_3_34(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_5_29(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Array._endMutation()(a1, a2, a3);
}

  ;
}

uint64_t OUTLINED_FUNCTION_8_32(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Array._endMutation()(a1, a2, a3);
}

id OUTLINED_FUNCTION_9_29( int a1, const char *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  return objc_msgSend(v10, a2, a10);
}

NSArray OUTLINED_FUNCTION_11_22()
{
  return Array._bridgeToObjectiveC()();
}

uint64_t RFFeatureFlags.ResponseFramework.isEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once(&one-time initialization token for forceEnabled, one-time initialization function for forceEnabled);
  }
  OUTLINED_FUNCTION_30_12((uint64_t)&static RFFeatureFlags.ResponseFramework.forceEnabled, (uint64_t)v11, 32LL);
  uint64_t v1 = specialized Dictionary.subscript.getter(v0, static RFFeatureFlags.ResponseFramework.forceEnabled);
  if (v1 == 2)
  {
    OUTLINED_FUNCTION_56_10(v1);
    uint64_t v2 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
    v11[3] = v2;
    v11[4] = lazy protocol witness table accessor for type RFFeatureFlags.ResponseFramework and conformance RFFeatureFlags.ResponseFramework( &lazy protocol witness table cache variable for type RFFeatureFlags.ResponseFramework and conformance RFFeatureFlags.ResponseFramework,  (uint64_t)&protocol conformance descriptor for RFFeatureFlags.ResponseFramework);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))( boxed_opaque_existential_1,  v0,  v2);
    char v4 = isFeatureEnabled(_:)(v11);
    __swift_destroy_boxed_opaque_existential_1Tm(v11);
  }

  else
  {
    char v4 = v1 & 1;
    OUTLINED_FUNCTION_56_10(v1);
  }

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = __swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)id v9 = 67109120;
    LODWORD(v11[0]) = v4 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v11, (char *)v11 + 4, v9 + 4);
    _os_log_impl(&dword_0, v7, v8, "RFFeatureFlags.ResponseFramework - isRFv2: %{BOOL}d", v9, 8u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  return v4 & 1;
}

void one-time initialization function for forceEnabled()
{
  static RFFeatureFlags.ResponseFramework.forceEnabled = (uint64_t)&_swiftEmptyDictionarySingleton;
}

{
  static SiriLinkFlowFeatureFlags.forceEnabled = (uint64_t)&_swiftEmptyDictionarySingleton;
}

uint64_t *RFFeatureFlags.ResponseFramework.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once(&one-time initialization token for forceEnabled, one-time initialization function for forceEnabled);
  }
  return &static RFFeatureFlags.ResponseFramework.forceEnabled;
}

double static RFFeatureFlags.ResponseFramework.forceEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once(&one-time initialization token for forceEnabled, one-time initialization function for forceEnabled);
  }
  OUTLINED_FUNCTION_30_12((uint64_t)&static RFFeatureFlags.ResponseFramework.forceEnabled, (uint64_t)v1, 0LL);
  *(void *)&double result = swift_bridgeObjectRetain(static RFFeatureFlags.ResponseFramework.forceEnabled).n128_u64[0];
  return result;
}

uint64_t static RFFeatureFlags.ResponseFramework.forceEnabled.setter(uint64_t a1)
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once(&one-time initialization token for forceEnabled, one-time initialization function for forceEnabled);
  }
  OUTLINED_FUNCTION_30_12((uint64_t)&static RFFeatureFlags.ResponseFramework.forceEnabled, (uint64_t)v3, 1LL);
  static RFFeatureFlags.ResponseFramework.forceEnabled = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static RFFeatureFlags.ResponseFramework.forceEnabled.modify(uint64_t a1))()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once(&one-time initialization token for forceEnabled, one-time initialization function for forceEnabled);
  }
  OUTLINED_FUNCTION_30_12((uint64_t)&static RFFeatureFlags.ResponseFramework.forceEnabled, a1, 33LL);
  return static LocaleUtils.intentBundleCache.modify;
}

uint64_t RFFeatureFlags.ResponseFramework.withForcedEnabled<A>(_:block:)( char a1, void (*a2)(uint64_t))
{
  uint64_t v3 = v2;
  if (one-time initialization token for forceEnabled != -1) {
    swift_once(&one-time initialization token for forceEnabled, one-time initialization function for forceEnabled);
  }
  swift_beginAccess(&static RFFeatureFlags.ResponseFramework.forceEnabled, v9, 32LL, 0LL);
  char v6 = specialized Dictionary.subscript.getter(v3, static RFFeatureFlags.ResponseFramework.forceEnabled);
  swift_endAccess(v9);
  swift_beginAccess(&static RFFeatureFlags.ResponseFramework.forceEnabled, v9, 33LL, 0LL);
  specialized Dictionary._Variant.setValue(_:forKey:)(a1 & 1, v3);
  uint64_t v7 = swift_endAccess(v9);
  a2(v7);
  return $defer #1 <A>() in RFFeatureFlags.ResponseFramework.withForcedEnabled<A>(_:block:)(v3, v6);
}

uint64_t RFFeatureFlags.ResponseFramework.withForcedEnabled<A>(_:block:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 80) = a4;
  *(void *)(v5 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v4;
  *(_BYTE *)(v5 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a2;
  *(void *)(v5 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a1;
  *(void *)(v5 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a3;
  return swift_task_switch(RFFeatureFlags.ResponseFramework.withForcedEnabled<A>(_:block:), 0LL, 0LL);
}

uint64_t RFFeatureFlags.ResponseFramework.withForcedEnabled<A>(_:block:)()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once(&one-time initialization token for forceEnabled, one-time initialization function for forceEnabled);
  }
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(int **)(v0 + 72);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 112);
  OUTLINED_FUNCTION_30_12((uint64_t)&static RFFeatureFlags.ResponseFramework.forceEnabled, v0 + 16, 32LL);
  *(_BYTE *)(v0 + 1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 13) = specialized Dictionary.subscript.getter( v1,  static RFFeatureFlags.ResponseFramework.forceEnabled);
  swift_endAccess(v0 + 16);
  OUTLINED_FUNCTION_30_12((uint64_t)&static RFFeatureFlags.ResponseFramework.forceEnabled, v0 + 40, 33LL);
  specialized Dictionary._Variant.setValue(_:forKey:)(v3, v1);
  swift_endAccess(v0 + 40);
  char v6 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v4 = (void *)swift_task_alloc(v2[1]);
  *(void *)(v0 + 96) = v4;
  void *v4 = v0;
  v4[1] = RFFeatureFlags.ResponseFramework.withForcedEnabled<A>(_:block:);
  return v6(*(void *)(v0 + 64));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v2 = *(void *)(*(void *)v1 + 96LL);
  *(void *)(*(void *)v1 + 104LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = RFFeatureFlags.ResponseFramework.withForcedEnabled<A>(_:block:);
  }
  else {
    uint64_t v3 = RFFeatureFlags.ResponseFramework.withForcedEnabled<A>(_:block:);
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_10_25();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_10_25();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t $defer #1 <A>() in RFFeatureFlags.ResponseFramework.withForcedEnabled<A>(_:block:)( uint64_t a1, char a2)
{
  if (a2 == 2)
  {
    if (one-time initialization token for forceEnabled != -1) {
      swift_once(&one-time initialization token for forceEnabled, one-time initialization function for forceEnabled);
    }
    OUTLINED_FUNCTION_30_12((uint64_t)&static RFFeatureFlags.ResponseFramework.forceEnabled, (uint64_t)v6, 33LL);
    uint64_t v4 = specialized Dictionary._Variant.removeValue(forKey:)(a1);
  }

  else
  {
    if (one-time initialization token for forceEnabled != -1) {
      swift_once(&one-time initialization token for forceEnabled, one-time initialization function for forceEnabled);
    }
    OUTLINED_FUNCTION_30_12((uint64_t)&static RFFeatureFlags.ResponseFramework.forceEnabled, (uint64_t)v6, 33LL);
    uint64_t v4 = specialized Dictionary._Variant.setValue(_:forKey:)(a2 & 1, a1);
  }

  return OUTLINED_FUNCTION_56_10(v4);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)( uint64_t (*a1)(void))
{
  return OUTLINED_FUNCTION_12_24(a1) & 1;
}

{
  return OUTLINED_FUNCTION_12_24(a1);
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int32)@<X0>( uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = OUTLINED_FUNCTION_12_24(a1);
  *a2 = result;
  return result;
}

void specialized Dictionary._Variant.removeValue(forKey:)()
{
  if ((v1 & 1) != 0)
  {
    swift_isUniquelyReferenced_nonNull_native(*v0);
    OUTLINED_FUNCTION_4_28();
    int v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
    BOOL v12 = OUTLINED_FUNCTION_3_35(v4, v5, v6, v7, v8, v9, v10, v11, v21, v23);
    OUTLINED_FUNCTION_6_31(v12, v13, v14, v15, v16, v17, v18, v19, v22, v24);
    outlined init with take of Any((_OWORD *)(*(void *)(v1 + 56) + 32 * v3), v2);
    OUTLINED_FUNCTION_11_23();
    uint64_t v20 = *v0;
    *uint64_t v0 = v1;
    swift_bridgeObjectRelease(v20);
  }

  else
  {
    *uint64_t v2 = 0u;
    v2[1] = 0u;
    OUTLINED_FUNCTION_5_30();
  }

{
  void *v0;
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  OUTLINED_FUNCTION_1_28();
  OUTLINED_FUNCTION_8_33();
  OUTLINED_FUNCTION_7_25();
  if ((v1 & 1) != 0)
  {
    swift_isUniquelyReferenced_nonNull_native(*v0);
    OUTLINED_FUNCTION_4_28();
    int v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Data>);
    BOOL v12 = OUTLINED_FUNCTION_3_35(v4, v5, v6, v7, v8, v9, v10, v11, v20, v22);
    OUTLINED_FUNCTION_6_31(v12, v13, v14, v15, v16, v17, v18, v19, v21, v23);
    *uint64_t v2 = *(_OWORD *)(*(void *)(v1 + 56) + 16 * v3);
    OUTLINED_FUNCTION_11_23();
    *uint64_t v0 = v1;
    swift_bridgeObjectRelease();
  }

  else
  {
    *uint64_t v2 = xmmword_1830D0;
  }

  OUTLINED_FUNCTION_5_30();
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain(*v2);
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 2LL;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v13 = *v2;
  uint64_t v7 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  Swift::Int v8 = *(void *)(v7 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<RFFeatureFlags.ResponseFramework, Bool>);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8);
  uint64_t v9 = *(void *)(v13 + 48);
  uint64_t v10 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))( v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * v4,  v10);
  uint64_t v11 = *(unsigned __int8 *)(*(void *)(v13 + 56) + v4);
  lazy protocol witness table accessor for type RFFeatureFlags.ResponseFramework and conformance RFFeatureFlags.ResponseFramework( &lazy protocol witness table cache variable for type RFFeatureFlags.ResponseFramework and conformance RFFeatureFlags.ResponseFramework,  (uint64_t)&protocol conformance descriptor for RFFeatureFlags.ResponseFramework);
  _NativeDictionary._delete(at:)(v4, v13);
  *uint64_t v2 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t lazy protocol witness table accessor for type RFFeatureFlags.ResponseFramework and conformance RFFeatureFlags.ResponseFramework( unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for RFFeatureFlags.ResponseFramework(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_1_28()
{
  return swift_bridgeObjectRetain(*v0);
}

BOOL OUTLINED_FUNCTION_3_35( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

void OUTLINED_FUNCTION_4_28()
{
  *uint64_t v0 = 0x8000000000000000LL;
}

  ;
}

uint64_t OUTLINED_FUNCTION_6_31( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_bridgeObjectRelease(*(void *)(*(void *)(a10 + 48) + 16 * v10 + 8));
}

uint64_t OUTLINED_FUNCTION_7_25()
{
  return swift_bridgeObjectRelease(v0);
}

unint64_t OUTLINED_FUNCTION_8_33()
{
  return specialized __RawDictionaryStorage.find<A>(_:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_10_25()
{
  return $defer #1 <A>() in RFFeatureFlags.ResponseFramework.withForcedEnabled<A>(_:block:)( *(void *)(v0 + 88),  *(_BYTE *)(v0 + 113));
}

uint64_t OUTLINED_FUNCTION_11_23()
{
  return _NativeDictionary._delete(at:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_12_24(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t WFShowAlertFlow.exitValue.getter()
{
  uint64_t v1 = *(void **)(v0 + 120);
  int v2 = *(unsigned __int8 *)(v0 + 128);
  if (v2 == 2)
  {
    swift_errorRetain(*(void *)(v0 + 120));
  }

  else if (v2 == 1)
  {
    id v3 = v1;
  }

  else
  {
    unint64_t v4 = lazy protocol witness table accessor for type WFShowAlertFlowError and conformance WFShowAlertFlowError();
    return swift_allocError(&type metadata for WFShowAlertFlowError, v4, 0LL, 0LL);
  }

  return (uint64_t)v1;
}

uint64_t WFShowAlertFlow.__allocating_init(shortcutName:request:appBundleId:dialogTemplating:deviceState:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v15 = OUTLINED_FUNCTION_19(v7, 129LL);
  WFShowAlertFlow.init(shortcutName:request:appBundleId:dialogTemplating:deviceState:)(a1, a2, a3, a4, a5, a6, a7);
  return v15;
}

os_log_s *WFShowAlertFlow.init(shortcutName:request:appBundleId:dialogTemplating:deviceState:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  Swift::Int v8 = v7;
  uint64_t v15 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_35();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v16 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v16, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v17 = OUTLINED_FUNCTION_58();
  if (os_log_type_enabled(v7, v17))
  {
    uint64_t v42 = a2;
    uint64_t v18 = a4;
    uint64_t v19 = a5;
    uint64_t v20 = a3;
    uint64_t v21 = a7;
    uint64_t v22 = a6;
    char v23 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    *(_WORD *)char v23 = 0;
    OUTLINED_FUNCTION_47_1(&dword_0, v7, v17, "#WFShowAlertFlow initialized.", v23);
    uint64_t v24 = (uint64_t)v23;
    a6 = v22;
    a7 = v21;
    a3 = v20;
    a5 = v19;
    a4 = v18;
    a2 = v42;
    OUTLINED_FUNCTION_1_0(v24);
  }

  *((void *)v7 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a1;
  *((void *)v7 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 3) = a2;
  *((void *)v7 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a3;
  *((void *)v7 + 5) = a4;
  *((void *)v7 + 6) = a5;
  outlined init with copy of DeviceState((uint64_t)a7, (uint64_t)v7 + 56);
  outlined init with copy of DeviceState((uint64_t)a7, (uint64_t)v46);
  if (a6)
  {
    swift_retain(a6);
    id v25 = a3;
    __swift_destroy_boxed_opaque_existential_1Tm(v46);
    uint64_t v26 = a6;
  }

  else
  {
    outlined init with copy of DeviceState((uint64_t)v46, (uint64_t)v45);
    uint64_t v27 = one-time initialization token for shared;
    NSString v28 = a3;
    id v29 = a3;
    if (v27 != -1) {
      swift_once(&one-time initialization token for shared, one-time initialization function for shared);
    }
    uint64_t v30 = static WFDialogState.shared;
    type metadata accessor for WorkflowRunnerCATs(0LL);
    uint64_t v31 = swift_retain(v30);
    static CATOption.defaultMode.getter(v31);
    uint64_t v43 = OUTLINED_FUNCTION_19_7();
    type metadata accessor for WorkflowRunnerCATsSimple(0LL);
    OUTLINED_FUNCTION_5_8();
    uint64_t v41 = OUTLINED_FUNCTION_20_13();
    type metadata accessor for RunCustomIntentCATs(0LL);
    OUTLINED_FUNCTION_5_8();
    uint64_t v32 = OUTLINED_FUNCTION_19_7();
    type metadata accessor for RunCustomIntentCATsSimple(0LL);
    OUTLINED_FUNCTION_5_8();
    uint64_t v33 = OUTLINED_FUNCTION_20_13();
    type metadata accessor for RunVoiceCommandCATs(0LL);
    OUTLINED_FUNCTION_5_8();
    uint64_t v34 = OUTLINED_FUNCTION_19_7();
    type metadata accessor for RunVoiceCommandCATsSimple(0LL);
    OUTLINED_FUNCTION_5_8();
    uint64_t v35 = OUTLINED_FUNCTION_20_13();
    type metadata accessor for WorkflowRunnerCATPatternsExecutor(0LL);
    OUTLINED_FUNCTION_5_8();
    uint64_t v36 = OUTLINED_FUNCTION_19_7();
    __swift_destroy_boxed_opaque_existential_1Tm(v46);
    uint64_t v37 = type metadata accessor for WorkflowDialogTemplating();
    OUTLINED_FUNCTION_19(v37, 120LL);
    WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)( (uint64_t)v45,  v30,  v43,  v41,  v32,  v33,  v34,  v35,  v36);
    a3 = v28;
  }

  *((void *)v8 + 1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v26;
  type metadata accessor for WorkflowSnippetProvider();
  uint64_t v38 = static WorkflowSnippetProvider.getSnippetProvider(deviceState:)(a7);

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a7);
  *((void *)v8 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 13) = v38;
  uint64_t v39 = type metadata accessor for WorkflowNLContextProvider();
  *((void *)v8 + 1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = OUTLINED_FUNCTION_19(v39, 16LL);
  *((void *)v8 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 15) = 0LL;
  *((_BYTE *)v8 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 3;
  return v8;
}

uint64_t WFShowAlertFlow.on(input:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Parse(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_35();
  uint64_t v39 = v7 - v6;
  uint64_t v8 = type metadata accessor for Input(0LL);
  unint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_35();
  uint64_t v12 = v11 - v10;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v13 = OUTLINED_FUNCTION_48();
  os_log_type_t v14 = __swift_project_value_buffer(v13, (uint64_t)static Logger.voiceCommands);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  os_log_type_t v40 = v14;
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  uint64_t v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v37 = v5;
    uint64_t v19 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v38 = v2;
    uint64_t v20 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v42 = v20;
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v21 = Input.description.getter();
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v19 + 4);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_60_13();
    _os_log_impl(&dword_0, v16, (os_log_type_t)v18, "#WFShowAlertFlow received input: %s", v19, 0xCu);
    swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v23 = v20;
    uint64_t v2 = v38;
    OUTLINED_FUNCTION_1_0(v23);
    uint64_t v24 = (uint64_t)v19;
    uint64_t v5 = v37;
    OUTLINED_FUNCTION_1_0(v24);
  }

  else
  {
    OUTLINED_FUNCTION_60_13();
  }

  if (*(_BYTE *)(v2 + 128) != 3 || *(void *)(v2 + 120) != 1LL)
  {
    Logger.logObject.getter(v25);
    os_log_type_t v27 = OUTLINED_FUNCTION_164();
    if (OUTLINED_FUNCTION_40(v27))
    {
      NSString v28 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_26_1(v28);
      id v29 = "#WFShowAlertFlow on input, state is not waitingForResponse";
LABEL_15:
      OUTLINED_FUNCTION_8_34(&dword_0, (os_log_s *)v9, v14, v29);
      OUTLINED_FUNCTION_1_0(v18);
      goto LABEL_16;
    }

    goto LABEL_16;
  }

  uint64_t v18 = v39;
  Input.parse.getter(v25);
  unsigned __int8 v30 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)(v39);
  unint64_t v9 = v30;
  uint64_t v31 = OUTLINED_FUNCTION_48_12(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  if (v30 == 3)
  {
    os_log_type_t v14 = v40;
    Logger.logObject.getter(v31);
    os_log_type_t v32 = OUTLINED_FUNCTION_164();
    if (OUTLINED_FUNCTION_40(v32))
    {
      uint64_t v33 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_26_1(v33);
      id v29 = "#WFShowAlertFlow on input, no confirmation state";
      goto LABEL_15;
    }

LABEL_16:
    return 0LL;
  }

  uint64_t v35 = *(void **)(v2 + 120);
  *(void *)(v2 + 120) = v30;
  char v36 = *(_BYTE *)(v2 + 128);
  *(_BYTE *)(v2 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0;
  outlined consume of WFShowAlertFlow.State(v35, v36);
  return 1LL;
}

    unint64_t v9 = (v16 - 1) & v16;
  }

uint64_t WFShowAlertFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a1;
  *(void *)(v2 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v1;
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v3, v4, v5);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  static OutputPublisherFactory.makeOutputPublisherAsync()(v1 + 7, a1);
  uint64_t v2 = v1[10];
  uint64_t v3 = v1[11];
  __swift_project_boxed_opaque_existential_1(v1 + 7, v2);
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  v1[18] = v4;
  void *v4 = v1;
  v4[1] = WFShowAlertFlow.execute();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v1 + 2, v2, v3);
}

{
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v3 = *(void *)(v2 + 136);
  uint64_t v4 = *(os_log_s **)(v2 + 120);
  Logger.logObject.getter(a1);
  uint64_t v5 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_31_0(v5))
  {
    uint64_t v6 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    *(_WORD *)uint64_t v6 = 0;
    OUTLINED_FUNCTION_47_1(&dword_0, v4, v1, "#WFShowAlertFlow error submitting output", v6);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
  }

  OUTLINED_FUNCTION_27_22();
  OUTLINED_FUNCTION_53_17();
  swift_errorRelease(v3);
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t WFShowAlertFlow.execute()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22)
{
  a21 = v23;
  a22 = v24;
  a20 = v22;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v25 = (os_log_s *)v22[14];
  uint64_t v26 = OUTLINED_FUNCTION_48();
  v22[15] = __swift_project_value_buffer(v26, (uint64_t)static Logger.voiceCommands);
  uint64_t v27 = swift_retain_n(v25, 2LL);
  Logger.logObject.getter(v27);
  os_log_type_t v28 = OUTLINED_FUNCTION_164();
  BOOL v29 = os_log_type_enabled(v25, v28);
  uint64_t v30 = v22[14];
  if (v29)
  {
    uint64_t v31 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v32 = OUTLINED_FUNCTION_38(32LL);
    a11 = v32;
    *(_DWORD *)uint64_t v31 = 136315138;
    id v33 = [*(id *)(v30 + 32) message];
    a10 = v32;
    if (v33)
    {
      uint64_t v34 = v33;
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v37 = v36;
    }

    else
    {
      unint64_t v37 = 0xE500000000000000LL;
      uint64_t v35 = 0x7974706D65LL;
    }

    uint64_t v38 = v22[14];
    v22[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v22 + 12, v22 + 13, v31 + 4);
    swift_bridgeObjectRelease();
    swift_release_n(v38, 2LL);
    _os_log_impl(&dword_0, v25, v28, "#WFShowAlertFlow begins execution, message: %s", v31, 0xCu);
    swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v32);
    OUTLINED_FUNCTION_1_0((uint64_t)v31);
  }

  else
  {
    swift_release_n(v22[14], 2LL);
  }

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_D22A4 + *((int *)qword_D2538 + *(unsigned __int8 *)(v22[14] + 128LL))))( v39,  v40,  v41,  v42,  v43,  v44,  v45,  v46,  a9,  a10,  a11,  a12,  a13,  a14);
}

uint64_t WFShowAlertFlow.execute()()
{
  uint64_t v3 = *(void *)(v2 + 128);
  void *v4 = *v1;
  *(void *)(v2 + 136) = v0;
  swift_task_dealloc(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  OUTLINED_FUNCTION_50_0();
  uint64_t v3 = *(void *)(v2 + 144);
  void *v4 = *v1;
  *(void *)(v2 + 15__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v0;
  swift_task_dealloc(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char v3;
  uint64_t v1 = *(void *)(v0 + 112);
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 56));
  uint64_t v2 = *(void **)(v1 + 120);
  *(void *)(v1 + 120) = 1LL;
  uint64_t v3 = *(_BYTE *)(v1 + 128);
  *(_BYTE *)(v1 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 3;
  outlined consume of WFShowAlertFlow.State(v2, v3);
  static ExecuteResponse.ongoing(requireInput:)(1LL);
  OUTLINED_FUNCTION_98_1();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  os_log_type_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  os_log_type_t v5;
  uint8_t *v6;
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v1 + 16));
  uint64_t v2 = OUTLINED_FUNCTION_98_1();
  uint64_t v3 = *(void *)(v1 + 152);
  uint64_t v4 = *(os_log_s **)(v1 + 120);
  Logger.logObject.getter(v2);
  uint64_t v5 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_31_0(v5))
  {
    uint64_t v6 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    *(_WORD *)uint64_t v6 = 0;
    OUTLINED_FUNCTION_47_1(&dword_0, v4, v0, "#WFShowAlertFlow error submitting output", v6);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
  }

  OUTLINED_FUNCTION_27_22();
  OUTLINED_FUNCTION_53_17();
  swift_errorRelease(v3);
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t WFShowAlertFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WFShowAlertFlow();
  uint64_t v6 = lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow( &lazy protocol witness table cache variable for type WFShowAlertFlow and conformance WFShowAlertFlow,  v5,  (uint64_t (*)(uint64_t))type metadata accessor for WFShowAlertFlow,  (uint64_t)&protocol conformance descriptor for WFShowAlertFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v6);
}

uint64_t WFShowAlertFlow.buildOutput()(uint64_t a1)
{
  v2[17] = a1;
  v2[18] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[19] = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v2[20] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[21] = v5;
  v2[22] = OUTLINED_FUNCTION_4_0(v5);
  v2[23] = swift_task_alloc(v1);
  uint64_t v6 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[24] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[25] = v7;
  v2[26] = OUTLINED_FUNCTION_9_0(v7);
  uint64_t v8 = type metadata accessor for NLContextUpdate(0LL);
  v2[27] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[28] = v9;
  v2[29] = OUTLINED_FUNCTION_9_0(v9);
  uint64_t v10 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  v2[30] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[31] = v11;
  v2[32] = OUTLINED_FUNCTION_9_0(v11);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WFShowAlertFlow.buildOutput()()
{
  uint64_t v2 = v0[31];
  uint64_t v1 = (os_log_s *)v0[32];
  uint64_t v3 = v0[30];
  (*(void (**)(os_log_s *, void, uint64_t))(v2 + 104))( v1,  enum case for RFFeatureFlags.ResponseFramework._SMART(_:),  v3);
  uint64_t v4 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if ((v4 & 1) != 0)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v5 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v5, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v6 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_45_0(v6))
    {
      uint64_t v7 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_26_1(v7);
      OUTLINED_FUNCTION_8_34(&dword_0, v1, (os_log_type_t)v3, "#WFShowAlertFlow: building rfv2 snippet");
      OUTLINED_FUNCTION_1_0(v4);
    }

    uint64_t v8 = v0[18];

    OUTLINED_FUNCTION_58_16();
    uint64_t v9 = *(void *)(v8 + 96);
    uint64_t v10 = *(void *)(v8 + 32);
    v0[33] = v10;
    uint64_t v11 = *(int **)(*(void *)v9 + 168LL);
    uint64_t v15 = (uint64_t (*)(uint64_t))((char *)v11 + *v11);
    uint64_t v12 = (uint64_t **)swift_task_alloc(v11[1]);
    v0[34] = (uint64_t)v12;
    *uint64_t v12 = v0;
    v12[1] = (uint64_t *)WFShowAlertFlow.buildOutput();
    return v15(v10);
  }

  else
  {
    os_log_type_t v14 = (uint64_t **)swift_task_alloc(dword_21A574);
    v0[48] = (uint64_t)v14;
    void *v14 = v0;
    v14[1] = (uint64_t *)WFShowAlertFlow.buildOutput();
    return WFShowAlertFlow.buildOutput_rfv1()(v0[17]);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_42_1();
  *(void *)(v2 + 280) = v1;
  *(void *)(v2 + 28__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v0;
  OUTLINED_FUNCTION_54_0(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 328));
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_14();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_98_1();
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v1, v2, v3);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  char *v14;
  uint64_t v15;
  uint64_t v1 = (void *)v0[35];
  uint64_t v2 = OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_51(v2);
  v0[42] = OUTLINED_FUNCTION_57();
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v3);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v0[15] = type metadata accessor for WorkflowDataModels(0LL);
  v0[16] = lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow( (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels,  255LL,  type metadata accessor for WorkflowDataModels,  (uint64_t)&protocol conformance descriptor for WorkflowDataModels);
  __swift_allocate_boxed_opaque_existential_1(v0 + 12);
  v5(v3, v4);
  os_log_type_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = OUTLINED_FUNCTION_19(v6, 40LL);
  *(_OWORD *)(v7 + 16) = xmmword_17E150;
  *(void *)(v7 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v1;
  uint64_t v15 = v7;
  specialized Array._endMutation()(v7, v8, v9);
  v0[43] = v15;
  uint64_t v11 = v1;
  uint64_t v12 = (void *)swift_task_alloc(v10);
  v0[44] = v12;
  *uint64_t v12 = v0;
  v12[1] = WFShowAlertFlow.buildOutput();
  return ((uint64_t (*)(void, void *, uint64_t, void))v14)(v0[17], v0 + 12, v15, v0[26]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 352));
  swift_release();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_98_1();
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v1, v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  OUTLINED_FUNCTION_38_1();
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 192);
  os_log_type_t v6 = *(void *)(v0 + 200);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  OUTLINED_FUNCTION_98_1();
  OUTLINED_FUNCTION_32_19();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  uint64_t v7 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_2_1(v7);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 376));
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 200);

  OUTLINED_FUNCTION_48_12(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_32_19();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  uint64_t v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_12_9(v3);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v1 = *v0;
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 384));
  swift_task_dealloc(*(void *)(v1 + 256));
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_12_9(*(uint64_t (**)(void))(v3 + 8));
}

{
  uint64_t v0;
  (*(void (**)(void, void))(*(void *)(v0 + 224) + 8LL))(*(void *)(v0 + 232), *(void *)(v0 + 216));
  swift_task_dealloc(*(void *)(v0 + 256));
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_12_9(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t WFShowAlertFlow.buildOutput()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v51 = *(void *)(v3 + 216);
  uint64_t v53 = *(void *)(v3 + 232);
  uint64_t v5 = *(void *)(v3 + 176);
  uint64_t v4 = *(void *)(v3 + 184);
  uint64_t v6 = *(void *)(v3 + 168);
  uint64_t v46 = *(void *)(v3 + 160);
  uint64_t v49 = *(void *)(v3 + 224);
  uint64_t v8 = *(void *)(v3 + 144);
  uint64_t v7 = *(void *)(v3 + 152);
  uint64_t v9 = static DialogPhase.confirmation.getter(a1, a2, a3);
  id v10 = OUTLINED_FUNCTION_123_1(v9, "catId");
  OUTLINED_FUNCTION_73_10((uint64_t)v10);
  OUTLINED_FUNCTION_43_18();
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v46);
  OUTLINED_FUNCTION_31_18(v11, (uint64_t)CustomIntentDisambiguationItemContainer.init(items:));
  OUTLINED_FUNCTION_37_20();
  OUTLINED_FUNCTION_30_21();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v7, v53, v51);
  OUTLINED_FUNCTION_13_23();
  OutputGenerationManifest.canUseServerTTS.setter(1LL);
  OUTLINED_FUNCTION_74_13();
  uint64_t v12 = OUTLINED_FUNCTION_5_31();
  if ((dispatch thunk of DeviceState.isCarPlay.getter(v12, v13) & 1) != 0
    || (uint64_t v14 = OUTLINED_FUNCTION_5_31(), (dispatch thunk of DeviceState.isHomePod.getter(v14) & 1) != 0))
  {
    uint64_t v15 = *(void **)(v3 + 280);
    uint64_t v16 = OUTLINED_FUNCTION_64();
    OUTLINED_FUNCTION_51(v16);
    *(void *)(v3 + 360) = OUTLINED_FUNCTION_57();
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v18 = OUTLINED_FUNCTION_19(v17, 40LL);
    *(_OWORD *)(v18 + 16) = xmmword_17E150;
    *(void *)(v18 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v15;
    uint64_t v55 = v18;
    specialized Array._endMutation()(v18, v19, v20);
    *(void *)(v3 + 36__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v55;
    id v22 = v15;
    uint64_t v23 = (void *)swift_task_alloc(v21);
    *(void *)(v3 + 376) = v23;
    void *v23 = v3;
    v23[1] = WFShowAlertFlow.buildOutput();
    return ((uint64_t (*)(void, uint64_t, void))v54)(*(void *)(v3 + 136), v55, *(void *)(v3 + 208));
  }

  else
  {
    uint64_t v25 = *(void **)(v3 + 264);
    uint64_t v26 = *(void *)(v3 + 144);
    outlined init with copy of DeviceState(v8 + 56, v3 + 56);
    unint64_t v50 = *(void *)(v26 + 24);
    unint64_t v52 = *(void *)(v26 + 16);
    id v27 = [v25 okButton];
    id v28 = [v27 title];

    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v30 = v29;

    *(void *)(v3 + 296) = v30;
    id v31 = [v25 cancelButton];
    if (v31)
    {
      uint64_t v32 = v31;
      id v33 = objc_msgSend(v31, "title", v47);

      unint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v36 = v35;
    }

    else
    {
      unint64_t v34 = 0LL;
      unint64_t v36 = 0xE000000000000000LL;
    }

    *(void *)(v3 + 30__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v36;
    id v37 = objc_msgSend(*(id *)(v3 + 264), "promptForDisplay", v47);
    if (v37)
    {
      uint64_t v38 = v37;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v40 = v39;
    }

    else
    {
      uint64_t v40 = 0LL;
    }

    *(void *)(v3 + 31__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v40;
    id v41 = [*(id *)(v3 + 264) message];
    if (v41)
    {
      uint64_t v42 = v41;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v44 = v43;
    }

    else
    {
      unint64_t v44 = 0xE000000000000000LL;
    }

    *(void *)(v3 + 320) = v44;
    uint64_t v45 = (void *)swift_task_alloc(dword_21E474);
    *(void *)(v3 + 32__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v45;
    void *v45 = v3;
    v45[1] = WFShowAlertFlow.buildOutput();
    return static WorkflowDataModels.modelForShowAlert(deviceState:shortcutName:confirmLabel:cancelLabel:title:message:)( v3 + 16,  v3 + 56,  v52,  v50,  v48,  v30,  v34,  v36);
  }

uint64_t WFShowAlertFlow.buildOutput_rfv1()(uint64_t a1)
{
  v2[25] = a1;
  v2[26] = v1;
  uint64_t v3 = type metadata accessor for AceOutput(0LL);
  v2[27] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[28] = v4;
  v2[29] = OUTLINED_FUNCTION_9_0(v4);
  uint64_t v5 = type metadata accessor for TemplatingResult(0LL);
  v2[30] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[31] = v6;
  v2[32] = OUTLINED_FUNCTION_9_0(v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[33] = OUTLINED_FUNCTION_9_0(*(void *)(v7 - 8));
  uint64_t v8 = type metadata accessor for DialogPhase(0LL);
  v2[34] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[35] = v9;
  v2[36] = OUTLINED_FUNCTION_4_0(v9);
  v2[37] = swift_task_alloc(v1);
  uint64_t v10 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[38] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[39] = v11;
  v2[40] = OUTLINED_FUNCTION_9_0(v11);
  uint64_t v12 = type metadata accessor for NLContextUpdate(0LL);
  v2[41] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[42] = v13;
  v2[43] = OUTLINED_FUNCTION_9_0(v13);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WFShowAlertFlow.buildOutput_rfv1()()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v4 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v4, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v5 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_45_0(v5))
  {
    uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_26_1(v6);
    OUTLINED_FUNCTION_8_34(&dword_0, v1, v0, "#WFShowAlertFlow: building rfv1 snippet");
    OUTLINED_FUNCTION_1_0(v2);
  }

  OUTLINED_FUNCTION_58_16();
  uint64_t v7 = OUTLINED_FUNCTION_5_31();
  if ((dispatch thunk of DeviceState.isPhone.getter(v7, v8) & 1) != 0
    || (uint64_t v9 = OUTLINED_FUNCTION_5_31(), (dispatch thunk of DeviceState.isPad.getter(v9) & 1) != 0)
    || (uint64_t v10 = OUTLINED_FUNCTION_5_31(), (dispatch thunk of DeviceState.isPod.getter(v10) & 1) != 0))
  {
    uint64_t v11 = v3[26];
    uint64_t v12 = *(void *)(v11 + 96);
    uint64_t v13 = *(void *)(v11 + 32);
    v3[44] = v13;
    uint64_t v14 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(*(void *)v12 + 160LL));
    v3[45] = v14;
    void *v14 = v3;
    v14[1] = WFShowAlertFlow.buildOutput_rfv1();
    return v33(v13);
  }

  else
  {
    uint64_t v16 = v3[26];
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t inited = swift_initStackObject(v17, v3 + 8);
    *(_OWORD *)(inited + 16) = xmmword_17E650;
    uint64_t v19 = *(void *)(v16 + 32);
    id v20 = OUTLINED_FUNCTION_67_8();
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v24 = v23;
    }

    else
    {
      uint64_t v22 = 0LL;
      unint64_t v24 = 0xE000000000000000LL;
    }

    *(void *)(inited + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v22;
    *(void *)(inited + 40) = v24;
    uint64_t v25 = swift_initStackObject(v17, v3 + 14);
    *(_OWORD *)(v25 + 16) = xmmword_17E650;
    if (OUTLINED_FUNCTION_67_8())
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_65_10();
    }

    else
    {
      uint64_t v17 = 0LL;
      uint64_t v22 = 0xE000000000000000LL;
    }

    uint64_t v26 = v3[32];
    uint64_t v27 = v3[26];
    *(void *)(v25 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v17;
    *(void *)(v25 + 40) = v22;
    TemplatingResult.init(dialogId:print:speak:)(0xD000000000000015LL, 0x8000000000196310LL, inited, v25, v26);
    uint64_t v28 = *(void *)(v27 + 16);
    uint64_t v29 = *(void *)(v27 + 24);
    uint64_t v30 = *(void *)(v27 + 40);
    uint64_t v31 = *(void *)(v27 + 48);
    uint64_t v32 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(**(void **)(v27 + 104) + 96LL));
    v3[58] = v32;
    *uint64_t v32 = v3;
    v32[1] = WFShowAlertFlow.buildOutput_rfv1();
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))dword_0)(v19, v28, v29, v30, v31);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_42_1();
  *(void *)(v2 + 36__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v1;
  *(void *)(v2 + 376) = v0;
  OUTLINED_FUNCTION_54_0(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  OUTLINED_FUNCTION_38_1();
  uint64_t v1 = *(void *)(v0 + 312);

  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  uint64_t v2 = *(void *)(v0 + 344);
  OUTLINED_FUNCTION_72_7();
  (*(void (**)(uint64_t))(v3 + 8))(v2);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  uint64_t v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_2_1(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_42_1();
  *(void *)(v1 + 47__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v0;
  OUTLINED_FUNCTION_54_0(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Bool v10;
  void *boxed_opaque_existential_1;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v1 = *(void *)(v0 + 336);
  uint64_t v15 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 328);
  uint64_t v4 = *(void *)(v0 + 256);
  uint64_t v3 = *(void *)(v0 + 264);
  id v20 = *(void *)(v0 + 248);
  uint64_t v21 = *(void *)(v0 + 240);
  uint64_t v16 = *(void *)(v0 + 232);
  uint64_t v17 = *(void *)(v0 + 472);
  uint64_t v18 = *(void *)(v0 + 216);
  uint64_t v19 = *(void *)(v0 + 224);
  uint64_t v6 = *(void **)(v0 + 200);
  os_log_type_t v5 = *(void **)(v0 + 208);
  uint64_t v7 = v5 + 7;
  uint64_t v8 = v5[10];
  uint64_t v9 = v5[11];
  __swift_project_boxed_opaque_existential_1(v5 + 7, v8);
  LOBYTE(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v8, v9);
  uint64_t v10 = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v3, v15, v2);
  __swift_storeEnumTagSinglePayload(v3, 0LL, 1LL, v2);
  *(void *)(v0 + 19__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0LL;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + outlined init with copy of AppShortcutInvoking(v0 + 128, v1 - 160) = 0u;
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v4,  v7,  v8 & 1,  v17,  v10,  1LL,  v3,  _swiftEmptyArrayStorage,  v0 + 160);
  OUTLINED_FUNCTION_14();
  outlined destroy of URL?(v0 + 160, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v3, &demangling cache variable for type metadata for NLContextUpdate?);
  v6[3] = v18;
  v6[4] = &protocol witness table for AceOutput;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v6);
  (*(void (**)(void *, uint64_t, uint64_t))(v19 + 32))(boxed_opaque_existential_1, v16, v18);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v4, v21);
  uint64_t v12 = *(void *)(v0 + 344);
  OUTLINED_FUNCTION_72_7();
  (*(void (**)(uint64_t))(v1 + 8))(v12);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  uint64_t v13 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return v13();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_38_1();
  (*(void (**)(void, void))(*(void *)(v0 + 336) + 8LL))(*(void *)(v0 + 344), *(void *)(v0 + 328));
  OUTLINED_FUNCTION_12_25();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  return OUTLINED_FUNCTION_2_1(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_38_1();
  uint64_t v1 = *(void *)(v0 + 336);

  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_12_25();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  return OUTLINED_FUNCTION_2_1(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_38_1();
  uint64_t v1 = *(void *)(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 312);

  OUTLINED_FUNCTION_48_12(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_12_25();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  return OUTLINED_FUNCTION_2_1(*(uint64_t (**)(void))(v0 + 8));
}

#error "D3688: call analysis failed (funcsize=103)"
uint64_t WFShowAlertFlow.buildOutput_rfv1()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v6 = *v3;
  *(void *)(*v3 + 416) = v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v2)
  {
    *(void *)(v6 + 42__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a2;
    *(void *)(v6 + 43__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a1;
  }

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

#error "D389C: call analysis failed (funcsize=38)"
uint64_t WFShowAlertFlow.buildOutput_rfv1()()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  OUTLINED_FUNCTION_50_0();
  *uint64_t v2 = *v1;
  *(void *)(v3 + 456) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t WFConfirmInteractionFlow.deinit()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 56));
  swift_release();
  swift_release();
  swift_release();
  outlined consume of WFShowAlertFlow.State(*(id *)(v0 + 120), *(_BYTE *)(v0 + 128));
  return v0;
}

uint64_t WFConfirmInteractionFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 129LL, 7LL);
}

void outlined consume of WFShowAlertFlow.State(id a1, char a2)
{
  if (a2 == 2)
  {
    swift_errorRelease(a1);
  }

  else if (a2 == 1)
  {
  }

uint64_t type metadata accessor for WFShowAlertFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin15WFShowAlertFlow);
}

uint64_t storeEnumTagSinglePayload for WFShowAlertFlowError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_D3DF0 + 4 * asc_185990[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_D3E10 + 4 * byte_185995[v4]))();
  }
}

_BYTE *sub_D3DF0(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_D3E10(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_D3E18(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_D3E20(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_D3E28(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_D3E30(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for WFShowAlertFlowError()
{
  return &type metadata for WFShowAlertFlowError;
}

uint64_t initializeBufferWithCopyOfBuffer for WFShowAlertFlow.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  outlined copy of WFShowAlertFlow.State(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v4;
  return a1;
}

id outlined copy of WFShowAlertFlow.State(id result, char a2)
{
  if (a2 == 2) {
    return (id)swift_errorRetain(result);
  }
  if (a2 == 1) {
    return result;
  }
  return result;
}

void destroy for WFShowAlertFlow.State(uint64_t a1)
{
}

uint64_t assignWithCopy for WFShowAlertFlow.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  outlined copy of WFShowAlertFlow.State(*(id *)a2, v4);
  os_log_type_t v5 = *(void **)a1;
  *(void *)a1 = v3;
  char v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v4;
  outlined consume of WFShowAlertFlow.State(v5, v6);
  return a1;
}

uint64_t assignWithTake for WFShowAlertFlow.State(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v3;
  outlined consume of WFShowAlertFlow.State(v4, v5);
  return a1;
}

void *type metadata accessor for WFShowAlertFlow.State()
{
  return &unk_1F9090;
}

uint64_t OUTLINED_FUNCTION_5_31()
{
  uint64_t v2 = *(void *)(v1 + 80);
  __swift_project_boxed_opaque_existential_1(v0, v2);
  return v2;
}

void OUTLINED_FUNCTION_8_34(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_11_24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static DialogPhase.confirmation.getter(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_12_25()
{
  return swift_task_dealloc(*(void *)(v0 + 344));
}

uint64_t OUTLINED_FUNCTION_13_23()
{
  return OutputGenerationManifest.nlContextUpdate.setter(v1);
}

uint64_t OUTLINED_FUNCTION_27_22()
{
  *(void *)(v1 + 120) = v0;
  *(_BYTE *)(v1 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 2;
  return swift_errorRetain(v0);
}

uint64_t OUTLINED_FUNCTION_30_21()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t OUTLINED_FUNCTION_31_18(uint64_t a1, uint64_t a2)
{
  return OutputGenerationManifest.init(dialogPhase:_:)(v2, a2, 0LL);
}

uint64_t OUTLINED_FUNCTION_32_19()
{
  return swift_task_dealloc(*(void *)(v0 + 256));
}

uint64_t OUTLINED_FUNCTION_33_18(void *a1)
{
  *(void *)(v2 + 44__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a1;
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 200);
}

uint64_t OUTLINED_FUNCTION_34_19( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a9 + 16))(v11, a11, a10);
}

uint64_t OUTLINED_FUNCTION_37_20()
{
  return OutputGenerationManifest.responseViewId.setter(v0);
}

uint64_t OUTLINED_FUNCTION_38_20()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v2, v1, v3);
}

void OUTLINED_FUNCTION_43_18()
{
}

uint64_t OUTLINED_FUNCTION_53_17()
{
  return static ExecuteResponse.ongoing(requireInput:)(0LL);
}

uint64_t OUTLINED_FUNCTION_58_16()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184LL))();
}

uint64_t OUTLINED_FUNCTION_60_13()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

void OUTLINED_FUNCTION_65_10()
{
}

id OUTLINED_FUNCTION_67_8()
{
  return [v1 *(SEL *)(v0 + 1840)];
}

  ;
}

uint64_t OUTLINED_FUNCTION_73_10(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_74_13()
{
  return OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
}

void static CustomTypeReference.buildFromAttributeHash(attributeHash:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  if (one-time initialization token for TypeNameMap != -1) {
    swift_once(&one-time initialization token for TypeNameMap, one-time initialization function for TypeNameMap);
  }
  specialized Dictionary.subscript.getter(v2, v4, (uint64_t)static CustomTypeReference.TypeNameMap);
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_38_0();
}

Swift::String __swiftcall CustomTypeReference.asString()()
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v11 = v0;
  uint64_t v12 = (void *)v1;
  OUTLINED_FUNCTION_37_21(v0, v1);
  v6._uint64_t countAndFlagsBits = 46LL;
  v6._object = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  swift_bridgeObjectRetain(v12);
  v7._uint64_t countAndFlagsBits = v5;
  v7._object = v4;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = v11;
  uint64_t v9 = v12;
  result._object = v9;
  result._uint64_t countAndFlagsBits = v8;
  return result;
}

void static CustomTypeReference.fromSlotValueType(valueType:)(uint64_t a1)
{
  uint64_t v1 = static CustomTypeReference.typeString(valueType:)(a1);
  uint64_t v3 = v2;
  if (one-time initialization token for TypeNameMap != -1) {
    swift_once(&one-time initialization token for TypeNameMap, one-time initialization function for TypeNameMap);
  }
  uint64_t v4 = static CustomTypeReference.TypeNameMap;
  if (*(void *)((char *)&dword_10 + (void)static CustomTypeReference.TypeNameMap))
  {
    unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v1, v3);
    if ((v6 & 1) != 0)
    {
      swift_bridgeObjectRetain(*(void *)(*(void *)&stru_20.segname[(void)v4 + 16] + 32 * v5 + 8));
      OUTLINED_FUNCTION_17_1();
    }
  }

  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_38_0();
}

uint64_t CustomIntentDefinition.requestDefinition.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*v1);
  *uint64_t v1 = a1;
  return result;
}

void *static CustomRequestDefinition.buildFromIntentDescription(intentDescription:)(void *a1)
{
  uint64_t v1 = outlined bridged method (pb) of @objc INCodableDescription.dictionaryRepresentation()(a1);
  if (!v1) {
    return 0LL;
  }
  specialized Dictionary.subscript.getter(0xD000000000000012LL, 0x8000000000196330LL, v1, &v151);
  OUTLINED_FUNCTION_14();
  if (!v152)
  {
    outlined destroy of Any?((uint64_t)&v151);
    return 0LL;
  }

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  uint64_t v3 = v149[0];
  uint64_t v4 = *(void *)(v149[0] + 16LL);
  if (v4)
  {
    uint64_t v150 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v124 = v3;
    uint64_t v5 = v3 + 32;
    uint64_t v130 = 0x80000000001963B0LL;
    uint64_t v136 = 0x8000000000196390LL;
    uint64_t v143 = 0x8000000000196370LL;
    uint64_t v144 = (char *)&type metadata for Any + 8;
    uint64_t v142 = 0x8000000000196350LL;
    do
    {
      outlined init with copy of Any(v5, (uint64_t)&v151);
      outlined init with copy of Any((uint64_t)&v151, (uint64_t)v149);
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      swift_dynamicCast(&v147, v149, v144, v6, 7LL);
      uint64_t v7 = v147;
      if (*(void *)(v147 + 16)
        && (unint64_t v8 = OUTLINED_FUNCTION_42_14(), v9 = OUTLINED_FUNCTION_22_20(v8, v142), (v10 & 1) != 0)
        && (uint64_t v17 = OUTLINED_FUNCTION_0_31(v9, v10, v11, v12, v13, v14, v15, v16, v124, v130, v136),
            uint64_t v25 = OUTLINED_FUNCTION_10_26( v17,  v18,  v19,  v20,  v21,  v22,  v23,  v24,  v125,  v131,  v137,  v142,  v143,  (uint64_t)v144,  v145,  v146,  v147),  OUTLINED_FUNCTION_35_6((uint64_t)v25, v26, v27, (uint64_t)&type metadata for String)))
      {
        uint64_t v28 = v147;
        uint64_t v29 = v148;
      }

      else
      {
        uint64_t v28 = 0LL;
        uint64_t v29 = 0xE000000000000000LL;
      }

      uint64_t v145 = v29;
      uint64_t v146 = v28;
      if (*(void *)(v7 + 16))
      {
        unint64_t v30 = OUTLINED_FUNCTION_22_20(0xD00000000000001BLL, v143);
        if ((v31 & 1) != 0)
        {
          uint64_t v38 = OUTLINED_FUNCTION_0_31(v30, v31, v32, v33, v34, v35, v36, v37, v124, v130, v136);
          uint64_t v46 = OUTLINED_FUNCTION_10_26( v38,  v39,  v40,  v41,  v42,  v43,  v44,  v45,  v126,  v132,  v138,  v142,  v143,  (uint64_t)v144,  v29,  v28,  v147);
        }
      }

      if (*(void *)(v7 + 16)
        && (unint64_t v49 = OUTLINED_FUNCTION_22_20(0xD000000000000019LL, v136), (v50 & 1) != 0)
        && (uint64_t v57 = OUTLINED_FUNCTION_0_31(v49, v50, v51, v52, v53, v54, v55, v56, v124, v130, v136),
            uint64_t v65 = OUTLINED_FUNCTION_10_26( v57,  v58,  v59,  v60,  v61,  v62,  v63,  v64,  v127,  v133,  v139,  v142,  v143,  (uint64_t)v144,  v145,  v146,  v147),  (OUTLINED_FUNCTION_35_6((uint64_t)v65, v66, v67, (uint64_t)&type metadata for String) & 1) != 0)
        || *(void *)(v7 + 16)
        && (unint64_t v68 = OUTLINED_FUNCTION_42_14(), v69 = OUTLINED_FUNCTION_22_20(v68, v130), (v70 & 1) != 0)
        && (uint64_t v77 = OUTLINED_FUNCTION_0_31(v69, v70, v71, v72, v73, v74, v75, v76, v124, v130, v136),
            unint64_t v85 = OUTLINED_FUNCTION_10_26( v77,  v78,  v79,  v80,  v81,  v82,  v83,  v84,  v128,  v134,  v140,  v142,  v143,  (uint64_t)v144,  v145,  v146,  v147),  (OUTLINED_FUNCTION_35_6((uint64_t)v85, v86, v87, (uint64_t)&type metadata for String) & 1) != 0))
      {
LABEL_20:
        uint64_t v88 = v147;
        uint64_t v89 = v148;
      }

      else
      {
        uint64_t v89 = 0xE600000000000000LL;
        uint64_t v88 = 0x7463656A624FLL;
      }

      if (one-time initialization token for TypeNameMap != -1) {
        swift_once(&one-time initialization token for TypeNameMap, one-time initialization function for TypeNameMap);
      }
      char v90 = static CustomTypeReference.TypeNameMap;
      if (*(void *)((char *)&dword_10 + (void)static CustomTypeReference.TypeNameMap)
        && (unint64_t v91 = specialized __RawDictionaryStorage.find<A>(_:)(v88, v89), (v92 & 1) != 0))
      {
        uint64_t v93 = (uint64_t *)(*(void *)&stru_20.segname[(void)v90 + 16] + 32 * v91);
        uint64_t v94 = *v93;
        unint64_t v95 = v93[1];
        uint64_t v97 = v93[2];
        unint64_t v96 = v93[3];
        swift_bridgeObjectRetain(v95);
        swift_bridgeObjectRetain(v96);
      }

      else
      {
        unint64_t v96 = 0xE600000000000000LL;
        uint64_t v94 = 0x697461646E756F66LL;
        unint64_t v95 = 0xEA00000000006E6FLL;
        uint64_t v97 = 0x7463656A624FLL;
      }

      swift_bridgeObjectRelease();
      if (*(void *)(v7 + 16)
        && (uint64_t v98 = CustomParameterOptions.CodingKeys.stringValue.getter(),
            unint64_t v100 = OUTLINED_FUNCTION_22_20(v98, v99),
            (v101 & 1) != 0)
        && (uint64_t v108 = OUTLINED_FUNCTION_0_31(v100, v101, v102, v103, v104, v105, v106, v107, v124, v130, v136),
            int64_t v116 = OUTLINED_FUNCTION_10_26( v108,  v109,  v110,  v111,  v112,  v113,  v114,  v115,  v129,  v135,  v141,  v142,  v143,  (uint64_t)v144,  v145,  v146,  v147),  (OUTLINED_FUNCTION_35_6((uint64_t)v116, v117, v118, (uint64_t)&type metadata for Bool) & 1) != 0))
      {
        char v119 = v147;
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRelease();
        char v119 = 0;
      }

      __swift_destroy_boxed_opaque_existential_1Tm(&v151);
      __int128 v120 = v150;
      if ((swift_isUniquelyReferenced_nonNull_native(v150) & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        __int128 v120 = v150;
      }

      unint64_t v121 = v120[2];
      if (v121 >= v120[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        __int128 v120 = v150;
      }

      v120[2] = v121 + 1;
      __int128 v122 = &v120[7 * v121];
      v122[4] = v146;
      v122[5] = v145;
      v122[6] = v94;
      v122[7] = v95;
      v122[8] = v97;
      v122[9] = v96;
      *((_BYTE *)v122 + 80) = v119;
      v5 += 32LL;
      --v4;
    }

    while (v4);
    swift_bridgeObjectRelease();
  }

  else
  {
    OUTLINED_FUNCTION_14();
    return _swiftEmptyArrayStorage;
  }

  return v120;
}

uint64_t CustomIntentDefinition.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011LL && a2 == 0x80000000001963D0LL)
  {
    swift_bridgeObjectRelease(0x80000000001963D0LL);
    char v3 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000000001963D0LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v3 = v4 ^ 1;
  }

  return v3 & 1;
}

unint64_t CustomIntentDefinition.CodingKeys.stringValue.getter()
{
  return 0xD000000000000011LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CustomIntentDefinition.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = CustomIntentDefinition.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CustomIntentDefinition.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CustomIntentDefinition.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void CustomIntentDefinition.encode(to:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CustomIntentDefinition.CodingKeys>);
  OUTLINED_FUNCTION_4_29();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_8_35();
  unint64_t v4 = lazy protocol witness table accessor for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys();
  OUTLINED_FUNCTION_7_26((uint64_t)&unk_1F95D8, v5, v4);
  uint64_t v7 = v1;
  lazy protocol witness table accessor for type CustomRequestDefinition and conformance CustomRequestDefinition();
  OUTLINED_FUNCTION_43_19((uint64_t)&v7, v6, v2);
  OUTLINED_FUNCTION_25_27();
  OUTLINED_FUNCTION_1_29();
}

void CustomIntentDefinition.init(from:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CustomIntentDefinition.CodingKeys>);
  OUTLINED_FUNCTION_4_29();
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_13_24();
  unint64_t v3 = lazy protocol witness table accessor for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys();
  OUTLINED_FUNCTION_18_26((uint64_t)&unk_1F95D8, v4, v3);
  if (!v0)
  {
    lazy protocol witness table accessor for type CustomRequestDefinition and conformance CustomRequestDefinition();
    OUTLINED_FUNCTION_38_21( (uint64_t)&type metadata for CustomRequestDefinition,  v5,  v1,  (uint64_t)&type metadata for CustomRequestDefinition);
    OUTLINED_FUNCTION_12_26();
  }

  OUTLINED_FUNCTION_51_13();
  OUTLINED_FUNCTION_1_29();
}

void protocol witness for Decodable.init(from:) in conformance CustomIntentDefinition(void *a1@<X8>)
{
  if (!v1) {
    *a1 = v3;
  }
}

void protocol witness for Encodable.encode(to:) in conformance CustomIntentDefinition()
{
}

uint64_t static CustomRequestParameterDefinition.buildFromAttributeHash(attributeHash:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = OUTLINED_FUNCTION_42_14();
  specialized Dictionary.subscript.getter(v4, v5, a1, v6);
  if (!v29)
  {
    outlined destroy of Any?((uint64_t)v28);
    goto LABEL_5;
  }

  if (!OUTLINED_FUNCTION_6_16( v7,  v8,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String,  v9,  v10,  v11,  v12,  v24,  v26,  v28[0]))
  {
LABEL_5:
    uint64_t v13 = 0LL;
    unint64_t v14 = 0xE000000000000000LL;
    goto LABEL_6;
  }

  uint64_t v13 = v25;
  unint64_t v14 = v27;
LABEL_6:
  static CustomTypeReference.buildFromAttributeHash(attributeHash:)(a1);
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t result = static CustomParameterOptions.buildFromAttributeHash(attributeHash:)(a1);
  *(void *)a2 = v13;
  *(void *)(a2 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v14;
  *(void *)(a2 + 16) = v16;
  *(void *)(a2 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v18;
  *(void *)(a2 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v20;
  *(void *)(a2 + 40) = v22;
  *(_BYTE *)(a2 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = result & 1;
  return result;
}

uint64_t CustomRequestDefinition.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6574656D61726170LL && a2 == 0xEA00000000007372LL)
  {
    swift_bridgeObjectRelease(0xEA00000000007372LL);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6574656D61726170LL, 0xEA00000000007372LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

uint64_t static Transformer<>.parametersDictionaryKey.getter()
{
  return 0x6574656D61726170LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CustomRequestDefinition.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = CustomRequestDefinition.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CustomRequestDefinition.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CustomRequestDefinition.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void CustomRequestDefinition.encode(to:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CustomRequestDefinition.CodingKeys>);
  OUTLINED_FUNCTION_4_29();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_8_35();
  unint64_t v4 = lazy protocol witness table accessor for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys();
  OUTLINED_FUNCTION_7_26((uint64_t)&unk_1F9548, v5, v4);
  uint64_t v7 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CustomRequestParameterDefinition]);
  lazy protocol witness table accessor for type [CustomRequestParameterDefinition] and conformance <A> [A]( &lazy protocol witness table cache variable for type [CustomRequestParameterDefinition] and conformance <A> [A],  (void (*)(void))lazy protocol witness table accessor for type CustomRequestParameterDefinition and conformance CustomRequestParameterDefinition,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  OUTLINED_FUNCTION_43_19((uint64_t)&v7, v6, v2);
  OUTLINED_FUNCTION_12_26();
  OUTLINED_FUNCTION_1_29();
}

void CustomRequestDefinition.init(from:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CustomRequestDefinition.CodingKeys>);
  OUTLINED_FUNCTION_4_29();
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_13_24();
  unint64_t v3 = lazy protocol witness table accessor for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys();
  OUTLINED_FUNCTION_18_26((uint64_t)&unk_1F9548, v4, v3);
  if (!v0)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CustomRequestParameterDefinition]);
    lazy protocol witness table accessor for type [CustomRequestParameterDefinition] and conformance <A> [A]( &lazy protocol witness table cache variable for type [CustomRequestParameterDefinition] and conformance <A> [A],  (void (*)(void))lazy protocol witness table accessor for type CustomRequestParameterDefinition and conformance CustomRequestParameterDefinition,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    OUTLINED_FUNCTION_38_21(v5, v6, v1, v5);
    OUTLINED_FUNCTION_12_26();
  }

  OUTLINED_FUNCTION_51_13();
  OUTLINED_FUNCTION_1_29();
}

void protocol witness for Decodable.init(from:) in conformance CustomRequestDefinition(void *a1@<X8>)
{
  if (!v1) {
    *a1 = v3;
  }
}

void protocol witness for Encodable.encode(to:) in conformance CustomRequestDefinition()
{
}

void CustomRequestParameterDefinition.name.setter()
{
  *uint64_t v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_2();
}

uint64_t CustomRequestParameterDefinition.typeDefinition.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  OUTLINED_FUNCTION_17_1();
  return v1;
}

uint64_t CustomRequestParameterDefinition.typeDefinition.setter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = swift_bridgeObjectRelease(v4[5]);
  void v4[2] = a1;
  void v4[3] = a2;
  v4[4] = a3;
  void v4[5] = a4;
  return result;
}

uint64_t CustomRequestParameterDefinition.options.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t CustomRequestParameterDefinition.options.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = result;
  return result;
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *CustomRequestParameterDefinition.options.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

uint64_t static CustomParameterOptions.buildFromAttributeHash(attributeHash:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return 0LL;
  }
  uint64_t v1 = CustomParameterOptions.CodingKeys.stringValue.getter();
  unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(v1, v2);
  if ((v4 & 1) == 0) {
    return 0LL;
  }
  OUTLINED_FUNCTION_2_26(v3, v4, v5);
  uint64_t result = OUTLINED_FUNCTION_35_6( (uint64_t)&v7,  (uint64_t)v8,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Bool);
  if ((_DWORD)result) {
    return v7;
  }
  return result;
}

void __swiftcall CustomRequestParameterDefinition.init(name:typeDefinition:options:)( SiriLinkFlowPlugin::CustomRequestParameterDefinition *__return_ptr retstr, Swift::String name, SiriLinkFlowPlugin::CustomTypeReference typeDefinition, SiriLinkFlowPlugin::CustomParameterOptions options)
{
  retstr->name = name;
  retstr->typeDefinition = typeDefinition;
  retstr->options = options;
}

uint64_t CustomRequestParameterDefinition.CodingKeys.init(stringValue:)(uint64_t a1, unint64_t a2)
{
  if (a1 == 1701667182 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6966654465707974LL && a2 == 0xEE006E6F6974696ELL)
  {
    unint64_t v8 = 0xEE006E6F6974696ELL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6966654465707974LL, 0xEE006E6F6974696ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
    return 2LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x736E6F6974706FLL, 0xE700000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t CustomRequestParameterDefinition.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 1701667182LL;
  }
  if (a1 == 1) {
    return 0x6966654465707974LL;
  }
  return 0x736E6F6974706FLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CustomRequestParameterDefinition.CodingKeys()
{
  return CustomRequestParameterDefinition.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CustomRequestParameterDefinition.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = CustomRequestParameterDefinition.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CustomRequestParameterDefinition.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CustomRequestParameterDefinition.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void CustomRequestParameterDefinition.encode(to:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CustomRequestParameterDefinition.CodingKeys>);
  OUTLINED_FUNCTION_4_29();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_35();
  uint64_t v7 = v6 - v5;
  OUTLINED_FUNCTION_8_35();
  unint64_t v8 = lazy protocol witness table accessor for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys();
  OUTLINED_FUNCTION_7_26((uint64_t)&unk_1F94B8, v9, v8);
  uint64_t v10 = *v0;
  uint64_t v11 = v0[1];
  LOBYTE(v13[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v10, v11, v13, v3);
  if (!v1)
  {
    __int128 v12 = *((_OWORD *)v0 + 2);
    v13[0] = *((_OWORD *)v0 + 1);
    v13[1] = v12;
    lazy protocol witness table accessor for type CustomTypeReference and conformance CustomTypeReference();
    OUTLINED_FUNCTION_17_28();
    LOBYTE(v13[0]) = *((_BYTE *)v0 + 48);
    lazy protocol witness table accessor for type CustomParameterOptions and conformance CustomParameterOptions();
    OUTLINED_FUNCTION_17_28();
  }

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v7, v3);
  OUTLINED_FUNCTION_1_29();
}

void CustomRequestParameterDefinition.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CustomRequestParameterDefinition.CodingKeys>);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_35();
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  OUTLINED_FUNCTION_13_24();
  unint64_t v8 = lazy protocol witness table accessor for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_1F94B8, &unk_1F94B8, v8, v6, v7);
  if (v2)
  {
    OUTLINED_FUNCTION_51_13();
  }

  else
  {
    LOBYTE(v27[0]) = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)(v27, v5);
    uint64_t v11 = v10;
    uint64_t v26 = v9;
    char v28 = 1;
    unint64_t v12 = lazy protocol witness table accessor for type CustomTypeReference and conformance CustomTypeReference();
    swift_bridgeObjectRetain(v11);
    OUTLINED_FUNCTION_24_22();
    OUTLINED_FUNCTION_38_21(v13, v14, v15, v16);
    if (v12)
    {
      OUTLINED_FUNCTION_6_32();
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_51_13();
      OUTLINED_FUNCTION_69();
    }

    else
    {
      uint64_t v17 = v27[1];
      uint64_t v18 = v27[3];
      uint64_t v23 = v27[2];
      uint64_t v24 = v27[0];
      char v28 = 2;
      lazy protocol witness table accessor for type CustomParameterOptions and conformance CustomParameterOptions();
      uint64_t v25 = v17;
      OUTLINED_FUNCTION_17_1();
      swift_bridgeObjectRetain(v18);
      OUTLINED_FUNCTION_24_22();
      KeyedDecodingContainer.decode<A>(_:forKey:)(v19, v20, v21, v22);
      OUTLINED_FUNCTION_6_32();
      LOBYTE(v17) = v27[0];
      OUTLINED_FUNCTION_51_13();
      OUTLINED_FUNCTION_2_6();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_69();
      *(void *)a2 = v26;
      *(void *)(a2 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v11;
      *(void *)(a2 + 16) = v24;
      *(void *)(a2 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v25;
      *(void *)(a2 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v23;
      *(void *)(a2 + 40) = v18;
      *(_BYTE *)(a2 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v17;
    }
  }

  OUTLINED_FUNCTION_13_8();
}

double protocol witness for Decodable.init(from:) in conformance CustomRequestParameterDefinition@<D0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v7;
    *(_BYTE *)(a2 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v8;
  }

  return result;
}

void protocol witness for Encodable.encode(to:) in conformance CustomRequestParameterDefinition()
{
}

uint64_t CustomParameterOptions.multiCardinal.getter(char a1)
{
  return a1 & 1;
}

uint64_t CustomParameterOptions.multiCardinal.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t CustomParameterOptions.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x72614369746C756DLL && a2 == 0xED00006C616E6964LL)
  {
    swift_bridgeObjectRelease(0xED00006C616E6964LL);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x72614369746C756DLL, 0xED00006C616E6964LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

uint64_t CustomParameterOptions.CodingKeys.stringValue.getter()
{
  return 0x72614369746C756DLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CustomParameterOptions.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = CustomParameterOptions.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CustomParameterOptions.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CustomParameterOptions.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void CustomParameterOptions.encode(to:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CustomParameterOptions.CodingKeys>);
  OUTLINED_FUNCTION_4_29();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_8_35();
  unint64_t v4 = lazy protocol witness table accessor for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys();
  OUTLINED_FUNCTION_7_26((uint64_t)&unk_1F9428, v5, v4);
  KeyedEncodingContainer.encode(_:forKey:)(v1, v6, v2);
  OUTLINED_FUNCTION_25_27();
  OUTLINED_FUNCTION_1_29();
}

uint64_t CustomParameterOptions.init(from:)()
{
  uint64_t v4 = v3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CustomParameterOptions.CodingKeys>);
  OUTLINED_FUNCTION_4_29();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_35();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = *(void *)(v4 + 24);
  uint64_t v11 = *(void *)(v4 + 32);
  OUTLINED_FUNCTION_13_24();
  unint64_t v12 = lazy protocol witness table accessor for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys();
  uint64_t v13 = dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_1F9428, &unk_1F9428, v12, v10, v11);
  if (!v1)
  {
    char v0 = ((uint64_t (*)(uint64_t, uint64_t))KeyedDecodingContainer.decode(_:forKey:))(v13, v5);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v9, v5);
  }

  OUTLINED_FUNCTION_51_13();
  return v0 & 1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CustomParameterOptions@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = CustomParameterOptions.init(from:)();
  if (!v1) {
    *a1 = result & 1;
  }
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance CustomParameterOptions()
{
}

void CustomTypeReference.namespace.getter(uint64_t a1, uint64_t a2)
{
}

void CustomTypeReference.name.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t static CustomTypeReference.typeString(valueType:)(uint64_t a1)
{
  uint64_t v1 = a1 - 1;
  uint64_t result = 0x676E69727453LL;
  switch(v1)
  {
    case 0LL:
      uint64_t result = 0x6E61656C6F6F42LL;
      break;
    case 2LL:
    case 3LL:
    case 20LL:
      uint64_t result = 0x656C62756F44LL;
      break;
    case 4LL:
    case 5LL:
    case 7LL:
    case 8LL:
    case 23LL:
    case 25LL:
      uint64_t result = 0x72656765746E49LL;
      break;
    case 6LL:
    case 29LL:
      return result;
    case 9LL:
      uint64_t result = 0x6E6F73726550LL;
      break;
    case 13LL:
      uint64_t result = 0x706D6F4365746144LL;
      break;
    case 15LL:
      uint64_t result = 0x65746E49656D6954LL;
      break;
    case 18LL:
      uint64_t result = 0x65636E6174736944LL;
      break;
    case 26LL:
      uint64_t result = 0x72616D6563616C50LL;
      break;
    case 31LL:
      uint64_t result = 0x74617265706D6554LL;
      break;
    case 35LL:
      uint64_t result = 5001813LL;
      break;
    case 37LL:
      uint64_t result = 1936941389LL;
      break;
    case 38LL:
      uint64_t result = 0x656D756C6F56LL;
      break;
    case 39LL:
      uint64_t result = 0x6465657053LL;
      break;
    case 40LL:
      uint64_t result = 0x796772656E45LL;
      break;
    case 52LL:
      uint64_t result = 0x79636E6572727543LL;
      break;
    default:
      uint64_t result = 0x7463656A624FLL;
      break;
  }

  return result;
}

int *one-time initialization function for TypeNameMap()
{
  uint64_t result = (int *)Dictionary.init(dictionaryLiteral:)( &outlined read-only object #0 of one-time initialization function for TypeNameMap,  &type metadata for String,  &type metadata for CustomTypeReference,  &protocol witness table for String);
  static CustomTypeReference.TypeNameMap = result;
  return result;
}

void static CustomTypeReference.getTypeString(attributeHash:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    unint64_t v2 = OUTLINED_FUNCTION_36_21(0xD00000000000001BLL, (uint64_t)"INIntentParameterObjectType");
    if ((v3 & 1) == 0
      || (uint64_t v5 = OUTLINED_FUNCTION_2_26(v2, v3, v4),
          (OUTLINED_FUNCTION_6_16( v5,  v6,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String,  v7,  v8,  v9,  v10,  v31,  v32,  v33) & 1) == 0))
    {
      if (*(void *)(a1 + 16))
      {
        unint64_t v11 = OUTLINED_FUNCTION_36_21(0xD000000000000019LL, (uint64_t)"INIntentParameterEnumType");
        if ((v12 & 1) == 0
          || (uint64_t v14 = OUTLINED_FUNCTION_2_26(v11, v12, v13),
              (OUTLINED_FUNCTION_6_16( v14,  v15,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String,  v16,  v17,  v18,  v19,  v31,  v32,  v33) & 1) == 0))
        {
          if (*(void *)(a1 + 16))
          {
            unint64_t v20 = OUTLINED_FUNCTION_42_14();
            unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
            if ((v23 & 1) != 0)
            {
              uint64_t v25 = OUTLINED_FUNCTION_2_26(v22, v23, v24);
              OUTLINED_FUNCTION_6_16( v25,  v26,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String,  v27,  v28,  v29,  v30,  v31,  v32,  v33);
            }
          }
        }
      }
    }
  }

  OUTLINED_FUNCTION_42();
}

void static CustomTypeReference.getTypeField(attributeHash:probeKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a1 + 16))
  {
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    goto LABEL_7;
  }

  swift_bridgeObjectRetain(a3);
  unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v6 & 1) == 0)
  {
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    OUTLINED_FUNCTION_14();
    goto LABEL_7;
  }

  OUTLINED_FUNCTION_2_26(v5, v6, v7);
  uint64_t v8 = OUTLINED_FUNCTION_14();
  if (!*((void *)&v17 + 1))
  {
LABEL_7:
    outlined destroy of Any?((uint64_t)&v16);
    goto LABEL_8;
  }

  OUTLINED_FUNCTION_6_16( v8,  v9,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String,  v10,  v11,  v12,  v13,  v14,  v15,  v16);
LABEL_8:
  OUTLINED_FUNCTION_42();
}

uint64_t CustomTypeReference.CodingKeys.init(stringValue:)(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x63617073656D616ELL && a2 == 0xE900000000000065LL)
  {
    unint64_t v5 = 0xE900000000000065LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x63617073656D616ELL, 0xE900000000000065LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 1701667182 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 1LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1701667182LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t CustomTypeReference.CodingKeys.init(intValue:)()
{
  return 2LL;
}

uint64_t CustomTypeReference.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 1701667182LL;
  }
  else {
    return 0x63617073656D616ELL;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CustomTypeReference.CodingKeys()
{
  return CustomTypeReference.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CustomTypeReference.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = CustomTypeReference.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CustomTypeReference.CodingKeys@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = CustomTypeReference.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CustomTypeReference.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CustomTypeReference.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void CustomTypeReference.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = a4;
  uint64_t v17 = a5;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CustomTypeReference.CodingKeys>);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v14);
  unint64_t v15 = lazy protocol witness table accessor for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_1F9398, &unk_1F9398, v15, v14, v13);
  char v19 = 0;
  OUTLINED_FUNCTION_34_20(a2, a3, (uint64_t)&v19);
  if (!v5)
  {
    char v18 = 1;
    OUTLINED_FUNCTION_34_20(v16, v17, (uint64_t)&v18);
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  OUTLINED_FUNCTION_13_8();
}

uint64_t CustomTypeReference.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CustomTypeReference.CodingKeys>);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_35();
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  unint64_t v6 = lazy protocol witness table accessor for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_1F9398, &unk_1F9398, v6, v4, v5);
  if (v1)
  {
    OUTLINED_FUNCTION_35_26();
  }

  else
  {
    char v12 = 0;
    uint64_t v5 = OUTLINED_FUNCTION_29_19((uint64_t)&v12);
    char v11 = 1;
    OUTLINED_FUNCTION_37_21(v5, v8);
    OUTLINED_FUNCTION_29_19((uint64_t)&v11);
    uint64_t v10 = v9;
    OUTLINED_FUNCTION_11_25();
    swift_bridgeObjectRetain(v10);
    OUTLINED_FUNCTION_35_26();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_2_6();
  }

  return v5;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CustomTypeReference@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = CustomTypeReference.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }

  return result;
}

void protocol witness for Encodable.encode(to:) in conformance CustomTypeReference(void *a1)
{
}

uint64_t outlined bridged method (pb) of @objc INCodableDescription.dictionaryRepresentation()(void *a1)
{
  id v1 = [a1 dictionaryRepresentation];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  return v3;
}

unint64_t lazy protocol witness table accessor for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CustomIntentDefinition.CodingKeys, &unk_1F95D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CustomIntentDefinition.CodingKeys, &unk_1F95D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable("\t8\a", &unk_1F95D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CustomIntentDefinition.CodingKeys, &unk_1F95D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type CustomRequestDefinition and conformance CustomRequestDefinition()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomRequestDefinition and conformance CustomRequestDefinition;
  if (!lazy protocol witness table cache variable for type CustomRequestDefinition and conformance CustomRequestDefinition)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CustomRequestDefinition,  &type metadata for CustomRequestDefinition);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomRequestDefinition and conformance CustomRequestDefinition);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CustomRequestDefinition and conformance CustomRequestDefinition;
  if (!lazy protocol witness table cache variable for type CustomRequestDefinition and conformance CustomRequestDefinition)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CustomRequestDefinition,  &type metadata for CustomRequestDefinition);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomRequestDefinition and conformance CustomRequestDefinition);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CustomRequestDefinition.CodingKeys, &unk_1F9548);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CustomRequestDefinition.CodingKeys, &unk_1F9548);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CustomRequestDefinition.CodingKeys, &unk_1F9548);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CustomRequestDefinition.CodingKeys, &unk_1F9548);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type CustomRequestParameterDefinition and conformance CustomRequestParameterDefinition()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomRequestParameterDefinition and conformance CustomRequestParameterDefinition;
  if (!lazy protocol witness table cache variable for type CustomRequestParameterDefinition and conformance CustomRequestParameterDefinition)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CustomRequestParameterDefinition,  &type metadata for CustomRequestParameterDefinition);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomRequestParameterDefinition and conformance CustomRequestParameterDefinition);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CustomRequestParameterDefinition and conformance CustomRequestParameterDefinition;
  if (!lazy protocol witness table cache variable for type CustomRequestParameterDefinition and conformance CustomRequestParameterDefinition)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CustomRequestParameterDefinition,  &type metadata for CustomRequestParameterDefinition);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomRequestParameterDefinition and conformance CustomRequestParameterDefinition);
  }

  return result;
}

uint64_t lazy protocol witness table accessor for type [CustomRequestParameterDefinition] and conformance <A> [A]( unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CustomRequestParameterDefinition]);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CustomRequestParameterDefinition.CodingKeys,  &unk_1F94B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CustomRequestParameterDefinition.CodingKeys,  &unk_1F94B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CustomRequestParameterDefinition.CodingKeys,  &unk_1F94B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CustomRequestParameterDefinition.CodingKeys,  &unk_1F94B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type CustomTypeReference and conformance CustomTypeReference()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomTypeReference and conformance CustomTypeReference;
  if (!lazy protocol witness table cache variable for type CustomTypeReference and conformance CustomTypeReference)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CustomTypeReference,  &type metadata for CustomTypeReference);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomTypeReference and conformance CustomTypeReference);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CustomTypeReference and conformance CustomTypeReference;
  if (!lazy protocol witness table cache variable for type CustomTypeReference and conformance CustomTypeReference)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CustomTypeReference,  &type metadata for CustomTypeReference);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomTypeReference and conformance CustomTypeReference);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type CustomParameterOptions and conformance CustomParameterOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomParameterOptions and conformance CustomParameterOptions;
  if (!lazy protocol witness table cache variable for type CustomParameterOptions and conformance CustomParameterOptions)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CustomParameterOptions,  &type metadata for CustomParameterOptions);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomParameterOptions and conformance CustomParameterOptions);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CustomParameterOptions and conformance CustomParameterOptions;
  if (!lazy protocol witness table cache variable for type CustomParameterOptions and conformance CustomParameterOptions)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CustomParameterOptions,  &type metadata for CustomParameterOptions);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomParameterOptions and conformance CustomParameterOptions);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CustomParameterOptions.CodingKeys, &unk_1F9428);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CustomParameterOptions.CodingKeys, &unk_1F9428);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CustomParameterOptions.CodingKeys, &unk_1F9428);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CustomParameterOptions.CodingKeys, &unk_1F9428);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CustomTypeReference.CodingKeys, &unk_1F9398);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CustomTypeReference.CodingKeys, &unk_1F9398);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CustomTypeReference.CodingKeys, &unk_1F9398);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CustomTypeReference.CodingKeys, &unk_1F9398);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys);
  }

  return result;
}

void type metadata accessor for CustomIntentDefinition()
{
}

void type metadata accessor for CustomRequestDefinition()
{
}

uint64_t initializeWithCopy for CustomRequestParameterDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for CustomRequestParameterDefinition(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = *(_BYTE *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CustomRequestParameterDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomRequestParameterDefinition(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 49))
    {
      LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomRequestParameterDefinition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0u;
    *(_OWORD *)(result + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0u;
    *(_BYTE *)(result + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 9) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for CustomRequestParameterDefinition()
{
}

uint64_t getEnumTagSinglePayload for CustomParameterOptions(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for CustomParameterOptions(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_D6744 + 4 * byte_185B6A[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_D6778 + 4 * byte_185B65[v4]))();
}

uint64_t sub_D6778(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_D6780(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xD6788LL);
  }
  return result;
}

uint64_t sub_D6794(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xD679CLL);
  }
  *(_BYTE *)__n128 result = a2 + 1;
  return result;
}

uint64_t sub_D67A0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_D67A8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for CustomParameterOptions()
{
}

uint64_t destroy for CustomTypeReference(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

void *initializeWithCopy for CustomTypeReference(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for CustomTypeReference(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for CustomTypeReference(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomTypeReference(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomTypeReference(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for CustomTypeReference()
{
}

uint64_t storeEnumTagSinglePayload for CustomTypeReference.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_D69B8 + 4 * byte_185B74[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_D69EC + 4 * byte_185B6F[v4]))();
}

uint64_t sub_D69EC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_D69F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xD69FCLL);
  }
  return result;
}

uint64_t sub_D6A08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xD6A10LL);
  }
  *(_BYTE *)__n128 result = a2 + 1;
  return result;
}

uint64_t sub_D6A14(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_D6A1C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for CustomTypeReference.CodingKeys()
{
  return &unk_1F9398;
}

void *type metadata accessor for CustomParameterOptions.CodingKeys()
{
  return &unk_1F9428;
}

uint64_t storeEnumTagSinglePayload for CustomRequestParameterDefinition.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_D6A98 + 4 * byte_185B7E[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_D6ACC + 4 * byte_185B79[v4]))();
}

uint64_t sub_D6ACC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_D6AD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xD6ADCLL);
  }
  return result;
}

uint64_t sub_D6AE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xD6AF0LL);
  }
  *(_BYTE *)__n128 result = a2 + 2;
  return result;
}

uint64_t sub_D6AF4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_D6AFC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for CustomRequestParameterDefinition.CodingKeys()
{
  return &unk_1F94B8;
}

void *type metadata accessor for CustomRequestDefinition.CodingKeys()
{
  return &unk_1F9548;
}

uint64_t storeEnumTagSinglePayload for CustomParameterOptions.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_D6B68 + 4 * byte_185B83[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_D6B88 + 4 * byte_185B88[v4]))();
  }
}

_BYTE *sub_D6B68(_BYTE *result, char a2)
{
  *__n128 result = a2;
  return result;
}

_BYTE *sub_D6B88(_BYTE *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_D6B90(_DWORD *result, int a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_D6B98(_WORD *result, __int16 a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_D6BA0(_WORD *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_D6BA8(_DWORD *result)
{
  *__n128 result = 0;
  return result;
}

void *type metadata accessor for CustomIntentDefinition.CodingKeys()
{
  return &unk_1F95D8;
}

uint64_t OUTLINED_FUNCTION_0_31( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  return outlined init with copy of Any(*(void *)(v11 + 56) + 32 * a1, (uint64_t)va);
}

  ;
}

uint64_t OUTLINED_FUNCTION_2_26(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return outlined init with copy of Any(*(void *)(v3 + 56) + 32 * a1, (uint64_t)va);
}

  ;
}

uint64_t OUTLINED_FUNCTION_6_32()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_7_26(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

void *OUTLINED_FUNCTION_8_35()
{
  return __swift_project_boxed_opaque_existential_1(v0, v0[3]);
}

char *OUTLINED_FUNCTION_10_26( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  return &a17;
}

uint64_t OUTLINED_FUNCTION_11_25()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_12_26()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void *OUTLINED_FUNCTION_13_24()
{
  return __swift_project_boxed_opaque_existential_1(v0, v1);
}

uint64_t OUTLINED_FUNCTION_17_28()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(v1 - 96, v1 - 97, v0);
}

uint64_t OUTLINED_FUNCTION_18_26(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

unint64_t OUTLINED_FUNCTION_22_20(uint64_t a1, uint64_t a2)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
}

  ;
}

uint64_t OUTLINED_FUNCTION_25_27()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_29_19(uint64_t a1)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_33_19()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 8));
}

uint64_t OUTLINED_FUNCTION_34_20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

uint64_t OUTLINED_FUNCTION_35_26()
{
  return __swift_destroy_boxed_opaque_existential_1Tm(v0);
}

unint64_t OUTLINED_FUNCTION_36_21@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (a2 - 32) | 0x8000000000000000LL);
}

uint64_t OUTLINED_FUNCTION_37_21(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t OUTLINED_FUNCTION_38_21(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

unint64_t OUTLINED_FUNCTION_42_14()
{
  return 0xD000000000000015LL;
}

uint64_t OUTLINED_FUNCTION_43_19(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3);
}

void CustomIntentNeedsDisambiguationFlowStrategy.__allocating_init(voiceCommandName:deviceState:modeInfoProvider:siriEnvironment:runCustomIntentCatWrapperSimple:)()
{
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  OUTLINED_FUNCTION_55_1();
  uint64_t v21 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = (void *)v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  unint64_t v15 = *(void *)(v6 + 24);
  uint64_t v14 = *(void *)(v6 + 32);
  uint64_t v16 = __swift_mutable_project_boxed_opaque_existential_1(v6, v15);
  __chkstk_darwin(v16);
  OUTLINED_FUNCTION_35();
  char v19 = v18 - v17;
  (*(void (**)(uint64_t))(v20 + 16))(v18 - v17);
  v21(v13, v11, v9, v19, v5, v3, v0, v15, v14);
  __swift_destroy_boxed_opaque_existential_1Tm(v7);
  OUTLINED_FUNCTION_24_0();
}

void CustomIntentNeedsDisambiguationFlowStrategy.init(voiceCommandName:deviceState:modeInfoProvider:siriEnvironment:runCustomIntentCatWrapperSimple:)()
{
}

void CustomIntentNeedsDisambiguationFlowStrategy.paginationStyle(resolveRecord:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = OUTLINED_FUNCTION_126_1();
  uint64_t v45 = *(void *)(v3 - 8);
  uint64_t v46 = v3;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_68_12(v5, v41);
  uint64_t v6 = OUTLINED_FUNCTION_71_10();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_35();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INIntent>);
  uint64_t v12 = OUTLINED_FUNCTION_102_4();
  uint64_t v13 = ParameterIdentifier.name.getter(v12);
  uint64_t v15 = v14;
  OUTLINED_FUNCTION_20_23(v10, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  uint64_t v16 = (void *)ParameterResolutionRecord.result.getter(v11);
  uint64_t v17 = (void *)ParameterResolutionRecord.intent.getter(v11);
  static OutputUtils.shouldReadItemsInDisambiguationList(siriEnvironment:)();
  if ((v18 & 1) == 0)
  {
    uint64_t v40 = OUTLINED_FUNCTION_28_4();
LABEL_12:
    static PaginationStyle.noPagination()(v40);
LABEL_13:

    OUTLINED_FUNCTION_24_0();
    return;
  }

  uint64_t v43 = v2;
  type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy();
  outlined init with copy of DeviceState((uint64_t)(v0 + 2), (uint64_t)&v48);
  static CustomIntentNeedsDisambiguationFlowStrategy.makeDisambiguationList(resolveRecord:deviceState:)();
  uint64_t v20 = v19;
  __swift_destroy_boxed_opaque_existential_1Tm(&v48);
  id v21 = [v17 _codableDescription];
  outlined bridged method (mbgnn) of @objc INCodableDescription.attribute(byName:)(v13, v15, v21);
  uint64_t v23 = v22;

  if (!v23)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    uint64_t v40 = OUTLINED_FUNCTION_28_4();
    goto LABEL_12;
  }

  id v25 = OUTLINED_FUNCTION_26(v24, "windowSize");

  uint64_t v26 = *(void *)(v20 + 16);
  swift_bridgeObjectRelease();
  if (!__OFADD__(v25, 1LL))
  {
    if ((uint64_t)v25 + 1 < v26)
    {
      id v42 = v25;
      uint64_t v27 = v0[5];
      uint64_t v28 = v0[6];
      uint64_t v29 = __swift_project_boxed_opaque_existential_1(v0 + 2, v27);
      uint64_t v30 = v16;
      uint64_t v41 = (uint64_t)&v41;
      uint64_t v31 = *(void *)(v27 - 8);
      __chkstk_darwin(v29);
      OUTLINED_FUNCTION_63_8();
      (*(void (**)(void *))(v31 + 16))(v0 + 2);
      unint64_t v32 = v44;
      dispatch thunk of DeviceState.siriLocale.getter(v27, v28);
      OUTLINED_FUNCTION_20_23((uint64_t)(v0 + 2), *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8));
      INIntentResolutionResult.getDisplayHints(intent:parameter:locale:shouldIncludeOrdinalReference:)( v17,  v13,  v15,  v32,  0);
      uint64_t v34 = v33;
      (*(void (**)(unint64_t, uint64_t))(v45 + 8))(v32, v46);
      uint64_t v16 = v30;
      v0[7] = v34;
      swift_bridgeObjectRelease();
      INIntentResolutionResult.safeJSONDictionaryRepresentation(for:parameterName:)((uint64_t)v17);
      uint64_t v36 = v35;
      OUTLINED_FUNCTION_28_4();
      specialized Dictionary.subscript.getter(0x6F697463656C6573LL, 0xEE00736D6574496ELL, v36, &v48);
      OUTLINED_FUNCTION_14();
      if (v49)
      {
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : Any]]);
        int v38 = OUTLINED_FUNCTION_35_6((uint64_t)&v47, (uint64_t)&v48, (uint64_t)&type metadata for Any + 8, v37);
        uint64_t v39 = v47;
        if (!v38) {
          uint64_t v39 = 0LL;
        }
      }

      else
      {
        outlined destroy of Result<Output, Error>((uint64_t)&v48, &demangling cache variable for type metadata for Any?);
        uint64_t v39 = 0LL;
      }

      v0[8] = v39;
      swift_bridgeObjectRelease();
      static PaginationStyle.pageSize(_:)(v42);
      goto LABEL_13;
    }

    goto LABEL_11;
  }

  __break(1u);
}

void static CustomIntentNeedsDisambiguationFlowStrategy.makeDisambiguationList(resolveRecord:deviceState:)()
{
  uint64_t v2 = v1;
  uint64_t v49 = OUTLINED_FUNCTION_126_1();
  uint64_t v54 = *(void *)(v49 - 8);
  uint64_t v3 = __chkstk_darwin(v49);
  uint64_t v50 = v4;
  uint64_t v51 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v53 = (char *)&v43 - v5;
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Any, CustomIntentDisambiguationItem>);
  uint64_t v52 = *(void *)(v55 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_83();
  uint64_t v56 = v7;
  uint64_t v48 = OUTLINED_FUNCTION_71_10();
  uint64_t v45 = *(void *)(v48 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_83();
  uint64_t v47 = v9;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INIntent>);
  uint64_t v10 = (void *)ParameterResolutionRecord.result.getter(v46);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v11 = OUTLINED_FUNCTION_48();
  uint64_t v12 = (os_log_s *)__swift_project_value_buffer(v11, (uint64_t)static Logger.voiceCommands);
  id v13 = v10;
  Logger.logObject.getter(v13);
  os_log_type_t v14 = OUTLINED_FUNCTION_58();
  if (os_log_type_enabled(v12, v14))
  {
    uint64_t v15 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v16 = (void *)OUTLINED_FUNCTION_38(8LL);
    uint64_t v43 = v15;
    *(_DWORD *)uint64_t v15 = 138412290;
    id v57 = v13;
    id v17 = v13;
    unint64_t v44 = v2;
    id v18 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v15 + 4);
    uint64_t v0 = v16;
    void *v16 = v13;

    uint64_t v19 = v43;
    uint64_t v2 = v44;
    OUTLINED_FUNCTION_31_2(&dword_0, v12, v14, "intentResolutionResult: %@", v43);
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v0, 1LL, v20);
    OUTLINED_FUNCTION_1_0((uint64_t)v0);
    OUTLINED_FUNCTION_1_0((uint64_t)v19);
  }

  else
  {
  }

  static Array._unconditionallyBridgeFromObjectiveC(_:)( [v13 disambiguationItems],  (char *)&type metadata for Any + 8);
  OUTLINED_FUNCTION_35_10();
  uint64_t v21 = v0[2];
  OUTLINED_FUNCTION_37();
  unint64_t v22 = &selRef_alternatives;
  if (v21) {
    unint64_t v22 = &selRef_disambiguationItems;
  }
  id v23 = [v13 *v22];
  uint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, (char *)&type metadata for Any + 8);

  id v25 = [(id)OUTLINED_FUNCTION_112_2() _codableDescription];
  OUTLINED_FUNCTION_35_10();
  uint64_t v26 = v47;
  uint64_t v27 = OUTLINED_FUNCTION_102_4();
  uint64_t v28 = ParameterIdentifier.name.getter(v27);
  uint64_t v30 = v29;
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v26, v48);
  id v31 = outlined bridged method (mbnn) of @objc INCodableDescription.attribute(byName:)( v28,  v30,  v0,  (SEL *)&selRef_attributeByKeyPath_);

  uint64_t v32 = v2[3];
  uint64_t v33 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v32);
  uint64_t v34 = (uint64_t)v53;
  dispatch thunk of DeviceState.siriLocale.getter(v32, v33);
  uint64_t v35 = v54;
  uint64_t v36 = v51;
  uint64_t v37 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v51, v34, v49);
  uint64_t v38 = *(unsigned __int8 *)(v35 + 80);
  uint64_t v39 = (v38 + 24) & ~v38;
  uint64_t v40 = swift_allocObject(&unk_1F96A8, v39 + v50, v38 | 7);
  *(void *)(v40 + 16) = v31;
  (*(void (**)(uint64_t, char *, uint64_t))(v35 + 32))(v40 + v39, v36, v37);
  v31;
  uint64_t v41 = v56;
  Transformer.init(transform:)( partial apply for closure #1 in static Transformer<>.disambiguationItemTransformer(attributeMetadata:locale:),  v40,  (char *)&type metadata for Any + 8);
  uint64_t v42 = OUTLINED_FUNCTION_106_1(v34, *(uint64_t (**)(uint64_t, uint64_t))(v35 + 8));
  __chkstk_darwin(v42);
  *(&v43 - __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v41;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSayypG_18SiriLinkFlowPlugin30CustomIntentDisambiguationItemVsAE_pTg5( (void (*)(void *__return_ptr, uint64_t, uint64_t *))partial apply for closure #1 in static CustomIntentNeedsDisambiguationFlowStrategy.makeDisambiguationList(resolveRecord:deviceState:),  (uint64_t)(&v43 - 4),  v24);
  OUTLINED_FUNCTION_50_6();

  OUTLINED_FUNCTION_77_11();
  OUTLINED_FUNCTION_28_4();
  OUTLINED_FUNCTION_24_0();
}

void CustomIntentNeedsDisambiguationFlowStrategy.actionForInput(_:resolveRecord:)()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for Parse.DirectInvocation(0LL);
  v40[8] = *(void *)(v6 - 8);
  v40[9] = v6;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_68_12(v8, v40[0]);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INIntent>);
  v40[6] = *(void *)(v9 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_61_6();
  v40[5] = v11;
  __chkstk_darwin(v12);
  v40[4] = (uint64_t)v40 - v13;
  uint64_t v14 = OUTLINED_FUNCTION_49_13();
  uint64_t v43 = type metadata accessor for Parse(v14);
  uint64_t v41 = *(void *)(v43 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_61_6();
  v40[10] = v16;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v40 - v18;
  uint64_t v20 = type metadata accessor for Input(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  OUTLINED_FUNCTION_35();
  uint64_t v24 = v23 - v22;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v25 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.voiceCommands);
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
  uint64_t v42 = v3;
  uint64_t v27 = v26(v24, v3, v20);
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = OUTLINED_FUNCTION_38(12LL);
    v40[1] = v1;
    id v31 = (uint8_t *)v30;
    uint64_t v32 = OUTLINED_FUNCTION_38(32LL);
    __int128 v40[2] = v9;
    uint64_t v33 = v32;
    uint64_t v45 = v32;
    v40[3] = v5;
    *(_DWORD *)id v31 = 136315138;
    v40[0] = (uint64_t)(v31 + 4);
    OUTLINED_FUNCTION_94_5( (unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input,  v34,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
    uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter(v20, v35);
    uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v40[0]);
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_57_4(v24, *(uint64_t (**)(uint64_t, uint64_t))(v21 + 8));
    OUTLINED_FUNCTION_31_2(&dword_0, v28, v29, "#CustomIntentNeedsDisambiguationFlowStrategy actionForInput: %s", v31);
    OUTLINED_FUNCTION_84_11((uint64_t)&type metadata for Any);
    OUTLINED_FUNCTION_1_0(v33);
    OUTLINED_FUNCTION_1_0((uint64_t)v31);
  }

  else
  {
    OUTLINED_FUNCTION_57_4(v24, *(uint64_t (**)(uint64_t, uint64_t))(v21 + 8));
  }

  Input.parse.getter(v38);
  char v39 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)((uint64_t)v19);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v19, v43);
  __asm { BR              X10 }

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.makeDisambiguationItemContainer(resolveRecord:)( uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)CustomIntentNeedsDisambiguationFlowStrategy.makeDisambiguationItemContainer(resolveRecord:));
}

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.makeDisambiguationItemContainer(resolveRecord:)()
{
  uint64_t v1 = *(void *)(v0 + 64);
  type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy();
  outlined init with copy of DeviceState(v1 + 16, v0 + 16);
  static CustomIntentNeedsDisambiguationFlowStrategy.makeDisambiguationList(resolveRecord:deviceState:)();
  uint64_t v3 = v2;
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE v5[32] = a4;
  v5[33] = v4;
  v5[30] = a2;
  v5[31] = a3;
  v5[29] = a1;
  uint64_t v6 = type metadata accessor for Parse.DirectInvocation(0LL);
  v5[34] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[35] = v7;
  v5[36] = OUTLINED_FUNCTION_9_0(v7);
  uint64_t v8 = type metadata accessor for USOParse(0LL);
  v5[37] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[38] = v9;
  v5[39] = OUTLINED_FUNCTION_9_0(v9);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INIntent>);
  _BYTE v5[40] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[41] = v11;
  v5[42] = OUTLINED_FUNCTION_4_0(v11);
  v5[43] = OUTLINED_FUNCTION_11_0();
  uint64_t v12 = type metadata accessor for Parse(0LL);
  v5[44] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v5[45] = v13;
  v5[46] = OUTLINED_FUNCTION_4_0(v13);
  v5[47] = OUTLINED_FUNCTION_11_0();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationResult<IntentPromptAnswer<INIntent>>?);
  v5[48] = OUTLINED_FUNCTION_4_0(*(void *)(v14 - 8));
  v5[49] = OUTLINED_FUNCTION_11_0();
  uint64_t v15 = OUTLINED_FUNCTION_71_10();
  v5[50] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v5[51] = v16;
  v5[52] = OUTLINED_FUNCTION_9_0(v16);
  uint64_t v17 = type metadata accessor for Input(0LL);
  v5[53] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v5[54] = v18;
  v5[55] = OUTLINED_FUNCTION_9_0(v18);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v2 = v0[54];
  uint64_t v1 = v0[55];
  uint64_t v3 = v0[53];
  uint64_t v4 = v0[30];
  uint64_t v5 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[53];
  if (v9)
  {
    uint64_t v11 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v12 = OUTLINED_FUNCTION_38(32LL);
    *(void *)&__int128 v165 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    OUTLINED_FUNCTION_94_5( (unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input,  v13,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v10, v14);
    v0[28] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, (uint64_t *)&v165);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 28, v0 + 29, v11 + 4);
    OUTLINED_FUNCTION_56_1();
    OUTLINED_FUNCTION_78_9();
    OUTLINED_FUNCTION_31_2(&dword_0, v7, v8, "#CustomIntentNeedsDisambiguationFlowStrategy received input: %s", v11);
    OUTLINED_FUNCTION_84_11((uint64_t)&type metadata for Any);
    OUTLINED_FUNCTION_1_0(v12);
    OUTLINED_FUNCTION_1_0((uint64_t)v11);
  }

  else
  {
    OUTLINED_FUNCTION_78_9();
  }

  uint64_t v18 = v0[51];
  uint64_t v17 = v0[52];
  uint64_t v19 = v0[49];
  uint64_t v20 = v0[47];
  uint64_t v164 = v0;
  uint64_t v21 = v0[45];
  uint64_t v159 = v164[44];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INIntent>);
  uint64_t v22 = OUTLINED_FUNCTION_102_4();
  uint64_t v158 = ParameterIdentifier.name.getter(v22);
  unint64_t v162 = v23;
  OUTLINED_FUNCTION_81_9(v17, *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
  uint64_t v24 = (void *)OUTLINED_FUNCTION_112_2();
  Input.parse.getter(v24);
  CustomIntentNeedsDisambiguationFlowStrategy.getVoiceCommandPagination(parse:)();
  uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
  v25(v20, v159);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationResult<IntentPromptAnswer<INIntent>>);
  int v27 = OUTLINED_FUNCTION_107_1(v19);
  uint64_t v28 = v164[49];
  if (v27 == 1)
  {
    uint64_t v30 = v164[47];
    uint64_t v29 = v164[48];
    uint64_t v31 = v164[44];
    outlined destroy of Result<Output, Error>( v164[49],  &demangling cache variable for type metadata for DisambiguationResult<IntentPromptAnswer<INIntent>>?);
    Input.parse.getter(v32);
    CustomIntentNeedsDisambiguationFlowStrategy.getVoiceCommandConfirmation(parse:)(v30);
    v25(v30, v31);
    int v33 = OUTLINED_FUNCTION_107_1(v29);
    uint64_t v34 = v164[48];
    if (v33 == 1)
    {
      uint64_t v36 = v164[45];
      uint64_t v35 = v164[46];
      uint64_t v37 = v164[44];
      outlined destroy of Result<Output, Error>( v34,  &demangling cache variable for type metadata for DisambiguationResult<IntentPromptAnswer<INIntent>>?);
      Input.parse.getter(v38);
      int v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 88))(v35, v37);
      if (v39 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
      {
        (*(void (**)(void, void))(v164[45] + 96LL))(v164[46], v164[44]);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
        uint64_t v40 = (void *)Parse.ServerConversion.siriKitIntent.getter();
        id v41 = [v40 _codableDescription];

        id v42 = outlined bridged method (mbnn) of @objc INCodableDescription.attribute(byName:)( v158,  v162,  v41,  (SEL *)&selRef_attributeByName_);
        if (v42)
        {
          *((void *)&v166 + 1) = OUTLINED_FUNCTION_72( v43,  &lazy cache variable for type metadata for INCodableAttribute,  &OBJC_CLASS___INCodableAttribute_ptr);
          *(void *)&__int128 v165 = v42;
        }

        else
        {
          __int128 v165 = 0u;
          __int128 v166 = 0u;
        }

        uint64_t v81 = v164[46];
        uint64_t v82 = v164[43];
        OUTLINED_FUNCTION_85_9();
        uint64_t v84 = *(void *)(v83 + 320);
        id v85 = v42;
        uint64_t v86 = Parse.ServerConversion.siriKitIntent.getter();
        uint64_t v87 = OUTLINED_FUNCTION_72( v86,  (unint64_t *)&lazy cache variable for type metadata for INIntent,  &OBJC_CLASS___INIntent_ptr);
        IntentPromptAnswer.init(answeredValue:updatedIntent:)(&v165, v86, v87);
        static DisambiguationResult.chosenItem(_:)(v82, v84);

        OUTLINED_FUNCTION_12_5();
        OUTLINED_FUNCTION_121_3();
        v88(v82, v84);
        uint64_t v89 = OUTLINED_FUNCTION_127_3();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v89 - 8) + 8LL))(v81, v89);
        goto LABEL_13;
      }

      if (v39 == enum case for Parse.directInvocation(_:))
      {
        uint64_t v49 = v164[45];
        uint64_t v48 = v164[46];
        uint64_t v50 = (uint8_t *)v164[44];
        uint64_t v52 = v164[35];
        uint64_t v51 = v164[36];
        OUTLINED_FUNCTION_56_1();
        OUTLINED_FUNCTION_81_9(v48, *(uint64_t (**)(uint64_t, uint64_t))(v49 + 96));
        OUTLINED_FUNCTION_76_6(v51, v48, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 32));
        uint64_t v53 = (os_log_s *)OUTLINED_FUNCTION_64_1();
        os_log_type_t v54 = static os_log_type_t.debug.getter();
        uint64_t v55 = v54;
        if (os_log_type_enabled(v53, v54))
        {
          uint64_t v56 = (_WORD *)OUTLINED_FUNCTION_57_1();
          OUTLINED_FUNCTION_26_1(v56);
          OUTLINED_FUNCTION_47_1( &dword_0,  v53,  (os_log_type_t)v55,  "CustomIntentNeedsDisambiguationFlowStrategy parsing direct Invocation",  v50);
          OUTLINED_FUNCTION_1_0((uint64_t)v50);
        }

        uint64_t v58 = Parse.DirectInvocation.identifier.getter(v57);
        if (v58 == 0xD000000000000043LL && v59 == 0x8000000000192D90LL)
        {
          uint64_t v60 = swift_bridgeObjectRelease();
        }

        else
        {
          char v90 = OUTLINED_FUNCTION_62_13(v58, v59, 67LL, 0x8000000000192D90LL);
          uint64_t v60 = OUTLINED_FUNCTION_20();
          if ((v90 & 1) == 0)
          {
            OUTLINED_FUNCTION_64_1();
            os_log_type_t v122 = OUTLINED_FUNCTION_58();
            uint64_t v61 = v164;
            if (OUTLINED_FUNCTION_31_0(v122))
            {
              __int128 v123 = (_WORD *)OUTLINED_FUNCTION_57_1();
              OUTLINED_FUNCTION_43_5(v123);
              OUTLINED_FUNCTION_33_2( &dword_0,  v124,  v125,  "#CustomIntentNeedsDisambiguationFlowStrategy unsupported direct invocation type");
              OUTLINED_FUNCTION_1_0(v55);
            }

            OUTLINED_FUNCTION_24_23();
            unint64_t v126 = lazy protocol witness table accessor for type DisambiguationError and conformance DisambiguationError();
            uint64_t v116 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for DisambiguationError, v126);
            *uint64_t v117 = 0;
LABEL_45:
            OUTLINED_FUNCTION_60_14(v116, (uint64_t)v117, v118, v119, v120);

LABEL_46:
            OUTLINED_FUNCTION_121_3();
            OUTLINED_FUNCTION_17_4(v144);
            goto LABEL_47;
          }
        }

        uint64_t v61 = v164;
        uint64_t v91 = Parse.DirectInvocation.userData.getter(v60);
        if (v91)
        {
          uint64_t v92 = v91;
          id v93 = static SLFDisambiguationItemConverter.toIntent(userData:)();
          swift_bridgeObjectRelease();
          if (v93)
          {
            uint64_t v94 = v164[42];
            OUTLINED_FUNCTION_85_9();
            uint64_t v96 = *(void *)(v95 + 320);
            uint64_t v97 = v164[36];
            uint64_t v98 = v164[35];
            uint64_t v99 = v164[34];
            __int128 v165 = 0u;
            __int128 v166 = 0u;
            uint64_t v101 = OUTLINED_FUNCTION_72( v100,  (unint64_t *)&lazy cache variable for type metadata for INIntent,  &OBJC_CLASS___INIntent_ptr);
            id v102 = v93;
            IntentPromptAnswer.init(answeredValue:updatedIntent:)(&v165, v102, v101);
            static DisambiguationResult.chosenItem(_:)(v94, v96);

            OUTLINED_FUNCTION_121_3();
            OUTLINED_FUNCTION_57_4(v94, v103);
            (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v97, v99);
            goto LABEL_13;
          }

          OUTLINED_FUNCTION_64_1();
          os_log_type_t v139 = OUTLINED_FUNCTION_58();
          if (OUTLINED_FUNCTION_31_0(v139))
          {
            uint64_t v140 = (_WORD *)OUTLINED_FUNCTION_57_1();
            OUTLINED_FUNCTION_43_5(v140);
            OUTLINED_FUNCTION_33_2( &dword_0,  v141,  v142,  "#CustomIntentNeedsDisambiguationFlowStrategy cannot parse user data");
            OUTLINED_FUNCTION_1_0(v92);
          }

          OUTLINED_FUNCTION_24_23();
          unint64_t v143 = lazy protocol witness table accessor for type DisambiguationError and conformance DisambiguationError();
          uint64_t v116 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for DisambiguationError, v143);
          char v121 = 2;
        }

        else
        {
          OUTLINED_FUNCTION_64_1();
          os_log_type_t v111 = OUTLINED_FUNCTION_58();
          if (OUTLINED_FUNCTION_31_0(v111))
          {
            uint64_t v112 = (_WORD *)OUTLINED_FUNCTION_57_1();
            OUTLINED_FUNCTION_43_5(v112);
            OUTLINED_FUNCTION_33_2(&dword_0, v113, v114, "#CustomIntentNeedsDisambiguationFlowStrategy no user data");
            OUTLINED_FUNCTION_1_0(v55);
          }

          OUTLINED_FUNCTION_24_23();
          unint64_t v115 = lazy protocol witness table accessor for type DisambiguationError and conformance DisambiguationError();
          uint64_t v116 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for DisambiguationError, v115);
          char v121 = 1;
        }

        *uint64_t v117 = v121;
        goto LABEL_45;
      }

      uint64_t v61 = v164;
      uint64_t v62 = v164[46];
      if (v39 != enum case for Parse.uso(_:))
      {
        uint64_t v104 = v164[44];
        OUTLINED_FUNCTION_56_1();
        unint64_t v105 = lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors();
        uint64_t v106 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for RunVoiceShortcutFlowErrors, v105);
        _BYTE *v107 = 0;
        OUTLINED_FUNCTION_60_14(v106, (uint64_t)v107, v108, v109, v110);

        v25(v62, v104);
LABEL_47:
        swift_task_dealloc();
        OUTLINED_FUNCTION_20_0();
        OUTLINED_FUNCTION_15_0();
        OUTLINED_FUNCTION_18_0();
        OUTLINED_FUNCTION_33_0();
        OUTLINED_FUNCTION_31();
        OUTLINED_FUNCTION_29_0();
        OUTLINED_FUNCTION_30_0();
        OUTLINED_FUNCTION_20_2();
        OUTLINED_FUNCTION_40_0();
        uint64_t v46 = (uint64_t (*)(void))v61[1];
        return v46();
      }

      uint64_t v63 = v164 + 13;
      uint64_t v64 = v164[39];
      uint64_t v65 = v164[38];
      uint64_t v66 = v164[37];
      (*(void (**)(void, void))(v164[45] + 96LL))(v164[46], v164[44]);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 32))(v64, v62, v66);
      uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<CustomIntentDisambiguationItem>);
      uint64_t v68 = PaginatedItemContainer.items.getter(v67);
      uint64_t v69 = PaginatedItemContainer.page.getter(v67);
      uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputToDisambiguationItemsConverter<CustomIntentDisambiguationItem>);
      swift_allocObject(v70, 40LL, 7LL);
      uint64_t v71 = specialized InputToDisambiguationItemsConverter.init(disambiguationItems:page:)(v68, v69);
      uint64_t v72 = (*(uint64_t (**)(uint64_t))(*v71 + 136LL))(v64);
      specialized Collection.first.getter(v72, (uint64_t)(v164 + 13));
      OUTLINED_FUNCTION_20();
      if (!v164[14])
      {
        outlined destroy of Result<Output, Error>( (uint64_t)v63,  &demangling cache variable for type metadata for CustomIntentDisambiguationItem?);
        uint64_t v128 = (void *)Logger.logObject.getter(v127);
        os_log_type_t v129 = static os_log_type_t.error.getter();
        if (OUTLINED_FUNCTION_31_0(v129))
        {
          uint64_t v130 = (_WORD *)OUTLINED_FUNCTION_57_1();
          OUTLINED_FUNCTION_43_5(v130);
          OUTLINED_FUNCTION_33_2(&dword_0, v131, v132, "#parseDisambiguationResult: cannot get selected items");
          OUTLINED_FUNCTION_1_0(v68);
        }

        uint64_t v133 = v164[41];
        uint64_t v134 = v164[42];
        uint64_t v161 = v164[39];
        uint64_t v156 = v164[38];
        uint64_t v157 = v164[37];

        *((_OWORD *)v164 + 1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
        *((_OWORD *)v164 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 13) = 0u;
        id v135 = static INIntentParameterHelper.applyParameterValue(_:_:_:applyValueStrategy:)( v24,  v158,  v162,  (uint64_t)(v164 + 24),  0LL,  1);
        outlined destroy of Result<Output, Error>( (uint64_t)(v164 + 24),  &demangling cache variable for type metadata for Any?);
        uint64_t v136 = swift_bridgeObjectRelease();
        __int128 v165 = 0u;
        __int128 v166 = 0u;
        uint64_t v137 = OUTLINED_FUNCTION_72( v136,  (unint64_t *)&lazy cache variable for type metadata for INIntent,  &OBJC_CLASS___INIntent_ptr);
        id v138 = v135;
        IntentPromptAnswer.init(answeredValue:updatedIntent:)(&v165, v138, v137);
        OUTLINED_FUNCTION_119_4();

        OUTLINED_FUNCTION_128_0();
        OUTLINED_FUNCTION_106_1(v134, *(uint64_t (**)(uint64_t, uint64_t))(v133 + 8));
        (*(void (**)(uint64_t, uint64_t))(v156 + 8))(v161, v157);
        goto LABEL_13;
      }

      memcpy(v164 + 2, v63, 0x51uLL);
      uint64_t v73 = (void *)static SLFDisambiguationItemConverter.getUpdatedIntent(intent:chosenItem:parameterName:)( v24,  v164 + 2,  v158,  v162);
      uint64_t v74 = swift_bridgeObjectRelease();
      if (!v73)
      {
        uint64_t v145 = (void *)Logger.logObject.getter(v74);
        os_log_type_t v146 = static os_log_type_t.error.getter();
        if (OUTLINED_FUNCTION_31_0(v146))
        {
          uint64_t v147 = (_WORD *)OUTLINED_FUNCTION_57_1();
          OUTLINED_FUNCTION_43_5(v147);
          OUTLINED_FUNCTION_33_2(&dword_0, v148, v149, "#parseDisambiguationResult: cannot update intent");
          OUTLINED_FUNCTION_1_0(v68);
        }

        uint64_t v61 = (void *)v164[38];

        unint64_t v150 = lazy protocol witness table accessor for type DisambiguationError and conformance DisambiguationError();
        uint64_t v151 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for DisambiguationError, v150);
        *uint64_t v152 = 3;
        OUTLINED_FUNCTION_60_14(v151, (uint64_t)v152, v153, v154, v155);

        OUTLINED_FUNCTION_128_0();
        outlined destroy of CustomIntentDisambiguationItem((uint64_t)(v164 + 2));
        goto LABEL_46;
      }

      uint64_t v75 = v164[42];
      OUTLINED_FUNCTION_85_9();
      uint64_t v76 = v164[38];
      uint64_t v160 = v164[37];
      uint64_t v163 = v164[39];
      uint64_t v77 = CustomIntentDisambiguationItem.getRawValue()((uint64_t)&v165);
      uint64_t v78 = OUTLINED_FUNCTION_72( (uint64_t)v77,  (unint64_t *)&lazy cache variable for type metadata for INIntent,  &OBJC_CLASS___INIntent_ptr);
      id v79 = v73;
      IntentPromptAnswer.init(answeredValue:updatedIntent:)(&v165, v79, v78);
      OUTLINED_FUNCTION_119_4();

      OUTLINED_FUNCTION_128_0();
      OUTLINED_FUNCTION_121_3();
      OUTLINED_FUNCTION_106_1(v75, v80);
      outlined destroy of CustomIntentDisambiguationItem((uint64_t)(v164 + 2));
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v163, v160);
    }

    else
    {
      uint64_t v45 = v164[29];

      OUTLINED_FUNCTION_56_1();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 32LL))(v45, v34, v26);
    }
  }

  else
  {
    uint64_t v44 = v164[29];

    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 32LL))(v44, v28, v26);
  }

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[14] = a3;
  v4[15] = v3;
  v4[12] = a1;
  v4[13] = a2;
  return OUTLINED_FUNCTION_6_2((uint64_t)CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:));
}

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<CustomIntentDisambiguationItem>);
  uint64_t v2 = (uint8_t *)PaginatedItemContainer.pageSize.getter(v1);
  uint64_t v3 = *(os_log_s **)(PaginatedItemContainer.items.getter(v1) + 16);
  swift_bridgeObjectRelease();
  if ((uint64_t)v2 >= (uint64_t)v3)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v9 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
    OUTLINED_FUNCTION_9_5();
    os_log_type_t v10 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_45_0(v10))
    {
      uint64_t v11 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_26_1(v11);
      OUTLINED_FUNCTION_47_1( &dword_0,  v3,  (os_log_type_t)v1,  "#CustomIntentNeedsDisambiguationFlowStrategy: prompt without pagination",  v2);
      OUTLINED_FUNCTION_1_0((uint64_t)v2);
    }

    uint64_t v12 = v0[15];

    uint64_t v13 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(*(void *)v12 + 288LL));
    v0[18] = (uint64_t)v13;
    *uint64_t v13 = v0;
    v13[1] = CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
    return v14(v0 + 2, v0[14]);
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v4 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.voiceCommands);
    OUTLINED_FUNCTION_9_5();
    os_log_type_t v5 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_45_0(v5))
    {
      uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_26_1(v6);
      OUTLINED_FUNCTION_47_1( &dword_0,  v3,  (os_log_type_t)v1,  "#CustomIntentNeedsDisambiguationFlowStrategy: prompt with pagination",  v2);
      OUTLINED_FUNCTION_1_0((uint64_t)v2);
    }

    uint64_t v7 = (uint64_t **)swift_task_alloc(dword_21A81C);
    v0[16] = (uint64_t)v7;
    *uint64_t v7 = v0;
    v7[1] = (uint64_t *)CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
    return CustomIntentNeedsDisambiguationFlowStrategy.makePromptForPagination(resolveRecord:paginatedItems:)( (uint64_t)(v0 + 7),  v0[14],  v0[13]);
  }

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  OUTLINED_FUNCTION_50_0();
  *uint64_t v2 = *v1;
  *(void *)(v3 + 136) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  outlined init with take of AceServiceInvokerAsync((__int128 *)(v0 + 56), *(void *)(v0 + 96));
  *(_BYTE *)(*(void *)(v0 + 120) + 72LL) = 0;
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_27_2(v1);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  OUTLINED_FUNCTION_50_0();
  *uint64_t v2 = *v1;
  *(void *)(v3 + 15__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  outlined init with take of AceServiceInvokerAsync((__int128 *)(v0 + 16), *(void *)(v0 + 96));
  *(_BYTE *)(*(void *)(v0 + 120) + 72LL) = 0;
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_27_2(v1);
}

{
  return OUTLINED_FUNCTION_72_8();
}

{
  return OUTLINED_FUNCTION_72_8();
}

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguationNoPagination(resolveRecord:)( uint64_t a1, uint64_t a2)
{
  v3[52] = a2;
  v3[53] = v2;
  v3[51] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  v3[54] = OUTLINED_FUNCTION_4_0(*(void *)(v4 - 8));
  v3[55] = OUTLINED_FUNCTION_11_0();
  v3[56] = OUTLINED_FUNCTION_11_0();
  uint64_t v5 = type metadata accessor for DialogPhase(0LL);
  v3[57] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[58] = v6;
  v3[59] = OUTLINED_FUNCTION_4_0(v6);
  v3[60] = OUTLINED_FUNCTION_11_0();
  uint64_t v7 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[61] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[62] = v8;
  v3[63] = OUTLINED_FUNCTION_9_0(v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[64] = OUTLINED_FUNCTION_4_0(*(void *)(v9 - 8));
  v3[65] = OUTLINED_FUNCTION_11_0();
  uint64_t v10 = OUTLINED_FUNCTION_71_10();
  v3[66] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[67] = v11;
  v3[68] = OUTLINED_FUNCTION_9_0(v11);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguationNoPagination(resolveRecord:)()
{
  uint64_t v1 = *(void *)(v0 + 544);
  uint64_t v2 = *(void *)(v0 + 536);
  uint64_t v3 = *(void *)(v0 + 424);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INIntent>);
  *(void *)(v0 + 55__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v4;
  *(void *)(v0 + 560) = ParameterResolutionRecord.intent.getter(v4);
  uint64_t v5 = ParameterResolutionRecord.parameter.getter(v4);
  *(void *)(v0 + 56__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = ParameterIdentifier.name.getter(v5);
  *(void *)(v0 + 576) = v6;
  OUTLINED_FUNCTION_57_4(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy();
  outlined init with copy of DeviceState(v3 + 16, v0 + 72);
  static CustomIntentNeedsDisambiguationFlowStrategy.makeDisambiguationList(resolveRecord:deviceState:)();
  *(void *)(v0 + 58__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v7;
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 72));
  *(_BYTE *)(v0 + 720) = INIntent.isRestricted()();
  outlined init with copy of DeviceState(v3 + 16, v0 + 112);
  uint64_t v8 = type metadata accessor for CustomIntentNLContextProvider();
  uint64_t inited = swift_initStackObject(v8, v0 + 16);
  *(void *)(v0 + 59__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = inited;
  outlined init with take of AceServiceInvokerAsync((__int128 *)(v0 + 112), inited + 16);
  *(void *)(v0 + 600) = ParameterResolutionRecord.result.getter(v4);
  uint64_t v10 = (void *)swift_task_alloc(dword_21763C);
  *(void *)(v0 + 60__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v10;
  *uint64_t v10 = v0;
  v10[1] = CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguationNoPagination(resolveRecord:);
  OUTLINED_FUNCTION_34_3();
  return CustomIntentNLContextProvider.makeNeedsDisambiguationContextFor(intent:parameter:resolutionResult:disambiguationItems:)( v11,  v12,  v13,  v14,  v15,  v16);
}

{
  uint64_t v0;
  void *v1;
  OUTLINED_FUNCTION_50_0();
  uint64_t v1 = *(void **)(v0 + 600);
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 608));

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_49_4();
  OUTLINED_FUNCTION_50_5();
  *(void *)(v1 + 640) = v2;
  *(void *)(v1 + 64__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v0;
  OUTLINED_FUNCTION_54_0(v3);

  OUTLINED_FUNCTION_34_0();
  if (v0)
  {
    OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_20();
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _UNKNOWN **v6;
  ValueMetadata *v7;
  uint64_t v8;
  void (*v9)(void *@<X8>);
  uint64_t v10;
  uint64_t v11;
  void *boxed_opaque_existential_1;
  void *v13;
  char *v15;
  uint64_t v1 = *(void *)(v0 + 664);
  OUTLINED_FUNCTION_20();
  if (v1
    && (uint64_t v2 = *(void *)(v0 + 656),
        uint64_t v3 = *(void *)(v0 + 432),
        outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?( *(void *)(v0 + 448),  v3,  &demangling cache variable for type metadata for VisualProperty?),  LODWORD(v2) = __swift_getEnumTagSinglePayload(v3, 1LL, v2),  uint64_t v4 = OUTLINED_FUNCTION_65_11(),  outlined destroy of Result<Output, Error>(v4, v5),  (_DWORD)v2 != 1))
  {
    uint64_t v6 = &protocol witness table for WorkflowDataModels.DisambiguateSmartPromptItemsModel;
    uint64_t v7 = &type metadata for WorkflowDataModels.DisambiguateSmartPromptItemsModel;
  }

  else
  {
    uint64_t v6 = &protocol witness table for WorkflowDataModels.DisambiguateItemsModel;
    uint64_t v7 = &type metadata for WorkflowDataModels.DisambiguateItemsModel;
  }

  *(void *)(v0 + 176) = v7;
  *(void *)(v0 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 184) = v6;
  *(_OWORD *)(v0 + 15__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(_OWORD *)(v0 + 672);
  *(void *)(v0 + 16__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = *(void *)(v0 + 368);
  uint64_t v8 = OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_51(v8);
  *(void *)(v0 + 70__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = OUTLINED_FUNCTION_57();
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 152), (uint64_t)v7);
  uint64_t v9 = (void (*)(void *@<X8>))v6[1];
  *(void *)(v0 + 216) = type metadata accessor for WorkflowDataModels(0LL);
  OUTLINED_FUNCTION_94_5( (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels,  v10,  type metadata accessor for WorkflowDataModels,  (uint64_t)&protocol conformance descriptor for WorkflowDataModels);
  *(void *)(v0 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 224) = v11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v0 + 192));
  v9(boxed_opaque_existential_1);
  *(void *)(v0 + 71__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v13;
  *uint64_t v13 = v0;
  v13[1] = CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguationNoPagination(resolveRecord:);
  return ((uint64_t (*)(void, uint64_t, void, void))v15)( *(void *)(v0 + 408),  v0 + 192,  *(void *)(v0 + 640),  *(void *)(v0 + 504));
}

{
  uint64_t v0;
  void *v1;
  OUTLINED_FUNCTION_50_0();
  uint64_t v1 = (void *)(v0 + 192);
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 712));
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_37();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  OUTLINED_FUNCTION_28_1();
  uint64_t v1 = *(void **)(v0 + 560);
  swift_release();

  OUTLINED_FUNCTION_54_22();
  OUTLINED_FUNCTION_123_5(v2, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_28_1();
  uint64_t v1 = *(void **)(v0 + 560);
  uint64_t v3 = *(void *)(v0 + 496);
  uint64_t v2 = *(void *)(v0 + 504);
  swift_release();

  OUTLINED_FUNCTION_123_5(v4, &demangling cache variable for type metadata for VisualProperty?);
  OUTLINED_FUNCTION_20_23(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_54_22();
  OUTLINED_FUNCTION_123_5(v5, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v0 + 8));
}

void CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguationNoPagination(resolveRecord:)()
{
  uint64_t v1 = v0[69];
  uint64_t v2 = *(void *)(v0[53] + 80LL);
  v0[77] = ParameterResolutionRecord.app.getter(v1);
  v0[78] = ParameterResolutionRecord.result.getter(v1);
  uint64_t v3 = *(int **)(*(void *)v2 + 200LL);
  uint64_t v5 = (char *)v3 + *v3;
  uint64_t v4 = (void *)swift_task_alloc(v3[1]);
  v0[79] = v4;
  void *v4 = v0;
  v4[1] = CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguationNoPagination(resolveRecord:);
  __asm { BR              X8 }

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguationNoPagination(resolveRecord:)( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  unint64_t v25 = *(void *)(v24 + 640);
  static DialogPhase.clarification.getter(v26);
  uint64_t v27 = *(void *)(v24 + 640);
  if (v25 >> 62)
  {
    if (v27 < 0) {
      uint64_t v75 = *(void *)(v24 + 640);
    }
    else {
      uint64_t v75 = v25 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v27);
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter(v75);
  }

  else
  {
    uint64_t v28 = *(void *)((char *)&dword_10 + (v25 & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain(v27);
  }

  uint64_t v76 = v25;
  uint64_t v77 = v28;
  if (v28)
  {
    OUTLINED_FUNCTION_110_5();
    uint64_t v29 = *(id **)(v24 + 640);
    if ((v25 & 0xC000000000000001LL) != 0)
    {
      id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, *(void *)(v24 + 640));
      uint64_t v29 = *(id **)(v24 + 640);
    }

    else
    {
      id v30 = v29[4];
    }

    OUTLINED_FUNCTION_37();
    id v31 = [v30 catId];
    OUTLINED_FUNCTION_35_10();
    uint64_t v32 = OUTLINED_FUNCTION_147();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = 0LL;
  }

  uint64_t v33 = *(unsigned __int8 *)(v24 + 720);
  uint64_t v78 = *(void *)(v24 + 520);
  uint64_t v34 = *(void *)(v24 + 512);
  uint64_t v35 = *(void *)(v24 + 472);
  uint64_t v36 = *(void *)(v24 + 480);
  uint64_t v37 = *(void *)(v24 + 456);
  uint64_t v38 = *(void *)(v24 + 464);
  uint64_t v79 = *(void *)(v24 + 448);
  id v80 = *(id *)(v24 + 560);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v35, v36, v37);
  OutputGenerationManifest.init(dialogPhase:_:)(v35, CustomIntentDisambiguationItemContainer.init(items:), 0LL);
  OutputGenerationManifest.responseViewId.setter(v32);
  OUTLINED_FUNCTION_81_9(v36, *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
  OutputGenerationManifest.canUseServerTTS.setter((v33 & 1) == 0);
  OUTLINED_FUNCTION_74_13();
  outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?( v78,  v34,  &demangling cache variable for type metadata for NLContextUpdate?);
  OutputGenerationManifest.nlContextUpdate.setter(v34);
  *(void *)(v24 + 656) = type metadata accessor for VisualProperty(0LL);
  OUTLINED_FUNCTION_125_0(v79, 1LL);
  id v39 = [v80 typeName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_104_5();
  LOBYTE(v35) = OUTLINED_FUNCTION_62_13(v33, v37, 81LL, 0x8000000000193600LL);
  OUTLINED_FUNCTION_37();
  if ((v35 & 1) == 0)
  {
    id v48 = [*(id *)(v24 + 560) typeName];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_104_5();
    char v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v37, 0xD00000000000005ALL, 0x8000000000194FE0LL, 0LL);
    OUTLINED_FUNCTION_37();
    if ((v49 & 1) == 0) {
      goto LABEL_25;
    }
  }

  uint64_t v40 = *(void **)(v24 + 560);
  NSString v41 = String._bridgeToObjectiveC()();
  id v42 = [v40 valueForKey:v41];

  if (v42)
  {
    _bridgeAnyObjectToAny(_:)((void *)(v24 + 264));
    swift_unknownObjectRelease(v42);
  }

  else
  {
    *(_OWORD *)(v24 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 264) = 0u;
    *(_OWORD *)(v24 + 280) = 0u;
  }

  outlined init with take of SiriWorkflowRunnerInput?( v24 + 264,  v24 + 232,  &demangling cache variable for type metadata for Any?);
  if (!*(void *)(v24 + 256))
  {
    uint64_t v47 = v24 + 232;
LABEL_24:
    outlined destroy of Result<Output, Error>(v47, &demangling cache variable for type metadata for Any?);
    goto LABEL_25;
  }

  if ((OUTLINED_FUNCTION_35_6( v24 + 384,  v24 + 232,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String) & 1) == 0) {
    goto LABEL_25;
  }
  uint64_t v43 = *(void **)(v24 + 560);
  uint64_t v44 = *(void *)(v24 + 392);
  NSString v45 = String._bridgeToObjectiveC()();
  id v46 = [v43 valueForKey:v45];

  if (v46)
  {
    _bridgeAnyObjectToAny(_:)((void *)(v24 + 328));
    swift_unknownObjectRelease(v46);
  }

  else
  {
    *(_OWORD *)(v24 + 32__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0u;
    *(_OWORD *)(v24 + 34__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0u;
  }

  outlined init with take of SiriWorkflowRunnerInput?( v24 + 328,  v24 + 296,  &demangling cache variable for type metadata for Any?);
  if (!*(void *)(v24 + 320))
  {
    OUTLINED_FUNCTION_37();
    uint64_t v47 = v24 + 296;
    goto LABEL_24;
  }

  OUTLINED_FUNCTION_72(v50, &lazy cache variable for type metadata for INFile, &OBJC_CLASS___INFile_ptr);
  uint64_t v51 = OUTLINED_FUNCTION_65_11();
  if ((OUTLINED_FUNCTION_35_6(v51, v52, v53, v54) & 1) != 0)
  {
    uint64_t v55 = *(void *)(v24 + 440);
    uint64_t v56 = *(void *)(v24 + 448);
    uint64_t v57 = *(void **)(v24 + 400);
    id v58 = [v57 data];
    uint64_t v59 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v58);
    unint64_t v61 = v60;

    static WorkflowDataModels.getThumbnail(imageData:)(v59, v61);
    outlined consume of Data._Representation(v59, v61);

    outlined destroy of Result<Output, Error>(v56, &demangling cache variable for type metadata for VisualProperty?);
    OUTLINED_FUNCTION_125_0(v55, 0LL);
    uint64_t v62 = OUTLINED_FUNCTION_65_11();
    outlined init with take of SiriWorkflowRunnerInput?( v62,  v63,  &demangling cache variable for type metadata for VisualProperty?);
    goto LABEL_26;
  }

  OUTLINED_FUNCTION_37();
LABEL_25:
  uint64_t v44 = 0LL;
LABEL_26:
  *(void *)(v24 + 66__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v44;
  if (v77)
  {
    OUTLINED_FUNCTION_110_5();
    uint64_t v64 = *(void *)(v24 + 640);
    if ((v76 & 0xC000000000000001LL) != 0)
    {
      swift_bridgeObjectRetain(*(void *)(v24 + 640));
      id v65 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v64);
      OUTLINED_FUNCTION_14();
    }

    else
    {
      id v65 = *(id *)(v64 + 32);
    }

    Swift::String_optional v66 = DialogExecutionResult.firstDialogFullPrint()();
    uint64_t countAndFlagsBits = v66.value._countAndFlagsBits;
    object = v66.value._object;
  }

  else
  {
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
  }

  *(void *)(v24 + 680) = object;
  *(void *)(v24 + 67__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = countAndFlagsBits;
  uint64_t v69 = (void *)swift_task_alloc(dword_21C744);
  *(void *)(v24 + 68__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v69;
  *uint64_t v69 = v24;
  v69[1] = CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguationNoPagination(resolveRecord:);
  OUTLINED_FUNCTION_34_3();
  return Array<A>.toDisambiguationItemModels(intent:parameterName:)(v70, v71, v72, v73);
}

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguationNoPagination(resolveRecord:)( uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[45] = v2;
  v3[46] = a1;
  v3[47] = v1;
  v3[87] = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_14();
  }

  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v4, v5, v6);
}

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguationNoPagination(resolveRecord:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17 = (void *)v16[70];
  uint64_t v18 = v16[65];
  uint64_t v19 = v16[62];
  uint64_t v30 = v16[60];
  uint64_t v31 = v16[59];
  uint64_t v20 = v16[56];
  uint64_t v32 = v16[55];
  uint64_t v33 = v16[54];
  swift_release();

  outlined destroy of Result<Output, Error>(v20, &demangling cache variable for type metadata for VisualProperty?);
  OUTLINED_FUNCTION_45_18(*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8));
  outlined destroy of Result<Output, Error>(v18, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_1Tm(v16 + 19);
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_54();
  OUTLINED_FUNCTION_34_3();
  return v21(v21, v22, v23, v24, v25, v26, v27, v28, a9, v30, v31, v32, v33, a14, a15, a16);
}

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.makePromptForPagination(resolveRecord:paginatedItems:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[17] = a3;
  v4[18] = v3;
  v4[15] = a1;
  v4[16] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v4[19] = OUTLINED_FUNCTION_9_0(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for DialogPhase(0LL);
  v4[20] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[21] = v7;
  v4[22] = OUTLINED_FUNCTION_4_0(v7);
  v4[23] = OUTLINED_FUNCTION_11_0();
  uint64_t v8 = type metadata accessor for OutputGenerationManifest(0LL);
  v4[24] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[25] = v9;
  v4[26] = OUTLINED_FUNCTION_9_0(v9);
  uint64_t v10 = type metadata accessor for NLContextUpdate(0LL);
  v4[27] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[28] = v11;
  v4[29] = OUTLINED_FUNCTION_9_0(v11);
  uint64_t v12 = OUTLINED_FUNCTION_71_10();
  v4[30] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v4[31] = v13;
  v4[32] = OUTLINED_FUNCTION_9_0(v13);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

Swift::Int CustomIntentNeedsDisambiguationFlowStrategy.makePromptForPagination(resolveRecord:paginatedItems:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17 = *(void *)(v16 + 248);
  uint64_t v18 = *(void *)(v16 + 256);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INIntent>);
  *(void *)(v16 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 264) = v19;
  Swift::String_optional v66 = (void *)ParameterResolutionRecord.intent.getter(v19);
  *(void *)(v16 + 27__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v66;
  uint64_t v20 = ParameterResolutionRecord.parameter.getter(v19);
  uint64_t v21 = ParameterIdentifier.name.getter(v20);
  uint64_t v23 = v22;
  *(void *)(v16 + 280) = v21;
  *(void *)(v16 + 28__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v22;
  OUTLINED_FUNCTION_85_6(v18, *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8));
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<CustomIntentDisambiguationItem>);
  *(void *)(v16 + 296) = v24;
  uint64_t v25 = *(void *)(PaginatedItemContainer.items.getter(v24) + 16);
  *(void *)(v16 + 30__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v25;
  swift_bridgeObjectRelease();
  Swift::Int result = PaginatedItemContainer.pageSize.getter(v24);
  *(void *)(v16 + 31__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = result;
  if (!result)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  Swift::Int v27 = result;
  if (v25 % result) {
    uint64_t v28 = v25 / result + 1;
  }
  else {
    uint64_t v28 = v25 / result;
  }
  Swift::Int result = PaginatedItemContainer.getCurrentPageIndex()();
  Swift::Int v29 = result * v27;
  *(void *)(v16 + 320) = v25 - v29;
  if (__OFSUB__(v25, v29))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v30 = v28 - result;
  if (__OFSUB__(v28, result))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  BOOL v31 = __OFSUB__(v30, 1LL);
  uint64_t v32 = v30 - 1;
  *(void *)(v16 + 32__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v32;
  if (v31)
  {
LABEL_16:
    __break(1u);
    return result;
  }

  uint64_t v64 = v19;
  uint64_t v65 = v32;
  uint64_t v33 = *(void *)(v16 + 232);
  uint64_t v34 = v21;
  uint64_t v36 = *(void *)(v16 + 136);
  uint64_t v35 = *(void *)(v16 + 144);
  outlined init with copy of DeviceState(v35 + 16, v16 + 72);
  uint64_t v37 = type metadata accessor for CustomIntentNLContextProvider();
  uint64_t inited = swift_initStackObject(v37, v16 + 16);
  outlined init with take of AceServiceInvokerAsync((__int128 *)(v16 + 72), inited + 16);
  uint64_t v40 = *(void **)(v35 + 56);
  id v39 = *(void **)(v35 + 64);
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v40);
  CustomIntentNLContextProvider.makeContextForPagination(intent:parameterName:displayHints:selectionItems:paginatedItems:)( v66,  v34,  v23,  v40,  v39,  v36,  v33);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_28_4();
  swift_setDeallocating(inited);
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(inited + 16));
  *(void *)(v16 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = _swiftEmptyArrayStorage;
  if (*(_BYTE *)(v35 + 72) == 1)
  {
    uint64_t v41 = *(void *)(*(void *)(v16 + 144) + 80LL);
    *(void *)(v16 + 336) = ParameterResolutionRecord.app.getter(v64);
    id v42 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(*(void *)v41 + 256LL));
    *(void *)(v16 + 34__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v42;
    *id v42 = v16;
    v42[1] = CustomIntentNeedsDisambiguationFlowStrategy.makePromptForPagination(resolveRecord:paginatedItems:);
    OUTLINED_FUNCTION_34_3();
    return v48(v43, v44, v45, v46, v47, v48, v49, v50, v64, v34, v23, v65, v66, a14, a15, a16);
  }

  else
  {
    uint64_t v51 = OUTLINED_FUNCTION_48_16();
    uint64_t v52 = OUTLINED_FUNCTION_75_11(v51);
    uint64_t v53 = OUTLINED_FUNCTION_58_17(v52);
    uint64_t v67 = v54;
    uint64_t v55 = (void *)swift_task_alloc(v53);
    *(void *)(v16 + 39__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v55;
    OUTLINED_FUNCTION_46_22( v55,  (uint64_t)CustomIntentNeedsDisambiguationFlowStrategy.makePromptForPagination(resolveRecord:paginatedItems:));
    OUTLINED_FUNCTION_34_3();
    return v62(v56, v57, v58, v59, v60, v61, v62, v63, v64, v34, v23, v65, v67, a14, a15, a16);
  }

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.makePromptForPagination(resolveRecord:paginatedItems:)()
{
  *(void *)(v1 + 35__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v2;
  *(void *)(v1 + 360) = v0;
  OUTLINED_FUNCTION_54_0(v3);
  if (v0)
  {
    OUTLINED_FUNCTION_129_2();
    OUTLINED_FUNCTION_12_5();
    OUTLINED_FUNCTION_14();
  }

  else
  {
    swift_release();
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  void *v11;
  uint64_t v12;
  uint64_t (*v14)(uint64_t);
  OUTLINED_FUNCTION_97_5();
  OUTLINED_FUNCTION_34_21();
  if (v3) {
    uint64_t v1 = OUTLINED_FUNCTION_16_33(v2);
  }
  uint64_t v4 = OUTLINED_FUNCTION_81_12(v1, *(void *)(v0 + 352));
  specialized Array._endMutation()(v4, v5, v6);
  uint64_t v7 = OUTLINED_FUNCTION_48_16();
  uint64_t v8 = OUTLINED_FUNCTION_75_11(v7);
  uint64_t v9 = OUTLINED_FUNCTION_58_17(v8);
  uint64_t v14 = v10;
  uint64_t v11 = (void *)swift_task_alloc(v9);
  *(void *)(v0 + 39__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v11;
  uint64_t v12 = OUTLINED_FUNCTION_46_22( v11,  (uint64_t)CustomIntentNeedsDisambiguationFlowStrategy.makePromptForPagination(resolveRecord:paginatedItems:));
  return v14(v12);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  OUTLINED_FUNCTION_49_4();
  OUTLINED_FUNCTION_50_5();
  v1[50] = v2;
  v1[51] = v0;
  OUTLINED_FUNCTION_54_0(v3);
  if (v0)
  {
    uint64_t v4 = (void *)v1[48];
    OUTLINED_FUNCTION_129_2();

    OUTLINED_FUNCTION_12_5();
    OUTLINED_FUNCTION_14();
  }

  else
  {
    uint64_t v5 = (void *)v1[48];
    swift_bridgeObjectRelease();

    OUTLINED_FUNCTION_12_5();
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t (*v12)(uint64_t);
  OUTLINED_FUNCTION_97_5();
  OUTLINED_FUNCTION_34_21();
  if (v3) {
    uint64_t v1 = OUTLINED_FUNCTION_16_33(v2);
  }
  uint64_t v4 = v0[46];
  uint64_t v5 = v0[37];
  uint64_t v6 = OUTLINED_FUNCTION_81_12(v1, v0[50]);
  specialized Array._endMutation()(v6, v7, v8);
  uint64_t v9 = PaginatedItemContainer.page.getter(v5);
  v0[52] = v9;
  uint64_t v10 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(*(void *)v4 + 248LL));
  v0[53] = v10;
  *uint64_t v10 = v0;
  v10[1] = CustomIntentNeedsDisambiguationFlowStrategy.makePromptForPagination(resolveRecord:paginatedItems:);
  return v12(v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_50_5();
  *(void *)(v2 + 43__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v3;
  *(void *)(v2 + 440) = v0;
  OUTLINED_FUNCTION_54_0(v4);
  swift_bridgeObjectRelease();
  if (v0) {
    OUTLINED_FUNCTION_20();
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Bool v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(void);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(void, uint64_t);
  OUTLINED_FUNCTION_97_5();
  OUTLINED_FUNCTION_34_21();
  if (v6) {
    uint64_t v4 = OUTLINED_FUNCTION_16_33(v5);
  }
  uint64_t v7 = *(void *)(v1 + 328);
  uint64_t v8 = OUTLINED_FUNCTION_81_12(v4, *(void *)(v1 + 432));
  uint64_t v11 = specialized Array._endMutation()(v8, v9, v10);
  if (v7 < 1)
  {
    static DialogPhase.clarification.getter(v11);
    uint64_t v18 = *(void *)(v1 + 112);
    if (v18 >> 62)
    {
      OUTLINED_FUNCTION_66_14();
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v0);
      if (v19) {
        goto LABEL_13;
      }
    }

    else
    {
      uint64_t v19 = OUTLINED_FUNCTION_83_6();
      if (v0)
      {
LABEL_13:
        OUTLINED_FUNCTION_128_2(v19, (v18 & 0xC000000000000001LL) == 0);
        if ((v18 & 0xC000000000000001LL) != 0) {
          uint64_t v20 = (id)OUTLINED_FUNCTION_83_3();
        }
        else {
          uint64_t v20 = *(id *)(v18 + 32);
        }
        uint64_t v21 = v20;
        uint64_t v22 = OUTLINED_FUNCTION_20();
        uint64_t v23 = OUTLINED_FUNCTION_26(v22, "catId");

        OUTLINED_FUNCTION_147();
        OUTLINED_FUNCTION_111_4();
        goto LABEL_18;
      }
    }

    OUTLINED_FUNCTION_20();
    uint64_t v50 = 0LL;
LABEL_18:
    uint64_t v24 = OUTLINED_FUNCTION_15_20();
    uint64_t v25 = OUTLINED_FUNCTION_79_6(v24, (uint64_t)CustomIntentDisambiguationItemContainer.init(items:));
    OUTLINED_FUNCTION_76_8(v25, v26, v27, v28, v29, v30, v31, v32, v50);
    OUTLINED_FUNCTION_85_6(v3, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    uint64_t v33 = INIntent.isRestricted()();
    OUTLINED_FUNCTION_101_4(v33);
    uint64_t v34 = OUTLINED_FUNCTION_74_13();
    OUTLINED_FUNCTION_63_10(v34, v35, v36, v37, v38, v39, v40, v41, v51, v52, (uint64_t)v53);
    OUTLINED_FUNCTION_67_9();
    id v42 = OUTLINED_FUNCTION_64();
    OUTLINED_FUNCTION_51(v42);
    uint64_t v43 = OUTLINED_FUNCTION_57();
    uint64_t v44 = *(void *)(v1 + 112);
    *(void *)(v1 + 47__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v43;
    *(void *)(v1 + 480) = v44;
    uint64_t v45 = (void *)OUTLINED_FUNCTION_58_15((uint64_t)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:));
    *(void *)(v1 + 48__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v45;
    uint64_t v46 = OUTLINED_FUNCTION_70_12(v45);
    return OUTLINED_FUNCTION_11_6(v46, v47, v48, v49);
  }

  uint64_t v12 = *(void *)(v1 + 312);
  uint64_t v13 = *(void *)(v1 + 304);
  if (v13 % v12) {
    uint64_t v14 = v13 / v12 + 1;
  }
  else {
    uint64_t v14 = v13 / v12;
  }
  if (v14 >= *(void *)(v1 + 320)) {
    uint64_t v15 = *(void *)(v1 + 320);
  }
  else {
    uint64_t v15 = v14;
  }
  uint64_t v16 = (void *)OUTLINED_FUNCTION_58_15(*(void *)(**(void **)(v1 + 368) + 208LL));
  *(void *)(v1 + 44__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v16;
  void *v16 = v1;
  v16[1] = CustomIntentNeedsDisambiguationFlowStrategy.makePromptForPagination(resolveRecord:paginatedItems:);
  return v53(*(void *)(v1 + 328), v15);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_50_5();
  *(void *)(v2 + 456) = v3;
  *(void *)(v2 + 46__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v0;
  OUTLINED_FUNCTION_54_0(v4);
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Bool v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(void);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  OUTLINED_FUNCTION_97_5();
  OUTLINED_FUNCTION_34_21();
  if (v6) {
    uint64_t v4 = OUTLINED_FUNCTION_16_33(v5);
  }
  uint64_t v7 = OUTLINED_FUNCTION_81_12(v4, v1[57]);
  uint64_t v10 = specialized Array._endMutation()(v7, v8, v9);
  static DialogPhase.clarification.getter(v10);
  uint64_t v11 = v1[14];
  if (v11 >> 62)
  {
    OUTLINED_FUNCTION_66_14();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v0);
    if (v12) {
      goto LABEL_5;
    }
LABEL_9:
    OUTLINED_FUNCTION_20();
    uint64_t v44 = 0LL;
    goto LABEL_10;
  }

  uint64_t v12 = OUTLINED_FUNCTION_83_6();
  if (!v0) {
    goto LABEL_9;
  }
LABEL_5:
  OUTLINED_FUNCTION_128_2(v12, (v11 & 0xC000000000000001LL) == 0);
  if ((v11 & 0xC000000000000001LL) != 0) {
    uint64_t v13 = (id)OUTLINED_FUNCTION_83_3();
  }
  else {
    uint64_t v13 = *(id *)(v11 + 32);
  }
  uint64_t v14 = v13;
  uint64_t v15 = OUTLINED_FUNCTION_20();
  uint64_t v16 = OUTLINED_FUNCTION_26(v15, "catId");

  OUTLINED_FUNCTION_147();
  OUTLINED_FUNCTION_111_4();
LABEL_10:
  uint64_t v17 = OUTLINED_FUNCTION_15_20();
  uint64_t v18 = OUTLINED_FUNCTION_79_6(v17, (uint64_t)CustomIntentDisambiguationItemContainer.init(items:));
  OUTLINED_FUNCTION_76_8(v18, v19, v20, v21, v22, v23, v24, v25, v44);
  OUTLINED_FUNCTION_85_6(v3, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  uint64_t v26 = INIntent.isRestricted()();
  OUTLINED_FUNCTION_101_4(v26);
  Swift::Int v27 = OUTLINED_FUNCTION_74_13();
  OUTLINED_FUNCTION_63_10(v27, v28, v29, v30, v31, v32, v33, v34, v45, v46, v47);
  OUTLINED_FUNCTION_67_9();
  uint64_t v35 = OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_51(v35);
  uint64_t v36 = OUTLINED_FUNCTION_57();
  uint64_t v37 = v1[14];
  v1[59] = v36;
  v1[60] = v37;
  uint64_t v38 = (void *)OUTLINED_FUNCTION_58_15((uint64_t)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:));
  v1[61] = v38;
  id v39 = OUTLINED_FUNCTION_70_12(v38);
  return OUTLINED_FUNCTION_11_6(v39, v40, v41, v42);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 488));
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  OUTLINED_FUNCTION_28_1();
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 200);

  OUTLINED_FUNCTION_17_4(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_81_9(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_16_0(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_28_1();
  OUTLINED_FUNCTION_5_32();
  OUTLINED_FUNCTION_57_4(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_28_1();
  OUTLINED_FUNCTION_5_32();
  OUTLINED_FUNCTION_57_4(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_28_1();
  OUTLINED_FUNCTION_5_32();
  OUTLINED_FUNCTION_57_4(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_28_1();
  OUTLINED_FUNCTION_5_32();
  OUTLINED_FUNCTION_57_4(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v1 + 8));
}

void CustomIntentNeedsDisambiguationFlowStrategy.getVoiceCommandPagination(parse:)()
{
  uint64_t v56 = v2;
  uint64_t v57 = v1;
  type metadata accessor for PaginationRequest(0LL);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_83();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_83();
  uint64_t v52 = v5;
  uint64_t v6 = OUTLINED_FUNCTION_49_13();
  uint64_t v50 = type metadata accessor for Siri_Nlu_External_UserParse(v6);
  uint64_t v7 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  OUTLINED_FUNCTION_35();
  uint64_t v10 = v9 - v8;
  uint64_t v51 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v49 = *(void *)(v51 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_83();
  uint64_t v48 = v12;
  uint64_t v13 = OUTLINED_FUNCTION_49_13();
  uint64_t v14 = type metadata accessor for USOParse(v13);
  uint64_t v54 = *(void *)(v14 - 8);
  uint64_t v55 = v14;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_83();
  uint64_t v53 = v16;
  uint64_t v17 = OUTLINED_FUNCTION_49_13();
  type metadata accessor for VoiceCommandsNLIntent(v17);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_63_8();
  uint64_t v19 = OUTLINED_FUNCTION_127_3();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_35();
  uint64_t v23 = v22 - v21;
  uint64_t v24 = type metadata accessor for Parse(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  OUTLINED_FUNCTION_35();
  uint64_t v28 = v27 - v26;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v27 - v26, v57, v24);
  int v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 88))(v28, v24);
  if (v29 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    OUTLINED_FUNCTION_45_18(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 96));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    swift_release();
    OUTLINED_FUNCTION_76_6(v23, v28, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 32));
    OUTLINED_FUNCTION_76_6(v0, v23, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16));
    if (one-time initialization token for voiceCommandPaginationNode != -1) {
      swift_once( &one-time initialization token for voiceCommandPaginationNode,  one-time initialization function for voiceCommandPaginationNode);
    }
    OUTLINED_FUNCTION_94_5( (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent,  v30,  type metadata accessor for VoiceCommandsNLIntent,  (uint64_t)&protocol conformance descriptor for VoiceCommandsNLIntent);
    uint64_t v31 = OUTLINED_FUNCTION_65_11();
    IntentNodeTraversable.value<A>(forNode:)(v31, v32, v33);
    SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = v58;
    outlined destroy of VoiceCommandsNLIntent(v0);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v23, v19);
LABEL_5:
    __asm { BR              X10 }
  }

  if (v29 == enum case for Parse.uso(_:))
  {
    OUTLINED_FUNCTION_45_18(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 96));
    uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 32))(v53, v28, v55);
    uint64_t v36 = USOParse.userParse.getter(v35);
    uint64_t v37 = Siri_Nlu_External_UserParse.userDialogActs.getter(v36);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v50);
    specialized Collection.first.getter(v37, v52);
    OUTLINED_FUNCTION_20();
    if (__swift_getEnumTagSinglePayload(v52, 1LL, v51) == 1)
    {
      outlined destroy of Result<Output, Error>( v52,  &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v38 = OUTLINED_FUNCTION_48();
      __swift_project_value_buffer(v38, (uint64_t)static Logger.voiceCommands);
      id v39 = (os_log_s *)OUTLINED_FUNCTION_9_5();
      os_log_type_t v40 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = (_WORD *)OUTLINED_FUNCTION_57_1();
        OUTLINED_FUNCTION_26_1(v41);
        OUTLINED_FUNCTION_47_1(&dword_0, v39, v40, "could not pagination value", (uint8_t *)v20);
        OUTLINED_FUNCTION_1_0(v20);
      }

      OUTLINED_FUNCTION_57_4(v53, *(uint64_t (**)(uint64_t, uint64_t))(v54 + 8));
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(v48, v52, v51);
      v44.SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = Siri_Nlu_External_UserDialogAct.paginationValue()().value;
      if (!v45)
      {
        SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = v44.value;
        OUTLINED_FUNCTION_87_7();
        (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v55);
        goto LABEL_5;
      }

      OUTLINED_FUNCTION_87_7();
      OUTLINED_FUNCTION_57_4(v53, *(uint64_t (**)(uint64_t, uint64_t))(v54 + 8));
      swift_errorRelease(v45);
    }

    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationResult<IntentPromptAnswer<INIntent>>);
    OUTLINED_FUNCTION_40_11(v56, 1LL, v47, v46);
  }

  else
  {
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationResult<IntentPromptAnswer<INIntent>>);
    OUTLINED_FUNCTION_40_11(v56, 1LL, v43, v42);
    OUTLINED_FUNCTION_45_18(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
  }

  OUTLINED_FUNCTION_24_0();
}

void CustomIntentNeedsDisambiguationFlowStrategy.getVoiceCommandConfirmation(parse:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PaginationRequest(0LL);
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_35();
  uint64_t v3 = (char *)sub_DACD8
     + 4 * byte_186338[static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)(a1)];
  __asm { BR              X10 }

uint64_t sub_DACD8()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationResult<IntentPromptAnswer<INIntent>>);
  return __swift_storeEnumTagSinglePayload(v0, 1LL, 1LL, v1);
}

uint64_t sub_DAD0C(uint64_t a1)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INIntent>);
  static DisambiguationResult.paginate(_:)(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v2);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationResult<IntentPromptAnswer<INIntent>>);
  return OUTLINED_FUNCTION_40_11(v1, 0LL, v7, v6);
}

uint64_t closure #1 in static CustomIntentNeedsDisambiguationFlowStrategy.makeDisambiguationList(resolveRecord:deviceState:)( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Any, CustomIntentDisambiguationItem>);
  uint64_t v7 = (void (*)(uint64_t))Transformer.transform.getter(v6);
  v7(a1);
  uint64_t result = swift_release();
  if (v3) {
    *a3 = v3;
  }
  return result;
}

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.deinit()
{
  return v0;
}

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 152LL, 7LL);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.actionForInput(_:resolveRecord:) in conformance CustomIntentNeedsDisambiguationFlowStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 256LL))();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeDisambiguationItemContainer(resolveRecord:) in conformance CustomIntentNeedsDisambiguationFlowStrategy( uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v5 = *(int **)(**(void **)v2 + 264LL);
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)v5 + *v5);
  uint64_t v6 = (void *)swift_task_alloc(v5[1]);
  *(void *)(v3 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeDisambiguationItemContainer(resolveRecord:) in conformance CustomIntentNeedsDisambiguationFlowStrategy;
  return v8(a2);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeDisambiguationItemContainer(resolveRecord:) in conformance CustomIntentNeedsDisambiguationFlowStrategy( uint64_t a1)
{
  uint64_t v5 = *v3;
  *uint64_t v6 = v5;
  swift_task_dealloc();
  if (!v1) {
    **(void **)(v2 + 16) = a1;
  }
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.parseDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance CustomIntentNeedsDisambiguationFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *(int **)(**(void **)v4 + 272LL);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc(v10[1]);
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return v13(a1, a2, a3, a4);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makePromptForDisambiguation(paginatedItems:resolveRecord:) in conformance CustomIntentNeedsDisambiguationFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(**(void **)v3 + 280LL);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return v11(a1, a2, a3);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance CustomIntentNeedsDisambiguationFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:)[1]);
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy();
  *uint64_t v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:)( a1,  a2,  a3,  v11,  a5);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:) in conformance CustomIntentNeedsDisambiguationFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:)[1]);
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy();
  *uint64_t v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:)( a1,  a2,  a3,  v11,  a5);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:) in conformance CustomIntentNeedsDisambiguationFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to NeedsDisambiguationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return NeedsDisambiguationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:) in conformance CustomIntentNeedsDisambiguationFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to NeedsDisambiguationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return NeedsDisambiguationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription(resolveRecord:) in conformance CustomIntentNeedsDisambiguationFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy();
  return NeedsDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription(resolveRecord:)(a1, v5, a3);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance CustomIntentNeedsDisambiguationFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)[1]);
  *(void *)(v6 + 16) = v12;
  uint64_t v13 = type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy();
  *uint64_t v12 = v6;
  v12[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)(a1, a2, a3, a4, v13, a6);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance CustomIntentNeedsDisambiguationFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)[1]);
  *(void *)(v7 + 16) = v14;
  uint64_t v15 = type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy();
  void *v14 = v7;
  v14[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)(a1, a2, a3, a4, a5, v15, a7);
}

id outlined bridged method (mbnn) of @objc INCodableDescription.attribute(byName:)( uint64_t a1, uint64_t a2, void *a3)
{
  return outlined bridged method (mbnn) of @objc INCodableDescription.attribute(byName:)( a1,  a2,  a3,  (SEL *)&selRef_attributeByName_);
}

id outlined bridged method (mbnn) of @objc INCodableDescription.attribute(byName:)( uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  NSString v6 = String._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_37();
  id v7 = objc_msgSend(a3, *a4, v6);

  return v7;
}

uint64_t specialized CustomIntentNeedsDisambiguationFlowStrategy.__allocating_init(voiceCommandName:deviceState:modeInfoProvider:siriEnvironment:runCustomIntentCatWrapperSimple:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v23 = a6;
  uint64_t v15 = *(void *)(a8 - 8);
  __chkstk_darwin(a1);
  uint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy();
  uint64_t v19 = swift_allocObject(v18, 152LL, 7LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a4, a8);
  uint64_t v20 = specialized CustomIntentNeedsDisambiguationFlowStrategy.init(voiceCommandName:deviceState:modeInfoProvider:siriEnvironment:runCustomIntentCatWrapperSimple:)( a1,  a2,  a3,  (uint64_t)v17,  a5,  v23,  v19,  a8,  a9);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a4, a8);
  return v20;
}

uint64_t specialized CustomIntentNeedsDisambiguationFlowStrategy.init(voiceCommandName:deviceState:modeInfoProvider:siriEnvironment:runCustomIntentCatWrapperSimple:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = a8;
  uint64_t v37 = a9;
  uint64_t v20 = __swift_allocate_boxed_opaque_existential_1(&v35);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32LL))(v20, a4, a8);
  *(void *)(a7 + 56) = 0LL;
  *(void *)(a7 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0LL;
  *(void *)(a7 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a1;
  *(void *)(a7 + 136) = a2;
  outlined init with copy of DeviceState((uint64_t)a3, a7 + 16);
  outlined init with copy of DeviceState(a7 + 16, (uint64_t)v34);
  if (one-time initialization token for shared != -1) {
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  }
  uint64_t v21 = static WFDialogState.shared;
  type metadata accessor for RunCustomIntentCATs(0LL);
  uint64_t v22 = swift_retain(v21);
  static CATOption.defaultMode.getter(v22);
  uint64_t v23 = CATWrapper.__allocating_init(options:globals:)(v19, 0LL);
  uint64_t v24 = type metadata accessor for RunVoiceCommandCATs(0LL);
  static CATOption.defaultMode.getter(v24);
  uint64_t v25 = CATWrapper.__allocating_init(options:globals:)(v19, 0LL);
  uint64_t v26 = type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  static CATOption.defaultMode.getter(v26);
  uint64_t v27 = CATWrapperSimple.__allocating_init(options:globals:)(v19, 0LL);
  uint64_t v28 = type metadata accessor for AppNameResolver();
  uint64_t v29 = swift_allocObject(v28, 16LL, 7LL);
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  uint64_t v30 = type metadata accessor for CustomIntentsDialogTemplating();
  uint64_t v31 = swift_allocObject(v30, 152LL, 7LL);
  specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)( v34,  v21,  0LL,  1,  v23,  a6,  v25,  v27,  v29,  v31);
  *(void *)(a7 + 80) = v32;
  outlined init with take of AceServiceInvokerAsync(&v35, a7 + 88);
  *(void *)(a7 + 14__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a5;
  *(_BYTE *)(a7 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 1;
  return a7;
}

uint64_t type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin43CustomIntentNeedsDisambiguationFlowStrategy);
}

uint64_t sub_DB754()
{
  uint64_t v1 = *(void *)(OUTLINED_FUNCTION_126_1() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;

  OUTLINED_FUNCTION_20_23(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  return swift_deallocObject(v0, v4, v5);
}

uint64_t partial apply for closure #1 in static Transformer<>.disambiguationItemTransformer(attributeMetadata:locale:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(type metadata accessor for Locale(0LL) - 8) + 80LL);
  return closure #1 in static Transformer<>.disambiguationItemTransformer(attributeMetadata:locale:)( a1,  *(void **)(v2 + 16),  v2 + ((v5 + 24) & ~v5),  a2);
}

uint64_t partial apply for closure #1 in static CustomIntentNeedsDisambiguationFlowStrategy.makeDisambiguationList(resolveRecord:deviceState:)( uint64_t a1, void *a2)
{
  return closure #1 in static CustomIntentNeedsDisambiguationFlowStrategy.makeDisambiguationList(resolveRecord:deviceState:)( a1,  *(void *)(v2 + 16),  a2);
}

unint64_t lazy protocol witness table accessor for type DisambiguationError and conformance DisambiguationError()
{
  unint64_t result = lazy protocol witness table cache variable for type DisambiguationError and conformance DisambiguationError;
  if (!lazy protocol witness table cache variable for type DisambiguationError and conformance DisambiguationError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DisambiguationError,  &type metadata for DisambiguationError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DisambiguationError and conformance DisambiguationError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DisambiguationError and conformance DisambiguationError;
  if (!lazy protocol witness table cache variable for type DisambiguationError and conformance DisambiguationError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DisambiguationError,  &type metadata for DisambiguationError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DisambiguationError and conformance DisambiguationError);
  }

  return result;
}

void base witness table accessor for ParameterResolutionHandlingAsync in CustomIntentNeedsDisambiguationFlowStrategy( uint64_t a1, uint64_t a2)
{
}

unint64_t lazy protocol witness table accessor for type CustomIntentDisambiguationItemContainer and conformance CustomIntentDisambiguationItemContainer()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentDisambiguationItemContainer and conformance CustomIntentDisambiguationItemContainer;
  if (!lazy protocol witness table cache variable for type CustomIntentDisambiguationItemContainer and conformance CustomIntentDisambiguationItemContainer)
  {
    unint64_t result = swift_getWitnessTable("95\a", &type metadata for CustomIntentDisambiguationItemContainer);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentDisambiguationItemContainer and conformance CustomIntentDisambiguationItemContainer);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for DisambiguationError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_DB96C + 4 * byte_186341[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_DB9A0 + 4 * byte_18633C[v4]))();
}

uint64_t sub_DB9A0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_DB9A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xDB9B0LL);
  }
  return result;
}

uint64_t sub_DB9BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xDB9C4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_DB9C8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_DB9D0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DisambiguationError()
{
  return &type metadata for DisambiguationError;
}

void OUTLINED_FUNCTION_5_32()
{
}

uint64_t OUTLINED_FUNCTION_15_20()
{
  return (*(uint64_t (**)(void, void, void))(v0[21] + 16LL))(v0[22], v0[23], v0[20]);
}

uint64_t OUTLINED_FUNCTION_16_33@<X0>(unint64_t a1@<X8>)
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1, v1 + 1, 1LL);
}

void OUTLINED_FUNCTION_24_23()
{
}

  ;
}

uint64_t OUTLINED_FUNCTION_38_22@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v3, v2);
}

uint64_t OUTLINED_FUNCTION_45_18@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_46_22@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t OUTLINED_FUNCTION_48_16()
{
  uint64_t v1 = v0[33];
  v0[46] = *(void *)(v0[18] + 80LL);
  return ParameterResolutionRecord.app.getter(v1);
}

  ;
}

uint64_t OUTLINED_FUNCTION_58_17(uint64_t a1)
{
  *(void *)(v2 + 38__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = a1;
  return *(unsigned int *)(*(void *)(*(void *)v1 + 264LL) + 4LL);
}

uint64_t OUTLINED_FUNCTION_60_14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return swift_willThrow(a1, a2, a3, a4, a5);
}

uint64_t OUTLINED_FUNCTION_62_13(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, a4, 0LL);
}

uint64_t OUTLINED_FUNCTION_63_10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a10 + 16))(v12, a11, v11);
}

uint64_t OUTLINED_FUNCTION_65_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_66_14()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_67_9()
{
  return OutputGenerationManifest.nlContextUpdate.setter(v1);
}

void OUTLINED_FUNCTION_68_12(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 15__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t OUTLINED_FUNCTION_70_12(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 120);
}

uint64_t OUTLINED_FUNCTION_71_10()
{
  return type metadata accessor for ParameterIdentifier(0LL);
}

uint64_t OUTLINED_FUNCTION_72_8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t OUTLINED_FUNCTION_75_11(uint64_t a1)
{
  *(void *)(v2 + 376) = a1;
  return ParameterResolutionRecord.result.getter(v1);
}

uint64_t OUTLINED_FUNCTION_76_8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return OutputGenerationManifest.responseViewId.setter(a9);
}

uint64_t OUTLINED_FUNCTION_77_11()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 136) + 8LL))( *(void *)(v0 - 104),  *(void *)(v0 - 112));
}

uint64_t OUTLINED_FUNCTION_78_9()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t OUTLINED_FUNCTION_79_6(uint64_t a1, uint64_t a2)
{
  return OutputGenerationManifest.init(dialogPhase:_:)(v2, a2, 0LL);
}

uint64_t OUTLINED_FUNCTION_81_12(uint64_t a1, uint64_t a2)
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v2, a2);
}

uint64_t OUTLINED_FUNCTION_83_6()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_84_11@<X0>(uint64_t a1@<X8>)
{
  return swift_arrayDestroy(v1, 1LL, a1 + 8);
}

  ;
}

uint64_t OUTLINED_FUNCTION_87_7()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_90_7()
{
  return static ActionForInput.ignore()();
}

void OUTLINED_FUNCTION_94_5(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
}

uint64_t OUTLINED_FUNCTION_97_5()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t OUTLINED_FUNCTION_101_4(char a1)
{
  return OutputGenerationManifest.canUseServerTTS.setter((a1 & 1) == 0);
}

uint64_t OUTLINED_FUNCTION_102_4()
{
  return ParameterResolutionRecord.parameter.getter();
}

void OUTLINED_FUNCTION_104_5()
{
}

uint64_t OUTLINED_FUNCTION_106_1@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_107_1(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1LL, v1);
}

uint64_t OUTLINED_FUNCTION_110_5()
{
  if (v0) {
    uint64_t v1 = 1LL;
  }
  else {
    uint64_t v1 = 0LL;
  }
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, v1);
}

void OUTLINED_FUNCTION_111_4()
{
}

uint64_t OUTLINED_FUNCTION_112_2()
{
  return ParameterResolutionRecord.intent.getter(v0);
}

uint64_t OUTLINED_FUNCTION_118_5()
{
  return static ActionForInput.handle()();
}

uint64_t OUTLINED_FUNCTION_119_4()
{
  return static DisambiguationResult.chosenItem(_:)(v0, v1);
}

  ;
}

void OUTLINED_FUNCTION_123_5(uint64_t a1, uint64_t *a2)
{
}

uint64_t OUTLINED_FUNCTION_127_3()
{
  return type metadata accessor for NLIntent(0LL);
}

uint64_t OUTLINED_FUNCTION_128_2(uint64_t a1, uint64_t a2)
{
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, a2);
}

uint64_t OUTLINED_FUNCTION_129_2()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 112));
}

void AutoShortcutFirstRunFlow.__allocating_init(autoShortcutInvocation:aceServiceInvoker:voiceShortcutsClient:outputPublisher:deviceState:userDefaults:)()
{
  uint64_t v5 = OUTLINED_FUNCTION_48_10(v3, v4, v13);
  OUTLINED_FUNCTION_46_23(v5, v6, v7, v8, v9, v10, v11, v12, v14);
  __swift_destroy_boxed_opaque_existential_1Tm(v0);
  OUTLINED_FUNCTION_24_0();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_16SiriDialogEngine23SirikitLocalizedAppNameCs5NeverOTg507_sS2S16de8Engine23ghij27CIgggo_SS3key_SS5valuetACs5K96OIegnrzr_TR04_s16ab8Engine10df35C0A14LinkFlowPluginEyACSgSScfcAA0d9e2E4G12CSS_SStXEfU_Tf3nnnpf_nTf1cn_n( uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  if (v6)
  {
    v25[1] = v1;
    uint64_t v32 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v6);
    uint64_t result = specialized Dictionary.startIndex.getter(a1);
    if (result < 0 || (unint64_t v9 = result, result >= 1LL << *(_BYTE *)(a1 + 32)))
    {
LABEL_13:
      __break(1u);
      return (uint64_t)v32;
    }

    else
    {
      uint64_t v10 = a1 + 64;
      uint64_t v26 = a1 + 64;
      uint64_t v27 = a1;
      while ((*(void *)(v10 + 8 * (v9 >> 6)) & (1LL << v9)) != 0)
      {
        if ((_DWORD)v8 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_17;
        }
        uint64_t v29 = v8;
        unint64_t v30 = v9 >> 6;
        uint64_t v28 = v6;
        uint64_t v11 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v9);
        uint64_t v13 = *v11;
        uint64_t v12 = v11[1];
        uint64_t v14 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v9);
        uint64_t v15 = v14[1];
        uint64_t v31 = *v14;
        uint64_t v16 = type metadata accessor for SirikitLocalizedAppName.Builder(0LL);
        swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
        swift_bridgeObjectRetain(v12);
        __n128 v17 = swift_bridgeObjectRetain(v15);
        SirikitLocalizedAppName.Builder.init()(v17);
        String.toSpeakableString.getter(v13, v12);
        uint64_t v18 = type metadata accessor for SpeakableString(0LL);
        __swift_storeEnumTagSinglePayload((uint64_t)v5, 0LL, 1LL, v18);
        dispatch thunk of SirikitLocalizedAppName.Builder.withLocale(_:)(v5);
        swift_release();
        outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for SpeakableString?);
        String.toSpeakableString.getter(v31, v15);
        __swift_storeEnumTagSinglePayload((uint64_t)v5, 0LL, 1LL, v18);
        dispatch thunk of SirikitLocalizedAppName.Builder.withAppName(_:)(v5);
        swift_release();
        outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for SpeakableString?);
        uint64_t v19 = dispatch thunk of SirikitLocalizedAppName.Builder.build()();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v20 = swift_release();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v20);
        uint64_t v21 = v32[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v21);
        uint64_t v22 = v19;
        a1 = v27;
        uint64_t v23 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v22);
        uint64_t result = specialized ContiguousArray._endMutation()(v23);
        uint64_t v24 = -1LL << *(_BYTE *)(a1 + 32);
        uint64_t v10 = v26;
        if ((*(void *)(v26 + 8 * v30) & (1LL << v9)) == 0) {
          goto LABEL_19;
        }
        if ((_DWORD)v29 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_20;
        }
        uint64_t result = _HashTable.occupiedBucket(after:)(v9, v26, ~v24);
        uint64_t v6 = v28 - 1;
        if (v28 == 1) {
          return (uint64_t)v32;
        }
        unint64_t v9 = result;
        if ((result & 0x8000000000000000LL) == 0)
        {
          uint64_t v8 = *(unsigned int *)(a1 + 36);
          if (result < 1LL << *(_BYTE *)(a1 + 32)) {
            continue;
          }
        }

        goto LABEL_13;
      }

      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
  }

  return result;
}

uint64_t AutoShortcutFirstRunFlow.exitValue.getter()
{
  if ((*(_BYTE *)(v0 + 272) & 0xC0) == 0x40) {
    return *(_BYTE *)(v0 + 272) & 1;
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v2 = OUTLINED_FUNCTION_48();
  uint64_t v3 = (os_log_s *)OUTLINED_FUNCTION_84(v2, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_40(v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)uint64_t v5 = 0;
    OUTLINED_FUNCTION_47_1(&dword_0, v3, (os_log_type_t)v0, "#AutoShortcutFirstRunFlow exited in the wrong state", v5);
    OUTLINED_FUNCTION_1_0((uint64_t)v5);
  }

  return 0LL;
}

void AutoShortcutFirstRunFlow.init(autoShortcutInvocation:aceServiceInvoker:voiceShortcutsClient:outputPublisher:deviceState:userDefaults:)()
{
  uint64_t v5 = OUTLINED_FUNCTION_48_10(v3, v4, v13);
  OUTLINED_FUNCTION_46_23(v5, v6, v7, v8, v9, v10, v11, v12, v14);
  __swift_destroy_boxed_opaque_existential_1Tm(v0);
  OUTLINED_FUNCTION_24_0();
}

uint64_t AutoShortcutFirstRunFlow.on(input:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v34 = type metadata accessor for Parse(0LL);
  uint64_t v5 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v6 = OUTLINED_FUNCTION_89_9();
  uint64_t v7 = type metadata accessor for Input(v6);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_35();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_35();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = type metadata accessor for TaskPriority(0LL);
  OUTLINED_FUNCTION_16_20(v16);
  __n128 v17 = (void *)OUTLINED_FUNCTION_23_4((uint64_t)&unk_1F9868);
  __int128 v17[2] = 0LL;
  v17[3] = 0LL;
  v17[4] = v3;
  swift_retain(v3);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( v15,  (uint64_t)&async function pointer to partial apply for closure #1 in AutoShortcutFirstRunFlow.on(input:),  (uint64_t)v17);
  swift_release();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v18 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.voiceCommands);
  uint64_t v19 = OUTLINED_FUNCTION_77_12(v11, a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16));
  uint64_t v20 = v7;
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v33 = v3;
    uint64_t v23 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v24 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v36 = v24;
    *(_DWORD *)uint64_t v23 = 136315138;
    uint64_t v25 = Input.description.getter();
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v23 + 4);
    OUTLINED_FUNCTION_20();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v20);
    OUTLINED_FUNCTION_31_2(&dword_0, v21, v22, "#AutoShortcutFirstRunFlow on input: %s", v23);
    OUTLINED_FUNCTION_30_3(v24, v27, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v24);
    uint64_t v28 = (uint64_t)v23;
    uint64_t v3 = v33;
    OUTLINED_FUNCTION_1_0(v28);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v20);
  }

  Input.parse.getter(v29);
  unsigned __int8 v30 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v34);
  if (v30 - 1 < 2)
  {
    char v31 = 0;
LABEL_10:
    *(_BYTE *)(v3 + 27__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v31;
    return 1LL;
  }

  if (!v30)
  {
    char v31 = 1;
    goto LABEL_10;
  }

  return 1LL;
}

uint64_t closure #1 in AutoShortcutFirstRunFlow.on(input:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 96) = a4;
  return swift_task_switch(closure #1 in AutoShortcutFirstRunFlow.on(input:), 0LL, 0LL);
}

uint64_t closure #1 in AutoShortcutFirstRunFlow.on(input:)()
{
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 48);
  OUTLINED_FUNCTION_102_5((void *)(v1 + 16));
  OUTLINED_FUNCTION_126_4();
  if (v0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(v1 + 16));
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v4 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v4, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v5 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_45_0(v5))
    {
      uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_43_5(v6);
      OUTLINED_FUNCTION_20_11( &dword_0,  (os_log_s *)(v1 + 56),  (os_log_type_t)v2,  "#AutoShortcutFirstRunFlow failed to submit empty output to clear screen");
      OUTLINED_FUNCTION_1_0(v3);
    }

    swift_errorRelease(v0);

    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  else
  {
    uint64_t v8 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
    *(void *)(v1 + 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v8;
    uint64_t v9 = OUTLINED_FUNCTION_123_6(v8, (uint64_t)closure #1 in AutoShortcutFirstRunFlow.on(input:));
    return dispatch thunk of OutputPublisherAsync.publish(output:)(v9, v2, v3);
  }

{
  uint64_t v0;
  void *v1;
  OUTLINED_FUNCTION_50_0();
  uint64_t v1 = (void *)(v0 + 56);
  OUTLINED_FUNCTION_53_18(v0);
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_151_2();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v1 + 16));
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v3, (uint64_t)static Logger.voiceCommands);
  uint64_t v4 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v4))
  {
    os_log_type_t v5 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    OUTLINED_FUNCTION_43_5(v5);
    OUTLINED_FUNCTION_33_2(&dword_0, v6, v7, "#AutoShortcutFirstRunFlow failed to submit empty output to clear screen");
    OUTLINED_FUNCTION_1_0(v2);
  }

  OUTLINED_FUNCTION_4_8();

  return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t AutoShortcutFirstRunFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t RunFlow = type metadata accessor for AutoShortcutFirstRunFlow();
  lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( &lazy protocol witness table cache variable for type AutoShortcutFirstRunFlow and conformance AutoShortcutFirstRunFlow,  v5,  (uint64_t (*)(uint64_t))type metadata accessor for AutoShortcutFirstRunFlow,  (uint64_t)&protocol conformance descriptor for AutoShortcutFirstRunFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, RunFlow, v6);
}

uint64_t AutoShortcutFirstRunFlow.execute()(uint64_t a1)
{
  v2[24] = a1;
  v2[25] = v1;
  v2[26] = *v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)AutoShortcutFirstRunFlow.execute());
}

{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  os_log_s *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  _WORD *v28;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v3 = *(unsigned __int8 **)(v2 + 200);
  uint64_t v4 = v3[272];
  *(_BYTE *)(v2 + 340) = v4;
  if (v4 >> 6)
  {
    if (v4 >> 6 == 1)
    {
      static ExecuteResponse.complete()(a1);
      goto LABEL_17;
    }

    if (v4 == 128)
    {
      os_log_type_t v22 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(*(void *)v3 + 256LL));
      *(void *)(v2 + 2outlined init with copy of AppShortcutInvoking(*(void *)(v1 + 96) + 136LL, v1 + 16) = v22;
      *os_log_type_t v22 = v2;
      v22[1] = AutoShortcutFirstRunFlow.execute();
      OUTLINED_FUNCTION_67_10();
      __asm { BR              X0 }
    }

    outlined init with copy of AppShortcutInvoking((uint64_t)(v3 + 136), v2 + 56);
    uint64_t v24 = *(void *)(v2 + 80);
    uint64_t v25 = *(void *)(v2 + 88);
    OUTLINED_FUNCTION_102_5((void *)(v2 + 56));
    OUTLINED_FUNCTION_126_4();
    if (v1)
    {
      __swift_destroy_boxed_opaque_existential_1Tm((void *)(v2 + 56));
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      unint64_t v26 = OUTLINED_FUNCTION_48();
      OUTLINED_FUNCTION_84(v26, (uint64_t)static Logger.voiceCommands);
      uint64_t v27 = OUTLINED_FUNCTION_58();
      if (OUTLINED_FUNCTION_45_0(v27))
      {
        uint64_t v28 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
        OUTLINED_FUNCTION_43_5(v28);
        OUTLINED_FUNCTION_20_11( &dword_0,  (os_log_s *)(v2 + 96),  (os_log_type_t)v24,  "#AutoShortcutFirstRunFlow failed to submit empty output to clear screen");
        OUTLINED_FUNCTION_1_0(v25);
      }

      swift_errorRelease(v1);

      OUTLINED_FUNCTION_49_17();
LABEL_17:
      OUTLINED_FUNCTION_67_10();
      __asm { BR              X0 }
    }

    unsigned __int8 v30 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
    *(void *)(v2 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 264) = v30;
    OUTLINED_FUNCTION_123_6(v30, (uint64_t)AutoShortcutFirstRunFlow.execute());
    OUTLINED_FUNCTION_67_10();
    return dispatch thunk of OutputPublisherAsync.publish(output:)(v31, v32, v33);
  }

  else
  {
    uint64_t v5 = v4 & 1;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v6 = OUTLINED_FUNCTION_48();
    uint64_t v7 = __swift_project_value_buffer(v6, (uint64_t)static Logger.voiceCommands);
    *(void *)(v2 + 280) = v7;
    uint64_t v8 = (os_log_s *)v7;
    Logger.logObject.getter(v7);
    uint64_t v9 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_31_0(v9))
    {
      uint64_t v10 = (uint8_t *)OUTLINED_FUNCTION_38(8LL);
      *(_DWORD *)uint64_t v10 = 67109120;
      *(_DWORD *)(v2 + 336) = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 336, v2 + 340, v10 + 4);
      _os_log_impl(&dword_0, v8, (os_log_type_t)v1, "#AutoShortcutFirstRunFlow receivedInput: %{BOOL}d", v10, 8u);
      OUTLINED_FUNCTION_1_0((uint64_t)v10);
    }

    uint64_t v11 = *(void **)(v2 + 200);
    uint64_t v12 = v11[5];
    uint64_t v13 = v11[6];
    __swift_project_boxed_opaque_existential_1(v11 + 2, v12);
    (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v12, v13);
    *(void *)(v2 + 28__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v14;
    uint64_t v15 = (void *)swift_task_alloc(dword_21AA44);
    *(void *)(v2 + 296) = v15;
    OUTLINED_FUNCTION_17_9(v15, (uint64_t)AutoShortcutFirstRunFlow.execute());
    OUTLINED_FUNCTION_67_10();
    return static AutoShortcutFirstRunFlow.setSiriAutoShortcutsEnablement(isEnable:bundleId:voiceShortcutsClient:userDefaults:)( v16,  v17,  v18,  v19,  v20);
  }

uint64_t AutoShortcutFirstRunFlow.execute()()
{
  *(_BYTE *)(v1 + 341) = v0;
  OUTLINED_FUNCTION_54_0(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  OUTLINED_FUNCTION_139_2();
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 24__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v1;
  OUTLINED_FUNCTION_92(v1, (uint64_t)AutoShortcutFirstRunFlow.execute());
  return OUTLINED_FUNCTION_67_2();
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 256) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 136));
  OUTLINED_FUNCTION_48_17();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  OUTLINED_FUNCTION_50_0();
  uint64_t v2 = (void *)(v1 + 96);
  OUTLINED_FUNCTION_51_3();
  *(void *)(v3 + 27__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 56));
  OUTLINED_FUNCTION_49_17();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 296));
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  OUTLINED_FUNCTION_139_2();
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 320) = v1;
  OUTLINED_FUNCTION_92(v1, (uint64_t)AutoShortcutFirstRunFlow.execute());
  return OUTLINED_FUNCTION_67_2();
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 32__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v1 + 136));
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v3, (uint64_t)static Logger.voiceCommands);
  uint64_t v4 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    OUTLINED_FUNCTION_43_5(v5);
    OUTLINED_FUNCTION_33_2(&dword_0, v6, v7, "#AutoShortcutFirstRunFlow failed to submit output");
    OUTLINED_FUNCTION_1_0(v2);
  }

  OUTLINED_FUNCTION_4_8();

  OUTLINED_FUNCTION_48_17();
  return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v1 + 8));
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v1 + 56));
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v3, (uint64_t)static Logger.voiceCommands);
  uint64_t v4 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    OUTLINED_FUNCTION_43_5(v5);
    OUTLINED_FUNCTION_33_2(&dword_0, v6, v7, "#AutoShortcutFirstRunFlow failed to submit empty output to clear screen");
    OUTLINED_FUNCTION_1_0(v2);
  }

  OUTLINED_FUNCTION_4_8();

  OUTLINED_FUNCTION_49_17();
  return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v1 + 8));
}

#error "DCAA4: call analysis failed (funcsize=77)"
uint64_t AutoShortcutFirstRunFlow.execute()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  OUTLINED_FUNCTION_77_1();
  OUTLINED_FUNCTION_10_0(v2);
  *(void *)(v0 + 240) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

#error "DCE38: call analysis failed (funcsize=53)"
uint64_t AutoShortcutFirstRunFlow.execute()()
{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 31__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

#error "DCF50: call analysis failed (funcsize=11)"
uint64_t AutoShortcutFirstRunFlow.execute()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v3, (uint64_t)static Logger.voiceCommands);
  uint64_t v4 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    OUTLINED_FUNCTION_43_5(v5);
    OUTLINED_FUNCTION_33_2(&dword_0, v6, v7, "#AutoShortcutFirstRunFlow failed to submit output");
    OUTLINED_FUNCTION_1_0(v2);
  }

  OUTLINED_FUNCTION_4_8();

  OUTLINED_FUNCTION_48_17();
  return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v1 + 8));
}

#error "DD1B0: call analysis failed (funcsize=26)"
#error "DD224: call analysis failed (funcsize=27)"
uint64_t static AutoShortcutFirstRunFlow.getAppName(bundleId:appNameResolver:)( uint64_t a1,  uint64_t a2,  void *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v6 = a3[3];
  uint64_t v7 = a3[4];
  uint64_t v8 = __swift_project_boxed_opaque_existential_1(a3, v6);
  return specialized static AutoShortcutFirstRunFlow.getAppName(bundleId:appNameResolver:)( a1,  a2,  (uint64_t)v8,  v3,  v6,  v7);
}

uint64_t static AutoShortcutFirstRunFlow.setSiriAutoShortcutsEnablement(isEnable:bundleId:voiceShortcutsClient:userDefaults:)( char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = a4;
  *(void *)(v5 + 56) = a5;
  *(void *)(v5 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a2;
  *(void *)(v5 + 40) = a3;
  *(_BYTE *)(v5 + 96) = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)static AutoShortcutFirstRunFlow.setSiriAutoShortcutsEnablement(isEnable:bundleId:voiceShortcutsClient:userDefaults:));
}

uint64_t static AutoShortcutFirstRunFlow.setSiriAutoShortcutsEnablement(isEnable:bundleId:voiceShortcutsClient:userDefaults:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = OUTLINED_FUNCTION_48();
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v3 = v2;
  *(void *)(v0 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v2;
  OUTLINED_FUNCTION_155();
  uint64_t v4 = (os_log_s *)OUTLINED_FUNCTION_66();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  BOOL v6 = OUTLINED_FUNCTION_45_0(v5);
  unint64_t v7 = *(void *)(v0 + 40);
  if (v6)
  {
    uint64_t v8 = *(void *)(v0 + 32);
    int v19 = *(unsigned __int8 *)(v0 + 96);
    uint64_t v9 = (_DWORD *)OUTLINED_FUNCTION_38(18LL);
    uint64_t v10 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v21 = v10;
    *uint64_t v9 = 136315394;
    OUTLINED_FUNCTION_11_11();
    *(void *)(v0 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v9 + 1);
    OUTLINED_FUNCTION_141_3();
    OUTLINED_FUNCTION_150_0();
    *(_DWORD *)(v0 + 9__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 92, v0 + 96, v11);
    OUTLINED_FUNCTION_140_2(&dword_0, v4, v3, "AppShortcuts enablement for %s is %{BOOL}d");
    OUTLINED_FUNCTION_30_3(v10, v12, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v10);
    OUTLINED_FUNCTION_1_0((uint64_t)v9);
  }

  else
  {
    OUTLINED_FUNCTION_19_1(*(void *)(v0 + 40));
  }

  uint64_t v13 = *(void **)(v0 + 48);
  uint64_t v14 = v13[3];
  uint64_t v15 = v13[4];
  __swift_project_boxed_opaque_existential_1(v13, v14);
  uint64_t v16 = *(int **)(v15 + 48);
  uint64_t v20 = (int *)((char *)v16 + *v16);
  __n128 v17 = (void *)swift_task_alloc(v16[1]);
  *(void *)(v0 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v17;
  *__n128 v17 = v0;
  v17[1] = static AutoShortcutFirstRunFlow.setSiriAutoShortcutsEnablement(isEnable:bundleId:voiceShortcutsClient:userDefaults:);
  return ((uint64_t (*)(void, void, void, uint64_t, uint64_t))v20)( *(unsigned __int8 *)(v0 + 96),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  v14,  v15);
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 80) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  if ((*(_BYTE *)(v0 + 96) & 1) == 0) {
    OUTLINED_FUNCTION_40_21();
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1LL);
}

uint64_t static AutoShortcutFirstRunFlow.setSiriAutoShortcutsEnablement(isEnable:bundleId:voiceShortcutsClient:userDefaults:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  a18 = v20;
  uint64_t v24 = *(os_log_s **)(v20 + 64);
  uint64_t v25 = swift_bridgeObjectRetain_n(*(void *)(v20 + 40), 2LL);
  Logger.logObject.getter(v25);
  os_log_type_t v26 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_23_7(v26))
  {
    uint64_t v28 = *(void *)(v20 + 32);
    unint64_t v27 = *(void *)(v20 + 40);
    int v29 = *(unsigned __int8 *)(v20 + 96);
    unsigned __int8 v30 = (_DWORD *)OUTLINED_FUNCTION_38(18LL);
    uint64_t v31 = OUTLINED_FUNCTION_38(32LL);
    a9 = v31;
    *unsigned __int8 v30 = 136315394;
    OUTLINED_FUNCTION_11_11();
    *(void *)(v20 + outlined init with copy of AppShortcutInvoking(*(void *)(v1 + 96) + 136LL, v1 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v27, &a9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v20 + 16, v20 + 24, v30 + 1);
    OUTLINED_FUNCTION_141_3();
    OUTLINED_FUNCTION_150_0();
    *(_DWORD *)(v20 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v20 + 88, v20 + 92, v32);
    OUTLINED_FUNCTION_140_2(&dword_0, v24, v21, "failed to set AppShortcuts enablement for %s to %{BOOL}d");
    OUTLINED_FUNCTION_30_3(v31, v33, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v31);
    OUTLINED_FUNCTION_1_0((uint64_t)v30);
  }

  else
  {
    OUTLINED_FUNCTION_19_1(*(void *)(v20 + 40));
  }

  OUTLINED_FUNCTION_4_8();

  if ((*(_BYTE *)(v20 + 96) & 1) == 0) {
    OUTLINED_FUNCTION_40_21();
  }
  return OUTLINED_FUNCTION_3_23(1LL, *(uint64_t (**)(void))(v20 + 8));
}

uint64_t AutoShortcutFirstRunFlow.makePromptOutput(appName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[5] = a3;
  v4[6] = v3;
  void v4[3] = a1;
  v4[4] = a2;
  return OUTLINED_FUNCTION_6_2((uint64_t)AutoShortcutFirstRunFlow.makePromptOutput(appName:));
}

uint64_t AutoShortcutFirstRunFlow.makePromptOutput(appName:)()
{
  uint64_t v1 = *(void **)(v0 + 48);
  uint64_t v2 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v1[5]);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v2 + 16));
  *(void *)(v0 + 56) = v3;
  OUTLINED_FUNCTION_17_9(v3, (uint64_t)AutoShortcutFirstRunFlow.makePromptOutput(appName:));
  uint64_t v4 = OUTLINED_FUNCTION_129();
  return v6(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_42_1();
  *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v0;
  OUTLINED_FUNCTION_54_0(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  void *v0;
  uint8_t *v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  os_log_type_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint8_t *v13;
  id v14;
  unint64_t v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v32;
  id *v33;
  OUTLINED_FUNCTION_28_1();
  if (one-time initialization token for voiceCommands != -1) {
LABEL_33:
  }
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  uint64_t v3 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_155();
  uint64_t v4 = (os_log_s *)OUTLINED_FUNCTION_66();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unint64_t v7 = v0[8];
  if (!v6)
  {
    OUTLINED_FUNCTION_19_1(v0[8]);
    goto LABEL_7;
  }

  uint64_t v2 = (uint64_t)(v0 + 2);
  uint64_t v1 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
  *(_DWORD *)uint64_t v1 = 134217984;
  if (v7 >> 62) {
    goto LABEL_41;
  }
  uint64_t v8 = *(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8LL));
  while (1)
  {
    OUTLINED_FUNCTION_28_4();
    v0[2] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2, v0 + 3, v1 + 4);
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_31_2(&dword_0, v4, v5, "auto shortcuts count: %ld", v1);
    OUTLINED_FUNCTION_1_0((uint64_t)v1);
LABEL_7:

    uint64_t v9 = v0[8];
    uint64_t v4 = *(os_log_s **)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain(v9);
    if (!v4) {
      goto LABEL_38;
    }
LABEL_9:
    if ((uint64_t)v4 >= 1)
    {
      uint64_t v10 = 0LL;
      uint64_t v11 = v7 & 0xC000000000000001LL;
      uint64_t v33 = (id *)(v0[8] + 32LL);
      uint64_t v12 = _swiftEmptyArrayStorage;
      while (1)
      {
        if (v11) {
          uint64_t v13 = (uint8_t *)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v0[8]);
        }
        else {
          uint64_t v13 = (uint8_t *)v33[v10];
        }
        uint64_t v1 = v13;
        uint64_t v14 = -[uint8_t orderedPhrases](v13, "orderedPhrases", v33);
        uint64_t v15 = type metadata accessor for LNAutoShortcutLocalizedPhrase();
        uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

        if ((unint64_t)v2 >> 62)
        {
          if (v2 < 0) {
            uint64_t v24 = v2;
          }
          else {
            uint64_t v24 = v2 & 0xFFFFFFFFFFFFFF8LL;
          }
          OUTLINED_FUNCTION_54_7();
          uint64_t v25 = _CocoaArrayWrapper.endIndex.getter(v24);
          OUTLINED_FUNCTION_2_6();
          if (!v25)
          {
LABEL_28:
            OUTLINED_FUNCTION_2_6();

            goto LABEL_29;
          }
        }

        else if (!*(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL)))
        {
          goto LABEL_28;
        }

        if ((v2 & 0xC000000000000001LL) != 0)
        {
          uint64_t v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v2);
        }

        else
        {
          if (!*(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL)))
          {
            __break(1u);
            goto LABEL_33;
          }

          uint64_t v16 = *(id *)(v2 + 32);
        }

        __n128 v17 = v16;
        OUTLINED_FUNCTION_2_6();
        uint64_t v18 = [v17 localizedPhrase];

        int v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        os_log_type_t v21 = v20;

        if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
        {
          OUTLINED_FUNCTION_157_1();
          uint64_t v12 = v26;
        }

        uint64_t v22 = v12[2];
        if (v22 >= v12[3] >> 1)
        {
          OUTLINED_FUNCTION_157_1();
          uint64_t v12 = v27;
        }

        void v12[2] = v22 + 1;
        uint64_t v23 = &v12[2 * v22];
        uint64_t v23[4] = v19;
        void v23[5] = v21;
LABEL_29:
        if (v4 == (os_log_s *)++v10) {
          goto LABEL_39;
        }
      }
    }

    __break(1u);
LABEL_41:
    else {
      uint64_t v32 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    OUTLINED_FUNCTION_28_8();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v32);
    OUTLINED_FUNCTION_28_4();
  }

  if (v9 < 0) {
    uint64_t v28 = v0[8];
  }
  else {
    uint64_t v28 = v7 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v9);
  uint64_t v4 = (os_log_s *)_CocoaArrayWrapper.endIndex.getter(v28);
  if (v4) {
    goto LABEL_9;
  }
LABEL_38:
  uint64_t v12 = _swiftEmptyArrayStorage;
LABEL_39:
  v0[9] = v12;
  int v29 = v0[6];
  OUTLINED_FUNCTION_19_1(v0[8]);
  unsigned __int8 v30 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(**(void **)(v29 + 176) + 288LL));
  v0[10] = v30;
  OUTLINED_FUNCTION_17_9(v30, (uint64_t)AutoShortcutFirstRunFlow.makePromptOutput(appName:));
  return ((uint64_t (*)(void *))v33)(v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_77_1();
  OUTLINED_FUNCTION_50_5();
  *(void *)(v0 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v2;
  *(void *)(v0 + 96) = v1;
  OUTLINED_FUNCTION_54_0(v3);
  if (!v1) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t *v0;
  OUTLINED_FUNCTION_53_18(*v0);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t (*v0)(void);
  OUTLINED_FUNCTION_134_2();
  uint64_t v0 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_27_2(v0);
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  swift_bridgeObjectRelease();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_134_2();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_134_2();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AutoShortcutFirstRunFlow.makePromptOutput(appName:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(void))
{
  uint64_t v10 = OUTLINED_FUNCTION_112_3();
  if ((dispatch thunk of DeviceState.isHomePod.getter(v10) & 1) != 0
    || (uint64_t v11 = OUTLINED_FUNCTION_112_3(), (dispatch thunk of DeviceState.isCarPlay.getter(v11, v12) & 1) != 0))
  {
    uint64_t v13 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(**(void **)(v9 + 48) + 224LL));
    *(void *)(v9 + 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v13;
    uint64_t v14 = AutoShortcutFirstRunFlow.makePromptOutput(appName:);
  }

  else
  {
    uint64_t v13 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(**(void **)(v9 + 48) + 240LL));
    *(void *)(v9 + 120) = v13;
    uint64_t v14 = AutoShortcutFirstRunFlow.makePromptOutput(appName:);
  }

  *uint64_t v13 = v9;
  v13[1] = v14;
  return OUTLINED_FUNCTION_84_12( *(void *)(v9 + 24),  *(void *)(v9 + 32),  *(void *)(v9 + 40),  *(void *)(v9 + 88),  a9);
}

uint64_t AutoShortcutFirstRunFlow.makeFirstRunPromptForHomePod(appName:autoShortcutPhrases:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v5[7] = OUTLINED_FUNCTION_9_0(*(void *)(v6 - 8));
  uint64_t v7 = OUTLINED_FUNCTION_131_4();
  v5[8] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[9] = v8;
  v5[10] = OUTLINED_FUNCTION_4_0(v8);
  v5[11] = OUTLINED_FUNCTION_11_0();
  uint64_t v9 = OUTLINED_FUNCTION_74_0();
  v5[12] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[13] = v10;
  v5[14] = OUTLINED_FUNCTION_9_0(v10);
  uint64_t v11 = OUTLINED_FUNCTION_56_3();
  v5[15] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[16] = v12;
  v5[17] = OUTLINED_FUNCTION_9_0(v12);
  uint64_t v13 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  v5[18] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v5[19] = v14;
  v5[20] = OUTLINED_FUNCTION_9_0(v14);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutFirstRunFlow.makeFirstRunPromptForHomePod(appName:autoShortcutPhrases:)()
{
  uint64_t v1 = v0[19];
  OUTLINED_FUNCTION_47_6(v2, enum case for RFFeatureFlags.ResponseFramework._SMART(_:));
  char v3 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  if ((v3 & 1) == 0)
  {
    uint64_t v8 = (uint64_t **)swift_task_alloc(dword_21AA5C);
    v0[36] = (uint64_t)v8;
    *uint64_t v8 = v0;
    v8[1] = (uint64_t *)AutoShortcutFirstRunFlow.makeFirstRunPromptForHomePod(appName:autoShortcutPhrases:);
    return AutoShortcutFirstRunFlow.makeFirstRunPromptForHomePod_preRFv2(appName:autoShortcutPhrases:)( v0[2],  v0[3],  v0[4],  v0[5]);
  }

  uint64_t v4 = (void *)v0[5];
  uint64_t v5 = v4[2];
  if (v5)
  {
    uint64_t v7 = v4[4];
    unint64_t v6 = v4[5];
    OUTLINED_FUNCTION_80();
    if (v5 != 1)
    {
      uint64_t v5 = v4[6];
      unint64_t v10 = v4[7];
      OUTLINED_FUNCTION_9_4();
      goto LABEL_9;
    }

    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v7 = 0LL;
    unint64_t v6 = 0xE000000000000000LL;
  }

  unint64_t v10 = 0xE000000000000000LL;
LABEL_9:
  v0[21] = v6;
  v0[22] = v10;
  uint64_t v11 = *(void *)(v0[6] + 176);
  v0[23] = v11;
  uint64_t v12 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(*(void *)v11 + 272LL));
  v0[24] = (uint64_t)v12;
  *uint64_t v12 = v0;
  v12[1] = AutoShortcutFirstRunFlow.makeFirstRunPromptForHomePod(appName:autoShortcutPhrases:);
  return v13(v0[3], v0[4], v7, v6, v5, v10);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  void *v10;
  uint64_t (*v11)(void);
  OUTLINED_FUNCTION_77_1();
  OUTLINED_FUNCTION_50_5();
  v0[25] = v3;
  v0[26] = v1;
  OUTLINED_FUNCTION_54_0(v4);
  if (v1)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_11_26(v5, v6, v7);
  }

  else
  {
    uint64_t v9 = v0[23];
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_20();
    unint64_t v10 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(*(void *)v9 + 232LL));
    v0[27] = v10;
    *unint64_t v10 = v2;
    v10[1] = AutoShortcutFirstRunFlow.makeFirstRunPromptForHomePod(appName:autoShortcutPhrases:);
    return OUTLINED_FUNCTION_4_18(v11);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_79_7();
  OUTLINED_FUNCTION_10_0(v6);
  v5[28] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v5[29] = v3;
    v5[30] = v2;
    v5[31] = v0;
    _BYTE v5[32] = v4;
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, void *, void *);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v1 = v0[31];
  uint64_t v2 = v0[32];
  uint64_t v4 = v0[29];
  char v3 = v0[30];
  uint64_t v5 = v0[17];
  uint64_t v28 = v0[16];
  int v29 = v0[15];
  unint64_t v6 = v0[11];
  uint64_t v23 = (id)v0[25];
  uint64_t v24 = v0[9];
  uint64_t v25 = v0[10];
  os_log_type_t v26 = v0[8];
  unint64_t v27 = v0[7];
  uint64_t v7 = *(void **)(v0[6] + 184LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *, void *))(*(void *)v7 + 80LL);
  OUTLINED_FUNCTION_80();
  OUTLINED_FUNCTION_11_11();
  v8(v2, v1, v3, v4, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
  OUTLINED_FUNCTION_19_1(v4);
  uint64_t v9 = OUTLINED_FUNCTION_19_1(v1);
  static DialogPhase.confirmation.getter(v9, v10, v11);
  uint64_t v12 = OUTLINED_FUNCTION_111_3((uint64_t)[v23 catId]);

  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v25, v6, v26);
  OUTLINED_FUNCTION_153_1(v13, (uint64_t)CustomIntentDisambiguationItemContainer.init(items:));
  OutputGenerationManifest.responseViewId.setter(v12);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v6, v26);
  OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v27, v5, v29);
  __swift_storeEnumTagSinglePayload(v27, 0LL, 1LL, v29);
  OutputGenerationManifest.nlContextUpdate.setter(v27);
  OutputGenerationManifest.canUseServerTTS.setter(1LL);
  uint64_t v14 = OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_51(v14);
  v0[33] = OUTLINED_FUNCTION_57();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v16 = OUTLINED_FUNCTION_23_4(v15);
  *(_OWORD *)(v16 + outlined init with copy of AppShortcutInvoking(*(void *)(v1 + 96) + 136LL, v1 + 16) = xmmword_17E150;
  *(void *)(v16 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v23;
  uint64_t v31 = v16;
  specialized Array._endMutation()(v16, v17, v18);
  v0[34] = v31;
  uint64_t v20 = v23;
  os_log_type_t v21 = (void *)swift_task_alloc(v19);
  v0[35] = v21;
  os_log_s *v21 = v0;
  v21[1] = AutoShortcutFirstRunFlow.makeFirstRunPromptForHomePod(appName:autoShortcutPhrases:);
  return ((uint64_t (*)(void, uint64_t, void))v30)(v0[2], v31, v0[14]);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 280));
  OUTLINED_FUNCTION_20();
  swift_release();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  OUTLINED_FUNCTION_41_2();
  uint64_t v1 = *(void *)(v0 + 128);

  OUTLINED_FUNCTION_98_4();
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  swift_task_dealloc();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_3_14(v2);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  OUTLINED_FUNCTION_41_2();
  uint64_t v5 = v1;
  unint64_t v6 = v2;
  uint64_t v4 = v0;
  uint64_t v4 = (uint64_t *)*v0;
  OUTLINED_FUNCTION_223(v4[36], &v4);
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_3_14((uint64_t (*)(void))v0[1]);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_41_2();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_66_15();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_41_2();

  OUTLINED_FUNCTION_66_15();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AutoShortcutFirstRunFlow.makeFirstRunPromptForHomePod_preRFv2(appName:autoShortcutPhrases:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v5[12] = OUTLINED_FUNCTION_9_0(*(void *)(v6 - 8));
  uint64_t v7 = OUTLINED_FUNCTION_56_3();
  v5[13] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[14] = v8;
  v5[15] = OUTLINED_FUNCTION_9_0(v8);
  uint64_t v9 = OUTLINED_FUNCTION_44_6();
  v5[16] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[17] = v10;
  v5[18] = OUTLINED_FUNCTION_9_0(v10);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutFirstRunFlow.makeFirstRunPromptForHomePod_preRFv2(appName:autoShortcutPhrases:)()
{
  uint64_t v1 = (void *)v0[10];
  uint64_t v2 = v1[2];
  if (v2)
  {
    uint64_t v4 = v1[4];
    unint64_t v3 = v1[5];
    OUTLINED_FUNCTION_80();
    if (v2 != 1)
    {
      uint64_t v2 = v1[6];
      unint64_t v5 = v1[7];
      OUTLINED_FUNCTION_9_4();
      goto LABEL_7;
    }

    uint64_t v2 = 0LL;
  }

  else
  {
    uint64_t v4 = 0LL;
    unint64_t v3 = 0xE000000000000000LL;
  }

  unint64_t v5 = 0xE000000000000000LL;
LABEL_7:
  v0[19] = v3;
  v0[20] = v5;
  uint64_t v6 = *(void *)(v0[11] + 176LL);
  v0[21] = v6;
  uint64_t v7 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(*(void *)v6 + 280LL));
  v0[22] = v7;
  *uint64_t v7 = v0;
  v7[1] = AutoShortcutFirstRunFlow.makeFirstRunPromptForHomePod_preRFv2(appName:autoShortcutPhrases:);
  return v9(v0[18], v0[8], v0[9], v4, v3, v2, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v9 = *v1;
  uint64_t v2 = v9;
  OUTLINED_FUNCTION_10_0(&v9);
  *(void *)(v2 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 184) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_14();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return swift_task_switch(v3, v4, v5);
  }

  else
  {
    uint64_t v7 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(**(void **)(v2 + 168) + 232LL));
    *(void *)(v2 + 19__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v7;
    *uint64_t v7 = v1;
    v7[1] = AutoShortcutFirstRunFlow.makeFirstRunPromptForHomePod_preRFv2(appName:autoShortcutPhrases:);
    return v8();
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_79_7();
  OUTLINED_FUNCTION_10_0(v6);
  v5[25] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v5[26] = v3;
    v5[27] = v2;
    v5[28] = v0;
    v5[29] = v4;
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, void *, void *);
  uint64_t v9;
  uint64_t v10;
  Swift::Bool v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  OUTLINED_FUNCTION_63_0();
  uint64_t v2 = v0[28];
  uint64_t v1 = v0[29];
  uint64_t v4 = v0[26];
  unint64_t v3 = v0[27];
  unint64_t v5 = v0[15];
  int v19 = v0[17];
  uint64_t v20 = v0[16];
  uint64_t v15 = v0[14];
  uint64_t v16 = v0[18];
  uint64_t v6 = v0[12];
  uint64_t v7 = v0[11];
  __n128 v17 = v0[13];
  uint64_t v18 = (void *)v0[7];
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *, void *))(**(void **)(v7 + 184) + 80LL);
  swift_bridgeObjectRetain(v2);
  OUTLINED_FUNCTION_28_8();
  v8(v1, v2, v3, v4, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
  OUTLINED_FUNCTION_19_1(v4);
  OUTLINED_FUNCTION_19_1(v2);
  uint64_t v9 = *(void *)(v7 + 120);
  uint64_t v10 = *(void *)(v7 + 128);
  __swift_project_boxed_opaque_existential_1((void *)(v7 + 96), v9);
  LOBYTE(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 9) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v9, v10);
  uint64_t v11 = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v6, v5, v17);
  __swift_storeEnumTagSinglePayload(v6, 0LL, 1LL, v17);
  type metadata accessor for AceOutput(0LL);
  OUTLINED_FUNCTION_106_2();
  v18[3] = v12;
  void v18[4] = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v18);
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v16,  v7 + 96,  v9 & 1,  _swiftEmptyArrayStorage,  v11,  1LL,  v6,  _swiftEmptyArrayStorage,  v10);
  outlined destroy of Any?(v10, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of Any?(v6, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v5, v17);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v16, v20);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_20_0();
  uint64_t v13 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return v13();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_121_4();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  return OUTLINED_FUNCTION_4_18(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  (*(void (**)(void, void))(*(void *)(v0 + 136) + 8LL))(*(void *)(v0 + 144), *(void *)(v0 + 128));
  OUTLINED_FUNCTION_121_4();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  return OUTLINED_FUNCTION_4_18(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AutoShortcutFirstRunFlow.makeFirstRunOutput(appName:autoShortcutPhrases:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v5[12] = OUTLINED_FUNCTION_9_0(*(void *)(v6 - 8));
  uint64_t v7 = OUTLINED_FUNCTION_131_4();
  v5[13] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[14] = v8;
  v5[15] = OUTLINED_FUNCTION_4_0(v8);
  v5[16] = OUTLINED_FUNCTION_11_0();
  uint64_t v9 = OUTLINED_FUNCTION_74_0();
  v5[17] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[18] = v10;
  v5[19] = OUTLINED_FUNCTION_9_0(v10);
  uint64_t v11 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  v5[20] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[21] = v12;
  v5[22] = OUTLINED_FUNCTION_9_0(v12);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutFirstRunFlow.makeFirstRunOutput(appName:autoShortcutPhrases:)(uint64_t a1)
{
  uint64_t v2 = v1[21];
  OUTLINED_FUNCTION_47_6(a1, enum case for RFFeatureFlags.ResponseFramework._SMART(_:));
  char v3 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  uint64_t v4 = (void *)v1[11];
  if ((v3 & 1) != 0)
  {
    uint64_t v5 = v4[22];
    v1[23] = v5;
    uint64_t v6 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(*(void *)v5 + 128LL));
    _BYTE v1[24] = (uint64_t)v6;
    *uint64_t v6 = v1;
    v6[1] = AutoShortcutFirstRunFlow.makeFirstRunOutput(appName:autoShortcutPhrases:);
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v1[8], v1[9]);
  }

  else
  {
    uint64_t v8 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(*v4 + 248LL));
    v1[43] = (uint64_t)v8;
    *uint64_t v8 = v1;
    v8[1] = AutoShortcutFirstRunFlow.makeFirstRunOutput(appName:autoShortcutPhrases:);
    return OUTLINED_FUNCTION_84_12(v1[7], v1[8], v1[9], v1[10], v9);
  }

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v9 = *v2;
  uint64_t v4 = v9;
  OUTLINED_FUNCTION_10_0(&v9);
  *(void *)(v4 + 30__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v1;
  swift_task_dealloc();
  if (!v1) {
    *(void *)(v4 + 31__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a1;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_11_26(v5, v6, v7);
}

uint64_t AutoShortcutFirstRunFlow.makeFirstRunOutput(appName:autoShortcutPhrases:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(void))
{
  uint64_t v11 = *v10;
  OUTLINED_FUNCTION_50_5();
  *(void *)(v11 + 200) = v12;
  *(void *)(v11 + 20__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v13;
  OUTLINED_FUNCTION_54_0(v14);
  if (v9)
  {
    OUTLINED_FUNCTION_95_5();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_33_0();
    return OUTLINED_FUNCTION_18_2((uint64_t (*)(void))v10[1]);
  }

  else
  {
    uint64_t v16 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(**(void **)(v11 + 184) + 232LL));
    *(void *)(v11 + 2outlined init with copy of AppShortcutInvoking(*(void *)(v1 + 96) + 136LL, v1 + 16) = v16;
    void *v16 = v10;
    v16[1] = AutoShortcutFirstRunFlow.makeFirstRunOutput(appName:autoShortcutPhrases:);
    return OUTLINED_FUNCTION_18_2(a9);
  }

uint64_t AutoShortcutFirstRunFlow.makeFirstRunOutput(appName:autoShortcutPhrases:)()
{
  v3[28] = v1;
  v3[29] = v2;
  v3[30] = v4;
  v3[31] = v5;
  v3[32] = v0;
  OUTLINED_FUNCTION_54_0(v6);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v4)(void);
  uint64_t v1 = *(void *)(*(void *)(v0 + 80) + 16LL);
  uint64_t v2 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(**(void **)(v0 + 184) + 248LL));
  *(void *)(v0 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 264) = v2;
  *uint64_t v2 = v0;
  v2[1] = AutoShortcutFirstRunFlow.makeFirstRunOutput(appName:autoShortcutPhrases:);
  return OUTLINED_FUNCTION_83_7(v1, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v10;
  uint64_t (*v11)(void);
  OUTLINED_FUNCTION_77_1();
  OUTLINED_FUNCTION_50_5();
  *(void *)(v0 + 27__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v3;
  *(void *)(v0 + 280) = v4;
  *(void *)(v0 + 28__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v1;
  OUTLINED_FUNCTION_54_0(v5);
  if (v1)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_11_26(v6, v7, v8);
  }

  else
  {
    uint64_t v10 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(**(void **)(v0 + 184) + 264LL));
    *(void *)(v0 + 296) = v10;
    *uint64_t v10 = v2;
    v10[1] = AutoShortcutFirstRunFlow.makeFirstRunOutput(appName:autoShortcutPhrases:);
    return OUTLINED_FUNCTION_78_2(*(void *)(v0 + 64), *(void *)(v0 + 72), v11);
  }

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  OUTLINED_FUNCTION_50_0();
  uint64_t v1 = (void *)(v0 + 16);
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 336));
  swift_release();
  OUTLINED_FUNCTION_14();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_11_26(v2, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v1 = *(void *)(v0 + 144);

  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  swift_task_dealloc();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_3_14(v2);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_104();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_52_15();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_104();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_52_15();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_104();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_52_15();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AutoShortcutFirstRunFlow.makeFirstRunOutput(appName:autoShortcutPhrases:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(v3 + 312);
  uint64_t v40 = *(void *)(v3 + 280);
  uint64_t v41 = v4;
  uint64_t v39 = *(void *)(v3 + 272);
  uint64_t v42 = *(void *)(v3 + 248);
  uint64_t v36 = *(void *)(v3 + 240);
  uint64_t v35 = *(void *)(v3 + 232);
  uint64_t v43 = *(void *)(v3 + 224);
  __int128 v38 = *(_OWORD *)(v3 + 200);
  uint64_t v5 = *(void *)(v3 + 120);
  uint64_t v6 = *(void *)(v3 + 128);
  uint64_t v8 = *(void *)(v3 + 104);
  uint64_t v7 = *(void *)(v3 + 112);
  uint64_t v9 = *(void *)(v3 + 88);
  uint64_t v37 = *(void *)(v3 + 80);
  static DialogPhase.confirmation.getter(a1, a2, a3);
  id v10 = [v4 catId];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v12 = OUTLINED_FUNCTION_77_12(v5, v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
  OUTLINED_FUNCTION_153_1(v12, (uint64_t)CustomIntentDisambiguationItemContainer.init(items:));
  OutputGenerationManifest.responseViewId.setter(v11);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
  OUTLINED_FUNCTION_28_8();
  __n128 v14 = swift_bridgeObjectRetain(v42);
  v13(v43, v35, v36, v42, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage, v14);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_28_4();
  uint64_t v15 = OUTLINED_FUNCTION_56_3();
  uint64_t v16 = OUTLINED_FUNCTION_158_1(v15);
  OutputGenerationManifest.nlContextUpdate.setter(v16);
  uint64_t v17 = *(void *)(v9 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v9 + 16), *(void *)(v9 + 40));
  uint64_t v18 = *(uint64_t (**)(uint64_t))(v17 + 32);
  OUTLINED_FUNCTION_11_11();
  uint64_t v19 = OUTLINED_FUNCTION_129();
  uint64_t v20 = v18(v19);
  uint64_t v22 = v21;
  uint64_t v23 = OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_51(v23);
  *(void *)(v3 + 320) = OUTLINED_FUNCTION_57();
  uint64_t v24 = type metadata accessor for WorkflowDataModels(0LL);
  *(void *)(v3 + 40) = v24;
  lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels,  255LL,  type metadata accessor for WorkflowDataModels,  (uint64_t)&protocol conformance descriptor for WorkflowDataModels);
  *(void *)(v3 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v25;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v3 + 16));
  void *boxed_opaque_existential_1 = v37;
  boxed_opaque_existential_1[1] = 3LL;
  boxed_opaque_existential_1[2] = v20;
  boxed_opaque_existential_1[3] = v22;
  *((_OWORD *)boxed_opaque_existential_1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v38;
  boxed_opaque_existential_1[6] = v39;
  boxed_opaque_existential_1[7] = v40;
  boxed_opaque_existential_1[8] = 0LL;
  boxed_opaque_existential_1[9] = 0LL;
  boxed_opaque_existential_1[10] = v43;
  boxed_opaque_existential_1[11] = v35;
  boxed_opaque_existential_1[12] = v36;
  boxed_opaque_existential_1[13] = v42;
  swift_storeEnumTagMultiPayload(boxed_opaque_existential_1, v24, 12LL);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v28 = OUTLINED_FUNCTION_23_4(v27);
  *(_OWORD *)(v28 + outlined init with copy of AppShortcutInvoking(*(void *)(v1 + 96) + 136LL, v1 + 16) = xmmword_17E150;
  *(void *)(v28 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v41;
  uint64_t v45 = v28;
  specialized Array._endMutation()(v28, v29, v30);
  *(void *)(v3 + 32__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v45;
  id v32 = v41;
  uint64_t v33 = (void *)swift_task_alloc(v31);
  *(void *)(v3 + 336) = v33;
  *uint64_t v33 = v3;
  v33[1] = AutoShortcutFirstRunFlow.makeFirstRunOutput(appName:autoShortcutPhrases:);
  return ((uint64_t (*)(void, uint64_t, uint64_t, void))v44)( *(void *)(v3 + 56),  v3 + 16,  v45,  *(void *)(v3 + 152));
}

uint64_t AutoShortcutFirstRunFlow.makeFirstRunOutput(appName:autoShortcutPhrases:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16)
{
  a15 = v17;
  a16 = v18;
  a14 = v16;
  a14 = (uint64_t *)*v16;
  OUTLINED_FUNCTION_223(a14[43], &a14);
  OUTLINED_FUNCTION_95_5();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_18_2((uint64_t (*)(void))v16[1]);
}

uint64_t AutoShortcutFirstRunFlow.makeFirstRunPatternOutput_preRFv2(appName:autoShortcutPhrases:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[27] = a4;
  v5[28] = v4;
  v5[25] = a2;
  v5[26] = a3;
  v5[24] = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v5[29] = OUTLINED_FUNCTION_9_0(*(void *)(v6 - 8));
  uint64_t v7 = OUTLINED_FUNCTION_131_4();
  v5[30] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[31] = v8;
  _BYTE v5[32] = OUTLINED_FUNCTION_4_0(v8);
  v5[33] = OUTLINED_FUNCTION_11_0();
  uint64_t v9 = OUTLINED_FUNCTION_74_0();
  v5[34] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[35] = v10;
  v5[36] = OUTLINED_FUNCTION_9_0(v10);
  uint64_t v11 = type metadata accessor for TemplatingText(0LL);
  v5[37] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[38] = v12;
  v5[39] = OUTLINED_FUNCTION_9_0(v12);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingSection?);
  _BYTE v5[40] = OUTLINED_FUNCTION_4_0(*(void *)(v13 - 8));
  v5[41] = OUTLINED_FUNCTION_11_0();
  uint64_t v14 = OUTLINED_FUNCTION_44_6();
  v5[42] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v5[43] = v15;
  v5[44] = OUTLINED_FUNCTION_9_0(v15);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutFirstRunFlow.makeFirstRunPatternOutput_preRFv2(appName:autoShortcutPhrases:)()
{
  uint64_t v1 = *(void *)(v0[28] + 176LL);
  v0[45] = v1;
  uint64_t v2 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(*(void *)v1 + 120LL));
  v0[46] = v2;
  *uint64_t v2 = v0;
  v2[1] = AutoShortcutFirstRunFlow.makeFirstRunPatternOutput_preRFv2(appName:autoShortcutPhrases:);
  return v4(v0[44], v0[25], v0[26]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  uint64_t (*v9)(void);
  OUTLINED_FUNCTION_77_1();
  OUTLINED_FUNCTION_10_0(v3);
  *(void *)(v0 + 376) = v1;
  swift_task_dealloc();
  if (v1)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_11_26(v4, v5, v6);
  }

  else
  {
    uint64_t v8 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(**(void **)(v0 + 360) + 232LL));
    *(void *)(v0 + 38__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v8;
    *uint64_t v8 = v2;
    v8[1] = AutoShortcutFirstRunFlow.makeFirstRunPatternOutput_preRFv2(appName:autoShortcutPhrases:);
    return OUTLINED_FUNCTION_4_18(v9);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_42_1();
  v3[49] = v1;
  v3[50] = v2;
  v3[51] = v4;
  v3[52] = v5;
  v3[53] = v0;
  OUTLINED_FUNCTION_54_0(v6);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v4)(void);
  uint64_t v1 = *(void *)(*(void *)(v0 + 216) + 16LL);
  uint64_t v2 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(**(void **)(v0 + 360) + 248LL));
  *(void *)(v0 + 43__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v2;
  *uint64_t v2 = v0;
  v2[1] = AutoShortcutFirstRunFlow.makeFirstRunPatternOutput_preRFv2(appName:autoShortcutPhrases:);
  return OUTLINED_FUNCTION_83_7(v1, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v10;
  uint64_t (*v11)(void);
  OUTLINED_FUNCTION_77_1();
  OUTLINED_FUNCTION_50_5();
  *(void *)(v0 + 440) = v3;
  *(void *)(v0 + 44__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v4;
  *(void *)(v0 + 456) = v1;
  OUTLINED_FUNCTION_54_0(v5);
  if (v1)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_11_26(v6, v7, v8);
  }

  else
  {
    uint64_t v10 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(**(void **)(v0 + 360) + 256LL));
    *(void *)(v0 + 46__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v10;
    *uint64_t v10 = v2;
    v10[1] = AutoShortcutFirstRunFlow.makeFirstRunPatternOutput_preRFv2(appName:autoShortcutPhrases:);
    return OUTLINED_FUNCTION_78_2(*(void *)(v0 + 200), *(void *)(v0 + 208), v11);
  }

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_50_5();
  *(void *)(v2 + 47__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v3;
  *(void *)(v2 + 480) = v0;
  OUTLINED_FUNCTION_54_0(v4);
  if (v0)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_20();
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_11_26(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v3 = *(void *)(v0 + 416);
  uint64_t v4 = *(void *)(v0 + 400);
  uint64_t v5 = *(void *)(v0 + 352);
  uint64_t v6 = *(void **)(v0 + 224);
  uint64_t v7 = v6[15];
  uint64_t v8 = v6[16];
  __swift_project_boxed_opaque_existential_1(v6 + 12, v7);
  LOBYTE(OUTLINED_FUNCTION_223(*(void *)(v4 + 64), v7) = dispatch thunk of DeviceState.isWatch.getter(v7, v8);
  swift_bridgeObjectRetain(v4);
  uint64_t v9 = OUTLINED_FUNCTION_80();
  TemplatingResult.sections.getter(v9);
  if ((v7 & 1) != 0)
  {
    uint64_t v10 = *(void *)(v0 + 328);
    OUTLINED_FUNCTION_138_2();
    OUTLINED_FUNCTION_20();
    uint64_t v11 = type metadata accessor for TemplatingSection(0LL);
    uint64_t v12 = OUTLINED_FUNCTION_93_0(v11);
    if ((_DWORD)v12 == 1)
    {
      OUTLINED_FUNCTION_108_0(v12, &demangling cache variable for type metadata for TemplatingSection?);
      uint64_t v3 = 0LL;
      uint64_t v10 = 0xE000000000000000LL;
    }

    else
    {
      OUTLINED_FUNCTION_97_6();
      uint64_t v16 = OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL));
      TemplatingText.text.getter(v16);
      OUTLINED_FUNCTION_69_9();
    }

    *(void *)(v0 + 48__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v10;
    uint64_t v17 = OUTLINED_FUNCTION_31_19();
    *(void *)(v0 + 10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v5;
    *(void *)(v0 + 496) = v18;
    *(_OWORD *)(v0 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v27;
    *(_OWORD *)(v0 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v28;
    *(void *)(v0 + 14__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v2;
    *(void *)(v0 + 15__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v1;
    *(void *)(v0 + outlined init with copy of AppShortcutInvoking(v0 + 128, v1 - 160) = v3;
    *(void *)(v0 + 16__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v10;
    *(void *)(v0 + 176) = v17;
    *(void *)(v0 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 184) = v18;
    uint64_t v19 = dword_21FF0C;
    OUTLINED_FUNCTION_9_4();
    uint64_t v20 = (void *)swift_task_alloc(v19);
    *(void *)(v0 + 50__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v20;
    OUTLINED_FUNCTION_17_9( v20,  (uint64_t)AutoShortcutFirstRunFlow.makeFirstRunPatternOutput_preRFv2(appName:autoShortcutPhrases:));
    return AutoShortcutFirstRunWatchVisual.data.getter();
  }

  else
  {
    uint64_t v13 = *(void *)(v0 + 320);
    OUTLINED_FUNCTION_138_2();
    OUTLINED_FUNCTION_20();
    uint64_t v14 = type metadata accessor for TemplatingSection(0LL);
    uint64_t v15 = OUTLINED_FUNCTION_93_0(v14);
    if ((_DWORD)v15 == 1)
    {
      OUTLINED_FUNCTION_108_0(v15, &demangling cache variable for type metadata for TemplatingSection?);
      uint64_t v3 = 0LL;
      uint64_t v13 = 0xE000000000000000LL;
    }

    else
    {
      OUTLINED_FUNCTION_97_6();
      uint64_t v22 = OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL));
      TemplatingText.text.getter(v22);
      OUTLINED_FUNCTION_69_9();
    }

    *(void *)(v0 + 536) = v13;
    uint64_t v23 = OUTLINED_FUNCTION_31_19();
    *(void *)(v0 + outlined init with copy of AppShortcutInvoking(*(void *)(v1 + 96) + 136LL, v1 + 16) = v5;
    *(void *)(v0 + 54__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v24;
    *(_OWORD *)(v0 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v27;
    *(_OWORD *)(v0 + 40) = v28;
    *(void *)(v0 + 56) = v2;
    *(void *)(v0 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v1;
    *(void *)(v0 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v3;
    *(void *)(v0 + 80) = v13;
    *(void *)(v0 + 8__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v23;
    *(void *)(v0 + 96) = v24;
    uint64_t v25 = dword_21C58C;
    OUTLINED_FUNCTION_9_4();
    os_log_type_t v26 = (void *)swift_task_alloc(v25);
    *(void *)(v0 + 55__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v26;
    OUTLINED_FUNCTION_17_9( v26,  (uint64_t)AutoShortcutFirstRunFlow.makeFirstRunPatternOutput_preRFv2(appName:autoShortcutPhrases:));
    return AutoShortcutFirstRunVisual.data.getter();
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_115_2();
  OUTLINED_FUNCTION_10_0(v4);
  v3[64] = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_28_4();
  OUTLINED_FUNCTION_69();
  OUTLINED_FUNCTION_2_6();
  if (v1)
  {
    uint64_t v5 = v3[50];
    OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_19_1(v5);
    OUTLINED_FUNCTION_20();
  }

  else
  {
    OUTLINED_FUNCTION_143_2();
    OUTLINED_FUNCTION_20();
    v3[65] = v0;
    v3[66] = v2;
    OUTLINED_FUNCTION_37();
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 272);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return v5();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_8_36();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  return OUTLINED_FUNCTION_2_0(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_65_12();
  OUTLINED_FUNCTION_8_36();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  return OUTLINED_FUNCTION_2_0(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_65_12();
  OUTLINED_FUNCTION_8_36();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  return OUTLINED_FUNCTION_2_0(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_65_12();
  OUTLINED_FUNCTION_8_36();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  return OUTLINED_FUNCTION_2_0(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_101_5();
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  OUTLINED_FUNCTION_8_36();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  return OUTLINED_FUNCTION_2_0(*(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_101_5();
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  OUTLINED_FUNCTION_8_36();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  return OUTLINED_FUNCTION_2_0(*(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_17_0();
  uint64_t v1 = *(void *)(v0 + 344);

  OUTLINED_FUNCTION_98_4();
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_8_36();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  return OUTLINED_FUNCTION_2_0(*(uint64_t (**)(void))(v0 + 8));
}

#error "DF700: call analysis failed (funcsize=53)"
uint64_t AutoShortcutFirstRunFlow.makeFirstRunPatternOutput_preRFv2(appName:autoShortcutPhrases:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_115_2();
  OUTLINED_FUNCTION_10_0(v4);
  v3[70] = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_28_4();
  OUTLINED_FUNCTION_69();
  OUTLINED_FUNCTION_2_6();
  if (v1)
  {
    uint64_t v5 = v3[50];
    OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_19_1(v5);
    OUTLINED_FUNCTION_20();
  }

  else
  {
    OUTLINED_FUNCTION_143_2();
    OUTLINED_FUNCTION_20();
    v3[71] = v0;
    v3[72] = v2;
    OUTLINED_FUNCTION_37();
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

#error "DF88C: call analysis failed (funcsize=53)"
uint64_t AutoShortcutFirstRunFlow.makeFirstRunPatternOutput_preRFv2(appName:autoShortcutPhrases:)()
{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 600) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t AutoShortcutFirstRunFlow.shouldPresentFirstRunExperience()()
{
  *(void *)(v1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v0;
  *(void *)(v1 + 40) = *v0;
  return OUTLINED_FUNCTION_6_2((uint64_t)AutoShortcutFirstRunFlow.shouldPresentFirstRunExperience());
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v1 = v0[4];
  OUTLINED_FUNCTION_102_5((void *)(v1 + 16));
  uint64_t v2 = OUTLINED_FUNCTION_129();
  v3(v2);
  uint64_t v5 = v4;
  v0[6] = v4;
  uint64_t v6 = (void *)swift_task_alloc(dword_21AA7C);
  v0[7] = v6;
  uint64_t v7 = OUTLINED_FUNCTION_123_6(v6, (uint64_t)AutoShortcutFirstRunFlow.shouldPresentFirstRunExperience());
  return static AutoShortcutFirstRunFlow.isAutoShortcutsEnabledFor(bundleId:voiceShortcutsClient:)(v7, v5, v1 + 232);
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_42_1();
  *(_BYTE *)(v1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v0;
  OUTLINED_FUNCTION_54_0(v2);
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  os_log_s *v3;
  os_log_type_t v4;
  BOOL v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_s *v20;
  os_log_type_t v21;
  BOOL v22;
  void *v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v1 = *(unsigned __int8 *)(v0 + 64);
  if (v1 == 2)
  {
LABEL_14:
    uint64_t v16 = 0LL;
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v16);
  }

  if ((v1 & 1) != 0)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v18 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.voiceCommands);
    uint64_t v19 = OUTLINED_FUNCTION_154_0();
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    uint64_t v21 = static os_log_type_t.debug.getter();
    uint64_t v22 = os_log_type_enabled(v20, v21);
    uint64_t v23 = *(void **)(v0 + 32);
    if (v22)
    {
      uint64_t v24 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v36 = OUTLINED_FUNCTION_38(32LL);
      *(_DWORD *)uint64_t v24 = 136315138;
      uint64_t v25 = v23[5];
      os_log_type_t v26 = v23[6];
      OUTLINED_FUNCTION_102_5(v23 + 2);
      uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 32))(v25, v26);
      *(void *)(v0 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = OUTLINED_FUNCTION_144_0(v27, v28, v29, v30, v31, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v24 + 4);
      OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_107_0((uint64_t)v23);
      OUTLINED_FUNCTION_31_2( &dword_0,  v20,  v21,  "First run: App shortcuts enabled for %s, omitting first run prompt",  v24);
      OUTLINED_FUNCTION_30_3(v36, v33, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v36);
      OUTLINED_FUNCTION_1_0((uint64_t)v24);
    }

    else
    {
      OUTLINED_FUNCTION_107_0(*(void *)(v0 + 32));
    }

    goto LABEL_14;
  }

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v2 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_154_0();
  uint64_t v3 = (os_log_s *)OUTLINED_FUNCTION_66();
  uint64_t v4 = static os_log_type_t.debug.getter();
  uint64_t v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void **)(v0 + 32);
  if (v5)
  {
    uint64_t v7 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v35 = OUTLINED_FUNCTION_38(32LL);
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v9 = v6[5];
    uint64_t v8 = v6[6];
    __swift_project_boxed_opaque_existential_1(v6 + 2, v9);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 32))(v9, v8);
    *(void *)(v0 + outlined init with copy of AppShortcutInvoking(*(void *)(v1 + 96) + 136LL, v1 + 16) = OUTLINED_FUNCTION_144_0(v10, v11, v12, v13, v14, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v7 + 4);
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_107_0((uint64_t)v6);
    OUTLINED_FUNCTION_31_2( &dword_0,  v3,  v4,  "First run: App shortcuts not enabled for %s, showing first run prompt",  v7);
    uint64_t v16 = 1LL;
    OUTLINED_FUNCTION_30_3(v35, v17, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v35);
    OUTLINED_FUNCTION_1_0((uint64_t)v7);
  }

  else
  {
    OUTLINED_FUNCTION_107_0(*(void *)(v0 + 32));

    uint64_t v16 = 1LL;
  }

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v16);
}

uint64_t static AutoShortcutFirstRunFlow.isAutoShortcutsEnabledFor(bundleId:voiceShortcutsClient:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[5] = a2;
  v3[6] = a3;
  v3[4] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)static AutoShortcutFirstRunFlow.isAutoShortcutsEnabledFor(bundleId:voiceShortcutsClient:));
}

uint64_t static AutoShortcutFirstRunFlow.isAutoShortcutsEnabledFor(bundleId:voiceShortcutsClient:)()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  uint64_t v4 = (void *)swift_task_alloc(48LL);
  v0[7] = v4;
  void v4[2] = v1;
  void v4[3] = v3;
  v4[4] = v2;
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[8] = v5;
  *uint64_t v5 = v0;
  v5[1] = static AutoShortcutFirstRunFlow.isAutoShortcutsEnabledFor(bundleId:voiceShortcutsClient:);
  OUTLINED_FUNCTION_12_0();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v6, v7, v8, 0xD000000000000039LL, v9, v10, v4, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  OUTLINED_FUNCTION_77_1();
  OUTLINED_FUNCTION_10_0(v2);
  *(void *)(v0 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v1;
  swift_task_dealloc();
  if (!v1) {
    swift_task_dealloc();
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 80));
}

uint64_t static AutoShortcutFirstRunFlow.isAutoShortcutsEnabledFor(bundleId:voiceShortcutsClient:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  a18 = v20;
  swift_task_dealloc();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v24 = *(os_log_s **)(v20 + 72);
  uint64_t v25 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain(v24);
  swift_errorRetain(v24);
  OUTLINED_FUNCTION_66();
  os_log_type_t v26 = OUTLINED_FUNCTION_73();
  BOOL v27 = OUTLINED_FUNCTION_23_7(v26);
  uint64_t v28 = *(void *)(v20 + 72);
  if (v27)
  {
    uint64_t v29 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v30 = OUTLINED_FUNCTION_38(32LL);
    a9 = v30;
    *(_DWORD *)uint64_t v29 = 136315138;
    *(void *)(v20 + outlined init with copy of AppShortcutInvoking(*(void *)(v1 + 96) + 136LL, v1 + 16) = v28;
    swift_errorRetain(v28);
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v32 = String.init<A>(describing:)(v20 + 16, v31);
    *(void *)(v20 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &a9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v20 + 24, v20 + 32, v29 + 4);
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_31_2(&dword_0, v24, v21, "failed to get enablement status with error: %s", v29);
    OUTLINED_FUNCTION_30_3(v30, v34, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v30);
    OUTLINED_FUNCTION_1_0((uint64_t)v29);

    OUTLINED_FUNCTION_4_8();
  }

  else
  {
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  return OUTLINED_FUNCTION_3_23(2LL, *(uint64_t (**)(void))(v20 + 8));
}

uint64_t closure #1 in static AutoShortcutFirstRunFlow.isAutoShortcutsEnabledFor(bundleId:voiceShortcutsClient:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))( (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v7);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = (v12 + 16) & ~v12;
  uint64_t v14 = swift_allocObject(&unk_1F9920, v13 + v9, v12 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))( v14 + v13,  (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t (*)(char, uint64_t), uint64_t, uint64_t, uint64_t))(v11 + 40))( a3,  v17,  partial apply for closure #1 in closure #1 in static AutoShortcutFirstRunFlow.isAutoShortcutsEnabledFor(bundleId:voiceShortcutsClient:),  v14,  v10,  v11);
  return swift_release();
}

uint64_t closure #1 in closure #1 in static AutoShortcutFirstRunFlow.isAutoShortcutsEnabledFor(bundleId:voiceShortcutsClient:)( char a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v5 = a2;
    swift_errorRetain(a2);
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
    return CheckedContinuation.resume(throwing:)(&v5, v2);
  }

  else
  {
    char v6 = a1 & 1;
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
    return CheckedContinuation.resume(returning:)(&v6, v4);
  }

uint64_t AutoShortcutFirstRunFlow.makeUserDeniedOutput()(uint64_t a1)
{
  v2[7] = a1;
  _BYTE v2[8] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  void v2[9] = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  uint64_t v4 = OUTLINED_FUNCTION_44_6();
  v2[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[11] = v5;
  v2[12] = OUTLINED_FUNCTION_9_0(v5);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutFirstRunFlow.makeUserDeniedOutput()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(**(void **)(v0[8] + 176LL) + 304LL));
  v0[13] = v1;
  *uint64_t v1 = v0;
  v1[1] = AutoShortcutFirstRunFlow.makeUserDeniedOutput();
  return v3(v0[12]);
}

{
  uint64_t *v0;
  OUTLINED_FUNCTION_53_18(*v0);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t (*v11)(void);
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[9];
  uint64_t v4 = (void *)v0[7];
  uint64_t v5 = v0[8] + 96LL;
  char v6 = OUTLINED_FUNCTION_56_3();
  OUTLINED_FUNCTION_16_20(v6);
  type metadata accessor for AceOutput(0LL);
  OUTLINED_FUNCTION_106_2();
  void v4[3] = v7;
  v4[4] = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v4);
  static AceOutputHelper.makeConfirmedViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v2,  v5,  1LL,  _swiftEmptyArrayStorage,  0LL,  1LL,  v3,  _swiftEmptyArrayStorage,  v1);
  outlined destroy of Any?(v1, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  OUTLINED_FUNCTION_108_0(v8, &demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v9 = OUTLINED_FUNCTION_129();
  v10(v9);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_40_0();
  uint64_t v11 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return v11();
}

{
  uint64_t v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

void *AutoShortcutFirstRunFlow.deinit()
{
  return v0;
}

uint64_t AutoShortcutFirstRunFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 273LL, 7LL);
}

uint64_t protocol witness for Flow.on(input:) in conformance AutoShortcutFirstRunFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192LL))() & 1;
}

uint64_t protocol witness for Flow.execute() in conformance AutoShortcutFirstRunFlow(uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 208LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + outlined init with copy of AppShortcutInvoking(*(void *)(v1 + 96) + 136LL, v1 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Flow.execute() in conformance WorkflowRunnerFlow;
  return v7(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance AutoShortcutFirstRunFlow@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 176LL))();
  *a1 = result & 1;
  return result;
}

uint64_t SirikitApp.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v6);
  uint64_t v7 = OUTLINED_FUNCTION_89_9();
  type metadata accessor for App(v7);
  OUTLINED_FUNCTION_54_7();
  uint64_t v8 = App.__allocating_init(appIdentifier:)(a1, a2);
  os_log_type_t v9 = v8;
  uint64_t v10 = (os_log_s *)static SAAppInfoFactory.createAppInfo(app:)(v8);
  swift_release();
  if (!v10)
  {
    OUTLINED_FUNCTION_2_6();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v18 = OUTLINED_FUNCTION_48();
    uint64_t v10 = (os_log_s *)OUTLINED_FUNCTION_84(v18, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v19 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_40(v19))
    {
      uint64_t v20 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
      *(_WORD *)uint64_t v20 = 0;
      OUTLINED_FUNCTION_47_1( &dword_0,  v10,  v9,  "SirikitApp unsuccessfully instantiated, since SAAppInfoFactory was unable to create the app info",  v20);
      OUTLINED_FUNCTION_1_0((uint64_t)v20);
    }

    goto LABEL_13;
  }

  uint64_t v11 = outlined bridged method (pb) of @objc SAAppInfo.appNameMap.getter(v10);
  if (!v11)
  {
    OUTLINED_FUNCTION_2_6();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v21 = OUTLINED_FUNCTION_48();
    uint64_t v22 = (os_log_s *)OUTLINED_FUNCTION_84(v21, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_31_0(v23))
    {
      uint64_t v24 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
      *(_WORD *)uint64_t v24 = 0;
      OUTLINED_FUNCTION_47_1( &dword_0,  v22,  v2,  "SirikitApp unsuccessfully instantiated, since appInfo does not contain app name map",  v24);
      OUTLINED_FUNCTION_1_0((uint64_t)v24);
    }

LABEL_13:
    return 0LL;
  }

  uint64_t v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_16SiriDialogEngine23SirikitLocalizedAppNameCs5NeverOTg507_sS2S16de8Engine23ghij27CIgggo_SS3key_SS5valuetACs5K96OIegnrzr_TR04_s16ab8Engine10df35C0A14LinkFlowPluginEyACSgSScfcAA0d9e2E4G12CSS_SStXEfU_Tf3nnnpf_nTf1cn_n(v11);
  OUTLINED_FUNCTION_20();
  uint64_t v13 = type metadata accessor for SirikitApp.Builder(0LL);
  OUTLINED_FUNCTION_51(v13);
  SirikitApp.Builder.init()();
  String.toSpeakableString.getter(a1, a2);
  OUTLINED_FUNCTION_2_6();
  uint64_t v14 = type metadata accessor for SpeakableString(0LL);
  uint64_t v15 = OUTLINED_FUNCTION_158_1(v14);
  dispatch thunk of SirikitApp.Builder.withAppId(_:)(v15);
  swift_release();
  outlined destroy of Any?(v3, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = dispatch thunk of SirikitApp.Builder.withLocalizedAppNames(_:)(v12);
  swift_release();
  OUTLINED_FUNCTION_37();
  uint64_t v17 = dispatch thunk of SirikitApp.__allocating_init(builder:)(v16);

  return v17;
}

void outlined bridged method (mbnn) of @objc PatternExecutionResult.visual.setter( uint64_t a1, unint64_t a2, void *a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(a1, a2);
  [a3 setVisual:isa];
}

uint64_t specialized AutoShortcutFirstRunFlow.init(autoShortcutInvocation:aceServiceInvoker:voiceShortcutsClient:outputPublisher:deviceState:userDefaults:)( void *a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v17);
  os_log_type_t v19 = (char *)v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = a8;
  uint64_t v34 = a9;
  uint64_t v20 = __swift_allocate_boxed_opaque_existential_1(&v32);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32LL))(v20, a6, a8);
  outlined init with copy of AppShortcutInvoking((uint64_t)a1, a7 + 16);
  outlined init with copy of AppShortcutInvoking((uint64_t)a2, a7 + 56);
  outlined init with copy of AppShortcutInvoking((uint64_t)a3, a7 + 232);
  outlined init with copy of AppShortcutInvoking((uint64_t)a5, a7 + 96);
  outlined init with copy of AppShortcutInvoking((uint64_t)a4, a7 + 136);
  uint64_t v21 = type metadata accessor for WorkflowNLContextProvider();
  *(void *)(a7 + outlined init with copy of AppShortcutInvoking(v0 - 104, v0 - 184) = swift_allocObject(v21, 16LL, 7LL);
  outlined init with copy of AppShortcutInvoking((uint64_t)a5, (uint64_t)v31);
  uint64_t v22 = type metadata accessor for AutoShortcutCATs(0LL);
  static CATOption.defaultMode.getter(v22);
  uint64_t v23 = CATWrapper.__allocating_init(options:globals:)(v19, 0LL);
  uint64_t v24 = type metadata accessor for AutoShortcutCATsSimple(0LL);
  static CATOption.defaultMode.getter(v24);
  uint64_t v25 = CATWrapperSimple.__allocating_init(options:globals:)(v19, 0LL);
  uint64_t v26 = type metadata accessor for RunLinkActionCATPatternsExecutor(0LL);
  static CATOption.defaultMode.getter(v26);
  uint64_t v27 = CATWrapper.__allocating_init(options:globals:)(v19, 0LL);
  __swift_destroy_boxed_opaque_existential_1Tm(a5);
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  uint64_t v28 = type metadata accessor for AutoShortcutDialogTemplating();
  uint64_t v29 = (void *)swift_allocObject(v28, 112LL, 7LL);
  v29[12] = v26;
  v29[13] = &protocol witness table for RunLinkActionCATPatternsExecutor;
  v29[9] = v27;
  outlined init with take of AceServiceInvokerAsync(v31, (uint64_t)(v29 + 2));
  v29[7] = v23;
  v29[8] = v25;
  *(void *)(a7 + 176) = v29;
  outlined init with take of AceServiceInvokerAsync(&v32, a7 + 192);
  *(_BYTE *)(a7 + 27__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0x80;
  return a7;
}

uint64_t sub_E0C6C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t partial apply for closure #1 in AutoShortcutFirstRunFlow.on(input:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_21AA2C);
  *(void *)(v2 + outlined init with copy of AppShortcutInvoking(*(void *)(v1 + 96) + 136LL, v1 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in WorkflowRunnerFlow.execute();
  return closure #1 in AutoShortcutFirstRunFlow.on(input:)(a1, v4, v5, v6);
}

uint64_t type metadata accessor for AutoShortcutFirstRunFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin24AutoShortcutFirstRunFlow);
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  uint64_t v2 = 64LL;
  for (uint64_t i = 10LL; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64LL;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t specialized static AutoShortcutFirstRunFlow.getAppName(bundleId:appNameResolver:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = a1;
  uint64_t v10 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  OUTLINED_FUNCTION_35();
  uint64_t v13 = v12 - v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v12 - v11, v14, v15);
  if (a2)
  {
    type metadata accessor for App(0LL);
    OUTLINED_FUNCTION_9_4();
    OUTLINED_FUNCTION_120_4();
    uint64_t v9 = (*(uint64_t (**)(void))(a6 + 8))();
    swift_release();
  }

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, a5);
  return v9;
}

unint64_t type metadata accessor for LNAutoShortcutLocalizedPhrase()
{
  unint64_t result = lazy cache variable for type metadata for LNAutoShortcutLocalizedPhrase;
  if (!lazy cache variable for type metadata for LNAutoShortcutLocalizedPhrase)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___LNAutoShortcutLocalizedPhrase);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNAutoShortcutLocalizedPhrase);
  }

  return result;
}

uint64_t partial apply for closure #1 in static AutoShortcutFirstRunFlow.isAutoShortcutsEnabledFor(bundleId:voiceShortcutsClient:)( uint64_t a1)
{
  return closure #1 in static AutoShortcutFirstRunFlow.isAutoShortcutsEnabledFor(bundleId:voiceShortcutsClient:)( a1,  *(void **)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32));
}

uint64_t getEnumTagSinglePayload for AutoShortcutFirstRunFlow.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    unsigned int v5 = -1;
    return v5 + 1;
  }

  if (a2 >= 0x7E)
  {
    if (a2 + 130 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 130) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    unsigned int v5 = (*a1 | (v4 << 8)) - 131;
    return v5 + 1;
  }

uint64_t storeEnumTagSinglePayload for AutoShortcutFirstRunFlow.State( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 130 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 130) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v3;
  }
  if (a3 >= 0x7E) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0x7D) {
    return ((uint64_t (*)(void))((char *)&loc_E0FAC + 4 * byte_186585[v4]))();
  }
  *a1 = a2 - 126;
  return ((uint64_t (*)(void))((char *)sub_E0FE0 + 4 * byte_186580[v4]))();
}

uint64_t sub_E0FE0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_E0FE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xE0FF0LL);
  }
  return result;
}

uint64_t sub_E1008(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xE1010LL);
  }
  *(_BYTE *)unint64_t result = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
  return result;
}

uint64_t sub_E1014(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_E101C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for AutoShortcutFirstRunFlow.State(_BYTE *a1)
{
  int v1 = (char)*a1;
  if (v1 >= 0) {
    return *a1 >> 6;
  }
  else {
    return v1 & 1 | 2u;
  }
}

_BYTE *destructiveProjectEnumData for AutoShortcutFirstRunFlow.State(_BYTE *result)
{
  *result &= 0x3Fu;
  return result;
}

_BYTE *destructiveInjectEnumTag for AutoShortcutFirstRunFlow.State(_BYTE *result, unsigned int a2)
{
  if (a2 < 2) {
    char v2 = *result & 1 | ((_BYTE)a2 << 6);
  }
  else {
    char v2 = a2 & 1 | 0x80;
  }
  *unint64_t result = v2;
  return result;
}

void *type metadata accessor for AutoShortcutFirstRunFlow.State()
{
  return &unk_1F9900;
}

uint64_t sub_E108C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in static AutoShortcutFirstRunFlow.isAutoShortcutsEnabledFor(bundleId:voiceShortcutsClient:)( char a1, uint64_t a2)
{
  return closure #1 in closure #1 in static AutoShortcutFirstRunFlow.isAutoShortcutsEnabledFor(bundleId:voiceShortcutsClient:)( a1,  a2);
}

uint64_t OUTLINED_FUNCTION_8_36()
{
  return swift_task_dealloc(*(void *)(v0 + 352));
}

uint64_t OUTLINED_FUNCTION_11_26(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_30_22(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static DialogPhase.confirmation.getter(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_31_19()
{
  uint64_t v1 = *(void **)(v0 + 224);
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
}

uint64_t OUTLINED_FUNCTION_34_22( uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  char v25 = *(_BYTE *)(v24 + 340);
  *(_BYTE *)(*(void *)(v24 + 200) + 272LL) = v25 & 1 | 0x40;
  return static InstrumentationUtils.emitFirstRunConfirmationEndedInstrumentation(enabled:)( v25 & 1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24);
}

uint64_t OUTLINED_FUNCTION_40_21()
{
  uint64_t v1 = (void *)v0[7];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 8))(v2, v3, v4, v5);
}

uint64_t OUTLINED_FUNCTION_46_23( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return specialized AutoShortcutFirstRunFlow.init(autoShortcutInvocation:aceServiceInvoker:voiceShortcutsClient:outputPublisher:deviceState:userDefaults:)( v14,  v13,  v12,  v11,  v10,  v16,  v9,  v15,  a9);
}

uint64_t OUTLINED_FUNCTION_48_17()
{
  *(_BYTE *)(*(void *)(v0 + 200) + 272LL) = -127;
  return static ExecuteResponse.ongoing(requireInput:)(1LL);
}

uint64_t OUTLINED_FUNCTION_49_17()
{
  *(_BYTE *)(*(void *)(v0 + 200) + 272LL) = 0x80;
  return static ExecuteResponse.ongoing(requireInput:)(0LL);
}

uint64_t OUTLINED_FUNCTION_52_15()
{
  return swift_task_dealloc(*(void *)(v0 + 176));
}

uint64_t OUTLINED_FUNCTION_53_18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 104);
  *uint64_t v1 = *v3;
  *(void *)(a1 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v2;
  return swift_task_dealloc(v4);
}

uint64_t OUTLINED_FUNCTION_61_18( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return v15(a14, v17, a15, v16, a5, a5);
}

uint64_t OUTLINED_FUNCTION_65_12()
{
  return (*(uint64_t (**)(void, void))(v0[43] + 8LL))(v0[44], v0[42]);
}

uint64_t OUTLINED_FUNCTION_66_15()
{
  return swift_task_dealloc(*(void *)(v0 + 160));
}

  ;
}

uint64_t OUTLINED_FUNCTION_69_9()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_70_13(void *a1)
{
  *(void *)(v2 + 59__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a1;
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 192);
}

uint64_t OUTLINED_FUNCTION_73_11( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return swift_bridgeObjectRetain(a12);
}

uint64_t OUTLINED_FUNCTION_77_12@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

void OUTLINED_FUNCTION_79_7()
{
  *(void *)(v1 - __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_81_13(uint64_t a1)
{
  return OutputGenerationManifest.nlContextUpdate.setter(v1);
}

uint64_t OUTLINED_FUNCTION_83_7(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_84_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t OUTLINED_FUNCTION_86_4@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

uint64_t OUTLINED_FUNCTION_89_9()
{
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_95_5()
{
  return swift_task_dealloc(*(void *)(v0 + 176));
}

uint64_t OUTLINED_FUNCTION_97_6()
{
  return TemplatingSection.content.getter();
}

uint64_t OUTLINED_FUNCTION_98_4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_100_4()
{
  return static ExecuteResponse.complete()();
}

void OUTLINED_FUNCTION_101_5()
{
}

void *OUTLINED_FUNCTION_102_5(void *a1)
{
  return __swift_project_boxed_opaque_existential_1(a1, v1);
}

double OUTLINED_FUNCTION_106_2()
{
  double result = 0.0;
  *(_OWORD *)(v0 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
  *(void *)(v0 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0LL;
  *(_OWORD *)(v0 + outlined init with copy of AppShortcutInvoking(*(void *)(v1 + 96) + 136LL, v1 + 16) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_110_6(uint64_t a1, uint64_t a2)
{
  return OutputGenerationManifest.init(dialogPhase:_:)(v2, a2, 0LL);
}

uint64_t OUTLINED_FUNCTION_112_3()
{
  uint64_t v2 = *(void *)(v1 + 120);
  __swift_project_boxed_opaque_existential_1(v0, v2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_113_4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_114_3()
{
  return OutputGenerationManifest.responseViewId.setter(v0);
}

void OUTLINED_FUNCTION_115_2()
{
  *(void *)(v1 - __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_120_4()
{
  return App.__allocating_init(appIdentifier:)(v0, v1);
}

uint64_t OUTLINED_FUNCTION_121_4()
{
  return swift_task_dealloc(*(void *)(v0 + 144));
}

uint64_t OUTLINED_FUNCTION_123_6@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t OUTLINED_FUNCTION_126_4()
{
  return static OutputUtils.makeTemporaryOutput()(v0);
}

BOOL OUTLINED_FUNCTION_128_3()
{
  return TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
}

uint64_t OUTLINED_FUNCTION_131_4()
{
  return type metadata accessor for DialogPhase(0LL);
}

void OUTLINED_FUNCTION_133_1()
{
}

uint64_t OUTLINED_FUNCTION_134_2()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 88));
}

uint64_t OUTLINED_FUNCTION_135_1(char a1)
{
  return OutputGenerationManifest.listenAfterSpeaking.setter(a1 & 1);
}

uint64_t OUTLINED_FUNCTION_136_0()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_138_2()
{
  return specialized Collection.first.getter(v0, v1);
}

void *OUTLINED_FUNCTION_139_2()
{
  return __swift_project_boxed_opaque_existential_1( (void *)(*(void *)(v0 + 200) + 136LL),  *(void *)(*(void *)(v0 + 200) + 160LL));
}

void OUTLINED_FUNCTION_140_2(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_141_3()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

uint64_t OUTLINED_FUNCTION_143_2()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 216));
}

uint64_t OUTLINED_FUNCTION_144_0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_145_3(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

void OUTLINED_FUNCTION_150_0()
{
  *(_WORD *)(v0 + 1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 1024;
}

uint64_t OUTLINED_FUNCTION_151_2()
{
  return __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
}

uint64_t OUTLINED_FUNCTION_153_1(uint64_t a1, uint64_t a2)
{
  return OutputGenerationManifest.init(dialogPhase:_:)(v2, a2, 0LL);
}

uint64_t OUTLINED_FUNCTION_154_0()
{
  return swift_retain_n(v0, 2LL);
}

uint64_t OUTLINED_FUNCTION_155()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

void OUTLINED_FUNCTION_157_1()
{
}

uint64_t OUTLINED_FUNCTION_158_1(uint64_t a1)
{
  return v1;
}

void __swiftcall AutoShortcutAppPhrasesViewModel.init(shortcutPhrases:maxPhrases:bundleId:prompt:moreShortcutsLabel:footnoteLabel:)( SiriLinkFlowPlugin::AutoShortcutAppPhrasesViewModel *__return_ptr retstr, Swift::OpaquePointer shortcutPhrases, Swift::Int maxPhrases, Swift::String bundleId, Swift::String prompt, Swift::String_optional moreShortcutsLabel, Swift::String_optional footnoteLabel)
{
  retstr->shortcutPhrases = shortcutPhrases;
  retstr->maxPhrases = maxPhrases;
  retstr->bundleId = bundleId;
  retstr->prompt = prompt;
  retstr->moreShortcutsLabel = moreShortcutsLabel;
  retstr->footnoteLabel = footnoteLabel;
}

uint64_t AutoShortcutFirstRunWatchVisual.shortcutPhrases.getter()
{
  return swift_bridgeObjectRetain(*v0);
}

uint64_t AutoShortcutAppPhrasesViewModel.maxPhrases.getter()
{
  return *(void *)(v0 + 8);
}

void AutoShortcutAppPhrasesViewModel.moreShortcutsLabel.getter()
{
}

void AutoShortcutAppPhrasesViewModel.footnoteLabel.getter()
{
}

BOOL AutoShortcutAppPhrasesViewModel.needToShowMore.getter()
{
  return v0[1] < *(void *)(*v0 + 16LL);
}

unint64_t AutoShortcutAppPhrasesViewModel.punchoutURL.getter()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain(v1);
  v3._uint64_t countAndFlagsBits = v2;
  v3._object = v1;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v1);
  return 0xD000000000000019LL;
}

void AutoShortcutAppPhrasesViewModel.displayPhrases.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  if (v2 >= *(void *)(*v0 + 16LL))
  {
    swift_bridgeObjectRetain(v1);
  }

  else if (v2 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v3 = v1 + 32;
    unint64_t v4 = (2 * v2) | 1;
    swift_bridgeObjectRetain(v1);
    specialized Array.init<A>(_:)(v5, v3, 0LL, v4);
  }

uint64_t AutoShortcutAppPhrasesViewModel.CodingKeys.init(stringValue:)(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x74756374726F6873LL && a2 == 0xEF73657361726850LL)
  {
    unint64_t v5 = 0xEF73657361726850LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74756374726F6873LL, 0xEF73657361726850LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x736172685078616DLL && a2 == 0xEA00000000007365LL)
  {
    unint64_t v8 = 0xEA00000000007365LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736172685078616DLL, 0xEA00000000007365LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x6449656C646E7562LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v10 = 0xE800000000000000LL;
    goto LABEL_24;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449656C646E7562LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2LL;
  }

  if (a1 == 0x74706D6F7270LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v12 = 0xE600000000000000LL;
    goto LABEL_32;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74706D6F7270LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3LL;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v13 = 0x8000000000196550LL;
    if (a2 == 0x8000000000196550LL) {
      goto LABEL_37;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000000196550LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v13);
    return 4LL;
  }

  if (a1 == 0x65746F6E746F6F66LL && a2 == 0xED00006C6562614CLL)
  {
    swift_bridgeObjectRelease(0xED00006C6562614CLL);
    return 5LL;
  }

  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65746F6E746F6F66LL, 0xED00006C6562614CLL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v15 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

uint64_t AutoShortcutAppPhrasesViewModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_E1A94 + 4 * asc_186670[a1]))( 0x74756374726F6873LL,  0xEF73657361726850LL);
}

uint64_t sub_E1A94()
{
  return 0x736172685078616DLL;
}

uint64_t sub_E1AB0()
{
  return 0x6449656C646E7562LL;
}

uint64_t sub_E1AC8()
{
  return 0x74706D6F7270LL;
}

unint64_t sub_E1ADC()
{
  return 0xD000000000000012LL;
}

uint64_t sub_E1AF8()
{
  return 0x65746F6E746F6F66LL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AutoShortcutAppPhrasesViewModel.CodingKeys()
{
  return AutoShortcutAppPhrasesViewModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutoShortcutAppPhrasesViewModel.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = AutoShortcutAppPhrasesViewModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutoShortcutAppPhrasesViewModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutoShortcutAppPhrasesViewModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AutoShortcutAppPhrasesViewModel.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutoShortcutAppPhrasesViewModel.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  unint64_t v11 = lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_1F9A88, &unk_1F9A88, v11, v9, v10);
  uint64_t v23 = *v3;
  HIBYTE(v2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance <A> [A]( &lazy protocol witness table cache variable for type [String] and conformance <A> [A],  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, (char *)&v22 + 7, v5);
  if (!v2)
  {
    uint64_t v12 = v3[1];
    BYTE6(v2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v12, (char *)&v22 + 6, v5);
    uint64_t v13 = v3[2];
    uint64_t v14 = v3[3];
    BYTE5(v2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 2;
    OUTLINED_FUNCTION_15_13(v13, v14, (uint64_t)&v22 + 5);
    uint64_t v15 = v3[4];
    uint64_t v16 = v3[5];
    BYTE4(v2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 3;
    OUTLINED_FUNCTION_15_13(v15, v16, (uint64_t)&v22 + 4);
    uint64_t v17 = v3[6];
    uint64_t v18 = v3[7];
    BYTE3(v2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 4;
    OUTLINED_FUNCTION_3_36(v17, v18, (uint64_t)&v22 + 3);
    uint64_t v19 = v3[8];
    uint64_t v20 = v3[9];
    BYTE2(v2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 5;
    OUTLINED_FUNCTION_3_36(v19, v20, (uint64_t)&v22 + 2);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutAppPhrasesViewModel.CodingKeys,  &unk_1F9A88);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutAppPhrasesViewModel.CodingKeys,  &unk_1F9A88);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutAppPhrasesViewModel.CodingKeys,  &unk_1F9A88);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutAppPhrasesViewModel.CodingKeys,  &unk_1F9A88);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys);
  }

  return result;
}

uint64_t AutoShortcutAppPhrasesViewModel.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutoShortcutAppPhrasesViewModel.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  unint64_t v11 = lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_1F9A88, &unk_1F9A88, v11, v9, v10);
  if (v2) {
    return OUTLINED_FUNCTION_35_26();
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  char v41 = 0;
  lazy protocol witness table accessor for type [String] and conformance <A> [A]( &lazy protocol witness table cache variable for type [String] and conformance <A> [A],  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v12, &v41, v5, v12);
  uint64_t v13 = v42;
  char v40 = 1;
  __n128 v14 = swift_bridgeObjectRetain(v42);
  uint64_t v33 = KeyedDecodingContainer.decode(_:forKey:)(&v40, v5, v14);
  char v39 = 2;
  uint64_t v15 = OUTLINED_FUNCTION_6_33((uint64_t)&v39);
  uint64_t v35 = v16;
  uint64_t v32 = v15;
  char v38 = 3;
  swift_bridgeObjectRetain(v16);
  uint64_t v31 = OUTLINED_FUNCTION_6_33((uint64_t)&v38);
  char v37 = 4;
  uint64_t v34 = v17;
  swift_bridgeObjectRetain(v17);
  uint64_t v29 = OUTLINED_FUNCTION_7_27((uint64_t)&v37);
  uint64_t v30 = v18;
  char v36 = 5;
  swift_bridgeObjectRetain(v18);
  uint64_t v19 = OUTLINED_FUNCTION_7_27((uint64_t)&v36);
  uint64_t v21 = v20;
  uint64_t v22 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v23 = v19;
  v22(v8, v5);
  OUTLINED_FUNCTION_17_1();
  OUTLINED_FUNCTION_35_26();
  swift_bridgeObjectRelease();
  uint64_t v24 = v30;
  swift_bridgeObjectRelease();
  uint64_t v25 = v34;
  swift_bridgeObjectRelease();
  uint64_t v26 = v35;
  swift_bridgeObjectRelease();
  uint64_t result = OUTLINED_FUNCTION_1_2();
  uint64_t v28 = v33;
  *a2 = v13;
  a2[1] = v28;
  a2[2] = v32;
  a2[3] = v26;
  a2[4] = v31;
  a2[5] = v25;
  a2[6] = v29;
  a2[7] = v24;
  a2[8] = v23;
  a2[9] = v21;
  return result;
}

uint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A]( unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

void *protocol witness for Decodable.init(from:) in conformance AutoShortcutAppPhrasesViewModel@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (void *)AutoShortcutAppPhrasesViewModel.init(from:)(a1, v5);
  if (!v2) {
    return memcpy(a2, v5, 0x50uLL);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AutoShortcutAppPhrasesViewModel( void *a1)
{
  return AutoShortcutAppPhrasesViewModel.encode(to:)(a1);
}

uint64_t destroy for AutoShortcutAppPhrasesViewModel(void *a1)
{
  return swift_bridgeObjectRelease(a1[9]);
}

uint64_t initializeWithCopy for AutoShortcutAppPhrasesViewModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = *(_OWORD *)(a2 + 1);
  uint64_t v5 = a2[3];
  uint64_t v4 = a2[4];
  *(void *)(a1 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v5;
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v4;
  uint64_t v7 = a2[5];
  uint64_t v6 = a2[6];
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = v6;
  uint64_t v9 = a2[7];
  uint64_t v8 = a2[8];
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v8;
  uint64_t v10 = a2[9];
  *(void *)(a1 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v10;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t *assignWithCopy for AutoShortcutAppPhrasesViewModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[8] = a2[8];
  uint64_t v12 = a2[9];
  uint64_t v13 = a1[9];
  a1[9] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

void *__swift_memcpy80_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t *assignWithTake for AutoShortcutAppPhrasesViewModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  uint64_t v5 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[5];
  uint64_t v7 = a1[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[7];
  uint64_t v9 = a1[7];
  a1[6] = a2[6];
  a1[7] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[9];
  uint64_t v11 = a1[9];
  a1[8] = a2[8];
  a1[9] = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for AutoShortcutAppPhrasesViewModel(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 80))
    {
      LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutoShortcutAppPhrasesViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 0u;
    *(_OWORD *)(result + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AutoShortcutAppPhrasesViewModel()
{
  return &type metadata for AutoShortcutAppPhrasesViewModel;
}

uint64_t storeEnumTagSinglePayload for AutoShortcutAppPhrasesViewModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_E2488 + 4 * byte_18667B[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_E24BC + 4 * byte_186676[v4]))();
}

uint64_t sub_E24BC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_E24C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xE24CCLL);
  }
  return result;
}

uint64_t sub_E24D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xE24E0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 5;
  return result;
}

uint64_t sub_E24E4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_E24EC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for AutoShortcutAppPhrasesViewModel.CodingKeys()
{
  return &unk_1F9A88;
}

uint64_t OUTLINED_FUNCTION_0_32()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_3_36(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, a3, v3);
}

uint64_t OUTLINED_FUNCTION_6_33(uint64_t a1)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_7_27(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_10_27()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 104));
}

uint64_t OUTLINED_FUNCTION_11_27()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 96));
}

void ShortcutsHandoffFlow.__allocating_init()()
{
  uint64_t v2 = OUTLINED_FUNCTION_2_27();
  OUTLINED_FUNCTION_5_33(v1, v3, v4, v2);
  OUTLINED_FUNCTION_1();
}

uint64_t key path setter for ShortcutsHandoffFlow.state : ShortcutsHandoffFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShortcutsHandoffFlow.State(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of ShortcutsHandoffFlow.State(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 96LL))(v6);
}

void ShortcutsHandoffFlow.state.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin20ShortcutsHandoffFlow_state;
  swift_beginAccess(v3, v4, 0LL, 0LL);
  outlined init with copy of ShortcutsHandoffFlow.State(v3, a1);
  OUTLINED_FUNCTION_7_28();
}

void ShortcutsHandoffFlow.state.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin20ShortcutsHandoffFlow_state;
  OUTLINED_FUNCTION_15_6(v3, (uint64_t)v4);
  outlined assign with take of ShortcutsHandoffFlow.State(a1, v3);
  swift_endAccess(v4);
  OUTLINED_FUNCTION_7_28();
}

uint64_t (*ShortcutsHandoffFlow.state.modify(uint64_t a1))()
{
  return static LocaleUtils.intentBundleCache.modify;
}

BOOL ShortcutsHandoffFlow.on(input:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ShortcutsHandoffFlow.State(0LL);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(uint64_t))(*(void *)v1 + 88LL))(v7);
  uint64_t v10 = OUTLINED_FUNCTION_2_27();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v9, 2LL, v10);
  if (EnumTagSinglePayload == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v6, a1, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v6, 0LL, 2LL, v10);
    (*(void (**)(char *))(*(void *)v1 + 96LL))(v6);
  }

  else
  {
    outlined destroy of ShortcutsHandoffFlow.State((uint64_t)v9);
  }

  return EnumTagSinglePayload == 1;
}

uint64_t ShortcutsHandoffFlow.execute()(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentityCheckFlowStrategy.HandoffConfiguration?);
  v2[7] = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for UserIdentityCheckFlowStrategy(0LL);
  _BYTE v2[8] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  void v2[9] = v5;
  v2[10] = OUTLINED_FUNCTION_9_0(v5);
  uint64_t v6 = type metadata accessor for ExecuteOnRemoteDeviceSpecification(0LL);
  v2[11] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[12] = v7;
  v2[13] = OUTLINED_FUNCTION_9_0(v7);
  uint64_t v8 = type metadata accessor for UserIdentityCheckFlowStrategy.HandoffConfiguration(0LL);
  v2[14] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[15] = v9;
  v2[16] = OUTLINED_FUNCTION_9_0(v9);
  uint64_t v10 = type metadata accessor for CompanionDeviceInfoRequirement(0LL);
  v2[17] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[18] = v11;
  v2[19] = OUTLINED_FUNCTION_9_0(v11);
  uint64_t v12 = type metadata accessor for ShortcutsHandoffFlow.State(0LL);
  v2[20] = OUTLINED_FUNCTION_4_0(*(void *)(v12 - 8));
  v2[21] = swift_task_alloc(v1);
  uint64_t v13 = OUTLINED_FUNCTION_2_27();
  v2[22] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v2[23] = v14;
  v2[24] = OUTLINED_FUNCTION_4_0(v14);
  v2[25] = swift_task_alloc(v1);
  return swift_task_switch(ShortcutsHandoffFlow.execute(), 0LL, 0LL);
}

uint64_t ShortcutsHandoffFlow.execute()()
{
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  (*(void (**)(void))(**(void **)(v0 + 48) + 88LL))();
  if (__swift_getEnumTagSinglePayload(v2, 2LL, v1))
  {
    uint64_t v3 = outlined destroy of ShortcutsHandoffFlow.State(*(void *)(v0 + 168));
    static ExecuteResponse.complete()(v3);
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 200);
    uint64_t v5 = *(void *)(v0 + 176);
    uint64_t v6 = *(void *)(v0 + 160);
    uint64_t v7 = *(void *)(v0 + 144);
    uint64_t v8 = *(void *)(v0 + 152);
    uint64_t v10 = *(void *)(v0 + 128);
    uint64_t v9 = *(void *)(v0 + 136);
    uint64_t v36 = *(void *)(v0 + 120);
    uint64_t v37 = *(void *)(v0 + 112);
    uint64_t v31 = *(void *)(v0 + 96);
    uint64_t v32 = *(void *)(v0 + 104);
    uint64_t v33 = *(void *)(v0 + 88);
    uint64_t v34 = *(void *)(v0 + 192);
    uint64_t v38 = *(void *)(v0 + 80);
    uint64_t v39 = *(void *)(v0 + 72);
    uint64_t v40 = *(void *)(v0 + 184);
    uint64_t v11 = *(void *)(v0 + 48);
    uint64_t v35 = *(void *)(v0 + 56);
    uint64_t v41 = *(void *)(v0 + 64);
    (*(void (**)(uint64_t, void, uint64_t))(v40 + 32))(v4, *(void *)(v0 + 168), v5);
    __swift_storeEnumTagSinglePayload(v6, 2LL, 2LL, v5);
    (*(void (**)(uint64_t))(*(void *)v11 + 96LL))(v6);
    type metadata accessor for CompanionCompatibilityCheckFlowStrategy(0LL);
    (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))( v8,  enum case for CompanionDeviceInfoRequirement.supportsPeerToPeerHandoff(_:),  v9);
    uint64_t v12 = static CompanionCompatibilityCheckFlowStrategy.require(_:redirectToServerOnFailure:)(v8, 1LL);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
    uint64_t v13 = type metadata accessor for SimpleHandoffStrategy();
    uint64_t v14 = swift_allocObject(v13, 16LL, 7LL);
    v42[3] = v13;
    lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( &lazy protocol witness table cache variable for type SimpleHandoffStrategy and conformance SimpleHandoffStrategy,  v15,  (uint64_t (*)(uint64_t))type metadata accessor for SimpleHandoffStrategy,  (uint64_t)&protocol conformance descriptor for SimpleHandoffStrategy);
    v42[4] = v16;
    v42[0] = v14;
    uint64_t v17 = swift_retain(v12);
    UserIdentityCheckFlowStrategy.HandoffConfiguration.init(companionCompatiblityCheck:handoffStrategy:)(v17, v42);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v34, v4, v5);
    uint64_t v18 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v31 + 104))( v32,  enum case for ExecuteOnRemoteDeviceSpecification.userCompanion(_:),  v33);
    static OutputPublisherFactory.makeOutputPublisherAsync()(v42, v18);
    uint64_t v19 = type metadata accessor for ExecuteOnRemoteFlow(0LL);
    swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
    *(void *)(v0 + outlined init with copy of AppShortcutInvoking(*(void *)(v1 + 96) + 136LL, v1 + 16) = ExecuteOnRemoteFlow.init(inputToExecute:device:outputPublisher:)(v34, v32, v42);
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CommonFlowGuard>);
    uint64_t v21 = *(void *)(type metadata accessor for CommonFlowGuard(0LL) - 8);
    uint64_t v22 = swift_allocObject( v20,  ((*(unsigned __int8 *)(v21 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))
          + 3LL * *(void *)(v21 + 72),
            *(unsigned __int8 *)(v21 + 80) | 7LL);
    *(_OWORD *)(v22 + outlined init with copy of AppShortcutInvoking(*(void *)(v1 + 96) + 136LL, v1 + 16) = xmmword_17FDF0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v35, v10, v37);
    __swift_storeEnumTagSinglePayload(v35, 0LL, 1LL, v37);
    UserIdentityCheckFlowStrategy.init(allowsAnonymousUser:allowsUserInteraction:handoffConfiguration:requireSpeechProfile:)( 0LL,  1LL,  v35,  1LL);
    static CommonFlowGuard.ensuringUserIdentity(using:)(v38);
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v38, v41);
    static CommonFlowGuard.ensuringPersonalRequestsAreEnabledWhenApplicable.getter(v23);
    static CommonFlowGuard.ensuringUserHasSupportedCompanion(using:)(v12);
    uint64_t v24 = static CommonGuardFlowUtils.makeGuardFlow(withGuards:)(v22);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 4) = v24;
    uint64_t v25 = type metadata accessor for GuardFlow(0LL);
    uint64_t v26 = Flow.guarded<A>(by:)( v0 + 24,  v19,  v25,  &protocol witness table for ExecuteOnRemoteFlow,  &protocol witness table for GuardFlow);
    swift_release();
    swift_release();
    *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v26;
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConditionalFlow<ExecuteOnRemoteFlowResult>);
    unint64_t v28 = lazy protocol witness table accessor for type ConditionalFlow<ExecuteOnRemoteFlowResult> and conformance ConditionalFlow<A>();
    uint64_t v29 = Flow.eraseToAnyFlow()(v27, v28);
    swift_release();
    static ExecuteResponse.complete(next:)(v29);
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v10, v37);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v4, v5);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void ShortcutsHandoffFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShortcutsHandoffFlow(0LL);
  lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( &lazy protocol witness table cache variable for type ShortcutsHandoffFlow and conformance ShortcutsHandoffFlow,  255LL,  type metadata accessor for ShortcutsHandoffFlow,  (uint64_t)&protocol conformance descriptor for ShortcutsHandoffFlow);
  Flow.deferToExecuteAsync(_:)(a1, a2, v4, v5);
  OUTLINED_FUNCTION_7_28();
}

uint64_t ShortcutsHandoffFlow.deinit()
{
  return v0;
}

uint64_t ShortcutsHandoffFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

void ShortcutsHandoffFlow.init()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin20ShortcutsHandoffFlow_state;
  uint64_t v2 = OUTLINED_FUNCTION_2_27();
  OUTLINED_FUNCTION_5_33(v1, v3, v4, v2);
  OUTLINED_FUNCTION_1();
}

uint64_t outlined init with copy of ShortcutsHandoffFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShortcutsHandoffFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ShortcutsHandoffFlow.State(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for ShortcutsHandoffFlow.State,  (uint64_t)&nominal type descriptor for ShortcutsHandoffFlow.State);
}

uint64_t outlined assign with take of ShortcutsHandoffFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShortcutsHandoffFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ShortcutsHandoffFlow.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ShortcutsHandoffFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for SimpleHandoffStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin21SimpleHandoffStrategy);
}

uint64_t protocol witness for Flow.on(input:) in conformance ShortcutsHandoffFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112LL))() & 1;
}

uint64_t protocol witness for Flow.execute() in conformance ShortcutsHandoffFlow(uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 120LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + outlined init with copy of AppShortcutInvoking(*(void *)(v1 + 96) + 136LL, v1 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makePromptForTCCAcceptance(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return v7(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance ShortcutsHandoffFlow( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for ShortcutsHandoffFlow(0LL);
  return Flow<>.exitValue.getter(v3, a2);
}

unint64_t lazy protocol witness table accessor for type ConditionalFlow<ExecuteOnRemoteFlowResult> and conformance ConditionalFlow<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ConditionalFlow<ExecuteOnRemoteFlowResult> and conformance ConditionalFlow<A>;
  if (!lazy protocol witness table cache variable for type ConditionalFlow<ExecuteOnRemoteFlowResult> and conformance ConditionalFlow<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ConditionalFlow<ExecuteOnRemoteFlowResult>);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ConditionalFlow<A>, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ConditionalFlow<ExecuteOnRemoteFlowResult> and conformance ConditionalFlow<A>);
  }

  return result;
}

uint64_t type metadata accessor for ShortcutsHandoffFlow(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for ShortcutsHandoffFlow,  (uint64_t)&nominal type descriptor for ShortcutsHandoffFlow);
}

uint64_t protocol witness for HandoffSessionToCompanionFlowStrategyAsync.makeHandoffResponse() in conformance SimpleHandoffStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to HandoffSessionToCompanionFlowStrategyAsync.makeHandoffResponse()[1]);
  *(void *)(v3 + outlined init with copy of AppShortcutInvoking(*(void *)(v1 + 96) + 136LL, v1 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makePromptForTCCAcceptance(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return HandoffSessionToCompanionFlowStrategyAsync.makeHandoffResponse()(a1, a2, a3);
}

uint64_t sub_E3170(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 88LL))();
}

uint64_t ObjC metadata update function for ShortcutsHandoffFlow()
{
  return type metadata accessor for ShortcutsHandoffFlow(0LL);
}

uint64_t type metadata completion function for ShortcutsHandoffFlow(uint64_t a1)
{
  uint64_t result = type metadata accessor for ShortcutsHandoffFlow.State(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 1LL, &v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ShortcutsHandoffFlow.State( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v8);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Input(0LL);
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 2LL, v7))
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 2LL, v7);
    }
  }

  return a1;
}

uint64_t destroy for ShortcutsHandoffFlow.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Input(0LL);
  uint64_t result = __swift_getEnumTagSinglePayload(a1, 2LL, v2);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  }
  return result;
}

void *initializeWithCopy for ShortcutsHandoffFlow.State(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Input(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 2LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 2LL, v6);
  }

  return a1;
}

void *assignWithCopy for ShortcutsHandoffFlow.State(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Input(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 2LL, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 2LL, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 24))(a1, a2, v6);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 2LL, v6);
  return a1;
}

void *initializeWithTake for ShortcutsHandoffFlow.State(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Input(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 2LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 2LL, v6);
  }

  return a1;
}

void *assignWithTake for ShortcutsHandoffFlow.State(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Input(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 2LL, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 2LL, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a1, a2, v6);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 2LL, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShortcutsHandoffFlow.State(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E361C);
}

uint64_t sub_E361C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = OUTLINED_FUNCTION_2_27();
  unsigned int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(a1, a2, v4);
  if (EnumTagSinglePayload >= 3) {
    return EnumTagSinglePayload - 2;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for ShortcutsHandoffFlow.State( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E3668);
}

uint64_t sub_E3668(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 2);
  }
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v6 = OUTLINED_FUNCTION_2_27();
  return __swift_storeEnumTagSinglePayload(a1, v5, a3, v6);
}

uint64_t getEnumTag for ShortcutsHandoffFlow.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Input(0LL);
  return __swift_getEnumTagSinglePayload(a1, 2LL, v2);
}

uint64_t destructiveInjectEnumTag for ShortcutsHandoffFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Input(0LL);
  return __swift_storeEnumTagSinglePayload(a1, a2, 2LL, v4);
}

uint64_t type metadata completion function for ShortcutsHandoffFlow.State(uint64_t a1)
{
  uint64_t result = type metadata accessor for Input(319LL);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256LL, *(void *)(result - 8) + 64LL, 2LL);
    return 0LL;
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_2_27()
{
  return type metadata accessor for Input(0LL);
}

uint64_t OUTLINED_FUNCTION_5_33(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, 1LL, 2LL, a4);
}

  ;
}

void static Transformer<>.disambiguationItemTransformer(attributeMetadata:locale:)(void *a1)
{
  uint64_t v3 = __chkstk_darwin(v2);
  OUTLINED_FUNCTION_0_33(v3, v4, v5, v6, v7, v8, v9, v10, v15);
  OUTLINED_FUNCTION_6_34();
  uint64_t v13 = swift_allocObject(&unk_1F9BD8, v11, v12);
  OUTLINED_FUNCTION_2_28(v13);
  id v14 = a1;
  OUTLINED_FUNCTION_7_29( (uint64_t)_s13SiriUtilities11TransformerV0A14LinkFlowPluginypRszAD30CustomIntentDisambiguationItemVRs_rlE014disambiguationjC017attributeMetadata6localeACyypAFGSo18INCodableAttributeCSg_10Foundation6LocaleVtFZAFypKcfU_TA_0,  (uint64_t)&type metadata for Any);
  OUTLINED_FUNCTION_8_2();
}

uint64_t closure #1 in static Transformer<>.disambiguationItemTransformer(attributeMetadata:locale:)@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v28 = a3;
  uint64_t v30 = a4;
  uint64_t v31 = a1;
  uint64_t v5 = OUTLINED_FUNCTION_126_1();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Any, CustomIntentDisambiguationItem>);
  uint64_t v29 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v28 - v12;
  if (!a2) {
    goto LABEL_6;
  }
  uint64_t v14 = objc_opt_self(&OBJC_CLASS___INCodableEnumAttribute);
  uint64_t v15 = swift_dynamicCastObjCClass(a2, v14);
  if (!v15) {
    goto LABEL_6;
  }
  uint64_t v16 = (void *)v15;
  id v17 = a2;
  if (objc_msgSend(v16, "valueType", v28) != (char *)&stru_20.vmsize + 1)
  {

LABEL_6:
    OUTLINED_FUNCTION_4_30();
    uint64_t v23 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v24 = (v23 + 16) & ~v23;
    uint64_t v25 = swift_allocObject(&unk_1F9C78, v24 + v7, v23 | 7);
    OUTLINED_FUNCTION_5_34(v25 + v24);
    Transformer.init(transform:)( partial apply for closure #1 in static Transformer<>.valueTransformer(locale:),  v25,  (char *)&type metadata for Any + 8);
    uint64_t v26 = (void (*)(uint64_t))Transformer.transform.getter(v8);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v8);
    v26(v31);
    return swift_release();
  }

  OUTLINED_FUNCTION_4_30();
  uint64_t v18 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v19 = (v18 + 24) & ~v18;
  uint64_t v20 = swift_allocObject(&unk_1F9CA0, v19 + v7, v18 | 7);
  *(void *)(v20 + outlined init with copy of AppShortcutInvoking(*(void *)(v1 + 96) + 136LL, v1 + 16) = v16;
  OUTLINED_FUNCTION_5_34(v20 + v19);
  id v21 = v17;
  Transformer.init(transform:)( partial apply for closure #1 in static Transformer<>.enumTransformer(attribute:locale:),  v20,  (char *)&type metadata for Any + 8);
  uint64_t v22 = (void (*)(uint64_t))Transformer.transform.getter(v8);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v13, v8);
  v22(v31);

  return swift_release();
}

uint64_t _s13SiriUtilities11TransformerV0A14LinkFlowPluginypRszAD30CustomIntentDisambiguationItemVRs_rlE014disambiguationjC017attributeMetadata6localeACyypAFGSo18INCodableAttributeCSg_10Foundation6LocaleVtFZAFypKcfU_TA_0( uint64_t a1)
{
  return partial apply for closure #1 in static Transformer<>.disambiguationItemTransformer(attributeMetadata:locale:)( a1,  (uint64_t (*)(uint64_t, void, uint64_t))closure #1 in static Transformer<>.disambiguationItemTransformer(attributeMetadata:locale:));
}

void static Transformer<>.enumTransformer(attribute:locale:)(void *a1)
{
  uint64_t v3 = __chkstk_darwin(v2);
  OUTLINED_FUNCTION_0_33(v3, v4, v5, v6, v7, v8, v9, v10, v15);
  OUTLINED_FUNCTION_6_34();
  uint64_t v13 = swift_allocObject(&unk_1F9C00, v11, v12);
  OUTLINED_FUNCTION_2_28(v13);
  id v14 = a1;
  OUTLINED_FUNCTION_7_29( (uint64_t)partial apply for closure #1 in static Transformer<>.enumTransformer(attribute:locale:),  (uint64_t)&type metadata for Any);
  OUTLINED_FUNCTION_8_2();
}

void static Transformer<>.valueTransformer(locale:)(uint64_t a1)
{
  uint64_t v2 = OUTLINED_FUNCTION_126_1();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL), a1, v2);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 16) & ~v5;
  uint64_t v7 = swift_allocObject(&unk_1F9C28, v6 + v4, v5 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))( v7 + v6,  (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v2);
  Transformer.init(transform:)( partial apply for closure #1 in static Transformer<>.valueTransformer(locale:),  v7,  (char *)&type metadata for Any + 8);
  OUTLINED_FUNCTION_8_2();
}

uint64_t closure #1 in static Transformer<>.enumTransformer(attribute:locale:)@<X0>( uint8_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  id v46 = a2;
  uint64_t v56 = a3;
  uint64_t v47 = a4;
  uint64_t v41 = type metadata accessor for Locale(0LL);
  uint64_t v5 = *(void *)(v41 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v41);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Any, CustomIntentDisambiguationItem>);
  uint64_t v44 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Locale.Language(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale.LanguageCode?);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INIntentResolutionResult,  &OBJC_CLASS___INIntentResolutionResult_ptr);
  uint64_t v43 = a1;
  uint64_t v45 = v17;
  static INIntentResolutionResult.getCodableEnumValueFromAny(item:attribute:)(a1, v46);
  uint64_t v19 = v56;
  id v46 = v18;
  if (v18)
  {
    uint64_t v38 = v6;
    uint64_t v39 = v5;
    uint64_t v40 = v9;
    uint64_t v20 = Locale.language.getter(v18);
    Locale.Language.languageCode.getter(v20);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v21 = type metadata accessor for Locale.LanguageCode(0LL);
    if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1LL, v21) == 1)
    {
      outlined destroy of Locale.LanguageCode?((uint64_t)v16);
      uint64_t v22 = 0xE200000000000000LL;
      uint64_t v23 = 28261LL;
    }

    else
    {
      uint64_t v23 = Locale.LanguageCode.identifier.getter();
      uint64_t v22 = v24;
      (*(void (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8LL))(v16, v21);
    }

    id v25 = v46;
    id v26 = [v46 index];
    uint64_t v27 = static INIntentResolutionResult.getSynonymsForEnum(enumValue:language:)(v25, v23, v22);
    v49[0] = v26;
    v49[1] = v27;
    char v50 = 0;
    uint64_t v28 = outlined bridged method (mbnb) of @objc INCodableEnumValue.localizedDisplayName(forLanguage:)(v23, v22, v25);
    if (v29)
    {
      uint64_t v30 = v47;
LABEL_8:
      *(void *)&__int128 v51 = v28;
      *((void *)&v51 + 1) = v29;
      uint64_t v52 = 0LL;
      uint64_t v53 = 0LL;
      uint64_t v54 = 0LL;
      uint64_t v55 = _swiftEmptyArrayStorage;
      outlined init with copy of CustomIntentDisambiguationRawValue((uint64_t)v49, (uint64_t)v48);
      CustomIntentDisambiguationItem.init(component:rawValue:)(&v51, (uint64_t)v48, v30);

      return outlined destroy of CustomIntentDisambiguationRawValue((uint64_t)v49);
    }

    uint64_t v28 = outlined bridged method (pb) of @objc INIntentSlotDescription.name.getter(v25);
    uint64_t v30 = v47;
    if (v29) {
      goto LABEL_8;
    }
    outlined destroy of CustomIntentDisambiguationRawValue((uint64_t)v49);

    uint64_t v9 = v40;
    uint64_t v5 = v39;
    uint64_t v19 = v56;
    uint64_t v6 = v38;
  }

  uint64_t v32 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v19, v41);
  uint64_t v33 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v34 = (v33 + 16) & ~v33;
  uint64_t v35 = swift_allocObject(&unk_1F9C50, v34 + v6, v33 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v35 + v34, v7, v32);
  Transformer.init(transform:)( partial apply for closure #1 in static Transformer<>.valueTransformer(locale:),  v35,  (char *)&type metadata for Any + 8);
  uint64_t v36 = v42;
  uint64_t v37 = (void (*)(uint8_t *))Transformer.transform.getter(v42);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v9, v36);
  v37(v43);
  return swift_release();
}

uint64_t partial apply for closure #1 in static Transformer<>.enumTransformer(attribute:locale:)(uint64_t a1)
{
  return partial apply for closure #1 in static Transformer<>.disambiguationItemTransformer(attributeMetadata:locale:)( a1,  (uint64_t (*)(uint64_t, void, uint64_t))closure #1 in static Transformer<>.enumTransformer(attribute:locale:));
}

uint64_t closure #1 in static Transformer<>.valueTransformer(locale:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  _BYTE v6[32] = 1;
  return CustomIntentDisambiguationItem.init(component:rawValue:)(v7, (uint64_t)v6, a3);
}

uint64_t partial apply for closure #1 in static Transformer<>.valueTransformer(locale:)@<X0>( uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return partial apply for closure #1 in static Transformer<>.valueTransformer(locale:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(OUTLINED_FUNCTION_126_1() - 8) + 80LL);
  return closure #1 in static Transformer<>.valueTransformer(locale:)(a1, v2 + ((v5 + 16) & ~v5), a2);
}