double static Transformer<>.getDisambiguationItemComponent(value:locale:)@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  double result;
  uint64_t v24;
  void *v25;
  id v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  __int128 v30;
  void *v31[3];
  uint64_t v32;
  uint64_t v33;
  void v34[4];
  __int128 v35[2];
  uint64_t v36;
  void *v37;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>);
  v7 = *(void *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v31[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  v12 = (char *)&v31[-1] - v11;
  outlined init with copy of Any(a1, (uint64_t)v34);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomStringLocalizable);
  if (!swift_dynamicCast(v35, v34, (char *)&type metadata for Any + 8, v13, 0LL))
  {
    if (swift_dynamicCast(v12, v34, (char *)&type metadata for Any + 8, v6, 0LL))
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
      static Transformer<>.ItemTypeHandlers.measurement(input:locale:)((uint64_t *)v35);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }

    else
    {
      v21 = type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INObject,  &OBJC_CLASS___INObject_ptr);
      if (swift_dynamicCast(v31, v34, (char *)&type metadata for Any + 8, v21, 0LL))
      {
        v22 = v31[0];
        static Transformer<>.ItemTypeHandlers.customObject(input:locale:)(v31[0], (uint64_t *)v35);
      }

      else
      {
        v24 = type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
        if (swift_dynamicCast(v35, v34, (char *)&type metadata for Any + 8, v24, 0LL))
        {
          v25 = *(void **)&v35[0];
          v26 = [*(id *)&v35[0] stringValue];
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v18 = v27;

          goto LABEL_3;
        }

        if (swift_dynamicCast( v35,  v34,  (char *)&type metadata for Any + 8,  &type metadata for String,  0LL))
        {
          v19 = 0LL;
          v18 = *((void *)&v35[0] + 1);
          v16 = *(void *)&v35[0];
          goto LABEL_4;
        }

        v28 = type metadata accessor for NSError( 0LL,  &lazy cache variable for type metadata for NSDateComponents,  &OBJC_CLASS___NSDateComponents_ptr);
        if (!swift_dynamicCast(v31, v34, (char *)&type metadata for Any + 8, v28, 0LL))
        {
          if (!swift_dynamicCast( v31,  v34,  (char *)&type metadata for Any + 8,  (char *)&type metadata for Swift.AnyObject + 8,  0LL))
          {
            v16 = 0LL;
            v19 = 0LL;
            v30 = 0u;
            v20 = _swiftEmptyArrayStorage;
            v18 = 0xE000000000000000LL;
            goto LABEL_11;
          }

          v29 = v31[0];
          static Transformer<>.ItemTypeHandlers.customObject(input:locale:)(v31[0], (uint64_t *)v35);
          swift_unknownObjectRelease(v29);
          goto LABEL_10;
        }

        v22 = v31[0];
        static Transformer<>.ItemTypeHandlers.date(input:locale:)((uint64_t *)v35);
      }
    }

void static Transformer<>.ItemTypeHandlers.measurement(input:locale:)(uint64_t *a1@<X8>)
{
  id v2 = [objc_allocWithZone(NSMeasurementFormatter) init];
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  [v2 setLocale:isa];

  [v2 setUnitOptions:1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>);
  NSMeasurement v9 = Measurement._bridgeToObjectiveC()();
  Class v4 = v9.super.isa;
  id v5 = objc_msgSend(v2, "stringFromMeasurement:", v9.super.isa, v9._doubleValue);

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  *a1 = v6;
  a1[1] = v8;
  a1[2] = 0LL;
  a1[3] = 0LL;
  a1[4] = 0LL;
  a1[5] = (uint64_t)_swiftEmptyArrayStorage;
}

void static Transformer<>.ItemTypeHandlers.customObject(input:locale:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Locale.Language(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale.LanguageCode?);
  uint64_t v9 = __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = Locale.language.getter(v9);
  Locale.Language.languageCode.getter(v12);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v13 = type metadata accessor for Locale.LanguageCode(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1LL, v13) == 1)
  {
    outlined destroy of Locale.LanguageCode?((uint64_t)v11);
    uint64_t v14 = 0xE200000000000000LL;
    uint64_t v15 = 28261LL;
  }

  else
  {
    uint64_t v15 = Locale.LanguageCode.identifier.getter();
    uint64_t v14 = v16;
    (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8LL))(v11, v13);
  }

  id v17 = objc_allocWithZone(&OBJC_CLASS___INStringLocalizer);
  id v18 = @nonobjc INStringLocalizer.init(languageCode:)(v15, v14);
  id v19 = objc_msgSend(a1, "_intents_readableTitleWithLocalizer:", v18);
  if (v19)
  {
    v20 = v19;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v23 = v22;
  }

  else
  {
    uint64_t v21 = 0LL;
    unint64_t v23 = 0xE000000000000000LL;
  }

  *a2 = v21;
  a2[1] = v23;
  a2[2] = 0LL;
  a2[3] = 0LL;
  a2[4] = 0LL;
  a2[5] = (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t static Transformer<>.ItemTypeHandlers.date(input:locale:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Locale(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Locale.Language(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale.LanguageCode?);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = Locale.language.getter(v11);
  Locale.Language.languageCode.getter(v14);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v15 = type metadata accessor for Locale.LanguageCode(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1LL, v15) == 1)
  {
    outlined destroy of Locale.LanguageCode?((uint64_t)v13);
    unint64_t v17 = 0xE200000000000000LL;
    uint64_t v18 = 28261LL;
  }

  else
  {
    uint64_t v18 = Locale.LanguageCode.identifier.getter();
    unint64_t v17 = v19;
    v16.n128_f64[0] = (*(double (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8LL))(v13, v15);
  }

  Locale.init(identifier:)(v18, v17, v16);
  uint64_t v20 = NSDateComponents.toRelativeLocalizedString(locale:)();
  unint64_t v22 = v21;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v22) {
    uint64_t v24 = v20;
  }
  else {
    uint64_t v24 = 0LL;
  }
  unint64_t v25 = 0xE000000000000000LL;
  if (v22) {
    unint64_t v25 = v22;
  }
  *a1 = v24;
  a1[1] = v25;
  a1[2] = 0LL;
  a1[3] = 0LL;
  a1[4] = 0LL;
  a1[5] = (uint64_t)_swiftEmptyArrayStorage;
  return result;
}

uint64_t outlined destroy of Locale.LanguageCode?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale.LanguageCode?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

id @nonobjc INStringLocalizer.init(languageCode:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v4 = 0LL;
  }

  id v5 = [v2 initWithLanguageCode:v4];

  return v5;
}

uint64_t outlined bridged method (mbnb) of @objc INCodableEnumValue.localizedDisplayName(forLanguage:)( uint64_t a1, uint64_t a2, void *a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [a3 localizedDisplayNameForLanguage:v5];

  if (!v6) {
    return 0LL;
  }
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

  return v7;
}

uint64_t outlined destroy of CustomIntentDisambiguationRawValue(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of CustomIntentDisambiguationRawValue(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t objectdestroy_5Tm()
{
  uint64_t v1 = OUTLINED_FUNCTION_126_1();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t objectdestroyTm_1()
{
  uint64_t v1 = OUTLINED_FUNCTION_126_1();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #1 in static Transformer<>.disambiguationItemTransformer(attributeMetadata:locale:)( uint64_t a1, uint64_t (*a2)(uint64_t, void, uint64_t))
{
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(OUTLINED_FUNCTION_126_1() - 8) + 80LL);
  return a2(a1, *(void *)(v2 + 16), v2 + ((v5 + 24) & ~v5));
}

uint64_t OUTLINED_FUNCTION_0_33( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16))( (char *)&a9 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v9,  v10);
}

uint64_t OUTLINED_FUNCTION_2_28(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(a1 + v5, v3, v2);
}

uint64_t OUTLINED_FUNCTION_4_30()
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16))(v1, *(void *)(v3 - 112), v0);
}

uint64_t OUTLINED_FUNCTION_5_34(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(a1, v2, v1);
}

  ;
}

uint64_t OUTLINED_FUNCTION_7_29@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Transformer.init(transform:)(a1, v2, a2 + 8);
}

  ;
}

void *static INIntentParameterHelper.removeParameterValue<A>(_:_:)( void *a1, uint64_t a2, unint64_t a3)
{
  return a1;
}

double static INIntentParameterHelper.extractParameterValue(_:_:)@<D0>( void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [a1 valueForKeyPath:v6];

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)((void *)a4);
    swift_unknownObjectRelease(v7);
  }

  else
  {
    double result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }

  return result;
}

uint64_t specialized static INIntentParameterHelper.makeParameterKey<A>(_:_:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  NSString v6 = (void *)specialized static INIntentParameterHelper.makeParameterDescription<A>(_:_:)(a1, a2, a3);
  id v7 = [v6 facadePropertyName];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
    swift_bridgeObjectRetain_n(a3, 2LL);
    id v10 = a1;
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      os_log_type_t type = v12;
      uint64_t v13 = swift_slowAlloc(22LL, -1LL);
      uint64_t v20 = swift_slowAlloc(64LL, -1LL);
      uint64_t v22 = v20;
      *(_DWORD *)uint64_t v13 = 136315394;
      swift_bridgeObjectRetain(a3);
      uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, (unint64_t)a3, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v13 + 4);
      swift_bridgeObjectRelease_n(a3, 3LL);
      *(_WORD *)(v13 + 12) = 2080;
      id v14 = [v10 typeName];
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v17 = v16;

      uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v13 + 14);

      swift_bridgeObjectRelease();
      _os_log_impl( &dword_0,  v11,  type,  "Cannot get a key for parameter: %s on intent type: %s. Will use parameterName instead. This may result in a crash.",  (uint8_t *)v13,  0x16u);
      swift_arrayDestroy(v20, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a3, 2LL);
    }

    swift_bridgeObjectRetain(a3);
  }

  return v4;
}

uint64_t static INIntentParameterHelper.extractParameterValue(previousIntent:usoParse:parameterName:locale:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[39] = a5;
  v6[40] = a6;
  v6[37] = a3;
  v6[38] = a4;
  v6[35] = a1;
  v6[36] = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v6[41] = OUTLINED_FUNCTION_9_0(*(void *)(v7 - 8));
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  v6[42] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v6[43] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[44] = swift_task_alloc(v10);
  v6[45] = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  v6[46] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v6[47] = v12;
  v6[48] = OUTLINED_FUNCTION_9_0(v12);
  return swift_task_switch( static INIntentParameterHelper.extractParameterValue(previousIntent:usoParse:parameterName:locale:),  0LL,  0LL);
}

uint64_t static INIntentParameterHelper.extractParameterValue(previousIntent:usoParse:parameterName:locale:)( uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 368);
  uint64_t v3 = *(void *)(v1 + 328);
  uint64_t v4 = USOParse.userParse.getter(a1);
  uint64_t v5 = Siri_Nlu_External_UserParse.userDialogActs.getter(v4);
  OUTLINED_FUNCTION_28_14();
  specialized Collection.first.getter(v5, v3);
  OUTLINED_FUNCTION_20();
  if (__swift_getEnumTagSinglePayload(v3, 1LL, v2) == 1)
  {
    outlined destroy of URL?( *(void *)(v1 + 328),  &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    OUTLINED_FUNCTION_16_34();
    if (!v48) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v6 = OUTLINED_FUNCTION_48();
    uint64_t v7 = (void *)OUTLINED_FUNCTION_84(v6, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_45_0(v8))
    {
      uint64_t v9 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      *uint64_t v9 = 0;
      OUTLINED_FUNCTION_27_0(&dword_0, v10, v11, "No UDA found in USO parse");
      OUTLINED_FUNCTION_1_0((uint64_t)v9);
    }

    uint64_t v12 = *(_OWORD **)(v1 + 280);

    *uint64_t v12 = 0u;
    v12[1] = 0u;
    goto LABEL_49;
  }

  uint64_t v13 = v1 + 264;
  uint64_t v14 = (*(uint64_t (**)(void, void, void))(*(void *)(v1 + 376) + 32LL))( *(void *)(v1 + 384),  *(void *)(v1 + 328),  *(void *)(v1 + 368));
  uint64_t v15 = USOParse.userParse.getter(v14);
  unint64_t v16 = (os_log_s *)Siri_Nlu_External_UserParse.userDialogActs.getter(v15);
  OUTLINED_FUNCTION_28_14();
  unint64_t v17 = *((void *)v16 + 2);
  OUTLINED_FUNCTION_20();
  if (v17 >= 2)
  {
    OUTLINED_FUNCTION_16_34();
    if (!v48) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v18 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v18, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v19 = OUTLINED_FUNCTION_73();
    if (os_log_type_enabled(v16, v19))
    {
      uint64_t v20 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_0, v16, v19, "More than one task found in UDA", v20, 2u);
      OUTLINED_FUNCTION_1_0((uint64_t)v20);
    }
  }

  uint64_t v22 = *(uint8_t **)(v1 + 304);
  uint64_t v21 = *(void **)(v1 + 312);
  id v23 = [*(id *)(v1 + 288) _codableDescription];
  uint64_t v24 = outlined bridged method (mbgnn) of @objc INCodableDescription.attribute(byKeyPath:)( (uint64_t)v22,  (uint64_t)v21,  v23);
  *(void *)(v1 + 392) = v24;

  if (!v24) {
    goto LABEL_32;
  }
  uint64_t v25 = objc_opt_self(&OBJC_CLASS___INCodableCustomObjectAttribute);
  if (OUTLINED_FUNCTION_4_31(v25))
  {
    uint64_t v26 = OUTLINED_FUNCTION_23_26();
    if (!v22)
    {
      uint64_t v29 = *(void *)(v1 + 376);
      uint64_t v28 = *(void *)(v1 + 384);
      uint64_t v30 = *(void *)(v1 + 368);
      static INIntentParameterHelper.buildCustomObjectValueDictionary(attribute:value:)( v24,  v26,  v27,  *(void *)(v1 + 280));

      OUTLINED_FUNCTION_20();
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
LABEL_49:
      OUTLINED_FUNCTION_3_37();
      OUTLINED_FUNCTION_40_0();
      OUTLINED_FUNCTION_20_0();
      OUTLINED_FUNCTION_15_0();
      return OUTLINED_FUNCTION_12_1(*(uint64_t (**)(void))(v1 + 8));
    }

uint64_t static INIntentParameterHelper.extractParameterValue(previousIntent:usoParse:parameterName:locale:)()
{
  uint64_t v2 = (void *)(*(void *)v1 + 16LL);
  uint64_t v3 = (void *)(*(void *)v1 + 56LL);
  uint64_t v4 = (void *)(*(void *)v1 + 136LL);
  uint64_t v5 = (void *)(*(void *)v1 + 176LL);
  *(void *)(*(void *)v1 + 408LL) = v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v5);
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  __swift_destroy_boxed_opaque_existential_1Tm(v4);
  __swift_destroy_boxed_opaque_existential_1Tm(v2);
  if (v0) {
    uint64_t v6 = static INIntentParameterHelper.extractParameterValue(previousIntent:usoParse:parameterName:locale:);
  }
  else {
    uint64_t v6 = static INIntentParameterHelper.extractParameterValue(previousIntent:usoParse:parameterName:locale:);
  }
  return swift_task_switch(v6, 0LL, 0LL);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v1 = *(void **)(v0 + 392);
  uint64_t v2 = *(void *)(v0 + 376);

  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_3_37();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  uint64_t v1 = *(void *)(v0 + 408);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v2 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  uint64_t v5 = static os_log_type_t.error.getter();
  uint64_t v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 384);
  os_log_type_t v8 = *(void **)(v0 + 392);
  uint64_t v9 = *(void *)(v0 + 368);
  uint64_t v10 = *(void *)(v0 + 376);
  if (v6)
  {
    os_log_type_t v19 = *(void *)(v0 + 368);
    uint64_t v20 = *(void *)(v0 + 384);
    uint64_t v18 = *(void **)(v0 + 392);
    uint64_t v11 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v12 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v21 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    swift_getErrorValue(v1, v0 + 272, v0 + 216);
    uint64_t v13 = OUTLINED_FUNCTION_145();
    *(void *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v11 + 4);
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_31_2(&dword_0, v4, v5, "Could not extract parameter values from USO parse %s", v11);
    OUTLINED_FUNCTION_30_3(v12, v15, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v12);
    OUTLINED_FUNCTION_1_0((uint64_t)v11);

    OUTLINED_FUNCTION_4_8();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v20, v19);
  }

  else
  {

    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v7, v9);
  }

  unint64_t v16 = *(_OWORD **)(v0 + 280);
  *unint64_t v16 = 0u;
  v16[1] = 0u;
  OUTLINED_FUNCTION_3_37();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  return OUTLINED_FUNCTION_12_1(*(uint64_t (**)(void))(v0 + 8));
}

double static INIntentParameterHelper.buildCustomObjectValueDictionary(attribute:value:)@<D0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a1)
  {
    if ([a1 valueType] == (char *)&stru_B8.size + 1)
    {
      uint64_t v8 = objc_opt_self(&OBJC_CLASS___INCodableCustomObjectAttribute);
      if (swift_dynamicCastObjCClass(a1, v8))
      {
        if (a3)
        {
          id v9 = a1;
          swift_bridgeObjectRetain(a3);
          if ((INCodableAttribute.supportsMultipleValues.getter() & 1) == 0)
          {
            uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
            uint64_t inited = swift_initStackObject(v16, &v20);
            *(_OWORD *)(inited + 16) = xmmword_17E650;
            strcpy((char *)(inited + 32), "displayString");
            *(_WORD *)(inited + 46) = -4864;
            *(void *)(inited + 48) = a2;
            *(void *)(inited + 56) = a3;
            uint64_t v18 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
            *(void *)(a4 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);

            *(void *)a4 = v18;
            return result;
          }

          swift_bridgeObjectRelease();
          if (one-time initialization token for voiceCommands != -1) {
            swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
          }
          uint64_t v10 = type metadata accessor for Logger(0LL);
          uint64_t v11 = __swift_project_value_buffer(v10, (uint64_t)static Logger.voiceCommands);
          uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
          os_log_type_t v13 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v12, v13))
          {
            uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v14 = 0;
            _os_log_impl(&dword_0, v12, v13, "SiriLinkFlow does not support parsing multiple values", v14, 2u);
            swift_slowDealloc(v14, -1LL, -1LL);
            uint64_t v15 = (os_log_s *)v9;
          }

          else
          {
            uint64_t v15 = v12;
            uint64_t v12 = (os_log_s *)v9;
          }
        }
      }
    }
  }

  double result = 0.0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  return result;
}

id static INIntentParameterHelper.applyParameterValue(_:_:_:)( void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return static INIntentParameterHelper.applyParameterValue(_:_:_:applyValueStrategy:)(a1, a2, a3, a4, 0LL, 1);
}

id static INIntentParameterHelper.applyParameterValue(_:_:_:applyValueStrategy:)( void *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  id v93 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (os_log_s *)((char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v88 - v15;
  uint64_t v17 = OUTLINED_FUNCTION_48();
  uint64_t v92 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  os_log_type_t v19 = (char *)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = (void *)OUTLINED_FUNCTION_8_38();
  static INIntentParameterHelper.extractParameterValue(_:_:)(v20, v21, v22, v23);
  uint64_t v24 = *(void *)(a4 + 24);
  outlined init with copy of SpeakableString?( (uint64_t)v101,  (uint64_t)v99,  &demangling cache variable for type metadata for Any?);
  if (!(v24 | v100))
  {
    outlined destroy of URL?((uint64_t)v99, &demangling cache variable for type metadata for Any?);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    __swift_project_value_buffer(v17, (uint64_t)static Logger.voiceCommands);
    uint64_t v25 = swift_bridgeObjectRetain_n(a3, 2LL);
    uint64_t v26 = (void *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_43_9(v27))
    {
      uint64_t v28 = (_DWORD *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v29 = OUTLINED_FUNCTION_38(32LL);
      v98[0] = v29;
      *uint64_t v28 = 136315138;
      swift_bridgeObjectRetain(a3);
      uint64_t v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v28 + 1);
      OUTLINED_FUNCTION_37_3(a3);
      OUTLINED_FUNCTION_49_11(&dword_0, v30, v31, "Parameter '%s' value is already nil. Nothing to do");
      OUTLINED_FUNCTION_30_3(v29, v32, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v29);
      OUTLINED_FUNCTION_1_0((uint64_t)v28);
    }

    else
    {
      OUTLINED_FUNCTION_19_1(a3);
    }

    goto LABEL_27;
  }

  uint64_t v89 = v14;
  uint64_t v90 = v17;
  outlined destroy of URL?((uint64_t)v99, &demangling cache variable for type metadata for Any?);
  os_log_type_t v33 = (void *)OUTLINED_FUNCTION_8_38();
  uint64_t v91 = specialized static INIntentParameterHelper.makeParameterKey<A>(_:_:)(v33, v34, v35);
  unint64_t v37 = v36;
  uint64_t v38 = (void *)OUTLINED_FUNCTION_8_38();
  uint64_t v41 = (void *)specialized static INIntentParameterHelper.makeParameterDescription<A>(_:_:)(v38, v39, v40);
  if ((a6 & 1) != 0 || OUTLINED_FUNCTION_34_23() != (char *)&dword_0 + 3)
  {
    if (OUTLINED_FUNCTION_34_23() == (char *)&dword_0 + 3)
    {
      uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any?>);
      uint64_t v47 = OUTLINED_FUNCTION_31_20(v46);
      *(_OWORD *)(v47 + 16) = xmmword_17E650;
      outlined init with copy of SpeakableString?(a4, v47 + 32, &demangling cache variable for type metadata for Any?);
      v98[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]);
      v98[0] = v47;
    }

    else
    {
      outlined init with copy of SpeakableString?( a4,  (uint64_t)v98,  &demangling cache variable for type metadata for Any?);
    }
  }

  else
  {
    uint64_t v42 = (void *)OUTLINED_FUNCTION_8_38();
    specialized static INIntentParameterHelper.makeUpdatedMulticardinalValue<A>(_:_:_:_:)(v42, v43, v44, a4, a5, v45);
  }

  uint64_t v48 = v91;
  if (![v41 isEnum])
  {
    outlined init with copy of SpeakableString?( (uint64_t)v98,  (uint64_t)&v95,  &demangling cache variable for type metadata for Any?);
    uint64_t v58 = v97;
    if (v97)
    {
      unint64_t v59 = __swift_project_boxed_opaque_existential_1(&v95, v97);
      uint64_t v60 = *(void *)(v58 - 8);
      __chkstk_darwin(v59);
      uint64_t v62 = (char *)&v88 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v60 + 16))(v62);
      uint64_t v63 = _bridgeAnythingToObjectiveC<A>(_:)(v62, v58);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v62, v58);
      __swift_destroy_boxed_opaque_existential_1Tm(&v95);
    }

    else
    {
      uint64_t v63 = 0LL;
    }

    v64.super.super.Class isa = (Class)OUTLINED_FUNCTION_22_21();
    swift_bridgeObjectRelease();
    [v93 setValue:v63 forKey:v64.super.super.isa];
    swift_unknownObjectRelease(v63);
LABEL_26:

    outlined destroy of URL?((uint64_t)v98, &demangling cache variable for type metadata for Any?);
LABEL_27:
    outlined destroy of URL?((uint64_t)v101, &demangling cache variable for type metadata for Any?);
    return v93;
  }

  outlined init with copy of SpeakableString?( (uint64_t)v98,  (uint64_t)&v95,  &demangling cache variable for type metadata for Any?);
  uint64_t v49 = v97;
  outlined destroy of URL?((uint64_t)&v95, &demangling cache variable for type metadata for Any?);
  if (!v49)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    __swift_project_value_buffer(v90, (uint64_t)static Logger.voiceCommands);
    uint64_t v50 = swift_bridgeObjectRetain_n(v37, 2LL);
    uint64_t v51 = (void *)Logger.logObject.getter(v50);
    os_log_type_t v52 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_43_9(v52))
    {
      v53 = (_DWORD *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v54 = OUTLINED_FUNCTION_38(32LL);
      uint64_t v95 = v54;
      _DWORD *v53 = 136315138;
      OUTLINED_FUNCTION_9_9();
      uint64_t v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v37, &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v53 + 1);
      OUTLINED_FUNCTION_37_3(v37);
      OUTLINED_FUNCTION_49_11( &dword_0,  v55,  v56,  "Setting enum value for '%s' to rawValue=0. If this is not your default value then implement the code to remove v alues in your domain code.");
      OUTLINED_FUNCTION_30_3(v54, v57, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v54);
      OUTLINED_FUNCTION_1_0((uint64_t)v53);
    }

    else
    {

      OUTLINED_FUNCTION_19_1(v37);
    }

    v64.super.super.Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    NSString v65 = OUTLINED_FUNCTION_22_21();
    swift_bridgeObjectRelease();
    [v93 setValue:v64.super.super.isa forKey:v65];

    uint64_t v41 = v65;
    goto LABEL_26;
  }

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  BOOL v67 = (void *)__swift_project_value_buffer(v90, (uint64_t)static Logger.voiceCommands);
  id v68 = v93;
  OUTLINED_FUNCTION_9_9();
  id v69 = v68;
  id v93 = v67;
  uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
  os_log_type_t v71 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v70, v71))
  {
    uint64_t v72 = OUTLINED_FUNCTION_38(22LL);
    uint64_t v88 = OUTLINED_FUNCTION_38(64LL);
    uint64_t v95 = v88;
    *(_DWORD *)uint64_t v72 = 136315394;
    OUTLINED_FUNCTION_9_9();
    uint64_t v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v37, &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v72 + 4);
    OUTLINED_FUNCTION_37_3(v37);
    *(_WORD *)(v72 + 12) = 2080;
    uint64_t v91 = v72 + 14;
    id v73 = [v69 typeName];
    uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v76 = v75;

    uint64_t v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v76, &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v91);

    OUTLINED_FUNCTION_20();
    _os_log_impl( &dword_0,  v70,  v71,  "\n Cannot generically set enumerated values due to incompatibilities between Swift and Objective-C.\n If you are seeing this message please implement the code to apply values for parameter '%s' on intent type '%s' in your domain code.\n You can use the typed setters on the intent to set enum types rather than using 'setValue'.",  (uint8_t *)v72,  0x16u);
    uint64_t v77 = v88;
    swift_arrayDestroy(v88, 2LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v77);
    OUTLINED_FUNCTION_1_0(v72);
  }

  else
  {

    OUTLINED_FUNCTION_19_1(v37);
  }

  uint64_t v78 = *(void (**)(char *, id, uint64_t))(v92 + 16);
  uint64_t v79 = v90;
  v78(v19, v93, v90);
  v78(v16, v19, v79);
  __swift_storeEnumTagSinglePayload((uint64_t)v16, 0LL, 1LL, v79);
  uint64_t v80 = (uint64_t)v89;
  outlined init with copy of SpeakableString?( (uint64_t)v16,  (uint64_t)v89,  &demangling cache variable for type metadata for Logger?);
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v80, 1LL, v79);
  if ((_DWORD)EnumTagSinglePayload == 1)
  {
    outlined destroy of URL?((uint64_t)v89, &demangling cache variable for type metadata for Logger?);
  }

  else
  {
    uint64_t v82 = v89;
    Logger.logObject.getter(EnumTagSinglePayload);
    os_log_type_t v83 = OUTLINED_FUNCTION_73();
    if (os_log_type_enabled(v82, v83))
    {
      uint64_t v84 = OUTLINED_FUNCTION_38(32LL);
      uint64_t v85 = OUTLINED_FUNCTION_38(64LL);
      uint64_t v95 = v85;
      *(_DWORD *)uint64_t v84 = 136315650;
      uint64_t v86 = StaticString.description.getter( "/Library/Caches/com.apple.xbs/Sources/SiriLinkFlow/SiriLinkFlowPlugin/CustomIntents/INIntentParameterHelper.swift",  113LL,  2LL);
      uint64_t v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v87, &v95);
      OUTLINED_FUNCTION_17_29();
      swift_bridgeObjectRelease();
      *(_WORD *)(v84 + 12) = 2048;
      uint64_t v94 = 106LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v84 + 14);
      *(_WORD *)(v84 + 22) = 2080;
      uint64_t v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000044LL, 0x80000000001965D0LL, &v95);
      OUTLINED_FUNCTION_17_29();
      _os_log_impl(&dword_0, v82, v83, "FatalError at %s:%lu - %s", (uint8_t *)v84, 0x20u);
      swift_arrayDestroy(v85, 2LL, (char *)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v85);
      OUTLINED_FUNCTION_1_0(v84);
    }

    (*(void (**)(os_log_s *, uint64_t))(v92 + 8))(v89, v90);
  }

  static SiriKitLifecycle._logCrashToEventBus(_:)(0xD000000000000044LL, 0x80000000001965D0LL);
  id result = (id)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000044LL,  0x80000000001965D0LL,  "/Library/Caches/com.apple.xbs/Sources/SiriLinkFlow/SiriLinkFlowPlugin/CustomIntents/INIntentParameterHelper.swift",  113LL,  2LL);
  __break(1u);
  return result;
}

uint64_t specialized static INIntentParameterHelper.makeParameterDescription<A>(_:_:)( void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  uint64_t v7 = __chkstk_darwin(v6);
  id v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v44 - v10;
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v16 = [a1 _intentInstanceDescription];
  uint64_t v48 = a2;
  uint64_t v17 = a3;
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v16 slotByName:v18];

  if (v19) {
    return (uint64_t)v19;
  }
  uint64_t v45 = v12;
  uint64_t v46 = v13;
  uint64_t v47 = v9;
  uint64_t v21 = v48;
  uint64_t v22 = (uint64_t)v11;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v23 = v45;
  uint64_t v24 = __swift_project_value_buffer(v45, (uint64_t)static Logger.voiceCommands);
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
  v25(v15, v24, v23);
  uint64_t v50 = 0LL;
  unint64_t v51 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(71LL);
  v26._countAndFlagsBits = 0xD000000000000032LL;
  v26._object = (void *)0x80000000001966A0LL;
  String.append(_:)(v26);
  v27._countAndFlagsBits = v21;
  v27._object = v17;
  String.append(_:)(v27);
  v28._object = (void *)0x80000000001966E0LL;
  v28._countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v28);
  id v29 = [a1 typeName];
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v32 = v31;

  v33._countAndFlagsBits = v30;
  v33._object = v32;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  uint64_t v34 = v50;
  unint64_t v35 = v51;
  v25((char *)v22, (uint64_t)v15, v23);
  __swift_storeEnumTagSinglePayload(v22, 0LL, 1LL, v23);
  uint64_t v36 = (uint64_t)v47;
  outlined init with copy of SpeakableString?( v22,  (uint64_t)v47,  &demangling cache variable for type metadata for Logger?);
  if (__swift_getEnumTagSinglePayload(v36, 1LL, v23) == 1)
  {
    outlined destroy of URL?((uint64_t)v47, &demangling cache variable for type metadata for Logger?);
  }

  else
  {
    uint64_t v37 = swift_bridgeObjectRetain_n(v35, 2LL);
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = swift_slowAlloc(32LL, -1LL);
      uint64_t v41 = swift_slowAlloc(64LL, -1LL);
      uint64_t v50 = v41;
      *(_DWORD *)uint64_t v40 = 136315650;
      uint64_t v42 = StaticString.description.getter( "/Library/Caches/com.apple.xbs/Sources/SiriLinkFlow/SiriLinkFlowPlugin/CustomIntents/INIntentParameterHelper.swift",  113LL,  2LL);
      uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v40 + 4);
      swift_bridgeObjectRelease();
      *(_WORD *)(v40 + 12) = 2048;
      uint64_t v49 = 155LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v40 + 14);
      *(_WORD *)(v40 + 22) = 2080;
      swift_bridgeObjectRetain(v35);
      uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v40 + 24);
      swift_bridgeObjectRelease_n(v35, 3LL);
      _os_log_impl(&dword_0, v38, v39, "FatalError at %s:%lu - %s", (uint8_t *)v40, 0x20u);
      swift_arrayDestroy(v41, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v35, 2LL);
    }

    (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v45);
  }

  static SiriKitLifecycle._logCrashToEventBus(_:)(v34, v35);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v34,  v35,  "/Library/Caches/com.apple.xbs/Sources/SiriLinkFlow/SiriLinkFlowPlugin/CustomIntents/INIntentParameterHelper.swift",  113LL,  2LL);
  __break(1u);
  return result;
}

void specialized static INIntentParameterHelper.makeUpdatedMulticardinalValue<A>(_:_:_:_:)( void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, void *a6@<X8>)
{
  if (v23)
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    if ((swift_dynamicCast(&v20, &v22, (char *)&type metadata for Any + 8, v9, 6LL) & 1) != 0)
    {
      uint64_t v10 = (void *)v20;
      goto LABEL_6;
    }
  }

  else
  {
    outlined destroy of URL?((uint64_t)&v22, &demangling cache variable for type metadata for Any?);
  }

  uint64_t v10 = _swiftEmptyArrayStorage;
LABEL_6:
  if (v10[2] <= (int64_t)a5)
  {
    outlined init with copy of SpeakableString?( a4,  (uint64_t)&v20,  &demangling cache variable for type metadata for Any?);
    if (!v21)
    {
      outlined destroy of URL?((uint64_t)&v20, &demangling cache variable for type metadata for Any?);
      goto LABEL_22;
    }

    outlined init with take of Any(&v20, &v22);
    outlined init with copy of Any((uint64_t)&v22, (uint64_t)&v20);
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) != 0)
    {
LABEL_14:
      unint64_t v12 = v10[2];
      if (v12 >= v10[3] >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v10 = v18;
      }

      v10[2] = v12 + 1;
      outlined init with take of Any(&v20, &v10[4 * v12 + 4]);
      __swift_destroy_boxed_opaque_existential_1Tm(&v22);
      goto LABEL_22;
    }

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    OUTLINED_FUNCTION_14();
  }

  else
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v2, 0LL, a1);
}

void specialized _ArrayBuffer._consumeAndCreateNew()()
{
}

uint64_t outlined bridged method (ob) of @objc INCodableObjectAttribute.typeName.getter(void *a1)
{
  id v2 = [a1 typeName];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

ValueMetadata *type metadata accessor for INIntentParameterHelper()
{
  return &type metadata for INIntentParameterHelper;
}

uint64_t OUTLINED_FUNCTION_3_37()
{
  return swift_task_dealloc(*(void *)(v0 + 384));
}

uint64_t OUTLINED_FUNCTION_4_31(uint64_t a1)
{
  return swift_dynamicCastObjCClass(v1, a1);
}

uint64_t OUTLINED_FUNCTION_8_38()
{
  return *(void *)(v0 - 232);
}

  ;
}

uint64_t OUTLINED_FUNCTION_17_29()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 224, v1, v0);
}

NSString OUTLINED_FUNCTION_22_21()
{
  return String._bridgeToObjectiveC()();
}

uint64_t OUTLINED_FUNCTION_23_26()
{
  return Siri_Nlu_External_UserDialogAct.stringValue.getter();
}

uint64_t OUTLINED_FUNCTION_28_14()
{
  return v2(v0, v1);
}

uint64_t OUTLINED_FUNCTION_31_20(uint64_t a1)
{
  return swift_allocObject(a1, 64LL, 7LL);
}

id OUTLINED_FUNCTION_34_23()
{
  return [v1 *(SEL *)(v0 + 1856)];
}

double static WFPausedShortcutConverter.toSiriWorkflowInput(userData:)@<D0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v4, (uint64_t)static Logger.voiceCommands);
  uint64_t v5 = swift_bridgeObjectRetain_n(a1, 2LL);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    v25[0] = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v10 = swift_bridgeObjectRetain(a1);
    uint64_t v11 = Dictionary.description.getter( v10,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    unint64_t v13 = v12;
    swift_bridgeObjectRelease(a1);
    uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v8 + 4);
    OUTLINED_FUNCTION_46();
    swift_bridgeObjectRelease(v13);
    _os_log_impl(&dword_0, v6, v7, "toSiriWorkflowInput userData: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v9);
    OUTLINED_FUNCTION_1_0((uint64_t)v8);
  }

  else
  {

    OUTLINED_FUNCTION_46();
  }

  uint64_t v14 = static WFPausedShortcutConverter.getWFPausedShortcutData(userData:)(a1);
  if (v14)
  {
    uint64_t v15 = OUTLINED_FUNCTION_0_34();
    specialized Dictionary.subscript.getter(v15, v16, a1, v17);
    if (v25[3])
    {
      int v18 = swift_dynamicCast(&v23, v25, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
      uint64_t v19 = v23;
      uint64_t v20 = v24;
      if (!v18)
      {
        uint64_t v19 = 0LL;
        uint64_t v20 = 0LL;
      }
    }

    else
    {
      outlined destroy of Any?((uint64_t)v25);
      uint64_t v19 = 0LL;
      uint64_t v20 = 0LL;
    }

    char v21 = 3;
  }

  else
  {
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
    char v21 = -1;
  }

  *(void *)a2 = v14;
  *(void *)(a2 + 8) = v19;
  *(void *)(a2 + 16) = v20;
  double result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(void *)(a2 + 56) = 0LL;
  *(_BYTE *)(a2 + 64) = v21;
  return result;
}

const char *WFPausedShortcutConverter.shortcutNameField.unsafeMutableAddressor()
{
  return "shortcutName";
}

uint64_t static WFPausedShortcutConverter.shortcutNameField.getter()
{
  return OUTLINED_FUNCTION_0_34();
}

void *WFPausedShortcutConverter.pausedShortcutDataField.unsafeMutableAddressor()
{
  return &static WFPausedShortcutConverter.pausedShortcutDataField;
}

unint64_t static WFPausedShortcutConverter.pausedShortcutDataField.getter()
{
  return 0xD000000000000012LL;
}

uint64_t static WFPausedShortcutConverter.toUserData(pausedShortcutData:runnerInput:)(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  outlined init with take of SiriWorkflowRunnerInput?(a2, (uint64_t)v22);
  if (v22[64] != 255)
  {
    outlined init with take of SiriWorkflowRunnerInput(v22, v23);
    outlined init with take of SiriWorkflowRunnerInput(v23, v24);
    if (!v25)
    {
      char v21 = &type metadata for String;
      id v19 = (id)v24[0];
      uint64_t v20 = v24[1];
      outlined retain of SiriWorkflowRunnerInput?(a2);
      specialized Dictionary.subscript.setter((uint64_t)&v19);
    }
  }

  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
  id v19 = 0LL;
  id v5 = [v4 archivedDataWithRootObject:a1 requiringSecureCoding:1 error:&v19];
  id v6 = v19;
  if (v5)
  {
    os_log_type_t v7 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
    uint64_t v9 = v8;

    char v21 = &type metadata for Data;
    id v19 = v7;
    uint64_t v20 = v9;
    specialized Dictionary.subscript.setter((uint64_t)&v19);
  }

  else
  {
    uint64_t v10 = v6;
    uint64_t v11 = _convertNSErrorToError(_:)(v6);

    swift_willThrow(v12, v13, v14, v15, v16);
    swift_errorRelease(v11);
  }

  return v18;
}

uint64_t static WFPausedShortcutConverter.getWFPausedShortcutData(userData:)(uint64_t a1)
{
  if (!v19)
  {
    outlined destroy of Any?((uint64_t)&v18);
    goto LABEL_10;
  }

  if ((swift_dynamicCast(v17, &v18, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) == 0)
  {
LABEL_10:
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = __swift_project_value_buffer(v10, (uint64_t)static Logger.voiceCommands);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_0, v12, v13, "Cannot get data from userData", v14, 2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    return 0LL;
  }

  uint64_t v2 = v17[0];
  unint64_t v1 = v17[1];
  type metadata accessor for NSError( 0LL,  &lazy cache variable for type metadata for NSKeyedUnarchiver,  &OBJC_CLASS___NSKeyedUnarchiver_ptr);
  uint64_t v3 = type metadata accessor for NSError( 0LL,  &lazy cache variable for type metadata for WFPausedShortcutData,  &OBJC_CLASS___WFPausedShortcutData_ptr);
  uint64_t v4 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v3, v2, v1, v3);
  uint64_t v15 = v4;
  if (v4)
  {
    outlined consume of Data._Representation(v2, v1);
    return v15;
  }

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = __swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_0, v7, v8, "Cannot unarchive WFPausedShortcutData", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  outlined consume of Data._Representation(v2, v1);

  return 0LL;
}

uint64_t outlined init with take of SiriWorkflowRunnerInput?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SiriWorkflowRunnerInput?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of SiriWorkflowRunnerInput?(uint64_t a1)
{
  return a1;
}

id outlined copy of SiriWorkflowRunnerInput?( id result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, unsigned __int8 a9)
{
  if (a9 != 255) {
    return outlined copy of SiriWorkflowRunnerInput(result, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  return result;
}

ValueMetadata *type metadata accessor for WFPausedShortcutConverter()
{
  return &type metadata for WFPausedShortcutConverter;
}

uint64_t OUTLINED_FUNCTION_0_34()
{
  return 0x74756374726F6873LL;
}

uint64_t Optional<A>.asNLContextUpdate()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    uint64_t v4 = swift_unknownObjectRetain(a1);
    NLContextUpdate.init()(v4);
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v6 = swift_allocObject(v5, 40LL, 7LL);
    *(_OWORD *)(v6 + 16) = xmmword_17E150;
    *(void *)(v6 + 32) = a1;
    uint64_t v12 = v6;
    specialized Array._endMutation()(v6, v7, v8);
    NLContextUpdate.systemDialogActs.setter(v12);
    uint64_t v9 = 0LL;
  }

  else
  {
    uint64_t v9 = 1LL;
  }

  uint64_t v10 = type metadata accessor for NLContextUpdate(0LL);
  return __swift_storeEnumTagSinglePayload(a2, v9, 1LL, v10);
}

uint64_t Siri_Nlu_External_SystemDialogAct.asNLContextUpdate()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 + 32) & ~v7;
  uint64_t v9 = swift_allocObject(v4, v8 + *(void *)(v6 + 72), v7 | 7);
  *(_OWORD *)(v9 + 16) = xmmword_17E650;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v9 + v8, v2, v5);
  NLContextUpdate.nluSystemDialogActs.setter(v9);
  uint64_t v10 = type metadata accessor for NLContextUpdate(0LL);
  return __swift_storeEnumTagSinglePayload(a2, 0LL, 1LL, v10);
}

uint64_t DeviceState.isActualHomePod.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = __chkstk_darwin(a1);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v9 = dispatch thunk of DeviceState.isHomePod.getter(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a1);
  if ((v9 & 1) != 0) {
    char v10 = dispatch thunk of DeviceState.isSidekick.getter(a1, a2) ^ 1;
  }
  else {
    char v10 = 0;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
  return v10 & 1;
}

void VoiceCommandParityFlow.__allocating_init(intent:app:outputPublisher:)( uint64_t a1, uint64_t a2, __int128 *a3)
{
}

uint64_t VoiceCommandParityFlow.exitValue.getter()
{
  unint64_t v1 = *(void **)(v0 + 72);
  uint64_t v2 = *(void **)(v0 + 80);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 88);
  uint64_t v4 = (uint64_t)v1;
  if (v3 >> 6)
  {
    if (v3 >> 6 == 1)
    {
      uint64_t v4 = *(void *)(v0 + 72);
    }

    else
    {
      unint64_t v5 = lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors();
      uint64_t v4 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for RunVoiceShortcutFlowErrors, v5);
      *uint64_t v6 = 0;
    }
  }

  outlined copy of VoiceCommandParityFlow.State(v1, v2, v3);
  return v4;
}

uint64_t VoiceCommandParityFlow.outputPublisher.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 32, a1);
}

uint64_t VoiceCommandParityFlow.init(intent:app:outputPublisher:)(uint64_t a1, uint64_t a2, __int128 *a3)
{
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  outlined init with take of AceServiceInvokerAsync(a3, v3 + 32);
  *(void *)(v3 + 72) = 0LL;
  *(void *)(v3 + 80) = 0LL;
  *(_BYTE *)(v3 + 88) = 0x80;
  return v3;
}

id outlined copy of VoiceCommandParityFlow.State(id result, void *a2, char a3)
{
  return result;
}

id outlined copy of ParityFlowExecutionResult(id result, void *a2, char a3)
{
  if (a3 == 1) {
    return (id)swift_errorRetain(result);
  }
  if (!a3)
  {
    id v3 = result;
    return a2;
  }

  return result;
}

uint64_t VoiceCommandParityFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return swift_task_switch(VoiceCommandParityFlow.execute(), 0LL, 0LL);
}

uint64_t VoiceCommandParityFlow.execute()()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  uint64_t v3 = swift_retain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 32);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v9 = OUTLINED_FUNCTION_38(32LL);
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v20 = v9;
    id v10 = [*(id *)(v7 + 16) debugDescription];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;

    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_107_0(v7);
    _os_log_impl(&dword_0, v4, v5, "#VoiceCommandParityFlow execute intent: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v9);
    OUTLINED_FUNCTION_1_0((uint64_t)v8);
  }

  else
  {
    OUTLINED_FUNCTION_107_0(*(void *)(v0 + 32));
  }

  uint64_t v15 = *(void *)(v0 + 32);
  if (*(char *)(v15 + 88) < 0)
  {
    uint64_t v18 = *(void *)(v15 + 16);
    uint64_t v17 = *(void *)(v15 + 24);
    uint64_t v19 = (void *)swift_task_alloc(dword_21AEBC);
    *(void *)(v0 + 40) = v19;
    *uint64_t v19 = v0;
    v19[1] = VoiceCommandParityFlow.execute();
    return VoiceCommandParityFlow.executeIntent(intent:app:)(*(void *)(v0 + 24), v18, v17);
  }

  else
  {
    static ExecuteResponse.complete()(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

{
  uint64_t *v0;
  uint64_t v2;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t VoiceCommandParityFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for VoiceCommandParityFlow();
  uint64_t v6 = lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow( &lazy protocol witness table cache variable for type VoiceCommandParityFlow and conformance VoiceCommandParityFlow,  v5,  (uint64_t (*)(uint64_t))type metadata accessor for VoiceCommandParityFlow,  (uint64_t)&protocol conformance descriptor for VoiceCommandParityFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v6);
}

uint64_t VoiceCommandParityFlow.executeIntent(intent:app:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[19] = a3;
  v4[20] = v3;
  v4[17] = a1;
  v4[18] = a2;
  uint64_t v5 = type metadata accessor for AceOutput(0LL);
  v4[21] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[22] = v6;
  v4[23] = OUTLINED_FUNCTION_9_0(v6);
  unint64_t v7 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?)
                              - 8)
                  + 64LL)
      + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[24] = swift_task_alloc(v7);
  v4[25] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for NLContextUpdate(0LL);
  v4[26] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[27] = v9;
  v4[28] = OUTLINED_FUNCTION_9_0(v9);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse.DirectInvocation?);
  v4[29] = OUTLINED_FUNCTION_9_0(*(void *)(v10 - 8));
  uint64_t v11 = type metadata accessor for Parse.DirectInvocation(0LL);
  v4[30] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v4[31] = v12;
  v4[32] = OUTLINED_FUNCTION_9_0(v12);
  return swift_task_switch(VoiceCommandParityFlow.executeIntent(intent:app:), 0LL, 0LL);
}

uint64_t VoiceCommandParityFlow.executeIntent(intent:app:)()
{
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v3 = *(os_log_s **)(v0 + 152);
  id v4 = static VoiceCommandsParity.processIntent(intent:)(*(void **)(v0 + 144));
  *(void *)(v0 + 264) = v4;
  static VoiceCommandsParity.buildDirectInvocationParse(intent:app:)(v4, v2);
  if (__swift_getEnumTagSinglePayload(v2, 1LL, v1) == 1)
  {
    outlined destroy of URL?( *(void *)(v0 + 232),  &demangling cache variable for type metadata for Parse.DirectInvocation?);
    unint64_t v5 = lazy protocol witness table accessor for type VoiceCommandsParityError and conformance VoiceCommandsParityError();
    uint64_t v6 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for VoiceCommandsParityError, v5);
    *unint64_t v7 = 1;
    OUTLINED_FUNCTION_0_35(v6);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v8 = OUTLINED_FUNCTION_48();
    os_log_type_t v9 = __swift_project_value_buffer(v8, (uint64_t)static Logger.voiceCommands);
    id v10 = v4;
    OUTLINED_FUNCTION_10_28();
    id v11 = v4;
    Logger.logObject.getter(v11);
    os_log_type_t v12 = OUTLINED_FUNCTION_17_30();
    BOOL v13 = OUTLINED_FUNCTION_9_30(v12);
    uint64_t v14 = *(void *)(v0 + 152);
    if (v13)
    {
      os_log_type_t v111 = v9;
      uint64_t v15 = OUTLINED_FUNCTION_38(22LL);
      uint64_t v108 = OUTLINED_FUNCTION_38(64LL);
      *(void *)&v113[0] = v108;
      *(_DWORD *)uint64_t v15 = 136315394;
      id v16 = [v11 debugDescription];
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v19 = v18;

      *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, (uint64_t *)v113);
      OUTLINED_FUNCTION_28_15(v0 + 120, v0 + 128);
      swift_bridgeObjectRelease();

      *(_WORD *)(v15 + 12) = 2080;
      *(void *)(v0 + 56) = v14;
      uint64_t v20 = OUTLINED_FUNCTION_19_24();
      uint64_t v22 = OUTLINED_FUNCTION_56_16( &lazy protocol witness table cache variable for type App and conformance App,  v21,  (uint64_t (*)(uint64_t))&type metadata accessor for App,  (uint64_t)&protocol conformance descriptor for App);
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v20, v22);
      *(void *)(v0 + 64) = OUTLINED_FUNCTION_14_31(v23, v24, v25, v26, v27, v28, v29, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v15 + 14);
      OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_107_0(v14);
      OUTLINED_FUNCTION_24_9( &dword_0,  v3,  v111,  "cannot build direction invocation for intent: %s, app: %s",  (uint8_t *)v15);
      OUTLINED_FUNCTION_13_25((uint64_t)&type metadata for Any, v106, v0 + 72, v0 + 56, v0 + 64, v108);
      OUTLINED_FUNCTION_1_0(v0 + 56);
      OUTLINED_FUNCTION_1_0(v15);
    }

    else
    {

      OUTLINED_FUNCTION_107_0(v14);
    }

    OUTLINED_FUNCTION_24_24();
    goto LABEL_25;
  }

  uint64_t v31 = *(void *)(v0 + 256);
  (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 248) + 32LL))( v31,  *(void *)(v0 + 232),  *(void *)(v0 + 240));
  uint64_t v32 = static FlowLocator.findFlow(forInvocation:)(v31);
  *(void *)(v0 + 272) = v32;
  if (!v32)
  {
LABEL_16:
    unint64_t v62 = lazy protocol witness table accessor for type VoiceCommandsParityError and conformance VoiceCommandsParityError();
    uint64_t v63 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for VoiceCommandsParityError, v62);
    *NSNumber v64 = 2;
    OUTLINED_FUNCTION_0_35(v63);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v65 = OUTLINED_FUNCTION_48();
    os_log_type_t v66 = __swift_project_value_buffer(v65, (uint64_t)static Logger.voiceCommands);
    id v67 = v4;
    OUTLINED_FUNCTION_10_28();
    id v68 = v4;
    Logger.logObject.getter(v68);
    os_log_type_t v69 = OUTLINED_FUNCTION_17_30();
    BOOL v70 = OUTLINED_FUNCTION_9_30(v69);
    uint64_t v71 = *(void *)(v0 + 152);
    if (v70)
    {
      os_log_type_t v112 = v66;
      uint64_t v72 = OUTLINED_FUNCTION_38(22LL);
      uint64_t v110 = OUTLINED_FUNCTION_38(64LL);
      *(void *)&v113[0] = v110;
      *(_DWORD *)uint64_t v72 = 136315394;
      id v73 = [v68 debugDescription];
      uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v76 = v75;

      *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v76, (uint64_t *)v113);
      OUTLINED_FUNCTION_28_15(v0 + 72, v0 + 80);
      swift_bridgeObjectRelease();

      *(_WORD *)(v72 + 12) = 2080;
      *(void *)(v0 + 80) = v71;
      OUTLINED_FUNCTION_19_24();
      uint64_t v78 = OUTLINED_FUNCTION_56_16( &lazy protocol witness table cache variable for type App and conformance App,  v77,  (uint64_t (*)(uint64_t))&type metadata accessor for App,  (uint64_t)&protocol conformance descriptor for App);
      uint64_t v79 = OUTLINED_FUNCTION_18_27(v78);
      *(void *)(v0 + 88) = OUTLINED_FUNCTION_14_31(v79, v80, v81, v82, v83, v84, v85, v86);
      OUTLINED_FUNCTION_28_15(v0 + 88, v0 + 96);
      OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_107_0(v71);
      OUTLINED_FUNCTION_24_9( &dword_0,  v3,  v112,  "cannot build flow for direct invocation, intent: %s, app: %s",  (uint8_t *)v72);
      OUTLINED_FUNCTION_13_25((uint64_t)&type metadata for Any, v106, v71, v0 + 96, v0 + 88, v110);
      OUTLINED_FUNCTION_1_0(v0 + 80);
      OUTLINED_FUNCTION_1_0(v72);
    }

    else
    {

      OUTLINED_FUNCTION_107_0(v71);
    }

    uint64_t v88 = *(void *)(v0 + 248);
    uint64_t v87 = *(void *)(v0 + 256);
    uint64_t v89 = *(void *)(v0 + 240);
    OUTLINED_FUNCTION_24_24();

    (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v87, v89);
    goto LABEL_25;
  }

  uint64_t v3 = (os_log_s *)v32;
  uint64_t v33 = type metadata accessor for AnyVoiceCommandsParityFlow(0LL);
  *(void *)(v0 + 280) = v33;
  uint64_t v34 = swift_dynamicCastClass(v3, v33);
  *(void *)(v0 + 288) = v34;
  if (!v34)
  {
    swift_release();
    goto LABEL_16;
  }

  uint64_t v36 = *(void *)(v0 + 200);
  uint64_t v35 = *(void *)(v0 + 208);
  static VoiceCommandsParity.buildNLContextUpdate(intent:app:)(v36);
  if (__swift_getEnumTagSinglePayload(v36, 1LL, v35) != 1)
  {
    uint64_t v91 = *(void *)(v0 + 216);
    uint64_t v90 = *(void *)(v0 + 224);
    uint64_t v92 = *(void *)(v0 + 208);
    uint64_t v93 = *(void *)(v0 + 184);
    uint64_t v94 = *(void *)(v0 + 192);
    uint64_t v95 = *(void *)(v0 + 168);
    uint64_t v96 = *(void *)(v0 + 176);
    uint64_t v97 = *(void **)(v0 + 160);
    (*(void (**)(uint64_t, void, uint64_t))(v91 + 32))(v90, *(void *)(v0 + 200), v92);
    uint64_t v114 = 0LL;
    memset(v113, 0, sizeof(v113));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 16))(v94, v90, v92);
    __swift_storeEnumTagSinglePayload(v94, 0LL, 1LL, v92);
    AceOutput.init(commands:flowActivity:nlContextUpdate:)(_swiftEmptyArrayStorage, v113, v94);
    uint64_t v98 = v97[7];
    uint64_t v99 = v97[8];
    __swift_project_boxed_opaque_existential_1(v97 + 4, v98);
    *(void *)(v0 + 40) = v95;
    *(void *)(v0 + 48) = &protocol witness table for AceOutput;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v0 + 16));
    (*(void (**)(void *, uint64_t, uint64_t))(v96 + 16))(boxed_opaque_existential_1, v93, v95);
    v101 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
    *(void *)(v0 + 296) = v101;
    void *v101 = v0;
    v101[1] = VoiceCommandParityFlow.executeIntent(intent:app:);
    return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 16, v98, v99);
  }

  outlined destroy of URL?(*(void *)(v0 + 200), &demangling cache variable for type metadata for NLContextUpdate?);
  unint64_t v37 = lazy protocol witness table accessor for type VoiceCommandsParityError and conformance VoiceCommandsParityError();
  uint64_t v38 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for VoiceCommandsParityError, v37);
  *os_log_type_t v39 = 0;
  OUTLINED_FUNCTION_0_35(v38);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v40 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v40, (uint64_t)static Logger.voiceCommands);
  id v41 = v4;
  OUTLINED_FUNCTION_10_28();
  id v42 = v4;
  unint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
  os_log_type_t v44 = static os_log_type_t.error.getter();
  BOOL v45 = os_log_type_enabled(v43, v44);
  uint64_t v46 = *(void *)(v0 + 152);
  if (v45)
  {
    uint64_t v47 = OUTLINED_FUNCTION_38(22LL);
    uint64_t v109 = OUTLINED_FUNCTION_38(64LL);
    *(void *)&v113[0] = v109;
    *(_DWORD *)uint64_t v47 = 136315394;
    os_log_type_t v107 = v44;
    id v48 = [v42 debugDescription];
    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v51 = v50;

    *(void *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v51, (uint64_t *)v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v47 + 4);
    swift_bridgeObjectRelease();

    *(_WORD *)(v47 + 12) = 2080;
    *(void *)(v0 + 104) = v46;
    OUTLINED_FUNCTION_19_24();
    uint64_t v53 = OUTLINED_FUNCTION_56_16( &lazy protocol witness table cache variable for type App and conformance App,  v52,  (uint64_t (*)(uint64_t))&type metadata accessor for App,  (uint64_t)&protocol conformance descriptor for App);
    uint64_t v54 = OUTLINED_FUNCTION_18_27(v53);
    *(void *)(v0 + 112) = OUTLINED_FUNCTION_14_31(v54, v55, v56, v57, v58, v59, v60, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v47 + 14);
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_107_0(v46);
    OUTLINED_FUNCTION_24_9( &dword_0,  v43,  v107,  "cannot build contextUpdate for direct invocation, intent: %s, app: %s",  (uint8_t *)v47);
    swift_arrayDestroy(v109, 2LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v109);
    OUTLINED_FUNCTION_1_0(v47);
  }

  else
  {

    OUTLINED_FUNCTION_107_0(v46);
  }

  uint64_t v104 = *(void *)(v0 + 248);
  uint64_t v103 = *(void *)(v0 + 256);
  uint64_t v105 = *(void *)(v0 + 240);
  OUTLINED_FUNCTION_24_24();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v103, v105);
LABEL_25:
  OUTLINED_FUNCTION_6_35();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v2 = *v1;
  *(void *)(*v1 + 304) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = VoiceCommandParityFlow.executeIntent(intent:app:);
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(v2 + 16));
    uint64_t v3 = VoiceCommandParityFlow.executeIntent(intent:app:);
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v2 = *(void **)(v0 + 264);
  BOOL v13 = *(void *)(v0 + 256);
  id v11 = *(void *)(v0 + 248);
  os_log_type_t v12 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 216);
  os_log_type_t v9 = *(void *)(v0 + 208);
  id v10 = *(void *)(v0 + 224);
  id v4 = *(void *)(v0 + 176);
  unint64_t v5 = *(void *)(v0 + 184);
  unint64_t v7 = *(void *)(v0 + 160);
  uint64_t v6 = *(void *)(v0 + 168);
  *(void *)(v0 + 128) = *(void *)(v0 + 288);
  swift_retain(v7);
  static ExecuteResponse.ongoing<A>(next:childCompletion:)( v0 + 128,  partial apply for implicit closure #8 in implicit closure #7 in VoiceCommandParityFlow.executeIntent(intent:app:),  v7,  v1,  &protocol witness table for AnyFlow);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v10, v9);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v12);
  swift_release();
  OUTLINED_FUNCTION_6_35();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_12_1(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  os_log_s *v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v2 = OUTLINED_FUNCTION_48();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  id v4 = v3;
  Logger.logObject.getter(v3);
  unint64_t v5 = OUTLINED_FUNCTION_17_30();
  if (OUTLINED_FUNCTION_9_30(v5))
  {
    uint64_t v6 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_0, v1, v4, "submitting contextUpdate failed.", v6, 2u);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
  }

  unint64_t v7 = *(void *)(v0 + 304);
  uint64_t v8 = *(void **)(v0 + 264);
  uint64_t v21 = *(void *)(v0 + 240);
  uint64_t v22 = *(void *)(v0 + 256);
  unint64_t v19 = *(void *)(v0 + 224);
  uint64_t v20 = *(void *)(v0 + 248);
  uint64_t v17 = *(void *)(v0 + 216);
  unint64_t v18 = *(void *)(v0 + 208);
  os_log_type_t v9 = *(void *)(v0 + 176);
  id v10 = *(void *)(v0 + 184);
  id v11 = *(void *)(v0 + 168);

  os_log_type_t v12 = lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors();
  BOOL v13 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for RunVoiceShortcutFlowErrors, v12);
  *uint64_t v14 = 2;
  OUTLINED_FUNCTION_0_35(v13);
  static ExecuteResponse.complete()(v15);
  swift_release();
  swift_errorRelease(v7);

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v18);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v21);
  OUTLINED_FUNCTION_6_35();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_12_1(*(uint64_t (**)(void))(v0 + 8));
}

void VoiceCommandParityFlow.processParityRequestExecutionResult(executionResult:)()
{
  uint64_t v1 = static VoiceCommandsParity.processExecutionResult(intent:executionResult:)(*(void **)(v0 + 16));
  uint64_t v2 = *(void **)(v0 + 72);
  uint64_t v3 = *(void **)(v0 + 80);
  *(void *)(v0 + 72) = v1;
  *(void *)(v0 + 80) = v4;
  char v5 = *(_BYTE *)(v0 + 88);
  *(_BYTE *)(v0 + 88) = v6;
  outlined consume of VoiceCommandParityFlow.State(v2, v3, v5);
}

uint64_t VoiceCommandParityFlow.deinit()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 32));
  outlined consume of VoiceCommandParityFlow.State(*(void **)(v0 + 72), *(void **)(v0 + 80), *(_BYTE *)(v0 + 88));
  return v0;
}

uint64_t VoiceCommandParityFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 89LL, 7LL);
}

uint64_t protocol witness for Flow.on(input:) in conformance VoiceCommandParityFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152LL))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance VoiceCommandParityFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168LL))();
}

uint64_t protocol witness for Flow.execute() in conformance VoiceCommandParityFlow(uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 160LL);
  unint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  char v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *char v5 = v2;
  v5[1] = protocol witness for VoiceShortcutClientWrapping.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:) in conformance VoiceShortcutClientWrapper;
  return v7(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance VoiceCommandParityFlow@<X0>( uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 112LL))();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return result;
}

uint64_t type metadata accessor for VoiceCommandParityFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin22VoiceCommandParityFlow);
}

void outlined consume of VoiceCommandParityFlow.State(void *a1, void *a2, char a3)
{
  if (a3 >> 6 == 1)
  {
    swift_errorRelease(a1);
  }

  else if (!(a3 >> 6))
  {
    outlined consume of ParityFlowExecutionResult(a1, a2, a3);
  }

void outlined consume of ParityFlowExecutionResult(void *a1, void *a2, char a3)
{
  if (a3 == 1)
  {
    swift_errorRelease(a1);
  }

  else if (!a3)
  {
  }

uint64_t base witness table accessor for Flow in VoiceCommandParityFlow(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow( &lazy protocol witness table cache variable for type VoiceCommandParityFlow and conformance VoiceCommandParityFlow,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for VoiceCommandParityFlow,  (uint64_t)&protocol conformance descriptor for VoiceCommandParityFlow);
}

uint64_t base witness table accessor for SiriEnvironmentLocating in VoiceCommandParityFlow( uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow( &lazy protocol witness table cache variable for type VoiceCommandParityFlow and conformance VoiceCommandParityFlow,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for VoiceCommandParityFlow,  (uint64_t)&protocol conformance descriptor for VoiceCommandParityFlow);
}

void destroy for VoiceCommandParityFlow.State(uint64_t a1)
{
}

void initializeBufferWithCopyOfBuffer for VoiceCommandParityFlow.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of VoiceCommandParityFlow.State(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  OUTLINED_FUNCTION_2();
}

uint64_t assignWithCopy for VoiceCommandParityFlow.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of VoiceCommandParityFlow.State(*(id *)a2, v4, v5);
  char v6 = *(void **)a1;
  unint64_t v7 = *(void **)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of VoiceCommandParityFlow.State(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for VoiceCommandParityFlow.State(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of VoiceCommandParityFlow.State(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for VoiceCommandParityFlow.State(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x3E && *(_BYTE *)(a1 + 17))
    {
      unsigned int v2 = *(_DWORD *)a1 + 61;
    }

    else
    {
      unsigned int v2 = (*(_BYTE *)(a1 + 16) & 0x3C | (*(unsigned __int8 *)(a1 + 16) >> 6)) ^ 0x3F;
      if (v2 >= 0x3D) {
        unsigned int v2 = -1;
      }
    }
  }

  else
  {
    unsigned int v2 = -1;
  }

  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for VoiceCommandParityFlow.State( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3D)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 62;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x3E) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0x3E) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0LL;
      *(void *)(result + 8) = 0LL;
      *(_BYTE *)(result + 16) = 4 * (((-a2 >> 2) & 0xF) - 16 * a2);
    }
  }

  return result;
}

uint64_t getEnumTag for VoiceCommandParityFlow.State(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  int v2 = (char)v1;
  unsigned int v3 = v1 >> 6;
  if (v2 >= 0) {
    return v3;
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveProjectEnumData for VoiceCommandParityFlow.State(uint64_t result)
{
  *(_BYTE *)(result + 16) &= 0x3Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for VoiceCommandParityFlow.State(uint64_t result, unsigned int a2)
{
  if (a2 < 2)
  {
    char v2 = *(_BYTE *)(result + 16) & 3 | ((_BYTE)a2 << 6);
  }

  else
  {
    *(void *)uint64_t result = a2 - 2;
    *(void *)(result + 8) = 0LL;
    char v2 = 0x80;
  }

  *(_BYTE *)(result + 16) = v2;
  return result;
}

void *type metadata accessor for VoiceCommandParityFlow.State()
{
  return &unk_1F9D88;
}

unint64_t lazy protocol witness table accessor for type VoiceCommandsParityError and conformance VoiceCommandsParityError()
{
  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsParityError and conformance VoiceCommandsParityError;
  if (!lazy protocol witness table cache variable for type VoiceCommandsParityError and conformance VoiceCommandsParityError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for VoiceCommandsParityError,  &type metadata for VoiceCommandsParityError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsParityError and conformance VoiceCommandsParityError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsParityError and conformance VoiceCommandsParityError;
  if (!lazy protocol witness table cache variable for type VoiceCommandsParityError and conformance VoiceCommandsParityError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for VoiceCommandsParityError,  &type metadata for VoiceCommandsParityError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsParityError and conformance VoiceCommandsParityError);
  }

  return result;
}

void OUTLINED_FUNCTION_0_35(uint64_t a1)
{
  unsigned int v3 = *(void **)(v1 + 72);
  char v2 = *(void **)(v1 + 80);
  *(void *)(v1 + 72) = a1;
  *(void *)(v1 + 80) = 0LL;
  char v4 = *(_BYTE *)(v1 + 88);
  *(_BYTE *)(v1 + 88) = 64;
  outlined consume of VoiceCommandParityFlow.State(v3, v2, v4);
}

uint64_t OUTLINED_FUNCTION_6_35()
{
  return swift_task_dealloc(*(void *)(v0 + 256));
}

BOOL OUTLINED_FUNCTION_9_30(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_10_28()
{
  return swift_retain_n(v0, 2LL);
}

uint64_t OUTLINED_FUNCTION_13_25@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return swift_arrayDestroy(a6, 2LL, a1 + 8);
}

uint64_t OUTLINED_FUNCTION_14_31( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_17_30()
{
  return static os_log_type_t.error.getter();
}

uint64_t OUTLINED_FUNCTION_18_27(uint64_t a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

uint64_t OUTLINED_FUNCTION_19_24()
{
  return type metadata accessor for App(0LL);
}

uint64_t OUTLINED_FUNCTION_24_24()
{
  return static ExecuteResponse.complete()();
}

uint64_t OUTLINED_FUNCTION_28_15(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySi3key_SS5valuetG_SSs5NeverOTg50126_s18SiriLinkFlowPlugin28AutoShortcutDialogTemplatingC04makeF7Phrases08shortcutJ0SaySSGAF_tYaKFAFScGySi_0a3KitC00H6ResultVtSgGzv64XEfU_SSSi3key_SS5valuet_tcfu_33_9884fbf80a26ee2659924377586aa6b9Y20AL_SSAMtSSTf3nnnpk_nTf1cn_n( uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    unsigned int v3 = (void *)(a1 + 48);
    do
    {
      uint64_t v5 = *(v3 - 1);
      uint64_t v4 = *v3;
      unint64_t v7 = _swiftEmptyArrayStorage[2];
      unint64_t v6 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(*v3);
      if (v7 >= v6 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      _swiftEmptyArrayStorage[2] = v7 + 1;
      char v8 = &_swiftEmptyArrayStorage[2 * v7];
      v8[4] = v5;
      v8[5] = v4;
      v3 += 3;
      --v1;
    }

    while (v1);
  }

  return _swiftEmptyArrayStorage;
}

void AutoShortcutDialogTemplating.__allocating_init(deviceState:autoShortcutCATs:autoShortcutCATsSimple:linkActionPatterns:)()
{
}

void *AutoShortcutDialogTemplating.MAXSHORTCUTNUM.unsafeMutableAddressor()
{
  return &static AutoShortcutDialogTemplating.MAXSHORTCUTNUM;
}

uint64_t AutoShortcutDialogTemplating.linkActionPatterns.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 72, a1);
}

void AutoShortcutDialogTemplating.init(deviceState:autoShortcutCATs:autoShortcutCATsSimple:linkActionPatterns:)()
{
}

uint64_t AutoShortcutDialogTemplating.firstRun_preRFv2(app:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[6] = OUTLINED_FUNCTION_9_0(*(void *)(v5 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutDialogTemplating.firstRun_preRFv2(app:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t v12 = v10[3];
  uint64_t v11 = v10[4];
  OUTLINED_FUNCTION_80();
  OUTLINED_FUNCTION_24_15(v12, v11);
  uint64_t v13 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_7_30(v13);
  uint64_t v15 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for AutoShortcutCATs + v14 + 48));
  v10[7] = (uint64_t)v15;
  *uint64_t v15 = v10;
  v15[1] = AutoShortcutDialogTemplating.firstRun_preRFv2(app:);
  return OUTLINED_FUNCTION_65_13(v10[2], v10[6], a10);
}

uint64_t AutoShortcutDialogTemplating.firstRun_preRFv2(app:)()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  uint64_t v3 = swift_task_dealloc();
  OUTLINED_FUNCTION_60_10(v3, &demangling cache variable for type metadata for SpeakableString?);
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_107_2();
    return (*(uint64_t (**)(void))(v2 + 8))();
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_47_3();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AutoShortcutDialogTemplating.firstRunAsLabels(app:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[5] = OUTLINED_FUNCTION_9_0(*(void *)(v4 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutDialogTemplating.firstRunAsLabels(app:)()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  OUTLINED_FUNCTION_80();
  OUTLINED_FUNCTION_24_15(v2, v1);
  uint64_t v3 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_7_30(v3);
  uint64_t v5 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for AutoShortcutCATsSimple + v4 + 104));
  v0[6] = v5;
  uint64_t v6 = OUTLINED_FUNCTION_104_6(v5, (uint64_t)AutoShortcutDialogTemplating.firstRunAsLabels(app:));
  return OUTLINED_FUNCTION_64_10(v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_4_15();
  uint64_t v3 = *(void *)(v2 + 40);
  if (!v1) {
    *(void *)(v2 + 64) = v0;
  }
  outlined destroy of URL?(v3, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = dispatch thunk of LabelExecutionResult.subscript.getter();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_21_7(v1, v3, *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_273();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AutoShortcutDialogTemplating.confirmChangeEnablement(appName:isEnabling:)( uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 32) = a2;
  *(void *)(v4 + 40) = v3;
  *(_BYTE *)(v4 + 72) = a3;
  *(void *)(v4 + 24) = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 48) = OUTLINED_FUNCTION_9_0(*(void *)(v5 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutDialogTemplating.confirmChangeEnablement(appName:isEnabling:)()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  OUTLINED_FUNCTION_80();
  OUTLINED_FUNCTION_24_15(v2, v1);
  uint64_t v3 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_7_30(v3);
  uint64_t v5 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for AutoShortcutCATsSimple + v4 + 32));
  v0[7] = v5;
  uint64_t v6 = OUTLINED_FUNCTION_87_8(v5, (uint64_t)AutoShortcutDialogTemplating.confirmChangeEnablement(appName:isEnabling:));
  return OUTLINED_FUNCTION_65_13(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(void);
  OUTLINED_FUNCTION_39_7();
  outlined destroy of URL?(*(void *)(v1 + 48), &demangling cache variable for type metadata for SpeakableString?);
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_107_2();
    uint64_t v3 = OUTLINED_FUNCTION_84_7();
    return OUTLINED_FUNCTION_23_1(v3, v4);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  OUTLINED_FUNCTION_28_1();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = *(void **)(v1 + 64);
  uint64_t v4 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_35_27(v4, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_28_7();
  OUTLINED_FUNCTION_66();
  uint64_t v5 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_23_7(v5))
  {
    OUTLINED_FUNCTION_19_25();
    uint64_t v6 = (void *)OUTLINED_FUNCTION_28_16();
    OUTLINED_FUNCTION_18_28(5.7779e-34);
    uint64_t v7 = OUTLINED_FUNCTION_89_10();
    OUTLINED_FUNCTION_11_28(v7);
    *uint64_t v6 = v2;
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_16_35( &dword_0,  v8,  v9,  "#AutoShortcutDialogTemplating - error getting RFv2 confirmChangeEnablement result; %@");
    id v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_32_20(v10);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
    OUTLINED_FUNCTION_1_0(v0);

    OUTLINED_FUNCTION_4_8();
  }

  else
  {
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  OUTLINED_FUNCTION_47_3();
  return OUTLINED_FUNCTION_3_23(0LL, *(uint64_t (**)(void))(v1 + 8));
}

uint64_t AutoShortcutDialogTemplating.confirmChangeEnablement_preRFv2(appName:isEnabling:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v5 + 80) = a4;
  *(void *)(v5 + 40) = a3;
  *(void *)(v5 + 48) = v4;
  *(void *)(v5 + 24) = a1;
  *(void *)(v5 + 32) = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v5 + 56) = OUTLINED_FUNCTION_9_0(*(void *)(v6 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutDialogTemplating.confirmChangeEnablement_preRFv2(appName:isEnabling:)()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  OUTLINED_FUNCTION_80();
  OUTLINED_FUNCTION_24_15(v2, v1);
  uint64_t v3 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_7_30(v3);
  uint64_t v5 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for AutoShortcutCATs + v4 + 16));
  uint64_t v6 = OUTLINED_FUNCTION_74_14(v5);
  return OUTLINED_FUNCTION_44_11(v6, v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v0 = OUTLINED_FUNCTION_55_18();
  OUTLINED_FUNCTION_60_10(v0, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = OUTLINED_FUNCTION_44_6();
  OUTLINED_FUNCTION_77_13(v1, 0LL, v3, v2);
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  OUTLINED_FUNCTION_28_1();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = *(void **)(v1 + 72);
  uint64_t v4 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_35_27(v4, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_28_7();
  OUTLINED_FUNCTION_66();
  uint64_t v5 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_23_7(v5))
  {
    OUTLINED_FUNCTION_19_25();
    uint64_t v6 = (void *)OUTLINED_FUNCTION_28_16();
    OUTLINED_FUNCTION_18_28(5.7779e-34);
    uint64_t v7 = OUTLINED_FUNCTION_89_10();
    OUTLINED_FUNCTION_11_28(v7);
    *uint64_t v6 = v2;
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_16_35( &dword_0,  v8,  v9,  "#AutoShortcutDialogTemplating - error getting confirmChangeEnablement result; %@");
    id v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_32_20(v10);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
    OUTLINED_FUNCTION_1_0(v0);

    OUTLINED_FUNCTION_4_8();
  }

  else
  {
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v12 = OUTLINED_FUNCTION_44_6();
  OUTLINED_FUNCTION_77_13(v11, 1LL, v13, v12);
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t AutoShortcutDialogTemplating.makeConfirmChangeEnablementPattern(appName:isEnabling:)( uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 32) = a2;
  *(void *)(v4 + 40) = v3;
  *(_BYTE *)(v4 + 72) = a3;
  *(void *)(v4 + 24) = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)AutoShortcutDialogTemplating.makeConfirmChangeEnablementPattern(appName:isEnabling:));
}

uint64_t AutoShortcutDialogTemplating.makeConfirmChangeEnablementPattern(appName:isEnabling:)()
{
  uint64_t v2 = v1[4];
  uint64_t v3 = v1[3];
  uint64_t v4 = OUTLINED_FUNCTION_84_13(v1[5]);
  v1[6] = v4;
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(v0 + 48));
  v1[7] = v5;
  *uint64_t v5 = v1;
  v5[1] = AutoShortcutDialogTemplating.makeConfirmChangeEnablementPattern(appName:isEnabling:);
  uint64_t v6 = OUTLINED_FUNCTION_86_5();
  return OUTLINED_FUNCTION_52_16(v6, v7, v8, v9, v10, v11, v12);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_39_7();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_107_2();
    uint64_t v2 = OUTLINED_FUNCTION_84_7();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  OUTLINED_FUNCTION_28_1();
  OUTLINED_FUNCTION_47_3();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = *(void **)(v1 + 64);
  uint64_t v4 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_35_27(v4, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_28_7();
  OUTLINED_FUNCTION_66();
  uint64_t v5 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_23_7(v5))
  {
    OUTLINED_FUNCTION_19_25();
    uint64_t v6 = (void *)OUTLINED_FUNCTION_28_16();
    OUTLINED_FUNCTION_18_28(5.7779e-34);
    uint64_t v7 = OUTLINED_FUNCTION_89_10();
    OUTLINED_FUNCTION_11_28(v7);
    *uint64_t v6 = v2;
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_16_35( &dword_0,  v8,  v9,  "#AutoShortcutDialogTemplating - error making confirmChangeEnablementPattern result; %@");
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_32_20(v10);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
    OUTLINED_FUNCTION_1_0(v0);

    OUTLINED_FUNCTION_4_8();
  }

  else
  {
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  return OUTLINED_FUNCTION_3_23(0LL, *(uint64_t (**)(void))(v1 + 8));
}

uint64_t AutoShortcutDialogTemplating.confirmChangeEnablementDeclined(appName:isEnabled:)( uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 32) = a2;
  *(void *)(v4 + 40) = v3;
  *(_BYTE *)(v4 + 72) = a3;
  *(void *)(v4 + 24) = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 48) = OUTLINED_FUNCTION_9_0(*(void *)(v5 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutDialogTemplating.confirmChangeEnablementDeclined(appName:isEnabled:)()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  OUTLINED_FUNCTION_80();
  OUTLINED_FUNCTION_24_15(v2, v1);
  uint64_t v3 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_7_30(v3);
  uint64_t v5 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for AutoShortcutCATsSimple + v4 + 48));
  v0[7] = v5;
  uint64_t v6 = OUTLINED_FUNCTION_87_8( v5,  (uint64_t)AutoShortcutDialogTemplating.confirmChangeEnablementDeclined(appName:isEnabled:));
  return OUTLINED_FUNCTION_65_13(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(void);
  OUTLINED_FUNCTION_39_7();
  outlined destroy of URL?(*(void *)(v1 + 48), &demangling cache variable for type metadata for SpeakableString?);
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_107_2();
    uint64_t v3 = OUTLINED_FUNCTION_84_7();
    return OUTLINED_FUNCTION_23_1(v3, v4);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  OUTLINED_FUNCTION_28_1();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = *(void **)(v1 + 64);
  uint64_t v4 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_35_27(v4, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_28_7();
  OUTLINED_FUNCTION_66();
  uint64_t v5 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_23_7(v5))
  {
    OUTLINED_FUNCTION_19_25();
    uint64_t v6 = (void *)OUTLINED_FUNCTION_28_16();
    OUTLINED_FUNCTION_18_28(5.7779e-34);
    uint64_t v7 = OUTLINED_FUNCTION_89_10();
    OUTLINED_FUNCTION_11_28(v7);
    *uint64_t v6 = v2;
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_16_35( &dword_0,  v8,  v9,  "#AutoShortcutDialogTemplating - error getting confirmChangeEnablementDeclined result; %@");
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_32_20(v10);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
    OUTLINED_FUNCTION_1_0(v0);

    OUTLINED_FUNCTION_4_8();
  }

  else
  {
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  OUTLINED_FUNCTION_47_3();
  return OUTLINED_FUNCTION_3_23(0LL, *(uint64_t (**)(void))(v1 + 8));
}

uint64_t AutoShortcutDialogTemplating.confirmChangeEnablementDeclined_preRFv2(appName:isEnabled:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v5 + 80) = a4;
  *(void *)(v5 + 40) = a3;
  *(void *)(v5 + 48) = v4;
  *(void *)(v5 + 24) = a1;
  *(void *)(v5 + 32) = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v5 + 56) = OUTLINED_FUNCTION_9_0(*(void *)(v6 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutDialogTemplating.confirmChangeEnablementDeclined_preRFv2(appName:isEnabled:)()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  OUTLINED_FUNCTION_80();
  OUTLINED_FUNCTION_24_15(v2, v1);
  uint64_t v3 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_7_30(v3);
  uint64_t v5 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for AutoShortcutCATs + v4 + 24));
  uint64_t v6 = OUTLINED_FUNCTION_74_14(v5);
  return OUTLINED_FUNCTION_44_11(v6, v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v0 = OUTLINED_FUNCTION_55_18();
  OUTLINED_FUNCTION_60_10(v0, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  OUTLINED_FUNCTION_28_1();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = *(void **)(v1 + 72);
  uint64_t v4 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_35_27(v4, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_28_7();
  OUTLINED_FUNCTION_66();
  uint64_t v5 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_23_7(v5))
  {
    OUTLINED_FUNCTION_19_25();
    uint64_t v6 = (void *)OUTLINED_FUNCTION_28_16();
    OUTLINED_FUNCTION_18_28(5.7779e-34);
    uint64_t v7 = OUTLINED_FUNCTION_89_10();
    OUTLINED_FUNCTION_11_28(v7);
    *uint64_t v6 = v2;
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_16_35( &dword_0,  v8,  v9,  "#AutoShortcutDialogTemplating - error getting confirmChangeEnablementDeclined result; %@");
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_32_20(v10);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
    OUTLINED_FUNCTION_1_0(v0);

    OUTLINED_FUNCTION_4_8();
  }

  else
  {
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v12 = OUTLINED_FUNCTION_44_6();
  OUTLINED_FUNCTION_77_13(v11, 1LL, v13, v12);
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t AutoShortcutDialogTemplating.appEnabled(appName:wasAlreadyEnabled:)(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 72) = a3;
  *(void *)(v4 + 16) = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 40) = OUTLINED_FUNCTION_9_0(*(void *)(v5 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutDialogTemplating.appEnabled(appName:wasAlreadyEnabled:)()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  v0[6] = OUTLINED_FUNCTION_19_22((void *)(v0[4] + 16LL));
  OUTLINED_FUNCTION_9_4();
  OUTLINED_FUNCTION_24_15(v2, v1);
  uint64_t v3 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_25_26(v3);
  uint64_t v5 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for AutoShortcutCATsSimple + v4 + 16));
  v0[7] = v5;
  uint64_t v6 = OUTLINED_FUNCTION_72_9(v5, (uint64_t)AutoShortcutDialogTemplating.appEnabled(appName:wasAlreadyEnabled:));
  return OUTLINED_FUNCTION_24_1(v6, v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v3 = OUTLINED_FUNCTION_44_13();
  OUTLINED_FUNCTION_60_10(v3, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_15_2(v1, *(uint64_t (**)(void))(v2 + 8));
  }

uint64_t AutoShortcutDialogTemplating.appEnabled_preRFv2(appName:wasAlreadyEnabled:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v5 + 80) = a4;
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = v4;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v5 + 48) = OUTLINED_FUNCTION_9_0(*(void *)(v6 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutDialogTemplating.appEnabled_preRFv2(appName:wasAlreadyEnabled:)()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  v0[7] = OUTLINED_FUNCTION_19_22((void *)(v0[5] + 16LL));
  OUTLINED_FUNCTION_9_4();
  OUTLINED_FUNCTION_24_15(v2, v1);
  uint64_t v3 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_25_26(v3);
  uint64_t v5 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for AutoShortcutCATs + v4 + 8));
  uint64_t v6 = OUTLINED_FUNCTION_57_17(v5);
  return OUTLINED_FUNCTION_5_23(v6, v7, v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_42_15();
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    swift_task_dealloc();
    return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v2 + 8));
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_47_3();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AutoShortcutDialogTemplating.appDisabled(appName:wasAlreadyEnabled:)( uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 72) = a3;
  *(void *)(v4 + 16) = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 40) = OUTLINED_FUNCTION_9_0(*(void *)(v5 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutDialogTemplating.appDisabled(appName:wasAlreadyEnabled:)()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  v0[6] = OUTLINED_FUNCTION_19_22((void *)(v0[4] + 16LL));
  OUTLINED_FUNCTION_9_4();
  OUTLINED_FUNCTION_24_15(v2, v1);
  uint64_t v3 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_25_26(v3);
  uint64_t v5 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(v4 + class metadata base offset for AutoShortcutCATsSimple));
  v0[7] = v5;
  uint64_t v6 = OUTLINED_FUNCTION_72_9(v5, (uint64_t)AutoShortcutDialogTemplating.appDisabled(appName:wasAlreadyEnabled:));
  return OUTLINED_FUNCTION_24_1(v6, v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v3 = OUTLINED_FUNCTION_44_13();
  OUTLINED_FUNCTION_60_10(v3, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_15_2(v1, *(uint64_t (**)(void))(v2 + 8));
  }

uint64_t AutoShortcutDialogTemplating.appDisabled_preRFv2(appName:wasAlreadyEnabled:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v5 + 80) = a4;
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = v4;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v5 + 48) = OUTLINED_FUNCTION_9_0(*(void *)(v6 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutDialogTemplating.appDisabled_preRFv2(appName:wasAlreadyEnabled:)()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  v0[7] = OUTLINED_FUNCTION_19_22((void *)(v0[5] + 16LL));
  OUTLINED_FUNCTION_9_4();
  OUTLINED_FUNCTION_24_15(v2, v1);
  uint64_t v3 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_25_26(v3);
  uint64_t v5 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(v4 + class metadata base offset for AutoShortcutCATs));
  uint64_t v6 = OUTLINED_FUNCTION_57_17(v5);
  return OUTLINED_FUNCTION_5_23(v6, v7, v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_42_15();
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    swift_task_dealloc();
    return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v2 + 8));
  }

uint64_t AutoShortcutDialogTemplating.openInShortcuts()()
{
  *(void *)(v1 + 16) = v0;
  return OUTLINED_FUNCTION_6_2((uint64_t)AutoShortcutDialogTemplating.openInShortcuts());
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v4)(void);
  OUTLINED_FUNCTION_106_3();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for AutoShortcutCATsSimple + v1 + 144));
  *(void *)(v0 + 24) = v2;
  *uint64_t v2 = v0;
  v2[1] = AutoShortcutDialogTemplating.openInShortcuts();
  return OUTLINED_FUNCTION_27_2(v4);
}

uint64_t AutoShortcutDialogTemplating.openInShortcuts_preRFv2()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)AutoShortcutDialogTemplating.openInShortcuts_preRFv2());
}

uint64_t AutoShortcutDialogTemplating.openInShortcuts_preRFv2()()
{
  uint64_t v2 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for AutoShortcutCATs + v1 + 72));
  *(void *)(v0 + 32) = v2;
  uint64_t v3 = OUTLINED_FUNCTION_125_2(v2);
  return OUTLINED_FUNCTION_8_4(v3, v4);
}

uint64_t AutoShortcutDialogTemplating.makeAutoShortcutAppEnabledPattern(appName:wasAlreadyEnabled:)( uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 64) = a3;
  *(void *)(v4 + 16) = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)AutoShortcutDialogTemplating.makeAutoShortcutAppEnabledPattern(appName:wasAlreadyEnabled:));
}

uint64_t AutoShortcutDialogTemplating.makeAutoShortcutAppEnabledPattern(appName:wasAlreadyEnabled:)()
{
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[2];
  uint64_t v4 = OUTLINED_FUNCTION_84_13(v1[4]);
  v1[5] = v4;
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(v0 + 32));
  v1[6] = v5;
  *uint64_t v5 = v1;
  v5[1] = AutoShortcutDialogTemplating.makeAutoShortcutAppEnabledPattern(appName:wasAlreadyEnabled:);
  uint64_t v6 = OUTLINED_FUNCTION_86_5();
  return OUTLINED_FUNCTION_52_16(v6, v7, v8, v9, v10, v11, v12);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_4_15();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_task_dealloc();
    uint64_t v2 = OUTLINED_FUNCTION_84_7();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_273();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AutoShortcutDialogTemplating.ButtonLabels.button0.getter(uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_50_3();
}

uint64_t AutoShortcutDialogTemplating.ButtonLabels.button1.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OUTLINED_FUNCTION_50_3();
}

void *AutoShortcutDialogTemplating.ButtonLabels.default.unsafeMutableAddressor()
{
  return &static AutoShortcutDialogTemplating.ButtonLabels.default;
}

uint64_t static AutoShortcutDialogTemplating.ButtonLabels.default.getter()
{
  return 0LL;
}

uint64_t AutoShortcutDialogTemplating.enableAndCancel()()
{
  uint64_t v1 = OUTLINED_FUNCTION_110_7();
  v0[3] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[4] = v2;
  v0[5] = OUTLINED_FUNCTION_9_0(v2);
  uint64_t v3 = OUTLINED_FUNCTION_108_1();
  v0[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v0[7] = v4;
  v0[8] = OUTLINED_FUNCTION_9_0(v4);
  uint64_t v5 = OUTLINED_FUNCTION_44_6();
  v0[9] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v0[10] = v6;
  v0[11] = OUTLINED_FUNCTION_9_0(v6);
  uint64_t v7 = OUTLINED_FUNCTION_75_0();
  v0[12] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v0[13] = v8;
  v0[14] = OUTLINED_FUNCTION_9_0(v8);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  *(_BYTE *)(v0 + 152) = 1;
  uint64_t v1 = dispatch thunk of LabelExecutionResult.subscript.getter(v0 + 152);
  uint64_t v3 = v2;
  *(_BYTE *)(v0 + 153) = 0;
  uint64_t v4 = dispatch thunk of LabelExecutionResult.subscript.getter(v0 + 153);
  uint64_t v6 = v5;
  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_82_7(*(void *)(v0 + 112));
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  return OUTLINED_FUNCTION_43_20(v1, v3, v4, v6, *(uint64_t (**)(void))(v0 + 8));
}

{
  OUTLINED_FUNCTION_56_22();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AutoShortcutDialogTemplating.enableAndCancel()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  if ((v10 & 1) != 0)
  {
    OUTLINED_FUNCTION_106_3();
    uint64_t v14 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for AutoShortcutCATsSimple + v13 + 88));
    *(void *)(v11 + 120) = v14;
    *uint64_t v14 = v11;
    v14[1] = AutoShortcutDialogTemplating.enableAndCancel();
    return OUTLINED_FUNCTION_3_32(a10);
  }

  else
  {
    OUTLINED_FUNCTION_39_3();
    uint64_t v17 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for AutoShortcutCATs + v16 + 40));
    *(void *)(v11 + 136) = v17;
    uint64_t v18 = OUTLINED_FUNCTION_124_4(v17);
    return OUTLINED_FUNCTION_64_10(v18, v19);
  }

uint64_t AutoShortcutDialogTemplating.enableAndCancel()(uint64_t a1)
{
  if (v1)
  {
    OUTLINED_FUNCTION_85_10();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v2 + 8));
  }

  else
  {
    *(void *)(v3 + 128) = a1;
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

{
  void *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, unint64_t, uint64_t);
  uint64_t v2 = *(void *)(TemplatingResult.sections.getter(a1) + 16);
  swift_bridgeObjectRelease();
  if (v2 != 2)
  {
    OUTLINED_FUNCTION_14_5(v1[10]);
    OUTLINED_FUNCTION_123_7();
    goto LABEL_6;
  }

  unint64_t result = TemplatingResult.sections.getter(v1[11]);
  if (*(void *)(result + 16))
  {
    uint64_t v5 = v1[7];
    uint64_t v4 = v1[8];
    uint64_t v7 = v1[5];
    uint64_t v6 = v1[6];
    uint64_t v8 = v1[3];
    uint64_t v9 = v1[4];
    char v10 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v26 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
    v26(v4, result + v10, v6);
    uint64_t v11 = OUTLINED_FUNCTION_20();
    TemplatingSection.content.getter(v11);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v12(v4, v6);
    OUTLINED_FUNCTION_112_4();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    uint64_t v14 = v13(v7, v8);
    unint64_t result = TemplatingResult.sections.getter(v14);
    if (*(void *)(result + 16) >= 2uLL)
    {
      uint64_t v25 = v1[11];
      uint64_t v15 = v1[10];
      unint64_t v24 = v1[9];
      uint64_t v16 = v1[8];
      uint64_t v18 = v1[5];
      uint64_t v17 = v1[6];
      unint64_t v19 = v1[3];
      v26(v16, result + v10 + *(void *)(v1[7] + 72LL), v17);
      uint64_t v20 = OUTLINED_FUNCTION_20();
      TemplatingSection.content.getter(v20);
      uint64_t v21 = ((uint64_t (*)(uint64_t, uint64_t))v12)(v16, v17);
      TemplatingText.text.getter(v21);
      v13(v18, v19);
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v25, v24);
LABEL_6:
      OUTLINED_FUNCTION_82_7(v1[14]);
      OUTLINED_FUNCTION_33_0();
      OUTLINED_FUNCTION_31();
      OUTLINED_FUNCTION_29_0();
      uint64_t v22 = OUTLINED_FUNCTION_81_14();
      return v23(v22);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t AutoShortcutDialogTemplating.disableAndCancel()()
{
  uint64_t v1 = OUTLINED_FUNCTION_110_7();
  v0[3] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[4] = v2;
  v0[5] = OUTLINED_FUNCTION_9_0(v2);
  uint64_t v3 = OUTLINED_FUNCTION_108_1();
  v0[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v0[7] = v4;
  v0[8] = OUTLINED_FUNCTION_9_0(v4);
  uint64_t v5 = OUTLINED_FUNCTION_44_6();
  v0[9] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v0[10] = v6;
  v0[11] = OUTLINED_FUNCTION_9_0(v6);
  uint64_t v7 = OUTLINED_FUNCTION_75_0();
  v0[12] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v0[13] = v8;
  v0[14] = OUTLINED_FUNCTION_9_0(v8);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  OUTLINED_FUNCTION_30_2();
  uint64_t v3 = *v1;
  *(void *)(v2 + 128) = v4;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_85_10();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v3 + 8));
  }

  else
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v23;
  uint64_t v1 = [*(id *)(v0 + 128) dialog];
  type metadata accessor for DialogElement();
  uint64_t v2 = OUTLINED_FUNCTION_109_4((uint64_t)v1);

  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0) {
      uint64_t v23 = v2;
    }
    else {
      uint64_t v23 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    OUTLINED_FUNCTION_80();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v23);
    OUTLINED_FUNCTION_14();
  }

  else
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
  }

  OUTLINED_FUNCTION_14();
  uint64_t v4 = *(void **)(v0 + 128);
  if (v3 == 2)
  {
    uint64_t v5 = [v4 dialog];
    uint64_t v6 = OUTLINED_FUNCTION_109_4((uint64_t)v5);

    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, (v6 & 0xC000000000000001LL) == 0);
    if ((v6 & 0xC000000000000001LL) != 0) {
      uint64_t v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v6);
    }
    else {
      uint64_t v7 = *(id *)(v6 + 32);
    }
    uint64_t v8 = v7;
    uint64_t v9 = *(void **)(v0 + 128);
    OUTLINED_FUNCTION_14();
    char v10 = [v8 fullPrint];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = [v9 dialog];
    uint64_t v12 = OUTLINED_FUNCTION_109_4((uint64_t)v11);

    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1LL, (v12 & 0xC000000000000001LL) == 0);
    if ((v12 & 0xC000000000000001LL) != 0) {
      uint64_t v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1LL, v12);
    }
    else {
      uint64_t v13 = *(id *)(v12 + 40);
    }
    uint64_t v14 = v13;
    uint64_t v15 = *(void **)(v0 + 128);
    OUTLINED_FUNCTION_20();
    uint64_t v16 = [v14 fullPrint];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }

  else
  {

    OUTLINED_FUNCTION_123_7();
  }

  OUTLINED_FUNCTION_82_7(*(void *)(v0 + 112));
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  uint64_t v17 = OUTLINED_FUNCTION_81_14();
  return OUTLINED_FUNCTION_43_20(v17, v18, v19, v20, v21);
}

{
  OUTLINED_FUNCTION_56_22();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutDialogTemplating.disableAndCancel()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  if ((v10 & 1) != 0)
  {
    OUTLINED_FUNCTION_106_3();
    uint64_t v14 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for AutoShortcutCATsSimple + v13 + 64));
    *(void *)(v11 + 120) = v14;
    *uint64_t v14 = v11;
    v14[1] = AutoShortcutDialogTemplating.disableAndCancel();
    return OUTLINED_FUNCTION_3_32(a10);
  }

  else
  {
    OUTLINED_FUNCTION_39_3();
    uint64_t v17 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for AutoShortcutCATs + v16 + 32));
    *(void *)(v11 + 136) = v17;
    uint64_t v18 = OUTLINED_FUNCTION_124_4(v17);
    return OUTLINED_FUNCTION_64_10(v18, v19);
  }

uint64_t AutoShortcutDialogTemplating.moreShortcuts(numberOfShortcuts:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for TemplatingText(0LL);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = OUTLINED_FUNCTION_9_0(v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingSection?);
  v2[7] = OUTLINED_FUNCTION_9_0(*(void *)(v5 - 8));
  uint64_t v6 = OUTLINED_FUNCTION_44_6();
  v2[8] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[9] = v7;
  v2[10] = OUTLINED_FUNCTION_9_0(v7);
  uint64_t v8 = OUTLINED_FUNCTION_75_0();
  v2[11] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[12] = v9;
  v2[13] = OUTLINED_FUNCTION_9_0(v9);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_223(*(void *)(v3 + 112), v5);
  if (v1)
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v2 + 8));
  }

  else
  {
    *(void *)(v3 + 120) = a1;
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v2 = dispatch thunk of LabelExecutionResult.subscript.getter(a1);
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_12_5();
  swift_task_dealloc();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t EnumTagSinglePayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v2 = *(void *)(v1 + 56);
  uint64_t v3 = TemplatingResult.sections.getter(a1);
  specialized Collection.first.getter(v3, v2);
  OUTLINED_FUNCTION_20();
  uint64_t v4 = OUTLINED_FUNCTION_108_1();
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v2, 1LL, v4);
  uint64_t v6 = *(void *)(v1 + 56);
  if ((_DWORD)EnumTagSinglePayload == 1)
  {
    OUTLINED_FUNCTION_66_7();
    outlined destroy of URL?(v6, &demangling cache variable for type metadata for TemplatingSection?);
  }

  else
  {
    TemplatingSection.content.getter(EnumTagSinglePayload);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v6, v4);
    OUTLINED_FUNCTION_112_4();
    OUTLINED_FUNCTION_94_6();
    OUTLINED_FUNCTION_66_7();
  }

  swift_task_dealloc();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  uint64_t v7 = OUTLINED_FUNCTION_50_3();
  return OUTLINED_FUNCTION_21_7(v7, v8, v9);
}

uint64_t AutoShortcutDialogTemplating.moreShortcuts(numberOfShortcuts:)()
{
  uint64_t v2 = OUTLINED_FUNCTION_29_14();
  uint64_t result = dispatch thunk of DeviceState.isPhone.getter(v2, v3);
  if ((result & 1) == 0)
  {
    uint64_t v5 = OUTLINED_FUNCTION_29_14();
    uint64_t result = dispatch thunk of DeviceState.isPad.getter(v5);
    if ((result & 1) == 0) {
      goto LABEL_7;
    }
  }

  uint64_t v6 = *(void *)(v1 + 16);
  BOOL v7 = __OFSUB__(v6, 3LL);
  uint64_t v8 = v6 - 3;
  if (v7)
  {
    __break(1u);
    return result;
  }

  if (v8 < 1)
  {
LABEL_7:
    swift_task_dealloc();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    return (*(uint64_t (**)(void, void))(v1 + 8))(0LL, 0LL);
  }

  double v9 = (double)v8;
  OUTLINED_FUNCTION_47_6(result, enum case for RFFeatureFlags.ResponseFramework._SMART(_:));
  RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_48_18();
  if ((v0 & 1) != 0)
  {
    OUTLINED_FUNCTION_106_3();
    uint64_t v11 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for AutoShortcutCATsSimple + v10 + 136));
    *(void *)(v1 + 112) = v11;
    void *v11 = v1;
    v11[1] = AutoShortcutDialogTemplating.moreShortcuts(numberOfShortcuts:);
    return v14(*(void *)&v9, 0LL);
  }

  else
  {
    OUTLINED_FUNCTION_39_3();
    uint64_t v13 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for AutoShortcutCATs + v12 + 64));
    *(void *)(v1 + 128) = v13;
    *uint64_t v13 = v1;
    v13[1] = AutoShortcutDialogTemplating.moreShortcuts(numberOfShortcuts:);
    return ((uint64_t (*)(void, void, void))v14)(*(void *)(v1 + 80), *(void *)&v9, 0LL);
  }

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  OUTLINED_FUNCTION_50_0();
  *uint64_t v2 = *v1;
  *(void *)(v3 + 136) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AutoShortcutDialogTemplating.makeAutoShortcutFirstRunPattern(app:)(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for CATOption(0LL);
  v2[4] = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutDialogTemplating.makeAutoShortcutFirstRunPattern(app:)()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = type metadata accessor for RunLinkActionCATPatternsExecutor(0LL);
  static CATOption.defaultMode.getter(v4);
  uint64_t v5 = (void *)CATWrapper.__allocating_init(options:globals:)(v1, 0LL);
  v0[5] = v5;
  uint64_t v6 = swift_task_alloc(32LL);
  v0[6] = v6;
  *(void *)(v6 + 16) = v3;
  *(void *)(v6 + 24) = v2;
  BOOL v7 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunLinkActionCATPatternsExecutor
                                                  + *v5
                                                  + 32));
  v0[7] = v7;
  *BOOL v7 = v0;
  v7[1] = AutoShortcutDialogTemplating.makeAutoShortcutFirstRunPattern(app:);
  return v9(0LL, partial apply for closure #1 in AutoShortcutDialogTemplating.makeAutoShortcutFirstRunPattern(app:), v6);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_39_7();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_release();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_15_0();
    uint64_t v2 = OUTLINED_FUNCTION_84_7();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

{
  uint64_t v0;
  swift_release();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t closure #1 in AutoShortcutDialogTemplating.makeConfirmChangeEnablementPattern(appName:isEnabling:)( uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  OUTLINED_FUNCTION_80();
  uint64_t v5 = OUTLINED_FUNCTION_50_3();
  OUTLINED_FUNCTION_24_15(v5, v6);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  __swift_storeEnumTagSinglePayload((uint64_t)v4, 0LL, 1LL, v7);
  return outlined assign with take of SpeakableString?((uint64_t)v4, a1);
}

uint64_t AutoShortcutDialogTemplating.firstRun(app:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[5] = OUTLINED_FUNCTION_9_0(*(void *)(v4 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutDialogTemplating.firstRun(app:)()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  OUTLINED_FUNCTION_80();
  OUTLINED_FUNCTION_24_15(v2, v1);
  uint64_t v3 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_7_30(v3);
  uint64_t v5 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for AutoShortcutCATsSimple + v4 + 96));
  v0[6] = v5;
  uint64_t v6 = OUTLINED_FUNCTION_104_6(v5, (uint64_t)AutoShortcutDialogTemplating.firstRun(app:));
  return OUTLINED_FUNCTION_64_10(v6, v7);
}

uint64_t AutoShortcutDialogTemplating.firstRun(app:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 56) = v1;
  uint64_t v5 = swift_task_dealloc();
  OUTLINED_FUNCTION_60_10(v5, &demangling cache variable for type metadata for SpeakableString?);
  if (v1)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_23_1(a1, *(uint64_t (**)(void))(v4 + 8));
  }

uint64_t AutoShortcutDialogTemplating.makeAutoShortcutFirstRunHomePodDialog(app:firstPhrase:secondPhrase:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v7[9] = OUTLINED_FUNCTION_20_10(v8);
  v7[10] = OUTLINED_FUNCTION_11_0();
  v7[11] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutDialogTemplating.makeAutoShortcutFirstRunHomePodDialog(app:firstPhrase:secondPhrase:)()
{
  uint64_t v1 = v0[7];
  uint64_t v10 = (uint64_t (*)(void, void, void))v0[6];
  uint64_t v3 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  swift_bridgeObjectRetain(v5);
  OUTLINED_FUNCTION_24_15(v4, v5);
  uint64_t v6 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_71_11(v6);
  OUTLINED_FUNCTION_24_15(v3, v2);
  OUTLINED_FUNCTION_92_4();
  OUTLINED_FUNCTION_24_15((uint64_t)v10, v1);
  OUTLINED_FUNCTION_118_6();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for AutoShortcutCATsSimple + v7 + 112));
  v0[12] = v8;
  *uint64_t v8 = v0;
  v8[1] = AutoShortcutDialogTemplating.makeAutoShortcutFirstRunHomePodDialog(app:firstPhrase:secondPhrase:);
  return v10(v0[11], v0[10], v0[9]);
}

{
  uint64_t v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AutoShortcutDialogTemplating.makeAutoShortcutFirstRunHomePodDialog(app:firstPhrase:secondPhrase:)( uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 104) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 88);
  OUTLINED_FUNCTION_115_3(*(void *)(v4 + 72));
  OUTLINED_FUNCTION_115_3(v5);
  OUTLINED_FUNCTION_115_3(v6);
  if (v1)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_15_2(a1, *(uint64_t (**)(void))(v4 + 8));
  }

uint64_t AutoShortcutDialogTemplating.makeAutoShortcutFirstRunHomePodDialog_preRFv2(app:firstPhrase:secondPhrase:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[8] = a7;
  v8[9] = v7;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v8[10] = OUTLINED_FUNCTION_20_10(v9);
  v8[11] = OUTLINED_FUNCTION_11_0();
  v8[12] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutDialogTemplating.makeAutoShortcutFirstRunHomePodDialog_preRFv2(app:firstPhrase:secondPhrase:)()
{
  uint64_t v1 = v0[8];
  uint64_t v10 = (uint64_t (*)(void, void, void, void))v0[7];
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  swift_bridgeObjectRetain(v5);
  OUTLINED_FUNCTION_24_15(v4, v5);
  uint64_t v6 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_71_11(v6);
  OUTLINED_FUNCTION_24_15(v3, v2);
  OUTLINED_FUNCTION_92_4();
  OUTLINED_FUNCTION_24_15((uint64_t)v10, v1);
  OUTLINED_FUNCTION_118_6();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for AutoShortcutCATs + v7 + 56));
  v0[13] = v8;
  *uint64_t v8 = v0;
  v8[1] = AutoShortcutDialogTemplating.makeAutoShortcutFirstRunHomePodDialog_preRFv2(app:firstPhrase:secondPhrase:);
  return v10(v0[2], v0[12], v0[11], v0[10]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v2 = *(void *)(*v1 + 96);
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v5 = *v1;
  *(void *)(v5 + 112) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_99_0(v4);
  OUTLINED_FUNCTION_99_0(v3);
  OUTLINED_FUNCTION_99_0(v2);
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v5 + 8));
  }

{
  uint64_t v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:)(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:));
}

uint64_t AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, TemplatingResult)?);
  uint64_t v2 = swift_task_alloc(32LL);
  *(void *)(v0 + 40) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(void *)(v0 + 48) = v4;
  *uint64_t v4 = v0;
  v4[1] = AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:);
  return withTaskGroup<A, B>(of:returning:isolation:body:)( v0 + 16,  v1,  v3,  0LL,  0LL,  &async function pointer to partial apply for closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:),  v2,  v1);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 48));
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[13] = a3;
  v4[14] = a4;
  v4[11] = a1;
  v4[12] = a2;
  uint64_t v5 = type metadata accessor for TemplatingText(0LL);
  v4[15] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[16] = v6;
  v4[17] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingSection?);
  v4[18] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, TemplatingResult)?);
  v4[19] = v8;
  v4[20] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for TemplatingResult(0LL);
  v4[21] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[22] = v10;
  v4[23] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, TemplatingResult)??);
  v4[24] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskGroup<(Int, TemplatingResult)?>.Iterator);
  v4[25] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v4[26] = v13;
  v4[27] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v14 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?)
                               - 8)
                   + 64LL)
       + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[28] = swift_task_alloc(v14);
  v4[29] = swift_task_alloc(v14);
  return swift_task_switch(closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:), 0LL, 0LL);
}

uint64_t closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:)()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v32 = *(void *)(v1 + 16);
  if (v32)
  {
    uint64_t v31 = type metadata accessor for TaskPriority(0LL);
    swift_bridgeObjectRetain(v1);
    uint64_t v2 = 0LL;
    uint64_t v3 = (void *)(v1 + 40);
    do
    {
      uint64_t v5 = *(void *)(v0 + 224);
      uint64_t v4 = *(void *)(v0 + 232);
      uint64_t v6 = *(void *)(v0 + 112);
      uint64_t v33 = v3;
      uint64_t v7 = *(v3 - 1);
      uint64_t v8 = *v3;
      __swift_storeEnumTagSinglePayload(v4, 1LL, 1LL, v31);
      uint64_t v9 = (void *)OUTLINED_FUNCTION_19((uint64_t)&unk_1F9EA0, 64LL);
      v9[2] = 0LL;
      uint64_t v10 = v9 + 2;
      v9[3] = 0LL;
      v9[4] = v6;
      v9[5] = v7;
      v9[6] = v8;
      v9[7] = v2;
      outlined init with copy of TaskPriority?(v4, v5);
      LODWORD(OUTLINED_FUNCTION_223(*(void *)(v3 + 120), v5) = __swift_getEnumTagSinglePayload(v5, 1LL, v31);
      swift_bridgeObjectRetain(v8);
      uint64_t v11 = swift_retain(v6);
      uint64_t v12 = *(void *)(v0 + 224);
      if ((_DWORD)v5 == 1)
      {
        outlined destroy of URL?(*(void *)(v0 + 224), &demangling cache variable for type metadata for TaskPriority?);
        uint64_t v13 = 0LL;
      }

      else
      {
        unsigned __int8 v14 = TaskPriority.rawValue.getter(v11);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8LL))(v12, v31);
        uint64_t v13 = v14;
      }

      uint64_t v15 = *v10;
      if (*v10)
      {
        uint64_t v16 = v9[3];
        uint64_t ObjectType = swift_getObjectType(*v10);
        swift_unknownObjectRetain(v15);
        uint64_t v18 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
        uint64_t v20 = v19;
        swift_unknownObjectRelease(v15);
      }

      else
      {
        uint64_t v18 = 0LL;
        uint64_t v20 = 0LL;
      }

      uint64_t v21 = **(void **)(v0 + 96);
      uint64_t v22 = OUTLINED_FUNCTION_19((uint64_t)&unk_1F9EC8, 32LL);
      *(void *)(v22 + 16) = &async function pointer to partial apply for closure #1 in closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:);
      *(void *)(v22 + 24) = v9;
      uint64_t v23 = v20 | v18;
      if (v20 | v18)
      {
        uint64_t v23 = v0 + 16;
        *(void *)(v0 + 16) = 0LL;
        *(void *)(v0 + 24) = 0LL;
        *(void *)(v0 + 32) = v18;
        *(void *)(v0 + 40) = v20;
      }

      ++v2;
      uint64_t v24 = *(void *)(v0 + 232);
      uint64_t v25 = *(void *)(v0 + 152);
      *(void *)(v0 + 48) = 1LL;
      *(void *)(v0 + 56) = v23;
      *(void *)(v0 + 64) = v21;
      swift_task_create( v13 | 0x3100,  v0 + 48,  v25,  &_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSi_11SiriKitFlow16TemplatingResultVtSg_Tg5TATu,  v22);
      swift_release();
      outlined destroy of URL?(v24, &demangling cache variable for type metadata for TaskPriority?);
      uint64_t v3 = v33 + 2;
    }

    while (v32 != v2);
    swift_bridgeObjectRelease();
  }

  uint64_t v26 = *(void *)(v0 + 152);
  uint64_t v27 = *(void **)(v0 + 96);
  uint64_t v28 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for Int,  &type metadata for String,  &protocol witness table for Int);
  TaskGroup.makeAsyncIterator()(*v27, v26);
  *(void *)(v0 + 240) = v28;
  uint64_t v29 = (void *)swift_task_alloc(async function pointer to TaskGroup.Iterator.next(isolation:)[1]);
  *(void *)(v0 + 248) = v29;
  *uint64_t v29 = v0;
  v29[1] = closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:);
  OUTLINED_FUNCTION_12_0();
  return TaskGroup.Iterator.next(isolation:)();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 248));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v18;
  uint64_t EnumTagSinglePayload;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  char v28;
  uint64_t v29;
  BOOL v30;
  Swift::Int v31;
  unint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  if (__swift_getEnumTagSinglePayload(v0[24], 1LL, v0[19]) == 1)
  {
    uint64_t v1 = v0[30];
    OUTLINED_FUNCTION_14_5(v0[26]);
    swift_bridgeObjectRetain_n(v1, 2LL);
    specialized _copyCollectionToContiguousArray<A>(_:)(v1);
    uint64_t v3 = v2;
    OUTLINED_FUNCTION_20();
    id v42 = v3;
    specialized MutableCollection<>.sort(by:)(&v42);
    uint64_t v15 = (void *)v0[11];
    OUTLINED_FUNCTION_14();
    uint64_t v16 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySi3key_SS5valuetG_SSs5NeverOTg50126_s18SiriLinkFlowPlugin28AutoShortcutDialogTemplatingC04makeF7Phrases08shortcutJ0SaySSGAF_tYaKFAFScGySi_0a3KitC00H6ResultVtSgGzv64XEfU_SSSi3key_SS5valuet_tcfu_33_9884fbf80a26ee2659924377586aa6b9Y20AL_SSAMtSSTf3nnnpk_nTf1cn_n(v42);
    swift_release();
    OUTLINED_FUNCTION_14();
    *uint64_t v15 = v16;
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_33_0();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_29_0();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_29_1();
    __asm { BR              X0 }
  }

  uint64_t v4 = v0[20];
  uint64_t v5 = OUTLINED_FUNCTION_50_3();
  outlined init with take of (Int, TemplatingResult)?(v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, TemplatingResult));
  if (__swift_getEnumTagSinglePayload(v4, 1LL, v7) == 1)
  {
    outlined destroy of URL?(v0[20], &demangling cache variable for type metadata for (Int, TemplatingResult)?);
LABEL_21:
    id v41 = (void *)swift_task_alloc(async function pointer to TaskGroup.Iterator.next(isolation:)[1]);
    v0[31] = v41;
    *id v41 = v0;
    v41[1] = closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:);
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_29_1();
    return TaskGroup.Iterator.next(isolation:)();
  }

  uint64_t v8 = (uint64_t *)v0[20];
  uint64_t v9 = *v8;
  uint64_t v10 = (*(uint64_t (**)(void, char *, void))(v0[22] + 32LL))( v0[23],  (char *)v8 + *(int *)(v7 + 48),  v0[21]);
  uint64_t v11 = TemplatingResult.sections.getter(v10);
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = OUTLINED_FUNCTION_108_1();
  if (v12)
  {
    (*(void (**)(void, unint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))( v0[18],  v11 + ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80LL)),  v13);
    unsigned __int8 v14 = 0LL;
  }

  else
  {
    unsigned __int8 v14 = 1LL;
  }

  uint64_t v18 = v0[18];
  __swift_storeEnumTagSinglePayload(v18, v14, 1LL, v13);
  OUTLINED_FUNCTION_20();
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v18, 1LL, v13);
  if ((_DWORD)EnumTagSinglePayload == 1)
  {
    outlined destroy of URL?(v0[18], &demangling cache variable for type metadata for TemplatingSection?);
    uint64_t v20 = (void *)v0[30];
LABEL_20:
    OUTLINED_FUNCTION_14_5(v0[22]);
    v0[30] = v20;
    goto LABEL_21;
  }

  uint64_t v21 = v0[30];
  uint64_t v22 = v0[18];
  TemplatingSection.content.getter(EnumTagSinglePayload);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(v22, v13);
  uint64_t v23 = OUTLINED_FUNCTION_112_4();
  uint64_t v25 = v24;
  OUTLINED_FUNCTION_94_6();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v21);
  v0[10] = v21;
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v9);
  uint64_t v29 = *(void *)(v21 + 16);
  uint64_t v30 = (v28 & 1) == 0;
  uint64_t v31 = v29 + v30;
  if (__OFADD__(v29, v30))
  {
    __break(1u);
  }

  else
  {
    uint64_t v32 = result;
    uint64_t v33 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Int, String>);
    uint64_t result = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v31);
    if ((result & 1) != 0)
    {
      uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v9);
      if ((v33 & 1) != (v34 & 1))
      {
        OUTLINED_FUNCTION_29_1();
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v35);
      }

      uint64_t v32 = result;
    }

    uint64_t v20 = (void *)v0[10];
    if ((v33 & 1) != 0)
    {
      uint64_t v36 = (uint64_t *)(v20[7] + 16 * v32);
      swift_bridgeObjectRelease();
      *uint64_t v36 = v23;
      v36[1] = v25;
LABEL_19:
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }

    v20[(v32 >> 6) + 8] |= 1LL << v32;
    *(void *)(v20[6] + 8 * v32) = v9;
    unint64_t v37 = (uint64_t *)(v20[7] + 16 * v32);
    *unint64_t v37 = v23;
    v37[1] = v25;
    uint64_t v38 = v20[2];
    os_log_type_t v39 = __OFADD__(v38, 1LL);
    uint64_t v40 = v38 + 1;
    if (!v39)
    {
      v20[2] = v40;
      goto LABEL_19;
    }
  }

  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v7[7] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for TemplatingResult(0LL);
  v7[8] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v7[9] = v10;
  v7[10] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( closure #1 in closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:),  0LL,  0LL);
}

uint64_t closure #1 in closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t v12 = v10[4];
  uint64_t v11 = v10[5];
  OUTLINED_FUNCTION_80();
  OUTLINED_FUNCTION_24_15(v12, v11);
  uint64_t v13 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_7_30(v13);
  uint64_t v15 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for AutoShortcutCATs + v14 + 80));
  v10[11] = v15;
  *uint64_t v15 = v10;
  v15[1] = closure #1 in closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:);
  return OUTLINED_FUNCTION_65_13(v10[10], v10[7], a10);
}

uint64_t closure #1 in closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:)()
{
  *uint64_t v2 = *v1;
  *(void *)(v3 + 96) = v0;
  uint64_t v4 = swift_task_dealloc();
  OUTLINED_FUNCTION_60_10(v4, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char *v7;
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v5 = *(void **)(v0 + 16);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, TemplatingResult));
  uint64_t v7 = (char *)v5 + *(int *)(v6 + 48);
  *uint64_t v5 = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(v7, v1, v3);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0LL, 1LL, v6);
  OUTLINED_FUNCTION_114_4();
  OUTLINED_FUNCTION_40_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 16);
  swift_errorRelease(*(void *)(v0 + 96));
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, TemplatingResult));
  __swift_storeEnumTagSinglePayload(v1, 1LL, 1LL, v2);
  OUTLINED_FUNCTION_114_4();
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AutoShortcutDialogTemplating.makeUserDeniedDialog()()
{
  *(void *)(v1 + 16) = v0;
  return OUTLINED_FUNCTION_6_2((uint64_t)AutoShortcutDialogTemplating.makeUserDeniedDialog());
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v4)(void);
  OUTLINED_FUNCTION_106_3();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for AutoShortcutCATsSimple + v1 + 176));
  *(void *)(v0 + 24) = v2;
  *uint64_t v2 = v0;
  v2[1] = AutoShortcutDialogTemplating.makeUserDeniedDialog();
  return OUTLINED_FUNCTION_27_2(v4);
}

uint64_t AutoShortcutDialogTemplating.makeUserDeniedDialog()(uint64_t a1)
{
  uint64_t v5 = OUTLINED_FUNCTION_3_0(*(void *)(v4 + 24));
  if (!v1) {
    uint64_t v5 = a1;
  }
  return OUTLINED_FUNCTION_15_2(v5, *(uint64_t (**)(void))(v2 + 8));
}

uint64_t AutoShortcutDialogTemplating.makeUserDeniedDialog_rfv1()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)AutoShortcutDialogTemplating.makeUserDeniedDialog_rfv1());
}

uint64_t AutoShortcutDialogTemplating.makeUserDeniedDialog_rfv1()()
{
  uint64_t v2 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for AutoShortcutCATs + v1 + 88));
  *(void *)(v0 + 32) = v2;
  uint64_t v3 = OUTLINED_FUNCTION_125_2(v2);
  return OUTLINED_FUNCTION_8_4(v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v1 + 32));
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AutoShortcutDialogTemplating.deinit()
{
  return v0;
}

uint64_t AutoShortcutDialogTemplating.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 112LL, 7LL);
}

void specialized MutableCollection<>.sort(by:)(void *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    uint64_t v2 = v3;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    uint64_t v2 = v3;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
}

LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
    return;
  }

  uint64_t v8 = 0LL;
  uint64_t v9 = *a1;
  uint64_t v96 = (char *)_swiftEmptyArrayStorage;
  uint64_t v93 = v5;
  while (1)
  {
    uint64_t v10 = v8++;
    if (v8 < v3)
    {
      uint64_t v11 = *(void *)(v9 + 24 * v8);
      uint64_t v12 = *(void *)(v9 + 24 * v10);
      uint64_t v8 = v10 + 2;
      if (v10 + 2 < v3)
      {
        uint64_t v13 = (uint64_t *)(v9 + 48 + 24 * v10);
        uint64_t v14 = v11;
        while (1)
        {
          uint64_t v16 = *v13;
          v13 += 3;
          uint64_t v15 = v16;
          if (v11 < v12 == v16 >= v14) {
            break;
          }
          ++v8;
          uint64_t v14 = v15;
          if (v8 >= v3)
          {
            uint64_t v8 = v3;
            break;
          }
        }
      }

      if (v11 < v12)
      {
        if (v8 < v10) {
          goto LABEL_127;
        }
        if (v10 < v8)
        {
          uint64_t v17 = 24 * v8;
          uint64_t v18 = 24 * v10;
          uint64_t v19 = v8;
          uint64_t v20 = v10;
          do
          {
            if (v20 != --v19)
            {
              if (!v9) {
                goto LABEL_133;
              }
              uint64_t v21 = v9 + v18;
              uint64_t v22 = v9 + v17;
              uint64_t v23 = *(void *)(v9 + v18 + 16);
              uint64_t v24 = *(_OWORD *)(v9 + v18);
              uint64_t v25 = *(void *)(v9 + v17 - 8);
              *(_OWORD *)uint64_t v21 = *(_OWORD *)(v9 + v17 - 24);
              *(void *)(v21 + 16) = v25;
              *(_OWORD *)(v22 - 24) = v24;
              *(void *)(v22 - 8) = v23;
            }

            ++v20;
            v17 -= 24LL;
            v18 += 24LL;
          }

          while (v20 < v19);
        }
      }
    }

    if (v8 >= v3) {
      goto LABEL_26;
    }
    if (__OFSUB__(v8, v10)) {
      goto LABEL_124;
    }
    if (v8 - v10 >= v5) {
      goto LABEL_26;
    }
    uint64_t v26 = v10 + v5;
    if (__OFADD__(v10, v5)) {
      goto LABEL_128;
    }
    if (v26 >= v3) {
      uint64_t v26 = v3;
    }
    if (v26 < v10) {
      goto LABEL_129;
    }
    if (v8 == v26)
    {
LABEL_26:
      uint64_t v27 = v96;
    }

    else
    {
      uint64_t v78 = v9 - 24 + 24 * v8;
      uint64_t v27 = v96;
      do
      {
        uint64_t v79 = *(void *)(v9 + 24 * v8);
        unint64_t v80 = v10;
        uint64_t v81 = v78;
        do
        {
          if (v79 >= *(void *)v81) {
            break;
          }
          if (!v9) {
            goto LABEL_131;
          }
          uint64_t v82 = *(void *)(v81 + 32);
          uint64_t v83 = *(void *)(v81 + 40);
          *(_OWORD *)(v81 + 24) = *(_OWORD *)v81;
          *(void *)(v81 + 40) = *(void *)(v81 + 16);
          *(void *)uint64_t v81 = v79;
          *(void *)(v81 + 8) = v82;
          *(void *)(v81 + 16) = v83;
          v81 -= 24LL;
          ++v80;
        }

        while (v8 != v80);
        ++v8;
        v78 += 24LL;
      }

      while (v8 != v26);
      uint64_t v8 = v26;
    }

    if (v8 < v10) {
      goto LABEL_123;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0) {
      uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v27 + 2) + 1LL,  1,  v27);
    }
    uint64_t v29 = *((void *)v27 + 2);
    uint64_t v28 = *((void *)v27 + 3);
    uint64_t v30 = v29 + 1;
    if (v29 >= v28 >> 1) {
      uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v28 > 1),  v29 + 1,  1,  v27);
    }
    *((void *)v27 + 2) = v30;
    uint64_t v31 = v27 + 32;
    uint64_t v32 = &v27[16 * v29 + 32];
    *(void *)uint64_t v32 = v10;
    *((void *)v32 + 1) = v8;
    uint64_t v96 = v27;
    if (v29) {
      break;
    }
    uint64_t v30 = 1LL;
LABEL_75:
    uint64_t v5 = v93;
    uint64_t v3 = v94;
    if (v8 >= v94) {
      goto LABEL_91;
    }
  }

  while (1)
  {
    uint64_t v33 = v30 - 1;
    if (v30 >= 4)
    {
      uint64_t v38 = &v31[16 * v30];
      os_log_type_t v39 = *((void *)v38 - 8);
      uint64_t v40 = *((void *)v38 - 7);
      os_log_type_t v44 = __OFSUB__(v40, v39);
      id v41 = v40 - v39;
      if (v44) {
        goto LABEL_108;
      }
      unint64_t v43 = *((void *)v38 - 6);
      id v42 = *((void *)v38 - 5);
      os_log_type_t v44 = __OFSUB__(v42, v43);
      uint64_t v36 = v42 - v43;
      unint64_t v37 = v44;
      if (v44) {
        goto LABEL_109;
      }
      BOOL v45 = v30 - 2;
      uint64_t v46 = &v31[16 * v30 - 32];
      id v48 = *(void *)v46;
      uint64_t v47 = *((void *)v46 + 1);
      os_log_type_t v44 = __OFSUB__(v47, v48);
      uint64_t v49 = v47 - v48;
      if (v44) {
        goto LABEL_110;
      }
      os_log_type_t v44 = __OFADD__(v36, v49);
      unint64_t v50 = v36 + v49;
      if (v44) {
        goto LABEL_112;
      }
      if (v50 >= v41)
      {
        id v68 = &v31[16 * v33];
        BOOL v70 = *(void *)v68;
        os_log_type_t v69 = *((void *)v68 + 1);
        os_log_type_t v44 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v44) {
          goto LABEL_118;
        }
        uint64_t v61 = v36 < v71;
        goto LABEL_64;
      }
    }

    else
    {
      if (v30 != 3)
      {
        unint64_t v62 = *((void *)v27 + 4);
        uint64_t v63 = *((void *)v27 + 5);
        os_log_type_t v44 = __OFSUB__(v63, v62);
        unint64_t v55 = v63 - v62;
        uint64_t v56 = v44;
        goto LABEL_58;
      }

      uint64_t v35 = *((void *)v27 + 4);
      uint64_t v34 = *((void *)v27 + 5);
      os_log_type_t v44 = __OFSUB__(v34, v35);
      uint64_t v36 = v34 - v35;
      unint64_t v37 = v44;
    }

    if ((v37 & 1) != 0) {
      goto LABEL_111;
    }
    BOOL v45 = v30 - 2;
    unint64_t v51 = &v31[16 * v30 - 32];
    uint64_t v53 = *(void *)v51;
    uint64_t v52 = *((void *)v51 + 1);
    uint64_t v54 = __OFSUB__(v52, v53);
    unint64_t v55 = v52 - v53;
    uint64_t v56 = v54;
    if (v54) {
      goto LABEL_113;
    }
    uint64_t v57 = &v31[16 * v33];
    uint64_t v59 = *(void *)v57;
    uint64_t v58 = *((void *)v57 + 1);
    os_log_type_t v44 = __OFSUB__(v58, v59);
    uint64_t v60 = v58 - v59;
    if (v44) {
      goto LABEL_115;
    }
    if (__OFADD__(v55, v60)) {
      goto LABEL_117;
    }
    if (v55 + v60 >= v36)
    {
      uint64_t v61 = v36 < v60;
LABEL_64:
      if (v61) {
        uint64_t v33 = v45;
      }
      goto LABEL_66;
    }

LABEL_58:
    if ((v56 & 1) != 0) {
      goto LABEL_114;
    }
    NSNumber v64 = &v31[16 * v33];
    os_log_type_t v66 = *(void *)v64;
    uint64_t v65 = *((void *)v64 + 1);
    os_log_type_t v44 = __OFSUB__(v65, v66);
    id v67 = v65 - v66;
    if (v44) {
      goto LABEL_116;
    }
    if (v67 < v55) {
      goto LABEL_75;
    }
LABEL_66:
    uint64_t v72 = v33 - 1;
    if (v33 - 1 >= v30)
    {
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
      goto LABEL_119;
    }

    if (!v9) {
      goto LABEL_132;
    }
    id v73 = &v31[16 * v72];
    uint64_t v74 = *(void *)v73;
    unint64_t v75 = &v31[16 * v33];
    unint64_t v76 = *((void *)v75 + 1);
    specialized _merge<A>(low:mid:high:buffer:by:)( (char *)(v9 + 24LL * *(void *)v73),  (char *)(v9 + 24LL * *(void *)v75),  v9 + 24 * v76,  v95);
    if (v1) {
      break;
    }
    if (v76 < v74) {
      goto LABEL_105;
    }
    if (v33 > *((void *)v96 + 2)) {
      goto LABEL_106;
    }
    *(void *)id v73 = v74;
    *(void *)&v31[16 * v72 + 8] = v76;
    uint64_t v77 = *((void *)v96 + 2);
    if (v33 >= v77) {
      goto LABEL_107;
    }
    uint64_t v27 = v96;
    uint64_t v30 = v77 - 1;
    memmove(&v31[16 * v33], v75 + 16, 16 * (v77 - 1 - v33));
    *((void *)v96 + 2) = v77 - 1;
    if (v77 <= 2) {
      goto LABEL_75;
    }
  }

LABEL_87:
  swift_bridgeObjectRelease();
  if (v94 < -1) {
    goto LABEL_126;
  }
  *(void *)(v92 + 16) = 0LL;
  swift_bridgeObjectRelease();
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 24 * a3 - 24;
    while (2)
    {
      uint64_t v6 = *(void *)(v4 + 24 * a3);
      uint64_t v7 = result;
      uint64_t v8 = v5;
      do
      {
        if (v6 >= *(void *)v8) {
          break;
        }
        if (!v4)
        {
          __break(1u);
          return result;
        }

        uint64_t v9 = *(void *)(v8 + 32);
        uint64_t v10 = *(void *)(v8 + 40);
        *(_OWORD *)(v8 + 24) = *(_OWORD *)v8;
        *(void *)(v8 + 40) = *(void *)(v8 + 16);
        *(void *)uint64_t v8 = v6;
        *(void *)(v8 + 8) = v9;
        *(void *)(v8 + 16) = v10;
        v8 -= 24LL;
        ++v7;
      }

      while (a3 != v7);
      ++a3;
      v5 += 24LL;
      if (a3 != a2) {
        continue;
      }
      break;
    }
  }

  return result;
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 24 * a3 - 24;
    while (2)
    {
      uint64_t v9 = (uint64_t *)(v7 + 24 * v4);
      uint64_t result = *v9;
      uint64_t v10 = v9[1];
      uint64_t v11 = v6;
      uint64_t v12 = (void *)v8;
      do
      {
        uint64_t v13 = v12[1];
        if (result == *v12 && v10 == v13) {
          break;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, *v12, v13, 1LL);
        if ((result & 1) == 0) {
          break;
        }
        if (!v7)
        {
          __break(1u);
          return result;
        }

        uint64_t result = v12[3];
        uint64_t v10 = v12[4];
        uint64_t v15 = v12[5];
        uint64_t v16 = v12[2];
        *(_OWORD *)(v12 + 3) = *(_OWORD *)v12;
        v12[5] = v16;
        *uint64_t v12 = result;
        v12[1] = v10;
        v12[2] = v15;
        v12 -= 3;
        ++v11;
      }

      while (v4 != v11);
      ++v4;
      v8 += 24LL;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }

  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 24;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 24;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (void)a2) / 24, a4);
    uint64_t v12 = &v4[24 * v11];
    if (v7 >= v6 || v10 < 24) {
      goto LABEL_39;
    }
    unint64_t v19 = a3 - 24;
    while (1)
    {
      uint64_t v20 = (char *)(v19 + 24);
      uint64_t v21 = v6 - 24;
      if (*((void *)v12 - 3) >= *((void *)v6 - 3))
      {
        BOOL v23 = v20 != v12 || v19 >= (unint64_t)v12;
        uint64_t v21 = v12 - 24;
        v12 -= 24;
        if (!v23) {
          goto LABEL_35;
        }
      }

      else
      {
        BOOL v22 = v20 != v6 || v19 >= (unint64_t)v6;
        v6 -= 24;
        if (!v22) {
          goto LABEL_35;
        }
      }

      __int128 v24 = *(_OWORD *)v21;
      *(void *)(v19 + 16) = *((void *)v21 + 2);
      *(_OWORD *)unint64_t v19 = v24;
LABEL_35:
      v19 -= 24LL;
      if (v6 <= v7 || v12 <= v4) {
        goto LABEL_39;
      }
    }
  }

  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 24, a4);
  uint64_t v12 = &v4[24 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 24)
  {
    while (*(void *)v6 >= *(void *)v4)
    {
      uint64_t v14 = v4;
      BOOL v15 = v7 == v4;
      v4 += 24;
      if (!v15) {
        goto LABEL_11;
      }
LABEL_12:
      v7 += 24;
    }

    uint64_t v14 = v6;
    BOOL v15 = v7 == v6;
    v6 += 24;
    if (v15) {
      goto LABEL_12;
    }
LABEL_11:
    __int128 v16 = *(_OWORD *)v14;
    *((void *)v7 + 2) = *((void *)v14 + 2);
    *(_OWORD *)uint64_t v7 = v16;
    goto LABEL_12;
  }

{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char *v17;
  __int128 v18;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  __int128 v31;
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 24;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 24;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (void)a2) / 24, a4);
    uint64_t v12 = &v4[24 * v11];
    if (v7 >= v6 || v10 < 24) {
      goto LABEL_47;
    }
    uint64_t v21 = a3 - 24;
    while (1)
    {
      BOOL v22 = (char *)(v21 + 24);
      BOOL v23 = *((void *)v12 - 3);
      __int128 v24 = *((void *)v12 - 2);
      uint64_t v25 = v12 - 24;
      uint64_t v26 = *((void *)v6 - 3);
      uint64_t v27 = *((void *)v6 - 2);
      uint64_t v28 = v23 == v26 && v24 == v27;
      if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v26, v27, 1LL) & 1) == 0)
      {
        uint64_t v30 = v22 != v12 || v21 >= (unint64_t)v12;
        v12 -= 24;
        if (!v30) {
          goto LABEL_43;
        }
      }

      else
      {
        uint64_t v29 = v22 != v6 || v21 >= (unint64_t)v6;
        uint64_t v25 = v6 - 24;
        v6 -= 24;
        if (!v29) {
          goto LABEL_43;
        }
      }

      uint64_t v31 = *(_OWORD *)v25;
      *(void *)(v21 + 16) = *((void *)v25 + 2);
      *(_OWORD *)uint64_t v21 = v31;
LABEL_43:
      v21 -= 24LL;
      if (v6 <= v7 || v12 <= v4) {
        goto LABEL_47;
      }
    }
  }

  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 24, a4);
  uint64_t v12 = &v4[24 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 24)
  {
    while (1)
    {
      uint64_t v14 = *((void *)v6 + 1);
      BOOL v15 = *((void *)v4 + 1);
      __int128 v16 = *(void *)v6 == *(void *)v4 && v14 == v15;
      if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v6, v14, *(void *)v4, v15, 1LL) & 1) != 0) {
        break;
      }
      uint64_t v17 = v4;
      __int128 v16 = v7 == v4;
      v4 += 24;
      if (!v16) {
        goto LABEL_15;
      }
LABEL_16:
      v7 += 24;
    }

    uint64_t v17 = v6;
    __int128 v16 = v7 == v6;
    v6 += 24;
    if (v16) {
      goto LABEL_16;
    }
LABEL_15:
    uint64_t v18 = *(_OWORD *)v17;
    *((void *)v7 + 2) = *((void *)v17 + 2);
    *(_OWORD *)uint64_t v7 = v18;
    goto LABEL_16;
  }

void *specialized AutoShortcutDialogTemplating.init(deviceState:autoShortcutCATs:autoShortcutCATsSimple:linkActionPatterns:)( __int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  a5[12] = a6;
  a5[13] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5 + 9);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32LL))(boxed_opaque_existential_1, a4, a6);
  outlined init with take of AceServiceInvokerAsync(a1, (uint64_t)(a5 + 2));
  a5[7] = a2;
  a5[8] = a3;
  return a5;
}

unint64_t type metadata accessor for DialogElement()
{
  unint64_t result = lazy cache variable for type metadata for DialogElement;
  if (!lazy cache variable for type metadata for DialogElement)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___DialogElement);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for DialogElement);
  }

  return result;
}

uint64_t partial apply for closure #1 in AutoShortcutDialogTemplating.makeAutoShortcutFirstRunPattern(app:)( uint64_t a1)
{
  return closure #1 in AutoShortcutDialogTemplating.makeConfirmChangeEnablementPattern(appName:isEnabling:)(a1);
}

uint64_t partial apply for closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:)( uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc(dword_21B0A4);
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = partial apply for closure #1 in WorkflowRunnerFlow.execute();
  return closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:)(a1, a2, v7, v6);
}

uint64_t type metadata accessor for AutoShortcutDialogTemplating()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin28AutoShortcutDialogTemplating);
}

ValueMetadata *type metadata accessor for AutoShortcutDialogTemplating.ButtonLabels()
{
  return &type metadata for AutoShortcutDialogTemplating.ButtonLabels;
}

uint64_t sub_ED058()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t partial apply for closure #1 in closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:)( uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc(dword_21B24C);
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = protocol witness for Flow.execute() in conformance WorkflowRunnerFlow;
  return closure #1 in closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:)( a1,  v4,  v5,  v6,  v7,  v9,  v8);
}

uint64_t sub_ED118()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSi_11SiriKitFlow16TemplatingResultVtSg_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_21674C);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Flow.execute() in conformance WorkflowRunnerFlow;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSi_11SiriKitFlow16TemplatingResultVtSg_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSi_11SiriKitFlow16TemplatingResultVtSg_Tg5Tu))( a1,  v4);
}

uint64_t outlined init with take of (Int, TemplatingResult)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, TemplatingResult)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_7_30(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 0LL, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_11_28(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2, v1 + 24, v3);
}

void OUTLINED_FUNCTION_16_35(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_18_28(float a1)
{
  *uint64_t v2 = a1;
  return swift_errorRetain(v1);
}

uint64_t OUTLINED_FUNCTION_19_25()
{
  return swift_slowAlloc(12LL, -1LL);
}

uint64_t OUTLINED_FUNCTION_28_16()
{
  return swift_slowAlloc(8LL, -1LL);
}

uint64_t OUTLINED_FUNCTION_32_20(uint64_t a1)
{
  return swift_arrayDestroy(v1, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_35_27(uint64_t a1, uint64_t a2)
{
  return swift_errorRetain(v2);
}

uint64_t OUTLINED_FUNCTION_42_15()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 64);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 72) = v0;
  return swift_task_dealloc(v5);
}

uint64_t OUTLINED_FUNCTION_43_20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t OUTLINED_FUNCTION_44_13()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 56);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 64) = v0;
  return swift_task_dealloc(v5);
}

uint64_t OUTLINED_FUNCTION_47_20@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, uint64_t a3)
{
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))( (char *)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
}

uint64_t OUTLINED_FUNCTION_48_18()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_52_16( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  return a7();
}

void *OUTLINED_FUNCTION_54_23()
{
  return specialized AutoShortcutDialogTemplating.init(deviceState:autoShortcutCATs:autoShortcutCATsSimple:linkActionPatterns:)( v3,  v2,  v1,  v6,  v0,  v4,  v5);
}

uint64_t OUTLINED_FUNCTION_55_18()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 64);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 72) = v0;
  return swift_task_dealloc(v5);
}

uint64_t OUTLINED_FUNCTION_56_22()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 136);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 144) = v0;
  return swift_task_dealloc(v5);
}

uint64_t OUTLINED_FUNCTION_57_17(void *a1)
{
  *(void *)(v2 + 64) = a1;
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 16);
}

uint64_t OUTLINED_FUNCTION_64_10(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_65_13(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

double OUTLINED_FUNCTION_71_11(uint64_t a1)
{
  *(void *)&double result = swift_bridgeObjectRetain(v2).n128_u64[0];
  return result;
}

uint64_t OUTLINED_FUNCTION_72_9@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t OUTLINED_FUNCTION_74_14(void *a1)
{
  *(void *)(v2 + 64) = a1;
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 24);
}

uint64_t OUTLINED_FUNCTION_77_13(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_81_14()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_82_7(uint64_t a1)
{
  return swift_task_dealloc(a1);
}

uint64_t OUTLINED_FUNCTION_84_13@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(32LL);
}

uint64_t OUTLINED_FUNCTION_85_10()
{
  return swift_task_dealloc(*(void *)(v0 + 112));
}

uint64_t OUTLINED_FUNCTION_86_5()
{
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_87_8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 48);
}

uint64_t OUTLINED_FUNCTION_89_10()
{
  return _swift_stdlib_bridgeErrorToNSError(v0);
}

double OUTLINED_FUNCTION_92_4()
{
  *(void *)&double result = swift_bridgeObjectRetain(v0).n128_u64[0];
  return result;
}

uint64_t OUTLINED_FUNCTION_94_6()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_104_6@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 40);
}

  ;
}

uint64_t OUTLINED_FUNCTION_107_2()
{
  return swift_task_dealloc(*(void *)(v0 + 48));
}

uint64_t OUTLINED_FUNCTION_109_4(uint64_t a1)
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_110_7()
{
  *(void *)(v1 + 16) = v0;
  return type metadata accessor for TemplatingText(0LL);
}

uint64_t OUTLINED_FUNCTION_112_4()
{
  return TemplatingText.text.getter();
}

uint64_t OUTLINED_FUNCTION_114_4()
{
  return swift_task_dealloc(*(void *)(v0 + 80));
}

uint64_t OUTLINED_FUNCTION_115_3(uint64_t a1)
{
  return outlined destroy of URL?(a1, v1);
}

  ;
}

uint64_t OUTLINED_FUNCTION_118_6()
{
  return __swift_storeEnumTagSinglePayload(v0, 0LL, 1LL, v1);
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_124_4(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 88);
}

uint64_t OUTLINED_FUNCTION_125_2(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 16);
}

void AutoShortcutFirstRunWatchVisual.enableButtonLabel.getter()
{
}

void AutoShortcutFirstRunWatchVisual.cancelButtonLabel.getter()
{
}

void AutoShortcutFirstRunWatchVisual.moreShortcutsLabel.getter()
{
}

void AutoShortcutFirstRunWatchVisual.promptLabel.getter()
{
}

uint64_t AutoShortcutAppEnabledVisual.showOnWatch.getter()
{
  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t AutoShortcutAppEnabledVisual.response.getter(uint64_t a1)
{
  v2[13] = a1;
  v2[14] = v1;
  uint64_t v3 = type metadata accessor for CustomCanvas(0LL);
  v2[15] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[16] = v4;
  v2[17] = OUTLINED_FUNCTION_9_0(v4);
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutAppEnabledVisual.response.getter()
{
  uint64_t v1 = *(uint64_t **)(v0 + 112);
  uint64_t v2 = v1[4];
  uint64_t v20 = v1[5];
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[6];
  uint64_t v6 = v1[7];
  uint64_t v8 = v1[8];
  if ((v1[9] & 1) != 0) {
    char v9 = 4;
  }
  else {
    char v9 = 3;
  }
  uint64_t v10 = one-time initialization token for encoder;
  uint64_t v21 = *v1;
  swift_bridgeObjectRetain(*v1);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v8);
  if (v10 != -1) {
    swift_once(&one-time initialization token for encoder, one-time initialization function for encoder);
  }
  *(void *)(v0 + 16) = v21;
  *(void *)(v0 + 24) = 3LL;
  *(void *)(v0 + 32) = v20;
  *(void *)(v0 + 40) = v7;
  *(void *)(v0 + 48) = v5;
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = v3;
  *(void *)(v0 + 72) = v4;
  *(void *)(v0 + 80) = v6;
  *(void *)(v0 + 88) = v8;
  *(_BYTE *)(v0 + 96) = v9;
  lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
  uint64_t v11 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 16);
  uint64_t v12 = *(void *)(v0 + 136);
  uint64_t v13 = *(void *)(v0 + 120);
  uint64_t v14 = *(void *)(v0 + 128);
  CustomCanvas.init(bundleName:viewId:viewData:componentName:safeForLogging:requestsKeyWindow:hideConversationKeyline:)( 0xD000000000000010LL,  0x8000000000192DE0LL,  0xD000000000000014LL,  0x8000000000192E00LL,  v11,  v15,  0LL,  0xE000000000000000LL);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SectionConvertible>);
  uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
  *(_OWORD *)(v17 + 16) = xmmword_17E650;
  *(void *)(v17 + 56) = v13;
  *(void *)(v17 + 64) = &protocol witness table for CustomCanvas;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v17 + 32));
  (*(void (**)(void *, uint64_t, uint64_t))(v14 + 16))(boxed_opaque_existential_1, v12, v13);
  Response.init(_:backgrounds:ornaments:hideRedactedElements:)( v17,  _swiftEmptyArrayStorage,  _swiftEmptyArrayStorage,  0LL);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AutoShortcutAppEnabledVisual.data.getter()
{
  uint64_t v1 = type metadata accessor for Response(0LL);
  v0[2] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[3] = v2;
  uint64_t v3 = OUTLINED_FUNCTION_9_0(v2);
  v0[4] = v3;
  uint64_t v4 = (void *)swift_task_alloc(dword_21B274);
  v0[5] = v4;
  *uint64_t v4 = v0;
  v4[1] = AutoShortcutAppEnabledVisual.data.getter;
  return AutoShortcutAppEnabledVisual.response.getter(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v2 = *(void *)(*(void *)v1 + 40LL);
  *(void *)(*(void *)v1 + 48LL) = v0;
  swift_task_dealloc(v2);
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = lazy protocol witness table accessor for type Response and conformance Response();
  uint64_t v4 = ProtobufBuilder.serializedData()(v2, v3);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v0 + 24);
  uint64_t v8 = *(void *)(v0 + 32);
  if (v1)
  {
    OUTLINED_FUNCTION_12_3(v7);
    swift_task_dealloc(*(void *)(v0 + 32));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v10 = v4;
    OUTLINED_FUNCTION_12_3(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v10, v6);
  }

void __swiftcall AutoShortcutAppEnabledVisual.init(shortcutPhrases:moreShortcutsLabel:messageLabel:bundleId:footnoteLabel:showOnWatch:)( SiriLinkFlowPlugin::AutoShortcutAppEnabledVisual *__return_ptr retstr, Swift::OpaquePointer shortcutPhrases, Swift::String_optional moreShortcutsLabel, Swift::String messageLabel, Swift::String bundleId, Swift::String footnoteLabel, Swift::Bool showOnWatch)
{
  retstr->shortcutPhrases = shortcutPhrases;
  retstr->moreShortcutsLabel = moreShortcutsLabel;
  retstr->messageLabel = messageLabel;
  retstr->bundleId = bundleId;
  retstr->footnoteLabel = footnoteLabel;
  retstr->showOnWatch = showOnWatch;
}

uint64_t destroy for AutoShortcutAppEnabledVisual(void *a1)
{
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t initializeWithCopy for AutoShortcutAppEnabledVisual(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v6 = a2[2];
  uint64_t v5 = a2[3];
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v5;
  uint64_t v8 = a2[4];
  uint64_t v7 = a2[5];
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v7;
  uint64_t v10 = a2[6];
  uint64_t v9 = a2[7];
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v9;
  uint64_t v11 = a2[8];
  *(void *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t *assignWithCopy for AutoShortcutAppEnabledVisual(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[5] = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v11 = a1[6];
  a1[6] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[7] = a2[7];
  uint64_t v12 = a2[8];
  uint64_t v13 = a1[8];
  a1[8] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
  return a1;
}

void *__swift_memcpy73_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x49uLL);
}

uint64_t *assignWithTake for AutoShortcutAppEnabledVisual(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a2[2];
  uint64_t v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a2[4];
  uint64_t v8 = a1[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a2[6];
  uint64_t v10 = a1[6];
  a1[5] = a2[5];
  a1[6] = v9;
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = a2[8];
  uint64_t v12 = a1[8];
  a1[7] = a2[7];
  a1[8] = v11;
  swift_bridgeObjectRelease(v12);
  *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for AutoShortcutAppEnabledVisual(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 73))
    {
      LODWORD(__swift_storeEnumTagSinglePayload(v1, 0LL, 1LL, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(__swift_storeEnumTagSinglePayload(v1, 0LL, 1LL, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutoShortcutAppEnabledVisual(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 73) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)double result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 73) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AutoShortcutAppEnabledVisual()
{
  return &type metadata for AutoShortcutAppEnabledVisual;
}

uint64_t UsoEntity_common_GeographicArea.toLocation()()
{
  uint64_t v114 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocationName?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_83();
  uint64_t v113 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AddressReference?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_83();
  uint64_t v112 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContinentName?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_83();
  uint64_t v111 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StreetAddress?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_4_32();
  uint64_t v10 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Landmark?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_4_32();
  uint64_t v13 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proximity?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_35();
  uint64_t v17 = v16 - v15;
  uint64_t v105 = v16 - v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Place?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_35();
  uint64_t v21 = v20 - v19;
  uint64_t v106 = v20 - v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Centroid?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v22);
  OUTLINED_FUNCTION_35();
  uint64_t v25 = v24 - v23;
  uint64_t v107 = v24 - v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for City?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v26);
  OUTLINED_FUNCTION_35();
  uint64_t v29 = v28 - v27;
  uint64_t v108 = v28 - v27;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v30);
  OUTLINED_FUNCTION_35();
  uint64_t v33 = v32 - v31;
  uint64_t v109 = v32 - v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zipcode?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v34);
  OUTLINED_FUNCTION_35();
  uint64_t v37 = v36 - v35;
  uint64_t v110 = v36 - v35;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Country?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v38);
  OUTLINED_FUNCTION_35();
  uint64_t v41 = v40 - v39;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Radius?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v42);
  OUTLINED_FUNCTION_35();
  uint64_t v45 = v44 - v43;
  uint64_t v46 = type metadata accessor for Radius(0LL);
  uint64_t v49 = OUTLINED_FUNCTION_0_36(v45, v47, v48, v46);
  uint64_t v50 = type metadata accessor for Country(v49);
  uint64_t v53 = OUTLINED_FUNCTION_0_36(v41, v51, v52, v50);
  uint64_t v54 = type metadata accessor for Zipcode(v53);
  uint64_t v57 = OUTLINED_FUNCTION_0_36(v37, v55, v56, v54);
  uint64_t v58 = type metadata accessor for State(v57);
  uint64_t v61 = OUTLINED_FUNCTION_0_36(v33, v59, v60, v58);
  uint64_t v62 = type metadata accessor for City(v61);
  uint64_t v65 = OUTLINED_FUNCTION_0_36(v29, v63, v64, v62);
  uint64_t v66 = type metadata accessor for Centroid(v65);
  uint64_t v69 = OUTLINED_FUNCTION_0_36(v25, v67, v68, v66);
  uint64_t v70 = type metadata accessor for Place(v69);
  uint64_t v73 = OUTLINED_FUNCTION_0_36(v21, v71, v72, v70);
  uint64_t v74 = type metadata accessor for Proximity(v73);
  uint64_t v77 = OUTLINED_FUNCTION_0_36(v17, v75, v76, v74);
  uint64_t v78 = type metadata accessor for Landmark(v77);
  uint64_t v81 = OUTLINED_FUNCTION_0_36(v13, v79, v80, v78);
  uint64_t v82 = type metadata accessor for StreetAddress(v81);
  uint64_t v85 = OUTLINED_FUNCTION_0_36(v10, v83, v84, v82);
  uint64_t v86 = type metadata accessor for ContinentName(v85);
  uint64_t v89 = OUTLINED_FUNCTION_0_36(v111, v87, v88, v86);
  uint64_t v90 = type metadata accessor for AddressReference(v89);
  uint64_t v93 = OUTLINED_FUNCTION_0_36(v112, v91, v92, v90);
  uint64_t v94 = type metadata accessor for LocationName(v93);
  uint64_t v97 = OUTLINED_FUNCTION_50_1(v113, v95, v96, v94);
  uint64_t v98 = dispatch thunk of UsoEntity_common_GeographicArea.name.getter(v97);
  uint64_t v100 = v99;
  uint64_t v101 = type metadata accessor for County(0LL);
  OUTLINED_FUNCTION_50_1(v114, v102, v103, v101);
  return Location.init(radius:country:zipcode:state:city:centroid:place:timezone:proximity:landmark:streetAddress:continentName:addressReference:locationName:locationLabel:county:locationAccuracy:)( v45,  v41,  v110,  v109,  v108,  v107,  v106,  0LL,  0LL,  v105,  v13,  v10,  v111,  v112,  v113,  v98,  v100,  v114,  0LL,  0LL);
}

uint64_t OUTLINED_FUNCTION_0_36(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 0LL;
}

  ;
}

uint64_t CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation(app:intent:intentResponse:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[27] = a4;
  v5[28] = v4;
  v5[25] = a2;
  v5[26] = a3;
  v5[24] = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v5[29] = OUTLINED_FUNCTION_9_0(*(void *)(v6 - 8));
  uint64_t v7 = type metadata accessor for DialogPhase(0LL);
  v5[30] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[31] = v8;
  v5[32] = OUTLINED_FUNCTION_4_0(v8);
  v5[33] = swift_task_alloc(v4);
  uint64_t v9 = type metadata accessor for OutputGenerationManifest(0LL);
  v5[34] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[35] = v10;
  v5[36] = OUTLINED_FUNCTION_9_0(v10);
  uint64_t v11 = type metadata accessor for NLContextUpdate(0LL);
  v5[37] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[38] = v12;
  v5[39] = OUTLINED_FUNCTION_9_0(v12);
  uint64_t v13 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  v5[40] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v5[41] = v14;
  v5[42] = OUTLINED_FUNCTION_9_0(v14);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v6 = *(void **)v5;
  uint64_t v7 = *(void *)(*(void *)v5 + 360LL);
  v6[46] = a1;
  v6[47] = a2;
  v6[48] = a3;
  v6[49] = a4;
  v6[50] = v4;
  OUTLINED_FUNCTION_54_0(v7);
  if (!v4) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation(app:intent:intentResponse:)( uint64_t a1)
{
  uint64_t v2 = v1[41];
  OUTLINED_FUNCTION_47_6(a1, enum case for RFFeatureFlags.ResponseFramework._SMART(_:));
  char v3 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if ((v3 & 1) != 0)
  {
    uint64_t v4 = *(void *)(v1[28] + 56);
    v1[43] = v4;
    Swift::String v5 = INIntent.verb()();
    v1[44] = (uint64_t)v5._object;
    uint64_t v6 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(*(void *)v4 + 152LL));
    v1[45] = (uint64_t)v6;
    *uint64_t v6 = v1;
    v6[1] = CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation(app:intent:intentResponse:);
    return v9(v5._countAndFlagsBits, v5._object);
  }

  else
  {
    uint64_t v8 = (uint64_t **)swift_task_alloc(dword_21B28C);
    v1[64] = (uint64_t)v8;
    *uint64_t v8 = v1;
    v8[1] = (uint64_t *)CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation(app:intent:intentResponse:);
    return CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation_rfv1(app:intent:intentResponse:)( v1[24],  v1[25],  v1[26],  v1[27]);
  }

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 408);
  *(void *)(v3 + 416) = a1;
  *(void *)(v3 + 424) = v1;
  OUTLINED_FUNCTION_54_0(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  id v15;
  void *v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  unint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v42 = v1[49];
  uint64_t v43 = (id)v1[52];
  uint64_t v2 = v1[46];
  uint64_t v40 = v1[47];
  uint64_t v41 = v1[48];
  uint64_t v48 = v1[38];
  uint64_t v49 = v1[37];
  char v3 = v1[33];
  uint64_t v44 = v1[31];
  uint64_t v45 = v1[32];
  uint64_t v46 = v1[30];
  uint64_t v47 = v1[29];
  uint64_t v4 = (void *)v1[27];
  uint64_t v50 = v1[28];
  Swift::String v5 = (void *)v1[26];
  static Device.current.getter(v1 + 9, a1);
  uint64_t v6 = type metadata accessor for CustomIntentNLContextProvider();
  uint64_t v7 = (void *)(swift_initStackObject(v6, v1 + 2) + 16);
  outlined init with take of AceServiceInvokerAsync((__int128 *)(v1 + 9), (uint64_t)v7);
  CustomIntentNLContextProvider.makeContextForConfirmIntent(intent:confirmIntentResponse:acceptLabel:denyLabel:)( v5,  v4,  v2,  v40);
  OUTLINED_FUNCTION_31_21();
  uint64_t v8 = __swift_destroy_boxed_opaque_existential_1Tm(v7);
  static DialogPhase.confirmation.getter(v8, v9, v10);
  uint64_t v11 = [v43 catId];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v45, v3, v46);
  OutputGenerationManifest.init(dialogPhase:_:)(v45, CustomIntentDisambiguationItemContainer.init(items:), 0LL);
  OutputGenerationManifest.responseViewId.setter(v12);
  OUTLINED_FUNCTION_9_8(v3, *(uint64_t (**)(uint64_t, uint64_t))(v44 + 8));
  uint64_t v13 = v47;
  OUTLINED_FUNCTION_29_20( v47,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 16),  v39,  v40,  v41,  v42,  (uint64_t)v43,  v44,  v45,  v46,  v47,  v48,  v49);
  OUTLINED_FUNCTION_28_17(v13);
  OutputGenerationManifest.nlContextUpdate.setter(v13);
  OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
  uint64_t v14 = (*(uint64_t (**)(void *))(*(void *)v50 + 168LL))(v5);
  OutputGenerationManifest.canUseServerTTS.setter(v14 & 1);
  uint64_t v15 = [v5 _metadata];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = [v15 showsWhenRun];

    uint64_t v18 = v17 ^ 1;
  }

  else
  {
    uint64_t v18 = 0;
  }

  uint64_t v19 = v1[28] + 16LL;
  uint64_t v20 = OUTLINED_FUNCTION_38_4();
  if ((dispatch thunk of DeviceState.isCarPlay.getter(v20, v21) & 1) != 0
    || (uint64_t v22 = OUTLINED_FUNCTION_38_4(),
        ((dispatch thunk of DeviceState.isHomePod.getter(v22) | v18) & 1) != 0))
  {
    uint64_t v23 = (void *)v1[52];
    OUTLINED_FUNCTION_46_24();
    OUTLINED_FUNCTION_20();
    uint64_t v24 = OUTLINED_FUNCTION_64();
    OUTLINED_FUNCTION_51(v24);
    v1[61] = OUTLINED_FUNCTION_57();
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v26 = OUTLINED_FUNCTION_23_4(v25);
    *(_OWORD *)(v26 + 16) = xmmword_17E150;
    *(void *)(v26 + 32) = v23;
    uint64_t v52 = v26;
    specialized Array._endMutation()(v26, v27, v28);
    v1[62] = v52;
    uint64_t v30 = v23;
    uint64_t v31 = (void *)swift_task_alloc(v29);
    v1[63] = v31;
    *uint64_t v31 = v1;
    v31[1] = CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation(app:intent:intentResponse:);
    return ((uint64_t (*)(void, uint64_t, void))v51)(v1[24], v52, v1[36]);
  }

  else
  {
    uint64_t v34 = (void *)v1[26];
    uint64_t v33 = v1[27];
    uint64_t v35 = [v34 _title];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v37 = v36;

    v1[54] = v37;
    v1[55] = [v34 _keyImage];
    uint64_t v38 = (void *)swift_task_alloc(dword_21E47C);
    v1[56] = v38;
    *uint64_t v38 = v1;
    v38[1] = CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation(app:intent:intentResponse:);
    return static WorkflowDataModels.modelForCustomIntentConfirmation(app:intent:intentResponse:deviceState:confirmLabel:cancelLabel:title:image:)( (unint64_t)(v1 + 14),  v1[25],  v1[26],  v33,  v19,  v1[46],  v1[47],  v1[48]);
  }

uint64_t CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation(app:intent:intentResponse:)()
{
  uint64_t v1 = v0[43];
  uint64_t v2 = v0[27];
  uint64_t v3 = type metadata accessor for WFDialogState();
  uint64_t v4 = App.appIdentifier.getter(v3);
  char v6 = static WFDialogState.isAppFirstRun(appId:)(v4, v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int **)(*(void *)v1 + 320LL);
  uint64_t v10 = (int *)((char *)v7 + *v7);
  uint64_t v8 = (void *)swift_task_alloc(v7[1]);
  v0[51] = v8;
  *uint64_t v8 = v0;
  v8[1] = CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation(app:intent:intentResponse:);
  return ((uint64_t (*)(void, void, uint64_t, void))v10)(v0[25], v0[26], v2, v6 & 1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v4 = *v1;
  uint64_t v2 = v4;
  OUTLINED_FUNCTION_10_0(&v4);
  *(void *)(v2 + 456) = v0;
  swift_task_dealloc();

  OUTLINED_FUNCTION_14();
  if (!v0)
  {
    OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_20();
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t (*v13)(void, void *, uint64_t, void);
  uint64_t v14;
  uint64_t v1 = (void *)v0[52];
  uint64_t v2 = OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_51(v2);
  v0[58] = OUTLINED_FUNCTION_57();
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[18];
  __swift_project_boxed_opaque_existential_1(v0 + 14, v3);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v0[22] = type metadata accessor for WorkflowDataModels(0LL);
  v0[23] = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels( (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels,  type metadata accessor for WorkflowDataModels,  (uint64_t)&protocol conformance descriptor for WorkflowDataModels);
  __swift_allocate_boxed_opaque_existential_1(v0 + 19);
  v5(v3, v4);
  char v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = OUTLINED_FUNCTION_23_4(v6);
  *(_OWORD *)(v7 + 16) = xmmword_17E150;
  *(void *)(v7 + 32) = v1;
  OUTLINED_FUNCTION_25_0(v7, v8, v9);
  v0[59] = v14;
  OUTLINED_FUNCTION_35_28((int *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(resultModel:dialog:outputGenerationManifest:));
  uint64_t v10 = v1;
  uint64_t v11 = (void *)swift_task_alloc(v5);
  v0[60] = v11;
  void *v11 = v0;
  v11[1] = CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation(app:intent:intentResponse:);
  return v13(v0[24], v0 + 19, v14, v0[36]);
}

{
  uint64_t v0;
  void *v1;
  OUTLINED_FUNCTION_50_0();
  uint64_t v1 = (void *)(v0 + 152);
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 480));
  swift_release();
  OUTLINED_FUNCTION_14();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 280);

  OUTLINED_FUNCTION_9_8(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 112));
  OUTLINED_FUNCTION_17_31();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  uint64_t v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return v4();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 504));
  OUTLINED_FUNCTION_20();
  swift_release();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 272);
  uint64_t v4 = *(void *)(v0 + 280);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_17_31();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  uint64_t v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_3_14(v5);
}

{
  uint64_t *v0;
  uint64_t v2;
  uint64_t v2 = *v0;
  OUTLINED_FUNCTION_223(*(void *)(v2 + 512), &v2);
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_3_14((uint64_t (*)(void))v0[1]);
}

{
  uint64_t v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_9_31();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_46_24();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_9_31();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v1 = *(void **)(v0 + 416);
  uint64_t v2 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 280);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20();

  OUTLINED_FUNCTION_9_8(v3, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_9_31();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation_rfv1(app:intent:intentResponse:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[33] = a4;
  v5[34] = v4;
  v5[31] = a2;
  v5[32] = a3;
  v5[30] = a1;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v5[35] = OUTLINED_FUNCTION_9_0(*(void *)(v8 - 8));
  uint64_t v9 = type metadata accessor for ActivityType(0LL);
  v5[36] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[37] = v10;
  v5[38] = OUTLINED_FUNCTION_9_0(v10);
  uint64_t v11 = type metadata accessor for NLContextUpdate(0LL);
  v5[39] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[40] = v12;
  v5[41] = OUTLINED_FUNCTION_9_0(v12);
  uint64_t v13 = type metadata accessor for TemplatingResult(0LL);
  v5[42] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v5[43] = v14;
  v5[44] = OUTLINED_FUNCTION_9_0(v14);
  uint64_t v15 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(*(void *)v4 + 192LL));
  v5[45] = v15;
  *uint64_t v15 = v5;
  v15[1] = CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation_rfv1(app:intent:intentResponse:);
  return v17(v5 + 9, a3, a2);
}

uint64_t CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation_rfv1(app:intent:intentResponse:)()
{
  uint64_t v4 = *v1;
  uint64_t v2 = v4;
  OUTLINED_FUNCTION_10_0(&v4);
  *(void *)(v2 + 368) = *(void *)(v2 + 72);
  *(_OWORD *)(v2 + 376) = *(_OWORD *)(v2 + 80);
  *(void *)(v2 + 392) = *(void *)(v2 + 96);
  *(_OWORD *)(v2 + 400) = *(_OWORD *)(v2 + 104);
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    return OUTLINED_FUNCTION_3_14((uint64_t (*)(void))v1[1]);
  }

  else
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

{
  void *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t (*v11)(void, void, void, uint64_t, void);
  uint64_t v1 = v0[53];
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v3 = v0[53];
    }
    else {
      uint64_t v3 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v0[53]);
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v3);
    OUTLINED_FUNCTION_20();
    if (v4) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v5 = type metadata accessor for WFDialogState();
    char v6 = App.appIdentifier.getter(v5);
    uint64_t v2 = static WFDialogState.isAppFirstRun(appId:)(v6, v7);
    OUTLINED_FUNCTION_37();
    goto LABEL_9;
  }

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v4 = *v1;
  uint64_t v2 = v4;
  OUTLINED_FUNCTION_10_0(&v4);
  *(void *)(v2 + 448) = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  OUTLINED_FUNCTION_51_21();

  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20_29();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v1 + 8));
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  OUTLINED_FUNCTION_51_21();

  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20_29();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v1 + 8));
}

void CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation_rfv1(app:intent:intentResponse:)()
{
  uint64_t v1 = *(int **)(**(void **)(*(void *)(v0 + 272) + 64LL) + 120LL);
  uint64_t v3 = (char *)v1 + *v1;
  uint64_t v2 = (void *)swift_task_alloc(v1[1]);
  *(void *)(v0 + 416) = v2;
  *uint64_t v2 = v0;
  v2[1] = CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation_rfv1(app:intent:intentResponse:);
  __asm { BR              X8 }

uint64_t CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation_rfv1(app:intent:intentResponse:)( uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 416);
  *(void *)(v3 + 424) = a1;
  *(void *)(v3 + 432) = v1;
  OUTLINED_FUNCTION_54_0(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  void *v41;
  uint64_t v27 = *(void *)(v1 + 392);
  uint64_t v29 = *(void *)(v1 + 400);
  uint64_t v41 = (void *)(v1 + 160);
  uint64_t v23 = *(void *)(v1 + 368);
  uint64_t v25 = *(void *)(v1 + 376);
  uint64_t v2 = *(void *)(v1 + 304);
  uint64_t v39 = *(void *)(v1 + 312);
  uint64_t v40 = (_OWORD *)(v1 + 200);
  uint64_t v3 = *(void *)(v1 + 296);
  uint64_t v31 = *(void *)(v1 + 352);
  uint64_t v33 = *(void *)(v1 + 288);
  uint64_t v4 = *(void **)(v1 + 272);
  uint64_t v35 = *(void *)(v1 + 280);
  uint64_t v37 = *(void *)(v1 + 320);
  uint64_t v5 = *(void **)(v1 + 256);
  char v6 = *(void **)(v1 + 264);
  static Device.current.getter((void *)(v1 + 120), a1);
  uint64_t v7 = type metadata accessor for CustomIntentNLContextProvider();
  uint64_t v8 = (void *)(swift_initStackObject(v7, v1 + 16) + 16);
  outlined init with take of AceServiceInvokerAsync((__int128 *)(v1 + 120), (uint64_t)v8);
  CustomIntentNLContextProvider.makeContextForConfirmIntent(intent:confirmIntentResponse:acceptLabel:denyLabel:)( v5,  v6,  v23,  v25);
  OUTLINED_FUNCTION_31_21();
  __swift_destroy_boxed_opaque_existential_1Tm(v8);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for ActivityType.confirmIntent(_:), v33);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, void *))(*v4 + 160LL))(v2, v5);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v33);
  outlined init with copy of DeviceState((uint64_t)(v4 + 2), v1 + 160);
  uint64_t v10 = v4[5];
  uint64_t v11 = v4[6];
  __swift_project_boxed_opaque_existential_1(v4 + 2, v10);
  LODWORD(v33) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v10, v11);
  LODWORD(v31) = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  LODWORD(v29) = (*(uint64_t (**)(void *))(*v4 + 168LL))(v5);
  uint64_t v12 = v35;
  OUTLINED_FUNCTION_29_20( v35,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 16),  v20,  v21,  v23,  v25,  v27,  v29,  v31,  v33,  v35,  v37,  v39);
  OUTLINED_FUNCTION_28_17(v12);
  if (v9)
  {
    *(void *)(v1 + 224) = type metadata accessor for DefaultFlowActivity(0LL);
    *(void *)(v1 + 232) = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels( (unint64_t *)&lazy protocol witness table cache variable for type DefaultFlowActivity and conformance DefaultFlowActivity,  (uint64_t (*)(uint64_t))&type metadata accessor for DefaultFlowActivity,  (uint64_t)&protocol conformance descriptor for DefaultFlowActivity);
    *(void *)(v1 + 200) = v9;
  }

  else
  {
    *(void *)(v1 + 232) = 0LL;
    void *v40 = 0u;
    *(_OWORD *)(v1 + 216) = 0u;
  }

  uint64_t v13 = *(void *)(v1 + 424);
  uint64_t v14 = *(void **)(v1 + 408);
  uint64_t v15 = *(void *)(v1 + 352);
  uint64_t v36 = *(void *)(v1 + 344);
  uint64_t v38 = *(void *)(v1 + 336);
  uint64_t v22 = *(void **)(v1 + 384);
  uint64_t v24 = *(void *)(v1 + 320);
  uint64_t v26 = *(void *)(v1 + 312);
  uint64_t v28 = *(void *)(v1 + 328);
  uint64_t v16 = *(void *)(v1 + 280);
  uint64_t v17 = type metadata accessor for AceOutput(0LL);
  OUTLINED_FUNCTION_33_9(v17, (uint64_t)&protocol witness table for AceOutput);
  OUTLINED_FUNCTION_41_22();
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v15,  v41,  v34 & 1,  v13,  v32 & 1,  v30 & 1,  v16,  _swiftEmptyArrayStorage,  v40);
  swift_bridgeObjectRelease();

  OUTLINED_FUNCTION_14();
  swift_release();
  OUTLINED_FUNCTION_37();
  outlined destroy of URL?(v16, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_1Tm(v41);
  outlined destroy of URL?((uint64_t)v40, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v28, v26);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v15, v38);
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_20_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_40_0();
  uint64_t v18 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return v18();
}

uint64_t CustomIntentConfirmIntentResponseGenerator.makeFlowCancelledResponse(app:intent:intentResponse:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[24] = a4;
  v5[25] = v4;
  v5[22] = a2;
  v5[23] = a3;
  v5[21] = a1;
  uint64_t v6 = type metadata accessor for DialogPhase(0LL);
  v5[26] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[27] = v7;
  v5[28] = OUTLINED_FUNCTION_4_0(v7);
  v5[29] = swift_task_alloc(v4);
  uint64_t v8 = type metadata accessor for OutputGenerationManifest(0LL);
  v5[30] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[31] = v9;
  v5[32] = OUTLINED_FUNCTION_9_0(v9);
  uint64_t v10 = type metadata accessor for CATOption(0LL);
  v5[33] = OUTLINED_FUNCTION_9_0(*(void *)(v10 - 8));
  uint64_t v11 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  v5[34] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[35] = v12;
  v5[36] = OUTLINED_FUNCTION_9_0(v12);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentConfirmIntentResponseGenerator.makeFlowCancelledResponse(app:intent:intentResponse:)( uint64_t a1)
{
  uint64_t v3 = *((void *)v1 + 35);
  uint64_t v2 = *((void *)v1 + 36);
  OUTLINED_FUNCTION_47_6(a1, enum case for RFFeatureFlags.ResponseFramework._SMART(_:));
  char v4 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  uint64_t v5 = OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  if ((v4 & 1) != 0)
  {
    uint64_t v6 = *((void *)v1 + 33);
    static Device.current.getter((void *)v1 + 16, v5);
    type metadata accessor for AutoShortcutCATs(0LL);
    OUTLINED_FUNCTION_59();
    uint64_t v7 = OUTLINED_FUNCTION_41_15();
    type metadata accessor for AutoShortcutCATsSimple(0LL);
    OUTLINED_FUNCTION_59();
    uint64_t v8 = CATWrapperSimple.__allocating_init(options:globals:)(v6, 0LL);
    type metadata accessor for RunLinkActionCATPatternsExecutor(0LL);
    OUTLINED_FUNCTION_59();
    uint64_t v9 = OUTLINED_FUNCTION_41_15();
    uint64_t v10 = type metadata accessor for AutoShortcutDialogTemplating();
    uint64_t inited = (void *)swift_initStackObject(v10, v1 + 1);
    *((void *)v1 + 37) = inited;
    inited[12] = v2;
    inited[13] = &protocol witness table for RunLinkActionCATPatternsExecutor;
    inited[9] = v9;
    outlined init with take of AceServiceInvokerAsync(v1 + 8, (uint64_t)(inited + 2));
    inited[7] = v7;
    inited[8] = v8;
    uint64_t v12 = (__int128 **)swift_task_alloc(dword_21B0B4);
    *((void *)v1 + 38) = v12;
    *uint64_t v12 = v1;
    v12[1] = (__int128 *)CustomIntentConfirmIntentResponseGenerator.makeFlowCancelledResponse(app:intent:intentResponse:);
    return AutoShortcutDialogTemplating.makeUserDeniedDialog()();
  }

  else
  {
    uint64_t v14 = (__int128 **)swift_task_alloc(dword_21B29C);
    *((void *)v1 + 44) = v14;
    *uint64_t v14 = v1;
    v14[1] = (__int128 *)CustomIntentConfirmIntentResponseGenerator.makeFlowCancelledResponse(app:intent:intentResponse:);
    return CustomIntentConfirmIntentResponseGenerator.makeFlowCancelledResponse_rfv1(app:intent:intentResponse:)( *((void *)v1 + 21),  v15,  *((void *)v1 + 23));
  }

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v7 = *v2;
  char v4 = v7;
  OUTLINED_FUNCTION_10_0(&v7);
  *(void *)(v4 + 312) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    *(void *)(v4 + 320) = a1;
    OUTLINED_FUNCTION_31_21();
    uint64_t v5 = AutoShortcutDialogTemplating.deinit();
    OUTLINED_FUNCTION_161(v5);
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

uint64_t CustomIntentConfirmIntentResponseGenerator.makeFlowCancelledResponse(app:intent:intentResponse:)()
{
  uint64_t v1 = (void *)v0[40];
  uint64_t v3 = v0[28];
  uint64_t v2 = v0[29];
  uint64_t v4 = v0[26];
  uint64_t v5 = v0[27];
  static DialogPhase.canceled.getter();
  id v6 = [v1 catId];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
  OutputGenerationManifest.init(dialogPhase:_:)(v3, CustomIntentDisambiguationItemContainer.init(items:), 0LL);
  OutputGenerationManifest.responseViewId.setter(v7);
  OUTLINED_FUNCTION_9_8(v2, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  uint64_t v8 = OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_51(v8);
  v0[41] = OUTLINED_FUNCTION_57();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v10 = OUTLINED_FUNCTION_23_4(v9);
  *(_OWORD *)(v10 + 16) = xmmword_17E150;
  *(void *)(v10 + 32) = v1;
  OUTLINED_FUNCTION_25_0(v10, v11, v12);
  v0[42] = v17;
  OUTLINED_FUNCTION_35_28((int *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:));
  id v13 = v1;
  uint64_t v14 = (void *)swift_task_alloc(v3);
  v0[43] = v14;
  *uint64_t v14 = v0;
  v14[1] = CustomIntentConfirmIntentResponseGenerator.makeFlowCancelledResponse(app:intent:intentResponse:);
  return v16(v0[21], v17, v0[32]);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 344));
  OUTLINED_FUNCTION_20();
  swift_release();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v1 = *(void *)(v0 + 248);

  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  swift_task_dealloc();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_3_14(v2);
}

{
  uint64_t *v0;
  uint64_t v2;
  uint64_t v2 = *v0;
  OUTLINED_FUNCTION_223(*(void *)(v2 + 352), &v2);
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_18_2((uint64_t (*)(void))v0[1]);
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_31_21();
  uint64_t v1 = AutoShortcutDialogTemplating.deinit();
  OUTLINED_FUNCTION_161(v1);
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentConfirmIntentResponseGenerator.makeFlowCancelledResponse_rfv1(app:intent:intentResponse:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[13] = a3;
  v4[14] = v3;
  v4[12] = a1;
  uint64_t v5 = type metadata accessor for ActivityType(0LL);
  v4[15] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[16] = v6;
  v4[17] = OUTLINED_FUNCTION_9_0(v6);
  uint64_t v7 = type metadata accessor for TemplatingResult(0LL);
  v4[18] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[19] = v8;
  uint64_t v9 = OUTLINED_FUNCTION_9_0(v8);
  v4[20] = v9;
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to static ResponseTemplates.taskAborted()[1]);
  v4[21] = v10;
  *uint64_t v10 = v4;
  v10[1] = CustomIntentConfirmIntentResponseGenerator.makeFlowCancelledResponse_rfv1(app:intent:intentResponse:);
  return static ResponseTemplates.taskAborted()(v9);
}

uint64_t CustomIntentConfirmIntentResponseGenerator.makeFlowCancelledResponse_rfv1(app:intent:intentResponse:)()
{
  *uint64_t v2 = *v1;
  *(void *)(v3 + 176) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v3 = *(void **)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 104);
  (*(void (**)(uint64_t, void, void))(v2 + 104))( v1,  enum case for ActivityType.canceled(_:),  *(void *)(v0 + 120));
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*v3 + 160LL))(v1, v4);
  OUTLINED_FUNCTION_30_11(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  outlined init with copy of DeviceState((uint64_t)(v3 + 2), v0 + 16);
  uint64_t v6 = v3[5];
  uint64_t v7 = v3[6];
  __swift_project_boxed_opaque_existential_1(v3 + 2, v6);
  uint64_t v8 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v6, v7);
  if (v5)
  {
    *(void *)(v0 + 80) = type metadata accessor for DefaultFlowActivity(0LL);
    *(void *)(v0 + 88) = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels( (unint64_t *)&lazy protocol witness table cache variable for type DefaultFlowActivity and conformance DefaultFlowActivity,  (uint64_t (*)(uint64_t))&type metadata accessor for DefaultFlowActivity,  (uint64_t)&protocol conformance descriptor for DefaultFlowActivity);
    *(void *)(v0 + 56) = v5;
  }

  else
  {
    *(void *)(v0 + 88) = 0LL;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
  }

  uint64_t v10 = *(void *)(v0 + 152);
  uint64_t v9 = *(void *)(v0 + 160);
  uint64_t v11 = type metadata accessor for AceOutput(0LL);
  OUTLINED_FUNCTION_33_9(v11, (uint64_t)&protocol witness table for AceOutput);
  OUTLINED_FUNCTION_41_22();
  static AceOutputHelper.makeCancellationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:canUseServerTTS:flowActivity:)( v9,  v0 + 16,  v8 & 1,  _swiftEmptyArrayStorage,  1LL,  v0 + 56);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
  outlined destroy of URL?(v0 + 56, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  OUTLINED_FUNCTION_30_11(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
  OUTLINED_FUNCTION_33_0();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return v12();
}

{
  uint64_t v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_40_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void CustomIntentConfirmIntentResponseGenerator.__allocating_init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  v26[2] = a7;
  v26[3] = a8;
  v26[0] = a5;
  v26[1] = a6;
  uint64_t v15 = (void *)swift_allocObject(v10, 144LL, 7LL);
  uint64_t v16 = a10[3];
  uint64_t v17 = a10[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a10, v16);
  OUTLINED_FUNCTION_66_1();
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v21 + 16))(v20);
  OUTLINED_FUNCTION_62_2(a1, a2, a3, a4, v22, v23, v24, v25, a9, (uint64_t)v20, v15, v16, v17);
  __swift_destroy_boxed_opaque_existential_1Tm(a10);
  OUTLINED_FUNCTION_24_0();
}

void CustomIntentConfirmIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  v25[2] = a7;
  v25[3] = a8;
  v25[0] = a5;
  v25[1] = a6;
  uint64_t v15 = a10[3];
  uint64_t v16 = a10[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a10, v15);
  OUTLINED_FUNCTION_66_1();
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v20 + 16))(v19);
  OUTLINED_FUNCTION_62_2(a1, a2, a3, a4, v21, v22, v23, v24, a9, (uint64_t)v19, v10, v15, v16);
  __swift_destroy_boxed_opaque_existential_1Tm(a10);
  OUTLINED_FUNCTION_24_0();
}

uint64_t type metadata accessor for CustomIntentConfirmIntentResponseGenerator()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin42CustomIntentConfirmIntentResponseGenerator);
}

uint64_t OUTLINED_FUNCTION_9_31()
{
  return swift_task_dealloc(*(void *)(v0 + 336));
}

uint64_t OUTLINED_FUNCTION_17_31()
{
  return swift_task_dealloc(*(void *)(v0 + 336));
}

uint64_t OUTLINED_FUNCTION_20_29()
{
  return swift_task_dealloc(*(void *)(v0 + 352));
}

uint64_t OUTLINED_FUNCTION_28_17(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 0LL, 1LL, v1);
}

uint64_t OUTLINED_FUNCTION_29_20@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return a2(a1, v13, a13);
}

uint64_t OUTLINED_FUNCTION_31_21()
{
  return swift_setDeallocating(v0);
}

char *OUTLINED_FUNCTION_35_28@<X0>(int *a1@<X8>)
{
  return (char *)a1 + *a1;
}

uint64_t OUTLINED_FUNCTION_41_22()
{
  return swift_retain(v0);
}

uint64_t OUTLINED_FUNCTION_46_24()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 376));
}

uint64_t OUTLINED_FUNCTION_51_21()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 400));
}

uint64_t RunCustomIntentCATsSimple.Properties.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_EFF68 + 4 * aK[a1]))( 0xD000000000000020LL,  0x80000000001912D0LL);
}

void sub_EFF68()
{
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::Properties_optional __swiftcall RunCustomIntentCATsSimple.Properties.init(rawValue:)( Swift::String rawValue)
{
  return result;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance RunCustomIntentCATsSimple.Properties( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance RunCustomIntentCATsSimple.Properties()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunCustomIntentCATsSimple.Properties( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RunCustomIntentCATsSimple.Properties( uint64_t a1)
{
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.Properties@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::Properties_optional *a2@<X8>)
{
  result.value = RunCustomIntentCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.Properties()
{
  unsigned __int8 v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = RunCustomIntentCATsSimple.Properties.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t RunCustomIntentCATsSimple.confirmSlotValue(device:parameterName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.confirmSlotValue(device:parameterName:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_42_13(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_25_28(v6);
  OUTLINED_FUNCTION_12_4(v8, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v9);
  if (v10)
  {
    uint64_t v11 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v12 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v12);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v13 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 56) = v13;
  OUTLINED_FUNCTION_74_2(v13, (uint64_t)RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:));
  OUTLINED_FUNCTION_26_8();
  OUTLINED_FUNCTION_67_11();
  return OUTLINED_FUNCTION_24_1(v14, v15, v16, v17);
}

void RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

void RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds.rawValue.getter()
{
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t RunCustomIntentCATsSimple.confirmSlotValueAsLabels(device:parameterName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.confirmSlotValueAsLabels(device:parameterName:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_42_13(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_25_28(v6);
  OUTLINED_FUNCTION_12_4(v8, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v9);
  if (v10)
  {
    uint64_t v11 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v12 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v12);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v13 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_68_9(v13);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds();
  OUTLINED_FUNCTION_75_2((uint64_t)RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:));
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_68_13();
  return OUTLINED_FUNCTION_23_3(v14, v15, v16, v17, v18, v19);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds,  &type metadata for RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds,  &type metadata for RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds);
  }

  return result;
}

uint64_t RunCustomIntentCATsSimple.confirmSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 48) = OUTLINED_FUNCTION_20_10(v5);
  *(void *)(v4 + 56) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.confirmSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:)()
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = OUTLINED_FUNCTION_19(v5, 224LL);
  uint64_t v7 = (__n128 *)OUTLINED_FUNCTION_79_4(v6);
  uint64_t v8 = OUTLINED_FUNCTION_4_3(v7, (__n128)xmmword_181AE0);
  if (v4)
  {
    uint64_t v8 = type metadata accessor for SirikitDeviceState(v8);
  }

  else
  {
    v3[7] = 0LL;
    v3[8] = 0LL;
  }

  OUTLINED_FUNCTION_27_23(v8);
  OUTLINED_FUNCTION_12_4(v10, v9, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v11 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_23_23(v11);
  if (v12)
  {
    uint64_t v13 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[15] = v0;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
    OUTLINED_FUNCTION_12_8();
  }

  OUTLINED_FUNCTION_98_2();
  OUTLINED_FUNCTION_67_7((uint64_t)"localizedAppName");
  OUTLINED_FUNCTION_12_4(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = OUTLINED_FUNCTION_32_16();
  if (v12)
  {
    OUTLINED_FUNCTION_11_4(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[21] = v0;
    uint64_t v18 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v18);
  }

  OUTLINED_FUNCTION_130_2();
  OUTLINED_FUNCTION_78_6();
  OUTLINED_FUNCTION_129_3(v19);
  uint64_t v20 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 72) = v20;
  OUTLINED_FUNCTION_119_5( v20,  (uint64_t)RunCustomIntentCATsSimple.confirmSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:));
  uint64_t v21 = OUTLINED_FUNCTION_66_12(v2 + 30);
  return OUTLINED_FUNCTION_24_1(v21, v22, v23, v24);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_18_24();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_49_16();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_15_0();
    uint64_t v2 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::ConfirmSlotValueWithCustomTextDialogIds_optional __swiftcall RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

uint64_t RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x4E707041776F6873LL;
  }
  else {
    return 0x6D614E7070416F6ELL;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds( char *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::ConfirmSlotValueWithCustomTextDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::ConfirmSlotValueWithCustomTextDialogIds_optional *a2@<X8>)
{
  result.value = RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds()
{
  char v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t RunCustomIntentCATsSimple.confirmSlotValueWithCustomTextAsLabels(device:customPrompt:localizedAppName:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 48) = OUTLINED_FUNCTION_20_10(v5);
  *(void *)(v4 + 56) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.confirmSlotValueWithCustomTextAsLabels(device:customPrompt:localizedAppName:shouldShowAppAttribution:)()
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_19(v4, 224LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_79_4(v5);
  uint64_t v7 = OUTLINED_FUNCTION_4_3(v6, (__n128)xmmword_181AE0);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    v2[7] = 0LL;
    v2[8] = 0LL;
  }

  OUTLINED_FUNCTION_27_23(v7);
  OUTLINED_FUNCTION_12_4(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_23_23(v10);
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v0;
    uint64_t v13 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v13);
    OUTLINED_FUNCTION_12_8();
  }

  OUTLINED_FUNCTION_98_2();
  OUTLINED_FUNCTION_67_7((uint64_t)"localizedAppName");
  OUTLINED_FUNCTION_12_4(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = OUTLINED_FUNCTION_32_16();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v0;
    uint64_t v17 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v17);
  }

  OUTLINED_FUNCTION_130_2();
  OUTLINED_FUNCTION_78_6();
  OUTLINED_FUNCTION_129_3(v18);
  uint64_t v19 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_147_1(v19);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds();
  OUTLINED_FUNCTION_116_6((uint64_t)RunCustomIntentCATsSimple.confirmSlotValueWithCustomTextAsLabels(device:customPrompt:localizedAppName:shouldShowAppAttribution:));
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_65_14();
  return OUTLINED_FUNCTION_23_3(v20, v21, v22, v23, v24, v25);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_18_24();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_49_16();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_15_0();
    uint64_t v2 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_171_0();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds,  &type metadata for RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds,  &type metadata for RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds);
  }

  return result;
}

uint64_t RunCustomIntentCATsSimple.describeCustomIntentItem(device:item:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.describeCustomIntentItem(device:item:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_42_13(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_107_3(v6);
  OUTLINED_FUNCTION_12_4(v8, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v9);
  if (v10)
  {
    uint64_t v11 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v12 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v12);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v13 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 56) = v13;
  OUTLINED_FUNCTION_74_2(v13, (uint64_t)RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:));
  OUTLINED_FUNCTION_26_8();
  OUTLINED_FUNCTION_67_11();
  return OUTLINED_FUNCTION_24_1(v14, v15, v16, v17);
}

void RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

uint64_t RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds.rawValue.getter()
{
  return 1835365481LL;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds( void *a1@<X8>)
{
}

uint64_t RunCustomIntentCATsSimple.describeCustomIntentItemAsLabels(device:item:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.describeCustomIntentItemAsLabels(device:item:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_42_13(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_107_3(v6);
  OUTLINED_FUNCTION_12_4(v8, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v9);
  if (v10)
  {
    uint64_t v11 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v12 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v12);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v13 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_68_9(v13);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds and conformance RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds();
  OUTLINED_FUNCTION_75_2((uint64_t)RunVoiceCommandCATsSimple.yesAndCancel(device:intentVerb:));
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_68_13();
  return OUTLINED_FUNCTION_23_3(v14, v15, v16, v17, v18, v19);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds and conformance RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds and conformance RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds and conformance RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds,  &type metadata for RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds and conformance RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds and conformance RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds and conformance RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds,  &type metadata for RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds and conformance RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds);
  }

  return result;
}

uint64_t RunCustomIntentCATsSimple.deviceUnlock(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunCustomIntentCATsSimple.deviceUnlock(device:));
}

uint64_t RunCustomIntentCATsSimple.deviceUnlock(device:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_83_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_59_1();
  *(void *)(v0 + 40) = v7;
  OUTLINED_FUNCTION_68_2(v7, (uint64_t)RunVoiceCommandCATsSimple.openAppFailed(device:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v8 = OUTLINED_FUNCTION_94_3(28LL);
  return OUTLINED_FUNCTION_44_11(v8, v9, v10, v11);
}

void RunCustomIntentCATsSimple.DeviceUnlockDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.DeviceUnlockDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

void RunCustomIntentCATsSimple.DeviceUnlockDialogIds.rawValue.getter()
{
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.DeviceUnlockDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.DeviceUnlockDialogIds( void *a1@<X8>)
{
}

uint64_t RunCustomIntentCATsSimple.deviceUnlockAsLabels(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunCustomIntentCATsSimple.deviceUnlockAsLabels(device:));
}

uint64_t RunCustomIntentCATsSimple.deviceUnlockAsLabels(device:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_83_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  uint64_t v7 = OUTLINED_FUNCTION_59_1();
  OUTLINED_FUNCTION_135_2(v7);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.DeviceUnlockDialogIds and conformance RunCustomIntentCATsSimple.DeviceUnlockDialogIds();
  OUTLINED_FUNCTION_69_2((uint64_t)RunVoiceCommandCATsSimple.openAppFailedAsLabels(device:));
  OUTLINED_FUNCTION_45_1();
  unint64_t v8 = OUTLINED_FUNCTION_95_3(28LL);
  return OUTLINED_FUNCTION_45_16(v8, v9, v10, v11, v12, v13);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.DeviceUnlockDialogIds and conformance RunCustomIntentCATsSimple.DeviceUnlockDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DeviceUnlockDialogIds and conformance RunCustomIntentCATsSimple.DeviceUnlockDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DeviceUnlockDialogIds and conformance RunCustomIntentCATsSimple.DeviceUnlockDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.DeviceUnlockDialogIds,  &type metadata for RunCustomIntentCATsSimple.DeviceUnlockDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DeviceUnlockDialogIds and conformance RunCustomIntentCATsSimple.DeviceUnlockDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DeviceUnlockDialogIds and conformance RunCustomIntentCATsSimple.DeviceUnlockDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DeviceUnlockDialogIds and conformance RunCustomIntentCATsSimple.DeviceUnlockDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.DeviceUnlockDialogIds,  &type metadata for RunCustomIntentCATsSimple.DeviceUnlockDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DeviceUnlockDialogIds and conformance RunCustomIntentCATsSimple.DeviceUnlockDialogIds);
  }

  return result;
}

uint64_t RunCustomIntentCATsSimple.disambiguateSlotValue(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunCustomIntentCATsSimple.disambiguateSlotValue(device:));
}

uint64_t RunCustomIntentCATsSimple.disambiguateSlotValue(device:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_83_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_59_1();
  *(void *)(v0 + 40) = v7;
  OUTLINED_FUNCTION_68_2(v7, (uint64_t)RunVoiceCommandCATsSimple.openAppFailedAsLabels(device:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v8 = OUTLINED_FUNCTION_94_3(37LL);
  return OUTLINED_FUNCTION_44_11(v8, v9, v10, v11);
}

void RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t RunCustomIntentCATsSimple.disambiguateSlotValueAsLabels(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunCustomIntentCATsSimple.disambiguateSlotValueAsLabels(device:));
}

uint64_t RunCustomIntentCATsSimple.disambiguateSlotValueAsLabels(device:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_83_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  uint64_t v7 = OUTLINED_FUNCTION_59_1();
  OUTLINED_FUNCTION_135_2(v7);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds();
  OUTLINED_FUNCTION_69_2((uint64_t)RunVoiceCommandCATsSimple.openAppFailedAsLabels(device:));
  OUTLINED_FUNCTION_45_1();
  unint64_t v8 = OUTLINED_FUNCTION_95_3(37LL);
  return OUTLINED_FUNCTION_45_16(v8, v9, v10, v11, v12, v13);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds,  &type metadata for RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds,  &type metadata for RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds);
  }

  return result;
}

uint64_t RunCustomIntentCATsSimple.disambiguateSlotValueItems(device:customPrompt:items:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 48) = OUTLINED_FUNCTION_10_8(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.disambiguateSlotValueItems(device:customPrompt:items:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 176LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_50_7(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17FDF0);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    v1[7] = 0LL;
    v1[8] = 0LL;
  }

  uint64_t v7 = v0[6];
  v1[6] = v2;
  OUTLINED_FUNCTION_35_22(v6);
  OUTLINED_FUNCTION_12_4(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_61_1();
  __swift_getEnumTagSinglePayload(v7, 1LL, v10);
  OUTLINED_FUNCTION_41_23();
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v13 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v13);
    OUTLINED_FUNCTION_12_8();
  }

  OUTLINED_FUNCTION_139_3();
  v1[21] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  v1[18] = v1 + 12;
  OUTLINED_FUNCTION_124_5();
  uint64_t v14 = (void *)OUTLINED_FUNCTION_59_1();
  v0[8] = v14;
  OUTLINED_FUNCTION_119_5( v14,  (uint64_t)RunCustomIntentCATsSimple.disambiguateSlotValueItems(device:customPrompt:items:));
  OUTLINED_FUNCTION_67_11();
  return OUTLINED_FUNCTION_24_1(v15, v16, v17, v18);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_12_13();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_150_1();
    OUTLINED_FUNCTION_40_0();
    uint64_t v2 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

void RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t RunCustomIntentCATsSimple.disambiguateSlotValueItemsAsLabels(device:customPrompt:items:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 48) = OUTLINED_FUNCTION_10_8(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.disambiguateSlotValueItemsAsLabels(device:customPrompt:items:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 176LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_50_7(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17FDF0);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    v1[7] = 0LL;
    v1[8] = 0LL;
  }

  uint64_t v7 = v0[6];
  v1[6] = v2;
  OUTLINED_FUNCTION_35_22(v6);
  OUTLINED_FUNCTION_12_4(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_61_1();
  __swift_getEnumTagSinglePayload(v7, 1LL, v10);
  OUTLINED_FUNCTION_41_23();
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v13 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v13);
    OUTLINED_FUNCTION_12_8();
  }

  OUTLINED_FUNCTION_139_3();
  v1[21] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  v1[18] = v1 + 12;
  OUTLINED_FUNCTION_124_5();
  v0[8] = OUTLINED_FUNCTION_59_1();
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds();
  OUTLINED_FUNCTION_116_6((uint64_t)RunCustomIntentCATsSimple.disambiguateSlotValueItemsAsLabels(device:customPrompt:items:));
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_68_13();
  return OUTLINED_FUNCTION_23_3(v14, v15, v16, v17, v18, v19);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_12_13();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_150_1();
    OUTLINED_FUNCTION_40_0();
    uint64_t v2 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds,  &type metadata for RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds,  &type metadata for RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds);
  }

  return result;
}

uint64_t RunCustomIntentCATsSimple.disambiguateSlotValueWithCustomText(device:customIntroductionPrompt:customSelectionPrompt:localizedAppName:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v5[7] = OUTLINED_FUNCTION_20_10(v6);
  v5[8] = OUTLINED_FUNCTION_11_0();
  v5[9] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.disambiguateSlotValueWithCustomText(device:customIntroductionPrompt:customSelectionPrompt:localizedAppName:shouldShowAppAttribution:)()
{
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = OUTLINED_FUNCTION_19(v5, 272LL);
  uint64_t v7 = (__n128 *)OUTLINED_FUNCTION_138_3(v6);
  uint64_t v8 = OUTLINED_FUNCTION_4_3(v7, (__n128)xmmword_180120);
  if (v4)
  {
    uint64_t v8 = type metadata accessor for SirikitDeviceState(v8);
  }

  else
  {
    *(void *)(v2 + 56) = 0LL;
    *(void *)(v2 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_120_5(v8);
  OUTLINED_FUNCTION_40_6();
  OUTLINED_FUNCTION_12_4(v10, v9, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v11 = OUTLINED_FUNCTION_61_1();
  __swift_getEnumTagSinglePayload(v1, 1LL, v11);
  OUTLINED_FUNCTION_41_23();
  if (v12)
  {
    uint64_t v13 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v2 + 120) = v11;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v15 = OUTLINED_FUNCTION_162_1();
  *(void *)(v2 + 128) = v16;
  *(void *)(v2 + 136) = 0x8000000000195890LL;
  OUTLINED_FUNCTION_12_4(v15, v17, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v18 = OUTLINED_FUNCTION_16_3();
  if (v12)
  {
    OUTLINED_FUNCTION_11_4(v18, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v2 + 168) = v11;
    uint64_t v19 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v19);
  }

  uint64_t v20 = OUTLINED_FUNCTION_158_2();
  *(void *)(v2 + 176) = v21;
  *(void *)(v2 + 184) = 0x8000000000193910LL;
  OUTLINED_FUNCTION_12_4(v20, v22, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v23 = OUTLINED_FUNCTION_41_5();
  if (v12)
  {
    OUTLINED_FUNCTION_11_4(v23, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v2 + 216) = v11;
    uint64_t v24 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v24);
  }

  char v25 = *(_BYTE *)(v0 + 104);
  *(void *)(v2 + 224) = v3;
  *(void *)(v2 + 232) = 0x8000000000193970LL;
  *(void *)(v2 + 264) = &type metadata for Bool;
  *(_BYTE *)(v2 + 240) = v25;
  uint64_t v26 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 88) = v26;
  *uint64_t v26 = v0;
  v26[1] = RunCustomIntentCATsSimple.disambiguateSlotValueWithCustomText(device:customIntroductionPrompt:customSelectionPrompt:localizedAppName:shouldShowAppAttribution:);
  uint64_t v27 = OUTLINED_FUNCTION_30_19(v3 + 27);
  return OUTLINED_FUNCTION_9_25(v27, v28, v29, v30);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_37_22();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_4_1();
  }

  else
  {
    OUTLINED_FUNCTION_80_8();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    uint64_t v2 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_37_1(v2, v3);
  }

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::DisambiguateSlotValueWithCustomTextDialogIds_optional __swiftcall RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds.init(rawValue:);
  RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

uint64_t RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds.rawValue.getter( unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_F1674 + 4 * byte_186C4B[a1]))( 0x6D6F74737563LL,  0xE600000000000000LL);
}

uint64_t sub_F1674()
{
  return 0x4E707041776F6873LL;
}

unint64_t sub_F1694()
{
  return OUTLINED_FUNCTION_0_22(19LL);
}

uint64_t sub_F16B0()
{
  return 0x72746E49776F6873LL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds()
{
  specialized == infix<A>(_:_:)();
}

void protocol witness for Hashable.hashValue.getter in conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds()
{
}

void protocol witness for Hashable.hash(into:) in conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds()
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::DisambiguateSlotValueWithCustomTextDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::DisambiguateSlotValueWithCustomTextDialogIds_optional *a2@<X8>)
{
  result.value = RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds()
{
  unsigned __int8 v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t RunCustomIntentCATsSimple.disambiguateSlotValueWithCustomTextAsLabels(device:customIntroductionPrompt:customSelectionPrompt:localizedAppName:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v5[7] = OUTLINED_FUNCTION_20_10(v6);
  v5[8] = OUTLINED_FUNCTION_11_0();
  v5[9] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.disambiguateSlotValueWithCustomTextAsLabels(device:customIntroductionPrompt:customSelectionPrompt:localizedAppName:shouldShowAppAttribution:)()
{
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = OUTLINED_FUNCTION_19(v5, 272LL);
  uint64_t v7 = (__n128 *)OUTLINED_FUNCTION_138_3(v6);
  uint64_t v8 = OUTLINED_FUNCTION_4_3(v7, (__n128)xmmword_180120);
  if (v4)
  {
    uint64_t v8 = type metadata accessor for SirikitDeviceState(v8);
  }

  else
  {
    *(void *)(v2 + 56) = 0LL;
    *(void *)(v2 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_120_5(v8);
  OUTLINED_FUNCTION_40_6();
  OUTLINED_FUNCTION_12_4(v10, v9, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v11 = OUTLINED_FUNCTION_61_1();
  __swift_getEnumTagSinglePayload(v1, 1LL, v11);
  OUTLINED_FUNCTION_41_23();
  if (v12)
  {
    uint64_t v13 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v2 + 120) = v11;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v15 = OUTLINED_FUNCTION_162_1();
  *(void *)(v2 + 128) = v16;
  *(void *)(v2 + 136) = 0x8000000000195890LL;
  OUTLINED_FUNCTION_12_4(v15, v17, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v18 = OUTLINED_FUNCTION_16_3();
  if (v12)
  {
    OUTLINED_FUNCTION_11_4(v18, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v2 + 168) = v11;
    uint64_t v19 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v19);
  }

  uint64_t v20 = OUTLINED_FUNCTION_158_2();
  *(void *)(v2 + 176) = v21;
  *(void *)(v2 + 184) = 0x8000000000193910LL;
  OUTLINED_FUNCTION_12_4(v20, v22, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v23 = OUTLINED_FUNCTION_41_5();
  if (v12)
  {
    OUTLINED_FUNCTION_11_4(v23, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v2 + 216) = v11;
    uint64_t v24 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v24);
  }

  char v25 = *(_BYTE *)(v0 + 104);
  *(void *)(v2 + 224) = v3;
  *(void *)(v2 + 232) = 0x8000000000193970LL;
  *(void *)(v2 + 264) = &type metadata for Bool;
  *(_BYTE *)(v2 + 240) = v25;
  uint64_t v26 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  *(void *)(v0 + 88) = v26;
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds();
  *uint64_t v26 = v0;
  v26[1] = RunCustomIntentCATsSimple.disambiguateSlotValueWithCustomTextAsLabels(device:customIntroductionPrompt:customSelectionPrompt:localizedAppName:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_54_19();
  return OUTLINED_FUNCTION_23_17(v27, v28, v29, v30, v31, v32);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_37_22();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_4_1();
  }

  else
  {
    OUTLINED_FUNCTION_80_8();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    uint64_t v2 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_37_1(v2, v3);
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_160_1();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  return OUTLINED_FUNCTION_22_2(*(uint64_t (**)(void))(v0 + 8));
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds,  &type metadata for RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds,  &type metadata for RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds);
  }

  return result;
}

uint64_t RunCustomIntentCATsSimple.doneButton()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = ListShortcutsCATsSimple.viewShortcutsInAppAsLabels();
  OUTLINED_FUNCTION_45_1();
  return v3(0xD00000000000001ALL);
}

void RunCustomIntentCATsSimple.DoneButtonDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.DoneButtonDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.DoneButtonDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t RunCustomIntentCATsSimple.doneButtonAsLabels()()
{
  Swift::OpaquePointer v1 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  *(void *)(v0 + 16) = v1;
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.DoneButtonDialogIds and conformance RunCustomIntentCATsSimple.DoneButtonDialogIds();
  *Swift::OpaquePointer v1 = v0;
  v1[1] = ListShortcutsCATsSimple.viewShortcutsInApp();
  OUTLINED_FUNCTION_45_1();
  return v3(0xD00000000000001ALL);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.DoneButtonDialogIds and conformance RunCustomIntentCATsSimple.DoneButtonDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DoneButtonDialogIds and conformance RunCustomIntentCATsSimple.DoneButtonDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DoneButtonDialogIds and conformance RunCustomIntentCATsSimple.DoneButtonDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.DoneButtonDialogIds,  &type metadata for RunCustomIntentCATsSimple.DoneButtonDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DoneButtonDialogIds and conformance RunCustomIntentCATsSimple.DoneButtonDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DoneButtonDialogIds and conformance RunCustomIntentCATsSimple.DoneButtonDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DoneButtonDialogIds and conformance RunCustomIntentCATsSimple.DoneButtonDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.DoneButtonDialogIds,  &type metadata for RunCustomIntentCATsSimple.DoneButtonDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DoneButtonDialogIds and conformance RunCustomIntentCATsSimple.DoneButtonDialogIds);
  }

  return result;
}

uint64_t RunCustomIntentCATsSimple.errorWithCodeCustomError(device:customDialog:localizedAppName:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 48) = OUTLINED_FUNCTION_20_10(v4);
  *(void *)(v3 + 56) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.errorWithCodeCustomError(device:customDialog:localizedAppName:)()
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = OUTLINED_FUNCTION_19(v5, 176LL);
  uint64_t v7 = (__n128 *)OUTLINED_FUNCTION_79_4(v6);
  uint64_t v8 = OUTLINED_FUNCTION_4_3(v7, (__n128)xmmword_17FDF0);
  if (v4)
  {
    uint64_t v8 = type metadata accessor for SirikitDeviceState(v8);
  }

  else
  {
    v3[7] = 0LL;
    v3[8] = 0LL;
  }

  OUTLINED_FUNCTION_46_21(v8);
  OUTLINED_FUNCTION_12_4(v10, v9, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v11 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_23_23(v11);
  if (v12)
  {
    uint64_t v13 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[15] = v0;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
    OUTLINED_FUNCTION_12_8();
  }

  OUTLINED_FUNCTION_98_2();
  OUTLINED_FUNCTION_67_7((uint64_t)"localizedAppName");
  OUTLINED_FUNCTION_12_4(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = OUTLINED_FUNCTION_32_16();
  if (v12)
  {
    OUTLINED_FUNCTION_11_4(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[21] = v0;
    uint64_t v18 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v18);
  }

  uint64_t v19 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 72) = v19;
  OUTLINED_FUNCTION_119_5( v19,  (uint64_t)RunCustomIntentCATsSimple.confirmSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:));
  uint64_t v20 = OUTLINED_FUNCTION_66_12(v2 + 24);
  return OUTLINED_FUNCTION_24_1(v20, v21, v22, v23);
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::ErrorWithCodeCustomErrorDialogIds_optional __swiftcall RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds.init(rawValue:);
  RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

void RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds.init(rawValue:)( Swift::String a1, Swift::OpaquePointer a2)
{
}

uint64_t RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)j__OUTLINED_FUNCTION_55_6 + 4 * byte_186C4F[a1]))( 0x65756E69746E6F63LL,  0xED00007070416E49LL);
}

uint64_t sub_F1D54()
{
  return 0x43746C7561666564LL;
}

uint64_t sub_F1D78()
{
  return 0x45746C7561666564LL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds( char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds()
{
}

void protocol witness for Hashable.hash(into:) in conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds( uint64_t a1)
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::ErrorWithCodeCustomErrorDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::ErrorWithCodeCustomErrorDialogIds_optional *a2@<X8>)
{
  result.value = RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds()
{
  unsigned __int8 v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t RunCustomIntentCATsSimple.errorWithCodeCustomErrorAsLabels(device:customDialog:localizedAppName:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 48) = OUTLINED_FUNCTION_20_10(v4);
  *(void *)(v3 + 56) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.errorWithCodeCustomErrorAsLabels(device:customDialog:localizedAppName:)()
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_19(v4, 176LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_79_4(v5);
  uint64_t v7 = OUTLINED_FUNCTION_4_3(v6, (__n128)xmmword_17FDF0);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    v2[7] = 0LL;
    v2[8] = 0LL;
  }

  OUTLINED_FUNCTION_46_21(v7);
  OUTLINED_FUNCTION_12_4(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_23_23(v10);
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v0;
    uint64_t v13 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v13);
    OUTLINED_FUNCTION_12_8();
  }

  OUTLINED_FUNCTION_98_2();
  OUTLINED_FUNCTION_67_7((uint64_t)"localizedAppName");
  OUTLINED_FUNCTION_12_4(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = OUTLINED_FUNCTION_32_16();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v0;
    uint64_t v17 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v17);
  }

  uint64_t v18 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_147_1(v18);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds();
  OUTLINED_FUNCTION_116_6((uint64_t)RunCustomIntentCATsSimple.confirmSlotValueWithCustomTextAsLabels(device:customPrompt:localizedAppName:shouldShowAppAttribution:));
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_65_14();
  return OUTLINED_FUNCTION_23_3(v19, v20, v21, v22, v23, v24);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds,  &type metadata for RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds,  &type metadata for RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds);
  }

  return result;
}

uint64_t RunCustomIntentCATsSimple.extensionTimedOut(device:actionName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.extensionTimedOut(device:actionName:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_42_13(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_82_8(v6);
  OUTLINED_FUNCTION_12_4(v8, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v9);
  if (v10)
  {
    uint64_t v11 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v12 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v12);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v13 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 56) = v13;
  OUTLINED_FUNCTION_74_2(v13, (uint64_t)RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:));
  OUTLINED_FUNCTION_26_8();
  OUTLINED_FUNCTION_67_11();
  return OUTLINED_FUNCTION_24_1(v14, v15, v16, v17);
}

void RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

void RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds.rawValue.getter()
{
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds( void *a1@<X8>)
{
}

uint64_t RunCustomIntentCATsSimple.extensionTimedOutAsLabels(device:actionName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.extensionTimedOutAsLabels(device:actionName:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_42_13(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_82_8(v6);
  OUTLINED_FUNCTION_12_4(v8, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v9);
  if (v10)
  {
    uint64_t v11 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v12 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v12);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v13 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_68_9(v13);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds and conformance RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds();
  OUTLINED_FUNCTION_75_2((uint64_t)RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:));
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_68_13();
  return OUTLINED_FUNCTION_23_3(v14, v15, v16, v17, v18, v19);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds and conformance RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds and conformance RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds and conformance RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds,  &type metadata for RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds and conformance RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds and conformance RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds and conformance RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds,  &type metadata for RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds and conformance RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds);
  }

  return result;
}

uint64_t RunCustomIntentCATsSimple.followupNotSupported(device:localizedAppName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.followupNotSupported(device:localizedAppName:)()
{
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_19(v4, 128LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_42_13(v5);
  uint64_t v7 = OUTLINED_FUNCTION_4_3(v6, (__n128)xmmword_17E660);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_111_5(v7);
  OUTLINED_FUNCTION_40_6();
  OUTLINED_FUNCTION_12_4(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v10);
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v13 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v13);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v14 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 56) = v14;
  OUTLINED_FUNCTION_74_2(v14, (uint64_t)RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:));
  uint64_t v15 = OUTLINED_FUNCTION_30_19(v2 + 20);
  return OUTLINED_FUNCTION_9_25(v15, v16, v17, v18);
}

void RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

void RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds.rawValue.getter()
{
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t RunCustomIntentCATsSimple.followupNotSupportedAsLabels(device:localizedAppName:)( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.followupNotSupportedAsLabels(device:localizedAppName:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_42_13(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_111_5(v6);
  OUTLINED_FUNCTION_40_6();
  OUTLINED_FUNCTION_12_4(v8, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v9);
  if (v10)
  {
    uint64_t v11 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v12 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v12);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v13 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_68_9(v13);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds and conformance RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds();
  OUTLINED_FUNCTION_75_2((uint64_t)RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:));
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_54_19();
  return OUTLINED_FUNCTION_23_17(v14, v15, v16, v17, v18, v19);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds and conformance RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds and conformance RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds and conformance RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds,  &type metadata for RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds and conformance RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds and conformance RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds and conformance RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds,  &type metadata for RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds and conformance RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds);
  }

  return result;
}

uint64_t RunCustomIntentCATsSimple.handoffNotificationMessage(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunCustomIntentCATsSimple.handoffNotificationMessage(device:));
}

uint64_t RunCustomIntentCATsSimple.handoffNotificationMessage(device:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_83_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_59_1();
  *(void *)(v0 + 40) = v7;
  OUTLINED_FUNCTION_68_2(v7, (uint64_t)RunVoiceCommandCATsSimple.openAppFailedAsLabels(device:));
  unint64_t v8 = OUTLINED_FUNCTION_94_3(42LL);
  return OUTLINED_FUNCTION_44_11(v8, v9, v10, v11);
}

void RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t RunCustomIntentCATsSimple.handoffNotificationMessageAsLabels(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunCustomIntentCATsSimple.handoffNotificationMessageAsLabels(device:));
}

uint64_t RunCustomIntentCATsSimple.handoffNotificationMessageAsLabels(device:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_83_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  uint64_t v7 = OUTLINED_FUNCTION_59_1();
  OUTLINED_FUNCTION_135_2(v7);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds();
  OUTLINED_FUNCTION_69_2((uint64_t)RunVoiceCommandCATsSimple.openAppFailedAsLabels(device:));
  OUTLINED_FUNCTION_45_1();
  unint64_t v8 = OUTLINED_FUNCTION_95_3(42LL);
  return OUTLINED_FUNCTION_45_16(v8, v9, v10, v11, v12, v13);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds,  &type metadata for RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds,  &type metadata for RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds);
  }

  return result;
}

uint64_t RunCustomIntentCATsSimple.handoffNotificationMessageHomePodOnly(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunCustomIntentCATsSimple.handoffNotificationMessageHomePodOnly(device:));
}

uint64_t RunCustomIntentCATsSimple.handoffNotificationMessageHomePodOnly(device:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_83_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_59_1();
  *(void *)(v0 + 40) = v7;
  OUTLINED_FUNCTION_68_2(v7, (uint64_t)RunVoiceCommandCATsSimple.openAppFailedAsLabels(device:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v8 = OUTLINED_FUNCTION_94_3(53LL);
  return OUTLINED_FUNCTION_44_11(v8, v9, v10, v11);
}

void RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds.init(rawValue:)( Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

void RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds.rawValue.getter()
{
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds( void *a1@<X8>)
{
}

uint64_t RunCustomIntentCATsSimple.handoffNotificationMessageHomePodOnlyAsLabels(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunCustomIntentCATsSimple.handoffNotificationMessageHomePodOnlyAsLabels(device:));
}

uint64_t RunCustomIntentCATsSimple.handoffNotificationMessageHomePodOnlyAsLabels(device:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_83_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  uint64_t v7 = OUTLINED_FUNCTION_59_1();
  OUTLINED_FUNCTION_135_2(v7);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds();
  OUTLINED_FUNCTION_69_2((uint64_t)RunVoiceCommandCATsSimple.openAppFailedAsLabels(device:));
  OUTLINED_FUNCTION_45_1();
  unint64_t v8 = OUTLINED_FUNCTION_95_3(53LL);
  return OUTLINED_FUNCTION_45_16(v8, v9, v10, v11, v12, v13);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds,  &type metadata for RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds,  &type metadata for RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds);
  }

  return result;
}

uint64_t RunCustomIntentCATsSimple.initiateHandoff(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunCustomIntentCATsSimple.initiateHandoff(device:));
}

uint64_t RunCustomIntentCATsSimple.initiateHandoff(device:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_83_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_59_1();
  *(void *)(v0 + 40) = v7;
  OUTLINED_FUNCTION_68_2(v7, (uint64_t)RunVoiceCommandCATsSimple.openAppFailedAsLabels(device:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v8 = OUTLINED_FUNCTION_94_3(31LL);
  return OUTLINED_FUNCTION_44_11(v8, v9, v10, v11);
}

void RunCustomIntentCATsSimple.InitiateHandoffDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.InitiateHandoffDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.InitiateHandoffDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.InitiateHandoffDialogIds( void *a1@<X8>)
{
}

uint64_t RunCustomIntentCATsSimple.initiateHandoffAsLabels(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunCustomIntentCATsSimple.initiateHandoffAsLabels(device:));
}

uint64_t RunCustomIntentCATsSimple.initiateHandoffAsLabels(device:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_83_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  uint64_t v7 = OUTLINED_FUNCTION_59_1();
  OUTLINED_FUNCTION_135_2(v7);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.InitiateHandoffDialogIds and conformance RunCustomIntentCATsSimple.InitiateHandoffDialogIds();
  OUTLINED_FUNCTION_69_2((uint64_t)RunVoiceCommandCATsSimple.openAppFailedAsLabels(device:));
  OUTLINED_FUNCTION_45_1();
  unint64_t v8 = OUTLINED_FUNCTION_95_3(31LL);
  return OUTLINED_FUNCTION_45_16(v8, v9, v10, v11, v12, v13);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.InitiateHandoffDialogIds and conformance RunCustomIntentCATsSimple.InitiateHandoffDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.InitiateHandoffDialogIds and conformance RunCustomIntentCATsSimple.InitiateHandoffDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.InitiateHandoffDialogIds and conformance RunCustomIntentCATsSimple.InitiateHandoffDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.InitiateHandoffDialogIds,  &type metadata for RunCustomIntentCATsSimple.InitiateHandoffDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.InitiateHandoffDialogIds and conformance RunCustomIntentCATsSimple.InitiateHandoffDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.InitiateHandoffDialogIds and conformance RunCustomIntentCATsSimple.InitiateHandoffDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.InitiateHandoffDialogIds and conformance RunCustomIntentCATsSimple.InitiateHandoffDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.InitiateHandoffDialogIds,  &type metadata for RunCustomIntentCATsSimple.InitiateHandoffDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.InitiateHandoffDialogIds and conformance RunCustomIntentCATsSimple.InitiateHandoffDialogIds);
  }

  return result;
}

uint64_t RunCustomIntentCATsSimple.intentConfirmationPrompt(device:intentCategory:categoryVerb:localizedAppName:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[7] = OUTLINED_FUNCTION_20_10(v5);
  v4[8] = OUTLINED_FUNCTION_11_0();
  v4[9] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.intentConfirmationPrompt(device:intentCategory:categoryVerb:localizedAppName:)()
{
  uint64_t v3 = v0[2];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_19(v4, 224LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_138_3(v5);
  uint64_t v7 = OUTLINED_FUNCTION_4_3(v6, (__n128)xmmword_181AE0);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    v2[7] = 0LL;
    v2[8] = 0LL;
  }

  uint64_t v8 = v0[9];
  OUTLINED_FUNCTION_14_32(v7);
  OUTLINED_FUNCTION_12_4(v10, v9, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v11 = OUTLINED_FUNCTION_61_1();
  __swift_getEnumTagSinglePayload(v8, 1LL, v11);
  OUTLINED_FUNCTION_41_23();
  if (v12)
  {
    uint64_t v13 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v11;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v15 = OUTLINED_FUNCTION_26_24();
  OUTLINED_FUNCTION_12_4(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = OUTLINED_FUNCTION_16_3();
  if (v12)
  {
    OUTLINED_FUNCTION_11_4(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v11;
    uint64_t v18 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v18);
  }

  OUTLINED_FUNCTION_72_10();
  OUTLINED_FUNCTION_80_5((uint64_t)"localizedAppName");
  OUTLINED_FUNCTION_12_4(v19, v20, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v21 = OUTLINED_FUNCTION_41_5();
  if (v12)
  {
    OUTLINED_FUNCTION_11_4(v21, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[27] = v11;
    uint64_t v22 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v22);
  }

  uint64_t v23 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  v0[11] = v23;
  *uint64_t v23 = v0;
  v23[1] = RunCustomIntentCATsSimple.disambiguateSlotValueWithCustomText(device:customIntroductionPrompt:customSelectionPrompt:localizedAppName:shouldShowAppAttribution:);
  uint64_t v24 = OUTLINED_FUNCTION_66_12(v1 + 24);
  return OUTLINED_FUNCTION_24_1(v24, v25, v26, v27);
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentConfirmationPromptDialogIds_optional __swiftcall RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds.init(rawValue:)( Swift::String rawValue)
{
  return result;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentConfirmationPromptDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentConfirmationPromptDialogIds_optional *a2@<X8>)
{
  result.value = RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t RunCustomIntentCATsSimple.intentConfirmationPromptAsLabels(device:intentCategory:categoryVerb:localizedAppName:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[7] = OUTLINED_FUNCTION_20_10(v5);
  v4[8] = OUTLINED_FUNCTION_11_0();
  v4[9] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.intentConfirmationPromptAsLabels(device:intentCategory:categoryVerb:localizedAppName:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 224LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_138_3(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_181AE0);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    v1[7] = 0LL;
    v1[8] = 0LL;
  }

  uint64_t v7 = v0[9];
  OUTLINED_FUNCTION_14_32(v6);
  OUTLINED_FUNCTION_12_4(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_61_1();
  __swift_getEnumTagSinglePayload(v7, 1LL, v10);
  OUTLINED_FUNCTION_41_23();
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[15] = v10;
    uint64_t v13 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v13);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v14 = OUTLINED_FUNCTION_26_24();
  OUTLINED_FUNCTION_12_4(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = OUTLINED_FUNCTION_16_3();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[21] = v10;
    uint64_t v17 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v17);
  }

  OUTLINED_FUNCTION_72_10();
  OUTLINED_FUNCTION_80_5((uint64_t)"localizedAppName");
  OUTLINED_FUNCTION_12_4(v18, v19, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v20 = OUTLINED_FUNCTION_41_5();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[27] = v10;
    uint64_t v21 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v21);
  }

  uint64_t v22 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  v0[11] = v22;
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds();
  *uint64_t v22 = v0;
  v22[1] = RunCustomIntentCATsSimple.disambiguateSlotValueWithCustomText(device:customIntroductionPrompt:customSelectionPrompt:localizedAppName:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_65_14();
  return OUTLINED_FUNCTION_23_3(v23, v24, v25, v26, v27, v28);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds,  &type metadata for RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds,  &type metadata for RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds);
  }

  return result;
}

uint64_t RunCustomIntentCATsSimple.intentConfirmationPromptWithTemplate(device:intentCategory:categoryVerb:localizedAppName:customDialog:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v6[8] = OUTLINED_FUNCTION_20_10(v7);
  v6[9] = OUTLINED_FUNCTION_11_0();
  v6[10] = OUTLINED_FUNCTION_11_0();
  v6[11] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.intentConfirmationPromptWithTemplate(device:intentCategory:categoryVerb:localizedAppName:customDialog:shouldShowAppAttribution:)()
{
  uint64_t v3 = v0[2];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_19(v4, 320LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_164_1(v5);
  uint64_t v7 = OUTLINED_FUNCTION_4_3(v6, (__n128)xmmword_17F3D0);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    v2[7] = 0LL;
    v2[8] = 0LL;
  }

  uint64_t v8 = v0[11];
  OUTLINED_FUNCTION_14_32(v7);
  OUTLINED_FUNCTION_12_4(v10, v9, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v11 = OUTLINED_FUNCTION_61_1();
  __swift_getEnumTagSinglePayload(v8, 1LL, v11);
  OUTLINED_FUNCTION_41_23();
  if (v12)
  {
    uint64_t v13 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v11;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v15 = OUTLINED_FUNCTION_26_24();
  OUTLINED_FUNCTION_12_4(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = OUTLINED_FUNCTION_17_3();
  if (v12)
  {
    OUTLINED_FUNCTION_11_4(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v11;
    uint64_t v18 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v18);
  }

  OUTLINED_FUNCTION_143_3();
  OUTLINED_FUNCTION_80_5((uint64_t)"localizedAppName");
  OUTLINED_FUNCTION_12_4(v19, v20, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v21 = OUTLINED_FUNCTION_19_2();
  if (v12)
  {
    OUTLINED_FUNCTION_11_4(v21, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[27] = v11;
    uint64_t v22 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v22);
  }

  uint64_t v23 = OUTLINED_FUNCTION_92_5();
  OUTLINED_FUNCTION_12_4(v23, v24, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v25 = OUTLINED_FUNCTION_16_3();
  if (v12)
  {
    OUTLINED_FUNCTION_11_4(v25, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[33] = v11;
    uint64_t v26 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v26);
  }

  OUTLINED_FUNCTION_169();
  OUTLINED_FUNCTION_126_5();
  OUTLINED_FUNCTION_168_0(v27);
  uint64_t v28 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  v0[13] = v28;
  *uint64_t v28 = v0;
  v28[1] = RunCustomIntentCATsSimple.intentConfirmationPromptWithTemplate(device:intentCategory:categoryVerb:localizedAppName:customDialog:shouldShowAppAttribution:);
  uint64_t v29 = OUTLINED_FUNCTION_66_12(v1 + 36);
  return OUTLINED_FUNCTION_24_1(v29, v30, v31, v32);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(void);
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_55_17();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_45_7(v1, v2, v3);
  }

  else
  {
    OUTLINED_FUNCTION_92_2();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_33_0();
    uint64_t v5 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_0_3(v5, v6);
  }

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentConfirmationPromptWithTemplateDialogIds_optional __swiftcall RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds.init(rawValue:)( Swift::String rawValue)
{
  return result;
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentConfirmationPromptWithTemplateDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentConfirmationPromptWithTemplateDialogIds_optional *a2@<X8>)
{
  result.value = RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t RunCustomIntentCATsSimple.intentConfirmationPromptWithTemplateAsLabels(device:intentCategory:categoryVerb:localizedAppName:customDialog:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v6[8] = OUTLINED_FUNCTION_20_10(v7);
  v6[9] = OUTLINED_FUNCTION_11_0();
  v6[10] = OUTLINED_FUNCTION_11_0();
  v6[11] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.intentConfirmationPromptWithTemplateAsLabels(device:intentCategory:categoryVerb:localizedAppName:customDialog:shouldShowAppAttribution:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 320LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_164_1(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17F3D0);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    v1[7] = 0LL;
    v1[8] = 0LL;
  }

  uint64_t v7 = v0[11];
  OUTLINED_FUNCTION_14_32(v6);
  OUTLINED_FUNCTION_12_4(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_61_1();
  __swift_getEnumTagSinglePayload(v7, 1LL, v10);
  OUTLINED_FUNCTION_41_23();
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[15] = v10;
    uint64_t v13 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v13);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v14 = OUTLINED_FUNCTION_26_24();
  OUTLINED_FUNCTION_12_4(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = OUTLINED_FUNCTION_17_3();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[21] = v10;
    uint64_t v17 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v17);
  }

  OUTLINED_FUNCTION_143_3();
  OUTLINED_FUNCTION_80_5((uint64_t)"localizedAppName");
  OUTLINED_FUNCTION_12_4(v18, v19, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v20 = OUTLINED_FUNCTION_19_2();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[27] = v10;
    uint64_t v21 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v21);
  }

  uint64_t v22 = OUTLINED_FUNCTION_92_5();
  OUTLINED_FUNCTION_12_4(v22, v23, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v24 = OUTLINED_FUNCTION_16_3();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v24, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[33] = v10;
    uint64_t v25 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v25);
  }

  OUTLINED_FUNCTION_169();
  OUTLINED_FUNCTION_126_5();
  OUTLINED_FUNCTION_168_0(v26);
  char v27 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  v0[13] = v27;
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds();
  *char v27 = v0;
  v27[1] = RunCustomIntentCATsSimple.intentConfirmationPromptWithTemplate(device:intentCategory:categoryVerb:localizedAppName:customDialog:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_65_14();
  return OUTLINED_FUNCTION_23_3(v28, v29, v30, v31, v32, v33);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds,  &type metadata for RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds,  &type metadata for RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds);
  }

  return result;
}

uint64_t RunCustomIntentCATsSimple.intentHandledResponse(device:intentCategory:categoryVerb:localizedAppName:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[7] = OUTLINED_FUNCTION_20_10(v5);
  v4[8] = OUTLINED_FUNCTION_11_0();
  v4[9] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.intentHandledResponse(device:intentCategory:categoryVerb:localizedAppName:)()
{
  uint64_t v3 = v0[2];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_19(v4, 224LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_138_3(v5);
  uint64_t v7 = OUTLINED_FUNCTION_4_3(v6, (__n128)xmmword_181AE0);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    v2[7] = 0LL;
    v2[8] = 0LL;
  }

  uint64_t v8 = v0[9];
  OUTLINED_FUNCTION_14_32(v7);
  OUTLINED_FUNCTION_12_4(v10, v9, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v11 = OUTLINED_FUNCTION_61_1();
  __swift_getEnumTagSinglePayload(v8, 1LL, v11);
  OUTLINED_FUNCTION_41_23();
  if (v12)
  {
    uint64_t v13 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v11;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v15 = OUTLINED_FUNCTION_26_24();
  OUTLINED_FUNCTION_12_4(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = OUTLINED_FUNCTION_16_3();
  if (v12)
  {
    OUTLINED_FUNCTION_11_4(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v11;
    uint64_t v18 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v18);
  }

  OUTLINED_FUNCTION_72_10();
  OUTLINED_FUNCTION_80_5((uint64_t)"localizedAppName");
  OUTLINED_FUNCTION_12_4(v19, v20, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v21 = OUTLINED_FUNCTION_41_5();
  if (v12)
  {
    OUTLINED_FUNCTION_11_4(v21, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[27] = v11;
    uint64_t v22 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v22);
  }

  uint64_t v23 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  v0[11] = v23;
  *uint64_t v23 = v0;
  v23[1] = RunCustomIntentCATsSimple.disambiguateSlotValueWithCustomTextAsLabels(device:customIntroductionPrompt:customSelectionPrompt:localizedAppName:shouldShowAppAttribution:);
  uint64_t v24 = OUTLINED_FUNCTION_66_12(v1 + 21);
  return OUTLINED_FUNCTION_24_1(v24, v25, v26, v27);
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentHandledResponseDialogIds_optional __swiftcall RunCustomIntentCATsSimple.IntentHandledResponseDialogIds.init(rawValue:)( Swift::String rawValue)
{
  return result;
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentHandledResponseDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.IntentHandledResponseDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentHandledResponseDialogIds_optional *a2@<X8>)
{
  result.value = RunCustomIntentCATsSimple.IntentHandledResponseDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.IntentHandledResponseDialogIds()
{
  uint64_t v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t RunCustomIntentCATsSimple.intentHandledResponseAsLabels(device:intentCategory:categoryVerb:localizedAppName:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[7] = OUTLINED_FUNCTION_20_10(v5);
  v4[8] = OUTLINED_FUNCTION_11_0();
  v4[9] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.intentHandledResponseAsLabels(device:intentCategory:categoryVerb:localizedAppName:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 224LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_138_3(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_181AE0);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    v1[7] = 0LL;
    v1[8] = 0LL;
  }

  uint64_t v7 = v0[9];
  OUTLINED_FUNCTION_14_32(v6);
  OUTLINED_FUNCTION_12_4(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_61_1();
  __swift_getEnumTagSinglePayload(v7, 1LL, v10);
  OUTLINED_FUNCTION_41_23();
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[15] = v10;
    uint64_t v13 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v13);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v14 = OUTLINED_FUNCTION_26_24();
  OUTLINED_FUNCTION_12_4(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = OUTLINED_FUNCTION_16_3();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[21] = v10;
    uint64_t v17 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v17);
  }

  OUTLINED_FUNCTION_72_10();
  OUTLINED_FUNCTION_80_5((uint64_t)"localizedAppName");
  OUTLINED_FUNCTION_12_4(v18, v19, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v20 = OUTLINED_FUNCTION_41_5();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[27] = v10;
    uint64_t v21 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v21);
  }

  uint64_t v22 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  v0[11] = v22;
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.IntentHandledResponseDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseDialogIds();
  *uint64_t v22 = v0;
  v22[1] = RunCustomIntentCATsSimple.disambiguateSlotValueWithCustomText(device:customIntroductionPrompt:customSelectionPrompt:localizedAppName:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_65_14();
  return OUTLINED_FUNCTION_23_3(v23, v24, v25, v26, v27, v28);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.IntentHandledResponseDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentHandledResponseDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentHandledResponseDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.IntentHandledResponseDialogIds,  &type metadata for RunCustomIntentCATsSimple.IntentHandledResponseDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentHandledResponseDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentHandledResponseDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentHandledResponseDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.IntentHandledResponseDialogIds,  &type metadata for RunCustomIntentCATsSimple.IntentHandledResponseDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentHandledResponseDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseDialogIds);
  }

  return result;
}

uint64_t RunCustomIntentCATsSimple.intentHandledResponseWithTemplate(device:intentCategory:categoryVerb:customDialog:localizedAppName:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v6[8] = OUTLINED_FUNCTION_20_10(v7);
  v6[9] = OUTLINED_FUNCTION_11_0();
  v6[10] = OUTLINED_FUNCTION_11_0();
  v6[11] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.intentHandledResponseWithTemplate(device:intentCategory:categoryVerb:customDialog:localizedAppName:shouldShowAppAttribution:)()
{
  uint64_t v3 = v0[2];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_19(v4, 320LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_164_1(v5);
  uint64_t v7 = OUTLINED_FUNCTION_4_3(v6, (__n128)xmmword_17F3D0);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    v2[7] = 0LL;
    v2[8] = 0LL;
  }

  uint64_t v8 = v0[11];
  OUTLINED_FUNCTION_14_32(v7);
  OUTLINED_FUNCTION_12_4(v10, v9, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v11 = OUTLINED_FUNCTION_61_1();
  __swift_getEnumTagSinglePayload(v8, 1LL, v11);
  OUTLINED_FUNCTION_41_23();
  if (v12)
  {
    uint64_t v13 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v11;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v15 = OUTLINED_FUNCTION_26_24();
  OUTLINED_FUNCTION_12_4(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = OUTLINED_FUNCTION_17_3();
  if (v12)
  {
    OUTLINED_FUNCTION_11_4(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v11;
    uint64_t v18 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v18);
  }

  uint64_t v19 = OUTLINED_FUNCTION_93_4();
  OUTLINED_FUNCTION_12_4(v19, v20, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v21 = OUTLINED_FUNCTION_19_2();
  if (v12)
  {
    OUTLINED_FUNCTION_11_4(v21, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[27] = v11;
    uint64_t v22 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v22);
  }

  uint64_t v23 = OUTLINED_FUNCTION_144_1();
  v2[28] = v1;
  v2[29] = 0x8000000000193910LL;
  OUTLINED_FUNCTION_12_4(v23, v24, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v25 = OUTLINED_FUNCTION_16_3();
  if (v12)
  {
    OUTLINED_FUNCTION_11_4(v25, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[33] = v11;
    uint64_t v26 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v26);
  }

  OUTLINED_FUNCTION_169();
  OUTLINED_FUNCTION_126_5();
  OUTLINED_FUNCTION_168_0(v27);
  uint64_t v28 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  v0[13] = v28;
  *uint64_t v28 = v0;
  v28[1] = RunCustomIntentCATsSimple.intentHandledResponseWithTemplate(device:intentCategory:categoryVerb:customDialog:localizedAppName:shouldShowAppAttribution:);
  uint64_t v29 = OUTLINED_FUNCTION_66_12(v1 + 33);
  return OUTLINED_FUNCTION_24_1(v29, v30, v31, v32);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(void);
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_55_17();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_45_7(v1, v2, v3);
  }

  else
  {
    OUTLINED_FUNCTION_92_2();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_33_0();
    uint64_t v5 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_0_3(v5, v6);
  }

{
  uint64_t v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentHandledResponseWithTemplateDialogIds_optional __swiftcall RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds.init(rawValue:)( Swift::String rawValue)
{
  return result;
}

void RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds.init(rawValue:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_F3C04 + 4 * byte_186C53[a1]))( 6579297LL,  0xE300000000000000LL);
}

uint64_t sub_F3C04()
{
  return 0x4168746957646461LL;
}

uint64_t sub_F3D68()
{
  return 0x6C6143656E6F6870LL;
}

void sub_F3D84()
{
}

uint64_t sub_F3D9C()
{
  return 1953722224LL;
}

uint64_t sub_F3DAC()
{
  return 0x6874695774736F70LL;
}

uint64_t sub_F3DB8()
{
  return 0x74736575716572LL;
}

void sub_F3DD0()
{
}

uint64_t sub_F3DE8()
{
  return 0x686372616573LL;
}

unint64_t sub_F3DFC()
{
  return OUTLINED_FUNCTION_0_22(17LL);
}

uint64_t sub_F3E08()
{
  return 1684956531LL;
}

uint64_t sub_F3E18()
{
  return 0x68746957646E6573LL;
}

uint64_t sub_F3E24()
{
  return 0x6765746143746573LL;
}

void sub_F3E44()
{
}

uint64_t sub_F3E5C()
{
  return 0x6572616873LL;
}

void sub_F3E70()
{
}

uint64_t sub_F3E88()
{
  return 0x656C67676F74LL;
}

unint64_t sub_F3E9C()
{
  return OUTLINED_FUNCTION_0_22(17LL);
}

uint64_t sub_F3EA8()
{
  return 0x66664F6E727574LL;
}

void sub_F3EC0()
{
}

uint64_t sub_F3EE4()
{
  return 0x6E4F6E727574LL;
}

uint64_t sub_F3F14()
{
  return 2003134838LL;
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentHandledResponseWithTemplateDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentHandledResponseWithTemplateDialogIds_optional *a2@<X8>)
{
  result.value = RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t RunCustomIntentCATsSimple.intentHandledResponseWithTemplateAsLabels(device:intentCategory:categoryVerb:customDialog:localizedAppName:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v6[8] = OUTLINED_FUNCTION_20_10(v7);
  v6[9] = OUTLINED_FUNCTION_11_0();
  v6[10] = OUTLINED_FUNCTION_11_0();
  v6[11] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.intentHandledResponseWithTemplateAsLabels(device:intentCategory:categoryVerb:customDialog:localizedAppName:shouldShowAppAttribution:)()
{
  uint64_t v3 = v0[2];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_19(v4, 320LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_164_1(v5);
  uint64_t v7 = OUTLINED_FUNCTION_4_3(v6, (__n128)xmmword_17F3D0);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    v2[7] = 0LL;
    v2[8] = 0LL;
  }

  uint64_t v8 = v0[11];
  OUTLINED_FUNCTION_14_32(v7);
  OUTLINED_FUNCTION_12_4(v10, v9, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v11 = OUTLINED_FUNCTION_61_1();
  __swift_getEnumTagSinglePayload(v8, 1LL, v11);
  OUTLINED_FUNCTION_41_23();
  if (v12)
  {
    uint64_t v13 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v11;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v15 = OUTLINED_FUNCTION_26_24();
  OUTLINED_FUNCTION_12_4(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = OUTLINED_FUNCTION_17_3();
  if (v12)
  {
    OUTLINED_FUNCTION_11_4(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v11;
    uint64_t v18 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v18);
  }

  uint64_t v19 = OUTLINED_FUNCTION_93_4();
  OUTLINED_FUNCTION_12_4(v19, v20, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v21 = OUTLINED_FUNCTION_19_2();
  if (v12)
  {
    OUTLINED_FUNCTION_11_4(v21, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[27] = v11;
    uint64_t v22 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v22);
  }

  uint64_t v23 = OUTLINED_FUNCTION_144_1();
  v2[28] = v1;
  v2[29] = 0x8000000000193910LL;
  OUTLINED_FUNCTION_12_4(v23, v24, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v25 = OUTLINED_FUNCTION_16_3();
  if (v12)
  {
    OUTLINED_FUNCTION_11_4(v25, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[33] = v11;
    uint64_t v26 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v26);
  }

  OUTLINED_FUNCTION_169();
  OUTLINED_FUNCTION_126_5();
  OUTLINED_FUNCTION_168_0(v27);
  uint64_t v28 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  v0[13] = v28;
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds();
  *uint64_t v28 = v0;
  v28[1] = RunCustomIntentCATsSimple.intentConfirmationPromptWithTemplate(device:intentCategory:categoryVerb:localizedAppName:customDialog:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_65_14();
  return OUTLINED_FUNCTION_23_3(v29, v30, v31, v32, v33, v34);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds,  &type metadata for RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds,  &type metadata for RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds);
  }

  return result;
}

uint64_t RunCustomIntentCATsSimple.introduceDisambiguationList(device:itemCount:pageSize:hasMultiplePages:customIntroductionPrompt:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v7 + 56) = OUTLINED_FUNCTION_10_8(v8);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.introduceDisambiguationList(device:itemCount:pageSize:hasMultiplePages:customIntroductionPrompt:)()
{
  uint64_t v4 = v0[2];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = OUTLINED_FUNCTION_19(v5, 272LL);
  uint64_t v7 = (__n128 *)OUTLINED_FUNCTION_79_4(v6);
  uint64_t v8 = OUTLINED_FUNCTION_4_3(v7, (__n128)xmmword_180120);
  if (v4)
  {
    uint64_t v8 = type metadata accessor for SirikitDeviceState(v8);
  }

  else
  {
    v2[7] = 0LL;
    v2[8] = 0LL;
  }

  OUTLINED_FUNCTION_99_2(v8);
  if ((v9 & 1) != 0) {
    OUTLINED_FUNCTION_113_5();
  }
  else {
    uint64_t v10 = &type metadata for Double;
  }
  OUTLINED_FUNCTION_106_4((uint64_t)v10);
  if ((v11 & 1) != 0)
  {
    uint64_t v12 = 0LL;
    v2[19] = 0LL;
    v2[20] = 0LL;
  }

  else
  {
    uint64_t v12 = v0[4];
  }

  OUTLINED_FUNCTION_112_5(v12);
  v2[23] = 0x80000000001958B0LL;
  OUTLINED_FUNCTION_157_2((uint64_t)&type metadata for Bool);
  v2[29] = 0x8000000000195870LL;
  OUTLINED_FUNCTION_12_4(v13, v14, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v15 = OUTLINED_FUNCTION_61_1();
  __swift_getEnumTagSinglePayload(v1, 1LL, v15);
  OUTLINED_FUNCTION_41_23();
  if (v16)
  {
    uint64_t v17 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    v2[33] = v15;
    uint64_t v18 = OUTLINED_FUNCTION_30_20();
    OUTLINED_FUNCTION_34_2((uint64_t)v18);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v19 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  v0[9] = v19;
  *uint64_t v19 = v0;
  v19[1] = RunCustomIntentCATsSimple.introduceDisambiguationList(device:itemCount:pageSize:hasMultiplePages:customIntroductionPrompt:);
  uint64_t v20 = OUTLINED_FUNCTION_30_19(v3 + 27);
  return OUTLINED_FUNCTION_9_25(v20, v21, v22, v23);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_18_24();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_40_0();
    uint64_t v2 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntroduceDisambiguationListDialogIds_optional __swiftcall RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

uint64_t RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x6E756F436D657469LL;
  }
  if (a1 == 1) {
    return 0x656C7069746C756DLL;
  }
  return 0x72746E49776F6873LL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds( unsigned __int8 *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntroduceDisambiguationListDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntroduceDisambiguationListDialogIds_optional *a2@<X8>)
{
  result.value = RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds()
{
  char v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t RunCustomIntentCATsSimple.introduceDisambiguationListAsLabels(device:itemCount:pageSize:hasMultiplePages:customIntroductionPrompt:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v7 + 56) = OUTLINED_FUNCTION_10_8(v8);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.introduceDisambiguationListAsLabels(device:itemCount:pageSize:hasMultiplePages:customIntroductionPrompt:)()
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = OUTLINED_FUNCTION_19(v5, 272LL);
  uint64_t v7 = (__n128 *)OUTLINED_FUNCTION_79_4(v6);
  uint64_t v8 = OUTLINED_FUNCTION_4_3(v7, (__n128)xmmword_180120);
  if (v4)
  {
    uint64_t v8 = type metadata accessor for SirikitDeviceState(v8);
  }

  else
  {
    v3[7] = 0LL;
    v3[8] = 0LL;
  }

  OUTLINED_FUNCTION_99_2(v8);
  if ((v9 & 1) != 0) {
    OUTLINED_FUNCTION_113_5();
  }
  else {
    uint64_t v10 = &type metadata for Double;
  }
  OUTLINED_FUNCTION_106_4((uint64_t)v10);
  if ((v11 & 1) != 0)
  {
    uint64_t v12 = 0LL;
    v3[19] = 0LL;
    v3[20] = 0LL;
  }

  else
  {
    uint64_t v12 = *(void *)(v1 + 32);
  }

  OUTLINED_FUNCTION_112_5(v12);
  v3[23] = 0x80000000001958B0LL;
  OUTLINED_FUNCTION_157_2((uint64_t)&type metadata for Bool);
  v3[29] = 0x8000000000195870LL;
  OUTLINED_FUNCTION_12_4(v13, v14, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v15 = OUTLINED_FUNCTION_61_1();
  __swift_getEnumTagSinglePayload(v2, 1LL, v15);
  OUTLINED_FUNCTION_41_23();
  if (v16)
  {
    uint64_t v17 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    v3[33] = v15;
    uint64_t v18 = OUTLINED_FUNCTION_30_20();
    OUTLINED_FUNCTION_34_2((uint64_t)v18);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v19 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_147_1(v19);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds and conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds();
  *uint64_t v0 = v1;
  v0[1] = RunCustomIntentCATsSimple.introduceDisambiguationListAsLabels(device:itemCount:pageSize:hasMultiplePages:customIntroductionPrompt:);
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_54_19();
  return OUTLINED_FUNCTION_23_17(v20, v21, v22, v23, v24, v25);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_18_24();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_40_0();
    uint64_t v2 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds and conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds and conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds and conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds,  &type metadata for RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds and conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds and conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds and conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds,  &type metadata for RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds and conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds);
  }

  return result;
}

uint64_t RunCustomIntentCATsSimple.introduceNextDisambiguationPage(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunCustomIntentCATsSimple.introduceNextDisambiguationPage(device:));
}

uint64_t RunCustomIntentCATsSimple.introduceNextDisambiguationPage(device:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_83_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_59_1();
  *(void *)(v0 + 40) = v7;
  OUTLINED_FUNCTION_68_2(v7, (uint64_t)RunVoiceCommandCATsSimple.openAppFailedAsLabels(device:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v8 = OUTLINED_FUNCTION_94_3(47LL);
  return OUTLINED_FUNCTION_44_11(v8, v9, v10, v11);
}

void RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

uint64_t RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds.rawValue.getter()
{
  return 0x6F72746E69LL;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds( void *a1@<X8>)
{
}

uint64_t RunCustomIntentCATsSimple.introduceNextDisambiguationPageAsLabels(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunCustomIntentCATsSimple.introduceNextDisambiguationPageAsLabels(device:));
}

uint64_t RunCustomIntentCATsSimple.introduceNextDisambiguationPageAsLabels(device:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_83_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  uint64_t v7 = OUTLINED_FUNCTION_59_1();
  OUTLINED_FUNCTION_135_2(v7);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds and conformance RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds();
  OUTLINED_FUNCTION_69_2((uint64_t)RunVoiceCommandCATsSimple.openAppFailedAsLabels(device:));
  OUTLINED_FUNCTION_45_1();
  unint64_t v8 = OUTLINED_FUNCTION_95_3(47LL);
  return OUTLINED_FUNCTION_45_16(v8, v9, v10, v11, v12, v13);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds and conformance RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds and conformance RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds and conformance RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds,  &type metadata for RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds and conformance RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds and conformance RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds and conformance RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds,  &type metadata for RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds and conformance RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds);
  }

  return result;
}

uint64_t RunCustomIntentCATsSimple.offerMoreDisambiguationItems(device:remainingPages:customSelectionPrompt:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(void *)(v5 + 32) = a4;
  *(void *)(v5 + 40) = v4;
  *(_BYTE *)(v5 + 80) = a3;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v5 + 48) = OUTLINED_FUNCTION_10_8(v6);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.offerMoreDisambiguationItems(device:remainingPages:customSelectionPrompt:)()
{
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = OUTLINED_FUNCTION_19(v5, 176LL);
  uint64_t v7 = (__n128 *)OUTLINED_FUNCTION_50_7(v6);
  uint64_t v8 = OUTLINED_FUNCTION_4_3(v7, (__n128)xmmword_17FDF0);
  if (v4)
  {
    uint64_t v8 = type metadata accessor for SirikitDeviceState(v8);
  }

  else
  {
    v2[7] = 0LL;
    v2[8] = 0LL;
  }

  OUTLINED_FUNCTION_90_8(v8);
  if ((v9 & 1) != 0) {
    OUTLINED_FUNCTION_113_5();
  }
  else {
    uint64_t v10 = &type metadata for Double;
  }
  uint64_t v11 = OUTLINED_FUNCTION_125_3((uint64_t)v10);
  v2[17] = 0x8000000000195890LL;
  OUTLINED_FUNCTION_12_4(v11, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = OUTLINED_FUNCTION_61_1();
  __swift_getEnumTagSinglePayload(v1, 1LL, v13);
  OUTLINED_FUNCTION_41_23();
  if (v14)
  {
    uint64_t v15 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v15, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    v2[21] = v13;
    char v16 = OUTLINED_FUNCTION_30_20();
    OUTLINED_FUNCTION_34_2((uint64_t)v16);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v17 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 64) = v17;
  OUTLINED_FUNCTION_119_5( v17,  (uint64_t)RunCustomIntentCATsSimple.disambiguateSlotValueItemsAsLabels(device:customPrompt:items:));
  uint64_t v18 = OUTLINED_FUNCTION_30_19(v3 + 23);
  return OUTLINED_FUNCTION_9_25(v18, v19, v20, v21);
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::OfferMoreDisambiguationItemsDialogIds_optional __swiftcall RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

uint64_t RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds.rawValue.getter(char a1)
{
  if (!a1) {
    return OUTLINED_FUNCTION_55_6();
  }
  if (a1 == 1) {
    return 0x656761507473616CLL;
  }
  return 0x726F4D726566666FLL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds()
{
  specialized == infix<A>(_:_:)();
}

void protocol witness for Hashable.hashValue.getter in conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::OfferMoreDisambiguationItemsDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::OfferMoreDisambiguationItemsDialogIds_optional *a2@<X8>)
{
  result.value = RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds()
{
  char v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t RunCustomIntentCATsSimple.offerMoreDisambiguationItemsAsLabels(device:remainingPages:customSelectionPrompt:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(void *)(v5 + 32) = a4;
  *(void *)(v5 + 40) = v4;
  *(_BYTE *)(v5 + 80) = a3;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v5 + 48) = OUTLINED_FUNCTION_10_8(v6);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.offerMoreDisambiguationItemsAsLabels(device:remainingPages:customSelectionPrompt:)()
{
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_19(v4, 176LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_50_7(v5);
  uint64_t v7 = OUTLINED_FUNCTION_4_3(v6, (__n128)xmmword_17FDF0);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    v2[7] = 0LL;
    v2[8] = 0LL;
  }

  OUTLINED_FUNCTION_90_8(v7);
  if ((v8 & 1) != 0) {
    OUTLINED_FUNCTION_113_5();
  }
  else {
    char v9 = &type metadata for Double;
  }
  uint64_t v10 = OUTLINED_FUNCTION_125_3((uint64_t)v9);
  v2[17] = 0x8000000000195890LL;
  OUTLINED_FUNCTION_12_4(v10, v11, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v12 = OUTLINED_FUNCTION_61_1();
  __swift_getEnumTagSinglePayload(v1, 1LL, v12);
  OUTLINED_FUNCTION_41_23();
  if (v13)
  {
    uint64_t v14 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    v2[21] = v12;
    uint64_t v15 = OUTLINED_FUNCTION_30_20();
    OUTLINED_FUNCTION_34_2((uint64_t)v15);
    OUTLINED_FUNCTION_12_8();
  }

  *(void *)(v0 + 64) = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds();
  OUTLINED_FUNCTION_116_6((uint64_t)RunCustomIntentCATsSimple.disambiguateSlotValueItemsAsLabels(device:customPrompt:items:));
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_54_19();
  return OUTLINED_FUNCTION_23_17(v16, v17, v18, v19, v20, v21);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds,  &type metadata for RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds,  &type metadata for RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds);
  }

  return result;
}

uint64_t RunCustomIntentCATsSimple.offerMoreItems(device:remainingPages:nextPageSize:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  *(_BYTE *)(v6 + 73) = a5;
  *(void *)(v6 + 32) = a4;
  *(void *)(v6 + 40) = v5;
  *(_BYTE *)(v6 + 72) = a3;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunCustomIntentCATsSimple.offerMoreItems(device:remainingPages:nextPageSize:));
}

uint64_t RunCustomIntentCATsSimple.offerMoreItems(device:remainingPages:nextPageSize:)()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_19(v2, 176LL);
  v0[6] = v3;
  OUTLINED_FUNCTION_137_0(v3, (__n128)xmmword_17FDF0);
  if (v1)
  {
    uint64_t v4 = type metadata accessor for SirikitDeviceState(0LL);
    uint64_t v5 = v1;
  }

  else
  {
    uint64_t v5 = 0LL;
    uint64_t v4 = 0LL;
    v3[3].n128_u64[1] = 0LL;
    v3[4].n128_u64[0] = 0LL;
  }

  OUTLINED_FUNCTION_86_6(v4, v5);
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = 0LL;
    v3[6].n128_u64[1] = 0LL;
    v3[7].n128_u64[0] = 0LL;
  }

  else
  {
    uint64_t v7 = &type metadata for Double;
  }

  OUTLINED_FUNCTION_95_6((uint64_t)v7);
  if ((v8 & 1) != 0)
  {
    uint64_t v10 = 0LL;
    unint64_t v9 = 0LL;
    v3[9].n128_u64[1] = 0LL;
    v3[10].n128_u64[0] = 0LL;
  }

  else
  {
    unint64_t v9 = v0[4];
    uint64_t v10 = &type metadata for Double;
  }

  v3[10].n128_u64[1] = (unint64_t)v10;
  v3[9].n128_u64[0] = v9;
  OUTLINED_FUNCTION_5_2();
  uint64_t v11 = (void *)OUTLINED_FUNCTION_59_1();
  v0[7] = v11;
  OUTLINED_FUNCTION_119_5(v11, (uint64_t)RunCustomIntentCATsSimple.offerMoreItems(device:remainingPages:nextPageSize:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v12 = OUTLINED_FUNCTION_94_3(30LL);
  return OUTLINED_FUNCTION_44_11(v12, v13, v14, v15);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_39_7();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = OUTLINED_FUNCTION_84_7();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::OfferMoreItemsDialogIds_optional __swiftcall RunCustomIntentCATsSimple.OfferMoreItemsDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.OfferMoreItemsDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

uint64_t RunCustomIntentCATsSimple.OfferMoreItemsDialogIds.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x726F4D726566666FLL;
  }
  else {
    return 0x656761507478656ELL;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds( char *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::OfferMoreItemsDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::OfferMoreItemsDialogIds_optional *a2@<X8>)
{
  result.value = RunCustomIntentCATsSimple.OfferMoreItemsDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds()
{
  char v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = RunCustomIntentCATsSimple.OfferMoreItemsDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t RunCustomIntentCATsSimple.offerMoreItemsAsLabels(device:remainingPages:nextPageSize:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  *(_BYTE *)(v6 + 73) = a5;
  *(void *)(v6 + 32) = a4;
  *(void *)(v6 + 40) = v5;
  *(_BYTE *)(v6 + 72) = a3;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunCustomIntentCATsSimple.offerMoreItemsAsLabels(device:remainingPages:nextPageSize:));
}

uint64_t RunCustomIntentCATsSimple.offerMoreItemsAsLabels(device:remainingPages:nextPageSize:)()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_19(v2, 176LL);
  v0[6] = v3;
  OUTLINED_FUNCTION_137_0(v3, (__n128)xmmword_17FDF0);
  if (v1)
  {
    uint64_t v4 = type metadata accessor for SirikitDeviceState(0LL);
    uint64_t v5 = v1;
  }

  else
  {
    uint64_t v5 = 0LL;
    uint64_t v4 = 0LL;
    v3[3].n128_u64[1] = 0LL;
    v3[4].n128_u64[0] = 0LL;
  }

  OUTLINED_FUNCTION_86_6(v4, v5);
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = 0LL;
    v3[6].n128_u64[1] = 0LL;
    v3[7].n128_u64[0] = 0LL;
  }

  else
  {
    uint64_t v7 = &type metadata for Double;
  }

  OUTLINED_FUNCTION_95_6((uint64_t)v7);
  if ((v8 & 1) != 0)
  {
    uint64_t v10 = 0LL;
    unint64_t v9 = 0LL;
    v3[9].n128_u64[1] = 0LL;
    v3[10].n128_u64[0] = 0LL;
  }

  else
  {
    unint64_t v9 = v0[4];
    uint64_t v10 = &type metadata for Double;
  }

  v3[10].n128_u64[1] = (unint64_t)v10;
  v3[9].n128_u64[0] = v9;
  OUTLINED_FUNCTION_5_2();
  uint64_t v11 = OUTLINED_FUNCTION_59_1();
  OUTLINED_FUNCTION_68_9(v11);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.OfferMoreItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds();
  OUTLINED_FUNCTION_116_6((uint64_t)RunCustomIntentCATsSimple.offerMoreItemsAsLabels(device:remainingPages:nextPageSize:));
  OUTLINED_FUNCTION_45_1();
  unint64_t v12 = OUTLINED_FUNCTION_95_3(30LL);
  return OUTLINED_FUNCTION_45_16(v12, v13, v14, v15, v16, v17);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_39_7();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = OUTLINED_FUNCTION_84_7();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.OfferMoreItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.OfferMoreItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.OfferMoreItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.OfferMoreItemsDialogIds,  &type metadata for RunCustomIntentCATsSimple.OfferMoreItemsDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.OfferMoreItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.OfferMoreItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.OfferMoreItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.OfferMoreItemsDialogIds,  &type metadata for RunCustomIntentCATsSimple.OfferMoreItemsDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.OfferMoreItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds);
  }

  return result;
}

uint64_t RunCustomIntentCATsSimple.promptForSlotValue(device:parameterName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.promptForSlotValue(device:parameterName:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_42_13(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_25_28(v6);
  OUTLINED_FUNCTION_12_4(v8, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v9);
  if (v10)
  {
    uint64_t v11 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    unint64_t v12 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v12);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v13 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 56) = v13;
  OUTLINED_FUNCTION_74_2(v13, (uint64_t)RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:));
  OUTLINED_FUNCTION_26_8();
  OUTLINED_FUNCTION_67_11();
  return OUTLINED_FUNCTION_24_1(v14, v15, v16, v17);
}

void RunCustomIntentCATsSimple.PromptForSlotValueDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.PromptForSlotValueDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

void RunCustomIntentCATsSimple.PromptForSlotValueDialogIds.rawValue.getter()
{
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.PromptForSlotValueDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t RunCustomIntentCATsSimple.promptForSlotValueAsLabels(device:parameterName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.promptForSlotValueAsLabels(device:parameterName:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_42_13(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_25_28(v6);
  OUTLINED_FUNCTION_12_4(v8, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v9);
  if (v10)
  {
    uint64_t v11 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    unint64_t v12 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v12);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v13 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_68_9(v13);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.PromptForSlotValueDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueDialogIds();
  OUTLINED_FUNCTION_75_2((uint64_t)RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:));
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_68_13();
  return OUTLINED_FUNCTION_23_3(v14, v15, v16, v17, v18, v19);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.PromptForSlotValueDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.PromptForSlotValueDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.PromptForSlotValueDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.PromptForSlotValueDialogIds,  &type metadata for RunCustomIntentCATsSimple.PromptForSlotValueDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.PromptForSlotValueDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.PromptForSlotValueDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.PromptForSlotValueDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.PromptForSlotValueDialogIds,  &type metadata for RunCustomIntentCATsSimple.PromptForSlotValueDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.PromptForSlotValueDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueDialogIds);
  }

  return result;
}

uint64_t RunCustomIntentCATsSimple.promptForSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 48) = OUTLINED_FUNCTION_20_10(v5);
  *(void *)(v4 + 56) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.promptForSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:)()
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = OUTLINED_FUNCTION_19(v5, 224LL);
  uint64_t v7 = (__n128 *)OUTLINED_FUNCTION_79_4(v6);
  uint64_t v8 = OUTLINED_FUNCTION_4_3(v7, (__n128)xmmword_181AE0);
  if (v4)
  {
    uint64_t v8 = type metadata accessor for SirikitDeviceState(v8);
  }

  else
  {
    v3[7] = 0LL;
    v3[8] = 0LL;
  }

  OUTLINED_FUNCTION_27_23(v8);
  OUTLINED_FUNCTION_12_4(v10, v9, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v11 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_23_23(v11);
  if (v12)
  {
    uint64_t v13 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[15] = v0;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
    OUTLINED_FUNCTION_12_8();
  }

  OUTLINED_FUNCTION_98_2();
  OUTLINED_FUNCTION_67_7((uint64_t)"localizedAppName");
  OUTLINED_FUNCTION_12_4(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = OUTLINED_FUNCTION_32_16();
  if (v12)
  {
    OUTLINED_FUNCTION_11_4(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[21] = v0;
    uint64_t v18 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v18);
  }

  OUTLINED_FUNCTION_130_2();
  OUTLINED_FUNCTION_78_6();
  OUTLINED_FUNCTION_129_3(v19);
  uint64_t v20 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 72) = v20;
  OUTLINED_FUNCTION_119_5( v20,  (uint64_t)RunCustomIntentCATsSimple.confirmSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:));
  uint64_t v21 = OUTLINED_FUNCTION_66_12(v2 + 32);
  return OUTLINED_FUNCTION_24_1(v21, v22, v23, v24);
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::PromptForSlotValueWithCustomTextDialogIds_optional __swiftcall RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

uint64_t RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x4E707041776F6873LL;
  }
  else {
    return 0x6D6F74737563LL;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds( char *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::PromptForSlotValueWithCustomTextDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::PromptForSlotValueWithCustomTextDialogIds_optional *a2@<X8>)
{
  result.value = RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds()
{
  char v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t RunCustomIntentCATsSimple.promptForSlotValueWithCustomTextAsLabels(device:customPrompt:localizedAppName:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 48) = OUTLINED_FUNCTION_20_10(v5);
  *(void *)(v4 + 56) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.promptForSlotValueWithCustomTextAsLabels(device:customPrompt:localizedAppName:shouldShowAppAttribution:)()
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_19(v4, 224LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_79_4(v5);
  uint64_t v7 = OUTLINED_FUNCTION_4_3(v6, (__n128)xmmword_181AE0);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    v2[7] = 0LL;
    v2[8] = 0LL;
  }

  OUTLINED_FUNCTION_27_23(v7);
  OUTLINED_FUNCTION_12_4(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_23_23(v10);
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v0;
    uint64_t v13 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v13);
    OUTLINED_FUNCTION_12_8();
  }

  OUTLINED_FUNCTION_98_2();
  OUTLINED_FUNCTION_67_7((uint64_t)"localizedAppName");
  OUTLINED_FUNCTION_12_4(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = OUTLINED_FUNCTION_32_16();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v0;
    uint64_t v17 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v17);
  }

  OUTLINED_FUNCTION_130_2();
  OUTLINED_FUNCTION_78_6();
  OUTLINED_FUNCTION_129_3(v18);
  uint64_t v19 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_147_1(v19);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds();
  OUTLINED_FUNCTION_116_6((uint64_t)RunCustomIntentCATsSimple.confirmSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:));
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_65_14();
  return OUTLINED_FUNCTION_23_3(v20, v21, v22, v23, v24, v25);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds,  &type metadata for RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds,  &type metadata for RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds);
  }

  return result;
}

uint64_t RunCustomIntentCATsSimple.readDisambiguationItems(device:items:)(uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_6_2((uint64_t)RunCustomIntentCATsSimple.readDisambiguationItems(device:items:));
}

uint64_t RunCustomIntentCATsSimple.readDisambiguationItems(device:items:)()
{
  uint64_t v3 = v1[2];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_19(v4, 128LL);
  v1[5] = v5;
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    v5[3].n128_u64[1] = 0LL;
    v5[4].n128_u64[0] = 0LL;
  }

  OUTLINED_FUNCTION_110_8(v6);
  v5[7].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  v5[6].n128_u64[0] = v0;
  OUTLINED_FUNCTION_121_5();
  swift_bridgeObjectRetain(v0);
  uint64_t v7 = (void *)swift_task_alloc(v2);
  v1[6] = v7;
  OUTLINED_FUNCTION_74_2(v7, (uint64_t)RunCustomIntentCATsSimple.readDisambiguationItems(device:items:));
  OUTLINED_FUNCTION_26_8();
  return v9(0xD000000000000027LL);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_4_15();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = OUTLINED_FUNCTION_84_7();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

void RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

uint64_t RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds.rawValue.getter()
{
  return 0x736D657469LL;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds( void *a1@<X8>)
{
}

uint64_t RunCustomIntentCATsSimple.readDisambiguationItemsAsLabels(device:items:)(uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_6_2((uint64_t)RunCustomIntentCATsSimple.readDisambiguationItemsAsLabels(device:items:));
}

uint64_t RunCustomIntentCATsSimple.readDisambiguationItemsAsLabels(device:items:)()
{
  uint64_t v3 = v1[2];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_19(v4, 128LL);
  v1[5] = v5;
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    v5[3].n128_u64[1] = 0LL;
    v5[4].n128_u64[0] = 0LL;
  }

  OUTLINED_FUNCTION_110_8(v6);
  v5[7].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  v5[6].n128_u64[0] = v0;
  OUTLINED_FUNCTION_121_5();
  swift_bridgeObjectRetain(v0);
  v1[6] = swift_task_alloc(v2);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds();
  OUTLINED_FUNCTION_75_2((uint64_t)RunCustomIntentCATsSimple.readDisambiguationItemsAsLabels(device:items:));
  OUTLINED_FUNCTION_45_1();
  return v8(0xD000000000000027LL);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_4_15();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = OUTLINED_FUNCTION_84_7();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds,  &type metadata for RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds,  &type metadata for RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds);
  }

  return result;
}

uint64_t RunCustomIntentCATsSimple.unsupportedSlotValue(device:parameterName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.unsupportedSlotValue(device:parameterName:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_42_13(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_25_28(v6);
  OUTLINED_FUNCTION_12_4(v8, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v9);
  if (v10)
  {
    uint64_t v11 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v12 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v12);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v13 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 56) = v13;
  OUTLINED_FUNCTION_74_2(v13, (uint64_t)RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:));
  OUTLINED_FUNCTION_26_8();
  OUTLINED_FUNCTION_67_11();
  return OUTLINED_FUNCTION_24_1(v14, v15, v16, v17);
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::UnsupportedSlotValueDialogIds_optional __swiftcall RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

uint64_t RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x50746C7561666564LL;
  }
  else {
    return 0x61506D6F74737563LL;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds( char *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::UnsupportedSlotValueDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::UnsupportedSlotValueDialogIds_optional *a2@<X8>)
{
  result.value = RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds()
{
  char v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t RunCustomIntentCATsSimple.unsupportedSlotValueAsLabels(device:parameterName:)( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.unsupportedSlotValueAsLabels(device:parameterName:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_42_13(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_25_28(v6);
  OUTLINED_FUNCTION_12_4(v8, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_5_27(v9);
  if (v10)
  {
    uint64_t v11 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v12 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v12);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v13 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_68_9(v13);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds();
  OUTLINED_FUNCTION_75_2((uint64_t)RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:));
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_68_13();
  return OUTLINED_FUNCTION_23_3(v14, v15, v16, v17, v18, v19);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds,  &type metadata for RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds,  &type metadata for RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds);
  }

  return result;
}

uint64_t RunCustomIntentCATsSimple.unsupportedSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 48) = OUTLINED_FUNCTION_20_10(v5);
  *(void *)(v4 + 56) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.unsupportedSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:)()
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = OUTLINED_FUNCTION_19(v5, 224LL);
  uint64_t v7 = (__n128 *)OUTLINED_FUNCTION_79_4(v6);
  uint64_t v8 = OUTLINED_FUNCTION_4_3(v7, (__n128)xmmword_181AE0);
  if (v4)
  {
    uint64_t v8 = type metadata accessor for SirikitDeviceState(v8);
  }

  else
  {
    v3[7] = 0LL;
    v3[8] = 0LL;
  }

  OUTLINED_FUNCTION_27_23(v8);
  OUTLINED_FUNCTION_12_4(v10, v9, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v11 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_23_23(v11);
  if (v12)
  {
    uint64_t v13 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[15] = v0;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
    OUTLINED_FUNCTION_12_8();
  }

  OUTLINED_FUNCTION_98_2();
  OUTLINED_FUNCTION_67_7((uint64_t)"localizedAppName");
  OUTLINED_FUNCTION_12_4(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = OUTLINED_FUNCTION_32_16();
  if (v12)
  {
    OUTLINED_FUNCTION_11_4(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[21] = v0;
    uint64_t v18 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v18);
  }

  OUTLINED_FUNCTION_130_2();
  OUTLINED_FUNCTION_78_6();
  OUTLINED_FUNCTION_129_3(v19);
  uint64_t v20 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 72) = v20;
  OUTLINED_FUNCTION_119_5( v20,  (uint64_t)RunCustomIntentCATsSimple.confirmSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:));
  uint64_t v21 = OUTLINED_FUNCTION_66_12(v2 + 34);
  return OUTLINED_FUNCTION_24_1(v21, v22, v23, v24);
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::UnsupportedSlotValueWithCustomTextDialogIds_optional __swiftcall RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

uint64_t RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD000000000000012LL;
  }
  else {
    return 0x4E707041776F6873LL;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds( char *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::UnsupportedSlotValueWithCustomTextDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::UnsupportedSlotValueWithCustomTextDialogIds_optional *a2@<X8>)
{
  result.value = RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds()
{
  char v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t RunCustomIntentCATsSimple.unsupportedSlotValueWithCustomTextAsLabels(device:customPrompt:localizedAppName:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 48) = OUTLINED_FUNCTION_20_10(v5);
  *(void *)(v4 + 56) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunCustomIntentCATsSimple.unsupportedSlotValueWithCustomTextAsLabels(device:customPrompt:localizedAppName:shouldShowAppAttribution:)()
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_19(v4, 224LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_79_4(v5);
  uint64_t v7 = OUTLINED_FUNCTION_4_3(v6, (__n128)xmmword_181AE0);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    v2[7] = 0LL;
    v2[8] = 0LL;
  }

  OUTLINED_FUNCTION_27_23(v7);
  OUTLINED_FUNCTION_12_4(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_23_23(v10);
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v0;
    uint64_t v13 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v13);
    OUTLINED_FUNCTION_12_8();
  }

  OUTLINED_FUNCTION_98_2();
  OUTLINED_FUNCTION_67_7((uint64_t)"localizedAppName");
  OUTLINED_FUNCTION_12_4(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = OUTLINED_FUNCTION_32_16();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v0;
    uint64_t v17 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v17);
  }

  OUTLINED_FUNCTION_130_2();
  OUTLINED_FUNCTION_78_6();
  OUTLINED_FUNCTION_129_3(v18);
  uint64_t v19 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_147_1(v19);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds();
  OUTLINED_FUNCTION_116_6((uint64_t)RunCustomIntentCATsSimple.confirmSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:));
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_65_14();
  return OUTLINED_FUNCTION_23_3(v20, v21, v22, v23, v24, v25);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds,  &type metadata for RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds,  &type metadata for RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.Properties and conformance RunCustomIntentCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.Properties and conformance RunCustomIntentCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.Properties and conformance RunCustomIntentCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunCustomIntentCATsSimple.Properties,  &type metadata for RunCustomIntentCATsSimple.Properties);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.Properties and conformance RunCustomIntentCATsSimple.Properties);
  }

  return result;
}

uint64_t type metadata accessor for RunCustomIntentCATsSimple(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for RunCustomIntentCATsSimple;
  if (!type metadata singleton initialization cache for RunCustomIntentCATsSimple) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RunCustomIntentCATsSimple);
  }
  return result;
}

uint64_t type metadata completion function for RunCustomIntentCATsSimple(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + class metadata base offset for RunCustomIntentCATsSimple);
}

uint64_t ObjC metadata update function for RunCustomIntentCATsSimple()
{
  return type metadata accessor for RunCustomIntentCATsSimple(0LL);
}

uint64_t getEnumTagSinglePayload for RunCustomIntentCATsSimple.Properties( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xE6)
  {
    if (a2 + 26 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 26) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 27;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for RunCustomIntentCATsSimple.Properties( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 26 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 26) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xE6) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xE5) {
    return ((uint64_t (*)(void))((char *)&loc_F69E4 + 4 * byte_186C83[v4]))();
  }
  *a1 = a2 + 26;
  return ((uint64_t (*)(void))((char *)sub_F6A18 + 4 * byte_186C7E[v4]))();
}

uint64_t sub_F6A18(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_F6A20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xF6A28LL);
  }
  return result;
}

uint64_t sub_F6A34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xF6A3CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 26;
  return result;
}

uint64_t sub_F6A40(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_F6A48(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for RunCustomIntentCATsSimple.Properties()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.DeviceUnlockDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.DoneButtonDialogIds()
{
}

uint64_t getEnumTagSinglePayload for RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return OUTLINED_FUNCTION_156_0(-1);
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return OUTLINED_FUNCTION_156_0((*a1 | (v4 << 8)) - 4);
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return OUTLINED_FUNCTION_156_0((*a1 | (v4 << 8)) - 4);
    }

    int v4 = a1[1];
    if (a1[1]) {
      return OUTLINED_FUNCTION_156_0((*a1 | (v4 << 8)) - 4);
    }
  }

uint64_t storeEnumTagSinglePayload for RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_F6BA4 + 4 * byte_186C8D[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)j__OUTLINED_FUNCTION_155_0 + 4 * byte_186C88[v4]))();
}

uint64_t sub_F6BDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xF6BE4LL);
  }
  return result;
}

uint64_t sub_F6BEC(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1) = 0;
  if (!a2) {
    JUMPOUT(0xF6BF4LL);
  }
  return OUTLINED_FUNCTION_154_1();
}

void type metadata accessor for RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.InitiateHandoffDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.IntentHandledResponseDialogIds()
{
}

uint64_t getEnumTagSinglePayload for RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return OUTLINED_FUNCTION_156_0(-1);
  }
  if (a2 < 0xD6) {
    goto LABEL_17;
  }
  if (a2 + 42 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 42) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return OUTLINED_FUNCTION_156_0((*a1 | (v4 << 8)) - 43);
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return OUTLINED_FUNCTION_156_0((*a1 | (v4 << 8)) - 43);
    }

    int v4 = a1[1];
    if (a1[1]) {
      return OUTLINED_FUNCTION_156_0((*a1 | (v4 << 8)) - 43);
    }
  }

uint64_t storeEnumTagSinglePayload for RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 42 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 42) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xD6) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xD5) {
    return ((uint64_t (*)(void))((char *)&loc_F6D48 + 4 * byte_186C97[v4]))();
  }
  *a1 = a2 + 42;
  return ((uint64_t (*)(void))((char *)j__OUTLINED_FUNCTION_155_0_0 + 4 * byte_186C92[v4]))();
}

uint64_t sub_F6D80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xF6D88LL);
  }
  return result;
}

uint64_t sub_F6D90(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1) = 0;
  if (!a2) {
    JUMPOUT(0xF6D98LL);
  }
  return OUTLINED_FUNCTION_154_1();
}

void type metadata accessor for RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds()
{
}

uint64_t getEnumTagSinglePayload for RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return OUTLINED_FUNCTION_156_0(-1);
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return OUTLINED_FUNCTION_156_0((*a1 | (v4 << 8)) - 3);
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return OUTLINED_FUNCTION_156_0((*a1 | (v4 << 8)) - 3);
    }

    int v4 = a1[1];
    if (a1[1]) {
      return OUTLINED_FUNCTION_156_0((*a1 | (v4 << 8)) - 3);
    }
  }

uint64_t storeEnumTagSinglePayload for RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_F6EA4 + 4 * byte_186CA1[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)j__OUTLINED_FUNCTION_155_0_1 + 4 * byte_186C9C[v4]))();
}

uint64_t sub_F6EDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xF6EE4LL);
  }
  return result;
}

uint64_t sub_F6EEC(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1) = 0;
  if (!a2) {
    JUMPOUT(0xF6EF4LL);
  }
  return OUTLINED_FUNCTION_154_1();
}

void type metadata accessor for RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.OfferMoreItemsDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.PromptForSlotValueDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds()
{
}

uint64_t storeEnumTagSinglePayload for RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_F6F74 + 4 * byte_186CA6[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_F6F94 + 4 * byte_186CAB[v4]))();
  }
}

_BYTE *sub_F6F74(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_F6F94(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_F6F9C(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_F6FA4(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_F6FAC(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_F6FB4(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void type metadata accessor for RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds()
{
}

uint64_t getEnumTagSinglePayload for RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return OUTLINED_FUNCTION_156_0(-1);
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return OUTLINED_FUNCTION_156_0((*a1 | (v4 << 8)) - 2);
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return OUTLINED_FUNCTION_156_0((*a1 | (v4 << 8)) - 2);
    }

    int v4 = a1[1];
    if (a1[1]) {
      return OUTLINED_FUNCTION_156_0((*a1 | (v4 << 8)) - 2);
    }
  }

uint64_t storeEnumTagSinglePayload for RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_F70A8 + 4 * byte_186CB5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)j__OUTLINED_FUNCTION_155_0_2 + 4 * byte_186CB0[v4]))();
}

uint64_t sub_F70E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xF70E8LL);
  }
  return result;
}

uint64_t sub_F70F0(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1) = 0;
  if (!a2) {
    JUMPOUT(0xF70F8LL);
  }
  return OUTLINED_FUNCTION_154_1();
}

void type metadata accessor for RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds()
{
}

uint64_t OUTLINED_FUNCTION_14_32(uint64_t result)
{
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = result;
  strcpy((char *)(v2 + 80), "intentCategory");
  *(_BYTE *)(v2 + 95) = -18;
  return result;
}

uint64_t OUTLINED_FUNCTION_25_28(uint64_t result)
{
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = result;
  strcpy((char *)(v2 + 80), "parameterName");
  *(_WORD *)(v2 + 94) = -4864;
  return result;
}

uint64_t OUTLINED_FUNCTION_26_24()
{
  uint64_t result = *(void *)(v0 + 32);
  strcpy((char *)(v1 + 128), "categoryVerb");
  *(_BYTE *)(v1 + 141) = 0;
  *(_WORD *)(v1 + 142) = -5120;
  return result;
}

uint64_t OUTLINED_FUNCTION_27_23(uint64_t result)
{
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = result;
  strcpy((char *)(v2 + 80), "customPrompt");
  *(_BYTE *)(v2 + 93) = 0;
  *(_WORD *)(v2 + 94) = -5120;
  return result;
}

uint64_t OUTLINED_FUNCTION_37_22()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 88);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 96) = v0;
  return swift_task_dealloc(v5);
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_72_10()
{
  return *(void *)(v0 + 40);
}

uint64_t OUTLINED_FUNCTION_80_8()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 80));
}

uint64_t OUTLINED_FUNCTION_82_8(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 0x614E6E6F69746361LL;
  v2[11] = 0xEA0000000000656DLL;
  return result;
}

uint64_t OUTLINED_FUNCTION_86_6@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + 48) = a2;
  *(void *)(v2 + 72) = result;
  strcpy((char *)(v2 + 80), "remainingPages");
  *(_BYTE *)(v2 + 95) = -18;
  return result;
}

uint64_t OUTLINED_FUNCTION_90_8(uint64_t result)
{
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = result;
  strcpy((char *)(v2 + 80), "remainingPages");
  *(_BYTE *)(v2 + 95) = -18;
  return result;
}

uint64_t OUTLINED_FUNCTION_91_5(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v5 + 88) = a4;
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = v4;
  *(void *)(v5 + 16) = result;
  *(void *)(v5 + 24) = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_92_5()
{
  uint64_t result = *(void *)(v0 + 48);
  strcpy((char *)(v1 + 224), "customDialog");
  *(_BYTE *)(v1 + 237) = 0;
  *(_WORD *)(v1 + 238) = -5120;
  return result;
}

uint64_t OUTLINED_FUNCTION_93_4()
{
  uint64_t result = *(void *)(v0 + 40);
  strcpy((char *)(v1 + 176), "customDialog");
  *(_BYTE *)(v1 + 189) = 0;
  *(_WORD *)(v1 + 190) = -5120;
  return result;
}

void OUTLINED_FUNCTION_95_6(uint64_t a1@<X8>)
{
  *(void *)(v2 + 96) = v1;
  *(void *)(v2 + 120) = a1;
  strcpy((char *)(v2 + 128), "nextPageSize");
  *(_BYTE *)(v2 + 141) = 0;
  *(_WORD *)(v2 + 142) = -5120;
}

uint64_t OUTLINED_FUNCTION_99_2(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 0x6E756F436D657469LL;
  v2[11] = 0xE900000000000074LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_105_2(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(_BYTE *)(v7 + 120) = a6;
  *(void *)(v7 + 48) = a5;
  *(void *)(v7 + 56) = v6;
  *(void *)(v7 + 32) = a3;
  *(void *)(v7 + 40) = a4;
  *(void *)(v7 + 16) = result;
  *(void *)(v7 + 24) = a2;
  return result;
}

void OUTLINED_FUNCTION_106_4(uint64_t a1@<X8>)
{
  v2[12] = v1;
  v2[15] = a1;
  v2[16] = 0x657A695365676170LL;
  v2[17] = 0xE800000000000000LL;
}

uint64_t OUTLINED_FUNCTION_107_3(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 1835365481LL;
  v2[11] = 0xE400000000000000LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_110_8(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 0x736D657469LL;
  v2[11] = 0xE500000000000000LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_111_5(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 0xD000000000000010LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_112_5@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = *(void *)(v2 + 40);
  v3[18] = a1;
  v3[21] = v1;
  v3[22] = 0xD000000000000010LL;
  return result;
}

void OUTLINED_FUNCTION_113_5()
{
  *(void *)(v0 + 104) = 0LL;
  *(void *)(v0 + 112) = 0LL;
}

void OUTLINED_FUNCTION_116_6(uint64_t a1@<X8>)
{
  *uint64_t v1 = v2;
  v1[1] = a1;
}

void *OUTLINED_FUNCTION_119_5@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *uint64_t result = v2;
  result[1] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_120_5(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 0xD000000000000018LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_121_5()
{
  return swift_retain(v0);
}

uint64_t OUTLINED_FUNCTION_124_5()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_125_3@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = *(void *)(v2 + 32);
  v3[12] = v1;
  v3[15] = a1;
  v3[16] = 0xD000000000000015LL;
  return result;
}

void OUTLINED_FUNCTION_126_5()
{
  *(void *)(v2 + 272) = v0;
  *(void *)(v2 + 280) = (v1 - 32) | 0x8000000000000000LL;
}

uint64_t OUTLINED_FUNCTION_127_4()
{
  return 0x66666F646E6168LL;
}

void OUTLINED_FUNCTION_129_3(char a1@<W8>)
{
  *(void *)(v2 + 216) = v1;
  *(_BYTE *)(v2 + 192) = a1;
}

  ;
}

uint64_t OUTLINED_FUNCTION_132_2( uint64_t result, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7)
{
  *(void *)(v8 + 40) = a7;
  *(void *)(v8 + 48) = v7;
  *(_BYTE *)(v8 + 90) = a6;
  *(_BYTE *)(v8 + 89) = a5;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a4;
  *(_BYTE *)(v8 + 88) = a3;
  *(void *)(v8 + 16) = result;
  return result;
}

  ;
}

uint64_t OUTLINED_FUNCTION_135_2(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

__n128 *OUTLINED_FUNCTION_137_0(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x656369766564LL;
  result[2].n128_u64[1] = 0xE600000000000000LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_138_3(uint64_t result)
{
  *(void *)(v1 + 80) = result;
  return result;
}

void OUTLINED_FUNCTION_139_3()
{
  *(void *)(v0 + 128) = 0x736D657469LL;
  *(void *)(v0 + 136) = 0xE500000000000000LL;
}

uint64_t OUTLINED_FUNCTION_143_3()
{
  return *(void *)(v0 + 40);
}

uint64_t OUTLINED_FUNCTION_144_1()
{
  return *(void *)(v0 + 48);
}

uint64_t OUTLINED_FUNCTION_147_1(uint64_t result)
{
  *(void *)(v1 + 72) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_150_1()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 56));
}

uint64_t OUTLINED_FUNCTION_152_0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_153_2(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

_BYTE *OUTLINED_FUNCTION_154_1@<X0>(_BYTE *result@<X0>, char a2@<W8>)
{
  *uint64_t result = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_155_0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_156_0@<X0>(int a1@<W8>)
{
  return (a1 + 1);
}

void OUTLINED_FUNCTION_157_2(uint64_t a1@<X8>)
{
  *(_BYTE *)(v2 + 192) = v1;
  *(void *)(v2 + 216) = a1;
  *(void *)(v2 + 224) = v3 | 8;
}

uint64_t OUTLINED_FUNCTION_158_2()
{
  return *(void *)(v0 + 40);
}

uint64_t OUTLINED_FUNCTION_160_1()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 80));
}

uint64_t OUTLINED_FUNCTION_162_1()
{
  return *(void *)(v0 + 32);
}

uint64_t OUTLINED_FUNCTION_163_0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 40) = a4;
  *(void *)(v6 + 48) = v5;
  *(_BYTE *)(v6 + 104) = a5;
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = a3;
  *(void *)(v6 + 16) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_164_1(uint64_t result)
{
  *(void *)(v1 + 96) = result;
  return result;
}

void OUTLINED_FUNCTION_168_0(char a1@<W8>)
{
  *(void *)(v2 + 312) = v1;
  *(_BYTE *)(v2 + 288) = a1;
}

  ;
}

uint64_t OUTLINED_FUNCTION_171_0()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 64));
}

uint64_t LinkMetadataProvider.__allocating_init()()
{
  uint64_t v1 = swift_allocObject(v0, 24LL, 7LL);
  *(void *)(v1 + 16) = [objc_allocWithZone(LNMetadataProvider) init];
  return v1;
}

uint64_t (**LinkMetadataProvider.actionMetadata(bundleId:actionId:)( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4))(uint64_t, uint64_t, uint64_t)
{
  uint64_t v101 = a3;
  uint64_t v99 = a1;
  uint64_t v7 = type metadata accessor for OSSignpostError(0LL);
  uint64_t v93 = *(void *)(v7 - 8);
  uint64_t v94 = v7;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_61_6();
  uint64_t v91 = v8;
  __chkstk_darwin(v9);
  uint64_t v92 = &v85[-v10];
  uint64_t v11 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v104 = *(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v11 - 8);
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_61_6();
  uint64_t v95 = v12;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v97 = &v85[-v15];
  uint64_t v16 = __chkstk_darwin(v14);
  char v18 = &v85[-v17];
  __chkstk_darwin(v16);
  uint64_t v19 = type metadata accessor for OSSignposter(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = &v85[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v96 = v4;
  uint64_t v23 = __swift_project_value_buffer(v19, (uint64_t)static Signposter.voiceCommands);
  uint64_t v24 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v20 + 16);
  uint64_t v103 = v19;
  uint64_t v25 = v24(v22, v23, v19);
  uint64_t v26 = OSSignposter.logHandle.getter(v25);
  OSSignpostID.init(log:)(v26);
  swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v27 = swift_bridgeObjectRetain_n(a4, 2LL);
  uint64_t v105 = v22;
  unint64_t v28 = a4;
  uint64_t v29 = (os_log_s *)OSSignposter.logHandle.getter(v27);
  int v30 = static os_signpost_type_t.begin.getter();
  char v31 = OS_os_log.signpostsEnabled.getter();
  uint64_t v102 = v20;
  unint64_t v98 = v28;
  if ((v31 & 1) != 0)
  {
    uint64_t v89 = v104[2];
    OUTLINED_FUNCTION_7_31(v89);
    uint64_t v32 = OUTLINED_FUNCTION_38(22LL);
    uint64_t v33 = (void *)OUTLINED_FUNCTION_38(64LL);
    uint64_t v90 = v11;
    uint64_t v88 = (uint64_t)v33;
    id v107 = v33;
    *(_DWORD *)uint64_t v32 = 136315394;
    swift_bridgeObjectRetain(a2);
    uint64_t v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, a2, (uint64_t *)&v107);
    os_log_t v87 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107, v32 + 4);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v32 + 12) = 2080;
    swift_bridgeObjectRetain(v28);
    int v86 = v30;
    uint64_t v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v28, (uint64_t *)&v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107, v32 + 14);
    uint64_t v34 = swift_bridgeObjectRelease_n(v28, 3LL);
    os_signpost_id_t v35 = OSSignpostID.rawValue.getter(v34);
    os_log_t v36 = v87;
    _os_signpost_emit_with_name_impl( &dword_0,  v87,  (os_signpost_type_t)v86,  v35,  "LinkFetchActionMetadata",  "BundleId: %s, ActionId: %s",  (uint8_t *)v32,  0x16u);
    uint64_t v37 = v88;
    swift_arrayDestroy(v88, 2LL, (char *)&type metadata for Any + 8);
    uint64_t v38 = v90;
    OUTLINED_FUNCTION_1_0(v37);
    uint64_t v39 = v32;
    uint64_t v40 = v104;
    OUTLINED_FUNCTION_1_0(v39);

    ((void (*)(_BYTE *, uint64_t))v40[1])(v18, v38);
    uint64_t v41 = v89;
  }

  else
  {
    swift_bridgeObjectRelease_n(v28, 2LL);
    swift_bridgeObjectRelease_n(a2, 2LL);

    uint64_t v41 = v104[2];
  }

  OUTLINED_FUNCTION_7_31(v41);
  uint64_t v42 = type metadata accessor for OSSignpostIntervalState(0LL);
  swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
  OSSignpostIntervalState.init(id:isOpen:)(v18, 1LL);
  OUTLINED_FUNCTION_2_29();
  uint64_t v43 = *(void **)(v100 + 16);
  NSString v44 = String._bridgeToObjectiveC()();
  NSString v45 = String._bridgeToObjectiveC()();
  id v107 = 0LL;
  uint64_t v46 = (uint64_t (**)(uint64_t, uint64_t, uint64_t)) [v43 actionForBundleIdentifier:v44 andActionIdentifier:v45 error:&v107];

  id v47 = v107;
  if (v46)
  {
    uint64_t v48 = (void *)OSSignposter.logHandle.getter(v107);
    uint64_t v49 = OUTLINED_FUNCTION_10_29();
    static os_signpost_type_t.end.getter(v49);
    if ((OUTLINED_FUNCTION_13_26() & 1) != 0)
    {
      uint64_t v50 = OUTLINED_FUNCTION_8_39();
      checkForErrorAndConsumeState(state:)(v50);
      OUTLINED_FUNCTION_34_0();
      uint64_t v62 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      *uint64_t v62 = 0;
      os_signpost_id_t v63 = OSSignpostID.rawValue.getter(v62);
      OUTLINED_FUNCTION_4_33(&dword_0, v64, (os_signpost_type_t)v45, v63, "LinkFetchActionMetadata");
      OUTLINED_FUNCTION_1_0((uint64_t)v62);
      uint64_t v46 = v104;
    }

    OUTLINED_FUNCTION_2_29();
    OUTLINED_FUNCTION_34_0();
    OUTLINED_FUNCTION_9_32();
  }

  else
  {
    id v51 = v107;
    uint64_t v52 = _convertNSErrorToError(_:)(v47);

    uint64_t v58 = swift_willThrow(v53, v54, v55, v56, v57);
    uint64_t v59 = (void *)OSSignposter.logHandle.getter(v58);
    uint64_t v60 = OUTLINED_FUNCTION_10_29();
    static os_signpost_type_t.end.getter(v60);
    if ((OUTLINED_FUNCTION_13_26() & 1) != 0)
    {
      uint64_t v61 = OUTLINED_FUNCTION_8_39();
      checkForErrorAndConsumeState(state:)(v61);
      OUTLINED_FUNCTION_34_0();
      uint64_t v65 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      _WORD *v65 = 0;
      os_signpost_id_t v66 = OSSignpostID.rawValue.getter(v65);
      OUTLINED_FUNCTION_4_33(&dword_0, v67, (os_signpost_type_t)v45, v66, "LinkFetchActionMetadata");
      OUTLINED_FUNCTION_1_0((uint64_t)v65);
      uint64_t v46 = v104;
    }

    OUTLINED_FUNCTION_2_29();
    OUTLINED_FUNCTION_34_0();
    OUTLINED_FUNCTION_9_32();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v68 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v68, (uint64_t)static Logger.voiceCommands);
    OUTLINED_FUNCTION_11_29();
    uint64_t v69 = OUTLINED_FUNCTION_11_29();
    uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
    os_log_type_t v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v72 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v73 = (void *)OUTLINED_FUNCTION_38(32LL);
      uint64_t v106 = v52;
      id v107 = v73;
      *(_DWORD *)uint64_t v72 = 136315138;
      OUTLINED_FUNCTION_11_29();
      uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v75 = String.init<A>(describing:)(&v106, v74);
      uint64_t v76 = v52;
      unint64_t v78 = v77;
      uint64_t v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v77, (uint64_t *)&v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107, v72 + 4);
      swift_bridgeObjectRelease(v78);
      swift_errorRelease(v76);
      swift_errorRelease(v76);
      _os_log_impl(&dword_0, v70, v71, "LinkMetadataProvider error %s", v72, 0xCu);
      swift_arrayDestroy(v73, 1LL, (char *)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0((uint64_t)v73);
      OUTLINED_FUNCTION_1_0((uint64_t)v72);
    }

    else
    {
      swift_errorRelease(v52);
      swift_errorRelease(v52);
    }

    swift_willThrow(v79, v80, v81, v82, v83);
  }

  return v46;
}

uint64_t LinkMetadataProvider.enums(forBundleIdentifier:)()
{
  uint64_t v2 = *(void **)(v0 + 16);
  NSString v3 = String._bridgeToObjectiveC()();
  id v15 = 0LL;
  id v4 = [v2 enumsForBundleIdentifier:v3 error:&v15];

  id v5 = v15;
  if (v4)
  {
    unint64_t v6 = type metadata accessor for LNEnumMetadata();
    uint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v6);
    id v7 = v5;
  }

  else
  {
    id v8 = v15;
    _convertNSErrorToError(_:)(v5);

    swift_willThrow(v9, v10, v11, v12, v13);
  }

  return v1;
}

uint64_t LinkMetadataProvider.init()()
{
  *(void *)(v0 + 16) = [objc_allocWithZone(LNMetadataProvider) init];
  return v0;
}

uint64_t (**protocol witness for LinkMetadataProviding.actionMetadata(bundleId:actionId:) in conformance LinkMetadataProvider( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4))(uint64_t, uint64_t, uint64_t)
{
  return LinkMetadataProvider.actionMetadata(bundleId:actionId:)(a1, a2, a3, a4);
}

uint64_t protocol witness for LinkMetadataProviding.enums(forBundleIdentifier:) in conformance LinkMetadataProvider()
{
  return LinkMetadataProvider.enums(forBundleIdentifier:)();
}

unint64_t type metadata accessor for LNEnumMetadata()
{
  unint64_t result = lazy cache variable for type metadata for LNEnumMetadata;
  if (!lazy cache variable for type metadata for LNEnumMetadata)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___LNEnumMetadata);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNEnumMetadata);
  }

  return result;
}

uint64_t type metadata accessor for LinkMetadataProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin20LinkMetadataProvider);
}

uint64_t OUTLINED_FUNCTION_2_29()
{
  return v2(v1, v0);
}

uint64_t OUTLINED_FUNCTION_3_38()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 216) + 88LL))(v0, *(void *)(v1 - 208));
}

void OUTLINED_FUNCTION_4_33( void *a1, uint64_t a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5)
{
}

uint64_t OUTLINED_FUNCTION_5_35()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_7_31@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v3, v2);
}

uint64_t OUTLINED_FUNCTION_8_39()
{
  *(void *)(v2 - 128) = v1;
  return swift_retain(v0);
}

uint64_t OUTLINED_FUNCTION_9_32()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 144) + 8LL))( *(void *)(v0 - 120),  *(void *)(v0 - 136));
}

uint64_t OUTLINED_FUNCTION_10_29()
{
  return OSSignpostIntervalState.signpostID.getter();
}

uint64_t OUTLINED_FUNCTION_11_29()
{
  return swift_errorRetain(v0);
}

uint64_t OUTLINED_FUNCTION_13_26()
{
  return OS_os_log.signpostsEnabled.getter();
}

void static UsoTaskBuilder_execute_common_VoiceCommand.unitTaskBuilder(value:symbol:unitName:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v37 = a6;
  uint64_t v11 = type metadata accessor for UsoIdentifier(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for UsoEntityBuilder_common_Measurement(0LL);
  OUTLINED_FUNCTION_51(v15);
  UsoEntityBuilder_common_Measurement.init()();
  if ((a2 & 1) == 0)
  {
    uint64_t v33 = v12;
    uint64_t v34 = v11;
    uint64_t v35 = a5;
    uint64_t v36 = a3;
    uint64_t v16 = type metadata accessor for UsoEntityBuilder_common_MeasurementComponent(0LL);
    OUTLINED_FUNCTION_51(v16);
    uint64_t v17 = UsoEntityBuilder_common_MeasurementComponent.init()();
    uint64_t v18 = type metadata accessor for UsoEntityBuilder_common_Integer(0LL);
    OUTLINED_FUNCTION_51(v18);
    uint64_t v19 = UsoEntityBuilder_common_Integer.init()();
    dispatch thunk of UsoEntityBuilder_common_Integer.setIntegerValue(value:)(a1);
    uint64_t v20 = swift_retain(v19);
    dispatch thunk of UsoEntityBuilder_common_MeasurementComponent.setValue(value:)( v20,  &protocol witness table for UsoEntityBuilder_common_Integer);
    swift_release();
    uint64_t v21 = v37;
    if (a4 && v37)
    {
      uint64_t v22 = type metadata accessor for UsoEntityBuilder_common_MeasurementUnit(0LL);
      OUTLINED_FUNCTION_51(v22);
      uint64_t v23 = swift_bridgeObjectRetain(v21);
      uint64_t v24 = UsoEntityBuilder_common_MeasurementUnit.init()(v23);
      uint64_t v25 = dispatch thunk of UsoEntityBuilder_common_MeasurementUnit.setName(value:)(v36, a4);
      if (dispatch thunk of UsoEntityBuilder_common_MeasurementUnit.name.getter(v25))
      {
        UsoIdentifier.init(value:appBundleId:namespace:)( v35,  v21,  0LL,  0xE000000000000000LL,  0xD000000000000010LL,  0x8000000000194D20LL);
        dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)(v14);
        swift_release();
        (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v34);
      }

      else
      {
        swift_bridgeObjectRelease(v21);
      }

      uint64_t v26 = swift_retain(v24);
      dispatch thunk of UsoEntityBuilder_common_MeasurementComponent.setUnit(value:)( v26,  &protocol witness table for UsoEntityBuilder_common_MeasurementUnit);
      OUTLINED_FUNCTION_107_0(v24);
    }

    uint64_t v27 = swift_retain(v17);
    dispatch thunk of UsoEntityBuilder_common_Measurement.addComponents(value:)( v27,  &protocol witness table for UsoEntityBuilder_common_MeasurementComponent);
    swift_release();
    OUTLINED_FUNCTION_107_0(v17);
  }

  uint64_t v28 = OUTLINED_FUNCTION_4_34();
  OUTLINED_FUNCTION_51(v28);
  OUTLINED_FUNCTION_8_40();
  uint64_t v29 = OUTLINED_FUNCTION_18_29();
  dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setMeasurement(value:)( v29,  &protocol witness table for UsoEntityBuilder_common_Measurement);
  OUTLINED_FUNCTION_34_0();
  uint64_t v30 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_51(v30);
  OUTLINED_FUNCTION_32_12();
  uint64_t v31 = OUTLINED_FUNCTION_14_8();
  dispatch thunk of Uso_VerbTemplateBuilder_ReferenceVoiceCommandPayload.setPayload(value:)( v31,  &protocol witness table for UsoEntityBuilder_common_VoiceCommandPayload);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_107_0(a4);
  OUTLINED_FUNCTION_24_0();
}

void static UsoTaskBuilder_execute_common_VoiceCommand.stringTaskBuilder(value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = OUTLINED_FUNCTION_4_34();
  OUTLINED_FUNCTION_51(v5);
  OUTLINED_FUNCTION_8_40();
  uint64_t v6 = OUTLINED_FUNCTION_12_27();
  uint64_t v7 = type metadata accessor for UsoPrimitiveStringBuilder(v6);
  OUTLINED_FUNCTION_51(v7);
  swift_bridgeObjectRetain(a2);
  uint64_t v10 = UsoPrimitiveStringBuilder.init(value:)(a1, a2);
  dispatch thunk of UsoEntityBuilder.setAsHelper<A>(attributeName:value:)( 0x6156676E69727473LL,  0xEB0000000065756CLL,  &v10,  v7);
  OUTLINED_FUNCTION_61();
  uint64_t v8 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_51(v8);
  OUTLINED_FUNCTION_32_12();
  uint64_t v9 = OUTLINED_FUNCTION_3_39();
  dispatch thunk of Uso_VerbTemplateBuilder_ReferenceVoiceCommandPayload.setPayload(value:)( v9,  &protocol witness table for UsoEntityBuilder_common_VoiceCommandPayload);
  OUTLINED_FUNCTION_107_0(v2);
  OUTLINED_FUNCTION_5_30();
}

void static UsoTaskBuilder_execute_common_VoiceCommand.entityTaskBuilder()()
{
  uint64_t v1 = OUTLINED_FUNCTION_4_34();
  OUTLINED_FUNCTION_51(v1);
  OUTLINED_FUNCTION_8_40();
  uint64_t v2 = OUTLINED_FUNCTION_12_27();
  uint64_t v3 = type metadata accessor for UsoEntityBuilder_common_AppEntity(v2);
  OUTLINED_FUNCTION_51(v3);
  UsoEntityBuilder_common_AppEntity.init()();
  uint64_t v4 = OUTLINED_FUNCTION_11_30();
  OUTLINED_FUNCTION_51(v4);
  UsoPrimitiveStringBuilder.init(value:)(0LL, 0LL);
  OUTLINED_FUNCTION_14_33();
  OUTLINED_FUNCTION_16_36();
  swift_release();
  uint64_t v5 = OUTLINED_FUNCTION_14_8();
  dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setAppEntity(value:)( v5,  &protocol witness table for UsoEntityBuilder_common_AppEntity);
  OUTLINED_FUNCTION_61();
  uint64_t v6 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_51(v6);
  OUTLINED_FUNCTION_32_12();
  uint64_t v7 = OUTLINED_FUNCTION_3_39();
  dispatch thunk of Uso_VerbTemplateBuilder_ReferenceVoiceCommandPayload.setPayload(value:)( v7,  &protocol witness table for UsoEntityBuilder_common_VoiceCommandPayload);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_107_0(v0);
  OUTLINED_FUNCTION_5_30();
}

void static UsoTaskBuilder_execute_common_VoiceCommand.urlTaskBuilder(value:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_4_34();
  OUTLINED_FUNCTION_51(v1);
  OUTLINED_FUNCTION_8_40();
  uint64_t v2 = OUTLINED_FUNCTION_12_27();
  uint64_t v3 = type metadata accessor for UsoEntityBuilder_common_Uri(v2);
  OUTLINED_FUNCTION_51(v3);
  UsoEntityBuilder_common_Uri.init()();
  uint64_t v4 = OUTLINED_FUNCTION_11_30();
  OUTLINED_FUNCTION_51(v4);
  OUTLINED_FUNCTION_17_32();
  OUTLINED_FUNCTION_15_21();
  OUTLINED_FUNCTION_16_36();
  swift_release();
  uint64_t v5 = OUTLINED_FUNCTION_14_8();
  dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setContactAddress(value:)( v5,  &protocol witness table for UsoEntityBuilder_common_Uri);
  OUTLINED_FUNCTION_61();
  uint64_t v6 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_51(v6);
  OUTLINED_FUNCTION_32_12();
  uint64_t v7 = OUTLINED_FUNCTION_3_39();
  dispatch thunk of Uso_VerbTemplateBuilder_ReferenceVoiceCommandPayload.setPayload(value:)( v7,  &protocol witness table for UsoEntityBuilder_common_VoiceCommandPayload);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_107_0(v0);
  OUTLINED_FUNCTION_5_30();
}

uint64_t static UsoTaskBuilder_execute_common_VoiceCommand.placemarkTaskBuilder()()
{
  return static UsoTaskBuilder_execute_common_VoiceCommand.placemarkTaskBuilder()( (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntityBuilder_common_GeographicArea,  (void (*)(void))&UsoEntityBuilder_common_GeographicArea.init(),  (uint64_t)&protocol witness table for UsoEntityBuilder_common_GeographicArea,  (void (*)(void))&dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setGeographicArea(value:));
}

void static UsoTaskBuilder_execute_common_VoiceCommand.personTaskBuilder(value:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_4_34();
  OUTLINED_FUNCTION_51(v1);
  OUTLINED_FUNCTION_8_40();
  uint64_t v2 = OUTLINED_FUNCTION_12_27();
  uint64_t v3 = type metadata accessor for UsoEntityBuilder_common_Person(v2);
  OUTLINED_FUNCTION_51(v3);
  UsoEntityBuilder_common_Person.init()();
  uint64_t v4 = OUTLINED_FUNCTION_11_30();
  OUTLINED_FUNCTION_51(v4);
  OUTLINED_FUNCTION_17_32();
  OUTLINED_FUNCTION_15_21();
  OUTLINED_FUNCTION_14_33();
  OUTLINED_FUNCTION_16_36();
  swift_release();
  uint64_t v5 = OUTLINED_FUNCTION_14_8();
  dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setAgent(value:)( v5,  &protocol witness table for UsoEntityBuilder_common_Person);
  OUTLINED_FUNCTION_61();
  uint64_t v6 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_51(v6);
  OUTLINED_FUNCTION_32_12();
  uint64_t v7 = OUTLINED_FUNCTION_3_39();
  dispatch thunk of Uso_VerbTemplateBuilder_ReferenceVoiceCommandPayload.setPayload(value:)( v7,  &protocol witness table for UsoEntityBuilder_common_VoiceCommandPayload);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_107_0(v0);
  OUTLINED_FUNCTION_5_30();
}

void static UsoTaskBuilder_execute_common_VoiceCommand.currencyTaskBuilder(value:currencyCode:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UsoIdentifier(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UsoEntityBuilder_common_CurrencyAmount(0LL);
  OUTLINED_FUNCTION_51(v12);
  UsoEntityBuilder_common_CurrencyAmount.init()();
  if (a4)
  {
    uint64_t v13 = type metadata accessor for UsoEntityBuilder_common_Currency(0LL);
    OUTLINED_FUNCTION_51(v13);
    uint64_t v14 = swift_bridgeObjectRetain(a4);
    uint64_t v15 = UsoEntityBuilder_common_Currency.init()(v14);
    uint64_t v16 = dispatch thunk of UsoEntityBuilder_common_Currency.setName(value:)(a3, a4);
    if (dispatch thunk of UsoEntityBuilder_common_Currency.name.getter(v16))
    {
      UsoIdentifier.init(value:appBundleId:namespace:)( a3,  a4,  0LL,  0xE000000000000000LL,  0x79636E6572727563LL,  0xEC00000074696E55LL);
      dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)(v11);
      swift_release();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }

    else
    {
      swift_bridgeObjectRelease(a4);
    }

    uint64_t v17 = swift_retain(v15);
    dispatch thunk of UsoEntityBuilder_common_CurrencyAmount.setCurrency(value:)( v17,  &protocol witness table for UsoEntityBuilder_common_Currency);
    OUTLINED_FUNCTION_107_0(v15);
  }

  if ((a2 & 1) == 0)
  {
    uint64_t v18 = type metadata accessor for UsoEntityBuilder_common_Integer(0LL);
    OUTLINED_FUNCTION_51(v18);
    uint64_t v19 = UsoEntityBuilder_common_Integer.init()();
    dispatch thunk of UsoEntityBuilder_common_Integer.setIntegerValue(value:)(a1);
    uint64_t v20 = swift_retain(v19);
    dispatch thunk of UsoEntityBuilder_common_CurrencyAmount.setAmount(value:)( v20,  &protocol witness table for UsoEntityBuilder_common_Integer);
    OUTLINED_FUNCTION_107_0(v19);
  }

  uint64_t v21 = OUTLINED_FUNCTION_4_34();
  OUTLINED_FUNCTION_51(v21);
  OUTLINED_FUNCTION_8_40();
  uint64_t v22 = OUTLINED_FUNCTION_18_29();
  dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setCurrency(value:)( v22,  &protocol witness table for UsoEntityBuilder_common_CurrencyAmount);
  OUTLINED_FUNCTION_34_0();
  uint64_t v23 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_51(v23);
  OUTLINED_FUNCTION_32_12();
  uint64_t v24 = OUTLINED_FUNCTION_14_8();
  dispatch thunk of Uso_VerbTemplateBuilder_ReferenceVoiceCommandPayload.setPayload(value:)( v24,  &protocol witness table for UsoEntityBuilder_common_VoiceCommandPayload);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_107_0(a1);
  OUTLINED_FUNCTION_24_0();
}

uint64_t static UsoTaskBuilder_execute_common_VoiceCommand.numberTaskBuilder()()
{
  return static UsoTaskBuilder_execute_common_VoiceCommand.placemarkTaskBuilder()( (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntityBuilder_common_Number,  (void (*)(void))&UsoEntityBuilder_common_Number.init(),  (uint64_t)&protocol witness table for UsoEntityBuilder_common_Number,  (void (*)(void))&dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setNumber(value:));
}

uint64_t static UsoTaskBuilder_execute_common_VoiceCommand.dateTaskBuilder()()
{
  return static UsoTaskBuilder_execute_common_VoiceCommand.placemarkTaskBuilder()( (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntityBuilder_common_DateTime,  (void (*)(void))&UsoEntityBuilder_common_DateTime.init(),  (uint64_t)&protocol witness table for UsoEntityBuilder_common_DateTime,  (void (*)(void))&dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setDateTime(value:));
}

uint64_t static UsoTaskBuilder_execute_common_VoiceCommand.placemarkTaskBuilder()( uint64_t (*a1)(uint64_t), void (*a2)(void), uint64_t a3, void (*a4)(void))
{
  uint64_t v8 = OUTLINED_FUNCTION_4_34();
  OUTLINED_FUNCTION_51(v8);
  OUTLINED_FUNCTION_8_40();
  uint64_t v9 = OUTLINED_FUNCTION_12_27();
  uint64_t v10 = a1(v9);
  OUTLINED_FUNCTION_51(v10);
  a2();
  a4();
  uint64_t v11 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_51(v11);
  OUTLINED_FUNCTION_32_12();
  uint64_t v12 = OUTLINED_FUNCTION_3_39();
  dispatch thunk of Uso_VerbTemplateBuilder_ReferenceVoiceCommandPayload.setPayload(value:)( v12,  &protocol witness table for UsoEntityBuilder_common_VoiceCommandPayload);
  swift_release();
  OUTLINED_FUNCTION_107_0(v4);
  return v4;
}

uint64_t OUTLINED_FUNCTION_3_39()
{
  return swift_retain(v0);
}

uint64_t OUTLINED_FUNCTION_4_34()
{
  return type metadata accessor for UsoEntityBuilder_common_VoiceCommandPayload(0LL);
}

uint64_t OUTLINED_FUNCTION_8_40()
{
  return UsoEntityBuilder_common_VoiceCommandPayload.init()();
}

uint64_t OUTLINED_FUNCTION_11_30()
{
  return type metadata accessor for UsoPrimitiveStringBuilder(0LL);
}

uint64_t OUTLINED_FUNCTION_12_27()
{
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_14_33()
{
  return 1701667182LL;
}

uint64_t OUTLINED_FUNCTION_15_21()
{
  return UsoPrimitiveStringBuilder.init(value:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_16_36()
{
  return dispatch thunk of UsoEntityBuilder.setAsHelper<A>(attributeName:value:)();
}

uint64_t OUTLINED_FUNCTION_17_32()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_18_29()
{
  return swift_retain(v0);
}

void CustomIntentContinueInAppFlowStrategy.__allocating_init(voiceCommandName:siriEnvironment:deviceState:continueInAppCATWrapperSimple:responseFactory:)()
{
  uint64_t v5 = OUTLINED_FUNCTION_48_10(v3, v4, v13);
  OUTLINED_FUNCTION_0_37(v5, v6, v7, v8, v9, v10, v11, v12, v14);
  __swift_destroy_boxed_opaque_existential_1Tm(v0);
  OUTLINED_FUNCTION_24_0();
}

void CustomIntentContinueInAppFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:continueInAppCATWrapperSimple:responseFactory:)()
{
  uint64_t v5 = OUTLINED_FUNCTION_48_10(v3, v4, v13);
  OUTLINED_FUNCTION_0_37(v5, v6, v7, v8, v9, v10, v11, v12, v14);
  __swift_destroy_boxed_opaque_existential_1Tm(v0);
  OUTLINED_FUNCTION_24_0();
}

BOOL CustomIntentContinueInAppFlowStrategy.requireUnlock(intentResolutionRecord:)()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  return (dispatch thunk of DeviceState.isCarPlay.getter(v1, v2) & 1) == 0;
}

uint64_t CustomIntentContinueInAppFlowStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:)( uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)CustomIntentContinueInAppFlowStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:));
}

uint64_t CustomIntentContinueInAppFlowStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:)()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)(*(void *)(v0 + 32) + 56LL);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INIntent, INIntentResponse>);
  uint64_t v4 = IntentResolutionRecord.app.getter(v3);
  uint64_t v5 = (void *)IntentResolutionRecord.intent.getter(v3);
  uint64_t v6 = (void *)IntentResolutionRecord.intentResponse.getter(v3);
  uint64_t v7 = *(void (**)(uint64_t, void *, void *))(*(void *)v2 + 224LL);
  v1[3] = type metadata accessor for AceOutput(0LL);
  v1[4] = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v1);
  v7(v4, v5, v6);

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CustomIntentContinueInAppFlowStrategy.makeContinueInAppResponse(intentResolutionRecord:)( uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)CustomIntentContinueInAppFlowStrategy.makeContinueInAppResponse(intentResolutionRecord:));
}

uint64_t CustomIntentContinueInAppFlowStrategy.makeContinueInAppResponse(intentResolutionRecord:)()
{
  uint64_t v1 = *(void *)(v0[4] + 56LL);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INIntent, INIntentResponse>);
  uint64_t v3 = IntentResolutionRecord.app.getter(v2);
  v0[5] = v3;
  uint64_t v4 = IntentResolutionRecord.intent.getter(v2);
  v0[6] = v4;
  uint64_t v5 = *(int **)(*(void *)v1 + 232LL);
  uint64_t v8 = (int *)((char *)v5 + *v5);
  uint64_t v6 = (void *)swift_task_alloc(v5[1]);
  v0[7] = v6;
  *uint64_t v6 = v0;
  v6[1] = CustomIntentContinueInAppFlowStrategy.makeContinueInAppResponse(intentResolutionRecord:);
  return ((uint64_t (*)(void, uint64_t, uint64_t))v8)(v0[2], v3, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    return swift_task_switch( CustomIntentContinueInAppFlowStrategy.makeContinueInAppResponse(intentResolutionRecord:),  0LL,  0LL);
  }

  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  swift_release();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t protocol witness for ContinueInAppAutoPunchOutFlowStrategyAsync.requireUnlock(intentResolutionRecord:) in conformance CustomIntentContinueInAppFlowStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104LL))() & 1;
}

uint64_t protocol witness for ContinueInAppAutoPunchOutFlowStrategyAsync.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:) in conformance CustomIntentContinueInAppFlowStrategy( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(**(void **)v2 + 112LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance CustomIntentContinueInAppFlowStrategy;
  return v9(a1, a2);
}

uint64_t protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance CustomIntentContinueInAppFlowStrategy( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(**(void **)v2 + 120LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance CustomIntentContinueInAppFlowStrategy;
  return v9(a1, a2);
}

uint64_t protocol witness for UnlockDeviceFlowStrategyAsync.makePromptForDeviceUnlock() in conformance CustomIntentContinueInAppFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to UnlockDeviceFlowStrategyAsync.makePromptForDeviceUnlock()[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for ScreentimeCheckFlowStrategyAsync.makeAppRestrictedByScreentimeResponse() in conformance WFScreentimeCheckFlowStrategy;
  return UnlockDeviceFlowStrategyAsync.makePromptForDeviceUnlock()(a1, a2, a3);
}

uint64_t specialized CustomIntentContinueInAppFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:continueInAppCATWrapperSimple:responseFactory:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v37 = a3;
  uint64_t v38 = a5;
  uint64_t v35 = a1;
  uint64_t v36 = a2;
  uint64_t v34 = a9;
  uint64_t v13 = *(void *)(a8 - 8);
  __chkstk_darwin(a1);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of DeviceState((uint64_t)a4, a7 + 16);
  outlined init with copy of DeviceState((uint64_t)a4, (uint64_t)v39);
  uint64_t v19 = type metadata accessor for RunCustomIntentCATs(0LL);
  static CATOption.defaultMode.getter(v19);
  uint64_t v33 = CATWrapper.__allocating_init(options:globals:)(v18, 0LL);
  uint64_t v20 = type metadata accessor for RunCustomIntentCATsSimple(0LL);
  static CATOption.defaultMode.getter(v20);
  uint64_t v21 = CATWrapperSimple.__allocating_init(options:globals:)(v18, 0LL);
  uint64_t v22 = type metadata accessor for RunVoiceCommandCATs(0LL);
  static CATOption.defaultMode.getter(v22);
  uint64_t v23 = CATWrapper.__allocating_init(options:globals:)(v18, 0LL);
  uint64_t v24 = type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  static CATOption.defaultMode.getter(v24);
  uint64_t v25 = CATWrapperSimple.__allocating_init(options:globals:)(v18, 0LL);
  uint64_t v26 = type metadata accessor for CustomIntentContinueInAppResponseGenerator();
  uint64_t v27 = swift_allocObject(v26, 144LL, 7LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a6, a8);
  specialized CustomIntentContinueInAppResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)( v35,  v36,  v37,  (uint64_t)v39,  v33,  v21,  v23,  v25,  v38,  (uint64_t)v15,  v27,  a8,  v34,  v31,  v32,  v33,  v34,  v35,  v36,  v37,  v38,  v39[0],  (void *)v39[1],  v39[2],  v39[3]);
  uint64_t v29 = v28;
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a6, a8);
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  *(void *)(a7 + 56) = v29;
  return a7;
}

uint64_t base witness table accessor for ContinueInAppDialogFlowStrategyAsync in CustomIntentContinueInAppFlowStrategy()
{
  return lazy protocol witness table accessor for type CustomIntentContinueInAppFlowStrategy and conformance CustomIntentContinueInAppFlowStrategy( &lazy protocol witness table cache variable for type CustomIntentContinueInAppFlowStrategy and conformance CustomIntentContinueInAppFlowStrategy,  (uint64_t)&protocol conformance descriptor for CustomIntentContinueInAppFlowStrategy);
}

uint64_t type metadata accessor for CustomIntentContinueInAppFlowStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin37CustomIntentContinueInAppFlowStrategy);
}

uint64_t base witness table accessor for UnlockDeviceFlowStrategyAsync in CustomIntentContinueInAppFlowStrategy()
{
  return lazy protocol witness table accessor for type CustomIntentContinueInAppFlowStrategy and conformance CustomIntentContinueInAppFlowStrategy( &lazy protocol witness table cache variable for type CustomIntentContinueInAppFlowStrategy and conformance CustomIntentContinueInAppFlowStrategy,  (uint64_t)&protocol conformance descriptor for CustomIntentContinueInAppFlowStrategy);
}

uint64_t base witness table accessor for ContinueInAppFlowStrategy in CustomIntentContinueInAppFlowStrategy()
{
  return lazy protocol witness table accessor for type CustomIntentContinueInAppFlowStrategy and conformance CustomIntentContinueInAppFlowStrategy( &lazy protocol witness table cache variable for type CustomIntentContinueInAppFlowStrategy and conformance CustomIntentContinueInAppFlowStrategy,  (uint64_t)&protocol conformance descriptor for CustomIntentContinueInAppFlowStrategy);
}

uint64_t lazy protocol witness table accessor for type CustomIntentContinueInAppFlowStrategy and conformance CustomIntentContinueInAppFlowStrategy( unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for CustomIntentContinueInAppFlowStrategy();
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_0_37( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return specialized CustomIntentContinueInAppFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:continueInAppCATWrapperSimple:responseFactory:)( v14,  v13,  v12,  v11,  v10,  v16,  v9,  v15,  a9);
}

uint64_t static RCHChildFlowProducersAsync.forCustomIntents(voiceCommandName:originDevice:runner:siriEnvironment:deviceState:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INIntent,  &OBJC_CLASS___INIntent_ptr);
  uint64_t v96 = type metadata accessor for NSError( 0LL,  &lazy cache variable for type metadata for INIntentResponse,  &OBJC_CLASS___INIntentResponse_ptr);
  RCHChildFlowProducersAsync.init()(v9);
  uint64_t v10 = type metadata accessor for ModeInfoProvider();
  OUTLINED_FUNCTION_19(v10, 24LL);
  id v99 = ModeInfoProvider.init()();
  uint64_t v94 = (void *)a6;
  outlined init with copy of DeviceState(a6, (uint64_t)v104);
  ObjC metadata update function for RunCustomIntentCATs();
  OUTLINED_FUNCTION_5_36();
  OUTLINED_FUNCTION_13_27();
  uint64_t v11 = OUTLINED_FUNCTION_12_27();
  uint64_t v12 = type metadata accessor for RunCustomIntentCATsSimple(v11);
  OUTLINED_FUNCTION_5_36();
  CATWrapperSimple.__allocating_init(options:globals:)(v6, 0LL);
  OUTLINED_FUNCTION_10_30();
  uint64_t v13 = type metadata accessor for CustomIntentNeedsValueFlowStrategy();
  OUTLINED_FUNCTION_19(v13, 80LL);
  CustomIntentNeedsValueFlowStrategy.init(deviceState:catWrapper:catWrapperSimple:)(v104, v9, v12);
  uint64_t v15 = v14;
  *(void *)&v104[0] = v14;
  lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels( &lazy protocol witness table cache variable for type CustomIntentNeedsValueFlowStrategy and conformance CustomIntentNeedsValueFlowStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for CustomIntentNeedsValueFlowStrategy,  (uint64_t)&protocol conformance descriptor for CustomIntentNeedsValueFlowStrategy);
  uint64_t v16 = OUTLINED_FUNCTION_24_25();
  uint64_t v18 = static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)(v16, v13, v17);
  uint64_t v20 = v19;
  OUTLINED_FUNCTION_34_0();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INIntent, INIntentResponse>);
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter(v18, v20, v21);
  OUTLINED_FUNCTION_1_30();
  swift_bridgeObjectRetain(a2);
  swift_retain(a5);
  OUTLINED_FUNCTION_5_36();
  uint64_t v22 = OUTLINED_FUNCTION_13_27();
  OUTLINED_FUNCTION_5_36();
  uint64_t v23 = CATWrapperSimple.__allocating_init(options:globals:)(v6, 0LL);
  ObjC metadata update function for RunVoiceCommandCATs();
  OUTLINED_FUNCTION_5_36();
  OUTLINED_FUNCTION_97(v6);
  uint64_t v24 = OUTLINED_FUNCTION_12_27();
  uint64_t v25 = type metadata accessor for RunVoiceCommandCATsSimple(v24);
  OUTLINED_FUNCTION_5_36();
  uint64_t v26 = OUTLINED_FUNCTION_96(v6);
  uint64_t v97 = type metadata accessor for ResponseFactory(0LL);
  swift_allocObject(v97, *(unsigned int *)(v97 + 48), *(unsigned __int16 *)(v97 + 52));
  OUTLINED_FUNCTION_57();
  uint64_t v27 = OUTLINED_FUNCTION_10_30();
  uint64_t v28 = type metadata accessor for CustomIntentNeedsConfirmationFlowStrategy(v27);
  uint64_t v29 = OUTLINED_FUNCTION_51(v28);
  uint64_t v30 = v22;
  uint64_t v31 = v21;
  uint64_t v32 = specialized CustomIntentNeedsConfirmationFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:responseFactory:)( a1,  a2,  a5,  v104,  v30,  v23,  v15,  v26,  v25,  v29);
  *(void *)&v104[0] = v32;
  lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels( &lazy protocol witness table cache variable for type CustomIntentNeedsConfirmationFlowStrategy and conformance CustomIntentNeedsConfirmationFlowStrategy,  type metadata accessor for CustomIntentNeedsConfirmationFlowStrategy,  (uint64_t)&protocol conformance descriptor for CustomIntentNeedsConfirmationFlowStrategy);
  uint64_t v33 = OUTLINED_FUNCTION_24_25();
  uint64_t v35 = static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)(v33, v28, v34);
  uint64_t v37 = v36;
  OUTLINED_FUNCTION_34_0();
  RCHChildFlowProducersAsync.needsConfirmationFlowProducer.setter(v35, v37, v31);
  OUTLINED_FUNCTION_1_30();
  OUTLINED_FUNCTION_52_5();
  OUTLINED_FUNCTION_59_9();
  swift_retain(v99);
  OUTLINED_FUNCTION_5_36();
  CATWrapperSimple.__allocating_init(options:globals:)(v6, 0LL);
  OUTLINED_FUNCTION_12_27();
  uint64_t v38 = type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy();
  uint64_t v39 = OUTLINED_FUNCTION_19(v38, 152LL);
  specialized CustomIntentNeedsDisambiguationFlowStrategy.init(voiceCommandName:deviceState:modeInfoProvider:siriEnvironment:runCustomIntentCatWrapperSimple:)( a1,  a2,  v104,  (uint64_t)v99,  a5,  v32,  v39);
  *(void *)&v104[0] = v40;
  OUTLINED_FUNCTION_6_36( &lazy protocol witness table cache variable for type CustomIntentNeedsDisambiguationFlowStrategy and conformance CustomIntentNeedsDisambiguationFlowStrategy,  v41,  (uint64_t)&protocol conformance descriptor for CustomIntentNeedsDisambiguationFlowStrategy);
  uint64_t v42 = OUTLINED_FUNCTION_24_25();
  static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)(v42, v38, v43);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_11_31();
  RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter(v44, v45, v46);
  OUTLINED_FUNCTION_1_30();
  uint64_t v47 = type metadata accessor for CustomIntentUnsupportedValueFlowStrategy();
  OUTLINED_FUNCTION_19(v47, 64LL);
  *(void *)&v104[0] = CustomIntentUnsupportedValueFlowStrategy.init(deviceState:)(v104);
  OUTLINED_FUNCTION_6_36( &lazy protocol witness table cache variable for type CustomIntentUnsupportedValueFlowStrategy and conformance CustomIntentUnsupportedValueFlowStrategy,  v48,  (uint64_t)"9/\a");
  uint64_t v49 = OUTLINED_FUNCTION_16_37();
  static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)(v49, v50, v51);
  OUTLINED_FUNCTION_4_35();
  OUTLINED_FUNCTION_11_31();
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter(v52, v53, v54);
  OUTLINED_FUNCTION_1_30();
  uint64_t v55 = type metadata accessor for CustomIntentConfirmIntentFlowStrategy(0LL);
  OUTLINED_FUNCTION_51(v55);
  OUTLINED_FUNCTION_52_5();
  OUTLINED_FUNCTION_59_9();
  *(void *)&v104[0] = CustomIntentConfirmIntentFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:)( a1,  a2,  a5,  v104);
  uint64_t v57 = OUTLINED_FUNCTION_6_36( &lazy protocol witness table cache variable for type CustomIntentConfirmIntentFlowStrategy and conformance CustomIntentConfirmIntentFlowStrategy,  v56,  (uint64_t)"a\t\a");
  static RCHChildFlowFactoryHelper.makeConditionalConfirmIntentFlowProducer<A>(strategy:_:)( v104,  closure #1 in static RCHChildFlowProducersAsync.forCustomIntents(voiceCommandName:originDevice:runner:siriEnvironment:deviceState:),  0LL,  v55,  v57);
  OUTLINED_FUNCTION_4_35();
  OUTLINED_FUNCTION_11_31();
  RCHChildFlowProducersAsync.confirmIntentFlowProducer.setter(v58, v59, v60);
  OUTLINED_FUNCTION_1_30();
  uint64_t v61 = type metadata accessor for CustomIntentHandleIntentFlowStrategy();
  OUTLINED_FUNCTION_19(v61, 64LL);
  OUTLINED_FUNCTION_52_5();
  OUTLINED_FUNCTION_59_9();
  *(void *)&v104[0] = CustomIntentHandleIntentFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:)( a1,  a2,  a5,  v104);
  OUTLINED_FUNCTION_6_36( &lazy protocol witness table cache variable for type CustomIntentHandleIntentFlowStrategy and conformance CustomIntentHandleIntentFlowStrategy,  v62,  (uint64_t)")<\a");
  uint64_t v63 = OUTLINED_FUNCTION_16_37();
  static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)(v63, v64, v65);
  OUTLINED_FUNCTION_4_35();
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter( v61,  type metadata accessor for CustomIntentHandleIntentFlowStrategy,  v31);
  uint64_t v66 = v94[3];
  __swift_project_boxed_opaque_existential_1(v94, v66);
  if ((dispatch thunk of DeviceState.isHomePod.getter(v66) & 1) != 0)
  {
    outlined init with copy of DeviceState(a4, (uint64_t)v104);
    outlined init with copy of DeviceState((uint64_t)v94, (uint64_t)v102);
    uint64_t v67 = type metadata accessor for CustomIntentContinueInAppWithDialogStrategy();
    OUTLINED_FUNCTION_19(v67, 104LL);
    *(void *)&v104[0] = CustomIntentContinueInAppWithDialogStrategy.init(runner:deviceState:)(v104, v102);
    OUTLINED_FUNCTION_6_36( &lazy protocol witness table cache variable for type CustomIntentContinueInAppWithDialogStrategy and conformance CustomIntentContinueInAppWithDialogStrategy,  v68,  (uint64_t)&protocol conformance descriptor for CustomIntentContinueInAppWithDialogStrategy);
    uint64_t v69 = OUTLINED_FUNCTION_16_37();
    uint64_t v72 = static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithHandoffToCompanionProducer<A>(strategy:)( v69,  v70,  v71);
  }

  else
  {
    outlined init with copy of DeviceState((uint64_t)v94, (uint64_t)v104);
    uint64_t v73 = type metadata accessor for ContinueInAppCATWrapperSimple(0LL);
    memset(v102, 0, sizeof(v102));
    uint64_t v103 = 0LL;
    uint64_t v74 = OUTLINED_FUNCTION_51(v73);
    outlined init with copy of DeviceState?((uint64_t)v102, (uint64_t)v101);
    swift_bridgeObjectRetain(a2);
    OUTLINED_FUNCTION_59_9();
    SiriKitFlowCATWrapperSimple.init(deviceState:)();
    uint64_t v76 = v75;
    outlined destroy of DeviceState?((uint64_t)v102);
    OUTLINED_FUNCTION_51(v97);
    OUTLINED_FUNCTION_57();
    OUTLINED_FUNCTION_10_30();
    uint64_t v77 = type metadata accessor for CustomIntentContinueInAppFlowStrategy();
    uint64_t v78 = OUTLINED_FUNCTION_19(v77, 64LL);
    specialized CustomIntentContinueInAppFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:continueInAppCATWrapperSimple:responseFactory:)( a1,  a2,  a5,  v104,  v76,  v74,  v78);
    *(void *)&v104[0] = v79;
    lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels( &lazy protocol witness table cache variable for type CustomIntentContinueInAppFlowStrategy and conformance CustomIntentContinueInAppFlowStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for CustomIntentContinueInAppFlowStrategy,  (uint64_t)&protocol conformance descriptor for CustomIntentContinueInAppFlowStrategy);
    uint64_t v80 = OUTLINED_FUNCTION_24_25();
    uint64_t v72 = static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithAutomaticPunchOutProducer<A>(strategy:)( v80,  v77,  v81);
  }

  swift_release();
  uint64_t v82 = OUTLINED_FUNCTION_20_30();
  RCHChildFlowProducersAsync.continueInAppFlowProducer.setter(v82, v83, v84);
  OUTLINED_FUNCTION_1_30();
  swift_allocObject(v97, *(unsigned int *)(v97 + 48), *(unsigned __int16 *)(v97 + 52));
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_12_27();
  uint64_t v85 = type metadata accessor for CustomIntentTCCFlowStrategy();
  int v86 = (void *)OUTLINED_FUNCTION_19(v85, 136LL);
  v86[10] = &type metadata for EnableTCCLabelsProvider;
  v86[11] = &protocol witness table for EnableTCCLabelsProvider;
  v86[15] = v97;
  v86[16] = &protocol witness table for ResponseFactory;
  v86[12] = v72;
  outlined init with take of AceServiceInvokerAsync(v104, (uint64_t)(v86 + 2));
  *(void *)&v104[0] = v86;
  uint64_t v88 = OUTLINED_FUNCTION_6_36( &lazy protocol witness table cache variable for type CustomIntentTCCFlowStrategy and conformance CustomIntentTCCFlowStrategy,  v87,  (uint64_t)&protocol conformance descriptor for CustomIntentTCCFlowStrategy);
  static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)(v104, v85, v96, v88);
  swift_release();
  uint64_t v89 = OUTLINED_FUNCTION_20_30();
  RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter(v89, v90, v91);
  return swift_release();
}

id closure #1 in static RCHChildFlowProducersAsync.forCustomIntents(voiceCommandName:originDevice:runner:siriEnvironment:deviceState:)( uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INIntent, INIntentResponse>);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_46_11();
  uint64_t v6 = (void *)IntentResolutionRecord.intent.getter(v5);
  char v7 = INIntent.showsWhenRun.getter();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, a1, v3);
  if ((v7 & 1) != 0)
  {
    uint64_t v8 = (void *)IntentResolutionRecord.intent.getter(v3);
    id v9 = [v8 _isUserConfirmationRequired];
  }

  else
  {
    id v9 = 0LL;
  }

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  return v9;
}

void specialized CustomIntentNeedsDisambiguationFlowStrategy.init(voiceCommandName:deviceState:modeInfoProvider:siriEnvironment:runCustomIntentCatWrapperSimple:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v16 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = type metadata accessor for ModeInfoProvider();
  uint64_t v30 = &protocol witness table for ModeInfoProvider;
  *(void *)&__int128 v28 = a4;
  *(void *)(a7 + 56) = 0LL;
  *(void *)(a7 + 64) = 0LL;
  *(void *)(a7 + 128) = a1;
  *(void *)(a7 + 136) = a2;
  outlined init with copy of DeviceState((uint64_t)a3, a7 + 16);
  outlined init with copy of DeviceState(a7 + 16, (uint64_t)v27);
  if (one-time initialization token for shared != -1) {
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  }
  uint64_t v17 = static WFDialogState.shared;
  uint64_t v18 = ObjC metadata update function for RunCustomIntentCATs();
  uint64_t v19 = swift_retain(v17);
  static CATOption.defaultMode.getter(v19);
  uint64_t v20 = OUTLINED_FUNCTION_97((uint64_t)v16);
  ObjC metadata update function for RunVoiceCommandCATs();
  OUTLINED_FUNCTION_29_2();
  uint64_t v21 = OUTLINED_FUNCTION_97((uint64_t)v16);
  type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  OUTLINED_FUNCTION_29_2();
  OUTLINED_FUNCTION_96((uint64_t)v16);
  OUTLINED_FUNCTION_10_30();
  uint64_t v22 = type metadata accessor for AppNameResolver();
  uint64_t v23 = OUTLINED_FUNCTION_19(v22, 16LL);
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  uint64_t v24 = type metadata accessor for CustomIntentsDialogTemplating();
  uint64_t v25 = OUTLINED_FUNCTION_19(v24, 152LL);
  specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)( v27,  v17,  0LL,  1,  v20,  a6,  v21,  v18,  v23,  v25);
  *(void *)(a7 + 80) = v26;
  outlined init with take of AceServiceInvokerAsync(&v28, a7 + 88);
  *(void *)(a7 + 144) = a5;
  *(_BYTE *)(a7 + 72) = 1;
  OUTLINED_FUNCTION_24_0();
}

uint64_t specialized CustomIntentNeedsConfirmationFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:responseFactory:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16 = (uint64_t *)(a10
                  + OBJC_IVAR____TtC18SiriLinkFlowPlugin41CustomIntentNeedsConfirmationFlowStrategy_voiceCommandName);
  *uint64_t v16 = a1;
  v16[1] = a2;
  outlined init with copy of DeviceState( (uint64_t)a4,  a10 + OBJC_IVAR____TtC18SiriLinkFlowPlugin41CustomIntentNeedsConfirmationFlowStrategy_deviceState);
  uint64_t v17 = a10 + OBJC_IVAR____TtC18SiriLinkFlowPlugin41CustomIntentNeedsConfirmationFlowStrategy_confirmationState;
  uint64_t v18 = enum case for SiriKitConfirmationState.unset(_:);
  uint64_t v19 = type metadata accessor for SiriKitConfirmationState(0LL);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104LL))(v17, v18, v19);
  OUTLINED_FUNCTION_23_27(v20, (uint64_t)v33);
  uint64_t v21 = type metadata accessor for ContinueInAppCATWrapperSimple(0LL);
  memset(v31, 0, sizeof(v31));
  uint64_t v32 = 0LL;
  OUTLINED_FUNCTION_51(v21);
  outlined init with copy of DeviceState?((uint64_t)v31, (uint64_t)v30);
  swift_bridgeObjectRetain(a2);
  SiriKitFlowCATWrapperSimple.init(deviceState:)();
  uint64_t v23 = v22;
  outlined destroy of DeviceState?((uint64_t)v31);
  uint64_t v24 = type metadata accessor for CustomIntentNeedsConfirmIntentResponseGenerator();
  uint64_t v25 = (void *)OUTLINED_FUNCTION_19(v24, 144LL);
  outlined init with copy of DeviceState((uint64_t)v33, (uint64_t)v31);
  uint64_t v26 = specialized CustomIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)( a1,  a2,  a3,  v31,  a5,  a6,  a7,  a8,  v23,  a9,  v25);
  __swift_destroy_boxed_opaque_existential_1Tm(v33);
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  *(void *)(a10 + OBJC_IVAR____TtC18SiriLinkFlowPlugin41CustomIntentNeedsConfirmationFlowStrategy_responseGenerator) = v26;
  return a10;
}

void specialized CustomIntentContinueInAppFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:continueInAppCATWrapperSimple:responseFactory:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  OUTLINED_FUNCTION_63();
  OUTLINED_FUNCTION_15();
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = OUTLINED_FUNCTION_23_27(v14, a7 + 16);
  OUTLINED_FUNCTION_23_27(v17, (uint64_t)v27);
  ObjC metadata update function for RunCustomIntentCATs();
  OUTLINED_FUNCTION_6_24();
  uint64_t v18 = OUTLINED_FUNCTION_97((uint64_t)v16);
  type metadata accessor for RunCustomIntentCATsSimple(0LL);
  OUTLINED_FUNCTION_6_24();
  uint64_t v19 = OUTLINED_FUNCTION_96((uint64_t)v16);
  ObjC metadata update function for RunVoiceCommandCATs();
  OUTLINED_FUNCTION_6_24();
  uint64_t v20 = OUTLINED_FUNCTION_97((uint64_t)v16);
  type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  OUTLINED_FUNCTION_6_24();
  OUTLINED_FUNCTION_96((uint64_t)v16);
  OUTLINED_FUNCTION_10_30();
  uint64_t v21 = type metadata accessor for CustomIntentContinueInAppResponseGenerator();
  uint64_t v22 = (void *)OUTLINED_FUNCTION_19(v21, 144LL);
  outlined init with copy of DeviceState((uint64_t)v27, (uint64_t)v26);
  uint64_t v23 = specialized CustomIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)( a1,  a2,  a3,  v26,  v18,  v19,  v20,  v7,  v24,  v25,  v22);
  __swift_destroy_boxed_opaque_existential_1Tm(v27);
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  *(void *)(a7 + 56) = v23;
  OUTLINED_FUNCTION_24_0();
}

uint64_t OUTLINED_FUNCTION_1_30()
{
  return outlined init with copy of DeviceState(v0, v1 - 128);
}

uint64_t OUTLINED_FUNCTION_4_35()
{
  return swift_release(v0);
}

uint64_t OUTLINED_FUNCTION_5_36()
{
  return static CATOption.defaultMode.getter();
}

uint64_t OUTLINED_FUNCTION_6_36(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  return lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_10_30()
{
  return 0LL;
}

  ;
}

uint64_t OUTLINED_FUNCTION_13_27()
{
  return CATWrapper.__allocating_init(options:globals:)(v0, 0LL);
}

uint64_t OUTLINED_FUNCTION_16_37()
{
  return v0 - 128;
}

uint64_t OUTLINED_FUNCTION_20_30()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_23_27(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of DeviceState(v2, a2);
}

uint64_t OUTLINED_FUNCTION_24_25()
{
  return v0 - 128;
}

id UsoEntity_common_MeasurementUnit.unitType.getter()
{
  uint64_t v1 = type metadata accessor for UsoIdentifier(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v91 = (uint64_t)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v84 - v6;
  __chkstk_darwin(v5);
  id v9 = (char *)&v84 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MeasurementUnit.DefinedValues?);
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_35();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = type metadata accessor for UsoEntity_common_MeasurementUnit.DefinedValues(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_35();
  uint64_t v18 = v17 - v16;
  dispatch thunk of UsoEntity_common_MeasurementUnit.definedValue.getter();
  if (__swift_getEnumTagSinglePayload(v13, 1LL, v14) != 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v18, v13, v14);
    if (one-time initialization token for voiceCommands != -1) {
LABEL_60:
    }
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    uint64_t v29 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.voiceCommands);
    uint64_t v30 = (void *)OUTLINED_FUNCTION_9_5();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_40(v31))
    {
      uint64_t v32 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      *uint64_t v32 = 0;
      OUTLINED_FUNCTION_27(&dword_0, v33, v34, "Using definedValue to create measurement unit");
      OUTLINED_FUNCTION_1_0((uint64_t)v32);
    }

    id v35 = UsoEntity_common_MeasurementUnit.DefinedValues.unitType.getter();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v14);
    return v35;
  }

  outlined destroy of UsoEntity_common_MeasurementUnit.DefinedValues?(v13);
  uint64_t v19 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)(1701667182LL, 0xE400000000000000LL);
  if (!v19)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v36 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.voiceCommands);
    uint64_t v37 = (void *)OUTLINED_FUNCTION_9_5();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_40(v38))
    {
      uint64_t v39 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      *uint64_t v39 = 0;
      OUTLINED_FUNCTION_27(&dword_0, v40, v41, "No uso identifiers for measurement");
      OUTLINED_FUNCTION_1_0((uint64_t)v39);
    }

    return 0LL;
  }

  uint64_t v87 = v7;
  uint64_t v88 = v0;
  uint64_t v90 = v19;
  uint64_t v15 = *(void *)(v19 + 16);
  if (!v15) {
    goto LABEL_25;
  }
  unint64_t v20 = 0LL;
  unint64_t v21 = (*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v22 = v90 + v21;
  uint64_t v14 = *(void *)(v2 + 72);
  uint64_t v23 = *(void *)(v2 + 16);
  unint64_t v92 = (unint64_t)"voiceCommandScalar";
  uint64_t v93 = v23;
  unint64_t v89 = 0x8000000000194D20LL;
  unint64_t v85 = v21;
  unint64_t v86 = v90 + v21;
  while (1)
  {
    uint64_t v24 = OUTLINED_FUNCTION_2_30((uint64_t)v9, v22);
    UsoIdentifier.namespace.getter(v24);
    if (!v25)
    {
      (*(void (**)(char *, uint64_t))(v2 + 8))(v9, v1);
      goto LABEL_12;
    }

    OUTLINED_FUNCTION_13_28();
    if (v27)
    {
    }

    char v28 = OUTLINED_FUNCTION_3_40(v26);
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_4_36((uint64_t)v9);
    if ((v28 & 1) != 0) {
      goto LABEL_24;
    }
LABEL_12:
    ++v20;
    v22 += v14;
    if (v15 == v20) {
      goto LABEL_25;
    }
  }

  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_4_36((uint64_t)v9);
LABEL_24:
  if (v15 == v20) {
    goto LABEL_25;
  }
  unint64_t v89 = v90 + v85;
  unint64_t v58 = v92 | 0x8000000000000000LL;
  while (2)
  {
    if ((v20 & 0x8000000000000000LL) != 0)
    {
      __break(1u);
      goto LABEL_62;
    }

    uint64_t v59 = v90;
    if (v20 >= *(void *)(v90 + 16))
    {
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }

    uint64_t v18 = (uint64_t)v87;
    uint64_t v60 = v86 + v20 * v14;
    OUTLINED_FUNCTION_2_30((uint64_t)v87, v60);
    uint64_t v61 = swift_bridgeObjectRetain(v59);
    v62._countAndFlagsBits = UsoIdentifier.value.getter(v61);
    int value = VoiceCommandsNLIntent.VoiceCommandUnit.init(rawValue:)(v62).value;
    OUTLINED_FUNCTION_1_31();
    swift_bridgeObjectRelease(v59);
    if (value != 88)
    {
      if (v20 == v15) {
        break;
      }
      uint64_t v69 = v90;
      if (v20 < *(void *)(v90 + 16))
      {
        uint64_t v70 = (uint64_t)v87;
        uint64_t v71 = OUTLINED_FUNCTION_2_30((uint64_t)v87, v60);
        v72._countAndFlagsBits = UsoIdentifier.value.getter(v71);
        LOBYTE(v58) = VoiceCommandsNLIntent.VoiceCommandUnit.init(rawValue:)(v72);
        id result = (id)OUTLINED_FUNCTION_4_36(v70);
        if (v58 == 88)
        {
          __break(1u);
          return result;
        }

        swift_bridgeObjectRelease(v69);
        if (one-time initialization token for voiceCommands == -1)
        {
LABEL_56:
          uint64_t v73 = OUTLINED_FUNCTION_48();
          __swift_project_value_buffer(v73, (uint64_t)static Logger.voiceCommands);
          uint64_t v74 = (os_log_s *)OUTLINED_FUNCTION_9_5();
          os_log_type_t v75 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v74, v75))
          {
            uint64_t v76 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
            uint64_t v77 = OUTLINED_FUNCTION_38(32LL);
            uint64_t v94 = v77;
            *(_DWORD *)uint64_t v76 = 136315138;
            uint64_t v78 = VoiceCommandsNLIntent.VoiceCommandUnit.rawValue.getter(v58);
            unint64_t v80 = v79;
            uint64_t v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, &v94);
            uint64_t v82 = OUTLINED_FUNCTION_64_4(v81);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v82, v83, v76 + 4);
            swift_bridgeObjectRelease(v80);
            _os_log_impl(&dword_0, v74, v75, "Using uso identifier to create measurement unit: %s", v76, 0xCu);
            swift_arrayDestroy(v77, 1LL, (char *)&type metadata for Any + 8);
            OUTLINED_FUNCTION_1_0(v77);
            OUTLINED_FUNCTION_1_0((uint64_t)v76);
          }

          return VoiceCommandsNLIntent.VoiceCommandUnit.unitType.getter(v58);
        }

LABEL_65:
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
        goto LABEL_56;
      }

LABEL_64:
      __break(1u);
      goto LABEL_65;
    }

    if (v20 == v15)
    {
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }

    if (++v20 == v15) {
      break;
    }
    uint64_t v64 = v89 + v14 * v20;
    while (2)
    {
      if (v20 >= *(void *)(v90 + 16))
      {
        __break(1u);
        goto LABEL_60;
      }

      uint64_t v18 = v91;
      uint64_t v65 = OUTLINED_FUNCTION_2_30(v91, v64);
      UsoIdentifier.namespace.getter(v65);
      if (!v66)
      {
        OUTLINED_FUNCTION_1_31();
LABEL_47:
        ++v20;
        v64 += v14;
        if (v15 == v20) {
          goto LABEL_25;
        }
        continue;
      }

      break;
    }

    OUTLINED_FUNCTION_13_28();
    if (!v27 || v18 != v58)
    {
      char v68 = OUTLINED_FUNCTION_3_40(v67);
      OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_1_31();
      if ((v68 & 1) != 0) {
        goto LABEL_50;
      }
      goto LABEL_47;
    }

    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_1_31();
LABEL_50:
    if (v15 != v20) {
      continue;
    }
    break;
  }

uint64_t outlined destroy of UsoEntity_common_MeasurementUnit.DefinedValues?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MeasurementUnit.DefinedValues?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

id UsoEntity_common_MeasurementUnit.DefinedValues.unitType.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UsoEntity_common_MeasurementUnit.DefinedValues(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_35();
  uint64_t v6 = v5 - v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v5 - v4, v1, v2);
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v6, v2);
  if (v7 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_MegaHertz(_:))
  {
    id v8 = [(id)objc_opt_self(NSUnitFrequency) megahertz];
    return v8;
  }

  if (v7 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Gram(_:))
  {
    id v8 = [(id)objc_opt_self(NSUnitMass) grams];
    return v8;
  }

  if (v7 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Kilometer(_:))
  {
    id v8 = [(id)objc_opt_self(NSUnitLength) kilometers];
    return v8;
  }

  if (v7 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Inch(_:))
  {
    id v8 = [(id)objc_opt_self(NSUnitLength) inches];
    return v8;
  }

  if (v7 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Centimeter(_:))
  {
    id v8 = [(id)objc_opt_self(NSUnitLength) centimeters];
    return v8;
  }

  if (v7 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Mile(_:))
  {
    id v8 = [(id)objc_opt_self(NSUnitLength) miles];
    return v8;
  }

  if (v7 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Microgram(_:))
  {
    id v8 = [(id)objc_opt_self(NSUnitMass) micrograms];
    return v8;
  }

  if (v7 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Calorie(_:))
  {
    id v8 = [(id)objc_opt_self(NSUnitEnergy) calories];
    return v8;
  }

  if (v7 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Pound(_:))
  {
    id v8 = [(id)objc_opt_self(NSUnitMass) poundsMass];
    return v8;
  }

  if (v7 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_MeterPerSecond(_:))
  {
    id v8 = [(id)objc_opt_self(NSUnitSpeed) metersPerSecond];
    return v8;
  }

  if (v7 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Meter(_:))
  {
    id v8 = [(id)objc_opt_self(NSUnitLength) meters];
    return v8;
  }

  if (v7 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_KiloHertz(_:))
  {
    id v8 = [(id)objc_opt_self(NSUnitFrequency) kilohertz];
    return v8;
  }

  if (v7 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_MilePerHour(_:))
  {
    id v8 = [(id)objc_opt_self(NSUnitSpeed) milesPerHour];
    return v8;
  }

  if (v7 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Yard(_:))
  {
    id v8 = [(id)objc_opt_self(NSUnitLength) yards];
    return v8;
  }

  if (v7 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Kilocalorie(_:))
  {
    id v8 = [(id)objc_opt_self(NSUnitEnergy) kilocalories];
    return v8;
  }

  if (v7 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_KilometerPerHour(_:))
  {
    id v8 = [(id)objc_opt_self(NSUnitSpeed) kilometersPerHour];
    return v8;
  }

  if (v7 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Milligram(_:))
  {
    id v8 = [(id)objc_opt_self(NSUnitMass) milligrams];
    return v8;
  }

  if (v7 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Milliliter(_:))
  {
    id v8 = [(id)objc_opt_self(NSUnitVolume) milliliters];
    return v8;
  }

  if (v7 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Stone(_:))
  {
    id v8 = [(id)objc_opt_self(NSUnitMass) stones];
    return v8;
  }

  if (v7 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Liter(_:))
  {
    id v8 = [(id)objc_opt_self(NSUnitVolume) liters];
    return v8;
  }

  if (v7 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Kilogram(_:))
  {
    id v8 = [(id)objc_opt_self(NSUnitMass) kilograms];
    return v8;
  }

  if (v7 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Foot(_:))
  {
    id v8 = [(id)objc_opt_self(NSUnitLength) feet];
    return v8;
  }

  if (v7 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Kilojoule(_:))
  {
    id v8 = [(id)objc_opt_self(NSUnitEnergy) kilojoules];
    return v8;
  }

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_1_31()
{
  return v1(v2, v0);
}

uint64_t OUTLINED_FUNCTION_2_30(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 104))(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_3_40(uint64_t a1)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)( a1,  v1,  0xD000000000000010LL,  *(void *)(v2 - 112) | 0x8000000000000000LL,  0LL);
}

uint64_t OUTLINED_FUNCTION_4_36(uint64_t a1)
{
  return v2(a1, v1);
}

  ;
}

uint64_t WorkflowNLContextProvider.makeContextForShowAlert()()
{
  return (*(uint64_t (**)(void, void, void, void, void *, void *))(*(void *)v0 + 80LL))( 0LL,  0LL,  0LL,  0LL,  &_swiftEmptyArrayStorage,  &_swiftEmptyArrayStorage);
}

void WorkflowNLContextProvider.makeContextForConfirmInteraction(intent:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SemanticValue?);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = type metadata accessor for DisplayHint(0LL);
  uint64_t v7 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  OUTLINED_FUNCTION_18_11();
  uint64_t v8 = type metadata accessor for SemanticValue(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v25 - v13;
  (*(void (**)(void, void, void, void, void *, void *))(*(void *)v1 + 80LL))( 0LL,  0LL,  0LL,  0LL,  _swiftEmptyArrayStorage,  _swiftEmptyArrayStorage);
  uint64_t v15 = WorkflowNLContextProvider.getNLInput(intentCategory:)((uint64_t)[a1 _intentCategory], 0);
  NLContextUpdate.nlInput.setter(v15, v16);
  Swift::String v17 = INIntent.verb()();
  unint64_t v18 = ((unint64_t)v17._object >> 56) & 0xF;
  if (v18)
  {
    SemanticValue.init(string:label:)(v17._countAndFlagsBits, v17._object, 0xD000000000000018LL, 0x8000000000194CA0LL);
    __swift_storeEnumTagSinglePayload((uint64_t)v6, 1LL, 1LL, v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    DisplayHint.init(idValue:displayValue:)(v6, v12);
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DisplayHint>);
    uint64_t v20 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v21 = (v20 + 32) & ~v20;
    uint64_t v22 = swift_allocObject(v19, v21 + *(void *)(v7 + 72), v20 | 7);
    *(_OWORD *)(v22 + 16) = xmmword_17E650;
    uint64_t v23 = v22 + v21;
    uint64_t v24 = v26;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v23, v2, v26);
    NLContextUpdate.displayHints.setter(v22);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v24);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    OUTLINED_FUNCTION_24_0();
  }

  else
  {
    swift_bridgeObjectRelease();
  }

void WorkflowNLContextProvider.makeContextForInputText(request:)(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for NLContextUpdate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v22 - v11;
  id v13 = [a1 textFieldConfiguration];
  id v14 = [v13 keyboardType];

  if (v14)
  {
    SiriLinkFlowPlugin::WFInputTextTypes v15 = WFTextFieldKeyboardType.toInputType()();

    NLContextUpdate.init()(v16);
    if (v15 - 1 >= 2)
    {
      type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand(0LL);
      if (v15)
      {
        static UsoTaskBuilder_execute_common_VoiceCommand.urlTaskBuilder(value:)();
        uint64_t v17 = v20;
        unint64_t v18 = &outlined read-only object #1 of WorkflowNLContextProvider.makeContextForInputText(request:);
      }

      else
      {
        OUTLINED_FUNCTION_3_41();
        uint64_t v17 = v19;
        unint64_t v18 = &outlined read-only object #2 of WorkflowNLContextProvider.makeContextForInputText(request:);
      }
    }

    else
    {
      OUTLINED_FUNCTION_0_5();
      uint64_t v17 = static UsoTaskBuilder_execute_common_VoiceCommand.numberTaskBuilder()();
      unint64_t v18 = &outlined read-only object #0 of WorkflowNLContextProvider.makeContextForInputText(request:);
    }

    (*(void (**)(uint64_t))(*(void *)v3 + 128LL))(v17);
    swift_release();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v21(v12, v10, v6);
    NLContextUpdate.dictationPromptTargetNodes.setter(v18);
    OUTLINED_FUNCTION_0_38((uint64_t)"com.apple.siri.nl.VoiceCommands");
    v21(a2, v12, v6);
  }

  else
  {
    OUTLINED_FUNCTION_0_5();
    OUTLINED_FUNCTION_3_41();
    (*(void (**)(void))(*(void *)v3 + 128LL))();
    swift_release();
    NLContextUpdate.dictationPromptTargetNodes.setter(&outlined read-only object #3 of WorkflowNLContextProvider.makeContextForInputText(request:));
    OUTLINED_FUNCTION_0_38((uint64_t)"com.apple.siri.nl.VoiceCommands");
  }

  OUTLINED_FUNCTION_24_0();
}

uint64_t WorkflowNLContextProvider.makeContextForInputDate()()
{
  return OUTLINED_FUNCTION_0_38((uint64_t)"com.apple.siri.nl.VoiceCommands");
}

void WorkflowNLContextProvider.makeContextForChooseFromList(items:)(uint64_t a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v1 + 96LL))();
  swift_bridgeObjectRelease();
  NLContextUpdate.displayHints.setter(v3);
  OUTLINED_FUNCTION_38_0();
}

uint64_t WorkflowNLContextProvider.makeContextForShortcutName()()
{
  return NLContextUpdate.dictationPromptTargetNodes.setter(&outlined read-only object #0 of WorkflowNLContextProvider.makeContextForShortcutName());
}

void WorkflowNLContextProvider.makeContextForPrompt()()
{
  uint64_t v1 = type metadata accessor for Siri_Nlu_External_SystemPrompted(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_18_11();
  NLContextUpdate.init()(v6);
  NLContextUpdate.dictationPromptTargetDomain.setter(0xD00000000000001FLL, 0x80000000001935E0LL);
  NLContextUpdate.weightedPromptStrict.setter(1LL);
  uint64_t v7 = NLContextUpdate.currentDomainName.setter(0x6D6F436563696F76LL, 0xED000073646E616DLL);
  uint64_t v8 = Siri_Nlu_External_SystemDialogAct.init()(v7);
  Siri_Nlu_External_SystemPrompted.init()(v8);
  Siri_Nlu_External_SystemDialogAct.prompted.setter(v3);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  uint64_t v10 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = (v10 + 32) & ~v10;
  uint64_t v12 = swift_allocObject(v9, v11 + *(void *)(v5 + 72), v10 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_17E650;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v12 + v11, v0, v4);
  NLContextUpdate.nluSystemDialogActs.setter(v12);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0, v4);
  OUTLINED_FUNCTION_38_0();
}

uint64_t WorkflowNLContextProvider.getNLInput(intentCategory:)(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    return 0LL;
  }
  Swift::String v2 = INIntentCategory.asINPBString()();
  uint64_t v3 = type metadata accessor for MachineUtteranceBuilder(0LL);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  MachineUtteranceBuilder.init()();
  dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)( 0xD000000000000014LL,  0x8000000000194C80LL,  v2._countAndFlagsBits,  v2._object);
  swift_release();
  swift_bridgeObjectRelease();
  dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)( 0x746163696C707061LL,  0xED000064496E6F69LL,  0xD00000000000001CLL,  0x8000000000194270LL);
  uint64_t v4 = swift_release();
  uint64_t v5 = dispatch thunk of MachineUtteranceBuilder.build()(v4);
  swift_release();
  return v5;
}

uint64_t type metadata accessor for WorkflowNLContextProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin25WorkflowNLContextProvider);
}

uint64_t OUTLINED_FUNCTION_0_38@<X0>(uint64_t a1@<X8>)
{
  return NLContextUpdate.dictationPromptTargetDomain.setter(0xD00000000000001FLL, (a1 - 32) | 0x8000000000000000LL);
}

void OUTLINED_FUNCTION_3_41()
{
}

SiriLinkFlowPlugin::AutoShortcutCATs::Properties_optional __swiftcall AutoShortcutCATs.Properties.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of AutoShortcutCATs.Properties.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xC) {
    return (SiriLinkFlowPlugin::AutoShortcutCATs::Properties_optional)12;
  }
  else {
    return (SiriLinkFlowPlugin::AutoShortcutCATs::Properties_optional)v3;
  }
}

uint64_t AutoShortcutCATs.Properties.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_FB4AC
                                                                     + 4 * asc_1884D0[a1]))( 0xD000000000000018LL,  0x8000000000190FD0LL);
}

uint64_t sub_FB4AC()
{
  return v0 - 5;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutCATs.Properties( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance AutoShortcutCATs.Properties()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AutoShortcutCATs.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AutoShortcutCATs.Properties( uint64_t a1)
{
}

SiriLinkFlowPlugin::AutoShortcutCATs::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATs.Properties@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::AutoShortcutCATs::Properties_optional *a2@<X8>)
{
  result.int value = AutoShortcutCATs.Properties.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AutoShortcutCATs.Properties@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = AutoShortcutCATs.Properties.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t AutoShortcutCATs.appDisabled(device:appName:wasAlreadyEnabled:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v5 + 80) = a4;
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = v4;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v5 + 48) = OUTLINED_FUNCTION_10_8(v6);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutCATs.appDisabled(device:appName:wasAlreadyEnabled:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  unint64_t v3 = (__n128 *)OUTLINED_FUNCTION_19(v2, 176LL);
  *(void *)(v0 + 56) = v3;
  uint64_t v4 = OUTLINED_FUNCTION_4_3(v3, (__n128)xmmword_17FDF0);
  if (v1)
  {
    uint64_t v4 = type metadata accessor for SirikitDeviceState(v4);
  }

  else
  {
    v3[3].n128_u64[1] = 0LL;
    v3[4].n128_u64[0] = 0LL;
  }

  OUTLINED_FUNCTION_14_34(v4);
  OUTLINED_FUNCTION_12_4(v6, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_7_5(v7);
  if (v8)
  {
    uint64_t v9 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v9, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v10);
    OUTLINED_FUNCTION_12_8();
  }

  unsigned __int8 v11 = *(_BYTE *)(v0 + 80);
  v3[8].n128_u64[0] = 0xD000000000000011LL;
  v3[8].n128_u64[1] = 0x8000000000195F60LL;
  v3[10].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v3[9].n128_u8[0] = v11;
  uint64_t v12 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  *(void *)(v0 + 64) = v12;
  *uint64_t v12 = v0;
  v12[1] = AutoShortcutCATs.appDisabled(device:appName:wasAlreadyEnabled:);
  OUTLINED_FUNCTION_26_19();
  return OUTLINED_FUNCTION_5_23(v13, v14, v15, v16, v17);
}

{
  uint64_t v0;
  uint64_t (*v2)(void);
  OUTLINED_FUNCTION_6_9();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_0_0();
  }

  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_40_0();
    uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_3_4(v2);
  }

uint64_t AutoShortcutCATs.appEnabled(device:appName:wasAlreadyEnabled:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v5 + 80) = a4;
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = v4;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v5 + 48) = OUTLINED_FUNCTION_10_8(v6);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutCATs.appEnabled(device:appName:wasAlreadyEnabled:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  unint64_t v3 = (__n128 *)OUTLINED_FUNCTION_19(v2, 176LL);
  *(void *)(v0 + 56) = v3;
  uint64_t v4 = OUTLINED_FUNCTION_4_3(v3, (__n128)xmmword_17FDF0);
  if (v1)
  {
    uint64_t v4 = type metadata accessor for SirikitDeviceState(v4);
  }

  else
  {
    v3[3].n128_u64[1] = 0LL;
    v3[4].n128_u64[0] = 0LL;
  }

  OUTLINED_FUNCTION_14_34(v4);
  OUTLINED_FUNCTION_12_4(v6, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_7_5(v7);
  if (v8)
  {
    uint64_t v9 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v9, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v10);
    OUTLINED_FUNCTION_12_8();
  }

  unsigned __int8 v11 = *(_BYTE *)(v0 + 80);
  v3[8].n128_u64[0] = 0xD000000000000011LL;
  v3[8].n128_u64[1] = 0x8000000000195F60LL;
  v3[10].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v3[9].n128_u8[0] = v11;
  uint64_t v12 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  *(void *)(v0 + 64) = v12;
  *uint64_t v12 = v0;
  v12[1] = AutoShortcutCATs.appEnabled(device:appName:wasAlreadyEnabled:);
  OUTLINED_FUNCTION_26_19();
  return OUTLINED_FUNCTION_5_23(v13, v14, v15, v16, v17);
}

{
  uint64_t v0;
  uint64_t (*v2)(void);
  OUTLINED_FUNCTION_6_9();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_0_0();
  }

  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_40_0();
    uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_3_4(v2);
  }

uint64_t AutoShortcutCATs.confirmChangeEnablement(appName:isEnabling:)(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 72) = a3;
  *(void *)(v4 + 16) = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 40) = OUTLINED_FUNCTION_10_8(v5);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutCATs.confirmChangeEnablement(appName:isEnabling:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_19(v2, 128LL);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_44_14(v3);
  OUTLINED_FUNCTION_16_29(v4, (__n128)xmmword_17E660);
  OUTLINED_FUNCTION_12_4(v0, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_61_1();
  uint64_t v7 = OUTLINED_FUNCTION_66_2(v6);
  if (v8)
  {
    OUTLINED_FUNCTION_11_4(v7, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v9);
  }

  OUTLINED_FUNCTION_41_24();
  *(void *)(v1 + 80) = v10 & 0xFFFFFFFFFFFFLL | 0x696C000000000000LL;
  *(void *)(v1 + 88) = 0xEA0000000000676ELL;
  *(void *)(v1 + 120) = &type metadata for Bool;
  *(_BYTE *)(v1 + 96) = v11;
  uint64_t v12 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v13 = (void *)OUTLINED_FUNCTION_38_23(v12);
  OUTLINED_FUNCTION_48_6(v13);
  OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_22_22();
  return OUTLINED_FUNCTION_4_24(v14, v15, v16, v17, v18);
}

{
  uint64_t v0;
  uint64_t (*v2)(void);
  OUTLINED_FUNCTION_4_37();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_0_0();
  }

  else
  {
    OUTLINED_FUNCTION_36_22();
    OUTLINED_FUNCTION_40_0();
    uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_3_4(v2);
  }

uint64_t AutoShortcutCATs.confirmChangeEnablementDeclined(appName:isEnabled:)( uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 72) = a3;
  *(void *)(v4 + 16) = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 40) = OUTLINED_FUNCTION_10_8(v5);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutCATs.confirmChangeEnablementDeclined(appName:isEnabled:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_19(v2, 128LL);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_44_14(v3);
  OUTLINED_FUNCTION_16_29(v4, (__n128)xmmword_17E660);
  OUTLINED_FUNCTION_12_4(v0, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_61_1();
  uint64_t v7 = OUTLINED_FUNCTION_66_2(v6);
  if (v8)
  {
    OUTLINED_FUNCTION_11_4(v7, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v9);
  }

  OUTLINED_FUNCTION_41_24();
  *(void *)(v1 + 80) = v10 & 0xFFFFFFFFFFFFLL | 0x656C000000000000LL;
  *(void *)(v1 + 88) = 0xE900000000000064LL;
  *(void *)(v1 + 120) = &type metadata for Bool;
  *(_BYTE *)(v1 + 96) = v11;
  uint64_t v12 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v13 = (void *)OUTLINED_FUNCTION_38_23(v12);
  OUTLINED_FUNCTION_48_6(v13);
  OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_22_22();
  return OUTLINED_FUNCTION_4_24(v14, v15, v16, v17, v18);
}

{
  uint64_t v0;
  uint64_t (*v2)(void);
  OUTLINED_FUNCTION_4_37();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_0_0();
  }

  else
  {
    OUTLINED_FUNCTION_36_22();
    OUTLINED_FUNCTION_40_0();
    uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_3_4(v2);
  }

uint64_t AutoShortcutCATs.disableAndCancel()(uint64_t a1)
{
  uint64_t v3 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v4 = (void *)OUTLINED_FUNCTION_39_6(v3);
  *uint64_t v4 = v1;
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance CustomIntentContinueInAppFlowStrategy;
  OUTLINED_FUNCTION_43_21();
  return OUTLINED_FUNCTION_8_41(a1, 0xD00000000000001DLL, v5, (uint64_t)_swiftEmptyArrayStorage, v7);
}

uint64_t AutoShortcutCATs.enableAndCancel()()
{
  uint64_t v1 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v2 = (void *)OUTLINED_FUNCTION_39_6(v1);
  *uint64_t v2 = v0;
  v2[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance CustomIntentContinueInAppFlowStrategy;
  OUTLINED_FUNCTION_43_21();
  uint64_t v3 = OUTLINED_FUNCTION_34_24();
  return OUTLINED_FUNCTION_8_41(v3, v4, v5, v6, v7);
}

uint64_t AutoShortcutCATs.firstRun(app:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[5] = OUTLINED_FUNCTION_10_8(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutCATs.firstRun(app:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_19(v1, 80LL);
  uint64_t v3 = OUTLINED_FUNCTION_44_14(v2);
  *(_OWORD *)(v3 + 16) = xmmword_17E650;
  OUTLINED_FUNCTION_36_20(v3);
  OUTLINED_FUNCTION_12_4(v0, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  uint64_t v6 = OUTLINED_FUNCTION_66_2(v5);
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    char v8 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v8);
  }

  uint64_t v9 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v10 = (void *)OUTLINED_FUNCTION_38_23(v9);
  OUTLINED_FUNCTION_48_6(v10);
  OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_22_22();
  return OUTLINED_FUNCTION_4_24(v11, v12, v13, v14, v15);
}

uint64_t AutoShortcutCATs.firstRunHomePod(app:firstPhrase:secondPhrase:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  uint64_t v5[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v5[7] = OUTLINED_FUNCTION_11_0();
  v5[8] = OUTLINED_FUNCTION_11_0();
  v5[9] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutCATs.firstRunHomePod(app:firstPhrase:secondPhrase:)()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_19(v2, 176LL);
  v0[10] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_17FDF0;
  OUTLINED_FUNCTION_36_20(v3);
  OUTLINED_FUNCTION_12_4(v1, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  uint64_t v6 = OUTLINED_FUNCTION_38_6();
  if ((_DWORD)v6 == 1)
  {
    OUTLINED_FUNCTION_11_4(v6, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
  }

  else
  {
    *(void *)(v3 + 72) = v5;
    char v8 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v8);
  }

  uint64_t v9 = v0[4];
  *(void *)(v3 + 80) = 0x7268507473726966LL;
  *(void *)(v3 + 88) = 0xEB00000000657361LL;
  OUTLINED_FUNCTION_12_4(v9, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_38_6();
  if ((_DWORD)v10 == 1)
  {
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v3 + 96) = 0u;
    *(_OWORD *)(v3 + 112) = 0u;
  }

  else
  {
    *(void *)(v3 + 120) = v5;
    uint64_t v12 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v12);
  }

  uint64_t v13 = v0[5];
  strcpy((char *)(v3 + 128), "secondPhrase");
  *(_BYTE *)(v3 + 141) = 0;
  *(_WORD *)(v3 + 142) = -5120;
  OUTLINED_FUNCTION_12_4(v13, v11, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = OUTLINED_FUNCTION_38_6();
  if ((_DWORD)v14 == 1)
  {
    OUTLINED_FUNCTION_11_4(v14, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v3 + 144) = 0u;
    *(_OWORD *)(v3 + 160) = 0u;
  }

  else
  {
    *(void *)(v3 + 168) = v5;
    uint64_t v15 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v15);
  }

  uint64_t v16 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  v0[11] = v16;
  *uint64_t v16 = v0;
  v16[1] = AutoShortcutCATs.firstRunHomePod(app:firstPhrase:secondPhrase:);
  OUTLINED_FUNCTION_22_22();
  return OUTLINED_FUNCTION_4_24(v17, v18, v19, v20, v21);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);
  *(void *)(*(void *)v1 + 96LL) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return swift_task_switch(v2, v3, v4);
  }

  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_40_0();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_22_2(v6);
  }

{
  uint64_t v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_40_0();
  swift_task_dealloc();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_22_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AutoShortcutCATs.moreShortcuts(numberOfShortcuts:)(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 64) = a3;
  *(void *)(v4 + 16) = a1;
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v5, v6, v7);
}

uint64_t AutoShortcutCATs.moreShortcuts(numberOfShortcuts:)()
{
  char v1 = *(_BYTE *)(v0 + 64);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_19(v2, 80LL);
  uint64_t v4 = v3;
  *(void *)(v0 + 40) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_17E650;
  *(void *)(v3 + 32) = 0xD000000000000011LL;
  *(void *)(v3 + 40) = 0x8000000000195F80LL;
  if ((v1 & 1) != 0)
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
    *(void *)(v3 + 56) = 0LL;
    *(void *)(v3 + 64) = 0LL;
  }

  else
  {
    uint64_t v5 = *(void *)(v0 + 24);
    uint64_t v6 = &type metadata for Double;
  }

  *(void *)(v3 + 72) = v6;
  *(void *)(v3 + 48) = v5;
  uint64_t v7 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  *(void *)(v0 + 48) = v7;
  OUTLINED_FUNCTION_48_6(v7);
  OUTLINED_FUNCTION_35_8();
  return OUTLINED_FUNCTION_8_41(v8, v9, v10, v4, v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v2 = *v1;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_0_0();
  }

  else
  {
    swift_bridgeObjectRelease();
    return OUTLINED_FUNCTION_3_4(*(uint64_t (**)(void))(v2 + 8));
  }

uint64_t AutoShortcutCATs.openInShortcuts()()
{
  uint64_t v1 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v2 = (void *)OUTLINED_FUNCTION_39_6(v1);
  *uint64_t v2 = v0;
  v2[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance CustomIntentContinueInAppFlowStrategy;
  OUTLINED_FUNCTION_43_21();
  uint64_t v3 = OUTLINED_FUNCTION_34_24();
  return OUTLINED_FUNCTION_8_41(v3, v4, v5, v6, v7);
}

uint64_t AutoShortcutCATs.shortcutPhrases(phrase:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[5] = OUTLINED_FUNCTION_10_8(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutCATs.shortcutPhrases(phrase:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_19(v1, 80LL);
  uint64_t v3 = OUTLINED_FUNCTION_44_14(v2);
  *(_OWORD *)(v3 + 16) = xmmword_17E650;
  *(void *)(v3 + 32) = 0x657361726870LL;
  *(void *)(v3 + 40) = 0xE600000000000000LL;
  OUTLINED_FUNCTION_12_4(v0, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  uint64_t v6 = OUTLINED_FUNCTION_66_2(v5);
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v8 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v8);
  }

  uint64_t v9 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v10 = (void *)OUTLINED_FUNCTION_38_23(v9);
  OUTLINED_FUNCTION_48_6(v10);
  OUTLINED_FUNCTION_22_22();
  return OUTLINED_FUNCTION_4_24(v11, v12, v13, v14, v15);
}

uint64_t AutoShortcutCATs.userDenied()(uint64_t a1)
{
  uint64_t v3 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v4 = (void *)OUTLINED_FUNCTION_39_6(v3);
  *uint64_t v4 = v1;
  v4[1] = protocol witness for ScreentimeCheckFlowStrategyAsync.makeAppRestrictedByScreentimeResponse() in conformance WFScreentimeCheckFlowStrategy;
  OUTLINED_FUNCTION_43_21();
  return OUTLINED_FUNCTION_8_41(a1, 0xD000000000000017LL, v5, (uint64_t)_swiftEmptyArrayStorage, v7);
}

unint64_t lazy protocol witness table accessor for type AutoShortcutCATs.Properties and conformance AutoShortcutCATs.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATs.Properties and conformance AutoShortcutCATs.Properties;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATs.Properties and conformance AutoShortcutCATs.Properties)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutCATs.Properties,  &type metadata for AutoShortcutCATs.Properties);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATs.Properties and conformance AutoShortcutCATs.Properties);
  }

  return result;
}

uint64_t type metadata accessor for AutoShortcutCATs(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for AutoShortcutCATs;
  if (!type metadata singleton initialization cache for AutoShortcutCATs) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AutoShortcutCATs);
  }
  return result;
}

uint64_t type metadata completion function for AutoShortcutCATs(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + class metadata base offset for AutoShortcutCATs);
}

uint64_t ObjC metadata update function for AutoShortcutCATs()
{
  return type metadata accessor for AutoShortcutCATs(0LL);
}

uint64_t storeEnumTagSinglePayload for AutoShortcutCATs.Properties( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF4) {
    return ((uint64_t (*)(void))((char *)&loc_FC4D0 + 4 * byte_1884E1[v4]))();
  }
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_FC504 + 4 * byte_1884DC[v4]))();
}

uint64_t sub_FC504(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_FC50C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xFC514LL);
  }
  return result;
}

uint64_t sub_FC520(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xFC528LL);
  }
  *(_BYTE *)uint64_t result = a2 + 11;
  return result;
}

uint64_t sub_FC52C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_FC534(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AutoShortcutCATs.Properties()
{
  return &type metadata for AutoShortcutCATs.Properties;
}

uint64_t OUTLINED_FUNCTION_4_37()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 56);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 64) = v0;
  return swift_task_dealloc(v5);
}

uint64_t OUTLINED_FUNCTION_8_41(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t OUTLINED_FUNCTION_14_34(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 0x656D614E707061LL;
  v2[11] = 0xE700000000000000LL;
  return result;
}

  ;
}

uint64_t OUTLINED_FUNCTION_34_24()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_36_22()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 48));
}

uint64_t OUTLINED_FUNCTION_38_23(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_44_14(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

  ;
}

uint64_t protocol witness for LinkConnection.bundleIdentifier.getter in conformance LNConnection()
{
  return @nonobjc LNConnection.bundleIdentifier.getter();
}

uint64_t @nonobjc LNConnection.bundleIdentifier.getter()
{
  id v1 = [v0 bundleIdentifier];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo7LNValueCG_18SiriLinkFlowPlugin09ShortcutsF18DisambiguationItemVs5NeverOTg5028_sSo19LNNeedsValueRequestC18efgh5E21toj108Items16bundleIdentifier23actionParameterMetadata14selectedValues6locale16metadataProviderSayAC09ShortcutseI4k27VGSS_So08LNActionnO0CSaySo7D33CGSgSSAC0eO9Providing_ptFAkPXEfU_SSTf1cn_n( unint64_t a1, uint64_t a2, uint64_t a3)
{
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo7LNValueCG_18SiriLinkFlowPlugin09ShortcutsF18DisambiguationItemVs5NeverOTg5028_sSo19LNNeedsValueRequestC18efgh5E21toj108Items16bundleIdentifier23actionParameterMetadata14selectedValues6locale16metadataProviderSayAC09ShortcutseI4k27VGSS_So08LNActionnO0CSaySo7D33CGSgSSAC0eO9Providing_ptFAkPXEfU_SSTf1cn_nTm( unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v15 = a2;
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v7 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  if (v7)
  {
    while (1)
    {
      uint64_t v18 = _swiftEmptyArrayStorage;
      OUTLINED_FUNCTION_28_18();
      if (v7 < 0) {
        break;
      }
      uint64_t v14 = v4;
      uint64_t v8 = 0LL;
      uint64_t v9 = v18;
      unint64_t v4 = a1 & 0xC000000000000001LL;
      while (v7 != v8)
      {
        if (v4) {
          id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a1);
        }
        else {
          id v10 = *(id *)(a1 + 8 * v8 + 32);
        }
        uint64_t v11 = v10;
        LNValue.toDisambiguationItem(locale:)(v15, a3, v16);

        uint64_t v18 = v9;
        unint64_t v12 = v9[2];
        if (v12 >= v9[3] >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v9 = v18;
        }

        ++v8;
        v9[2] = v12 + 1;
        OUTLINED_FUNCTION_16_38( (uint64_t)&v9[7 * v12],  v13,  v14,  v15,  v16[0],  *(_OWORD *)&v16[1],  *(_OWORD *)&v16[2],  v17);
        if (v7 == v8) {
          goto LABEL_15;
        }
      }

      __break(1u);
LABEL_14:
      OUTLINED_FUNCTION_54_7();
      uint64_t v7 = OUTLINED_FUNCTION_58_9();
      OUTLINED_FUNCTION_2_6();
      if (!v7) {
        goto LABEL_15;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_15:
    swift_bridgeObjectRelease(a3);
    OUTLINED_FUNCTION_10_31();
  }

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18LNEnumCaseMetadataCG_18SiriLinkFlowPlugin09ShortcutsH18DisambiguationItemVs5NeverOTg5028_sSo19LNNeedsValueRequestC18ghij5E21tol108Items16bundleIdentifier23actionParameterMetadata14selectedValues6locale16metadataProviderSayAC09ShortcutseI4m66VGSS_So08LNActionnO0CSaySo7LNValueCGSgSSAC0eO9Providing_ptFAKSo010dE9O0CXEfU1_So017LNLinkEnumerationR4TypeCSSTf1cn_n( unint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  if (v8)
  {
    while (1)
    {
      uint64_t v19 = _swiftEmptyArrayStorage;
      OUTLINED_FUNCTION_28_18();
      if (v8 < 0) {
        break;
      }
      uint64_t v14 = v5;
      uint64_t v9 = 0LL;
      id v10 = v19;
      while (v8 != v9)
      {
        if ((a1 & 0xC000000000000001LL) != 0) {
          id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, a1);
        }
        else {
          id v11 = *(id *)(a1 + 8 * v9 + 32);
        }
        unint64_t v12 = v11;
        LNEnumCaseMetadata.toDisambiguationItem(valueType:locale:)(a2, v15, v16, (uint64_t)v17);

        uint64_t v19 = v10;
        unint64_t v13 = v10[2];
        uint64_t v5 = v13 + 1;
        if (v13 >= v10[3] >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          id v10 = v19;
        }

        ++v9;
        v10[2] = v5;
        OUTLINED_FUNCTION_16_38( (uint64_t)&v10[7 * v13],  v14,  v15,  v16,  v17[0],  *(_OWORD *)&v17[1],  *(_OWORD *)&v17[2],  v18);
        if (v8 == v9) {
          goto LABEL_15;
        }
      }

      __break(1u);
LABEL_14:
      OUTLINED_FUNCTION_11_11();
      uint64_t v8 = OUTLINED_FUNCTION_58_9();
      OUTLINED_FUNCTION_69();
      if (!v8) {
        goto LABEL_15;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_15:

    swift_bridgeObjectRelease(v16);
    OUTLINED_FUNCTION_10_31();
  }

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo31LNStaticDeferredLocalizedStringCG_SSs5NeverOTg50145_sSo23LNDisplayRepresentationC18SiriLinkFlowPluginE29toDisambiguationItemComponent33_1653C942D9461C94FC73A283A98B2FB0LL6localeAC0hiJ0VSS_tFSSSo31defG6CXEfU_SSTf1cn_n( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  if (v4)
  {
    while (1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      if (v4 < 0) {
        break;
      }
      uint64_t v5 = 0LL;
      while (v4 != v5)
      {
        if ((a1 & 0xC000000000000001LL) != 0) {
          id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        }
        else {
          id v6 = *(id *)(a1 + 8 * v5 + 32);
        }
        uint64_t v7 = v6;
        NSString v8 = String._bridgeToObjectiveC()();
        id v9 = [v7 localizedStringForLocaleIdentifier:v8];

        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v12 = v11;

        unint64_t v13 = _swiftEmptyArrayStorage[2];
        if (v13 >= _swiftEmptyArrayStorage[3] >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        ++v5;
        _swiftEmptyArrayStorage[2] = v13 + 1;
        uint64_t v14 = &_swiftEmptyArrayStorage[2 * v13];
        v14[4] = v10;
        v14[5] = v12;
        if (v4 == v5) {
          goto LABEL_12;
        }
      }

      __break(1u);
LABEL_14:
      if (a1 < 0) {
        uint64_t v15 = a1;
      }
      else {
        uint64_t v15 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a1);
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v15);
      swift_bridgeObjectRelease(a1);
      if (!v4) {
        goto LABEL_12;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_12:
    swift_bridgeObjectRelease(a3);
  }

void *LNNeedsValueRequest.toDisambiguationItems(bundleIdentifier:actionParameterMetadata:selectedValues:locale:metadataProvider:)( uint64_t a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v14 = a7[3];
  uint64_t v15 = a7[4];
  uint64_t v16 = __swift_project_boxed_opaque_existential_1(a7, v14);
  return specialized LNNeedsValueRequest.toDisambiguationItems(bundleIdentifier:actionParameterMetadata:selectedValues:locale:metadataProvider:)( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t)v16,  v7,  v14,  v15);
}

uint64_t LNDisambiguationRequest.toDisambiguationItems(selectedValues:locale:)( unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    OUTLINED_FUNCTION_80();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo7LNValueCG_18SiriLinkFlowPlugin09ShortcutsF18DisambiguationItemVs5NeverOTg5028_sSo19LNNeedsValueRequestC18efgh5E21toj108Items16bundleIdentifier23actionParameterMetadata14selectedValues6locale16metadataProviderSayAC09ShortcutseI4k27VGSS_So08LNActionnO0CSaySo7D33CGSgSSAC0eO9Providing_ptFAkPXEfU_SSTf1cn_nTm( a1,  a2,  a3);
    return v7;
  }

  else
  {
    id v9 = [v3 providedValues];
    uint64_t v10 = type metadata accessor for NSError( 0LL,  &lazy cache variable for type metadata for LNValue,  &OBJC_CLASS___LNValue_ptr);
    unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

    OUTLINED_FUNCTION_80();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo7LNValueCG_18SiriLinkFlowPlugin09ShortcutsF18DisambiguationItemVs5NeverOTg5028_sSo19LNNeedsValueRequestC18efgh5E21toj108Items16bundleIdentifier23actionParameterMetadata14selectedValues6locale16metadataProviderSayAC09ShortcutseI4k27VGSS_So08LNActionnO0CSaySo7D33CGSgSSAC0eO9Providing_ptFAkPXEfU_SSTf1cn_nTm( v11,  a2,  a3);
    uint64_t v8 = v12;
    OUTLINED_FUNCTION_1_2();
  }

  return v8;
}

uint64_t ShortcutsLinkDisambiguationItem.toDisambiguationVisualItem()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = ShortcutsLinkDisambiguationItem.getItemData()();
  if (v4 >> 60 == 15)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    id v9 = 0LL;
    uint64_t result = 0LL;
  }

  else
  {
    uint64_t v11 = v3;
    unint64_t v12 = v4;
    OUTLINED_FUNCTION_6_4();
    uint64_t v7 = v1[2];
    uint64_t v13 = v1[3];
    id v9 = (void *)v1[4];
    OUTLINED_FUNCTION_16_15();
    uint64_t v5 = static CATSpeakableString.stripTTSHint(print:)();
    uint64_t v6 = v14;
    OUTLINED_FUNCTION_56_1();
    if (v13)
    {
      swift_bridgeObjectRetain(v13);
      uint64_t v7 = static CATSpeakableString.stripTTSHint(print:)();
      uint64_t v8 = v15;
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
    uint64_t inited = swift_initStackObject(v16, v20);
    *(_OWORD *)(inited + 16) = xmmword_17E650;
    v19[0] = 0x65756C6176LL;
    v19[1] = 0xE500000000000000LL;
    id v18 = v9;
    AnyHashable.init<A>(_:)((void *)(inited + 32), v19, &type metadata for String, &protocol witness table for String);
    *(void *)(inited + 96) = &type metadata for Data;
    *(void *)(inited + 72) = v11;
    *(void *)(inited + 80) = v12;
    uint64_t result = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }

  *a1 = v5;
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = (uint64_t)v9;
  a1[5] = result;
  return result;
}

uint64_t ShortcutsLinkDisambiguationItem.getItemData()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
  uint64_t v3 = *(void **)(v0 + 48);
  id v23 = 0LL;
  id v4 = [v2 archivedDataWithRootObject:v3 requiringSecureCoding:1 error:&v23];
  id v5 = v23;
  if (v4)
  {
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
  }

  else
  {
    uint64_t v7 = v5;
    uint64_t v8 = _convertNSErrorToError(_:)(v5);

    swift_willThrow(v9, v10, v11, v12, v13);
    swift_errorRelease(v8);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v14, (uint64_t)static Logger.voiceCommands);
    outlined retain of ShortcutsLinkDisambiguationItem(v1);
    uint64_t v15 = outlined retain of ShortcutsLinkDisambiguationItem(v1);
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v19 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v18 = 138412290;
      id v23 = v3;
      id v20 = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v18 + 4);
      *uint64_t v19 = v3;
      outlined release of ShortcutsLinkDisambiguationItem(v1);
      outlined release of ShortcutsLinkDisambiguationItem(v1);
      _os_log_impl(&dword_0, v16, v17, "Could not archive disambiguation data for value: %@", v18, 0xCu);
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v19, 1LL, v21);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    else
    {
      outlined release of ShortcutsLinkDisambiguationItem(v1);
      outlined release of ShortcutsLinkDisambiguationItem(v1);
    }

    return 0LL;
  }

  return v6;
}

uint64_t ShortcutsLinkDisambiguationItem.toDisambiguationItemModel()()
{
  *(void *)(v1 + 144) = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  *(void *)(v1 + 152) = OUTLINED_FUNCTION_10_8(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  unint64_t v1;
  void *v2;
  __int128 *v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;
  uint64_t v15;
  __n128 *inited;
  __n128 *v17;
  uint64_t v18;
  *(void *)(v0 + 160) = ShortcutsLinkDisambiguationItem.getItemData()();
  *(void *)(v0 + 168) = v1;
  if (v1 >> 60 == 15)
  {
    uint64_t v2 = 0LL;
  }

  else
  {
    uint64_t v3 = *(__int128 **)(v0 + 144);
    OUTLINED_FUNCTION_6_4();
    id v4 = v3[2];
    id v5 = *v3;
    *(_OWORD *)(v0 + 96) = v3[1];
    *(_OWORD *)(v0 + 112) = v4;
    *(_OWORD *)(v0 + 80) = v5;
    OUTLINED_FUNCTION_54_7();
    uint64_t v6 = OUTLINED_FUNCTION_40_22();
    uint64_t v8 = v7;
    OUTLINED_FUNCTION_2_6();
    *(void *)(v0 + 176) = v6;
    *(void *)(v0 + 184) = v8;
    uint64_t v9 = *(void *)(v0 + 96);
    if (*(void *)(v0 + 104))
    {
      OUTLINED_FUNCTION_54_7();
      uint64_t v9 = OUTLINED_FUNCTION_40_22();
      uint64_t v11 = v10;
      OUTLINED_FUNCTION_2_6();
    }

    else
    {
      uint64_t v11 = 0LL;
    }

    *(void *)(v0 + 192) = v9;
    *(void *)(v0 + 200) = v11;
    outlined init with take of INImage?(v0 + 112, v0 + 136);
    outlined init with take of INImage?(v0 + 136, v0 + 128);
    if (*(void *)(v0 + 128))
    {
      uint64_t v12 = (void *)swift_task_alloc(dword_21D15C);
      *(void *)(v0 + 208) = v12;
      *uint64_t v12 = v0;
      v12[1] = ShortcutsLinkDisambiguationItem.toDisambiguationItemModel();
      return INImage.convertToVisualProperty()(*(void *)(v0 + 152));
    }

    uint64_t v14 = OUTLINED_FUNCTION_61_7();
    OUTLINED_FUNCTION_16_20(v14);
    OUTLINED_FUNCTION_42_16();
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Data)>);
    uint64_t inited = (__n128 *)swift_initStackObject(v15, v0 + 16);
    os_log_type_t v17 = OUTLINED_FUNCTION_15_22(inited, (__n128)xmmword_17E650);
    Dictionary.init(dictionaryLiteral:)( v17,  &type metadata for String,  &type metadata for Data,  &protocol witness table for String);
    id v18 = OUTLINED_FUNCTION_11_32();
    OUTLINED_FUNCTION_51(v18);
    uint64_t v2 = OUTLINED_FUNCTION_3_42();
  }

  swift_task_dealloc();
  return OUTLINED_FUNCTION_4_38((uint64_t)v2, *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_3_0(*(void *)(*(void *)v0 + 208LL));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  __n128 *inited;
  __n128 *v3;
  uint64_t v4;
  void *v5;
  OUTLINED_FUNCTION_42_16();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Data)>);
  uint64_t inited = (__n128 *)swift_initStackObject(v1, v0 + 16);
  uint64_t v3 = OUTLINED_FUNCTION_15_22(inited, (__n128)xmmword_17E650);
  Dictionary.init(dictionaryLiteral:)( v3,  &type metadata for String,  &type metadata for Data,  &protocol witness table for String);
  id v4 = OUTLINED_FUNCTION_11_32();
  OUTLINED_FUNCTION_51(v4);
  id v5 = OUTLINED_FUNCTION_3_42();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_4_38((uint64_t)v5, *(uint64_t (**)(void))(v0 + 8));
}

void *Array<A>.toDisambiguationVisualItems()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain(a1);
  id v48 = (id)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
  uint64_t v3 = (void **)(a1 + 80);
  uint64_t v52 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v4 = (uint64_t)*(v3 - 5);
    uint64_t v5 = (uint64_t)*(v3 - 3);
    uint64_t v55 = (uint64_t)*(v3 - 4);
    v56[0] = 0LL;
    uint64_t v7 = *(v3 - 2);
    uint64_t v6 = (uint64_t)*(v3 - 1);
    uint64_t v8 = *v3;
    id v9 = v7;
    uint64_t v53 = v6;
    swift_bridgeObjectRetain(v6);
    id v10 = v8;
    OUTLINED_FUNCTION_52_5();
    OUTLINED_FUNCTION_11_11();
    id v11 = [v48 archivedDataWithRootObject:v10 requiringSecureCoding:1 error:v56];
    id v12 = v56[0];
    uint64_t v54 = v1;
    if (v11)
    {
      uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
      uint64_t v15 = v14;

      OUTLINED_FUNCTION_6_4();
      OUTLINED_FUNCTION_52_5();
      uint64_t v16 = static CATSpeakableString.stripTTSHint(print:)();
      uint64_t v50 = v17;
      OUTLINED_FUNCTION_64_0();
      uint64_t v51 = v16;
      if (v5)
      {
        OUTLINED_FUNCTION_11_11();
        uint64_t v55 = static CATSpeakableString.stripTTSHint(print:)();
        uint64_t v49 = v18;
        OUTLINED_FUNCTION_69();
      }

      else
      {
        uint64_t v49 = 0LL;
      }

      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
      uint64_t inited = swift_initStackObject(v37, v57);
      *(_OWORD *)(inited + 16) = xmmword_17E650;
      OUTLINED_FUNCTION_34_25();
      v56[0] = v39;
      v56[1] = (id)0xE500000000000000LL;
      id v40 = v9;
      AnyHashable.init<A>(_:)( (void *)(inited + 32),  v56,  &type metadata for String,  &protocol witness table for String);
      *(void *)(inited + 96) = &type metadata for Data;
      *(void *)(inited + 72) = v13;
      *(void *)(inited + 80) = v15;
      uint64_t v41 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_64_0();
      if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v52 = v45;
      }

      uint64_t v42 = v54;
      unint64_t v43 = v52[2];
      if (v43 >= v52[3] >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v52 = v46;
      }

      v52[2] = v43 + 1;
      uint64_t v44 = &v52[6 * v43];
      v44[4] = v51;
      v44[5] = v50;
      v44[6] = v55;
      v44[7] = v49;
      v44[8] = v7;
      v44[9] = v41;
    }

    else
    {
      uint64_t v19 = v12;
      uint64_t v20 = _convertNSErrorToError(_:)(v12);

      swift_willThrow(v21, v22, v23, v24, v25);
      swift_errorRelease(v20);
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v26 = OUTLINED_FUNCTION_48();
      __swift_project_value_buffer(v26, (uint64_t)static Logger.voiceCommands);
      OUTLINED_FUNCTION_5_10(v4);
      OUTLINED_FUNCTION_5_10(v5);
      id v27 = v9;
      OUTLINED_FUNCTION_5_10(v53);
      id v28 = v10;
      id v29 = v27;
      id v30 = v28;
      os_log_type_t v31 = (os_log_s *)Logger.logObject.getter(v30);
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = OUTLINED_FUNCTION_38(12LL);
        uint64_t v34 = (void *)OUTLINED_FUNCTION_38(8LL);
        *(_DWORD *)uint64_t v33 = 138412290;
        *(void *)(v33 + 4) = v30;
        void *v34 = v30;

        OUTLINED_FUNCTION_19_1(v53);
        OUTLINED_FUNCTION_19_1(v5);
        OUTLINED_FUNCTION_19_1(v4);
        OUTLINED_FUNCTION_31_2( &dword_0,  v31,  v32,  "Could not archive disambiguation data for value: %@",  (uint8_t *)v33);
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        OUTLINED_FUNCTION_30_3((uint64_t)v34, v36, v35);
        OUTLINED_FUNCTION_1_0((uint64_t)v34);
        OUTLINED_FUNCTION_1_0(v33);

        OUTLINED_FUNCTION_56_1();
        OUTLINED_FUNCTION_69();
        OUTLINED_FUNCTION_64_0();
      }

      else
      {

        OUTLINED_FUNCTION_37_3(v53);
        OUTLINED_FUNCTION_37_3(v5);
        OUTLINED_FUNCTION_37_3(v4);
      }

      uint64_t v42 = v54;
    }

    v3 += 7;
    uint64_t v1 = v42 - 1;
  }

  while (v1);
  swift_bridgeObjectRelease();
  return v52;
}

__n128 LNValue.toDisambiguationItem(locale:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v5 = v3;
  id v9 = [v5 displayRepresentation];
  if (v9)
  {
    id v10 = v9;
    LNDisplayRepresentation.toDisambiguationItemComponent(locale:)(a1, a2, &v27);

    unint64_t v12 = v30;
    id v11 = v31;
    __n128 v25 = v29;
    uint64_t v13 = v27;
    unint64_t v14 = v28;
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v15 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.voiceCommands);
    id v16 = v5;
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_21_6(v18))
    {
      uint64_t v19 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v26 = (void *)OUTLINED_FUNCTION_38(8LL);
      *(_DWORD *)uint64_t v19 = 138412290;
      uint64_t v27 = (uint64_t)v16;
      id v20 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v19 + 4);
      *uint64_t v26 = v16;

      OUTLINED_FUNCTION_31_2(&dword_0, v17, v4, "Link LNDisplayRepresentation was nil for %@", v19);
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_30_3((uint64_t)v26, v22, v21);
      OUTLINED_FUNCTION_1_0((uint64_t)v26);
      OUTLINED_FUNCTION_1_0((uint64_t)v19);
    }

    else
    {
    }

    uint64_t v13 = 0LL;
    unint64_t v12 = 0LL;
    __n128 v25 = 0u;
    id v11 = _swiftEmptyArrayStorage;
    unint64_t v14 = 0xE000000000000000LL;
  }

  id v23 = v5;
  a3->n128_u64[0] = v13;
  a3->n128_u64[1] = v14;
  __n128 result = v25;
  a3[1] = v25;
  a3[2].n128_u64[0] = v12;
  a3[2].n128_u64[1] = (unint64_t)v11;
  a3[3].n128_u64[0] = (unint64_t)v23;
  return result;
}

uint64_t LNDisplayRepresentation.toDisambiguationItemComponent(locale:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  os_log_type_t v4 = v3;
  id v8 = [v4 title];
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v8 localizedStringForLocaleIdentifier:v9];

  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v34 = v12;

  id v13 = [v4 subtitle];
  if (v13)
  {
    unint64_t v14 = v13;
    NSString v15 = String._bridgeToObjectiveC()();
    id v16 = [v14 localizedStringForLocaleIdentifier:v15];

    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;
  }

  else
  {
    uint64_t v17 = 0LL;
    uint64_t v19 = 0LL;
  }

  id v20 = [v4 image];
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = objc_opt_self(&OBJC_CLASS___LNSymbolImage);
    id v23 = (void *)swift_dynamicCastObjCClass(v21, v22);
    if (v23)
    {
      NSString v24 = [v23 systemName];
      if (!v24)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v26 = v25;
        NSString v24 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v26);
      }

      id v27 = [(id)objc_opt_self(INImage) systemImageNamed:v24];

      goto LABEL_12;
    }
  }

  id v28 = [v4 image];
  if (v28)
  {
    uint64_t v21 = v28;
    id v27 = [v28 inImage];
LABEL_12:
    uint64_t v29 = v34;

    goto LABEL_14;
  }

  id v27 = 0LL;
  uint64_t v29 = v34;
LABEL_14:
  uint64_t result = outlined bridged method (pb) of @objc LNDisplayRepresentation.synonyms.getter(v4);
  if (result)
  {
    uint64_t v31 = result;
    swift_bridgeObjectRetain(a2);
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo31LNStaticDeferredLocalizedStringCG_SSs5NeverOTg50145_sSo23LNDisplayRepresentationC18SiriLinkFlowPluginE29toDisambiguationItemComponent33_1653C942D9461C94FC73A283A98B2FB0LL6localeAC0hiJ0VSS_tFSSSo31defG6CXEfU_SSTf1cn_n( v31,  a1,  a2);
    uint64_t v33 = v32;
    uint64_t result = swift_bridgeObjectRelease(v31);
  }

  else
  {
    uint64_t v33 = _swiftEmptyArrayStorage;
  }

  *a3 = v11;
  a3[1] = v29;
  a3[2] = v17;
  a3[3] = v19;
  a3[4] = (uint64_t)v27;
  a3[5] = (uint64_t)v33;
  return result;
}

id LNLinkEnumerationValueType.__allocating_init(enumerationIdentifier:)(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [v4 initWithEnumerationIdentifier:v5];

  return v6;
}

__n128 LNEnumCaseMetadata.toDisambiguationItem(valueType:locale:)@<Q0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  NSString v5 = v4;
  id v10 = [v5 displayRepresentation];
  LNDisplayRepresentation.toDisambiguationItemComponent(locale:)(a2, a3, (uint64_t *)v23);
  __n128 v20 = (__n128)v23[1];
  __int128 v21 = v23[0];
  uint64_t v11 = v24;
  uint64_t v12 = v25;

  id v13 = [v5 identifier];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  v22[3] = &type metadata for String;
  v22[0] = v14;
  v22[1] = v16;
  id v17 = objc_allocWithZone(&OBJC_CLASS___LNValue);
  @nonobjc LNValue.init(_:valueType:)(v22, a1);
  __n128 result = v20;
  *(_OWORD *)a4 = v21;
  *(__n128 *)(a4 + 16) = v20;
  *(void *)(a4 + 32) = v11;
  *(void *)(a4 + 40) = v12;
  *(void *)(a4 + 48) = v19;
  return result;
}

uint64_t outlined bridged method (pb) of @objc LNDisplayRepresentation.synonyms.getter(void *a1)
{
  id v1 = [a1 synonyms];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for NSError( 0LL,  &lazy cache variable for type metadata for LNStaticDeferredLocalizedString,  &OBJC_CLASS___LNStaticDeferredLocalizedString_ptr);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

void *specialized LNNeedsValueRequest.toDisambiguationItems(bundleIdentifier:actionParameterMetadata:selectedValues:locale:metadataProvider:)( uint64_t a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  id v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = v19;
  uint64_t v65 = v18;
  (*(void (**)(char *, uint64_t))(v19 + 16))(v17, v20);
  id v21 = [a3 valueType];
  uint64_t v22 = objc_opt_self(&OBJC_CLASS___LNLinkEnumerationValueType);
  uint64_t v23 = swift_dynamicCastObjCClass(v21, v22);
  if (!v23)
  {

    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v26 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v26, (uint64_t)static Logger.voiceCommands);
    id v27 = a3;
    id v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      unint64_t v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v31 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)unint64_t v30 = 138412290;
      id v32 = [v27 valueType];
      id v68 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v30 + 4);
      *uint64_t v31 = v32;

      _os_log_impl( &dword_0,  v28,  v29,  "Can only create disambiguations for LNLinkEnumerationValueType, not %@",  v30,  0xCu);
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v31, 1LL, v33);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v25 = _swiftEmptyArrayStorage;
    goto LABEL_11;
  }

  if (a4)
  {
    swift_bridgeObjectRetain(a6);
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo7LNValueCG_18SiriLinkFlowPlugin09ShortcutsF18DisambiguationItemVs5NeverOTg5028_sSo19LNNeedsValueRequestC18efgh5E21toj108Items16bundleIdentifier23actionParameterMetadata14selectedValues6locale16metadataProviderSayAC09ShortcutseI4k27VGSS_So08LNActionnO0CSaySo7D33CGSgSSAC0eO9Providing_ptFAkPXEfU_SSTf1cn_nTm( a4,  a5,  a6);
    uint64_t v25 = v24;

LABEL_11:
    uint64_t v35 = v65;
    goto LABEL_12;
  }

  uint64_t v34 = (void *)v23;
  uint64_t v35 = v65;
  unint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a10 + 16))(a1, a2, v65);
  id v38 = v21;
  uint64_t v39 = specialized Sequence.first(where:)(v37, v34);
  swift_bridgeObjectRelease();
  if (v39)
  {
    type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for LNLinkEnumerationValueType,  &OBJC_CLASS___LNLinkEnumerationValueType_ptr);
    id v40 = v39;
    id v41 = [v34 enumerationIdentifier];
    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v63 = v38;
    uint64_t v44 = v43;

    id v45 = LNLinkEnumerationValueType.__allocating_init(enumerationIdentifier:)(v42, v44);
    id v46 = [v40 cases];
    uint64_t v47 = type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for LNEnumCaseMetadata,  &OBJC_CLASS___LNEnumCaseMetadata_ptr);
    unint64_t v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v46, v47);

    swift_bridgeObjectRetain(a6);
    id v49 = v45;
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18LNEnumCaseMetadataCG_18SiriLinkFlowPlugin09ShortcutsH18DisambiguationItemVs5NeverOTg5028_sSo19LNNeedsValueRequestC18ghij5E21tol108Items16bundleIdentifier23actionParameterMetadata14selectedValues6locale16metadataProviderSayAC09ShortcutseI4m66VGSS_So08LNActionnO0CSaySo7LNValueCGSgSSAC0eO9Providing_ptFAKSo010dE9O0CXEfU1_So017LNLinkEnumerationR4TypeCSSTf1cn_n( v48,  v49,  a5,  a6);
    uint64_t v25 = v50;

    swift_bridgeObjectRelease();
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v51 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v51, (uint64_t)static Logger.voiceCommands);
    id v52 = v38;
    uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v63 = (id)swift_slowAlloc(32LL, -1LL);
      id v68 = v63;
      *(_DWORD *)uint64_t v55 = 136315138;
      uint64_t v35 = v65;
      Swift::String v62 = v55 + 4;
      id v56 = [v34 enumerationIdentifier];
      uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v59 = v58;

      uint64_t v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v59, (uint64_t *)&v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v62);

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v53, v54, "Could not find LNEnumMetadata for identifier: %s", v55, 0xCu);
      id v60 = v63;
      swift_arrayDestroy(v63, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1LL, -1LL);
      swift_slowDealloc(v55, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v25 = _swiftEmptyArrayStorage;
  }

ValueMetadata *type metadata accessor for ShortcutsLinkDisambiguationItem()
{
  return &type metadata for ShortcutsLinkDisambiguationItem;
}

uint64_t outlined retain of ShortcutsLinkDisambiguationItem(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 40);
  NSString v5 = *(void **)(a1 + 48);
  id v6 = *(id *)(a1 + 32);
  swift_bridgeObjectRetain(v4);
  id v7 = v5;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t outlined release of ShortcutsLinkDisambiguationItem(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);

  return a1;
}

void *OUTLINED_FUNCTION_3_42()
{
  return WorkflowDataModels.DisambiguationItemModel.init(title:subtitle:thumbnail:invocationCommand:)( v5,  v3,  v1,  v2,  v4,  0xD000000000000043LL,  (v0 - 32) | 0x8000000000000000LL,  v6,  0);
}

uint64_t OUTLINED_FUNCTION_4_38(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void *OUTLINED_FUNCTION_8_42( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return WorkflowDataModels.DisambiguationItemModel.init(title:subtitle:thumbnail:invocationCommand:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  v9,  a9);
}

  ;
}

uint64_t OUTLINED_FUNCTION_11_32()
{
  return type metadata accessor for WorkflowDataModels.DisambiguationItemModel(0LL);
}

__n128 *OUTLINED_FUNCTION_15_22(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x65756C6176LL;
  result[2].n128_u64[1] = 0xE500000000000000LL;
  result[3].n128_u64[0] = v3;
  result[3].n128_u64[1] = v2;
  return result;
}

__n128 OUTLINED_FUNCTION_16_38@<Q0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, __int128 a6, __int128 a7, uint64_t a8)
{
  __n128 result = a5;
  *(void *)(a1 + 80) = a8;
  *(_OWORD *)(a1 + 48) = a6;
  *(_OWORD *)(a1 + 64) = a7;
  *(__n128 *)(a1 + 32) = a5;
  return result;
}

void OUTLINED_FUNCTION_24_26( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void OUTLINED_FUNCTION_28_18()
{
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_40_22()
{
  return static CATSpeakableString.stripTTSHint(print:)();
}

  ;
}

id OUTLINED_FUNCTION_43_22()
{
  return *(id *)(v0 + 88);
}

void SiriWorkflowRunner.__allocating_init(workflowRunnerInput:deviceState:aceServiceInvoker:)()
{
  uint64_t v1 = (const void *)OUTLINED_FUNCTION_62_14();
  SiriWorkflowRunner.init(workflowRunnerInput:deviceState:aceServiceInvoker:)(v1, v2, v3);
  OUTLINED_FUNCTION_2();
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *static SiriWorkflowRunnerEvent.unusedHandler<A>(_:)( uint64_t a1, uint64_t a2))(Swift::OpaquePointer items)
{
  *(void *)(OUTLINED_FUNCTION_19((uint64_t)&unk_1FB250, 24LL) + 16) = a2;
  return CustomIntentDisambiguationItemContainer.init(items:);
}

void *SiriWorkflowRunner.init(workflowRunnerInput:deviceState:aceServiceInvoker:)( const void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)v3;
  outlined init with take of SiriWorkflowRunnerInput(a1, v17);
  char v7 = v18;
  *(void *)(v3 + 16) = 0LL;
  *(void *)(v3 + 24) = 0LL;
  __int128 v8 = v17[1];
  *(_OWORD *)(v3 + 72) = v17[0];
  *(_OWORD *)(v3 + 88) = v8;
  __int128 v9 = v17[3];
  *(_OWORD *)(v3 + 104) = v17[2];
  *(_OWORD *)(v3 + 120) = v9;
  *(_BYTE *)(v3 + 136) = v7;
  outlined retain of SiriWorkflowRunnerInput( (uint64_t)a1,  (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SiriWorkflowRunnerInput);
  if (one-time initialization token for shared != -1) {
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  }
  uint64_t v10 = static WFDialogState.shared;
  swift_retain(static WFDialogState.shared);
  SiriWorkflowRunnerInput.toWFSiriWorkflowRunnerClient(deviceState:aceServiceInvoker:dialogState:)();
  uint64_t v12 = v11;
  swift_release(v10);
  v4[7] = type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for WFSiriWorkflowRunnerClient,  &OBJC_CLASS___WFSiriWorkflowRunnerClient_ptr);
  v4[8] = &protocol witness table for WFSiriWorkflowRunnerClient;
  v4[4] = v12;
  OUTLINED_FUNCTION_21_10((uint64_t)(v4 + 4), (uint64_t)v16);
  outlined init with copy of DeviceState((uint64_t)(v4 + 4), (uint64_t)v15);
  id v13 = objc_allocWithZone((Class)type metadata accessor for SiriStateObserver());
  SiriStateObserver.init(runnerClient:)(v15);
  outlined retain of SiriWorkflowRunnerInput( (uint64_t)a1,  (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SiriWorkflowRunnerInput);
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  OUTLINED_FUNCTION_42_17();
  return v4;
}

uint64_t sub_FF448()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void SiriWorkflowRunner.__allocating_init(runnerClient:siriStateObserver:deviceState:)()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_62_14();
  SiriWorkflowRunner.init(runnerClient:siriStateObserver:deviceState:)(v1, v2);
  OUTLINED_FUNCTION_2();
}

uint64_t SiriWorkflowRunner.init(runnerClient:siriStateObserver:deviceState:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  *(void *)(v3 + 16) = 0LL;
  *(void *)(v3 + 24) = 0LL;
  outlined init with copy of DeviceState((uint64_t)a1, v3 + 32);
  if (!a2)
  {
    outlined init with copy of DeviceState((uint64_t)a1, (uint64_t)v8);
    id v6 = objc_allocWithZone((Class)type metadata accessor for SiriStateObserver());
    SiriStateObserver.init(runnerClient:)(v8);
  }

  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  OUTLINED_FUNCTION_42_17();
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_BYTE *)(v3 + 136) = -1;
  return v3;
}

uint64_t SiriWorkflowRunner.startExecution()()
{
  uint64_t v3 = v0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation.BufferingPolicy);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_53_1();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v6 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v6, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v7 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_21_6(v7))
  {
    __int128 v8 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    *(_WORD *)__int128 v8 = 0;
    OUTLINED_FUNCTION_47_1(&dword_0, v0, v2, "#SiriWorkflowRunner creating async stream", v8);
    OUTLINED_FUNCTION_1_0((uint64_t)v8);
  }

  uint64_t v9 = OUTLINED_FUNCTION_45_20();
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))( v1,  enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:),  v4);
  return AsyncStream.init(_:bufferingPolicy:_:)( v9,  v1,  partial apply for closure #1 in SiriWorkflowRunner.startExecution(),  v3,  v9);
}

uint64_t closure #1 in SiriWorkflowRunner.startExecution()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  os_log_type_t v7 = (char *)&v21[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v8 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v8(v7, a1, v4);
  uint64_t v9 = (objc_class *)type metadata accessor for AnonymousSiriWorkflowRunnerClientDelegate(0LL);
  uint64_t v10 = (char *)objc_allocWithZone(v9);
  v8( &v10[OBJC_IVAR____TtC18SiriLinkFlowPlugin41AnonymousSiriWorkflowRunnerClientDelegate_continuation],  (uint64_t)v7,  v4);
  v24.receiver = v10;
  v24.super_class = v9;
  id v11 = objc_msgSendSuper2(&v24, "init");
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  SiriWorkflowRunner.buildSiriStateObserver()();
  swift_beginAccess(a2 + 32, v21, 33LL, 0LL);
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 64);
  __swift_mutable_project_boxed_opaque_existential_1(a2 + 32, v12);
  uint64_t v14 = *(void (**)(id, uint64_t, uint64_t))(v13 + 16);
  id v15 = v11;
  v14(v11, v12, v13);
  swift_endAccess(v21);
  outlined init with copy of DeviceState(a2 + 32, (uint64_t)v21);
  uint64_t v16 = v22;
  uint64_t v17 = v23;
  __swift_project_boxed_opaque_existential_1(v21, v22);
  (*(void (**)(uint64_t, uint64_t))(v17 + 64))(v16, v17);
  __swift_destroy_boxed_opaque_existential_1Tm(v21);
  uint64_t v18 = swift_allocObject(&unk_1FB5E8, 24LL, 7LL);
  *(void *)(v18 + 16) = v15;
  return AsyncStream.Continuation.onTermination.setter( partial apply for closure #1 in closure #1 in SiriWorkflowRunner.startExecution(),  v18,  v4);
}

void AnonymousSiriWorkflowRunnerClientDelegate.__allocating_init(continuation:)(uint64_t a1)
{
  id v4 = objc_allocWithZone(v1);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  OUTLINED_FUNCTION_24_27(v5);
  v6.receiver = v4;
  v6.super_class = v1;
  objc_msgSendSuper2(&v6, "init");
  OUTLINED_FUNCTION_57_4(a1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_5_30();
}

void SiriWorkflowRunner.buildSiriStateObserver()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v6);
  __int128 v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v9);
  id v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue,  &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter();
  objc_super v24 = _swiftEmptyArrayStorage;
  unint64_t v12 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  unint64_t v14 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v13, v14, v6, v12);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v2);
  uint64_t v15 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0x7461745369726953LL,  0xE900000000000065LL,  v11,  v8,  v5,  0LL);
  uint64_t v16 = (void *)v1[2];
  v1[2] = v15;

  uint64_t v17 = (void *)v1[2];
  uint64_t v18 = (void *)v1[18];
  objc_allocWithZone(&OBJC_CLASS___AFNotifyObserver);
  id v19 = v17;
  id v20 = v18;
  id v21 = @nonobjc AFNotifyObserver.init(name:options:queue:delegate:)( 0xD000000000000023LL,  0x8000000000196AF0LL,  1LL,  v17,  (uint64_t)v18);
  uint64_t v22 = (void *)v1[3];
  v1[3] = v21;
}

void closure #1 in closure #1 in SiriWorkflowRunner.startExecution()()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static Logger.voiceCommands);
  oslog = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_0, oslog, v2, "continuation.onTermination called", v3, 2u);
    swift_slowDealloc(v3, -1LL, -1LL);
  }
}

Swift::Void __swiftcall SiriWorkflowRunner.continueRunningOnAppLaunch()()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v2 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v2, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v3 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v3))
  {
    uint64_t v4 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    *(_WORD *)uint64_t v4 = 0;
    OUTLINED_FUNCTION_47_1(&dword_0, v0, v1, "#SiriWorkflowRunner continueRunningOnAppLaunch", v4);
    OUTLINED_FUNCTION_1_0((uint64_t)v4);
  }

  (*(void (**)(void))((char *)&stru_68.reloff + (swift_isaMask & **((void **)v0 + 18))))();
}

Swift::Bool __swiftcall SiriWorkflowRunner.isLastStep()()
{
  Swift::Bool v1 = SiriRunnerClient.isLastStep()();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  return v1;
}

uint64_t SiriWorkflowRunner.pauseShortcut()()
{
  *(void *)(v1 + 152) = v0;
  return swift_task_switch(SiriWorkflowRunner.pauseShortcut(), 0LL, 0LL);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  NSString v15;
  uint64_t v1 = *(void **)(v0 + 152);
  OUTLINED_FUNCTION_21_10((uint64_t)(v1 + 4), v0 + 128);
  outlined init with copy of DeviceState((uint64_t)(v1 + 4), v0 + 88);
  uint64_t v2 = *(void *)(v0 + 112);
  os_log_type_t v3 = *(void *)(v0 + 120);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 88), v2);
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 72))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 88));
  outlined init with take of SiriWorkflowRunnerInput?((uint64_t)(v1 + 9), v0 + 16);
  uint64_t v5 = (void *)static WFPausedShortcutConverter.toUserData(pausedShortcutData:runnerInput:)((uint64_t)v4, v0 + 16);
  type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for SKIDirectInvocationPayload,  &OBJC_CLASS___SKIDirectInvocationPayload_ptr);
  uint64_t v6 = SKIDirectInvocationPayload.__allocating_init(identifier:)(0xD00000000000003FLL, 0x80000000001938D0LL);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v5);
  __int128 v8 = v7;
  swift_bridgeObjectRelease();
  outlined bridged method (mbnn) of @objc SKIDirectInvocationPayload.userData.setter(v8, v6);
  uint64_t v9 = v1[22];
  uint64_t v10 = v1[23];
  __swift_project_boxed_opaque_existential_1(v1 + 19, v9);
  id v11 = (void *)DeviceState.asInvocationContext.getter(v9, v10);
  [v11 setInputOrigin:SAInputOriginDialogButtonTapValue];
  unint64_t v12 =  [(id)objc_opt_self(SKIDirectInvocation) runSiriKitExecutorCommandWithContext:v11 payload:v6];
  uint64_t v13 = [objc_allocWithZone(SAIntentGroupSiriKitAppSelectionState) init];
  unint64_t v14 = [objc_allocWithZone(SASyncAppIdentifyingInfo) init];
  uint64_t v15 = String._bridgeToObjectiveC()();
  [v14 setBundleId:v15];

  [v13 setRequestedApp:v14];
  [v12 setAppSelectionState:v13];

  return (*(uint64_t (**)(id))(v0 + 8))(v12);
}

uint64_t SiriWorkflowRunner.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 32));
  outlined consume of SiriWorkflowRunnerInput?( *(void **)(v0 + 72),  *(void *)(v0 + 80),  *(void *)(v0 + 88),  *(void *)(v0 + 96),  *(void **)(v0 + 104),  *(void **)(v0 + 112),  *(void **)(v0 + 120),  *(void **)(v0 + 128),  *(_BYTE *)(v0 + 136));

  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 152));
  return v0;
}

uint64_t SiriWorkflowRunner.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 192LL, 7LL);
}

uint64_t protocol witness for SiriWorkflowRunning.startExecution() in conformance SiriWorkflowRunner()
{
  return SiriWorkflowRunner.startExecution()();
}

void protocol witness for SiriWorkflowRunning.continueRunningOnAppLaunch() in conformance SiriWorkflowRunner()
{
}

BOOL protocol witness for SiriWorkflowRunning.isLastStep() in conformance SiriWorkflowRunner()
{
  return SiriWorkflowRunner.isLastStep()();
}

uint64_t protocol witness for SiriWorkflowRunning.pauseShortcut() in conformance SiriWorkflowRunner()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_21BB6C);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for LocationProviding.getCurrentLocation() in conformance LocationProvider;
  return SiriWorkflowRunner.pauseShortcut()();
}

uint64_t AnonymousSiriWorkflowRunnerClientDelegate.continuation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin41AnonymousSiriWorkflowRunnerClientDelegate_continuation;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

void AnonymousSiriWorkflowRunnerClientDelegate.init(continuation:)(uint64_t a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v1);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  OUTLINED_FUNCTION_24_27(v5);
  v6.receiver = v1;
  v6.super_class = ObjectType;
  objc_msgSendSuper2(&v6, "init");
  OUTLINED_FUNCTION_57_4(a1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_5_30();
}

void AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:didFinishRunningWorkflowWithOutput:error:cancelled:)()
{
  char v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v22 = type metadata accessor for SiriWorkflowRunnerEvent(0LL);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_18_11();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation.YieldResult);
  OUTLINED_FUNCTION_41_25();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_38_14();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v13 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v13, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v14 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_39_24(v14))
  {
    uint64_t v15 = v10;
    uint64_t v16 = v8;
    char v17 = v6;
    uint64_t v18 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    *(_WORD *)uint64_t v18 = 0;
    OUTLINED_FUNCTION_47_1( &dword_0,  v0,  v4,  "#AnonymousSiriWorkflowRunnerClientDelegate didFinishRunningWorkflowWithOutput",  v18);
    uint64_t v19 = (uint64_t)v18;
    char v6 = v17;
    uint64_t v8 = v16;
    uint64_t v10 = v15;
    OUTLINED_FUNCTION_1_0(v19);
  }

  *(void *)uint64_t v1 = v10;
  *(void *)(v1 + 8) = v8;
  *(_BYTE *)(v1 + 16) = v6 & 1;
  swift_storeEnumTagMultiPayload(v1, v22, 8LL);
  id v20 = v10;
  swift_errorRetain(v8);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  OUTLINED_FUNCTION_48_19(v21);
  OUTLINED_FUNCTION_57_4(v3, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_24_0();
}

#error "1004C4: call analysis failed (funcsize=169)"
void static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20)
{
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  uint64_t v51;
  id v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  void (**v67)(uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  id v91;
  id v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  unsigned __int8 v102;
  uint64_t v103;
  uint64_t v104;
  os_log_s *v105;
  id v106;
  os_log_type_t v107;
  uint8_t *v108;
  void *v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  OUTLINED_FUNCTION_55_1();
  a19 = v23;
  a20 = v24;
  uint64_t v26 = v25;
  id v28 = v27;
  unint64_t v30 = v29;
  v117 = v31;
  id v32 = type metadata accessor for URL(0LL);
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  OUTLINED_FUNCTION_51_22();
  uint64_t v34 = OUTLINED_FUNCTION_45_20();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v35);
  OUTLINED_FUNCTION_38_24();
  unint64_t v37 = __chkstk_darwin(v36);
  uint64_t v39 = (uint64_t *)((char *)&v113 - v38);
  __chkstk_darwin(v37);
  v116 = (uint64_t)&v113 - v40;
  id v41 = objc_opt_self(&OBJC_CLASS___WFSiriSpeakTextRequest);
  if (OUTLINED_FUNCTION_8_43(v41))
  {
    uint64_t v42 = OUTLINED_FUNCTION_46_25();
    uint64_t v43 = OUTLINED_FUNCTION_28_19((uint64_t)v42, "utterance");
    OUTLINED_FUNCTION_58_18((uint64_t)v43);
    OUTLINED_FUNCTION_38_11();

    uint64_t v44 = OUTLINED_FUNCTION_1_32((uint64_t)&unk_1FB3E0);
    *(void *)(v44 + 16) = v28;
    *(void *)(v44 + 24) = v26;
    *uint64_t v39 = v21;
    v39[1] = v32;
    v39[2] = (uint64_t)partial apply for closure #1 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:);
    v39[3] = v44;
    id v45 = (uint64_t)v39;
    id v46 = v34;
    uint64_t v47 = 1LL;
LABEL_3:
    swift_storeEnumTagMultiPayload(v45, v46, v47);
    uint64_t v21 = (uint64_t)v39;
LABEL_11:
    uint64_t v70 = v116;
    uint64_t v69 = v117;
    outlined init with take of SiriWorkflowRunnerEvent(v21, v116);
    outlined init with take of SiriWorkflowRunnerEvent(v70, v69);
    __swift_storeEnumTagSinglePayload(v69, 0LL, 1LL, v34);
    swift_retain(v26);
    goto LABEL_12;
  }

  uint64_t v114 = v26;
  v115 = v34;
  unint64_t v48 = objc_opt_self(&OBJC_CLASS___WFSiriOpenURLRequest);
  if (OUTLINED_FUNCTION_8_43(v48))
  {
    id v49 = OUTLINED_FUNCTION_46_25();
    uint64_t v50 = OUTLINED_FUNCTION_28_19((uint64_t)v49, "URL");
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v21, v22, v32);
    id v52 = OUTLINED_FUNCTION_28_19(v51, "bundleIdentifier");
    if (v52)
    {
      uint64_t v53 = v52;
      os_log_type_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v56 = v55;
    }

    else
    {

      os_log_type_t v54 = 0LL;
      id v56 = 0LL;
    }

    uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, bundleId: String?, completionHandler: ()));
    uint64_t v66 = (uint64_t *)(v21 + *(int *)(v65 + 48));
    uint64_t v67 = (void (**)(uint64_t, uint64_t))(v21 + *(int *)(v65 + 64));
    *uint64_t v66 = v54;
    v66[1] = v56;
    id v68 = OUTLINED_FUNCTION_1_32((uint64_t)&unk_1FB3B8);
    uint64_t v26 = v114;
    uint64_t v34 = v115;
    *(void *)(v68 + 16) = v28;
    *(void *)(v68 + 24) = v26;
    *uint64_t v67 = partial apply for closure #2 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:);
    v67[1] = (void (*)(uint64_t, uint64_t))v68;
    swift_storeEnumTagMultiPayload(v21, v34, 2LL);
    goto LABEL_11;
  }

  uint64_t v57 = objc_opt_self(&OBJC_CLASS___WFSiriUserActivityRequest);
  if (OUTLINED_FUNCTION_8_43(v57))
  {
    unint64_t v58 = OUTLINED_FUNCTION_46_25();
    unint64_t v59 = OUTLINED_FUNCTION_28_19((uint64_t)v58, "userActivity");
    id v60 = OUTLINED_FUNCTION_28_19((uint64_t)v59, "bundleIdentifier");
    uint64_t v61 = OUTLINED_FUNCTION_58_18((uint64_t)v60);
    id v63 = v62;

    uint64_t v64 = OUTLINED_FUNCTION_1_32((uint64_t)&unk_1FB390);
    uint64_t v26 = v114;
    uint64_t v34 = v115;
    *(void *)(v64 + 16) = v28;
    *(void *)(v64 + 24) = v26;
    *uint64_t v39 = (uint64_t)v59;
    v39[1] = v61;
    v39[2] = v63;
    v39[3] = (uint64_t)partial apply for closure #3 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:);
    v39[4] = v64;
    id v45 = (uint64_t)v39;
    id v46 = v34;
    uint64_t v47 = 3LL;
    goto LABEL_3;
  }

  uint64_t v71 = objc_opt_self(&OBJC_CLASS___WFSiriKitIntentRequest);
  Swift::String v72 = (void *)OUTLINED_FUNCTION_8_43(v71);
  uint64_t v73 = v28;
  if (v72)
  {
    uint64_t v74 = [v72 intent];
    os_log_type_t v75 = OUTLINED_FUNCTION_1_32((uint64_t)&unk_1FB368);
    uint64_t v26 = v114;
    uint64_t v34 = v115;
    *(void *)(v75 + 16) = v28;
    *(void *)(v75 + 24) = v26;
    *uint64_t v39 = (uint64_t)v74;
    v39[1] = (uint64_t)partial apply for closure #4 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:);
    v39[2] = v75;
    id v45 = (uint64_t)v39;
    id v46 = v34;
    uint64_t v47 = 4LL;
    goto LABEL_3;
  }

  uint64_t v76 = objc_opt_self(&OBJC_CLASS___WFSiriDialogRequest);
  uint64_t v77 = (void *)OUTLINED_FUNCTION_8_43(v76);
  uint64_t v26 = v114;
  if (v77)
  {
    uint64_t v78 = [v77 dialogRequest];
    unint64_t v79 = OUTLINED_FUNCTION_1_32((uint64_t)&unk_1FB340);
    *(void *)(v79 + 16) = v28;
    *(void *)(v79 + 24) = v26;
    *uint64_t v39 = (uint64_t)v78;
    v39[1] = (uint64_t)partial apply for closure #5 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:);
    v39[2] = v79;
    id v45 = OUTLINED_FUNCTION_18_30();
    uint64_t v47 = 5LL;
    goto LABEL_3;
  }

  unint64_t v80 = objc_opt_self(&OBJC_CLASS___WFSiriOpenInteractionRequest);
  uint64_t v81 = (void *)OUTLINED_FUNCTION_8_43(v80);
  if (v81)
  {
    uint64_t v82 = [v81 interaction];
    uint64_t v83 = OUTLINED_FUNCTION_1_32((uint64_t)&unk_1FB318);
    *(void *)(v83 + 16) = v28;
    *(void *)(v83 + 24) = v26;
    *uint64_t v39 = (uint64_t)v82;
    v39[1] = (uint64_t)partial apply for closure #6 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:);
    v39[2] = v83;
    id v45 = OUTLINED_FUNCTION_18_30();
    uint64_t v47 = 6LL;
    goto LABEL_3;
  }

  uint64_t v84 = objc_opt_self(&OBJC_CLASS___WFSiriOpenAppRequest);
  if (OUTLINED_FUNCTION_8_43(v84))
  {
    unint64_t v85 = OUTLINED_FUNCTION_46_25();
    unint64_t v86 = OUTLINED_FUNCTION_28_19((uint64_t)v85, "bundleIdentifier");
    OUTLINED_FUNCTION_58_18((uint64_t)v86);
    OUTLINED_FUNCTION_38_11();

    uint64_t v87 = OUTLINED_FUNCTION_1_32((uint64_t)&unk_1FB2F0);
    *(void *)(v87 + 16) = v28;
    *(void *)(v87 + 24) = v26;
    *uint64_t v39 = v21;
    v39[1] = v32;
    v39[2] = (uint64_t)partial apply for closure #7 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:);
    v39[3] = v87;
    id v45 = OUTLINED_FUNCTION_18_30();
    uint64_t v47 = 7LL;
    goto LABEL_3;
  }

  uint64_t v88 = objc_opt_self(&OBJC_CLASS___WFSiriLinkRequest);
  unint64_t v89 = OUTLINED_FUNCTION_8_43(v88);
  if (v89)
  {
    uint64_t v90 = (void *)v89;
    uint64_t v91 = v30;
    unint64_t v92 = [v90 action];
    uint64_t v93 = [v90 bundleIdentifier];
    uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v96 = v95;

    LOBYTE(v90) = [v90 showWhenRun];
    uint64_t v97 = OUTLINED_FUNCTION_1_32((uint64_t)&unk_1FB2C8);
    *(void *)(v97 + 16) = v73;
    *(void *)(v97 + 24) = v26;
    *uint64_t v39 = (uint64_t)v92;
    v39[1] = v94;
    v39[2] = v96;
    *((_BYTE *)v39 + 24) = (_BYTE)v90;
    v39[4] = (uint64_t)partial apply for closure #8 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:);
    uint64_t v39[5] = v97;
    id v45 = OUTLINED_FUNCTION_18_30();
    uint64_t v47 = 0LL;
    goto LABEL_3;
  }

  unint64_t v98 = objc_opt_self(&OBJC_CLASS___WFSiriPunchOutRequest);
  if (OUTLINED_FUNCTION_8_43(v98))
  {
    id v99 = OUTLINED_FUNCTION_1_32((uint64_t)&unk_1FB2A0);
    *(void *)(v99 + 16) = v28;
    *(void *)(v99 + 24) = v26;
    *uint64_t v39 = (uint64_t)partial apply for closure #9 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:);
    v39[1] = v99;
    id v45 = OUTLINED_FUNCTION_18_30();
    uint64_t v47 = 9LL;
    goto LABEL_3;
  }

  uint64_t v100 = objc_opt_self(&OBJC_CLASS___WFSiriLocationAuthorizationRequest);
  uint64_t v101 = (void *)OUTLINED_FUNCTION_8_43(v100);
  if (v101)
  {
    uint64_t v102 = [v101 needsPreciseLocation];
    uint64_t v103 = OUTLINED_FUNCTION_1_32((uint64_t)&unk_1FB278);
    *(void *)(v103 + 16) = v28;
    *(void *)(v103 + 24) = v26;
    *(_BYTE *)uint64_t v39 = v102;
    v39[1] = (uint64_t)partial apply for closure #10 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:);
    v39[2] = v103;
    id v45 = OUTLINED_FUNCTION_18_30();
    uint64_t v47 = 11LL;
    goto LABEL_3;
  }

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v104 = OUTLINED_FUNCTION_48();
  uint64_t v105 = (os_log_s *)__swift_project_value_buffer(v104, (uint64_t)static Logger.voiceCommands);
  uint64_t v106 = v30;
  Logger.logObject.getter(v106);
  id v107 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_21_6(v107))
  {
    uint64_t v108 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v109 = (void *)OUTLINED_FUNCTION_38(8LL);
    *(_DWORD *)uint64_t v108 = 138412290;
    v118 = v106;
    uint64_t v110 = v106;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &a9, v108 + 4);
    *uint64_t v109 = v106;

    OUTLINED_FUNCTION_31_2( &dword_0,  v105,  (os_log_type_t)v39,  "#AnonymousSiriWorkflowRunnerClientDelegate unknown request=%@",  v108);
    uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_30_3((uint64_t)v109, v112, v111);
    OUTLINED_FUNCTION_1_0((uint64_t)v109);
    OUTLINED_FUNCTION_1_0((uint64_t)v108);
  }

  else
  {
  }

  __swift_storeEnumTagSinglePayload(v117, 1LL, 1LL, v115);
LABEL_12:
  OUTLINED_FUNCTION_24_0();
}

void AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:didStartActionWithIdentifier:)()
{
  uint64_t v4 = v0;
  unint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation.YieldResult);
  OUTLINED_FUNCTION_41_25();
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_46_11();
  uint64_t v32 = type metadata accessor for SiriWorkflowRunnerEvent(0LL);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_38_24();
  __chkstk_darwin(v12);
  os_log_type_t v14 = (uint64_t *)((char *)&v27 - v13);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v15 = OUTLINED_FUNCTION_48();
  uint64_t v16 = (os_log_s *)__swift_project_value_buffer(v15, (uint64_t)static Logger.voiceCommands);
  uint64_t v17 = swift_bridgeObjectRetain_n(v6, 2LL);
  Logger.logObject.getter(v17);
  os_log_type_t v18 = OUTLINED_FUNCTION_58();
  if (os_log_type_enabled(v16, v18))
  {
    uint64_t v29 = v4;
    uint64_t v19 = OUTLINED_FUNCTION_38(12LL);
    uint64_t v31 = v9;
    id v20 = (uint8_t *)v19;
    uint64_t v21 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v30 = v2;
    uint64_t v22 = v21;
    uint64_t v34 = v21;
    uint64_t v28 = v3;
    *(_DWORD *)id v20 = 136315138;
    OUTLINED_FUNCTION_9_9();
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v6, &v34);
    uint64_t v3 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v20 + 4);
    swift_bridgeObjectRelease_n(v6, 3LL);
    OUTLINED_FUNCTION_31_2(&dword_0, v16, v18, "#AnonymousSiriWorkflowRunnerClientDelegate started action %s", v20);
    OUTLINED_FUNCTION_30_3(v22, v23, (uint64_t)&type metadata for Any + 8);
    uint64_t v24 = v22;
    uint64_t v2 = v30;
    OUTLINED_FUNCTION_1_0(v24);
    uint64_t v25 = (uint64_t)v20;
    uint64_t v9 = v31;
    OUTLINED_FUNCTION_1_0(v25);
  }

  else
  {

    swift_bridgeObjectRelease_n(v6, 2LL);
  }

  *os_log_type_t v14 = v8;
  v14[1] = v6;
  swift_storeEnumTagMultiPayload(v14, v32, 12LL);
  outlined init with copy of SiriWorkflowRunnerEvent((uint64_t)v14, v3);
  OUTLINED_FUNCTION_9_9();
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  AsyncStream.Continuation.yield(_:)(v3, v26);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v9);
  outlined destroy of SiriWorkflowRunnerEvent((uint64_t)v14);
  OUTLINED_FUNCTION_24_0();
}

void closure #1 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)( uint64_t a1, void (*a2)(void))
{
  id v4 = objc_allocWithZone(&OBJC_CLASS___WFSiriSpeakTextResponse);
  swift_errorRetain(a1);
  @nonobjc WFSiriSpeakTextResponse.init(error:)(a1);
  id v6 = v5;
  a2();
}

void closure #2 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)( uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, Class *a5)
{
  id v7 = objc_allocWithZone(*a5);
  swift_errorRetain(a2);
  @nonobjc WFSiriSpeakTextResponse.init(error:)(a2);
  id v9 = v8;
  a3();
}

void closure #5 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)( uint64_t a1, void (*a2)(void))
{
  id v3 = [objc_allocWithZone(WFSiriDialogResponse) initWithDialogResponse:a1];
  a2();
}

void closure #4 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)( void *a1, uint64_t a2, void (*a3)(void), uint64_t a4, Class *a5, SEL *a6)
{
  id v10 = objc_allocWithZone(*a5);
  id v11 = a1;
  swift_errorRetain(a2);
  id v12 = @nonobjc WFSiriKitIntentResponse.init(interaction:andError:)(a1, a2, a6);
  a3();
}

void closure #9 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)( char a1, void (*a2)(void))
{
  id v3 = [objc_allocWithZone(WFSiriPunchOutResponse) initWithShouldPunchOut:a1 & 1];
  a2();
}

void closure #10 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)( char a1, uint64_t a2, void (*a3)(void))
{
  id v6 = objc_allocWithZone(&OBJC_CLASS___WFSiriLocationAuthorizationResponse);
  if (a2)
  {
    swift_errorRetain(a2);
    @nonobjc WFSiriSpeakTextResponse.init(error:)(a2);
  }

  else
  {
    id v7 = [v6 initWithDidAuthorize:a1 & 1];
  }

  uint64_t v8 = v7;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain(a2);
  id v10 = v8;
  swift_errorRetain(a2);
  id v11 = v10;
  id v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc(28LL, -1LL);
    uint64_t v25 = swift_slowAlloc(64LL, -1LL);
    uint64_t v28 = v25;
    *(_DWORD *)uint64_t v14 = 136315650;
    char v24 = a1;
    id v15 = v11;
    uint64_t v26 = a3;
    id v16 = [v15 description];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;

    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v14 + 4);

    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 1024;
    LODWORD(v27) = v24 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, (char *)&v27 + 4, v14 + 14);
    *(_WORD *)(v14 + 18) = 2080;
    uint64_t v27 = a2;
    swift_errorRetain(a2);
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
    uint64_t v21 = String.init<A>(describing:)(&v27, v20);
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v14 + 20);
    a3 = v26;
    swift_bridgeObjectRelease();
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl( &dword_0,  v12,  v13,  "#AnonymousSiriWorkflowRunnerClientDelegate setting WFSiriLocationAuthorizationResponse=%s; didAuthorize=%{BOOL}d; error=%s",
      (uint8_t *)v14,
      0x1Cu);
    swift_arrayDestroy(v25, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }

  id v23 = v11;
  a3();
}

void AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:executeLinkAction:inApplication:completionHandler:)()
{
  id v7 = v6;
  type metadata accessor for SiriWorkflowRunnerEvent(0LL);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_27_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  OUTLINED_FUNCTION_29_21();
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_21_23(v10, v22);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation.YieldResult);
  uint64_t v12 = OUTLINED_FUNCTION_44_15(v11);
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_22_23(v13, v23);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v14 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v14, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v15 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_45_0(v15))
  {
    id v16 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_10_32(v16);
    OUTLINED_FUNCTION_47_1( &dword_0,  v1,  v0,  "#AnonymousSiriWorkflowRunnerClientDelegate unexpected request executeLinkAction, this method is being deprecated.",  v7);
    uint64_t v17 = (uint64_t)v7;
    id v7 = v5;
    uint64_t v3 = v4;
    uint64_t v4 = v2;
    OUTLINED_FUNCTION_1_0(v17);
  }

  OUTLINED_FUNCTION_17_33(OBJC_IVAR____TtC18SiriLinkFlowPlugin41AnonymousSiriWorkflowRunnerClientDelegate_continuation);
  if (v4)
  {
    uint64_t v18 = OUTLINED_FUNCTION_1_32((uint64_t)&unk_1FB430);
    *(void *)(v18 + 16) = v4;
    *(void *)(v18 + 24) = v3;
  }

  uint64_t v19 = OUTLINED_FUNCTION_1_32((uint64_t)&unk_1FB408);
  uint64_t v20 = OUTLINED_FUNCTION_37_24(v19);
  OUTLINED_FUNCTION_34_26( v20,  (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed LNActionOutput?, @in_guaranteed Error?) -> (@out ()));
  OUTLINED_FUNCTION_27_24();
  uint64_t v21 = v7;
  OUTLINED_FUNCTION_16_39();
  OUTLINED_FUNCTION_25_29();
  OUTLINED_FUNCTION_33_20();
  OUTLINED_FUNCTION_24_0();
}

void AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:speakTextWithUtterance:completionHandler:)()
{
  uint64_t v23 = v4;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = type metadata accessor for SiriWorkflowRunnerEvent(0LL);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_18_11();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation.YieldResult);
  OUTLINED_FUNCTION_57_18();
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_27_18();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v14 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v14, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v15 = OUTLINED_FUNCTION_73();
  if (os_log_type_enabled(v0, v15))
  {
    uint64_t v16 = v8;
    uint64_t v17 = v6;
    uint64_t v18 = v10;
    uint64_t v19 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    *(_WORD *)uint64_t v19 = 0;
    OUTLINED_FUNCTION_47_1( &dword_0,  v0,  v15,  "#AnonymousSiriWorkflowRunnerClientDelegate unexpected request speakTextWithUtterance",  v19);
    uint64_t v20 = (uint64_t)v19;
    uint64_t v10 = v18;
    uint64_t v6 = v17;
    uint64_t v8 = v16;
    OUTLINED_FUNCTION_1_0(v20);
  }

  uint64_t v21 = OUTLINED_FUNCTION_1_32((uint64_t)&unk_1FB458);
  *(void *)(v21 + 16) = v23;
  *(void *)(v21 + 24) = v6;
  *uint64_t v1 = v10;
  v1[1] = v8;
  v1[2] = partial apply for closure #1 in AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:speakTextWithUtterance:completionHandler:);
  v1[3] = v21;
  swift_storeEnumTagMultiPayload(v1, v11, 1LL);
  swift_bridgeObjectRetain(v8);
  OUTLINED_FUNCTION_10_6();
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  AsyncStream.Continuation.yield(_:)(v1, v22);
  OUTLINED_FUNCTION_57_4(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_24_0();
}

void AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:open:withBundleIdentifier:completionHandler:)()
{
  uint64_t v25 = v4;
  uint64_t v26 = v5;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v24 = v10;
  uint64_t v11 = OUTLINED_FUNCTION_45_20();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_53_1();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation.YieldResult);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_18_9();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v15 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v15, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v16 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_39_24(v16))
  {
    uint64_t v17 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    *(_WORD *)uint64_t v17 = 0;
    OUTLINED_FUNCTION_47_1( &dword_0,  v0,  v3,  "#AnonymousSiriWorkflowRunnerClientDelegate unexpected request open url",  v17);
    OUTLINED_FUNCTION_1_0((uint64_t)v17);
  }

  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, bundleId: String?, completionHandler: ()));
  uint64_t v19 = (void *)(v1 + *(int *)(v18 + 48));
  uint64_t v20 = (void (**)(char))(v1 + *(int *)(v18 + 64));
  uint64_t v21 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16LL))(v1, v24, v21);
  *uint64_t v19 = v25;
  v19[1] = v9;
  uint64_t v22 = OUTLINED_FUNCTION_1_32((uint64_t)&unk_1FB480);
  *(void *)(v22 + 16) = v7;
  *(void *)(v22 + 24) = v26;
  uint8_t *v20 = partial apply for closure #1 in AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:open:withBundleIdentifier:completionHandler:);
  v20[1] = (void (*)(char))v22;
  swift_storeEnumTagMultiPayload(v1, v11, 2LL);
  OUTLINED_FUNCTION_9_9();
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v7, v26);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  OUTLINED_FUNCTION_49_18(v23);
  OUTLINED_FUNCTION_9_8(v2, *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
  OUTLINED_FUNCTION_24_0();
}

void AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:handle:withBundleIdentifier:completionHandler:)()
{
  uint64_t v29 = v7;
  uint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for SiriWorkflowRunnerEvent(0LL);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_27_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  OUTLINED_FUNCTION_29_21();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_21_23(v13, v24);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation.YieldResult);
  uint64_t v27 = *(void *)(v14 - 8);
  uint64_t v28 = v14;
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_22_23(v15, v25);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v16 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v16, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v17 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_45_0(v17))
  {
    uint64_t v18 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_10_32(v18);
    OUTLINED_FUNCTION_47_1( &dword_0,  v1,  v0,  "#AnonymousSiriWorkflowRunnerClientDelegate unexpected request handle userActivity",  v9);
    uint64_t v19 = (uint64_t)v9;
    uint64_t v9 = v6;
    uint64_t v6 = v3;
    os_log_type_t v3 = v5;
    uint64_t v5 = v2;
    uint64_t v10 = v26;
    OUTLINED_FUNCTION_1_0(v19);
  }

  OUTLINED_FUNCTION_17_33(OBJC_IVAR____TtC18SiriLinkFlowPlugin41AnonymousSiriWorkflowRunnerClientDelegate_continuation);
  if (v5)
  {
    uint64_t v20 = OUTLINED_FUNCTION_1_32((uint64_t)&unk_1FB4D0);
    *(void *)(v20 + 16) = v5;
    *(void *)(v20 + 24) = v3;
    uint64_t v21 = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
  }

  else
  {
    uint64_t v20 = 0LL;
    uint64_t v21 = specialized thunk for @escaping @callee_guaranteed (@in_guaranteed Bool, @guaranteed Error?) -> ();
  }

  uint64_t v22 = OUTLINED_FUNCTION_1_32((uint64_t)&unk_1FB4A8);
  *(void *)(v22 + 16) = v21;
  *(void *)(v22 + 24) = v20;
  *uint64_t v4 = v9;
  v4[1] = v29;
  v4[2] = v6;
  v4[3] = (uint8_t *)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool, @in_guaranteed Error?) -> (@out ());
  v4[4] = (uint8_t *)v22;
  swift_storeEnumTagMultiPayload(v4, v10, 3LL);
  OUTLINED_FUNCTION_27_24();
  uint64_t v23 = v9;
  OUTLINED_FUNCTION_16_39();
  OUTLINED_FUNCTION_25_29();
  (*(void (**)(void *, uint64_t))(v27 + 8))(v21, v28);
  OUTLINED_FUNCTION_24_0();
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer specialized thunk for @escaping @callee_guaranteed (@in_guaranteed Bool, @guaranteed Error?) -> ()( unsigned __int8 *a1)
{
  return CustomIntentDisambiguationItemContainer.init(items:)((Swift::OpaquePointer)*a1);
}

void AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:execute:completionHandler:)()
{
  uint64_t v6 = v0;
  uint64_t v26 = v8;
  uint64_t v27 = v7;
  uint64_t v10 = v9;
  uint64_t v25 = type metadata accessor for SiriWorkflowRunnerEvent(0LL);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_53_1();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  OUTLINED_FUNCTION_41_25();
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_38_14();
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation.YieldResult);
  uint64_t v14 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  OUTLINED_FUNCTION_51_22();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v15 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v15, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v16 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_31_0(v16))
  {
    os_log_type_t v17 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    *(_WORD *)os_log_type_t v17 = 0;
    OUTLINED_FUNCTION_47_1( &dword_0,  v0,  v1,  "#AnonymousSiriWorkflowRunnerClientDelegate unexpected request execute intent",  v17);
    uint64_t v18 = (uint64_t)v17;
    uint64_t v6 = v0;
    OUTLINED_FUNCTION_1_0(v18);
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))( v4,  (uint64_t)v6 + OBJC_IVAR____TtC18SiriLinkFlowPlugin41AnonymousSiriWorkflowRunnerClientDelegate_continuation,  v12);
  if (v10)
  {
    uint64_t v19 = OUTLINED_FUNCTION_1_32((uint64_t)&unk_1FB520);
    uint64_t v20 = v26;
    *(void *)(v19 + 16) = v10;
    *(void *)(v19 + 24) = v26;
    uint64_t v21 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed INInteraction?, @guaranteed Error?) -> ();
  }

  else
  {
    uint64_t v19 = 0LL;
    uint64_t v21 = specialized thunk for @escaping @callee_guaranteed (@in_guaranteed INInteraction?, @guaranteed Error?) -> ();
    uint64_t v20 = v26;
  }

  uint64_t v22 = OUTLINED_FUNCTION_1_32((uint64_t)&unk_1FB4F8);
  *(void *)(v22 + 16) = v21;
  *(void *)(v22 + 24) = v19;
  *uint64_t v2 = v27;
  v2[1] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed LNActionOutput?, @in_guaranteed Error?) -> (@out ());
  v2[2] = v22;
  swift_storeEnumTagMultiPayload(v2, v25, 4LL);
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v10, v20);
  id v23 = v27;
  AsyncStream.Continuation.yield(_:)(v2, v12);
  OUTLINED_FUNCTION_9_8(v4, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v5, v24);
  OUTLINED_FUNCTION_24_0();
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer specialized thunk for @escaping @callee_guaranteed (@in_guaranteed INInteraction?, @guaranteed Error?) -> ()( Swift::OpaquePointer *a1)
{
  return CustomIntentDisambiguationItemContainer.init(items:)((Swift::OpaquePointer)a1->_rawValue);
}

void AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:show:completionHandler:)()
{
}

{
  os_log_s *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  os_log_s *v30;
  OUTLINED_FUNCTION_55_1();
  uint64_t v3 = v2;
  uint64_t v28 = v4;
  uint64_t v30 = v0;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v29 = OUTLINED_FUNCTION_45_20();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_53_1();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation.YieldResult);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  os_log_type_t v16 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v16, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v17 = OUTLINED_FUNCTION_73();
  if (os_log_type_enabled(v0, v17))
  {
    uint64_t v18 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    uint64_t v27 = v8;
    uint64_t v19 = v10;
    uint64_t v20 = v6;
    uint64_t v21 = v3;
    uint64_t v22 = v18;
    *(_WORD *)uint64_t v18 = 0;
    OUTLINED_FUNCTION_47_1(&dword_0, v0, v17, v28, v18);
    id v23 = (uint64_t)v22;
    uint64_t v3 = v21;
    uint64_t v6 = v20;
    uint64_t v10 = v19;
    uint64_t v8 = v27;
    OUTLINED_FUNCTION_1_0(v23);
  }

  uint64_t v24 = v29;
  *os_log_type_t v1 = v10;
  v1[1] = v8;
  v1[2] = v6;
  swift_storeEnumTagMultiPayload(v1, v24, v3);
  uint64_t v25 = v10;
  OUTLINED_FUNCTION_10_6();
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  AsyncStream.Continuation.yield(_:)(v1, v26);
  OUTLINED_FUNCTION_9_8((uint64_t)v15, *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
  OUTLINED_FUNCTION_24_0();
}

void AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:openInteractionInApp:completionHandler:)()
{
}

void AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:openApp:completionHandler:)()
{
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v22 = v11;
  uint64_t v23 = type metadata accessor for SiriWorkflowRunnerEvent(0LL);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_18_11();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation.YieldResult);
  OUTLINED_FUNCTION_57_18();
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_38_14();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v14 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v14, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v15 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_21_6(v15))
  {
    uint64_t v16 = v10;
    uint64_t v17 = v6;
    uint64_t v18 = v8;
    uint64_t v19 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    *(_WORD *)uint64_t v19 = 0;
    OUTLINED_FUNCTION_47_1( &dword_0,  v0,  v2,  "#AnonymousSiriWorkflowRunnerClientDelegate unexpected request openApp",  v19);
    uint64_t v20 = (uint64_t)v19;
    uint64_t v8 = v18;
    uint64_t v6 = v17;
    uint64_t v10 = v16;
    OUTLINED_FUNCTION_1_0(v20);
  }

  *os_log_type_t v1 = v22;
  v1[1] = v10;
  v1[2] = v8;
  v1[3] = v6;
  swift_storeEnumTagMultiPayload(v1, v23, 7LL);
  swift_bridgeObjectRetain(v10);
  OUTLINED_FUNCTION_10_6();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  OUTLINED_FUNCTION_48_19(v21);
  OUTLINED_FUNCTION_57_4(v3, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  OUTLINED_FUNCTION_24_0();
}

void AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:executeLinkAction:inApplication:withNameOverride:completionHandler:)()
{
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  type metadata accessor for SiriWorkflowRunnerEvent(0LL);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_27_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  OUTLINED_FUNCTION_29_21();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_21_23(v13, v25);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation.YieldResult);
  uint64_t v15 = OUTLINED_FUNCTION_44_15(v14);
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_22_23(v16, v26);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v17 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v17, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v18 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_45_0(v18))
  {
    uint64_t v19 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_10_32(v19);
    OUTLINED_FUNCTION_47_1( &dword_0,  v1,  v0,  "#AnonymousSiriWorkflowRunnerClientDelegate unexpected request executeLinkAction with name override",  v10);
    uint64_t v20 = (uint64_t)v10;
    uint64_t v10 = v8;
    uint64_t v4 = v6;
    uint64_t v6 = v2;
    OUTLINED_FUNCTION_1_0(v20);
  }

  OUTLINED_FUNCTION_17_33(OBJC_IVAR____TtC18SiriLinkFlowPlugin41AnonymousSiriWorkflowRunnerClientDelegate_continuation);
  if (v6)
  {
    uint64_t v21 = OUTLINED_FUNCTION_1_32((uint64_t)&unk_1FB570);
    *(void *)(v21 + 16) = v6;
    *(void *)(v21 + 24) = v4;
  }

  uint64_t v22 = OUTLINED_FUNCTION_1_32((uint64_t)&unk_1FB548);
  uint64_t v23 = OUTLINED_FUNCTION_37_24(v22);
  OUTLINED_FUNCTION_34_26( v23,  (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed LNActionOutput?, @in_guaranteed Error?) -> (@out ()));
  OUTLINED_FUNCTION_27_24();
  uint64_t v24 = v10;
  OUTLINED_FUNCTION_16_39();
  OUTLINED_FUNCTION_25_29();
  OUTLINED_FUNCTION_33_20();
  OUTLINED_FUNCTION_24_0();
}

void AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:punchOutRequestedWithCompletionHandler:)()
{
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for SiriWorkflowRunnerEvent(0LL);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_46_11();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation.YieldResult);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_38_14();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v11 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v11, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v12 = OUTLINED_FUNCTION_73();
  if (os_log_type_enabled(v0, v12))
  {
    uint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    *(_WORD *)uint64_t v13 = 0;
    OUTLINED_FUNCTION_47_1( &dword_0,  v0,  v12,  "#AnonymousSiriWorkflowRunnerClientDelegate unexpected request punchOutRequested",  v13);
    OUTLINED_FUNCTION_1_0((uint64_t)v13);
  }

  *os_log_type_t v1 = v6;
  v1[1] = v4;
  swift_storeEnumTagMultiPayload(v1, v7, 9LL);
  OUTLINED_FUNCTION_10_6();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  AsyncStream.Continuation.yield(_:)(v1, v14);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, v9);
  OUTLINED_FUNCTION_24_0();
}

void AnonymousSiriWorkflowRunnerClientDelegate.init()()
{
}

uint64_t type metadata accessor for SiriWorkflowRunnerEvent(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for SiriWorkflowRunnerEvent,  (uint64_t)&nominal type descriptor for SiriWorkflowRunnerEvent);
}

uint64_t partial apply for closure #1 in SiriWorkflowRunner.startExecution()(uint64_t a1)
{
  return closure #1 in SiriWorkflowRunner.startExecution()(a1, v1);
}

id @nonobjc WFSiriKitIntentResponse.init(interaction:andError:)(void *a1, uint64_t a2, SEL *a3)
{
  if (a2)
  {
    uint64_t v7 = (void *)_convertErrorToNSError(_:)(a2);
    swift_errorRelease(a2);
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  id v8 = objc_msgSend(v3, *a3, a1, v7);

  return v8;
}

void @nonobjc WFSiriSpeakTextResponse.init(error:)(uint64_t a1)
{
  if (a1)
  {
    uint64_t v3 = (void *)_convertErrorToNSError(_:)(a1);
    swift_errorRelease(a1);
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  [v1 initWithError:v3];

  OUTLINED_FUNCTION_2();
}

uint64_t outlined destroy of SiriWorkflowRunnerEvent?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriWorkflowRunnerEvent?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t outlined init with take of SiriWorkflowRunnerEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SiriWorkflowRunnerEvent(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of SiriWorkflowRunnerEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SiriWorkflowRunnerEvent(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SiriWorkflowRunnerEvent(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SiriWorkflowRunnerEvent(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void partial apply for closure #10 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)( char a1, uint64_t a2)
{
}

void partial apply for closure #9 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)( char a1)
{
}

void partial apply for closure #8 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)( void *a1, uint64_t a2)
{
}

uint64_t sub_102668()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void partial apply for closure #7 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)( uint64_t a1, uint64_t a2)
{
}

void partial apply for closure #6 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)( uint64_t a1, uint64_t a2)
{
}

void partial apply for closure #5 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)( uint64_t a1)
{
}

void partial apply for closure #4 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)( void *a1, uint64_t a2)
{
}

void partial apply for closure #3 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)( uint64_t a1, uint64_t a2)
{
}

void partial apply for closure #2 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)( uint64_t a1, uint64_t a2)
{
}

void partial apply for closure #1 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)( uint64_t a1)
{
}

void partial apply for closure #1 in AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:speakTextWithUtterance:completionHandler:)( uint64_t a1)
{
  (*(void (**)(BOOL, uint64_t))(v1 + 16))(a1 == 0, a1);
  OUTLINED_FUNCTION_1();
}

uint64_t sub_102770()
{
  if (*(void *)(v0 + 16)) {
    swift_release(*(void *)(v0 + 24));
  }
  return swift_deallocObject(v0, 32LL, 7LL);
}

void partial apply for closure #1 in AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:open:withBundleIdentifier:completionHandler:)( char a1)
{
  uint64_t v2 = *(void (**)(void))(v1 + 16);
  if (v2) {
    v2(a1 & 1);
  }
  OUTLINED_FUNCTION_1();
}

uint64_t outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_retain(a2);
  }
  return result;
}

void partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool, @in_guaranteed Error?) -> (@out ())( char a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(char *, uint64_t *))(v2 + 16);
  char v5 = a1;
  uint64_t v4 = a2;
  v3(&v5, &v4);
  OUTLINED_FUNCTION_73_3();
}

void partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ()( unsigned __int8 *a1, void *a2)
{
}

void partial apply for thunk for @escaping @callee_guaranteed (@guaranteed INInteraction?, @guaranteed Error?) -> ()( void *a1, void *a2)
{
}

void partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed LNActionOutput?, @in_guaranteed Error?) -> (@out ())( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t *, uint64_t *))(v2 + 16);
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  v3(&v5, &v4);
  OUTLINED_FUNCTION_73_3();
}

uint64_t initializeBufferWithCopyOfBuffer for SiriWorkflowRunnerEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) == 0)
  {
    uint64_t v5 = (char *)&loc_1028CC + 4 * byte_188688[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }

  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = v6 + ((v4 + 16LL) & ~(unint64_t)v4);
  swift_retain(v6);
  return v7;
}

uint64_t destroy for SiriWorkflowRunnerEvent(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
    case 3:

      swift_bridgeObjectRelease();
      goto LABEL_7;
    case 1:
    case 7:
    case 10:
      swift_bridgeObjectRelease();
      goto LABEL_7;
    case 2:
      uint64_t v4 = type metadata accessor for URL(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, bundleId: String?, completionHandler: ()));
      swift_bridgeObjectRelease();
      goto LABEL_7;
    case 4:
    case 5:
    case 6:

      goto LABEL_7;
    case 8:

      return swift_errorRelease(*(void *)(a1 + 8));
    case 9:
    case 11:
LABEL_7:
      uint64_t result = swift_release();
      break;
    case 12:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }

  return result;
}

void initializeWithCopy for SiriWorkflowRunnerEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (char *)sub_102D24 + 4 * byte_1886A2[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }

uint64_t sub_102D24()
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(v2 + 8);
  *(void *)uint64_t v0 = *(void *)v2;
  *(void *)(v0 + 8) = v4;
  uint64_t v5 = *(void *)(v2 + 16);
  *(void *)(v0 + 16) = v5;
  *(_BYTE *)(v0 + 24) = *(_BYTE *)(v2 + 24);
  uint64_t v6 = *(void *)(v2 + 32);
  uint64_t v7 = *(void *)(v2 + 40);
  *(void *)(v0 + 32) = v6;
  *(void *)(v0 + 40) = v7;
  id v8 = v3;
  swift_bridgeObjectRetain(v5);
  swift_retain(v7);
  swift_storeEnumTagMultiPayload(v0, v1, 0LL);
  return v0;
}

uint64_t assignWithCopy for SiriWorkflowRunnerEvent(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    outlined destroy of SiriWorkflowRunnerEvent(result);
    uint64_t v5 = (char *)&loc_103050 + 4 * byte_1886AF[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }

  return result;
}

char *initializeWithTake for SiriWorkflowRunnerEvent(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
  {
    uint64_t v6 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, bundleId: String?, completionHandler: ()));
    *(_OWORD *)&a1[*(int *)(v7 + 48)] = *(_OWORD *)&a2[*(int *)(v7 + 48)];
    *(_OWORD *)&a1[*(int *)(v7 + 64)] = *(_OWORD *)&a2[*(int *)(v7 + 64)];
    swift_storeEnumTagMultiPayload(a1, a3, 2LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

char *assignWithTake for SiriWorkflowRunnerEvent(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of SiriWorkflowRunnerEvent((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
    {
      uint64_t v6 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, bundleId: String?, completionHandler: ()));
      *(_OWORD *)&a1[*(int *)(v7 + 48)] = *(_OWORD *)&a2[*(int *)(v7 + 48)];
      *(_OWORD *)&a1[*(int *)(v7 + 64)] = *(_OWORD *)&a2[*(int *)(v7 + 64)];
      swift_storeEnumTagMultiPayload(a1, a3, 2LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t type metadata completion function for SiriWorkflowRunnerEvent(uint64_t a1)
{
  v5[0] = "0";
  v5[1] = &unk_188720;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout3(v4, *(void *)(result - 8) + 64LL, &unk_188738, (char *)&value witness table for () + 64);
    uint64_t v5[2] = v4;
    v5[3] = &unk_188750;
    v5[4] = &unk_188768;
    v5[5] = &unk_188768;
    v5[6] = &unk_188768;
    v5[7] = &unk_188720;
    v5[8] = &unk_188780;
    v5[9] = (char *)&value witness table for () + 64;
    v5[10] = &unk_188720;
    v5[11] = &unk_188768;
    v5[12] = &unk_188798;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 13LL, v5);
    return 0LL;
  }

  return result;
}

uint64_t type metadata accessor for SiriWorkflowRunner()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin18SiriWorkflowRunner);
}

uint64_t ObjC metadata update function for AnonymousSiriWorkflowRunnerClientDelegate()
{
  return type metadata accessor for AnonymousSiriWorkflowRunnerClientDelegate(0LL);
}

uint64_t type metadata accessor for AnonymousSiriWorkflowRunnerClientDelegate(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for AnonymousSiriWorkflowRunnerClientDelegate,  (uint64_t)&nominal type descriptor for AnonymousSiriWorkflowRunnerClientDelegate);
}

void type metadata completion function for AnonymousSiriWorkflowRunnerClientDelegate(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(v2 - 8) + 64LL;
    swift_updateClassMetadata2(a1, 256LL, 1LL, &v4, a1 + 80);
  }

void type metadata accessor for AsyncStream<SiriWorkflowRunnerEvent>.Continuation(uint64_t a1)
{
  if (!lazy cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation)
  {
    uint64_t v2 = type metadata accessor for SiriWorkflowRunnerEvent(255LL);
    unint64_t v3 = type metadata accessor for AsyncStream.Continuation(a1, v2);
    if (!v4) {
      atomic_store( v3,  (unint64_t *)&lazy cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
    }
  }

uint64_t sub_10366C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned WFSiriActionResponse) -> ()()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t sub_1036A0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void partial apply for closure #1 in closure #1 in SiriWorkflowRunner.startExecution()()
{
}

uint64_t OUTLINED_FUNCTION_1_32(uint64_t a1)
{
  return swift_allocObject(a1, 32LL, 7LL);
}

uint64_t OUTLINED_FUNCTION_8_43(uint64_t a1)
{
  return swift_dynamicCastObjCClass(v1, a1);
}

_WORD *OUTLINED_FUNCTION_10_32(_WORD *result)
{
  *(void *)(v2 - 136) = v1;
  *uint64_t result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_16_39()
{
  return AsyncStream.Continuation.yield(_:)(v0, v1);
}

uint64_t OUTLINED_FUNCTION_17_33@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(v1 + 16))( *(void *)(v3 - 88),  *(void *)(v3 - 128) + a1,  v2);
}

uint64_t OUTLINED_FUNCTION_18_30()
{
  return v0;
}

void OUTLINED_FUNCTION_21_23(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 88) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

void OUTLINED_FUNCTION_22_23(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 120) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t OUTLINED_FUNCTION_24_27(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(v2, v1, a1);
}

uint64_t OUTLINED_FUNCTION_25_29()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

double OUTLINED_FUNCTION_27_24()
{
  *(void *)&double result = swift_bridgeObjectRetain(v2).n128_u64[0];
  return result;
}

id OUTLINED_FUNCTION_28_19(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

  ;
}

uint64_t OUTLINED_FUNCTION_33_20()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 112) + 8LL))(v0, *(void *)(v1 - 96));
}

uint64_t OUTLINED_FUNCTION_34_26@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + 32) = a2;
  *(void *)(v2 + 40) = a1;
  return swift_storeEnumTagMultiPayload(v2, v3, 0LL);
}

uint64_t OUTLINED_FUNCTION_37_24(uint64_t result)
{
  *(void *)(result + 16) = v1;
  *(void *)(result + 24) = v2;
  uint64_t v7 = *(void *)(v6 - 104);
  *(void *)uint64_t v4 = v3;
  *(void *)(v4 + 8) = v7;
  *(void *)(v4 + 16) = v5;
  *(_BYTE *)(v4 + 24) = 1;
  return result;
}

  ;
}

BOOL OUTLINED_FUNCTION_39_24(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

  ;
}

uint64_t OUTLINED_FUNCTION_42_17()
{
  *(void *)(v0 + 144) = v1;
  return outlined init with take of AceServiceInvokerAsync(v2, v0 + 152);
}

uint64_t OUTLINED_FUNCTION_44_15(uint64_t result)
{
  *(void *)(v1 - 96) = result;
  *(void *)(v1 - 112) = *(void *)(result - 8);
  return result;
}

uint64_t OUTLINED_FUNCTION_45_20()
{
  return type metadata accessor for SiriWorkflowRunnerEvent(0LL);
}

id OUTLINED_FUNCTION_46_25()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_48_19(uint64_t a1)
{
  return AsyncStream.Continuation.yield(_:)(v1, a1);
}

uint64_t OUTLINED_FUNCTION_49_18(uint64_t a1)
{
  return AsyncStream.Continuation.yield(_:)(v1, a1);
}

  ;
}

void OUTLINED_FUNCTION_53_19()
{
  *(void *)(v1 - 128) = v0;
}

  ;
}

uint64_t OUTLINED_FUNCTION_58_18(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_62_14()
{
  return v0;
}

Swift::Bool __swiftcall AppInstallInfoProvider.isShortcutsAppInstalled()()
{
  id v0 = objc_allocWithZone(&OBJC_CLASS___LSApplicationRecord);
  uint64_t v1 = (os_log_s *)@nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)( 0xD000000000000013LL,  0x80000000001920C0LL,  0);
  uint64_t v4 = v1;
  if (!v1)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)OUTLINED_FUNCTION_57_1();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_0, v4, v5, "#SiriLinkFlowPlugin cannot find application record for Shortcuts", v6, 2u);
      OUTLINED_FUNCTION_1_0((uint64_t)v6);
    }

    goto LABEL_14;
  }

  id v7 = -[os_log_s applicationState](v1, "applicationState");
  unsigned __int8 v8 = [v7 isInstalled];

  if ((v8 & 1) == 0)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = __swift_project_value_buffer(v10, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)OUTLINED_FUNCTION_57_1();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_0, v12, v13, "#SiriLinkFlowPlugin Shortcuts app is not installed on device", v14, 2u);
      OUTLINED_FUNCTION_1_0((uint64_t)v14);
    }

LABEL_14:
    Swift::Bool v9 = 0;
    goto LABEL_15;
  }

  Swift::Bool v9 = 1;
LABEL_15:

  return v9;
}

uint64_t protocol witness for AppInstallInfoProviding.isShortcutsAppInstalled() in conformance AppInstallInfoProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80LL))() & 1;
}

id @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(uint64_t a1, uint64_t a2, char a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v17 = 0LL;
  id v7 = [v3 initWithBundleIdentifier:v6 allowPlaceholder:a3 & 1 error:&v17];

  id v8 = v17;
  if (v7)
  {
    id v9 = v17;
  }

  else
  {
    id v10 = v17;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow(v11, v12, v13, v14, v15);
  }

  return v7;
}

uint64_t type metadata accessor for AppInstallInfoProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin22AppInstallInfoProvider);
}

uint64_t UsoVoiceCommandsCustomTask.getArguments()()
{
  uint64_t v3 = v1;
  uint64_t v4 = v0;
  if (one-time initialization token for voiceCommands == -1) {
    goto LABEL_2;
  }
LABEL_87:
  swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
LABEL_2:
  uint64_t v5 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
  uint64_t v6 = swift_retain_n(v4, 4LL);
  id v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  uint64_t v9 = v8;
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v10 = swift_slowAlloc(22LL, -1LL);
    uint64_t v103 = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v10 = 136315394;
    uint64_t v11 = (*(uint64_t (**)(void))(*v4 + 104LL))();
    uint64_t v101 = OUTLINED_FUNCTION_8_44(v11, v12);
    OUTLINED_FUNCTION_2_31(v101, v13, v14, v10 + 12, v15, v16, v17, v18, v88, v90, v92);
    OUTLINED_FUNCTION_36_10();
    uint64_t v19 = OUTLINED_FUNCTION_20();
    *(_WORD *)(v10 + 12) = 2080;
    uint64_t v2 = v10 + 14;
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*v4 + 112LL))(v19);
    uint64_t v102 = OUTLINED_FUNCTION_8_44(v20, v21);
    OUTLINED_FUNCTION_2_31(v102, v22, v23, v10 + 22, v24, v25, v26, v27, v89, v91, v93);
    OUTLINED_FUNCTION_36_10();
    OUTLINED_FUNCTION_20();
    _os_log_impl( &dword_0,  v7,  (os_log_type_t)v9,  "Attempting to convert USOGraph for verb: %s bundleId: %s",  (uint8_t *)v10,  0x16u);
    swift_arrayDestroy(v103, 2LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v103);
    OUTLINED_FUNCTION_1_0(v10);
  }

  else
  {

    uint64_t v28 = swift_release_n(v4, 4LL);
  }

  if (!v4[2])
  {
    uint64_t v79 = type metadata accessor for TransformationError(0LL);
    unint64_t v80 = lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
    swift_allocError(v79, v80, 0LL, 0LL);
    *uint64_t v81 = 0xD000000000000016LL;
    v81[1] = 0x8000000000196B60LL;
    uint64_t v82 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v79 - 8) + 104LL))( v81,  enum case for TransformationError.cannotTransform(_:),  v79);
    swift_willThrow(v82, v83, v84, v85, v86);
    return v9;
  }

  uint64_t v4 = (void *)UsoTask.arguments.getter(v28);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  uint64_t v9 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v29,  &protocol witness table for String);
  int64_t v30 = 0LL;
  uint64_t v31 = v4[8];
  uint64_t v88 = (uint64_t)(v4 + 8);
  uint64_t v92 = v3;
  uint64_t v94 = v4;
  uint64_t v32 = 1LL << *((_BYTE *)v4 + 32);
  uint64_t v33 = -1LL;
  if (v32 < 64) {
    uint64_t v33 = ~(-1LL << v32);
  }
  unint64_t v34 = v33 & v31;
  int64_t v90 = (unint64_t)(v32 + 63) >> 6;
  if ((v33 & v31) != 0)
  {
LABEL_9:
    unint64_t v35 = __clz(__rbit64(v34));
    uint64_t v36 = (v34 - 1) & v34;
    unint64_t v37 = v35 | (v30 << 6);
    goto LABEL_24;
  }

  while (1)
  {
    int64_t v38 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      goto LABEL_85;
    }
    if (v38 >= v90) {
      goto LABEL_78;
    }
    unint64_t v39 = *(void *)(v88 + 8 * v38);
    ++v30;
    if (v39) {
      goto LABEL_23;
    }
    int64_t v30 = v38 + 1;
    if (v38 + 1 >= v90) {
      goto LABEL_78;
    }
    unint64_t v39 = *(void *)(v88 + 8 * v30);
    if (v39) {
      goto LABEL_23;
    }
    int64_t v30 = v38 + 2;
    if (v38 + 2 >= v90) {
      goto LABEL_78;
    }
    unint64_t v39 = *(void *)(v88 + 8 * v30);
    if (v39) {
      goto LABEL_23;
    }
    int64_t v40 = v38 + 3;
    if (v40 >= v90)
    {
LABEL_78:
      swift_release();
      return v9;
    }

    unint64_t v39 = *(void *)(v88 + 8 * v40);
    if (!v39)
    {
      while (1)
      {
        int64_t v30 = v40 + 1;
        if (__OFADD__(v40, 1LL)) {
          goto LABEL_86;
        }
        if (v30 >= v90) {
          goto LABEL_78;
        }
        unint64_t v39 = *(void *)(v88 + 8 * v30);
        ++v40;
        if (v39) {
          goto LABEL_23;
        }
      }
    }

    int64_t v30 = v40;
LABEL_23:
    uint64_t v36 = (v39 - 1) & v39;
    unint64_t v37 = __clz(__rbit64(v39)) + (v30 << 6);
LABEL_24:
    id v41 = (uint64_t *)(v94[6] + 16 * v37);
    uint64_t v42 = v41[1];
    uint64_t v99 = *v41;
    uint64_t v3 = *(void *)(v94[7] + 8 * v37);
    if ((unint64_t)v3 >> 62)
    {
      if (v3 < 0) {
        uint64_t v78 = *(void *)(v94[7] + 8 * v37);
      }
      else {
        uint64_t v78 = v3 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRetain(v3);
      uint64_t v4 = (void *)_CocoaArrayWrapper.endIndex.getter(v78);
    }

    else
    {
      uint64_t v4 = *(void **)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFF8LL));
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRetain(v3);
    }

    int64_t v96 = v30;
    uint64_t v97 = (void *)v9;
    unint64_t v95 = v36;
    uint64_t v98 = v42;
    if (v4)
    {
      if ((uint64_t)v4 >= 1)
      {
        uint64_t v43 = 0LL;
        uint64_t v44 = _swiftEmptyArrayStorage;
        while (1)
        {
          if ((v3 & 0xC000000000000001LL) != 0) {
            specialized _ArrayBuffer._getElementSlowPath(_:)(v43, v3);
          }
          else {
            swift_retain(*(void *)(v3 + 8 * v43 + 32));
          }
          uint64_t v45 = ((uint64_t (*)(void))dispatch thunk of UsoValue.getAsPrimitiveValueString())();
          if (v46)
          {
            uint64_t v47 = v45;
            uint64_t v45 = OUTLINED_FUNCTION_3_43();
            if ((v45 & 1) == 0)
            {
              OUTLINED_FUNCTION_0_39();
              uint64_t v44 = (void *)v45;
            }

            unint64_t v48 = v44[2];
            if (v48 >= v44[3] >> 1)
            {
              OUTLINED_FUNCTION_0_39();
              uint64_t v44 = (void *)v45;
            }

            v44[2] = v48 + 1;
            id v49 = &v44[2 * v48];
            v49[4] = v47;
            v49[5] = v2;
          }

          if (!dispatch thunk of UsoValue.getAsEntity()(v45)) {
            goto LABEL_54;
          }
          uint64_t v50 = UsoEntity.attributes.getter();
          swift_release();
          if (*(void *)(v50 + 16))
          {
            unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(0x6156676E69727473LL, 0xEB0000000065756CLL);
            if ((v52 & 1) != 0)
            {
              uint64_t v53 = *(void *)(*(void *)(v50 + 56) + 8 * v51);
              swift_bridgeObjectRetain(v53);
              OUTLINED_FUNCTION_20();
              if ((unint64_t)v53 >> 62)
              {
                if (v53 < 0) {
                  uint64_t v59 = v53;
                }
                else {
                  uint64_t v59 = v53 & 0xFFFFFFFFFFFFFF8LL;
                }
                swift_bridgeObjectRetain(v53);
                uint64_t v60 = _CocoaArrayWrapper.endIndex.getter(v59);
                swift_bridgeObjectRelease();
                if (v60)
                {
LABEL_43:
                  if ((v53 & 0xC000000000000001LL) != 0)
                  {
                    specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v53);
                  }

                  else
                  {
                    if (!*(void *)((char *)&dword_10 + (v53 & 0xFFFFFFFFFFFFF8LL)))
                    {
                      __break(1u);
                      goto LABEL_82;
                    }

                    swift_retain(*(void *)(v53 + 32));
                  }

                  uint64_t v54 = swift_bridgeObjectRelease();
                  uint64_t v55 = dispatch thunk of UsoValue.getAsPrimitiveValueString()(v54);
                  if (v56)
                  {
                    uint64_t v100 = v55;
                    if ((OUTLINED_FUNCTION_3_43() & 1) == 0)
                    {
                      OUTLINED_FUNCTION_0_39();
                      uint64_t v44 = v61;
                    }

                    unint64_t v57 = v44[2];
                    if (v57 >= v44[3] >> 1)
                    {
                      OUTLINED_FUNCTION_0_39();
                      uint64_t v44 = v62;
                    }

                    v44[2] = v57 + 1;
                    unint64_t v58 = &v44[2 * v57];
                    v58[4] = v100;
                    v58[5] = v2;
                  }

                  OUTLINED_FUNCTION_45_5();
LABEL_54:
                  swift_release();
                  goto LABEL_55;
                }
              }

              else if (*(void *)((char *)&dword_10 + (v53 & 0xFFFFFFFFFFFFF8LL)))
              {
                goto LABEL_43;
              }
            }
          }

          OUTLINED_FUNCTION_45_5();
          swift_bridgeObjectRelease();
LABEL_55:
          if (v4 == (void *)++v43) {
            goto LABEL_64;
          }
        }
      }

LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }

    uint64_t v44 = _swiftEmptyArrayStorage;
LABEL_64:
    swift_bridgeObjectRelease();
    uint64_t v4 = specialized _arrayForceCast<A, B>(_:)((uint64_t)v44);
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v97);
    unint64_t v64 = specialized __RawDictionaryStorage.find<A>(_:)(v99, v98);
    uint64_t v66 = v97[2];
    BOOL v67 = (v65 & 1) == 0;
    Swift::Int v68 = v66 + v67;
    if (__OFADD__(v66, v67))
    {
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }

    unint64_t v69 = v64;
    char v70 = v65;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Any]>);
    uint64_t v3 = v92;
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v68)) {
      break;
    }
LABEL_68:
    uint64_t v9 = (uint64_t)v97;
    if ((v70 & 1) != 0)
    {
      uint64_t v73 = v97[7];
      swift_bridgeObjectRelease();
      *(void *)(v73 + 8 * v69) = v4;
    }

    else
    {
      v97[(v69 >> 6) + 8] |= 1LL << v69;
      uint64_t v74 = (uint64_t *)(v97[6] + 16 * v69);
      *uint64_t v74 = v99;
      v74[1] = v98;
      *(void *)(v97[7] + 8 * v69) = v4;
      uint64_t v75 = v97[2];
      BOOL v76 = __OFADD__(v75, 1LL);
      uint64_t v77 = v75 + 1;
      if (v76) {
        goto LABEL_84;
      }
      uint64_t v97[2] = v77;
      swift_bridgeObjectRetain(v98);
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v34 = v95;
    int64_t v30 = v96;
    if (v95) {
      goto LABEL_9;
    }
  }

  unint64_t v71 = specialized __RawDictionaryStorage.find<A>(_:)(v99, v98);
  if ((v70 & 1) == (v72 & 1))
  {
    unint64_t v69 = v71;
    goto LABEL_68;
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t UsoVoiceCommandsCustomTask.verb.getter()
{
  if (*(void *)(v0 + 16)) {
    return UsoTask.verbString.getter();
  }
  else {
    return 0LL;
  }
}

uint64_t UsoVoiceCommandsCustomTask.bundleId.getter()
{
  if (!*(void *)(v0 + 16)) {
    return 0LL;
  }
  v6[2] = UsoTask.baseEntityAsString.getter();
  v6[3] = v1;
  v6[0] = 95LL;
  v6[1] = 0xE100000000000000LL;
  v5[0] = 46LL;
  v5[1] = 0xE100000000000000LL;
  unint64_t v4 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v2 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v6,  v5,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v4);
  OUTLINED_FUNCTION_37();
  return v2;
}

unint64_t UsoVoiceCommandsCustomTask.bundleIdWithCustomIntentTypePrefix.getter()
{
  v1._countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v0 + 112LL))();
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  return 0xD000000000000017LL;
}

uint64_t UsoVoiceCommandsCustomTask.fullyQualifiedIntentWithBundleId.getter()
{
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
  uint64_t v10 = v1;
  swift_bridgeObjectRetain(v1);
  v2._countAndFlagsBits = 46LL;
  v2._object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  uint64_t v3 = OUTLINED_FUNCTION_37();
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 104LL))(v3);
  uint64_t v6 = v5;
  swift_bridgeObjectRetain(v10);
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  OUTLINED_FUNCTION_37();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t one-time initialization function for customIntentTransformer()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask, INIntent>);
  __swift_allocate_value_buffer(v0, static Transformer<>.customIntentTransformer);
  __swift_project_value_buffer(v0, (uint64_t)static Transformer<>.customIntentTransformer);
  uint64_t v1 = type metadata accessor for UsoTask(0LL);
  type metadata accessor for INIntent();
  return Transformer.init(transform:)( closure #1 in closure #1 in variable initialization expression of static Transformer<>.customIntentTransformer,  0LL,  v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoVoiceCommandsCustomTask, INIntent>);
  __swift_allocate_value_buffer(v0, static Transformer<>.customIntentTransformer);
  __swift_project_value_buffer(v0, (uint64_t)static Transformer<>.customIntentTransformer);
  uint64_t v1 = type metadata accessor for UsoVoiceCommandsCustomTask();
  type metadata accessor for INIntent();
  return Transformer.init(transform:)( closure #1 in closure #1 in variable initialization expression of static Transformer<>.customIntentTransformer,  0LL,  v1);
}

uint64_t closure #1 in closure #1 in variable initialization expression of static Transformer<>.customIntentTransformer@<X0>( uint64_t *a1@<X0>, void *a2@<X8>)
{
  void (*v10)(uint64_t *__return_ptr, uint64_t *);
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v3 = v2;
  uint64_t v5 = *a1;
  uint64_t v6 = type metadata accessor for UsoVoiceCommandsCustomTask();
  uint64_t v7 = swift_allocObject(v6, 24LL, 7LL);
  *(void *)(v7 + 16) = v5;
  uint64_t v8 = one-time initialization token for customIntentTransformer;
  swift_retain(v5);
  if (v8 != -1) {
    swift_once( &one-time initialization token for customIntentTransformer,  one-time initialization function for customIntentTransformer);
  }
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoVoiceCommandsCustomTask, INIntent>);
  __swift_project_value_buffer(v9, (uint64_t)static Transformer<>.customIntentTransformer);
  uint64_t v10 = (void (*)(uint64_t *__return_ptr, uint64_t *))Transformer.transform.getter(v9);
  uint64_t v13 = v7;
  v10(&v12, &v13);
  swift_release();
  uint64_t result = swift_release();
  if (!v3) {
    *a2 = v12;
  }
  return result;
}

uint64_t Transformer<>.customIntentTransformer.unsafeMutableAddressor()
{
  return Transformer<>.workflowNameTransformer.unsafeMutableAddressor( &one-time initialization token for customIntentTransformer,  &demangling cache variable for type metadata for Transformer<UsoVoiceCommandsCustomTask, INIntent>,  (uint64_t)static Transformer<>.customIntentTransformer,  (uint64_t)one-time initialization function for customIntentTransformer);
}

{
  return Transformer<>.workflowNameTransformer.unsafeMutableAddressor( &one-time initialization token for customIntentTransformer,  &demangling cache variable for type metadata for Transformer<UsoTask, INIntent>,  (uint64_t)static Transformer<>.customIntentTransformer,  (uint64_t)one-time initialization function for customIntentTransformer);
}

uint64_t static Transformer<>.customIntentTransformer.getter@<X0>(uint64_t a1@<X8>)
{
  return static Transformer<>.usoTaskTransformer.getter( &one-time initialization token for customIntentTransformer,  &demangling cache variable for type metadata for Transformer<UsoTask, INIntent>,  (uint64_t)static Transformer<>.customIntentTransformer,  (uint64_t)one-time initialization function for customIntentTransformer,  a1);
}

{
  return static Transformer<>.usoTaskTransformer.getter( &one-time initialization token for customIntentTransformer,  &demangling cache variable for type metadata for Transformer<UsoVoiceCommandsCustomTask, INIntent>,  (uint64_t)static Transformer<>.customIntentTransformer,  (uint64_t)one-time initialization function for customIntentTransformer,  a1);
}

const char *Transformer<>.customParseIntentDictionaryKey.unsafeMutableAddressor()
{
  return "intent";
}

uint64_t static Transformer<>.customParseIntentDictionaryKey.getter()
{
  return 0x746E65746E69LL;
}

const char *Transformer<>.parametersDictionaryKey.unsafeMutableAddressor()
{
  return "parameters";
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.customIntentTransformer( void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (_OWORD *)*a1;
  v261 = &_swiftEmptyDictionarySingleton;
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v4 + 96LL))();
  if (v2)
  {
    swift_bridgeObjectRelease();
    return;
  }

  uint64_t v6 = v5;
  v248 = a2;
  v249 = *(void (**)(void))(*(void *)v4 + 128LL);
  v250 = v4;
  v249();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)(id)INIntentCreate(v7, 0LL);

  v260 = (void *)Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  int64_t v9 = 0LL;
  uint64_t v251 = v6 + 64;
  uint64_t v10 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v6 + 64);
  int64_t v252 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v13 = v265;
  uint64_t v253 = v6;
  uint64_t v254 = isUniquelyReferenced_nonNull_native;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
    }

    else
    {
      BOOL v16 = __OFADD__(v9++, 1LL);
      if (v16) {
        goto LABEL_239;
      }
      if (v9 >= v252) {
        goto LABEL_221;
      }
      unint64_t v17 = *(void *)(v251 + 8 * v9);
      if (!v17)
      {
        int64_t v18 = v9 + 1;
        if (v9 + 1 >= v252) {
          goto LABEL_221;
        }
        unint64_t v17 = *(void *)(v251 + 8 * v18);
        if (!v17)
        {
          int64_t v18 = v9 + 2;
          if (v9 + 2 >= v252) {
            goto LABEL_221;
          }
          unint64_t v17 = *(void *)(v251 + 8 * v18);
          if (!v17)
          {
            int64_t v18 = v9 + 3;
            if (v9 + 3 >= v252) {
              goto LABEL_221;
            }
            unint64_t v17 = *(void *)(v251 + 8 * v18);
            if (!v17)
            {
              while (1)
              {
                int64_t v9 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_240;
                }
                if (v9 >= v252) {
                  break;
                }
                unint64_t v17 = *(void *)(v251 + 8 * v9);
                ++v18;
                if (v17) {
                  goto LABEL_18;
                }
              }

LABEL_221:
              swift_release();
              swift_isUniquelyReferenced_nonNull_native(v261);
              *(void *)&__int128 v266 = v261;
              specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
              v261 = (void *)v266;
              swift_bridgeObjectRelease();
              uint64_t v13 = v250;
              if (one-time initialization token for voiceCommands != -1) {
                goto LABEL_241;
              }
              goto LABEL_222;
            }
          }
        }

        int64_t v9 = v18;
      }

LABEL_70:
      unint64_t v31 = v28;
LABEL_71:
      swift_bridgeObjectRelease();
      outlined consume of [String : DMFPolicy].Iterator._Variant(v266);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_72;
    }

    uint64_t v76 = objc_opt_self(&OBJC_CLASS___INCodableObjectAttribute);
    if (!swift_dynamicCastObjCClass(v26, v76)) {
      goto LABEL_39;
    }
    if (*(void *)(v22 + 16)
      && (outlined init with copy of Any(v22 + 32, (uint64_t)&v266),
          (swift_dynamicCast(&v264, &v266, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0))
    {
      __int128 v77 = v264;
      if ([v26 valueType] == (char *)&dword_18 + 3)
      {
        v257 = v26;
        swift_bridgeObjectRelease();
        if (one-time initialization token for voiceCommands != -1) {
          swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
        }
        unint64_t v78 = v12;
        uint64_t v79 = type metadata accessor for Logger(0LL);
        uint64_t v80 = __swift_project_value_buffer(v79, (uint64_t)static Logger.voiceCommands);
        uint64_t v81 = (os_log_s *)Logger.logObject.getter(v80);
        os_log_type_t v82 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v81, v82))
        {
          uint64_t v83 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v83 = 0;
          _os_log_impl(&dword_0, v81, v82, "Location resolution not currently supported with Custom NL", v83, 2u);
          swift_slowDealloc(v83, -1LL, -1LL);
        }

        uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
        uint64_t v85 = swift_allocObject(v84, 64LL, 7LL);
        *(_OWORD *)(v85 + 16) = xmmword_17E650;
        *(void *)(v85 + 32) = 1701667182LL;
        *(void *)(v85 + 40) = 0xE400000000000000LL;
        *(_OWORD *)(v85 + 48) = v77;
        uint64_t v86 = Dictionary.init(dictionaryLiteral:)( v85,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
        v267 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
        *(void *)&__int128 v266 = v86;
        outlined init with take of Any(&v266, &v264);
        char v87 = swift_isUniquelyReferenced_nonNull_native(v260);
        *(void *)&v263[0] = v260;
        unint64_t v88 = specialized __RawDictionaryStorage.find<A>(_:)(v255, v20);
        uint64_t v90 = v260[2];
        BOOL v91 = (v89 & 1) == 0;
        Swift::Int v92 = v90 + v91;
        if (__OFADD__(v90, v91))
        {
          __break(1u);
LABEL_243:
          __break(1u);
LABEL_244:
          __break(1u);
LABEL_245:
          __break(1u);
LABEL_246:
          __break(1u);
LABEL_247:
          __break(1u);
LABEL_248:
          __break(1u);
        }

        unint64_t v93 = v88;
        char v94 = v89;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
        Swift::Bool v95 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v87, v92);
        uint64_t isUniquelyReferenced_nonNull_native = v254;
        unint64_t v12 = v78;
        if (v95)
        {
          unint64_t v96 = specialized __RawDictionaryStorage.find<A>(_:)(v255, v20);
          if ((v94 & 1) != (v97 & 1)) {
            goto LABEL_252;
          }
          unint64_t v93 = v96;
        }

        uint64_t v98 = *(void **)&v263[0];
        v260 = *(void **)&v263[0];
        if ((v94 & 1) != 0)
        {
          uint64_t v99 = (void *)(*(void *)(*(void *)&v263[0] + 56LL) + 32 * v93);
          __swift_destroy_boxed_opaque_existential_1Tm(v99);
          outlined init with take of Any(&v264, v99);
        }

        else
        {
          *(void *)(*(void *)&v263[0] + 8 * (v93 >> 6) + 64) |= 1LL << v93;
          v116 = (uint64_t *)(v98[6] + 16 * v93);
          uint64_t *v116 = v255;
          v116[1] = v20;
          outlined init with take of Any(&v264, (_OWORD *)(v98[7] + 32 * v93));
          uint64_t v117 = v98[2];
          BOOL v16 = __OFADD__(v117, 1LL);
          uint64_t v118 = v117 + 1;
          if (v16) {
            goto LABEL_244;
          }
          v98[2] = v118;
          swift_bridgeObjectRetain(v20);
        }

        uint64_t v6 = v253;
        int64_t v9 = v259;
        uint64_t v100 = v257;
        goto LABEL_110;
      }

      uint64_t v100 = v26;
      Swift::String v101 = String.lowercased()();
      swift_bridgeObjectRelease();
      BOOL v102 = v101._countAndFlagsBits == 97 && v101._object == (void *)0xE100000000000000LL;
      if (v102
        || (_stringCompareWithSmolCheck(_:_:expecting:)( 97LL,  0xE100000000000000LL,  v101._countAndFlagsBits,  v101._object,  0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v267 = &type metadata for Int;
        *(void *)&__int128 v266 = 1LL;
        outlined init with take of Any(&v266, &v264);
        char v103 = swift_isUniquelyReferenced_nonNull_native(v260);
        *(void *)&v263[0] = v260;
        unint64_t v104 = specialized __RawDictionaryStorage.find<A>(_:)(v255, v20);
        uint64_t v106 = v260[2];
        BOOL v107 = (v105 & 1) == 0;
        Swift::Int v108 = v106 + v107;
        if (__OFADD__(v106, v107)) {
          goto LABEL_243;
        }
        unint64_t v109 = v104;
        char v110 = v105;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
        Swift::Bool v111 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v103, v108);
        uint64_t isUniquelyReferenced_nonNull_native = v254;
        unint64_t v12 = v258;
        if (v111)
        {
          unint64_t v112 = specialized __RawDictionaryStorage.find<A>(_:)(v255, v20);
          if ((v110 & 1) != (v113 & 1)) {
            goto LABEL_252;
          }
          unint64_t v109 = v112;
        }

        uint64_t v114 = *(void **)&v263[0];
        v260 = *(void **)&v263[0];
        if ((v110 & 1) != 0) {
          goto LABEL_103;
        }
        *(void *)(*(void *)&v263[0] + 8 * (v109 >> 6) + 64) |= 1LL << v109;
        v119 = (uint64_t *)(v114[6] + 16 * v109);
        uint64_t *v119 = v255;
        v119[1] = v20;
        outlined init with take of Any(&v264, (_OWORD *)(v114[7] + 32 * v109));
        uint64_t v120 = v114[2];
        BOOL v16 = __OFADD__(v120, 1LL);
        uint64_t v121 = v120 + 1;
        if (v16) {
          goto LABEL_245;
        }
LABEL_108:
        v114[2] = v121;
        swift_bridgeObjectRetain(v20);
LABEL_109:
        uint64_t v6 = v253;
        int64_t v9 = v259;
        goto LABEL_110;
      }

      BOOL v122 = v101._countAndFlagsBits == 6647407 && v101._object == (void *)0xE300000000000000LL;
      if (v122
        || (_stringCompareWithSmolCheck(_:_:expecting:)( 6647407LL,  0xE300000000000000LL,  v101._countAndFlagsBits,  v101._object,  0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v267 = &type metadata for Int;
        *(void *)&__int128 v266 = 1LL;
        outlined init with take of Any(&v266, &v264);
        char v123 = swift_isUniquelyReferenced_nonNull_native(v260);
        *(void *)&v263[0] = v260;
        unint64_t v124 = specialized __RawDictionaryStorage.find<A>(_:)(v255, v20);
        uint64_t v126 = v260[2];
        BOOL v127 = (v125 & 1) == 0;
        Swift::Int v128 = v126 + v127;
        if (__OFADD__(v126, v127)) {
          goto LABEL_246;
        }
        unint64_t v109 = v124;
        char v129 = v125;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
        Swift::Bool v130 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v123, v128);
        uint64_t isUniquelyReferenced_nonNull_native = v254;
        unint64_t v12 = v258;
        if (v130)
        {
          unint64_t v131 = specialized __RawDictionaryStorage.find<A>(_:)(v255, v20);
          if ((v129 & 1) != (v132 & 1)) {
            goto LABEL_252;
          }
          unint64_t v109 = v131;
        }

        uint64_t v114 = *(void **)&v263[0];
        v260 = *(void **)&v263[0];
        if ((v129 & 1) == 0)
        {
          *(void *)(*(void *)&v263[0] + 8 * (v109 >> 6) + 64) |= 1LL << v109;
          v133 = (uint64_t *)(v114[6] + 16 * v109);
          uint64_t *v133 = v255;
          v133[1] = v20;
          outlined init with take of Any(&v264, (_OWORD *)(v114[7] + 32 * v109));
          uint64_t v134 = v114[2];
          BOOL v16 = __OFADD__(v134, 1LL);
          uint64_t v121 = v134 + 1;
          if (v16) {
            goto LABEL_247;
          }
          goto LABEL_108;
        }

LABEL_103:
        v115 = (void *)(v114[7] + 32 * v109);
        __swift_destroy_boxed_opaque_existential_1Tm(v115);
        outlined init with take of Any(&v264, v115);
        goto LABEL_109;
      }

      BOOL v135 = v101._countAndFlagsBits == 7305076 && v101._object == (void *)0xE300000000000000LL;
      if (v135
        || (_stringCompareWithSmolCheck(_:_:expecting:)( 7305076LL,  0xE300000000000000LL,  v101._countAndFlagsBits,  v101._object,  0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v267 = &type metadata for Int;
        *(void *)&__int128 v266 = 2LL;
        outlined init with take of Any(&v266, &v264);
        char v136 = swift_isUniquelyReferenced_nonNull_native(v260);
        *(void *)&v263[0] = v260;
        unint64_t v137 = specialized __RawDictionaryStorage.find<A>(_:)(v255, v20);
        uint64_t v139 = v260[2];
        BOOL v140 = (v138 & 1) == 0;
        Swift::Int v141 = v139 + v140;
        if (__OFADD__(v139, v140)) {
          goto LABEL_248;
        }
        unint64_t v109 = v137;
        char v142 = v138;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
        Swift::Bool v143 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v136, v141);
        uint64_t isUniquelyReferenced_nonNull_native = v254;
        unint64_t v12 = v258;
        if (v143)
        {
          unint64_t v144 = specialized __RawDictionaryStorage.find<A>(_:)(v255, v20);
          if ((v142 & 1) != (v145 & 1)) {
            goto LABEL_252;
          }
          unint64_t v109 = v144;
        }

        uint64_t v114 = *(void **)&v263[0];
        v260 = *(void **)&v263[0];
        if ((v142 & 1) == 0)
        {
          *(void *)(*(void *)&v263[0] + 8 * (v109 >> 6) + 64) |= 1LL << v109;
          v146 = (uint64_t *)(v114[6] + 16 * v109);
          uint64_t *v146 = v255;
          v146[1] = v20;
          outlined init with take of Any(&v264, (_OWORD *)(v114[7] + 32 * v109));
          uint64_t v147 = v114[2];
          BOOL v16 = __OFADD__(v147, 1LL);
          uint64_t v121 = v147 + 1;
          if (v16)
          {
            __break(1u);
LABEL_249:
            __break(1u);
LABEL_250:
            __break(1u);
LABEL_251:
            __break(1u);
LABEL_252:
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
            __break(1u);
LABEL_253:
            __break(1u);
LABEL_254:
            __break(1u);
LABEL_255:
            __break(1u);
LABEL_256:
            __break(1u);
LABEL_257:
            __break(1u);
LABEL_258:
            __break(1u);
            return;
          }

          goto LABEL_108;
        }

        goto LABEL_103;
      }

      BOOL v148 = v101._countAndFlagsBits == 0x6565726874LL && v101._object == (void *)0xE500000000000000LL;
      if (v148
        || (_stringCompareWithSmolCheck(_:_:expecting:)( 0x6565726874LL,  0xE500000000000000LL,  v101._countAndFlagsBits,  v101._object,  0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v267 = &type metadata for Int;
        *(void *)&__int128 v266 = 3LL;
        outlined init with take of Any(&v266, &v264);
        char v149 = swift_isUniquelyReferenced_nonNull_native(v260);
        *(void *)&v263[0] = v260;
        unint64_t v150 = specialized __RawDictionaryStorage.find<A>(_:)(v255, v20);
        uint64_t v152 = v260[2];
        BOOL v153 = (v151 & 1) == 0;
        Swift::Int v154 = v152 + v153;
        if (__OFADD__(v152, v153)) {
          goto LABEL_249;
        }
        unint64_t v109 = v150;
        char v155 = v151;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
        Swift::Bool v156 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v149, v154);
        uint64_t isUniquelyReferenced_nonNull_native = v254;
        unint64_t v12 = v258;
        if (v156)
        {
          unint64_t v157 = specialized __RawDictionaryStorage.find<A>(_:)(v255, v20);
          if ((v155 & 1) != (v158 & 1)) {
            goto LABEL_252;
          }
          unint64_t v109 = v157;
        }

        uint64_t v114 = *(void **)&v263[0];
        v260 = *(void **)&v263[0];
        if ((v155 & 1) == 0)
        {
          *(void *)(*(void *)&v263[0] + 8 * (v109 >> 6) + 64) |= 1LL << v109;
          v159 = (uint64_t *)(v114[6] + 16 * v109);
          uint64_t *v159 = v255;
          v159[1] = v20;
          outlined init with take of Any(&v264, (_OWORD *)(v114[7] + 32 * v109));
          uint64_t v160 = v114[2];
          BOOL v16 = __OFADD__(v160, 1LL);
          uint64_t v121 = v160 + 1;
          if (v16) {
            goto LABEL_250;
          }
          goto LABEL_108;
        }

        goto LABEL_103;
      }

      BOOL v161 = v101._countAndFlagsBits == 1920298854 && v101._object == (void *)0xE400000000000000LL;
      if (v161
        || (_stringCompareWithSmolCheck(_:_:expecting:)( 1920298854LL,  0xE400000000000000LL,  v101._countAndFlagsBits,  v101._object,  0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v267 = &type metadata for Int;
        *(void *)&__int128 v266 = 4LL;
        outlined init with take of Any(&v266, &v264);
        char v162 = swift_isUniquelyReferenced_nonNull_native(v260);
        *(void *)&v263[0] = v260;
        unint64_t v163 = specialized __RawDictionaryStorage.find<A>(_:)(v255, v20);
        uint64_t v165 = v260[2];
        BOOL v166 = (v164 & 1) == 0;
        Swift::Int v167 = v165 + v166;
        if (__OFADD__(v165, v166)) {
          goto LABEL_251;
        }
        unint64_t v168 = v163;
        char v169 = v164;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v162, v167))
        {
          unint64_t v170 = specialized __RawDictionaryStorage.find<A>(_:)(v255, v20);
          if ((v169 & 1) != (v171 & 1)) {
            goto LABEL_252;
          }
          unint64_t v168 = v170;
        }

        v172 = *(void **)&v263[0];
        v260 = *(void **)&v263[0];
        if ((v169 & 1) != 0)
        {
          v173 = (void *)(*(void *)(*(void *)&v263[0] + 56LL) + 32 * v168);
          __swift_destroy_boxed_opaque_existential_1Tm(v173);
          outlined init with take of Any(&v264, v173);
        }

        else
        {
          *(void *)(*(void *)&v263[0] + 8 * (v168 >> 6) + 64) |= 1LL << v168;
          v174 = (uint64_t *)(v172[6] + 16 * v168);
          uint64_t *v174 = v255;
          v174[1] = v20;
          outlined init with take of Any(&v264, (_OWORD *)(v172[7] + 32 * v168));
          uint64_t v175 = v172[2];
          BOOL v16 = __OFADD__(v175, 1LL);
          uint64_t v176 = v175 + 1;
          if (v16) {
            goto LABEL_253;
          }
          v172[2] = v176;
          swift_bridgeObjectRetain(v20);
        }

        uint64_t v6 = v253;
        uint64_t isUniquelyReferenced_nonNull_native = v254;
        unint64_t v12 = v258;
        int64_t v9 = v259;
LABEL_110:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        BOOL v177 = v101._countAndFlagsBits == 1702259046 && v101._object == (void *)0xE400000000000000LL;
        if (v177
          || (_stringCompareWithSmolCheck(_:_:expecting:)( 1702259046LL,  0xE400000000000000LL,  v101._countAndFlagsBits,  v101._object,  0LL) & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v267 = &type metadata for Int;
          *(void *)&__int128 v266 = 5LL;
          outlined init with take of Any(&v266, &v264);
          char v178 = swift_isUniquelyReferenced_nonNull_native(v260);
          *(void *)&v263[0] = v260;
          unint64_t v179 = specialized __RawDictionaryStorage.find<A>(_:)(v255, v20);
          uint64_t v181 = v260[2];
          BOOL v182 = (v180 & 1) == 0;
          Swift::Int v183 = v181 + v182;
          if (__OFADD__(v181, v182)) {
            goto LABEL_254;
          }
LABEL_170:
          unint64_t v184 = v179;
          char v185 = v180;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
          if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v178, v183))
          {
            unint64_t v186 = specialized __RawDictionaryStorage.find<A>(_:)(v255, v20);
            if ((v185 & 1) != (v187 & 1)) {
              goto LABEL_252;
            }
            unint64_t v184 = v186;
          }

          v260 = *(void **)&v263[0];
          if ((v185 & 1) != 0)
          {
            v188 = (void *)(*(void *)(*(void *)&v263[0] + 56LL) + 32 * v184);
            __swift_destroy_boxed_opaque_existential_1Tm(v188);
            outlined init with take of Any(&v264, v188);
          }

          else
          {
            specialized _NativeDictionary._insert(at:key:value:)(v184, v255, v20, &v264, *(void **)&v263[0]);
            swift_bridgeObjectRetain(v20);
          }

          goto LABEL_176;
        }

        BOOL v189 = v101._countAndFlagsBits == 7891315 && v101._object == (void *)0xE300000000000000LL;
        if (v189
          || (_stringCompareWithSmolCheck(_:_:expecting:)( 7891315LL,  0xE300000000000000LL,  v101._countAndFlagsBits,  v101._object,  0LL) & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v267 = &type metadata for Int;
          *(void *)&__int128 v266 = 6LL;
          outlined init with take of Any(&v266, &v264);
          char v178 = swift_isUniquelyReferenced_nonNull_native(v260);
          *(void *)&v263[0] = v260;
          unint64_t v179 = specialized __RawDictionaryStorage.find<A>(_:)(v255, v20);
          uint64_t v190 = v260[2];
          BOOL v191 = (v180 & 1) == 0;
          Swift::Int v183 = v190 + v191;
          if (__OFADD__(v190, v191)) {
            goto LABEL_255;
          }
          goto LABEL_170;
        }

        BOOL v192 = v101._countAndFlagsBits == 0x6E65766573LL && v101._object == (void *)0xE500000000000000LL;
        if (v192
          || (_stringCompareWithSmolCheck(_:_:expecting:)( 0x6E65766573LL,  0xE500000000000000LL,  v101._countAndFlagsBits,  v101._object,  0LL) & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v267 = &type metadata for Int;
          *(void *)&__int128 v266 = 7LL;
          outlined init with take of Any(&v266, &v264);
          char v178 = swift_isUniquelyReferenced_nonNull_native(v260);
          *(void *)&v263[0] = v260;
          unint64_t v179 = specialized __RawDictionaryStorage.find<A>(_:)(v255, v20);
          uint64_t v193 = v260[2];
          BOOL v194 = (v180 & 1) == 0;
          Swift::Int v183 = v193 + v194;
          if (__OFADD__(v193, v194)) {
            goto LABEL_256;
          }
          goto LABEL_170;
        }

        BOOL v195 = v101._countAndFlagsBits == 0x7468676965LL && v101._object == (void *)0xE500000000000000LL;
        if (v195
          || (_stringCompareWithSmolCheck(_:_:expecting:)( 0x7468676965LL,  0xE500000000000000LL,  v101._countAndFlagsBits,  v101._object,  0LL) & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v267 = &type metadata for Int;
          *(void *)&__int128 v266 = 8LL;
          outlined init with take of Any(&v266, &v264);
          char v178 = swift_isUniquelyReferenced_nonNull_native(v260);
          *(void *)&v263[0] = v260;
          unint64_t v179 = specialized __RawDictionaryStorage.find<A>(_:)(v255, v20);
          uint64_t v196 = v260[2];
          BOOL v197 = (v180 & 1) == 0;
          Swift::Int v183 = v196 + v197;
          if (__OFADD__(v196, v197)) {
            goto LABEL_257;
          }
          goto LABEL_170;
        }

        BOOL v198 = v101._countAndFlagsBits == 1701734766 && v101._object == (void *)0xE400000000000000LL;
        if (v198
          || (_stringCompareWithSmolCheck(_:_:expecting:)( 1701734766LL,  0xE400000000000000LL,  v101._countAndFlagsBits,  v101._object,  0LL) & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v267 = &type metadata for Int;
          *(void *)&__int128 v266 = 9LL;
          outlined init with take of Any(&v266, &v264);
          char v178 = swift_isUniquelyReferenced_nonNull_native(v260);
          *(void *)&v263[0] = v260;
          unint64_t v179 = specialized __RawDictionaryStorage.find<A>(_:)(v255, v20);
          uint64_t v199 = v260[2];
          BOOL v200 = (v180 & 1) == 0;
          Swift::Int v183 = v199 + v200;
          if (__OFADD__(v199, v200)) {
            goto LABEL_258;
          }
          goto LABEL_170;
        }

        if (v101._countAndFlagsBits == 7234932 && v101._object == (void *)0xE300000000000000LL)
        {
          swift_bridgeObjectRelease();
        }

        else
        {
          char v202 = _stringCompareWithSmolCheck(_:_:expecting:)( 7234932LL,  0xE300000000000000LL,  v101._countAndFlagsBits,  v101._object,  0LL);
          swift_bridgeObjectRelease();
          if ((v202 & 1) == 0)
          {
            if (one-time initialization token for voiceCommands != -1) {
              swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
            }
            uint64_t v203 = type metadata accessor for Logger(0LL);
            uint64_t v204 = __swift_project_value_buffer(v203, (uint64_t)static Logger.voiceCommands);
            v205 = (os_log_s *)Logger.logObject.getter(v204);
            os_log_type_t v206 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v205, v206))
            {
              v207 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
              *(_WORD *)v207 = 0;
              _os_log_impl( &dword_0,  v205,  v206,  "Rudimentary conversion of #s 1-10 are supported, Custom NL models will do the conversion in the future",  v207,  2u);
              swift_slowDealloc(v207, -1LL, -1LL);
            }

            swift_bridgeObjectRetain(v260);
            uint64_t v208 = static Transformer<>.convertAllOtherParams(attribute:parameter:values:)(v100, v255, v20, v22);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v31 = specialized Dictionary.merging(_:uniquingKeysWith:)(v208, (uint64_t)v260);
            swift_bridgeObjectRelease();

LABEL_72:
            v260 = (void *)v31;
            goto LABEL_73;
          }
        }

        swift_bridgeObjectRelease();
        v267 = &type metadata for Int;
        *(void *)&__int128 v266 = 10LL;
        outlined init with take of Any(&v266, &v264);
        swift_isUniquelyReferenced_nonNull_native(v260);
        *(void *)&v263[0] = v260;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
        v260 = *(void **)&v263[0];
LABEL_176:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_73:
        uint64_t v6 = v253;
        uint64_t isUniquelyReferenced_nonNull_native = v254;
        unint64_t v12 = v258;
        int64_t v9 = v259;
      }
    }

    else
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
  }

  uint64_t v21 = v255;
LABEL_39:
  uint64_t v28 = (uint64_t)v260;
  swift_bridgeObjectRetain(v260);
  v256 = v26;
  uint64_t v45 = static Transformer<>.convertAllOtherParams(attribute:parameter:values:)(v26, v21, v20, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v260);
  specialized LazyMapSequence.makeIterator()( v45,  (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B),  0LL,  &v266);
  swift_bridgeObjectRetain(v45);
  specialized LazyMapSequence.Iterator.next()(&v264);
  uint64_t v46 = *((void *)&v264 + 1);
  if (!*((void *)&v264 + 1)) {
    goto LABEL_70;
  }
  unint64_t v31 = (unint64_t)v260;
  while (2)
  {
    uint64_t v47 = v264;
    outlined init with take of Any(v265, v263);
    unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v47, v46);
    uint64_t v50 = *(void *)(v31 + 16);
    BOOL v51 = (v48 & 1) == 0;
    uint64_t v52 = v50 + v51;
    if (__OFADD__(v50, v51))
    {
      __break(1u);
      goto LABEL_231;
    }

    uint64_t v28 = v48;
    if (*(void *)(v31 + 24) >= v52)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v48 & 1) == 0) {
          goto LABEL_50;
        }
      }

      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
        _NativeDictionary.copy()();
        if ((v28 & 1) == 0) {
          goto LABEL_50;
        }
      }

      goto LABEL_48;
    }

    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v52,  isUniquelyReferenced_nonNull_native & 1);
    unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v47, v46);
    if ((v28 & 1) != (v54 & 1)) {
      goto LABEL_252;
    }
    unint64_t v49 = v53;
    if ((v28 & 1) != 0)
    {
LABEL_48:
      unint64_t v31 = (unint64_t)v260;
      outlined init with take of Any(v263, v262);
      swift_bridgeObjectRelease();
      uint64_t v55 = (void *)(v260[7] + 32 * v49);
      __swift_destroy_boxed_opaque_existential_1Tm(v55);
      outlined init with take of Any(v262, v55);
      goto LABEL_52;
    }

LABEL_50:
    unint64_t v31 = (unint64_t)v260;
    v260[(v49 >> 6) + 8] |= 1LL << v49;
    uint64_t v56 = (uint64_t *)(v260[6] + 16 * v49);
    *uint64_t v56 = v47;
    v56[1] = v46;
    outlined init with take of Any(v263, (_OWORD *)(v260[7] + 32 * v49));
    uint64_t v57 = v260[2];
    BOOL v16 = __OFADD__(v57, 1LL);
    uint64_t v58 = v57 + 1;
    if (!v16)
    {
      v260[2] = v58;
LABEL_52:
      specialized LazyMapSequence.Iterator.next()(&v264);
      uint64_t v46 = *((void *)&v264 + 1);
      uint64_t isUniquelyReferenced_nonNull_native = 1LL;
      if (!*((void *)&v264 + 1)) {
        goto LABEL_71;
      }
      continue;
    }

    break;
  }

  __break(1u);
LABEL_235:
  __break(1u);
LABEL_236:
  __break(1u);
LABEL_237:
  __break(1u);
LABEL_238:
  __break(1u);
LABEL_239:
  __break(1u);
LABEL_240:
  __break(1u);
LABEL_241:
  swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
LABEL_222:
  uint64_t v209 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v209, (uint64_t)static Logger.voiceCommands);
  v210 = v261;
  uint64_t v211 = swift_bridgeObjectRetain_n(v261, 2LL);
  v212 = (os_log_s *)Logger.logObject.getter(v211);
  os_log_type_t v213 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v212, v213))
  {
    v214 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v215 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 v266 = v215;
    *(_DWORD *)v214 = 136315138;
    uint64_t v216 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    uint64_t v217 = Dictionary.description.getter(v210, &type metadata for String, v216, &protocol witness table for String);
    *(void *)&__int128 v264 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v217, v218, (uint64_t *)&v266);
    uint64_t isUniquelyReferenced_nonNull_native = v254;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v264, (char *)&v264 + 8, v214 + 4);
    swift_bridgeObjectRelease_n(v210, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( &dword_0,  v212,  v213,  "Creating custom intent with parameters converted from custom USOGraph: %s",  v214,  0xCu);
    swift_arrayDestroy(v215, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v215, -1LL, -1LL);
    swift_slowDealloc(v214, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v261, 2LL);
  }

  v219 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  swift_beginAccess(&v261, &v266, 0LL, 0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(void *)&__int128 v264 = 0LL;
  id v221 = [v219 dataWithJSONObject:isa options:1 error:&v264];

  id v222 = (id)v264;
  if (v221)
  {
    uint64_t v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v221);
    unint64_t v31 = v223;

    v249();
    NSString v224 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class v225 = Data._bridgeToObjectiveC()().super.isa;
    id v226 = (id)INIntentCreate(v224, v225);

    if (v226)
    {
      v227 = *(uint64_t (**)(void))(*(void *)v13 + 112LL);
      uint64_t v228 = v227();
      outlined bridged method (mbnn) of @objc INIntent.launchId.setter(v228, v229, v226, (SEL *)&selRef__setLaunchId_);
      id v230 = [v226 _metadata];
      if (v230)
      {
        v231 = v230;
        uint64_t v232 = v227();
        outlined bridged method (mbnn) of @objc INIntent.launchId.setter(v232, v233, v231, (SEL *)&selRef_setLaunchId_);

        outlined consume of Data._Representation(v28, v31);
      }

      else
      {

        outlined consume of Data._Representation(v28, v31);
      }

      void *v248 = v226;
    }

    else
    {
LABEL_231:
      uint64_t v240 = type metadata accessor for TransformationError(0LL);
      unint64_t v241 = lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
      swift_allocError(v240, v241, 0LL, 0LL);
      void *v242 = 0xD000000000000030LL;
      v242[1] = 0x8000000000196BE0LL;
      uint64_t v243 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v240 - 8) + 104LL))( v242,  enum case for TransformationError.cannotTransform(_:),  v240);
      swift_willThrow(v243, v244, v245, v246, v247);

      outlined consume of Data._Representation(v28, v31);
    }
  }

  else
  {
    v234 = v222;
    _convertNSErrorToError(_:)(v222);

    swift_willThrow(v235, v236, v237, v238, v239);
  }

uint64_t static Transformer<>.convertCustomObject(attribute:parameter:values:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  uint64_t v33 = v7;
  if (a1)
  {
    if ([a1 valueType] == (char *)&stru_B8.size + 1)
    {
      uint64_t v8 = objc_opt_self(&OBJC_CLASS___INCodableCustomObjectAttribute);
      if (swift_dynamicCastObjCClass(a1, v8))
      {
        specialized Collection.first.getter(a4, &v30);
        if (v31)
        {
          outlined init with take of Any(&v30, v32);
          id v9 = a1;
          if ((INCodableAttribute.supportsMultipleValues.getter() & 1) != 0)
          {
            uint64_t v10 = *(void *)(a4 + 16);
            if (v10)
            {
              uint64_t v11 = a4 + 32;
              swift_bridgeObjectRetain(a4);
              unint64_t v12 = _swiftEmptyArrayStorage;
              do
              {
                outlined init with copy of Any(v11, (uint64_t)&v30);
                if ((swift_dynamicCast(v28, &v30, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
                {
                  uint64_t v13 = v28[0];
                  uint64_t v14 = v28[1];
                  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String?)>);
                  uint64_t inited = swift_initStackObject(v15, v27);
                  *(_OWORD *)(inited + 16) = xmmword_17E650;
                  strcpy((char *)(inited + 32), "displayString");
                  *(_WORD *)(inited + 46) = -4864;
                  *(void *)(inited + 48) = v13;
                  *(void *)(inited + 56) = v14;
                  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
                  uint64_t v18 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  v17,  &protocol witness table for String);
                  if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
                  {
                    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v12[2] + 1LL,  1LL,  (uint64_t)v12);
                    unint64_t v12 = v21;
                  }

                  unint64_t v20 = v12[2];
                  unint64_t v19 = v12[3];
                  if (v20 >= v19 >> 1)
                  {
                    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v19 > 1,  v20 + 1,  1LL,  (uint64_t)v12);
                    unint64_t v12 = v22;
                  }

                  v12[2] = v20 + 1;
                  v12[v20 + 4] = v18;
                }

                v11 += 32LL;
                --v10;
              }

              while (v10);
              swift_bridgeObjectRelease();
            }

            else
            {
              unint64_t v12 = _swiftEmptyArrayStorage;
            }

            uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : String?]]);
            *(void *)&__int128 v30 = v12;
            swift_bridgeObjectRetain(a3);
          }

          else
          {
            uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
            uint64_t v24 = swift_initStackObject(v23, v29);
            *(_OWORD *)(v24 + 16) = xmmword_17E650;
            strcpy((char *)(v24 + 32), "displayString");
            *(_WORD *)(v24 + 46) = -4864;
            outlined init with copy of Any((uint64_t)v32, v24 + 48);
            swift_bridgeObjectRetain(a3);
            uint64_t v25 = Dictionary.init(dictionaryLiteral:)( v24,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
            uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
            *(void *)&__int128 v30 = v25;
          }

          specialized Dictionary.subscript.setter((uint64_t)&v30);

          __swift_destroy_boxed_opaque_existential_1Tm(v32);
          return v33;
        }

        else
        {
          outlined destroy of URL?((uint64_t)&v30, &demangling cache variable for type metadata for Any?);
        }
      }
    }
  }

  return v7;
}

uint64_t specialized Dictionary.merging(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  uint64_t v8 = a2;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)( a1,  (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B),  0LL,  isUniquelyReferenced_nonNull_native,  &v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t static Transformer<>.convertEnum(attribute:parameter:values:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  if (!a1) {
    return v39;
  }
  uint64_t v7 = objc_opt_self(&OBJC_CLASS___INCodableEnumAttribute);
  uint64_t v8 = swift_dynamicCastObjCClass(a1, v7);
  if (!v8) {
    return v39;
  }
  id v9 = (void *)v8;
  id v10 = a1;
  if ((INCodableAttribute.supportsMultipleValues.getter() & 1) == 0)
  {
    specialized Collection.first.getter(a4, &v37);
    if (!*((void *)&v38 + 1))
    {

      outlined destroy of URL?((uint64_t)&v37, &demangling cache variable for type metadata for Any?);
      return v39;
    }

    if ((swift_dynamicCast(&v36, &v37, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      __int128 v37 = v36;
      *(void *)&__int128 v36 = 32LL;
      *((void *)&v36 + 1) = 0xE100000000000000LL;
      uint64_t v34 = 0LL;
      unint64_t v35 = 0xE000000000000000LL;
      unint64_t v31 = lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v36,  &v34,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v31);
      Swift::String v25 = String.lowercased()();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v26 = outlined bridged method (mbnn) of @objc INCodableEnumAttribute.value(withName:)( v25._countAndFlagsBits,  (uint64_t)v25._object,  v9);
      if (v26)
      {
        uint64_t v27 = v26;
        uint64_t v28 = outlined bridged method (pb) of @objc INIntentSlotDescription.name.getter(v26);
        if (v29)
        {
          *((void *)&v38 + 1) = &type metadata for String;
          *(void *)&__int128 v37 = v28;
          *((void *)&v37 + 1) = v29;
        }

        else
        {
          __int128 v37 = 0u;
          __int128 v38 = 0u;
        }

        swift_bridgeObjectRetain(a3);
        specialized Dictionary.subscript.setter((uint64_t)&v37);
      }
    }

uint64_t static Transformer<>.convertAllOtherParams(attribute:parameter:values:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  if (a1)
  {
    id v7 = a1;
    if ((INCodableAttribute.supportsMultipleValues.getter() & 1) != 0)
    {
      uint64_t v8 = *(void *)(a4 + 16);
      if (v8)
      {
        id v21 = v7;
        uint64_t v9 = a4 + 32;
        swift_bridgeObjectRetain(a4);
        id v10 = _swiftEmptyArrayStorage;
        do
        {
          outlined init with copy of Any(v9, (uint64_t)&v23);
          if ((swift_dynamicCast(&v22, &v23, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
          {
            __int128 v11 = v22;
            if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              id v10 = v13;
            }

            unint64_t v12 = v10[2];
            if (v12 >= v10[3] >> 1)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              id v10 = v14;
            }

            v10[2] = v12 + 1;
            *(_OWORD *)&v10[2 * v12 + 4] = v11;
          }

          v9 += 32LL;
          --v8;
        }

        while (v8);
        swift_bridgeObjectRelease();
        id v7 = v21;
      }

      else
      {
        id v10 = _swiftEmptyArrayStorage;
      }

      uint64_t v24 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      *(void *)&__int128 v23 = v10;
      swift_bridgeObjectRetain(a3);
      specialized Dictionary.subscript.setter((uint64_t)&v23);

      return v25;
    }
  }

  specialized Collection.first.getter(a4, &v23);
  if (v24)
  {
    if ((swift_dynamicCast(&v22, &v23, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      uint64_t v24 = &type metadata for String;
      __int128 v23 = v22;
      swift_bridgeObjectRetain(a3);
      specialized Dictionary.subscript.setter((uint64_t)&v23);
      return v25;
    }
  }

  else
  {
    outlined destroy of URL?((uint64_t)&v23, &demangling cache variable for type metadata for Any?);
  }

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = __swift_project_value_buffer(v15, (uint64_t)static Logger.voiceCommands);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl( &dword_0,  v17,  v18,  "Not all parameter types are supported in custom NL -> INIntent conversion.",  v19,  2u);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  return v25;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v34 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    __int128 v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain(v5);
    int64_t v14 = 0LL;
    if (!v11) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v15 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
    {
      uint64_t v20 = (uint64_t *)(*(void *)(v5 + 48) + 16 * i);
      uint64_t v22 = *v20;
      uint64_t v21 = v20[1];
      __int128 v23 = (_OWORD *)(*(void *)(v5 + 56) + 32 * i);
      if ((a2 & 1) != 0)
      {
        outlined init with take of Any(v23, v38);
      }

      else
      {
        outlined init with copy of Any((uint64_t)v23, (uint64_t)v38);
        swift_bridgeObjectRetain(v21);
      }

      Hasher.init(_seed:)(v37, *(void *)(v8 + 40));
      String.hash(into:)(v37, v22, v21);
      uint64_t result = Hasher._finalize()();
      uint64_t v24 = -1LL << *(_BYTE *)(v8 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v12 + 8 * (v25 >> 6))) == 0)
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v24) >> 6;
        while (++v26 != v29 || (v28 & 1) == 0)
        {
          BOOL v30 = v26 == v29;
          if (v26 == v29) {
            unint64_t v26 = 0LL;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v12 + 8 * v26);
          if (v31 != -1)
          {
            unint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
            goto LABEL_34;
          }
        }

        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        return result;
      }

      unint64_t v27 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_34:
      *(void *)(v12 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v27;
      uint64_t v32 = (void *)(*(void *)(v8 + 48) + 16 * v27);
      *uint64_t v32 = v22;
      v32[1] = v21;
      uint64_t result = (uint64_t)outlined init with take of Any(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v27));
      ++*(void *)(v8 + 16);
      if (v11) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v17 = v14 + 1;
      if (__OFADD__(v14, 1LL)) {
        goto LABEL_43;
      }
      if (v17 >= v35) {
        goto LABEL_36;
      }
      unint64_t v18 = v36[v17];
      ++v14;
      if (!v18)
      {
        int64_t v14 = v17 + 1;
        if (v17 + 1 >= v35) {
          goto LABEL_36;
        }
        unint64_t v18 = v36[v14];
        if (!v18)
        {
          int64_t v19 = v17 + 2;
          if (v19 >= v35)
          {
LABEL_36:
            swift_release();
            uint64_t v3 = v34;
            if ((a2 & 1) != 0)
            {
              uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
              if (v33 >= 64) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0LL, (unint64_t)(v33 + 63) >> 6, v36);
              }
              else {
                *__int128 v36 = -1LL << v33;
              }
              *(void *)(v5 + 16) = 0LL;
            }

            break;
          }

          unint64_t v18 = v36[v19];
          if (!v18)
          {
            while (1)
            {
              int64_t v14 = v19 + 1;
              if (__OFADD__(v19, 1LL)) {
                goto LABEL_44;
              }
              if (v14 >= v35) {
                goto LABEL_36;
              }
              unint64_t v18 = v36[v14];
              ++v19;
              if (v18) {
                goto LABEL_21;
              }
            }
          }

          int64_t v14 = v19;
        }
      }

uint64_t type metadata accessor for UsoVoiceCommandsCustomTask()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin26UsoVoiceCommandsCustomTask);
}

unint64_t type metadata accessor for INIntent()
{
  unint64_t result = lazy cache variable for type metadata for INIntent;
  if (!lazy cache variable for type metadata for INIntent)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___INIntent);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INIntent);
  }

  return result;
}

uint64_t specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>( uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)( (uint64_t)(a2 + 2),  *a1,  a1[1],  (uint64_t)(a1 + 2));
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v9 = *((void *)&v29 + 1);
  if (!*((void *)&v29 + 1))
  {
LABEL_14:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [String : DMFPolicy].Iterator._Variant(v31);
    return swift_release();
  }

  while (1)
  {
    uint64_t v10 = v29;
    outlined init with take of Any(&v30, v28);
    uint64_t v11 = *a5;
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
    uint64_t v14 = *(void *)(v11 + 16);
    BOOL v15 = (v12 & 1) == 0;
    uint64_t v16 = v14 + v15;
    if (__OFADD__(v14, v15)) {
      break;
    }
    char v17 = v12;
    if (*(void *)(v11 + 24) >= v16)
    {
      if ((a4 & 1) != 0)
      {
        if ((v12 & 1) != 0) {
          goto LABEL_9;
        }
      }

      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
        _NativeDictionary.copy()();
        if ((v17 & 1) != 0) {
          goto LABEL_9;
        }
      }
    }

    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a4 & 1);
      unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
      if ((v17 & 1) != (v19 & 1)) {
        goto LABEL_17;
      }
      unint64_t v13 = v18;
      if ((v17 & 1) != 0)
      {
LABEL_9:
        outlined init with copy of Any((uint64_t)v28, (uint64_t)v27);
        __swift_destroy_boxed_opaque_existential_1Tm(v28);
        swift_bridgeObjectRelease();
        uint64_t v20 = (void *)(*(void *)(*a5 + 56) + 32 * v13);
        __swift_destroy_boxed_opaque_existential_1Tm(v20);
        outlined init with take of Any(v27, v20);
        goto LABEL_13;
      }
    }

    uint64_t v21 = (void *)*a5;
    *(void *)(*a5 + 8 * (v13 >> 6) + 64) |= 1LL << v13;
    uint64_t v22 = (uint64_t *)(v21[6] + 16 * v13);
    *uint64_t v22 = v10;
    v22[1] = v9;
    outlined init with take of Any(v28, (_OWORD *)(v21[7] + 32 * v13));
    uint64_t v23 = v21[2];
    BOOL v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_16;
    }
    v21[2] = v25;
LABEL_13:
    specialized LazyMapSequence.Iterator.next()(&v29);
    uint64_t v9 = *((void *)&v29 + 1);
    a4 = 1;
    if (!*((void *)&v29 + 1)) {
      goto LABEL_14;
    }
  }

  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void outlined bridged method (mbnn) of @objc INIntent.launchId.setter( uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  id v6 = String._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_37();
  objc_msgSend(a3, *a4, v6);
}

uint64_t specialized LazyMapSequence.makeIterator()@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  *a4 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v8 = -1LL;
  }
  a4[3] = 0LL;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    uint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&__int128 v23 = v13;
    *((void *)&v23 + 1) = v12;
    swift_bridgeObjectRetain(v12);
    goto LABEL_23;
  }

  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1LL))
  {
    __break(1u);
    return result;
  }

  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }

    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }

      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }

        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v18 < v15)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }

  uint64_t v9 = 0LL;
  memset(v24, 0, sizeof(v24));
  __int128 v23 = 0u;
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  char v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = outlined init with take of (key: String, value: Any)?((uint64_t)&v23, (uint64_t)v22);
  if (*((void *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return outlined destroy of URL?( (uint64_t)v21,  (uint64_t *)&demangling cache variable for type metadata for (key: String, value: Any));
  }

  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }

  return result;
}

uint64_t outlined init with take of (key: String, value: Any)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: String, value: Any)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void OUTLINED_FUNCTION_0_39()
{
}

uint64_t OUTLINED_FUNCTION_2_31( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v12, v11);
}

uint64_t OUTLINED_FUNCTION_3_43()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t OUTLINED_FUNCTION_8_44(uint64_t a1, unint64_t a2)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 72));
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18SiriLinkFlowPlugin34WFChooseFromListDisambiguationItemVG_So014SASTColumnDatajL0Cs5NeverOTg504_s18def51Plugin28WorkflowWatchSnippetProviderC38cardSectionsi98DetailedSelectionItems33_61898FA910B453E41DDA86F87FAE1D1CLL014disambiguationN011appBundleIdSaySo22mnjl9CGSayAA08h3K22jkL15VG_SStFAiLXEfU_SSTf1cn_n( uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v25 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    uint64_t v4 = (void **)(a1 + 80);
    while (1)
    {
      int64_t v5 = *(v4 - 5);
      uint64_t v6 = (uint64_t)*(v4 - 4);
      uint64_t v7 = (uint64_t)*(v4 - 3);
      unint64_t v8 = *(v4 - 2);
      uint64_t v9 = (uint64_t)*(v4 - 1);
      unint64_t v10 = *v4;
      *(void *)&__int128 v18 = *(v4 - 6);
      *((void *)&v18 + 1) = v5;
      uint64_t v19 = v6;
      uint64_t v20 = v7;
      uint64_t v21 = v8;
      uint64_t v22 = v9;
      __int128 v23 = v10;
      id v11 = v8;
      swift_bridgeObjectRetain(v9);
      id v12 = v10;
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRetain(v7);
      closure #1 in WorkflowWatchSnippetProvider.cardSectionsFromDetailedSelectionItems(disambiguationItems:appBundleId:)( &v18,  &v24);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v13 = swift_bridgeObjectRelease();
      if (v1) {
        break;
      }
      v4 += 7;
      uint64_t v14 = v24;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
      uint64_t v15 = v25[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v15);
      uint64_t v16 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v14);
      specialized ContiguousArray._endMutation()(v16);
      if (!--v2)
      {
        int64_t v5 = v25;
        swift_bridgeObjectRelease();
        return v5;
      }
    }

    swift_bridgeObjectRelease();
    swift_release();
  }

  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }

  return v5;
}

uint64_t WorkflowWatchSnippetProvider.buildSnippetForShowAlert(dialogRequest:shortcutName:appBundleId:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = a5;
  v6[7] = v5;
  void v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return OUTLINED_FUNCTION_6_2((uint64_t)WorkflowWatchSnippetProvider.buildSnippetForShowAlert(dialogRequest:shortcutName:appBundleId:));
}

uint64_t WorkflowWatchSnippetProvider.buildSnippetForShowAlert(dialogRequest:shortcutName:appBundleId:)()
{
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v4 = v0[3];
  id v5 = [objc_allocWithZone(SAAppsLaunchApp) init];
  v0[8] = v5;
  outlined bridged method (mbgnn) of @objc SAAppsLaunchApp.launchId.setter();
  id v6 = v5;
  specialized WorkflowWatchSnippetProvider.makeItemGroup(command:title:appBundleId:)((uint64_t)v6, v4, v3, v2, v1);
  v0[9] = v7;

  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v9 = swift_allocObject(v8, 64LL, 7LL);
  v0[10] = v9;
  *(_OWORD *)(v9 + 16) = xmmword_17E660;
  id v10 = OUTLINED_FUNCTION_26(v9, "okButton");
  id v11 = [v10 title];

  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  *(void *)(v9 + 32) = v12;
  *(void *)(v9 + 40) = v14;
  id v16 = OUTLINED_FUNCTION_26(v15, "cancelButton");
  int64_t v17 = v16;
  if (v16)
  {
    id v18 = OUTLINED_FUNCTION_26((uint64_t)v16, "title");

    int64_t v17 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;
  }

  else
  {
    unint64_t v20 = 0xE000000000000000LL;
  }

  uint64_t v21 = (uint64_t *)v0[7];
  *(void *)(v9 + 48) = v17;
  *(void *)(v9 + 56) = v20;
  uint64_t v22 = OUTLINED_FUNCTION_25_30(*v21);
  unint64_t v26 = v23;
  uint64_t v24 = (void *)swift_task_alloc(v22);
  v0[11] = v24;
  *uint64_t v24 = v0;
  v24[1] = WorkflowWatchSnippetProvider.buildSnippetForShowAlert(dialogRequest:shortcutName:appBundleId:);
  return v26(v9, v0[5], v0[6]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_42_1();
  *(void *)(v1 + 96) = v0;
  OUTLINED_FUNCTION_54_0(v2);
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t result;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSArray v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSArray v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v1 = *(void **)(v0 + 96);
  if (!v1)
  {
LABEL_19:
    uint64_t v22 = *(void **)(v0 + 64);
    __int128 v23 = *(void *)(v0 + 72);
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v25 = OUTLINED_FUNCTION_23_4(v24);
    *(_OWORD *)(v25 + 16) = xmmword_17E150;
    *(void *)(v25 + 32) = v23;
    __int128 v30 = v25;
    OUTLINED_FUNCTION_5_37(v25, v26, v27);

    return OUTLINED_FUNCTION_6_37(v30, *(uint64_t (**)(void))(v0 + 8));
  }

  uint64_t result = outlined bridged method (pb) of @objc SAUIConfirmationOptions.denyText.getter(*(void **)(v0 + 96));
  if (!v3)
  {
    __break(1u);
    goto LABEL_21;
  }

  uint64_t result = OUTLINED_FUNCTION_21_24();
  if (!result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v4 = OUTLINED_FUNCTION_3_44();
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_20();
  uint64_t result = outlined bridged method (pb) of @objc SAUIConfirmationOptions.confirmText.getter(v1);
  if (!v5)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t result = OUTLINED_FUNCTION_20_31();
  if (!result)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  id v6 = result;
  uint64_t v7 = OUTLINED_FUNCTION_3_44();
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_20();
  uint64_t v8 = v7;
  uint64_t result = OUTLINED_FUNCTION_29_22();
  char v28 = result;
  if (!result)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  OUTLINED_FUNCTION_10_33();
  OUTLINED_FUNCTION_4_39();
  if (v10) {
    OUTLINED_FUNCTION_0_40(v6 + 1, v9);
  }
  id v11 = OUTLINED_FUNCTION_17_34();
  OUTLINED_FUNCTION_5_37(v11, v12, v13);
  if (v28)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
    v14.super.Class isa = OUTLINED_FUNCTION_8_45().super.isa;
    OUTLINED_FUNCTION_2_6();
  }

  else
  {
    v14.super.Class isa = 0LL;
  }

  uint64_t v15 = *(void *)(v0 + 72);
  OUTLINED_FUNCTION_13_29();

  id v16 = v4;
  uint64_t result = OUTLINED_FUNCTION_27_25();
  __int128 v29 = result;
  if (result)
  {
    OUTLINED_FUNCTION_10_33();
    OUTLINED_FUNCTION_4_39();
    if (v10) {
      OUTLINED_FUNCTION_0_40(v15 + 1, v17);
    }
    id v18 = OUTLINED_FUNCTION_18_31();
    OUTLINED_FUNCTION_5_37(v18, v19, v20);
    if (v29)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
      v21.super.Class isa = OUTLINED_FUNCTION_8_45().super.isa;
      OUTLINED_FUNCTION_2_6();
    }

    else
    {
      v21.super.Class isa = 0LL;
    }

    OUTLINED_FUNCTION_22_24(*(void **)(v0 + 72));

    goto LABEL_19;
  }

uint64_t WorkflowWatchSnippetProvider.buildSnippetForConfirmInteraction(dialogRequest:shortcutName:appBundleId:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[9] = a5;
  v6[10] = v5;
  v6[7] = a3;
  v6[8] = a4;
  v6[5] = a1;
  v6[6] = a2;
  uint64_t v7 = type metadata accessor for CATOption(0LL);
  v6[11] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowWatchSnippetProvider.buildSnippetForConfirmInteraction(dialogRequest:shortcutName:appBundleId:)()
{
  id v1 = OUTLINED_FUNCTION_28_20();
  v0[12] = [v1 intent];

  id v2 = OUTLINED_FUNCTION_28_20();
  v0[13] = [v2 intentResponse];

  uint64_t v3 = (void *)swift_task_alloc(dword_21BFFC);
  v0[14] = v3;
  *uint64_t v3 = v0;
  v3[1] = WorkflowWatchSnippetProvider.buildSnippetForConfirmInteraction(dialogRequest:shortcutName:appBundleId:);
  uint64_t v4 = OUTLINED_FUNCTION_160();
  return WorkflowWatchSnippetProvider.makeIntentSnippet(intent:intentResponse:shortcutName:)(v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_42_1();
  *(void *)(v1 + 120) = v0;
  OUTLINED_FUNCTION_54_0(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v15;
  if (*(void *)(v0 + 120))
  {
    id v1 = *(void *)(v0 + 88);
    id v2 = *(void **)(v0 + 96);
    uint64_t v3 = *(void *)(v0 + 80);
    uint64_t v4 = type metadata accessor for RunVoiceCommandCATs(0LL);
    static CATOption.defaultMode.getter(v4);
    uint64_t v5 = CATWrapper.__allocating_init(options:globals:)(v1, 0LL);
    id v6 = type metadata accessor for CATButtonLabelTemplating();
    uint64_t inited = swift_initStackObject(v6, v0 + 16);
    *(void *)(v0 + 128) = inited;
    *(void *)(inited + 16) = v5;
    uint64_t v8 = v3 + 16;
    uint64_t v9 = [v2 verb];
    id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    *(void *)(v0 + 136) = v12;
    uint64_t v13 = (void *)swift_task_alloc(dword_21A25C);
    *(void *)(v0 + 144) = v13;
    *uint64_t v13 = v0;
    v13[1] = WorkflowWatchSnippetProvider.buildSnippetForConfirmInteraction(dialogRequest:shortcutName:appBundleId:);
    return CATButtonLabelTemplating.getYesAndCancelButtonTemplates(deviceState:intentVerb:)(v8, v10, v12);
  }

  else
  {
    uint64_t v15 = *(void **)(v0 + 96);

    swift_task_dealloc();
    return OUTLINED_FUNCTION_13_7((uint64_t)_swiftEmptyArrayStorage, *(uint64_t (**)(void))(v0 + 8));
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_42_1();
  *(void *)(v1 + 168) = v0;
  OUTLINED_FUNCTION_54_0(v2);
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t result;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSArray v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSArray v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v1 = *(void **)(v0 + 168);
  if (!v1)
  {
LABEL_19:
    __int128 v23 = *(void *)(v0 + 120);
    uint64_t v22 = *(void *)(v0 + 128);
    uint64_t v25 = *(void **)(v0 + 96);
    uint64_t v24 = *(void **)(v0 + 104);
    unint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    unint64_t v27 = OUTLINED_FUNCTION_23_4(v26);
    *(_OWORD *)(v27 + 16) = xmmword_17E150;
    *(void *)(v27 + 32) = v23;
    uint64_t v32 = v27;
    OUTLINED_FUNCTION_5_37(v27, v28, v29);
    swift_setDeallocating(v22);
    swift_release();

    swift_task_dealloc();
    return OUTLINED_FUNCTION_6_37(v32, *(uint64_t (**)(void))(v0 + 8));
  }

  uint64_t result = outlined bridged method (pb) of @objc SAUIConfirmationOptions.denyText.getter(*(void **)(v0 + 168));
  if (!v3)
  {
    __break(1u);
    goto LABEL_21;
  }

  uint64_t result = OUTLINED_FUNCTION_21_24();
  if (!result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v4 = OUTLINED_FUNCTION_3_44();
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_20();
  uint64_t result = outlined bridged method (pb) of @objc SAUIConfirmationOptions.confirmText.getter(v1);
  if (!v5)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t result = OUTLINED_FUNCTION_20_31();
  if (!result)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  id v6 = result;
  uint64_t v7 = OUTLINED_FUNCTION_3_44();
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_20();
  uint64_t v8 = v7;
  uint64_t result = OUTLINED_FUNCTION_29_22();
  __int128 v30 = result;
  if (!result)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  OUTLINED_FUNCTION_10_33();
  OUTLINED_FUNCTION_4_39();
  if (v10) {
    OUTLINED_FUNCTION_0_40(v6 + 1, v9);
  }
  id v11 = OUTLINED_FUNCTION_17_34();
  OUTLINED_FUNCTION_5_37(v11, v12, v13);
  if (v30)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
    v14.super.Class isa = OUTLINED_FUNCTION_8_45().super.isa;
    OUTLINED_FUNCTION_2_6();
  }

  else
  {
    v14.super.Class isa = 0LL;
  }

  uint64_t v15 = *(void *)(v0 + 120);
  OUTLINED_FUNCTION_13_29();

  id v16 = v4;
  uint64_t result = OUTLINED_FUNCTION_27_25();
  uint64_t v31 = result;
  if (result)
  {
    OUTLINED_FUNCTION_10_33();
    OUTLINED_FUNCTION_4_39();
    if (v10) {
      OUTLINED_FUNCTION_0_40(v15 + 1, v17);
    }
    id v18 = OUTLINED_FUNCTION_18_31();
    OUTLINED_FUNCTION_5_37(v18, v19, v20);
    if (v31)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
      v21.super.Class isa = OUTLINED_FUNCTION_8_45().super.isa;
      OUTLINED_FUNCTION_2_6();
    }

    else
    {
      v21.super.Class isa = 0LL;
    }

    OUTLINED_FUNCTION_22_24(*(void **)(v0 + 120));

    goto LABEL_19;
  }

uint64_t WorkflowWatchSnippetProvider.buildSnippetForConfirmInteraction(dialogRequest:shortcutName:appBundleId:)( uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(*(void *)v1 + 80LL);
  uint64_t v9 = *(void **)v1;
  v9[19] = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v4 = OUTLINED_FUNCTION_25_30(*v3);
  uint64_t v8 = v5;
  id v6 = (void *)swift_task_alloc(v4);
  v9[20] = v6;
  *id v6 = v9;
  v6[1] = WorkflowWatchSnippetProvider.buildSnippetForConfirmInteraction(dialogRequest:shortcutName:appBundleId:);
  return v8(a1, v9[8], v9[9]);
}

uint64_t WorkflowWatchSnippetProvider.makeDisambiguationViews(disambiguationItems:shortcutName:appBundleId:utteranceViews:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a4;
  v5[5] = a5;
  v5[3] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)WorkflowWatchSnippetProvider.makeDisambiguationViews(disambiguationItems:shortcutName:appBundleId:utteranceViews:));
}

uint64_t WorkflowWatchSnippetProvider.makeDisambiguationViews(disambiguationItems:shortcutName:appBundleId:utteranceViews:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain(*(void *)(v0 + 40));
  uint64_t v2 = (uint64_t)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18SiriLinkFlowPlugin34WFChooseFromListDisambiguationItemVG_So014SASTColumnDatajL0Cs5NeverOTg504_s18def51Plugin28WorkflowWatchSnippetProviderC38cardSectionsi98DetailedSelectionItems33_61898FA910B453E41DDA86F87FAE1D1CLL014disambiguationN011appBundleIdSaySo22mnjl9CGSayAA08h3K22jkL15VG_SStFAiLXEfU_SSTf1cn_n(v1);
  id v3 = [objc_allocWithZone(SASTItemGroup) init];
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0) {
      uint64_t v11 = v2;
    }
    else {
      uint64_t v11 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
    uint64_t v5 = _bridgeCocoaArray<A>(_:)(v11, v12);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRetain(v2);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v4);
    uint64_t v5 = v2;
  }

  swift_bridgeObjectRelease();
  outlined bridged method (mbnn) of @objc SASTItemGroup.templateItems.setter(v5, v3);
  [v3 setCanUseServerTTS:1];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = OUTLINED_FUNCTION_23_4(v6);
  *(_OWORD *)(v7 + 16) = xmmword_17E150;
  *(void *)(v7 + 32) = v3;
  uint64_t v13 = v7;
  specialized Array._endMutation()(v7, v8, v9);
  return OUTLINED_FUNCTION_13_7(v13, *(uint64_t (**)(void))(v0 + 8));
}

Swift::Bool __swiftcall WorkflowWatchSnippetProvider.shouldShowSnippet(intent:)(INIntent intent)
{
  uint64_t v1 = (char *)-[objc_class _intentCategory](intent.super.isa, "_intentCategory");
  return v1 != (_BYTE *)&dword_C + 2 && v1 != (_BYTE *)&dword_10 + 1;
}

void closure #1 in WorkflowWatchSnippetProvider.cardSectionsFromDetailedSelectionItems(disambiguationItems:appBundleId:)( __int128 *a1@<X0>, void *a2@<X8>)
{
  __int128 v2 = a1[1];
  __int128 v33 = *a1;
  __int128 v34 = v2;
  __int128 v35 = a1[2];
  uint64_t v36 = *((void *)a1 + 6);
  id v3 = [objc_allocWithZone(SAUIDecoratedText) init];
  specialized DisambiguationItemProtocol.toDisplayString()();
  outlined bridged method (mbnn) of @objc SAUIDecoratedText.text.setter(v4, v5, v3);
  id v6 = [objc_allocWithZone(SASTCommandTemplateAction) init];
  unint64_t v27 = (void *)v35;
  id v7 = static SLFDisambiguationItemConverter.toDirectInvocationPayload(title:)(v33, *((void **)&v33 + 1));
  static Device.current.getter(v30, v7);
  uint64_t v8 = v31;
  uint64_t v9 = v32;
  __swift_project_boxed_opaque_existential_1(v30, v31);
  id v10 = (void *)DeviceState.asInvocationContext.getter(v8, v9);
  [v10 setInputOrigin:SAInputOriginDialogButtonTapValue];
  uint64_t v11 = (void *)objc_opt_self(&OBJC_CLASS___SKIDirectInvocation);
  char v28 = v7;
  id v12 = [v11 runSiriKitExecutorCommandWithContext:v10 payload:v7];
  id v13 = [objc_allocWithZone(SAIntentGroupSiriKitAppSelectionState) init];
  id v14 = [objc_allocWithZone(SASyncAppIdentifyingInfo) init];
  NSString v15 = String._bridgeToObjectiveC()();
  [v14 setBundleId:v15];

  [v13 setRequestedApp:v14];
  [v12 setAppSelectionState:v13];

  id v16 = [v11 wrapCommandInStartLocalRequest:v12];
  __swift_destroy_boxed_opaque_existential_1Tm(v30);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v18 = swift_allocObject(v17, 40LL, 7LL);
  *(_OWORD *)(v18 + 16) = xmmword_17E150;
  *(void *)(v18 + 32) = v16;
  v30[0] = v18;
  specialized Array._endMutation()(v18, v19, v20);
  uint64_t v21 = v30[0];
  id v22 = v16;
  outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v21, v6);
  id v23 = [objc_allocWithZone(SASTColumnDataListItem) init];
  [v23 setTitle:v3];
  [v23 setAction:v6];
  if (v27)
  {
    id v24 = v27;
    static OutputUtils.buildNanoImage(from:)(v24);
    id v26 = v25;
    [v23 setImageResource:v26];
  }

  *a2 = v23;
}

uint64_t WorkflowWatchSnippetProvider.makeIntentSnippet(intent:intentResponse:shortcutName:)( uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  void v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)WorkflowWatchSnippetProvider.makeIntentSnippet(intent:intentResponse:shortcutName:));
}

uint64_t WorkflowWatchSnippetProvider.makeIntentSnippet(intent:intentResponse:shortcutName:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  id v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "#WorkflowWatchSnippetProvider building intents snippet", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 24);

  if (!v6) {
    goto LABEL_9;
  }
  id v7 = *(void **)(v0 + 16);
  id v8 = *(id *)(v0 + 24);
  uint64_t v9 = outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(v7);
  if (!v10)
  {

LABEL_9:
    uint64_t v27 = 0LL;
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v27);
  }

  uint64_t v11 = v9;
  uint64_t v12 = v10;
  uint64_t v13 = *(void *)(v0 + 24);
  id v14 = *(void **)(v0 + 16);
  type metadata accessor for App(0LL);
  swift_bridgeObjectRetain(v12);
  uint64_t v15 = OUTLINED_FUNCTION_160();
  uint64_t v17 = App.__allocating_init(appIdentifier:)(v15, v16);
  type metadata accessor for SAIntentGroupLaunchAppWithIntent();
  id v18 = v8;
  uint64_t v19 = (void *)static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)(v17, v14, v13);

  static LocaleUtils.siriLanguageCode()();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v21 = [v14 _titleForLanguage:v20];

  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;

  id v25 = v19;
  specialized WorkflowWatchSnippetProvider.makeItemGroup(command:title:appBundleId:)((uint64_t)v25, v22, v24, v11, v12);
  uint64_t v27 = v26;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v27);
}

id WorkflowWatchSnippetProvider.makeBodyText(intentTitle:)(uint64_t a1, uint64_t a2)
{
  id v4 = [objc_allocWithZone(SAUIDecoratedText) init];
  outlined bridged method (mbgnn) of @objc SAUIDecoratedText.text.setter(a1, a2, v4);
  id v5 = [objc_allocWithZone(SASTLineDetailItem) init];
  [v5 setTitle:v4];

  return v5;
}

id WorkflowWatchSnippetProvider.getButtonItemForLabel(label:commands:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = OUTLINED_FUNCTION_15_23(objc_allocWithZone(&OBJC_CLASS___SAUIDecoratedText));
  outlined bridged method (mbgnn) of @objc SAUIDecoratedText.text.setter(a1, a2, v6);
  id v7 = OUTLINED_FUNCTION_15_23(objc_allocWithZone(&OBJC_CLASS___SASTCommandTemplateAction));
  outlined bridged method (mbgnn) of @objc SASTCommandTemplateAction.commands.setter(a3, v7);
  id v8 = OUTLINED_FUNCTION_15_23(objc_allocWithZone(&OBJC_CLASS___SASTButtonItem));
  [v8 setDecoratedLabel:v6];
  [v8 setCentered:1];
  [v8 setAction:v7];

  return v8;
}

void outlined bridged method (mbgnn) of @objc SAUIDecoratedText.text.setter( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setText:v4];
}

void outlined bridged method (mbgnn) of @objc SASTApplicationBannerItem.bundleId.setter( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setBundleId:v4];
}

void outlined bridged method (mbgnn) of @objc SASTCommandTemplateAction.commands.setter( uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [a2 setCommands:isa];
}

uint64_t type metadata accessor for WorkflowWatchSnippetProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin28WorkflowWatchSnippetProvider);
}

void specialized WorkflowWatchSnippetProvider.makeItemGroup(command:title:appBundleId:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  OUTLINED_FUNCTION_10_33();
  unint64_t v8 = *(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
  unint64_t v7 = *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
  if (v8 >= v7 >> 1) {
    OUTLINED_FUNCTION_0_40(v8 + 1, v7);
  }
  uint64_t v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v6);
  OUTLINED_FUNCTION_5_37(v9, v10, v11);
  uint64_t v12 = OUTLINED_FUNCTION_160();
  WorkflowWatchSnippetProvider.makeBodyText(intentTitle:)(v12, v13);
  OUTLINED_FUNCTION_10_33();
  unint64_t v15 = *(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
  unint64_t v14 = *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
  if (v15 >= v14 >> 1) {
    OUTLINED_FUNCTION_0_40(v15 + 1, v14);
  }
  uint64_t v16 = OUTLINED_FUNCTION_160();
  uint64_t v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v17);
  OUTLINED_FUNCTION_5_37(v18, v19, v20);
  outlined bridged method (mbnn) of @objc SASTItemGroup.templateItems.setter( (uint64_t)_swiftEmptyArrayStorage,  [objc_allocWithZone(SASTItemGroup) init]);
  OUTLINED_FUNCTION_5_30();
}

void specialized WorkflowWatchSnippetProvider.makeApplicationBanner(appBundleId:command:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = OUTLINED_FUNCTION_15_23(objc_allocWithZone(&OBJC_CLASS___SASTApplicationBannerItem));
  outlined bridged method (mbgnn) of @objc SASTApplicationBannerItem.bundleId.setter(a1, a2, v6);
  id v7 = OUTLINED_FUNCTION_15_23(objc_allocWithZone(&OBJC_CLASS___SASTCommandTemplateAction));
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = OUTLINED_FUNCTION_23_4(v8);
  *(_OWORD *)(v9 + 16) = xmmword_17E150;
  *(void *)(v9 + 32) = a3;
  uint64_t v12 = v9;
  OUTLINED_FUNCTION_5_37(v9, v10, v11);
  swift_unknownObjectRetain(a3);
  outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v12, v7);
  [v6 setAction:v7];

  OUTLINED_FUNCTION_5_30();
}

uint64_t OUTLINED_FUNCTION_0_40@<X0>(uint64_t a1@<X1>, unint64_t a2@<X8>)
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a2 > 1, a1, 1LL);
}

id OUTLINED_FUNCTION_3_44()
{
  return WorkflowWatchSnippetProvider.getButtonItemForLabel(label:commands:)(v1, v0, v2);
}

  ;
}

uint64_t OUTLINED_FUNCTION_5_37(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Array._endMutation()(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_6_37(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

NSArray OUTLINED_FUNCTION_8_45()
{
  return Array._bridgeToObjectiveC()();
}

uint64_t OUTLINED_FUNCTION_10_33()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

id OUTLINED_FUNCTION_13_29()
{
  return [v1 setTemplateItems:v0];
}

id OUTLINED_FUNCTION_15_23(void *a1)
{
  return [a1 *(SEL *)(v1 + 3592)];
}

uint64_t OUTLINED_FUNCTION_17_34()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_18_31()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_20_31()
{
  return outlined bridged method (pb) of @objc SAUIConfirmationOptions.confirmCommands.getter(v0);
}

uint64_t OUTLINED_FUNCTION_21_24()
{
  return outlined bridged method (pb) of @objc SAUIConfirmationOptions.denyCommands.getter(v0);
}

id OUTLINED_FUNCTION_22_24(void *a1)
{
  return objc_msgSend(a1, *(SEL *)(v2 + 2888), v1);
}

uint64_t OUTLINED_FUNCTION_25_30@<X0>(uint64_t a1@<X8>)
{
  return *(unsigned int *)(*(void *)(a1 + 168) + 4LL);
}

uint64_t OUTLINED_FUNCTION_27_25()
{
  return outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(v0);
}

id OUTLINED_FUNCTION_28_20()
{
  return [v0 *(SEL *)(v1 + 1760)];
}

uint64_t OUTLINED_FUNCTION_29_22()
{
  return outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(v0);
}

ValueMetadata *type metadata accessor for InputCompletionState()
{
  return &type metadata for InputCompletionState;
}

ValueMetadata *type metadata accessor for InputCompletionStateType()
{
  return &type metadata for InputCompletionStateType;
}

uint64_t DescribeCustomIntentItemViewBuilder.__allocating_init(viewFactory:)(uint64_t a1)
{
  uint64_t result = OUTLINED_FUNCTION_19(v1, 24LL);
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t DescribeCustomIntentItemOutputProvider.__allocating_init(item:templating:viewBuilder:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return DescribeCustomIntentItemOutputProvider.__allocating_init(item:templating:viewBuilder:)( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t))specialized DescribeCustomIntentItemOutputProvider.__allocating_init(item:templating:viewBuilder:));
}

void DescribeCustomIntentItemCatTemplater.makeTemplate(item:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v7 = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  static DialogHelper.globals.getter();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject(v8, v20);
  *(_OWORD *)(inited + 16) = xmmword_17E650;
  *(void *)(inited + 32) = 1835365481LL;
  *(void *)(inited + 40) = 0xE400000000000000LL;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 56) = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v10 = (void *)Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  uint64_t v11 = (void *)objc_opt_self(&OBJC_CLASS___CAT);
  NSString v12 = String._bridgeToObjectiveC()();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v10);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v14 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  unint64_t v15 = (void *)OUTLINED_FUNCTION_19((uint64_t)&unk_1FB770, 48LL);
  v15[2] = a3;
  v15[3] = a4;
  v15[4] = 0xD000000000000028LL;
  void v15[5] = 0x8000000000191330LL;
  aBlock[4] = partial apply for closure #1 in DescribeCustomIntentItemCatTemplater.makeTemplate(item:_:);
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed CATResult, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_5;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain(a4);
  swift_release();
  [v11 execute:v7 catId:v12 parameters:isa globals:v14 completion:v16];
  _Block_release(v16);
}

uint64_t closure #1 in DescribeCustomIntentItemCatTemplater.makeTemplate(item:_:)( void *a1, uint64_t a2, void (*a3)(void *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = a5;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v10);
  NSString v12 = (void (**)(void *))((char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2)
  {
    *NSString v12 = a2;
    swift_storeEnumTagMultiPayload(v12, v10, 1LL);
    swift_errorRetain(a2);
    a3(v12);
    return outlined destroy of URL?( (uint64_t)v12,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  }

  else
  {
    id v18 = objc_msgSend(a1, "print", swift_bridgeObjectRetain(a6).n128_f64[0]);
    uint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, &type metadata for String);
    uint64_t v23 = a3;
    uint64_t v20 = v19;

    id v21 = [a1 speak];
    uint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, &type metadata for String);

    TemplatingResult.init(dialogId:print:speak:)(v24, a6, v20, v22, (uint64_t)v16);
    (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v12, v16, v13);
    swift_storeEnumTagMultiPayload(v12, v10, 0LL);
    v23(v12);
    outlined destroy of URL?( (uint64_t)v12,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }

uint64_t DescribeCustomIntentItemViewBuilder.makeViews(withTemplate:)(uint64_t a1)
{
  uint64_t v1 = dispatch thunk of ViewFactory.makeSummaryView(templateResult:snippets:listenAfterSpeaking:canUseServerTTS:)( a1,  _swiftEmptyArrayStorage,  0LL,  1LL);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v3 = OUTLINED_FUNCTION_19(v2, 40LL);
  *(_OWORD *)(v3 + 16) = xmmword_17E150;
  *(void *)(v3 + 32) = v1;
  uint64_t v7 = v3;
  specialized Array._endMutation()(v3, v4, v5);
  return v7;
}

uint64_t DescribeCustomIntentItemOutputProvider.init(item:templating:viewBuilder:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return DescribeCustomIntentItemOutputProvider.__allocating_init(item:templating:viewBuilder:)( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t))specialized DescribeCustomIntentItemOutputProvider.init(item:templating:viewBuilder:));
}

uint64_t DescribeCustomIntentItemOutputProvider.__allocating_init(item:templating:viewBuilder:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11 = a4[3];
  uint64_t v12 = a4[4];
  uint64_t v13 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a4, v11);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v16 + 16))(v15);
  uint64_t v17 = a5(a1, a2, a3, v15, v5, v11, v12);
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  return v17;
}

uint64_t DescribeCustomIntentItemOutputProvider.makeOutput(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[12];
  uint64_t v6 = v2[13];
  __swift_project_boxed_opaque_existential_1(v2 + 9, v5);
  uint64_t v7 = v2[2];
  uint64_t v8 = v2[3];
  uint64_t v9 = (void *)OUTLINED_FUNCTION_19((uint64_t)&unk_1FB7C0, 40LL);
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = v2;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t), void *, uint64_t, uint64_t))(v6 + 8);
  swift_retain(a2);
  swift_retain(v2);
  v10(v7, v8, partial apply for closure #1 in DescribeCustomIntentItemOutputProvider.makeOutput(_:), v9, v5, v6);
  return swift_release();
}

uint64_t closure #1 in DescribeCustomIntentItemOutputProvider.makeOutput(_:)( uint64_t a1, void (*a2)(__int128 *), uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for AceOutput(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v33 = v7;
  uint64_t v34 = v8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v15);
  uint64_t v17 = (uint64_t *)((char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)v17);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    *(void *)&__int128 v35 = *v17;
    uint64_t v18 = v35;
    char v38 = 1;
    swift_errorRetain(v35);
    a2(&v35);
    swift_errorRelease(v18);
  }

  else
  {
    uint64_t v31 = v12;
    uint64_t v32 = v11;
    (*(void (**)(char *, void *, uint64_t))(v12 + 32))(v14, v17, v11);
    uint64_t v19 = a4[7];
    uint64_t v20 = a4[8];
    __swift_project_boxed_opaque_existential_1(a4 + 4, v19);
    uint64_t v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 8))(v14, v19, v20);
    uint64_t v22 = v21;
    if ((unint64_t)v21 >> 62)
    {
      if (v21 < 0) {
        uint64_t v29 = v21;
      }
      else {
        uint64_t v29 = v21 & 0xFFFFFFFFFFFFFF8LL;
      }
      unint64_t v30 = type metadata accessor for SABaseCommand();
      uint64_t v24 = _bridgeCocoaArray<A>(_:)(v29, v30);
    }

    else
    {
      swift_bridgeObjectRetain(v21);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v23);
      type metadata accessor for SABaseCommand();
      uint64_t v24 = v22;
    }

    swift_bridgeObjectRelease();
    __int128 v37 = 0LL;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    AceOutput.init(commands:flowActivity:)(v24, &v35);
    uint64_t v25 = v33;
    *((void *)&v36 + 1) = v33;
    __int128 v37 = &protocol witness table for AceOutput;
    uint64_t v26 = __swift_allocate_boxed_opaque_existential_1(&v35);
    uint64_t v27 = v34;
    (*(void (**)(void *, char *, uint64_t))(v34 + 16))(v26, v10, v25);
    char v38 = 0;
    a2(&v35);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v25);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v32);
  }

  return outlined destroy of URL?((uint64_t)&v35, &demangling cache variable for type metadata for Result<Output, Error>);
}

void *specialized DescribeCustomIntentItemOutputProvider.__allocating_init(item:templating:viewBuilder:)( uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(a6 - 8);
  __chkstk_darwin(a1);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DescribeCustomIntentItemOutputProvider();
  uint64_t v17 = (void *)swift_allocObject(v16, 112LL, 7LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a4, a6);
  uint64_t v18 = specialized DescribeCustomIntentItemOutputProvider.init(item:templating:viewBuilder:)( a1,  a2,  a3,  (uint64_t)v15,  v17,  a6,  a7);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a4, a6);
  return v18;
}

uint64_t sub_109810()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t partial apply for closure #1 in DescribeCustomIntentItemCatTemplater.makeTemplate(item:_:)( void *a1, uint64_t a2)
{
  return closure #1 in DescribeCustomIntentItemCatTemplater.makeTemplate(item:_:)( a1,  a2,  *(void (**)(void *))(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40));
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_3(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void *specialized DescribeCustomIntentItemOutputProvider.init(item:templating:viewBuilder:)( uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  a5[7] = a6;
  a5[8] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5 + 4);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32LL))(boxed_opaque_existential_1, a4, a6);
  a5[2] = a1;
  a5[3] = a2;
  outlined init with take of AceServiceInvokerAsync(a3, (uint64_t)(a5 + 9));
  return a5;
}

uint64_t sub_1098D4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t partial apply for closure #1 in DescribeCustomIntentItemOutputProvider.makeOutput(_:)(uint64_t a1)
{
  return closure #1 in DescribeCustomIntentItemOutputProvider.makeOutput(_:)( a1,  *(void (**)(__int128 *))(v1 + 16),  *(void *)(v1 + 24),  *(void **)(v1 + 32));
}

uint64_t type metadata accessor for DescribeCustomIntentItemCatTemplater()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin36DescribeCustomIntentItemCatTemplater);
}

uint64_t type metadata accessor for DescribeCustomIntentItemViewBuilder()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin35DescribeCustomIntentItemViewBuilder);
}

uint64_t type metadata accessor for DescribeCustomIntentItemOutputProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin38DescribeCustomIntentItemOutputProvider);
}

uint64_t ActionPerformedVisual.init(appBundleId:prompt:viewData:deviceState:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, void *a7@<X6>, void *a8@<X8>)
{
  uint64_t v15 = specialized App.toAppDisplayName(_:appInfoResolving:isFirstParty:)((uint64_t)a7, 2);
  uint64_t v17 = v16;
  swift_release();
  outlined consume of Data._Representation(a5, a6);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(a7);
  *a8 = a1;
  a8[1] = a2;
  a8[2] = v15;
  a8[3] = v17;
  a8[4] = a3;
  a8[5] = a4;
  a8[6] = a5;
  a8[7] = a6;
  return result;
}

uint64_t ActionPerformedVisual.data.getter()
{
  uint64_t v1 = type metadata accessor for Response(0LL);
  v0[2] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[3] = v2;
  uint64_t v3 = OUTLINED_FUNCTION_9_0(v2);
  v0[4] = v3;
  uint64_t v4 = (void *)swift_task_alloc(dword_21C33C);
  v0[5] = v4;
  *uint64_t v4 = v0;
  v4[1] = AutoShortcutAppEnabledVisual.data.getter;
  return ActionPerformedVisual.response.getter(v3);
}

uint64_t ActionPerformedVisual.response.getter(uint64_t a1)
{
  v2[39] = a1;
  v2[40] = v1;
  uint64_t v3 = type metadata accessor for SeparatorStyle(0LL);
  v2[41] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[42] = v4;
  v2[43] = OUTLINED_FUNCTION_4_0(v4);
  v2[44] = OUTLINED_FUNCTION_11_0();
  uint64_t v5 = type metadata accessor for Separators(0LL);
  v2[45] = OUTLINED_FUNCTION_9_0(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for ComponentWrapper(0LL);
  v2[46] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[47] = v7;
  v2[48] = OUTLINED_FUNCTION_4_0(v7);
  v2[49] = OUTLINED_FUNCTION_11_0();
  uint64_t v8 = type metadata accessor for CustomCanvas(0LL);
  v2[50] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[51] = v9;
  v2[52] = OUTLINED_FUNCTION_4_0(v9);
  v2[53] = OUTLINED_FUNCTION_11_0();
  v2[54] = OUTLINED_FUNCTION_11_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t ActionPerformedVisual.response.getter()
{
  uint64_t v1 = *(uint64_t **)(v0 + 320);
  uint64_t v2 = v1[5];
  p_ivar_lyt = &VoiceCommandsNLIntent.VoiceCommandContactIntentNode.ivar_lyt;
  if (v2)
  {
    uint64_t v4 = v1[4];
    uint64_t v5 = one-time initialization token for encoder;
    swift_bridgeObjectRetain(v1[5]);
    if (v5 != -1) {
      swift_once(&one-time initialization token for encoder, one-time initialization function for encoder);
    }
    *(void *)(v0 + 104) = v4;
    *(void *)(v0 + 112) = v2;
    *(_OWORD *)(v0 + 120) = 0u;
    *(_OWORD *)(v0 + 136) = 0u;
    *(_OWORD *)(v0 + 152) = 0u;
    *(_OWORD *)(v0 + 168) = 0u;
    *(_BYTE *)(v0 + 184) = 5;
    lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
    uint64_t v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 104);
    uint64_t v7 = *(void *)(v0 + 432);
    uint64_t v8 = *(void *)(v0 + 400);
    uint64_t v52 = *(void *)(v0 + 408);
    uint64_t v54 = *(void *)(v0 + 392);
    uint64_t v62 = *(void **)(v0 + 384);
    unint64_t v65 = (__int128 *)(v0 + 272);
    uint64_t v9 = *(void *)(v0 + 360);
    uint64_t v57 = *(void *)(v0 + 376);
    uint64_t v60 = *(void *)(v0 + 368);
    uint64_t v11 = *(void *)(v0 + 344);
    uint64_t v10 = *(void *)(v0 + 352);
    uint64_t v13 = *(void *)(v0 + 328);
    uint64_t v12 = *(void *)(v0 + 336);
    OUTLINED_FUNCTION_2_32(0x8000000000192DE0LL, 0xD000000000000014LL, v6, v14, (uint64_t)"SiriLinkUIPlugin");
    *(void *)(v0 + 256) = v8;
    *(void *)(v0 + 264) = &protocol witness table for CustomCanvas;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v0 + 232));
    (*(void (**)(void *, uint64_t, uint64_t))(v52 + 16))(boxed_opaque_existential_1, v7, v8);
    uint64_t v16 = *(void (**)(uint64_t, void, uint64_t))(v12 + 104);
    v16(v10, enum case for SeparatorStyle.edgeToEdge(_:), v13);
    v16(v11, enum case for SeparatorStyle.standard(_:), v13);
    Separators.init(top:bottom:)(v11, v10);
    ComponentWrapper.init(_:separators:)(v0 + 232, v9);
    uint64_t v17 = *(void (**)(void *, uint64_t, uint64_t))(v57 + 16);
    v17(v62, v54, v60);
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v19 = v18;
    unint64_t v20 = v18[2];
    if (v20 >= v18[3] >> 1)
    {
      OUTLINED_FUNCTION_4_40();
      uint64_t v19 = v46;
    }

    uint64_t v61 = *(void *)(v0 + 400);
    uint64_t v63 = *(void *)(v0 + 432);
    uint64_t v21 = *(void *)(v0 + 384);
    uint64_t v55 = *(void *)(v0 + 392);
    uint64_t v58 = *(void *)(v0 + 408);
    uint64_t v23 = *(void *)(v0 + 368);
    uint64_t v22 = *(void *)(v0 + 376);
    *(void *)(v0 + 296) = v23;
    *(void *)(v0 + 304) = &protocol witness table for ComponentWrapper;
    uint64_t v24 = __swift_allocate_boxed_opaque_existential_1(v65);
    v17(v24, v21, v23);
    void v19[2] = v20 + 1;
    outlined init with take of AceServiceInvokerAsync(v65, (uint64_t)&v19[5 * v20 + 4]);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v25(v21, v23);
    OUTLINED_FUNCTION_1_2();
    v25(v55, v23);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v63, v61);
    uint64_t v1 = *(uint64_t **)(v0 + 320);
    p_ivar_lyt = (void **)(&VoiceCommandsNLIntent.VoiceCommandContactIntentNode + 16);
  }

  else
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
  }

  uint64_t v26 = v1[6];
  unint64_t v27 = v1[7];
  uint64_t v29 = *v1;
  uint64_t v28 = v1[1];
  uint64_t v31 = v1[2];
  uint64_t v30 = v1[3];
  outlined copy of Data._Representation(v26, v27);
  uint64_t v32 = p_ivar_lyt[22];
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v30);
  *(void *)(v0 + 16) = v26;
  *(void *)(v0 + 24) = v27;
  *(void *)(v0 + 32) = v29;
  *(void *)(v0 + 40) = v28;
  *(void *)(v0 + 48) = v31;
  *(void *)(v0 + 56) = v30;
  lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_BYTE *)(v0 + 96) = 0;
  uint64_t v33 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 16);
  __int128 v35 = *(void **)(v0 + 416);
  uint64_t v34 = *(void *)(v0 + 424);
  uint64_t v36 = *(void *)(v0 + 400);
  uint64_t v37 = *(void *)(v0 + 408);
  OUTLINED_FUNCTION_2_32(0x8000000000192DE0LL, 0xD000000000000014LL, v33, v38, (uint64_t)"SiriLinkUIPlugin");
  uint64_t v39 = *(void (**)(void *, uint64_t, uint64_t))(v37 + 16);
  v39(v35, v34, v36);
  if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
  {
    OUTLINED_FUNCTION_4_40();
    uint64_t v19 = v47;
  }

  unint64_t v40 = v19[2];
  if (v40 >= v19[3] >> 1)
  {
    OUTLINED_FUNCTION_4_40();
    uint64_t v19 = v48;
  }

  uint64_t v41 = *(void *)(v0 + 416);
  uint64_t v50 = *(void *)(v0 + 424);
  uint64_t v51 = *(void *)(v0 + 432);
  uint64_t v42 = *(void *)(v0 + 400);
  uint64_t v53 = *(void *)(v0 + 392);
  uint64_t v56 = *(void *)(v0 + 384);
  uint64_t v59 = *(void *)(v0 + 360);
  uint64_t v64 = *(void *)(v0 + 352);
  uint64_t v66 = *(void *)(v0 + 344);
  uint64_t v49 = *(void *)(v0 + 408);
  *(void *)(v0 + 216) = v42;
  *(void *)(v0 + 224) = &protocol witness table for CustomCanvas;
  uint64_t v43 = __swift_allocate_boxed_opaque_existential_1((void *)(v0 + 192));
  v39(v43, v41, v42);
  void v19[2] = v40 + 1;
  outlined init with take of AceServiceInvokerAsync((__int128 *)(v0 + 192), (uint64_t)&v19[5 * v40 + 4]);
  uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
  v44(v41, v42);
  Response.init(_:backgrounds:ornaments:hideRedactedElements:)( v19,  _swiftEmptyArrayStorage,  _swiftEmptyArrayStorage,  0LL);
  OUTLINED_FUNCTION_8_46();
  swift_bridgeObjectRelease(v28);
  OUTLINED_FUNCTION_1_2();
  v44(v50, v42);
  swift_task_dealloc(v51);
  swift_task_dealloc(v50);
  swift_task_dealloc(v41);
  swift_task_dealloc(v53);
  swift_task_dealloc(v56);
  swift_task_dealloc(v59);
  swift_task_dealloc(v64);
  swift_task_dealloc(v66);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t destroy for ActionPerformedVisual(uint64_t a1)
{
  return outlined consume of Data._Representation(*(void *)(a1 + 48), *(void *)(a1 + 56));
}

void *initializeWithCopy for ActionPerformedVisual(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[6];
  unint64_t v7 = a2[7];
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  outlined copy of Data._Representation(v6, v7);
  a1[6] = v6;
  a1[7] = v7;
  return a1;
}

void *assignWithCopy for ActionPerformedVisual(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  uint64_t v5 = a2[3];
  a1[3] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  uint64_t v6 = a2[5];
  a1[5] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[6];
  unint64_t v7 = a2[7];
  outlined copy of Data._Representation(v8, v7);
  uint64_t v9 = a1[6];
  unint64_t v10 = a1[7];
  a1[6] = v8;
  a1[7] = v7;
  outlined consume of Data._Representation(v9, v10);
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void *assignWithTake for ActionPerformedVisual(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a1[6];
  unint64_t v8 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  outlined consume of Data._Representation(v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionPerformedVisual(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 64))
    {
      LODWORD(__swift_storeEnumTagSinglePayload(v1, 0LL, 1LL, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(__swift_storeEnumTagSinglePayload(v1, 0LL, 1LL, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(__swift_storeEnumTagSinglePayload(v1, 0LL, 1LL, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionPerformedVisual(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ActionPerformedVisual()
{
  return &type metadata for ActionPerformedVisual;
}

uint64_t OUTLINED_FUNCTION_2_32@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  return CustomCanvas.init(bundleName:viewId:viewData:componentName:safeForLogging:requestsKeyWindow:hideConversationKeyline:)( 0xD000000000000010LL,  a1,  a2,  a5 | 0x8000000000000000LL,  a3,  a4,  0LL,  0xE000000000000000LL);
}

void OUTLINED_FUNCTION_4_40()
{
}

uint64_t OUTLINED_FUNCTION_8_46()
{
  return outlined consume of Data._Representation(v0, v1);
}

uint64_t storeEnumTagSinglePayload for CustomIntentFlowErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10A418 + 4 * byte_188B75[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10A44C + 4 * asc_188B70[v4]))();
}

uint64_t sub_10A44C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10A454(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10A45CLL);
  }
  return result;
}

uint64_t sub_10A468(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10A470LL);
  }
  *(_BYTE *)__n128 result = a2 + 2;
  return result;
}

uint64_t sub_10A474(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10A47C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CustomIntentFlowErrors()
{
  return &type metadata for CustomIntentFlowErrors;
}

void *USOConstants.IdentifierNamespaceAutoShortcutBaseTemplate.unsafeMutableAddressor()
{
  return &static USOConstants.IdentifierNamespaceAutoShortcutBaseTemplate;
}

void *USOConstants.IdentifierNamespaceAutoShortcutProperty.unsafeMutableAddressor()
{
  return &static USOConstants.IdentifierNamespaceAutoShortcutProperty;
}

const char *USOValue.accept.unsafeMutableAddressor()
{
  return "accept";
}

const char *USOValue.reject.unsafeMutableAddressor()
{
  return "reject";
}

void *USOConstants.NLBundleId.unsafeMutableAddressor()
{
  return &static USOConstants.NLBundleId;
}

void *USONodes.confirmation.unsafeMutableAddressor()
{
  return &static USONodes.confirmation;
}

void *USOConstants.synonymBundleId.unsafeMutableAddressor()
{
  return &static USOConstants.synonymBundleId;
}

uint64_t static USOValue.accept.getter()
{
  return 0x747065636361LL;
}

uint64_t static USOValue.reject.getter()
{
  return 0x7463656A6572LL;
}

unint64_t static USOConstants.NLBundleId.getter()
{
  return OUTLINED_FUNCTION_0_22(21LL);
}

unint64_t static USOConstants.synonymBundleId.getter()
{
  return OUTLINED_FUNCTION_0_22(27LL);
}

unint64_t static USOConstants.IdentifierNamespaceAutoShortcutBaseTemplate.getter()
{
  return OUTLINED_FUNCTION_0_22(24LL);
}

unint64_t static USOConstants.IdentifierNamespaceAutoShortcutProperty.getter()
{
  return OUTLINED_FUNCTION_0_22(20LL);
}

void type metadata accessor for USOValue()
{
}

void type metadata accessor for USOConstants()
{
}

void type metadata accessor for USONodes()
{
}

uint64_t INCodableAttribute.supportsMultipleValues.getter()
{
  uint64_t result = outlined bridged method (pb) of @objc INCodableDescription.dictionaryRepresentation()(v0);
  if (result)
  {
    specialized Dictionary.subscript.getter(0xD000000000000027LL, 0x8000000000196D30LL, result, &v3);
    swift_bridgeObjectRelease();
    if (v4)
    {
    }

    else
    {
      outlined destroy of Any?((uint64_t)&v3);
    }

    return 0LL;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t LNValueType.getLNValue(usoParse:parameterMetadata:locale:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[61] = a3;
  v4[62] = v3;
  v4[59] = a1;
  v4[60] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>?);
  v4[63] = OUTLINED_FUNCTION_10_8(v5);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  v4[64] = OUTLINED_FUNCTION_10_8(v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  v4[65] = OUTLINED_FUNCTION_10_8(v7);
  uint64_t v8 = type metadata accessor for TimeZone(0LL);
  v4[66] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[67] = v9;
  v4[68] = OUTLINED_FUNCTION_4_0(v9);
  v4[69] = OUTLINED_FUNCTION_11_0();
  v4[70] = OUTLINED_FUNCTION_11_0();
  uint64_t v10 = type metadata accessor for Calendar(0LL);
  v4[71] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[72] = v11;
  v4[73] = OUTLINED_FUNCTION_4_0(v11);
  v4[74] = OUTLINED_FUNCTION_11_0();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v4[75] = OUTLINED_FUNCTION_10_8(v12);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v4[76] = OUTLINED_FUNCTION_10_8(v13);
  uint64_t v14 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  v4[77] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v4[78] = v15;
  v4[79] = OUTLINED_FUNCTION_4_0(v15);
  v4[80] = OUTLINED_FUNCTION_11_0();
  uint64_t v16 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  v4[81] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v4[82] = v17;
  v4[83] = swift_task_alloc((*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v18, v19, v20);
}

uint64_t LNValueType.getLNValue(usoParse:parameterMetadata:locale:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = v1[81];
  uint64_t v4 = v1[80];
  uint64_t v5 = v1[78];
  uint64_t v6 = v2[77];
  uint64_t v7 = v2[76];
  uint64_t v8 = USOParse.userParse.getter(a1);
  uint64_t v9 = Siri_Nlu_External_UserParse.userDialogActs.getter(v8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v10(v4, v6);
  specialized Collection.first.getter(v9, v7);
  swift_bridgeObjectRelease(v9);
  if (__swift_getEnumTagSinglePayload(v7, 1LL, v3) == 1)
  {
    outlined destroy of Any?(v2[76], &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v11 = OUTLINED_FUNCTION_48();
    uint64_t v12 = (void *)OUTLINED_FUNCTION_84(v11, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_45_0(v13))
    {
      *(_WORD *)OUTLINED_FUNCTION_57_1() = 0;
      OUTLINED_FUNCTION_27_0(&dword_0, v14, v15, "#ShortcutsLinkPromptForFlowStrategy: missing UDA");
      OUTLINED_FUNCTION_17();
    }

    uint64_t v107 = 0LL;
  }

  else
  {
    uint64_t v16 = (_WORD *)v2[77];
    uint64_t v17 = (*(uint64_t (**)(void, void, void))(v2[82] + 32LL))(v2[83], v2[76], v2[81]);
    uint64_t v18 = USOParse.userParse.getter(v17);
    uint64_t v19 = Siri_Nlu_External_UserParse.userDialogActs.getter(v18);
    uint64_t v20 = OUTLINED_FUNCTION_129();
    ((void (*)(uint64_t))v10)(v20);
    unint64_t v21 = *(void *)(v19 + 16);
    swift_bridgeObjectRelease(v19);
    if (v21 >= 2)
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v22 = OUTLINED_FUNCTION_48();
      uint64_t v23 = (void *)OUTLINED_FUNCTION_84(v22, (uint64_t)static Logger.voiceCommands);
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_45_0(v24))
      {
        uint64_t v16 = (_WORD *)OUTLINED_FUNCTION_57_1();
        *uint64_t v16 = 0;
        OUTLINED_FUNCTION_27_0( &dword_0,  v25,  v26,  "#ShortcutsLinkPromptForFlowStrategy: more than one task found in UDA");
        OUTLINED_FUNCTION_17();
      }
    }

    id v27 = static LNValueTypeMap.mapLNValueTypeToIntentValueType(valueType:)((void *)v2[62]);
    uint64_t v30 = (uint64_t)v27;
    if (v29)
    {
      if (v29 != 1) {
        __asm { BR              X9 }
      }

      uint64_t v31 = Siri_Nlu_External_UserDialogAct.measurementValue(locale:)(v2[61]);
      char v34 = v33;
      uint64_t v35 = v2[63];
      if (v33 == -1)
      {
        uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>);
        __swift_storeEnumTagSinglePayload(v35, 1LL, 1LL, v74);
      }

      else
      {
        uint64_t v36 = v31;
        uint64_t v37 = v32;
        outlined copy of ParsedMeasurement(v31, v32, v33 & 1);
        ParsedMeasurement.toMeasurement(unitType:parameterMetadata:)(v30, v36, v37, v34 & 1, v35);
        OUTLINED_FUNCTION_44_16();
        OUTLINED_FUNCTION_44_16();
      }

      uint64_t v75 = v2[83];
      uint64_t v76 = v2[82];
      uint64_t v77 = v2[81];
      uint64_t v78 = v2[63];
      uint64_t v107 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10Foundation11MeasurementVySo6NSUnitCG_s5NeverOSo7LNValueCTg506_sSo11g150TypeC18SiriLinkFlowPluginE03getA08usoParse17parameterMetadata6localeSo0A0CSg0c3KitE08USOParseV_So017LNActionParameterK0C10Foundation6LocaleVtYaKFAiP11d5VySo6E9CGXEfU11_So0gJ0CTf1cn_n( v78,  (id)v2[62]);
      outlined destroy of Any?(v78, &demangling cache variable for type metadata for Measurement<NSUnit>?);
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v75, v77);
    }

    else
    {
      outlined consume of VoiceCommandIntentValueType((uint64_t)v27, v28, 0);
      OUTLINED_FUNCTION_50_19();
      if (v16)
      {
        uint64_t v39 = OUTLINED_FUNCTION_26_25();
        v40(v39);
        uint64_t v108 = v2[65];
        uint64_t v114 = v2[64];
        uint64_t v119 = v2[63];
        swift_task_dealloc(v2[83]);
        OUTLINED_FUNCTION_40_0();
        OUTLINED_FUNCTION_15_0();
        OUTLINED_FUNCTION_20_0();
        OUTLINED_FUNCTION_18_0();
        OUTLINED_FUNCTION_33_0();
        OUTLINED_FUNCTION_31();
        OUTLINED_FUNCTION_29_0();
        OUTLINED_FUNCTION_30_0();
        uint64_t v41 = OUTLINED_FUNCTION_20_2();
        uint64_t v49 = OUTLINED_FUNCTION_71(v41, v42, v43, v44, v45, v46, v47, v48, v108);
        uint64_t v57 = OUTLINED_FUNCTION_71_4(v49, v50, v51, v52, v53, v54, v55, v56, v109, v114);
        OUTLINED_FUNCTION_70_7(v57, v58, v59, v60, v61, v62, v63, v64, v110, v115, v119);
        OUTLINED_FUNCTION_35_12();
        __asm { BR              X0 }
      }

      if (v38)
      {
        uint64_t v66 = (void *)v2[62];
        id v67 = objc_allocWithZone(&OBJC_CLASS___LNValue);
        id v68 = v66;
        OUTLINED_FUNCTION_48_20(v68, v69, v70, v71, v72);
      }

      else
      {
        uint64_t v73 = 0LL;
      }

      uint64_t v107 = v73;
      uint64_t v79 = OUTLINED_FUNCTION_26_25();
      v81(v79, v80);
    }
  }

  uint64_t v116 = v2[65];
  uint64_t v120 = v2[64];
  uint64_t v122 = v2[63];
  swift_task_dealloc(v2[83]);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_20_2();
  uint64_t v82 = OUTLINED_FUNCTION_40_0();
  uint64_t v90 = OUTLINED_FUNCTION_71_4(v82, v83, v84, v85, v86, v87, v88, v89, v107, v116);
  uint64_t v98 = OUTLINED_FUNCTION_70_7(v90, v91, v92, v93, v94, v95, v96, v97, v111, v117, v120);
  OUTLINED_FUNCTION_31_22(v98, v99, v100, v101, v102, v103, v104, v105, v112, v118, v121, v122);
  return OUTLINED_FUNCTION_14_35(v113, (uint64_t (*)(void))v2[1]);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void v41[4];
  uint64_t v2 = *(void *)(v1 + 712);
  if (v2)
  {
    uint64_t v3 = *(void **)(v1 + 496);
    v41[3] = OUTLINED_FUNCTION_72( a1,  &lazy cache variable for type metadata for CLPlacemark,  &OBJC_CLASS___CLPlacemark_ptr);
    v41[0] = v2;
    uint64_t v4 = objc_allocWithZone(&OBJC_CLASS___LNValue);
    @nonobjc LNValue.init(_:valueType:)(v41, v3);
    unint64_t v40 = v5;
  }

  else
  {
    unint64_t v40 = 0LL;
  }

  OUTLINED_FUNCTION_3_45();
  OUTLINED_FUNCTION_6_38();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_20_2();
  uint64_t v6 = OUTLINED_FUNCTION_40_0();
  uint64_t v14 = OUTLINED_FUNCTION_71_4(v6, v7, v8, v9, v10, v11, v12, v13, v31, v34);
  uint64_t v22 = OUTLINED_FUNCTION_70_7(v14, v15, v16, v17, v18, v19, v20, v21, v32, v35, v37);
  OUTLINED_FUNCTION_31_22(v22, v23, v24, v25, v26, v27, v28, v29, v33, v36, v38, v39);
  return OUTLINED_FUNCTION_14_35(v40, *(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 744);
  *(void *)(v3 + 752) = a1;
  *(void *)(v3 + 760) = v1;
  swift_task_dealloc(v4);

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t LNValueType.getLNValue(usoParse:parameterMetadata:locale:)()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 672LL);
  *(void *)(*(void *)v1 + 68_swift_stdlib_reportUnimplementedInitializer( "SiriLinkFlowPlugin.AnonymousSiriWorkflowRunnerClientDelegate",  60LL,  "init()",  6LL, 0LL) = v0;
  swift_task_dealloc(v3);
  OUTLINED_FUNCTION_14_5(v2[67]);
  if (v0)
  {
    OUTLINED_FUNCTION_9_33();
  }

  else
  {
    OUTLINED_FUNCTION_98_4();
    __swift_destroy_boxed_opaque_existential_1Tm(v2 + 32);
    __swift_destroy_boxed_opaque_existential_1Tm(v2 + 42);
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

#error "10B43C: call analysis failed (funcsize=39)"
uint64_t LNValueType.getLNValue(usoParse:parameterMetadata:locale:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 688);
  *(void *)(*v1 + 696) = v0;
  swift_task_dealloc(v3);
  OUTLINED_FUNCTION_14_5(*(void *)(v2 + 536));
  if (v0)
  {
    OUTLINED_FUNCTION_9_33();
  }

  else
  {
    OUTLINED_FUNCTION_98_4();
    OUTLINED_FUNCTION_27_26();
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

#error "10B594: call analysis failed (funcsize=39)"
uint64_t LNValueType.getLNValue(usoParse:parameterMetadata:locale:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v3 = *v2;
  uint64_t v4 = (*v2)[88];
  v3[89] = a1;
  v3[90] = v1;
  swift_task_dealloc(v4);
  OUTLINED_FUNCTION_14_5(v3[67]);
  if (!v1) {
    OUTLINED_FUNCTION_27_26();
  }
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v5, v6, v7);
}

#error "10B8D4: call analysis failed (funcsize=90)"
#error "10B948: call analysis failed (funcsize=27)"
#error "10B9B4: call analysis failed (funcsize=27)"
#error "10BA2C: call analysis failed (funcsize=30)"
#error "10BA90: call analysis failed (funcsize=25)"
uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFs5Int64V_s5NeverOSo7LNValueCTg506_sSo11e149TypeC18SiriLinkFlowPluginE03getA08usoParse17parameterMetadata6localeSo0A0CSg0c3KitE08USOParseV_So017LNActionParameterK0C10Foundation6LocaleVtYaKFAIs5C6VXEfU_So0eH0CTf1cn_nTm( uint64_t a1,  char a2,  void *a3,  uint64_t a4,  uint64_t a5)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  void v10[4];
  if ((a2 & 1) != 0)
  {

    return 0LL;
  }

  else
  {
    v10[3] = a5;
    v10[0] = a1;
    objc_allocWithZone(&OBJC_CLASS___LNValue);
    uint64_t v6 = a3;
    @nonobjc LNValue.init(_:valueType:)(v10, v6);
    uint64_t v8 = v7;
  }

  return v8;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10Foundation4DateV_s5NeverOSo7LNValueCTg506_sSo11f149TypeC18SiriLinkFlowPluginE03getA08usoParse17parameterMetadata6localeSo0A0CSg0c3KitE08USOParseV_So017LNActionParameterK0C10Foundation6LocaleVtYaKFAiP4D7VXEfU3_So0fI0CTf1cn_nTm( uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(void), uint64_t *a5)
{
  uint64_t v8 = a4(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v19 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(a5);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of AppDisplayInfo?(a1, (uint64_t)v14, a5);
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1LL, v8) == 1)
  {

    return 0LL;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v14, v8);
    v19[3] = v8;
    __swift_allocate_boxed_opaque_existential_1Tm(v19);
    (*(void (**)(void))(v9 + 16))();
    objc_allocWithZone(&OBJC_CLASS___LNValue);
    id v16 = a2;
    @nonobjc LNValue.init(_:valueType:)(v19, v16);
    uint64_t v15 = v17;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  return v15;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSb_s5NeverOSo7LNValueCTg506_sSo11D155TypeC18SiriLinkFlowPluginE03getA08usoParse17parameterMetadata6localeSo0A0CSg0c3KitE08USOParseV_So017LNActionParameterK0C10Foundation6LocaleVtYaKFAISbXEfU8_So0dG0CTf1cn_n( char a1, void *a2)
{
  if (a1 == 2)
  {

    return 0LL;
  }

  else
  {
    v7[3] = &type metadata for Bool;
    LOBYTE(v7[0]) = a1 & 1;
    objc_allocWithZone(&OBJC_CLASS___LNValue);
    id v4 = a2;
    @nonobjc LNValue.init(_:valueType:)(v7, v4);
    uint64_t v3 = v5;
  }

  return v3;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10Foundation11MeasurementVySo6NSUnitCG_s5NeverOSo7LNValueCTg506_sSo11g150TypeC18SiriLinkFlowPluginE03getA08usoParse17parameterMetadata6localeSo0A0CSg0c3KitE08USOParseV_So017LNActionParameterK0C10Foundation6LocaleVtYaKFAiP11d5VySo6E9CGXEfU11_So0gJ0CTf1cn_n( uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>?);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of AppDisplayInfo?( a1,  (uint64_t)v10,  &demangling cache variable for type metadata for Measurement<NSUnit>?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1LL, v4) == 1)
  {

    return 0LL;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    v15[3] = v4;
    __swift_allocate_boxed_opaque_existential_1Tm(v15);
    (*(void (**)(void))(v5 + 16))();
    objc_allocWithZone(&OBJC_CLASS___LNValue);
    id v12 = a2;
    @nonobjc LNValue.init(_:valueType:)(v15, v12);
    uint64_t v11 = v13;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  return v11;
}

NSAttributedString __swiftcall NSAttributedString.__allocating_init(string:)(Swift::String string)
{
  object = string._object;
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  [v2 initWithString:v3];

  OUTLINED_FUNCTION_2();
  return result;
}

void @nonobjc LNValue.init(_:valueType:)(void *a1, void *a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = __swift_project_boxed_opaque_existential_1(a1, v4);
  uint64_t v6 = _bridgeAnythingToObjectiveC<A>(_:)(v5, v4);
  OUTLINED_FUNCTION_39_25(v6, "initWithValue:valueType:");
  swift_unknownObjectRelease(v6);

  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  OUTLINED_FUNCTION_2();
}

void @nonobjc LNValue.init(_:memberValueType:)(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v5 = swift_bridgeObjectRelease(a1);
  OUTLINED_FUNCTION_39_25(v5, "initWithValues:memberValueType:");

  OUTLINED_FUNCTION_2();
}

uint64_t OUTLINED_FUNCTION_0_41()
{
  return swift_task_dealloc(*(void *)(v0 + 664));
}

uint64_t OUTLINED_FUNCTION_3_45()
{
  return (*(uint64_t (**)(void, void))(v0[82] + 8LL))(v0[83], v0[81]);
}

uint64_t OUTLINED_FUNCTION_5_38()
{
  return swift_task_dealloc(*(void *)(v0 + 664));
}

uint64_t OUTLINED_FUNCTION_6_38()
{
  return swift_task_dealloc(*(void *)(v0 + 664));
}

uint64_t OUTLINED_FUNCTION_9_33()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_14_35(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_26_25()
{
  return *(void *)(v0 + 664);
}

uint64_t OUTLINED_FUNCTION_27_26()
{
  return __swift_destroy_boxed_opaque_existential_1Tm(v0);
}

uint64_t OUTLINED_FUNCTION_28_21(uint64_t a1)
{
  *(void *)(a1 + 16) = 0x3FA999999999999ALL;
  return outlined init with take of AceServiceInvokerAsync(v1, a1 + 24);
}

uint64_t OUTLINED_FUNCTION_31_22( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return swift_task_dealloc(a12);
}

void OUTLINED_FUNCTION_35_29()
{
}

uint64_t OUTLINED_FUNCTION_38_25(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(void))
{
  return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10Foundation4DateV_s5NeverOSo7LNValueCTg506_sSo11f149TypeC18SiriLinkFlowPluginE03getA08usoParse17parameterMetadata6localeSo0A0CSg0c3KitE08USOParseV_So017LNActionParameterK0C10Foundation6LocaleVtYaKFAiP4D7VXEfU3_So0fI0CTf1cn_nTm( v5,  a2,  v4,  a4,  v6);
}

id OUTLINED_FUNCTION_39_25(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v4, v2);
}

uint64_t OUTLINED_FUNCTION_40_23()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void OUTLINED_FUNCTION_41_26()
{
}

id OUTLINED_FUNCTION_42_18()
{
  return *(id *)(v0 + 496);
}

void OUTLINED_FUNCTION_44_16()
{
}

void OUTLINED_FUNCTION_48_20(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t OUTLINED_FUNCTION_50_19()
{
  return Siri_Nlu_External_UserDialogAct.stringValue.getter();
}

uint64_t OUTLINED_FUNCTION_51_23()
{
  return *(void *)(v0 + 8);
}

uint64_t OUTLINED_FUNCTION_52_17()
{
  return type metadata accessor for LocationProvider();
}

  ;
}

void InstallVoiceShortcutFlow.__allocating_init(invocationData:deviceState:aceService:vcClient:outputPublisher:installShortcutViewFactory:locationProvider:dateTimeResolver:)()
{
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *InstallVoiceShortcutFlow.exitValue.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

void InstallVoiceShortcutFlow.init(invocationData:deviceState:aceService:vcClient:outputPublisher:installShortcutViewFactory:locationProvider:dateTimeResolver:)()
{
  uint64_t v1 = v0;
  NSString v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v18 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_35();
  uint64_t v21 = v20 - v19;
  *(void *)(v1 + 136) = v17;
  outlined init with copy of DeviceState(v15, v1 + 16);
  outlined init with copy of DeviceState(v13, v1 + 96);
  outlined init with copy of DeviceState(v11, v1 + 152);
  outlined init with copy of DeviceState(v9, v1 + 56);
  outlined init with copy of DeviceState(v15, (uint64_t)v26);
  if (v7)
  {
    OUTLINED_FUNCTION_8_47();
  }

  else
  {
    outlined init with copy of DeviceState((uint64_t)v26, (uint64_t)v25);
    type metadata accessor for InstallShortcutCATs(0LL);
    uint64_t v22 = swift_retain(v17);
    static CATOption.defaultMode.getter(v22);
    uint64_t v23 = CATWrapper.__allocating_init(options:globals:)(v21, 0LL);
    swift_release();
    OUTLINED_FUNCTION_8_47();
    uint64_t v24 = type metadata accessor for InstallShortcutViewFactory();
    uint64_t v7 = swift_allocObject(v24, 64LL, 7LL);
    outlined init with take of AceServiceInvokerAsync(v25, v7 + 16);
    *(void *)(v7 + 56) = v23;
  }

  *(void *)(v1 + 144) = v7;
  outlined init with take of AceServiceInvokerAsync(v5, v1 + 192);
  outlined init with take of AceServiceInvokerAsync(v3, v1 + 232);
  OUTLINED_FUNCTION_24_0();
}

uint64_t InstallVoiceShortcutFlow.on(input:)()
{
  uint64_t v22 = v0;
  uint64_t v23 = v1;
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for Input(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_35();
  uint64_t v8 = v7 - v6;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v9 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, v3, v4);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v14 = OUTLINED_FUNCTION_38(32LL);
    v21[0] = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    uint64_t v15 = lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow( (unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter(v4, v15);
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v21);
    OUTLINED_FUNCTION_22_9((uint64_t)&v20, (uint64_t)v21);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_51_6();
    OUTLINED_FUNCTION_31_2(&dword_0, v11, v12, "InstallVoiceShortcutFlow.on %s", v13);
    OUTLINED_FUNCTION_30_3(v14, v18, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v14);
    OUTLINED_FUNCTION_1_0((uint64_t)v13);
  }

  else
  {
    OUTLINED_FUNCTION_51_6();
  }

  return 1LL;
}

uint64_t InstallVoiceShortcutFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InstallVoiceShortcutFlow();
  uint64_t v6 = lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow( &lazy protocol witness table cache variable for type InstallVoiceShortcutFlow and conformance InstallVoiceShortcutFlow,  v5,  (uint64_t (*)(uint64_t))type metadata accessor for InstallVoiceShortcutFlow,  (uint64_t)"a-\a");
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v6);
}

uint64_t InstallVoiceShortcutFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = v1;
  return swift_task_switch(InstallVoiceShortcutFlow.execute(), 0LL, 0LL);
}

{
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(a1);
  uint64_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    OUTLINED_FUNCTION_26_1(v5);
    OUTLINED_FUNCTION_6_39(&dword_0, v3, v6, "InstallVoiceShortcutFlow shortcut installed, running shortcut");
    OUTLINED_FUNCTION_1_0(v1);
  }

  uint64_t v7 = *(void *)(v2 + 56);
  uint64_t v8 = *(void *)(v2 + 40);

  (*(void (**)(uint64_t))(*(void *)v8 + 216LL))(v7);
  OUTLINED_FUNCTION_31_23();
  OUTLINED_FUNCTION_12_5();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t InstallVoiceShortcutFlow.execute()()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = OUTLINED_FUNCTION_48();
  uint64_t v2 = (os_log_s *)__swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  v0[6] = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  uint64_t v5 = v4;
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v6 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_0, v3, (os_log_type_t)v5, "InstallVoiceShortcutFlow.execute", v6, 2u);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
  }

  Logger.logObject.getter(v7);
  os_log_type_t v8 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_45_0(v8))
  {
    uint64_t v9 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    OUTLINED_FUNCTION_26_1(v9);
    OUTLINED_FUNCTION_6_39(&dword_0, v2, v10, "InstallVoiceShortcutFlow attempting to install shortcut");
    OUTLINED_FUNCTION_1_0(v5);
  }

  uint64_t v11 = (void *)v0[5];

  uint64_t v12 = v11[17];
  v0[7] = v12;
  uint64_t v13 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(*v11 + 208LL));
  v0[8] = v13;
  *uint64_t v13 = v0;
  v13[1] = InstallVoiceShortcutFlow.execute();
  return v15(v12);
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 72LL) = v0;
  swift_task_dealloc();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  os_log_type_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  OUTLINED_FUNCTION_46_0();
  uint64_t v1 = OUTLINED_FUNCTION_46_0();
  uint64_t v2 = (void *)Logger.logObject.getter(v1);
  uint64_t v3 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_31_0(v3))
  {
    os_log_type_t v4 = *(void *)(v0 + 72);
    uint64_t v5 = (_DWORD *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v6 = OUTLINED_FUNCTION_38(32LL);
    *uint64_t v5 = 136315138;
    uint64_t v14 = v6;
    *(void *)(v0 + 16) = v4;
    swift_errorRetain(v4);
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    os_log_type_t v8 = OUTLINED_FUNCTION_34_27(v7);
    *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v14);
    OUTLINED_FUNCTION_17_35(v0 + 24);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_98_3();
    OUTLINED_FUNCTION_98_3();
    OUTLINED_FUNCTION_7_32(&dword_0, v10, v11, "InstallVoiceShortcutFlow install failed %s");
    OUTLINED_FUNCTION_30_3(v6, v12, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v6);
    OUTLINED_FUNCTION_1_0((uint64_t)v5);
  }

  else
  {
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  (*(void (**)(void))(**(void **)(v0 + 40) + 224LL))();
  OUTLINED_FUNCTION_31_23();
  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_4_8();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t InstallVoiceShortcutFlow.installShortcut(invocationData:)(uint64_t a1)
{
  v2[7] = a1;
  _BYTE v2[8] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  v2[9] = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for URL(0LL);
  v2[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[11] = v5;
  v2[12] = OUTLINED_FUNCTION_9_0(v5);
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v3 = *(os_log_s **)(v2 + 120);
  Logger.logObject.getter(a1);
  uint64_t v4 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_45_0(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    OUTLINED_FUNCTION_26_1(v5);
    OUTLINED_FUNCTION_6_39(&dword_0, v3, v6, "InstallVoiceShortcutFlow installed shortcut");
    OUTLINED_FUNCTION_1_0(v1);
  }

  OUTLINED_FUNCTION_35_30();
  OUTLINED_FUNCTION_41_8();
  OUTLINED_FUNCTION_20_0();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t InstallVoiceShortcutFlow.installShortcut(invocationData:)()
{
  uint64_t v1 = (uint64_t *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  (*(void (**)(void))(**(void **)(v0 + 56) + 136LL))();
  if (__swift_getEnumTagSinglePayload(v3, 1LL, v2) == 1)
  {
    outlined destroy of URL?(*(void *)(v0 + 72));
LABEL_9:
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v18 = *v1;
    uint64_t v19 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.voiceCommands);
    uint64_t v20 = swift_retain_n(v18, 2LL);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.error.getter();
    BOOL v23 = os_log_type_enabled(v21, v22);
    uint64_t v24 = *v1;
    if (v23)
    {
      uint64_t v25 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v26 = OUTLINED_FUNCTION_38(32LL);
      v49[0] = v26;
      *(_DWORD *)uint64_t v25 = 136315138;
      id v27 = *(uint64_t (**)(uint64_t))(*(void *)v24 + 104LL);
      uint64_t v28 = swift_retain(v24);
      uint64_t v29 = v27(v28);
      unint64_t v31 = v30;
      OUTLINED_FUNCTION_12_5();
      *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, v49);
      OUTLINED_FUNCTION_22_9(v0 + 16, v0 + 24);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_107_0(v24);
      OUTLINED_FUNCTION_31_2( &dword_0,  v21,  v22,  "InstallVoiceShortcutInvocationData incomplete, unable to install shortcut : %s",  v25);
      OUTLINED_FUNCTION_30_3(v26, v32, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v26);
      OUTLINED_FUNCTION_1_0((uint64_t)v25);
    }

    else
    {
      OUTLINED_FUNCTION_107_0(*v1);
    }

    uint64_t v33 = type metadata accessor for CommandFailure(0LL);
    OUTLINED_FUNCTION_51(v33);
    uint64_t v34 = CommandFailure.init(errorCode:reason:)(-1LL, 0xD000000000000028LL, 0x8000000000196D60LL);
    uint64_t v35 = lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow( &lazy protocol witness table cache variable for type CommandFailure and conformance CommandFailure,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for CommandFailure,  (uint64_t)&protocol conformance descriptor for CommandFailure);
    uint64_t v36 = swift_allocError(v33, v35, 0LL, 0LL);
    *uint64_t v37 = v34;
    swift_willThrow(v36, v37, v38, v39, v40);
    swift_task_dealloc();
    swift_task_dealloc();
    return OUTLINED_FUNCTION_8_0(*(uint64_t (**)(void))(v0 + 8));
  }

  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = (*(uint64_t (**)(void, void, void))(*(void *)(v0 + 88) + 32LL))( *(void *)(v0 + 96),  *(void *)(v0 + 72),  *(void *)(v0 + 80));
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 128LL))(v5);
  *(void *)(v0 + 104) = v6;
  *(void *)(v0 + 112) = v7;
  if (!v7)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 88) + 8LL))(*(void *)(v0 + 96), *(void *)(v0 + 80));
    goto LABEL_9;
  }

  uint64_t v8 = v6;
  unint64_t v9 = v7;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v10 = OUTLINED_FUNCTION_48();
  uint64_t v11 = (os_log_s *)__swift_project_value_buffer(v10, (uint64_t)static Logger.voiceCommands);
  *(void *)(v0 + 120) = v11;
  uint64_t v12 = swift_bridgeObjectRetain_n(v9, 2LL);
  Logger.logObject.getter(v12);
  os_log_type_t v13 = OUTLINED_FUNCTION_58();
  if (os_log_type_enabled(v11, v13))
  {
    uint64_t v47 = v8;
    uint64_t v14 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v15 = OUTLINED_FUNCTION_38(32LL);
    v49[0] = v15;
    *(_DWORD *)uint64_t v14 = 136315138;
    swift_bridgeObjectRetain(v9);
    *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v9, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v14 + 4);
    swift_bridgeObjectRelease_n(v9, 3LL);
    OUTLINED_FUNCTION_31_2( &dword_0,  v11,  v13,  "InstallVoiceShortcutFlow checking if shortcut already installed %s",  v14);
    OUTLINED_FUNCTION_30_3(v15, v16, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v15);
    uint64_t v17 = (uint64_t)v14;
    uint64_t v8 = v47;
    OUTLINED_FUNCTION_1_0(v17);
  }

  else
  {
    swift_bridgeObjectRelease_n(v9, 2LL);
  }

  uint64_t v42 = *(void **)(v0 + 64);
  uint64_t v43 = v42[22];
  uint64_t v44 = v42[23];
  __swift_project_boxed_opaque_existential_1(v42 + 19, v43);
  uint64_t v45 = *(int **)(v44 + 8);
  uint64_t v48 = (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))((char *)v45 + *v45);
  uint64_t v46 = (void *)swift_task_alloc(v45[1]);
  *(void *)(v0 + 128) = v46;
  *uint64_t v46 = v0;
  v46[1] = InstallVoiceShortcutFlow.installShortcut(invocationData:);
  return v48(v8, v9, v43, v44);
}

{
  uint64_t v0;
  uint64_t v1;
  os_log_s *v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v8;
  os_log_type_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t (*v23)(void, void, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v2 = *(os_log_s **)(v1 + 120);
  if (*(_BYTE *)(v1 + 152) == 1)
  {
    uint64_t v3 = swift_bridgeObjectRelease();
    Logger.logObject.getter(v3);
    uint64_t v4 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_45_0(v4))
    {
      uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_26_1(v5);
      OUTLINED_FUNCTION_6_39(&dword_0, v2, v6, "InstallVoiceShortcutFlow shortcut already installed");
      OUTLINED_FUNCTION_1_0(v0);
    }

    OUTLINED_FUNCTION_35_30();
    OUTLINED_FUNCTION_41_8();
    OUTLINED_FUNCTION_20_0();
    swift_task_dealloc();
    return OUTLINED_FUNCTION_8_0(*(uint64_t (**)(void))(v1 + 8));
  }

  else
  {
    uint64_t v8 = swift_bridgeObjectRetain_n(*(void *)(v1 + 112), 2LL);
    Logger.logObject.getter(v8);
    unint64_t v9 = OUTLINED_FUNCTION_58();
    uint64_t v10 = OUTLINED_FUNCTION_31_0(v9);
    uint64_t v11 = *(void *)(v1 + 112);
    if (v10)
    {
      uint64_t v12 = *(void *)(v1 + 104);
      os_log_type_t v13 = (_DWORD *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v14 = OUTLINED_FUNCTION_38(32LL);
      uint64_t v24 = v14;
      *os_log_type_t v13 = 136315138;
      swift_bridgeObjectRetain(v11);
      *(void *)(v1 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 40, v1 + 48, v13 + 1);
      swift_bridgeObjectRelease_n(v11, 3LL);
      OUTLINED_FUNCTION_7_32( &dword_0,  v15,  v16,  "InstallVoiceShortcutFlow shortcut not perviously installed, attempting to install : %s");
      OUTLINED_FUNCTION_30_3(v14, v17, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v14);
      OUTLINED_FUNCTION_1_0((uint64_t)v13);
    }

    else
    {

      swift_bridgeObjectRelease_n(v11, 2LL);
    }

    uint64_t v18 = *(void *)(v1 + 112);
    uint64_t v19 = *(void **)(v1 + 64);
    uint64_t v20 = v19[22];
    uint64_t v21 = v19[23];
    __swift_project_boxed_opaque_existential_1(v19 + 19, v20);
    os_log_type_t v22 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(v21 + 16));
    *(void *)(v1 + 136) = v22;
    *os_log_type_t v22 = v1;
    v22[1] = InstallVoiceShortcutFlow.installShortcut(invocationData:);
    return v23(*(void *)(v1 + 96), *(void *)(v1 + 104), v18, v20, v21);
  }

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  *(void *)(*(void *)v1 + 144LL) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = InstallVoiceShortcutFlow.installShortcut(invocationData:);
  }
  else {
    uint64_t v2 = InstallVoiceShortcutFlow.installShortcut(invocationData:);
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  os_log_type_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  OUTLINED_FUNCTION_46_0();
  uint64_t v1 = OUTLINED_FUNCTION_46_0();
  uint64_t v2 = (void *)Logger.logObject.getter(v1);
  uint64_t v3 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_31_0(v3))
  {
    uint64_t v4 = *(void *)(v0 + 144);
    uint64_t v5 = (_DWORD *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v6 = OUTLINED_FUNCTION_38(32LL);
    *uint64_t v5 = 136315138;
    os_log_type_t v22 = v6;
    *(void *)(v0 + 24) = v4;
    swift_errorRetain(v4);
    unint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v8 = OUTLINED_FUNCTION_34_27(v7);
    *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v22);
    OUTLINED_FUNCTION_17_35(v0 + 32);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_98_3();
    OUTLINED_FUNCTION_98_3();
    OUTLINED_FUNCTION_7_32(&dword_0, v10, v11, "InstallVoiceShortcutFlow install error %s");
    OUTLINED_FUNCTION_30_3(v6, v12, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v6);
    OUTLINED_FUNCTION_1_0((uint64_t)v5);
  }

  else
  {
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  uint64_t v14 = *(void *)(v0 + 88);
  os_log_type_t v13 = *(void *)(v0 + 96);
  uint64_t v15 = *(void *)(v0 + 80);
  swift_willThrow(v16, v17, v18, v19, v20);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t InstallVoiceShortcutFlow.installShortcut(invocationData:)(char a1)
{
  *(_BYTE *)(*(void *)v1 + 152LL) = a1;
  swift_task_dealloc();
  return OUTLINED_FUNCTION_21_0();
}

void InstallVoiceShortcutFlow.makeRunShortcutFlow(invocationData:)()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_35();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v3 + 128LL))();
  if (v9)
  {
    uint64_t v10 = (char *)v9;
    v64[0] = v8;
    v64[1] = v9;
    __int128 v65 = 0u;
    __int128 v66 = 0u;
    __int128 v67 = 0u;
    char v68 = 0;
    memset(v63, 0, sizeof(v63));
    outlined init with copy of DeviceState(v0 + 96, (uint64_t)v62);
    outlined init with copy of DeviceState(v0 + 16, (uint64_t)v61);
    outlined init with copy of DeviceState(v0 + 56, (uint64_t)v60);
    outlined init with copy of DeviceState(v0 + 192, (uint64_t)v57);
    outlined init with copy of DeviceState(v0 + 232, (uint64_t)v54);
    uint64_t v11 = one-time initialization token for shared;
    swift_bridgeObjectRetain(v10);
    uint64_t v53 = v10;
    if (v11 != -1) {
      swift_once(&one-time initialization token for shared, one-time initialization function for shared);
    }
    uint64_t v12 = static WFDialogState.shared;
    uint64_t v52 = static WFDialogState.shared;
    type metadata accessor for RunCustomIntentCATs(0LL);
    uint64_t v13 = swift_retain(v12);
    static CATOption.defaultMode.getter(v13);
    uint64_t v51 = OUTLINED_FUNCTION_19_7();
    type metadata accessor for RunVoiceCommandCATs(0LL);
    OUTLINED_FUNCTION_5_8();
    uint64_t v50 = OUTLINED_FUNCTION_19_7();
    type metadata accessor for RunVoiceCommandCATsSimple(0LL);
    OUTLINED_FUNCTION_5_8();
    uint64_t v49 = CATWrapperSimple.__allocating_init(options:globals:)(v7, 0LL);
    type metadata accessor for WorkflowRunnerCATPatternsExecutor(0LL);
    OUTLINED_FUNCTION_5_8();
    uint64_t v48 = OUTLINED_FUNCTION_19_7();
    uint64_t v14 = (objc_class *)type metadata accessor for WorkflowRunnerFlow(0LL);
    id v15 = objc_allocWithZone(v14);
    uint64_t v16 = v58;
    uint64_t v17 = v59;
    uint64_t v18 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v57, v58);
    uint64_t v47 = (uint64_t)&v47;
    __chkstk_darwin(v18);
    OUTLINED_FUNCTION_35();
    uint64_t v21 = v20 - v19;
    (*(void (**)(uint64_t))(v22 + 16))(v20 - v19);
    uint64_t v23 = v55;
    uint64_t v24 = v56;
    uint64_t v25 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v54, v55);
    __chkstk_darwin(v25);
    OUTLINED_FUNCTION_35();
    uint64_t v28 = v27 - v26;
    (*(void (**)(uint64_t))(v29 + 16))(v27 - v26);
    specialized WorkflowRunnerFlow.init(workflowRunnerInput:workflowRunner:dialogState:aceServiceInvoker:deviceState:outputPublisher:runCustomCatWrapper:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:locationGuardFlowProvider:locationProvider:dateTimeResolver:linkRCHFlowFactory:)( (uint64_t)v64,  (uint64_t)v63,  v52,  (uint64_t)v62,  (uint64_t)v61,  (uint64_t)v60,  v51,  v50,  v49,  v48,  (uint64_t)closure #1 in variable initialization expression of static SLFLocationAccessGuardProvider.makeGuardFlow,  0LL,  v21,  v28,  (uint64_t)closure #1 in variable initialization expression of LinkRCHFlowFactory.getFlow,  0LL,  (uint64_t)v15,  v23,  v16,  v24,  v17,  v46,  v47,  v48,  v49,  v50,  v51,  v52,  v53,  v54[0],  v54[1],  v54[2],  v55);
    unint64_t v31 = v30;
    __swift_destroy_boxed_opaque_existential_1Tm(v54);
    __swift_destroy_boxed_opaque_existential_1Tm(v57);
    v63[0] = v31;
    uint64_t v32 = lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow( &lazy protocol witness table cache variable for type WorkflowRunnerFlow and conformance WorkflowRunnerFlow,  255LL,  type metadata accessor for WorkflowRunnerFlow,  (uint64_t)&protocol conformance descriptor for WorkflowRunnerFlow);
    Flow.eraseToAnyFlow()(v14, v32);

    swift_bridgeObjectRelease();
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v33 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.voiceCommands);
    uint64_t v34 = swift_retain_n(v3, 2LL);
    uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = OUTLINED_FUNCTION_38(12LL);
      uint64_t v38 = OUTLINED_FUNCTION_38(32LL);
      v64[0] = v38;
      *(_DWORD *)uint64_t v37 = 136315138;
      uint64_t v53 = (char *)(v37 + 4);
      uint64_t v39 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 104LL);
      uint64_t v40 = swift_retain(v3);
      uint64_t v41 = v39(v40);
      unint64_t v43 = v42;
      swift_release();
      v63[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v43, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v63, &v63[1], v37 + 4);
      OUTLINED_FUNCTION_107_0(v3);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_31_2( &dword_0,  v35,  v36,  "InstallVoiceShortcutInvocationData incomplete, unable to runShortcut : %s",  (uint8_t *)v37);
      OUTLINED_FUNCTION_30_3(v38, v44, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v38);
      OUTLINED_FUNCTION_1_0(v37);
    }

    else
    {

      uint64_t v45 = OUTLINED_FUNCTION_107_0(v3);
    }

    (*(void (**)(uint64_t))(*(void *)v1 + 224LL))(v45);
  }

  OUTLINED_FUNCTION_24_0();
}

uint64_t InstallVoiceShortcutFlow.makeErrorFlow()()
{
  uint64_t v1 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  OUTLINED_FUNCTION_51(v1);
  swift_retain(v0);
  v4[0] = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v4,  &async function pointer to partial apply for closure #1 in InstallVoiceShortcutFlow.makeErrorFlow(),  v0);
  uint64_t v2 = Flow.eraseToAnyFlow()(v1, &protocol witness table for SimpleOutputFlowAsync);
  swift_release();
  return v2;
}

uint64_t closure #1 in InstallVoiceShortcutFlow.makeErrorFlow()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_task_switch(closure #1 in InstallVoiceShortcutFlow.makeErrorFlow(), 0LL, 0LL);
}

uint64_t closure #1 in InstallVoiceShortcutFlow.makeErrorFlow()()
{
  uint64_t v1 = (void *)v0[2];
  uint64_t v2 = *(int **)(**(void **)(v0[3] + 144LL) + 104LL);
  v1[3] = type metadata accessor for AceOutput(0LL);
  v1[4] = &protocol witness table for AceOutput;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v1);
  uint64_t v6 = (uint64_t (*)(void *))((char *)v2 + *v2);
  uint64_t v4 = (void *)swift_task_alloc(v2[1]);
  v0[4] = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in InstallVoiceShortcutFlow.makeErrorFlow();
  return v6(boxed_opaque_existential_1);
}

{
  uint64_t *v0;
  uint64_t v2;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v2 + 8));
}

void *InstallVoiceShortcutFlow.deinit()
{
  return v0;
}

uint64_t InstallVoiceShortcutFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 272LL, 7LL);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance InstallVoiceShortcutFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192LL))();
}

uint64_t protocol witness for Flow.execute() in conformance InstallVoiceShortcutFlow(uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 200LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makePromptForTCCAcceptance(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return v7(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance InstallVoiceShortcutFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152LL))();
}

uint64_t type metadata accessor for InstallVoiceShortcutFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin24InstallVoiceShortcutFlow);
}

uint64_t partial apply for closure #1 in InstallVoiceShortcutFlow.makeErrorFlow()(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc(dword_21C374);
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for VoiceShortcutClientWrapping.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:) in conformance VoiceShortcutClientWrapper;
  return closure #1 in InstallVoiceShortcutFlow.makeErrorFlow()(a1, v1);
}

uint64_t sub_10DA60(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 152LL))();
}

uint64_t sub_10DA88(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 160LL))();
}

void OUTLINED_FUNCTION_6_39(void *a1, os_log_s *a2, uint64_t a3, const char *a4)
{
}

void OUTLINED_FUNCTION_7_32(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_8_47()
{
  return __swift_destroy_boxed_opaque_existential_1Tm((void *)(v4 - 120));
}

uint64_t OUTLINED_FUNCTION_17_35@<X0>(uint64_t a1@<X8>)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a1 + 8, v1);
}

uint64_t OUTLINED_FUNCTION_31_23()
{
  return static ExecuteResponse.complete(next:)();
}

uint64_t OUTLINED_FUNCTION_34_27(uint64_t a1)
{
  return String.init<A>(describing:)(v1, a1);
}

void OUTLINED_FUNCTION_35_30()
{
}

void *VoiceCommandConstants.ShortcutsAppIdentifierWatch.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.ShortcutsAppIdentifierWatch;
}

void *VoiceCommandConstants.ShortcutsAppIdentifier.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.ShortcutsAppIdentifier;
}

void *VoiceCommandConstants.ConfirmationDirectInvocation.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.ConfirmationDirectInvocation;
}

void *VoiceCommandConstants.DisambiguationItemDirectInvocation.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.DisambiguationItemDirectInvocation;
}

void *VoiceCommandConstants.WaitForDoneButtonDirectInvocation.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.WaitForDoneButtonDirectInvocation;
}

void *VoiceCommandConstants.TopLevelShortcutDirectInvocation.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.TopLevelShortcutDirectInvocation;
}

void *VoiceCommandConstants.ServerAppShortcutInvocation.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.ServerAppShortcutInvocation;
}

void *VoiceCommandConstants.PausedShortcutInvocation.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.PausedShortcutInvocation;
}

void *VoiceCommandConstants.VoiceShortcutsAppId.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.VoiceShortcutsAppId;
}

void *VoiceCommandConstants.ShortcutsIntents.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.ShortcutsIntents;
}

void *VoiceCommandConstants.ContactsAppIdentifierMobile.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.ContactsAppIdentifierMobile;
}

void *VoiceCommandConstants.CustomIntentTypePrefix.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.CustomIntentTypePrefix;
}

const char *VoiceCommandConstants.RunOnCompanionToken.unsafeMutableAddressor()
{
  return "@COMPANION";
}

uint64_t static VoiceCommandConstants.RunOnCompanionToken.getter()
{
  return 0x494E41504D4F4340LL;
}

unint64_t static VoiceCommandConstants.WaitForDoneButtonDirectInvocation.getter()
{
  return OUTLINED_FUNCTION_0_22(59LL);
}

unint64_t static VoiceCommandConstants.TopLevelShortcutDirectInvocation.getter()
{
  return OUTLINED_FUNCTION_0_22(65LL);
}

void *VoiceCommandConstants.ProvisionalLinkDirectInvocation.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.ProvisionalLinkDirectInvocation;
}

unint64_t static VoiceCommandConstants.ProvisionalLinkDirectInvocation.getter()
{
  return OUTLINED_FUNCTION_0_22(70LL);
}

unint64_t static VoiceCommandConstants.DisambiguationItemDirectInvocation.getter()
{
  return OUTLINED_FUNCTION_0_22(67LL);
}

unint64_t static VoiceCommandConstants.ConfirmationDirectInvocation.getter()
{
  return OUTLINED_FUNCTION_0_22(61LL);
}

void *VoiceCommandConstants.InputDirectInvocation.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.InputDirectInvocation;
}

unint64_t static VoiceCommandConstants.InputDirectInvocation.getter()
{
  return OUTLINED_FUNCTION_0_22(60LL);
}

unint64_t static VoiceCommandConstants.ServerAppShortcutInvocation.getter()
{
  return OUTLINED_FUNCTION_0_22(75LL);
}

unint64_t static VoiceCommandConstants.PausedShortcutInvocation.getter()
{
  return OUTLINED_FUNCTION_0_22(63LL);
}

unint64_t static VoiceCommandConstants.VoiceShortcutsAppId.getter()
{
  return OUTLINED_FUNCTION_0_22(28LL);
}

unint64_t static VoiceCommandConstants.ShortcutsAppIdentifier.getter()
{
  return OUTLINED_FUNCTION_0_22(19LL);
}

unint64_t static VoiceCommandConstants.ShortcutsAppIdentifierWatch.getter()
{
  return OUTLINED_FUNCTION_0_22(25LL);
}

unint64_t static VoiceCommandConstants.ContactsAppIdentifierMobile.getter()
{
  return OUTLINED_FUNCTION_0_22(27LL);
}

void *VoiceCommandConstants.ContactsAppIdentifierMac.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.ContactsAppIdentifierMac;
}

unint64_t static VoiceCommandConstants.ContactsAppIdentifierMac.getter()
{
  return OUTLINED_FUNCTION_0_22(21LL);
}

unint64_t static VoiceCommandConstants.ShortcutsIntents.getter()
{
  return OUTLINED_FUNCTION_0_22(38LL);
}

unint64_t static VoiceCommandConstants.CustomIntentTypePrefix.getter()
{
  return OUTLINED_FUNCTION_0_22(23LL);
}

void *VoiceCommandConstants.MaxConfirmationActionNames.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.MaxConfirmationActionNames;
}

uint64_t static VoiceCommandConstants.MaxConfirmationActionNames.getter()
{
  return 10LL;
}

ValueMetadata *type metadata accessor for VoiceCommandConstants()
{
  return &type metadata for VoiceCommandConstants;
}

uint64_t SuggestionsCATs.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = OUTLINED_FUNCTION_11_0();
  v7[10] = OUTLINED_FUNCTION_11_0();
  v7[11] = OUTLINED_FUNCTION_11_0();
  v7[12] = OUTLINED_FUNCTION_11_0();
  v7[13] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATs.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_27_3(v2);
  uint64_t v4 = OUTLINED_FUNCTION_38_26(v3);
  *(_OWORD *)(v4 + 16) = xmmword_17F3D0;
  uint64_t v5 = OUTLINED_FUNCTION_31_3(v4, (uint64_t)"coldStartSuggestion");
  OUTLINED_FUNCTION_4_6(v5, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4(v0, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  uint64_t v8 = OUTLINED_FUNCTION_9_34(v7);
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[15] = v0;
    uint64_t v10 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v10);
  }

  OUTLINED_FUNCTION_27_27();
  OUTLINED_FUNCTION_32_2((uint64_t)"appBundleIdentifier");
  OUTLINED_FUNCTION_12_4(v11, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = OUTLINED_FUNCTION_16_40();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[21] = v0;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
  }

  uint64_t v15 = OUTLINED_FUNCTION_2_33();
  OUTLINED_FUNCTION_12_4(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = OUTLINED_FUNCTION_18_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[27] = v0;
    uint64_t v18 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v18);
  }

  uint64_t v19 = OUTLINED_FUNCTION_7_33();
  OUTLINED_FUNCTION_12_4(v19, v20, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v21 = OUTLINED_FUNCTION_17_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v21, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[33] = v0;
    uint64_t v22 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v22);
  }

  uint64_t v23 = OUTLINED_FUNCTION_1_33();
  OUTLINED_FUNCTION_12_4(v23, v24, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v25 = OUTLINED_FUNCTION_19_2();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v25, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[39] = v0;
    uint64_t v26 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v26);
  }

  uint64_t v27 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v28 = (void *)OUTLINED_FUNCTION_40_24(v27);
  OUTLINED_FUNCTION_31_24(v28);
  OUTLINED_FUNCTION_23_28();
  return OUTLINED_FUNCTION_5_23(v29, v30, v31, v32, v33);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(void);
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_6_40();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_45_7(v1, v2, v3);
  }

  else
  {
    OUTLINED_FUNCTION_24_28();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_33_0();
    uint64_t v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_18_2(v5);
  }

uint64_t SuggestionsCATs.close(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = OUTLINED_FUNCTION_11_0();
  v7[10] = OUTLINED_FUNCTION_11_0();
  v7[11] = OUTLINED_FUNCTION_11_0();
  v7[12] = OUTLINED_FUNCTION_11_0();
  v7[13] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATs.close(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_27_3(v2);
  uint64_t v4 = OUTLINED_FUNCTION_38_26(v3);
  *(_OWORD *)(v4 + 16) = xmmword_17F3D0;
  uint64_t v5 = OUTLINED_FUNCTION_31_3(v4, (uint64_t)"coldStartSuggestion");
  OUTLINED_FUNCTION_4_6(v5, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4(v0, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  uint64_t v8 = OUTLINED_FUNCTION_9_34(v7);
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[15] = v0;
    uint64_t v10 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v10);
  }

  OUTLINED_FUNCTION_27_27();
  OUTLINED_FUNCTION_32_2((uint64_t)"appBundleIdentifier");
  OUTLINED_FUNCTION_12_4(v11, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = OUTLINED_FUNCTION_16_40();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[21] = v0;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
  }

  uint64_t v15 = OUTLINED_FUNCTION_2_33();
  OUTLINED_FUNCTION_12_4(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = OUTLINED_FUNCTION_18_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[27] = v0;
    uint64_t v18 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v18);
  }

  uint64_t v19 = OUTLINED_FUNCTION_7_33();
  OUTLINED_FUNCTION_12_4(v19, v20, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v21 = OUTLINED_FUNCTION_17_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v21, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[33] = v0;
    uint64_t v22 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v22);
  }

  uint64_t v23 = OUTLINED_FUNCTION_1_33();
  OUTLINED_FUNCTION_12_4(v23, v24, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v25 = OUTLINED_FUNCTION_19_2();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v25, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[39] = v0;
    uint64_t v26 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v26);
  }

  uint64_t v27 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v28 = (void *)OUTLINED_FUNCTION_40_24(v27);
  OUTLINED_FUNCTION_42_19(v28);
  OUTLINED_FUNCTION_23_28();
  return OUTLINED_FUNCTION_5_23(v29, v30, v31, v32, v33);
}

uint64_t SuggestionsCATs.create(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = OUTLINED_FUNCTION_11_0();
  v7[10] = OUTLINED_FUNCTION_11_0();
  v7[11] = OUTLINED_FUNCTION_11_0();
  v7[12] = OUTLINED_FUNCTION_11_0();
  v7[13] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATs.create(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_27_3(v2);
  uint64_t v4 = OUTLINED_FUNCTION_38_26(v3);
  *(_OWORD *)(v4 + 16) = xmmword_17F3D0;
  uint64_t v5 = OUTLINED_FUNCTION_31_3(v4, (uint64_t)"coldStartSuggestion");
  OUTLINED_FUNCTION_4_6(v5, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4(v0, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  uint64_t v8 = OUTLINED_FUNCTION_9_34(v7);
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[15] = v0;
    uint64_t v10 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v10);
  }

  OUTLINED_FUNCTION_27_27();
  OUTLINED_FUNCTION_32_2((uint64_t)"appBundleIdentifier");
  OUTLINED_FUNCTION_12_4(v11, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = OUTLINED_FUNCTION_16_40();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[21] = v0;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
  }

  uint64_t v15 = OUTLINED_FUNCTION_2_33();
  OUTLINED_FUNCTION_12_4(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = OUTLINED_FUNCTION_18_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[27] = v0;
    uint64_t v18 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v18);
  }

  uint64_t v19 = OUTLINED_FUNCTION_7_33();
  OUTLINED_FUNCTION_12_4(v19, v20, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v21 = OUTLINED_FUNCTION_17_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v21, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[33] = v0;
    uint64_t v22 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v22);
  }

  uint64_t v23 = OUTLINED_FUNCTION_1_33();
  OUTLINED_FUNCTION_12_4(v23, v24, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v25 = OUTLINED_FUNCTION_19_2();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v25, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[39] = v0;
    uint64_t v26 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v26);
  }

  uint64_t v27 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v28 = (void *)OUTLINED_FUNCTION_40_24(v27);
  OUTLINED_FUNCTION_31_24(v28);
  OUTLINED_FUNCTION_23_28();
  return OUTLINED_FUNCTION_5_23(v29, v30, v31, v32, v33);
}

uint64_t SuggestionsCATs.disable(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = OUTLINED_FUNCTION_11_0();
  v7[10] = OUTLINED_FUNCTION_11_0();
  v7[11] = OUTLINED_FUNCTION_11_0();
  v7[12] = OUTLINED_FUNCTION_11_0();
  v7[13] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATs.disable(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  char v3 = *(_BYTE *)(v0 + 136);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_27_3(v4);
  uint64_t v6 = OUTLINED_FUNCTION_38_26(v5);
  *(_OWORD *)(v6 + 16) = xmmword_17F3D0;
  *(void *)(v6 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0xD000000000000013LL;
  *(void *)(v6 + 40) = 0x8000000000192C80LL;
  *(_BYTE *)(v6 + 48) = v3;
  *(void *)(v6 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = &type metadata for Bool;
  *(void *)(v6 + 80) = 0x656D614E707061LL;
  *(void *)(v6 + 88) = 0xE700000000000000LL;
  OUTLINED_FUNCTION_12_4(v2, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  uint64_t v9 = OUTLINED_FUNCTION_9_34(v8);
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v9, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[15] = v2;
    uint64_t v11 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v11);
  }

  uint64_t v12 = OUTLINED_FUNCTION_27_27();
  v1[16] = 0xD000000000000013LL;
  v1[17] = 0x8000000000192CA0LL;
  OUTLINED_FUNCTION_12_4(v12, v13, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = OUTLINED_FUNCTION_16_40();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[21] = v2;
    uint64_t v15 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v15);
  }

  uint64_t v16 = OUTLINED_FUNCTION_2_33();
  OUTLINED_FUNCTION_12_4(v16, v17, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v18 = OUTLINED_FUNCTION_18_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v18, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[27] = v2;
    uint64_t v19 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v19);
  }

  uint64_t v20 = OUTLINED_FUNCTION_7_33();
  OUTLINED_FUNCTION_12_4(v20, v21, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v22 = OUTLINED_FUNCTION_17_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v22, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[33] = v2;
    uint64_t v23 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v23);
  }

  uint64_t v24 = OUTLINED_FUNCTION_1_33();
  OUTLINED_FUNCTION_12_4(v24, v25, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v26 = OUTLINED_FUNCTION_19_2();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v26, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[39] = v2;
    uint64_t v27 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v27);
  }

  uint64_t v29 = (void *)OUTLINED_FUNCTION_40_24(v28);
  uint64_t v30 = OUTLINED_FUNCTION_42_19(v29);
  return ((uint64_t (*)(uint64_t, unint64_t, unint64_t, void *))v32)( v30,  0xD000000000000013LL,  0x8000000000190690LL,  v1);
}

uint64_t SuggestionsCATs.enable(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = OUTLINED_FUNCTION_11_0();
  v7[10] = OUTLINED_FUNCTION_11_0();
  v7[11] = OUTLINED_FUNCTION_11_0();
  v7[12] = OUTLINED_FUNCTION_11_0();
  v7[13] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATs.enable(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_27_3(v2);
  uint64_t v4 = OUTLINED_FUNCTION_38_26(v3);
  *(_OWORD *)(v4 + 16) = xmmword_17F3D0;
  uint64_t v5 = OUTLINED_FUNCTION_31_3(v4, (uint64_t)"coldStartSuggestion");
  OUTLINED_FUNCTION_4_6(v5, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4(v0, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  uint64_t v8 = OUTLINED_FUNCTION_9_34(v7);
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[15] = v0;
    char v10 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v10);
  }

  OUTLINED_FUNCTION_27_27();
  OUTLINED_FUNCTION_32_2((uint64_t)"appBundleIdentifier");
  OUTLINED_FUNCTION_12_4(v11, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = OUTLINED_FUNCTION_16_40();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[21] = v0;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
  }

  uint64_t v15 = OUTLINED_FUNCTION_2_33();
  OUTLINED_FUNCTION_12_4(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = OUTLINED_FUNCTION_18_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[27] = v0;
    uint64_t v18 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v18);
  }

  uint64_t v19 = OUTLINED_FUNCTION_7_33();
  OUTLINED_FUNCTION_12_4(v19, v20, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v21 = OUTLINED_FUNCTION_17_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v21, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[33] = v0;
    uint64_t v22 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v22);
  }

  uint64_t v23 = OUTLINED_FUNCTION_1_33();
  OUTLINED_FUNCTION_12_4(v23, v24, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v25 = OUTLINED_FUNCTION_19_2();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v25, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[39] = v0;
    uint64_t v26 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v26);
  }

  uint64_t v27 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v28 = (void *)OUTLINED_FUNCTION_40_24(v27);
  OUTLINED_FUNCTION_31_24(v28);
  OUTLINED_FUNCTION_23_28();
  return OUTLINED_FUNCTION_5_23(v29, v30, v31, v32, v33);
}

uint64_t SuggestionsCATs.next(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = OUTLINED_FUNCTION_11_0();
  v7[10] = OUTLINED_FUNCTION_11_0();
  v7[11] = OUTLINED_FUNCTION_11_0();
  v7[12] = OUTLINED_FUNCTION_11_0();
  v7[13] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATs.next(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_27_3(v2);
  uint64_t v4 = OUTLINED_FUNCTION_38_26(v3);
  *(_OWORD *)(v4 + 16) = xmmword_17F3D0;
  uint64_t v5 = OUTLINED_FUNCTION_31_3(v4, (uint64_t)"coldStartSuggestion");
  OUTLINED_FUNCTION_4_6(v5, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4(v0, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  uint64_t v8 = OUTLINED_FUNCTION_9_34(v7);
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[15] = v0;
    char v10 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v10);
  }

  OUTLINED_FUNCTION_27_27();
  OUTLINED_FUNCTION_32_2((uint64_t)"appBundleIdentifier");
  OUTLINED_FUNCTION_12_4(v11, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = OUTLINED_FUNCTION_16_40();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[21] = v0;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
  }

  uint64_t v15 = OUTLINED_FUNCTION_2_33();
  OUTLINED_FUNCTION_12_4(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = OUTLINED_FUNCTION_18_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[27] = v0;
    uint64_t v18 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v18);
  }

  uint64_t v19 = OUTLINED_FUNCTION_7_33();
  OUTLINED_FUNCTION_12_4(v19, v20, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v21 = OUTLINED_FUNCTION_17_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v21, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[33] = v0;
    uint64_t v22 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v22);
  }

  uint64_t v23 = OUTLINED_FUNCTION_1_33();
  OUTLINED_FUNCTION_12_4(v23, v24, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v25 = OUTLINED_FUNCTION_19_2();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v25, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[39] = v0;
    uint64_t v26 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v26);
  }

  uint64_t v27 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v28 = (void *)OUTLINED_FUNCTION_40_24(v27);
  OUTLINED_FUNCTION_43_23(v28);
  OUTLINED_FUNCTION_23_28();
  return OUTLINED_FUNCTION_5_23(v29, v30, v31, v32, v33);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(void);
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_6_40();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_45_7(v1, v2, v3);
  }

  else
  {
    OUTLINED_FUNCTION_24_28();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_33_0();
    uint64_t v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_18_2(v5);
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_104();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t SuggestionsCATs.open(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = OUTLINED_FUNCTION_11_0();
  v7[10] = OUTLINED_FUNCTION_11_0();
  v7[11] = OUTLINED_FUNCTION_11_0();
  v7[12] = OUTLINED_FUNCTION_11_0();
  v7[13] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATs.open(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_27_3(v2);
  uint64_t v4 = OUTLINED_FUNCTION_38_26(v3);
  *(_OWORD *)(v4 + 16) = xmmword_17F3D0;
  uint64_t v5 = OUTLINED_FUNCTION_31_3(v4, (uint64_t)"coldStartSuggestion");
  OUTLINED_FUNCTION_4_6(v5, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4(v0, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  uint64_t v8 = OUTLINED_FUNCTION_9_34(v7);
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[15] = v0;
    char v10 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v10);
  }

  OUTLINED_FUNCTION_27_27();
  OUTLINED_FUNCTION_32_2((uint64_t)"appBundleIdentifier");
  OUTLINED_FUNCTION_12_4(v11, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = OUTLINED_FUNCTION_16_40();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[21] = v0;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
  }

  uint64_t v15 = OUTLINED_FUNCTION_2_33();
  OUTLINED_FUNCTION_12_4(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = OUTLINED_FUNCTION_18_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[27] = v0;
    uint64_t v18 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v18);
  }

  uint64_t v19 = OUTLINED_FUNCTION_7_33();
  OUTLINED_FUNCTION_12_4(v19, v20, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v21 = OUTLINED_FUNCTION_17_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v21, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[33] = v0;
    uint64_t v22 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v22);
  }

  uint64_t v23 = OUTLINED_FUNCTION_1_33();
  OUTLINED_FUNCTION_12_4(v23, v24, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v25 = OUTLINED_FUNCTION_19_2();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v25, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[39] = v0;
    uint64_t v26 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v26);
  }

  uint64_t v27 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v28 = (void *)OUTLINED_FUNCTION_40_24(v27);
  OUTLINED_FUNCTION_43_23(v28);
  OUTLINED_FUNCTION_23_28();
  return OUTLINED_FUNCTION_5_23(v29, v30, v31, v32, v33);
}

uint64_t SuggestionsCATs.previous(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = OUTLINED_FUNCTION_11_0();
  v7[10] = OUTLINED_FUNCTION_11_0();
  v7[11] = OUTLINED_FUNCTION_11_0();
  v7[12] = OUTLINED_FUNCTION_11_0();
  v7[13] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATs.previous(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_27_3(v2);
  uint64_t v4 = OUTLINED_FUNCTION_38_26(v3);
  *(_OWORD *)(v4 + 16) = xmmword_17F3D0;
  uint64_t v5 = OUTLINED_FUNCTION_31_3(v4, (uint64_t)"coldStartSuggestion");
  OUTLINED_FUNCTION_4_6(v5, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4(v0, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  uint64_t v8 = OUTLINED_FUNCTION_9_34(v7);
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[15] = v0;
    char v10 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v10);
  }

  OUTLINED_FUNCTION_27_27();
  OUTLINED_FUNCTION_32_2((uint64_t)"appBundleIdentifier");
  OUTLINED_FUNCTION_12_4(v11, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = OUTLINED_FUNCTION_16_40();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[21] = v0;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
  }

  uint64_t v15 = OUTLINED_FUNCTION_2_33();
  OUTLINED_FUNCTION_12_4(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = OUTLINED_FUNCTION_18_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[27] = v0;
    uint64_t v18 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v18);
  }

  uint64_t v19 = OUTLINED_FUNCTION_7_33();
  OUTLINED_FUNCTION_12_4(v19, v20, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v21 = OUTLINED_FUNCTION_17_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v21, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[33] = v0;
    uint64_t v22 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v22);
  }

  uint64_t v23 = OUTLINED_FUNCTION_1_33();
  OUTLINED_FUNCTION_12_4(v23, v24, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v25 = OUTLINED_FUNCTION_19_2();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v25, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[39] = v0;
    uint64_t v26 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v26);
  }

  uint64_t v27 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v28 = (void *)OUTLINED_FUNCTION_40_24(v27);
  OUTLINED_FUNCTION_42_19(v28);
  OUTLINED_FUNCTION_23_28();
  return OUTLINED_FUNCTION_5_23(v29, v30, v31, v32, v33);
}

uint64_t SuggestionsCATs.search(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = OUTLINED_FUNCTION_11_0();
  v7[10] = OUTLINED_FUNCTION_11_0();
  v7[11] = OUTLINED_FUNCTION_11_0();
  v7[12] = OUTLINED_FUNCTION_11_0();
  v7[13] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATs.search(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_27_3(v2);
  uint64_t v4 = OUTLINED_FUNCTION_38_26(v3);
  *(_OWORD *)(v4 + 16) = xmmword_17F3D0;
  uint64_t v5 = OUTLINED_FUNCTION_31_3(v4, (uint64_t)"coldStartSuggestion");
  OUTLINED_FUNCTION_4_6(v5, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4(v0, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  uint64_t v8 = OUTLINED_FUNCTION_9_34(v7);
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[15] = v0;
    char v10 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v10);
  }

  OUTLINED_FUNCTION_27_27();
  OUTLINED_FUNCTION_32_2((uint64_t)"appBundleIdentifier");
  OUTLINED_FUNCTION_12_4(v11, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = OUTLINED_FUNCTION_16_40();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[21] = v0;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
  }

  uint64_t v15 = OUTLINED_FUNCTION_2_33();
  OUTLINED_FUNCTION_12_4(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = OUTLINED_FUNCTION_18_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[27] = v0;
    uint64_t v18 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v18);
  }

  uint64_t v19 = OUTLINED_FUNCTION_7_33();
  OUTLINED_FUNCTION_12_4(v19, v20, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v21 = OUTLINED_FUNCTION_17_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v21, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[33] = v0;
    uint64_t v22 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v22);
  }

  uint64_t v23 = OUTLINED_FUNCTION_1_33();
  OUTLINED_FUNCTION_12_4(v23, v24, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v25 = OUTLINED_FUNCTION_19_2();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v25, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[39] = v0;
    uint64_t v26 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v26);
  }

  uint64_t v27 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v28 = (void *)OUTLINED_FUNCTION_40_24(v27);
  OUTLINED_FUNCTION_31_24(v28);
  OUTLINED_FUNCTION_23_28();
  return OUTLINED_FUNCTION_5_23(v29, v30, v31, v32, v33);
}

uint64_t SuggestionsCATs.toggle(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = OUTLINED_FUNCTION_11_0();
  v7[10] = OUTLINED_FUNCTION_11_0();
  v7[11] = OUTLINED_FUNCTION_11_0();
  v7[12] = OUTLINED_FUNCTION_11_0();
  v7[13] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATs.toggle(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_27_3(v2);
  uint64_t v4 = OUTLINED_FUNCTION_38_26(v3);
  *(_OWORD *)(v4 + 16) = xmmword_17F3D0;
  uint64_t v5 = OUTLINED_FUNCTION_31_3(v4, (uint64_t)"coldStartSuggestion");
  OUTLINED_FUNCTION_4_6(v5, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4(v0, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  uint64_t v8 = OUTLINED_FUNCTION_9_34(v7);
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[15] = v0;
    char v10 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v10);
  }

  OUTLINED_FUNCTION_27_27();
  OUTLINED_FUNCTION_32_2((uint64_t)"appBundleIdentifier");
  OUTLINED_FUNCTION_12_4(v11, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = OUTLINED_FUNCTION_16_40();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[21] = v0;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
  }

  uint64_t v15 = OUTLINED_FUNCTION_2_33();
  OUTLINED_FUNCTION_12_4(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = OUTLINED_FUNCTION_18_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[27] = v0;
    uint64_t v18 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v18);
  }

  uint64_t v19 = OUTLINED_FUNCTION_7_33();
  OUTLINED_FUNCTION_12_4(v19, v20, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v21 = OUTLINED_FUNCTION_17_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v21, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[33] = v0;
    uint64_t v22 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v22);
  }

  uint64_t v23 = OUTLINED_FUNCTION_1_33();
  OUTLINED_FUNCTION_12_4(v23, v24, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v25 = OUTLINED_FUNCTION_19_2();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v25, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[39] = v0;
    uint64_t v26 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v26);
  }

  uint64_t v27 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v28 = (void *)OUTLINED_FUNCTION_40_24(v27);
  OUTLINED_FUNCTION_31_24(v28);
  OUTLINED_FUNCTION_23_28();
  return OUTLINED_FUNCTION_5_23(v29, v30, v31, v32, v33);
}

uint64_t type metadata accessor for SuggestionsCATs(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for SuggestionsCATs;
  if (!type metadata singleton initialization cache for SuggestionsCATs) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SuggestionsCATs);
  }
  return result;
}

uint64_t type metadata completion function for SuggestionsCATs(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + class metadata base offset for SuggestionsCATs);
}

uint64_t ObjC metadata update function for SuggestionsCATs()
{
  return type metadata accessor for SuggestionsCATs(0LL);
}

uint64_t OUTLINED_FUNCTION_1_33()
{
  uint64_t result = *(void *)(v0 + 56);
  *(void *)(v1 + 27__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0x7470697263736564LL;
  *(void *)(v1 + 280) = 0xEB000000006E6F69LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_2_33()
{
  uint64_t result = *(void *)(v0 + 40);
  *(void *)(v1 + 176) = 0x7954797469746E65LL;
  *(void *)(v1 + 184) = 0xEA00000000006570LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_6_40()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 120);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 128) = v0;
  return swift_task_dealloc(v5);
}

uint64_t OUTLINED_FUNCTION_7_33()
{
  uint64_t result = *(void *)(v1 + 48);
  *(void *)(v2 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = 0x614E797469746E65LL;
  *(void *)(v2 + 23__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v0;
  return result;
}

uint64_t OUTLINED_FUNCTION_9_34(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_16_40()
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, v0);
}

uint64_t OUTLINED_FUNCTION_20_32( uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 56) = a7;
  *(void *)(v8 + 64) = v7;
  *(void *)(v8 + 40) = a5;
  *(void *)(v8 + 48) = a6;
  *(void *)(v8 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = a3;
  *(void *)(v8 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a4;
  *(_BYTE *)(v8 + 136) = a2;
  *(void *)(v8 + 16) = result;
  return result;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_24_28()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 112));
}

uint64_t OUTLINED_FUNCTION_27_27()
{
  return *(void *)(v0 + 32);
}

uint64_t OUTLINED_FUNCTION_31_24(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 16);
}

uint64_t OUTLINED_FUNCTION_38_26(uint64_t result)
{
  *(void *)(v1 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_40_24(uint64_t result)
{
  *(void *)(v1 + 120) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_42_19(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 16);
}

uint64_t OUTLINED_FUNCTION_43_23(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 16);
}

void static VoiceCommandsParity.isParityIntent(intentName:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for parityIntentsList != -1) {
    swift_once( &one-time initialization token for parityIntentsList,  one-time initialization function for parityIntentsList);
  }
  uint64_t v4 = static VoiceCommandsParity.parityIntentsList;
  uint64_t v5 = *(void *)(static VoiceCommandsParity.parityIntentsList + 16);
  if (!v5
    || ((uint64_t v6 = *(void *)(static VoiceCommandsParity.parityIntentsList + 32),
         uint64_t v7 = *(void *)(static VoiceCommandsParity.parityIntentsList + 40),
         v6 == a1)
      ? (BOOL v8 = v7 == a2)
      : (BOOL v8 = 0),
        v8
     || (OUTLINED_FUNCTION_60(v6, v7) & 1) != 0
     || v5 == 1
     || ((uint64_t v9 = *(void *)(v4 + 48), v10 = *(void *)(v4 + 56), v9 == a1) ? (v11 = v10 == a2) : (v11 = 0),
         v11 || (OUTLINED_FUNCTION_60(v9, v10) & 1) != 0 || v5 == 2)))
  {
LABEL_11:
    OUTLINED_FUNCTION_38_0();
  }

  else
  {
    uint64_t v12 = (uint64_t *)(v4 + 72);
    uint64_t v13 = 2LL;
    while (1)
    {
      uint64_t v14 = v13 + 1;
      if (__OFADD__(v13, 1LL)) {
        break;
      }
      uint64_t v15 = *(v12 - 1);
      uint64_t v16 = *v12;
      if ((v15 != a1 || v16 != a2) && (OUTLINED_FUNCTION_60(v15, v16) & 1) == 0)
      {
        v12 += 2;
        ++v13;
        if (v14 != v5) {
          continue;
        }
      }

      goto LABEL_11;
    }

    __break(1u);
  }

void static VoiceCommandsParity.shouldRequestUnlock(intent:)(void *a1)
{
  id v2 = [a1 typeName];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  if (v3 == 0xD000000000000029LL && v5 == 0x8000000000190780LL)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    char v6 = OUTLINED_FUNCTION_167(v3, v5, 0xD000000000000029LL, 0x8000000000190780LL);
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0) {
      goto LABEL_10;
    }
  }

  uint64_t v7 = objc_opt_self(&OBJC_CLASS___INSendMessageIntent);
  uint64_t v8 = swift_dynamicCastObjCClass(a1, v7);
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    id v10 = a1;
    outlined bridged method (pb) of @objc INSendMessageIntent.attachments.getter(v9);
    if (v11)
    {
      if ((unint64_t)v11 >> 62)
      {
        if (v11 >= 0) {
          v11 &= 0xFFFFFFFFFFFFFF8uLL;
        }
        _CocoaArrayWrapper.endIndex.getter(v11);
      }

      swift_bridgeObjectRelease();
    }

    else
    {
    }
  }

id static VoiceCommandsParity.processIntent(intent:)(void *a1)
{
  uint64_t v3 = objc_opt_self(&OBJC_CLASS___INSendMessageIntent);
  uint64_t v4 = (void *)swift_dynamicCastObjCClass(a1, v3);
  uint64_t v5 = a1;
  if (!v4) {
    return v5;
  }
  id v6 = a1;
  uint64_t v7 = outlined bridged method (pb) of @objc INSendMessageIntent.recipients.getter(v4);
  if (!v7)
  {

LABEL_17:
    uint64_t v5 = a1;
    return v5;
  }

  uint64_t v8 = v7;
  if (!((unint64_t)v7 >> 62))
  {
LABEL_16:

    OUTLINED_FUNCTION_1_2();
    goto LABEL_17;
  }

  if (v7 >= 0) {
    v7 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  if (!_CocoaArrayWrapper.endIndex.getter(v7)) {
    goto LABEL_16;
  }
LABEL_5:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, (v8 & 0xC000000000000001LL) == 0);
  if ((v8 & 0xC000000000000001LL) != 0) {
    id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v8);
  }
  else {
    id v9 = *(id *)(v8 + 32);
  }
  id v10 = v9;
  OUTLINED_FUNCTION_1_2();
  id v11 = [v10 personHandle];
  if (!v11)
  {

    goto LABEL_17;
  }

  uint64_t v12 = v11;
  uint64_t v13 = outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter( v10,  (SEL *)&selRef_contactIdentifier);
  OUTLINED_FUNCTION_32_21(v13, v14);
  if (!v1)
  {
    uint64_t v15 = outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter( v12,  (SEL *)&selRef_value);
    OUTLINED_FUNCTION_32_21(v15, v16);
  }

  return v6;
}

uint64_t static VoiceCommandsParity.buildDirectInvocationParse(intent:app:)@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  if (one-time initialization token for parityIntentsList != -1) {
    swift_once( &one-time initialization token for parityIntentsList,  one-time initialization function for parityIntentsList);
  }
  swift_bridgeObjectRetain(static VoiceCommandsParity.parityIntentsList);
  id v6 = OUTLINED_FUNCTION_14_19(v5, "typeName");
  OUTLINED_FUNCTION_58_18((uint64_t)v6);
  OUTLINED_FUNCTION_11_33();
  char v7 = OUTLINED_FUNCTION_17_36();
  OUTLINED_FUNCTION_22();
  uint64_t v8 = OUTLINED_FUNCTION_69();
  if ((v7 & 1) != 0)
  {
    if (one-time initialization token for directInvocationIdMapping != -1) {
      uint64_t v8 = swift_once( &one-time initialization token for directInvocationIdMapping,  one-time initialization function for directInvocationIdMapping);
    }
    id v9 = OUTLINED_FUNCTION_14_19(v8, "typeName");
    OUTLINED_FUNCTION_58_18((uint64_t)v9);
    OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_27_28(v2);
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    uint64_t v14 = OUTLINED_FUNCTION_69();
    if (v13)
    {
      uint64_t v15 = App.appIdentifier.getter(v14);
      if (v16)
      {
        uint64_t v17 = v15;
        uint64_t v18 = v16;
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
        uint64_t inited = swift_initStackObject(v19, &v26);
        *(_OWORD *)(inited + 16) = xmmword_17E660;
        *(void *)(inited + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0x6449707061LL;
        *(void *)(inited + 40) = 0xE500000000000000LL;
        *(void *)(inited + 48) = v17;
        *(void *)(inited + 56) = v18;
        *(void *)(inited + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = &type metadata for String;
        *(void *)(inited + 80) = 0x746E65746E69LL;
        *(void *)(inited + 88) = 0xE600000000000000LL;
        *(void *)(inited + 120) = type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INIntent,  &OBJC_CLASS___INIntent_ptr);
        *(void *)(inited + 96) = a1;
        id v21 = a1;
        uint64_t v22 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
        Parse.DirectInvocation.init(identifier:userData:)(v11, v13, v22);
        uint64_t v23 = type metadata accessor for Parse.DirectInvocation(0LL);
        return __swift_storeEnumTagSinglePayload(a2, 0LL, 1LL, v23);
      }

      OUTLINED_FUNCTION_22();
    }
  }

  uint64_t v25 = type metadata accessor for Parse.DirectInvocation(0LL);
  return __swift_storeEnumTagSinglePayload(a2, 1LL, 1LL, v25);
}

uint64_t static VoiceCommandsParity.buildNLContextUpdate(intent:app:)@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for parityIntentsList != -1) {
    swift_once( &one-time initialization token for parityIntentsList,  one-time initialization function for parityIntentsList);
  }
  swift_bridgeObjectRetain(static VoiceCommandsParity.parityIntentsList);
  id v3 = OUTLINED_FUNCTION_14_19(v2, "typeName");
  OUTLINED_FUNCTION_58_18((uint64_t)v3);
  OUTLINED_FUNCTION_11_33();
  char v4 = OUTLINED_FUNCTION_17_36();
  OUTLINED_FUNCTION_22();
  uint64_t v5 = OUTLINED_FUNCTION_69();
  if ((v4 & 1) == 0) {
    goto LABEL_10;
  }
  if (one-time initialization token for domainMapping != -1) {
    uint64_t v5 = swift_once( &one-time initialization token for domainMapping,  one-time initialization function for domainMapping);
  }
  id v6 = OUTLINED_FUNCTION_14_19(v5, "typeName");
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_27_28(v7);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = OUTLINED_FUNCTION_69();
  if (!v11) {
    goto LABEL_10;
  }
  uint64_t v13 = App.appIdentifier.getter(v12);
  if (!v14)
  {
    OUTLINED_FUNCTION_1_2();
LABEL_10:
    uint64_t v22 = 1LL;
    goto LABEL_11;
  }

  uint64_t v15 = v13;
  uint64_t v16 = v14;
  NLContextUpdate.init()(v13);
  NLContextUpdate.weightedPromptTargetDomain.setter(v9);
  NLContextUpdate.weightedPromptStrict.setter(1LL);
  uint64_t v17 = type metadata accessor for MachineUtteranceBuilder(0LL);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  MachineUtteranceBuilder.init()();
  dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)( 0x746163696C707061LL,  0xED000064496E6F69LL,  v15,  v16);
  swift_release();
  swift_bridgeObjectRelease();
  dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)( 0x656D614E707061LL,  0xE700000000000000LL,  0LL,  0xE000000000000000LL);
  uint64_t v18 = swift_release();
  uint64_t v19 = dispatch thunk of MachineUtteranceBuilder.build()(v18);
  uint64_t v21 = v20;
  swift_release();
  NLContextUpdate.nlInput.setter(v19, v21);
  uint64_t v22 = 0LL;
LABEL_11:
  uint64_t v23 = type metadata accessor for NLContextUpdate(0LL);
  return __swift_storeEnumTagSinglePayload(a1, v22, 1LL, v23);
}

uint64_t static VoiceCommandsParity.processExecutionResult(intent:executionResult:)(void *a1)
{
  uint64_t v5 = (os_log_s *)(v4 - v3);
  uint64_t v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INStartCallIntent, INStartCallIntentResponse>);
  uint64_t v122 = *(void *)(v124 - 8);
  OUTLINED_FUNCTION_91();
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v7);
  char v123 = (char *)&v121 - v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INSendMessageIntent, INSendMessageIntentResponse>?);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_35();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INSendMessageIntent, INSendMessageIntentResponse>);
  uint64_t v126 = *(void *)(v15 - 8);
  OUTLINED_FUNCTION_91();
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t *)((char *)&v121 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v20 = __chkstk_darwin(v17);
  os_log_t v127 = (os_log_t)((char *)&v121 - v21);
  id v125 = a1;
  id v22 = OUTLINED_FUNCTION_14_19(v20, "typeName");
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  if (v23 == 0xD000000000000029LL && v25 == 0x8000000000190780LL
    || (OUTLINED_FUNCTION_167(0xD000000000000029LL, 0x8000000000190780LL, v23, v25) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_25_31();
    if (swift_dynamicCast(v14, &v128, (char *)&type metadata for Any + 8, v15, 6LL))
    {
      OUTLINED_FUNCTION_4_13(v14, 0LL);
      uint64_t v27 = v126;
      os_log_t v26 = v127;
      (*(void (**)(os_log_t, uint64_t, uint64_t))(v126 + 32))(v127, v14, v15);
      (*(void (**)(uint64_t *, os_log_t, uint64_t))(v27 + 16))(v19, v26, v15);
      int v28 = (*(uint64_t (**)(uint64_t *, uint64_t))(v27 + 88))(v19, v15);
      if (v28 == enum case for RCHFlowResult.complete<A, B>(_:))
      {
        OUTLINED_FUNCTION_22_26();
        uint64_t v29 = v19[1];
        id v30 = (id)v19[2];
        swift_release();
        if (one-time initialization token for voiceCommands != -1) {
          swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
        }
        uint64_t v31 = OUTLINED_FUNCTION_48();
        int v32 = __swift_project_value_buffer(v31, (uint64_t)static Logger.voiceCommands);
        id v33 = v125;
        id v34 = v30;
        id v35 = v33;
        id v36 = v34;
        int v37 = v32;
        Logger.logObject.getter(v36);
        os_log_type_t v38 = OUTLINED_FUNCTION_164();
        if (OUTLINED_FUNCTION_40(v38))
        {
          uint64_t v39 = OUTLINED_FUNCTION_38(22LL);
          uint64_t v40 = (void *)OUTLINED_FUNCTION_38(16LL);
          *(_DWORD *)uint64_t v39 = 138412546;
          uint64_t v128 = (uint64_t)v35;
          id v125 = v30;
          id v41 = v35;
          LODWORD(v1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = v37;
          id v42 = v41;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v39 + 4);
          void *v40 = v35;

          *(_WORD *)(v39 + 1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 2112;
          uint64_t v128 = (uint64_t)v36;
          id v43 = v36;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v39 + 14);
          v40[1] = v36;

          id v30 = v125;
          _os_log_impl( &dword_0,  (os_log_t)v125,  (os_log_type_t)v124,  "VoiceCommandsParity.processExecutionResult success with intent: %@, intentResponse: %@",  (uint8_t *)v39,  0x16u);
          uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          OUTLINED_FUNCTION_20_33(v44);
          OUTLINED_FUNCTION_1_0((uint64_t)v40);
          OUTLINED_FUNCTION_1_0(v39);
        }

        else
        {
        }

        (*(void (**)(os_log_t, uint64_t))(v126 + 8))(v127, v15);
        return v29;
      }

      if (v28 == enum case for RCHFlowResult.error<A, B>(_:))
      {
        OUTLINED_FUNCTION_22_26();
        uint64_t v29 = *v19;
        if (one-time initialization token for voiceCommands != -1) {
          swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
        }
        uint64_t v47 = OUTLINED_FUNCTION_48();
        uint64_t v48 = (void *)OUTLINED_FUNCTION_84(v47, (uint64_t)static Logger.voiceCommands);
        os_log_type_t v49 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_31_0(v49))
        {
          uint64_t v50 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
          *uint64_t v50 = 0;
          OUTLINED_FUNCTION_12_28(&dword_0, v51, v52, "VoiceCommandsParity.processExecutionResult has error");
          OUTLINED_FUNCTION_1_0((uint64_t)v50);
        }

        (*(void (**)(os_log_t, uint64_t))(v27 + 8))(v127, v15);
        return v29;
      }

      if (v28 == enum case for RCHFlowResult.cancelled<A, B>(_:))
      {
        if (one-time initialization token for voiceCommands != -1) {
          swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
        }
        uint64_t v70 = OUTLINED_FUNCTION_48();
        OUTLINED_FUNCTION_84(v70, (uint64_t)static Logger.voiceCommands);
        os_log_type_t v71 = OUTLINED_FUNCTION_164();
        if (OUTLINED_FUNCTION_40(v71))
        {
          uint64_t v72 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
          OUTLINED_FUNCTION_26_1(v72);
          OUTLINED_FUNCTION_27(&dword_0, v73, v74, "VoiceCommandsParity.processExecutionResult is cancelled");
          OUTLINED_FUNCTION_1_0(v23);
        }

        (*(void (**)(os_log_t, uint64_t))(v27 + 8))(v127, v15);
        return 0LL;
      }

      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v99 = OUTLINED_FUNCTION_48();
      OUTLINED_FUNCTION_84(v99, (uint64_t)static Logger.voiceCommands);
      os_log_type_t v100 = OUTLINED_FUNCTION_164();
      if (OUTLINED_FUNCTION_40(v100))
      {
        uint64_t v101 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
        OUTLINED_FUNCTION_26_1(v101);
        OUTLINED_FUNCTION_27(&dword_0, v102, v103, "VoiceCommandsParity.processExecutionResult has unknown cases");
        OUTLINED_FUNCTION_1_0(v23);
      }

      unint64_t v104 = lazy protocol witness table accessor for type VoiceCommandsParityError and conformance VoiceCommandsParityError();
      uint64_t v29 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for VoiceCommandsParityError, v104);
      *uint64_t v105 = 3;
      uint64_t v106 = *(void (**)(os_log_t, uint64_t))(v27 + 8);
      v106(v127, v15);
      v106((os_log_t)v19, v15);
      return v29;
    }

    OUTLINED_FUNCTION_4_13(v14, 1LL);
    uint64_t v45 = &demangling cache variable for type metadata for RCHFlowResult<INSendMessageIntent, INSendMessageIntentResponse>?;
    uint64_t v46 = v14;
    goto LABEL_36;
  }

  if (v23 == 0xD000000000000023LL && v25 == 0x80000000001907B0LL)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v23 = OUTLINED_FUNCTION_167(0xD000000000000023LL, 0x80000000001907B0LL, v23, v25);
    OUTLINED_FUNCTION_22();
    if ((v23 & 1) == 0)
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v84 = OUTLINED_FUNCTION_48();
      __swift_project_value_buffer(v84, (uint64_t)static Logger.voiceCommands);
      id v85 = OUTLINED_FUNCTION_26_26();
      uint64_t v76 = (void *)Logger.logObject.getter(v85);
      os_log_type_t v86 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled((os_log_t)v76, v86))
      {

        goto LABEL_42;
      }

      uint64_t v87 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v88 = OUTLINED_FUNCTION_38(32LL);
      uint64_t v128 = v88;
      *(_DWORD *)uint64_t v87 = 136315138;
      id v89 = OUTLINED_FUNCTION_14_19(v88, "typeName");
      uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v92 = v91;

      uint64_t v130 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v92, &v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v87 + 4);

      swift_bridgeObjectRelease();
      _os_log_impl( &dword_0,  (os_log_t)v76,  v86,  "VoiceCommandsParity.processExecutionResult cannot find intent name: %s",  v87,  0xCu);
      swift_arrayDestroy(v88, 1LL, (char *)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v88);
      uint64_t v81 = (uint64_t)v87;
      goto LABEL_40;
    }
  }

  OUTLINED_FUNCTION_25_31();
  uint64_t v53 = v124;
  if (!swift_dynamicCast(v5, &v128, (char *)&type metadata for Any + 8, v124, 6LL))
  {
    OUTLINED_FUNCTION_29_23((uint64_t)v5, 1LL);
    uint64_t v45 = &demangling cache variable for type metadata for RCHFlowResult<INStartCallIntent, INStartCallIntentResponse>?;
    uint64_t v46 = (uint64_t)v5;
LABEL_36:
    outlined destroy of URL?(v46, v45);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v75 = OUTLINED_FUNCTION_48();
    uint64_t v76 = (void *)OUTLINED_FUNCTION_84(v75, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v77 = static os_log_type_t.error.getter();
    if (!OUTLINED_FUNCTION_40(v77)) {
      goto LABEL_41;
    }
    uint64_t v78 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    OUTLINED_FUNCTION_26_1(v78);
    OUTLINED_FUNCTION_27( &dword_0,  v79,  v80,  "VoiceCommandsParity.processExecutionResult cannot create executionResult for INSendMessageIntent.");
    uint64_t v81 = v23;
LABEL_40:
    OUTLINED_FUNCTION_1_0(v81);
LABEL_41:

LABEL_42:
    unint64_t v82 = lazy protocol witness table accessor for type VoiceCommandsParityError and conformance VoiceCommandsParityError();
    uint64_t v29 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for VoiceCommandsParityError, v82);
    *uint64_t v83 = 3;
    return v29;
  }

  OUTLINED_FUNCTION_29_23((uint64_t)v5, 0LL);
  uint64_t v55 = v122;
  uint64_t v54 = v123;
  (*(void (**)(char *, os_log_s *, uint64_t))(v122 + 32))(v123, v5, v53);
  (*(void (**)(uint64_t *, char *, uint64_t))(v55 + 16))(v9, v54, v53);
  int v56 = (*(uint64_t (**)(uint64_t *, uint64_t))(v55 + 88))(v9, v53);
  if (v56 == enum case for RCHFlowResult.complete<A, B>(_:))
  {
    OUTLINED_FUNCTION_19_26();
    uint64_t v29 = v9[1];
    uint64_t v57 = (void *)v9[2];
    swift_release();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v58 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v58, (uint64_t)static Logger.voiceCommands);
    id v59 = OUTLINED_FUNCTION_26_26();
    id v60 = v57;
    id v61 = v59;
    id v62 = v60;
    Logger.logObject.getter(v62);
    os_log_type_t v63 = OUTLINED_FUNCTION_164();
    if (os_log_type_enabled(v5, v63))
    {
      uint64_t v64 = OUTLINED_FUNCTION_38(22LL);
      __int128 v65 = (void *)OUTLINED_FUNCTION_38(16LL);
      *(_DWORD *)uint64_t v64 = 138412546;
      os_log_t v127 = v5;
      uint64_t v128 = (uint64_t)v61;
      uint64_t v66 = v29;
      id v67 = v61;
      OUTLINED_FUNCTION_28_22((uint64_t)&v128, (uint64_t)v129);
      void *v65 = v61;

      uint64_t v29 = v66;
      *(_WORD *)(v64 + 1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 2112;
      uint64_t v128 = (uint64_t)v62;
      id v68 = v62;
      uint64_t v53 = v124;
      OUTLINED_FUNCTION_28_22((uint64_t)&v128, (uint64_t)v129);
      v65[1] = v62;

      uint64_t v5 = v127;
      _os_log_impl( &dword_0,  v127,  v63,  "VoiceCommandsParity.processExecutionResult success with intent: %@, intentResponse: %@",  (uint8_t *)v64,  0x16u);
      uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_20_33(v69);
      OUTLINED_FUNCTION_1_0((uint64_t)v65);
      OUTLINED_FUNCTION_1_0(v64);
    }

    else
    {
    }

    (*(void (**)(char *, uint64_t))(v122 + 8))(v123, v53);
  }

  else if (v56 == enum case for RCHFlowResult.error<A, B>(_:))
  {
    OUTLINED_FUNCTION_19_26();
    uint64_t v29 = *v9;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v93 = OUTLINED_FUNCTION_48();
    uint64_t v94 = (void *)OUTLINED_FUNCTION_84(v93, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v95 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_31_0(v95))
    {
      uint64_t v96 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      *uint64_t v96 = 0;
      OUTLINED_FUNCTION_12_28(&dword_0, v97, v98, "VoiceCommandsParity.processExecutionResult has error");
      OUTLINED_FUNCTION_1_0((uint64_t)v96);
    }

    (*(void (**)(char *, uint64_t))(v55 + 8))(v123, v53);
  }

  else
  {
    if (v56 == enum case for RCHFlowResult.cancelled<A, B>(_:))
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v107 = OUTLINED_FUNCTION_48();
      OUTLINED_FUNCTION_84(v107, (uint64_t)static Logger.voiceCommands);
      os_log_type_t v108 = OUTLINED_FUNCTION_164();
      if (OUTLINED_FUNCTION_40(v108))
      {
        uint64_t v109 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
        OUTLINED_FUNCTION_26_1(v109);
        OUTLINED_FUNCTION_27(&dword_0, v110, v111, "VoiceCommandsParity.processExecutionResult is cancelled");
        OUTLINED_FUNCTION_1_0(v23);
      }

      (*(void (**)(char *, uint64_t))(v55 + 8))(v123, v53);
      return 0LL;
    }

    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v112 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v112, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v113 = OUTLINED_FUNCTION_164();
    if (OUTLINED_FUNCTION_40(v113))
    {
      uint64_t v114 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_26_1(v114);
      OUTLINED_FUNCTION_27(&dword_0, v115, v116, "VoiceCommandsParity.processExecutionResult has unknown cases");
      OUTLINED_FUNCTION_1_0(v23);
    }

    unint64_t v117 = lazy protocol witness table accessor for type VoiceCommandsParityError and conformance VoiceCommandsParityError();
    uint64_t v29 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for VoiceCommandsParityError, v117);
    *uint64_t v118 = 3;
    uint64_t v119 = *(void (**)(char *, uint64_t))(v55 + 8);
    v119(v123, v53);
    v119((char *)v9, v53);
  }

  return v29;
}

void *VoiceCommandsParity.sendMessageIntentName.unsafeMutableAddressor()
{
  return &static VoiceCommandsParity.sendMessageIntentName;
}

unint64_t static VoiceCommandsParity.sendMessageIntentName.getter()
{
  return 0xD000000000000029LL;
}

void *VoiceCommandsParity.startCallIntentName.unsafeMutableAddressor()
{
  return &static VoiceCommandsParity.startCallIntentName;
}

unint64_t static VoiceCommandsParity.startCallIntentName.getter()
{
  return 0xD000000000000023LL;
}

void one-time initialization function for parityIntentsList()
{
  static VoiceCommandsParity.parityIntentsList = (uint64_t)&outlined read-only object #0 of one-time initialization function for parityIntentsList;
}

uint64_t *VoiceCommandsParity.parityIntentsList.unsafeMutableAddressor()
{
  if (one-time initialization token for parityIntentsList != -1) {
    swift_once( &one-time initialization token for parityIntentsList,  one-time initialization function for parityIntentsList);
  }
  return &static VoiceCommandsParity.parityIntentsList;
}

uint64_t static VoiceCommandsParity.parityIntentsList.getter()
{
  return static VoiceCommandsParity.parityIntentsList.getter( &one-time initialization token for parityIntentsList,  &static VoiceCommandsParity.parityIntentsList);
}

uint64_t one-time initialization function for domainMapping()
{
  uint64_t result = Dictionary.init(dictionaryLiteral:)( &outlined read-only object #0 of one-time initialization function for domainMapping,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  static VoiceCommandsParity.domainMapping = result;
  return result;
}

uint64_t *VoiceCommandsParity.domainMapping.unsafeMutableAddressor()
{
  if (one-time initialization token for domainMapping != -1) {
    swift_once(&one-time initialization token for domainMapping, one-time initialization function for domainMapping);
  }
  return &static VoiceCommandsParity.domainMapping;
}

uint64_t static VoiceCommandsParity.domainMapping.getter()
{
  return static VoiceCommandsParity.parityIntentsList.getter( &one-time initialization token for domainMapping,  &static VoiceCommandsParity.domainMapping);
}

uint64_t one-time initialization function for directInvocationIdMapping()
{
  uint64_t result = Dictionary.init(dictionaryLiteral:)( &outlined read-only object #0 of one-time initialization function for directInvocationIdMapping,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  static VoiceCommandsParity.directInvocationIdMapping = result;
  return result;
}

uint64_t *VoiceCommandsParity.directInvocationIdMapping.unsafeMutableAddressor()
{
  if (one-time initialization token for directInvocationIdMapping != -1) {
    swift_once( &one-time initialization token for directInvocationIdMapping,  one-time initialization function for directInvocationIdMapping);
  }
  return &static VoiceCommandsParity.directInvocationIdMapping;
}

uint64_t static VoiceCommandsParity.directInvocationIdMapping.getter()
{
  return static VoiceCommandsParity.parityIntentsList.getter( &one-time initialization token for directInvocationIdMapping,  &static VoiceCommandsParity.directInvocationIdMapping);
}

uint64_t static VoiceCommandsParity.parityIntentsList.getter(void *a1, void *a2)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  return swift_bridgeObjectRetain(*a2);
}

id @nonobjc INSendMessageIntent.init(recipients:outgoingMessageType:content:speakableGroupName:conversationIdentifier:serviceName:sender:attachments:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11)
{
  if (a1)
  {
    type metadata accessor for NSError( 0LL,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
    v16.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    if (a4)
    {
LABEL_3:
      NSString v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }

  else
  {
    v16.super.Class isa = 0LL;
    if (a4) {
      goto LABEL_3;
    }
  }

  NSString v17 = 0LL;
LABEL_6:
  if (a7)
  {
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v18 = 0LL;
  }

  if (a9)
  {
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v19 = 0LL;
  }

  if (a11)
  {
    type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INSendMessageAttachment,  &OBJC_CLASS___INSendMessageAttachment_ptr);
    v20.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }

  else
  {
    v20.super.Class isa = 0LL;
  }

  id v21 = [v11 initWithRecipients:v16.super.isa outgoingMessageType:a2 content:v17 speakableGroupName:a5 conversationIdentifier:v18 serviceName:v19 sender:a10 attachments:v20.super.isa];

  return v21;
}

uint64_t outlined bridged method (pb) of @objc INSendMessageIntent.recipients.getter(void *a1)
{
  id v1 = [a1 recipients];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for NSError( 0LL,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

uint64_t storeEnumTagSinglePayload for VoiceCommandsParityError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_11117C + 4 * byte_188E45[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1111B0 + 4 * asc_188E40[v4]))();
}

uint64_t sub_1111B0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1111B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1111C0LL);
  }
  return result;
}

uint64_t sub_1111CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1111D4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1111D8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1111E0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for VoiceCommandsParityError()
{
}

void destroy for ParityFlowExecutionResult(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for ParityFlowExecutionResult(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of ParityFlowExecutionResult(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ParityFlowExecutionResult(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of ParityFlowExecutionResult(*(id *)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of ParityFlowExecutionResult(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ParityFlowExecutionResult(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of ParityFlowExecutionResult(v4, v5, v6);
  return a1;
}

void type metadata accessor for ParityFlowExecutionResult()
{
}

void type metadata accessor for VoiceCommandsParity()
{
}

void OUTLINED_FUNCTION_11_33()
{
}

void OUTLINED_FUNCTION_12_28(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_17_36()
{
  return specialized Sequence<>.contains(_:)(v1, v2, v0);
}

uint64_t OUTLINED_FUNCTION_19_26()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 96))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_20_33(uint64_t a1)
{
  return swift_arrayDestroy(v1, 2LL, a1);
}

uint64_t OUTLINED_FUNCTION_22_26()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 96))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_25_31()
{
  return outlined init with copy of Any(v0, v1 - 120);
}

id OUTLINED_FUNCTION_26_26()
{
  return *(id *)(v0 - 144);
}

void OUTLINED_FUNCTION_27_28(uint64_t a1)
{
}

uint64_t OUTLINED_FUNCTION_28_22(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_29_23(uint64_t a1, uint64_t a2)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1LL, v2);
}

uint64_t OUTLINED_FUNCTION_32_21(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

uint64_t OUTLINED_FUNCTION_34_28(uint64_t a1, SEL *a2)
{
  return outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter(v2, a2);
}

void UsoEntity_common_Number.intValue.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_7_34();
  OUTLINED_FUNCTION_0_42(v0, v1);
  uint64_t v2 = OUTLINED_FUNCTION_34_0();
  if (v9)
  {
    UsoEntity_common_MultipliedNumber.intValue.getter();
    OUTLINED_FUNCTION_3_46();
  }

  else
  {
    CodeGenBase.entity.getter(v2);
    uint64_t v3 = OUTLINED_FUNCTION_5_39();
    OUTLINED_FUNCTION_0_42(v3, v4);
    OUTLINED_FUNCTION_34_0();
    uint64_t v5 = UsoEntity_common_Number.definedIntValue.getter();
    if ((v6 & 1) != 0)
    {
      CodeGenBase.entity.getter(v5);
      uint64_t v7 = OUTLINED_FUNCTION_6_41();
      OUTLINED_FUNCTION_0_42(v7, v8);
      OUTLINED_FUNCTION_34_0();
    }
  }

  OUTLINED_FUNCTION_36();
}

uint64_t UsoEntity_common_MultipliedNumber.intValue.getter()
{
  uint64_t v0 = ((uint64_t (*)(void))dispatch thunk of UsoEntity_common_MultipliedNumber.value.getter)();
  uint64_t v1 = swift_release(v0);
  if (!v0)
  {
    uint64_t v2 = dispatch thunk of UsoEntity_common_MultipliedNumber.multiplier.getter(v1);
    uint64_t v1 = swift_release(v2);
    if (!v2) {
      return 0LL;
    }
  }

  uint64_t v3 = dispatch thunk of UsoEntity_common_MultipliedNumber.value.getter(v1);
  uint64_t v8 = dispatch thunk of UsoEntity_common_MultipliedNumber.multiplier.getter(v3);
  if (!v8
    || (uint64_t v9 = v8, v10 = UsoEntity_common_Number.definedIntValue.getter(), v12 = v11, swift_release(v9), (v12 & 1) != 0))
  {
    uint64_t v10 = 1LL;
  }

  uint64_t result = v5 * v10;
  return result;
}

uint64_t UsoEntity_common_MixedFraction.intValue.getter()
{
  uint64_t v0 = dispatch thunk of UsoEntity_common_MixedFraction.numeratorValue.getter();
  if ((v1 & 1) != 0
    && (uint64_t v2 = dispatch thunk of UsoEntity_common_MixedFraction.denominatorValue.getter(v0), (v3 & 1) != 0))
  {
    return dispatch thunk of UsoEntity_common_MixedFraction.wholeValue.getter(v2);
  }

  else
  {
    return 0LL;
  }

uint64_t UsoEntity_common_Number.definedIntValue.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Number.DefinedValues?);
  uint64_t v1 = __chkstk_darwin(v0);
  char v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __chkstk_darwin(v1);
  char v6 = (char *)&v12 - v5;
  dispatch thunk of UsoEntity_common_Number.definedValue.getter(v4);
  uint64_t v7 = type metadata accessor for UsoEntity_common_Number.DefinedValues(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1LL, v7) == 1)
  {
    uint64_t v8 = 0LL;
  }

  else
  {
    outlined init with copy of UsoEntity_common_Number.DefinedValues?((uint64_t)v6, (uint64_t)v3);
    uint64_t v9 = *(void *)(v7 - 8);
    int v10 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v3, v7);
    if (v10 == enum case for UsoEntity_common_Number.DefinedValues.common_Number_Billion(_:))
    {
      uint64_t v8 = 1000000000LL;
    }

    else if (v10 == enum case for UsoEntity_common_Number.DefinedValues.common_Number_Twelve(_:))
    {
      uint64_t v8 = 12LL;
    }

    else if (v10 == enum case for UsoEntity_common_Number.DefinedValues.common_Number_Thousand(_:))
    {
      uint64_t v8 = 1000LL;
    }

    else if (v10 == enum case for UsoEntity_common_Number.DefinedValues.common_Number_Trillion(_:))
    {
      uint64_t v8 = 1000000000000LL;
    }

    else if (v10 == enum case for UsoEntity_common_Number.DefinedValues.common_Number_Million(_:))
    {
      uint64_t v8 = 1000000LL;
    }

    else if (v10 == enum case for UsoEntity_common_Number.DefinedValues.common_Number_HundredThousand(_:))
    {
      uint64_t v8 = 100000LL;
    }

    else if (v10 == enum case for UsoEntity_common_Number.DefinedValues.common_Number_TenThousand(_:))
    {
      uint64_t v8 = 10000LL;
    }

    else if (v10 == enum case for UsoEntity_common_Number.DefinedValues.common_Number_Hundred(_:))
    {
      uint64_t v8 = 100LL;
    }

    else if (v10 == enum case for UsoEntity_common_Number.DefinedValues.common_Number_TenMillion(_:))
    {
      uint64_t v8 = 10000000LL;
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v3, v7);
      uint64_t v8 = 0LL;
    }
  }

  outlined destroy of UsoEntity_common_Number.DefinedValues?((uint64_t)v6);
  return v8;
}

uint64_t outlined destroy of UsoEntity_common_Number.DefinedValues?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Number.DefinedValues?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of UsoEntity_common_Number.DefinedValues?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Number.DefinedValues?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void UsoEntity_common_Number.doubleValue.getter(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_7_34();
  OUTLINED_FUNCTION_0_42(v1, v2);
  uint64_t v3 = OUTLINED_FUNCTION_34_0();
  if (v15)
  {
    uint64_t v4 = UsoEntity_common_MultipliedNumber.intValue.getter();
    if ((v5 & 1) != 0)
    {
      swift_release();
    }

    else
    {
      specialized Double.init<A>(exactly:)(v4);
      OUTLINED_FUNCTION_3_46();
    }
  }

  else
  {
    CodeGenBase.entity.getter(v3);
    uint64_t v6 = OUTLINED_FUNCTION_5_39();
    OUTLINED_FUNCTION_0_42(v6, v7);
    OUTLINED_FUNCTION_34_0();
    uint64_t v8 = UsoEntity_common_Number.definedIntValue.getter();
    if ((v9 & 1) != 0)
    {
      CodeGenBase.entity.getter(v8);
      uint64_t v10 = type metadata accessor for UsoEntity_common_Decimal(0LL);
      OUTLINED_FUNCTION_0_42(v10, v11);
      uint64_t v12 = OUTLINED_FUNCTION_34_0();
      CodeGenBase.entity.getter(v12);
      uint64_t v13 = OUTLINED_FUNCTION_6_41();
      OUTLINED_FUNCTION_0_42(v13, v14);
      OUTLINED_FUNCTION_34_0();
    }
  }

  OUTLINED_FUNCTION_36();
}

uint64_t specialized Double.init<A>(exactly:)(uint64_t result)
{
  double v1 = (double)result;
  if ((double)result >= 9.22337204e18)
  {
    *(double *)&uint64_t result = 0.0;
    return result;
  }

  if ((~*(void *)&v1 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v1 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    return result;
  }

  else {
    *(double *)&uint64_t result = 0.0;
  }
  return result;
}

uint64_t UsoEntity_common_MixedFraction.doubleValue.getter()
{
  uint64_t v0 = dispatch thunk of UsoEntity_common_MixedFraction.numeratorValue.getter();
  char v2 = v1;
  uint64_t v3 = dispatch thunk of UsoEntity_common_MixedFraction.denominatorValue.getter(v0);
  if ((v4 & 1) != 0) {
    goto LABEL_5;
  }
  if (!v3)
  {
    double v6 = 0.0;
    return *(void *)&v6;
  }

  if ((v2 & 1) != 0)
  {
LABEL_5:
    double v6 = 0.0;
    char v5 = 1;
  }

  else
  {
    char v5 = 0;
    double v6 = (double)v0 / (double)v3;
  }

  uint64_t v7 = dispatch thunk of UsoEntity_common_MixedFraction.wholeValue.getter(v3);
  if ((v8 & 1) == 0)
  {
    if ((v5 & 1) != 0) {
      double v9 = (double)v7;
    }
    else {
      double v9 = v6 + (double)v7;
    }
    double v6 = v9;
  }

  return *(void *)&v6;
}

uint64_t specialized Double.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = 0LL;
  uint64_t v10 = &v12;
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL))
  {
    _StringGuts._slowWithCString<A>(_:)( v11,  partial apply for closure #1 in closure #1 in Double.init<A>(_:),  v9,  a1,  a2,  &type metadata for Bool);
    swift_bridgeObjectRelease(a2);
    char v6 = v11[0];
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    v11[0] = a1;
    v11[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    char v6 = (a1 > 0x20u || ((0x100003E01uLL >> a1) & 1) == 0)
      && (uint64_t v7 = (_BYTE *)_swift_stdlib_strtod_clocale(v11, &v12, a1)) != 0LL
      && *v7 == 0;
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    if ((a1 & 0x1000000000000000LL) != 0)
    {
      uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v4 = _StringObject.sharedUTF8.getter(a1, a2);
    }

    char v6 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n( v4,  v5,  (void (*)(uint64_t *__return_ptr))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
    swift_bridgeObjectRelease(a2);
  }

  if ((v6 & 1) != 0) {
    return v12;
  }
  else {
    return 0LL;
  }
}

_BYTE *closure #1 in closure #1 in Double.init<A>(_:)@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1LL << v3) & 0x100003E01LL;
  BOOL v6 = v4 || v5 == 0;
  BOOL v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0LL && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n( uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }

  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0LL, 0LL);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }

  return v4 & 1;
}

_BYTE *partial apply for closure #1 in closure #1 in Double.init<A>(_:)@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return closure #1 in closure #1 in Double.init<A>(_:)(a1, a2);
}

void *partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

void *OUTLINED_FUNCTION_0_42(uint64_t a1, uint64_t a2, ...)
{
  return static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)((uint64_t *)va, v2, a1, a1);
}

uint64_t OUTLINED_FUNCTION_3_46()
{
  return swift_release(v0);
}

uint64_t OUTLINED_FUNCTION_5_39()
{
  return type metadata accessor for UsoEntity_common_MixedFraction(0LL);
}

uint64_t OUTLINED_FUNCTION_6_41()
{
  return type metadata accessor for UsoEntity_common_Integer(0LL);
}

uint64_t OUTLINED_FUNCTION_7_34()
{
  return type metadata accessor for UsoEntity_common_MultipliedNumber(0LL);
}

id VoiceCommandsNLIntent.VoiceCommandUnit.unitType.getter(char a1)
{
  return objc_msgSend((id)objc_opt_self(*off_1FBD68[a1]), *off_1FC028[a1]);
}

uint64_t Logger.voiceCommands.unsafeMutableAddressor()
{
  return Logger.voiceCommands.unsafeMutableAddressor( &one-time initialization token for voiceCommands,  (uint64_t)static Logger.voiceCommands,  (uint64_t)one-time initialization function for voiceCommands);
}

uint64_t Logger.logAndCrash(_:file:line:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v38 = a6;
  unsigned int v39 = a5;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = &v32[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v13);
  NSString v17 = &v32[-v16];
  uint64_t v18 = OUTLINED_FUNCTION_48();
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v19 + 16))(v17, v7, v18);
  __swift_storeEnumTagSinglePayload((uint64_t)v17, 0LL, 1LL, v18);
  outlined init with copy of Logger?((uint64_t)v17, (uint64_t)v15);
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1LL, v18) == 1)
  {
    outlined destroy of Logger?((uint64_t)v15);
  }

  else
  {
    uint64_t v20 = swift_bridgeObjectRetain_n(a2, 2LL);
    id v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.error.getter();
    int v23 = v22;
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      uint64_t v36 = a3;
      uint64_t v25 = v24;
      uint64_t v35 = swift_slowAlloc(64LL, -1LL);
      uint64_t v41 = v35;
      *(_DWORD *)uint64_t v25 = 136315650;
      uint64_t v37 = a4;
      uint64_t v26 = StaticString.description.getter(v36, a4, v39);
      os_log_t v34 = v21;
      uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v41);
      int v33 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v25 + 4);
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 2048;
      uint64_t v40 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v25 + 14);
      *(_WORD *)(v25 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 2080;
      swift_bridgeObjectRetain(a2);
      uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v41);
      a4 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v25 + 24);
      swift_bridgeObjectRelease_n(a2, 3LL);
      os_log_t v28 = v34;
      _os_log_impl(&dword_0, v34, (os_log_type_t)v33, "FatalError at %s:%lu - %s", (uint8_t *)v25, 0x20u);
      uint64_t v29 = v35;
      swift_arrayDestroy(v35, 2LL, (char *)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v29);
      uint64_t v30 = v25;
      a3 = v36;
      OUTLINED_FUNCTION_1_0(v30);
    }

    else
    {
      swift_bridgeObjectRelease_n(a2, 2LL);
    }

    (*(void (**)(_BYTE *, uint64_t))(v19 + 8))(v15, v18);
  }

  static SiriKitLifecycle._logCrashToEventBus(_:)(a1, a2);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, a1, a2, a3, a4, v39);
  __break(1u);
  return result;
}

uint64_t one-time initialization function for voiceCommands()
{
  uint64_t v0 = OUTLINED_FUNCTION_48();
  __swift_allocate_value_buffer(v0, static Logger.voiceCommands);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.voiceCommands);
  uint64_t v1 = OUTLINED_FUNCTION_0_43();
  return Logger.init(subsystem:category:)(v1);
}

{
  uint64_t v0;
  uint64_t v0 = OUTLINED_FUNCTION_33_16();
  __swift_allocate_value_buffer(v0, static Signposter.voiceCommands);
  __swift_project_value_buffer(v0, (uint64_t)static Signposter.voiceCommands);
  return OSSignposter.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xEE00697269732E65LL,  0x6D6F436563696F56LL,  0xED000073646E616DLL);
}

const char *LogConst.subsystem.unsafeMutableAddressor()
{
  return "com.apple.siri";
}

const char *LogConst.Category.voiceCommands.unsafeMutableAddressor()
{
  return "VoiceCommands";
}

uint64_t static Logger.voiceCommands.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.voiceCommands.getter( &one-time initialization token for voiceCommands,  (uint64_t)static Logger.voiceCommands,  (uint64_t)one-time initialization function for voiceCommands,  a1);
}

uint64_t one-time initialization function for linkUI()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  __swift_allocate_value_buffer(v0, static Logger.linkUI);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.linkUI);
  return Logger.init(subsystem:category:)(0xD00000000000001BLL);
}

void *LogConst.subsystemSLF.unsafeMutableAddressor()
{
  return &static LogConst.subsystemSLF;
}

void *LogConst.Category.siriLinkUIPlugin.unsafeMutableAddressor()
{
  return &static LogConst.Category.siriLinkUIPlugin;
}

uint64_t Logger.linkUI.unsafeMutableAddressor()
{
  return Logger.voiceCommands.unsafeMutableAddressor( &one-time initialization token for linkUI,  (uint64_t)static Logger.linkUI,  (uint64_t)one-time initialization function for linkUI);
}

uint64_t Logger.voiceCommands.unsafeMutableAddressor(void *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v4 = OUTLINED_FUNCTION_48();
  return __swift_project_value_buffer(v4, a2);
}

uint64_t static Logger.linkUI.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.voiceCommands.getter( &one-time initialization token for linkUI,  (uint64_t)static Logger.linkUI,  (uint64_t)one-time initialization function for linkUI,  a1);
}

uint64_t one-time initialization function for siriKitUI()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  __swift_allocate_value_buffer(v0, static Logger.siriKitUI);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.siriKitUI);
  return Logger.init(subsystem:category:)(0xD000000000000016LL);
}

void *LogConst.subsystemSKE.unsafeMutableAddressor()
{
  return &static LogConst.subsystemSKE;
}

void *LogConst.Category.siriKitUIPlugin.unsafeMutableAddressor()
{
  return &static LogConst.Category.siriKitUIPlugin;
}

uint64_t Logger.siriKitUI.unsafeMutableAddressor()
{
  return Logger.voiceCommands.unsafeMutableAddressor( &one-time initialization token for siriKitUI,  (uint64_t)static Logger.siriKitUI,  (uint64_t)one-time initialization function for siriKitUI);
}

uint64_t static Logger.siriKitUI.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.voiceCommands.getter( &one-time initialization token for siriKitUI,  (uint64_t)static Logger.siriKitUI,  (uint64_t)one-time initialization function for siriKitUI,  a1);
}

uint64_t static Logger.voiceCommands.getter@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v6 = OUTLINED_FUNCTION_48();
  uint64_t v7 = __swift_project_value_buffer(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a4, v7, v6);
}

uint64_t static LogConst.subsystem.getter()
{
  return OUTLINED_FUNCTION_0_43();
}

unint64_t static LogConst.subsystemSLF.getter()
{
  return OUTLINED_FUNCTION_0_22(27LL);
}

unint64_t static LogConst.subsystemSKE.getter()
{
  return OUTLINED_FUNCTION_0_22(22LL);
}

uint64_t static LogConst.Category.voiceCommands.getter()
{
  return 0x6D6F436563696F56LL;
}

unint64_t static LogConst.Category.siriLinkUIPlugin.getter()
{
  return OUTLINED_FUNCTION_0_22(16LL);
}

uint64_t static LogConst.Category.siriKitUIPlugin.getter()
{
  return 0x5574694B69726953LL;
}

void type metadata accessor for Logger()
{
}

void type metadata accessor for LogConst()
{
}

void type metadata accessor for LogConst.Category()
{
}

uint64_t OUTLINED_FUNCTION_0_43()
{
  return 0x6C7070612E6D6F63LL;
}

void __swiftcall AutoShortcutFirstRunWatchVisual.init(shortcutPhrases:enableButtonLabel:cancelButtonLabel:moreShortcutsLabel:promptLabel:bundleId:)( SiriLinkFlowPlugin::AutoShortcutFirstRunWatchVisual *__return_ptr retstr, Swift::OpaquePointer shortcutPhrases, Swift::String enableButtonLabel, Swift::String cancelButtonLabel, Swift::String_optional moreShortcutsLabel, Swift::String promptLabel, Swift::String bundleId)
{
  retstr->shortcutPhrases = shortcutPhrases;
  retstr->enableButtonLabel = enableButtonLabel;
  retstr->cancelButtonLabel = cancelButtonLabel;
  retstr->moreShortcutsLabel = moreShortcutsLabel;
  retstr->promptLabel._countAndFlagsBits = promptLabel._countAndFlagsBits;
  *(Swift::String *)&retstr->promptLabel._object = *(Swift::String *)&promptLabel._object;
  retstr->bundleId._object = bundleId._object;
}

uint64_t AutoShortcutFirstRunVisual.data.getter()
{
  uint64_t v1 = type metadata accessor for Response(0LL);
  v0[2] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[3] = v2;
  uint64_t v3 = OUTLINED_FUNCTION_9_0(v2);
  v0[4] = v3;
  uint64_t v4 = (void *)swift_task_alloc(dword_21C594);
  v0[5] = v4;
  *uint64_t v4 = v0;
  v4[1] = DisambiguationVisual.data.getter;
  return AutoShortcutFirstRunVisual.response.getter(v3);
}

void AutoShortcutFirstRunWatchVisual.bundleId.getter()
{
}

uint64_t AutoShortcutFirstRunVisual.response.getter(uint64_t a1)
{
  v2[58] = a1;
  v2[59] = v1;
  uint64_t v3 = type metadata accessor for Separators(0LL);
  v2[60] = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for ComponentWrapper(0LL);
  v2[61] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[62] = v5;
  v2[63] = OUTLINED_FUNCTION_9_0(v5);
  uint64_t v6 = type metadata accessor for BinaryButton(0LL);
  v2[64] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[65] = v7;
  v2[66] = OUTLINED_FUNCTION_9_0(v7);
  uint64_t v8 = type metadata accessor for Button.LabelStyle(0LL);
  v2[67] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[68] = v9;
  v2[69] = OUTLINED_FUNCTION_9_0(v9);
  uint64_t v10 = type metadata accessor for _ProtoButton.FormAction(0LL);
  v2[70] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[71] = v11;
  v2[72] = OUTLINED_FUNCTION_9_0(v11);
  uint64_t v12 = type metadata accessor for ButtonRole(0LL);
  v2[73] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[74] = v13;
  v2[75] = OUTLINED_FUNCTION_9_0(v13);
  uint64_t v14 = type metadata accessor for Button(0LL);
  v2[76] = v14;
  v2[77] = *(void *)(v14 - 8);
  v2[78] = OUTLINED_FUNCTION_11_0();
  v2[79] = OUTLINED_FUNCTION_11_0();
  v2[80] = OUTLINED_FUNCTION_11_0();
  v2[81] = OUTLINED_FUNCTION_11_0();
  uint64_t v15 = type metadata accessor for Command(0LL);
  v2[82] = v15;
  v2[83] = *(void *)(v15 - 8);
  v2[84] = OUTLINED_FUNCTION_11_0();
  v2[85] = OUTLINED_FUNCTION_11_0();
  uint64_t v16 = type metadata accessor for CustomCanvas(0LL);
  v2[86] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v2[87] = v17;
  v2[88] = OUTLINED_FUNCTION_9_0(v17);
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutFirstRunVisual.response.getter()
{
  uint64_t v1 = *(uint64_t **)(v0 + 472);
  uint64_t v2 = *v1;
  uint64_t v3 = v1[9];
  uint64_t v4 = v1[10];
  uint64_t v5 = v1[7];
  uint64_t v6 = v1[8];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = one-time initialization token for encoder;
  swift_bridgeObjectRetain(*v1);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  if (v9 != -1) {
    swift_once(&one-time initialization token for encoder, one-time initialization function for encoder);
  }
  *(void *)(v0 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = v2;
  *(void *)(v0 + 23__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 3LL;
  *(void *)(v0 + 240) = v3;
  *(void *)(v0 + 248) = v4;
  *(void *)(v0 + 256) = v5;
  *(void *)(v0 + 264) = v6;
  *(void *)(v0 + 27__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v7;
  *(void *)(v0 + 280) = v8;
  *(void *)(v0 + 288) = 0LL;
  *(void *)(v0 + 296) = 0LL;
  *(_BYTE *)(v0 + 304) = 1;
  lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
  uint64_t v10 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 224);
  uint64_t v11 = v2;
  uint64_t v102 = *(void *)(v0 + 704);
  uint64_t v113 = *(void *)(v0 + 696);
  uint64_t v139 = *(void *)(v0 + 688);
  uint64_t v12 = *(void *)(v0 + 680);
  uint64_t v125 = *(void *)(v0 + 672);
  uint64_t v13 = *(void *)(v0 + 664);
  uint64_t v14 = *(void *)(v0 + 656);
  uint64_t v118 = *(void *)(v0 + 648);
  uint64_t v131 = *(void *)(v0 + 640);
  uint64_t v135 = *(void *)(v0 + 632);
  uint64_t v136 = *(void *)(v0 + 624);
  uint64_t v133 = *(void *)(v0 + 616);
  uint64_t v134 = *(void *)(v0 + 608);
  uint64_t v123 = *(void *)(v0 + 600);
  uint64_t v79 = *(void *)(v0 + 592);
  uint64_t v15 = *(void *)(v0 + 584);
  uint64_t v71 = v15;
  uint64_t v140 = *(void *)(v0 + 576);
  uint64_t v83 = *(void *)(v0 + 568);
  uint64_t v86 = *(void *)(v0 + 560);
  uint64_t v141 = *(void *)(v0 + 552);
  uint64_t v88 = *(void *)(v0 + 544);
  uint64_t v116 = v11;
  uint64_t v128 = *(void *)(v0 + 536);
  uint64_t v130 = *(void *)(v0 + 528);
  uint64_t v93 = *(void *)(v0 + 520);
  uint64_t v132 = *(void *)(v0 + 512);
  uint64_t v138 = *(void *)(v0 + 504);
  uint64_t v105 = *(void *)(v0 + 488);
  uint64_t v108 = *(void *)(v0 + 496);
  uint64_t v16 = *(void *)(v0 + 472);
  uint64_t v137 = *(void *)(v0 + 480);
  uint64_t v111 = *(void *)(v0 + 464);
  BYTE2(v6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0;
  LOWORD(v6__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0;
  CustomCanvas.init(bundleName:viewId:viewData:componentName:safeForLogging:requestsKeyWindow:hideConversationKeyline:)( 0xD000000000000010LL,  0x8000000000192DE0LL,  0xD000000000000014LL,  0x8000000000192E00LL,  v10,  v17,  0LL,  0xE000000000000000LL);
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  uint64_t inited = (__n128 *)swift_initStackObject(v77, v0 + 120);
  OUTLINED_FUNCTION_6_11(inited, (__n128)xmmword_17E650);
  *(void *)(v0 + 43__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v19;
  *(void *)(v0 + 440) = 0xEC0000006E6F6974LL;
  AnyHashable.init<A>(_:)(v20, v0 + 432, &type metadata for String, &protocol witness table for String);
  inited[6].n128_u64[0] = (unint64_t)&type metadata for String;
  inited[4].n128_u64[1] = 7562617LL;
  inited[5].n128_u64[0] = 0xE300000000000000LL;
  uint64_t v21 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  static Command.directInvocation(identifier:payload:isNavigation:)( 0xD00000000000003DLL,  0x8000000000192920LL,  v21,  0LL);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 336) = v14;
  *(void *)(v0 + 344) = &protocol witness table for Command;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v0 + 312));
  id v67 = *(void (**)(void *, uint64_t, uint64_t))(v13 + 16);
  v67(boxed_opaque_existential_1, v12, v14);
  uint64_t v23 = *(void *)(v16 + 8);
  uint64_t v24 = *(void *)(v16 + 16);
  Swift::Bool v143 = &type metadata for String;
  unint64_t v144 = &protocol witness table for String;
  double v25 = OUTLINED_FUNCTION_8_48(v23);
  uint64_t v80 = *(void (**)(uint64_t, void, uint64_t, double))(v79 + 104);
  uint64_t v26 = v123;
  v80(v123, enum case for ButtonRole.preferred(_:), v15, v25);
  HIDWORD(v64) = enum case for _ProtoButton.FormAction.none(_:);
  uint64_t v27 = v86;
  uint64_t v84 = *(void (**)(uint64_t))(v83 + 104);
  v84(v140);
  OUTLINED_FUNCTION_11_34( v141,  v28,  v29,  v30,  v31,  v32,  v33,  v34,  v62,  v63,  v64,  v16,  (uint64_t)v67,  0x8000000000192920LL,  (uint64_t)&type metadata for Any + 8,  v71,  1LL,  2LL,  v75,  v77,  (uint64_t)v80,  (uint64_t)v84,  v86,  v88,  v0 + 16,  v0 + 448,  v0 + 352,  v93,  v13,  v0 + 392,  v12,  v102,  v105,  v108,  v111,  v113,  v116,  v118,  v14,  v123,  v125,  v128);
  swift_bridgeObjectRetain(v24);
  uint64_t v35 = v119;
  OUTLINED_FUNCTION_11_2(v0 + 312, (uint64_t)v142, (uint64_t)v145, v140, v141, v26);
  uint64_t v36 = (__n128 *)swift_initStackObject(v78, v90);
  OUTLINED_FUNCTION_6_11(v36, v74);
  *(void *)(v0 + 448) = v37;
  *(void *)(v0 + 456) = 0xEC0000006E6F6974LL;
  AnyHashable.init<A>(_:)(v38, v91, &type metadata for String, &protocol witness table for String);
  v36[6].n128_u64[0] = (unint64_t)&type metadata for String;
  v36[4].n128_u64[1] = 28526LL;
  v36[5].n128_u64[0] = 0xE200000000000000LL;
  uint64_t v39 = Dictionary.init(dictionaryLiteral:)( v36,  &type metadata for AnyHashable,  v70,  &protocol witness table for AnyHashable);
  static Command.directInvocation(identifier:payload:isNavigation:)(0xD00000000000003DLL, v69, v39, 0LL);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 376) = v121;
  *(void *)(v0 + 384) = &protocol witness table for Command;
  uint64_t v40 = (uint64_t)v92;
  uint64_t v41 = __swift_allocate_boxed_opaque_existential_1(v92);
  v68(v41, v126, v121);
  uint64_t v42 = *(void *)(v66 + 24);
  uint64_t v43 = *(void *)(v66 + 32);
  Swift::Bool v143 = &type metadata for String;
  unint64_t v144 = &protocol witness table for String;
  double v44 = OUTLINED_FUNCTION_8_48(v42);
  v85(v140, HIDWORD(v65), v27, v44);
  OUTLINED_FUNCTION_11_34( v141,  v45,  v46,  v47,  v48,  v49,  v50,  v51,  0LL,  0LL,  v65,  v66,  (uint64_t)v68,  v69,  v70,  v72,  v74.n128_i64[0],  v74.n128_i64[1],  v76,  v78,  v81,  (uint64_t)v85,  v87,  v89,  v90,  v91,  (uint64_t)v92,  v94,  v96,  v98,  v100,  v103,  v106,  v109,  v112,  v114,  v117,  v119,  v121,  v124,  v126,  v129);
  v82(v26, enum case for ButtonRole.standard(_:), v73);
  swift_bridgeObjectRetain(v43);
  OUTLINED_FUNCTION_11_2(v40, (uint64_t)v142, (uint64_t)v145, v140, v141, v26);
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v133 + 16);
  v52(v135, v35, v134);
  v52(v136, v131, v134);
  BinaryButton.init(primaryButton:secondaryButton:componentName:linkIdentifier:)( v135,  v136,  0LL,  0xE000000000000000LL,  0LL,  0LL);
  *(void *)(v0 + 416) = v132;
  *(void *)(v0 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = &protocol witness table for BinaryButton;
  uint64_t v53 = __swift_allocate_boxed_opaque_existential_1(v99);
  uint64_t v54 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v95 + 16))(v53, v130, v132);
  static Separators.none.getter(v54);
  ComponentWrapper.init(_:separators:)(v99, v137);
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SectionConvertible>);
  uint64_t v56 = swift_allocObject(v55, 112LL, 7LL);
  *(_OWORD *)(v56 + 16) = xmmword_17E660;
  *(void *)(v56 + 56) = v139;
  *(void *)(v56 + 64) = &protocol witness table for CustomCanvas;
  uint64_t v57 = __swift_allocate_boxed_opaque_existential_1((void *)(v56 + 32));
  (*(void (**)(void *, uint64_t, uint64_t))(v115 + 16))(v57, v104, v139);
  *(void *)(v56 + 96) = v107;
  *(void *)(v56 + 104) = &protocol witness table for ComponentWrapper;
  uint64_t v58 = __swift_allocate_boxed_opaque_existential_1((void *)(v56 + 72));
  (*(void (**)(void *, uint64_t, uint64_t))(v110 + 16))(v58, v138, v107);
  Response.init(_:backgrounds:ornaments:hideRedactedElements:)( v56,  _swiftEmptyArrayStorage,  _swiftEmptyArrayStorage,  0LL);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v138, v107);
  (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v130, v132);
  id v59 = *(void (**)(uint64_t, uint64_t))(v133 + 8);
  v59(v131, v134);
  id v60 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
  v60(v127, v122);
  v59(v120, v134);
  v60(v101, v122);
  (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v104, v139);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t destroy for AutoShortcutFirstRunVisual(void *a1)
{
  return swift_bridgeObjectRelease(a1[10]);
}

uint64_t *initializeWithCopy for AutoShortcutFirstRunVisual(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v6 = a2[2];
  uint64_t v5 = a2[3];
  a1[2] = v6;
  a1[3] = v5;
  uint64_t v8 = a2[4];
  uint64_t v7 = a2[5];
  a1[4] = v8;
  a1[5] = v7;
  uint64_t v10 = a2[6];
  uint64_t v9 = a2[7];
  a1[6] = v10;
  a1[7] = v9;
  uint64_t v12 = a2[8];
  uint64_t v11 = a2[9];
  a1[8] = v12;
  a1[9] = v11;
  uint64_t v13 = a2[10];
  a1[10] = v13;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  return a1;
}

uint64_t *assignWithCopy for AutoShortcutFirstRunVisual(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[5] = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v11 = a1[6];
  a1[6] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[7] = a2[7];
  uint64_t v12 = a2[8];
  uint64_t v13 = a1[8];
  a1[8] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[9] = a2[9];
  uint64_t v14 = a2[10];
  uint64_t v15 = a1[10];
  a1[10] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

void *__swift_memcpy88_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x58uLL);
}

uint64_t *assignWithTake for AutoShortcutFirstRunVisual(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a2[2];
  uint64_t v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a2[4];
  uint64_t v8 = a1[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a2[6];
  uint64_t v10 = a1[6];
  a1[5] = a2[5];
  a1[6] = v9;
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = a2[8];
  uint64_t v12 = a1[8];
  a1[7] = a2[7];
  a1[8] = v11;
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = a2[10];
  uint64_t v14 = a1[10];
  a1[9] = a2[9];
  a1[10] = v13;
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for AutoShortcutFirstRunVisual(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 88))
    {
      LODWORD(outlined consume of ParsedMeasurement?(v0, v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(outlined consume of ParsedMeasurement?(v0, v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutoShortcutFirstRunVisual(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 88) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AutoShortcutFirstRunVisual()
{
  return &type metadata for AutoShortcutFirstRunVisual;
}

double OUTLINED_FUNCTION_8_48@<D0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 168) = a1;
  *(void *)(v2 - 160) = v1;
  *(void *)(v2 - 96) = 0LL;
  double result = 0.0;
  *(_OWORD *)(v2 - 128) = 0u;
  *(_OWORD *)(v2 - 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_11_34( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42)
{
  return v43(a1, v42, a42);
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18SiriLinkFlowPlugin34WFChooseFromListDisambiguationItemVG_So08SAUIListL0Cs5NeverOTg504_s18def45Plugin30WorkflowCarplaySnippetProviderC23makek91Views19disambiguationItems12shortcutName11appBundleId09utteranceK0SaySo9SAAceViewCGSayAA016hij2J4l48VG_S2SSaySo022SAUIAssistantUtteranceU0CGtYaFSo08M10Y0CAMXEfU_SSTf1cn_n( uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    double v25 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    uint64_t v4 = (void **)(a1 + 80);
    while (1)
    {
      uint64_t v5 = *(v4 - 5);
      uint64_t v6 = (uint64_t)*(v4 - 4);
      uint64_t v7 = (uint64_t)*(v4 - 3);
      uint64_t v8 = *(v4 - 2);
      uint64_t v9 = (uint64_t)*(v4 - 1);
      uint64_t v10 = *v4;
      *(void *)&__int128 v18 = *(v4 - 6);
      *((void *)&v18 + 1) = v5;
      uint64_t v19 = v6;
      uint64_t v20 = v7;
      uint64_t v21 = v8;
      uint64_t v22 = v9;
      uint64_t v23 = v10;
      id v11 = v8;
      swift_bridgeObjectRetain(v9);
      id v12 = v10;
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRetain(v7);
      closure #1 in WorkflowCarplaySnippetProvider.makeDisambiguationViews(disambiguationItems:shortcutName:appBundleId:utteranceViews:)( &v18,  &v24);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v13 = swift_bridgeObjectRelease();
      if (v1) {
        break;
      }
      v4 += 7;
      uint64_t v14 = v24;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
      uint64_t v15 = v25[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v15);
      uint64_t v16 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v14);
      specialized ContiguousArray._endMutation()(v16);
      if (!--v2)
      {
        uint64_t v5 = v25;
        swift_bridgeObjectRelease();
        return v5;
      }
    }

    swift_bridgeObjectRelease();
    swift_release();
  }

  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }

  return v5;
}

uint64_t WorkflowCarplaySnippetProvider.makeSnippetForShowAlert(dialogRequest:appBundleId:shortcutName:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a2;
  *(void *)(v3 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = a3;
  return OUTLINED_FUNCTION_6_2((uint64_t)WorkflowCarplaySnippetProvider.makeSnippetForShowAlert(dialogRequest:appBundleId:shortcutName:));
}

uint64_t WorkflowCarplaySnippetProvider.makeSnippetForShowAlert(dialogRequest:appBundleId:shortcutName:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  id v3 = [objc_allocWithZone(SAIntentGroupSnippet) init];
  outlined bridged method (mbgnn) of @objc SAIntentGroupSnippet.appId.setter(v1, v2, v3);
  return (*(uint64_t (**)(id))(v0 + 8))(v3);
}

uint64_t WorkflowCarplaySnippetProvider.buildIntentSnippet(intent:intentResponse:shortcutName:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)WorkflowCarplaySnippetProvider.buildIntentSnippet(intent:intentResponse:shortcutName:));
}

uint64_t WorkflowCarplaySnippetProvider.buildIntentSnippet(intent:intentResponse:shortcutName:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  id v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "#WorkflowCarplaySnippetProvider Creating empty snippet", v5, 2u);
    OUTLINED_FUNCTION_1_0((uint64_t)v5);
  }

  uint64_t v6 = *(void **)(v0 + 16);

  uint64_t v7 = outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(v6);
  if (v8)
  {
    uint64_t v9 = v7;
    uint64_t v10 = v8;
    id v11 = [objc_allocWithZone(SAIntentGroupSnippet) init];
    outlined bridged method (mbgnn) of @objc SAIntentGroupSnippet.appId.setter(v9, v10, v11);
    swift_bridgeObjectRelease();
  }

  else
  {
    id v12 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)OUTLINED_FUNCTION_57_1();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_0, v12, v13, "#WorkflowCarplaySnippetProvider cannot get appBundleId from intent", v14, 2u);
      OUTLINED_FUNCTION_1_0((uint64_t)v14);
    }

    id v11 = 0LL;
  }

  return (*(uint64_t (**)(id))(v0 + 8))(v11);
}

uint64_t WorkflowCarplaySnippetProvider.makeDisambiguationViews(disambiguationItems:shortcutName:appBundleId:utteranceViews:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a4;
  v5[5] = a5;
  v5[3] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)WorkflowCarplaySnippetProvider.makeDisambiguationViews(disambiguationItems:shortcutName:appBundleId:utteranceViews:));
}

uint64_t WorkflowCarplaySnippetProvider.makeDisambiguationViews(disambiguationItems:shortcutName:appBundleId:utteranceViews:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain(*(void *)(v0 + 40));
  uint64_t v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18SiriLinkFlowPlugin34WFChooseFromListDisambiguationItemVG_So08SAUIListL0Cs5NeverOTg504_s18def45Plugin30WorkflowCarplaySnippetProviderC23makek91Views19disambiguationItems12shortcutName11appBundleId09utteranceK0SaySo9SAAceViewCGSayAA016hij2J4l48VG_S2SSaySo022SAUIAssistantUtteranceU0CGtYaFSo08M10Y0CAMXEfU_SSTf1cn_n(v1);
  id v3 = [objc_allocWithZone(SAUIDisambiguationList) init];
  outlined bridged method (mbnn) of @objc SAUIConfirmationOptions.allConfirmationOptions.setter( (uint64_t)v2,  (uint64_t)v3,  (unint64_t *)&lazy cache variable for type metadata for SAUIListItem,  &OBJC_CLASS___SAUIListItem_ptr);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = OUTLINED_FUNCTION_23_4(v4);
  *(_OWORD *)(v5 + 16) = xmmword_17E150;
  *(void *)(v5 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v3;
  uint64_t v9 = v5;
  specialized Array._endMutation()(v5, v6, v7);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v9);
}

void closure #1 in WorkflowCarplaySnippetProvider.makeDisambiguationViews(disambiguationItems:shortcutName:appBundleId:utteranceViews:)( __int128 *a1@<X0>, void *a2@<X8>)
{
  __int128 v2 = a1[1];
  __int128 v22 = *a1;
  __int128 v23 = v2;
  __int128 v24 = a1[2];
  uint64_t v25 = *((void *)a1 + 6);
  id v3 = [objc_allocWithZone(SAUIListItem) init];
  specialized DisambiguationItemProtocol.toDisplayString()();
  outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter();
  id v4 = static SLFDisambiguationItemConverter.toDirectInvocationPayload(title:)(v22, *((void **)&v22 + 1));
  static Device.current.getter(v19, v4);
  uint64_t v5 = v20;
  uint64_t v6 = v21;
  __swift_project_boxed_opaque_existential_1(v19, v20);
  uint64_t v7 = (void *)DeviceState.asInvocationContext.getter(v5, v6);
  [v7 setInputOrigin:SAInputOriginDialogButtonTapValue];
  uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___SKIDirectInvocation);
  id v9 = [v8 runSiriKitExecutorCommandWithContext:v7 payload:v4];
  id v10 = [objc_allocWithZone(SAIntentGroupSiriKitAppSelectionState) init];
  id v11 = [objc_allocWithZone(SASyncAppIdentifyingInfo) init];
  NSString v12 = String._bridgeToObjectiveC()();
  [v11 setBundleId:v12];

  [v10 setRequestedApp:v11];
  [v9 setAppSelectionState:v10];

  id v13 = [v8 wrapCommandInStartLocalRequest:v9];
  __swift_destroy_boxed_opaque_existential_1Tm(v19);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v15 = swift_allocObject(v14, 40LL, 7LL);
  *(_OWORD *)(v15 + 16) = xmmword_17E150;
  *(void *)(v15 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v13;
  v19[0] = v15;
  specialized Array._endMutation()(v15, v16, v17);
  outlined bridged method (mbnn) of @objc SAUIConfirmationOption.commands.setter(v19[0], v3);

  *a2 = v3;
}

id WorkflowCarplaySnippetProvider.makeConfirmationOptions(confirmationButtonText:cancelButtonText:appBundleId:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v10 = OUTLINED_FUNCTION_11_35(0, v8, v9, v42);
  uint64_t v11 = __swift_destroy_boxed_opaque_existential_1Tm(v42);
  static Device.current.getter(v42, v11);
  id v14 = OUTLINED_FUNCTION_11_35(2, v12, v13, v42);
  __swift_destroy_boxed_opaque_existential_1Tm(v42);
  id v15 = OUTLINED_FUNCTION_35_24(objc_allocWithZone(&OBJC_CLASS___SAUIConfirmationOption));
  outlined bridged method (mbgnn) of @objc SAUIConfirmationOption.label.setter(a1, a2, v15);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v17 = OUTLINED_FUNCTION_23_4(v16);
  *(_OWORD *)(v17 + 16) = xmmword_17E150;
  *(void *)(v17 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v10;
  OUTLINED_FUNCTION_55_16(v17, v18, v19);
  uint64_t v20 = v42[0];
  id v21 = v10;
  outlined bridged method (mbnn) of @objc SAUIConfirmationOption.commands.setter(v20, v15);
  id v22 = OUTLINED_FUNCTION_35_24(objc_allocWithZone(&OBJC_CLASS___SAUIConfirmationOption));
  outlined bridged method (mbgnn) of @objc SAUIConfirmationOption.label.setter(a3, a4, v22);
  uint64_t v23 = OUTLINED_FUNCTION_23_4(v16);
  *(_OWORD *)(v23 + 16) = xmmword_17E150;
  *(void *)(v23 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v14;
  OUTLINED_FUNCTION_55_16(v23, v24, v25);
  uint64_t v26 = (void *)v42[0];
  id v27 = v14;
  outlined bridged method (mbnn) of @objc SAUIConfirmationOption.commands.setter((uint64_t)v26, v22);
  id v28 = OUTLINED_FUNCTION_35_24(objc_allocWithZone(&OBJC_CLASS___SAUIConfirmationOptions));
  uint64_t v29 = outlined bridged method (pb) of @objc SAUIConfirmationOption.label.getter(v15);
  if (v30)
  {
    String._bridgeToObjectiveC()();
    uint64_t v29 = OUTLINED_FUNCTION_3_47();
  }

  else
  {
    uint64_t v26 = 0LL;
  }

  OUTLINED_FUNCTION_2_34(v29, "setConfirmText:");

  uint64_t v31 = outlined bridged method (pb) of @objc SAUIConfirmationOption.commands.getter(v15);
  if (v31)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    OUTLINED_FUNCTION_8_49();
    uint64_t v31 = OUTLINED_FUNCTION_3_47();
  }

  else
  {
    uint64_t v26 = 0LL;
  }

  OUTLINED_FUNCTION_2_34(v31, "setConfirmCommands:");

  uint64_t v32 = outlined bridged method (pb) of @objc SAUIConfirmationOption.label.getter(v22);
  if (v33)
  {
    String._bridgeToObjectiveC()();
    uint64_t v32 = OUTLINED_FUNCTION_3_47();
  }

  else
  {
    uint64_t v26 = 0LL;
  }

  OUTLINED_FUNCTION_2_34(v32, "setDenyText:");

  uint64_t v34 = outlined bridged method (pb) of @objc SAUIConfirmationOption.commands.getter(v22);
  if (v34)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    OUTLINED_FUNCTION_8_49();
    uint64_t v34 = OUTLINED_FUNCTION_3_47();
  }

  else
  {
    uint64_t v26 = 0LL;
  }

  OUTLINED_FUNCTION_2_34(v34, "setDenyCommands:");

  uint64_t v35 = swift_allocObject(v16, 48LL, 7LL);
  *(_OWORD *)(v35 + 16) = xmmword_17E670;
  *(void *)(v35 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v15;
  *(void *)(v35 + 40) = v22;
  OUTLINED_FUNCTION_55_16(v35, v36, v37);
  uint64_t v38 = v42[0];
  id v39 = v15;
  id v40 = v22;
  outlined bridged method (mbnn) of @objc SAUIConfirmationOptions.allConfirmationOptions.setter( v38,  (uint64_t)v28,  (unint64_t *)&lazy cache variable for type metadata for SAUIConfirmationOption,  &OBJC_CLASS___SAUIConfirmationOption_ptr);
  outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter();

  return v28;
}

void outlined bridged method (mbgnn) of @objc SAUIConfirmationOption.label.setter( uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  [a3 setLabel:v4];
  OUTLINED_FUNCTION_5_15(v4);
}

uint64_t outlined bridged method (pb) of @objc SAUIConfirmationOption.label.getter(void *a1)
{
  id v1 = [a1 label];
  if (!v1) {
    return 0LL;
  }
  __int128 v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t outlined bridged method (pb) of @objc SAUIConfirmationOption.commands.getter(void *a1)
{
  id v1 = [a1 commands];
  if (!v1) {
    return 0LL;
  }
  __int128 v2 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

void outlined bridged method (mbnn) of @objc SAUIConfirmationOptions.allConfirmationOptions.setter( uint64_t a1, uint64_t a2)
{
}

void outlined bridged method (mbnn) of @objc SAUIConfirmationOptions.cancelTrigger.setter()
{
}

void outlined bridged method (mbnn) of @objc SAUIConfirmationOptions.allConfirmationOptions.setter( uint64_t a1, uint64_t a2, unint64_t *a3, void *a4)
{
  int v4 = OUTLINED_FUNCTION_69_0();
  OUTLINED_FUNCTION_50_2(v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
  OUTLINED_FUNCTION_25_2(v14);
}

void outlined bridged method (mbgnn) of @objc SAIntentGroupSnippet.appId.setter( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setAppId:v4];
}

uint64_t type metadata accessor for WorkflowCarplaySnippetProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin30WorkflowCarplaySnippetProvider);
}

void outlined bridged method (mbnn) of @objc SAUIConfirmationOption.commands.setter(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setCommands:isa];
  OUTLINED_FUNCTION_5_15(isa);
}

id OUTLINED_FUNCTION_2_34(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_3_47()
{
  return swift_bridgeObjectRelease(v0);
}

NSArray OUTLINED_FUNCTION_8_49()
{
  return Array._bridgeToObjectiveC()();
}

id OUTLINED_FUNCTION_11_35(char a1, uint64_t a2, uint64_t a3, void *a4)
{
  return static SLFConfirmationItemConverter.toDirectInvocationCommand(confirmation:appBundleId:deviceState:)( a1,  v5,  v4,  a4);
}

_OWORD *CustomIntentDisambiguationItem.getRawValue()@<X0>(uint64_t a1@<X8>)
{
  if ((v7 & 1) != 0) {
    return outlined init with take of Any(v6, (_OWORD *)a1);
  }
  uint64_t v4 = *(void *)&v6[0];
  swift_bridgeObjectRelease();
  id v5 = [objc_allocWithZone(NSNumber) initWithInteger:v4];
  double result = (_OWORD *)type metadata accessor for NSNumber();
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = result;
  *(void *)a1 = v5;
  return result;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSNumber);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }

  return result;
}

uint64_t Array<A>.toDisambiguationItemModels(intent:parameterName:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[16] = a3;
  v4[17] = a4;
  v4[14] = a1;
  v4[15] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  v4[18] = OUTLINED_FUNCTION_10_8(v5);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t Array<A>.toDisambiguationItemModels(intent:parameterName:)()
{
  uint64_t v1 = _swiftEmptyArrayStorage;
  *(void *)(v0 + 104) = _swiftEmptyArrayStorage;
  uint64_t v2 = v0 + 104;
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v3 + 16);
  *(void *)(v0 + 15__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v4;
  if (v4)
  {
    id v39 = (void *)(v0 + 16);
    *(void *)(v0 + 160) = OUTLINED_FUNCTION_6_4();
    swift_bridgeObjectRetain(v3);
    uint64_t v5 = 0LL;
    while (1)
    {
      *(void *)(v0 + 168) = v5;
      int v6 = *(void **)(v0 + 112);
      outlined init with copy of CustomIntentDisambiguationItem(v3 + 88 * v5 + 32, (uint64_t)v39);
      swift_bridgeObjectRetain(*(void *)(v0 + 24));
      uint64_t v7 = static CATSpeakableString.stripTTSHint(print:)();
      unint64_t v9 = v8;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 176) = v7;
      *(void *)(v0 + 184) = v9;
      uint64_t v10 = OUTLINED_FUNCTION_19_27(v6, v39);
      *(void *)(v0 + 19__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v10;
      if (v10)
      {
        char v11 = 0;
        unint64_t v9 = 0x8000000000192D90LL;
        uint64_t v7 = 0xD000000000000043LL;
      }

      else
      {
        swift_bridgeObjectRetain(v9);
        char v11 = 2;
      }

      *(_BYTE *)(v0 + 9__swift_destroy_boxed_opaque_existential_1Tm(v0 + 7) = v11;
      *(void *)(v0 + 200) = v7;
      *(void *)(v0 + 208) = v9;
      uint64_t v12 = *(void *)(v0 + 32);
      if (*(void *)(v0 + 40))
      {
        swift_bridgeObjectRetain(*(void *)(v0 + 40));
        uint64_t v12 = static CATSpeakableString.stripTTSHint(print:)();
        uint64_t v14 = v13;
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v14 = 0LL;
      }

      *(void *)(v0 + 216) = v12;
      *(void *)(v0 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = v14;
      if (*(void *)(v0 + 48))
      {
        uint64_t v36 = (void *)swift_task_alloc(dword_21D15C);
        *(void *)(v0 + 23__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v36;
        *uint64_t v36 = v0;
        v36[1] = Array<A>.toDisambiguationItemModels(intent:parameterName:);
        return OUTLINED_FUNCTION_3_48(*(void *)(v0 + 144));
      }

      uint64_t v15 = OUTLINED_FUNCTION_61_7();
      OUTLINED_FUNCTION_16_20(v15);
      uint64_t v16 = *(void *)(v0 + 216);
      uint64_t v38 = *(void *)(v0 + 224);
      char v17 = *(_BYTE *)(v0 + 97);
      uint64_t v19 = *(void *)(v0 + 200);
      uint64_t v18 = *(void *)(v0 + 208);
      uint64_t v21 = *(void *)(v0 + 184);
      uint64_t v20 = *(void *)(v0 + 192);
      uint64_t v22 = v2;
      uint64_t v23 = *(void *)(v0 + 176);
      uint64_t v24 = *(void *)(v0 + 144);
      uint64_t v25 = type metadata accessor for WorkflowDataModels.DisambiguationItemModel(0LL);
      OUTLINED_FUNCTION_51(v25);
      uint64_t v26 = v23;
      uint64_t v2 = v22;
      id v27 = WorkflowDataModels.DisambiguationItemModel.init(title:subtitle:thumbnail:invocationCommand:)( v26,  v21,  v16,  v38,  v24,  v19,  v18,  v20,  v17);
      uint64_t v28 = swift_retain(v27);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v28);
      unint64_t v30 = *(void *)((char *)&dword_10 + (*(void *)(v0 + 104) & 0xFFFFFFFFFFFFFF8LL));
      unint64_t v29 = *(void *)((char *)&dword_18 + (*(void *)(v0 + 104) & 0xFFFFFFFFFFFFFF8LL));
      if (v30 >= v29 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1LL);
      }
      uint64_t v31 = *(void *)(v0 + 152);
      uint64_t v32 = *(void *)(v0 + 168) + 1LL;
      uint64_t v33 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v27);
      specialized Array._endMutation()(v33, v34, v35);
      swift_release();
      outlined destroy of CustomIntentDisambiguationItem((uint64_t)v39);
      if (v32 == v31) {
        break;
      }
      uint64_t v5 = *(void *)(v0 + 168) + 1LL;
      uint64_t v3 = *(void *)(v0 + 136);
    }

    swift_bridgeObjectRelease();
    uint64_t v1 = *(void **)(v0 + 104);
  }

  swift_task_dealloc();
  return OUTLINED_FUNCTION_35_14((uint64_t)v1, *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_3_0(*(void *)(*(void *)v0 + 232LL));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v35 = type metadata accessor for WorkflowDataModels.DisambiguationItemModel(0LL);
  while (1)
  {
    uint64_t v2 = *(void *)(v0 + 216);
    uint64_t v1 = *(void *)(v0 + 224);
    uint64_t v3 = *(_BYTE *)(v0 + 97);
    uint64_t v5 = *(void *)(v0 + 200);
    uint64_t v4 = *(void *)(v0 + 208);
    uint64_t v7 = *(void *)(v0 + 184);
    int v6 = *(void *)(v0 + 192);
    unint64_t v8 = *(void *)(v0 + 176);
    unint64_t v9 = *(void *)(v0 + 144);
    OUTLINED_FUNCTION_51(v35);
    uint64_t v10 = WorkflowDataModels.DisambiguationItemModel.init(title:subtitle:thumbnail:invocationCommand:)( v8,  v7,  v2,  v1,  v9,  v5,  v4,  v6,  v3);
    char v11 = swift_retain(v10);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
    uint64_t v13 = *(void *)((char *)&dword_10 + (*(void *)(v0 + 104) & 0xFFFFFFFFFFFFFF8LL));
    uint64_t v12 = *(void *)((char *)&dword_18 + (*(void *)(v0 + 104) & 0xFFFFFFFFFFFFFF8LL));
    if (v13 >= v12 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1LL);
    }
    uint64_t v14 = *(void *)(v0 + 152);
    uint64_t v15 = *(void *)(v0 + 168) + 1LL;
    uint64_t v16 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v10);
    specialized Array._endMutation()(v16, v17, v18);
    swift_release();
    uint64_t v36 = (void *)(v0 + 16);
    outlined destroy of CustomIntentDisambiguationItem(v0 + 16);
    if (v15 == v14)
    {
      swift_bridgeObjectRelease();
      uint64_t v32 = *(void *)(v0 + 104);
      swift_task_dealloc();
      return OUTLINED_FUNCTION_35_14(v32, *(uint64_t (**)(void))(v0 + 8));
    }

    uint64_t v19 = *(void *)(v0 + 168) + 1LL;
    *(void *)(v0 + 168) = v19;
    uint64_t v20 = *(void *)(v0 + 128);
    uint64_t v22 = *(void **)(v0 + 112);
    uint64_t v21 = *(void *)(v0 + 120);
    outlined init with copy of CustomIntentDisambiguationItem(*(void *)(v0 + 136) + 88 * v19 + 32, (uint64_t)v36);
    swift_bridgeObjectRetain(*(void *)(v0 + 24));
    uint64_t v23 = static CATSpeakableString.stripTTSHint(print:)();
    uint64_t v25 = v24;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 176) = v23;
    *(void *)(v0 + 184) = v25;
    uint64_t v26 = static SLFDisambiguationItemConverter.toDirectInvocationPayloadData(intent:chosenItem:parameterName:)( v22,  v36,  v21,  v20);
    *(void *)(v0 + 19__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v26;
    if (v26)
    {
      id v27 = 0;
      uint64_t v25 = 0x8000000000192D90LL;
      uint64_t v23 = 0xD000000000000043LL;
    }

    else
    {
      swift_bridgeObjectRetain(v25);
      id v27 = 2;
    }

    *(_BYTE *)(v0 + 9__swift_destroy_boxed_opaque_existential_1Tm(v0 + 7) = v27;
    *(void *)(v0 + 200) = v23;
    *(void *)(v0 + 208) = v25;
    uint64_t v28 = *(void *)(v0 + 32);
    if (*(void *)(v0 + 40))
    {
      OUTLINED_FUNCTION_54_7();
      uint64_t v28 = static CATSpeakableString.stripTTSHint(print:)();
      unint64_t v30 = v29;
      OUTLINED_FUNCTION_2_6();
    }

    else
    {
      unint64_t v30 = 0LL;
    }

    *(void *)(v0 + 216) = v28;
    *(void *)(v0 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = v30;
    if (*(void *)(v0 + 48)) {
      break;
    }
    uint64_t v31 = OUTLINED_FUNCTION_61_7();
    OUTLINED_FUNCTION_16_20(v31);
  }

  uint64_t v34 = (void *)swift_task_alloc(dword_21D15C);
  *(void *)(v0 + 23__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v34;
  uint64_t *v34 = v0;
  v34[1] = Array<A>.toDisambiguationItemModels(intent:parameterName:);
  return OUTLINED_FUNCTION_3_48(*(void *)(v0 + 144));
}

uint64_t CustomIntentDisambiguationItem.init(component:rawValue:)@<X0>( _OWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v4 = a1[1];
  *a3 = *a1;
  a3[1] = v4;
  a3[2] = a1[2];
  uint64_t v5 = (uint64_t)(a3 + 3);
  outlined init with copy of CustomIntentDisambiguationRawValue(a2, (uint64_t)(a3 + 3));
  outlined init with copy of CustomIntentDisambiguationRawValue(v5, (uint64_t)v8);
  if (v8[32] == 1)
  {
    outlined destroy of CustomIntentDisambiguationRawValue(a2);
    int v6 = v8;
  }

  else
  {
    specialized Array.append<A>(contentsOf:)();
    int v6 = (_BYTE *)a2;
  }

  return outlined destroy of CustomIntentDisambiguationRawValue((uint64_t)v6);
}

void *CustomIntentDisambiguationItem.getVoiceCommandPayloadsForItem()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UsoEntityBuilder_common_VoiceCommandPayload(0LL);
  uint64_t v3 = OUTLINED_FUNCTION_51(v2);
  uint64_t v4 = UsoEntityBuilder_common_VoiceCommandPayload.init()(v3);
  OUTLINED_FUNCTION_6_4();
  OUTLINED_FUNCTION_54_7();
  uint64_t v5 = static CATSpeakableString.stripTTSHint(print:)();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_2_6();
  dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setStringValue(value:)(v5, v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = swift_retain(v4);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v8);
  unint64_t v10 = *(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
  unint64_t v9 = *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
  if (v10 >= v9 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1LL);
  }
  uint64_t v11 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v4);
  specialized Array._endMutation()(v11, v12, v13);
  uint64_t v14 = *(void *)(v1 + 40);
  uint64_t v15 = *(void *)(v14 + 16);
  if (v15)
  {
    swift_bridgeObjectRetain(v14);
    specialized ContiguousArray.reserveCapacity(_:)(v15);
    uint64_t v16 = (uint64_t *)(v14 + 40);
    do
    {
      uint64_t v17 = *(v16 - 1);
      uint64_t v18 = *v16;
      swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
      swift_bridgeObjectRetain(v18);
      uint64_t v20 = UsoEntityBuilder_common_VoiceCommandPayload.init()(v19);
      dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setStringValue(value:)(v17, v18);
      uint64_t v21 = swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v21);
      uint64_t v22 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v22);
      uint64_t v23 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
      specialized ContiguousArray._endMutation()(v23);
      v16 += 2;
      --v15;
    }

    while (v15);
    swift_bridgeObjectRelease();
  }

  uint64_t v24 = OUTLINED_FUNCTION_54_7();
  specialized Array.append<A>(contentsOf:)(v24);
  OUTLINED_FUNCTION_2_6();
  swift_release();
  return _swiftEmptyArrayStorage;
}

uint64_t CustomIntentDisambiguationItem.toDisambiguationItemModel(intent:parameterName:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  void v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  v4[6] = OUTLINED_FUNCTION_10_8(v5);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentDisambiguationItem.toDisambiguationItemModel(intent:parameterName:)()
{
  uint64_t v1 = *(void **)(v0 + 40);
  uint64_t v2 = *(void **)(v0 + 16);
  OUTLINED_FUNCTION_6_4();
  swift_bridgeObjectRetain(v1[1]);
  uint64_t v3 = static CATSpeakableString.stripTTSHint(print:)();
  unint64_t v5 = v4;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 56) = v3;
  *(void *)(v0 + 64) = v5;
  uint64_t v6 = OUTLINED_FUNCTION_19_27(v2, v1);
  *(void *)(v0 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v6;
  if (v6)
  {
    char v7 = 0;
    unint64_t v5 = 0x8000000000192D90LL;
    uint64_t v3 = 0xD000000000000043LL;
  }

  else
  {
    OUTLINED_FUNCTION_80();
    char v7 = 2;
  }

  *(_BYTE *)(v0 + 120) = v7;
  *(void *)(v0 + 80) = v3;
  *(void *)(v0 + 88) = v5;
  uint64_t v8 = *(void **)(v0 + 40);
  uint64_t v9 = v8[2];
  if (v8[3])
  {
    swift_bridgeObjectRetain(v8[3]);
    uint64_t v9 = static CATSpeakableString.stripTTSHint(print:)();
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    uint64_t v8 = *(void **)(v0 + 40);
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  *(void *)(v0 + 96) = v9;
  *(void *)(v0 + 104) = v11;
  if (v8[4])
  {
    uint64_t v12 = (void *)swift_task_alloc(dword_21D15C);
    *(void *)(v0 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v12;
    *uint64_t v12 = v0;
    v12[1] = CustomIntentDisambiguationItem.toDisambiguationItemModel(intent:parameterName:);
    return INImage.convertToVisualProperty()(*(void *)(v0 + 48));
  }

  else
  {
    uint64_t v14 = *(void *)(v0 + 48);
    uint64_t v15 = OUTLINED_FUNCTION_61_7();
    OUTLINED_FUNCTION_16_20(v15);
    uint64_t v16 = OUTLINED_FUNCTION_8_50();
    OUTLINED_FUNCTION_51(v16);
    OUTLINED_FUNCTION_1_34();
    OUTLINED_FUNCTION_14_36();
    return OUTLINED_FUNCTION_3_23(v14, *(uint64_t (**)(void))(v0 + 8));
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_3_0(*(void *)(*(void *)v0 + 112LL));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v2 = OUTLINED_FUNCTION_8_50();
  OUTLINED_FUNCTION_51(v2);
  OUTLINED_FUNCTION_1_34();
  OUTLINED_FUNCTION_14_36();
  return OUTLINED_FUNCTION_3_23(v0, *(uint64_t (**)(void))(v1 + 8));
}

void type metadata accessor for CustomIntentDisambiguationItemContainer()
{
}

uint64_t destroy for CustomIntentDisambiguationRawValue(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 32);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)a1 + 2;
  }
  if (v1 == 1) {
    return __swift_destroy_boxed_opaque_existential_1Tm((void *)a1);
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t initializeWithCopy for CustomIntentDisambiguationRawValue(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 32);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    char v5 = 1;
  }

  else
  {
    uint64_t v6 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v6;
    swift_bridgeObjectRetain(v6);
    char v5 = 0;
  }

  *(_BYTE *)(a1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v5;
  return a1;
}

uint64_t assignWithCopy for CustomIntentDisambiguationRawValue(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 32);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      __swift_destroy_boxed_opaque_existential_1Tm((void *)a1);
    }
    else {
      swift_bridgeObjectRelease();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 32);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = v6;
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 1;
    }

    else
    {
      *(void *)a1 = *(void *)a2;
      uint64_t v7 = *(void *)(a2 + 8);
      *(void *)(a1 + 8) = v7;
      *(_BYTE *)(a1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0;
      swift_bridgeObjectRetain(v7);
    }
  }

  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CustomIntentDisambiguationRawValue(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 32);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      __swift_destroy_boxed_opaque_existential_1Tm((void *)a1);
    }
    else {
      swift_bridgeObjectRelease();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 32);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      __int128 v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
    }

    else
    {
      LOBYTE(OUTLINED_FUNCTION_223(*(void *)(v3 + 120), v5) = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }

    *(_BYTE *)(a1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v5;
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for CustomIntentDisambiguationRawValue(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for CustomIntentDisambiguationRawValue( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 33) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for CustomIntentDisambiguationRawValue(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 32);
  return result;
}

uint64_t destructiveInjectEnumTag for CustomIntentDisambiguationRawValue(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 2;
  }

  *(_BYTE *)(result + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a2;
  return result;
}

void type metadata accessor for CustomIntentDisambiguationRawValue()
{
}

uint64_t destroy for CustomIntentDisambiguationItem(uint64_t a1)
{
  swift_bridgeObjectRelease(*(void *)(a1 + 40));
  if ((*(_BYTE *)(a1 + 80) & 1) != 0) {
    return __swift_destroy_boxed_opaque_existential_1Tm((void *)(a1 + 48));
  }
  else {
    return swift_bridgeObjectRelease(*(void *)(a1 + 56));
  }
}

uint64_t initializeWithCopy for CustomIntentDisambiguationItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = v5;
  uint64_t v7 = *(void **)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v7;
  *(void *)(a1 + 40) = v6;
  char v8 = *(_BYTE *)(a2 + 80);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  id v9 = v7;
  swift_bridgeObjectRetain(v6);
  if ((v8 & 1) != 0)
  {
    uint64_t v10 = *(void *)(a2 + 72);
    *(void *)(a1 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v10;
    (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 48, a2 + 48);
  }

  else
  {
    uint64_t v11 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = v11;
    swift_bridgeObjectRetain(v11);
  }

  *(_BYTE *)(a1 + 80) = v8;
  return a1;
}

uint64_t assignWithCopy for CustomIntentDisambiguationItem(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void **)(a2 + 32);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v7;
  id v8 = v7;

  uint64_t v9 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    outlined destroy of CustomIntentDisambiguationRawValue(a1 + 48);
    if ((*(_BYTE *)(a2 + 80) & 1) != 0)
    {
      uint64_t v10 = *(void *)(a2 + 72);
      *(void *)(a1 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v10;
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 48, a2 + 48);
      *(_BYTE *)(a1 + 80) = 1;
    }

    else
    {
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      uint64_t v11 = *(void *)(a2 + 56);
      *(void *)(a1 + 56) = v11;
      *(_BYTE *)(a1 + 80) = 0;
      swift_bridgeObjectRetain(v11);
    }
  }

  return a1;
}

uint64_t assignWithTake for CustomIntentDisambiguationItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(void *)(a2 + 32);

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    outlined destroy of CustomIntentDisambiguationRawValue(a1 + 48);
    __int128 v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v7;
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for CustomIntentDisambiguationItem(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 81))
    {
      LODWORD(outlined consume of ParsedMeasurement?(v0, v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(outlined consume of ParsedMeasurement?(v0, v1, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(outlined consume of ParsedMeasurement?(v0, v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomIntentDisambiguationItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 81) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 81) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for CustomIntentDisambiguationItem()
{
}

void *OUTLINED_FUNCTION_1_34()
{
  return WorkflowDataModels.DisambiguationItemModel.init(title:subtitle:thumbnail:invocationCommand:)( v6,  v5,  v0,  v1,  v7,  v3,  v2,  v4,  v8);
}

uint64_t OUTLINED_FUNCTION_3_48(uint64_t a1)
{
  return INImage.convertToVisualProperty()(a1);
}

uint64_t OUTLINED_FUNCTION_8_50()
{
  return type metadata accessor for WorkflowDataModels.DisambiguationItemModel(0LL);
}

uint64_t OUTLINED_FUNCTION_14_36()
{
  return swift_task_dealloc(v0);
}

uint64_t OUTLINED_FUNCTION_19_27(void *a1, void *a2)
{
  return static SLFDisambiguationItemConverter.toDirectInvocationPayloadData(intent:chosenItem:parameterName:)( a1,  a2,  v3,  v2);
}

uint64_t IntelligenceFlowFeatureFlags.isEnabled.getter(char a1)
{
  char v1 = a1 & 1;
  v4[3] = &type metadata for IntelligenceFlowFeatureFlags;
  v4[4] = lazy protocol witness table accessor for type IntelligenceFlowFeatureFlags and conformance IntelligenceFlowFeatureFlags();
  LOBYTE(v4[0]) = v1;
  char v2 = isFeatureEnabled(_:)(v4);
  __swift_destroy_boxed_opaque_existential_1Tm(v4);
  return v2 & 1;
}

const char *IntelligenceFlowFeatureFlags.domain.getter()
{
  return "IntelligenceFlow";
}

const char *IntelligenceFlowFeatureFlags.feature.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return "FullPlanner";
  }
  else {
    return "IntelligenceFlow";
  }
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance IntelligenceFlowFeatureFlags()
{
  return IntelligenceFlowFeatureFlags.feature.getter(*v0);
}

uint64_t storeEnumTagSinglePayload for IntelligenceFlowFeatureFlags( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_11500C + 4 * byte_189165[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_115040 + 4 * asc_189160[v4]))();
}

uint64_t sub_115040(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_115048(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x115050LL);
  }
  return result;
}

uint64_t sub_11505C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x115064LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_115068(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_115070(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IntelligenceFlowFeatureFlags()
{
  return &type metadata for IntelligenceFlowFeatureFlags;
}

uint64_t static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Google_Protobuf_StringValue(0LL);
  uint64_t v166 = *(void *)(v2 - 8);
  uint64_t v167 = v2;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_83();
  uint64_t v165 = v4;
  uint64_t v5 = OUTLINED_FUNCTION_49_13();
  uint64_t v173 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier(v5);
  uint64_t v168 = *(void *)(v173 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_83();
  uint64_t v171 = v7;
  uint64_t v8 = OUTLINED_FUNCTION_49_13();
  uint64_t v159 = type metadata accessor for Siri_Nlu_External_UsoGraph(v8);
  uint64_t v158 = *(void *)(v159 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_83();
  uint64_t v157 = v10;
  uint64_t v11 = OUTLINED_FUNCTION_49_13();
  uint64_t v156 = type metadata accessor for Siri_Nlu_External_UserStatedTask(v11);
  uint64_t v155 = *(void *)(v156 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_83();
  uint64_t v154 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_83();
  uint64_t v161 = v15;
  uint64_t v16 = OUTLINED_FUNCTION_49_13();
  uint64_t v169 = type metadata accessor for Siri_Nlu_External_UserParse(v16);
  uint64_t v164 = *(void *)(v169 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_61_6();
  uint64_t v160 = v18;
  __chkstk_darwin(v19);
  unint64_t v163 = (char *)&v154 - v20;
  uint64_t v21 = OUTLINED_FUNCTION_49_13();
  uint64_t v172 = type metadata accessor for USOParse(v21);
  uint64_t v174 = *(void *)(v172 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v22);
  OUTLINED_FUNCTION_61_6();
  char v162 = v23;
  uint64_t v25 = __chkstk_darwin(v24);
  unint64_t v170 = (char *)&v154 - v26;
  __chkstk_darwin(v25);
  uint64_t v175 = (char *)&v154 - v27;
  uint64_t v28 = OUTLINED_FUNCTION_49_13();
  uint64_t v29 = type metadata accessor for Parse.DirectInvocation(v28);
  uint64_t v177 = *(void *)(v29 - 8);
  unint64_t v178 = v29;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v30);
  OUTLINED_FUNCTION_83();
  uint64_t v176 = v31;
  uint64_t v32 = OUTLINED_FUNCTION_49_13();
  type metadata accessor for VoiceCommandsNLIntent(v32);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v33);
  uint64_t v35 = (char *)&v154 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = type metadata accessor for NLIntent(0LL);
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = __chkstk_darwin(v36);
  id v40 = (os_log_s *)((char *)&v154 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v38);
  uint64_t v42 = (os_log_s *)((char *)&v154 - v41);
  uint64_t v43 = type metadata accessor for Parse(0LL);
  uint64_t v44 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v46 = (char *)&v154 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v46, a1, v43);
  int v47 = (*(uint64_t (**)(char *, uint64_t))(v44 + 88))(v46, v43);
  uint64_t v48 = 2179072LL;
  if (v47 == enum case for Parse.NLv3IntentOnly(_:))
  {
    OUTLINED_FUNCTION_2_35();
    OUTLINED_FUNCTION_10_34((uint64_t)v42, (uint64_t)v46, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 32));
    OUTLINED_FUNCTION_26_27();
    if (!v146) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v49 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v49, (uint64_t)static Logger.voiceCommands);
    uint64_t v50 = (os_log_s *)OUTLINED_FUNCTION_9_5();
    os_log_type_t v51 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_31_0(v51))
    {
      uint64_t v52 = (uint8_t *)OUTLINED_FUNCTION_57_1();
      *(_WORD *)uint64_t v52 = 0;
      OUTLINED_FUNCTION_47_1( &dword_0,  v50,  (os_log_type_t)v43,  "VoiceCommandsConfirmationUtils getVoiceCommandConfirmation received NLv3 intent",  v52);
      OUTLINED_FUNCTION_1_0((uint64_t)v52);
    }

    OUTLINED_FUNCTION_10_34((uint64_t)v35, (uint64_t)v42, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 16));
    if (one-time initialization token for voiceCommandConfirmationNode != -1) {
      swift_once( &one-time initialization token for voiceCommandConfirmationNode,  one-time initialization function for voiceCommandConfirmationNode);
    }
    uint64_t v48 = static VoiceCommandsNLIntent.voiceCommandConfirmationNode;
    unint64_t v53 = lazy protocol witness table accessor for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent();
    OUTLINED_FUNCTION_24_29(v48, v54, v53);
    OUTLINED_FUNCTION_23_29();
    uint64_t v55 = *(void (**)(os_log_s *, uint64_t))(v37 + 8);
    uint64_t v56 = v42;
LABEL_13:
    v55(v56, v36);
    return v48;
  }

  if (v47 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    OUTLINED_FUNCTION_2_35();
    uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    swift_release(*(void *)&v46[*(int *)(v57 + 48)]);
    uint64_t v58 = OUTLINED_FUNCTION_17_37();
    OUTLINED_FUNCTION_10_34(v58, v59, v60);
    OUTLINED_FUNCTION_10_34((uint64_t)v35, (uint64_t)v40, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 16));
    if (one-time initialization token for voiceCommandConfirmationNode != -1) {
      swift_once( &one-time initialization token for voiceCommandConfirmationNode,  one-time initialization function for voiceCommandConfirmationNode);
    }
    uint64_t v61 = static VoiceCommandsNLIntent.voiceCommandConfirmationNode;
    unint64_t v62 = lazy protocol witness table accessor for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent();
    OUTLINED_FUNCTION_24_29(v61, v63, v62);
    OUTLINED_FUNCTION_23_29();
    uint64_t v55 = *(void (**)(os_log_s *, uint64_t))(v37 + 8);
    uint64_t v56 = v40;
    goto LABEL_13;
  }

  if (v47 == enum case for Parse.directInvocation(_:))
  {
    OUTLINED_FUNCTION_2_35();
    uint64_t v65 = v176;
    uint64_t v64 = v177;
    uint64_t v66 = OUTLINED_FUNCTION_17_37();
    unint64_t v67 = v178;
    v68(v66);
    OUTLINED_FUNCTION_26_27();
    if (!v146) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v69 = OUTLINED_FUNCTION_48();
    uint64_t v70 = (void *)__swift_project_value_buffer(v69, (uint64_t)static Logger.voiceCommands);
    uint64_t v71 = (os_log_s *)OUTLINED_FUNCTION_9_5();
    os_log_type_t v72 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_31_0(v72))
    {
      uint64_t v73 = (uint8_t *)OUTLINED_FUNCTION_57_1();
      *(_WORD *)uint64_t v73 = 0;
      OUTLINED_FUNCTION_47_1( &dword_0,  v71,  (os_log_type_t)v43,  "VoiceCommandsConfirmationUtils getVoiceCommandConfirmation received direct Invocation",  v73);
      OUTLINED_FUNCTION_1_0((uint64_t)v73);
    }

    uint64_t v74 = Parse.DirectInvocation.identifier.getter();
    if (v74 == 0xD00000000000003DLL && v75 == 0x8000000000192920LL)
    {
      uint64_t v76 = swift_bridgeObjectRelease(0x8000000000192920LL);
    }

    else
    {
      char v96 = OUTLINED_FUNCTION_167(v74, v75, 0xD00000000000003DLL, 0x8000000000192920LL);
      uint64_t v76 = OUTLINED_FUNCTION_20();
      if ((v96 & 1) == 0)
      {
LABEL_30:
        Logger.logObject.getter(v76);
        os_log_type_t v98 = OUTLINED_FUNCTION_164();
        if (OUTLINED_FUNCTION_40(v98))
        {
          uint64_t v99 = (_WORD *)OUTLINED_FUNCTION_57_1();
          *uint64_t v99 = 0;
          OUTLINED_FUNCTION_27( &dword_0,  v100,  v101,  "#VoiceCommandConfirmationUtils received unsupported direct invocation");
          OUTLINED_FUNCTION_1_0((uint64_t)v99);
        }

        (*(void (**)(uint64_t, unint64_t))(v64 + 8))(v65, v67);
        return 3LL;
      }
    }

    uint64_t v76 = Parse.DirectInvocation.userData.getter(v76);
    if (v76)
    {
      uint64_t v97 = v76;
      uint64_t v48 = static SLFConfirmationItemConverter.toVoiceCommandConfirmation(userData:)(v76);
      uint64_t v76 = swift_bridgeObjectRelease(v97);
      if (v48 != 3)
      {
        (*(void (**)(uint64_t, unint64_t))(v64 + 8))(v65, v67);
        return v48;
      }
    }

    goto LABEL_30;
  }

  if (v47 != enum case for Parse.uso(_:))
  {
    OUTLINED_FUNCTION_26_27();
    if (!v146) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v102 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v102, (uint64_t)static Logger.voiceCommands);
    OUTLINED_FUNCTION_9_5();
    os_log_type_t v103 = OUTLINED_FUNCTION_164();
    if (OUTLINED_FUNCTION_40(v103))
    {
      uint64_t v104 = (uint8_t *)OUTLINED_FUNCTION_57_1();
      *(_WORD *)uint64_t v104 = 0;
      OUTLINED_FUNCTION_47_1( &dword_0,  v42,  OS_LOG_TYPE_DEFAULT,  "VoiceCommandsConfirmationUtils getVoiceCommandConfirmation unsupported input type",  v104);
      OUTLINED_FUNCTION_1_0((uint64_t)v104);
    }

    (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v43);
    return 3LL;
  }

  OUTLINED_FUNCTION_2_35();
  uint64_t v77 = v174;
  uint64_t v78 = (uint64_t)v175;
  uint64_t v79 = OUTLINED_FUNCTION_17_37();
  uint64_t v80 = v172;
  OUTLINED_FUNCTION_10_34(v79, v81, v82);
  OUTLINED_FUNCTION_26_27();
  if (!v146) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v83 = OUTLINED_FUNCTION_48();
  uint64_t v84 = __swift_project_value_buffer(v83, (uint64_t)static Logger.voiceCommands);
  id v85 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v77 + 16);
  uint64_t v86 = (uint64_t)v170;
  uint64_t v87 = v85(v170, v78, v80);
  Logger.logObject.getter(v87);
  os_log_type_t v88 = OUTLINED_FUNCTION_164();
  if (os_log_type_enabled(v42, v88))
  {
    unint64_t v178 = v84;
    uint64_t v89 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v90 = swift_slowAlloc(32LL, -1LL);
    v180[0] = v90;
    *(_DWORD *)uint64_t v89 = 136315138;
    uint64_t v91 = v162;
    v85(v162, v86, v80);
    uint64_t v92 = String.init<A>(describing:)(v91, v80);
    unint64_t v94 = v93;
    uint64_t v179 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v93, v180);
    uint64_t v78 = (uint64_t)v175;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, v180, v89 + 4);
    swift_bridgeObjectRelease(v94);
    uint64_t v95 = *(void (**)(char *, uint64_t))(v174 + 8);
    OUTLINED_FUNCTION_21_25(v86);
    _os_log_impl(&dword_0, v42, v88, "#VoiceCommandConfirmationUtils gets uso parse: %s", v89, 0xCu);
    swift_arrayDestroy(v90, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v90);
    OUTLINED_FUNCTION_1_0((uint64_t)v89);
  }

  else
  {
    uint64_t v95 = *(void (**)(char *, uint64_t))(v77 + 8);
    OUTLINED_FUNCTION_21_25(v86);
  }

  if ((SiriLinkFlowFeatureFlags.isEnabled.getter(0LL) & 1) == 0)
  {
LABEL_75:
    OUTLINED_FUNCTION_21_25(v78);
    return 3LL;
  }

  uint64_t v105 = v163;
  ((void (*)(void))USOParse.userParse.getter)();
  uint64_t v106 = static ConversionUtils.toLegacyPreferredUserDialogAct(from:)(v105);
  uint64_t v107 = *(uint64_t (**)(char *, uint64_t))(v164 + 8);
  uint64_t v108 = v107(v105, v169);
  if (v106)
  {
    uint64_t v109 = objc_opt_self(&OBJC_CLASS___SIRINLUUserAccepted);
    if (OUTLINED_FUNCTION_12_29(v109))
    {
      OUTLINED_FUNCTION_20_34();
      uint64_t v110 = (char *)v78;
      uint64_t v111 = v80;
LABEL_43:
      v95(v110, v111);
      return 0LL;
    }

    uint64_t v112 = objc_opt_self(&OBJC_CLASS___SIRINLUUserRejected);
    if (OUTLINED_FUNCTION_12_29(v112))
    {
      OUTLINED_FUNCTION_20_34();
      uint64_t v113 = (char *)v78;
      uint64_t v114 = v80;
      goto LABEL_82;
    }

    uint64_t v115 = objc_opt_self(&OBJC_CLASS___SIRINLUUserCancelled);
    uint64_t v108 = OUTLINED_FUNCTION_12_29(v115);
    if (v108)
    {
      OUTLINED_FUNCTION_20_34();
      OUTLINED_FUNCTION_21_25(v78);
      return 2LL;
    }
  }

  uint64_t v116 = v160;
  uint64_t v117 = USOParse.userParse.getter(v108);
  uint64_t v118 = Siri_Nlu_External_UserParse.userDialogActs.getter(v117);
  v107(v116, v169);
  uint64_t v119 = v161;
  specialized Collection.first.getter( v118,  (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct,  v161);
  swift_bridgeObjectRelease(v118);
  uint64_t v120 = (void *)type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  if (__swift_getEnumTagSinglePayload(v119, 1LL, (uint64_t)v120) == 1)
  {
    uint64_t v121 = outlined destroy of Siri_Nlu_External_UserDialogAct?(v119);
    Logger.logObject.getter(v121);
    os_log_type_t v122 = OUTLINED_FUNCTION_164();
    if (OUTLINED_FUNCTION_40(v122))
    {
      uint64_t v123 = (_WORD *)OUTLINED_FUNCTION_57_1();
      *uint64_t v123 = 0;
      OUTLINED_FUNCTION_27( &dword_0,  v124,  v125,  "#VoiceCommandConfirmationUtils uso parse does not have identifiers, returning nil");
      OUTLINED_FUNCTION_1_0((uint64_t)v123);
    }

    goto LABEL_74;
  }

  uint64_t v126 = v154;
  Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
  uint64_t v127 = (*(uint64_t (**)(uint64_t, void *))(*((void *)v120 - 1) + 8LL))(v119, v120);
  uint64_t v128 = v157;
  Siri_Nlu_External_UserStatedTask.task.getter(v127);
  uint64_t v129 = (*(uint64_t (**)(uint64_t, uint64_t))(v155 + 8))(v126, v156);
  uint64_t v130 = Siri_Nlu_External_UsoGraph.identifiers.getter(v129);
  (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v128, v159);
  uint64_t v131 = *(void *)(v130 + 16);
  if (!v131)
  {
    OUTLINED_FUNCTION_20();
LABEL_74:
    OUTLINED_FUNCTION_20_34();
    goto LABEL_75;
  }

  uint64_t v176 = v130;
  uint64_t v177 = v106;
  unint64_t v132 = v130 + ((*(unsigned __int8 *)(v168 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v168 + 80));
  uint64_t v133 = *(void *)(v168 + 72);
  uint64_t v134 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v168 + 16);
  unint64_t v178 = 0x8000000000194CA0LL;
  uint64_t v135 = v171;
  uint64_t v136 = v165;
  while (1)
  {
    uint64_t v137 = v134(v135, v132, v173);
    uint64_t v138 = Siri_Nlu_External_UsoEntityIdentifier.namespace.getter(v137);
    uint64_t v139 = Google_Protobuf_StringValue.value.getter(v138);
    uint64_t v141 = v140;
    (*(void (**)(uint64_t, uint64_t))(v166 + 8))(v136, v167);
    if (v139 == 0xD000000000000018LL && v141 == v178)
    {
      uint64_t v142 = swift_bridgeObjectRelease(0x8000000000194CA0LL);
    }

    else
    {
      char v143 = OUTLINED_FUNCTION_167(v139, v141, 0xD000000000000018LL, 0x8000000000194CA0LL);
      uint64_t v142 = OUTLINED_FUNCTION_20();
      if ((v143 & 1) == 0)
      {
        uint64_t v135 = v171;
        (*(void (**)(uint64_t, uint64_t))(v168 + 8))(v171, v173);
        goto LABEL_71;
      }
    }

    uint64_t v144 = Siri_Nlu_External_UsoEntityIdentifier.value.getter(v142);
    BOOL v146 = v144 == 0x747065636361LL && v145 == 0xE600000000000000LL;
    if (v146)
    {
      swift_bridgeObjectRelease(0xE600000000000000LL);
LABEL_79:
      swift_unknownObjectRelease(v177);
      (*(void (**)(uint64_t, uint64_t))(v168 + 8))(v171, v173);
      OUTLINED_FUNCTION_27_29();
      uint64_t v110 = v175;
      uint64_t v111 = v172;
      goto LABEL_43;
    }

    char v147 = OUTLINED_FUNCTION_167(v144, v145, 0x747065636361LL, 0xE600000000000000LL);
    uint64_t v148 = OUTLINED_FUNCTION_20();
    if ((v147 & 1) != 0) {
      goto LABEL_79;
    }
    uint64_t v135 = v171;
    uint64_t v149 = Siri_Nlu_External_UsoEntityIdentifier.value.getter(v148);
    if (v149 == 0x7463656A6572LL && v150 == 0xE600000000000000LL) {
      break;
    }
    char v152 = OUTLINED_FUNCTION_167(v149, v150, 0x7463656A6572LL, 0xE600000000000000LL);
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_14_37();
    if ((v152 & 1) != 0) {
      goto LABEL_81;
    }
LABEL_71:
    v132 += v133;
    if (!--v131)
    {
      OUTLINED_FUNCTION_27_29();
      uint64_t v78 = (uint64_t)v175;
      goto LABEL_74;
    }
  }

  swift_bridgeObjectRelease(0xE600000000000000LL);
  OUTLINED_FUNCTION_14_37();
LABEL_81:
  OUTLINED_FUNCTION_27_29();
  swift_unknownObjectRelease(v177);
  uint64_t v113 = v175;
  uint64_t v114 = v172;
LABEL_82:
  v95(v113, v114);
  return 1LL;
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Collection.first.getter( a1,  (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct,  a2);
}

{
  return specialized Collection.first.getter( a1,  (uint64_t (*)(void))&type metadata accessor for Location,  a2);
}

{
  return specialized Collection.first.getter( a1,  (uint64_t (*)(void))&type metadata accessor for ContactHandle,  a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<Contact>);
  if (v3)
  {
    OUTLINED_FUNCTION_3_49();
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v5 = 1LL;
  }

  return OUTLINED_FUNCTION_7_35(a2, v5, 1LL, v4);
}

{
  return specialized Collection.first.getter( a1,  (uint64_t (*)(void))&type metadata accessor for Contact,  a2);
}

{
  return specialized Collection.first.getter( a1,  (uint64_t (*)(void))&type metadata accessor for TemplatingSection,  a2);
}

{
  return specialized Collection.first.getter( a1,  (uint64_t (*)(void))&type metadata accessor for UsoIdentifier,  a2);
}

uint64_t specialized Collection.first.getter@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = a2(0LL);
  if (v4)
  {
    OUTLINED_FUNCTION_3_49();
    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v6 = 1LL;
  }

  return OUTLINED_FUNCTION_7_35(a3, v6, 1LL, v5);
}

double specialized Collection.first.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16))
  {
    outlined init with copy of CustomIntentDisambiguationItem(a1 + 32, a2);
  }

  else
  {
    *(_BYTE *)(a2 + 80) = 0;
    double result = 0.0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
    *(_OWORD *)a2 = 0u;
  }

  return result;
}

double specialized Collection.first.getter@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  if (*(void *)(a1 + 16))
  {
    outlined init with copy of Any(a1 + 32, (uint64_t)a2);
  }

  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }

  return result;
}

void static VoiceCommandConfirmationUtils.getSiriKitConfirmationState(parse:)(uint64_t a1)
{
  __int16 v1 = (char *)sub_115E70
     + 4 * byte_189250[static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)(a1)];
  __asm { BR              X10 }

uint64_t sub_115E70()
{
  uint64_t v1 = enum case for SiriKitConfirmationState.confirmed(_:);
  uint64_t v2 = ((uint64_t (*)(void))type metadata accessor for SiriKitConfirmationState)(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 104LL))(v0, v1, v2);
}

uint64_t outlined destroy of Siri_Nlu_External_UserDialogAct?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for VoiceCommandConfirmationUtils()
{
  return &type metadata for VoiceCommandConfirmationUtils;
}

uint64_t OUTLINED_FUNCTION_2_35()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 96))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_3_49()
{
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))( v0,  v2 + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL)),  v1);
}

uint64_t OUTLINED_FUNCTION_7_35(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, a3, a4);
}

uint64_t OUTLINED_FUNCTION_10_34@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_12_29(uint64_t a1)
{
  return swift_dynamicCastObjCClass(v1, a1);
}

uint64_t OUTLINED_FUNCTION_14_37()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 192) + 8LL))(v0, *(void *)(v1 - 152));
}

uint64_t OUTLINED_FUNCTION_17_37()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_20_34()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t OUTLINED_FUNCTION_21_25(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_23_29()
{
  return outlined destroy of VoiceCommandsNLIntent(v0);
}

uint64_t OUTLINED_FUNCTION_24_29(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IntentNodeTraversable.value<A>(forNode:)(a1, v3, a3);
}

  ;
}

uint64_t OUTLINED_FUNCTION_27_29()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 128));
}

uint64_t Measurement.asLocalizedString(locale:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  id v5 = [objc_allocWithZone(NSMeasurementFormatter) init];
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  [v5 setLocale:isa];

  [v5 setUnitOptions:1];
  uint64_t v7 = NSMeasurementFormatter.string<A>(from:)(v3, *(void *)(a2 + 16));

  return v7;
}

uint64_t static CustomIntentDisambiguationItemFactory.convertEnumStringToDictionary(enumString:)( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for String.Encoding(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static String.Encoding.utf8.getter(v6);
  String.data(using:allowLossyConversion:)(v8, 0LL, a1, a2);
  unint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  uint64_t result = 0LL;
  if (v10 >> 60 != 15)
  {
    uint64_t v12 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    v27[0] = 0LL;
    id v14 = [v12 JSONObjectWithData:isa options:0 error:v27];

    id v15 = v27[0];
    if (v14)
    {
      id v16 = v27[0];
      _bridgeAnyObjectToAny(_:)(v27);
      OUTLINED_FUNCTION_0_44();
      swift_unknownObjectRelease(v14);
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      else {
        return 0LL;
      }
    }

    else
    {
      id v18 = v27[0];
      uint64_t v19 = _convertNSErrorToError(_:)(v15);

      swift_willThrow(v20, v21, v22, v23, v24);
      OUTLINED_FUNCTION_0_44();
      swift_errorRelease(v19);
      return 0LL;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for CustomIntentDisambiguationItemFactory()
{
  return &type metadata for CustomIntentDisambiguationItemFactory;
}

uint64_t OUTLINED_FUNCTION_0_44()
{
  return outlined consume of Data?(v1, v0);
}

SiriLinkFlowPlugin::InstallShortcutCATsSimple::Properties_optional __swiftcall InstallShortcutCATsSimple.Properties.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of InstallShortcutCATsSimple.Properties.init(rawValue:),  v3);
  OUTLINED_FUNCTION_58_2();
  if (v1 == 1) {
    v4.int value = SiriLinkFlowPlugin_InstallShortcutCATsSimple_Properties_launchApp;
  }
  else {
    v4.int value = SiriLinkFlowPlugin_InstallShortcutCATsSimple_Properties_unknownDefault;
  }
  if (v1) {
    return v4;
  }
  else {
    return 0;
  }
}

unint64_t InstallShortcutCATsSimple.Properties.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD000000000000019LL;
  }
  else {
    return 0xD000000000000024LL;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance InstallShortcutCATsSimple.Properties( char *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance InstallShortcutCATsSimple.Properties()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InstallShortcutCATsSimple.Properties( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance InstallShortcutCATsSimple.Properties( uint64_t a1)
{
}

SiriLinkFlowPlugin::InstallShortcutCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance InstallShortcutCATsSimple.Properties@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::InstallShortcutCATsSimple::Properties_optional *a2@<X8>)
{
  result.int value = InstallShortcutCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance InstallShortcutCATsSimple.Properties@<X0>( unint64_t *a1@<X8>)
{
  unint64_t result = InstallShortcutCATsSimple.Properties.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t InstallShortcutCATsSimple.errorInstallShortcut(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)InstallShortcutCATsSimple.errorInstallShortcut(device:));
}

uint64_t InstallShortcutCATsSimple.errorInstallShortcut(device:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_7_0(v3);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_83_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_59_1();
  *(void *)(v0 + 40) = v7;
  *uint64_t v7 = v0;
  v7[1] = InstallShortcutCATsSimple.errorInstallShortcut(device:);
  return OUTLINED_FUNCTION_44_11(0xD000000000000024LL, 0x8000000000191B10LL, v1, v9);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_0_15();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_71_9();
    uint64_t v2 = OUTLINED_FUNCTION_84_7();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

BOOL InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds.init(rawValue:);
  return ListShortcutsCATsSimple.LaunchAppDialogIds.init(rawValue:)(a1, v1);
}

uint64_t InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds.rawValue.getter()
{
  return 0x726F727265LL;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds@<W0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds( void *a1@<X8>)
{
  *a1 = 0x726F727265LL;
  a1[1] = 0xE500000000000000LL;
}

uint64_t InstallShortcutCATsSimple.errorInstallShortcutAsLabels(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)InstallShortcutCATsSimple.errorInstallShortcutAsLabels(device:));
}

uint64_t InstallShortcutCATsSimple.errorInstallShortcutAsLabels(device:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_7_0(v3);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_83_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_59_1();
  *(void *)(v0 + 40) = v7;
  unint64_t v8 = lazy protocol witness table accessor for type InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds and conformance InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds();
  *uint64_t v7 = v0;
  v7[1] = InstallShortcutCATsSimple.errorInstallShortcutAsLabels(device:);
  return OUTLINED_FUNCTION_45_16( 0xD000000000000024LL,  0x8000000000191B10LL,  v1,  (uint64_t)&type metadata for InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds,  v8,  v10);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_0_15();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_71_9();
    uint64_t v2 = OUTLINED_FUNCTION_84_7();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

unint64_t lazy protocol witness table accessor for type InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds and conformance InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds and conformance InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds;
  if (!lazy protocol witness table cache variable for type InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds and conformance InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds,  &type metadata for InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds and conformance InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds and conformance InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds;
  if (!lazy protocol witness table cache variable for type InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds and conformance InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds,  &type metadata for InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds and conformance InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds);
  }

  return result;
}

uint64_t InstallShortcutCATsSimple.launchApp(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)InstallShortcutCATsSimple.launchApp(device:));
}

uint64_t InstallShortcutCATsSimple.launchApp(device:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_7_0(v3);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_83_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_59_1();
  *(void *)(v0 + 40) = v7;
  *uint64_t v7 = v0;
  v7[1] = InstallShortcutCATsSimple.errorInstallShortcutAsLabels(device:);
  return OUTLINED_FUNCTION_44_11(0xD000000000000019LL, 0x8000000000191B40LL, v1, v9);
}

BOOL InstallShortcutCATsSimple.LaunchAppDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of InstallShortcutCATsSimple.LaunchAppDialogIds.init(rawValue:);
  return ListShortcutsCATsSimple.LaunchAppDialogIds.init(rawValue:)(a1, v1);
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance InstallShortcutCATsSimple.LaunchAppDialogIds@<W0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = InstallShortcutCATsSimple.LaunchAppDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance InstallShortcutCATsSimple.LaunchAppDialogIds( void *a1@<X8>)
{
  *a1 = 1852141679LL;
  a1[1] = 0xE400000000000000LL;
}

uint64_t InstallShortcutCATsSimple.launchAppAsLabels(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)InstallShortcutCATsSimple.launchAppAsLabels(device:));
}

uint64_t InstallShortcutCATsSimple.launchAppAsLabels(device:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_7_0(v3);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_83_4(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_71_8(v6);
  OUTLINED_FUNCTION_5_2();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_59_1();
  *(void *)(v0 + 40) = v7;
  unint64_t v8 = lazy protocol witness table accessor for type InstallShortcutCATsSimple.LaunchAppDialogIds and conformance InstallShortcutCATsSimple.LaunchAppDialogIds();
  *uint64_t v7 = v0;
  v7[1] = InstallShortcutCATsSimple.errorInstallShortcutAsLabels(device:);
  return OUTLINED_FUNCTION_45_16( 0xD000000000000019LL,  0x8000000000191B40LL,  v1,  (uint64_t)&type metadata for InstallShortcutCATsSimple.LaunchAppDialogIds,  v8,  v10);
}

unint64_t lazy protocol witness table accessor for type InstallShortcutCATsSimple.LaunchAppDialogIds and conformance InstallShortcutCATsSimple.LaunchAppDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type InstallShortcutCATsSimple.LaunchAppDialogIds and conformance InstallShortcutCATsSimple.LaunchAppDialogIds;
  if (!lazy protocol witness table cache variable for type InstallShortcutCATsSimple.LaunchAppDialogIds and conformance InstallShortcutCATsSimple.LaunchAppDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for InstallShortcutCATsSimple.LaunchAppDialogIds,  &type metadata for InstallShortcutCATsSimple.LaunchAppDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type InstallShortcutCATsSimple.LaunchAppDialogIds and conformance InstallShortcutCATsSimple.LaunchAppDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type InstallShortcutCATsSimple.LaunchAppDialogIds and conformance InstallShortcutCATsSimple.LaunchAppDialogIds;
  if (!lazy protocol witness table cache variable for type InstallShortcutCATsSimple.LaunchAppDialogIds and conformance InstallShortcutCATsSimple.LaunchAppDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for InstallShortcutCATsSimple.LaunchAppDialogIds,  &type metadata for InstallShortcutCATsSimple.LaunchAppDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type InstallShortcutCATsSimple.LaunchAppDialogIds and conformance InstallShortcutCATsSimple.LaunchAppDialogIds);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type InstallShortcutCATsSimple.Properties and conformance InstallShortcutCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type InstallShortcutCATsSimple.Properties and conformance InstallShortcutCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type InstallShortcutCATsSimple.Properties and conformance InstallShortcutCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for InstallShortcutCATsSimple.Properties,  &type metadata for InstallShortcutCATsSimple.Properties);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type InstallShortcutCATsSimple.Properties and conformance InstallShortcutCATsSimple.Properties);
  }

  return result;
}

uint64_t type metadata accessor for InstallShortcutCATsSimple(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for InstallShortcutCATsSimple;
  if (!type metadata singleton initialization cache for InstallShortcutCATsSimple) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InstallShortcutCATsSimple);
  }
  return result;
}

uint64_t type metadata completion function for InstallShortcutCATsSimple(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + class metadata base offset for InstallShortcutCATsSimple);
}

uint64_t ObjC metadata update function for InstallShortcutCATsSimple()
{
  return type metadata accessor for InstallShortcutCATsSimple(0LL);
}

uint64_t storeEnumTagSinglePayload for InstallShortcutCATsSimple.Properties( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_116994 + 4 * byte_189325[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1169C8 + 4 * asc_189320[v4]))();
}

uint64_t sub_1169C8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1169D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1169D8LL);
  }
  return result;
}

uint64_t sub_1169E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1169ECLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1169F0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1169F8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for InstallShortcutCATsSimple.Properties()
{
}

void type metadata accessor for InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds()
{
}

uint64_t storeEnumTagSinglePayload for InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_116A60 + 4 * byte_18932A[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_116A80 + 4 * byte_18932F[v4]))();
  }
}

_BYTE *sub_116A60(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_116A80(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_116A88(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_116A90(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_116A98(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_116AA0(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void type metadata accessor for InstallShortcutCATsSimple.LaunchAppDialogIds()
{
}

void ShortcutsLinkPromptForActionConfirmationFlowStrategy.__allocating_init(action:request:actionMetadata:appBundleId:deviceState:serviceInvoker:outputPublisher:)( void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, void *a7, __int128 *a8)
{
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.serviceInvoker.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 96, a1);
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.outputPublisher.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 136, a1);
}

void ShortcutsLinkPromptForActionConfirmationFlowStrategy.init(action:request:actionMetadata:appBundleId:deviceState:serviceInvoker:outputPublisher:)( void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, void *a7, __int128 *a8)
{
  uint64_t v9 = v8;
  uint64_t v31 = type metadata accessor for Locale(0LL);
  uint64_t v17 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  OUTLINED_FUNCTION_35();
  uint64_t v20 = v19 - v18;
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = a2;
  *(void *)(v9 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a3;
  *(void *)(v9 + 40) = a4;
  *(void *)(v9 + 48) = a5;
  outlined init with copy of DeviceState((uint64_t)a6, v9 + 56);
  outlined init with copy of DeviceState((uint64_t)a7, v9 + 96);
  id v29 = a1;
  id v21 = a2;
  id v22 = a3;
  id v23 = [v21 result];
  id v24 = [v23 output];

  id v25 = [v24 confirmationActionName];
  uint64_t v26 = a6[3];
  uint64_t v27 = a6[4];
  __swift_project_boxed_opaque_existential_1(a6, v26);
  dispatch thunk of DeviceState.siriLocale.getter(v26, v27);
  static ShortcutsLinkPromptForActionConfirmationFlowStrategy.makeConfirmationNames(confirmationActionName:siriLocale:)( v25,  (uint64_t *)v33);

  __swift_destroy_boxed_opaque_existential_1Tm(a7);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v20, v31);
  __int128 v28 = v33[1];
  *(_OWORD *)(v9 + 176) = v33[0];
  *(_OWORD *)(v9 + 19__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v28;
  *(_OWORD *)(v9 + 208) = v33[2];
  outlined init with take of AceServiceInvokerAsync(a8, v9 + 136);
  __swift_destroy_boxed_opaque_existential_1Tm(a6);
  OUTLINED_FUNCTION_24_0();
}

void static ShortcutsLinkPromptForActionConfirmationFlowStrategy.makeConfirmationNames(confirmationActionName:siriLocale:)( void *a1@<X0>, uint64_t *a2@<X8>)
{
  if (a1)
  {
    id v3 = a1;
    uint64_t v4 = Locale.identifier.getter(v3);
    uint64_t v6 = v5;
    id v7 = [v3 acceptLabel];
    if (v7)
    {
      uint64_t v8 = v7;
      NSString v9 = String._bridgeToObjectiveC()();
      id v10 = [v8 localizedStringForLocaleIdentifier:v9];

      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v45 = v12;

      id v13 = [v3 acceptAlternatives];
      uint64_t v14 = type metadata accessor for NSError( 0LL,  &lazy cache variable for type metadata for LNStaticDeferredLocalizedString,  &OBJC_CLASS___LNStaticDeferredLocalizedString_ptr);
      unint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

      specialized Collection.prefix(_:)(10LL, v15);
      uint64_t v20 = specialized Array.init<A>(_:)(v16, v17, v18, v19);
      swift_bridgeObjectRetain(v6);
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo31LNStaticDeferredLocalizedStringCG_SSs5NeverOTg50145_sSo23LNDisplayRepresentationC18SiriLinkFlowPluginE29toDisambiguationItemComponent33_1653C942D9461C94FC73A283A98B2FB0LL6localeAC0hiJ0VSS_tFSSSo31defG6CXEfU_SSTf1cn_n( (uint64_t)v20,  v4,  v6);
      id v22 = v21;
      swift_bridgeObjectRelease(v20);
    }

    else
    {
      uint64_t v11 = 0LL;
      uint64_t v45 = 0LL;
      id v22 = _swiftEmptyArrayStorage;
    }

    id v27 = [v3 denyLabel];
    if (v27)
    {
      __int128 v28 = v27;
      NSString v29 = String._bridgeToObjectiveC()();
      id v30 = [v28 localizedStringForLocaleIdentifier:v29];

      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v44 = v4;
      uint64_t v25 = v31;

      id v32 = [v3 denyAlternatives];
      uint64_t v33 = type metadata accessor for NSError( 0LL,  &lazy cache variable for type metadata for LNStaticDeferredLocalizedString,  &OBJC_CLASS___LNStaticDeferredLocalizedString_ptr);
      uint64_t v34 = v22;
      uint64_t v35 = v11;
      uint64_t v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v32, v33);

      unint64_t v37 = v36;
      uint64_t v11 = v35;
      id v22 = v34;
      specialized Collection.prefix(_:)(10LL, v37);
      uint64_t v42 = specialized Array.init<A>(_:)(v38, v39, v40, v41);
      swift_bridgeObjectRetain(v6);
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo31LNStaticDeferredLocalizedStringCG_SSs5NeverOTg50145_sSo23LNDisplayRepresentationC18SiriLinkFlowPluginE29toDisambiguationItemComponent33_1653C942D9461C94FC73A283A98B2FB0LL6localeAC0hiJ0VSS_tFSSSo31defG6CXEfU_SSTf1cn_n( (uint64_t)v42,  v44,  v6);
      uint64_t v26 = v43;
      swift_bridgeObjectRelease(v42);

      swift_bridgeObjectRelease(v6);
    }

    else
    {
      swift_bridgeObjectRelease(v6);

      uint64_t v24 = 0LL;
      uint64_t v25 = 0LL;
      uint64_t v26 = _swiftEmptyArrayStorage;
    }

    uint64_t v23 = v45;
  }

  else
  {
    uint64_t v11 = 0LL;
    uint64_t v23 = 0LL;
    uint64_t v24 = 0LL;
    uint64_t v25 = 0LL;
    id v22 = _swiftEmptyArrayStorage;
    uint64_t v26 = _swiftEmptyArrayStorage;
  }

  *a2 = v11;
  a2[1] = v23;
  a2[2] = v24;
  a2[3] = v25;
  a2[4] = (uint64_t)v22;
  a2[5] = (uint64_t)v26;
}

void ShortcutsLinkPromptForActionConfirmationFlowStrategy.actionForInput(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Input(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_35();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_35();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = type metadata accessor for TaskPriority(0LL);
  __swift_storeEnumTagSinglePayload(v12, 1LL, 1LL, v13);
  uint64_t v14 = (void *)OUTLINED_FUNCTION_19((uint64_t)&unk_1FC948, 40LL);
  v14[2] = 0LL;
  v14[3] = 0LL;
  v14[4] = v2;
  swift_retain(v2);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( v12,  (uint64_t)&async function pointer to partial apply for closure #1 in ShortcutsLinkPromptForActionConfirmationFlowStrategy.actionForInput(_:),  (uint64_t)v14);
  swift_release();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v15 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.voiceCommands);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    unint64_t v19 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v20 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v25 = v20;
    *(_DWORD *)unint64_t v19 = 136315138;
    uint64_t v21 = Input.description.getter();
    uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v19 + 4);
    OUTLINED_FUNCTION_20();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
    _os_log_impl(&dword_0, v17, v18, "#ShortcutsLinkPromptForActionConfirmationFlowStrategy on input: %s", v19, 0xCu);
    swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v20);
    OUTLINED_FUNCTION_1_0((uint64_t)v19);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
  }

  uint64_t v23 = (char *)&loc_11725C
      + 4
      * byte_1895B0[ShortcutsLinkPromptForActionConfirmationFlowStrategy.getConfirmationValue(input:)()];
  __asm { BR              X10 }

uint64_t closure #1 in ShortcutsLinkPromptForActionConfirmationFlowStrategy.actionForInput(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 96) = a4;
  return swift_task_switch( closure #1 in ShortcutsLinkPromptForActionConfirmationFlowStrategy.actionForInput(_:),  0LL,  0LL);
}

uint64_t closure #1 in ShortcutsLinkPromptForActionConfirmationFlowStrategy.actionForInput(_:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = OUTLINED_FUNCTION_48();
  v2[13] = __swift_project_value_buffer(v3, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_9_5();
  os_log_type_t v4 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( &dword_0,  v0,  v1,  "#ShortcutsLinkPromptForActionConfirmationFlowStrategy submitting empty output to clear screen and prevent double-taps",  v5,  2u);
    OUTLINED_FUNCTION_1_0((uint64_t)v5);
  }

  uint64_t v6 = v2[12];

  outlined init with copy of DeviceState(v6 + 136, (uint64_t)(v2 + 2));
  uint64_t v7 = v2[5];
  uint64_t v8 = v2[6];
  __swift_project_boxed_opaque_existential_1(v2 + 2, v7);
  static OutputUtils.makeTemporaryOutput()(v2 + 7);
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  v2[14] = v9;
  OUTLINED_FUNCTION_17_9( v9,  (uint64_t)closure #1 in ShortcutsLinkPromptForActionConfirmationFlowStrategy.actionForInput(_:));
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v2 + 7, v7, v8);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  OUTLINED_FUNCTION_50_0();
  uint64_t v3 = (void *)(v2 + 56);
  *os_log_type_t v4 = *v1;
  *(void *)(v2 + 120) = v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  os_log_type_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  uint64_t v4;
  os_log_type_t v5;
  _WORD *v6;
  uint64_t v2 = *(void *)(v1 + 120);
  uint64_t v3 = *(os_log_s **)(v1 + 104);
  os_log_type_t v4 = __swift_destroy_boxed_opaque_existential_1Tm((void *)(v1 + 16));
  Logger.logObject.getter(v4);
  uint64_t v5 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v5))
  {
    uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    *uint64_t v6 = 0;
    OUTLINED_FUNCTION_20_11( &dword_0,  v3,  v0,  "#ShortcutsLinkPromptForActionConfirmationFlowStrategy failed to submit empty output to clear screen");
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
  }

  swift_errorRelease(v2);

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.getConfirmationValue(input:)()
{
  uint64_t v1 = type metadata accessor for Parse(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Input.parse.getter(v3);
  uint64_t v6 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)((uint64_t)v5);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  if (v6 == 3)
  {
    ShortcutsLinkPromptForActionConfirmationFlowStrategy.getVoiceCommandText(input:)();
    if (v7)
    {
      Swift::String v8 = String.lowercased()();
      if (v0[23])
      {
        Swift::String v9 = String.lowercased()();
        if (v8._countAndFlagsBits == v9._countAndFlagsBits && v8._object == v9._object)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n(v8._object, 2LL);
          return 0LL;
        }

        char v11 = _stringCompareWithSmolCheck(_:_:expecting:)( v8._countAndFlagsBits,  v8._object,  v9._countAndFlagsBits,  v9._object,  0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v11 & 1) != 0)
        {
LABEL_41:
          swift_bridgeObjectRelease();
          return 0LL;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      uint64_t v12 = (void *)v0[26];
      uint64_t v13 = v12[2];
      if (v13)
      {
        swift_bridgeObjectRetain_n(v0[26], 2LL);
        uint64_t v14 = v12 + 5;
        while (1)
        {
          Swift::String v15 = String.lowercased()();
          object = v15._object;
          Swift::String v17 = String.lowercased()();
          if (v15._countAndFlagsBits == v17._countAndFlagsBits && v15._object == v17._object)
          {
            swift_bridgeObjectRelease_n(v12, 2LL);
            goto LABEL_40;
          }

          char v19 = _stringCompareWithSmolCheck(_:_:expecting:)( v15._countAndFlagsBits,  v15._object,  v17._countAndFlagsBits,  v17._object,  0LL);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v19 & 1) != 0) {
            break;
          }
          v14 += 2;
          if (!--v13)
          {
            swift_bridgeObjectRelease_n(v12, 2LL);
            goto LABEL_20;
          }
        }

        object = v12;
LABEL_40:
        swift_bridgeObjectRelease_n(object, 2LL);
        goto LABEL_41;
      }

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.parseConfirmationResponse(input:)( uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  void v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  v3[5] = OUTLINED_FUNCTION_9_0(*(void *)(v4 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

void ShortcutsLinkPromptForActionConfirmationFlowStrategy.parseConfirmationResponse(input:)()
{
  uint64_t v0 = (char *)&loc_1179D8
     + dword_117BF4[ShortcutsLinkPromptForActionConfirmationFlowStrategy.getConfirmationValue(input:)()];
  __asm { BR              X10 }

uint64_t sub_1179E8()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v1 + 56;
  uint64_t v3 = v1 + 96;
  id v4 = [*(id *)(v1 + 32) systemProtocols];
  uint64_t v5 = type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol,  &OBJC_CLASS___LNSystemProtocol_ptr);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);
  v0[6] = v6;

  uint64_t v7 = (void *)swift_task_alloc(dword_2157DC);
  v0[7] = v7;
  OUTLINED_FUNCTION_17_9( v7,  (uint64_t)ShortcutsLinkPromptForActionConfirmationFlowStrategy.parseConfirmationResponse(input:));
  return static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:systemProtocols:)(v2, v3, v6);
}

uint64_t sub_117A84()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_9_5();
  os_log_type_t v4 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_7_2(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    *uint64_t v5 = 0;
    OUTLINED_FUNCTION_20_11( &dword_0,  v1,  v0,  "#ShortcutsLinkPromptForActionConfirmationFlowStrategy shouldn't receive no in parse");
    OUTLINED_FUNCTION_1_0((uint64_t)v5);
  }

  unint64_t v6 = lazy protocol witness table accessor for type ShortcutsLinkConfirmationError and conformance ShortcutsLinkConfirmationError();
  uint64_t v7 = swift_allocError(&type metadata for ShortcutsLinkConfirmationError, v6, 0LL, 0LL);
  swift_willThrow(v7, v8, v9, v10, v11);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_29_4(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.parseConfirmationResponse(input:)()
{
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = enum case for ConfirmationResponse.confirmed(_:);
  uint64_t v3 = type metadata accessor for ConfirmationResponse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104LL))(v1, v2, v3);
  __swift_storeEnumTagSinglePayload(v1, 0LL, 1LL, v3);
  SimpleConfirmationResponseProvider.init(_:)(v1);
  OUTLINED_FUNCTION_40_0();
  os_log_type_t v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_3_14(v4);
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:)( uint64_t a1, uint64_t a2)
{
  v3[32] = a2;
  v3[33] = v2;
  v3[31] = a1;
  uint64_t v4 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  v3[34] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[35] = v5;
  v3[36] = OUTLINED_FUNCTION_9_0(v5);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[37] = OUTLINED_FUNCTION_9_0(*(void *)(v6 - 8));
  uint64_t v7 = type metadata accessor for DialogPhase(0LL);
  v3[38] = OUTLINED_FUNCTION_9_0(*(void *)(v7 - 8));
  uint64_t v8 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[39] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[40] = v9;
  v3[41] = OUTLINED_FUNCTION_9_0(v9);
  uint64_t v10 = type metadata accessor for NLContextUpdate(0LL);
  v3[42] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[43] = v11;
  v3[44] = OUTLINED_FUNCTION_9_0(v11);
  uint64_t v12 = type metadata accessor for CATOption(0LL);
  v3[45] = OUTLINED_FUNCTION_9_0(*(void *)(v12 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  uint64_t v1 = *((void *)v0 + 45);
  uint64_t v2 = (void *)*((void *)v0 + 33);
  uint64_t v3 = type metadata accessor for ShortcutsLinkNLContextProvider();
  uint64_t inited = swift_initStackObject(v3, v0 + 14);
  *((void *)v0 + 46) = inited;
  static Device.current.getter((void *)v0 + 18, inited);
  type metadata accessor for RunLinkActionCATs(0LL);
  OUTLINED_FUNCTION_29_2();
  uint64_t v4 = OUTLINED_FUNCTION_97(v1);
  type metadata accessor for RunLinkActionCATsSimple(0LL);
  OUTLINED_FUNCTION_29_2();
  uint64_t v5 = OUTLINED_FUNCTION_96(v1);
  type metadata accessor for RunVoiceCommandCATs(0LL);
  OUTLINED_FUNCTION_29_2();
  uint64_t v6 = OUTLINED_FUNCTION_97(v1);
  type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  OUTLINED_FUNCTION_29_2();
  uint64_t v7 = OUTLINED_FUNCTION_96(v1);
  type metadata accessor for RunLinkActionCATPatternsExecutor(0LL);
  OUTLINED_FUNCTION_29_2();
  OUTLINED_FUNCTION_97(v1);
  uint64_t v8 = OUTLINED_FUNCTION_70_3();
  uint64_t v9 = (void *)swift_initStackObject(v8, v0 + 1);
  *((void *)v0 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 7) = v9;
  uint64_t v10 = specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)( v0 + 9,  v4,  v5,  v6,  v7,  (uint64_t)(v0 + 14),  v9);
  *((void *)v0 + 48) = v10;
  *((void *)v0 + 49) = v2[3];
  id v11 = OUTLINED_FUNCTION_4((uint64_t)v10, "result");
  id v12 = [v11 output];

  *((void *)v0 + 50) = [v12 dialog];
  id v14 = OUTLINED_FUNCTION_4(v13, "result");
  id v15 = [v14 output];

  *((void *)v0 + 51) = [v15 confirmationActionName];
  ShortcutsLinkNLContextProvider.makeContextForActionConfirmation(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:)( v2[22],  v2[23],  v2[24],  v2[25],  v2[26],  v2[27]);
  uint64_t v16 = (void *)swift_task_alloc(dword_217A64);
  *((void *)v0 + 5__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v16;
  OUTLINED_FUNCTION_17_9( v16,  (uint64_t)ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:));
  OUTLINED_FUNCTION_24_7();
  return LinkActionDialogTemplating.makeConfirmAndCancelButton(confirmationActionName:)(v17);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_log_s *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  char v46;
  int v47;
  uint64_t v48;
  uint64_t v2 = *(void *)(v1 + 408);
  uint64_t v3 = objc_msgSend(objc_msgSend(*(id *)(v1 + 392), "result"), "output");
  OUTLINED_FUNCTION_35_10();
  *(_BYTE *)(v1 + 584) = [v0 shouldShowPrompt];

  if (v2) {
    uint64_t v6 = [*(id *)(v1 + 408) destructive];
  }
  else {
    uint64_t v6 = 0LL;
  }
  int v47 = (int)v6;
  *(_BYTE *)(v1 + 585) = (_BYTE)v6;
  uint64_t v7 = *(void *)(v1 + 344);
  uint64_t v8 = *(void *)(v1 + 352);
  uint64_t v9 = *(void *)(v1 + 336);
  id v11 = *(void *)(v1 + 296);
  uint64_t v10 = *(void *)(v1 + 304);
  id v12 = *(void *)(v1 + 280);
  uint64_t v13 = *(void *)(v1 + 288);
  id v14 = *(void *)(v1 + 272);
  static DialogPhase.confirmation.getter(v6, v4, v5);
  OutputGenerationManifest.init(dialogPhase:_:)(v10, CustomIntentDisambiguationItemContainer.init(items:), 0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v11, v8, v9);
  __swift_storeEnumTagSinglePayload(v11, 0LL, 1LL, v9);
  OutputGenerationManifest.nlContextUpdate.setter(v11);
  id v15 = static TemplatingResult.getListenAfterSpeakingDisabled()();
  OutputGenerationManifest.listenAfterSpeaking.setter((v15 & 1) == 0);
  (*(void (**)(uint64_t, void, uint64_t))(v12 + 104))( v13,  enum case for RFFeatureFlags.ResponseFramework._SMART(_:),  v14);
  uint64_t v16 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_17_4(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
  if ((v16 & 1) != 0)
  {
    uint64_t v17 = *(void *)(v1 + 264);
    type metadata accessor for App(0LL);
    os_log_type_t v18 = *(void *)(v17 + 40);
    *(void *)(v1 + 464) = v18;
    char v19 = *(void *)(v17 + 48);
    *(void *)(v1 + 47__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v19;
    OUTLINED_FUNCTION_80();
    App.__allocating_init(appIdentifier:)(v18, v19);
    Swift::String v20 = specialized App.toAppDisplayName(_:appInfoResolving:isFirstParty:)(v17 + 56, 2);
    unint64_t v22 = v21;
    OUTLINED_FUNCTION_12_5();
    *(void *)(v1 + 480) = v22;
    *(void *)(v1 + 488) = v20;
    char v23 = v20 & 0xFFFFFFFFFFFFLL;
    uint64_t v24 = 0xE000000000000000LL;
    if (v22) {
      uint64_t v24 = v22;
    }
    else {
      char v23 = 0LL;
    }
    if ((v24 & 0x2000000000000000LL) != 0) {
      char v23 = HIBYTE(v24) & 0xF;
    }
    if (!v23)
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v25 = *(void *)(v1 + 264);
      uint64_t v26 = OUTLINED_FUNCTION_48();
      Swift::String v27 = __swift_project_value_buffer(v26, (uint64_t)static Logger.voiceCommands);
      Swift::String v28 = swift_retain(v25);
      NSString v29 = (os_log_s *)v27;
      Logger.logObject.getter(v28);
      char v30 = OUTLINED_FUNCTION_73();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
        uint64_t v32 = OUTLINED_FUNCTION_38(32LL);
        uint64_t v45 = v32;
        *(_DWORD *)uint64_t v31 = 136315138;
        OUTLINED_FUNCTION_80();
        *(void *)(v1 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 240, v1 + 248, v31 + 4);
        OUTLINED_FUNCTION_14();
        swift_release();
        _os_log_impl( &dword_0,  v29,  v30,  "#ShortcutsLinkPromptForActionConfirmationFlowStrategy: failed to get app's displayName; bundleId='%s'",
          v31,
          0xCu);
        swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
        OUTLINED_FUNCTION_1_0(v32);
        OUTLINED_FUNCTION_1_0((uint64_t)v31);
      }

      else
      {
        swift_release();
      }
    }

    uint64_t v43 = *(void *)(v1 + 400);
    uint64_t v44 = (void *)swift_task_alloc(dword_217A94);
    *(void *)(v1 + 496) = v44;
    void *v44 = v1;
    v44[1] = ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:);
    return LinkActionDialogTemplating.actionConfirmationHeader(customDialog:)(v43);
  }

  else
  {
    uint64_t v33 = (void *)swift_task_alloc(dword_21C814);
    *(void *)(v1 + 568) = v33;
    *uint64_t v33 = v1;
    v33[1] = ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:);
    uint64_t v48 = *(void *)(v1 + 328);
    uint64_t v46 = v47;
    OUTLINED_FUNCTION_24_7();
    return ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:confirmLabel:noLabel:shouldShowPrompt:isDestructive:manifest:)( v34,  v35,  v36,  v37,  v38,  v39,  v40,  v41);
  }

{
  uint64_t v0;
  void *v1;
  OUTLINED_FUNCTION_50_0();
  uint64_t v1 = (void *)(v0 + 184);
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 560));
  swift_release();
  OUTLINED_FUNCTION_14();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  OUTLINED_FUNCTION_50_0();
  *uint64_t v2 = *v1;
  *(void *)(v3 + 576) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t (*v5)(void);
  uint64_t v3 = *(void **)(v0 + 408);
  swift_release();
  OUTLINED_FUNCTION_12_5();

  OUTLINED_FUNCTION_38_27();
  OUTLINED_FUNCTION_17_4(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return v5();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v1 = *(void **)(v0 + 408);

  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_34_0();

  OUTLINED_FUNCTION_4_41();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  return OUTLINED_FUNCTION_2_1(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  OUTLINED_FUNCTION_18_32();
  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_34_0();

  OUTLINED_FUNCTION_98_4();
  OUTLINED_FUNCTION_4_41();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  return OUTLINED_FUNCTION_2_1(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  OUTLINED_FUNCTION_18_32();
  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_34_0();

  OUTLINED_FUNCTION_98_4();
  OUTLINED_FUNCTION_4_41();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  return OUTLINED_FUNCTION_2_1(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void **)v5;
  uint64_t v7 = *(void *)(*(void *)v5 + 416LL);
  v6[53] = a1;
  v6[54] = a2;
  v6[55] = a3;
  v6[56] = a4;
  v6[57] = v4;
  OUTLINED_FUNCTION_54_0(v7);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:)( uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 496);
  *(void *)(v3 + 504) = a1;
  *(void *)(v3 + 51__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v1;
  OUTLINED_FUNCTION_54_0(v4);
  if (v1)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_20();
    swift_bridgeObjectRelease();
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

void ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  int v1 = *(unsigned __int8 *)(v0 + 584);
  id v2 = [*(id *)(v0 + 504) catId];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  OutputGenerationManifest.responseViewId.setter(v3);
  OUTLINED_FUNCTION_80();
  if (v1 == 1)
  {
    Swift::String_optional v4 = DialogExecutionResult.firstDialogFullPrint()();
    uint64_t countAndFlagsBits = v4.value._countAndFlagsBits;
    object = v4.value._object;
  }

  else
  {
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
  }

  *(void *)(v0 + 520) = object;
  id v6 =  objc_msgSend( objc_msgSend(*(id *)(v0 + 392), "result", countAndFlagsBits),  "output");
  OUTLINED_FUNCTION_35_10();
  id v8 = OUTLINED_FUNCTION_14_19(v7, "viewSnippet");

  if (v8)
  {
    id v10 = OUTLINED_FUNCTION_4(v9, "viewData");
    OUTLINED_FUNCTION_35_10();
    uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
    unint64_t v13 = v12;
  }

  else
  {
    uint64_t v11 = 0LL;
    unint64_t v13 = 0xF000000000000000LL;
  }

  *(void *)(v0 + 536) = v13;
  *(void *)(v0 + 528) = v11;
  uint64_t v39 = *(void **)(v0 + 504);
  uint64_t v15 = *(void *)(v0 + 480);
  uint64_t v14 = *(void *)(v0 + 488);
  uint64_t v16 = *(void *)(v0 + 472);
  char v38 = *(_BYTE *)(v0 + 585);
  uint64_t v17 = *(void *)(v0 + 448);
  uint64_t v37 = *(void *)(v0 + 440);
  uint64_t v18 = *(void *)(v0 + 432);
  uint64_t v35 = *(void *)(v0 + 464);
  uint64_t v36 = *(void *)(v0 + 424);
  if (v15) {
    unint64_t v19 = *(void *)(v0 + 480);
  }
  else {
    unint64_t v19 = 0xE000000000000000LL;
  }
  if (!v15) {
    uint64_t v14 = 0LL;
  }
  uint64_t v34 = v14;
  uint64_t v20 = type metadata accessor for ResponseFactory(0LL);
  OUTLINED_FUNCTION_51(v20);
  OUTLINED_FUNCTION_52_5();
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v19);
  uint64_t v21 = OUTLINED_FUNCTION_55_19();
  *(void *)(v0 + 544) = ResponseFactory.init()(v21);
  uint64_t v22 = type metadata accessor for WorkflowDataModels(0LL);
  *(void *)(v0 + 208) = v22;
  *(void *)(v0 + 216) = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels( (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels,  type metadata accessor for WorkflowDataModels,  (uint64_t)&protocol conformance descriptor for WorkflowDataModels);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v0 + 184));
  void *boxed_opaque_existential_1 = v35;
  boxed_opaque_existential_1[1] = v16;
  boxed_opaque_existential_1[2] = v34;
  boxed_opaque_existential_1[3] = v19;
  boxed_opaque_existential_1[4] = v33;
  boxed_opaque_existential_1[5] = object;
  boxed_opaque_existential_1[6] = v11;
  boxed_opaque_existential_1[7] = v13;
  boxed_opaque_existential_1[8] = v36;
  boxed_opaque_existential_1[9] = v18;
  boxed_opaque_existential_1[10] = v37;
  boxed_opaque_existential_1[11] = v17;
  *((_BYTE *)boxed_opaque_existential_1 + 96) = v38;
  swift_storeEnumTagMultiPayload(boxed_opaque_existential_1, v22, 10LL);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v25 = OUTLINED_FUNCTION_19(v24, 40LL);
  *(_OWORD *)(v25 + 16) = xmmword_17E150;
  *(void *)(v25 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v39;
  uint64_t v40 = v25;
  specialized Array._endMutation()(v25, v26, v27);
  *(void *)(v0 + 55__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v40;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v19);
  OUTLINED_FUNCTION_52_5();
  OUTLINED_FUNCTION_55_19();
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v17);
  id v29 = v39;
  char v30 = (void *)swift_task_alloc(v28);
  *(void *)(v0 + 560) = v30;
  *char v30 = v0;
  v30[1] = ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:);
  OUTLINED_FUNCTION_43_24();
  __asm { BR              X4 }

{
  void *v0;
  unint64_t v1;
  uint64_t (**v2)(uint64_t, uint64_t);
  id v3;
  void *v5;
  int v1 = v0[60];
  id v2 = (uint64_t (**)(uint64_t, uint64_t))v0[50];
  uint64_t v5 = (void *)v0[63];
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_37();
  if (!v1) {
    int v1 = 0xE000000000000000LL;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_88_5();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_88_5();
  OUTLINED_FUNCTION_38_27();

  OUTLINED_FUNCTION_17_4(v2[1]);
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_54();
  OUTLINED_FUNCTION_24_7();
  __asm { BR              X0 }

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:confirmLabel:noLabel:shouldShowPrompt:isDestructive:manifest:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(void *)(v9 + 336) = v15;
  *(void *)(v9 + 344) = v8;
  *(_BYTE *)(v9 + 513) = v14;
  *(_BYTE *)(v9 + 51__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a8;
  *(void *)(v9 + 320) = a6;
  *(void *)(v9 + 328) = a7;
  *(void *)(v9 + 304) = a4;
  *(void *)(v9 + 31__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a5;
  *(void *)(v9 + 288) = a1;
  *(void *)(v9 + 296) = a3;
  uint64_t v10 = type metadata accessor for OutputGenerationManifest(0LL);
  *(void *)(v9 + 35__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v9 + 360) = v11;
  *(void *)(v9 + 368) = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for CATOption(0LL);
  *(void *)(v9 + 376) = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:confirmLabel:noLabel:shouldShowPrompt:isDestructive:manifest:),  0LL,  0LL);
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:confirmLabel:noLabel:shouldShowPrompt:isDestructive:manifest:)( uint64_t a1)
{
  uint64_t v3 = v2[47];
  static Device.current.getter(v2 + 31, a1);
  type metadata accessor for RunLinkActionCATs(0LL);
  OUTLINED_FUNCTION_59();
  uint64_t v4 = OUTLINED_FUNCTION_97(v3);
  type metadata accessor for RunLinkActionCATsSimple(0LL);
  OUTLINED_FUNCTION_59();
  uint64_t v5 = OUTLINED_FUNCTION_96(v3);
  type metadata accessor for RunVoiceCommandCATs(0LL);
  OUTLINED_FUNCTION_59();
  uint64_t v6 = OUTLINED_FUNCTION_97(v3);
  type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  OUTLINED_FUNCTION_59();
  uint64_t v7 = OUTLINED_FUNCTION_96(v3);
  type metadata accessor for RunLinkActionCATPatternsExecutor(0LL);
  OUTLINED_FUNCTION_59();
  OUTLINED_FUNCTION_97(v3);
  uint64_t v8 = OUTLINED_FUNCTION_70_3();
  uint64_t inited = (void *)swift_initStackObject(v8, v2 + 2);
  v2[48] = inited;
  v2[49] = specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)( (__int128 *)(v2 + 31),  v4,  v5,  v6,  v7,  v1,  inited);
  uint64_t v10 = (void *)swift_task_alloc(dword_217A24);
  v2[50] = v10;
  *uint64_t v10 = v2;
  v10[1] = ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:confirmLabel:noLabel:shouldShowPrompt:isDestructive:manifest:);
  return LinkActionDialogTemplating.makeActionConfirmationPattern_preRFv2(customResponse:)(v2[37]);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 400);
  *(void *)(v3 + 408) = a1;
  *(void *)(v3 + 416) = v1;
  OUTLINED_FUNCTION_54_0(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:confirmLabel:noLabel:shouldShowPrompt:isDestructive:manifest:)()
{
  if (*(_BYTE *)(v0 + 512) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc(dword_217A14);
    *(void *)(v0 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = v1;
    *uint64_t v1 = v0;
    v1[1] = ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:confirmLabel:noLabel:shouldShowPrompt:isDestructive:manifest:);
    OUTLINED_FUNCTION_43_24();
    return LinkActionDialogTemplating.actionConfirmationHeader_preRFv2(customDialog:)(v2);
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 344);
    uint64_t v20 = *(void *)(v4 + 48);
    uint64_t v21 = *(void *)(v4 + 40);
    swift_bridgeObjectRetain(v20);
    id v6 = OUTLINED_FUNCTION_14_19(v5, "result");
    id v7 = [v6 output];

    id v9 = OUTLINED_FUNCTION_28_19(v8, "viewSnippet");
    if (v9)
    {
      id v11 = OUTLINED_FUNCTION_14_19(v10, "viewData");

      id v9 = (id)static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
      unint64_t v13 = v12;
    }

    else
    {
      unint64_t v13 = 0xF000000000000000LL;
    }

    char v14 = *(_BYTE *)(v0 + 513);
    uint64_t v16 = *(void *)(v0 + 320);
    uint64_t v15 = *(void *)(v0 + 328);
    uint64_t v17 = *(void *)(v0 + 304);
    uint64_t v18 = *(void *)(v0 + 312);
    static Device.current.getter(v22, v10);
    swift_bridgeObjectRetain(v15);
    OUTLINED_FUNCTION_52_5();
    ActionConfirmationVisual.init(appBundleId:confirmButton:noButton:destructive:prompt:viewData:deviceState:)( v21,  v20,  v17,  v18,  v16,  v15,  v14,  0LL,  v0 + 144,  0LL,  (uint64_t)v9,  v13,  v22);
    unint64_t v19 = (void *)swift_task_alloc(dword_2164B4);
    *(void *)(v0 + 456) = v19;
    OUTLINED_FUNCTION_17_9( v19,  (uint64_t)ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:confirmLabel:noLabel:shouldShowPrompt:isDestructive:manifest:));
    OUTLINED_FUNCTION_43_24();
    return ActionConfirmationVisual.data.getter();
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  OUTLINED_FUNCTION_10_1();
  *uint64_t v5 = *v3;
  v4[54] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v4[55] = v0;
    v4[56] = v2;
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void v21[5];
  uint64_t v1 = *(void *)(v0 + 344);
  unint64_t v19 = *(void *)(v1 + 40);
  uint64_t v20 = *(void *)(v0 + 448);
  uint64_t v17 = *(void *)(v1 + 48);
  uint64_t v18 = *(void *)(v0 + 440);
  swift_bridgeObjectRetain(v17);
  uint64_t v3 = OUTLINED_FUNCTION_28_19(v2, "result");
  uint64_t v4 = [v3 output];

  uint64_t v5 = [v4 viewSnippet];
  if (v5)
  {
    id v7 = OUTLINED_FUNCTION_28_19(v6, "viewData");

    uint64_t v5 = (id)static Data._unconditionallyBridgeFromObjectiveC(_:)(v7);
    id v9 = v8;
  }

  else
  {
    id v9 = 0xF000000000000000LL;
  }

  uint64_t v10 = *(_BYTE *)(v0 + 513);
  unint64_t v12 = *(void *)(v0 + 320);
  id v11 = *(void *)(v0 + 328);
  unint64_t v13 = *(void *)(v0 + 304);
  char v14 = *(void *)(v0 + 312);
  static Device.current.getter(v21, v6);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  ActionConfirmationVisual.init(appBundleId:confirmButton:noButton:destructive:prompt:viewData:deviceState:)( v19,  v17,  v13,  v14,  v12,  v11,  v10,  v20,  v0 + 144,  v18,  (uint64_t)v5,  v9,  v21);
  uint64_t v15 = (void *)swift_task_alloc(dword_2164B4);
  *(void *)(v0 + 456) = v15;
  OUTLINED_FUNCTION_17_9( v15,  (uint64_t)ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:confirmLabel:noLabel:shouldShowPrompt:isDestructive:manifest:));
  return ActionConfirmationVisual.data.getter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  OUTLINED_FUNCTION_10_1();
  *uint64_t v5 = *v3;
  v4[58] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v4[59] = v0;
    v4[60] = v2;
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char *v12;
  uint64_t v2 = *(void *)(v0 + 360);
  uint64_t v1 = *(void *)(v0 + 368);
  uint64_t v3 = *(void *)(v0 + 352);
  uint64_t v4 = *(void *)(v0 + 336);
  outlined bridged method (mbnn) of @objc PatternExecutionResult.visual.setter( *(void *)(v0 + 480),  *(void *)(v0 + 472),  *(void **)(v0 + 408));
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  id v6 = OUTLINED_FUNCTION_4(v5, "patternId");
  id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  OutputGenerationManifest.responseViewId.setter(v7);
  uint64_t v8 = type metadata accessor for ResponseFactory(0LL);
  id v9 = OUTLINED_FUNCTION_51(v8);
  *(void *)(v0 + 488) = ResponseFactory.init()(v9);
  *(void *)(v0 + 496) = v10;
  *uint64_t v10 = v0;
  v10[1] = ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:confirmLabel:noLabel:shouldShowPrompt:isDestructive:manifest:);
  return ((uint64_t (*)(void, void, void))v12)( *(void *)(v0 + 288),  *(void *)(v0 + 408),  *(void *)(v0 + 368));
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  OUTLINED_FUNCTION_50_0();
  *uint64_t v2 = *v1;
  *(void *)(v3 + 504) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v1 = *(void **)(v0 + 408);
  outlined release of ActionConfirmationVisual((void *)(v0 + 144));

  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_98_4();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_3_14(v2);
}

{
  uint64_t v0;
  swift_release();
  OUTLINED_FUNCTION_29_16();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_29_16();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_34_0();
  outlined release of ActionConfirmationVisual((void *)(v0 + 144));
  OUTLINED_FUNCTION_29_16();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v1 = *(void **)(v0 + 408);
  uint64_t v2 = *(void *)(v0 + 360);
  outlined release of ActionConfirmationVisual((void *)(v0 + 144));

  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_29_16();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_29_4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.getVoiceCommandText(input:)()
{
  uint64_t v0 = type metadata accessor for VoiceCommandsNLIntent(0LL);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for Parse(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for NLIntent(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  id v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Input.parse.getter(v9);
  if ((*(unsigned int (**)(char *, uint64_t))(v4 + 88))(v6, v3) == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v6, v3);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v6, v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v2, v11, v7);
    if (one-time initialization token for voiceCommandTextNode != -1) {
      swift_once( &one-time initialization token for voiceCommandTextNode,  one-time initialization function for voiceCommandTextNode);
    }
    uint64_t v12 = static VoiceCommandsNLIntent.voiceCommandTextNode;
    uint64_t v13 = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels( (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent,  type metadata accessor for VoiceCommandsNLIntent,  (uint64_t)&protocol conformance descriptor for VoiceCommandsNLIntent);
    IntentNodeTraversable.value<A>(forNode:)(v12, v0, v13);
    uint64_t v14 = v16;
    outlined destroy of VoiceCommandsNLIntent((uint64_t)v2);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return 0LL;
  }

  return v14;
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.deinit()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 56));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 96));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 136));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_37();
  return v0;
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 224LL, 7LL);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance ShortcutsLinkPromptForActionConfirmationFlowStrategy( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_21C804);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return ShortcutsLinkPromptForActionConfirmationFlowStrategy.parseConfirmationResponse(input:)(a1, a2);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makePromptForConfirmation(itemToConfirm:) in conformance ShortcutsLinkPromptForActionConfirmationFlowStrategy( uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (void *)swift_task_alloc(dword_21C80C);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:)(a1, v4);
}

uint64_t sub_1196BC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t partial apply for closure #1 in ShortcutsLinkPromptForActionConfirmationFlowStrategy.actionForInput(_:)( uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_21C7F4);
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = protocol witness for Flow.execute() in conformance WorkflowRunnerFlow;
  return closure #1 in ShortcutsLinkPromptForActionConfirmationFlowStrategy.actionForInput(_:)(a1, v4, v5, v6);
}

uint64_t storeEnumTagSinglePayload for ShortcutsLinkConfirmationError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1197D4 + 4 * byte_1895B4[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1197F4 + 4 * byte_1895B9[v4]))();
  }
}

_BYTE *sub_1197D4(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_1197F4(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1197FC(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_119804(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_11980C(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_119814(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ShortcutsLinkConfirmationError()
{
  return &type metadata for ShortcutsLinkConfirmationError;
}

uint64_t type metadata accessor for ShortcutsLinkPromptForActionConfirmationFlowStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin52ShortcutsLinkPromptForActionConfirmationFlowStrategy);
}

uint64_t destroy for ShortcutsLinkPromptForActionConfirmationFlowStrategy.ConfirmationNames(void *a1)
{
  return swift_bridgeObjectRelease(a1[5]);
}

void *initializeWithCopy for ShortcutsLinkPromptForActionConfirmationFlowStrategy.ConfirmationNames( void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[4];
  uint64_t v6 = a2[5];
  a1[4] = v5;
  a1[5] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

void *assignWithCopy for ShortcutsLinkPromptForActionConfirmationFlowStrategy.ConfirmationNames( void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[5];
  uint64_t v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

void *assignWithTake for ShortcutsLinkPromptForActionConfirmationFlowStrategy.ConfirmationNames( void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  uint64_t v6 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a1[5];
  a1[5] = *(void *)(a2 + 40);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShortcutsLinkPromptForActionConfirmationFlowStrategy.ConfirmationNames( uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      LODWORD(outlined consume of ParsedMeasurement?(v0, v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(outlined consume of ParsedMeasurement?(v0, v1, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(outlined consume of ParsedMeasurement?(v0, v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShortcutsLinkPromptForActionConfirmationFlowStrategy.ConfirmationNames( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void *type metadata accessor for ShortcutsLinkPromptForActionConfirmationFlowStrategy.ConfirmationNames()
{
  return &unk_1FCA58;
}

uint64_t OUTLINED_FUNCTION_4_41()
{
  return (*(uint64_t (**)(void, void))(v0[43] + 8LL))(v0[44], v0[42]);
}

void OUTLINED_FUNCTION_18_32()
{
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_55_19()
{
  return outlined copy of Data?(v0, v1);
}

uint64_t WorkflowMacSnippetProvider.buildSnippetForShowAlert(dialogRequest:shortcutName:appBundleId:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v6[4] = a5;
  v6[5] = v5;
  _OWORD v6[2] = a1;
  v6[3] = a4;
  uint64_t v7 = type metadata accessor for ImageSize(0LL);
  v6[6] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[7] = v8;
  v6[8] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( WorkflowMacSnippetProvider.buildSnippetForShowAlert(dialogRequest:shortcutName:appBundleId:),  0LL,  0LL);
}

uint64_t WorkflowMacSnippetProvider.buildSnippetForShowAlert(dialogRequest:shortcutName:appBundleId:)()
{
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v6 = *(void **)(v0 + 16);
  outlined bridged method (pb) of @objc WFShowAlertDialogRequest.message.getter(v6);
  uint64_t v8 = v7;
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for ImageSize.original(_:), v3);
  uint64_t v9 = OUTLINED_FUNCTION_2_36();
  uint64_t v10 = (void *)OUTLINED_FUNCTION_0_45(v9, v8, v1);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  id v11 = [v6 okButton];
  id v12 = [v11 title];

  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  uint64_t v16 = (void *)WorkflowMacSnippetProvider.buildCardSectionForButton(title:confirmation:appBundleId:)( v13,  v15,  0,  v5,  v4);
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  id v19 = [v6 cancelButton];
  if (v19)
  {
    uint64_t v20 = v19;
    id v21 = [v19 title];

    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;
  }

  else
  {
    uint64_t v22 = 0LL;
    uint64_t v24 = 0xE000000000000000LL;
  }

  uint64_t v44 = *(void *)(v0 + 40);
  uint64_t v25 = (void *)WorkflowMacSnippetProvider.buildCardSectionForButton(title:confirmation:appBundleId:)( v22,  v24,  2,  *(void *)(v0 + 24),  *(void *)(v0 + 32));
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v29 = OUTLINED_FUNCTION_19(v28, 56LL);
  *(_OWORD *)(v29 + 16) = xmmword_1897D0;
  *(void *)(v29 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v10;
  *(void *)(v29 + 40) = v16;
  *(void *)(v29 + 48) = v25;
  OUTLINED_FUNCTION_56_20(v29, v30, v31);
  type metadata accessor for NSError( 0LL,  &lazy cache variable for type metadata for SACardSnippet,  &OBJC_CLASS___SACardSnippet_ptr);
  id v32 = v10;
  id v33 = v16;
  id v34 = v25;
  uint64_t v35 = (void *)static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:)(v45);
  swift_bridgeObjectRelease();
  uint64_t v36 = OUTLINED_FUNCTION_19(v28, 48LL);
  *(_OWORD *)(v36 + 16) = xmmword_17E670;
  *(void *)(v36 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v18;
  *(void *)(v36 + 40) = v27;
  OUTLINED_FUNCTION_56_20(v36, v37, v38);
  swift_unknownObjectRetain(v18);
  swift_unknownObjectRetain(v27);
  outlined bridged method (mbnn) of @objc SACardSnippet.referencedCommands.setter();
  type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
  id v39 = v35;
  Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  [v39 setListenAfterSpeaking:isa];

  [v39 setCanUseServerTTS:0];
  type metadata accessor for SiriKitAceViewBuilder(0LL);
  dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)(v44 + 16);
  dispatch thunk of SiriKitAceViewBuilder.addSnippet(snippet:)(v39);
  uint64_t v41 = swift_release();
  uint64_t v42 = dispatch thunk of SiriKitAceViewBuilder.build()(v41);
  swift_release();

  swift_unknownObjectRelease(v27);
  swift_unknownObjectRelease(v18);

  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v42);
}

uint64_t WorkflowMacSnippetProvider.buildCardSectionForButton(title:confirmation:appBundleId:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for ImageSize(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v25[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for ImageSize.original(_:), v9);
  uint64_t v13 = OUTLINED_FUNCTION_2_36();
  uint64_t v14 = OUTLINED_FUNCTION_0_45(v13, a2, (uint64_t)v12);
  uint64_t v15 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  static Device.current.getter(v25, v15);
  id v16 = static SLFConfirmationItemConverter.toDirectInvocationCommand(confirmation:appBundleId:deviceState:)( a3,  a4,  a5,  v25);
  __swift_destroy_boxed_opaque_existential_1Tm(v25);
  id v17 = v16;
  uint64_t v18 = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();

  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v20 = OUTLINED_FUNCTION_19(v19, 40LL);
  *(_OWORD *)(v20 + 16) = xmmword_17E150;
  *(void *)(v20 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v18;
  v25[0] = v20;
  specialized Array._endMutation()(v20, v21, v22);
  outlined bridged method (mbnn) of @objc SFCardSection.commands.setter(v25[0]);
  return v14;
}

uint64_t type metadata accessor for WorkflowMacSnippetProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin26WorkflowMacSnippetProvider);
}

uint64_t OUTLINED_FUNCTION_0_45(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static CasinoFactory.makeRowCardSection(possibleTitle:imageSize:possibleLeadingSubtitle:possibleTrailingSubtitle:possibleImage:possibleMonogramLetters:possibleContactIdentifiers:possibleImageUri:maxLines:shouldCropToCircle:)( a1,  a2,  a3,  0LL,  0LL,  0LL,  0LL,  0LL);
}

uint64_t OUTLINED_FUNCTION_2_36()
{
  return v0;
}

void AutoShortcutsSetEnablementFlow.__allocating_init(deviceState:outputPublisher:linkActionPatterns:autoShortcutCATs:autoShortcutCATsSimple:voiceShortcutsClient:provider:appNameResolver:preferences:userDefaults:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22)
{
  uint64_t v28 = v27;
  unint64_t v53 = v29;
  uint64_t v54 = v30;
  uint64_t v51 = v31;
  uint64_t v52 = v32;
  uint64_t v49 = v33;
  uint64_t v50 = v34;
  uint64_t v48 = v35;
  uint64_t v36 = swift_allocObject(v22, 353LL, 7LL);
  uint64_t v37 = v28[3];
  uint64_t v38 = v28[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v28, v37);
  OUTLINED_FUNCTION_66_0();
  __chkstk_darwin(v39);
  uint64_t v41 = OUTLINED_FUNCTION_82(v40, v46);
  v42(v41);
  OUTLINED_FUNCTION_185_0();
  OUTLINED_FUNCTION_66_0();
  __chkstk_darwin(v43);
  OUTLINED_FUNCTION_50_8(v44, v45, v47);
  specialized AutoShortcutsSetEnablementFlow.init(deviceState:outputPublisher:linkActionPatterns:autoShortcutCATs:autoShortcutCATsSimple:voiceShortcutsClient:provider:appNameResolver:preferences:userDefaults:)( v48,  v49,  v50,  v51,  v52,  v53,  v54,  v23,  a21,  v25,  v36,  v24,  v37,  v26,  v38);
  __swift_destroy_boxed_opaque_existential_1Tm(a22);
  __swift_destroy_boxed_opaque_existential_1Tm(v28);
  OUTLINED_FUNCTION_24_0();
}

void *key path getter for AutoShortcutsSetEnablementFlow.state : AutoShortcutsSetEnablementFlow@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(**(void **)a1 + 168LL))(__src);
  return outlined init with take of AutoShortcutsSetEnablementFlow.State(__src, a2);
}

uint64_t key path setter for AutoShortcutsSetEnablementFlow.state : AutoShortcutsSetEnablementFlow( uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  unsigned __int8 v10 = *(_BYTE *)(a1 + 64);
  uint64_t v11 = *a2;
  swift_beginAccess(*a2 + 288, v22, 1LL, 0LL);
  uint64_t v20 = *(void *)(v11 + 296);
  uint64_t v21 = *(void *)(v11 + 288);
  uint64_t v18 = *(void *)(v11 + 312);
  uint64_t v19 = *(void *)(v11 + 304);
  uint64_t v16 = *(void *)(v11 + 328);
  uint64_t v17 = *(void *)(v11 + 320);
  uint64_t v14 = *(void *)(v11 + 344);
  uint64_t v15 = *(void *)(v11 + 336);
  *(void *)(v11 + 288) = v2;
  *(void *)(v11 + 296) = v3;
  *(void *)(v11 + 304) = v4;
  *(void *)(v11 + 31__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v5;
  *(void *)(v11 + 320) = v6;
  *(void *)(v11 + 328) = v7;
  *(void *)(v11 + 336) = v8;
  *(void *)(v11 + 344) = v9;
  *(_BYTE *)(v11 + 35__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v10;
  outlined copy of AutoShortcutsSetEnablementFlow.State(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return outlined consume of AutoShortcutsSetEnablementFlow.State(v21, v20, v19, v18, v17, v16, v15, v14, v13);
}

uint64_t AutoShortcutsSetEnablementFlow.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 288);
  uint64_t v4 = *(void *)(v1 + 296);
  uint64_t v5 = *(void *)(v1 + 304);
  uint64_t v6 = *(void *)(v1 + 312);
  uint64_t v7 = *(void *)(v1 + 320);
  uint64_t v8 = *(void *)(v1 + 328);
  uint64_t v9 = *(void *)(v1 + 336);
  uint64_t v10 = *(void *)(v1 + 344);
  unsigned __int8 v11 = *(_BYTE *)(v1 + 352);
  uint64_t result = outlined copy of AutoShortcutsSetEnablementFlow.State(v3, v4, v5, v6, v7, v8, v9, v10, v11);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = v6;
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  return result;
}

void static AutoShortcutsSetEnablementFlow.State.__derived_enum_equals(_:_:)(void *a1)
{
  __asm { BR              X10 }

uint64_t sub_11A36C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 __dst, __int128 a13, __int128 a14, __int128 a15, char a16, uint64_t a17, uint64_t a18, __int128 a19, __int128 a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
  char v50 = v38 & 0x1F;
  uint64_t v39 = v48;
  uint64_t v40 = v49;
  outlined init with take of AutoShortcutsSetEnablementFlow.State(v36, &v44);
  if (v47 <= 0x1Fu && v44 == v37)
  {
    if (v39 == v45 && v40 == v46) {
      char v42 = 1;
    }
    else {
      char v42 = OUTLINED_FUNCTION_167(v39, v40, v45, v46);
    }
  }

  else
  {
    char v42 = 0;
  }

  return v42 & 1;
}

uint64_t specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  unint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  uint64_t result = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  if (result != v7 || v6 != v8)
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(result, v6, v7, v8, 0LL);
    uint64_t result = 0LL;
    if ((v10 & 1) == 0) {
      return result;
    }
  }

  if (v2 == 1) {
    return 1LL;
  }
  unsigned __int8 v11 = a1 + 7;
  id v12 = a2 + 7;
  unint64_t v13 = 1LL;
  while (v13 < v2)
  {
    uint64_t result = *(v11 - 1);
    uint64_t v14 = *v11;
    uint64_t v15 = *(v12 - 1);
    uint64_t v16 = *v12;
    if (result != v15 || v14 != v16)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v14, v15, v16, 0LL);
      if ((result & 1) == 0) {
        return 0LL;
      }
    }

    ++v13;
    v11 += 2;
    v12 += 2;
    if (v2 == v13) {
      return 1LL;
    }
  }

  __break(1u);
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutsSetEnablementFlow.State( void *a1, void *a2)
{
  return v3 & 1;
}

void AutoShortcutsSetEnablementFlow.init(deviceState:outputPublisher:linkActionPatterns:autoShortcutCATs:autoShortcutCATsSimple:voiceShortcutsClient:provider:appNameResolver:preferences:userDefaults:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22)
{
  uint64_t v50 = v22;
  uint64_t v51 = v27;
  uint64_t v29 = (void *)v28;
  unint64_t v53 = v30;
  uint64_t v54 = v31;
  uint64_t v52 = v32;
  uint64_t v48 = v33;
  uint64_t v49 = v34;
  uint64_t v36 = v35;
  uint64_t v38 = *(void *)(v28 + 24);
  uint64_t v37 = *(void *)(v28 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v28, v38);
  OUTLINED_FUNCTION_66_0();
  __chkstk_darwin(v39);
  uint64_t v41 = OUTLINED_FUNCTION_82(v40, v46);
  v42(v41);
  OUTLINED_FUNCTION_185_0();
  OUTLINED_FUNCTION_66_0();
  __chkstk_darwin(v43);
  OUTLINED_FUNCTION_50_8(v44, v45, v47);
  specialized AutoShortcutsSetEnablementFlow.init(deviceState:outputPublisher:linkActionPatterns:autoShortcutCATs:autoShortcutCATsSimple:voiceShortcutsClient:provider:appNameResolver:preferences:userDefaults:)( v36,  v48,  v49,  v51,  v52,  v53,  v54,  v23,  a21,  v25,  v50,  v24,  v38,  v26,  v37);
  __swift_destroy_boxed_opaque_existential_1Tm(a22);
  __swift_destroy_boxed_opaque_existential_1Tm(v29);
  OUTLINED_FUNCTION_24_0();
}

void AutoShortcutsSetEnablementFlow.on(input:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v21;
  a20 = v22;
  uint64_t v23 = v20;
  uint64_t v25 = v24;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VoiceCommandTask?);
  __chkstk_darwin(v26);
  OUTLINED_FUNCTION_35();
  uint64_t v29 = v28 - v27;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  __chkstk_darwin(v30);
  OUTLINED_FUNCTION_35();
  uint64_t v33 = v32 - v31;
  uint64_t v34 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  OUTLINED_FUNCTION_20_14(v34, (uint64_t)&v83);
  OUTLINED_FUNCTION_133_2(v35);
  __chkstk_darwin(v36);
  OUTLINED_FUNCTION_83();
  uint64_t v38 = OUTLINED_FUNCTION_134_4(v37);
  uint64_t v39 = type metadata accessor for Siri_Nlu_External_UserDialogAct(v38);
  OUTLINED_FUNCTION_20_14(v39, (uint64_t)&a9);
  OUTLINED_FUNCTION_133_2(v40);
  __chkstk_darwin(v41);
  OUTLINED_FUNCTION_83();
  uint64_t v43 = OUTLINED_FUNCTION_134_4(v42);
  uint64_t v44 = type metadata accessor for Parse(v43);
  OUTLINED_FUNCTION_20_14(v44, (uint64_t)&a13);
  OUTLINED_FUNCTION_133_2(v45);
  uint64_t v47 = __chkstk_darwin(v46);
  uint64_t v76 = (char *)v74 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v47);
  uint64_t v50 = OUTLINED_FUNCTION_134_4((uint64_t)v74 - v49);
  uint64_t v51 = type metadata accessor for USOParse(v50);
  OUTLINED_FUNCTION_20_14(v51, (uint64_t)&a18);
  OUTLINED_FUNCTION_133_2(v52);
  __chkstk_darwin(v53);
  OUTLINED_FUNCTION_83();
  uint64_t v55 = OUTLINED_FUNCTION_134_4(v54);
  uint64_t v56 = type metadata accessor for Input(v55);
  uint64_t v57 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  OUTLINED_FUNCTION_35();
  uint64_t v60 = v59 - v58;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v61 = OUTLINED_FUNCTION_48();
  uint64_t v62 = __swift_project_value_buffer(v61, (uint64_t)static Logger.voiceCommands);
  uint64_t v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 16);
  uint64_t v78 = v25;
  v63(v60, v25, v56);
  uint64_t v64 = (os_log_s *)OUTLINED_FUNCTION_210_0();
  os_log_type_t v65 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v64, v65))
  {
    uint64_t v66 = OUTLINED_FUNCTION_38(12LL);
    v74[1] = v29;
    unint64_t v67 = (uint8_t *)v66;
    uint64_t v68 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v75 = v23;
    uint64_t v69 = v68;
    v81[0] = v68;
    uint64_t v77 = v62;
    *(_DWORD *)unint64_t v67 = 136315138;
    v74[0] = v33;
    uint64_t v70 = Input.description.getter(v68);
    uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v71, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v67 + 4);
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_173_0();
    OUTLINED_FUNCTION_31_2(&dword_0, v64, v65, "#AutoShortcutsSetEnablementFlow on input: %s", v67);
    OUTLINED_FUNCTION_30_3(v69, v72, (uint64_t)&type metadata for Any + 8);
    uint64_t v73 = v69;
    uint64_t v23 = v75;
    OUTLINED_FUNCTION_1_0(v73);
    OUTLINED_FUNCTION_1_0((uint64_t)v67);
  }

  else
  {
    OUTLINED_FUNCTION_173_0();
  }

  (*(void (**)(uint64_t *__return_ptr))(*(void *)v23 + 168LL))(&v79);
  outlined init with take of AutoShortcutsSetEnablementFlow.State(&v79, v81);
  __asm { BR              X12 }

uint64_t AutoShortcutsSetEnablementFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 184) = a1;
  *(void *)(v2 + 19__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)AutoShortcutsSetEnablementFlow.execute());
}

void AutoShortcutsSetEnablementFlow.execute()()
{
  __asm { BR              X11 }

uint64_t sub_11B124@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v1 + 80) = a1 & 0x1F;
  uint64_t v2 = (void *)swift_task_alloc(dword_21CA5C);
  *(void *)(v1 + 200) = v2;
  *uint64_t v2 = v1;
  v2[1] = AutoShortcutsSetEnablementFlow.execute();
  OUTLINED_FUNCTION_80_9();
  return AutoShortcutsSetEnablementFlow.executeIntentReceived(mode:appId:)(v3, v4, v5, v6);
}

uint64_t sub_11B178@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v4 + 80) = a1 & 0x1F;
  outlined release of AutoShortcutsSetEnablementFlow.State((uint64_t)v3);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v6 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v6, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v7 = OUTLINED_FUNCTION_213_0();
  if (OUTLINED_FUNCTION_109_5(v7))
  {
    uint64_t v8 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    OUTLINED_FUNCTION_43_5(v8);
    OUTLINED_FUNCTION_1_0((uint64_t)v5);
  }

  uint64_t v9 = *(void *)(v4 + 192);

  OUTLINED_FUNCTION_13_30(v9 + 288, v1);
  uint64_t v10 = *(void *)(v9 + 288);
  uint64_t v11 = *(void *)(v9 + 296);
  uint64_t v12 = *(void *)(v9 + 304);
  uint64_t v13 = *(void *)(v9 + 312);
  uint64_t v14 = *(void *)(v9 + 320);
  uint64_t v15 = *(void *)(v9 + 328);
  uint64_t v16 = *(void *)(v9 + 336);
  uint64_t v17 = *(void *)(v9 + 344);
  unsigned __int8 v18 = *(_BYTE *)(v9 + 352);
  *(_OWORD *)(v9 + 288) = 0u;
  *(_OWORD *)(v9 + 304) = 0u;
  *(_OWORD *)(v9 + 320) = 0u;
  *(_OWORD *)(v9 + 336) = 0u;
  *(_BYTE *)(v9 + 35outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 96;
  OUTLINED_FUNCTION_42_20(v10, v11, v12, v13, v14, v15, v16, v17, v18);
  OUTLINED_FUNCTION_100_4();
  OUTLINED_FUNCTION_80_9();
  return v19();
}

uint64_t AutoShortcutsSetEnablementFlow.execute()()
{
  uint64_t v2 = v1 + 88;
  OUTLINED_FUNCTION_3_0(*(void *)(v1 + 200));
  outlined release of AutoShortcutsSetEnablementFlow.State(v2);
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v1 + 240));
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_20();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = OUTLINED_FUNCTION_206_0();
  OUTLINED_FUNCTION_3_0(v1);
  OUTLINED_FUNCTION_20();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AutoShortcutsSetEnablementFlow.executeIntentReceived(mode:appId:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 104) = a4;
  *(void *)(v5 + 11outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v4;
  *(_BYTE *)(v5 + 240) = a2;
  *(void *)(v5 + 88) = a1;
  *(void *)(v5 + 96) = a3;
  *(void *)(v5 + 120) = *v4;
  *(void *)(v5 + 128) = type metadata accessor for AutoShortcutFirstRunFlow();
  uint64_t v8 = (void *)swift_task_alloc(dword_21AA7C);
  *(void *)(v5 + 136) = v8;
  OUTLINED_FUNCTION_17_9(v8, (uint64_t)AutoShortcutsSetEnablementFlow.executeIntentReceived(mode:appId:));
  return static AutoShortcutFirstRunFlow.isAutoShortcutsEnabledFor(bundleId:voiceShortcutsClient:)( a3,  a4,  (uint64_t)(v4 + 14));
}

uint64_t AutoShortcutsSetEnablementFlow.executeIntentReceived(mode:appId:)()
{
  *(_BYTE *)(v1 + 241) = v0;
  OUTLINED_FUNCTION_54_0(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  OUTLINED_FUNCTION_42_1();
  *(void *)(v1 + 176) = v0;
  *(_BYTE *)(v1 + 24outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v2;
  OUTLINED_FUNCTION_54_0(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;
  os_log_type_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t (*v22)(uint64_t);
  if ((*(_BYTE *)(v2 + 242) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v6 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v6, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v7 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_45_0(v7))
    {
      uint64_t v8 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_26_1(v8);
      OUTLINED_FUNCTION_27_0( &dword_0,  v9,  v10,  "#AutoShortcutsSetEnablementFlow: failed to determine app's appShortcut phrases");
      OUTLINED_FUNCTION_1_0(v1);
    }

    uint64_t v11 = *(unsigned __int8 *)(v2 + 176);
    uint64_t v12 = *(void *)(v2 + 112);

    OUTLINED_FUNCTION_13_30(v12 + 288, v2 + 64);
    OUTLINED_FUNCTION_149_3();
    *(void *)(v12 + 288) = v11;
    *(_OWORD *)(v12 + 296) = 0u;
    *(_OWORD *)(v12 + 31outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0u;
    *(_OWORD *)(v12 + 328) = 0u;
    *(void *)(v12 + 344) = 0LL;
    *(_BYTE *)(v12 + 35outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 96;
    OUTLINED_FUNCTION_42_20(v13, v14, v15, v16, v17, v18, v19, v20, v21);
    OUTLINED_FUNCTION_103_4();
    return OUTLINED_FUNCTION_20_7(*(uint64_t (**)(void))(v2 + 8));
  }

  else
  {
    uint64_t v3 = *(void *)(*(void *)(v2 + 176) + 16LL);
    uint64_t v4 = (void *)OUTLINED_FUNCTION_58_15(*(void *)(**(void **)(v2 + 160) + 248LL));
    *(void *)(v2 + 184) = v4;
    *uint64_t v4 = v2;
    v4[1] = AutoShortcutsSetEnablementFlow.executeIntentReceived(mode:appId:);
    return v22(v3);
  }

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v1 + 208));
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  return OUTLINED_FUNCTION_22_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v1 + 232));
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  return OUTLINED_FUNCTION_22_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AutoShortcutsSetEnablementFlow.executeIntentReceived(mode:appId:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v13 = *(unsigned __int8 *)(v11 + 241);
  if (v13 == 2)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v14 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v14, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v15 = OUTLINED_FUNCTION_213_0();
    if (OUTLINED_FUNCTION_109_5(v15))
    {
      uint64_t v16 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_43_5(v16);
      OUTLINED_FUNCTION_47_1( &dword_0,  v10,  v9,  "#AutoShortcutsSetEnablementFlow: failed to determine if app already has appShortcuts enabled",  (uint8_t *)v12);
      OUTLINED_FUNCTION_1_0(v12);
    }

    OUTLINED_FUNCTION_198_0();
    uint64_t v17 = v12 + 288;
    OUTLINED_FUNCTION_13_30(v12 + 288, v11 + 16);
    uint64_t v18 = OUTLINED_FUNCTION_118_7();
    uint64_t v27 = 3LL;
LABEL_17:
    *(void *)(v12 + 288) = v27;
    *(_OWORD *)(v17 + 8) = 0u;
    *(_OWORD *)(v17 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = 0u;
    *(_OWORD *)(v17 + 40) = 0u;
    OUTLINED_FUNCTION_37_25(v18, v19, v20, v21, v22, v23, v24, v25, v26);
    OUTLINED_FUNCTION_100_4();
    return OUTLINED_FUNCTION_39_5(*(uint64_t (**)(void))(v11 + 8));
  }

  uint64_t v28 = *(void *)(v11 + 128);
  uint64_t v30 = *(void *)(v11 + 104);
  uint64_t v29 = *(void **)(v11 + 112);
  uint64_t v31 = *(os_log_s **)(v11 + 96);
  uint64_t v12 = v29[27];
  uint64_t v32 = v29[28];
  uint64_t v33 = __swift_project_boxed_opaque_existential_1(v29 + 24, v12);
  *(void *)(v11 + 144) = specialized static AutoShortcutFirstRunFlow.getAppName(bundleId:appNameResolver:)( (uint64_t)v31,  v30,  (uint64_t)v33,  v28,  v12,  v32);
  *(void *)(v11 + 15outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v34;
  if (!v34)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v42 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v42, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v43 = OUTLINED_FUNCTION_213_0();
    if (OUTLINED_FUNCTION_109_5(v43))
    {
      uint64_t v44 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_43_5(v44);
      OUTLINED_FUNCTION_47_1( &dword_0,  v31,  (os_log_type_t)v28,  "#AutoShortcutsSetEnablementFlow: failed to determine app name",  (uint8_t *)v12);
      OUTLINED_FUNCTION_1_0(v12);
    }

    OUTLINED_FUNCTION_198_0();
    uint64_t v17 = v12 + 288;
    OUTLINED_FUNCTION_13_30(v12 + 288, v11 + 40);
    uint64_t v18 = OUTLINED_FUNCTION_118_7();
    uint64_t v27 = 4LL;
    goto LABEL_17;
  }

  if (!*(_BYTE *)(v11 + 240)) {
    goto LABEL_19;
  }
  uint64_t v35 = v34;
  if (*(_BYTE *)(v11 + 240) == 1)
  {
    if ((*(_BYTE *)(v11 + 241) & 1) == 0)
    {
      *(void *)(v11 + 216) = _swiftEmptyArrayStorage;
      *(void *)(v11 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = 0LL;
      uint64_t v36 = (void *)swift_task_alloc(dword_21CACC);
      *(void *)(v11 + 23outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v36;
      uint64_t v37 = OUTLINED_FUNCTION_145_4(v36);
      return AutoShortcutsSetEnablementFlow.publishChangeNotNeeded(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:)( v37,  0LL,  v38,  v39,  v40,  v35,  (uint64_t)_swiftEmptyArrayStorage,  0LL,  a9);
    }

    char v53 = 0;
    goto LABEL_22;
  }

  if ((v13 & 1) == 0)
  {
LABEL_19:
    uint64_t v45 = *(void *)(v11 + 112);
    uint64_t v46 = v45 + 16;
    uint64_t v47 = v45 + 152;
    uint64_t v48 = *(void *)(v45 + 232);
    uint64_t v49 = *(void *)(v45 + 96);
    *(void *)(v11 + 160) = v49;
    uint64_t v50 = (void *)swift_task_alloc(dword_21CA64);
    *(void *)(v11 + 168) = v50;
    *uint64_t v50 = v11;
    v50[1] = AutoShortcutsSetEnablementFlow.executeIntentReceived(mode:appId:);
    uint64_t v51 = OUTLINED_FUNCTION_178_0(*(void *)(v11 + 96));
    return static AutoShortcutsSetEnablementFlow.prepareAppShortcutPhrases(appId:deviceState:provider:preferences:dialogTemplating:)( v51,  v52,  v46,  v47,  v48,  v49);
  }

  char v53 = (*(_BYTE *)(v11 + 241) & 1) == 0;
LABEL_22:
  *(void *)(v11 + 19outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = _swiftEmptyArrayStorage;
  *(void *)(v11 + 200) = 0LL;
  uint64_t v54 = (void *)swift_task_alloc(dword_21CAAC);
  *(void *)(v11 + 208) = v54;
  uint64_t v55 = OUTLINED_FUNCTION_145_4(v54);
  return AutoShortcutsSetEnablementFlow.publishConfirmation(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)( v55,  v53,  v56,  v57,  v58,  v35,  (uint64_t)_swiftEmptyArrayStorage,  0LL,  a9);
}

{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v13 = *v10;
  swift_task_dealloc();
  if (v9)
  {
    swift_errorRelease(v9);
    a1 = 0LL;
    a2 = 0LL;
  }

  if (*(_BYTE *)(v13 + 240))
  {
    if (*(_BYTE *)(v13 + 240) == 1)
    {
      uint64_t v14 = 0;
      os_log_type_t v15 = 0LL;
      uint64_t v16 = *(void *)(v13 + 176);
      if ((*(_BYTE *)(v13 + 241) & 1) != 0) {
        goto LABEL_10;
      }
LABEL_8:
      *(void *)(v13 + 216) = v16;
      *(void *)(v13 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = a2;
      uint64_t v17 = *(void *)(v13 + 152);
      uint64_t v18 = (void *)swift_task_alloc(dword_21CACC);
      *(void *)(v13 + 23outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v18;
      uint64_t v19 = OUTLINED_FUNCTION_174_0(v18, (uint64_t)AutoShortcutsSetEnablementFlow.executeIntentReceived(mode:appId:));
      return AutoShortcutsSetEnablementFlow.publishChangeNotNeeded(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:)( v19,  v15,  v20,  v21,  v22,  v17,  v16,  a1,  a9);
    }

    uint64_t v16 = *(void *)(v13 + 176);
    uint64_t v14 = (*(_BYTE *)(v13 + 241) & 1) == 0;
  }

  else
  {
    uint64_t v16 = *(void *)(v13 + 176);
    uint64_t v14 = 1;
    os_log_type_t v15 = 1LL;
    if ((*(_BYTE *)(v13 + 241) & 1) != 0) {
      goto LABEL_8;
    }
  }

uint64_t static AutoShortcutsSetEnablementFlow.prepareAppShortcutPhrases(appId:deviceState:provider:preferences:dialogTemplating:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = a5;
  v6[9] = a6;
  v6[6] = a3;
  v6[7] = a4;
  void v6[4] = a1;
  v6[5] = a2;
  return OUTLINED_FUNCTION_6_2((uint64_t)static AutoShortcutsSetEnablementFlow.prepareAppShortcutPhrases(appId:deviceState:provider:preferences:dialogTemplating:));
}

uint64_t static AutoShortcutsSetEnablementFlow.prepareAppShortcutPhrases(appId:deviceState:provider:preferences:dialogTemplating:)()
{
  if (!DeviceState.canOutputAppShortcutPhrases()()) {
    return (*(uint64_t (**)(void *, void))(v0 + 8))(_swiftEmptyArrayStorage, 0LL);
  }
  uint64_t v1 = (void *)swift_task_alloc(dword_2154C4);
  *(void *)(v0 + 80) = v1;
  *uint64_t v1 = v0;
  v1[1] = static AutoShortcutsSetEnablementFlow.prepareAppShortcutPhrases(appId:deviceState:provider:preferences:dialogTemplating:);
  uint64_t v2 = OUTLINED_FUNCTION_178_0(*(void *)(v0 + 32));
  return static AutoShortcutInvocation.getAutoShortcuts(bundleId:provider:preferences:baseTemplatePhrase:)( v2,  v3,  v4,  v5,  0LL,  0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_42_1();
  *(void *)(v1 + 88) = v0;
  OUTLINED_FUNCTION_54_0(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 120);
  swift_bridgeObjectRelease(*(void *)(v0 + 96));
  return (*(uint64_t (**)(uint64_t, void))(v0 + 8))(v1, 0LL);
}

void static AutoShortcutsSetEnablementFlow.prepareAppShortcutPhrases(appId:deviceState:provider:preferences:dialogTemplating:)()
{
  unint64_t v2 = *(void *)(v1 + 88);
  if (v2 >> 62)
  {
LABEL_27:
    OUTLINED_FUNCTION_66_14();
    uint64_t v0 = OUTLINED_FUNCTION_191_0();
    if (v0) {
      goto LABEL_3;
    }
  }

  else
  {
    OUTLINED_FUNCTION_208_0();
    OUTLINED_FUNCTION_17_1();
    if (v0)
    {
LABEL_3:
      if (v0 >= 1)
      {
        uint64_t v3 = 0LL;
        v2 &= 0xC000000000000001LL;
        uint64_t v35 = *(void *)(v1 + 88) + 32LL;
        uint64_t v4 = _swiftEmptyArrayStorage;
        while (1)
        {
          if (v2) {
            id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, *(void *)(v1 + 88));
          }
          else {
            id v5 = *(id *)(v35 + 8 * v3);
          }
          uint64_t v6 = v5;
          id v7 = [v5 orderedPhrases];
          uint64_t v8 = type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for LNAutoShortcutLocalizedPhrase,  &OBJC_CLASS___LNAutoShortcutLocalizedPhrase_ptr);
          uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

          if ((unint64_t)v9 >> 62)
          {
            if (v9 < 0) {
              uint64_t v18 = v9;
            }
            else {
              uint64_t v18 = v9 & 0xFFFFFFFFFFFFFF8LL;
            }
            OUTLINED_FUNCTION_28_8();
            uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v18);
            OUTLINED_FUNCTION_28_4();
            if (!v19)
            {
LABEL_22:
              OUTLINED_FUNCTION_28_4();

              goto LABEL_23;
            }
          }

          else if (!*(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8LL)))
          {
            goto LABEL_22;
          }

          if ((v9 & 0xC000000000000001LL) != 0)
          {
            id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v9);
          }

          else
          {
            if (!*(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8LL)))
            {
              __break(1u);
              goto LABEL_27;
            }

            id v10 = *(id *)(v9 + 32);
          }

          uint64_t v11 = v10;
          OUTLINED_FUNCTION_28_4();
          id v12 = [v11 localizedPhrase];

          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;

          if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
          {
            OUTLINED_FUNCTION_201();
            uint64_t v4 = v20;
          }

          unint64_t v16 = v4[2];
          if (v16 >= v4[3] >> 1)
          {
            OUTLINED_FUNCTION_201();
            uint64_t v4 = v21;
          }

          v4[2] = v16 + 1;
          uint64_t v17 = &v4[2 * v16];
          _OWORD v17[4] = v13;
          v17[5] = v15;
LABEL_23:
          if (v0 == ++v3) {
            goto LABEL_29;
          }
        }
      }

      __break(1u);
      goto LABEL_37;
    }
  }

  uint64_t v4 = _swiftEmptyArrayStorage;
LABEL_29:
  *(void *)(v1 + 96) = v4;
  OUTLINED_FUNCTION_19_1(*(void *)(v1 + 88));
  if (v4[2])
  {
    uint64_t v22 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(**(void **)(v1 + 72) + 288LL));
    *(void *)(v1 + 104) = v22;
    *uint64_t v22 = v1;
    v22[1] = static AutoShortcutsSetEnablementFlow.prepareAppShortcutPhrases(appId:deviceState:provider:preferences:dialogTemplating:);
    OUTLINED_FUNCTION_24_7();
    __asm { BR              X1 }
  }

  OUTLINED_FUNCTION_1_2();
  if (one-time initialization token for voiceCommands == -1)
  {
LABEL_32:
    uint64_t v24 = *(os_log_s **)(v1 + 40);
    uint64_t v25 = OUTLINED_FUNCTION_48();
    os_log_type_t v26 = __swift_project_value_buffer(v25, (uint64_t)static Logger.voiceCommands);
    swift_bridgeObjectRetain_n(v24, 2LL);
    OUTLINED_FUNCTION_66();
    os_log_type_t v27 = OUTLINED_FUNCTION_73();
    BOOL v28 = OUTLINED_FUNCTION_45_0(v27);
    unint64_t v29 = *(void *)(v1 + 40);
    if (v28)
    {
      uint64_t v30 = *(void *)(v1 + 32);
      uint64_t v31 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v32 = OUTLINED_FUNCTION_38(32LL);
      uint64_t v36 = v32;
      *(_DWORD *)uint64_t v31 = 136315138;
      OUTLINED_FUNCTION_9_4();
      *(void *)(v1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v29, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v31 + 4);
      swift_bridgeObjectRelease_n(v29, 3LL);
      OUTLINED_FUNCTION_31_2( &dword_0,  v24,  v26,  "#AutoShortcutsSetEnablementFlow failed to get appShortcutPhrases for appId=%s",  v31);
      OUTLINED_FUNCTION_30_3(v32, v33, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v32);
      OUTLINED_FUNCTION_1_0((uint64_t)v31);
    }

    else
    {
      OUTLINED_FUNCTION_19_1(*(void *)(v1 + 40));
    }

    OUTLINED_FUNCTION_24_7();
    __asm { BR              X2 }
  }

uint64_t static AutoShortcutsSetEnablementFlow.prepareAppShortcutPhrases(appId:deviceState:provider:preferences:dialogTemplating:)( uint64_t a1)
{
  uint64_t v9 = *v2;
  uint64_t v4 = v9;
  OUTLINED_FUNCTION_10_0(&v9);
  *(void *)(v4 + 11outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v1;
  swift_task_dealloc();
  if (v1) {
    swift_bridgeObjectRelease();
  }
  else {
    *(void *)(v4 + 120) = a1;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_11_26(v5, v6, v7);
}

uint64_t static AutoShortcutsSetEnablementFlow.prepareAppShortcutPhrases(appId:deviceState:provider:preferences:dialogTemplating:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v13 = *(void **)(v12 + 112);
  uint64_t v14 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_35_27(v14, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_28_7();
  OUTLINED_FUNCTION_66();
  os_log_type_t v15 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_23_7(v15))
  {
    uint64_t v16 = OUTLINED_FUNCTION_38(12LL);
    uint64_t v17 = (void *)OUTLINED_FUNCTION_38(8LL);
    OUTLINED_FUNCTION_18_28(5.7779e-34);
    uint64_t v18 = OUTLINED_FUNCTION_89_10();
    *(void *)(v12 + 16) = v18;
    OUTLINED_FUNCTION_9_35(v18, v12 + 24);
    *uint64_t v17 = v18;
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_16_35(&dword_0, v19, v20, "#AutoShortcutsSetEnablementFlow error handling appShortcutPhrases; %@");
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_32_20(v21);
    OUTLINED_FUNCTION_1_0((uint64_t)v17);
    OUTLINED_FUNCTION_1_0(v16);

    OUTLINED_FUNCTION_4_8();
  }

  else
  {
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  OUTLINED_FUNCTION_47_0();
  return v24(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12);
}

uint64_t AutoShortcutsSetEnablementFlow.executeIntentConfirmed(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 144) = v15;
  *(void *)(v9 + 15outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v8;
  *(void *)(v9 + 128) = a7;
  *(void *)(v9 + 136) = a8;
  *(void *)(v9 + 11outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = a5;
  *(void *)(v9 + 120) = a6;
  *(void *)(v9 + 96) = a3;
  *(void *)(v9 + 104) = a4;
  *(_BYTE *)(v9 + 180) = a2;
  *(void *)(v9 + 88) = a1;
  type metadata accessor for AutoShortcutFirstRunFlow();
  uint64_t v13 = (void *)swift_task_alloc(dword_21AA44);
  *(void *)(v9 + 160) = v13;
  OUTLINED_FUNCTION_17_9( v13,  (uint64_t)AutoShortcutsSetEnablementFlow.executeIntentConfirmed(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:));
  return static AutoShortcutFirstRunFlow.setSiriAutoShortcutsEnablement(isEnable:bundleId:voiceShortcutsClient:userDefaults:)( a2,  a3,  a4,  v8 + 112,  v8 + 240);
}

uint64_t AutoShortcutsSetEnablementFlow.executeIntentConfirmed(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)()
{
  *(_BYTE *)(v1 + 181) = v0;
  OUTLINED_FUNCTION_54_0(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_42_1();
  *(_BYTE *)(v1 + 18outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v0;
  OUTLINED_FUNCTION_54_0(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  OUTLINED_FUNCTION_104();
  uint64_t v1 = *(unsigned __int8 *)(v0 + 182);
  uint64_t v2 = 64LL;
  if (v1 == 7)
  {
    uint64_t v2 = 40LL;
    uint64_t v3 = 1LL;
  }

  else
  {
    uint64_t v3 = *(unsigned __int8 *)(v0 + 182);
  }

  if (v1 == 7) {
    uint64_t v4 = 0x80;
  }
  else {
    uint64_t v4 = 96;
  }
  uint64_t v5 = *(void *)(v0 + 152);
  OUTLINED_FUNCTION_13_30(v5 + 288, v0 + v2);
  *(void *)(v5 + 288) = v3;
  OUTLINED_FUNCTION_205();
  *(void *)(v5 + 344) = 0LL;
  *(_BYTE *)(v5 + 35outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v4;
  OUTLINED_FUNCTION_42_20(v6, v7, v8, v9, v10, v11, v12, v13, v14);
  OUTLINED_FUNCTION_100_4();
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AutoShortcutsSetEnablementFlow.executeIntentConfirmed(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_BYTE *)(v11 + 181) == 1)
  {
    uint64_t v12 = (void *)swift_task_alloc(dword_21CAEC);
    *(void *)(v11 + 168) = v12;
    *uint64_t v12 = v11;
    v12[1] = AutoShortcutsSetEnablementFlow.executeIntentConfirmed(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:);
    return AutoShortcutsSetEnablementFlow.publishEnablementUpdated(wasEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)( *(_BYTE *)(v11 + 180),  *(void *)(v11 + 96),  *(void *)(v11 + 104),  *(void *)(v11 + 112),  *(void *)(v11 + 120),  *(void *)(v11 + 128),  *(void *)(v11 + 136),  *(void *)(v11 + 144),  a9);
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v14 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v14, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v15 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_45_0(v15))
    {
      int v16 = *(unsigned __int8 *)(v11 + 180);
      uint64_t v17 = (uint8_t *)OUTLINED_FUNCTION_38(8LL);
      *(_DWORD *)uint64_t v17 = 67109120;
      *(_DWORD *)(v11 + 176) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v11 + 176, v11 + 180, v17 + 4);
      _os_log_impl( &dword_0,  v10,  v9,  "#AutoShortcutsSetEnablementFlow: failed to set appShortcuts enablement; to: %{BOOL}d",
        v17,
        8u);
      OUTLINED_FUNCTION_1_0((uint64_t)v17);
    }

    uint64_t v18 = *(void *)(v11 + 152);
    OUTLINED_FUNCTION_13_30(v18 + 288, v11 + 16);
    *(void *)(v18 + 288) = 6LL;
    OUTLINED_FUNCTION_205();
    *(void *)(v18 + 344) = 0LL;
    *(_BYTE *)(v18 + 35outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 96;
    OUTLINED_FUNCTION_42_20(v19, v20, v21, v22, v23, v24, v25, v26, v27);
    OUTLINED_FUNCTION_100_4();
    return OUTLINED_FUNCTION_20_7(*(uint64_t (**)(void))(v11 + 8));
  }

uint64_t AutoShortcutsSetEnablementFlow.publishConfirmation(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 + 256) = a9;
  *(void *)(v10 + 264) = v9;
  *(void *)(v10 + 240) = a7;
  *(void *)(v10 + 248) = a8;
  *(void *)(v10 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = a5;
  *(void *)(v10 + 23outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = a6;
  *(void *)(v10 + 208) = a3;
  *(void *)(v10 + 216) = a4;
  *(_BYTE *)(v10 + 508) = a2;
  *(void *)(v10 + 200) = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  *(void *)(v10 + 27outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = OUTLINED_FUNCTION_9_0(*(void *)(v11 - 8));
  uint64_t v12 = OUTLINED_FUNCTION_131_4();
  *(void *)(v10 + 280) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v10 + 288) = v13;
  *(void *)(v10 + 296) = OUTLINED_FUNCTION_4_0(v13);
  *(void *)(v10 + 304) = OUTLINED_FUNCTION_11_0();
  uint64_t v14 = OUTLINED_FUNCTION_74_0();
  *(void *)(v10 + 31outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  *(void *)(v10 + 320) = v15;
  *(void *)(v10 + 328) = OUTLINED_FUNCTION_9_0(v15);
  uint64_t v16 = OUTLINED_FUNCTION_75_0();
  *(void *)(v10 + 336) = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  *(void *)(v10 + 344) = v17;
  *(void *)(v10 + 35outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = OUTLINED_FUNCTION_9_0(v17);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_11_26(v18, v19, v20);
}

uint64_t AutoShortcutsSetEnablementFlow.publishConfirmation(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = *(void *)(v9 + 344);
  char v11 = *(_BYTE *)(v9 + 508);
  OUTLINED_FUNCTION_158_3( enum case for RFFeatureFlags.ResponseFramework._SMART(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 104));
  char v12 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
  if ((v12 & 1) == 0 || (v11 & 1) != 0)
  {
    uint64_t v18 = (void *)swift_task_alloc(dword_21CAB4);
    *(void *)(v9 + 496) = v18;
    *uint64_t v18 = v9;
    v18[1] = AutoShortcutsSetEnablementFlow.publishConfirmation(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:);
    return AutoShortcutsSetEnablementFlow.publishConfirmation_preRFv2(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)( *(void *)(v9 + 200),  *(_BYTE *)(v9 + 508),  *(void *)(v9 + 208),  *(void *)(v9 + 216),  *(void *)(v9 + 224),  *(void *)(v9 + 232),  *(void *)(v9 + 240),  *(void *)(v9 + 248),  a9);
  }

  else
  {
    uint64_t v13 = *(void *)(*(void *)(v9 + 264) + 96LL);
    *(void *)(v9 + 360) = v13;
    uint64_t v14 = OUTLINED_FUNCTION_181_0(*(void *)(*(void *)v13 + 240LL));
    uint64_t v19 = v15;
    uint64_t v16 = (void *)swift_task_alloc(v14);
    *(void *)(v9 + 368) = v16;
    OUTLINED_FUNCTION_17_9( v16,  (uint64_t)AutoShortcutsSetEnablementFlow.publishConfirmation(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:));
    return v19();
  }

uint64_t AutoShortcutsSetEnablementFlow.publishConfirmation(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)()
{
  v3[47] = v1;
  v3[48] = v2;
  v3[49] = v4;
  v3[50] = v5;
  v3[51] = v0;
  OUTLINED_FUNCTION_54_0(v6);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  int *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);
  uint64_t v1 = *(int **)(**(void **)(v0 + 360) + 136LL);
  uint64_t v6 = (uint64_t (*)(void))((char *)v1 + *v1);
  swift_bridgeObjectRetain(*(void *)(v0 + 384));
  OUTLINED_FUNCTION_17_1();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_54_9();
  *(void *)(v0 + 416) = v2;
  *uint64_t v2 = v0;
  v2[1] = AutoShortcutsSetEnablementFlow.publishConfirmation(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:);
  uint64_t v3 = OUTLINED_FUNCTION_178_0(*(void *)(v0 + 224));
  return OUTLINED_FUNCTION_124_6(v3, v4, 0LL, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_42_1();
  *(void *)(v1 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = v0;
  OUTLINED_FUNCTION_54_0(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  Swift::String_optional v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *boxed_opaque_existential_1;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v26;
  uint64_t v27;
  os_log_type_t v28;
  _WORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v2 = *(void **)(v1 + 424);
  if (v2)
  {
    uint64_t v36 = *(void *)(v1 + 392);
    uint64_t v37 = *(void *)(v1 + 400);
    uint64_t v34 = *(void *)(v1 + 376);
    uint64_t v35 = *(void *)(v1 + 384);
    uint64_t v3 = *(void *)(v1 + 296);
    uint64_t v4 = *(void *)(v1 + 304);
    uint64_t v6 = *(void *)(v1 + 280);
    uint64_t v5 = *(void *)(v1 + 288);
    uint64_t v7 = *(void ***)(v1 + 264);
    uint64_t v33 = *(void *)(v1 + 272);
    uint64_t v8 = DialogExecutionResult.firstDialogFullPrint()();
    *(void *)(v1 + 43outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v8.value._object;
    uint64_t v9 = AutoShortcutsSetEnablementFlow.getShortcutsBundleIdAndDisplayName()();
    uint64_t v40 = v10;
    uint64_t v41 = v9;
    uint64_t v38 = v11;
    uint64_t v39 = v12;
    *(void *)(v1 + 440) = v11;
    *(void *)(v1 + 448) = v12;
    static DialogPhase.confirmation.getter(v9, v11, v10);
    uint64_t v13 = OUTLINED_FUNCTION_111_3((uint64_t)[v2 catId]);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v4, v6);
    OUTLINED_FUNCTION_68_1(v3, (uint64_t)CustomIntentDisambiguationItemContainer.init(items:));
    OutputGenerationManifest.responseViewId.setter(v13);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    OUTLINED_FUNCTION_74_13();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *, void *))(*v7[35] + 80LL))( v34,  v35,  v36,  v37,  _swiftEmptyArrayStorage,  _swiftEmptyArrayStorage);
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_69();
    uint64_t v14 = OUTLINED_FUNCTION_56_3();
    __swift_storeEnumTagSinglePayload(v33, 0LL, 1LL, v14);
    OutputGenerationManifest.nlContextUpdate.setter(v33);
    uint64_t v15 = OUTLINED_FUNCTION_64();
    OUTLINED_FUNCTION_51(v15);
    *(void *)(v1 + 456) = OUTLINED_FUNCTION_57();
    uint64_t v16 = type metadata accessor for WorkflowDataModels(0LL);
    *(void *)(v1 + 40) = v16;
    lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels,  255LL,  type metadata accessor for WorkflowDataModels,  (uint64_t)&protocol conformance descriptor for WorkflowDataModels);
    *(void *)(v1 + 48) = v17;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v1 + 16));
    void *boxed_opaque_existential_1 = v41;
    boxed_opaque_existential_1[1] = v38;
    boxed_opaque_existential_1[2] = v40;
    boxed_opaque_existential_1[3] = v39;
    boxed_opaque_existential_1[4] = v34;
    boxed_opaque_existential_1[5] = v35;
    boxed_opaque_existential_1[6] = v36;
    boxed_opaque_existential_1[7] = v37;
    *((_OWORD *)boxed_opaque_existential_1 + 4) = xmmword_1830D0;
    *((_BYTE *)boxed_opaque_existential_1 + 80) = 0;
    *(Swift::String_optional *)(boxed_opaque_existential_1 + 11) = v8;
    swift_storeEnumTagMultiPayload(boxed_opaque_existential_1, v16, 5LL);
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v20 = OUTLINED_FUNCTION_23_4(v19);
    *(_OWORD *)(v20 + 16) = xmmword_17E150;
    *(void *)(v20 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v2;
    os_log_type_t v43 = v20;
    specialized Array._endMutation()(v20, v21, v22);
    *(void *)(v1 + 464) = v43;
    OUTLINED_FUNCTION_52_5();
    OUTLINED_FUNCTION_16_15();
    OUTLINED_FUNCTION_11_11();
    OUTLINED_FUNCTION_80();
    outlined copy of Data?(0LL, 0xF000000000000000LL);
    swift_bridgeObjectRetain(v8.value._object);
    uint64_t v23 = v2;
    uint64_t v24 = (void *)OUTLINED_FUNCTION_54_9();
    *(void *)(v1 + 47outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v24;
    *uint64_t v24 = v1;
    v24[1] = AutoShortcutsSetEnablementFlow.publishConfirmation(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void))v42)( v1 + 56,  v1 + 16,  v43,  *(void *)(v1 + 328));
  }

  else
  {
    uint64_t v26 = *(void **)(v1 + 400);
    OUTLINED_FUNCTION_19_1(*(void *)(v1 + 384));
    OUTLINED_FUNCTION_19_1((uint64_t)v26);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    unsigned __int8 v27 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v27, (uint64_t)static Logger.voiceCommands);
    uint64_t v28 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_45_0(v28))
    {
      uint64_t v29 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_26_1(v29);
      OUTLINED_FUNCTION_1_0(v0);
    }

    uint64_t v32 = *(void *)(v1 + 264);

    OUTLINED_FUNCTION_13_30(v32 + 288, v1 + 96);
    OUTLINED_FUNCTION_5_40();
    OUTLINED_FUNCTION_103_4();
    OUTLINED_FUNCTION_70_14();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_207_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 472));
  swift_release();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_98_1();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_11_26(v1, v2, v3);
}

{
  uint64_t v0;
  void *v1;
  OUTLINED_FUNCTION_82_9(*(void *)(v0 + 264));
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 480) = v1;
  OUTLINED_FUNCTION_92( v1,  (uint64_t)AutoShortcutsSetEnablementFlow.publishConfirmation(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:));
  return OUTLINED_FUNCTION_67_2();
}

{
  OUTLINED_FUNCTION_89_11();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v28 = *(void **)(v0 + 424);
  uint64_t v29 = *(void *)(v0 + 320);
  uint64_t v30 = *(void *)(v0 + 312);
  uint64_t v31 = *(void *)(v0 + 328);
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 248);
  uint64_t v6 = *(void *)(v0 + 224);
  uint64_t v5 = *(void *)(v0 + 232);
  uint64_t v8 = *(void *)(v0 + 208);
  uint64_t v7 = *(void *)(v0 + 216);
  OUTLINED_FUNCTION_13_30(v2 + 288, v0 + 168);
  uint64_t v26 = *(void *)(v2 + 296);
  unsigned __int8 v27 = *(void *)(v2 + 288);
  uint64_t v24 = *(void *)(v2 + 312);
  uint64_t v25 = *(void *)(v2 + 304);
  uint64_t v22 = *(void *)(v2 + 328);
  uint64_t v23 = *(void *)(v2 + 320);
  uint64_t v20 = *(void *)(v2 + 344);
  uint64_t v21 = *(void *)(v2 + 336);
  uint64_t v9 = *(_BYTE *)(v2 + 352);
  *(void *)(v2 + 288) = 0LL;
  *(void *)(v2 + 296) = v8;
  *(void *)(v2 + 304) = v7;
  *(void *)(v2 + 31outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v6;
  *(void *)(v2 + 320) = v5;
  *(void *)(v2 + 328) = v3;
  *(void *)(v2 + 336) = v4;
  *(void *)(v2 + 344) = v1;
  *(_BYTE *)(v2 + 35outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 32;
  OUTLINED_FUNCTION_17_1();
  OUTLINED_FUNCTION_9_4();
  OUTLINED_FUNCTION_5_14();
  uint64_t v10 = OUTLINED_FUNCTION_80();
  OUTLINED_FUNCTION_143_4(v10, v11, v12, v13, v14, v15, v16, v17, v9, v19, v20, v21, v22, v23, v24, v25, v26, v27);
  static ExecuteResponse.ongoing(requireInput:)(1LL);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_233_0();
  swift_bridgeObjectRelease();

  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 56));
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v31, v30);
  OUTLINED_FUNCTION_70_14();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  OUTLINED_FUNCTION_30_2();
  uint64_t v2 = *v0;
  OUTLINED_FUNCTION_12_16(*(void *)(v1 + 496), v3);
  swift_task_dealloc();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v2 + 8));
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  OUTLINED_FUNCTION_104();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v2 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v2, (uint64_t)static Logger.voiceCommands);
  uint64_t v3 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_45_0(v3))
  {
    uint64_t v4 = (_DWORD *)OUTLINED_FUNCTION_38(8LL);
    *uint64_t v4 = 67109120;
    *(_DWORD *)(v1 + 504) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 504, v1 + 508, v4 + 1);
    OUTLINED_FUNCTION_87_9( &dword_0,  v5,  v6,  "#AutoShortcutsSetEnablementFlow: failed to get button labels; isEnabling=%{BOOL}d");
    OUTLINED_FUNCTION_1_0((uint64_t)v4);
  }

  uint64_t v7 = *(void *)(v1 + 408);
  uint64_t v8 = *(void *)(v1 + 264);
  OUTLINED_FUNCTION_13_30(v8 + 288, v1 + 120);
  uint64_t v9 = *(void *)(v8 + 288);
  uint64_t v10 = *(void *)(v8 + 296);
  char v11 = *(void *)(v8 + 304);
  char v12 = *(void *)(v8 + 312);
  uint64_t v13 = *(void *)(v8 + 320);
  uint64_t v14 = *(void *)(v8 + 328);
  uint64_t v15 = *(void *)(v8 + 336);
  uint64_t v16 = *(void *)(v8 + 344);
  uint64_t v17 = *(_BYTE *)(v8 + 352);
  *(void *)(v8 + 288) = 1LL;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 31outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  uint64_t v18 = OUTLINED_FUNCTION_37_25(v9, v10, v11, v12, v13, v14, v15, v16, v17);
  static ExecuteResponse.complete()(v18);
  swift_errorRelease(v7);
  OUTLINED_FUNCTION_70_14();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v1 + 8));
}

{
  os_log_type_t v0;
  uint64_t v1;
  os_log_s *v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  OUTLINED_FUNCTION_177_0();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v2 = *(os_log_s **)(v1 + 488);
  uint64_t v3 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_35_27(v3, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_28_7();
  OUTLINED_FUNCTION_66();
  uint64_t v4 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_31_0(v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v6 = (void *)OUTLINED_FUNCTION_38(8LL);
    OUTLINED_FUNCTION_67_12(5.7779e-34);
    uint64_t v7 = OUTLINED_FUNCTION_184();
    *(void *)(v1 + 19outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v7;
    OUTLINED_FUNCTION_9_35(v7, v1 + 200);
    *uint64_t v6 = v7;
    OUTLINED_FUNCTION_39_16();
    OUTLINED_FUNCTION_39_16();
    OUTLINED_FUNCTION_31_2(&dword_0, v2, v0, "#AutoShortcutsSetEnablementFlow error publishing confirmation; %@", v5);
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_32_20(v8);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
    OUTLINED_FUNCTION_1_0((uint64_t)v5);
  }

  else
  {
    OUTLINED_FUNCTION_39_16();
    OUTLINED_FUNCTION_39_16();
  }

  uint64_t v21 = *(void *)(v1 + 488);
  uint64_t v25 = *(void *)(v1 + 328);
  uint64_t v22 = *(void **)(v1 + 424);
  uint64_t v23 = *(void *)(v1 + 320);
  uint64_t v24 = *(void *)(v1 + 312);
  uint64_t v9 = *(void *)(v1 + 264);

  OUTLINED_FUNCTION_13_30(v9 + 288, v1 + 144);
  uint64_t v10 = *(void *)(v9 + 288);
  char v11 = *(void *)(v9 + 296);
  char v12 = *(void *)(v9 + 304);
  uint64_t v13 = *(void *)(v9 + 312);
  uint64_t v14 = *(void *)(v9 + 320);
  uint64_t v15 = *(void *)(v9 + 328);
  uint64_t v16 = *(void *)(v9 + 336);
  uint64_t v17 = *(void *)(v9 + 344);
  uint64_t v18 = *(_BYTE *)(v9 + 352);
  *(void *)(v9 + 288) = 1LL;
  *(_OWORD *)(v9 + 296) = 0u;
  *(_OWORD *)(v9 + 31outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0u;
  *(_OWORD *)(v9 + 328) = 0u;
  *(void *)(v9 + 344) = 0LL;
  *(_BYTE *)(v9 + 35outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 96;
  uint64_t v19 = OUTLINED_FUNCTION_42_20(v10, v11, v12, v13, v14, v15, v16, v17, v18);
  static ExecuteResponse.complete()(v19);
  OUTLINED_FUNCTION_14();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_28_4();
  OUTLINED_FUNCTION_233_0();
  swift_bridgeObjectRelease();
  swift_errorRelease(v21);

  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v1 + 56));
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v24);
  OUTLINED_FUNCTION_70_14();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_47_21(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t AutoShortcutsSetEnablementFlow.publishConfirmation_preRFv2(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 + 296) = a9;
  *(void *)(v10 + 304) = v9;
  *(void *)(v10 + 280) = a7;
  *(void *)(v10 + 288) = a8;
  *(void *)(v10 + 264) = a5;
  *(void *)(v10 + 27outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = a6;
  *(void *)(v10 + 248) = a3;
  *(void *)(v10 + 256) = a4;
  *(_BYTE *)(v10 + 89) = a2;
  *(void *)(v10 + 240) = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  *(void *)(v10 + 31outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = OUTLINED_FUNCTION_9_0(*(void *)(v11 - 8));
  uint64_t v12 = OUTLINED_FUNCTION_131_4();
  *(void *)(v10 + 320) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v10 + 328) = v13;
  *(void *)(v10 + 336) = OUTLINED_FUNCTION_4_0(v13);
  *(void *)(v10 + 344) = OUTLINED_FUNCTION_11_0();
  uint64_t v14 = OUTLINED_FUNCTION_74_0();
  *(void *)(v10 + 35outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  *(void *)(v10 + 360) = v15;
  *(void *)(v10 + 368) = OUTLINED_FUNCTION_9_0(v15);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  *(void *)(v10 + 376) = OUTLINED_FUNCTION_9_0(*(void *)(v16 - 8));
  uint64_t v17 = OUTLINED_FUNCTION_44_6();
  *(void *)(v10 + 384) = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  *(void *)(v10 + 39outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v18;
  *(void *)(v10 + 400) = OUTLINED_FUNCTION_9_0(v18);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_11_26(v19, v20, v21);
}

uint64_t AutoShortcutsSetEnablementFlow.publishConfirmation_preRFv2(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)()
{
  uint64_t v1 = *(void *)(v0[38] + 96LL);
  v0[51] = v1;
  uint64_t v2 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(*(void *)v1 + 144LL));
  v0[52] = v2;
  *uint64_t v2 = v0;
  v2[1] = AutoShortcutsSetEnablementFlow.publishConfirmation_preRFv2(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:);
  OUTLINED_FUNCTION_209_0();
  return OUTLINED_FUNCTION_128_4(v3, v4, v5, v6, v7);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 416));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t EnumTagSinglePayload;
  Swift::String_optional v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  os_log_type_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v4 = *(void *)(v1 + 376);
  uint64_t v3 = *(void *)(v1 + 384);
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v4, 1LL, v3);
  if ((_DWORD)EnumTagSinglePayload == 1)
  {
    OUTLINED_FUNCTION_108_0(EnumTagSinglePayload, &demangling cache variable for type metadata for TemplatingResult?);
  }

  else
  {
    uint64_t v0 = *(void *)(v1 + 400);
    OUTLINED_FUNCTION_75(v0, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 392) + 32LL));
    uint64_t v6 = TemplatingResult.firstSectionContentText()();
    *(Swift::String_optional *)(v1 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = v6;
    if (v6.value._object)
    {
      uint64_t v7 = (void *)OUTLINED_FUNCTION_58_15(*(void *)(**(void **)(v1 + 408) + 152LL));
      *(void *)(v1 + 440) = v7;
      *uint64_t v7 = v1;
      v7[1] = AutoShortcutsSetEnablementFlow.publishConfirmation_preRFv2(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:);
      uint64_t v8 = OUTLINED_FUNCTION_178_0(*(void *)(v1 + 264));
      return OUTLINED_FUNCTION_9_25(v8, v9, v10, v17);
    }

    OUTLINED_FUNCTION_14_5(*(void *)(v1 + 392));
  }

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v12 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v12, (uint64_t)static Logger.voiceCommands);
  uint64_t v13 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_45_0(v13))
  {
    uint64_t v14 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    OUTLINED_FUNCTION_26_1(v14);
    OUTLINED_FUNCTION_1_0(v0);
  }

  OUTLINED_FUNCTION_196();
  OUTLINED_FUNCTION_13_30(v2 + 288, v3);
  OUTLINED_FUNCTION_5_40();
  OUTLINED_FUNCTION_103_4();
  OUTLINED_FUNCTION_38_28();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_20_7(*(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_42_1();
  *(void *)(v1 + 448) = v0;
  OUTLINED_FUNCTION_54_0(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;
  os_log_type_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v3 = *(void *)(v2 + 448);
  if (v3)
  {
    uint64_t v4 = *(void *)(v2 + 432);
    if ((*(_BYTE *)(v2 + 89) & 1) != 0)
    {
      uint64_t v5 = (void *)swift_task_alloc(dword_21CABC);
      *(void *)(v2 + 456) = v5;
      *uint64_t v5 = v2;
      v5[1] = AutoShortcutsSetEnablementFlow.publishConfirmation_preRFv2(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:);
      return AutoShortcutsSetEnablementFlow.updateEnablingPattern(_:appId:promptLabel:shortcutPhrases:moreShortcutsLabel:)( v2 + 96,  v3,  *(void *)(v2 + 248),  *(void *)(v2 + 256),  *(void *)(v2 + 424),  v4,  *(void *)(v2 + 280),  *(void *)(v2 + 288));
    }

    else
    {
      uint64_t v12 = (void *)swift_task_alloc(dword_21CAC4);
      *(void *)(v2 + 496) = v12;
      *uint64_t v12 = v2;
      v12[1] = AutoShortcutsSetEnablementFlow.publishConfirmation_preRFv2(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:);
      return AutoShortcutsSetEnablementFlow.updateDisablingPattern_preRFv2(_:promptLabel:)( v2 + 56,  v3,  *(void *)(v2 + 424),  v4);
    }
  }

  else
  {
    OUTLINED_FUNCTION_14_5(*(void *)(v2 + 392));
    OUTLINED_FUNCTION_20();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v7 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v7, (uint64_t)static Logger.voiceCommands);
    uint64_t v8 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_45_0(v8))
    {
      uint64_t v9 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_26_1(v9);
      OUTLINED_FUNCTION_1_0(v1);
    }

    OUTLINED_FUNCTION_196();
    OUTLINED_FUNCTION_13_30(288LL, v0);
    OUTLINED_FUNCTION_5_40();
    OUTLINED_FUNCTION_103_4();
    OUTLINED_FUNCTION_38_28();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_33_0();
    return OUTLINED_FUNCTION_20_7(*(uint64_t (**)(void))(v2 + 8));
  }

{
  uint64_t v0;
  void *v1;
  __int128 v2;
  OUTLINED_FUNCTION_77_1();
  OUTLINED_FUNCTION_12_16(*(void *)(v0 + 456), v1);
  uint64_t v2 = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 480) = v2;
  *(_BYTE *)(v0 + 90) = *(_BYTE *)(v0 + 128);
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  void *v1;
  OUTLINED_FUNCTION_82_9(*(void *)(v0 + 304));
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 560) = v1;
  OUTLINED_FUNCTION_92( v1,  (uint64_t)AutoShortcutsSetEnablementFlow.publishConfirmation_preRFv2(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:));
  return OUTLINED_FUNCTION_67_2();
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 568) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v32 = *(void **)(v0 + 448);
  uint64_t v33 = *(void *)(v0 + 392);
  uint64_t v34 = *(void *)(v0 + 384);
  uint64_t v35 = *(void *)(v0 + 400);
  uint64_t v30 = *(void *)(v0 + 352);
  uint64_t v31 = *(void *)(v0 + 368);
  uint64_t v2 = *(void *)(v0 + 296);
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v28 = *(void *)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 264);
  uint64_t v5 = *(void *)(v0 + 272);
  uint64_t v7 = *(void *)(v0 + 248);
  uint64_t v6 = *(void *)(v0 + 256);
  uint64_t v8 = *(unsigned __int8 *)(v0 + 89);
  uint64_t v29 = *(void *)(v0 + 360);
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
  OUTLINED_FUNCTION_13_30(v1 + 288, v0 + 184);
  uint64_t v26 = *(void *)(v1 + 296);
  unsigned __int8 v27 = *(void *)(v1 + 288);
  uint64_t v24 = *(void *)(v1 + 312);
  uint64_t v25 = *(void *)(v1 + 304);
  uint64_t v22 = *(void *)(v1 + 328);
  uint64_t v23 = *(void *)(v1 + 320);
  uint64_t v20 = *(void *)(v1 + 344);
  uint64_t v21 = *(void *)(v1 + 336);
  uint64_t v9 = *(_BYTE *)(v1 + 352);
  *(void *)(v1 + 288) = v8;
  *(void *)(v1 + 296) = v7;
  *(void *)(v1 + 304) = v6;
  *(void *)(v1 + 31outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v4;
  *(void *)(v1 + 320) = v5;
  *(void *)(v1 + 328) = v3;
  *(void *)(v1 + 336) = v28;
  *(void *)(v1 + 344) = v2;
  *(_BYTE *)(v1 + 35outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 32;
  OUTLINED_FUNCTION_28_8();
  OUTLINED_FUNCTION_17_1();
  OUTLINED_FUNCTION_52_5();
  uint64_t v10 = OUTLINED_FUNCTION_16_15();
  OUTLINED_FUNCTION_143_4(v10, v11, v12, v13, v14, v15, v16, v17, v9, v19, v20, v21, v22, v23, v24, v25, v26, v27);
  static ExecuteResponse.ongoing(requireInput:)(1LL);

  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v31, v30);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v35, v34);
  OUTLINED_FUNCTION_38_28();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

#error "11D858: call analysis failed (funcsize=112)"
uint64_t AutoShortcutsSetEnablementFlow.publishConfirmation_preRFv2(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)()
{
  void *v0;
  uint64_t v1;
  _OWORD *v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v1 = *v0;
  uint64_t v2 = (_OWORD *)(*v0 + 504LL);
  uint64_t v8 = v1;
  OUTLINED_FUNCTION_12_16(*(void *)(v1 + 496), &v8);
  uint64_t v3 = *(_OWORD *)(v1 + 72);
  *uint64_t v2 = *(_OWORD *)(v1 + 56);
  v2[1] = v3;
  *(_BYTE *)(v1 + 91) = *(_BYTE *)(v1 + 88);
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_11_26(v4, v5, v6);
}

#error "11DA9C: call analysis failed (funcsize=112)"
uint64_t AutoShortcutsSetEnablementFlow.publishConfirmation_preRFv2(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  OUTLINED_FUNCTION_77_1();
  OUTLINED_FUNCTION_10_0(v2);
  *(void *)(v0 + 55outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v1;
  swift_task_dealloc();
  if (!v1) {
    swift_release();
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

#error "11DE98: call analysis failed (funcsize=90)"
#error "11E018: call analysis failed (funcsize=90)"
uint64_t AutoShortcutsSetEnablementFlow.updateEnablingPattern(_:appId:promptLabel:shortcutPhrases:moreShortcutsLabel:)( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  v9[40] = v14;
  v9[41] = v8;
  v9[38] = a7;
  v9[39] = a8;
  v9[36] = a5;
  v9[37] = a6;
  v9[34] = a3;
  v9[35] = a4;
  v9[32] = a1;
  v9[33] = a2;
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v10, v11, v12);
}

uint64_t AutoShortcutsSetEnablementFlow.updateEnablingPattern(_:appId:promptLabel:shortcutPhrases:moreShortcutsLabel:)()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(**(void **)(*(void *)(v0 + 328) + 96LL) + 232LL));
  *(void *)(v0 + 336) = v1;
  *uint64_t v1 = v0;
  v1[1] = AutoShortcutsSetEnablementFlow.updateEnablingPattern(_:appId:promptLabel:shortcutPhrases:moreShortcutsLabel:);
  return OUTLINED_FUNCTION_27_2(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_42_1();
  v3[43] = v1;
  v3[44] = v2;
  v3[45] = v4;
  v3[46] = v5;
  v3[47] = v0;
  OUTLINED_FUNCTION_54_0(v6);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  Class isa;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v1 = v0 + 16;
  outlined bridged method (mbnn) of @objc PatternExecutionResult.visual.setter( *(void *)(v0 + 408),  *(void *)(v0 + 400),  *(void **)(v0 + 264));
  outlined release of ActionConfirmationVisual((void *)(v0 + 16));
  uint64_t v2 = [*(id *)(v0 + 264) dialog];
  uint64_t v3 = OUTLINED_FUNCTION_72( (uint64_t)v2,  &lazy cache variable for type metadata for PatternExecutionDialog,  &OBJC_CLASS___PatternExecutionDialog_ptr);
  OUTLINED_FUNCTION_154_2(v3);
  OUTLINED_FUNCTION_50_6();
  if ((unint64_t)(v0 + 16) >> 62)
  {
    OUTLINED_FUNCTION_66_14();
    uint64_t v9 = OUTLINED_FUNCTION_191_0();
    uint64_t v4 = OUTLINED_FUNCTION_20();
    if (v9) {
      goto LABEL_3;
    }
LABEL_7:
    OUTLINED_FUNCTION_20();
    goto LABEL_8;
  }

  OUTLINED_FUNCTION_208_0();
  if (!v2) {
    goto LABEL_7;
  }
LABEL_3:
  OUTLINED_FUNCTION_128_2(v4, (v1 & 0xC000000000000001LL) == 0);
  if ((v1 & 0xC000000000000001LL) != 0) {
    uint64_t v5 = OUTLINED_FUNCTION_83_3();
  }
  else {
    uint64_t v5 = (uint64_t)OUTLINED_FUNCTION_193_0();
  }
  uint64_t v6 = (void *)v5;
  uint64_t v7 = OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_72( v7,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
  Class isa = OUTLINED_FUNCTION_106_5().super.super.isa;
  OUTLINED_FUNCTION_3_5((uint64_t)isa, "setSpokenOnly:");

LABEL_8:
  uint64_t v10 = (uint64_t (*)(void))OUTLINED_FUNCTION_59_11();
  return OUTLINED_FUNCTION_3_14(v10);
}

{
  unint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  Class isa;
  uint64_t v9;
  uint64_t (*v10)(void);
  outlined bridged method (mbnn) of @objc PatternExecutionResult.visual.setter( *(void *)(v1 + 440),  *(void *)(v1 + 432),  *(void **)(v1 + 264));
  uint64_t v2 = [*(id *)(v1 + 264) dialog];
  uint64_t v3 = OUTLINED_FUNCTION_72( (uint64_t)v2,  &lazy cache variable for type metadata for PatternExecutionDialog,  &OBJC_CLASS___PatternExecutionDialog_ptr);
  OUTLINED_FUNCTION_154_2(v3);
  OUTLINED_FUNCTION_50_6();
  if (v0 >> 62)
  {
    OUTLINED_FUNCTION_66_14();
    uint64_t v9 = OUTLINED_FUNCTION_191_0();
    uint64_t v4 = OUTLINED_FUNCTION_20();
    if (v9) {
      goto LABEL_3;
    }
LABEL_7:
    OUTLINED_FUNCTION_20();
    goto LABEL_8;
  }

  OUTLINED_FUNCTION_208_0();
  if (!v2) {
    goto LABEL_7;
  }
LABEL_3:
  OUTLINED_FUNCTION_128_2(v4, (v0 & 0xC000000000000001LL) == 0);
  if ((v0 & 0xC000000000000001LL) != 0) {
    uint64_t v5 = OUTLINED_FUNCTION_83_3();
  }
  else {
    uint64_t v5 = (uint64_t)OUTLINED_FUNCTION_193_0();
  }
  uint64_t v6 = (void *)v5;
  uint64_t v7 = OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_72( v7,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
  Class isa = OUTLINED_FUNCTION_106_5().super.super.isa;
  OUTLINED_FUNCTION_3_5((uint64_t)isa, "setSpokenOnly:");

LABEL_8:
  uint64_t v10 = (uint64_t (*)(void))OUTLINED_FUNCTION_59_11();
  return OUTLINED_FUNCTION_3_14(v10);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  OUTLINED_FUNCTION_28_1();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = OUTLINED_FUNCTION_48();
  uint64_t v2 = (void *)__swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_46_0();
  uint64_t v3 = OUTLINED_FUNCTION_46_0();
  Logger.logObject.getter(v3);
  uint64_t v4 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_23_7(v4))
  {
    uint64_t v5 = OUTLINED_FUNCTION_38(12LL);
    uint64_t v6 = (void *)OUTLINED_FUNCTION_38(8LL);
    OUTLINED_FUNCTION_18_28(5.7779e-34);
    uint64_t v7 = OUTLINED_FUNCTION_89_10();
    *(void *)(v0 + 248) = v7;
    OUTLINED_FUNCTION_9_35(v7, v0 + 256);
    *uint64_t v6 = v7;
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_16_35(&dword_0, v8, v9, "#AutoShortcutsSetEnablementFlow error updating enabling pattern; %@");
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_32_20(v10);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
    OUTLINED_FUNCTION_1_0(v5);

    OUTLINED_FUNCTION_4_8();
  }

  else
  {
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  uint64_t v11 = (uint64_t (*)(void))OUTLINED_FUNCTION_56_24(*(void *)(v0 + 256));
  return OUTLINED_FUNCTION_16_0(v11);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  OUTLINED_FUNCTION_28_1();
  outlined release of ActionConfirmationVisual(v0 + 2);
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = OUTLINED_FUNCTION_48();
  uint64_t v2 = (void *)__swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_46_0();
  uint64_t v3 = OUTLINED_FUNCTION_46_0();
  Logger.logObject.getter(v3);
  uint64_t v4 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_23_7(v4))
  {
    uint64_t v5 = OUTLINED_FUNCTION_38(12LL);
    uint64_t v6 = (void *)OUTLINED_FUNCTION_38(8LL);
    OUTLINED_FUNCTION_18_28(5.7779e-34);
    uint64_t v7 = OUTLINED_FUNCTION_89_10();
    v0[31] = v7;
    OUTLINED_FUNCTION_9_35(v7, (uint64_t)(v0 + 32));
    *uint64_t v6 = v7;
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_16_35(&dword_0, v8, v9, "#AutoShortcutsSetEnablementFlow error updating enabling pattern; %@");
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_32_20(v10);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
    OUTLINED_FUNCTION_1_0(v5);

    OUTLINED_FUNCTION_4_8();
  }

  else
  {
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  uint64_t v11 = (uint64_t (*)(void))OUTLINED_FUNCTION_56_24(v0[32]);
  return OUTLINED_FUNCTION_16_0(v11);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  OUTLINED_FUNCTION_28_1();
  uint64_t v1 = v0[46];
  uint64_t v2 = v0[44];
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_19_1(v2);
  OUTLINED_FUNCTION_19_1(v1);
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_37();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = OUTLINED_FUNCTION_48();
  uint64_t v4 = (void *)__swift_project_value_buffer(v3, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_46_0();
  uint64_t v5 = OUTLINED_FUNCTION_46_0();
  Logger.logObject.getter(v5);
  uint64_t v6 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_23_7(v6))
  {
    uint64_t v7 = OUTLINED_FUNCTION_38(12LL);
    uint64_t v8 = (void *)OUTLINED_FUNCTION_38(8LL);
    OUTLINED_FUNCTION_18_28(5.7779e-34);
    uint64_t v9 = OUTLINED_FUNCTION_89_10();
    v0[31] = v9;
    OUTLINED_FUNCTION_9_35(v9, (uint64_t)(v0 + 32));
    *uint64_t v8 = v9;
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_16_35(&dword_0, v10, v11, "#AutoShortcutsSetEnablementFlow error updating enabling pattern; %@");
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_32_20(v12);
    OUTLINED_FUNCTION_1_0((uint64_t)v8);
    OUTLINED_FUNCTION_1_0(v7);

    OUTLINED_FUNCTION_4_8();
  }

  else
  {
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  uint64_t v13 = (uint64_t (*)(void))OUTLINED_FUNCTION_56_24(v0[32]);
  return OUTLINED_FUNCTION_16_0(v13);
}

#error "11E1E8: call analysis failed (funcsize=89)"
uint64_t AutoShortcutsSetEnablementFlow.updateEnablingPattern(_:appId:promptLabel:shortcutPhrases:moreShortcutsLabel:)( uint64_t a1,  uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v6;
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_10_0(v6);
  v3[49] = v2;
  swift_task_dealloc();
  if (!v2)
  {
    v3[50] = a2;
    v3[51] = a1;
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t AutoShortcutsSetEnablementFlow.updateEnablingPattern(_:appId:promptLabel:shortcutPhrases:moreShortcutsLabel:)( uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (void *)*v3;
  uint64_t v6 = v8;
  OUTLINED_FUNCTION_10_0(&v8);
  v6[53] = v2;
  swift_task_dealloc();
  if (!v2)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_2_6();
    v6[54] = a2;
    v6[55] = a1;
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t AutoShortcutsSetEnablementFlow.updateDisablingPattern_preRFv2(_:promptLabel:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[24] = a4;
  v5[25] = v4;
  v5[22] = a2;
  v5[23] = a3;
  v5[21] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)AutoShortcutsSetEnablementFlow.updateDisablingPattern_preRFv2(_:promptLabel:));
}

uint64_t AutoShortcutsSetEnablementFlow.updateDisablingPattern_preRFv2(_:promptLabel:)()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(**(void **)(*(void *)(v0 + 200) + 96LL) + 240LL));
  *(void *)(v0 + 208) = v1;
  *uint64_t v1 = v0;
  v1[1] = AutoShortcutsSetEnablementFlow.updateDisablingPattern_preRFv2(_:promptLabel:);
  return OUTLINED_FUNCTION_27_2(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_42_1();
  v3[27] = v1;
  v3[28] = v2;
  v3[29] = v4;
  v3[30] = v5;
  v3[31] = v0;
  OUTLINED_FUNCTION_54_0(v6);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v1 = *(void **)(v0 + 200);
  uint64_t v2 = v1 + 2;
  __swift_project_boxed_opaque_existential_1(v1 + 2, v1[5]);
  uint64_t v3 = OUTLINED_FUNCTION_129();
  if ((dispatch thunk of DeviceState.isCarPlay.getter(v3, v4) & 1) != 0)
  {
    OUTLINED_FUNCTION_215(*(id *)(v0 + 176), "setVisual:");
    uint64_t v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_72_11(*(void *)(v0 + 240), *(__n128 *)(v0 + 216));
    return v5();
  }

  else
  {
    uint64_t v7 = *(void *)(v0 + 240);
    uint64_t v8 = *(void *)(v0 + 224);
    uint64_t v16 = *(void *)(v0 + 216);
    uint64_t v9 = *(void *)(v0 + 192);
    uint64_t v17 = *(void *)(v0 + 184);
    uint64_t v18 = *(void *)(v0 + 232);
    uint64_t v10 = v1[5];
    uint64_t v11 = v1[6];
    __swift_project_boxed_opaque_existential_1(v2, v10);
    uint64_t v12 = dispatch thunk of DeviceState.isWatch.getter(v10, v11);
    if ((v12 & 1) != 0) {
      uint64_t v13 = 0xD000000000000019LL;
    }
    else {
      uint64_t v13 = 0xD000000000000013LL;
    }
    if ((v12 & 1) != 0) {
      uint64_t v14 = 0x8000000000192550LL;
    }
    else {
      uint64_t v14 = 0x80000000001920C0LL;
    }
    outlined init with copy of AppShortcutInvoking((uint64_t)v2, v0 + 120);
    OUTLINED_FUNCTION_11_11();
    OUTLINED_FUNCTION_5_14();
    OUTLINED_FUNCTION_9_4();
    ActionConfirmationVisual.init(appBundleId:confirmButton:noButton:destructive:prompt:viewData:deviceState:)( v13,  v14,  v16,  v8,  v18,  v7,  0,  v17,  v0 + 16,  v9,  0LL,  0xF000000000000000LL,  (void *)(v0 + 120));
    uint64_t v15 = (void *)swift_task_alloc(dword_2164B4);
    *(void *)(v0 + 256) = v15;
    OUTLINED_FUNCTION_17_9(v15, (uint64_t)AutoShortcutsSetEnablementFlow.updateDisablingPattern_preRFv2(_:promptLabel:));
    return ActionConfirmationVisual.data.getter();
  }

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  Class isa;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  outlined bridged method (mbnn) of @objc PatternExecutionResult.visual.setter( *(void *)(v0 + 280),  *(void *)(v0 + 272),  *(void **)(v0 + 176));
  uint64_t v2 = OUTLINED_FUNCTION_4(v1, "dialog");
  uint64_t v3 = OUTLINED_FUNCTION_72( (uint64_t)v2,  &lazy cache variable for type metadata for PatternExecutionDialog,  &OBJC_CLASS___PatternExecutionDialog_ptr);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if ((unint64_t)v4 >> 62)
  {
    if (v4 < 0) {
      uint64_t v10 = v4;
    }
    else {
      uint64_t v10 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    OUTLINED_FUNCTION_17_1();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    uint64_t v5 = OUTLINED_FUNCTION_20();
    if (v11) {
      goto LABEL_3;
    }
LABEL_10:
    OUTLINED_FUNCTION_20();
    outlined release of ActionConfirmationVisual((void *)(v0 + 16));
    goto LABEL_11;
  }

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  OUTLINED_FUNCTION_28_1();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = OUTLINED_FUNCTION_48();
  uint64_t v2 = (void *)__swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_46_0();
  uint64_t v3 = OUTLINED_FUNCTION_46_0();
  Logger.logObject.getter(v3);
  uint64_t v4 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_23_7(v4))
  {
    uint64_t v5 = OUTLINED_FUNCTION_38(12LL);
    uint64_t v6 = (void *)OUTLINED_FUNCTION_38(8LL);
    OUTLINED_FUNCTION_18_28(5.7779e-34);
    uint64_t v7 = OUTLINED_FUNCTION_89_10();
    *(void *)(v0 + 160) = v7;
    OUTLINED_FUNCTION_9_35(v7, v0 + 168);
    *uint64_t v6 = v7;
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_16_35(&dword_0, v8, v9, "#AutoShortcutsSetEnablementFlow error updatng disabling pattern; %@");
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_32_20(v10);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
    OUTLINED_FUNCTION_1_0(v5);

    OUTLINED_FUNCTION_4_8();
  }

  else
  {
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  uint64_t v11 = (uint64_t (*)(void))OUTLINED_FUNCTION_56_24(*(void *)(v0 + 168));
  return OUTLINED_FUNCTION_16_0(v11);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  OUTLINED_FUNCTION_28_1();
  outlined release of ActionConfirmationVisual(v0 + 2);
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = OUTLINED_FUNCTION_48();
  uint64_t v2 = (void *)__swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_46_0();
  uint64_t v3 = OUTLINED_FUNCTION_46_0();
  Logger.logObject.getter(v3);
  uint64_t v4 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_23_7(v4))
  {
    uint64_t v5 = OUTLINED_FUNCTION_38(12LL);
    uint64_t v6 = (void *)OUTLINED_FUNCTION_38(8LL);
    OUTLINED_FUNCTION_18_28(5.7779e-34);
    uint64_t v7 = OUTLINED_FUNCTION_89_10();
    v0[20] = v7;
    OUTLINED_FUNCTION_9_35(v7, (uint64_t)(v0 + 21));
    *uint64_t v6 = v7;
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_16_35(&dword_0, v8, v9, "#AutoShortcutsSetEnablementFlow error updatng disabling pattern; %@");
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_32_20(v10);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
    OUTLINED_FUNCTION_1_0(v5);

    OUTLINED_FUNCTION_4_8();
  }

  else
  {
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  uint64_t v11 = (uint64_t (*)(void))OUTLINED_FUNCTION_56_24(v0[21]);
  return OUTLINED_FUNCTION_16_0(v11);
}

uint64_t AutoShortcutsSetEnablementFlow.updateDisablingPattern_preRFv2(_:promptLabel:)( uint64_t a1, uint64_t a2)
{
  v3[33] = v2;
  swift_task_dealloc();
  if (!v2)
  {
    v3[34] = a2;
    v3[35] = a1;
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t AutoShortcutsSetEnablementFlow.getShortcutsBundleIdAndDisplayName()()
{
  uint64_t v1 = OUTLINED_FUNCTION_129();
  if ((dispatch thunk of DeviceState.isWatch.getter(v1, v2) & 1) != 0) {
    uint64_t v3 = 0x8000000000192550LL;
  }
  else {
    uint64_t v3 = 0x80000000001920C0LL;
  }
  type metadata accessor for App(0LL);
  OUTLINED_FUNCTION_5_14();
  uint64_t v4 = OUTLINED_FUNCTION_129();
  App.__allocating_init(appIdentifier:)(v4, v5);
  uint64_t v6 = specialized App.toAppDisplayName(_:appInfoResolving:isFirstParty:)(v0 + 16, 2);
  unint64_t v8 = v7;
  swift_release();
  if (!v8)
  {
    uint64_t v6 = 0LL;
    unint64_t v8 = 0xE000000000000000LL;
  }

  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000LL) == 0) {
    uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v10 = OUTLINED_FUNCTION_48();
    uint64_t v11 = (os_log_s *)__swift_project_value_buffer(v10, (uint64_t)static Logger.voiceCommands);
    uint64_t v12 = swift_bridgeObjectRetain_n(v3, 2LL);
    Logger.logObject.getter(v12);
    os_log_type_t v13 = OUTLINED_FUNCTION_73();
    if (os_log_type_enabled(v11, v13))
    {
      uint64_t v14 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v15 = OUTLINED_FUNCTION_38(32LL);
      uint64_t v22 = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      OUTLINED_FUNCTION_5_14();
      uint64_t v16 = OUTLINED_FUNCTION_129();
      uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v14 + 4);
      swift_bridgeObjectRelease_n(v3, 3LL);
      OUTLINED_FUNCTION_31_2( &dword_0,  v11,  v13,  "#AutoShortcutsSetEnablementFlow: failed to get Shortcuts app's displayName; bundleId='%s'",
        v14);
      OUTLINED_FUNCTION_30_3(v15, v19, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v15);
      OUTLINED_FUNCTION_1_0((uint64_t)v14);
    }

    else
    {

      OUTLINED_FUNCTION_19_1(v3);
    }
  }

  return OUTLINED_FUNCTION_129();
}

uint64_t AutoShortcutsSetEnablementFlow.publishChangeNotNeeded(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v10[27] = v11;
  v10[28] = v9;
  if ((v12 & 1) != 0)
  {
    os_log_type_t v13 = (void *)swift_task_alloc(dword_21CAD4);
    v10[29] = v13;
    *os_log_type_t v13 = v10;
    v13[1] = AutoShortcutsSetEnablementFlow.publishChangeNotNeeded(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:);
    OUTLINED_FUNCTION_190_0();
    OUTLINED_FUNCTION_47_0();
    return AutoShortcutsSetEnablementFlow.makeAppEnabledOutput(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:)( v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21,  a9);
  }

  else
  {
    uint64_t v23 = (void *)swift_task_alloc(dword_21CAE4);
    v10[30] = v23;
    OUTLINED_FUNCTION_176_0(v23);
    OUTLINED_FUNCTION_80_9();
    return AutoShortcutsSetEnablementFlow.makeAppDisabledOutput(appName:wasAppAlreadyEnabled:)(v24, v25, v26, v27);
  }

uint64_t AutoShortcutsSetEnablementFlow.publishChangeNotNeeded(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:)()
{
  return OUTLINED_FUNCTION_21_0();
}

{
  os_log_s *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint8_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  os_log_type_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v4 = OUTLINED_FUNCTION_141_4();
  if (*(void *)(v2 + 120))
  {
    OUTLINED_FUNCTION_157_3();
    uint64_t v5 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
    *(void *)(v2 + 248) = v5;
    uint64_t v6 = OUTLINED_FUNCTION_123( v5,  (uint64_t)AutoShortcutsSetEnablementFlow.publishChangeNotNeeded(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:));
    return dispatch thunk of OutputPublisherAsync.publish(output:)(v6, v7, v8);
  }

  else
  {
    OUTLINED_FUNCTION_108_0(v4, &demangling cache variable for type metadata for Output?);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v10 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v10, (uint64_t)static Logger.voiceCommands);
    uint64_t v11 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_31_0(v11))
    {
      char v12 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_43_5(v12);
      OUTLINED_FUNCTION_47_1(&dword_0, v0, v1, "#AutoShortcutsSetEnablementFlow: failed to make dialog output", v3);
      OUTLINED_FUNCTION_1_0((uint64_t)v3);
    }

    os_log_type_t v13 = *(void *)(v2 + 224);

    OUTLINED_FUNCTION_13_30(v13 + 288, v2 + 136);
    uint64_t v14 = *(void *)(v13 + 288);
    char v15 = *(void *)(v13 + 296);
    uint64_t v16 = *(void *)(v13 + 304);
    uint64_t v17 = *(void *)(v13 + 312);
    uint64_t v18 = *(void *)(v13 + 320);
    uint64_t v19 = *(void *)(v13 + 328);
    uint64_t v20 = *(void *)(v13 + 336);
    uint64_t v21 = *(void *)(v13 + 344);
    uint64_t v22 = *(_BYTE *)(v13 + 352);
    *(void *)(v13 + 288) = 1LL;
    *(_OWORD *)(v13 + 296) = 0u;
    *(_OWORD *)(v13 + 31outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0u;
    *(_OWORD *)(v13 + 328) = 0u;
    *(void *)(v13 + 344) = 0LL;
    *(_BYTE *)(v13 + 35outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 96;
    uint64_t v23 = OUTLINED_FUNCTION_42_20(v14, v15, v16, v17, v18, v19, v20, v21, v22);
    uint64_t v24 = static ExecuteResponse.complete()(v23);
    OUTLINED_FUNCTION_26_0(v24, &demangling cache variable for type metadata for Output?);
    return OUTLINED_FUNCTION_20_7(*(uint64_t (**)(void))(v2 + 8));
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 240));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_206_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 256) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v1 = *(void *)(v0 + 224);
  OUTLINED_FUNCTION_13_30(v1 + 288, v0 + 184);
  uint64_t v2 = *(void *)(v1 + 288);
  uint64_t v3 = *(void *)(v1 + 296);
  uint64_t v4 = *(void *)(v1 + 304);
  uint64_t v5 = *(void *)(v1 + 312);
  uint64_t v6 = *(void *)(v1 + 320);
  unint64_t v7 = *(void *)(v1 + 328);
  unint64_t v8 = *(void *)(v1 + 336);
  uint64_t v9 = *(void *)(v1 + 344);
  uint64_t v10 = *(_BYTE *)(v1 + 352);
  *(void *)(v1 + 288) = 1LL;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_OWORD *)(v1 + 31outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(void *)(v1 + 344) = 0LL;
  *(_BYTE *)(v1 + 35outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0x80;
  OUTLINED_FUNCTION_42_20(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  OUTLINED_FUNCTION_103_4();
  uint64_t v11 = OUTLINED_FUNCTION_51_13();
  OUTLINED_FUNCTION_108_0(v11, &demangling cache variable for type metadata for Output?);
  return OUTLINED_FUNCTION_20_7(*(uint64_t (**)(void))(v0 + 8));
}

{
  os_log_type_t v0;
  uint64_t v1;
  os_log_s *v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  OUTLINED_FUNCTION_28_1();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v2 = *(os_log_s **)(v1 + 256);
  uint64_t v3 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_35_27(v3, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_28_7();
  OUTLINED_FUNCTION_66();
  uint64_t v4 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_31_0(v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v6 = (void *)OUTLINED_FUNCTION_38(8LL);
    OUTLINED_FUNCTION_67_12(5.7779e-34);
    unint64_t v7 = OUTLINED_FUNCTION_184();
    *(void *)(v1 + 208) = v7;
    OUTLINED_FUNCTION_9_35(v7, v1 + 216);
    *uint64_t v6 = v7;
    OUTLINED_FUNCTION_39_16();
    OUTLINED_FUNCTION_39_16();
    OUTLINED_FUNCTION_31_2(&dword_0, v2, v0, "#AutoShortcutsSetEnablementFlow error publishing changeNotNeeded; %@", v5);
    unint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_32_20(v8);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
    OUTLINED_FUNCTION_1_0((uint64_t)v5);
  }

  else
  {
    OUTLINED_FUNCTION_39_16();
    OUTLINED_FUNCTION_39_16();
  }

  uint64_t v9 = *(void *)(v1 + 256);
  uint64_t v10 = *(void *)(v1 + 224);

  OUTLINED_FUNCTION_13_30(v10 + 288, v1 + 160);
  *(void *)(v10 + 288) = 1LL;
  OUTLINED_FUNCTION_204();
  *(void *)(v10 + 344) = 0LL;
  *(_BYTE *)(v10 + 35outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 96;
  uint64_t v20 = OUTLINED_FUNCTION_42_20(v11, v12, v13, v14, v15, v16, v17, v18, v19);
  static ExecuteResponse.complete()(v20);
  swift_errorRelease(v9);
  uint64_t v21 = __swift_destroy_boxed_opaque_existential_1Tm((void *)(v1 + 56));
  OUTLINED_FUNCTION_26_0(v21, &demangling cache variable for type metadata for Output?);
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t AutoShortcutsSetEnablementFlow.makeAppEnabledOutput(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 + 120) = a9;
  *(void *)(v10 + 128) = v9;
  *(void *)(v10 + 104) = a7;
  *(void *)(v10 + 11outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = a8;
  *(void *)(v10 + 88) = a5;
  *(void *)(v10 + 96) = a6;
  *(void *)(v10 + 7outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = a3;
  *(void *)(v10 + 80) = a4;
  *(_BYTE *)(v10 + 280) = a2;
  *(void *)(v10 + 64) = a1;
  uint64_t v11 = OUTLINED_FUNCTION_75_0();
  *(void *)(v10 + 136) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v10 + 144) = v12;
  *(void *)(v10 + 15outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = OUTLINED_FUNCTION_9_0(v12);
  uint64_t v13 = OUTLINED_FUNCTION_131_4();
  *(void *)(v10 + 160) = OUTLINED_FUNCTION_9_0(*(void *)(v13 - 8));
  uint64_t v14 = OUTLINED_FUNCTION_74_0();
  *(void *)(v10 + 168) = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  *(void *)(v10 + 176) = v15;
  *(void *)(v10 + 184) = OUTLINED_FUNCTION_9_0(v15);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_11_26(v16, v17, v18);
}

uint64_t AutoShortcutsSetEnablementFlow.makeAppEnabledOutput(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *(void *)(v10 + 152);
  uint64_t v11 = *(void *)(v10 + 160);
  uint64_t v13 = *(void *)(v10 + 136);
  uint64_t v14 = *(void *)(v10 + 144);
  static DialogPhase.completion.getter();
  OUTLINED_FUNCTION_68_1(v11, (uint64_t)CustomIntentDisambiguationItemContainer.init(items:));
  OutputGenerationManifest.listenAfterSpeaking.setter(0LL);
  (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))( v12,  enum case for RFFeatureFlags.ResponseFramework._SMART(_:),  v13);
  char v15 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_57_4(v12, *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
  if ((v15 & 1) != 0)
  {
    uint64_t v16 = *(void *)(*(void *)(v10 + 128) + 96LL);
    *(void *)(v10 + 19outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v16;
    uint64_t v17 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(*(void *)v16 + 176LL));
    *(void *)(v10 + 200) = v17;
    *uint64_t v17 = v10;
    v17[1] = AutoShortcutsSetEnablementFlow.makeAppEnabledOutput(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:);
    uint64_t v18 = OUTLINED_FUNCTION_179(*(void *)(v10 + 88));
    return OUTLINED_FUNCTION_9_25(v18, v19, v20, v21);
  }

  else
  {
    uint64_t v23 = (void *)swift_task_alloc(dword_21CADC);
    *(void *)(v10 + 27outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v23;
    *uint64_t v23 = v10;
    v23[1] = AutoShortcutsSetEnablementFlow.makeAppEnabledOutput(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:);
    return AutoShortcutsSetEnablementFlow.makeAppEnabledOutput_preRFv2(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:manifest:)( *(void *)(v10 + 64),  *(_BYTE *)(v10 + 280),  *(void *)(v10 + 72),  *(void *)(v10 + 80),  *(void *)(v10 + 88),  *(void *)(v10 + 96),  *(void *)(v10 + 104),  *(void *)(v10 + 112),  a9,  a10);
  }

uint64_t AutoShortcutsSetEnablementFlow.makeAppEnabledOutput(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:)()
{
  *(void *)(v2 + 208) = v1;
  *(void *)(v2 + 216) = v0;
  OUTLINED_FUNCTION_54_0(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v6)(void);
  OUTLINED_FUNCTION_104();
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = [*(id *)(v0 + 208) catId];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  OutputGenerationManifest.responseViewId.setter(v3);
  uint64_t v4 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(*(void *)v1 + 208LL));
  *(void *)(v0 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = v4;
  *uint64_t v4 = v0;
  v4[1] = AutoShortcutsSetEnablementFlow.makeAppEnabledOutput(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:);
  return v6();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_85_11();
  if (v1) {

  }
  else {
    *(void *)(v2 + 240) = v0;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_11_26(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_207_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 264));
  swift_release();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_98_1();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_11_26(v1, v2, v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v1 = *(void **)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 176);

  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_111_6();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_3_0(*(void *)(*(void *)v0 + 272LL));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_14_5(*(void *)(v0 + 176));
  OUTLINED_FUNCTION_111_6();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  OUTLINED_FUNCTION_28_1();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = OUTLINED_FUNCTION_48();
  uint64_t v2 = (void *)__swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_46_0();
  uint64_t v3 = OUTLINED_FUNCTION_46_0();
  Logger.logObject.getter(v3);
  uint64_t v4 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_23_7(v4))
  {
    uint64_t v5 = OUTLINED_FUNCTION_38(12LL);
    uint64_t v6 = (void *)OUTLINED_FUNCTION_38(8LL);
    OUTLINED_FUNCTION_18_28(5.7779e-34);
    unint64_t v7 = OUTLINED_FUNCTION_89_10();
    *(void *)(v0 + 56) = v7;
    OUTLINED_FUNCTION_9_35(v7, v0 + 64);
    *uint64_t v6 = v7;
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_16_35(&dword_0, v8, v9, "#AutoShortcutsSetEnablementFlow making appEnabledOutput; %@");
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_32_20(v10);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
    OUTLINED_FUNCTION_1_0(v5);
  }

  else
  {

    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  OUTLINED_FUNCTION_4_8();
  uint64_t v11 = *(void *)(v0 + 216);
  uint64_t v12 = *(void *)(v0 + 64);
  OUTLINED_FUNCTION_14_5(*(void *)(v0 + 176));
  *(void *)(v12 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0LL;
  *(_OWORD *)uint64_t v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  if (!v11) {

  }
  OUTLINED_FUNCTION_111_6();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  OUTLINED_FUNCTION_28_1();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = OUTLINED_FUNCTION_48();
  uint64_t v2 = (void *)__swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_46_0();
  uint64_t v3 = OUTLINED_FUNCTION_46_0();
  Logger.logObject.getter(v3);
  uint64_t v4 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_23_7(v4))
  {
    uint64_t v5 = OUTLINED_FUNCTION_38(12LL);
    uint64_t v6 = (void *)OUTLINED_FUNCTION_38(8LL);
    OUTLINED_FUNCTION_18_28(5.7779e-34);
    unint64_t v7 = OUTLINED_FUNCTION_89_10();
    *(void *)(v0 + 56) = v7;
    OUTLINED_FUNCTION_9_35(v7, v0 + 64);
    *uint64_t v6 = v7;
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_16_35(&dword_0, v8, v9, "#AutoShortcutsSetEnablementFlow making appEnabledOutput; %@");
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_32_20(v10);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
    OUTLINED_FUNCTION_1_0(v5);
  }

  else
  {

    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  OUTLINED_FUNCTION_4_8();
  uint64_t v11 = *(void *)(v0 + 216);
  uint64_t v12 = *(void *)(v0 + 64);
  OUTLINED_FUNCTION_14_5(*(void *)(v0 + 176));
  *(void *)(v12 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0LL;
  *(_OWORD *)uint64_t v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  if (!v11) {

  }
  OUTLINED_FUNCTION_111_6();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AutoShortcutsSetEnablementFlow.makeAppEnabledOutput(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17 = *(void **)(v16 + 120);
  uint64_t v48 = *(void *)(v16 + 112);
  uint64_t v49 = *(void *)(v16 + 208);
  uint64_t v18 = *(void *)(v16 + 104);
  uint64_t v19 = *(void **)(v16 + 80);
  uint64_t v47 = *(void *)(v16 + 72);
  id v20 = *(id *)(v16 + 240);
  Swift::String_optional v21 = DialogExecutionResult.firstDialogFullPrint()();
  if (v21.value._object) {
    uint64_t countAndFlagsBits = v21.value._countAndFlagsBits;
  }
  else {
    uint64_t countAndFlagsBits = 0LL;
  }
  uint64_t v46 = countAndFlagsBits;
  if (v21.value._object) {
    object = v21.value._object;
  }
  else {
    object = (void *)0xE000000000000000LL;
  }
  OUTLINED_FUNCTION_9_4();
  Swift::String_optional v24 = DialogExecutionResult.firstDialogFullPrint()();

  uint64_t v25 = OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_51(v25);
  OUTLINED_FUNCTION_11_11();
  uint64_t v26 = OUTLINED_FUNCTION_28_8();
  *(void *)(v16 + 248) = ResponseFactory.init()(v26);
  uint64_t v27 = type metadata accessor for WorkflowDataModels(0LL);
  *(void *)(v16 + 40) = v27;
  lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels,  255LL,  type metadata accessor for WorkflowDataModels,  (uint64_t)&protocol conformance descriptor for WorkflowDataModels);
  *(void *)(v16 + 48) = v28;
  boxed_opaque_existential_1 = (Swift::String_optional *)__swift_allocate_boxed_opaque_existential_1((void *)(v16 + 16));
  boxed_opaque_existential_1->value._uint64_t countAndFlagsBits = v18;
  boxed_opaque_existential_1->value._object = &dword_0 + 3;
  boxed_opaque_existential_1[1].value._uint64_t countAndFlagsBits = v47;
  boxed_opaque_existential_1[1].value._object = v19;
  boxed_opaque_existential_1[2].value._uint64_t countAndFlagsBits = v46;
  boxed_opaque_existential_1[2].value._object = object;
  boxed_opaque_existential_1[3].value._uint64_t countAndFlagsBits = v48;
  boxed_opaque_existential_1[3].value._object = v17;
  boxed_opaque_existential_1[4] = v24;
  swift_storeEnumTagMultiPayload(boxed_opaque_existential_1, v27, 11LL);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v31 = OUTLINED_FUNCTION_23_4(v30);
  *(_OWORD *)(v31 + 16) = xmmword_17E150;
  *(void *)(v31 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v49;
  OUTLINED_FUNCTION_224_0(v31, v32, v33);
  *(void *)(v16 + 256) = a13;
  uint64_t v34 = OUTLINED_FUNCTION_181_0((uint64_t)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(resultModel:dialog:outputGenerationManifest:));
  uint64_t v50 = v35;
  uint64_t v36 = (void *)swift_task_alloc(v34);
  *(void *)(v16 + 264) = v36;
  *uint64_t v36 = v16;
  v36[1] = AutoShortcutsSetEnablementFlow.makeAppEnabledOutput(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:);
  OUTLINED_FUNCTION_34_3();
  return v41(v37, v38, v39, v40, v41, v42, v43, v44, v46, v47, v48, v50, a13, a14, a15, a16);
}

uint64_t AutoShortcutsSetEnablementFlow.makeAppEnabledOutput_preRFv2(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:manifest:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(v11 + 168) = a10;
  *(void *)(v11 + 176) = v10;
  *(void *)(v11 + 15outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = a8;
  *(void *)(v11 + 160) = a9;
  *(void *)(v11 + 136) = a6;
  *(void *)(v11 + 144) = a7;
  *(void *)(v11 + 120) = a4;
  *(void *)(v11 + 128) = a5;
  *(_BYTE *)(v11 + 89) = a2;
  *(void *)(v11 + 104) = a1;
  *(void *)(v11 + 11outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = a3;
  uint64_t v12 = OUTLINED_FUNCTION_74_0();
  *(void *)(v11 + 184) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v11 + 19outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v13;
  *(void *)(v11 + 200) = OUTLINED_FUNCTION_9_0(v13);
  uint64_t v14 = type metadata accessor for TemplatingText(0LL);
  *(void *)(v11 + 208) = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  *(void *)(v11 + 216) = v15;
  *(void *)(v11 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = OUTLINED_FUNCTION_9_0(v15);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingSection?);
  *(void *)(v11 + 23outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = OUTLINED_FUNCTION_4_0(*(void *)(v16 - 8));
  *(void *)(v11 + 240) = OUTLINED_FUNCTION_11_0();
  uint64_t v17 = OUTLINED_FUNCTION_44_6();
  *(void *)(v11 + 248) = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  *(void *)(v11 + 256) = v18;
  *(void *)(v11 + 264) = OUTLINED_FUNCTION_4_0(v18);
  *(void *)(v11 + 27outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_11_26(v19, v20, v21);
}

uint64_t AutoShortcutsSetEnablementFlow.makeAppEnabledOutput_preRFv2(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:manifest:)()
{
  uint64_t v1 = *(void *)(v0[22] + 96LL);
  v0[35] = v1;
  uint64_t v2 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(*(void *)v1 + 184LL));
  v0[36] = v2;
  *uint64_t v2 = v0;
  v2[1] = AutoShortcutsSetEnablementFlow.makeAppEnabledOutput_preRFv2(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:manifest:);
  OUTLINED_FUNCTION_209_0();
  return OUTLINED_FUNCTION_128_4(v3, v4, v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  uint64_t (*v9)(void);
  OUTLINED_FUNCTION_77_1();
  OUTLINED_FUNCTION_10_0(v3);
  *(void *)(v0 + 296) = v1;
  swift_task_dealloc();
  if (v1)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_11_26(v4, v5, v6);
  }

  else
  {
    unint64_t v8 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(**(void **)(v0 + 280) + 216LL));
    *(void *)(v0 + 304) = v8;
    *unint64_t v8 = v2;
    v8[1] = AutoShortcutsSetEnablementFlow.makeAppEnabledOutput_preRFv2(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:manifest:);
    return v9(*(void *)(v0 + 264));
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  OUTLINED_FUNCTION_77_1();
  OUTLINED_FUNCTION_10_0(v3);
  *(void *)(v0 + 31outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v1;
  swift_task_dealloc();
  if (v1)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_11_26(v4, v5, v6);
  }

  else
  {
    unint64_t v8 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(**(void **)(v0 + 280) + 224LL));
    *(void *)(v0 + 320) = v8;
    *unint64_t v8 = v2;
    v8[1] = AutoShortcutsSetEnablementFlow.makeAppEnabledOutput_preRFv2(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:manifest:);
    uint64_t v9 = OUTLINED_FUNCTION_178_0(*(void *)(v0 + 128));
    return OUTLINED_FUNCTION_124_6(v9, v10, v11, v12);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_42_1();
  *(void *)(v2 + 328) = v1;
  *(void *)(v2 + 336) = v0;
  OUTLINED_FUNCTION_54_0(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(void);
  OUTLINED_FUNCTION_37_2();
  uint64_t v1 = *(void **)(v0 + 176);
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v2);
  uint64_t v4 = dispatch thunk of DeviceState.isCarPlay.getter(v2, v3);
  if ((v4 & 1) != 0)
  {
    OUTLINED_FUNCTION_215(*(id *)(v0 + 328), "setVisual:");
    uint64_t v5 = OUTLINED_FUNCTION_108_3();
    uint64_t v6 = OUTLINED_FUNCTION_4(v5, "patternId");
    OUTLINED_FUNCTION_111_3((uint64_t)v6);
    OUTLINED_FUNCTION_36_8();
    OUTLINED_FUNCTION_187();
    unint64_t v7 = OUTLINED_FUNCTION_64();
    OUTLINED_FUNCTION_51(v7);
    *(void *)(v0 + 39outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = OUTLINED_FUNCTION_57();
    unint64_t v8 = OUTLINED_FUNCTION_181_0((uint64_t)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(patternExecutionResult:outputGenerationManifest:));
    uint64_t v46 = v9;
    uint64_t v10 = (void *)swift_task_alloc(v8);
    uint64_t v11 = OUTLINED_FUNCTION_142_3(v10);
    return OUTLINED_FUNCTION_36_16(v11, v12, v13, v46);
  }

  else
  {
    uint64_t v15 = *(void *)(v0 + 240);
    uint64_t v16 = TemplatingResult.sections.getter(v4);
    specialized Collection.first.getter(v16, v15);
    OUTLINED_FUNCTION_20();
    type metadata accessor for TemplatingSection(0LL);
    uint64_t v17 = OUTLINED_FUNCTION_221_0(v15);
    if ((_DWORD)v17 == 1)
    {
      OUTLINED_FUNCTION_108_0(v17, &demangling cache variable for type metadata for TemplatingSection?);
      uint64_t v45 = 0LL;
      uint64_t v19 = 0xE000000000000000LL;
    }

    else
    {
      uint64_t v20 = *(void *)(v0 + 216);
      uint64_t v21 = *(void *)(v0 + 224);
      uint64_t v22 = *(void *)(v0 + 208);
      TemplatingSection.content.getter(v17);
      uint64_t v23 = OUTLINED_FUNCTION_144_2();
      uint64_t v45 = TemplatingText.text.getter(v23);
      uint64_t v19 = v24;
      uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v21, v22);
    }

    uint64_t v44 = v19;
    *(void *)(v0 + 344) = v19;
    uint64_t v25 = *(void *)(v0 + 232);
    uint64_t v26 = TemplatingResult.sections.getter(v18);
    specialized Collection.first.getter(v26, v25);
    OUTLINED_FUNCTION_20();
    uint64_t v27 = OUTLINED_FUNCTION_221_0(v25);
    if ((_DWORD)v27 == 1)
    {
      OUTLINED_FUNCTION_108_0(v27, &demangling cache variable for type metadata for TemplatingSection?);
      uint64_t v43 = 0LL;
      uint64_t v28 = 0xE000000000000000LL;
    }

    else
    {
      uint64_t v29 = *(void *)(v0 + 216);
      uint64_t v30 = *(void *)(v0 + 224);
      uint64_t v31 = *(void *)(v0 + 208);
      TemplatingSection.content.getter(v27);
      uint64_t v32 = OUTLINED_FUNCTION_144_2();
      uint64_t v43 = TemplatingText.text.getter(v32);
      uint64_t v28 = v33;
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v31);
    }

    *(void *)(v0 + 35outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v28;
    uint64_t v34 = *(void *)(v0 + 152);
    uint64_t v35 = *(void *)(v0 + 160);
    uint64_t v36 = *(void *)(v0 + 144);
    uint64_t v37 = *(void *)(v0 + 112);
    uint64_t v38 = *(void *)(v0 + 120);
    uint64_t v39 = v1[5];
    uint64_t v40 = v1[6];
    __swift_project_boxed_opaque_existential_1(v1 + 2, v39);
    uint64_t v41 = dispatch thunk of DeviceState.isWatch.getter(v39, v40);
    *(void *)(v0 + 16) = v36;
    *(void *)(v0 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = v34;
    *(void *)(v0 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v35;
    *(void *)(v0 + 40) = v45;
    *(void *)(v0 + 48) = v44;
    *(void *)(v0 + 56) = v37;
    *(void *)(v0 + 64) = v38;
    *(void *)(v0 + 7outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v43;
    *(void *)(v0 + 80) = v28;
    *(_BYTE *)(v0 + 88) = v41 & 1;
    OUTLINED_FUNCTION_52_5();
    OUTLINED_FUNCTION_28_8();
    OUTLINED_FUNCTION_16_15();
    uint64_t v42 = (void *)OUTLINED_FUNCTION_54_9();
    *(void *)(v0 + 360) = v42;
    OUTLINED_FUNCTION_17_9( v42,  (uint64_t)AutoShortcutsSetEnablementFlow.makeAppEnabledOutput_preRFv2(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:manifest:));
    OUTLINED_FUNCTION_34_3();
    return AutoShortcutAppEnabledVisual.data.getter();
  }

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  Class isa;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t (*v17)(uint64_t);
  uint64_t v1 = v0[41];
  outlined bridged method (mbnn) of @objc PatternExecutionResult.visual.setter(v0[48], v0[47], (void *)v1);
  uint64_t v3 = OUTLINED_FUNCTION_4(v2, "dialog");
  uint64_t v4 = OUTLINED_FUNCTION_72( (uint64_t)v3,  &lazy cache variable for type metadata for PatternExecutionDialog,  &OBJC_CLASS___PatternExecutionDialog_ptr);
  OUTLINED_FUNCTION_154_2(v4);
  OUTLINED_FUNCTION_50_6();
  if (v1 >> 62)
  {
    OUTLINED_FUNCTION_66_14();
    uint64_t v10 = OUTLINED_FUNCTION_191_0();
    uint64_t v5 = OUTLINED_FUNCTION_20();
    if (v10) {
      goto LABEL_3;
    }
LABEL_7:
    OUTLINED_FUNCTION_20();
    goto LABEL_8;
  }

  OUTLINED_FUNCTION_208_0();
  if (!v3) {
    goto LABEL_7;
  }
LABEL_3:
  OUTLINED_FUNCTION_128_2(v5, (v1 & 0xC000000000000001LL) == 0);
  if ((v1 & 0xC000000000000001LL) != 0) {
    uint64_t v6 = OUTLINED_FUNCTION_83_3();
  }
  else {
    uint64_t v6 = (uint64_t)OUTLINED_FUNCTION_193_0();
  }
  unint64_t v7 = (void *)v6;
  unint64_t v8 = OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_72( v8,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
  Class isa = OUTLINED_FUNCTION_106_5().super.super.isa;
  OUTLINED_FUNCTION_3_5((uint64_t)isa, "setSpokenOnly:");

LABEL_8:
  uint64_t v11 = OUTLINED_FUNCTION_108_3();
  uint64_t v12 = OUTLINED_FUNCTION_4(v11, "patternId");
  OUTLINED_FUNCTION_111_3((uint64_t)v12);
  OUTLINED_FUNCTION_36_8();
  OUTLINED_FUNCTION_187();
  uint64_t v13 = OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_51(v13);
  v0[49] = OUTLINED_FUNCTION_57();
  uint64_t v14 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(patternExecutionResult:outputGenerationManifest:));
  uint64_t v15 = OUTLINED_FUNCTION_142_3(v14);
  return v17(v15);
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 408) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_121_6();
  OUTLINED_FUNCTION_180_0();
  OUTLINED_FUNCTION_123_8(v0);
  OUTLINED_FUNCTION_123_8(v1);
  swift_task_dealloc();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_20_7(*(uint64_t (**)(void))(v2 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  OUTLINED_FUNCTION_28_1();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = OUTLINED_FUNCTION_48();
  uint64_t v2 = (void *)__swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_46_0();
  uint64_t v3 = OUTLINED_FUNCTION_46_0();
  Logger.logObject.getter(v3);
  uint64_t v4 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_23_7(v4))
  {
    uint64_t v5 = OUTLINED_FUNCTION_38(12LL);
    uint64_t v6 = (void *)OUTLINED_FUNCTION_38(8LL);
    OUTLINED_FUNCTION_18_28(5.7779e-34);
    unint64_t v7 = OUTLINED_FUNCTION_89_10();
    *(void *)(v0 + 96) = v7;
    OUTLINED_FUNCTION_9_35(v7, v0 + 104);
    *uint64_t v6 = v7;
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_16_35(&dword_0, v8, v9, "#AutoShortcutsSetEnablementFlow making appEnabledOutput; %@");
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_32_20(v10);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
    OUTLINED_FUNCTION_1_0(v5);

    OUTLINED_FUNCTION_4_8();
  }

  else
  {
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  OUTLINED_FUNCTION_23_30();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  OUTLINED_FUNCTION_28_1();
  OUTLINED_FUNCTION_14_5(*(void *)(v0 + 256));
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = OUTLINED_FUNCTION_48();
  uint64_t v2 = (void *)__swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_46_0();
  uint64_t v3 = OUTLINED_FUNCTION_46_0();
  Logger.logObject.getter(v3);
  uint64_t v4 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_23_7(v4))
  {
    uint64_t v5 = OUTLINED_FUNCTION_38(12LL);
    uint64_t v6 = (void *)OUTLINED_FUNCTION_38(8LL);
    OUTLINED_FUNCTION_18_28(5.7779e-34);
    unint64_t v7 = OUTLINED_FUNCTION_89_10();
    *(void *)(v0 + 96) = v7;
    OUTLINED_FUNCTION_9_35(v7, v0 + 104);
    *uint64_t v6 = v7;
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_16_35(&dword_0, v8, v9, "#AutoShortcutsSetEnablementFlow making appEnabledOutput; %@");
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_32_20(v10);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
    OUTLINED_FUNCTION_1_0(v5);

    OUTLINED_FUNCTION_4_8();
  }

  else
  {
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  OUTLINED_FUNCTION_23_30();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  void *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  OUTLINED_FUNCTION_28_1();
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 256) + 8LL);
  v3(*(void *)(v0 + 264), v2);
  v3(v1, v2);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v4 = OUTLINED_FUNCTION_48();
  uint64_t v5 = (void *)__swift_project_value_buffer(v4, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_46_0();
  uint64_t v6 = OUTLINED_FUNCTION_46_0();
  Logger.logObject.getter(v6);
  unint64_t v7 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_23_7(v7))
  {
    unint64_t v8 = OUTLINED_FUNCTION_38(12LL);
    uint64_t v9 = (void *)OUTLINED_FUNCTION_38(8LL);
    OUTLINED_FUNCTION_18_28(5.7779e-34);
    uint64_t v10 = OUTLINED_FUNCTION_89_10();
    *(void *)(v0 + 96) = v10;
    OUTLINED_FUNCTION_9_35(v10, v0 + 104);
    *uint64_t v9 = v10;
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_16_35(&dword_0, v11, v12, "#AutoShortcutsSetEnablementFlow making appEnabledOutput; %@");
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_32_20(v13);
    OUTLINED_FUNCTION_1_0((uint64_t)v9);
    OUTLINED_FUNCTION_1_0(v8);

    OUTLINED_FUNCTION_4_8();
  }

  else
  {
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  OUTLINED_FUNCTION_23_30();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  OUTLINED_FUNCTION_28_1();
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 272);

  OUTLINED_FUNCTION_123_8(v1);
  OUTLINED_FUNCTION_123_8(v2);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = OUTLINED_FUNCTION_48();
  uint64_t v4 = (void *)__swift_project_value_buffer(v3, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_46_0();
  uint64_t v5 = OUTLINED_FUNCTION_46_0();
  Logger.logObject.getter(v5);
  uint64_t v6 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_23_7(v6))
  {
    unint64_t v7 = OUTLINED_FUNCTION_38(12LL);
    unint64_t v8 = (void *)OUTLINED_FUNCTION_38(8LL);
    OUTLINED_FUNCTION_18_28(5.7779e-34);
    uint64_t v9 = OUTLINED_FUNCTION_89_10();
    *(void *)(v0 + 96) = v9;
    OUTLINED_FUNCTION_9_35(v9, v0 + 104);
    *unint64_t v8 = v9;
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_16_35(&dword_0, v10, v11, "#AutoShortcutsSetEnablementFlow making appEnabledOutput; %@");
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_32_20(v12);
    OUTLINED_FUNCTION_1_0((uint64_t)v8);
    OUTLINED_FUNCTION_1_0(v7);

    OUTLINED_FUNCTION_4_8();
  }

  else
  {
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  OUTLINED_FUNCTION_23_30();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  OUTLINED_FUNCTION_28_1();
  OUTLINED_FUNCTION_121_6();
  OUTLINED_FUNCTION_180_0();
  OUTLINED_FUNCTION_123_8(v0);
  OUTLINED_FUNCTION_123_8(v1);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = OUTLINED_FUNCTION_48();
  uint64_t v4 = (void *)__swift_project_value_buffer(v3, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_46_0();
  uint64_t v5 = OUTLINED_FUNCTION_46_0();
  Logger.logObject.getter(v5);
  uint64_t v6 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_23_7(v6))
  {
    unint64_t v7 = OUTLINED_FUNCTION_38(12LL);
    unint64_t v8 = (void *)OUTLINED_FUNCTION_38(8LL);
    OUTLINED_FUNCTION_18_28(5.7779e-34);
    uint64_t v9 = OUTLINED_FUNCTION_89_10();
    *(void *)(v2 + 96) = v9;
    OUTLINED_FUNCTION_9_35(v9, v2 + 104);
    *unint64_t v8 = v9;
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_16_35(&dword_0, v10, v11, "#AutoShortcutsSetEnablementFlow making appEnabledOutput; %@");
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_32_20(v12);
    OUTLINED_FUNCTION_1_0((uint64_t)v8);
    OUTLINED_FUNCTION_1_0(v7);

    OUTLINED_FUNCTION_4_8();
  }

  else
  {
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  OUTLINED_FUNCTION_23_30();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t AutoShortcutsSetEnablementFlow.makeAppEnabledOutput_preRFv2(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:manifest:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  a18 = v21;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  a18 = (void *)*v21;
  uint64_t v28 = a18;
  OUTLINED_FUNCTION_10_0(&a18);
  v28[46] = v20;
  swift_task_dealloc();
  OUTLINED_FUNCTION_28_4();
  OUTLINED_FUNCTION_69();
  OUTLINED_FUNCTION_2_6();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_2();
  if (!v20)
  {
    v28[47] = v25;
    v28[48] = v27;
  }

  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_47_0();
  return swift_task_switch(v29, v30, v31);
}

uint64_t AutoShortcutsSetEnablementFlow.makeAppDisabledOutput(appName:wasAppAlreadyEnabled:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v5 + 288) = a4;
  *(void *)(v5 + 88) = a3;
  *(void *)(v5 + 96) = v4;
  *(void *)(v5 + 7outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = a1;
  *(void *)(v5 + 80) = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  *(void *)(v5 + 104) = OUTLINED_FUNCTION_9_0(*(void *)(v6 - 8));
  uint64_t v7 = OUTLINED_FUNCTION_44_6();
  *(void *)(v5 + 11outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v5 + 120) = v8;
  *(void *)(v5 + 128) = OUTLINED_FUNCTION_4_0(v8);
  *(void *)(v5 + 136) = OUTLINED_FUNCTION_11_0();
  uint64_t v9 = OUTLINED_FUNCTION_131_4();
  *(void *)(v5 + 144) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v5 + 15outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v10;
  *(void *)(v5 + 160) = OUTLINED_FUNCTION_4_0(v10);
  *(void *)(v5 + 168) = OUTLINED_FUNCTION_11_0();
  uint64_t v11 = OUTLINED_FUNCTION_74_0();
  *(void *)(v5 + 176) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v5 + 184) = v12;
  *(void *)(v5 + 19outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = OUTLINED_FUNCTION_9_0(v12);
  uint64_t v13 = OUTLINED_FUNCTION_75_0();
  *(void *)(v5 + 200) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v5 + 208) = v14;
  *(void *)(v5 + 216) = OUTLINED_FUNCTION_9_0(v14);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutsSetEnablementFlow.makeAppDisabledOutput(appName:wasAppAlreadyEnabled:)()
{
  uint64_t v1 = v0[26];
  uint64_t v2 = v0[12];
  OUTLINED_FUNCTION_158_3( enum case for RFFeatureFlags.ResponseFramework._SMART(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 104));
  char v3 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  uint64_t v4 = **(void **)(v2 + 96);
  if ((v3 & 1) != 0)
  {
    uint64_t v5 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v4 + 192));
    v0[28] = (uint64_t)v5;
    *uint64_t v5 = v0;
    v5[1] = AutoShortcutsSetEnablementFlow.makeAppDisabledOutput(appName:wasAppAlreadyEnabled:);
    uint64_t v6 = OUTLINED_FUNCTION_179(v0[10]);
    return OUTLINED_FUNCTION_8_13(v6, v7, v8, v9);
  }

  else
  {
    uint64_t v11 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v4 + 200));
    v0[34] = (uint64_t)v11;
    void *v11 = v0;
    v11[1] = AutoShortcutsSetEnablementFlow.makeAppDisabledOutput(appName:wasAppAlreadyEnabled:);
    OUTLINED_FUNCTION_209_0();
    return OUTLINED_FUNCTION_4_24(v12, v13, v14, v15, v16);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_85_11();
  if (!v1) {
    *(void *)(v2 + 240) = v0;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_11_26(v3, v4, v5);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 264));
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 184);

  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_53_20();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 280) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 96);
  char v3 = *(void *)(v0 + 104);
  uint64_t v5 = *(void **)(v0 + 72);
  OUTLINED_FUNCTION_75(v1, *(void *)(v0 + 128), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
  uint64_t v6 = OUTLINED_FUNCTION_56_3();
  uint64_t v9 = OUTLINED_FUNCTION_220(v3, v7, v8, v6);
  *(_OWORD *)(v0 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0u;
  *(void *)(v0 + 48) = 0LL;
  *(_OWORD *)(v0 + 16) = 0u;
  v5[3] = v9;
  v5[4] = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v5);
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v1,  v4 + 16,  1LL,  _swiftEmptyArrayStorage,  0LL,  1LL,  v3,  _swiftEmptyArrayStorage,  v0 + 16);
  outlined destroy of Any?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of Any?(v3, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_53_20();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_20_7(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  os_log_type_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  OUTLINED_FUNCTION_28_1();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = *(void **)(v0 + 232);
  uint64_t v2 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_35_27(v2, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_28_7();
  OUTLINED_FUNCTION_66();
  char v3 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_23_7(v3))
  {
    uint64_t v4 = OUTLINED_FUNCTION_38(12LL);
    uint64_t v5 = (void *)OUTLINED_FUNCTION_38(8LL);
    OUTLINED_FUNCTION_18_28(5.7779e-34);
    uint64_t v6 = OUTLINED_FUNCTION_89_10();
    *(void *)(v0 + 64) = v6;
    OUTLINED_FUNCTION_9_35(v6, v0 + 72);
    *uint64_t v5 = v6;
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_16_35(&dword_0, v7, v8, "#AutoShortcutsSetEnablementFlow making appDisabledOutput; %@");
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_32_20(v9);
    OUTLINED_FUNCTION_1_0((uint64_t)v5);
    OUTLINED_FUNCTION_1_0(v4);

    OUTLINED_FUNCTION_4_8();
  }

  else
  {
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  uint64_t v10 = *(void *)(v0 + 72);
  *(void *)(v10 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0LL;
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  OUTLINED_FUNCTION_53_20();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  os_log_type_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  OUTLINED_FUNCTION_28_1();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = *(void **)(v0 + 280);
  uint64_t v2 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_35_27(v2, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_28_7();
  OUTLINED_FUNCTION_66();
  char v3 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_23_7(v3))
  {
    uint64_t v4 = OUTLINED_FUNCTION_38(12LL);
    uint64_t v5 = (void *)OUTLINED_FUNCTION_38(8LL);
    OUTLINED_FUNCTION_18_28(5.7779e-34);
    uint64_t v6 = OUTLINED_FUNCTION_89_10();
    *(void *)(v0 + 56) = v6;
    OUTLINED_FUNCTION_9_35(v6, v0 + 64);
    *uint64_t v5 = v6;
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_16_35(&dword_0, v7, v8, "#AutoShortcutsSetEnablementFlow making appDisabledOutput; %@");
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_32_20(v9);
    OUTLINED_FUNCTION_1_0((uint64_t)v5);
    OUTLINED_FUNCTION_1_0(v4);

    OUTLINED_FUNCTION_4_8();
  }

  else
  {
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  uint64_t v10 = *(void *)(v0 + 72);
  *(void *)(v10 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0LL;
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  OUTLINED_FUNCTION_53_20();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v0 + 8));
}

void AutoShortcutsSetEnablementFlow.makeAppDisabledOutput(appName:wasAppAlreadyEnabled:)()
{
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 152);
  id v5 = *(id *)(v0 + 240);
  static DialogPhase.confirmation.getter(v5, v6, v7);
  id v8 = [v5 catId];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  OUTLINED_FUNCTION_68_1(v2, (uint64_t)CustomIntentDisambiguationItemContainer.init(items:));
  OutputGenerationManifest.responseViewId.setter(v9);
  OUTLINED_FUNCTION_57_4(v1, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  uint64_t v10 = OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_51(v10);
  *(void *)(v0 + 248) = OUTLINED_FUNCTION_57();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v12 = OUTLINED_FUNCTION_23_4(v11);
  *(_OWORD *)(v12 + 16) = xmmword_17E150;
  *(void *)(v12 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v5;
  uint64_t v17 = v12;
  specialized Array._endMutation()(v12, v13, v14);
  *(void *)(v0 + 256) = v17;
  uint64_t v15 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:));
  *(void *)(v0 + 264) = v15;
  *uint64_t v15 = v0;
  v15[1] = AutoShortcutsSetEnablementFlow.makeAppDisabledOutput(appName:wasAppAlreadyEnabled:);
  OUTLINED_FUNCTION_24_7();
  __asm { BR              X3 }

uint64_t AutoShortcutsSetEnablementFlow.publishEnablementUpdated(wasEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)( char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v10[18] = v9;
  if ((a1 & 1) != 0)
  {
    uint64_t v11 = (void *)swift_task_alloc(dword_21CAD4);
    v10[19] = v11;
    void *v11 = v10;
    v11[1] = AutoShortcutsSetEnablementFlow.publishEnablementUpdated(wasEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:);
    OUTLINED_FUNCTION_190_0();
    OUTLINED_FUNCTION_47_0();
    return AutoShortcutsSetEnablementFlow.makeAppEnabledOutput(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:)( v12,  v13,  v14,  v15,  v16,  v17,  v18,  v19,  a9);
  }

  else
  {
    uint64_t v21 = (void *)swift_task_alloc(dword_21CAE4);
    v10[20] = v21;
    OUTLINED_FUNCTION_176_0(v21);
    OUTLINED_FUNCTION_80_9();
    return AutoShortcutsSetEnablementFlow.makeAppDisabledOutput(appName:wasAppAlreadyEnabled:)(v22, v23, v24, v25);
  }

uint64_t AutoShortcutsSetEnablementFlow.publishEnablementUpdated(wasEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)()
{
  return OUTLINED_FUNCTION_21_0();
}

{
  os_log_s *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint8_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;
  os_log_type_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v4 = OUTLINED_FUNCTION_141_4();
  if (*(void *)(v2 + 120))
  {
    OUTLINED_FUNCTION_157_3();
    id v5 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
    *(void *)(v2 + 168) = v5;
    OUTLINED_FUNCTION_123( v5,  (uint64_t)AutoShortcutsSetEnablementFlow.publishEnablementUpdated(wasEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:));
    return OUTLINED_FUNCTION_67_2();
  }

  else
  {
    OUTLINED_FUNCTION_108_0(v4, &demangling cache variable for type metadata for Output?);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v7 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v7, (uint64_t)static Logger.voiceCommands);
    id v8 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_31_0(v8))
    {
      uint64_t v9 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_43_5(v9);
      OUTLINED_FUNCTION_47_1(&dword_0, v0, v1, "#AutoShortcutsSetEnablementFlow: failed making app dialog output", v3);
      OUTLINED_FUNCTION_1_0((uint64_t)v3);
    }

    OUTLINED_FUNCTION_26_0(v10, &demangling cache variable for type metadata for Output?);
    return (*(uint64_t (**)(uint64_t))(v2 + 8))(1LL);
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 160));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 176) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 56));
  OUTLINED_FUNCTION_108_0(v1, &demangling cache variable for type metadata for Output?);
  return OUTLINED_FUNCTION_8_4(7LL, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t AutoShortcutsSetEnablementFlow.publishEnablementUpdated(wasEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v14 = *(os_log_s **)(v13 + 176);
  uint64_t v15 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_35_27(v15, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_28_7();
  OUTLINED_FUNCTION_66();
  os_log_type_t v16 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_31_0(v16))
  {
    uint64_t v17 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v18 = (void *)OUTLINED_FUNCTION_38(8LL);
    OUTLINED_FUNCTION_67_12(5.7779e-34);
    uint64_t v19 = OUTLINED_FUNCTION_184();
    *(void *)(v13 + 136) = v19;
    OUTLINED_FUNCTION_9_35(v19, v13 + 144);
    *uint64_t v18 = v19;
    OUTLINED_FUNCTION_39_16();
    OUTLINED_FUNCTION_39_16();
    OUTLINED_FUNCTION_31_2( &dword_0,  v14,  v12,  "#AutoShortcutsSetEnablementFlow error publishing enablementUpdated; %@",
      v17);
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_32_20(v20);
    OUTLINED_FUNCTION_1_0((uint64_t)v18);
    OUTLINED_FUNCTION_1_0((uint64_t)v17);
  }

  else
  {

    OUTLINED_FUNCTION_39_16();
    OUTLINED_FUNCTION_39_16();
  }

  swift_errorRelease(*(void *)(v13 + 176));
  uint64_t v21 = OUTLINED_FUNCTION_51_13();
  OUTLINED_FUNCTION_108_0(v21, &demangling cache variable for type metadata for Output?);
  OUTLINED_FUNCTION_47_0();
  return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12);
}

uint64_t AutoShortcutsSetEnablementFlow.publishChangeDeclinedAck(appName:isStillEnabled:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v5 + 496) = a4;
  *(void *)(v5 + 296) = a3;
  *(void *)(v5 + 304) = v4;
  *(void *)(v5 + 280) = a1;
  *(void *)(v5 + 288) = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  *(void *)(v5 + 31outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = OUTLINED_FUNCTION_9_0(*(void *)(v6 - 8));
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  *(void *)(v5 + 320) = OUTLINED_FUNCTION_9_0(*(void *)(v7 - 8));
  uint64_t v8 = OUTLINED_FUNCTION_44_6();
  *(void *)(v5 + 328) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v5 + 336) = v9;
  *(void *)(v5 + 344) = OUTLINED_FUNCTION_9_0(v9);
  uint64_t v10 = OUTLINED_FUNCTION_131_4();
  *(void *)(v5 + 35outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v5 + 360) = v11;
  *(void *)(v5 + 368) = OUTLINED_FUNCTION_4_0(v11);
  *(void *)(v5 + 376) = OUTLINED_FUNCTION_11_0();
  uint64_t v12 = OUTLINED_FUNCTION_74_0();
  *(void *)(v5 + 384) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v5 + 39outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v13;
  *(void *)(v5 + 400) = OUTLINED_FUNCTION_9_0(v13);
  uint64_t v14 = OUTLINED_FUNCTION_75_0();
  *(void *)(v5 + 408) = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  *(void *)(v5 + 416) = v15;
  *(void *)(v5 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = OUTLINED_FUNCTION_9_0(v15);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutsSetEnablementFlow.publishChangeDeclinedAck(appName:isStillEnabled:)()
{
  uint64_t v1 = v0[52];
  uint64_t v2 = v0[38];
  OUTLINED_FUNCTION_158_3( enum case for RFFeatureFlags.ResponseFramework._SMART(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 104));
  char v3 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  uint64_t v4 = **(void **)(v2 + 96);
  if ((v3 & 1) != 0)
  {
    uint64_t v5 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v4 + 160));
    v0[54] = (uint64_t)v5;
    *uint64_t v5 = v0;
    v5[1] = AutoShortcutsSetEnablementFlow.publishChangeDeclinedAck(appName:isStillEnabled:);
    uint64_t v6 = OUTLINED_FUNCTION_179(v0[36]);
    return OUTLINED_FUNCTION_8_13(v6, v7, v8, v9);
  }

  else
  {
    uint64_t v11 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v4 + 168));
    v0[59] = (uint64_t)v11;
    void *v11 = v0;
    v11[1] = AutoShortcutsSetEnablementFlow.publishChangeDeclinedAck(appName:isStillEnabled:);
    OUTLINED_FUNCTION_209_0();
    return OUTLINED_FUNCTION_4_24(v12, v13, v14, v15, v16);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_42_1();
  *(void *)(v1 + 440) = v0;
  OUTLINED_FUNCTION_54_0(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 464));
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  OUTLINED_FUNCTION_104();
  uint64_t v2 = *(void *)(v0 + 392);
  uint64_t v1 = *(void *)(v0 + 400);

  OUTLINED_FUNCTION_57_4(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  outlined init with take of AceServiceInvokerAsync((__int128 *)(v0 + 56), v0 + 16);
  OUTLINED_FUNCTION_82_9(*(void *)(v0 + 304));
  char v3 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 480) = v3;
  uint64_t v4 = OUTLINED_FUNCTION_92( v3,  (uint64_t)AutoShortcutsSetEnablementFlow.publishChangeDeclinedAck(appName:isStillEnabled:));
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v4, v5, v6);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 472));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v3 = *(void *)(v1 + 320);
  if (__swift_getEnumTagSinglePayload(v3, 1LL, *(void *)(v1 + 328)) == 1)
  {
    outlined destroy of Any?(v3, &demangling cache variable for type metadata for TemplatingResult?);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v4 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v4, (uint64_t)static Logger.voiceCommands);
    uint64_t v5 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_45_0(v5))
    {
      uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_26_1(v6);
      OUTLINED_FUNCTION_1_0(v0);
    }

    OUTLINED_FUNCTION_235_0();
    OUTLINED_FUNCTION_13_30(v2 + 288, v1 + 176);
    OUTLINED_FUNCTION_5_40();
    OUTLINED_FUNCTION_103_4();
    OUTLINED_FUNCTION_55_20();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_33_0();
    OUTLINED_FUNCTION_31();
    return OUTLINED_FUNCTION_39_5(*(uint64_t (**)(void))(v1 + 8));
  }

  else
  {
    uint64_t v11 = *(void *)(v1 + 336);
    uint64_t v10 = *(void *)(v1 + 344);
    uint64_t v13 = *(void *)(v1 + 304);
    uint64_t v12 = *(void *)(v1 + 312);
    OUTLINED_FUNCTION_75(v10, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 32));
    uint64_t v14 = OUTLINED_FUNCTION_56_3();
    uint64_t v17 = OUTLINED_FUNCTION_220(v12, v15, v16, v14);
    *(_OWORD *)(v1 + 15outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0u;
    *(void *)(v1 + 168) = 0LL;
    *(_OWORD *)(v1 + 136) = 0u;
    *(void *)(v1 + 120) = v17;
    *(void *)(v1 + 128) = &protocol witness table for AceOutput;
    __swift_allocate_boxed_opaque_existential_1((void *)(v1 + 96));
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)( v10,  v13 + 16,  1LL,  _swiftEmptyArrayStorage,  0LL,  1LL,  v12,  _swiftEmptyArrayStorage,  v1 + 136,  0LL);
    outlined destroy of Any?(v1 + 136, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of Any?(v12, &demangling cache variable for type metadata for NLContextUpdate?);
    OUTLINED_FUNCTION_20_23(v10, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
    outlined init with take of AceServiceInvokerAsync((__int128 *)(v1 + 96), v1 + 16);
    OUTLINED_FUNCTION_82_9(*(void *)(v1 + 304));
    uint64_t v18 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
    *(void *)(v1 + 480) = v18;
    uint64_t v19 = OUTLINED_FUNCTION_92( v18,  (uint64_t)AutoShortcutsSetEnablementFlow.publishChangeDeclinedAck(appName:isStillEnabled:));
    return dispatch thunk of OutputPublisherAsync.publish(output:)(v19, v20, v21);
  }

{
  OUTLINED_FUNCTION_89_11();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v1 = *(void *)(v0 + 304);
  OUTLINED_FUNCTION_13_30(v1 + 288, v0 + 200);
  uint64_t v2 = *(void *)(v1 + 288);
  char v3 = *(void *)(v1 + 296);
  uint64_t v4 = *(void *)(v1 + 304);
  uint64_t v5 = *(void *)(v1 + 312);
  uint64_t v6 = *(void *)(v1 + 320);
  uint64_t v7 = *(void *)(v1 + 328);
  uint64_t v8 = *(void *)(v1 + 336);
  uint64_t v9 = *(void *)(v1 + 344);
  uint64_t v10 = *(_BYTE *)(v1 + 352);
  *(void *)(v1 + 288) = 1LL;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_OWORD *)(v1 + 31outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(void *)(v1 + 344) = 0LL;
  *(_BYTE *)(v1 + 35outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0x80;
  uint64_t v11 = OUTLINED_FUNCTION_42_20(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  static ExecuteResponse.complete()(v11);
  OUTLINED_FUNCTION_98_1();
  OUTLINED_FUNCTION_55_20();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_20_7(*(uint64_t (**)(void))(v0 + 8));
}

{
  os_log_type_t v0;
  uint64_t v1;
  os_log_s *v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  OUTLINED_FUNCTION_28_1();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v2 = *(os_log_s **)(v1 + 488);
  char v3 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_35_27(v3, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_28_7();
  OUTLINED_FUNCTION_66();
  uint64_t v4 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_31_0(v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v6 = (void *)OUTLINED_FUNCTION_38(8LL);
    OUTLINED_FUNCTION_67_12(5.7779e-34);
    uint64_t v7 = OUTLINED_FUNCTION_184();
    *(void *)(v1 + 27outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v7;
    OUTLINED_FUNCTION_9_35(v7, v1 + 280);
    *uint64_t v6 = v7;
    OUTLINED_FUNCTION_39_16();
    OUTLINED_FUNCTION_39_16();
    OUTLINED_FUNCTION_31_2( &dword_0,  v2,  v0,  "#AutoShortcutsSetEnablementFlow error publishing changeDeclinedAck; %@",
      v5);
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_32_20(v8);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
    OUTLINED_FUNCTION_1_0((uint64_t)v5);
  }

  else
  {
    OUTLINED_FUNCTION_39_16();
    OUTLINED_FUNCTION_39_16();
  }

  uint64_t v9 = *(void *)(v1 + 304);

  OUTLINED_FUNCTION_13_30(v9 + 288, v1 + 248);
  *(void *)(v9 + 288) = 1LL;
  OUTLINED_FUNCTION_204();
  *(void *)(v9 + 344) = 0LL;
  *(_BYTE *)(v9 + 35outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 96;
  OUTLINED_FUNCTION_42_20(v10, v11, v12, v13, v14, v15, v16, v17, v18);
  OUTLINED_FUNCTION_83_1();
  OUTLINED_FUNCTION_39_16();
  OUTLINED_FUNCTION_51_13();
  OUTLINED_FUNCTION_55_20();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t AutoShortcutsSetEnablementFlow.publishChangeDeclinedAck(appName:isStillEnabled:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15 = *(void **)(v13 + 440);
  if (v15)
  {
    uint64_t v17 = *(void *)(v13 + 368);
    uint64_t v16 = *(void *)(v13 + 376);
    uint64_t v19 = *(void *)(v13 + 352);
    uint64_t v18 = *(void *)(v13 + 360);
    static DialogPhase.completion.getter();
    id v20 = [v15 catId];
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v17, v16, v19);
    OUTLINED_FUNCTION_68_1(v17, (uint64_t)CustomIntentDisambiguationItemContainer.init(items:));
    OutputGenerationManifest.responseViewId.setter(v21);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v19);
    uint64_t v22 = OUTLINED_FUNCTION_64();
    OUTLINED_FUNCTION_51(v22);
    *(void *)(v13 + 448) = OUTLINED_FUNCTION_57();
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v24 = OUTLINED_FUNCTION_23_4(v23);
    *(_OWORD *)(v24 + 16) = xmmword_17E150;
    *(void *)(v24 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v15;
    OUTLINED_FUNCTION_224_0(v24, v25, v26);
    *(void *)(v13 + 456) = a13;
    id v28 = v15;
    uint64_t v29 = (void *)swift_task_alloc(v27);
    *(void *)(v13 + 464) = v29;
    *uint64_t v29 = v13;
    v29[1] = AutoShortcutsSetEnablementFlow.publishChangeDeclinedAck(appName:isStillEnabled:);
    return OUTLINED_FUNCTION_36_16(v13 + 56, a13, *(void *)(v13 + 400), v36);
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v31 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v31, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v32 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_45_0(v32))
    {
      uint64_t v33 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_26_1(v33);
      OUTLINED_FUNCTION_1_0(0LL);
    }

    OUTLINED_FUNCTION_235_0();
    OUTLINED_FUNCTION_13_30(v14 + 288, v13 + 224);
    OUTLINED_FUNCTION_5_40();
    OUTLINED_FUNCTION_103_4();
    OUTLINED_FUNCTION_55_20();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_33_0();
    OUTLINED_FUNCTION_31();
    return OUTLINED_FUNCTION_3_2(*(uint64_t (**)(void))(v13 + 8));
  }

uint64_t AutoShortcutsSetEnablementFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AutoShortcutsSetEnablementFlow();
  lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( &lazy protocol witness table cache variable for type AutoShortcutsSetEnablementFlow and conformance AutoShortcutsSetEnablementFlow,  v5,  (uint64_t (*)(uint64_t))type metadata accessor for AutoShortcutsSetEnablementFlow,  (uint64_t)&protocol conformance descriptor for AutoShortcutsSetEnablementFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v6);
}

Swift::Bool __swiftcall DeviceState.canOutputAppShortcutPhrases()()
{
  uint64_t v29 = v0;
  uint64_t v30 = v1;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v28 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v28 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v28 - v13;
  char v16 = dispatch thunk of DeviceState.isPhone.getter(v12, v15);
  OUTLINED_FUNCTION_76_9((uint64_t)v14);
  if ((v16 & 1) != 0)
  {
    char v17 = 1;
  }

  else
  {
    uint64_t v18 = OUTLINED_FUNCTION_226_0();
    char v17 = dispatch thunk of DeviceState.isPad.getter(v18);
  }

  OUTLINED_FUNCTION_139_4((uint64_t)v14);
  OUTLINED_FUNCTION_76_9((uint64_t)v11);
  if ((v17 & 1) != 0)
  {
    OUTLINED_FUNCTION_139_4((uint64_t)v11);
    OUTLINED_FUNCTION_76_9((uint64_t)v8);
  }

  else
  {
    uint64_t v19 = OUTLINED_FUNCTION_226_0();
    char v21 = dispatch thunk of DeviceState.isWatch.getter(v19, v20);
    OUTLINED_FUNCTION_139_4((uint64_t)v11);
    OUTLINED_FUNCTION_76_9((uint64_t)v8);
    if ((v21 & 1) == 0)
    {
      uint64_t v25 = OUTLINED_FUNCTION_226_0();
      char v27 = dispatch thunk of DeviceState.isMac.getter(v25, v26);
      OUTLINED_FUNCTION_139_4((uint64_t)v8);
      OUTLINED_FUNCTION_76_9((uint64_t)v5);
      if ((v27 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }

  OUTLINED_FUNCTION_139_4((uint64_t)v8);
  OUTLINED_FUNCTION_76_9((uint64_t)v5);
LABEL_8:
  uint64_t v22 = OUTLINED_FUNCTION_226_0();
  dispatch thunk of DeviceState.isCarPlay.getter(v22, v23);
LABEL_9:
  OUTLINED_FUNCTION_139_4((uint64_t)v5);
  OUTLINED_FUNCTION_24_0();
  return result;
}

uint64_t AutoShortcutsSetEnablementFlow.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 240));
  swift_release();
  OUTLINED_FUNCTION_42_20( *(void *)(v0 + 288),  *(void *)(v0 + 296),  *(void *)(v0 + 304),  *(void *)(v0 + 312),  *(void *)(v0 + 320),  *(void *)(v0 + 328),  *(void *)(v0 + 336),  *(void *)(v0 + 344),  *(_BYTE *)(v0 + 352));
  return v0;
}

uint64_t AutoShortcutsSetEnablementFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 353LL, 7LL);
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance AutoShortcutsSetEnablementFlow( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to Flow.onAsync(input:)[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for Flow.onAsync(input:) in conformance AutoShortcutsSetEnablementFlow;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance AutoShortcutsSetEnablementFlow(uint64_t a1)
{
  return OUTLINED_FUNCTION_8_4(a1, v1[1]);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance AutoShortcutsSetEnablementFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 320LL))();
}

uint64_t protocol witness for Flow.exitValue.getter in conformance AutoShortcutsSetEnablementFlow( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for AutoShortcutsSetEnablementFlow();
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t specialized AutoShortcutsSetEnablementFlow.init(deviceState:outputPublisher:linkActionPatterns:autoShortcutCATs:autoShortcutCATsSimple:voiceShortcutsClient:provider:appNameResolver:preferences:userDefaults:)( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v56 = a7;
  uint64_t v55 = a6;
  uint64_t v54 = a4;
  uint64_t v52 = (void *)a3;
  uint64_t v58 = a2;
  uint64_t v57 = a9;
  uint64_t v18 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v67 = a13;
  uint64_t v68 = a15;
  char v21 = __swift_allocate_boxed_opaque_existential_1(&v66);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a13 - 8) + 32LL))(v21, a8, a13);
  uint64_t v64 = a12;
  uint64_t v65 = a14;
  uint64_t v22 = __swift_allocate_boxed_opaque_existential_1(&v63);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a12 - 8) + 32LL))(v22, a10, a12);
  uint64_t v23 = type metadata accessor for WorkflowNLContextProvider();
  *(void *)(a11 + 280) = swift_allocObject(v23, 16LL, 7LL);
  outlined init with copy of AppShortcutInvoking((uint64_t)a1, a11 + 16);
  outlined init with copy of AppShortcutInvoking((uint64_t)v58, a11 + 56);
  outlined init with copy of AppShortcutInvoking((uint64_t)a1, (uint64_t)v62);
  uint64_t v24 = v52;
  outlined init with copy of AppShortcutInvoking((uint64_t)v52, (uint64_t)v59);
  uint64_t v25 = type metadata accessor for AutoShortcutDialogTemplating();
  uint64_t v26 = (void *)swift_allocObject(v25, 112LL, 7LL);
  uint64_t v28 = v60;
  uint64_t v27 = v61;
  uint64_t v29 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v59, v60);
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v52 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v32 + 16))(v31);
  uint64_t v33 = v54;
  uint64_t v34 = specialized AutoShortcutDialogTemplating.init(deviceState:autoShortcutCATs:autoShortcutCATsSimple:linkActionPatterns:)( v62,  v54,  a5,  (uint64_t)v31,  v26,  v28,  v27);
  swift_retain(v33);
  swift_retain(a5);
  __swift_destroy_boxed_opaque_existential_1Tm(v59);
  *(void *)(a11 + 96) = v34;
  outlined init with copy of AppShortcutInvoking((uint64_t)a1, (uint64_t)v62);
  outlined init with copy of AppShortcutInvoking((uint64_t)v24, (uint64_t)v59);
  uint64_t v35 = type metadata accessor for RunLinkActionCATs(0LL);
  static CATOption.defaultMode.getter(v35);
  uint64_t v53 = CATWrapper.__allocating_init(options:globals:)(v20, 0LL);
  uint64_t v36 = type metadata accessor for RunLinkActionCATsSimple(0LL);
  static CATOption.defaultMode.getter(v36);
  uint64_t v37 = CATWrapperSimple.__allocating_init(options:globals:)(v20, 0LL);
  uint64_t v38 = type metadata accessor for RunVoiceCommandCATs(0LL);
  static CATOption.defaultMode.getter(v38);
  uint64_t v39 = CATWrapper.__allocating_init(options:globals:)(v20, 0LL);
  uint64_t v40 = type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  static CATOption.defaultMode.getter(v40);
  uint64_t v41 = CATWrapperSimple.__allocating_init(options:globals:)(v20, 0LL);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v24);
  __swift_destroy_boxed_opaque_existential_1Tm(v58);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  uint64_t v42 = type metadata accessor for LinkActionDialogTemplating();
  uint64_t v43 = (void *)swift_allocObject(v42, 128LL, 7LL);
  uint64_t v44 = v60;
  uint64_t v45 = v61;
  uint64_t v46 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v59, v60);
  __chkstk_darwin(v46);
  uint64_t v48 = (char *)&v52 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v49 + 16))(v48);
  uint64_t v50 = specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)( v62,  v53,  v37,  v39,  v41,  (uint64_t)v48,  v43,  v44,  v45);
  __swift_destroy_boxed_opaque_existential_1Tm(v59);
  *(void *)(a11 + 104) = v50;
  outlined init with take of AceServiceInvokerAsync(v55, a11 + 112);
  outlined init with take of AceServiceInvokerAsync(v56, a11 + 152);
  outlined init with take of AceServiceInvokerAsync(&v66, a11 + 192);
  *(void *)(a11 + 23outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v57;
  outlined init with take of AceServiceInvokerAsync(&v63, a11 + 240);
  *(_OWORD *)(a11 + 288) = 0u;
  *(_OWORD *)(a11 + 304) = 0u;
  *(_OWORD *)(a11 + 320) = 0u;
  *(_OWORD *)(a11 + 336) = 0u;
  *(_BYTE *)(a11 + 35outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0x80;
  return a11;
}

uint64_t outlined copy of AutoShortcutsSetEnablementFlow.State( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  int v10 = a9 >> 5;
  if ((v10 - 1) >= 2)
  {
    if (!v10) {
      return swift_bridgeObjectRetain(a3);
    }
  }

  else
  {
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a5);
    return swift_bridgeObjectRetain(a6);
  }

  return result;
}

void *outlined init with take of AutoShortcutsSetEnablementFlow.State(void *__src, void *__dst)
{
  return memcpy(__dst, __src, 0x41uLL);
}

uint64_t outlined release of AutoShortcutsSetEnablementFlow.State(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of AutoShortcutsSetEnablementFlow.State( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t result = a3;
  int v10 = a9 >> 5;
  if ((v10 - 1) >= 2)
  {
    if (!v10) {
      return swift_bridgeObjectRelease(a3);
    }
  }

  else
  {
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a6);
    return swift_bridgeObjectRelease(a8);
  }

  return result;
}

uint64_t outlined destroy of VoiceCommandTask(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for VoiceCommandTask(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for AutoShortcutsSetEnablementFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin30AutoShortcutsSetEnablementFlow);
}

unint64_t lazy protocol witness table accessor for type AutoShortcutsSetEnablementFlow.EnablementFlowError and conformance AutoShortcutsSetEnablementFlow.EnablementFlowError()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutsSetEnablementFlow.EnablementFlowError and conformance AutoShortcutsSetEnablementFlow.EnablementFlowError;
  if (!lazy protocol witness table cache variable for type AutoShortcutsSetEnablementFlow.EnablementFlowError and conformance AutoShortcutsSetEnablementFlow.EnablementFlowError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutsSetEnablementFlow.EnablementFlowError,  &type metadata for AutoShortcutsSetEnablementFlow.EnablementFlowError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutsSetEnablementFlow.EnablementFlowError and conformance AutoShortcutsSetEnablementFlow.EnablementFlowError);
  }

  return result;
}

uint64_t destroy for AutoShortcutsSetEnablementFlow.State(uint64_t a1)
{
  return outlined consume of AutoShortcutsSetEnablementFlow.State( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(_BYTE *)(a1 + 64));
}

uint64_t initializeWithCopy for AutoShortcutsSetEnablementFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  unsigned __int8 v11 = *(_BYTE *)(a2 + 64);
  outlined copy of AutoShortcutsSetEnablementFlow.State(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = v6;
  *(void *)(a1 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  return a1;
}

uint64_t assignWithCopy for AutoShortcutsSetEnablementFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  unsigned __int8 v11 = *(_BYTE *)(a2 + 64);
  outlined copy of AutoShortcutsSetEnablementFlow.State(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  unsigned __int8 v20 = *(_BYTE *)(a1 + 64);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = v6;
  *(void *)(a1 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  outlined consume of AutoShortcutsSetEnablementFlow.State(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

uint64_t assignWithTake for AutoShortcutsSetEnablementFlow.State(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 64);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  unsigned __int8 v12 = *(_BYTE *)(a1 + 64);
  __int128 v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  __int128 v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 64) = v3;
  outlined consume of AutoShortcutsSetEnablementFlow.State(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for AutoShortcutsSetEnablementFlow.State(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 65))
    {
      int v3 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *(void *)a1 >> 3;
      else {
        int v3 = -1;
      }
    }
  }

  else
  {
    int v3 = -1;
  }

  return (v3 + 1);
}

double storeEnumTagSinglePayload for AutoShortcutsSetEnablementFlow.State(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 56) = 0LL;
    double result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 64) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(a1 + 65) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)a1 = 8LL * -a2;
      double result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 49) = 0u;
      return result;
    }

    *(_BYTE *)(a1 + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t getEnumTag for AutoShortcutsSetEnablementFlow.State(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 64);
  int v2 = (char)v1;
  unsigned int v3 = v1 >> 5;
  if (v2 >= 0) {
    return v3;
  }
  else {
    return (*(_DWORD *)a1 & 7 | (8 * *(_DWORD *)(a1 + 8))) + 4;
  }
}

uint64_t destructiveProjectEnumData for AutoShortcutsSetEnablementFlow.State(uint64_t result)
{
  *(_BYTE *)(result + 64) &= 0x1Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for AutoShortcutsSetEnablementFlow.State(uint64_t result, unsigned int a2)
{
  if (a2 < 4)
  {
    char v2 = *(_BYTE *)(result + 64) & 1 | (32 * a2);
    *(void *)result &= 7uLL;
    *(_BYTE *)(result + 64) = v2;
  }

  else
  {
    *(void *)double result = ((_BYTE)a2 - 4) & 7;
    *(void *)(result + 8) = (unint64_t)(a2 - 4) >> 3;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_BYTE *)(result + 64) = 0x80;
  }

  return result;
}

ValueMetadata *type metadata accessor for AutoShortcutsSetEnablementFlow.State()
{
  return &type metadata for AutoShortcutsSetEnablementFlow.State;
}

uint64_t getEnumTagSinglePayload for AutoShortcutsSetEnablementFlow.EnablementFlowError( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 6) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for AutoShortcutsSetEnablementFlow.EnablementFlowError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_122F14 + 4 * byte_18983E[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_122F48 + 4 * byte_189839[v4]))();
}

uint64_t sub_122F48(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_122F50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x122F58LL);
  }
  return result;
}

uint64_t sub_122F64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x122F6CLL);
  }
  *(_BYTE *)double result = a2 + 6;
  return result;
}

uint64_t sub_122F70(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_122F78(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AutoShortcutsSetEnablementFlow.EnablementFlowError()
{
  return &type metadata for AutoShortcutsSetEnablementFlow.EnablementFlowError;
}

uint64_t outlined init with copy of Output?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Output?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_5_40()
{
  uint64_t v3 = *(void *)(v1 + 288);
  uint64_t v4 = v0[1];
  uint64_t v5 = *(void *)(v1 + 304);
  uint64_t v6 = v0[3];
  uint64_t v7 = *(void *)(v1 + 320);
  uint64_t v8 = v0[5];
  uint64_t v9 = *(void *)(v1 + 336);
  uint64_t v10 = *(void *)(v1 + 344);
  unsigned __int8 v11 = *(_BYTE *)(v1 + 352);
  *(void *)(v1 + 288) = v2;
  *(_OWORD *)(v0 + 1) = 0u;
  *(_OWORD *)(v0 + 3) = 0u;
  *(_OWORD *)(v0 + 5) = 0u;
  *(void *)(v1 + 344) = 0LL;
  *(_BYTE *)(v1 + 35outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 96;
  return outlined consume of AutoShortcutsSetEnablementFlow.State(v3, v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t OUTLINED_FUNCTION_9_35(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2, a2, v3);
}

uint64_t OUTLINED_FUNCTION_13_30(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 1LL, 0LL);
}

uint64_t OUTLINED_FUNCTION_23_30()
{
  uint64_t v1 = *(void *)(v0 + 104);
  *(void *)(v1 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0LL;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  return swift_task_dealloc(*(void *)(v0 + 272));
}

uint64_t OUTLINED_FUNCTION_34_29@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned __int8 a9@<W8>)
{
  *(_OWORD *)(v9 + 8) = 0u;
  *(_OWORD *)(v9 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(void *)(v10 + 344) = 0LL;
  *(_BYTE *)(v10 + 35outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 96;
  return outlined consume of AutoShortcutsSetEnablementFlow.State(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t OUTLINED_FUNCTION_37_25@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned __int8 a9@<W8>)
{
  *(void *)(v9 + 344) = 0LL;
  *(_BYTE *)(v9 + 35outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 96;
  return outlined consume of AutoShortcutsSetEnablementFlow.State(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t OUTLINED_FUNCTION_38_28()
{
  return swift_task_dealloc(*(void *)(v0 + 400));
}

uint64_t OUTLINED_FUNCTION_42_20@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned __int8 a9@<W8>)
{
  return outlined consume of AutoShortcutsSetEnablementFlow.State(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t OUTLINED_FUNCTION_47_21(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_53_20()
{
  return swift_task_dealloc(*(void *)(v0 + 216));
}

uint64_t OUTLINED_FUNCTION_55_20()
{
  return swift_task_dealloc(*(void *)(v0 + 424));
}

uint64_t OUTLINED_FUNCTION_56_24@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 1LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = 0LL;
  *(_BYTE *)(a1 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 1;
  return *(void *)(v1 + 8);
}

uint64_t OUTLINED_FUNCTION_59_11()
{
  uint64_t v2 = *(void *)(v0 + 360);
  uint64_t v1 = *(void *)(v0 + 368);
  uint64_t v3 = *(void *)(v0 + 256);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)(v0 + 344);
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = v1;
  *(_BYTE *)(v3 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0;
  return *(void *)(v0 + 8);
}

uint64_t OUTLINED_FUNCTION_67_12(float a1)
{
  *uint64_t v1 = a1;
  return swift_errorRetain(v2);
}

uint64_t OUTLINED_FUNCTION_70_14()
{
  return swift_task_dealloc(*(void *)(v0 + 352));
}

uint64_t OUTLINED_FUNCTION_72_11@<X0>(unint64_t a1@<X8>, __n128 a2@<Q0>)
{
  *uint64_t v3 = a2;
  v3[1].n128_u64[0] = v2;
  v3[1].n128_u64[1] = a1;
  v3[2].n128_u8[0] = 0;
  return *(void *)(v4 + 8);
}

void OUTLINED_FUNCTION_73_12()
{
}

uint64_t OUTLINED_FUNCTION_76_9(uint64_t a1)
{
  return v3(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_78_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

  ;
}

uint64_t OUTLINED_FUNCTION_81_15(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static DialogPhase.confirmation.getter(a1, a2, a3);
}

void *OUTLINED_FUNCTION_82_9@<X0>(uint64_t a1@<X8>)
{
  return __swift_project_boxed_opaque_existential_1((void *)(a1 + 56), *(void *)(a1 + 80));
}

void *OUTLINED_FUNCTION_84_14( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char __dst, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
  a29 = v30 & 0x1F;
  return outlined init with take of AutoShortcutsSetEnablementFlow.State(v29, &__dst);
}

uint64_t OUTLINED_FUNCTION_85_11()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 224);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 23outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v0;
  return swift_task_dealloc(v5);
}

void OUTLINED_FUNCTION_87_9(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_89_11()
{
  uint64_t v3 = *v1;
  os_log_type_t v4 = (uint64_t *)(v2 - 8);
  *os_log_type_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 480);
  *os_log_type_t v4 = *v1;
  *(void *)(v3 + 488) = v0;
  return swift_task_dealloc(v5);
}

uint64_t OUTLINED_FUNCTION_99_3( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return v15(a1, a13, a14, a15, a5, a5);
}

uint64_t OUTLINED_FUNCTION_103_4()
{
  return static ExecuteResponse.complete()();
}

uint64_t OUTLINED_FUNCTION_105_3(float *a1, float a2)
{
  *a1 = a2;
  *(_DWORD *)(v3 + 9outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v4;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2, v3 + 96, a1 + 1);
}

NSNumber OUTLINED_FUNCTION_106_5()
{
  return NSNumber.init(BOOLeanLiteral:)(1);
}

uint64_t OUTLINED_FUNCTION_108_3()
{
  return (*(uint64_t (**)(void, void, void))(v0[24] + 16LL))(v0[25], v0[21], v0[23]);
}

BOOL OUTLINED_FUNCTION_109_5(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_111_6()
{
  return swift_task_dealloc(*(void *)(v0 + 184));
}

void OUTLINED_FUNCTION_112_6()
{
}

uint64_t OUTLINED_FUNCTION_118_7()
{
  return *(void *)(v0 + 288);
}

void OUTLINED_FUNCTION_121_6()
{
}

uint64_t OUTLINED_FUNCTION_123_8(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_124_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_128_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t OUTLINED_FUNCTION_130_3(uint64_t a1)
{
  return OutputGenerationManifest.nlContextUpdate.setter(v1);
}

void OUTLINED_FUNCTION_133_2(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

uint64_t OUTLINED_FUNCTION_134_4@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_139_4(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_141_4()
{
  return outlined init with copy of Output?(v0 + 16, v0 + 96);
}

uint64_t OUTLINED_FUNCTION_142_3(void *a1)
{
  *(void *)(v2 + 400) = a1;
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 104);
}

uint64_t OUTLINED_FUNCTION_143_4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return outlined consume of AutoShortcutsSetEnablementFlow.State(a18, a17, a16, a15, a14, a13, a12, a11, a9);
}

uint64_t OUTLINED_FUNCTION_144_2()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_145_4(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  uint64_t result = *(void *)(v2 + 88);
  *(void *)(v3 + 16) = 0LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_148_2()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v0, v2);
}

  ;
}

uint64_t OUTLINED_FUNCTION_154_2(uint64_t a1)
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, a1);
}

void *OUTLINED_FUNCTION_157_3()
{
  return __swift_project_boxed_opaque_existential_1((void *)(v2 + 56), *(void *)(v2 + 80));
}

uint64_t OUTLINED_FUNCTION_158_3@<X0>( uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(v3, a1, v2);
}

uint64_t OUTLINED_FUNCTION_165_1( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a11 + 8))(a13, a12);
}

uint64_t OUTLINED_FUNCTION_166_1( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a10, v11);
}

uint64_t OUTLINED_FUNCTION_167_1()
{
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_173_0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_174_0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v4;
  a1[1] = a2;
  uint64_t result = *(void *)(v3 + 88);
  *(void *)(v5 + 16) = v2;
  return result;
}

uint64_t OUTLINED_FUNCTION_175_0( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  *a1 = v18;
  a1[1] = v17;
  return a17;
}

uint64_t OUTLINED_FUNCTION_176_0(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return v3;
}

  ;
}

uint64_t OUTLINED_FUNCTION_178_0@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_179@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_180_0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_181_0@<X0>(uint64_t a1@<X8>)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t OUTLINED_FUNCTION_184()
{
  return _swift_stdlib_bridgeErrorToNSError(v0);
}

uint64_t OUTLINED_FUNCTION_185_0()
{
  return __swift_mutable_project_boxed_opaque_existential_1(v0, *(void *)(v0 + 24));
}

uint64_t OUTLINED_FUNCTION_187()
{
  return OutputGenerationManifest.responseViewId.setter(v0);
}

uint64_t OUTLINED_FUNCTION_189_0()
{
  return OutputGenerationManifest.responseViewId.setter(v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_191_0()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

id OUTLINED_FUNCTION_193_0()
{
  return *(id *)(v0 + 32);
}

void OUTLINED_FUNCTION_196()
{
}

void OUTLINED_FUNCTION_198_0()
{
}

void OUTLINED_FUNCTION_201()
{
}

uint64_t OUTLINED_FUNCTION_202_0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  return outlined consume of AutoShortcutsSetEnablementFlow.State(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

int8x8_t OUTLINED_FUNCTION_203(int8x16_t a1, int8x16_t a2)
{
  int8x16_t v2 = vorrq_s8(a2, a1);
  return vorr_s8(*(int8x8_t *)v2.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
}

double OUTLINED_FUNCTION_204()
{
  double result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  return result;
}

double OUTLINED_FUNCTION_205()
{
  double result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_206_0()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - 8) = *v0;
  return *(void *)(v2 + 248);
}

void OUTLINED_FUNCTION_207_0()
{
  *(void *)(v1 - 8) = *v0;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_210_0()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_211_0()
{
  return Input.parse.getter();
}

uint64_t OUTLINED_FUNCTION_213_0()
{
  return static os_log_type_t.error.getter();
}

id OUTLINED_FUNCTION_215(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, 0);
}

uint64_t OUTLINED_FUNCTION_216_0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return a12;
}

uint64_t OUTLINED_FUNCTION_220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for AceOutput(0LL);
}

uint64_t OUTLINED_FUNCTION_221_0(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1LL, v1);
}

uint64_t OUTLINED_FUNCTION_224_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Array._endMutation()(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_226_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_233_0()
{
  return outlined consume of Data?(0LL, 0xF000000000000000LL);
}

void OUTLINED_FUNCTION_235_0()
{
}

uint64_t InputToDisambiguationItemsConverter.__allocating_init(disambiguationItems:page:)( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject(v2, 40LL, 7LL);
  InputToDisambiguationItemsConverter.init(disambiguationItems:page:)(a1, a2);
  return v5;
}

void *InputToDisambiguationItemsConverter.init(disambiguationItems:page:)(uint64_t a1, uint64_t a2)
{
  v2[4] = &outlined read-only object #0 of InputToDisambiguationItemsConverter.init(disambiguationItems:page:);
  v2[2] = a1;
  if (a2) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = swift_bridgeObjectRetain(a1);
  }
  v2[3] = v3;
  return v2;
}

void InputToDisambiguationItemsConverter.inputToChosenItems(input:)()
{
  uint64_t v18 = *v0;
  uint64_t v3 = type metadata accessor for USOParse(0LL);
  uint64_t v20 = *(void *)(v3 - 8);
  uint64_t v21 = v3;
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_35();
  uint64_t v19 = v5 - v4;
  uint64_t v6 = type metadata accessor for NLIntent(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_53_1();
  uint64_t v22 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v8 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  OUTLINED_FUNCTION_35();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = type metadata accessor for Parse(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_18_9();
  Input.parse.getter(v14);
  int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 88))(v2, v12);
  if (v15 == enum case for Parse.NLv3IntentOnly(_:))
  {
    OUTLINED_FUNCTION_3_50();
LABEL_5:
    OUTLINED_FUNCTION_88_1(v1, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32));
    (*(void (**)(uint64_t))(*v0 + 152))(v1);
    goto LABEL_6;
  }

  if (v15 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    OUTLINED_FUNCTION_3_50();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    swift_release();
    goto LABEL_5;
  }

  if (v15 == enum case for Parse.directInvocation(_:))
  {
    OUTLINED_FUNCTION_3_50();
    uint64_t v6 = v22;
    OUTLINED_FUNCTION_88_1(v11, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32));
    (*(void (**)(uint64_t))(*v0 + 144))(v11);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    uint64_t v17 = v11;
    goto LABEL_7;
  }

  if (v15 != enum case for Parse.uso(_:))
  {
    static Array._allocateUninitialized(_:)(0LL, *(void *)(v18 + 80));
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v2, v12);
    goto LABEL_8;
  }

  OUTLINED_FUNCTION_3_50();
  uint64_t v1 = v19;
  uint64_t v7 = v20;
  uint64_t v6 = v21;
  OUTLINED_FUNCTION_88_1(v19, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 32));
  (*(void (**)(uint64_t))(*v0 + 136))(v19);
LABEL_6:
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  uint64_t v17 = v1;
LABEL_7:
  v16(v17, v6);
LABEL_8:
  OUTLINED_FUNCTION_24_0();
}

void InputToDisambiguationItemsConverter.usoToChosenItems(usoParse:)()
{
  uint64_t v3 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_35();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_18_9();
  uint64_t v11 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_53_1();
  uint64_t v14 = USOParse.userParse.getter(v13);
  uint64_t v15 = Siri_Nlu_External_UserParse.userDialogActs.getter(v14);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, v9);
  specialized Collection.first.getter(v15, v8);
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload(v8, 1LL, v11) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v8);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v16 = OUTLINED_FUNCTION_48();
    uint64_t v17 = (void *)OUTLINED_FUNCTION_84(v16, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_40(v18))
    {
      uint64_t v19 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      *uint64_t v19 = 0;
      OUTLINED_FUNCTION_27(&dword_0, v20, v21, "could not get userDialogAct from parse");
      OUTLINED_FUNCTION_1_0((uint64_t)v19);
    }

    static Array._allocateUninitialized(_:)(0LL, *(void *)(v4 + 80));
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v1, v8, v11);
    int64_t v22 = Array.count.getter(v3[3], *(void *)(v4 + 80));
    Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:)(v22);
    InputToDisambiguationItemsConverter.getItemsFromReferences(references:)();
    OUTLINED_FUNCTION_25_32();
    uint64_t v23 = OUTLINED_FUNCTION_23_31();
    uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v23);
    if ((Collection.isEmpty.getter(v23, WitnessTable) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v25 = InputToDisambiguationItemsConverter.getStringFromUSOParse(uda:)();
      if (v26)
      {
        uint64_t v27 = v25;
        unint64_t v28 = v26;
        if (one-time initialization token for voiceCommands != -1) {
          swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
        }
        uint64_t v29 = OUTLINED_FUNCTION_48();
        char v30 = (os_log_s *)__swift_project_value_buffer(v29, (uint64_t)static Logger.voiceCommands);
        uint64_t v31 = OUTLINED_FUNCTION_5_10(v28);
        Logger.logObject.getter(v31);
        os_log_type_t v32 = OUTLINED_FUNCTION_58();
        if (os_log_type_enabled(v30, v32))
        {
          uint64_t v33 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
          uint64_t v40 = v27;
          uint64_t v34 = OUTLINED_FUNCTION_38(32LL);
          uint64_t v41 = v34;
          *(_DWORD *)uint64_t v33 = 136315138;
          swift_bridgeObjectRetain(v28);
          uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v28, &v41);
          uint64_t v36 = OUTLINED_FUNCTION_27_30(v35);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v36, v37, v33 + 4);
          OUTLINED_FUNCTION_37_3(v28);
          OUTLINED_FUNCTION_31_2( &dword_0,  v30,  v32,  "usoToChosenItems retrieving disambiguation item with title: %s",  v33);
          OUTLINED_FUNCTION_30_3(v34, v38, (uint64_t)&type metadata for Any + 8);
          uint64_t v39 = v34;
          uint64_t v27 = v40;
          OUTLINED_FUNCTION_1_0(v39);
          OUTLINED_FUNCTION_1_0((uint64_t)v33);
        }

        else
        {

          OUTLINED_FUNCTION_19_1(v28);
        }

        InputToDisambiguationItemsConverter.getItemsFromTitle(title:requiresExactMatch:)(v27, v28, 0);
        swift_bridgeObjectRelease();
      }

      else
      {
        OUTLINED_FUNCTION_26_28();
      }
    }

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v1, v11);
  }

  OUTLINED_FUNCTION_24_0();
}

uint64_t InputToDisambiguationItemsConverter.directInvocationToChosenItems(directInvocation:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = Parse.DirectInvocation.userData.getter(a1);
  if (v3
    && (uint64_t v4 = static SLFDisambiguationItemConverter.toTitle(userData:)(v3), v6 = v5, swift_bridgeObjectRelease(), v6))
  {
    uint64_t v7 = InputToDisambiguationItemsConverter.getItemsFromTitle(title:requiresExactMatch:)(v4, v6, 1);
    swift_bridgeObjectRelease();
    return v7;
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v9 = OUTLINED_FUNCTION_48();
    uint64_t v10 = (void *)OUTLINED_FUNCTION_84(v9, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_40(v11))
    {
      uint64_t v12 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      *uint64_t v12 = 0;
      OUTLINED_FUNCTION_27(&dword_0, v13, v14, "#InputToDisambiguationItems received unknown directInvocation");
      OUTLINED_FUNCTION_1_0((uint64_t)v12);
    }

    return static Array._allocateUninitialized(_:)(0LL, *(void *)(v2 + 80));
  }

void InputToDisambiguationItemsConverter.nlv3IntentToChosenItems(nlIntent:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v3;
  uint64_t v6 = type metadata accessor for VoiceCommandsNLIntent(0LL);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_35();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for NLIntent(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v9, a1, v10);
  if (one-time initialization token for voiceCommandReferenceNode != -1) {
    swift_once( &one-time initialization token for voiceCommandReferenceNode,  one-time initialization function for voiceCommandReferenceNode);
  }
  uint64_t v11 = static VoiceCommandsNLIntent.voiceCommandReferenceNode;
  lazy protocol witness table accessor for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent();
  OUTLINED_FUNCTION_24_30(v11);
  uint64_t v12 = Array.count.getter(v3[3], *(void *)(v5 + 80));
  static InputUtils.convertVoiceCommandReferenceToIndex(reference:lastInd:)(v27, v12);
  InputToDisambiguationItemsConverter.getItemsFromReferences(references:)();
  OUTLINED_FUNCTION_25_32();
  uint64_t v13 = OUTLINED_FUNCTION_23_31();
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v13);
  if ((Collection.isEmpty.getter(v13, WitnessTable) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for voiceCommandTextNode != -1) {
      swift_once( &one-time initialization token for voiceCommandTextNode,  one-time initialization function for voiceCommandTextNode);
    }
    OUTLINED_FUNCTION_24_30(static VoiceCommandsNLIntent.voiceCommandTextNode);
    uint64_t v15 = v28;
    if (v28)
    {
      uint64_t v16 = v27;
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v17 = OUTLINED_FUNCTION_48();
      os_log_type_t v18 = (os_log_s *)__swift_project_value_buffer(v17, (uint64_t)static Logger.voiceCommands);
      uint64_t v19 = OUTLINED_FUNCTION_5_10(v28);
      Logger.logObject.getter(v19);
      os_log_type_t v20 = OUTLINED_FUNCTION_58();
      if (OUTLINED_FUNCTION_61_0(v20))
      {
        uint64_t v21 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
        uint64_t v22 = OUTLINED_FUNCTION_38(32LL);
        uint64_t v27 = v22;
        *(_DWORD *)uint64_t v21 = 136315138;
        swift_bridgeObjectRetain(v15);
        uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, &v27);
        uint64_t v24 = OUTLINED_FUNCTION_27_30(v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v24, v25, v21 + 4);
        OUTLINED_FUNCTION_37_3(v15);
        OUTLINED_FUNCTION_31_2( &dword_0,  v18,  v2,  "nlv3IntentToChosenItems retrieving disambiguation item with title: %s",  v21);
        OUTLINED_FUNCTION_30_3(v22, v26, (uint64_t)&type metadata for Any + 8);
        OUTLINED_FUNCTION_1_0(v22);
        OUTLINED_FUNCTION_1_0((uint64_t)v21);
      }

      else
      {

        OUTLINED_FUNCTION_19_1(v28);
      }

      InputToDisambiguationItemsConverter.getItemsFromTitle(title:requiresExactMatch:)(v16, v15, 0);
      swift_bridgeObjectRelease();
    }

    else
    {
      OUTLINED_FUNCTION_26_28();
    }
  }

  outlined destroy of VoiceCommandsNLIntent(v9);
  OUTLINED_FUNCTION_24_0();
}

uint64_t InputToDisambiguationItemsConverter.getItemsFromTitle(title:requiresExactMatch:)( uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = *v3;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v9 = OUTLINED_FUNCTION_48();
  uint64_t v10 = (os_log_s *)__swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
  uint64_t v11 = swift_retain(v3);
  Logger.logObject.getter(v11);
  os_log_type_t v12 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_61_0(v12))
  {
    uint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    LODWORD(v79) = a3;
    *(_DWORD *)uint64_t v13 = 134217984;
    uint64_t v14 = *(void *)(v8 + 80);
    uint64_t v86 = Array.count.getter(v3[2], v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v13 + 4);
    swift_release();
    OUTLINED_FUNCTION_31_2( &dword_0,  v10,  v4,  "[DisambiguationItemConverter] Searching %ld disambiguation items for query.",  v13);
    OUTLINED_FUNCTION_1_0((uint64_t)v13);
  }

  else
  {

    swift_release();
    uint64_t v14 = *(void *)(v8 + 80);
  }

  uint64_t v15 = OUTLINED_FUNCTION_22_27();
  uint64_t v19 = type metadata accessor for ExactMatcher(v15, v16, v17, v18);
  uint64_t v20 = DescribeCustomIntentItemCatTemplater.__allocating_init()();
  LOBYTE(v21) = v20;
  uint64_t v22 = v5[2];
  OUTLINED_FUNCTION_9_36(v20, v23, v24, v25, v26, v27, v28, v29, v70, v72, v74, v77, v79, a1);
  uint64_t v30 = OUTLINED_FUNCTION_14_38();
  if (v19)
  {
    uint64_t v31 = getContiguousArrayStorageType<A>(for:)(v14, v14);
    uint64_t v32 = swift_allocObject( v31,  ((*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) + (unint64_t)*(unsigned int *)(v31 + 48)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL))
          + *(void *)(*(void *)(v14 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) | (unint64_t)*(unsigned __int16 *)(v31 + 52));
    uint64_t v33 = static Array._adoptStorage(_:count:)(v32, 1LL);
    Array.subscript.getter(0LL, v19, v14);
    swift_bridgeObjectRelease();
    return _finalizeUninitializedArray<A>(_:)(v33);
  }

  if ((a3 & 1) != 0)
  {
    uint64_t v35 = v10;
    Logger.logObject.getter(v30);
    os_log_type_t v36 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_31_0(v36))
    {
      uint64_t v37 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
      *(_WORD *)uint64_t v37 = 0;
      uint64_t v38 = "[DisambiguationItemConverter] only exact matches requested, none found.";
LABEL_19:
      OUTLINED_FUNCTION_47_1(&dword_0, v35, (os_log_type_t)v21, v38, v37);
      OUTLINED_FUNCTION_1_0((uint64_t)v37);
      goto LABEL_20;
    }

    goto LABEL_20;
  }

  uint64_t v39 = OUTLINED_FUNCTION_22_27();
  uint64_t v43 = type metadata accessor for PartialMatcher(v39, v40, v41, v42);
  uint64_t v44 = DescribeCustomIntentItemCatTemplater.__allocating_init()();
  OUTLINED_FUNCTION_9_36(v44, v45, v46, v47, v48, v49, v50, v51, v71, v73, v75, v78, v80, v83);
  OUTLINED_FUNCTION_14_38();
  if (!v43)
  {
    uint64_t v81 = a2;
    static LocaleUtils.siriLanguageCode()();
    uint64_t v21 = v52;
    uint64_t v53 = v10;
    unint64_t v55 = v54;
    uint64_t v56 = OUTLINED_FUNCTION_5_10(v54);
    Logger.logObject.getter(v56);
    os_log_type_t v57 = OUTLINED_FUNCTION_58();
    if (os_log_type_enabled(v53, v57))
    {
      uint64_t v58 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v76 = OUTLINED_FUNCTION_38(32LL);
      uint64_t v86 = v76;
      *(_DWORD *)uint64_t v58 = 136315138;
      swift_bridgeObjectRetain(v55);
      uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v55, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v58 + 4);
      OUTLINED_FUNCTION_37_3(v55);
      OUTLINED_FUNCTION_31_2(&dword_0, v53, v57, "[DisambiguationItemConverter] Current siri language: %s", v58);
      OUTLINED_FUNCTION_30_3(v76, v59, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v76);
      OUTLINED_FUNCTION_1_0((uint64_t)v58);
    }

    else
    {

      OUTLINED_FUNCTION_19_1(v55);
    }

    char v60 = specialized Sequence<>.contains(_:)(v21, v55, (void *)v5[4]);
    uint64_t v61 = swift_bridgeObjectRelease();
    if ((v60 & 1) == 0
      || (uint64_t v62 = OUTLINED_FUNCTION_22_27(),
          type metadata accessor for TfIdfFuzzyMatcher(v62, v63, v64, v65),
          double v66 = TfIdfFuzzyMatcher.__allocating_init()(),
          uint64_t v21 = v67,
          uint64_t v43 = v67,
          (*(void (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)v67 + 112LL))(v84, v81, v22, v66),
          uint64_t v61 = OUTLINED_FUNCTION_14_38(),
          !v21))
    {
      uint64_t v35 = (os_log_s *)Logger.logObject.getter(v61);
      os_log_type_t v68 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_31_0(v68))
      {
        uint64_t v37 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
        *(_WORD *)uint64_t v37 = 0;
        uint64_t v38 = "[DisambiguationItemConverter] No items matched the input query.";
        goto LABEL_19;
      }

uint64_t InputToDisambiguationItemsConverter.getItemsFromReferences(references:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  uint64_t v4 = *(void *)(v2 + 80);
  unint64_t v5 = lazy protocol witness table accessor for type [Int] and conformance [A]();
  return Sequence.compactMap<A>(_:)( partial apply for closure #1 in InputToDisambiguationItemsConverter.getItemsFromReferences(references:),  v1,  v3,  v4,  v5);
}

uint64_t closure #1 in InputToDisambiguationItemsConverter.getItemsFromReferences(references:)@<X0>( uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  if (*a1 < 0)
  {
    uint64_t v7 = *(void *)(v4 + 80);
    goto LABEL_5;
  }

  uint64_t v6 = a2[3];
  uint64_t v7 = *(void *)(v4 + 80);
  if (v5 >= Array.count.getter(v6, v7))
  {
LABEL_5:
    uint64_t v8 = a3;
    uint64_t v9 = 1LL;
    return __swift_storeEnumTagSinglePayload(v8, v9, 1LL, v7);
  }

  Array.subscript.getter(v5, v6, v7);
  uint64_t v8 = a3;
  uint64_t v9 = 0LL;
  return __swift_storeEnumTagSinglePayload(v8, v9, 1LL, v7);
}

uint64_t InputToDisambiguationItemsConverter.getStringFromUSOParse(uda:)()
{
  uint64_t v0 = Siri_Nlu_External_UserDialogAct.stringValue.getter();
  unint64_t v4 = v1;
  if (v1)
  {
    uint64_t v2 = v0;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v5 = OUTLINED_FUNCTION_48();
    uint64_t v6 = (os_log_s *)__swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
    uint64_t v7 = OUTLINED_FUNCTION_5_10(v4);
    Logger.logObject.getter(v7);
    os_log_type_t v8 = OUTLINED_FUNCTION_58();
    if (os_log_type_enabled(v6, v8))
    {
      uint64_t v9 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v10 = OUTLINED_FUNCTION_38(32LL);
      v19[0] = v10;
      *(_DWORD *)uint64_t v9 = 136315138;
      swift_bridgeObjectRetain(v4);
      uint64_t v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v4, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v9 + 4);
      OUTLINED_FUNCTION_37_3(v4);
      OUTLINED_FUNCTION_31_2( &dword_0,  v6,  v8,  "InputToDisambiguationItemsConverter: got stringValue: %s from USO parse",  v9);
      OUTLINED_FUNCTION_30_3(v10, v11, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v10);
      OUTLINED_FUNCTION_1_0((uint64_t)v9);
    }

    else
    {

      OUTLINED_FUNCTION_19_1(v4);
    }
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v12 = OUTLINED_FUNCTION_48();
    uint64_t v13 = (void *)OUTLINED_FUNCTION_84(v12, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_40(v14))
    {
      uint64_t v15 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      *uint64_t v15 = 0;
      OUTLINED_FUNCTION_27( &dword_0,  v16,  v17,  "InputToDisambiguationItemsConverter: could not get string value from payload");
      OUTLINED_FUNCTION_1_0((uint64_t)v15);
    }

    return 0LL;
  }

  return v2;
}

void *InputToDisambiguationItemsConverter.deinit()
{
  return v0;
}

uint64_t InputToDisambiguationItemsConverter.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata completion function for InputToDisambiguationItemsConverter(uint64_t a1)
{
  v2[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0LL, 3LL, v2, a1 + 96);
}

uint64_t type metadata accessor for InputToDisambiguationItemsConverter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for InputToDisambiguationItemsConverter);
}

uint64_t partial apply for closure #1 in InputToDisambiguationItemsConverter.getItemsFromReferences(references:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in InputToDisambiguationItemsConverter.getItemsFromReferences(references:)(a1, v2, a2);
}

unint64_t lazy protocol witness table accessor for type [Int] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Int] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Int] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Int]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [Int] and conformance [A]);
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_3_50()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 96))(v0, v2);
}

uint64_t OUTLINED_FUNCTION_9_36( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96LL))(a14, v15, v14);
}

uint64_t OUTLINED_FUNCTION_14_38()
{
  return swift_release(v0);
}

uint64_t OUTLINED_FUNCTION_22_27()
{
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_23_31()
{
  *(void *)(v1 - 96) = v0;
  return type metadata accessor for Array(0LL);
}

uint64_t OUTLINED_FUNCTION_24_30(uint64_t a1)
{
  return IntentNodeTraversable.value<A>(forNode:)(a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_25_32()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t OUTLINED_FUNCTION_26_28()
{
  return static Array._allocateUninitialized(_:)(0LL, v0);
}

uint64_t OUTLINED_FUNCTION_27_30(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t specialized _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0LL, 0LL);
  *uint64_t v6 = a2;
  return swift_continuation_throwingResumeWithError(a1, v5);
}

uint64_t specialized _resumeUnsafeThrowingContinuation<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  **(void **)(*(void *)(a1 + 64) + 4swift_beginAccess(v1 + 288, v13, 0LL, 0LL) = a2;
  return swift_continuation_throwingResume();
}

{
  uint64_t v4;
  uint64_t v4 = a2;
  outlined init with take of INImage?((uint64_t)&v4, *(void *)(*(void *)(a1 + 64) + 40LL));
  return swift_continuation_throwingResume(a1);
}

uint64_t LNDialog.asSpeakableString.getter(uint64_t a1)
{
  v2[19] = a1;
  v2[20] = v1;
  uint64_t v3 = type metadata accessor for ResponseMode(0LL);
  v2[21] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[22] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[23] = swift_task_alloc(v5);
  v2[24] = swift_task_alloc(v5);
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v3 = *(void *)(v1 + 184);
  uint64_t v2 = *(void *)(v1 + 192);
  unint64_t v5 = *(void *)(v1 + 168);
  uint64_t v4 = *(void *)(v1 + 176);
  uint64_t v6 = *(void *)(v1 + 120);
  uint64_t v7 = OUTLINED_FUNCTION_26(a1, "captionPrint");
  os_log_type_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, &type metadata for String);

  *(void *)(v1 + 128) = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  uint64_t v10 = lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v34 = v9;
  uint64_t v11 = BidirectionalCollection<>.joined(separator:)(32LL, 0xE100000000000000LL, v9, v10);
  uint64_t v32 = v12;
  uint64_t v33 = v11;
  swift_bridgeObjectRelease(v8);
  uint64_t v13 = type metadata accessor for SiriEnvironment(0LL);
  static SiriEnvironment.default.getter(v13);
  SiriEnvironment.currentRequest.getter();
  uint64_t v14 = swift_release();
  CurrentRequest.responseMode.getter(v14);
  uint64_t v15 = swift_release();
  static ResponseMode.voiceForward.getter(v15);
  uint64_t v16 = lazy protocol witness table accessor for type ResponseMode and conformance ResponseMode();
  LOBYTE(v9) = dispatch thunk of static Equatable.== infix(_:_:)(v3, v2, v5, v16);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  uint64_t v18 = v17(v3, v5);
  uint64_t v19 = *(void *)(v1 + 192);
  if ((v9 & 1) != 0)
  {
    uint64_t v20 = v17(*(void *)(v1 + 192), *(void *)(v1 + 168));
  }

  else
  {
    uint64_t v21 = *(void *)(v1 + 184);
    uint64_t v22 = *(void *)(v1 + 168);
    static ResponseMode.voiceOnly.getter(v18);
    uint64_t v23 = dispatch thunk of static Equatable.== infix(_:_:)(v21, v19, v22, v16);
    v17(v21, v22);
    uint64_t v20 = v17(v19, v22);
    if ((v23 & 1) == 0)
    {
      uint64_t v26 = OUTLINED_FUNCTION_26(v20, "captionSpeak");
      uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, &type metadata for String);

      *(void *)(v1 + 136) = v25;
      goto LABEL_6;
    }
  }

  uint64_t v24 = OUTLINED_FUNCTION_26(v20, "speak");
  uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v24, &type metadata for String);

  *(void *)(v1 + 144) = v25;
LABEL_6:
  uint64_t v27 = BidirectionalCollection<>.joined(separator:)(32LL, 0xE100000000000000LL, v34, v10);
  uint64_t v29 = v28;
  swift_bridgeObjectRelease(v25);
  SpeakableString.init(print:speak:)(v33, v32, v27, v29);
  swift_unknownObjectRelease(v6);
  uint64_t v30 = OUTLINED_FUNCTION_1_35();
  __swift_storeEnumTagSinglePayload(v29, 0LL, 1LL, v30);
  swift_task_dealloc(v27);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t LNDialog.asSpeakableString.getter()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = (void *)v0[20];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = LNDialog.asSpeakableString.getter;
  uint64_t v3 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v4 = v0 + 10;
  v4[1] = 0x40000000LL;
  v4[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned LNDialogResult?, @unowned NSError?) -> () with result type LNDialogResult;
  v4[3] = &block_descriptor_6;
  v4[4] = v3;
  [v2 getResultWithCompletionHandler:v4];
  return swift_continuation_await(v1);
}

{
  uint64_t v0;
  *(void *)(*(void *)v0 + 20swift_beginAccess(v1 + 288, v13, 0LL, 0LL) = *(void *)(*(void *)v0 + 48LL);
  return OUTLINED_FUNCTION_21_0();
}

uint64_t LNDialog.asSpeakableString.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(v6 + 200);
  swift_willThrow(a1, a2, a3, a4, a5);
  swift_errorRelease(v7);
  uint64_t v8 = OUTLINED_FUNCTION_1_35();
  __swift_storeEnumTagSinglePayload(v7, 1LL, 1LL, v8);
  swift_task_dealloc(v7);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned LNDialogResult?, @unowned NSError?) -> () with result type LNDialogResult( uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a3) {
    return specialized _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(v3, (uint64_t)a3);
  }
  if (a2)
  {
    swift_unknownObjectRetain(a2);
    return specialized _resumeUnsafeThrowingContinuation<A>(_:_:)(v3, a2);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_1_35()
{
  return type metadata accessor for SpeakableString(0LL);
}

SiriLinkFlowPlugin::WorkflowRunnerCATPatternsIdentifiers_optional __swiftcall WorkflowRunnerCATPatternsIdentifiers.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of WorkflowRunnerCATPatternsIdentifiers.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return (SiriLinkFlowPlugin::WorkflowRunnerCATPatternsIdentifiers_optional)3;
  }
  else {
    return (SiriLinkFlowPlugin::WorkflowRunnerCATPatternsIdentifiers_optional)v3;
  }
}

unint64_t WorkflowRunnerCATPatternsIdentifiers.rawValue.getter()
{
  return 0xD000000000000018LL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance WorkflowRunnerCATPatternsIdentifiers( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance WorkflowRunnerCATPatternsIdentifiers()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance WorkflowRunnerCATPatternsIdentifiers( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance WorkflowRunnerCATPatternsIdentifiers( uint64_t a1)
{
}

SiriLinkFlowPlugin::WorkflowRunnerCATPatternsIdentifiers_optional protocol witness for RawRepresentable.init(rawValue:) in conformance WorkflowRunnerCATPatternsIdentifiers@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::WorkflowRunnerCATPatternsIdentifiers_optional *a2@<X8>)
{
  result.int value = WorkflowRunnerCATPatternsIdentifiers.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance WorkflowRunnerCATPatternsIdentifiers( void *a1@<X8>)
{
  *a1 = 0xD000000000000018LL;
  a1[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t WorkflowRunnerFinalDoneParameters.device.getter()
{
  return swift_retain(*v0);
}

void WorkflowRunnerFinalDoneParameters.device.setter(uint64_t a1)
{
  *uint64_t v1 = a1;
  OUTLINED_FUNCTION_1();
}

uint64_t WorkflowRunnerFinalDoneParameters.executeSashGroupOnWatch.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

void WorkflowRunnerFinalDoneParameters.intentVerb.getter()
{
}

uint64_t type metadata accessor for WorkflowRunnerFinalDoneParameters(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for WorkflowRunnerFinalDoneParameters,  (uint64_t)&nominal type descriptor for WorkflowRunnerFinalDoneParameters);
}

uint64_t WorkflowRunnerFinalDoneParameters.intentVerb.setter(uint64_t a1)
{
  return WorkflowRunnerFinalDoneParameters.intentVerb.setter( a1,  type metadata accessor for WorkflowRunnerFinalDoneParameters);
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *WorkflowRunnerFinalDoneParameters.intentVerb.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

void WorkflowRunnerFinalDoneParameters.localizedAppName.getter()
{
}

uint64_t WorkflowRunnerFinalDoneParameters.localizedAppName.setter(uint64_t a1)
{
  return WorkflowRunnerFinalDoneParameters.localizedAppName.setter( a1,  type metadata accessor for WorkflowRunnerFinalDoneParameters);
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *WorkflowRunnerFinalDoneParameters.localizedAppName.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

void WorkflowRunnerFinalDoneParameters.asKeyValuePairs()()
{
  uint64_t v6 = (char *)&v18 - v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v8 = OUTLINED_FUNCTION_19(v7, 224LL);
  OUTLINED_FUNCTION_23_32((__n128 *)v8, (__n128)xmmword_181AE0);
  if (v2)
  {
    uint64_t v9 = type metadata accessor for SirikitDeviceState(0LL);
    uint64_t v10 = v2;
  }

  else
  {
    uint64_t v10 = 0LL;
    uint64_t v9 = 0LL;
    *(void *)(v8 + 56) = 0LL;
    *(void *)(v8 + 64) = 0LL;
  }

  *(void *)(v8 + 48) = v10;
  *(void *)(v8 + 7outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v9;
  *(void *)(v8 + 80) = 0xD000000000000017LL;
  OUTLINED_FUNCTION_53_21((uint64_t)"executeSashGroupOnWatch");
  *(_BYTE *)(v8 + 96) = v11;
  *(void *)(v8 + 120) = &type metadata for Bool;
  *(void *)(v8 + 128) = 0x6556746E65746E69LL;
  *(void *)(v8 + 136) = 0xEA00000000006272LL;
  uint64_t v12 = OUTLINED_FUNCTION_41_27();
  outlined init with copy of AppDisplayInfo?( v1 + *(int *)(v12 + 24),  (uint64_t)v6,  &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_21_26((uint64_t)v6);
  if (v13)
  {
    OUTLINED_FUNCTION_59_9();
    outlined destroy of Result<Output, Error>( (uint64_t)v6,  &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v8 + 144) = 0u;
    *(_OWORD *)(v8 + 160) = 0u;
  }

  else
  {
    uint64_t v14 = OUTLINED_FUNCTION_54_24();
    OUTLINED_FUNCTION_33_21((uint64_t)v14);
    OUTLINED_FUNCTION_59_9();
  }

  *(void *)(v8 + 176) = 0xD000000000000010LL;
  *(void *)(v8 + 184) = 0x8000000000193910LL;
  OUTLINED_FUNCTION_31_25( v1 + *(int *)(v12 + 28),  v15,  &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = OUTLINED_FUNCTION_21_26(v0);
  if (v13)
  {
    OUTLINED_FUNCTION_57_19(v16, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v8 + 19outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0u;
    *(_OWORD *)(v8 + 208) = 0u;
  }

  else
  {
    uint64_t v17 = OUTLINED_FUNCTION_50_20();
    OUTLINED_FUNCTION_34_30((uint64_t)v17);
  }

  OUTLINED_FUNCTION_24_0();
}

uint64_t WorkflowRunnerFinalDoneParameters.init(device:executeSashGroupOnWatch:intentVerb:localizedAppName:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return WorkflowRunnerFinalDoneParameters.init(device:executeSashGroupOnWatch:intentVerb:localizedAppName:)( a1,  a2,  a3,  a4,  type metadata accessor for WorkflowRunnerFinalDoneParameters,  a5);
}

void WorkflowRunnerInputTextParameters.inputType.getter()
{
}

void WorkflowRunnerFinalDoneParameters.intentVerb.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = OUTLINED_FUNCTION_43_25(a1);
  OUTLINED_FUNCTION_31_25(v1 + *(int *)(v2 + 24), v3, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_1();
}

uint64_t type metadata accessor for WorkflowRunnerInputTextParameters(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for WorkflowRunnerInputTextParameters,  (uint64_t)&nominal type descriptor for WorkflowRunnerInputTextParameters);
}

uint64_t WorkflowRunnerInputTextParameters.inputType.setter(uint64_t a1)
{
  return WorkflowRunnerFinalDoneParameters.intentVerb.setter( a1,  type metadata accessor for WorkflowRunnerInputTextParameters);
}

uint64_t WorkflowRunnerFinalDoneParameters.intentVerb.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = OUTLINED_FUNCTION_47_22();
  return OUTLINED_FUNCTION_20_35(v2, v3);
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *WorkflowRunnerInputTextParameters.inputType.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

void WorkflowRunnerInputTextParameters.message.getter()
{
}

void WorkflowRunnerFinalDoneParameters.localizedAppName.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = OUTLINED_FUNCTION_43_25(a1);
  OUTLINED_FUNCTION_31_25(v1 + *(int *)(v2 + 28), v3, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_1();
}

uint64_t WorkflowRunnerInputTextParameters.message.setter(uint64_t a1)
{
  return WorkflowRunnerFinalDoneParameters.localizedAppName.setter( a1,  type metadata accessor for WorkflowRunnerInputTextParameters);
}

uint64_t WorkflowRunnerFinalDoneParameters.localizedAppName.setter( uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = OUTLINED_FUNCTION_47_22();
  return OUTLINED_FUNCTION_20_35(v2, v3);
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *WorkflowRunnerInputTextParameters.message.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

void WorkflowRunnerInputTextParameters.asKeyValuePairs()()
{
  uint64_t v6 = (char *)&v19 - v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v8 = OUTLINED_FUNCTION_19(v7, 224LL);
  OUTLINED_FUNCTION_23_32((__n128 *)v8, (__n128)xmmword_181AE0);
  if (v2)
  {
    uint64_t v9 = type metadata accessor for SirikitDeviceState(0LL);
    uint64_t v10 = v2;
  }

  else
  {
    uint64_t v10 = 0LL;
    uint64_t v9 = 0LL;
    *(void *)(v8 + 56) = 0LL;
    *(void *)(v8 + 64) = 0LL;
  }

  *(void *)(v8 + 48) = v10;
  *(void *)(v8 + 7outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v9;
  *(void *)(v8 + 80) = 0xD000000000000017LL;
  OUTLINED_FUNCTION_53_21((uint64_t)"executeSashGroupOnWatch");
  *(_BYTE *)(v8 + 96) = v11;
  *(void *)(v8 + 120) = &type metadata for Bool;
  *(void *)(v8 + 128) = 0x7079547475706E69LL;
  *(void *)(v8 + 136) = 0xE900000000000065LL;
  uint64_t v12 = OUTLINED_FUNCTION_40_25();
  outlined init with copy of AppDisplayInfo?( v1 + *(int *)(v12 + 24),  (uint64_t)v6,  &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_21_26((uint64_t)v6);
  if (v13)
  {
    OUTLINED_FUNCTION_59_9();
    outlined destroy of Result<Output, Error>( (uint64_t)v6,  &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v8 + 144) = 0u;
    *(_OWORD *)(v8 + 160) = 0u;
  }

  else
  {
    uint64_t v14 = OUTLINED_FUNCTION_54_24();
    OUTLINED_FUNCTION_33_21((uint64_t)v14);
    OUTLINED_FUNCTION_59_9();
  }

  OUTLINED_FUNCTION_58_19();
  *(void *)(v8 + 176) = v15;
  *(void *)(v8 + 184) = 0xE700000000000000LL;
  OUTLINED_FUNCTION_31_25( v1 + *(int *)(v12 + 28),  v16,  &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = OUTLINED_FUNCTION_21_26(v0);
  if (v13)
  {
    OUTLINED_FUNCTION_57_19(v17, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v8 + 19outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0u;
    *(_OWORD *)(v8 + 208) = 0u;
  }

  else
  {
    uint64_t v18 = OUTLINED_FUNCTION_50_20();
    OUTLINED_FUNCTION_34_30((uint64_t)v18);
  }

  OUTLINED_FUNCTION_8_2();
}

uint64_t WorkflowRunnerInputTextParameters.init(device:executeSashGroupOnWatch:inputType:message:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return WorkflowRunnerFinalDoneParameters.init(device:executeSashGroupOnWatch:intentVerb:localizedAppName:)( a1,  a2,  a3,  a4,  type metadata accessor for WorkflowRunnerInputTextParameters,  a5);
}

uint64_t WorkflowRunnerFinalDoneParameters.init(device:executeSashGroupOnWatch:intentVerb:localizedAppName:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void)@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = a1;
  *(_BYTE *)(a6 + 8) = a2;
  uint64_t v9 = a5(0LL);
  outlined init with take of SpeakableString?(a3, a6 + *(int *)(v9 + 24));
  return outlined init with take of SpeakableString?(a4, a6 + *(int *)(v9 + 28));
}

uint64_t WorkflowRunnerShowAlertParameters.executeSashGroupOnWatch.getter()
{
  return *v0;
}

void WorkflowRunnerShowAlertParameters.message.getter()
{
  uint64_t v1 = type metadata accessor for WorkflowRunnerShowAlertParameters(0LL);
  OUTLINED_FUNCTION_31_25(v0 + *(int *)(v1 + 20), v2, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_1();
}

uint64_t type metadata accessor for WorkflowRunnerShowAlertParameters(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for WorkflowRunnerShowAlertParameters,  (uint64_t)&nominal type descriptor for WorkflowRunnerShowAlertParameters);
}

uint64_t WorkflowRunnerShowAlertParameters.message.setter()
{
  uint64_t v0 = OUTLINED_FUNCTION_47_22();
  return OUTLINED_FUNCTION_20_35(v0, v1);
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *WorkflowRunnerShowAlertParameters.message.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

void WorkflowRunnerShowAlertParameters.asKeyValuePairs()()
{
  uint64_t v4 = v3 - v2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = OUTLINED_FUNCTION_19(v5, 128LL);
  *(_OWORD *)(v6 + 16) = xmmword_17E660;
  *(void *)(v6 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0xD000000000000017LL;
  *(void *)(v6 + 40) = 0x8000000000197160LL;
  *(_BYTE *)(v6 + 48) = *v0;
  uint64_t v7 = (void *)(v6 + 96);
  OUTLINED_FUNCTION_58_19();
  v8[9] = v10;
  v8[10] = v9;
  v8[11] = 0xE700000000000000LL;
  uint64_t v11 = type metadata accessor for WorkflowRunnerShowAlertParameters(0LL);
  outlined init with copy of AppDisplayInfo?( (uint64_t)&v0[*(int *)(v11 + 20)],  v4,  &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v12 = OUTLINED_FUNCTION_61_1();
  uint64_t v13 = OUTLINED_FUNCTION_1_36(v4);
  if ((_DWORD)v13 == 1)
  {
    OUTLINED_FUNCTION_57_19(v13, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v7 = 0u;
    *(_OWORD *)(v6 + 11outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0u;
  }

  else
  {
    *(void *)(v6 + 120) = v12;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v7);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL))( boxed_opaque_existential_1,  v4,  v12);
  }

  OUTLINED_FUNCTION_38_0();
}

uint64_t WorkflowRunnerShowAlertParameters.init(executeSashGroupOnWatch:message:)@<X0>( char a1@<W0>, _BYTE *a2@<X8>)
{
  *a2 = a1;
  type metadata accessor for WorkflowRunnerShowAlertParameters(0LL);
  uint64_t v2 = OUTLINED_FUNCTION_47_22();
  return outlined init with take of SpeakableString?(v2, v3);
}

uint64_t WorkflowRunnerCATPatternsExecutor.finalDone(executeSashGroupOnWatch:_:)( char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = OUTLINED_FUNCTION_29_24(a1, a2, a3);
  uint64_t done = type metadata accessor for WorkflowRunnerFinalDoneParameters(v4);
  *(void *)(v3 + 48) = OUTLINED_FUNCTION_16_41(done);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowRunnerCATPatternsExecutor.finalDone(executeSashGroupOnWatch:_:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_8_51(v1);
  WorkflowRunnerFinalDoneParameters.asKeyValuePairs()();
  *(void *)(v0 + 56) = v2;
  uint64_t v3 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 64) = v3;
  *uint64_t v3 = v0;
  v3[1] = WorkflowRunnerCATPatternsExecutor.finalDone(executeSashGroupOnWatch:_:);
  unint64_t v4 = OUTLINED_FUNCTION_12_30();
  return OUTLINED_FUNCTION_18_33(v4, v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_4_42();
  OUTLINED_FUNCTION_37();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_4_1();
}

uint64_t WorkflowRunnerCATPatternsExecutor.finalDone(executeSashGroupOnWatch:_:)(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_46_26();
  return OUTLINED_FUNCTION_8_4(v1, v2);
}

{
  uint64_t v1;
  OUTLINED_FUNCTION_27_31(a1, type metadata accessor for WorkflowRunnerFinalDoneParameters);
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t WorkflowRunnerCATPatternsExecutor.inputText(executeSashGroupOnWatch:_:)( char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = OUTLINED_FUNCTION_29_24(a1, a2, a3);
  uint64_t v5 = type metadata accessor for WorkflowRunnerInputTextParameters(v4);
  *(void *)(v3 + 48) = OUTLINED_FUNCTION_16_41(v5);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowRunnerCATPatternsExecutor.inputText(executeSashGroupOnWatch:_:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_8_51(v1);
  WorkflowRunnerInputTextParameters.asKeyValuePairs()();
  *(void *)(v0 + 56) = v2;
  uint64_t v3 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 64) = v3;
  *uint64_t v3 = v0;
  v3[1] = WorkflowRunnerCATPatternsExecutor.inputText(executeSashGroupOnWatch:_:);
  unint64_t v4 = OUTLINED_FUNCTION_12_30();
  return OUTLINED_FUNCTION_18_33(v4, v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_4_42();
  OUTLINED_FUNCTION_37();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_4_1();
}

uint64_t WorkflowRunnerCATPatternsExecutor.inputText(executeSashGroupOnWatch:_:)(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_46_26();
  return OUTLINED_FUNCTION_8_4(v1, v2);
}

{
  uint64_t v1;
  OUTLINED_FUNCTION_27_31(a1, type metadata accessor for WorkflowRunnerInputTextParameters);
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v1 + 8));
}

void outlined destroy of WorkflowRunnerFinalDoneParameters(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = OUTLINED_FUNCTION_30_23(a1, a2);
  OUTLINED_FUNCTION_13_5(v2);
  OUTLINED_FUNCTION_1();
}

uint64_t WorkflowRunnerCATPatternsExecutor.showAlert(executeSashGroupOnWatch:_:)( char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = OUTLINED_FUNCTION_29_24(a1, a2, a3);
  uint64_t v5 = type metadata accessor for WorkflowRunnerShowAlertParameters(v4);
  *(void *)(v3 + 48) = OUTLINED_FUNCTION_16_41(v5);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowRunnerCATPatternsExecutor.showAlert(executeSashGroupOnWatch:_:)()
{
  uint64_t v1 = *(_BYTE **)(v0 + 48);
  uint64_t v2 = *(void (**)(_BYTE *))(v0 + 16);
  char v3 = *(_BYTE *)(v0 + 88);
  uint64_t v4 = (uint64_t)&v1[*(int *)(*(void *)(v0 + 40) + 20LL)];
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  __swift_storeEnumTagSinglePayload(v4, 1LL, 1LL, v5);
  *uint64_t v1 = v3;
  v2(v1);
  WorkflowRunnerShowAlertParameters.asKeyValuePairs()();
  *(void *)(v0 + 56) = v6;
  uint64_t v7 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 64) = v7;
  *uint64_t v7 = v0;
  v7[1] = WorkflowRunnerCATPatternsExecutor.showAlert(executeSashGroupOnWatch:_:);
  unint64_t v8 = OUTLINED_FUNCTION_12_30();
  return v9(v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_4_42();
  OUTLINED_FUNCTION_37();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_4_1();
}

uint64_t WorkflowRunnerCATPatternsExecutor.showAlert(executeSashGroupOnWatch:_:)(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_46_26();
  return OUTLINED_FUNCTION_8_4(v1, v2);
}

{
  uint64_t v1;
  OUTLINED_FUNCTION_27_31(a1, type metadata accessor for WorkflowRunnerShowAlertParameters);
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v1 + 8));
}

void WorkflowRunnerCATPatternsExecutor.__allocating_init(templateDir:options:globals:)()
{
}

void WorkflowRunnerCATPatternsExecutor.init(templateDir:options:globals:)()
{
  uint64_t v3 = type metadata accessor for CATOption(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_35();
  uint64_t v7 = v6 - v5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_35();
  uint64_t v11 = v10 - v9;
  outlined init with copy of AppDisplayInfo?( v0,  v10 - v9,  (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7, v1, v3);
  CATWrapper.init(templateDir:options:globals:)(v11, v7, v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  outlined destroy of Result<Output, Error>(v0, (uint64_t *)&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_24_0();
}

unint64_t lazy protocol witness table accessor for type WorkflowRunnerCATPatternsIdentifiers and conformance WorkflowRunnerCATPatternsIdentifiers()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowRunnerCATPatternsIdentifiers and conformance WorkflowRunnerCATPatternsIdentifiers;
  if (!lazy protocol witness table cache variable for type WorkflowRunnerCATPatternsIdentifiers and conformance WorkflowRunnerCATPatternsIdentifiers)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowRunnerCATPatternsIdentifiers,  &type metadata for WorkflowRunnerCATPatternsIdentifiers);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowRunnerCATPatternsIdentifiers and conformance WorkflowRunnerCATPatternsIdentifiers);
  }

  return result;
}

uint64_t protocol witness for WorkflowRunnerCATPatternsExecuting.finalDone(executeSashGroupOnWatch:_:) in conformance WorkflowRunnerCATPatternsExecutor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(**v3 + class metadata base offset for WorkflowRunnerCATPatternsExecutor);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = ListShortcutsCATsSimple.viewShortcutsInAppAsLabels();
  return v11(a1, a2, a3);
}

uint64_t protocol witness for WorkflowRunnerCATPatternsExecuting.inputText(executeSashGroupOnWatch:_:) in conformance WorkflowRunnerCATPatternsExecutor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(class metadata base offset for WorkflowRunnerCATPatternsExecutor + **v3 + 8);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = ListShortcutsCATsSimple.viewShortcutsInApp();
  return v11(a1, a2, a3);
}

uint64_t protocol witness for WorkflowRunnerCATPatternsExecuting.showAlert(executeSashGroupOnWatch:_:) in conformance WorkflowRunnerCATPatternsExecutor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(class metadata base offset for WorkflowRunnerCATPatternsExecutor + **v3 + 16);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = ListShortcutsCATsSimple.viewShortcutsInApp();
  return v11(a1, a2, a3);
}

uint64_t storeEnumTagSinglePayload for WorkflowRunnerCATPatternsIdentifiers( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_126188 + 4 * byte_189AB5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1261BC + 4 * asc_189AB0[v4]))();
}

uint64_t sub_1261BC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1261C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1261CCLL);
  }
  return result;
}

uint64_t sub_1261D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1261E0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1261E4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1261EC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WorkflowRunnerCATPatternsIdentifiers()
{
  return &type metadata for WorkflowRunnerCATPatternsIdentifiers;
}

uint64_t getEnumTagSinglePayload for WorkflowRunnerFinalDoneParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_indexTm);
}

uint64_t storeEnumTagSinglePayload for WorkflowRunnerFinalDoneParameters( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm);
}

void type metadata accessor for SpeakableString?(uint64_t a1)
{
  if (!lazy cache variable for type metadata for SpeakableString?)
  {
    uint64_t v2 = type metadata accessor for SpeakableString(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for SpeakableString?);
    }
  }

void initializeBufferWithCopyOfBuffer for WorkflowRunnerFinalDoneParameters( void *a1, void *a2, uint64_t a3)
{
  int v8 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  *a1 = *a2;
  if ((v8 & 0x20000) != 0)
  {
    OUTLINED_FUNCTION_48_21();
  }

  else
  {
    OUTLINED_FUNCTION_17_38();
    uint64_t v11 = OUTLINED_FUNCTION_9_37(v9, v10);
    OUTLINED_FUNCTION_48_21();
    if (OUTLINED_FUNCTION_1_36(v7))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      OUTLINED_FUNCTION_6_42(v12);
    }

    else
    {
      OUTLINED_FUNCTION_2_37(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL));
      OUTLINED_FUNCTION_28_17(v6);
    }

    uint64_t v13 = *(int *)(v5 + 28);
    uint64_t v14 = v3 + v13;
    if (OUTLINED_FUNCTION_1_36(v4 + v13))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      OUTLINED_FUNCTION_5_41(v15);
    }

    else
    {
      OUTLINED_FUNCTION_3_51(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL));
      OUTLINED_FUNCTION_28_17(v14);
    }
  }

  OUTLINED_FUNCTION_8_2();
}

void destroy for WorkflowRunnerFinalDoneParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  else {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v6, v5);
  }
}

void initializeWithCopy for WorkflowRunnerFinalDoneParameters()
{
  *uint64_t v6 = *v5;
  uint64_t v7 = OUTLINED_FUNCTION_9_37((uint64_t)v6, (uint64_t)v5);
  OUTLINED_FUNCTION_48_21();
  if (OUTLINED_FUNCTION_1_36(v4))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_6_42(v8);
  }

  else
  {
    OUTLINED_FUNCTION_2_37(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL));
    OUTLINED_FUNCTION_28_17(v3);
  }

  uint64_t v9 = *(int *)(v2 + 28);
  uint64_t v10 = v0 + v9;
  if (OUTLINED_FUNCTION_1_36(v1 + v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_5_41(v11);
  }

  else
  {
    OUTLINED_FUNCTION_3_51(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL));
    OUTLINED_FUNCTION_28_17(v10);
  }

  OUTLINED_FUNCTION_8_2();
}

void assignWithCopy for WorkflowRunnerFinalDoneParameters()
{
  uint64_t v4 = *v3;
  *(void *)uint64_t v0 = *v3;
  swift_retain(v4);
  swift_release();
  *(_BYTE *)(v0 + 8) = *(_BYTE *)(v1 + 8);
  uint64_t v5 = *(int *)(v2 + 24);
  uint64_t v6 = v0 + v5;
  uint64_t v7 = v1 + v5;
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v6, 1LL, v8);
  int v10 = OUTLINED_FUNCTION_1_36(v7);
  if (EnumTagSinglePayload)
  {
    if (!v10)
    {
      OUTLINED_FUNCTION_2_37(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL));
      OUTLINED_FUNCTION_28_17(v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v11 = *(void *)(v8 - 8);
  if (v10)
  {
    OUTLINED_FUNCTION_42_21(v6, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
LABEL_6:
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_6_42(v12);
    goto LABEL_7;
  }

  OUTLINED_FUNCTION_2_37(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 24));
LABEL_7:
  uint64_t v13 = *(int *)(v2 + 28);
  uint64_t v14 = v0 + v13;
  uint64_t v15 = v1 + v13;
  int v16 = __swift_getEnumTagSinglePayload(v0 + v13, 1LL, v8);
  int v17 = OUTLINED_FUNCTION_1_36(v15);
  if (!v16)
  {
    uint64_t v18 = *(void *)(v8 - 8);
    if (!v17)
    {
      OUTLINED_FUNCTION_3_51(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 24));
      goto LABEL_13;
    }

    OUTLINED_FUNCTION_42_21(v14, *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
    goto LABEL_12;
  }

  if (v17)
  {
LABEL_12:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_5_41(v19);
    goto LABEL_13;
  }

  OUTLINED_FUNCTION_3_51(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL));
  OUTLINED_FUNCTION_28_17(v14);
LABEL_13:
  OUTLINED_FUNCTION_8_2();
}

void initializeWithTake for WorkflowRunnerFinalDoneParameters()
{
  *uint64_t v6 = *v5;
  uint64_t v7 = OUTLINED_FUNCTION_9_37((uint64_t)v6, (uint64_t)v5);
  if (OUTLINED_FUNCTION_1_36(v4))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_6_42(v8);
  }

  else
  {
    OUTLINED_FUNCTION_2_37(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL));
    OUTLINED_FUNCTION_28_17(v3);
  }

  uint64_t v9 = *(int *)(v2 + 28);
  uint64_t v10 = v0 + v9;
  if (OUTLINED_FUNCTION_1_36(v1 + v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_5_41(v11);
  }

  else
  {
    OUTLINED_FUNCTION_3_51(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL));
    OUTLINED_FUNCTION_28_17(v10);
  }

  OUTLINED_FUNCTION_38_0();
}

void assignWithTake for WorkflowRunnerFinalDoneParameters()
{
  *(void *)uint64_t v0 = *v3;
  swift_release();
  *(_BYTE *)(v0 + 8) = *(_BYTE *)(v1 + 8);
  uint64_t v4 = *(int *)(v2 + 24);
  uint64_t v5 = v0 + v4;
  uint64_t v6 = v1 + v4;
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v5, 1LL, v7);
  int v9 = OUTLINED_FUNCTION_1_36(v6);
  if (EnumTagSinglePayload)
  {
    if (!v9)
    {
      OUTLINED_FUNCTION_2_37(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL));
      OUTLINED_FUNCTION_28_17(v5);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v10 = *(void *)(v7 - 8);
  if (v9)
  {
    OUTLINED_FUNCTION_42_21(v5, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_6_42(v11);
    goto LABEL_7;
  }

  OUTLINED_FUNCTION_2_37(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 40));
LABEL_7:
  uint64_t v12 = *(int *)(v2 + 28);
  uint64_t v13 = v0 + v12;
  uint64_t v14 = v1 + v12;
  int v15 = __swift_getEnumTagSinglePayload(v0 + v12, 1LL, v7);
  int v16 = OUTLINED_FUNCTION_1_36(v14);
  if (!v15)
  {
    uint64_t v17 = *(void *)(v7 - 8);
    if (!v16)
    {
      OUTLINED_FUNCTION_3_51(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 40));
      goto LABEL_13;
    }

    OUTLINED_FUNCTION_42_21(v13, *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8));
    goto LABEL_12;
  }

  if (v16)
  {
LABEL_12:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_5_41(v18);
    goto LABEL_13;
  }

  OUTLINED_FUNCTION_3_51(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL));
  OUTLINED_FUNCTION_28_17(v13);
LABEL_13:
  OUTLINED_FUNCTION_8_2();
}

uint64_t getEnumTagSinglePayload for WorkflowRunnerInputTextParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1267D4);
}

void __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 2147483646)
  {
    OUTLINED_FUNCTION_2();
  }

  else
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_24_31(a1 + *(int *)(a3 + 24), a2, v6);
  }

uint64_t storeEnumTagSinglePayload for WorkflowRunnerInputTextParameters( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_126858);
}

void __swift_store_extra_inhabitant_indexTm(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 2147483646)
  {
    *a1 = a2;
    OUTLINED_FUNCTION_2();
  }

  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_7_35((uint64_t)a1 + *(int *)(a4 + 24), a2, a2, v7);
  }

void type metadata completion function for WorkflowRunnerFinalDoneParameters(uint64_t a1)
{
  v4[0] = "\b";
  v4[1] = &unk_189C00;
  type metadata accessor for SpeakableString?(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(v2 - 8) + 64LL;
    uint64_t v6 = v5;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
  }

uint64_t *initializeBufferWithCopyOfBuffer for WorkflowRunnerShowAlertParameters( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v10 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v10);
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for SpeakableString(0LL);
    if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1LL, v8))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(_BYTE *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
      __swift_storeEnumTagSinglePayload((uint64_t)v6, 0LL, 1LL, v8);
    }
  }

  return v3;
}

uint64_t destroy for WorkflowRunnerShowAlertParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for SpeakableString(0LL);
  uint64_t result = __swift_getEnumTagSinglePayload(v2, 1LL, v3);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  }
  return result;
}

_BYTE *initializeWithCopy for WorkflowRunnerShowAlertParameters(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for SpeakableString(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1LL, v7))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v5, v6, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0LL, 1LL, v7);
  }

  return a1;
}

_BYTE *assignWithCopy for WorkflowRunnerShowAlertParameters(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for SpeakableString(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v5, 1LL, v7);
  int v9 = __swift_getEnumTagSinglePayload((uint64_t)v6, 1LL, v7);
  if (!EnumTagSinglePayload)
  {
    uint64_t v10 = *(void *)(v7 - 8);
    if (!v9)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24))(v5, v6, v7);
      return a1;
    }

    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v5, v7);
    goto LABEL_6;
  }

  if (v9)
  {
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v5, v6, *(void *)(*(void *)(v11 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v5, v6, v7);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0LL, 1LL, v7);
  return a1;
}

_BYTE *initializeWithTake for WorkflowRunnerShowAlertParameters(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for SpeakableString(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1LL, v7))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0LL, 1LL, v7);
  }

  return a1;
}

_BYTE *assignWithTake for WorkflowRunnerShowAlertParameters(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for SpeakableString(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v5, 1LL, v7);
  int v9 = __swift_getEnumTagSinglePayload((uint64_t)v6, 1LL, v7);
  if (!EnumTagSinglePayload)
  {
    uint64_t v10 = *(void *)(v7 - 8);
    if (!v9)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40))(v5, v6, v7);
      return a1;
    }

    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v5, v7);
    goto LABEL_6;
  }

  if (v9)
  {
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v5, v6, *(void *)(*(void *)(v11 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0LL, 1LL, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkflowRunnerShowAlertParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_126DC8);
}

void sub_126DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 254)
  {
    OUTLINED_FUNCTION_2();
  }

  else
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_24_31(a1 + *(int *)(a3 + 20), a2, v6);
  }

uint64_t storeEnumTagSinglePayload for WorkflowRunnerShowAlertParameters( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_126E3C);
}

void sub_126E3C(_BYTE *a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 254)
  {
    *a1 = a2 + 1;
    OUTLINED_FUNCTION_2();
  }

  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_7_35((uint64_t)&a1[*(int *)(a4 + 20)], a2, a2, v7);
  }

void type metadata completion function for WorkflowRunnerShowAlertParameters(uint64_t a1)
{
  v4[0] = &unk_189C00;
  type metadata accessor for SpeakableString?(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
  }

uint64_t type metadata accessor for WorkflowRunnerCATPatternsExecutor(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for WorkflowRunnerCATPatternsExecutor,  (uint64_t)&nominal type descriptor for WorkflowRunnerCATPatternsExecutor);
}

uint64_t type metadata completion function for WorkflowRunnerCATPatternsExecutor(uint64_t a1)
{
  return swift_initClassMetadata2( a1,  0LL,  0LL,  v2,  a1 + class metadata base offset for WorkflowRunnerCATPatternsExecutor);
}

uint64_t ObjC metadata update function for WorkflowRunnerCATPatternsExecutor()
{
  return type metadata accessor for WorkflowRunnerCATPatternsExecutor(0LL);
}

uint64_t OUTLINED_FUNCTION_1_36(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1LL, v1);
}

uint64_t OUTLINED_FUNCTION_2_37@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v3, v1);
}

uint64_t OUTLINED_FUNCTION_3_51@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v3, v2, v1);
}

uint64_t OUTLINED_FUNCTION_4_42()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 64);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 7outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v0;
  return swift_task_dealloc(v5);
}

void *OUTLINED_FUNCTION_5_41(uint64_t a1)
{
  return memcpy(v2, v1, *(void *)(*(void *)(a1 - 8) + 64LL));
}

void *OUTLINED_FUNCTION_6_42(uint64_t a1)
{
  return memcpy(v1, v2, *(void *)(*(void *)(a1 - 8) + 64LL));
}

uint64_t OUTLINED_FUNCTION_8_51(uint64_t a1)
{
  *(void *)uint64_t v1 = 0LL;
  *(_BYTE *)(v1 + 8) = v5;
  return v4(v1);
}

uint64_t OUTLINED_FUNCTION_9_37(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return type metadata accessor for SpeakableString(0LL);
}

unint64_t OUTLINED_FUNCTION_12_30()
{
  return 0xD000000000000018LL;
}

uint64_t OUTLINED_FUNCTION_16_41(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return swift_task_alloc((*(void *)(*(void *)(a1 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

  ;
}

uint64_t OUTLINED_FUNCTION_18_33(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_20_35(uint64_t a1, uint64_t a2)
{
  return outlined assign with take of SpeakableString?(a1, a2);
}

uint64_t OUTLINED_FUNCTION_21_26(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1LL, v1);
}

__n128 *OUTLINED_FUNCTION_23_32(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x656369766564LL;
  result[2].n128_u64[1] = 0xE600000000000000LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_24_31(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_getEnumTagSinglePayload(a1, a2, a3);
}

void OUTLINED_FUNCTION_27_31(uint64_t a1, uint64_t (*a2)(void))
{
}

uint64_t OUTLINED_FUNCTION_29_24(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = a3;
  *(void *)(v4 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v3;
  *(void *)(v4 + 16) = a2;
  *(_BYTE *)(v4 + 88) = a1;
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_30_23(uint64_t a1, uint64_t (*a2)(void))
{
  return a2(0LL);
}

void OUTLINED_FUNCTION_31_25(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t OUTLINED_FUNCTION_33_21(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32LL))(a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_34_30(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32LL))(a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_40_25()
{
  return type metadata accessor for WorkflowRunnerInputTextParameters(0LL);
}

uint64_t OUTLINED_FUNCTION_41_27()
{
  return type metadata accessor for WorkflowRunnerFinalDoneParameters(0LL);
}

uint64_t OUTLINED_FUNCTION_42_21@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_43_25(uint64_t (*a1)(void))
{
  return a1(0LL);
}

uint64_t OUTLINED_FUNCTION_46_26()
{
  return *(void *)(v0 + 80);
}

uint64_t OUTLINED_FUNCTION_47_22()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_48_21()
{
  return swift_retain(v0);
}

void *OUTLINED_FUNCTION_50_20()
{
  *(void *)(v0 + 216) = v2;
  return __swift_allocate_boxed_opaque_existential_1(v1);
}

void OUTLINED_FUNCTION_53_21(uint64_t a1@<X8>)
{
  *(void *)(v1 + 88) = (a1 - 32) | 0x8000000000000000LL;
}

void *OUTLINED_FUNCTION_54_24()
{
  *(void *)(v0 + 168) = v1;
  return __swift_allocate_boxed_opaque_existential_1(v2);
}

uint64_t OUTLINED_FUNCTION_56_25(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1LL, v1);
}

void OUTLINED_FUNCTION_57_19(uint64_t a1, uint64_t *a2)
{
}

  ;
}

uint64_t IntroduceCustomIntentOutputProvider.__allocating_init(items:templating:viewBuilder:)( uint64_t a1, uint64_t a2, void *a3)
{
  return IntroduceCustomIntentOutputProvider.__allocating_init(items:templating:viewBuilder:)( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized IntroduceCustomIntentOutputProvider.__allocating_init(items:templating:viewBuilder:));
}

uint64_t IntroduceCustomIntentCatTemplater.makeTemplate(items:_:)(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_35();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_35();
  uint64_t v11 = v10 - v9;
  TemplatingResult.init(dialogId:print:speak:)( 0x7974706D65LL,  0xE500000000000000LL,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  v10 - v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v11, v7);
  swift_storeEnumTagMultiPayload(v6, v3, 0LL);
  a2(v6);
  outlined destroy of URL?(v6, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t IntroduceCustomIntentCatTemplater.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t IntroduceCustomIntentOutputProvider.init(items:templating:viewBuilder:)( uint64_t a1, uint64_t a2, void *a3)
{
  return IntroduceCustomIntentOutputProvider.__allocating_init(items:templating:viewBuilder:)( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized IntroduceCustomIntentOutputProvider.init(items:templating:viewBuilder:));
}

uint64_t IntroduceCustomIntentOutputProvider.__allocating_init(items:templating:viewBuilder:)( uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = a3[3];
  uint64_t v10 = a3[4];
  uint64_t v11 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a3, v9);
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_35();
  uint64_t v14 = v13 - v12;
  (*(void (**)(uint64_t))(v15 + 16))(v13 - v12);
  uint64_t v16 = a4(a1, a2, v14, v4, v9, v10);
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  return v16;
}

uint64_t IntroduceCustomIntentOutputProvider.makeOutput(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[11];
  uint64_t v6 = v2[12];
  __swift_project_boxed_opaque_existential_1(v2 + 8, v5);
  uint64_t v7 = v2[2];
  uint64_t v8 = (void *)swift_allocObject(&unk_1FCF68, 40LL, 7LL);
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = v2;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t (*)(uint64_t), void *, uint64_t, uint64_t))(v6 + 8);
  swift_retain(a2);
  swift_retain(v2);
  v9(v7, partial apply for closure #1 in IntroduceCustomIntentOutputProvider.makeOutput(_:), v8, v5, v6);
  return swift_release();
}

uint64_t closure #1 in IntroduceCustomIntentOutputProvider.makeOutput(_:)( uint64_t a1, void (*a2)(__int128 *), uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for AceOutput(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v33 = v7;
  uint64_t v34 = v8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v15);
  uint64_t v17 = (uint64_t *)((char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)v17);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    *(void *)&__int128 v35 = *v17;
    uint64_t v18 = v35;
    char v38 = 1;
    swift_errorRetain(v35);
    a2(&v35);
    swift_errorRelease(v18);
  }

  else
  {
    uint64_t v31 = v12;
    uint64_t v32 = v11;
    (*(void (**)(char *, void *, uint64_t))(v12 + 32))(v14, v17, v11);
    uint64_t v19 = a4[6];
    uint64_t v20 = a4[7];
    __swift_project_boxed_opaque_existential_1(a4 + 3, v19);
    uint64_t v21 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v20 + 8))(v14, a4[2], v19, v20);
    uint64_t v22 = v21;
    if ((unint64_t)v21 >> 62)
    {
      if (v21 < 0) {
        uint64_t v29 = v21;
      }
      else {
        uint64_t v29 = v21 & 0xFFFFFFFFFFFFFF8LL;
      }
      unint64_t v30 = type metadata accessor for SABaseCommand();
      uint64_t v24 = _bridgeCocoaArray<A>(_:)(v29, v30);
    }

    else
    {
      swift_bridgeObjectRetain(v21);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v23);
      type metadata accessor for SABaseCommand();
      uint64_t v24 = v22;
    }

    swift_bridgeObjectRelease();
    uint64_t v37 = 0LL;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    AceOutput.init(commands:flowActivity:)(v24, &v35);
    uint64_t v25 = v33;
    *((void *)&v36 + 1) = v33;
    uint64_t v37 = &protocol witness table for AceOutput;
    uint64_t v26 = __swift_allocate_boxed_opaque_existential_1(&v35);
    uint64_t v27 = v34;
    (*(void (**)(void *, char *, uint64_t))(v34 + 16))(v26, v10, v25);
    char v38 = 0;
    a2(&v35);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v25);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v32);
  }

  return outlined destroy of URL?((uint64_t)&v35, &demangling cache variable for type metadata for Result<Output, Error>);
}

uint64_t IntroduceCustomIntentOutputProvider.deinit()
{
  return v0;
}

uint64_t IntroduceCustomIntentOutputProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 104LL, 7LL);
}

void *specialized IntroduceCustomIntentOutputProvider.__allocating_init(items:templating:viewBuilder:)( uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for IntroduceCustomIntentOutputProvider();
  uint64_t v15 = (void *)swift_allocObject(v14, 104LL, 7LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, a5);
  uint64_t v16 = specialized IntroduceCustomIntentOutputProvider.init(items:templating:viewBuilder:)( a1,  a2,  (uint64_t)v13,  v15,  a5,  a6);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a3, a5);
  return v16;
}

void *specialized IntroduceCustomIntentOutputProvider.init(items:templating:viewBuilder:)( uint64_t a1, __int128 *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  a4[6] = a5;
  a4[7] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4 + 3);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32LL))(boxed_opaque_existential_1, a3, a5);
  a4[2] = a1;
  outlined init with take of AceServiceInvokerAsync(a2, (uint64_t)(a4 + 8));
  return a4;
}

uint64_t sub_127890()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t partial apply for closure #1 in IntroduceCustomIntentOutputProvider.makeOutput(_:)(uint64_t a1)
{
  return closure #1 in IntroduceCustomIntentOutputProvider.makeOutput(_:)( a1,  *(void (**)(__int128 *))(v1 + 16),  *(void *)(v1 + 24),  *(void **)(v1 + 32));
}

uint64_t type metadata accessor for IntroduceCustomIntentCatTemplater()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin33IntroduceCustomIntentCatTemplater);
}

uint64_t type metadata accessor for IntroduceCustomIntentViewBuilder()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin32IntroduceCustomIntentViewBuilder);
}

uint64_t type metadata accessor for IntroduceCustomIntentOutputProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin35IntroduceCustomIntentOutputProvider);
}

uint64_t INImage.convertToVisualProperty()(uint64_t a1)
{
  v2[21] = a1;
  v2[22] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageElement.AspectRatio?);
  v2[23] = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for ImageElement.AspectRatio(0LL);
  v2[24] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[25] = v5;
  v2[26] = OUTLINED_FUNCTION_9_0(v5);
  uint64_t v6 = type metadata accessor for ImageElement.ImageStyle(0LL);
  v2[27] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[28] = v7;
  v2[29] = OUTLINED_FUNCTION_9_0(v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageElement.Background?);
  v2[30] = OUTLINED_FUNCTION_9_0(*(void *)(v8 - 8));
  uint64_t v9 = type metadata accessor for ImageElement.RenderingMode(0LL);
  v2[31] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[32] = v10;
  v2[33] = OUTLINED_FUNCTION_9_0(v10);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Color?);
  v2[34] = OUTLINED_FUNCTION_9_0(*(void *)(v11 - 8));
  uint64_t v12 = type metadata accessor for ImageElement(0LL);
  v2[35] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[36] = v13;
  v2[37] = OUTLINED_FUNCTION_9_0(v13);
  return OUTLINED_FUNCTION_21_0();
}

uint64_t INImage.convertToVisualProperty()()
{
  if ([*(id *)(v1 + 176) _isSystem]
    && (uint64_t v2 = outlined bridged method (pb) of @objc INImage._name.getter(*(void **)(v1 + 176)), v3))
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)(v1 + 272);
    uint64_t v63 = *(void *)(v1 + 280);
    uint64_t v65 = *(void *)(v1 + 288);
    uint64_t v6 = *(void *)(v1 + 256);
    uint64_t v7 = *(void *)(v1 + 264);
    uint64_t v9 = *(void *)(v1 + 240);
    uint64_t v8 = *(void *)(v1 + 248);
    uint64_t v58 = *(void *)(v1 + 296);
    uint64_t v59 = v8;
    uint64_t v10 = *(void *)(v1 + 224);
    uint64_t v11 = *(void *)(v1 + 232);
    uint64_t v12 = *(void *)(v1 + 216);
    uint64_t v56 = v10;
    uint64_t v60 = v6;
    uint64_t v61 = *(void *)(v1 + 168);
    uint64_t v57 = v2;
    uint64_t v13 = type metadata accessor for Color(0LL);
    OUTLINED_FUNCTION_50_1(v5, v14, v15, v13);
    (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))( v7,  enum case for ImageElement.RenderingMode.template(_:),  v8);
    uint64_t v16 = type metadata accessor for ImageElement.Background(0LL);
    OUTLINED_FUNCTION_50_1(v9, v17, v18, v16);
    (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))( v11,  enum case for ImageElement.ImageStyle.default(_:),  v12);
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_ProtoIdiom>);
    uint64_t v20 = OUTLINED_FUNCTION_19_28();
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = *(unsigned __int8 *)(v21 + 80);
    uint64_t v23 = (v22 + 32) & ~v22;
    uint64_t v24 = swift_allocObject(v19, v23 + *(void *)(v21 + 72), v22 | 7);
    *(_OWORD *)(v24 + 16) = xmmword_17E650;
    (*(void (**)(uint64_t, void, uint64_t))(v21 + 104))( v24 + v23,  enum case for _ProtoIdiom.default(_:),  v20);
    uint64_t v25 = specialized Set.init(_nonEmptyArrayLiteral:)(v24);
    static ImageElement.symbol(_:darkModeName:tintColor:renderingMode:imageStyle:background:idioms:punchesThroughBackground:)( v57,  v4,  0LL,  0LL,  v5,  v7,  v11,  v9,  v25,  0);
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v4);
    OUTLINED_FUNCTION_14_39(v56);
    outlined destroy of URL?(v9, &demangling cache variable for type metadata for ImageElement.Background?);
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v7, v59);
    outlined destroy of URL?(v5, &demangling cache variable for type metadata for Color?);
    VisualPropertyConvertible<>.asVisualProperty()( v63,  &protocol witness table for ImageElement,  &protocol witness table for ImageElement);
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v58, v63);
    uint64_t v27 = OUTLINED_FUNCTION_61_7();
    uint64_t v28 = v61;
  }

  else
  {
    if ([*(id *)(v1 + 176) _requiresRetrieval])
    {
      uint64_t v29 = v1 + 16;
      unint64_t v30 = *(void **)(v1 + 176);
      *(void *)(v1 + 56) = v1 + 144;
      *(void *)(v1 + 16) = v1;
      *(void *)(v1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = INImage.convertToVisualProperty();
      uint64_t v31 = swift_continuation_init(v1 + 16, 1LL);
      *(void *)(v1 + 80) = _NSConcreteStackBlock;
      uint64_t v32 = (void *)(v1 + 80);
      v32[1] = 0x40000000LL;
      _OWORD v32[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned INImage?, @unowned NSError?) -> () with result type INImage?;
      v32[3] = &block_descriptor_7;
      v32[4] = v31;
      [v30 _retrieveImageDataWithReply:v32];
      return swift_continuation_await(v29);
    }

    id v34 = *(id *)(v1 + 176);
    uint64_t v35 = outlined bridged method (pb) of @objc INImage._imageData.getter(v34);
    if (v36 >> 60 == 15)
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v37 = OUTLINED_FUNCTION_48();
      __swift_project_value_buffer(v37, (uint64_t)static Logger.voiceCommands);
      OUTLINED_FUNCTION_9_5();
      os_log_type_t v38 = OUTLINED_FUNCTION_73();
      if (OUTLINED_FUNCTION_31_0(v38))
      {
        uint64_t v39 = (_WORD *)OUTLINED_FUNCTION_57_1();
        *uint64_t v39 = 0;
        OUTLINED_FUNCTION_33_2(&dword_0, v40, v41, "image data is empty");
        OUTLINED_FUNCTION_1_0((uint64_t)v39);
      }

      uint64_t v42 = *(void *)(v1 + 168);

      uint64_t v27 = OUTLINED_FUNCTION_61_7();
      uint64_t v28 = v42;
      uint64_t v43 = 1LL;
      goto LABEL_14;
    }

    uint64_t v64 = *(void *)(v1 + 288);
    uint64_t v44 = *(void *)(v1 + 224);
    uint64_t v45 = *(void *)(v1 + 208);
    uint64_t v46 = *(void *)(v1 + 192);
    uint64_t v47 = *(void *)(v1 + 200);
    uint64_t v48 = *(void *)(v1 + 184);
    uint64_t v62 = *(void *)(v1 + 168);
    outlined copy of Data._Representation(v35, v36);
    OUTLINED_FUNCTION_7_36();
    OUTLINED_FUNCTION_7_36();
    OUTLINED_FUNCTION_22_28(v49, v50);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v48, v45, v46);
    OUTLINED_FUNCTION_15_24();
    OUTLINED_FUNCTION_35_31( enum case for ImageElement.ImageStyle.default(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 104));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_ProtoIdiom>);
    uint64_t v51 = OUTLINED_FUNCTION_19_28();
    uint64_t v52 = OUTLINED_FUNCTION_3_52(v51);
    *(_OWORD *)(v52 + 16) = xmmword_17E650;
    OUTLINED_FUNCTION_24_32(v52 + v47, enum case for _ProtoIdiom.default(_:));
    specialized Set.init(_nonEmptyArrayLiteral:)(v52);
    OUTLINED_FUNCTION_2_38();
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_14_39(v44);
    outlined destroy of URL?(v48, &demangling cache variable for type metadata for ImageElement.AspectRatio?);
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<VisualElementConvertible>);
    uint64_t v54 = (__n128 *)OUTLINED_FUNCTION_13_31(v53);
    uint64_t v55 = OUTLINED_FUNCTION_18_34(v54, (__n128)xmmword_17E650);
    OUTLINED_FUNCTION_33_22(v55, (uint64_t)&protocol witness table for VisualElement);
    OUTLINED_FUNCTION_31_26();
    OUTLINED_FUNCTION_12_31();
    OUTLINED_FUNCTION_5_42();
    OUTLINED_FUNCTION_5_42();
    OUTLINED_FUNCTION_34_31(v64);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
    uint64_t v27 = OUTLINED_FUNCTION_61_7();
    uint64_t v28 = v62;
  }

  uint64_t v43 = 0LL;
LABEL_14:
  OUTLINED_FUNCTION_1_37(v28, v43, v26, v27);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

{
  uint64_t v0;
  *(void *)(*(void *)v0 + 304LL) = *(void *)(*(void *)v0 + 48LL);
  return OUTLINED_FUNCTION_21_0();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v2 = *(void **)(v1 + 144);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = outlined bridged method (pb) of @objc INImage._imageData.getter(v3);
    if (v5 >> 60 != 15)
    {
      id v34 = *(void *)(v1 + 288);
      uint64_t v20 = *(void *)(v1 + 224);
      uint64_t v21 = *(void *)(v1 + 208);
      uint64_t v22 = *(void *)(v1 + 192);
      uint64_t v23 = *(void *)(v1 + 200);
      uint64_t v24 = *(void *)(v1 + 184);
      uint64_t v33 = *(void *)(v1 + 168);
      outlined copy of Data._Representation(v4, v5);
      OUTLINED_FUNCTION_7_36();
      OUTLINED_FUNCTION_7_36();
      OUTLINED_FUNCTION_22_28(v25, v26);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v24, v21, v22);
      OUTLINED_FUNCTION_15_24();
      OUTLINED_FUNCTION_35_31( enum case for ImageElement.ImageStyle.default(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 104));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_ProtoIdiom>);
      uint64_t v27 = OUTLINED_FUNCTION_19_28();
      uint64_t v28 = OUTLINED_FUNCTION_3_52(v27);
      *(_OWORD *)(v28 + 16) = xmmword_17E650;
      OUTLINED_FUNCTION_24_32(v28 + v23, enum case for _ProtoIdiom.default(_:));
      specialized Set.init(_nonEmptyArrayLiteral:)(v28);
      OUTLINED_FUNCTION_2_38();
      OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_14_39(v20);
      outlined destroy of URL?(v24, &demangling cache variable for type metadata for ImageElement.AspectRatio?);
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<VisualElementConvertible>);
      unint64_t v30 = (__n128 *)OUTLINED_FUNCTION_13_31(v29);
      uint64_t v31 = OUTLINED_FUNCTION_18_34(v30, (__n128)xmmword_17E650);
      OUTLINED_FUNCTION_33_22(v31, (uint64_t)&protocol witness table for VisualElement);
      OUTLINED_FUNCTION_31_26();
      OUTLINED_FUNCTION_12_31();
      OUTLINED_FUNCTION_5_42();
      OUTLINED_FUNCTION_5_42();
      OUTLINED_FUNCTION_34_31(v34);
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
      uint64_t v13 = OUTLINED_FUNCTION_61_7();
      uint64_t v14 = v33;
      uint64_t v19 = 0LL;
      goto LABEL_15;
    }

    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v6 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.voiceCommands);
    OUTLINED_FUNCTION_9_5();
    uint64_t v7 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_31_0(v7))
    {
      uint64_t v8 = (_WORD *)OUTLINED_FUNCTION_57_1();
      *uint64_t v8 = 0;
      OUTLINED_FUNCTION_33_2(&dword_0, v9, v10, "image data is empty");
      OUTLINED_FUNCTION_1_0((uint64_t)v8);
    }

    uint64_t v11 = *(void *)(v1 + 168);

    uint64_t v13 = OUTLINED_FUNCTION_61_7();
    uint64_t v14 = v11;
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v15 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.voiceCommands);
    OUTLINED_FUNCTION_9_5();
    uint64_t v16 = OUTLINED_FUNCTION_73();
    if (os_log_type_enabled((os_log_t)v0, v16))
    {
      uint64_t v17 = (uint8_t *)OUTLINED_FUNCTION_57_1();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_0, (os_log_t)v0, v16, "Can't retrieve image;", v17, 2u);
      OUTLINED_FUNCTION_1_0((uint64_t)v17);
    }

    uint64_t v18 = *(void *)(v1 + 168);

    uint64_t v13 = OUTLINED_FUNCTION_61_7();
    uint64_t v14 = v18;
  }

  uint64_t v19 = 1LL;
LABEL_15:
  OUTLINED_FUNCTION_1_37(v14, v19, v12, v13);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t INImage.convertToVisualProperty()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v6 = *(void *)(v5 + 304);
  uint64_t v7 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain(v6);
  uint64_t v8 = swift_errorRetain(v6);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.error.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = *(void *)(v5 + 304);
  if (v11)
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    uint64_t v21 = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    swift_getErrorValue(v12, v5 + 152, v5 + 120);
    uint64_t v15 = Error.localizedDescription.getter(*(void *)(v5 + 128), *(void *)(v5 + 136));
    *(void *)(v5 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 + 160, v5 + 168, v13 + 4);
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_23_6();
    OUTLINED_FUNCTION_23_6();
    _os_log_impl(&dword_0, v9, v10, "Error retrieving image data %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v14);
    OUTLINED_FUNCTION_1_0((uint64_t)v13);

    OUTLINED_FUNCTION_23_6();
  }

  else
  {
    OUTLINED_FUNCTION_23_6();
    OUTLINED_FUNCTION_23_6();
    OUTLINED_FUNCTION_23_6();
  }

  uint64_t v17 = *(void *)(v5 + 168);
  uint64_t v18 = OUTLINED_FUNCTION_61_7();
  OUTLINED_FUNCTION_1_37(v17, 1LL, v19, v18);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned INImage?, @unowned NSError?) -> () with result type INImage?( uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3) {
    return specialized _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(v3, a3);
  }
  id v6 = a2;
  return specialized _resumeUnsafeThrowingContinuation<A>(_:_:)(v3, (uint64_t)a2);
}

uint64_t ImageElement.convertToVisualProperty()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<VisualElementConvertible>);
  uint64_t v1 = OUTLINED_FUNCTION_13_31(v0);
  *(_OWORD *)(v1 + 16) = xmmword_17E650;
  *(void *)(v1 + 56) = type metadata accessor for VisualElement(0LL);
  *(void *)(v1 + 64) = &protocol witness table for VisualElement;
  __swift_allocate_boxed_opaque_existential_1((void *)(v1 + 32));
  ImageElement.asVisualElement()();
  return OUTLINED_FUNCTION_12_31();
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v2 = OUTLINED_FUNCTION_19_28();
  uint64_t v34 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v29 - v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
    os_log_type_t v10 = &_swiftEmptySetSingleton;
    goto LABEL_16;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<_ProtoIdiom>);
  uint64_t result = static _SetStorage.allocate(capacity:)(v8);
  os_log_type_t v10 = (void *)result;
  uint64_t v31 = *(void *)(a1 + 16);
  if (!v31)
  {
LABEL_16:
    swift_bridgeObjectRelease(a1);
    return (uint64_t)v10;
  }

  unint64_t v11 = 0LL;
  uint64_t v33 = result + 56;
  uint64_t v12 = *(unsigned __int8 *)(v34 + 80);
  uint64_t v29 = a1;
  uint64_t v30 = a1 + ((v12 + 32) & ~v12);
  while (v11 < *(void *)(a1 + 16))
  {
    uint64_t v13 = *(void *)(v34 + 72);
    uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v34 + 16);
    v14(v7, v30 + v13 * v11, v2);
    uint64_t v15 = v10[5];
    uint64_t v16 = lazy protocol witness table accessor for type _ProtoIdiom and conformance _ProtoIdiom( &lazy protocol witness table cache variable for type _ProtoIdiom and conformance _ProtoIdiom,  (uint64_t)&protocol conformance descriptor for _ProtoIdiom);
    uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v2, v16) & ~(-1LL << *((_BYTE *)v10 + 32));
    OUTLINED_FUNCTION_21_27();
    if ((v20 & v19) != 0)
    {
      unint64_t v32 = v11;
      uint64_t v22 = ~v21;
      while (1)
      {
        v14(v5, v10[6] + v17 * v13, v2);
        uint64_t v23 = lazy protocol witness table accessor for type _ProtoIdiom and conformance _ProtoIdiom( &lazy protocol witness table cache variable for type _ProtoIdiom and conformance _ProtoIdiom,  (uint64_t)&protocol conformance descriptor for _ProtoIdiom);
        char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v7, v2, v23);
        uint64_t v25 = *(void (**)(char *, uint64_t))(v34 + 8);
        v25(v5, v2);
        if ((v24 & 1) != 0) {
          break;
        }
        uint64_t v17 = (v17 + 1) & v22;
        OUTLINED_FUNCTION_21_27();
        if ((v19 & v20) == 0)
        {
          a1 = v29;
          unint64_t v11 = v32;
          goto LABEL_10;
        }
      }

      uint64_t result = ((uint64_t (*)(char *, uint64_t))v25)(v7, v2);
      a1 = v29;
      unint64_t v11 = v32;
    }

    else
    {
LABEL_10:
      *(void *)(v33 + 8 * v18) = v20 | v19;
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v34 + 32))(v10[6] + v17 * v13, v7, v2);
      uint64_t v26 = v10[2];
      BOOL v27 = __OFADD__(v26, 1LL);
      uint64_t v28 = v26 + 1;
      if (v27) {
        goto LABEL_18;
      }
      v10[2] = v28;
    }

    if (++v11 == v31) {
      goto LABEL_16;
    }
  }

  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t outlined bridged method (pb) of @objc INImage._imageData.getter(void *a1)
{
  id v1 = [a1 _imageData];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t outlined bridged method (pb) of @objc INImage._name.getter(void *a1)
{
  id v1 = [a1 _name];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t lazy protocol witness table accessor for type _ProtoIdiom and conformance _ProtoIdiom( unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for _ProtoIdiom(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_1_37(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_task_dealloc(*(void *)(v4 + 296));
}

uint64_t OUTLINED_FUNCTION_2_38()
{
  return static ImageElement.pngData(_:darkModeData:imageStyle:aspectRatio:fixedWidth:fixedHeight:idioms:)( v0,  v1,  0LL,  0xF000000000000000LL,  v3,  v2,  2LL,  2LL);
}

uint64_t OUTLINED_FUNCTION_3_52(uint64_t a1)
{
  return swift_allocObject( v1,  ((*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL))
         + *(void *)(*(void *)(a1 - 8) + 72LL),
           *(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) | 7LL);
}

void OUTLINED_FUNCTION_5_42()
{
}

id OUTLINED_FUNCTION_7_36()
{
  return [v0 *(SEL *)(v1 + 3672)];
}

uint64_t OUTLINED_FUNCTION_12_31()
{
  return VisualProperty.init(_:safeForLogging:focusAction:selectedAction:)(v0, 0LL);
}

uint64_t OUTLINED_FUNCTION_13_31(uint64_t a1)
{
  return swift_allocObject(a1, 72LL, 7LL);
}

uint64_t OUTLINED_FUNCTION_14_39@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t OUTLINED_FUNCTION_15_24()
{
  return __swift_storeEnumTagSinglePayload(v1, 0LL, 1LL, v0);
}

uint64_t OUTLINED_FUNCTION_18_34(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for VisualElement(0LL);
}

uint64_t OUTLINED_FUNCTION_19_28()
{
  return type metadata accessor for _ProtoIdiom(0LL);
}

  ;
}

uint64_t OUTLINED_FUNCTION_22_28(double a1, double a2)
{
  float v3 = a2;
  return ImageElement.AspectRatio.init(width:height:)(v2, v3);
}

uint64_t OUTLINED_FUNCTION_24_32(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104))(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_31_26()
{
  return ImageElement.asVisualElement()();
}

void *OUTLINED_FUNCTION_33_22@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v3 + 56) = a1;
  *(void *)(v3 + 64) = a2;
  return __swift_allocate_boxed_opaque_existential_1(v2);
}

uint64_t OUTLINED_FUNCTION_34_31@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t OUTLINED_FUNCTION_35_31@<X0>( uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(v3, a1, v2);
}

SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::Properties_optional __swiftcall WorkflowRunnerCATsSimple.Properties.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of WorkflowRunnerCATsSimple.Properties.init(rawValue:);
  OUTLINED_FUNCTION_88_6(v1, v2);
  OUTLINED_FUNCTION_58_2();
  OUTLINED_FUNCTION_1();
  return result;
}

unint64_t WorkflowRunnerCATsSimple.Properties.rawValue.getter()
{
  return 0xD000000000000018LL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance WorkflowRunnerCATsSimple.Properties( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance WorkflowRunnerCATsSimple.Properties()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance WorkflowRunnerCATsSimple.Properties( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance WorkflowRunnerCATsSimple.Properties( uint64_t a1)
{
}

SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance WorkflowRunnerCATsSimple.Properties@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::Properties_optional *a2@<X8>)
{
  result.int value = WorkflowRunnerCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance WorkflowRunnerCATsSimple.Properties()
{
  *uint64_t v0 = 0xD000000000000018LL;
  v0[1] = v1;
  OUTLINED_FUNCTION_1();
}

uint64_t WorkflowRunnerCATsSimple.inputDate(device:inputType:message:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 48) = OUTLINED_FUNCTION_20_10(v4);
  *(void *)(v3 + 56) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowRunnerCATsSimple.inputDate(device:inputType:message:)()
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_26_29(v4);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_79_4(v5);
  uint64_t v7 = OUTLINED_FUNCTION_4_3(v6, (__n128)xmmword_17FDF0);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    v2[7] = 0LL;
    _BYTE v2[8] = 0LL;
  }

  OUTLINED_FUNCTION_0_46(v7);
  OUTLINED_FUNCTION_12_4(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_23_23(v10);
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v0;
    uint64_t v13 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v13);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v14 = OUTLINED_FUNCTION_6_43();
  OUTLINED_FUNCTION_12_4(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = OUTLINED_FUNCTION_32_16();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v0;
    uint64_t v17 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v17);
  }

  uint64_t v18 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 7outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v18;
  *uint64_t v18 = v1;
  v18[1] = WorkflowRunnerCATsSimple.inputDate(device:inputType:message:);
  unint64_t v19 = OUTLINED_FUNCTION_28_23();
  return OUTLINED_FUNCTION_24_1(v19, v20, v21, v22);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_18_24();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_49_16();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_15_0();
    uint64_t v2 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::InputDateDialogIds_optional __swiftcall WorkflowRunnerCATsSimple.InputDateDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of WorkflowRunnerCATsSimple.InputDateDialogIds.init(rawValue:);
  OUTLINED_FUNCTION_88_6(v1, v2);
  OUTLINED_FUNCTION_58_2();
  OUTLINED_FUNCTION_1();
  return result;
}

uint64_t WorkflowRunnerCATsSimple.InputDateDialogIds.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_128D64 + 4 * byte_189E50[a1]))( 0x6D6F74737563LL,  0xE600000000000000LL);
}

uint64_t sub_128D64()
{
  return 1702125924LL;
}

uint64_t sub_128D74()
{
  return 0x54646E4165746164LL;
}

uint64_t sub_128D98()
{
  return 1701669236LL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance WorkflowRunnerCATsSimple.InputDateDialogIds()
{
  specialized == infix<A>(_:_:)();
}

void protocol witness for Hashable.hashValue.getter in conformance WorkflowRunnerCATsSimple.InputDateDialogIds()
{
}

void protocol witness for Hashable.hash(into:) in conformance WorkflowRunnerCATsSimple.InputDateDialogIds()
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance WorkflowRunnerCATsSimple.InputDateDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::InputDateDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance WorkflowRunnerCATsSimple.InputDateDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::InputDateDialogIds_optional *a2@<X8>)
{
  result.int value = WorkflowRunnerCATsSimple.InputDateDialogIds.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance WorkflowRunnerCATsSimple.InputDateDialogIds()
{
  unsigned __int8 v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = WorkflowRunnerCATsSimple.InputDateDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t WorkflowRunnerCATsSimple.inputDateAsLabels(device:inputType:message:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 48) = OUTLINED_FUNCTION_20_10(v4);
  *(void *)(v3 + 56) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowRunnerCATsSimple.inputDateAsLabels(device:inputType:message:)()
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_26_29(v4);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_79_4(v5);
  uint64_t v7 = OUTLINED_FUNCTION_4_3(v6, (__n128)xmmword_17FDF0);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    v2[7] = 0LL;
    _BYTE v2[8] = 0LL;
  }

  OUTLINED_FUNCTION_0_46(v7);
  OUTLINED_FUNCTION_12_4(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_23_23(v10);
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v0;
    uint64_t v13 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v13);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v14 = OUTLINED_FUNCTION_6_43();
  OUTLINED_FUNCTION_12_4(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = OUTLINED_FUNCTION_32_16();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v0;
    uint64_t v17 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v17);
  }

  uint64_t v18 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  *(void *)(v1 + 7outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v18;
  lazy protocol witness table accessor for type WorkflowRunnerCATsSimple.InputDateDialogIds and conformance WorkflowRunnerCATsSimple.InputDateDialogIds();
  *uint64_t v18 = v1;
  v18[1] = WorkflowRunnerCATsSimple.inputDateAsLabels(device:inputType:message:);
  unint64_t v19 = OUTLINED_FUNCTION_38_29();
  return OUTLINED_FUNCTION_23_3(v19, v20, v21, v22, v23, v24);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_18_24();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_49_16();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_15_0();
    uint64_t v2 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

{
  uint64_t v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_40_0();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t lazy protocol witness table accessor for type WorkflowRunnerCATsSimple.InputDateDialogIds and conformance WorkflowRunnerCATsSimple.InputDateDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.InputDateDialogIds and conformance WorkflowRunnerCATsSimple.InputDateDialogIds;
  if (!lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.InputDateDialogIds and conformance WorkflowRunnerCATsSimple.InputDateDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowRunnerCATsSimple.InputDateDialogIds,  &type metadata for WorkflowRunnerCATsSimple.InputDateDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.InputDateDialogIds and conformance WorkflowRunnerCATsSimple.InputDateDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.InputDateDialogIds and conformance WorkflowRunnerCATsSimple.InputDateDialogIds;
  if (!lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.InputDateDialogIds and conformance WorkflowRunnerCATsSimple.InputDateDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowRunnerCATsSimple.InputDateDialogIds,  &type metadata for WorkflowRunnerCATsSimple.InputDateDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.InputDateDialogIds and conformance WorkflowRunnerCATsSimple.InputDateDialogIds);
  }

  return result;
}

uint64_t WorkflowRunnerCATsSimple.inputText(device:inputType:message:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 48) = OUTLINED_FUNCTION_20_10(v4);
  *(void *)(v3 + 56) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowRunnerCATsSimple.inputText(device:inputType:message:)()
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_26_29(v4);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_79_4(v5);
  uint64_t v7 = OUTLINED_FUNCTION_4_3(v6, (__n128)xmmword_17FDF0);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    v2[7] = 0LL;
    _BYTE v2[8] = 0LL;
  }

  OUTLINED_FUNCTION_0_46(v7);
  OUTLINED_FUNCTION_12_4(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_23_23(v10);
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v0;
    uint64_t v13 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v13);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v14 = OUTLINED_FUNCTION_6_43();
  OUTLINED_FUNCTION_12_4(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = OUTLINED_FUNCTION_32_16();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v0;
    uint64_t v17 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v17);
  }

  uint64_t v18 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 7outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v18;
  *uint64_t v18 = v1;
  v18[1] = WorkflowRunnerCATsSimple.inputDate(device:inputType:message:);
  unint64_t v19 = OUTLINED_FUNCTION_28_23();
  return OUTLINED_FUNCTION_24_1(v19, v20, v21, v22);
}

SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::InputTextDialogIds_optional __swiftcall WorkflowRunnerCATsSimple.InputTextDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of WorkflowRunnerCATsSimple.InputTextDialogIds.init(rawValue:);
  OUTLINED_FUNCTION_88_6(v1, v2);
  OUTLINED_FUNCTION_58_2();
  OUTLINED_FUNCTION_1();
  return result;
}

uint64_t WorkflowRunnerCATsSimple.InputTextDialogIds.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1291F4 + 4 * byte_189E55[a1]))( 0x6D6F74737563LL,  0xE600000000000000LL);
}

uint64_t sub_1291F4()
{
  return 0x7265626D756ELL;
}

uint64_t sub_129208()
{
  return 7107189LL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance WorkflowRunnerCATsSimple.InputTextDialogIds()
{
  specialized == infix<A>(_:_:)();
}

void protocol witness for Hashable.hashValue.getter in conformance WorkflowRunnerCATsSimple.InputTextDialogIds()
{
}

void protocol witness for Hashable.hash(into:) in conformance WorkflowRunnerCATsSimple.InputTextDialogIds()
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance WorkflowRunnerCATsSimple.InputTextDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::InputTextDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance WorkflowRunnerCATsSimple.InputTextDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::InputTextDialogIds_optional *a2@<X8>)
{
  result.int value = WorkflowRunnerCATsSimple.InputTextDialogIds.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance WorkflowRunnerCATsSimple.InputTextDialogIds()
{
  unsigned __int8 v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = WorkflowRunnerCATsSimple.InputTextDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t WorkflowRunnerCATsSimple.inputTextAsLabels(device:inputType:message:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 48) = OUTLINED_FUNCTION_20_10(v4);
  *(void *)(v3 + 56) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowRunnerCATsSimple.inputTextAsLabels(device:inputType:message:)()
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_26_29(v4);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_79_4(v5);
  uint64_t v7 = OUTLINED_FUNCTION_4_3(v6, (__n128)xmmword_17FDF0);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    v2[7] = 0LL;
    _BYTE v2[8] = 0LL;
  }

  OUTLINED_FUNCTION_0_46(v7);
  OUTLINED_FUNCTION_12_4(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_23_23(v10);
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v0;
    uint64_t v13 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v13);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v14 = OUTLINED_FUNCTION_6_43();
  OUTLINED_FUNCTION_12_4(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = OUTLINED_FUNCTION_32_16();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v0;
    uint64_t v17 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v17);
  }

  uint64_t v18 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  *(void *)(v1 + 7outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v18;
  lazy protocol witness table accessor for type WorkflowRunnerCATsSimple.InputTextDialogIds and conformance WorkflowRunnerCATsSimple.InputTextDialogIds();
  *uint64_t v18 = v1;
  v18[1] = WorkflowRunnerCATsSimple.inputDate(device:inputType:message:);
  unint64_t v19 = OUTLINED_FUNCTION_38_29();
  return OUTLINED_FUNCTION_23_3(v19, v20, v21, v22, v23, v24);
}

unint64_t lazy protocol witness table accessor for type WorkflowRunnerCATsSimple.InputTextDialogIds and conformance WorkflowRunnerCATsSimple.InputTextDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.InputTextDialogIds and conformance WorkflowRunnerCATsSimple.InputTextDialogIds;
  if (!lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.InputTextDialogIds and conformance WorkflowRunnerCATsSimple.InputTextDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowRunnerCATsSimple.InputTextDialogIds,  &type metadata for WorkflowRunnerCATsSimple.InputTextDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.InputTextDialogIds and conformance WorkflowRunnerCATsSimple.InputTextDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.InputTextDialogIds and conformance WorkflowRunnerCATsSimple.InputTextDialogIds;
  if (!lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.InputTextDialogIds and conformance WorkflowRunnerCATsSimple.InputTextDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowRunnerCATsSimple.InputTextDialogIds,  &type metadata for WorkflowRunnerCATsSimple.InputTextDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.InputTextDialogIds and conformance WorkflowRunnerCATsSimple.InputTextDialogIds);
  }

  return result;
}

uint64_t WorkflowRunnerCATsSimple.showAlert(message:)(uint64_t a1)
{
  v2[2] = a1;
  void v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowRunnerCATsSimple.showAlert(message:)()
{
  uint64_t v2 = v1[2];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_7_0(v3);
  v1[5] = v4;
  OUTLINED_FUNCTION_24_33(v4, (__n128)xmmword_17E650);
  OUTLINED_FUNCTION_12_4(v2, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_61_1();
  uint64_t v7 = OUTLINED_FUNCTION_6_12(v6);
  if (v8)
  {
    OUTLINED_FUNCTION_11_4(v7, &demangling cache variable for type metadata for SpeakableString?);
    *uint64_t v0 = 0u;
    v0[1] = 0u;
  }

  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v9);
  }

  uint64_t v10 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  v1[6] = v10;
  *uint64_t v10 = v1;
  v10[1] = WorkflowRunnerCATsSimple.showAlert(message:);
  return v12(0xD000000000000018LL, 0x8000000000191BA0LL, v4);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_4_15();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_40_0();
    uint64_t v2 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::ShowAlertDialogIds_optional __swiftcall WorkflowRunnerCATsSimple.ShowAlertDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of WorkflowRunnerCATsSimple.ShowAlertDialogIds.init(rawValue:);
  OUTLINED_FUNCTION_88_6(v1, v2);
  OUTLINED_FUNCTION_58_2();
  OUTLINED_FUNCTION_1();
  return result;
}

uint64_t WorkflowRunnerCATsSimple.ShowAlertDialogIds.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x6D6F74737563LL;
  }
  else {
    return 0x61756E69746E6F63LL;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds( char *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::ShowAlertDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::ShowAlertDialogIds_optional *a2@<X8>)
{
  result.int value = WorkflowRunnerCATsSimple.ShowAlertDialogIds.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds()
{
  char v1 = OUTLINED_FUNCTION_52_3();
  *uint64_t v0 = WorkflowRunnerCATsSimple.ShowAlertDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t WorkflowRunnerCATsSimple.showAlertAsLabels(message:)(uint64_t a1)
{
  v2[2] = a1;
  void v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowRunnerCATsSimple.showAlertAsLabels(message:)()
{
  uint64_t v2 = v1[2];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_7_0(v3);
  v1[5] = v4;
  OUTLINED_FUNCTION_24_33(v4, (__n128)xmmword_17E650);
  OUTLINED_FUNCTION_12_4(v2, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_61_1();
  uint64_t v7 = OUTLINED_FUNCTION_6_12(v6);
  if (v8)
  {
    OUTLINED_FUNCTION_11_4(v7, &demangling cache variable for type metadata for SpeakableString?);
    *uint64_t v0 = 0u;
    v0[1] = 0u;
  }

  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v9);
  }

  uint64_t v10 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  v1[6] = v10;
  unint64_t v11 = lazy protocol witness table accessor for type WorkflowRunnerCATsSimple.ShowAlertDialogIds and conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds();
  *uint64_t v10 = v1;
  v10[1] = WorkflowRunnerCATsSimple.showAlertAsLabels(message:);
  return v13( 0xD000000000000018LL,  0x8000000000191BA0LL,  v4,  &type metadata for WorkflowRunnerCATsSimple.ShowAlertDialogIds,  v11);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_4_15();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_40_0();
    uint64_t v2 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

{
  uint64_t v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_40_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t lazy protocol witness table accessor for type WorkflowRunnerCATsSimple.ShowAlertDialogIds and conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.ShowAlertDialogIds and conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds;
  if (!lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.ShowAlertDialogIds and conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowRunnerCATsSimple.ShowAlertDialogIds,  &type metadata for WorkflowRunnerCATsSimple.ShowAlertDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.ShowAlertDialogIds and conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.ShowAlertDialogIds and conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds;
  if (!lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.ShowAlertDialogIds and conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowRunnerCATsSimple.ShowAlertDialogIds,  &type metadata for WorkflowRunnerCATsSimple.ShowAlertDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.ShowAlertDialogIds and conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowRunnerCATsSimple.Properties and conformance WorkflowRunnerCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.Properties and conformance WorkflowRunnerCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.Properties and conformance WorkflowRunnerCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowRunnerCATsSimple.Properties,  &type metadata for WorkflowRunnerCATsSimple.Properties);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.Properties and conformance WorkflowRunnerCATsSimple.Properties);
  }

  return result;
}

uint64_t type metadata accessor for WorkflowRunnerCATsSimple(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for WorkflowRunnerCATsSimple;
  if (!type metadata singleton initialization cache for WorkflowRunnerCATsSimple) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WorkflowRunnerCATsSimple);
  }
  return result;
}

uint64_t type metadata completion function for WorkflowRunnerCATsSimple(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + class metadata base offset for WorkflowRunnerCATsSimple);
}

uint64_t ObjC metadata update function for WorkflowRunnerCATsSimple()
{
  return type metadata accessor for WorkflowRunnerCATsSimple(0LL);
}

uint64_t storeEnumTagSinglePayload for WorkflowRunnerCATsSimple.Properties( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_129A38 + 4 * byte_189E5E[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_129A6C + 4 * byte_189E59[v4]))();
}

uint64_t sub_129A6C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_129A74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x129A7CLL);
  }
  return result;
}

uint64_t sub_129A88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x129A90LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_129A94(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_129A9C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for WorkflowRunnerCATsSimple.Properties()
{
}

uint64_t storeEnumTagSinglePayload for WorkflowRunnerCATsSimple.InputDateDialogIds( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_129B00 + 4 * byte_189E68[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_129B34 + 4 * byte_189E63[v4]))();
}

uint64_t sub_129B34(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_129B3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x129B44LL);
  }
  return result;
}

uint64_t sub_129B50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x129B58LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_129B5C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_129B64(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for WorkflowRunnerCATsSimple.InputDateDialogIds()
{
}

uint64_t storeEnumTagSinglePayload for WorkflowRunnerCATsSimple.InputTextDialogIds( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_129BC8 + 4 * byte_189E72[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_129BFC + 4 * byte_189E6D[v4]))();
}

uint64_t sub_129BFC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_129C04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x129C0CLL);
  }
  return result;
}

uint64_t sub_129C18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x129C20LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_129C24(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_129C2C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for WorkflowRunnerCATsSimple.InputTextDialogIds()
{
}

uint64_t storeEnumTagSinglePayload for WorkflowRunnerCATsSimple.ShowAlertDialogIds( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_129C90 + 4 * byte_189E7C[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_129CC4 + 4 * byte_189E77[v4]))();
}

uint64_t sub_129CC4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_129CCC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x129CD4LL);
  }
  return result;
}

uint64_t sub_129CE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x129CE8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_129CEC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_129CF4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for WorkflowRunnerCATsSimple.ShowAlertDialogIds()
{
}

uint64_t OUTLINED_FUNCTION_0_46(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 0x7079547475706E69LL;
  v2[11] = 0xE900000000000065LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_6_43()
{
  uint64_t result = *(void *)(v0 + 32);
  *(void *)(v1 + 128) = 0x6567617373656DLL;
  *(void *)(v1 + 136) = 0xE700000000000000LL;
  return result;
}

__n128 *OUTLINED_FUNCTION_24_33(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x6567617373656DLL;
  result[2].n128_u64[1] = 0xE700000000000000LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_26_29(uint64_t a1)
{
  return swift_allocObject(a1, 176LL, 7LL);
}

unint64_t OUTLINED_FUNCTION_28_23()
{
  return 0xD000000000000018LL;
}

uint64_t OUTLINED_FUNCTION_35_32()
{
  return 1954047348LL;
}

unint64_t OUTLINED_FUNCTION_38_29()
{
  return 0xD000000000000018LL;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySnySS5IndexVGG_SSs5NeverOTg50103_s18SiriLinkFlowPlugin13TfIdfComputerC8tokenize33_8A7812BA4865DA2BE6D65DB66CD3F769LLySaySSGSSFZSSSnySS5D7VGXEfU_SSTf1cn_n( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v7 = (void *)(a1 + 40);
    do
    {
      uint64_t v8 = String.subscript.getter(*(v7 - 1), *v7, a2, a3);
      uint64_t v10 = v9;
      uint64_t v13 = static String._fromSubstring(_:)(v8, v11, v12, v9);
      uint64_t v15 = v14;
      swift_bridgeObjectRelease(v10);
      unint64_t v16 = _swiftEmptyArrayStorage[2];
      if (v16 >= _swiftEmptyArrayStorage[3] >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      v7 += 2;
      _swiftEmptyArrayStorage[2] = v16 + 1;
      uint64_t v17 = &_swiftEmptyArrayStorage[2 * v16];
      _OWORD v17[4] = v13;
      v17[5] = v15;
      --v4;
    }

    while (v4);
    swift_bridgeObjectRelease(a3);
  }

  else
  {
    swift_bridgeObjectRelease(a3);
  }

  return _swiftEmptyArrayStorage;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS3key_Sd5valuetG_Sds5NeverOTg50130_s18SiriLinkFlowPlugin13TfIdfComputerC9vectorize5inputSaySdGSS_tFSdSS3key_Sd5valuet_tcfu1_33_02b57a39088027ce0a04a12694145150SSAG_q3AHtQ10Tf3nnnpk_nTf1cn_n( uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t result = _swiftEmptyArrayStorage;
    uint64_t v4 = (uint64_t *)(a1 + 48);
    do
    {
      uint64_t v5 = *v4;
      uint64_t v7 = result;
      unint64_t v6 = result[2];
      if (v6 >= result[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t result = v7;
      }

      result[2] = v6 + 1;
      result[v6 + 4] = v5;
      v4 += 3;
      --v2;
    }

    while (v2);
  }

  return result;
}

SiriLinkFlowPlugin::Document __swiftcall Document.init(body:)(Swift::String body)
{
  Swift::String v1 = String.lowercased()();
  OUTLINED_FUNCTION_14();
  uint64_t countAndFlagsBits = v1._countAndFlagsBits;
  object = v1._object;
  result.body._object = object;
  result.body._uint64_t countAndFlagsBits = countAndFlagsBits;
  return result;
}

uint64_t TfIdfComputer.__allocating_init(documents:)(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, 32LL, 7LL);
  TfIdfComputer.init(documents:)(a1);
  return v3;
}

uint64_t Array<A>.isNullVector.getter(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 1LL;
  }
  if (v1 == 1) {
    return 1LL;
  }
  for (uint64_t i = 5LL; ; ++i)
  {
    uint64_t v4 = i - 3;
    if (__OFADD__(i - 4, 1LL)) {
      break;
    }
    double v5 = *(double *)(result + 8 * i);
    BOOL v2 = v5 == 0.0;
    if (v5 != 0.0 || v4 == v1) {
      return v2;
    }
  }

  __break(1u);
  return result;
}

double Array<A>.magnitude.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    BOOL v2 = (double *)(a1 + 32);
    double v3 = 0.0;
    do
    {
      double v4 = *v2++;
      double v3 = v3 + v4 * v4;
      --v1;
    }

    while (v1);
  }

  else
  {
    double v3 = 0.0;
  }

  return sqrt(v3);
}

uint64_t Array<A>.dot(other:)(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    if (v2 > *(void *)(result + 16))
    {
      __break(1u);
    }

    else
    {
      double v3 = (double *)(a2 + 32);
      double v4 = (double *)(result + 32);
      double v5 = 0.0;
      do
      {
        double v6 = *v3++;
        double v7 = v6;
        double v8 = *v4++;
        double v5 = v5 + v7 * v8;
        --v2;
      }

      while (v2);
    }
  }

  return result;
}

uint64_t TfIdfComputer.documents.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

uint64_t TfIdfComputer.idf.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 24));
}

uint64_t TfIdfComputer.init(documents:)(uint64_t a1)
{
  uint64_t v3 = v1;
  *(void *)(v1 + 16) = a1;
  uint64_t v5 = swift_bridgeObjectRetain(a1);
  *(void *)(v1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = static TfIdfComputer.idf(items:)(v5);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v6 = OUTLINED_FUNCTION_48();
  double v7 = (os_log_s *)__swift_project_value_buffer(v6, (uint64_t)static Logger.voiceCommands);
  uint64_t v8 = swift_bridgeObjectRetain(a1);
  Logger.logObject.getter(v8);
  os_log_type_t v9 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_20_9(v9))
  {
    uint64_t v10 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    *(_DWORD *)uint64_t v10 = 134217984;
    uint64_t v11 = *(void *)(a1 + 16);
    swift_bridgeObjectRelease(a1);
    uint64_t v13 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v10 + 4);
    swift_bridgeObjectRelease(a1);
    _os_log_impl(&dword_0, v7, v2, "[TfIdf] computing idf for %ld documents", v10, 0xCu);
    OUTLINED_FUNCTION_1_0((uint64_t)v10);
  }

  else
  {

    OUTLINED_FUNCTION_19_1(a1);
  }

  return v3;
}

uint64_t static TfIdfComputer.idf(items:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  uint64_t v88 = v2;
  if (v2)
  {
    uint64_t v4 = a1 + 32;
    uint64_t v86 = a1;
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = 0LL;
    uint64_t v6 = _swiftEmptyArrayStorage;
    do
    {
      double v7 = (uint64_t *)(v4 + 16 * v5);
      uint64_t v8 = *v7;
      unint64_t v9 = v7[1];
      swift_bridgeObjectRetain(v9);
      uint64_t v10 = static TfIdfComputer.tokenize(_:)(v8, v9);
      swift_bridgeObjectRelease(v9);
      uint64_t v11 = Set.init(minimumCapacity:)(v10[2], &type metadata for String, &protocol witness table for String);
      uint64_t v91 = v11;
      uint64_t v12 = v10[2];
      if (v12)
      {
        uint64_t v13 = v10 + 5;
        do
        {
          uint64_t v14 = *(v13 - 1);
          uint64_t v15 = *v13;
          swift_bridgeObjectRetain(*v13);
          specialized Set._Variant.insert(_:)(v90, v14, v15);
          swift_bridgeObjectRelease(v90[1]);
          v13 += 2;
          --v12;
        }

        while (v12);
        swift_bridgeObjectRelease(v10);
        uint64_t v16 = v91;
      }

      else
      {
        uint64_t v16 = v11;
        swift_bridgeObjectRelease(v10);
      }

      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v6[2] + 1LL,  1LL,  (uint64_t)v6);
        uint64_t v6 = v19;
      }

      unint64_t v18 = v6[2];
      unint64_t v17 = v6[3];
      if (v18 >= v17 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v17 > 1,  v18 + 1,  1LL,  (uint64_t)v6);
        uint64_t v6 = v20;
      }

      ++v5;
      _OWORD v6[2] = v18 + 1;
      v6[v18 + 4] = v16;
    }

    while (v5 != v88);
    swift_bridgeObjectRelease(v86);
    uint64_t v3 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v6 = _swiftEmptyArrayStorage;
  }

  v90[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v21 = v6[2];
  if (v21)
  {
    swift_bridgeObjectRetain_n(v6, 2LL);
    for (uint64_t i = 0LL; i != v21; ++i)
    {
      uint64_t v23 = v6[i + 4];
      uint64_t v24 = swift_bridgeObjectRetain(v23);
      specialized Array.append<A>(contentsOf:)(v24);
    }

    swift_bridgeObjectRelease_n(v6, 2LL);
    uint64_t v3 = (void *)v90[0];
  }

  uint64_t v25 = specialized Set.init<A>(_:)((uint64_t)v3);
  int64_t v26 = 0LL;
  double v27 = (double)v88;
  uint64_t v80 = v25 + 56;
  uint64_t v28 = 1LL << *(_BYTE *)(v25 + 32);
  if (v28 < 64) {
    uint64_t v29 = ~(-1LL << v28);
  }
  else {
    uint64_t v29 = -1LL;
  }
  unint64_t v30 = v29 & *(void *)(v25 + 56);
  int64_t v81 = (unint64_t)(v28 + 63) >> 6;
  uint64_t v82 = v25;
  uint64_t v31 = v6 + 4;
  unint64_t v32 = &_swiftEmptyDictionarySingleton;
  while (1)
  {
    uint64_t v85 = (uint64_t)v32;
    if (v30)
    {
      uint64_t v83 = (v30 - 1) & v30;
      int64_t v84 = v26;
      unint64_t v33 = __clz(__rbit64(v30)) | (v26 << 6);
    }

    else
    {
      int64_t v34 = v26 + 1;
      if (__OFADD__(v26, 1LL)) {
        goto LABEL_78;
      }
      if (v34 >= v81)
      {
LABEL_74:
        swift_bridgeObjectRelease(v6);
        swift_release(v82);
        return (uint64_t)v32;
      }

      unint64_t v35 = *(void *)(v80 + 8 * v34);
      int64_t v36 = v26 + 1;
      if (!v35)
      {
        int64_t v36 = v26 + 2;
        if (v26 + 2 >= v81) {
          goto LABEL_74;
        }
        unint64_t v35 = *(void *)(v80 + 8 * v36);
        if (!v35)
        {
          int64_t v36 = v26 + 3;
          if (v26 + 3 >= v81) {
            goto LABEL_74;
          }
          unint64_t v35 = *(void *)(v80 + 8 * v36);
          if (!v35)
          {
            uint64_t v37 = v26 + 4;
            if (v26 + 4 >= v81) {
              goto LABEL_74;
            }
            unint64_t v35 = *(void *)(v80 + 8 * v37);
            if (!v35)
            {
              while (1)
              {
                int64_t v36 = v37 + 1;
                if (__OFADD__(v37, 1LL)) {
                  goto LABEL_79;
                }
                if (v36 >= v81) {
                  goto LABEL_74;
                }
                unint64_t v35 = *(void *)(v80 + 8 * v36);
                ++v37;
                if (v35) {
                  goto LABEL_38;
                }
              }
            }

            int64_t v36 = v26 + 4;
          }
        }
      }

LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t TfIdfComputer.vectorize(input:)(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = *(void *)(v3 + 24);
  uint64_t v103 = v6 + 64;
  OUTLINED_FUNCTION_8_52();
  unint64_t v9 = v8 & v7;
  int64_t v106 = (unint64_t)(v10 + 63) >> 6;
  swift_bridgeObjectRetain(v6);
  int64_t v11 = 0LL;
  uint64_t v12 = _swiftEmptyDictionarySingleton;
  uint64_t v105 = v6;
  if (!v9) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v13 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v11 << 6))
  {
    unint64_t v18 = (uint64_t *)(*(void *)(v6 + 48) + 16 * i);
    uint64_t v19 = *v18;
    uint64_t v2 = v18[1];
    OUTLINED_FUNCTION_80();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12);
    uint64_t v110 = v12;
    OUTLINED_FUNCTION_17_39(v19, v2);
    OUTLINED_FUNCTION_16_42();
    if (v23)
    {
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }

    unint64_t v24 = v21;
    uint64_t p_ivar_lyt = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Double>);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v4))
    {
      unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v2);
      if ((p_ivar_lyt & 1) != (v26 & 1)) {
        goto LABEL_82;
      }
      unint64_t v24 = v25;
    }

    uint64_t v12 = v110;
    if ((p_ivar_lyt & 1) != 0)
    {
      *(void *)(v110[7] + 8 * v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = 0LL;
      uint64_t v6 = v105;
    }

    else
    {
      OUTLINED_FUNCTION_1_38();
      *double v27 = v19;
      v27[1] = v2;
      *(void *)(v12[7] + 8 * v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = 0LL;
      uint64_t v28 = v12[2];
      BOOL v23 = __OFADD__(v28, 1LL);
      uint64_t v29 = v28 + 1;
      uint64_t v6 = v105;
      if (v23) {
        goto LABEL_74;
      }
      v12[2] = v29;
      OUTLINED_FUNCTION_80();
    }

    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_15_25();
    if (v9) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      goto LABEL_75;
    }
    if (v15 >= v106) {
      break;
    }
    unint64_t v16 = *(void *)(v103 + 8 * v15);
    ++v11;
    if (!v16)
    {
      int64_t v11 = v15 + 1;
      if (v15 + 1 >= v106) {
        break;
      }
      unint64_t v16 = *(void *)(v103 + 8 * v11);
      if (!v16)
      {
        int64_t v11 = v15 + 2;
        if (v15 + 2 >= v106) {
          break;
        }
        unint64_t v16 = *(void *)(v103 + 8 * v11);
        if (!v16)
        {
          int64_t v17 = v15 + 3;
          if (v17 >= v106) {
            break;
          }
          unint64_t v16 = *(void *)(v103 + 8 * v17);
          if (v16)
          {
            int64_t v11 = v17;
            goto LABEL_16;
          }

          while (1)
          {
            int64_t v11 = v17 + 1;
            if (__OFADD__(v17, 1LL)) {
              break;
            }
            if (v11 >= v106) {
              goto LABEL_27;
            }
            unint64_t v16 = *(void *)(v103 + 8 * v11);
            ++v17;
            if (v16) {
              goto LABEL_16;
            }
          }

LABEL_77:
          __break(1u);
          goto LABEL_78;
        }
      }
    }

LABEL_78:
  __break(1u);
LABEL_79:
  swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
LABEL_69:
  uint64_t v70 = OUTLINED_FUNCTION_48();
  Swift::Bool v71 = (os_log_s *)__swift_project_value_buffer(v70, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_5_10(p_ivar_lyt);
  uint64_t v72 = OUTLINED_FUNCTION_5_10(v2);
  Logger.logObject.getter(v72);
  os_log_type_t v73 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_20_9(v73))
  {
    uint64_t v74 = OUTLINED_FUNCTION_38(22LL);
    uint64_t v75 = OUTLINED_FUNCTION_38(64LL);
    uint64_t v110 = (void *)v75;
    *(_DWORD *)uint64_t v74 = 136315394;
    swift_bridgeObjectRetain(p_ivar_lyt);
    uint64_t v108 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, p_ivar_lyt, (uint64_t *)&v110);
    OUTLINED_FUNCTION_11_36(v108, v76, v77, v74 + 12, v78, v79, v80, v81, a1, v95, a2, (uint64_t)v99);
    swift_bridgeObjectRelease_n(p_ivar_lyt, 3LL);
    *(_WORD *)(v74 + 1outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 2080;
    uint64_t v82 = OUTLINED_FUNCTION_80();
    uint64_t v83 = Array.description.getter(v82, &type metadata for Double);
    unint64_t v85 = v84;
    OUTLINED_FUNCTION_14();
    uint64_t v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v85, (uint64_t *)&v110);
    OUTLINED_FUNCTION_11_36(v109, v86, v87, v74 + 22, v88, v89, v90, v91, v94, v96, v98, v100);
    OUTLINED_FUNCTION_19_1(v2);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v71, (os_log_type_t)v11, "[TfIdf] vectorizing input: %s vector: %s", (uint8_t *)v74, 0x16u);
    swift_arrayDestroy(v75, 2LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v75);
    OUTLINED_FUNCTION_1_0(v74);
  }

  else
  {

    OUTLINED_FUNCTION_19_1(v2);
    OUTLINED_FUNCTION_19_1(p_ivar_lyt);
  }

  OUTLINED_FUNCTION_2_6();
  return v2;
}

void *static TfIdfComputer.tokenize(_:)(uint64_t a1, unint64_t a2)
{
  id v4 = [objc_allocWithZone(NLTokenizer) initWithUnit:0];
  [v4 setLanguage:NLLanguageEnglish];
  outlined bridged method (mbgnn) of @objc NLTokenizer.string.setter(a1, a2, v4);
  uint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v5 = a1;
  }
  uint64_t v6 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v6 = 11LL;
  }
  uint64_t v7 = NLTokenizer.tokens(for:)(15LL, v6 | (v5 << 16));
  swift_bridgeObjectRetain(a2);
  uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySnySS5IndexVGG_SSs5NeverOTg50103_s18SiriLinkFlowPlugin13TfIdfComputerC8tokenize33_8A7812BA4865DA2BE6D65DB66CD3F769LLySaySSGSSFZSSSnySS5D7VGXEfU_SSTf1cn_n( v7,  a1,  a2);
  swift_bridgeObjectRelease(v7);
  uint64_t v9 = v8[2];
  if (v9)
  {
    uint64_t v10 = v8 + 5;
    do
    {
      uint64_t v12 = *(v10 - 1);
      uint64_t v11 = *v10;
      swift_bridgeObjectRetain(*v10);
      if (String.count.getter(v12, v11) < 2)
      {
        swift_bridgeObjectRelease(v11);
      }

      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        unint64_t v13 = _swiftEmptyArrayStorage[2];
        if (v13 >= _swiftEmptyArrayStorage[3] >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        _swiftEmptyArrayStorage[2] = v13 + 1;
        uint64_t v14 = &_swiftEmptyArrayStorage[2 * v13];
        v14[4] = v12;
        v14[5] = v11;
      }

      v10 += 2;
      --v9;
    }

    while (v9);
  }

  swift_bridgeObjectRelease(v8);
  return _swiftEmptyArrayStorage;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = Set.init(minimumCapacity:)(*(void *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  uint64_t v10 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    id v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      specialized Set._Variant.insert(_:)(v9, v5, v6);
      swift_bridgeObjectRelease(v9[1]);
      v4 += 2;
      --v3;
    }

    while (v3);
    swift_bridgeObjectRelease(a1);
    return v10;
  }

  else
  {
    uint64_t v7 = v2;
    swift_bridgeObjectRelease(a1);
  }

  return v7;
}

void *TfIdfComputer.tf(item:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = static TfIdfComputer.tokenize(_:)(a1, a2);
  uint64_t v3 = v2[2];
  if (v3)
  {
    OUTLINED_FUNCTION_80();
    id v4 = v2 + 5;
    while (1)
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      OUTLINED_FUNCTION_5_10(*v4);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      unint64_t v8 = OUTLINED_FUNCTION_6_44();
      uint64_t v10 = _swiftEmptyDictionarySingleton[2];
      BOOL v11 = (v9 & 1) == 0;
      Swift::Int v12 = v10 + v11;
      if (__OFADD__(v10, v11)) {
        break;
      }
      unint64_t v13 = v8;
      char v14 = v9;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Double>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v12))
      {
        unint64_t v15 = OUTLINED_FUNCTION_6_44();
        if ((v14 & 1) != (v16 & 1)) {
          goto LABEL_15;
        }
        unint64_t v13 = v15;
      }

      OUTLINED_FUNCTION_15_25();
      if ((v14 & 1) == 0)
      {
        _swiftEmptyDictionarySingleton[(v13 >> 6) + 8] |= 1LL << v13;
        int64_t v17 = (void *)(_swiftEmptyDictionarySingleton[6] + 16 * v13);
        *int64_t v17 = v6;
        v17[1] = v5;
        *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v13) = 0LL;
        uint64_t v18 = _swiftEmptyDictionarySingleton[2];
        BOOL v19 = __OFADD__(v18, 1LL);
        uint64_t v20 = v18 + 1;
        if (v19) {
          goto LABEL_14;
        }
        _swiftEmptyDictionarySingleton[2] = v20;
        OUTLINED_FUNCTION_9_9();
      }

      v4 += 2;
      OUTLINED_FUNCTION_19_1(v5);
      if (!--v3)
      {
        OUTLINED_FUNCTION_14();
        goto LABEL_12;
      }
    }

    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
  }

  else
  {
LABEL_12:
    OUTLINED_FUNCTION_14();
    return _swiftEmptyDictionarySingleton;
  }

  return result;
}

uint64_t TfIdfComputer.deinit()
{
  return v0;
}

uint64_t TfIdfComputer.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t Document.body.getter(uint64_t a1, uint64_t a2)
{
  return a1;
}

void specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  if (a1 < 0)
  {
    OUTLINED_FUNCTION_12_32();
    OUTLINED_FUNCTION_2_39( (uint64_t)"Fatal error",  v3,  v4,  (uint64_t)"Can't construct Array with count < 0",  v5,  v6,  (uint64_t)"Swift/Array.swift");
    __break(1u);
  }

  else
  {
    if (a1)
    {
      unint64_t v2 = type metadata accessor for INIntentSlotDescription();
      *(void *)((char *)&dword_10 + (OUTLINED_FUNCTION_22_29(v2) & 0xFFFFFFFFFFFFF8LL)) = a1;
    }

    OUTLINED_FUNCTION_21_28();
  }

{
  specialized static Array._allocateUninitialized(_:)( a1,  &demangling cache variable for type metadata for (key: Int, value: String));
}

void specialized static Array._allocateUninitialized(_:)(uint64_t a1, uint64_t *a2)
{
  if (a1 < 0)
  {
    OUTLINED_FUNCTION_12_32();
    OUTLINED_FUNCTION_2_39( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"Can't construct Array with count < 0",  v6,  v7,  (uint64_t)"Swift/Array.swift");
    __break(1u);
  }

  else
  {
    if (a1)
    {
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
      *(void *)(OUTLINED_FUNCTION_22_29(v3) + 16) = a1;
    }

    OUTLINED_FUNCTION_21_28();
  }

LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
    return;
  }

  uint64_t v110 = v5;
  unint64_t v8 = 0LL;
  char v9 = *a1;
  uint64_t v107 = *a1 - 24;
  uint64_t v108 = *a1 + 8;
  uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  uint64_t v113 = v9;
  while (1)
  {
    BOOL v11 = v8++;
    if (v8 >= v3) {
      goto LABEL_32;
    }
    Swift::Int v12 = (uint64_t *)(v9 + 24 * v8);
    unint64_t v13 = *v12;
    char v14 = v12[1];
    unint64_t v15 = (void *)(v9 + 24 * v11);
    char v16 = v15[1];
    if (v13 == *v15 && v14 == v16)
    {
      BOOL v19 = v11 + 2;
      if (v11 + 2 >= v112) {
        goto LABEL_31;
      }
      uint64_t v18 = 0;
    }

    else
    {
      uint64_t v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, *v15, v16, 1LL);
      BOOL v19 = v11 + 2;
      if (v11 + 2 >= v112) {
        goto LABEL_23;
      }
    }

    uint64_t v20 = (uint64_t *)(v108 + 24 * v19);
    do
    {
      unint64_t v21 = *(v20 - 1);
      uint64_t v22 = *v20;
      BOOL v23 = (void *)(v9 + 24 * v8);
      unint64_t v24 = v23[1];
      if (v21 == *v23 && v22 == v24)
      {
        if ((v18 & 1) != 0) {
          goto LABEL_24;
        }
      }

      else if (((v18 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, *v23, v24, 1LL)) & 1) != 0)
      {
        goto LABEL_23;
      }

      v20 += 3;
      char v26 = v19 + 1;
      unint64_t v8 = v19;
      BOOL v19 = v26;
    }

    while (v26 < v112);
    BOOL v19 = v26;
LABEL_23:
    unint64_t v8 = v19;
    if ((v18 & 1) != 0)
    {
LABEL_24:
      if (v19 < v11) {
        goto LABEL_148;
      }
      if (v11 < v19)
      {
        double v27 = 24 * v19;
        uint64_t v28 = 24 * v11;
        uint64_t v29 = v19;
        unint64_t v30 = v11;
        do
        {
          if (v30 != --v29)
          {
            if (!v9) {
              goto LABEL_152;
            }
            int64_t v31 = v9 + v28;
            uint64_t v32 = v9 + v27;
            uint64_t v33 = *(void *)(v9 + v28);
            uint64_t v34 = *(void *)(v9 + v28 + 8);
            unint64_t v35 = *(void *)(v9 + v28 + 16);
            unint64_t v36 = *(void *)(v9 + v27 - 8);
            *(_OWORD *)int64_t v31 = *(_OWORD *)(v9 + v27 - 24);
            *(void *)(v31 + 16) = v36;
            *(void *)(v32 - __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = v33;
            *(void *)(v32 - 16) = v34;
            *(void *)(v32 - 8) = v35;
          }

          ++v30;
          v27 -= 24LL;
          v28 += 24LL;
        }

        while (v30 < v29);
      }

LABEL_106:
  swift_bridgeObjectRelease();
  if (v112 < -1) {
    goto LABEL_145;
  }
  *(void *)(v111 + 16) = 0LL;
  swift_bridgeObjectRelease();
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    BOOL v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    size_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }

  else
  {
    BOOL v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v13 = v11 + 32;
  char v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || &v14[16 * v8] <= v13) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 16 * v8);
  }

  OUTLINED_FUNCTION_14();
  return v11;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0,  (char *)a1);
}

uint64_t type metadata accessor for TfIdfComputer()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin13TfIdfComputer);
}

ValueMetadata *type metadata accessor for Document()
{
  return &type metadata for Document;
}

uint64_t specialized UnsafeMutablePointer.assign(repeating:count:)(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }

  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v24, *(void *)(*v3 + 40LL));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v7 + 48);
    size_t v12 = (void *)(v11 + 16 * v10);
    uint64_t v13 = v12[1];
    BOOL v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0LL) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      unint64_t v15 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0LL;
    }

    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        break;
      }
      BOOL v19 = (void *)(v11 + 16 * v10);
      uint64_t v20 = v19[1];
      BOOL v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0LL) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease(v7);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  swift_bridgeObjectRetain(a3);
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v23 = *v3;
  *uint64_t v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

Swift::Int specialized _NativeSet.resize(capacity:)(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v32 = v2;
    uint64_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    if (!v9) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      BOOL v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      String.hash(into:)(v34, v20, v21);
      Swift::Int result = Hasher._finalize()();
      uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          BOOL v28 = v24 == v27;
          if (v24 == v27) {
            unint64_t v24 = 0LL;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v11 + 8 * v24);
          if (v29 != -1)
          {
            unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }

      unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
      unint64_t v30 = (void *)(*(void *)(v6 + 48) + 16 * v25);
      *unint64_t v30 = v20;
      v30[1] = v21;
      ++*(void *)(v6 + 16);
      if (v9) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1LL)) {
        goto LABEL_41;
      }
      if (v16 >= v10) {
        goto LABEL_35;
      }
      unint64_t v17 = v33[v16];
      ++v13;
      if (!v17)
      {
        int64_t v13 = v16 + 1;
        if (v16 + 1 >= v10) {
          goto LABEL_35;
        }
        unint64_t v17 = v33[v13];
        if (!v17)
        {
          int64_t v13 = v16 + 2;
          if (v16 + 2 >= v10) {
            goto LABEL_35;
          }
          unint64_t v17 = v33[v13];
          if (!v17)
          {
            int64_t v18 = v16 + 3;
            if (v18 >= v10)
            {
LABEL_35:
              swift_release(v3);
              unint64_t v2 = v32;
              uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
              if (v31 > 63) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0LL, (unint64_t)(v31 + 63) >> 6, v33);
              }
              else {
                *uint64_t v33 = -1LL << v31;
              }
              *(void *)(v3 + 16) = 0LL;
              break;
            }

            unint64_t v17 = v33[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v13 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_42;
                }
                if (v13 >= v10) {
                  goto LABEL_35;
                }
                unint64_t v17 = v33[v13];
                ++v18;
                if (v17) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v13 = v18;
          }
        }
      }

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)( uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v11);
  }

  else
  {
    if (v10 > v9)
    {
      Swift::Int result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_22;
    }

    specialized _NativeSet.copyAndResize(capacity:)(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v28, *(void *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  Swift::Int result = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  uint64_t v14 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v15 = *(void *)(v12 + 48);
    int64_t v16 = (void *)(v15 + 16 * a3);
    uint64_t v17 = v16[1];
    BOOL v18 = *v16 == v8 && v17 == a2;
    if (v18 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0LL), (result & 1) != 0))
    {
LABEL_21:
      Swift::Int result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v20 = (void *)(v15 + 16 * a3);
        uint64_t v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0LL);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_21;
      }
    }
  }

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    Swift::Int result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1LL;
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = (void *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + 16 * i);
    *uint64_t v22 = *v20;
    v22[1] = v21;
    Swift::Int result = (void *)swift_bridgeObjectRetain(v21);
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }

Swift::Int specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_37:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  if (!v10) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    int64_t v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v21);
    String.hash(into:)(v33, v20, v21);
    Swift::Int result = Hasher._finalize()();
    uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v24);
        if (v29 != -1)
        {
          unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    unint64_t v30 = (void *)(*(void *)(v6 + 48) + 16 * v25);
    *unint64_t v30 = v20;
    v30[1] = v21;
    ++*(void *)(v6 + 16);
    if (v10) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_39;
    }
    if (v16 >= v32) {
      goto LABEL_35;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v32) {
        goto LABEL_35;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v13);
      if (!v17)
      {
        int64_t v13 = v16 + 2;
        if (v16 + 2 >= v32) {
          goto LABEL_35;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v13);
        if (!v17) {
          break;
        }
      }
    }

void outlined bridged method (mbgnn) of @objc NLTokenizer.string.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setString:v4];
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0LL,  a1);
}

unint64_t type metadata accessor for INIntentSlotDescription()
{
  unint64_t result = lazy cache variable for type metadata for INIntentSlotDescription;
  if (!lazy cache variable for type metadata for INIntentSlotDescription)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___INIntentSlotDescription);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INIntentSlotDescription);
  }

  return result;
}

void OUTLINED_FUNCTION_1_38()
{
  *(void *)(v0 + 8 * (v1 >> 6) + 64) |= 1LL << v1;
}

uint64_t OUTLINED_FUNCTION_2_39( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, 36LL, 2LL, a7, 17LL);
}

unint64_t OUTLINED_FUNCTION_6_44()
{
  return specialized __RawDictionaryStorage.find<A>(_:)(v1, v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_11_36( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v13, v12);
}

  ;
}

uint64_t OUTLINED_FUNCTION_15_25()
{
  return swift_bridgeObjectRelease(0x8000000000000000LL);
}

  ;
}

unint64_t OUTLINED_FUNCTION_17_39(uint64_t a1, uint64_t a2)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
}

  ;
}

uint64_t OUTLINED_FUNCTION_22_29(uint64_t a1)
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)(v1, a1);
}

uint64_t SiriLinkFlowFeatureFlags.isEnabled.getter(uint64_t a1)
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once(&one-time initialization token for forceEnabled, one-time initialization function for forceEnabled);
  }
  OUTLINED_FUNCTION_30_12((uint64_t)&static SiriLinkFlowFeatureFlags.forceEnabled, (uint64_t)v7, 32LL);
  uint64_t v2 = static SiriLinkFlowFeatureFlags.forceEnabled;
  if (*(void *)(static SiriLinkFlowFeatureFlags.forceEnabled + 16)
    && (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v4 & 1) != 0))
  {
    char v5 = *(_BYTE *)(*(void *)(v2 + 56) + v3);
    swift_endAccess(v7);
  }

  else
  {
    swift_endAccess(v7);
    v7[3] = &type metadata for SiriLinkFlowFeatureFlags;
    void v7[4] = lazy protocol witness table accessor for type SiriLinkFlowFeatureFlags and conformance SiriLinkFlowFeatureFlags();
    LOBYTE(v7[0]) = a1;
    char v5 = isFeatureEnabled(_:)(v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v7);
  }

  return v5 & 1;
}

uint64_t *SiriLinkFlowFeatureFlags.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once(&one-time initialization token for forceEnabled, one-time initialization function for forceEnabled);
  }
  return &static SiriLinkFlowFeatureFlags.forceEnabled;
}

double static SiriLinkFlowFeatureFlags.forceEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once(&one-time initialization token for forceEnabled, one-time initialization function for forceEnabled);
  }
  OUTLINED_FUNCTION_30_12((uint64_t)&static SiriLinkFlowFeatureFlags.forceEnabled, (uint64_t)v1, 0LL);
  *(void *)&double result = swift_bridgeObjectRetain(static SiriLinkFlowFeatureFlags.forceEnabled).n128_u64[0];
  return result;
}

uint64_t static SiriLinkFlowFeatureFlags.forceEnabled.setter(uint64_t a1)
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once(&one-time initialization token for forceEnabled, one-time initialization function for forceEnabled);
  }
  OUTLINED_FUNCTION_30_12((uint64_t)&static SiriLinkFlowFeatureFlags.forceEnabled, (uint64_t)v3, 1LL);
  static SiriLinkFlowFeatureFlags.forceEnabled = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static SiriLinkFlowFeatureFlags.forceEnabled.modify(uint64_t a1))()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once(&one-time initialization token for forceEnabled, one-time initialization function for forceEnabled);
  }
  OUTLINED_FUNCTION_30_12((uint64_t)&static SiriLinkFlowFeatureFlags.forceEnabled, a1, 33LL);
  return static LocaleUtils.intentBundleCache.modify;
}

const char *SiriLinkFlowFeatureFlags.domain.getter()
{
  return "SiriLinkFlow";
}

uint64_t SiriLinkFlowFeatureFlags.feature.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_12CFD8 + 4 * asc_18A210[a1]))( "nlv4Followup",  12LL);
}

const char *sub_12CFD8()
{
  return "autoshortcuts";
}

uint64_t SiriLinkFlowFeatureFlags.withForcedEnabled<A>(_:block:)( uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once(&one-time initialization token for forceEnabled, one-time initialization function for forceEnabled);
  }
  swift_beginAccess(&static SiriLinkFlowFeatureFlags.forceEnabled, v9, 32LL, 0LL);
  char v6 = specialized Dictionary.subscript.getter(a4, static SiriLinkFlowFeatureFlags.forceEnabled);
  swift_endAccess(v9);
  swift_beginAccess(&static SiriLinkFlowFeatureFlags.forceEnabled, v9, 33LL, 0LL);
  specialized Dictionary._Variant.setValue(_:forKey:)();
  uint64_t v7 = swift_endAccess(v9);
  a2(v7);
  return SiriLinkFlowFeatureFlags.updateForceEnabledFlags(oldFF:)(v6, a4);
}

uint64_t SiriLinkFlowFeatureFlags.withForcedEnabled<A>(_:block:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  *(_BYTE *)(v5 + 105) = a5;
  *(void *)(v5 + 7outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = a3;
  *(void *)(v5 + 80) = a4;
  *(_BYTE *)(v5 + 104) = a2;
  *(void *)(v5 + 64) = a1;
  return swift_task_switch(SiriLinkFlowFeatureFlags.withForcedEnabled<A>(_:block:), 0LL, 0LL);
}

uint64_t SiriLinkFlowFeatureFlags.withForcedEnabled<A>(_:block:)()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once(&one-time initialization token for forceEnabled, one-time initialization function for forceEnabled);
  }
  uint64_t v1 = *(int **)(v0 + 72);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 105);
  OUTLINED_FUNCTION_30_12((uint64_t)&static SiriLinkFlowFeatureFlags.forceEnabled, v0 + 16, 32LL);
  *(_BYTE *)(v0 + 106) = specialized Dictionary.subscript.getter(v2, static SiriLinkFlowFeatureFlags.forceEnabled);
  swift_endAccess(v0 + 16);
  OUTLINED_FUNCTION_30_12((uint64_t)&static SiriLinkFlowFeatureFlags.forceEnabled, v0 + 40, 33LL);
  specialized Dictionary._Variant.setValue(_:forKey:)();
  swift_endAccess(v0 + 40);
  uint64_t v5 = (uint64_t (*)(void))((char *)v1 + *v1);
  unint64_t v3 = (void *)swift_task_alloc(v1[1]);
  *(void *)(v0 + 88) = v3;
  *unint64_t v3 = v0;
  v3[1] = SiriLinkFlowFeatureFlags.withForcedEnabled<A>(_:block:);
  return v5(*(void *)(v0 + 64));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  *(void *)(*(void *)v1 + 96LL) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = SiriLinkFlowFeatureFlags.withForcedEnabled<A>(_:block:);
  }
  else {
    uint64_t v2 = SiriLinkFlowFeatureFlags.withForcedEnabled<A>(_:block:);
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_3_53();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_3_53();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t SiriLinkFlowFeatureFlags.updateForceEnabledFlags(oldFF:)(char a1, uint64_t a2)
{
  if (a1 == 2)
  {
    if (one-time initialization token for forceEnabled != -1) {
      swift_once(&one-time initialization token for forceEnabled, one-time initialization function for forceEnabled);
    }
    swift_beginAccess(&static SiriLinkFlowFeatureFlags.forceEnabled, v11, 33LL, 0LL);
    unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v4 & 1) != 0)
    {
      unint64_t v5 = v3;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(static SiriLinkFlowFeatureFlags.forceEnabled);
      uint64_t v10 = static SiriLinkFlowFeatureFlags.forceEnabled;
      uint64_t v7 = static SiriLinkFlowFeatureFlags.forceEnabled;
      static SiriLinkFlowFeatureFlags.forceEnabled = 0x8000000000000000LL;
      Swift::Int v8 = *(void *)(v7 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<SiriLinkFlowFeatureFlags, Bool>);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8);
      lazy protocol witness table accessor for type SiriLinkFlowFeatureFlags and conformance SiriLinkFlowFeatureFlags();
      _NativeDictionary._delete(at:)(v5, v10);
      static SiriLinkFlowFeatureFlags.forceEnabled = v10;
      swift_bridgeObjectRelease();
    }
  }

  else
  {
    if (one-time initialization token for forceEnabled != -1) {
      swift_once(&one-time initialization token for forceEnabled, one-time initialization function for forceEnabled);
    }
    swift_beginAccess(&static SiriLinkFlowFeatureFlags.forceEnabled, v11, 33LL, 0LL);
    specialized Dictionary._Variant.setValue(_:forKey:)();
  }

  return swift_endAccess(v11);
}

Swift::Int SiriLinkFlowFeatureFlags.hashValue.getter(unsigned __int8 a1)
{
  return OUTLINED_FUNCTION_2_40();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SiriLinkFlowFeatureFlags()
{
  return SiriLinkFlowFeatureFlags.hashValue.getter(*v0);
}

uint64_t protocol witness for FeatureFlagsKey.feature.getter in conformance SiriLinkFlowFeatureFlags()
{
  return SiriLinkFlowFeatureFlags.feature.getter(*v0);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = OUTLINED_FUNCTION_2_40();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v2 = v1;
  Swift::Int v4 = *(void *)(v2 + 40);
  unint64_t v5 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  char v6 = lazy protocol witness table accessor for type RFFeatureFlags.ResponseFramework and conformance RFFeatureFlags.ResponseFramework( &lazy protocol witness table cache variable for type RFFeatureFlags.ResponseFramework and conformance RFFeatureFlags.ResponseFramework,  (uint64_t)&protocol conformance descriptor for RFFeatureFlags.ResponseFramework);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v7);
}

{
  unsigned __int8 v1;
  Swift::Int v2;
  uint64_t v1 = a1;
  OUTLINED_FUNCTION_4_43(a1);
  Hasher._combine(_:)(v1);
  uint64_t v2 = OUTLINED_FUNCTION_2_40();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v1, v2);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  void v9[9];
  unint64_t v3 = *(void *)(v1 + 40);
  Swift::Int v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  uint64_t v7 = OUTLINED_FUNCTION_2_40();
  swift_bridgeObjectRelease(v6);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v7);
}

{
  uint64_t v1;
  uint64_t v3;
  unint64_t v3 = static Hasher._hash(seed:_:)(*(void *)(v1 + 40), a1);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

unint64_t lazy protocol witness table accessor for type SiriLinkFlowFeatureFlags and conformance SiriLinkFlowFeatureFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkFlowFeatureFlags and conformance SiriLinkFlowFeatureFlags;
  if (!lazy protocol witness table cache variable for type SiriLinkFlowFeatureFlags and conformance SiriLinkFlowFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkFlowFeatureFlags,  &type metadata for SiriLinkFlowFeatureFlags);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkFlowFeatureFlags and conformance SiriLinkFlowFeatureFlags);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkFlowFeatureFlags and conformance SiriLinkFlowFeatureFlags;
  if (!lazy protocol witness table cache variable for type SiriLinkFlowFeatureFlags and conformance SiriLinkFlowFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkFlowFeatureFlags,  &type metadata for SiriLinkFlowFeatureFlags);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkFlowFeatureFlags and conformance SiriLinkFlowFeatureFlags);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkFlowFeatureFlags and conformance SiriLinkFlowFeatureFlags;
  if (!lazy protocol witness table cache variable for type SiriLinkFlowFeatureFlags and conformance SiriLinkFlowFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkFlowFeatureFlags,  &type metadata for SiriLinkFlowFeatureFlags);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkFlowFeatureFlags and conformance SiriLinkFlowFeatureFlags);
  }

  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        unint64_t v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v3 = v2;
  int64_t v18 = a1;
  uint64_t v5 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::Int v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
  uint64_t v10 = a2 & ~v9;
  if (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    BOOL v12 = *(void *)(v6 + 72);
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(void *)(v3 + 48) + v12 * v10, v5);
      unint64_t v14 = lazy protocol witness table accessor for type RFFeatureFlags.ResponseFramework and conformance RFFeatureFlags.ResponseFramework( &lazy protocol witness table cache variable for type RFFeatureFlags.ResponseFramework and conformance RFFeatureFlags.ResponseFramework,  (uint64_t)&protocol conformance descriptor for RFFeatureFlags.ResponseFramework);
      uint64_t v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0) {
        break;
      }
      uint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  uint64_t v3 = v2 + 64;
  unint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  uint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    char v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2LL);
      return v5;
    }

    uint64_t v13 = v11;
    unint64_t v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      uint64_t v15 = ~v4;
      uint64_t v5 = (v5 + 1) & v15;
      if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
      {
        while (1)
        {
          BOOL v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
          uint64_t v9 = v17;
          int64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19) {
            break;
          }
          uint64_t v21 = v19;
          uint64_t v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0LL);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            uint64_t v5 = (v5 + 1) & v15;
            if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
              continue;
            }
          }

          return v5;
        }

        goto LABEL_16;
      }
    }
  }

  return v5;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    char v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      Swift::Int v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
      }
    }
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for SiriLinkFlowFeatureFlags(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_12DCE4 + 4 * byte_18A219[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_12DD18 + 4 * byte_18A214[v4]))();
}

uint64_t sub_12DD18(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_12DD20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x12DD28LL);
  }
  return result;
}

uint64_t sub_12DD34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x12DD3CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_12DD40(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_12DD48(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SiriLinkFlowFeatureFlags()
{
  return &type metadata for SiriLinkFlowFeatureFlags;
}

Swift::Int OUTLINED_FUNCTION_2_40()
{
  return Hasher._finalize()();
}

uint64_t OUTLINED_FUNCTION_3_53()
{
  return SiriLinkFlowFeatureFlags.updateForceEnabledFlags(oldFF:)(*(_BYTE *)(v0 + 106), *(unsigned __int8 *)(v0 + 105));
}

void *OUTLINED_FUNCTION_4_43(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, *(void *)(v1 + 40));
}

void LNAction.asSELFAction()()
{
  id v0 = [objc_allocWithZone(FLOWLINKSchemaFLOWLINKAction) init];
  uint64_t v1 = v0;
  if (!v0) {
    return;
  }
  id v2 = OUTLINED_FUNCTION_4((uint64_t)v0, "identifier");
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  outlined bridged method (mbnn) of @objc INIntent.launchId.setter(v3, v5, v1, (SEL *)&selRef_setActionIdentifierName_);
  id v7 = OUTLINED_FUNCTION_4(v6, "presentationStyle");
  else {
    uint64_t v8 = 0LL;
  }
  id v9 = OUTLINED_FUNCTION_4((uint64_t)[v1 setPresentationStyle:v8], "parameters");
  unint64_t v10 = type metadata accessor for LNProperty();
  uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

  if ((unint64_t)v11 >> 62)
  {
    if (v11 < 0) {
      uint64_t v36 = v11;
    }
    else {
      uint64_t v36 = v11 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v11);
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v36);
    OUTLINED_FUNCTION_37();
    if (v12) {
      goto LABEL_7;
    }
LABEL_22:
    OUTLINED_FUNCTION_37();
    return;
  }

  uint64_t v12 = *(void *)((char *)&dword_10 + (v11 & 0xFFFFFFFFFFFFF8LL));
  if (!v12) {
    goto LABEL_22;
  }
LABEL_7:
  if (v12 >= 1)
  {
    uint64_t v13 = 0LL;
    unint64_t v14 = &selRef__setCachedSiriLanguageCode_;
    while (1)
    {
      if ((v11 & 0xC000000000000001LL) != 0) {
        id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v11);
      }
      else {
        id v15 = *(id *)(v11 + 8 * v13 + 32);
      }
      BOOL v16 = v15;
      id v17 = [objc_allocWithZone(FLOWLINKSchemaFLOWLINKActionParameter) init];
      if (!v17) {
        goto LABEL_21;
      }
      int64_t v18 = v17;
      id v19 = OUTLINED_FUNCTION_164_0((uint64_t)v17, "identifier");
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v14;
      uint64_t v23 = v22;

      uint64_t v24 = v23;
      unint64_t v14 = v21;
      outlined bridged method (mbnn) of @objc INIntent.launchId.setter(v20, v24, v18, (SEL *)&selRef_setName_);
      id v26 = OUTLINED_FUNCTION_164_0(v25, v21[20]);
      if (v26)
      {
        unint64_t v27 = v26;
        id v28 = [v26 valueType];

        if (!v28) {
          goto LABEL_17;
        }
        uint64_t v29 = objc_opt_self(&OBJC_CLASS___LNArrayValueType);
        id v26 = (id)OUTLINED_FUNCTION_10_12(v29);
        if (!v26) {
          break;
        }
      }

uint64_t LNPrimitiveValueTypeIdentifier.asSELFType()(unint64_t a1)
{
  if (a1 > 0xC) {
    return 0LL;
  }
  else {
    return dword_18A2FC[a1];
  }
}

void *LNValueType.asSELFType()()
{
  uint64_t v1 = objc_opt_self(&OBJC_CLASS___LNArrayValueType);
  uint64_t v2 = OUTLINED_FUNCTION_10_12(v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    id v4 = v0;
    id v5 = [v3 memberValueType];
    uint64_t v6 = LNValueType.asSELFType()();

    return (void *)v6;
  }

  else
  {
    uint64_t v8 = objc_opt_self(&OBJC_CLASS___LNPrimitiveValueType);
    unint64_t result = (void *)OUTLINED_FUNCTION_10_12(v8);
    if (result)
    {
      unint64_t v9 = (unint64_t)[result typeIdentifier];
      if (v9 >= 0xD) {
        return 0LL;
      }
      else {
        return (void *)dword_18A2FC[v9];
      }
    }
  }

  return result;
}

unint64_t type metadata accessor for LNProperty()
{
  unint64_t result = lazy cache variable for type metadata for LNProperty;
  if (!lazy cache variable for type metadata for LNProperty)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___LNProperty);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNProperty);
  }

  return result;
}

void outlined bridged method (mbnn) of @objc FLOWLINKSchemaFLOWLINKActionParameter.name.setter( uint64_t a1, uint64_t a2, void *a3)
{
}

id OUTLINED_FUNCTION_2_41(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t static WFDialogState.isAppFirstRun(appId:)(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  id v4 = objc_allocWithZone(&OBJC_CLASS___NSUserDefaults);
  OUTLINED_FUNCTION_5_14();
  id v5 = @nonobjc NSUserDefaults.init(suiteName:)(0xD000000000000021LL, 0x80000000001973D0LL);
  if (!v5)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  uint64_t v6 = v5;
  NSString v7 = OUTLINED_FUNCTION_3_54();
  id v8 = [v6 stringArrayForKey:v7];

  if (v8)
  {
    unint64_t v9 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, &type metadata for String);
  }

  else
  {
    unint64_t v9 = _swiftEmptyArrayStorage;
  }

  if ((specialized Sequence<>.contains(_:)(a1, a2, v9) & 1) != 0)
  {
    swift_bridgeObjectRelease(v9);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v11, (uint64_t)static Logger.voiceCommands);
    uint64_t v12 = OUTLINED_FUNCTION_5_14();
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v37 = OUTLINED_FUNCTION_38(32LL);
      *(_DWORD *)id v15 = 136315138;
      uint64_t v16 = OUTLINED_FUNCTION_5_14();
      OUTLINED_FUNCTION_4_44(v16, v17, v18);
      OUTLINED_FUNCTION_10_35();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v19, v20, v15 + 4);
      OUTLINED_FUNCTION_7_37();
      _os_log_impl(&dword_0, v13, v14, "#WFDialogState this is not the first time that %s shows a dialog", v15, 0xCu);
      swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v37);
      OUTLINED_FUNCTION_1_0((uint64_t)v15);
    }

    else
    {

      OUTLINED_FUNCTION_46();
    }

    return 0LL;
  }

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v21 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v21, (uint64_t)static Logger.voiceCommands);
  uint64_t v22 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v38 = OUTLINED_FUNCTION_38(32LL);
    *(_DWORD *)uint64_t v25 = 136315138;
    uint64_t v26 = OUTLINED_FUNCTION_5_14();
    OUTLINED_FUNCTION_4_44(v26, v27, v28);
    OUTLINED_FUNCTION_10_35();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v29, v30, v25 + 4);
    OUTLINED_FUNCTION_7_37();
    _os_log_impl( &dword_0,  v23,  v24,  "#WFDialogState app %s hasn't shown any dialogs before, showing app attribution",  v25,  0xCu);
    swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v38);
    OUTLINED_FUNCTION_1_0((uint64_t)v25);
  }

  else
  {

    OUTLINED_FUNCTION_46();
  }

  if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
  {
    OUTLINED_FUNCTION_201();
    unint64_t v9 = v35;
  }

  unint64_t v31 = v9[2];
  if (v31 >= v9[3] >> 1)
  {
    OUTLINED_FUNCTION_201();
    unint64_t v9 = v36;
  }

  uint64_t v9[2] = v31 + 1;
  id v32 = &v9[2 * v31];
  v32[4] = a1;
  v32[5] = a2;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v9);
  NSString v34 = OUTLINED_FUNCTION_3_54();
  [v6 setObject:isa forKey:v34];

  return 1LL;
}

uint64_t *WFDialogState.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  }
  return &static WFDialogState.shared;
}

uint64_t one-time initialization function for shared()
{
  uint64_t v0 = type metadata accessor for WFDialogState();
  uint64_t v1 = OUTLINED_FUNCTION_9_38(v0);
  uint64_t result = OUTLINED_FUNCTION_8_53(v1);
  static WFDialogState.shared = result;
  return result;
}

uint64_t WFDialogState.__allocating_init()()
{
  uint64_t v1 = OUTLINED_FUNCTION_9_38(v0);
  return OUTLINED_FUNCTION_8_53(v1);
}

uint64_t static WFDialogState.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  }
  return swift_retain(static WFDialogState.shared);
}

uint64_t WFDialogState.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = 0LL;
  *(void *)(v0 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = 0xE000000000000000LL;
  *(_WORD *)(v0 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0;
  *(_BYTE *)(v0 + 34) = 0;
  return result;
}

Swift::Void __swiftcall WFDialogState.prepareForShortcut(name:)(Swift::String name)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void **)(v1 + 24);
  if (v2 != name._countAndFlagsBits || v3 != name._object)
  {
    object = name._object;
    uint64_t countAndFlagsBits = name._countAndFlagsBits;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(name._countAndFlagsBits, name._object, v2, v3, 0LL) & 1) == 0)
    {
      uint64_t v7 = *(void *)(v1 + 24);
      *(void *)(v1 + 16) = countAndFlagsBits;
      *(void *)(v1 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = object;
      swift_bridgeObjectRetain(object);
      swift_bridgeObjectRelease(v7);
      *(_WORD *)(v1 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0;
      *(_BYTE *)(v1 + 34) = 0;
    }
  }

Swift::Void __swiftcall WFDialogState.stepIsShown(isAudioStartAction:)(Swift::Bool isAudioStartAction)
{
  *(_WORD *)(v1 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 1;
  *(_BYTE *)(v1 + 34) = isAudioStartAction;
}

Swift::Void __swiftcall WFDialogState.stepIsNotShown()()
{
  *(_BYTE *)(v0 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0;
}

Swift::Bool __swiftcall WFDialogState.isLastStepShown()()
{
  return *(_BYTE *)(v0 + 32);
}

Swift::Void __swiftcall WFDialogState.clearScreen()()
{
  *(_BYTE *)(v0 + 33) = 1;
}

Swift::Bool __swiftcall WFDialogState.screenIsClear()()
{
  return *(_BYTE *)(v0 + 33);
}

Swift::Void __swiftcall WFDialogState.stepIsAudioStartAction()()
{
  *(_BYTE *)(v0 + 34) = 1;
}

Swift::Bool __swiftcall WFDialogState.lastStepIsAudioStartAction()()
{
  return *(_BYTE *)(v0 + 34);
}

uint64_t WFDialogState.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 35LL, 7LL);
}

id @nonobjc NSUserDefaults.init(suiteName:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v4 = 0LL;
  }

  id v5 = [v2 initWithSuiteName:v4];

  return v5;
}

void specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  uint64_t v1 = *v0;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
  *uint64_t v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    *uint64_t v0 = v3;
  }

void specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  if (a1 + 1 > *(void *)(*(void *)v1 + 24LL) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    *(void *)uint64_t v1 = v2;
  }

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result)
{
  unint64_t v2 = *(void *)((char *)&dword_18 + (*v1 & 0xFFFFFFFFFFFFF8LL));
  return result;
}

uint64_t type metadata accessor for WFDialogState()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin13WFDialogState);
}

NSString OUTLINED_FUNCTION_3_54()
{
  return String._bridgeToObjectiveC()();
}

uint64_t OUTLINED_FUNCTION_4_44(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_7_37()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

uint64_t OUTLINED_FUNCTION_8_53(uint64_t result)
{
  *(void *)(result + 16) = 0LL;
  *(void *)(result + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = 0xE000000000000000LL;
  *(_WORD *)(result + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0;
  *(_BYTE *)(result + 34) = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_9_38(uint64_t a1)
{
  return swift_allocObject(a1, 35LL, 7LL);
}

  ;
}

uint64_t UsoEntity_common_MeasurementComponent.measurementValue(locale:)(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for UsoEntity_common_DurationComponent(0LL);
  OUTLINED_FUNCTION_1_39(v1, v2);
  uint64_t v3 = OUTLINED_FUNCTION_12_5();
  if (v16)
  {
    UsoEntity_common_DurationComponent.measurementValue.getter();
    uint64_t v8 = v7;
    swift_release();
  }

  else
  {
    CodeGenBase.entity.getter(v3);
    uint64_t v4 = type metadata accessor for UsoEntity_common_TemperatureComponent(0LL);
    OUTLINED_FUNCTION_1_39(v4, v5);
    uint64_t v6 = OUTLINED_FUNCTION_12_5();
    uint64_t v10 = dispatch thunk of UsoEntity_common_MeasurementComponent.value.getter(v6);
    if (v10)
    {
      OUTLINED_FUNCTION_6_45(v10);
      uint64_t v8 = v11;
      char v13 = v12;
      uint64_t v10 = OUTLINED_FUNCTION_12_5();
      char v14 = v13 & 1;
    }

    else
    {
      uint64_t v8 = 0LL;
      char v14 = 1;
    }

    if (dispatch thunk of UsoEntity_common_MeasurementComponent.unit.getter(v10))
    {
      id v15 = UsoEntity_common_MeasurementUnit.unitType.getter();
      swift_release();
      if ((v14 & 1) == 0) {
        return v8;
      }
    }

    else
    {
      id v15 = 0LL;
      if ((v14 & 1) == 0) {
        return v8;
      }
    }

    return 0LL;
  }

  return v8;
}

void UsoEntity_common_DurationComponent.measurementValue.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_TimeUnit.DefinedValues?);
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = dispatch thunk of UsoEntity_common_DurationComponent.value.getter(v1);
  if (v4)
  {
    OUTLINED_FUNCTION_6_45(v4);
    char v6 = v5;
    uint64_t v4 = OUTLINED_FUNCTION_12_5();
    char v7 = v6 & 1;
  }

  else
  {
    char v7 = 1;
  }

  id v8 = (id)dispatch thunk of UsoEntity_common_DurationComponent.unit.getter(v4);
  if (v8)
  {
    dispatch thunk of UsoEntity_common_TimeUnit.definedValue.getter();
    OUTLINED_FUNCTION_12_5();
    uint64_t v9 = type metadata accessor for UsoEntity_common_TimeUnit.DefinedValues(0LL);
    if (__swift_getEnumTagSinglePayload((uint64_t)v3, 1LL, v9) != 1)
    {
      id v8 = UsoEntity_common_TimeUnit.DefinedValues.unitType.getter();
      (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8LL))(v3, v9);
      if ((v7 & 1) == 0) {
        goto LABEL_10;
      }
      goto LABEL_8;
    }

    outlined destroy of URL?( (uint64_t)v3,  &demangling cache variable for type metadata for UsoEntity_common_TimeUnit.DefinedValues?);
    id v8 = 0LL;
  }

  if ((v7 & 1) != 0) {
LABEL_8:
  }

LABEL_10:
  OUTLINED_FUNCTION_38_0();
}

void UsoEntity_common_TemperatureComponent.measurementValue(locale:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_TemperatureUnit.DefinedValues?);
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = dispatch thunk of UsoEntity_common_TemperatureComponent.value.getter(v1);
  if (v4)
  {
    OUTLINED_FUNCTION_6_45(v4);
    char v6 = v5;
    uint64_t v4 = OUTLINED_FUNCTION_12_5();
    char v7 = v6 & 1;
  }

  else
  {
    char v7 = 1;
  }

  id v8 = (id)dispatch thunk of UsoEntity_common_TemperatureComponent.unit.getter(v4);
  if (v8)
  {
    dispatch thunk of UsoEntity_common_TemperatureUnit.definedValue.getter();
    OUTLINED_FUNCTION_12_5();
    uint64_t v9 = type metadata accessor for UsoEntity_common_TemperatureUnit.DefinedValues(0LL);
    if (__swift_getEnumTagSinglePayload((uint64_t)v3, 1LL, v9) != 1)
    {
      id v8 = UsoEntity_common_TemperatureUnit.DefinedValues.unitType(locale:)();
      (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8LL))(v3, v9);
      if ((v7 & 1) == 0) {
        goto LABEL_10;
      }
      goto LABEL_8;
    }

    outlined destroy of URL?( (uint64_t)v3,  &demangling cache variable for type metadata for UsoEntity_common_TemperatureUnit.DefinedValues?);
    id v8 = 0LL;
  }

  if ((v7 & 1) != 0) {
LABEL_8:
  }

LABEL_10:
  OUTLINED_FUNCTION_38_0();
}

id UsoEntity_common_TimeUnit.DefinedValues.unitType.getter()
{
  uint64_t v1 = type metadata accessor for UsoEntity_common_TimeUnit.DefinedValues(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_63_8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v0, v0, v1);
  int v3 = OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88));
  if (v3 == enum case for UsoEntity_common_TimeUnit.DefinedValues.common_TimeUnit_Second(_:))
  {
    id v4 = [(id)objc_opt_self(NSUnitDuration) seconds];
    return v4;
  }

  if (v3 == enum case for UsoEntity_common_TimeUnit.DefinedValues.common_TimeUnit_Minute(_:))
  {
    id v4 = [(id)objc_opt_self(NSUnitDuration) minutes];
    return v4;
  }

  if (v3 == enum case for UsoEntity_common_TimeUnit.DefinedValues.common_TimeUnit_Hour(_:))
  {
    id v4 = [(id)objc_opt_self(NSUnitDuration) hours];
    return v4;
  }

  if (v3 == enum case for UsoEntity_common_TimeUnit.DefinedValues.common_TimeUnit_Millisecond(_:))
  {
    id v4 = [(id)objc_opt_self(NSUnitDuration) milliseconds];
    return v4;
  }

  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  return 0LL;
}

id UsoEntity_common_TemperatureUnit.DefinedValues.unitType(locale:)()
{
  uint64_t v1 = type metadata accessor for UsoEntity_common_TemperatureUnit.DefinedValues(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_63_8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v0, v0, v1);
  int v3 = OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88));
  if (v3 == enum case for UsoEntity_common_TemperatureUnit.DefinedValues.common_TemperatureUnit_Degrees(_:))
  {
    char v4 = Locale.usesMetricSystem.getter();
    char v5 = (void *)objc_opt_self(&OBJC_CLASS___NSUnitTemperature);
    char v6 = &selRef_celsius;
    if ((v4 & 1) == 0) {
      char v6 = &selRef_fahrenheit;
    }
    id v7 = [v5 *v6];
    return v7;
  }

  if (v3 == enum case for UsoEntity_common_TemperatureUnit.DefinedValues.common_TemperatureUnit_DegreesCelsius(_:))
  {
    id v7 = [(id)objc_opt_self(NSUnitTemperature) celsius];
    return v7;
  }

  if (v3 == enum case for UsoEntity_common_TemperatureUnit.DefinedValues.common_TemperatureUnit_DegreesFahrenheit(_:))
  {
    id v7 = [(id)objc_opt_self(NSUnitTemperature) fahrenheit];
    return v7;
  }

  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  return 0LL;
}

void *OUTLINED_FUNCTION_1_39(uint64_t a1, uint64_t a2, ...)
{
  return static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)((uint64_t *)va, v2, a1, a1);
}

void OUTLINED_FUNCTION_6_45(uint64_t a1)
{
}

uint64_t ResponseMode.toLinkInteractionMode()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ResponseMode(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  char v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  id v8 = (char *)&v18 - v7;
  uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v18 - v7, v1, v2);
  static ResponseMode.displayForward.getter(v9);
  lazy protocol witness table accessor for type ResponseMode and conformance ResponseMode();
  char v10 = OUTLINED_FUNCTION_0_47();
  uint64_t v11 = OUTLINED_FUNCTION_1_40((uint64_t)v6);
  if ((v10 & 1) != 0)
  {
    OUTLINED_FUNCTION_1_40((uint64_t)v8);
    return 1LL;
  }

  else
  {
    static ResponseMode.displayOnly.getter(v11);
    char v13 = OUTLINED_FUNCTION_0_47();
    uint64_t v14 = OUTLINED_FUNCTION_1_40((uint64_t)v6);
    if ((v13 & 1) != 0)
    {
      OUTLINED_FUNCTION_1_40((uint64_t)v8);
      return 2LL;
    }

    else
    {
      static ResponseMode.voiceForward.getter(v14);
      char v15 = OUTLINED_FUNCTION_0_47();
      uint64_t v16 = OUTLINED_FUNCTION_1_40((uint64_t)v6);
      if ((v15 & 1) != 0)
      {
        OUTLINED_FUNCTION_1_40((uint64_t)v8);
        return 3LL;
      }

      else
      {
        static ResponseMode.voiceOnly.getter(v16);
        char v17 = OUTLINED_FUNCTION_0_47();
        OUTLINED_FUNCTION_1_40((uint64_t)v6);
        OUTLINED_FUNCTION_1_40((uint64_t)v8);
        if ((v17 & 1) != 0) {
          return 4LL;
        }
        else {
          return 3LL;
        }
      }
    }
  }

uint64_t OUTLINED_FUNCTION_0_47()
{
  return dispatch thunk of static Equatable.== infix(_:_:)(v2, v0, v1, v3);
}

uint64_t OUTLINED_FUNCTION_1_40(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t InstallShortcutViewFactory.__allocating_init(deviceState:catWrapper:)(__int128 *a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject(v2, 64LL, 7LL);
  outlined init with take of AceServiceInvokerAsync(a1, v5 + 16);
  *(void *)(v5 + 56) = a2;
  return v5;
}

uint64_t InstallShortcutViewFactory.init(deviceState:catWrapper:)(__int128 *a1, uint64_t a2)
{
  *(void *)(v2 + 56) = a2;
  return v2;
}

uint64_t one-time initialization function for shortcutsApp()
{
  uint64_t result = App.__allocating_init(appIdentifier:)(0xD000000000000013LL, 0x80000000001920C0LL);
  static InstallShortcutViewFactory.shortcutsApp = result;
  return result;
}

uint64_t *InstallShortcutViewFactory.shortcutsApp.unsafeMutableAddressor()
{
  if (one-time initialization token for shortcutsApp != -1) {
    swift_once(&one-time initialization token for shortcutsApp, one-time initialization function for shortcutsApp);
  }
  return &static InstallShortcutViewFactory.shortcutsApp;
}

uint64_t static InstallShortcutViewFactory.shortcutsApp.getter()
{
  if (one-time initialization token for shortcutsApp != -1) {
    swift_once(&one-time initialization token for shortcutsApp, one-time initialization function for shortcutsApp);
  }
  return swift_retain(static InstallShortcutViewFactory.shortcutsApp);
}

uint64_t InstallShortcutViewFactory.makeAceOutputErrorInstallShortcut()(uint64_t a1)
{
  v2[7] = a1;
  _BYTE v2[8] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[9] = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for TemplatingResult(0LL);
  v2[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[11] = v5;
  v2[12] = OUTLINED_FUNCTION_9_0(v5);
  char v6 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(*(void *)v1 + 112LL));
  v2[13] = v6;
  *char v6 = v2;
  v6[1] = InstallShortcutViewFactory.makeAceOutputErrorInstallShortcut();
  return v8();
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v7)(void);
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 64);
  uint64_t v4 = *v1;
  *(void *)(*v1 + 11outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(*(void *)v3 + 128LL));
  *(void *)(v2 + 120) = v5;
  *uint64_t v5 = v4;
  v5[1] = InstallShortcutViewFactory.makeAceOutputErrorInstallShortcut();
  return v7(*(void *)(v2 + 96));
}

uint64_t InstallShortcutViewFactory.makeAceOutputErrorInstallShortcut()()
{
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  unint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void **)(v0 + 64);
  uint64_t v3 = v2 + 2;
  uint64_t v4 = v2[5];
  uint64_t v5 = v2[6];
  __swift_project_boxed_opaque_existential_1(v2 + 2, v4);
  char v6 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v4, v5);
  uint64_t v7 = *(void *)(v0 + 112);
  if (v1 >> 62)
  {
    if (v7 < 0) {
      uint64_t v16 = *(void *)(v0 + 112);
    }
    else {
      uint64_t v16 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    char v17 = type metadata accessor for SAAceView();
    swift_bridgeObjectRetain(v7);
    uint64_t v9 = _bridgeCocoaArray<A>(_:)(v16, v17);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRetain(*(void *)(v0 + 112));
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v8);
    type metadata accessor for SAAceView();
    uint64_t v9 = *(void *)(v0 + 112);
  }

  uint64_t v11 = *(void *)(v0 + 88);
  char v10 = *(void *)(v0 + 96);
  char v12 = *(void *)(v0 + 72);
  char v13 = *(void *)(v0 + 80);
  swift_bridgeObjectRelease();
  uint64_t v14 = type metadata accessor for NLContextUpdate(0LL);
  __swift_storeEnumTagSinglePayload(v12, 1LL, 1LL, v14);
  *(void *)(v0 + 48) = 0LL;
  *(_OWORD *)(v0 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  static AceOutputHelper.makeSummaryViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v10,  v3,  v6 & 1,  v9,  0LL,  1LL,  v12,  _swiftEmptyArrayStorage,  v0 + 16);
  swift_bridgeObjectRelease();
  outlined destroy of URL?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v12, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v13);
  swift_task_dealloc();
  OUTLINED_FUNCTION_40_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t type metadata accessor for SAAceView()
{
  unint64_t result = lazy cache variable for type metadata for SAAceView;
  if (!lazy cache variable for type metadata for SAAceView)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___SAAceView);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
  }

  return result;
}

uint64_t InstallShortcutViewFactory.makeAppLaunchButtonText()()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for TemplatingText(0LL);
  v1[3] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[4] = v3;
  v1[5] = OUTLINED_FUNCTION_9_0(v3);
  uint64_t v4 = type metadata accessor for TemplatingSection(0LL);
  v1[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[7] = v5;
  v1[8] = OUTLINED_FUNCTION_9_0(v5);
  uint64_t v6 = type metadata accessor for TemplatingResult(0LL);
  v1[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v1[10] = v7;
  v1[11] = OUTLINED_FUNCTION_9_0(v7);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  *(void *)(v1 + 96) = OUTLINED_FUNCTION_4_45(*(void **)(v1 + 16));
  uint64_t v2 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for InstallShortcutCATs + *v0 + 8));
  *(void *)(v1 + 104) = v2;
  *uint64_t v2 = v1;
  v2[1] = InstallShortcutViewFactory.makeAppLaunchButtonText();
  OUTLINED_FUNCTION_15_26();
  return OUTLINED_FUNCTION_36_1(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  *(void *)(*(void *)v1 + OUTLINED_FUNCTION_19(v1, 112LL) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v2, v3, v4);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  swift_release();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v2 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_9_5();
  uint64_t v3 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_45_0(v3))
  {
    uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    *uint64_t v4 = 0;
    OUTLINED_FUNCTION_27_0(&dword_0, v5, v6, "InstallShortcutViewFactory error generating app launch button text");
    OUTLINED_FUNCTION_1_0((uint64_t)v4);
  }

  uint64_t v7 = *(void *)(v1 + 112);

  swift_errorRelease(v7);
  swift_task_dealloc();
  OUTLINED_FUNCTION_40_0();
  swift_task_dealloc();
  return (*(uint64_t (**)(void, unint64_t))(v1 + 8))(0LL, 0xE000000000000000LL);
}

uint64_t InstallShortcutViewFactory.makeAppLaunchButtonText()(uint64_t a1)
{
  uint64_t v2 = *(void **)(TemplatingResult.sections.getter(a1) + 16);
  uint64_t v3 = swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v2 = *(void **)(v1 + 88);
    uint64_t v4 = TemplatingResult.sections.getter(v3);
    if (*(void *)(v4 + 16))
    {
      uint64_t v5 = *(void *)(v1 + 80);
      uint64_t v27 = *(void *)(v1 + 88);
      uint64_t v6 = *(void *)(v1 + 64);
      uint64_t v7 = *(void *)(v1 + 72);
      uint64_t v8 = *(void *)(v1 + 48);
      uint64_t v9 = *(void *)(v1 + 56);
      uint64_t v10 = *(void *)(v1 + 32);
      uint64_t v11 = *(void *)(v1 + 40);
      uint64_t v12 = *(void *)(v1 + 24);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16))( v6,  v4 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)),  v8);
      uint64_t v13 = swift_bridgeObjectRelease();
      TemplatingSection.content.getter(v13);
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v6, v8);
      uint64_t v15 = TemplatingText.text.getter(v14);
      unint64_t v17 = v16;
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v27, v7);
      goto LABEL_8;
    }

    __break(1u);
    goto LABEL_10;
  }

  if (one-time initialization token for voiceCommands != -1) {
LABEL_10:
  }
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  uint64_t v18 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_9_5();
  os_log_type_t v19 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_45_0(v19))
  {
    uint64_t v20 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    _WORD *v20 = 0;
    OUTLINED_FUNCTION_27_0(&dword_0, v21, v22, "InstallShortcutViewFactory app launch button text is empty");
    OUTLINED_FUNCTION_1_0((uint64_t)v20);
  }

  uint64_t v24 = *(void *)(v1 + 80);
  uint64_t v23 = *(void *)(v1 + 88);
  uint64_t v25 = *(void *)(v1 + 72);

  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  uint64_t v15 = 0LL;
  unint64_t v17 = 0xE000000000000000LL;
LABEL_8:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, unint64_t))(v1 + 8))(v15, v17);
}

uint64_t InstallShortcutViewFactory.makeErrorInstallShortcutTemplate()(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  unint64_t v3 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?)
                              - 8)
                  + 64LL)
      + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[12] = swift_task_alloc(v3);
  v2[13] = swift_task_alloc(v3);
  uint64_t v4 = OUTLINED_FUNCTION_48();
  v2[14] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[15] = v5;
  v2[16] = OUTLINED_FUNCTION_9_0(v5);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t InstallShortcutViewFactory.makeErrorInstallShortcutTemplate()()
{
  *(void *)(v1 + 136) = OUTLINED_FUNCTION_4_45(*(void **)(v1 + 88));
  uint64_t v2 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(*v0 + class metadata base offset for InstallShortcutCATs));
  *(void *)(v1 + 144) = v2;
  *uint64_t v2 = v1;
  v2[1] = InstallShortcutViewFactory.makeErrorInstallShortcutTemplate();
  OUTLINED_FUNCTION_15_26();
  return OUTLINED_FUNCTION_36_1(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v2 = *v1;
  *(void *)(v2 + 15outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return swift_task_switch(v3, v4, v5);
  }

  else
  {
    swift_release();
    OUTLINED_FUNCTION_40_0();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v2 + 8))();
  }

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  os_log_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(os_log_s *, uint64_t, uint64_t);
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v23;
  uint64_t v24;
  uint64_t v23 = v0 + 8;
  swift_release();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = v0[19];
  uint64_t v2 = __swift_project_value_buffer(v0[14], (uint64_t)static Logger.voiceCommands);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  uint64_t v5 = static os_log_type_t.error.getter();
  uint64_t v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[19];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v9 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v24 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_getErrorValue(v7, v23, v0 + 2);
    uint64_t v10 = Error.localizedDescription.getter(v0[3], v0[4]);
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v8 + 4);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_10_36();
    OUTLINED_FUNCTION_10_36();
    _os_log_impl(&dword_0, v4, v5, "Unable to generate dialog due to error: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v9);
    OUTLINED_FUNCTION_1_0((uint64_t)v8);
  }

  else
  {
    OUTLINED_FUNCTION_10_36();
    OUTLINED_FUNCTION_10_36();
  }

  uint64_t v12 = (os_log_s *)v0[16];
  uint64_t v14 = v0[13];
  uint64_t v13 = v0[14];
  uint64_t v15 = v0[12];
  unint64_t v16 = *(void (**)(os_log_s *, uint64_t, uint64_t))(v0[15] + 16LL);
  v16(v12, v2, v13);
  v16((os_log_s *)v14, (uint64_t)v12, v13);
  __swift_storeEnumTagSinglePayload(v14, 0LL, 1LL, v13);
  outlined init with copy of Logger?(v14, v15);
  if (__swift_getEnumTagSinglePayload(v15, 1LL, v13) == 1)
  {
    outlined destroy of URL?(v0[12], &demangling cache variable for type metadata for Logger?);
  }

  else
  {
    OUTLINED_FUNCTION_9_5();
    unint64_t v17 = OUTLINED_FUNCTION_73();
    if (os_log_type_enabled(v12, v17))
    {
      uint64_t v18 = OUTLINED_FUNCTION_38(32LL);
      os_log_type_t v19 = OUTLINED_FUNCTION_38(64LL);
      uint64_t v24 = v19;
      *(_DWORD *)uint64_t v18 = 136315650;
      uint64_t v20 = StaticString.description.getter( "/Library/Caches/com.apple.xbs/Sources/SiriLinkFlow/SiriLinkFlowPlugin/InstallShortcut/InstallShortcutViewFactory.swift",  118LL,  2LL);
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v18 + 4);
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 1outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 2048;
      v0[6] = 78LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v18 + 14);
      *(_WORD *)(v18 + 2outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 2080;
      v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD000000000000031LL,  0x80000000001974B0LL,  &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v23, v18 + 24);
      _os_log_impl(&dword_0, v12, v17, "FatalError at %s:%lu - %s", (uint8_t *)v18, 0x20u);
      swift_arrayDestroy(v19, 2LL, (char *)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v19);
      OUTLINED_FUNCTION_1_0(v18);
    }

    (*(void (**)(void, void))(v0[15] + 8LL))(v0[12], v0[14]);
  }

  static SiriKitLifecycle._logCrashToEventBus(_:)(0xD000000000000031LL, 0x80000000001974B0LL);
  return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000031LL,  0x80000000001974B0LL,  "/Library/Caches/com.apple.xbs/Sources/SiriLinkFlow/SiriLinkFlowPlugin/InstallShortcut/InstallShortcutViewFactory.swift",  118LL,  2LL);
}

uint64_t type metadata accessor for InstallShortcutViewFactory()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin26InstallShortcutViewFactory);
}

uint64_t OUTLINED_FUNCTION_4_45@<X0>(void *a1@<X8>)
{
  uint64_t v1 = a1[6];
  uint64_t v2 = a1[5];
  __swift_project_boxed_opaque_existential_1(a1 + 2, v2);
  return DeviceState.asSiriKitDeviceState()(v2, v1);
}

uint64_t OUTLINED_FUNCTION_10_36()
{
  return swift_errorRelease(v0);
}

  ;
}

uint64_t _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10Foundation14DateComponentsV_s5NeverOAD0E0VTg5@<X0>( void (*a1)(char *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v15 = a1;
  uint64_t v5 = type metadata accessor for DateComponents(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of AppDisplayInfo?( v3,  (uint64_t)v11,  &demangling cache variable for type metadata for DateComponents?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1LL, v5) == 1)
  {
    uint64_t v12 = type metadata accessor for Date(0LL);
    return __swift_storeEnumTagSinglePayload(a2, 1LL, 1LL, v12);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    v15(v8);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

uint64_t Siri_Nlu_External_UserDialogAct.stringValue.getter()
{
  uint64_t v2 = Siri_Nlu_External_UserDialogAct.userDialogTask.getter();
  if (!v1)
  {
    uint64_t v0 = (uint64_t)v2;
    if (v2)
    {
      uint64_t v3 = OUTLINED_FUNCTION_24_2();
      OUTLINED_FUNCTION_80_10(v3, v4);
      uint64_t v5 = OUTLINED_FUNCTION_22_30();
      if (v14)
      {
        uint64_t v8 = OUTLINED_FUNCTION_55_21();
        if ((OUTLINED_FUNCTION_9_39(v8, v9, (uint64_t)&type metadata for Any + 8, v8, v10) & 1) != 0)
        {
          uint64_t v11 = dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.payload.getter();
          uint64_t v12 = OUTLINED_FUNCTION_12_5();
          if (v11)
          {
            uint64_t v0 = v11;
            dispatch thunk of UsoEntity_common_VoiceCommandPayload.stringValue.getter(v12);
            OUTLINED_FUNCTION_84_15();
            OUTLINED_FUNCTION_53_7();
            return v0;
          }
        }
      }

      else
      {
        OUTLINED_FUNCTION_36_23(v5, &demangling cache variable for type metadata for Any?, v6, v7);
      }

      return 0LL;
    }
  }

  return v0;
}

uint64_t Siri_Nlu_External_UserDialogAct.intValue.getter()
{
  return Siri_Nlu_External_UserDialogAct.intValue.getter((uint64_t (*)(uint64_t))UsoEntity_common_Number.intValue.getter);
}

uint8_t *Siri_Nlu_External_UserDialogAct.urlValue.getter@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = Siri_Nlu_External_UserDialogAct.userDialogTask.getter();
  if (!v1)
  {
    if (result)
    {
      OUTLINED_FUNCTION_24_2();
      static UsoTask_CodegenConverter.convert(task:)(v15);
      OUTLINED_FUNCTION_22_30();
      if (v15[3])
      {
        uint64_t v4 = OUTLINED_FUNCTION_55_21();
        if ((OUTLINED_FUNCTION_35_6((uint64_t)&v16, (uint64_t)v15, (uint64_t)&type metadata for Any + 8, v4) & 1) != 0)
        {
          uint64_t v5 = dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.payload.getter();
          uint64_t v6 = OUTLINED_FUNCTION_12_5();
          if (v5)
          {
            uint64_t v7 = dispatch thunk of UsoEntity_common_VoiceCommandPayload.contactAddress.getter(v6);
            if (v7) {
              uint64_t v8 = CodeGenBase.entity.getter(v7);
            }
            else {
              uint64_t v8 = 0LL;
            }
            uint64_t v9 = type metadata accessor for UsoEntity_common_Uri(0LL);
            static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)(v15, v8, v9, v9);
            OUTLINED_FUNCTION_12_5();
            if (v15[0])
            {
              uint64_t v10 = OUTLINED_FUNCTION_24_2();
              uint64_t v11 = dispatch thunk of UsoEntity_common_Uri.value.getter(v10);
              uint64_t v13 = v12;
              OUTLINED_FUNCTION_12_5();
              if (v13)
              {
                String.convertedToURL()(v11, v13, a1);
                OUTLINED_FUNCTION_69();
                OUTLINED_FUNCTION_21_13();
                OUTLINED_FUNCTION_12_5();
                return (uint8_t *)OUTLINED_FUNCTION_53_7();
              }

              OUTLINED_FUNCTION_21_13();
            }

            OUTLINED_FUNCTION_21_13();
            OUTLINED_FUNCTION_53_7();
          }
        }
      }

      else
      {
        outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for Any?);
      }
    }

    uint64_t v14 = type metadata accessor for URL(0LL);
    return (uint8_t *)__swift_storeEnumTagSinglePayload(a1, 1LL, 1LL, v14);
  }

  return result;
}

uint64_t Siri_Nlu_External_UserDialogAct.dateComponentsValue(dateTimeResolving:locationProviding:locale:calendar:timeZone:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<DateTime>?);
  v5[12] = OUTLINED_FUNCTION_4_0(*(void *)(v6 - 8));
  void v5[13] = OUTLINED_FUNCTION_11_0();
  uint64_t v7 = type metadata accessor for DateTimeResolutionSpec.DateTimeConvergenceStrategy(0LL);
  v5[14] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[15] = v8;
  v5[16] = OUTLINED_FUNCTION_9_0(v8);
  uint64_t v9 = type metadata accessor for DateTimeResolutionSpec.ExpandToType(0LL);
  v5[17] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[18] = v10;
  v5[19] = OUTLINED_FUNCTION_9_0(v10);
  uint64_t v11 = type metadata accessor for DateTimeResolutionSpec(0LL);
  v5[20] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[21] = v12;
  v5[22] = OUTLINED_FUNCTION_9_0(v12);
  uint64_t v13 = type metadata accessor for Date(0LL);
  v5[23] = OUTLINED_FUNCTION_9_0(*(void *)(v13 - 8));
  uint64_t v14 = type metadata accessor for Calendar.Identifier(0LL);
  v5[24] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v5[25] = v15;
  v5[26] = OUTLINED_FUNCTION_9_0(v15);
  uint64_t v16 = type metadata accessor for Calendar(0LL);
  v5[27] = OUTLINED_FUNCTION_9_0(*(void *)(v16 - 8));
  uint64_t v17 = type metadata accessor for TimeZone(0LL);
  v5[28] = OUTLINED_FUNCTION_9_0(*(void *)(v17 - 8));
  uint64_t v18 = type metadata accessor for Locale(0LL);
  v5[29] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v5[30] = v19;
  v5[31] = OUTLINED_FUNCTION_4_0(v19);
  v5[32] = OUTLINED_FUNCTION_11_0();
  v5[33] = OUTLINED_FUNCTION_11_0();
  uint64_t v20 = type metadata accessor for DateTimeResolutionContext.Hemisphere(0LL);
  v5[34] = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  v5[35] = v21;
  v5[36] = OUTLINED_FUNCTION_4_0(v21);
  v5[37] = OUTLINED_FUNCTION_11_0();
  v5[38] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t Siri_Nlu_External_UserDialogAct.dateComponentsValue(dateTimeResolving:locationProviding:locale:calendar:timeZone:)()
{
  uint64_t v2 = Siri_Nlu_External_UserDialogAct.userDialogTask.getter();
  *(void *)(v0 + 31outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0LL;
  uint64_t v3 = v2;
  if (v2)
  {
    swift_retain(v2);
    static UsoTask_CodegenConverter.convert(task:)((void *)(v0 + 16));
    swift_release_n(v3, 2LL);
    if (*(void *)(v0 + 40))
    {
      uint64_t v4 = type metadata accessor for UsoTask_execute_common_VoiceCommand(0LL);
      if ((swift_dynamicCast(v0 + 48, v0 + 16, (char *)&type metadata for Any + 8, v4, 6LL) & 1) != 0)
      {
        uint64_t v5 = dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.payload.getter();
        uint64_t v6 = OUTLINED_FUNCTION_12_5();
        if (v5)
        {
          uint64_t v7 = dispatch thunk of UsoEntity_common_VoiceCommandPayload.dateTime.getter(v6);
          OUTLINED_FUNCTION_34_0();
          if (v7)
          {
            uint64_t v8 = *(void **)(v0 + 72);
            *(void *)(v0 + 320) = UsoEntity_common_DateTime.toDateTime(recurrencePattern:)(0LL);
            OUTLINED_FUNCTION_12_5();
            uint64_t v9 = v8[3];
            uint64_t v10 = v8[4];
            __swift_project_boxed_opaque_existential_1(v8, v9);
            uint64_t v11 = *(int **)(v10 + 8);
            uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t))((char *)v11 + *v11);
            uint64_t v12 = (void *)swift_task_alloc(v11[1]);
            *(void *)(v0 + 328) = v12;
            *uint64_t v12 = v0;
            v12[1] = Siri_Nlu_External_UserDialogAct.dateComponentsValue(dateTimeResolving:locationProviding:locale:calendar:timeZone:);
            return v22(v9, v10);
          }
        }
      }
    }

    else
    {
      outlined destroy of Any?(v0 + 16, &demangling cache variable for type metadata for Any?);
    }
  }

  uint64_t v16 = *(void *)(v0 + 208);
  uint64_t v17 = *(void *)(v0 + 184);
  uint64_t v18 = *(void *)(v0 + 176);
  uint64_t v19 = *(void *)(v0 + 152);
  uint64_t v20 = *(void *)(v0 + 128);
  uint64_t v21 = *(void *)(v0 + 104);
  uint64_t v23 = *(void *)(v0 + 96);
  uint64_t v14 = OUTLINED_FUNCTION_78_11();
  OUTLINED_FUNCTION_40_11(v1, 1LL, v15, v14);
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  unsigned int *v8;
  uint64_t v9;
  os_log_s *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (**v46)(uint64_t, uint64_t);
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v1 = *(void **)(v0 + 336);
  if (v1)
  {
    uint64_t v3 = *(void *)(v0 + 296);
    uint64_t v2 = *(void *)(v0 + 304);
    uint64_t v4 = *(void *)(v0 + 272);
    uint64_t v5 = *(void *)(v0 + 280);
    [*(id *)(v0 + 336) lat];
    uint64_t v7 = v6;

    uint64_t v8 = (unsigned int *)&enum case for DateTimeResolutionContext.Hemisphere.north(_:);
    if (v7 <= 0.0) {
      uint64_t v8 = (unsigned int *)&enum case for DateTimeResolutionContext.Hemisphere.south(_:);
    }
    (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v3, *v8, v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v2, v3, v4);
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v9 = OUTLINED_FUNCTION_48();
    uint64_t v10 = (os_log_s *)OUTLINED_FUNCTION_84(v9, (uint64_t)static Logger.voiceCommands);
    uint64_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)OUTLINED_FUNCTION_57_1();
      *(_WORD *)uint64_t v12 = 0;
      OUTLINED_FUNCTION_47_1(&dword_0, v10, v11, "Could not get location, setting hemisphere to north", v12);
      OUTLINED_FUNCTION_1_0((uint64_t)v12);
    }

    uint64_t v13 = *(void *)(v0 + 304);
    uint64_t v14 = *(void *)(v0 + 272);
    uint64_t v15 = *(void *)(v0 + 280);

    (*(void (**)(uint64_t, void, uint64_t))(v15 + 104))( v13,  enum case for DateTimeResolutionContext.Hemisphere.north(_:),  v14);
  }

  uint64_t v79 = *(void *)(v0 + 320);
  uint64_t v82 = *(void *)(v0 + 312);
  unint64_t v57 = *(void *)(v0 + 280);
  char v58 = *(void *)(v0 + 288);
  unint64_t v59 = *(void *)(v0 + 272);
  char v60 = *(void *)(v0 + 304);
  uint64_t v17 = *(void *)(v0 + 248);
  uint64_t v16 = *(void *)(v0 + 256);
  uint64_t v63 = *(void *)(v0 + 264);
  uint64_t v18 = *(void *)(v0 + 224);
  uint64_t v19 = *(void *)(v0 + 200);
  uint64_t v20 = *(void *)(v0 + 208);
  uint64_t v21 = *(void *)(v0 + 192);
  unint64_t v61 = *(void *)(v0 + 216);
  char v62 = *(void *)(v0 + 184);
  uint64_t v75 = *(void *)(v0 + 176);
  uint64_t v64 = *(void *)(v0 + 144);
  uint64_t v65 = *(void *)(v0 + 152);
  uint64_t v66 = *(void *)(v0 + 136);
  uint64_t v67 = *(void *)(v0 + 120);
  uint64_t v69 = *(void *)(v0 + 128);
  Swift::Bool v71 = *(void *)(v0 + 112);
  os_log_type_t v73 = *(void **)(v0 + 64);
  OUTLINED_FUNCTION_45_21(v63);
  OUTLINED_FUNCTION_45_21(v16);
  uint64_t v22 = OUTLINED_FUNCTION_45_21(v17);
  static TimeZone.current.getter(v22);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 16))(v58, v60, v59);
  (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))( v20,  enum case for Calendar.Identifier.gregorian(_:),  v21);
  Calendar.init(identifier:)(v20);
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
  static Date.now.getter(v23);
  uint64_t v24 = type metadata accessor for DateTimeResolutionContext(0LL);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  uint64_t v25 = DateTimeResolutionContext.init(with:regionFormat:regionAwareLanguage:timeZone:hemisphere:calendar:date:)( v63,  v16,  v17,  v18,  v58,  v61,  v62);
  (*(void (**)(uint64_t, void, uint64_t))(v64 + 104))( v65,  enum case for DateTimeResolutionSpec.ExpandToType.pointInTime(_:),  v66);
  (*(void (**)(uint64_t, void, uint64_t))(v67 + 104))( v69,  enum case for DateTimeResolutionSpec.DateTimeConvergenceStrategy.future(_:),  v71);
  uint64_t v26 = type metadata accessor for DateTime.DateTimeRange.DefinedDateTimeRange(0LL);
  uint64_t v27 = type metadata accessor for DateTime(0LL);
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type DateTime.DateTimeRange.DefinedDateTimeRange and conformance DateTime.DateTimeRange.DefinedDateTimeRange,  (uint64_t (*)(uint64_t))&type metadata accessor for DateTime.DateTimeRange.DefinedDateTimeRange,  (uint64_t)&protocol conformance descriptor for DateTime.DateTimeRange.DefinedDateTimeRange);
  uint64_t v29 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v26, v27, v28);
  DateTimeResolutionSpec.init(expandToType:dateTimeConvergenceStrategy:overridesForDefinedDateTimeRanges:inferDurationAsInterval:witchingHourRoundOffEnabled:convergeToOperatingHours:)( v65,  v69,  v29,  1LL,  0LL,  1LL);
  uint64_t v30 = v73[3];
  unint64_t v31 = v73[4];
  __swift_project_boxed_opaque_existential_1(v73, v30);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 8))(v79, v25, v75, v30, v31);
  if (v82)
  {
    swift_errorRelease(v82);
    id v32 = 1LL;
  }

  else
  {
    id v32 = 0LL;
  }

  NSString v34 = *(void *)(v0 + 96);
  uint64_t v33 = *(void *)(v0 + 104);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<DateTime>);
  OUTLINED_FUNCTION_40_11(v33, v32, v36, v35);
  outlined init with copy of AppDisplayInfo?( v33,  v34,  &demangling cache variable for type metadata for Recommendation<DateTime>?);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<DateTime>);
  if (__swift_getEnumTagSinglePayload(v34, 1LL, v37) == 1)
  {
    uint64_t v38 = *(void *)(v0 + 304);
    int64_t v39 = *(void *)(v0 + 272);
    uint64_t v40 = *(void *)(v0 + 280);
    uint64_t v41 = v25;
    double v42 = *(void *)(v0 + 168);
    char v43 = *(void *)(v0 + 176);
    uint64_t v45 = *(void *)(v0 + 96);
    char v44 = *(void *)(v0 + 104);
    swift_release(v41);
    OUTLINED_FUNCTION_12_5();
    outlined destroy of Any?(v44, &demangling cache variable for type metadata for Recommendation<DateTime>?);
    OUTLINED_FUNCTION_35_3(v43, *(uint64_t (**)(uint64_t, uint64_t))(v42 + 8));
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
    outlined destroy of Any?(v45, &demangling cache variable for type metadata for Recommendation<DateTime>?);
LABEL_18:
    unint64_t v53 = 1LL;
    goto LABEL_19;
  }

  unint64_t v46 = *(uint64_t (***)(uint64_t, uint64_t))(v37 - 8);
  uint64_t v47 = v46[11](*(void *)(v0 + 96), v37);
  os_log_type_t v48 = *(void *)(v0 + 320);
  uint64_t v49 = *(void *)(v0 + 304);
  uint64_t v80 = *(void *)(v0 + 280);
  uint64_t v83 = *(void *)(v0 + 272);
  char v43 = *(void *)(v0 + 168);
  uint64_t v77 = *(void *)(v0 + 176);
  uint64_t v51 = *(void *)(v0 + 96);
  uint64_t v50 = *(void *)(v0 + 104);
  if (v47 != enum case for Recommendation.confident<A>(_:))
  {
    OUTLINED_FUNCTION_34_0();
    swift_release(v48);
    outlined destroy of Any?(v50, &demangling cache variable for type metadata for Recommendation<DateTime>?);
    OUTLINED_FUNCTION_35_3(v77, *(uint64_t (**)(uint64_t, uint64_t))(v43 + 8));
    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v49, v83);
    OUTLINED_FUNCTION_42_21(v51, v46[1]);
    goto LABEL_18;
  }

  uint64_t v52 = OUTLINED_FUNCTION_42_21(v51, v46[12]);
  dispatch thunk of DateTime.dateComponents.getter(v52);
  OUTLINED_FUNCTION_34_0();
  swift_release(v48);
  OUTLINED_FUNCTION_12_5();
  outlined destroy of Any?(v50, &demangling cache variable for type metadata for Recommendation<DateTime>?);
  OUTLINED_FUNCTION_35_3(v77, *(uint64_t (**)(uint64_t, uint64_t))(v43 + 8));
  (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v49, v83);
  unint64_t v53 = 0LL;
LABEL_19:
  uint64_t v68 = *(void *)(v0 + 216);
  uint64_t v70 = *(void *)(v0 + 208);
  uint64_t v72 = *(void *)(v0 + 184);
  uint64_t v74 = *(void *)(v0 + 176);
  uint64_t v76 = *(void *)(v0 + 152);
  uint64_t v78 = *(void *)(v0 + 128);
  uint64_t v81 = *(void *)(v0 + 104);
  unint64_t v84 = *(void *)(v0 + 96);
  double v54 = OUTLINED_FUNCTION_78_11();
  OUTLINED_FUNCTION_40_11(v43, v53, v55, v54);
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  swift_task_dealloc(v68);
  swift_task_dealloc(v70);
  swift_task_dealloc(v72);
  swift_task_dealloc(v74);
  swift_task_dealloc(v76);
  swift_task_dealloc(v78);
  swift_task_dealloc(v81);
  swift_task_dealloc(v84);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Siri_Nlu_External_UserDialogAct.dateComponentsValue(dateTimeResolving:locationProviding:locale:calendar:timeZone:)( uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 328LL);
  *(void *)(*(void *)v1 + 336LL) = a1;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t Siri_Nlu_External_UserDialogAct.placementValue(locationResolving:locationProviding:locale:timeZone:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  void v5[2] = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Location?);
  v5[7] = OUTLINED_FUNCTION_9_0(*(void *)(v6 - 8));
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<Location>);
  v5[8] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[9] = v8;
  v5[10] = OUTLINED_FUNCTION_4_0(v8);
  v5[11] = OUTLINED_FUNCTION_11_0();
  uint64_t v9 = type metadata accessor for TimeZone(0LL);
  v5[12] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  void v5[13] = v10;
  v5[14] = OUTLINED_FUNCTION_9_0(v10);
  uint64_t v11 = type metadata accessor for Locale(0LL);
  v5[15] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[16] = v12;
  v5[17] = OUTLINED_FUNCTION_4_0(v12);
  v5[18] = OUTLINED_FUNCTION_11_0();
  v5[19] = OUTLINED_FUNCTION_11_0();
  uint64_t v13 = type metadata accessor for LocationResolutionContext(0LL);
  v5[20] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v5[21] = v14;
  v5[22] = OUTLINED_FUNCTION_9_0(v14);
  uint64_t v15 = type metadata accessor for Location(0LL);
  v5[23] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v5[24] = v16;
  v5[25] = OUTLINED_FUNCTION_4_0(v16);
  v5[26] = OUTLINED_FUNCTION_11_0();
  v5[27] = OUTLINED_FUNCTION_11_0();
  v5[28] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t Siri_Nlu_External_UserDialogAct.placementValue(locationResolving:locationProviding:locale:timeZone:)()
{
  uint64_t v1 = *(void **)(v0 + 24);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  uint64_t v4 = *(int **)(v3 + 8);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v0 + 23outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v5;
  *uint64_t v5 = v0;
  v5[1] = Siri_Nlu_External_UserDialogAct.placementValue(locationResolving:locationProviding:locale:timeZone:);
  return v7(v2, v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  os_log_type_t v31;
  _WORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_log_type_t v45;
  _WORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  os_log_s *v56;
  uint64_t v57;
  uint64_t v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  int EnumTagSinglePayload;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  os_log_type_t v76;
  _WORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(uint64_t, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v1 = *(void **)(v0 + 240);
  if (v1)
  {
    if (Siri_Nlu_External_UserDialogAct.executeCommonVoiceCommand.getter()
      && (uint64_t v2 = dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.payload.getter(),
          uint64_t v3 = OUTLINED_FUNCTION_12_5(),
          v2)
      && (uint64_t v4 = dispatch thunk of UsoEntity_common_VoiceCommandPayload.geographicArea.getter(v3), swift_release(v2), v4))
    {
      uint64_t v5 = *(void *)(v0 + 216);
      uint64_t v6 = *(void *)(v0 + 192);
      uint64_t v97 = *(void *)(v0 + 184);
      uint64_t v99 = *(void *)(v0 + 224);
      uint64_t v7 = *(void *)(v0 + 136);
      uint64_t v100 = *(void *)(v0 + 152);
      uint64_t v101 = *(void *)(v0 + 144);
      uint64_t v103 = *(void *)(v0 + 104);
      int64_t v104 = *(void *)(v0 + 112);
      uint64_t v105 = *(void *)(v0 + 96);
      uint64_t v109 = *(void *)(v0 + 176);
      uint64_t v102 = *(void *)(v0 + 40);
      uint64_t v8 = *(void **)(v0 + 16);
      UsoEntity_common_GeographicArea.toLocation()();
      OUTLINED_FUNCTION_12_5();
      uint64_t v9 = v97;
      uint64_t v98 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
      v98(v99, v5, v9);
      OUTLINED_FUNCTION_43_26(v100);
      OUTLINED_FUNCTION_43_26(v101);
      OUTLINED_FUNCTION_43_26(v7);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v103 + 16))(v104, v102, v105);
      [v1 lat];
      uint64_t v11 = v10;
      [v1 lng];
      LocationResolutionContext.init(with:regionFormat:regionAwareLanguage:timeZone:latitude:longitude:)( v100,  v101,  v7,  v104,  v11,  0LL,  v12,  0LL);
      uint64_t v13 = v8[3];
      uint64_t v14 = v8[4];
      __swift_project_boxed_opaque_existential_1(v8, v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 8))(v99, v109, v13, v14);
      uint64_t v17 = *(void **)(v0 + 80);
      uint64_t v18 = *(void *)(v0 + 64);
      uint64_t v19 = *(void *)(v0 + 72);
      (*(void (**)(void *, void, uint64_t))(v19 + 16))(v17, *(void *)(v0 + 88), v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t))(v19 + 88))(v17, v18);
      if (v20 == enum case for Recommendation.confident<A>(_:))
      {
        uint64_t v21 = OUTLINED_FUNCTION_42_22();
        OUTLINED_FUNCTION_56_26(v21, v22, v23, v24, v25, v26, v27, v28, v96, v98);
        if (one-time initialization token for voiceCommands != -1) {
          swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
        }
        uint64_t v29 = OUTLINED_FUNCTION_48();
        uint64_t v30 = (void *)OUTLINED_FUNCTION_84(v29, (uint64_t)static Logger.voiceCommands);
        unint64_t v31 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_31_0(v31))
        {
          id v32 = (_WORD *)OUTLINED_FUNCTION_57_1();
          OUTLINED_FUNCTION_43_5(v32);
          OUTLINED_FUNCTION_33_2(&dword_0, v33, v34, "#InputUtils LocationResolver confidently recommended a location");
          OUTLINED_FUNCTION_1_0(v19);
        }

        uint64_t v118 = *(void *)(v0 + 224);
        uint64_t v35 = *(void *)(v0 + 208);
LABEL_21:
        uint64_t v50 = *(void *)(v0 + 184);
        uint64_t v49 = *(void *)(v0 + 192);
        uint64_t v51 = *(void *)(v0 + 168);
        uint64_t v114 = *(void *)(v0 + 176);
        int64_t v106 = *(void *)(v0 + 160);
        uint64_t v52 = *(void *)(v0 + 72);

        uint64_t v110 = (unint64_t)Location.toCLPlacemark()();
        unint64_t v53 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
        v53(v35, v50);
        OUTLINED_FUNCTION_51_24(*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8));
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v114, v106);
        double v54 = v118;
        char v55 = v50;
LABEL_22:
        v53(v54, v55);
        goto LABEL_8;
      }

      if (v20 == enum case for Recommendation.needsConfirmation<A>(_:))
      {
        uint64_t v30 = *(void **)(v0 + 200);
        uint64_t v36 = OUTLINED_FUNCTION_42_22();
        OUTLINED_FUNCTION_56_26(v36, v37, v38, v39, v40, v41, v42, v43, v96, v98);
        if (one-time initialization token for voiceCommands != -1) {
          swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
        }
        char v44 = OUTLINED_FUNCTION_48();
        OUTLINED_FUNCTION_84(v44, (uint64_t)static Logger.voiceCommands);
        uint64_t v45 = OUTLINED_FUNCTION_82_10();
        if (OUTLINED_FUNCTION_31_0(v45))
        {
          unint64_t v46 = (_WORD *)OUTLINED_FUNCTION_57_1();
          OUTLINED_FUNCTION_43_5(v46);
          OUTLINED_FUNCTION_33_2( &dword_0,  v47,  v48,  "#InputUtils LocationResolver call returned needsConfirmation which is unsupported, returning location");
          OUTLINED_FUNCTION_1_0(v19);
        }

        uint64_t v118 = *(void *)(v0 + 224);
        uint64_t v35 = *(void *)(v0 + 200);
        goto LABEL_21;
      }

      if (v20 == enum case for Recommendation.needsDisambiguation<A>(_:))
      {
        char v56 = *(os_log_s **)(v0 + 80);
        (*(void (**)(os_log_s *, void))(*(void *)(v0 + 72) + 96LL))(v56, *(void *)(v0 + 64));
        unint64_t v57 = *(void *)v56;
        if (one-time initialization token for voiceCommands != -1) {
          swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
        }
        char v58 = OUTLINED_FUNCTION_48();
        OUTLINED_FUNCTION_84(v58, (uint64_t)static Logger.voiceCommands);
        unint64_t v59 = OUTLINED_FUNCTION_82_10();
        if (os_log_type_enabled(v56, v59))
        {
          char v60 = (uint8_t *)OUTLINED_FUNCTION_57_1();
          *(_WORD *)char v60 = 0;
          OUTLINED_FUNCTION_47_1( &dword_0,  v56,  v59,  "#InputUtils LocationResolver call returned needsDisambiguation which is unsupported, picking first location",  v60);
          OUTLINED_FUNCTION_1_0((uint64_t)v60);
        }

        unint64_t v61 = *(void *)(v0 + 184);
        char v62 = *(void *)(v0 + 56);

        specialized Collection.first.getter(v57, v62);
        swift_bridgeObjectRelease(v57);
        int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v62, 1LL, v61);
        uint64_t v64 = *(void *)(v0 + 224);
        uint64_t v115 = *(void *)(v0 + 176);
        uint64_t v119 = *(void *)(v0 + 192);
        uint64_t v65 = *(void *)(v0 + 72);
        uint64_t v66 = *(void *)(v0 + 56);
        if (EnumTagSinglePayload != 1)
        {
          uint64_t v107 = *(void *)(v0 + 224);
          uint64_t v87 = *(void *)(v0 + 184);
          uint64_t v112 = (unint64_t)Location.toCLPlacemark()();

          uint64_t v88 = OUTLINED_FUNCTION_51_24(*(uint64_t (**)(uint64_t, uint64_t))(v65 + 8));
          OUTLINED_FUNCTION_58_20( v88,  v89,  v90,  v91,  v92,  v93,  v94,  v95,  v96,  (uint64_t)v98,  v99,  v100,  v101,  v102,  v103,  v104,  v107,  v112,  v115);
          unint64_t v53 = *(void (**)(uint64_t, uint64_t))(v119 + 8);
          v53(v108, v87);
          double v54 = v66;
          char v55 = v87;
          goto LABEL_22;
        }

        uint64_t v67 = OUTLINED_FUNCTION_51_24(*(uint64_t (**)(uint64_t, uint64_t))(v65 + 8));
        OUTLINED_FUNCTION_58_20( v67,  v68,  v69,  v70,  v71,  v72,  v73,  v74,  v96,  (uint64_t)v98,  v99,  v100,  v101,  v102,  v103,  v104,  v105,  v109,  v115);
        OUTLINED_FUNCTION_42_21(v64, *(uint64_t (**)(uint64_t, uint64_t))(v119 + 8));
        outlined destroy of Any?(v66, &demangling cache variable for type metadata for Location?);
      }

      else
      {
        if (one-time initialization token for voiceCommands != -1) {
          swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
        }
        uint64_t v75 = OUTLINED_FUNCTION_48();
        OUTLINED_FUNCTION_84(v75, (uint64_t)static Logger.voiceCommands);
        uint64_t v76 = OUTLINED_FUNCTION_82_10();
        if (OUTLINED_FUNCTION_31_0(v76))
        {
          uint64_t v77 = (_WORD *)OUTLINED_FUNCTION_57_1();
          OUTLINED_FUNCTION_43_5(v77);
          OUTLINED_FUNCTION_33_2(&dword_0, v78, v79, "#InputUtils LocationResolver could not recommend a location");
          OUTLINED_FUNCTION_1_0(v19);
        }

        uint64_t v80 = *(void *)(v0 + 192);
        uint64_t v116 = *(void *)(v0 + 184);
        uint64_t v120 = *(void *)(v0 + 224);
        uint64_t v81 = *(void *)(v0 + 168);
        uint64_t v82 = *(void *)(v0 + 176);
        uint64_t v83 = *(void *)(v0 + 88);
        uint64_t v111 = *(void *)(v0 + 80);
        unint64_t v85 = *(void *)(v0 + 64);
        unint64_t v84 = *(void *)(v0 + 72);

        uint64_t v86 = *(void (**)(uint64_t, uint64_t))(v84 + 8);
        v86(v83, v85);
        OUTLINED_FUNCTION_35_3(v82, *(uint64_t (**)(uint64_t, uint64_t))(v81 + 8));
        (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v120, v116);
        v86(v111, v85);
      }
    }

    else
    {
    }
  }

  uint64_t v110 = 0LL;
LABEL_8:
  OUTLINED_FUNCTION_75_12();
  uint64_t v113 = *(void *)(v0 + 80);
  uint64_t v117 = *(void *)(v0 + 56);
  swift_task_dealloc(v15);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_40_0();
  swift_task_dealloc(v113);
  swift_task_dealloc(v117);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v110);
}

uint64_t Siri_Nlu_External_UserDialogAct.placementValue(locationResolving:locationProviding:locale:timeZone:)( uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 232LL);
  *(void *)(*(void *)v1 + 24Hasher.init(_seed:)(v3, 0LL) = a1;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

void Siri_Nlu_External_UserDialogAct.personValue(contactResolver:locale:)(void *a1, uint64_t a2)
{
  uint64_t v129 = a1;
  uint64_t v128 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Contact?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_35();
  uint64_t v122 = v5 - v4;
  uint64_t v6 = type metadata accessor for Contact(0LL);
  uint64_t v126 = *(void *)(v6 - 8);
  uint64_t v127 = v6;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_61_6();
  uint64_t v123 = v7;
  __chkstk_darwin(v8);
  uint64_t v125 = (char *)&v114 - v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<Contact>?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_61_6();
  uint64_t v124 = (uint64_t *)v11;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v114 - v13;
  uint64_t v15 = type metadata accessor for ContactResolverConfig(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = OUTLINED_FUNCTION_89_9();
  uint64_t v18 = type metadata accessor for ContactQuery(v17);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v114 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v114 - v23;
  uint64_t v25 = v130;
  uint64_t v26 = Siri_Nlu_External_UserDialogAct.userDialogTask.getter();
  if (!v25)
  {
    uint64_t v119 = v22;
    uint64_t v120 = v2;
    uint64_t v116 = v15;
    uint64_t v117 = v16;
    uint64_t v121 = v24;
    uint64_t v118 = v19;
    uint64_t v115 = v14;
    if (v26)
    {
      uint64_t v130 = 0LL;
      OUTLINED_FUNCTION_24_2();
      static UsoTask_CodegenConverter.convert(task:)(v131);
      OUTLINED_FUNCTION_22_30();
      if (!v131[3])
      {
        outlined destroy of Any?((uint64_t)v131, &demangling cache variable for type metadata for Any?);
        goto LABEL_9;
      }

      uint64_t v27 = OUTLINED_FUNCTION_55_21();
      if ((OUTLINED_FUNCTION_35_6((uint64_t)&v132, (uint64_t)v131, (uint64_t)&type metadata for Any + 8, v27) & 1) != 0)
      {
        uint64_t v28 = dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.payload.getter();
        uint64_t v29 = OUTLINED_FUNCTION_12_5();
        if (v28)
        {
          uint64_t v30 = dispatch thunk of UsoEntity_common_VoiceCommandPayload.agent.getter(v29);
          if (v30)
          {
            uint64_t v31 = CodeGenBase.entity.getter(v30);
            OUTLINED_FUNCTION_12_5();
          }

          else
          {
            uint64_t v31 = 0LL;
          }

          uint64_t v32 = v120;
          uint64_t v33 = (uint64_t)v121;
          NSString v34 = v129;
          uint64_t v35 = v119;
          uint64_t v36 = type metadata accessor for UsoEntity_common_Person(0LL);
          static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)(v131, v31, v36, v36);
          OUTLINED_FUNCTION_128_0();
          uint64_t v37 = v131[0];
          if (v131[0])
          {
            uint64_t v114 = v28;
            uint64_t v38 = swift_retain(v131[0]);
            UsoEntity_common_Person.toContactQuery()(v38);
            OUTLINED_FUNCTION_128_0();
            uint64_t v39 = v118;
            (*(void (**)(uint64_t, void *, uint64_t))(v118 + 32))(v33, v35, v18);
            uint64_t v40 = v34;
            uint64_t v41 = v34[3];
            uint64_t v42 = v18;
            uint64_t v43 = v40[4];
            __swift_project_boxed_opaque_existential_1(v40, v41);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 8))(v128, v41, v43);
            uint64_t v44 = v40[3];
            uint64_t v45 = v40[4];
            uint64_t v119 = __swift_project_boxed_opaque_existential_1(v40, v44);
            uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ContactQuery>);
            uint64_t v47 = *(unsigned __int8 *)(v39 + 80);
            uint64_t v48 = (v47 + 32) & ~v47;
            uint64_t v49 = swift_allocObject(v46, v48 + *(void *)(v39 + 72), v47 | 7);
            uint64_t v50 = v121;
            uint64_t v128 = v37;
            uint64_t v51 = v49;
            *(_OWORD *)(v49 + 16) = xmmword_17E650;
            uint64_t v52 = *(void (**)(uint64_t, char *, uint64_t))(v39 + 16);
            uint64_t v129 = (void *)v42;
            v52(v49 + v48, v50, v42);
            uint64_t v53 = v130;
            uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 16))(v51, v32, v44, v45);
            if (v53)
            {
              OUTLINED_FUNCTION_62_6();
              OUTLINED_FUNCTION_63_11();
              OUTLINED_FUNCTION_69();
              (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v32, v116);
              (*(void (**)(char *, void *))(v39 + 8))(v50, v129);
              goto LABEL_9;
            }

            uint64_t v60 = v54;
            unint64_t v61 = v50;
            OUTLINED_FUNCTION_69();
            uint64_t v62 = (uint64_t)v115;
            specialized Collection.first.getter(v60, (uint64_t)v115);
            OUTLINED_FUNCTION_20();
            uint64_t v63 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<Contact>);
            uint64_t v64 = OUTLINED_FUNCTION_72_12();
            int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v64, v65, (uint64_t)v63);
            uint64_t v67 = v117;
            uint64_t v68 = v114;
            if (EnumTagSinglePayload == 1) {
              goto LABEL_20;
            }
            uint64_t v78 = v124;
            outlined init with copy of AppDisplayInfo?( v62,  (uint64_t)v124,  &demangling cache variable for type metadata for Recommendation<Contact>?);
            uint64_t v79 = (uint64_t (**)(uint64_t, uint64_t))*(v63 - 1);
            int v80 = v79[11]((uint64_t)v78, (uint64_t)v63);
            if (v80 == enum case for Recommendation.confident<A>(_:))
            {
              uint64_t v81 = v67;
              OUTLINED_FUNCTION_29_25(v79[12]);
              uint64_t v82 = v126;
              uint64_t v83 = v127;
              (*(void (**)(char *, uint64_t *, uint64_t))(v126 + 32))(v125, v78, v127);
              if (one-time initialization token for voiceCommands != -1) {
                swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
              }
              uint64_t v84 = OUTLINED_FUNCTION_48();
              OUTLINED_FUNCTION_84(v84, (uint64_t)static Logger.voiceCommands);
              os_log_type_t v85 = OUTLINED_FUNCTION_58();
              BOOL v86 = OUTLINED_FUNCTION_20_9(v85);
              uint64_t v87 = v118;
              if (v86)
              {
                uint64_t v88 = (_WORD *)OUTLINED_FUNCTION_57_1();
                OUTLINED_FUNCTION_43_5(v88);
                OUTLINED_FUNCTION_51_17( &dword_0,  v89,  v90,  "#InputUtils ContactResolver confidently recommended a contact");
                uint64_t v82 = v126;
                uint64_t v83 = v127;
                OUTLINED_FUNCTION_1_0(v68);
              }

              uint64_t v91 = v125;
              Contact.toINPerson()();
              OUTLINED_FUNCTION_62_6();
              OUTLINED_FUNCTION_53_7();
              (*(void (**)(char *, uint64_t))(v82 + 8))(v91, v83);
              OUTLINED_FUNCTION_48_22(*(uint64_t (**)(void, void))(v81 + 8));
              uint64_t v92 = (*(uint64_t (**)(char *, void *))(v87 + 8))(v121, v129);
            }

            else if (v80 == enum case for Recommendation.needsConfirmation<A>(_:))
            {
              OUTLINED_FUNCTION_29_25(v79[12]);
              uint64_t v93 = v123;
              (*(void (**)(uint64_t, uint64_t *, uint64_t))(v126 + 32))(v123, v78, v127);
              if (one-time initialization token for voiceCommands != -1) {
                swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
              }
              uint64_t v94 = OUTLINED_FUNCTION_48();
              OUTLINED_FUNCTION_84(v94, (uint64_t)static Logger.voiceCommands);
              os_log_type_t v95 = OUTLINED_FUNCTION_82_10();
              BOOL v96 = OUTLINED_FUNCTION_23_7(v95);
              uint64_t v97 = v118;
              uint64_t v98 = v120;
              if (v96)
              {
                uint64_t v99 = (_WORD *)OUTLINED_FUNCTION_57_1();
                *uint64_t v99 = 0;
                OUTLINED_FUNCTION_44_17( &dword_0,  v100,  v101,  "#InputUtils ContactResolver call returned needsConfirmation which is unsupported, returning contact");
                uint64_t v102 = (uint64_t)v99;
                uint64_t v93 = v123;
                uint64_t v98 = v120;
                OUTLINED_FUNCTION_1_0(v102);
              }

              Contact.toINPerson()();
              OUTLINED_FUNCTION_62_6();
              OUTLINED_FUNCTION_63_11();
              (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v93, v127);
              (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v98, v116);
              uint64_t v92 = (*(uint64_t (**)(char *, void *))(v97 + 8))(v61, v129);
            }

            else
            {
              if (v80 != enum case for Recommendation.needsDisambiguation<A>(_:))
              {
                OUTLINED_FUNCTION_29_25(v79[1]);
LABEL_20:
                if (one-time initialization token for voiceCommands != -1) {
                  swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
                }
                uint64_t v69 = OUTLINED_FUNCTION_48();
                OUTLINED_FUNCTION_84(v69, (uint64_t)static Logger.voiceCommands);
                os_log_type_t v70 = OUTLINED_FUNCTION_82_10();
                BOOL v71 = OUTLINED_FUNCTION_20_9(v70);
                uint64_t v72 = v118;
                uint64_t v73 = v116;
                if (v71)
                {
                  uint64_t v74 = (_WORD *)OUTLINED_FUNCTION_57_1();
                  OUTLINED_FUNCTION_43_5(v74);
                  OUTLINED_FUNCTION_51_17( &dword_0,  v75,  v76,  "#InputUtils ContactResolver could not recommend a contact");
                  OUTLINED_FUNCTION_1_0(v68);
                }

                OUTLINED_FUNCTION_62_6();

                OUTLINED_FUNCTION_53_7();
                (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v120, v73);
                uint64_t v77 = OUTLINED_FUNCTION_47_23(*(uint64_t (**)(void, void))(v72 + 8));
                OUTLINED_FUNCTION_62_15(v77, &demangling cache variable for type metadata for Recommendation<Contact>?);
                goto LABEL_9;
              }

              OUTLINED_FUNCTION_29_25(v79[12]);
              uint64_t v103 = *v78;
              if (one-time initialization token for voiceCommands != -1) {
                swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
              }
              uint64_t v104 = v67;
              uint64_t v105 = OUTLINED_FUNCTION_48();
              OUTLINED_FUNCTION_84(v105, (uint64_t)static Logger.voiceCommands);
              os_log_type_t v106 = OUTLINED_FUNCTION_82_10();
              BOOL v107 = OUTLINED_FUNCTION_23_7(v106);
              uint64_t v108 = v118;
              if (v107)
              {
                uint64_t v109 = (_WORD *)OUTLINED_FUNCTION_57_1();
                *uint64_t v109 = 0;
                OUTLINED_FUNCTION_44_17( &dword_0,  v110,  v111,  "#InputUtils ContactResolver call returned needsDisambiguation which is unsupported, picking first one");
                OUTLINED_FUNCTION_1_0((uint64_t)v109);
              }

              uint64_t v112 = v122;
              specialized Collection.first.getter(v103, v122);
              swift_bridgeObjectRelease(v103);
              uint64_t v113 = v127;
              if (__swift_getEnumTagSinglePayload(v112, 1LL, v127) == 1)
              {
                OUTLINED_FUNCTION_62_6();
                OUTLINED_FUNCTION_63_11();
                OUTLINED_FUNCTION_48_22(*(uint64_t (**)(void, void))(v104 + 8));
                OUTLINED_FUNCTION_47_23(*(uint64_t (**)(void, void))(v108 + 8));
                outlined destroy of Any?(v112, &demangling cache variable for type metadata for Contact?);
              }

              else
              {
                Contact.toINPerson()();
                OUTLINED_FUNCTION_62_6();
                OUTLINED_FUNCTION_63_11();
                OUTLINED_FUNCTION_48_22(*(uint64_t (**)(void, void))(v104 + 8));
                OUTLINED_FUNCTION_47_23(*(uint64_t (**)(void, void))(v108 + 8));
                uint64_t v92 = (*(uint64_t (**)(uint64_t, uint64_t))(v126 + 8))(v112, v113);
              }
            }

            OUTLINED_FUNCTION_62_15(v92, &demangling cache variable for type metadata for Recommendation<Contact>?);
            goto LABEL_9;
          }

          if (one-time initialization token for voiceCommands != -1) {
            swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
          }
          uint64_t v55 = OUTLINED_FUNCTION_48();
          OUTLINED_FUNCTION_84(v55, (uint64_t)static Logger.voiceCommands);
          os_log_type_t v56 = OUTLINED_FUNCTION_73();
          if (OUTLINED_FUNCTION_20_9(v56))
          {
            unint64_t v57 = (_WORD *)OUTLINED_FUNCTION_57_1();
            OUTLINED_FUNCTION_43_5(v57);
            OUTLINED_FUNCTION_51_17(&dword_0, v58, v59, "Could not create ContactQuery from parse");
            OUTLINED_FUNCTION_1_0(v33);
          }

          OUTLINED_FUNCTION_21_13();
        }
      }
    }
  }

uint64_t Siri_Nlu_External_UserDialogAct.BOOLValue.getter()
{
  uint64_t v2 = type metadata accessor for Google_Protobuf_StringValue(0LL);
  uint64_t v43 = *(void *)(v2 - 8);
  uint64_t v44 = v2;
  __chkstk_darwin(v2);
  uint64_t v3 = OUTLINED_FUNCTION_89_9();
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier(v3);
  uint64_t v45 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_35();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_UsoGraph(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_35();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = type metadata accessor for Siri_Nlu_External_UserStatedTask(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_39_15();
  if ((Siri_Nlu_External_UserDialogAct.hasAccepted.getter() & 1) != 0) {
    return 1LL;
  }
  if ((Siri_Nlu_External_UserDialogAct.hasRejected.getter() & 1) != 0
    || (Siri_Nlu_External_UserDialogAct.hasCancelled.getter() & 1) != 0)
  {
    return 0LL;
  }

  uint64_t v17 = Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
  Siri_Nlu_External_UserStatedTask.task.getter(v17);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v1, v13);
  uint64_t v19 = Siri_Nlu_External_UsoGraph.identifiers.getter(v18);
  OUTLINED_FUNCTION_35_3(v12, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
  uint64_t v20 = *(void *)(v19 + 16);
  if (!v20)
  {
    uint64_t v35 = v19;
LABEL_28:
    swift_bridgeObjectRelease(v35);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v36 = OUTLINED_FUNCTION_48();
    uint64_t v37 = (os_log_s *)OUTLINED_FUNCTION_84(v36, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_31_0(v38))
    {
      uint64_t v15 = 2LL;
      uint64_t v39 = (uint8_t *)OUTLINED_FUNCTION_57_1();
      *(_WORD *)uint64_t v39 = 0;
      OUTLINED_FUNCTION_47_1(&dword_0, v37, (os_log_type_t)v9, "Extracting BOOL value from nlv4 failed", v39);
      OUTLINED_FUNCTION_1_0((uint64_t)v39);
    }

    else
    {

      return 2LL;
    }

    return v15;
  }

  LOBYTE(v9) = v44;
  unint64_t v21 = v19 + ((*(unsigned __int8 *)(v45 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80));
  uint64_t v41 = *(void *)(v45 + 72);
  uint64_t v42 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v45 + 16);
  uint64_t v40 = v19;
  while (1)
  {
    uint64_t v22 = v42(v7, v21, v4);
    uint64_t v23 = Siri_Nlu_External_UsoEntityIdentifier.namespace.getter(v22);
    uint64_t v24 = Google_Protobuf_StringValue.value.getter(v23);
    uint64_t v26 = v25;
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v0, v44);
    if (v24 == 0xD000000000000018LL && v26 == 0x8000000000194CA0LL)
    {
      uint64_t v27 = swift_bridgeObjectRelease(0x8000000000194CA0LL);
    }

    else
    {
      _stringCompareWithSmolCheck(_:_:expecting:)(v24, v26, 0xD000000000000018LL, 0x8000000000194CA0LL, 0LL);
      uint64_t v27 = OUTLINED_FUNCTION_53_22();
      if ((v24 & 1) == 0)
      {
        OUTLINED_FUNCTION_12_33();
        goto LABEL_25;
      }
    }

    uint64_t v28 = Siri_Nlu_External_UsoEntityIdentifier.value.getter(v27);
    if (v28 == 0x747065636361LL && v29 == 0xE600000000000000LL)
    {
      swift_bridgeObjectRelease(0xE600000000000000LL);
LABEL_34:
      OUTLINED_FUNCTION_12_33();
      swift_bridgeObjectRelease(v40);
      return 1LL;
    }

    OUTLINED_FUNCTION_74_15(v28, v29, 0x747065636361LL);
    uint64_t v31 = OUTLINED_FUNCTION_53_22();
    if ((v24 & 1) != 0) {
      goto LABEL_34;
    }
    uint64_t v32 = Siri_Nlu_External_UsoEntityIdentifier.value.getter(v31);
    if (v32 == 0x7463656A6572LL && v33 == 0xE600000000000000LL) {
      break;
    }
    OUTLINED_FUNCTION_74_15(v32, v33, 0x7463656A6572LL);
    OUTLINED_FUNCTION_53_22();
    OUTLINED_FUNCTION_12_33();
    if ((v24 & 1) != 0) {
      goto LABEL_36;
    }
LABEL_25:
    v21 += v41;
    if (!--v20)
    {
      uint64_t v35 = v40;
      goto LABEL_28;
    }
  }

  swift_bridgeObjectRelease(0xE600000000000000LL);
  OUTLINED_FUNCTION_12_33();
LABEL_36:
  swift_bridgeObjectRelease(v40);
  return 0LL;
}

uint64_t Siri_Nlu_External_UserDialogAct.measurementValue(locale:)(uint64_t a1)
{
  uint64_t v4 = Siri_Nlu_External_UserDialogAct.executeCommonVoiceCommand.getter();
  if (v2) {
    return v1;
  }
  if (v4)
  {
    uint64_t v5 = swift_retain(v4);
    uint64_t v1 = dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.payload.getter(v5);
    uint64_t v6 = OUTLINED_FUNCTION_45_5();
    if (!v1) {
      goto LABEL_14;
    }
    uint64_t v7 = dispatch thunk of UsoEntity_common_VoiceCommandPayload.measurement.getter(v6);
    uint64_t v8 = OUTLINED_FUNCTION_12_5();
    if (!v7) {
      goto LABEL_14;
    }
    uint64_t v1 = v7;
    uint64_t v9 = dispatch thunk of UsoEntity_common_Measurement.components.getter(v8);
    if (!v9)
    {
LABEL_13:
      OUTLINED_FUNCTION_45_5();
LABEL_14:
      swift_release();
      goto LABEL_15;
    }

    uint64_t v1 = v9;
    if ((unint64_t)v9 >> 62)
    {
      if (v9 >= 0) {
        v9 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      if (_CocoaArrayWrapper.endIndex.getter(v9))
      {
LABEL_8:
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, (v1 & 0xC000000000000001LL) == 0);
        if ((v1 & 0xC000000000000001LL) != 0)
        {
          uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v1);
        }

        else
        {
          uint64_t v10 = *(void *)(v1 + 32);
          swift_retain(v10);
        }

        uint64_t v11 = OUTLINED_FUNCTION_20();
        uint64_t v1 = v10;
        dispatch thunk of CodeGenListEntry.entry.getter(&v18, v11);
        OUTLINED_FUNCTION_128_0();
        if (v18)
        {
          uint64_t v1 = UsoEntity_common_MeasurementComponent.measurementValue(locale:)(a1);
          OUTLINED_FUNCTION_45_5();
          OUTLINED_FUNCTION_21_13();
          swift_release();
          return v1;
        }

        goto LABEL_13;
      }
    }

    else if (*(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFFF8LL)))
    {
      goto LABEL_8;
    }

    OUTLINED_FUNCTION_45_5();
    OUTLINED_FUNCTION_21_13();
    OUTLINED_FUNCTION_20();
  }

id Siri_Nlu_External_UserDialogAct.currencyValue(locale:)()
{
  uint64_t v5 = OUTLINED_FUNCTION_89_9();
  uint64_t v6 = type metadata accessor for UsoIdentifier(v5);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_35();
  uint64_t v10 = v9 - v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_39_15();
  uint64_t v12 = Siri_Nlu_External_UserDialogAct.executeCommonVoiceCommand.getter();
  if (!v1)
  {
    if (v12)
    {
      uint64_t v13 = swift_retain(v12);
      id v0 = (id)dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.payload.getter(v13);
      uint64_t v14 = OUTLINED_FUNCTION_45_5();
      if (v0)
      {
        uint64_t v15 = dispatch thunk of UsoEntity_common_VoiceCommandPayload.currency.getter(v14);
        uint64_t v16 = OUTLINED_FUNCTION_12_5();
        if (v15)
        {
          id v0 = (id)v15;
          if (dispatch thunk of UsoEntity_common_CurrencyAmount.currency.getter(v16))
          {
            uint64_t v61 = v2;
            id v0 = (id)v15;
            uint64_t v17 = dispatch thunk of UsoEntity_common_CurrencyAmount.amount.getter();
            if (v17)
            {
              id v0 = (id)v17;
              UsoEntity_common_Number.doubleValue.getter(v17);
              double v60 = v18;
              uint64_t v2 = v19;
              OUTLINED_FUNCTION_12_5();
              if ((v2 & 1) == 0)
              {
                uint64_t v20 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)( 1701667182LL,  0xE400000000000000LL);
                if (v20)
                {
                  uint64_t v21 = v20;
                  uint64_t v22 = *(void *)(v20 + 16);
                  if (v22)
                  {
                    uint64_t v21 = v20
                        + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
                    uint64_t v62 = *(void *)(v7 + 72);
                    uint64_t v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
                    uint64_t v59 = v20;
                    swift_bridgeObjectRetain(v20);
                    while (1)
                    {
                      uint64_t v23 = v63(v10, v21, v6);
                      uint64_t v24 = UsoIdentifier.namespace.getter(v23);
                      if (v25)
                      {
                        if (v24 == 0x79636E6572727563LL && v25 == 0xEC00000074696E55LL)
                        {
                          OUTLINED_FUNCTION_76_10();
                          goto LABEL_33;
                        }

                        char v27 = _stringCompareWithSmolCheck(_:_:expecting:)( v24,  v25,  0x79636E6572727563LL,  0xEC00000074696E55LL,  0LL);
                        OUTLINED_FUNCTION_20();
                        if ((v27 & 1) != 0) {
                          break;
                        }
                      }

                      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
                      v21 += v62;
                      if (!--v22)
                      {
                        OUTLINED_FUNCTION_76_10();
                        goto LABEL_19;
                      }
                    }

                    uint64_t v21 = v59;
LABEL_33:
                    OUTLINED_FUNCTION_20();
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v3, v10, v6);
                    uint64_t v28 = 0LL;
                  }

                  else
                  {
LABEL_19:
                    uint64_t v28 = 1LL;
                  }

                  __swift_storeEnumTagSinglePayload(v3, v28, 1LL, v6);
                  swift_bridgeObjectRelease(v21);
                  uint64_t v35 = OUTLINED_FUNCTION_72_12();
                  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v35, v36, v6);
                  if ((_DWORD)EnumTagSinglePayload != 1)
                  {
                    uint64_t v38 = UsoIdentifier.value.getter(EnumTagSinglePayload);
                    unint64_t v39 = v40;
                    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
LABEL_38:
                    if (one-time initialization token for voiceCommands != -1) {
                      swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
                    }
                    uint64_t v41 = OUTLINED_FUNCTION_48();
                    uint64_t v42 = (os_log_s *)__swift_project_value_buffer(v41, (uint64_t)static Logger.voiceCommands);
                    uint64_t v43 = swift_bridgeObjectRetain_n(v39, 2LL);
                    Logger.logObject.getter(v43);
                    os_log_type_t v44 = OUTLINED_FUNCTION_58();
                    if (os_log_type_enabled(v42, v44))
                    {
                      uint64_t v45 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                      uint64_t v64 = swift_slowAlloc(32LL, -1LL);
                      uint64_t v66 = v64;
                      *(_DWORD *)uint64_t v45 = 136315138;
                      if (v39) {
                        uint64_t v46 = v38;
                      }
                      else {
                        uint64_t v46 = 0x296C696E28LL;
                      }
                      if (v39) {
                        unint64_t v47 = v39;
                      }
                      else {
                        unint64_t v47 = 0xE500000000000000LL;
                      }
                      swift_bridgeObjectRetain(v39);
                      uint64_t v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v66);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v45 + 4);
                      OUTLINED_FUNCTION_69_10();
                      swift_bridgeObjectRelease(v47);
                      _os_log_impl(&dword_0, v42, v44, "Currency parser received unit with identifier: %s", v45, 0xCu);
                      swift_arrayDestroy(v64, 1LL, (char *)&type metadata for Any + 8);
                      OUTLINED_FUNCTION_1_0(v64);
                      OUTLINED_FUNCTION_1_0((uint64_t)v45);
                    }

                    else
                    {

                      OUTLINED_FUNCTION_69_10();
                    }

                    if (v39)
                    {
                      swift_bridgeObjectRetain(v39);
                      v48._uint64_t countAndFlagsBits = 0x756F756769626D61LL;
                      v48._unint64_t object = (void *)0xE900000000000073LL;
                      Swift::Bool v49 = String.hasPrefix(_:)(v48);
                      OUTLINED_FUNCTION_2_6();
                      if (!v49)
                      {
                        Swift::String v54 = String.uppercased()();
                        uint64_t countAndFlagsBits = v54._countAndFlagsBits;
                        unint64_t object = (unint64_t)v54._object;
                        OUTLINED_FUNCTION_2_6();
                        goto LABEL_56;
                      }

                      uint64_t v50 = OUTLINED_FUNCTION_2_6();
                      Locale.currency.getter(v50);
                      uint64_t v51 = type metadata accessor for Locale.Currency(0LL);
                      if (__swift_getEnumTagSinglePayload(v61, 1LL, v51) != 1)
                      {
                        uint64_t countAndFlagsBits = Locale.Currency.identifier.getter();
                        unint64_t object = v55;
                        (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8LL))(v61, v51);
                        goto LABEL_56;
                      }

                      outlined destroy of Any?(v61, &demangling cache variable for type metadata for Locale.Currency?);
                    }

                    uint64_t countAndFlagsBits = 0LL;
                    unint64_t object = 0xE000000000000000LL;
LABEL_56:
                    uint64_t v56 = HIBYTE(object) & 0xF;
                    if ((object & 0x2000000000000000LL) == 0) {
                      uint64_t v56 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
                    }
                    if (v56)
                    {
                      id v57 = [objc_allocWithZone(NSDecimalNumber) initWithDouble:v60];
                      id v58 = objc_allocWithZone(&OBJC_CLASS___INCurrencyAmount);
                      id v0 = @nonobjc INCurrencyAmount.init(amount:currencyCode:)(v57);
                      swift_release();
                      swift_release();
                      OUTLINED_FUNCTION_45_5();
                      return v0;
                    }

                    swift_release();
                    swift_release();
                    OUTLINED_FUNCTION_45_5();
                    OUTLINED_FUNCTION_20();
                    return 0LL;
                  }

                  OUTLINED_FUNCTION_62_15( EnumTagSinglePayload,  &demangling cache variable for type metadata for UsoIdentifier?);
                }

                uint64_t v38 = 0LL;
                unint64_t v39 = 0LL;
                goto LABEL_38;
              }
            }

            OUTLINED_FUNCTION_45_5();
          }

          swift_release();
        }
      }

      swift_release();
    }

    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v29 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v29, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v30 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_20_9(v30))
    {
      uint64_t v31 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_43_5(v31);
      OUTLINED_FUNCTION_51_17(&dword_0, v32, v33, "Unable to extract currency information from parse");
      OUTLINED_FUNCTION_1_0(v2);
    }

    return 0LL;
  }

  return v0;
}

uint64_t Siri_Nlu_External_UserDialogAct.doubleValue.getter()
{
  return Siri_Nlu_External_UserDialogAct.intValue.getter((uint64_t (*)(uint64_t))UsoEntity_common_Number.doubleValue.getter);
}

uint64_t Siri_Nlu_External_UserDialogAct.intValue.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v4 = Siri_Nlu_External_UserDialogAct.userDialogTask.getter();
  if (!v2)
  {
    uint64_t v1 = (uint64_t)v4;
    if (v4)
    {
      uint64_t v5 = OUTLINED_FUNCTION_24_2();
      OUTLINED_FUNCTION_80_10(v5, v6);
      uint64_t v7 = OUTLINED_FUNCTION_22_30();
      if (!v17)
      {
        OUTLINED_FUNCTION_36_23(v7, &demangling cache variable for type metadata for Any?, v8, v9);
        return 0LL;
      }

      uint64_t v10 = OUTLINED_FUNCTION_55_21();
      uint64_t v1 = dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.payload.getter();
      uint64_t v13 = OUTLINED_FUNCTION_53_7();
      if (v1)
      {
        uint64_t v14 = dispatch thunk of UsoEntity_common_VoiceCommandPayload.number.getter(v13);
        uint64_t v15 = OUTLINED_FUNCTION_12_5();
        if (v14)
        {
          uint64_t v1 = a1(v15);
          OUTLINED_FUNCTION_53_7();
          return v1;
        }

        return 0LL;
      }
    }
  }

  return v1;
}

SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Siri_Nlu_External_UserDialogAct.paginationValue()()
{
  result.int value = Siri_Nlu_External_UserDialogAct.userDialogTask.getter();
  if (!v0)
  {
    static UsoTask_CodegenConverter.convert(task:)(v52);
    uint64_t v2 = OUTLINED_FUNCTION_12_5();
    OUTLINED_FUNCTION_79_8(v2, v3, &demangling cache variable for type metadata for Any?, v4, v5);
    if (v51)
    {
      uint64_t v9 = type metadata accessor for UsoTask_skipForward_uso_NoEntity(0LL);
      uint64_t v12 = OUTLINED_FUNCTION_9_39(v9, v10, (uint64_t)&type metadata for Any + 8, v9, v11);
      if ((v12 & 1) != 0)
      {
        OUTLINED_FUNCTION_77_14(v12, v13, v14, v15, v16, v17, v18, v19, v48, v49);
        outlined destroy of Any?((uint64_t)v52, &demangling cache variable for type metadata for Any?);
        return 0;
      }
    }

    else
    {
      OUTLINED_FUNCTION_36_23(v6, &demangling cache variable for type metadata for Any?, v7, v8);
    }

    OUTLINED_FUNCTION_79_8(v12, v13, &demangling cache variable for type metadata for Any?, v15, v16);
    if (v51)
    {
      uint64_t v23 = type metadata accessor for UsoTask_skipBackward_uso_NoEntity(0LL);
      uint64_t v26 = OUTLINED_FUNCTION_9_39(v23, v24, (uint64_t)&type metadata for Any + 8, v23, v25);
      if ((v26 & 1) != 0)
      {
        OUTLINED_FUNCTION_77_14(v26, v27, v28, v29, v30, v31, v32, v33, v48, v49);
        outlined destroy of Any?((uint64_t)v52, &demangling cache variable for type metadata for Any?);
        return (SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination_optional)1;
      }
    }

    else
    {
      OUTLINED_FUNCTION_36_23(v20, &demangling cache variable for type metadata for Any?, v21, v22);
    }

    uint64_t v34 = outlined init with take of Any?((uint64_t)v52, (uint64_t)v50);
    if (v51)
    {
      uint64_t v37 = type metadata accessor for UsoTask_repeat_uso_NoEntity(0LL);
      uint64_t v40 = OUTLINED_FUNCTION_9_39(v37, v38, (uint64_t)&type metadata for Any + 8, v37, v39);
      if ((v40 & 1) != 0)
      {
        OUTLINED_FUNCTION_77_14(v40, v41, v42, v43, v44, v45, v46, v47, v48, v49);
        return (SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination_optional)2;
      }
    }

    else
    {
      OUTLINED_FUNCTION_36_23(v34, &demangling cache variable for type metadata for Any?, v35, v36);
    }

    return (SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination_optional)3;
  }

  return result;
}

uint64_t Siri_Nlu_External_UserDialogAct.dateValue(dateTimeResolving:locationProviding:locale:calendar:timeZone:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a1;
  v5[4] = a5;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  uint64_t v10 = OUTLINED_FUNCTION_9_0(*(void *)(v9 - 8));
  v5[5] = v10;
  uint64_t v11 = (void *)swift_task_alloc(dword_21D59C);
  v5[6] = v11;
  void *v11 = v5;
  v11[1] = Siri_Nlu_External_UserDialogAct.dateValue(dateTimeResolving:locationProviding:locale:calendar:timeZone:);
  return Siri_Nlu_External_UserDialogAct.dateComponentsValue(dateTimeResolving:locationProviding:locale:calendar:timeZone:)( v10,  a2,  a3,  a4);
}

uint64_t Siri_Nlu_External_UserDialogAct.dateValue(dateTimeResolving:locationProviding:locale:calendar:timeZone:)()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48LL);
  *(void *)(*(void *)v1 + 56LL) = v0;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 24);
  *(void *)(swift_task_alloc(32LL) + 16) = v2;
  _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10Foundation14DateComponentsV_s5NeverOAD0E0VTg5( (void (*)(char *))partial apply for closure #1 in Siri_Nlu_External_UserDialogAct.dateValue(dateTimeResolving:locationProviding:locale:calendar:timeZone:),  v3);
  outlined destroy of Any?(v1, &demangling cache variable for type metadata for DateComponents?);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_40_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Siri_Nlu_External_UserDialogAct.entityValue.getter()
{
  uint64_t v3 = Siri_Nlu_External_UserDialogAct.userDialogTask.getter();
  if (!v1)
  {
    uint64_t v0 = (uint64_t)v3;
    if (v3)
    {
      uint64_t v4 = OUTLINED_FUNCTION_24_2();
      OUTLINED_FUNCTION_80_10(v4, v5);
      uint64_t v6 = OUTLINED_FUNCTION_22_30();
      if (v19)
      {
        uint64_t v9 = OUTLINED_FUNCTION_55_21();
        uint64_t v12 = OUTLINED_FUNCTION_9_39(v9, v10, (uint64_t)&type metadata for Any + 8, v9, v11);
        if ((v12 & 1) != 0)
        {
          uint64_t v13 = dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.payload.getter(v12);
          uint64_t v14 = OUTLINED_FUNCTION_12_5();
          if (v13)
          {
            uint64_t v15 = dispatch thunk of UsoEntity_common_VoiceCommandPayload.appEntity.getter(v14);
            if (v15)
            {
              uint64_t v16 = v15;
              uint64_t v17 = dispatch thunk of UsoEntity_common_AppEntity.type.getter();
              if (v17)
              {
                uint64_t v0 = v17;
                dispatch thunk of UsoEntity_common_AppEntityType.name.getter();
                OUTLINED_FUNCTION_84_15();
                OUTLINED_FUNCTION_128_0();
                if (v2)
                {
                  OUTLINED_FUNCTION_53_7();
LABEL_15:
                  swift_release();
                  return v0;
                }
              }

              uint64_t v0 = v16;
              dispatch thunk of UsoEntity_common_AppEntity.name.getter();
              OUTLINED_FUNCTION_84_15();
              uint64_t v15 = OUTLINED_FUNCTION_21_13();
              if (v2) {
                goto LABEL_15;
              }
            }

            uint64_t v0 = v13;
            dispatch thunk of UsoEntity_common_VoiceCommandPayload.stringValue.getter(v15);
            OUTLINED_FUNCTION_84_15();
            goto LABEL_15;
          }
        }
      }

      else
      {
        OUTLINED_FUNCTION_36_23(v6, &demangling cache variable for type metadata for Any?, v7, v8);
      }

      return 0LL;
    }
  }

  return v0;
}

void Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:)(int64_t a1)
{
  uint64_t v5 = type metadata accessor for UsoEntity_common_ListPosition.DefinedValues(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v40 - v10;
  uint64_t v12 = Siri_Nlu_External_UserDialogAct.userDialogTask.getter();
  if (v1) {
    goto LABEL_17;
  }
  uint64_t v13 = v12;
  static UsoTask_CodegenConverter.convert(task:)(v41);
  OUTLINED_FUNCTION_12_5();
  if (!v41[3])
  {
    outlined destroy of Any?((uint64_t)v41, &demangling cache variable for type metadata for Any?);
    goto LABEL_10;
  }

  uint64_t v14 = type metadata accessor for UsoTask_noVerb_uso_NoEntity(0LL);
  if ((OUTLINED_FUNCTION_35_6((uint64_t)&v42, (uint64_t)v41, (uint64_t)&type metadata for Any + 8, v14) & 1) == 0)
  {
LABEL_10:
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v24 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v24, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v25 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_20_9(v25))
    {
      uint64_t v26 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_43_5(v26);
      OUTLINED_FUNCTION_51_17(&dword_0, v27, v28, "#NLUUserDialogActInputUtils task is not UsoTask_noVerb_uso_NoEntity");
      OUTLINED_FUNCTION_1_0((uint64_t)v11);
    }

    goto LABEL_17;
  }

  uint64_t v15 = v42;
  uint64_t v16 = OUTLINED_FUNCTION_24_2();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter(v41, v16);
  v40[1] = v15;
  uint64_t v17 = OUTLINED_FUNCTION_12_5();
  if (v41[0] && (uint64_t v18 = dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter(v17), v19 = swift_release(), v18))
  {
    dispatch thunk of UsoEntity_common_ListPosition.definedValue.getter(v19);
    OUTLINED_FUNCTION_12_5();
    uint64_t v20 = OUTLINED_FUNCTION_72_12();
    uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v20, v21, v5);
    if ((_DWORD)EnumTagSinglePayload != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v11, v2, v5);
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
      int v23 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v9, v5);
      if (v23 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Fourth(_:)) {
        goto LABEL_57;
      }
      int v31 = v23;
      if (v23 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Second(_:)
        || v23 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Beginning(_:)
        || v23 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_TwentyFourth(_:)
        || v23 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Seventeenth(_:)
        || v23 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Eighth(_:))
      {
        goto LABEL_57;
      }

      if (v23 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_ThirdToLast(_:))
      {
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
        uint64_t v33 = OUTLINED_FUNCTION_23_4(v32);
        *(_OWORD *)(v33 + 16) = xmmword_17E650;
        unint64_t v34 = a1 - 3;
        if (__OFSUB__(a1, 3LL))
        {
          __break(1u);
LABEL_53:
          uint64_t v37 = swift_allocObject(v33, 48LL, 7LL);
          *(_OWORD *)(v37 + 16) = xmmword_17E660;
          *(void *)(v37 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = a1 / 2 - 1;
          *(void *)(v37 + 40) = a1 / 2;
          goto LABEL_57;
        }
      }

      else
      {
        if (v23 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Sixth(_:)
          || v23 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Nineteenth(_:)
          || v23 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_TwentyFifth(_:)
          || v23 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Ninth(_:)
          || v23 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Eleventh(_:))
        {
          goto LABEL_57;
        }

        if (v23 != enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_End(_:)) {
          goto LABEL_40;
        }
        while (1)
        {
          uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t v33 = OUTLINED_FUNCTION_23_4(v35);
          *(_OWORD *)(v33 + 16) = xmmword_17E650;
          unint64_t v34 = a1 - 1;
          if (!__OFSUB__(a1, 1LL)) {
            break;
          }
          __break(1u);
LABEL_40:
          if (v31 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Fourteenth(_:)) {
            goto LABEL_57;
          }
          if (v31 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_SecondToLast(_:))
          {
            uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
            uint64_t v33 = OUTLINED_FUNCTION_23_4(v36);
            *(_OWORD *)(v33 + 16) = xmmword_17E650;
            unint64_t v34 = a1 - 2;
            if (!__OFSUB__(a1, 2LL)) {
              break;
            }
            __break(1u);
          }

          if (v31 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_TwentyFirst(_:)) {
            goto LABEL_57;
          }
          if (v31 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Middle(_:))
          {
            uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
            if ((a1 & 0x8000000000000001LL) != 1) {
              goto LABEL_53;
            }
            uint64_t v33 = OUTLINED_FUNCTION_23_4(v33);
            *(_OWORD *)(v33 + 16) = xmmword_17E650;
            unint64_t v34 = (unint64_t)a1 >> 1;
            break;
          }

          if (v31 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Thirteenth(_:)) {
            goto LABEL_57;
          }
          if (v31 != enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Last(_:))
          {
            if (v31 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_TwentySecond(_:)
              || v31 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Previous(_:)
              || v31 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Fifteenth(_:)
              || v31 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Current(_:)
              || v31 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Twentieth(_:)
              || v31 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Fifth(_:)
              || v31 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Sixteenth(_:)
              || v31 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_First(_:)
              || v31 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Seventh(_:)
              || v31 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Eighteenth(_:)
              || v31 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_TwentyThird(_:)
              || v31 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Twelfth(_:)
              || v31 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Third(_:)
              || v31 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Next(_:))
            {
              goto LABEL_57;
            }

            int v38 = enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Tenth(_:);
            OUTLINED_FUNCTION_40_18();
            uint64_t v39 = *(void (**)(char *, uint64_t))(v6 + 8);
            v39(v11, v5);
            if (v31 != v38) {
              v39(v9, v5);
            }
            goto LABEL_17;
          }
        }
      }

      *(void *)(v33 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v34;
LABEL_57:
      OUTLINED_FUNCTION_40_18();
      OUTLINED_FUNCTION_0_48();
      goto LABEL_17;
    }
  }

  else
  {
    uint64_t v29 = OUTLINED_FUNCTION_72_12();
    uint64_t EnumTagSinglePayload = __swift_storeEnumTagSinglePayload(v29, v30, 1LL, v5);
  }

  OUTLINED_FUNCTION_62_15( EnumTagSinglePayload,  &demangling cache variable for type metadata for UsoEntity_common_ListPosition.DefinedValues?);
  OUTLINED_FUNCTION_40_18();
LABEL_17:
  OUTLINED_FUNCTION_13_8();
}

uint8_t *Siri_Nlu_External_UserDialogAct.executeCommonVoiceCommand.getter()
{
  SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination_optional result = Siri_Nlu_External_UserDialogAct.userDialogTask.getter();
  uint64_t v2 = result;
  if (!v0)
  {
    if (result)
    {
      swift_retain(result);
      static UsoTask_CodegenConverter.convert(task:)(v5);
      swift_release_n(v2, 2LL);
      if (v5[3])
      {
        uint64_t v3 = type metadata accessor for UsoTask_execute_common_VoiceCommand(0LL);
        else {
          return 0LL;
        }
      }

      outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for Any?);
    }

    return 0LL;
  }

  return result;
}

uint8_t *Siri_Nlu_External_UserDialogAct.userDialogTask.getter()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v5 = *(uint8_t **)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter(v6) & 1) == 0)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    uint64_t v21 = __swift_project_value_buffer(v20, (uint64_t)static Logger.voiceCommands);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v22, v23)) {
      goto LABEL_11;
    }
    uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v24 = 0;
    os_log_type_t v25 = "NLUUserDialogAct does not have a user stated task";
    goto LABEL_10;
  }

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
  uint64_t v11 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v5 + 2))(v8, v3, v4);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v38 = swift_slowAlloc(32LL, -1LL);
    uint64_t v43 = v38;
    uint64_t v40 = v1;
    *(_DWORD *)uint64_t v14 = 136315138;
    uint64_t v36 = v14 + 4;
    uint64_t v37 = v14;
    type metadata accessor for SiriNLUTypesPrintUtils(0LL);
    uint64_t v39 = v10;
    v42[2] = type metadata accessor for Siri_Nlu_External_UserStatedTask(0LL);
    lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type Siri_Nlu_External_UserStatedTask and conformance Siri_Nlu_External_UserStatedTask,  (uint64_t (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_UserStatedTask,  (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_UserStatedTask);
    v42[3] = v15;
    __swift_allocate_boxed_opaque_existential_1(&v41);
    Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
    uint64_t v16 = static SiriNLUTypesPrintUtils.printableProtoObject(object:)(&v41);
    unint64_t v18 = v17;
    __swift_destroy_boxed_opaque_existential_1Tm(&v41);
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v43);
    uint64_t v2 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v36);
    swift_bridgeObjectRelease(v18);
    (*((void (**)(char *, uint64_t))v5 + 1))(v8, v4);
    uint64_t v5 = v37;
    _os_log_impl(&dword_0, v12, v13, "UserStatedTask: %s", v37, 0xCu);
    uint64_t v19 = v38;
    swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    (*((void (**)(char *, uint64_t))v5 + 1))(v8, v4);
  }

  uint64_t v26 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)(v3);
  if (!v2)
  {
    uint64_t v27 = v26;
    if ((unint64_t)v26 >> 62)
    {
      if (v26 < 0) {
        uint64_t v33 = v26;
      }
      else {
        uint64_t v33 = v26 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v26);
      uint64_t v34 = _CocoaArrayWrapper.endIndex.getter(v33);
      swift_bridgeObjectRelease(v27);
      if (v34)
      {
        swift_bridgeObjectRetain(v27);
        uint64_t v28 = _CocoaArrayWrapper.endIndex.getter(v33);
        uint64_t v26 = swift_bridgeObjectRelease(v27);
        goto LABEL_16;
      }
    }

    else
    {
      uint64_t v28 = *(void *)((char *)&dword_10 + (v26 & 0xFFFFFFFFFFFFF8LL));
      if (v28)
      {
LABEL_16:
        if (v28 >= 2)
        {
          uint64_t v29 = (os_log_s *)Logger.logObject.getter(v26);
          os_log_type_t v30 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v29, v30))
          {
            int v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)int v31 = 0;
            _os_log_impl(&dword_0, v29, v30, "More than one task found in UDA", v31, 2u);
            swift_slowDealloc(v31, -1LL, -1LL);
          }
        }

        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, (v27 & 0xC000000000000001LL) == 0);
        if ((v27 & 0xC000000000000001LL) != 0)
        {
          uint64_t v5 = (uint8_t *)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v27);
        }

        else
        {
          uint64_t v5 = *(uint8_t **)(v27 + 32);
          swift_retain(v5);
        }

        swift_bridgeObjectRelease(v27);
        return v5;
      }
    }

    uint64_t v35 = swift_bridgeObjectRelease(v27);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v22, v23))
    {
LABEL_11:

      return 0LL;
    }

    uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v24 = 0;
    os_log_type_t v25 = "No tasks found in UDA";
LABEL_10:
    _os_log_impl(&dword_0, v22, v23, v25, v24, 2u);
    swift_slowDealloc(v24, -1LL, -1LL);
    goto LABEL_11;
  }

  return v5;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in Siri_Nlu_External_UserDialogAct.dateValue(dateTimeResolving:locationProviding:locale:calendar:timeZone:)()
{
  return Calendar.date(from:)();
}

uint64_t OUTLINED_FUNCTION_0_48()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_9_39(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6 = va_arg(va1, void);
  return swift_dynamicCast((uint64_t *)va, va1, a3, a4, 6LL);
}

uint64_t OUTLINED_FUNCTION_12_33()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 88) + 8LL))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_22_30()
{
  return swift_release_n(v0, 2LL);
}

uint64_t OUTLINED_FUNCTION_29_25@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

void OUTLINED_FUNCTION_36_23(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t OUTLINED_FUNCTION_42_22()
{
  return (*(uint64_t (**)(void, void))(v0[9] + 96LL))(v0[10], v0[8]);
}

uint64_t OUTLINED_FUNCTION_43_26(uint64_t a1)
{
  return v1(a1, v3, v2);
}

void OUTLINED_FUNCTION_44_17(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_45_21(uint64_t a1)
{
  return v1(a1, v3, v2);
}

uint64_t OUTLINED_FUNCTION_47_23@<X0>(uint64_t (*a1)(void, void)@<X8>)
{
  return a1(*(void *)(v1 - 200), *(void *)(v1 - 136));
}

uint64_t OUTLINED_FUNCTION_48_22@<X0>(uint64_t (*a1)(void, void)@<X8>)
{
  return a1(*(void *)(v1 - 208), *(void *)(v1 - 240));
}

uint64_t OUTLINED_FUNCTION_51_24@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_53_22()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t OUTLINED_FUNCTION_55_21()
{
  return type metadata accessor for UsoTask_execute_common_VoiceCommand(0LL);
}

uint64_t OUTLINED_FUNCTION_56_26( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, uint64_t, uint64_t))
{
  return a10(v10, v12, v11);
}

uint64_t OUTLINED_FUNCTION_58_20( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(a19, v20);
}

void OUTLINED_FUNCTION_62_15(uint64_t a1, uint64_t *a2)
{
}

uint64_t OUTLINED_FUNCTION_63_11()
{
  return swift_release(*(void *)(v0 - 256));
}

uint64_t OUTLINED_FUNCTION_69_10()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t OUTLINED_FUNCTION_72_12()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_74_15(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, 0xE600000000000000LL, 0LL);
}

  ;
}

uint64_t OUTLINED_FUNCTION_76_10()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 168));
}

uint64_t OUTLINED_FUNCTION_77_14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_release(a10);
}

uint64_t OUTLINED_FUNCTION_78_11()
{
  return type metadata accessor for DateComponents(0LL);
}

void OUTLINED_FUNCTION_79_8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  outlined init with copy of AppDisplayInfo?((uint64_t)va1, (uint64_t)va, a3);
}

void *OUTLINED_FUNCTION_80_10(uint64_t a1, uint64_t a2, ...)
{
  return static UsoTask_CodegenConverter.convert(task:)((uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_82_10()
{
  return static os_log_type_t.info.getter();
}

  ;
}

uint64_t WFInputDateFlow.exitValue.getter()
{
  uint64_t v4 = v3 - v2;
  OUTLINED_FUNCTION_30_12(v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin15WFInputDateFlow_state, (uint64_t)v11, 0LL);
  uint64_t v5 = OUTLINED_FUNCTION_50_3();
  outlined init with copy of WFInputDateFlow.State(v5, v6);
  int v7 = OUTLINED_FUNCTION_71_12();
  if (v7 == 2) {
    return *(void *)v4;
  }
  if (v7 == 1) {
    return *(void *)v4;
  }
  unint64_t v9 = lazy protocol witness table accessor for type WFInputTextFlowError and conformance WFInputTextFlowError();
  uint64_t v8 = swift_allocError(&type metadata for WFInputTextFlowError, v9, 0LL, 0LL);
  outlined destroy of WFInputDateFlow.State(v4, type metadata accessor for WFInputDateFlow.State);
  return v8;
}

uint64_t type metadata accessor for WFInputDateFlow.State(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for WFInputDateFlow.State,  (uint64_t)&nominal type descriptor for WFInputDateFlow.State);
}

uint64_t outlined init with copy of WFInputDateFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WFInputDateFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t WFInputDateFlow.__allocating_init(request:deviceState:outputPublisher:locationProvider:dateTimeResolver:)( void *a1, void *a2, uint64_t a3, __int128 *a4, __int128 *a5)
{
  uint64_t v11 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  WFInputDateFlow.init(request:deviceState:outputPublisher:locationProvider:dateTimeResolver:)(a1, a2, a3, a4, a5);
  return v11;
}

void *WFInputDateFlow.init(request:deviceState:outputPublisher:locationProvider:dateTimeResolver:)( void *a1, void *a2, uint64_t a3, __int128 *a4, __int128 *a5)
{
  uint64_t v6 = v5;
  type metadata accessor for CATOption(0LL);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_35();
  _OWORD v6[2] = a1;
  outlined init with copy of AppShortcutInvoking((uint64_t)a2, (uint64_t)(v6 + 3));
  uint64_t v29 = (void *)a3;
  outlined init with copy of AppShortcutInvoking(a3, (uint64_t)(v6 + 8));
  outlined init with copy of AppShortcutInvoking((uint64_t)a2, (uint64_t)v32);
  uint64_t v11 = one-time initialization token for shared;
  id v28 = a1;
  if (v11 != -1) {
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  }
  uint64_t v12 = static WFDialogState.shared;
  type metadata accessor for WorkflowRunnerCATs(0LL);
  uint64_t v13 = swift_retain(v12);
  static CATOption.defaultMode.getter(v13);
  uint64_t v27 = OUTLINED_FUNCTION_36_6();
  type metadata accessor for WorkflowRunnerCATsSimple(0LL);
  OUTLINED_FUNCTION_18_7();
  uint64_t v14 = OUTLINED_FUNCTION_35_7();
  type metadata accessor for RunCustomIntentCATs(0LL);
  OUTLINED_FUNCTION_18_7();
  uint64_t v15 = OUTLINED_FUNCTION_36_6();
  type metadata accessor for RunCustomIntentCATsSimple(0LL);
  OUTLINED_FUNCTION_18_7();
  uint64_t v16 = OUTLINED_FUNCTION_35_7();
  type metadata accessor for RunVoiceCommandCATs(0LL);
  OUTLINED_FUNCTION_18_7();
  uint64_t v17 = OUTLINED_FUNCTION_36_6();
  type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  OUTLINED_FUNCTION_18_7();
  uint64_t v18 = OUTLINED_FUNCTION_35_7();
  type metadata accessor for WorkflowRunnerCATPatternsExecutor(0LL);
  OUTLINED_FUNCTION_18_7();
  uint64_t v19 = OUTLINED_FUNCTION_36_6();
  uint64_t v20 = type metadata accessor for WorkflowDialogTemplating();
  OUTLINED_FUNCTION_19(v20, 120LL);
  WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)( (uint64_t)v32,  v12,  v27,  v14,  v15,  v16,  v17,  v18,  v19);
  v6[13] = v21;
  type metadata accessor for WorkflowSnippetProvider();
  uint64_t v22 = static WorkflowSnippetProvider.getSnippetProvider(deviceState:)(a2);

  __swift_destroy_boxed_opaque_existential_1Tm(v29);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  v6[14] = v22;
  uint64_t v23 = type metadata accessor for WorkflowNLContextProvider();
  v6[15] = OUTLINED_FUNCTION_19(v23, 16LL);
  outlined init with take of AceServiceInvokerAsync(a4, (uint64_t)(v6 + 16));
  outlined init with take of AceServiceInvokerAsync(a5, (uint64_t)(v6 + 21));
  uint64_t v24 = (char *)v6 + OBJC_IVAR____TtC18SiriLinkFlowPlugin15WFInputDateFlow_state;
  uint64_t v25 = OUTLINED_FUNCTION_61_19();
  swift_storeEnumTagMultiPayload(v24, v25, 3LL);
  return v6;
}

uint64_t WFInputDateFlow.on(input:)(uint64_t a1)
{
  uint64_t v2 = OUTLINED_FUNCTION_60_5();
  uint64_t v47 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)v41 - v7;
  __chkstk_darwin(v6);
  uint64_t v42 = (char *)v41 - v9;
  uint64_t v46 = OUTLINED_FUNCTION_61_19();
  OUTLINED_FUNCTION_15();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  void v41[4] = (char *)v41 - v15;
  __chkstk_darwin(v14);
  uint64_t v44 = (uint64_t)v41 - v16;
  uint64_t v17 = type metadata accessor for Input(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_35();
  uint64_t v21 = v20 - v19;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v22 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.voiceCommands);
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
  uint64_t v43 = a1;
  uint64_t v24 = OUTLINED_FUNCTION_88_1(v21, a1, v23);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  v41[5] = v8;
  if (v27)
  {
    uint64_t v28 = OUTLINED_FUNCTION_38(12LL);
    v41[3] = v2;
    uint64_t v29 = (_DWORD *)v28;
    uint64_t v30 = OUTLINED_FUNCTION_38(32LL);
    v41[2] = v5;
    uint64_t v31 = v30;
    v50[0] = v30;
    *uint64_t v29 = 136315138;
    v41[1] = v13;
    uint64_t v32 = Input.description.getter(v30);
    uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v29 + 1);
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_81_9(v21, *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
    OUTLINED_FUNCTION_73_13(&dword_0, v25, v26, "#WFInputDateFlow on input: %s");
    swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v31);
    OUTLINED_FUNCTION_1_0((uint64_t)v29);
  }

  else
  {
    OUTLINED_FUNCTION_81_9(v21, *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
  }

  uint64_t v34 = v45 + OBJC_IVAR____TtC18SiriLinkFlowPlugin15WFInputDateFlow_state;
  OUTLINED_FUNCTION_30_12(v45 + OBJC_IVAR____TtC18SiriLinkFlowPlugin15WFInputDateFlow_state, (uint64_t)v50, 0LL);
  uint64_t v35 = v44;
  outlined init with copy of WFInputDateFlow.State(v34, v44);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v35, v46);
  outlined destroy of WFInputDateFlow.State(v35, type metadata accessor for WFInputDateFlow.State);
  if (EnumCaseMultiPayload == 4)
  {
    uint64_t v38 = (uint64_t)v42;
    Input.parse.getter(v37);
    char v39 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)(v38);
    OUTLINED_FUNCTION_51_25(v38);
    __asm { BR              X10 }
  }

  return 0LL;
}

uint64_t WFInputDateFlow.execute()(uint64_t a1)
{
  v2[24] = a1;
  v2[25] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v2[26] = OUTLINED_FUNCTION_4_0(*(void *)(v3 - 8));
  v2[27] = OUTLINED_FUNCTION_11_0();
  uint64_t v4 = OUTLINED_FUNCTION_60_15();
  v2[28] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[29] = v5;
  v2[30] = OUTLINED_FUNCTION_9_0(v5);
  uint64_t v6 = OUTLINED_FUNCTION_60_5();
  v2[31] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[32] = v7;
  v2[33] = OUTLINED_FUNCTION_9_0(v7);
  uint64_t v8 = OUTLINED_FUNCTION_61_19();
  v2[34] = v8;
  v2[35] = OUTLINED_FUNCTION_4_0(*(void *)(v8 - 8));
  v2[36] = OUTLINED_FUNCTION_11_0();
  v2[37] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WFInputDateFlow.execute()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24)
{
  a23 = v25;
  a24 = v26;
  a22 = v24;
  uint64_t v27 = (uint64_t)(v24 + 13);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v28 = v24[25];
  uint64_t v29 = OUTLINED_FUNCTION_48();
  v24[38] = __swift_project_value_buffer(v29, (uint64_t)static Logger.voiceCommands);
  uint64_t v30 = swift_retain_n(v28, 4LL);
  uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v31, v32))
  {
    a10 = v24 + 22;
    a12 = v24 + 23;
    uint64_t v33 = OUTLINED_FUNCTION_38(22LL);
    a9 = OUTLINED_FUNCTION_38(64LL);
    a13 = a9;
    *(_DWORD *)uint64_t v33 = 136315394;
    id v34 = OUTLINED_FUNCTION_26(a9, "message");
    a11 = v24 + 13;
    if (v34)
    {
      uint64_t v35 = v34;
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v38 = v37;
    }

    else
    {
      unint64_t v38 = 0xE500000000000000LL;
      uint64_t v36 = 0x7974706D65LL;
    }

    uint64_t v39 = v24[25];
    v24[22] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(a10, a12, v33 + 4);
    swift_bridgeObjectRelease();
    uint64_t v40 = swift_release_n(v39, 2LL);
    *(_WORD *)(v33 + 1outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 2080;
    id v41 = OUTLINED_FUNCTION_26(v40, "prompt");
    if (v41)
    {
      uint64_t v42 = v41;
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v45 = v44;

      uint64_t v46 = a9;
    }

    else
    {
      unint64_t v45 = 0xE500000000000000LL;
      uint64_t v46 = a9;
      uint64_t v43 = 0x7974706D65LL;
    }

    uint64_t v47 = v24[25];
    v24[23] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v45, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(a12, v24 + 24, v33 + 14);
    OUTLINED_FUNCTION_14();
    swift_release_n(v47, 2LL);
    _os_log_impl( &dword_0,  v31,  v32,  "#WFInputDateFlow begins execution, message: %s, prompt: %s",  (uint8_t *)v33,  0x16u);
    swift_arrayDestroy(v46, 2LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v46);
    OUTLINED_FUNCTION_1_0(v33);

    uint64_t v27 = (uint64_t)(v24 + 13);
  }

  else
  {
    swift_release_n(v24[25], 4LL);
  }

  uint64_t v48 = v24[37];
  uint64_t v49 = v24[25];
  uint64_t v50 = OBJC_IVAR____TtC18SiriLinkFlowPlugin15WFInputDateFlow_state;
  v24[39] = OBJC_IVAR____TtC18SiriLinkFlowPlugin15WFInputDateFlow_state;
  uint64_t v51 = v49 + v50;
  OUTLINED_FUNCTION_30_12(v49 + v50, v27, 0LL);
  outlined init with copy of WFInputDateFlow.State(v51, v48);
  uint64_t v52 = OUTLINED_FUNCTION_71_12();
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, void *, void *, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_134934 + dword_134B64[v52]))( v52,  v53,  v54,  v55,  v56,  v57,  v58,  v59,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16);
}

uint64_t WFInputDateFlow.execute()()
{
  *(void *)(v1 + 328) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v1 = *(void **)(v0 + 200);
  uint64_t v2 = v1[11];
  uint64_t v3 = v1[12];
  __swift_project_boxed_opaque_existential_1(v1 + 8, v2);
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 336) = v4;
  *uint64_t v4 = v0;
  v4[1] = WFInputDateFlow.execute();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 16, v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 344) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 200) + *(void *)(v0 + 312);
  swift_storeEnumTagMultiPayload(v1, *(void *)(v0 + 272), 4LL);
  OUTLINED_FUNCTION_15_6(v2, v0 + 152);
  outlined assign with take of WFInputDateFlow.State(v1, v2);
  swift_endAccess(v0 + 152);
  static ExecuteResponse.ongoing(requireInput:)(1LL);
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
  OUTLINED_FUNCTION_5_43();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 352));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int EnumTagSinglePayload;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  OUTLINED_FUNCTION_37_2();
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v2, 1LL, v1);
  uint64_t v4 = *(void *)(v0 + 312);
  uint64_t v5 = *(void **)(v0 + 288);
  if (EnumTagSinglePayload == 1)
  {
    uint64_t v7 = *(void *)(v0 + 264);
    uint64_t v6 = *(void *)(v0 + 272);
    uint64_t v8 = *(void *)(v0 + 248);
    uint64_t v9 = *(void *)(v0 + 256);
    uint64_t v10 = *(void *)(v0 + 200) + v4;
    outlined destroy of NLContextUpdate?(v2, &demangling cache variable for type metadata for Date?);
    swift_storeEnumTagMultiPayload(v5, v6, 3LL);
    OUTLINED_FUNCTION_15_6(v10, v0 + 56);
    outlined assign with take of WFInputDateFlow.State((uint64_t)v5, v10);
    swift_endAccess(v0 + 56);
    OUTLINED_FUNCTION_46_27();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }

  else
  {
    uint64_t v11 = *(void *)(v0 + 280);
    uint64_t v21 = *(void *)(v0 + 256);
    uint64_t v12 = *(void *)(v0 + 240);
    uint64_t v22 = *(void *)(v0 + 248);
    uint64_t v23 = *(void *)(v0 + 264);
    uint64_t v13 = *(void *)(v0 + 232);
    uint64_t v14 = *(void *)(v0 + 208);
    uint64_t v20 = *(void *)(v0 + 272);
    uint64_t v15 = *(void *)(v0 + 200) + v4;
    OUTLINED_FUNCTION_75(v12, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 32));
    OUTLINED_FUNCTION_75(v14, v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16));
    OUTLINED_FUNCTION_26_16(v14);
    uint64_t v16 = objc_allocWithZone(&OBJC_CLASS___WFInputDateDialogResponse);
    uint64_t v17 = @nonobjc WFInputDateDialogResponse.init(inputtedDate:cancelled:)(v14, 0);
    *uint64_t v5 = v17;
    swift_storeEnumTagMultiPayload(v5, v20, 1LL);
    outlined init with take of WFInputDateFlow.State((uint64_t)v5, v11);
    OUTLINED_FUNCTION_15_6(v15, v0 + 80);
    uint64_t v18 = v17;
    outlined assign with take of WFInputDateFlow.State(v11, v15);
    swift_endAccess(v0 + 80);
    static ExecuteResponse.ongoing(requireInput:)(0LL);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v1);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v22);
  }

  OUTLINED_FUNCTION_5_43();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_3_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  OUTLINED_FUNCTION_28_1();
  uint64_t v2 = *(void *)(v1 + 328);
  uint64_t v3 = *(void *)(v1 + 304);
  Logger.logObject.getter(v4);
  uint64_t v5 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_31_0(v5))
  {
    uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_57_1();
    *uint64_t v6 = 0;
    OUTLINED_FUNCTION_33_2(&dword_0, v7, v8, "#WFInputDateFlow error submitting output");
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
  }

  OUTLINED_FUNCTION_36_24();
  OUTLINED_FUNCTION_35_33();
  OUTLINED_FUNCTION_65_15();
  OUTLINED_FUNCTION_15_6(v3, v0);
  swift_errorRetain(v2);
  OUTLINED_FUNCTION_68_14();
  swift_endAccess(v0);
  OUTLINED_FUNCTION_46_27();
  swift_errorRelease(v2);
  OUTLINED_FUNCTION_5_43();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  OUTLINED_FUNCTION_28_1();
  uint64_t v2 = __swift_destroy_boxed_opaque_existential_1Tm((void *)(v1 + 16));
  uint64_t v3 = *(void *)(v1 + 344);
  uint64_t v4 = *(void *)(v1 + 304);
  Logger.logObject.getter(v2);
  uint64_t v5 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_31_0(v5))
  {
    uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_57_1();
    *uint64_t v6 = 0;
    OUTLINED_FUNCTION_33_2(&dword_0, v7, v8, "#WFInputDateFlow error submitting output");
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
  }

  OUTLINED_FUNCTION_36_24();
  OUTLINED_FUNCTION_35_33();
  OUTLINED_FUNCTION_65_15();
  OUTLINED_FUNCTION_15_6(v4, v0);
  swift_errorRetain(v3);
  OUTLINED_FUNCTION_68_14();
  swift_endAccess(v0);
  OUTLINED_FUNCTION_46_27();
  swift_errorRelease(v3);
  OUTLINED_FUNCTION_5_43();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t WFInputDateFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WFInputDateFlow(0LL);
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type WFInputDateFlow and conformance WFInputDateFlow,  type metadata accessor for WFInputDateFlow,  (uint64_t)&protocol conformance descriptor for WFInputDateFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v5);
}

uint64_t WFInputDateFlow.buildDateFromParse(parse:)(uint64_t a1, uint64_t a2)
{
  v3[19] = a2;
  v3[20] = v2;
  v3[18] = a1;
  uint64_t v4 = type metadata accessor for TimeZone(0LL);
  v3[21] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[22] = v5;
  v3[23] = OUTLINED_FUNCTION_9_0(v5);
  uint64_t v6 = type metadata accessor for Calendar(0LL);
  _BYTE v3[24] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[25] = v7;
  v3[26] = OUTLINED_FUNCTION_9_0(v7);
  uint64_t v8 = type metadata accessor for Locale(0LL);
  v3[27] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[28] = v9;
  v3[29] = OUTLINED_FUNCTION_9_0(v9);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v3[30] = v10;
  v3[31] = OUTLINED_FUNCTION_4_0(*(void *)(v10 - 8));
  v3[32] = OUTLINED_FUNCTION_11_0();
  v3[33] = OUTLINED_FUNCTION_11_0();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v3[34] = OUTLINED_FUNCTION_9_0(*(void *)(v11 - 8));
  uint64_t v12 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  v3[35] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v3[36] = v13;
  v3[37] = OUTLINED_FUNCTION_4_0(v13);
  v3[38] = OUTLINED_FUNCTION_11_0();
  uint64_t v14 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  v3[39] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v3[40] = v15;
  v3[41] = OUTLINED_FUNCTION_9_0(v15);
  uint64_t v16 = type metadata accessor for USOParse(0LL);
  v3[42] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v3[43] = v17;
  v3[44] = OUTLINED_FUNCTION_9_0(v17);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.DateTimeValue?);
  v3[45] = OUTLINED_FUNCTION_9_0(*(void *)(v18 - 8));
  uint64_t v19 = type metadata accessor for VoiceCommandsNLIntent(0LL);
  v3[46] = v19;
  v3[47] = OUTLINED_FUNCTION_9_0(*(void *)(v19 - 8));
  uint64_t v20 = type metadata accessor for NLIntent(0LL);
  v3[48] = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  v3[49] = v21;
  v3[50] = OUTLINED_FUNCTION_9_0(v21);
  uint64_t v22 = OUTLINED_FUNCTION_60_5();
  v3[51] = v22;
  uint64_t v23 = *(void *)(v22 - 8);
  v3[52] = v23;
  v3[53] = OUTLINED_FUNCTION_9_0(v23);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

#error "135578: call analysis failed (funcsize=270)"
uint64_t WFInputDateFlow.buildDateFromParse(parse:)()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  OUTLINED_FUNCTION_50_0();
  uint64_t v1 = (uint64_t)(v0 + 2);
  uint64_t v2 = v0 + 7;
  uint64_t v3 = v0 + 12;
  OUTLINED_FUNCTION_3_0(v0[54]);
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  __swift_destroy_boxed_opaque_existential_1Tm(v2);
  outlined destroy of NLContextUpdate?(v1, &demangling cache variable for type metadata for LocationProviding?);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

#error "135800: call analysis failed (funcsize=34)"
uint64_t WFInputDateFlow.buildDateFromParse(parse:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  OUTLINED_FUNCTION_28_1();
  OUTLINED_FUNCTION_50_0();
  uint64_t v2 = v1[28];
  uint64_t v13 = v1[29];
  uint64_t v3 = v1[26];
  uint64_t v4 = v1[24];
  uint64_t v5 = v1[25];
  uint64_t v6 = v1[22];
  uint64_t v7 = v1[23];
  uint64_t v8 = v1[21];
  v1[56] = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  OUTLINED_FUNCTION_81_9(v13, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v9, v10, v11);
}

uint64_t WFInputDateFlow.buildDateFromParse(parse:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = OUTLINED_FUNCTION_50_3();
  uint64_t v4 = outlined init with copy of Date?(v2, v3);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void *)(v0 + 352);
  uint64_t v9 = *(void *)(v0 + 328);
  uint64_t v10 = *(void *)(v0 + 312);
  uint64_t v11 = *(void *)(v0 + 320);
  uint64_t v12 = *(void *)(v0 + 256);
  if (v7)
  {
    uint64_t v41 = v0 + 136;
    uint64_t v51 = *(void *)(v0 + 336);
    uint64_t v50 = *(void *)(v0 + 344);
    uint64_t v14 = *(void *)(v0 + 240);
    uint64_t v13 = *(void *)(v0 + 248);
    uint64_t v48 = *(void *)(v0 + 328);
    uint64_t v15 = (_DWORD *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v45 = v11;
    uint64_t v16 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v52 = v16;
    uint64_t v43 = v10;
    *uint64_t v15 = 136315138;
    outlined init with copy of Date?(v12, v13);
    uint64_t v17 = String.init<A>(describing:)(v13, v14);
    *(void *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v15 + 1);
    OUTLINED_FUNCTION_14();
    outlined destroy of NLContextUpdate?(v12, &demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_73_13(&dword_0, v5, v6, "#WFInputDateFlow: usoParse has date: %s");
    swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v16);
    OUTLINED_FUNCTION_1_0((uint64_t)v15);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v48, v10);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v8, v51);
  }

  else
  {

    outlined destroy of NLContextUpdate?(v12, &demangling cache variable for type metadata for Date?);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    uint64_t v19 = OUTLINED_FUNCTION_50_3();
    v21(v19, v20);
  }

  outlined init with take of Date?(*(void *)(v0 + 264), *(void *)(v0 + 144));
  uint64_t v46 = *(void *)(v0 + 256);
  uint64_t v49 = *(void *)(v0 + 248);
  swift_task_dealloc();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  uint64_t v22 = OUTLINED_FUNCTION_20_2();
  uint64_t v30 = OUTLINED_FUNCTION_31_22(v22, v23, v24, v25, v26, v27, v28, v29, v39, v41, v43, v46);
  OUTLINED_FUNCTION_49_19(v30, v31, v32, v33, v34, v35, v36, v37, v40, v42, v44, v47, v49);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

#error "135BE4: call analysis failed (funcsize=40)"
uint64_t WFInputDateFlow.buildOutput()(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  v2[2] = a1;
  void v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[4] = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v2[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[6] = v5;
  v2[7] = OUTLINED_FUNCTION_4_0(v5);
  _BYTE v2[8] = OUTLINED_FUNCTION_11_0();
  os_log_type_t v6 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[9] = v6;
  BOOL v7 = *(void *)(v6 - 8);
  v2[10] = v7;
  v2[11] = OUTLINED_FUNCTION_9_0(v7);
  uint64_t v8 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  v2[12] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[13] = v9;
  v2[14] = OUTLINED_FUNCTION_9_0(v9);
  uint64_t v10 = type metadata accessor for NLContextUpdate(0LL);
  v2[15] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[16] = v11;
  v2[17] = OUTLINED_FUNCTION_9_0(v11);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WFInputDateFlow.buildOutput()()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  (*(void (**)(void))(**(void **)(v0[3] + 120) + 208LL))();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))( v1,  enum case for RFFeatureFlags.ResponseFramework._SMART(_:),  v3);
  char v4 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_81_9(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if ((v4 & 1) != 0)
  {
    uint64_t v5 = v0[3];
    uint64_t v6 = *(void *)(v5 + 16);
    BOOL v7 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(**(void **)(v5 + 104) + 208LL));
    v0[18] = (uint64_t)v7;
    *BOOL v7 = v0;
    v7[1] = WFInputDateFlow.buildOutput();
    return v10(v6);
  }

  else
  {
    uint64_t v9 = (uint64_t **)swift_task_alloc(dword_21D63C);
    v0[24] = (uint64_t)v9;
    *uint64_t v9 = v0;
    v9[1] = (uint64_t *)WFInputDateFlow.buildOutput();
    return WFInputDateFlow.buildOutput_prerfv2(_:)(v0[2], v0[17]);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 184));
  OUTLINED_FUNCTION_20();
  swift_release();
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v1, v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 80);

  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_29_26();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_12_9(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 200) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_29_26();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_12_9(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_28_24();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  return OUTLINED_FUNCTION_2_1(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_28_24();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  return OUTLINED_FUNCTION_2_1(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t WFInputDateFlow.buildOutput()(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 15outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v1;
  swift_task_dealloc();
  if (!v1) {
    *(void *)(v4 + 160) = a1;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

uint64_t WFInputDateFlow.buildOutput()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v46 = v16[17];
  uint64_t v48 = (void *)v16[20];
  uint64_t v44 = v16[16];
  uint64_t v45 = v16[15];
  uint64_t v18 = v16[7];
  uint64_t v17 = v16[8];
  uint64_t v20 = v16[5];
  uint64_t v19 = v16[6];
  uint64_t v21 = v16[4];
  uint64_t v23 = static DialogPhase.confirmed.getter(v22);
  id v24 = OUTLINED_FUNCTION_26(v23, "catId");
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v17, v20);
  OutputGenerationManifest.init(dialogPhase:_:)(v18, CustomIntentDisambiguationItemContainer.init(items:), 0LL);
  OutputGenerationManifest.responseViewId.setter(v25);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v20);
  OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
  OutputGenerationManifest.canUseServerTTS.setter(1LL);
  OUTLINED_FUNCTION_75(v21, v46, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 16));
  OUTLINED_FUNCTION_26_16(v21);
  OutputGenerationManifest.nlContextUpdate.setter(v21);
  uint64_t v26 = type metadata accessor for ResponseFactory(0LL);
  uint64_t v27 = swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  v16[21] = ResponseFactory.init()(v27);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v29 = OUTLINED_FUNCTION_19(v28, 40LL);
  *(_OWORD *)(v29 + 16) = xmmword_17E150;
  *(void *)(v29 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v48;
  uint64_t v49 = v29;
  specialized Array._endMutation()(v29, v30, v31);
  v16[22] = v49;
  id v33 = v48;
  uint64_t v34 = (void *)swift_task_alloc(v32);
  v16[23] = v34;
  void *v34 = v16;
  v34[1] = WFInputDateFlow.buildOutput();
  OUTLINED_FUNCTION_34_3();
  return v38(v35, v36, v37, v38, v39, v40, v41, v42, v44, v45, v47, v48, v49, a14, a15, a16);
}

uint64_t WFInputDateFlow.buildOutput_prerfv2(_:)(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  void v3[9] = v2;
  v3[7] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[10] = OUTLINED_FUNCTION_9_0(*(void *)(v4 - 8));
  uint64_t v5 = type metadata accessor for TemplatingResult(0LL);
  v3[11] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[12] = v6;
  v3[13] = OUTLINED_FUNCTION_9_0(v6);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WFInputDateFlow.buildOutput_prerfv2(_:)()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(**(void **)(v1 + 104) + 216LL));
  v0[14] = v3;
  *uint64_t v3 = v0;
  v3[1] = WFInputDateFlow.buildOutput_prerfv2(_:);
  return v5(v0[13], v2);
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 120) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Bool v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v14 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v4 = *(void **)(v0 + 72);
  uint64_t v6 = *(void **)(v0 + 56);
  BOOL v7 = v4 + 3;
  uint64_t v8 = v4[6];
  uint64_t v9 = v4[7];
  __swift_project_boxed_opaque_existential_1(v4 + 3, v8);
  LOBYTE(v8) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v8, v9);
  uint64_t v10 = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  uint64_t v11 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL))(v3, v5, v11);
  __swift_storeEnumTagSinglePayload(v3, 0LL, 1LL, v11);
  uint64_t v12 = type metadata accessor for AceOutput(0LL);
  *(_OWORD *)(v0 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0u;
  *(void *)(v0 + 48) = 0LL;
  *(_OWORD *)(v0 + 16) = 0u;
  v6[3] = v12;
  void v6[4] = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v6);
  static AceOutputHelper.makeConfirmedViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v1,  v7,  v8 & 1,  _swiftEmptyArrayStorage,  v10,  1LL,  v3,  _swiftEmptyArrayStorage,  v0 + 16);
  outlined destroy of NLContextUpdate?( v0 + 16,  (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of NLContextUpdate?(v3, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v14);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_20_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t WFInputDateFlow.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 24));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 64));
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 128));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 168));
  outlined destroy of WFInputDateFlow.State( v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin15WFInputDateFlow_state,  type metadata accessor for WFInputDateFlow.State);
  return v0;
}

uint64_t WFInputDateFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t protocol witness for Flow.execute(completion:) in conformance WFInputDateFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 208LL))();
}

uint64_t protocol witness for Flow.execute() in conformance WFInputDateFlow(uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 200LL);
  BOOL v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return v7(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance WFInputDateFlow@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 176LL))();
  *(void *)a1 = result;
  *(_BYTE *)(a1 + 8) = v4 & 1;
  return result;
}

uint64_t outlined init with take of WFInputDateFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WFInputDateFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of WFInputDateFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WFInputDateFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

id @nonobjc WFInputDateDialogResponse.init(inputtedDate:cancelled:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Date(0LL);
  Class isa = 0LL;
  if (__swift_getEnumTagSinglePayload(a1, 1LL, v6) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
  }

  id v8 = [v3 initWithInputtedDate:isa cancelled:a2 & 1];

  return v8;
}

uint64_t type metadata accessor for WFInputDateFlow(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for WFInputDateFlow,  (uint64_t)&nominal type descriptor for WFInputDateFlow);
}

unint64_t lazy protocol witness table accessor for type WFInputDateFlowError and conformance WFInputDateFlowError()
{
  unint64_t result = lazy protocol witness table cache variable for type WFInputDateFlowError and conformance WFInputDateFlowError;
  if (!lazy protocol witness table cache variable for type WFInputDateFlowError and conformance WFInputDateFlowError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WFInputDateFlowError,  &type metadata for WFInputDateFlowError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WFInputDateFlowError and conformance WFInputDateFlowError);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for WFInputDateFlowError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_13673C + 4 * byte_18A3E4[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_13675C + 4 * byte_18A3E9[v4]))();
  }
}

_BYTE *sub_13673C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_13675C(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_136764(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_13676C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_136774(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_13677C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for WFInputDateFlowError()
{
  return &type metadata for WFInputDateFlowError;
}

uint64_t ObjC metadata update function for WFInputDateFlow()
{
  return type metadata accessor for WFInputDateFlow(0LL);
}

uint64_t type metadata completion function for WFInputDateFlow(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = "(";
  void v4[2] = "(";
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  void v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[6] = "(";
  v4[7] = "(";
  uint64_t result = type metadata accessor for WFInputDateFlow.State(319LL);
  if (v3 <= 0x3F)
  {
    v4[8] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 9LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

char *initializeBufferWithCopyOfBuffer for WFInputDateFlow.State(char *a1, char **a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *(void *)a1 = *a2;
    a1 = &v13[(v6 + 16LL) & ~(unint64_t)v6];
    swift_retain(v13);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v14 = *a2;
      swift_errorRetain(v14);
      *(void *)a1 = v14;
      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 2LL;
    }

    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v15 = *a2;
      *(void *)a1 = *a2;
      uint64_t v16 = v15;
      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 1LL;
    }

    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(v5 + 64));
        return a1;
      }

      uint64_t v9 = type metadata accessor for Parse(0LL);
      (*(void (**)(char *, char **, uint64_t))(*(void *)(v9 - 8) + 16LL))(a1, a2, v9);
      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }

  return a1;
}

void destroy for WFInputDateFlow.State(id *a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_errorRelease(*a1);
      break;
    case 1:

      break;
    case 0:
      uint64_t v4 = type metadata accessor for Parse(0LL);
      (*(void (**)(id *, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
      break;
  }

void **initializeWithCopy for WFInputDateFlow.State(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v11 = *a2;
    swift_errorRetain(v11);
    *a1 = v11;
    id v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 2LL;
  }

  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    id v13 = v12;
    id v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 1LL;
  }

  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      return a1;
    }

    uint64_t v7 = type metadata accessor for Parse(0LL);
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    id v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v8, v9, v10);
  return a1;
}

void **assignWithCopy for WFInputDateFlow.State(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of WFInputDateFlow.State((uint64_t)a1, type metadata accessor for WFInputDateFlow.State);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v11 = *a2;
      swift_errorRetain(v11);
      *a1 = v11;
      id v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 2LL;
    }

    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v12 = *a2;
      *a1 = *a2;
      id v13 = v12;
      id v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 1LL;
    }

    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        return a1;
      }

      uint64_t v7 = type metadata accessor for Parse(0LL);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      id v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }

  return a1;
}

void *initializeWithTake for WFInputDateFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v6 = type metadata accessor for Parse(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

void *assignWithTake for WFInputDateFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of WFInputDateFlow.State((uint64_t)a1, type metadata accessor for WFInputDateFlow.State);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      uint64_t v6 = type metadata accessor for Parse(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t type metadata completion function for WFInputDateFlow.State(uint64_t a1)
{
  uint64_t result = type metadata accessor for Parse(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v4[2] = "\b";
    swift_initEnumMetadataMultiPayload(a1, 256LL, 3LL, v4);
    return 0LL;
  }

  return result;
}

void outlined destroy of WFInputDateFlow.State(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2(0LL);
  OUTLINED_FUNCTION_14_3(*(void *)(v2 - 8));
  OUTLINED_FUNCTION_1();
}

uint64_t OUTLINED_FUNCTION_3_55()
{
  return swift_task_dealloc(*(void *)(v0 + 424));
}

uint64_t OUTLINED_FUNCTION_5_43()
{
  return swift_task_dealloc(*(void *)(v0 + 296));
}

uint64_t OUTLINED_FUNCTION_28_24()
{
  return (*(uint64_t (**)(void, void))(v0[16] + 8LL))(v0[17], v0[15]);
}

uint64_t OUTLINED_FUNCTION_29_26()
{
  return (*(uint64_t (**)(void, void))(v0[16] + 8LL))(v0[17], v0[15]);
}

uint64_t OUTLINED_FUNCTION_35_33()
{
  *uint64_t v1 = v0;
  return swift_storeEnumTagMultiPayload(v1, v2, 2LL);
}

void OUTLINED_FUNCTION_36_24()
{
}

uint64_t OUTLINED_FUNCTION_46_27()
{
  return static ExecuteResponse.ongoing(requireInput:)(0LL);
}

uint64_t OUTLINED_FUNCTION_49_19( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return swift_task_dealloc(a13);
}

uint64_t OUTLINED_FUNCTION_51_25(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_60_15()
{
  return type metadata accessor for Date(0LL);
}

uint64_t OUTLINED_FUNCTION_61_19()
{
  return type metadata accessor for WFInputDateFlow.State(0LL);
}

uint64_t OUTLINED_FUNCTION_65_15()
{
  return outlined init with take of WFInputDateFlow.State(v0, v1);
}

uint64_t OUTLINED_FUNCTION_68_14()
{
  return outlined assign with take of WFInputDateFlow.State(v1, v0);
}

uint64_t OUTLINED_FUNCTION_71_12()
{
  return swift_getEnumCaseMultiPayload(v0, v1);
}

void OUTLINED_FUNCTION_73_13(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_11SiriKitFlow11DisplayHintVs5NeverOTg5( void (*a1)(void *, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v18 = type metadata accessor for DisplayHint(0LL);
  uint64_t v6 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_35();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = _swiftEmptyArrayStorage;
  if (v10)
  {
    uint64_t v21 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v10, 0LL);
    uint64_t v11 = _swiftEmptyArrayStorage;
    uint64_t v12 = (uint64_t *)(a3 + 40);
    while (1)
    {
      uint64_t v13 = *v12;
      v20[0] = *(v12 - 1);
      v20[1] = v13;
      __n128 v14 = swift_bridgeObjectRetain(v13);
      a1(v20, v14);
      if (v4) {
        break;
      }
      uint64_t v4 = 0LL;
      swift_bridgeObjectRelease();
      uint64_t v21 = v11;
      unint64_t v16 = v11[2];
      unint64_t v15 = v11[3];
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v15 > 1,  v16 + 1,  1LL);
        uint64_t v11 = v21;
      }

      v12 += 2;
      v11[2] = v16 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))( (unint64_t)v11 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
      + *(void *)(v6 + 72) * v16,
        v9,
        v18);
      if (!--v10) {
        return v11;
      }
    }

    swift_release();
    swift_bridgeObjectRelease();
  }

  return v11;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSayypG_18SiriLinkFlowPlugin30CustomIntentDisambiguationItemVsAE_pTg5( void (*a1)(void *__return_ptr, uint64_t, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    unint64_t v15 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v5, 0);
    uint64_t v6 = _swiftEmptyArrayStorage;
    for (uint64_t i = a3 + 32; ; i += 32LL)
    {
      a1(__src, i, &v13);
      if (v4) {
        break;
      }
      uint64_t v4 = 0LL;
      unint64_t v15 = v6;
      unint64_t v11 = v6[2];
      unint64_t v10 = v6[3];
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v10 > 1),  v11 + 1,  1);
        uint64_t v6 = v15;
      }

      _OWORD v6[2] = v11 + 1;
      memcpy(&v6[11 * v11 + 4], __src, 0x51uLL);
      if (!--v5) {
        return v6;
      }
    }

    swift_release();
  }

  return v6;
}

void INIntentResolutionResult.getDisplayHints(intent:parameter:locale:shouldIncludeOrdinalReference:)( void *a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  uint64_t v11 = v10;
  id v12 = [a1 _codableDescription];
  uint64_t v13 = outlined bridged method (mbgnn) of @objc INCodableDescription.attribute(byKeyPath:)(a2, a3, v12);

  if (!v13) {
    goto LABEL_6;
  }
  uint64_t v15 = objc_opt_self(&OBJC_CLASS___INCodableEnumAttribute);
  unint64_t v16 = (void *)swift_dynamicCastObjCClass(v13, v15);
  if (!v16 || (uint64_t v17 = v16, [v16 valueType] != (char *)&stru_20.vmsize + 1))
  {

LABEL_6:
    OUTLINED_FUNCTION_72( v14,  (unint64_t *)&lazy cache variable for type metadata for INIntentResolutionResult,  &OBJC_CLASS___INIntentResolutionResult_ptr);
    static INIntentResolutionResult.getInferredDisplayHints(dictionary:shouldIncludeOrdinalReference:)(v11, a5 & 1);
    OUTLINED_FUNCTION_14();
    goto LABEL_7;
  }

  OUTLINED_FUNCTION_72( 65LL,  (unint64_t *)&lazy cache variable for type metadata for INIntentResolutionResult,  &OBJC_CLASS___INIntentResolutionResult_ptr);
  static INIntentResolutionResult.getDisplayHintsForEnum(attribute:dictionary:locale:shouldIncludeOrdinalReference:)( v17,  v11,  a4,  a5 & 1);
  OUTLINED_FUNCTION_14();

LABEL_7:
  OUTLINED_FUNCTION_8_2();
}

uint64_t static INIntentResolutionResult.makeAsIdString(input:)(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  uint64_t v8 = OUTLINED_FUNCTION_25_33(v1, v2, v3, v1, v4, v5, v6, v7, v19, v22, v25[0]);
  if ((_DWORD)v8)
  {
    OUTLINED_FUNCTION_72( v8,  (unint64_t *)&lazy cache variable for type metadata for INIntentResolutionResult,  &OBJC_CLASS___INIntentResolutionResult_ptr);
    uint64_t v15 = static INIntentResolutionResult.encodeDictionary(input:)();
  }

  else
  {
    uint64_t v16 = OUTLINED_FUNCTION_25_33(v8, v9, v10, (uint64_t)&type metadata for String, v11, v12, v13, v14, v20, v23, v25[0]);
    if (!(_DWORD)v16)
    {
      uint64_t v17 = 0LL;
      goto LABEL_7;
    }

    OUTLINED_FUNCTION_72( v16,  (unint64_t *)&lazy cache variable for type metadata for INIntentResolutionResult,  &OBJC_CLASS___INIntentResolutionResult_ptr);
    uint64_t v15 = static INIntentResolutionResult.base64FromString(string:)(v21, v24);
  }

  uint64_t v17 = v15;
  OUTLINED_FUNCTION_37();
LABEL_7:
  __swift_destroy_boxed_opaque_existential_1Tm(v25);
  return v17;
}

void *static INIntentResolutionResult.makeOrdinalDisplayHints(idValue:index:count:)( uint64_t a1, unint64_t a2, uint64_t a3)
{
  v7[2] = a1;
  uint64_t v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_11SiriKitFlow11DisplayHintVs5NeverOTg5( (void (*)(void *, __n128))partial apply for closure #1 in static INIntentResolutionResult.makeOrdinalDisplayHints(idValue:index:count:),  (uint64_t)v7,  v4);
  OUTLINED_FUNCTION_20();
  return v5;
}

void static INIntentResolutionResult.inferOrdinalDisplayValues(index:count:)( unint64_t a1, uint64_t a2)
{
  if ((a1 & 0x8000000000000000LL) != 0) {
    goto LABEL_6;
  }
  if (one-time initialization token for NUMBERICREFERENCENODEVALUES != -1) {
    goto LABEL_30;
  }
LABEL_3:
  if (*(void *)(static InputUtils.NUMBERICREFERENCENODEVALUES + 16) > a1)
  {
    uint64_t v8 = static InputUtils.NUMBERICREFERENCENODEVALUES + 16 * a1;
    uint64_t v4 = *(void *)(v8 + 32);
    uint64_t v2 = *(void *)(v8 + 40);
    swift_bridgeObjectRetain(v2);
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v10 = v9;
    unint64_t v5 = v9[2];
    unint64_t v11 = v9[3];
    unint64_t v3 = v5 + 1;
    if (v5 >= v11 >> 1) {
      goto LABEL_32;
    }
    goto LABEL_5;
  }

LABEL_6:
  uint64_t v10 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (__OFSUB__(a2, 1LL))
    {
      __break(1u);
LABEL_30:
      swift_once( &one-time initialization token for NUMBERICREFERENCENODEVALUES,  one-time initialization function for NUMBERICREFERENCENODEVALUES);
      goto LABEL_3;
    }

    if (a2 - 1 == a1)
    {
      if ((OUTLINED_FUNCTION_41_28() & 1) == 0)
      {
        OUTLINED_FUNCTION_51_8();
        uint64_t v10 = v19;
      }

      OUTLINED_FUNCTION_26_30();
      if (v13)
      {
        OUTLINED_FUNCTION_51_8();
        uint64_t v10 = v20;
      }

      v10[2] = a1;
      uint64_t v14 = &v10[2 * a2];
      v14[4] = 1953718636LL;
      uint64_t v15 = v14 + 4;
      unint64_t v16 = 0xE400000000000000LL;
      goto LABEL_27;
    }

    unint64_t v11 = a2 - 2;
    if (!__OFSUB__(a2, 2LL)) {
      break;
    }
    __break(1u);
LABEL_32:
    OUTLINED_FUNCTION_47_24(v11);
    OUTLINED_FUNCTION_51_8();
    uint64_t v10 = v21;
LABEL_5:
    v10[2] = v3;
    uint64_t v12 = &v10[2 * v5];
    v12[4] = v4;
    v12[5] = v2;
  }

  if (v11 == a1)
  {
    if ((OUTLINED_FUNCTION_41_28() & 1) == 0)
    {
      OUTLINED_FUNCTION_51_8();
      uint64_t v10 = v22;
    }

    OUTLINED_FUNCTION_26_30();
    if (v13)
    {
      OUTLINED_FUNCTION_51_8();
      uint64_t v10 = v23;
    }

    v10[2] = a1;
    uint64_t v17 = &v10[2 * a2];
    _OWORD v17[4] = 0x6F54646E6F636573LL;
    uint64_t v15 = v17 + 4;
    unint64_t v16 = 0xEC0000007473614CLL;
    goto LABEL_27;
  }

  if (__OFSUB__(a2, 3LL))
  {
    __break(1u);
    goto LABEL_34;
  }

  if (a2 - 3 != a1) {
    goto LABEL_28;
  }
  if ((OUTLINED_FUNCTION_41_28() & 1) == 0)
  {
LABEL_34:
    OUTLINED_FUNCTION_51_8();
    uint64_t v10 = v24;
  }

  OUTLINED_FUNCTION_26_30();
  if (v13)
  {
    OUTLINED_FUNCTION_51_8();
    uint64_t v10 = v25;
  }

  v10[2] = a1;
  uint64_t v18 = &v10[2 * a2];
  v18[4] = 0x4C6F546472696874LL;
  uint64_t v15 = v18 + 4;
  unint64_t v16 = 0xEB00000000747361LL;
LABEL_27:
  v15[1] = v16;
LABEL_28:
  OUTLINED_FUNCTION_8_2();
}

  OUTLINED_FUNCTION_11_7();
}

void static INIntentResolutionResult.getCodableEnumValueFromAny(item:attribute:)(uint8_t *a1, id a2)
{
  uint64_t v4 = (void *)type metadata accessor for String.Encoding(0LL);
  uint64_t v5 = *(v4 - 1);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_35();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = outlined init with copy of Any((uint64_t)a1, (uint64_t)&v46);
  uint64_t v12 = OUTLINED_FUNCTION_5_44(v9, v10, v11, (uint64_t)&type metadata for String);
  if (!(_DWORD)v12)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v29 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v29, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v30 = OUTLINED_FUNCTION_54_8();
    if (!OUTLINED_FUNCTION_43_9(v30)) {
      goto LABEL_22;
    }
    uint64_t v31 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_46_28(v31);
    uint64_t v28 = "Unable to convert enum item to a string";
    goto LABEL_21;
  }

  a1 = (uint8_t *)v45;
  static String.Encoding.utf8.getter(v12);
  ((void (*)(uint64_t, void))String.data(using:allowLossyConversion:))(v8, 0LL);
  unint64_t v14 = v13;
  (*(void (**)(uint64_t, void *))(v5 + 8))(v8, v4);
  if (v14 >> 60 == 15) {
    goto LABEL_17;
  }
  uint64_t v15 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&__int128 v46 = 0LL;
  uint64_t v4 = [v15 JSONObjectWithData:isa options:0 error:&v46];

  uint64_t v17 = v46;
  if (!v4)
  {
    a2 = (id)v46;
    uint64_t v32 = _convertNSErrorToError(_:)(v17);

    LOBYTE(v4) = v32;
    swift_willThrow(v33, v34, v35, v36, v37);
    OUTLINED_FUNCTION_42_23();
    swift_errorRelease(v32);
    goto LABEL_17;
  }

  id v18 = (id)v46;
  _bridgeAnyObjectToAny(_:)(&v46);
  OUTLINED_FUNCTION_42_23();
  swift_unknownObjectRelease(v4);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((OUTLINED_FUNCTION_5_44(v19, v20, v21, v19) & 1) == 0)
  {
LABEL_17:
    OUTLINED_FUNCTION_20();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v38 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v38, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v39 = OUTLINED_FUNCTION_54_8();
    if (!OUTLINED_FUNCTION_43_9(v39)) {
      goto LABEL_22;
    }
    uint64_t v40 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_46_28(v40);
    uint64_t v28 = "Unable to convert enum string to a dictionary";
    goto LABEL_21;
  }

  LOBYTE(v4) = v44;
  OUTLINED_FUNCTION_20();
  specialized Dictionary.subscript.getter(0x65756C6176LL, 0xE500000000000000LL, v44, &v46);
  uint64_t v22 = OUTLINED_FUNCTION_37();
  if (!v47)
  {
    outlined destroy of URL?((uint64_t)&v46, &demangling cache variable for type metadata for Any?);
    goto LABEL_25;
  }

  if ((OUTLINED_FUNCTION_5_44(v22, v23, v24, (uint64_t)&type metadata for String) & 1) == 0)
  {
LABEL_25:
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v41 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v41, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v42 = OUTLINED_FUNCTION_54_8();
    if (!OUTLINED_FUNCTION_43_9(v42)) {
      goto LABEL_22;
    }
    uint64_t v43 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_46_28(v43);
    uint64_t v28 = "Unable to convert value string from enum dictionary";
    goto LABEL_21;
  }

  if (!outlined bridged method (mbnn) of @objc INCodableEnumAttribute.value(withName:)(v44, v45, a2))
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v25 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v25, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v26 = OUTLINED_FUNCTION_54_8();
    if (!OUTLINED_FUNCTION_43_9(v26)) {
      goto LABEL_22;
    }
    uint64_t v27 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_46_28(v27);
    uint64_t v28 = "Unable to convert enum value string to INCodableEnumValue";
LABEL_21:
    _os_log_impl(&dword_0, (os_log_t)a2, (os_log_type_t)v4, v28, a1, 2u);
    OUTLINED_FUNCTION_1_0((uint64_t)a1);
LABEL_22:
  }

  OUTLINED_FUNCTION_8_2();
}

uint64_t static INIntentResolutionResult.getSynonymsForEnum(enumValue:language:)( void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = outlined bridged method (pb) of @objc INCodableEnumValue.synonyms.getter(a1);
  if (!v4) {
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  if ((unint64_t)v4 >> 62)
  {
    if (v4 >= 0) {
      uint64_t v39 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v39 = v4;
    }
    OUTLINED_FUNCTION_9_4();
    uint64_t v40 = _CocoaArrayWrapper.endIndex.getter(v39);
    OUTLINED_FUNCTION_1_2();
    if (!v40) {
      goto LABEL_39;
    }
  }

  else if (!*(void *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFFF8LL)))
  {
    goto LABEL_39;
  }

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v5 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
  uint64_t v6 = OUTLINED_FUNCTION_9_4();
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v44 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v11 = OUTLINED_FUNCTION_72( v10,  &lazy cache variable for type metadata for INCodableEnumValueSynonym,  &OBJC_CLASS___INCodableEnumValueSynonym_ptr);
    uint64_t v12 = OUTLINED_FUNCTION_9_4();
    uint64_t v13 = Array.description.getter(v12, v11);
    unint64_t v15 = v14;
    OUTLINED_FUNCTION_1_2();
    uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v9 + 4);
    OUTLINED_FUNCTION_43_27();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v7, v8, "Getting synonyms for disambiguation item: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v10);
    OUTLINED_FUNCTION_1_0((uint64_t)v9);
  }

  else
  {

    OUTLINED_FUNCTION_43_27();
  }

  uint64_t result = outlined bridged method (pb) of @objc INCodableEnumValue.synonyms.getter(a1);
  if (!result) {
    goto LABEL_43;
  }
  uint64_t v17 = result;
  if ((unint64_t)result >> 62)
  {
    if (result >= 0) {
      result &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(result);
    uint64_t v18 = result;
    if (result) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }

  uint64_t v18 = *(void *)((char *)&dword_10 + (result & 0xFFFFFFFFFFFFFF8LL));
  if (!v18)
  {
LABEL_39:
    swift_bridgeObjectRelease();
    return (uint64_t)_swiftEmptyArrayStorage;
  }

const char *INIntentResolutionResult.LAST.unsafeMutableAddressor()
{
  return "last";
}

uint64_t static INIntentResolutionResult.LAST.getter()
{
  return 1953718636LL;
}

const char *INIntentResolutionResult.SECONDTOLAST.unsafeMutableAddressor()
{
  return "secondToLast";
}

uint64_t static INIntentResolutionResult.SECONDTOLAST.getter()
{
  return 0x6F54646E6F636573LL;
}

const char *INIntentResolutionResult.THIRDTOLAST.unsafeMutableAddressor()
{
  return "thirdToLast";
}

uint64_t static INIntentResolutionResult.THIRDTOLAST.getter()
{
  return 0x4C6F546472696874LL;
}

void one-time initialization function for interestingFields()
{
  static INIntentResolutionResult.interestingFields = (uint64_t)&outlined read-only object #0 of one-time initialization function for interestingFields;
}

uint64_t *INIntentResolutionResult.interestingFields.unsafeMutableAddressor()
{
  if (one-time initialization token for interestingFields != -1) {
    swift_once( &one-time initialization token for interestingFields,  one-time initialization function for interestingFields);
  }
  return &static INIntentResolutionResult.interestingFields;
}

double static INIntentResolutionResult.interestingFields.getter()
{
  if (one-time initialization token for interestingFields != -1) {
    swift_once( &one-time initialization token for interestingFields,  one-time initialization function for interestingFields);
  }
  *(void *)&double result = swift_bridgeObjectRetain(static INIntentResolutionResult.interestingFields).n128_u64[0];
  return result;
}

void static INIntentResolutionResult.getDisplayHintsForEnum(attribute:dictionary:locale:shouldIncludeOrdinalReference:)( void *a1, uint64_t a2, unint64_t a3, int a4)
{
  int v158 = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SemanticValue?);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_83();
  uint64_t v176 = v8;
  uint64_t v9 = OUTLINED_FUNCTION_39_26();
  uint64_t v159 = *(void *)(v9 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_31_9();
  uint64_t v13 = v11 - v12;
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_32_22();
  uint64_t v157 = v15;
  OUTLINED_FUNCTION_65_2();
  __chkstk_darwin(v16);
  uint64_t v150 = (char *)&v135 - v17;
  uint64_t v18 = type metadata accessor for SemanticValue(0LL);
  uint64_t v177 = *(void *)(v18 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_61_6();
  uint64_t v169 = v20;
  OUTLINED_FUNCTION_65_2();
  __chkstk_darwin(v21);
  OUTLINED_FUNCTION_32_22();
  uint64_t v175 = v22;
  OUTLINED_FUNCTION_65_2();
  __chkstk_darwin(v23);
  OUTLINED_FUNCTION_32_22();
  uint64_t v148 = v24;
  OUTLINED_FUNCTION_65_2();
  __chkstk_darwin(v25);
  unint64_t v27 = (char *)&v135 - v26;
  uint64_t v28 = type metadata accessor for Locale.Language(0LL);
  uint64_t v144 = *(void *)(v28 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v29);
  OUTLINED_FUNCTION_83();
  unint64_t v143 = v30;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale.LanguageCode?);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v31);
  OUTLINED_FUNCTION_83();
  uint64_t v142 = v32;
  uint64_t v149 = type metadata accessor for String.Encoding(0LL);
  uint64_t v163 = *(void *)(v149 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v33);
  OUTLINED_FUNCTION_83();
  uint64_t v162 = v34;
  uint64_t v35 = _swiftEmptyArrayStorage;
  if (*(void *)(a2 + 16))
  {
    unint64_t v36 = OUTLINED_FUNCTION_6_46();
    if ((v37 & 1) != 0
      && (OUTLINED_FUNCTION_9_40(v36),
          uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : Any]]),
          OUTLINED_FUNCTION_35_6((uint64_t)&v179, (uint64_t)&v183, (uint64_t)&type metadata for Any + 8, v38)))
    {
      uint64_t v39 = v179;
    }

    else
    {
      uint64_t v39 = _swiftEmptyArrayStorage;
    }
  }

  else
  {
    uint64_t v39 = _swiftEmptyArrayStorage;
  }

  uint64_t v164 = (void *)v39[2];
  if (!v164)
  {
    swift_bridgeObjectRelease();
    goto LABEL_84;
  }

  uint64_t v173 = v18;
  uint64_t v145 = v13;
  uint64_t v141 = a1;
  unint64_t v140 = a3;
  uint64_t v146 = 0LL;
  uint64_t v167 = v39 + 4;
  uint64_t v165 = (uint64_t)&type metadata for Any + 8;
  __int128 v139 = xmmword_17E650;
  unint64_t v156 = 0x8000000000194DA0LL;
  unint64_t v155 = 0x8000000000194CE0LL;
  unint64_t v168 = 0x8000000000194CC0LL;
  uint64_t v166 = _swiftEmptyArrayStorage;
  uint64_t v40 = v177;
  OUTLINED_FUNCTION_50_21();
  uint64_t v42 = v41;
  OUTLINED_FUNCTION_36_25();
  uint64_t v170 = v9;
  uint64_t v161 = v44;
  do
  {
    if (v43 >= *(void *)(v42 + 16))
    {
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
    }

    unint64_t v178 = v43;
    if (!*(void *)(v167[v43] + 16LL))
    {
      __int128 v183 = 0u;
      __int128 v184 = 0u;
LABEL_33:
      outlined destroy of URL?((uint64_t)&v183, &demangling cache variable for type metadata for Any?);
      goto LABEL_34;
    }

    swift_bridgeObjectRetain(v167[v43]);
    unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(0x616C756261636F76LL, 0xEF65756C61567972LL);
    if ((v46 & 1) != 0)
    {
      OUTLINED_FUNCTION_9_40(v45);
    }

    else
    {
      __int128 v183 = 0u;
      __int128 v184 = 0u;
    }

    OUTLINED_FUNCTION_20();
    if (!*((void *)&v184 + 1)) {
      goto LABEL_33;
    }
    uint64_t v47 = OUTLINED_FUNCTION_35_6((uint64_t)&v179, (uint64_t)&v183, v165, (uint64_t)&type metadata for String);
    if ((v47 & 1) == 0) {
      goto LABEL_34;
    }
    uint64_t v48 = (uint64_t)v179;
    uint64_t v49 = v180;
    uint64_t v50 = v162;
    static String.Encoding.utf8.getter(v47);
    uint64_t v35 = (void *)String.data(using:allowLossyConversion:)(v50, 0LL, v48, v49);
    unint64_t v52 = v51;
    (*(void (**)(uint64_t, unint64_t))(v163 + 8))(v50, a3);
    if (v52 >> 60 == 15)
    {
LABEL_23:
      OUTLINED_FUNCTION_56_1();
LABEL_25:
      uint64_t v42 = v161;
      OUTLINED_FUNCTION_36_25();
      goto LABEL_34;
    }

    uint64_t v53 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    *(void *)&__int128 v183 = 0LL;
    id v55 = [v53 JSONObjectWithData:isa options:0 error:&v183];

    uint64_t v56 = v183;
    if (!v55)
    {
      id v62 = (id)v183;
      uint64_t v63 = _convertNSErrorToError(_:)(v56);

      swift_willThrow(v64, v65, v66, v67, v68);
      OUTLINED_FUNCTION_37_26();
      swift_errorRelease(v63);
      OUTLINED_FUNCTION_56_1();
      uint64_t v146 = 0LL;
      goto LABEL_25;
    }

    id v57 = (id)v183;
    _bridgeAnyObjectToAny(_:)(&v183);
    OUTLINED_FUNCTION_37_26();
    swift_unknownObjectRelease(v55);
    uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    uint64_t v59 = v170;
    uint64_t v42 = v161;
    uint64_t v35 = v164;
    if (v179[2] && (unint64_t v60 = OUTLINED_FUNCTION_24_34(), (v61 & 1) != 0))
    {
      OUTLINED_FUNCTION_9_40(v60);
    }

    else
    {
      __int128 v183 = 0u;
      __int128 v184 = 0u;
    }

    OUTLINED_FUNCTION_20();
    if (!*((void *)&v184 + 1))
    {
      OUTLINED_FUNCTION_56_1();
      goto LABEL_33;
    }

    if ((OUTLINED_FUNCTION_35_6( (uint64_t)&v179,  (uint64_t)&v183,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String) & 1) != 0)
    {
      *(void *)&__int128 v174 = v48;
      *((void *)&v174 + 1) = v49;
      uint64_t v70 = (uint64_t)v179;
      uint64_t v69 = v180;
      id v71 = outlined bridged method (mbgnn) of @objc INCodableEnumAttribute.value(withName:)((uint64_t)v179, v180, v141);
      if (v71)
      {
        uint64_t v72 = v71;
        uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        uint64_t inited = swift_initStackObject(v73, v181);
        *(_OWORD *)(inited + 16) = v139;
        *(void *)(inited + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v70;
        *(void *)(inited + 40) = v69;
        uint64_t v179 = (void *)inited;
        a3 = v143;
        uint64_t v75 = Locale.language.getter(inited);
        uint64_t v76 = v142;
        Locale.Language.languageCode.getter(v75);
        uint64_t v77 = v76;
        (*(void (**)(unint64_t, uint64_t))(v144 + 8))(a3, v28);
        uint64_t v78 = type metadata accessor for Locale.LanguageCode(0LL);
        if (__swift_getEnumTagSinglePayload(v77, 1LL, v78) == 1)
        {
          outlined destroy of URL?(v77, &demangling cache variable for type metadata for Locale.LanguageCode?);
          uint64_t v79 = 0xE200000000000000LL;
          uint64_t v35 = (void *)(&loc_6E64 + 1);
        }

        else
        {
          a3 = v77;
          uint64_t v35 = (void *)Locale.LanguageCode.identifier.getter();
          uint64_t v79 = v80;
          (*(void (**)(unint64_t, uint64_t))(*(void *)(v78 - 8) + 8LL))(a3, v78);
        }

        uint64_t v172 = v27;
        outlined bridged method (mbgnb) of @objc INCodableEnumValueSynonym.localizedSynonym(forLanguage:)( (uint64_t)v35,  v79,  v72,  (SEL *)&selRef_localizedDisplayNameForLanguage_);
        OUTLINED_FUNCTION_50_21();
        if (v82)
        {
          uint64_t v48 = v81;
          uint64_t v83 = v82;
          uint64_t v171 = v35;
          uint64_t v84 = (uint64_t)v179;
          if ((swift_isUniquelyReferenced_nonNull_native(v179) & 1) == 0)
          {
            OUTLINED_FUNCTION_48_23();
            uint64_t v84 = v128;
          }

          a3 = *(void *)(v84 + 16);
          unint64_t v85 = *(void *)(v84 + 24);
          if (a3 >= v85 >> 1)
          {
            OUTLINED_FUNCTION_47_24(v85);
            OUTLINED_FUNCTION_48_23();
            uint64_t v84 = v129;
          }

          *(void *)(v84 + 16) = a3 + 1;
          unint64_t v86 = v84 + 16 * a3;
          *(void *)(v86 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v48;
          *(void *)(v86 + 40) = v83;
          uint64_t v179 = (void *)v84;
          OUTLINED_FUNCTION_50_21();
          uint64_t v35 = v171;
        }

        uint64_t v87 = static INIntentResolutionResult.getSynonymsForEnum(enumValue:language:)(v72, (uint64_t)v35, v79);
        OUTLINED_FUNCTION_20();
        specialized Array.append<A>(contentsOf:)();
        *((void *)&v184 + 1) = &type metadata for String;
        __int128 v183 = v174;
        uint64_t v153 = static INIntentResolutionResult.makeAsIdString(input:)((uint64_t)&v183);
        uint64_t v154 = v88;
        __swift_destroy_boxed_opaque_existential_1Tm(&v183);
        uint64_t v152 = v179[2];
        if (v152)
        {
          id v137 = v72;
          uint64_t v138 = v28;
          uint64_t v136 = v179;
          char v151 = v179 + 4;
          uint64_t v89 = 0LL;
          uint64_t v90 = v150;
          uint64_t v91 = v173;
          uint64_t v92 = v172;
          uint64_t v35 = v148;
          OUTLINED_FUNCTION_35_34();
          while (1)
          {
            uint64_t v160 = v89;
            OUTLINED_FUNCTION_21_29((uint64_t)v181);
            OUTLINED_FUNCTION_51_26((uint64_t)v182);
            OUTLINED_FUNCTION_19_29(v153, a3, 0xD000000000000012LL);
            OUTLINED_FUNCTION_19_29(v89, v87, 0xD000000000000010LL);
            uint64_t v93 = *(void (**)(uint64_t, char *, uint64_t))(v40 + 16);
            uint64_t v94 = v176;
            v93(v176, v92, v91);
            OUTLINED_FUNCTION_29_27(v94);
            uint64_t v95 = v48;
            uint64_t v48 = (uint64_t)v35;
            v93((uint64_t)v175, (char *)v35, v91);
            OUTLINED_FUNCTION_40_26();
            uint64_t v96 = v95;
            uint64_t v97 = v157;
            (*(void (**)(uint64_t, char *, uint64_t))(v95 + 16))(v157, v90, v59);
            uint64_t v87 = (uint64_t)v90;
            if ((swift_isUniquelyReferenced_nonNull_native(v166) & 1) != 0)
            {
              uint64_t v98 = (uint64_t)v164;
              uint64_t v99 = v166;
            }

            else
            {
              uint64_t v99 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v166[2] + 1LL,  1LL,  (uint64_t)v166);
              uint64_t v98 = (uint64_t)v164;
            }

            unint64_t v101 = v99[2];
            unint64_t v100 = v99[3];
            if (v101 >= v100 >> 1) {
              uint64_t v99 = (void *)OUTLINED_FUNCTION_49_20(v100 > 1, v101 + 1);
            }
            v99[2] = v101 + 1;
            *((void *)&v174 + 1) = (*(unsigned __int8 *)(v96 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80);
            *(void *)&__int128 v174 = *(void *)(v96 + 72);
            uint64_t v171 = *(void **)(v96 + 32);
            ((void (*)(char *, uint64_t, uint64_t))v171)( (char *)v99 + *((void *)&v174 + 1) + v174 * v101,  v97,  v59);
            if ((v158 & 1) != 0) {
              break;
            }
            uint64_t v35 = (void *)v48;
            uint64_t v166 = v99;
            OUTLINED_FUNCTION_35_34();
            uint64_t v40 = v177;
LABEL_79:
            uint64_t v89 = v160 + 1;
            (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v87, v59);
            a3 = *(void *)(v40 + 8);
            uint64_t v91 = v173;
            ((void (*)(void *, uint64_t))a3)(v35, v173);
            uint64_t v92 = v172;
            ((void (*)(char *, uint64_t))a3)(v172, v91);
            uint64_t v90 = (char *)v87;
            if (v89 == v152)
            {

              OUTLINED_FUNCTION_13_32((uint64_t)&v166);
              uint64_t v28 = v138;
              OUTLINED_FUNCTION_50_21();
              goto LABEL_82;
            }
          }

          static INIntentResolutionResult.inferOrdinalDisplayValues(index:count:)(v178, v98);
          uint64_t v103 = v102;
          uint64_t v104 = *(void *)(v102 + 16);
          if (v104)
          {
            uint64_t v166 = v99;
            *(void *)&__int128 v183 = _swiftEmptyArrayStorage;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v104, 0LL);
            uint64_t v105 = (char *)v183;
            uint64_t v147 = v103;
            os_log_type_t v106 = (uint64_t *)(v103 + 40);
            uint64_t v107 = v145;
            do
            {
              uint64_t v109 = *(v106 - 1);
              uint64_t v108 = *v106;
              swift_bridgeObjectRetain_n(*v106, 2LL);
              uint64_t v110 = v175;
              OUTLINED_FUNCTION_19_29(v109, v108, 0xD000000000000015LL);
              uint64_t v111 = v176;
              uint64_t v112 = v173;
              v93(v176, v172, v173);
              __swift_storeEnumTagSinglePayload(v111, 0LL, 1LL, v112);
              uint64_t v113 = v169;
              v93(v169, v110, v112);
              DisplayHint.init(idValue:displayValue:)(v111, v113);
              (*(void (**)(char *, uint64_t))(v177 + 8))(v110, v112);
              swift_bridgeObjectRelease();
              *(void *)&__int128 v183 = v105;
              unint64_t v115 = *((void *)v105 + 2);
              unint64_t v114 = *((void *)v105 + 3);
              if (v115 >= v114 >> 1)
              {
                BOOL v117 = OUTLINED_FUNCTION_47_24(v114);
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v117,  v115 + 1,  1LL);
                uint64_t v105 = (char *)v183;
              }

              v106 += 2;
              *((void *)v105 + outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v115 + 1;
              uint64_t v116 = &v105[*((void *)&v174 + 1) + v115 * v174];
              uint64_t v59 = v170;
              ((void (*)(char *, uint64_t, uint64_t))v171)(v116, v107, v170);
              --v104;
            }

            while (v104);
            OUTLINED_FUNCTION_13_32((uint64_t)&v178);
            uint64_t v48 = (uint64_t)v148;
            uint64_t v99 = v166;
          }

          else
          {
            OUTLINED_FUNCTION_14();
            uint64_t v105 = (char *)_swiftEmptyArrayStorage;
          }

          uint64_t v118 = *((void *)v105 + 2);
          uint64_t v119 = v99[2];
          uint64_t v120 = v119 + v118;
          uint64_t v40 = v177;
          if (__OFADD__(v119, v118)) {
            goto LABEL_86;
          }
          if (v120 > v99[3] >> 1)
          {
            if (v119 <= v120) {
              uint64_t v127 = v119 + v118;
            }
            else {
              uint64_t v127 = v99[2];
            }
            uint64_t v99 = (void *)OUTLINED_FUNCTION_49_20(1LL, v127);
            if (!*((void *)v105 + 2)) {
              goto LABEL_77;
            }
LABEL_63:
            uint64_t v121 = v99[2];
            if ((v99[3] >> 1) - v121 < v118) {
              goto LABEL_88;
            }
            uint64_t v122 = (char *)v99 + *((void *)&v174 + 1) + v121 * v174;
            if (&v105[*((void *)&v174 + 1)] < &v122[v118 * (void)v174]
              && v122 < &v105[*((void *)&v174 + 1) + v118 * (void)v174])
            {
              OUTLINED_FUNCTION_23_33();
              OUTLINED_FUNCTION_14_40( (uint64_t)"Fatal error",  v130,  v131,  (uint64_t)"UnsafeMutablePointer.initialize overlapping range",  v132,  v133,  (uint64_t)"Swift/UnsafePointer.swift",  v134,  v135,  (uint64_t)v136,  (int)v137);
              __break(1u);
              return;
            }

            uint64_t v35 = (void *)v48;
            swift_arrayInitWithCopy(v122);
            OUTLINED_FUNCTION_35_34();
            if (v118)
            {
              uint64_t v124 = v99[2];
              BOOL v125 = __OFADD__(v124, v118);
              uint64_t v126 = v124 + v118;
              if (v125) {
                goto LABEL_89;
              }
              v99[2] = v126;
            }
          }

          else
          {
            if (v118) {
              goto LABEL_63;
            }
LABEL_77:
            uint64_t v35 = (void *)v48;
            OUTLINED_FUNCTION_35_34();
            if (v118) {
              goto LABEL_87;
            }
          }

          uint64_t v166 = v99;
          OUTLINED_FUNCTION_20();
          uint64_t v87 = (uint64_t)v150;
          goto LABEL_79;
        }

        OUTLINED_FUNCTION_20();
LABEL_82:
        OUTLINED_FUNCTION_13_32((uint64_t)v182);
        unint64_t v27 = v172;
        goto LABEL_25;
      }

      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_20();
      uint64_t v42 = v161;
    }

    else
    {
      OUTLINED_FUNCTION_56_1();
    }

LABEL_34:
    unint64_t v43 = v178 + 1;
  }

  while ((void *)(v178 + 1) != v35);
  OUTLINED_FUNCTION_37();
LABEL_84:
  OUTLINED_FUNCTION_24_0();
}

void static INIntentResolutionResult.getInferredDisplayHints(dictionary:shouldIncludeOrdinalReference:)( uint64_t a1, int a2)
{
  int v88 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SemanticValue?);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_83();
  uint64_t v101 = v4;
  uint64_t v5 = OUTLINED_FUNCTION_39_26();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_31_9();
  uint64_t v9 = (void (*)(void, void))(v7 - v8);
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_32_22();
  uint64_t v94 = v11;
  OUTLINED_FUNCTION_65_2();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v73 - v13;
  uint64_t v15 = type metadata accessor for SemanticValue(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_61_6();
  uint64_t v96 = v17;
  OUTLINED_FUNCTION_65_2();
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_32_22();
  unint64_t v100 = v19;
  OUTLINED_FUNCTION_65_2();
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v73 - v22;
  __chkstk_darwin(v21);
  uint64_t v102 = (char *)&v73 - v24;
  if (*(void *)(a1 + 16))
  {
    unint64_t v25 = OUTLINED_FUNCTION_6_46();
    if ((v26 & 1) != 0
      && (outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v25, (uint64_t)&v109),
          uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : Any]]),
          OUTLINED_FUNCTION_35_6((uint64_t)&v106, (uint64_t)&v109, (uint64_t)&type metadata for Any + 8, v27)))
    {
      uint64_t v28 = (void *)v106;
    }

    else
    {
      uint64_t v28 = _swiftEmptyArrayStorage;
    }
  }

  else
  {
    uint64_t v28 = _swiftEmptyArrayStorage;
  }

  uint64_t v82 = v28[2];
  if (!v82)
  {
    swift_bridgeObjectRelease();
    goto LABEL_54;
  }

  unint64_t v29 = 0LL;
  uint64_t v77 = v28 + 4;
  unint64_t v30 = (char *)_swiftEmptyArrayStorage;
  unint64_t v86 = 0x8000000000194DA0LL;
  unint64_t v85 = 0x8000000000194CE0LL;
  unint64_t v95 = 0x8000000000194CC0LL;
  uint64_t v84 = v14;
  uint64_t v31 = (uint64_t)v28;
  uint64_t v97 = v5;
  uint64_t v87 = v6;
  uint64_t v79 = v9;
  uint64_t v99 = v16;
  uint64_t v105 = v15;
  uint64_t v78 = v23;
  uint64_t v74 = v28;
  while (1)
  {
    if (v29 >= *(void *)(v31 + 16)) {
      goto LABEL_59;
    }
    uint64_t v32 = v77[v29];
    if (!*(void *)(v32 + 16)) {
      goto LABEL_51;
    }
    unint64_t v83 = v29;
    swift_bridgeObjectRetain(v32);
    unint64_t v33 = OUTLINED_FUNCTION_24_34();
    if ((v34 & 1) != 0) {
      break;
    }
    OUTLINED_FUNCTION_20();
LABEL_50:
    unint64_t v29 = v83;
LABEL_51:
    if (++v29 == v82)
    {
      OUTLINED_FUNCTION_1_2();
LABEL_54:
      OUTLINED_FUNCTION_24_0();
      return;
    }
  }

  outlined init with copy of Any(*(void *)(v32 + 56) + 32 * v33, (uint64_t)&v106);
  outlined init with take of Any(&v106, &v109);
  uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  *(void *)&__int128 v106 = v32;
  uint64_t v35 = static INIntentResolutionResult.inferDescriptionStrings(input:)((uint64_t)&v106);
  __swift_destroy_boxed_opaque_existential_1Tm(&v106);
  uint64_t v91 = static INIntentResolutionResult.makeAsIdString(input:)((uint64_t)&v109);
  uint64_t v36 = v35;
  uint64_t v92 = v37;
  uint64_t v90 = *(void *)(v35 + 16);
  if (!v90)
  {
    swift_bridgeObjectRelease();
LABEL_49:
    OUTLINED_FUNCTION_13_32((uint64_t)&v112);
    __swift_destroy_boxed_opaque_existential_1Tm(&v109);
    goto LABEL_50;
  }

  uint64_t v38 = 0LL;
  uint64_t v76 = v36;
  uint64_t v89 = v36 + 32;
  uint64_t v39 = v102;
  while (1)
  {
    uint64_t v93 = v38;
    OUTLINED_FUNCTION_21_29((uint64_t)&v111);
    OUTLINED_FUNCTION_51_26((uint64_t)&v112);
    OUTLINED_FUNCTION_19_29(v91, (uint64_t)v9, 0xD000000000000012LL);
    uint64_t v40 = v15;
    uint64_t v15 = v105;
    OUTLINED_FUNCTION_19_29(v38, v40, 0xD000000000000010LL);
    uint64_t v41 = *(void (**)(uint64_t, char *, uint64_t))(v16 + 16);
    uint64_t v42 = v101;
    v41(v101, v39, v15);
    __swift_storeEnumTagSinglePayload(v42, 0LL, 1LL, v15);
    v41((uint64_t)v100, v23, v15);
    OUTLINED_FUNCTION_40_26();
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v94, v14, v5);
    if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0) {
      unint64_t v30 = (char *)OUTLINED_FUNCTION_22_31(0LL, *((void *)v30 + 2) + 1LL);
    }
    unint64_t v44 = *((void *)v30 + 2);
    unint64_t v43 = *((void *)v30 + 3);
    if (v44 >= v43 >> 1) {
      unint64_t v30 = (char *)OUTLINED_FUNCTION_22_31(v43 > 1, v44 + 1);
    }
    *((void *)v30 + outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v44 + 1;
    unint64_t v104 = (*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v103 = *(void *)(v6 + 72);
    uint64_t v98 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 32);
    v98(&v30[v104 + v103 * v44], v94, v5);
    if ((v88 & 1) != 0) {
      break;
    }
    uint64_t v6 = v87;
    OUTLINED_FUNCTION_36_25();
    uint64_t v16 = v99;
LABEL_45:
    uint64_t v39 = v102;
    uint64_t v38 = v93 + 1;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v14, v5);
    uint64_t v9 = *(void (**)(void, void))(v16 + 8);
    v9(v23, v15);
    v9(v39, v15);
    if (v38 == v90)
    {
      OUTLINED_FUNCTION_13_32((uint64_t)v107);
      uint64_t v31 = (uint64_t)v74;
      goto LABEL_49;
    }
  }

  static INIntentResolutionResult.inferOrdinalDisplayValues(index:count:)(v83, v82);
  uint64_t v46 = v45;
  uint64_t v47 = *(void *)(v45 + 16);
  if (v47)
  {
    uint64_t v81 = v30;
    *(void *)&__int128 v106 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v47, 0LL);
    uint64_t v48 = (char *)v106;
    uint64_t v80 = v46;
    uint64_t v49 = (void *)(v46 + 40);
    OUTLINED_FUNCTION_35_34();
    do
    {
      uint64_t v50 = *(v49 - 1);
      uint64_t v51 = *v49;
      swift_bridgeObjectRetain_n(*v49, 2LL);
      unint64_t v52 = v100;
      SemanticValue.init(string:label:)(v50, v51, 0xD000000000000015LL, v95);
      uint64_t v53 = v101;
      uint64_t v54 = v105;
      v41(v101, v102, v105);
      OUTLINED_FUNCTION_29_27(v53);
      uint64_t v14 = v96;
      v41((uint64_t)v96, v52, v54);
      DisplayHint.init(idValue:displayValue:)(v53, v14);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v52, v54);
      OUTLINED_FUNCTION_1_2();
      *(void *)&__int128 v106 = v48;
      unint64_t v56 = *((void *)v48 + 2);
      unint64_t v55 = *((void *)v48 + 3);
      if (v56 >= v55 >> 1)
      {
        BOOL v57 = OUTLINED_FUNCTION_47_24(v55);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57, v56 + 1, 1LL);
        uint64_t v48 = (char *)v106;
      }

      v49 += 2;
      *((void *)v48 + outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v56 + 1;
      v98(&v48[v104 + v56 * v103], (uint64_t)v30, v97);
      --v47;
    }

    while (v47);
    OUTLINED_FUNCTION_13_32((uint64_t)v110);
    uint64_t v15 = v105;
    uint64_t v23 = v78;
    unint64_t v30 = v81;
  }

  else
  {
    OUTLINED_FUNCTION_14();
    uint64_t v48 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v58 = *((void *)v48 + 2);
  uint64_t v59 = *((void *)v30 + 2);
  uint64_t v60 = v59 + v58;
  uint64_t v6 = v87;
  uint64_t v16 = v99;
  if (!__OFADD__(v59, v58))
  {
    if (v60 > *((void *)v30 + 3) >> 1)
    {
      if (v59 <= v60) {
        uint64_t v67 = v59 + v58;
      }
      else {
        uint64_t v67 = *((void *)v30 + 2);
      }
      unint64_t v30 = (char *)OUTLINED_FUNCTION_22_31(1LL, v67);
      if (!*((void *)v48 + 2)) {
        goto LABEL_43;
      }
LABEL_30:
      uint64_t v61 = *((void *)v30 + 2);
      if ((*((void *)v30 + 3) >> 1) - v61 < v58) {
        goto LABEL_57;
      }
      id v62 = &v30[v104 + v61 * v103];
      if (&v48[v104] < &v62[v58 * v103] && v62 < &v48[v104 + v58 * v103]) {
        goto LABEL_60;
      }
      swift_arrayInitWithCopy(v62);
      OUTLINED_FUNCTION_36_25();
      if (v58)
      {
        uint64_t v64 = *((void *)v30 + 2);
        BOOL v65 = __OFADD__(v64, v58);
        uint64_t v66 = v64 + v58;
        if (v65) {
          goto LABEL_58;
        }
        *((void *)v30 + outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v66;
      }
    }

    else
    {
      if (v58) {
        goto LABEL_30;
      }
LABEL_43:
      OUTLINED_FUNCTION_36_25();
      if (v58) {
        goto LABEL_56;
      }
    }

    OUTLINED_FUNCTION_20();
    uint64_t v5 = v97;
    goto LABEL_45;
  }

  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  OUTLINED_FUNCTION_23_33();
  OUTLINED_FUNCTION_14_40( (uint64_t)"Fatal error",  v68,  v69,  (uint64_t)"UnsafeMutablePointer.initialize overlapping range",  v70,  v71,  (uint64_t)"Swift/UnsafePointer.swift",  v72,  v73,  (uint64_t)v74,  v75);
  __break(1u);
}

uint64_t static INIntentResolutionResult.inferDescriptionStrings(input:)(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if (!swift_dynamicCast(&v87, v88, (char *)&type metadata for Any + 8, v1, 0LL))
  {
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    if (swift_dynamicCast(&v82, v88, (char *)&type metadata for Any + 8, v43, 0LL))
    {
      uint64_t v44 = *(void *)(v82 + 16);
      if (v44)
      {
        uint64_t v45 = v82 + 32;
        uint64_t v7 = _swiftEmptyArrayStorage;
        do
        {
          outlined init with copy of Any(v45, (uint64_t)&v84);
          uint64_t v46 = static INIntentResolutionResult.inferDescriptionStrings(input:)(&v84);
          uint64_t v47 = *(void *)(v46 + 16);
          uint64_t v48 = v7[2];
          if (__OFADD__(v48, v47)) {
            goto LABEL_110;
          }
          uint64_t v49 = v46;
          if (!swift_isUniquelyReferenced_nonNull_native(v7) || v48 + v47 > v7[3] >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v7 = v50;
          }

          if (*(void *)(v49 + 16))
          {
            uint64_t v51 = v7[2];
            if ((v7[3] >> 1) - v51 < v47) {
              goto LABEL_112;
            }
            unint64_t v52 = (unint64_t)&v7[2 * v51 + 4];
            if (v49 + 32 < v52 + 16 * v47 && v52 < v49 + 32 + 16 * v47) {
              goto LABEL_118;
            }
            swift_arrayInitWithCopy(v52);
            if (v47)
            {
              uint64_t v54 = v7[2];
              BOOL v41 = __OFADD__(v54, v47);
              uint64_t v55 = v54 + v47;
              if (v41) {
                goto LABEL_115;
              }
              v7[2] = v55;
            }
          }

          else if (v47)
          {
            goto LABEL_111;
          }

          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1Tm(&v84);
          v45 += 32LL;
          --v44;
        }

        while (v44);
        swift_bridgeObjectRelease();
        goto LABEL_103;
      }

      swift_bridgeObjectRelease();
LABEL_99:
      uint64_t v7 = _swiftEmptyArrayStorage;
      goto LABEL_103;
    }

    if (swift_dynamicCast(&v82, v88, (char *)&type metadata for Any + 8, &type metadata for Bool, 0LL))
    {
      int v56 = v82;
      uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v7 = (void *)swift_allocObject(v57, 48LL, 7LL);
      *((_OWORD *)v7 + 1) = xmmword_17E650;
      uint64_t v84 = 0LL;
      unint64_t v85 = 0xE000000000000000LL;
      if (v56) {
        uint64_t v58 = 1702195828LL;
      }
      else {
        uint64_t v58 = 0x65736C6166LL;
      }
      if (v56) {
        unint64_t v59 = 0xE400000000000000LL;
      }
      else {
        unint64_t v59 = 0xE500000000000000LL;
      }
      unint64_t v60 = v59;
      String.append(_:)(*(Swift::String *)&v58);
      swift_bridgeObjectRelease();
    }

    else
    {
      if (swift_dynamicCast(&v84, v88, (char *)&type metadata for Any + 8, &type metadata for Int, 0LL))
      {
        uint64_t v61 = v84;
        uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        uint64_t v7 = (void *)swift_allocObject(v62, 48LL, 7LL);
        *((_OWORD *)v7 + 1) = xmmword_17E650;
        *(void *)&__int128 v82 = v61;
        void v7[4] = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
        void v7[5] = v63;
LABEL_103:
        __swift_destroy_boxed_opaque_existential_1Tm(v88);
        return (uint64_t)v7;
      }

      if (!swift_dynamicCast( &v82,  v88,  (char *)&type metadata for Any + 8,  &type metadata for Double,  0LL))
      {
        uint64_t v68 = type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
        if (swift_dynamicCast(&v84, v88, (char *)&type metadata for Any + 8, v68, 0LL))
        {
          uint64_t v69 = v84;
          uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
          uint64_t v7 = (void *)swift_allocObject(v70, 48LL, 7LL);
          *((_OWORD *)v7 + 1) = xmmword_17E650;
          id v71 = [v69 stringValue];
          uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v74 = v73;

          void v7[4] = v72;
          void v7[5] = v74;

          goto LABEL_103;
        }

        if (swift_dynamicCast( &v84,  v88,  (char *)&type metadata for Any + 8,  &type metadata for String,  0LL))
        {
          int v75 = v84;
          unint64_t v76 = v85;
          uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
          uint64_t v7 = (void *)swift_allocObject(v77, 48LL, 7LL);
          *((_OWORD *)v7 + 1) = xmmword_17E650;
          void v7[4] = v75;
          void v7[5] = v76;
          goto LABEL_103;
        }

        goto LABEL_99;
      }

      double v64 = *(double *)&v82;
      uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v7 = (void *)swift_allocObject(v65, 48LL, 7LL);
      *((_OWORD *)v7 + 1) = xmmword_17E650;
      uint64_t v84 = 0LL;
      unint64_t v85 = 0xE000000000000000LL;
      Double.write<A>(to:)( &v84,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation,  v64);
    }

    unint64_t v66 = v85;
    void v7[4] = v84;
    void v7[5] = v66;
    goto LABEL_103;
  }

  int64_t v2 = 0LL;
  uint64_t v3 = *(void *)(v87 + 64);
  uint64_t v79 = v87 + 64;
  uint64_t v4 = 1LL << *(_BYTE *)(v87 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & v3;
  int64_t v80 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v81 = v87;
  uint64_t v78 = v87 + 104;
  uint64_t v7 = _swiftEmptyArrayStorage;
  if ((v5 & v3) == 0) {
    goto LABEL_7;
  }
LABEL_5:
  unint64_t v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v9 = v8 | (v2 << 6);
LABEL_6:
  uint64_t v10 = *(void *)(v81 + 56);
  uint64_t v11 = (void *)(*(void *)(v81 + 48) + 16 * v9);
  uint64_t v12 = v11[1];
  *(void *)&__int128 v82 = *v11;
  *((void *)&v82 + 1) = v12;
  outlined init with copy of Any(v10 + 32 * v9, (uint64_t)v83);
  swift_bridgeObjectRetain(v12);
  while (1)
  {
    outlined init with take of (key: String, value: Any)?((uint64_t)&v82, (uint64_t)&v84);
    unint64_t v16 = v85;
    if (!v85)
    {
      swift_release();
      goto LABEL_103;
    }

    uint64_t v17 = v84;
    outlined init with take of Any(&v86, &v82);
    if (one-time initialization token for interestingFields != -1) {
      swift_once( &one-time initialization token for interestingFields,  one-time initialization function for interestingFields);
    }
    uint64_t v18 = static INIntentResolutionResult.interestingFields;
    uint64_t v19 = *(void *)(static INIntentResolutionResult.interestingFields + 16);
    if (v19) {
      break;
    }
LABEL_56:
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm(&v82);
    if (v6) {
      goto LABEL_5;
    }
LABEL_7:
    int64_t v13 = v2 + 1;
    if (__OFADD__(v2, 1LL)) {
      goto LABEL_109;
    }
    if (v13 >= v80)
    {
      int64_t v15 = v2;
    }

    else
    {
      unint64_t v14 = *(void *)(v79 + 8 * v13);
      if (v14) {
        goto LABEL_10;
      }
      int64_t v15 = v2 + 1;
      if (v2 + 2 < v80)
      {
        unint64_t v14 = *(void *)(v79 + 8 * (v2 + 2));
        if (v14)
        {
          int64_t v13 = v2 + 2;
LABEL_10:
          unint64_t v6 = (v14 - 1) & v14;
          unint64_t v9 = __clz(__rbit64(v14)) + (v13 << 6);
          int64_t v2 = v13;
          goto LABEL_6;
        }

        int64_t v15 = v2 + 2;
        if (v2 + 3 < v80)
        {
          unint64_t v14 = *(void *)(v79 + 8 * (v2 + 3));
          if (v14)
          {
            int64_t v13 = v2 + 3;
            goto LABEL_10;
          }

          int64_t v13 = v2 + 4;
          int64_t v15 = v2 + 3;
          if (v2 + 4 < v80)
          {
            unint64_t v14 = *(void *)(v79 + 8 * v13);
            if (v14) {
              goto LABEL_10;
            }
            while (v2 + 5 < v80)
            {
              unint64_t v14 = *(void *)(v78 + 8 * v2++);
              if (v14)
              {
                int64_t v13 = v2 + 4;
                goto LABEL_10;
              }
            }

            int64_t v15 = v80 - 1;
          }
        }
      }
    }

    unint64_t v6 = 0LL;
    memset(v83, 0, sizeof(v83));
    int64_t v2 = v15;
    __int128 v82 = 0u;
  }

  uint64_t v20 = *(void **)(static INIntentResolutionResult.interestingFields + 32);
  uint64_t v21 = *(void *)(static INIntentResolutionResult.interestingFields + 40);
  BOOL v22 = v20 == v17 && v21 == v16;
  if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, v17, v16, 0LL) & 1) != 0) {
    goto LABEL_38;
  }
  if (v19 == 1) {
    goto LABEL_56;
  }
  uint64_t v23 = *(void **)(v18 + 48);
  uint64_t v24 = *(void *)(v18 + 56);
  BOOL v25 = v23 == v17 && v24 == v16;
  if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v17, v16, 0LL) & 1) != 0)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    uint64_t v32 = static INIntentResolutionResult.inferDescriptionStrings(input:)(&v82);
    uint64_t v33 = *(void *)(v32 + 16);
    uint64_t v34 = v7[2];
    if (__OFADD__(v34, v33)) {
      goto LABEL_113;
    }
    uint64_t v35 = v32;
    if (!swift_isUniquelyReferenced_nonNull_native(v7) || v34 + v33 > v7[3] >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v7 = v36;
    }

    if (*(void *)(v35 + 16))
    {
      uint64_t v37 = v7[2];
      if ((v7[3] >> 1) - v37 < v33) {
        goto LABEL_116;
      }
      unint64_t v38 = (unint64_t)&v7[2 * v37 + 4];
      if (v35 + 32 < v38 + 16 * v33 && v38 < v35 + 32 + 16 * v33) {
        goto LABEL_118;
      }
      swift_arrayInitWithCopy(v38);
      if (v33)
      {
        uint64_t v40 = v7[2];
        BOOL v41 = __OFADD__(v40, v33);
        uint64_t v42 = v40 + v33;
        if (v41) {
          goto LABEL_117;
        }
        v7[2] = v42;
      }
    }

    else if (v33)
    {
      goto LABEL_114;
    }

    goto LABEL_56;
  }

  if (v19 == 2) {
    goto LABEL_56;
  }
  char v26 = (uint64_t *)(v18 + 72);
  uint64_t v27 = 2LL;
  while (1)
  {
    uint64_t v28 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    unint64_t v29 = (void *)*(v26 - 1);
    uint64_t v30 = *v26;
    BOOL v31 = v29 == v17 && v30 == v16;
    if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, v17, v16, 0LL) & 1) != 0) {
      goto LABEL_38;
    }
    v26 += 2;
    ++v27;
    if (v28 == v19) {
      goto LABEL_56;
    }
  }

  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  __break(1u);
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

uint64_t closure #1 in static INIntentResolutionResult.makeOrdinalDisplayHints(idValue:index:count:)( uint64_t *a1, uint64_t a2)
{
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for SemanticValue(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_31_9();
  uint64_t v12 = v10 - v11;
  __chkstk_darwin(v13);
  int64_t v15 = (char *)&v20 - v14;
  uint64_t v16 = *a1;
  uint64_t v17 = a1[1];
  swift_bridgeObjectRetain(v17);
  SemanticValue.init(string:label:)(v16, v17, 0xD000000000000015LL, 0x8000000000194CC0LL);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v18(v7, a2, v8);
  __swift_storeEnumTagSinglePayload(v7, 0LL, 1LL, v8);
  v18(v12, (uint64_t)v15, v8);
  DisplayHint.init(idValue:displayValue:)(v7, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v15, v8);
}

uint64_t static INIntentResolutionResult.encodeDictionary(input:)()
{
  uint64_t v0 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v16 = 0LL;
  id v2 = [v0 dataWithJSONObject:isa options:2 error:&v16];

  id v3 = v16;
  if (v2)
  {
    uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
    unint64_t v6 = v5;

    uint64_t countAndFlagsBits = Data.base64EncodedString(options:)(0LL)._countAndFlagsBits;
    outlined consume of Data._Representation(v4, v6);
  }

  else
  {
    uint64_t v8 = v3;
    uint64_t v9 = _convertNSErrorToError(_:)(v3);

    swift_willThrow(v10, v11, v12, v13, v14);
    swift_errorRelease(v9);
    return 0LL;
  }

  return countAndFlagsBits;
}

uint64_t static INIntentResolutionResult.base64FromString(string:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for String.Encoding(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static String.Encoding.utf8.getter(v6);
  uint64_t v9 = String.data(using:allowLossyConversion:)(v8, 0LL, a1, a2);
  unint64_t v11 = v10;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if (v11 >> 60 == 15) {
    return 0LL;
  }
  uint64_t countAndFlagsBits = Data.base64EncodedString(options:)(0LL)._countAndFlagsBits;
  outlined consume of Data?(v9, v11);
  return countAndFlagsBits;
}

uint64_t outlined bridged method (pb) of @objc INCodableEnumValue.synonyms.getter(void *a1)
{
  id v1 = [a1 synonyms];
  if (!v1) {
    return 0LL;
  }
  id v2 = v1;
  uint64_t v3 = type metadata accessor for NSError( 0LL,  &lazy cache variable for type metadata for INCodableEnumValueSynonym,  &OBJC_CLASS___INCodableEnumValueSynonym_ptr);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

id outlined bridged method (mbgnn) of @objc INCodableEnumAttribute.value(withName:)( uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [a3 valueWithName:v4];

  return v5;
}

uint64_t outlined bridged method (mbgnb) of @objc INCodableEnumValueSynonym.localizedSynonym(forLanguage:)( uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = objc_msgSend(a3, *a4, v6);

  if (!v7) {
    return 0LL;
  }
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

  return v8;
}

id outlined bridged method (mbnn) of @objc INCodableEnumAttribute.value(withName:)( uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_20();
  id v5 = [a3 valueWithName:v4];

  return v5;
}

uint64_t OUTLINED_FUNCTION_5_44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v5 - 120, v5 - 104, v4 + 8, a4, 6LL);
}

unint64_t OUTLINED_FUNCTION_6_46()
{
  return specialized __RawDictionaryStorage.find<A>(_:)(0x6F697463656C6573LL, 0xEE00736D6574496ELL);
}

uint64_t OUTLINED_FUNCTION_9_40(uint64_t a1)
{
  return outlined init with copy of Any(*(void *)(v1 + 56) + 32 * a1, v2 - 128);
}

uint64_t OUTLINED_FUNCTION_13_32@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(a1 - 256));
}

uint64_t OUTLINED_FUNCTION_14_40( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, 49LL, 2LL, a7, 25LL, a9, a10, a11);
}

uint64_t OUTLINED_FUNCTION_19_29(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SemanticValue.init(string:label:)(a1, a2, a3, *(void *)(v3 - 256));
}

uint64_t OUTLINED_FUNCTION_21_29@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRetain(*(void *)(*(void *)(a1 - 256) + 16 * v1 + 8));
}

uint64_t OUTLINED_FUNCTION_22_31(uint64_t a1, uint64_t a2)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1LL, v2);
}

  ;
}

unint64_t OUTLINED_FUNCTION_24_34()
{
  return specialized __RawDictionaryStorage.find<A>(_:)(0x65756C6176LL, 0xE500000000000000LL);
}

uint64_t OUTLINED_FUNCTION_25_33( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  return swift_dynamicCast(&a9, &a11, v11, a4, 0LL);
}

  ;
}

uint64_t OUTLINED_FUNCTION_29_27(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 0LL, 1LL, v1);
}

  ;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_37_26()
{
  return outlined consume of Data?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_39_26()
{
  return type metadata accessor for DisplayHint(0LL);
}

uint64_t OUTLINED_FUNCTION_40_26()
{
  return DisplayHint.init(idValue:displayValue:)(v0, v1);
}

uint64_t OUTLINED_FUNCTION_41_28()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t OUTLINED_FUNCTION_42_23()
{
  return outlined consume of Data?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_43_27()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

_WORD *OUTLINED_FUNCTION_46_28(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

BOOL OUTLINED_FUNCTION_47_24@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void OUTLINED_FUNCTION_48_23()
{
}

uint64_t OUTLINED_FUNCTION_49_20(uint64_t a1, uint64_t a2)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1LL, v2);
}

  ;
}

uint64_t OUTLINED_FUNCTION_51_26@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRetain(*(void *)(a1 - 256));
}

uint64_t WFConfirmInteractionFlow.exitValue.getter()
{
  uint64_t v1 = *(void **)(v0 + 120);
  int v2 = *(unsigned __int8 *)(v0 + 128);
  if (v2 == 2)
  {
    OUTLINED_FUNCTION_46_0();
  }

  else if (v2 == 1)
  {
    id v3 = v1;
  }

  else
  {
    unint64_t v4 = lazy protocol witness table accessor for type WorkflowConfirmInteractionError and conformance WorkflowConfirmInteractionError();
    return swift_allocError(&type metadata for WorkflowConfirmInteractionError, v4, 0LL, 0LL);
  }

  return (uint64_t)v1;
}

unint64_t lazy protocol witness table accessor for type WorkflowConfirmInteractionError and conformance WorkflowConfirmInteractionError()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowConfirmInteractionError and conformance WorkflowConfirmInteractionError;
  if (!lazy protocol witness table cache variable for type WorkflowConfirmInteractionError and conformance WorkflowConfirmInteractionError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowConfirmInteractionError,  &type metadata for WorkflowConfirmInteractionError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowConfirmInteractionError and conformance WorkflowConfirmInteractionError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowConfirmInteractionError and conformance WorkflowConfirmInteractionError;
  if (!lazy protocol witness table cache variable for type WorkflowConfirmInteractionError and conformance WorkflowConfirmInteractionError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowConfirmInteractionError,  &type metadata for WorkflowConfirmInteractionError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowConfirmInteractionError and conformance WorkflowConfirmInteractionError);
  }

  return result;
}

uint64_t WFConfirmInteractionFlow.__allocating_init(shortcutName:request:appBundleId:deviceState:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v13 = OUTLINED_FUNCTION_19(v6, 129LL);
  WFConfirmInteractionFlow.init(shortcutName:request:appBundleId:deviceState:)(a1, a2, a3, a4, a5, a6);
  return v13;
}

os_log_s *WFConfirmInteractionFlow.init(shortcutName:request:appBundleId:deviceState:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v8 = v6;
  uint64_t v15 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_18_11();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v16 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v16, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v17 = OUTLINED_FUNCTION_58();
  if (os_log_type_enabled(v6, v17))
  {
    unint64_t v38 = a3;
    uint64_t v18 = a6;
    uint64_t v19 = a1;
    uint64_t v20 = a2;
    uint64_t v21 = a4;
    uint64_t v22 = a5;
    uint64_t v23 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    *(_WORD *)uint64_t v23 = 0;
    OUTLINED_FUNCTION_47_1(&dword_0, v6, v17, "#WFConfirmInteractionFlow initialized.", v23);
    uint64_t v24 = (uint64_t)v23;
    a5 = v22;
    a4 = v21;
    a2 = v20;
    a1 = v19;
    a6 = v18;
    a3 = v38;
    OUTLINED_FUNCTION_1_0(v24);
  }

  *((void *)v6 + outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = a1;
  *((void *)v6 + 3) = a2;
  *((void *)v6 + 4) = a3;
  *((void *)v6 + 5) = a4;
  *((void *)v6 + 6) = a5;
  outlined init with copy of DeviceState((uint64_t)a6, (uint64_t)v6 + 56);
  type metadata accessor for WorkflowSnippetProvider();
  id v39 = a3;
  *((void *)v6 + 1outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = static WorkflowSnippetProvider.getSnippetProvider(deviceState:)(a6);
  outlined init with copy of DeviceState((uint64_t)a6, (uint64_t)v40);
  if (one-time initialization token for shared != -1) {
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  }
  uint64_t v25 = static WFDialogState.shared;
  type metadata accessor for WorkflowRunnerCATs(0LL);
  uint64_t v26 = swift_retain(v25);
  static CATOption.defaultMode.getter(v26);
  uint64_t v37 = OUTLINED_FUNCTION_20_36();
  type metadata accessor for WorkflowRunnerCATsSimple(0LL);
  OUTLINED_FUNCTION_6_47();
  uint64_t v27 = OUTLINED_FUNCTION_96(v7);
  type metadata accessor for RunCustomIntentCATs(0LL);
  OUTLINED_FUNCTION_6_47();
  uint64_t v28 = OUTLINED_FUNCTION_20_36();
  type metadata accessor for RunCustomIntentCATsSimple(0LL);
  OUTLINED_FUNCTION_6_47();
  uint64_t v29 = OUTLINED_FUNCTION_96(v7);
  type metadata accessor for RunVoiceCommandCATs(0LL);
  OUTLINED_FUNCTION_6_47();
  uint64_t v30 = OUTLINED_FUNCTION_20_36();
  type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  OUTLINED_FUNCTION_6_47();
  uint64_t v31 = OUTLINED_FUNCTION_96(v7);
  type metadata accessor for WorkflowRunnerCATPatternsExecutor(0LL);
  OUTLINED_FUNCTION_6_47();
  uint64_t v32 = OUTLINED_FUNCTION_20_36();

  __swift_destroy_boxed_opaque_existential_1Tm(a6);
  uint64_t v33 = type metadata accessor for WorkflowDialogTemplating();
  OUTLINED_FUNCTION_19(v33, 120LL);
  WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)( (uint64_t)v40,  v25,  v37,  v27,  v28,  v29,  v30,  v31,  v32);
  *((void *)v8 + 13) = v34;
  uint64_t v35 = type metadata accessor for WorkflowNLContextProvider();
  *((void *)v8 + 14) = OUTLINED_FUNCTION_19(v35, 16LL);
  *((void *)v8 + 15) = 0LL;
  *((_BYTE *)v8 + 128) = 3;
  return v8;
}

uint64_t WFConfirmInteractionFlow.on(input:)()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for Parse(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_18_11();
  if (*(_BYTE *)(v0 + 128) != 3 || *(void *)(v0 + 120) != 1LL) {
    return 0LL;
  }
  Input.parse.getter(v5);
  unsigned __int8 v7 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  if (v7 == 3) {
    return 0LL;
  }
  uint64_t v9 = *(void **)(v2 + 120);
  *(void *)(v2 + 120) = v7;
  char v10 = *(_BYTE *)(v2 + 128);
  *(_BYTE *)(v2 + 128) = 0;
  outlined consume of WFShowAlertFlow.State(v9, v10);
  return 1LL;
}

uint64_t WFConfirmInteractionFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 136) = a1;
  *(void *)(v2 + 144) = v1;
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v3, v4, v5);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  static OutputPublisherFactory.makeOutputPublisherAsync()(v1 + 7, a1);
  uint64_t v2 = v1[10];
  uint64_t v3 = v1[11];
  __swift_project_boxed_opaque_existential_1(v1 + 7, v2);
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  v1[21] = v4;
  *uint64_t v4 = v1;
  v4[1] = WFConfirmInteractionFlow.execute();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v1 + 2, v2, v3);
}

void WFConfirmInteractionFlow.execute()()
{
  __asm { BR              X10 }

uint64_t sub_13A67C()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v4 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v4, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v5 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v5))
  {
    uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_57_1();
    *uint64_t v6 = 0;
    OUTLINED_FUNCTION_33_2(&dword_0, v7, v8, "#WFConfirmInteractionFlow responseReceived");
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
  }

  if (v0 - 1 >= 2)
  {
    if (v0)
    {
      uint64_t v14 = *(void **)(v3 + 120);
      *(void *)(v3 + 120) = 0LL;
      char v15 = *(_BYTE *)(v3 + 128);
      *(_BYTE *)(v3 + 128) = 3;
      outlined consume of WFShowAlertFlow.State(v14, v15);
      static ExecuteResponse.ongoing(requireInput:)(0LL);
      return (*(uint64_t (**)(void))(v2 + 8))();
    }

    uint64_t v9 = 1LL;
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  id v10 = [objc_allocWithZone(WFConfirmInteractionDialogResponse) initWithInteractionResponseCode:v9];
  uint64_t v11 = *(void **)(v3 + 120);
  *(void *)(v3 + 120) = v10;
  char v12 = *(_BYTE *)(v3 + 128);
  *(_BYTE *)(v3 + 128) = 1;
  id v13 = v10;
  outlined consume of WFShowAlertFlow.State(v11, v12);
  static ExecuteResponse.ongoing(requireInput:)(0LL);

  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t WFConfirmInteractionFlow.execute()()
{
  *uint64_t v2 = *v1;
  *(void *)(v3 + 160) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  OUTLINED_FUNCTION_50_0();
  *uint64_t v2 = *v1;
  *(void *)(v3 + 176) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char v3;
  uint64_t v1 = *(void *)(v0 + 144);
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 56));
  uint64_t v2 = *(void **)(v1 + 120);
  *(void *)(v1 + 120) = 1LL;
  uint64_t v3 = *(_BYTE *)(v1 + 128);
  *(_BYTE *)(v1 + 128) = 3;
  outlined consume of WFShowAlertFlow.State(v2, v3);
  static ExecuteResponse.ongoing(requireInput:)(1LL);
  OUTLINED_FUNCTION_98_1();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v2 = *(void *)(v1 + 160);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v3, (uint64_t)static Logger.voiceCommands);
  uint64_t v4 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_31_0(v4))
  {
    os_log_type_t v5 = (_WORD *)OUTLINED_FUNCTION_57_1();
    *os_log_type_t v5 = 0;
    OUTLINED_FUNCTION_33_2(&dword_0, v6, v7, "#WFConfirmInteractionFlow error creating or submitting output");
    OUTLINED_FUNCTION_1_0((uint64_t)v5);
  }

  OUTLINED_FUNCTION_27_22();
  OUTLINED_FUNCTION_53_17();
  swift_errorRelease(v2);
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
  OUTLINED_FUNCTION_98_1();
  uint64_t v1 = *(void *)(v0 + 176);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v2 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v2, (uint64_t)static Logger.voiceCommands);
  uint64_t v3 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_31_0(v3))
  {
    uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_57_1();
    *uint64_t v4 = 0;
    OUTLINED_FUNCTION_33_2(&dword_0, v5, v6, "#WFConfirmInteractionFlow error creating or submitting output");
    OUTLINED_FUNCTION_1_0((uint64_t)v4);
  }

  OUTLINED_FUNCTION_27_22();
  OUTLINED_FUNCTION_53_17();
  swift_errorRelease(v1);
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t WFConfirmInteractionFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WFConfirmInteractionFlow();
  uint64_t v6 = lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow( &lazy protocol witness table cache variable for type WFConfirmInteractionFlow and conformance WFConfirmInteractionFlow,  v5,  (uint64_t (*)(uint64_t))type metadata accessor for WFConfirmInteractionFlow,  (uint64_t)&protocol conformance descriptor for WFConfirmInteractionFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v6);
}

uint64_t WFConfirmInteractionFlow.buildOutput()(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  uint64_t v3 = type metadata accessor for CATOption(0LL);
  v2[14] = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[15] = OUTLINED_FUNCTION_9_0(*(void *)(v4 - 8));
  uint64_t v5 = type metadata accessor for DialogPhase(0LL);
  v2[16] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[17] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[18] = swift_task_alloc(v7);
  v2[19] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[20] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[21] = v9;
  v2[22] = OUTLINED_FUNCTION_9_0(v9);
  uint64_t v10 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  v2[23] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[24] = v11;
  v2[25] = OUTLINED_FUNCTION_9_0(v11);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v3 = *v2;
  *(void *)(v3 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = a1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_33_0();
    OUTLINED_FUNCTION_31();
    return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v3 + 8));
  }

  else
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

uint64_t WFConfirmInteractionFlow.buildOutput()()
{
  uint64_t v1 = v0[24];
  (*(void (**)(void, void, void))(v1 + 104))( v0[25],  enum case for RFFeatureFlags.ResponseFramework._SMART(_:),  v0[23]);
  char v2 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  if ((v2 & 1) != 0)
  {
    uint64_t v3 = OUTLINED_FUNCTION_4_46();
    if ((dispatch thunk of DeviceState.isHomePod.getter(v3) & 1) != 0)
    {
      uint64_t v4 = v0[13];
      type metadata accessor for WFDialogState();
      char v5 = static WFDialogState.isAppFirstRun(appId:)(*(void *)(v4 + 40), *(void *)(v4 + 48));
    }

    else
    {
      char v5 = 0;
    }

    uint64_t v10 = v0[13];
    uint64_t v11 = *(void *)(v10 + 104);
    uint64_t v12 = *(void *)(v10 + 32);
    v0[26] = v12;
    id v13 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(*(void *)v11 + 176LL));
    v0[27] = v13;
    *id v13 = v0;
    v13[1] = WFConfirmInteractionFlow.buildOutput();
    return v14(v12, v5 & 1);
  }

  else
  {
    uint64_t v6 = (void *)v0[12];
    v6[3] = type metadata accessor for AceOutput(0LL);
    void v6[4] = &protocol witness table for AceOutput;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v6);
    uint64_t v8 = (void *)swift_task_alloc(dword_21D85C);
    v0[50] = v8;
    *uint64_t v8 = v0;
    v8[1] = WFConfirmInteractionFlow.buildOutput();
    return WFConfirmInteractionFlow.buildOutput_prerfv2()((uint64_t)boxed_opaque_existential_1);
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 248));
  OUTLINED_FUNCTION_20();
  swift_release();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 168);

  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_34_32();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  void *v0;
  unint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char v2 = (void *)v0[32];
  uint64_t v1 = v0[33];
  uint64_t v3 = v0[13];
  type metadata accessor for App(0LL);
  uint64_t v4 = *(void *)(v3 + 40);
  char v5 = *(void *)(v3 + 48);
  OUTLINED_FUNCTION_11_11();
  uint64_t v6 = App.__allocating_init(appIdentifier:)(v4, v5);
  v0[42] = v6;
  unint64_t v7 = [v2 _title];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  v0[43] = v9;
  v0[44] = [v2 _keyImage];
  uint64_t v10 = (void *)swift_task_alloc(dword_21E47C);
  v0[45] = v10;
  *uint64_t v10 = v0;
  v10[1] = WFConfirmInteractionFlow.buildOutput();
  return static WorkflowDataModels.modelForCustomIntentConfirmation(app:intent:intentResponse:deviceState:confirmLabel:cancelLabel:title:image:)( (unint64_t)(v0 + 2),  v6,  v0[32],  v1,  v3 + 56,  v0[41],  v0[37],  v0[40]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v4 = *v1;
  char v2 = v4;
  OUTLINED_FUNCTION_10_0(&v4);
  *(void *)(v2 + 368) = v0;
  swift_task_dealloc();
  swift_release();

  OUTLINED_FUNCTION_14();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_20();
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  char *v15;
  uint64_t v16;
  uint64_t v1 = (void *)v0[28];
  char v2 = type metadata accessor for ResponseFactory(0LL);
  uint64_t v3 = OUTLINED_FUNCTION_51(v2);
  v0[47] = ResponseFactory.init()(v3);
  uint64_t v4 = v0[5];
  char v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v4);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v0[10] = type metadata accessor for WorkflowDataModels(0LL);
  v0[11] = lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow( (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels,  255LL,  type metadata accessor for WorkflowDataModels,  (uint64_t)&protocol conformance descriptor for WorkflowDataModels);
  __swift_allocate_boxed_opaque_existential_1(v0 + 7);
  v6(v4, v5);
  unint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v8 = OUTLINED_FUNCTION_19(v7, 40LL);
  *(_OWORD *)(v8 + 16) = xmmword_17E150;
  *(void *)(v8 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v1;
  uint64_t v16 = v8;
  specialized Array._endMutation()(v8, v9, v10);
  v0[48] = v16;
  uint64_t v12 = v1;
  id v13 = (void *)swift_task_alloc(v11);
  v0[49] = v13;
  *id v13 = v0;
  v13[1] = WFConfirmInteractionFlow.buildOutput();
  return ((uint64_t (*)(void, void *, uint64_t, void))v15)(v0[12], v0 + 7, v16, v0[22]);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 392));
  swift_release();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_98_1();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v1 = *(void **)(v0 + 264);
  char v2 = *(void **)(v0 + 256);
  uint64_t v3 = *(void **)(v0 + 224);
  char v5 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v6 = *(void *)(v0 + 160);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  OUTLINED_FUNCTION_98_1();
  OUTLINED_FUNCTION_34_32();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v7 = *v1;
  char v2 = v7;
  OUTLINED_FUNCTION_10_0(&v7);
  *(void *)(v2 + 408) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_45_7(v3, v4, v5);
  }

  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_33_0();
    return OUTLINED_FUNCTION_18_2((uint64_t (*)(void))v1[1]);
  }

{
  uint64_t v0;
  __swift_deallocate_boxed_opaque_existential_1(*(void **)(v0 + 96));
  OUTLINED_FUNCTION_12_34();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v1 = *(void **)(v0 + 264);
  char v2 = *(void **)(v0 + 256);
  uint64_t v3 = *(void **)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 168);
  swift_release();

  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  OUTLINED_FUNCTION_12_34();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v1 = *(void **)(v0 + 264);
  char v2 = *(void **)(v0 + 256);
  uint64_t v3 = *(void **)(v0 + 224);
  char v5 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v6 = *(void *)(v0 + 160);
  swift_release();

  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  OUTLINED_FUNCTION_12_34();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t WFConfirmInteractionFlow.buildOutput()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)v3[28];
  uint64_t v6 = v3[18];
  uint64_t v5 = v3[19];
  uint64_t v8 = v3[16];
  uint64_t v7 = v3[17];
  id v56 = (id)v3[26];
  uint64_t v57 = v3[15];
  uint64_t v9 = (void *)v3[13];
  static DialogPhase.confirmation.getter(a1, a2, a3);
  id v10 = [v4 catId];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v5, v8);
  OutputGenerationManifest.init(dialogPhase:_:)(v6, CustomIntentDisambiguationItemContainer.init(items:), 0LL);
  OutputGenerationManifest.responseViewId.setter(v11);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v8);
  uint64_t v12 = v9[14];
  id v13 = [v56 interaction];
  id v14 = [v13 intent];

  (*(void (**)(id))(*(void *)v12 + 192LL))(v14);
  uint64_t v15 = type metadata accessor for NLContextUpdate(0LL);
  __swift_storeEnumTagSinglePayload(v57, 0LL, 1LL, v15);
  OutputGenerationManifest.nlContextUpdate.setter(v57);
  OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
  OutputGenerationManifest.canUseServerTTS.setter(1LL);
  uint64_t v16 = v9[10];
  __swift_project_boxed_opaque_existential_1(v9 + 7, v16);
  if ((dispatch thunk of DeviceState.isHomePod.getter(v16) & 1) != 0
    || (uint64_t v17 = OUTLINED_FUNCTION_4_46(), (dispatch thunk of DeviceState.isMac.getter(v17, v18) & 1) != 0)
    || (uint64_t v19 = OUTLINED_FUNCTION_4_46(), (dispatch thunk of DeviceState.isCarPlay.getter(v19, v20) & 1) != 0))
  {
    uint64_t v21 = (void *)v3[28];
    uint64_t v22 = type metadata accessor for ResponseFactory(0LL);
    uint64_t v23 = OUTLINED_FUNCTION_51(v22);
    v3[29] = ResponseFactory.init()(v23);
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v25 = OUTLINED_FUNCTION_19(v24, 40LL);
    *(_OWORD *)(v25 + 16) = xmmword_17E150;
    *(void *)(v25 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = v21;
    *(void *)&v60[0] = v25;
    specialized Array._endMutation()(v25, v26, v27);
    uint64_t v28 = *(void *)&v60[0];
    v3[30] = *(void *)&v60[0];
    id v30 = v21;
    uint64_t v31 = (void *)swift_task_alloc(v29);
    v3[31] = v31;
    *uint64_t v31 = v3;
    v31[1] = WFConfirmInteractionFlow.buildOutput();
    return ((uint64_t (*)(void, uint64_t, void))v58)(v3[12], v28, v3[22]);
  }

  else
  {
    id v33 = OUTLINED_FUNCTION_44_18();
    id v34 = [v33 intent];
    v3[32] = v34;

    id v35 = OUTLINED_FUNCTION_44_18();
    v3[33] = [v35 intentResponse];

    static Device.current.getter(v60, v36);
    if (one-time initialization token for shared != -1) {
      swift_once(&one-time initialization token for shared, one-time initialization function for shared);
    }
    uint64_t v37 = v3[14];
    uint64_t v38 = static WFDialogState.shared;
    type metadata accessor for RunCustomIntentCATs(0LL);
    uint64_t v39 = swift_retain(v38);
    static CATOption.defaultMode.getter(v39);
    uint64_t v40 = OUTLINED_FUNCTION_51_2();
    type metadata accessor for RunCustomIntentCATsSimple(0LL);
    OUTLINED_FUNCTION_29_2();
    uint64_t v41 = OUTLINED_FUNCTION_96(v37);
    type metadata accessor for RunVoiceCommandCATs(0LL);
    OUTLINED_FUNCTION_29_2();
    uint64_t v42 = OUTLINED_FUNCTION_51_2();
    type metadata accessor for RunVoiceCommandCATsSimple(0LL);
    OUTLINED_FUNCTION_29_2();
    uint64_t v43 = OUTLINED_FUNCTION_96(v37);
    uint64_t v44 = type metadata accessor for AppNameResolver();
    uint64_t v45 = OUTLINED_FUNCTION_19(v44, 16LL);
    uint64_t v46 = type metadata accessor for CustomIntentsDialogTemplating();
    uint64_t v47 = OUTLINED_FUNCTION_19(v46, 152LL);
    specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)( v60,  v38,  0LL,  1,  v40,  v41,  v42,  v43,  v45,  v47);
    uint64_t v49 = v48;
    v3[34] = v48;
    id v50 = [v34 verb];
    uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v53 = v52;

    v3[35] = v53;
    uint64_t v54 = *(int **)(*(void *)v49 + 152LL);
    unint64_t v59 = (uint64_t (*)(uint64_t, uint64_t))((char *)v54 + *v54);
    uint64_t v55 = (void *)swift_task_alloc(v54[1]);
    v3[36] = v55;
    *uint64_t v55 = v3;
    v55[1] = WFConfirmInteractionFlow.buildOutput();
    return v59(v51, v53);
  }

{
  uint64_t v3;
  void *v4;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  id v14 = (void *)*v4;
  uint64_t v7 = v14;
  OUTLINED_FUNCTION_10_0(&v14);
  v7[37] = v8;
  v7[38] = v9;
  v7[39] = v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v3)
  {
    v7[40] = a3;
    v7[41] = a1;
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_45_7(v10, v11, v12);
}

uint64_t WFConfirmInteractionFlow.buildOutput_prerfv2()(uint64_t a1)
{
  v2[7] = a1;
  _BYTE v2[8] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[9] = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for NLContextUpdate(0LL);
  v2[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[11] = v5;
  v2[12] = OUTLINED_FUNCTION_9_0(v5);
  uint64_t v6 = type metadata accessor for TemplatingResult(0LL);
  v2[13] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[14] = v7;
  v2[15] = OUTLINED_FUNCTION_9_0(v7);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v1;
  *(void *)(*(void *)v1 + 16Hasher.init(_seed:)(v3, 0LL) = a1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WFConfirmInteractionFlow.buildOutput_prerfv2()()
{
  uint64_t v1 = (void *)v0[8];
  uint64_t v2 = v1[12];
  uint64_t v3 = v1[4];
  v0[16] = v3;
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[5];
  v0[17] = v6;
  uint64_t v7 = v1[6];
  v0[18] = v7;
  uint64_t v8 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(*(void *)v2 + 104LL));
  v0[19] = v8;
  *uint64_t v8 = v0;
  v8[1] = WFConfirmInteractionFlow.buildOutput_prerfv2();
  return v10(v3, v4, v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t (*v9)(void, void, void);
  uint64_t v1 = v0[20];
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v3 = v0[20];
    }
    else {
      uint64_t v3 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v0[20]);
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v3);
    OUTLINED_FUNCTION_20();
    if (v4) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v5 = v0[17];
    uint64_t v6 = v0[18];
    type metadata accessor for WFDialogState();
    uint64_t v2 = static WFDialogState.isAppFirstRun(appId:)(v5, v6);
    goto LABEL_9;
  }

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v4 = *v1;
  uint64_t v2 = v4;
  OUTLINED_FUNCTION_10_0(&v4);
  *(void *)(v2 + 176) = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Bool v19;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void *v24;
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = *(void **)(v1 + 64);
  uint64_t v4 = v3[14];
  uint64_t v5 = [*(id *)(v1 + 128) interaction];
  uint64_t v6 = [v5 intent];

  (*(void (**)(id))(*(void *)v4 + 192LL))(v6);
  uint64_t v7 = v3[10];
  uint64_t v8 = v3[11];
  uint64_t v24 = v3 + 7;
  __swift_project_boxed_opaque_existential_1(v3 + 7, v7);
  uint64_t v23 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v7, v8);
  uint64_t v9 = *(void *)(v1 + 160);
  if (v2 >> 62)
  {
    if (v9 < 0) {
      uint64_t v12 = *(void *)(v1 + 160);
    }
    else {
      uint64_t v12 = v9 & 0xFFFFFFFFFFFFFF8LL;
    }
    id v13 = type metadata accessor for SAAceView();
    OUTLINED_FUNCTION_11_11();
    uint64_t v11 = _bridgeCocoaArray<A>(_:)(v12, v13);
    swift_bridgeObjectRelease();
  }

  else
  {
    id v10 = OUTLINED_FUNCTION_11_11();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v10);
    type metadata accessor for SAAceView();
    uint64_t v11 = *(void *)(v1 + 160);
  }

  id v14 = *(void *)(v1 + 120);
  uint64_t v15 = *(void *)(v1 + 96);
  uint64_t v21 = *(void *)(v1 + 112);
  uint64_t v22 = *(void *)(v1 + 104);
  uint64_t v17 = *(void *)(v1 + 80);
  uint64_t v16 = *(void *)(v1 + 88);
  uint64_t v18 = *(void *)(v1 + 72);
  swift_bridgeObjectRelease();
  uint64_t v19 = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v18, v15, v17);
  __swift_storeEnumTagSinglePayload(v18, 0LL, 1LL, v17);
  *(void *)(v1 + 48) = 0LL;
  *(_OWORD *)(v1 + 3outlined init with take of AutoShortcutsSetEnablementFlow.State(v0 + 11, v0 + 2) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v14,  v24,  v23 & 1,  v11,  v19,  1LL,  v18,  _swiftEmptyArrayStorage,  v1 + 16);
  OUTLINED_FUNCTION_14();
  outlined destroy of URL?(v1 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v18, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v14, v22);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_18_0();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

{
  uint64_t v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t type metadata accessor for WFConfirmInteractionFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin24WFConfirmInteractionFlow);
}

uint64_t storeEnumTagSinglePayload for WorkflowConfirmInteractionError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_13C15C + 4 * byte_18A5F4[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_13C17C + 4 * byte_18A5F9[v4]))();
  }
}

_BYTE *sub_13C15C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_13C17C(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_13C184(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_13C18C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_13C194(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_13C19C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for WorkflowConfirmInteractionError()
{
  return &type metadata for WorkflowConfirmInteractionError;
}

void *type metadata accessor for WFConfirmInteractionFlow.State()
{
  return &unk_1FD620;
}

uint64_t OUTLINED_FUNCTION_4_46()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v1 + 80);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 56), v2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_6_47()
{
  return static CATOption.defaultMode.getter();
}

uint64_t OUTLINED_FUNCTION_12_34()
{
  return swift_task_dealloc(*(void *)(v0 + 200));
}

uint64_t OUTLINED_FUNCTION_20_36()
{
  return CATWrapper.__allocating_init(options:globals:)(v0, 0LL);
}

void OUTLINED_FUNCTION_32_23()
{
}

uint64_t OUTLINED_FUNCTION_34_32()
{
  return swift_task_dealloc(*(void *)(v0 + 200));
}

id OUTLINED_FUNCTION_44_18()
{
  return [v0 *(SEL *)(v1 + 1760)];
}

uint64_t static FlowStrategyUtils.makeIntentFromParse(parse:currentIntent:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Parse(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for Parse.NLv3IntentOnly(_:))
  {
LABEL_10:
    OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    return 0LL;
  }

  if (v6 != enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    if (v6 != enum case for Parse.directInvocation(_:))
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v10 = type metadata accessor for Logger(0LL);
      uint64_t v11 = __swift_project_value_buffer(v10, (uint64_t)static Logger.voiceCommands);
      uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
      os_log_type_t v13 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v13))
      {
        id v14 = (uint8_t *)OUTLINED_FUNCTION_57_1();
        *(_WORD *)id v14 = 0;
        OUTLINED_FUNCTION_47_1(&dword_0, v12, v13, "Unknown parse in FlowStrategyUtils.makeIntentFromParse", v14);
        OUTLINED_FUNCTION_1_0((uint64_t)v14);
      }
    }

    goto LABEL_10;
  }

  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 96));
  uint64_t v8 = Parse.ServerConversion.siriKitIntent.getter();
  swift_release(v7);
  uint64_t v9 = type metadata accessor for NLIntent(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8LL))(v5, v9);
  return v8;
}

uint64_t static FlowStrategyUtils.makeConfirmationStateFromInput(input:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v3 = type metadata accessor for Parse(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = &v44[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v5);
  uint64_t v9 = &v44[-v8];
  uint64_t v10 = type metadata accessor for SiriKitConfirmationState(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v48 = &v44[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = &v44[-v15];
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = &v44[-v18];
  uint64_t v50 = a1;
  Input.parse.getter(v17);
  static VoiceCommandConfirmationUtils.getSiriKitConfirmationState(parse:)((uint64_t)v9);
  uint64_t v47 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
  v47(v9, v3);
  uint64_t v20 = enum case for SiriKitConfirmationState.unset(_:);
  uint64_t v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 104);
  ((void (*)(_BYTE *))v49)(v16);
  unint64_t v21 = lazy protocol witness table accessor for type SiriKitConfirmationState and conformance SiriKitConfirmationState();
  os_log_type_t v22 = dispatch thunk of static Equatable.== infix(_:_:)(v19, v16, v10, v21);
  uint64_t v23 = *(void (**)(_BYTE *, uint64_t))(v11 + 8);
  v23(v16, v10);
  if ((v22 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v11 + 32))(v51, v19, v10);
  }
  uint64_t v46 = (uint64_t (*)(_BYTE *, uint64_t))v23;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v24 = type metadata accessor for Logger(0LL);
  uint64_t v25 = __swift_project_value_buffer(v24, (uint64_t)static Logger.voiceCommands);
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_45_0(v27))
  {
    uint64_t v28 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    unsigned int v45 = v20;
    uint64_t v29 = (uint64_t)v28;
    *(_WORD *)uint64_t v28 = 0;
    OUTLINED_FUNCTION_47_1( &dword_0,  v26,  v22,  "Waiting for a confirmation response but there is no confirmation state in the input. Checking for server side resolution.",  v28);
    uint64_t v20 = v45;
    OUTLINED_FUNCTION_1_0(v29);
  }

  Input.parse.getter(v30);
  if ((*(unsigned int (**)(_BYTE *, uint64_t))(v4 + 88))(v7, v3) != enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    OUTLINED_FUNCTION_2_42();
    v47(v7, v3);
    uint64_t v42 = v51;
    return v49(v42, v20, v10);
  }

  (*(void (**)(_BYTE *, uint64_t))(v4 + 96))(v7, v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
  uint64_t v31 = type metadata accessor for NLIntent(0LL);
  uint64_t v32 = (*(uint64_t (**)(_BYTE *, uint64_t))(*(void *)(v31 - 8) + 8LL))(v7, v31);
  id v33 = v48;
  Parse.ServerConversion.confirmationState.getter(v32);
  int v34 = (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 88))(v33, v10);
  id v35 = v46;
  uint64_t v36 = v46(v33, v10);
  if (v34 == (_DWORD)v20)
  {
    uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.error.getter();
    BOOL v39 = OUTLINED_FUNCTION_45_0(v38);
    uint64_t v40 = v51;
    if (v39)
    {
      uint64_t v41 = (uint8_t *)OUTLINED_FUNCTION_57_1();
      *(_WORD *)uint64_t v41 = 0;
      OUTLINED_FUNCTION_47_1( &dword_0,  v37,  (os_log_type_t)v34,  "Could not find the current a server side intent confirmation. Treating input as not understood.",  v41);
      OUTLINED_FUNCTION_1_0((uint64_t)v41);
    }

    swift_release();
    OUTLINED_FUNCTION_2_42();
    uint64_t v42 = v40;
    return v49(v42, v20, v10);
  }

  Parse.ServerConversion.confirmationState.getter(v36);
  swift_release();
  return v35(v19, v10);
}

unint64_t lazy protocol witness table accessor for type SiriKitConfirmationState and conformance SiriKitConfirmationState()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriKitConfirmationState and conformance SiriKitConfirmationState;
  if (!lazy protocol witness table cache variable for type SiriKitConfirmationState and conformance SiriKitConfirmationState)
  {
    uint64_t v1 = type metadata accessor for SiriKitConfirmationState(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SiriKitConfirmationState, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriKitConfirmationState and conformance SiriKitConfirmationState);
  }

  return result;
}

ValueMetadata *type metadata accessor for FlowStrategyUtils()
{
  return &type metadata for FlowStrategyUtils;
}

uint64_t OUTLINED_FUNCTION_2_42()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 128))(v1, v0);
}

uint64_t static InputCompletionConverter.toUserData(state:)( uint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  uint64_t v6 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  uint64_t v11 = v6;
  if (a3 > 1u)
  {
    uint64_t v10 = &type metadata for String;
    uint64_t v8 = 0x6C65636E6163LL;
    unint64_t v9 = 0xE600000000000000LL;
  }

  else
  {
    OUTLINED_FUNCTION_3_56(v6);
    uint64_t v10 = &type metadata for String;
    uint64_t v8 = 1954047348LL;
    unint64_t v9 = 0xE400000000000000LL;
    swift_bridgeObjectRetain(a2);
    specialized Dictionary.subscript.setter((uint64_t)&v8);
    uint64_t v10 = &type metadata for String;
    uint64_t v8 = a1;
    unint64_t v9 = a2;
  }

  specialized Dictionary.subscript.setter((uint64_t)&v8);
  return v11;
}

uint64_t static InputCompletionConverter.toInputCompletionState(userData:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return 0LL;
  }
  unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(0x6574617473LL, 0xE500000000000000LL);
  if ((v3 & 1) == 0) {
    return 0LL;
  }
  uint64_t v4 = outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v2, (uint64_t)&v99);
  char v12 = v82;
  uint64_t v11 = v92;
  BOOL v13 = v82 == 1701736292 && v92 == 0xE400000000000000LL;
  if (!v13 && (OUTLINED_FUNCTION_1_41(1701736292LL, 0xE400000000000000LL, v82) & 1) == 0)
  {
    BOOL v39 = v82 == 0x6C65636E6163LL && v92 == 0xE600000000000000LL;
    if (v39 || (OUTLINED_FUNCTION_1_41(0x6C65636E6163LL, 0xE600000000000000LL, v82) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 0LL;
    }

    if (v82 == 0x497375636F666E75LL && v92 == 0xEF786F427475706ELL)
    {
      uint64_t v49 = swift_bridgeObjectRelease();
    }

    else
    {
      OUTLINED_FUNCTION_1_41(0x497375636F666E75LL, 0xEF786F427475706ELL, v82);
      uint64_t v49 = OUTLINED_FUNCTION_12();
      if ((v82 & 1) == 0) {
        return 0LL;
      }
    }

    OUTLINED_FUNCTION_4_47(v49, v50, v51, v52, v53, v54, v55, v56, v82, v92, v99);
    if (v100)
    {
      OUTLINED_FUNCTION_6_48();
      if (v13 && v11 == 0xE400000000000000LL)
      {
        uint64_t v66 = swift_bridgeObjectRelease();
      }

      else
      {
        OUTLINED_FUNCTION_1_41(1954047348LL, 0xE400000000000000LL, v64);
        uint64_t v66 = OUTLINED_FUNCTION_12();
        if ((v12 & 1) == 0) {
          return 0LL;
        }
      }

      OUTLINED_FUNCTION_2_43(v66, v67, v68, v69, v70, v71, v72, v73, v88, v97, v99);
      if (v100)
      {
        if ((OUTLINED_FUNCTION_0_49( v74,  v75,  v76,  (uint64_t)&type metadata for String,  v77,  v78,  v79,  v80,  v89,  v98,  v99) & 1) != 0) {
          return v90;
        }
        return 0LL;
      }
    }

ValueMetadata *type metadata accessor for InputCompletionConverter()
{
  return &type metadata for InputCompletionConverter;
}

uint64_t OUTLINED_FUNCTION_0_49( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  return swift_dynamicCast(&a9, &a11, v11 + 8, a4, 6LL);
}

uint64_t OUTLINED_FUNCTION_1_41(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, v3, 0LL);
}

void OUTLINED_FUNCTION_2_43( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11)
{
}

uint64_t OUTLINED_FUNCTION_3_56(uint64_t a1, ...)
{
  return specialized Dictionary.subscript.setter((uint64_t)va);
}

void OUTLINED_FUNCTION_4_47( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11)
{
}

  ;
}

void VoiceCommandsScreentimeCheckFlowStrategy.__allocating_init(appPolicyHandler:bundleId:)( __int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = swift_allocObject(v3, 72LL, 7LL);
  outlined init with take of AceServiceInvokerAsync(a1, v7 + 16);
  *(void *)(v7 + 56) = a2;
  *(void *)(v7 + 64) = a3;
  OUTLINED_FUNCTION_2();
}

uint64_t VoiceCommandsScreentimeCheckFlowStrategy.bundleId.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain(*(void *)(v0 + 64));
  return v1;
}

void VoiceCommandsScreentimeCheckFlowStrategy.init(appPolicyHandler:bundleId:)( __int128 *a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 56) = a2;
  *(void *)(v3 + 64) = a3;
  OUTLINED_FUNCTION_2();
}

uint64_t VoiceCommandsScreentimeCheckFlowStrategy.makeAppRestrictedByScreentimeResponse()(uint64_t a1)
{
  v1[12] = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v1[13] = OUTLINED_FUNCTION_9_0(*(void *)(v2 - 8));
  uint64_t v3 = type metadata accessor for TemplatingResult(0LL);
  v1[14] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[15] = v4;
  v1[16] = OUTLINED_FUNCTION_9_0(v4);
  return OUTLINED_FUNCTION_21_0();
}

{
  void *v1;
  void *v2;
  static Device.current.getter(v1 + 2, a1);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to static ResponseTemplates.appDisabledByScreenTime()[1]);
  v1[17] = v2;
  *uint64_t v2 = v1;
  v2[1] = VoiceCommandsScreentimeCheckFlowStrategy.makeAppRestrictedByScreentimeResponse();
  return static ResponseTemplates.appDisabledByScreenTime()(v1[16]);
}

uint64_t VoiceCommandsScreentimeCheckFlowStrategy.makeAppRestrictedByScreentimeResponse()()
{
  *(void *)(*(void *)v1 + 144LL) = v0;
  swift_task_dealloc();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v5 = *(void **)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v6);
  uint64_t v8 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v6, v7);
  uint64_t v9 = type metadata accessor for NLContextUpdate(0LL);
  __swift_storeEnumTagSinglePayload(v3, 1LL, 1LL, v9);
  uint64_t v10 = type metadata accessor for AceOutput(0LL);
  *(_OWORD *)(v0 + 7outlined consume of WFShowAlertFlow.State(v0, 2) = 0u;
  *(void *)(v0 + 88) = 0LL;
  *(_OWORD *)(v0 + 56) = 0u;
  v5[3] = v10;
  void v5[4] = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v5);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v1,  v0 + 16,  v8 & 1,  _swiftEmptyArrayStorage,  0LL,  1LL,  v3,  _swiftEmptyArrayStorage,  v0 + 56);
  outlined destroy of URL?(v0 + 56, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v3, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  return swift_unexpectedError( *(void *)(v0 + 144),  "SiriLinkFlowPlugin/VoiceCommandScreentimeCheckFlowStrategy.swift",  64LL,  1LL,  25LL);
}

uint64_t VoiceCommandsScreentimeCheckFlowStrategy.deinit()
{
  return v0;
}

uint64_t VoiceCommandsScreentimeCheckFlowStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t type metadata accessor for VoiceCommandsScreentimeCheckFlowStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin40VoiceCommandsScreentimeCheckFlowStrategy);
}

uint64_t OutputGenerationManifest.init(dialogPhase:responseViewId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  OutputGenerationManifest.init(dialogPhase:_:)(v7, CustomIntentDisambiguationItemContainer.init(items:), 0LL);
  OutputGenerationManifest.responseViewId.setter(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
}

uint64_t RunLinkActionCATs.actionConfirmation(customDialog:verb:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 48) = OUTLINED_FUNCTION_20_10(v4);
  *(void *)(v3 + 56) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATs.actionConfirmation(customDialog:verb:)()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_19(v2, 128LL);
  v0[8] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_17E660;
  OUTLINED_FUNCTION_0_18(v3);
  OUTLINED_FUNCTION_12_4(v1, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  uint64_t v6 = OUTLINED_FUNCTION_21_30(v5);
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v3 + 7outlined consume of WFShowAlertFlow.State(v0, 2) = v1;
    uint64_t v8 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v8);
  }

  uint64_t v10 = v0[4];
  *(void *)(v3 + 80) = 1651664246LL;
  *(void *)(v3 + 88) = 0xE400000000000000LL;
  OUTLINED_FUNCTION_12_4(v10, v9, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v11 = OUTLINED_FUNCTION_32_16();
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v3 + 120) = v1;
    char v12 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v12);
  }

  BOOL v13 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  v0[9] = v13;
  OUTLINED_FUNCTION_29_7(v13);
  OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_22_22();
  return OUTLINED_FUNCTION_4_24(v14, v15, v16, v17, v18);
}

{
  uint64_t v0;
  uint64_t (*v2)(void);
  OUTLINED_FUNCTION_56_18();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_0_0();
  }

  else
  {
    OUTLINED_FUNCTION_31_27();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_3_4(v2);
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_171_0();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t RunLinkActionCATs.actionConfirmationHeader(customDialog:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATs.actionConfirmationHeader(customDialog:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_19(v1, 80LL);
  uint64_t v3 = OUTLINED_FUNCTION_44_14(v2);
  *(_OWORD *)(v3 + 16) = xmmword_17E650;
  OUTLINED_FUNCTION_0_18(v3);
  OUTLINED_FUNCTION_12_4(v0, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  uint64_t v6 = OUTLINED_FUNCTION_66_2(v5);
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v8 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v8);
  }

  uint64_t v9 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v10 = (void *)OUTLINED_FUNCTION_38_23(v9);
  OUTLINED_FUNCTION_48_6(v10);
  OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_22_22();
  return OUTLINED_FUNCTION_4_24(v11, v12, v13, v14, v15);
}

uint64_t RunLinkActionCATs.actionPerformed(customDialog:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATs.actionPerformed(customDialog:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_19(v1, 80LL);
  uint64_t v3 = OUTLINED_FUNCTION_44_14(v2);
  *(_OWORD *)(v3 + 16) = xmmword_17E650;
  OUTLINED_FUNCTION_0_18(v3);
  OUTLINED_FUNCTION_12_4(v0, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  uint64_t v6 = OUTLINED_FUNCTION_66_2(v5);
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v8 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v8);
  }

  uint64_t v9 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v10 = (void *)OUTLINED_FUNCTION_38_23(v9);
  OUTLINED_FUNCTION_48_6(v10);
  OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_22_22();
  return OUTLINED_FUNCTION_4_24(v11, v12, v13, v14, v15);
}

uint64_t RunLinkActionCATs.confirmationButtonLabel(confirmationVerb:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATs.confirmationButtonLabel(confirmationVerb:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_19(v1, 80LL);
  uint64_t v3 = OUTLINED_FUNCTION_44_14(v2);
  *(_OWORD *)(v3 + 16) = xmmword_17E650;
  *(void *)(v3 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = 0xD000000000000010LL;
  *(void *)(v3 + 40) = 0x8000000000194060LL;
  OUTLINED_FUNCTION_12_4(v0, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  uint64_t v6 = OUTLINED_FUNCTION_66_2(v5);
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v8 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v8);
  }

  uint64_t v10 = (void *)OUTLINED_FUNCTION_38_23(v9);
  OUTLINED_FUNCTION_48_6(v10);
  OUTLINED_FUNCTION_35_8();
  return v12();
}

uint64_t RunLinkActionCATs.continueInApp(customDialog:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATs.continueInApp(customDialog:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_19(v1, 80LL);
  uint64_t v3 = OUTLINED_FUNCTION_44_14(v2);
  *(_OWORD *)(v3 + 16) = xmmword_17E650;
  OUTLINED_FUNCTION_0_18(v3);
  OUTLINED_FUNCTION_12_4(v0, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  uint64_t v6 = OUTLINED_FUNCTION_66_2(v5);
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v8 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v8);
  }

  uint64_t v9 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v10 = (void *)OUTLINED_FUNCTION_38_23(v9);
  OUTLINED_FUNCTION_48_6(v10);
  OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_22_22();
  return OUTLINED_FUNCTION_4_24(v11, v12, v13, v14, v15);
}

uint64_t RunLinkActionCATs.errorDialog(customDialog:nonOptionalParameterIsNil:)( uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = a2;
  *(void *)(v4 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = v3;
  *(_BYTE *)(v4 + 7outlined consume of WFShowAlertFlow.State(v0, 2) = a3;
  *(void *)(v4 + 16) = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 40) = OUTLINED_FUNCTION_10_8(v5);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATs.errorDialog(customDialog:nonOptionalParameterIsNil:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = OUTLINED_FUNCTION_44_14(v4);
  *(_OWORD *)(v5 + 16) = xmmword_17E660;
  OUTLINED_FUNCTION_0_18(v5);
  OUTLINED_FUNCTION_12_4(v0, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  uint64_t v8 = OUTLINED_FUNCTION_66_2(v7);
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v10);
  }

  char v11 = *(_BYTE *)(v1 + 72);
  *(void *)(v2 + 80) = 0xD000000000000019LL;
  *(void *)(v2 + 88) = 0x8000000000194080LL;
  *(void *)(v2 + 120) = &type metadata for Bool;
  *(_BYTE *)(v2 + 96) = v11;
  uint64_t v12 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v13 = (void *)OUTLINED_FUNCTION_38_23(v12);
  OUTLINED_FUNCTION_48_6(v13);
  OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_22_22();
  return OUTLINED_FUNCTION_4_24(v14, v15, v16, v17, v18);
}

uint64_t RunLinkActionCATs.needsDisambiguation(customDialog:items:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 48) = OUTLINED_FUNCTION_10_8(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATs.needsDisambiguation(customDialog:items:)()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[3];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  v0[7] = v4;
  *(_OWORD *)(v4 + 16) = xmmword_17E660;
  OUTLINED_FUNCTION_0_18(v4);
  OUTLINED_FUNCTION_12_4(v2, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_61_1();
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v1, 1LL, v6);
  if ((_DWORD)EnumTagSinglePayload == 1)
  {
    OUTLINED_FUNCTION_11_4(EnumTagSinglePayload, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v8 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v8);
  }

  uint64_t v9 = v0[4];
  *(void *)(v4 + 80) = 0x736D657469LL;
  *(void *)(v4 + 88) = 0xE500000000000000LL;
  if (v9)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  }

  else
  {
    uint64_t v10 = 0LL;
    *(void *)(v4 + 104) = 0LL;
    *(void *)(v4 + 11outlined consume of WFShowAlertFlow.State(v0, 2) = 0LL;
  }

  *(void *)(v4 + 96) = v9;
  *(void *)(v4 + 120) = v10;
  uint64_t v11 = *((unsigned int *)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:) + 1);
  swift_bridgeObjectRetain(v9);
  uint64_t v12 = (void *)swift_task_alloc(v11);
  v0[8] = v12;
  OUTLINED_FUNCTION_29_7(v12);
  OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_22_22();
  return OUTLINED_FUNCTION_4_24(v13, v14, v15, v16, v17);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v3)(void);
  *(void *)(*(void *)v1 + 72LL) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_0_0();
  }

  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_40_0();
    uint64_t v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_3_4(v3);
  }

uint64_t RunLinkActionCATs.needsValue(customDialog:parameterName:isSearchAction:isDeleteAction:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  *(_BYTE *)(v5 + 89) = a5;
  *(_BYTE *)(v5 + 88) = a4;
  OUTLINED_FUNCTION_51_5(a1, a2, a3);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v5 + 48) = OUTLINED_FUNCTION_20_10(v6);
  *(void *)(v5 + 56) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATs.needsValue(customDialog:parameterName:isSearchAction:isDeleteAction:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_19(v2, 224LL);
  *(void *)(v0 + 64) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_181AE0;
  OUTLINED_FUNCTION_0_18(v3);
  OUTLINED_FUNCTION_12_4(v1, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  uint64_t v6 = OUTLINED_FUNCTION_21_30(v5);
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v3 + 7outlined consume of WFShowAlertFlow.State(v0, 2) = v1;
    uint64_t v8 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v8);
  }

  uint64_t v9 = OUTLINED_FUNCTION_29_28();
  *(void *)(v3 + 80) = v10;
  *(void *)(v3 + 88) = 0xED0000656D614E72LL;
  OUTLINED_FUNCTION_12_4(v9, v11, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v12 = OUTLINED_FUNCTION_32_16();
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v3 + 120) = v1;
    uint64_t v13 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v13);
  }

  char v14 = *(_BYTE *)(v0 + 89);
  char v15 = *(_BYTE *)(v0 + 88);
  strcpy((char *)(v3 + 128), "isSearchAction");
  *(_BYTE *)(v3 + 143) = -18;
  *(_BYTE *)(v3 + 144) = v15;
  *(void *)(v3 + 168) = &type metadata for Bool;
  strcpy((char *)(v3 + 176), "isDeleteAction");
  *(_BYTE *)(v3 + 191) = -18;
  *(void *)(v3 + 216) = &type metadata for Bool;
  *(_BYTE *)(v3 + 19outlined consume of WFShowAlertFlow.State(v0, 2) = v14;
  uint64_t v16 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  *(void *)(v0 + 7outlined consume of WFShowAlertFlow.State(v0, 2) = v16;
  OUTLINED_FUNCTION_29_7(v16);
  OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_22_22();
  return OUTLINED_FUNCTION_4_24(v17, v18, v19, v20, v21);
}

uint64_t RunLinkActionCATs.parameterConfirmation(customDialog:parameterValue:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 48) = OUTLINED_FUNCTION_20_10(v4);
  *(void *)(v3 + 56) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATs.parameterConfirmation(customDialog:parameterValue:)()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_19(v2, 128LL);
  v0[8] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_17E660;
  OUTLINED_FUNCTION_0_18(v3);
  OUTLINED_FUNCTION_12_4(v1, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  uint64_t v6 = OUTLINED_FUNCTION_21_30(v5);
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v3 + 7outlined consume of WFShowAlertFlow.State(v0, 2) = v1;
    uint64_t v8 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v8);
  }

  uint64_t v9 = OUTLINED_FUNCTION_29_28();
  *(void *)(v3 + 80) = v10;
  *(void *)(v3 + 88) = 0xEE0065756C615672LL;
  OUTLINED_FUNCTION_12_4(v9, v11, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v12 = OUTLINED_FUNCTION_32_16();
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v3 + 120) = v1;
    uint64_t v13 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v13);
  }

  char v14 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  v0[9] = v14;
  OUTLINED_FUNCTION_29_7(v14);
  OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_22_22();
  return OUTLINED_FUNCTION_4_24(v15, v16, v17, v18, v19);
}

{
  uint64_t v0;
  uint64_t (*v2)(void);
  OUTLINED_FUNCTION_56_18();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_0_0();
  }

  else
  {
    OUTLINED_FUNCTION_31_27();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_3_4(v2);
  }

uint64_t type metadata accessor for RunLinkActionCATs(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for RunLinkActionCATs;
  if (!type metadata singleton initialization cache for RunLinkActionCATs) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RunLinkActionCATs);
  }
  return result;
}

uint64_t type metadata completion function for RunLinkActionCATs(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + class metadata base offset for RunLinkActionCATs);
}

uint64_t ObjC metadata update function for RunLinkActionCATs()
{
  return type metadata accessor for RunLinkActionCATs(0LL);
}

uint64_t OUTLINED_FUNCTION_21_30(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_29_28()
{
  return *(void *)(v0 + 32);
}

uint64_t OUTLINED_FUNCTION_31_27()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 64));
}

void *PartialMatcher.match(term:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v25)(__int128 *__return_ptr, void *, uint64_t);
  uint64_t v26;
  void *v27;
  Swift::Bool IsNativeType;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *result;
  void *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t WitnessTable;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(__int128 *__return_ptr, void *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  void (*v86)(char *, uint64_t);
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  Swift::Int after;
  void *rawValue;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  __int128 v97;
  char v98;
  char v99;
  uint64_t v100;
  id v101;
  char v102[8];
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  char v107[8];
  uint64_t v108;
  uint64_t v5 = *v3;
  uint64_t v87 = type metadata accessor for CharacterSet(0LL);
  uint64_t v77 = *(void *)(v87 - 8);
  uint64_t v6 = __chkstk_darwin(v87);
  uint64_t v8 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = v5[10];
  uint64_t v81 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v6);
  uint64_t v72 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  char v14 = (char *)&v66 - v13;
  uint64_t v67 = v15;
  __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v66 - v16;
  uint64_t v83 = String.sanitized.getter();
  uint64_t v19 = v18;
  v20._rawValue = (void *)Array.init()(v9);
  rawValue = v20._rawValue;
  __n128 v21 = swift_bridgeObjectRetain(a3);
  uint64_t v22 = Array.startIndex.getter(v21);
  after = v22;
  uint64_t v73 = v9;
  uint64_t v23 = Array.endIndex.getter(a3, v9);
  uint64_t v68 = v5;
  if (v22 != v23)
  {
    uint64_t v82 = v19;
    uint64_t v24 = v5[11];
    uint64_t v25 = *(void (**)(__int128 *__return_ptr, void *, uint64_t))(v24 + 8);
    uint64_t v75 = &v94;
    uint64_t v74 = &v95;
    uint64_t v70 = &v98;
    uint64_t v69 = &v99;
    uint64_t v26 = a3;
    uint64_t v27 = &demangling cache variable for type metadata for String?;
    OUTLINED_FUNCTION_4_48();
    uint64_t v78 = v26;
    uint64_t v71 = v14;
    uint64_t v76 = v17;
    uint64_t v80 = v24;
    uint64_t v79 = v25;
    while (1)
    {
      IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)(v22, IsNativeType, v26, v5);
      if (IsNativeType)
      {
        uint64_t v29 = v81;
        OUTLINED_FUNCTION_1_42( v26 + ((*(unsigned __int8 *)(v29 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))
        + *(void *)(v81 + 72) * v22,
          *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v81 + 16));
      }

      else
      {
        uint64_t result = (void *)_ArrayBuffer._getElementSlowPath(_:)(v22, v26, v5);
        if (v67 != 8)
        {
          __break(1u);
          return result;
        }

        uint64_t v61 = result;
        uint64_t v89 = (uint64_t)result;
        uint64_t v62 = v81;
        OUTLINED_FUNCTION_1_42((uint64_t)&v89, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v81 + 16));
        uint64_t v63 = v61;
        uint64_t v29 = v62;
        swift_unknownObjectRelease(v63);
      }

      swift_bridgeObjectRetain(v26);
      Array.formIndex(after:)(&after);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, void *))(v29 + 32))(v14, v17, v5);
      v25((__int128 *)&v93, v5, v24);
      OUTLINED_FUNCTION_7_38((uint64_t)v107, (uint64_t)&v101);
      outlined release of String?((uint64_t)v107);
      outlined init with take of String?( (uint64_t)v74,  (uint64_t)&v106,  &demangling cache variable for type metadata for INImage?);
      outlined release of INImage?(&v106);
      uint64_t v105 = v96;
      outlined release of [String](&v105);
      uint64_t v30 = String.lowercased()();
      uint64_t v31 = OUTLINED_FUNCTION_9_41(v30._countAndFlagsBits, (uint64_t)v30._object);
      static CharacterSet.punctuationCharacters.getter(v31);
      uint64_t v32 = v14;
      uint64_t v33 = lazy protocol witness table accessor for type String and conformance String();
      uint64_t v34 = StringProtocol.components(separatedBy:)(v8, &type metadata for String, v33);
      uint64_t v86 = *(void (**)(char *, uint64_t))(v77 + 8);
      v86(v8, v87);
      OUTLINED_FUNCTION_13_32((uint64_t)&v108);
      uint64_t v89 = v34;
      uint64_t v35 = v27;
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      uint64_t v37 = lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v85 = v36;
      uint64_t v84 = v37;
      uint64_t v38 = BidirectionalCollection<>.joined(separator:)(0LL, 0xE000000000000000LL, v36, v37);
      uint64_t v27 = v35;
      BOOL v39 = v5;
      uint64_t v41 = v40;
      OUTLINED_FUNCTION_37();
      swift_bridgeObjectRelease();
      uint64_t v89 = v38;
      uint64_t v90 = v41;
      uint64_t v42 = OUTLINED_FUNCTION_0_50();
      LOBYTE(v34) = OUTLINED_FUNCTION_3_57(v42, (uint64_t)&type metadata for String);
      swift_bridgeObjectRelease();
      if ((v34 & 1) != 0) {
        break;
      }
      v79(&v97, v39, v80);
      uint64_t v44 = v100;
      unint64_t v104 = v100;
      uint64_t v103 = v97;
      swift_bridgeObjectRetain(v100);
      outlined release of String?((uint64_t)&v103);
      OUTLINED_FUNCTION_7_38((uint64_t)v102, (uint64_t)&v97 + 8);
      outlined release of String?((uint64_t)v102);
      outlined init with take of String?( (uint64_t)v69,  (uint64_t)&v101,  &demangling cache variable for type metadata for INImage?);
      outlined release of INImage?(&v101);
      OUTLINED_FUNCTION_16_27();
      uint64_t v45 = *(void *)(v44 + 16);
      if (v45)
      {
        uint64_t v88 = _swiftEmptyArrayStorage;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v46 = (uint64_t *)(v44 + 40);
        do
        {
          uint64_t v47 = *v46;
          uint64_t v48 = String.lowercased()();
          OUTLINED_FUNCTION_9_41(v48._countAndFlagsBits, (uint64_t)v48._object);
          swift_bridgeObjectRetain(v47);
          static CharacterSet.punctuationCharacters.getter(v49);
          uint64_t v50 = StringProtocol.components(separatedBy:)(v8, &type metadata for String, v33);
          v86(v8, v87);
          OUTLINED_FUNCTION_13_32((uint64_t)&v108);
          uint64_t v89 = v50;
          uint64_t v51 = BidirectionalCollection<>.joined(separator:)(0LL, 0xE000000000000000LL, v85, v84);
          uint64_t v5 = v52;
          OUTLINED_FUNCTION_37();
          swift_bridgeObjectRelease();
          uint64_t v53 = v88;
          if ((swift_isUniquelyReferenced_nonNull_native(v88) & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v53 = v88;
          }

          uint64_t v54 = v53[2];
          if (v54 >= v53[3] >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v53 = v88;
          }

          v46 += 2;
          v53[2] = v54 + 1;
          uint64_t v55 = &v53[2 * v54];
          v55[4] = v51;
          v55[5] = v5;
          --v45;
        }

        while (v45);
        OUTLINED_FUNCTION_16_27();
        OUTLINED_FUNCTION_4_48();
        uint64_t v27 = &demangling cache variable for type metadata for String?;
      }

      else
      {
        uint64_t v5 = v39;
        OUTLINED_FUNCTION_16_27();
        uint64_t v53 = _swiftEmptyArrayStorage;
      }

      uint64_t v56 = v53[2];
      uint64_t v17 = v76;
      uint64_t v25 = v79;
      uint64_t v26 = v78;
      if (v56)
      {
        swift_bridgeObjectRetain(v53);
        uint64_t v5 = v53 + 5;
        while (1)
        {
          uint64_t v57 = *v5;
          uint64_t v89 = *(v5 - 1);
          uint64_t v90 = v57;
          uint64_t v58 = OUTLINED_FUNCTION_0_50();
          v5 += 2;
          if (!--v56)
          {
            OUTLINED_FUNCTION_37();
            uint64_t v27 = &demangling cache variable for type metadata for String?;
            uint64_t v26 = v78;
            OUTLINED_FUNCTION_4_48();
            goto LABEL_22;
          }
        }

        swift_bridgeObjectRelease_n(v53, 2LL);
        char v14 = v71;
        OUTLINED_FUNCTION_4_48();
        OUTLINED_FUNCTION_11_37();
        uint64_t v59 = OUTLINED_FUNCTION_10_37();
        OUTLINED_FUNCTION_5_45(v59);
        uint64_t v24 = v80;
        uint64_t v27 = &demangling cache variable for type metadata for String?;
        goto LABEL_24;
      }

uint64_t type metadata accessor for PartialMatcher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PartialMatcher);
}

uint64_t OUTLINED_FUNCTION_0_50()
{
  *(void *)(v0 - 31outlined consume of WFShowAlertFlow.State(v0, 2) = *(void *)(v0 - 352);
  *(void *)(v0 - 304) = *(void *)(v0 - 360);
  return v0 - 312;
}

uint64_t OUTLINED_FUNCTION_1_42@<X0>( uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  *(void *)(v4 - 376) = a2;
  return a2(v3, a1, v2);
}

uint64_t OUTLINED_FUNCTION_3_57(uint64_t a1, uint64_t a2)
{
  return StringProtocol.contains<A>(_:)(a1, a2, a2, v2, v2);
}

  ;
}

uint64_t OUTLINED_FUNCTION_5_45(uint64_t a1)
{
  return Array.append(_:)(v1, a1);
}

uint64_t OUTLINED_FUNCTION_7_38@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return outlined init with take of String?(*(void *)(a2 - 256), a1, v2);
}

uint64_t OUTLINED_FUNCTION_9_41(uint64_t result, uint64_t a2)
{
  *(void *)(v2 - 296) = result;
  *(void *)(v2 - 288) = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_10_37()
{
  return type metadata accessor for Array(0LL);
}

uint64_t OUTLINED_FUNCTION_11_37()
{
  return (*(uint64_t (**)(void))(v0 - 376))();
}

uint64_t App.toAppDisplayInfo(_:appInfoResolving:isFirstParty:)@<X0>( uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v9);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 8))(v5, a1, v9, v10);
  if (v12)
  {
    uint64_t v13 = v11;
    uint64_t v14 = v12;
    if (a3 == 2)
    {
      uint64_t v15 = App.appIdentifier.getter();
      if (v16)
      {
        uint64_t v17 = v16;
        _OWORD v24[2] = v15;
        v24[3] = v16;
        v24[0] = 0x6C7070612E6D6F63LL;
        v24[1] = 0xE900000000000065LL;
        unint64_t v18 = lazy protocol witness table accessor for type String and conformance String();
        unint64_t v19 = lazy protocol witness table accessor for type String and conformance String();
        char v20 = BidirectionalCollection<>.starts<A>(with:)( v24,  &type metadata for String,  &type metadata for String,  v18,  v19);
        swift_bridgeObjectRelease(v17);
      }

      else
      {
        char v20 = 0;
      }
    }

    else
    {
      char v20 = a3 & 1;
    }

    AppDisplayInfo.init(displayName:isFirstParty:)(v13, v14, v20 & 1);
    uint64_t v23 = type metadata accessor for AppDisplayInfo(0LL);
    return __swift_storeEnumTagSinglePayload(a4, 0LL, 1LL, v23);
  }

  else
  {
    uint64_t v21 = type metadata accessor for AppDisplayInfo(0LL);
    return __swift_storeEnumTagSinglePayload(a4, 1LL, 1LL, v21);
  }

uint64_t App.toAppDisplayName(_:appInfoResolving:isFirstParty:)(uint64_t a1, void *a2, char a3)
{
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = __swift_project_boxed_opaque_existential_1(a2, v6);
  return specialized App.toAppDisplayName(_:appInfoResolving:isFirstParty:)(a1, (uint64_t)v8, a3, v3, v6, v7);
}

uint64_t specialized App.toAppDisplayName(_:appInfoResolving:isFirstParty:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v19[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19[3] = a5;
  void v19[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16LL))(boxed_opaque_existential_1, a2, a5);
  App.toAppDisplayInfo(_:appInfoResolving:isFirstParty:)(a1, v19, a3, (uint64_t)v13);
  uint64_t v15 = type metadata accessor for AppDisplayInfo(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1LL, v15) == 1)
  {
    outlined destroy of AppDisplayInfo?((uint64_t)v13);
    uint64_t v16 = 0LL;
  }

  else
  {
    uint64_t v16 = AppDisplayInfo.displayName.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8LL))(v13, v15);
  }

  __swift_destroy_boxed_opaque_existential_1Tm(v19);
  return v16;
}

uint64_t WorkflowRunnerCATs.inputDate(device:inputType:message:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  void v5[4] = a3;
  void v5[2] = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_20_10(v6);
  v5[8] = OUTLINED_FUNCTION_21_31(v7);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowRunnerCATs.inputDate(device:inputType:message:)()
{
  uint64_t v2 = v1[3];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_19(v3, 176LL);
  v1[9] = v4;
  uint64_t v5 = OUTLINED_FUNCTION_4_3(v4, (__n128)xmmword_17FDF0);
  if (v2)
  {
    uint64_t v5 = type metadata accessor for SirikitDeviceState(v5);
  }

  else
  {
    v4[3].n128_u64[1] = 0LL;
    v4[4].n128_u64[0] = 0LL;
  }

  OUTLINED_FUNCTION_2_44(v5);
  OUTLINED_FUNCTION_12_4(v7, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_30_7(v8);
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v4[7].n128_u64[1] = v0;
    uint64_t v11 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = OUTLINED_FUNCTION_5_46();
  OUTLINED_FUNCTION_12_4(v12, v13, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = OUTLINED_FUNCTION_41_5();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v4[10].n128_u64[1] = v0;
    uint64_t v15 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v15);
  }

  uint64_t v16 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  v1[10] = v16;
  *uint64_t v16 = v1;
  v16[1] = WorkflowRunnerCATs.inputDate(device:inputType:message:);
  OUTLINED_FUNCTION_8_54();
  return OUTLINED_FUNCTION_5_23(v17, v18, v19, v20, v21);
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_24_6();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_0_0();
  }

  else
  {
    OUTLINED_FUNCTION_53_4();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_3_4(*(uint64_t (**)(void))(v1 + 8));
  }

uint64_t WorkflowRunnerCATs.inputText(device:inputType:message:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  void v5[4] = a3;
  void v5[2] = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_20_10(v6);
  v5[8] = OUTLINED_FUNCTION_21_31(v7);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowRunnerCATs.inputText(device:inputType:message:)()
{
  uint64_t v2 = v1[3];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_19(v3, 176LL);
  v1[9] = v4;
  uint64_t v5 = OUTLINED_FUNCTION_4_3(v4, (__n128)xmmword_17FDF0);
  if (v2)
  {
    uint64_t v5 = type metadata accessor for SirikitDeviceState(v5);
  }

  else
  {
    v4[3].n128_u64[1] = 0LL;
    v4[4].n128_u64[0] = 0LL;
  }

  OUTLINED_FUNCTION_2_44(v5);
  OUTLINED_FUNCTION_12_4(v7, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_30_7(v8);
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v4[7].n128_u64[1] = v0;
    uint64_t v11 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = OUTLINED_FUNCTION_5_46();
  OUTLINED_FUNCTION_12_4(v12, v13, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = OUTLINED_FUNCTION_41_5();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v4[10].n128_u64[1] = v0;
    uint64_t v15 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v15);
  }

  uint64_t v16 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  v1[10] = v16;
  *uint64_t v16 = v1;
  v16[1] = WorkflowRunnerCATs.inputText(device:inputType:message:);
  OUTLINED_FUNCTION_8_54();
  return OUTLINED_FUNCTION_5_23(v17, v18, v19, v20, v21);
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_24_6();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_0_0();
  }

  else
  {
    OUTLINED_FUNCTION_53_4();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_3_4(*(uint64_t (**)(void))(v1 + 8));
  }

uint64_t WorkflowRunnerCATs.showAlert(message:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  void v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[5] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowRunnerCATs.showAlert(message:)()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[3];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 80LL);
  v0[6] = v4;
  *(_OWORD *)(v4 + 16) = xmmword_17E650;
  uint64_t v5 = (void *)(v4 + 48);
  *(void *)(v4 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = 0x6567617373656DLL;
  *(void *)(v4 + 40) = 0xE700000000000000LL;
  OUTLINED_FUNCTION_12_4(v2, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v1, 1LL, v7);
  uint64_t v9 = v0[5];
  if ((_DWORD)EnumTagSinglePayload == 1)
  {
    OUTLINED_FUNCTION_11_4(EnumTagSinglePayload, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v5 = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
  }

  else
  {
    *(void *)(v4 + 7outlined consume of WFShowAlertFlow.State(v0, 2) = v7;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v5);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))( boxed_opaque_existential_1,  v9,  v7);
  }

  v0[7] = v11;
  void *v11 = v0;
  v11[1] = WorkflowRunnerCATs.showAlert(message:);
  return ((uint64_t (*)(void, unint64_t, unint64_t, uint64_t))v13)( v0[2],  0xD000000000000018LL,  0x8000000000191BA0LL,  v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_0_0();
  }

  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_40_0();
    return OUTLINED_FUNCTION_3_4(*(uint64_t (**)(void))(v2 + 8));
  }

{
  uint64_t v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_40_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for WorkflowRunnerCATs(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for WorkflowRunnerCATs;
  if (!type metadata singleton initialization cache for WorkflowRunnerCATs) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WorkflowRunnerCATs);
  }
  return result;
}

uint64_t type metadata completion function for WorkflowRunnerCATs(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + class metadata base offset for WorkflowRunnerCATs);
}

uint64_t ObjC metadata update function for WorkflowRunnerCATs()
{
  return type metadata accessor for WorkflowRunnerCATs(0LL);
}

uint64_t OUTLINED_FUNCTION_2_44(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 0x7079547475706E69LL;
  v2[11] = 0xE900000000000065LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_5_46()
{
  uint64_t result = *(void *)(v0 + 40);
  *(void *)(v1 + 128) = 0x6567617373656DLL;
  *(void *)(v1 + 136) = 0xE700000000000000LL;
  return result;
}

  ;
}

uint64_t OUTLINED_FUNCTION_21_31(uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  return swift_task_alloc(v1);
}

void *CustomIntentPlatformSpecificSnippets.smartPromptTypeName.unsafeMutableAddressor()
{
  return &static CustomIntentPlatformSpecificSnippets.smartPromptTypeName;
}

void static CustomIntentPlatformSpecificSnippets.buildIntentsSnippet(app:intent:intentResponse:isForConfirmation:vcShortcut:device:)( uint64_t a1, void *a2, void *a3, char a4, uint64_t a5, void *a6)
{
  uint64_t v11 = OUTLINED_FUNCTION_5_47(a6);
  char v13 = dispatch thunk of DeviceState.isCarPlay.getter(v11, v12);
  outlined init with copy of DeviceState((uint64_t)a6, (uint64_t)v28);
  if ((v13 & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v28);
LABEL_4:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v17 = OUTLINED_FUNCTION_23_4(v16);
    *(_OWORD *)(v17 + 16) = xmmword_17E150;
    uint64_t v18 = (uint64_t)static CustomIntentPlatformSpecificSnippets.getEmptySnippet(app:)();
LABEL_5:
    *(void *)(v17 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = v18;
    specialized Array._endMutation()(v18, v19, v20);
    goto LABEL_6;
  }

  uint64_t v14 = OUTLINED_FUNCTION_5_47(v28);
  char v15 = dispatch thunk of DeviceState.isHomePod.getter(v14);
  __swift_destroy_boxed_opaque_existential_1Tm(v28);
  if ((v15 & 1) != 0) {
    goto LABEL_4;
  }
  uint64_t v21 = OUTLINED_FUNCTION_5_47(a6);
  if ((dispatch thunk of DeviceState.isWatch.getter(v21, v22) & 1) != 0)
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v17 = OUTLINED_FUNCTION_23_4(v23);
    *(_OWORD *)(v17 + 16) = xmmword_17E150;
    uint64_t v18 = (uint64_t)static CustomIntentPlatformSpecificSnippets.buildWatchSnippet(app:intent:intentResponse:)( a1,  a2,  (uint64_t)a3);
    goto LABEL_5;
  }

  id v24 = [a2 _metadata];
  if (!v24 || (uint64_t v25 = v24, v26 = [v24 showsWhenRun], v25, v26))
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v17 = OUTLINED_FUNCTION_23_4(v27);
    *(_OWORD *)(v17 + 16) = xmmword_17E150;
    uint64_t v18 = static CustomIntentPlatformSpecificSnippets.buildIntentSnippet(app:intent:intentResponse:isForConfirmation:vcShortcut:)( a1,  (uint64_t)a2,  a3,  a4 & 1);
    goto LABEL_5;
  }

void static CustomIntentPlatformSpecificSnippets.attachConfirmationButtons(snippet:yes:no:device:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  uint64_t v13 = objc_opt_self(&OBJC_CLASS___SASTItemGroup);
  uint64_t v14 = swift_dynamicCastObjCClass(a1, v13);
  if (v14)
  {
    char v15 = (void *)v14;
    id v44 = a1;
    uint64_t v16 = OUTLINED_FUNCTION_18_35( (uint64_t)v44,  (SEL *)&selRef_templateItems,  &demangling cache variable for type metadata for SASTTemplateItem);
    uint64_t v17 = _swiftEmptyArrayStorage;
    if (v16) {
      uint64_t v17 = (void *)v16;
    }
    uint64_t v45 = (uint64_t)v17;
    id v18 = OUTLINED_FUNCTION_13_33();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    unint64_t v20 = *(void *)((char *)&dword_10 + (v45 & 0xFFFFFFFFFFFFFF8LL));
    unint64_t v19 = *(void *)((char *)&dword_18 + (v45 & 0xFFFFFFFFFFFFFF8LL));
    if (v20 >= v19 >> 1) {
      OUTLINED_FUNCTION_0_40(v20 + 1, v19);
    }
    uint64_t v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v18);
    specialized Array._endMutation()(v21, v22, v23);
    static CustomIntentPlatformSpecificSnippets.makeWatchButton(model:)(a5, a6, a7);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    unint64_t v25 = *(void *)((char *)&dword_10 + (v45 & 0xFFFFFFFFFFFFFF8LL));
    unint64_t v24 = *(void *)((char *)&dword_18 + (v45 & 0xFFFFFFFFFFFFFF8LL));
    if (v25 >= v24 >> 1) {
      OUTLINED_FUNCTION_0_40(v25 + 1, v24);
    }
    uint64_t v26 = OUTLINED_FUNCTION_19_30(v25);
    specialized Array._endMutation()(v26, v27, v28);
    outlined bridged method (mbnn) of @objc SASTItemGroup.templateItems.setter(v45, v15);
  }

  else
  {
    uint64_t v29 = a8[3];
    uint64_t v30 = a8[4];
    __swift_project_boxed_opaque_existential_1(a8, v29);
    if ((dispatch thunk of DeviceState.isCarPlay.getter(v29, v30) & 1) != 0)
    {
      uint64_t v31 = OUTLINED_FUNCTION_6_49();
      id v37 = static CustomIntentPlatformSpecificSnippets.getCarplayConfirmationOptions(yes:no:)( v31,  v32,  v33,  v34,  v35,  v36);
    }

    else
    {
      uint64_t v38 = OUTLINED_FUNCTION_6_49();
      id v37 = static CustomIntentPlatformSpecificSnippets.getIOSConfirmationOptions(yes:no:)(v38, v39, v40, v41, v42, v43);
    }

    [a1 setConfirmationOptions:v37];
  }
}

id static CustomIntentPlatformSpecificSnippets.buildConfirmationSnippet(app:yes:no:device:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  uint64_t v8 = a8;
  uint64_t v12 = a8[3];
  uint64_t v13 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v12);
  if ((dispatch thunk of DeviceState.isCarPlay.getter(v12, v13) & 1) != 0) {
    id v14 = OUTLINED_FUNCTION_3_58();
  }
  else {
    id v14 = OUTLINED_FUNCTION_4_49();
  }
  uint64_t v48 = v14;
  uint64_t v15 = v8[3];
  uint64_t v16 = v8[4];
  uint64_t v17 = __swift_project_boxed_opaque_existential_1(v8, v15);
  if ((dispatch thunk of DeviceState.isWatch.getter(v15, v16) & 1) != 0)
  {
    id v18 = [objc_allocWithZone(SASTItemGroup) init];
    uint64_t v19 = objc_opt_self(&OBJC_CLASS___SASTItemGroup);
    uint64_t v20 = swift_dynamicCastObjCClass(v18, v19);
    if (v20)
    {
      uint64_t v21 = (void *)v20;
      id v18 = v18;
      uint64_t v22 = outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter( v21,  (SEL *)&selRef_templateItems,  &demangling cache variable for type metadata for SASTTemplateItem);
      uint64_t v23 = _swiftEmptyArrayStorage;
      if (v22) {
        uint64_t v23 = (void *)v22;
      }
      uint64_t v49 = (uint64_t)v23;
      OUTLINED_FUNCTION_13_33();
      OUTLINED_FUNCTION_14_41();
      unint64_t v25 = *(void *)((char *)&dword_10 + (v49 & 0xFFFFFFFFFFFFFF8LL));
      unint64_t v24 = *(void *)((char *)&dword_18 + (v49 & 0xFFFFFFFFFFFFFF8LL));
      if (v25 >= v24 >> 1) {
        OUTLINED_FUNCTION_11_38(v25 + 1, v24);
      }
      uint64_t v26 = OUTLINED_FUNCTION_19_30(v25);
      specialized Array._endMutation()(v26, v27, v28);
      static CustomIntentPlatformSpecificSnippets.makeWatchButton(model:)(a5, a6, a7);
      OUTLINED_FUNCTION_14_41();
      unint64_t v30 = *(void *)((char *)&dword_10 + (v49 & 0xFFFFFFFFFFFFFF8LL));
      unint64_t v29 = *(void *)((char *)&dword_18 + (v49 & 0xFFFFFFFFFFFFFF8LL));
      if (v30 >= v29 >> 1) {
        OUTLINED_FUNCTION_11_38(v30 + 1, v29);
      }
      uint64_t v31 = OUTLINED_FUNCTION_19_30(v30);
      specialized Array._endMutation()(v31, v32, v33);
      outlined bridged method (mbnn) of @objc SASTItemGroup.templateItems.setter(v49, v21);
    }

    else
    {
      uint64_t v36 = v8[3];
      uint64_t v47 = v8[4];
      __swift_project_boxed_opaque_existential_1(v8, v36);
      if ((dispatch thunk of DeviceState.isCarPlay.getter(v36, v47) & 1) != 0) {
        id v37 = OUTLINED_FUNCTION_3_58();
      }
      else {
        id v37 = OUTLINED_FUNCTION_4_49();
      }
      uint64_t v45 = v37;
      OUTLINED_FUNCTION_0_51((uint64_t)v37, "setConfirmationOptions:");
    }
  }

  else
  {
    id v18 = [objc_allocWithZone(SAUIConfirmationView) init];
    uint64_t v34 = outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter( v48,  (SEL *)&selRef_confirmText);
    if (v35)
    {
      uint64_t v17 = v35;
      String._bridgeToObjectiveC()();
      uint64_t v34 = OUTLINED_FUNCTION_2_45();
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    OUTLINED_FUNCTION_0_51(v34, "setConfirmText:");

    uint64_t v39 = OUTLINED_FUNCTION_18_35( v38,  (SEL *)&selRef_confirmCommands,  &demangling cache variable for type metadata for SAClientBoundCommand);
    if (v39)
    {
      uint64_t v17 = (void *)v39;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
      OUTLINED_FUNCTION_11_22();
      uint64_t v39 = OUTLINED_FUNCTION_2_45();
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    OUTLINED_FUNCTION_0_51(v39, "setConfirmCommands:");

    uint64_t v40 = outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter( v48,  (SEL *)&selRef_denyText);
    if (v41)
    {
      uint64_t v17 = v41;
      String._bridgeToObjectiveC()();
      uint64_t v40 = OUTLINED_FUNCTION_2_45();
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    OUTLINED_FUNCTION_0_51(v40, "setDenyText:");

    uint64_t v43 = OUTLINED_FUNCTION_18_35( v42,  (SEL *)&selRef_denyCommands,  &demangling cache variable for type metadata for SAClientBoundCommand);
    if (v43)
    {
      uint64_t v17 = (void *)v43;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
      OUTLINED_FUNCTION_11_22();
      uint64_t v43 = OUTLINED_FUNCTION_2_45();
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    OUTLINED_FUNCTION_0_51(v43, "setDenyCommands:");

    uint64_t v44 = outlined bridged method (pb) of @objc SAUIConfirmationOptions.allConfirmationOptions.getter(v48);
    if (v44)
    {
      OUTLINED_FUNCTION_72( v44,  (unint64_t *)&lazy cache variable for type metadata for SAUIConfirmationOption,  &OBJC_CLASS___SAUIConfirmationOption_ptr);
      Array._bridgeToObjectiveC()();
      OUTLINED_FUNCTION_58_2();
    }

    else
    {
      uint64_t v17 = 0LL;
    }

    [v18 setAllConfirmationOptions:v17];
  }

  return v18;
}

void *_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay18SiriLinkFlowPlugin30CustomIntentDisambiguationItemVGG_So018SASTColumnDataListM0Cs5NeverOTg506_sSi18fgh8Plugin30jklm6VSo018nop34H0CIgyno_Si6offset_AC7elementtAEs5Q239OIegnrzr_TR04_s18abc8Plugin36ef152PlatformSpecificSnippetsO46cardSectionsFromDetailedSelectionItemsForWatch33_58FF03AD48A84F3555BA630F3429BD7ALL014disambiguationO014deviceIsLockedSaySo22ijkh12CGSayAA0eF18gH21VG_SbtFZAISi_ALtXEfU_Tf3nnnpf_nTf1cn_n( uint64_t a1)
{
  uint64_t v13 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(0LL);
  uint64_t v2 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  if (v2)
  {
    unint64_t v3 = 0LL;
    uint64_t v4 = a1 + 32;
    do
    {
      outlined init with copy of CustomIntentDisambiguationItem(v4, (uint64_t)v10);
      memcpy(v12, v10, 0x51uLL);
      unint64_t v11 = v3;
      uint64_t v5 = closure #1 in static CustomIntentPlatformSpecificSnippets.cardSectionsFromDetailedSelectionItemsForWatch(disambiguationItems:deviceIsLocked:)( v3,  (uint64_t)v12);
      uint64_t v6 = outlined destroy of (offset: Int, element: CustomIntentDisambiguationItem)((uint64_t)&v11);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v6);
      uint64_t v7 = v13[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
      uint64_t v8 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v5);
      specialized ContiguousArray._endMutation()(v8);
      v4 += 88LL;
      ++v3;
    }

    while (v2 != v3);
  }

  swift_bridgeObjectRelease();
  return v13;
}

void *_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay18SiriLinkFlowPlugin30CustomIntentDisambiguationItemVGG_So13SFCardSectionCs5NeverOTg506_sSi18fgh8Plugin30jklm5VSo13no32CIgyno_Si6offset_AC7elementtAEs5P11OIegnrzr_TRSiAjNIgyno_Tf1cn_n( uint64_t a1, uint64_t (*a2)(uint64_t, _BYTE *), uint64_t a3)
{
  uint64_t v19 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(0LL);
  uint64_t v6 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  if (v6)
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = a1 + 32;
    do
    {
      outlined init with copy of CustomIntentDisambiguationItem(v8, (uint64_t)v16);
      memcpy(v18, v16, 0x51uLL);
      uint64_t v17 = v7;
      uint64_t v9 = a3;
      uint64_t v10 = a2(v7, v18);
      uint64_t v11 = outlined destroy of (offset: Int, element: CustomIntentDisambiguationItem)((uint64_t)&v17);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      uint64_t v12 = v19[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
      uint64_t v13 = v10;
      a3 = v9;
      uint64_t v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v13);
      specialized ContiguousArray._endMutation()(v14);
      v8 += 88LL;
      ++v7;
    }

    while (v6 != v7);
  }

  swift_bridgeObjectRelease();
  return v19;
}

void *CustomIntentPlatformSpecificSnippets.sensitiveSmartPromptName.unsafeMutableAddressor()
{
  return &static CustomIntentPlatformSpecificSnippets.sensitiveSmartPromptName;
}

id static CustomIntentPlatformSpecificSnippets.makeDialogFromUtteranceView(utteranceViews:)(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v17 = a1;
    }
    else {
      uint64_t v17 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    if (_CocoaArrayWrapper.endIndex.getter(v17)) {
      goto LABEL_3;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    return 0LL;
  }

  uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a1);
  if (!v3) {
    goto LABEL_19;
  }
LABEL_3:
  uint64_t v4 = (void *)(a1 & 0xC000000000000001LL);
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, (a1 & 0xC000000000000001LL) == 0);
  if ((a1 & 0xC000000000000001LL) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
  }
  else {
    id v5 = *(id *)(a1 + 32);
  }
  OUTLINED_FUNCTION_58_2();
  id v6 = [objc_allocWithZone(SADialog) init];
  uint64_t v7 = outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter( v4,  (SEL *)&selRef_dialogIdentifier);
  if (v8)
  {
    uint64_t v1 = v8;
    NSString v9 = String._bridgeToObjectiveC()();
    uint64_t v7 = OUTLINED_FUNCTION_22();
  }

  else
  {
    NSString v9 = 0LL;
  }

  OUTLINED_FUNCTION_16_43(v7, "setDialogIdentifier:");

  [v6 setSpokenOnly:1];
  id v10 = [objc_allocWithZone(SADialogText) init];
  uint64_t v11 = outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter( v4,  (SEL *)&selRef_text);
  if (v12)
  {
    String._bridgeToObjectiveC()();
    uint64_t v11 = OUTLINED_FUNCTION_8_55();
  }

  else
  {
    uint64_t v1 = 0LL;
  }

  OUTLINED_FUNCTION_20_37(v11, "setText:");

  id v13 = v4;
  uint64_t v14 = outlined bridged method (ob) of @objc SAAceView.speakableText.getter(v13);
  if (v15)
  {
    String._bridgeToObjectiveC()();
    uint64_t v14 = OUTLINED_FUNCTION_8_55();
  }

  else
  {
    uint64_t v1 = 0LL;
  }

  OUTLINED_FUNCTION_20_37(v14, "setSpeakableTextOverride:");

  OUTLINED_FUNCTION_16_43(v16, "setContent:");
  objc_msgSend(v6, "setCanUseServerTTS:", objc_msgSend(v13, "canUseServerTTS"));

  return v6;
}

uint64_t CustomIntentButton.label.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(v2[1]);
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

void CustomIntentButton.directInvocation.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
}

unint64_t static CustomIntentPlatformSpecificSnippets.smartPromptTypeName.getter()
{
  return 0xD000000000000051LL;
}

unint64_t static CustomIntentPlatformSpecificSnippets.sensitiveSmartPromptName.getter()
{
  return 0xD00000000000005ALL;
}

id static CustomIntentPlatformSpecificSnippets.getEmptySnippet(app:)()
{
  id v0 = [objc_allocWithZone(SAIntentGroupSnippet) init];
  App.appIdentifier.getter();
  if (v1)
  {
    uint64_t v2 = v1;
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v2);
  }

  else
  {
    NSString v3 = 0LL;
  }

  [v0 setAppId:v3];

  return v0;
}

id static CustomIntentPlatformSpecificSnippets.buildWatchSnippet(app:intent:intentResponse:)( uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = [objc_allocWithZone(SASTItemGroup) init];
  type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent,  &OBJC_CLASS___SAIntentGroupLaunchAppWithIntent_ptr);
  uint64_t v7 = (void *)static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)(a1, a2, a3);
  id v8 = [objc_allocWithZone(SASTCommandTemplateAction) init];
  id v9 = [objc_allocWithZone(SASTApplicationBannerItem) init];
  id v10 = [objc_allocWithZone(SAUIDecoratedText) init];
  id v11 = [objc_allocWithZone(SASTLineDetailItem) init];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v13 = swift_allocObject(v12, 40LL, 7LL);
  *(_OWORD *)(v13 + 16) = xmmword_17E150;
  *(void *)(v13 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = v7;
  uint64_t v38 = v13;
  specialized Array._endMutation()(v13, v14, v15);
  id v16 = v7;
  outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v38, v8);
  App.appIdentifier.getter();
  if (v17)
  {
    uint64_t v18 = v17;
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v18);
  }

  else
  {
    NSString v19 = 0LL;
  }

  objc_msgSend(v9, "setBundleId:", v19, v38);

  [v9 setAction:v8];
  id v20 = v9;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  unint64_t v22 = *(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
  unint64_t v21 = *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
  if (v22 >= v21 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1LL);
  }
  uint64_t v23 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
  specialized Array._endMutation()(v23, v24, v25);
  id v26 = [a2 _codableDescription];
  id v27 = [v26 localizedTitle];

  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = v29;

  outlined bridged method (mbnn) of @objc SAUIDecoratedText.text.setter(v28, v30, v10);
  [v11 setTitle:v10];
  id v31 = v11;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  unint64_t v33 = *(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
  unint64_t v32 = *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
  if (v33 >= v32 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1LL);
  }
  uint64_t v34 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, v31);
  specialized Array._endMutation()(v34, v35, v36);
  outlined bridged method (mbnn) of @objc SASTItemGroup.templateItems.setter((uint64_t)_swiftEmptyArrayStorage, v6);

  return v6;
}

uint64_t static CustomIntentPlatformSpecificSnippets.buildIntentSnippet(app:intent:intentResponse:isForConfirmation:vcShortcut:)( uint64_t a1, uint64_t a2, id a3, char a4)
{
  id v8 = (id)static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)( a1,  a2,  a3);
  id v9 = (void *)static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();

  id v10 = (void *)static CasinoFactory.makePlaceholderCardSection()();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v12 = swift_allocObject(v11, 40LL, 7LL);
  __int128 v29 = xmmword_17E150;
  *(_OWORD *)(v12 + 16) = xmmword_17E150;
  *(void *)(v12 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = v9;
  uint64_t v30 = v12;
  specialized Array._endMutation()(v12, v13, v14);
  id v15 = v9;
  outlined bridged method (mbnn) of @objc SFCardSection.commands.setter(v30);
  if (a3 && (id v16 = a3, v17 = (uint64_t)[v16 _code], v17 <= 99))
  {
    if ((v17 & 0x8000000000000000LL) == 0 || (a4 & 1) == 0) {
      goto LABEL_10;
    }
  }

  else
  {
    if ((a4 & 1) == 0) {
      goto LABEL_10;
    }
    id v16 = a3;
  }

  id v18 = objc_msgSend(v16, "backingStore", 1, 3);
  a3 = [objc_allocWithZone(INIntentResponse) initWithBackingStore:v18];

  if (a3) {
    [a3 _setCode:8];
  }
LABEL_10:
  type metadata accessor for NSError( 0LL,  &lazy cache variable for type metadata for SACardSnippet,  &OBJC_CLASS___SACardSnippet_ptr);
  uint64_t v19 = swift_allocObject(v11, 40LL, 7LL);
  *(_OWORD *)(v19 + 16) = v29;
  *(void *)(v19 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = v10;
  uint64_t v31 = v19;
  specialized Array._endMutation()(v19, v20, v21);
  id v22 = a3;
  id v23 = v10;
  uint64_t v24 = static SACardSnippet.makeFromCardSectionsWithIntentData(cardSections:intent:intentResponse:shouldGenerateAceId:)( v31,  a2,  a3,  1LL);
  swift_bridgeObjectRelease(v31);

  uint64_t v25 = swift_allocObject(v11, 40LL, 7LL);
  *(_OWORD *)(v25 + 16) = v29;
  *(void *)(v25 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = v8;
  specialized Array._endMutation()(v25, v26, v27);
  outlined bridged method (mbnn) of @objc SACardSnippet.referencedCommands.setter();

  return v24;
}

id static CustomIntentPlatformSpecificSnippets.makeWatchButton(model:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = [objc_allocWithZone(SASTButtonItem) init];
  id v7 = [objc_allocWithZone(SAUIDecoratedText) init];
  id v8 = [objc_allocWithZone(SASTCommandTemplateAction) init];
  outlined bridged method (mbgnn) of @objc SAUIDecoratedText.text.setter(a1, a2, v7);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v10 = swift_allocObject(v9, 40LL, 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_17E150;
  *(void *)(v10 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = a3;
  uint64_t v15 = v10;
  specialized Array._endMutation()(v10, v11, v12);
  id v13 = a3;
  outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v15, v8);
  [v6 setDecoratedLabel:v7];
  [v6 setCentered:1];
  [v6 setAction:v8];

  return v6;
}

id static CustomIntentPlatformSpecificSnippets.getCarplayConfirmationOptions(yes:no:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v12 = [objc_allocWithZone(SAUIConfirmationOptions) init];
  id v13 = [objc_allocWithZone(SAUIConfirmationOption) init];
  id v14 = [objc_allocWithZone(SAUIConfirmationOption) init];
  outlined bridged method (mbgnn) of @objc SAUIConfirmationOption.label.setter(a1, a2, v13);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v16 = swift_allocObject(v15, 40LL, 7LL);
  *(_OWORD *)(v16 + 16) = xmmword_17E150;
  *(void *)(v16 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = a3;
  uint64_t v42 = v16;
  specialized Array._endMutation()(v16, v17, v18);
  id v19 = a3;
  outlined bridged method (mbnn) of @objc SAUIConfirmationOption.commands.setter(v42, v13);
  outlined bridged method (mbgnn) of @objc SAUIConfirmationOption.label.setter(a4, a5, v14);
  uint64_t v20 = swift_allocObject(v15, 40LL, 7LL);
  *(_OWORD *)(v20 + 16) = xmmword_17E150;
  *(void *)(v20 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = a6;
  uint64_t v43 = v20;
  specialized Array._endMutation()(v20, v21, v22);
  id v23 = a6;
  outlined bridged method (mbnn) of @objc SAUIConfirmationOption.commands.setter(v43, v14);
  outlined bridged method (pb) of @objc SAUIConfirmationOption.label.getter(v13);
  if (v24)
  {
    uint64_t v25 = v24;
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v25);
  }

  else
  {
    NSString v26 = 0LL;
  }

  objc_msgSend(v12, "setConfirmText:", v26, 1, 3);

  uint64_t v27 = outlined bridged method (pb) of @objc SAUIConfirmationOption.commands.getter(v13);
  if (v27)
  {
    uint64_t v28 = v27;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    v29.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v28);
  }

  else
  {
    v29.super.Class isa = 0LL;
  }

  [v12 setConfirmCommands:v29.super.isa];

  outlined bridged method (pb) of @objc SAUIConfirmationOption.label.getter(v14);
  if (v30)
  {
    uint64_t v31 = v30;
    NSString v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v31);
  }

  else
  {
    NSString v32 = 0LL;
  }

  [v12 setDenyText:v32];

  uint64_t v33 = outlined bridged method (pb) of @objc SAUIConfirmationOption.commands.getter(v14);
  if (v33)
  {
    uint64_t v34 = v33;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    v35.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v34);
  }

  else
  {
    v35.super.Class isa = 0LL;
  }

  [v12 setDenyCommands:v35.super.isa];

  uint64_t v36 = swift_allocObject(v15, 48LL, 7LL);
  *(_OWORD *)(v36 + 16) = xmmword_17E670;
  *(void *)(v36 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = v13;
  *(void *)(v36 + 40) = v14;
  uint64_t v44 = v36;
  specialized Array._endMutation()(v36, v37, v38);
  id v39 = v13;
  id v40 = v14;
  outlined bridged method (mbnn) of @objc SAUIConfirmationOptions.allConfirmationOptions.setter(v44, (uint64_t)v12);
  outlined bridged method (mbnn) of @objc SAUIConfirmationOptions.cancelTrigger.setter();

  return v12;
}

id static CustomIntentPlatformSpecificSnippets.getIOSConfirmationOptions(yes:no:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v8 = [objc_allocWithZone(SAUIConfirmationOptions) init];
  outlined bridged method (mbgnn) of @objc SAUIConfirmationOptions.confirmText.setter();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v10 = swift_allocObject(v9, 40LL, 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_17E150;
  *(void *)(v10 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = a3;
  uint64_t v19 = v10;
  specialized Array._endMutation()(v10, v11, v12);
  id v13 = a3;
  outlined bridged method (mbnn) of @objc SAUIConfirmationOptions.confirmCommands.setter(v19, v8);
  outlined bridged method (mbgnn) of @objc SAUIConfirmationOptions.denyText.setter();
  uint64_t v14 = swift_allocObject(v9, 40LL, 7LL);
  *(_OWORD *)(v14 + 16) = xmmword_17E150;
  *(void *)(v14 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = a6;
  uint64_t v20 = v14;
  specialized Array._endMutation()(v14, v15, v16);
  id v17 = a6;
  outlined bridged method (mbnn) of @objc SAUIConfirmationOptions.denyCommands.setter(v20, v8);
  outlined bridged method (mbnn) of @objc SAUIConfirmationOptions.cancelTrigger.setter();
  return v8;
}

void static CustomIntentPlatformSpecificSnippets.makeDisambiguationSnippet(intent:app:disambiguationItems:parameterName:isSilentMode:canUseServerTTS:utteranceView:vcShortcut:device:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, void *a8, uint64_t a9, void *a10)
{
  uint64_t v15 = a10[3];
  uint64_t v16 = a10[4];
  __swift_project_boxed_opaque_existential_1(a10, v15);
  LOBYTE(v15) = dispatch thunk of DeviceState.isWatch.getter(v15, v16);
  uint64_t v17 = a10[3];
  uint64_t v18 = a10[4];
  __swift_project_boxed_opaque_existential_1(a10, v17);
  char v19 = dispatch thunk of DeviceState.isLockedWithPasscode.getter(v17, v18);
  if ((v15 & 1) != 0)
  {
    swift_bridgeObjectRetain(a3);
    _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay18SiriLinkFlowPlugin30CustomIntentDisambiguationItemVGG_So018SASTColumnDataListM0Cs5NeverOTg506_sSi18fgh8Plugin30jklm6VSo018nop34H0CIgyno_Si6offset_AC7elementtAEs5Q239OIegnrzr_TR04_s18abc8Plugin36ef152PlatformSpecificSnippetsO46cardSectionsFromDetailedSelectionItemsForWatch33_58FF03AD48A84F3555BA630F3429BD7ALL014disambiguationO014deviceIsLockedSaySo22ijkh12CGSayAA0eF18gH21VG_SbtFZAISi_ALtXEfU_Tf3nnnpf_nTf1cn_n(v20);
    OUTLINED_FUNCTION_8_55();
    id v21 = [objc_allocWithZone(SASTItemGroup) init];
    if ((unint64_t)v18 >> 62)
    {
      if (v18 < 0) {
        uint64_t v29 = v18;
      }
      else {
        uint64_t v29 = v18 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v18);
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
      uint64_t v23 = _bridgeCocoaArray<A>(_:)(v29, v30);
      OUTLINED_FUNCTION_22();
    }

    else
    {
      swift_bridgeObjectRetain(v18);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v22);
      uint64_t v23 = v18;
    }

    OUTLINED_FUNCTION_22();
    outlined bridged method (mbnn) of @objc SASTItemGroup.templateItems.setter(v23, v21);
    [v21 setCanUseServerTTS:a7 & 1];
  }

  else
  {
    unint64_t v24 = static CustomIntentPlatformSpecificSnippets.cardSectionsFromDetailedSelectionItems(intent:app:disambiguationItems:parameterName:deviceIsLocked:isSilentMode:deviceState:utteranceView:)( a1,  a2,  a3,  a4,  a5,  v19 & 1,  a6 & 1,  (uint64_t)a10,  a8);
    uint64_t v25 = (void *)OUTLINED_FUNCTION_72( v24,  &lazy cache variable for type metadata for SACardSnippet,  &OBJC_CLASS___SACardSnippet_ptr);
    static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:)(v24);
    OUTLINED_FUNCTION_58_2();
    outlined bridged method (mbnn) of @objc SACardSnippet.referencedCommands.setter();
    OUTLINED_FUNCTION_72( v26,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
    id v27 = v25;
    Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
    OUTLINED_FUNCTION_0_51((uint64_t)isa, "setListenAfterSpeaking:");

    [v27 setCanUseServerTTS:a7 & 1];
  }

  OUTLINED_FUNCTION_11_7();
}

unint64_t static CustomIntentPlatformSpecificSnippets.cardSectionsFromDetailedSelectionItems(intent:app:disambiguationItems:parameterName:deviceIsLocked:isSilentMode:deviceState:utteranceView:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v12 = type metadata accessor for ImageSize(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v37 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v38 = _swiftEmptyArrayStorage;
  if (a9)
  {
    v36[0] = a5;
    v36[1] = a8;
    id v17 = a9;
    uint64_t v18 = outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter( v17,  (SEL *)&selRef_text);
    uint64_t v20 = v19;
    (*(void (**)(char *, void, uint64_t))(v13 + 104))(v16, enum case for ImageSize.original(_:), v12);
    char v35 = 1;
    uint64_t v33 = 0LL;
    uint64_t v34 = 20LL;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    id v21 = (void *)static CasinoFactory.makeRowCardSection(possibleTitle:imageSize:possibleLeadingSubtitle:possibleTrailingSubtitle:possibleImage:possibleMonogramLetters:possibleContactIdentifiers:possibleImageUri:maxLines:shouldCropToCircle:)( v18,  v20,  v16,  0LL,  0LL,  0LL,  0LL,  0LL);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    id v22 = v21;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v22);
    unint64_t v24 = *(void *)((char *)&dword_10 + (v37 & 0xFFFFFFFFFFFFFF8LL));
    unint64_t v23 = *(void *)((char *)&dword_18 + (v37 & 0xFFFFFFFFFFFFFF8LL));
    if (v24 >= v23 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1LL);
    }
    uint64_t v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v22);
    specialized Array._endMutation()(v25, v26, v27);
  }

  __chkstk_darwin(v14);
  swift_bridgeObjectRetain(a3);
  uint64_t v29 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay18SiriLinkFlowPlugin30CustomIntentDisambiguationItemVGG_So13SFCardSectionCs5NeverOTg506_sSi18fgh8Plugin30jklm5VSo13no32CIgyno_Si6offset_AC7elementtAEs5P11OIegnrzr_TRSiAjNIgyno_Tf1cn_n( v28,  (uint64_t (*)(uint64_t, _BYTE *))partial apply for closure #1 in static CustomIntentPlatformSpecificSnippets.cardSectionsFromDetailedSelectionItems(intent:app:disambiguationItems:parameterName:deviceIsLocked:isSilentMode:deviceState:utteranceView:),  (uint64_t)&v36[-10]);
  swift_bridgeObjectRelease();
  specialized Array.append<A>(contentsOf:)((uint64_t)v29);
  return v37;
}

id static CustomIntentPlatformSpecificSnippets.makeCommandsForDisambiguationItem(intent:rawItem:app:parameterName:title:deviceState:)( void *a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v11 = static SLFDisambiguationItemConverter.toDirectInvocationPayload(intent:chosenItem:parameterName:)( a1,  a2,  a4,  a5);
  if (v11)
  {
    uint64_t v12 = v11;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    uint64_t v14 = __swift_project_value_buffer(v13, (uint64_t)static Logger.voiceCommands);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      id v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v17 = 0;
      _os_log_impl( &dword_0,  v15,  v16,  "CustomIntentPlatformSpecificSnippet.makeCommandsForDisambiguationItem constructed payload",  v17,  2u);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    uint64_t v19 = App.appIdentifier.getter(v18);
    static OutputUtils.makeRSKECommandFromDirectInvocation(payload:appId:deviceState:)((uint64_t)v12, v19, v20, a8);
    id v22 = v21;
    id v23 = [(id)objc_opt_self(SKIDirectInvocation) wrapCommandInStartLocalRequest:v21];

    swift_bridgeObjectRelease();
    return v23;
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    uint64_t v26 = __swift_project_value_buffer(v25, (uint64_t)static Logger.voiceCommands);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl( &dword_0,  v27,  v28,  "CustomIntentPlatformSpecificSnippet.makeCommandsForDisambiguationItem unable to construct payload",  v29,  2u);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    id v30 = [objc_allocWithZone(SAStartRequest) init];
    outlined bridged method (mbgnn) of @objc SAStartRequest.utterance.setter(a6, a7, v30);
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    outlined bridged method (mbnn) of @objc SAStartRequest.origin.setter(v31, v32, v30);
    id v33 = [objc_allocWithZone(SASendCommands) init];
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v35 = swift_allocObject(v34, 40LL, 7LL);
    *(_OWORD *)(v35 + 16) = xmmword_17E150;
    *(void *)(v35 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = v30;
    uint64_t v38 = v35;
    specialized Array._endMutation()(v35, v36, v37);
    outlined bridged method (mbnn) of @objc SASendCommands.commands.setter(v38, v33);
    return v33;
  }

uint64_t closure #1 in static CustomIntentPlatformSpecificSnippets.cardSectionsFromDetailedSelectionItemsForWatch(disambiguationItems:deviceIsLocked:)( unint64_t a1, uint64_t a2)
{
  id v4 = [objc_allocWithZone(SAUIDecoratedText) init];
  specialized DisambiguationItemProtocol.toDisplayString()();
  outlined bridged method (mbnn) of @objc SAUIDecoratedText.text.setter(v5, v6, v4);
  id v7 = [objc_allocWithZone(SASTCommandTemplateAction) init];
  uint64_t result = outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter( v4,  (SEL *)&selRef_text);
  if (v9)
  {
    uint64_t v10 = static OutputUtils.machineUtteranceForDisambiguationItemIndex(index:fallbackString:)(a1, result, v9);
    uint64_t v12 = v11;
    swift_bridgeObjectRelease();
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t inited = swift_initStackObject(v13, v26);
    *(_OWORD *)(inited + 16) = xmmword_17E650;
    *(void *)(inited + 3outlined consume of WFShowAlertFlow.State(v0, 2) = v10;
    *(void *)(inited + 40) = v12;
    id v15 = static OutputUtils.makeSendCommandsFromUtterance(utterances:)(inited);
    swift_setDeallocating(inited);
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v17 = swift_allocObject(v16, 40LL, 7LL);
    *(_OWORD *)(v17 + 16) = xmmword_17E150;
    *(void *)(v17 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = v15;
    uint64_t v25 = v17;
    specialized Array._endMutation()(v17, v18, v19);
    swift_unknownObjectRetain(v15);
    outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v25, v7);
    id v20 = [objc_allocWithZone(SASTColumnDataListItem) init];
    [v20 setTitle:v4];
    [v20 setAction:v7];
    id v21 = *(void **)(a2 + 32);
    if (v21)
    {
      id v22 = v21;
      static OutputUtils.buildNanoImage(from:)(v22);
      id v24 = v23;
      [v20 setImageResource:v24];
    }

    swift_unknownObjectRelease(v15);
    return (uint64_t)v20;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t closure #1 in static CustomIntentPlatformSpecificSnippets.cardSectionsFromDetailedSelectionItems(intent:app:disambiguationItems:parameterName:deviceIsLocked:isSilentMode:deviceState:utteranceView:)( unint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, void *a8, void *a9)
{
  unint64_t v41 = a7;
  uint64_t v42 = a8;
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  uint64_t v43 = a4;
  uint64_t v38 = a3;
  uint64_t v11 = type metadata accessor for ImageSize(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *a2;
  uint64_t v15 = a2[1];
  uint64_t v17 = a2[2];
  uint64_t v18 = a2[3];
  type metadata accessor for CATSpeakableString();
  uint64_t v37 = v16;
  uint64_t v19 = static CATSpeakableString.stripTTSHint(print:)();
  uint64_t v21 = v20;
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for ImageSize.original(_:), v11);
  uint64_t v22 = static CasinoFactory.makeRowCardSection(possibleTitle:imageSize:possibleLeadingSubtitle:possibleTrailingSubtitle:possibleImage:possibleMonogramLetters:possibleContactIdentifiers:possibleImageUri:maxLines:shouldCropToCircle:)( v19,  v21,  v14,  v17,  v18,  0LL,  0LL,  a2[4]);
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)(v43 + 16) > a1)
  {
    id v24 = static CustomIntentPlatformSpecificSnippets.makeCommandsForDisambiguationItem(intent:rawItem:app:parameterName:title:deviceState:)( v38,  (void *)(v43 + 88 * a1 + 32),  v39,  v40,  v41,  v37,  v15,  v42);
    uint64_t v25 = (void *)static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v27 = swift_allocObject(v26, 40LL, 7LL);
    *(_OWORD *)(v27 + 16) = xmmword_17E150;
    *(void *)(v27 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = v25;
    uint64_t v44 = v27;
    specialized Array._endMutation()(v27, v28, v29);
    uint64_t v30 = v44;
    id v31 = v25;
    outlined bridged method (mbnn) of @objc SFCardSection.commands.setter(v30);
    id v32 = v24;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v32);
    uint64_t v33 = *(void *)((char *)&dword_10 + (*a9 & 0xFFFFFFFFFFFFF8LL));
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v33);
    uint64_t v34 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, v32);
    specialized Array._endMutation()(v34, v35, v36);

    return v22;
  }

  __break(1u);
  return result;
}

void outlined bridged method (mbnn) of @objc SASTItemGroup.templateItems.setter(uint64_t a1, void *a2)
{
  Class isa = OUTLINED_FUNCTION_11_22().super.isa;
  swift_bridgeObjectRelease(a1);
  [a2 setTemplateItems:isa];
}

uint64_t outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(void *a1)
{
  return outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter( a1,  (SEL *)&selRef_templateItems,  &demangling cache variable for type metadata for SASTTemplateItem);
}

uint64_t outlined bridged method (pb) of @objc SAUIConfirmationOptions.confirmText.getter(void *a1)
{
  return outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter( a1,  (SEL *)&selRef_confirmText);
}

uint64_t outlined bridged method (pb) of @objc SAUIConfirmationOptions.confirmCommands.getter(void *a1)
{
  return outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter( a1,  (SEL *)&selRef_confirmCommands,  &demangling cache variable for type metadata for SAClientBoundCommand);
}

uint64_t outlined bridged method (pb) of @objc SAUIConfirmationOptions.denyText.getter(void *a1)
{
  return outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter( a1,  (SEL *)&selRef_denyText);
}

uint64_t outlined bridged method (pb) of @objc SAUIConfirmationOptions.denyCommands.getter(void *a1)
{
  return outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter( a1,  (SEL *)&selRef_denyCommands,  &demangling cache variable for type metadata for SAClientBoundCommand);
}

uint64_t outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter( void *a1, SEL *a2, uint64_t *a3)
{
  id v4 = [a1 *a2];
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  return v7;
}

uint64_t outlined bridged method (pb) of @objc SAUIConfirmationOptions.allConfirmationOptions.getter( void *a1)
{
  id v1 = [a1 allConfirmationOptions];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for SAUIConfirmationOption,  &OBJC_CLASS___SAUIConfirmationOption_ptr);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

uint64_t outlined bridged method (pb) of @objc SAUIAssistantUtteranceView.text.getter(void *a1)
{
  return outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter( a1,  (SEL *)&selRef_text);
}

uint64_t outlined bridged method (ob) of @objc SAAceView.speakableText.getter(void *a1)
{
  id v2 = [a1 speakableText];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

void destroy for CustomIntentButton(uint64_t a1)
{
}

void *initializeBufferWithCopyOfBuffer for CustomIntentButton(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  id v5 = v4;
  return a1;
}

void *assignWithCopy for CustomIntentButton(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = (void *)a2[2];
  uint64_t v7 = (void *)a1[2];
  a1[2] = v6;
  id v8 = v6;

  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for CustomIntentButton(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = (void *)a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for CustomIntentButton(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(outlined consume of Data?(v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(outlined consume of Data?(v1, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(outlined consume of Data?(v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomIntentButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for CustomIntentButton()
{
  return &type metadata for CustomIntentButton;
}

ValueMetadata *type metadata accessor for CustomIntentPlatformSpecificSnippets()
{
  return &type metadata for CustomIntentPlatformSpecificSnippets;
}

uint64_t outlined destroy of (offset: Int, element: CustomIntentDisambiguationItem)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: CustomIntentDisambiguationItem));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in static CustomIntentPlatformSpecificSnippets.cardSectionsFromDetailedSelectionItems(intent:app:disambiguationItems:parameterName:deviceIsLocked:isSilentMode:deviceState:utteranceView:)( unint64_t a1, uint64_t *a2)
{
  return closure #1 in static CustomIntentPlatformSpecificSnippets.cardSectionsFromDetailedSelectionItems(intent:app:disambiguationItems:parameterName:deviceIsLocked:isSilentMode:deviceState:utteranceView:)( a1,  a2,  *(void **)(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  *(void *)(v2 + 48),  *(void **)(v2 + 56),  *(void **)(v2 + 64));
}

id OUTLINED_FUNCTION_0_51(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_2_45()
{
  return swift_bridgeObjectRelease(v0);
}

id OUTLINED_FUNCTION_3_58()
{
  return static CustomIntentPlatformSpecificSnippets.getCarplayConfirmationOptions(yes:no:)(v5, v4, v3, v2, v1, v0);
}

id OUTLINED_FUNCTION_4_49()
{
  return static CustomIntentPlatformSpecificSnippets.getIOSConfirmationOptions(yes:no:)(v5, v4, v3, v2, v1, v0);
}

uint64_t OUTLINED_FUNCTION_5_47(void *a1)
{
  return v1;
}

uint64_t OUTLINED_FUNCTION_6_49()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_55()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t OUTLINED_FUNCTION_11_38@<X0>(uint64_t a1@<X1>, unint64_t a2@<X8>)
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a2 > 1, a1, 1LL);
}

id OUTLINED_FUNCTION_13_33()
{
  return static CustomIntentPlatformSpecificSnippets.makeWatchButton(model:)(v2, v1, v0);
}

uint64_t OUTLINED_FUNCTION_14_41()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

id OUTLINED_FUNCTION_16_43(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t OUTLINED_FUNCTION_18_35(uint64_t a1, SEL *a2, uint64_t *a3)
{
  return outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(v3, a2, a3);
}

uint64_t OUTLINED_FUNCTION_19_30(uint64_t a1)
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(a1, v1);
}

id OUTLINED_FUNCTION_20_37(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

NSMeasurement __swiftcall ParsedMeasurement.toNSMeasurement(defaultUnit:)(NSUnit defaultUnit)
{
  if ((v2 & 1) != 0) {
    Class isa = v1;
  }
  else {
    Class isa = defaultUnit.super.isa;
  }
  uint64_t v4 = (objc_class *)[objc_allocWithZone(NSMeasurement) initWithDoubleValue:isa unit:*(double *)&defaultUnit._symbol];
  result._doubleValue = v6;
  result._unit = v5;
  result.super.Class isa = v4;
  return result;
}

uint64_t ParsedMeasurement.toMeasurement(unitType:parameterMetadata:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X3>, char a4@<W4>, uint64_t a5@<X8>)
{
  if ((a4 & 1) == 0)
  {
    LNActionParameterMetadata.measurementDefaultUnitSymbol.getter();
    if (!v8)
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v38 = type metadata accessor for Logger(0LL);
      uint64_t v39 = __swift_project_value_buffer(v38, (uint64_t)static Logger.voiceCommands);
      uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
      os_log_type_t v41 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
        *(_WORD *)uint64_t v42 = 0;
        _os_log_impl(&dword_0, v40, v41, "Could not create valid measurement due to missing unit symbol.", v42, 2u);
        OUTLINED_FUNCTION_1_0((uint64_t)v42);
      }

      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>);
      uint64_t v21 = a5;
      uint64_t v22 = 1LL;
      return __swift_storeEnumTagSinglePayload(v21, v22, 1LL, v20);
    }

    uint64_t v9 = v8;
    double v10 = *(double *)&a2;
    NSString v11 = String._bridgeToObjectiveC()();
    id v12 = (id)LNMeasurementUnitTypeToUnit(a1, v11);
    swift_bridgeObjectRelease(v9);

    uint64_t v14 = OUTLINED_FUNCTION_72(v13, &lazy cache variable for type metadata for NSUnit, &OBJC_CLASS___NSUnit_ptr);
    double v15 = v10;
    id v16 = v12;
LABEL_6:
    Measurement.init(value:unit:)(v16, v14, v15);
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>);
    uint64_t v21 = a5;
    uint64_t v22 = 0LL;
    return __swift_storeEnumTagSinglePayload(v21, v22, 1LL, v20);
  }

  id v18 = a3;
  uint64_t v19 = LNMeasurementUnitTypeOfUnit(v18);
  if (v19 == a1)
  {
    uint64_t v14 = OUTLINED_FUNCTION_72(v19, &lazy cache variable for type metadata for NSUnit, &OBJC_CLASS___NSUnit_ptr);
    double v15 = *(double *)&a2;
    id v16 = v18;
    goto LABEL_6;
  }

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v23 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v23, (uint64_t)static Logger.voiceCommands);
  id v24 = v18;
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = OUTLINED_FUNCTION_38(22LL);
    uint64_t v45 = OUTLINED_FUNCTION_38(64LL);
    uint64_t v47 = v45;
    *(_DWORD *)uint64_t v27 = 136315394;
    LNMeasurementUnitTypeOfUnit(v24);
    type metadata accessor for LNMeasurementUnitType(0LL);
    uint64_t v30 = OUTLINED_FUNCTION_4_50(v28, v29);
    unint64_t v32 = v31;
    uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v27 + 4);
    swift_bridgeObjectRelease(v32);
    outlined consume of ParsedMeasurement(a2, a3, 1);
    OUTLINED_FUNCTION_0_52();
    *(_WORD *)(v27 + 1outlined consume of WFShowAlertFlow.State(v0, 2) = 2080;
    uint64_t v46 = a1;
    uint64_t v35 = OUTLINED_FUNCTION_4_50(v33, v34);
    unint64_t v37 = v36;
    uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v27 + 14);
    swift_bridgeObjectRelease(v37);
    _os_log_impl(&dword_0, v25, v26, "Measurement unit type %s does not match requested %s.", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy(v45, 2LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v45);
    OUTLINED_FUNCTION_1_0(v27);

    OUTLINED_FUNCTION_0_52();
  }

  else
  {
    outlined consume of ParsedMeasurement(a2, a3, 1);
    OUTLINED_FUNCTION_0_52();
  }

  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>);
  return __swift_storeEnumTagSinglePayload(a5, 1LL, 1LL, v44);
}

BOOL static ParsedMeasurement.__derived_enum_equals(_:_:)( uint64_t a1, void *a2, char a3, uint64_t a4, void *a5, char a6)
{
  if ((a3 & 1) != 0)
  {
    if ((a6 & 1) != 0 && *(double *)&a1 == *(double *)&a4)
    {
      OUTLINED_FUNCTION_72(a1, &lazy cache variable for type metadata for NSObject, &OBJC_CLASS___NSObject_ptr);
      outlined copy of ParsedMeasurement(a1, a2, 1);
      outlined copy of ParsedMeasurement(a4, a5, 1);
      char v11 = static NSObject.== infix(_:_:)(a2, a5);
      outlined consume of ParsedMeasurement(a4, a5, 1);
      outlined consume of ParsedMeasurement(a1, a2, 1);
      return v11 & 1;
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
    return (a6 & 1) == 0 && *(double *)&a1 == *(double *)&a4;
  }

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ParsedMeasurement( uint64_t a1, uint64_t a2)
{
  return static ParsedMeasurement.__derived_enum_equals(_:_:)( *(void *)a1,  *(void **)(a1 + 8),  *(_BYTE *)(a1 + 16),  *(void *)a2,  *(void **)(a2 + 8),  *(_BYTE *)(a2 + 16));
}

void destroy for ParsedMeasurement(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for ParsedMeasurement(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of ParsedMeasurement(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ParsedMeasurement(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of ParsedMeasurement(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  char v8 = *(_BYTE *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of ParsedMeasurement(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ParsedMeasurement(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  char v5 = *(void **)(a1 + 8);
  char v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of ParsedMeasurement(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParsedMeasurement(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParsedMeasurement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)NSMeasurement result = a2 - 255;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 7) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 7) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t destructiveInjectEnumTag for ParsedMeasurement(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ParsedMeasurement()
{
  return &type metadata for ParsedMeasurement;
}

void OUTLINED_FUNCTION_0_52()
{
}

uint64_t OUTLINED_FUNCTION_4_50(uint64_t a1, uint64_t a2, ...)
{
  return String.init<A>(describing:)(va, v2);
}

uint64_t CustomIntentUnsupportedValueFlowStrategy.__allocating_init(deviceState:)(void *a1)
{
  uint64_t v3 = OUTLINED_FUNCTION_19(v1, 64LL);
  CustomIntentUnsupportedValueFlowStrategy.init(deviceState:)(a1);
  return v3;
}

uint64_t CustomIntentUnsupportedValueFlowStrategy.init(deviceState:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v4);
  outlined init with copy of DeviceState((uint64_t)a1, v1 + 16);
  outlined init with copy of DeviceState((uint64_t)a1, (uint64_t)v17);
  if (one-time initialization token for shared != -1) {
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  }
  uint64_t v5 = static WFDialogState.shared;
  type metadata accessor for RunCustomIntentCATs(0LL);
  uint64_t v6 = swift_retain(v5);
  static CATOption.defaultMode.getter(v6);
  uint64_t v7 = OUTLINED_FUNCTION_41_15();
  type metadata accessor for RunCustomIntentCATsSimple(0LL);
  OUTLINED_FUNCTION_59();
  uint64_t v8 = OUTLINED_FUNCTION_241();
  type metadata accessor for RunVoiceCommandCATs(0LL);
  OUTLINED_FUNCTION_59();
  uint64_t v9 = OUTLINED_FUNCTION_41_15();
  type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  OUTLINED_FUNCTION_59();
  uint64_t v10 = OUTLINED_FUNCTION_241();
  uint64_t v11 = type metadata accessor for AppNameResolver();
  uint64_t v12 = OUTLINED_FUNCTION_19(v11, 16LL);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  uint64_t v13 = type metadata accessor for CustomIntentsDialogTemplating();
  uint64_t v14 = OUTLINED_FUNCTION_19(v13, 152LL);
  specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)( v17,  v5,  0LL,  1,  v7,  v8,  v9,  v10,  v12,  v14);
  *(void *)(v2 + 56) = v15;
  return v2;
}

uint64_t CustomIntentUnsupportedValueFlowStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)( uint64_t a1)
{
  _BYTE v2[8] = a1;
  uint64_t v3 = OUTLINED_FUNCTION_71_10();
  v2[9] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[10] = v4;
  v2[11] = OUTLINED_FUNCTION_9_0(v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INIntent>);
  v2[12] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[13] = v6;
  v2[14] = OUTLINED_FUNCTION_4_0(v6);
  v2[15] = swift_task_alloc(v1);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentUnsupportedValueFlowStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v3 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v3, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_30_24(v1);
  uint64_t v4 = OUTLINED_FUNCTION_30_24(v2);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v9 = *(void *)(v0 + 112);
  uint64_t v8 = *(void *)(v0 + 120);
  uint64_t v10 = *(void *)(v0 + 96);
  if (v7)
  {
    uint64_t v11 = *(void *)(v0 + 88);
    uint64_t v35 = *(void *)(v0 + 80);
    uint64_t v36 = *(void *)(v0 + 72);
    uint64_t v33 = *(void *)(v0 + 112);
    uint64_t v12 = OUTLINED_FUNCTION_38(22LL);
    uint64_t v38 = OUTLINED_FUNCTION_38(64LL);
    uint64_t v39 = v38;
    *(_DWORD *)uint64_t v12 = 136315394;
    log = v5;
    uint64_t v13 = (void *)ParameterResolutionRecord.intent.getter(v10);
    id v14 = [v13 typeName];

    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    os_log_type_t type = v6;
    unint64_t v17 = v16;

    *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v12 + 4);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_8_11(v8);
    *(_WORD *)(v12 + 1outlined consume of WFShowAlertFlow.State(v0, 2) = 2080;
    uint64_t v18 = ParameterResolutionRecord.parameter.getter(v10);
    uint64_t v19 = ParameterIdentifier.name.getter(v18);
    unint64_t v21 = v20;
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v11, v36);
    *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v12 + 14);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_8_11(v33);
    _os_log_impl( &dword_0,  log,  type,  "CustomIntentUnsupportedValueFlowStrategy removing parameter value for %s:%s",  (uint8_t *)v12,  0x16u);
    swift_arrayDestroy(v38, 2LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v38);
    OUTLINED_FUNCTION_1_0(v12);
  }

  else
  {
    OUTLINED_FUNCTION_8_11(*(void *)(v0 + 120));
    OUTLINED_FUNCTION_8_11(v9);
  }

  uint64_t v22 = *(void *)(v0 + 88);
  uint64_t v23 = *(void *)(v0 + 96);
  uint64_t v24 = *(void *)(v0 + 72);
  uint64_t v25 = *(void *)(v0 + 80);
  os_log_type_t v26 = (void *)ParameterResolutionRecord.intent.getter(v23);
  uint64_t v27 = ParameterResolutionRecord.parameter.getter(v23);
  uint64_t v28 = ParameterIdentifier.name.getter(v27);
  unint64_t v30 = v29;
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v22, v24);
  *(_OWORD *)(v0 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  id v31 = static INIntentParameterHelper.applyParameterValue(_:_:_:applyValueStrategy:)(v26, v28, v30, v0 + 16, 0LL, 1);
  outlined destroy of URL?(v0 + 16, &demangling cache variable for type metadata for Any?);

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_20_0();
  return (*(uint64_t (**)(id))(v0 + 8))(v31);
}

uint64_t CustomIntentUnsupportedValueFlowStrategy.makeUnsupportedValueOutput(resolveRecord:)( uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  void v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = OUTLINED_FUNCTION_4_0(v5);
  v3[8] = swift_task_alloc(v2);
  uint64_t v6 = type metadata accessor for OutputGenerationManifest(0LL);
  void v3[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[10] = v7;
  v3[11] = OUTLINED_FUNCTION_9_0(v7);
  uint64_t v8 = OUTLINED_FUNCTION_71_10();
  v3[12] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[13] = v9;
  v3[14] = OUTLINED_FUNCTION_9_0(v9);
  uint64_t v10 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  v3[15] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[16] = v11;
  v3[17] = OUTLINED_FUNCTION_9_0(v11);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

#error "1424C8: call analysis failed (funcsize=127)"
uint64_t CustomIntentUnsupportedValueFlowStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + OUTLINED_FUNCTION_19(v0, 192LL) = v1;
  swift_task_dealloc();
  uint64_t v5 = (void *)v4[21];
  uint64_t v6 = (void *)v4[22];
  if (v1)
  {

    swift_bridgeObjectRelease();
    swift_release();
  }

  else
  {
    swift_release();

    swift_bridgeObjectRelease();
    v4[25] = a1;
  }

  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v7, v8, v9);
}

uint64_t CustomIntentUnsupportedValueFlowStrategy.makeUnsupportedValueOutput(resolveRecord:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15 = (void *)v14[25];
  uint64_t v42 = v14[18];
  uint64_t v44 = v15;
  uint64_t v16 = v14[7];
  uint64_t v17 = v14[8];
  uint64_t v19 = v14[5];
  uint64_t v18 = v14[6];
  static DialogPhase.clarification.getter(v20);
  id v21 = [v15 catId];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v16, v17, v19);
  OutputGenerationManifest.init(dialogPhase:_:)(v16, CustomIntentDisambiguationItemContainer.init(items:), 0LL);
  OutputGenerationManifest.responseViewId.setter(v22);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  uint64_t v23 = (void *)ParameterResolutionRecord.intent.getter(v42);
  LOBYTE(v15) = INIntent.isRestricted()();

  OutputGenerationManifest.canUseServerTTS.setter((v15 & 1) == 0);
  OutputGenerationManifest.listenAfterSpeaking.setter(0LL);
  uint64_t v24 = type metadata accessor for ResponseFactory(0LL);
  uint64_t v25 = swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v14[26] = ResponseFactory.init()(v25);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v27 = OUTLINED_FUNCTION_19(v26, 40LL);
  *(_OWORD *)(v27 + 16) = xmmword_17E150;
  *(void *)(v27 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = v44;
  uint64_t v45 = v27;
  specialized Array._endMutation()(v27, v28, v29);
  v14[27] = v45;
  id v31 = v44;
  unint64_t v32 = (void *)swift_task_alloc(v30);
  v14[28] = v32;
  *unint64_t v32 = v14;
  v32[1] = CustomIntentUnsupportedValueFlowStrategy.makeUnsupportedValueOutput(resolveRecord:);
  OUTLINED_FUNCTION_24_7();
  return v36(v33, v34, v35, v36, v37, v38, v39, v40, v43, v44, v45, a12, a13, a14);
}

uint64_t CustomIntentUnsupportedValueFlowStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  return swift_task_switch(v0, v1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t *v0;
  uint64_t v2;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v2 + 8));
}

{
  uint64_t v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentUnsupportedValueFlowStrategy.makeUnsupportedValueOutput_rfv1(resolveRecord:)( uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  void v3[9] = v2;
  v3[7] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[10] = OUTLINED_FUNCTION_9_0(*(void *)(v4 - 8));
  uint64_t v5 = OUTLINED_FUNCTION_71_10();
  v3[11] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[12] = v6;
  v3[13] = OUTLINED_FUNCTION_9_0(v6);
  uint64_t v7 = type metadata accessor for TemplatingResult(0LL);
  v3[14] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[15] = v8;
  v3[16] = OUTLINED_FUNCTION_9_0(v8);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

#error "142A90: call analysis failed (funcsize=62)"
uint64_t CustomIntentUnsupportedValueFlowStrategy.makeUnsupportedValueOutput_rfv1(resolveRecord:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v2 = *v1;
  *(void *)(*v1 + 184) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 160);
  uint64_t v4 = *(void **)(v2 + 168);
  if (v0)
  {

    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_34_0();
  }

  else
  {
    OUTLINED_FUNCTION_34_0();

    swift_bridgeObjectRelease();
  }

  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v5, v6, v7);
}

uint64_t CustomIntentUnsupportedValueFlowStrategy.makeUnsupportedValueOutput_rfv1(resolveRecord:)()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v13 = *(void *)(v0 + 120);
  uint64_t v14 = *(void *)(v0 + 112);
  uint64_t v3 = *(void **)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v4 = *(void **)(v0 + 56);
  uint64_t v5 = ParameterResolutionRecord.intent.getter(*(void *)(v0 + 136));
  Swift::Bool v6 = INIntent.isRestricted()();

  uint64_t v7 = v3 + 2;
  uint64_t v9 = v3[5];
  uint64_t v8 = v3[6];
  __swift_project_boxed_opaque_existential_1(v7, v9);
  LOBYTE(v8) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v9, v8);
  LOBYTE(OUTLINED_FUNCTION_223(*(void *)(v3 + 120), v5) = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(0);
  uint64_t v10 = type metadata accessor for NLContextUpdate(0LL);
  __swift_storeEnumTagSinglePayload(v2, 1LL, 1LL, v10);
  uint64_t v11 = type metadata accessor for AceOutput(0LL);
  *(_OWORD *)(v0 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = 0u;
  *(void *)(v0 + 48) = 0LL;
  *(_OWORD *)(v0 + 16) = 0u;
  void v4[3] = v11;
  v4[4] = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v4);
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v1,  v7,  v8 & 1,  _swiftEmptyArrayStorage,  v5 & 1,  !v6,  v2,  _swiftEmptyArrayStorage);
  outlined destroy of URL?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v2, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v1, v14);
  OUTLINED_FUNCTION_18_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUnsupportedValueOutput(resolveRecord:) in conformance CustomIntentUnsupportedValueFlowStrategy( uint64_t a1, uint64_t a2)
{
  Swift::Bool v6 = *(int **)(**(void **)v2 + 112LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnEmptyParse(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return v9(a1, a2);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance CustomIntentUnsupportedValueFlowStrategy( uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 104LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for AppShortcutInvoking.action.getter in conformance AutoShortcutInvocation;
  return v7(a1);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance CustomIntentUnsupportedValueFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CustomIntentUnsupportedValueFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makePromptForTCCAcceptance(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t type metadata accessor for CustomIntentUnsupportedValueFlowStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin40CustomIntentUnsupportedValueFlowStrategy);
}

uint64_t OUTLINED_FUNCTION_13_34()
{
  return ParameterResolutionRecord.app.getter(v0);
}

uint64_t OUTLINED_FUNCTION_15_27()
{
  return static WFDialogState.isAppFirstRun(appId:)(v0, v1);
}

uint64_t OUTLINED_FUNCTION_18_36()
{
  return swift_release(v0);
}

uint64_t OUTLINED_FUNCTION_19_31( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a10 + 8))(v11, a11);
}

uint64_t OUTLINED_FUNCTION_21_32()
{
  return ParameterResolutionRecord.parameter.getter(v0);
}

uint64_t OUTLINED_FUNCTION_22_32()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t OUTLINED_FUNCTION_25_34()
{
  return ParameterResolutionRecord.intent.getter(v0);
}

uint64_t OUTLINED_FUNCTION_26_31()
{
  return ParameterResolutionRecord.result.getter(v0);
}

uint64_t OUTLINED_FUNCTION_30_24(uint64_t a1)
{
  return v3(a1, v1, v2);
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18SiriLinkFlowPlugin09ShortcutsE18DisambiguationItemVG_So7LNValueCs5NeverOTg504_s18def20Plugin09Shortcutsb14i75C8StrategyC05parseF8Response5input14paginatedItems0a3KitC00F6ResultVySaySo7k26CGGAG5InputV_AG22Paginatedj9ContainerZ70AA0ebfR0VGtYaKFAkScfu_33_63fe0d9d8b7f1126a2967f5d884e7691AsKTf3nnnpk_nTf1cn_nTm( uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  NSMeasurement result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    uint64_t v4 = (void **)(a1 + 80);
    do
    {
      uint64_t v5 = *v4;
      v4 += 7;
      id v6 = v5;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v7 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
      uint64_t v8 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v6);
      specialized ContiguousArray._endMutation()(v8);
      --v2;
    }

    while (v2);
    return _swiftEmptyArrayStorage;
  }

  return result;
}

void ShortcutsLinkDisambiguationFlowStrategy.__allocating_init(appBundleId:actionMetadata:dialog:metadataProvider:deviceState:serviceInvoker:outputPublisher:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 *a8)
{
  uint64_t v12 = *(void *)(a5 + 24);
  uint64_t v11 = *(void *)(a5 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a5, v12);
  OUTLINED_FUNCTION_48_24();
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_35();
  uint64_t v16 = v15 - v14;
  (*(void (**)(uint64_t))(v17 + 16))(v15 - v14);
  uint64_t v18 = OUTLINED_FUNCTION_37_27();
  specialized ShortcutsLinkDisambiguationFlowStrategy.init(appBundleId:actionMetadata:dialog:metadataProvider:deviceState:serviceInvoker:outputPublisher:)( v18,  v19,  v20,  v21,  v16,  a6,  a7,  a8,  v22,  v12,  v11);
  OUTLINED_FUNCTION_51_13();
  OUTLINED_FUNCTION_24_0();
}

void ShortcutsLinkDisambiguationFlowStrategy.init(appBundleId:actionMetadata:dialog:metadataProvider:deviceState:serviceInvoker:outputPublisher:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, __int128 *a6, __int128 *a7, __int128 *a8)
{
  uint64_t v13 = *(void *)(v11 + 24);
  uint64_t v12 = *(void *)(v11 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v11, v13);
  OUTLINED_FUNCTION_48_24();
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_52_6();
  (*(void (**)(uint64_t))(v15 + 16))(v8);
  uint64_t v16 = OUTLINED_FUNCTION_37_27();
  specialized ShortcutsLinkDisambiguationFlowStrategy.init(appBundleId:actionMetadata:dialog:metadataProvider:deviceState:serviceInvoker:outputPublisher:)( v16,  v17,  v18,  v19,  v8,  a6,  a7,  a8,  v20,  v13,  v12);
  __swift_destroy_boxed_opaque_existential_1Tm(a5);
  OUTLINED_FUNCTION_24_0();
}

void ShortcutsLinkDisambiguationFlowStrategy.actionForInput(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v34[5] = a2;
  uint64_t v5 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_35();
  v34[3] = v8 - v7;
  uint64_t v38 = type metadata accessor for Parse(0LL);
  uint64_t v36 = *(void *)(v38 - 8);
  uint64_t v9 = __chkstk_darwin(v38);
  v34[4] = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v35 = (char *)v34 - v11;
  uint64_t v12 = type metadata accessor for Input(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_35();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_52_6();
  uint64_t v18 = type metadata accessor for TaskPriority(0LL);
  __swift_storeEnumTagSinglePayload(v2, 1LL, 1LL, v18);
  uint64_t v19 = (void *)OUTLINED_FUNCTION_23_4((uint64_t)&unk_1FDA08);
  uint64_t v19[2] = 0LL;
  uint64_t v19[3] = 0LL;
  void v19[4] = v3;
  swift_retain(v3);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( v2,  (uint64_t)&async function pointer to partial apply for closure #1 in ShortcutsLinkDisambiguationFlowStrategy.actionForInput(_:),  (uint64_t)v19);
  swift_release();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v20 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.voiceCommands);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  uint64_t v37 = a1;
  uint64_t v22 = v21(v16, a1, v12);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = OUTLINED_FUNCTION_38(12LL);
    v34[1] = v6;
    uint64_t v26 = (uint8_t *)v25;
    uint64_t v27 = OUTLINED_FUNCTION_38(32LL);
    v34[2] = v5;
    uint64_t v28 = v27;
    uint64_t v40 = v27;
    *(_DWORD *)uint64_t v26 = 136315138;
    uint64_t v29 = Input.description.getter(v27);
    uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v26 + 4);
    OUTLINED_FUNCTION_20();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v16, v12);
    _os_log_impl(&dword_0, v23, v24, "#ShortcutsLinkDisambiguationFlowStrategy actionForInput: %s", v26, 0xCu);
    swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v28);
    OUTLINED_FUNCTION_1_0((uint64_t)v26);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v16, v12);
  }

  uint64_t v31 = (uint64_t)v35;
  Input.parse.getter(v32);
  char v33 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)(v31);
  OUTLINED_FUNCTION_49_21();
  __asm { BR              X10 }

uint64_t closure #1 in ShortcutsLinkDisambiguationFlowStrategy.actionForInput(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 96) = a4;
  return swift_task_switch(closure #1 in ShortcutsLinkDisambiguationFlowStrategy.actionForInput(_:), 0LL, 0LL);
}

uint64_t closure #1 in ShortcutsLinkDisambiguationFlowStrategy.actionForInput(_:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = OUTLINED_FUNCTION_48();
  v2[13] = __swift_project_value_buffer(v3, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_9_5();
  os_log_type_t v4 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)uint64_t v5 = 0;
    OUTLINED_FUNCTION_47_1( &dword_0,  v0,  v1,  "#ShortcutsLinkDisambiguationFlowStrategy submitting empty output to clear screen and prevent double-taps",  v5);
    OUTLINED_FUNCTION_1_0((uint64_t)v5);
  }

  uint64_t v6 = v2[12];

  outlined init with copy of DeviceState(v6 + 168, (uint64_t)(v2 + 2));
  uint64_t v7 = v2[5];
  uint64_t v8 = v2[6];
  __swift_project_boxed_opaque_existential_1(v2 + 2, v7);
  static OutputUtils.makeTemporaryOutput()(v2 + 7);
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  v2[14] = v9;
  *uint64_t v9 = v2;
  v9[1] = closure #1 in ShortcutsLinkDisambiguationFlowStrategy.actionForInput(_:);
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v2 + 7, v7, v8);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  OUTLINED_FUNCTION_50_0();
  *uint64_t v2 = *v1;
  *(void *)(v3 + 120) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_51_13();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_0_0();
}

{
  os_log_type_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v2 = *(void *)(v1 + 120);
  uint64_t v3 = *(os_log_s **)(v1 + 104);
  os_log_type_t v4 = __swift_destroy_boxed_opaque_existential_1Tm((void *)(v1 + 16));
  Logger.logObject.getter(v4);
  uint64_t v5 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v5))
  {
    uint64_t v6 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)uint64_t v6 = 0;
    OUTLINED_FUNCTION_47_1( &dword_0,  v3,  v0,  "#ShortcutsLinkDisambiguationFlowStrategy failed to submit empty output to clear screen",  v6);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
  }

  swift_errorRelease(v2);

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t ShortcutsLinkDisambiguationFlowStrategy.parseDisambiguationResponse(input:paginatedItems:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[18] = a3;
  v4[19] = v3;
  v4[16] = a1;
  v4[17] = a2;
  uint64_t v5 = type metadata accessor for USOParse(0LL);
  v4[20] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[21] = v6;
  v4[22] = OUTLINED_FUNCTION_9_0(v6);
  uint64_t v7 = type metadata accessor for Parse.DirectInvocation(0LL);
  v4[23] = v7;
  _BYTE v4[24] = *(void *)(v7 - 8);
  v4[25] = OUTLINED_FUNCTION_11_0();
  v4[26] = OUTLINED_FUNCTION_11_0();
  uint64_t v8 = type metadata accessor for NLIntent(0LL);
  v4[27] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[28] = v9;
  v4[29] = OUTLINED_FUNCTION_9_0(v9);
  uint64_t v10 = type metadata accessor for Parse(0LL);
  v4[30] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[31] = v11;
  _BYTE v4[32] = OUTLINED_FUNCTION_9_0(v11);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t ShortcutsLinkDisambiguationFlowStrategy.parseDisambiguationResponse(input:paginatedItems:)()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v1 + 40;
  uint64_t v3 = v1 + 120;
  id v4 = [*(id *)(v1 + 160) systemProtocols];
  uint64_t v5 = OUTLINED_FUNCTION_72( (uint64_t)v4,  (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol,  &OBJC_CLASS___LNSystemProtocol_ptr);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);
  v0[33] = v6;

  uint64_t v7 = (void *)swift_task_alloc(dword_2157DC);
  v0[34] = v7;
  *uint64_t v7 = v0;
  v7[1] = ShortcutsLinkDisambiguationFlowStrategy.parseDisambiguationResponse(input:paginatedItems:);
  return static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:systemProtocols:)(v2, v3, v6);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 272));
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t ShortcutsLinkDisambiguationFlowStrategy.parseDisambiguationResponse(input:paginatedItems:)( uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 248);
  uint64_t v2 = *(void *)(v1 + 256);
  uint64_t v4 = *(void *)(v1 + 240);
  uint64_t v5 = *(os_log_s **)(v1 + 136);
  Input.parse.getter(a1);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v2, v4);
  if (v6 == enum case for Parse.NLv3IntentOnly(_:))
  {
    uint64_t v7 = *(void *)(v1 + 256);
    uint64_t v8 = *(void *)(v1 + 232);
    uint64_t v9 = *(void *)(v1 + 216);
    uint64_t v10 = *(void *)(v1 + 224);
    OUTLINED_FUNCTION_58_21(*(void *)(v1 + 248));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v8, v7, v9);
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<ShortcutsLinkDisambiguationItem>);
    PaginatedItemContainer.items.getter(v11);
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputToDisambiguationItemsConverter<ShortcutsLinkDisambiguationItem>);
    OUTLINED_FUNCTION_23_4(v12);
    uint64_t v13 = OUTLINED_FUNCTION_30_25();
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*v13 + 152LL))(v8);
    OUTLINED_FUNCTION_12_5();
    uint64_t v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18SiriLinkFlowPlugin09ShortcutsE18DisambiguationItemVG_So7LNValueCs5NeverOTg504_s18def20Plugin09Shortcutsb14i75C8StrategyC05parseF8Response5input14paginatedItems0a3KitC00F6ResultVySaySo7k26CGGAG5InputV_AG22Paginatedj9ContainerZ70AA0ebfR0VGtYaKFAkScfu_33_63fe0d9d8b7f1126a2967f5d884e7691AsKTf3nnnpk_nTf1cn_nTm(v14);
    swift_bridgeObjectRelease();
    *(void *)(v1 + 120) = v15;
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LNValue]);
    static DisambiguationResult.chosenItem(_:)(v1 + 120, v16);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
LABEL_10:
    OUTLINED_FUNCTION_20();
    goto LABEL_27;
  }

  if (v6 != enum case for Parse.directInvocation(_:))
  {
    if (v6 == enum case for Parse.uso(_:))
    {
      uint64_t v26 = *(void *)(v1 + 256);
      uint64_t v28 = *(void *)(v1 + 168);
      uint64_t v27 = *(void *)(v1 + 176);
      uint64_t v29 = *(void *)(v1 + 160);
      OUTLINED_FUNCTION_58_21(*(void *)(v1 + 248));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v27, v26, v29);
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<ShortcutsLinkDisambiguationItem>);
      PaginatedItemContainer.items.getter(v30);
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputToDisambiguationItemsConverter<ShortcutsLinkDisambiguationItem>);
      OUTLINED_FUNCTION_23_4(v31);
      uint64_t v32 = OUTLINED_FUNCTION_30_25();
      uint64_t v33 = (*(uint64_t (**)(uint64_t))(*v32 + 136LL))(v27);
      OUTLINED_FUNCTION_12_5();
      uint64_t v34 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18SiriLinkFlowPlugin09ShortcutsE18DisambiguationItemVG_So7LNValueCs5NeverOTg504_s18def20Plugin09Shortcutsb14i75C8StrategyC05parseF8Response5input14paginatedItems0a3KitC00F6ResultVySaySo7k26CGGAG5InputV_AG22Paginatedj9ContainerZ70AA0ebfR0VGtYaKFAkScfu_33_63fe0d9d8b7f1126a2967f5d884e7691AsKTf3nnnpk_nTf1cn_nTm(v33);
      swift_bridgeObjectRelease();
      *(void *)(v1 + 64) = v34;
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LNValue]);
      static DisambiguationResult.chosenItem(_:)(v1 + 64, v35);
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
      goto LABEL_10;
    }

    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v36 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.voiceCommands);
    OUTLINED_FUNCTION_9_5();
    os_log_type_t v37 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_31_0(v37))
    {
      uint64_t v38 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
      *(_WORD *)uint64_t v38 = 0;
      OUTLINED_FUNCTION_47_1( &dword_0,  v5,  (os_log_type_t)v4,  "#ShortcutsLinkDisambiguationFlowStrategy unexpected input type",  v38);
      OUTLINED_FUNCTION_1_0((uint64_t)v38);
    }

    uint64_t v39 = *(void *)(v1 + 248);

    *(void *)(v1 + 96) = _swiftEmptyArrayStorage;
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LNValue]);
    static DisambiguationResult.chosenItem(_:)(v1 + 96, v40);
    os_log_type_t v41 = *(uint64_t (**)(uint64_t, uint64_t))(v39 + 8);
LABEL_16:
    OUTLINED_FUNCTION_30_1(v41);
    goto LABEL_27;
  }

  uint64_t v17 = *(void *)(v1 + 192);
  (*(void (**)(void, void))(*(void *)(v1 + 248) + 96LL))(*(void *)(v1 + 256), *(void *)(v1 + 240));
  uint64_t v18 = OUTLINED_FUNCTION_34_33(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 32));
  uint64_t v19 = Parse.DirectInvocation.userData.getter(v18);
  if (!v19)
  {
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = 0u;
    goto LABEL_18;
  }

  specialized Dictionary.subscript.getter(0x65756C6176LL, 0xE500000000000000LL, v19, (_OWORD *)(v1 + 16));
  OUTLINED_FUNCTION_20();
  if (!*(void *)(v1 + 40))
  {
LABEL_18:
    outlined destroy of URL?(v1 + 16, &demangling cache variable for type metadata for Any?);
    goto LABEL_19;
  }

  uint64_t v20 = swift_dynamicCast(v1 + 48, v1 + 16, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL);
  if ((v20 & 1) != 0)
  {
    uint64_t v22 = *(void *)(v1 + 48);
    uint64_t v21 = *(void *)(v1 + 56);
    uint64_t v23 = OUTLINED_FUNCTION_72( v20,  &lazy cache variable for type metadata for NSKeyedUnarchiver,  &OBJC_CLASS___NSKeyedUnarchiver_ptr);
    uint64_t v24 = OUTLINED_FUNCTION_72(v23, &lazy cache variable for type metadata for LNValue, &OBJC_CLASS___LNValue_ptr);
    uint64_t v25 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v24, v22, v21, v24);
    uint64_t v60 = (void *)v25;
    if (v25)
    {
      uint64_t v61 = *(void *)(v1 + 192);
      uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v63 = OUTLINED_FUNCTION_23_4(v62);
      *(_OWORD *)(v63 + 16) = xmmword_17E150;
      *(void *)(v63 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = v60;
      uint64_t v71 = v63;
      specialized Array._endMutation()(v63, v64, v65);
      *(void *)(v1 + 104) = v71;
      id v66 = v60;
      uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LNValue]);
      static DisambiguationResult.chosenItem(_:)(v1 + 104, v67);
      OUTLINED_FUNCTION_1_21();

      OUTLINED_FUNCTION_20();
      os_log_type_t v41 = *(uint64_t (**)(uint64_t, uint64_t))(v61 + 8);
      goto LABEL_16;
    }

    OUTLINED_FUNCTION_1_21();
  }

LABEL_19:
  uint64_t v42 = v1 + 80;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v43 = *(void *)(v1 + 192);
  uint64_t v44 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v44, (uint64_t)static Logger.voiceCommands);
  uint64_t v45 = OUTLINED_FUNCTION_34_33(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 16));
  uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
  os_log_type_t v47 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v48 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v70 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v71 = v70;
    *(_DWORD *)uint64_t v48 = 136315138;
    uint64_t v49 = Parse.DirectInvocation.userData.getter(v70);
    if (!v49) {
      uint64_t v49 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    }
    uint64_t v50 = *(void *)(v1 + 192);
    uint64_t v68 = *(void *)(v1 + 184);
    uint64_t v69 = *(void *)(v1 + 200);
    uint64_t v51 = Dictionary.description.getter( v49,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    unint64_t v53 = v52;
    swift_bridgeObjectRelease();
    *(void *)(v1 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v53, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 88, v1 + 96, v48 + 4);
    swift_bridgeObjectRelease();
    uint64_t v54 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
    v54(v69, v68);
    _os_log_impl( &dword_0,  v46,  v47,  "#ShortcutsLinkDisambiguationFlowStrategy could not get value from direct invocation. %s",  v48,  0xCu);
    swift_arrayDestroy(v70, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v70);
    OUTLINED_FUNCTION_1_0((uint64_t)v48);

    uint64_t v42 = v1 + 80;
  }

  else
  {
    uint64_t v54 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 + 192) + 8LL);
    v54(*(void *)(v1 + 200), *(void *)(v1 + 184));
  }

  uint64_t v55 = *(void *)(v1 + 208);
  uint64_t v56 = *(void *)(v1 + 184);
  *(void *)(v1 + 80) = _swiftEmptyArrayStorage;
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LNValue]);
  static DisambiguationResult.chosenItem(_:)(v42, v57);
  v54(v55, v56);
LABEL_27:
  swift_task_dealloc();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  uint64_t v58 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return v58();
}

uint64_t ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:)( uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  void v3[9] = v2;
  v3[7] = a1;
  v3[10] = *v2;
  uint64_t v4 = type metadata accessor for CATOption(0LL);
  v3[11] = OUTLINED_FUNCTION_9_0(*(void *)(v4 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:)()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = (void *)v0[9];
  uint64_t v3 = (uint64_t)(v2 + 5);
  uint64_t v5 = v2[3];
  uint64_t v4 = v2[4];
  uint64_t v6 = v2[2];
  uint64_t v7 = type metadata accessor for RunLinkActionCATsSimple(0LL);
  static CATOption.defaultMode.getter(v7);
  uint64_t v8 = CATWrapperSimple.__allocating_init(options:globals:)(v1, 0LL);
  v0[12] = v8;
  uint64_t v9 = type metadata accessor for ResponseFactory(0LL);
  uint64_t v10 = OUTLINED_FUNCTION_51(v9);
  uint64_t v11 = ResponseFactory.init()(v10);
  v0[5] = v9;
  v0[6] = &protocol witness table for ResponseFactory;
  v0[2] = v11;
  uint64_t v12 = (void *)swift_task_alloc(dword_21DD1C);
  v0[13] = v12;
  *uint64_t v12 = v0;
  v12[1] = ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:);
  return static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:deviceState:appBundleId:dialog:runLinkActionCatWrapperSimple:responseFactory:)( v0[7],  v0[8],  v3,  v5,  v4,  v6,  v8,  (uint64_t)(v0 + 2));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v2 = *v1;
  *(void *)(v2 + 11outlined consume of WFShowAlertFlow.State(v0, 2) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_51_13();
  OUTLINED_FUNCTION_61();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return swift_task_switch(v3, v4, v5);
  }

  else
  {
    swift_task_dealloc();
    return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v2 + 8));
  }

{
  uint64_t v0;
  swift_task_dealloc();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:deviceState:appBundleId:dialog:runLinkActionCatWrapperSimple:responseFactory:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[38] = a8;
  v9[39] = v8;
  v9[36] = a6;
  v9[37] = a7;
  v9[34] = a4;
  v9[35] = a5;
  v9[32] = a2;
  v9[33] = a3;
  v9[31] = a1;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  _BYTE v9[40] = OUTLINED_FUNCTION_9_0(*(void *)(v10 - 8));
  uint64_t v11 = type metadata accessor for SpeakableString(0LL);
  v9[41] = v11;
  v9[42] = *(void *)(v11 - 8);
  v9[43] = OUTLINED_FUNCTION_11_0();
  v9[44] = OUTLINED_FUNCTION_11_0();
  uint64_t v12 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  v9[45] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v9[46] = v13;
  v9[47] = OUTLINED_FUNCTION_9_0(v13);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v9[48] = OUTLINED_FUNCTION_9_0(*(void *)(v14 - 8));
  uint64_t v15 = type metadata accessor for DialogPhase(0LL);
  v9[49] = OUTLINED_FUNCTION_9_0(*(void *)(v15 - 8));
  uint64_t v16 = type metadata accessor for OutputGenerationManifest(0LL);
  v9[50] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v9[51] = v17;
  v9[52] = OUTLINED_FUNCTION_9_0(v17);
  uint64_t v18 = type metadata accessor for CATOption(0LL);
  v9[53] = OUTLINED_FUNCTION_9_0(*(void *)(v18 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:deviceState:appBundleId:dialog:runLinkActionCatWrapperSimple:responseFactory:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = (os_log_s *)OUTLINED_FUNCTION_9_5();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)uint64_t v4 = 0;
    OUTLINED_FUNCTION_47_1( &dword_0,  v2,  v3,  "#ShortcutsLinkDisambiguationFlowStrategy make prompt for disambiguation item",  v4);
    OUTLINED_FUNCTION_1_0((uint64_t)v4);
  }

  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<ShortcutsLinkDisambiguationItem>);
  v0[54] = v5;
  uint64_t v6 = PaginatedItemContainer.items.getter(v5);
  v0[55] = v6;
  uint64_t v7 = (void *)swift_task_alloc(dword_21BB4C);
  v0[56] = v7;
  *uint64_t v7 = v0;
  v7[1] = static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:deviceState:appBundleId:dialog:runLinkActionCatWrapperSimple:responseFactory:);
  return Array<A>.toDisambiguationItemModels()(v6);
}

{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  Swift::String_optional v4;
  uint64_t countAndFlagsBits;
  void *object;
  id v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *boxed_opaque_existential_1;
  uint64_t v21;
  void *v22;
  uint64_t v1 = v0 + 30;
  uint64_t v2 = (void *)v0[63];
  if (v2)
  {
    os_log_type_t v3 = v2;
    uint64_t v4 = DialogExecutionResult.firstDialogFullPrint()();
    uint64_t countAndFlagsBits = v4.value._countAndFlagsBits;
    unint64_t object = v4.value._object;

    *uint64_t v1 = _swiftEmptyArrayStorage;
    uint64_t v7 = v3;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v7);
    uint64_t v9 = *(void *)((char *)&dword_10 + (*v1 & 0xFFFFFFFFFFFFFF8LL));
    uint64_t v8 = *(void *)((char *)&dword_18 + (*v1 & 0xFFFFFFFFFFFFFF8LL));
    if (v9 >= v8 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1LL);
    }
    uint64_t v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
    specialized Array._endMutation()(v10, v11, v12);
    uint64_t v13 = [v7 catId];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    OutputGenerationManifest.responseViewId.setter(v14);
  }

  else
  {
    uint64_t v7 = 0LL;
    unint64_t object = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    *uint64_t v1 = _swiftEmptyArrayStorage;
  }

  v0[65] = v7;
  uint64_t v15 = v0[57];
  uint64_t v16 = (void *)v0[38];
  uint64_t v17 = v16[3];
  uint64_t v18 = v16[4];
  __swift_project_boxed_opaque_existential_1(v16, v17);
  uint64_t v19 = type metadata accessor for WorkflowDataModels(0LL);
  v0[26] = v19;
  v0[27] = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 23);
  void *boxed_opaque_existential_1 = countAndFlagsBits;
  boxed_opaque_existential_1[1] = object;
  boxed_opaque_existential_1[2] = v15;
  swift_storeEnumTagMultiPayload(boxed_opaque_existential_1, v19, 7LL);
  uint64_t v21 = v0[30];
  v0[66] = v21;
  uint64_t v22 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)[1]);
  v0[67] = v22;
  *uint64_t v22 = v0;
  v22[1] = static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:deviceState:appBundleId:dialog:runLinkActionCatWrapperSimple:responseFactory:);
  return dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)( v0[31],  v0 + 23,  v21,  v0[52],  v17,  v18);
}

{
  uint64_t v0;
  void *v1;
  OUTLINED_FUNCTION_50_0();
  uint64_t v1 = (void *)(v0 + 184);
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 536));
  OUTLINED_FUNCTION_14();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_0_0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v1 = *(void **)(v0 + 520);
  uint64_t v2 = *(void *)(v0 + 408);
  swift_release();
  OUTLINED_FUNCTION_12_5();

  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_20_38();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  os_log_type_t v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_2_1(v3);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  OUTLINED_FUNCTION_50_0();
  *uint64_t v2 = *v1;
  *(void *)(v3 + 55outlined consume of WFShowAlertFlow.State(v0, 2) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_0_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v1 = *(void *)(v0 + 408);
  swift_release();
  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_20_38();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_2_1(v2);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_51_0();
  OUTLINED_FUNCTION_7_39();
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_33_23();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_8_0(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_51_0();
  OUTLINED_FUNCTION_7_39();
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_33_23();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_8_0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:deviceState:appBundleId:dialog:runLinkActionCatWrapperSimple:responseFactory:)( uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 448LL);
  *(void *)(*(void *)v1 + 456LL) = a1;
  OUTLINED_FUNCTION_54_0(v2);
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 496);
  *(void *)(v3 + 504) = a1;
  *(void *)(v3 + 51outlined consume of WFShowAlertFlow.State(v0, 2) = v1;
  OUTLINED_FUNCTION_54_0(v4);
  swift_bridgeObjectRelease();
  if (v1) {
    OUTLINED_FUNCTION_20();
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_0_0();
}

void static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:deviceState:appBundleId:dialog:runLinkActionCatWrapperSimple:responseFactory:)()
{
  unint64_t v2 = *(void *)(v0 + 456);
  uint64_t v3 = *(void *)(v0 + 424);
  uint64_t v4 = *(void *)(v0 + 296);
  outlined init with copy of DeviceState(*(void *)(v0 + 264), v0 + 144);
  type metadata accessor for RunLinkActionCATs(0LL);
  uint64_t v5 = swift_retain(v4);
  static CATOption.defaultMode.getter(v5);
  OUTLINED_FUNCTION_97(v3);
  OUTLINED_FUNCTION_56_27();
  OUTLINED_FUNCTION_29_2();
  OUTLINED_FUNCTION_97(v3);
  OUTLINED_FUNCTION_55_22();
  OUTLINED_FUNCTION_29_2();
  OUTLINED_FUNCTION_96(v3);
  OUTLINED_FUNCTION_62_16();
  OUTLINED_FUNCTION_29_2();
  OUTLINED_FUNCTION_97(v3);
  uint64_t v6 = OUTLINED_FUNCTION_70_3();
  uint64_t inited = (void *)swift_initStackObject(v6, v0 + 16);
  *(void *)(v0 + 464) = inited;
  *(void *)(v0 + 47outlined consume of WFShowAlertFlow.State(v0, 2) = OUTLINED_FUNCTION_42_24((__int128 *)(v0 + 144), v1, v4, v8, v9, v10, inited);
  uint64_t v11 = type metadata accessor for ShortcutsLinkNLContextProvider();
  *(void *)(v0 + 480) = swift_initStackObject(v11, v0 + 224);
  uint64_t v12 = *(void *)(v0 + 456);
  if (v2 >> 62)
  {
    if (v12 < 0) {
      uint64_t v41 = *(void *)(v0 + 456);
    }
    else {
      uint64_t v41 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v12);
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v41);
  }

  else
  {
    uint64_t v13 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain(v12);
  }

  if (v13)
  {
    if (v13 < 1)
    {
      __break(1u);
      return;
    }

    uint64_t v14 = 0LL;
    uint64_t v15 = *(void *)(v0 + 336);
    unint64_t v16 = v2 & 0xC000000000000001LL;
    uint64_t v42 = *(void *)(v0 + 456) + 32LL;
    uint64_t v17 = (char *)_swiftEmptyArrayStorage;
    do
    {
      if (v16)
      {
        uint64_t v18 = specialized _ArrayBuffer._getElementSlowPath(_:)(v14, *(void *)(v0 + 456));
      }

      else
      {
        uint64_t v18 = *(void *)(v42 + 8 * v14);
        swift_retain(v18);
      }

      uint64_t v20 = *(void *)(v0 + 320);
      uint64_t v19 = *(void *)(v0 + 328);
      String.toSpeakableString.getter(*(void *)(v18 + 16), *(void *)(v18 + 24));
      __swift_storeEnumTagSinglePayload(v20, 0LL, 1LL, v19);
      swift_release();
      if (__swift_getEnumTagSinglePayload(v20, 1LL, v19) == 1)
      {
        outlined destroy of URL?( *(void *)(v0 + 320),  &demangling cache variable for type metadata for SpeakableString?);
      }

      else
      {
        uint64_t v22 = *(char **)(v0 + 344);
        uint64_t v21 = *(char **)(v0 + 352);
        uint64_t v23 = *(void *)(v0 + 328);
        uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
        v24(v21, *(char **)(v0 + 320), v23);
        v24(v22, v21, v23);
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0) {
          uint64_t v17 = (char *)OUTLINED_FUNCTION_59_12(0LL, *((void *)v17 + 2) + 1LL);
        }
        unint64_t v26 = *((void *)v17 + 2);
        unint64_t v25 = *((void *)v17 + 3);
        if (v26 >= v25 >> 1) {
          uint64_t v17 = (char *)OUTLINED_FUNCTION_59_12(v25 > 1, v26 + 1);
        }
        uint64_t v27 = *(char **)(v0 + 344);
        uint64_t v28 = *(void *)(v0 + 328);
        *((void *)v17 + outlined consume of WFShowAlertFlow.State(v0, 2) = v26 + 1;
        v24( &v17[((*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))
             + *(void *)(v15 + 72) * v26],
          v27,
          v28);
      }

      ++v14;
    }

    while (v13 != v14);
  }

  else
  {
    uint64_t v17 = (char *)_swiftEmptyArrayStorage;
  }

  *(void *)(v0 + 488) = v17;
  uint64_t v29 = *(void *)(v0 + 432);
  uint64_t v31 = *(void *)(v0 + 384);
  uint64_t v30 = *(void *)(v0 + 392);
  uint64_t v32 = *(void *)(v0 + 368);
  uint64_t v33 = *(void *)(v0 + 376);
  uint64_t v34 = *(void *)(v0 + 360);
  uint64_t v35 = swift_bridgeObjectRelease();
  static DialogPhase.clarification.getter(v35);
  OutputGenerationManifest.init(dialogPhase:_:)(v30, CustomIntentDisambiguationItemContainer.init(items:), 0LL);
  unsigned __int8 v36 = static TemplatingResult.getListenAfterSpeakingDisabled()();
  OutputGenerationManifest.listenAfterSpeaking.setter((v36 & 1) == 0);
  uint64_t v37 = PaginatedItemContainer.items.getter(v29);
  ShortcutsLinkNLContextProvider.makeContextForDisambiguation(disambiguationItems:)(v37);
  OUTLINED_FUNCTION_14();
  uint64_t v38 = type metadata accessor for NLContextUpdate(0LL);
  __swift_storeEnumTagSinglePayload(v31, 0LL, 1LL, v38);
  OutputGenerationManifest.nlContextUpdate.setter(v31);
  (*(void (**)(uint64_t, void, uint64_t))(v32 + 104))( v33,  enum case for RFFeatureFlags.ResponseFramework._SMART(_:),  v34);
  LOBYTE(v30) = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v34);
  if ((v30 & 1) != 0)
  {
    uint64_t v39 = (void *)swift_task_alloc(dword_217A54);
    *(void *)(v0 + 496) = v39;
    *uint64_t v39 = v0;
    v39[1] = static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:deviceState:appBundleId:dialog:runLinkActionCatWrapperSimple:responseFactory:);
    LinkActionDialogTemplating.makeNeedsDisambiguationTitle(customPrompt:items:)(*(void *)(v0 + 288), (uint64_t)v17);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v40 = (void *)swift_task_alloc(dword_21DD24);
    *(void *)(v0 + 544) = v40;
    void *v40 = v0;
    v40[1] = static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:deviceState:appBundleId:dialog:runLinkActionCatWrapperSimple:responseFactory:);
    static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation_preRFv2(paginatedItems:deviceState:appBundleId:dialog:disambiguationItemTitles:manifest:)( *(void *)(v0 + 248),  *(void *)(v0 + 256),  *(void *)(v0 + 264),  *(void *)(v0 + 272),  *(void *)(v0 + 280),  *(void *)(v0 + 288),  (uint64_t)v17,  *(void *)(v0 + 416));
  }

uint64_t static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation_preRFv2(paginatedItems:deviceState:appBundleId:dialog:disambiguationItemTitles:manifest:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[34] = a7;
  v8[35] = a8;
  v8[32] = a5;
  v8[33] = a6;
  v8[30] = a3;
  v8[31] = a4;
  v8[28] = a1;
  v8[29] = a2;
  uint64_t v9 = type metadata accessor for OutputGenerationManifest(0LL);
  v8[36] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[37] = v10;
  v8[38] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for CATOption(0LL);
  v8[39] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation_preRFv2(paginatedItems:deviceState:appBundleId:dialog:disambiguationItemTitles:manifest:),  0LL,  0LL);
}

uint64_t static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation_preRFv2(paginatedItems:deviceState:appBundleId:dialog:disambiguationItemTitles:manifest:)()
{
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v0 + 272);
  outlined init with copy of DeviceState(*(void *)(v0 + 240), v0 + 184);
  type metadata accessor for RunLinkActionCATs(0LL);
  OUTLINED_FUNCTION_5_8();
  uint64_t v4 = OUTLINED_FUNCTION_97(v2);
  type metadata accessor for RunLinkActionCATsSimple(0LL);
  OUTLINED_FUNCTION_5_8();
  OUTLINED_FUNCTION_96(v2);
  OUTLINED_FUNCTION_56_27();
  OUTLINED_FUNCTION_5_8();
  OUTLINED_FUNCTION_97(v2);
  OUTLINED_FUNCTION_55_22();
  OUTLINED_FUNCTION_5_8();
  OUTLINED_FUNCTION_96(v2);
  OUTLINED_FUNCTION_62_16();
  OUTLINED_FUNCTION_5_8();
  OUTLINED_FUNCTION_97(v2);
  uint64_t v5 = OUTLINED_FUNCTION_70_3();
  uint64_t inited = (void *)swift_initStackObject(v5, v0 + 16);
  *(void *)(v0 + 320) = inited;
  *(void *)(v0 + 328) = OUTLINED_FUNCTION_42_24((__int128 *)(v0 + 184), v4, v1, v7, v8, v9, inited);
  uint64_t v10 = (void *)swift_task_alloc(dword_217A5C);
  *(void *)(v0 + 336) = v10;
  *uint64_t v10 = v0;
  v10[1] = static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation_preRFv2(paginatedItems:deviceState:appBundleId:dialog:disambiguationItemTitles:manifest:);
  return LinkActionDialogTemplating.makeNeedsDisambiguationTitle_preRFv2(customPrompt:items:)(*(void *)(v0 + 264), v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v1 = v0[45];
  uint64_t v2 = v0[43];
  uint64_t v4 = v0[31];
  uint64_t v3 = v0[32];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<ShortcutsLinkDisambiguationItem>);
  uint64_t v6 = PaginatedItemContainer.items.getter(v5);
  uint64_t v7 = Array<A>.toDisambiguationVisualItems()(v6);
  v0[46] = v7;
  OUTLINED_FUNCTION_20();
  v0[18] = v4;
  v0[19] = v3;
  v0[20] = v1;
  v0[21] = v2;
  v0[22] = v7;
  swift_bridgeObjectRetain(v3);
  uint64_t v8 = (void *)OUTLINED_FUNCTION_11_0();
  v0[47] = v8;
  *uint64_t v8 = v0;
  v8[1] = static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation_preRFv2(paginatedItems:deviceState:appBundleId:dialog:disambiguationItemTitles:manifest:);
  return LinkActionDialogTemplating.makeParameterValueDisambiguationPattern_preRFv2(customPrompt:items:)(v0[33], v0[34]);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char *v12;
  uint64_t v1 = (void *)v0[48];
  uint64_t v3 = v0[37];
  uint64_t v2 = v0[38];
  uint64_t v5 = v0[35];
  uint64_t v4 = v0[36];
  outlined bridged method (mbnn) of @objc PatternExecutionResult.visual.setter(v0[53], v0[52], v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  uint64_t v6 = [v1 patternId];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  OutputGenerationManifest.responseViewId.setter(v7);
  uint64_t v8 = type metadata accessor for ResponseFactory(0LL);
  uint64_t v9 = OUTLINED_FUNCTION_51(v8);
  v0[54] = ResponseFactory.init()(v9);
  v0[55] = v10;
  *uint64_t v10 = v0;
  v10[1] = static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation_preRFv2(paginatedItems:deviceState:appBundleId:dialog:disambiguationItemTitles:manifest:);
  return ((uint64_t (*)(void, void, void))v12)(v0[28], v0[48], v0[38]);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  OUTLINED_FUNCTION_50_0();
  *uint64_t v2 = *v1;
  *(void *)(v3 + 448) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_0_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 296);

  OUTLINED_FUNCTION_12_5();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  uint64_t v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return v4();
}

{
  uint64_t v0;
  swift_release();
  OUTLINED_FUNCTION_36_26();
  OUTLINED_FUNCTION_20_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_36_26();
  OUTLINED_FUNCTION_20_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_36_26();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 296);

  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_36_26();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation_preRFv2(paginatedItems:deviceState:appBundleId:dialog:disambiguationItemTitles:manifest:)( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)*v3;
  v5[43] = a2;
  v5[44] = v2;
  swift_task_dealloc();
  if (!v2) {
    v5[45] = a1;
  }
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v6, v7, v8);
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v6 = *v3;
  *(void *)(*v3 + 408) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_20();
    *(void *)(v6 + 416) = a2;
    *(void *)(v6 + 4__swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = a1;
    swift_bridgeObjectRelease();
  }

  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v7, v8, v9);
}

uint64_t static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation_preRFv2(paginatedItems:deviceState:appBundleId:dialog:disambiguationItemTitles:manifest:)( uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v2 + 376LL);
  uint64_t v4 = *(void **)v2;
  v4[48] = a1;
  v4[49] = v1;
  OUTLINED_FUNCTION_54_0(v3);
  if (v1)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_0_0();
  }

  else
  {
    uint64_t v6 = (void *)swift_task_alloc(dword_2155F4);
    v4[50] = v6;
    *uint64_t v6 = v4;
    v6[1] = static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation_preRFv2(paginatedItems:deviceState:appBundleId:dialog:disambiguationItemTitles:manifest:);
    return DisambiguationVisual.data.getter();
  }

uint64_t ShortcutsLinkDisambiguationFlowStrategy.deinit()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 40));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 80));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 120));

  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 168));
  return v0;
}

uint64_t ShortcutsLinkDisambiguationFlowStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 208LL, 7LL);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.paginationStyle() in conformance ShortcutsLinkDisambiguationFlowStrategy()
{
  return ShortcutsLinkDisambiguationFlowStrategy.paginationStyle()();
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.parseDisambiguationResponse(input:paginatedItems:) in conformance ShortcutsLinkDisambiguationFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_21DCF4);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = partial apply for closure #1 in WorkflowRunnerFlow.execute();
  return ShortcutsLinkDisambiguationFlowStrategy.parseDisambiguationResponse(input:paginatedItems:)(a1, a2, a3);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makePromptForDisambiguation(paginatedItems:) in conformance ShortcutsLinkDisambiguationFlowStrategy( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_21DD14);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in WorkflowRunnerFlow.execute();
  return ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:)(a1, a2);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:) in conformance ShortcutsLinkDisambiguationFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to PromptForDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:)[1]);
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = partial apply for closure #1 in WorkflowRunnerFlow.execute();
  return PromptForDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:) in conformance ShortcutsLinkDisambiguationFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to PromptForDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:)[1]);
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = partial apply for closure #1 in WorkflowRunnerFlow.execute();
  return PromptForDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShortcutsLinkDisambiguationFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PromptForDisambiguationFlowStrategyAsync.makeFlowCancelledResponse()[1]);
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for Flow.execute() in conformance WorkflowRunnerFlow;
  return PromptForDisambiguationFlowStrategyAsync.makeFlowCancelledResponse()(a1, v7, a3);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makeErrorResponse(_:) in conformance ShortcutsLinkDisambiguationFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to PromptForDisambiguationFlowStrategyAsync.makeErrorResponse(_:)[1]);
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = partial apply for closure #1 in WorkflowRunnerFlow.execute();
  return PromptForDisambiguationFlowStrategyAsync.makeErrorResponse(_:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription.getter in conformance ShortcutsLinkDisambiguationFlowStrategy()
{
  return PromptForDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription.getter(*v0);
}

void *specialized ShortcutsLinkDisambiguationFlowStrategy.init(appBundleId:actionMetadata:dialog:metadataProvider:deviceState:serviceInvoker:outputPublisher:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 *a8, void *a9, uint64_t a10, uint64_t a11)
{
  a9[13] = a10;
  a9[14] = a11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a9 + 10);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32LL))( boxed_opaque_existential_1,  a5,  a10);
  a9[3] = a1;
  a9[4] = a2;
  a9[20] = a3;
  a9[2] = a4;
  outlined init with take of AceServiceInvokerAsync(a6, (uint64_t)(a9 + 5));
  outlined init with take of AceServiceInvokerAsync(a7, (uint64_t)(a9 + 15));
  outlined init with take of AceServiceInvokerAsync(a8, (uint64_t)(a9 + 21));
  return a9;
}

uint64_t sub_145884()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t partial apply for closure #1 in ShortcutsLinkDisambiguationFlowStrategy.actionForInput(_:)( uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_21DCE4);
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = protocol witness for Flow.execute() in conformance WorkflowRunnerFlow;
  return closure #1 in ShortcutsLinkDisambiguationFlowStrategy.actionForInput(_:)(a1, v4, v5, v6);
}

uint64_t type metadata accessor for ShortcutsLinkDisambiguationFlowStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin39ShortcutsLinkDisambiguationFlowStrategy);
}

uint64_t OUTLINED_FUNCTION_7_39()
{
  return swift_release(*(void *)(v0 + 480));
}

uint64_t OUTLINED_FUNCTION_20_38()
{
  return swift_task_dealloc(*(void *)(v0 + 424));
}

void *OUTLINED_FUNCTION_30_25()
{
  return specialized InputToDisambiguationItemsConverter.init(disambiguationItems:page:)(v0, 0LL);
}

uint64_t OUTLINED_FUNCTION_33_23()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t OUTLINED_FUNCTION_34_33@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1, v3);
}

uint64_t OUTLINED_FUNCTION_36_26()
{
  return swift_task_dealloc(*(void *)(v0 + 312));
}

uint64_t OUTLINED_FUNCTION_37_27()
{
  return v0;
}

void *OUTLINED_FUNCTION_42_24( __int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  return specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)( a1,  a2,  a3,  v8,  v9,  v7,  a7);
}

  ;
}

uint64_t OUTLINED_FUNCTION_49_21()
{
  return v1(v0, *(void *)(v2 - 104));
}

uint64_t OUTLINED_FUNCTION_55_22()
{
  return type metadata accessor for RunVoiceCommandCATsSimple(0LL);
}

uint64_t OUTLINED_FUNCTION_56_27()
{
  return type metadata accessor for RunVoiceCommandCATs(0LL);
}

  ;
}

uint64_t OUTLINED_FUNCTION_58_21@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 96))(v1);
}

uint64_t OUTLINED_FUNCTION_59_12(uint64_t a1, uint64_t a2)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1LL, v2);
}

uint64_t OUTLINED_FUNCTION_61_20()
{
  return static ActionForInput.ignore()();
}

uint64_t OUTLINED_FUNCTION_62_16()
{
  return type metadata accessor for RunLinkActionCATPatternsExecutor(0LL);
}

id static SLFConfirmationItemConverter.toDirectInvocationCommand(confirmation:appBundleId:deviceState:)( char a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1)
  {
    if (a1 == 1)
    {
      unint64_t v5 = 0xE200000000000000LL;
      uint64_t v6 = 28526LL;
    }

    else
    {
      unint64_t v5 = 0xE600000000000000LL;
      uint64_t v6 = 0x6C65636E6163LL;
    }
  }

  else
  {
    unint64_t v5 = 0xE300000000000000LL;
    uint64_t v6 = 7562617LL;
  }

  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject(v7, &v23);
  *(_OWORD *)(inited + 16) = xmmword_17E650;
  strcpy((char *)(inited + 32), "confirmation");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(void *)(inited + 7outlined consume of WFShowAlertFlow.State(v0, 2) = &type metadata for String;
  *(void *)(inited + 48) = v6;
  *(void *)(inited + 56) = v5;
  uint64_t v9 = (void *)Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  type metadata accessor for SKIDirectInvocationPayload();
  id v10 = SKIDirectInvocationPayload.__allocating_init(identifier:)(0xD00000000000003DLL, 0x8000000000192920LL);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v9);
  uint64_t v12 = v11;
  swift_bridgeObjectRelease(v9);
  outlined bridged method (mbnn) of @objc SKIDirectInvocationPayload.userData.setter(v12, v10);
  uint64_t v13 = a4[3];
  uint64_t v14 = a4[4];
  __swift_project_boxed_opaque_existential_1(a4, v13);
  uint64_t v15 = (void *)DeviceState.asInvocationContext.getter(v13, v14);
  [v15 setInputOrigin:SAInputOriginDialogButtonTapValue];
  unint64_t v16 = (void *)objc_opt_self(&OBJC_CLASS___SKIDirectInvocation);
  id v17 = [v16 runSiriKitExecutorCommandWithContext:v15 payload:v10];
  id v18 = [objc_allocWithZone(SAIntentGroupSiriKitAppSelectionState) init];
  id v19 = [objc_allocWithZone(SASyncAppIdentifyingInfo) init];
  NSString v20 = String._bridgeToObjectiveC()();
  [v19 setBundleId:v20];

  [v18 setRequestedApp:v19];
  [v17 setAppSelectionState:v18];

  id v21 = [v16 wrapCommandInStartLocalRequest:v17];
  return v21;
}

uint64_t static SLFConfirmationItemConverter.toVoiceCommandConfirmation(userData:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return 3LL;
  }
  unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(0x616D7269666E6F63LL, 0xEC0000006E6F6974LL);
  if ((v3 & 1) == 0) {
    return 3LL;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v2, (uint64_t)v15);
  uint64_t v5 = v13;
  unint64_t v4 = v14;
  if (v13 == 7562617 && v14 == 0xE300000000000000LL)
  {
    unint64_t v7 = 0xE300000000000000LL;
    goto LABEL_13;
  }

  if ((OUTLINED_FUNCTION_60(7562617LL, 0xE300000000000000LL) & 1) != 0)
  {
    unint64_t v7 = v4;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 0LL;
  }

  if (v5 == 28526 && v4 == 0xE200000000000000LL)
  {
    unint64_t v10 = 0xE200000000000000LL;
    goto LABEL_21;
  }

  if ((OUTLINED_FUNCTION_60(28526LL, 0xE200000000000000LL) & 1) != 0)
  {
    unint64_t v10 = v4;
LABEL_21:
    swift_bridgeObjectRelease(v10);
    return 1LL;
  }

  if (v5 == 0x6C65636E6163LL && v4 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 2LL;
  }

  else
  {
    char v12 = OUTLINED_FUNCTION_60(0x6C65636E6163LL, 0xE600000000000000LL);
    swift_bridgeObjectRelease(v4);
    if ((v12 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

ValueMetadata *type metadata accessor for SLFConfirmationItemConverter()
{
  return &type metadata for SLFConfirmationItemConverter;
}

SiriLinkFlowPlugin::RunLinkActionCATPatternsIdentifiers_optional __swiftcall RunLinkActionCATPatternsIdentifiers.init(rawValue:)( Swift::String rawValue)
{
  unint64_t object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of RunLinkActionCATPatternsIdentifiers.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 9) {
    return (SiriLinkFlowPlugin::RunLinkActionCATPatternsIdentifiers_optional)9;
  }
  else {
    return (SiriLinkFlowPlugin::RunLinkActionCATPatternsIdentifiers_optional)v3;
  }
}

uint64_t RunLinkActionCATPatternsIdentifiers.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_145EC0
                                                                     + 4 * asc_18AC90[a1]))( 0xD000000000000020LL,  0x8000000000190830LL);
}

uint64_t sub_145EC0()
{
  return v0 + 2;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance RunLinkActionCATPatternsIdentifiers( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance RunLinkActionCATPatternsIdentifiers()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunLinkActionCATPatternsIdentifiers( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RunLinkActionCATPatternsIdentifiers( uint64_t a1)
{
}

SiriLinkFlowPlugin::RunLinkActionCATPatternsIdentifiers_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunLinkActionCATPatternsIdentifiers@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunLinkActionCATPatternsIdentifiers_optional *a2@<X8>)
{
  result.int value = RunLinkActionCATPatternsIdentifiers.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunLinkActionCATPatternsIdentifiers( uint64_t *a1@<X8>)
{
  *a1 = RunLinkActionCATPatternsIdentifiers.rawValue.getter(*v1);
  a1[1] = v3;
  OUTLINED_FUNCTION_1();
}

void RunLinkActionActionPerformedUseSonicStatusParameters.customDialog.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_41_29();
  outlined init with copy of AppDisplayInfo?(v0, v1, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t RunLinkActionActionConfirmationParameters.executeSashGroupOnWatch.getter()
{
  uint64_t v0 = type metadata accessor for RunLinkActionActionConfirmationParameters(0LL);
  return OUTLINED_FUNCTION_45_22(v0);
}

uint64_t type metadata accessor for RunLinkActionActionConfirmationParameters(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for RunLinkActionActionConfirmationParameters,  (uint64_t)&nominal type descriptor for RunLinkActionActionConfirmationParameters);
}

void RunLinkActionActionConfirmationParameters.verb.getter(uint64_t a1@<X8>)
{
}

uint64_t RunLinkActionActionConfirmationParameters.verb.setter(uint64_t a1)
{
  return RunLinkActionActionConfirmationParameters.verb.setter( a1,  type metadata accessor for RunLinkActionActionConfirmationParameters);
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *RunLinkActionActionConfirmationParameters.verb.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

void RunLinkActionActionConfirmationParameters.asKeyValuePairs()()
{
}

uint64_t RunLinkActionActionConfirmationParameters.init(customDialog:executeSashGroupOnWatch:verb:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return RunLinkActionActionConfirmationParameters.init(customDialog:executeSashGroupOnWatch:verb:)(a1, a2, a3, a4);
}

{
  uint64_t v4;
  uint64_t v7;
  OUTLINED_FUNCTION_75_13(a1, a4);
  unint64_t v7 = OUTLINED_FUNCTION_74_16();
  *(_BYTE *)(v4 + *(int *)(v7 + 20)) = a2;
  return outlined init with take of SpeakableString?(a3, v4 + *(int *)(v7 + 24));
}

uint64_t RunLinkActionActionPerformedParameters.executeSashGroupOnWatch.getter()
{
  uint64_t v0 = type metadata accessor for RunLinkActionActionPerformedParameters(0LL);
  return OUTLINED_FUNCTION_45_22(v0);
}

uint64_t type metadata accessor for RunLinkActionActionPerformedParameters(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for RunLinkActionActionPerformedParameters,  (uint64_t)&nominal type descriptor for RunLinkActionActionPerformedParameters);
}

uint64_t RunLinkActionActionPerformedParameters.asKeyValuePairs()()
{
  return OUTLINED_FUNCTION_14_42();
}

void RunLinkActionActionPerformedParameters.init(customDialog:executeSashGroupOnWatch:)( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

{
  char v2;
  uint64_t v3;
  OUTLINED_FUNCTION_49_22(a1, a2);
  *(_BYTE *)(v3 + *(int *)(OUTLINED_FUNCTION_74_16() + 20)) = v2;
  OUTLINED_FUNCTION_2();
}

uint64_t RunLinkActionActionPerformedUseSonicStatusParameters.executeSashGroupOnWatch.getter()
{
  uint64_t v0 = type metadata accessor for RunLinkActionActionPerformedUseSonicStatusParameters(0LL);
  return OUTLINED_FUNCTION_45_22(v0);
}

uint64_t type metadata accessor for RunLinkActionActionPerformedUseSonicStatusParameters(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for RunLinkActionActionPerformedUseSonicStatusParameters,  (uint64_t)&nominal type descriptor for RunLinkActionActionPerformedUseSonicStatusParameters);
}

uint64_t RunLinkActionActionPerformedUseSonicStatusParameters.asKeyValuePairs()()
{
  return OUTLINED_FUNCTION_14_42();
}

uint64_t RunLinkActionActionPerformedParameters.asKeyValuePairs()(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = v7 - v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v10 = swift_allocObject(v9, 128LL, 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_17E660;
  uint64_t v11 = (void *)(v10 + 48);
  *(void *)(v10 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = a1;
  *(void *)(v10 + 40) = a2;
  outlined init with copy of AppDisplayInfo?(v2, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v12 = OUTLINED_FUNCTION_61_1();
  if (__swift_getEnumTagSinglePayload(v8, 1LL, v12) == 1)
  {
    outlined destroy of Result<Output, Error>(v8, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v11 = 0u;
    *(_OWORD *)(v10 + 64) = 0u;
  }

  else
  {
    *(void *)(v10 + 7outlined consume of WFShowAlertFlow.State(v0, 2) = v12;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL))( boxed_opaque_existential_1,  v8,  v12);
  }

  OUTLINED_FUNCTION_83_8();
  *(void *)(v10 + 80) = v14;
  *(void *)(v10 + 88) = 0x8000000000197160LL;
  char v15 = *(_BYTE *)(v2 + *(int *)(OUTLINED_FUNCTION_74_16() + 20));
  *(void *)(v10 + 120) = &type metadata for Bool;
  *(_BYTE *)(v10 + 96) = v15;
  return v10;
}

void RunLinkActionActionPerformedUseSonicStatusParameters.init(customDialog:executeSashGroupOnWatch:)( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t RunLinkActionAutoShortcutAppEnabledParameters.device.getter()
{
  uint64_t v1 = type metadata accessor for RunLinkActionAutoShortcutAppEnabledParameters(0LL);
  return swift_retain(*(void *)(v0 + *(int *)(v1 + 20)));
}

uint64_t type metadata accessor for RunLinkActionAutoShortcutAppEnabledParameters(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for RunLinkActionAutoShortcutAppEnabledParameters,  (uint64_t)&nominal type descriptor for RunLinkActionAutoShortcutAppEnabledParameters);
}

void RunLinkActionAutoShortcutAppEnabledParameters.device.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(OUTLINED_FUNCTION_59_13() + 20);
  swift_release();
  *(void *)(v1 + v3) = a1;
  OUTLINED_FUNCTION_2();
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *RunLinkActionAutoShortcutAppEnabledParameters.device.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

uint64_t RunLinkActionAutoShortcutAppEnabledParameters.executeSashGroupOnWatch.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(OUTLINED_FUNCTION_59_13() + 24));
}

uint64_t RunLinkActionAutoShortcutAppEnabledParameters.wasAlreadyEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(OUTLINED_FUNCTION_59_13() + 28));
}

void RunLinkActionAutoShortcutAppEnabledParameters.asKeyValuePairs()()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  unint64_t v4 = (__n128 *)swift_allocObject(v3, 224LL, 7LL);
  OUTLINED_FUNCTION_33_24(v4, (__n128)xmmword_181AE0);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  uint64_t v6 = OUTLINED_FUNCTION_44_19(v5);
  if (v7)
  {
    OUTLINED_FUNCTION_123_5(v6, &demangling cache variable for type metadata for SpeakableString?);
    *uint64_t v1 = 0u;
    v1[1] = 0u;
  }

  else
  {
    uint64_t v8 = OUTLINED_FUNCTION_62_17();
    OUTLINED_FUNCTION_39_27((uint64_t)v8);
  }

  v4[5].n128_u64[0] = 0x656369766564LL;
  v4[5].n128_u64[1] = 0xE600000000000000LL;
  uint64_t v9 = (int *)OUTLINED_FUNCTION_59_13();
  unint64_t v10 = *(void *)(v0 + v9[5]);
  if (v10)
  {
    uint64_t v11 = type metadata accessor for SirikitDeviceState(0LL);
  }

  else
  {
    uint64_t v11 = 0LL;
    v4[6].n128_u64[1] = 0LL;
    v4[7].n128_u64[0] = 0LL;
  }

  v4[6].n128_u64[0] = v10;
  v4[7].n128_u64[1] = v11;
  v4[8].n128_u64[0] = 0xD000000000000017LL;
  v4[8].n128_u64[1] = 0x8000000000197160LL;
  v4[9].n128_u8[0] = *(_BYTE *)(v0 + v9[6]);
  v4[10].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v4[11].n128_u64[0] = 0xD000000000000011LL;
  v4[11].n128_u64[1] = 0x8000000000195F60LL;
  unsigned __int8 v12 = *(_BYTE *)(v0 + v9[7]);
  v4[13].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v4[12].n128_u8[0] = v12;
  swift_retain(v10);
  OUTLINED_FUNCTION_38_0();
}

void RunLinkActionAutoShortcutAppEnabledParameters.init(appName:device:executeSashGroupOnWatch:wasAlreadyEnabled:)( uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v9 = (int *)type metadata accessor for RunLinkActionAutoShortcutAppEnabledParameters(0LL);
  *(void *)(v5 + v9[5]) = a2;
  *(_BYTE *)(v5 + v9[6]) = a3;
  *(_BYTE *)(v5 + v9[7]) = a4;
  OUTLINED_FUNCTION_2();
}

uint64_t RunLinkActionAutoShortcutFirstRunParameters.executeSashGroupOnWatch.getter()
{
  uint64_t RunParameters = type metadata accessor for RunLinkActionAutoShortcutFirstRunParameters(0LL);
  return OUTLINED_FUNCTION_45_22(RunParameters);
}

uint64_t type metadata accessor for RunLinkActionAutoShortcutFirstRunParameters(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for RunLinkActionAutoShortcutFirstRunParameters,  (uint64_t)&nominal type descriptor for RunLinkActionAutoShortcutFirstRunParameters);
}

uint64_t RunLinkActionAutoShortcutFirstRunParameters.asKeyValuePairs()()
{
  return RunLinkActionActionPerformedParameters.asKeyValuePairs()(7368801LL, 0xE300000000000000LL);
}

void RunLinkActionAutoShortcutFirstRunParameters.init(app:executeSashGroupOnWatch:)( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t RunLinkActionConfirmChangeEnablementParameters.executeSashGroupOnWatch.getter()
{
  uint64_t v0 = type metadata accessor for RunLinkActionConfirmChangeEnablementParameters(0LL);
  return OUTLINED_FUNCTION_45_22(v0);
}

uint64_t type metadata accessor for RunLinkActionConfirmChangeEnablementParameters(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for RunLinkActionConfirmChangeEnablementParameters,  (uint64_t)&nominal type descriptor for RunLinkActionConfirmChangeEnablementParameters);
}

uint64_t RunLinkActionConfirmChangeEnablementParameters.isEnabling.getter()
{
  return *(unsigned __int8 *)(v0
}

void RunLinkActionConfirmChangeEnablementParameters.asKeyValuePairs()()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  unint64_t v4 = (__n128 *)OUTLINED_FUNCTION_26_29(v3);
  OUTLINED_FUNCTION_33_24(v4, (__n128)xmmword_17FDF0);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  uint64_t v6 = OUTLINED_FUNCTION_44_19(v5);
  if (v7)
  {
    OUTLINED_FUNCTION_123_5(v6, &demangling cache variable for type metadata for SpeakableString?);
    *uint64_t v1 = 0u;
    v1[1] = 0u;
  }

  else
  {
    uint64_t v8 = OUTLINED_FUNCTION_62_17();
    OUTLINED_FUNCTION_39_27((uint64_t)v8);
  }

  OUTLINED_FUNCTION_83_8();
  uint64_t v10 = OUTLINED_FUNCTION_80_11(v9);
  uint64_t v11 = type metadata accessor for RunLinkActionConfirmChangeEnablementParameters(v10);
  v4[6].n128_u8[0] = *(_BYTE *)(v0 + *(int *)(v11 + 20));
  v4[7].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v4[8].n128_u64[0] = 0x696C62616E457369LL;
  v4[8].n128_u64[1] = 0xEA0000000000676ELL;
  unsigned __int8 v12 = *(_BYTE *)(v0 + *(int *)(v11 + 24));
  v4[10].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v4[9].n128_u8[0] = v12;
  OUTLINED_FUNCTION_38_0();
}

void RunLinkActionConfirmChangeEnablementParameters.init(appName:executeSashGroupOnWatch:isEnabling:)( uint64_t a1@<X0>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for RunLinkActionConfirmChangeEnablementParameters(0LL);
  *(_BYTE *)(v4 + *(int *)(v6 + 20)) = v3;
  *(_BYTE *)(v4 + *(int *)(v6 + swift_bridgeObjectRelease(*(void *)(v0 + 24)) = a2;
  OUTLINED_FUNCTION_2();
}

uint64_t RunLinkActionContinueInAppParameters.executeSashGroupOnWatch.getter()
{
  uint64_t v0 = type metadata accessor for RunLinkActionContinueInAppParameters(0LL);
  return OUTLINED_FUNCTION_45_22(v0);
}

uint64_t type metadata accessor for RunLinkActionContinueInAppParameters(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for RunLinkActionContinueInAppParameters,  (uint64_t)&nominal type descriptor for RunLinkActionContinueInAppParameters);
}

uint64_t RunLinkActionContinueInAppParameters.asKeyValuePairs()()
{
  return OUTLINED_FUNCTION_14_42();
}

void RunLinkActionContinueInAppParameters.init(customDialog:executeSashGroupOnWatch:)( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t RunLinkActionParameterConfirmationParameters.executeSashGroupOnWatch.getter()
{
  uint64_t v0 = type metadata accessor for RunLinkActionParameterConfirmationParameters(0LL);
  return OUTLINED_FUNCTION_45_22(v0);
}

uint64_t type metadata accessor for RunLinkActionParameterConfirmationParameters(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for RunLinkActionParameterConfirmationParameters,  (uint64_t)&nominal type descriptor for RunLinkActionParameterConfirmationParameters);
}

void RunLinkActionParameterConfirmationParameters.parameterValue.getter(uint64_t a1@<X8>)
{
}

void RunLinkActionActionConfirmationParameters.verb.getter( uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1(0LL);
  outlined init with copy of AppDisplayInfo?( v2 + *(int *)(v4 + 24),  a2,  &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_1();
}

uint64_t RunLinkActionParameterConfirmationParameters.parameterValue.setter(uint64_t a1)
{
  return RunLinkActionActionConfirmationParameters.verb.setter( a1,  type metadata accessor for RunLinkActionParameterConfirmationParameters);
}

uint64_t RunLinkActionActionConfirmationParameters.verb.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v3 + *(int *)(OUTLINED_FUNCTION_30_23(a1, a2) + 24);
  return outlined assign with take of SpeakableString?(v2, v4);
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *RunLinkActionParameterConfirmationParameters.parameterValue.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

void RunLinkActionParameterConfirmationParameters.asKeyValuePairs()()
{
}

void RunLinkActionActionConfirmationParameters.asKeyValuePairs()( uint64_t (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_15();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v22 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_26_29(v14);
  *(_OWORD *)(v15 + 16) = xmmword_17FDF0;
  unint64_t v16 = (void *)(v15 + 48);
  OUTLINED_FUNCTION_0_18(v15);
  OUTLINED_FUNCTION_73_14(v7);
  uint64_t v17 = OUTLINED_FUNCTION_61_1();
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1LL, v17) == 1)
  {
    outlined destroy of Result<Output, Error>( (uint64_t)v13,  &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)unint64_t v16 = 0u;
    *(_OWORD *)(v15 + 64) = 0u;
  }

  else
  {
    *(void *)(v15 + 7outlined consume of WFShowAlertFlow.State(v0, 2) = v17;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v17 - 8) + 32LL))( boxed_opaque_existential_1,  v13,  v17);
  }

  OUTLINED_FUNCTION_83_8();
  *(void *)(v15 + 80) = v19;
  *(void *)(v15 + 88) = 0x8000000000197160LL;
  uint64_t v20 = a1(0LL);
  *(_BYTE *)(v15 + 96) = *(_BYTE *)(v7 + *(int *)(v20 + 20));
  *(void *)(v15 + 120) = &type metadata for Bool;
  *(void *)(v15 + 128) = a2;
  *(void *)(v15 + 136) = a3;
  outlined init with copy of AppDisplayInfo?( v7 + *(int *)(v20 + 24),  (uint64_t)v11,  &demangling cache variable for type metadata for SpeakableString?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1LL, v17) == 1)
  {
    outlined destroy of Result<Output, Error>( (uint64_t)v11,  &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v15 + 144) = 0u;
    *(_OWORD *)(v15 + 160) = 0u;
  }

  else
  {
    *(void *)(v15 + 168) = v17;
    id v21 = __swift_allocate_boxed_opaque_existential_1((void *)(v15 + 144));
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v17 - 8) + 32LL))(v21, v11, v17);
  }

  OUTLINED_FUNCTION_24_0();
}

uint64_t RunLinkActionParameterConfirmationParameters.init(customDialog:executeSashGroupOnWatch:parameterValue:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return RunLinkActionActionConfirmationParameters.init(customDialog:executeSashGroupOnWatch:verb:)(a1, a2, a3, a4);
}

uint64_t RunLinkActionParameterValueDisambiguationParameters.executeSashGroupOnWatch.getter()
{
  uint64_t v0 = type metadata accessor for RunLinkActionParameterValueDisambiguationParameters(0LL);
  return OUTLINED_FUNCTION_45_22(v0);
}

uint64_t type metadata accessor for RunLinkActionParameterValueDisambiguationParameters(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for RunLinkActionParameterValueDisambiguationParameters,  (uint64_t)&nominal type descriptor for RunLinkActionParameterValueDisambiguationParameters);
}

double RunLinkActionParameterValueDisambiguationParameters.items.getter()
{
  uint64_t v1 = type metadata accessor for RunLinkActionParameterValueDisambiguationParameters(0LL);
  *(void *)&double result = swift_bridgeObjectRetain(*(void *)(v0 + *(int *)(v1 + 24))).n128_u64[0];
  return result;
}

void RunLinkActionParameterValueDisambiguationParameters.asKeyValuePairs()()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_26_29(v3);
  *(_OWORD *)(v4 + 16) = xmmword_17FDF0;
  OUTLINED_FUNCTION_0_18(v4);
  outlined init with copy of AppDisplayInfo?(v0, v1, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  uint64_t v6 = OUTLINED_FUNCTION_44_19(v5);
  if (v7)
  {
    OUTLINED_FUNCTION_123_5(v6, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
  }

  else
  {
    uint64_t v8 = OUTLINED_FUNCTION_62_17();
    OUTLINED_FUNCTION_39_27((uint64_t)v8);
  }

  OUTLINED_FUNCTION_83_8();
  uint64_t v10 = OUTLINED_FUNCTION_80_11(v9);
  uint64_t v11 = type metadata accessor for RunLinkActionParameterValueDisambiguationParameters(v10);
  *(_BYTE *)(v4 + 96) = *(_BYTE *)(v0 + *(int *)(v11 + 20));
  *(void *)(v4 + 120) = &type metadata for Bool;
  *(void *)(v4 + 128) = 0x736D657469LL;
  *(void *)(v4 + 136) = 0xE500000000000000LL;
  uint64_t v12 = *(void *)(v0 + *(int *)(v11 + 24));
  *(void *)(v4 + 168) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  *(void *)(v4 + 144) = v12;
  swift_bridgeObjectRetain(v12);
  OUTLINED_FUNCTION_38_0();
}

void RunLinkActionParameterValueDisambiguationParameters.init(customDialog:executeSashGroupOnWatch:items:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for RunLinkActionParameterValueDisambiguationParameters(0LL);
  *(_BYTE *)(v4 + *(int *)(v6 + 20)) = v3;
  *(void *)(v4 + *(int *)(v6 + swift_bridgeObjectRelease(*(void *)(v0 + 24)) = a2;
  OUTLINED_FUNCTION_2();
}

uint64_t RunLinkActionCATPatternsExecutor.actionConfirmation(executeSashGroupOnWatch:_:)( char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = OUTLINED_FUNCTION_29_24(a1, a2, a3);
  uint64_t v5 = type metadata accessor for RunLinkActionActionConfirmationParameters(v4);
  *(void *)(v3 + 48) = OUTLINED_FUNCTION_16_41(v5);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATPatternsExecutor.actionConfirmation(executeSashGroupOnWatch:_:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_28_25(v1);
  RunLinkActionActionConfirmationParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_68_9(v2);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 64) = v3;
  OUTLINED_FUNCTION_74_2(v3, (uint64_t)RunLinkActionCATPatternsExecutor.actionConfirmation(executeSashGroupOnWatch:_:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v4 = OUTLINED_FUNCTION_43_28(32LL);
  return OUTLINED_FUNCTION_24_1(v4, v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_4_42();
  OUTLINED_FUNCTION_37();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_4_1();
}

uint64_t RunLinkActionCATPatternsExecutor.actionConfirmation(executeSashGroupOnWatch:_:)(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_46_26();
  return OUTLINED_FUNCTION_8_4(v1, v2);
}

{
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_27_31(a1, type metadata accessor for RunLinkActionActionConfirmationParameters);
  OUTLINED_FUNCTION_40_0();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_46_29();
  return OUTLINED_FUNCTION_27_2(v1);
}

uint64_t RunLinkActionCATPatternsExecutor.actionPerformed(executeSashGroupOnWatch:_:)( char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = OUTLINED_FUNCTION_29_24(a1, a2, a3);
  uint64_t v5 = type metadata accessor for RunLinkActionActionPerformedParameters(v4);
  *(void *)(v3 + 48) = OUTLINED_FUNCTION_16_41(v5);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATPatternsExecutor.actionPerformed(executeSashGroupOnWatch:_:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_12_35(v1);
  uint64_t v2 = RunLinkActionActionPerformedParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_68_9(v2);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 64) = v3;
  OUTLINED_FUNCTION_74_2(v3, (uint64_t)RunLinkActionCATPatternsExecutor.actionPerformed(executeSashGroupOnWatch:_:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v4 = OUTLINED_FUNCTION_53_23(29LL);
  return OUTLINED_FUNCTION_8_13(v4, v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_4_42();
  OUTLINED_FUNCTION_37();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_4_1();
}

uint64_t RunLinkActionCATPatternsExecutor.actionPerformed(executeSashGroupOnWatch:_:)(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_46_26();
  return OUTLINED_FUNCTION_8_4(v1, v2);
}

{
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_27_31(a1, type metadata accessor for RunLinkActionActionPerformedParameters);
  OUTLINED_FUNCTION_40_0();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_46_29();
  return OUTLINED_FUNCTION_27_2(v1);
}

uint64_t RunLinkActionCATPatternsExecutor.actionPerformedUseSonicStatus(executeSashGroupOnWatch:_:)( char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = OUTLINED_FUNCTION_29_24(a1, a2, a3);
  uint64_t v5 = type metadata accessor for RunLinkActionActionPerformedUseSonicStatusParameters(v4);
  *(void *)(v3 + 48) = OUTLINED_FUNCTION_16_41(v5);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATPatternsExecutor.actionPerformedUseSonicStatus(executeSashGroupOnWatch:_:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_12_35(v1);
  uint64_t v2 = RunLinkActionActionPerformedUseSonicStatusParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_68_9(v2);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 64) = v3;
  OUTLINED_FUNCTION_74_2( v3,  (uint64_t)RunLinkActionCATPatternsExecutor.actionPerformedUseSonicStatus(executeSashGroupOnWatch:_:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v4 = OUTLINED_FUNCTION_53_23(43LL);
  return OUTLINED_FUNCTION_8_13(v4, v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_4_42();
  OUTLINED_FUNCTION_37();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_4_1();
}

uint64_t RunLinkActionCATPatternsExecutor.actionPerformedUseSonicStatus(executeSashGroupOnWatch:_:)( uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_46_26();
  return OUTLINED_FUNCTION_8_4(v1, v2);
}

{
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_27_31(a1, type metadata accessor for RunLinkActionActionPerformedUseSonicStatusParameters);
  OUTLINED_FUNCTION_40_0();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_46_29();
  return OUTLINED_FUNCTION_27_2(v1);
}

uint64_t RunLinkActionCATPatternsExecutor.autoShortcutAppEnabled(executeSashGroupOnWatch:wasAlreadyEnabled:_:)( char a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = a4;
  *(void *)(v5 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = v4;
  *(void *)(v5 + 16) = a3;
  *(_BYTE *)(v5 + 89) = a2;
  *(_BYTE *)(v5 + 88) = a1;
  uint64_t v6 = OUTLINED_FUNCTION_59_13();
  *(void *)(v5 + 48) = OUTLINED_FUNCTION_16_41(v6);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATPatternsExecutor.autoShortcutAppEnabled(executeSashGroupOnWatch:wasAlreadyEnabled:_:)()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  char v3 = *(_BYTE *)(v0 + 88);
  uint64_t v4 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_85_12(v4);
  *(void *)(v1 + OUTLINED_FUNCTION_223(*(void *)(v3 + 120), v5) = 0LL;
  *(_BYTE *)(v1 + *(int *)(v2 + swift_bridgeObjectRelease(*(void *)(v0 + 24)) = v3;
  OUTLINED_FUNCTION_36_27(*(int *)(v2 + 28));
  RunLinkActionAutoShortcutAppEnabledParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_68_9(v6);
  char v7 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 64) = v7;
  OUTLINED_FUNCTION_74_2( v7,  (uint64_t)RunLinkActionCATPatternsExecutor.autoShortcutAppEnabled(executeSashGroupOnWatch:wasAlreadyEnabled:_:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v8 = OUTLINED_FUNCTION_43_28(36LL);
  return OUTLINED_FUNCTION_24_1(v8, v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_4_42();
  OUTLINED_FUNCTION_37();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_4_1();
}

uint64_t RunLinkActionCATPatternsExecutor.autoShortcutAppEnabled(executeSashGroupOnWatch:wasAlreadyEnabled:_:)( uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_46_26();
  return OUTLINED_FUNCTION_8_4(v1, v2);
}

{
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_27_31(a1, type metadata accessor for RunLinkActionAutoShortcutAppEnabledParameters);
  OUTLINED_FUNCTION_40_0();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_46_29();
  return OUTLINED_FUNCTION_27_2(v1);
}

uint64_t RunLinkActionCATPatternsExecutor.autoShortcutFirstRun(executeSashGroupOnWatch:_:)( char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = OUTLINED_FUNCTION_29_24(a1, a2, a3);
  uint64_t RunParameters = type metadata accessor for RunLinkActionAutoShortcutFirstRunParameters(v4);
  *(void *)(v3 + 48) = OUTLINED_FUNCTION_16_41(RunParameters);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATPatternsExecutor.autoShortcutFirstRun(executeSashGroupOnWatch:_:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_12_35(v1);
  uint64_t Run = RunLinkActionAutoShortcutFirstRunParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_68_9(Run);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 64) = v3;
  OUTLINED_FUNCTION_74_2(v3, (uint64_t)RunLinkActionCATPatternsExecutor.autoShortcutFirstRun(executeSashGroupOnWatch:_:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v4 = OUTLINED_FUNCTION_53_23(34LL);
  return OUTLINED_FUNCTION_8_13(v4, v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_4_42();
  OUTLINED_FUNCTION_37();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_4_1();
}

uint64_t RunLinkActionCATPatternsExecutor.autoShortcutFirstRun(executeSashGroupOnWatch:_:)(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_46_26();
  return OUTLINED_FUNCTION_8_4(v1, v2);
}

{
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_27_31(a1, type metadata accessor for RunLinkActionAutoShortcutFirstRunParameters);
  OUTLINED_FUNCTION_40_0();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_46_29();
  return OUTLINED_FUNCTION_27_2(v1);
}

uint64_t RunLinkActionCATPatternsExecutor.confirmChangeEnablement(executeSashGroupOnWatch:isEnabling:_:)( char a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = a4;
  *(void *)(v5 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = v4;
  *(void *)(v5 + 16) = a3;
  *(_BYTE *)(v5 + 89) = a2;
  *(_BYTE *)(v5 + 88) = a1;
  uint64_t v6 = type metadata accessor for RunLinkActionConfirmChangeEnablementParameters(0LL);
  *(void *)(v5 + 48) = OUTLINED_FUNCTION_16_41(v6);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATPatternsExecutor.confirmChangeEnablement(executeSashGroupOnWatch:isEnabling:_:)()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  char v3 = *(_BYTE *)(v0 + 88);
  uint64_t v4 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_85_12(v4);
  *(_BYTE *)(v1 + OUTLINED_FUNCTION_223(*(void *)(v3 + 120), v5) = v3;
  OUTLINED_FUNCTION_36_27(*(int *)(v2 + 24));
  RunLinkActionConfirmChangeEnablementParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_68_9(v6);
  char v7 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 64) = v7;
  OUTLINED_FUNCTION_74_2( v7,  (uint64_t)RunLinkActionCATPatternsExecutor.confirmChangeEnablement(executeSashGroupOnWatch:isEnabling:_:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v8 = OUTLINED_FUNCTION_43_28(37LL);
  return OUTLINED_FUNCTION_24_1(v8, v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_4_42();
  OUTLINED_FUNCTION_37();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_4_1();
}

uint64_t RunLinkActionCATPatternsExecutor.confirmChangeEnablement(executeSashGroupOnWatch:isEnabling:_:)( uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_46_26();
  return OUTLINED_FUNCTION_8_4(v1, v2);
}

{
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_27_31(a1, type metadata accessor for RunLinkActionConfirmChangeEnablementParameters);
  OUTLINED_FUNCTION_40_0();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_46_29();
  return OUTLINED_FUNCTION_27_2(v1);
}

uint64_t RunLinkActionCATPatternsExecutor.continueInApp(executeSashGroupOnWatch:_:)( char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = OUTLINED_FUNCTION_29_24(a1, a2, a3);
  uint64_t v5 = type metadata accessor for RunLinkActionContinueInAppParameters(v4);
  *(void *)(v3 + 48) = OUTLINED_FUNCTION_16_41(v5);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATPatternsExecutor.continueInApp(executeSashGroupOnWatch:_:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_12_35(v1);
  uint64_t v2 = RunLinkActionContinueInAppParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_68_9(v2);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 64) = v3;
  OUTLINED_FUNCTION_74_2(v3, (uint64_t)RunLinkActionCATPatternsExecutor.continueInApp(executeSashGroupOnWatch:_:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v4 = OUTLINED_FUNCTION_53_23(27LL);
  return OUTLINED_FUNCTION_8_13(v4, v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_4_42();
  OUTLINED_FUNCTION_37();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_4_1();
}

uint64_t RunLinkActionCATPatternsExecutor.continueInApp(executeSashGroupOnWatch:_:)(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_46_26();
  return OUTLINED_FUNCTION_8_4(v1, v2);
}

{
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_27_31(a1, type metadata accessor for RunLinkActionContinueInAppParameters);
  OUTLINED_FUNCTION_40_0();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_46_29();
  return OUTLINED_FUNCTION_27_2(v1);
}

uint64_t RunLinkActionCATPatternsExecutor.parameterConfirmation(executeSashGroupOnWatch:_:)( char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = OUTLINED_FUNCTION_29_24(a1, a2, a3);
  uint64_t v5 = type metadata accessor for RunLinkActionParameterConfirmationParameters(v4);
  *(void *)(v3 + 48) = OUTLINED_FUNCTION_16_41(v5);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATPatternsExecutor.parameterConfirmation(executeSashGroupOnWatch:_:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_28_25(v1);
  RunLinkActionParameterConfirmationParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_68_9(v2);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 64) = v3;
  OUTLINED_FUNCTION_74_2( v3,  (uint64_t)RunLinkActionCATPatternsExecutor.parameterConfirmation(executeSashGroupOnWatch:_:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v4 = OUTLINED_FUNCTION_43_28(35LL);
  return OUTLINED_FUNCTION_24_1(v4, v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_4_42();
  OUTLINED_FUNCTION_37();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_4_1();
}

uint64_t RunLinkActionCATPatternsExecutor.parameterConfirmation(executeSashGroupOnWatch:_:)(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_46_26();
  return OUTLINED_FUNCTION_8_4(v1, v2);
}

{
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_27_31(a1, type metadata accessor for RunLinkActionParameterConfirmationParameters);
  OUTLINED_FUNCTION_40_0();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_46_29();
  return OUTLINED_FUNCTION_27_2(v1);
}

uint64_t RunLinkActionCATPatternsExecutor.parameterValueDisambiguation(executeSashGroupOnWatch:items:_:)( char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = a4;
  *(void *)(v5 + 40) = v4;
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = a3;
  *(_BYTE *)(v5 + 96) = a1;
  uint64_t v6 = type metadata accessor for RunLinkActionParameterValueDisambiguationParameters(0LL);
  *(void *)(v5 + 48) = v6;
  *(void *)(v5 + 56) = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATPatternsExecutor.parameterValueDisambiguation(executeSashGroupOnWatch:items:_:)()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void (**)(uint64_t, __n128))(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 16);
  char v5 = *(_BYTE *)(v0 + 96);
  uint64_t v6 = OUTLINED_FUNCTION_61_1();
  __swift_storeEnumTagSinglePayload(v1, 1LL, 1LL, v6);
  *(_BYTE *)(v1 + *(int *)(v2 + 20)) = v5;
  *(void *)(v1 + *(int *)(v2 + swift_bridgeObjectRelease(*(void *)(v0 + 24)) = v4;
  __n128 v7 = swift_bridgeObjectRetain(v4);
  v3(v1, v7);
  RunLinkActionParameterValueDisambiguationParameters.asKeyValuePairs()();
  *(void *)(v0 + 64) = v8;
  uint64_t v9 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 7outlined consume of WFShowAlertFlow.State(v0, 2) = v9;
  *uint64_t v9 = v0;
  v9[1] = RunLinkActionCATPatternsExecutor.parameterValueDisambiguation(executeSashGroupOnWatch:items:_:);
  OUTLINED_FUNCTION_26_8();
  unint64_t v10 = OUTLINED_FUNCTION_43_28(42LL);
  return OUTLINED_FUNCTION_24_1(v10, v11, v12, v13);
}

uint64_t RunLinkActionCATPatternsExecutor.parameterValueDisambiguation(executeSashGroupOnWatch:items:_:)( uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 80) = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_37();
  if (!v1) {
    *(void *)(v4 + 88) = a1;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_4_1();
}

{
  uint64_t v1;
  OUTLINED_FUNCTION_27_31(a1, type metadata accessor for RunLinkActionParameterValueDisambiguationParameters);
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_8_4(*(void *)(v1 + 88), *(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v1;
  OUTLINED_FUNCTION_27_31(a1, type metadata accessor for RunLinkActionParameterValueDisambiguationParameters);
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v1 + 8));
}

void RunLinkActionCATPatternsExecutor.__allocating_init(templateDir:options:globals:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void RunLinkActionCATPatternsExecutor.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_35();
  uint64_t v10 = v9 - v8;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_35();
  uint64_t v14 = v13 - v12;
  OUTLINED_FUNCTION_73_14(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  CATWrapper.init(templateDir:options:globals:)(v14, v10, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  outlined destroy of Result<Output, Error>(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_24_0();
}

unint64_t lazy protocol witness table accessor for type RunLinkActionCATPatternsIdentifiers and conformance RunLinkActionCATPatternsIdentifiers()
{
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATPatternsIdentifiers and conformance RunLinkActionCATPatternsIdentifiers;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATPatternsIdentifiers and conformance RunLinkActionCATPatternsIdentifiers)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunLinkActionCATPatternsIdentifiers,  &type metadata for RunLinkActionCATPatternsIdentifiers);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATPatternsIdentifiers and conformance RunLinkActionCATPatternsIdentifiers);
  }

  return result;
}

uint64_t protocol witness for RunLinkActionCATPatternsExecuting.actionConfirmation(executeSashGroupOnWatch:_:) in conformance RunLinkActionCATPatternsExecutor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(**v3 + class metadata base offset for RunLinkActionCATPatternsExecutor);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = ListShortcutsCATsSimple.viewShortcutsInApp();
  return v11(a1, a2, a3);
}

uint64_t protocol witness for RunLinkActionCATPatternsExecuting.actionPerformed(executeSashGroupOnWatch:_:) in conformance RunLinkActionCATPatternsExecutor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(class metadata base offset for RunLinkActionCATPatternsExecutor + **v3 + 8);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = ListShortcutsCATsSimple.viewShortcutsInApp();
  return v11(a1, a2, a3);
}

uint64_t protocol witness for RunLinkActionCATPatternsExecuting.actionPerformedUseSonicStatus(executeSashGroupOnWatch:_:) in conformance RunLinkActionCATPatternsExecutor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(class metadata base offset for RunLinkActionCATPatternsExecutor + **v3 + 16);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = ListShortcutsCATsSimple.viewShortcutsInApp();
  return v11(a1, a2, a3);
}

uint64_t protocol witness for RunLinkActionCATPatternsExecuting.autoShortcutAppEnabled(executeSashGroupOnWatch:wasAlreadyEnabled:_:) in conformance RunLinkActionCATPatternsExecutor( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *(int **)(class metadata base offset for RunLinkActionCATPatternsExecutor + **v4 + 24);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc(v10[1]);
  *(void *)(v5 + 16) = v11;
  void *v11 = v5;
  v11[1] = ListShortcutsCATsSimple.viewShortcutsInApp();
  return v13(a1, a2, a3, a4);
}

uint64_t protocol witness for RunLinkActionCATPatternsExecuting.autoShortcutFirstRun(executeSashGroupOnWatch:_:) in conformance RunLinkActionCATPatternsExecutor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(class metadata base offset for RunLinkActionCATPatternsExecutor + **v3 + 32);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = ListShortcutsCATsSimple.viewShortcutsInAppAsLabels();
  return v11(a1, a2, a3);
}

uint64_t protocol witness for RunLinkActionCATPatternsExecuting.confirmChangeEnablement(executeSashGroupOnWatch:isEnabling:_:) in conformance RunLinkActionCATPatternsExecutor( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *(int **)(class metadata base offset for RunLinkActionCATPatternsExecutor + **v4 + 40);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc(v10[1]);
  *(void *)(v5 + 16) = v11;
  void *v11 = v5;
  v11[1] = ListShortcutsCATsSimple.viewShortcutsInApp();
  return v13(a1, a2, a3, a4);
}

uint64_t protocol witness for RunLinkActionCATPatternsExecuting.continueInApp(executeSashGroupOnWatch:_:) in conformance RunLinkActionCATPatternsExecutor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(class metadata base offset for RunLinkActionCATPatternsExecutor + **v3 + 48);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = ListShortcutsCATsSimple.viewShortcutsInApp();
  return v11(a1, a2, a3);
}

uint64_t protocol witness for RunLinkActionCATPatternsExecuting.parameterConfirmation(executeSashGroupOnWatch:_:) in conformance RunLinkActionCATPatternsExecutor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(class metadata base offset for RunLinkActionCATPatternsExecutor + **v3 + 56);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = ListShortcutsCATsSimple.viewShortcutsInApp();
  return v11(a1, a2, a3);
}

uint64_t protocol witness for RunLinkActionCATPatternsExecuting.parameterValueDisambiguation(executeSashGroupOnWatch:items:_:) in conformance RunLinkActionCATPatternsExecutor( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *(int **)(class metadata base offset for RunLinkActionCATPatternsExecutor + **v4 + 64);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc(v10[1]);
  *(void *)(v5 + 16) = v11;
  void *v11 = v5;
  v11[1] = ListShortcutsCATsSimple.viewShortcutsInApp();
  return v13(a1, a2, a3, a4);
}

uint64_t storeEnumTagSinglePayload for RunLinkActionCATPatternsIdentifiers( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_147F34 + 4 * byte_18AC9E[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_147F68 + 4 * byte_18AC99[v4]))();
}

uint64_t sub_147F68(uint64_t result)
{
  *(_BYTE *)(result + outlined consume of ParsedMeasurement(v0, v1, 1) = v1;
  return result;
}

uint64_t sub_147F70(uint64_t result, int a2)
{
  *(_WORD *)(result + outlined consume of ParsedMeasurement(v0, v1, 1) = 0;
  if (a2) {
    JUMPOUT(0x147F78LL);
  }
  return result;
}

uint64_t sub_147F84(uint64_t result, int a2)
{
  *(_DWORD *)(result + outlined consume of ParsedMeasurement(v0, v1, 1) = 0;
  if (!a2) {
    JUMPOUT(0x147F8CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 8;
  return result;
}

uint64_t sub_147F90(uint64_t result)
{
  *(_DWORD *)(result + outlined consume of ParsedMeasurement(v0, v1, 1) = v1;
  return result;
}

uint64_t sub_147F98(uint64_t result)
{
  *(_WORD *)(result + outlined consume of ParsedMeasurement(v0, v1, 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RunLinkActionCATPatternsIdentifiers()
{
  return &type metadata for RunLinkActionCATPatternsIdentifiers;
}

uint64_t getEnumTagSinglePayload for RunLinkActionActionConfirmationParameters( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0);
}

uint64_t storeEnumTagSinglePayload for RunLinkActionActionConfirmationParameters( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0);
}

uint64_t getEnumTagSinglePayload for RunLinkActionActionPerformedParameters( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0_0);
}

uint64_t storeEnumTagSinglePayload for RunLinkActionActionPerformedParameters( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0_0);
}

uint64_t getEnumTagSinglePayload for RunLinkActionActionPerformedUseSonicStatusParameters( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0_1);
}

uint64_t storeEnumTagSinglePayload for RunLinkActionActionPerformedUseSonicStatusParameters( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0_1);
}

uint64_t *initializeBufferWithCopyOfBuffer for RunLinkActionAutoShortcutAppEnabledParameters( uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[5];
    uint64_t v11 = a3[6];
    uint64_t v9 = *(uint64_t *)((char *)a2 + v10);
    *(uint64_t *)((char *)a1 + v10) = v9;
    *((_BYTE *)a1 + v1outlined consume of ParsedMeasurement(v0, v1, 1) = *((_BYTE *)a2 + v11);
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }

  swift_retain(v9);
  return a1;
}

uint64_t destroy for RunLinkActionAutoShortcutAppEnabledParameters(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SpeakableString(0LL);
  return swift_release();
}

char *initializeWithCopy for RunLinkActionAutoShortcutAppEnabledParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = *(void *)&a2[v8];
  *(void *)&a1[v8] = v10;
  a1[v9] = a2[v9];
  a1[a3[7]] = a2[a3[7]];
  swift_retain(v10);
  return a1;
}

char *assignWithCopy for RunLinkActionAutoShortcutAppEnabledParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1LL, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = *(void *)&a2[v11];
  *(void *)&a1[v11] = v12;
  swift_retain(v12);
  swift_release();
  a1[a3[6]] = a2[a3[6]];
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

char *initializeWithTake for RunLinkActionAutoShortcutAppEnabledParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  a1[v8] = a2[v8];
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

char *assignWithTake for RunLinkActionAutoShortcutAppEnabledParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1LL, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_release();
  uint64_t v11 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  a1[v11] = a2[v11];
  return a1;
}

uint64_t getEnumTagSinglePayload for RunLinkActionAutoShortcutAppEnabledParameters( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_148568);
}

void sub_148568()
{
  if (v0)
  {
    uint64_t v1 = OUTLINED_FUNCTION_71_13();
    OUTLINED_FUNCTION_24_31(v1, v2, v3);
  }

  else
  {
    OUTLINED_FUNCTION_78_12();
    OUTLINED_FUNCTION_2();
  }

uint64_t storeEnumTagSinglePayload for RunLinkActionAutoShortcutAppEnabledParameters( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1485C8);
}

void sub_1485C8()
{
  if (v3)
  {
    uint64_t v4 = OUTLINED_FUNCTION_55_23();
    OUTLINED_FUNCTION_7_35(v4, v5, v6, v7);
  }

  else
  {
    *(void *)(v1 + *(int *)(v2 + 20)) = v0;
    OUTLINED_FUNCTION_2();
  }

void type metadata completion function for RunLinkActionAutoShortcutAppEnabledParameters(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = "\b";
    void v4[2] = &unk_18ADE0;
    void v4[3] = &unk_18ADE0;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
  }

uint64_t getEnumTagSinglePayload for RunLinkActionAutoShortcutFirstRunParameters( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0_2);
}

uint64_t storeEnumTagSinglePayload for RunLinkActionAutoShortcutFirstRunParameters( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0_2);
}

uint64_t *initializeBufferWithCopyOfBuffer for RunLinkActionConfirmChangeEnablementParameters( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v9);
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    *((_BYTE *)a1 + v10) = *((_BYTE *)a2 + v10);
  }

  return a1;
}

void *initializeWithCopy for RunLinkActionConfirmChangeEnablementParameters( void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
  return a1;
}

void *assignWithCopy for RunLinkActionConfirmChangeEnablementParameters( void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1LL, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  *((_BYTE *)a1 + *(int *)(a3 + swift_bridgeObjectRelease(*(void *)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *initializeWithTake for RunLinkActionConfirmChangeEnablementParameters( void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
  return a1;
}

void *assignWithTake for RunLinkActionConfirmChangeEnablementParameters( void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1LL, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  *((_BYTE *)a1 + v1outlined consume of ParsedMeasurement(v0, v1, 1) = *((_BYTE *)a2 + v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for RunLinkActionConfirmChangeEnablementParameters( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0_3);
}

uint64_t storeEnumTagSinglePayload for RunLinkActionConfirmChangeEnablementParameters( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0_3);
}

void type metadata completion function for RunLinkActionConfirmChangeEnablementParameters()
{
}

{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  OUTLINED_FUNCTION_60_16();
  if (v0 <= 0x3F)
  {
    OUTLINED_FUNCTION_70_15();
    OUTLINED_FUNCTION_58_22(v1, v2, v3, v4, v5, v6);
  }

  OUTLINED_FUNCTION_21_28();
}

void initializeBufferWithCopyOfBuffer for RunLinkActionActionPerformedParameters( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if ((*(_DWORD *)(*(void *)(a3 - 8) + 80LL) & 0x20000) != 0)
  {
    OUTLINED_FUNCTION_56_28(*a2);
  }

  else
  {
    uint64_t v6 = OUTLINED_FUNCTION_61_1();
    if (OUTLINED_FUNCTION_30_26())
    {
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      OUTLINED_FUNCTION_21_33(v7);
    }

    else
    {
      OUTLINED_FUNCTION_16_44(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
      OUTLINED_FUNCTION_25_35();
    }

    *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }

  OUTLINED_FUNCTION_2();
}

void destroy for RunLinkActionActionPerformedParameters(uint64_t a1)
{
  uint64_t v2 = OUTLINED_FUNCTION_61_1();
  else {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  }
}

void initializeWithCopy for RunLinkActionActionPerformedParameters()
{
  uint64_t v0 = OUTLINED_FUNCTION_61_1();
  if (OUTLINED_FUNCTION_30_26())
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_21_33(v1);
  }

  else
  {
    OUTLINED_FUNCTION_16_44(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL));
    OUTLINED_FUNCTION_25_35();
  }

  OUTLINED_FUNCTION_40_27();
  OUTLINED_FUNCTION_2();
}

void assignWithCopy for RunLinkActionActionPerformedParameters(uint64_t a1)
{
  uint64_t v2 = OUTLINED_FUNCTION_61_1();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(a1, 1LL, v2);
  int v4 = OUTLINED_FUNCTION_30_26();
  if (!EnumTagSinglePayload)
  {
    uint64_t v5 = *(void *)(v2 - 8);
    if (!v4)
    {
      OUTLINED_FUNCTION_16_44(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 24));
      goto LABEL_7;
    }

    OUTLINED_FUNCTION_72_13(v5);
    goto LABEL_6;
  }

  if (v4)
  {
LABEL_6:
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_21_33(v6);
    goto LABEL_7;
  }

  OUTLINED_FUNCTION_16_44(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL));
  OUTLINED_FUNCTION_25_35();
LABEL_7:
  OUTLINED_FUNCTION_40_27();
  OUTLINED_FUNCTION_38_0();
}

void initializeWithTake for RunLinkActionActionPerformedParameters()
{
  uint64_t v0 = OUTLINED_FUNCTION_61_1();
  if (OUTLINED_FUNCTION_30_26())
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_21_33(v1);
  }

  else
  {
    OUTLINED_FUNCTION_16_44(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 32LL));
    OUTLINED_FUNCTION_25_35();
  }

  OUTLINED_FUNCTION_40_27();
  OUTLINED_FUNCTION_2();
}

void assignWithTake for RunLinkActionActionPerformedParameters(uint64_t a1)
{
  uint64_t v2 = OUTLINED_FUNCTION_61_1();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(a1, 1LL, v2);
  int v4 = OUTLINED_FUNCTION_30_26();
  if (!EnumTagSinglePayload)
  {
    uint64_t v5 = *(void *)(v2 - 8);
    if (!v4)
    {
      OUTLINED_FUNCTION_16_44(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 40));
      goto LABEL_7;
    }

    OUTLINED_FUNCTION_72_13(v5);
    goto LABEL_6;
  }

  if (v4)
  {
LABEL_6:
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_21_33(v6);
    goto LABEL_7;
  }

  OUTLINED_FUNCTION_16_44(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32LL));
  OUTLINED_FUNCTION_25_35();
LABEL_7:
  OUTLINED_FUNCTION_40_27();
  OUTLINED_FUNCTION_38_0();
}

uint64_t getEnumTagSinglePayload for RunLinkActionContinueInAppParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0_4);
}

uint64_t storeEnumTagSinglePayload for RunLinkActionContinueInAppParameters( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0_4);
}

void type metadata completion function for RunLinkActionActionPerformedParameters()
{
  if (v1 <= 0x3F)
  {
    OUTLINED_FUNCTION_70_15();
    v4[0] = v2;
    v4[1] = &unk_18ADE0;
    swift_initStructMetadata(v0, 256LL, 2LL, v4, v3);
  }

void initializeBufferWithCopyOfBuffer for RunLinkActionActionConfirmationParameters( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if ((*(_DWORD *)(*(void *)(a3 - 8) + 80LL) & 0x20000) != 0)
  {
    OUTLINED_FUNCTION_56_28(*a2);
  }

  else
  {
    uint64_t v6 = OUTLINED_FUNCTION_61_1();
    if (OUTLINED_FUNCTION_8_56())
    {
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      OUTLINED_FUNCTION_22_33(v7);
    }

    else
    {
      OUTLINED_FUNCTION_10_38(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
      OUTLINED_FUNCTION_28_17(a1);
    }

    uint64_t v8 = *(int *)(a3 + 24);
    *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    uint64_t v9 = a1 + v8;
    if (OUTLINED_FUNCTION_8_56())
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      OUTLINED_FUNCTION_5_41(v10);
    }

    else
    {
      OUTLINED_FUNCTION_10_38(v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
      OUTLINED_FUNCTION_28_17(v9);
    }
  }

  OUTLINED_FUNCTION_2();
}

void destroy for RunLinkActionActionConfirmationParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = OUTLINED_FUNCTION_61_1();
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  else {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v5, v4);
  }
}

void initializeWithCopy for RunLinkActionActionConfirmationParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = OUTLINED_FUNCTION_61_1();
  if (OUTLINED_FUNCTION_8_56())
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_22_33(v7);
  }

  else
  {
    OUTLINED_FUNCTION_10_38(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
    OUTLINED_FUNCTION_28_17(a1);
  }

  uint64_t v8 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  uint64_t v9 = a1 + v8;
  if (OUTLINED_FUNCTION_8_56())
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_5_41(v10);
  }

  else
  {
    OUTLINED_FUNCTION_10_38(v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
    OUTLINED_FUNCTION_28_17(v9);
  }

  OUTLINED_FUNCTION_2();
}

void assignWithCopy for RunLinkActionActionConfirmationParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = OUTLINED_FUNCTION_61_1();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(a1, 1LL, v6);
  int v8 = OUTLINED_FUNCTION_8_56();
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      OUTLINED_FUNCTION_10_38(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
      OUTLINED_FUNCTION_28_17(a1);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    OUTLINED_FUNCTION_42_21(a1, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_22_33(v10);
    goto LABEL_7;
  }

  OUTLINED_FUNCTION_10_38(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 24));
LABEL_7:
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  uint64_t v11 = a1 + *(int *)(a3 + 24);
  int v12 = __swift_getEnumTagSinglePayload(v11, 1LL, v6);
  int v13 = OUTLINED_FUNCTION_8_56();
  if (!v12)
  {
    uint64_t v14 = *(void *)(v6 - 8);
    if (!v13)
    {
      OUTLINED_FUNCTION_10_38(v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 24));
      goto LABEL_13;
    }

    OUTLINED_FUNCTION_42_21(v11, *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
    goto LABEL_12;
  }

  if (v13)
  {
LABEL_12:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_5_41(v15);
    goto LABEL_13;
  }

  OUTLINED_FUNCTION_10_38(v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
  OUTLINED_FUNCTION_28_17(v11);
LABEL_13:
  OUTLINED_FUNCTION_38_0();
}

void initializeWithTake for RunLinkActionActionConfirmationParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = OUTLINED_FUNCTION_61_1();
  if (OUTLINED_FUNCTION_8_56())
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_22_33(v7);
  }

  else
  {
    OUTLINED_FUNCTION_10_38(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
    OUTLINED_FUNCTION_28_17(a1);
  }

  uint64_t v8 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  uint64_t v9 = a1 + v8;
  if (OUTLINED_FUNCTION_8_56())
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_5_41(v10);
  }

  else
  {
    OUTLINED_FUNCTION_10_38(v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
    OUTLINED_FUNCTION_28_17(v9);
  }

  OUTLINED_FUNCTION_2();
}

void assignWithTake for RunLinkActionActionConfirmationParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = OUTLINED_FUNCTION_61_1();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(a1, 1LL, v6);
  int v8 = OUTLINED_FUNCTION_8_56();
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      OUTLINED_FUNCTION_10_38(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
      OUTLINED_FUNCTION_28_17(a1);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    OUTLINED_FUNCTION_42_21(a1, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_22_33(v10);
    goto LABEL_7;
  }

  OUTLINED_FUNCTION_10_38(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 40));
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  uint64_t v12 = a1 + v11;
  int v13 = __swift_getEnumTagSinglePayload(a1 + v11, 1LL, v6);
  int v14 = OUTLINED_FUNCTION_8_56();
  if (!v13)
  {
    uint64_t v15 = *(void *)(v6 - 8);
    if (!v14)
    {
      OUTLINED_FUNCTION_10_38(v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 40));
      goto LABEL_13;
    }

    OUTLINED_FUNCTION_42_21(v12, *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
    goto LABEL_12;
  }

  if (v14)
  {
LABEL_12:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_5_41(v16);
    goto LABEL_13;
  }

  OUTLINED_FUNCTION_10_38(v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
  OUTLINED_FUNCTION_28_17(v12);
LABEL_13:
  OUTLINED_FUNCTION_38_0();
}

uint64_t getEnumTagSinglePayload for RunLinkActionParameterConfirmationParameters( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_149344);
}

void __swift_get_extra_inhabitant_indexTm_0()
{
  if (v0)
  {
    uint64_t v1 = OUTLINED_FUNCTION_71_13();
    OUTLINED_FUNCTION_24_31(v1, v2, v3);
  }

  else
  {
    OUTLINED_FUNCTION_2();
  }

uint64_t storeEnumTagSinglePayload for RunLinkActionParameterConfirmationParameters( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1493B8);
}

void __swift_store_extra_inhabitant_indexTm_0()
{
  if (v3)
  {
    uint64_t v4 = OUTLINED_FUNCTION_55_23();
    OUTLINED_FUNCTION_7_35(v4, v5, v6, v7);
  }

  else
  {
    *(_BYTE *)(v1 + *(int *)(v2 + 20)) = v0 + 1;
    OUTLINED_FUNCTION_2();
  }

void type metadata completion function for RunLinkActionActionConfirmationParameters()
{
  if (v0 <= 0x3F)
  {
    OUTLINED_FUNCTION_70_15();
    OUTLINED_FUNCTION_58_22(v1, v2, v3, v4, v5, v6);
  }

  OUTLINED_FUNCTION_21_28();
}

uint64_t *initializeBufferWithCopyOfBuffer for RunLinkActionParameterValueDisambiguationParameters( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v9);
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    uint64_t v11 = *(uint64_t *)((char *)a2 + v10);
    *(uint64_t *)((char *)a1 + v10) = v11;
    swift_bridgeObjectRetain(v11);
  }

  return a1;
}

uint64_t destroy for RunLinkActionParameterValueDisambiguationParameters(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SpeakableString(0LL);
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for RunLinkActionParameterValueDisambiguationParameters( char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  uint64_t v9 = *(void *)&a2[v8];
  *(void *)&a1[v8] = v9;
  swift_bridgeObjectRetain(v9);
  return a1;
}

char *assignWithCopy for RunLinkActionParameterValueDisambiguationParameters(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1LL, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
LABEL_7:
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = *(void *)&a2[v11];
  *(void *)&a1[v11] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for RunLinkActionParameterValueDisambiguationParameters( char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  return a1;
}

char *assignWithTake for RunLinkActionParameterValueDisambiguationParameters(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1LL, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  *(void *)&a1[v11] = *(void *)&a2[v11];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RunLinkActionParameterValueDisambiguationParameters( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_149934);
}

void sub_149934()
{
  if (v0)
  {
    uint64_t v1 = OUTLINED_FUNCTION_71_13();
    OUTLINED_FUNCTION_24_31(v1, v2, v3);
  }

  else
  {
    OUTLINED_FUNCTION_78_12();
    OUTLINED_FUNCTION_2();
  }

uint64_t storeEnumTagSinglePayload for RunLinkActionParameterValueDisambiguationParameters( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_149988);
}

void sub_149988()
{
  if (v3)
  {
    uint64_t v4 = OUTLINED_FUNCTION_55_23();
    OUTLINED_FUNCTION_7_35(v4, v5, v6, v7);
  }

  else
  {
    *(void *)(v1 + *(int *)(v2 + swift_bridgeObjectRelease(*(void *)(v0 + 24)) = (v0 - 1);
    OUTLINED_FUNCTION_2();
  }

void type metadata completion function for RunLinkActionParameterValueDisambiguationParameters()
{
}

uint64_t type metadata accessor for RunLinkActionCATPatternsExecutor(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for RunLinkActionCATPatternsExecutor,  (uint64_t)&nominal type descriptor for RunLinkActionCATPatternsExecutor);
}

uint64_t type metadata completion function for RunLinkActionCATPatternsExecutor(uint64_t a1)
{
  return swift_initClassMetadata2( a1,  0LL,  0LL,  v2,  a1 + class metadata base offset for RunLinkActionCATPatternsExecutor);
}

uint64_t ObjC metadata update function for RunLinkActionCATPatternsExecutor()
{
  return type metadata accessor for RunLinkActionCATPatternsExecutor(0LL);
}

uint64_t OUTLINED_FUNCTION_6_50(uint64_t a1)
{
  return outlined assign with take of SpeakableString?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_8_56()
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, v0);
}

uint64_t OUTLINED_FUNCTION_10_38@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v3, v2);
}

uint64_t OUTLINED_FUNCTION_12_35(uint64_t a1)
{
  *(_BYTE *)(v1 + *(int *)(v2 + 20)) = v4;
  return v3(v1);
}

uint64_t OUTLINED_FUNCTION_14_42()
{
  return RunLinkActionActionPerformedParameters.asKeyValuePairs()(0x69446D6F74737563LL, 0xEC000000676F6C61LL);
}

uint64_t OUTLINED_FUNCTION_16_44@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2, v3);
}

void *OUTLINED_FUNCTION_21_33(uint64_t a1)
{
  return memcpy(v1, v2, *(void *)(*(void *)(a1 - 8) + 64LL));
}

void *OUTLINED_FUNCTION_22_33(uint64_t a1)
{
  return memcpy(v1, v2, *(void *)(*(void *)(a1 - 8) + 64LL));
}

uint64_t OUTLINED_FUNCTION_25_35()
{
  return __swift_storeEnumTagSinglePayload(v0, 0LL, 1LL, v1);
}

uint64_t OUTLINED_FUNCTION_28_25(uint64_t a1)
{
  *(_BYTE *)(v1 + *(int *)(v2 + 20)) = v4;
  return v3(v1);
}

uint64_t OUTLINED_FUNCTION_30_26()
{
  return __swift_getEnumTagSinglePayload(v0, 1LL, v1);
}

void OUTLINED_FUNCTION_33_24(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = 0x656D614E707061LL;
  a1[2].n128_u64[1] = 0xE700000000000000LL;
  outlined init with copy of AppDisplayInfo?(v2, v3, v4);
}

uint64_t OUTLINED_FUNCTION_36_27@<X0>(uint64_t a1@<X8>)
{
  *(_BYTE *)(v1 + aoutlined consume of ParsedMeasurement(v0, v1, 1) = v3;
  return v2(v1);
}

uint64_t OUTLINED_FUNCTION_39_27(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32LL))(a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_40_27()
{
  *(_BYTE *)(v0 + *(int *)(v2 + 20)) = *(_BYTE *)(v1 + *(int *)(v2 + 20));
  return v0;
}

uint64_t OUTLINED_FUNCTION_41_29()
{
  return v0;
}

unint64_t OUTLINED_FUNCTION_43_28(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
}

uint64_t OUTLINED_FUNCTION_44_19(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_45_22(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 20));
}

uint64_t OUTLINED_FUNCTION_46_29()
{
  return *(void *)(v0 + 8);
}

uint64_t OUTLINED_FUNCTION_49_22@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of SpeakableString?(a1, a2);
}

  ;
}

unint64_t OUTLINED_FUNCTION_53_23(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
}

uint64_t OUTLINED_FUNCTION_55_23()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_56_28(uint64_t a1)
{
  *uint64_t v1 = a1;
  return swift_retain(a1);
}

uint64_t OUTLINED_FUNCTION_58_22(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return swift_initStructMetadata(v6, 256LL, 3LL, va, a5);
}

uint64_t OUTLINED_FUNCTION_59_13()
{
  return type metadata accessor for RunLinkActionAutoShortcutAppEnabledParameters(0LL);
}

void OUTLINED_FUNCTION_60_16()
{
}

void *OUTLINED_FUNCTION_62_17()
{
  *(void *)(v0 + 7outlined consume of WFShowAlertFlow.State(v0, 2) = v2;
  return __swift_allocate_boxed_opaque_existential_1(v1);
}

uint64_t OUTLINED_FUNCTION_65_16()
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, v0);
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_71_13()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_72_13@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

void OUTLINED_FUNCTION_73_14(uint64_t a1)
{
}

uint64_t OUTLINED_FUNCTION_74_16()
{
  return v0(0LL);
}

uint64_t OUTLINED_FUNCTION_75_13@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of SpeakableString?(a1, a2);
}

  ;
}

uint64_t OUTLINED_FUNCTION_80_11@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = (v1 - 32) | 0x8000000000000000LL;
  return 0LL;
}

  ;
}

uint64_t OUTLINED_FUNCTION_84_16()
{
  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_85_12(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 1LL, 1LL, a1);
}

uint64_t WorkflowDataModels.EnableTCCModel.asSnippetPluginModel()@<X0>(_OWORD *a1@<X8>)
{
  __int128 v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v1[2];
  uint64_t v3 = OUTLINED_FUNCTION_97_7();
  swift_storeEnumTagMultiPayload(v3, v4, 1LL);
  __int128 v5 = *v1;
  __int128 v8 = v1[1];
  __int128 v9 = v5;
  outlined init with take of SiriWorkflowRunnerInput?( (uint64_t)(v1 + 2),  (uint64_t)v7,  (uint64_t *)&demangling cache variable for type metadata for String?);
  outlined retain of String?((uint64_t)&v9);
  outlined retain of String?((uint64_t)&v8);
  return outlined retain of String?((uint64_t)v7);
}

uint64_t type metadata accessor for WorkflowDataModels(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for WorkflowDataModels,  (uint64_t)&nominal type descriptor for WorkflowDataModels);
}

uint64_t static WorkflowDataModels.modelForCustomIntentHandled(app:intent:intentResponse:doneButtonCommand:deviceState:shortcutName:title:image:doneButtonLabel:shouldShowDoneButton:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_BYTE *)(v6 + 216) = v21;
  *(void *)(v6 + 96) = v20;
  *(_OWORD *)(v6 + 64) = v18;
  *(_OWORD *)(v6 + 80) = v19;
  *(void *)(v6 + 48) = a5;
  *(void *)(v6 + 56) = a6;
  *(void *)(v6 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = a3;
  *(void *)(v6 + 40) = a4;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = a2;
  unint64_t v7 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?)
                              - 8)
                  + 64LL)
      + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v6 + 104) = swift_task_alloc(v7);
  *(void *)(v6 + 11outlined consume of WFShowAlertFlow.State(v0, 2) = swift_task_alloc(v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  *(void *)(v6 + 120) = OUTLINED_FUNCTION_9_0(*(void *)(v8 - 8));
  uint64_t v9 = OUTLINED_FUNCTION_111_7();
  *(void *)(v6 + 128) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v6 + 136) = v10;
  *(void *)(v6 + 144) = OUTLINED_FUNCTION_9_0(v10);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  *(void *)(v6 + 15outlined consume of WFShowAlertFlow.State(v0, 2) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v6 + 160) = v12;
  *(void *)(v6 + 168) = OUTLINED_FUNCTION_9_0(v12);
  uint64_t v13 = OUTLINED_FUNCTION_166_2();
  *(void *)(v6 + 176) = v13;
  *(void *)(v6 + 184) = OUTLINED_FUNCTION_9_0(*(void *)(v13 - 8));
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v14, v15, v16);
}

uint64_t static WorkflowDataModels.modelForCustomIntentHandled(app:intent:intentResponse:doneButtonCommand:deviceState:shortcutName:title:image:doneButtonLabel:shouldShowDoneButton:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_124_7(*(void **)(v0 + 56));
  if ((v1 & 1) != 0)
  {
    __int128 v2 = *(uint64_t **)(v0 + 16);
    id v3 = [*(id *)(v0 + 32) _title];
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    void v2[3] = (uint64_t)&type metadata for WorkflowDataModels.WatchModel;
    v2[4] = (uint64_t)&protocol witness table for WorkflowDataModels.WatchModel;
    uint64_t v7 = OUTLINED_FUNCTION_123_9((uint64_t)&unk_1FDC20);
    *__int128 v2 = v7;
    *(void *)(v7 + 16) = v4;
    *(void *)(v7 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = v6;
    *(_OWORD *)(v7 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    uint64_t v9 = *(void *)(v0 + 112);
    uint64_t v8 = *(void *)(v0 + 120);
    uint64_t v10 = *(void *)(v0 + 104);
    swift_task_dealloc(*(void *)(v0 + 184));
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    uint64_t v11 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return v11();
  }

  else
  {
    uint64_t v14 = *(void **)(v0 + 32);
    uint64_t v13 = *(objc_class **)(v0 + 40);
    uint64_t v15 = *(void *)(v0 + 24);
    OUTLINED_FUNCTION_134_5( v1,  (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent,  &OBJC_CLASS___SAIntentGroupLaunchAppWithIntent_ptr);
    uint64_t v17 = v16;
    __int128 v18 = (void *)static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)(v15, v14, v13);
    *(void *)(v0 + 19outlined consume of WFShowAlertFlow.State(v0, 2) = v18;
    OUTLINED_FUNCTION_134_5( (uint64_t)v18,  &lazy cache variable for type metadata for INInteraction,  &OBJC_CLASS___INInteraction_ptr);
    id v19 = v14;
    uint64_t v20 = v13;
    v23.value.super.Class isa = v13;
    Class isa = INInteraction.__allocating_init(intent:response:)((INIntent)v19, v23).super.isa;
    *(void *)(v0 + 200) = isa;
    CodableAceObject.init(wrappedValue:)(v18, v17);
    CodableINInteraction.init(wrappedValue:)(isa);
    uint64_t v22 = (void *)swift_task_alloc(dword_21D15C);
    *(void *)(v0 + 208) = v22;
    *uint64_t v22 = v0;
    v22[1] = static WorkflowDataModels.modelForCustomIntentHandled(app:intent:intentResponse:doneButtonCommand:deviceState:shortcutName:title:image:doneButtonLabel:shouldShowDoneButton:);
    return INImage.convertToVisualProperty()(*(void *)(v0 + 120));
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_3_0(*(void *)(*(void *)v0 + 208LL));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  int *v25;
  void *boxed_opaque_existential_1;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(void);
  uint64_t v34;
  __int128 v2 = *(int **)(v0 + 176);
  uint64_t v1 = *(void *)(v0 + 184);
  id v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v7 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v9 = *(void *)(v0 + 64);
  uint64_t v8 = *(void *)(v0 + 72);
  uint64_t v34 = *(void *)(v0 + 48);
  (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 160) + 32LL))( v1,  *(void *)(v0 + 168),  *(void *)(v0 + 152));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v1 + v2[5], v3, v4);
  outlined init with take of SiriWorkflowRunnerInput?( v6,  v1 + v2[6],  &demangling cache variable for type metadata for VisualProperty?);
  uint64_t v10 = (void *)(v1 + v2[7]);
  *uint64_t v10 = v9;
  v10[1] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
  uint64_t v11 = OUTLINED_FUNCTION_125_0(v7, 1LL);
  uint64_t v13 = *(void **)(v0 + 192);
  uint64_t v12 = *(void **)(v0 + 200);
  if (v34)
  {
    uint64_t v15 = *(void *)(v0 + 104);
    uint64_t v14 = *(void *)(v0 + 112);
    uint64_t v16 = *(void **)(v0 + 48);
    OUTLINED_FUNCTION_134_5( v11,  &lazy cache variable for type metadata for SAStartLocalRequest,  &OBJC_CLASS___SAStartLocalRequest_ptr);
    __int128 v18 = v17;
    OUTLINED_FUNCTION_9_4();
    CodableAceObject.init(wrappedValue:)(v16, v18);

    outlined destroy of Result<Output, Error>( v14,  &demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
    OUTLINED_FUNCTION_125_0(v15, 0LL);
    outlined init with take of SiriWorkflowRunnerInput?( v15,  v14,  &demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
  }

  else
  {
    swift_bridgeObjectRetain(*(void *)(v0 + 72));
  }

  id v19 = *(void *)(v0 + 184);
  uint64_t v20 = *(void *)(v0 + 112);
  char v21 = *(_BYTE *)(v0 + 216);
  INIntentResponse_optional v23 = *(void *)(v0 + 88);
  uint64_t v22 = *(void *)(v0 + 96);
  uint64_t v24 = *(void **)(v0 + 16);
  unint64_t v25 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0LL);
  v24[3] = v25;
  void v24[4] = &protocol witness table for WorkflowDataModels.CustomIntentHandledModel;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v24);
  outlined init with take of VoiceCommandTask( v19,  (uint64_t)boxed_opaque_existential_1,  type metadata accessor for WorkflowDataModels.CustomIntentModel);
  uint64_t v27 = (void *)((char *)boxed_opaque_existential_1 + v25[5]);
  *uint64_t v27 = v23;
  v27[1] = v22;
  outlined init with take of SiriWorkflowRunnerInput?( v20,  (uint64_t)boxed_opaque_existential_1 + v25[6],  &demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
  *((_BYTE *)boxed_opaque_existential_1 + v25[7]) = v21;
  uint64_t v28 = *(void *)(v0 + 144);
  uint64_t v30 = *(void *)(v0 + 112);
  uint64_t v29 = *(void *)(v0 + 120);
  uint64_t v31 = *(void *)(v0 + 104);
  OUTLINED_FUNCTION_5_14();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  uint64_t v32 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_16_0(v32);
}

uint64_t type metadata accessor for WorkflowDataModels.CustomIntentModel(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for WorkflowDataModels.CustomIntentModel,  (uint64_t)&nominal type descriptor for WorkflowDataModels.CustomIntentModel);
}

INInteraction __swiftcall INInteraction.__allocating_init(intent:response:)( INIntent intent, INIntentResponse_optional response)
{
  Class isa = response.value.super.isa;
  [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithIntent:intent.super.isa response:response.value.super.isa];

  OUTLINED_FUNCTION_2();
  return result;
}

uint64_t WorkflowDataModels.ConfirmActionModel.init(appBundleId:appDisplayName:confirmLabel:noLabel:archivedViewData:isDestructive:prompt:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  *(void *)a9 = result;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = a4;
  *(void *)(a9 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(void *)(a9 + 64) = a10;
  *(void *)(a9 + 7outlined consume of WFShowAlertFlow.State(v0, 2) = a11;
  *(_BYTE *)(a9 + 80) = a12;
  *(void *)(a9 + 88) = a13;
  *(void *)(a9 + 96) = a14;
  return result;
}

void *WorkflowDataModels.ConfirmActionModel.asSnippetPluginModel()@<X0>(uint64_t a1@<X8>)
{
  __int128 v2 = (void *)OUTLINED_FUNCTION_169_0(a1);
  memcpy(v2, v3, 0x68uLL);
  uint64_t v4 = OUTLINED_FUNCTION_97_7();
  swift_storeEnumTagMultiPayload(v4, v5, 5LL);
  return outlined retain of WorkflowDataModels.ConfirmActionModel(v1);
}

uint64_t WorkflowDataModels.DisambiguationItemModel.__allocating_init(title:subtitle:thumbnail:invocationCommand:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v16 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  uint64_t v17 = OUTLINED_FUNCTION_212();
  WorkflowDataModels.DisambiguationItemModel.init(title:subtitle:thumbnail:invocationCommand:)( v17,  v18,  a3,  a4,  a5,  a6,  a7,  a8,  a9);
  return v16;
}

double WorkflowDataModels.DisambiguateItemsModel.asSnippetPluginModel()@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return WorkflowDataModels.DisambiguateItemsModel.asSnippetPluginModel()(a1, a2, a3, 7LL, a4);
}

uint64_t WorkflowDataModels.CustomIntentErrorModel.init(openAppButtonLabel:appPunchOut:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  uint64_t v5 = (uint64_t)a4 + *(int *)(type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0LL) + 20);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  return OUTLINED_FUNCTION_51_28(v5, a3, v6, *(uint64_t (**)(void))(*(void *)(v6 - 8) + 32LL));
}

uint64_t WorkflowDataModels.CustomIntentErrorModel.asSnippetPluginModel()@<X0>(uint64_t a1@<X8>)
{
  return WorkflowDataModels.CustomIntentErrorModel.asSnippetPluginModel()( type metadata accessor for WorkflowDataModels.CustomIntentErrorModel,  3LL,  a1);
}

uint64_t WorkflowDataModels.LinkActionModel.asSnippetPluginModel()@<X0>(_OWORD *a1@<X8>)
{
  return WorkflowDataModels.LinkActionModel.asSnippetPluginModel()( (uint64_t (*)(void))outlined retain of WorkflowDataModels.LinkActionModel,  a1);
}

uint64_t static WorkflowDataModels.modelForShowAlert(deviceState:shortcutName:confirmLabel:cancelLabel:title:message:)( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8)
{
  return swift_task_switch(v8, v9, v10);
}

uint64_t static WorkflowDataModels.modelForShowAlert(deviceState:shortcutName:confirmLabel:cancelLabel:title:message:)()
{
  if ((OUTLINED_FUNCTION_124_7(*(void **)(v0 + 24)) & 1) != 0)
  {
    uint64_t v2 = *(void *)(v0 + 64);
    uint64_t v1 = *(void *)(v0 + 72);
    __int128 v13 = *(_OWORD *)(v0 + 32);
    __int128 v15 = *(_OWORD *)(v0 + 48);
    id v3 = *(uint64_t **)(v0 + 16);
    v3[3] = (uint64_t)&type metadata for WorkflowDataModels.WatchModel;
    void v3[4] = (uint64_t)&protocol witness table for WorkflowDataModels.WatchModel;
    uint64_t v4 = OUTLINED_FUNCTION_123_9((uint64_t)&unk_1FDC20);
    *id v3 = v4;
    *(_OWORD *)(v4 + 16) = v13;
    *(_OWORD *)(v4 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = v15;
    *(void *)(v4 + 48) = v2;
    *(void *)(v4 + 56) = v1;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
  }

  else
  {
    uint64_t v5 = *(void *)(v0 + 104);
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v7 = *(void *)(v0 + 96);
    uint64_t v8 = *(void *)(v0 + 80);
    __int128 v14 = *(_OWORD *)(v0 + 48);
    __int128 v16 = *(_OWORD *)(v0 + 64);
    uint64_t v9 = *(uint64_t **)(v0 + 16);
    v9[3] = (uint64_t)&type metadata for WorkflowDataModels.ShowAlertModel;
    v9[4] = (uint64_t)&protocol witness table for WorkflowDataModels.ShowAlertModel;
    uint64_t v10 = swift_allocObject(&unk_1FDC48, 80LL, 7LL);
    *uint64_t v9 = v10;
    *(_OWORD *)(v10 + 16) = v14;
    *(_OWORD *)(v10 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = v16;
    *(void *)(v10 + 48) = v8;
    *(void *)(v10 + 56) = v6;
    *(void *)(v10 + 64) = v7;
    *(void *)(v10 + 7outlined consume of WFShowAlertFlow.State(v0, 2) = v5;
    OUTLINED_FUNCTION_17_1();
  }

  uint64_t v11 = *(void *)(v0 + 72);
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  swift_bridgeObjectRetain(*(void *)(v0 + 56));
  swift_bridgeObjectRetain(v11);
  OUTLINED_FUNCTION_17_1();
  return v17();
}

uint64_t static WorkflowDataModels.getThumbnail(imageData:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = type metadata accessor for ImageElement.ImageStyle(0LL);
  OUTLINED_FUNCTION_152_1();
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_27_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageElement.AspectRatio?);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v10);
  uint64_t v11 = OUTLINED_FUNCTION_71_14();
  uint64_t v21 = type metadata accessor for ImageElement(v11);
  uint64_t v12 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v13 = OUTLINED_FUNCTION_118_8();
  uint64_t v14 = type metadata accessor for ImageElement.AspectRatio(v13);
  __swift_storeEnumTagSinglePayload(v6, 1LL, 1LL, v14);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))( v4,  enum case for ImageElement.ImageStyle.default(_:),  v8);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_ProtoIdiom>);
  uint64_t v16 = type metadata accessor for _ProtoIdiom(0LL);
  OUTLINED_FUNCTION_99_4();
  uint64_t v19 = swift_allocObject(v15, v17, v18);
  *(_OWORD *)(v19 + 16) = xmmword_17E650;
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v19 + v5, enum case for _ProtoIdiom.default(_:), v16);
  specialized Set.init(_nonEmptyArrayLiteral:)(v19);
  static ImageElement.pngData(_:darkModeData:imageStyle:aspectRatio:fixedWidth:fixedHeight:idioms:)( a1,  a2,  0LL,  0xF000000000000000LL,  v4,  v6,  2LL,  2LL);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v8);
  outlined destroy of Result<Output, Error>( v6,  &demangling cache variable for type metadata for ImageElement.AspectRatio?);
  ImageElement.convertToVisualProperty()();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v7, v21);
}

void __swiftcall WorkflowDataModels.AutoShortcutFirstRunModel.init(viewModel:confirmLabel:cancelLabel:)( SiriLinkFlowPlugin::WorkflowDataModels::AutoShortcutFirstRunModel *__return_ptr retstr, SiriLinkFlowPlugin::AutoShortcutAppPhrasesViewModel *viewModel, Swift::String confirmLabel, Swift::String cancelLabel)
{
  __int128 v4 = *(_OWORD *)&viewModel->bundleId._object;
  unint64_t object = viewModel->prompt._object;
  retstr->viewModel.shortcutPhrases._rawValue = viewModel->shortcutPhrases._rawValue;
  *(_OWORD *)&retstr->viewModel.maxPhrases = *(_OWORD *)&viewModel->maxPhrases;
  *(_OWORD *)&retstr->viewModel.bundleId._unint64_t object = v4;
  retstr->viewModel.prompt._unint64_t object = object;
  Swift::String_optional footnoteLabel = viewModel->footnoteLabel;
  retstr->viewModel.moreShortcutsLabel = viewModel->moreShortcutsLabel;
  retstr->viewModel.Swift::String_optional footnoteLabel = footnoteLabel;
  retstr->confirmLabel = confirmLabel;
  retstr->cancelLabel = cancelLabel;
}

uint64_t *WorkflowDataModels.AutoShortcutFirstRunModel.asSnippetPluginModel()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)OUTLINED_FUNCTION_169_0(a1);
  memcpy(v2, v3, 0x70uLL);
  uint64_t v4 = OUTLINED_FUNCTION_97_7();
  swift_storeEnumTagMultiPayload(v4, v5, 12LL);
  return outlined retain of WorkflowDataModels.AutoShortcutFirstRunModel(v1);
}

uint64_t static WorkflowDataModels.modelForCustomIntentConfirmation(app:intent:intentResponse:deviceState:confirmLabel:cancelLabel:title:image:)( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  v8[14] = OUTLINED_FUNCTION_9_0(*(void *)(v9 - 8));
  uint64_t v10 = OUTLINED_FUNCTION_111_7();
  v8[15] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v8[16] = v11;
  v8[17] = OUTLINED_FUNCTION_9_0(v11);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  v8[18] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v8[19] = v13;
  v8[20] = OUTLINED_FUNCTION_9_0(v13);
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v14, v15, v16);
}

uint64_t static WorkflowDataModels.modelForCustomIntentConfirmation(app:intent:intentResponse:deviceState:confirmLabel:cancelLabel:title:image:)( uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *(void **)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  OUTLINED_FUNCTION_134_5( a1,  (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent,  &OBJC_CLASS___SAIntentGroupLaunchAppWithIntent_ptr);
  uint64_t v7 = v6;
  uint64_t v8 = (void *)static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)(v5, v4, v2);
  *(void *)(v1 + 168) = v8;
  uint64_t v9 = v3[3];
  uint64_t v10 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v9);
  uint64_t v11 = dispatch thunk of DeviceState.isWatch.getter(v9, v10);
  if ((v11 & 1) != 0)
  {
    uint64_t v13 = *(void *)(v1 + 72);
    uint64_t v12 = *(void *)(v1 + 80);
    uint64_t v15 = *(void *)(v1 + 56);
    uint64_t v14 = *(void *)(v1 + 64);
    uint64_t v16 = *(uint64_t **)(v1 + 16);
    id v17 = [*(id *)(v1 + 32) _title];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    __n128 v16[3] = (uint64_t)&type metadata for WorkflowDataModels.WatchModel;
    v16[4] = (uint64_t)&protocol witness table for WorkflowDataModels.WatchModel;
    uint64_t v21 = OUTLINED_FUNCTION_123_9((uint64_t)&unk_1FDC20);
    *uint64_t v16 = v21;
    OUTLINED_FUNCTION_5_14();
    OUTLINED_FUNCTION_17_1();

    *(void *)(v21 + 16) = v18;
    *(void *)(v21 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = v20;
    *(void *)(v21 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = v15;
    *(void *)(v21 + 40) = v14;
    *(void *)(v21 + 48) = v13;
    *(void *)(v21 + 56) = v12;
    *(_OWORD *)(v21 + 64) = 0u;
    *(_OWORD *)(v21 + 80) = 0u;
    OUTLINED_FUNCTION_172_0();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    uint64_t v22 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_16_0(v22);
  }

  else
  {
    unint64_t v25 = *(void **)(v1 + 32);
    uint64_t v24 = *(objc_class **)(v1 + 40);
    OUTLINED_FUNCTION_134_5( v11,  &lazy cache variable for type metadata for INInteraction,  &OBJC_CLASS___INInteraction_ptr);
    unint64_t v26 = v24;
    id v27 = v25;
    v30.value.super.Class isa = v24;
    Class isa = INInteraction.__allocating_init(intent:response:)((INIntent)v27, v30).super.isa;
    *(void *)(v1 + 176) = isa;
    CodableAceObject.init(wrappedValue:)(v8, v7);
    CodableINInteraction.init(wrappedValue:)(isa);
    uint64_t v29 = (void *)swift_task_alloc(dword_21D15C);
    *(void *)(v1 + 184) = v29;
    *uint64_t v29 = v1;
    v29[1] = static WorkflowDataModels.modelForCustomIntentConfirmation(app:intent:intentResponse:deviceState:confirmLabel:cancelLabel:title:image:);
    return INImage.convertToVisualProperty()(*(void *)(v1 + 112));
  }

uint64_t static WorkflowDataModels.modelForCustomIntentConfirmation(app:intent:intentResponse:deviceState:confirmLabel:cancelLabel:title:image:)()
{
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char *boxed_opaque_existential_1;
  int *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t (*v16)(void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v1 = *(void **)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 128);
  uint64_t v18 = *(void *)(v0 + 120);
  uint64_t v19 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 80);
  uint64_t v22 = *(void *)(v0 + 88);
  INIntentResponse_optional v23 = *(void *)(v0 + 72);
  uint64_t v8 = *(void *)(v0 + 64);
  uint64_t v20 = *(void *)(v0 + 112);
  uint64_t v21 = *(void *)(v0 + 56);
  uint64_t v9 = *(void **)(v0 + 16);

  uint64_t v10 = OUTLINED_FUNCTION_228();
  v9[3] = v10;
  v9[4] = &protocol witness table for WorkflowDataModels.CustomIntentConfirmationModel;
  boxed_opaque_existential_1 = (char *)__swift_allocate_boxed_opaque_existential_1(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(boxed_opaque_existential_1, v2, v4);
  uint64_t v12 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(&boxed_opaque_existential_1[v12[5]], v19, v18);
  outlined init with take of SiriWorkflowRunnerInput?( v20,  (uint64_t)&boxed_opaque_existential_1[v12[6]],  &demangling cache variable for type metadata for VisualProperty?);
  uint64_t v13 = &boxed_opaque_existential_1[v12[7]];
  *(void *)uint64_t v13 = v22;
  *((void *)v13 + outlined consume of ParsedMeasurement(v0, v1, 1) = v6;
  uint64_t v14 = &boxed_opaque_existential_1[*(int *)(v10 + 20)];
  *(void *)uint64_t v14 = v21;
  *((void *)v14 + outlined consume of ParsedMeasurement(v0, v1, 1) = v8;
  uint64_t v15 = &boxed_opaque_existential_1[*(int *)(v10 + 24)];
  *(void *)uint64_t v15 = v23;
  *((void *)v15 + outlined consume of ParsedMeasurement(v0, v1, 1) = v7;
  OUTLINED_FUNCTION_5_14();
  swift_bridgeObjectRetain(v7);
  OUTLINED_FUNCTION_17_1();
  OUTLINED_FUNCTION_172_0();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  uint64_t v16 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return v16();
}

__n128 WorkflowDataModels.LinkConfirmationModel.init(linkModel:confirmLabel:cancelLabel:isDestructive:)@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a7 = *(void *)a1;
  *(void *)(a7 + 8) = v7;
  __int128 v8 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a7 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a7 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = v8;
  __n128 result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a7 + 48) = result;
  *(void *)(a7 + 64) = a2;
  *(void *)(a7 + 7outlined consume of WFShowAlertFlow.State(v0, 2) = a3;
  *(void *)(a7 + 80) = a4;
  *(void *)(a7 + 88) = a5;
  *(_BYTE *)(a7 + 96) = a6;
  return result;
}

void *WorkflowDataModels.LinkConfirmationModel.asSnippetPluginModel()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)OUTLINED_FUNCTION_169_0(a1);
  memcpy(v2, v3, 0x61uLL);
  uint64_t v4 = OUTLINED_FUNCTION_97_7();
  swift_storeEnumTagMultiPayload(v4, v5, 10LL);
  return outlined retain of WorkflowDataModels.LinkConfirmationModel(v1);
}

uint64_t AutoShortcutAppPhrasesViewModel.asSnippetPluginModel()@<X0>(void *a1@<X8>)
{
  return AutoShortcutAppPhrasesViewModel.asSnippetPluginModel()( (uint64_t (*)(void))outlined retain of AutoShortcutAppPhrasesViewModel,  a1);
}

void *WorkflowDataModels.bundleName.unsafeMutableAddressor()
{
  return &static WorkflowDataModels.bundleName;
}

unint64_t static WorkflowDataModels.bundleName.getter()
{
  return 0xD000000000000010LL;
}

uint64_t WorkflowDataModels.ShowAlertModel.asSnippetPluginModel()@<X0>(_OWORD *a1@<X8>)
{
  return WorkflowDataModels.LinkActionModel.asSnippetPluginModel()( (uint64_t (*)(void))outlined retain of WorkflowDataModels.ShowAlertModel,  a1);
}

uint64_t WorkflowDataModels.LinkActionModel.asSnippetPluginModel()@<X0>( uint64_t (*a1)(void)@<X1>, _OWORD *a2@<X8>)
{
  __int128 v3 = v2[1];
  *a2 = *v2;
  a2[1] = v3;
  __int128 v4 = v2[3];
  a2[2] = v2[2];
  a2[3] = v4;
  uint64_t v5 = type metadata accessor for WorkflowDataModels(0LL);
  OUTLINED_FUNCTION_165_2(v5);
  return OUTLINED_FUNCTION_92_6((uint64_t)v2, a1);
}

uint64_t WorkflowDataModels.ShowAlertModel.CodingKeys.init(stringValue:)(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x4C6D7269666E6F63LL && a2 == 0xEC0000006C656261LL)
  {
    unint64_t v5 = 0xEC0000006C656261LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4C6D7269666E6F63LL, 0xEC0000006C656261LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x614C6C65636E6163LL && a2 == 0xEB000000006C6562LL)
  {
    unint64_t v8 = 0xEB000000006C6562LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614C6C65636E6163LL, 0xEB000000006C6562LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x656C746974LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v10 = 0xE500000000000000LL;
    goto LABEL_24;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2LL;
  }

  if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
    return 3LL;
  }

  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6567617373656DLL, 0xE700000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t WorkflowDataModels.ShowAlertModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_14AF78 + 4 * byte_18B020[a1]))( 0x4C6D7269666E6F63LL,  0xEC0000006C656261LL);
}

uint64_t sub_14AF78()
{
  return 0x614C6C65636E6163LL;
}

uint64_t sub_14AF98()
{
  return 0x656C746974LL;
}

uint64_t sub_14AFAC()
{
  return 0x6567617373656DLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.ShowAlertModel.CodingKeys()
{
  return WorkflowDataModels.ShowAlertModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.ShowAlertModel.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.ShowAlertModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.ShowAlertModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.ShowAlertModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.ShowAlertModel.encode(to:)()
{
  unint64_t v4 = lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys();
  OUTLINED_FUNCTION_4_51((uint64_t)&unk_1FF628, v5, v4);
  uint64_t v6 = *v1;
  uint64_t v7 = v1[1];
  char v17 = 0;
  OUTLINED_FUNCTION_15_13(v6, v7, (uint64_t)&v17);
  if (!v0)
  {
    uint64_t v8 = v1[2];
    uint64_t v9 = v1[3];
    char v16 = 1;
    OUTLINED_FUNCTION_15_13(v8, v9, (uint64_t)&v16);
    uint64_t v10 = v1[4];
    uint64_t v11 = v1[5];
    char v15 = 2;
    OUTLINED_FUNCTION_3_36(v10, v11, (uint64_t)&v15);
    uint64_t v12 = v1[6];
    uint64_t v13 = v1[7];
    char v14 = 3;
    OUTLINED_FUNCTION_15_13(v12, v13, (uint64_t)&v14);
  }

  OUTLINED_FUNCTION_13_35(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_90_9();
  OUTLINED_FUNCTION_1_29();
}

void WorkflowDataModels.ShowAlertModel.init(from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  a22 = v26;
  a23 = v27;
  OUTLINED_FUNCTION_150_2();
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.ShowAlertModel.CodingKeys>);
  OUTLINED_FUNCTION_69_12();
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v48 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  OUTLINED_FUNCTION_100_5();
  unint64_t v32 = lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys();
  OUTLINED_FUNCTION_77_15((uint64_t)&unk_1FF628, v33, v32);
  if (v24)
  {
    OUTLINED_FUNCTION_51_13();
  }

  else
  {
    uint64_t v34 = OUTLINED_FUNCTION_204_0();
    uint64_t v35 = OUTLINED_FUNCTION_59_14(v34, v28);
    uint64_t v37 = v36;
    uint64_t v52 = v35;
    a13 = 1;
    OUTLINED_FUNCTION_37_21(v35, v36);
    uint64_t v38 = OUTLINED_FUNCTION_59_14((uint64_t)&a13, v28);
    uint64_t v53 = v39;
    uint64_t v51 = v38;
    OUTLINED_FUNCTION_103_5();
    OUTLINED_FUNCTION_37_21(v40, v41);
    uint64_t v49 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&a12, v28);
    uint64_t v50 = v42;
    a11 = 3;
    OUTLINED_FUNCTION_37_21(v49, v42);
    OUTLINED_FUNCTION_59_14((uint64_t)&a11, v28);
    OUTLINED_FUNCTION_181_1();
    uint64_t v44 = v43;
    OUTLINED_FUNCTION_85_6((uint64_t)v31, v45);
    OUTLINED_FUNCTION_9_4();
    uint64_t v46 = v53;
    OUTLINED_FUNCTION_11_11();
    OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_69();
    __swift_destroy_boxed_opaque_existential_1Tm(v23);
    OUTLINED_FUNCTION_20();
    uint64_t v47 = v50;
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_1_2();
    *unint64_t v25 = v52;
    v25[1] = v37;
    __int128 v25[2] = v51;
    v25[3] = v46;
    void v25[4] = v49;
    uint64_t v25[5] = v47;
    v25[6] = v44;
    v25[7] = (uint64_t)v31;
  }

  OUTLINED_FUNCTION_113_6();
  OUTLINED_FUNCTION_13_8();
}

uint64_t protocol witness for SnippetPluginModelProviding.asSnippetPluginModel() in conformance WorkflowDataModels.ShowAlertModel@<X0>( _OWORD *a1@<X8>)
{
  return WorkflowDataModels.ShowAlertModel.asSnippetPluginModel()(a1);
}

double protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.ShowAlertModel@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>)
{
  if (!v9)
  {
    *a9 = v13;
    a9[1] = v16;
    double result = *(double *)&v19;
    a9[2] = v19;
    a9[3] = v22;
  }

  return result;
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.ShowAlertModel()
{
}

uint64_t WorkflowDataModels.EnableTCCModel.CodingKeys.init(stringValue:)(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x4C6D7269666E6F63LL && a2 == 0xEC0000006C656261LL)
  {
    unint64_t v5 = 0xEC0000006C656261LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4C6D7269666E6F63LL, 0xEC0000006C656261LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x614C6C65636E6163LL && a2 == 0xEB000000006C6562LL)
  {
    unint64_t v8 = 0xEB000000006C6562LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614C6C65636E6163LL, 0xEB000000006C6562LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x74706D6F7270LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 2LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74706D6F7270LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t WorkflowDataModels.EnableTCCModel.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x4C6D7269666E6F63LL;
  }
  if (a1 == 1) {
    return 0x614C6C65636E6163LL;
  }
  return 0x74706D6F7270LL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.EnableTCCModel.CodingKeys()
{
  return WorkflowDataModels.EnableTCCModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.EnableTCCModel.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.EnableTCCModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.EnableTCCModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.EnableTCCModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.EnableTCCModel.encode(to:)()
{
  unint64_t v4 = lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys();
  OUTLINED_FUNCTION_4_51((uint64_t)&unk_1FF598, v5, v4);
  uint64_t v6 = *v1;
  uint64_t v7 = v1[1];
  char v14 = 0;
  OUTLINED_FUNCTION_15_13(v6, v7, (uint64_t)&v14);
  if (!v0)
  {
    uint64_t v8 = v1[2];
    uint64_t v9 = v1[3];
    char v13 = 1;
    OUTLINED_FUNCTION_15_13(v8, v9, (uint64_t)&v13);
    uint64_t v10 = v1[4];
    uint64_t v11 = v1[5];
    char v12 = 2;
    OUTLINED_FUNCTION_3_36(v10, v11, (uint64_t)&v12);
  }

  OUTLINED_FUNCTION_13_35(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_90_9();
  OUTLINED_FUNCTION_1_29();
}

void WorkflowDataModels.EnableTCCModel.init(from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int128 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  a18 = v21;
  a19 = v22;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.EnableTCCModel.CodingKeys>);
  OUTLINED_FUNCTION_69_12();
  __chkstk_darwin(v28);
  OUTLINED_FUNCTION_38_14();
  uint64_t v29 = v24[3];
  __swift_project_boxed_opaque_existential_1(v24, v29);
  lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys();
  OUTLINED_FUNCTION_180_1();
  OUTLINED_FUNCTION_136_1(v30, v31, v32, v29);
  if (v19)
  {
    OUTLINED_FUNCTION_51_13();
  }

  else
  {
    uint64_t v33 = OUTLINED_FUNCTION_204_0();
    uint64_t v34 = OUTLINED_FUNCTION_40_14(v33);
    uint64_t v36 = v35;
    uint64_t v44 = v34;
    BYTE6(a10) = 1;
    OUTLINED_FUNCTION_37_21(v34, v35);
    uint64_t v37 = OUTLINED_FUNCTION_40_14((uint64_t)&a10 + 6);
    uint64_t v39 = v38;
    uint64_t v43 = v37;
    OUTLINED_FUNCTION_103_5();
    OUTLINED_FUNCTION_17_1();
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)((char *)&a10 + 5, v27);
    OUTLINED_FUNCTION_181_1();
    uint64_t v41 = v40;
    OUTLINED_FUNCTION_9_8(v20, v42);
    OUTLINED_FUNCTION_17_1();
    __swift_destroy_boxed_opaque_existential_1Tm(v24);
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_69();
    *uint64_t v26 = v44;
    v26[1] = v36;
    __int128 v26[2] = v43;
    v26[3] = v39;
    void v26[4] = v41;
    v26[5] = v20;
  }

  OUTLINED_FUNCTION_179_0();
  OUTLINED_FUNCTION_13_8();
}

uint64_t protocol witness for SnippetPluginModelProviding.asSnippetPluginModel() in conformance WorkflowDataModels.EnableTCCModel@<X0>( _OWORD *a1@<X8>)
{
  return WorkflowDataModels.EnableTCCModel.asSnippetPluginModel()(a1);
}

#error "14B88C: call analysis failed (funcsize=16)"
void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.EnableTCCModel()
{
  WorkflowDataModels.EnableTCCModel.encode(to:)();
}

uint64_t WorkflowDataModels.WatchModel.viewType.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_226_1();
  outlined copy of WatchViewType(v0, v1, v2, v3);
  return OUTLINED_FUNCTION_226_1();
}

void WorkflowDataModels.WatchModel.confirmLabel.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  OUTLINED_FUNCTION_2();
}

void WorkflowDataModels.WatchModel.cancelLabel.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 7outlined consume of WFShowAlertFlow.State(v0, 2) = a2;
  OUTLINED_FUNCTION_2();
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *CustomIntentStateAttachment.pageSize.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

uint64_t WorkflowDataModels.WatchModel.asSnippetPluginModel()@<X0>(void *a1@<X8>)
{
  return AutoShortcutAppPhrasesViewModel.asSnippetPluginModel()( (uint64_t (*)(void))outlined retain of WorkflowDataModels.WatchModel,  a1);
}

uint64_t AutoShortcutAppPhrasesViewModel.asSnippetPluginModel()@<X0>(uint64_t (*a1)(void)@<X1>, void *a2@<X8>)
{
  uint64_t v3 = type metadata accessor for WorkflowDataModels(0LL);
  OUTLINED_FUNCTION_165_2(v3);
  return OUTLINED_FUNCTION_92_6((uint64_t)v2, a1);
}

uint64_t WorkflowDataModels.WatchModel.CodingKeys.init(stringValue:)(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x74756374726F6873LL && a2 == 0xEC000000656D614ELL)
  {
    unint64_t v5 = 0xEC000000656D614ELL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74756374726F6873LL, 0xEC000000656D614ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6570795477656976LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v8 = 0xE800000000000000LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6570795477656976LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x4C6D7269666E6F63LL && a2 == 0xEC0000006C656261LL)
  {
    unint64_t v10 = 0xEC0000006C656261LL;
    goto LABEL_24;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4C6D7269666E6F63LL, 0xEC0000006C656261LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2LL;
  }

  if (a1 == 0x614C6C65636E6163LL && a2 == 0xEB000000006C6562LL)
  {
    swift_bridgeObjectRelease(0xEB000000006C6562LL);
    return 3LL;
  }

  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x614C6C65636E6163LL, 0xEB000000006C6562LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t WorkflowDataModels.WatchModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_14BBE8 + 4 * byte_18B024[a1]))( 0x74756374726F6873LL,  0xEC000000656D614ELL);
}

uint64_t sub_14BBE8()
{
  return 0x6570795477656976LL;
}

uint64_t sub_14BC00()
{
  return 0x4C6D7269666E6F63LL;
}

uint64_t sub_14BC20()
{
  return 0x614C6C65636E6163LL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.WatchModel.CodingKeys()
{
  return WorkflowDataModels.WatchModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.WatchModel.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.WatchModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.WatchModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.WatchModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.WatchModel.encode(to:)()
{
  unint64_t v5 = lazy protocol witness table accessor for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys();
  OUTLINED_FUNCTION_4_51((uint64_t)&unk_1FF508, v6, v5);
  uint64_t v7 = *(void *)v2;
  uint64_t v8 = *(void *)(v2 + 8);
  LOBYTE(v14[0]) = 0;
  OUTLINED_FUNCTION_3_36(v7, v8, (uint64_t)v14);
  if (!v1)
  {
    outlined init with take of Any((_OWORD *)(v2 + 16), &v15);
    outlined init with take of Any(&v15, v14);
    char v13 = 1;
    lazy protocol witness table accessor for type WatchViewType and conformance WatchViewType();
    OUTLINED_FUNCTION_44_20((uint64_t)v14, (uint64_t)&v13, v0);
    uint64_t v9 = *(void *)(v2 + 48);
    uint64_t v10 = *(void *)(v2 + 56);
    LOBYTE(v14[0]) = 2;
    OUTLINED_FUNCTION_3_36(v9, v10, (uint64_t)v14);
    uint64_t v11 = *(void *)(v2 + 64);
    uint64_t v12 = *(void *)(v2 + 72);
    LOBYTE(v14[0]) = 3;
    OUTLINED_FUNCTION_3_36(v11, v12, (uint64_t)v14);
  }

  OUTLINED_FUNCTION_13_35(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_90_9();
  OUTLINED_FUNCTION_1_29();
}

void WorkflowDataModels.WatchModel.init(from:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.WatchModel.CodingKeys>);
  OUTLINED_FUNCTION_69_12();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  OUTLINED_FUNCTION_100_5();
  unint64_t v7 = lazy protocol witness table accessor for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys();
  OUTLINED_FUNCTION_77_15((uint64_t)&unk_1FF508, v8, v7);
  if (v1)
  {
    OUTLINED_FUNCTION_51_13();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_69();
  }

  else
  {
    LOBYTE(v39) = 0;
    uint64_t v9 = OUTLINED_FUNCTION_114_5((uint64_t)&v39, v3);
    uint64_t v11 = v10;
    lazy protocol witness table accessor for type WatchViewType and conformance WatchViewType();
    OUTLINED_FUNCTION_9_4();
    OUTLINED_FUNCTION_223_0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v12, v13, v14, v15);
    uint64_t v32 = v9;
    uint64_t v37 = v11;
    uint64_t v16 = v39;
    uint64_t v17 = v42;
    LOBYTE(v39) = 2;
    uint64_t v34 = v16;
    uint64_t v35 = v40;
    uint64_t v36 = v41;
    outlined copy of WatchViewType(v16, v40, v41, v42);
    uint64_t v33 = 0LL;
    uint64_t v18 = OUTLINED_FUNCTION_114_5((uint64_t)&v39, v3);
    uint64_t v38 = v17;
    uint64_t v20 = v19;
    uint64_t v31 = v18;
    LOBYTE(v39) = 3;
    OUTLINED_FUNCTION_37_21(v18, v19);
    OUTLINED_FUNCTION_114_5((uint64_t)&v39, v3);
    OUTLINED_FUNCTION_181_1();
    uint64_t v33 = v21;
    OUTLINED_FUNCTION_85_6((uint64_t)v6, v22);
    OUTLINED_FUNCTION_17_1();
    swift_bridgeObjectRelease();
    uint64_t v23 = v37;
    OUTLINED_FUNCTION_9_4();
    uint64_t v30 = v6;
    uint64_t v24 = v34;
    uint64_t v25 = v35;
    uint64_t v26 = v36;
    uint64_t v27 = v38;
    outlined copy of WatchViewType(v34, v35, v36, v38);
    OUTLINED_FUNCTION_126_6();
    OUTLINED_FUNCTION_1_2();
    __swift_destroy_boxed_opaque_existential_1Tm(v0);
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_126_6();
    uint64_t v28 = v30;
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_69();
    *uint64_t v2 = v32;
    v2[1] = v23;
    v2[2] = v24;
    void v2[3] = v25;
    v2[4] = v26;
    v2[5] = v27;
    v2[6] = v31;
    v2[7] = v20;
    _BYTE v2[8] = v33;
    v2[9] = (uint64_t)v28;
  }

  OUTLINED_FUNCTION_113_6();
  OUTLINED_FUNCTION_13_8();
}

uint64_t protocol witness for SnippetPluginModelProviding.asSnippetPluginModel() in conformance WorkflowDataModels.WatchModel@<X0>( void *a1@<X8>)
{
  return WorkflowDataModels.WatchModel.asSnippetPluginModel()(a1);
}

void protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.WatchModel(void *a1@<X8>)
{
  if (!v1) {
    memcpy(a1, v3, 0x50uLL);
  }
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.WatchModel()
{
}

uint64_t WorkflowDataModels.CustomIntentModel.appPunchOut.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_45();
  return OUTLINED_FUNCTION_51_28(v0, v1, v2, v3);
}

uint64_t WorkflowDataModels.CustomIntentModel.interaction.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_45();
  return OUTLINED_FUNCTION_51_28(v0, v1, v2, v3);
}

void WorkflowDataModels.CustomIntentModel.image.getter(uint64_t a1@<X8>)
{
}

void WorkflowDataModels.CustomIntentModel.title.getter()
{
}

uint64_t WorkflowDataModels.CustomIntentModel.CodingKeys.init(stringValue:)(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x68636E7550707061LL && a2 == 0xEB0000000074754FLL)
  {
    unint64_t v5 = 0xEB0000000074754FLL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x68636E7550707061LL, 0xEB0000000074754FLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x7463617265746E69LL && a2 == 0xEB000000006E6F69LL)
  {
    unint64_t v8 = 0xEB000000006E6F69LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7463617265746E69LL, 0xEB000000006E6F69LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x6567616D69LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v10 = 0xE500000000000000LL;
    goto LABEL_24;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6567616D69LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2LL;
  }

  if (a1 == 0x656C746974LL && a2 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease(0xE500000000000000LL);
    return 3LL;
  }

  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974LL, 0xE500000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t WorkflowDataModels.CustomIntentModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_14C3D4 + 4 * byte_18B028[a1]))( 0x68636E7550707061LL,  0xEB0000000074754FLL);
}

uint64_t sub_14C3D4()
{
  return 0x7463617265746E69LL;
}

uint64_t sub_14C3F4()
{
  return 0x6567616D69LL;
}

uint64_t sub_14C408()
{
  return 0x656C746974LL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.CustomIntentModel.CodingKeys()
{
  return WorkflowDataModels.CustomIntentModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.CustomIntentModel.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.CustomIntentModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.CustomIntentModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.CustomIntentModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.CustomIntentModel.encode(to:)()
{
  unint64_t v5 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys();
  OUTLINED_FUNCTION_4_51((uint64_t)&unk_1FF478, v6, v5);
  char v18 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>((uint64_t)&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>);
  OUTLINED_FUNCTION_44_20(v2, (uint64_t)&v18, v0);
  if (!v1)
  {
    uint64_t v7 = OUTLINED_FUNCTION_166_2();
    OUTLINED_FUNCTION_121_7();
    type metadata accessor for CodableINInteraction(0LL);
    lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type CodableINInteraction and conformance CodableINInteraction);
    uint64_t v8 = OUTLINED_FUNCTION_233_1();
    OUTLINED_FUNCTION_44_20(v8, v9, v10);
    OUTLINED_FUNCTION_103_5();
    OUTLINED_FUNCTION_61_7();
    lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type VisualProperty and conformance VisualProperty);
    uint64_t v11 = OUTLINED_FUNCTION_234_0();
    OUTLINED_FUNCTION_200_0(v11, v12, v13);
    uint64_t v14 = (uint64_t *)(v2 + *(int *)(v7 + 28));
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    char v17 = 3;
    OUTLINED_FUNCTION_15_13(v15, v16, (uint64_t)&v17);
  }

  OUTLINED_FUNCTION_13_35(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_90_9();
  OUTLINED_FUNCTION_1_29();
}

void WorkflowDataModels.CustomIntentModel.init(appPunchOut:interaction:image:title:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v12, v10, v13);
  uint64_t v14 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0LL);
  uint64_t v15 = v12 + v14[5];
  uint64_t v16 = OUTLINED_FUNCTION_111_7();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32LL))(v15, v7, v16);
  outlined init with take of SiriWorkflowRunnerInput?( v6,  v12 + v14[6],  &demangling cache variable for type metadata for VisualProperty?);
  char v17 = (void *)(v12 + v14[7]);
  *char v17 = v5;
  v17[1] = a5;
}

uint64_t type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for WorkflowDataModels.CustomIntentHandledModel,  (uint64_t)&nominal type descriptor for WorkflowDataModels.CustomIntentHandledModel);
}

void WorkflowDataModels.CustomIntentModel.init(from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v27;
  a24 = v28;
  uint64_t v30 = v29;
  uint64_t v52 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v32);
  OUTLINED_FUNCTION_83();
  uint64_t v53 = v33;
  uint64_t v34 = OUTLINED_FUNCTION_49_13();
  uint64_t v55 = type metadata accessor for CodableINInteraction(v34);
  uint64_t v54 = *(void *)(v55 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v35);
  OUTLINED_FUNCTION_83();
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  OUTLINED_FUNCTION_69_12();
  __chkstk_darwin(v36);
  OUTLINED_FUNCTION_22_23(v37, v51);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.CustomIntentModel.CodingKeys>);
  OUTLINED_FUNCTION_4_29();
  __chkstk_darwin(v38);
  OUTLINED_FUNCTION_53_1();
  uint64_t v39 = OUTLINED_FUNCTION_166_2();
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v40);
  OUTLINED_FUNCTION_52_6();
  uint64_t v41 = v30[3];
  uint64_t v42 = v30[4];
  OUTLINED_FUNCTION_102_6(v30);
  unint64_t v43 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_1FF478, &unk_1FF478, v43, v41, v42);
  if (v25)
  {
    OUTLINED_FUNCTION_35_26();
  }

  else
  {
    uint64_t v44 = v39;
    a14 = 0;
    lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>((uint64_t)&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v57, &a14, v58, v57);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v24, v56, v57);
    OUTLINED_FUNCTION_121_7();
    lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type CodableINInteraction and conformance CodableINInteraction);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v55, &a13, v58, v55);
    OUTLINED_FUNCTION_221_1(v24 + *(int *)(v39 + 20), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 32));
    uint64_t v45 = OUTLINED_FUNCTION_61_7();
    OUTLINED_FUNCTION_103_5();
    lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type VisualProperty and conformance VisualProperty);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v45, &a12, v58, v45, v46);
    outlined init with take of SiriWorkflowRunnerInput?( v53,  v24 + *(int *)(v39 + 24),  &demangling cache variable for type metadata for VisualProperty?);
    a11 = 3;
    uint64_t v47 = KeyedDecodingContainer.decode(_:forKey:)(&a11, v58);
    uint64_t v49 = v48;
    OUTLINED_FUNCTION_50_22();
    uint64_t v50 = (uint64_t *)(v24 + *(int *)(v44 + 28));
    *uint64_t v50 = v47;
    v50[1] = v49;
    OUTLINED_FUNCTION_147_2(v24, v52);
    __swift_destroy_boxed_opaque_existential_1Tm(v30);
    OUTLINED_FUNCTION_164_2(v24);
  }

  OUTLINED_FUNCTION_13_8();
}

#error "14CA58: call analysis failed (funcsize=5)"
void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.CustomIntentModel()
{
  WorkflowDataModels.CustomIntentModel.encode(to:)();
}

void WorkflowDataModels.CustomIntentConfirmationModel.intentModel.getter(uint64_t a1@<X8>)
{
}

void WorkflowDataModels.CustomIntentConfirmationModel.confirmLabel.getter()
{
}

void WorkflowDataModels.CustomIntentConfirmationModel.cancelLabel.getter()
{
}

uint64_t WorkflowDataModels.CustomIntentConfirmationModel.asSnippetPluginModel()@<X0>(uint64_t a1@<X8>)
{
  return WorkflowDataModels.CustomIntentErrorModel.asSnippetPluginModel()( type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel,  2LL,  a1);
}

uint64_t WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys.init(stringValue:)( uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6F4D746E65746E69LL && a2 == 0xEB000000006C6564LL)
  {
    unint64_t v5 = 0xEB000000006C6564LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F4D746E65746E69LL, 0xEB000000006C6564LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x4C6D7269666E6F63LL && a2 == 0xEC0000006C656261LL)
  {
    unint64_t v8 = 0xEC0000006C656261LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4C6D7269666E6F63LL, 0xEC0000006C656261LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x614C6C65636E6163LL && a2 == 0xEB000000006C6562LL)
  {
    swift_bridgeObjectRelease(0xEB000000006C6562LL);
    return 2LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x614C6C65636E6163LL, 0xEB000000006C6562LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x6F4D746E65746E69LL;
  }
  if (a1 == 1) {
    return 0x4C6D7269666E6F63LL;
  }
  return 0x614C6C65636E6163LL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys()
{
  return WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.CustomIntentConfirmationModel.encode(to:)()
{
  unint64_t v5 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys();
  OUTLINED_FUNCTION_4_51((uint64_t)&unk_1FF3E8, v6, v5);
  char v16 = 0;
  type metadata accessor for WorkflowDataModels.CustomIntentModel(0LL);
  lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel and conformance WorkflowDataModels.CustomIntentModel);
  OUTLINED_FUNCTION_44_20(v2, (uint64_t)&v16, v0);
  if (!v1)
  {
    uint64_t v7 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0LL);
    unint64_t v8 = (uint64_t *)(v2 + *(int *)(v7 + 20));
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    char v15 = 1;
    OUTLINED_FUNCTION_15_13(v9, v10, (uint64_t)&v15);
    uint64_t v11 = (uint64_t *)(v2 + *(int *)(v7 + 24));
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    char v14 = 2;
    OUTLINED_FUNCTION_15_13(v12, v13, (uint64_t)&v14);
  }

  OUTLINED_FUNCTION_13_35(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_90_9();
  OUTLINED_FUNCTION_1_29();
}

void WorkflowDataModels.CustomIntentConfirmationModel.init(from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int128 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  a18 = v21;
  a19 = v22;
  uint64_t v24 = v23;
  uint64_t v45 = v25;
  uint64_t v46 = OUTLINED_FUNCTION_166_2();
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v26);
  OUTLINED_FUNCTION_83();
  uint64_t v47 = v27;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys>);
  OUTLINED_FUNCTION_152_1();
  __chkstk_darwin(v28);
  uint64_t v29 = OUTLINED_FUNCTION_118_8();
  uint64_t v30 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(v29);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v31);
  OUTLINED_FUNCTION_18_9();
  OUTLINED_FUNCTION_102_6(v24);
  unint64_t v32 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys();
  OUTLINED_FUNCTION_211_1((uint64_t)&unk_1FF3E8, (uint64_t)&unk_1FF3E8, v32);
  if (v19)
  {
    OUTLINED_FUNCTION_35_26();
  }

  else
  {
    uint64_t v33 = v20;
    BYTE7(a10) = 0;
    lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel and conformance WorkflowDataModels.CustomIntentModel);
    OUTLINED_FUNCTION_43_29(v46, (uint64_t)&a10 + 7, v48, v46);
    outlined init with take of VoiceCommandTask( v47,  v20,  type metadata accessor for WorkflowDataModels.CustomIntentModel);
    uint64_t v34 = OUTLINED_FUNCTION_197_0();
    uint64_t v36 = KeyedDecodingContainer.decode(_:forKey:)(v34, v35);
    uint64_t v37 = v30;
    uint64_t v38 = (uint64_t *)(v33 + *(int *)(v30 + 20));
    *uint64_t v38 = v36;
    v38[1] = v39;
    OUTLINED_FUNCTION_103_5();
    uint64_t v41 = OUTLINED_FUNCTION_59_14((uint64_t)&a10 + 5, v40);
    uint64_t v43 = v42;
    OUTLINED_FUNCTION_151_3();
    uint64_t v44 = (uint64_t *)(v33 + *(int *)(v37 + 24));
    uint64_t *v44 = v41;
    v44[1] = v43;
    OUTLINED_FUNCTION_147_2(v33, v45);
    __swift_destroy_boxed_opaque_existential_1Tm(0LL);
    OUTLINED_FUNCTION_164_2(v33);
  }

  OUTLINED_FUNCTION_195_0();
  OUTLINED_FUNCTION_13_8();
}

void WorkflowDataModels.CustomIntentConfirmationModel.init(intentModel:confirmLabel:cancelLabel:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = OUTLINED_FUNCTION_228();
  OUTLINED_FUNCTION_208_1(v10);
  uint64_t v12 = (void *)(v6 + v11);
  *uint64_t v12 = v5;
  v12[1] = a5;
  OUTLINED_FUNCTION_38_0();
}

#error "14D0D4: call analysis failed (funcsize=5)"
void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.CustomIntentConfirmationModel()
{
  WorkflowDataModels.CustomIntentConfirmationModel.encode(to:)();
}

void WorkflowDataModels.CustomIntentHandledModel.doneButtonLabel.getter()
{
}

void WorkflowDataModels.CustomIntentConfirmationModel.confirmLabel.getter(void (*a1)(void))
{
}

void WorkflowDataModels.CustomIntentHandledModel.doneButtonCommand.getter(uint64_t a1@<X8>)
{
}

void WorkflowDataModels.CustomIntentModel.image.getter( uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1(0LL);
  outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(v3 + *(int *)(v6 + 24), a3, a2);
  OUTLINED_FUNCTION_2();
}

uint64_t WorkflowDataModels.CustomIntentHandledModel.shouldShowDoneButton.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0LL) + 28));
}

uint64_t WorkflowDataModels.CustomIntentHandledModel.asSnippetPluginModel()@<X0>(uint64_t a1@<X8>)
{
  return WorkflowDataModels.CustomIntentErrorModel.asSnippetPluginModel()( type metadata accessor for WorkflowDataModels.CustomIntentHandledModel,  4LL,  a1);
}

uint64_t WorkflowDataModels.CustomIntentErrorModel.asSnippetPluginModel()@<X0>( uint64_t (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3;
  outlined init with copy of AutoShortcutInvocation(v6, a3, a1);
  uint64_t v8 = type metadata accessor for WorkflowDataModels(0LL);
  return swift_storeEnumTagMultiPayload(a3, v8, a2);
}

uint64_t WorkflowDataModels.CustomIntentHandledModel.CodingKeys.init(stringValue:)( uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6F4D746E65746E69LL && a2 == 0xEB000000006C6564LL)
  {
    unint64_t v5 = 0xEB000000006C6564LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F4D746E65746E69LL, 0xEB000000006C6564LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x74747542656E6F64LL && a2 == 0xEF6C6562614C6E6FLL)
  {
    unint64_t v8 = 0xEF6C6562614C6E6FLL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74747542656E6F64LL, 0xEF6C6562614C6E6FLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v9 = 0x80000000001978C0LL;
    if (a2 == 0x80000000001978C0LL) {
      goto LABEL_21;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000000001978C0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
LABEL_21:
    swift_bridgeObjectRelease(v9);
    return 2LL;
  }

  if (a1 == 0xD000000000000014LL && a2 == 0x80000000001978E0LL)
  {
    swift_bridgeObjectRelease(0x80000000001978E0LL);
    return 3LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x80000000001978E0LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t WorkflowDataModels.CustomIntentHandledModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_14D41C + 4 * byte_18B02C[a1]))( 0x6F4D746E65746E69LL,  0xEB000000006C6564LL);
}

uint64_t sub_14D41C()
{
  return 0x74747542656E6F64LL;
}

unint64_t sub_14D440()
{
  return 0xD000000000000011LL;
}

unint64_t sub_14D45C()
{
  return 0xD000000000000014LL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys()
{
  return WorkflowDataModels.CustomIntentHandledModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.CustomIntentHandledModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.CustomIntentHandledModel.encode(to:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v27;
  a24 = v28;
  OUTLINED_FUNCTION_35_35();
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.CustomIntentHandledModel.CodingKeys>);
  OUTLINED_FUNCTION_69_12();
  __chkstk_darwin(v30);
  OUTLINED_FUNCTION_8_35();
  unint64_t v31 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys();
  OUTLINED_FUNCTION_4_51((uint64_t)&unk_1FF358, v32, v31);
  a14 = 0;
  type metadata accessor for WorkflowDataModels.CustomIntentModel(0LL);
  lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel and conformance WorkflowDataModels.CustomIntentModel);
  OUTLINED_FUNCTION_44_20(v25, (uint64_t)&a14, v29);
  if (!v24)
  {
    uint64_t v33 = type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0LL);
    uint64_t v34 = (uint64_t *)(v25 + *(int *)(v33 + 20));
    uint64_t v35 = *v34;
    uint64_t v36 = v34[1];
    a13 = 1;
    OUTLINED_FUNCTION_15_13(v35, v36, (uint64_t)&a13);
    OUTLINED_FUNCTION_103_5();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
    lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>((uint64_t)&lazy protocol witness table cache variable for type CodableAceObject<SAStartLocalRequest> and conformance CodableAceObject<A>);
    uint64_t v37 = OUTLINED_FUNCTION_234_0();
    OUTLINED_FUNCTION_200_0(v37, v38, v39);
    uint64_t v40 = *(unsigned __int8 *)(v25 + *(int *)(v33 + 28));
    a11 = 3;
    OUTLINED_FUNCTION_168_1(v40, (uint64_t)&a11);
  }

  OUTLINED_FUNCTION_13_35(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
  OUTLINED_FUNCTION_13_8();
}

void WorkflowDataModels.CustomIntentHandledModel.init(from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v26;
  a24 = v27;
  uint64_t v29 = v28;
  uint64_t v51 = v30;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v31);
  OUTLINED_FUNCTION_22_23(v32, v51);
  uint64_t v33 = OUTLINED_FUNCTION_166_2();
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v34);
  OUTLINED_FUNCTION_83();
  uint64_t v54 = v35;
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.CustomIntentHandledModel.CodingKeys>);
  __chkstk_darwin(v55);
  uint64_t v36 = OUTLINED_FUNCTION_71_14();
  uint64_t v37 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(v36);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v38);
  OUTLINED_FUNCTION_18_9();
  uint64_t v39 = v29[3];
  uint64_t v40 = v29[4];
  __swift_project_boxed_opaque_existential_1(v29, v39);
  lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys();
  OUTLINED_FUNCTION_180_1();
  dispatch thunk of Decoder.container<A>(keyedBy:)(v41, v42, v43, v39, v40);
  if (v24)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v29);
  }

  else
  {
    a14 = 0;
    lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel and conformance WorkflowDataModels.CustomIntentModel);
    OUTLINED_FUNCTION_43_29(v33, (uint64_t)&a14, v55, v33);
    outlined init with take of VoiceCommandTask( v54,  v25,  type metadata accessor for WorkflowDataModels.CustomIntentModel);
    uint64_t v44 = OUTLINED_FUNCTION_197_0();
    uint64_t v46 = KeyedDecodingContainer.decode(_:forKey:)(v44, v45);
    uint64_t v47 = (uint64_t *)(v25 + v37[5]);
    *uint64_t v47 = v46;
    v47[1] = v48;
    uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
    OUTLINED_FUNCTION_103_5();
    lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>((uint64_t)&lazy protocol witness table cache variable for type CodableAceObject<SAStartLocalRequest> and conformance CodableAceObject<A>);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v49, &a12, v55, v49, v50);
    outlined init with take of SiriWorkflowRunnerInput?( v53,  v25 + v37[6],  &demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
    a11 = 3;
    LOBYTE(v49) = KeyedDecodingContainer.decode(_:forKey:)(&a11, v55);
    OUTLINED_FUNCTION_47_25();
    *(_BYTE *)(v25 + v37[7]) = v49 & 1;
    OUTLINED_FUNCTION_147_2(v25, v52);
    __swift_destroy_boxed_opaque_existential_1Tm(v29);
    OUTLINED_FUNCTION_164_2(v25);
  }

  OUTLINED_FUNCTION_195_0();
  OUTLINED_FUNCTION_13_8();
}

void WorkflowDataModels.CustomIntentHandledModel.init(intentModel:doneButtonLabel:doneButtonCommand:shouldShowDoneButton:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0LL);
  OUTLINED_FUNCTION_208_1(v10);
  outlined init with take of SiriWorkflowRunnerInput?( v5,  v6 + v11,  &demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
  *(_BYTE *)(v6 + *(int *)(v10 + 28)) = a5;
  OUTLINED_FUNCTION_38_0();
}

uint64_t sub_14D9A8()
{
  if (*(void *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_177_1();
  }

  OUTLINED_FUNCTION_176_1();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, 96LL, 7LL);
}

void *outlined retain of WorkflowDataModels.ConfirmActionModel(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[8];
  unint64_t v6 = a1[9];
  uint64_t v7 = a1[12];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  outlined copy of Data?(v5, v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

#error "14DA70: call analysis failed (funcsize=5)"
#error "14DA84: call analysis failed (funcsize=5)"
uint64_t WorkflowDataModels.CustomIntentErrorModel.appPunchOut.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  uint64_t v0 = OUTLINED_FUNCTION_45();
  return OUTLINED_FUNCTION_51_28(v0, v1, v2, v3);
}

uint64_t WorkflowDataModels.CustomIntentErrorModel.CodingKeys.init(stringValue:)( uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v4 = 0x8000000000197900LL;
    if (a2 == 0x8000000000197900LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000000197900LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0x68636E7550707061LL && a2 == 0xEB0000000074754FLL)
  {
    swift_bridgeObjectRelease(0xEB0000000074754FLL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x68636E7550707061LL, 0xEB0000000074754FLL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t WorkflowDataModels.CustomIntentErrorModel.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x68636E7550707061LL;
  }
  else {
    return 0xD000000000000012LL;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys()
{
  return WorkflowDataModels.CustomIntentErrorModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.CustomIntentErrorModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.CustomIntentErrorModel.encode(to:)()
{
  unint64_t v4 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys();
  OUTLINED_FUNCTION_4_51((uint64_t)&unk_1FF2C8, v5, v4);
  uint64_t v6 = *v1;
  uint64_t v7 = v1[1];
  char v11 = 0;
  OUTLINED_FUNCTION_15_13(v6, v7, (uint64_t)&v11);
  if (!v0)
  {
    type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0LL);
    OUTLINED_FUNCTION_121_7();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
    lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>((uint64_t)&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>);
    uint64_t v8 = OUTLINED_FUNCTION_233_1();
    OUTLINED_FUNCTION_44_20(v8, v9, v10);
  }

  OUTLINED_FUNCTION_13_35(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_90_9();
  OUTLINED_FUNCTION_1_29();
}

void WorkflowDataModels.CustomIntentErrorModel.init(from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, __int16 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v23;
  a22 = v24;
  uint64_t v26 = v25;
  uint64_t v46 = v27;
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  uint64_t v45 = *(void *)(v47 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v28);
  OUTLINED_FUNCTION_119_6(v29, v44[0]);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.CustomIntentErrorModel.CodingKeys>);
  OUTLINED_FUNCTION_152_1();
  __chkstk_darwin(v30);
  uint64_t v31 = OUTLINED_FUNCTION_71_14();
  uint64_t v32 = type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(v31);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v33);
  uint64_t v35 = (uint64_t *)((char *)v44 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  OUTLINED_FUNCTION_102_6(v26);
  lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys();
  OUTLINED_FUNCTION_180_1();
  OUTLINED_FUNCTION_211_1(v36, v37, v38);
  if (v22)
  {
    OUTLINED_FUNCTION_35_26();
  }

  else
  {
    v44[2] = (uint64_t)v26;
    uint64_t v39 = v47;
    uint64_t v40 = OUTLINED_FUNCTION_204_0();
    *uint64_t v35 = KeyedDecodingContainer.decode(_:forKey:)(v40, v48);
    v35[1] = v41;
    v44[1] = v41;
    OUTLINED_FUNCTION_121_7();
    lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>((uint64_t)&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v39, &a12, v48, v39);
    OUTLINED_FUNCTION_86_7();
    OUTLINED_FUNCTION_221_1( (uint64_t)v35 + *(int *)(v32 + 20),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 32));
    OUTLINED_FUNCTION_147_2((uint64_t)v35, v46);
    OUTLINED_FUNCTION_231();
    uint64_t v42 = OUTLINED_FUNCTION_45();
    outlined destroy of AutoShortcutInvocation(v42, v43);
  }

  OUTLINED_FUNCTION_13_8();
}

#error "14DF44: call analysis failed (funcsize=5)"
void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.CustomIntentErrorModel()
{
  WorkflowDataModels.CustomIntentErrorModel.encode(to:)();
}

void WorkflowDataModels.ConfirmActionModel.archivedViewData.getter()
{
}

uint64_t WorkflowDataModels.ConfirmActionModel.isDestructive.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

void WorkflowDataModels.ConfirmActionModel.prompt.getter()
{
}

void WorkflowDataModels.ConfirmActionModel.archivedViewModel.getter(void *a1@<X8>)
{
  uint64_t v7 = &demangling cache variable for type metadata for Data?;
  OUTLINED_FUNCTION_140_3((uint64_t)(v1 + 8), (uint64_t)v9);
  OUTLINED_FUNCTION_140_3((uint64_t)v9, (uint64_t)&v10);
  unint64_t v8 = v11;
  if (v11 >> 60 == 15)
  {
    OUTLINED_FUNCTION_130_4();
  }

  else
  {
    uint64_t v3 = v10;
    uint64_t v4 = *v1;
    uint64_t v2 = v1[1];
    uint64_t v5 = v1[2];
    uint64_t v7 = (uint64_t *)v1[3];
    swift_bridgeObjectRetain(v2);
    OUTLINED_FUNCTION_5_14();
  }

  outlined retain of Data?((uint64_t)v9);
  *a1 = v3;
  a1[1] = v8;
  a1[2] = v4;
  a1[3] = v2;
  a1[4] = v5;
  a1[5] = v7;
  OUTLINED_FUNCTION_105_4();
}

uint64_t WorkflowDataModels.ConfirmActionModel.CodingKeys.init(stringValue:)(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6C646E7542707061LL && a2 == 0xEB00000000644965LL)
  {
    unint64_t v5 = 0xEB00000000644965LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C646E7542707061LL, 0xEB00000000644965LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6C70736944707061LL && a2 == 0xEE00656D614E7961LL)
  {
    unint64_t v8 = 0xEE00656D614E7961LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C70736944707061LL, 0xEE00656D614E7961LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x4C6D7269666E6F63LL && a2 == 0xEC0000006C656261LL)
  {
    unint64_t v10 = 0xEC0000006C656261LL;
    goto LABEL_24;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4C6D7269666E6F63LL, 0xEC0000006C656261LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2LL;
  }

  if (a1 == 0x6C6562614C6F6ELL && a2 == 0xE700000000000000LL)
  {
    unint64_t v12 = 0xE700000000000000LL;
    goto LABEL_32;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6562614C6F6ELL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3LL;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v13 = 0x8000000000197920LL;
    if (a2 == 0x8000000000197920LL) {
      goto LABEL_37;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000000197920LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v13);
    return 4LL;
  }

  if (a1 == 0x7572747365447369LL && a2 == 0xED00006576697463LL)
  {
    unint64_t v15 = 0xED00006576697463LL;
    goto LABEL_45;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7572747365447369LL, 0xED00006576697463LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
LABEL_45:
    swift_bridgeObjectRelease(v15);
    return 5LL;
  }

  if (a1 == 0x74706D6F7270LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 6LL;
  }

  else
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74706D6F7270LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v17 & 1) != 0) {
      return 6LL;
    }
    else {
      return 7LL;
    }
  }

uint64_t WorkflowDataModels.ConfirmActionModel.CodingKeys.init(intValue:)()
{
  return 7LL;
}

uint64_t WorkflowDataModels.ConfirmActionModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_14E3BC + 4 * byte_18B030[a1]))( 0x6C646E7542707061LL,  0xEB00000000644965LL);
}

uint64_t sub_14E3BC()
{
  return 0x6C70736944707061LL;
}

uint64_t sub_14E3E0()
{
  return 0x4C6D7269666E6F63LL;
}

uint64_t sub_14E400()
{
  return 0x6C6562614C6F6ELL;
}

unint64_t sub_14E418()
{
  return 0xD000000000000010LL;
}

uint64_t sub_14E434()
{
  return 0x7572747365447369LL;
}

uint64_t sub_14E458()
{
  return 0x74706D6F7270LL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.ConfirmActionModel.CodingKeys()
{
  return WorkflowDataModels.ConfirmActionModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.ConfirmActionModel.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.ConfirmActionModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance WorkflowDataModels.ConfirmActionModel.CodingKeys@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = WorkflowDataModels.ConfirmActionModel.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.ConfirmActionModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.ConfirmActionModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.ConfirmActionModel.encode(to:)()
{
  unint64_t v5 = lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys();
  OUTLINED_FUNCTION_4_51((uint64_t)&unk_1FF238, v6, v5);
  uint64_t v7 = *(void *)v2;
  uint64_t v8 = *(void *)(v2 + 8);
  v16[0] = 0;
  OUTLINED_FUNCTION_28_26(v7, v8);
  if (!v1)
  {
    uint64_t v9 = *(void *)(v2 + 16);
    uint64_t v10 = *(void *)(v2 + 24);
    v16[0] = 1;
    OUTLINED_FUNCTION_28_26(v9, v10);
    uint64_t v11 = *(void *)(v2 + 32);
    uint64_t v12 = *(void *)(v2 + 40);
    v16[0] = 2;
    OUTLINED_FUNCTION_28_26(v11, v12);
    uint64_t v13 = *(void *)(v2 + 48);
    uint64_t v14 = *(void *)(v2 + 56);
    v16[0] = 3;
    OUTLINED_FUNCTION_28_26(v13, v14);
    OUTLINED_FUNCTION_148_3(v2 + 64, (uint64_t)v17);
    OUTLINED_FUNCTION_148_3((uint64_t)v17, (uint64_t)v16);
    lazy protocol witness table accessor for type Data and conformance Data();
    OUTLINED_FUNCTION_112_7();
    uint64_t v15 = *(unsigned __int8 *)(v2 + 80);
    v16[0] = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, v0);
    OUTLINED_FUNCTION_38_30(*(void *)(v2 + 88), *(void *)(v2 + 96), 6);
  }

  OUTLINED_FUNCTION_13_35(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_1_29();
}

void WorkflowDataModels.ConfirmActionModel.init(from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, __int16 a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v26;
  a24 = v27;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.ConfirmActionModel.CodingKeys>);
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  OUTLINED_FUNCTION_38_14();
  uint64_t v34 = v29[3];
  uint64_t v35 = v29[4];
  __swift_project_boxed_opaque_existential_1(v29, v34);
  lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys();
  OUTLINED_FUNCTION_180_1();
  dispatch thunk of Decoder.container<A>(keyedBy:)(v36, v37, v38, v34, v35);
  if (v24)
  {
    OUTLINED_FUNCTION_203_0();
  }

  else
  {
    uint64_t v39 = OUTLINED_FUNCTION_54_25();
    uint64_t v41 = v40;
    OUTLINED_FUNCTION_37_21(v39, v40);
    uint64_t v61 = OUTLINED_FUNCTION_54_25();
    uint64_t v62 = v39;
    uint64_t v43 = v42;
    OUTLINED_FUNCTION_37_21(v61, v42);
    uint64_t v63 = v43;
    uint64_t v60 = OUTLINED_FUNCTION_54_25();
    LOBYTE(v64) = 3;
    uint64_t v45 = v44;
    swift_bridgeObjectRetain(v44);
    uint64_t v46 = OUTLINED_FUNCTION_54_25();
    uint64_t v48 = v47;
    uint64_t v58 = v46;
    a14 = 4;
    unint64_t v49 = lazy protocol witness table accessor for type Data and conformance Data();
    uint64_t v59 = v48;
    OUTLINED_FUNCTION_17_1();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for Data,  &a14,  v32,  &type metadata for Data,  v49);
    outlined copy of Data?(v64, v65);
    uint64_t v50 = OUTLINED_FUNCTION_235_1();
    a10 = KeyedDecodingContainer.decode(_:forKey:)(v50, v51);
    uint64_t v52 = OUTLINED_FUNCTION_235_1();
    uint64_t v54 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v52, v53);
    uint64_t v56 = v55;
    uint64_t v57 = v54;
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v25, v32);
    OUTLINED_FUNCTION_54_7();
    OUTLINED_FUNCTION_52_5();
    OUTLINED_FUNCTION_28_8();
    OUTLINED_FUNCTION_11_11();
    outlined copy of Data?(v64, v65);
    OUTLINED_FUNCTION_17_1();
    outlined consume of Data?(v64, v65);
    OUTLINED_FUNCTION_2_6();
    OUTLINED_FUNCTION_64_0();
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_203_0();
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_64_0();
    OUTLINED_FUNCTION_2_6();
    OUTLINED_FUNCTION_213_1();
    OUTLINED_FUNCTION_20();
    *(void *)uint64_t v31 = v62;
    *(void *)(v31 + 8) = v41;
    *(void *)(v31 + 16) = v61;
    *(void *)(v31 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = v63;
    *(void *)(v31 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = v60;
    *(void *)(v31 + 40) = v45;
    *(void *)(v31 + 48) = v58;
    *(void *)(v31 + 56) = v59;
    *(void *)(v31 + 64) = v64;
    *(void *)(v31 + 7outlined consume of WFShowAlertFlow.State(v0, 2) = v65;
    *(_BYTE *)(v31 + 80) = a10 & 1;
    *(void *)(v31 + 88) = v57;
    *(void *)(v31 + 96) = v56;
  }

  OUTLINED_FUNCTION_13_8();
}

void *protocol witness for SnippetPluginModelProviding.asSnippetPluginModel() in conformance WorkflowDataModels.ConfirmActionModel@<X0>( uint64_t a1@<X8>)
{
  return WorkflowDataModels.ConfirmActionModel.asSnippetPluginModel()(a1);
}

void protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.ConfirmActionModel( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  if (!v9) {
    memcpy(a9, __src, 0x68uLL);
  }
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.ConfirmActionModel()
{
}

uint64_t WorkflowDataModels.DisambiguateItemsModel.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x736D657469LL;
  }
  else {
    return 0x74706D6F7270LL;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys()
{
  return WorkflowDataModels.DisambiguateItemsModel.CodingKeys.stringValue.getter(*v0);
}

void protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  *a3 = v4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

#error "14EB8C: call analysis failed (funcsize=8)"
#error "14EBB8: call analysis failed (funcsize=8)"
double protocol witness for SnippetPluginModelProviding.asSnippetPluginModel() in conformance WorkflowDataModels.DisambiguateItemsModel@<D0>( void *a1@<X8>)
{
  uint64_t *v1;
  return WorkflowDataModels.DisambiguateItemsModel.asSnippetPluginModel()(*v1, v1[1], v1[2], a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.DisambiguateItemsModel@<X0>( uint64_t *a1@<X8>)
{
  return protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.DisambiguateItemsModel( WorkflowDataModels.DisambiguateItemsModel.init(from:),  a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.DisambiguateItemsModel( uint64_t a1)
{
  return WorkflowDataModels.DisambiguateItemsModel.encode(to:)(a1, *v1, v1[1], v1[2]);
}

double WorkflowDataModels.DisambiguateSmartPromptItemsModel.asSnippetPluginModel()@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return WorkflowDataModels.DisambiguateItemsModel.asSnippetPluginModel()(a1, a2, a3, 8LL, a4);
}

double WorkflowDataModels.DisambiguateItemsModel.asSnippetPluginModel()@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  uint64_t v8 = type metadata accessor for WorkflowDataModels(0LL);
  swift_storeEnumTagMultiPayload(a5, v8, a4);
  OUTLINED_FUNCTION_5_14();
  *(void *)&double result = swift_bridgeObjectRetain(a3).n128_u64[0];
  return result;
}

void WorkflowDataModels.DisambiguateItemsModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74706D6F7270LL && a2 == 0xE600000000000000LL;
  if (v2
    || (OUTLINED_FUNCTION_60(0x74706D6F7270LL, 0xE600000000000000LL) & 1) != 0
    || (a1 == 0x736D657469LL ? (BOOL v5 = a2 == 0xE500000000000000LL) : (BOOL v5 = 0), v5))
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    OUTLINED_FUNCTION_60(0x736D657469LL, 0xE500000000000000LL);
    OUTLINED_FUNCTION_58_2();
  }

  OUTLINED_FUNCTION_1();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

#error "14ED90: call analysis failed (funcsize=8)"
void WorkflowDataModels.DisambiguateItemsModel.encode(to:)( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  int a10,  __int16 a11,  __int16 a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t (*v28)(void);
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  OUTLINED_FUNCTION_11_39();
  a21 = v23;
  a22 = v24;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v41 = v29;
  uint64_t v31 = v30;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(v32);
  uint64_t v42 = *(void *)(v33 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v34);
  uint64_t v35 = v31[3];
  uint64_t v36 = v31[4];
  __swift_project_boxed_opaque_existential_1(v31, v35);
  uint64_t v37 = v28();
  dispatch thunk of Encoder.container<A>(keyedBy:)(v26, v26, v37, v35, v36);
  HIBYTE(a1outlined consume of WFShowAlertFlow.State(v0, 2) = 0;
  uint64_t v38 = OUTLINED_FUNCTION_212();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v38, v39, v40, v33);
  if (!v22)
  {
    uint64_t v43 = v41;
    OUTLINED_FUNCTION_121_7();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [WorkflowDataModels.DisambiguationItemModel]);
    lazy protocol witness table accessor for type [WorkflowDataModels.DisambiguationItemModel] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [WorkflowDataModels.DisambiguationItemModel] and conformance <A> [A]);
    OUTLINED_FUNCTION_137_1((uint64_t)&v43, (uint64_t)&a12, v33);
  }

  OUTLINED_FUNCTION_13_35(*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8));
  OUTLINED_FUNCTION_179_0();
  OUTLINED_FUNCTION_13_8();
}

#error "14EEF8: call analysis failed (funcsize=8)"
void WorkflowDataModels.DisambiguateItemsModel.init(from:)( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  int a10,  __int16 a11,  __int16 a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(void);
  uint64_t (*v29)(void);
  void *v30;
  void *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  OUTLINED_FUNCTION_11_39();
  a21 = v24;
  a22 = v25;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(v32);
  OUTLINED_FUNCTION_146_2();
  __chkstk_darwin(v33);
  OUTLINED_FUNCTION_75_14();
  uint64_t v34 = v29();
  OUTLINED_FUNCTION_136_1(v27, v27, v34, v23);
  if (v22)
  {
    OUTLINED_FUNCTION_51_13();
  }

  else
  {
    uint64_t v35 = OUTLINED_FUNCTION_204_0();
    OUTLINED_FUNCTION_114_5(v35, v39);
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [WorkflowDataModels.DisambiguationItemModel]);
    OUTLINED_FUNCTION_121_7();
    lazy protocol witness table accessor for type [WorkflowDataModels.DisambiguationItemModel] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [WorkflowDataModels.DisambiguationItemModel] and conformance <A> [A]);
    uint64_t v38 = v37;
    OUTLINED_FUNCTION_54_7();
    OUTLINED_FUNCTION_120_6(v36, (uint64_t)&a12, v39, v36);
    OUTLINED_FUNCTION_32_24();
    if (v38)
    {
      OUTLINED_FUNCTION_2_6();
      __swift_destroy_boxed_opaque_existential_1Tm(v31);
    }

    else
    {
      OUTLINED_FUNCTION_17_1();
      __swift_destroy_boxed_opaque_existential_1Tm(v31);
      OUTLINED_FUNCTION_20();
    }

    OUTLINED_FUNCTION_2_6();
  }

  OUTLINED_FUNCTION_113_6();
  OUTLINED_FUNCTION_13_8();
}

uint64_t WorkflowDataModels.InvocationCommand.CodingKeys.init(stringValue:)(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000018LL)
  {
    unint64_t v4 = 0x8000000000197940LL;
    if (a2 == 0x8000000000197940LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x8000000000197940LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0xD00000000000001ALL && a2 == 0x8000000000197960LL)
  {
    unint64_t v6 = 0x8000000000197960LL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000000197960LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 0x7165527472617473LL && a2 == 0xEC00000074736575LL)
  {
    swift_bridgeObjectRelease(0xEC00000074736575LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7165527472617473LL, 0xEC00000074736575LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t WorkflowDataModels.InvocationCommand.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0xD000000000000018LL;
  if (a1)
  {
    if (a1 == 1) {
      return 0xD00000000000001ALL;
    }
    else {
      return 0x7165527472617473LL;
    }
  }

  return result;
}

void WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000LL;
  if (v2
    || (OUTLINED_FUNCTION_60(25705LL, 0xE200000000000000LL) & 1) != 0
    || (a1 == 0x64616F6C796170LL ? (BOOL v5 = a2 == 0xE700000000000000LL) : (BOOL v5 = 0), v5))
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    OUTLINED_FUNCTION_60(0x64616F6C796170LL, 0xE700000000000000LL);
    OUTLINED_FUNCTION_58_2();
  }

  OUTLINED_FUNCTION_1();
}

uint64_t WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys.stringValue.getter( char a1)
{
  if ((a1 & 1) != 0) {
    return 0x64616F6C796170LL;
  }
  else {
    return 25705LL;
  }
}

uint64_t WorkflowDataModels.InvocationCommand.StartRequestCodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  if (a1 == 0x636E617265747475LL && a2 == 0xE900000000000065LL)
  {
    swift_bridgeObjectRelease(0xE900000000000065LL);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x636E617265747475LL, 0xE900000000000065LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

uint64_t WorkflowDataModels.InvocationCommand.StartRequestCodingKeys.stringValue.getter()
{
  return 0x636E617265747475LL;
}

double protocol witness for SnippetPluginModelProviding.asSnippetPluginModel() in conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel@<D0>( void *a1@<X8>)
{
  return WorkflowDataModels.DisambiguateSmartPromptItemsModel.asSnippetPluginModel()(*v1, v1[1], v1[2], a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel@<X0>( uint64_t *a1@<X8>)
{
  return protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.DisambiguateItemsModel( WorkflowDataModels.DisambiguateSmartPromptItemsModel.init(from:),  a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.DisambiguateItemsModel@<X0>( uint64_t (*a1)(void)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }

  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel( uint64_t a1)
{
  return WorkflowDataModels.DisambiguateSmartPromptItemsModel.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.InvocationCommand.CodingKeys()
{
  return WorkflowDataModels.InvocationCommand.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.InvocationCommand.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.InvocationCommand.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.InvocationCommand.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.InvocationCommand.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys()
{
  return WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys.stringValue.getter(*v0);
}

void protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  *a3 = v4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void protocol witness for Hashable.hashValue.getter in conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys( uint64_t a1)
{
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.InvocationCommand.StartRequestCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys( uint64_t a1)
{
  unint64_t started = lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys();
  return CodingKey.description.getter(a1, started);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys( uint64_t a1)
{
  unint64_t started = lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys();
  return CodingKey.debugDescription.getter(a1, started);
}

void WorkflowDataModels.InvocationCommand.encode(to:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v26;
  a20 = v27;
  uint64_t v62 = v28;
  char v63 = v29;
  uint64_t v54 = v30;
  uint64_t v61 = v31;
  uint64_t v33 = v32;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.InvocationCommand.StartRequestCodingKeys>);
  uint64_t v55 = *(void *)(v34 - 8);
  uint64_t v56 = v34;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v35);
  OUTLINED_FUNCTION_52_6();
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys>);
  uint64_t v58 = *(void *)(v36 - 8);
  uint64_t v59 = v36;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v37);
  OUTLINED_FUNCTION_51_22();
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys>);
  OUTLINED_FUNCTION_146_2();
  __chkstk_darwin(v38);
  OUTLINED_FUNCTION_38_14();
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.InvocationCommand.CodingKeys>);
  uint64_t v60 = *(void *)(v39 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v40);
  OUTLINED_FUNCTION_18_9();
  uint64_t v42 = v33[3];
  uint64_t v41 = v33[4];
  __swift_project_boxed_opaque_existential_1(v33, v42);
  lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys();
  OUTLINED_FUNCTION_192_0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(v43, v44, v45, v42, v41);
  if (!v63)
  {
    LOBYTE(a10) = 0;
    lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys();
    OUTLINED_FUNCTION_101_6((uint64_t)&unk_1FEF68, (uint64_t)&a10, v39, (uint64_t)&unk_1FEF68);
    LOBYTE(a10) = 0;
    KeyedEncodingContainer.encode(_:forKey:)(v61, v62, &a10, v57);
    if (!v21)
    {
      a10 = v54;
      char v64 = 1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Data]);
      lazy protocol witness table accessor for type [String : Data] and conformance <> [A : B]((uint64_t)&lazy protocol witness table cache variable for type [String : Data] and conformance <> [A : B]);
      OUTLINED_FUNCTION_137_1((uint64_t)&a10, (uint64_t)&v64, v57);
    }

    OUTLINED_FUNCTION_9_8(v24, *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
    unint64_t v49 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
    uint64_t v50 = v23;
    goto LABEL_10;
  }

  if (v63 != 1)
  {
    OUTLINED_FUNCTION_196_0();
    OUTLINED_FUNCTION_101_6((uint64_t)&unk_1FF088, (uint64_t)&a10, v39, (uint64_t)&unk_1FF088);
    uint64_t v51 = OUTLINED_FUNCTION_212();
    KeyedEncodingContainer.encode(_:forKey:)(v51, v52, v53, v56);
    OUTLINED_FUNCTION_35_3(v20, *(uint64_t (**)(uint64_t, uint64_t))(v55 + 8));
    unint64_t v49 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
    uint64_t v50 = v23;
LABEL_10:
    v49(v50, v39);
    goto LABEL_11;
  }

  LOBYTE(a10) = 1;
  lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys();
  OUTLINED_FUNCTION_101_6((uint64_t)&unk_1FEFF8, (uint64_t)&a10, v39, (uint64_t)&unk_1FEFF8);
  LOBYTE(a10) = 0;
  uint64_t v46 = OUTLINED_FUNCTION_212();
  KeyedEncodingContainer.encode(_:forKey:)(v46, v47, v48, v59);
  if (!v21)
  {
    a10 = v54;
    char v64 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]((uint64_t)&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    OUTLINED_FUNCTION_137_1((uint64_t)&a10, (uint64_t)&v64, v59);
  }

  OUTLINED_FUNCTION_35_3(v25, *(uint64_t (**)(uint64_t, uint64_t))(v58 + 8));
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v23, v39);
LABEL_11:
  OUTLINED_FUNCTION_179_0();
  OUTLINED_FUNCTION_13_8();
}

void WorkflowDataModels.InvocationCommand.init(from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  uint64_t v26 = v25;
  uint64_t v60 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.InvocationCommand.StartRequestCodingKeys>)
                  - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v27);
  OUTLINED_FUNCTION_83();
  uint64_t v62 = v28;
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys>);
  uint64_t v61 = *(void *)(v64 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v29);
  OUTLINED_FUNCTION_22_23(v30, v58);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys>);
  uint64_t v32 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  OUTLINED_FUNCTION_52_6();
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.InvocationCommand.CodingKeys>);
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  OUTLINED_FUNCTION_53_1();
  uint64_t v35 = v26[3];
  unint64_t v65 = v26;
  OUTLINED_FUNCTION_102_6(v26);
  unint64_t v36 = lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys();
  OUTLINED_FUNCTION_136_1((uint64_t)&unk_1FEED8, (uint64_t)&unk_1FEED8, v36, v35);
  if (!v21)
  {
    uint64_t v59 = v20;
    uint64_t v66 = v22;
    uint64_t v37 = KeyedDecodingContainer.allKeys.getter(v33);
    uint64_t v38 = *(void *)(v37 + 16);
    if (v38
      && (int v39 = *(unsigned __int8 *)(v37 + 32),
          uint64_t v40 = specialized ArraySlice.subscript.getter(1LL, v38, v37, v37 + 32, 0LL, (2 * v38) | 1),
          uint64_t v42 = v41,
          unint64_t v44 = v43,
          OUTLINED_FUNCTION_28_4(),
          v42 == v44 >> 1))
    {
      if (v39)
      {
        if (v39 == 1)
        {
          a10 = 1;
          lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys();
          OUTLINED_FUNCTION_83_9((uint64_t)&unk_1FEFF8, (uint64_t)&a10);
          a10 = 0;
          OUTLINED_FUNCTION_158_4((uint64_t)&a10);
          uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
          char v67 = 1;
          lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]((uint64_t)&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
          KeyedDecodingContainer.decode<A>(_:forKey:)(v56, &v67, v64, v56);
          OUTLINED_FUNCTION_35_3(v63, *(uint64_t (**)(uint64_t, uint64_t))(v61 + 8));
          OUTLINED_FUNCTION_98_5();
          OUTLINED_FUNCTION_9_8(v40, *(uint64_t (**)(uint64_t, uint64_t))(v34 + 8));
        }

        else
        {
          OUTLINED_FUNCTION_196_0();
          uint64_t v55 = OUTLINED_FUNCTION_83_9((uint64_t)&unk_1FF088, (uint64_t)&a10);
          OUTLINED_FUNCTION_158_4(v55);
          OUTLINED_FUNCTION_27_32(v62, *(uint64_t (**)(uint64_t, uint64_t))(v60 + 8));
          OUTLINED_FUNCTION_98_5();
          OUTLINED_FUNCTION_9_8(v40, *(uint64_t (**)(uint64_t, uint64_t))(v34 + 8));
        }
      }

      else
      {
        a10 = 0;
        lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&unk_1FEF68, &a10, v33, &unk_1FEF68);
        a10 = 0;
        KeyedDecodingContainer.decode(_:forKey:)(&a10, v31);
        uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Data]);
        char v67 = 1;
        lazy protocol witness table accessor for type [String : Data] and conformance <> [A : B]((uint64_t)&lazy protocol witness table cache variable for type [String : Data] and conformance <> [A : B]);
        KeyedDecodingContainer.decode<A>(_:forKey:)(v57, &v67, v31, v57);
        (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v59, v31);
        OUTLINED_FUNCTION_98_5();
        OUTLINED_FUNCTION_9_8(v66, *(uint64_t (**)(uint64_t, uint64_t))(v34 + 8));
      }
    }

    else
    {
      uint64_t v45 = OUTLINED_FUNCTION_229_0();
      OUTLINED_FUNCTION_28_0(v45, (uint64_t)&protocol witness table for DecodingError);
      uint64_t v47 = v46;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v47 = &type metadata for WorkflowDataModels.InvocationCommand;
      uint64_t v48 = KeyedDecodingContainer.codingPath.getter(v33);
      uint64_t v49 = OUTLINED_FUNCTION_93_5(v48, (uint64_t)"Invalid number of keys found, expected one.");
      uint64_t v50 = OUTLINED_FUNCTION_129_4(v49, enum case for DecodingError.typeMismatch(_:));
      swift_willThrow(v50, v51, v52, v53, v54);
      OUTLINED_FUNCTION_98_5();
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v66, v33);
    }
  }

  __swift_destroy_boxed_opaque_existential_1Tm(v65);
  OUTLINED_FUNCTION_13_8();
}

#error "14FE7C: call analysis failed (funcsize=12)"
#error "14FEB0: call analysis failed (funcsize=8)"
void WorkflowDataModels.DisambiguationItemModel.thumbnail.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?( v1 + OBJC_IVAR____TtCO18SiriLinkFlowPlugin18WorkflowDataModels23DisambiguationItemModel_thumbnail,  a1,  &demangling cache variable for type metadata for VisualProperty?);
}

uint64_t WorkflowDataModels.DisambiguationItemModel.invocationCommand.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_225();
  outlined copy of WorkflowDataModels.InvocationCommand(v0, v1, v2, v3);
  return OUTLINED_FUNCTION_225();
}

void *WorkflowDataModels.DisambiguationItemModel.init(title:subtitle:thumbnail:invocationCommand:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  outlined init with take of SiriWorkflowRunnerInput?( a5,  (uint64_t)v9 + OBJC_IVAR____TtCO18SiriLinkFlowPlugin18WorkflowDataModels23DisambiguationItemModel_thumbnail,  &demangling cache variable for type metadata for VisualProperty?);
  uint64_t v13 = (char *)v9
      + OBJC_IVAR____TtCO18SiriLinkFlowPlugin18WorkflowDataModels23DisambiguationItemModel_invocationCommand;
  *(void *)uint64_t v13 = a6;
  *((void *)v13 + outlined consume of ParsedMeasurement(v0, v1, 1) = a7;
  *((void *)v13 + outlined consume of WFShowAlertFlow.State(v0, 2) = a8;
  _BYTE v13[24] = a9;
  return v9;
}

uint64_t type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for WorkflowDataModels.CustomIntentErrorModel,  (uint64_t)&nominal type descriptor for WorkflowDataModels.CustomIntentErrorModel);
}

void *outlined retain of WorkflowDataModels.LinkActionModel(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[6];
  unint64_t v5 = a1[7];
  swift_bridgeObjectRetain(a1[5]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  outlined copy of Data?(v4, v5);
  return a1;
}

uint64_t sub_150018()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t WorkflowDataModels.DisambiguationItemModel.CodingKeys.init(stringValue:)( uint64_t a1, unint64_t a2)
{
  if (a1 == 0x656C746974LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v5 = 0xE500000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x656C746974627573LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v8 = 0xE800000000000000LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974627573LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x69616E626D756874LL && a2 == 0xE90000000000006CLL)
  {
    unint64_t v10 = 0xE90000000000006CLL;
    goto LABEL_24;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69616E626D756874LL, 0xE90000000000006CLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2LL;
  }

  if (a1 == 0xD000000000000011LL && a2 == 0x80000000001978A0LL)
  {
    swift_bridgeObjectRelease(0x80000000001978A0LL);
    return 3LL;
  }

  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000000001978A0LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t WorkflowDataModels.DisambiguationItemModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_150228 + 4 * byte_18B037[a1]))( 0x656C746974LL,  0xE500000000000000LL);
}

uint64_t sub_150228()
{
  return 0x656C746974627573LL;
}

uint64_t sub_150240()
{
  return 0x69616E626D756874LL;
}

unint64_t sub_15025C()
{
  return 0xD000000000000011LL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys()
{
  return WorkflowDataModels.DisambiguationItemModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.DisambiguationItemModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t WorkflowDataModels.DisambiguationItemModel.deinit()
{
  return v0;
}

uint64_t WorkflowDataModels.DisambiguationItemModel.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

void WorkflowDataModels.DisambiguationItemModel.encode(to:)()
{
  unint64_t v5 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys();
  OUTLINED_FUNCTION_4_51((uint64_t)&unk_1FEE48, v6, v5);
  uint64_t v7 = v2[2];
  uint64_t v8 = v2[3];
  LOBYTE(v13) = 0;
  OUTLINED_FUNCTION_28_26(v7, v8);
  if (!v1)
  {
    OUTLINED_FUNCTION_38_30(v2[4], v2[5], 1);
    uint64_t v9 = (char *)v2 + OBJC_IVAR____TtCO18SiriLinkFlowPlugin18WorkflowDataModels23DisambiguationItemModel_thumbnail;
    LOBYTE(v13) = 2;
    OUTLINED_FUNCTION_61_7();
    lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type VisualProperty and conformance VisualProperty);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v9, &v13, v0);
    uint64_t v10 = *(void *)((char *)v2
                    + OBJC_IVAR____TtCO18SiriLinkFlowPlugin18WorkflowDataModels23DisambiguationItemModel_invocationCommand
                    + 16);
    char v11 = *((_BYTE *)v2
          + OBJC_IVAR____TtCO18SiriLinkFlowPlugin18WorkflowDataModels23DisambiguationItemModel_invocationCommand
          + 24);
    __int128 v13 = *(_OWORD *)((char *)v2
                    + OBJC_IVAR____TtCO18SiriLinkFlowPlugin18WorkflowDataModels23DisambiguationItemModel_invocationCommand);
    uint64_t v14 = v10;
    char v15 = v11;
    char v12 = 3;
    lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand and conformance WorkflowDataModels.InvocationCommand();
    OUTLINED_FUNCTION_137_1((uint64_t)&v13, (uint64_t)&v12, v0);
  }

  OUTLINED_FUNCTION_13_35(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_1_29();
}

#error "1504F8: call analysis failed (funcsize=19)"
void WorkflowDataModels.DisambiguationItemModel.init(from:)( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  int a10,  __int16 a11,  char a12,  char a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23)
{
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  OUTLINED_FUNCTION_11_39();
  a22 = v26;
  a23 = v27;
  uint64_t v28 = v24;
  uint64_t v30 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v31);
  OUTLINED_FUNCTION_52_6();
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.DisambiguationItemModel.CodingKeys>);
  __chkstk_darwin(v45);
  OUTLINED_FUNCTION_18_9();
  uint64_t v32 = v30[3];
  uint64_t v33 = v30[4];
  __swift_project_boxed_opaque_existential_1(v30, v32);
  lazy protocol witness table accessor for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys();
  OUTLINED_FUNCTION_192_0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(v34, v35, v36, v32, v33);
  if (v25)
  {
    uint64_t v37 = type metadata accessor for WorkflowDataModels.DisambiguationItemModel(0LL);
    swift_deallocPartialClassInstance(v24, v37, *(unsigned int *)(*v24 + 48LL), *(unsigned __int16 *)(*v24 + 52LL));
  }

  else
  {
    LOBYTE(v46) = 0;
    _OWORD v24[2] = KeyedDecodingContainer.decode(_:forKey:)(&v46, v45);
    v24[3] = v38;
    LOBYTE(v46) = 1;
    void v24[4] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v46, v45);
    v24[5] = v39;
    uint64_t v40 = OUTLINED_FUNCTION_61_7();
    LOBYTE(v46) = 2;
    lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type VisualProperty and conformance VisualProperty);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v40, &v46, v45, v40, v41);
    outlined init with take of SiriWorkflowRunnerInput?( v23,  (uint64_t)v28 + OBJC_IVAR____TtCO18SiriLinkFlowPlugin18WorkflowDataModels23DisambiguationItemModel_thumbnail,  &demangling cache variable for type metadata for VisualProperty?);
    a13 = 3;
    lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand and conformance WorkflowDataModels.InvocationCommand();
    KeyedDecodingContainer.decode<A>(_:forKey:)( &type metadata for WorkflowDataModels.InvocationCommand,  &a13,  v45,  &type metadata for WorkflowDataModels.InvocationCommand);
    OUTLINED_FUNCTION_67_14();
    uint64_t v42 = v47;
    unint64_t v43 = v48;
    unint64_t v44 = (char *)v28
        + OBJC_IVAR____TtCO18SiriLinkFlowPlugin18WorkflowDataModels23DisambiguationItemModel_invocationCommand;
    *(_OWORD *)unint64_t v44 = v46;
    *((void *)v44 + outlined consume of WFShowAlertFlow.State(v0, 2) = v42;
    v44[24] = v43;
  }

  OUTLINED_FUNCTION_35_26();
  OUTLINED_FUNCTION_179_0();
  OUTLINED_FUNCTION_13_8();
}

uint64_t protocol witness for Identifiable.id.getter in conformance WorkflowDataModels.DisambiguationItemModel@<X0>( uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for WorkflowDataModels.DisambiguationItemModel(0LL);
  uint64_t result = Identifiable<>.id.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.DisambiguationItemModel@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 128))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.DisambiguationItemModel()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120LL))();
}

void WorkflowDataModels.LinkActionModel.archivedViewData.getter()
{
}

void WorkflowDataModels.LinkActionModel.archivedViewModel.getter(void *a1@<X8>)
{
  uint64_t v7 = &demangling cache variable for type metadata for Data?;
  OUTLINED_FUNCTION_140_3((uint64_t)(v1 + 6), (uint64_t)v9);
  OUTLINED_FUNCTION_140_3((uint64_t)v9, (uint64_t)&v10);
  unint64_t v8 = v11;
  if (v11 >> 60 == 15)
  {
    OUTLINED_FUNCTION_130_4();
  }

  else
  {
    uint64_t v3 = v10;
    uint64_t v4 = *v1;
    uint64_t v2 = v1[1];
    uint64_t v5 = v1[2];
    uint64_t v7 = (uint64_t *)v1[3];
    OUTLINED_FUNCTION_5_14();
    swift_bridgeObjectRetain(v2);
  }

  outlined retain of Data?((uint64_t)v9);
  *a1 = v3;
  a1[1] = v8;
  a1[2] = v4;
  a1[3] = v2;
  a1[4] = v5;
  a1[5] = v7;
  OUTLINED_FUNCTION_105_4();
}

uint64_t WorkflowDataModels.LinkActionModel.CodingKeys.init(stringValue:)(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6C646E7542707061LL && a2 == 0xEB00000000644965LL)
  {
    unint64_t v5 = 0xEB00000000644965LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C646E7542707061LL, 0xEB00000000644965LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6C70736944707061LL && a2 == 0xEE00656D614E7961LL)
  {
    unint64_t v8 = 0xEE00656D614E7961LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C70736944707061LL, 0xEE00656D614E7961LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x74706D6F7270LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v10 = 0xE600000000000000LL;
    goto LABEL_24;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74706D6F7270LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2LL;
  }

  if (a1 == 0xD000000000000010LL && a2 == 0x8000000000197920LL)
  {
    swift_bridgeObjectRelease(0x8000000000197920LL);
    return 3LL;
  }

  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000000197920LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t WorkflowDataModels.LinkActionModel.CodingKeys.init(intValue:)()
{
  return 4LL;
}

uint64_t WorkflowDataModels.LinkActionModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_150B0C + 4 * byte_18B03B[a1]))( 0x6C646E7542707061LL,  0xEB00000000644965LL);
}

uint64_t sub_150B0C()
{
  return 0x6C70736944707061LL;
}

uint64_t sub_150B30()
{
  return 0x74706D6F7270LL;
}

unint64_t sub_150B44()
{
  return 0xD000000000000010LL;
}

void protocol witness for Hashable.hashValue.getter in conformance WorkflowDataModels.LinkActionModel.CodingKeys()
{
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.LinkActionModel.CodingKeys()
{
  return WorkflowDataModels.LinkActionModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.LinkActionModel.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.LinkActionModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance WorkflowDataModels.LinkActionModel.CodingKeys@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = WorkflowDataModels.LinkActionModel.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.LinkActionModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.LinkActionModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.LinkActionModel.encode(to:)()
{
  unint64_t v4 = lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys();
  OUTLINED_FUNCTION_4_51((uint64_t)&unk_1FEDB8, v5, v4);
  uint64_t v6 = *v1;
  uint64_t v7 = v1[1];
  char v8 = 0;
  OUTLINED_FUNCTION_28_26(v6, v7);
  if (!v0)
  {
    OUTLINED_FUNCTION_38_30(v1[2], v1[3], 1);
    OUTLINED_FUNCTION_38_30(v1[4], v1[5], 2);
    OUTLINED_FUNCTION_148_3((uint64_t)(v1 + 6), (uint64_t)v9);
    OUTLINED_FUNCTION_148_3((uint64_t)v9, (uint64_t)&v8);
    lazy protocol witness table accessor for type Data and conformance Data();
    OUTLINED_FUNCTION_112_7();
  }

  OUTLINED_FUNCTION_13_35(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_1_29();
}

void WorkflowDataModels.LinkActionModel.init(from:)()
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.LinkActionModel.CodingKeys>);
  OUTLINED_FUNCTION_4_29();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_51_22();
  OUTLINED_FUNCTION_100_5();
  unint64_t v6 = lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys();
  OUTLINED_FUNCTION_77_15((uint64_t)&unk_1FEDB8, v7, v6);
  if (v0)
  {
    OUTLINED_FUNCTION_51_13();
  }

  else
  {
    LOBYTE(v27[0]) = 0;
    uint64_t v8 = OUTLINED_FUNCTION_59_14((uint64_t)v27, v4);
    uint64_t v10 = v9;
    uint64_t v25 = v8;
    LOBYTE(v27[0]) = 1;
    OUTLINED_FUNCTION_37_21(v8, v9);
    uint64_t v11 = OUTLINED_FUNCTION_114_5((uint64_t)v27, v4);
    uint64_t v26 = v12;
    uint64_t v24 = v11;
    LOBYTE(v27[0]) = 2;
    OUTLINED_FUNCTION_37_21(v11, v12);
    uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v27, v4);
    uint64_t v14 = v13;
    lazy protocol witness table accessor for type Data and conformance Data();
    uint64_t v23 = v14;
    OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_223_0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v15, v16, v17, v18, v19);
    OUTLINED_FUNCTION_85_6(v3, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    uint64_t v20 = v27[0];
    unint64_t v21 = v27[1];
    OUTLINED_FUNCTION_28_8();
    OUTLINED_FUNCTION_9_4();
    OUTLINED_FUNCTION_16_15();
    outlined copy of Data?(v20, v21);
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_56_1();
    OUTLINED_FUNCTION_51_13();
    OUTLINED_FUNCTION_56_1();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_28_4();
    outlined consume of Data?(v20, v21);
    *uint64_t v1 = v25;
    v1[1] = v10;
    v1[2] = v24;
    v1[3] = v26;
    v1[4] = v22;
    v1[5] = v23;
    v1[6] = v20;
    v1[7] = v21;
  }

  OUTLINED_FUNCTION_113_6();
  OUTLINED_FUNCTION_13_8();
}

double protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.LinkActionModel@<D0>( _OWORD *a1@<X8>)
{
  if (!v1)
  {
    *a1 = v4;
    a1[1] = v5;
    double result = *(double *)&v6;
    a1[2] = v6;
    a1[3] = v7;
  }

  return result;
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.LinkActionModel()
{
}

uint64_t WorkflowDataModels.LinkConfirmationModel.linkModel.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of WorkflowDataModels.LinkActionModel(v1, a1);
}

uint64_t WorkflowDataModels.LinkConfirmationModel.isDestructive.getter()
{
  return *(unsigned __int8 *)(v0 + 96);
}

uint64_t WorkflowDataModels.LinkConfirmationModel.CodingKeys.init(stringValue:)( uint64_t a1, unint64_t a2)
{
  if (a1 == 0x65646F4D6B6E696CLL && a2 == 0xE90000000000006CLL)
  {
    unint64_t v5 = 0xE90000000000006CLL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65646F4D6B6E696CLL, 0xE90000000000006CLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x4C6D7269666E6F63LL && a2 == 0xEC0000006C656261LL)
  {
    unint64_t v8 = 0xEC0000006C656261LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4C6D7269666E6F63LL, 0xEC0000006C656261LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x614C6C65636E6163LL && a2 == 0xEB000000006C6562LL)
  {
    unint64_t v10 = 0xEB000000006C6562LL;
    goto LABEL_24;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614C6C65636E6163LL, 0xEB000000006C6562LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2LL;
  }

  if (a1 == 0x7572747365447369LL && a2 == 0xED00006576697463LL)
  {
    swift_bridgeObjectRelease(0xED00006576697463LL);
    return 3LL;
  }

  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7572747365447369LL, 0xED00006576697463LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t WorkflowDataModels.LinkConfirmationModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_151228 + 4 * byte_18B03F[a1]))( 0x65646F4D6B6E696CLL,  0xE90000000000006CLL);
}

uint64_t sub_151228()
{
  return 0x4C6D7269666E6F63LL;
}

uint64_t sub_151248()
{
  return 0x614C6C65636E6163LL;
}

uint64_t sub_151268()
{
  return 0x7572747365447369LL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys()
{
  return WorkflowDataModels.LinkConfirmationModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.LinkConfirmationModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.LinkConfirmationModel.encode(to:)()
{
  unint64_t v5 = lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys();
  OUTLINED_FUNCTION_4_51((uint64_t)&unk_1FED28, v6, v5);
  __int128 v7 = *(_OWORD *)(v2 + 16);
  v15[0] = *(_OWORD *)v2;
  v15[1] = v7;
  __int128 v8 = *(_OWORD *)(v2 + 48);
  v15[2] = *(_OWORD *)(v2 + 32);
  v15[3] = v8;
  char v14 = 0;
  lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel();
  OUTLINED_FUNCTION_44_20((uint64_t)v15, (uint64_t)&v14, v0);
  if (!v1)
  {
    uint64_t v9 = *(void *)(v2 + 64);
    uint64_t v10 = *(void *)(v2 + 72);
    LOBYTE(v15[0]) = 1;
    OUTLINED_FUNCTION_15_13(v9, v10, (uint64_t)v15);
    uint64_t v11 = *(void *)(v2 + 80);
    uint64_t v12 = *(void *)(v2 + 88);
    LOBYTE(v15[0]) = 2;
    OUTLINED_FUNCTION_15_13(v11, v12, (uint64_t)v15);
    uint64_t v13 = *(unsigned __int8 *)(v2 + 96);
    LOBYTE(v15[0]) = 3;
    OUTLINED_FUNCTION_168_1(v13, (uint64_t)v15);
  }

  OUTLINED_FUNCTION_13_35(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_90_9();
  OUTLINED_FUNCTION_1_29();
}

void WorkflowDataModels.LinkConfirmationModel.init(from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  a22 = v24;
  a23 = v25;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.LinkConfirmationModel.CodingKeys>);
  OUTLINED_FUNCTION_4_29();
  __chkstk_darwin(v31);
  OUTLINED_FUNCTION_18_9();
  uint64_t v32 = v27[3];
  uint64_t v33 = v27[4];
  OUTLINED_FUNCTION_102_6(v27);
  unint64_t v34 = lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_1FED28, &unk_1FED28, v34, v32, v33);
  if (v23)
  {
    OUTLINED_FUNCTION_51_13();
  }

  else
  {
    a13 = 0;
    lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel();
    OUTLINED_FUNCTION_120_6( (uint64_t)&type metadata for WorkflowDataModels.LinkActionModel,  (uint64_t)&a13,  v30,  (uint64_t)&type metadata for WorkflowDataModels.LinkActionModel);
    uint64_t v48 = v53[0];
    uint64_t v49 = v29;
    uint64_t v35 = v53[5];
    uint64_t v46 = v53[4];
    uint64_t v47 = v53[2];
    uint64_t v37 = v54;
    unint64_t v36 = v55;
    LOBYTE(v53[0]) = 1;
    OUTLINED_FUNCTION_52_5();
    uint64_t v52 = v53[1];
    OUTLINED_FUNCTION_5_14();
    uint64_t v51 = v53[3];
    OUTLINED_FUNCTION_17_1();
    outlined copy of Data?(v54, v55);
    uint64_t v38 = OUTLINED_FUNCTION_59_14((uint64_t)v53, v30);
    uint64_t v50 = v39;
    if (v52)
    {
      OUTLINED_FUNCTION_32_24();
      OUTLINED_FUNCTION_64_0();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_236_0();
      __swift_destroy_boxed_opaque_existential_1Tm(v27);
      OUTLINED_FUNCTION_64_0();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_236_0();
    }

    else
    {
      uint64_t v44 = v38;
      unint64_t v45 = v36;
      LOBYTE(v53[0]) = 2;
      OUTLINED_FUNCTION_37_21(v38, v39);
      uint64_t v43 = OUTLINED_FUNCTION_59_14((uint64_t)v53, v30);
      LOBYTE(v53[0]) = 3;
      uint64_t v41 = v40;
      OUTLINED_FUNCTION_37_21(v43, v40);
      char v42 = KeyedDecodingContainer.decode(_:forKey:)(v53, v30);
      OUTLINED_FUNCTION_32_24();
      OUTLINED_FUNCTION_11_11();
      OUTLINED_FUNCTION_16_15();
      OUTLINED_FUNCTION_52_5();
      outlined copy of Data?(v37, v45);
      OUTLINED_FUNCTION_64_0();
      OUTLINED_FUNCTION_56_1();
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_202_1();
      __swift_destroy_boxed_opaque_existential_1Tm(v27);
      OUTLINED_FUNCTION_64_0();
      OUTLINED_FUNCTION_56_1();
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_202_1();
      OUTLINED_FUNCTION_2_6();
      OUTLINED_FUNCTION_14();
      *(void *)uint64_t v49 = v48;
      *(void *)(v49 + 8) = 0LL;
      *(void *)(v49 + 16) = v47;
      *(void *)(v49 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24) = v51;
      *(void *)(v49 + 3outlined consume of WFShowAlertFlow.State(v0, 2) = v46;
      *(void *)(v49 + 40) = v35;
      *(void *)(v49 + 48) = v37;
      *(void *)(v49 + 56) = v45;
      *(void *)(v49 + 64) = v44;
      *(void *)(v49 + 7outlined consume of WFShowAlertFlow.State(v0, 2) = v50;
      *(void *)(v49 + 80) = v43;
      *(void *)(v49 + 88) = v41;
      *(_BYTE *)(v49 + 96) = v42 & 1;
    }
  }

  OUTLINED_FUNCTION_113_6();
  OUTLINED_FUNCTION_13_8();
}

void protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.LinkConfirmationModel( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  if (!v9) {
    memcpy(a9, __src, 0x61uLL);
  }
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.LinkConfirmationModel()
{
}

uint64_t WorkflowDataModels.AutoShortcutFirstRunModel.viewModel.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AutoShortcutAppPhrasesViewModel(v1, a1);
}

void WorkflowDataModels.AutoShortcutFirstRunModel.cancelLabel.getter()
{
}

uint64_t WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys.init(stringValue:)( uint64_t a1, unint64_t a2)
{
  if (a1 == 0x65646F4D77656976LL && a2 == 0xE90000000000006CLL)
  {
    unint64_t v5 = 0xE90000000000006CLL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65646F4D77656976LL, 0xE90000000000006CLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x4C6D7269666E6F63LL && a2 == 0xEC0000006C656261LL)
  {
    unint64_t v8 = 0xEC0000006C656261LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4C6D7269666E6F63LL, 0xEC0000006C656261LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x614C6C65636E6163LL && a2 == 0xEB000000006C6562LL)
  {
    swift_bridgeObjectRelease(0xEB000000006C6562LL);
    return 2LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x614C6C65636E6163LL, 0xEB000000006C6562LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x65646F4D77656976LL;
  }
  if (a1 == 1) {
    return 0x4C6D7269666E6F63LL;
  }
  return 0x614C6C65636E6163LL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys()
{
  return WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys( uint64_t a1)
{
  unint64_t Run = lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys();
  return CodingKey.description.getter(a1, Run);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys( uint64_t a1)
{
  unint64_t Run = lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys();
  return CodingKey.debugDescription.getter(a1, Run);
}

void WorkflowDataModels.AutoShortcutFirstRunModel.encode(to:)()
{
  unint64_t Run = lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys();
  OUTLINED_FUNCTION_4_51((uint64_t)&unk_1FEC98, v6, Run);
  memcpy(v12, v2, sizeof(v12));
  char v11 = 0;
  lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel();
  OUTLINED_FUNCTION_44_20((uint64_t)v12, (uint64_t)&v11, v0);
  if (!v1)
  {
    uint64_t v7 = v2[10];
    uint64_t v8 = v2[11];
    LOBYTE(v12[0]) = 1;
    OUTLINED_FUNCTION_15_13(v7, v8, (uint64_t)v12);
    uint64_t v9 = v2[12];
    uint64_t v10 = v2[13];
    LOBYTE(v12[0]) = 2;
    OUTLINED_FUNCTION_15_13(v9, v10, (uint64_t)v12);
  }

  OUTLINED_FUNCTION_13_35(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_90_9();
  OUTLINED_FUNCTION_1_29();
}

void WorkflowDataModels.AutoShortcutFirstRunModel.init(from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  a22 = v27;
  a23 = v28;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys>);
  OUTLINED_FUNCTION_69_12();
  __chkstk_darwin(v34);
  OUTLINED_FUNCTION_75_14();
  unint64_t Run = lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys();
  OUTLINED_FUNCTION_136_1((uint64_t)&unk_1FEC98, (uint64_t)&unk_1FEC98, Run, v25);
  if (v23)
  {
    OUTLINED_FUNCTION_51_13();
  }

  else
  {
    a13 = 0;
    lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel();
    OUTLINED_FUNCTION_120_6( (uint64_t)&type metadata for AutoShortcutAppPhrasesViewModel,  (uint64_t)&a13,  v33,  (uint64_t)&type metadata for AutoShortcutAppPhrasesViewModel);
    uint64_t v36 = v54[0];
    uint64_t v50 = v54[1];
    uint64_t v51 = v32;
    uint64_t v37 = v54[5];
    uint64_t v48 = v54[4];
    uint64_t v49 = v54[2];
    uint64_t v38 = v54[7];
    uint64_t v39 = v54[9];
    uint64_t v46 = v54[8];
    uint64_t v47 = v54[6];
    LOBYTE(v54[0]) = 1;
    OUTLINED_FUNCTION_28_8();
    OUTLINED_FUNCTION_5_14();
    uint64_t v53 = v54[3];
    OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_9_4();
    OUTLINED_FUNCTION_16_15();
    uint64_t v40 = OUTLINED_FUNCTION_59_14((uint64_t)v54, v33);
    uint64_t v52 = v41;
    if (v36)
    {
      OUTLINED_FUNCTION_9_8(v24, *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
      OUTLINED_FUNCTION_28_4();
      OUTLINED_FUNCTION_56_1();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_2_6();
      __swift_destroy_boxed_opaque_existential_1Tm(v30);
      OUTLINED_FUNCTION_64_0();
      OUTLINED_FUNCTION_2_6();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_28_4();
    }

    else
    {
      uint64_t v45 = v40;
      LOBYTE(v54[0]) = 2;
      OUTLINED_FUNCTION_37_21(v40, v41);
      OUTLINED_FUNCTION_59_14((uint64_t)v54, v33);
      OUTLINED_FUNCTION_181_1();
      uint64_t v44 = v42;
      OUTLINED_FUNCTION_9_8(v24, v43);
      OUTLINED_FUNCTION_54_7();
      OUTLINED_FUNCTION_11_11();
      OUTLINED_FUNCTION_9_4();
      OUTLINED_FUNCTION_52_5();
      OUTLINED_FUNCTION_28_8();
      OUTLINED_FUNCTION_17_1();
      OUTLINED_FUNCTION_28_4();
      OUTLINED_FUNCTION_64_0();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_2_6();
      __swift_destroy_boxed_opaque_existential_1Tm(v30);
      OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_14();
      OUTLINED_FUNCTION_28_4();
      OUTLINED_FUNCTION_64_0();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_2_6();
      *uint64_t v51 = 0LL;
      v51[1] = v50;
      v51[2] = v49;
      v51[3] = v53;
      v51[4] = v48;
      v51[5] = v37;
      v51[6] = v47;
      v51[7] = v38;
      v51[8] = v46;
      v51[9] = v39;
      v51[10] = v45;
      v51[11] = v52;
      v51[12] = v44;
      v51[13] = v24;
    }
  }

  OUTLINED_FUNCTION_113_6();
  OUTLINED_FUNCTION_13_8();
}

uint64_t *protocol witness for SnippetPluginModelProviding.asSnippetPluginModel() in conformance WorkflowDataModels.AutoShortcutFirstRunModel@<X0>( uint64_t a1@<X8>)
{
  return WorkflowDataModels.AutoShortcutFirstRunModel.asSnippetPluginModel()(a1);
}

void protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.AutoShortcutFirstRunModel( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  if (!v9) {
    memcpy(a9, v11, 0x70uLL);
  }
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.AutoShortcutFirstRunModel()
{
}

uint64_t static WorkflowDataModels.getThumbnail(shortcutName:defaultAppIdentifier:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  void v5[4] = a5;
  void v5[2] = a1;
  uint64_t v6 = type metadata accessor for ImageElement.ImageStyle(0LL);
  v5[5] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[6] = v7;
  v5[7] = OUTLINED_FUNCTION_9_0(v7);
  uint64_t v8 = type metadata accessor for ImageElement(0LL);
  v5[8] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[9] = v9;
  v5[10] = OUTLINED_FUNCTION_9_0(v9);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t static WorkflowDataModels.getThumbnail(shortcutName:defaultAppIdentifier:)()
{
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v16 = *(void *)(v0 + 72);
  uint64_t v17 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v7 = *(void *)(v0 + 24);
  uint64_t v15 = *(void *)(v0 + 32);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))( v4,  enum case for ImageElement.ImageStyle.default(_:),  v6);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_ProtoIdiom>);
  uint64_t v9 = type metadata accessor for _ProtoIdiom(0LL);
  OUTLINED_FUNCTION_99_4();
  uint64_t v12 = swift_allocObject(v8, v10, v11);
  *(_OWORD *)(v12 + 16) = xmmword_17E650;
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v12 + v2, enum case for _ProtoIdiom.default(_:), v9);
  uint64_t v13 = specialized Set.init(_nonEmptyArrayLiteral:)(v12);
  static ImageElement.appIcon(_:imageStyle:idioms:)(v7, v15, v4, v13);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  ImageElement.convertToVisualProperty()();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v3, v17);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t WorkflowDataModels.CodingKeys.init(stringValue:)(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x72656C41776F6873LL && a2 == 0xED00007765695674LL)
  {
    unint64_t v5 = 0xED00007765695674LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72656C41776F6873LL, 0xED00007765695674LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x4354656C62616E65LL && a2 == 0xED00007765695643LL)
  {
    unint64_t v8 = 0xED00007765695643LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4354656C62616E65LL, 0xED00007765695643LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0xD00000000000001CLL && a2 == 0x8000000000197980LL)
  {
    unint64_t v9 = 0x8000000000197980LL;
LABEL_22:
    swift_bridgeObjectRelease(v9);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x8000000000197980LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_22;
  }

  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v10 = 0x80000000001979A0LL;
    if (a2 == 0x80000000001979A0LL) {
      goto LABEL_27;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x80000000001979A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_27:
    swift_bridgeObjectRelease(v10);
    return 3LL;
  }

  if (a1 == 0xD000000000000017LL && a2 == 0x80000000001979C0LL)
  {
    unint64_t v11 = 0x80000000001979C0LL;
LABEL_33:
    swift_bridgeObjectRelease(v11);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x80000000001979C0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_33;
  }

  if (a1 == 0xD000000000000011LL && a2 == 0x80000000001979E0LL)
  {
    unint64_t v12 = 0x80000000001979E0LL;
LABEL_39:
    swift_bridgeObjectRelease(v12);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000000001979E0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_39;
  }

  if (a1 == 0x6569566863746177LL && a2 == 0xE900000000000077LL)
  {
    unint64_t v14 = 0xE900000000000077LL;
    goto LABEL_47;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6569566863746177LL, 0xE900000000000077LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
LABEL_47:
    swift_bridgeObjectRelease(v14);
    return 6LL;
  }

  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v15 = 0x8000000000197A00LL;
    if (a2 == 0x8000000000197A00LL) {
      goto LABEL_52;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x8000000000197A00LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
LABEL_52:
    swift_bridgeObjectRelease(v15);
    return 7LL;
  }

  if (a1 == 0xD000000000000020LL && a2 == 0x8000000000197A20LL)
  {
    unint64_t v16 = 0x8000000000197A20LL;
LABEL_58:
    swift_bridgeObjectRelease(v16);
    return 8LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000020LL, 0x8000000000197A20LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v16 = a2;
    goto LABEL_58;
  }

  if (a1 == 0x697463416B6E696CLL && a2 == 0xEE00776569566E6FLL)
  {
    unint64_t v18 = 0xEE00776569566E6FLL;
    goto LABEL_66;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x697463416B6E696CLL, 0xEE00776569566E6FLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v18 = a2;
LABEL_66:
    swift_bridgeObjectRelease(v18);
    return 9LL;
  }

  if (a1 == 0xD000000000000014LL && a2 == 0x8000000000197A50LL)
  {
    unint64_t v19 = 0x8000000000197A50LL;
LABEL_72:
    swift_bridgeObjectRelease(v19);
    return 10LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x8000000000197A50LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v19 = a2;
    goto LABEL_72;
  }

  if (a1 == 0xD00000000000001ELL && a2 == 0x8000000000197A70LL)
  {
    unint64_t v20 = 0x8000000000197A70LL;
LABEL_78:
    swift_bridgeObjectRelease(v20);
    return 11LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x8000000000197A70LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v20 = a2;
    goto LABEL_78;
  }

  if (a1 == 0xD000000000000018LL && a2 == 0x8000000000197A90LL)
  {
    swift_bridgeObjectRelease(0x8000000000197A90LL);
    return 12LL;
  }

  else
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x8000000000197A90LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v21 & 1) != 0) {
      return 12LL;
    }
    else {
      return 13LL;
    }
  }

uint64_t WorkflowDataModels.CodingKeys.init(intValue:)()
{
  return 13LL;
}

void WorkflowDataModels.ShowAlertModel.CodingKeys.hashValue.getter(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  OUTLINED_FUNCTION_73_5(a1);
  Hasher._combine(_:)(v1);
  OUTLINED_FUNCTION_2_40();
  OUTLINED_FUNCTION_23_8();
}

uint64_t WorkflowDataModels.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_152540 + 4 * byte_18B043[a1]))( 0x72656C41776F6873LL,  0xED00007765695674LL);
}

uint64_t sub_152540()
{
  return 0x4354656C62616E65LL;
}

unint64_t sub_152564()
{
  return 0xD00000000000001CLL;
}

void WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000LL)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    _stringCompareWithSmolCheck(_:_:expecting:)(12383LL, 0xE200000000000000LL, a1, a2, 0LL);
    OUTLINED_FUNCTION_58_2();
  }

  OUTLINED_FUNCTION_1();
}

void WorkflowDataModels.InvocationCommand.StartRequestCodingKeys.hashValue.getter(uint64_t a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys( uint64_t a1)
{
  unint64_t RunViewCoding = lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys();
  return CodingKey.description.getter(a1, RunViewCoding);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys( uint64_t a1)
{
  unint64_t RunViewCoding = lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys();
  return CodingKey.debugDescription.getter(a1, RunViewCoding);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance WorkflowDataModels.ShowAlertModel.CodingKeys( uint64_t a1, uint64_t a2)
{
  int v2 = OUTLINED_FUNCTION_217_0(a1, a2);
  OUTLINED_FUNCTION_219_0(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
  OUTLINED_FUNCTION_2_40();
  OUTLINED_FUNCTION_23_8();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.CodingKeys()
{
  return WorkflowDataModels.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance WorkflowDataModels.CodingKeys@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = WorkflowDataModels.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.ConfirmActionViewCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.ConfirmActionViewCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.EnableTCCViewCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.EnableTCCViewCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.LinkActionViewCodingKeys( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  *a3 = v4 & 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.LinkActionViewCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.LinkActionViewCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.LinkConfirmationViewCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.LinkConfirmationViewCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.ShowAlertViewCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.ShowAlertViewCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys( uint64_t a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.WatchViewCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.WatchViewCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.encode(to:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v21;
  a20 = v22;
  uint64_t v24 = v23;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys>);
  uint64_t v102 = *(void *)(v25 - 8);
  uint64_t v103 = v25;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v26);
  OUTLINED_FUNCTION_83();
  uint64_t v101 = v27;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys>);
  OUTLINED_FUNCTION_20_14(v28, (uint64_t)&a18);
  OUTLINED_FUNCTION_107_4(v29);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v30);
  OUTLINED_FUNCTION_22_34((uint64_t)v85 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.LinkConfirmationViewCodingKeys>);
  OUTLINED_FUNCTION_20_14(v32, (uint64_t)&a16);
  OUTLINED_FUNCTION_160_2(v33);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v34);
  OUTLINED_FUNCTION_22_34((uint64_t)v85 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.LinkActionViewCodingKeys>);
  OUTLINED_FUNCTION_20_14(v36, (uint64_t)&a12);
  uint64_t v100 = v37;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v38);
  OUTLINED_FUNCTION_22_34((uint64_t)v85 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys>);
  OUTLINED_FUNCTION_20_14(v40, (uint64_t)&a9);
  uint64_t v99 = v41;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v42);
  OUTLINED_FUNCTION_22_34((uint64_t)v85 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.DisambiguateItemsViewCodingKeys>);
  OUTLINED_FUNCTION_20_14(v44, (uint64_t)&v109);
  uint64_t v98 = v45;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v46);
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_22_34(v47);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.WatchViewCodingKeys>);
  OUTLINED_FUNCTION_20_14(v48, (uint64_t)&v108);
  uint64_t v97 = v49;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v50);
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_22_34(v51);
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.ConfirmActionViewCodingKeys>);
  OUTLINED_FUNCTION_20_14(v52, (uint64_t)&v107);
  uint64_t v96 = v53;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v54);
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_22_34(v55);
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.CustomIntentHandledViewCodingKeys>);
  OUTLINED_FUNCTION_20_14(v56, (uint64_t)&v106);
  uint64_t v95 = v57;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v58);
  OUTLINED_FUNCTION_83();
  uint64_t v94 = v59;
  uint64_t v60 = OUTLINED_FUNCTION_49_13();
  uint64_t v93 = type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(v60);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v61);
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_22_34(v62);
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.CustomIntentErrorViewCodingKeys>);
  OUTLINED_FUNCTION_20_14(v63, (uint64_t)&v105);
  uint64_t v92 = v64;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v65);
  OUTLINED_FUNCTION_83();
  uint64_t v91 = v66;
  uint64_t v67 = OUTLINED_FUNCTION_49_13();
  uint64_t v89 = type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(v67);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v68);
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_22_34(v69);
  uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.CustomIntentConfirmationViewCodingKeys>);
  uint64_t v88 = *(void *)(v90 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v70);
  OUTLINED_FUNCTION_83();
  uint64_t v87 = v71;
  uint64_t v72 = OUTLINED_FUNCTION_49_13();
  v85[3] = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(v72);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v73);
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_22_34(v74);
  uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.EnableTCCViewCodingKeys>);
  v85[2] = *(void *)(v86 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v75);
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_22_34(v76);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.ShowAlertViewCodingKeys>);
  OUTLINED_FUNCTION_146_2();
  __chkstk_darwin(v77);
  uint64_t v78 = OUTLINED_FUNCTION_88_8();
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v79);
  OUTLINED_FUNCTION_27_18();
  a10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.CodingKeys>);
  uint64_t v104 = *(void *)(a10 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v80);
  OUTLINED_FUNCTION_51_22();
  uint64_t v81 = v24[3];
  uint64_t v82 = v24[4];
  __swift_project_boxed_opaque_existential_1(v24, v81);
  unint64_t v83 = lazy protocol witness table accessor for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_1FE4B8, &unk_1FE4B8, v83, v81, v82);
  outlined init with copy of AutoShortcutInvocation(v105, v20, type metadata accessor for WorkflowDataModels);
  uint64_t v84 = (char *)sub_153084 + 4 * word_18B050[swift_getEnumCaseMultiPayload(v20, v78)];
  __asm { BR              X10 }

void sub_153084()
{
  uint64_t v6 = *v2;
  uint64_t v7 = v2[1];
  *(void *)(v5 - 208) = v7;
  uint64_t v8 = v2[3];
  *(void *)(v5 - 248) = v2[2];
  *(void *)(v5 - 240) = v6;
  uint64_t v9 = v2[5];
  *(void *)(v5 - 256) = v2[4];
  *(void *)(v5 - 264) = v2[6];
  OUTLINED_FUNCTION_107_4(v2[7]);
  *(_BYTE *)(v5 - 200) = 0;
  lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys();
  OUTLINED_FUNCTION_104_7((uint64_t)&unk_1FE548, v5 - 200);
  *(void *)(v5 - 200) = *(void *)(v5 - 240);
  *(void *)(v5 - 19outlined consume of WFShowAlertFlow.State(v0, 2) = v7;
  *(void *)(v5 - 184) = *(void *)(v5 - 248);
  *(void *)(v5 - 176) = v8;
  *(void *)(v5 - 168) = *(void *)(v5 - 256);
  *(void *)(v5 - 160) = v9;
  uint64_t v10 = *(void *)(v5 - 272);
  *(void *)(v5 - 15outlined consume of WFShowAlertFlow.State(v0, 2) = *(void *)(v5 - 264);
  *(void *)(v5 - 144) = v10;
  lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertModel and conformance WorkflowDataModels.ShowAlertModel();
  OUTLINED_FUNCTION_49_23(v5 - 200, v11, v4);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v4);
  OUTLINED_FUNCTION_9_8(v0, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 232) + 8LL));
  OUTLINED_FUNCTION_28_4();
  OUTLINED_FUNCTION_64_0();
  OUTLINED_FUNCTION_154_3();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_13_8();
}

void WorkflowDataModels.init(from:)()
{
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_107_4(v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys>);
  OUTLINED_FUNCTION_20_14(v5, (uint64_t)&v118);
  v101[25] = v6;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_22_34(v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys>);
  OUTLINED_FUNCTION_20_14(v9, (uint64_t)&v117);
  v101[24] = v10;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_22_34((uint64_t)v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.LinkConfirmationViewCodingKeys>);
  OUTLINED_FUNCTION_20_14(v13, (uint64_t)&v116);
  v101[23] = v14;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_22_34(v16);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.LinkActionViewCodingKeys>);
  OUTLINED_FUNCTION_20_14(v17, (uint64_t)&v115);
  v101[22] = v18;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_22_34((uint64_t)v101 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys>);
  v101[21] = *(void *)(v103 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v21);
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_22_34(v22);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.DisambiguateItemsViewCodingKeys>);
  OUTLINED_FUNCTION_20_14(v23, (uint64_t)&v114);
  v101[20] = v24;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v25);
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_22_34(v26);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.WatchViewCodingKeys>);
  OUTLINED_FUNCTION_20_14(v27, (uint64_t)&v113);
  v101[19] = v28;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v29);
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_22_34(v30);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.ConfirmActionViewCodingKeys>);
  OUTLINED_FUNCTION_20_14(v31, (uint64_t)&v112);
  v101[18] = v32;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v33);
  OUTLINED_FUNCTION_22_34((uint64_t)v101 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.CustomIntentHandledViewCodingKeys>);
  OUTLINED_FUNCTION_20_14(v35, (uint64_t)&v111);
  v101[17] = v36;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v37);
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_22_34(v38);
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.CustomIntentErrorViewCodingKeys>);
  OUTLINED_FUNCTION_20_14(v39, (uint64_t)&v110);
  uint64_t v107 = v40;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v41);
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_22_34(v42);
  uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.CustomIntentConfirmationViewCodingKeys>);
  v101[16] = *(void *)(v102 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v43);
  OUTLINED_FUNCTION_22_34((uint64_t)v101 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.EnableTCCViewCodingKeys>);
  OUTLINED_FUNCTION_20_14(v45, (uint64_t)&v109);
  v101[15] = v46;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v47);
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_22_34(v48);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.ShowAlertViewCodingKeys>);
  OUTLINED_FUNCTION_20_14(v49, (uint64_t)&v108);
  v101[14] = v50;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v51);
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_22_34(v52);
  uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.CodingKeys>);
  uint64_t v105 = *(void *)(v108 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v53);
  uint64_t v104 = OUTLINED_FUNCTION_88_8();
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v54);
  OUTLINED_FUNCTION_43_11();
  __chkstk_darwin(v55);
  OUTLINED_FUNCTION_32_22();
  OUTLINED_FUNCTION_43_11();
  __chkstk_darwin(v56);
  OUTLINED_FUNCTION_32_22();
  OUTLINED_FUNCTION_43_11();
  __chkstk_darwin(v57);
  OUTLINED_FUNCTION_32_22();
  OUTLINED_FUNCTION_43_11();
  __chkstk_darwin(v58);
  OUTLINED_FUNCTION_32_22();
  OUTLINED_FUNCTION_43_11();
  __chkstk_darwin(v59);
  OUTLINED_FUNCTION_32_22();
  OUTLINED_FUNCTION_43_11();
  __chkstk_darwin(v60);
  OUTLINED_FUNCTION_32_22();
  OUTLINED_FUNCTION_43_11();
  __chkstk_darwin(v61);
  OUTLINED_FUNCTION_32_22();
  OUTLINED_FUNCTION_43_11();
  __chkstk_darwin(v62);
  OUTLINED_FUNCTION_32_22();
  OUTLINED_FUNCTION_43_11();
  uint64_t v64 = __chkstk_darwin(v63);
  uint64_t v66 = (char *)v101 - v65;
  uint64_t v67 = __chkstk_darwin(v64);
  uint64_t v69 = (char *)v101 - v68;
  uint64_t v70 = __chkstk_darwin(v67);
  uint64_t v72 = (char *)v101 - v71;
  uint64_t v73 = __chkstk_darwin(v70);
  uint64_t v75 = (char *)v101 - v74;
  __chkstk_darwin(v73);
  uint64_t v76 = v3[3];
  uint64_t v109 = v3;
  __swift_project_boxed_opaque_existential_1(v3, v76);
  lazy protocol witness table accessor for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys();
  uint64_t v106 = v1;
  OUTLINED_FUNCTION_192_0();
  OUTLINED_FUNCTION_193_1(v77, v78, v79);
  if (v0)
  {
    uint64_t v80 = v109;
  }

  else
  {
    v101[2] = v75;
    v101[3] = v72;
    v101[4] = v69;
    v101[5] = v66;
    uint64_t v81 = v106;
    uint64_t v82 = KeyedDecodingContainer.allKeys.getter(v108);
    uint64_t v83 = *(void *)(v82 + 16);
    if (v83)
    {
      v101[1] = 0LL;
      uint64_t v84 = *(unsigned __int8 *)(v82 + 32);
      specialized ArraySlice.subscript.getter(1LL, v83, v82, v82 + 32, 0LL, (2 * v83) | 1);
      uint64_t v86 = v85;
      unint64_t v88 = v87;
      OUTLINED_FUNCTION_64_0();
      if (v86 == v88 >> 1) {
        __asm { BR              X9 }
      }
    }

    uint64_t v89 = v108;
    uint64_t v80 = v109;
    uint64_t v90 = v104;
    uint64_t v91 = OUTLINED_FUNCTION_229_0();
    OUTLINED_FUNCTION_28_0(v91, (uint64_t)&protocol witness table for DecodingError);
    uint64_t v93 = v92;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t *v93 = v90;
    uint64_t v94 = KeyedDecodingContainer.codingPath.getter(v89);
    uint64_t v95 = OUTLINED_FUNCTION_93_5(v94, (uint64_t)"Invalid number of keys found, expected one.");
    uint64_t v96 = OUTLINED_FUNCTION_129_4(v95, enum case for DecodingError.typeMismatch(_:));
    swift_willThrow(v96, v97, v98, v99, v100);
    OUTLINED_FUNCTION_6_10();
    (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v81, v89);
  }

  __swift_destroy_boxed_opaque_existential_1Tm(v80);
  OUTLINED_FUNCTION_195_0();
  OUTLINED_FUNCTION_13_8();
}

uint64_t WatchViewType.CodingKeys.init(stringValue:)(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x616D7269666E6F63LL && a2 == 0xEC0000006E6F6974LL)
  {
    unint64_t v5 = 0xEC0000006E6F6974LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x616D7269666E6F63LL, 0xEC0000006E6F6974LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x64656C646E6168LL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
    return 1LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x64656C646E6168LL, 0xE700000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t WatchViewType.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x64656C646E6168LL;
  }
  else {
    return 0x616D7269666E6F63LL;
  }
}

uint64_t WatchViewType.ConfirmationCodingKeys.init(stringValue:)(uint64_t a1, unint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000LL)
  {
    unint64_t v5 = 0xE200000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(12383LL, 0xE200000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 12639 && a2 == 0xE200000000000000LL)
  {
    swift_bridgeObjectRelease(0xE200000000000000LL);
    return 1LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(12639LL, 0xE200000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

void WorkflowDataModels.CustomIntentErrorModel.CodingKeys.hashValue.getter(uint64_t a1)
{
  char v1 = a1;
  OUTLINED_FUNCTION_73_5(a1);
  Hasher._combine(_:)(v1 & 1);
  OUTLINED_FUNCTION_2_40();
  OUTLINED_FUNCTION_23_8();
}

uint64_t WatchViewType.ConfirmationCodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 12639LL;
  }
  else {
    return 12383LL;
  }
}

uint64_t WatchViewType.HandledCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void protocol witness for Decodable.init(from:) in conformance WorkflowDataModels()
{
}

#error "154E1C: call analysis failed (funcsize=5)"
uint64_t protocol witness for SnippetPluginModelProviding.asSnippetPluginModel() in conformance AutoShortcutAppPhrasesViewModel@<X0>( void *a1@<X8>)
{
  const void *v1;
  _BYTE v4[80];
  memcpy(v4, v1, sizeof(v4));
  return AutoShortcutAppPhrasesViewModel.asSnippetPluginModel()(a1);
}

void protocol witness for Hashable.hashValue.getter in conformance WatchViewType.CodingKeys()
{
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WatchViewType.CodingKeys()
{
  return WatchViewType.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WatchViewType.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = WatchViewType.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WatchViewType.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WatchViewType.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WatchViewType.ConfirmationCodingKeys()
{
  return WatchViewType.ConfirmationCodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WatchViewType.ConfirmationCodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = WatchViewType.ConfirmationCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WatchViewType.ConfirmationCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WatchViewType.ConfirmationCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WatchViewType.HandledCodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = WatchViewType.HandledCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WatchViewType.HandledCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WatchViewType.HandledCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void WatchViewType.encode(to:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v29;
  a24 = v30;
  uint64_t v51 = v31;
  uint64_t v45 = v32;
  uint64_t v46 = v33;
  uint64_t v49 = v34;
  uint64_t v36 = v35;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WatchViewType.HandledCodingKeys>);
  uint64_t v47 = *(void *)(v37 - 8);
  uint64_t v48 = v37;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v38);
  OUTLINED_FUNCTION_51_22();
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WatchViewType.ConfirmationCodingKeys>);
  uint64_t v50 = *(void *)(v39 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v40);
  OUTLINED_FUNCTION_27_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WatchViewType.CodingKeys>);
  OUTLINED_FUNCTION_4_29();
  __chkstk_darwin(v41);
  OUTLINED_FUNCTION_53_1();
  uint64_t v43 = v36[3];
  uint64_t v42 = v36[4];
  __swift_project_boxed_opaque_existential_1(v36, v43);
  unint64_t v44 = lazy protocol witness table accessor for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_1FE378, &unk_1FE378, v44, v43, v42);
  if (v51)
  {
    a13 = 0;
    lazy protocol witness table accessor for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys();
    OUTLINED_FUNCTION_143_5((uint64_t)&unk_1FE408, (uint64_t)&a13);
    a12 = 0;
    KeyedEncodingContainer.encode(_:forKey:)(v49, v51, &a12, v39);
    if (!v24)
    {
      a11 = 1;
      KeyedEncodingContainer.encode(_:forKey:)(v45, v46, &a11, v39);
    }

    OUTLINED_FUNCTION_85_6(v26, *(uint64_t (**)(uint64_t, uint64_t))(v50 + 8));
    OUTLINED_FUNCTION_27_32(v25, *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
  }

  else
  {
    OUTLINED_FUNCTION_198_1();
    OUTLINED_FUNCTION_143_5((uint64_t)&unk_1FE428, (uint64_t)&a14);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v28, v48);
    OUTLINED_FUNCTION_27_32(v25, *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
  }

  OUTLINED_FUNCTION_13_8();
}

void WatchViewType.init(from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v29;
  a24 = v30;
  uint64_t v32 = v31;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WatchViewType.HandledCodingKeys>);
  uint64_t v59 = *(void *)(v33 - 8);
  uint64_t v60 = v33;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v34);
  OUTLINED_FUNCTION_119_6(v35, v58);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WatchViewType.ConfirmationCodingKeys>);
  uint64_t v36 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  OUTLINED_FUNCTION_27_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WatchViewType.CodingKeys>);
  OUTLINED_FUNCTION_14_43();
  __chkstk_darwin(v37);
  OUTLINED_FUNCTION_18_9();
  __swift_project_boxed_opaque_existential_1(v32, v32[3]);
  lazy protocol witness table accessor for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys();
  OUTLINED_FUNCTION_192_0();
  OUTLINED_FUNCTION_193_1(v38, v39, v40);
  if (v25) {
    goto LABEL_8;
  }
  uint64_t v41 = v27;
  uint64_t v42 = KeyedDecodingContainer.allKeys.getter(v24);
  uint64_t v43 = *(void *)(v42 + 16);
  if (!v43
    || (char v44 = *(_BYTE *)(v42 + 32),
        specialized ArraySlice.subscript.getter(1LL, v43, v42, v42 + 32, 0LL, (2 * v43) | 1),
        uint64_t v46 = v45,
        unint64_t v48 = v47,
        OUTLINED_FUNCTION_56_1(),
        v46 != v48 >> 1))
  {
    uint64_t v49 = OUTLINED_FUNCTION_229_0();
    OUTLINED_FUNCTION_28_0(v49, (uint64_t)&protocol witness table for DecodingError);
    uint64_t v51 = v50;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v51 = &type metadata for WatchViewType;
    uint64_t v52 = KeyedDecodingContainer.codingPath.getter(v24);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( v52,  0xD00000000000002BLL,  0x8000000000193E40LL,  0LL);
    uint64_t v53 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v49 - 8) + 104LL))( v51,  enum case for DecodingError.typeMismatch(_:),  v49);
    swift_willThrow(v53, v54, v55, v56, v57);
    OUTLINED_FUNCTION_108_4();
    OUTLINED_FUNCTION_20_23(v41, *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
LABEL_8:
    __swift_destroy_boxed_opaque_existential_1Tm(v32);
    goto LABEL_9;
  }

  if ((v44 & 1) != 0)
  {
    OUTLINED_FUNCTION_198_1();
    OUTLINED_FUNCTION_194_0((uint64_t)&unk_1FE428, (uint64_t)&a14, v24);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v61, v60);
    OUTLINED_FUNCTION_108_4();
    OUTLINED_FUNCTION_20_23(v41, *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
  }

  else
  {
    a13 = 0;
    lazy protocol witness table accessor for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys();
    OUTLINED_FUNCTION_194_0((uint64_t)&unk_1FE408, (uint64_t)&a13, v24);
    a12 = 0;
    OUTLINED_FUNCTION_59_14((uint64_t)&a12, v62);
    a11 = 1;
    OUTLINED_FUNCTION_59_14((uint64_t)&a11, v62);
    OUTLINED_FUNCTION_9_8(v26, *(uint64_t (**)(uint64_t, uint64_t))(v36 + 8));
    OUTLINED_FUNCTION_108_4();
    OUTLINED_FUNCTION_85_6(v41, *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
  }

  OUTLINED_FUNCTION_231();
LABEL_9:
  OUTLINED_FUNCTION_195_0();
  OUTLINED_FUNCTION_13_8();
}

#error "155564: call analysis failed (funcsize=11)"
#error "155590: call analysis failed (funcsize=7)"
uint64_t *outlined retain of WorkflowDataModels.AutoShortcutFirstRunModel(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v2 = *a1;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  unint64_t v5 = a1[7];
  uint64_t v6 = a1[11];
  uint64_t v7 = a1[13];
  swift_bridgeObjectRetain(a1[9]);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for WorkflowDataModels.CustomIntentConfirmationModel,  (uint64_t)&nominal type descriptor for WorkflowDataModels.CustomIntentConfirmationModel);
}

void *outlined retain of WorkflowDataModels.LinkConfirmationModel(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[6];
  unint64_t v5 = a1[7];
  uint64_t v6 = a1[9];
  uint64_t v7 = a1[11];
  swift_bridgeObjectRetain(a1[5]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  outlined copy of Data?(v4, v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t *outlined retain of AutoShortcutAppPhrasesViewModel(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[7];
  swift_bridgeObjectRetain(a1[9]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *outlined retain of WorkflowDataModels.ShowAlertModel(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[7];
  swift_bridgeObjectRetain(a1[5]);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.ShowAlertModel.CodingKeys,  &unk_1FF628);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.ShowAlertModel.CodingKeys,  &unk_1FF628);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.ShowAlertModel.CodingKeys,  &unk_1FF628);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.ShowAlertModel.CodingKeys,  &unk_1FF628);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.EnableTCCModel.CodingKeys,  &unk_1FF598);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.EnableTCCModel.CodingKeys,  &unk_1FF598);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.EnableTCCModel.CodingKeys,  &unk_1FF598);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.EnableTCCModel.CodingKeys,  &unk_1FF598);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys);
  }

  return result;
}

uint64_t outlined copy of WatchViewType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }

  return result;
}

void *outlined retain of WorkflowDataModels.WatchModel(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[7];
  uint64_t v7 = a1[9];
  swift_bridgeObjectRetain(a1[1]);
  outlined copy of WatchViewType(v2, v3, v4, v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v6);
  return a1;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.WatchModel.CodingKeys,  &unk_1FF508);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.WatchModel.CodingKeys,  &unk_1FF508);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.WatchModel.CodingKeys,  &unk_1FF508);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.WatchModel.CodingKeys,  &unk_1FF508);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WatchViewType and conformance WatchViewType()
{
  unint64_t result = lazy protocol witness table cache variable for type WatchViewType and conformance WatchViewType;
  if (!lazy protocol witness table cache variable for type WatchViewType and conformance WatchViewType)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for WatchViewType, &type metadata for WatchViewType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType and conformance WatchViewType);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WatchViewType and conformance WatchViewType;
  if (!lazy protocol witness table cache variable for type WatchViewType and conformance WatchViewType)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for WatchViewType, &type metadata for WatchViewType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType and conformance WatchViewType);
  }

  return result;
}

uint64_t outlined consume of WatchViewType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentModel.CodingKeys,  &unk_1FF478);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentModel.CodingKeys,  &unk_1FF478);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentModel.CodingKeys,  &unk_1FF478);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentModel.CodingKeys,  &unk_1FF478);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys);
  }

  return result;
}

void lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction( uint64_t a1)
{
  if (!OUTLINED_FUNCTION_156_1(a1))
  {
    uint64_t v3 = v2(255LL);
    atomic_store(OUTLINED_FUNCTION_215_0(v3, v3), v1);
  }

  OUTLINED_FUNCTION_1();
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys,  &unk_1FF3E8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys,  &unk_1FF3E8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys,  &unk_1FF3E8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys,  &unk_1FF3E8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentHandledModel.CodingKeys,  &unk_1FF358);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentHandledModel.CodingKeys,  &unk_1FF358);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentHandledModel.CodingKeys,  &unk_1FF358);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentHandledModel.CodingKeys,  &unk_1FF358);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys);
  }

  return result;
}

void lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>( uint64_t a1)
{
  if (!OUTLINED_FUNCTION_156_1(a1))
  {
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledNameAbstract(v2);
    atomic_store(OUTLINED_FUNCTION_215_0(v3, v3), v1);
  }

  OUTLINED_FUNCTION_1();
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentErrorModel.CodingKeys,  &unk_1FF2C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentErrorModel.CodingKeys,  &unk_1FF2C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentErrorModel.CodingKeys,  &unk_1FF2C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentErrorModel.CodingKeys,  &unk_1FF2C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.ConfirmActionModel.CodingKeys,  &unk_1FF238);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.ConfirmActionModel.CodingKeys,  &unk_1FF238);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.ConfirmActionModel.CodingKeys,  &unk_1FF238);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.ConfirmActionModel.CodingKeys,  &unk_1FF238);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.DisambiguateItemsModel.CodingKeys,  &unk_1FF1A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.DisambiguateItemsModel.CodingKeys,  &unk_1FF1A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.DisambiguateItemsModel.CodingKeys,  &unk_1FF1A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.DisambiguateItemsModel.CodingKeys,  &unk_1FF1A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys);
  }

  return result;
}

uint64_t type metadata accessor for WorkflowDataModels.DisambiguationItemModel(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for WorkflowDataModels.DisambiguationItemModel,  (uint64_t)&nominal type descriptor for WorkflowDataModels.DisambiguationItemModel);
}

void lazy protocol witness table accessor for type [WorkflowDataModels.DisambiguationItemModel] and conformance <A> [A]( uint64_t a1)
{
  if (!OUTLINED_FUNCTION_156_1(a1))
  {
    OUTLINED_FUNCTION_159_0();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [WorkflowDataModels.DisambiguationItemModel]);
    lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction(v2);
    atomic_store(OUTLINED_FUNCTION_216_1(), v1);
  }

  OUTLINED_FUNCTION_5_30();
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys,  &unk_1FF118);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys,  &unk_1FF118);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys,  &unk_1FF118);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys,  &unk_1FF118);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.InvocationCommand.CodingKeys,  &unk_1FEED8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.InvocationCommand.CodingKeys,  &unk_1FEED8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.InvocationCommand.CodingKeys,  &unk_1FEED8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.InvocationCommand.CodingKeys,  &unk_1FEED8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.InvocationCommand.StartRequestCodingKeys,  &unk_1FF088);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.InvocationCommand.StartRequestCodingKeys,  &unk_1FF088);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.InvocationCommand.StartRequestCodingKeys,  &unk_1FF088);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.InvocationCommand.StartRequestCodingKeys,  &unk_1FF088);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys,  &unk_1FEFF8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys,  &unk_1FEFF8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys,  &unk_1FEFF8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys,  &unk_1FEFF8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys,  &unk_1FEF68);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys,  &unk_1FEF68);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys,  &unk_1FEF68);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys,  &unk_1FEF68);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys);
  }

  return result;
}

uint64_t outlined copy of WorkflowDataModels.InvocationCommand( uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result = a2;
  if (a4 < 2u)
  {
    swift_bridgeObjectRetain(a2);
    uint64_t result = a3;
    return swift_bridgeObjectRetain(result);
  }

  if (a4 == 2) {
    return swift_bridgeObjectRetain(result);
  }
  return result;
}

uint64_t outlined consume of WorkflowDataModels.InvocationCommand( uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result = a2;
  if (a4 < 2u)
  {
    swift_bridgeObjectRelease(a2);
    uint64_t result = a3;
    return swift_bridgeObjectRelease(result);
  }

  if (a4 == 2) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.DisambiguationItemModel.CodingKeys,  &unk_1FEE48);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.DisambiguationItemModel.CodingKeys,  &unk_1FEE48);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.DisambiguationItemModel.CodingKeys,  &unk_1FEE48);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.DisambiguationItemModel.CodingKeys,  &unk_1FEE48);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand and conformance WorkflowDataModels.InvocationCommand()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand and conformance WorkflowDataModels.InvocationCommand;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand and conformance WorkflowDataModels.InvocationCommand)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.InvocationCommand,  &type metadata for WorkflowDataModels.InvocationCommand);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand and conformance WorkflowDataModels.InvocationCommand);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand and conformance WorkflowDataModels.InvocationCommand;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand and conformance WorkflowDataModels.InvocationCommand)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.InvocationCommand,  &type metadata for WorkflowDataModels.InvocationCommand);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand and conformance WorkflowDataModels.InvocationCommand);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.LinkActionModel.CodingKeys,  &unk_1FEDB8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.LinkActionModel.CodingKeys,  &unk_1FEDB8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.LinkActionModel.CodingKeys,  &unk_1FEDB8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.LinkActionModel.CodingKeys,  &unk_1FEDB8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys);
  }

  return result;
}

uint64_t outlined init with copy of WorkflowDataModels.LinkActionModel(void *a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.LinkConfirmationModel.CodingKeys,  &unk_1FED28);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.LinkConfirmationModel.CodingKeys,  &unk_1FED28);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.LinkConfirmationModel.CodingKeys,  &unk_1FED28);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.LinkConfirmationModel.CodingKeys,  &unk_1FED28);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.LinkActionModel,  &type metadata for WorkflowDataModels.LinkActionModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.LinkActionModel,  &type metadata for WorkflowDataModels.LinkActionModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel);
  }

  return result;
}

uint64_t outlined init with copy of AutoShortcutAppPhrasesViewModel(uint64_t *a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys,  &unk_1FEC98);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys,  &unk_1FEC98);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys,  &unk_1FEC98);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys,  &unk_1FEC98);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for WorkflowDataModels.CodingKeys, &unk_1FE4B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for WorkflowDataModels.CodingKeys, &unk_1FE4B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for WorkflowDataModels.CodingKeys, &unk_1FE4B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for WorkflowDataModels.CodingKeys, &unk_1FE4B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys,  &unk_1FEC08);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys,  &unk_1FEC08);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys,  &unk_1FEC08);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys,  &unk_1FEC08);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunModel and conformance WorkflowDataModels.AutoShortcutFirstRunModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel and conformance WorkflowDataModels.AutoShortcutFirstRunModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel and conformance WorkflowDataModels.AutoShortcutFirstRunModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.AutoShortcutFirstRunModel,  &type metadata for WorkflowDataModels.AutoShortcutFirstRunModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel and conformance WorkflowDataModels.AutoShortcutFirstRunModel);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel and conformance WorkflowDataModels.AutoShortcutFirstRunModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel and conformance WorkflowDataModels.AutoShortcutFirstRunModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.AutoShortcutFirstRunModel,  &type metadata for WorkflowDataModels.AutoShortcutFirstRunModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel and conformance WorkflowDataModels.AutoShortcutFirstRunModel);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys,  &unk_1FEB78);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys,  &unk_1FEB78);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys,  &unk_1FEB78);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys,  &unk_1FEB78);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.LinkConfirmationViewCodingKeys,  &unk_1FEAE8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.LinkConfirmationViewCodingKeys,  &unk_1FEAE8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.LinkConfirmationViewCodingKeys,  &unk_1FEAE8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.LinkConfirmationViewCodingKeys,  &unk_1FEAE8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationModel and conformance WorkflowDataModels.LinkConfirmationModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel and conformance WorkflowDataModels.LinkConfirmationModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel and conformance WorkflowDataModels.LinkConfirmationModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.LinkConfirmationModel,  &type metadata for WorkflowDataModels.LinkConfirmationModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel and conformance WorkflowDataModels.LinkConfirmationModel);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel and conformance WorkflowDataModels.LinkConfirmationModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel and conformance WorkflowDataModels.LinkConfirmationModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.LinkConfirmationModel,  &type metadata for WorkflowDataModels.LinkConfirmationModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel and conformance WorkflowDataModels.LinkConfirmationModel);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.LinkActionViewCodingKeys,  &unk_1FEA58);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.LinkActionViewCodingKeys,  &unk_1FEA58);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.LinkActionViewCodingKeys,  &unk_1FEA58);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.LinkActionViewCodingKeys,  &unk_1FEA58);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys,  &unk_1FE9C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys,  &unk_1FE9C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys,  &unk_1FE9C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys,  &unk_1FE9C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsModel and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.DisambiguateSmartPromptItemsModel,  &type metadata for WorkflowDataModels.DisambiguateSmartPromptItemsModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.DisambiguateSmartPromptItemsModel,  &type metadata for WorkflowDataModels.DisambiguateSmartPromptItemsModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.DisambiguateItemsViewCodingKeys,  &unk_1FE938);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.DisambiguateItemsViewCodingKeys,  &unk_1FE938);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.DisambiguateItemsViewCodingKeys,  &unk_1FE938);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.DisambiguateItemsViewCodingKeys,  &unk_1FE938);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsModel and conformance WorkflowDataModels.DisambiguateItemsModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel and conformance WorkflowDataModels.DisambiguateItemsModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel and conformance WorkflowDataModels.DisambiguateItemsModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.DisambiguateItemsModel,  &type metadata for WorkflowDataModels.DisambiguateItemsModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel and conformance WorkflowDataModels.DisambiguateItemsModel);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel and conformance WorkflowDataModels.DisambiguateItemsModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel and conformance WorkflowDataModels.DisambiguateItemsModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.DisambiguateItemsModel,  &type metadata for WorkflowDataModels.DisambiguateItemsModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel and conformance WorkflowDataModels.DisambiguateItemsModel);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.WatchViewCodingKeys,  &unk_1FE8A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.WatchViewCodingKeys,  &unk_1FE8A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.WatchViewCodingKeys,  &unk_1FE8A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.WatchViewCodingKeys,  &unk_1FE8A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.WatchModel and conformance WorkflowDataModels.WatchModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel and conformance WorkflowDataModels.WatchModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel and conformance WorkflowDataModels.WatchModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.WatchModel,  &type metadata for WorkflowDataModels.WatchModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel and conformance WorkflowDataModels.WatchModel);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel and conformance WorkflowDataModels.WatchModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel and conformance WorkflowDataModels.WatchModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.WatchModel,  &type metadata for WorkflowDataModels.WatchModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel and conformance WorkflowDataModels.WatchModel);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.ConfirmActionViewCodingKeys,  &unk_1FE818);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.ConfirmActionViewCodingKeys,  &unk_1FE818);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.ConfirmActionViewCodingKeys,  &unk_1FE818);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.ConfirmActionViewCodingKeys,  &unk_1FE818);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionModel and conformance WorkflowDataModels.ConfirmActionModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel and conformance WorkflowDataModels.ConfirmActionModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel and conformance WorkflowDataModels.ConfirmActionModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.ConfirmActionModel,  &type metadata for WorkflowDataModels.ConfirmActionModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel and conformance WorkflowDataModels.ConfirmActionModel);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel and conformance WorkflowDataModels.ConfirmActionModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel and conformance WorkflowDataModels.ConfirmActionModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.ConfirmActionModel,  &type metadata for WorkflowDataModels.ConfirmActionModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel and conformance WorkflowDataModels.ConfirmActionModel);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentHandledViewCodingKeys,  &unk_1FE788);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentHandledViewCodingKeys,  &unk_1FE788);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentHandledViewCodingKeys,  &unk_1FE788);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentHandledViewCodingKeys,  &unk_1FE788);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentErrorViewCodingKeys,  &unk_1FE6F8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentErrorViewCodingKeys,  &unk_1FE6F8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentErrorViewCodingKeys,  &unk_1FE6F8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentErrorViewCodingKeys,  &unk_1FE6F8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentConfirmationViewCodingKeys,  &unk_1FE668);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentConfirmationViewCodingKeys,  &unk_1FE668);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentConfirmationViewCodingKeys,  &unk_1FE668);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.CustomIntentConfirmationViewCodingKeys,  &unk_1FE668);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.EnableTCCViewCodingKeys,  &unk_1FE5D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.EnableTCCViewCodingKeys,  &unk_1FE5D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.EnableTCCViewCodingKeys,  &unk_1FE5D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.EnableTCCViewCodingKeys,  &unk_1FE5D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCModel and conformance WorkflowDataModels.EnableTCCModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel and conformance WorkflowDataModels.EnableTCCModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel and conformance WorkflowDataModels.EnableTCCModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.EnableTCCModel,  &type metadata for WorkflowDataModels.EnableTCCModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel and conformance WorkflowDataModels.EnableTCCModel);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel and conformance WorkflowDataModels.EnableTCCModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel and conformance WorkflowDataModels.EnableTCCModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.EnableTCCModel,  &type metadata for WorkflowDataModels.EnableTCCModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel and conformance WorkflowDataModels.EnableTCCModel);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.ShowAlertViewCodingKeys,  &unk_1FE548);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.ShowAlertViewCodingKeys,  &unk_1FE548);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.ShowAlertViewCodingKeys,  &unk_1FE548);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.ShowAlertViewCodingKeys,  &unk_1FE548);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertModel and conformance WorkflowDataModels.ShowAlertModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel and conformance WorkflowDataModels.ShowAlertModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel and conformance WorkflowDataModels.ShowAlertModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.ShowAlertModel,  &type metadata for WorkflowDataModels.ShowAlertModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel and conformance WorkflowDataModels.ShowAlertModel);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel and conformance WorkflowDataModels.ShowAlertModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel and conformance WorkflowDataModels.ShowAlertModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowDataModels.ShowAlertModel,  &type metadata for WorkflowDataModels.ShowAlertModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel and conformance WorkflowDataModels.ShowAlertModel);
  }

  return result;
}