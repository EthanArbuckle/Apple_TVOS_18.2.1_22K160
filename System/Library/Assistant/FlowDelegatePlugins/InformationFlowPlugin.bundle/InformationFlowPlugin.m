double variable initialization expression of InformationRoutingFlow.interactionStream@<D0>(uint64_t a1@<X8>)
{
  double result;
  *(void *)(a1 + 32) = 0LL;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t default argument 1 of InformationViewFactory.init(deviceState:commonCATs:)()
{
  uint64_t v0 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v0);
  v2 = (char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for CommonCATs(0LL);
  static CATOption.defaultMode.getter();
  return CATWrapper.__allocating_init(options:globals:)(v2, 0LL);
}

uint64_t default argument 1 of InformationRoutingFlow.init(input:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)()
{
  return static PommesResponse.makeDefaultInteractionStream()();
}

id default argument 2 of InformationRoutingFlow.init(input:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)()
{
  return [(id)objc_opt_self(AFFeatureFlags) isSiriLocationServicesPromptingEnabled];
}

void default argument 3 of InformationRoutingFlow.init(input:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for KnowledgeFallbackHelper;
  *(void *)(a1 + 32) = &protocol witness table for KnowledgeFallbackHelper;
}

uint64_t default argument 2 of TapEngagementHandlingFlow.init(invocation:outputPublisherAsync:pommesEngagement:patternExecutor:)@<X0>( void *a1@<X8>)
{
  return default argument 2 of TapEngagementHandlingFlow.init(invocation:outputPublisherAsync:pommesEngagement:patternExecutor:)( (uint64_t (*)(void))&type metadata accessor for PommesEngagement,  (uint64_t)&protocol witness table for PommesEngagement,  (uint64_t (*)(void))&PommesEngagement.init(),  a1);
}

uint64_t default argument 8 of DetailedResultProvider.init(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:informationViewFactory:patternFlowProvider:patternExecutor:)@<X0>( uint64_t *a1@<X8>)
{
  return default argument 3 of TapEngagementHandlingFlow.init(invocation:outputPublisherAsync:pommesEngagement:patternExecutor:)( (uint64_t (*)(void))type metadata accessor for PatternExecutor,  (uint64_t)&protocol witness table for PatternExecutor,  a1);
}

uint64_t KnowledgeFallbackHelper.isEnabled.getter()
{
  return 0LL;
}

uint64_t default argument 5 of RenderPegasusFlow.init(pegasusResult:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:)()
{
  uint64_t v0 = type metadata accessor for CATOption(0LL);
  uint64_t v1 = __chkstk_darwin(v0);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = 0LL;
  memset(v19, 0, sizeof(v19));
  uint64_t v4 = static OutputPublisherFactory.makeOutputPublisherAsync()(v18, v1);
  static Device.current.getter(v17, v4);
  type metadata accessor for CommonCATs(0LL);
  static CATOption.defaultMode.getter();
  uint64_t v5 = CATWrapper.__allocating_init(options:globals:)(v3, 0LL);
  uint64_t v6 = type metadata accessor for InformationViewFactory();
  v7 = (void *)swift_allocObject(v6, 104LL, 7LL);
  id v8 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
  uint64_t v9 = type metadata accessor for PommesServerFallbackPreferences(0LL);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  uint64_t v10 = PommesServerFallbackPreferences.init(_:)(v8);
  v7[11] = v9;
  v7[12] = &protocol witness table for PommesServerFallbackPreferences;
  v7[8] = v10;
  uint64_t v11 = outlined init with take of PatternFlowProviding(v17, (uint64_t)(v7 + 3));
  v7[2] = v5;
  static Device.current.getter(v17, v11);
  uint64_t v12 = type metadata accessor for PegasusPatternFlowFactory();
  uint64_t v13 = swift_allocObject(v12, 144LL, 7LL);
  outlined init with copy of OutputPublisherAsync((uint64_t)v18, v13 + 16);
  outlined init with copy of OutputPublisherAsync((uint64_t)v17, v13 + 56);
  *(void *)(v13 + 96) = v7;
  static PatternFlowProvidingHelper.unwrap(_:with:)((uint64_t)v19, (uint64_t)v18, (uint64_t *)v16);
  outlined destroy of PatternFlowProviding?((uint64_t)v19);
  __swift_destroy_boxed_opaque_existential_1(v17);
  __swift_destroy_boxed_opaque_existential_1(v18);
  outlined init with take of PatternFlowProviding(v16, v13 + 104);
  return v13;
}

uint64_t default argument 7 of RenderPegasusFlow.init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)@<X0>( void *a1@<X8>)
{
  return default argument 2 of TapEngagementHandlingFlow.init(invocation:outputPublisherAsync:pommesEngagement:patternExecutor:)( (uint64_t (*)(void))&type metadata accessor for PommesSystemAppChecking,  (uint64_t)&protocol witness table for PommesSystemAppChecking,  (uint64_t (*)(void))&PommesSystemAppChecking.init(),  a1);
}

uint64_t variable initialization expression of SearchFlow.nlContextUpdate@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of PushOffQueryFlow.nlContextUpdate( (uint64_t (*)(void))&type metadata accessor for NLContextUpdate,  a1);
}

uint64_t variable initialization expression of SearchFlow.targetedRequest()
{
  return 0LL;
}

void *default argument 0 of PegasusComponents.init(dialogs:layouts:catDialogs:buttonViews:directExecutions:delayedActions:sayItComponents:disambiguationLists:domainObjectComponents:)()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of ShimOverrideFlow.exitValue@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  uint64_t v2 = type metadata accessor for ShimOverrideFlow.ExitValue(0LL);
  return swift_storeEnumTagMultiPayload(a1, v2, 1LL);
}

double default argument 2 of PushOffQueryFlow.init(query:renderComponentFlowFactory:pommesSearchClient:)@<D0>( uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for PommesSearchClient(0LL);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  uint64_t v3 = PommesSearchClient.init()();
  if (v3)
  {
    *(void *)(a1 + 24) = v2;
    *(void *)(a1 + 32) = &protocol witness table for PommesSearchClient;
    *(void *)a1 = v3;
  }

  else
  {
    *(void *)(a1 + 32) = 0LL;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }

  return result;
}

uint64_t static LoggingConstants.defaultTaskName.getter()
{
  return 0x54746E6572727543LL;
}

uint64_t static LoggingConstants.defaultParameterValue.getter()
{
  return 0x6C7070615F746F6ELL;
}

uint64_t default argument 2 of PegasusFlowEventLogger.logGenericFlowStepEvent(stateType:parameterName:statusReason:statusReasonDescription:taskType:)@<X0>( uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for SiriKitReliabilityCodes.normal(_:);
  uint64_t v3 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(a1, v2, v3);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(a1, 0LL, 1LL, v3);
}

uint64_t static LoggingConstants.empty.getter()
{
  return 0LL;
}

uint64_t variable initialization expression of InformationRootFlow.originalInput@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of PushOffQueryFlow.nlContextUpdate( (uint64_t (*)(void))&type metadata accessor for Input,  a1);
}

uint64_t variable initialization expression of PushOffQueryFlow.nlContextUpdate@<X0>( uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(a2, 1LL, 1LL, v3);
}

uint64_t default argument 0 of InformationRootFlow.init(flowEntryPoints:)()
{
  if (one-time initialization token for kFlowEntryPoints != -1) {
    swift_once( &one-time initialization token for kFlowEntryPoints,  one-time initialization function for kFlowEntryPoints);
  }
  return swift_bridgeObjectRetain(static InformationRootFlow.kFlowEntryPoints);
}

uint64_t default argument 0 of SportsIntentDonator.init(donator:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 3 of TapEngagementHandlingFlow.init(invocation:outputPublisherAsync:pommesEngagement:patternExecutor:)( (uint64_t (*)(void))type metadata accessor for IntentDonator,  (uint64_t)&protocol witness table for IntentDonator,  a1);
}

uint64_t default argument 3 of TapEngagementHandlingFlow.init(invocation:outputPublisherAsync:pommesEngagement:patternExecutor:)@<X0>( uint64_t (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = a1(0LL);
  uint64_t result = swift_allocObject(v5, 16LL, 7LL);
  a3[3] = v5;
  a3[4] = a2;
  *a3 = result;
  return result;
}

uint64_t static LoggingConstants.none.getter()
{
  return 1701736302LL;
}

uint64_t variable initialization expression of InformationViewFactory.serverFallbackPreferences@<X0>( uint64_t *a1@<X8>)
{
  id v2 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
  uint64_t v3 = type metadata accessor for PommesServerFallbackPreferences(0LL);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  uint64_t result = PommesServerFallbackPreferences.init(_:)(v2);
  a1[3] = v3;
  a1[4] = (uint64_t)&protocol witness table for PommesServerFallbackPreferences;
  *a1 = result;
  return result;
}

uint64_t outlined init with copy of OutputPublisherAsync(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined destroy of PatternFlowProviding?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PatternFlowProviding?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t outlined init with take of PatternFlowProviding(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void *__swift_allocate_boxed_opaque_existential_1(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t default argument 2 of GenericResultSetParamBuilder.init(parameters:items:itemsFieldName:)()
{
  return 0x736D657469LL;
}

uint64_t default argument 3 of RenderPegasusFlow.init(pegasusResult:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:)()
{
  uint64_t v0 = type metadata accessor for ExperienceSelector();
  return swift_allocObject(v0, 16LL, 7LL);
}

uint64_t default argument 2 of TapEngagementHandlingFlow.init(invocation:outputPublisherAsync:pommesEngagement:patternExecutor:)@<X0>( uint64_t (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, void *a4@<X8>)
{
  a4[3] = a1(0LL);
  a4[4] = a2;
  __swift_allocate_boxed_opaque_existential_1(a4);
  return a3();
}

uint64_t default argument 9 of RenderPegasusFlow.init(experience:pommesResponse:outputPublisher:informationViewFactory:renderComponentFlowFactory:flowTaskLogger:aceServiceInvoker:pegasusPatternFlowFactory:appChecking:responseProducerType:)()
{
  return type metadata accessor for AppResolutionStrategyHelpers(0LL);
}

uint64_t default argument 4 of RenderPegasusFlow.init(pegasusResult:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:)()
{
  uint64_t v0 = type metadata accessor for CATOption(0LL);
  uint64_t v1 = __chkstk_darwin(v0);
  __int128 v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = static OutputPublisherFactory.makeOutputPublisherAsync()(v15, v1);
  static Device.current.getter(v14, v4);
  type metadata accessor for CommonCATs(0LL);
  static CATOption.defaultMode.getter();
  uint64_t v5 = CATWrapper.__allocating_init(options:globals:)(v3, 0LL);
  uint64_t v6 = type metadata accessor for InformationViewFactory();
  v7 = (void *)swift_allocObject(v6, 104LL, 7LL);
  id v8 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
  uint64_t v9 = type metadata accessor for PommesServerFallbackPreferences(0LL);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  uint64_t v10 = PommesServerFallbackPreferences.init(_:)(v8);
  v7[11] = v9;
  v7[12] = &protocol witness table for PommesServerFallbackPreferences;
  v7[8] = v10;
  outlined init with take of PatternFlowProviding(v14, (uint64_t)(v7 + 3));
  v7[2] = v5;
  uint64_t v11 = type metadata accessor for RenderComponentFlowFactory();
  uint64_t v12 = swift_allocObject(v11, 64LL, 7LL);
  outlined init with take of PatternFlowProviding(v15, v12 + 16);
  *(void *)(v12 + 56) = v7;
  return v12;
}

void *default argument 1 of RenderComponentFlowFactory.init(outputPublisher:informationViewFactory:)()
{
  uint64_t v0 = type metadata accessor for CATOption(0LL);
  uint64_t v1 = __chkstk_darwin(v0);
  __int128 v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static Device.current.getter(v12, v1);
  type metadata accessor for CommonCATs(0LL);
  static CATOption.defaultMode.getter();
  uint64_t v4 = CATWrapper.__allocating_init(options:globals:)(v3, 0LL);
  uint64_t v5 = type metadata accessor for InformationViewFactory();
  uint64_t v6 = (void *)swift_allocObject(v5, 104LL, 7LL);
  id v7 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
  uint64_t v8 = type metadata accessor for PommesServerFallbackPreferences(0LL);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  uint64_t v9 = PommesServerFallbackPreferences.init(_:)(v7);
  v6[11] = v8;
  v6[12] = &protocol witness table for PommesServerFallbackPreferences;
  v6[8] = v9;
  outlined init with take of PatternFlowProviding(v12, (uint64_t)(v6 + 3));
  v6[2] = v4;
  return v6;
}

void type metadata accessor for FLOWSchemaFLOWInformationPluginEventType(uint64_t a1)
{
}

void type metadata accessor for PatternType(uint64_t a1)
{
}

void type metadata accessor for FLOWSchemaFLOWInformationPluginEventType( uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

void protocol witness for RawRepresentable.rawValue.getter in conformance FLOWSchemaFLOWStateType( _DWORD *a1@<X8>)
{
  *a1 = *v1;
}

void protocol witness for SetAlgebra.init() in conformance NSJSONReadingOptions(void *a1@<X8>)
{
  *a1 = 0LL;
}

void *protocol witness for OptionSet.init(rawValue:) in conformance AFRequestOptions@<X0>( void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void InformationRoutingFlow.__allocating_init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)()
{
}

uint64_t Parse.DirectInvocation.get<A>(protoMessage:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for BinaryDecodingOptions(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = Parse.DirectInvocation.userData.getter(v11);
  if (!v14) {
    goto LABEL_11;
  }
  uint64_t v15 = v14;
  if (!*(void *)(v14 + 16))
  {
    __int128 v30 = 0u;
    __int128 v31 = 0u;
LABEL_9:
    swift_bridgeObjectRelease(v15);
    goto LABEL_10;
  }

  swift_bridgeObjectRetain(a2);
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v17 & 1) == 0)
  {
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    swift_bridgeObjectRelease(a2);
    goto LABEL_9;
  }

  outlined init with copy of Any(*(void *)(v15 + 56) + 32 * v16, (uint64_t)&v30);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v15);
  if (!*((void *)&v31 + 1))
  {
LABEL_10:
    outlined destroy of Any?((uint64_t)&v30);
    goto LABEL_11;
  }

  if ((swift_dynamicCast(&v33, &v30, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0)
  {
    uint64_t v19 = v33;
    unint64_t v18 = v34;
    uint64_t v32 = 0LL;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    uint64_t v20 = outlined copy of Data._Representation(v33, v34);
    BinaryDecodingOptions.init()(v20);
    uint64_t v21 = 0LL;
    Message.init(serializedData:extensions:partial:options:)(v19, v18, &v30, 0LL, v13, a3, a4);
    outlined consume of Data._Representation(v19, v18);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56LL))( a5,  v21,  1LL,  a3);
  }

LABEL_11:
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v22 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v22, (uint64_t)static Logger.information);
  uint64_t v23 = swift_bridgeObjectRetain_n(a2, 2LL);
  v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v27 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 v30 = v27;
    *(_DWORD *)v26 = 136315138;
    swift_bridgeObjectRetain(a2);
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)&v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl(&dword_0, v24, v25, "Parse.DirectInvocation: No '%s' key found in DI Payload.", v26, 0xCu);
    uint64_t v21 = 1LL;
    swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
    uint64_t v21 = 1LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56LL))(a5, v21, 1LL, a3);
}

  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  os_log_type_t v25 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v25, (uint64_t)static Logger.information);
  v26 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    __int128 v30 = swift_slowAlloc(32LL, -1LL);
    *(void *)&v37 = v30;
    *(_DWORD *)uint64_t v29 = 136315138;
    swift_bridgeObjectRetain(a2);
    v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)&v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl(&dword_0, v27, v28, "Parse.DirectInvocation: No '%s' key found in DI Payload.", v29, 0xCu);
    swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  v35 = a3(0LL);
  uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL);
  uint64_t v33 = a6;
  unint64_t v34 = 1LL;
  return v32(v33, v34, 1LL, v35);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t serialize(_:at:)(uint64_t result, _BYTE **a2)
{
  uint64_t v2 = *a2;
  _BYTE *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)( uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  unint64_t v8 = v7;
  uint64_t v9 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  uint64_t v10 = *a1 + 8;
  uint64_t v12 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
  uint64_t result = swift_bridgeObjectRelease(v8);
  *a1 = v10;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  __swift_destroy_boxed_opaque_existential_1(v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)( uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

  return v19;
}

LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL, __dst);
  }
}

      uint64_t v15 = v26;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v17, v14);
      v23 += v24;
      if (!--v22)
      {
        v47 = 1LL;
        a3 = v56;
        goto LABEL_18;
      }

      v73(v17, v23, v14);
    }

    uint64_t v27 = v69;
    v28 = Apple_Parsec_Siri_V2alpha_ExperienceComponent.delayedActionComponent.getter(v35);
    uint64_t v29 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter(v28);
    __int128 v31 = v70;
    __int128 v30 = v71;
    goto LABEL_4;
  }

  v47 = 1LL;
LABEL_18:
  v48 = (uint64_t)v59;
LABEL_20:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v48, v47, 1LL, v14);
  swift_bridgeObjectRelease(v58);
  outlined destroy of Any?( v48,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent?);
  v74 = 2125678LL;
  v75 = 0xE300000000000000LL;
  v49._countAndFlagsBits = v76;
  v49._object = a2;
  String.append(_:)(v49);
  v50 = v74;
  v51 = v75;
  v52 = lazy protocol witness table accessor for type ShimOverrideFlow.ShimError and conformance ShimOverrideFlow.ShimError();
  swift_allocError(&type metadata for ShimOverrideFlow.ShimError, v52, 0LL, 0LL);
  *(void *)v53 = v50;
  *(void *)(v53 + 8) = v51;
  *(_BYTE *)(v53 + 16) = 1;
  return swift_willThrow();
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1LL << result) - 1;
  }

  *uint64_t v21 = v23 & v22;
  v24 = *(void *)(a2 + 16);
  os_log_type_t v25 = __OFSUB__(v24, 1LL);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v2 + 16) + 1LL,  1,  (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v3 > 1,  v4 + 1,  1,  (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v4, 0LL);
      if (v4 < 0) {
        break;
      }
      uint64_t v6 = v5;
      uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0) {
        goto LABEL_14;
      }
      if (v7 == v4) {
        return v6;
      }
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  v10,  1122LL,  0);
      __break(1u);
LABEL_10:
      uint64_t v4 = String.UTF8View._foreignCount()();
      if (!v4) {
        return _swiftEmptyArrayStorage;
      }
    }

    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  v10,  71LL,  0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    __break(1u);
  }

  else
  {
    return _swiftEmptyArrayStorage;
  }

  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = _swift_stdlib_malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  int v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }

LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

_BYTE **closure #1 in OSLogArguments.append(_:)(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  *uint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v5);
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    ((void (*)(void))swift_retain)();
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t outlined consume of Data._Representation(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 a1)
{
  Swift::Int v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }

      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }

  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
      }
    }
  }

  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

id SAUIVisualResponseShowNextSnippet.init(from:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v10 = [objc_allocWithZone(SAUIVisualResponseSnippet) init];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v10 setModelData:isa];

  id v12 = v10;
  uint64_t v13 = ((uint64_t (*)(void))UUID.init())();
  UUID.uuidString.getter(v13);
  uint64_t v15 = v14;
  unint64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v9, v6);
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  [v12 setAceId:v17];

  id v18 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3)) init];
  uint64_t v19 = UUID.init()([v18 setVisualResponse:v12]);
  UUID.uuidString.getter(v19);
  uint64_t v21 = v20;
  v16(v9, v6);
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v21);
  [v18 setAceId:v22];
  outlined consume of Data._Representation(a1, a2);

  return v18;
}

void *InformationRoutingFlow.ifFlowFlowHandlerID.unsafeMutableAddressor()
{
  return &static InformationRoutingFlow.ifFlowFlowHandlerID;
}

unint64_t static InformationRoutingFlow.ifFlowFlowHandlerID.getter()
{
  return 0xD000000000000016LL;
}

uint64_t InformationRoutingFlow.Invocations.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_51C8 + 4 * byte_7CA30[a1]))( 0xD00000000000003DLL,  0x800000000007F000LL);
}

uint64_t sub_51C8(uint64_t a1)
{
  return a1 + 3;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InformationRoutingFlow.Invocations( unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = InformationRoutingFlow.Invocations.rawValue.getter(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = InformationRoutingFlow.Invocations.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InformationRoutingFlow.Invocations()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v6, 0LL);
  uint64_t v2 = InformationRoutingFlow.Invocations.rawValue.getter(v1);
  uint64_t v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance InformationRoutingFlow.Invocations(uint64_t a1)
{
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_5334(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(unint64_t))swift_bridgeObjectRelease)(0x800000000007F040LL);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InformationRoutingFlow.Invocations( uint64_t a1)
{
  unsigned __int8 v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  uint64_t v3 = InformationRoutingFlow.Invocations.rawValue.getter(v2);
  uint64_t v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance InformationRoutingFlow.Invocations@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized InformationRoutingFlow.Invocations.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance InformationRoutingFlow.Invocations@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = InformationRoutingFlow.Invocations.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t (*InformationRoutingFlow.exitValue.modify())()
{
  return SportsPersonalizationResult.init(flow:action:);
}

uint64_t SportsPersonalizationEntryPoint.inferenceApi.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync(v1 + 16, a1);
}

uint64_t InformationRoutingFlow.informationViewFactory.getter()
{
  return swift_retain(*(void *)(v0 + 96));
}

uint64_t key path setter for InformationRoutingFlow.state : InformationRoutingFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InformationRoutingFlow.State(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of InformationRoutingFlow.State(a1, (uint64_t)v6, v7);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 192LL))(v6);
}

uint64_t InformationRoutingFlow.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_state;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return outlined init with copy of InformationRoutingFlow.State( v3,  a1,  type metadata accessor for InformationRoutingFlow.State);
}

uint64_t InformationRoutingFlow.state.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_state;
  swift_beginAccess(v3, v5, 33LL, 0LL);
  outlined assign with take of InformationRoutingFlow.State(a1, v3);
  return swift_endAccess(v5);
}

uint64_t (*InformationRoutingFlow.state.modify(uint64_t a1))()
{
  return InformationRoutingFlow.state.modify;
}

uint64_t InformationRoutingFlow.isSiriLocationServicesPromptingEnabled.getter()
{
  return *(unsigned __int8 *)(v0
                            + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_isSiriLocationServicesPromptingEnabled);
}

uint64_t InformationRoutingFlow.knowledgeFallbackHelper.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync( v1 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_knowledgeFallbackHelper,  a1);
}

uint64_t InformationRoutingFlow.__allocating_init(result:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( uint64_t a1, int a2, void *a3)
{
  uint64_t v7 = a3[3];
  uint64_t v8 = a3[4];
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a3, v7);
  uint64_t v10 = specialized InformationRoutingFlow.__allocating_init(result:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( a1,  a2,  v9,  v3,  v7,  v8);
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v10;
}

uint64_t InformationRoutingFlow.__allocating_init(input:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v9 = a4[3];
  uint64_t v10 = a4[4];
  uint64_t v11 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a4, v9);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v14 + 16))(v13);
  uint64_t v15 = specialized InformationRoutingFlow.__allocating_init(input:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( a1,  a2,  a3,  (uint64_t)v13,  v4,  v9,  v10);
  __swift_destroy_boxed_opaque_existential_1(a4);
  return v15;
}

uint64_t InformationRoutingFlow.execute()(uint64_t a1)
{
  v2[75] = v1;
  v2[74] = a1;
  uint64_t v3 = type metadata accessor for Date(0LL);
  v2[76] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[77] = v4;
  v2[78] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for PommesEngagement(0LL);
  v2[79] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[80] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[81] = swift_task_alloc(v7);
  v2[82] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for Parse.DirectInvocation(0LL);
  v2[83] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[84] = v9;
  uint64_t v10 = *(void *)(v9 + 64);
  v2[85] = v10;
  unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v2[86] = swift_task_alloc(v11);
  v2[87] = swift_task_alloc(v11);
  v2[88] = swift_task_alloc(v11);
  v2[89] = swift_task_alloc(v11);
  v2[90] = swift_task_alloc(v11);
  v2[91] = swift_task_alloc(v11);
  unint64_t v12 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?)
                               - 8)
                   + 64LL)
       + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[92] = swift_task_alloc(v12);
  v2[93] = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for CATOption(0LL);
  v2[94] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Parse.PegasusResult(0LL);
  v2[95] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v2[96] = v15;
  unint64_t v16 = (*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[97] = swift_task_alloc(v16);
  v2[98] = swift_task_alloc(v16);
  uint64_t v17 = type metadata accessor for InformationRoutingFlow.State(0LL);
  v2[99] = v17;
  v2[100] = swift_task_alloc((*(void *)(*(void *)(v17 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(InformationRoutingFlow.execute(), 0LL, 0LL);
}

void InformationRoutingFlow.execute()()
{
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "InformationRoutingFlow.execute", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = v0[100];
  uint64_t v7 = v0[99];
  uint64_t v8 = v0[75];

  (*(void (**)(void))(*(void *)v8 + 184LL))();
  uint64_t v9 = (char *)&loc_5A84 + dword_7004[swift_getEnumCaseMultiPayload(v6, v7)];
  __asm { BR              X10 }

uint64_t closure #1 in InformationRoutingFlow.execute()( uint64_t a1, uint64_t a2, void (*a3)(char *, char *, uint64_t))
{
  v54 = a3;
  uint64_t v5 = type metadata accessor for Parse.PegasusResult(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7);
  unint64_t v12 = (char *)v51 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v51 - v13;
  uint64_t v55 = type metadata accessor for InformationRoutingFlow.State(0LL);
  __chkstk_darwin(v55);
  unint64_t v16 = (char *)v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for ShimOverrideFlow.ExitValue(0LL);
  __chkstk_darwin(v17);
  uint64_t v19 = (void *)((char *)v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  outlined init with copy of InformationRoutingFlow.State(a1, (uint64_t)v19, v20);
  if (swift_getEnumCaseMultiPayload(v19, v17) == 1)
  {
    uint64_t v21 = *v19;
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v22, (uint64_t)static Logger.information);
    swift_errorRetain(v21);
    uint64_t v23 = swift_errorRetain(v21);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v27 = swift_slowAlloc(32LL, -1LL);
      uint64_t v56 = v21;
      uint64_t v57 = v27;
      *(_DWORD *)v26 = 136315138;
      swift_errorRetain(v21);
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error?);
      uint64_t v29 = String.init<A>(describing:)(&v56, v28);
      __int128 v30 = v16;
      unint64_t v32 = v31;
      uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
      unint64_t v33 = v32;
      unint64_t v16 = v30;
      swift_bridgeObjectRelease(v33);
      swift_errorRelease(v21);
      swift_errorRelease(v21);
      _os_log_impl(&dword_0, v24, v25, "Maps shim failed with error: %s", v26, 0xCu);
      swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v21);
      swift_errorRelease(v21);
    }

    uint64_t v49 = type metadata accessor for Parse.DirectInvocation(0LL);
    (*(void (**)(char *, void, uint64_t))(*(void *)(v49 - 8) + 16LL))(v16, v54, v49);
    swift_storeEnumTagMultiPayload(v16, v55, 3LL);
    (*(void (**)(char *))(*(void *)a2 + 192LL))(v16);
    return swift_errorRelease(v21);
  }

  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 32))(v14, v19, v5);
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v34 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v34, (uint64_t)static Logger.information);
    v35 = *(uint64_t (**)(char *, char *, uint64_t))(v6 + 16);
    uint64_t v36 = v35(v12, v14, v5);
    v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = swift_slowAlloc(12LL, -1LL);
      uint64_t v53 = a2;
      v40 = (uint8_t *)v39;
      uint64_t v41 = swift_slowAlloc(32LL, -1LL);
      v54 = (void (*)(char *, char *, uint64_t))v35;
      uint64_t v42 = v41;
      uint64_t v57 = v41;
      v52 = v16;
      *(_DWORD *)v40 = 136315138;
      v51[1] = v40 + 4;
      v54(v9, v12, v5);
      uint64_t v43 = String.init<A>(describing:)(v9, v5);
      unint64_t v45 = v44;
      uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v57);
      unint64_t v16 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
      swift_bridgeObjectRelease(v45);
      v46 = *(void (**)(char *, uint64_t))(v6 + 8);
      v46(v12, v5);
      _os_log_impl(&dword_0, v37, v38, "rewritten pegasus request: %s", v40, 0xCu);
      swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v47 = v42;
      v35 = (uint64_t (*)(char *, char *, uint64_t))v54;
      swift_slowDealloc(v47, -1LL, -1LL);
      v48 = v40;
      a2 = v53;
      swift_slowDealloc(v48, -1LL, -1LL);
    }

    else
    {
      v46 = *(void (**)(char *, uint64_t))(v6 + 8);
      v46(v12, v5);
    }

    v35(v16, v14, v5);
    swift_storeEnumTagMultiPayload(v16, v55, 1LL);
    (*(void (**)(char *))(*(void *)a2 + 192LL))(v16);
    return ((uint64_t (*)(char *, uint64_t))v46)(v14, v5);
  }

uint64_t specialized FlowTrampolining.makeResponse(for:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return specialized FlowTrampolining.makeResponse(for:)( a1,  (uint64_t)partial apply for closure #1 in FlowTrampolining.makeResponse(for:),  (uint64_t)partial apply for specialized closure #1 in FlowTrampolining.makeResponse(forErrorMessage:),  a2);
}

uint64_t specialized FlowTrampolining.makeResponse(for:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = v4;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for PerformanceUtil(0LL);
  uint64_t v14 = static PerformanceUtil.shared.getter();
  uint64_t v38 = a1;
  ((void (*)(void))Date.init())();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyFlow?);
  LOBYTE(v33) = 2;
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( &v40,  0xD000000000000024LL,  0x800000000007F700LL,  0LL,  v13,  "InformationFlowPlugin/FlowTrampolining.swift",  44LL,  2LL,  33LL,  "makeResponse(for:)",  18LL,  (_DWORD)v33,  a2,  v37,  v15);
  swift_release(v14);
  unint64_t v16 = *(void (**)(char *, uint64_t))(v11 + 8);
  v16(v13, v10);
  uint64_t v17 = v40;
  if (v40)
  {
    uint64_t v18 = swift_retain(v40);
    static ExecuteResponse.complete(next:)(v18);
    return swift_release_n(v17, 2LL);
  }

  else
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    uint64_t v21 = __swift_project_value_buffer(v20, (uint64_t)static Logger.information);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      v36[1] = 0LL;
      os_log_type_t v25 = a4;
      uint64_t v26 = v7;
      uint64_t v27 = a3;
      uint64_t v28 = v24;
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl( &dword_0,  v22,  v23,  "Unable to locate flow for direct invocation parse/experience. Returning error flow.",  v24,  2u);
      uint64_t v29 = v28;
      a3 = v27;
      uint64_t v7 = v26;
      a4 = v25;
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    uint64_t v39 = v7;
    uint64_t v30 = static PerformanceUtil.shared.getter();
    uint64_t v31 = __chkstk_darwin(v30);
    unint64_t v33 = &v39;
    Date.init()(v31);
    uint64_t v34 = &v32;
    uint64_t v35 = type metadata accessor for ExecuteResponse(0LL);
    LOBYTE(v33) = 2;
    ((void (*)(void *__return_ptr, uint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t))dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:))( a4,  0x72724520656B614DLL,  0xEE00776F6C46726FLL,  0LL,  v13,  "InformationFlowPlugin/FlowTrampolining.swift",  44LL,  2LL,  22LL,  "makeResponse(forErrorMessage:)",  30LL,  (_DWORD)v33,  a3);
    swift_release(v30);
    return ((uint64_t (*)(char *, uint64_t))v16)(v13, v10);
  }

uint64_t InformationRoutingFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InformationRoutingFlow(0LL);
  uint64_t v5 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type InformationRoutingFlow and conformance InformationRoutingFlow,  type metadata accessor for InformationRoutingFlow,  (uint64_t)&protocol conformance descriptor for InformationRoutingFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v5);
}

uint64_t InformationRoutingFlow.renderUserIdentificationGuardFlow(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UserIdentityCheckFlowStrategy(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = __swift_project_value_buffer(v8, (uint64_t)static Logger.information);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_0, v10, v11, "InformationRoutingFlow: user identification guard flow", v12, 2u);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CommonFlowGuard>);
  uint64_t v14 = *(void *)(type metadata accessor for CommonFlowGuard(0LL) - 8);
  uint64_t v15 = swift_allocObject( v13,  ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))
        + *(void *)(v14 + 72),
          *(unsigned __int8 *)(v14 + 80) | 7LL);
  *(_OWORD *)(v15 + 16) = xmmword_7CCD0;
  UserIdentityCheckFlowStrategy.init(allowsAnonymousUser:allowsUserInteraction:handoffStrategy:requireSpeechProfile:)( 0LL,  1LL,  0LL,  0LL);
  static CommonFlowGuard.ensuringUserIdentity(using:)(v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v16 = static CommonGuardFlowUtils.makeGuardFlow(withGuards:)(v15);
  swift_bridgeObjectRelease(v15);
  uint64_t v22 = v16;
  uint64_t v17 = swift_allocObject(&unk_97718, 32LL, 7LL);
  *(void *)(v17 + 16) = v2;
  *(void *)(v17 + 24) = a1;
  uint64_t v18 = type metadata accessor for GuardFlow(0LL);
  swift_retain(v2);
  id v19 = a1;
  static ExecuteResponse.ongoing<A>(next:childCompletion:)( &v22,  partial apply for closure #1 in InformationRoutingFlow.renderUserIdentificationGuardFlow(_:),  v17,  v18,  &protocol witness table for GuardFlow);
  swift_release(v16);
  return swift_release(v17);
}

uint64_t InformationRoutingFlow.handleUserIdentificationGuardFlowResult(with:pommesResponse:)( char a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = a1 & 1;
  uint64_t v69 = type metadata accessor for InformationRoutingFlow.State(0LL);
  uint64_t v6 = __chkstk_darwin(v69);
  uint64_t v8 = (uint64_t *)((char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v6);
  uint64_t v10 = (uint64_t *)((char *)&v64 - v9);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
  __chkstk_darwin(v11);
  v67 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v68 = __swift_project_value_buffer(v13, (uint64_t)static Logger.information);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v68);
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v65 = v10;
    uint64_t v16 = swift_slowAlloc(12LL, -1LL);
    v66 = a2;
    uint64_t v17 = (uint8_t *)v16;
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    uint64_t v71 = v18;
    *(_DWORD *)uint64_t v17 = 136315138;
    uint64_t v19 = GuardFlowResult.description.getter(v5);
    unint64_t v21 = v20;
    uint64_t v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v71);
    uint64_t v10 = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
    swift_bridgeObjectRelease(v21);
    _os_log_impl( &dword_0,  v14,  v15,  "InformationRoutingFlow: user identification guard flow completed with %s",  v17,  0xCu);
    swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    uint64_t v22 = v17;
    a2 = v66;
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  if ((_DWORD)v5)
  {
    uint64_t v42 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      unint64_t v44 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v44 = 0;
      _os_log_impl( &dword_0,  v42,  v43,  "InformationRoutingFlow: user identification disambiguation failed. Use the default user identity.",  v44,  2u);
      swift_slowDealloc(v44, -1LL, -1LL);
    }

    unint64_t v45 = (char *)v8
    *uint64_t v8 = a2;
    type metadata accessor for SiriEnvironment(0LL);
    uint64_t v46 = static SiriEnvironment.default.getter(a2);
    uint64_t v47 = SiriEnvironment.userIdentity.getter();
    uint64_t v48 = swift_release(v46);
    dispatch thunk of UserIdentityProvider.identifiedUser.getter(v48);
    swift_release(v47);
    uint64_t v49 = type metadata accessor for IdentifiedUser(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56LL))(v45, 0LL, 1LL, v49);
    uint64_t v10 = v8;
  }

  else
  {
    type metadata accessor for SiriEnvironment(0LL);
    uint64_t v24 = ((uint64_t (*)(void))static SiriEnvironment.forCurrentTask.getter)();
    if (v24)
    {
      uint64_t v25 = v24;
      uint64_t v26 = a2;
      uint64_t v27 = SiriEnvironment.userIdentity.getter();
      uint64_t v28 = swift_release(v25);
      uint64_t v29 = (uint64_t)v67;
      dispatch thunk of UserIdentityProvider.identifiedUser.getter(v28);
      swift_release(v27);
      uint64_t v30 = type metadata accessor for IdentifiedUser(0LL);
      uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL);
      v31(v29, 0LL, 1LL, v30);
      uint64_t v32 = outlined destroy of Any?(v29, &demangling cache variable for type metadata for IdentifiedUser?);
      unint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
      os_log_type_t v34 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v35 = 0;
        _os_log_impl( &dword_0,  v33,  v34,  "InformationRoutingFlow: user identification disambiguation succeeded. Use the identified user identity.",  v35,  2u);
        swift_slowDealloc(v35, -1LL, -1LL);
      }

      uint64_t v36 = (char *)v10
      *uint64_t v10 = v26;
      uint64_t v37 = static SiriEnvironment.forCurrentTask.getter(v26);
      if (v37)
      {
        uint64_t v38 = v37;
        uint64_t v39 = SiriEnvironment.userIdentity.getter();
        uint64_t v40 = swift_release(v38);
        dispatch thunk of UserIdentityProvider.identifiedUser.getter(v40);
        swift_release(v39);
        uint64_t v41 = 0LL;
      }

      else
      {
        uint64_t v41 = 1LL;
      }

      v31((uint64_t)v36, v41, 1LL, v30);
    }

    else
    {
      v50 = v8;
      uint64_t v51 = v3;
      uint64_t v52 = type metadata accessor for IdentifiedUser(0LL);
      uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56LL);
      uint64_t v54 = (uint64_t)v67;
      v53(v67, 1LL, 1LL, v52);
      uint64_t v55 = outlined destroy of Any?(v54, &demangling cache variable for type metadata for IdentifiedUser?);
      uint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
      os_log_type_t v57 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v56, v57))
      {
        v58 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)v58 = 0;
        _os_log_impl( &dword_0,  v56,  v57,  "InformationRoutingFlow: user identification disambiguation succeeded. Identified user identity is not availiab le. Use the default user identity.",  v58,  2u);
        swift_slowDealloc(v58, -1LL, -1LL);
      }

      v59 = (char *)v50
      void *v50 = a2;
      uint64_t v60 = static SiriEnvironment.default.getter(a2);
      uint64_t v61 = SiriEnvironment.userIdentity.getter();
      uint64_t v62 = swift_release(v60);
      dispatch thunk of UserIdentityProvider.identifiedUser.getter(v62);
      swift_release(v61);
      v53(v59, 0LL, 1LL, v52);
      uint64_t v10 = v50;
      uint64_t v3 = v51;
    }
  }

  swift_storeEnumTagMultiPayload(v10, v69, 2LL);
  return (*(uint64_t (**)(void *))(*(void *)v3 + 192LL))(v10);
}

uint64_t InformationRoutingFlow.shouldPromptUserIdentification(with:)()
{
  uint64_t v0 = type metadata accessor for UserPromptExperience.PromptType(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)&v33 - v6;
  uint64_t v8 = dispatch thunk of PommesResponse.experiences.getter(v5);
  uint64_t v9 = v8;
  if ((unint64_t)v8 >> 62)
  {
    if (v8 >= 0) {
      v8 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    if (_CocoaArrayWrapper.endIndex.getter(v8)) {
      goto LABEL_3;
    }
  }

  else if (*(void *)((char *)&dword_10 + (v8 & 0xFFFFFFFFFFFFF8LL)))
  {
LABEL_3:
    if ((v9 & 0xC000000000000001LL) != 0)
    {
      id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v9);
LABEL_6:
      uint64_t v11 = v10;
      swift_bridgeObjectRelease(v9);
      uint64_t v12 = type metadata accessor for UserPromptExperience(0LL);
      if (swift_dynamicCastClass(v11, v12))
      {
        id v13 = v11;
        UserPromptExperience.promptType.getter();
        (*(void (**)(char *, void, uint64_t))(v1 + 104))( v4,  enum case for UserPromptExperience.PromptType.userIdentification(_:),  v0);
        uint64_t v14 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type UserPromptExperience.PromptType and conformance UserPromptExperience.PromptType,  (uint64_t (*)(uint64_t))&type metadata accessor for UserPromptExperience.PromptType,  (uint64_t)&protocol conformance descriptor for UserPromptExperience.PromptType);
        dispatch thunk of RawRepresentable.rawValue.getter(&v35, v0, v14);
        dispatch thunk of RawRepresentable.rawValue.getter(&v33, v0, v14);
        uint64_t v15 = v36;
        uint64_t v16 = v34;
        if (v35 == v33 && v36 == v34)
        {
          swift_bridgeObjectRelease_n(v36, 2LL);
          uint64_t v17 = *(void (**)(char *, uint64_t))(v1 + 8);
          v17(v4, v0);
          v17(v7, v0);
LABEL_11:
          if (one-time initialization token for information != -1) {
            swift_once(&one-time initialization token for information, one-time initialization function for information);
          }
          uint64_t v20 = type metadata accessor for Logger(0LL);
          uint64_t v21 = __swift_project_value_buffer(v20, (uint64_t)static Logger.information);
          uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
          os_log_type_t v23 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v22, v23))
          {
            uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v24 = 0;
            _os_log_impl(&dword_0, v22, v23, "Found user identification disambiuation experience.", v24, 2u);
            swift_slowDealloc(v24, -1LL, -1LL);
          }

          char v25 = 1;
          return v25 & 1;
        }

        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, v33, v34, 0LL);
        swift_bridgeObjectRelease(v15);
        swift_bridgeObjectRelease(v16);
        uint64_t v19 = *(void (**)(char *, uint64_t))(v1 + 8);
        v19(v4, v0);
        v19(v7, v0);
        if ((v18 & 1) != 0) {
          goto LABEL_11;
        }
      }

      uint64_t v26 = (void *)dispatch thunk of PommesResponse.primaryCatIds()();
      char v25 = specialized static Array<A>.== infix(_:_:)( v26,  &outlined read-only object #0 of InformationRoutingFlow.shouldPromptUserIdentification(with:));

      swift_arrayDestroy(&unk_97308, 1LL, &type metadata for String);
      swift_bridgeObjectRelease(v26);
      return v25 & 1;
    }

    if (*(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8LL)))
    {
      id v10 = *(id *)(v9 + 32);
      goto LABEL_6;
    }

    __break(1u);
    goto LABEL_28;
  }

  swift_bridgeObjectRelease(v9);
  if (one-time initialization token for information != -1) {
LABEL_28:
  }
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  uint64_t v27 = type metadata accessor for Logger(0LL);
  uint64_t v28 = __swift_project_value_buffer(v27, (uint64_t)static Logger.information);
  uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
  os_log_type_t v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v31 = 0;
    _os_log_impl(&dword_0, v29, v30, "Found no experiences for user prompt.", v31, 2u);
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  char v25 = 0;
  return v25 & 1;
}

uint64_t specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0LL, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1LL;
    }
    uint64_t v9 = a1 + 7;
    for (i = a2 + 7; ; i += 2)
    {
      BOOL v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1LL;
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t InformationRoutingFlow.renderPommesFlow(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  v41[1] = a2;
  v41[0] = type metadata accessor for PommesSystemAppChecking(0LL);
  uint64_t v5 = *(void *)(v41[0] - 8LL);
  uint64_t v6 = __chkstk_darwin(v41[0]);
  uint64_t v8 = (char *)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  id v10 = (char *)v41 - v9;
  uint64_t v11 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v11);
  id v13 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v15 = __swift_project_value_buffer(v14, (uint64_t)static Logger.information);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    char v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)char v18 = 0;
    _os_log_impl(&dword_0, v16, v17, "InformationRoutingFlow: pommesResponse", v18, 2u);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  uint64_t v19 = v3 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_interactionStream;
  swift_beginAccess( v3 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_interactionStream,  v45,  0LL,  0LL);
  outlined init with copy of IdentifiedUser?( v19,  (uint64_t)v46,  &demangling cache variable for type metadata for CurareInteractionStream?);
  static CurareDonation.donateCurareResponseUsedMarker(from:into:)(a1, v46);
  outlined destroy of Any?((uint64_t)v46, &demangling cache variable for type metadata for CurareInteractionStream?);
  outlined init with copy of OutputPublisherAsync(v3 + 16, (uint64_t)v46);
  uint64_t v20 = *(void *)(v3 + 96);
  uint64_t v21 = *(void *)(v3 + 104);
  outlined init with copy of OutputPublisherAsync(v3 + 56, (uint64_t)v44);
  id v22 = a1;
  swift_retain(v20);
  uint64_t v23 = swift_retain(v21);
  uint64_t v24 = static OutputPublisherFactory.makeOutputPublisherAsync()(v43, v23);
  static Device.current.getter(v42, v24);
  type metadata accessor for CommonCATs(0LL);
  static CATOption.defaultMode.getter();
  uint64_t v25 = CATWrapper.__allocating_init(options:globals:)(v13, 0LL);
  uint64_t v26 = type metadata accessor for InformationViewFactory();
  uint64_t v27 = (void *)swift_allocObject(v26, 104LL, 7LL);
  id v28 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
  uint64_t v29 = type metadata accessor for PommesServerFallbackPreferences(0LL);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  uint64_t v30 = PommesServerFallbackPreferences.init(_:)(v28);
  v27[11] = v29;
  v27[12] = &protocol witness table for PommesServerFallbackPreferences;
  v27[8] = v30;
  outlined init with take of PatternFlowProviding(v42, (uint64_t)(v27 + 3));
  v27[2] = v25;
  uint64_t v31 = type metadata accessor for RenderComponentFlowFactory();
  uint64_t v32 = swift_allocObject(v31, 64LL, 7LL);
  uint64_t v33 = outlined init with take of PatternFlowProviding(v43, v32 + 16);
  *(void *)(v32 + 56) = v27;
  uint64_t v34 = default argument 5 of RenderPegasusFlow.init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)(v33);
  PommesSystemAppChecking.init()();
  uint64_t v35 = type metadata accessor for AppResolutionStrategyHelpers(0LL);
  uint64_t v36 = v41[0];
  (*(void (**)(char *, char *, void))(v5 + 16))(v8, v10, v41[0]);
  uint64_t v37 = specialized RenderPegasusFlow.__allocating_init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)( v22,  v46,  v20,  v21,  v32,  v34,  v44,  (uint64_t)v8,  v35,  (uint64_t)&protocol witness table for AppResolutionStrategyHelpers);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v36);
  v46[0] = v37;
  uint64_t v38 = type metadata accessor for RenderPegasusFlow(0LL);
  uint64_t v39 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type RenderPegasusFlow and conformance RenderPegasusFlow,  type metadata accessor for RenderPegasusFlow,  (uint64_t)&protocol conformance descriptor for RenderPegasusFlow);
  static ExecuteResponse.complete<A>(next:)(v46, v38, v39);
  return swift_release(v37);
}

void *InformationRoutingFlow.deinit()
{
  __swift_destroy_boxed_opaque_existential_1((void *)((char *)v0
                                                      + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_knowledgeFallbackHelper));
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_utteranceNormalizer;
  uint64_t v2 = type metadata accessor for UtteranceNormalizer(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  return v0;
}

uint64_t InformationRoutingFlow.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1((void *)((char *)v0
                                                      + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_knowledgeFallbackHelper));
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_utteranceNormalizer;
  uint64_t v2 = type metadata accessor for UtteranceNormalizer(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

uint64_t protocol witness for Flow.on(input:) in conformance InformationRoutingFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 240LL))() & 1;
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance InformationRoutingFlow( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to Flow.onAsync(input:)[1]);
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = protocol witness for Flow.onAsync(input:) in conformance InformationRoutingFlow;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance InformationRoutingFlow(uint64_t a1)
{
  uint64_t v6 = *v1;
  uint64_t v3 = *(void *)(v6 + 16);
  uint64_t v4 = *v1;
  uint64_t v6 = v4;
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance InformationRoutingFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 256LL))();
}

uint64_t protocol witness for Flow.execute() in conformance InformationRoutingFlow(uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 248LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return v7(a1);
}

uint64_t protocol witness for Flow.execute() in conformance InformationRoutingFlow()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t protocol witness for Flow.exitValue.getter in conformance InformationRoutingFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160LL))();
}

uint64_t protocol witness for FlowTrampolining.outputPublisher.getter in conformance InformationRoutingFlow@<X0>( uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync(*v1 + 16LL, a1);
}

uint64_t protocol witness for FlowTrampolining.informationViewFactory.getter in conformance InformationRoutingFlow()
{
  return swift_retain(*(void *)(*(void *)v0 + 96LL));
}

uint64_t PommesResponse.isServerDrivenExperience.getter()
{
  uint64_t v0 = dispatch thunk of PommesResponse.experiences.getter();
  uint64_t v1 = v0;
  if (!((unint64_t)v0 >> 62))
  {
    uint64_t result = *(void *)((char *)&dword_10 + (v0 & 0xFFFFFFFFFFFFF8LL));
    if (result) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease(v1);
    goto LABEL_12;
  }

  if (v0 >= 0) {
    v0 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v0);
  if (!result) {
    goto LABEL_11;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001LL) != 0)
  {
    id v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v1);
    goto LABEL_6;
  }

  if (*(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL)))
  {
    id v3 = *(id *)(v1 + 32);
LABEL_6:
    uint64_t v4 = v3;
    swift_bridgeObjectRelease(v1);
    uint64_t v5 = type metadata accessor for GenericExperience(0LL);
    uint64_t v6 = (void *)swift_dynamicCastClass(v4, v5);
    if (v6)
    {
LABEL_13:
      BOOL v7 = v6 != 0LL;

      return v7;
    }

LABEL_12:
    uint64_t v6 = 0LL;
    goto LABEL_13;
  }

  __break(1u);
  return result;
}

uint64_t protocol witness for FlowEntryPoint.flowFor(input:) in conformance InformationRoutingEntryPoint( uint64_t a1)
{
  uint64_t v2 = specialized InformationRoutingEntryPoint.flowFor(input:)(a1);
  return protocol witness for FlowEntryPoint.flowFor(input:) in conformance InformationRoutingEntryPoint( *(uint64_t (**)(uint64_t))(v1 + 8),  v1,  v2);
}

uint64_t specialized RenderPegasusFlow.__allocating_init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v79 = a7;
  v80 = a2;
  uint64_t v75 = a6;
  uint64_t v76 = a3;
  uint64_t v77 = a5;
  uint64_t v72 = a9;
  uint64_t v71 = a10;
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for PegasusExperience(0LL);
  __chkstk_darwin(v17);
  uint64_t v19 = (uint64_t *)((char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v68 = v19;
  uint64_t v20 = type metadata accessor for PommesSystemAppChecking(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v78 = v20;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v70 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v67 - v24;
  (*(void (**)(char *, uint64_t))(v21 + 32))((char *)&v67 - v24, a8);
  uint64_t v26 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v27 = static PerformanceUtil.shared.getter(v26);
  uint64_t v73 = a4;
  uint64_t v82 = a4;
  v83 = a1;
  Date.init()(v27);
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( v19,  0xD00000000000003ALL,  0x800000000007F790LL,  0LL,  v16,  "InformationFlowPlugin/RenderPegasusFlow.swift",  45LL,  2LL,  80LL,  "init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatt ernFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)",  183LL,  2,  partial apply for closure #1 in RenderPegasusFlow.init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:),  v81,  v17);
  uint64_t v69 = 0LL;
  swift_release(v27);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  outlined init with copy of OutputPublisherAsync((uint64_t)v80, (uint64_t)v85);
  id v28 = a1;
  id v29 = a1;
  uint64_t v30 = v76;
  swift_retain(v76);
  uint64_t v31 = v77;
  swift_retain(v77);
  static SiriKitEventSender.current.getter(v84);
  uint64_t v32 = type metadata accessor for PegasusFlowEventLogger();
  uint64_t v33 = swift_allocObject(v32, 84LL, 7LL);
  *(void *)(v33 + 16) = v28;
  outlined init with copy of OutputPublisherAsync((uint64_t)v84, v33 + 24);
  id v34 = v29;
  uint64_t v35 = PommesResponse.metadataDomainName.getter();
  uint64_t v37 = v36;

  __swift_destroy_boxed_opaque_existential_1(v84);
  *(void *)(v33 + 64) = v35;
  *(void *)(v33 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v37;
  *(_DWORD *)(v33 + 80) = 1;
  uint64_t v38 = outlined init with copy of OutputPublisherAsync((uint64_t)v79, (uint64_t)v84);
  uint64_t v39 = default argument 5 of RenderPegasusFlow.init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)(v38);
  uint64_t v40 = type metadata accessor for RenderPegasusFlow(0LL);
  uint64_t v41 = swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
  uint64_t v74 = v21;
  uint64_t v42 = *(void (**)(char *, char *))(v21 + 16);
  uint64_t v43 = (uint64_t)v70;
  uint64_t v44 = (uint64_t)v25;
  unint64_t v45 = v25;
  uint64_t v46 = v78;
  v42(v70, v45);
  uint64_t v66 = v41;
  uint64_t v47 = v31;
  uint64_t v48 = specialized RenderPegasusFlow.init(experience:pommesResponse:outputPublisher:informationViewFactory:renderComponentFlowFactory:flowTaskLogger:aceServiceInvoker:pegasusPatternFlowFactory:appChecking:responseProducerType:)( (uint64_t)v68,  v28,  v85,  v30,  v31,  v33,  v84,  v39,  v43,  v72,  v71,  v66);

  swift_release(v30);
  swift_release(v47);
  swift_release(v33);
  uint64_t v49 = swift_retain(v48);
  uint64_t v50 = dispatch thunk of PommesResponse.experiences.getter(v49);
  uint64_t v51 = v69;
  uint64_t v52 = specialized Sequence.flatMap<A>(_:)(v50);
  swift_bridgeObjectRelease(v50);
  RenderPegasusFlow.addReferenceResolutionEntities(from:)(v52);
  if (v51)
  {
    uint64_t v72 = v44;
    swift_bridgeObjectRelease(v52);
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v53 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v53, (uint64_t)static Logger.information);
    swift_errorRetain(v51);
    uint64_t v54 = swift_errorRetain(v51);
    uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
    os_log_type_t v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      os_log_type_t v57 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v58 = swift_slowAlloc(32LL, -1LL);
      v85[0] = v58;
      *(_DWORD *)os_log_type_t v57 = 136315138;
      *(void *)&v84[0] = v51;
      swift_errorRetain(v51);
      uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v60 = String.init<A>(describing:)(v84, v59);
      uint64_t v61 = v48;
      unint64_t v63 = v62;
      *(void *)&v84[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v62, v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v84, (char *)v84 + 8);
      unint64_t v64 = v63;
      uint64_t v48 = v61;
      swift_bridgeObjectRelease(v64);
      swift_errorRelease(v51);
      swift_errorRelease(v51);
      _os_log_impl(&dword_0, v55, v56, "Could not add RR entities from POMMES response: %s", v57, 0xCu);
      swift_arrayDestroy(v58, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1LL, -1LL);
      swift_slowDealloc(v57, -1LL, -1LL);

      swift_release(v76);
      swift_release(v73);
      swift_release(v77);
      swift_release(v75);
      swift_release(v61);
    }

    else
    {

      swift_release(v30);
      swift_release(v73);
      swift_release(v47);
      swift_release(v75);
      swift_release(v48);
      swift_errorRelease(v51);
      swift_errorRelease(v51);
    }

    swift_errorRelease(v51);
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v72, v78);
  }

  else
  {

    swift_release(v30);
    swift_release(v73);
    swift_release(v47);
    swift_release(v75);
    swift_bridgeObjectRelease(v52);
    swift_release(v48);
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v44, v46);
  }

  __swift_destroy_boxed_opaque_existential_1(v79);
  __swift_destroy_boxed_opaque_existential_1(v80);
  return v48;
}

uint64_t specialized closure #1 in FlowTrampolining.makeResponse(forErrorMessage:)( uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  outlined init with copy of OutputPublisherAsync(*a1 + 16, (uint64_t)v11);
  uint64_t v6 = *(void *)(v5 + 96);
  uint64_t v7 = type metadata accessor for ErrorFlowFactory();
  uint64_t v8 = swift_allocObject(v7, 64LL, 7LL);
  outlined init with take of PatternFlowProviding(v11, v8 + 16);
  *(void *)(v8 + 56) = v6;
  swift_retain(v6);
  uint64_t v9 = ErrorFlowFactory.makeErrorFlow(message:)(a2, a3);
  static ExecuteResponse.complete(next:)(v9);
  swift_release(v8);
  return swift_release(v9);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11[2];
  uint64_t v5 = *a1;
  outlined init with copy of OutputPublisherAsync( *a1 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_outputPublisher,  (uint64_t)v11);
  uint64_t v6 = *(void *)(v5 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_informationViewFactory);
  uint64_t v7 = type metadata accessor for ErrorFlowFactory();
  uint64_t v8 = swift_allocObject(v7, 64LL, 7LL);
  outlined init with take of PatternFlowProviding(v11, v8 + 16);
  *(void *)(v8 + 56) = v6;
  swift_retain(v6);
  uint64_t v9 = ErrorFlowFactory.makeErrorFlow(message:)(a2, a3);
  static ExecuteResponse.complete(next:)(v9);
  swift_release(v8);
  return swift_release(v9);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11[2];
  uint64_t v5 = *a1;
  outlined init with copy of OutputPublisherAsync(*a1 + 16, (uint64_t)v11);
  uint64_t v6 = *(void *)(v5 + 56);
  uint64_t v7 = type metadata accessor for ErrorFlowFactory();
  uint64_t v8 = swift_allocObject(v7, 64LL, 7LL);
  outlined init with take of PatternFlowProviding(v11, v8 + 16);
  *(void *)(v8 + 56) = v6;
  swift_retain(v6);
  uint64_t v9 = ErrorFlowFactory.makeErrorFlow(message:)(a2, a3);
  static ExecuteResponse.complete(next:)(v9);
  swift_release(v8);
  return swift_release(v9);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11[2];
  uint64_t v5 = *a1;
  outlined init with copy of OutputPublisherAsync( *a1 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_outputPublisher,  (uint64_t)v11);
  uint64_t v6 = *(void *)(v5 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_informationViewFactory);
  uint64_t v7 = type metadata accessor for ErrorFlowFactory();
  uint64_t v8 = swift_allocObject(v7, 64LL, 7LL);
  outlined init with take of PatternFlowProviding(v11, v8 + 16);
  *(void *)(v8 + 56) = v6;
  swift_retain(v6);
  uint64_t v9 = ErrorFlowFactory.makeErrorFlow(message:)(a2, a3);
  static ExecuteResponse.complete(next:)(v9);
  swift_release(v8);
  return swift_release(v9);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11[2];
  uint64_t v5 = *a1;
  outlined init with copy of OutputPublisherAsync( *a1 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_outputPublisher,  (uint64_t)v11);
  uint64_t v6 = *(void *)(v5 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_informationViewFactory);
  uint64_t v7 = type metadata accessor for ErrorFlowFactory();
  uint64_t v8 = swift_allocObject(v7, 64LL, 7LL);
  outlined init with take of PatternFlowProviding(v11, v8 + 16);
  *(void *)(v8 + 56) = v6;
  swift_retain(v6);
  uint64_t v9 = ErrorFlowFactory.makeErrorFlow(message:)(a2, a3);
  static ExecuteResponse.complete(next:)(v9);
  swift_release(v8);
  return swift_release(v9);
}

uint64_t specialized TapEngagementHandlingFlow.init(invocation:outputPublisherAsync:pommesEngagement:patternExecutor:)( uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v47 = a1;
  uint64_t v48 = a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Search_PegasusQueryContext?);
  __chkstk_darwin(v8);
  id v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext(0LL);
  uint64_t v45 = *(void *)(Context - 8);
  uint64_t v46 = Context;
  __chkstk_darwin(Context);
  uint64_t v44 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Responseframework_Engagement_Context?);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for Apple_Parsec_Responseframework_Engagement_Context(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for PommesEngagement(0LL);
  uint64_t v53 = v20;
  uint64_t v54 = &protocol witness table for PommesEngagement;
  uint64_t v21 = __swift_allocate_boxed_opaque_existential_1(&v52);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32LL))(v21, a3, v20);
  uint64_t v50 = type metadata accessor for PatternExecutor();
  uint64_t v51 = &protocol witness table for PatternExecutor;
  *(void *)&__int128 v49 = a4;
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v22 = type metadata accessor for Logger(0LL);
  uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.information);
  uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl(&dword_0, v24, v25, "TapEngagementHandlingFlow: Received Direct invocation", v26, 2u);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  uint64_t v27 = v47;
  specialized Parse.DirectInvocation.get<A>(protoMessage:)(0xD000000000000011LL, 0x800000000007FA30LL, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16) == 1)
  {
    id v28 = &demangling cache variable for type metadata for Apple_Parsec_Responseframework_Engagement_Context?;
    uint64_t v29 = (uint64_t)v15;
  }

  else
  {
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v30(v19, v15, v16);
    specialized Parse.DirectInvocation.get<A>(protoMessage:)(0x4373757361676570LL, 0xEE00747865746E6FLL, (uint64_t)v10);
    uint64_t v31 = v45;
    uint64_t v32 = v46;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v10, 1LL, v46) != 1)
    {
      uint64_t v39 = type metadata accessor for Parse.DirectInvocation(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8LL))(v27, v39);
      uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
      uint64_t v41 = v44;
      v40(v44, v10, v32);
      v30((char *)(a5 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_engagementContext), v19, v16);
      v40((char *)(a5 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_pegasusContext), v41, v32);
      outlined init with take of PatternFlowProviding( v48,  a5 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_outputPublisherAsync);
      outlined init with take of PatternFlowProviding( &v52,  a5 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_pommesEngagement);
      outlined init with take of PatternFlowProviding( &v49,  a5 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_patternExecutor);
      return a5;
    }

    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    id v28 = &demangling cache variable for type metadata for Apple_Parsec_Search_PegasusQueryContext?;
    uint64_t v29 = (uint64_t)v10;
  }

  uint64_t v33 = outlined destroy of Any?(v29, v28);
  id v34 = (os_log_s *)Logger.logObject.getter(v33);
  os_log_type_t v35 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v36 = 0;
    _os_log_impl( &dword_0,  v34,  v35,  "TapEngagementHandlingFlow: Unable to retrieve EngagementContext from DI Payload.",  v36,  2u);
    swift_slowDealloc(v36, -1LL, -1LL);
  }

  __swift_destroy_boxed_opaque_existential_1(&v49);
  __swift_destroy_boxed_opaque_existential_1(&v52);
  __swift_destroy_boxed_opaque_existential_1(v48);
  uint64_t v37 = type metadata accessor for Parse.DirectInvocation(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v37 - 8) + 8LL))(v27, v37);
  uint64_t v38 = type metadata accessor for TapEngagementHandlingFlow(0LL);
  swift_deallocPartialClassInstance( a5,  v38,  *(unsigned int *)(*(void *)a5 + 48LL),  *(unsigned __int16 *)(*(void *)a5 + 52LL));
  return 0LL;
}

uint64_t specialized InformationRoutingFlow.__allocating_init(input:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v231 = a4;
  int v228 = a3;
  uint64_t v232 = a2;
  uint64_t v230 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v223 = *(void *)(v230 - 8);
  uint64_t v10 = __chkstk_darwin(v230);
  v222 = (char *)&v218 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  v220 = (char *)&v218 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  v221 = (void **)((char *)&v218 - v15);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v218 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v218 - v19;
  uint64_t v21 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v21);
  v225 = (char *)&v218 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v224 = type metadata accessor for InformationRoutingFlow.State(0LL);
  __chkstk_darwin(v224);
  v226 = (void **)((char *)&v218 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v24 = type metadata accessor for Parse.PegasusResult(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v218 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = type metadata accessor for Parse(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  v239[3] = a6;
  v239[4] = a7;
  uint64_t v227 = a7;
  uint64_t v31 = (void **)((char *)&v218 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v239);
  uint64_t v33 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32LL);
  uint64_t v229 = a6;
  uint64_t v34 = v33(boxed_opaque_existential_1, v231, a6);
  uint64_t v231 = a1;
  Input.parse.getter(v34);
  int v35 = (*(uint64_t (**)(void **, uint64_t))(v29 + 88))(v31, v28);
  if (v35 == enum case for Parse.directInvocation(_:))
  {
    uint64_t v36 = v222;
    (*(void (**)(void **, uint64_t))(v29 + 96))(v31, v28);
    uint64_t v37 = v223;
    uint64_t v38 = *(uint64_t (**)(char *, void **, uint64_t))(v223 + 16);
    uint64_t v39 = v230;
    uint64_t v40 = v38(v20, v31, v230);
    uint64_t v41 = Parse.DirectInvocation.identifier.getter(v40);
    uint64_t v43 = v42;
    if (v41 == 0xD00000000000003DLL && v42 == 0x800000000007F000LL)
    {
      swift_bridgeObjectRelease(0x800000000007F000LL);
LABEL_8:
      uint64_t v66 = (uint64_t)v226;
      v38((char *)v226, (void **)v20, v39);
      swift_storeEnumTagMultiPayload(v66, v224, 4LL);
      outlined init with copy of IdentifiedUser?( v232,  (uint64_t)v238,  &demangling cache variable for type metadata for CurareInteractionStream?);
      uint64_t v67 = outlined init with copy of OutputPublisherAsync((uint64_t)v239, (uint64_t)v236);
      uint64_t v68 = static AceService.currentAsync.getter(v235, v67);
      uint64_t v69 = static OutputPublisherFactory.makeOutputPublisherAsync()(v234, v68);
      static Device.current.getter(v233, v69);
      type metadata accessor for CommonCATs(0LL);
      uint64_t v70 = v225;
      static CATOption.defaultMode.getter();
      uint64_t v71 = CATWrapper.__allocating_init(options:globals:)(v70, 0LL);
      uint64_t v72 = type metadata accessor for InformationViewFactory();
      uint64_t v73 = (void *)swift_allocObject(v72, 104LL, 7LL);
      id v74 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
      uint64_t v75 = type metadata accessor for PommesServerFallbackPreferences(0LL);
      swift_allocObject(v75, *(unsigned int *)(v75 + 48), *(unsigned __int16 *)(v75 + 52));
      uint64_t v76 = PommesServerFallbackPreferences.init(_:)(v74);
      v73[11] = v75;
      v73[12] = &protocol witness table for PommesServerFallbackPreferences;
      v73[8] = v76;
      outlined init with take of PatternFlowProviding(v233, (uint64_t)(v73 + 3));
      v73[2] = v71;
      uint64_t v77 = type metadata accessor for ExperienceSelector();
      uint64_t v78 = swift_allocObject(v77, 16LL, 7LL);
      uint64_t v79 = type metadata accessor for InformationRoutingFlow(0LL);
      uint64_t v80 = swift_allocObject(v79, *(unsigned int *)(v79 + 48), *(unsigned __int16 *)(v79 + 52));
      uint64_t v81 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v236, v237);
      __chkstk_darwin(v81);
      v83 = v20;
      v84 = (char *)&v218 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v85 + 16))(v84);
      uint64_t v63 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( v66,  v235,  v234,  (uint64_t)v73,  v78,  (uint64_t)v238,  v228 & 1,  (uint64_t)v84,  v80,  v229,  v227);
      swift_release(v73);
      swift_release(v78);
      __swift_destroy_boxed_opaque_existential_1(v236);
      __swift_destroy_boxed_opaque_existential_1(v239);
      outlined destroy of Any?(v232, &demangling cache variable for type metadata for CurareInteractionStream?);
      uint64_t v86 = type metadata accessor for Input(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v86 - 8) + 8LL))(v231, v86);
      v87 = *(void (**)(char *, uint64_t))(v37 + 8);
      uint64_t v88 = v230;
      v87(v83, v230);
      v87((char *)v31, v88);
      return v63;
    }

    char v65 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v42, 0xD00000000000003DLL, 0x800000000007F000LL, 0LL);
    swift_bridgeObjectRelease(v43);
    if ((v65 & 1) != 0) {
      goto LABEL_8;
    }
    v111 = v20;
    v112 = *(void (**)(char *, uint64_t))(v37 + 8);
    v112(v111, v39);
    uint64_t v113 = v38(v18, v31, v39);
    uint64_t v114 = Parse.DirectInvocation.identifier.getter(v113);
    uint64_t v116 = v115;
    if (v114 == 0xD000000000000040LL && v115 == 0x800000000007F040LL)
    {
      swift_bridgeObjectRelease(0x800000000007F040LL);
LABEL_17:
      uint64_t v119 = (uint64_t)v226;
      v219 = v18;
      v38((char *)v226, (void **)v18, v39);
      swift_storeEnumTagMultiPayload(v119, v224, 5LL);
      outlined init with copy of IdentifiedUser?( v232,  (uint64_t)v238,  &demangling cache variable for type metadata for CurareInteractionStream?);
      uint64_t v120 = outlined init with copy of OutputPublisherAsync((uint64_t)v239, (uint64_t)v236);
      v121 = static AceService.currentAsync.getter(v235, v120);
      v122 = static OutputPublisherFactory.makeOutputPublisherAsync()(v234, v121);
      static Device.current.getter(v233, v122);
      type metadata accessor for CommonCATs(0LL);
      v123 = v225;
      static CATOption.defaultMode.getter();
      uint64_t v124 = CATWrapper.__allocating_init(options:globals:)(v123, 0LL);
      uint64_t v125 = type metadata accessor for InformationViewFactory();
      uint64_t v126 = v39;
      v127 = (void *)swift_allocObject(v125, 104LL, 7LL);
      id v128 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
      uint64_t v129 = type metadata accessor for PommesServerFallbackPreferences(0LL);
      swift_allocObject(v129, *(unsigned int *)(v129 + 48), *(unsigned __int16 *)(v129 + 52));
      uint64_t v130 = PommesServerFallbackPreferences.init(_:)(v128);
      v127[11] = v129;
      v127[12] = &protocol witness table for PommesServerFallbackPreferences;
      v127[8] = v130;
      outlined init with take of PatternFlowProviding(v233, (uint64_t)(v127 + 3));
      v127[2] = v124;
      uint64_t v131 = type metadata accessor for ExperienceSelector();
      uint64_t v132 = swift_allocObject(v131, 16LL, 7LL);
      uint64_t v133 = type metadata accessor for InformationRoutingFlow(0LL);
      uint64_t v134 = swift_allocObject(v133, *(unsigned int *)(v133 + 48), *(unsigned __int16 *)(v133 + 52));
      uint64_t v135 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v236, v237);
      __chkstk_darwin(v135);
      v137 = v112;
      v138 = (char *)&v218 - ((v136 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v139 + 16))(v138);
      uint64_t v63 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( v119,  v235,  v234,  (uint64_t)v127,  v132,  (uint64_t)v238,  v228 & 1,  (uint64_t)v138,  v134,  v229,  v227);
      swift_release(v127);
      swift_release(v132);
      __swift_destroy_boxed_opaque_existential_1(v236);
      __swift_destroy_boxed_opaque_existential_1(v239);
      outlined destroy of Any?(v232, &demangling cache variable for type metadata for CurareInteractionStream?);
      uint64_t v140 = type metadata accessor for Input(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v140 - 8) + 8LL))(v231, v140);
      v137(v219, v126);
      v137((char *)v31, v126);
      return v63;
    }

    char v118 = _stringCompareWithSmolCheck(_:_:expecting:)(v114, v115, 0xD000000000000040LL, 0x800000000007F040LL, 0LL);
    swift_bridgeObjectRelease(v116);
    if ((v118 & 1) != 0) {
      goto LABEL_17;
    }
    v112(v18, v39);
    v142 = v221;
    uint64_t v143 = v38((char *)v221, v31, v39);
    uint64_t v144 = Parse.DirectInvocation.identifier.getter(v143);
    uint64_t v146 = v145;
    v218 = v31;
    if (v144 == 0xD00000000000003ELL && v145 == 0x800000000007F090LL)
    {
      swift_bridgeObjectRelease(0x800000000007F090LL);
LABEL_23:
      uint64_t v148 = (uint64_t)v226;
      v38((char *)v226, v142, v39);
      swift_storeEnumTagMultiPayload(v148, v224, 10LL);
      uint64_t v149 = v232;
      outlined init with copy of IdentifiedUser?( v232,  (uint64_t)v238,  &demangling cache variable for type metadata for CurareInteractionStream?);
      uint64_t v150 = outlined init with copy of OutputPublisherAsync((uint64_t)v239, (uint64_t)v236);
      v151 = static AceService.currentAsync.getter(v235, v150);
      v152 = static OutputPublisherFactory.makeOutputPublisherAsync()(v234, v151);
      static Device.current.getter(v233, v152);
      type metadata accessor for CommonCATs(0LL);
      v153 = v225;
      static CATOption.defaultMode.getter();
      uint64_t v154 = CATWrapper.__allocating_init(options:globals:)(v153, 0LL);
      uint64_t v155 = type metadata accessor for InformationViewFactory();
      v156 = (void *)swift_allocObject(v155, 104LL, 7LL);
      id v157 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
      uint64_t v158 = type metadata accessor for PommesServerFallbackPreferences(0LL);
      swift_allocObject(v158, *(unsigned int *)(v158 + 48), *(unsigned __int16 *)(v158 + 52));
      uint64_t v159 = PommesServerFallbackPreferences.init(_:)(v157);
      v156[11] = v158;
      v156[12] = &protocol witness table for PommesServerFallbackPreferences;
      v156[8] = v159;
      outlined init with take of PatternFlowProviding(v233, (uint64_t)(v156 + 3));
      v156[2] = v154;
      uint64_t v160 = type metadata accessor for ExperienceSelector();
      uint64_t v161 = swift_allocObject(v160, 16LL, 7LL);
      uint64_t v162 = type metadata accessor for InformationRoutingFlow(0LL);
      uint64_t v163 = swift_allocObject(v162, *(unsigned int *)(v162 + 48), *(unsigned __int16 *)(v162 + 52));
      uint64_t v164 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v236, v237);
      __chkstk_darwin(v164);
      v166 = v112;
      v167 = (char *)&v218 - ((v165 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v168 + 16))(v167);
      uint64_t v63 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( v148,  v235,  v234,  (uint64_t)v156,  v161,  (uint64_t)v238,  v228 & 1,  (uint64_t)v167,  v163,  v229,  v227);
      swift_release(v156);
      swift_release(v161);
      __swift_destroy_boxed_opaque_existential_1(v236);
      __swift_destroy_boxed_opaque_existential_1(v239);
      outlined destroy of Any?(v149, &demangling cache variable for type metadata for CurareInteractionStream?);
      uint64_t v169 = type metadata accessor for Input(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v169 - 8) + 8LL))(v231, v169);
      v166((char *)v221, v39);
      v166((char *)v218, v39);
      return v63;
    }

    char v147 = _stringCompareWithSmolCheck(_:_:expecting:)(v144, v145, 0xD00000000000003ELL, 0x800000000007F090LL, 0LL);
    swift_bridgeObjectRelease(v146);
    if ((v147 & 1) != 0) {
      goto LABEL_23;
    }
    v112((char *)v142, v39);
    v170 = v220;
    uint64_t v171 = v38(v220, v31, v39);
    uint64_t v172 = Parse.DirectInvocation.identifier.getter(v171);
    uint64_t v174 = v173;
    if (v172 == 0xD000000000000045LL && v173 == 0x800000000007F0D0LL)
    {
      swift_bridgeObjectRelease(0x800000000007F0D0LL);
      v175 = v225;
      uint64_t v176 = v224;
    }

    else
    {
      char v177 = _stringCompareWithSmolCheck(_:_:expecting:)(v172, v173, 0xD000000000000045LL, 0x800000000007F0D0LL, 0LL);
      swift_bridgeObjectRelease(v174);
      v175 = v225;
      uint64_t v176 = v224;
      if ((v177 & 1) == 0)
      {
        v112(v170, v39);
        (*(void (**)(char *, void **, uint64_t))(v37 + 32))(v36, v31, v39);
        uint64_t v198 = (uint64_t)v226;
        v38((char *)v226, (void **)v36, v39);
        swift_storeEnumTagMultiPayload(v198, v176, 3LL);
        uint64_t v199 = v232;
        outlined init with copy of IdentifiedUser?( v232,  (uint64_t)v238,  &demangling cache variable for type metadata for CurareInteractionStream?);
        uint64_t v200 = outlined init with copy of OutputPublisherAsync((uint64_t)v239, (uint64_t)v236);
        v201 = static AceService.currentAsync.getter(v235, v200);
        v202 = static OutputPublisherFactory.makeOutputPublisherAsync()(v234, v201);
        static Device.current.getter(v233, v202);
        type metadata accessor for CommonCATs(0LL);
        static CATOption.defaultMode.getter();
        uint64_t v203 = CATWrapper.__allocating_init(options:globals:)(v175, 0LL);
        uint64_t v204 = type metadata accessor for InformationViewFactory();
        v205 = (void *)swift_allocObject(v204, 104LL, 7LL);
        id v206 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
        uint64_t v207 = type metadata accessor for PommesServerFallbackPreferences(0LL);
        swift_allocObject(v207, *(unsigned int *)(v207 + 48), *(unsigned __int16 *)(v207 + 52));
        uint64_t v208 = PommesServerFallbackPreferences.init(_:)(v206);
        v205[11] = v207;
        v205[12] = &protocol witness table for PommesServerFallbackPreferences;
        v205[8] = v208;
        outlined init with take of PatternFlowProviding(v233, (uint64_t)(v205 + 3));
        v205[2] = v203;
        uint64_t v209 = type metadata accessor for ExperienceSelector();
        uint64_t v210 = swift_allocObject(v209, 16LL, 7LL);
        uint64_t v211 = type metadata accessor for InformationRoutingFlow(0LL);
        uint64_t v212 = swift_allocObject(v211, *(unsigned int *)(v211 + 48), *(unsigned __int16 *)(v211 + 52));
        uint64_t v213 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v236, v237);
        __chkstk_darwin(v213);
        v215 = (char *)&v218 - ((v214 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v216 + 16))(v215);
        uint64_t v63 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( v198,  v235,  v234,  (uint64_t)v205,  v210,  (uint64_t)v238,  v228 & 1,  (uint64_t)v215,  v212,  v229,  v227);
        swift_release(v205);
        swift_release(v210);
        __swift_destroy_boxed_opaque_existential_1(v236);
        __swift_destroy_boxed_opaque_existential_1(v239);
        outlined destroy of Any?(v199, &demangling cache variable for type metadata for CurareInteractionStream?);
        uint64_t v217 = type metadata accessor for Input(0LL);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v217 - 8) + 8LL))(v231, v217);
        v112(v36, v230);
        return v63;
      }
    }

    uint64_t v178 = (uint64_t)v226;
    v38((char *)v226, (void **)v170, v39);
    swift_storeEnumTagMultiPayload(v178, v176, 9LL);
    uint64_t v179 = v232;
    outlined init with copy of IdentifiedUser?( v232,  (uint64_t)v238,  &demangling cache variable for type metadata for CurareInteractionStream?);
    uint64_t v180 = outlined init with copy of OutputPublisherAsync((uint64_t)v239, (uint64_t)v236);
    v181 = static AceService.currentAsync.getter(v235, v180);
    v182 = static OutputPublisherFactory.makeOutputPublisherAsync()(v234, v181);
    static Device.current.getter(v233, v182);
    type metadata accessor for CommonCATs(0LL);
    static CATOption.defaultMode.getter();
    uint64_t v183 = CATWrapper.__allocating_init(options:globals:)(v175, 0LL);
    uint64_t v184 = type metadata accessor for InformationViewFactory();
    v185 = (void *)swift_allocObject(v184, 104LL, 7LL);
    id v186 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
    uint64_t v187 = type metadata accessor for PommesServerFallbackPreferences(0LL);
    swift_allocObject(v187, *(unsigned int *)(v187 + 48), *(unsigned __int16 *)(v187 + 52));
    uint64_t v188 = PommesServerFallbackPreferences.init(_:)(v186);
    v185[11] = v187;
    v185[12] = &protocol witness table for PommesServerFallbackPreferences;
    v185[8] = v188;
    outlined init with take of PatternFlowProviding(v233, (uint64_t)(v185 + 3));
    v185[2] = v183;
    uint64_t v189 = type metadata accessor for ExperienceSelector();
    uint64_t v190 = swift_allocObject(v189, 16LL, 7LL);
    uint64_t v191 = type metadata accessor for InformationRoutingFlow(0LL);
    uint64_t v192 = swift_allocObject(v191, *(unsigned int *)(v191 + 48), *(unsigned __int16 *)(v191 + 52));
    uint64_t v193 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v236, v237);
    __chkstk_darwin(v193);
    v195 = (char *)&v218 - ((v194 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v196 + 16))(v195);
    uint64_t v63 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( v178,  v235,  v234,  (uint64_t)v185,  v190,  (uint64_t)v238,  v228 & 1,  (uint64_t)v195,  v192,  v229,  v227);
    swift_release(v185);
    swift_release(v190);
    __swift_destroy_boxed_opaque_existential_1(v236);
    __swift_destroy_boxed_opaque_existential_1(v239);
    outlined destroy of Any?(v179, &demangling cache variable for type metadata for CurareInteractionStream?);
    uint64_t v197 = type metadata accessor for Input(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v197 - 8) + 8LL))(v231, v197);
    v112(v220, v39);
    v112((char *)v218, v39);
  }

  else if (v35 == enum case for Parse.pegasusResults(_:))
  {
    (*(void (**)(void **, uint64_t))(v29 + 96))(v31, v28);
    (*(void (**)(char *, void **, uint64_t))(v25 + 32))(v27, v31, v24);
    uint64_t v44 = (uint64_t)v226;
    (*(void (**)(void **, char *, uint64_t))(v25 + 16))(v226, v27, v24);
    swift_storeEnumTagMultiPayload(v44, v224, 1LL);
    outlined init with copy of IdentifiedUser?( v232,  (uint64_t)v238,  &demangling cache variable for type metadata for CurareInteractionStream?);
    uint64_t v45 = outlined init with copy of OutputPublisherAsync((uint64_t)v239, (uint64_t)v236);
    uint64_t v46 = static AceService.currentAsync.getter(v235, v45);
    uint64_t v47 = static OutputPublisherFactory.makeOutputPublisherAsync()(v234, v46);
    static Device.current.getter(v233, v47);
    type metadata accessor for CommonCATs(0LL);
    uint64_t v48 = v225;
    static CATOption.defaultMode.getter();
    uint64_t v49 = CATWrapper.__allocating_init(options:globals:)(v48, 0LL);
    uint64_t v50 = type metadata accessor for InformationViewFactory();
    uint64_t v51 = (void *)swift_allocObject(v50, 104LL, 7LL);
    id v52 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
    uint64_t v53 = type metadata accessor for PommesServerFallbackPreferences(0LL);
    swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
    uint64_t v54 = PommesServerFallbackPreferences.init(_:)(v52);
    v51[11] = v53;
    v51[12] = &protocol witness table for PommesServerFallbackPreferences;
    v51[8] = v54;
    outlined init with take of PatternFlowProviding(v233, (uint64_t)(v51 + 3));
    void v51[2] = v49;
    uint64_t v55 = type metadata accessor for ExperienceSelector();
    uint64_t v56 = swift_allocObject(v55, 16LL, 7LL);
    uint64_t v57 = type metadata accessor for InformationRoutingFlow(0LL);
    uint64_t v58 = swift_allocObject(v57, *(unsigned int *)(v57 + 48), *(unsigned __int16 *)(v57 + 52));
    uint64_t v59 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v236, v237);
    __chkstk_darwin(v59);
    uint64_t v61 = (char *)&v218 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v62 + 16))(v61);
    uint64_t v63 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( v44,  v235,  v234,  (uint64_t)v51,  v56,  (uint64_t)v238,  v228 & 1,  (uint64_t)v61,  v58,  v229,  v227);
    swift_release(v51);
    swift_release(v56);
    __swift_destroy_boxed_opaque_existential_1(v236);
    __swift_destroy_boxed_opaque_existential_1(v239);
    outlined destroy of Any?(v232, &demangling cache variable for type metadata for CurareInteractionStream?);
    uint64_t v64 = type metadata accessor for Input(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v64 - 8) + 8LL))(v231, v64);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  }

  else if (v35 == enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(void **, uint64_t))(v29 + 96))(v31, v28);
    v89 = *v31;
    uint64_t v90 = (uint64_t)v226;
    *v226 = *v31;
    *(_BYTE *)(v90 + 8) = 2;
    swift_storeEnumTagMultiPayload(v90, v224, 0LL);
    uint64_t v91 = v232;
    outlined init with copy of IdentifiedUser?( v232,  (uint64_t)v238,  &demangling cache variable for type metadata for CurareInteractionStream?);
    outlined init with copy of OutputPublisherAsync((uint64_t)v239, (uint64_t)v236);
    id v92 = v89;
    v93 = static AceService.currentAsync.getter(v235, v92);
    v94 = static OutputPublisherFactory.makeOutputPublisherAsync()(v234, v93);
    static Device.current.getter(v233, v94);
    type metadata accessor for CommonCATs(0LL);
    v95 = v225;
    static CATOption.defaultMode.getter();
    uint64_t v96 = CATWrapper.__allocating_init(options:globals:)(v95, 0LL);
    uint64_t v97 = type metadata accessor for InformationViewFactory();
    v98 = (void *)swift_allocObject(v97, 104LL, 7LL);
    id v99 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
    uint64_t v100 = type metadata accessor for PommesServerFallbackPreferences(0LL);
    swift_allocObject(v100, *(unsigned int *)(v100 + 48), *(unsigned __int16 *)(v100 + 52));
    uint64_t v101 = PommesServerFallbackPreferences.init(_:)(v99);
    v98[11] = v100;
    v98[12] = &protocol witness table for PommesServerFallbackPreferences;
    v98[8] = v101;
    outlined init with take of PatternFlowProviding(v233, (uint64_t)(v98 + 3));
    v98[2] = v96;
    uint64_t v102 = type metadata accessor for ExperienceSelector();
    uint64_t v103 = swift_allocObject(v102, 16LL, 7LL);
    uint64_t v104 = type metadata accessor for InformationRoutingFlow(0LL);
    uint64_t v105 = swift_allocObject(v104, *(unsigned int *)(v104 + 48), *(unsigned __int16 *)(v104 + 52));
    uint64_t v106 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v236, v237);
    __chkstk_darwin(v106);
    v108 = (char *)&v218 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v109 + 16))(v108);
    uint64_t v63 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( v90,  v235,  v234,  (uint64_t)v98,  v103,  (uint64_t)v238,  v228 & 1,  (uint64_t)v108,  v105,  v229,  v227);
    swift_release(v98);
    swift_release(v103);
    __swift_destroy_boxed_opaque_existential_1(v236);

    __swift_destroy_boxed_opaque_existential_1(v239);
    outlined destroy of Any?(v91, &demangling cache variable for type metadata for CurareInteractionStream?);
    uint64_t v110 = type metadata accessor for Input(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v110 - 8) + 8LL))(v231, v110);
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_1(v239);
    outlined destroy of Any?(v232, &demangling cache variable for type metadata for CurareInteractionStream?);
    uint64_t v117 = type metadata accessor for Input(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v117 - 8) + 8LL))(v231, v117);
    (*(void (**)(void **, uint64_t))(v29 + 8))(v31, v28);
    return 0LL;
  }

  return v63;
}

unint64_t specialized InformationRoutingFlow.Invocations.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of InformationRoutingFlow.Invocations.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

uint64_t type metadata accessor for InformationRoutingFlow.State(uint64_t a1)
{
  return type metadata accessor for InformationRoutingFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for InformationRoutingFlow.State,  (uint64_t)&nominal type descriptor for InformationRoutingFlow.State);
}

uint64_t outlined assign with take of InformationRoutingFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InformationRoutingFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

uint64_t specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v26 = a7;
  uint64_t v25 = a6;
  uint64_t v17 = type metadata accessor for UtteranceNormalizer(0LL);
  uint64_t v27 = *(void *)(v17 - 8);
  uint64_t v28 = v17;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v30[3] = a10;
  v30[4] = a11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v30);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32LL))( boxed_opaque_existential_1,  a8,  a10);
  uint64_t v21 = a9 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_interactionStream;
  *(_OWORD *)uint64_t v21 = 0u;
  *(_OWORD *)(v21 + 16) = 0u;
  *(void *)(v21 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
  uint64_t v22 = a1;
  outlined init with copy of InformationRoutingFlow.State( a1,  a9 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_state,  type metadata accessor for InformationRoutingFlow.State);
  outlined init with copy of OutputPublisherAsync((uint64_t)a2, a9 + 56);
  outlined init with copy of OutputPublisherAsync((uint64_t)a3, a9 + 16);
  *(void *)(a9 + 96) = a4;
  *(void *)(a9 + 104) = a5;
  swift_beginAccess(v21, v29, 33LL, 0LL);
  swift_retain(a4);
  swift_retain(a5);
  uint64_t v23 = v25;
  outlined assign with copy of CurareInteractionStream?(v25, v21);
  swift_endAccess(v29);
  *(_BYTE *)(a9 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_isSiriLocationServicesPromptingEnabled) = v26;
  outlined init with copy of OutputPublisherAsync( (uint64_t)v30,  a9 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_knowledgeFallbackHelper);
  UtteranceNormalizer.init(locale:)(0LL, 0LL);
  __swift_destroy_boxed_opaque_existential_1(v30);
  outlined destroy of Any?(v23, &demangling cache variable for type metadata for CurareInteractionStream?);
  __swift_destroy_boxed_opaque_existential_1(a3);
  __swift_destroy_boxed_opaque_existential_1(a2);
  outlined destroy of InformationRoutingFlow.State(v22, type metadata accessor for InformationRoutingFlow.State);
  (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))( a9 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_utteranceNormalizer,  v19,  v28);
  return a9;
}

uint64_t specialized InformationRoutingFlow.__allocating_init(result:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v35 = a3;
  uint64_t v36 = a6;
  int v37 = a2;
  uint64_t v34 = a1;
  uint64_t v8 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for InformationRoutingFlow.State(0LL);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for Parse.PegasusResult(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v16, a1, v17);
  uint64_t v19 = swift_storeEnumTagMultiPayload(v16, v14, 1LL);
  uint64_t v20 = static AceService.currentAsync.getter(v40, v19);
  uint64_t v21 = static OutputPublisherFactory.makeOutputPublisherAsync()(v39, v20);
  static Device.current.getter(v38, v21);
  type metadata accessor for CommonCATs(0LL);
  static CATOption.defaultMode.getter();
  uint64_t v22 = CATWrapper.__allocating_init(options:globals:)(v13, 0LL);
  uint64_t v23 = type metadata accessor for InformationViewFactory();
  uint64_t v24 = (void *)swift_allocObject(v23, 104LL, 7LL);
  id v25 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
  uint64_t v26 = type metadata accessor for PommesServerFallbackPreferences(0LL);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  uint64_t v27 = PommesServerFallbackPreferences.init(_:)(v25);
  v24[11] = v26;
  v24[12] = &protocol witness table for PommesServerFallbackPreferences;
  v24[8] = v27;
  outlined init with take of PatternFlowProviding(v38, (uint64_t)(v24 + 3));
  v24[2] = v22;
  uint64_t v28 = type metadata accessor for ExperienceSelector();
  uint64_t v29 = swift_allocObject(v28, 16LL, 7LL);
  type metadata accessor for PommesResponse(0LL);
  static PommesResponse.makeDefaultInteractionStream()(v38);
  uint64_t v30 = type metadata accessor for InformationRoutingFlow(0LL);
  uint64_t v31 = swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v35, a5);
  uint64_t v32 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( (uint64_t)v16,  v40,  v39,  (uint64_t)v24,  v29,  (uint64_t)v38,  v37,  (uint64_t)v10,  v31,  a5,  v36);
  swift_release(v24);
  swift_release(v29);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v34, v17);
  return v32;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t partial apply for specialized closure #1 in FlowTrampolining.makeResponse(forErrorMessage:)()
{
  return specialized closure #1 in FlowTrampolining.makeResponse(forErrorMessage:)( *(uint64_t **)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32));
}

{
  uint64_t v0;
  return specialized closure #1 in FlowTrampolining.makeResponse(forErrorMessage:)( *(uint64_t **)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32));
}

{
  uint64_t v0;
  return specialized closure #1 in FlowTrampolining.makeResponse(forErrorMessage:)( *(uint64_t **)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32));
}

{
  uint64_t v0;
  return specialized closure #1 in FlowTrampolining.makeResponse(forErrorMessage:)( *(uint64_t **)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32));
}

{
  uint64_t v0;
  return specialized closure #1 in FlowTrampolining.makeResponse(forErrorMessage:)( *(uint64_t **)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32));
}

uint64_t lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t specialized RenderPegasusFlow.init(experience:pommesResponse:outputPublisher:informationViewFactory:renderComponentFlowFactory:flowTaskLogger:aceServiceInvoker:pegasusPatternFlowFactory:appChecking:responseProducerType:)( uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v65 = a8;
  uint64_t v66 = a7;
  uint64_t v57 = a5;
  uint64_t v62 = a1;
  uint64_t v68 = a11;
  uint64_t v69 = a3;
  uint64_t v67 = a10;
  uint64_t v60 = a9;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for ActivityType(0LL);
  uint64_t v58 = *(void *)(v19 - 8);
  uint64_t v59 = v19;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for PerformanceUtil.Ticket(0LL);
  uint64_t v63 = *(void *)(v25 - 8);
  uint64_t v64 = v25;
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v61 = (char *)&v56 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26);
  uint64_t v56 = (char *)&v56 - v28;
  uint64_t v29 = type metadata accessor for PommesSystemAppChecking(0LL);
  uint64_t v71 = v29;
  uint64_t v72 = &protocol witness table for PommesSystemAppChecking;
  uint64_t v30 = __swift_allocate_boxed_opaque_existential_1(&v70);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 32LL))(v30, v60, v29);
  *(void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_rrEntities) = _swiftEmptyArrayStorage;
  outlined init with copy of InformationRoutingFlow.State( a1,  a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_experience,  type metadata accessor for PegasusExperience);
  *(void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_pommesResponse) = a2;
  outlined init with copy of OutputPublisherAsync( (uint64_t)v69,  a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_outputPublisher);
  *(void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_informationViewFactory) = a4;
  uint64_t v31 = v57;
  *(void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_renderComponentFlowFactory) = v57;
  uint64_t v60 = OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_flowTaskLogger;
  *(void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_flowTaskLogger) = a6;
  id v32 = a2;
  swift_retain(a4);
  swift_retain(v31);
  uint64_t v33 = swift_retain(a6);
  Date.init()(v33);
  char v54 = 2;
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0xD00000000000004ALL,  0x800000000007F8C0LL,  v24,  "InformationFlowPlugin/RenderPegasusFlow.swift",  45LL,  2LL,  121LL,  "init(experience:pommesResponse:outputPublisher:informationViewFactory:renderComponentFlowFactory:flowTaskLogger:aceS erviceInvoker:pegasusPatternFlowFactory:appChecking:responseProducerType:)",  190LL,  v54);
  uint64_t v35 = v58;
  uint64_t v34 = v59;
  (*(void (**)(char *, void, uint64_t))(v58 + 104))(v21, enum case for ActivityType.start(_:), v59);
  uint64_t v36 = enum case for SiriKitReliabilityCodes.normal(_:);
  uint64_t v37 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  uint64_t v38 = *(void *)(v37 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 104))(v18, v36, v37);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v18, 0LL, 1LL, v37);
  (*(void (**)(char *, uint64_t, unint64_t, char *, unint64_t, unint64_t, uint64_t, unint64_t))(*(void *)a6 + 120LL))( v21,  0x6C7070615F746F6ELL,  0xEE00656C62616369LL,  v18,  0xD000000000000018LL,  0x800000000007F9D0LL,  0x54746E6572727543LL,  0xEB000000006B7361LL);
  outlined destroy of Any?((uint64_t)v18, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v21, v34);
  type metadata accessor for PerformanceUtil(0LL);
  uint64_t v39 = ((uint64_t (*)(void))static PerformanceUtil.shared.getter)();
  uint64_t v40 = v56;
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v56, 0LL);
  uint64_t v41 = swift_release(v39);
  Date.init()(v41);
  LOBYTE(v55) = 2;
  uint64_t v42 = v61;
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0xD000000000000034LL,  0x800000000007F9F0LL,  v24,  "InformationFlowPlugin/RenderPegasusFlow.swift",  45LL,  2LL,  125LL,  "init(experience:pommesResponse:outputPublisher:informationViewFactory:renderComponentFlowFactory:flowTaskLogger:aceS erviceInvoker:pegasusPatternFlowFactory:appChecking:responseProducerType:)",  190LL,  v55);
  uint64_t v43 = *(void *)(a12 + v60);
  uint64_t v44 = *(void (**)(uint64_t))(*(void *)v43 + 152LL);
  uint64_t v45 = swift_retain(v43);
  v44(v45);
  uint64_t v46 = swift_release(v43);
  uint64_t v47 = static PerformanceUtil.shared.getter(v46);
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v42, 0LL);
  swift_release(v47);
  __swift_destroy_boxed_opaque_existential_1(v69);
  outlined destroy of InformationRoutingFlow.State(v62, type metadata accessor for PegasusExperience);
  uint64_t v48 = v64;
  uint64_t v49 = *(void (**)(char *, uint64_t))(v63 + 8);
  v49(v42, v64);
  v49(v40, v48);
  uint64_t v50 = v66;
  *(void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_pegasusPatternFlowFactory) = v65;
  outlined init with take of PatternFlowProviding( v50,  a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_aceServiceInvoker);
  outlined init with take of PatternFlowProviding( &v70,  a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_appChecking);
  uint64_t v51 = (void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_responseProducerType);
  uint64_t v52 = v68;
  *uint64_t v51 = v67;
  v51[1] = v52;
  return a12;
}

uint64_t sub_BA60()
{
  uint64_t v1 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #1 in InformationRoutingFlow.execute()(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for Parse.DirectInvocation(0LL) - 8) + 80LL);
  return closure #1 in InformationRoutingFlow.execute()( a1,  *(void *)(v1 + 16),  (void (*)(char *, char *, uint64_t))(v1 + ((v3 + 24) & ~v3)));
}

uint64_t outlined init with take of Flow?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for InformationRoutingFlow(uint64_t a1)
{
  return type metadata accessor for InformationRoutingFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for InformationRoutingFlow,  (uint64_t)&nominal type descriptor for InformationRoutingFlow);
}

uint64_t type metadata accessor for InformationRoutingFlow.State(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t specialized InformationRoutingEntryPoint.flowFor(input:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Input(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v14[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  type metadata accessor for PommesResponse(0LL);
  static PommesResponse.makeDefaultInteractionStream()(v14);
  int v6 = [(id)objc_opt_self(AFFeatureFlags) isSiriLocationServicesPromptingEnabled];
  uint64_t v7 = specialized InformationRoutingFlow.__allocating_init(input:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( (uint64_t)v4,  (uint64_t)v14,  v6);
  if (!v7) {
    return 0LL;
  }
  uint64_t v8 = v7;
  v14[0] = v7;
  uint64_t v9 = type metadata accessor for InformationRoutingFlow(0LL);
  uint64_t v10 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type InformationRoutingFlow and conformance InformationRoutingFlow,  type metadata accessor for InformationRoutingFlow,  (uint64_t)&protocol conformance descriptor for InformationRoutingFlow);
  uint64_t v11 = Flow.eraseToAnyFlow()(v9, v10);
  swift_release(v8);
  return v11;
}

unint64_t lazy protocol witness table accessor for type InformationRoutingFlow.Invocations and conformance InformationRoutingFlow.Invocations()
{
  unint64_t result = lazy protocol witness table cache variable for type InformationRoutingFlow.Invocations and conformance InformationRoutingFlow.Invocations;
  if (!lazy protocol witness table cache variable for type InformationRoutingFlow.Invocations and conformance InformationRoutingFlow.Invocations)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for InformationRoutingFlow.Invocations,  &type metadata for InformationRoutingFlow.Invocations);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type InformationRoutingFlow.Invocations and conformance InformationRoutingFlow.Invocations);
  }

  return result;
}

uint64_t sub_BCF4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 160LL))();
}

uint64_t sub_BD1C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 168LL))();
}

uint64_t sub_BD44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 184LL))();
}

uint64_t ObjC metadata update function for InformationRoutingFlow()
{
  return type metadata accessor for InformationRoutingFlow(0LL);
}

uint64_t type metadata completion function for InformationRoutingFlow(uint64_t a1)
{
  v5[0] = (char *)&value witness table for () + 64;
  v5[1] = "(";
  v5[2] = "(";
  v5[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = type metadata accessor for InformationRoutingFlow.State(319LL);
  if (v3 <= 0x3F)
  {
    v5[5] = *(void *)(result - 8) + 64LL;
    v5[6] = &unk_7CC20;
    v5[7] = &unk_7CC38;
    v5[8] = "(";
    uint64_t result = type metadata accessor for UtteranceNormalizer(319LL);
    if (v4 <= 0x3F)
    {
      void v5[9] = *(void *)(result - 8) + 64LL;
      return swift_updateClassMetadata2(a1, 256LL, 10LL, v5, a1 + 80);
    }
  }

  return result;
}

char *initializeBufferWithCopyOfBuffer for InformationRoutingFlow.State(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v10 = *(char **)a2;
    *(void *)a1 = *(void *)a2;
    a1 = &v10[(v6 + 16LL) & ~(unint64_t)v6];
    swift_retain(v10);
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v8 = *(char **)a2;
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        uint64_t v9 = v8;
        swift_storeEnumTagMultiPayload(a1, a3, 0LL);
        break;
      case 1u:
        uint64_t v12 = type metadata accessor for Parse.PegasusResult(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(a1, a2, v12);
        swift_storeEnumTagMultiPayload(a1, a3, 1LL);
        break;
      case 2u:
        uint64_t v13 = *(char **)a2;
        *(void *)a1 = *(void *)a2;
        uint64_t v14 = v13;
        uint64_t v16 = &a1[v15];
        uint64_t v17 = &a2[v15];
        uint64_t v18 = type metadata accessor for IdentifiedUser(0LL);
        uint64_t v19 = *(void *)(v18 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18))
        {
          uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
        }

        swift_storeEnumTagMultiPayload(a1, a3, 2LL);
        break;
      case 3u:
        uint64_t v21 = type metadata accessor for Parse.DirectInvocation(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16LL))(a1, a2, v21);
        swift_storeEnumTagMultiPayload(a1, a3, 3LL);
        break;
      case 4u:
        uint64_t v22 = type metadata accessor for Parse.DirectInvocation(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16LL))(a1, a2, v22);
        swift_storeEnumTagMultiPayload(a1, a3, 4LL);
        break;
      case 5u:
        uint64_t v23 = type metadata accessor for Parse.DirectInvocation(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16LL))(a1, a2, v23);
        swift_storeEnumTagMultiPayload(a1, a3, 5LL);
        break;
      case 6u:
        uint64_t v24 = *((void *)a2 + 1);
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = v24;
        swift_bridgeObjectRetain(v24);
        swift_storeEnumTagMultiPayload(a1, a3, 6LL);
        break;
      case 7u:
        __int128 v25 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v25;
        (**(void (***)(void *, const void *))(v25 - 8))(a1, a2);
        swift_storeEnumTagMultiPayload(a1, a3, 7LL);
        break;
      case 8u:
        uint64_t v26 = *((void *)a2 + 1);
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = v26;
        uint64_t v27 = *((void *)a2 + 2);
        *((void *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v27;
        swift_bridgeObjectRetain(v26);
        swift_retain(v27);
        swift_storeEnumTagMultiPayload(a1, a3, 8LL);
        break;
      case 9u:
        uint64_t v28 = type metadata accessor for Parse.DirectInvocation(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16LL))(a1, a2, v28);
        swift_storeEnumTagMultiPayload(a1, a3, 9LL);
        break;
      case 0xAu:
        uint64_t v29 = type metadata accessor for Parse.DirectInvocation(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16LL))(a1, a2, v29);
        swift_storeEnumTagMultiPayload(a1, a3, 10LL);
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

void destroy for InformationRoutingFlow.State(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:

      return;
    case 1u:
      uint64_t v3 = type metadata accessor for Parse.PegasusResult(0LL);
      goto LABEL_3;
    case 2u:

      uint64_t v7 = a1
      uint64_t v8 = type metadata accessor for IdentifiedUser(0LL);
      uint64_t v9 = *(void *)(v8 - 8);
      uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
      uint64_t v6 = v7;
      uint64_t v4 = v8;
LABEL_4:
      v5(v6, v4);
      return;
    case 3u:
    case 4u:
    case 5u:
    case 9u:
    case 0xAu:
      uint64_t v3 = type metadata accessor for Parse.DirectInvocation(0LL);
LABEL_3:
      uint64_t v4 = v3;
      uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL);
      uint64_t v6 = a1;
      goto LABEL_4;
    case 6u:
      swift_bridgeObjectRelease(*(void *)(a1 + 8));
      return;
    case 7u:
      __swift_destroy_boxed_opaque_existential_1((void *)a1);
      return;
    case 8u:
      swift_bridgeObjectRelease(*(void *)(a1 + 8));
      swift_release(*(void *)(a1 + 16));
      return;
    default:
      return;
  }

char *initializeWithCopy for InformationRoutingFlow.State(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      uint64_t v6 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      id v7 = v6;
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 0LL;
      goto LABEL_17;
    case 1u:
      uint64_t v11 = type metadata accessor for Parse.PegasusResult(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 1LL;
      goto LABEL_17;
    case 2u:
      uint64_t v12 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      id v13 = v12;
      uint64_t v15 = &a1[v14];
      uint64_t v16 = &a2[v14];
      uint64_t v17 = type metadata accessor for IdentifiedUser(0LL);
      uint64_t v18 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
      {
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
        memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
      }

      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 2LL;
      goto LABEL_17;
    case 3u:
      uint64_t v20 = type metadata accessor for Parse.DirectInvocation(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16LL))(a1, a2, v20);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 3LL;
      goto LABEL_17;
    case 4u:
      uint64_t v21 = type metadata accessor for Parse.DirectInvocation(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16LL))(a1, a2, v21);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 4LL;
      goto LABEL_17;
    case 5u:
      uint64_t v22 = type metadata accessor for Parse.DirectInvocation(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16LL))(a1, a2, v22);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 5LL;
      goto LABEL_17;
    case 6u:
      uint64_t v23 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v23;
      swift_bridgeObjectRetain(v23);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 6LL;
      goto LABEL_17;
    case 7u:
      __int128 v24 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v24;
      (**(void (***)(void *, const void *))(v24 - 8))(a1, a2);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 7LL;
      goto LABEL_17;
    case 8u:
      uint64_t v25 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v25;
      uint64_t v26 = *((void *)a2 + 2);
      *((void *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v26;
      swift_bridgeObjectRetain(v25);
      swift_retain(v26);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 8LL;
      goto LABEL_17;
    case 9u:
      uint64_t v27 = type metadata accessor for Parse.DirectInvocation(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16LL))(a1, a2, v27);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 9LL;
      goto LABEL_17;
    case 0xAu:
      uint64_t v28 = type metadata accessor for Parse.DirectInvocation(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16LL))(a1, a2, v28);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 10LL;
LABEL_17:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

char *assignWithCopy for InformationRoutingFlow.State(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of InformationRoutingFlow.State( (uint64_t)a1,  type metadata accessor for InformationRoutingFlow.State);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v6 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        id v7 = v6;
        uint64_t v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 0LL;
        goto LABEL_18;
      case 1u:
        uint64_t v11 = type metadata accessor for Parse.PegasusResult(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
        uint64_t v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 1LL;
        goto LABEL_18;
      case 2u:
        uint64_t v12 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        id v13 = v12;
        uint64_t v15 = &a1[v14];
        uint64_t v16 = &a2[v14];
        uint64_t v17 = type metadata accessor for IdentifiedUser(0LL);
        uint64_t v18 = *(void *)(v17 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
        {
          uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
        }

        uint64_t v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 2LL;
        goto LABEL_18;
      case 3u:
        uint64_t v20 = type metadata accessor for Parse.DirectInvocation(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16LL))(a1, a2, v20);
        uint64_t v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 3LL;
        goto LABEL_18;
      case 4u:
        uint64_t v21 = type metadata accessor for Parse.DirectInvocation(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16LL))(a1, a2, v21);
        uint64_t v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 4LL;
        goto LABEL_18;
      case 5u:
        uint64_t v22 = type metadata accessor for Parse.DirectInvocation(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16LL))(a1, a2, v22);
        uint64_t v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 5LL;
        goto LABEL_18;
      case 6u:
        *(void *)a1 = *(void *)a2;
        uint64_t v23 = *((void *)a2 + 1);
        *((void *)a1 + 1) = v23;
        swift_bridgeObjectRetain(v23);
        uint64_t v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 6LL;
        goto LABEL_18;
      case 7u:
        uint64_t v24 = *((void *)a2 + 3);
        *((void *)a1 + 3) = v24;
        *((void *)a1 + 4) = *((void *)a2 + 4);
        (**(void (***)(void *, const void *))(v24 - 8))(a1, a2);
        uint64_t v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 7LL;
        goto LABEL_18;
      case 8u:
        *(void *)a1 = *(void *)a2;
        uint64_t v25 = *((void *)a2 + 1);
        *((void *)a1 + 1) = v25;
        uint64_t v26 = *((void *)a2 + 2);
        *((void *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v26;
        swift_bridgeObjectRetain(v25);
        swift_retain(v26);
        uint64_t v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 8LL;
        goto LABEL_18;
      case 9u:
        uint64_t v27 = type metadata accessor for Parse.DirectInvocation(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16LL))(a1, a2, v27);
        uint64_t v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 9LL;
        goto LABEL_18;
      case 0xAu:
        uint64_t v28 = type metadata accessor for Parse.DirectInvocation(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16LL))(a1, a2, v28);
        uint64_t v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 10LL;
LABEL_18:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

void *initializeWithTake for InformationRoutingFlow.State(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 1u:
      uint64_t v6 = type metadata accessor for Parse.PegasusResult(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      id v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 1LL;
      goto LABEL_13;
    case 2u:
      *a1 = *a2;
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for IdentifiedUser(0LL);
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13))
      {
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
      }

      id v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 2LL;
      goto LABEL_13;
    case 3u:
      uint64_t v16 = type metadata accessor for Parse.DirectInvocation(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 32LL))(a1, a2, v16);
      id v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 3LL;
      goto LABEL_13;
    case 4u:
      uint64_t v17 = type metadata accessor for Parse.DirectInvocation(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 32LL))(a1, a2, v17);
      id v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 4LL;
      goto LABEL_13;
    case 5u:
      uint64_t v18 = type metadata accessor for Parse.DirectInvocation(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 32LL))(a1, a2, v18);
      id v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 5LL;
      goto LABEL_13;
    case 9u:
      uint64_t v19 = type metadata accessor for Parse.DirectInvocation(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 32LL))(a1, a2, v19);
      id v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 9LL;
      goto LABEL_13;
    case 0xAu:
      uint64_t v20 = type metadata accessor for Parse.DirectInvocation(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 32LL))(a1, a2, v20);
      id v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 10LL;
LABEL_13:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

void *assignWithTake for InformationRoutingFlow.State(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of InformationRoutingFlow.State( (uint64_t)a1,  type metadata accessor for InformationRoutingFlow.State);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 1u:
        uint64_t v6 = type metadata accessor for Parse.PegasusResult(0LL);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
        id v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 1LL;
        goto LABEL_14;
      case 2u:
        *a1 = *a2;
        uint64_t v11 = (char *)a1 + v10;
        uint64_t v12 = (char *)a2 + v10;
        uint64_t v13 = type metadata accessor for IdentifiedUser(0LL);
        uint64_t v14 = *(void *)(v13 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13))
        {
          uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
        }

        id v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 2LL;
        goto LABEL_14;
      case 3u:
        uint64_t v16 = type metadata accessor for Parse.DirectInvocation(0LL);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 32LL))(a1, a2, v16);
        id v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 3LL;
        goto LABEL_14;
      case 4u:
        uint64_t v17 = type metadata accessor for Parse.DirectInvocation(0LL);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 32LL))(a1, a2, v17);
        id v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 4LL;
        goto LABEL_14;
      case 5u:
        uint64_t v18 = type metadata accessor for Parse.DirectInvocation(0LL);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 32LL))(a1, a2, v18);
        id v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 5LL;
        goto LABEL_14;
      case 9u:
        uint64_t v19 = type metadata accessor for Parse.DirectInvocation(0LL);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 32LL))(a1, a2, v19);
        id v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 9LL;
        goto LABEL_14;
      case 0xAu:
        uint64_t v20 = type metadata accessor for Parse.DirectInvocation(0LL);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 32LL))(a1, a2, v20);
        id v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 10LL;
LABEL_14:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for InformationRoutingFlow.State(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t storeEnumTagSinglePayload for InformationRoutingFlow.State( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t destructiveInjectEnumTag for InformationRoutingFlow.State(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

void type metadata completion function for InformationRoutingFlow.State(uint64_t a1)
{
  v9[0] = "\t";
  uint64_t v2 = type metadata accessor for Parse.PegasusResult(319LL);
  if (v3 <= 0x3F)
  {
    v9[1] = *(void *)(v2 - 8) + 64LL;
    type metadata accessor for IdentifiedUser?(319LL);
    if (v5 <= 0x3F)
    {
      swift_getTupleTypeLayout2( v8,  (char *)&value witness table for Builtin.UnknownObject + 64,  *(void *)(v4 - 8) + 64LL);
      v9[2] = v8;
      uint64_t v6 = type metadata accessor for Parse.DirectInvocation(319LL);
      if (v7 <= 0x3F)
      {
        uint64_t v10 = *(void *)(v6 - 8) + 64LL;
        uint64_t v11 = v10;
        uint64_t v12 = v10;
        uint64_t v13 = &unk_7CC70;
        uint64_t v14 = "(";
        uint64_t v15 = &unk_7CC88;
        uint64_t v16 = v10;
        uint64_t v17 = v10;
        swift_initEnumMetadataMultiPayload(a1, 256LL, 11LL, v9);
      }
    }
  }

void type metadata accessor for IdentifiedUser?(uint64_t a1)
{
  if (!lazy cache variable for type metadata for IdentifiedUser?)
  {
    uint64_t v2 = type metadata accessor for IdentifiedUser(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for IdentifiedUser?);
    }
  }

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for InformationRoutingFlow.Invocations(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

      memcpy(a1, a2, v11);
      return a1;
    }

    (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
  }

  return a1;
}

      memcpy(a1, a2, v11);
      return a1;
    }

    (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
  }

  return a1;
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for InformationRoutingFlow.Invocations( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_CF88 + 4 * byte_7CA7D[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_CFBC + 4 * byte_7CA78[v4]))();
}

uint64_t sub_CFBC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_CFC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xCFCCLL);
  }
  return result;
}

uint64_t sub_CFD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xCFE0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_CFE4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_CFEC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for InformationRoutingFlow.Invocations(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for InformationRoutingFlow.Invocations(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for InformationRoutingFlow.Invocations()
{
  return &type metadata for InformationRoutingFlow.Invocations;
}

ValueMetadata *type metadata accessor for InformationRoutingEntryPoint()
{
  return &type metadata for InformationRoutingEntryPoint;
}

uint64_t protocol witness for FlowEntryPoint.flowFor(input:) in conformance InformationRoutingEntryPoint( uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t partial apply for closure #1 in FlowTrampolining.makeResponse(for:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in FlowTrampolining.makeResponse(for:)(a1);
}

uint64_t sub_D06C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t partial apply for closure #1 in InformationRoutingFlow.renderUserIdentificationGuardFlow(_:)( unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(v1 + 16) + 288LL))(*a1, *(void *)(v1 + 24));
}

uint64_t outlined init with copy of IdentifiedUser?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in RenderPegasusFlow.init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)()
{
  return closure #1 in RenderPegasusFlow.init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)( *(void *)(v0 + 16),  *(void *)(v0 + 24));
}

uint64_t outlined init with copy of InformationRoutingFlow.State( uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of InformationRoutingFlow.State(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t outlined destroy of Any?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t outlined assign with copy of CurareInteractionStream?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurareInteractionStream?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

uint64_t closure #1 in FlowTrampolining.makeResponse(for:)partial apply@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in FlowTrampolining.makeResponse(for:)(a1);
}

uint64_t closure #1 in FlowTrampolining.makeResponse(forErrorMessage:)specialized partial apply()
{
  return partial apply for specialized closure #1 in FlowTrampolining.makeResponse(forErrorMessage:)();
}

uint64_t static SportsPersonalizationMetrics.submit<A>(for:instruction:logger:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v102 = a5;
  uint64_t v109 = a3;
  uint64_t v114 = a1;
  uint64_t v7 = type metadata accessor for SportsResolverMetrics(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v107 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsResolverMetrics?);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v103 = (char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  v108 = (char *)&v95 - v13;
  uint64_t v101 = a4;
  uint64_t v16 = type metadata accessor for SportsPersonalizationSelection(0LL, a4, v14, v15);
  uint64_t v111 = *(void *)(v16 - 8);
  uint64_t v112 = v16;
  __chkstk_darwin(v16);
  uint64_t v110 = (char *)&v95 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v95 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v106 = (uint64_t)&v95 - v23;
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v95 - v24;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v97 = (char *)&v95 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v95 - v29;
  uint64_t v31 = type metadata accessor for SportsResolverConfig(0LL);
  uint64_t v99 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v113 = (char *)&v95 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = a2;
  outlined init with copy of IdentifiedUser?( a2,  (uint64_t)v25,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  uint64_t v34 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction(0LL);
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  int v37 = v36(v25, 1LL, v34);
  uint64_t v104 = v7;
  uint64_t v105 = v8;
  uint64_t v100 = v31;
  v98 = v36;
  if (v37 == 1)
  {
    uint64_t v38 = &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?;
    uint64_t v39 = (uint64_t)v25;
LABEL_8:
    outlined destroy of Any?(v39, v38);
    unint64_t v45 = 0xE700000000000000LL;
    uint64_t v46 = 0x6E776F6E6B6E75LL;
    goto LABEL_10;
  }

  uint64_t v40 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v25, v34);
  uint64_t v41 = *(void *)(v40 + 16);
  uint64_t v42 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity(0LL);
  uint64_t v43 = *(void *)(v42 - 8);
  if (v41)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))( v30,  v40 + ((*(unsigned __int8 *)(v43 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80)),  v42);
    uint64_t v44 = 0LL;
  }

  else
  {
    uint64_t v44 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56))(v30, v44, 1LL, v42);
  swift_bridgeObjectRelease(v40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v30, 1LL, v42) == 1)
  {
    uint64_t v38 = &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?;
    uint64_t v39 = (uint64_t)v30;
    goto LABEL_8;
  }

  uint64_t v46 = Apple_Parsec_Siri_Context_ResultEntity.name.getter();
  unint64_t v45 = v47;
  (*(void (**)(char *, uint64_t))(v43 + 8))(v30, v42);
LABEL_10:
  uint64_t v48 = (uint64_t)v113;
  uint64_t v50 = v110;
  uint64_t v49 = v111;
  SportsResolverConfig.init(intentTypeName:bundleId:)(v46, v45, 0xD00000000000001ALL, 0x800000000007FA50LL);
  uint64_t v51 = v33;
  uint64_t v52 = v106;
  outlined init with copy of IdentifiedUser?( v51,  v106,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  uint64_t v53 = v112;
  uint64_t v54 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 16))(v50, v114, v112);
  uint64_t v55 = v49;
  uint64_t v56 = (os_log_s *)Logger.logObject.getter(v54);
  int v57 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v56, (os_log_type_t)v57))
  {
    int v96 = v57;
    uint64_t v58 = swift_slowAlloc(22LL, -1LL);
    uint64_t v59 = swift_slowAlloc(64LL, -1LL);
    v118[0] = v59;
    *(_DWORD *)uint64_t v58 = 136315394;
    outlined init with copy of IdentifiedUser?( v52,  (uint64_t)v21,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    int v60 = v98(v21, 1LL, v34);
    uint64_t v95 = v59;
    if (v60 == 1)
    {
      outlined destroy of Any?( (uint64_t)v21,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
      unint64_t v61 = 0xE700000000000000LL;
      uint64_t v62 = v105;
      uint64_t v63 = v107;
      uint64_t v64 = 0x6E776F6E6B6E75LL;
    }

    else
    {
      uint64_t v69 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v21, v34);
      uint64_t v70 = *(void *)(v69 + 16);
      uint64_t v71 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity(0LL);
      uint64_t v72 = *(void *)(v71 - 8);
      uint64_t v64 = 0x6E776F6E6B6E75LL;
      if (v70)
      {
        uint64_t v73 = (uint64_t)v97;
        (*(void (**)(char *, unint64_t, uint64_t))(v72 + 16))( v97,  v69 + ((*(unsigned __int8 *)(v72 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80)),  v71);
        uint64_t v74 = 0LL;
      }

      else
      {
        uint64_t v74 = 1LL;
        uint64_t v73 = (uint64_t)v97;
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56))(v73, v74, 1LL, v71);
      swift_bridgeObjectRelease(v69);
      int v75 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v73, 1LL, v71);
      uint64_t v62 = v105;
      if (v75 == 1)
      {
        outlined destroy of Any?( v73,  &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
        unint64_t v61 = 0xE700000000000000LL;
      }

      else
      {
        uint64_t v64 = Apple_Parsec_Siri_Context_ResultEntity.name.getter();
        unint64_t v61 = v76;
        (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v73, v71);
      }

      uint64_t v63 = v107;
    }

    uint64_t v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v61, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, v116);
    swift_bridgeObjectRelease(v61);
    outlined destroy of Any?( v52,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    *(_WORD *)(v58 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    uint64_t v77 = v112;
    uint64_t v78 = v102;
    uint64_t v79 = v110;
    uint64_t v80 = SportsPersonalizationSelection<A>.debugDescription.getter(v112, v102);
    unint64_t v82 = v81;
    uint64_t v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, v116);
    swift_bridgeObjectRelease(v82);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v79, v77);
    _os_log_impl( &dword_0,  v56,  (os_log_type_t)v96,  "Logging sports personalization metrics: intent=%s selection=%s",  (uint8_t *)v58,  0x16u);
    uint64_t v83 = v95;
    swift_arrayDestroy(v95, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v83, -1LL, -1LL);
    swift_slowDealloc(v58, -1LL, -1LL);

    uint64_t v67 = v78;
    uint64_t v66 = (uint64_t)v108;
    uint64_t v48 = (uint64_t)v113;
    uint64_t v68 = (uint64_t)v103;
    uint64_t v65 = v104;
  }

  else
  {

    outlined destroy of Any?( v52,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v50, v53);
    uint64_t v65 = v104;
    uint64_t v62 = v105;
    uint64_t v63 = v107;
    uint64_t v66 = (uint64_t)v108;
    uint64_t v67 = v102;
    uint64_t v68 = (uint64_t)v103;
  }

  closure #1 in static SportsPersonalizationMetrics.submit<A>(for:instruction:logger:)(v114, v48, v101, v67, v66);
  outlined init with copy of IdentifiedUser?( v66,  v68,  &demangling cache variable for type metadata for SportsResolverMetrics?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v68, 1LL, v65) == 1)
  {
    outlined destroy of Any?(v66, &demangling cache variable for type metadata for SportsResolverMetrics?);
    (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v48, v100);
    return outlined destroy of Any?(v68, &demangling cache variable for type metadata for SportsResolverMetrics?);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 32))(v63, v68, v65);
    SportsResolverMetrics.logSportsMetric()();
    if (v85)
    {
      swift_errorRetain(v85);
      uint64_t v86 = swift_errorRetain(v85);
      v87 = (os_log_s *)Logger.logObject.getter(v86);
      os_log_type_t v88 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v87, v88))
      {
        v89 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v90 = swift_slowAlloc(32LL, -1LL);
        v118[0] = v90;
        *(_DWORD *)v89 = 136315138;
        swift_getErrorValue(v85, v117, v116);
        uint64_t v91 = Error.localizedDescription.getter(v116[1], v116[2]);
        unint64_t v93 = v92;
        uint64_t v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, v118);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, v116);
        swift_bridgeObjectRelease(v93);
        swift_errorRelease(v85);
        swift_errorRelease(v85);
        _os_log_impl(&dword_0, v87, v88, "Logging sports metrics failed with: %s", v89, 0xCu);
        swift_arrayDestroy(v90, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v90, -1LL, -1LL);
        swift_slowDealloc(v89, -1LL, -1LL);

        swift_errorRelease(v85);
        (*(void (**)(char *, uint64_t))(v62 + 8))(v107, v65);
        uint64_t v94 = (uint64_t)v108;
      }

      else
      {

        swift_errorRelease(v85);
        swift_errorRelease(v85);
        swift_errorRelease(v85);
        (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v65);
        uint64_t v94 = v66;
      }

      outlined destroy of Any?(v94, &demangling cache variable for type metadata for SportsResolverMetrics?);
      return (*(uint64_t (**)(char *, uint64_t))(v99 + 8))(v113, v100);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v65);
      outlined destroy of Any?(v66, &demangling cache variable for type metadata for SportsResolverMetrics?);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v99 + 8))(v48, v100);
    }
  }

uint64_t closure #1 in static SportsPersonalizationMetrics.submit<A>(for:instruction:logger:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v28 = a4;
  uint64_t v9 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SportsResolverConfig(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for SportsPersonalizationSelection(0LL, a3, v16, v17);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v27 - v19;
  (*(void (**)(char *, uint64_t))(v21 + 16))((char *)&v27 - v19, a1);
  int v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v20, 2LL, a3);
  if (v22)
  {
    if (v22 == 1)
    {
      uint64_t v23 = type metadata accessor for SportsResolverMetrics(0LL);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))( a5,  1LL,  1LL,  v23);
    }

    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, v12);
    SportsResolverMetrics.init(config:isSiriInstructionExecuted:isDisambiguation:isRecommendationFound:isTaskSuccess:)( v15,  1LL,  0LL,  0LL,  1LL);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v20, a3);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, v12);
    char v25 = (*(uint64_t (**)(uint64_t))(v28 + 8))(a3);
    SportsResolverMetrics.init(config:isSiriInstructionExecuted:isDisambiguation:isRecommendationFound:isTaskSuccess:)( v15,  1LL,  1LL,  v25 & 1,  1LL);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a3);
  }

  uint64_t v26 = type metadata accessor for SportsResolverMetrics(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(a5, 0LL, 1LL, v26);
}

ValueMetadata *type metadata accessor for SportsPersonalizationMetrics()
{
  return &type metadata for SportsPersonalizationMetrics;
}

uint64_t PushOffQueryFlow.__allocating_init(query:renderComponentFlowFactory:pommesSearchClient:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = specialized PushOffQueryFlow.init(query:renderComponentFlowFactory:pommesSearchClient:)(a1, a2, a3, a4);
  swift_release(a3);
  return v9;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1LL;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0) {
    return 1LL;
  }
  if (v3 == 1) {
    return 0LL;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1LL; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1LL)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1LL;
    }
    uint64_t result = 0LL;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }

  __break(1u);
  return result;
}

BOOL static Features.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void Features.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

_UNKNOWN **static PushOffQueryError.allCases.getter()
{
  return &outlined read-only object #0 of static PushOffQueryError.allCases.getter;
}

Swift::Int Features.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PushOffQueryError( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PushOffQueryError()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PushOffQueryError()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PushOffQueryError(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance PushOffQueryError( void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance PushOffQueryError;
}

void one-time initialization function for defaultPegasusBundleIdentifiers()
{
  static PushOffQueryFlow.defaultPegasusBundleIdentifiers = (uint64_t)&outlined read-only object #0 of one-time initialization function for defaultPegasusBundleIdentifiers;
}

{
  static SearchFlow.defaultPegasusBundleIdentifiers = (uint64_t)&outlined read-only object #0 of one-time initialization function for defaultPegasusBundleIdentifiers;
}

uint64_t *PushOffQueryFlow.defaultPegasusBundleIdentifiers.unsafeMutableAddressor()
{
  if (one-time initialization token for defaultPegasusBundleIdentifiers != -1) {
    swift_once( &one-time initialization token for defaultPegasusBundleIdentifiers,  one-time initialization function for defaultPegasusBundleIdentifiers);
  }
  return &static PushOffQueryFlow.defaultPegasusBundleIdentifiers;
}

uint64_t static PushOffQueryFlow.defaultPegasusBundleIdentifiers.getter()
{
  if (one-time initialization token for defaultPegasusBundleIdentifiers != -1) {
    swift_once( &one-time initialization token for defaultPegasusBundleIdentifiers,  one-time initialization function for defaultPegasusBundleIdentifiers);
  }
  return swift_bridgeObjectRetain(static PushOffQueryFlow.defaultPegasusBundleIdentifiers);
}

void *PushOffQueryFlow.userCanceledCatId.unsafeMutableAddressor()
{
  return &static PushOffQueryFlow.userCanceledCatId;
}

unint64_t static SearchFlow.userCanceledCatId.getter()
{
  return 0xD000000000000010LL;
}

void *PushOffQueryFlow.noMoreItemsCatId.unsafeMutableAddressor()
{
  return &static PushOffQueryFlow.noMoreItemsCatId;
}

unint64_t static SearchFlow.noMoreItemsCatId.getter()
{
  return 0xD000000000000012LL;
}

uint64_t key path setter for PushOffQueryFlow.nlContextUpdate : PushOffQueryFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v4);
  unsigned int v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of IdentifiedUser?( a1,  (uint64_t)v6,  &demangling cache variable for type metadata for NLContextUpdate?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 152LL))(v6);
}

uint64_t PushOffQueryFlow.nlContextUpdate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_nlContextUpdate;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return outlined init with copy of IdentifiedUser?( v3,  a1,  &demangling cache variable for type metadata for NLContextUpdate?);
}

uint64_t PushOffQueryFlow.nlContextUpdate.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_nlContextUpdate;
  swift_beginAccess(v3, v5, 33LL, 0LL);
  outlined assign with take of NLContextUpdate?(a1, v3);
  return swift_endAccess(v5);
}

uint64_t (*PushOffQueryFlow.nlContextUpdate.modify(uint64_t a1))()
{
  return InformationRoutingFlow.state.modify;
}

uint64_t PushOffQueryFlow.targetedRequest.getter()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_targetedRequest);
  swift_beginAccess(v0 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_targetedRequest, v3, 0LL, 0LL);
  return swift_retain(*v1);
}

uint64_t PushOffQueryFlow.targetedRequest.setter(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_targetedRequest);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  uint64_t *v3 = a1;
  return swift_release(v4);
}

uint64_t (*PushOffQueryFlow.targetedRequest.modify(uint64_t a1))()
{
  return PushOffQueryFlow.targetedRequest.modify;
}

uint64_t PushOffQueryFlow.outputPublisher.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync( v1 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_outputPublisher,  a1);
}

uint64_t PushOffQueryFlow.informationViewFactory.getter()
{
  return swift_retain(*(void *)(v0 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_informationViewFactory));
}

void key path setter for PushOffQueryFlow.state : PushOffQueryFlow(uint64_t a1, void *a2)
{
  Swift::UInt v2 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = *a2 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state;
  char v5 = *(_BYTE *)(a1 + 16);
  swift_beginAccess(v4, v9, 1LL, 0LL);
  unsigned int v6 = *(void **)v4;
  uint64_t v7 = *(void **)(v4 + 8);
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = v3;
  char v8 = *(_BYTE *)(v4 + 16);
  *(_BYTE *)(v4 + 16) = v5;
  outlined copy of PushOffQueryFlow.State(v2, v3, v5);
  outlined copy of PushOffQueryFlow.State(v2, v3, v5);
  outlined consume of PushOffQueryFlow.State(v6, v7, v8);
  PushOffQueryFlow.state.didset();
  outlined consume of PushOffQueryFlow.State(v2, v3, v5);
}

void PushOffQueryFlow.state.didset()
{
  uint64_t v1 = v0;
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v2, (uint64_t)static Logger.information);
  uint64_t v3 = swift_retain_n(v0, 2LL);
  oslog = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v4))
  {
    char v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)char v5 = 136315138;
    uint64_t v18 = v6;
    uint64_t v7 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state;
    swift_beginAccess(v1 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state, v17, 0LL, 0LL);
    char v8 = *(void **)(v7 + 8);
    char v9 = *(_BYTE *)(v7 + 16);
    id v14 = *(id *)v7;
    uint64_t v15 = v8;
    char v16 = v9;
    outlined copy of PushOffQueryFlow.State(v14, v8, v9);
    uint64_t v10 = String.init<A>(describing:)(&v14, &type metadata for PushOffQueryFlow.State);
    unint64_t v12 = v11;
    id v14 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15);
    swift_bridgeObjectRelease(v12);
    swift_release_n(v1, 2LL);
    _os_log_impl(&dword_0, oslog, v4, "#PushOffQueryFlow transitioning to state %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    swift_release_n(v0, 2LL);
  }

id PushOffQueryFlow.state.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state;
  swift_beginAccess(v0 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state, v4, 0LL, 0LL);
  id v2 = *(id *)v1;
  outlined copy of PushOffQueryFlow.State(*(id *)v1, *(id *)(v1 + 8), *(_BYTE *)(v1 + 16));
  return v2;
}

uint64_t PushOffQueryFlow.init(query:renderComponentFlowFactory:pommesSearchClient:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = specialized PushOffQueryFlow.init(query:renderComponentFlowFactory:pommesSearchClient:)(a1, a2, a3, a4);
  swift_release(a3);
  return v5;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance PushOffQueryFlow.State(uint64_t a1)
{
  specialized static PushOffQueryFlow.State.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void PushOffQueryFlow.setState(_:)(void *a1, void *a2, char a3)
{
  uint64_t v7 = v3 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state;
  swift_beginAccess(v3 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state, v11, 1LL, 0LL);
  char v8 = *(void **)v7;
  char v9 = *(void **)(v7 + 8);
  *(void *)uint64_t v7 = a1;
  *(void *)(v7 + 8) = a2;
  char v10 = *(_BYTE *)(v7 + 16);
  *(_BYTE *)(v7 + 16) = a3;
  outlined copy of PushOffQueryFlow.State(a1, a2, a3);
  outlined copy of PushOffQueryFlow.State(a1, a2, a3);
  outlined consume of PushOffQueryFlow.State(v8, v9, v10);
  PushOffQueryFlow.state.didset();
  outlined consume of PushOffQueryFlow.State(a1, a2, a3);
}

uint64_t PushOffQueryFlow.on(input:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Parse(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (void **)((char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = type metadata accessor for Input(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v12, (uint64_t)static Logger.information);
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v46 = a1;
  v13(v11, a1, v8);
  uint64_t v14 = swift_retain_n(v1, 2LL);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc(22LL, -1LL);
    uint64_t v43 = v7;
    uint64_t v18 = v17;
    uint64_t v42 = swift_slowAlloc(64LL, -1LL);
    uint64_t v47 = v42;
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v45 = v4;
    uint64_t v48 = (*(uint64_t (**)(void))(*(void *)v1 + 192LL))();
    uint64_t v49 = v19;
    char v50 = v20;
    uint64_t v44 = v5;
    uint64_t v21 = String.init<A>(describing:)(&v48, &type metadata for PushOffQueryFlow.State);
    unint64_t v23 = v22;
    uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
    swift_bridgeObjectRelease(v23);
    uint64_t v24 = swift_release_n(v2, 2LL);
    *(_WORD *)(v18 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    uint64_t v25 = Input.description.getter(v24);
    unint64_t v27 = v26;
    uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v47);
    uint64_t v5 = v44;
    uint64_t v4 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
    swift_bridgeObjectRelease(v27);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    _os_log_impl( &dword_0,  v15,  v16,  "#PushOffQueryFlow entering on(input:) with state: %s, input: %s",  (uint8_t *)v18,  0x16u);
    uint64_t v28 = v42;
    swift_arrayDestroy(v42, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    uint64_t v29 = v18;
    uint64_t v7 = v43;
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  else
  {
    swift_release_n(v1, 2LL);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  uint64_t v30 = (*(uint64_t (**)(void))(*(void *)v2 + 192LL))();
  if (v32 != 3 || v30 | v31)
  {
    outlined consume of PushOffQueryFlow.State((void *)v30, (id)v31, v32);
    return 0LL;
  }

  Input.parse.getter(v30);
  if ((*(unsigned int (**)(void **, uint64_t))(v5 + 88))(v7, v4) != enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(void **, uint64_t))(v5 + 8))(v7, v4);
    return 0LL;
  }

  (*(void (**)(void **, uint64_t))(v5 + 96))(v7, v4);
  uint64_t v33 = *v7;
  uint64_t v34 = v2 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state;
  uint64_t v35 = 1LL;
  swift_beginAccess(v2 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state, &v48, 1LL, 0LL);
  uint64_t v36 = *(void **)v34;
  int v37 = *(void **)(v34 + 8);
  *(void *)uint64_t v34 = v33;
  *(void *)(v34 + 8) = 0LL;
  char v38 = *(_BYTE *)(v34 + 16);
  *(_BYTE *)(v34 + 16) = 1;
  id v39 = v33;
  outlined consume of PushOffQueryFlow.State(v36, v37, v38);
  PushOffQueryFlow.state.didset();

  return v35;
}

uint64_t PushOffQueryFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 15__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a1;
  *(void *)(v2 + 160) = v1;
  return swift_task_switch(PushOffQueryFlow.execute(), 0LL, 0LL);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 216);
  *(void *)(*v2 + 224) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = PushOffQueryFlow.execute();
  }

  else
  {
    *(void *)(v4 + 23__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a1;
    uint64_t v6 = PushOffQueryFlow.execute();
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

void PushOffQueryFlow.execute()()
{
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 168) = __swift_project_value_buffer(v2, (uint64_t)static Logger.information);
  uint64_t v3 = swift_retain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 160);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v18 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    *(void *)(v0 + 104) = (*(uint64_t (**)(void))(*(void *)v7 + 192LL))();
    *(void *)(v0 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v10;
    *(_BYTE *)(v0 + 120) = v11;
    uint64_t v12 = String.init<A>(describing:)(v0 + 104, &type metadata for PushOffQueryFlow.State);
    unint64_t v14 = v13;
    *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152);
    swift_release_n(v7, 2LL);
    swift_bridgeObjectRelease(v14);
    _os_log_impl(&dword_0, v4, v5, "#PushOffQueryFlow entering execute with state: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {

    uint64_t v15 = swift_release_n(v7, 2LL);
  }

  *(void *)(v0 + 176) = (*(uint64_t (**)(uint64_t))(**(void **)(v0 + 160) + 192LL))(v15);
  *(void *)(v0 + 184) = v16;
  __asm { BR              X10 }

uint64_t PushOffQueryFlow.execute()()
{
  return swift_task_switch(PushOffQueryFlow.execute(), 0LL, 0LL);
}

{
  uint64_t v0;
  outlined consume of PushOffQueryFlow.State(*(void **)(v0 + 176), *(id *)(v0 + 184), 1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  char v6;
  id v7;
  int *v8;
  void *v9;
  int *v11;
  uint64_t v1 = (void *)v0[29];
  uint64_t v2 = v0[20];
  uint64_t v3 = v2 + v0[24];
  __swift_destroy_boxed_opaque_existential_1(v0 + 2);
  uint64_t v4 = *(void **)v3;
  os_log_type_t v5 = *(void **)(v3 + 8);
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = 0LL;
  BOOL v6 = *(_BYTE *)(v3 + 16);
  *(_BYTE *)(v3 + 16) = 1;
  uint64_t v7 = v1;
  outlined consume of PushOffQueryFlow.State(v4, v5, v6);
  PushOffQueryFlow.state.didset();

  uint64_t v8 = *(int **)(*(void *)v2 + 256LL);
  char v11 = (int *)((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  v0[30] = v9;
  *uint64_t v9 = v0;
  v9[1] = PushOffQueryFlow.execute();
  return ((uint64_t (*)(void, void))v11)(v0[19], v0[29]);
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 240LL));
  return swift_task_switch(PushOffQueryFlow.execute(), 0LL, 0LL);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v1 = *(void **)(v0 + 200);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v1 = *(void *)(v0 + 224);

  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  uint64_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = *(void *)(v0 + 224);
    BOOL v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v18 = v7;
    *(_DWORD *)BOOL v6 = 136315138;
    swift_getErrorValue(v5, v0 + 128, v0 + 80);
    uint64_t v8 = Error.localizedDescription.getter(*(void *)(v0 + 88), *(void *)(v0 + 96));
    uint64_t v10 = v9;
    *(void *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl(&dword_0, v3, v4, "#PushOffQueryFlow requestInfiEntityResolution call has an error %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    swift_errorRelease(v5);
  }

  else
  {
    char v11 = *(void *)(v0 + 224);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  uint64_t v12 = *(void *)(v0 + 160) + *(void *)(v0 + 192);
  unint64_t v13 = *(void **)v12;
  unint64_t v14 = *(void **)(v12 + 8);
  *(void *)uint64_t v12 = 0LL;
  *(void *)(v12 + 8) = 0LL;
  uint64_t v15 = *(_BYTE *)(v12 + 16);
  *(_BYTE *)(v12 + 16) = 2;
  outlined consume of PushOffQueryFlow.State(v13, v14, v15);
  PushOffQueryFlow.state.didset();
  static ExecuteResponse.complete()(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PushOffQueryFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t Flow = type metadata accessor for PushOffQueryFlow(0LL);
  uint64_t v5 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type PushOffQueryFlow and conformance PushOffQueryFlow,  type metadata accessor for PushOffQueryFlow,  (uint64_t)&protocol conformance descriptor for PushOffQueryFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, Flow, v5);
}

uint64_t PushOffQueryFlow.handlePommesResponse(_:)(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return swift_task_switch(PushOffQueryFlow.handlePommesResponse(_:), 0LL, 0LL);
}

uint64_t PushOffQueryFlow.handlePommesResponse(_:)()
{
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "#PushOffQueryFlow going to handlePommesResponse...", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 48);

  if ((specialized PushOffQueryFlow.isUserCanceled(pommesResponse:)(v6) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v0 + 56) + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state;
    swift_beginAccess(v7, v0 + 16, 1LL, 0LL);
    uint64_t v8 = *(void **)v7;
    uint64_t v9 = *(void **)(v7 + 8);
    *(_OWORD *)uint64_t v7 = xmmword_7D050;
    char v10 = *(_BYTE *)(v7 + 16);
    *(_BYTE *)(v7 + 16) = 2;
    outlined consume of PushOffQueryFlow.State(v8, v9, v10);
    PushOffQueryFlow.state.didset();
    static ExecuteResponse.complete()(v11);
  }

  else
  {
    uint64_t v12 = dispatch thunk of PommesResponse.primaryPluginIdentifier()();
    if (!v13) {
      goto LABEL_11;
    }
    uint64_t v14 = v12;
    uint64_t v15 = v13;
    if (one-time initialization token for defaultPegasusBundleIdentifiers != -1) {
      swift_once( &one-time initialization token for defaultPegasusBundleIdentifiers,  one-time initialization function for defaultPegasusBundleIdentifiers);
    }
    char v16 = specialized Sequence<>.contains(_:)( v14,  v15,  (void *)static PushOffQueryFlow.defaultPegasusBundleIdentifiers);
    swift_bridgeObjectRelease(v15);
    if ((v16 & 1) != 0)
    {
LABEL_11:
      uint64_t v17 = (void *)swift_task_alloc(dword_A1604);
      *(void *)(v0 + 64) = v17;
      *uint64_t v17 = v0;
      v17[1] = PushOffQueryFlow.handlePommesResponse(_:);
      return PushOffQueryFlow.handleServerDrivenExperience(pommesResponse:)(*(void *)(v0 + 40), *(void *)(v0 + 48));
    }

    PushOffQueryFlow.handleClientDrivenExperience(pommesResponse:)(*(void *)(v0 + 48));
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t *v0;
  uint64_t v2;
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 64));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t PushOffQueryFlow.buildPommesSearchRequest(query:)(uint64_t a1, uint64_t a2)
{
  uint64_t v149 = a2;
  uint64_t v150 = a1;
  uint64_t v3 = type metadata accessor for DeviceRestrictions(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v138 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v157 = type metadata accessor for InputOrigin(0LL);
  uint64_t v7 = *(void *)(v157 - 8);
  uint64_t v8 = __chkstk_darwin(v157);
  uint64_t v146 = (char *)&v138 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  v156 = (char *)&v138 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v155 = (char *)&v138 - v13;
  __chkstk_darwin(v12);
  uint64_t v158 = (char *)&v138 - v14;
  uint64_t v15 = type metadata accessor for ResponseMode(0LL);
  uint64_t v153 = *(void *)(v15 - 8);
  uint64_t v154 = v15;
  __chkstk_darwin(v15);
  v152 = (char *)&v138 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v138 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioSource?);
  __chkstk_darwin(v20);
  uint64_t v148 = (char *)&v138 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for MultiUserState(0LL);
  __chkstk_darwin(v22);
  char v147 = (char *)&v138 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for ParseStateXPC(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  unint64_t v27 = (char *)&v138 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v160 = *(void *)(v28 - 8);
  uint64_t v161 = v28;
  uint64_t v29 = __chkstk_darwin(v28);
  uint64_t v159 = (char *)&v138 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 168LL))(v29);
  v151 = v19;
  if (v31)
  {
    uint64_t v32 = v31;
  }

  else
  {
    uint64_t v33 = type metadata accessor for SiriEnvironment(0LL);
    uint64_t v34 = static SiriEnvironment.default.getter(v33);
    uint64_t v32 = SiriEnvironment.currentRequest.getter();
    swift_release(v34);
  }

  uint64_t v35 = CurrentRequest.executionRequestId.getter();
  if (!v36)
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v66 = type metadata accessor for Logger(0LL);
    uint64_t v67 = __swift_project_value_buffer(v66, (uint64_t)static Logger.information);
    uint64_t v68 = (os_log_s *)Logger.logObject.getter(v67);
    os_log_type_t v69 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v68, v69)) {
      goto LABEL_17;
    }
    uint64_t v70 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v70 = 0;
    uint64_t v71 = "#PushOffQueryFlow executionRequestId is not available, cannot construct PommesSearchRequestXPC";
    goto LABEL_16;
  }

  uint64_t v37 = v36;
  uint64_t v143 = v35;
  uint64_t v144 = v6;
  uint64_t v145 = v4;
  uint64_t v38 = CurrentRequest.resultCandidateId.getter();
  if (!v39)
  {
    swift_bridgeObjectRelease(v37);
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v72 = type metadata accessor for Logger(0LL);
    uint64_t v73 = __swift_project_value_buffer(v72, (uint64_t)static Logger.information);
    uint64_t v68 = (os_log_s *)Logger.logObject.getter(v73);
    os_log_type_t v69 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v68, v69)) {
      goto LABEL_17;
    }
    uint64_t v70 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v70 = 0;
    uint64_t v71 = "#PushOffQueryFlow resultCandidateId is not available, cannot construct PommesSearchRequestXPC";
LABEL_16:
    _os_log_impl(&dword_0, v68, v69, v71, v70, 2u);
    swift_slowDealloc(v70, -1LL, -1LL);
LABEL_17:

    swift_release(v32);
    return 0LL;
  }

  uint64_t v40 = v39;
  uint64_t v141 = v7;
  uint64_t v142 = v3;
  uint64_t v138 = v38;
  uint64_t v41 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse,  (uint64_t (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_UserParse,  (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_UserParse);
  uint64_t v42 = v159;
  uint64_t v43 = v161;
  uint64_t v44 = static Message.with(_:)(closure #1 in PushOffQueryFlow.buildPommesSearchRequest(query:), 0LL, v161, v41);
  uint64_t v140 = CurrentRequest.currentDeviceAssistantId.getter(v44);
  uint64_t v139 = v45;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserParse>);
  uint64_t v162 = v32;
  uint64_t v47 = v160;
  uint64_t v48 = *(unsigned __int8 *)(v160 + 80);
  uint64_t v49 = (v48 + 32) & ~v48;
  uint64_t v50 = swift_allocObject(v46, v49 + *(void *)(v160 + 72), v48 | 7);
  *(_OWORD *)(v50 + 16) = xmmword_7CCD0;
  (*(void (**)(uint64_t, char *, uint64_t))(v47 + 16))(v50 + v49, v42, v43);
  *(void *)unint64_t v27 = v138;
  *((void *)v27 + 1) = v40;
  *((void *)v27 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v50;
  v27[24] = 1;
  (*(void (**)(char *, void, uint64_t))(v25 + 104))(v27, enum case for ParseStateXPC.rc(_:), v24);
  uint64_t v51 = type metadata accessor for PommesSearchRequestXPCBuilder(0LL);
  swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
  uint64_t v52 = swift_bridgeObjectRetain(v149);
  uint64_t v53 = PommesSearchRequestXPCBuilder.init(domain:assistantId:requestId:parseState:utterance:)( 0x66666F68737570LL,  0xE700000000000000LL,  v140,  v139,  v143,  v37,  v27,  v150,  v52);
  uint64_t v54 = dispatch thunk of PommesSearchRequestXPCBuilder.withListenAfterSpeaking(_:)(0LL);
  swift_release(v53);
  uint64_t v55 = dispatch thunk of PommesSearchRequestXPCBuilder.withIsPushOffRequest(_:)(1LL);
  uint64_t v56 = swift_release(v54);
  uint64_t v57 = (uint64_t)v147;
  uint64_t v58 = CurrentRequest.multiUserState.getter(v56);
  LOBYTE(v54) = MultiUserState.isEnabled.getter(v58);
  outlined destroy of MultiUserState(v57);
  uint64_t v59 = dispatch thunk of PommesSearchRequestXPCBuilder.withIsMultiUser(_:)(v54 & 1);
  uint64_t v60 = swift_release(v55);
  uint64_t v61 = (uint64_t)v148;
  CurrentRequest.audioSource.getter(v60);
  uint64_t v62 = type metadata accessor for AudioSource(0LL);
  uint64_t v63 = *(void *)(v62 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v61, 1LL, v62) == 1)
  {
    outlined destroy of Any?(v61, &demangling cache variable for type metadata for AudioSource?);
    uint64_t v64 = 0LL;
    uint64_t v65 = 0LL;
  }

  else
  {
    uint64_t v64 = AudioSource.aceValue.getter();
    uint64_t v65 = v75;
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v61, v62);
  }

  unint64_t v76 = v144;
  uint64_t v77 = v157;
  uint64_t v78 = v141;
  uint64_t v79 = v155;
  uint64_t v80 = dispatch thunk of PommesSearchRequestXPCBuilder.withAudioSource(_:)(v64, v65);
  swift_release(v59);
  uint64_t v81 = swift_bridgeObjectRelease(v65);
  uint64_t v82 = (uint64_t)v151;
  CurrentRequest.audioDestination.getter(v81);
  uint64_t v83 = type metadata accessor for AudioDestination(0LL);
  uint64_t v84 = *(void *)(v83 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v82, 1LL, v83) == 1)
  {
    outlined destroy of Any?(v82, &demangling cache variable for type metadata for AudioDestination?);
    uint64_t v85 = 0LL;
    uint64_t v86 = 0LL;
  }

  else
  {
    uint64_t v85 = AudioDestination.aceValue.getter();
    uint64_t v86 = v87;
    (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v82, v83);
  }

  uint64_t v88 = dispatch thunk of PommesSearchRequestXPCBuilder.withAudioDestination(_:)(v85, v86);
  swift_release(v80);
  uint64_t v89 = swift_bridgeObjectRelease(v86);
  uint64_t v90 = v152;
  uint64_t v91 = CurrentRequest.responseMode.getter(v89);
  uint64_t v92 = ResponseMode.aceValue.getter(v91);
  uint64_t v94 = v93;
  (*(void (**)(char *, uint64_t))(v153 + 8))(v90, v154);
  uint64_t v95 = dispatch thunk of PommesSearchRequestXPCBuilder.withResponseMode(_:)(v92, v94);
  swift_bridgeObjectRelease(v94);
  uint64_t v96 = swift_release(v88);
  static Device.current.getter(v167, v96);
  uint64_t v97 = v168;
  uint64_t v98 = v169;
  __swift_project_boxed_opaque_existential_1(v167, v168);
  char v99 = dispatch thunk of DeviceState.isEyesFree.getter(v97, v98);
  uint64_t v100 = dispatch thunk of PommesSearchRequestXPCBuilder.withIsEyesFree(_:)(v99 & 1);
  swift_release(v95);
  uint64_t v101 = __swift_destroy_boxed_opaque_existential_1(v167);
  static Device.current.getter(v167, v101);
  uint64_t v102 = v168;
  uint64_t v103 = v169;
  __swift_project_boxed_opaque_existential_1(v167, v168);
  char v104 = dispatch thunk of DeviceState.isVoiceTriggerEnabled.getter(v102, v103);
  uint64_t v105 = dispatch thunk of PommesSearchRequestXPCBuilder.withIsVoiceTriggerEnabled(_:)(v104 & 1);
  swift_release(v100);
  uint64_t v106 = __swift_destroy_boxed_opaque_existential_1(v167);
  static Device.current.getter(v167, v106);
  uint64_t v107 = v168;
  uint64_t v108 = v169;
  __swift_project_boxed_opaque_existential_1(v167, v168);
  char v109 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v107, v108);
  uint64_t v110 = dispatch thunk of PommesSearchRequestXPCBuilder.withIsTextToSpeechEnabled(_:)(v109 & 1);
  swift_release(v105);
  uint64_t v111 = __swift_destroy_boxed_opaque_existential_1(v167);
  static Device.current.getter(v167, v111);
  uint64_t v112 = v168;
  uint64_t v113 = v169;
  __swift_project_boxed_opaque_existential_1(v167, v168);
  dispatch thunk of DeviceState.inputOrigin.getter(v112, v113);
  uint64_t v114 = *(void (**)(char *, void, uint64_t))(v78 + 104);
  v114(v79, enum case for InputOrigin.clientGenerated(_:), v77);
  uint64_t v115 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type InputOrigin and conformance InputOrigin,  (uint64_t (*)(uint64_t))&type metadata accessor for InputOrigin,  (uint64_t)&protocol conformance descriptor for InputOrigin);
  dispatch thunk of RawRepresentable.rawValue.getter(&v165, v77, v115);
  dispatch thunk of RawRepresentable.rawValue.getter(&v163, v77, v115);
  uint64_t v116 = v166;
  uint64_t v117 = v164;
  if (v165 == v163 && v166 == v164)
  {
    char v118 = 1;
    uint64_t v117 = v166;
  }

  else
  {
    char v118 = _stringCompareWithSmolCheck(_:_:expecting:)(v165, v166, v163, v164, 0LL);
  }

  swift_bridgeObjectRelease(v116);
  swift_bridgeObjectRelease(v117);
  uint64_t v119 = *(void (**)(char *, uint64_t))(v78 + 8);
  v119(v79, v77);
  v119(v158, v77);
  uint64_t v120 = __swift_destroy_boxed_opaque_existential_1(v167);
  if ((v118 & 1) != 0)
  {
    char v121 = 1;
  }

  else
  {
    static Device.current.getter(v167, v120);
    uint64_t v122 = v168;
    uint64_t v123 = v169;
    __swift_project_boxed_opaque_existential_1(v167, v168);
    dispatch thunk of DeviceState.inputOrigin.getter(v122, v123);
    uint64_t v124 = v146;
    v114(v146, enum case for InputOrigin.triggerlessFollowup(_:), v77);
    dispatch thunk of RawRepresentable.rawValue.getter(&v165, v77, v115);
    dispatch thunk of RawRepresentable.rawValue.getter(&v163, v77, v115);
    uint64_t v125 = v166;
    uint64_t v126 = v164;
    if (v165 == v163 && v166 == v164)
    {
      char v121 = 1;
      uint64_t v126 = v166;
    }

    else
    {
      char v121 = _stringCompareWithSmolCheck(_:_:expecting:)(v165, v166, v163, v164, 0LL);
    }

    swift_bridgeObjectRelease(v125);
    swift_bridgeObjectRelease(v126);
    v119(v124, v77);
    v119(v156, v77);
    __swift_destroy_boxed_opaque_existential_1(v167);
  }

  uint64_t v127 = dispatch thunk of PommesSearchRequestXPCBuilder.withIsTriggerlessFollowup(_:)(v121 & 1);
  swift_release(v110);
  uint64_t v128 = type metadata accessor for SiriEnvironment(0LL);
  uint64_t v129 = static SiriEnvironment.default.getter(v128);
  uint64_t v130 = SiriEnvironment.currentDevice.getter();
  uint64_t v131 = swift_release(v129);
  dispatch thunk of CurrentDevice.restrictions.getter(v131);
  uint64_t v132 = swift_release(v130);
  uint64_t v133 = DeviceRestrictions.aceSet.getter(v132);
  (*(void (**)(char *, uint64_t))(v145 + 8))(v76, v142);
  uint64_t v134 = specialized _copyCollectionToContiguousArray<A>(_:)(v133);
  swift_bridgeObjectRelease(v133);
  uint64_t v135 = dispatch thunk of PommesSearchRequestXPCBuilder.withDeviceRestrictions(_:)(v134);
  swift_release(v127);
  uint64_t v136 = swift_release(v134);
  uint64_t v74 = dispatch thunk of PommesSearchRequestXPCBuilder.build()(v136);
  swift_release(v162);
  swift_release(v135);
  (*(void (**)(char *, uint64_t))(v160 + 8))(v159, v161);
  return v74;
}

uint64_t closure #1 in PushOffQueryFlow.buildPommesSearchRequest(query:)()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_Parser(0LL);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserDialogAct>);
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v5 = swift_allocObject( v3,  ((*(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL))
       + *(void *)(*(void *)(v4 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_7CCD0;
  uint64_t v6 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct,  (uint64_t (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_UserDialogAct,  (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_UserDialogAct);
  static Message.with(_:)(closure #1 in closure #1 in PushOffQueryFlow.buildPommesSearchRequest(query:), 0LL, v4, v6);
  Siri_Nlu_External_UserParse.userDialogActs.setter(v5);
  uint64_t v7 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Siri_Nlu_External_Parser and conformance Siri_Nlu_External_Parser,  (uint64_t (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_Parser,  (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_Parser);
  static Message.with(_:)(closure #2 in closure #1 in PushOffQueryFlow.buildPommesSearchRequest(query:), 0LL, v0, v7);
  uint64_t v8 = Siri_Nlu_External_UserParse.parser.setter(v2);
  uint64_t v9 = Siri_Nlu_External_UserParse.probability.setter(v8, 1.0);
  return Siri_Nlu_External_UserParse.comparableProbability.setter(v9, 1.0);
}

uint64_t closure #1 in closure #1 in PushOffQueryFlow.buildPommesSearchRequest(query:)()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)v11 - v6;
  uint64_t v8 = Siri_Nlu_External_DelegatedUserDialogAct.init()(v5);
  uint64_t v9 = static PommesSearchRequest.PommesParserId.getter(v8);
  Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.setter(v9);
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v4, v7, v0);
  Siri_Nlu_External_UserDialogAct.delegated.setter(v4);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v7, v0);
}

uint64_t closure #2 in closure #1 in PushOffQueryFlow.buildPommesSearchRequest(query:)()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_Parser.AlgorithmType(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void))(v7 + 104))( v6,  enum case for Siri_Nlu_External_Parser.AlgorithmType.model(_:));
  Siri_Nlu_External_Parser.algorithm.setter(v6);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v3,  enum case for Siri_Nlu_External_Parser.ParserIdentifier.psc(_:),  v0);
  return Siri_Nlu_External_Parser.parserID.setter(v3);
}

uint64_t PushOffQueryFlow.handleClientDrivenExperience(pommesResponse:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)static Logger.information);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_0, v6, v7, "#PushOffQueryFlow in handleClientDrivenExperience", v8, 2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  v23[0] = v2;
  uint64_t Flow = type metadata accessor for PushOffQueryFlow(0LL);
  uint64_t v10 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type PushOffQueryFlow and conformance PushOffQueryFlow,  type metadata accessor for PushOffQueryFlow,  (uint64_t)&protocol conformance descriptor for PushOffQueryFlow);
  uint64_t v11 = CompositionSearchFlow.findFlowForPommesResponse(_:)(a1, Flow, v10);
  if (v11)
  {
    uint64_t v12 = v11;
    v23[3] = type metadata accessor for AnyFlow(0LL);
    v23[4] = &protocol witness table for AnyFlow;
    v23[0] = v12;
    uint64_t v13 = *(void (**)(uint64_t, void *))(*(void *)v2 + 288LL);
    swift_retain(v12);
    v13(a1, v23);
    swift_release(v12);
    return __swift_destroy_boxed_opaque_existential_1(v23);
  }

  else
  {
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(0LL);
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_0, v15, v16, "#PushOffQueryFlow failed to render a client-driven experience", v17, 2u);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    uint64_t v18 = v2 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state;
    swift_beginAccess(v2 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state, v23, 1LL, 0LL);
    uint64_t v19 = *(void **)v18;
    uint64_t v20 = *(void **)(v18 + 8);
    *(void *)uint64_t v18 = 0LL;
    *(void *)(v18 + 8) = 0LL;
    char v21 = *(_BYTE *)(v18 + 16);
    *(_BYTE *)(v18 + 16) = 2;
    outlined consume of PushOffQueryFlow.State(v19, v20, v21);
    PushOffQueryFlow.state.didset();
    return static ExecuteResponse.complete()(v22);
  }

uint64_t PushOffQueryFlow.handleClientDrivenExperience(pommesResponse:renderFlow:)@<X0>( void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v55 = a3;
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v52 = *(void *)(v5 - 8);
  uint64_t v53 = v5;
  __chkstk_darwin(v5);
  uint64_t v51 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Parse(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = type metadata accessor for Input(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = a2[3];
  uint64_t v16 = a2[4];
  uint64_t v50 = a2;
  __swift_project_boxed_opaque_existential_1(a2, v15);
  *uint64_t v10 = a1;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, enum case for Parse.pommesResponse(_:), v7);
  id v17 = a1;
  Input.init(parse:)(v10);
  LOBYTE(v15) = dispatch thunk of Flow.on(input:)(v14, v15, v16);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) != 0)
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    uint64_t v19 = __swift_project_value_buffer(v18, (uint64_t)static Logger.information);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl( &dword_0,  v20,  v21,  "#PushOffQueryFlow pushing render component flow for client-driven experience",  v22,  2u);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    uint64_t v23 = v54 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state;
    swift_beginAccess(v54 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state, v57, 1LL, 0LL);
    uint64_t v24 = *(void **)v23;
    uint64_t v25 = *(void **)(v23 + 8);
    *(void *)uint64_t v23 = 0LL;
    *(void *)(v23 + 8) = 0LL;
    char v26 = *(_BYTE *)(v23 + 16);
    *(_BYTE *)(v23 + 16) = 3;
    outlined consume of PushOffQueryFlow.State(v24, v25, v26);
    PushOffQueryFlow.state.didset();
    uint64_t v27 = v50[3];
    uint64_t v28 = v50[4];
    uint64_t v29 = __swift_project_boxed_opaque_existential_1(v50, v27);
    return static ExecuteResponse.complete<A>(next:)(v29, v27, v28);
  }

  else
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v31 = type metadata accessor for Logger(0LL);
    uint64_t v32 = __swift_project_value_buffer(v31, (uint64_t)static Logger.information);
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl(&dword_0, v33, v34, "#PushOffQueryFlow render flow refused input, returning error flow", v35, 2u);
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    uint64_t v36 = v54;
    uint64_t v37 = v54 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state;
    swift_beginAccess(v54 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state, v57, 1LL, 0LL);
    uint64_t v38 = *(void **)v37;
    uint64_t v39 = *(void **)(v37 + 8);
    *(void *)uint64_t v37 = 0LL;
    *(void *)(v37 + 8) = 0LL;
    char v40 = *(_BYTE *)(v37 + 16);
    *(_BYTE *)(v37 + 16) = 2;
    outlined consume of PushOffQueryFlow.State(v38, v39, v40);
    PushOffQueryFlow.state.didset();
    uint64_t v56 = v36;
    uint64_t v41 = type metadata accessor for PerformanceUtil(0LL);
    uint64_t v42 = static PerformanceUtil.shared.getter(v41);
    uint64_t v43 = __chkstk_darwin(v42);
    uint64_t v46 = &v56;
    uint64_t v44 = v51;
    Date.init()(v43);
    uint64_t v47 = &v45;
    uint64_t v48 = type metadata accessor for ExecuteResponse(0LL);
    LOBYTE(v46) = 2;
    ((void (*)(void *__return_ptr, uint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:))( v55,  0x72724520656B614DLL,  0xEE00776F6C46726FLL,  0LL,  v44,  "InformationFlowPlugin/FlowTrampolining.swift",  44LL,  2LL,  22LL,  "makeResponse(forErrorMessage:)",  30LL,  (_DWORD)v46,  partial apply for specialized closure #1 in FlowTrampolining.makeResponse(forErrorMessage:));
    swift_release(v42);
    return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v44, v53);
  }

uint64_t PushOffQueryFlow.handleServerDrivenExperience(pommesResponse:)(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for Parse(0LL);
  void v3[9] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[10] = v5;
  v3[11] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Input(0LL);
  v3[12] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(PushOffQueryFlow.handleServerDrivenExperience(pommesResponse:), 0LL, 0LL);
}

uint64_t PushOffQueryFlow.handleServerDrivenExperience(pommesResponse:)()
{
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "#PushOffQueryFlow in handleServerDrivenExperience", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v7 = *(void **)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v8 = *(void *)(v0 + 72);
  uint64_t v9 = *(void *)(v0 + 80);
  uint64_t v10 = *(void **)(v0 + 56);

  void *v7 = v10;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v7, enum case for Parse.pommesResponse(_:), v8);
  id v11 = v10;
  Input.init(parse:)(v7);
  type metadata accessor for PommesResponse(0LL);
  static PommesResponse.makeDefaultInteractionStream()(v28);
  int v12 = [(id)objc_opt_self(AFFeatureFlags) isSiriLocationServicesPromptingEnabled];
  uint64_t v13 = specialized InformationRoutingFlow.__allocating_init(input:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( v6,  (uint64_t)v28,  v12);
  if (v13)
  {
    uint64_t v14 = v13;
    *(void *)(v0 + 40) = v13;
    uint64_t v15 = type metadata accessor for InformationRoutingFlow(0LL);
    uint64_t v16 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type InformationRoutingFlow and conformance InformationRoutingFlow,  type metadata accessor for InformationRoutingFlow,  (uint64_t)&protocol conformance descriptor for InformationRoutingFlow);
    static ExecuteResponse.complete<A>(next:)(v0 + 40, v15, v16);
    swift_release(v14);
  }

  else
  {
    id v17 = (os_log_s *)Logger.logObject.getter(0LL);
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl( &dword_0,  v17,  v18,  "#PushOffQueryFlow failed to construct routing flow to render server-driven response",  v19,  2u);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    uint64_t v20 = *(void *)(v0 + 64);

    uint64_t v21 = v20 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state;
    swift_beginAccess(v20 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state, v0 + 16, 1LL, 0LL);
    uint64_t v22 = *(void **)v21;
    uint64_t v23 = *(void **)(v21 + 8);
    *(void *)uint64_t v21 = 0LL;
    *(void *)(v21 + 8) = 0LL;
    char v24 = *(_BYTE *)(v21 + 16);
    *(_BYTE *)(v21 + 16) = 2;
    outlined consume of PushOffQueryFlow.State(v22, v23, v24);
    PushOffQueryFlow.state.didset();
    static ExecuteResponse.complete()(v25);
  }

  uint64_t v26 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 96));
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PushOffQueryFlow.deinit()
{
  __swift_destroy_boxed_opaque_existential_1((void *)(v0
                                                      + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_outputPublisher));
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_informationViewFactory));
  outlined consume of PushOffQueryFlow.State( *(void **)(v0 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state),  *(id *)(v0 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state + 8),  *(_BYTE *)(v0 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state + 16));
  return v0;
}

uint64_t PushOffQueryFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t protocol witness for CompositionSearchFlow.nlContextUpdate.getter in conformance PushOffQueryFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144LL))();
}

uint64_t protocol witness for CompositionSearchFlow.nlContextUpdate.setter in conformance PushOffQueryFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152LL))();
}

uint64_t (*protocol witness for CompositionSearchFlow.nlContextUpdate.modify in conformance PushOffQueryFlow( void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 160LL))();
  return protocol witness for CompositionSearchFlow.nlContextUpdate.modify in conformance PushOffQueryFlow;
}

uint64_t protocol witness for CompositionSearchFlow.targetedRequest.getter in conformance PushOffQueryFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168LL))();
}

uint64_t protocol witness for CompositionSearchFlow.targetedRequest.setter in conformance PushOffQueryFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176LL))();
}

uint64_t (*protocol witness for CompositionSearchFlow.targetedRequest.modify in conformance PushOffQueryFlow( void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 184LL))();
  return protocol witness for CompositionSearchFlow.nlContextUpdate.modify in conformance PushOffQueryFlow;
}

uint64_t protocol witness for FlowTrampolining.outputPublisher.getter in conformance PushOffQueryFlow@<X0>( uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync( *v1 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_outputPublisher,  a1);
}

uint64_t protocol witness for FlowTrampolining.informationViewFactory.getter in conformance PushOffQueryFlow()
{
  return swift_retain(*(void *)(*v0 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_informationViewFactory));
}

uint64_t protocol witness for SiriEnvironmentLocating.siriEnvironment.getter in conformance PushOffQueryFlow()
{
  return SiriEnvironmentLocating<>.siriEnvironment.getter();
}

uint64_t protocol witness for SiriEnvironmentLocating.siriEnvironment.setter in conformance PushOffQueryFlow()
{
  return SiriEnvironmentLocating<>.siriEnvironment.setter();
}

uint64_t (*protocol witness for SiriEnvironmentLocating.siriEnvironment.modify in conformance PushOffQueryFlow( void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SiriEnvironmentLocating<>.siriEnvironment.modify();
  return protocol witness for CompositionSearchFlow.nlContextUpdate.modify in conformance PushOffQueryFlow;
}

void protocol witness for CompositionSearchFlow.nlContextUpdate.modify in conformance PushOffQueryFlow( void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

uint64_t protocol witness for Flow.on(input:) in conformance PushOffQueryFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 232LL))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance PushOffQueryFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 248LL))();
}

uint64_t protocol witness for Flow.execute() in conformance PushOffQueryFlow(uint64_t a1)
{
  os_log_type_t v4 = *(int **)(**(void **)v1 + 240LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return v7(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance PushOffQueryFlow(uint64_t a1, uint64_t a2)
{
  uint64_t Flow = type metadata accessor for PushOffQueryFlow(0LL);
  return Flow<>.exitValue.getter(Flow, a2);
}

uint64_t specialized InformationRoutingFlow.__allocating_init(input:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( uint64_t a1, uint64_t a2, int a3)
{
  int v220 = a3;
  uint64_t v221 = a2;
  uint64_t v216 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v215 = *(void *)(v216 - 8);
  uint64_t v4 = __chkstk_darwin(v216);
  uint64_t v212 = (char *)&v210 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v213 = (char *)&v210 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (void **)((char *)&v210 - v9);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v210 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v210 - v14;
  uint64_t v16 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v16);
  v218 = (char *)&v210 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v217 = type metadata accessor for InformationRoutingFlow.State(0LL);
  __chkstk_darwin(v217);
  v219 = (void **)((char *)&v210 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = type metadata accessor for Parse.PegasusResult(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v210 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for Parse(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (void **)((char *)&v210 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  v229[3] = &type metadata for KnowledgeFallbackHelper;
  v229[4] = &protocol witness table for KnowledgeFallbackHelper;
  uint64_t v222 = a1;
  Input.parse.getter(v25);
  uint64_t v28 = v27;
  int v29 = (*(uint64_t (**)(void **, uint64_t))(v24 + 88))(v27, v23);
  if (v29 == enum case for Parse.directInvocation(_:))
  {
    uint64_t v30 = v10;
    (*(void (**)(void **, uint64_t))(v24 + 96))(v28, v23);
    uint64_t v31 = v215;
    uint64_t v32 = *(uint64_t (**)(char *, void **, uint64_t))(v215 + 16);
    uint64_t v214 = v28;
    uint64_t v33 = v216;
    uint64_t v34 = v32(v15, v28, v216);
    uint64_t v35 = Parse.DirectInvocation.identifier.getter(v34);
    uint64_t v37 = v36;
    uint64_t v38 = v15;
    if (v35 == 0xD00000000000003DLL && v36 == 0x800000000007F000LL)
    {
      swift_bridgeObjectRelease(0x800000000007F000LL);
LABEL_8:
      uint64_t v62 = v31;
      uint64_t v63 = v15;
      uint64_t v64 = (uint64_t)v219;
      v32((char *)v219, (void **)v15, v33);
      swift_storeEnumTagMultiPayload(v64, v217, 4LL);
      uint64_t v65 = v221;
      outlined init with copy of IdentifiedUser?( v221,  (uint64_t)v228,  &demangling cache variable for type metadata for CurareInteractionStream?);
      uint64_t v66 = outlined init with copy of OutputPublisherAsync((uint64_t)v229, (uint64_t)v226);
      uint64_t v67 = static AceService.currentAsync.getter(v225, v66);
      uint64_t v68 = static OutputPublisherFactory.makeOutputPublisherAsync()(v224, v67);
      static Device.current.getter(v223, v68);
      type metadata accessor for CommonCATs(0LL);
      os_log_type_t v69 = v218;
      static CATOption.defaultMode.getter();
      uint64_t v70 = v33;
      uint64_t v71 = CATWrapper.__allocating_init(options:globals:)(v69, 0LL);
      uint64_t v72 = type metadata accessor for InformationViewFactory();
      uint64_t v73 = (void *)swift_allocObject(v72, 104LL, 7LL);
      id v74 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
      uint64_t v75 = type metadata accessor for PommesServerFallbackPreferences(0LL);
      swift_allocObject(v75, *(unsigned int *)(v75 + 48), *(unsigned __int16 *)(v75 + 52));
      uint64_t v76 = PommesServerFallbackPreferences.init(_:)(v74);
      v73[11] = v75;
      v73[12] = &protocol witness table for PommesServerFallbackPreferences;
      v73[8] = v76;
      outlined init with take of PatternFlowProviding(v223, (uint64_t)(v73 + 3));
      v73[2] = v71;
      uint64_t v77 = type metadata accessor for ExperienceSelector();
      uint64_t v78 = swift_allocObject(v77, 16LL, 7LL);
      uint64_t v79 = type metadata accessor for InformationRoutingFlow(0LL);
      uint64_t v80 = swift_allocObject(v79, *(unsigned int *)(v79 + 48), *(unsigned __int16 *)(v79 + 52));
      uint64_t v81 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v226, v227);
      __chkstk_darwin(v81);
      (*(void (**)(void))(v82 + 16))();
      uint64_t v59 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( v64,  v225,  v224,  (uint64_t)v73,  v78,  (uint64_t)v228,  v220 & 1,  v80);
      swift_release(v73);
      swift_release(v78);
      __swift_destroy_boxed_opaque_existential_1(v226);
      __swift_destroy_boxed_opaque_existential_1(v229);
      outlined destroy of Any?(v65, &demangling cache variable for type metadata for CurareInteractionStream?);
      uint64_t v83 = type metadata accessor for Input(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v83 - 8) + 8LL))(v222, v83);
      uint64_t v84 = *(void (**)(char *, uint64_t))(v62 + 8);
      v84(v63, v70);
      v84((char *)v214, v70);
      return v59;
    }

    char v61 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, 0xD00000000000003DLL, 0x800000000007F000LL, 0LL);
    swift_bridgeObjectRelease(v37);
    if ((v61 & 1) != 0) {
      goto LABEL_8;
    }
    uint64_t v105 = *(void (**)(char *, uint64_t))(v31 + 8);
    v105(v38, v33);
    uint64_t v106 = v32(v13, v214, v33);
    uint64_t v107 = Parse.DirectInvocation.identifier.getter(v106);
    uint64_t v109 = v108;
    if (v107 == 0xD000000000000040LL && v108 == 0x800000000007F040LL)
    {
      swift_bridgeObjectRelease(0x800000000007F040LL);
LABEL_17:
      uint64_t v112 = (uint64_t)v219;
      v32((char *)v219, (void **)v13, v33);
      swift_storeEnumTagMultiPayload(v112, v217, 5LL);
      uint64_t v113 = v221;
      outlined init with copy of IdentifiedUser?( v221,  (uint64_t)v228,  &demangling cache variable for type metadata for CurareInteractionStream?);
      uint64_t v114 = outlined init with copy of OutputPublisherAsync((uint64_t)v229, (uint64_t)v226);
      uint64_t v115 = static AceService.currentAsync.getter(v225, v114);
      uint64_t v116 = static OutputPublisherFactory.makeOutputPublisherAsync()(v224, v115);
      static Device.current.getter(v223, v116);
      type metadata accessor for CommonCATs(0LL);
      uint64_t v117 = v218;
      static CATOption.defaultMode.getter();
      uint64_t v118 = CATWrapper.__allocating_init(options:globals:)(v117, 0LL);
      uint64_t v119 = type metadata accessor for InformationViewFactory();
      uint64_t v120 = v33;
      char v121 = (void *)swift_allocObject(v119, 104LL, 7LL);
      id v122 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
      uint64_t v123 = v13;
      uint64_t v124 = type metadata accessor for PommesServerFallbackPreferences(0LL);
      swift_allocObject(v124, *(unsigned int *)(v124 + 48), *(unsigned __int16 *)(v124 + 52));
      uint64_t v125 = PommesServerFallbackPreferences.init(_:)(v122);
      v121[11] = v124;
      v121[12] = &protocol witness table for PommesServerFallbackPreferences;
      v121[8] = v125;
      outlined init with take of PatternFlowProviding(v223, (uint64_t)(v121 + 3));
      v121[2] = v118;
      uint64_t v126 = type metadata accessor for ExperienceSelector();
      uint64_t v127 = swift_allocObject(v126, 16LL, 7LL);
      uint64_t v128 = type metadata accessor for InformationRoutingFlow(0LL);
      uint64_t v129 = swift_allocObject(v128, *(unsigned int *)(v128 + 48), *(unsigned __int16 *)(v128 + 52));
      uint64_t v130 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v226, v227);
      __chkstk_darwin(v130);
      (*(void (**)(void))(v131 + 16))();
      uint64_t v59 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( v112,  v225,  v224,  (uint64_t)v121,  v127,  (uint64_t)v228,  v220 & 1,  v129);
      swift_release(v121);
      swift_release(v127);
      __swift_destroy_boxed_opaque_existential_1(v226);
      __swift_destroy_boxed_opaque_existential_1(v229);
      outlined destroy of Any?(v113, &demangling cache variable for type metadata for CurareInteractionStream?);
      uint64_t v132 = type metadata accessor for Input(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v132 - 8) + 8LL))(v222, v132);
      v105(v123, v120);
      v105((char *)v214, v120);
      return v59;
    }

    char v111 = _stringCompareWithSmolCheck(_:_:expecting:)(v107, v108, 0xD000000000000040LL, 0x800000000007F040LL, 0LL);
    swift_bridgeObjectRelease(v109);
    if ((v111 & 1) != 0) {
      goto LABEL_17;
    }
    uint64_t v211 = v105;
    v105(v13, v33);
    uint64_t v133 = v32((char *)v10, v214, v33);
    uint64_t v134 = Parse.DirectInvocation.identifier.getter(v133);
    uint64_t v136 = v135;
    if (v134 == 0xD00000000000003ELL && v135 == 0x800000000007F090LL)
    {
      swift_bridgeObjectRelease(0x800000000007F090LL);
    }

    else
    {
      char v137 = _stringCompareWithSmolCheck(_:_:expecting:)(v134, v135, 0xD00000000000003ELL, 0x800000000007F090LL, 0LL);
      swift_bridgeObjectRelease(v136);
      if ((v137 & 1) == 0)
      {
        v211((char *)v10, v33);
        uint64_t v161 = v213;
        uint64_t v162 = v32(v213, v214, v33);
        uint64_t v163 = Parse.DirectInvocation.identifier.getter(v162);
        uint64_t v165 = v164;
        if (v163 == 0xD000000000000045LL && v164 == 0x800000000007F0D0LL)
        {
          swift_bridgeObjectRelease(0x800000000007F0D0LL);
          uint64_t v166 = v222;
          uint64_t v167 = v217;
        }

        else
        {
          char v168 = _stringCompareWithSmolCheck(_:_:expecting:)( v163,  v164,  0xD000000000000045LL,  0x800000000007F0D0LL,  0LL);
          swift_bridgeObjectRelease(v165);
          uint64_t v166 = v222;
          uint64_t v167 = v217;
          if ((v168 & 1) == 0)
          {
            uint64_t v188 = v211;
            v211(v161, v33);
            uint64_t v189 = v212;
            (*(void (**)(char *, void **, uint64_t))(v31 + 32))(v212, v214, v33);
            uint64_t v190 = (uint64_t)v219;
            v32((char *)v219, (void **)v189, v33);
            swift_storeEnumTagMultiPayload(v190, v167, 3LL);
            uint64_t v191 = v221;
            outlined init with copy of IdentifiedUser?( v221,  (uint64_t)v228,  &demangling cache variable for type metadata for CurareInteractionStream?);
            uint64_t v192 = outlined init with copy of OutputPublisherAsync((uint64_t)v229, (uint64_t)v226);
            uint64_t v193 = static AceService.currentAsync.getter(v225, v192);
            uint64_t v194 = static OutputPublisherFactory.makeOutputPublisherAsync()(v224, v193);
            static Device.current.getter(v223, v194);
            type metadata accessor for CommonCATs(0LL);
            v195 = v218;
            static CATOption.defaultMode.getter();
            uint64_t v196 = v33;
            uint64_t v197 = CATWrapper.__allocating_init(options:globals:)(v195, 0LL);
            uint64_t v198 = type metadata accessor for InformationViewFactory();
            uint64_t v199 = (void *)swift_allocObject(v198, 104LL, 7LL);
            id v200 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
            uint64_t v201 = type metadata accessor for PommesServerFallbackPreferences(0LL);
            swift_allocObject(v201, *(unsigned int *)(v201 + 48), *(unsigned __int16 *)(v201 + 52));
            uint64_t v202 = PommesServerFallbackPreferences.init(_:)(v200);
            v199[11] = v201;
            v199[12] = &protocol witness table for PommesServerFallbackPreferences;
            v199[8] = v202;
            outlined init with take of PatternFlowProviding(v223, (uint64_t)(v199 + 3));
            v199[2] = v197;
            uint64_t v203 = type metadata accessor for ExperienceSelector();
            uint64_t v204 = swift_allocObject(v203, 16LL, 7LL);
            uint64_t v205 = type metadata accessor for InformationRoutingFlow(0LL);
            uint64_t v206 = swift_allocObject(v205, *(unsigned int *)(v205 + 48), *(unsigned __int16 *)(v205 + 52));
            uint64_t v207 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v226, v227);
            __chkstk_darwin(v207);
            (*(void (**)(void))(v208 + 16))();
            uint64_t v59 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( v190,  v225,  v224,  (uint64_t)v199,  v204,  (uint64_t)v228,  v220 & 1,  v206);
            swift_release(v199);
            swift_release(v204);
            __swift_destroy_boxed_opaque_existential_1(v226);
            __swift_destroy_boxed_opaque_existential_1(v229);
            outlined destroy of Any?(v191, &demangling cache variable for type metadata for CurareInteractionStream?);
            uint64_t v209 = type metadata accessor for Input(0LL);
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v209 - 8) + 8LL))(v222, v209);
            v188(v189, v196);
            return v59;
          }
        }

        uint64_t v169 = (uint64_t)v219;
        v32((char *)v219, (void **)v161, v33);
        swift_storeEnumTagMultiPayload(v169, v167, 9LL);
        uint64_t v170 = v221;
        outlined init with copy of IdentifiedUser?( v221,  (uint64_t)v228,  &demangling cache variable for type metadata for CurareInteractionStream?);
        uint64_t v171 = outlined init with copy of OutputPublisherAsync((uint64_t)v229, (uint64_t)v226);
        uint64_t v172 = static AceService.currentAsync.getter(v225, v171);
        uint64_t v173 = static OutputPublisherFactory.makeOutputPublisherAsync()(v224, v172);
        static Device.current.getter(v223, v173);
        type metadata accessor for CommonCATs(0LL);
        uint64_t v174 = v218;
        static CATOption.defaultMode.getter();
        uint64_t v155 = v33;
        uint64_t v175 = CATWrapper.__allocating_init(options:globals:)(v174, 0LL);
        uint64_t v176 = type metadata accessor for InformationViewFactory();
        char v177 = (void *)swift_allocObject(v176, 104LL, 7LL);
        id v178 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
        uint64_t v179 = type metadata accessor for PommesServerFallbackPreferences(0LL);
        swift_allocObject(v179, *(unsigned int *)(v179 + 48), *(unsigned __int16 *)(v179 + 52));
        uint64_t v180 = PommesServerFallbackPreferences.init(_:)(v178);
        v177[11] = v179;
        v177[12] = &protocol witness table for PommesServerFallbackPreferences;
        v177[8] = v180;
        outlined init with take of PatternFlowProviding(v223, (uint64_t)(v177 + 3));
        v177[2] = v175;
        uint64_t v181 = type metadata accessor for ExperienceSelector();
        uint64_t v182 = swift_allocObject(v181, 16LL, 7LL);
        uint64_t v183 = type metadata accessor for InformationRoutingFlow(0LL);
        uint64_t v184 = swift_allocObject(v183, *(unsigned int *)(v183 + 48), *(unsigned __int16 *)(v183 + 52));
        uint64_t v185 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v226, v227);
        __chkstk_darwin(v185);
        (*(void (**)(void))(v186 + 16))();
        uint64_t v59 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( v169,  v225,  v224,  (uint64_t)v177,  v182,  (uint64_t)v228,  v220 & 1,  v184);
        swift_release(v177);
        swift_release(v182);
        __swift_destroy_boxed_opaque_existential_1(v226);
        __swift_destroy_boxed_opaque_existential_1(v229);
        outlined destroy of Any?(v170, &demangling cache variable for type metadata for CurareInteractionStream?);
        uint64_t v187 = type metadata accessor for Input(0LL);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v187 - 8) + 8LL))(v166, v187);
        uint64_t v158 = v161;
        goto LABEL_23;
      }
    }

    uint64_t v138 = (uint64_t)v219;
    v32((char *)v219, v30, v33);
    swift_storeEnumTagMultiPayload(v138, v217, 10LL);
    uint64_t v139 = v221;
    outlined init with copy of IdentifiedUser?( v221,  (uint64_t)v228,  &demangling cache variable for type metadata for CurareInteractionStream?);
    uint64_t v140 = outlined init with copy of OutputPublisherAsync((uint64_t)v229, (uint64_t)v226);
    uint64_t v141 = static AceService.currentAsync.getter(v225, v140);
    uint64_t v142 = static OutputPublisherFactory.makeOutputPublisherAsync()(v224, v141);
    static Device.current.getter(v223, v142);
    type metadata accessor for CommonCATs(0LL);
    uint64_t v143 = v218;
    static CATOption.defaultMode.getter();
    uint64_t v144 = CATWrapper.__allocating_init(options:globals:)(v143, 0LL);
    uint64_t v145 = type metadata accessor for InformationViewFactory();
    uint64_t v146 = (void *)swift_allocObject(v145, 104LL, 7LL);
    id v147 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
    uint64_t v148 = type metadata accessor for PommesServerFallbackPreferences(0LL);
    swift_allocObject(v148, *(unsigned int *)(v148 + 48), *(unsigned __int16 *)(v148 + 52));
    uint64_t v149 = PommesServerFallbackPreferences.init(_:)(v147);
    v146[11] = v148;
    v146[12] = &protocol witness table for PommesServerFallbackPreferences;
    v146[8] = v149;
    outlined init with take of PatternFlowProviding(v223, (uint64_t)(v146 + 3));
    v146[2] = v144;
    uint64_t v150 = type metadata accessor for ExperienceSelector();
    uint64_t v151 = swift_allocObject(v150, 16LL, 7LL);
    uint64_t v152 = type metadata accessor for InformationRoutingFlow(0LL);
    uint64_t v153 = swift_allocObject(v152, *(unsigned int *)(v152 + 48), *(unsigned __int16 *)(v152 + 52));
    uint64_t v154 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v226, v227);
    uint64_t v155 = v33;
    __chkstk_darwin(v154);
    (*(void (**)(void))(v156 + 16))();
    uint64_t v59 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( v138,  v225,  v224,  (uint64_t)v146,  v151,  (uint64_t)v228,  v220 & 1,  v153);
    swift_release(v146);
    swift_release(v151);
    __swift_destroy_boxed_opaque_existential_1(v226);
    __swift_destroy_boxed_opaque_existential_1(v229);
    outlined destroy of Any?(v139, &demangling cache variable for type metadata for CurareInteractionStream?);
    uint64_t v157 = type metadata accessor for Input(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v157 - 8) + 8LL))(v222, v157);
    uint64_t v158 = (char *)v30;
LABEL_23:
    uint64_t v159 = (void (*)(void **, uint64_t))v211;
    v211(v158, v155);
    v159(v214, v155);
    return v59;
  }

  if (v29 == enum case for Parse.pegasusResults(_:))
  {
    uint64_t v39 = v22;
    (*(void (**)(void **, uint64_t))(v24 + 96))(v27, v23);
    uint64_t v40 = v20;
    (*(void (**)(char *, void **, uint64_t))(v20 + 32))(v39, v27, v19);
    uint64_t v41 = (uint64_t)v219;
    (*(void (**)(void **, char *, uint64_t))(v20 + 16))(v219, v39, v19);
    swift_storeEnumTagMultiPayload(v41, v217, 1LL);
    uint64_t v42 = v221;
    outlined init with copy of IdentifiedUser?( v221,  (uint64_t)v228,  &demangling cache variable for type metadata for CurareInteractionStream?);
    uint64_t v43 = outlined init with copy of OutputPublisherAsync((uint64_t)v229, (uint64_t)v226);
    uint64_t v44 = static AceService.currentAsync.getter(v225, v43);
    uint64_t v45 = static OutputPublisherFactory.makeOutputPublisherAsync()(v224, v44);
    static Device.current.getter(v223, v45);
    type metadata accessor for CommonCATs(0LL);
    uint64_t v46 = v218;
    static CATOption.defaultMode.getter();
    uint64_t v47 = CATWrapper.__allocating_init(options:globals:)(v46, 0LL);
    uint64_t v48 = type metadata accessor for InformationViewFactory();
    uint64_t v49 = (void *)swift_allocObject(v48, 104LL, 7LL);
    id v50 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
    uint64_t v51 = type metadata accessor for PommesServerFallbackPreferences(0LL);
    swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
    uint64_t v52 = PommesServerFallbackPreferences.init(_:)(v50);
    v49[11] = v51;
    v49[12] = &protocol witness table for PommesServerFallbackPreferences;
    v49[8] = v52;
    outlined init with take of PatternFlowProviding(v223, (uint64_t)(v49 + 3));
    v49[2] = v47;
    uint64_t v53 = type metadata accessor for ExperienceSelector();
    uint64_t v54 = swift_allocObject(v53, 16LL, 7LL);
    uint64_t v55 = type metadata accessor for InformationRoutingFlow(0LL);
    uint64_t v56 = swift_allocObject(v55, *(unsigned int *)(v55 + 48), *(unsigned __int16 *)(v55 + 52));
    uint64_t v57 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v226, v227);
    __chkstk_darwin(v57);
    (*(void (**)(void))(v58 + 16))();
    uint64_t v59 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( v41,  v225,  v224,  (uint64_t)v49,  v54,  (uint64_t)v228,  v220 & 1,  v56);
    swift_release(v49);
    swift_release(v54);
    __swift_destroy_boxed_opaque_existential_1(v226);
    __swift_destroy_boxed_opaque_existential_1(v229);
    outlined destroy of Any?(v42, &demangling cache variable for type metadata for CurareInteractionStream?);
    uint64_t v60 = type metadata accessor for Input(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8LL))(v222, v60);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v39, v19);
  }

  else if (v29 == enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(void **, uint64_t))(v24 + 96))(v27, v23);
    uint64_t v85 = *v27;
    uint64_t v86 = (uint64_t)v219;
    char *v219 = *v27;
    *(_BYTE *)(v86 + 8) = 2;
    swift_storeEnumTagMultiPayload(v86, v217, 0LL);
    uint64_t v87 = v221;
    outlined init with copy of IdentifiedUser?( v221,  (uint64_t)v228,  &demangling cache variable for type metadata for CurareInteractionStream?);
    outlined init with copy of OutputPublisherAsync((uint64_t)v229, (uint64_t)v226);
    id v88 = v85;
    uint64_t v89 = static AceService.currentAsync.getter(v225, v88);
    uint64_t v90 = static OutputPublisherFactory.makeOutputPublisherAsync()(v224, v89);
    static Device.current.getter(v223, v90);
    type metadata accessor for CommonCATs(0LL);
    uint64_t v91 = v218;
    static CATOption.defaultMode.getter();
    uint64_t v92 = CATWrapper.__allocating_init(options:globals:)(v91, 0LL);
    uint64_t v93 = type metadata accessor for InformationViewFactory();
    uint64_t v94 = (void *)swift_allocObject(v93, 104LL, 7LL);
    id v95 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
    uint64_t v96 = type metadata accessor for PommesServerFallbackPreferences(0LL);
    swift_allocObject(v96, *(unsigned int *)(v96 + 48), *(unsigned __int16 *)(v96 + 52));
    uint64_t v97 = PommesServerFallbackPreferences.init(_:)(v95);
    v94[11] = v96;
    v94[12] = &protocol witness table for PommesServerFallbackPreferences;
    v94[8] = v97;
    outlined init with take of PatternFlowProviding(v223, (uint64_t)(v94 + 3));
    v94[2] = v92;
    uint64_t v98 = type metadata accessor for ExperienceSelector();
    uint64_t v99 = swift_allocObject(v98, 16LL, 7LL);
    uint64_t v100 = type metadata accessor for InformationRoutingFlow(0LL);
    uint64_t v101 = swift_allocObject(v100, *(unsigned int *)(v100 + 48), *(unsigned __int16 *)(v100 + 52));
    uint64_t v102 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v226, v227);
    __chkstk_darwin(v102);
    (*(void (**)(void))(v103 + 16))();
    uint64_t v59 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( v86,  v225,  v224,  (uint64_t)v94,  v99,  (uint64_t)v228,  v220 & 1,  v101);
    swift_release(v94);
    swift_release(v99);
    __swift_destroy_boxed_opaque_existential_1(v226);

    __swift_destroy_boxed_opaque_existential_1(v229);
    outlined destroy of Any?(v87, &demangling cache variable for type metadata for CurareInteractionStream?);
    uint64_t v104 = type metadata accessor for Input(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v104 - 8) + 8LL))(v222, v104);
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_1(v229);
    outlined destroy of Any?(v221, &demangling cache variable for type metadata for CurareInteractionStream?);
    uint64_t v110 = type metadata accessor for Input(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v110 - 8) + 8LL))(v222, v110);
    (*(void (**)(void **, uint64_t))(v24 + 8))(v27, v23);
    return 0LL;
  }

  return v59;
}

void specialized static PushOffQueryFlow.State.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }

uint64_t sub_12994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6) {
    return 0LL;
  }
  if (v7 == v6 && v9 == v8) {
    return 1LL;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v6, v8, 0LL);
}

uint64_t specialized PushOffQueryFlow.init(query:renderComponentFlowFactory:pommesSearchClient:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = v5 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_nlContextUpdate;
  uint64_t v14 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
  *(void *)(v5 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_targetedRequest) = 0LL;
  uint64_t v15 = type metadata accessor for ExperienceSelector();
  *(void *)(v5 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_experienceSelector) = swift_allocObject( v15,  16LL,  7LL);
  *(void *)(v5 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_renderComponentFlowFactory) = a3;
  outlined init with copy of IdentifiedUser?( a4,  v5 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_pommesSearchClient,  &demangling cache variable for type metadata for PommesXPCSearching?);
  uint64_t v16 = v5 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state;
  *(void *)uint64_t v16 = a1;
  *(void *)(v16 + 8) = a2;
  *(_BYTE *)(v16 + 16) = 0;
  uint64_t v17 = swift_retain(a3);
  static OutputPublisherFactory.makeOutputPublisherAsync()(v27, v17);
  uint64_t v18 = outlined init with take of PatternFlowProviding( v27,  v5 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_outputPublisher);
  static Device.current.getter(v27, v18);
  type metadata accessor for CommonCATs(0LL);
  static CATOption.defaultMode.getter();
  uint64_t v19 = CATWrapper.__allocating_init(options:globals:)(v12, 0LL);
  uint64_t v20 = type metadata accessor for InformationViewFactory();
  uint64_t v21 = (void *)swift_allocObject(v20, 104LL, 7LL);
  id v22 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
  uint64_t v23 = type metadata accessor for PommesServerFallbackPreferences(0LL);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  uint64_t v24 = PommesServerFallbackPreferences.init(_:)(v22);
  v21[11] = v23;
  v21[12] = &protocol witness table for PommesServerFallbackPreferences;
  v21[8] = v24;
  outlined init with take of PatternFlowProviding(v27, (uint64_t)(v21 + 3));
  v21[2] = v19;
  outlined destroy of Any?(a4, &demangling cache variable for type metadata for PommesXPCSearching?);
  *(void *)(v5 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_informationViewFactory) = v21;
  return v5;
}

uint64_t outlined assign with take of NLContextUpdate?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

id outlined copy of PushOffQueryFlow.State(id result, id a2, char a3)
{
  if (a3 == 1) {
    return result;
  }
  if (!a3) {
    return (id)swift_bridgeObjectRetain(a2);
  }
  return result;
}

void outlined consume of PushOffQueryFlow.State(void *a1, id a2, char a3)
{
  if (a3 == 1)
  {
  }

  else if (!a3)
  {
    swift_bridgeObjectRelease(a2);
  }

uint64_t type metadata accessor for PushOffQueryFlow(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for PushOffQueryFlow;
  if (!type metadata singleton initialization cache for PushOffQueryFlow) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PushOffQueryFlow);
  }
  return result;
}

uint64_t specialized PushOffQueryFlow.isUserCanceled(pommesResponse:)(uint64_t a1)
{
  uint64_t v1 = dispatch thunk of PommesResponse.experiences.getter(a1);
  uint64_t v2 = v1;
  if (!((unint64_t)v1 >> 62))
  {
    uint64_t result = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL));
    if (result) {
      goto LABEL_3;
    }
LABEL_21:
    swift_bridgeObjectRelease(v2);
    return 0LL;
  }

  if (v1 >= 0) {
    v1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v1);
  if (!result) {
    goto LABEL_21;
  }
LABEL_3:
  if ((v2 & 0xC000000000000001LL) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v2);
  }

  else
  {
    if (!*(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL)))
    {
      __break(1u);
      return result;
    }

    id v4 = *(id *)(v2 + 32);
  }

  uint64_t v5 = v4;
  swift_bridgeObjectRelease(v2);
  uint64_t v6 = type metadata accessor for GenericExperience(0LL);
  if (!swift_dynamicCastClass(v5, v6))
  {

    return 0LL;
  }

  uint64_t v7 = dispatch thunk of Experience.catIds.getter();
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 + 16);
  if (!v9)
  {
    swift_bridgeObjectRelease(v7);

    return 0LL;
  }

  swift_bridgeObjectRetain(v7);
  unint64_t v10 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v16 = v8;
  for (uint64_t i = (uint64_t *)(v8 + 40); ; i += 2)
  {
    uint64_t v12 = *(i - 1);
    uint64_t v13 = *i;
    uint64_t v19 = v12;
    uint64_t v20 = v13;
    unint64_t v17 = 0xD000000000000010LL;
    unint64_t v18 = 0x800000000007FA70LL;
    swift_bridgeObjectRetain(v13);
    if ((StringProtocol.contains<A>(_:)(&v17, &type metadata for String, &type metadata for String, v10, v10) & 1) != 0)
    {

      uint64_t v15 = v16;
      swift_bridgeObjectRelease(v16);
      goto LABEL_17;
    }

    uint64_t v19 = v12;
    uint64_t v20 = v13;
    unint64_t v17 = 0xD000000000000012LL;
    unint64_t v18 = 0x800000000007FA90LL;
    char v14 = StringProtocol.contains<A>(_:)(&v17, &type metadata for String, &type metadata for String, v10, v10);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) != 0) {
      break;
    }
    if (!--v9)
    {

      swift_bridgeObjectRelease_n(v16, 2LL);
      return 0LL;
    }
  }

  uint64_t v15 = v16;
  uint64_t v13 = v16;
LABEL_17:
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v15);
  return 1LL;
}

unint64_t lazy protocol witness table accessor for type PushOffQueryError and conformance PushOffQueryError()
{
  unint64_t result = lazy protocol witness table cache variable for type PushOffQueryError and conformance PushOffQueryError;
  if (!lazy protocol witness table cache variable for type PushOffQueryError and conformance PushOffQueryError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PushOffQueryError,  &type metadata for PushOffQueryError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PushOffQueryError and conformance PushOffQueryError);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type [PushOffQueryError] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [PushOffQueryError] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PushOffQueryError] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PushOffQueryError]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [PushOffQueryError] and conformance [A]);
  }

  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t base witness table accessor for Flow in PushOffQueryFlow()
{
  return lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type PushOffQueryFlow and conformance PushOffQueryFlow,  type metadata accessor for PushOffQueryFlow,  (uint64_t)&protocol conformance descriptor for PushOffQueryFlow);
}

uint64_t base witness table accessor for SiriEnvironmentLocating in PushOffQueryFlow()
{
  return lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type PushOffQueryFlow and conformance PushOffQueryFlow,  type metadata accessor for PushOffQueryFlow,  (uint64_t)&protocol conformance descriptor for PushOffQueryFlow);
}

uint64_t sub_130D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 144LL))();
}

uint64_t sub_13100@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 168LL))();
  *a2 = result;
  return result;
}

uint64_t sub_13130(void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 176LL);
  uint64_t v3 = swift_retain(*a1);
  return v2(v3);
}

uint64_t sub_13160@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 192LL))();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v5;
  return result;
}

uint64_t getEnumTagSinglePayload for PushOffQueryError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

uint64_t storeEnumTagSinglePayload for PushOffQueryError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_13274 + 4 * byte_7CD5D[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_132A8 + 4 * byte_7CD58[v4]))();
}

uint64_t sub_132A8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_132B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x132B8LL);
  }
  return result;
}

uint64_t sub_132C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x132CCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_132D0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_132D8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PushOffQueryError()
{
  return &type metadata for PushOffQueryError;
}

uint64_t ObjC metadata update function for PushOffQueryFlow()
{
  return type metadata accessor for PushOffQueryFlow(0LL);
}

void type metadata completion function for PushOffQueryFlow(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = "\b";
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[4] = &unk_7D000;
    v4[5] = &unk_7D018;
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[7] = &unk_7D030;
    swift_updateClassMetadata2(a1, 256LL, 8LL, v4, a1 + 80);
  }

void type metadata accessor for NLContextUpdate?(uint64_t a1)
{
  if (!lazy cache variable for type metadata for NLContextUpdate?)
  {
    uint64_t v2 = type metadata accessor for NLContextUpdate(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for NLContextUpdate?);
    }
  }

void destroy for PushOffQueryFlow.State(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for PushOffQueryFlow.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of PushOffQueryFlow.State(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for PushOffQueryFlow.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of PushOffQueryFlow.State(*(id *)a2, v4, v5);
  unsigned int v6 = *(void **)a1;
  BOOL v7 = *(void **)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of PushOffQueryFlow.State(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for PushOffQueryFlow.State(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of PushOffQueryFlow.State(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for PushOffQueryFlow.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PushOffQueryFlow.State( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 253;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 1__swift_destroy_boxed_opaque_existential_1(v0 + 7) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 1__swift_destroy_boxed_opaque_existential_1(v0 + 7) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for PushOffQueryFlow.State(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t destructiveInjectEnumTag for PushOffQueryFlow.State(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)__n128 result = a2 - 3;
    *(void *)(result + 8) = 0LL;
    LOBYTE(a__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 3;
  }

  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PushOffQueryFlow.State()
{
  return &type metadata for PushOffQueryFlow.State;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }

  return result;
}

uint64_t outlined destroy of MultiUserState(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MultiUserState(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSObject);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }

  return result;
}

uint64_t String.base64Encode(encoding:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = String.data(using:allowLossyConversion:)(a1, 0LL, a2, a3);
  if (v4 >> 60 == 15) {
    return 0LL;
  }
  uint64_t v6 = v3;
  unint64_t v7 = v4;
  uint64_t countAndFlagsBits = Data.base64EncodedString(options:)(0LL)._countAndFlagsBits;
  outlined consume of Data?(v6, v7);
  return countAndFlagsBits;
}

uint64_t outlined consume of Data?(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(result, a2);
  }
  return result;
}

uint64_t String.base64Decode(encoding:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for String.Encoding(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = Data.init(base64Encoded:options:)(a2, a3, 0LL);
  uint64_t v12 = 0LL;
  if (v11 >> 60 != 15)
  {
    uint64_t v13 = v10;
    unint64_t v14 = v11;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
    uint64_t v12 = String.init(data:encoding:)(v13, v14, v9);
    outlined consume of Data?(v13, v14);
  }

  return v12;
}

uint64_t ErrorFlowFactory.__allocating_init(outputPublisher:informationViewFactory:)( __int128 *a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject(v2, 64LL, 7LL);
  outlined init with take of PatternFlowProviding(a1, v5 + 16);
  *(void *)(v5 + 56) = a2;
  return v5;
}

uint64_t ErrorFlowFactory.init(outputPublisher:informationViewFactory:)(__int128 *a1, uint64_t a2)
{
  *(void *)(v2 + 56) = a2;
  return v2;
}

uint64_t RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 280) = v34;
  *(void *)(v9 + 288) = v8;
  *(void *)(v9 + 27__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v33;
  *(_OWORD *)(v9 + 256) = v32;
  *(void *)(v9 + 240) = a7;
  *(void *)(v9 + 248) = a8;
  *(void *)(v9 + 224) = a5;
  *(void *)(v9 + 23__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a6;
  *(void *)(v9 + 208) = a3;
  *(void *)(v9 + 216) = a4;
  *(void *)(v9 + 19__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a1;
  *(void *)(v9 + 200) = a2;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  *(void *)(v9 + 296) = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_SystemDialogAct?);
  *(void *)(v9 + 304) = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = ((uint64_t (*)(void))type metadata accessor for Siri_Nlu_External_SystemDialogAct)(0LL);
  *(void *)(v9 + 31__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v9 + 320) = v13;
  *(void *)(v9 + 328) = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for NLContextUpdate(0LL);
  *(void *)(v9 + 336) = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  *(void *)(v9 + 344) = v15;
  uint64_t v16 = *(void *)(v15 + 64);
  *(void *)(v9 + 35__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v16;
  unint64_t v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v9 + 360) = swift_task_alloc(v17);
  *(void *)(v9 + 368) = swift_task_alloc(v17);
  uint64_t v18 = type metadata accessor for UUID(0LL);
  *(void *)(v9 + 376) = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  *(void *)(v9 + 384) = v19;
  *(void *)(v9 + 39__swift_destroy_boxed_opaque_existential_1(v0 + 2) = swift_task_alloc((*(void *)(v19 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HintsUI?);
  *(void *)(v9 + 400) = swift_task_alloc((*(void *)(*(void *)(v20 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for HintsUI(0LL);
  *(void *)(v9 + 408) = v21;
  uint64_t v22 = *(void *)(v21 - 8);
  *(void *)(v9 + 416) = v22;
  *(void *)(v9 + 424) = swift_task_alloc((*(void *)(v22 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = ((uint64_t (*)(void))type metadata accessor for SuggestionContextData)(0LL);
  *(void *)(v9 + 43__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v23;
  uint64_t v24 = *(void *)(v23 - 8);
  *(void *)(v9 + 440) = v24;
  *(void *)(v9 + 448) = swift_task_alloc((*(void *)(v24 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for Date(0LL);
  *(void *)(v9 + 456) = v25;
  uint64_t v26 = *(void *)(v25 - 8);
  *(void *)(v9 + 464) = v26;
  *(void *)(v9 + 47__swift_destroy_boxed_opaque_existential_1(v0 + 2) = swift_task_alloc((*(void *)(v26 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = ((uint64_t (*)(void))type metadata accessor for DialogPhase)(0LL);
  *(void *)(v9 + 480) = v27;
  uint64_t v28 = *(void *)(v27 - 8);
  *(void *)(v9 + 488) = v28;
  *(void *)(v9 + 496) = swift_task_alloc((*(void *)(v28 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = type metadata accessor for OSSignpostID(0LL);
  *(void *)(v9 + 504) = v29;
  uint64_t v30 = *(void *)(v29 - 8);
  *(void *)(v9 + 51__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v30;
  *(void *)(v9 + 520) = swift_task_alloc((*(void *)(v30 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:),  0LL,  0LL);
}

void RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)()
{
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  *(void *)(v0 + 528) = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "RenderPegasusFlow making flow to render PegasusResult", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  if (one-time initialization token for informationLog != -1) {
    swift_once(&one-time initialization token for informationLog, one-time initialization function for informationLog);
  }
  uint64_t v6 = *(void *)(v0 + 520);
  uint64_t v7 = *(void *)(v0 + 264);
  id v8 = (id)static Logger.informationLog;
  uint64_t v9 = OSSignpostID.init(log:)();
  uint64_t v10 = static os_signpost_type_t.begin.getter(v9);
  uint64_t v11 = os_signpost(_:dso:log:name:signpostID:)(v10, &dword_0, v8, "renderPegasusResult", 19LL, 2LL, v6);
  if (v7 && (uint64_t v11 = dispatch thunk of PommesResponse.listenAfterSpeaking.getter(v11), (v11 & 1) != 0)) {
    uint64_t v12 = static DialogPhase.clarification.getter();
  }
  else {
    uint64_t v12 = static DialogPhase.summary.getter(v11);
  }
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_0, v13, v14, "RenderPegasusFlow using server driven experience", v15, 2u);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  uint64_t v16 = *(void *)(v0 + 496);
  uint64_t v17 = *(void *)(v0 + 288);
  uint64_t v19 = *(void *)(v0 + 256);
  uint64_t v18 = *(void *)(v0 + 264);
  uint64_t v20 = *(void *)(v0 + 208);
  __int128 v24 = *(_OWORD *)(v0 + 192);
  __int128 v25 = *(_OWORD *)(v0 + 240);

  uint64_t v21 = type metadata accessor for PerformanceUtil(0LL);
  *(void *)(v0 + 536) = v21;
  *(void *)(v0 + 544) = static PerformanceUtil.shared.getter(v21);
  uint64_t v22 = swift_task_alloc(96LL);
  *(void *)(v0 + 55__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v22;
  *(void *)(v22 + 16) = v17;
  *(_OWORD *)(v22 + 24) = v24;
  *(void *)(v22 + 40) = v20;
  *(_OWORD *)(v22 + 48) = v25;
  *(void *)(v22 + 64) = v19;
  *(void *)(v22 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v16;
  *(void *)(v22 + 80) = v18;
  Date.init()(v22);
  *(void *)(v0 + 560) = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([SAUIAddViews], [InformationViewFactory.AceViewCategory : Int]?));
  *uint64_t v23 = v0;
  v23[1] = RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  __asm { BR              X8 }

uint64_t RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 552);
  uint64_t v3 = *(void *)(*v0 + 544);
  uint64_t v5 = *(void *)(*v0 + 464);
  uint64_t v4 = *(void *)(*v0 + 472);
  uint64_t v6 = *(void *)(*v0 + 456);
  swift_task_dealloc(*(void *)(*v0 + 560));
  swift_release(v3);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  *(void *)(v1 + 568) = v7;
  v7(v4, v6);
  swift_task_dealloc(v2);
  return swift_task_switch( RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:),  0LL,  0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v1 = *(void *)(*(void *)v0 + 592LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 584LL);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 568LL);
  uint64_t v4 = *(void *)(*(void *)v0 + 472LL);
  uint64_t v5 = *(void *)(*(void *)v0 + 456LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 600LL));
  swift_release(v2);
  v3(v4, v5);
  swift_task_dealloc(v1);
  return swift_task_switch( RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:),  0LL,  0LL);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;
  v0[19] = _swiftEmptyArrayStorage;
  uint64_t v1 = v0 + 19;
  uint64_t v2 = v0[72];
  uint64_t v3 = specialized RenderComponentFlowFactory.makeProfileSwitchIfNeeded(domainObjects:componentsCount:renderOptions:)( v0[31],  v2,  v0[32]);
  uint64_t v4 = swift_bridgeObjectRelease(v2);
  if (v3)
  {
    uint64_t v5 = v3;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v5);
    uint64_t v7 = *(void *)((char *)&dword_10 + (*v1 & 0xFFFFFFFFFFFFFF8LL));
    uint64_t v6 = *(void *)((char *)&dword_18 + (*v1 & 0xFFFFFFFFFFFFFF8LL));
    if (v7 >= v6 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1LL);
    }
    id v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v5);
    specialized Array._endMutation()(v8);
  }

  uint64_t v9 = DialogPhase.aceValue.getter(v4);
  uint64_t v11 = v10;
  uint64_t v12 = v0[22];
  if ((unint64_t)v12 >> 62)
  {
    if (v12 < 0) {
      uint64_t v16 = v0[22];
    }
    else {
      uint64_t v16 = v12 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v0[22]);
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(v12);
  }

  else
  {
    uint64_t v13 = *(void *)((char *)&dword_10 + (v12 & 0xFFFFFFFFFFFFF8LL));
  }

  SuggestionContextData.init(dialogPhase:hasAdditionalCommands:patternId:)(v9, v11, v13 != 0, 0LL, 0LL);
  os_log_type_t v14 = (void *)swift_task_alloc(dword_A2AB4);
  v0[76] = v14;
  *os_log_type_t v14 = v0;
  v14[1] = RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return static SiriSuggestionProvider.getSiriSuggestion(suggestionContextData:)(v0[50], v0[56]);
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 608LL));
  return swift_task_switch( RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:),  0LL,  0LL);
}

{
  uint64_t v0;
  _WORD *v1;
  void *v2;
  uint64_t *v3;
  uint64_t *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __objc2_meth_list **p_base_meths;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t ObjectType;
  uint64_t v56;
  os_log_s *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  os_log_s *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v4 = v2 + 18;
  uint64_t v5 = v2 + 22;
  uint64_t v6 = (id)v2[51];
  uint64_t v7 = v2[52];
  id v8 = v2[50];
  if ((*(unsigned int (**)(uint64_t, uint64_t, id))(v7 + 48))(v8, 1LL, v6) == 1)
  {
    outlined destroy of Any?(v8, &demangling cache variable for type metadata for HintsUI?);
  }

  else
  {
    uint64_t v1 = (_WORD *)v2[53];
    uint64_t v0 = v2[36];
    (*(void (**)(_WORD *, uint64_t, id))(v7 + 32))(v1, v8, v6);
    (*(void (**)(_WORD *, void *, void *))(*(void *)v0 + 120LL))(v1, v2 + 18, v2 + 22);
    (*(void (**)(_WORD *, id))(v7 + 8))(v1, v6);
  }

  uint64_t v9 = *v4;
  uint64_t v126 = v2 + 18;
  uint64_t v128 = v2 + 22;
  if ((unint64_t)*v4 >> 62)
  {
    if (v9 < 0) {
      uint64_t v0 = *v4;
    }
    else {
      uint64_t v0 = v9 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v9);
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v0);
  }

  else
  {
    uint64_t v10 = *(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain(v9);
  }

  p_base_meths = (__objc2_meth_list **)(&ErrorFlowFactory + 32);
  uint64_t v133 = v2;
  if (v10)
  {
    if (v10 >= 1)
    {
      uint64_t v5 = 0LL;
      uint64_t v130 = v2[48];
      uint64_t v3 = (uint64_t *)(v9 & 0xC000000000000001LL);
      while (1)
      {
        if (v3) {
          uint64_t v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v9);
        }
        else {
          uint64_t v16 = *(id *)(v9 + 8LL * (void)v5 + 32);
        }
        uint64_t v6 = v16;
        uint64_t v17 = (uint64_t *)objc_msgSend(v6, (SEL)p_base_meths[77]);
        if (v17)
        {
          uint64_t v4 = v17;
          uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
          uint64_t v19 = v18;
        }

        else
        {
          uint64_t v0 = 0LL;
          uint64_t v19 = 0xE000000000000000LL;
        }

        uint64_t v20 = swift_bridgeObjectRelease(v19);
        uint64_t v21 = HIBYTE(v19) & 0xF;
        if ((v19 & 0x2000000000000000LL) == 0) {
          uint64_t v21 = v0 & 0xFFFFFFFFFFFFLL;
        }
        if (v21)
        {
          uint64_t v22 = (uint64_t *)objc_msgSend(v6, (SEL)p_base_meths[77]);
          if (!v22)
          {
            uint64_t v1 = 0LL;
            goto LABEL_11;
          }

          uint64_t v4 = v22;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
          uint64_t v0 = v23;
        }

        else
        {
          uint64_t v4 = (uint64_t *)v2[49];
          uint64_t v12 = v133[47];
          uint64_t v13 = UUID.init()(v20);
          UUID.uuidString.getter(v13);
          uint64_t v0 = v14;
          uint64_t v2 = v133;
          uint64_t v15 = v12;
          p_base_meths = &ErrorFlowFactory.base_meths;
          (*(void (**)(uint64_t *, uint64_t))(v130 + 8))(v4, v15);
        }

        uint64_t v1 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v0);
LABEL_11:
        uint64_t v5 = (void *)((char *)v5 + 1);
        [v6 setAceId:v1];

        if ((void *)v10 == v5) {
          goto LABEL_24;
        }
      }
    }

    __break(1u);
    goto LABEL_76;
  }

void RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)( uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 232);
  uint64_t v3 = *(void *)(v1 + 128);
  *(void *)(v1 + 576) = *(void *)(v1 + 136);
  *(void *)(v1 + 144) = v3;
  int8x16_t v6 = *(int8x16_t *)(v1 + 216);
  *(void *)(v1 + 584) = static PerformanceUtil.shared.getter(a1);
  uint64_t v4 = (int8x16_t *)swift_task_alloc(48LL);
  *(void *)(v1 + 59__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v4;
  v4[1] = vextq_s8(v6, v6, 8uLL);
  v4[2].i64[0] = v2;
  Date.init()(v4);
  *(void *)(v1 + 600) = v5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SABaseCommand]);
  *uint64_t v5 = v1;
  v5[1] = RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  __asm { BR              X8 }

LABEL_24:
  swift_bridgeObjectRelease(v9);
  uint64_t v9 = *v128;
  if ((unint64_t)*v128 >> 62)
  {
    if (v9 < 0) {
      uint64_t v0 = *v128;
    }
    else {
      uint64_t v0 = v9 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v128);
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v0);
    if (v10) {
      goto LABEL_26;
    }
  }

  else
  {
    uint64_t v10 = *(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain(*v128);
    if (v10)
    {
LABEL_26:
      if (v10 < 1)
      {
LABEL_76:
        __break(1u);
        goto LABEL_77;
      }

      __int128 v24 = 0LL;
      uint64_t v131 = v2[48];
      do
      {
        if ((v9 & 0xC000000000000001LL) != 0) {
          __int128 v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v9);
        }
        else {
          __int128 v32 = *(id *)(v9 + 8 * v24 + 32);
        }
        uint64_t v33 = v32;
        uint64_t v34 = objc_msgSend(v32, (SEL)p_base_meths[77]);
        if (v34)
        {
          uint64_t v35 = v34;
          uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
          uint64_t v38 = v37;
        }

        else
        {
          uint64_t v36 = 0LL;
          uint64_t v38 = 0xE000000000000000LL;
        }

        uint64_t v39 = swift_bridgeObjectRelease(v38);
        uint64_t v40 = HIBYTE(v38) & 0xF;
        if ((v38 & 0x2000000000000000LL) == 0) {
          uint64_t v40 = v36 & 0xFFFFFFFFFFFFLL;
        }
        if (v40)
        {
          uint64_t v41 = objc_msgSend(v33, (SEL)p_base_meths[77]);
          if (!v41)
          {
            uint64_t v31 = 0LL;
            goto LABEL_30;
          }

          uint64_t v42 = v41;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
          uint64_t v29 = v43;
        }

        else
        {
          __int128 v25 = v2[49];
          uint64_t v26 = v133[47];
          uint64_t v27 = UUID.init()(v39);
          UUID.uuidString.getter(v27);
          uint64_t v29 = v28;
          uint64_t v2 = v133;
          uint64_t v30 = v26;
          p_base_meths = &ErrorFlowFactory.base_meths;
          (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v25, v30);
        }

        uint64_t v31 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v29);
LABEL_30:
        ++v24;
        [v33 setAceId:v31];
      }

      while (v10 != v24);
    }
  }

  uint64_t v44 = v2[33];
  uint64_t v45 = swift_bridgeObjectRelease(v9);
  uint64_t v46 = NLContextUpdate.init()(v45);
  if (v44)
  {
    uint64_t v47 = (void *)dispatch thunk of PommesResponse.primaryCatIds()(v46);
    uint64_t v48 = specialized static Array<A>.== infix(_:_:)( v47,  &outlined read-only object #0 of RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:));
    swift_bridgeObjectRetain(v47);
    swift_arrayDestroy(&unk_973C8, 1LL, &type metadata for String);
    uint64_t v49 = swift_bridgeObjectRelease_n(v47, 2LL);
    if ((v48 & 1) != 0)
    {
      id v50 = static SystemDialogActHelper.systemAskedUserToRepeat()(v49);
      uint64_t v51 = v2[39];
      uint64_t v52 = v2[40];
      uint64_t v53 = v2[38];
      if (v50)
      {
        uint64_t v54 = v50;
        ObjectType = swift_getObjectType();
        SIRINLUSystemDialogAct.toNluSystemDialogAct()(ObjectType);
        swift_unknownObjectRelease(v54);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v53, 1LL, v51) != 1)
        {
          uint64_t v56 = (*(uint64_t (**)(void, void, void))(v2[40] + 32LL))(v2[41], v2[38], v2[39]);
          uint64_t v57 = (os_log_s *)Logger.logObject.getter(v56);
          uint64_t v58 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v57, v58))
          {
            uint64_t v59 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v59 = 0;
            _os_log_impl(&dword_0, v57, v58, "Got gibberish response from Pegasus; sending ask-to-repeat SDA", v59, 2u);
            swift_slowDealloc(v59, -1LL, -1LL);
          }

          char v61 = v2[40];
          uint64_t v60 = v2[41];
          uint64_t v62 = v2[39];

          uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
          uint64_t v64 = *(unsigned __int8 *)(v61 + 80);
          uint64_t v65 = (v64 + 32) & ~v64;
          uint64_t v66 = swift_allocObject(v63, v65 + *(void *)(v61 + 72), v64 | 7);
          *(_OWORD *)(v66 + 16) = xmmword_7CCD0;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16))(v66 + v65, v60, v62);
          NLContextUpdate.nluSystemDialogActs.setter(v66);
          uint64_t v67 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
          uint64_t v3 = v128;
          goto LABEL_67;
        }
      }

      else
      {
        (*(void (**)(void, uint64_t, uint64_t, void))(v52 + 56))(v2[38], 1LL, 1LL, v2[39]);
      }

      uint64_t v49 = outlined destroy of Any?( v2[38],  &demangling cache variable for type metadata for Siri_Nlu_External_SystemDialogAct?);
    }
  }

  else
  {
    uint64_t v49 = swift_arrayDestroy(&unk_973C8, 1LL, &type metadata for String);
  }

  uint64_t v68 = (os_log_s *)Logger.logObject.getter(v49);
  os_log_type_t v69 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v68, v69))
  {
    uint64_t v70 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v70 = 0;
    _os_log_impl(&dword_0, v68, v69, "Sending PommesContext as usual", v70, 2u);
    swift_slowDealloc(v70, -1LL, -1LL);
  }

  uint64_t v71 = v2[33];

  uint64_t v72 = v2[37];
  uint64_t v3 = v128;
  if (v71)
  {
    PommesResponse.pommesContext.getter();
    uint64_t v73 = type metadata accessor for PommesContext(0LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56LL))(v72, 0LL, 1LL, v73);
  }

  else
  {
    id v74 = type metadata accessor for PommesContext(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 56LL))(v72, 1LL, 1LL, v74);
  }

  uint64_t v67 = NLContextUpdate.pommesContext.setter(v2[37]);
LABEL_67:
  int8x16_t v6 = (id)v2[65];
  uint64_t v75 = static os_signpost_type_t.end.getter(v67);
  os_signpost(_:dso:log:name:signpostID:)( v75,  &dword_0,  static Logger.informationLog,  "renderPegasusResult",  19LL,  2LL,  v6);
  uint64_t v10 = v2[18];
  uint64_t v76 = swift_bridgeObjectRetain_n(v10, 2LL);
  uint64_t v0 = Logger.logObject.getter(v76);
  LOBYTE(v6) = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled((os_log_t)v0, (os_log_type_t)v6))
  {
    swift_bridgeObjectRelease_n(v10, 2LL);
    goto LABEL_74;
  }

  uint64_t v5 = v2 + 10;
  uint64_t v9 = (uint64_t)(v2 + 23);
  uint64_t v4 = v2 + 21;
  uint64_t v1 = (_WORD *)swift_slowAlloc(22LL, -1LL);
  *(_DWORD *)uint64_t v1 = 134218240;
  if (!((unint64_t)v10 >> 62))
  {
    uint64_t v77 = *(void *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFF8LL));
    goto LABEL_70;
  }

        uint64_t v11 = (v20 - 1) & v20;
        uint64_t v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }

      uint64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
      __int128 v24 = *v22;
      uint64_t v23 = v22[1];
      __int128 v25 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        outlined init with take of Any(v25, v38);
      }

      else
      {
        outlined init with copy of Any((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }

      Hasher.init(_seed:)(v37, *(void *)(v8 + 40));
      String.hash(into:)(v37, v24, v23);
      unint64_t result = Hasher._finalize()();
      uint64_t v26 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v27 = result & ~v26;
      uint64_t v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        uint64_t v15 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v29 = 0;
        uint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          uint64_t v31 = v28 == v30;
          if (v28 == v30) {
            uint64_t v28 = 0LL;
          }
          v29 |= v31;
          __int128 v32 = *(void *)(v12 + 8 * v28);
        }

        while (v32 == -1);
        uint64_t v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      uint64_t v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
      *uint64_t v16 = v24;
      v16[1] = v23;
      unint64_t result = (uint64_t)outlined init with take of Any(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
      ++*(void *)(v8 + 16);
    }
  }

  unint64_t result = swift_release(v5);
  os_log_s *v3 = v8;
  return result;
}

    uint64_t v11 = (v21 - 1) & v21;
    uint64_t v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_25:
    uint64_t v23 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
    __int128 v25 = *v23;
    __int128 v24 = v23[1];
    uint64_t v26 = (__int128 *)(*(void *)(v5 + 56) + 48 * v18);
    if ((v38 & 1) != 0)
    {
      outlined init with take of Decodable & Encodable & Sendable(v26, v40);
    }

    else
    {
      outlined init with copy of Decodable & Encodable & Sendable((uint64_t)v26, (uint64_t)v40);
      swift_bridgeObjectRetain(v24);
    }

    Hasher.init(_seed:)(v39, *(void *)(v8 + 40));
    String.hash(into:)(v39, v25, v24);
    unint64_t result = Hasher._finalize()();
    uint64_t v27 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v28 = result & ~v27;
    uint64_t v29 = v28 >> 6;
    if (((-1LL << v28) & ~*(void *)(v12 + 8 * (v28 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v30 = 0;
      uint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        __int128 v32 = v29 == v31;
        if (v29 == v31) {
          uint64_t v29 = 0LL;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v12 + 8 * v29);
      }

      while (v33 == -1);
      uint64_t v15 = __clz(__rbit64(~v33)) + (v29 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    uint64_t v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
    *uint64_t v16 = v25;
    v16[1] = v24;
    unint64_t result = (uint64_t)outlined init with take of Decodable & Encodable & Sendable( v40,  (_OWORD *)(*(void *)(v8 + 56) + 48 * v15));
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v35;
  uint64_t v20 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v20, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v20 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_44:
  unint64_t result = swift_release(v5);
  os_log_s *v3 = v8;
  return result;
}

LABEL_77:
  if (v10 < 0) {
    uint64_t v101 = v10;
  }
  else {
    uint64_t v101 = v10 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v10);
  uint64_t v77 = _CocoaArrayWrapper.endIndex.getter(v101);
  swift_bridgeObjectRelease(v10);
LABEL_70:
  swift_bridgeObjectRelease(v10);
  *uint64_t v4 = v77;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4, v3);
  swift_bridgeObjectRelease(v10);
  v1[6] = 2048;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  uint64_t v78 = *v3;
  if ((unint64_t)*v3 >> 62)
  {
    if (v78 < 0) {
      uint64_t v102 = *v3;
    }
    else {
      uint64_t v102 = v78 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v3);
    uint64_t v79 = _CocoaArrayWrapper.endIndex.getter(v102);
    swift_bridgeObjectRelease(v78);
  }

  else
  {
    uint64_t v79 = *(void *)((char *)&dword_10 + (v78 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v2 = v133;
  v133[23] = v79;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v9, v133 + 24);
  _os_log_impl( &dword_0,  (os_log_t)v0,  (os_log_type_t)v6,  "RenderPegasusFlow creating output with views %ld : commands %ld",  (uint8_t *)v1,  0x16u);
  swift_slowDealloc(v1, -1LL, -1LL);
LABEL_74:

  uint64_t v115 = v2[63];
  uint64_t v116 = v2[65];
  uint64_t v117 = v2[61];
  uint64_t v118 = v2[60];
  uint64_t v119 = v2[62];
  uint64_t v113 = v2[56];
  uint64_t v114 = v2[64];
  uint64_t v110 = v2 + 2;
  char v111 = v2[55];
  uint64_t v112 = v2[54];
  uint64_t v120 = v2[59];
  char v121 = v2[53];
  id v122 = v2[50];
  uint64_t v123 = v2[49];
  uint64_t v80 = v2[45];
  uint64_t v81 = v2[46];
  uint64_t v109 = v81;
  uint64_t v83 = v2[43];
  uint64_t v82 = v2[44];
  uint64_t v84 = v2[42];
  uint64_t v124 = v2[41];
  uint64_t v125 = v2[38];
  uint64_t v129 = v2[37];
  uint64_t v132 = v80;
  uint64_t v106 = v2[35];
  uint64_t v107 = v2[34];
  uint64_t v108 = (void *)v2[33];
  outlined init with copy of OutputPublisherAsync(v2[36] + 16LL, (uint64_t)(v2 + 2));
  swift_beginAccess(v126, v2 + 7, 0LL, 0LL);
  uint64_t v127 = v2[18];
  swift_beginAccess(v3, v2 + 13, 0LL, 0LL);
  uint64_t v103 = v2[19];
  uint64_t v104 = v2[22];
  uint64_t v85 = v84;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 16))(v80, v81, v84);
  uint64_t v86 = *(unsigned __int8 *)(v83 + 80);
  uint64_t v87 = v83;
  uint64_t v105 = v83;
  id v88 = (v86 + 16) & ~v86;
  uint64_t v89 = (v82 + v88 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v90 = (v89 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v91 = (v90 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v92 = (v91 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v93 = (v92 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v94 = (v93 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  id v95 = swift_allocObject(&unk_97AC8, v94 + 8, v86 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v87 + 32))(v95 + v88, v132, v85);
  *(void *)(v95 + v89) = v106;
  *(void *)(v95 + v90) = v103;
  *(void *)(v95 + v91) = v127;
  *(void *)(v95 + v9__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v104;
  *(void *)(v95 + v93) = v107;
  *(void *)(v95 + v94) = v108;
  uint64_t v96 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v96, *(unsigned int *)(v96 + 48), *(unsigned __int16 *)(v96 + 52));
  uint64_t v97 = v108;
  swift_bridgeObjectRetain(v104);
  swift_bridgeObjectRetain(v106);
  swift_retain(v107);
  uint64_t v98 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v110,  &async function pointer to partial apply for closure #3 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:),  v95);
  v133[20] = v98;
  uint64_t v99 = Flow.eraseToAnyFlow()(v96, &protocol witness table for SimpleOutputFlowAsync);
  (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v109, v85);
  (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v113, v112);
  (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v116, v115);
  (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v119, v118);
  swift_release(v98);
  swift_bridgeObjectRelease(v133[22]);
  swift_task_dealloc(v116);
  swift_task_dealloc(v119);
  swift_task_dealloc(v120);
  swift_task_dealloc(v113);
  swift_task_dealloc(v121);
  swift_task_dealloc(v122);
  swift_task_dealloc(v123);
  swift_task_dealloc(v109);
  swift_task_dealloc(v132);
  swift_task_dealloc(v124);
  swift_task_dealloc(v125);
  swift_task_dealloc(v129);
  return ((uint64_t (*)(uint64_t))v133[1])(v99);
}

uint64_t closure #1 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[10] = v12;
  v8[11] = v13;
  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesCandidateId?);
  v8[12] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DialogPhase?);
  v8[13] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( closure #1 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:),  0LL,  0LL);
}

uint64_t closure #1 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(*(void *)(v0 + 24) + 56LL);
  uint64_t v5 = type metadata accessor for DialogPhase(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v1, v2, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v1, 0LL, 1LL, v5);
  uint64_t v8 = *(void *)(v0 + 96);
  if (v3)
  {
    uint64_t v9 = PommesResponse.requestId.getter(v7);
    uint64_t v11 = v10;
    PommesResponse.pommesCandidateId.getter();
  }

  else
  {
    uint64_t v12 = type metadata accessor for PommesCandidateId(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v8, 1LL, 1LL, v12);
    uint64_t v11 = 0LL;
    uint64_t v9 = 0LL;
  }

  uint64_t v14 = *(void *)(v0 + 96);
  uint64_t v13 = *(void *)(v0 + 104);
  uint64_t v15 = *(uint64_t **)(v0 + 16);
  uint64_t v16 = (*(uint64_t (**)(void, void, void, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 152LL))( *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56),  *(void *)(v0 + 64),  *(void *)(v0 + 72),  v13,  v9,  v11,  v14);
  uint64_t v18 = v17;
  swift_bridgeObjectRelease(v11);
  outlined destroy of Any?(v14, (uint64_t *)&demangling cache variable for type metadata for PommesCandidateId?);
  outlined destroy of Any?(v13, &demangling cache variable for type metadata for DialogPhase?);
  *uint64_t v15 = v16;
  v15[1] = v18;
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch( closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:),  0LL,  0LL);
}

uint64_t closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)()
{
  uint64_t v1 = *(uint64_t **)(v0 + 16);
  *uint64_t v1 = static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:)( *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #3 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[19] = a7;
  v8[20] = a8;
  v8[17] = a5;
  v8[18] = a6;
  v8[15] = a3;
  v8[16] = a4;
  v8[13] = a1;
  v8[14] = a2;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesCandidateId?);
  v8[21] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Date(0LL);
  v8[22] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v8[23] = v11;
  v8[24] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v8[25] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for AceOutput(0LL);
  v8[26] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v8[27] = v14;
  v8[28] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for NLContextUpdate(0LL);
  v8[29] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v8[30] = v16;
  v8[31] = swift_task_alloc((*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( closure #3 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:),  0LL,  0LL);
}

uint64_t closure #3 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)()
{
  uint64_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 240) + 16LL);
  v54(*(void *)(v0 + 248), *(void *)(v0 + 112), *(void *)(v0 + 232));
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v2, (uint64_t)static Logger.information);
  uint64_t v3 = swift_bridgeObjectRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void *)(v0 + 248);
    uint64_t v7 = *(void *)(v0 + 120);
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    *(_DWORD *)uint64_t v8 = 134218240;
    *(void *)(v0 + 88) = *(void *)(v7 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96);
    swift_bridgeObjectRelease(v7);
    *(_WORD *)(v8 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2048;
    uint64_t v9 = swift_beginAccess(v6, v0 + 40, 32LL, 0LL);
    uint64_t v10 = NLContextUpdate.rrEntities.getter(v9);
    if (v10)
    {
      uint64_t v11 = v10;
      swift_endAccess(v0 + 40);
      uint64_t v12 = *(void *)(v11 + 16);
      swift_bridgeObjectRelease(v11);
    }

    else
    {
      swift_endAccess(v0 + 40);
      uint64_t v12 = 0LL;
    }

    *(void *)(v0 + 96) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104);
    _os_log_impl(&dword_0, v4, v5, "Setting %ld entities on NLContextUpdate (displacing %ld)", (uint8_t *)v8, 0x16u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 120));
  }

  unint64_t v13 = *(void *)(v0 + 136);
  uint64_t v14 = *(void *)(v0 + 120);
  swift_beginAccess(*(void *)(v0 + 248), v0 + 16, 33LL, 0LL);
  uint64_t v15 = swift_bridgeObjectRetain(v14);
  NLContextUpdate.rrEntities.setter(v15);
  swift_endAccess(v0 + 16);
  uint64_t v16 = *(void *)(v0 + 136);
  if (v13 >> 62)
  {
    if (v16 < 0) {
      uint64_t v45 = *(void *)(v0 + 136);
    }
    else {
      uint64_t v45 = v13 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v46 = type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SABaseCommand,  &OBJC_CLASS___SABaseCommand_ptr);
    swift_bridgeObjectRetain(v16);
    uint64_t v18 = _bridgeCocoaArray<A>(_:)(v45, v46);
    swift_bridgeObjectRelease(v16);
  }

  else
  {
    uint64_t v17 = swift_bridgeObjectRetain(*(void *)(v0 + 136));
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v17);
    type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SABaseCommand,  &OBJC_CLASS___SABaseCommand_ptr);
    uint64_t v18 = *(void *)(v0 + 136);
  }

  uint64_t v20 = *(void *)(v0 + 240);
  uint64_t v19 = *(void *)(v0 + 248);
  uint64_t v21 = *(void *)(v0 + 232);
  uint64_t v22 = *(void *)(v0 + 192);
  uint64_t v23 = *(void *)(v0 + 200);
  uint64_t v48 = *(void *)(v0 + 184);
  uint64_t v50 = *(void *)(v0 + 176);
  uint64_t v52 = *(void *)(v0 + 160);
  uint64_t v24 = *(void *)(v0 + 144);
  uint64_t v47 = *(void *)(v0 + 152);
  *(void *)&v57[0] = *(void *)(v0 + 128);
  swift_bridgeObjectRetain(*(void *)&v57[0]);
  specialized Array.append<A>(contentsOf:)(v18);
  uint64_t v25 = swift_bridgeObjectRetain(v24);
  specialized Array.append<A>(contentsOf:)(v25);
  uint64_t v26 = *(void *)&v57[0];
  uint64_t v58 = 0LL;
  memset(v57, 0, sizeof(v57));
  v54(v23, v19, v21);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v23, 0LL, 1LL, v21);
  AceOutput.init(commands:flowActivity:nlContextUpdate:)(v26, v57, v23);
  uint64_t v27 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v28 = static PerformanceUtil.shared.getter(v27);
  Date.init()(v28);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (taskType: String?, isTerminalStepLogged: Bool));
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( (void *)(v0 + 64),  0xD00000000000002DLL,  0x800000000007FF10LL,  0LL,  v22,  "InformationFlowPlugin/RenderComponentFlowFactory.swift",  54LL,  2LL,  116LL,  "makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:d omainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)",  209LL,  2,  partial apply for closure #1 in closure #3 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:),  v47,  v29);
  swift_release(v28);
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v22, v50);
  uint64_t v30 = swift_bridgeObjectRelease(*(void *)(v0 + 72));
  uint64_t v31 = static PerformanceUtil.shared.getter(v30);
  uint64_t v32 = v31;
  uint64_t v33 = *(void *)(v0 + 168);
  if (v52)
  {
    uint64_t v34 = PommesResponse.requestId.getter(v31);
    uint64_t v36 = v35;
    PommesResponse.pommesCandidateId.getter();
  }

  else
  {
    uint64_t v37 = type metadata accessor for PommesCandidateId(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56LL))(v33, 1LL, 1LL, v37);
    uint64_t v36 = 0LL;
    uint64_t v34 = 0LL;
  }

  uint64_t v38 = *(void *)(v0 + 248);
  uint64_t v39 = *(void *)(v0 + 224);
  uint64_t v51 = *(void *)(v0 + 240);
  uint64_t v53 = *(void *)(v0 + 232);
  uint64_t v40 = *(void *)(v0 + 208);
  uint64_t v49 = *(void *)(v0 + 216);
  uint64_t v55 = *(void *)(v0 + 200);
  uint64_t v56 = *(void *)(v0 + 192);
  uint64_t v41 = *(void *)(v0 + 168);
  uint64_t v42 = *(void **)(v0 + 104);
  dispatch thunk of PerformanceUtil.emitMeasurements(requestId:pommesCandidateId:)(v34, v36, v41);
  swift_release(v32);
  swift_bridgeObjectRelease(v36);
  outlined destroy of Any?(v41, (uint64_t *)&demangling cache variable for type metadata for PommesCandidateId?);
  v42[3] = v40;
  v42[4] = &protocol witness table for AceOutput;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v42);
  (*(void (**)(void *, uint64_t, uint64_t))(v49 + 32))(boxed_opaque_existential_1, v39, v40);
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v38, v53);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RenderComponentFlowFactory.makeRenderComponentNavigationFlow(layouts:)(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for Date(0LL);
  v2[12] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[13] = v4;
  v2[14] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(RenderComponentFlowFactory.makeRenderComponentNavigationFlow(layouts:), 0LL, 0LL);
}

uint64_t RenderComponentFlowFactory.makeRenderComponentNavigationFlow(layouts:)()
{
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "RenderPegasusFlow making flow to render PegasusResult in Navigation", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  int8x16_t v30 = *(int8x16_t *)(v0 + 80);
  uint64_t v7 = *(void *)(v0 + 104);
  uint64_t v6 = *(void *)(v0 + 112);
  uint64_t v8 = *(void *)(v0 + 96);

  uint64_t v9 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v10 = static PerformanceUtil.shared.getter(v9);
  uint64_t v11 = (int8x16_t *)swift_task_alloc(32LL);
  v11[1] = vextq_s8(v30, v30, 8uLL);
  Date.init()(v11);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SABaseCommand]);
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( (void *)(v0 + 56),  0xD00000000000003FLL,  0x800000000007FD40LL,  0LL,  v6,  "InformationFlowPlugin/RenderComponentFlowFactory.swift",  54LL,  2LL,  126LL,  "makeRenderComponentNavigationFlow(layouts:)",  43LL,  2,  partial apply for closure #1 in RenderComponentFlowFactory.makeRenderComponentNavigationFlow(layouts:),  v11,  v12);
  swift_release(v10);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  swift_task_dealloc(v11);
  uint64_t v13 = *(void *)(v0 + 56);
  uint64_t v14 = swift_bridgeObjectRetain_n(v13, 2LL);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    uint64_t v31 = v18;
    *(_DWORD *)uint64_t v17 = 136315138;
    uint64_t v19 = type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SABaseCommand,  &OBJC_CLASS___SABaseCommand_ptr);
    uint64_t v20 = swift_bridgeObjectRetain(v13);
    uint64_t v21 = Array.description.getter(v20, v19);
    unint64_t v23 = v22;
    swift_bridgeObjectRelease(v13);
    *(void *)(v0 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease_n(v13, 2LL);
    _os_log_impl(&dword_0, v15, v16, "RenderPegasusFlow creating output with pegasusViews %s", v17, 0xCu);
    swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v13, 2LL);
  }

  uint64_t v24 = *(void *)(v0 + 112);
  outlined init with copy of OutputPublisherAsync(*(void *)(v0 + 88) + 16LL, v0 + 16);
  uint64_t v25 = swift_allocObject(&unk_97AF0, 24LL, 7LL);
  *(void *)(v25 + 16) = v13;
  uint64_t v26 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  uint64_t v27 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v0 + 16,  &async function pointer to partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentNavigationFlow(layouts:),  v25);
  *(void *)(v0 + 64) = v27;
  uint64_t v28 = Flow.eraseToAnyFlow()(v26, &protocol witness table for SimpleOutputFlowAsync);
  swift_release(v27);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v28);
}

uint64_t closure #2 in RenderComponentFlowFactory.makeRenderComponentNavigationFlow(layouts:)( uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for Date(0LL);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( closure #2 in RenderComponentFlowFactory.makeRenderComponentNavigationFlow(layouts:),  0LL,  0LL);
}

uint64_t closure #2 in RenderComponentFlowFactory.makeRenderComponentNavigationFlow(layouts:)()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  os_log_type_t v5 = *(void **)(v0 + 16);
  uint64_t v6 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v7 = static PerformanceUtil.shared.getter(v6);
  uint64_t v8 = swift_task_alloc(32LL);
  *(void *)(v8 + 16) = v4;
  Date.init()(v8);
  uint64_t v9 = type metadata accessor for AceOutput(0LL);
  v5[3] = v9;
  v5[4] = &protocol witness table for AceOutput;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v5);
  char v12 = 2;
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( boxed_opaque_existential_1,  0xD00000000000004ELL,  0x800000000007FE40LL,  0LL,  v1,  "InformationFlowPlugin/RenderComponentFlowFactory.swift",  54LL,  2LL,  132LL,  "makeRenderComponentNavigationFlow(layouts:)",  43LL,  v12,  partial apply for closure #1 in closure #2 in RenderComponentFlowFactory.makeRenderComponentNavigationFlow(layouts:),  v8,  v9);
  swift_release(v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v8);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #2 in RenderComponentFlowFactory.makeRenderComponentNavigationFlow(layouts:)( uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v8 = 0LL;
  memset(v7, 0, sizeof(v7));
  static AceOutputHelper.makeAceOutput(allAddViews:nlContextUpdate:additionalCommands:flowActivity:)( _swiftEmptyArrayStorage,  v4,  a1,  v7);
  outlined destroy of Any?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  return outlined destroy of Any?((uint64_t)v4, &demangling cache variable for type metadata for NLContextUpdate?);
}

id RenderComponentFlowFactory.addSiriSuggestion(_:toPegasusViews:toPegasusCommands:)( uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for HintsUI(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = HintsUI.snippet.getter(v8);
  uint64_t p_base_meths = (uint64_t)&ErrorFlowFactory.base_meths;
  if (!v11) {
    goto LABEL_27;
  }
  id v13 = (id)v11;
  uint64_t v14 = *a2;
  if (!((unint64_t)*a2 >> 62))
  {
    id v15 = *(id *)((char *)&dword_10 + (v14 & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain(v14);
    if (v15) {
      goto LABEL_4;
    }
LABEL_20:
    swift_bridgeObjectRelease(v14);
    if (one-time initialization token for information == -1)
    {
LABEL_21:
      uint64_t v29 = type metadata accessor for Logger(0LL);
      uint64_t v30 = __swift_project_value_buffer(v29, (uint64_t)static Logger.information);
      uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
      os_log_type_t v32 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl(&dword_0, v31, v32, "RenderPegasusFlow adding 1 SiriSuggestion view to Pegasus commands", v33, 2u);
        swift_slowDealloc(v33, -1LL, -1LL);
      }

      id v34 = [objc_allocWithZone(SAUIAddViews) init];
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v36 = swift_allocObject(v35, 40LL, 7LL);
      *(_OWORD *)(v36 + 16) = xmmword_7D060;
      *(void *)(v36 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v13;
      uint64_t v53 = v36;
      specialized Array._endMutation()(v36);
      uint64_t v37 = v53;
      type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAAceView,  &OBJC_CLASS___SAAceView_ptr);
      id v13 = v13;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v37);
      [v34 setViews:isa];

      id v15 = v34;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
      unint64_t v40 = *(void *)((char *)&dword_10 + (*a3 & 0xFFFFFFFFFFFFFF8LL));
      unint64_t v39 = *(void *)((char *)&dword_18 + (*a3 & 0xFFFFFFFFFFFFFF8LL));
      if (v40 >= v39 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1LL);
      }
      uint64_t v41 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v40, v15);
      specialized Array._endMutation()(v41);
      goto LABEL_26;
    }

LABEL_46:
    swift_once(&one-time initialization token for information, one-time initialization function for information);
    goto LABEL_21;
  }

  if (v14 < 0) {
    uint64_t v28 = *a2;
  }
  else {
    uint64_t v28 = v14 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v14);
  id v15 = (id)_CocoaArrayWrapper.endIndex.getter(v28);
  if (!v15) {
    goto LABEL_20;
  }
LABEL_4:
  if ((v14 & 0xC000000000000001LL) != 0)
  {
    id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v14);
LABEL_7:
    id v15 = v16;
    swift_bridgeObjectRelease(v14);
    if (one-time initialization token for information == -1) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }

  if (*(void *)((char *)&dword_10 + (v14 & 0xFFFFFFFFFFFFF8LL)))
  {
    id v16 = *(id *)(v14 + 32);
    goto LABEL_7;
  }

  __break(1u);
LABEL_40:
  swift_once(&one-time initialization token for information, one-time initialization function for information);
LABEL_8:
  uint64_t v17 = type metadata accessor for Logger(0LL);
  uint64_t v18 = __swift_project_value_buffer(v17, (uint64_t)static Logger.information);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl(&dword_0, v19, v20, "RenderPegasusFlow adding 1 SiriSuggestion view to Pegasus views", v21, 2u);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  id v13 = v13;
  id result = [v15 views];
  if (!result)
  {
    __break(1u);
    return result;
  }

  unint64_t v23 = result;
  uint64_t v24 = type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAAceView,  &OBJC_CLASS___SAAceView_ptr);
  uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, v24);

  uint64_t v53 = v25;
  if ((unint64_t)v25 >> 62)
  {
    uint64_t v51 = v25 < 0 ? v25 : v25 & 0xFFFFFFFFFFFFFF8LL;
    swift_bridgeObjectRetain(v25);
    uint64_t p_base_meths = _CocoaArrayWrapper.endIndex.getter(v51);
    swift_bridgeObjectRelease(v25);
    if (p_base_meths < 0)
    {
      __break(1u);
      goto LABEL_46;
    }
  }

  specialized Array.replaceSubrange<A>(_:with:)(0LL, 0LL, (uint64_t)v13);
  uint64_t v26 = v53;
  if (v53)
  {
    v27.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v26);
  }

  else
  {
    v27.super.Class isa = 0LL;
  }

  uint64_t p_base_meths = 655360LL;
  [v15 setViews:v27.super.isa];

LABEL_26:
LABEL_27:
  if (*(void *)(p_base_meths + 3640) != -1LL) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v42 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v42, (uint64_t)static Logger.information);
  uint64_t v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
  os_log_type_t v45 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v46 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v46 = 134217984;
    uint64_t v47 = HintsUI.supportingCommands.getter();
    uint64_t v48 = v47;
    if ((unint64_t)v47 >> 62)
    {
      if (v47 >= 0) {
        v47 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      uint64_t v49 = _CocoaArrayWrapper.endIndex.getter(v47);
    }

    else
    {
      uint64_t v49 = *(void *)((char *)&dword_10 + (v47 & 0xFFFFFFFFFFFFF8LL));
    }

    swift_bridgeObjectRelease(v48);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    uint64_t v53 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
    _os_log_impl( &dword_0,  v44,  v45,  "RenderPegasusFlow adding %ld SiriSuggestion supportingCommands to Pegasus commands",  v46,  0xCu);
    swift_slowDealloc(v46, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }

  uint64_t v50 = HintsUI.supportingCommands.getter();
  return (id)specialized Array.append<A>(contentsOf:)(v50);
}

  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

void closure #1 in RenderComponentFlowFactory.makeProfileSwitchIfNeeded(domainObjects:componentsCount:renderOptions:)( uint64_t a1@<X0>, void *a2@<X8>)
{
  id v34 = a2;
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent(0LL);
  uint64_t v35 = *(void *)(v3 - 8);
  uint64_t v36 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainObjectComponent.OneOf_Component?);
  uint64_t v6 = __chkstk_darwin(v33);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v33 - v9;
  uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoObjectComponent(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  id v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Apple_Parsec_Siri_V2alpha_DomainObjectComponent.component.getter(v13);
  uint64_t v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent.OneOf_Component(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v10, 1LL, v16) == 1)
  {
    outlined destroy of Any?( (uint64_t)v10,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainObjectComponent.OneOf_Component?);
  }

  else
  {
    if ((*(unsigned int (**)(char *, uint64_t))(v17 + 88))(v10, v16) == enum case for Apple_Parsec_Siri_V2alpha_DomainObjectComponent.OneOf_Component.videoObjects(_:))
    {
      (*(void (**)(char *, uint64_t))(v17 + 96))(v10, v16);
      uint64_t v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(v15, v10, v11);
      uint64_t v19 = Apple_Parsec_Siri_V2alpha_VideoObjectComponent.tvOrMovieObject.getter(v18);
      uint64_t v20 = *(void *)(v19 + 16);
      swift_bridgeObjectRelease(v19);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
      goto LABEL_12;
    }

    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v16);
  }

  uint64_t v22 = v35;
  uint64_t v21 = v36;
  if (one-time initialization token for videoSnippet != -1) {
    swift_once(&one-time initialization token for videoSnippet, one-time initialization function for videoSnippet);
  }
  uint64_t v23 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v23, (uint64_t)static Logger.videoSnippet);
  uint64_t v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 16))(v5, a1, v21);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    NSArray v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v28 = swift_slowAlloc(32LL, -1LL);
    uint64_t v39 = v28;
    *(_DWORD *)NSArray v27 = 136315138;
    Apple_Parsec_Siri_V2alpha_DomainObjectComponent.component.getter(v28);
    uint64_t v29 = String.init<A>(describing:)(v8, v33);
    unint64_t v31 = v30;
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
    swift_bridgeObjectRelease(v31);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v5, v36);
    _os_log_impl(&dword_0, v25, v26, "Ignoring unsupported domain object component: %s", v27, 0xCu);
    swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v21);
  }

  uint64_t v20 = 0LL;
LABEL_12:
  os_log_type_t v32 = v34;
  *id v34 = v20;
  *((_BYTE *)v32 + 8) = 0;
}

uint64_t ErrorFlowFactory.deinit()
{
  return v0;
}

uint64_t ErrorFlowFactory.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

void *closure #1 in serialize<A>(_:at:)(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v4 = a2 - (void)__src;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (!__dst)
  {
    if (v4 <= 0) {
      return __src;
    }
LABEL_10:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawBufferPointer.copyMemory source has too many elements",  69LL,  2LL,  "Swift/UnsafeRawBufferPointer.swift",  34LL,  2,  487LL,  0);
    __break(1u);
    return __src;
  }

  if (__src) {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>( uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v7 = a1;
    uint64_t v6 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      uint64_t v9 = *(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFF8LL));
      if (v9 >= a2) {
        goto LABEL_4;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }

  if (v6 < 0) {
    uint64_t v24 = v6;
  }
  else {
    uint64_t v24 = v6 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v6);
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v6);
  if (v9 < v5) {
    goto LABEL_34;
  }
LABEL_4:
  uint64_t v9 = v5 - v7;
  if (__OFSUB__(v5, v7))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  uint64_t v8 = 1 - v9;
  if (__OFSUB__(1LL, v9))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v6 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    uint64_t v10 = *(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFF8LL));
    uint64_t v11 = v10 + v8;
    if (!__OFADD__(v10, v8)) {
      goto LABEL_8;
    }
LABEL_42:
    __break(1u);
LABEL_43:
    if (v6 < 0) {
      uint64_t v26 = v6;
    }
    else {
      uint64_t v26 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v6);
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v6);
    goto LABEL_15;
  }

LABEL_37:
  if (v6 < 0) {
    uint64_t v25 = v6;
  }
  else {
    uint64_t v25 = v6 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v6);
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v25);
  swift_bridgeObjectRelease(v6);
  uint64_t v11 = v10 + v8;
  if (__OFADD__(v10, v8)) {
    goto LABEL_42;
  }
LABEL_8:
  uint64_t v6 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *uint64_t v4 = v6;
  uint64_t v10 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000LL) == 0 && (v6 & 0x4000000000000000LL) == 0)
  {
    uint64_t v13 = v6 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v10 = 1LL;
  }

  uint64_t v14 = *(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFF8LL));
LABEL_15:
  if (v14 <= v11) {
    uint64_t v14 = v11;
  }
  swift_bridgeObjectRetain(v6);
  uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1LL, v6);
  swift_bridgeObjectRelease(*v4);
  *uint64_t v4 = v6;
  uint64_t v13 = v6 & 0xFFFFFFFFFFFFFF8LL;
LABEL_18:
  id v15 = (void *)(v13 + 32 + 8 * v7);
  uint64_t v16 = type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAAceView,  &OBJC_CLASS___SAAceView_ptr);
  uint64_t v17 = (char *)swift_arrayDestroy(v15, v9, v16);
  if (!v8)
  {
LABEL_28:
    *id v15 = v3;
    return specialized Array._endMutation()(v17);
  }

  if (!((unint64_t)v6 >> 62))
  {
    uint64_t v18 = *(void *)(v13 + 16);
    uint64_t v19 = v18 - v5;
    if (!__OFSUB__(v18, v5)) {
      goto LABEL_21;
    }
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }

  if (v6 < 0) {
    uint64_t v27 = v6;
  }
  else {
    uint64_t v27 = v13;
  }
  swift_bridgeObjectRetain(v6);
  uint64_t v28 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v6);
  uint64_t v19 = v28 - v5;
  if (__OFSUB__(v28, v5)) {
    goto LABEL_52;
  }
LABEL_21:
  if ((v19 & 0x8000000000000000LL) == 0)
  {
    uint64_t v17 = (char *)(v15 + 1);
    uint64_t v20 = (char *)(v13 + 32 + 8 * v5);
    if (v15 + 1 != (void *)v20 || v17 >= &v20[8 * v19]) {
      uint64_t v17 = (char *)memmove(v17, v20, 8 * v19);
    }
    if (!((unint64_t)v6 >> 62))
    {
      uint64_t v21 = *(void *)(v13 + 16);
      uint64_t v22 = v21 + v8;
      if (!__OFADD__(v21, v8))
      {
LABEL_27:
        *(void *)(v13 + 16) = v22;
        goto LABEL_28;
      }

      goto LABEL_58;
    }

  __break(1u);
}

LABEL_53:
    if (v6 < 0) {
      uint64_t v29 = v6;
    }
    else {
      uint64_t v29 = v13;
    }
    swift_bridgeObjectRetain(v6);
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter(v29);
    uint64_t v17 = (char *)swift_bridgeObjectRelease(v6);
    uint64_t v22 = v30 + v8;
    if (!__OFADD__(v30, v8)) {
      goto LABEL_27;
    }
LABEL_58:
    __break(1u);
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A]( void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for CompositionSearchFlow.nlContextUpdate.modify in conformance PushOffQueryFlow;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A]( uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for CompositionSearchFlow.nlContextUpdate.modify in conformance PushOffQueryFlow;
}

void (*specialized Array.subscript.read( void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL)) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }

  __break(1u);
  return result;
}

void Array.subscript.readspecialized (id *a1)
{
}

uint64_t partial apply for closure #1 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)( uint64_t a1)
{
  uint64_t v4 = v1[3];
  uint64_t v12 = v1[2];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = v1[8];
  uint64_t v10 = (void *)swift_task_alloc(dword_A184C);
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return closure #1 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)( a1,  v12,  v4,  v5,  v6,  v7,  v8,  v9);
}

uint64_t partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)( uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = swift_task_alloc(dword_A1864);
  __int128 v6 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  *(void *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  *(void *)(v5 + 16) = a1;
  return swift_task_switch( closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:),  0LL,  0LL);
}

uint64_t (*specialized Array.subscript.read( uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL)) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }

  __break(1u);
  return result;
}

id specialized RenderComponentFlowFactory.makeProfileSwitchIfNeeded(domainObjects:componentsCount:renderOptions:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a2 || !*(void *)(a2 + 16) || (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(4u), (v18 & 1) == 0))
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    uint64_t v25 = __swift_project_value_buffer(v24, (uint64_t)static Logger.information);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v26, v27)) {
      goto LABEL_14;
    }
    uint64_t v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v28 = 0;
    uint64_t v29 = "Cannot find any domain object made, skipping making ProfileSwitch";
    goto LABEL_13;
  }

  if (*(void *)(*(void *)(a2 + 56) + 8 * v17) != 1LL)
  {
    if (one-time initialization token for information == -1)
    {
LABEL_25:
      uint64_t v37 = type metadata accessor for Logger(0LL);
      uint64_t v38 = __swift_project_value_buffer(v37, (uint64_t)static Logger.information);
      uint64_t v26 = (os_log_s *)Logger.logObject.getter(v38);
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v26, v27)) {
        goto LABEL_14;
      }
      uint64_t v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v28 = 0;
      uint64_t v29 = "More than one domain objects were made, skipping making ProfileSwitch";
LABEL_13:
      _os_log_impl(&dword_0, v26, v27, v29, v28, 2u);
      swift_slowDealloc(v28, -1LL, -1LL);
LABEL_14:

      return 0LL;
    }

LABEL_48:
    swift_once(&one-time initialization token for information, one-time initialization function for information);
    goto LABEL_25;
  }

  if (!a3)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1LL, 1LL, v13);
    goto LABEL_28;
  }

  PommesRenderOptions.switchProfile.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) == 1)
  {
LABEL_28:
    outlined destroy of Any?( (uint64_t)v12,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v39 = type metadata accessor for Logger(0LL);
    uint64_t v40 = __swift_project_value_buffer(v39, (uint64_t)static Logger.information);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v26, v27)) {
      goto LABEL_14;
    }
    uint64_t v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v28 = 0;
    uint64_t v29 = "No switchProfileBuilderParams is available, skipping making ProfileSwitch";
    goto LABEL_13;
  }

  uint64_t v61 = v7;
  uint64_t v62 = v16;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
  uint64_t v19 = *(void *)(a1 + 16);
  if (v19)
  {
    uint64_t v60 = v13;
    uint64_t v20 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent(0LL) - 8);
    uint64_t v21 = a1 + ((*(unsigned __int8 *)(v20 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    uint64_t v22 = *(void *)(v20 + 72);
    swift_bridgeObjectRetain(a1);
    uint64_t v23 = _swiftEmptyArrayStorage;
    uint64_t v63 = a1;
    do
    {
      closure #1 in RenderComponentFlowFactory.makeProfileSwitchIfNeeded(domainObjects:componentsCount:renderOptions:)( v21,  &v64);
      if ((v65[0] & 1) == 0)
      {
        uint64_t v32 = v64;
        if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0) {
          uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v23[2] + 1LL,  1,  v23);
        }
        unint64_t v34 = v23[2];
        unint64_t v33 = v23[3];
        unint64_t v35 = v34 + 1;
        if (v34 >= v33 >> 1)
        {
          unint64_t v59 = v34 + 1;
          uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v33 > 1),  v34 + 1,  1,  v23);
          unint64_t v35 = v59;
          uint64_t v23 = v36;
        }

        v23[2] = v35;
        v23[v34 + 4] = v32;
        a1 = v63;
      }

      v21 += v22;
      --v19;
    }

    while (v19);
    swift_bridgeObjectRelease(a1);
    uint64_t v13 = v60;
  }

  else
  {
    uint64_t v23 = _swiftEmptyArrayStorage;
  }

  uint64_t v41 = v23[2];
  if (v41)
  {
    uint64_t v42 = 0LL;
    uint64_t v43 = v23 + 4;
    while (1)
    {
      uint64_t v44 = *v43++;
      BOOL v45 = __OFADD__(v42, v44);
      v42 += v44;
      if (v45) {
        break;
      }
      if (!--v41) {
        goto LABEL_40;
      }
    }

    __break(1u);
    goto LABEL_48;
  }

  uint64_t v42 = 0LL;
LABEL_40:
  swift_bridgeObjectRelease(v23);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v46 = type metadata accessor for Logger(0LL);
  uint64_t v47 = __swift_project_value_buffer(v46, (uint64_t)static Logger.information);
  uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
  os_log_type_t v49 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v50 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v50 = 134217984;
    uint64_t v64 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65);
    _os_log_impl(&dword_0, v48, v49, "Found %ld tvOrMovieObject in videoObjects", v50, 0xCu);
    swift_slowDealloc(v50, -1LL, -1LL);
  }

  if (v42 == 1)
  {
    id v30 = [objc_allocWithZone(SAProfileSwitch) init];
    uint64_t v51 = UUID.init()(v30);
    UUID.uuidString.getter(v51);
    uint64_t v53 = v52;
    (*(void (**)(char *, uint64_t))(v61 + 8))(v9, v6);
    NSString v54 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v53);
    [v30 setAceId:v54];

    uint64_t v55 = v62;
    Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams.userID.getter();
    uint64_t v57 = v56;
    NSString v58 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v57);
    [v30 setSharedUserId:v58];

    (*(void (**)(char *, uint64_t))(v14 + 8))(v55, v13);
    return v30;
  }

  (*(void (**)(char *, uint64_t))(v14 + 8))(v62, v13);
  return 0LL;
}

uint64_t sub_171E0()
{
  uint64_t v1 = type metadata accessor for NLContextUpdate(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v6));
  swift_bridgeObjectRelease(*(void *)(v0 + v7));
  swift_bridgeObjectRelease(*(void *)(v0 + v8));
  swift_bridgeObjectRelease(*(void *)(v0 + v9));
  swift_release(*(void *)(v0 + v10));

  return swift_deallocObject(v0, v11 + 8, v5);
}

uint64_t partial apply for closure #3 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)( uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for NLContextUpdate(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v11 = v1 + v5;
  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = *(void *)(v1 + v7);
  uint64_t v14 = *(void *)(v1 + v8);
  uint64_t v15 = *(void *)(v1 + v9);
  uint64_t v16 = *(void *)(v1 + v10);
  uint64_t v17 = *(void *)(v1 + ((v10 + 15) & 0xFFFFFFFFFFFFF8LL));
  char v18 = (void *)swift_task_alloc(dword_A1874);
  *(void *)(v2 + 16) = v18;
  *char v18 = v2;
  v18[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return closure #3 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)( a1,  v11,  v12,  v13,  v14,  v15,  v16,  v17);
}

uint64_t partial apply for closure #1 in RenderComponentFlowFactory.makeRenderComponentNavigationFlow(layouts:)@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)(v1 + 16) + 56LL) + 160LL))(*(void *)(v1 + 24));
  *a1 = result;
  return result;
}

uint64_t sub_173F0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentNavigationFlow(layouts:)( uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  unint64_t v5 = (void *)swift_task_alloc(dword_A1894);
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return closure #2 in RenderComponentFlowFactory.makeRenderComponentNavigationFlow(layouts:)(a1, v4);
}

uint64_t type metadata accessor for SABaseCommand(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t type metadata accessor for RenderComponentFlowFactory()
{
  return objc_opt_self(&OBJC_CLASS____TtC21InformationFlowPlugin26RenderComponentFlowFactory);
}

uint64_t partial apply for closure #1 in closure #2 in RenderComponentFlowFactory.makeRenderComponentNavigationFlow(layouts:)()
{
  return closure #1 in closure #2 in RenderComponentFlowFactory.makeRenderComponentNavigationFlow(layouts:)(*(void *)(v0 + 16));
}

uint64_t partial apply for closure #1 in closure #3 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)@<X0>( uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 128LL))();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  return result;
}

uint64_t closure #1 in ResponseFlowFactory.outputManifest(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v3);
  char v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for NLContextUpdate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v5, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0LL, 1LL, v6);
  return OutputGenerationManifest.nlContextUpdate.setter(v5);
}

uint64_t ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:) + async function pointer to specialized ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:));
  char v18 = (void *)swift_task_alloc(unk_A198C);
  *(void *)(v10 + 16) = v18;
  *char v18 = v10;
  v18[1] = ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:);
  return v20(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:)( uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 16);
  uint64_t v5 = *v2;
  uint64_t v6 = swift_task_dealloc(v4);
  if (!v1) {
    uint64_t v6 = a1;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t specialized ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[17] = v18;
  v8[18] = v19;
  v8[15] = a7;
  v8[16] = a8;
  v8[13] = a5;
  v8[14] = a6;
  v8[11] = a3;
  v8[12] = a4;
  v8[9] = a1;
  v8[10] = a2;
  uint64_t v9 = type metadata accessor for DialogPhase(0LL);
  v8[19] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for NLContextUpdate(0LL);
  v8[20] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v8[21] = v11;
  v8[22] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OutputGenerationManifest(0LL);
  v8[23] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v8[24] = v13;
  v8[25] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Date(0LL);
  v8[26] = swift_task_alloc((*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for PerformanceUtil.Ticket(0LL);
  v8[27] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v8[28] = v16;
  v8[29] = swift_task_alloc((*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( specialized ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:),  0LL,  0LL);
}

uint64_t specialized ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:)()
{
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v3 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v3, (uint64_t)static Logger.information);
  swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v4 = swift_bridgeObjectRetain_n(v2, 2LL);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v10 = static os_log_type_t.debug.getter(v5, v6, v7, v8, v9);
  BOOL v11 = os_log_type_enabled(v5, v10);
  unint64_t v13 = v0[10];
  uint64_t v12 = v0[11];
  if (v11)
  {
    uint64_t v14 = v0[9];
    uint64_t v15 = swift_slowAlloc(22LL, -1LL);
    uint64_t v27 = swift_slowAlloc(64LL, -1LL);
    uint64_t v29 = v27;
    *(_DWORD *)uint64_t v15 = 136315394;
    swift_bridgeObjectRetain(v13);
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8);
    swift_bridgeObjectRelease_n(v13, 3LL);
    *(_WORD *)(v15 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    swift_bridgeObjectRetain(v12);
    uint64_t v16 = Dictionary.description.getter( v12,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    unint64_t v18 = v17;
    swift_bridgeObjectRelease(v12);
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease_n(v12, 2LL);
    _os_log_impl( &dword_0,  v5,  v10,  "ResponseFlowFactory.makeRenderPatternFlow making default pattern flow for patternId %s : %s",  (uint8_t *)v15,  0x16u);
    swift_arrayDestroy(v27, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v0[10], 2LL);
    swift_bridgeObjectRelease_n(v12, 2LL);
  }

  uint64_t v19 = v0[26];
  uint64_t v20 = (void *)v0[18];
  Date.init()(v21);
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0xD000000000000035LL,  0x800000000007FF40LL,  v19,  "InformationFlowPlugin/ResponseFlowFactory.swift",  47LL,  2LL,  37LL,  "makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowPr ovider:patternExecutor:)",  140LL,  2);
  uint64_t v22 = v20[3];
  uint64_t v23 = v20[4];
  __swift_project_boxed_opaque_existential_1(v20, v22);
  uint64_t v24 = *(int **)(v23 + 8);
  uint64_t v28 = (int *)((char *)v24 + *v24);
  uint64_t v25 = (void *)swift_task_alloc(v24[1]);
  v0[30] = v25;
  *uint64_t v25 = v0;
  v25[1] = specialized ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:);
  return ((uint64_t (*)(void, void, void, void, void, uint64_t, uint64_t))v28)( v0[9],  v0[10],  v0[12],  v0[11],  v0[16],  v22,  v23);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v23 = *(void *)(v0 + 224);
  uint64_t v24 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v25 = *(void *)(v0 + 208);
  uint64_t v20 = *(void **)(v0 + 256);
  uint64_t v21 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v22 = *(void *)(v0 + 184);
  unint64_t v18 = *(void *)(v0 + 168);
  uint64_t v19 = *(void *)(v0 + 160);
  uint64_t v16 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v7 = *(void *)(v0 + 104);
  uint64_t v8 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v9 = static PerformanceUtil.shared.getter(v8);
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v1, 0LL);
  swift_release(v9);
  static PatternFlowProvidingHelper.unwrap(_:with:)(v4, v5, (uint64_t *)(v0 + 16));
  os_log_type_t v10 = *(void *)(v0 + 40);
  unint64_t v17 = *(void *)(v0 + 48);
  BOOL v11 = __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v10);
  NLContextUpdate.init()(v11);
  outlined copy of Data?(v7, v6);
  uint64_t v12 = NLContextUpdate.pegasusConversationContext.setter(v7, v6);
  static DialogPhase.completion.getter(v12);
  unint64_t v13 = swift_task_alloc(32LL);
  *(void *)(v13 + 16) = v3;
  OutputGenerationManifest.init(dialogPhase:_:)( v16,  partial apply for closure #1 in ResponseFlowFactory.outputManifest(for:),  v13);
  swift_task_dealloc(v13);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v3, v19);
  uint64_t v14 = dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)( v20,  v2,  v10,  v17);

  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v2, v22);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v1, v24);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  swift_task_dealloc(v1);
  swift_task_dealloc(v25);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v14);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v5 = *(void *)(v0 + 152);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 224) + 8LL))(v1, *(void *)(v0 + 216));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:)( uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 240);
  *(void *)(*v2 + 248) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = specialized ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:);
  }

  else
  {
    *(void *)(v4 + 256) = a1;
    uint64_t v6 = specialized ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:);
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

ValueMetadata *type metadata accessor for ResponseFlowFactory()
{
  return &type metadata for ResponseFlowFactory;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t partial apply for closure #1 in ResponseFlowFactory.outputManifest(for:)(uint64_t a1)
{
  return closure #1 in ResponseFlowFactory.outputManifest(for:)(a1, *(void *)(v1 + 16));
}

uint64_t InformationFlowPlugin.__allocating_init()()
{
  return swift_allocObject(v0, 16LL, 7LL);
}

uint64_t PatternExecutor.execute(pattern:in:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  void v5[9] = a3;
  v5[7] = a1;
  return swift_task_switch(PatternExecutor.execute(pattern:in:with:), 0LL, 0LL);
}

uint64_t PatternExecutor.execute(pattern:in:with:)(uint64_t a1)
{
  uint64_t v2 = v1[11];
  static Device.current.getter(v1 + 2, a1);
  uint64_t v3 = *(int **)(*(void *)v2 + 88LL);
  uint64_t v6 = (int *)((char *)v3 + *v3);
  uint64_t v4 = (void *)swift_task_alloc(v3[1]);
  v1[12] = v4;
  *uint64_t v4 = v1;
  v4[1] = PatternExecutor.execute(pattern:in:with:);
  return ((uint64_t (*)(void, void, void, void, void *))v6)(v1[7], v1[8], v1[9], v1[10], v1 + 2);
}

{
  uint64_t v1;
  uint64_t *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v4 = (void *)(*v2 + 16);
  uint64_t v5 = *(void *)(*v2 + 96);
  uint64_t v6 = *v2;
  *(void *)(v6 + 104) = v1;
  swift_task_dealloc(v5);
  __swift_destroy_boxed_opaque_existential_1(v4);
  if (v1) {
    return swift_task_switch(PatternExecutor.execute(pattern:in:with:), 0LL, 0LL);
  }
  else {
    return (*(uint64_t (**)(uint64_t))(v6 + 8))(a1);
  }
}

uint64_t PatternExecutor.execute(pattern:in:with:)()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PatternExecutor.execute(pattern:in:with:deviceState:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[23] = a4;
  _BYTE v5[24] = a5;
  v5[21] = a2;
  v5[22] = a3;
  v5[20] = a1;
  return swift_task_switch(PatternExecutor.execute(pattern:in:with:deviceState:), 0LL, 0LL);
}

uint64_t PatternExecutor.execute(pattern:in:with:deviceState:)()
{
  uint64_t v2 = v0[23];
  uint64_t v1 = v0[24];
  uint64_t v15 = v0[22];
  uint64_t v3 = (void *)objc_opt_self(&OBJC_CLASS___CATPattern);
  NSString v4 = String._bridgeToObjectiveC()();
  v0[25] = v4;
  uint64_t v5 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v2);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v0[26] = isa;
  swift_bridgeObjectRelease(v5);
  type metadata accessor for CATGlobals(0LL);
  outlined init with copy of OutputPublisherAsync(v1, (uint64_t)(v0 + 10));
  uint64_t v7 = static CATGlobals.defaultBuilder(deviceState:)(v0 + 10);
  uint64_t v8 = outlined destroy of DeviceState?((uint64_t)(v0 + 10));
  uint64_t v9 = (void *)dispatch thunk of CATGlobals.Builder.build()(v8);
  uint64_t v10 = swift_release(v7);
  uint64_t v11 = dispatch thunk of CATGlobals.toDictionary.getter(v10);

  Class v12 = Dictionary._bridgeToObjectiveC()().super.isa;
  v0[27] = v12;
  swift_bridgeObjectRelease(v11);
  uint64_t v13 = CATDefaultMode;
  v0[7] = v0 + 19;
  v0[2] = v0;
  v0[3] = PatternExecutor.execute(pattern:in:with:deviceState:);
  v0[14] = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000LL;
  v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned PatternExecutionResult, @unowned NSError?) -> () with result type PatternExecutionResult;
  v0[13] = &block_descriptor;
  [v3 execute:v15 patternId:v4 parameters:isa globals:v12 options:v13 completion:v0 + 10];
  return swift_continuation_await(v0 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 224LL) = v1;
  if (v1) {
    uint64_t v2 = PatternExecutor.execute(pattern:in:with:deviceState:);
  }
  else {
    uint64_t v2 = PatternExecutor.execute(pattern:in:with:deviceState:);
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v1 = *(void **)(v0 + 208);
  uint64_t v2 = *(void **)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 152);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_s *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20[2];
  uint64_t v1 = *(void **)(v0 + 216);
  uint64_t v3 = *(void **)(v0 + 200);
  uint64_t v2 = *(void **)(v0 + 208);
  swift_willThrow();

  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  NSString v4 = *(void *)(v0 + 224);
  uint64_t v5 = *(void *)(v0 + 168);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v6, (uint64_t)static Logger.information);
  swift_bridgeObjectRetain(v5);
  swift_errorRetain(v4);
  swift_bridgeObjectRetain(v5);
  uint64_t v7 = swift_errorRetain(v4);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  uint64_t v9 = static os_log_type_t.error.getter();
  uint64_t v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = *(void *)(v0 + 224);
  Class v12 = *(void *)(v0 + 168);
  if (v10)
  {
    uint64_t v13 = *(void *)(v0 + 160);
    uint64_t v14 = swift_slowAlloc(22LL, -1LL);
    uint64_t v19 = swift_slowAlloc(64LL, -1LL);
    v20[0] = v19;
    *(_DWORD *)uint64_t v14 = 136315394;
    swift_bridgeObjectRetain(v12);
    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v12, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
    swift_bridgeObjectRelease_n(v12, 3LL);
    *(_WORD *)(v14 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    swift_getErrorValue(v11, v0 + 144, v0 + 120);
    uint64_t v15 = Error.localizedDescription.getter(*(void *)(v0 + 128), *(void *)(v0 + 136));
    unint64_t v17 = v16;
    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
    swift_bridgeObjectRelease(v17);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl( &dword_0,  v8,  v9,  "PatternExecutor: Failed to execute Pattern: %s with error: %s",  (uint8_t *)v14,  0x16u);
    swift_arrayDestroy(v19, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 168), 2LL);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v29 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  uint64_t result = swift_retain(v3);
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }

    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v14 >= v28) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v29 + 8 * v14);
    int64_t v16 = v9 + 1;
    if (!v15)
    {
      int64_t v16 = v9 + 2;
      if (v9 + 2 >= v28) {
        goto LABEL_37;
      }
      unint64_t v15 = *(void *)(v29 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v9 + 3;
        if (v9 + 3 >= v28) {
          goto LABEL_37;
        }
        unint64_t v15 = *(void *)(v29 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v9 + 4;
          if (v9 + 4 >= v28) {
            goto LABEL_37;
          }
          unint64_t v15 = *(void *)(v29 + 8 * v16);
          if (!v15) {
            break;
          }
        }
      }
    }

LABEL_27:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    int64_t v9 = v16;
LABEL_28:
    unint64_t v18 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v13);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v13, (uint64_t)v41);
    *(void *)&__int128 v40 = v20;
    *((void *)&v40 + 1) = v19;
    __int128 v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(void *)&v38[0] = v20;
    *((void *)&v38[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7LL);
    outlined init with take of Any(v39, v33);
    __int128 v34 = v30;
    __int128 v35 = v31;
    uint64_t v36 = v32;
    outlined init with take of Any(v33, v37);
    __int128 v30 = v34;
    __int128 v31 = v35;
    uint64_t v32 = v36;
    outlined init with take of Any(v37, v38);
    outlined init with take of Any(v38, &v34);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v3[5]);
    uint64_t v21 = -1LL << *((_BYTE *)v3 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)&v7[8 * (v22 >> 6)]) != 0)
    {
      unint64_t v10 = __clz(__rbit64((-1LL << v22) & ~*(void *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)&v7[8 * v23];
      }

      while (v27 == -1);
      unint64_t v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v10;
    uint64_t v11 = v3[6] + 40 * v10;
    *(_OWORD *)uint64_t v11 = v30;
    *(_OWORD *)(v11 + 16) = v31;
    *(void *)(v11 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v32;
    uint64_t result = (uint64_t)outlined init with take of Any(&v34, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }

  int64_t v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    outlined consume of [String : Any].Iterator._Variant(a1);
    return (uint64_t)v3;
  }

  unint64_t v15 = *(void *)(v29 + 8 * v17);
  if (v15)
  {
    int64_t v16 = v9 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v16 >= v28) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v29 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_27;
    }
  }

    swift_release(v260);
    __int128 v40 = swift_bridgeObjectRelease(v62);
    uint64_t v84 = (uint64_t)v271;
    uint64_t v85 = v269;
LABEL_28:
    uint64_t v86 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.delayMilliseconds.getter(v40);
    if (!(_DWORD)v86)
    {
      uint64_t v114 = (void *)Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter(v86);
      uint64_t v115 = v114;
      *(void *)&v283 = _swiftEmptyArrayStorage;
      uint64_t v116 = v114[2];
      if (!v116)
      {
        unint64_t v22 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_61:
        swift_bridgeObjectRelease(v115);
        uint64_t v20 = (char *)v263;
        uint64_t v84 = (uint64_t)v271;
        goto LABEL_62;
      }

      uint64_t v117 = (char *)v114
           + ((*(unsigned __int8 *)(v277 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v277 + 80));
      uint64_t v118 = *(void *)(v277 + 72);
      uint64_t v119 = *(void (**)(char *, char *, void *))(v277 + 16);
      v260 = v114;
      swift_bridgeObjectRetain(v114);
      v264 = xmmword_7D060;
      while (1)
      {
        v119(v20, v117, v11);
        uint64_t v120 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter();
        if (v120) {
          break;
        }
        (*(void (**)(char *, void *))(v277 + 8))(v20, v11);
LABEL_46:
        v117 += v118;
        if (!--v116)
        {
          uint64_t v115 = v260;
          swift_bridgeObjectRelease(v260);
          unint64_t v22 = v283;
          uint64_t v85 = v269;
          goto LABEL_61;
        }
      }

      char v121 = (void *)v120;
      v281 = &OBJC_PROTOCOL___SAClientBoundCommand;
      id v122 = swift_dynamicCastObjCProtocolConditional(v120, 1LL, &v281);
      uint64_t v123 = (id)v122;
      if (!v122)
      {
        v280 = &OBJC_PROTOCOL___SAServerBoundCommand;
        uint64_t v124 = swift_dynamicCastObjCProtocolConditional(v121, 1LL, &v280);
        if (!v124)
        {

          (*(void (**)(char *, void *))(v277 + 8))(v20, v11);
LABEL_54:
          uint64_t v64 = (uint64_t)v276;
          goto LABEL_46;
        }

        uint64_t v125 = v124;
        uint64_t v126 = objc_allocWithZone(&OBJC_CLASS___SASendCommands);
        uint64_t v127 = v121;
        uint64_t v123 = [v126 init];
        uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v129 = swift_allocObject(v128, 40LL, 7LL);
        *(_OWORD *)(v129 + 16) = v264;
        *(void *)(v129 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v125;
        v282 = v129;
        specialized Array._endMutation()(v129);
        uint64_t v130 = v282;
        uint64_t v131 = v127;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAServerBoundCommand);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v130);
        [v123 setCommands:isa];
      }

      Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter(v122);
      uint64_t v134 = v133;
      uint64_t v135 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v134);
      [v123 setAceId:v135];

      uint64_t v136 = (*(uint64_t (**)(char *, void *))(v277 + 8))(v20, v11);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v136);
      uint64_t v138 = *(void *)((char *)&dword_10 + (v283 & 0xFFFFFFFFFFFFFF8LL));
      char v137 = *(void *)((char *)&dword_18 + (v283 & 0xFFFFFFFFFFFFFF8LL));
      if (v138 >= v137 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v137 > 1, v138 + 1, 1LL);
      }
      uint64_t v139 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v138, v123);
      specialized Array._endMutation()(v139);
      goto LABEL_54;
    }

    v260 = [objc_allocWithZone(SAUIDelayedActionCommand) init];
    uint64_t v87 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter(v260);
    id v88 = v87;
    *(void *)&v283 = _swiftEmptyArrayStorage;
    uint64_t v89 = *(void *)(v87 + 16);
    if (v89)
    {
      uint64_t v90 = v87 + ((*(unsigned __int8 *)(v277 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v277 + 80));
      uint64_t v91 = *(void *)(v277 + 72);
      uint64_t v92 = *(void (**)(uint64_t, unint64_t, void *))(v277 + 16);
      v258 = v87;
      swift_bridgeObjectRetain(v87);
      v264 = xmmword_7D060;
      while (1)
      {
        v92(v22, v90, v11);
        uint64_t v93 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter();
        if (v93) {
          break;
        }
        (*(void (**)(uint64_t, void *))(v277 + 8))(v22, v11);
LABEL_32:
        v90 += v91;
        if (!--v89)
        {
          id v88 = v258;
          swift_bridgeObjectRelease(v258);
          uint64_t v113 = (void *)v283;
          uint64_t v85 = v269;
          uint64_t v64 = (uint64_t)v276;
          goto LABEL_57;
        }
      }

      uint64_t v94 = (void *)v93;
      v279 = &OBJC_PROTOCOL___SAClientBoundCommand;
      id v95 = swift_dynamicCastObjCProtocolConditional(v93, 1LL, &v279);
      uint64_t v96 = (id)v95;
      if (!v95)
      {
        v278 = &OBJC_PROTOCOL___SAServerBoundCommand;
        uint64_t v97 = swift_dynamicCastObjCProtocolConditional(v94, 1LL, &v278);
        if (!v97)
        {

          (*(void (**)(uint64_t, void *))(v277 + 8))(v22, v11);
LABEL_40:
          uint64_t v84 = (uint64_t)v271;
          goto LABEL_32;
        }

        uint64_t v98 = v97;
        uint64_t v99 = objc_allocWithZone(&OBJC_CLASS___SASendCommands);
        uint64_t v100 = v94;
        uint64_t v96 = [v99 init];
        uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v102 = swift_allocObject(v101, 40LL, 7LL);
        *(_OWORD *)(v102 + 16) = v264;
        *(void *)(v102 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v98;
        v282 = v102;
        specialized Array._endMutation()(v102);
        uint64_t v103 = v282;
        uint64_t v104 = v100;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAServerBoundCommand);
        uint64_t v105 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v103);
        [v96 setCommands:v105];
      }

      Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter(v95);
      uint64_t v107 = v106;
      uint64_t v108 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v107);
      [v96 setAceId:v108];

      uint64_t v109 = (*(uint64_t (**)(uint64_t, void *))(v277 + 8))(v22, v11);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v109);
      char v111 = *(void *)((char *)&dword_10 + (v283 & 0xFFFFFFFFFFFFFF8LL));
      uint64_t v110 = *(void *)((char *)&dword_18 + (v283 & 0xFFFFFFFFFFFFFF8LL));
      if (v111 >= v110 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v110 > 1, v111 + 1, 1LL);
      }
      uint64_t v112 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v111, v96);
      specialized Array._endMutation()(v112);
      goto LABEL_40;
    }

    uint64_t v113 = _swiftEmptyArrayStorage;
LABEL_57:
    swift_bridgeObjectRelease(v88);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    uint64_t v140 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v113);
    uint64_t v141 = v260;
    [v260 setCommands:v140];

    uint64_t v143 = [objc_allocWithZone(NSNumber) initWithUnsignedInt:Apple_Parsec_Siri_V2alpha_DelayedActionComponent.delayMilliseconds.getter(v142)];
    [v141 setTimerValue:v143];

    uint64_t v144 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v145 = swift_allocObject(v144, 40LL, 7LL);
    *(_OWORD *)(v145 + 16) = xmmword_7D060;
    *(void *)(v145 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v141;
    *(void *)&v283 = v145;
    specialized Array._endMutation()(v145);
    unint64_t v22 = v283;
    uint64_t v20 = (char *)v263;
LABEL_62:
    uint64_t v146 = type metadata accessor for SiriEnvironment(0LL);
    id v147 = static SiriEnvironment.default.getter(v146);
    uint64_t v148 = SiriEnvironment.currentDevice.getter();
    uint64_t v149 = swift_release(v147);
    dispatch thunk of CurrentDevice.deviceClass.getter(v149);
    swift_release(v148);
    uint64_t v150 = v266;
    (*(void (**)(uint64_t, void, char *))(v266 + 104))(v64, enum case for DeviceClass.homePod(_:), v20);
    (*(void (**)(uint64_t, void, uint64_t, char *))(v150 + 56))(v64, 0LL, 1LL, v20);
    uint64_t v151 = v268;
    uint64_t v152 = v268 + *(int *)(v262 + 48);
    outlined init with copy of IdentifiedUser?(v85, v268, &demangling cache variable for type metadata for DeviceClass?);
    uint64_t v62 = v151;
    outlined init with copy of IdentifiedUser?(v64, v152, &demangling cache variable for type metadata for DeviceClass?);
    uint64_t v153 = *(unsigned int (**)(uint64_t, uint64_t, char *))(v150 + 48);
    uint64_t v51 = (unint64_t)v22 >> 62;
    if (v153(v62, 1LL, v20) == 1)
    {
      outlined destroy of Any?(v64, &demangling cache variable for type metadata for DeviceClass?);
      uint64_t v62 = v268;
      outlined destroy of Any?(v85, &demangling cache variable for type metadata for DeviceClass?);
      if (v153(v152, 1LL, v20) == 1)
      {
        outlined destroy of Any?(v62, &demangling cache variable for type metadata for DeviceClass?);
        goto LABEL_82;
      }

      goto LABEL_67;
    }

    outlined init with copy of IdentifiedUser?(v62, v84, &demangling cache variable for type metadata for DeviceClass?);
    if (v153(v152, 1LL, v20) == 1)
    {
      outlined destroy of Any?(v64, &demangling cache variable for type metadata for DeviceClass?);
      outlined destroy of Any?(v269, &demangling cache variable for type metadata for DeviceClass?);
      (*(void (**)(uint64_t, char *))(v266 + 8))(v84, v20);
LABEL_67:
      outlined destroy of Any?( v62,  (uint64_t *)&demangling cache variable for type metadata for (DeviceClass?, DeviceClass?));
      goto LABEL_69;
    }

    uint64_t v154 = v266;
    uint64_t v155 = v64;
    uint64_t v156 = v259;
    (*(void (**)(char *, uint64_t, char *))(v266 + 32))(v259, v152, v20);
    uint64_t v157 = lazy protocol witness table accessor for type DeviceClass and conformance DeviceClass();
    uint64_t v158 = dispatch thunk of static Equatable.== infix(_:_:)(v84, v156, v20, v157);
    uint64_t v159 = *(void (**)(char *, char *))(v154 + 8);
    v159(v156, v20);
    uint64_t v62 = (uint64_t)&demangling cache variable for type metadata for DeviceClass?;
    uint64_t v160 = v155;
    uint64_t v51 = (unint64_t)v22 >> 62;
    outlined destroy of Any?(v160, &demangling cache variable for type metadata for DeviceClass?);
    outlined destroy of Any?(v269, &demangling cache variable for type metadata for DeviceClass?);
    v159((char *)v84, v20);
    outlined destroy of Any?(v268, &demangling cache variable for type metadata for DeviceClass?);
    if ((v158 & 1) != 0) {
      goto LABEL_82;
    }
LABEL_69:
    if (v51) {
      break;
    }
    uint64_t v161 = *(void *)((char *)&dword_10 + (v22 & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain_n(v22, 2LL);
    if (!v161) {
      goto LABEL_81;
    }
LABEL_71:
    if ((v22 & 0xC000000000000001LL) == 0)
    {
      uint64_t v20 = 0LL;
      while (1)
      {
        uint64_t v165 = v20 + 1;
        if (__OFADD__(v20, 1LL)) {
          goto LABEL_120;
        }
        uint64_t v62 = *(void *)(v22 + 8LL * (void)v20 + 32);
        uint64_t v166 = objc_opt_self(&OBJC_CLASS___SAInitiateHandoffOnCompanion);
        if (swift_dynamicCastObjCClass(v62, v166)) {
          break;
        }
        ++v20;
      }

      swift_bridgeObjectRelease_n(v22, 2LL);
LABEL_103:
      uint64_t v185 = swift_bridgeObjectRelease(v275);
      uint64_t v186 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter(v185);
      *(void *)&v283 = _swiftEmptyArrayStorage;
      uint64_t v188 = *(void *)(v186 + 16);
      uint64_t v189 = v267;
      if (v188)
      {
        uint64_t v190 = (*(unsigned __int8 *)(v277 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v277 + 80);
        v273 = (char *)v186;
        uint64_t v191 = v186 + v190;
        uint64_t v192 = *(char **)(v277 + 72);
        uint64_t v193 = *(void (**)(char *, char *, void *))(v277 + 16);
        *(void *)&uint64_t v187 = 136315138LL;
        v275 = v187;
        v274 = (char *)&type metadata for Any + 8;
        v276 = v192;
        v271 = (char *)v22;
        v193(v267, (char *)(v186 + v190), v11);
        while (1)
        {
          uint64_t v196 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter();
          if (v196)
          {
            uint64_t v197 = (void *)v196;
            Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter(v196);
            uint64_t v199 = v198;
            id v200 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v199);
            [v197 setAceId:v200];

            uint64_t v201 = (*(uint64_t (**)(char *, void *))(v277 + 8))(v189, v11);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v201);
            uint64_t v203 = *(void *)((char *)&dword_10 + (v283 & 0xFFFFFFFFFFFFFF8LL));
            uint64_t v202 = *(void *)((char *)&dword_18 + (v283 & 0xFFFFFFFFFFFFFF8LL));
            if (v203 >= v202 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v202 > 1, v203 + 1, 1LL);
            }
            uint64_t v204 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v203, v197);
            specialized Array._endMutation()(v204);
          }

          else
          {
            if (one-time initialization token for information != -1) {
              swift_once( &one-time initialization token for information,  one-time initialization function for information);
            }
            uint64_t v205 = type metadata accessor for Logger(0LL);
            __swift_project_value_buffer(v205, (uint64_t)static Logger.information);
            uint64_t v206 = v265;
            uint64_t v207 = ((uint64_t (*)(char *, char *, void *))v193)(v265, v189, v11);
            uint64_t v208 = (os_log_s *)Logger.logObject.getter(v207);
            uint64_t v209 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v208, v209))
            {
              uint64_t v210 = v193;
              uint64_t v211 = v206;
              uint64_t v212 = swift_slowAlloc(12LL, -1LL);
              uint64_t v213 = swift_slowAlloc(32LL, -1LL);
              v282 = v213;
              *(_DWORD *)uint64_t v212 = v275;
              uint64_t v214 = v261;
              v210(v261, v211, v11);
              uint64_t v215 = String.init<A>(describing:)(v214, v11);
              uint64_t v217 = v216;
              *(void *)(v212 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v215, v216, &v282);
              swift_bridgeObjectRelease(v217);
              uint64_t v194 = *(void (**)(char *, void *))(v277 + 8);
              v218 = v211;
              uint64_t v193 = v210;
              unint64_t v22 = (uint64_t)v271;
              v194(v218, v11);
              _os_log_impl( &dword_0,  v208,  v209,  "Unable to generate Ace command from builder: %s",  (uint8_t *)v212,  0xCu);
              swift_arrayDestroy(v213, 1LL, v274);
              v219 = v213;
              uint64_t v192 = v276;
              swift_slowDealloc(v219, -1LL, -1LL);
              swift_slowDealloc(v212, -1LL, -1LL);
            }

            else
            {
              uint64_t v194 = *(void (**)(char *, void *))(v277 + 8);
              v194(v206, v11);
            }

            v195 = v267;
            v194(v267, v11);
            uint64_t v189 = v195;
          }

          v191 += (unint64_t)v192;
          if (!--v188) {
            break;
          }
          v193(v189, (char *)v191, v11);
        }

        uint64_t v186 = (uint64_t)v273;
      }

      swift_bridgeObjectRelease(v186);
      goto LABEL_147;
    }

    uint64_t v62 = 0LL;
    while (1)
    {
      uint64_t v162 = specialized _ArrayBuffer._getElementSlowPath(_:)(v62, v22);
      uint64_t v163 = v62 + 1;
      if (__OFADD__(v62, 1LL)) {
        break;
      }
      uint64_t v20 = (char *)v162;
      uint64_t v164 = objc_opt_self(&OBJC_CLASS___SAInitiateHandoffOnCompanion);
      if (swift_dynamicCastObjCClass(v20, v164))
      {
        swift_bridgeObjectRelease_n(v22, 2LL);
        swift_unknownObjectRelease(v20);
        goto LABEL_103;
      }

      swift_unknownObjectRelease(v20);
      ++v62;
      if (v163 == v161) {
        goto LABEL_81;
      }
    }

    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    if (v62 < 0) {
      int v220 = v62;
    }
    else {
      int v220 = v62 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v62);
    uint64_t v63 = _CocoaArrayWrapper.endIndex.getter(v220);
  }

  if (v22 < 0) {
    v257 = v22;
  }
  else {
    v257 = v22 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain_n(v22, 2LL);
  uint64_t v161 = _CocoaArrayWrapper.endIndex.getter(v257);
  if (v161) {
    goto LABEL_71;
  }
LABEL_81:
  swift_bridgeObjectRelease_n(v22, 2LL);
LABEL_82:
  if (v51)
  {
    if (v22 < 0) {
      uint64_t v221 = v22;
    }
    else {
      uint64_t v221 = v22 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v22);
    uint64_t v63 = _CocoaArrayWrapper.endIndex.getter(v221);
    if (!v63) {
      goto LABEL_129;
    }
LABEL_84:
    if (v63 < 1)
    {
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
      goto LABEL_157;
    }

    char v168 = 0LL;
    while (1)
    {
      if ((v22 & 0xC000000000000001LL) != 0)
      {
        uint64_t v174 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v168, v22);
      }

      else
      {
        uint64_t v174 = *(void **)(v22 + 8 * v168 + 32);
        swift_unknownObjectRetain(v174, v167);
      }

      uint64_t v175 = [v174 aceId];
      if (v175)
      {
        uint64_t v176 = v175;
        char v177 = static String._unconditionallyBridgeFromObjectiveC(_:)(v175);
        uint64_t v179 = v178;
      }

      else
      {
        char v177 = 0LL;
        uint64_t v179 = 0xE000000000000000LL;
      }

      uint64_t v180 = swift_bridgeObjectRelease(v179);
      uint64_t v181 = HIBYTE(v179) & 0xF;
      if ((v179 & 0x2000000000000000LL) == 0) {
        uint64_t v181 = v177 & 0xFFFFFFFFFFFFLL;
      }
      if (v181)
      {
        uint64_t v182 = [v174 aceId];
        if (!v182)
        {
          uint64_t v173 = 0LL;
          goto LABEL_88;
        }

        uint64_t v183 = v182;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v182);
        uint64_t v172 = v184;
      }

      else
      {
        uint64_t v169 = v273;
        uint64_t v170 = UUID.init()(v180);
        UUID.uuidString.getter(v170);
        uint64_t v172 = v171;
        (*(void (**)(char *, char *))(v272 + 8))(v169, v274);
      }

      uint64_t v173 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v172);
LABEL_88:
      ++v168;
      [v174 setAceId:v173];
      swift_unknownObjectRelease(v174);

      if (v63 == v168) {
        goto LABEL_129;
      }
    }
  }

  uint64_t v63 = *(void *)((char *)&dword_10 + (v22 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(v22);
  if (v63) {
    goto LABEL_84;
  }
LABEL_129:
  swift_bridgeObjectRelease(v22);
  uint64_t v11 = [objc_allocWithZone(SAResultCallback) init];
  uint64_t v222 = v273;
  uint64_t v223 = UUID.init()(v11);
  UUID.uuidString.getter(v223);
  v225 = v224;
  v226 = *(void (**)(char *, char *))(v272 + 8);
  v226(v222, v274);
  uint64_t v227 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v225);
  [v11 setAceId:v227];

  [v11 setCode:SAResultCallbackAnySuccessCodeValue];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  int v228 = Array._bridgeToObjectiveC()().super.isa;
  [v11 setCommands:v228];

  uint64_t v62 = v275;
  uint64_t v51 = (unint64_t)v275 >> 62;
  if (!((unint64_t)v275 >> 62))
  {
    uint64_t v229 = *(void *)((char *)&dword_10 + (v275 & 0xFFFFFFFFFFFFF8LL));
    if (v229) {
      goto LABEL_131;
    }
LABEL_146:
    swift_bridgeObjectRelease(v62);
    v244 = [objc_allocWithZone(SARequestCompleted) init];
    v245 = v273;
    v246 = UUID.init()(v244);
    UUID.uuidString.getter(v246);
    v248 = v247;
    v226(v245, v274);
    v249 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v248);
    [v244 setAceId:v249];

    v250 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v251 = swift_allocObject(v250, 40LL, 7LL);
    v277 = xmmword_7D060;
    *(_OWORD *)(v251 + 16) = xmmword_7D060;
    *(void *)(v251 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v11;
    *(void *)&v283 = v251;
    specialized Array._endMutation()(v251);
    v252 = v283;
    type metadata accessor for SABaseCommand( 0LL,  (unint64_t *)&lazy cache variable for type metadata for SAResultCallback,  &OBJC_CLASS___SAResultCallback_ptr);
    v253 = v11;
    v254 = v244;
    v255 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v252);
    [v254 setCallbacks:v255];

    v256 = swift_allocObject(v250, 40LL, 7LL);
    *(_OWORD *)(v256 + 16) = v277;
    *(void *)(v256 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v254;
    *(void *)&v283 = v256;
    specialized Array._endMutation()(v256);

LABEL_147:
    v239 = v22;
LABEL_148:
    swift_bridgeObjectRelease(v239);
    return;
  }

  else {
    v243 = v275 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v275);
  uint64_t v229 = _CocoaArrayWrapper.endIndex.getter(v243);
  swift_bridgeObjectRelease(v62);
  if (!v229) {
    goto LABEL_146;
  }
LABEL_131:
  uint64_t v230 = __OFSUB__(v229, 1LL);
  uint64_t v63 = v229 - 1;
  if (v230) {
    goto LABEL_156;
  }
  if ((v62 & 0xC000000000000001LL) != 0)
  {
LABEL_157:
    swift_bridgeObjectRetain(v62);
    uint64_t v231 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v63, v62);
    swift_bridgeObjectRelease(v62);
    goto LABEL_136;
  }

  if (v63 < 0)
  {
    __break(1u);
    goto LABEL_159;
  }

  if ((unint64_t)v63 >= *(void *)((char *)&dword_10 + (v62 & 0xFFFFFFFFFFFFF8LL)))
  {
LABEL_159:
    __break(1u);
    return;
  }

  uint64_t v231 = *(id *)(v62 + 8 * v63 + 32);
LABEL_136:
  uint64_t v232 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v233 = swift_allocObject(v232, 40LL, 7LL);
  *(_OWORD *)(v233 + 16) = xmmword_7D060;
  *(void *)(v233 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v11;
  *(void *)&v283 = v233;
  specialized Array._endMutation()(v233);
  v234 = v283;
  type metadata accessor for SABaseCommand( 0LL,  (unint64_t *)&lazy cache variable for type metadata for SAResultCallback,  &OBJC_CLASS___SAResultCallback_ptr);
  v235 = v11;
  v236 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v234);
  [v231 setCallbacks:v236];

  if (!v51)
  {
    uint64_t v237 = v275;
    v238 = swift_bridgeObjectRetain(v275);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v238);
    type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SABaseCommand,  &OBJC_CLASS___SABaseCommand_ptr);

    swift_bridgeObjectRelease(v22);
    v239 = v237;
    goto LABEL_148;
  }

  v240 = v275;
  else {
    v241 = v275 & 0xFFFFFFFFFFFFFF8LL;
  }
  v242 = type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SABaseCommand,  &OBJC_CLASS___SABaseCommand_ptr);
  swift_bridgeObjectRetain(v240);
  _bridgeCocoaArray<A>(_:)(v241, v242);

  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease_n(v240, 2LL);
}

LABEL_39:
  __break(1u);
  return result;
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned PatternExecutionResult, @unowned NSError?) -> () with result type PatternExecutionResult( uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    void *v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else
  {
    **(void **)(*(void *)(v3 + 64) + 4Hasher.init(_seed:)(v3, 0LL) = a2;
    id v10 = a2;
    return swift_continuation_throwingResume(v3);
  }

uint64_t InformationFlowPlugin.deinit()
{
  return v0;
}

uint64_t InformationFlowPlugin.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t outlined destroy of DeviceState?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeviceState?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t protocol witness for PatternExecutorProtocol.execute(pattern:in:with:deviceState:) in conformance PatternExecutor( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v12 = *(int **)(**(void **)v5 + 88LL);
  unint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
  unint64_t v13 = (void *)swift_task_alloc(v12[1]);
  *(void *)(v6 + 16) = v13;
  *unint64_t v13 = v6;
  v13[1] = ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:);
  return v15(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for PatternExecutorProtocol.execute(pattern:in:with:) in conformance PatternExecutor( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v10 = *(int **)(**(void **)v4 + 80LL);
  unint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc(v10[1]);
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = protocol witness for PatternExecutorProtocol.execute(pattern:in:with:) in conformance PatternExecutor;
  return v13(a1, a2, a3, a4);
}

uint64_t type metadata accessor for PatternExecutor()
{
  return objc_opt_self(&OBJC_CLASS____TtC21InformationFlowPlugin15PatternExecutor);
}

void *ReadingFlowNL.Nodes.domain.unsafeMutableAddressor()
{
  return &static ReadingFlowNL.Nodes.domain;
}

unint64_t static ReadingFlowNL.Nodes.domain.getter()
{
  return 0xD000000000000018LL;
}

void *ReadingFlowNL.Nodes.confirmation.unsafeMutableAddressor()
{
  return &static ReadingFlowNL.Nodes.confirmation;
}

unint64_t static ReadingFlowNL.Nodes.confirmation.getter()
{
  return 0xD000000000000024LL;
}

void *ReadingFlowNL.Values.abort.unsafeMutableAddressor()
{
  return &static ReadingFlowNL.Values.abort;
}

unint64_t static ReadingFlowNL.Values.abort.getter()
{
  return 0xD000000000000031LL;
}

void *ReadingFlowNL.Values.yes.unsafeMutableAddressor()
{
  return &static ReadingFlowNL.Values.yes;
}

unint64_t static ReadingFlowNL.Values.yes.getter()
{
  return 0xD00000000000002ELL;
}

void *ReadingFlowNL.Values.no.unsafeMutableAddressor()
{
  return &static ReadingFlowNL.Values.no;
}

unint64_t static ReadingFlowNL.Values.no.getter()
{
  return 0xD00000000000002DLL;
}

ValueMetadata *type metadata accessor for ReadingFlowNL()
{
  return &type metadata for ReadingFlowNL;
}

ValueMetadata *type metadata accessor for ReadingFlowNL.Nodes()
{
  return &type metadata for ReadingFlowNL.Nodes;
}

ValueMetadata *type metadata accessor for ReadingFlowNL.Values()
{
  return &type metadata for ReadingFlowNL.Values;
}

uint64_t ShimOverrideFlow.__allocating_init(with:)(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  uint64_t v4 = v3 + OBJC_IVAR____TtC21InformationFlowPlugin16ShimOverrideFlow_exitValue;
  *(void *)(v3 + OBJC_IVAR____TtC21InformationFlowPlugin16ShimOverrideFlow_exitValue) = 0LL;
  uint64_t v5 = type metadata accessor for ShimOverrideFlow.ExitValue(0LL);
  swift_storeEnumTagMultiPayload(v4, v5, 1LL);
  uint64_t v6 = v3 + OBJC_IVAR____TtC21InformationFlowPlugin16ShimOverrideFlow_parse;
  uint64_t v7 = type metadata accessor for Parse.DirectInvocation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v6, a1, v7);
  return v3;
}

Swift::Bool __swiftcall Apple_Parsec_Siri_V2alpha_ExperienceComponent.hasComponent(component:)(Swift::String component)
{
  object = component._object;
  uint64_t countAndFlagsBits = component._countAndFlagsBits;
  uint64_t v33 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent(0LL);
  uint64_t v31 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoObjectComponent(0LL);
  uint64_t v32 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent(0LL);
  uint64_t v7 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  int64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_bridgeObjectRetain(object);
  v14._uint64_t countAndFlagsBits = countAndFlagsBits;
  v14._object = object;
  Swift::Int v15 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of ComponentID.init(rawValue:),  v14);
  uint64_t v16 = swift_bridgeObjectRelease(object);
  if (v15 == 2)
  {
    uint64_t v23 = Apple_Parsec_Siri_V2alpha_ExperienceComponent.delayedActionComponent.getter(v16);
    uint64_t v24 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter(v23);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v4, v33);
LABEL_9:
    uint64_t v27 = *(void *)(v24 + 16);
    swift_bridgeObjectRelease(v24);
    BOOL v22 = v27 == 0;
    return !v22;
  }

  if (v15 == 1)
  {
    uint64_t v25 = Apple_Parsec_Siri_V2alpha_ExperienceComponent.domainObjectComponent.getter(v16);
    Apple_Parsec_Siri_V2alpha_DomainObjectComponent.geoObjects.getter(v25);
    uint64_t v26 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v30);
    uint64_t v24 = Apple_Parsec_Siri_V2alpha_GeoObjectComponent.geoObject.getter(v26);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v6, v34);
    goto LABEL_9;
  }

  if (v15) {
    return 0;
  }
  uint64_t v17 = Apple_Parsec_Siri_V2alpha_ExperienceComponent.renderedDialog.getter(v16);
  uint64_t v18 = Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catID.getter(v17);
  unint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000LL) == 0) {
    uint64_t v21 = v18 & 0xFFFFFFFFFFFFLL;
  }
  BOOL v22 = v21 == 0;
  return !v22;
}

uint64_t ShimOverrideFlow.parse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin16ShimOverrideFlow_parse;
  uint64_t v4 = type metadata accessor for Parse.DirectInvocation(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t key path setter for ShimOverrideFlow.exitValue : ShimOverrideFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShimOverrideFlow.ExitValue(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of ShimOverrideFlow.ExitValue(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 104LL))(v6);
}

uint64_t ShimOverrideFlow.exitValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin16ShimOverrideFlow_exitValue;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return outlined init with copy of ShimOverrideFlow.ExitValue(v3, a1);
}

uint64_t ShimOverrideFlow.exitValue.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin16ShimOverrideFlow_exitValue;
  swift_beginAccess(v3, v5, 33LL, 0LL);
  outlined assign with take of ShimOverrideFlow.ExitValue(a1, v3);
  return swift_endAccess(v5);
}

uint64_t (*ShimOverrideFlow.exitValue.modify(uint64_t a1))()
{
  return InformationRoutingFlow.state.modify;
}

uint64_t ShimOverrideFlow.init(with:)(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin16ShimOverrideFlow_exitValue;
  *(void *)(v1 + OBJC_IVAR____TtC21InformationFlowPlugin16ShimOverrideFlow_exitValue) = 0LL;
  uint64_t v4 = type metadata accessor for ShimOverrideFlow.ExitValue(0LL);
  swift_storeEnumTagMultiPayload(v3, v4, 1LL);
  uint64_t v5 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin16ShimOverrideFlow_parse;
  uint64_t v6 = type metadata accessor for Parse.DirectInvocation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(v5, a1, v6);
  return v1;
}

uint64_t type metadata accessor for ShimOverrideFlow.ExitValue(uint64_t a1)
{
  return type metadata accessor for InformationRoutingFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for ShimOverrideFlow.ExitValue,  (uint64_t)&nominal type descriptor for ShimOverrideFlow.ExitValue);
}

uint64_t ShimOverrideFlow.__allocating_init()()
{
  uint64_t v1 = type metadata accessor for Parse.DirectInvocation(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Parse.DirectInvocation.init(identifier:userData:)(0xD00000000000003ELL, 0x800000000007F090LL, 0LL);
  return (*(uint64_t (**)(char *))(v0 + 120))(v3);
}

uint64_t ShimOverrideFlow.execute()(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  uint64_t v3 = type metadata accessor for ShimOverrideFlow.ExitValue(0LL);
  v2[10] = v3;
  v2[11] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Parse.PegasusResult(0LL);
  v2[12] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[13] = v5;
  v2[14] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse(0LL);
  v2[15] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[16] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[17] = swift_task_alloc(v8);
  v2[18] = swift_task_alloc(v8);
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent(0LL);
  v2[19] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[20] = v10;
  v2[21] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent(0LL);
  v2[22] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[23] = v12;
  v2[24] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent(0LL);
  v2[25] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v2[26] = v14;
  unint64_t v15 = (*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[27] = swift_task_alloc(v15);
  v2[28] = swift_task_alloc(v15);
  v2[29] = swift_task_alloc(v15);
  uint64_t v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent(0LL);
  v2[30] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v2[31] = v17;
  v2[32] = swift_task_alloc((*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(ShimOverrideFlow.execute(), 0LL, 0LL);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  const char *v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  void *ObjCClassFromMetadata;
  Class isa;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v2 = Parse.DirectInvocation.identifier.getter(a1);
  uint64_t v4 = v3;
  if (v2 == 0xD00000000000003ELL && v3 == 0x800000000007F090LL)
  {
    uint64_t v5 = swift_bridgeObjectRelease(0x800000000007F090LL);
  }

  else
  {
    uint64_t v6 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, 0xD00000000000003ELL, 0x800000000007F090LL, 0LL);
    uint64_t v5 = swift_bridgeObjectRelease(v4);
    if ((v6 & 1) == 0)
    {
      int64_t v28 = *(void *)(v1 + 80);
      uint64_t v27 = *(uint64_t **)(v1 + 88);
      uint64_t v29 = *(void *)(v1 + 72);
      uint64_t v30 = Parse.DirectInvocation.identifier.getter(v5);
      uint64_t v32 = v31;
      uint64_t v33 = lazy protocol witness table accessor for type ShimOverrideFlow.ShimError and conformance ShimOverrideFlow.ShimError();
      uint64_t v34 = swift_allocError(&type metadata for ShimOverrideFlow.ShimError, v33, 0LL, 0LL);
      *(void *)__int128 v35 = v30;
      *(void *)(v35 + 8) = v32;
      *(_BYTE *)(v35 + 16) = 0;
      *uint64_t v27 = v34;
      swift_storeEnumTagMultiPayload(v27, v28, 1LL);
      uint64_t v26 = (*(uint64_t (**)(uint64_t *))(*(void *)v29 + 104LL))(v27);
      goto LABEL_19;
    }
  }

  uint64_t v7 = Parse.DirectInvocation.userData.getter(v5);
  if (!v7)
  {
    unint64_t v15 = *(void *)(v1 + 80);
    uint64_t v16 = *(uint64_t **)(v1 + 88);
    uint64_t v17 = *(void *)(v1 + 72);
    uint64_t v25 = lazy protocol witness table accessor for type ShimOverrideFlow.ShimError and conformance ShimOverrideFlow.ShimError();
    unint64_t v19 = swift_allocError(&type metadata for ShimOverrideFlow.ShimError, v25, 0LL, 0LL);
    *(_OWORD *)unint64_t v20 = xmmword_7D1B0;
    uint64_t v24 = 1;
    goto LABEL_17;
  }

  unint64_t v8 = v7;
  if (!*(void *)(v7 + 16)
    || (uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011LL, 0x80000000000800C0LL), (v10 & 1) == 0))
  {
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0u;
    swift_bridgeObjectRelease(v8);
    goto LABEL_13;
  }

  outlined init with copy of Any(*(void *)(v8 + 56) + 32 * v9, v1 + 16);
  swift_bridgeObjectRelease(v8);
  if (!*(void *)(v1 + 40))
  {
LABEL_13:
    outlined destroy of Any?(v1 + 16, &demangling cache variable for type metadata for Any?);
    goto LABEL_14;
  }

  if ((swift_dynamicCast(v1 + 48, v1 + 16, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
LABEL_14:
    unint64_t v15 = *(void *)(v1 + 80);
    uint64_t v16 = *(uint64_t **)(v1 + 88);
    uint64_t v17 = *(void *)(v1 + 72);
    uint64_t v23 = lazy protocol witness table accessor for type ShimOverrideFlow.ShimError and conformance ShimOverrideFlow.ShimError();
    unint64_t v19 = swift_allocError(&type metadata for ShimOverrideFlow.ShimError, v23, 0LL, 0LL);
    uint64_t v21 = 0xD00000000000002DLL;
    BOOL v22 = "did not recieve expected base64Encoded String";
    goto LABEL_15;
  }

  uint64_t v11 = *(void *)(v1 + 56);
  uint64_t v12 = Data.init(base64Encoded:options:)(*(void *)(v1 + 48), v11, 0LL);
  uint64_t v14 = v13;
  swift_bridgeObjectRelease(v11);
  if (v14 >> 60 == 15)
  {
    unint64_t v15 = *(void *)(v1 + 80);
    uint64_t v16 = *(uint64_t **)(v1 + 88);
    uint64_t v17 = *(void *)(v1 + 72);
    uint64_t v18 = lazy protocol witness table accessor for type ShimOverrideFlow.ShimError and conformance ShimOverrideFlow.ShimError();
    unint64_t v19 = swift_allocError(&type metadata for ShimOverrideFlow.ShimError, v18, 0LL, 0LL);
    uint64_t v21 = 0xD000000000000022LL;
    BOOL v22 = "did not recieve expected type Data";
LABEL_15:
    *(void *)unint64_t v20 = v21;
    *(void *)(v20 + 8) = (unint64_t)(v22 - 32) | 0x8000000000000000LL;
    uint64_t v24 = 2;
LABEL_17:
    *(_BYTE *)(v20 + 16) = v24;
    *uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload(v16, v15, 1LL);
    uint64_t v26 = (*(uint64_t (**)(uint64_t *))(*(void *)v17 + 104LL))(v16);
LABEL_19:
    static ExecuteResponse.complete()(v26);
    goto LABEL_20;
  }

  uint64_t v46 = type metadata accessor for GenericExperience(0LL);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v46);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  os_log_type_t v49 = objc_msgSend(ObjCClassFromMetadata, "bs_secureDecodedFromData:", isa);

  if (v49)
  {
    uint64_t v50 = getComponent #1 (_:) in ShimOverrideFlow.execute()( 0x64657265646E6572LL,  (void *)0xEE00676F6C616944LL,  *(void *)(v1 + 232));
    uint64_t v52 = *(void *)(v1 + 224);
    uint64_t v51 = *(void *)(v1 + 232);
    uint64_t v53 = *(void *)(v1 + 200);
    NSString v54 = *(void *)(v1 + 208);
    Apple_Parsec_Siri_V2alpha_ExperienceComponent.renderedDialog.getter(v50);
    uint64_t v55 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
    v55(v51, v53);
    uint64_t v56 = getComponent #1 (_:) in ShimOverrideFlow.execute()(0xD000000000000016LL, (void *)0x800000000007F1A0LL, v52);
    uint64_t v65 = *(void *)(v1 + 216);
    uint64_t v64 = *(void *)(v1 + 224);
    uint64_t v66 = *(void *)(v1 + 200);
    Apple_Parsec_Siri_V2alpha_ExperienceComponent.delayedActionComponent.getter(v56);
    v55(v64, v66);
    uint64_t v67 = getComponent #1 (_:) in ShimOverrideFlow.execute()(0xD000000000000015LL, (void *)0x800000000007F180LL, v65);
    uint64_t v91 = *(void *)(v1 + 256);
    uint64_t v68 = *(void *)(v1 + 216);
    id v88 = *(void *)(v1 + 248);
    uint64_t v70 = *(void *)(v1 + 192);
    os_log_type_t v69 = *(void *)(v1 + 200);
    uint64_t v87 = *(void *)(v1 + 176);
    uint64_t v83 = *(void *)(v1 + 160);
    uint64_t v84 = *(void *)(v1 + 152);
    uint64_t v85 = *(void *)(v1 + 184);
    uint64_t v90 = *(void *)(v1 + 144);
    id v74 = *(void *)(v1 + 128);
    uint64_t v75 = *(void *)(v1 + 136);
    uint64_t v86 = *(void *)(v1 + 240);
    uint64_t v89 = *(void *)(v1 + 120);
    uint64_t v78 = *(void *)(v1 + 104);
    uint64_t v79 = *(void *)(v1 + 96);
    uint64_t v76 = *(void *)(v1 + 112);
    uint64_t v77 = *(void *)(v1 + 88);
    uint64_t v80 = *(void *)(v1 + 80);
    uint64_t v81 = *(void *)(v1 + 72);
    uint64_t v82 = *(void *)(v1 + 168);
    Apple_Parsec_Siri_V2alpha_ExperienceComponent.domainObjectComponent.getter(v67);
    v55(v68, v69);
    uint64_t v71 = (void *)swift_task_alloc(48LL);
    v71[2] = v91;
    v71[3] = v70;
    v71[4] = v82;
    uint64_t v72 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse);
    static Message.with(_:)( partial apply for closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:),  v71,  v89,  v72);
    swift_task_dealloc(v71);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16))(v75, v90, v89);
    Parse.PegasusResult.init(pegasusResponse:)(v75);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 16))(v77, v76, v79);
    swift_storeEnumTagMultiPayload(v77, v80, 0LL);
    uint64_t v73 = (*(uint64_t (**)(uint64_t))(*(void *)v81 + 104LL))(v77);
    static ExecuteResponse.complete()(v73);
    outlined consume of Data?(v12, v14);

    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v76, v79);
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v90, v89);
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v82, v84);
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v70, v87);
    (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v91, v86);
  }

  else
  {
    uint64_t v57 = *(void *)(v1 + 80);
    NSString v58 = *(uint64_t **)(v1 + 88);
    unint64_t v59 = *(void *)(v1 + 72);
    uint64_t v60 = lazy protocol witness table accessor for type ShimOverrideFlow.ShimError and conformance ShimOverrideFlow.ShimError();
    uint64_t v61 = swift_allocError(&type metadata for ShimOverrideFlow.ShimError, v60, 0LL, 0LL);
    *(void *)uint64_t v62 = 0xD00000000000002FLL;
    *(void *)(v62 + 8) = 0x8000000000080140LL;
    *(_BYTE *)(v62 + 16) = 2;
    uint8_t *v58 = v61;
    swift_storeEnumTagMultiPayload(v58, v57, 1LL);
    uint64_t v63 = (*(uint64_t (**)(uint64_t *))(*(void *)v59 + 104LL))(v58);
    static ExecuteResponse.complete()(v63);
    outlined consume of Data?(v12, v14);
  }

LABEL_20:
  uint64_t v36 = *(void *)(v1 + 224);
  uint64_t v37 = *(void *)(v1 + 232);
  uint64_t v38 = *(void *)(v1 + 216);
  uint64_t v39 = *(void *)(v1 + 192);
  __int128 v40 = *(void *)(v1 + 168);
  uint64_t v42 = *(void *)(v1 + 136);
  uint64_t v41 = *(void *)(v1 + 144);
  uint64_t v43 = *(void *)(v1 + 112);
  uint64_t v44 = *(void *)(v1 + 88);
  swift_task_dealloc(*(void *)(v1 + 256));
  swift_task_dealloc(v37);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t getComponent #1 (_:) in ShimOverrideFlow.execute()@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v76 = a1;
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent(0LL);
  uint64_t v70 = *(void *)(v6 - 8);
  uint64_t v71 = v6;
  __chkstk_darwin(v6);
  os_log_type_t v69 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoObjectComponent(0LL);
  uint64_t v67 = *(void *)(v8 - 8);
  uint64_t v68 = v8;
  __chkstk_darwin(v8);
  uint64_t v66 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent(0LL);
  uint64_t v64 = *(void *)(v10 - 8);
  uint64_t v65 = v10;
  __chkstk_darwin(v10);
  uint64_t v63 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent(0LL);
  uint64_t v61 = *(void *)(v12 - 8);
  uint64_t v62 = v12;
  __chkstk_darwin(v12);
  uint64_t v60 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent?);
  uint64_t v19 = __chkstk_darwin(v18);
  unint64_t v59 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = GenericExperience.components.getter(v19);
  uint64_t v22 = *(void *)(v21 + 16);
  uint64_t v58 = v21;
  if (v22)
  {
    uint64_t v56 = a3;
    uint64_t v57 = v3;
    unint64_t v23 = v21 + ((*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    uint64_t v24 = *(void *)(v15 + 72);
    uint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
    uint64_t v72 = v24;
    uint64_t v73 = v25;
    uint64_t v26 = v15;
    v25(v17, v23, v14);
    while (1)
    {
      swift_bridgeObjectRetain(a2);
      v33._uint64_t countAndFlagsBits = v76;
      v33._object = a2;
      Swift::Int v34 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of getComponent #1 (_:) in ShimOverrideFlow.execute(),  v33);
      uint64_t v35 = swift_bridgeObjectRelease(a2);
      if (v34 == 2) {
        break;
      }
      if (v34 == 1)
      {
        uint64_t v43 = v63;
        uint64_t v44 = Apple_Parsec_Siri_V2alpha_ExperienceComponent.domainObjectComponent.getter(v35);
        uint64_t v27 = v66;
        Apple_Parsec_Siri_V2alpha_DomainObjectComponent.geoObjects.getter(v44);
        BOOL v45 = v43;
        uint64_t v24 = v72;
        uint64_t v46 = (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v45, v65);
        uint64_t v29 = Apple_Parsec_Siri_V2alpha_GeoObjectComponent.geoObject.getter(v46);
        uint64_t v31 = v67;
        uint64_t v30 = v68;
LABEL_4:
        (*(void (**)(char *, uint64_t))(v31 + 8))(v27, v30);
        uint64_t v32 = *(void *)(v29 + 16);
        swift_bridgeObjectRelease(v29);
        if (v32) {
          goto LABEL_19;
        }
        goto LABEL_5;
      }

      if (!v34)
      {
        uint64_t v36 = v60;
        uint64_t v37 = Apple_Parsec_Siri_V2alpha_ExperienceComponent.renderedDialog.getter(v35);
        uint64_t v38 = Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catID.getter(v37);
        unint64_t v40 = v39;
        uint64_t v41 = v36;
        uint64_t v24 = v72;
        (*(void (**)(char *, uint64_t))(v61 + 8))(v41, v62);
        swift_bridgeObjectRelease(v40);
        if ((v40 & 0x2000000000000000LL) != 0 ? HIBYTE(v40) & 0xF : v38 & 0xFFFFFFFFFFFFLL)
        {
LABEL_19:
          uint64_t v15 = v26;
          uint64_t v48 = (uint64_t)v59;
          (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v59, v17, v14);
          uint64_t v47 = 0LL;
          a3 = v56;
          goto LABEL_20;
        }
      }

uint64_t ShimOverrideFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShimOverrideFlow(0LL);
  uint64_t v5 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type ShimOverrideFlow and conformance ShimOverrideFlow,  type metadata accessor for ShimOverrideFlow,  (uint64_t)&protocol conformance descriptor for ShimOverrideFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v5);
}

uint64_t closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v11 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction,  v10,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction);
  static Message.with(_:)( partial apply for closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:),  v15,  v7,  v11);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.setter(v9);
  uint64_t v12 = (uint64_t (*)(_BYTE *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.modify(v19);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.setter(1936744813LL, 0xE400000000000000LL);
  uint64_t v13 = v12(v19, 0LL);
  return Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.setter(v13, 1.0);
}

uint64_t closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  uint64_t v11 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ServerDrivenExperience and conformance Apple_Parsec_Siri_V2alpha_ServerDrivenExperience,  v10,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience);
  static Message.with(_:)( partial apply for closure #1 in closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:),  v13,  v7,  v11);
  return Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverDrivenExperience.setter(v9);
}

uint64_t closure #1 in closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ExperienceComponent>);
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent(0LL);
  uint64_t v8 = swift_allocObject( v6,  ((*(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL))
       + 3LL * *(void *)(*(void *)(v7 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v8 + 16) = xmmword_7D1C0;
  uint64_t v17 = a2;
  uint64_t v9 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ExperienceComponent and conformance Apple_Parsec_Siri_V2alpha_ExperienceComponent,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_ExperienceComponent);
  static Message.with(_:)( partial apply for closure #1 in closure #1 in closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:),  v16,  v7,  v9);
  uint64_t v15 = a3;
  static Message.with(_:)( partial apply for closure #2 in closure #1 in closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:),  v14,  v7,  v9);
  uint64_t v13 = a4;
  static Message.with(_:)( partial apply for closure #3 in closure #1 in closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:),  v12,  v7,  v9);
  return Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.components.setter(v8);
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)( uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(char *))
{
  uint64_t v6 = a3(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v11 - v7;
  (*(void (**)(char *, uint64_t))(v9 + 16))((char *)v11 - v7, a2);
  return a4(v8);
}

uint64_t ShimOverrideFlow.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21InformationFlowPlugin16ShimOverrideFlow_parse;
  uint64_t v2 = type metadata accessor for Parse.DirectInvocation(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  outlined destroy of ShimOverrideFlow.ExitValue(v0 + OBJC_IVAR____TtC21InformationFlowPlugin16ShimOverrideFlow_exitValue);
  return v0;
}

uint64_t ShimOverrideFlow.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21InformationFlowPlugin16ShimOverrideFlow_parse;
  uint64_t v2 = type metadata accessor for Parse.DirectInvocation(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  outlined destroy of ShimOverrideFlow.ExitValue(v0 + OBJC_IVAR____TtC21InformationFlowPlugin16ShimOverrideFlow_exitValue);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t protocol witness for Flow.on(input:) in conformance ShimOverrideFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128LL))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance ShimOverrideFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144LL))();
}

uint64_t protocol witness for Flow.execute() in conformance ShimOverrideFlow(uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 136LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return v7(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance ShimOverrideFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96LL))();
}

uint64_t outlined init with copy of ShimOverrideFlow.ExitValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShimOverrideFlow.ExitValue(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of ShimOverrideFlow.ExitValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShimOverrideFlow.ExitValue(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ShimOverrideFlow.ShimError and conformance ShimOverrideFlow.ShimError()
{
  unint64_t result = lazy protocol witness table cache variable for type ShimOverrideFlow.ShimError and conformance ShimOverrideFlow.ShimError;
  if (!lazy protocol witness table cache variable for type ShimOverrideFlow.ShimError and conformance ShimOverrideFlow.ShimError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ShimOverrideFlow.ShimError,  &type metadata for ShimOverrideFlow.ShimError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ShimOverrideFlow.ShimError and conformance ShimOverrideFlow.ShimError);
  }

  return result;
}

uint64_t partial apply for closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)( uint64_t a1)
{
  return closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)( a1,  v1[2],  v1[3],  v1[4]);
}

uint64_t type metadata accessor for ShimOverrideFlow(uint64_t a1)
{
  return type metadata accessor for InformationRoutingFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for ShimOverrideFlow,  (uint64_t)&nominal type descriptor for ShimOverrideFlow);
}

uint64_t outlined destroy of ShimOverrideFlow.ExitValue(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ShimOverrideFlow.ExitValue(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1A458(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 96LL))();
}

uint64_t ObjC metadata update function for ShimOverrideFlow()
{
  return type metadata accessor for ShimOverrideFlow(0LL);
}

uint64_t type metadata completion function for ShimOverrideFlow(uint64_t a1)
{
  uint64_t result = type metadata accessor for Parse.DirectInvocation(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for ShimOverrideFlow.ExitValue(319LL);
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      uint64_t result = swift_updateClassMetadata2(a1, 256LL, 2LL, v5, a1 + 80);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ShimOverrideFlow.ExitValue( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v11);
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v7 = *a2;
      swift_errorRetain(v7);
      *a1 = v7;
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 1LL;
    }

    else
    {
      uint64_t v12 = type metadata accessor for Parse.PegasusResult(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16LL))(a1, a2, v12);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }

  return a1;
}

uint64_t destroy for ShimOverrideFlow.ExitValue(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Parse.PegasusResult(0LL);
  return (*(uint64_t (**)(void *, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
}

void *initializeWithCopy for ShimOverrideFlow.ExitValue(void *a1, uint64_t *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    uint64_t v6 = *a2;
    swift_errorRetain(v6);
    *a1 = v6;
    uint64_t v7 = a1;
    uint64_t v8 = a3;
    uint64_t v9 = 1LL;
  }

  else
  {
    uint64_t v10 = type metadata accessor for Parse.PegasusResult(0LL);
    (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16LL))(a1, a2, v10);
    uint64_t v7 = a1;
    uint64_t v8 = a3;
    uint64_t v9 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v7, v8, v9);
  return a1;
}

uint64_t *assignWithCopy for ShimOverrideFlow.ExitValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ShimOverrideFlow.ExitValue((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v6 = *a2;
      swift_errorRetain(v6);
      *a1 = v6;
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 1LL;
    }

    else
    {
      uint64_t v10 = type metadata accessor for Parse.PegasusResult(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16LL))(a1, a2, v10);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v7, v8, v9);
  }

  return a1;
}

void *initializeWithTake for ShimOverrideFlow.ExitValue(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v6 = type metadata accessor for Parse.PegasusResult(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

void *assignWithTake for ShimOverrideFlow.ExitValue(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ShimOverrideFlow.ExitValue((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      uint64_t v6 = type metadata accessor for Parse.PegasusResult(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t type metadata completion function for ShimOverrideFlow.ExitValue(uint64_t a1)
{
  uint64_t result = type metadata accessor for Parse.PegasusResult(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "\b";
    swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v4);
    return 0LL;
  }

  return result;
}

uint64_t outlined copy of ShimOverrideFlow.ShimError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t destroy for ShimOverrideFlow.ShimError(uint64_t a1)
{
  return outlined consume of ShimOverrideFlow.ShimError(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of ShimOverrideFlow.ShimError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ShimOverrideFlow.ShimError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  outlined copy of ShimOverrideFlow.ShimError(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ShimOverrideFlow.ShimError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  outlined copy of ShimOverrideFlow.ShimError(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of ShimOverrideFlow.ShimError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ShimOverrideFlow.ShimError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of ShimOverrideFlow.ShimError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShimOverrideFlow.ShimError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ShimOverrideFlow.ShimError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 1__swift_destroy_boxed_opaque_existential_1(v0 + 7) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 1__swift_destroy_boxed_opaque_existential_1(v0 + 7) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for ShimOverrideFlow.ShimError(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for ShimOverrideFlow.ShimError(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ShimOverrideFlow.ShimError()
{
  return &type metadata for ShimOverrideFlow.ShimError;
}

uint64_t partial apply for closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)( uint64_t a1)
{
  return closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)( a1,  v1[2],  v1[3],  v1[4]);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)( uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)( a1,  v1[2],  v1[3],  v1[4]);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)( uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)( a1,  *(void *)(v1 + 16),  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent,  (uint64_t (*)(char *))&Apple_Parsec_Siri_V2alpha_ExperienceComponent.renderedDialog.setter);
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)( uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)( a1,  *(void *)(v1 + 16),  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent,  (uint64_t (*)(char *))&Apple_Parsec_Siri_V2alpha_ExperienceComponent.delayedActionComponent.setter);
}

uint64_t partial apply for closure #3 in closure #1 in closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)( uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)( a1,  *(void *)(v1 + 16),  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent,  (uint64_t (*)(char *))&Apple_Parsec_Siri_V2alpha_ExperienceComponent.domainObjectComponent.setter);
}

uint64_t WebSearchPunchoutFlow.__allocating_init(query:renderPegasusFlow:state:outputPublisher:informationViewFactory:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, __int128 *a5, uint64_t a6)
{
  char v12 = a4 & 1;
  uint64_t v13 = swift_allocObject(v6, 128LL, 7LL);
  *(void *)(v13 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a1;
  *(void *)(v13 + 80) = a2;
  outlined init with take of Flow?(a3, v13 + 88);
  *(_BYTE *)(v13 + 64) = v12;
  outlined init with take of PatternFlowProviding(a5, v13 + 16);
  *(void *)(v13 + 56) = a6;
  return v13;
}

BOOL static WebSearchPunchoutFlow.State.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void WebSearchPunchoutFlow.State.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int WebSearchPunchoutFlow.State.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance WebSearchPunchoutFlow.State( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t WebSearchPunchoutFlow.outputPublisher.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync(v1 + 16, a1);
}

uint64_t WebSearchPunchoutFlow.informationViewFactory.getter()
{
  return swift_retain(*(void *)(v0 + 56));
}

uint64_t WebSearchPunchoutFlow.state.getter()
{
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t WebSearchPunchoutFlow.state.setter(char a1)
{
  char v2 = a1 & 1;
  uint64_t result = swift_beginAccess(v1 + 64, v4, 1LL, 0LL);
  *(_BYTE *)(v1 + 64) = v2;
  return result;
}

uint64_t (*InformationViewFactory.serverFallbackPreferences.modify(uint64_t a1))()
{
  return InformationRoutingFlow.state.modify;
}

uint64_t WebSearchPunchoutFlow.init(query:renderPegasusFlow:state:outputPublisher:informationViewFactory:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, __int128 *a5, uint64_t a6)
{
  char v9 = a4 & 1;
  *(void *)(v6 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a1;
  *(void *)(v6 + 80) = a2;
  outlined init with take of Flow?(a3, v6 + 88);
  *(_BYTE *)(v6 + 64) = v9;
  outlined init with take of PatternFlowProviding(a5, v6 + 16);
  *(void *)(v6 + 56) = a6;
  return v6;
}

uint64_t outlined init with take of Flow?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Flow?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t WebSearchPunchoutFlow.on(input:)()
{
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static Logger.information);
  char v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "WebSearchPunchoutFlow does not expect input", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  return 0LL;
}

uint64_t WebSearchPunchoutFlow.execute()(uint64_t a1)
{
  v2[18] = a1;
  v2[19] = v1;
  uint64_t v3 = type metadata accessor for Date(0LL);
  v2[20] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[21] = v4;
  v2[22] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(WebSearchPunchoutFlow.execute(), 0LL, 0LL);
}

uint64_t WebSearchPunchoutFlow.execute()()
{
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  *(void *)(v0 + 184) = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "WebSearchPunchoutFlow.execute", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 152);

  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v6 + 128LL))();
  char v8 = v7;
  char v9 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  if ((v8 & 1) != 0)
  {
    if (v11)
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl(&dword_0, v9, v10, "WebSearchPunchoutFlow: renderPegasus", v21, 2u);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    uint64_t v22 = *(void *)(v0 + 152);

    outlined init with copy of Flow?(v22 + 88, v0 + 56);
    if (*(void *)(v0 + 80))
    {
      outlined init with take of PatternFlowProviding((__int128 *)(v0 + 56), v0 + 16);
      uint64_t v23 = *(void *)(v0 + 40);
      uint64_t v24 = *(void *)(v0 + 48);
      uint64_t v25 = __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v23);
      static ExecuteResponse.complete<A>(next:)(v25, v23, v24);
      __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
    }

    else
    {
      uint64_t v27 = *(void *)(v0 + 168);
      uint64_t v26 = *(void *)(v0 + 176);
      uint64_t v28 = *(void *)(v0 + 152);
      uint64_t v29 = *(void *)(v0 + 160);
      uint64_t v30 = *(void **)(v0 + 144);
      outlined destroy of Flow?(v0 + 56);
      *(void *)(v0 + 136) = v28;
      uint64_t v31 = type metadata accessor for PerformanceUtil(0LL);
      uint64_t v32 = static PerformanceUtil.shared.getter(v31);
      Swift::String v33 = (void *)swift_task_alloc(48LL);
      _OWORD v33[2] = v0 + 136;
      v33[3] = 0xD000000000000039LL;
      v33[4] = 0x80000000000801B0LL;
      Date.init()(v33);
      uint64_t v34 = type metadata accessor for ExecuteResponse(0LL);
      dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( v30,  0x72724520656B614DLL,  0xEE00776F6C46726FLL,  0LL,  v26,  "InformationFlowPlugin/FlowTrampolining.swift",  44LL,  2LL,  22LL,  "makeResponse(forErrorMessage:)",  30LL,  2,  partial apply for specialized closure #1 in FlowTrampolining.makeResponse(forErrorMessage:),  v33,  v34);
      swift_release(v32);
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v29);
      swift_task_dealloc(v33);
    }

    swift_task_dealloc(*(void *)(v0 + 176));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    if (v11)
    {
      char v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)char v12 = 0;
      _os_log_impl(&dword_0, v9, v10, "WebSearchPunchoutFlow: doWebSearchPunchout", v12, 2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    uint64_t v13 = *(void **)(v0 + 152);

    uint64_t v14 = v13[5];
    uint64_t v15 = v13[6];
    __swift_project_boxed_opaque_existential_1(v13 + 2, v14);
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v17 = swift_allocObject(v16, 40LL, 7LL);
    *(_OWORD *)(v17 + 16) = xmmword_7D060;
    id v18 = WebSearchPunchoutFlow.webSearchCommand(query:)(v13[9], v13[10]);
    *(void *)(v17 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v18;
    specialized Array._endMutation()(v18);
    memset(v35, 0, sizeof(v35));
    uint64_t v36 = 0LL;
    *(void *)(v0 + 120) = type metadata accessor for AceOutput(0LL);
    *(void *)(v0 + 128) = &protocol witness table for AceOutput;
    __swift_allocate_boxed_opaque_existential_1((void *)(v0 + 96));
    AceOutput.init(commands:flowActivity:)(v17, v35);
    uint64_t v19 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
    *(void *)(v0 + 19__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v19;
    *uint64_t v19 = v0;
    v19[1] = WebSearchPunchoutFlow.execute();
    return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 96, v14, v15);
  }

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 192);
  *(void *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    os_log_type_t v4 = WebSearchPunchoutFlow.execute();
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_1((void *)(v2 + 96));
    os_log_type_t v4 = WebSearchPunchoutFlow.execute();
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

{
  uint64_t v0;
  static ExecuteResponse.complete()();
  swift_task_dealloc(*(void *)(v0 + 176));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  os_log_s *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v1 = __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 96));
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  uint64_t v3 = static os_log_type_t.error.getter();
  os_log_type_t v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(void *)(v0 + 200);
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_0, v2, v3, "Failed to execute web search punchout.", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  swift_errorRelease(v5);

  static ExecuteResponse.complete()(v7);
  swift_task_dealloc(*(void *)(v0 + 176));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t WebSearchPunchoutFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WebSearchPunchoutFlow();
  unint64_t v5 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow();
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v5);
}

id WebSearchPunchoutFlow.webSearchCommand(query:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v8);
  os_log_type_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v11 = [objc_allocWithZone(SAUIAppPunchOut) init];
  WebSearchPunchoutFlow.googleSearchURLForQuery(_:)(a1, a2);
  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1LL, v12) != 1)
  {
    URL._bridgeToObjectiveC()(v14);
    uint64_t v15 = v16;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
  }

  [v11 setPunchOutUri:v15];

  id v17 = v11;
  uint64_t v18 = UUID.init()(v17);
  UUID.uuidString.getter(v18);
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  [v17 setAceId:v21];

  return v17;
}

uint64_t WebSearchPunchoutFlow.googleSearchURLForQuery(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  URLComponents.init()(v6);
  URLComponents.scheme.setter(0x7370747468LL, 0xE500000000000000LL);
  URLComponents.host.setter(0x676F6F672E777777LL, 0xEE006D6F632E656CLL);
  URLComponents.path.setter(0x6863726165732FLL, 0xE700000000000000LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URLQueryItem>);
  uint64_t v10 = *(void *)(type metadata accessor for URLQueryItem(0LL) - 8);
  uint64_t v11 = swift_allocObject( v9,  ((*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
        + 8LL * *(void *)(v10 + 72),
          *(unsigned __int8 *)(v10 + 80) | 7LL);
  *(_OWORD *)(v11 + 16) = xmmword_7D2E0;
  URLQueryItem.init(name:value:)(0x746E65696C63LL, 0xE600000000000000LL, 0x697261666173LL, 0xE600000000000000LL);
  URLQueryItem.init(name:value:)(1902080865LL, 0xE400000000000000LL, a1, a2);
  URLQueryItem.init(name:value:)(0x7264715F7361LL, 0xE600000000000000LL, 7105633LL, 0xE300000000000000LL);
  URLQueryItem.init(name:value:)(0x7463636F5F7361LL, 0xE700000000000000LL, 7958113LL, 0xE300000000000000LL);
  URLQueryItem.init(name:value:)(1701208435LL, 0xE400000000000000LL, 0x657669746361LL, 0xE600000000000000LL);
  URLQueryItem.init(name:value:)(0x6C656E6E616863LL, 0xE700000000000000LL, 0x62616C7061LL, 0xE500000000000000LL);
  URLQueryItem.init(name:value:)(0x656372756F73LL, 0xE600000000000000LL, 0x317070612D61LL, 0xE600000000000000LL);
  URLQueryItem.init(name:value:)(27752LL, 0xE200000000000000LL, 28261LL, 0xE200000000000000LL);
  uint64_t v12 = URLComponents.queryItems.setter(v11);
  URLComponents.url.getter(v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

void *WebSearchPunchoutFlow.deinit()
{
  return v0;
}

uint64_t WebSearchPunchoutFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 128LL, 7LL);
}

uint64_t protocol witness for Flow.on(input:) in conformance WebSearchPunchoutFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184LL))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance WebSearchPunchoutFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200LL))();
}

uint64_t protocol witness for Flow.execute() in conformance WebSearchPunchoutFlow(uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 192LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return v7(a1);
}

uint64_t protocol witness for FlowTrampolining.outputPublisher.getter in conformance WebSearchPunchoutFlow@<X0>( uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync(*v1 + 16LL, a1);
}

uint64_t protocol witness for FlowTrampolining.informationViewFactory.getter in conformance WebSearchPunchoutFlow()
{
  return swift_retain(*(void *)(*(void *)v0 + 56LL));
}

uint64_t outlined init with copy of Flow?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Flow?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Flow?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Flow?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for WebSearchPunchoutFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC21InformationFlowPlugin21WebSearchPunchoutFlow);
}

unint64_t lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow()
{
  unint64_t result = lazy protocol witness table cache variable for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow;
  if (!lazy protocol witness table cache variable for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow)
  {
    uint64_t v1 = type metadata accessor for WebSearchPunchoutFlow();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for WebSearchPunchoutFlow, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WebSearchPunchoutFlow.State and conformance WebSearchPunchoutFlow.State()
{
  unint64_t result = lazy protocol witness table cache variable for type WebSearchPunchoutFlow.State and conformance WebSearchPunchoutFlow.State;
  if (!lazy protocol witness table cache variable for type WebSearchPunchoutFlow.State and conformance WebSearchPunchoutFlow.State)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WebSearchPunchoutFlow.State,  &type metadata for WebSearchPunchoutFlow.State);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WebSearchPunchoutFlow.State and conformance WebSearchPunchoutFlow.State);
  }

  return result;
}

uint64_t sub_1BC58@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128LL))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1BC8C(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 136LL))(*a1);
}

uint64_t sub_1BCB8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 160LL))();
}

uint64_t sub_1BCE0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 168LL))();
}

uint64_t getEnumTagSinglePayload for WebSearchPunchoutFlow.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for WebSearchPunchoutFlow.State( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1BDE4 + 4 * byte_7D2F5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BE18 + 4 * byte_7D2F0[v4]))();
}

uint64_t sub_1BE18(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BE20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1BE28LL);
  }
  return result;
}

uint64_t sub_1BE34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1BE3CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1BE40(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BE48(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for WebSearchPunchoutFlow.State(_BYTE *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for WebSearchPunchoutFlow.State()
{
  return &type metadata for WebSearchPunchoutFlow.State;
}

uint64_t *SearchFlow.defaultPegasusBundleIdentifiers.unsafeMutableAddressor()
{
  if (one-time initialization token for defaultPegasusBundleIdentifiers != -1) {
    swift_once( &one-time initialization token for defaultPegasusBundleIdentifiers,  one-time initialization function for defaultPegasusBundleIdentifiers);
  }
  return &static SearchFlow.defaultPegasusBundleIdentifiers;
}

uint64_t static SearchFlow.defaultPegasusBundleIdentifiers.getter()
{
  if (one-time initialization token for defaultPegasusBundleIdentifiers != -1) {
    swift_once( &one-time initialization token for defaultPegasusBundleIdentifiers,  one-time initialization function for defaultPegasusBundleIdentifiers);
  }
  return swift_bridgeObjectRetain(static SearchFlow.defaultPegasusBundleIdentifiers);
}

void *SearchFlow.userCanceledCatId.unsafeMutableAddressor()
{
  return &static SearchFlow.userCanceledCatId;
}

void *SearchFlow.noMoreItemsCatId.unsafeMutableAddressor()
{
  return &static SearchFlow.noMoreItemsCatId;
}

void *SearchFlow.notSupportedCatId.unsafeMutableAddressor()
{
  return &static SearchFlow.notSupportedCatId;
}

unint64_t static SearchFlow.notSupportedCatId.getter()
{
  return 0xD000000000000021LL;
}

uint64_t SearchFlow.nlContextUpdate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_nlContextUpdate;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return outlined init with copy of IdentifiedUser?( v3,  a1,  &demangling cache variable for type metadata for NLContextUpdate?);
}

uint64_t SearchFlow.nlContextUpdate.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_nlContextUpdate;
  swift_beginAccess(v3, v5, 33LL, 0LL);
  outlined assign with take of NLContextUpdate?(a1, v3);
  return swift_endAccess(v5);
}

uint64_t (*SearchFlow.nlContextUpdate.modify(uint64_t a1))()
{
  return InformationRoutingFlow.state.modify;
}

uint64_t SearchFlow.targetedRequest.getter()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_targetedRequest);
  swift_beginAccess(v0 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_targetedRequest, v3, 0LL, 0LL);
  return swift_retain(*v1);
}

uint64_t SearchFlow.targetedRequest.setter(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_targetedRequest);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  uint64_t *v3 = a1;
  return swift_release(v4);
}

uint64_t (*SearchFlow.targetedRequest.modify(uint64_t a1))()
{
  return PushOffQueryFlow.targetedRequest.modify;
}

uint64_t SearchFlow.outputPublisher.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync( v1 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_outputPublisher,  a1);
}

uint64_t SearchFlow.informationViewFactory.getter()
{
  return swift_retain(*(void *)(v0 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_informationViewFactory));
}

uint64_t key path setter for SearchFlow.state : SearchFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SearchFlow.State(0LL);
  __chkstk_darwin(v4);
  unsigned int v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of InformationRoutingFlow.State(a1, (uint64_t)v6, v7);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 208LL))(v6);
}

void SearchFlow.state.didset()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SearchFlow.State(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v5, (uint64_t)static Logger.information);
  uint64_t v6 = swift_retain_n(v0, 2LL);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v7))
  {
    int v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)int v8 = 136315138;
    uint64_t v17 = v9;
    uint64_t v10 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_state;
    swift_beginAccess(v1 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_state, v16, 0LL, 0LL);
    outlined init with copy of InformationRoutingFlow.State( v10,  (uint64_t)v4,  type metadata accessor for SearchFlow.State);
    uint64_t v11 = String.init<A>(describing:)(v4, v2);
    unint64_t v13 = v12;
    uint64_t v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, v16);
    swift_bridgeObjectRelease(v13);
    swift_release_n(v1, 2LL);
    _os_log_impl(&dword_0, v14, v7, "#InformationSearchFlow transitioning to state %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_release_n(v0, 2LL);
  }
}

uint64_t SearchFlow.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_state;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return outlined init with copy of InformationRoutingFlow.State(v3, a1, type metadata accessor for SearchFlow.State);
}

uint64_t type metadata accessor for SearchFlow.State(uint64_t a1)
{
  return type metadata accessor for InformationRoutingFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for SearchFlow.State,  (uint64_t)&nominal type descriptor for SearchFlow.State);
}

uint64_t SearchFlow.state.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_state;
  swift_beginAccess(v1 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_state, v5, 33LL, 0LL);
  outlined assign with copy of SearchFlow.State(a1, v3);
  swift_endAccess(v5);
  SearchFlow.state.didset();
  return outlined destroy of InformationRoutingFlow.State(a1, type metadata accessor for SearchFlow.State);
}

uint64_t outlined assign with copy of SearchFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SearchFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

void (*SearchFlow.state.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess(v1 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_state, a1, 33LL, 0LL);
  return SearchFlow.state.modify;
}

void SearchFlow.state.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    SearchFlow.state.didset();
  }
}

uint64_t SearchFlow.exitValue.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CompositionResolutionError(0LL);
  uint64_t v25 = *(void *)(v3 - 8);
  uint64_t v26 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for SearchFlow.State(0LL);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v25 - v10;
  uint64_t v12 = type metadata accessor for RREntity(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *(void (**)(uint64_t))(*(void *)v1 + 200LL);
  v17(v14);
  if (swift_getEnumCaseMultiPayload(v11, v6) == 2)
  {
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v18(v16, v11, v12);
    v18(a1, v16, v12);
    uint64_t v19 = 0LL;
  }

  else
  {
    uint64_t v20 = outlined destroy of InformationRoutingFlow.State((uint64_t)v11, type metadata accessor for SearchFlow.State);
    v17(v20);
    if (swift_getEnumCaseMultiPayload(v9, v6) == 3)
    {
      uint64_t v21 = v26;
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
      v22(v5, v9, v26);
      v22(a1, v5, v21);
    }

    else
    {
      outlined destroy of InformationRoutingFlow.State((uint64_t)v9, type metadata accessor for SearchFlow.State);
      (*(void (**)(char *, void, uint64_t))(v25 + 104))( a1,  enum case for CompositionResolutionError.unknownError(_:),  v26);
    }

    uint64_t v19 = 1LL;
  }

  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RREntity, CompositionResolutionError>);
  return swift_storeEnumTagMultiPayload(a1, v23, v19);
}

uint64_t SearchFlow.__allocating_init(parse:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for USOParse(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  uint64_t v12 = static OutputPublisherFactory.makeOutputPublisherAsync()(&v27, v11);
  static Device.current.getter(v26, v12);
  type metadata accessor for CommonCATs(0LL);
  static CATOption.defaultMode.getter();
  uint64_t v13 = CATWrapper.__allocating_init(options:globals:)(v6, 0LL);
  uint64_t v14 = type metadata accessor for InformationViewFactory();
  uint64_t v15 = (void *)swift_allocObject(v14, 104LL, 7LL);
  id v16 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
  uint64_t v17 = type metadata accessor for PommesServerFallbackPreferences(0LL);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  uint64_t v18 = PommesServerFallbackPreferences.init(_:)(v16);
  v15[11] = v17;
  v15[12] = &protocol witness table for PommesServerFallbackPreferences;
  v15[8] = v18;
  outlined init with take of PatternFlowProviding(v26, (uint64_t)(v15 + 3));
  __int128 v15[2] = v13;
  uint64_t v19 = type metadata accessor for RenderComponentFlowFactory();
  uint64_t v20 = swift_allocObject(v19, 64LL, 7LL);
  outlined init with take of PatternFlowProviding(&v27, v20 + 16);
  *(void *)(v20 + 56) = v15;
  uint64_t v21 = type metadata accessor for PommesSearchClient(0LL);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  uint64_t v22 = PommesSearchClient.init()();
  if (v22)
  {
    *((void *)&v28 + 1) = v21;
    uint64_t v29 = &protocol witness table for PommesSearchClient;
    *(void *)&__int128 v27 = v22;
  }

  else
  {
    uint64_t v29 = 0LL;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
  }

  uint64_t v23 = (*(uint64_t (**)(char *, uint64_t, __int128 *))(v2 + 232))(v10, v20, &v27);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return v23;
}

uint64_t SearchFlow.__allocating_init(parse:renderComponentFlowFactory:pommesSearchClient:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = specialized SearchFlow.init(parse:renderComponentFlowFactory:pommesSearchClient:)(a1, a2, a3);
  swift_release(a2);
  return v7;
}

uint64_t SearchFlow.init(parse:renderComponentFlowFactory:pommesSearchClient:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = specialized SearchFlow.init(parse:renderComponentFlowFactory:pommesSearchClient:)(a1, a2, a3);
  swift_release(a2);
  return v4;
}

uint64_t SearchFlow.setState(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SearchFlow.State(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of InformationRoutingFlow.State(a1, (uint64_t)v5, v6);
  return (*(uint64_t (**)(char *))(*(void *)v1 + 208LL))(v5);
}

uint64_t SearchFlow.on(input:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Parse(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  BOOL v45 = (void **)((char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v46 = type metadata accessor for SearchFlow.State(0LL);
  uint64_t v7 = __chkstk_darwin(v46);
  uint64_t v44 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v43 = (void *)((char *)v40 - v9);
  uint64_t v10 = type metadata accessor for Input(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v14, (uint64_t)static Logger.information);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  uint64_t v15 = swift_retain_n(v1, 2LL);
  id v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc(22LL, -1LL);
    uint64_t v42 = v4;
    uint64_t v19 = v18;
    v40[0] = swift_slowAlloc(64LL, -1LL);
    uint64_t v48 = v40[0];
    *(_DWORD *)uint64_t v19 = 136315394;
    v40[1] = a1;
    uint64_t v41 = v5;
    uint64_t v20 = v43;
    (*(void (**)(void))(*(void *)v1 + 200LL))();
    uint64_t v21 = String.init<A>(describing:)(v20, v46);
    unint64_t v23 = v22;
    uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
    swift_bridgeObjectRelease(v23);
    uint64_t v24 = swift_release_n(v2, 2LL);
    *(_WORD *)(v19 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    uint64_t v25 = Input.description.getter(v24);
    unint64_t v27 = v26;
    uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v48);
    uint64_t v5 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
    swift_bridgeObjectRelease(v27);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    _os_log_impl( &dword_0,  v16,  v17,  "#InformationSearchFlow entering on with state: %s, input: %s",  (uint8_t *)v19,  0x16u);
    uint64_t v28 = v40[0];
    swift_arrayDestroy(v40[0], 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    uint64_t v29 = v19;
    uint64_t v4 = v42;
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  else
  {
    swift_release_n(v1, 2LL);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  uint64_t v30 = (uint64_t)v44;
  (*(void (**)(void))(*(void *)v2 + 200LL))();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v30, v46);
  uint64_t v32 = outlined destroy of InformationRoutingFlow.State(v30, type metadata accessor for SearchFlow.State);
  Swift::String v33 = v45;
  if (EnumCaseMultiPayload != 4) {
    return 0LL;
  }
  Input.parse.getter(v32);
  if ((*(unsigned int (**)(void **, uint64_t))(v5 + 88))(v33, v4) != enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(void **, uint64_t))(v5 + 8))(v33, v4);
    return 0LL;
  }

  (*(void (**)(void **, uint64_t))(v5 + 96))(v33, v4);
  uint64_t v34 = *v33;
  if ((specialized SearchFlow.hasDelayedAction(pommesResponse:)() & 1) == 0)
  {

    return 0LL;
  }

  uint64_t v35 = v43;
  *uint64_t v43 = v34;
  uint64_t v36 = 1LL;
  swift_storeEnumTagMultiPayload(v35, v46, 1LL);
  uint64_t v37 = *(void (**)(void *))(*(void *)v2 + 208LL);
  id v38 = v34;
  v37(v35);

  return v36;
}

uint64_t SearchFlow.execute()(uint64_t a1)
{
  v2[13] = a1;
  v2[14] = v1;
  uint64_t v3 = type metadata accessor for USOParse(0LL);
  v2[15] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[16] = v4;
  v2[17] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for SearchFlow.State(0LL);
  v2[18] = v5;
  unint64_t v6 = (*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[19] = swift_task_alloc(v6);
  v2[20] = swift_task_alloc(v6);
  return swift_task_switch(SearchFlow.execute(), 0LL, 0LL);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 192);
  *(void *)(*v2 + 200) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    unint64_t v6 = SearchFlow.execute();
  }

  else
  {
    *(void *)(v4 + 208) = a1;
    unint64_t v6 = SearchFlow.execute();
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

void SearchFlow.execute()()
{
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = v0[14];
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v0[21] = __swift_project_value_buffer(v2, (uint64_t)static Logger.information);
  uint64_t v3 = swift_retain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = v0[20];
    uint64_t v7 = v0[18];
    uint64_t v8 = v0[14];
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v10 = v19;
    *(_DWORD *)uint64_t v9 = 136315138;
    (*(void (**)(void))(*(void *)v8 + 200LL))();
    uint64_t v11 = String.init<A>(describing:)(v6, v7);
    unint64_t v13 = v12;
    v0[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 12, v0 + 13);
    swift_release_n(v8, 2LL);
    swift_bridgeObjectRelease(v13);
    _os_log_impl(&dword_0, v4, v5, "#InformationSearchFlow entering execute with state: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    uint64_t v15 = v0[14];

    uint64_t v14 = swift_release_n(v15, 2LL);
  }

  uint64_t v17 = v0[18];
  uint64_t v16 = v0[19];
  (*(void (**)(uint64_t))(*(void *)v0[14] + 200LL))(v14);
  uint64_t v18 = (char *)&loc_1D15C + 4 * aC_0[swift_getEnumCaseMultiPayload(v16, v17)];
  __asm { BR              X10 }

uint64_t SearchFlow.execute()()
{
  uint64_t v1 = (void *)v0[26];
  uint64_t v2 = (void (*)(void *))v0[22];
  uint64_t v3 = (void *)v0[20];
  uint64_t v4 = v0[18];
  uint64_t v5 = v0[14];
  __swift_destroy_boxed_opaque_existential_1(v0 + 2);
  void *v3 = v1;
  swift_storeEnumTagMultiPayload(v3, v4, 1LL);
  id v6 = v1;
  v2(v3);
  uint64_t v7 = *(int **)(*(void *)v5 + 272LL);
  uint64_t v10 = (int *)((char *)v7 + *v7);
  uint64_t v8 = (void *)swift_task_alloc(v7[1]);
  v0[27] = v8;
  *uint64_t v8 = v0;
  v8[1] = SearchFlow.execute();
  return ((uint64_t (*)(void, void))v10)(v0[13], v0[26]);
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 216LL));
  return swift_task_switch(SearchFlow.execute(), 0LL, 0LL);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v1 = *(void **)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 120);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v5 = *(void *)(v0 + 152);
  id v6 = *(void *)(v0 + 136);
  swift_task_dealloc(*(void *)(v0 + 160));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 232LL));
  return swift_task_switch(SearchFlow.execute(), 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 136);
  swift_task_dealloc(*(void *)(v0 + 160));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v1 = *(void *)(v0 + 200);

  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  uint64_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 200);
    id v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v24 = v7;
    *(_DWORD *)id v6 = 136315138;
    swift_getErrorValue(v5, v0 + 80, v0 + 56);
    uint64_t v8 = Error.localizedDescription.getter(*(void *)(v0 + 64), *(void *)(v0 + 72));
    uint64_t v10 = v9;
    *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl(&dword_0, v3, v4, "#InformationSearchFlow requestInfiEntityResolution call has an error %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    swift_errorRelease(v5);
  }

  else
  {
    uint64_t v11 = *(void *)(v0 + 200);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  unint64_t v12 = *(uint64_t (**)(uint64_t))(v0 + 176);
  unint64_t v13 = *(void *)(v0 + 160);
  uint64_t v15 = *(void *)(v0 + 136);
  uint64_t v14 = *(void *)(v0 + 144);
  uint64_t v16 = *(void *)(v0 + 120);
  uint64_t v17 = *(void *)(v0 + 128);
  uint64_t v18 = enum case for CompositionResolutionError.searchFlowExecutionError(_:);
  uint64_t v19 = type metadata accessor for CompositionResolutionError(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104LL))(v13, v18, v19);
  swift_storeEnumTagMultiPayload(v13, v14, 3LL);
  uint64_t v20 = v12(v13);
  static ExecuteResponse.complete()(v20);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  uint64_t v21 = *(void *)(v0 + 152);
  unint64_t v22 = *(void *)(v0 + 136);
  swift_task_dealloc(*(void *)(v0 + 160));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SearchFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SearchFlow(0LL);
  uint64_t v5 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type SearchFlow and conformance SearchFlow,  type metadata accessor for SearchFlow,  (uint64_t)&protocol conformance descriptor for SearchFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v5);
}

uint64_t SearchFlow.handlePommesResponse(_:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  v3[6] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for RREntity(0LL);
  v3[7] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[8] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  void v3[9] = swift_task_alloc(v7);
  v3[10] = swift_task_alloc(v7);
  v3[11] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity(0LL);
  v3[12] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[13] = v9;
  v3[14] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SearchFlow.State(0LL);
  v3[15] = v10;
  v3[16] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(SearchFlow.handlePommesResponse(_:), 0LL, 0LL);
}

uint64_t SearchFlow.handlePommesResponse(_:)()
{
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "#InformationSearchFlow going to handlePommesResponse...", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 32);

  if ((specialized SearchFlow.supportedOnDevice(pommesResponse:)(v6) & 1) == 0)
  {
    uint64_t v8 = *(void *)(v0 + 120);
    uint64_t v9 = *(void *)(v0 + 128);
    uint64_t v10 = *(void *)(v0 + 40);
    uint64_t v11 = (unsigned int *)&enum case for CompositionResolutionError.featureDisabled(_:);
    goto LABEL_9;
  }

  uint64_t v7 = specialized SearchFlow.isUserCanceled(pommesResponse:)(*(void *)(v0 + 32));
  if ((v7 & 1) != 0)
  {
    uint64_t v8 = *(void *)(v0 + 120);
    uint64_t v9 = *(void *)(v0 + 128);
    uint64_t v10 = *(void *)(v0 + 40);
    uint64_t v11 = (unsigned int *)&enum case for CompositionResolutionError.userCanceled(_:);
LABEL_9:
    uint64_t v12 = *v11;
    uint64_t v13 = type metadata accessor for CompositionResolutionError(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104LL))(v9, v12, v13);
    swift_storeEnumTagMultiPayload(v9, v8, 3LL);
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 208LL))(v9);
LABEL_10:
    static ExecuteResponse.complete()(v14);
LABEL_11:
    uint64_t v15 = *(void *)(v0 + 112);
    uint64_t v17 = *(void *)(v0 + 80);
    uint64_t v16 = *(void *)(v0 + 88);
    uint64_t v18 = *(void *)(v0 + 72);
    uint64_t v19 = *(void *)(v0 + 48);
    swift_task_dealloc(*(void *)(v0 + 128));
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v21 = dispatch thunk of PommesResponse.experiences.getter(v7);
  uint64_t v22 = specialized Sequence.flatMap<A>(_:)(v21);
  swift_bridgeObjectRelease(v21);
  uint64_t v23 = *(void *)(v22 + 16);
  if (v23)
  {
    uint64_t v67 = v22;
    uint64_t v24 = *(void *)(v0 + 104);
    uint64_t v25 = *(void *)(v0 + 64);
    unint64_t v26 = v22 + ((*(unsigned __int8 *)(v24 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
    uint64_t v68 = *(void (**)(uint64_t, unint64_t, uint64_t))(v24 + 16);
    uint64_t v69 = *(void *)(v24 + 72);
    swift_bridgeObjectRetain(v22);
    unint64_t v27 = (char *)_swiftEmptyArrayStorage;
    do
    {
      uint64_t v28 = *(void *)(v0 + 112);
      uint64_t v29 = *(void *)(v0 + 96);
      uint64_t v31 = *(void *)(v0 + 48);
      uint64_t v30 = *(void *)(v0 + 56);
      v68(v28, v26, v29);
      Apple_Parsec_Siri_Context_ResultEntity.toRREntity()(v31);
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v28, v29);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v31, 1LL, v30) == 1)
      {
        outlined destroy of Any?(*(void *)(v0 + 48), &demangling cache variable for type metadata for RREntity?);
      }

      else
      {
        Swift::String v33 = *(char **)(v0 + 80);
        uint64_t v32 = *(char **)(v0 + 88);
        uint64_t v34 = *(void *)(v0 + 56);
        uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
        v35(v32, *(char **)(v0 + 48), v34);
        v35(v33, v32, v34);
        if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0) {
          unint64_t v27 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *((void *)v27 + 2) + 1LL,  1,  (unint64_t)v27,  &demangling cache variable for type metadata for _ContiguousArrayStorage<RREntity>,  (uint64_t (*)(void))&type metadata accessor for RREntity);
        }
        unint64_t v37 = *((void *)v27 + 2);
        unint64_t v36 = *((void *)v27 + 3);
        if (v37 >= v36 >> 1) {
          unint64_t v27 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v36 > 1,  v37 + 1,  1,  (unint64_t)v27,  &demangling cache variable for type metadata for _ContiguousArrayStorage<RREntity>,  (uint64_t (*)(void))&type metadata accessor for RREntity);
        }
        id v38 = *(char **)(v0 + 80);
        uint64_t v39 = *(void *)(v0 + 56);
        *((void *)v27 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v37 + 1;
        v35( &v27[((*(unsigned __int8 *)(v25 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))
             + *(void *)(v25 + 72) * v37],
          v38,
          v39);
      }

      v26 += v69;
      --v23;
    }

    while (v23);
    swift_bridgeObjectRelease_n(v67, 2LL);
  }

  else
  {
    swift_bridgeObjectRelease(v22);
    unint64_t v27 = (char *)_swiftEmptyArrayStorage;
  }

  *(void *)(v0 + 136) = v27;
  uint64_t v40 = swift_bridgeObjectRetain(v27);
  uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
  os_log_type_t v42 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v43 = 134217984;
    *(void *)(v0 + 16) = *((void *)v27 + 2);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    swift_bridgeObjectRelease(v27);
    _os_log_impl(&dword_0, v41, v42, "#InformationSearchFlow extracted %ld rrEntities", v43, 0xCu);
    swift_slowDealloc(v43, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease(v27);
  }

  uint64_t v44 = dispatch thunk of PommesResponse.primaryPluginIdentifier()();
  if (v45)
  {
    uint64_t v46 = v44;
    uint64_t v47 = v45;
    if (one-time initialization token for defaultPegasusBundleIdentifiers != -1) {
      swift_once( &one-time initialization token for defaultPegasusBundleIdentifiers,  one-time initialization function for defaultPegasusBundleIdentifiers);
    }
    char v48 = specialized Sequence<>.contains(_:)(v46, v47, (void *)static SearchFlow.defaultPegasusBundleIdentifiers);
    uint64_t v44 = swift_bridgeObjectRelease(v47);
    if ((v48 & 1) == 0)
    {
      unint64_t v50 = *((void *)v27 + 2);
      if (v50 >= 2)
      {
        uint64_t v51 = *(void *)(v0 + 32);
        swift_bridgeObjectRelease(v27);
        SearchFlow.handleClientDrivenExperience(pommesResponse:)(v51);
        goto LABEL_11;
      }

      goto LABEL_36;
    }
  }

  if ((dispatch thunk of PommesResponse.listenAfterSpeaking.getter(v44) & 1) == 0)
  {
    unint64_t v50 = *((void *)v27 + 2);
LABEL_36:
    if (v50 == 1)
    {
      uint64_t v56 = *(char **)(v0 + 128);
      uint64_t v70 = *(void *)(v0 + 120);
      uint64_t v58 = *(void *)(v0 + 64);
      uint64_t v57 = *(char **)(v0 + 72);
      uint64_t v59 = *(void *)(v0 + 56);
      uint64_t v60 = *(void *)(v0 + 40);
      uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
      v61(v57, &v27[(*(unsigned __int8 *)(v58 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80)], v59);
      uint64_t v62 = dispatch thunk of ReferenceResolutionClient.siriMentioned(entities:)(v27);
      char v64 = v63;
      swift_bridgeObjectRelease(v27);
      outlined consume of Result<(), Error>(v62, v64 & 1);
      v61(v56, v57, v59);
      swift_storeEnumTagMultiPayload(v56, v70, 2LL);
      (*(void (**)(char *))(*(void *)v60 + 208LL))(v56);
      uint64_t v14 = (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v57, v59);
    }

    else
    {
      uint64_t v52 = *(void *)(v0 + 120);
      uint64_t v53 = *(void *)(v0 + 128);
      uint64_t v54 = *(void *)(v0 + 40);
      if (v50)
      {
        swift_bridgeObjectRelease(v27);
        uint64_t v55 = (unsigned int *)&enum case for CompositionResolutionError.invalidState(_:);
      }

      else
      {
        swift_bridgeObjectRelease(v27);
        uint64_t v55 = (unsigned int *)&enum case for CompositionResolutionError.noSearchResult(_:);
      }

      uint64_t v65 = *v55;
      uint64_t v66 = type metadata accessor for CompositionResolutionError(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 104LL))(v53, v65, v66);
      swift_storeEnumTagMultiPayload(v53, v52, 3LL);
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v54 + 208LL))(v53);
    }

    goto LABEL_10;
  }

  Swift::String v49 = (void *)swift_task_alloc(dword_A1DD4);
  *(void *)(v0 + 144) = v49;
  *Swift::String v49 = v0;
  v49[1] = SearchFlow.handlePommesResponse(_:);
  return SearchFlow.handleServerDrivenExperience(pommesResponse:rrEntities:)( *(void *)(v0 + 24),  *(void *)(v0 + 32),  (uint64_t)v27);
}

{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = *(void *)(*v0 + 136);
  uint64_t v10 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 144));
  swift_bridgeObjectRelease(v2);
  uint64_t v3 = v1[16];
  os_log_type_t v4 = v1[14];
  uint64_t v6 = v1[10];
  uint64_t v5 = v1[11];
  uint64_t v7 = v1[9];
  uint64_t v8 = v1[6];
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t specialized Sequence.flatMap<A>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a1);
LABEL_3:
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v4 = 4LL;
    do
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, a1);
      }
      else {
        id v5 = *(id *)(a1 + 8 * v4);
      }
      uint64_t v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1LL))
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        if (a1 < 0) {
          uint64_t v29 = a1;
        }
        else {
          uint64_t v29 = a1 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(a1);
        uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v29);
        goto LABEL_3;
      }

      uint64_t v8 = dispatch thunk of Experience.associatedEntities.getter();

      uint64_t v9 = *(void *)(v8 + 16);
      int64_t v10 = v3[2];
      int64_t v11 = v10 + v9;
      if (__OFADD__(v10, v9)) {
        goto LABEL_31;
      }
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
      if (isUniquelyReferenced_nonNull_native && v11 <= v3[3] >> 1)
      {
        if (*(void *)(v8 + 16)) {
          goto LABEL_20;
        }
      }

      else
      {
        if (v10 <= v11) {
          int64_t v13 = v10 + v9;
        }
        else {
          int64_t v13 = v10;
        }
        uint64_t v3 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v13,  1,  (unint64_t)v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_ResultEntity>,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity);
        if (*(void *)(v8 + 16))
        {
LABEL_20:
          uint64_t v14 = v3[2];
          uint64_t v15 = (v3[3] >> 1) - v14;
          uint64_t v16 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity(0LL);
          if (v15 < v9) {
            goto LABEL_33;
          }
          uint64_t v17 = *(void *)(v16 - 8);
          unint64_t v18 = (*(unsigned __int8 *)(v17 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
          uint64_t v19 = *(void *)(v17 + 72);
          uint64_t v20 = (char *)v3 + v18 + v19 * v14;
          unint64_t v21 = v8 + v18;
          uint64_t v22 = v19 * v9;
          uint64_t v23 = &v20[v22];
          unint64_t v24 = v21 + v22;
          if (v21 < (unint64_t)v23 && (unint64_t)v20 < v24)
          {
            char v31 = 2;
            uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v31,  1092LL,  0);
            __break(1u);
            return result;
          }

          swift_arrayInitWithCopy(v20);
          if (v9)
          {
            uint64_t v26 = v3[2];
            BOOL v27 = __OFADD__(v26, v9);
            uint64_t v28 = v26 + v9;
            if (v27) {
              goto LABEL_34;
            }
            v3[2] = v28;
          }

          goto LABEL_6;
        }
      }

      if (v9) {
        goto LABEL_32;
      }
LABEL_6:
      swift_bridgeObjectRelease(v8);
      ++v4;
    }

    while (v7 != v2);
  }

  swift_bridgeObjectRelease(a1);
  return (uint64_t)v3;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  int isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  char v31;
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a1);
  while (v2)
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
    uint64_t v4 = 4LL;
    while (1)
    {
      id v5 = (a1 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, a1)
         : *(id *)(a1 + 8 * v4);
      uint64_t v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1LL)) {
        break;
      }
      uint64_t v8 = dispatch thunk of Experience.associatedEntities.getter();

      uint64_t v9 = *(void *)(v8 + 16);
      int64_t v10 = v3[2];
      int64_t v11 = v10 + v9;
      if (__OFADD__(v10, v9)) {
        goto LABEL_29;
      }
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
      if (isUniquelyReferenced_nonNull_native && v11 <= v3[3] >> 1)
      {
        if (*(void *)(v8 + 16)) {
          goto LABEL_19;
        }
      }

      else
      {
        if (v10 <= v11) {
          int64_t v13 = v10 + v9;
        }
        else {
          int64_t v13 = v10;
        }
        uint64_t v3 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v13,  1,  (unint64_t)v3);
        if (*(void *)(v8 + 16))
        {
LABEL_19:
          uint64_t v14 = v3[2];
          uint64_t v15 = (v3[3] >> 1) - v14;
          uint64_t v16 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity(0LL);
          if (v15 < v9) {
            goto LABEL_31;
          }
          uint64_t v17 = *(void *)(v16 - 8);
          unint64_t v18 = (*(unsigned __int8 *)(v17 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
          uint64_t v19 = *(void *)(v17 + 72);
          uint64_t v20 = (char *)v3 + v18 + v19 * v14;
          unint64_t v21 = v8 + v18;
          uint64_t v22 = v19 * v9;
          uint64_t v23 = &v20[v22];
          unint64_t v24 = v21 + v22;
          if (v21 < (unint64_t)v23 && (unint64_t)v20 < v24)
          {
            char v31 = 2;
            uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v31,  1092LL,  0);
            __break(1u);
            return result;
          }

          swift_arrayInitWithCopy(v20);
          if (v9)
          {
            uint64_t v26 = v3[2];
            BOOL v27 = __OFADD__(v26, v9);
            uint64_t v28 = v26 + v9;
            if (v27) {
              goto LABEL_32;
            }
            v3[2] = v28;
          }

          goto LABEL_5;
        }
      }

      if (v9) {
        goto LABEL_30;
      }
LABEL_5:
      swift_bridgeObjectRelease(v8);
      ++v4;
      if (v7 == v2) {
        goto LABEL_38;
      }
    }

    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    if (a1 < 0) {
      uint64_t v29 = a1;
    }
    else {
      uint64_t v29 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v29);
  }

  uint64_t v3 = _swiftEmptyArrayStorage;
LABEL_38:
  swift_bridgeObjectRelease(a1);
  return (uint64_t)v3;
}

uint64_t Apple_Parsec_Siri_Context_ResultEntity.toRREntity()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v64 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?);
  __chkstk_darwin(v2);
  uint64_t v62 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Typespb_Domain(0LL);
  uint64_t v60 = *(void *)(v4 - 8);
  uint64_t v61 = v4;
  __chkstk_darwin(v4);
  uint64_t v59 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for GroupIdentifier(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for BinaryDecodingOptions(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Siri_Nlu_External_UsoGraph(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v63 = v1;
  uint64_t v18 = Apple_Parsec_Siri_Context_ResultEntity.usoEntity.getter(v15);
  uint64_t v20 = v19;
  uint64_t v66 = 0LL;
  memset(v65, 0, sizeof(v65));
  BinaryDecodingOptions.init()(v18);
  uint64_t v21 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph,  (uint64_t (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_UsoGraph,  (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_UsoGraph);
  Message.init(serializedData:extensions:partial:options:)(v18, v20, v65, 0LL, v12, v13, v21);
  uint64_t v57 = v7;
  uint64_t v58 = v14;
  uint64_t v29 = static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)(v17, 0LL);
  uint64_t v30 = static UsoConversionUtils.extractFirstEntityFromGraph(graph:)();
  uint64_t v56 = v30;
  if (v30)
  {
    uint64_t v55 = v17;
    uint64_t v31 = Apple_Parsec_Siri_Context_ResultEntity.groupID.getter();
    uint64_t v32 = v13;
    uint64_t v34 = v33;
    unsigned int v35 = Apple_Parsec_Siri_Context_ResultEntity.groupSequenceNumber.getter();
    unint64_t v36 = v9;
    uint64_t v37 = GroupIdentifier.init(id:seq:)(v31, v34, v35);
    uint64_t v38 = Apple_Parsec_Siri_Context_ResultEntity.id.getter(v37);
    uint64_t v54 = v39;
    *(void *)&v65[0] = 0LL;
    *((void *)&v65[0] + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(20LL);
    v40._object = (void *)0x8000000000080290LL;
    v40._uint64_t countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v40);
    uint64_t v41 = v59;
    Apple_Parsec_Siri_Context_ResultEntity.domain.getter();
    uint64_t v42 = v61;
    _print_unlocked<A, B>(_:_:)( v41,  v65,  v61,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v41, v42);
    __int128 v43 = v65[0];
    uint64_t v44 = v57;
    uint64_t v45 = v62;
    (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v62, v36, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v45, 0LL, 1LL, v6);
    uint64_t v53 = v45;
    uint64_t v46 = v64;
    RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)( v38,  v54,  v43,  *((void *)&v43 + 1),  v56,  0LL,  0LL,  0LL,  0xF000000000000000LL,  v53);
    swift_release(v29);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v36, v6);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v55, v32);
    uint64_t v47 = type metadata accessor for RREntity(0LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56LL))( v46,  0LL,  1LL,  v47);
  }

  else
  {
    uint64_t v48 = type metadata accessor for CompositionResolutionError(0LL);
    uint64_t v49 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type CompositionResolutionError and conformance CompositionResolutionError,  (uint64_t (*)(uint64_t))&type metadata accessor for CompositionResolutionError,  (uint64_t)&protocol conformance descriptor for CompositionResolutionError);
    uint64_t v50 = swift_allocError(v48, v49, 0LL, 0LL);
    uint64_t v52 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v48 - 8) + 104LL))( v51,  enum case for CompositionResolutionError.usoError(_:),  v48);
    swift_willThrow(v52);
    swift_release(v29);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v17, v13);
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.information);
    unint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl( &dword_0,  v24,  v25,  "#InformationSearchFlow failed to convert ContextResultEntity to RREntity",  v26,  2u);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    swift_errorRelease(v50);

    uint64_t v27 = type metadata accessor for RREntity(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))( v64,  1LL,  1LL,  v27);
  }

uint64_t SearchFlow.buildPommesSearchRequest(parse:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v215 = a1;
  uint64_t v3 = type metadata accessor for DeviceRestrictions(0LL);
  uint64_t v212 = *(void *)(v3 - 8);
  uint64_t v213 = v3;
  __chkstk_darwin(v3);
  uint64_t v211 = (char *)&v181 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v210 = type metadata accessor for InputOrigin(0LL);
  uint64_t v208 = *(void *)(v210 - 8);
  uint64_t v5 = __chkstk_darwin(v210);
  uint64_t v197 = (char *)&v181 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v209 = (char *)&v181 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v207 = (char *)&v181 - v10;
  __chkstk_darwin(v9);
  uint64_t v216 = (char *)&v181 - v11;
  uint64_t v206 = type metadata accessor for ResponseMode(0LL);
  uint64_t v205 = *(void *)(v206 - 8);
  __chkstk_darwin(v206);
  uint64_t v204 = (char *)&v181 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  __chkstk_darwin(v13);
  uint64_t v203 = (char *)&v181 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioSource?);
  __chkstk_darwin(v15);
  uint64_t v202 = (char *)&v181 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for MultiUserState(0LL);
  __chkstk_darwin(v17);
  uint64_t v201 = (char *)&v181 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v199 = type metadata accessor for ParseStateXPC(0LL);
  uint64_t v198 = *(void *)(v199 - 8);
  __chkstk_darwin(v199);
  id v200 = (uint64_t *)((char *)&v181 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v20 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v220 = *(void *)(v20 - 8);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v181 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v221 = (char *)&v181 - v24;
  uint64_t v218 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v214 = *(void *)(v218 - 8);
  uint64_t v25 = __chkstk_darwin(v218);
  uint64_t v217 = (char *)&v181 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v181 - v27;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v181 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)&v181 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = type metadata accessor for PommesContext(0LL);
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = __chkstk_darwin(v35);
  v219 = (char *)&v181 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 176LL))(v37);
  if (v39)
  {
    uint64_t v40 = v39;
  }

  else
  {
    uint64_t v41 = type metadata accessor for SiriEnvironment(0LL);
    uint64_t v42 = static SiriEnvironment.default.getter(v41);
    uint64_t v40 = SiriEnvironment.currentRequest.getter();
    swift_release(v42);
  }

  (*(void (**)(void))(*(void *)v2 + 152LL))();
  uint64_t v43 = type metadata accessor for NLContextUpdate(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v43 - 8) + 48LL))(v31, 1LL, v43))
  {
    outlined destroy of Any?((uint64_t)v31, &demangling cache variable for type metadata for NLContextUpdate?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56))(v34, 1LL, 1LL, v35);
LABEL_7:
    outlined destroy of Any?((uint64_t)v34, &demangling cache variable for type metadata for PommesContext?);
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v44 = type metadata accessor for Logger(0LL);
    uint64_t v45 = __swift_project_value_buffer(v44, (uint64_t)static Logger.information);
    uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v48 = 0;
      _os_log_impl( &dword_0,  v46,  v47,  "#InformationSearchFlow PommesContext is not available, cannot construct PommesSearchRequestXPC",  v48,  2u);
      swift_slowDealloc(v48, -1LL, -1LL);
    }

    swift_release(v40);
    return 0LL;
  }

  NLContextUpdate.pommesContext.getter();
  outlined destroy of Any?((uint64_t)v31, &demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v51 = v219;
  uint64_t v52 = (*(uint64_t (**)(char *, char *, uint64_t))(v36 + 32))(v219, v34, v35);
  uint64_t v53 = PommesContext.domain.getter(v52);
  if (!v54)
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v77 = type metadata accessor for Logger(0LL);
    uint64_t v78 = __swift_project_value_buffer(v77, (uint64_t)static Logger.information);
    uint64_t v79 = (os_log_s *)Logger.logObject.getter(v78);
    os_log_type_t v80 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v79, v80)) {
      goto LABEL_40;
    }
    uint64_t v81 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v81 = 0;
    uint64_t v82 = "#InformationSearchFlow domain is not available, cannot construct PommesSearchRequestXPC";
    goto LABEL_39;
  }

  uint64_t v55 = v54;
  uint64_t v193 = v53;
  uint64_t v56 = CurrentRequest.executionRequestId.getter();
  if (!v57)
  {
LABEL_35:
    swift_bridgeObjectRelease(v55);
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v86 = type metadata accessor for Logger(0LL);
    uint64_t v87 = __swift_project_value_buffer(v86, (uint64_t)static Logger.information);
    uint64_t v79 = (os_log_s *)Logger.logObject.getter(v87);
    os_log_type_t v80 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v79, v80)) {
      goto LABEL_40;
    }
    uint64_t v81 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v81 = 0;
    uint64_t v82 = "#InformationSearchFlow utterance is not available, cannot construct PommesSearchRequestXPC";
LABEL_39:
    _os_log_impl(&dword_0, v79, v80, v82, v81, 2u);
    swift_slowDealloc(v81, -1LL, -1LL);
LABEL_40:

    swift_release(v40);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v51, v35);
    return 0LL;
  }

  uint64_t v58 = v57;
  uint64_t v192 = v56;
  uint64_t v59 = CurrentRequest.resultCandidateId.getter();
  if (!v60)
  {
    swift_bridgeObjectRelease(v58);
    swift_bridgeObjectRelease(v55);
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v83 = type metadata accessor for Logger(0LL);
    uint64_t v84 = __swift_project_value_buffer(v83, (uint64_t)static Logger.information);
    uint64_t v79 = (os_log_s *)Logger.logObject.getter(v84);
    os_log_type_t v80 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v79, v80)) {
      goto LABEL_40;
    }
    uint64_t v81 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v81 = 0;
    uint64_t v82 = "#InformationSearchFlow resultCandidateId is not available, cannot construct PommesSearchRequestXPC";
    goto LABEL_39;
  }

  uint64_t v190 = v59;
  uint64_t v191 = v60;
  uint64_t v61 = CurrentRequest.utterance.getter();
  if (!v62)
  {
    swift_bridgeObjectRelease(v191);
    swift_bridgeObjectRelease(v58);
    goto LABEL_35;
  }

  uint64_t v184 = v62;
  uint64_t v185 = v61;
  uint64_t v186 = v58;
  uint64_t v189 = v35;
  uint64_t v63 = USOParse.userParse.getter(v61);
  uint64_t v64 = Siri_Nlu_External_UserParse.userDialogActs.getter(v63);
  uint64_t v187 = *(void (**)(char *, uint64_t))(v214 + 8);
  v187(v28, v218);
  int64_t v65 = *(void *)(v64 + 16);
  uint64_t v188 = v36;
  if (v65)
  {
    uint64_t v182 = v55;
    uint64_t v183 = v40;
    v226 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v65, 0);
    uint64_t v66 = v220;
    unint64_t v67 = (*(unsigned __int8 *)(v66 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
    uint64_t v181 = v64;
    unint64_t v196 = v67;
    unint64_t v68 = v64 + v67;
    uint64_t v195 = *(void *)(v220 + 72);
    uint64_t v194 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v220 + 16);
    do
    {
      uint64_t v69 = v194(v23, v68, v20);
      __chkstk_darwin(v69);
      uint64_t v179 = v23;
      uint64_t v70 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct,  (uint64_t (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_UserDialogAct,  (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_UserDialogAct);
      static Message.with(_:)( partial apply for closure #1 in closure #1 in SearchFlow.buildPommesSearchRequest(parse:),  &v181 - 4,  v20,  v70);
      (*(void (**)(char *, uint64_t))(v66 + 8))(v23, v20);
      uint64_t v71 = v226;
      if ((swift_isUniquelyReferenced_nonNull_native(v226) & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v71[2] + 1LL, 1);
        uint64_t v71 = v226;
      }

      unint64_t v73 = v71[2];
      unint64_t v72 = v71[3];
      uint64_t v74 = v221;
      if (v73 >= v72 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v72 > 1, v73 + 1, 1);
        uint64_t v74 = v221;
        uint64_t v71 = v226;
      }

      v71[2] = v73 + 1;
      uint64_t v75 = v195;
      uint64_t v76 = (char *)v71 + v196 + v73 * v195;
      uint64_t v66 = v220;
      (*(void (**)(char *, char *, uint64_t))(v220 + 32))(v76, v74, v20);
      v226 = v71;
      v68 += v75;
      --v65;
    }

    while (v65);
    uint64_t v85 = swift_bridgeObjectRelease(v181);
    uint64_t v40 = v183;
    uint64_t v55 = v182;
  }

  else
  {
    uint64_t v85 = swift_bridgeObjectRelease(v64);
    uint64_t v71 = _swiftEmptyArrayStorage;
  }

  __chkstk_darwin(v85);
  uint64_t v179 = (char *)v71;
  uint64_t v180 = v215;
  uint64_t v88 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse,  (uint64_t (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_UserParse,  (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_UserParse);
  uint64_t v90 = v217;
  uint64_t v89 = v218;
  static Message.with(_:)( partial apply for closure #2 in SearchFlow.buildPommesSearchRequest(parse:),  &v181 - 4,  v218,  v88);
  uint64_t v91 = swift_bridgeObjectRelease(v71);
  uint64_t v92 = CurrentRequest.currentDeviceAssistantId.getter(v91);
  uint64_t v94 = v93;
  uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserParse>);
  uint64_t v96 = v214;
  uint64_t v97 = *(unsigned __int8 *)(v214 + 80);
  uint64_t v98 = (v97 + 32) & ~v97;
  uint64_t v99 = swift_allocObject(v95, v98 + *(void *)(v214 + 72), v97 | 7);
  *(_OWORD *)(v99 + 16) = xmmword_7CCD0;
  (*(void (**)(uint64_t, char *, uint64_t))(v96 + 16))(v99 + v98, v90, v89);
  uint64_t v100 = v200;
  uint64_t v101 = v191;
  *id v200 = v190;
  v100[1] = v101;
  v100[2] = v99;
  *((_BYTE *)v100 + 24) = 1;
  (*(void (**)(uint64_t *, void, uint64_t))(v198 + 104))(v100, enum case for ParseStateXPC.rc(_:), v199);
  uint64_t v102 = type metadata accessor for PommesSearchRequestXPCBuilder(0LL);
  swift_allocObject(v102, *(unsigned int *)(v102 + 48), *(unsigned __int16 *)(v102 + 52));
  uint64_t v103 = PommesSearchRequestXPCBuilder.init(domain:assistantId:requestId:parseState:utterance:)( v193,  v55,  v92,  v94,  v192,  v186,  v100,  v185,  v184);
  char v104 = PommesContext.listenAfterSpeaking.getter();
  uint64_t v105 = dispatch thunk of PommesSearchRequestXPCBuilder.withListenAfterSpeaking(_:)(v104 & 1);
  uint64_t v106 = swift_release(v103);
  uint64_t v107 = (uint64_t)v201;
  uint64_t v108 = CurrentRequest.multiUserState.getter(v106);
  LOBYTE(v103) = MultiUserState.isEnabled.getter(v108);
  outlined destroy of InformationRoutingFlow.State( v107,  (uint64_t (*)(void))&type metadata accessor for MultiUserState);
  uint64_t v109 = dispatch thunk of PommesSearchRequestXPCBuilder.withIsMultiUser(_:)(v103 & 1);
  uint64_t v110 = swift_release(v105);
  uint64_t v111 = (uint64_t)v202;
  CurrentRequest.audioSource.getter(v110);
  uint64_t v112 = type metadata accessor for AudioSource(0LL);
  uint64_t v113 = *(void *)(v112 - 8);
  int v114 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v113 + 48))(v111, 1LL, v112);
  uint64_t v115 = v208;
  uint64_t v116 = v207;
  if (v114 == 1)
  {
    outlined destroy of Any?(v111, &demangling cache variable for type metadata for AudioSource?);
    uint64_t v117 = 0LL;
    uint64_t v118 = 0LL;
  }

  else
  {
    uint64_t v117 = AudioSource.aceValue.getter();
    uint64_t v118 = v119;
    (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v111, v112);
  }

  uint64_t v120 = v210;
  uint64_t v121 = (uint64_t)v203;
  uint64_t v122 = dispatch thunk of PommesSearchRequestXPCBuilder.withAudioSource(_:)(v117, v118);
  swift_release(v109);
  uint64_t v123 = swift_bridgeObjectRelease(v118);
  CurrentRequest.audioDestination.getter(v123);
  uint64_t v124 = type metadata accessor for AudioDestination(0LL);
  uint64_t v125 = *(void *)(v124 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v125 + 48))(v121, 1LL, v124) == 1)
  {
    outlined destroy of Any?(v121, &demangling cache variable for type metadata for AudioDestination?);
    uint64_t v126 = 0LL;
    uint64_t v127 = 0LL;
  }

  else
  {
    uint64_t v126 = AudioDestination.aceValue.getter();
    uint64_t v127 = v128;
    (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v121, v124);
  }

  uint64_t v129 = dispatch thunk of PommesSearchRequestXPCBuilder.withAudioDestination(_:)(v126, v127);
  swift_release(v122);
  uint64_t v130 = swift_bridgeObjectRelease(v127);
  uint64_t v131 = v204;
  uint64_t v132 = CurrentRequest.responseMode.getter(v130);
  uint64_t v133 = ResponseMode.aceValue.getter(v132);
  uint64_t v135 = v134;
  (*(void (**)(char *, uint64_t))(v205 + 8))(v131, v206);
  uint64_t v136 = dispatch thunk of PommesSearchRequestXPCBuilder.withResponseMode(_:)(v133, v135);
  swift_bridgeObjectRelease(v135);
  uint64_t v137 = swift_release(v129);
  static Device.current.getter(&v226, v137);
  uint64_t v138 = v227;
  uint64_t v139 = v228;
  __swift_project_boxed_opaque_existential_1(&v226, v227);
  char v140 = dispatch thunk of DeviceState.isEyesFree.getter(v138, v139);
  uint64_t v141 = dispatch thunk of PommesSearchRequestXPCBuilder.withIsEyesFree(_:)(v140 & 1);
  swift_release(v136);
  uint64_t v142 = __swift_destroy_boxed_opaque_existential_1(&v226);
  static Device.current.getter(&v226, v142);
  uint64_t v143 = v227;
  uint64_t v144 = v228;
  __swift_project_boxed_opaque_existential_1(&v226, v227);
  char v145 = dispatch thunk of DeviceState.isVoiceTriggerEnabled.getter(v143, v144);
  uint64_t v146 = dispatch thunk of PommesSearchRequestXPCBuilder.withIsVoiceTriggerEnabled(_:)(v145 & 1);
  swift_release(v141);
  uint64_t v147 = __swift_destroy_boxed_opaque_existential_1(&v226);
  static Device.current.getter(&v226, v147);
  uint64_t v148 = v227;
  uint64_t v149 = v228;
  __swift_project_boxed_opaque_existential_1(&v226, v227);
  char v150 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v148, v149);
  uint64_t v151 = dispatch thunk of PommesSearchRequestXPCBuilder.withIsTextToSpeechEnabled(_:)(v150 & 1);
  swift_release(v146);
  uint64_t v152 = __swift_destroy_boxed_opaque_existential_1(&v226);
  static Device.current.getter(&v226, v152);
  uint64_t v153 = v227;
  uint64_t v154 = v228;
  __swift_project_boxed_opaque_existential_1(&v226, v227);
  dispatch thunk of DeviceState.inputOrigin.getter(v153, v154);
  uint64_t v155 = *(void (**)(char *, void, uint64_t))(v115 + 104);
  v155(v116, enum case for InputOrigin.clientGenerated(_:), v120);
  uint64_t v156 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type InputOrigin and conformance InputOrigin,  (uint64_t (*)(uint64_t))&type metadata accessor for InputOrigin,  (uint64_t)&protocol conformance descriptor for InputOrigin);
  dispatch thunk of RawRepresentable.rawValue.getter(&v224, v120, v156);
  dispatch thunk of RawRepresentable.rawValue.getter(&v222, v120, v156);
  uint64_t v157 = v225;
  uint64_t v158 = v223;
  if (v224 == v222 && v225 == v223)
  {
    char v159 = 1;
    uint64_t v158 = v225;
  }

  else
  {
    char v159 = _stringCompareWithSmolCheck(_:_:expecting:)(v224, v225, v222, v223, 0LL);
  }

  swift_bridgeObjectRelease(v157);
  swift_bridgeObjectRelease(v158);
  uint64_t v160 = *(void (**)(char *, uint64_t))(v115 + 8);
  v160(v116, v120);
  v160(v216, v120);
  uint64_t v161 = __swift_destroy_boxed_opaque_existential_1(&v226);
  if ((v159 & 1) != 0)
  {
    char v162 = 1;
  }

  else
  {
    static Device.current.getter(&v226, v161);
    uint64_t v163 = v227;
    uint64_t v164 = v228;
    __swift_project_boxed_opaque_existential_1(&v226, v227);
    dispatch thunk of DeviceState.inputOrigin.getter(v163, v164);
    uint64_t v165 = v197;
    v155(v197, enum case for InputOrigin.triggerlessFollowup(_:), v120);
    dispatch thunk of RawRepresentable.rawValue.getter(&v224, v120, v156);
    dispatch thunk of RawRepresentable.rawValue.getter(&v222, v120, v156);
    uint64_t v166 = v225;
    uint64_t v167 = v223;
    if (v224 == v222 && v225 == v223)
    {
      char v162 = 1;
      uint64_t v167 = v225;
    }

    else
    {
      char v162 = _stringCompareWithSmolCheck(_:_:expecting:)(v224, v225, v222, v223, 0LL);
    }

    swift_bridgeObjectRelease(v166);
    swift_bridgeObjectRelease(v167);
    v160(v165, v120);
    v160(v209, v120);
    __swift_destroy_boxed_opaque_existential_1(&v226);
  }

  uint64_t v168 = dispatch thunk of PommesSearchRequestXPCBuilder.withIsTriggerlessFollowup(_:)(v162 & 1);
  swift_release(v151);
  uint64_t v169 = type metadata accessor for SiriEnvironment(0LL);
  uint64_t v170 = static SiriEnvironment.default.getter(v169);
  uint64_t v171 = SiriEnvironment.currentDevice.getter();
  uint64_t v172 = swift_release(v170);
  uint64_t v173 = v211;
  dispatch thunk of CurrentDevice.restrictions.getter(v172);
  uint64_t v174 = swift_release(v171);
  uint64_t v175 = DeviceRestrictions.aceSet.getter(v174);
  (*(void (**)(char *, uint64_t))(v212 + 8))(v173, v213);
  uint64_t v176 = specialized _copyCollectionToContiguousArray<A>(_:)(v175);
  swift_bridgeObjectRelease(v175);
  uint64_t v177 = dispatch thunk of PommesSearchRequestXPCBuilder.withDeviceRestrictions(_:)(v176);
  swift_release(v168);
  uint64_t v178 = swift_release(v176);
  uint64_t v49 = dispatch thunk of PommesSearchRequestXPCBuilder.build()(v178);
  swift_release(v40);
  swift_release(v177);
  v187(v217, v218);
  (*(void (**)(char *, uint64_t))(v188 + 8))(v219, v189);
  return v49;
}

uint64_t closure #1 in closure #1 in SearchFlow.buildPommesSearchRequest(parse:)()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v15 - v5;
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_UserStatedTask(0LL);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Siri_Nlu_External_UserDialogAct.userStatedTask.getter(v8);
  uint64_t v11 = Siri_Nlu_External_UserDialogAct.userStatedTask.setter(v10);
  uint64_t v12 = Siri_Nlu_External_DelegatedUserDialogAct.init()(v11);
  uint64_t v13 = static PommesSearchRequest.PommesParserId.getter(v12);
  Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.setter(v13);
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v4, v6, v0);
  Siri_Nlu_External_UserDialogAct.delegated.setter(v4);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v6, v0);
}

uint64_t closure #2 in SearchFlow.buildPommesSearchRequest(parse:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_Parser(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = swift_bridgeObjectRetain(a2);
  uint64_t v11 = Siri_Nlu_External_UserParse.userDialogActs.setter(v10);
  uint64_t v12 = USOParse.userParse.getter(v11);
  Siri_Nlu_External_UserParse.parser.getter(v12);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v13 = Siri_Nlu_External_UserParse.parser.setter(v5);
  uint64_t v14 = Siri_Nlu_External_UserParse.probability.setter(v13, 1.0);
  return Siri_Nlu_External_UserParse.comparableProbability.setter(v14, 1.0);
}

uint64_t SearchFlow.handleClientDrivenExperience(pommesResponse:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for SearchFlow.State(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v22[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v22[0] = v1;
  uint64_t v7 = type metadata accessor for SearchFlow(0LL);
  uint64_t v8 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type SearchFlow and conformance SearchFlow,  type metadata accessor for SearchFlow,  (uint64_t)&protocol conformance descriptor for SearchFlow);
  uint64_t v9 = CompositionSearchFlow.findFlowForPommesResponse(_:)(a1, v7, v8);
  if (v9)
  {
    uint64_t v10 = v9;
    v22[3] = type metadata accessor for AnyFlow(0LL);
    v22[4] = &protocol witness table for AnyFlow;
    v22[0] = v10;
    uint64_t v11 = *(void (**)(uint64_t, void *))(*(void *)v1 + 304LL);
    swift_retain(v10);
    v11(a1, v22);
    swift_release(v10);
    return __swift_destroy_boxed_opaque_existential_1(v22);
  }

  else
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    uint64_t v14 = __swift_project_value_buffer(v13, (uint64_t)static Logger.information);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_0, v15, v16, "#InformationSearchFlow failed to render a client-driven experience", v17, 2u);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    uint64_t v18 = enum case for CompositionResolutionError.searchFlowExecutionError(_:);
    uint64_t v19 = type metadata accessor for CompositionResolutionError(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104LL))(v6, v18, v19);
    swift_storeEnumTagMultiPayload(v6, v4, 3LL);
    uint64_t v20 = (*(uint64_t (**)(char *))(*(void *)v2 + 208LL))(v6);
    return static ExecuteResponse.complete()(v20);
  }

uint64_t SearchFlow.handleClientDrivenExperience(pommesResponse:renderFlow:)@<X0>( void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v53 = a3;
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v48 = *(void *)(v5 - 8);
  uint64_t v49 = v5;
  __chkstk_darwin(v5);
  os_log_type_t v47 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v50 = type metadata accessor for SearchFlow.State(0LL);
  __chkstk_darwin(v50);
  uint64_t v51 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Parse(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (void **)((char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = type metadata accessor for Input(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = a2[3];
  uint64_t v16 = a2[4];
  uint64_t v46 = a2;
  __swift_project_boxed_opaque_existential_1(a2, v17);
  *uint64_t v11 = a1;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for Parse.pommesResponse(_:), v8);
  id v18 = a1;
  Input.init(parse:)(v11);
  LOBYTE(a__swift_destroy_boxed_opaque_existential_1(v0 + 2) = dispatch thunk of Flow.on(input:)(v15, v17, v16);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if ((a2 & 1) != 0)
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    uint64_t v20 = __swift_project_value_buffer(v19, (uint64_t)static Logger.information);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl( &dword_0,  v21,  v22,  "#InformationSearchFlow pushing render component flow for client-driven experience",  v23,  2u);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    uint64_t v24 = v51;
    swift_storeEnumTagMultiPayload(v51, v50, 4LL);
    (*(void (**)(char *))(*(void *)v52 + 208LL))(v24);
    uint64_t v25 = v46[3];
    uint64_t v26 = v46[4];
    uint64_t v27 = __swift_project_boxed_opaque_existential_1(v46, v25);
    return static ExecuteResponse.ongoing<A>(next:)(v27, v25, v26);
  }

  else
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v29 = type metadata accessor for Logger(0LL);
    uint64_t v30 = __swift_project_value_buffer(v29, (uint64_t)static Logger.information);
    uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl( &dword_0,  v31,  v32,  "#InformationSearchFlow render flow refused input, returning error flow",  v33,  2u);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    uint64_t v34 = enum case for CompositionResolutionError.searchFlowExecutionError(_:);
    uint64_t v35 = type metadata accessor for CompositionResolutionError(0LL);
    uint64_t v36 = v51;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 104LL))(v51, v34, v35);
    swift_storeEnumTagMultiPayload(v36, v50, 3LL);
    uint64_t v37 = v52;
    (*(void (**)(char *))(*(void *)v52 + 208LL))(v36);
    uint64_t v54 = v37;
    uint64_t v38 = type metadata accessor for PerformanceUtil(0LL);
    uint64_t v39 = static PerformanceUtil.shared.getter(v38);
    uint64_t v40 = __chkstk_darwin(v39);
    uint64_t v43 = &v54;
    uint64_t v41 = v47;
    Date.init()(v40);
    uint64_t v44 = &v42;
    uint64_t v45 = type metadata accessor for ExecuteResponse(0LL);
    LOBYTE(v43) = 2;
    ((void (*)(void *__return_ptr, uint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:))( v53,  0x72724520656B614DLL,  0xEE00776F6C46726FLL,  0LL,  v41,  "InformationFlowPlugin/FlowTrampolining.swift",  44LL,  2LL,  22LL,  "makeResponse(forErrorMessage:)",  30LL,  (_DWORD)v43,  partial apply for specialized closure #1 in FlowTrampolining.makeResponse(forErrorMessage:));
    swift_release(v39);
    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v41, v49);
  }

uint64_t SearchFlow.handleServerDrivenExperience(pommesResponse:rrEntities:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[14] = a3;
  v4[15] = v3;
  v4[12] = a1;
  v4[13] = a2;
  uint64_t v5 = type metadata accessor for SearchFlow.State(0LL);
  v4[16] = v5;
  v4[17] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for PerformanceUtil.Ticket(0LL);
  v4[18] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[19] = v7;
  v4[20] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
  v4[21] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Date(0LL);
  v4[22] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[23] = v10;
  _BYTE v4[24] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for PegasusExperience(0LL);
  v4[25] = v11;
  unint64_t v12 = (*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[26] = swift_task_alloc(v12);
  v4[27] = swift_task_alloc(v12);
  return swift_task_switch(SearchFlow.handleServerDrivenExperience(pommesResponse:rrEntities:), 0LL, 0LL);
}

uint64_t SearchFlow.handleServerDrivenExperience(pommesResponse:rrEntities:)()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void **)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v50 = *(void *)(v0 + 176);
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v7 = *(void *)(v0 + 104);
  uint64_t v8 = type metadata accessor for PerformanceUtil(0LL);
  *(void *)(v0 + 224) = v8;
  uint64_t v9 = static PerformanceUtil.shared.getter(v8);
  uint64_t v10 = swift_task_alloc(32LL);
  *(void *)(v10 + 16) = v6;
  *(void *)(v10 + 24) = v7;
  Date.init()(v10);
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( v2,  0xD00000000000003ALL,  0x800000000007F790LL,  0LL,  v4,  "InformationFlowPlugin/SearchFlow.swift",  38LL,  2LL,  271LL,  "handleServerDrivenExperience(pommesResponse:rrEntities:)",  56LL,  2,  partial apply for closure #1 in SearchFlow.handleServerDrivenExperience(pommesResponse:rrEntities:),  v10,  v3);
  swift_release(v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v50);
  swift_task_dealloc(v10);
  outlined init with copy of InformationRoutingFlow.State((uint64_t)v2, v1, type metadata accessor for PegasusExperience);
  if (!swift_getEnumCaseMultiPayload(v1, v3))
  {
    uint64_t v30 = *(void **)(v0 + 208);
    uint64_t v31 = *(void *)(v0 + 192);
    uint64_t v32 = *(void *)(v0 + 168);
    uint64_t v33 = *(void *)(v0 + 120);
    uint64_t v34 = *(void **)(v0 + 104);
    *(void *)(v0 + 23__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *v30;
    *(void *)(v0 + 240) = v30[1];
    *(void *)(v0 + 248) = v30[2];
    *(void *)(v0 + 256) = v30[3];
    uint64_t v35 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent], [Apple_Parsec_Siri_V2alpha_RenderedDialogComponent], [Apple_Parsec_Siri_V2alpha_ButtonViewComponent], [Apple_Parsec_Siri_V2alpha_DelayedActionComponent], Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?, [Apple_Parsec_Siri_V2alpha_SayItComponent], [Apple_Parsec_Siri_V2alpha_DisambiguationListComponent], [Apple_Parsec_Siri_V2alpha_DomainObjectComponent], PommesRenderOptions?));
    uint64_t v36 = v35[24];
    *(void *)(v0 + 264) = *(void *)((char *)v30 + v35[28]);
    *(void *)(v0 + 27__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(void *)((char *)v30 + v35[32]);
    *(void *)(v0 + 280) = *(void *)((char *)v30 + v35[36]);
    *(void *)(v0 + 288) = *(void *)((char *)v30 + v35[40]);
    uint64_t v37 = outlined init with take of Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?((uint64_t)v30 + v36, v32);
    Date.init()(v37);
    LOBYTE(v48) = 2;
    PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0xD00000000000009ELL,  0x8000000000080410LL,  v31,  "InformationFlowPlugin/SearchFlow.swift",  38LL,  2LL,  277LL,  "handleServerDrivenExperience(pommesResponse:rrEntities:)",  56LL,  v48);
    uint64_t v38 = *(void *)(v33 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_renderComponentFlowFactory);
    static SiriKitEventSender.current.getter((void *)(v0 + 16));
    uint64_t v39 = type metadata accessor for PegasusFlowEventLogger();
    uint64_t v40 = swift_allocObject(v39, 84LL, 7LL);
    *(void *)(v0 + 296) = v40;
    *(void *)(v40 + 16) = v34;
    outlined init with copy of OutputPublisherAsync(v0 + 16, v40 + 24);
    id v41 = v34;
    uint64_t v42 = PommesResponse.metadataDomainName.getter();
    uint64_t v44 = v43;
    uint64_t v45 = __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
    *(void *)(v40 + 64) = v42;
    *(void *)(v40 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v44;
    *(_DWORD *)(v40 + 80) = 1;
    static AceService.currentAsync.getter((void *)(v0 + 56), v45);
    uint64_t v46 = *(int **)(*(void *)v38 + 104LL);
    uint64_t v49 = (char *)v46 + *v46;
    os_log_type_t v47 = (void *)swift_task_alloc(v46[1]);
    *(void *)(v0 + 304) = v47;
    *os_log_type_t v47 = v0;
    v47[1] = SearchFlow.handleServerDrivenExperience(pommesResponse:rrEntities:);
    __asm { BR              X8 }
  }

  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = __swift_project_value_buffer(v11, (uint64_t)static Logger.information);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_0, v13, v14, "#InformationSearchFlow failed to render a server-driven experience", v15, 2u);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  uint64_t v17 = *(void *)(v0 + 208);
  uint64_t v16 = *(void *)(v0 + 216);
  uint64_t v19 = *(void *)(v0 + 128);
  uint64_t v18 = *(void *)(v0 + 136);
  uint64_t v20 = *(void *)(v0 + 120);

  uint64_t v21 = enum case for CompositionResolutionError.searchFlowExecutionError(_:);
  uint64_t v22 = type metadata accessor for CompositionResolutionError(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 104LL))(v18, v21, v22);
  swift_storeEnumTagMultiPayload(v18, v19, 3LL);
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 208LL))(v18);
  static ExecuteResponse.complete()(v23);
  outlined destroy of InformationRoutingFlow.State(v16, type metadata accessor for PegasusExperience);
  outlined destroy of InformationRoutingFlow.State(v17, type metadata accessor for PegasusExperience);
  uint64_t v24 = *(void *)(v0 + 208);
  uint64_t v25 = *(void *)(v0 + 192);
  uint64_t v27 = *(void *)(v0 + 160);
  uint64_t v26 = *(void *)(v0 + 168);
  uint64_t v28 = *(void *)(v0 + 136);
  swift_task_dealloc(*(void *)(v0 + 216));
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SearchFlow.handleServerDrivenExperience(pommesResponse:rrEntities:)(uint64_t a1)
{
  uint64_t v2 = (void *)(*(void *)v1 + 56LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 296LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 304LL);
  uint64_t v6 = *(void *)(*(void *)v1 + 272LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 280LL);
  uint64_t v8 = *(void *)(*(void *)v1 + 256LL);
  uint64_t v7 = *(void *)(*(void *)v1 + 264LL);
  uint64_t v10 = *(void *)(*(void *)v1 + 240LL);
  uint64_t v9 = *(void *)(*(void *)v1 + 248LL);
  uint64_t v11 = *(void *)(*(void *)v1 + 232LL);
  *(void *)(*(void *)v1 + 312LL) = a1;
  swift_task_dealloc(v3);
  swift_release(v4);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  __swift_destroy_boxed_opaque_existential_1(v2);
  return swift_task_switch(SearchFlow.handleServerDrivenExperience(pommesResponse:rrEntities:), 0LL, 0LL);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_s *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v2 = *(void *)(v1 + 160);
  uint64_t v3 = static PerformanceUtil.shared.getter(a1);
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v2, 0LL);
  swift_release(v3);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)static Logger.information);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  uint64_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl( &dword_0,  v6,  v7,  "#InformationSearchFlow pushing render component flow for server-driven experience",  v8,  2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  uint64_t v9 = *(void *)(v1 + 312);
  uint64_t v10 = *(void **)(v1 + 288);
  uint64_t v23 = *(void *)(v1 + 168);
  uint64_t v24 = *(void *)(v1 + 216);
  uint64_t v11 = *(void *)(v1 + 152);
  uint64_t v22 = *(void *)(v1 + 160);
  uint64_t v13 = *(void *)(v1 + 136);
  uint64_t v12 = *(void *)(v1 + 144);
  os_log_type_t v14 = *(void *)(v1 + 120);
  uint64_t v15 = *(void *)(v1 + 128);

  swift_storeEnumTagMultiPayload(v13, v15, 4LL);
  (*(void (**)(uint64_t))(*(void *)v14 + 208LL))(v13);
  static ExecuteResponse.ongoing(next:)(v9);
  swift_release(v9);

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v22, v12);
  outlined destroy of Any?( v23,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
  outlined destroy of InformationRoutingFlow.State(v24, type metadata accessor for PegasusExperience);
  uint64_t v16 = *(void *)(v1 + 208);
  uint64_t v17 = *(void *)(v1 + 192);
  uint64_t v19 = *(void *)(v1 + 160);
  uint64_t v18 = *(void *)(v1 + 168);
  uint64_t v20 = *(void *)(v1 + 136);
  swift_task_dealloc(*(void *)(v1 + 216));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t SearchFlow.deinit()
{
  __swift_destroy_boxed_opaque_existential_1((void *)(v0
                                                      + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_outputPublisher));
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_informationViewFactory));
  outlined destroy of InformationRoutingFlow.State( v0 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_state,  type metadata accessor for SearchFlow.State);
  return v0;
}

uint64_t SearchFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t protocol witness for CompositionSearchFlow.nlContextUpdate.getter in conformance SearchFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152LL))();
}

uint64_t (*protocol witness for CompositionSearchFlow.nlContextUpdate.modify in conformance SearchFlow( void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 168LL))();
  return protocol witness for CompositionSearchFlow.nlContextUpdate.modify in conformance PushOffQueryFlow;
}

uint64_t protocol witness for CompositionSearchFlow.targetedRequest.setter in conformance SearchFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184LL))();
}

uint64_t (*protocol witness for CompositionSearchFlow.targetedRequest.modify in conformance SearchFlow( void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 192LL))();
  return protocol witness for CompositionSearchFlow.nlContextUpdate.modify in conformance PushOffQueryFlow;
}

uint64_t protocol witness for FlowTrampolining.outputPublisher.getter in conformance SearchFlow@<X0>( uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync( *v1 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_outputPublisher,  a1);
}

uint64_t protocol witness for FlowTrampolining.informationViewFactory.getter in conformance SearchFlow()
{
  return swift_retain(*(void *)(*v0 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_informationViewFactory));
}

uint64_t protocol witness for Flow.on(input:) in conformance SearchFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 248LL))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance SearchFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 264LL))();
}

uint64_t protocol witness for Flow.execute() in conformance SearchFlow(uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 256LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return v7(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance SearchFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 224LL))();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<RREntity>,  (uint64_t (*)(void))&type metadata accessor for RREntity);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_ResultEntity>,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_DelayedActionComponent>,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_DomainObjectComponent>,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_DisambiguationListComponent>,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_DisambiguationListComponent);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ButtonViewComponent>,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_ButtonViewComponent);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_SayItComponent>,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItComponent);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_DirectExecutionComponent>,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_RenderedDialogComponent>,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_CatDialogComponent>,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_CatDialogComponent);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent>,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Searchfoundation_Card>,  (uint64_t (*)(void))&type metadata accessor for Searchfoundation_Card);
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    uint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)>);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  os_log_type_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  uint64_t v16 = _swift_stdlib_malloc_size(v15);
  if (!v12) {
    goto LABEL_29;
  }
  if (v16 - v14 == 0x8000000000000000LL && v12 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  __int128 v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    uint64_t v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(void *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }

    else if (v15 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }

    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, v21, a4);
  }

  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v10 = a2;
  }

  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v15) {
    goto LABEL_29;
  }
  if (v19 - v17 == 0x8000000000000000LL && v15 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  uint64_t v21 = a6(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    unint64_t v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(void *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }

    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }

    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v11, v24, a4, a6);
  }

  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v11 = (void *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      void v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4]) {
          memmove(v14, a4 + 4, 8 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  void *v14;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      void v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  void *v14;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Searchfoundation_CardSection]>);
      uint64_t v11 = (void *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      void v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4]) {
          memmove(v14, a4 + 4, 8 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  void *v14;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(displayName: String, bundleId: String)>);
      uint64_t v11 = (void *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 1;
      }
      void v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4]) {
          memmove(v14, a4 + 4, 32 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v4 = (void *)swift_allocObject(v3, 16 * v1 + 32, 7LL);
  int64_t v5 = _swift_stdlib_malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 17;
  }
  void v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  uint64_t v7 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v10, v4 + 4, v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain(a1);
  outlined consume of [String : Any].Iterator._Variant(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  void *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  (void *)*v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserDialogAct>,  (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct);
  void *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  void *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  void *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  (void *)*v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate>,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate);
  void *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  void *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  (void *)*v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Moviespb_CoverArt>,  (uint64_t (*)(void))&type metadata accessor for Moviespb_CoverArt);
  void *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  (void *)*v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Tvpb_CoverArt>,  (uint64_t (*)(void))&type metadata accessor for Tvpb_CoverArt);
  void *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  (void *)*v3);
  void *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  (void *)*v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Searchfoundation_Card>,  (uint64_t (*)(void))&type metadata accessor for Searchfoundation_Card);
  void *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  (void *)*v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<SportsPersonalizationEntity>,  (uint64_t (*)(void))&type metadata accessor for SportsPersonalizationEntity);
  void *v3 = result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8]) {
      memmove(v14, v15, 32 * v8);
    }
    *((void *)a4 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<()>);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GenericResultSetItem>);
    uint64_t v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8]) {
      memmove(v14, v15, 8 * v8);
    }
    *((void *)a4 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[String : Any]>);
    uint64_t v11 = (void *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    void v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v14 = (unint64_t)(v11 + 4);
  unint64_t v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v8) {
      memmove(v11 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_30;
  }

  if (v15 >= v14 + 8 * v8 || v14 >= v15 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v19 - v17 == 0x8000000000000000LL && v15 == -1) {
    goto LABEL_34;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  uint64_t v21 = a6(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v24 = (char *)v18 + v23;
  unint64_t v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(void *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }

    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v24);
    }

    a4[2] = 0LL;
    goto LABEL_32;
  }

  uint64_t v26 = *(void *)(v22 + 72) * v11;
  uint64_t v27 = &v24[v26];
  unint64_t v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }

LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)( uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  int64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *int64_t v5 = a4;
    v5[1] = v6;
    void v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }

    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain(v21);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

LABEL_41:
  __break(1u);
  return result;
}

void specialized static SearchFlow.State.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v2 = type metadata accessor for CompositionResolutionError(0LL);
  v22[6] = *(void *)(v2 - 8);
  v22[7] = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  v22[3] = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  v22[2] = (char *)v22 - v5;
  uint64_t v6 = type metadata accessor for RREntity(0LL);
  v22[4] = *(void *)(v6 - 8);
  void v22[5] = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  v22[1] = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  v22[0] = (char *)v22 - v9;
  uint64_t v10 = type metadata accessor for USOParse(0LL);
  v22[8] = *(void *)(v10 - 8);
  v22[9] = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  __chkstk_darwin(v11);
  uint64_t v12 = type metadata accessor for SearchFlow.State(0LL);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v15 = __chkstk_darwin(v14);
  __chkstk_darwin(v15);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SearchFlow.State, SearchFlow.State));
  uint64_t v17 = __chkstk_darwin(v16);
  int64_t v19 = (char *)v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = (uint64_t)&v19[*(int *)(v17 + 48)];
  outlined init with copy of InformationRoutingFlow.State( v23,  (uint64_t)v19,  type metadata accessor for SearchFlow.State);
  outlined init with copy of InformationRoutingFlow.State(v24, v20, type metadata accessor for SearchFlow.State);
  uint64_t v21 = (char *)sub_227B4 + 4 * asc_7D444[swift_getEnumCaseMultiPayload(v19, v12) + 1];
  __asm { BR              X10 }

uint64_t sub_227B4()
{
  if (swift_getEnumCaseMultiPayload(v5, v3))
  {
    (*(void (**)(uint64_t, void))(*(void *)(v6 - 112) + 8LL))(v4, *(void *)(v6 - 104));
    outlined destroy of Any?(v0, &demangling cache variable for type metadata for (SearchFlow.State, SearchFlow.State));
    char v7 = 0;
  }

  else
  {
    uint64_t v8 = *(void *)(v6 - 112);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
    uint64_t v10 = v4;
    uint64_t v11 = *(void *)(v6 - 104);
    v9(v2, v10, v11);
    v9(v1, v5, v11);
    char v7 = ((uint64_t (*)(uint64_t, uint64_t))static USOParse.== infix(_:_:))(v2, v1);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v12(v1, v11);
    v12(v2, v11);
    outlined destroy of InformationRoutingFlow.State(v0, type metadata accessor for SearchFlow.State);
  }

  return v7 & 1;
}

uint64_t specialized SearchFlow.hasDelayedAction(pommesResponse:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v39 - v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DelayedActionComponent?);
  __chkstk_darwin(v6);
  uint64_t v49 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  os_log_type_t v47 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v44 = (char *)&v39 - v12;
  uint64_t v50 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent(0LL);
  uint64_t v48 = *(void *)(v50 - 8);
  uint64_t v13 = __chkstk_darwin(v50);
  uint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = dispatch thunk of PommesResponse.experiences.getter(v13);
  uint64_t v17 = v16;
  if (!((unint64_t)v16 >> 62))
  {
    uint64_t result = *(void *)((char *)&dword_10 + (v16 & 0xFFFFFFFFFFFFF8LL));
    if (result) {
      goto LABEL_3;
    }
LABEL_29:
    swift_bridgeObjectRelease(v17);
    return 0LL;
  }

  if (v16 >= 0) {
    v16 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v16);
  if (!result) {
    goto LABEL_29;
  }
LABEL_3:
  if ((v17 & 0xC000000000000001LL) != 0)
  {
    id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v17);
  }

  else
  {
    if (!*(void *)((char *)&dword_10 + (v17 & 0xFFFFFFFFFFFFF8LL)))
    {
      __break(1u);
      return result;
    }

    id v19 = *(id *)(v17 + 32);
  }

  uint64_t v20 = v19;
  swift_bridgeObjectRelease(v17);
  uint64_t v21 = type metadata accessor for GenericExperience(0LL);
  uint64_t v22 = swift_dynamicCastClass(v20, v21);
  if (!v22)
  {

    return 0LL;
  }

  uint64_t v23 = GenericExperience.components.getter(v22);
  uint64_t v24 = *(void *)(v23 + 16);
  if (v24)
  {
    uint64_t v40 = v23;
    id v41 = v20;
    uint64_t v43 = v3;
    unint64_t v25 = v23 + ((*(unsigned __int8 *)(v48 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80));
    uint64_t v46 = *(void *)(v48 + 72);
    uint64_t v45 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v48 + 16);
    int v42 = enum case for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component.delayedActionComponent(_:);
    uint64_t v26 = (char *)_swiftEmptyArrayStorage;
    for (uint64_t i = v45(v15, v25, v50); ; uint64_t i = v45(v15, v25, v50))
    {
      Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter(i);
      uint64_t v28 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component(0LL);
      uint64_t v29 = *(void *)(v28 - 8);
      uint64_t v30 = 1LL;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v5, 1LL, v28) != 1)
      {
        uint64_t v31 = (uint64_t)v43;
        outlined init with copy of IdentifiedUser?( (uint64_t)v5,  (uint64_t)v43,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
        int v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 88))(v31, v28);
        if (v32 == v42)
        {
          (*(void (**)(uint64_t, uint64_t))(v29 + 96))(v31, v28);
          (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v49, v31, v8);
          uint64_t v30 = 0LL;
        }

        else
        {
          (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v31, v28);
          uint64_t v30 = 1LL;
        }
      }

      uint64_t v33 = (uint64_t)v49;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v49, v30, 1LL, v8);
      outlined destroy of Any?( (uint64_t)v5,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v15, v50);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v33, 1LL, v8) == 1)
      {
        outlined destroy of Any?( v33,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DelayedActionComponent?);
      }

      else
      {
        uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 32);
        uint64_t v35 = v44;
        v34(v44, v33, v8);
        v34(v47, (uint64_t)v35, v8);
        if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0) {
          uint64_t v26 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *((void *)v26 + 2) + 1LL,  1,  (unint64_t)v26,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_DelayedActionComponent>,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent);
        }
        unint64_t v37 = *((void *)v26 + 2);
        unint64_t v36 = *((void *)v26 + 3);
        if (v37 >= v36 >> 1) {
          uint64_t v26 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v36 > 1,  v37 + 1,  1,  (unint64_t)v26,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_DelayedActionComponent>,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent);
        }
        *((void *)v26 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v37 + 1;
        v34( &v26[((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
             + *(void *)(v9 + 72) * v37],
          (uint64_t)v47,
          v8);
      }

      v25 += v46;
      if (!--v24) {
        break;
      }
    }

    swift_bridgeObjectRelease(v40);
  }

  else
  {
    swift_bridgeObjectRelease(v23);

    uint64_t v26 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v38 = *((void *)v26 + 2);
  swift_bridgeObjectRelease(v26);
  return v38 != 0;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)( uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v6 = a4 + 8 * a1 + 32;
    uint64_t v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Searchfoundation_CardSection]);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 72);
  uint64_t v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  uint64_t v12 = v10 * v4;
  uint64_t v13 = a3 + v12;
  uint64_t v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v6 = a4 + 32 * a1 + 32;
    uint64_t v7 = a3 + 32 * v4;
    if (v6 >= v7 || v6 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayName: String, bundleId: String));
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t specialized SearchFlow.init(parse:renderComponentFlowFactory:pommesSearchClient:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = v4 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_nlContextUpdate;
  uint64_t v12 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
  *(void *)(v4 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_targetedRequest) = 0LL;
  uint64_t v13 = type metadata accessor for ExperienceSelector();
  *(void *)(v4 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_experienceSelector) = swift_allocObject( v13,  16LL,  7LL);
  *(void *)(v4 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_renderComponentFlowFactory) = a2;
  type metadata accessor for ReferenceResolutionClient(0LL);
  uint64_t v14 = swift_retain(a2);
  *(void *)(v4 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_rrClient) = ReferenceResolutionClient.__allocating_init()(v14);
  uint64_t v15 = outlined init with copy of IdentifiedUser?( a3,  v4 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_pommesSearchClient,  &demangling cache variable for type metadata for PommesXPCSearching?);
  static OutputPublisherFactory.makeOutputPublisherAsync()(v28, v15);
  uint64_t v16 = outlined init with take of PatternFlowProviding( v28,  v4 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_outputPublisher);
  static Device.current.getter(v28, v16);
  type metadata accessor for CommonCATs(0LL);
  static CATOption.defaultMode.getter();
  uint64_t v17 = CATWrapper.__allocating_init(options:globals:)(v10, 0LL);
  uint64_t v18 = type metadata accessor for InformationViewFactory();
  id v19 = (void *)swift_allocObject(v18, 104LL, 7LL);
  id v20 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
  uint64_t v21 = type metadata accessor for PommesServerFallbackPreferences(0LL);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  uint64_t v22 = PommesServerFallbackPreferences.init(_:)(v20);
  v19[11] = v21;
  v19[12] = &protocol witness table for PommesServerFallbackPreferences;
  v19[8] = v22;
  outlined init with take of PatternFlowProviding(v28, (uint64_t)(v19 + 3));
  _OWORD v19[2] = v17;
  outlined destroy of Any?(a3, &demangling cache variable for type metadata for PommesXPCSearching?);
  *(void *)(v4 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_informationViewFactory) = v19;
  uint64_t v23 = v4 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_state;
  uint64_t v24 = type metadata accessor for USOParse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 32LL))(v23, a1, v24);
  uint64_t v25 = type metadata accessor for SearchFlow.State(0LL);
  swift_storeEnumTagMultiPayload(v23, v25, 0LL);
  return v4;
}

uint64_t type metadata accessor for SearchFlow(uint64_t a1)
{
  return type metadata accessor for InformationRoutingFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for SearchFlow,  (uint64_t)&nominal type descriptor for SearchFlow);
}

uint64_t specialized SearchFlow.supportedOnDevice(pommesResponse:)(uint64_t a1)
{
  uint64_t v1 = dispatch thunk of PommesResponse.experiences.getter(a1);
  uint64_t v2 = v1;
  if (!((unint64_t)v1 >> 62))
  {
    uint64_t result = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL));
    if (result) {
      goto LABEL_3;
    }
LABEL_18:
    swift_bridgeObjectRelease(v2);
    return 1LL;
  }

  if (v1 >= 0) {
    v1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v1);
  if (!result) {
    goto LABEL_18;
  }
LABEL_3:
  if ((v2 & 0xC000000000000001LL) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v2);
  }

  else
  {
    if (!*(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL)))
    {
      __break(1u);
      return result;
    }

    id v4 = *(id *)(v2 + 32);
  }

  unint64_t v5 = v4;
  swift_bridgeObjectRelease(v2);
  uint64_t v6 = type metadata accessor for GenericExperience(0LL);
  if (!swift_dynamicCastClass(v5, v6))
  {

    return 1LL;
  }

  uint64_t v7 = dispatch thunk of Experience.catIds.getter();
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 + 16);
  if (!v9)
  {
    swift_bridgeObjectRelease(v7);

    return 1LL;
  }

  swift_bridgeObjectRetain(v7);
  unint64_t v10 = lazy protocol witness table accessor for type String and conformance String();
  for (uint64_t i = (uint64_t *)(v8 + 40); ; i += 2)
  {
    uint64_t v12 = *i;
    v13[2] = *(i - 1);
    v13[3] = v12;
    v13[0] = 0xD000000000000021LL;
    v13[1] = 0x8000000000080260LL;
    swift_bridgeObjectRetain(v12);
    if ((StringProtocol.contains<A>(_:)(v13, &type metadata for String, &type metadata for String, v10, v10) & 1) != 0) {
      break;
    }
    swift_bridgeObjectRelease(v12);
    if (!--v9)
    {

      swift_bridgeObjectRelease_n(v8, 2LL);
      return 1LL;
    }
  }

  swift_bridgeObjectRelease(v12);

  swift_bridgeObjectRelease_n(v8, 2LL);
  return 0LL;
}

uint64_t specialized SearchFlow.isUserCanceled(pommesResponse:)(uint64_t a1)
{
  uint64_t v1 = dispatch thunk of PommesResponse.experiences.getter(a1);
  uint64_t v2 = v1;
  if (!((unint64_t)v1 >> 62))
  {
    uint64_t result = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL));
    if (result) {
      goto LABEL_3;
    }
LABEL_19:
    swift_bridgeObjectRelease(v2);
    return 0LL;
  }

  if (v1 >= 0) {
    v1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v1);
  if (!result) {
    goto LABEL_19;
  }
LABEL_3:
  if ((v2 & 0xC000000000000001LL) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v2);
  }

  else
  {
    if (!*(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL)))
    {
      __break(1u);
      return result;
    }

    id v4 = *(id *)(v2 + 32);
  }

  unint64_t v5 = v4;
  swift_bridgeObjectRelease(v2);
  uint64_t v6 = type metadata accessor for GenericExperience(0LL);
  if (!swift_dynamicCastClass(v5, v6))
  {

    return 0LL;
  }

  uint64_t v7 = dispatch thunk of Experience.catIds.getter();
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 + 16);
  if (!v9)
  {
    swift_bridgeObjectRelease(v7);

    return 0LL;
  }

  swift_bridgeObjectRetain(v7);
  unint64_t v10 = lazy protocol witness table accessor for type String and conformance String();
  for (uint64_t i = (uint64_t *)(v8 + 40); ; i += 2)
  {
    uint64_t v12 = *(i - 1);
    uint64_t v13 = *i;
    uint64_t v16 = v12;
    uint64_t v17 = v13;
    unint64_t v14 = 0xD000000000000010LL;
    unint64_t v15 = 0x800000000007FA70LL;
    swift_bridgeObjectRetain(v13);
    if ((StringProtocol.contains<A>(_:)(&v14, &type metadata for String, &type metadata for String, v10, v10) & 1) != 0) {
      break;
    }
    uint64_t v16 = v12;
    uint64_t v17 = v13;
    unint64_t v14 = 0xD000000000000012LL;
    unint64_t v15 = 0x800000000007FA90LL;
    if ((StringProtocol.contains<A>(_:)(&v14, &type metadata for String, &type metadata for String, v10, v10) & 1) != 0) {
      break;
    }
    swift_bridgeObjectRelease(v13);
    if (!--v9)
    {

      swift_bridgeObjectRelease_n(v8, 2LL);
      return 0LL;
    }
  }

  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v8);
  return 1LL;
}

uint64_t outlined consume of Result<(), Error>(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRelease(result);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in SearchFlow.buildPommesSearchRequest(parse:)()
{
  return closure #1 in closure #1 in SearchFlow.buildPommesSearchRequest(parse:)();
}

uint64_t partial apply for closure #2 in SearchFlow.buildPommesSearchRequest(parse:)(uint64_t a1)
{
  return closure #2 in SearchFlow.buildPommesSearchRequest(parse:)(a1, *(void *)(v1 + 16));
}

uint64_t base witness table accessor for Flow in SearchFlow()
{
  return lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type SearchFlow and conformance SearchFlow,  type metadata accessor for SearchFlow,  (uint64_t)&protocol conformance descriptor for SearchFlow);
}

uint64_t base witness table accessor for SiriEnvironmentLocating in SearchFlow()
{
  return lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type SearchFlow and conformance SearchFlow,  type metadata accessor for SearchFlow,  (uint64_t)&protocol conformance descriptor for SearchFlow);
}

uint64_t sub_23784(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 200LL))();
}

uint64_t ObjC metadata update function for SearchFlow()
{
  return type metadata accessor for SearchFlow(0LL);
}

void type metadata completion function for SearchFlow(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    v6[1] = "\b";
    v6[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[5] = &unk_7D5F0;
    v6[6] = &unk_7D608;
    v6[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    uint64_t v4 = type metadata accessor for SearchFlow.State(319LL);
    if (v5 <= 0x3F)
    {
      v6[8] = *(void *)(v4 - 8) + 64LL;
      swift_updateClassMetadata2(a1, 256LL, 9LL, v6, a1 + 80);
    }
  }

char *initializeBufferWithCopyOfBuffer for SearchFlow.State(char *a1, char **a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    a1 = &v9[(v6 + 16LL) & ~(unint64_t)v6];
    swift_retain(v9);
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v8 = type metadata accessor for USOParse(0LL);
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
        swift_storeEnumTagMultiPayload(a1, a3, 0LL);
        break;
      case 1u:
        uint64_t v11 = *a2;
        *(void *)a1 = *a2;
        uint64_t v12 = v11;
        swift_storeEnumTagMultiPayload(a1, a3, 1LL);
        break;
      case 2u:
        uint64_t v13 = type metadata accessor for RREntity(0LL);
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v13 - 8) + 16LL))(a1, a2, v13);
        swift_storeEnumTagMultiPayload(a1, a3, 2LL);
        break;
      case 3u:
        uint64_t v14 = type metadata accessor for CompositionResolutionError(0LL);
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v14 - 8) + 16LL))(a1, a2, v14);
        swift_storeEnumTagMultiPayload(a1, a3, 3LL);
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

void destroy for SearchFlow.State(id *a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
      uint64_t v3 = type metadata accessor for USOParse(0LL);
      goto LABEL_6;
    case 1u:

      return;
    case 2u:
      uint64_t v3 = type metadata accessor for RREntity(0LL);
      goto LABEL_6;
    case 3u:
      uint64_t v3 = type metadata accessor for CompositionResolutionError(0LL);
LABEL_6:
      (*(void (**)(id *, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
      break;
    default:
      return;
  }

void **initializeWithCopy for SearchFlow.State(void **a1, void **a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      uint64_t v6 = type metadata accessor for USOParse(0LL);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 0LL;
      goto LABEL_7;
    case 1u:
      unint64_t v10 = *a2;
      *a1 = *a2;
      id v11 = v10;
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 1LL;
      goto LABEL_7;
    case 2u:
      uint64_t v12 = type metadata accessor for RREntity(0LL);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v12 - 8) + 16LL))(a1, a2, v12);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 2LL;
      goto LABEL_7;
    case 3u:
      uint64_t v13 = type metadata accessor for CompositionResolutionError(0LL);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v13 - 8) + 16LL))(a1, a2, v13);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 3LL;
LABEL_7:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

void **assignWithCopy for SearchFlow.State(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of InformationRoutingFlow.State((uint64_t)a1, type metadata accessor for SearchFlow.State);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v6 = type metadata accessor for USOParse(0LL);
        (*(void (**)(void **, void **, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 0LL;
        goto LABEL_8;
      case 1u:
        unint64_t v10 = *a2;
        *a1 = *a2;
        id v11 = v10;
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 1LL;
        goto LABEL_8;
      case 2u:
        uint64_t v12 = type metadata accessor for RREntity(0LL);
        (*(void (**)(void **, void **, uint64_t))(*(void *)(v12 - 8) + 16LL))(a1, a2, v12);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 2LL;
        goto LABEL_8;
      case 3u:
        uint64_t v13 = type metadata accessor for CompositionResolutionError(0LL);
        (*(void (**)(void **, void **, uint64_t))(*(void *)(v13 - 8) + 16LL))(a1, a2, v13);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 3LL;
LABEL_8:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

void *initializeWithTake for SearchFlow.State(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v8 = type metadata accessor for CompositionResolutionError(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, a3, 3LL);
  }

  else if (EnumCaseMultiPayload == 2)
  {
    uint64_t v9 = type metadata accessor for RREntity(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32LL))(a1, a2, v9);
    swift_storeEnumTagMultiPayload(a1, a3, 2LL);
  }

  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v7 = type metadata accessor for USOParse(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

void *assignWithTake for SearchFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of InformationRoutingFlow.State((uint64_t)a1, type metadata accessor for SearchFlow.State);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 3)
    {
      uint64_t v8 = type metadata accessor for CompositionResolutionError(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, a3, 3LL);
    }

    else if (EnumCaseMultiPayload == 2)
    {
      uint64_t v9 = type metadata accessor for RREntity(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32LL))(a1, a2, v9);
      swift_storeEnumTagMultiPayload(a1, a3, 2LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      uint64_t v7 = type metadata accessor for USOParse(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t type metadata completion function for SearchFlow.State(uint64_t a1)
{
  uint64_t result = type metadata accessor for USOParse(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(result - 8) + 64LL;
    v6[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t result = type metadata accessor for RREntity(319LL);
    if (v4 <= 0x3F)
    {
      v6[2] = *(void *)(result - 8) + 64LL;
      uint64_t result = type metadata accessor for CompositionResolutionError(319LL);
      if (v5 <= 0x3F)
      {
        v6[3] = *(void *)(result - 8) + 64LL;
        swift_initEnumMetadataMultiPayload(a1, 256LL, 4LL, v6);
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v9 = *(void *)(a5(0LL) - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  uint64_t v13 = v11 * v5;
  unint64_t v14 = a3 + v13;
  unint64_t v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in SearchFlow.handleServerDrivenExperience(pommesResponse:rrEntities:)()
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(v0 + 16)
                                                         + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_experienceSelector)
                                           + 88LL))(*(void *)(v0 + 24));
}

uint64_t outlined init with take of Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t PegasusComponents.dialogs.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

uint64_t PegasusComponents.layouts.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 24));
}

uint64_t PegasusComponents.catDialogs.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 32));
}

uint64_t PegasusComponents.buttonViews.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 40));
}

uint64_t PegasusComponents.directExecutions.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 48));
}

uint64_t PegasusComponents.delayedActions.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 56));
}

uint64_t PegasusComponents.sayItComponents.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 64));
}

uint64_t PegasusComponents.disambiguationLists.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 72));
}

uint64_t PegasusComponents.domainObjectComponents.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 80));
}

BOOL PegasusComponents.isPatternExperience.getter()
{
  return *(void *)(*(void *)(v0 + 32) + 16LL) != 0LL;
}

uint64_t PegasusComponents.__allocating_init(dialogs:layouts:catDialogs:buttonViews:directExecutions:delayedActions:sayItComponents:disambiguationLists:domainObjectComponents:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v18 = swift_allocObject(v9, 88LL, 7LL);
  PegasusComponents.init(dialogs:layouts:catDialogs:buttonViews:directExecutions:delayedActions:sayItComponents:disambiguationLists:domainObjectComponents:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9);
  return v18;
}

void *PegasusComponents.init(dialogs:layouts:catDialogs:buttonViews:directExecutions:delayedActions:sayItComponents:disambiguationLists:domainObjectComponents:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v16, (uint64_t)static Logger.information);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(a6);
  swift_bridgeObjectRetain(a7);
  swift_bridgeObjectRetain(a8);
  uint64_t v17 = swift_bridgeObjectRetain(a9);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v27 = a8;
    uint64_t v20 = swift_slowAlloc(92LL, -1LL);
    *(_DWORD *)uint64_t v20 = 134220032;
    uint64_t v31 = *(void *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
    swift_bridgeObjectRelease(a1);
    *(_WORD *)(v20 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2048;
    uint64_t v31 = *(void *)(a2 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
    swift_bridgeObjectRelease(a2);
    *(_WORD *)(v20 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2048;
    os_log_type_t type = v19;
    uint64_t v21 = a3;
    uint64_t v31 = *(void *)(a3 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
    swift_bridgeObjectRelease(a3);
    *(_WORD *)(v20 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2048;
    uint64_t v22 = a4;
    uint64_t v31 = *(void *)(a4 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
    swift_bridgeObjectRelease(a4);
    *(_WORD *)(v20 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2048;
    uint64_t v31 = *(void *)(a5 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
    swift_bridgeObjectRelease(a5);
    *(_WORD *)(v20 + 5__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2048;
    uint64_t v31 = *(void *)(a6 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
    swift_bridgeObjectRelease(a6);
    *(_WORD *)(v20 + 6__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2048;
    uint64_t v31 = *(void *)(a7 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
    swift_bridgeObjectRelease(a7);
    *(_WORD *)(v20 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2048;
    uint64_t v31 = *(void *)(v27 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
    swift_bridgeObjectRelease(v27);
    *(_WORD *)(v20 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2048;
    uint64_t v31 = *(void *)(a9 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
    swift_bridgeObjectRelease(a9);
    _os_log_impl( &dword_0,  v18,  type,  "PegasusComponents:\n dialogs: %ld,\n layouts: %ld,\n catDialogs: %ld,\n buttonViews: %ld,\n directExecutions: %ld,\n delayedActions: %ld,\n sayItComponents: %ld,\n disambiguationLists: %ld,\n domainObjectComponents: %ld",  (uint8_t *)v20,  0x5Cu);
    uint64_t v23 = v20;
    a8 = v27;
    swift_slowDealloc(v23, -1LL, -1LL);

    uint64_t v24 = a1;
  }

  else
  {

    swift_bridgeObjectRelease(a9);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a5);
    uint64_t v22 = a4;
    swift_bridgeObjectRelease(a4);
    uint64_t v21 = a3;
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a2);
    uint64_t v24 = a1;
    swift_bridgeObjectRelease(a1);
  }

  v10[2] = v24;
  v10[3] = a2;
  v10[4] = v21;
  v10[5] = v22;
  v10[6] = a5;
  v10[7] = a6;
  v10[8] = a7;
  v10[9] = a8;
  v10[10] = a9;
  return v10;
}

void *PegasusComponents.deinit()
{
  return v0;
}

uint64_t PegasusComponents.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

uint64_t static PegasusComponentsParser.parseAlternateComponents(pegasusResult:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SingleExperience(0LL);
  uint64_t v60 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v54 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v3);
  uint64_t v55 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for PerformanceUtil.Ticket(0LL);
  uint64_t v57 = *(void *)(v5 - 8);
  uint64_t v58 = v5;
  __chkstk_darwin(v5);
  uint64_t v59 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v56 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience(0LL);
  uint64_t v54 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = Parse.PegasusResult.response.getter(v15);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter(v18);
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverDrivenExperience.getter(v19);
  uint64_t v20 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v21 = Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.alternateExperiences.getter(v20);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v8, v56);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v22 = type metadata accessor for Logger(0LL);
  uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.information);
  uint64_t v24 = swift_bridgeObjectRetain(v21);
  uint64_t v56 = v23;
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = v21;
    uint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v28 = 134217984;
    unint64_t v61 = *(void *)(v27 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62);
    swift_bridgeObjectRelease(v27);
    _os_log_impl(&dword_0, v25, v26, "PegasusResult: parseAlternateServerComponents : %ld", v28, 0xCu);
    uint64_t v29 = v28;
    uint64_t v21 = v27;
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  else
  {

    uint64_t v30 = swift_bridgeObjectRelease(v21);
  }

  uint64_t v31 = v59;
  uint64_t v32 = v55;
  Date.init()(v30);
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0xD00000000000002CLL,  0x80000000000804B0LL,  v32,  "InformationFlowPlugin/PegasusComponentsParser.swift",  51LL,  2LL,  96LL,  "parseAlternateComponents(pegasusResult:)",  40LL,  2);
  uint64_t v33 = (uint64_t)_swiftEmptyArrayStorage;
  unint64_t v61 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v34 = *(void *)(v21 + 16);
  if (v34)
  {
    unint64_t v35 = v21 + ((*(unsigned __int8 *)(v60 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80));
    uint64_t v36 = *(void *)(v60 + 72);
    unint64_t v37 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v60 + 16);
    uint64_t v55 = (char *)v21;
    swift_bridgeObjectRetain(v21);
    do
    {
      uint64_t v39 = v37(v2, v35, v0);
      uint64_t v40 = Apple_Parsec_Siri_V2alpha_SingleExperience.components.getter(v39);
      uint64_t v41 = specialized static PegasusComponentsParser.collateComponents(components:)(v40);
      swift_bridgeObjectRelease(v40);
      uint64_t v42 = (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v2, v0);
      if (v41)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v42);
        unint64_t v44 = *(void *)((char *)&dword_10 + (v61 & 0xFFFFFFFFFFFFFF8LL));
        unint64_t v43 = *(void *)((char *)&dword_18 + (v61 & 0xFFFFFFFFFFFFFF8LL));
        if (v44 >= v43 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1LL);
        }
        uint64_t v38 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, v41);
        specialized Array._endMutation()(v38);
      }

      v35 += v36;
      --v34;
    }

    while (v34);
    uint64_t v21 = (uint64_t)v55;
    swift_bridgeObjectRelease(v55);
    uint64_t v33 = v61;
    uint64_t v31 = v59;
  }

  swift_bridgeObjectRelease(v21);
  uint64_t v45 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v46 = static PerformanceUtil.shared.getter(v45);
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v31, 0LL);
  swift_release(v46);
  uint64_t v47 = swift_bridgeObjectRetain_n(v33, 2LL);
  uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
  os_log_type_t v49 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v50 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v50 = 134217984;
    if ((unint64_t)v33 >> 62)
    {
      if (v33 < 0) {
        uint64_t v53 = v33;
      }
      else {
        uint64_t v53 = v33 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v33);
      uint64_t v51 = _CocoaArrayWrapper.endIndex.getter(v53);
      swift_bridgeObjectRelease(v33);
    }

    else
    {
      uint64_t v51 = *(void *)((char *)&dword_10 + (v33 & 0xFFFFFFFFFFFFF8LL));
    }

    swift_bridgeObjectRelease(v33);
    unint64_t v61 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62);
    swift_bridgeObjectRelease(v33);
    _os_log_impl(&dword_0, v48, v49, "PegasusResult: parseAlternateServerComponents found : %ld", v50, 0xCu);
    swift_slowDealloc(v50, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v33, 2LL);
  }

  (*(void (**)(char *, uint64_t))(v57 + 8))(v31, v58);
  return v33;
}

void closure #1 in static PegasusComponentsParser.collateComponents(components:)( uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, unint64_t *a6, unint64_t *a7, unint64_t *a8, unint64_t *a9, unint64_t *a10)
{
  uint64_t v177 = a8;
  uint64_t v182 = a7;
  uint64_t v187 = a6;
  uint64_t v192 = a5;
  uint64_t v210 = a4;
  uint64_t v206 = a3;
  uint64_t v199 = a2;
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent(0LL);
  uint64_t v195 = *(void *)(v10 - 8);
  uint64_t v196 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v201 = (char *)&v169 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  id v200 = (char *)&v169 - v13;
  uint64_t v172 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DisambiguationListComponent(0LL);
  uint64_t v171 = *(void *)(v172 - 8);
  uint64_t v14 = __chkstk_darwin(v172);
  uint64_t v176 = (char *)&v169 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v175 = (char *)&v169 - v16;
  uint64_t v174 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ButtonViewComponent(0LL);
  uint64_t v173 = *(void *)(v174 - 8);
  uint64_t v17 = __chkstk_darwin(v174);
  uint64_t v181 = (char *)&v169 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v180 = (char *)&v169 - v19;
  uint64_t v179 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItComponent(0LL);
  uint64_t v178 = *(void *)(v179 - 8);
  uint64_t v20 = __chkstk_darwin(v179);
  uint64_t v186 = (char *)&v169 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v185 = (char *)&v169 - v22;
  uint64_t v184 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent(0LL);
  uint64_t v183 = *(void *)(v184 - 8);
  uint64_t v23 = __chkstk_darwin(v184);
  uint64_t v191 = (char *)&v169 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23);
  uint64_t v190 = (char *)&v169 - v25;
  uint64_t v189 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent(0LL);
  uint64_t v188 = *(void *)(v189 - 8);
  uint64_t v26 = __chkstk_darwin(v189);
  uint64_t v194 = (char *)&v169 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26);
  uint64_t v193 = (char *)&v169 - v28;
  uint64_t v29 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v211 = (char *)&v169 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v31);
  uint64_t v34 = (char *)&v169 - v33;
  uint64_t v35 = type metadata accessor for Apple_Parsec_Siri_V2alpha_CatDialogComponent(0LL);
  uint64_t v204 = *(void *)(v35 - 8);
  uint64_t v205 = v35;
  uint64_t v36 = __chkstk_darwin(v35);
  uint64_t v209 = (char *)&v169 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v36);
  uint64_t v208 = (char *)&v169 - v38;
  uint64_t v39 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent(0LL);
  uint64_t v197 = *(void *)(v39 - 8);
  uint64_t v198 = v39;
  uint64_t v40 = __chkstk_darwin(v39);
  uint64_t v203 = (char *)&v169 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v40);
  uint64_t v202 = (char *)&v169 - v42;
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  __chkstk_darwin(v43);
  uint64_t v45 = (char *)&v169 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component(0LL);
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = __chkstk_darwin(v46);
  uint64_t v169 = (char *)&v169 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v50 = __chkstk_darwin(v48);
  uint64_t v170 = (char *)&v169 - v51;
  uint64_t v52 = __chkstk_darwin(v50);
  uint64_t v54 = (char *)&v169 - v53;
  uint64_t v55 = __chkstk_darwin(v52);
  uint64_t v57 = (char *)&v169 - v56;
  Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter(v55);
  uint64_t v58 = v46;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1LL, v46) == 1)
  {
    outlined destroy of Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?((uint64_t)v45);
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v59 = type metadata accessor for Logger(0LL);
    uint64_t v60 = __swift_project_value_buffer(v59, (uint64_t)static Logger.information);
    unint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
    os_log_type_t v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v63 = 0;
      _os_log_impl(&dword_0, v61, v62, "PegasusResult component missing type", v63, 2u);
      swift_slowDealloc(v63, -1LL, -1LL);
    }

    return;
  }

  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v57, v45, v46);
  uint64_t v64 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
  v64(v54, v57, v46);
  int v65 = (*(uint64_t (**)(char *, uint64_t))(v47 + 88))(v54, v46);
  uint64_t v66 = v47;
  unint64_t v67 = v57;
  unint64_t v68 = v54;
  uint64_t v207 = v66;
  if (v65 == enum case for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component.renderedDialog(_:))
  {
    (*(void (**)(char *, uint64_t))(v66 + 96))(v54, v58);
    uint64_t v69 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    v69(v34, v54, v29);
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v211, v34, v29);
    uint64_t v70 = v210;
    unint64_t v71 = *v210;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v210);
    *uint64_t v70 = v71;
    unint64_t v73 = v67;
    uint64_t v74 = v58;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v71 + 16) + 1LL,  1,  v71);
      *uint64_t v210 = v71;
    }

    unint64_t v76 = *(void *)(v71 + 16);
    unint64_t v75 = *(void *)(v71 + 24);
    if (v76 >= v75 >> 1)
    {
      unint64_t v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v75 > 1,  v76 + 1,  1,  v71);
      *uint64_t v210 = v71;
    }

    *(void *)(v71 + 16) = v76 + 1;
    v69( (char *)(v71 + ((*(unsigned __int8 *)(v30 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))
             + *(void *)(v30 + 72) * v76),
      v211,
      v29);
    uint64_t v77 = *(void (**)(char *, uint64_t))(v30 + 8);
    uint64_t v78 = v34;
    uint64_t v79 = v29;
    goto LABEL_13;
  }

  if (v65 == enum case for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component.catDialog(_:))
  {
    (*(void (**)(char *, uint64_t))(v207 + 96))(v54, v58);
    uint64_t v84 = v204;
    uint64_t v83 = v205;
    uint64_t v85 = *(void (**)(char *, char *, uint64_t))(v204 + 32);
    uint64_t v86 = v208;
    v85(v208, v68, v205);
    (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v209, v86, v83);
    uint64_t v87 = v206;
    unint64_t v88 = *v206;
    char v89 = swift_isUniquelyReferenced_nonNull_native(*v206);
    unint64_t *v87 = v88;
    uint64_t v90 = v67;
    if ((v89 & 1) == 0)
    {
      unint64_t v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v88 + 16) + 1LL,  1,  v88);
      unint64_t *v87 = v88;
    }

    unint64_t v92 = *(void *)(v88 + 16);
    unint64_t v91 = *(void *)(v88 + 24);
    if (v92 >= v91 >> 1)
    {
      unint64_t v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v91 > 1,  v92 + 1,  1,  v88);
      unint64_t *v87 = v88;
    }

    *(void *)(v88 + 16) = v92 + 1;
    v85( (char *)(v88 + ((*(unsigned __int8 *)(v84 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80))
             + *(void *)(v84 + 72) * v92),
      v209,
      v83);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v208, v83);
    os_log_type_t v80 = *(void (**)(char *, uint64_t))(v207 + 8);
    uint64_t v81 = v90;
    uint64_t v82 = v58;
    goto LABEL_21;
  }

  if (v65 == enum case for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component.layoutExperience(_:))
  {
    (*(void (**)(char *, uint64_t))(v207 + 96))(v54, v58);
    uint64_t v94 = v197;
    uint64_t v93 = v198;
    uint64_t v95 = *(void (**)(char *, char *, uint64_t))(v197 + 32);
    uint64_t v96 = v202;
    v95(v202, v54, v198);
    (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v203, v96, v93);
    uint64_t v97 = v199;
    unint64_t v98 = *v199;
    char v99 = swift_isUniquelyReferenced_nonNull_native(*v199);
    *uint64_t v97 = v98;
    uint64_t v74 = v58;
    if ((v99 & 1) == 0)
    {
      unint64_t v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v98 + 16) + 1LL,  1,  v98);
      *uint64_t v97 = v98;
    }

    unint64_t v101 = *(void *)(v98 + 16);
    unint64_t v100 = *(void *)(v98 + 24);
    if (v101 >= v100 >> 1)
    {
      unint64_t v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v100 > 1,  v101 + 1,  1,  v98);
      *uint64_t v97 = v98;
    }

    *(void *)(v98 + 16) = v101 + 1;
    v95( (char *)(v98 + ((*(unsigned __int8 *)(v94 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80))
             + *(void *)(v94 + 72) * v101),
      v203,
      v93);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v202, v93);
    os_log_type_t v80 = *(void (**)(char *, uint64_t))(v207 + 8);
    uint64_t v81 = v67;
    goto LABEL_14;
  }

  if (v65 == enum case for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component.domainObjectComponent(_:))
  {
    (*(void (**)(char *, uint64_t))(v207 + 96))(v54, v58);
    uint64_t v103 = v195;
    uint64_t v102 = v196;
    char v104 = *(void (**)(char *, char *, uint64_t))(v195 + 32);
    uint64_t v105 = v200;
    v104(v200, v54, v196);
    (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v201, v105, v102);
    unint64_t v106 = *a10;
    char v107 = swift_isUniquelyReferenced_nonNull_native(*a10);
    *a10 = v106;
    unint64_t v73 = v57;
    uint64_t v74 = v58;
    if ((v107 & 1) == 0)
    {
      unint64_t v106 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v106 + 16) + 1LL,  1,  v106);
      *a10 = v106;
    }

    unint64_t v109 = *(void *)(v106 + 16);
    unint64_t v108 = *(void *)(v106 + 24);
    if (v109 >= v108 >> 1)
    {
      unint64_t v106 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v108 > 1,  v109 + 1,  1,  v106);
      *a10 = v106;
    }

    *(void *)(v106 + 16) = v109 + 1;
    v104( (char *)(v106 + ((*(unsigned __int8 *)(v103 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80))
             + *(void *)(v103 + 72) * v109),
      v201,
      v102);
    uint64_t v77 = *(void (**)(char *, uint64_t))(v103 + 8);
    uint64_t v78 = v200;
LABEL_34:
    uint64_t v79 = v102;
LABEL_13:
    v77(v78, v79);
    os_log_type_t v80 = *(void (**)(char *, uint64_t))(v207 + 8);
    uint64_t v81 = v73;
LABEL_14:
    uint64_t v82 = v74;
LABEL_21:
    v80(v81, v82);
    return;
  }

  if (v65 == enum case for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component.directExecutionComponent(_:))
  {
    (*(void (**)(char *, uint64_t))(v207 + 96))(v54, v58);
    uint64_t v110 = v188;
    uint64_t v111 = *(void (**)(char *, char *, uint64_t))(v188 + 32);
    uint64_t v112 = v193;
    uint64_t v113 = v189;
    v111(v193, v54, v189);
    (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v194, v112, v113);
    int v114 = v192;
    unint64_t v115 = *v192;
    char v116 = swift_isUniquelyReferenced_nonNull_native(*v192);
    *int v114 = v115;
    uint64_t v117 = v58;
    if ((v116 & 1) == 0)
    {
      unint64_t v115 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v115 + 16) + 1LL,  1,  v115);
      *int v114 = v115;
    }

    unint64_t v119 = *(void *)(v115 + 16);
    unint64_t v118 = *(void *)(v115 + 24);
    if (v119 >= v118 >> 1)
    {
      unint64_t v115 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v118 > 1,  v119 + 1,  1,  v115);
      *int v114 = v115;
    }

    *(void *)(v115 + 16) = v119 + 1;
    v111( (char *)(v115 + ((*(unsigned __int8 *)(v110 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80))
             + *(void *)(v110 + 72) * v119),
      v194,
      v113);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v193, v113);
LABEL_59:
    (*(void (**)(char *, uint64_t))(v207 + 8))(v57, v117);
    return;
  }

  if (v65 == enum case for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component.delayedActionComponent(_:))
  {
    (*(void (**)(char *, uint64_t))(v207 + 96))(v54, v58);
    uint64_t v120 = v183;
    uint64_t v121 = *(void (**)(char *, char *, uint64_t))(v183 + 32);
    uint64_t v122 = v190;
    uint64_t v123 = v184;
    v121(v190, v54, v184);
    (*(void (**)(char *, char *, uint64_t))(v120 + 16))(v191, v122, v123);
    uint64_t v124 = v187;
    unint64_t v125 = *v187;
    char v126 = swift_isUniquelyReferenced_nonNull_native(*v187);
    *uint64_t v124 = v125;
    uint64_t v117 = v58;
    if ((v126 & 1) == 0)
    {
      unint64_t v125 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v125 + 16) + 1LL,  1,  v125);
      *uint64_t v124 = v125;
    }

    unint64_t v128 = *(void *)(v125 + 16);
    unint64_t v127 = *(void *)(v125 + 24);
    if (v128 >= v127 >> 1)
    {
      unint64_t v125 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v127 > 1,  v128 + 1,  1,  v125);
      *uint64_t v124 = v125;
    }

    *(void *)(v125 + 16) = v128 + 1;
    v121( (char *)(v125 + ((*(unsigned __int8 *)(v120 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80))
             + *(void *)(v120 + 72) * v128),
      v191,
      v123);
    (*(void (**)(char *, uint64_t))(v120 + 8))(v190, v123);
    goto LABEL_59;
  }

  if (v65 == enum case for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component.sayItComponent(_:))
  {
    (*(void (**)(char *, uint64_t))(v207 + 96))(v54, v58);
    uint64_t v129 = v178;
    uint64_t v130 = *(void (**)(char *, char *, uint64_t))(v178 + 32);
    uint64_t v131 = v185;
    uint64_t v132 = v179;
    v130(v185, v54, v179);
    (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v186, v131, v132);
    uint64_t v133 = v182;
    unint64_t v134 = *v182;
    char v135 = swift_isUniquelyReferenced_nonNull_native(*v182);
    *uint64_t v133 = v134;
    uint64_t v117 = v58;
    if ((v135 & 1) == 0)
    {
      unint64_t v134 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v134 + 16) + 1LL,  1,  v134);
      *uint64_t v133 = v134;
    }

    unint64_t v137 = *(void *)(v134 + 16);
    unint64_t v136 = *(void *)(v134 + 24);
    if (v137 >= v136 >> 1)
    {
      unint64_t v134 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v136 > 1,  v137 + 1,  1,  v134);
      *uint64_t v133 = v134;
    }

    *(void *)(v134 + 16) = v137 + 1;
    v130( (char *)(v134 + ((*(unsigned __int8 *)(v129 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v129 + 80))
             + *(void *)(v129 + 72) * v137),
      v186,
      v132);
    (*(void (**)(char *, uint64_t))(v129 + 8))(v185, v132);
    goto LABEL_59;
  }

  if (v65 == enum case for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component.buttonViewComponent(_:))
  {
    (*(void (**)(char *, uint64_t))(v207 + 96))(v54, v58);
    uint64_t v138 = v173;
    uint64_t v139 = *(void (**)(char *, char *, uint64_t))(v173 + 32);
    char v140 = v180;
    uint64_t v141 = v174;
    v139(v180, v54, v174);
    (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v181, v140, v141);
    uint64_t v142 = v177;
    unint64_t v143 = *v177;
    char v144 = swift_isUniquelyReferenced_nonNull_native(*v177);
    *uint64_t v142 = v143;
    uint64_t v117 = v58;
    if ((v144 & 1) == 0)
    {
      unint64_t v143 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v143 + 16) + 1LL,  1,  v143);
      *uint64_t v142 = v143;
    }

    unint64_t v146 = *(void *)(v143 + 16);
    unint64_t v145 = *(void *)(v143 + 24);
    if (v146 >= v145 >> 1)
    {
      unint64_t v143 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v145 > 1,  v146 + 1,  1,  v143);
      *uint64_t v142 = v143;
    }

    *(void *)(v143 + 16) = v146 + 1;
    v139( (char *)(v143 + ((*(unsigned __int8 *)(v138 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80))
             + *(void *)(v138 + 72) * v146),
      v181,
      v141);
    (*(void (**)(char *, uint64_t))(v138 + 8))(v180, v141);
    goto LABEL_59;
  }

  if (v65 == enum case for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component.disambiguationListComponent(_:))
  {
    (*(void (**)(char *, uint64_t))(v207 + 96))(v54, v58);
    uint64_t v147 = v171;
    uint64_t v148 = *(void (**)(char *, char *, uint64_t))(v171 + 32);
    uint64_t v149 = v175;
    uint64_t v102 = v172;
    v148(v175, v54, v172);
    (*(void (**)(char *, char *, uint64_t))(v147 + 16))(v176, v149, v102);
    unint64_t v150 = *a9;
    char v151 = swift_isUniquelyReferenced_nonNull_native(*a9);
    *a9 = v150;
    unint64_t v73 = v57;
    uint64_t v74 = v58;
    if ((v151 & 1) == 0)
    {
      unint64_t v150 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v150 + 16) + 1LL,  1,  v150);
      *a9 = v150;
    }

    unint64_t v153 = *(void *)(v150 + 16);
    unint64_t v152 = *(void *)(v150 + 24);
    if (v153 >= v152 >> 1)
    {
      unint64_t v150 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v152 > 1,  v153 + 1,  1,  v150);
      *a9 = v150;
    }

    *(void *)(v150 + 16) = v153 + 1;
    v148( (char *)(v150 + ((*(unsigned __int8 *)(v147 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v147 + 80))
             + *(void *)(v147 + 72) * v153),
      v176,
      v102);
    uint64_t v77 = *(void (**)(char *, uint64_t))(v147 + 8);
    uint64_t v78 = v175;
    goto LABEL_34;
  }

  uint64_t v211 = v54;
  uint64_t v154 = v58;
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v155 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v155, (uint64_t)static Logger.information);
  uint64_t v156 = v170;
  uint64_t v157 = ((uint64_t (*)(char *, char *, uint64_t))v64)(v170, v57, v58);
  uint64_t v158 = (os_log_s *)Logger.logObject.getter(v157);
  os_log_type_t v159 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v158, v159))
  {
    uint64_t v160 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v161 = swift_slowAlloc(32LL, -1LL);
    uint64_t v214 = v161;
    uint64_t v210 = (unint64_t *)v57;
    *(_DWORD *)uint64_t v160 = 136315138;
    uint64_t v209 = (char *)(v160 + 4);
    char v162 = v169;
    v64(v169, v156, v154);
    uint64_t v163 = String.init<A>(describing:)(v162, v154);
    uint64_t v164 = v156;
    unint64_t v166 = v165;
    uint64_t v212 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v163, v165, &v214);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v212, v213);
    swift_bridgeObjectRelease(v166);
    uint64_t v167 = *(void (**)(char *, uint64_t))(v207 + 8);
    v167(v164, v154);
    _os_log_impl(&dword_0, v158, v159, "PegasusResult unknown component %s", v160, 0xCu);
    swift_arrayDestroy(v161, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v161, -1LL, -1LL);
    swift_slowDealloc(v160, -1LL, -1LL);

    uint64_t v168 = v210;
  }

  else
  {

    uint64_t v167 = *(void (**)(char *, uint64_t))(v207 + 8);
    v167(v156, v58);
    uint64_t v168 = (unint64_t *)v57;
  }

  v167((char *)v168, v154);
  v167(v211, v154);
}

uint64_t specialized static PegasusComponentsParser.parseLegacyComponents(pegasusResult:)()
{
  uint64_t v0 = type metadata accessor for Date(0LL);
  uint64_t v39 = *(void *)(v0 - 8);
  uint64_t v40 = v0;
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v35 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience(0LL);
  uint64_t v37 = *(void *)(v3 - 8);
  uint64_t v38 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse(0LL);
  uint64_t v36 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = __swift_project_value_buffer(v13, (uint64_t)static Logger.information);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v20 = static os_log_type_t.debug.getter(v15, v16, v17, v18, v19);
  if (os_log_type_enabled(v15, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    uint64_t v35 = v10;
    uint64_t v22 = v21;
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl(&dword_0, v15, v20, "PegasusResult: parseLegacyServerComponents", v21, 2u);
    uint64_t v10 = v35;
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  uint64_t v24 = Parse.PegasusResult.response.getter(v23);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter(v24);
  uint64_t v25 = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v12, v10);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverDrivenExperience.getter(v25);
  uint64_t v26 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v27 = Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.components.getter(v26);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v5, v38);
  uint64_t v28 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v29 = static PerformanceUtil.shared.getter(v28);
  uint64_t v30 = __chkstk_darwin(v29);
  Date.init()(v30);
  uint64_t v33 = &v32;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PegasusComponents?);
  LOBYTE(v3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2;
  ((void (*)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t *@<X8>)))dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:))( &v41,  0xD000000000000023LL,  0x8000000000080620LL,  0LL,  v2,  "InformationFlowPlugin/PegasusComponentsParser.swift",  51LL,  2LL,  72LL,  "parseLegacyComponents(pegasusResult:)",  37LL,  v32,  partial apply for closure #1 in static PegasusComponentsParser.parseLegacyComponents(pegasusResult:));
  swift_release(v29);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v2, v40);
  swift_bridgeObjectRelease(v27);
  return v41;
}

uint64_t specialized static PegasusComponentsParser.collateComponents(components:)(uint64_t a1)
{
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v2, (uint64_t)static Logger.information);
  uint64_t v3 = swift_bridgeObjectRetain(a1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v6 = 134217984;
    uint64_t v31 = *(void **)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
    swift_bridgeObjectRelease(a1);
    _os_log_impl(&dword_0, v4, v5, "PegasusResult: sorting pegasus components : %ld", v6, 0xCu);
    swift_slowDealloc(v6, -1LL, -1LL);

    uint64_t v7 = *(void *)(a1 + 16);
    if (v7) {
      goto LABEL_5;
    }
    return 0LL;
  }

  swift_bridgeObjectRelease(a1);
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7) {
    return 0LL;
  }
LABEL_5:
  uint64_t v30 = _swiftEmptyArrayStorage;
  uint64_t v31 = _swiftEmptyArrayStorage;
  uint64_t v28 = _swiftEmptyArrayStorage;
  uint64_t v29 = _swiftEmptyArrayStorage;
  uint64_t v26 = _swiftEmptyArrayStorage;
  uint64_t v27 = _swiftEmptyArrayStorage;
  uint64_t v24 = _swiftEmptyArrayStorage;
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v23 = _swiftEmptyArrayStorage;
  uint64_t v8 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent(0LL) - 8);
  uint64_t v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v10 = *(void *)(v8 + 72);
  swift_bridgeObjectRetain(a1);
  do
  {
    closure #1 in static PegasusComponentsParser.collateComponents(components:)( v9,  (unint64_t *)&v30,  (unint64_t *)&v29,  (unint64_t *)&v31,  (unint64_t *)&v27,  (unint64_t *)&v26,  (unint64_t *)&v25,  (unint64_t *)&v28,  (unint64_t *)&v24,  (unint64_t *)&v23);
    v9 += v10;
    --v7;
  }

  while (v7);
  swift_bridgeObjectRelease(a1);
  uint64_t v12 = (uint64_t)v30;
  uint64_t v11 = (uint64_t)v31;
  uint64_t v14 = (uint64_t)v28;
  uint64_t v13 = (uint64_t)v29;
  uint64_t v16 = (uint64_t)v26;
  uint64_t v15 = (uint64_t)v27;
  uint64_t v18 = (uint64_t)v24;
  uint64_t v17 = (uint64_t)v25;
  uint64_t v19 = (uint64_t)v23;
  uint64_t v20 = type metadata accessor for PegasusComponents();
  uint64_t v21 = swift_allocObject(v20, 88LL, 7LL);
  PegasusComponents.init(dialogs:layouts:catDialogs:buttonViews:directExecutions:delayedActions:sayItComponents:disambiguationLists:domainObjectComponents:)( v11,  v12,  v13,  v14,  v15,  v16,  v17,  v18,  v19);
  return v21;
}

uint64_t specialized static PegasusComponentsParser.parsePrimaryComponents(pegasusResult:)()
{
  uint64_t v0 = type metadata accessor for Date(0LL);
  uint64_t v49 = *(void *)(v0 - 8);
  uint64_t v50 = v0;
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v41 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction(0LL);
  uint64_t v45 = *(void *)(v7 - 8);
  uint64_t v46 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse(0LL);
  uint64_t v43 = *(void *)(v10 - 8);
  uint64_t v44 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SingleExperience(0LL);
  uint64_t v47 = *(void *)(v13 - 8);
  uint64_t v48 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = __swift_project_value_buffer(v16, (uint64_t)static Logger.information);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v23 = static os_log_type_t.debug.getter(v18, v19, v20, v21, v22);
  if (os_log_type_enabled(v18, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    uint64_t v42 = v15;
    uint64_t v25 = v4;
    uint64_t v26 = v2;
    uint64_t v27 = v3;
    uint64_t v28 = v24;
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl(&dword_0, v18, v23, "PegasusResult: parsePrimaryServerComponents", v24, 2u);
    uint64_t v29 = v28;
    uint64_t v3 = v27;
    uint64_t v2 = v26;
    uint64_t v4 = v25;
    uint64_t v15 = v42;
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  uint64_t v31 = Parse.PegasusResult.response.getter(v30);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter(v31);
  uint64_t v32 = (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v12, v44);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverDrivenExperience.getter(v32);
  uint64_t v33 = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v9, v46);
  Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter(v33);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v34 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v35 = static PerformanceUtil.shared.getter(v34);
  uint64_t v36 = __chkstk_darwin(v35);
  Date.init()(v36);
  uint64_t v39 = &v38;
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PegasusComponents?);
  LOBYTE(v38) = 2;
  ((void (*)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t *@<X8>)))dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:))( &v51,  0xD000000000000023LL,  0x8000000000080620LL,  0LL,  v2,  "InformationFlowPlugin/PegasusComponentsParser.swift",  51LL,  2LL,  85LL,  "parsePrimaryComponents(pegasusResult:)",  38LL,  v38,  partial apply for closure #1 in static PegasusComponentsParser.parsePrimaryComponents(pegasusResult:));
  swift_release(v35);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v2, v50);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v15, v48);
  return v51;
}

uint64_t specialized static PegasusComponentsParser.parsePegasusRenderOptions(response:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = __swift_project_value_buffer(v8, (uint64_t)static Logger.information);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v15 = static os_log_type_t.debug.getter(v10, v11, v12, v13, v14);
  if (os_log_type_enabled(v10, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl(&dword_0, v10, v15, "PegasusResult: parsePegasusRenderOptions", v16, 2u);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  uint64_t v18 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter(v17);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverDrivenExperience.getter(v18);
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  char v20 = Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.isImmersiveExperience.getter(v19);
  uint64_t v21 = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if ((v20 & 1) == 0) {
    return 0LL;
  }
  __chkstk_darwin(v21);
  *((_BYTE *)&v24 - 16) = 1;
  id v22 = objc_allocWithZone((Class)type metadata accessor for PommesRenderOptions(0LL));
  return PommesRenderOptions.init(_:)( partial apply for closure #1 in static PegasusComponentsParser.parsePegasusRenderOptions(response:),  &v24 - 4);
}

uint64_t type metadata accessor for PegasusComponents()
{
  return objc_opt_self(&OBJC_CLASS____TtC21InformationFlowPlugin17PegasusComponents);
}

ValueMetadata *type metadata accessor for PegasusComponentsParser()
{
  return &type metadata for PegasusComponentsParser;
}

uint64_t partial apply for closure #1 in static PegasusComponentsParser.parsePegasusRenderOptions(response:)()
{
  return PommesRenderOptions.Builder.isImmersiveExperience.setter(*(unsigned __int8 *)(v0 + 16));
}

uint64_t partial apply for closure #1 in static PegasusComponentsParser.parsePrimaryComponents(pegasusResult:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = Apple_Parsec_Siri_V2alpha_SingleExperience.components.getter(a1);
  uint64_t v4 = specialized static PegasusComponentsParser.collateComponents(components:)(v3);
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t outlined destroy of Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in static PegasusComponentsParser.parseLegacyComponents(pegasusResult:)@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = specialized static PegasusComponentsParser.collateComponents(components:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

uint64_t PegasusFlowEventLogger.__allocating_init(pommesResponse:domainName:eventType:eventSending:)( void *a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = swift_allocObject(v6, 84LL, 7LL);
  *(void *)(v12 + 16) = a1;
  outlined init with copy of OutputPublisherAsync((uint64_t)a5, v12 + 24);
  if (a1)
  {
    id v13 = a1;
    a2 = PommesResponse.metadataDomainName.getter();
    uint64_t v15 = v14;

    __swift_destroy_boxed_opaque_existential_1(a5);
    swift_bridgeObjectRelease(a3);
    a3 = v15;
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_1(a5);
  }

  *(void *)(v12 + 64) = a2;
  *(void *)(v12 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a3;
  *(_DWORD *)(v12 + 80) = a4;
  return v12;
}

void *PegasusFlowEventLogger.pommesResponse.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

uint64_t PegasusFlowEventLogger.eventSending.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync(v1 + 24, a1);
}

uint64_t PegasusFlowEventLogger.metadataDomainName.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain(*(void *)(v0 + 72));
  return v1;
}

uint64_t PegasusFlowEventLogger.eventType.getter()
{
  return *(unsigned int *)(v0 + 80);
}

uint64_t PegasusFlowEventLogger.init(pommesResponse:domainName:eventType:eventSending:)( void *a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  uint64_t v6 = v5;
  *(void *)(v6 + 16) = a1;
  outlined init with copy of OutputPublisherAsync((uint64_t)a5, v6 + 24);
  if (a1)
  {
    id v12 = a1;
    a2 = PommesResponse.metadataDomainName.getter();
    uint64_t v14 = v13;

    __swift_destroy_boxed_opaque_existential_1(a5);
    swift_bridgeObjectRelease(a3);
    a3 = v14;
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_1(a5);
  }

  *(void *)(v6 + 64) = a2;
  *(void *)(v6 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a3;
  *(_DWORD *)(v6 + 80) = a4;
  return v6;
}

uint64_t PegasusFlowEventLogger.__allocating_init()()
{
  return (*(uint64_t (**)(void, uint64_t, unint64_t, void, void *))(v0 + 112))( 0LL,  0x54746E6572727543LL,  0xEB000000006B7361LL,  0LL,  v2);
}

uint64_t PegasusFlowEventLogger.__allocating_init(eventType:)(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, unint64_t, uint64_t, void *))(v1 + 112))( 0LL,  0x54746E6572727543LL,  0xEB000000006B7361LL,  a1,  v4);
}

uint64_t PegasusFlowEventLogger.logGenericFlowStepEvent(stateType:parameterName:statusReason:statusReasonDescription:taskType:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v45 = a5;
  uint64_t v46 = a8;
  uint64_t v43 = a2;
  uint64_t v44 = a7;
  uint64_t v42 = a4;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for ActivityType(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  uint64_t v21 = __swift_project_value_buffer(v20, (uint64_t)static Logger.information);
  id v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    uint64_t v41 = v17;
    uint64_t v25 = v16;
    uint64_t v26 = v15;
    uint64_t v27 = a6;
    uint64_t v28 = a3;
    uint64_t v29 = a1;
    uint64_t v30 = v24;
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl(&dword_0, v22, v23, "Logging generic SELF FlowStep event", v24, 2u);
    uint64_t v31 = v30;
    a1 = v29;
    a3 = v28;
    a6 = v27;
    uint64_t v15 = v26;
    uint64_t v16 = v25;
    uint64_t v17 = v41;
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  type metadata accessor for SiriKitEvent(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a1, v16);
  uint64_t v32 = v9[8];
  uint64_t v33 = v9[9];
  outlined init with copy of SiriKitReliabilityCodes?(v42, (uint64_t)v15);
  uint64_t v34 = (void *)swift_allocObject(&unk_97FA8, 64LL, 7LL);
  uint64_t v35 = v46;
  v34[2] = v44;
  v34[3] = v35;
  v34[4] = v43;
  v34[5] = a3;
  v34[6] = v45;
  v34[7] = a6;
  swift_bridgeObjectRetain(a6);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(a3);
  uint64_t v36 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)( v19,  v32,  v33,  v15,  partial apply for closure #1 in PegasusFlowEventLogger.logGenericFlowStepEvent(stateType:parameterName:statusReason:statusReasonDescription:taskType:),  v34);
  uint64_t v37 = v9 + 3;
  uint64_t v39 = v9[6];
  uint64_t v38 = v9[7];
  __swift_project_boxed_opaque_existential_1(v37, v39);
  dispatch thunk of SiriKitEventSending.send(_:)(v36, v39, v38);
  return swift_release(v36);
}

uint64_t closure #1 in PegasusFlowEventLogger.logGenericFlowStepEvent(stateType:parameterName:statusReason:statusReasonDescription:taskType:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter(a6, a7);
}

Swift::tuple_taskType_String_optional_isTerminalStepLogged_Bool __swiftcall PegasusFlowEventLogger.logFlowEventsFromPommesResponse()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  __chkstk_darwin(v2);
  uint64_t v50 = &v42[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v4 = type metadata accessor for ActivityType(0LL);
  uint64_t v48 = *(void *)(v4 - 8);
  uint64_t v49 = v4;
  __chkstk_darwin(v4);
  uint64_t v47 = &v42[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v51 = type metadata accessor for PerformanceUtil.Ticket(0LL);
  uint64_t v6 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v8 = &v42[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v20 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = &v42[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v13 = static PerformanceUtil.shared.getter(v12);
  Date.init()(v13);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (taskType: String?, isTerminalStepLogged: Bool));
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( &v52,  0xD00000000000002BLL,  0x80000000000806B0LL,  0LL,  v11,  "InformationFlowPlugin/PegasusFlowEventLogger.swift",  50LL,  2LL,  61LL,  "logFlowEventsFromPommesResponse()",  33LL,  2,  partial apply for closure #1 in PegasusFlowEventLogger.logFlowEventsFromPommesResponse(),  v1,  v14);
  uint64_t v15 = v6;
  uint64_t v16 = v12;
  swift_release(v13);
  uint64_t v17 = (*(uint64_t (**)(_BYTE *, uint64_t))(v20 + 8))(v11, v9);
  uint64_t v18 = v52;
  uint64_t v19 = v53;
  LODWORD(v20) = v54;
  if (v53)
  {
    uint64_t v21 = swift_bridgeObjectRetain(v53);
    Date.init()(v21);
    LOBYTE(v41) = 2;
    PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0xD000000000000026LL,  0x8000000000080780LL,  v11,  "InformationFlowPlugin/PegasusFlowEventLogger.swift",  50LL,  2LL,  65LL,  "logFlowEventsFromPommesResponse()",  33LL,  v41);
    (*(void (**)(uint64_t, void *))(*v1 + 144LL))(v18, v19);
    uint64_t v22 = swift_bridgeObjectRelease(v19);
    uint64_t v23 = static PerformanceUtil.shared.getter(v22);
    dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v8, 0LL);
    swift_release(v23);
    uint64_t v17 = (*(uint64_t (**)(_BYTE *, uint64_t))(v15 + 8))(v8, v51);
  }

  if (v1[2])
  {
  }

  else if ((v20 & 1) != 0)
  {
    goto LABEL_12;
  }

  uint64_t v46 = v15;
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  int v43 = v20;
  uint64_t v44 = v18;
  uint64_t v45 = v16;
  uint64_t v24 = type metadata accessor for Logger(0LL);
  uint64_t v25 = __swift_project_value_buffer(v24, (uint64_t)static Logger.information);
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl(&dword_0, v26, v27, "RenderPegasusFlow FlowTask logging completed", v28, 2u);
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  Date.init()(v29);
  LOBYTE(v41) = 2;
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0xD00000000000002FLL,  0x8000000000080750LL,  v11,  "InformationFlowPlugin/PegasusFlowEventLogger.swift",  50LL,  2LL,  73LL,  "logFlowEventsFromPommesResponse()",  33LL,  v41);
  uint64_t v30 = v47;
  uint64_t v20 = v48;
  uint64_t v31 = v49;
  (*(void (**)(_BYTE *, void, uint64_t))(v48 + 104))(v47, enum case for ActivityType.completed(_:), v49);
  uint64_t v32 = enum case for SiriKitReliabilityCodes.normal(_:);
  uint64_t v33 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = (uint64_t)v50;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v34 + 104))(v50, v32, v33);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v35, 0LL, 1LL, v33);
  (*(void (**)(_BYTE *, uint64_t, unint64_t, uint64_t, void, unint64_t, uint64_t, unint64_t))(*v1 + 120LL))( v30,  0x6C7070615F746F6ELL,  0xEE00656C62616369LL,  v35,  0LL,  0xE000000000000000LL,  0x54746E6572727543LL,  0xEB000000006B7361LL);
  outlined destroy of SiriKitReliabilityCodes?(v35);
  uint64_t v36 = (*(uint64_t (**)(_BYTE *, uint64_t))(v20 + 8))(v30, v31);
  uint64_t v37 = static PerformanceUtil.shared.getter(v36);
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v8, 0LL);
  swift_release(v37);
  (*(void (**)(_BYTE *, uint64_t))(v46 + 8))(v8, v51);
  uint64_t v18 = v44;
  LOBYTE(v20) = v43;
LABEL_12:
  uint64_t v38 = v18;
  uint64_t v39 = v19;
  Swift::Bool v40 = v20;
  result.taskType.value._object = v39;
  result.taskType.value._uint64_t countAndFlagsBits = v38;
  result.isTerminalStepLogged = v40;
  return result;
}

Swift::tuple_taskType_String_optional_isTerminalStepLogged_Bool __swiftcall PegasusFlowEventLogger.logPegasusFlowStepEventFromPommesResponse()()
{
  Swift::Bool v42 = 0;
  uint64_t v1 = (void *)v0[2];
  if (!v1)
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v30 = type metadata accessor for Logger(0LL);
    uint64_t v31 = __swift_project_value_buffer(v30, (uint64_t)static Logger.information);
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl(&dword_0, v32, v33, "Pommes response is nil, no SELF Flow event could be logged from it", v34, 2u);
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    goto LABEL_19;
  }

  uint64_t v2 = v0;
  unint64_t v41 = (unint64_t)_swiftEmptyArrayStorage;
  id v3 = v1;
  uint64_t v4 = dispatch thunk of PommesResponse.pegasusDomainFlowStepLog.getter();
  unint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for FLOWSchemaFLOWStep,  &OBJC_CLASS___FLOWSchemaFLOWStep_ptr);
  uint64_t v8 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*v0 + 160LL);
  uint64_t v9 = (void *)v8(v4, v6, v7, v7);
  outlined consume of Data?(v4, v6);
  if (!v9)
  {

    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
LABEL_19:
    uint64_t v27 = 0LL;
    uint64_t v28 = 0LL;
    Swift::Bool v29 = 0;
    goto LABEL_20;
  }

  id v10 = v9;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
  unint64_t v12 = *(void *)((char *)&dword_10 + (v41 & 0xFFFFFFFFFFFFFF8LL));
  unint64_t v11 = *(void *)((char *)&dword_18 + (v41 & 0xFFFFFFFFFFFFFF8LL));
  if (v12 >= v11 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1LL);
  }
  uint64_t v35 = v10;
  uint64_t v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v10);
  uint64_t v14 = specialized Array._endMutation()(v13);
  uint64_t v36 = v3;
  uint64_t v37 = dispatch thunk of PommesResponse.taskStepLogs.getter(v14);
  uint64_t v15 = *(void *)(v37 + 16);
  if (v15)
  {
    uint64_t v16 = (unint64_t *)(v37 + 40);
    do
    {
      uint64_t v18 = *(v16 - 1);
      unint64_t v19 = *v16;
      outlined copy of Data?(v18, *v16);
      uint64_t v20 = (void *)v8(v18, v19, v7, v7);
      if (v20)
      {
        id v21 = v20;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v21);
        unint64_t v23 = *(void *)((char *)&dword_10 + (v41 & 0xFFFFFFFFFFFFFF8LL));
        unint64_t v22 = *(void *)((char *)&dword_18 + (v41 & 0xFFFFFFFFFFFFFF8LL));
        if (v23 >= v22 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1LL);
        }
        uint64_t v17 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v21);
        specialized Array._endMutation()(v17);
      }

      v16 += 2;
      outlined consume of Data?(v18, v19);
      --v15;
    }

    while (v15);
  }

  swift_bridgeObjectRelease(v37);
  uint64_t v39 = 0x54746E6572727543LL;
  unint64_t v40 = 0xEB000000006B7361LL;
  unsigned int v38 = 152;
  unint64_t v24 = v41;
  swift_retain(v2);
  uint64_t v25 = swift_bridgeObjectRetain(v41);
  uint64_t v26 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18FLOWSchemaFLOWStepCG_yts5NeverOTg50127_s21InformationFlowPlugin07PegasusB11EventLoggerC03logdb4StepE18FromPommesResponseSSSg8taskType_Sb010isTerminalH6LoggedtyFySo18dE6CXEfU_SSSo0d9FLOWStateV0VSb0hI6Plugin0kimN0CTf1cn_nTf4nnnng_n( v25,  &v39,  &v38,  &v42,  v2);
  swift_bridgeObjectRelease_n(v24, 2LL);
  swift_bridgeObjectRelease(v26);

  swift_release(v2);
  uint64_t v27 = v39;
  uint64_t v28 = (void *)v40;
  Swift::Bool v29 = v42;
LABEL_20:
  result.taskType.value._object = v28;
  result.taskType.value._uint64_t countAndFlagsBits = v27;
  result.isTerminalStepLogged = v29;
  return result;
}

uint64_t closure #1 in PegasusFlowEventLogger.logPegasusFlowStepEventFromPommesResponse()( id *a1, uint64_t *a2, unsigned int *a3, _BYTE *a4, void *a5)
{
  unint64_t v8 = 0xEB000000006B7361LL;
  id v9 = *a1;
  uint64_t v10 = 0x54746E6572727543LL;
  id v11 = [*a1 flowState];
  if (v11)
  {
    unint64_t v12 = v11;
    id v13 = [v11 currentTaskName];

    if (v13)
    {
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      unint64_t v8 = v14;
    }
  }

  uint64_t v15 = a2[1];
  *a2 = v10;
  a2[1] = v8;
  swift_bridgeObjectRelease(v15);
  id v16 = [v9 flowState];
  if (v16)
  {
    uint64_t v17 = v16;
    unsigned int v18 = [v16 flowStateType];

    *a3 = v18;
    BOOL v19 = v18 > 5 || ((1 << v18) & 0x34) == 0;
    if (!v19 || v18 == 128) {
      *a4 = 1;
    }
  }

  else
  {
    *a3 = 152;
  }

  id v20 = [v9 flowState];
  if (v20
    && (id v21 = v20, v22 = [v20 currentTaskType],
                   v21,
                   v22))
  {
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    uint64_t v41 = v24;
    uint64_t v43 = v23;
  }

  else
  {
    uint64_t v41 = 0LL;
    uint64_t v43 = 0LL;
  }

  id v25 = objc_msgSend(v9, "flowState", v41, v43);
  if (!v25)
  {
    uint64_t v27 = a5;
    goto LABEL_21;
  }

  uint64_t v26 = v25;
  uint64_t v27 = a5;
  id v28 = [v25 flowStateReason];

  if (!v28)
  {
LABEL_21:
    uint64_t v31 = 0LL;
    unsigned __int8 v30 = 1;
    goto LABEL_22;
  }

  unsigned int v29 = [v28 statusReason];

  unsigned __int8 v30 = 0;
  uint64_t v31 = v29;
LABEL_22:
  type metadata accessor for SiriKitEvent(0LL);
  uint64_t v32 = *a3;
  uint64_t v34 = *a2;
  uint64_t v33 = a2[1];
  uint64_t v35 = (void *)swift_allocObject(&unk_97FF8, 40LL, 7LL);
  _OWORD v35[2] = v9;
  v35[3] = v44;
  v35[4] = v42;
  swift_bridgeObjectRetain(v33);
  id v36 = v9;
  uint64_t v37 = SiriKitEvent.__allocating_init(stateType:taskType:statusReason:_:)( v32,  v34,  v33,  v31 | ((unint64_t)v30 << 32),  partial apply for closure #1 in closure #1 in PegasusFlowEventLogger.logPegasusFlowStepEventFromPommesResponse(),  v35);
  uint64_t v39 = v27[6];
  uint64_t v38 = v27[7];
  __swift_project_boxed_opaque_existential_1(v27 + 3, v39);
  dispatch thunk of SiriKitEventSending.send(_:)(v37, v39, v38);
  return swift_release(v37);
}

BOOL FLOWSchemaFLOWStateType.isLastTaskStep.getter(unsigned int a1)
{
  BOOL result = 1LL;
  if (a1 > 5 || ((1 << a1) & 0x34) == 0) {
    return a1 == 128;
  }
  return result;
}

void closure #1 in closure #1 in PegasusFlowEventLogger.logPegasusFlowStepEventFromPommesResponse()( int a1, id a2, uint64_t a3, uint64_t a4)
{
  id v7 = [a2 domainContexts];
  if (!v7)
  {
LABEL_9:
    dispatch thunk of SiriKitEvent.SiriKitEventBuilder.domainContext.setter(v7);
    swift_bridgeObjectRetain(a4);
    dispatch thunk of SiriKitEvent.SiriKitEventBuilder.attribute.setter(a3, a4);
    id v11 = [a2 flowState];
    unint64_t v12 = v11;
    if (v11)
    {
      id v13 = [v11 resolvedSlotName];

      if (v13)
      {
        unint64_t v12 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        uint64_t v15 = v14;

        goto LABEL_14;
      }

      unint64_t v12 = 0LL;
    }

    uint64_t v15 = 0LL;
LABEL_14:
    dispatch thunk of SiriKitEvent.SiriKitEventBuilder.parameterName.setter(v12, v15);
    id v16 = [a2 flowState];
    uint64_t v17 = v16;
    if (v16)
    {
      id v18 = [v16 flowStateReasonDescription];

      if (v18)
      {
        uint64_t v17 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        uint64_t v20 = v19;

LABEL_19:
        dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter(v17, v20);
        return;
      }

      uint64_t v17 = 0LL;
    }

    uint64_t v20 = 0LL;
    goto LABEL_19;
  }

  uint64_t v8 = type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for FLOWSchemaFLOWDomainContext,  &OBJC_CLASS___FLOWSchemaFLOWDomainContext_ptr);
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

  if ((unint64_t)v9 >> 62)
  {
    if (v9 < 0) {
      uint64_t v21 = v9;
    }
    else {
      uint64_t v21 = v9 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v9);
    id v7 = (id)_CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(v9);
    if (!v7) {
      goto LABEL_8;
    }
  }

  else
  {
    id v7 = *(id *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8LL));
    if (!v7)
    {
LABEL_8:
      swift_bridgeObjectRelease(v9);
      goto LABEL_9;
    }
  }

  if ((v9 & 0xC000000000000001LL) != 0)
  {
    id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v9);
    goto LABEL_7;
  }

  if (*(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8LL)))
  {
    id v10 = *(id *)(v9 + 32);
LABEL_7:
    id v7 = v10;
    goto LABEL_8;
  }

  __break(1u);
}

Swift::Void __swiftcall PegasusFlowEventLogger.logPegasusContextTier1Event(taskType:)(Swift::String taskType)
{
  uint64_t v2 = v1;
  object = taskType._object;
  uint64_t countAndFlagsBits = taskType._countAndFlagsBits;
  if (v1[2])
  {
    uint64_t v5 = dispatch thunk of PommesResponse.pegasusDomainUserSensitiveTier1Log.getter();
    unint64_t v7 = v6;
  }

  else
  {
    uint64_t v5 = 0LL;
    unint64_t v7 = 0xF000000000000000LL;
  }

  uint64_t v8 = type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for FLOWSchemaFLOWPegasusContextTier1,  &OBJC_CLASS___FLOWSchemaFLOWPegasusContextTier1_ptr);
  id v22 = (id)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*v1 + 160LL))(v5, v7, v8, v8);
  outlined consume of Data?(v5, v7);
  if (v22)
  {
    id v9 = [objc_allocWithZone(FLOWSchemaFLOWClientEvent) init];
    if (v9)
    {
      id v10 = v9;
      [v9 setPegasusContextTier1:v22];
      type metadata accessor for SiriKitEvent(0LL);
      swift_bridgeObjectRetain(object);
      id v11 = v10;
      uint64_t v12 = SiriKitEvent.__allocating_init(taskType:tierOneFlowEvent:_:)( countAndFlagsBits,  object,  v11,  SportsPersonalizationResult.init(flow:action:),  0LL);
      id v13 = v2 + 3;
      uint64_t v15 = v2[6];
      uint64_t v14 = v2[7];
      __swift_project_boxed_opaque_existential_1(v13, v15);
      dispatch thunk of SiriKitEventSending.send(_:)(v12, v15, v14);

      swift_release(v12);
    }

    else
    {
      if (one-time initialization token for information != -1) {
        swift_once(&one-time initialization token for information, one-time initialization function for information);
      }
      uint64_t v16 = type metadata accessor for Logger(0LL);
      uint64_t v17 = __swift_project_value_buffer(v16, (uint64_t)static Logger.information);
      oslog = (os_log_s *)Logger.logObject.getter(v17);
      os_log_type_t v18 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(oslog, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v19 = 0;
        _os_log_impl( &dword_0,  oslog,  v18,  "Unable to create FLOWSchemaFLOWClientEvent to log flowEntityContextTier1",  v19,  2u);
        swift_slowDealloc(v19, -1LL, -1LL);

        uint64_t v20 = oslog;
      }

      else
      {

        uint64_t v20 = (os_log_s *)v22;
      }
    }
  }

Swift::Void __swiftcall PegasusFlowEventLogger.logInformationPluginPreprocessEvent()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (os_log_s *)[objc_allocWithZone(FLOWSchemaFLOWInformationPluginContext) init];
  if (!v2)
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = __swift_project_value_buffer(v14, (uint64_t)static Logger.information);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl( &dword_0,  v24,  v16,  "Unable to create FLOWSchemaFLOWInformationPluginContext to log info plugin domain and type",  v17,  2u);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    goto LABEL_13;
  }

  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v1 + 72);
  uint64_t v24 = v2;
  NSString v5 = String._bridgeToObjectiveC()();
  -[os_log_s setExecutedPegasusDomain:](v24, "setExecutedPegasusDomain:", v5);

  -[os_log_s setEventType:](v24, "setEventType:", *(unsigned int *)(v1 + 80));
  id v6 = [objc_allocWithZone(FLOWSchemaFLOWDomainContext) init];
  if (v6)
  {
    unint64_t v7 = v6;
    [v6 setInformationPluginContext:v24];
    type metadata accessor for SiriKitEvent(0LL);
    uint64_t v8 = swift_allocObject(&unk_97FD0, 24LL, 7LL);
    *(void *)(v8 + 16) = v7;
    swift_bridgeObjectRetain(v4);
    id v9 = v7;
    uint64_t v10 = SiriKitEvent.__allocating_init(stateType:taskType:statusReason:_:)( 152LL,  v3,  v4,  0x100000000LL,  partial apply for closure #1 in PegasusFlowEventLogger.logInformationPluginPreprocessEvent(),  v8);
    id v11 = (void *)(v1 + 24);
    uint64_t v13 = *(void *)(v1 + 48);
    uint64_t v12 = *(void *)(v1 + 56);
    __swift_project_boxed_opaque_existential_1(v11, v13);
    dispatch thunk of SiriKitEventSending.send(_:)(v10, v13, v12);

    swift_release(v10);
    return;
  }

  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v18 = type metadata accessor for Logger(0LL);
  uint64_t v19 = __swift_project_value_buffer(v18, (uint64_t)static Logger.information);
  os_log_t oslog = (os_log_t)Logger.logObject.getter(v19);
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(oslog, v20))
  {

LABEL_13:
    id v22 = v24;
    goto LABEL_14;
  }

  uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
  *(_WORD *)uint64_t v21 = 0;
  _os_log_impl( &dword_0,  oslog,  v20,  "Unable to create FLOWSchemaFLOWDomainContext to log info plugin domain and type",  v21,  2u);
  swift_slowDealloc(v21, -1LL, -1LL);

  id v22 = oslog;
LABEL_14:
}

uint64_t PegasusFlowEventLogger.makeFlowObject<A>(from:ofType:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = __swift_project_value_buffer(v6, (uint64_t)static Logger.information);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    uint64_t v17 = a3;
    uint64_t v18 = v11;
    *(_DWORD *)uint64_t v10 = 136315138;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(a4);
    uint64_t v13 = String.init<A>(describing:)(&v17, MetatypeMetadata);
    unint64_t v15 = v14;
    uint64_t v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
    swift_bridgeObjectRelease(v15);
    _os_log_impl( &dword_0,  v8,  v9,  "No data of type %s included in the pommes response for SELF FlowTask logging",  v10,  0xCu);
    swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  return 0LL;
}

uint64_t PegasusFlowEventLogger.deinit()
{
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  return v0;
}

uint64_t PegasusFlowEventLogger.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  return swift_deallocClassInstance(v0, 84LL, 7LL);
}

BOOL FLOWSchemaFLOWStateType.isFirstTaskStep.getter(int a1)
{
  return a1 == 1;
}

uint64_t outlined init with copy of SiriKitReliabilityCodes?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_28794()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t partial apply for closure #1 in PegasusFlowEventLogger.logGenericFlowStepEvent(stateType:parameterName:statusReason:statusReasonDescription:taskType:)( uint64_t a1)
{
  return closure #1 in PegasusFlowEventLogger.logGenericFlowStepEvent(stateType:parameterName:statusReason:statusReasonDescription:taskType:)( a1,  v1[2],  v1[3],  v1[4],  v1[5],  v1[6],  v1[7]);
}

uint64_t partial apply for closure #1 in PegasusFlowEventLogger.logFlowEventsFromPommesResponse()@<X0>( uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 136LL))();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  return result;
}

uint64_t outlined destroy of SiriKitReliabilityCodes?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18FLOWSchemaFLOWStepCG_yts5NeverOTg50127_s21InformationFlowPlugin07PegasusB11EventLoggerC03logdb4StepE18FromPommesResponseSSSg8taskType_Sb010isTerminalH6LoggedtyFySo18dE6CXEfU_SSSo0d9FLOWStateV0VSb0hI6Plugin0kimN0CTf1cn_nTf4nnnng_n( uint64_t a1, uint64_t *a2, unsigned int *a3, _BYTE *a4, void *a5)
{
  uint64_t v6 = v5;
  uint64_t v10 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  while (1)
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
    if (!v10) {
      return (uint64_t)v11;
    }
    uint64_t v23 = _swiftEmptyArrayStorage;
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v10 & ~(v10 >> 63),  0);
    if (v10 < 0) {
      break;
    }
    uint64_t v13 = 0LL;
    uint64_t v11 = v23;
    while (v10 != v13)
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, a1);
      }
      else {
        id v14 = *(id *)(a1 + 8 * v13 + 32);
      }
      unint64_t v15 = v14;
      id v22 = v14;
      closure #1 in PegasusFlowEventLogger.logPegasusFlowStepEventFromPommesResponse()(&v22, a2, a3, a4, a5);
      if (v6)
      {
        swift_release(v11);

        return (uint64_t)v11;
      }

      uint64_t v6 = 0LL;

      uint64_t v23 = v11;
      unint64_t v17 = v11[2];
      unint64_t v16 = v11[3];
      unint64_t v18 = v17 + 1;
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        uint64_t v11 = v23;
      }

      ++v13;
      void v11[2] = v18;
      if (v10 == v13) {
        return (uint64_t)v11;
      }
    }

    __break(1u);
LABEL_18:
    if (a1 < 0) {
      uint64_t v19 = a1;
    }
    else {
      uint64_t v19 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease(a1);
  }

  __break(1u);
  return result;
}

uint64_t sub_289D4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t partial apply for closure #1 in PegasusFlowEventLogger.logInformationPluginPreprocessEvent()()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.domainContext.setter(v1);
}

uint64_t type metadata accessor for PegasusFlowEventLogger()
{
  return objc_opt_self(&OBJC_CLASS____TtC21InformationFlowPlugin22PegasusFlowEventLogger);
}

uint64_t sub_28A44()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

void partial apply for closure #1 in closure #1 in PegasusFlowEventLogger.logPegasusFlowStepEventFromPommesResponse()( int a1)
{
}

uint64_t static GenericResultSetParamBuilder.displayPaginationParams.getter()
{
  return WindowedPaginationParameters.init(windowSize:_:)( 0LL,  closure #1 in static ResultParamBuilder.displayPaginationParams.getter,  0LL);
}

uint64_t closure #1 in static ResultParamBuilder.displayPaginationParams.getter()
{
  return WindowedPaginationParameters.isLastWindow.setter(0LL);
}

uint64_t ResultParamBuilder.parameters.getter()
{
  return swift_bridgeObjectRetain(*v0);
}

uint64_t ResultParamBuilder.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for Optional(0LL, *(void *)(a1 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t ResultParamBuilder.init(parameters:content:contentFieldName:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = a1;
  uint64_t v11 = type metadata accessor for ResultParamBuilder(0LL, a5, a3, a4);
  uint64_t v12 = (char *)a6 + *(int *)(v11 + 28);
  uint64_t v13 = type metadata accessor for Optional(0LL, a5);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v12, a2, v13);
  unint64_t v15 = (void *)((char *)a6 + *(int *)(v11 + 32));
  *unint64_t v15 = a3;
  v15[1] = a4;
  return result;
}

uint64_t type metadata accessor for ResultParamBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ResultParamBuilder);
}

uint64_t ResultParamBuilder.init(parameters:contentFieldName:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Optional(0LL, a4);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  id v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v21 - v15;
  uint64_t v23 = a1;
  specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, v22);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  int v18 = swift_dynamicCast(v16, v22, v17, a4, 6LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56LL))(v16, v18 ^ 1u, 1LL, a4);
  uint64_t v19 = v23;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
  ResultParamBuilder.init(parameters:content:contentFieldName:)(v19, (uint64_t)v14, a2, a3, a4, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, v10);
}

uint64_t ResultParamBuilder.patternParameters(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v6 = v14;
  uint64_t v7 = __swift_allocate_boxed_opaque_existential_1(&v13);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(v7, a1, v6);
  uint64_t v8 = (uint64_t *)((char *)v2 + *(int *)(a2 + 32));
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v10);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
  specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(&v13, v9, v10, isUniquelyReferenced_nonNull_native, v15);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  outlined destroy of Any?((uint64_t)v15);
  return v5;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v12 = *v4;
    uint64_t v15 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v12 = v15;
    }

    swift_bridgeObjectRelease(*(void *)(*(void *)(v12 + 48) + 16 * v9 + 8));
    outlined init with take of Any((_OWORD *)(*(void *)(v12 + 56) + 32 * v9), a3);
    specialized _NativeDictionary._delete(at:)(v9, v12);
    uint64_t v13 = *v4;
    *uint64_t v4 = v12;
    swift_bridgeObjectRelease(v13);
  }

  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }

  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        char v10 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v27, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(a2 + 48);
          unint64_t v16 = (_OWORD *)(v15 + 16 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1) {
            *unint64_t v16 = *v17;
          }
          uint64_t v18 = *(void *)(a2 + 56);
          uint64_t v19 = (_OWORD *)(v18 + 32 * v3);
          os_log_type_t v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 2))
          {
            __int128 v9 = v20[1];
            *uint64_t v19 = *v20;
            v19[1] = v9;
            int64_t v3 = v6;
          }
        }

_OWORD *specialized _NativeDictionary.updateValue(_:forKey:isUnique:)@<X0>( _OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, _OWORD *a5@<X8>)
{
  unint64_t v6 = (void **)v5;
  uint64_t v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }

  else
  {
    char v18 = v13;
    uint64_t v19 = v12[3];
    if (v19 >= v17 && (a4 & 1) != 0)
    {
LABEL_7:
      os_log_type_t v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        outlined init with take of Any((_OWORD *)(v20[7] + 32 * v14), a5);
        return outlined init with take of Any(a1, (_OWORD *)(v20[7] + 32 * v14));
      }

      goto LABEL_11;
    }

    if (v19 >= v17 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }

    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a4 & 1);
    unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v18 & 1) == (v23 & 1))
    {
      unint64_t v14 = v22;
      os_log_type_t v20 = *v6;
      if ((v18 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, a1, v20);
      *a5 = 0u;
      a5[1] = 0u;
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }

  double result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t type metadata instantiation function for ResultParamBuilder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24LL);
}

uint64_t type metadata completion function for ResultParamBuilder(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for Optional(319LL, *(void *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = &unk_7D7A8;
    swift_initStructMetadata(a1, 0LL, 3LL, v4, a1 + 24);
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ResultParamBuilder(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v8 = *(void *)(v5 + 64);
  }
  else {
    size_t v8 = *(void *)(v5 + 64) + 1LL;
  }
  size_t v9 = v8 + 7;
  int v10 = v6 & 0x100000;
  uint64_t v11 = *a2;
  *a1 = *a2;
  if (v7 > 7 || v10 != 0 || ((v8 + 7 + ((v7 + 8) & ~v7)) & 0xFFFFFFFFFFFFFFF8LL) + 16 > 0x18)
  {
    a1 = (uint64_t *)(v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain(v11);
  }

  else
  {
    unint64_t v14 = (void *)(((unint64_t)a1 + v7 + 8) & ~v7);
    uint64_t v15 = (const void *)(((unint64_t)a2 + v7 + 8) & ~v7);
    BOOL v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_bridgeObjectRetain(v11);
    if (v16(v15, 1LL, v4))
    {
      memcpy(v14, v15, v8);
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v14, v15, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v14, 0LL, 1LL, v4);
    }

    uint64_t v17 = (void *)(((unint64_t)v14 + v9) & 0xFFFFFFFFFFFFFFF8LL);
    char v18 = (void *)(((unint64_t)v15 + v9) & 0xFFFFFFFFFFFFFFF8LL);
    *uint64_t v17 = *v18;
    uint64_t v19 = v18[1];
    v17[1] = v19;
    swift_bridgeObjectRetain(v19);
  }

  return a1;
}

uint64_t destroy for ResultParamBuilder(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = ((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = v6 + *(void *)(v5 + 64);
  if (!*(_DWORD *)(v5 + 84)) {
    ++v7;
  }
  return swift_bridgeObjectRelease(*(void *)((char *)&dword_8 + ((v7 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t *initializeWithCopy for ResultParamBuilder(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  size_t v8 = (void *)(((unint64_t)a1 + v7 + 8) & ~v7);
  size_t v9 = (const void *)(((unint64_t)a2 + v7 + 8) & ~v7);
  int v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  swift_bridgeObjectRetain(v4);
  if (v10(v9, 1LL, v5))
  {
    int v11 = *(_DWORD *)(v6 + 84);
    size_t v12 = *(void *)(v6 + 64);
    if (v11) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v12 + 1;
    }
    memcpy(v8, v9, v13);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v8, v9, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0LL, 1LL, v5);
    int v11 = *(_DWORD *)(v6 + 84);
    size_t v12 = *(void *)(v6 + 64);
  }

  if (v11) {
    size_t v14 = v12;
  }
  else {
    size_t v14 = v12 + 1;
  }
  uint64_t v15 = (void *)(((unint64_t)v8 + v14 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  BOOL v16 = (void *)(((unint64_t)v9 + v14 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v15 = *v16;
  uint64_t v17 = v16[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  return a1;
}

uint64_t *assignWithCopy for ResultParamBuilder(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  int v11 = (void *)(((unint64_t)a1 + v10 + 8) & ~v10);
  size_t v12 = (void *)(((unint64_t)a2 + v10 + 8) & ~v10);
  size_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  int v14 = v13(v11, 1LL, v8);
  int v15 = v13(v12, 1LL, v8);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v11, v12, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v11, 0LL, 1LL, v8);
      goto LABEL_10;
    }
  }

  else
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 24))(v11, v12, v8);
      goto LABEL_10;
    }

    (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  }

  if (*(_DWORD *)(v9 + 84)) {
    size_t v16 = *(void *)(v9 + 64);
  }
  else {
    size_t v16 = *(void *)(v9 + 64) + 1LL;
  }
  memcpy(v11, v12, v16);
LABEL_10:
  if (*(_DWORD *)(v9 + 84)) {
    uint64_t v17 = *(void *)(v9 + 64);
  }
  else {
    uint64_t v17 = *(void *)(v9 + 64) + 1LL;
  }
  char v18 = (void *)(((unint64_t)v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v19 = (void *)(((unint64_t)v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  *char v18 = *v19;
  uint64_t v20 = v19[1];
  uint64_t v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  return a1;
}

void *initializeWithTake for ResultParamBuilder(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  uint64_t v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1LL, v4))
  {
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
    if (v9) {
      size_t v11 = v10;
    }
    else {
      size_t v11 = v10 + 1;
    }
    memcpy(v7, v8, v11);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0LL, 1LL, v4);
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
  }

  if (v9) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v10 + 1;
  }
  *(_OWORD *)(((unint64_t)v7 + v12 + 7) & 0xFFFFFFFFFFFFF8LL) = *(_OWORD *)(((unint64_t)v8 + v12 + 7) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t *assignWithTake for ResultParamBuilder(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  size_t v10 = (void *)(((unint64_t)a1 + v9 + 8) & ~v9);
  size_t v11 = (void *)(((unint64_t)a2 + v9 + 8) & ~v9);
  size_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  int v13 = v12(v10, 1LL, v7);
  int v14 = v12(v11, 1LL, v7);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v10, v11, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v10, 0LL, 1LL, v7);
      goto LABEL_10;
    }
  }

  else
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 40))(v10, v11, v7);
      goto LABEL_10;
    }

    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  }

  if (*(_DWORD *)(v8 + 84)) {
    size_t v15 = *(void *)(v8 + 64);
  }
  else {
    size_t v15 = *(void *)(v8 + 64) + 1LL;
  }
  memcpy(v10, v11, v15);
LABEL_10:
  if (*(_DWORD *)(v8 + 84)) {
    uint64_t v16 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v16 = *(void *)(v8 + 64) + 1LL;
  }
  uint64_t v17 = (void *)(((unint64_t)v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  char v18 = (void *)(((unint64_t)v11 + v16 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v17 = *v18;
  uint64_t v19 = v17[1];
  v17[1] = v18[1];
  swift_bridgeObjectRelease(v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResultParamBuilder(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = v6;
  }
  if (v5) {
    uint64_t v8 = 7LL;
  }
  else {
    uint64_t v8 = 8LL;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  if (v7 < a2)
  {
    if (((((v8 + *(void *)(v4 + 64) + ((v9 + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8LL) + 16) & 0xFFFFFFF8) != 0) {
      unsigned int v10 = 2;
    }
    else {
      unsigned int v10 = a2 - v7 + 1;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0LL;
    }
    __asm { BR              X16 }
  }

  if ((v6 & 0x80000000) != 0)
  {
    unsigned int v15 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v9 + 8) & ~v9);
    if (v15 >= 2) {
      return v15 - 1;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v14 = *a1;
    return (v14 + 1);
  }

void storeEnumTagSinglePayload for ResultParamBuilder( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8LL);
  int v8 = *(_DWORD *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(void *)(v7 + 64);
  if (!v8) {
    ++v11;
  }
  if (v10 < a3)
  {
    unsigned int v12 = a3 - v10;
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v6 = v14;
    }
    else {
      int v6 = 0;
    }
  }

  if (a2 > v10)
  {
    if ((((_DWORD)v11 + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~*(unsigned __int8 *)(v7 + 80)) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      unsigned int v15 = ~v10 + a2;
      bzero( a1,  ((v11 + ((*(unsigned __int8 *)(v7 + 80) + 8LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + 7) & 0xFFFFFFFFFFFFFFF8LL)
      + 16);
      *a1 = v15;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X15 }

uint64_t sub_29B3C@<X0>( unsigned int a1@<W1>, size_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *((_BYTE *)v14 + v15) = 0;
  if (a1)
  {
    if ((v11 & 0x80000000) != 0)
    {
      uint64_t v17 = (void *)(((unint64_t)v14 + v13 + 8) & v10);
      if (v11 >= a1)
      {
        return (*(uint64_t (**)(void *, void))(v12 + 56))(v17, a1 + 1);
      }

      else if ((_DWORD)a2)
      {
        else {
          int v18 = 4;
        }
        bzero(v17, a2);
        __asm { BR              X10 }
      }
    }

    else
    {
      if ((a1 & 0x80000000) != 0) {
        uint64_t v16 = a1 ^ 0x80000000;
      }
      else {
        uint64_t v16 = a1 - 1;
      }
      *int v14 = v16;
    }
  }

  return result;
}

void sub_29C2C()
{
  *uint64_t v0 = v1;
}

void sub_29C34()
{
  *(_WORD *)uint64_t v0 = v1;
  *(_BYTE *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = BYTE2(v1);
}

void sub_29C44()
{
  *uint64_t v0 = v1;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)( unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  int v6 = (void *)(a5[6] + 16 * a1);
  *int v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t one-time initialization function for kFlowEntryPoints()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FlowEntryPoint>);
  uint64_t v1 = swift_allocObject(v0, 152LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_7D1C0;
  uint64_t v2 = type metadata accessor for SportsPersonalizationEntryPoint();
  uint64_t v3 = swift_allocObject(v2, 136LL, 7LL);
  uint64_t v9 = type metadata accessor for SportsResolver(0LL);
  uint64_t v10 = &protocol witness table for SportsResolver;
  __swift_allocate_boxed_opaque_existential_1(&v8);
  SportsResolver.init()();
  outlined init with take of PatternFlowProviding(&v8, v3 + 16);
  *(void *)(v3 + 80) = &type metadata for Features;
  *(void *)(v3 + 88) = &protocol witness table for Features;
  *(_BYTE *)(v3 + 56) = 1;
  uint64_t v4 = type metadata accessor for IntentDonator();
  uint64_t v5 = swift_allocObject(v4, 16LL, 7LL);
  *(void *)(v3 + 120) = v4;
  *(void *)(v3 + 128) = &protocol witness table for IntentDonator;
  *(void *)(v3 + 96) = v5;
  *(void *)(v1 + 56) = v2;
  *(void *)(v1 + 64) = &protocol witness table for SportsPersonalizationEntryPoint;
  *(void *)(v1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v3;
  uint64_t v6 = type metadata accessor for SuggestionsEntryPoint();
  uint64_t result = swift_allocObject(v6, 16LL, 7LL);
  *(void *)(v1 + 96) = v6;
  *(void *)(v1 + 104) = &protocol witness table for SuggestionsEntryPoint;
  *(void *)(v1 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = result;
  *(void *)(v1 + 136) = &type metadata for InformationRoutingEntryPoint;
  *(void *)(v1 + 144) = &protocol witness table for InformationRoutingEntryPoint;
  static InformationRootFlow.kFlowEntryPoints = v1;
  return result;
}

uint64_t InformationRootFlow.__allocating_init(flowEntryPoints:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  __chkstk_darwin(v3);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  uint64_t v7 = v6 + OBJC_IVAR____TtC21InformationFlowPlugin19InformationRootFlow_originalInput;
  uint64_t v8 = type metadata accessor for Input(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL);
  v9(v7, 1LL, 1LL, v8);
  v9((uint64_t)v5, 1LL, 1LL, v8);
  swift_beginAccess(v7, v12, 33LL, 0LL);
  outlined assign with take of Input?((uint64_t)v5, v7);
  swift_endAccess(v12);
  *(void *)(v6 + OBJC_IVAR____TtC21InformationFlowPlugin19InformationRootFlow_flowEntryPoints) = a1;
  return v6;
}

uint64_t InformationRootFlow.init(flowEntryPoints:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  __chkstk_darwin(v3);
  uint64_t v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin19InformationRootFlow_originalInput;
  uint64_t v7 = type metadata accessor for Input(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL);
  v8(v6, 1LL, 1LL, v7);
  v8((uint64_t)v5, 1LL, 1LL, v7);
  swift_beginAccess(v6, v11, 33LL, 0LL);
  outlined assign with take of Input?((uint64_t)v5, v6);
  swift_endAccess(v11);
  *(void *)(v1 + OBJC_IVAR____TtC21InformationFlowPlugin19InformationRootFlow_flowEntryPoints) = a1;
  return v1;
}

uint64_t outlined assign with take of Input?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

BOOL InformationRootFlow.on(input:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = &v17[-v8];
  __chkstk_darwin(v7);
  unsigned int v11 = &v17[-v10];
  uint64_t v12 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin19InformationRootFlow_originalInput;
  swift_beginAccess(v1 + OBJC_IVAR____TtC21InformationFlowPlugin19InformationRootFlow_originalInput, v18, 0LL, 0LL);
  outlined init with copy of Input?(v12, (uint64_t)v11);
  uint64_t v13 = type metadata accessor for Input(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  int v15 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v11, 1LL, v13);
  outlined destroy of Input?((uint64_t)v11);
  if (v15 == 1)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v14 + 16))(v9, a1, v13);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v14 + 56))(v9, 0LL, 1LL, v13);
    outlined init with take of Input?((uint64_t)v9, (uint64_t)v6);
    swift_beginAccess(v12, v17, 33LL, 0LL);
    outlined assign with take of Input?((uint64_t)v6, v12);
    swift_endAccess(v17);
  }

  return v15 == 1;
}

uint64_t outlined init with copy of Input?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Input?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t outlined init with take of Input?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t InformationRootFlow.execute()(uint64_t a1)
{
  v2[32] = a1;
  v2[33] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v2[34] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Input(0LL);
  v2[35] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[36] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[37] = swift_task_alloc(v6);
  v2[38] = swift_task_alloc(v6);
  return swift_task_switch(InformationRootFlow.execute(), 0LL, 0LL);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v2 = *(void *)(*(void *)v1 + 352LL);
  *(void *)(*(void *)v1 + 36swift_beginAccess(v0 + 64, v2, 0LL, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(InformationRootFlow.execute(), 0LL, 0LL);
}

uint64_t InformationRootFlow.execute()()
{
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 272);
  uint64_t v4 = *(void *)(v0 + 264) + OBJC_IVAR____TtC21InformationFlowPlugin19InformationRootFlow_originalInput;
  swift_beginAccess(v4, v0 + 216, 0LL, 0LL);
  outlined init with copy of Input?(v4, v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1) == 1)
  {
    outlined destroy of Input?(*(void *)(v0 + 272));
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    uint64_t v6 = __swift_project_value_buffer(v5, (uint64_t)static Logger.information);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_0, v7, v8, "Information root flow not called as root flow", v9, 2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    static ExecuteResponse.complete()(v10);
LABEL_18:
    uint64_t v49 = *(void *)(v0 + 296);
    uint64_t v50 = *(void *)(v0 + 272);
    swift_task_dealloc(*(void *)(v0 + 304));
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  (*(void (**)(void, void, void))(*(void *)(v0 + 288) + 32LL))( *(void *)(v0 + 304),  *(void *)(v0 + 272),  *(void *)(v0 + 280));
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v11 = *(void *)(v0 + 296);
  uint64_t v12 = *(void *)(v0 + 304);
  uint64_t v13 = *(void *)(v0 + 280);
  uint64_t v14 = *(void *)(v0 + 288);
  uint64_t v15 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 31__swift_destroy_boxed_opaque_existential_1(v0 + 2) = __swift_project_value_buffer(v15, (uint64_t)static Logger.information);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v11, v12, v13);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v21 = *(void *)(v0 + 288);
  uint64_t v20 = *(void *)(v0 + 296);
  uint64_t v22 = *(void *)(v0 + 280);
  if (v19)
  {
    char v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    uint64_t v57 = v24;
    *(_DWORD *)char v23 = 136315138;
    uint64_t v25 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Input and conformance Input,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v22, v25);
    unint64_t v28 = v27;
    *(void *)(v0 + 248) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256);
    swift_bridgeObjectRelease(v28);
    unsigned int v29 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v29(v20, v22);
    _os_log_impl(&dword_0, v17, v18, "InformationRootFlow executing with input: %s", v23, 0xCu);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  else
  {
    unsigned int v29 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v29(*(void *)(v0 + 296), *(void *)(v0 + 280));
  }

  *(void *)(v0 + 320) = v29;
  uint64_t v30 = *(void *)(*(void *)(v0 + 264) + OBJC_IVAR____TtC21InformationFlowPlugin19InformationRootFlow_flowEntryPoints);
  *(void *)(v0 + 328) = v30;
  uint64_t v31 = *(void *)(v30 + 16);
  *(void *)(v0 + 336) = v31;
  if (!v31)
  {
    uint64_t v42 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v44 = 0;
      _os_log_impl(&dword_0, v42, v43, "InformationRootFlow not sure what to do with this input", v44, 2u);
      swift_slowDealloc(v44, -1LL, -1LL);
    }

    uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
    uint64_t v46 = *(void *)(v0 + 304);
    uint64_t v47 = *(void *)(v0 + 280);

    static ExecuteResponse.complete()(v48);
    v45(v46, v47);
    goto LABEL_18;
  }

  *(void *)(v0 + 344) = 0LL;
  uint64_t v32 = v30 + 32;
  swift_bridgeObjectRetain(v30);
  outlined init with copy of OutputPublisherAsync(v32, v0 + 56);
  uint64_t v33 = outlined init with copy of OutputPublisherAsync(v0 + 56, v0 + 96);
  uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = swift_slowAlloc(12LL, -1LL);
    uint64_t v37 = swift_slowAlloc(32LL, -1LL);
    uint64_t v57 = v37;
    *(_DWORD *)uint64_t v36 = 136315138;
    outlined init with copy of OutputPublisherAsync(v0 + 96, v0 + 176);
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowEntryPoint);
    uint64_t v39 = String.init<A>(describing:)(v0 + 176, v38);
    unint64_t v41 = v40;
    *(void *)(v36 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v57);
    swift_bridgeObjectRelease(v41);
    __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 96));
    _os_log_impl(&dword_0, v34, v35, "Offering parse to entry point: %s", (uint8_t *)v36, 0xCu);
    swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_slowDealloc(v36, -1LL, -1LL);
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 96));
  }

  uint64_t v52 = *(void *)(v0 + 80);
  uint64_t v53 = *(void *)(v0 + 88);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v52);
  unsigned __int8 v54 = *(int **)(v53 + 8);
  uint64_t v56 = (int *)((char *)v54 + *v54);
  uint64_t v55 = (void *)swift_task_alloc(v54[1]);
  *(void *)(v0 + 35__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v55;
  *uint64_t v55 = v0;
  v55[1] = InformationRootFlow.execute();
  return ((uint64_t (*)(void, uint64_t, uint64_t))v56)(*(void *)(v0 + 304), v52, v53);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_s *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  os_log_s *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  void *v42;
  int *v43;
  uint64_t v44;
  uint64_t v1 = (void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 360);
  if (v2)
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 328));
    uint64_t v3 = outlined init with copy of OutputPublisherAsync(v0 + 56, v0 + 136);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    uint64_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v7 = swift_slowAlloc(32LL, -1LL);
      uint64_t v44 = v7;
      *(_DWORD *)uint64_t v6 = 136315138;
      outlined init with copy of OutputPublisherAsync(v0 + 136, v0 + 16);
      os_log_type_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowEntryPoint);
      uint64_t v9 = String.init<A>(describing:)(v0 + 16, v8);
      uint64_t v11 = v10;
      *(void *)(v0 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248);
      uint64_t v12 = v11;
      uint64_t v1 = (void *)(v0 + 56);
      swift_bridgeObjectRelease(v12);
      __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 136));
      _os_log_impl(&dword_0, v4, v5, "Using entry point: %s", v6, 0xCu);
      swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1LL, -1LL);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    else
    {
      __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 136));
    }

    char v23 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
    uint64_t v24 = *(void *)(v0 + 304);
    uint64_t v25 = *(void *)(v0 + 280);
    static ExecuteResponse.complete(next:)(v2);
    swift_release(v2);
    v23(v24, v25);
    __swift_destroy_boxed_opaque_existential_1(v1);
LABEL_10:
    uint64_t v26 = *(void *)(v0 + 296);
    unint64_t v27 = *(void *)(v0 + 272);
    swift_task_dealloc(*(void *)(v0 + 304));
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v13 = *(void *)(v0 + 336);
  uint64_t v14 = *(void *)(v0 + 344) + 1LL;
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 56));
  if (v14 == v13)
  {
    uint64_t v15 = swift_bridgeObjectRelease(*(void *)(v0 + 328));
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    uint64_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      os_log_type_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v18 = 0;
      _os_log_impl(&dword_0, v16, v17, "InformationRootFlow not sure what to do with this input", v18, 2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    BOOL v19 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
    uint64_t v20 = *(void *)(v0 + 304);
    uint64_t v21 = *(void *)(v0 + 280);

    static ExecuteResponse.complete()(v22);
    v19(v20, v21);
    goto LABEL_10;
  }

  unsigned int v29 = *(void *)(v0 + 344) + 1LL;
  *(void *)(v0 + 344) = v29;
  outlined init with copy of OutputPublisherAsync(*(void *)(v0 + 328) + 40 * v29 + 32, v0 + 56);
  uint64_t v30 = outlined init with copy of OutputPublisherAsync(v0 + 56, v0 + 96);
  uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
  uint64_t v32 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = swift_slowAlloc(12LL, -1LL);
    uint64_t v34 = swift_slowAlloc(32LL, -1LL);
    uint64_t v44 = v34;
    *(_DWORD *)uint64_t v33 = 136315138;
    outlined init with copy of OutputPublisherAsync(v0 + 96, v0 + 176);
    os_log_type_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowEntryPoint);
    uint64_t v36 = String.init<A>(describing:)(v0 + 176, v35);
    uint64_t v38 = v37;
    *(void *)(v33 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v44);
    swift_bridgeObjectRelease(v38);
    __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 96));
    _os_log_impl(&dword_0, v31, v32, "Offering parse to entry point: %s", (uint8_t *)v33, 0xCu);
    swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v33, -1LL, -1LL);
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 96));
  }

  uint64_t v39 = *(void *)(v0 + 80);
  unint64_t v40 = *(void *)(v0 + 88);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v39);
  unint64_t v41 = *(int **)(v40 + 8);
  os_log_type_t v43 = (int *)((char *)v41 + *v41);
  uint64_t v42 = (void *)swift_task_alloc(v41[1]);
  *(void *)(v0 + 35__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v42;
  *uint64_t v42 = v0;
  v42[1] = InformationRootFlow.execute();
  return ((uint64_t (*)(void, uint64_t, uint64_t))v43)(*(void *)(v0 + 304), v39, v40);
}

uint64_t InformationRootFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InformationRootFlow(0LL);
  uint64_t v5 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type InformationRootFlow and conformance InformationRootFlow,  type metadata accessor for InformationRootFlow,  (uint64_t)&protocol conformance descriptor for InformationRootFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v5);
}

uint64_t InformationRootFlow.deinit()
{
  return v0;
}

uint64_t InformationRootFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t protocol witness for Flow.exitValue.getter in conformance InformationRootFlow( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for InformationRootFlow(0LL);
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t type metadata accessor for InformationRootFlow(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for InformationRootFlow;
  if (!type metadata singleton initialization cache for InformationRootFlow) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InformationRootFlow);
  }
  return result;
}

uint64_t ObjC metadata update function for InformationRootFlow()
{
  return type metadata accessor for InformationRootFlow(0LL);
}

void type metadata completion function for InformationRootFlow(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_updateClassMetadata2(a1, 256LL, 2LL, v4, a1 + 80);
  }

void type metadata accessor for Input?(uint64_t a1)
{
  if (!lazy cache variable for type metadata for Input?)
  {
    uint64_t v2 = type metadata accessor for Input(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Input?);
    }
  }

void SportsProperty.apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

void sub_2AFC0( void **a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14 = *a1;
  NSString v15 = String._bridgeToObjectiveC()();
  objc_msgSend(v14, "setTeamName:");
}

uint64_t specialized Parse.DirectInvocation.get<A>(protoMessage:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized Parse.DirectInvocation.get<A>(protoMessage:)( a1,  a2,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Responseframework_Engagement_Context,  &lazy protocol witness table cache variable for type Apple_Parsec_Responseframework_Engagement_Context and conformance Apple_Parsec_Responseframework_Engagement_Context,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Responseframework_Engagement_Context,  a3);
}

{
  return specialized Parse.DirectInvocation.get<A>(protoMessage:)( a1,  a2,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Search_PegasusQueryContext,  &lazy protocol witness table cache variable for type Apple_Parsec_Search_PegasusQueryContext and conformance Apple_Parsec_Search_PegasusQueryContext,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Search_PegasusQueryContext,  a3);
}

uint64_t specialized Parse.DirectInvocation.get<A>(protoMessage:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for BinaryDecodingOptions(0LL);
  uint64_t v13 = __chkstk_darwin(v12);
  NSString v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = Parse.DirectInvocation.userData.getter(v13);
  if (!v16) {
    goto LABEL_11;
  }
  uint64_t v17 = v16;
  if (!*(void *)(v16 + 16))
  {
    __int128 v37 = 0u;
    __int128 v38 = 0u;
LABEL_9:
    swift_bridgeObjectRelease(v17);
    goto LABEL_10;
  }

  swift_bridgeObjectRetain(a2);
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v19 & 1) == 0)
  {
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    swift_bridgeObjectRelease(a2);
    goto LABEL_9;
  }

  outlined init with copy of Any(*(void *)(v17 + 56) + 32 * v18, (uint64_t)&v37);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v17);
  if (!*((void *)&v38 + 1))
  {
LABEL_10:
    outlined destroy of Any?((uint64_t)&v37, &demangling cache variable for type metadata for Any?);
    goto LABEL_11;
  }

  if ((swift_dynamicCast(&v40, &v37, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0)
  {
    uint64_t v21 = v40;
    unint64_t v20 = v41;
    uint64_t v22 = a3(0LL);
    uint64_t v39 = 0LL;
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    uint64_t v23 = outlined copy of Data._Representation(v21, v20);
    BinaryDecodingOptions.init()(v23);
    uint64_t v24 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( a4,  a3,  a5);
    Message.init(serializedData:extensions:partial:options:)(v21, v20, &v37, 0LL, v15, v22, v24);
    outlined consume of Data._Representation(v21, v20);
    uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL);
    uint64_t v33 = a6;
    uint64_t v34 = 0LL;
    uint64_t v35 = v22;
    return v32(v33, v34, 1LL, v35);
  }

uint64_t TapEngagementHandlingFlow.__allocating_init(invocation:outputPublisherAsync:pommesEngagement:patternExecutor:)( uint64_t a1, __int128 *a2, void *a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v25 = a2;
  uint64_t v9 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  uint64_t v11 = a3[3];
  uint64_t v10 = a3[4];
  uint64_t v12 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a3, v11);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v15 + 16))(v14);
  uint64_t v17 = a4[3];
  uint64_t v16 = a4[4];
  uint64_t v18 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a4, v17);
  __chkstk_darwin(v18);
  unint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v21 + 16))(v20);
  uint64_t v22 = specialized TapEngagementHandlingFlow.init(invocation:outputPublisherAsync:pommesEngagement:patternExecutor:)( a1,  v25,  (uint64_t)v14,  (uint64_t)v20,  v9,  v11,  v17,  v10,  v16);
  __swift_destroy_boxed_opaque_existential_1(a4);
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v22;
}

uint64_t TapEngagementHandlingFlow.init(invocation:outputPublisherAsync:pommesEngagement:patternExecutor:)( uint64_t a1, __int128 *a2, void *a3, void *a4)
{
  uint64_t v9 = a3[3];
  uint64_t v8 = a3[4];
  uint64_t v10 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a3, v9);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v13 + 16))(v12);
  uint64_t v15 = a4[3];
  uint64_t v14 = a4[4];
  uint64_t v16 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a4, v15);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v19 + 16))(v18);
  uint64_t v20 = specialized TapEngagementHandlingFlow.init(invocation:outputPublisherAsync:pommesEngagement:patternExecutor:)( a1,  a2,  (uint64_t)v12,  (uint64_t)v18,  v22[1],  v9,  v15,  v8,  v14);
  __swift_destroy_boxed_opaque_existential_1(a4);
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v20;
}

uint64_t TapEngagementHandlingFlow.execute()(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return swift_task_switch(TapEngagementHandlingFlow.execute(), 0LL, 0LL);
}

uint64_t TapEngagementHandlingFlow.execute()()
{
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  unint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "TapEngagementHandlingFlow: Processing Async Request in Execute method", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  static ExecuteResponse.complete()(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TapEngagementHandlingFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TapEngagementHandlingFlow(0LL);
  uint64_t v5 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type TapEngagementHandlingFlow and conformance TapEngagementHandlingFlow,  type metadata accessor for TapEngagementHandlingFlow,  (uint64_t)&protocol conformance descriptor for TapEngagementHandlingFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v5);
}

uint64_t TapEngagementHandlingFlow.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_engagementContext;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Responseframework_Engagement_Context(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_pegasusContext;
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(Context - 8) + 8LL))(v3, Context);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0
                                                      + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_outputPublisherAsync));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0
                                                      + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_pommesEngagement));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0
                                                      + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_patternExecutor));
  return v0;
}

uint64_t TapEngagementHandlingFlow.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_engagementContext;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Responseframework_Engagement_Context(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_pegasusContext;
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(Context - 8) + 8LL))(v3, Context);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0
                                                      + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_outputPublisherAsync));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0
                                                      + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_pommesEngagement));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0
                                                      + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_patternExecutor));
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t protocol witness for Flow.exitValue.getter in conformance TapEngagementHandlingFlow( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for TapEngagementHandlingFlow(0LL);
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t specialized TapEngagementHandlingFlow.init(invocation:outputPublisherAsync:pommesEngagement:patternExecutor:)( uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v55 = a2;
  uint64_t v56 = a5;
  uint64_t v54 = a1;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Search_PegasusQueryContext?);
  __chkstk_darwin(v14);
  uint64_t v52 = (uint64_t)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext(0LL);
  uint64_t v51 = *(void *)(Context - 8);
  __chkstk_darwin(Context);
  uint64_t v50 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Responseframework_Engagement_Context?);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for Apple_Parsec_Responseframework_Engagement_Context(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v61 = a6;
  uint64_t v62 = a8;
  uint64_t v24 = __swift_allocate_boxed_opaque_existential_1(&v60);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32LL))(v24, a3, a6);
  uint64_t v58 = a7;
  uint64_t v59 = a9;
  uint64_t v25 = __swift_allocate_boxed_opaque_existential_1(&v57);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32LL))(v25, a4, a7);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v26 = type metadata accessor for Logger(0LL);
  uint64_t v27 = __swift_project_value_buffer(v26, (uint64_t)static Logger.information);
  os_log_type_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v29 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v30 = 0;
    _os_log_impl(&dword_0, v28, v29, "TapEngagementHandlingFlow: Received Direct invocation", v30, 2u);
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  uint64_t v31 = v54;
  specialized Parse.DirectInvocation.get<A>(protoMessage:)( 0xD000000000000011LL,  0x800000000007FA30LL,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Responseframework_Engagement_Context,  &lazy protocol witness table cache variable for type Apple_Parsec_Responseframework_Engagement_Context and conformance Apple_Parsec_Responseframework_Engagement_Context,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Responseframework_Engagement_Context,  (uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20) == 1)
  {
    uint64_t v32 = &demangling cache variable for type metadata for Apple_Parsec_Responseframework_Engagement_Context?;
    uint64_t v33 = (uint64_t)v19;
  }

  else
  {
    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v34(v23, v19, v20);
    uint64_t v35 = v52;
    specialized Parse.DirectInvocation.get<A>(protoMessage:)( 0x4373757361676570LL,  0xEE00747865746E6FLL,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Search_PegasusQueryContext,  &lazy protocol witness table cache variable for type Apple_Parsec_Search_PegasusQueryContext and conformance Apple_Parsec_Search_PegasusQueryContext,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Search_PegasusQueryContext,  v52);
    uint64_t v36 = v51;
    uint64_t v37 = Context;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v35, 1LL, Context) != 1)
    {
      uint64_t v45 = type metadata accessor for Parse.DirectInvocation(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v45 - 8) + 8LL))(v31, v45);
      uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 32);
      uint64_t v47 = v50;
      v46(v50, v35, v37);
      uint64_t v44 = v56;
      v34( (char *)(v56 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_engagementContext),  v23,  v20);
      v46( (char *)(v44 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_pegasusContext),  (uint64_t)v47,  v37);
      outlined init with take of PatternFlowProviding( v55,  v44 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_outputPublisherAsync);
      outlined init with take of PatternFlowProviding( &v60,  v44 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_pommesEngagement);
      outlined init with take of PatternFlowProviding( &v57,  v44 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_patternExecutor);
      return v44;
    }

    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
    uint64_t v32 = &demangling cache variable for type metadata for Apple_Parsec_Search_PegasusQueryContext?;
    uint64_t v33 = v35;
  }

  uint64_t v38 = outlined destroy of Any?(v33, v32);
  uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
  os_log_type_t v40 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v39, v40))
  {
    unint64_t v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v41 = 0;
    _os_log_impl( &dword_0,  v39,  v40,  "TapEngagementHandlingFlow: Unable to retrieve EngagementContext from DI Payload.",  v41,  2u);
    swift_slowDealloc(v41, -1LL, -1LL);
  }

  __swift_destroy_boxed_opaque_existential_1(&v57);
  __swift_destroy_boxed_opaque_existential_1(&v60);
  __swift_destroy_boxed_opaque_existential_1(v55);
  uint64_t v42 = type metadata accessor for Parse.DirectInvocation(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8LL))(v31, v42);
  uint64_t v43 = type metadata accessor for TapEngagementHandlingFlow(0LL);
  swift_deallocPartialClassInstance( v56,  v43,  *(unsigned int *)(*(void *)v56 + 48LL),  *(unsigned __int16 *)(*(void *)v56 + 52LL));
  return 0LL;
}

uint64_t type metadata accessor for TapEngagementHandlingFlow(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for TapEngagementHandlingFlow;
  if (!type metadata singleton initialization cache for TapEngagementHandlingFlow) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TapEngagementHandlingFlow);
  }
  return result;
}

uint64_t ObjC metadata update function for TapEngagementHandlingFlow()
{
  return type metadata accessor for TapEngagementHandlingFlow(0LL);
}

uint64_t type metadata completion function for TapEngagementHandlingFlow(uint64_t a1)
{
  uint64_t result = type metadata accessor for Apple_Parsec_Responseframework_Engagement_Context(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext(319LL);
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      void v5[2] = "(";
      v5[3] = "(";
      v5[4] = "(";
      uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v5, a1 + 80);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t static DetailedResultFlowFactory.makeDetailedResultFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static DetailedResultFlowFactory.makeDetailedResultFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:) + async function pointer to specialized static DetailedResultFlowFactory.makeDetailedResultFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:));
  uint64_t v18 = (void *)swift_task_alloc(unk_A2694);
  *(void *)(v10 + 16) = v18;
  *uint64_t v18 = v10;
  v18[1] = ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:);
  return v20(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t specialized static DetailedResultFlowFactory.makeDetailedResultFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[63] = v10;
  v8[64] = v11;
  v8[61] = a7;
  v8[62] = a8;
  v8[59] = a5;
  v8[60] = a6;
  v8[57] = a3;
  v8[58] = a4;
  v8[55] = a1;
  v8[56] = a2;
  return swift_task_switch( specialized static DetailedResultFlowFactory.makeDetailedResultFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:),  0LL,  0LL);
}

uint64_t specialized static DetailedResultFlowFactory.makeDetailedResultFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)()
{
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = v0[56];
  uint64_t v2 = v0[57];
  uint64_t v3 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v3, (uint64_t)static Logger.information);
  swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v4 = swift_bridgeObjectRetain_n(v2, 2LL);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v10 = static os_log_type_t.debug.getter(v5, v6, v7, v8, v9);
  BOOL v11 = os_log_type_enabled(v5, v10);
  unint64_t v13 = v0[56];
  uint64_t v12 = v0[57];
  if (v11)
  {
    uint64_t v14 = v0[55];
    uint64_t v15 = swift_slowAlloc(22LL, -1LL);
    uint64_t v16 = swift_slowAlloc(64LL, -1LL);
    *(void *)&__int128 v37 = v16;
    *(_DWORD *)uint64_t v15 = 136315394;
    swift_bridgeObjectRetain(v13);
    v0[53] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, (uint64_t *)&v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 53, v0 + 54);
    swift_bridgeObjectRelease_n(v13, 3LL);
    *(_WORD *)(v15 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    swift_bridgeObjectRetain(v12);
    uint64_t v17 = Dictionary.description.getter( v12,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    unint64_t v19 = v18;
    swift_bridgeObjectRelease(v12);
    v0[54] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, (uint64_t *)&v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 54, v0 + 55);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease_n(v12, 2LL);
    _os_log_impl( &dword_0,  v5,  v10,  "DetailedResultFlowFactory.makeDetailedResultFlow called with %s : %s",  (uint8_t *)v15,  0x16u);
    swift_arrayDestroy(v16, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v0[56], 2LL);
    swift_bridgeObjectRelease_n(v12, 2LL);
  }

  uint64_t v20 = v0[63];
  uint64_t v21 = v0[61];
  uint64_t v22 = v0[62];
  unint64_t v35 = v0[60];
  uint64_t v23 = v0[57];
  uint64_t v33 = (void *)v0[58];
  uint64_t v34 = v0[59];
  uint64_t v24 = v0[56];
  uint64_t v36 = v0[55];
  static PatternFlowProvidingHelper.unwrap(_:with:)(v0[64], v21, v0 + 33);
  outlined init with copy of OutputPublisherAsync(v21, (uint64_t)(v0 + 38));
  outlined init with copy of OutputPublisherAsync(v20, (uint64_t)(v0 + 43));
  outlined init with copy of OutputPublisherAsync((uint64_t)(v0 + 33), (uint64_t)(v0 + 48));
  uint64_t v25 = type metadata accessor for PatternExecutor();
  uint64_t v26 = swift_allocObject(v25, 16LL, 7LL);
  uint64_t v38 = v25;
  uint64_t v39 = &protocol witness table for PatternExecutor;
  *(void *)&__int128 v37 = v26;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v23);
  id v27 = v33;
  outlined copy of Data?(v34, v35);
  swift_retain(v22);
  DetailedResultProvider.init(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:informationViewFactory:patternFlowProvider:patternExecutor:)( v36,  v24,  v23,  (uint64_t)v27,  v34,  v35,  v0 + 38,  v0 + 43,  (uint64_t)(v0 + 2),  v22,  (uint64_t)(v0 + 48),  &v37);
  uint64_t v28 = v0[36];
  uint64_t v29 = v0[37];
  __swift_project_boxed_opaque_existential_1(v0 + 33, v28);
  uint64_t v30 = (uint64_t **)swift_task_alloc(async function pointer to dispatch thunk of PatternFlowProviding.makeDetailedResultFlow<A>(provider:)[1]);
  v0[65] = (uint64_t)v30;
  unint64_t v31 = lazy protocol witness table accessor for type DetailedResultProvider and conformance DetailedResultProvider();
  *uint64_t v30 = v0;
  v30[1] = (uint64_t *)specialized static DetailedResultFlowFactory.makeDetailedResultFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:);
  return dispatch thunk of PatternFlowProviding.makeDetailedResultFlow<A>(provider:)( v0 + 2,  &type metadata for DetailedResultProvider,  v31,  v28,  v29);
}

{
  uint64_t v0;
  outlined destroy of DetailedResultProvider(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 264));
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 536));
}

{
  uint64_t v0;
  outlined destroy of DetailedResultProvider(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 264));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized static DetailedResultFlowFactory.makeDetailedResultFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)( uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 520);
  *(void *)(*v2 + 528) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = specialized static DetailedResultFlowFactory.makeDetailedResultFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:);
  }

  else
  {
    *(void *)(v4 + 536) = a1;
    uint64_t v6 = specialized static DetailedResultFlowFactory.makeDetailedResultFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:);
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

ValueMetadata *type metadata accessor for DetailedResultFlowFactory()
{
  return &type metadata for DetailedResultFlowFactory;
}

unint64_t lazy protocol witness table accessor for type DetailedResultProvider and conformance DetailedResultProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type DetailedResultProvider and conformance DetailedResultProvider;
  if (!lazy protocol witness table cache variable for type DetailedResultProvider and conformance DetailedResultProvider)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DetailedResultProvider,  &type metadata for DetailedResultProvider);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DetailedResultProvider and conformance DetailedResultProvider);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DetailedResultProvider and conformance DetailedResultProvider;
  if (!lazy protocol witness table cache variable for type DetailedResultProvider and conformance DetailedResultProvider)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DetailedResultProvider,  &type metadata for DetailedResultProvider);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DetailedResultProvider and conformance DetailedResultProvider);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DetailedResultProvider and conformance DetailedResultProvider;
  if (!lazy protocol witness table cache variable for type DetailedResultProvider and conformance DetailedResultProvider)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DetailedResultProvider,  &type metadata for DetailedResultProvider);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DetailedResultProvider and conformance DetailedResultProvider);
  }

  return result;
}

uint64_t outlined destroy of DetailedResultProvider(uint64_t a1)
{
  return a1;
}

uint64_t static ResultSetFlowFactory.makeResultSetFlow(settings:patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 128) = v11;
  *(_OWORD *)(v8 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v10;
  *(void *)(v8 + 96) = a7;
  *(void *)(v8 + 104) = a8;
  *(void *)(v8 + 80) = a5;
  *(void *)(v8 + 88) = a6;
  *(void *)(v8 + 64) = a3;
  *(void *)(v8 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a4;
  *(void *)(v8 + 56) = a2;
  return swift_task_switch( static ResultSetFlowFactory.makeResultSetFlow(settings:patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:),  0LL,  0LL);
}

void static ResultSetFlowFactory.makeResultSetFlow(settings:patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)()
{
  uint64_t v1 = (uint64_t **)swift_task_alloc(unk_A26AC);
  v0[17] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = (uint64_t *)static ResultSetFlowFactory.makeResultSetFlow(settings:patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:);
  __asm { BR              X8; specialized static ResultSetFlowFactory.makeContinuationFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:) }

uint64_t static ResultSetFlowFactory.makeResultSetFlow(settings:patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)( uint64_t a1)
{
  uint64_t v4 = *v2 + 16;
  uint64_t v5 = *(void *)(*v2 + 136);
  uint64_t v6 = *v2;
  *(void *)(v6 + 144) = v1;
  swift_task_dealloc(v5);
  outlined destroy of PatternFlowProviding?(v4);
  if (v1) {
    return swift_task_switch( static ResultSetFlowFactory.makeResultSetFlow(settings:patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:),  0LL,  0LL);
  }
  else {
    return (*(uint64_t (**)(uint64_t))(v6 + 8))(a1);
  }
}

uint64_t static ResultSetFlowFactory.makeResultSetFlow(settings:patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static ResultSetFlowFactory.makeContinuationFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static ResultSetFlowFactory.makeContinuationFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:) + async function pointer to specialized static ResultSetFlowFactory.makeContinuationFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:));
  unint64_t v18 = (void *)swift_task_alloc(unk_A26AC);
  *(void *)(v10 + 16) = v18;
  *unint64_t v18 = v10;
  v18[1] = ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:);
  return v20(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t specialized static ResultSetFlowFactory.makeContinuationFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[103] = v11;
  v8[102] = v10;
  v8[101] = a8;
  v8[100] = a7;
  v8[99] = a6;
  v8[98] = a5;
  v8[97] = a4;
  v8[96] = a3;
  v8[95] = a2;
  v8[94] = a1;
  return swift_task_switch( specialized static ResultSetFlowFactory.makeContinuationFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:),  0LL,  0LL);
}

uint64_t specialized static ResultSetFlowFactory.makeContinuationFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)()
{
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = *(void *)(v0 + 768);
  uint64_t v2 = *(void *)(v0 + 760);
  uint64_t v3 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v3, (uint64_t)static Logger.information);
  swift_bridgeObjectRetain_n(v2, 2LL);
  uint64_t v4 = swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void *)(v0 + 768);
  unint64_t v9 = *(void *)(v0 + 760);
  if (v7)
  {
    uint64_t v10 = *(void *)(v0 + 752);
    uint64_t v11 = swift_slowAlloc(22LL, -1LL);
    uint64_t v12 = swift_slowAlloc(64LL, -1LL);
    uint64_t v43 = v12;
    *(_DWORD *)uint64_t v11 = 136315394;
    swift_bridgeObjectRetain(v9);
    *(void *)(v0 + 736) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 736, v0 + 744);
    swift_bridgeObjectRelease_n(v9, 3LL);
    *(_WORD *)(v11 + 1static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = 2080;
    swift_bridgeObjectRetain(v8);
    uint64_t v13 = Dictionary.description.getter( v8,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    unint64_t v15 = v14;
    swift_bridgeObjectRelease(v8);
    *(void *)(v0 + 744) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 744, v0 + 752);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease_n(v8, 2LL);
    _os_log_impl( &dword_0,  v5,  v6,  "ResultSetFlowFactory.makeRenderPatternFlow called with %s : %s",  (uint8_t *)v11,  0x16u);
    swift_arrayDestroy(v12, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 760), 2LL);
    swift_bridgeObjectRelease_n(v8, 2LL);
  }

  uint64_t v16 = *(void *)(v0 + 816);
  uint64_t v17 = *(void *)(v0 + 800);
  unint64_t v41 = *(void *)(v0 + 792);
  uint64_t v42 = *(void *)(v0 + 808);
  uint64_t v39 = *(void **)(v0 + 776);
  uint64_t v40 = *(void *)(v0 + 784);
  uint64_t v18 = *(void *)(v0 + 768);
  uint64_t v19 = *(void *)(v0 + 760);
  uint64_t v20 = *(void *)(v0 + 752);
  static PatternFlowProvidingHelper.unwrap(_:with:)(*(void *)(v0 + 824), v17, (uint64_t *)(v0 + 656));
  outlined init with copy of OutputPublisherAsync(v17, v0 + 496);
  outlined init with copy of OutputPublisherAsync(v16, v0 + 536);
  outlined init with copy of OutputPublisherAsync(v0 + 656, v0 + 576);
  uint64_t v21 = type metadata accessor for PatternExecutor();
  uint64_t v22 = swift_allocObject(v21, 16LL, 7LL);
  *(void *)(v0 + 640) = v21;
  *(void *)(v0 + 648) = &protocol witness table for PatternExecutor;
  *(void *)(v0 + 616) = v22;
  *(void *)(v0 + 240) = v20;
  *(void *)(v0 + 248) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v18);
  id v23 = v39;
  outlined copy of Data?(v40, v41);
  swift_retain(v42);
  *(void *)(v0 + 16) = specialized GenericResultSetParamBuilder.init(parameters:)(v18);
  *(void *)(v0 + 24) = v24;
  *(void *)(v0 + 3static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = v25;
  *(void *)(v0 + 40) = v26;
  *(void *)(v0 + 23static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = v23;
  *(void *)(v0 + 128) = v40;
  *(void *)(v0 + 136) = v41;
  outlined init with copy of OutputPublisherAsync(v0 + 496, v0 + 48);
  outlined init with copy of OutputPublisherAsync(v0 + 536, v0 + 88);
  static PatternFlowProvidingHelper.unwrap(_:with:)(v0 + 576, v0 + 496, (uint64_t *)(v0 + 696));
  outlined destroy of PatternFlowProviding?(v0 + 576);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 536));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 496));
  outlined init with take of PatternFlowProviding((__int128 *)(v0 + 696), v0 + 144);
  *(void *)(v0 + 184) = v42;
  outlined init with take of PatternFlowProviding((__int128 *)(v0 + 616), v0 + 192);
  __int128 v27 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 464) = v27;
  *(_OWORD *)(v0 + 480) = *(_OWORD *)(v0 + 240);
  __int128 v28 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 384) = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v0 + 400) = v28;
  __int128 v29 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 416) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v0 + 43static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = v29;
  __int128 v30 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 320) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 336) = v30;
  __int128 v31 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 35static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 368) = v31;
  __int128 v32 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 256) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 27static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = v32;
  __int128 v33 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 288) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 304) = v33;
  uint64_t v34 = *(void *)(v0 + 680);
  uint64_t v35 = *(void *)(v0 + 688);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 656), v34);
  uint64_t v36 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PatternFlowProviding.makeResultSetFlow<A>(provider:)[1]);
  *(void *)(v0 + 83static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = v36;
  unint64_t v37 = lazy protocol witness table accessor for type ContinuationResultSetFlowProvider and conformance ContinuationResultSetFlowProvider();
  *uint64_t v36 = v0;
  v36[1] = specialized static ResultSetFlowFactory.makeContinuationFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:);
  return dispatch thunk of PatternFlowProviding.makeResultSetFlow<A>(provider:)( v0 + 256,  &type metadata for ContinuationResultSetFlowProvider,  v37,  v34,  v35);
}

{
  uint64_t v0;
  outlined destroy of ContinuationResultSetFlowProvider(v0 + 256);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 656));
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 848));
}

{
  uint64_t v0;
  outlined destroy of ContinuationResultSetFlowProvider(v0 + 256);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 656));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized static ResultSetFlowFactory.makeContinuationFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)( uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 832);
  *(void *)(*v2 + 840) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    os_log_type_t v6 = specialized static ResultSetFlowFactory.makeContinuationFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:);
  }

  else
  {
    *(void *)(v4 + 848) = a1;
    os_log_type_t v6 = specialized static ResultSetFlowFactory.makeContinuationFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:);
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

ValueMetadata *type metadata accessor for ResultSetFlowFactory()
{
  return &type metadata for ResultSetFlowFactory;
}

unint64_t lazy protocol witness table accessor for type ContinuationResultSetFlowProvider and conformance ContinuationResultSetFlowProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type ContinuationResultSetFlowProvider and conformance ContinuationResultSetFlowProvider;
  if (!lazy protocol witness table cache variable for type ContinuationResultSetFlowProvider and conformance ContinuationResultSetFlowProvider)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ContinuationResultSetFlowProvider,  &type metadata for ContinuationResultSetFlowProvider);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ContinuationResultSetFlowProvider and conformance ContinuationResultSetFlowProvider);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ContinuationResultSetFlowProvider and conformance ContinuationResultSetFlowProvider;
  if (!lazy protocol witness table cache variable for type ContinuationResultSetFlowProvider and conformance ContinuationResultSetFlowProvider)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ContinuationResultSetFlowProvider,  &type metadata for ContinuationResultSetFlowProvider);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ContinuationResultSetFlowProvider and conformance ContinuationResultSetFlowProvider);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ContinuationResultSetFlowProvider and conformance ContinuationResultSetFlowProvider;
  if (!lazy protocol witness table cache variable for type ContinuationResultSetFlowProvider and conformance ContinuationResultSetFlowProvider)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ContinuationResultSetFlowProvider,  &type metadata for ContinuationResultSetFlowProvider);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ContinuationResultSetFlowProvider and conformance ContinuationResultSetFlowProvider);
  }

  return result;
}

uint64_t outlined destroy of ContinuationResultSetFlowProvider(uint64_t a1)
{
  return a1;
}

uint64_t InformationFlowPlugin.findFlowForX(parse:)(uint64_t a1)
{
  uint64_t v48 = a1;
  uint64_t v46 = *v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  __chkstk_darwin(v2);
  uint64_t v47 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for USOParse(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v42 - v9;
  uint64_t v11 = type metadata accessor for Parse(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = __swift_project_value_buffer(v15, (uint64_t)static Logger.information);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v49 = v11;
  if (v19)
  {
    uint64_t v20 = swift_slowAlloc(22LL, -1LL);
    uint64_t v21 = swift_slowAlloc(64LL, -1LL);
    uint64_t v45 = v4;
    uint64_t v43 = v21;
    v51[0] = v21;
    *(_DWORD *)uint64_t v20 = 136315394;
    uint64_t v22 = _typeName(_:qualified:)(v46, 0LL);
    uint64_t v46 = v12;
    uint64_t v44 = v5;
    unint64_t v24 = v23;
    uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51);
    swift_bridgeObjectRelease(v24);
    *(_WORD *)(v20 + 1static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = 2080;
    uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014LL, 0x8000000000080930LL, v51);
    uint64_t v5 = v44;
    uint64_t v12 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51);
    _os_log_impl(&dword_0, v17, v18, "%s %s called", (uint8_t *)v20, 0x16u);
    uint64_t v25 = v43;
    swift_arrayDestroy(v43, 2LL, (char *)&type metadata for Any + 8);
    uint64_t v26 = v25;
    uint64_t v4 = v45;
    swift_slowDealloc(v26, -1LL, -1LL);
    uint64_t v27 = v20;
    uint64_t v11 = v49;
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v48, v11);
  if ((*(unsigned int (**)(char *, uint64_t))(v12 + 88))(v14, v11) == enum case for Parse.uso(_:))
  {
    (*(void (**)(char *, uint64_t))(v12 + 96))(v14, v11);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v14, v4);
    uint64_t v28 = type metadata accessor for SearchFlow(0LL);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    uint64_t v29 = SearchFlow.__allocating_init(parse:)((uint64_t)v8);
    v51[0] = v29;
    uint64_t v30 = lazy protocol witness table accessor for type InformationRootFlow and conformance InformationRootFlow( &lazy protocol witness table cache variable for type SearchFlow and conformance SearchFlow,  255LL,  type metadata accessor for SearchFlow,  (uint64_t)&protocol conformance descriptor for SearchFlow);
    uint64_t v31 = Flow.eraseToAnyFlow()(v28, v30);
    swift_release(v29);
    static FlowSearchResult.flow(_:)(v31);
    swift_release(v31);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }

  else
  {
    if (one-time initialization token for kFlowEntryPoints != -1) {
      swift_once( &one-time initialization token for kFlowEntryPoints,  one-time initialization function for kFlowEntryPoints);
    }
    uint64_t v33 = static InformationRootFlow.kFlowEntryPoints;
    uint64_t v34 = type metadata accessor for InformationRootFlow(0LL);
    uint64_t v35 = swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
    uint64_t v36 = v35 + OBJC_IVAR____TtC21InformationFlowPlugin19InformationRootFlow_originalInput;
    uint64_t v37 = type metadata accessor for Input(0LL);
    uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56LL);
    v38(v36, 1LL, 1LL, v37);
    uint64_t v39 = (uint64_t)v47;
    v38((uint64_t)v47, 1LL, 1LL, v37);
    swift_beginAccess(v36, v51, 33LL, 0LL);
    swift_bridgeObjectRetain(v33);
    outlined assign with take of Input?(v39, v36);
    swift_endAccess(v51);
    *(void *)(v35 + OBJC_IVAR____TtC21InformationFlowPlugin19InformationRootFlow_flowEntryPoints) = v33;
    v51[0] = v35;
    uint64_t v40 = lazy protocol witness table accessor for type InformationRootFlow and conformance InformationRootFlow( &lazy protocol witness table cache variable for type InformationRootFlow and conformance InformationRootFlow,  255LL,  type metadata accessor for InformationRootFlow,  (uint64_t)&protocol conformance descriptor for InformationRootFlow);
    uint64_t v41 = Flow.eraseToAnyFlow()(v34, v40);
    swift_release(v35);
    static FlowSearchResult.flow(_:)(v41);
    swift_release(v41);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v49);
  }

uint64_t protocol witness for FlowPluginExtended.findFlowForX(parse:) in conformance InformationFlowPlugin()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88LL))();
}

uint64_t protocol witness for FlowPlugin.init() in conformance InformationFlowPlugin@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 80))();
  *a1 = result;
  return result;
}

uint64_t base witness table accessor for FlowPlugin in InformationFlowPlugin(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type InformationRootFlow and conformance InformationRootFlow( &lazy protocol witness table cache variable for type InformationFlowPlugin and conformance InformationFlowPlugin,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for InformationFlowPlugin,  (uint64_t)&protocol conformance descriptor for InformationFlowPlugin);
}

uint64_t lazy protocol witness table accessor for type InformationRootFlow and conformance InformationRootFlow( unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = a3(a2);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t type metadata accessor for InformationFlowPlugin()
{
  return objc_opt_self(&OBJC_CLASS____TtC21InformationFlowPlugin21InformationFlowPlugin);
}

uint64_t SuggestionsEntryPoint.flowFor(input:)(uint64_t a1)
{
  v2[13] = a1;
  v2[14] = v1;
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams(0LL);
  v2[15] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[16] = v4;
  v2[17] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v5 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?)
                              - 8)
                  + 64LL)
      + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[18] = swift_task_alloc(v5);
  v2[19] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder(0LL);
  v2[20] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[21] = v7;
  v2[22] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent(0LL);
  v2[23] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  _BYTE v2[24] = v9;
  v2[25] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent(0LL);
  v2[26] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[27] = v11;
  v2[28] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
  v2[29] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion(0LL);
  v2[30] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v2[31] = v14;
  v2[32] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Parse(0LL);
  v2[33] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v2[34] = v16;
  v2[35] = swift_task_alloc((*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(SuggestionsEntryPoint.flowFor(input:), 0LL, 0LL);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t (*v38)(void, unint64_t, void);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  os_log_s *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  os_log_type_t v57;
  uint8_t *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  os_log_s *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t started;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  void *v78;
  os_log_s *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  os_log_s *v92;
  os_log_type_t v93;
  uint8_t *v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int *v108;
  char *v109;
  uint64_t v3 = *(void *)(v1 + 272);
  uint64_t v2 = *(void *)(v1 + 280);
  uint64_t v4 = *(void *)(v1 + 264);
  Input.parse.getter(a1);
  unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v2, v4);
  uint64_t v6 = *(void *)(v1 + 272);
  uint64_t v7 = *(void ***)(v1 + 280);
  uint64_t v8 = *(void *)(v1 + 264);
  if (v5 != enum case for Parse.pommesResponse(_:)) {
    goto LABEL_27;
  }
  uint64_t v9 = (*(uint64_t (**)(void, uint64_t))(v6 + 96))(*(void *)(v1 + 280), v8);
  uint64_t v10 = *v7;
  *(void *)(v1 + 288) = *v7;
  uint64_t v11 = PommesResponse.requestId.getter(v9);
  *(void *)(v1 + 296) = v11;
  *(void *)(v1 + 304) = v12;
  if (!v12)
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v55 = type metadata accessor for Logger(0LL);
    uint64_t v56 = __swift_project_value_buffer(v55, (uint64_t)static Logger.information);
    uint64_t v52 = (os_log_s *)Logger.logObject.getter(v56);
    __int128 v57 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v52, v57)) {
      goto LABEL_61;
    }
    uint64_t v58 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v58 = 0;
    uint64_t v59 = "No requestId on POMMES Response, not donating to Siri Suggestions.";
    goto LABEL_60;
  }

  uint64_t v13 = v12;
  uint64_t v14 = dispatch thunk of PommesResponse.experiences.getter(v11);
  uint64_t v15 = v14;
  if (!((unint64_t)v14 >> 62))
  {
LABEL_56:
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v13);
LABEL_57:
    if (one-time initialization token for information == -1)
    {
LABEL_58:
      unint64_t v98 = type metadata accessor for Logger(0LL);
      char v99 = __swift_project_value_buffer(v98, (uint64_t)static Logger.information);
      uint64_t v52 = (os_log_s *)Logger.logObject.getter(v99);
      __int128 v57 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v52, v57))
      {
LABEL_61:

LABEL_62:
        goto LABEL_63;
      }

      uint64_t v58 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v58 = 0;
      uint64_t v59 = "No experiences found on POMMES Response, not donating to Siri Suggestions.";
LABEL_60:
      _os_log_impl(&dword_0, v52, v57, v59, v58, 2u);
      swift_slowDealloc(v58, -1LL, -1LL);
      goto LABEL_61;
    }

LABEL_66:
    swift_once(&one-time initialization token for information, one-time initialization function for information);
    goto LABEL_58;
  }

  if (v14 >= 0) {
    v14 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  if (!_CocoaArrayWrapper.endIndex.getter(v14)) {
    goto LABEL_56;
  }
LABEL_5:
  if ((v15 & 0xC000000000000001LL) != 0)
  {
    uint64_t v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v15);
  }

  else
  {
    if (!*(void *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFF8LL)))
    {
      __break(1u);
      goto LABEL_66;
    }

    uint64_t v16 = *(id *)(v15 + 32);
  }

  uint64_t v17 = v16;
  *(void *)(v1 + 31static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = v16;
  swift_bridgeObjectRelease(v15);
  os_log_type_t v18 = type metadata accessor for GenericExperience(0LL);
  BOOL v19 = swift_dynamicCastClass(v17, v18);
  if (!v19)
  {
    swift_bridgeObjectRelease(v13);

    goto LABEL_57;
  }

  uint64_t v7 = (void **)v19;
  uint64_t v20 = *(void *)(v1 + 240);
  uint64_t v21 = *(void *)(v1 + 248);
  uint64_t v22 = *(void *)(v1 + 232);
  dispatch thunk of GenericExperience.serverSuggestions.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v22, 1LL, v20) != 1)
  {
    uint64_t v61 = *(void *)(v1 + 248);
    __int128 v60 = *(void *)(v1 + 256);
    uint64_t v63 = *(void *)(v1 + 232);
    uint64_t v62 = *(void *)(v1 + 240);
    swift_bridgeObjectRelease(v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 32))(v60, v63, v62);
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v64 = type metadata accessor for Logger(0LL);
    int v65 = __swift_project_value_buffer(v64, (uint64_t)static Logger.information);
    uint64_t v66 = (os_log_s *)Logger.logObject.getter(v65);
    unint64_t v67 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v66, v67))
    {
      unint64_t v68 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v68 = 0;
      _os_log_impl( &dword_0,  v66,  v67,  "Suggestions found on POMMES Response, trying donation to Siri Suggestions.",  v68,  2u);
      swift_slowDealloc(v68, -1LL, -1LL);
    }

    static AceService.currentAsync.getter((void *)(v1 + 56), v69);
    uint64_t v70 = *(void *)(v1 + 80);
    unint64_t v71 = *(void *)(v1 + 88);
    __swift_project_boxed_opaque_existential_1((void *)(v1 + 56), v70);
    started = dispatch thunk of AceServiceInvokerAsync.currentStartRequestId()(v70, v71);
    uint64_t v74 = v73;
    *(void *)(v1 + 320) = v73;
    unint64_t v75 = __swift_destroy_boxed_opaque_existential_1((void *)(v1 + 56));
    if (v74)
    {
      unint64_t v76 = *(void *)(v1 + 112);
      *(void *)(v1 + 328) = started;
      uint64_t v77 = *(int **)(*(void *)v76 + 96LL);
      unint64_t v108 = (int *)((char *)v77 + *v77);
      uint64_t v78 = (void *)swift_task_alloc(v77[1]);
      *(void *)(v1 + 336) = v78;
      *uint64_t v78 = v1;
      v78[1] = SuggestionsEntryPoint.flowFor(input:);
      return ((uint64_t (*)(void, uint64_t, uint64_t))v108)(*(void *)(v1 + 256), started, v74);
    }

    os_log_type_t v80 = (os_log_s *)Logger.logObject.getter(v75);
    uint64_t v81 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v80, v81))
    {
      uint64_t v82 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v82 = 0;
      _os_log_impl(&dword_0, v80, v81, "No root requestId found, not donating to Siri Suggestions.", v82, 2u);
      swift_slowDealloc(v82, -1LL, -1LL);
    }

    uint64_t v84 = *(void *)(v1 + 248);
    uint64_t v83 = *(void *)(v1 + 256);
    uint64_t v85 = *(void *)(v1 + 240);

    (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v83, v85);
    goto LABEL_63;
  }

  outlined destroy of Any?( *(void *)(v1 + 232),  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
  *(void *)(v1 + 40) = &type metadata for Features;
  *(void *)(v1 + 48) = lazy protocol witness table accessor for type Features and conformance Features();
  *(_BYTE *)(v1 + 16) = 2;
  unint64_t v23 = isFeatureEnabled(_:)(v1 + 16);
  unint64_t v24 = __swift_destroy_boxed_opaque_existential_1((void *)(v1 + 16));
  if ((v23 & 1) == 0)
  {

    swift_bridgeObjectRelease(v13);
    goto LABEL_63;
  }

  uint64_t v25 = GenericExperience.components.getter(v24);
  *(void *)(v1 + 35static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = v25;
  uint64_t v26 = *(void *)(v25 + 16);
  *(void *)(v1 + 360) = v26;
  if (!v26) {
    goto LABEL_52;
  }
  *(_DWORD *)(v1 + 440) = *(_DWORD *)(*(void *)(v1 + 216) + 80LL);
  *(_DWORD *)(v1 + 444) = enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.showMapPoints(_:);
  *(void *)(v1 + 368) = 0LL;
  uint64_t v6 = *(void *)(v25 + 16);
  if (!v6)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    (*(void (**)(void **, uint64_t))(v6 + 8))(v7, v8);
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v50 = type metadata accessor for Logger(0LL);
    uint64_t v51 = __swift_project_value_buffer(v50, (uint64_t)static Logger.information);
    uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
    uint64_t v53 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v54 = 0;
      _os_log_impl(&dword_0, v52, v53, "Received a non-POMMES Response, not donating to Siri Suggestions.", v54, 2u);
      swift_slowDealloc(v54, -1LL, -1LL);
    }

    goto LABEL_62;
  }

  uint64_t v6 = 0LL;
  while (1)
  {
    uint64_t v27 = *(void *)(v1 + 200);
    uint64_t v28 = *(void *)(v1 + 184);
    uint64_t v29 = *(void *)(v1 + 192);
    uint64_t v30 = (*(uint64_t (**)(void, unint64_t, void))(*(void *)(v1 + 216) + 16LL))( *(void *)(v1 + 224),  v25 + ((*(unsigned __int8 *)(v1 + 440) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 440))
          + *(void *)(*(void *)(v1 + 216) + 72LL) * v6,
            *(void *)(v1 + 208));
    uint64_t v31 = Apple_Parsec_Siri_V2alpha_ExperienceComponent.delayedActionComponent.getter(v30);
    __int128 v32 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter(v31);
    *(void *)(v1 + 376) = v32;
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
    uint64_t v33 = *(void *)(v32 + 16);
    *(void *)(v1 + 384) = v33;
    if (v33) {
      break;
    }
    uint64_t v48 = v32;
LABEL_24:
    swift_bridgeObjectRelease(v48);
    uint64_t v7 = *(void ***)(v1 + 360);
    uint64_t v49 = *(void *)(v1 + 368) + 1LL;
    (*(void (**)(void, void))(*(void *)(v1 + 216) + 8LL))(*(void *)(v1 + 224), *(void *)(v1 + 208));
    if ((void **)v49 == v7)
    {
      uint64_t v25 = *(void *)(v1 + 352);
      uint64_t v17 = *(void **)(v1 + 312);
LABEL_52:
      swift_bridgeObjectRelease(v25);

      uint64_t v97 = *(void *)(v1 + 304);
      swift_bridgeObjectRelease(v97);
LABEL_63:
      unint64_t v100 = *(void *)(v1 + 256);
      uint64_t v102 = *(void *)(v1 + 224);
      unint64_t v101 = *(void *)(v1 + 232);
      uint64_t v103 = *(void *)(v1 + 200);
      char v104 = *(void *)(v1 + 176);
      unint64_t v106 = *(void *)(v1 + 144);
      uint64_t v105 = *(void *)(v1 + 152);
      char v107 = *(void *)(v1 + 136);
      swift_task_dealloc(*(void *)(v1 + 280));
      swift_task_dealloc(v100);
      swift_task_dealloc(v101);
      swift_task_dealloc(v102);
      swift_task_dealloc(v103);
      swift_task_dealloc(v104);
      swift_task_dealloc(v105);
      swift_task_dealloc(v106);
      swift_task_dealloc(v107);
      return (*(uint64_t (**)(void))(v1 + 8))(0LL);
    }

    uint64_t v6 = *(void *)(v1 + 368) + 1LL;
    *(void *)(v1 + 368) = v6;
    uint64_t v25 = *(void *)(v1 + 352);
    if (v6 >= *(void *)(v25 + 16)) {
      goto LABEL_26;
    }
  }

  uint64_t v34 = 0LL;
  uint64_t v35 = *(void *)(v1 + 168);
  uint64_t v36 = *(_DWORD *)(v35 + 80);
  *(_DWORD *)(v1 + 448) = v36;
  uint64_t v37 = *(void *)(v35 + 72);
  *(void *)(v1 + 39static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = v37;
  uint64_t v38 = *(uint64_t (**)(void, unint64_t, void))(v35 + 16);
  *(void *)(v1 + 400) = v38;
  while (1)
  {
    *(void *)(v1 + 408) = v34;
    uint64_t v39 = *(void *)(v1 + 152);
    uint64_t v40 = v38( *(void *)(v1 + 176),  *(void *)(v1 + 376)
          + ((v36 + 32LL) & ~(unint64_t)v36)
          + v37 * v34,
            *(void *)(v1 + 160));
    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter(v40);
    uint64_t v41 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams(0LL);
    uint64_t v42 = *(void *)(v41 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v39, 1LL, v41) == 1)
    {
      (*(void (**)(void, void))(*(void *)(v1 + 168) + 8LL))( *(void *)(v1 + 176),  *(void *)(v1 + 160));
      goto LABEL_20;
    }

    uint64_t v43 = *(_DWORD *)(v1 + 444);
    uint64_t v44 = *(void *)(v1 + 144);
    outlined init with copy of Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?( *(void *)(v1 + 152),  v44);
    uint64_t v45 = *(void *)(v1 + 144);
    (*(void (**)(void, void))(*(void *)(v1 + 168) + 8LL))(*(void *)(v1 + 176), *(void *)(v1 + 160));
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v45, v41);
LABEL_20:
    uint64_t v46 = *(void *)(v1 + 384);
    uint64_t v47 = *(void *)(v1 + 408) + 1LL;
    outlined destroy of Any?( *(void *)(v1 + 152),  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
    if (v47 == v46)
    {
      uint64_t v48 = *(void *)(v1 + 376);
      goto LABEL_24;
    }

    uint64_t v38 = *(uint64_t (**)(void, unint64_t, void))(v1 + 400);
    uint64_t v34 = *(void *)(v1 + 408) + 1LL;
    uint64_t v37 = *(void *)(v1 + 392);
    LOBYTE(v36) = *(_BYTE *)(v1 + 448);
  }

  uint64_t v87 = *(void *)(v1 + 136);
  uint64_t v86 = *(void *)(v1 + 144);
  unint64_t v88 = *(void *)(v1 + 120);
  char v89 = *(void *)(v1 + 128);
  (*(void (**)(uint64_t, uint64_t))(v42 + 96))(v86, v41);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 32))(v87, v86, v88);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v90 = type metadata accessor for Logger(0LL);
  unint64_t v91 = __swift_project_value_buffer(v90, (uint64_t)static Logger.information);
  *(void *)(v1 + 416) = v91;
  unint64_t v92 = (os_log_s *)Logger.logObject.getter(v91);
  uint64_t v93 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v92, v93))
  {
    uint64_t v94 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v94 = 0;
    _os_log_impl(&dword_0, v92, v93, "Donating Geo Intent to Siri Suggestions", v94, 2u);
    swift_slowDealloc(v94, -1LL, -1LL);
  }

  uint64_t v95 = *(void *)(v1 + 304);

  uint64_t v96 = (void *)swift_task_alloc(unk_A2C74);
  *(void *)(v1 + 424) = v96;
  *uint64_t v96 = v1;
  v96[1] = SuggestionsEntryPoint.flowFor(input:);
  return ((uint64_t (*)(void, void, uint64_t))v109)(*(void *)(v1 + 136), *(void *)(v1 + 296), v95);
}

uint64_t SuggestionsEntryPoint.flowFor(input:)()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = *(void *)(*v0 + 320);
  uint64_t v3 = *(void *)(*v0 + 112);
  uint64_t v8 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 336));
  uint64_t v4 = *(int **)(*(void *)v3 + 88LL);
  uint64_t v7 = (int *)((char *)v4 + *v4);
  unint64_t v5 = (void *)swift_task_alloc(v4[1]);
  v1[43] = v5;
  *unint64_t v5 = v8;
  v5[1] = SuggestionsEntryPoint.flowFor(input:);
  return ((uint64_t (*)(void, void, uint64_t))v7)(v1[32], v1[41], v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(*(void *)v0 + 320LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 344LL));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(SuggestionsEntryPoint.flowFor(input:), 0LL, 0LL);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v1 = *(void **)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 240);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  unint64_t v5 = *(void *)(v0 + 256);
  uint64_t v7 = *(void *)(v0 + 224);
  uint64_t v6 = *(void *)(v0 + 232);
  uint64_t v8 = *(void *)(v0 + 200);
  uint64_t v9 = *(void *)(v0 + 176);
  uint64_t v11 = *(void *)(v0 + 144);
  uint64_t v10 = *(void *)(v0 + 152);
  uint64_t v12 = *(void *)(v0 + 136);
  swift_task_dealloc(*(void *)(v0 + 280));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 424LL);
  *(void *)(*(void *)v1 + 432LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v2[47];
    unint64_t v5 = v2[44];
    uint64_t v6 = v2[38];
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v6);
    uint64_t v7 = SuggestionsEntryPoint.flowFor(input:);
  }

  else
  {
    uint64_t v7 = SuggestionsEntryPoint.flowFor(input:);
  }

  return swift_task_switch(v7, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void, unint64_t, void);
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_log_s *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  void *v51;
  char *v52;
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 160);
  (*(void (**)(void, void))(*(void *)(v0 + 128) + 8LL))(*(void *)(v0 + 136), *(void *)(v0 + 120));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  while (1)
  {
    while (1)
    {
      uint64_t v4 = *(void *)(v0 + 384);
      unint64_t v5 = *(void *)(v0 + 408) + 1LL;
      outlined destroy of Any?( *(void *)(v0 + 152),  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
      if (v5 == v4)
      {
        for (uint64_t i = *(void *)(v0 + 376); ; uint64_t i = v16)
        {
          swift_bridgeObjectRelease(i);
          uint64_t v7 = *(void *)(v0 + 360);
          uint64_t v8 = *(void *)(v0 + 368) + 1LL;
          (*(void (**)(void, void))(*(void *)(v0 + 216) + 8LL))( *(void *)(v0 + 224),  *(void *)(v0 + 208));
          if (v8 == v7)
          {
            uint64_t v30 = *(void **)(v0 + 312);
            swift_bridgeObjectRelease(*(void *)(v0 + 352));

            uint64_t v31 = *(void *)(v0 + 304);
            swift_bridgeObjectRelease(v31);
            __int128 v32 = *(void *)(v0 + 256);
            uint64_t v34 = *(void *)(v0 + 224);
            uint64_t v33 = *(void *)(v0 + 232);
            uint64_t v35 = *(void *)(v0 + 200);
            uint64_t v36 = *(void *)(v0 + 176);
            uint64_t v38 = *(void *)(v0 + 144);
            uint64_t v37 = *(void *)(v0 + 152);
            uint64_t v39 = *(void *)(v0 + 136);
            swift_task_dealloc(*(void *)(v0 + 280));
            swift_task_dealloc(v32);
            swift_task_dealloc(v33);
            swift_task_dealloc(v34);
            swift_task_dealloc(v35);
            swift_task_dealloc(v36);
            swift_task_dealloc(v37);
            swift_task_dealloc(v38);
            swift_task_dealloc(v39);
            return (*(uint64_t (**)(void))(v0 + 8))(0LL);
          }

          uint64_t v9 = *(void *)(v0 + 368) + 1LL;
          *(void *)(v0 + 368) = v9;
          uint64_t v10 = *(void *)(v0 + 352);
          if (v9 >= *(void *)(v10 + 16)) {
            break;
          }
          uint64_t v11 = *(void *)(v0 + 200);
          uint64_t v12 = *(void *)(v0 + 184);
          uint64_t v13 = *(void *)(v0 + 192);
          uint64_t v14 = (*(uint64_t (**)(void, unint64_t, void))(*(void *)(v0 + 216) + 16LL))( *(void *)(v0 + 224),  v10 + ((*(unsigned __int8 *)(v0 + 440) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 440))
                + *(void *)(*(void *)(v0 + 216) + 72LL) * v9,
                  *(void *)(v0 + 208));
          uint64_t v15 = Apple_Parsec_Siri_V2alpha_ExperienceComponent.delayedActionComponent.getter(v14);
          uint64_t v16 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter(v15);
          *(void *)(v0 + 376) = v16;
          (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
          uint64_t v17 = *(void *)(v16 + 16);
          *(void *)(v0 + 384) = v17;
          if (v17)
          {
            BOOL v19 = 0LL;
            uint64_t v22 = *(void *)(v0 + 168);
            uint64_t v21 = *(_DWORD *)(v22 + 80);
            *(_DWORD *)(v0 + 448) = v21;
            uint64_t v20 = *(void *)(v22 + 72);
            *(void *)(v0 + 39static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = v20;
            os_log_type_t v18 = *(uint64_t (**)(void, unint64_t, void))(v22 + 16);
            *(void *)(v0 + 400) = v18;
            goto LABEL_11;
          }
        }

        __break(1u);
        goto LABEL_20;
      }

      os_log_type_t v18 = *(uint64_t (**)(void, unint64_t, void))(v0 + 400);
      BOOL v19 = *(void *)(v0 + 408) + 1LL;
      uint64_t v20 = *(void *)(v0 + 392);
      LOBYTE(v21) = *(_BYTE *)(v0 + 448);
LABEL_11:
      *(void *)(v0 + 408) = v19;
      unint64_t v23 = *(void *)(v0 + 152);
      unint64_t v24 = v18( *(void *)(v0 + 176),  *(void *)(v0 + 376)
            + ((v21 + 32LL) & ~(unint64_t)v21)
            + v20 * v19,
              *(void *)(v0 + 160));
      Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter(v24);
      uint64_t v25 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams(0LL);
      uint64_t v26 = *(void *)(v25 - 8);
      (*(void (**)(void, void))(*(void *)(v0 + 168) + 8LL))( *(void *)(v0 + 176),  *(void *)(v0 + 160));
    }

    uint64_t v27 = *(_DWORD *)(v0 + 444);
    uint64_t v28 = *(void *)(v0 + 144);
    outlined init with copy of Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?( *(void *)(v0 + 152),  v28);
    uint64_t v29 = *(void *)(v0 + 144);
    (*(void (**)(void, void))(*(void *)(v0 + 168) + 8LL))(*(void *)(v0 + 176), *(void *)(v0 + 160));
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v29, v25);
  }

  uint64_t v42 = *(void *)(v0 + 136);
  uint64_t v41 = *(void *)(v0 + 144);
  uint64_t v43 = *(void *)(v0 + 120);
  uint64_t v44 = *(void *)(v0 + 128);
  (*(void (**)(uint64_t, uint64_t))(v26 + 96))(v41, v25);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32))(v42, v41, v43);
  if (one-time initialization token for information == -1) {
    goto LABEL_16;
  }
LABEL_20:
  swift_once(&one-time initialization token for information, one-time initialization function for information);
LABEL_16:
  uint64_t v45 = type metadata accessor for Logger(0LL);
  uint64_t v46 = __swift_project_value_buffer(v45, (uint64_t)static Logger.information);
  *(void *)(v0 + 416) = v46;
  uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
  uint64_t v48 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v49 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v49 = 0;
    _os_log_impl(&dword_0, v47, v48, "Donating Geo Intent to Siri Suggestions", v49, 2u);
    swift_slowDealloc(v49, -1LL, -1LL);
  }

  uint64_t v50 = *(void *)(v0 + 304);

  uint64_t v51 = (void *)swift_task_alloc(unk_A2C74);
  *(void *)(v0 + 424) = v51;
  *uint64_t v51 = v0;
  v51[1] = SuggestionsEntryPoint.flowFor(input:);
  return ((uint64_t (*)(void, void, uint64_t))v52)(*(void *)(v0 + 136), *(void *)(v0 + 296), v50);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_log_s *v10;
  os_log_type_t v11;
  uint64_t v12;
  void *v13;
  uint8_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v29;
  uint64_t v1 = *(void *)(v0 + 432);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v6 = *(void *)(v0 + 168);
  unint64_t v5 = *(void *)(v0 + 176);
  uint64_t v8 = *(void *)(v0 + 152);
  uint64_t v7 = *(void *)(v0 + 160);
  (*(void (**)(void, void))(*(void *)(v0 + 128) + 8LL))(*(void *)(v0 + 136), *(void *)(v0 + 120));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  outlined destroy of Any?( v8,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  swift_errorRetain(v1);
  uint64_t v9 = swift_errorRetain(v1);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  uint64_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = *(void *)(v0 + 432);
    uint64_t v13 = *(void **)(v0 + 312);
    uint64_t v29 = *(void **)(v0 + 288);
    uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v14 = 138412290;
    swift_errorRetain(v12);
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError(v12);
    *(void *)(v0 + 96) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104);
    *uint64_t v15 = v16;
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    _os_log_impl(&dword_0, v10, v11, "Received error donating to Siri Suggestions: %@", v14, 0xCu);
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v15, 1LL, v17);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);

    swift_errorRelease(v12);
  }

  else
  {
    os_log_type_t v18 = *(void *)(v0 + 432);
    BOOL v19 = *(void **)(v0 + 288);

    swift_errorRelease(v18);
    swift_errorRelease(v18);
    swift_errorRelease(v18);
  }

  uint64_t v20 = *(void *)(v0 + 256);
  uint64_t v22 = *(void *)(v0 + 224);
  uint64_t v21 = *(void *)(v0 + 232);
  unint64_t v23 = *(void *)(v0 + 200);
  unint64_t v24 = *(void *)(v0 + 176);
  uint64_t v26 = *(void *)(v0 + 144);
  uint64_t v25 = *(void *)(v0 + 152);
  uint64_t v27 = *(void *)(v0 + 136);
  swift_task_dealloc(*(void *)(v0 + 280));
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion(0LL);
  void v3[9] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[10] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[11] = swift_task_alloc(v6);
  v3[12] = swift_task_alloc(v6);
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate(0LL);
  v3[13] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[14] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[15] = swift_task_alloc(v9);
  v3[16] = swift_task_alloc(v9);
  v3[17] = swift_task_alloc(v9);
  v3[18] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SuggestionIntent(0LL);
  v3[19] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[20] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[21] = swift_task_alloc(v12);
  v3[22] = swift_task_alloc(v12);
  v3[23] = swift_task_alloc(v12);
  return swift_task_switch(SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:), 0LL, 0LL);
}

uint64_t SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:)()
{
  uint64_t v1 = (void *)swift_task_alloc(unk_A2C84);
  v0[24] = v1;
  *uint64_t v1 = v0;
  v1[1] = SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:);
  return v3(v0[23], v0[7], v0[8]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  void *v8;
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 184);
  uint64_t v3 = *(void *)(*v1 + 192);
  uint64_t v5 = *(void *)(*v1 + 152);
  unint64_t v6 = *(void *)(*v1 + 160);
  *(void *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  *(void *)(v2 + 208) = v7;
  v7(v4, v5);
  if (v0) {
    uint64_t v8 = SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:);
  }
  else {
    uint64_t v8 = SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:);
  }
  return swift_task_switch(v8, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  void (*v46)(char *, uint64_t, uint64_t);
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t);
  unint64_t v72;
  char *v73;
  char *v74;
  if (one-time initialization token for information != -1) {
    goto LABEL_35;
  }
  while (1)
  {
    uint64_t v1 = *(void *)(v0 + 200);
    uint64_t v2 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v2, (uint64_t)static Logger.information);
    swift_errorRetain(v1);
    uint64_t v3 = swift_errorRetain(v1);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    uint64_t v5 = static os_log_type_t.error.getter();
    unint64_t v6 = os_log_type_enabled(v4, v5);
    uint64_t v7 = *(void *)(v0 + 200);
    if (v6)
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      unint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v8 = 138412290;
      swift_errorRetain(v7);
      uint64_t v10 = _swift_stdlib_bridgeErrorToNSError(v7);
      *(void *)(v0 + 40) = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48);
      *unint64_t v9 = v10;
      swift_errorRelease(v7);
      swift_errorRelease(v7);
      _os_log_impl(&dword_0, v4, v5, "Unable to submit engagement to Siri Suggestions: %@", v8, 0xCu);
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v9, 1LL, v11);
      swift_slowDealloc(v9, -1LL, -1LL);
      swift_slowDealloc(v8, -1LL, -1LL);

      unint64_t v12 = swift_errorRelease(v7);
    }

    else
    {
      swift_errorRelease(*(void *)(v0 + 200));
      swift_errorRelease(v7);
      swift_errorRelease(v7);
    }

    uint64_t v13 = Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.getter(v12);
    uint64_t v14 = v13;
    uint64_t v15 = (char *)_swiftEmptyArrayStorage;
    unint64_t v73 = (char *)_swiftEmptyArrayStorage;
    uint64_t v66 = *(void *)(v13 + 16);
    if (v66)
    {
      uint64_t v16 = 0LL;
      uint64_t v63 = *(void *)(v0 + 160);
      uint64_t v17 = *(void *)(v0 + 112);
      uint64_t v62 = enum case for Apple_Parsec_Siri_V2alpha_SuggestionIntent.unspecified(_:);
      uint64_t v61 = v13;
      while (v16 < *(void *)(v14 + 16))
      {
        os_log_type_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
        uint64_t v20 = *(void *)(v0 + 168);
        BOOL v19 = *(void *)(v0 + 176);
        uint64_t v21 = *(void *)(v0 + 152);
        unint64_t v68 = (*(unsigned __int8 *)(v17 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
        uint64_t v70 = *(void *)(v17 + 72);
        uint64_t v22 = (*(uint64_t (**)(void, unint64_t, void))(v17 + 16))( *(void *)(v0 + 144),  v14 + v68 + v70 * v16,  *(void *)(v0 + 104));
        Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate.intent.getter(v22);
        (*(void (**)(uint64_t, void, uint64_t))(v63 + 104))(v20, v62, v21);
        unint64_t v23 = lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SuggestionIntent and conformance Apple_Parsec_Siri_V2alpha_SuggestionIntent( &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SuggestionIntent and conformance Apple_Parsec_Siri_V2alpha_SuggestionIntent,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_SuggestionIntent);
        dispatch thunk of RawRepresentable.rawValue.getter((void *)(v0 + 16), v21, v23);
        dispatch thunk of RawRepresentable.rawValue.getter((void *)(v0 + 24), v21, v23);
        unint64_t v24 = *(void *)(v0 + 16);
        uint64_t v25 = *(void *)(v0 + 24);
        v18(v20, v21);
        v18(v19, v21);
        if (v24 == v25)
        {
          uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 32);
          v26(*(char **)(v0 + 136), *(void *)(v0 + 144), *(void *)(v0 + 104));
          if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *((void *)v15 + 2) + 1LL,  1);
            uint64_t v15 = v73;
          }

          uint64_t v14 = v61;
          uint64_t v28 = *((void *)v15 + 2);
          uint64_t v27 = *((void *)v15 + 3);
          if (v28 >= v27 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v27 > 1,  v28 + 1,  1);
            uint64_t v15 = v73;
          }

          uint64_t v29 = *(void *)(v0 + 136);
          uint64_t v30 = *(void *)(v0 + 104);
          *((void *)v15 + static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = v28 + 1;
          v26(&v15[v68 + v28 * v70], v29, v30);
          unint64_t v73 = v15;
        }

        else
        {
          (*(void (**)(void, void))(v17 + 8))(*(void *)(v0 + 144), *(void *)(v0 + 104));
          uint64_t v14 = v61;
        }

        if (v66 == ++v16) {
          goto LABEL_16;
        }
      }

      __break(1u);
      goto LABEL_34;
    }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v2 = *(void *)(*(void *)v1 + 216LL);
  *(void *)(*(void *)v1 + 224LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:);
  }
  else {
    uint64_t v3 = SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:);
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void (*v14)(char *, uint64_t, uint64_t);
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  char *v34;
  uint64_t v1 = (*(uint64_t (**)(void, void))(*(void *)(v0 + 80) + 8LL))( *(void *)(v0 + 96),  *(void *)(v0 + 72));
  uint64_t result = Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.getter(v1);
  uint64_t v3 = (char *)_swiftEmptyArrayStorage;
  uint64_t v34 = (char *)_swiftEmptyArrayStorage;
  uint64_t v31 = *(void *)(result + 16);
  if (v31)
  {
    uint64_t v4 = 0LL;
    uint64_t v29 = *(void *)(v0 + 160);
    uint64_t v5 = *(void *)(v0 + 112);
    uint64_t v28 = enum case for Apple_Parsec_Siri_V2alpha_SuggestionIntent.unspecified(_:);
    uint64_t v30 = result;
    while (v4 < *(void *)(result + 16))
    {
      unint64_t v6 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
      uint64_t v8 = *(void *)(v0 + 168);
      uint64_t v7 = *(void *)(v0 + 176);
      unint64_t v9 = *(void *)(v0 + 152);
      uint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      __int128 v32 = *(void *)(v5 + 72);
      uint64_t v11 = (*(uint64_t (**)(void, unint64_t, void))(v5 + 16))( *(void *)(v0 + 128),  result + v10 + v32 * v4,  *(void *)(v0 + 104));
      Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate.intent.getter(v11);
      (*(void (**)(uint64_t, void, uint64_t))(v29 + 104))(v8, v28, v9);
      unint64_t v12 = lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SuggestionIntent and conformance Apple_Parsec_Siri_V2alpha_SuggestionIntent( &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SuggestionIntent and conformance Apple_Parsec_Siri_V2alpha_SuggestionIntent,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_SuggestionIntent);
      uint64_t v13 = dispatch thunk of static Equatable.== infix(_:_:)(v7, v8, v9, v12);
      v6(v8, v9);
      v6(v7, v9);
      if ((v13 & 1) != 0)
      {
        (*(void (**)(void, void))(v5 + 8))(*(void *)(v0 + 128), *(void *)(v0 + 104));
      }

      else
      {
        uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 32);
        v14(*(char **)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 104));
        if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *((void *)v3 + 2) + 1LL,  1);
          uint64_t v3 = v34;
        }

        uint64_t v16 = *((void *)v3 + 2);
        uint64_t v15 = *((void *)v3 + 3);
        if (v16 >= v15 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v15 > 1,  v16 + 1,  1);
          uint64_t v3 = v34;
        }

        uint64_t v17 = *(void *)(v0 + 120);
        os_log_type_t v18 = *(void *)(v0 + 104);
        *((void *)v3 + static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = v16 + 1;
        v14(&v3[v10 + v16 * v32], v17, v18);
        uint64_t v34 = v3;
      }

      ++v4;
      uint64_t result = v30;
      if (v31 == v4) {
        goto LABEL_12;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_12:
    swift_bridgeObjectRelease(result);
    if (*((void *)v3 + 2))
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 80) + 16LL))( *(void *)(v0 + 88),  *(void *)(v0 + 48),  *(void *)(v0 + 72));
      Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.setter(v3);
      BOOL v19 = (void *)swift_task_alloc(unk_A2CA4);
      *(void *)(v0 + 23static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = v19;
      *BOOL v19 = v0;
      v19[1] = SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:);
      return v33(*(void *)(v0 + 88), *(void *)(v0 + 56), *(void *)(v0 + 64));
    }

    else
    {
      swift_release(v3);
      uint64_t v20 = *(void *)(v0 + 176);
      uint64_t v21 = *(void *)(v0 + 168);
      unint64_t v23 = *(void *)(v0 + 136);
      uint64_t v22 = *(void *)(v0 + 144);
      uint64_t v25 = *(void *)(v0 + 120);
      unint64_t v24 = *(void *)(v0 + 128);
      uint64_t v27 = *(void *)(v0 + 88);
      uint64_t v26 = *(void *)(v0 + 96);
      swift_task_dealloc(*(void *)(v0 + 184));
      swift_task_dealloc(v20);
      swift_task_dealloc(v21);
      swift_task_dealloc(v22);
      swift_task_dealloc(v23);
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      swift_task_dealloc(v27);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }

  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v1 = *(void *)(v0 + 224);
  (*(void (**)(void, void))(*(void *)(v0 + 80) + 8LL))(*(void *)(v0 + 96), *(void *)(v0 + 72));
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v2, (uint64_t)static Logger.information);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)unint64_t v6 = 138412290;
    swift_errorRetain(v1);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 3static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40);
    int *v7 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl(&dword_0, v4, v5, "Recieved error donating to Siri Suggestions: %@", v6, 0xCu);
    unint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v10 = *(void *)(v0 + 176);
  uint64_t v11 = *(void *)(v0 + 168);
  uint64_t v13 = *(void *)(v0 + 136);
  unint64_t v12 = *(void *)(v0 + 144);
  uint64_t v15 = *(void *)(v0 + 120);
  uint64_t v14 = *(void *)(v0 + 128);
  uint64_t v17 = *(void *)(v0 + 88);
  uint64_t v16 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 184));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v2 = *(void *)(*(void *)v1 + 232LL);
  *(void *)(*(void *)v1 + 24swift_beginAccess(v0 + 64, v2, 0LL, 0LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:);
  }
  else {
    uint64_t v3 = SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:);
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  (*(void (**)(void, void))(*(void *)(v0 + 80) + 8LL))(*(void *)(v0 + 88), *(void *)(v0 + 72));
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 144);
  unint64_t v6 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 128);
  uint64_t v8 = *(void *)(v0 + 88);
  uint64_t v7 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 184));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v1 = *(void *)(v0 + 240);
  (*(void (**)(void, void))(*(void *)(v0 + 80) + 8LL))(*(void *)(v0 + 88), *(void *)(v0 + 72));
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v2, (uint64_t)static Logger.information);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)unint64_t v6 = 138412290;
    swift_errorRetain(v1);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 3static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40);
    int *v7 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl(&dword_0, v4, v5, "Recieved error donating to Siri Suggestions: %@", v6, 0xCu);
    unint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v10 = *(void *)(v0 + 176);
  uint64_t v11 = *(void *)(v0 + 168);
  uint64_t v13 = *(void *)(v0 + 136);
  unint64_t v12 = *(void *)(v0 + 144);
  uint64_t v15 = *(void *)(v0 + 120);
  uint64_t v14 = *(void *)(v0 + 128);
  uint64_t v17 = *(void *)(v0 + 88);
  uint64_t v16 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 184));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:)(uint64_t a1)
{
  uint64_t result = Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.getter(a1);
  uint64_t v3 = (char *)_swiftEmptyArrayStorage;
  uint64_t v59 = (char *)_swiftEmptyArrayStorage;
  uint64_t v52 = *(void *)(result + 16);
  if (v52)
  {
    unint64_t v4 = 0LL;
    uint64_t v48 = *(void *)(v1 + 160);
    uint64_t v5 = *(void *)(v1 + 112);
    unsigned int v47 = enum case for Apple_Parsec_Siri_V2alpha_SuggestionIntent.unspecified(_:);
    uint64_t v50 = result;
    while (v4 < *(void *)(result + 16))
    {
      unint64_t v6 = *(void (**)(uint64_t, uint64_t))(v1 + 208);
      uint64_t v8 = *(void *)(v1 + 168);
      uint64_t v7 = *(void *)(v1 + 176);
      uint64_t v9 = *(void *)(v1 + 152);
      uint64_t v54 = *(void *)(v5 + 72);
      unint64_t v56 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      uint64_t v10 = (*(uint64_t (**)(void, unint64_t, void))(v5 + 16))( *(void *)(v1 + 144),  result + v56 + v54 * v4,  *(void *)(v1 + 104));
      Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate.intent.getter(v10);
      (*(void (**)(uint64_t, void, uint64_t))(v48 + 104))(v8, v47, v9);
      uint64_t v11 = lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SuggestionIntent and conformance Apple_Parsec_Siri_V2alpha_SuggestionIntent( &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SuggestionIntent and conformance Apple_Parsec_Siri_V2alpha_SuggestionIntent,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_SuggestionIntent);
      dispatch thunk of RawRepresentable.rawValue.getter((void *)(v1 + 16), v9, v11);
      dispatch thunk of RawRepresentable.rawValue.getter((void *)(v1 + 24), v9, v11);
      uint64_t v12 = *(void *)(v1 + 16);
      uint64_t v13 = *(void *)(v1 + 24);
      v6(v8, v9);
      v6(v7, v9);
      if (v12 == v13)
      {
        uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 32);
        v14(*(char **)(v1 + 136), *(void *)(v1 + 144), *(void *)(v1 + 104));
        if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *((void *)v3 + 2) + 1LL,  1);
          uint64_t v3 = v59;
        }

        unint64_t v16 = *((void *)v3 + 2);
        unint64_t v15 = *((void *)v3 + 3);
        if (v16 >= v15 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v15 > 1,  v16 + 1,  1);
          uint64_t v3 = v59;
        }

        uint64_t v17 = *(void *)(v1 + 136);
        uint64_t v18 = *(void *)(v1 + 104);
        *((void *)v3 + static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = v16 + 1;
        v14(&v3[v56 + v16 * v54], v17, v18);
        uint64_t v59 = v3;
      }

      else
      {
        (*(void (**)(void, void))(v5 + 8))(*(void *)(v1 + 144), *(void *)(v1 + 104));
      }

      ++v4;
      uint64_t result = v50;
      if (v52 == v4) {
        goto LABEL_12;
      }
    }

    __break(1u);
    goto LABEL_30;
  }

LABEL_12:
  swift_bridgeObjectRelease(result);
  if (*((void *)v3 + 2))
  {
    (*(void (**)(void, void, void))(*(void *)(v1 + 80) + 16LL))( *(void *)(v1 + 96),  *(void *)(v1 + 48),  *(void *)(v1 + 72));
    Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.setter(v3);
    BOOL v19 = (void *)swift_task_alloc(unk_A2C94);
    *(void *)(v1 + 216) = v19;
    *BOOL v19 = v1;
    v19[1] = SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:);
    uint64_t v20 = *(void *)(v1 + 96);
    return v57(v20, *(void *)(v1 + 56), *(void *)(v1 + 64));
  }

  uint64_t v21 = swift_release(v3);
  uint64_t result = Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.getter(v21);
  uint64_t v22 = (char *)_swiftEmptyArrayStorage;
  __int128 v60 = (char *)_swiftEmptyArrayStorage;
  uint64_t v55 = *(void *)(result + 16);
  if (!v55)
  {
LABEL_25:
    swift_bridgeObjectRelease(result);
    if (!*((void *)v22 + 2))
    {
      swift_release(v22);
      uint64_t v39 = *(void *)(v1 + 176);
      uint64_t v40 = *(void *)(v1 + 168);
      uint64_t v42 = *(void *)(v1 + 136);
      uint64_t v41 = *(void *)(v1 + 144);
      uint64_t v44 = *(void *)(v1 + 120);
      uint64_t v43 = *(void *)(v1 + 128);
      uint64_t v46 = *(void *)(v1 + 88);
      uint64_t v45 = *(void *)(v1 + 96);
      swift_task_dealloc(*(void *)(v1 + 184));
      swift_task_dealloc(v39);
      swift_task_dealloc(v40);
      swift_task_dealloc(v41);
      swift_task_dealloc(v42);
      swift_task_dealloc(v43);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      return (*(uint64_t (**)(void))(v1 + 8))();
    }

    (*(void (**)(void, void, void))(*(void *)(v1 + 80) + 16LL))( *(void *)(v1 + 88),  *(void *)(v1 + 48),  *(void *)(v1 + 72));
    Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.setter(v22);
    uint64_t v38 = (void *)swift_task_alloc(unk_A2CA4);
    *(void *)(v1 + 23static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = v38;
    *uint64_t v38 = v1;
    v38[1] = SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:);
    uint64_t v20 = *(void *)(v1 + 88);
    return v57(v20, *(void *)(v1 + 56), *(void *)(v1 + 64));
  }

  unint64_t v23 = 0LL;
  uint64_t v51 = *(void *)(v1 + 160);
  uint64_t v24 = *(void *)(v1 + 112);
  unsigned int v49 = enum case for Apple_Parsec_Siri_V2alpha_SuggestionIntent.unspecified(_:);
  uint64_t v53 = result;
  while (v23 < *(void *)(result + 16))
  {
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v1 + 208);
    uint64_t v27 = *(void *)(v1 + 168);
    uint64_t v26 = *(void *)(v1 + 176);
    uint64_t v28 = *(void *)(v1 + 152);
    uint64_t v29 = *(void *)(v24 + 72);
    unint64_t v58 = (*(unsigned __int8 *)(v24 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
    uint64_t v30 = (*(uint64_t (**)(void, unint64_t, void))(v24 + 16))( *(void *)(v1 + 128),  result + v58 + v29 * v23,  *(void *)(v1 + 104));
    Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate.intent.getter(v30);
    (*(void (**)(uint64_t, void, uint64_t))(v51 + 104))(v27, v49, v28);
    uint64_t v31 = lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SuggestionIntent and conformance Apple_Parsec_Siri_V2alpha_SuggestionIntent( &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SuggestionIntent and conformance Apple_Parsec_Siri_V2alpha_SuggestionIntent,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_SuggestionIntent);
    char v32 = dispatch thunk of static Equatable.== infix(_:_:)(v26, v27, v28, v31);
    v25(v27, v28);
    v25(v26, v28);
    if ((v32 & 1) != 0)
    {
      (*(void (**)(void, void))(v24 + 8))(*(void *)(v1 + 128), *(void *)(v1 + 104));
    }

    else
    {
      uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 32);
      v33(*(char **)(v1 + 120), *(void *)(v1 + 128), *(void *)(v1 + 104));
      if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *((void *)v22 + 2) + 1LL,  1);
        uint64_t v22 = v60;
      }

      unint64_t v35 = *((void *)v22 + 2);
      unint64_t v34 = *((void *)v22 + 3);
      if (v35 >= v34 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
        uint64_t v22 = v60;
      }

      uint64_t v36 = *(void *)(v1 + 120);
      uint64_t v37 = *(void *)(v1 + 104);
      *((void *)v22 + static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = v35 + 1;
      v33(&v22[v58 + v35 * v29], v36, v37);
      __int128 v60 = v22;
    }

    ++v23;
    uint64_t result = v53;
    if (v55 == v23) {
      goto LABEL_25;
    }
  }

LABEL_16:
    swift_bridgeObjectRelease(v14);
    if (*((void *)v15 + 2))
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 80) + 16LL))( *(void *)(v0 + 96),  *(void *)(v0 + 48),  *(void *)(v0 + 72));
      Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.setter(v15);
      uint64_t v31 = (void *)swift_task_alloc(unk_A2C94);
      *(void *)(v0 + 216) = v31;
      *uint64_t v31 = v0;
      v31[1] = SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:);
      char v32 = *(void *)(v0 + 96);
      return v71(v32, *(void *)(v0 + 56), *(void *)(v0 + 64));
    }

    uint64_t v33 = swift_release(v15);
    unint64_t v34 = Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.getter(v33);
    unint64_t v35 = (char *)_swiftEmptyArrayStorage;
    uint64_t v74 = (char *)_swiftEmptyArrayStorage;
    uint64_t v69 = *(void *)(v34 + 16);
    if (!v69) {
      break;
    }
    uint64_t v36 = 0LL;
    int v65 = *(void *)(v0 + 160);
    uint64_t v37 = *(void *)(v0 + 112);
    uint64_t v64 = enum case for Apple_Parsec_Siri_V2alpha_SuggestionIntent.unspecified(_:);
    unint64_t v67 = v34;
    while (v36 < *(void *)(v34 + 16))
    {
      uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
      uint64_t v40 = *(void *)(v0 + 168);
      uint64_t v39 = *(void *)(v0 + 176);
      uint64_t v41 = *(void *)(v0 + 152);
      uint64_t v42 = *(void *)(v37 + 72);
      unint64_t v72 = (*(unsigned __int8 *)(v37 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
      uint64_t v43 = (*(uint64_t (**)(void, unint64_t, void))(v37 + 16))( *(void *)(v0 + 128),  v34 + v72 + v42 * v36,  *(void *)(v0 + 104));
      Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate.intent.getter(v43);
      (*(void (**)(uint64_t, void, uint64_t))(v65 + 104))(v40, v64, v41);
      uint64_t v44 = lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SuggestionIntent and conformance Apple_Parsec_Siri_V2alpha_SuggestionIntent( &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SuggestionIntent and conformance Apple_Parsec_Siri_V2alpha_SuggestionIntent,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_SuggestionIntent);
      uint64_t v45 = dispatch thunk of static Equatable.== infix(_:_:)(v39, v40, v41, v44);
      v38(v40, v41);
      v38(v39, v41);
      if ((v45 & 1) != 0)
      {
        (*(void (**)(void, void))(v37 + 8))(*(void *)(v0 + 128), *(void *)(v0 + 104));
      }

      else
      {
        uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 32);
        v46(*(char **)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 104));
        if ((swift_isUniquelyReferenced_nonNull_native(v35) & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *((void *)v35 + 2) + 1LL,  1);
          unint64_t v35 = v74;
        }

        uint64_t v48 = *((void *)v35 + 2);
        unsigned int v47 = *((void *)v35 + 3);
        if (v48 >= v47 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v47 > 1,  v48 + 1,  1);
          unint64_t v35 = v74;
        }

        unsigned int v49 = *(void *)(v0 + 120);
        uint64_t v50 = *(void *)(v0 + 104);
        *((void *)v35 + static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = v48 + 1;
        v46(&v35[v72 + v48 * v42], v49, v50);
        uint64_t v74 = v35;
      }

      ++v36;
      unint64_t v34 = v67;
      if (v69 == v36) {
        goto LABEL_29;
      }
    }

  uint64_t v43 = type metadata accessor for ConfirmationResponse(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56LL))( v47,  1LL,  1LL,  v43);
}

LABEL_34:
    __break(1u);
LABEL_35:
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }

LABEL_29:
  swift_bridgeObjectRelease(v34);
  if (*((void *)v35 + 2))
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 80) + 16LL))( *(void *)(v0 + 88),  *(void *)(v0 + 48),  *(void *)(v0 + 72));
    Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.setter(v35);
    uint64_t v51 = (void *)swift_task_alloc(unk_A2CA4);
    *(void *)(v0 + 23static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = v51;
    *uint64_t v51 = v0;
    v51[1] = SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:);
    char v32 = *(void *)(v0 + 88);
    return v71(v32, *(void *)(v0 + 56), *(void *)(v0 + 64));
  }

  swift_release(v35);
  uint64_t v53 = *(void *)(v0 + 176);
  uint64_t v54 = *(void *)(v0 + 168);
  unint64_t v56 = *(void *)(v0 + 136);
  uint64_t v55 = *(void *)(v0 + 144);
  unint64_t v58 = *(void *)(v0 + 120);
  __int128 v57 = *(void *)(v0 + 128);
  __int128 v60 = *(void *)(v0 + 88);
  uint64_t v59 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 184));
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t SuggestionsEntryPoint.handleAlternateSuggestion(siriSuggestion:requestId:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  uint64_t Suggestion = type metadata accessor for Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestion(0LL);
  v3[11] = Suggestion;
  uint64_t v5 = *(void *)(Suggestion - 8);
  v3[12] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[13] = swift_task_alloc(v6);
  v3[14] = swift_task_alloc(v6);
  return swift_task_switch(SuggestionsEntryPoint.handleAlternateSuggestion(siriSuggestion:requestId:), 0LL, 0LL);
}

uint64_t SuggestionsEntryPoint.handleAlternateSuggestion(siriSuggestion:requestId:)()
{
  *(void *)(v0 + 40) = &type metadata for Features;
  unint64_t v1 = lazy protocol witness table accessor for type Features and conformance Features();
  *(_BYTE *)(v0 + 16) = 3;
  *(void *)(v0 + 48) = v1;
  char v2 = isFeatureEnabled(_:)(v0 + 16);
  uint64_t v3 = __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  if ((v2 & 1) == 0)
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    uint64_t v20 = __swift_project_value_buffer(v19, (uint64_t)static Logger.information);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v21, v22)) {
      goto LABEL_17;
    }
    unint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v23 = 0;
    uint64_t v24 = "AlternateQuerySuggestion disabled, not donating suggestion";
    goto LABEL_16;
  }

  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v7 = Apple_Parsec_Siri_V2alpha_ServerSuggestion.alternateQuerySuggestion.getter(v3);
  uint64_t v8 = Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestion.candidates.getter(v7);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  *(void *)(v0 + 120) = v9;
  v9(v4, v5);
  uint64_t v10 = *(void *)(v8 + 16);
  swift_bridgeObjectRelease(v8);
  if (!v10)
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    uint64_t v26 = __swift_project_value_buffer(v25, (uint64_t)static Logger.information);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v21, v22)) {
      goto LABEL_17;
    }
    unint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v23 = 0;
    uint64_t v24 = "AlternateQuerySuggestion not found on POMMES response";
LABEL_16:
    _os_log_impl(&dword_0, v21, v22, v24, v23, 2u);
    swift_slowDealloc(v23, -1LL, -1LL);
LABEL_17:

    uint64_t v27 = *(void *)(v0 + 104);
    swift_task_dealloc(*(void *)(v0 + 112));
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = __swift_project_value_buffer(v11, (uint64_t)static Logger.information);
  *(void *)(v0 + 128) = v12;
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    unint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v15 = 0;
    _os_log_impl(&dword_0, v13, v14, "AlternateQuerySuggestion found on POMMES response, donating.", v15, 2u);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  Apple_Parsec_Siri_V2alpha_ServerSuggestion.alternateQuerySuggestion.getter(v16);
  uint64_t v17 = (void *)swift_task_alloc(unk_A2CB4);
  *(void *)(v0 + 136) = v17;
  *uint64_t v17 = v0;
  v17[1] = SuggestionsEntryPoint.handleAlternateSuggestion(siriSuggestion:requestId:);
  return ((uint64_t (*)(void, void, void))v28)( *(void *)(v0 + 104),  *(void *)(v0 + 72),  *(void *)(v0 + 80));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  char v2 = *(void *)(*(void *)v1 + 136LL);
  *(void *)(*(void *)v1 + 144LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = SuggestionsEntryPoint.handleAlternateSuggestion(siriSuggestion:requestId:);
  }
  else {
    uint64_t v3 = SuggestionsEntryPoint.handleAlternateSuggestion(siriSuggestion:requestId:);
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  (*(void (**)(void, void))(v0 + 120))(*(void *)(v0 + 104), *(void *)(v0 + 88));
  unint64_t v1 = *(void *)(v0 + 104);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v1 = *(void *)(v0 + 144);
  (*(void (**)(void, void))(v0 + 120))(*(void *)(v0 + 104), *(void *)(v0 + 88));
  swift_errorRetain(v1);
  char v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  uint64_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 144);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138412290;
    swift_errorRetain(v5);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v0 + 56) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64);
    int *v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl(&dword_0, v3, v4, "Recieved error donating alternateQuerySuggestion to Siri Suggestions: %@", v6, 0xCu);
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    swift_errorRelease(v5);
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 144);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  uint64_t v11 = *(void *)(v0 + 104);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for FlowEntryPoint.flowFor(input:) in conformance SuggestionsEntryPoint(uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 80LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Flow.onAsync(input:) in conformance InformationRoutingFlow;
  return v7(a1);
}

unint64_t lazy protocol witness table accessor for type Features and conformance Features()
{
  unint64_t result = lazy protocol witness table cache variable for type Features and conformance Features;
  if (!lazy protocol witness table cache variable for type Features and conformance Features)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Features, &type metadata for Features);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Features and conformance Features);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Features and conformance Features;
  if (!lazy protocol witness table cache variable for type Features and conformance Features)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Features, &type metadata for Features);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Features and conformance Features);
  }

  return result;
}

uint64_t outlined init with copy of Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)( uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  return _swift_stdlib_bridgeErrorToNSError(v1);
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *a1 + 8;
  if (v6) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0LL;
  }
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
  *a1 = v8;
  uint64_t v9 = *a2;
  if (*a2)
  {
    *uint64_t v9 = v7;
    *a2 = v9 + 1;
  }

  else
  {
  }

uint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SuggestionIntent and conformance Apple_Parsec_Siri_V2alpha_SuggestionIntent( unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SuggestionIntent(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t type metadata accessor for SuggestionsEntryPoint()
{
  return objc_opt_self(&OBJC_CLASS____TtC21InformationFlowPlugin21SuggestionsEntryPoint);
}

uint64_t SportsIntentDonator.init(donator:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of PatternFlowProviding(a1, a2);
}

void SportsIntentDonator.donateIfNeeded(parse:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v9 = static PerformanceUtil.shared.getter(v8);
  uint64_t v16 = a1;
  Date.init()(v9);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchForSportsIntent?);
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( &v17,  0xD00000000000001ELL,  0x80000000000809D0LL,  0LL,  v7,  "InformationFlowPlugin/SportsIntentDonator.swift",  47LL,  2LL,  40LL,  "donateIfNeeded(parse:)",  22LL,  2,  partial apply for closure #1 in SportsIntentDonator.donateIfNeeded(parse:),  v15,  v10);
  swift_release(v9);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  if (v17)
  {
    id v11 = v17;
    NSString v12 = String._bridgeToObjectiveC()();
    [v11 _setLaunchId:v12];

    uint64_t v13 = v2[3];
    uint64_t v14 = v2[4];
    __swift_project_boxed_opaque_existential_1(v2, v13);
    (*(void (**)(id, uint64_t, uint64_t))(v14 + 8))(v11, v13, v14);
  }

uint64_t closure #1 in static SportsIntentDonator.toDonatableIntent(parse:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction(0LL);
  uint64_t v36 = *(void *)(v2 - 8);
  uint64_t v37 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse(0LL);
  uint64_t v5 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Parse.PegasusResult(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Parse(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v15 = (void **)((char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(void **, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  int v16 = (*(uint64_t (**)(void **, uint64_t))(v13 + 88))(v15, v12);
  if (v16 == enum case for Parse.pegasusResults(_:))
  {
    (*(void (**)(void **, uint64_t))(v13 + 96))(v15, v12);
    uint64_t v17 = (*(uint64_t (**)(char *, void **, uint64_t))(v9 + 32))(v11, v15, v8);
    uint64_t v18 = Parse.PegasusResult.response.getter(v17);
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter(v18);
    uint64_t v19 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v35);
    uint64_t v20 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter(v19);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v4, v37);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return v20;
  }

  if (v16 != enum case for Parse.pommesResponse(_:))
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v29 = type metadata accessor for Logger(0LL);
    uint64_t v30 = __swift_project_value_buffer(v29, (uint64_t)static Logger.information);
    uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl(&dword_0, v31, v32, "toDonatableIntent does not have pommesResponse or pegasusResults", v33, 2u);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    (*(void (**)(void **, uint64_t))(v13 + 8))(v15, v12);
    return 0LL;
  }

  uint64_t v21 = (*(uint64_t (**)(void **, uint64_t))(v13 + 96))(v15, v12);
  os_log_type_t v22 = *v15;
  uint64_t v23 = dispatch thunk of PommesResponse.experiences.getter(v21);
  uint64_t v24 = v23;
  if (!((unint64_t)v23 >> 62))
  {
    uint64_t result = *(void *)((char *)&dword_10 + (v23 & 0xFFFFFFFFFFFFF8LL));
    if (result) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  if (v23 >= 0) {
    v23 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v23);
  if (!result)
  {
LABEL_18:

    swift_bridgeObjectRelease(v24);
    return 0LL;
  }

LABEL_6:
  if ((v24 & 0xC000000000000001LL) != 0)
  {
    id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v24);
    goto LABEL_9;
  }

  if (*(void *)((char *)&dword_10 + (v24 & 0xFFFFFFFFFFFFF8LL)))
  {
    id v26 = *(id *)(v24 + 32);
LABEL_9:
    uint64_t v27 = v26;
    uint64_t v28 = swift_bridgeObjectRelease(v24);
    uint64_t v20 = dispatch thunk of Experience.associatedEntities.getter(v28);

    return v20;
  }

  __break(1u);
  return result;
}

    uint64_t v18 = *(void **)v9;
    *(void *)(*(void *)v9 + 8 * (v26 >> 6) + 64) |= 1LL << v26;
    uint64_t v19 = (uint64_t *)(v18[6] + 16 * v26);
    *uint64_t v19 = v23;
    v19[1] = v17;
    outlined init with take of Any(v42, (_OWORD *)(v18[7] + 32 * v26));
    uint64_t v20 = v18[2];
    uint64_t v21 = __OFADD__(v20, 1LL);
    os_log_type_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_24;
    }
    v18[2] = v22;
LABEL_8:
    specialized LazyMapSequence.Iterator.next()(&v44);
    uint64_t v17 = *((void *)&v44 + 1);
    a4 = 1;
    if (!*((void *)&v44 + 1)) {
      goto LABEL_20;
    }
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v29, a4 & 1);
  uint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v17);
  if ((v30 & 1) != (v32 & 1)) {
    goto LABEL_25;
  }
  id v26 = v31;
  if ((v30 & 1) == 0) {
    goto LABEL_6;
  }
LABEL_16:
  outlined init with copy of Any(*(void *)(*(void *)v9 + 56LL) + 32 * v26, (uint64_t)v40);
  a5(v41, v40, v42);
  if (!v8)
  {
    __swift_destroy_boxed_opaque_existential_1(v40);
    __swift_destroy_boxed_opaque_existential_1(v42);
    swift_bridgeObjectRelease(v17);
    uint64_t v33 = (void *)(*(void *)(*(void *)v9 + 56LL) + 32 * v26);
    __swift_destroy_boxed_opaque_existential_1(v33);
    outlined init with take of Any(v41, v33);
    goto LABEL_8;
  }

  __swift_destroy_boxed_opaque_existential_1(v40);
  v40[0] = v8;
  swift_errorRetain(v8);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast(v35, v40, v35, &type metadata for _MergeError, 0LL) & 1) == 0)
  {
    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    __swift_destroy_boxed_opaque_existential_1(v42);
    swift_bridgeObjectRelease(v17);
    outlined consume of [String : Any].Iterator._Variant(v46);
    swift_release(v52);
    return swift_errorRelease(v40[0]);
  }

Swift::Void __swiftcall IntentDonator.donate(intent:)(INIntent intent)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = __swift_project_value_buffer(v5, (uint64_t)static Logger.information);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_0, v7, v8, "Donating sports intent for parse. Will log on background queue...", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  static TaskPriority.background.getter();
  uint64_t v10 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v4, 0LL, 1LL, v10);
  id v11 = (INIntent *)swift_allocObject(&unk_981A8, 40LL, 7LL);
  v11[2].super.Class isa = 0LL;
  v11[3].super.Class isa = 0LL;
  v11[4].super.Class isa = intent.super.isa;
  uint64_t v12 = intent.super.isa;
  uint64_t v13 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v4,  (uint64_t)&async function pointer to partial apply for closure #1 in IntentDonator.donate(intent:),  (uint64_t)v11);
  swift_release(v13);
}

uint64_t closure #1 in IntentDonator.donate(intent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[9] = a4;
  uint64_t v5 = type metadata accessor for Date(0LL);
  v4[10] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[11] = v6;
  v4[12] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(closure #1 in IntentDonator.donate(intent:), 0LL, 0LL);
}

void closure #1 in IntentDonator.donate(intent:)()
{
  id v1 = [objc_allocWithZone(INInteraction) initWithIntent:v0[9] response:0];
  v0[13] = v1;
  uint64_t v2 = type metadata accessor for PerformanceUtil(0LL);
  v0[14] = static PerformanceUtil.shared.getter(v2);
  uint64_t v3 = swift_task_alloc(32LL);
  v0[15] = v3;
  *(void *)(v3 + 16) = v1;
  Date.init()(v3);
  v0[16] = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in IntentDonator.donate(intent:);
  __asm { BR              X0 }

uint64_t closure #1 in IntentDonator.donate(intent:)()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 128);
  uint64_t v4 = *(void *)(*v1 + 112);
  uint64_t v6 = *(void *)(*v1 + 88);
  uint64_t v5 = *(void *)(*v1 + 96);
  uint64_t v7 = *(void *)(*v1 + 80);
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_release(v4);
  if (v0)
  {
    os_log_type_t v8 = closure #1 in IntentDonator.donate(intent:);
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 120));
    os_log_type_t v8 = closure #1 in IntentDonator.donate(intent:);
  }

  return swift_task_switch(v8, 0LL, 0LL);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  os_log_s *v3;
  os_log_type_t v4;
  BOOL v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  id v1 = *(void **)(v0 + 104);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v2, (uint64_t)static Logger.information);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v1);
  uint64_t v4 = static os_log_type_t.debug.getter();
  uint64_t v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void **)(v0 + 104);
  if (v5)
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    os_log_type_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v9 = [v6 intent];
    uint64_t v10 = INIntent.debugDescriptionLite.getter();
    uint64_t v12 = v11;

    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72);
    swift_bridgeObjectRelease(v12);

    _os_log_impl(&dword_0, v3, v4, "Sports intent that was successfully donated: %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
  }

  swift_task_dealloc(*(void *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  os_log_s *v7;
  os_log_type_t v8;
  BOOL v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  swift_task_dealloc(*(void *)(v0 + 120));
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  id v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void **)(v0 + 104);
  uint64_t v3 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v3, (uint64_t)static Logger.information);
  uint64_t v4 = v2;
  swift_errorRetain(v1);
  uint64_t v5 = v4;
  uint64_t v6 = swift_errorRetain(v1);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter();
  uint64_t v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 136);
  id v11 = *(void **)(v0 + 104);
  if (v9)
  {
    uint64_t v12 = swift_slowAlloc(22LL, -1LL);
    uint64_t v21 = swift_slowAlloc(64LL, -1LL);
    os_log_type_t v22 = v21;
    *(_DWORD *)uint64_t v12 = 136315394;
    swift_getErrorValue(v10, v0 + 40, v0 + 16);
    uint64_t v13 = Error.localizedDescription.getter(*(void *)(v0 + 24), *(void *)(v0 + 32));
    unint64_t v15 = v14;
    *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56);
    swift_bridgeObjectRelease(v15);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    *(_WORD *)(v12 + 1static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = 2080;
    int v16 = [v11 intent];
    uint64_t v17 = INIntent.debugDescriptionLite.getter();
    uint64_t v19 = v18;

    *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64);
    swift_bridgeObjectRelease(v19);

    _os_log_impl(&dword_0, v7, v8, "Error when donating Sports intent: %s intent: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v21, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);

    swift_errorRelease(v10);
  }

  else
  {

    swift_errorRelease(v10);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  swift_task_dealloc(*(void *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in IntentDonator.donate(intent:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 120) = a2;
  return swift_task_switch(closure #1 in closure #1 in IntentDonator.donate(intent:), 0LL, 0LL);
}

uint64_t closure #1 in closure #1 in IntentDonator.donate(intent:)()
{
  id v1 = v0 + 2;
  uint64_t v2 = (void *)v0[15];
  v0[2] = v0;
  v0[3] = closure #1 in closure #1 in IntentDonator.donate(intent:);
  uint64_t v3 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v4 = v0 + 10;
  v4[1] = 0x40000000LL;
  void v4[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  void v4[3] = &block_descriptor_0;
  v4[4] = v3;
  [v2 donateInteractionWithCompletion:v4];
  return swift_continuation_await(v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  id v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 128LL) = v1;
  if (v1) {
    uint64_t v2 = closure #1 in closure #1 in IntentDonator.donate(intent:);
  }
  else {
    uint64_t v2 = closure #1 in closure #1 in IntentDonator.donate(intent:);
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ()( uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!a2) {
    return swift_continuation_throwingResume(*(void *)(a1 + 32));
  }
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0LL, 0LL);
  *uint64_t v6 = a2;
  id v7 = a2;
  return swift_continuation_throwingResumeWithError(v2, v5);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    outlined destroy of TaskPriority?(a1);
    uint64_t v8 = 7168LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      uint64_t v10 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9, v12);
      uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      uint64_t v15 = v14;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v8 = v16 | 0x1C00LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9) {
      goto LABEL_3;
    }
  }

  uint64_t v13 = 0LL;
  uint64_t v15 = 0LL;
LABEL_6:
  uint64_t v17 = swift_allocObject(&unk_98260, 32LL, 7LL);
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  if (v15 | v13)
  {
    v20[0] = 0LL;
    v20[1] = 0LL;
    uint64_t v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  return swift_task_create( v8,  v18,  (char *)&type metadata for () + 8,  &_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATu,  v17);
}

void (**partial apply for closure #1 in SportsIntentDonator.donateIfNeeded(parse:)@<X0>( void (***a1)(char *, unint64_t, NSString)@<X8>))(char *, unint64_t, NSString)
{
  uint64_t result = specialized static SportsIntentDonator.toDonatableIntent(parse:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

uint64_t protocol witness for IntentDonating.donate(intent:) in conformance IntentDonator()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80LL))();
}

uint64_t sub_318DC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t partial apply for closure #1 in IntentDonator.donate(intent:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_A287C);
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return closure #1 in IntentDonator.donate(intent:)(a1, v4, v5, v6);
}

uint64_t initializeBufferWithCopyOfBuffer for SportsIntentDonator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t initializeWithCopy for SportsIntentDonator(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

void *assignWithCopy for SportsIntentDonator(void *a1, void *a2)
{
  return a1;
}

void *__swift_assign_boxed_opaque_existential_1(void *result, void *a2)
{
  if (result != a2)
  {
    __int128 v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        uint64_t result = (void *)swift_release(v11);
        void *v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          void *v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          void *v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 3static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SportsIntentDonator(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 3static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsIntentDonator(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vstatic PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsIntentDonator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SportsIntentDonator()
{
  return &type metadata for SportsIntentDonator;
}

uint64_t type metadata accessor for IntentDonator()
{
  return objc_opt_self(&OBJC_CLASS____TtC21InformationFlowPlugin13IntentDonator);
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  __int128 v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 16) = v4;
  *__int128 v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_31D68()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  __int128 v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_A292C);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))( a1,  v4);
}

uint64_t partial apply for closure #1 in closure #1 in IntentDonator.donate(intent:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  __int128 v3 = (void *)swift_task_alloc(dword_A293C);
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  v3[15] = v2;
  return swift_task_switch(closure #1 in closure #1 in IntentDonator.donate(intent:), 0LL, 0LL);
}

void (**specialized static SportsIntentDonator.toDonatableIntent(parse:)( uint64_t a1))(char *, unint64_t, NSString)
{
  uint64_t v2 = (void *)type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity(0LL);
  __int128 v3 = (void (**)(char *, unint64_t, NSString))*(v2 - 1);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = closure #1 in static SportsIntentDonator.toDonatableIntent(parse:)(a1);
  if (v6)
  {
    uint64_t v7 = v6;
    if (*(void *)(v6 + 16))
    {
      v3[2](v5, v6 + ((*((unsigned __int8 *)v3 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v3 + 80)), v2);
      uint64_t v8 = *(void *)(v7 + 16);
      swift_bridgeObjectRelease(v7);
      if (v8 == 1)
      {
        if (one-time initialization token for information != -1) {
          goto LABEL_37;
        }
        while (1)
        {
          uint64_t v9 = type metadata accessor for Logger(0LL);
          uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)static Logger.information);
          uint64_t v11 = specialized static UsoEntity_common_SportsItem.from(resultEntity:logger:)((uint64_t)v5, v10);
          if (!v11) {
            break;
          }
          uint64_t v12 = v11;
          uint64_t v13 = dispatch thunk of UsoEntity_common_SportsItem.associatedSportsItems.getter();
          if (!v13)
          {
            ((void (*)(char *, void *))v3[1])(v5, v2);
            swift_release(v12);
            return 0LL;
          }

          uint64_t v14 = v13;
          uint64_t v31 = v3;
          os_log_type_t v32 = v5;
          uint64_t v33 = v12;
          uint64_t v34 = v2;
          __int128 v3 = (void (**)(char *, unint64_t, NSString))[objc_allocWithZone((Class)type metadata accessor for SearchForSportsIntent(0)) init];
          if ((unint64_t)v14 >> 62)
          {
            if (v14 >= 0) {
              uint64_t v30 = v14 & 0xFFFFFFFFFFFFFF8LL;
            }
            else {
              uint64_t v30 = v14;
            }
            swift_bridgeObjectRetain(v14);
            uint64_t v15 = _CocoaArrayWrapper.endIndex.getter(v30);
            if (!v15)
            {
LABEL_42:
              swift_release(v33);
              swift_bridgeObjectRelease_n(v14, 2LL);
              ((void (*)(char *, void *))v31[1])(v32, v34);
              return v3;
            }
          }

          else
          {
            uint64_t v15 = *(void *)((char *)&dword_10 + (v14 & 0xFFFFFFFFFFFFFF8LL));
            swift_bridgeObjectRetain(v14);
            if (!v15) {
              goto LABEL_42;
            }
          }

          unint64_t v35 = v14 & 0xC000000000000001LL;
          for (uint64_t i = 4LL; ; ++i)
          {
            uint64_t v21 = i - 4;
            if (!v35) {
              break;
            }
            uint64_t v22 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v14);
            uint64_t v23 = v22;
            uint64_t v24 = i - 3;
            if (__OFADD__(v21, 1LL)) {
              goto LABEL_36;
            }
LABEL_22:
            dispatch thunk of CodeGenListEntry.entry.getter(&v36, v22);
            uint64_t v25 = v36;
            if (v36)
            {
              uint64_t v5 = (char *)v14;
              swift_retain(v36);
              uint64_t v26 = specialized static SportsProperty.from(entity:)();
              uint64_t v28 = v27;
              uint64_t v2 = v29;
              swift_release_n(v25, 2LL);
              switch((char)v2)
              {
                case 0:
                  uint64_t v2 = String._bridgeToObjectiveC()();
                  [v3 setTeamName:v2];

                  uint64_t v18 = v26;
                  uint64_t v19 = v28;
                  unsigned __int8 v20 = 0;
                  break;
                case 1:
                  uint64_t v2 = String._bridgeToObjectiveC()();
                  [v3 setTeamQId:v2];

                  uint64_t v18 = v26;
                  uint64_t v19 = v28;
                  unsigned __int8 v20 = 1;
                  break;
                case 2:
                  uint64_t v2 = String._bridgeToObjectiveC()();
                  [v3 setLeagueName:v2];

                  uint64_t v18 = v26;
                  uint64_t v19 = v28;
                  unsigned __int8 v20 = 2;
                  break;
                case 3:
                  uint64_t v2 = String._bridgeToObjectiveC()();
                  [v3 setLeagueQId:v2];

                  uint64_t v18 = v26;
                  uint64_t v19 = v28;
                  unsigned __int8 v20 = 3;
                  break;
                case 4:
                  uint64_t v2 = String._bridgeToObjectiveC()();
                  [v3 setSportName:v2];

                  uint64_t v18 = v26;
                  uint64_t v19 = v28;
                  unsigned __int8 v20 = 4;
                  break;
                case 5:
                  uint64_t v2 = String._bridgeToObjectiveC()();
                  [v3 setSportQId:v2];

                  uint64_t v18 = v26;
                  uint64_t v19 = v28;
                  unsigned __int8 v20 = 5;
                  break;
                case 6:
                  uint64_t v2 = String._bridgeToObjectiveC()();
                  [v3 setAthleteName:v2];

                  uint64_t v18 = v26;
                  uint64_t v19 = v28;
                  unsigned __int8 v20 = 6;
                  break;
                case 7:
                  uint64_t v2 = String._bridgeToObjectiveC()();
                  [v3 setAthleteQId:v2];

                  uint64_t v18 = v26;
                  uint64_t v19 = v28;
                  unsigned __int8 v20 = 7;
                  break;
                default:
                  swift_release(v23);
                  uint64_t v14 = (uint64_t)v5;
                  if (v24 == v15) {
                    goto LABEL_42;
                  }
                  continue;
              }

              outlined consume of SportsProperty?(v18, v19, v20);
              swift_release(v23);
              uint64_t v14 = (uint64_t)v5;
              if (v24 == v15) {
                goto LABEL_42;
              }
            }

            else
            {
              swift_release(v23);
              if (v24 == v15) {
                goto LABEL_42;
              }
            }
          }

          uint64_t v23 = *(void *)(v14 + 8 * i);
          uint64_t v22 = swift_retain(v23);
          uint64_t v24 = i - 3;
          if (!__OFADD__(v21, 1LL)) {
            goto LABEL_22;
          }
LABEL_36:
          __break(1u);
LABEL_37:
          swift_once(&one-time initialization token for information, one-time initialization function for information);
        }
      }

      ((void (*)(char *, void *))v3[1])(v5, v2);
    }

    else
    {
      swift_bridgeObjectRelease(v6);
    }
  }

  return 0LL;
}

uint64_t outlined consume of SportsProperty?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF) {
    return outlined consume of SportsProperty(a1, a2, a3);
  }
  return a1;
}

uint64_t outlined consume of SportsProperty(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 7u) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

void *AppIntentConstants.weatherBundleIdentifier.unsafeMutableAddressor()
{
  return &static AppIntentConstants.weatherBundleIdentifier;
}

unint64_t static AppIntentConstants.weatherBundleIdentifier.getter()
{
  return 0xD000000000000011LL;
}

void *AppIntentConstants.clockBundleIdentifier.unsafeMutableAddressor()
{
  return &static AppIntentConstants.clockBundleIdentifier;
}

unint64_t static AppIntentConstants.clockBundleIdentifier.getter()
{
  return 0xD000000000000021LL;
}

void *AppIntentConstants.WeatherIntent.openWeatherAirQualityIntent.unsafeMutableAddressor()
{
  return &static AppIntentConstants.WeatherIntent.openWeatherAirQualityIntent;
}

unint64_t static AppIntentConstants.WeatherIntent.openWeatherAirQualityIntent.getter()
{
  return 0xD00000000000001BLL;
}

const char *AppIntentConstants.WeatherIntent.openMoonIntent.unsafeMutableAddressor()
{
  return "OpenMoonIntent";
}

uint64_t static AppIntentConstants.WeatherIntent.openMoonIntent.getter()
{
  return 0x6E6F6F4D6E65704FLL;
}

void *AppIntentConstants.WeatherIntent.openSunriseSunsetIntent.unsafeMutableAddressor()
{
  return &static AppIntentConstants.WeatherIntent.openSunriseSunsetIntent;
}

unint64_t static AppIntentConstants.WeatherIntent.openSunriseSunsetIntent.getter()
{
  return 0xD000000000000017LL;
}

void *AppIntentConstants.WeatherIntent.openWeatherSpecificConditionIntent.unsafeMutableAddressor()
{
  return &static AppIntentConstants.WeatherIntent.openWeatherSpecificConditionIntent;
}

unint64_t static AppIntentConstants.WeatherIntent.openWeatherSpecificConditionIntent.getter()
{
  return 0xD000000000000022LL;
}

void *AppIntentConstants.WeatherIntent.openWeatherIntent.unsafeMutableAddressor()
{
  return &static AppIntentConstants.WeatherIntent.openWeatherIntent;
}

unint64_t static AppIntentConstants.WeatherIntent.openWeatherIntent.getter()
{
  return 0xD000000000000011LL;
}

const char *AppIntentConstants.WeatherIntent.SpecificCondition.humidity.unsafeMutableAddressor()
{
  return "humidity";
}

uint64_t static AppIntentConstants.WeatherIntent.SpecificCondition.humidity.getter()
{
  return 0x79746964696D7568LL;
}

const char *AppIntentConstants.WeatherIntent.SpecificCondition.precipitation.unsafeMutableAddressor()
{
  return "precipitation";
}

uint64_t static AppIntentConstants.WeatherIntent.SpecificCondition.precipitation.getter()
{
  return 0x7469706963657270LL;
}

const char *AppIntentConstants.WeatherIntent.SpecificCondition.pressure.unsafeMutableAddressor()
{
  return "pressure";
}

uint64_t static AppIntentConstants.WeatherIntent.SpecificCondition.pressure.getter()
{
  return 0x6572757373657270LL;
}

void *AppIntentConstants.WeatherIntent.SpecificCondition.uvi.unsafeMutableAddressor()
{
  return &static AppIntentConstants.WeatherIntent.SpecificCondition.uvi;
}

uint64_t static AppIntentConstants.WeatherIntent.SpecificCondition.uvi.getter()
{
  return 6911605LL;
}

const char *AppIntentConstants.WeatherIntent.SpecificCondition.visibility.unsafeMutableAddressor()
{
  return "visibility";
}

uint64_t static AppIntentConstants.WeatherIntent.SpecificCondition.visibility.getter()
{
  return 0x696C696269736976LL;
}

const char *AppIntentConstants.WeatherIntent.SpecificCondition.wind.unsafeMutableAddressor()
{
  return "wind";
}

uint64_t static AppIntentConstants.WeatherIntent.SpecificCondition.wind.getter()
{
  return 1684957559LL;
}

const char *AppIntentConstants.WeatherIntent.SpecificCondition.conditions.unsafeMutableAddressor()
{
  return "conditions";
}

uint64_t static AppIntentConstants.WeatherIntent.SpecificCondition.conditions.getter()
{
  return 0x6F697469646E6F63LL;
}

const char *AppIntentConstants.WeatherIntent.ParamIdentifier.location.unsafeMutableAddressor()
{
  return "location";
}

uint64_t static AppIntentConstants.WeatherIntent.ParamIdentifier.location.getter()
{
  return 0x6E6F697461636F6CLL;
}

void *AppIntentConstants.WeatherIntent.ParamIdentifier.specificCondition.unsafeMutableAddressor()
{
  return &static AppIntentConstants.WeatherIntent.ParamIdentifier.specificCondition;
}

unint64_t static AppIntentConstants.WeatherIntent.ParamIdentifier.specificCondition.getter()
{
  return 0xD000000000000011LL;
}

void *AppIntentConstants.WeatherIntent.ParamIdentifier.temperatureKind.unsafeMutableAddressor()
{
  return &static AppIntentConstants.WeatherIntent.ParamIdentifier.temperatureKind;
}

uint64_t static AppIntentConstants.WeatherIntent.ParamIdentifier.temperatureKind.getter()
{
  return 0x74617265706D6574LL;
}

const char *AppIntentConstants.WeatherIntent.ParamIdentifier.date.unsafeMutableAddressor()
{
  return "date";
}

uint64_t static AppIntentConstants.WeatherIntent.ParamIdentifier.date.getter()
{
  return 1702125924LL;
}

const char *AppIntentConstants.WeatherIntent.ParamIdentifier.endDate.unsafeMutableAddressor()
{
  return "endDate";
}

uint64_t static AppIntentConstants.WeatherIntent.ParamIdentifier.endDate.getter()
{
  return 0x65746144646E65LL;
}

const char *AppIntentConstants.WeatherIntent.ParamIdentifier.timeZone.unsafeMutableAddressor()
{
  return "timeZone";
}

uint64_t static AppIntentConstants.WeatherIntent.ParamIdentifier.timeZone.getter()
{
  return 0x656E6F5A656D6974LL;
}

void *AppIntentConstants.WeatherIntent.ParamIdentifier.temperatureUnit.unsafeMutableAddressor()
{
  return &static AppIntentConstants.WeatherIntent.ParamIdentifier.temperatureUnit;
}

uint64_t static AppIntentConstants.WeatherIntent.ParamIdentifier.temperatureUnit.getter()
{
  return 0x74617265706D6574LL;
}

const char *AppIntentConstants.WeatherIntent.ParamIdentifier.eventKind.unsafeMutableAddressor()
{
  return "eventKind";
}

uint64_t static AppIntentConstants.WeatherIntent.ParamIdentifier.eventKind.getter()
{
  return 0x6E694B746E657665LL;
}

void *AppIntentConstants.ClockIntent.openWorldClockCityIntent.unsafeMutableAddressor()
{
  return &static AppIntentConstants.ClockIntent.openWorldClockCityIntent;
}

unint64_t static AppIntentConstants.ClockIntent.openWorldClockCityIntent.getter()
{
  return 0xD000000000000018LL;
}

const char *AppIntentConstants.ClockIntent.ParamIdentifier.placemark.unsafeMutableAddressor()
{
  return "placemark";
}

uint64_t static AppIntentConstants.ClockIntent.ParamIdentifier.placemark.getter()
{
  return 0x72616D6563616C70LL;
}

const char *AppIntentConstants.ClockIntent.ParamIdentifier.timeZone.unsafeMutableAddressor()
{
  return "timeZone";
}

ValueMetadata *type metadata accessor for AppIntentConstants()
{
  return &type metadata for AppIntentConstants;
}

ValueMetadata *type metadata accessor for AppIntentConstants.WeatherIntent()
{
  return &type metadata for AppIntentConstants.WeatherIntent;
}

ValueMetadata *type metadata accessor for AppIntentConstants.WeatherIntent.SpecificCondition()
{
  return &type metadata for AppIntentConstants.WeatherIntent.SpecificCondition;
}

ValueMetadata *type metadata accessor for AppIntentConstants.WeatherIntent.ParamIdentifier()
{
  return &type metadata for AppIntentConstants.WeatherIntent.ParamIdentifier;
}

ValueMetadata *type metadata accessor for AppIntentConstants.ClockIntent()
{
  return &type metadata for AppIntentConstants.ClockIntent;
}

ValueMetadata *type metadata accessor for AppIntentConstants.ClockIntent.ParamIdentifier()
{
  return &type metadata for AppIntentConstants.ClockIntent.ParamIdentifier;
}

void static KnowledgeFallbackHelper.shared.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for KnowledgeFallbackHelper;
  *(void *)(a1 + 3static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = &protocol witness table for KnowledgeFallbackHelper;
}

uint64_t KnowledgeFallbackHelper.responseType.getter()
{
  return 3LL;
}

uint64_t KnowledgeFallbackHelper.useIFFlow.getter()
{
  v2[3] = &type metadata for Features;
  v2[4] = lazy protocol witness table accessor for type Features and conformance Features();
  LOBYTE(v2[0]) = 6;
  char v0 = isFeatureEnabled(_:)(v2);
  __swift_destroy_boxed_opaque_existential_1(v2);
  return v0 & 1;
}

unint64_t lazy protocol witness table accessor for type KnowledgeFallbackResponseType and conformance KnowledgeFallbackResponseType()
{
  unint64_t result = lazy protocol witness table cache variable for type KnowledgeFallbackResponseType and conformance KnowledgeFallbackResponseType;
  if (!lazy protocol witness table cache variable for type KnowledgeFallbackResponseType and conformance KnowledgeFallbackResponseType)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for KnowledgeFallbackResponseType,  &type metadata for KnowledgeFallbackResponseType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type KnowledgeFallbackResponseType and conformance KnowledgeFallbackResponseType);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for KnowledgeFallbackResponseType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_32864 + 4 * byte_7DCC5[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_32898 + 4 * asc_7DCC0[v4]))();
}

uint64_t sub_32898(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_328A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x328A8LL);
  }
  return result;
}

uint64_t sub_328B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x328BCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_328C0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_328C8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KnowledgeFallbackResponseType()
{
  return &type metadata for KnowledgeFallbackResponseType;
}

ValueMetadata *type metadata accessor for KnowledgeFallbackHelper()
{
  return &type metadata for KnowledgeFallbackHelper;
}

BOOL Parse.isRejection.getter()
{
  uint64_t v1 = type metadata accessor for Parse(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v26 - v7;
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v11((char *)&v26 - v9, v0, v1);
  if ((*(unsigned int (**)(char *, uint64_t))(v2 + 88))(v10, v1) == enum case for Parse.NLv4IntentOnly(_:))
  {
    (*(void (**)(char *, uint64_t))(v2 + 96))(v10, v1);
    uint64_t v12 = *(void *)v10;
    uint64_t v13 = objc_opt_self(&OBJC_CLASS___SIRINLUUserRejected);
    BOOL v14 = swift_dynamicCastObjCClass(v12, v13) != 0;
    swift_unknownObjectRelease(v12);
  }

  else
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v15, (uint64_t)static Logger.information);
    uint64_t v16 = ((uint64_t (*)(char *, uint64_t, uint64_t))v11)(v8, v0, v1);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v27 = swift_slowAlloc(32LL, -1LL);
      uint64_t v29 = v27;
      *(_DWORD *)uint64_t v19 = 136315138;
      uint64_t v26 = v19 + 4;
      v11(v5, (uint64_t)v8, v1);
      uint64_t v20 = String.init<A>(describing:)(v5, v1);
      unint64_t v22 = v21;
      uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
      swift_bridgeObjectRelease(v22);
      uint64_t v23 = *(void (**)(char *, uint64_t))(v2 + 8);
      v23(v8, v1);
      _os_log_impl(&dword_0, v17, v18, "Unexpected parse type: %s", v19, 0xCu);
      uint64_t v24 = v27;
      swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
      uint64_t v23 = *(void (**)(char *, uint64_t))(v2 + 8);
      v23(v8, v1);
    }

    v23(v10, v1);
    return 0LL;
  }

  return v14;
}

uint64_t Parse.isCancel.getter()
{
  uint64_t v1 = type metadata accessor for Parse(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v27 - v7;
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v11((char *)&v27 - v9, v0, v1);
  if ((*(unsigned int (**)(char *, uint64_t))(v2 + 88))(v10, v1) == enum case for Parse.NLv4IntentOnly(_:))
  {
    (*(void (**)(char *, uint64_t))(v2 + 96))(v10, v1);
    uint64_t v12 = *(void *)v10;
    uint64_t v13 = objc_opt_self(&OBJC_CLASS___SIRINLUUserRejected);
    if (swift_dynamicCastObjCClass(v12, v13))
    {
      swift_unknownObjectRelease(v12);
      return 1LL;
    }

    else
    {
      uint64_t v25 = objc_opt_self(&OBJC_CLASS___SIRINLUUserCancelled);
      BOOL v14 = swift_dynamicCastObjCClass(v12, v25) != 0;
      swift_unknownObjectRelease(v12);
    }
  }

  else
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v15, (uint64_t)static Logger.information);
    uint64_t v16 = ((uint64_t (*)(char *, uint64_t, uint64_t))v11)(v8, v0, v1);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      uint64_t v30 = v28;
      *(_DWORD *)uint64_t v19 = 136315138;
      uint64_t v27 = v19 + 4;
      v11(v5, (uint64_t)v8, v1);
      uint64_t v20 = String.init<A>(describing:)(v5, v1);
      unint64_t v22 = v21;
      uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
      swift_bridgeObjectRelease(v22);
      uint64_t v23 = *(void (**)(char *, uint64_t))(v2 + 8);
      v23(v8, v1);
      _os_log_impl(&dword_0, v17, v18, "Unexpected parse type: %s", v19, 0xCu);
      uint64_t v24 = v28;
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
      uint64_t v23 = *(void (**)(char *, uint64_t))(v2 + 8);
      v23(v8, v1);
    }

    v23(v10, v1);
    return 0LL;
  }

  return v14;
}

uint64_t Parse.confirmationResponse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Parse(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)v36 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (void *)((char *)v36 - v11);
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v13((char *)v36 - v11, v1, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v4 + 88))(v12, v3) == enum case for Parse.NLv4IntentOnly(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v4 + 96))(v12, v3);
    uint64_t v14 = *v12;
    uint64_t v15 = objc_opt_self(&OBJC_CLASS___SIRINLUUserAccepted);
    if (swift_dynamicCastObjCClass(v14, v15))
    {
      swift_unknownObjectRelease(v14);
      uint64_t v16 = (unsigned int *)&enum case for ConfirmationResponse.confirmed(_:);
LABEL_14:
      uint64_t v32 = *v16;
      uint64_t v33 = type metadata accessor for ConfirmationResponse(0LL);
      uint64_t v34 = *(void *)(v33 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 104))(a1, v32, v33);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(a1, 0LL, 1LL, v33);
    }

    uint64_t v29 = objc_opt_self(&OBJC_CLASS___SIRINLUUserRejected);
    if (swift_dynamicCastObjCClass(v14, v29))
    {
      swift_unknownObjectRelease(v14);
LABEL_13:
      uint64_t v16 = (unsigned int *)&enum case for ConfirmationResponse.rejected(_:);
      goto LABEL_14;
    }

    uint64_t v30 = objc_opt_self(&OBJC_CLASS___SIRINLUUserCancelled);
    uint64_t v31 = swift_dynamicCastObjCClass(v14, v30);
    swift_unknownObjectRelease(v14);
    if (v31) {
      goto LABEL_13;
    }
    uint64_t v35 = type metadata accessor for ConfirmationResponse(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL))( a1,  1LL,  1LL,  v35);
  }

  else
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v17, (uint64_t)static Logger.information);
    uint64_t v18 = ((uint64_t (*)(char *, uint64_t, uint64_t))v13)(v10, v1, v3);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v37 = swift_slowAlloc(32LL, -1LL);
      uint64_t v40 = v37;
      uint64_t v38 = a1;
      *(_DWORD *)unint64_t v21 = 136315138;
      v36[1] = v21 + 4;
      v13(v7, (uint64_t)v10, v3);
      uint64_t v22 = String.init<A>(describing:)(v7, v3);
      unint64_t v24 = v23;
      uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v40);
      a1 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
      swift_bridgeObjectRelease(v24);
      uint64_t v25 = *(void (**)(char *, uint64_t))(v4 + 8);
      v25(v10, v3);
      _os_log_impl(&dword_0, v19, v20, "Unexpected parse type: %s", v21, 0xCu);
      uint64_t v26 = v37;
      swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      uint64_t v25 = *(void (**)(char *, uint64_t))(v4 + 8);
      v25(v10, v3);
    }

    uint64_t v27 = type metadata accessor for ConfirmationResponse(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(a1, 1LL, 1LL, v27);
    return ((uint64_t (*)(uint64_t *, uint64_t))v25)(v12, v3);
  }

unint64_t static PatternHelper.makeParameters(jsonData:)()
{
  Swift::String v0 = Data.base64EncodedString(options:)(0LL);
  unint64_t v1 = specialized static PatternHelper.makeParameters(jsonBase64:)(v0._countAndFlagsBits, (unint64_t)v0._object);
  swift_bridgeObjectRelease(v0._object);
  return v1;
}

unint64_t specialized static PatternHelper.makeParameters(jsonBase64:)( uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for String.Encoding(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)v69 - v10;
  static String.Encoding.utf8.getter(v9);
  uint64_t v12 = Data.init(base64Encoded:options:)(a1, a2, 0LL);
  if (v13 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
LABEL_10:
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v29 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v29, (uint64_t)static Logger.information);
    uint64_t v30 = swift_bridgeObjectRetain_n(a2, 2LL);
    uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v34 = (void *)swift_slowAlloc(32LL, -1LL);
      v73[0] = v34;
      *(_DWORD *)uint64_t v33 = 136315138;
      swift_bridgeObjectRetain(a2);
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73);
      swift_bridgeObjectRelease_n(a2, 3LL);
      _os_log_impl(&dword_0, v31, v32, "Failed to base64 decode json %s", v33, 0xCu);
      swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a2, 2LL);
    }

    return specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  }

  uint64_t v14 = v12;
  unint64_t v15 = v13;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v11, v4);
  uint64_t v16 = String.init(data:encoding:)(v14, v15, v8);
  unint64_t v18 = v17;
  outlined consume of Data?(v14, v15);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  uint64_t v20 = v19(v11, v4);
  if (!v18) {
    goto LABEL_10;
  }
  static String.Encoding.utf8.getter(v20);
  uint64_t v21 = String.data(using:allowLossyConversion:)(v8, 0LL, v16, v18);
  unint64_t v23 = v22;
  v19(v8, v4);
  if (v23 >> 60 != 15)
  {
    uint64_t v37 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    v73[0] = 0LL;
    id v39 = [v37 JSONObjectWithData:isa options:0 error:v73];

    id v40 = v73[0];
    if (v39)
    {
      swift_bridgeObjectRelease(v18);
      _bridgeAnyObjectToAny(_:)(v73, v39);
      swift_unknownObjectRelease(v39);
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      if (swift_dynamicCast(&v72, v73, (char *)&type metadata for Any + 8, v41, 6LL))
      {
        outlined consume of Data?(v21, v23);
        return v72;
      }

      unint64_t v35 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v57 = v21;
    }

    else
    {
      uint64_t v42 = v40;
      uint64_t v43 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow(v44);
      if (one-time initialization token for information != -1) {
        swift_once(&one-time initialization token for information, one-time initialization function for information);
      }
      uint64_t v45 = type metadata accessor for Logger(0LL);
      uint64_t v46 = __swift_project_value_buffer(v45, (uint64_t)static Logger.information);
      swift_errorRetain(v43);
      uint64_t v47 = swift_errorRetain(v43);
      uint64_t v71 = v46;
      uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
      os_log_type_t v49 = static os_log_type_t.debug.getter();
      BOOL v50 = os_log_type_enabled(v48, v49);
      uint64_t v70 = v21;
      if (v50)
      {
        uint64_t v51 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v52 = (void *)swift_slowAlloc(32LL, -1LL);
        uint64_t v72 = (uint64_t)v43;
        v73[0] = v52;
        *(_DWORD *)uint64_t v51 = 136315138;
        v69[1] = v51 + 4;
        swift_errorRetain(v43);
        uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v54 = String.init<A>(describing:)(&v72, v53);
        unint64_t v56 = v55;
        uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, (uint64_t *)v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73);
        swift_bridgeObjectRelease(v56);
        swift_errorRelease(v43);
        swift_errorRelease(v43);
        _os_log_impl(&dword_0, v48, v49, "Failed to convert JSON to dictionary %s", v51, 0xCu);
        swift_arrayDestroy(v52, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v52, -1LL, -1LL);
        swift_slowDealloc(v51, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease(v43);
        swift_errorRelease(v43);
      }

      uint64_t v58 = swift_bridgeObjectRetain(v18);
      uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
      os_log_type_t v60 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v61 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v62 = (void *)swift_slowAlloc(32LL, -1LL);
        v73[0] = v62;
        *(_DWORD *)uint64_t v61 = 136315138;
        swift_bridgeObjectRetain(v18);
        uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, (uint64_t *)v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73);
        swift_bridgeObjectRelease_n(v18, 3LL);
        _os_log_impl(&dword_0, v59, v60, "Failed to convert JSON to dictionary %s", v61, 0xCu);
        swift_arrayDestroy(v62, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v62, -1LL, -1LL);
        swift_slowDealloc(v61, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v18, 2LL);
      }

      uint64_t v63 = v70;
      uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = swift_initStackObject(v64, v74);
      *(_OWORD *)(inited + 16) = xmmword_7CCD0;
      *(void *)(inited + 3static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = 0x726F727265LL;
      *(void *)(inited + 40) = 0xE500000000000000LL;
      v73[0] = v43;
      swift_errorRetain(v43);
      uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v67 = String.init<A>(describing:)(v73, v66);
      *(void *)(inited + 7static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = &type metadata for String;
      *(void *)(inited + 48) = v67;
      *(void *)(inited + 56) = v68;
      unint64_t v35 = specialized Dictionary.init(dictionaryLiteral:)(inited);
      swift_errorRelease(v43);
      uint64_t v57 = v63;
    }

    outlined consume of Data?(v57, v23);
    return v35;
  }

  swift_bridgeObjectRelease(v18);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v24 = type metadata accessor for Logger(0LL);
  uint64_t v25 = __swift_project_value_buffer(v24, (uint64_t)static Logger.information);
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
  os_log_type_t v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl(&dword_0, v26, v27, "Failed to encode JSON data using utf8", v28, 2u);
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  return specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
}

id specialized static PatternHelper.bundle(from:with:)(uint64_t a1, void *a2)
{
  id v40 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Logger?);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v39 - v6;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = Apple_Parsec_Responseframework_PatternModel.patternBundleID.getter(v10);
  unint64_t v15 = v14;
  uint64_t v16 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000LL) == 0) {
    uint64_t v16 = v13 & 0xFFFFFFFFFFFFLL;
  }
  if (v16)
  {
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v15);
    id v18 = [(id)objc_opt_self(NSBundle) bundleWithIdentifier:v17];

    if (v18)
    {
      return v18;
    }

    else
    {
      uint64_t v28 = v9;
      if (one-time initialization token for information != -1) {
        swift_once(&one-time initialization token for information, one-time initialization function for information);
      }
      uint64_t v29 = __swift_project_value_buffer(v8, (uint64_t)static Logger.information);
      uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
      v30(v12, v29, v8);
      v30(v7, (uint64_t)v12, v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v7, 0LL, 1LL, v8);
      outlined init with copy of Logger?((uint64_t)v7, (uint64_t)v5);
      uint64_t v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48))(v5, 1LL, v8);
      if ((_DWORD)v31 == 1)
      {
        outlined destroy of Logger?((uint64_t)v5);
      }

      else
      {
        os_log_type_t v32 = (os_log_s *)Logger.logObject.getter(v31);
        os_log_type_t v33 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v32, v33))
        {
          uint64_t v34 = swift_slowAlloc(32LL, -1LL);
          uint64_t v35 = swift_slowAlloc(64LL, -1LL);
          uint64_t v42 = v35;
          *(_DWORD *)uint64_t v34 = 136315650;
          uint64_t v36 = StaticString.description.getter( "/Library/Caches/com.apple.xbs/Sources/SiriInformationPlugin/InformationFlowPlugin/Utils/PatternHelper.swift",  107LL,  2LL);
          unint64_t v38 = v37;
          uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v42);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
          swift_bridgeObjectRelease(v38);
          *(_WORD *)(v34 + 1static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = 2048;
          uint64_t v41 = 47LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
          *(_WORD *)(v34 + 2static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = 2080;
          uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD0000000000000B2LL,  0x8000000000080BE0LL,  &v42);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
          _os_log_impl(&dword_0, v32, v33, "FatalError at %s:%lu - %s", (uint8_t *)v34, 0x20u);
          swift_arrayDestroy(v35, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v35, -1LL, -1LL);
          swift_slowDealloc(v34, -1LL, -1LL);
        }

        (*(void (**)(char *, uint64_t))(v28 + 8))(v5, v8);
      }

      static SiriKitLifecycle._logCrashToEventBus(_:)(0xD0000000000000B2LL, 0x8000000000080BE0LL);
      id result = (id)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD0000000000000B2LL,  0x8000000000080BE0LL,  "/Library/Caches/com.apple.xbs/Sources/SiriInformationPlugin/InformationFlowPlugin/Utils/PatternHelper.swift",  107LL,  2LL,  47LL,  0);
      __break(1u);
    }
  }

  else
  {
    swift_bridgeObjectRelease(v14);
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v20 = __swift_project_value_buffer(v8, (uint64_t)static Logger.information);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v26 = static os_log_type_t.debug.getter(v21, v22, v23, v24, v25);
    if (os_log_type_enabled(v21, v26))
    {
      os_log_type_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v27 = 0;
      _os_log_impl( &dword_0,  v21,  v26,  "No bundle was specified on the PatternModel. Defaulting to the InformationPlugin Bundle.",  v27,  2u);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    return v40;
  }

  return result;
}

ValueMetadata *type metadata accessor for PatternHelper()
{
  return &type metadata for PatternHelper;
}

uint64_t outlined init with copy of Logger?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Logger?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Logger?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Logger?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

id one-time initialization function for bundle()
{
  uint64_t v0 = type metadata accessor for PegasusPatternFlowFactory();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  id result = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  static PegasusPatternFlowFactory.bundle = (uint64_t)result;
  return result;
}

uint64_t PegasusPatternFlowFactory.__allocating_init(outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)( void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v9 = swift_allocObject(v4, 144LL, 7LL);
  outlined init with copy of OutputPublisherAsync((uint64_t)a1, v9 + 16);
  outlined init with copy of OutputPublisherAsync((uint64_t)a3, v9 + 56);
  *(void *)(v9 + 96) = a2;
  static PatternFlowProvidingHelper.unwrap(_:with:)(a4, (uint64_t)a1, (uint64_t *)v11);
  outlined destroy of PatternFlowProviding?(a4);
  __swift_destroy_boxed_opaque_existential_1(a3);
  __swift_destroy_boxed_opaque_existential_1(a1);
  outlined init with take of PatternFlowProviding(v11, v9 + 104);
  return v9;
}

uint64_t PegasusPatternFlowFactory.init(outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)( void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  *(void *)(v4 + 96) = a2;
  static PatternFlowProvidingHelper.unwrap(_:with:)(a4, (uint64_t)a1, (uint64_t *)v10);
  outlined destroy of PatternFlowProviding?(a4);
  __swift_destroy_boxed_opaque_existential_1(a3);
  __swift_destroy_boxed_opaque_existential_1(a1);
  outlined init with take of PatternFlowProviding(v10, v4 + 104);
  return v4;
}

uint64_t PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:completion:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v26 = a4;
  unint64_t v27 = a3;
  uint64_t v10 = type metadata accessor for Apple_Parsec_Responseframework_PatternModel(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v16, 1LL, 1LL, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  uint64_t v18 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v19 = (v18 + 56) & ~v18;
  unint64_t v20 = (v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = (char *)swift_allocObject(&unk_98510, v20 + 16, v18 | 7);
  *((void *)v21 + static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = 0LL;
  *((void *)v21 + 3) = 0LL;
  *((void *)v21 + 4) = v26;
  *((void *)v21 + 5) = a5;
  *((void *)v21 + 6) = v6;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v21[v19], v13, v10);
  uint64_t v22 = (uint64_t *)&v21[v20];
  unint64_t v23 = v27;
  *uint64_t v22 = a2;
  v22[1] = v23;
  swift_retain(a5);
  swift_retain(v6);
  outlined copy of Data?(a2, v23);
  uint64_t v24 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v16,  (uint64_t)&async function pointer to partial apply for closure #1 in PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:completion:),  (uint64_t)v21);
  return swift_release(v24);
}

uint64_t closure #1 in PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _OWORD v7[2] = a4;
  v7[3] = a5;
  uint64_t v9 = (void *)swift_task_alloc(unk_A297C);
  v7[4] = v9;
  *uint64_t v9 = v7;
  v9[1] = closure #1 in PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:completion:);
  return v11(a7);
}

uint64_t closure #1 in PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:completion:)( uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32LL);
  *(void *)(*(void *)v1 + 4swift_beginAccess(v0 + 64, v2, 0LL, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch( closure #1 in PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:completion:),  0LL,  0LL);
}

uint64_t closure #1 in PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:completion:)()
{
  uint64_t v1 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t))(v0 + 16))(v1);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_343D4()
{
  uint64_t v1 = type metadata accessor for Apple_Parsec_Responseframework_PatternModel(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*((void *)v0 + 2));
  swift_release(*((void *)v0 + 5));
  swift_release(*((void *)v0 + 6));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  unint64_t v6 = *(void *)&v0[v5 + 8];
  if (v6 >> 60 != 15) {
    outlined consume of Data._Representation(*(void *)&v0[v5], v6);
  }
  return swift_deallocObject(v0, v5 + 16, v3 | 7);
}

uint64_t partial apply for closure #1 in PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:completion:)()
{
  uint64_t v3 = v0 + ((v2 + 56) & ~v2);
  uint64_t v4 = swift_task_alloc(dword_A2964);
  __int128 v5 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  *(_OWORD *)(v4 + 16) = v5;
  unint64_t v6 = (uint64_t *)swift_task_alloc(unk_A297C);
  *(void *)(v4 + 3static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = v6;
  *unint64_t v6 = v4;
  v6[1] = (uint64_t)closure #1 in PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:completion:);
  return v8(v3);
}

uint64_t PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:)( uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(unk_A297C);
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = protocol witness for Flow.onAsync(input:) in conformance InformationRoutingFlow;
  return v5(a1);
}

uint64_t PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[51] = a3;
  v4[52] = v3;
  v4[49] = a1;
  v4[50] = a2;
  uint64_t v5 = type metadata accessor for PerformanceUtil.Ticket(0LL);
  v4[53] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[54] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[55] = swift_task_alloc(v7);
  v4[56] = swift_task_alloc(v7);
  v4[57] = swift_task_alloc(v7);
  v4[58] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for Date(0LL);
  v4[59] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[60] = v9;
  v4[61] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:), 0LL, 0LL);
}

uint64_t PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:)()
{
  uint64_t v2 = v0[60];
  uint64_t v1 = v0[61];
  uint64_t v3 = v0[59];
  uint64_t v4 = v0[49];
  v0[62] = Apple_Parsec_Responseframework_PatternModel.patternID.getter();
  v0[63] = v5;
  uint64_t v6 = type metadata accessor for PerformanceUtil(0LL);
  v0[64] = v6;
  uint64_t v7 = static PerformanceUtil.shared.getter(v6);
  uint64_t v8 = swift_task_alloc(32LL);
  *(void *)(v8 + 16) = v4;
  Date.init()(v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( v0 + 45,  0xD000000000000027LL,  0x8000000000080D10LL,  0LL,  v1,  "InformationFlowPlugin/PegasusPatternFlow.swift",  46LL,  2LL,  57LL,  "selectPatternFlow(for:pegasusConversationContext:)",  50LL,  2,  partial apply for closure #1 in PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:),  v8,  v9);
  swift_release(v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v8);
  v0[65] = v0[45];
  if (one-time initialization token for bundle != -1) {
    swift_once(&one-time initialization token for bundle, one-time initialization function for bundle);
  }
  uint64_t v10 = v0 + 2;
  uint64_t v11 = v0[61];
  id v12 = specialized static PatternHelper.bundle(from:with:)(v0[49], (void *)static PegasusPatternFlowFactory.bundle);
  v0[66] = v12;
  Date.init()(v12);
  LOBYTE(v18) = 2;
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0xD000000000000022LL,  0x8000000000080DB0LL,  v11,  "InformationFlowPlugin/PegasusPatternFlow.swift",  46LL,  2LL,  62LL,  "selectPatternFlow(for:pegasusConversationContext:)",  50LL,  v18);
  uint64_t v13 = (void *)objc_opt_self(&OBJC_CLASS___CATPattern);
  NSString v14 = String._bridgeToObjectiveC()();
  v0[67] = v14;
  v0[7] = v0 + 46;
  v0[2] = v0;
  v0[3] = PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:);
  uint64_t v15 = swift_continuation_init(v0 + 2, 1LL);
  v0[20] = _NSConcreteStackBlock;
  uint64_t v16 = v0 + 20;
  v16[1] = 0x40000000LL;
  __int128 v16[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned PatternExecutionResult, @unowned NSError?) -> () with result type PatternExecutionResult;
  v16[3] = &block_descriptor_1;
  v16[4] = v15;
  [v13 load:v12 patternId:v14 completion:v16];
  return swift_continuation_await(v10);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 544) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 520);
    swift_bridgeObjectRelease(*(void *)(v1 + 504));
    swift_bridgeObjectRelease(v3);
    uint64_t v4 = PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:);
  }

  else
  {
    uint64_t v4 = PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:);
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  os_log_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  __objc2_meth_list **p_base_meths;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint8_t *v21;
  int *v22;
  os_log_s *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  os_log_s *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  os_log_s *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  os_log_s *v59;
  os_log_type_t v60;
  uint8_t *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v1 = *(void **)(v0 + 536);
  uint64_t v2 = *(void *)(v0 + 464);
  uint64_t v3 = *(void **)(v0 + 368);
  *(void *)(v0 + 55static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = v3;

  uint64_t v5 = static PerformanceUtil.shared.getter(v4);
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v2, 0LL);
  swift_release(v5);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v6, (uint64_t)static Logger.information);
  uint64_t v7 = v3;
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  uint64_t v13 = static os_log_type_t.debug.getter(v8, v9, v10, v11, v12);
  uint64_t p_base_meths = &ErrorFlowFactory.base_meths;
  if (os_log_type_enabled(v8, v13))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    uint64_t v77 = v16;
    *(_DWORD *)uint64_t v15 = 136315138;
    *(void *)(v0 + 376) = [v7 patternType];
    type metadata accessor for PatternType(0LL);
    int v18 = String.init<A>(reflecting:)(v0 + 376, v17);
    unint64_t v20 = v19;
    *(void *)(v0 + 384) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 384, v0 + 392);
    swift_bridgeObjectRelease(v20);

    _os_log_impl(&dword_0, v8, v13, "RenderPegasusFlow found pattern of type %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1LL, -1LL);
    uint64_t v21 = v15;
    uint64_t p_base_meths = (__objc2_meth_list **)(&ErrorFlowFactory + 32);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v22 = (int *)objc_msgSend(v7, (SEL)p_base_meths[113]);
  if (v22 == (int *)((char *)&dword_0 + 1))
  {
    uint64_t v35 = (os_log_s *)Logger.logObject.getter(1LL);
    id v40 = static os_log_type_t.debug.getter(v35, v36, v37, v38, v39);
    if (os_log_type_enabled(v35, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl(&dword_0, v35, v40, "RenderPegasusFlow making a ResultSet Flow", v41, 2u);
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    uint64_t v42 = *(void *)(v0 + 488);
    uint64_t v43 = *(void *)(v0 + 416);

    Date.init()(v44);
    PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0xD000000000000028LL,  0x8000000000080E50LL,  v42,  "InformationFlowPlugin/PegasusPatternFlow.swift",  46LL,  2LL,  84LL,  "selectPatternFlow(for:pegasusConversationContext:)",  50LL,  2);

    outlined init with copy of OutputPublisherAsync(v43 + 104, v0 + 120);
    static PatternFlowProvidingHelper.unwrap(_:with:)(v0 + 120, v43 + 16, (uint64_t *)(v0 + 320));
    uint64_t v45 = (void *)swift_task_alloc(unk_A26AC);
    *(void *)(v0 + 584) = v45;
    *uint64_t v45 = v0;
    v45[1] = PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:);
    uint64_t v78 = v43 + 56;
    uint64_t v79 = v0 + 320;
LABEL_18:
    __asm { BR              X8; specialized ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:) }
  }

  if (v22 == &dword_4)
  {
    uint64_t v46 = (os_log_s *)Logger.logObject.getter(4LL);
    uint64_t v51 = static os_log_type_t.debug.getter(v46, v47, v48, v49, v50);
    if (os_log_type_enabled(v46, v51))
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v52 = 0;
      _os_log_impl(&dword_0, v46, v51, "RenderPegasusFlow making a DetailedResult Flow", v52, 2u);
      swift_slowDealloc(v52, -1LL, -1LL);
    }

    uint64_t v53 = *(void *)(v0 + 488);
    uint64_t v54 = *(void *)(v0 + 416);

    Date.init()(v55);
    PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0xD000000000000032LL,  0x8000000000080E10LL,  v53,  "InformationFlowPlugin/PegasusPatternFlow.swift",  46LL,  2LL,  98LL,  "selectPatternFlow(for:pegasusConversationContext:)",  50LL,  2);
    outlined init with copy of OutputPublisherAsync(v54 + 104, v0 + 240);
    unint64_t v56 = (void *)swift_task_alloc(unk_A2694);
    *(void *)(v0 + 608) = v56;
    *unint64_t v56 = v0;
    v56[1] = PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:);
    uint64_t v78 = v54 + 56;
    uint64_t v79 = v0 + 240;
    goto LABEL_18;
  }

  if (v22 == (int *)((char *)&dword_0 + 3))
  {
    unint64_t v23 = (os_log_s *)Logger.logObject.getter(3LL);
    uint64_t v28 = static os_log_type_t.debug.getter(v23, v24, v25, v26, v27);
    if (os_log_type_enabled(v23, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl(&dword_0, v23, v28, "RenderPegasusFlow making a SimpleResult Flow", v29, 2u);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    uint64_t v30 = *(void *)(v0 + 488);
    uint64_t v31 = *(void *)(v0 + 416);

    Date.init()(v32);
    PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0xD000000000000024LL,  0x8000000000080E80LL,  v30,  "InformationFlowPlugin/PegasusPatternFlow.swift",  46LL,  2LL,  71LL,  "selectPatternFlow(for:pegasusConversationContext:)",  50LL,  2);
    outlined init with copy of OutputPublisherAsync(v31 + 104, v0 + 280);
    os_log_type_t v33 = type metadata accessor for PatternExecutor();
    *(void *)(v0 + 80) = swift_allocObject(v33, 16LL, 7LL);
    *(void *)(v0 + 104) = v33;
    *(void *)(v0 + 11static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2) = &protocol witness table for PatternExecutor;
    uint64_t v34 = (void *)swift_task_alloc(unk_A198C);
    *(void *)(v0 + 560) = v34;
    *uint64_t v34 = v0;
    v34[1] = PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:);
    uint64_t v78 = v0 + 280;
    uint64_t v79 = v0 + 80;
    goto LABEL_18;
  }

  uint64_t v57 = *(void *)(v0 + 520);
  swift_bridgeObjectRelease(*(void *)(v0 + 504));
  uint64_t v58 = swift_bridgeObjectRelease(v57);
  uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
  os_log_type_t v60 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v59, v60))
  {
    uint64_t v61 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v61 = 0;
    _os_log_impl( &dword_0,  v59,  v60,  "RenderPegasusFlow received unsupported pattern type. Only simple result is supported at the moment.",  v61,  2u);
    swift_slowDealloc(v61, -1LL, -1LL);
  }

  uint64_t v62 = *(void **)(v0 + 528);
  uint64_t v63 = *(void *)(v0 + 464);
  uint64_t v64 = *(void *)(v0 + 424);
  int v65 = *(void *)(v0 + 432);
  uint64_t v66 = *(void *)(v0 + 416);

  outlined init with copy of OutputPublisherAsync(v66 + 16, v0 + 200);
  uint64_t v67 = *(void *)(v66 + 96);
  uint64_t v68 = type metadata accessor for ErrorFlowFactory();
  uint64_t v69 = swift_allocObject(v68, 64LL, 7LL);
  outlined init with take of PatternFlowProviding((__int128 *)(v0 + 200), v69 + 16);
  *(void *)(v69 + 56) = v67;
  swift_retain(v67);
  uint64_t v70 = ErrorFlowFactory.makeErrorFlow(message:)(1701736302LL, 0xE400000000000000LL);
  swift_release(v69);

  (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v63, v64);
  uint64_t v72 = *(void *)(v0 + 456);
  uint64_t v71 = *(void *)(v0 + 464);
  uint64_t v74 = *(void *)(v0 + 440);
  unint64_t v73 = *(void *)(v0 + 448);
  swift_task_dealloc(*(void *)(v0 + 488));
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v70 | 0xC000000000000000LL);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v1 = *(void *)(v0 + 576);
  uint64_t v2 = *(void **)(v0 + 552);
  uint64_t v3 = *(void **)(v0 + 528);
  uint64_t v5 = *(void *)(v0 + 456);
  uint64_t v4 = *(void *)(v0 + 464);
  uint64_t v6 = *(void *)(v0 + 424);
  uint64_t v7 = *(void *)(v0 + 432);
  uint64_t v8 = static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v5, 0LL);
  swift_release(v8);

  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v9(v5, v6);
  v9(v4, v6);
  uint64_t v11 = *(void *)(v0 + 456);
  uint64_t v10 = *(void *)(v0 + 464);
  uint64_t v13 = *(void *)(v0 + 440);
  id v12 = *(void *)(v0 + 448);
  swift_task_dealloc(*(void *)(v0 + 488));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v1 = *(void **)(v0 + 552);
  uint64_t v2 = *(void *)(v0 + 456);
  uint64_t v3 = *(void *)(v0 + 464);
  uint64_t v4 = *(void *)(v0 + 424);
  uint64_t v5 = *(void *)(v0 + 432);

  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v2, v4);
  v6(v3, v4);
  uint64_t v8 = *(void *)(v0 + 456);
  uint64_t v7 = *(void *)(v0 + 464);
  uint64_t v10 = *(void *)(v0 + 440);
  uint64_t v9 = *(void *)(v0 + 448);
  swift_task_dealloc(*(void *)(v0 + 488));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v1 = *(void *)(v0 + 600);
  uint64_t v2 = *(void **)(v0 + 552);
  uint64_t v3 = *(void **)(v0 + 528);
  uint64_t v4 = *(void *)(v0 + 464);
  uint64_t v5 = *(void *)(v0 + 448);
  uint64_t v6 = *(void *)(v0 + 424);
  uint64_t v7 = *(void *)(v0 + 432);
  uint64_t v8 = static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v5, 0LL);

  swift_release(v8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v9(v5, v6);
  v9(v4, v6);
  uint64_t v10 = v1 | 0x4000000000000000LL;
  id v12 = *(void *)(v0 + 456);
  uint64_t v11 = *(void *)(v0 + 464);
  NSString v14 = *(void *)(v0 + 440);
  uint64_t v13 = *(void *)(v0 + 448);
  swift_task_dealloc(*(void *)(v0 + 488));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v10);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v1 = *(void **)(v0 + 552);
  uint64_t v2 = *(void **)(v0 + 528);
  uint64_t v3 = *(void *)(v0 + 520);
  uint64_t v4 = *(void *)(v0 + 504);
  uint64_t v5 = *(void *)(v0 + 464);
  uint64_t v6 = *(void *)(v0 + 448);
  uint64_t v7 = *(void *)(v0 + 424);
  uint64_t v8 = *(void *)(v0 + 432);
  outlined destroy of PatternFlowProviding?(v0 + 120);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);

  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v5, v7);
  uint64_t v11 = *(void *)(v0 + 456);
  uint64_t v10 = *(void *)(v0 + 464);
  uint64_t v13 = *(void *)(v0 + 440);
  id v12 = *(void *)(v0 + 448);
  swift_task_dealloc(*(void *)(v0 + 488));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v1 = *(void *)(v0 + 624);
  uint64_t v2 = *(void **)(v0 + 552);
  uint64_t v3 = *(void **)(v0 + 528);
  uint64_t v4 = *(void *)(v0 + 464);
  uint64_t v6 = *(void *)(v0 + 432);
  uint64_t v5 = *(void *)(v0 + 440);
  uint64_t v7 = *(void *)(v0 + 424);
  uint64_t v8 = static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v5, 0LL);

  swift_release(v8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v5, v7);
  v9(v4, v7);
  uint64_t v10 = v1 | 0x8000000000000000LL;
  id v12 = *(void *)(v0 + 456);
  uint64_t v11 = *(void *)(v0 + 464);
  NSString v14 = *(void *)(v0 + 440);
  uint64_t v13 = *(void *)(v0 + 448);
  swift_task_dealloc(*(void *)(v0 + 488));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v10);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v1 = *(void **)(v0 + 552);
  uint64_t v2 = *(void *)(v0 + 464);
  uint64_t v4 = *(void *)(v0 + 432);
  uint64_t v3 = *(void *)(v0 + 440);
  uint64_t v5 = *(void *)(v0 + 424);

  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v3, v5);
  v6(v2, v5);
  uint64_t v8 = *(void *)(v0 + 456);
  uint64_t v7 = *(void *)(v0 + 464);
  uint64_t v10 = *(void *)(v0 + 440);
  uint64_t v9 = *(void *)(v0 + 448);
  swift_task_dealloc(*(void *)(v0 + 488));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v1 = *(void **)(v0 + 536);
  uint64_t v2 = *(void **)(v0 + 528);
  uint64_t v3 = *(void *)(v0 + 464);
  uint64_t v4 = *(void *)(v0 + 424);
  uint64_t v5 = *(void *)(v0 + 432);
  swift_willThrow();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  uint64_t v7 = *(void *)(v0 + 456);
  uint64_t v6 = *(void *)(v0 + 464);
  uint64_t v9 = *(void *)(v0 + 440);
  uint64_t v8 = *(void *)(v0 + 448);
  swift_task_dealloc(*(void *)(v0 + 488));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:)(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 560LL);
  *(void *)(*(void *)v2 + 568LL) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = v4[65];
  swift_bridgeObjectRelease(v4[63]);
  swift_bridgeObjectRelease(v6);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1(v4 + 10);
    outlined destroy of PatternFlowProviding?((uint64_t)(v4 + 35));
    uint64_t v7 = PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:);
  }

  else
  {
    v4[72] = a1;
    __swift_destroy_boxed_opaque_existential_1(v4 + 10);
    outlined destroy of PatternFlowProviding?((uint64_t)(v4 + 35));
    uint64_t v7 = PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:);
  }

  return swift_task_switch(v7, 0LL, 0LL);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 584LL);
  *(void *)(*(void *)v2 + 592LL) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    outlined destroy of PatternFlowProviding?((uint64_t)(v4 + 40));
    uint64_t v6 = PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:);
  }

  else
  {
    uint64_t v7 = v4[65];
    uint64_t v8 = v4[63];
    v4[75] = a1;
    outlined destroy of PatternFlowProviding?((uint64_t)(v4 + 40));
    outlined destroy of PatternFlowProviding?((uint64_t)(v4 + 15));
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v7);
    uint64_t v6 = PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:);
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 608LL);
  *(void *)(*(void *)v2 + 616LL) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = v4[65];
  uint64_t v7 = v4[63];
  if (v1)
  {
    outlined destroy of PatternFlowProviding?((uint64_t)(v4 + 30));
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v6);
    uint64_t v8 = PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:);
  }

  else
  {
    v4[78] = a1;
    outlined destroy of PatternFlowProviding?((uint64_t)(v4 + 30));
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v6);
    uint64_t v8 = PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:);
  }

  return swift_task_switch(v8, 0LL, 0LL);
}

Swift::Void __swiftcall PegasusPatternFlowFactory.PatternUseCase.log()()
{
  __asm { BR              X10 }

void sub_35850( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_log_t oslog, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v15 = __swift_project_value_buffer(v14, (uint64_t)static Logger.information);
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v20 = static os_log_type_t.debug.getter(v22, v16, v17, v18, v19);
  if (os_log_type_enabled(v22, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl(&dword_0, v22, v20, "PegasusPatternFlowFactory returning a SimpleResult Flow", v21, 2u);
    swift_slowDealloc(v21, -1LL, -1LL);
  }
}

void PegasusPatternFlowFactory.PatternUseCase.extractFlow()(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_35AD0()
{
  return v0 & 0x3FFFFFFFFFFFFFFFLL;
}

uint64_t closure #1 in PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:)@<X0>( unint64_t *a1@<X8>)
{
  uint64_t v2 = Apple_Parsec_Responseframework_PatternModel.patternParameters.getter();
  unint64_t v4 = v3;
  Swift::String v5 = Data.base64EncodedString(options:)(0LL);
  unint64_t v6 = specialized static PatternHelper.makeParameters(jsonBase64:)(v5._countAndFlagsBits, (unint64_t)v5._object);
  swift_bridgeObjectRelease(v5._object);
  uint64_t result = outlined consume of Data._Representation(v2, v4);
  *a1 = v6;
  return result;
}

void *PegasusPatternFlowFactory.deinit()
{
  return v0;
}

uint64_t PegasusPatternFlowFactory.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 144LL, 7LL);
}

uint64_t specialized PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:)( uint64_t a1)
{
  *(void *)(v2 + 96) = v1;
  unint64_t v4 = (void *)swift_task_alloc(dword_A2984);
  *(void *)(v2 + 104) = v4;
  *unint64_t v4 = v2;
  v4[1] = specialized PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:);
  return PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:)(a1, 0LL, 0xF000000000000000LL);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v3 = *v2;
  unint64_t v4 = *(void *)(*v2 + 104);
  *(void *)(v3 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a1;
  *(void *)(v3 + 120) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    Swift::String v5 = specialized PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:);
  }
  else {
    Swift::String v5 = specialized PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:);
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

void specialized PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:)()
{
  uint64_t v1 = *(void *)(v0 + 112);
  PegasusPatternFlowFactory.PatternUseCase.log()();
  __asm { BR              X10 }

uint64_t sub_35CDC()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(*(void *)(v0 + 112) & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t specialized PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:)()
{
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v2, (uint64_t)static Logger.information);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  unint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 120);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v20 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_getErrorValue(v7, v0 + 80, v0 + 56);
    uint64_t v10 = Error.localizedDescription.getter(*(void *)(v0 + 64), *(void *)(v0 + 72));
    unint64_t v12 = v11;
    *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl(&dword_0, v4, v5, "ResponseFlowFactory.makeRenderPatternFlow failed to generate pattern %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 120));
    swift_errorRelease(v7);
  }

  uint64_t v13 = *(void *)(v0 + 120);
  uint64_t v14 = *(void *)(v0 + 96);
  outlined init with copy of OutputPublisherAsync(v14 + 16, v0 + 16);
  uint64_t v15 = *(void *)(v14 + 96);
  uint64_t v16 = type metadata accessor for ErrorFlowFactory();
  uint64_t v17 = swift_allocObject(v16, 64LL, 7LL);
  outlined init with take of PatternFlowProviding((__int128 *)(v0 + 16), v17 + 16);
  *(void *)(v17 + 56) = v15;
  swift_retain(v15);
  uint64_t v18 = ErrorFlowFactory.makeErrorFlow(message:)(1701736302LL, 0xE400000000000000LL);
  swift_release(v17);
  swift_errorRelease(v13);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v18);
}

uint64_t partial apply for closure #1 in PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:)@<X0>( unint64_t *a1@<X8>)
{
  return closure #1 in PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:)(a1);
}

uint64_t type metadata accessor for PegasusPatternFlowFactory()
{
  return objc_opt_self(&OBJC_CLASS____TtC21InformationFlowPlugin25PegasusPatternFlowFactory);
}

void *initializeBufferWithCopyOfBuffer for PegasusPatternFlowFactory.PatternUseCase( void *a1, void *a2)
{
  uint64_t v3 = *a2 & 0x3FFFFFFFFFFFFFFFLL;
  *a1 = *a2;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for PegasusPatternFlowFactory.PatternUseCase(void *a1)
{
  return swift_release(*a1 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t *assignWithCopy for PegasusPatternFlowFactory.PatternUseCase(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2 & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v4 = *a1;
  *a1 = *a2;
  uint64_t v5 = v4 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain(v3);
  swift_release(v5);
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t *assignWithTake for PegasusPatternFlowFactory.PatternUseCase(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  swift_release(v3 & 0x3FFFFFFFFFFFFFFFLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for PegasusPatternFlowFactory.PatternUseCase(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7D && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 125);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7C) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for PegasusPatternFlowFactory.PatternUseCase( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(void *)uint64_t result = a2 - 125;
    if (a3 >= 0x7D) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7D) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007LL;
    }
  }

  return result;
}

uint64_t getEnumTag for PegasusPatternFlowFactory.PatternUseCase(void *a1)
{
  return *a1 >> 62;
}

void *destructiveProjectEnumData for PegasusPatternFlowFactory.PatternUseCase(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t *destructiveInjectEnumTag for PegasusPatternFlowFactory.PatternUseCase(uint64_t *result, uint64_t a2)
{
  *uint64_t result = *result & 0xFFFFFFFFFFFFFF8LL | (a2 << 62);
  return result;
}

ValueMetadata *type metadata accessor for PegasusPatternFlowFactory.PatternUseCase()
{
  return &type metadata for PegasusPatternFlowFactory.PatternUseCase;
}

uint64_t sub_36178()
{
  return ((uint64_t (*)(uint64_t, uint64_t))SportsItem.team.setter)(v1, v0);
}

uint64_t static PersonalizationLevel.from(uso:)@<X0>(unint64_t a1@<X8>)
{
  unint64_t v2 = dispatch thunk of UsoEntity_common_SportsItem.associatedSportsItems.getter();
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = v2 & 0xFFFFFFFFFFFFFF8LL;
    if (v2 >> 62) {
      goto LABEL_23;
    }
    for (uint64_t i = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8LL)); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter(v19))
    {
      uint64_t v21 = a1;
      unint64_t v6 = 0LL;
      a1 = v3 & 0xC000000000000001LL;
      while (1)
      {
        if (a1)
        {
          uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v3);
          uint64_t v8 = v7;
        }

        else
        {
          uint64_t v8 = *(void *)(v3 + 8 * v6 + 32);
          uint64_t v7 = swift_retain(v8);
        }

        uint64_t v9 = dispatch thunk of CodeGenListEntry.entry.getter(&v22, v7);
        unint64_t v10 = v22;
        if (v22
          && (uint64_t v11 = dispatch thunk of UsoEntity_common_SportsItem.type.getter(v9), v12 = swift_release(v10), v11)
          && (uint64_t v13 = dispatch thunk of UsoEntity_common_SportsItemType.name.getter(v12),
              uint64_t v15 = v14,
              swift_release(v11),
              v15))
        {
          if (v13 == 0xD000000000000015LL && v15 == 0x8000000000080F30LL)
          {
            swift_bridgeObjectRelease(v3);
            swift_release(v8);
            goto LABEL_21;
          }

          char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, 0xD000000000000015LL, 0x8000000000080F30LL, 0LL);
          swift_release(v8);
          swift_bridgeObjectRelease(v15);
          if ((v16 & 1) != 0)
          {
            uint64_t v15 = v3;
LABEL_21:
            swift_bridgeObjectRelease(v15);
            unint64_t v22 = v6;
            return closure #2 in static PersonalizationLevel.from(uso:)(&v22, v21);
          }
        }

        else
        {
          swift_release(v8);
        }

        uint64_t v4 = v6 + 1;
        if (__OFADD__(v6, 1LL)) {
          break;
        }
        ++v6;
        if (v4 == i)
        {
          swift_bridgeObjectRelease(v3);
          a1 = v21;
          goto LABEL_28;
        }
      }

      __break(1u);
LABEL_23:
      if (v3 >= 0) {
        uint64_t v19 = v4;
      }
      else {
        uint64_t v19 = v3;
      }
    }

    swift_bridgeObjectRelease(v3);
LABEL_28:
    uint64_t v20 = type metadata accessor for PersonalizationLevel(0LL);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))( a1,  1LL,  1LL,  v20);
  }

  else
  {
    uint64_t v17 = type metadata accessor for PersonalizationLevel(0LL);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))( a1,  1LL,  1LL,  v17);
  }

uint64_t closure #2 in static PersonalizationLevel.from(uso:)@<X0>( unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *a1;
  uint64_t result = dispatch thunk of UsoEntity_common_SportsItem.associatedSportsItems.getter();
  if (!result)
  {
LABEL_26:
    uint64_t v18 = type metadata accessor for PersonalizationLevel(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))( a2,  1LL,  1LL,  v18);
  }

  uint64_t v5 = result;
  if ((result & 0xC000000000000001LL) != 0)
  {
    uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v3, result);
    goto LABEL_6;
  }

  if ((v3 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (v3 < *(void *)((char *)&dword_10 + (result & 0xFFFFFFFFFFFFF8LL)))
  {
    uint64_t v6 = *(void *)(result + 8 * v3 + 32);
    swift_retain(v6);
LABEL_6:
    uint64_t v7 = swift_bridgeObjectRelease(v5);
    dispatch thunk of CodeGenListEntry.entry.getter(&v19, v7);
    uint64_t v8 = swift_release(v6);
    uint64_t v9 = v19;
    if (v19)
    {
      uint64_t v10 = dispatch thunk of UsoEntity_common_SportsItem.name.getter(v8);
      uint64_t v12 = v11;
      swift_release(v9);
      if (v12)
      {
        if (v10 == 0xD00000000000001ALL && v12 == 0x8000000000080F50LL
          || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000000080F50LL, v10, v12, 0LL) & 1) != 0)
        {
          swift_bridgeObjectRelease(v12);
          uint64_t v13 = (unsigned int *)&enum case for PersonalizationLevel.team(_:);
LABEL_25:
          uint64_t v15 = *v13;
          uint64_t v16 = type metadata accessor for PersonalizationLevel(0LL);
          uint64_t v17 = *(void *)(v16 - 8);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 104))(a2, v15, v16);
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(a2, 0LL, 1LL, v16);
        }

        if (v10 == 0xD00000000000001CLL && v12 == 0x8000000000080F70LL
          || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x8000000000080F70LL, v10, v12, 0LL) & 1) != 0)
        {
          swift_bridgeObjectRelease(v12);
          uint64_t v13 = (unsigned int *)&enum case for PersonalizationLevel.league(_:);
          goto LABEL_25;
        }

        if (v10 == 0xD00000000000001DLL && v12 == 0x8000000000080F90LL
          || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x8000000000080F90LL, v10, v12, 0LL) & 1) != 0)
        {
          swift_bridgeObjectRelease(v12);
          uint64_t v13 = (unsigned int *)&enum case for PersonalizationLevel.athlete(_:);
          goto LABEL_25;
        }

        if (v10 == 0xD00000000000001BLL && v12 == 0x8000000000080FB0LL)
        {
          swift_bridgeObjectRelease(v12);
LABEL_24:
          uint64_t v13 = (unsigned int *)&enum case for PersonalizationLevel.sport(_:);
          goto LABEL_25;
        }

        char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000000080FB0LL, v10, v12, 0LL);
        swift_bridgeObjectRelease(v12);
        if ((v14 & 1) != 0) {
          goto LABEL_24;
        }
      }
    }

    goto LABEL_26;
  }

  __break(1u);
  return result;
}

uint64_t static SportsItem.empty.getter()
{
  return SportsItem.init(sport:league:team:athlete:sportQId:leagueQId:teamQId:athleteQId:)( 0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL);
}

uint64_t specialized static UsoEntity_common_SportsItem.from(resultEntity:logger:)(uint64_t a1, uint64_t a2)
{
  uint64_t v69 = a2;
  uint64_t v2 = type metadata accessor for BinaryDecodingOptions(0LL);
  __chkstk_darwin(v2);
  uint64_t v67 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_UsoGraph(0LL);
  uint64_t v68 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v66 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Typespb_Domain(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v65 - v15;
  Apple_Parsec_Siri_Context_ResultEntity.domain.getter(v14);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, enum case for Typespb_Domain.sports(_:), v9);
  uint64_t v17 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Typespb_Domain and conformance Typespb_Domain,  (uint64_t (*)(uint64_t))&type metadata accessor for Typespb_Domain,  (uint64_t)&protocol conformance descriptor for Typespb_Domain);
  dispatch thunk of RawRepresentable.rawValue.getter(&v70, v9, v17);
  dispatch thunk of RawRepresentable.rawValue.getter(&v73, v9, v17);
  uint64_t v18 = v70;
  uint64_t v19 = v73;
  uint64_t v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  v20(v13, v9);
  uint64_t v21 = ((uint64_t (*)(char *, uint64_t))v20)(v16, v9);
  uint64_t v22 = 0LL;
  if (v18 == v19)
  {
    uint64_t v23 = Apple_Parsec_Siri_Context_ResultEntity.usoEntity.getter(v21);
    uint64_t v25 = v24;
    uint64_t v72 = 0LL;
    __int128 v70 = 0u;
    __int128 v71 = 0u;
    uint64_t v26 = v67;
    BinaryDecodingOptions.init()(v23);
    uint64_t v27 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph,  (uint64_t (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_UsoGraph,  (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_UsoGraph);
    Message.init(serializedData:extensions:partial:options:)(v23, v25, &v70, 0LL, v26, v7, v27);
    uint64_t v28 = v7;
    uint64_t v29 = v68;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v6, 0LL, 1LL, v7);
    uint64_t v30 = v66;
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v66, v6, v7);
    uint64_t v32 = static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)(v30, 0LL);
    uint64_t v33 = swift_retain_n(v32, 2LL);
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v39 = static os_log_type_t.debug.getter(v34, v35, v36, v37, v38);
    if (os_log_type_enabled(v34, v39))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v42 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v70 = v42;
      *(_DWORD *)uint64_t v41 = 136315138;
      uint64_t v29 = v68;
      uint64_t v43 = static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)(v32, 1LL);
      unint64_t v45 = v44;
      uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, (uint64_t *)&v70);
      uint64_t v30 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);
      swift_release_n(v32, 2LL);
      swift_bridgeObjectRelease(v45);
      _os_log_impl(&dword_0, v34, v39, "Got USO graph for alternative entity: %s", v41, 0xCu);
      swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1LL, -1LL);
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v32, 2LL);
    }

    uint64_t v46 = static UsoConversionUtils.extractFirstEntityFromGraph(graph:)(v32);
    if (v46)
    {
      uint64_t v47 = v46;
      uint64_t v48 = swift_retain(v46);
      static UsoEntity_CodeGenConverter.convert(entity:)(&v70, v48);
      swift_release(v47);
      if (*((void *)&v71 + 1))
      {
        uint64_t v49 = type metadata accessor for UsoEntity_common_SportsItem(0LL);
        if ((swift_dynamicCast(&v73, &v70, (char *)&type metadata for Any + 8, v49, 6LL) & 1) != 0)
        {
          swift_release(v32);
          swift_release(v47);
          uint64_t v22 = v73;
          (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v28);
          return v22;
        }
      }

      else
      {
        outlined destroy of Any?((uint64_t)&v70, &demangling cache variable for type metadata for Any?);
      }

      uint64_t v53 = swift_retain_n(v47, 2LL);
      uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
      os_log_type_t v59 = static os_log_type_t.debug.getter(v54, v55, v56, v57, v58);
      if (os_log_type_enabled(v54, v59))
      {
        os_log_type_t v60 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v61 = swift_slowAlloc(32LL, -1LL);
        *(void *)&__int128 v70 = v61;
        *(_DWORD *)os_log_type_t v60 = 136315138;
        uint64_t v62 = UsoEntity.valueTypeString.getter();
        unint64_t v64 = v63;
        uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, (uint64_t *)&v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);
        swift_release_n(v47, 2LL);
        swift_bridgeObjectRelease(v64);
        _os_log_impl(&dword_0, v54, v59, "Entity was not a sports entity but was a %s. Will ignore item", v60, 0xCu);
        swift_arrayDestroy(v61, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v61, -1LL, -1LL);
        swift_slowDealloc(v60, -1LL, -1LL);
        swift_release(v32);
        swift_release(v47);

        (*(void (**)(char *, uint64_t))(v68 + 8))(v66, v28);
        return 0LL;
      }

      swift_release_n(v47, 3LL);
    }

    else
    {
      BOOL v50 = (os_log_s *)Logger.logObject.getter(0LL);
      os_log_type_t v51 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v50, v51))
      {
        uint64_t v52 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v52 = 0;
        _os_log_impl(&dword_0, v50, v51, "Unable to extract sports entity from USO graph", v52, 2u);
        swift_slowDealloc(v52, -1LL, -1LL);
        swift_release(v32);

LABEL_3:
        (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v28);
        return 0LL;
      }
    }

    swift_release(v32);
    goto LABEL_3;
  }

  return v22;
}

uint64_t specialized static SportsProperty.from(entity:)()
{
  uint64_t v0 = dispatch thunk of UsoEntity_common_SportsItem.type.getter();
  if (v0)
  {
    uint64_t v1 = v0;
    uint64_t v2 = dispatch thunk of UsoEntity_common_SportsItemType.name.getter();
    uint64_t v4 = v3;
    uint64_t v5 = swift_release(v1);
    uint64_t v6 = dispatch thunk of UsoEntity_common_SportsItem.name.getter(v5);
    uint64_t v8 = v7;
    if (v4)
    {
      if (!v7)
      {
        swift_bridgeObjectRelease(v4);
        return 0LL;
      }

      uint64_t v9 = v6;
      if (v2 == 0x74726F7073LL && v4 == 0xE500000000000000LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x74726F7073LL, 0xE500000000000000LL, v2, v4, 0LL) & 1) != 0
        || v2 == 0x69715F74726F7073LL && v4 == 0xE900000000000064LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x69715F74726F7073LL, 0xE900000000000064LL, v2, v4, 0LL) & 1) != 0
        || v2 == 0x65756761656CLL && v4 == 0xE600000000000000LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x65756761656CLL, 0xE600000000000000LL, v2, v4, 0LL) & 1) != 0
        || v2 == 0x715F65756761656CLL && v4 == 0xEA00000000006469LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x715F65756761656CLL, 0xEA00000000006469LL, v2, v4, 0LL) & 1) != 0
        || v2 == 1835099508 && v4 == 0xE400000000000000LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(1835099508LL, 0xE400000000000000LL, v2, v4, 0LL) & 1) != 0
        || v2 == 0x6469715F6D616574LL && v4 == 0xE800000000000000LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6469715F6D616574LL, 0xE800000000000000LL, v2, v4, 0LL) & 1) != 0
        || v2 == 0x6574656C687461LL && v4 == 0xE700000000000000LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6574656C687461LL, 0xE700000000000000LL, v2, v4, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v4);
        return v9;
      }

      if (v2 == 0x5F6574656C687461LL && v4 == 0xEB00000000646971LL)
      {
        swift_bridgeObjectRelease(0xEB00000000646971LL);
        return v9;
      }

      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x5F6574656C687461LL, 0xEB00000000646971LL, v2, v4, 0LL);
      swift_bridgeObjectRelease(v4);
      if ((v12 & 1) != 0) {
        return v9;
      }
    }
  }

  else
  {
    dispatch thunk of UsoEntity_common_SportsItem.name.getter(0LL);
    uint64_t v8 = v10;
  }

  swift_bridgeObjectRelease(v8);
  return 0LL;
}

uint64_t outlined copy of SportsProperty(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 7u) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t destroy for SportsProperty(uint64_t a1)
{
  return outlined consume of SportsProperty(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for SportsProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  outlined copy of SportsProperty(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SportsProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  outlined copy of SportsProperty(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of SportsProperty(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for SportsProperty(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of SportsProperty(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsProperty(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xF9 && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 249);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 7) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsProperty(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 249;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xF9) {
      *(_BYTE *)(result + 1__swift_destroy_boxed_opaque_existential_1(v0 + 7) = 1;
    }
  }

  else
  {
    if (a3 >= 0xF9) {
      *(_BYTE *)(result + 1__swift_destroy_boxed_opaque_existential_1(v0 + 7) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SportsProperty()
{
  return &type metadata for SportsProperty;
}

uint64_t CommonCATs.genericError()(uint64_t a1)
{
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return ((uint64_t (*)(uint64_t, unint64_t, unint64_t, void *))v5)( a1,  0xD00000000000001FLL,  0x8000000000080FD0LL,  _swiftEmptyArrayStorage);
}

uint64_t CommonCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for CATOption(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  outlined init with copy of URL?(a1, (uint64_t)v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  uint64_t v15 = CATWrapper.init(templateDir:options:globals:)(v14, v11, a3);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a2, v8);
  outlined destroy of URL?(a1);
  return v15;
}

uint64_t CommonCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of URL?(a1, (uint64_t)v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t v13 = CATWrapper.init(templateDir:options:globals:)(v12, v9, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  outlined destroy of URL?(a1);
  return v13;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t CommonCATs.__deallocating_deinit()
{
  uint64_t v0 = CATWrapper.deinit();
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t type metadata accessor for CommonCATs(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for CommonCATs;
  if (!type metadata singleton initialization cache for CommonCATs) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CommonCATs);
  }
  return result;
}

uint64_t type metadata completion function for CommonCATs(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + class metadata base offset for CommonCATs);
}

uint64_t ObjC metadata update function for CommonCATs()
{
  return type metadata accessor for CommonCATs(0LL);
}

uint64_t static SiriSuggestionProvider.getSiriSuggestion(suggestionContextData:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = a2;
  return swift_task_switch(static SiriSuggestionProvider.getSiriSuggestion(suggestionContextData:), 0LL, 0LL);
}

uint64_t static SiriSuggestionProvider.getSiriSuggestion(suggestionContextData:)()
{
  uint64_t v1 = type metadata accessor for SiriSuggestionsBrokerProvider(0LL);
  *(void *)(v0 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = static SiriSuggestionsBrokerProvider.instance.getter();
  unint64_t v2 = lazy protocol witness table accessor for type SiriSuggestionsBrokerProvider and conformance SiriSuggestionsBrokerProvider();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
  return swift_task_switch(static SiriSuggestionProvider.getSiriSuggestion(suggestionContextData:), v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 112);
  dispatch thunk of SiriSuggestionsBrokerProvider.getBrokerInstance()();
  swift_release(v1);
  return swift_task_switch(static SiriSuggestionProvider.getSiriSuggestion(suggestionContextData:), 0LL, 0LL);
}

{
  uint64_t v0;
  __int128 *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  os_log_s *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v1 = (__int128 *)(v0 + 56);
  if (*(void *)(v0 + 80))
  {
    outlined init with take of PatternFlowProviding(v1, v0 + 16);
    unint64_t v2 = (void *)swift_task_alloc(dword_A2ACC);
    *(void *)(v0 + 120) = v2;
    void *v2 = v0;
    v2[1] = static SiriSuggestionProvider.getSiriSuggestion(suggestionContextData:);
    return static SiriSuggestionProvider.getSiriSuggestion(suggestionBroker:suggestionContextData:)( *(void *)(v0 + 96),  v0 + 16,  *(void *)(v0 + 104));
  }

  else
  {
    outlined destroy of Any?((uint64_t)v1, &demangling cache variable for type metadata for SiriSuggestionsBroker?);
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)static Logger.information);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    uint64_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_0, v6, v7, "SiriSuggestionBroker instance is nil. Returning nil suggestion", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    uint64_t v9 = *(void *)(v0 + 96);

    uint64_t v10 = type metadata accessor for HintsUI(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 120LL));
  return swift_task_switch(static SiriSuggestionProvider.getSiriSuggestion(suggestionContextData:), 0LL, 0LL);
}

{
  uint64_t v0;
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t lazy protocol witness table accessor for type SiriSuggestionsBrokerProvider and conformance SiriSuggestionsBrokerProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriSuggestionsBrokerProvider and conformance SiriSuggestionsBrokerProvider;
  if (!lazy protocol witness table cache variable for type SiriSuggestionsBrokerProvider and conformance SiriSuggestionsBrokerProvider)
  {
    uint64_t v1 = type metadata accessor for SiriSuggestionsBrokerProvider(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SiriSuggestionsBrokerProvider, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriSuggestionsBrokerProvider and conformance SiriSuggestionsBrokerProvider);
  }

  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Decodable & Encodable & Sendable>);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    goto LABEL_9;
  }
  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    outlined init with copy of IdentifiedUser?( v7,  (uint64_t)&v17,  &demangling cache variable for type metadata for (String, Decodable & Encodable & Sendable));
    uint64_t v8 = v17;
    uint64_t v9 = v18;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)outlined init with take of Decodable & Encodable & Sendable( v19,  (_OWORD *)(v4[7] + 48 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_12;
    }
    void v4[2] = v15;
    v7 += 64LL;
    if (!--v5)
    {
      swift_release(v4);
      uint64_t v16 = a1;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    outlined init with copy of IdentifiedUser?( v7,  (uint64_t)&v16,  &demangling cache variable for type metadata for (String, Any));
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)outlined init with take of Any(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  void *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v7 = *(v6 - 3);
    uint64_t v8 = *(v6 - 2);
    uint64_t v10 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v13 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v13 = v7;
    v13[1] = v8;
    BOOL v14 = (void *)(v4[7] + 16 * result);
    *BOOL v14 = v10;
    v14[1] = v9;
    uint64_t v15 = v4[2];
    uint64_t v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v6 += 4;
    void v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    outlined init with copy of IdentifiedUser?( v7,  (uint64_t)v16,  &demangling cache variable for type metadata for (AnyHashable, Any));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v16);
    if ((v9 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v10 = v4[6] + 40 * result;
    char v11 = v16[0];
    uint64_t v12 = v16[1];
    *(void *)(v10 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v17;
    *(_OWORD *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    unint64_t result = (unint64_t)outlined init with take of Any(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v7 += 72LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  void *i;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<InformationViewFactory.AceViewCategory, Int>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (uint64_t i = (void *)(a1 + 40); ; i += 2)
    {
      uint64_t v5 = *((_BYTE *)i - 8);
      uint64_t v6 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v8 & 1) != 0) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
      *(_BYTE *)(v3[6] + result) = v5;
      *(void *)(v3[7] + 8 * result) = v6;
      uint64_t v9 = v3[2];
      uint64_t v10 = __OFADD__(v9, 1LL);
      char v11 = v9 + 1;
      if (v10) {
        goto LABEL_10;
      }
      v3[2] = v11;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }

    __break(1u);
LABEL_10:
    __break(1u);
  }

  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }

  return result;
}

uint64_t static SiriSuggestionProvider.getSiriSuggestion(suggestionBroker:suggestionContextData:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v3[11] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  v3[12] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[13] = v6;
  v3[14] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( static SiriSuggestionProvider.getSiriSuggestion(suggestionBroker:suggestionContextData:),  0LL,  0LL);
}

uint64_t static SiriSuggestionProvider.getSiriSuggestion(suggestionBroker:suggestionContextData:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 16), v2);
  uint64_t started = dispatch thunk of AceServiceInvokerAsync.currentStartRequestId()(v2, v3);
  uint64_t v6 = v5;
  __swift_destroy_boxed_opaque_existential_1((void *)(v1 + 16));
  if (!v6) {
    goto LABEL_4;
  }
  uint64_t v7 = *(void *)(v1 + 96);
  uint64_t v8 = *(void *)(v1 + 104);
  uint64_t v9 = *(void *)(v1 + 88);
  UUID.init(uuidString:)(started, v6);
  swift_bridgeObjectRelease(v6);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1LL, v7) == 1)
  {
    outlined destroy of Any?(*(void *)(v1 + 88), &demangling cache variable for type metadata for UUID?);
LABEL_4:
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = __swift_project_value_buffer(v10, (uint64_t)static Logger.information);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      BOOL v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)BOOL v14 = 0;
      _os_log_impl( &dword_0,  v12,  v13,  "SiriSuggestionProvider getSiriSuggestion snippet: unable to get requestId from runtime",  v14,  2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    uint64_t v15 = *(void *)(v1 + 64);

    uint64_t v16 = type metadata accessor for HintsUI(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v15, 1LL, 1LL, v16);
    uint64_t v17 = *(void *)(v1 + 88);
    swift_task_dealloc(*(void *)(v1 + 112));
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  (*(void (**)(void, void, void))(*(void *)(v1 + 104) + 32LL))( *(void *)(v1 + 112),  *(void *)(v1 + 88),  *(void *)(v1 + 96));
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v19 = type metadata accessor for Logger(0LL);
  uint64_t v20 = __swift_project_value_buffer(v19, (uint64_t)static Logger.information);
  *(void *)(v1 + 120) = v20;
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl( &dword_0,  v21,  v22,  "SiriSuggestionProvider getSiriSuggestion snippet: calling provided SiriSuggestionsBroker",  v23,  2u);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  uint64_t v24 = *(void **)(v1 + 72);

  __swift_project_boxed_opaque_existential_1(v24, v24[3]);
  unint64_t v25 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v1 + 128) = v25;
  *(void *)(v1 + 136) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v26 = (void *)swift_task_alloc(async function pointer to dispatch thunk of SiriSuggestionsBroker.doSiriHints(requestId:applicationSessionId:suggestionContextData:sourceDomainOwner:intentProperties:verb:executionProperties:)[1]);
  *(void *)(v1 + 144) = v26;
  void *v26 = v1;
  v26[1] = static SiriSuggestionProvider.getSiriSuggestion(suggestionBroker:suggestionContextData:);
  return dispatch thunk of SiriSuggestionsBroker.doSiriHints(requestId:applicationSessionId:suggestionContextData:sourceDomainOwner:intentProperties:verb:executionProperties:)( *(void *)(v1 + 64),  *(void *)(v1 + 112),  0LL,  0LL,  *(void *)(v1 + 80),  0LL,  0LL,  v25);
}

uint64_t static SiriSuggestionProvider.getSiriSuggestion(suggestionBroker:suggestionContextData:)()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 144);
  *(void *)(*v1 + 15__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = static SiriSuggestionProvider.getSiriSuggestion(suggestionBroker:suggestionContextData:);
  }

  else
  {
    uint64_t v5 = *(void *)(v2 + 128);
    swift_bridgeObjectRelease(*(void *)(v2 + 136));
    swift_bridgeObjectRelease(v5);
    uint64_t v4 = static SiriSuggestionProvider.getSiriSuggestion(suggestionBroker:suggestionContextData:);
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  (*(void (**)(void, void))(*(void *)(v0 + 104) + 8LL))(*(void *)(v0 + 112), *(void *)(v0 + 96));
  uint64_t v1 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 128);
  swift_bridgeObjectRelease(*(void *)(v0 + 136));
  swift_bridgeObjectRelease(v2);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void *)(v0 + 152);
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain(v6);
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(void *)(v0 + 56) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64);
    *uint64_t v8 = v9;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl( &dword_0,  v4,  v5,  "SiriSuggestionProvider getSiriSuggestion snippet: error getting suggestions: %@",  v7,  0xCu);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v8, 1LL, v10);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    uint64_t v11 = *(void *)(v0 + 152);

    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  os_log_type_t v13 = *(void *)(v0 + 104);
  uint64_t v12 = *(void *)(v0 + 112);
  BOOL v14 = *(void *)(v0 + 96);
  uint64_t v15 = *(void *)(v0 + 64);
  swift_errorRelease(*(void *)(v0 + 152));
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  uint64_t v16 = type metadata accessor for HintsUI(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v15, 1LL, 1LL, v16);
  uint64_t v17 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

ValueMetadata *type metadata accessor for SiriSuggestionProvider()
{
  return &type metadata for SiriSuggestionProvider;
}

_OWORD *outlined init with take of Decodable & Encodable & Sendable(__int128 *a1, _OWORD *a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>( void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v26 = a5;
  uint64_t v27 = a2;
  uint64_t v28 = a1;
  uint64_t v29 = a6;
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = __chkstk_darwin(a1);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v10);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1LL, v14) == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56LL))( v29,  1LL,  1LL,  a4);
  }
  uint64_t v25 = a3;
  uint64_t v24 = v26;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
  v28(v18, v12);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  if (v6) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24, v12, v25);
  }
  return result;
}

uint64_t Apple_Parsec_Siri_V2alpha_MovieObject.title.getter()
{
  uint64_t v0 = (void *)Apple_Parsec_Siri_V2alpha_MovieObject.titles.getter();
  uint64_t v1 = v0;
  if (v0[2])
  {
    uint64_t v2 = v0[4];
    swift_bridgeObjectRetain(v0[5]);
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  swift_bridgeObjectRelease(v1);
  return v2;
}

uint64_t Apple_Parsec_Siri_V2alpha_MovieObject.contentType.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SAVCSContentTypeMovieValue);
}

uint64_t Apple_Parsec_Siri_V2alpha_MovieObject.sixteenByNineImages.getter()
{
  uint64_t v0 = type metadata accessor for Moviespb_CoverArt.AspectRatio(0LL);
  uint64_t v36 = *(void *)(v0 - 8);
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v35 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v1);
  uint64_t v34 = (char *)&v28 - v3;
  uint64_t v4 = type metadata accessor for Moviespb_CoverArt(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v33 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t result = Apple_Parsec_Siri_V2alpha_MovieObject.coverArt.getter(v8);
  uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  uint64_t v41 = (char *)_swiftEmptyArrayStorage;
  uint64_t v32 = *(void *)(result + 16);
  if (v32)
  {
    unint64_t v13 = 0LL;
    unsigned int v30 = enum case for Moviespb_CoverArt.AspectRatio.sixteenByNine(_:);
    uint64_t v31 = result;
    uint64_t v29 = v5;
    uint64_t v14 = v34;
    uint64_t v15 = v35;
    while (v13 < *(void *)(result + 16))
    {
      unint64_t v16 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      uint64_t v37 = *(void *)(v5 + 72);
      unint64_t v38 = v16;
      uint64_t v17 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v5 + 16))(v10, result + v16 + v37 * v13, v4);
      Moviespb_CoverArt.type.getter(v17);
      uint64_t v18 = v36;
      (*(void (**)(char *, void, uint64_t))(v36 + 104))(v15, v30, v0);
      uint64_t v19 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Moviespb_CoverArt.AspectRatio and conformance Moviespb_CoverArt.AspectRatio,  (uint64_t (*)(uint64_t))&type metadata accessor for Moviespb_CoverArt.AspectRatio,  (uint64_t)&protocol conformance descriptor for Moviespb_CoverArt.AspectRatio);
      dispatch thunk of RawRepresentable.rawValue.getter(&v40, v0, v19);
      dispatch thunk of RawRepresentable.rawValue.getter(&v39, v0, v19);
      uint64_t v20 = v5;
      uint64_t v22 = v39;
      uint64_t v21 = v40;
      uint64_t v23 = *(void (**)(char *, uint64_t))(v18 + 8);
      v23(v15, v0);
      v23(v14, v0);
      if (v21 == v22)
      {
        uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
        v24(v33, v10, v4);
        uint64_t v25 = v41;
        if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *((void *)v25 + 2) + 1LL,  1);
          uint64_t v25 = v41;
        }

        unint64_t v27 = *((void *)v25 + 2);
        unint64_t v26 = *((void *)v25 + 3);
        if (v27 >= v26 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v26 > 1,  v27 + 1,  1);
          uint64_t v25 = v41;
        }

        *((void *)v25 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v27 + 1;
        v24(&v25[v38 + v27 * v37], v33, v4);
        uint64_t v41 = v25;
        uint64_t v5 = v29;
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v4);
        uint64_t v5 = v20;
      }

      ++v13;
      uint64_t result = v31;
      if (v32 == v13)
      {
        uint64_t v12 = v41;
        goto LABEL_13;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_13:
    swift_bridgeObjectRelease(result);
    return (uint64_t)v12;
  }

  return result;
}

uint64_t Apple_Parsec_Siri_V2alpha_TvObject.contentType.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SAVCSContentTypeShowValue);
}

uint64_t Apple_Parsec_Siri_V2alpha_TvObject.sixteenByNineImages.getter()
{
  uint64_t v0 = type metadata accessor for Tvpb_CoverArt.AspectRatio(0LL);
  uint64_t v36 = *(void *)(v0 - 8);
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v35 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v1);
  uint64_t v34 = (char *)&v28 - v3;
  uint64_t v4 = type metadata accessor for Tvpb_CoverArt(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v33 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t result = Apple_Parsec_Siri_V2alpha_TvObject.coverArt.getter(v8);
  uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  uint64_t v41 = (char *)_swiftEmptyArrayStorage;
  uint64_t v32 = *(void *)(result + 16);
  if (v32)
  {
    unint64_t v13 = 0LL;
    unsigned int v30 = enum case for Tvpb_CoverArt.AspectRatio.sixteenByNine(_:);
    uint64_t v31 = result;
    uint64_t v29 = v5;
    uint64_t v14 = v34;
    uint64_t v15 = v35;
    while (v13 < *(void *)(result + 16))
    {
      unint64_t v16 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      uint64_t v37 = *(void *)(v5 + 72);
      unint64_t v38 = v16;
      uint64_t v17 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v5 + 16))(v10, result + v16 + v37 * v13, v4);
      Tvpb_CoverArt.type.getter(v17);
      uint64_t v18 = v36;
      (*(void (**)(char *, void, uint64_t))(v36 + 104))(v15, v30, v0);
      uint64_t v19 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Tvpb_CoverArt.AspectRatio and conformance Tvpb_CoverArt.AspectRatio,  (uint64_t (*)(uint64_t))&type metadata accessor for Tvpb_CoverArt.AspectRatio,  (uint64_t)&protocol conformance descriptor for Tvpb_CoverArt.AspectRatio);
      dispatch thunk of RawRepresentable.rawValue.getter(&v40, v0, v19);
      dispatch thunk of RawRepresentable.rawValue.getter(&v39, v0, v19);
      uint64_t v20 = v5;
      uint64_t v22 = v39;
      uint64_t v21 = v40;
      uint64_t v23 = *(void (**)(char *, uint64_t))(v18 + 8);
      v23(v15, v0);
      v23(v14, v0);
      if (v21 == v22)
      {
        uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
        v24(v33, v10, v4);
        uint64_t v25 = v41;
        if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *((void *)v25 + 2) + 1LL,  1);
          uint64_t v25 = v41;
        }

        unint64_t v27 = *((void *)v25 + 2);
        unint64_t v26 = *((void *)v25 + 3);
        if (v27 >= v26 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v26 > 1,  v27 + 1,  1);
          uint64_t v25 = v41;
        }

        *((void *)v25 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v27 + 1;
        v24(&v25[v38 + v27 * v37], v33, v4);
        uint64_t v41 = v25;
        uint64_t v5 = v29;
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v4);
        uint64_t v5 = v20;
      }

      ++v13;
      uint64_t result = v31;
      if (v32 == v13)
      {
        uint64_t v12 = v41;
        goto LABEL_13;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_13:
    swift_bridgeObjectRelease(result);
    return (uint64_t)v12;
  }

  return result;
}

uint64_t static VideoSnippetError.__derived_enum_equals(_:_:)()
{
  return 1LL;
}

void VideoSnippetError.hash(into:)()
{
}

Swift::Int VideoSnippetError.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance VideoSnippetError(uint64_t a1)
{
  return Hasher._finalize()();
}

void closure #1 in static VideoSnippetUtils.makeDisambiguationList(for:)(uint64_t a1@<X0>, void *a2@<X8>)
{
  os_log_type_t v159 = a2;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v158 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v157 = (char *)&v137 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = (void *)type metadata accessor for Apple_Parsec_Siri_V2alpha_MovieObject(0LL);
  uint64_t v149 = *(v5 - 1);
  id v150 = v5;
  __chkstk_darwin(v5);
  uint64_t v148 = (char *)&v137 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_TvObject(0LL);
  uint64_t v146 = *(void *)(v7 - 8);
  uint64_t v147 = v7;
  __chkstk_darwin(v7);
  unint64_t v145 = (char *)&v137 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v154 = (char *)&v137 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  *(void *)&__int128 v155 = (char *)&v137 - v12;
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v137 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Searchfoundation_DynamicURLImageResource?);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v137 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for Searchfoundation_DynamicURLImageResource(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v137 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v160 = a1;
  static VideoSnippetUtils.makeDynamicURLImageResource(for:)(a1, (uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20) == 1)
  {
    outlined destroy of Any?( (uint64_t)v19,  &demangling cache variable for type metadata for Searchfoundation_DynamicURLImageResource?);
    if (one-time initialization token for videoSnippet != -1) {
      swift_once(&one-time initialization token for videoSnippet, one-time initialization function for videoSnippet);
    }
    uint64_t v24 = __swift_project_value_buffer(v3, (uint64_t)static Logger.videoSnippet);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      unint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v27 = 0;
      _os_log_impl(&dword_0, v25, v26, "Could not generate dynamic URL image resource for object", v27, 2u);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    id v28 = 0LL;
    goto LABEL_28;
  }

  uint64_t v153 = v3;
  uint64_t v151 = v21;
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v23, v19, v20);
  id v29 = [objc_allocWithZone(SAUIListItemProtobufMessage) init];
  uint64_t v30 = UUID.init()(v29);
  UUID.uuidString.getter(v30);
  uint64_t v32 = v31;
  char v144 = *(void (**)(char *, uint64_t))(v14 + 8);
  v144(v16, v13);
  NSString v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v32);
  [v29 setAceId:v33];
  id v156 = v29;

  uint64_t v34 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( (unint64_t *)&lazy protocol witness table cache variable for type Searchfoundation_DynamicURLImageResource and conformance Searchfoundation_DynamicURLImageResource,  (uint64_t (*)(uint64_t))&type metadata accessor for Searchfoundation_DynamicURLImageResource,  (uint64_t)&protocol conformance descriptor for Searchfoundation_DynamicURLImageResource);
  uint64_t v152 = v20;
  uint64_t v35 = v161;
  uint64_t v36 = Message.serializedData(partial:)(0LL, v20, v34);
  uint64_t v38 = v13;
  if (v35)
  {
    swift_errorRelease(v35);
    Class isa = 0LL;
    uint64_t v161 = 0LL;
  }

  else
  {
    uint64_t v40 = v36;
    unint64_t v41 = v37;
    uint64_t v161 = 0LL;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v40, v41);
  }

  uint64_t v42 = (uint64_t)v154;
  [v156 setDynamicURLImageResourceData:isa];

  uint64_t v43 = v155;
  Apple_Parsec_Siri_V2alpha_TvOrMovieObject.object.getter(v44);
  uint64_t v45 = type metadata accessor for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object(0LL);
  uint64_t v46 = *(void *)(v45 - 8);
  int v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v43, 1LL, v45);
  uint64_t v138 = v23;
  if (v47 == 1) {
    goto LABEL_17;
  }
  outlined init with copy of IdentifiedUser?( v43,  v42,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
  int v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 88))(v42, v45);
  if (v48 == enum case for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object.tv(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v46 + 96))(v42, v45);
    uint64_t v49 = v145;
    uint64_t v50 = v146;
    uint64_t v51 = v147;
    uint64_t v52 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v146 + 32))(v145, v42, v147);
    uint64_t v139 = Apple_Parsec_Siri_V2alpha_TvObject.title.getter(v52);
    unint64_t v140 = v53;
    uint64_t v143 = Apple_Parsec_Siri_V2alpha_TvObject.contentRatingSystem.getter();
    uint64_t v154 = (char *)v54;
    uint64_t v141 = Apple_Parsec_Siri_V2alpha_TvObject.contentRatingValue.getter();
    uint64_t v142 = v55;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v49, v51);
    goto LABEL_18;
  }

  if (v48 != enum case for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object.movie(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v42, v45);
LABEL_17:
    uint64_t v141 = 0LL;
    uint64_t v142 = 0LL;
    uint64_t v143 = 0LL;
    uint64_t v154 = 0LL;
    uint64_t v139 = 0LL;
    unint64_t v140 = 0xE000000000000000LL;
    goto LABEL_18;
  }

  (*(void (**)(uint64_t, uint64_t))(v46 + 96))(v42, v45);
  uint64_t v56 = (*(uint64_t (**)(char *, uint64_t, id))(v149 + 32))(v148, v42, v150);
  uint64_t v57 = (void *)Apple_Parsec_Siri_V2alpha_MovieObject.titles.getter(v56);
  uint64_t v58 = v57;
  if (v57[2])
  {
    uint64_t v59 = v57[4];
    unint64_t v60 = v57[5];
    swift_bridgeObjectRetain(v60);
  }

  else
  {
    uint64_t v59 = 0LL;
    unint64_t v60 = 0xE000000000000000LL;
  }

  uint64_t v139 = v59;
  unint64_t v140 = v60;
  uint64_t v132 = swift_bridgeObjectRelease(v58);
  uint64_t v133 = v148;
  uint64_t v143 = Apple_Parsec_Siri_V2alpha_MovieObject.contentRatingSystem.getter(v132);
  uint64_t v154 = (char *)v134;
  uint64_t v141 = Apple_Parsec_Siri_V2alpha_MovieObject.contentRatingValue.getter();
  uint64_t v142 = v135;
  (*(void (**)(char *, id))(v149 + 8))(v133, v150);
LABEL_18:
  outlined destroy of Any?( v43,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
  id v61 = [objc_allocWithZone(SAStartRequest) init];
  uint64_t v62 = UUID.init()(v61);
  UUID.uuidString.getter(v62);
  uint64_t v64 = v63;
  uint64_t v65 = v13;
  uint64_t v66 = v144;
  v144(v16, v65);
  NSString v67 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v64);
  [v61 setAceId:v67];

  Apple_Parsec_Siri_V2alpha_TvOrMovieObject.machineUtterance.getter([v61 setInputOrigin:SAInputOriginDialogButtonTapValue]);
  uint64_t v69 = v68;
  NSString v70 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v69);
  [v61 setUtterance:v70];

  uint64_t v71 = v38;
  id v72 = [objc_allocWithZone(SASendCommands) init];
  uint64_t v73 = UUID.init()(v72);
  UUID.uuidString.getter(v73);
  uint64_t v75 = v74;
  v66(v16, v71);
  NSString v76 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v75);
  [v72 setAceId:v76];

  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v78 = swift_allocObject(v77, 40LL, 7LL);
  __int128 v155 = xmmword_7D060;
  *(_OWORD *)(v78 + 16) = xmmword_7D060;
  *(void *)(v78 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v61;
  uint64_t v164 = v78;
  specialized Array._endMutation()(v78);
  uint64_t v79 = v164;
  id v150 = v61;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAServerBoundCommand);
  Class v80 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v79);
  [v72 setCommands:v80];

  id v81 = [objc_allocWithZone(SAUIListItem) init];
  uint64_t v82 = UUID.init()(v81);
  UUID.uuidString.getter(v82);
  uint64_t v84 = v83;
  v66(v16, v71);
  NSString v85 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v84);
  [v81 setAceId:v85];

  uint64_t v86 = swift_allocObject(v77, 40LL, 7LL);
  *(_OWORD *)(v86 + 16) = v155;
  *(void *)(v86 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v72;
  uint64_t v164 = v86;
  specialized Array._endMutation()(v86);
  uint64_t v87 = v164;
  unint64_t v88 = (char *)v72;
  *(void *)&__int128 v155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class v89 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v87);
  [v81 setCommands:v89];

  id v90 = v156;
  [v81 setObject:v156];
  unint64_t v91 = v140;
  NSString v92 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v91);
  [v81 setTitle:v92];

  Apple_Parsec_Siri_V2alpha_TvOrMovieObject.contentRowDescriptionData.getter();
  uint64_t v94 = v93;
  NSString v95 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v94);
  [v81 setPrimaryDescriptiveText:v95];

  uint64_t v96 = (uint64_t)v154;
  uint64_t v97 = v142;
  id v98 = specialized static VideoSnippetUtils.makeContentRatingTemplate(ratingSystem:ratingValue:)( v143,  (uint64_t)v154,  v141,  v142);
  swift_bridgeObjectRelease(v97);
  swift_bridgeObjectRelease(v96);
  [v81 setContentRating:v98];

  if (one-time initialization token for videoSnippet != -1) {
    swift_once(&one-time initialization token for videoSnippet, one-time initialization function for videoSnippet);
  }
  uint64_t v99 = v153;
  uint64_t v100 = __swift_project_value_buffer(v153, (uint64_t)static Logger.videoSnippet);
  uint64_t v102 = v157;
  uint64_t v101 = v158;
  (*(void (**)(char *, uint64_t, uint64_t))(v158 + 16))(v157, v100, v99);
  id v28 = v81;
  uint64_t v103 = (os_log_s *)Logger.logObject.getter(v28);
  LODWORD(v160) = static os_log_type_t.debug.getter();
  BOOL v104 = os_log_type_enabled(v103, (os_log_type_t)v160);
  uint64_t v106 = v151;
  uint64_t v105 = v152;
  if (!v104)
  {

    (*(void (**)(char *, uint64_t))(v101 + 8))(v102, v99);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v138, v105);
LABEL_28:
    *os_log_type_t v159 = v28;
    return;
  }

  uint64_t v154 = v88;
  uint64_t v107 = swift_slowAlloc(42LL, -1LL);
  uint64_t v108 = swift_slowAlloc(96LL, -1LL);
  uint64_t v164 = v108;
  *(_DWORD *)uint64_t v107 = 136315906;
  id v109 = [v28 title];
  if (!v109)
  {

    __break(1u);
    goto LABEL_36;
  }

  uint64_t v110 = v109;
  uint64_t v149 = v108;
  uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
  unint64_t v113 = v112;

  id v162 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v111, v113, &v164);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163);

  swift_bridgeObjectRelease(v113);
  *(_WORD *)(v107 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
  id v114 = [v28 primaryDescriptiveText];
  if (!v114)
  {
LABEL_36:

    __break(1u);
    goto LABEL_37;
  }

  unint64_t v115 = v114;
  uint64_t v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v114);
  unint64_t v118 = v117;

  id v162 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v116, v118, &v164);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163);

  swift_bridgeObjectRelease(v118);
  *(_WORD *)(v107 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
  id v162 = [v28 contentRating];
  uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateContentRating?);
  uint64_t v120 = String.init<A>(describing:)(&v162, v119);
  unint64_t v122 = v121;
  id v162 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v120, v121, &v164);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163);

  swift_bridgeObjectRelease(v122);
  *(_WORD *)(v107 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2048;
  id v123 = [v28 commands];
  if (v123)
  {
    uint64_t v124 = v123;
    uint64_t v125 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v123, v155);

    uint64_t v126 = v153;
    unint64_t v127 = v154;
    uint64_t v129 = v157;
    uint64_t v128 = v158;
    if ((unint64_t)v125 >> 62)
    {
      if (v125 < 0) {
        uint64_t v136 = v125;
      }
      else {
        uint64_t v136 = v125 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v125);
      uint64_t v130 = _CocoaArrayWrapper.endIndex.getter(v136);

      swift_bridgeObjectRelease(v125);
    }

    else
    {
      uint64_t v130 = *(void *)((char *)&dword_10 + (v125 & 0xFFFFFFFFFFFFF8LL));
    }

    swift_bridgeObjectRelease(v125);
    id v162 = (id)v130;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163);

    _os_log_impl( &dword_0,  v103,  (os_log_type_t)v160,  "Generated list item for TV or movie object\n title: %s\n descriptive text: %s\n content rating: %s\n commands: %ld",  (uint8_t *)v107,  0x2Au);
    uint64_t v131 = v149;
    swift_arrayDestroy(v149, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v131, -1LL, -1LL);
    swift_slowDealloc(v107, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v128 + 8))(v129, v126);
    (*(void (**)(char *, uint64_t))(v151 + 8))(v138, v152);
    goto LABEL_28;
  }

uint64_t static VideoSnippetUtils.makeDynamicURLImageResource(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = specialized Apple_Parsec_Siri_V2alpha_TvOrMovieObject.withSnippetObject<A>(_:)(a1);
  uint64_t v11 = v3;
  if (v3)
  {
    uint64_t v12 = type metadata accessor for Searchfoundation_DynamicURLImageResource(0LL);
    __chkstk_darwin(v12);
    _OWORD v15[2] = v11;
    uint64_t v14 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( (unint64_t *)&lazy protocol witness table cache variable for type Searchfoundation_DynamicURLImageResource and conformance Searchfoundation_DynamicURLImageResource,  v13,  (uint64_t)&protocol conformance descriptor for Searchfoundation_DynamicURLImageResource);
    static Message.with(_:)( partial apply for closure #2 in static VideoSnippetUtils.makeDynamicURLImageResource(for:),  v15,  v12,  v14);

    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))( a2,  0LL,  1LL,  v12);
  }

  else
  {
    if (one-time initialization token for videoSnippet != -1) {
      swift_once(&one-time initialization token for videoSnippet, one-time initialization function for videoSnippet);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)static Logger.videoSnippet);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl( &dword_0,  v6,  v7,  "Could not create image resource for TV or movie object; canceling dynamic URL image resource",
        v8,
        2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    uint64_t v9 = type metadata accessor for Searchfoundation_DynamicURLImageResource(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))( a2,  1LL,  1LL,  v9);
  }

id specialized static VideoSnippetUtils.makeSixteenByNineImage<A>(for:)( uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t v8 = a2(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v24 - v17;
  uint64_t v19 = a4(v16);
  uint64_t v20 = v19;
  if (*(void *)(v19 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))( v18,  v19 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)),  v8);
    uint64_t v21 = 0LL;
  }

  else
  {
    uint64_t v21 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v18, v21, 1LL, v8);
  swift_bridgeObjectRelease(v20);
  outlined init with copy of IdentifiedUser?((uint64_t)v18, (uint64_t)v15, a3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1LL, v8) == 1)
  {
    id v22 = 0LL;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, v8);
    id v22 = specialized static VideoSnippetUtils.makeImage<A>(for:)((uint64_t)v11, a5);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  outlined destroy of Any?((uint64_t)v18, a3);
  return v22;
}

uint64_t static VideoSnippetUtils.makeSixteenByNineImage<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a3,  a2,  &protocol requirements base descriptor for VideoSnippetObject,  &associated type descriptor for VideoSnippetObject.CoverArtType);
  uint64_t v6 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v16[-v8];
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 72))(a2, a3);
  uint64_t v19 = v10;
  uint64_t v11 = type metadata accessor for Array(0LL, AssociatedTypeWitness);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v11);
  Collection.first.getter(v11, WitnessTable);
  swift_bridgeObjectRelease(v10);
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v13 = type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAUIImageResource,  &OBJC_CLASS___SAUIImageResource_ptr);
  _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF( (void (*)(char *, char *))partial apply for closure #1 in static VideoSnippetUtils.makeSixteenByNineImage<A>(for:),  (uint64_t)v16,  (uint64_t)&type metadata for Never,  v13,  v14,  (uint64_t)&v19);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  return v19;
}

os_log_s *specialized Apple_Parsec_Siri_V2alpha_TvOrMovieObject.withSnippetObject<A>(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_TvOrMovieObject(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v51 = v2;
  uint64_t v52 = v3;
  __chkstk_darwin(v2);
  uint64_t v50 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_TvObject(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MovieObject(0LL);
  uint64_t v9 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
  uint64_t v12 = __chkstk_darwin(v47);
  uint64_t v46 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v45 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v45 - v18;
  uint64_t v49 = a1;
  Apple_Parsec_Siri_V2alpha_TvOrMovieObject.object.getter(v17);
  uint64_t v20 = type metadata accessor for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20) == 1)
  {
    uint64_t v22 = (uint64_t)v19;
    if (one-time initialization token for videoSnippet != -1) {
      swift_once(&one-time initialization token for videoSnippet, one-time initialization function for videoSnippet);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    uint64_t v24 = __swift_project_value_buffer(v23, (uint64_t)static Logger.videoSnippet);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      unint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v27 = 0;
      _os_log_impl(&dword_0, v25, v26, "No TV or movie payload in a TV or movie object", v27, 2u);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

LABEL_18:
    unint64_t v42 = lazy protocol witness table accessor for type VideoSnippetError and conformance VideoSnippetError();
    uint64_t v43 = swift_allocError(&type metadata for VideoSnippetError, v42, 0LL, 0LL);
    swift_willThrow(v43);
    outlined destroy of Any?( v22,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
    return v25;
  }

  uint64_t v45 = v19;
  outlined init with copy of IdentifiedUser?( (uint64_t)v19,  (uint64_t)v16,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
  int v28 = (*(uint64_t (**)(char *, uint64_t))(v21 + 88))(v16, v20);
  if (v28 == enum case for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object.tv(_:))
  {
    (*(void (**)(char *, uint64_t))(v21 + 96))(v16, v20);
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v16, v5);
    uint64_t v25 = (os_log_s *)specialized static VideoSnippetUtils.makeSixteenByNineImage<A>(for:)( (uint64_t)v8,  (uint64_t (*)(void))&type metadata accessor for Tvpb_CoverArt,  &demangling cache variable for type metadata for Tvpb_CoverArt?,  (uint64_t (*)(uint64_t))Apple_Parsec_Siri_V2alpha_TvObject.sixteenByNineImages.getter,  (uint64_t (*)(uint64_t))&Tvpb_CoverArt.url.getter);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  else
  {
    if (v28 != enum case for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object.movie(_:))
    {
      (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v20);
      if (one-time initialization token for videoSnippet != -1) {
        swift_once(&one-time initialization token for videoSnippet, one-time initialization function for videoSnippet);
      }
      uint64_t v30 = type metadata accessor for Logger(0LL);
      uint64_t v25 = (os_log_s *)__swift_project_value_buffer(v30, (uint64_t)static Logger.videoSnippet);
      uint64_t v32 = v51;
      uint64_t v31 = v52;
      NSString v33 = v50;
      uint64_t v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 16))(v50, v49, v51);
      uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
      os_log_type_t v36 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v35, v36))
      {
        unint64_t v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v38 = swift_slowAlloc(32LL, -1LL);
        uint64_t v56 = v38;
        *(_DWORD *)unint64_t v37 = 136315138;
        unint64_t v53 = v37 + 4;
        uint64_t v39 = v46;
        Apple_Parsec_Siri_V2alpha_TvOrMovieObject.object.getter(v38);
        uint64_t v40 = String.init<A>(describing:)(v39, v47);
        uint64_t v25 = (os_log_s *)v41;
        uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
        swift_bridgeObjectRelease(v25);
        (*(void (**)(char *, uint64_t))(v52 + 8))(v33, v32);
        _os_log_impl(&dword_0, v35, v36, "Unknown or future payload in a TV or movie object: %s", v37, 0xCu);
        swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v38, -1LL, -1LL);
        swift_slowDealloc(v37, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v32);
      }

      uint64_t v22 = (uint64_t)v45;
      goto LABEL_18;
    }

    (*(void (**)(char *, uint64_t))(v21 + 96))(v16, v20);
    uint64_t v29 = v48;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v16, v48);
    uint64_t v25 = (os_log_s *)specialized static VideoSnippetUtils.makeSixteenByNineImage<A>(for:)( (uint64_t)v11,  (uint64_t (*)(void))&type metadata accessor for Moviespb_CoverArt,  (uint64_t *)&demangling cache variable for type metadata for Moviespb_CoverArt?,  (uint64_t (*)(uint64_t))Apple_Parsec_Siri_V2alpha_MovieObject.sixteenByNineImages.getter,  (uint64_t (*)(uint64_t))&Moviespb_CoverArt.url.getter);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v29);
  }

  outlined destroy of Any?( (uint64_t)v45,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
  return v25;
}

uint64_t specialized Apple_Parsec_Siri_V2alpha_TvOrMovieObject.withSnippetObject<A>(_:)( void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2)
{
  void (*v60)(uint64_t *__return_ptr, uint64_t *);
  uint8_t *v61;
  uint64_t v62[3];
  uint64_t v63;
  _UNKNOWN **v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v60 = a1;
  uint64_t v59 = a2;
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_TvOrMovieObject(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v57 = v3;
  uint64_t v58 = v4;
  __chkstk_darwin(v3);
  uint64_t v56 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_TvObject(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MovieObject(0LL);
  uint64_t v54 = *(void *)(v10 - 8);
  uint64_t v55 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
  uint64_t v13 = __chkstk_darwin(v53);
  uint64_t v52 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v50 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v50 - v19;
  Apple_Parsec_Siri_V2alpha_TvOrMovieObject.object.getter(v18);
  uint64_t v21 = type metadata accessor for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21) != 1)
  {
    uint64_t v51 = v20;
    outlined init with copy of IdentifiedUser?( (uint64_t)v20,  (uint64_t)v17,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
    int v29 = (*(uint64_t (**)(char *, uint64_t))(v22 + 88))(v17, v21);
    if (v29 == enum case for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object.tv(_:))
    {
      (*(void (**)(char *, uint64_t))(v22 + 96))(v17, v21);
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v17, v6);
      uint64_t v63 = v6;
      uint64_t v64 = &protocol witness table for Apple_Parsec_Siri_V2alpha_TvObject;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v62);
      (*(void (**)(void *, char *, uint64_t))(v7 + 16))(boxed_opaque_existential_1, v9, v6);
      v60(&v67, v62);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }

    else
    {
      if (v29 != enum case for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object.movie(_:))
      {
        (*(void (**)(char *, uint64_t))(v22 + 8))(v17, v21);
        if (one-time initialization token for videoSnippet != -1) {
          swift_once(&one-time initialization token for videoSnippet, one-time initialization function for videoSnippet);
        }
        uint64_t v35 = type metadata accessor for Logger(0LL);
        __swift_project_value_buffer(v35, (uint64_t)static Logger.videoSnippet);
        uint64_t v37 = v57;
        uint64_t v36 = v58;
        uint64_t v38 = v56;
        uint64_t v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 16))(v56, v2, v57);
        uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
        os_log_type_t v41 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v40, v41))
        {
          unint64_t v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v43 = swift_slowAlloc(32LL, -1LL);
          *(_DWORD *)unint64_t v42 = 136315138;
          id v61 = v42 + 4;
          v62[0] = v43;
          uint64_t v44 = v52;
          Apple_Parsec_Siri_V2alpha_TvOrMovieObject.object.getter(v43);
          uint64_t v45 = String.init<A>(describing:)(v44, v53);
          unint64_t v47 = v46;
          uint64_t v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, v62);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
          swift_bridgeObjectRelease(v47);
          (*(void (**)(char *, uint64_t))(v58 + 8))(v38, v37);
          _os_log_impl(&dword_0, v40, v41, "Unknown or future payload in a TV or movie object: %s", v42, 0xCu);
          swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v43, -1LL, -1LL);
          swift_slowDealloc(v42, -1LL, -1LL);
        }

        else
        {
          (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v37);
        }

        uint64_t v27 = (uint64_t)v51;
        goto LABEL_18;
      }

      (*(void (**)(char *, uint64_t))(v22 + 96))(v17, v21);
      uint64_t v32 = v54;
      uint64_t v31 = v55;
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v12, v17, v55);
      uint64_t v63 = v31;
      uint64_t v64 = &protocol witness table for Apple_Parsec_Siri_V2alpha_MovieObject;
      NSString v33 = __swift_allocate_boxed_opaque_existential_1(v62);
      (*(void (**)(void *, char *, uint64_t))(v32 + 16))(v33, v12, v31);
      v60(&v67, v62);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v31);
    }

    __swift_destroy_boxed_opaque_existential_1(v62);
    outlined destroy of Any?( (uint64_t)v51,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
    return v67;
  }

  if (one-time initialization token for videoSnippet != -1) {
    swift_once(&one-time initialization token for videoSnippet, one-time initialization function for videoSnippet);
  }
  uint64_t v23 = type metadata accessor for Logger(0LL);
  uint64_t v24 = __swift_project_value_buffer(v23, (uint64_t)static Logger.videoSnippet);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.error.getter();
  uint64_t v27 = (uint64_t)v20;
  if (os_log_type_enabled(v25, v26))
  {
    int v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)int v28 = 0;
    _os_log_impl(&dword_0, v25, v26, "No TV or movie payload in a TV or movie object", v28, 2u);
    swift_slowDealloc(v28, -1LL, -1LL);
  }

LABEL_18:
  unint64_t v48 = lazy protocol witness table accessor for type VideoSnippetError and conformance VideoSnippetError();
  uint64_t v49 = swift_allocError(&type metadata for VideoSnippetError, v48, 0LL, 0LL);
  swift_willThrow(v49);
  return outlined destroy of Any?( v27,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
}

uint64_t closure #1 in static VideoSnippetUtils.makeContentButtons(for:utsURL:switchProfileBuilderParams:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[2] = a3;
  void v6[3] = a4;
  void v6[4] = a2;
  v6[5] = a1;
  v6[6] = a5;
  return specialized Apple_Parsec_Siri_V2alpha_TvOrMovieObject.withSnippetObject<A>(_:)( (void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in closure #1 in static VideoSnippetUtils.makeContentButtons(for:utsURL:switchProfileBuilderParams:),  (uint64_t)v6);
}

uint64_t closure #1 in closure #1 in static VideoSnippetUtils.makeContentButtons(for:utsURL:switchProfileBuilderParams:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X4>, void *a5@<X5>, void *a6@<X8>)
{
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  uint64_t v13 = __swift_project_boxed_opaque_existential_1(a1, v11);
  uint64_t v14 = Apple_Parsec_Siri_V2alpha_TvOrMovieObject.contentRowDescriptionData.getter();
  uint64_t v16 = v15;
  id v17 = static VideoSnippetUtils.makeContentButton<A>(for:utsURL:contentRowDescription:index:switchProfileBuilderParams:)( (uint64_t)v13,  a2,  a3,  v14,  v15,  a4,  a5,  v11,  v12);
  uint64_t result = swift_bridgeObjectRelease(v16);
  *a6 = v17;
  return result;
}

id static VideoSnippetUtils.makeContentButton<A>(for:utsURL:contentRowDescription:index:switchProfileBuilderParams:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  id v68 = a7;
  uint64_t v69 = a5;
  uint64_t v56 = a6;
  uint64_t v57 = a2;
  uint64_t v70 = a4;
  unint64_t v58 = a3;
  uint64_t v12 = (void *)type metadata accessor for UUID(0LL);
  uint64_t v59 = *(v12 - 1);
  id v60 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v71 = (void *)static VideoSnippetUtils.makeSixteenByNineImage<A>(for:)(a1, a8, a9);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a9 + 32))(a8, a9);
  uint64_t v66 = v16;
  uint64_t v67 = v15;
  uint64_t v17 = v16;
  v18._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(a9 + 24))(a8, a9);
  object = v18._object;
  uint64_t v72 = 0x3A636D753A6E7275LL;
  unint64_t v73 = 0xE800000000000000LL;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(object);
  uint64_t v21 = v72;
  uint64_t v20 = v73;
  unint64_t v64 = v73;
  uint64_t v65 = v72;
  uint64_t v63 = *(uint64_t (**)(uint64_t, uint64_t))(a9 + 40);
  uint64_t v61 = a1;
  uint64_t v22 = v63(a8, a9);
  uint64_t v24 = v23;
  uint64_t v62 = *(uint64_t (**)(uint64_t, uint64_t))(a9 + 64);
  uint64_t v25 = v62(a8, a9);
  uint64_t v27 = v26;
  id v28 = specialized static VideoSnippetUtils.makeContentDetailPage(image:appURL:utsURL:canonicalID:title:contentType:index:)( (uint64_t)v71,  v15,  v17,  v57,  v58,  v21,  v20,  v22,  v24,  v25,  v26,  v56);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v27);
  id v29 = [objc_allocWithZone(SAUIAddViews) init];
  uint64_t v30 = UUID.init()(v29);
  UUID.uuidString.getter(v30);
  uint64_t v32 = v31;
  (*(void (**)(char *, id))(v59 + 8))(v14, v60);
  NSString v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v32);
  [v29 setAceId:v33];

  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v35 = swift_allocObject(v34, 40LL, 7LL);
  *(_OWORD *)(v35 + 16) = xmmword_7D060;
  *(void *)(v35 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v28;
  uint64_t v72 = v35;
  specialized Array._endMutation()(v35);
  uint64_t v36 = v72;
  type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAAceView,  &OBJC_CLASS___SAAceView_ptr);
  id v60 = v28;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v36);
  [v29 setViews:isa];

  id v68 = specialized static VideoSnippetUtils.makeProfileSwitch(switchProfileBuilderParams:)((uint64_t)v68);
  uint64_t v63 = (uint64_t (*)(uint64_t, uint64_t))v63(a8, a9);
  unint64_t v39 = v38;
  uint64_t v40 = v62(a8, a9);
  unint64_t v42 = v41;
  uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(a9 + 56))(a8, a9);
  uint64_t v45 = v44;
  uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t))(a9 + 48))(a8, a9);
  uint64_t v48 = v47;
  uint64_t v55 = v43;
  uint64_t v49 = v71;
  uint64_t v50 = v66;
  uint64_t v51 = v64;
  uint64_t v52 = v68;
  id v53 = specialized static VideoSnippetUtils.makeContentButton(image:appURL:canonicalID:addViews:switchProfile:title:contentType:contentRatingValue:contentRatingSystem:contentRowDescription:)( (uint64_t)v71,  v67,  v66,  v65,  v64,  v29,  v68,  (uint64_t)v63,  v39,  v40,  v42,  v55,  v45,  v46,  v47,  v70,  v69);
  swift_bridgeObjectRelease(v50);
  swift_bridgeObjectRelease(v51);

  swift_bridgeObjectRelease(v39);
  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease(v45);
  swift_bridgeObjectRelease(v48);

  return v53;
}

id closure #1 in static VideoSnippetUtils.makeSixteenByNineImage<A>(for:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a3,  a2,  &protocol requirements base descriptor for VideoSnippetObject,  &associated type descriptor for VideoSnippetObject.CoverArtType);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a3,  a2,  AssociatedTypeWitness,  &protocol requirements base descriptor for VideoSnippetObject,  &associated conformance descriptor for VideoSnippetObject.VideoSnippetObject.CoverArtType: VideoSnippetCoverArt);
  id result = static VideoSnippetUtils.makeImage<A>(for:)(a1, AssociatedTypeWitness, AssociatedConformanceWitness);
  *a4 = result;
  return result;
}

id specialized static VideoSnippetUtils.makeImage<A>(for:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v65 = *(void *)(v3 - 8);
  uint64_t v66 = v3;
  __chkstk_darwin(v3);
  unint64_t v64 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v68 = *(void *)(v8 - 8);
  uint64_t v69 = v8;
  __chkstk_darwin(v8);
  uint64_t v67 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for CharacterSet(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v74 = a2(v12);
  uint64_t v75 = v15;
  static CharacterSet.whitespaces.getter();
  unint64_t v16 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v17 = StringProtocol.trimmingCharacters(in:)(v14, &type metadata for String, v16);
  unint64_t v19 = v18;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  swift_bridgeObjectRelease(v75);
  uint64_t v20 = swift_bridgeObjectRelease(v19);
  uint64_t v21 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000LL) == 0) {
    uint64_t v21 = v17 & 0xFFFFFFFFFFFFLL;
  }
  if (!v21)
  {
    if (one-time initialization token for videoSnippet != -1) {
      swift_once(&one-time initialization token for videoSnippet, one-time initialization function for videoSnippet);
    }
    uint64_t v42 = type metadata accessor for Logger(0LL);
    uint64_t v43 = __swift_project_value_buffer(v42, (uint64_t)static Logger.videoSnippet);
    unint64_t v38 = (os_log_s *)Logger.logObject.getter(v43);
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v38, v39)) {
      goto LABEL_14;
    }
    uint64_t v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v40 = 0;
    unint64_t v41 = "Cover art image URL is empty";
    goto LABEL_13;
  }

  uint64_t v63 = a2;
  uint64_t v22 = a2(v20);
  uint64_t v24 = v23;
  uint64_t v74 = v22;
  uint64_t v75 = v23;
  uint64_t v72 = 8222587LL;
  unint64_t v73 = 0xE300000000000000LL;
  uint64_t v70 = 3223863LL;
  unint64_t v71 = 0xE300000000000000LL;
  uint64_t v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v72,  &v70,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v16,  v16,  v16);
  uint64_t v27 = v26;
  uint64_t v74 = v25;
  uint64_t v75 = v26;
  uint64_t v72 = 8218747LL;
  unint64_t v73 = 0xE300000000000000LL;
  uint64_t v70 = 3158068LL;
  unint64_t v71 = 0xE300000000000000LL;
  uint64_t v28 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v72,  &v70,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v16,  v16,  v16);
  uint64_t v30 = v29;
  swift_bridgeObjectRelease(v27);
  uint64_t v74 = v28;
  uint64_t v75 = v30;
  uint64_t v72 = 8218235LL;
  unint64_t v73 = 0xE300000000000000LL;
  uint64_t v70 = 7496556LL;
  unint64_t v71 = 0xE300000000000000LL;
  uint64_t v31 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v72,  &v70,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v16,  v16,  v16);
  uint64_t v33 = v32;
  swift_bridgeObjectRelease(v30);
  URL.init(string:)(v31);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v33);
  uint64_t v35 = v68;
  uint64_t v34 = v69;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v7, 1LL, v69) != 1)
  {
    uint64_t v45 = (*(uint64_t (**)(char *, char *, uint64_t))(v35 + 32))(v67, v7, v34);
    uint64_t v46 = v63(v45);
    uint64_t v48 = v47;
    uint64_t v74 = v46;
    uint64_t v75 = v47;
    uint64_t v72 = 8218235LL;
    unint64_t v73 = 0xE300000000000000LL;
    uint64_t v70 = 7496556LL;
    unint64_t v71 = 0xE300000000000000LL;
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v72,  &v70,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v16,  v16,  v16);
    uint64_t v50 = v49;
    swift_bridgeObjectRelease(v48);
    id v44 = [objc_allocWithZone(SAUIImageResource) init];
    uint64_t v51 = v64;
    uint64_t v52 = UUID.init()(v44);
    UUID.uuidString.getter(v52);
    uint64_t v54 = v53;
    (*(void (**)(char *, uint64_t))(v65 + 8))(v51, v66);
    NSString v55 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v54);
    [v44 setAceId:v55];

    [v44 setScaleFactor:1.0];
    uint64_t v56 = v67;
    URL._bridgeToObjectiveC()(v57);
    uint64_t v59 = v58;
    [v44 setResourceUrl:v58];

    [v44 setPointWidth:711.11];
    [v44 setPointHeight:400.0];
    [v44 setPixelWidth:711.11];
    [v44 setPixelHeight:400.0];
    NSString v60 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v50);
    [v44 setUrlFormatString:v60];

    (*(void (**)(char *, uint64_t))(v35 + 8))(v56, v34);
    return v44;
  }

  outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for URL?);
  if (one-time initialization token for videoSnippet != -1) {
    swift_once(&one-time initialization token for videoSnippet, one-time initialization function for videoSnippet);
  }
  uint64_t v36 = type metadata accessor for Logger(0LL);
  uint64_t v37 = __swift_project_value_buffer(v36, (uint64_t)static Logger.videoSnippet);
  unint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
  os_log_type_t v39 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v40 = 0;
    unint64_t v41 = "Cover art image URL string was not a valid URL";
LABEL_13:
    _os_log_impl(&dword_0, v38, v39, v41, v40, 2u);
    swift_slowDealloc(v40, -1LL, -1LL);
  }

LABEL_14:
  return 0LL;
}

  return 0LL;
}

    uint64_t v27 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v18 >> 6) + 64) |= 1LL << v18;
    uint64_t v28 = (uint64_t *)(v27[6] + 16 * v18);
    *uint64_t v28 = v15;
    v28[1] = v14;
    outlined init with take of Any(v50, (_OWORD *)(v27[7] + 32 * v18));
    uint64_t v29 = v27[2];
    uint64_t v30 = __OFADD__(v29, 1LL);
    uint64_t v31 = v29 + 1;
    if (v30)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }

    __int128 v27[2] = v31;
LABEL_16:
    specialized LazyMapSequence.Iterator.next()(&v51);
    for (uint64_t i = *((void *)&v51 + 1); *((void *)&v51 + 1); uint64_t i = *((void *)&v51 + 1))
    {
      uint64_t v35 = v51;
      outlined init with take of Any(v52, v50);
      uint64_t v36 = *(void **)a5;
      uint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v35, i);
      os_log_type_t v39 = v36[2];
      uint64_t v40 = (v38 & 1) == 0;
      uint64_t v30 = __OFADD__(v39, v40);
      unint64_t v41 = v39 + v40;
      if (v30) {
        goto LABEL_27;
      }
      uint64_t v42 = v38;
      if (v36[3] < v41)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v41, 1LL);
        uint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v35, i);
        if ((v42 & 1) != (v43 & 1)) {
          goto LABEL_29;
        }
      }

      if ((v42 & 1) != 0)
      {
        uint64_t v33 = 32 * v37;
        outlined init with copy of Any(*(void *)(*(void *)a5 + 56LL) + 32 * v37, (uint64_t)v49);
        __swift_destroy_boxed_opaque_existential_1(v50);
        swift_bridgeObjectRelease(i);
        uint64_t v34 = (void *)(*(void *)(*(void *)a5 + 56LL) + v33);
        __swift_destroy_boxed_opaque_existential_1(v34);
        outlined init with take of Any(v49, v34);
      }

      else
      {
        id v44 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v37 >> 6) + 64) |= 1LL << v37;
        uint64_t v45 = (uint64_t *)(v44[6] + 16 * v37);
        *uint64_t v45 = v35;
        v45[1] = i;
        outlined init with take of Any(v50, (_OWORD *)(v44[7] + 32 * v37));
        uint64_t v46 = v44[2];
        uint64_t v30 = __OFADD__(v46, 1LL);
        uint64_t v47 = v46 + 1;
        if (v30) {
          goto LABEL_28;
        }
        v44[2] = v47;
      }

      specialized LazyMapSequence.Iterator.next()(&v51);
    }

  uint64_t v31 = v0[14];
  uint64_t v32 = *(void *)(v31 + 16);
  if (v32)
  {
    uint64_t v178 = v0[32];
    uint64_t v172 = v0[25];
    uint64_t v33 = v0[22];
    uint64_t v34 = v31 + ((*(unsigned __int8 *)(v33 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80));
    unint64_t v166 = *(void *)(v33 + 72);
    uint64_t v167 = v33;
    uint64_t v164 = *(uint64_t (**)(void, uint64_t, void))(v33 + 16);
    swift_bridgeObjectRetain(v31);
    uint64_t v35 = 0LL;
    uint64_t v36 = _swiftEmptyArrayStorage;
    os_log_type_t v159 = v34;
    uint64_t v160 = v32;
    do
    {
      uint64_t v169 = v35;
      os_log_type_t v39 = v164(v0[23], v34 + v35 * v166, v0[21]);
      uint64_t v40 = Apple_Parsec_Siri_V2alpha_DisambiguationListComponent.items.getter(v39);
      unint64_t v41 = *(void *)(v40 + 16);
      uint64_t v42 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DisambiguationListItem(0LL);
      uint64_t v43 = *(void *)(v42 - 8);
      if (v41)
      {
        (*(void (**)(void, unint64_t, uint64_t))(v43 + 16))( v0[20],  v40 + ((*(unsigned __int8 *)(v43 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80)),  v42);
        id v44 = 0LL;
      }

      else
      {
        id v44 = 1LL;
      }

      uint64_t v45 = v0[20];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v45, v44, 1LL, v42);
      swift_bridgeObjectRelease(v40);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v45, 1LL, v42) == 1)
      {
        uint64_t v37 = v0[23];
        unint64_t v38 = v0[21];
        outlined destroy of Any?( v0[20],  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DisambiguationListItem?);
        (*(void (**)(uint64_t, uint64_t))(v167 + 8))(v37, v38);
      }

      else
      {
        uint64_t v46 = v0[20];
        uint64_t v47 = Apple_Parsec_Siri_V2alpha_DisambiguationListItem.commands.getter();
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v46, v42);
        uint64_t v48 = *(void *)(v47 + 16);
        if (v48)
        {
          uint64_t v161 = v47;
          id v162 = v36;
          uint64_t v49 = v47 + ((*(unsigned __int8 *)(v178 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v178 + 80));
          swift_bridgeObjectRetain(v47);
          uint64_t v174 = *(uint64_t (**)(void, unint64_t, void))(v178 + 16);
          uint64_t v176 = *(void *)(v178 + 72);
          uint64_t v50 = _swiftEmptyArrayStorage;
          do
          {
            uint64_t v51 = v0[26];
            uint64_t v52 = v0[24];
            uint64_t v53 = v174(v0[33], v49, v0[31]);
            uint64_t v54 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter(v53);
            NSString v55 = Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.bundleID.getter(v54);
            uint64_t v57 = v56;
            unint64_t v58 = *(void (**)(uint64_t, uint64_t))(v172 + 8);
            v58(v51, v52);
            uint64_t v59 = swift_bridgeObjectRelease(v57);
            NSString v60 = HIBYTE(v57) & 0xF;
            if ((v57 & 0x2000000000000000LL) == 0) {
              NSString v60 = v55 & 0xFFFFFFFFFFFFLL;
            }
            uint64_t v61 = v0[33];
            uint64_t v62 = v0[31];
            if (v60)
            {
              unint64_t v64 = v0[28];
              uint64_t v63 = v0[29];
              uint64_t v191 = v50;
              uint64_t v65 = v0[24];
              uint64_t v66 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter(v59);
              uint64_t v67 = Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.appDisplayName.getter(v66);
              uint64_t v181 = v68;
              uint64_t v186 = v67;
              uint64_t v69 = ((uint64_t (*)(uint64_t, uint64_t))v58)(v63, v65);
              uint64_t v70 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter(v69);
              unint64_t v71 = Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.bundleID.getter(v70);
              unint64_t v73 = v72;
              uint64_t v74 = v65;
              uint64_t v50 = v191;
              v58(v64, v74);
              (*(void (**)(uint64_t, uint64_t))(v178 + 8))(v61, v62);
              if ((swift_isUniquelyReferenced_nonNull_native(v191) & 1) == 0) {
                uint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v191[2] + 1LL,  1,  v191);
              }
              NSString v76 = v50[2];
              uint64_t v75 = v50[3];
              uint64_t v0 = v170;
              if (v76 >= v75 >> 1) {
                uint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v75 > 1),  v76 + 1,  1,  v50);
              }
              v50[2] = v76 + 1;
              uint64_t v77 = &v50[4 * v76];
              v77[4] = v186;
              v77[5] = v181;
              v77[6] = v71;
              v77[7] = v73;
            }

            else
            {
              (*(void (**)(void, void))(v178 + 8))(v0[33], v0[31]);
            }

            v49 += v176;
            --v48;
          }

          while (v48);
          swift_bridgeObjectRelease_n(v161, 2LL);
          uint64_t v36 = v162;
        }

        else
        {
          swift_bridgeObjectRelease(v47);
          uint64_t v50 = _swiftEmptyArrayStorage;
        }

        uint64_t v78 = v0[23];
        uint64_t v79 = v0[21];
        if (v50[2])
        {
          id v81 = v50[4];
          Class v80 = v50[5];
          uint64_t v82 = v50[6];
          uint64_t v83 = v50[7];
          swift_bridgeObjectRetain(v80);
          swift_bridgeObjectRetain(v83);
          swift_bridgeObjectRelease(v50);
          (*(void (**)(uint64_t, uint64_t))(v167 + 8))(v78, v79);
          if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0) {
            uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v36[2] + 1LL,  1,  v36);
          }
          NSString v85 = v36[2];
          uint64_t v84 = v36[3];
          if (v85 >= v84 >> 1) {
            uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v84 > 1),  v85 + 1,  1,  v36);
          }
          void v36[2] = v85 + 1;
          uint64_t v86 = &v36[4 * v85];
          v86[4] = v81;
          v86[5] = v80;
          v86[6] = v82;
          v86[7] = v83;
        }

        else
        {
          swift_bridgeObjectRelease(v50);
          (*(void (**)(uint64_t, uint64_t))(v167 + 8))(v78, v79);
        }

        uint64_t v34 = v159;
        uint64_t v32 = v160;
      }

      uint64_t v35 = v169 + 1;
    }

    while (v169 + 1 != v32);
    swift_bridgeObjectRelease(v0[14]);
    if (v36[2]) {
      goto LABEL_52;
    }
LABEL_64:
    uint64_t v148 = v36;
LABEL_65:
    swift_bridgeObjectRelease(v148);
LABEL_66:
    id v150 = v0[34];
    uint64_t v149 = v0[35];
    uint64_t v151 = v0[33];
    uint64_t v153 = v0[29];
    uint64_t v152 = v0[30];
    __int128 v155 = v0[27];
    uint64_t v154 = v0[28];
    id v156 = v0[26];
    uint64_t v157 = v0[23];
    uint64_t v184 = v0[20];
    uint64_t v189 = v0[19];
    uint64_t v193 = v0[18];
    swift_task_dealloc(v0[38]);
    swift_task_dealloc(v149);
    swift_task_dealloc(v150);
    swift_task_dealloc(v151);
    swift_task_dealloc(v152);
    swift_task_dealloc(v153);
    swift_task_dealloc(v154);
    swift_task_dealloc(v155);
    swift_task_dealloc(v156);
    swift_task_dealloc(v157);
    swift_task_dealloc(v184);
    swift_task_dealloc(v189);
    swift_task_dealloc(v193);
    return ((uint64_t (*)(void))v0[1])(0LL);
  }

  uint64_t v36 = _swiftEmptyArrayStorage;
  if (!_swiftEmptyArrayStorage[2]) {
    goto LABEL_64;
  }
LABEL_52:
  uint64_t v119 = v36[5];
  uint64_t v192 = v36[4];
  uint64_t v120 = v36[6];
  unint64_t v121 = (void *)v36[7];
  swift_bridgeObjectRetain(v119);
  swift_bridgeObjectRetain(v121);
  swift_bridgeObjectRelease(v36);
LABEL_53:
  v0[39] = v119;
  unint64_t v122 = v0[18];
  id v123 = v0[19];
  uint64_t v124 = v0[16];
  uint64_t v125 = v0[17];
  uint64_t v126 = (void *)(v0[15] + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_appChecking);
  unint64_t v127 = v126[3];
  uint64_t v128 = v126[4];
  __swift_project_boxed_opaque_existential_1(v126, v127);
  uint64_t v0 = v170;
  uint64_t v129 = dispatch thunk of PommesAppChecking.appStatus(bundleID:)(v120, v121, v127, v128);
  LOBYTE(v12__swift_destroy_boxed_opaque_existential_1(v0 + 7) = PommesAppStatus.isHidden.getter(v129);
  uint64_t v130 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v125 + 16))(v122, v123, v124);
  uint64_t v132 = v170[17];
  uint64_t v131 = v170[18];
  uint64_t v133 = v170[16];
  if ((v127 & 1) == 0)
  {
    uint64_t v135 = PommesAppStatus.isLocked.getter(v130);
    uint64_t v134 = *(void (**)(uint64_t, uint64_t))(v132 + 8);
    v134(v131, v133);
    if ((v135 & 1) != 0) {
      goto LABEL_56;
    }
    v134(v170[19], v170[16]);
    swift_bridgeObjectRelease(v119);
    uint64_t v148 = v121;
    goto LABEL_65;
  }

  uint64_t v134 = *(void (**)(uint64_t, uint64_t))(v132 + 8);
  v134(v170[18], v170[16]);
LABEL_56:
  v170[40] = v134;
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v136 = type metadata accessor for Logger(0LL);
  v170[41] = __swift_project_value_buffer(v136, (uint64_t)static Logger.information);
  swift_bridgeObjectRetain_n(v119, 2LL);
  uint64_t v137 = swift_bridgeObjectRetain_n(v121, 2LL);
  uint64_t v138 = (os_log_s *)Logger.logObject.getter(v137);
  uint64_t v139 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v138, v139))
  {
    unint64_t v140 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v141 = swift_slowAlloc(32LL, -1LL);
    uint64_t v194 = v141;
    *(_DWORD *)unint64_t v140 = 136315138;
    swift_bridgeObjectRetain(v119);
    v170[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v192, v119, &v194);
    uint64_t v0 = v170;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v170 + 12, v158);
    swift_bridgeObjectRelease_n(v119, 3LL);
    swift_bridgeObjectRelease_n(v121, 2LL);
    _os_log_impl( &dword_0,  v138,  v139,  "RenderPegasusFlow: app punchout app is restricted for %s, publishing no app found response on CarPlay",  v140,  0xCu);
    swift_arrayDestroy(v141, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v141, -1LL, -1LL);
    swift_slowDealloc(v140, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v119, 2LL);
    swift_bridgeObjectRelease_n(v121, 2LL);
  }

  uint64_t v142 = v0[15];
  outlined init with copy of OutputPublisherAsync( v142 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_outputPublisher,  (uint64_t)(v0 + 2));
  uint64_t v143 = *(_OWORD *)(v0 + 5);
  *((_OWORD *)v0 + 21) = v143;
  v0[44] = __swift_project_boxed_opaque_existential_1(v0 + 2, v143);
  unint64_t v145 = *(void *)(v142 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_responseProducerType);
  char v144 = *(void *)(v142 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_responseProducerType + 8);
  swift_bridgeObjectRelease(v121);
  uint64_t v146 = *(int **)(v144 + 8);
  uint64_t v188 = (int *)((char *)v146 + *v146);
  uint64_t v147 = (void *)swift_task_alloc(v146[1]);
  v0[45] = v147;
  *uint64_t v147 = v0;
  v147[1] = RenderPegasusFlow.publishNoAppFoundOnCarPlayIfAppRestricted(delayedActions:disambiguationList:);
  return ((uint64_t (*)(void *, uint64_t, unint64_t, uint64_t, uint64_t))v188)( v0 + 7,  v192,  v119,  v145,  v144);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

id static VideoSnippetUtils.makeImage<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v64 = *(void *)(v6 - 8);
  uint64_t v65 = v6;
  __chkstk_darwin(v6);
  uint64_t v63 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for URL(0LL);
  uint64_t v67 = *(void *)(v11 - 8);
  uint64_t v68 = v11;
  __chkstk_darwin(v11);
  uint64_t v66 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CharacterSet(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 8);
  uint64_t v69 = a1;
  uint64_t v70 = a2;
  uint64_t v75 = v17(a2, a3);
  uint64_t v76 = v18;
  static CharacterSet.whitespaces.getter();
  unint64_t v19 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v20 = StringProtocol.trimmingCharacters(in:)(v16, &type metadata for String, v19);
  unint64_t v22 = v21;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  swift_bridgeObjectRelease(v76);
  swift_bridgeObjectRelease(v22);
  uint64_t v23 = HIBYTE(v22) & 0xF;
  if ((v22 & 0x2000000000000000LL) == 0) {
    uint64_t v23 = v20 & 0xFFFFFFFFFFFFLL;
  }
  if (!v23)
  {
    if (one-time initialization token for videoSnippet != -1) {
      swift_once(&one-time initialization token for videoSnippet, one-time initialization function for videoSnippet);
    }
    uint64_t v44 = type metadata accessor for Logger(0LL);
    uint64_t v45 = __swift_project_value_buffer(v44, (uint64_t)static Logger.videoSnippet);
    uint64_t v40 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v40, v41)) {
      goto LABEL_14;
    }
    uint64_t v42 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v42 = 0;
    uint64_t v43 = "Cover art image URL is empty";
    goto LABEL_13;
  }

  uint64_t v24 = v17(v70, a3);
  uint64_t v26 = v25;
  uint64_t v75 = v24;
  uint64_t v76 = v25;
  uint64_t v73 = 8222587LL;
  unint64_t v74 = 0xE300000000000000LL;
  uint64_t v71 = 3223863LL;
  unint64_t v72 = 0xE300000000000000LL;
  uint64_t v27 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v73,  &v71,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v19,  v19,  v19);
  uint64_t v29 = v28;
  uint64_t v75 = v27;
  uint64_t v76 = v28;
  uint64_t v73 = 8218747LL;
  unint64_t v74 = 0xE300000000000000LL;
  uint64_t v71 = 3158068LL;
  unint64_t v72 = 0xE300000000000000LL;
  uint64_t v30 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v73,  &v71,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v19,  v19,  v19);
  uint64_t v32 = v31;
  swift_bridgeObjectRelease(v29);
  uint64_t v75 = v30;
  uint64_t v76 = v32;
  uint64_t v73 = 8218235LL;
  unint64_t v74 = 0xE300000000000000LL;
  uint64_t v71 = 7496556LL;
  unint64_t v72 = 0xE300000000000000LL;
  uint64_t v33 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v73,  &v71,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v19,  v19,  v19);
  uint64_t v35 = v34;
  swift_bridgeObjectRelease(v32);
  URL.init(string:)(v33);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v35);
  uint64_t v37 = v67;
  uint64_t v36 = v68;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v10, 1LL, v68) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v66, v10, v36);
    uint64_t v47 = v17(v70, a3);
    uint64_t v49 = v48;
    uint64_t v75 = v47;
    uint64_t v76 = v48;
    uint64_t v73 = 8218235LL;
    unint64_t v74 = 0xE300000000000000LL;
    uint64_t v71 = 7496556LL;
    unint64_t v72 = 0xE300000000000000LL;
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v73,  &v71,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v19,  v19,  v19);
    uint64_t v51 = v50;
    swift_bridgeObjectRelease(v49);
    id v46 = [objc_allocWithZone(SAUIImageResource) init];
    uint64_t v52 = v63;
    uint64_t v53 = UUID.init()(v46);
    UUID.uuidString.getter(v53);
    uint64_t v55 = v54;
    (*(void (**)(char *, uint64_t))(v64 + 8))(v52, v65);
    NSString v56 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v55);
    [v46 setAceId:v56];

    [v46 setScaleFactor:1.0];
    uint64_t v57 = v66;
    URL._bridgeToObjectiveC()(v58);
    NSString v60 = v59;
    [v46 setResourceUrl:v59];

    [v46 setPointWidth:711.11];
    [v46 setPointHeight:400.0];
    [v46 setPixelWidth:711.11];
    [v46 setPixelHeight:400.0];
    NSString v61 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v51);
    [v46 setUrlFormatString:v61];

    (*(void (**)(char *, uint64_t))(v37 + 8))(v57, v36);
    return v46;
  }

  outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for URL?);
  if (one-time initialization token for videoSnippet != -1) {
    swift_once(&one-time initialization token for videoSnippet, one-time initialization function for videoSnippet);
  }
  uint64_t v38 = type metadata accessor for Logger(0LL);
  uint64_t v39 = __swift_project_value_buffer(v38, (uint64_t)static Logger.videoSnippet);
  uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
  os_log_type_t v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v42 = 0;
    uint64_t v43 = "Cover art image URL string was not a valid URL";
LABEL_13:
    _os_log_impl(&dword_0, v40, v41, v43, v42, 2u);
    swift_slowDealloc(v42, -1LL, -1LL);
  }

id closure #2 in static VideoSnippetUtils.makeDynamicURLImageResource(for:)(uint64_t a1, void *a2)
{
  uint64_t v3 = type metadata accessor for Searchfoundation_GraphicalFloat(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  unint64_t v16 = a2;
  uint64_t v7 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Searchfoundation_GraphicalFloat and conformance Searchfoundation_GraphicalFloat,  v6,  (uint64_t)&protocol conformance descriptor for Searchfoundation_GraphicalFloat);
  static Message.with(_:)( partial apply for closure #1 in closure #2 in static VideoSnippetUtils.makeDynamicURLImageResource(for:),  v15,  v3,  v7);
  Searchfoundation_DynamicURLImageResource.pixelWidth.setter(v5);
  uint64_t v14 = a2;
  static Message.with(_:)( partial apply for closure #2 in closure #2 in static VideoSnippetUtils.makeDynamicURLImageResource(for:),  v13,  v3,  v7);
  Searchfoundation_DynamicURLImageResource.pixelHeight.setter(v5);
  id result = [a2 urlFormatString];
  if (result)
  {
    uint64_t v9 = result;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    uint64_t v12 = v11;

    Searchfoundation_DynamicURLImageResource.formatURL.setter(v10, v12);
    return (id)Searchfoundation_DynamicURLImageResource.supportsResizing.setter(1LL);
  }

  else
  {
    __break(1u);
  }

  return result;
}

id specialized static VideoSnippetUtils.makeContentRatingTemplate(ratingSystem:ratingValue:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v10 = 0LL;
  if (a2 && a4)
  {
    id v10 = [objc_allocWithZone(SASTTemplateContentRating) init];
    uint64_t v11 = UUID.init()();
    UUID.uuidString.getter(v11);
    uint64_t v13 = v12;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v13);
    [v10 setAceId:v14];

    NSString v15 = String._bridgeToObjectiveC()();
    [v10 setValue:v15];

    NSString v16 = String._bridgeToObjectiveC()();
    [v10 setSystem:v16];
  }

  return v10;
}

uint64_t specialized static VideoSnippetUtils.makeDisambiguationList(for:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  id v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void *)(a1 + 16);
  if (!v11)
  {
    if (one-time initialization token for videoSnippet != -1) {
      swift_once(&one-time initialization token for videoSnippet, one-time initialization function for videoSnippet);
    }
    uint64_t v40 = __swift_project_value_buffer(v2, (uint64_t)static Logger.videoSnippet);
    os_log_type_t v41 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl(&dword_0, v41, v42, "No TV or movie objects for disambiguation list", v43, 2u);
      swift_slowDealloc(v43, -1LL, -1LL);
    }

    return 0LL;
  }

  uint64_t v47 = v8;
  uint64_t v48 = v5;
  uint64_t v49 = v3;
  uint64_t v50 = v2;
  uint64_t v52 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v12 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_TvOrMovieObject(0LL) - 8);
  uint64_t v13 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  uint64_t v14 = *(void *)(v12 + 72);
  swift_bridgeObjectRetain(a1);
  do
  {
    closure #1 in static VideoSnippetUtils.makeDisambiguationList(for:)(v13, &v51);
    uint64_t v17 = v51;
    if (v51)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v16);
      unint64_t v19 = *(void *)((char *)&dword_10 + (v52 & 0xFFFFFFFFFFFFFF8LL));
      unint64_t v18 = *(void *)((char *)&dword_18 + (v52 & 0xFFFFFFFFFFFFFF8LL));
      if (v19 >= v18 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1LL);
      }
      uint64_t v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v17);
      specialized Array._endMutation()(v15);
    }

    v13 += v14;
    --v11;
  }

  while (v11);
  swift_bridgeObjectRelease(a1);
  uint64_t v20 = v52;
  id v21 = [objc_allocWithZone(SAUIDisambiguationList) init];
  uint64_t v22 = UUID.init()(v21);
  UUID.uuidString.getter(v22);
  uint64_t v24 = v23;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v47);
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v24);
  [v21 setAceId:v25];

  uint64_t v26 = type metadata accessor for SABaseCommand( 0LL,  (unint64_t *)&lazy cache variable for type metadata for SAUIListItem,  &OBJC_CLASS___SAUIListItem_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v20);
  [v21 setItems:isa];

  if (one-time initialization token for videoSnippet != -1) {
    swift_once(&one-time initialization token for videoSnippet, one-time initialization function for videoSnippet);
  }
  uint64_t v28 = v50;
  uint64_t v29 = __swift_project_value_buffer(v50, (uint64_t)static Logger.videoSnippet);
  uint64_t v31 = v48;
  uint64_t v30 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v48, v29, v28);
  id v32 = v21;
  uint64_t v33 = (void *)Logger.logObject.getter(v32);
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled((os_log_t)v33, v34))
  {

    uint64_t v33 = v32;
LABEL_21:

    (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v28);
    return (uint64_t)v32;
  }

  uint64_t v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  *(_DWORD *)uint64_t v35 = 134217984;
  id v36 = [v32 items];
  if (v36)
  {
    uint64_t v37 = v36;
    uint64_t v38 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v36, v26);

    if ((unint64_t)v38 >> 62)
    {
      if (v38 < 0) {
        uint64_t v45 = v38;
      }
      else {
        uint64_t v45 = v38 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v38);
      uint64_t v39 = _CocoaArrayWrapper.endIndex.getter(v45);

      swift_bridgeObjectRelease(v38);
    }

    else
    {
      uint64_t v39 = *(void *)((char *)&dword_10 + (v38 & 0xFFFFFFFFFFFFF8LL));
    }

    swift_bridgeObjectRelease(v38);
    uint64_t v52 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);

    _os_log_impl( &dword_0,  (os_log_t)v33,  v34,  "Generated disambiguation list for TV or movie objects with %ld items",  v35,  0xCu);
    swift_slowDealloc(v35, -1LL, -1LL);
    goto LABEL_21;
  }

  __break(1u);
  swift_bridgeObjectRelease(v35);
  uint64_t result = swift_bridgeObjectRelease(v52);
  __break(1u);
  return result;
}

id specialized static VideoSnippetUtils.makeContentDetailPage(image:appURL:utsURL:canonicalID:title:contentType:index:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v45 = a6;
  uint64_t v46 = a7;
  uint64_t v48 = a4;
  uint64_t v49 = a1;
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v47 = a12;
  v42[1] = a10;
  __int128 v42[2] = a11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v14 = __chkstk_darwin(v13);
  v42[0] = (char *)v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v42 - v16;
  uint64_t v18 = type metadata accessor for UUID(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  id v21 = (char *)v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v22 = [objc_allocWithZone(SAVCSContentDetailPage) init];
  uint64_t v23 = UUID.init()(v22);
  UUID.uuidString.getter(v23);
  uint64_t v25 = v24;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v25);
  [v22 setAceId:v26];

  NSString v27 = String._bridgeToObjectiveC()();
  [v22 setLoadingText:v27];

  NSString v28 = String._bridgeToObjectiveC()();
  [v22 setContentType:v28];

  URL.init(string:)(v43);
  uint64_t v29 = type metadata accessor for URL(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
  uint64_t v33 = 0LL;
  if (v31(v17, 1LL, v29) != 1)
  {
    URL._bridgeToObjectiveC()(v32);
    uint64_t v33 = v34;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v29);
  }

  [v22 setUrl:v33];

  NSString v35 = String._bridgeToObjectiveC()();
  [v22 setUtsId:v35];

  [v22 setResultIndex:v47];
  uint64_t v36 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000LL) == 0) {
    uint64_t v36 = v48 & 0xFFFFFFFFFFFFLL;
  }
  if (v36)
  {
    uint64_t v37 = (char *)v42[0];
    URL.init(string:)(v48);
    if (v31(v37, 1LL, v29) == 1)
    {
      uint64_t v39 = 0LL;
    }

    else
    {
      URL._bridgeToObjectiveC()(v38);
      uint64_t v39 = v40;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v37, v29);
    }

    [v22 setUtsSearchUrl:v39];
  }

  if (v49) {
    objc_msgSend(v22, "setImage:");
  }
  return v22;
}

id specialized Apple_Parsec_Siri_V2alpha_TvOrMovieObject.withSnippetObject<A>(_:)( uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v99 = a3;
  uint64_t v98 = a2;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_TvOrMovieObject(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v93 = v4;
  uint64_t v94 = v5;
  __chkstk_darwin(v4);
  unint64_t v91 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_TvObject(0LL);
  uint64_t v100 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  id v10 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v88 - v11;
  uint64_t v92 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MovieObject(0LL);
  uint64_t v97 = *(void *)(v92 - 8);
  uint64_t v13 = __chkstk_darwin(v92);
  uint64_t v96 = (uint64_t)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  NSString v95 = (char *)&v88 - v15;
  uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
  uint64_t v16 = __chkstk_darwin(v90);
  uint64_t v18 = (char *)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  id v21 = (char *)&v88 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v88 - v23;
  Apple_Parsec_Siri_V2alpha_TvOrMovieObject.object.getter(v22);
  uint64_t v25 = type metadata accessor for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1LL, v25) != 1)
  {
    Class v89 = v24;
    outlined init with copy of IdentifiedUser?( (uint64_t)v24,  (uint64_t)v21,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
    int v33 = (*(uint64_t (**)(char *, uint64_t))(v26 + 88))(v21, v25);
    if (v33 == enum case for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object.tv(_:))
    {
      (*(void (**)(char *, uint64_t))(v26 + 96))(v21, v25);
      uint64_t v34 = v100;
      (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v12, v21, v7);
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v10, v12, v7);
      id v35 = specialized static VideoSnippetUtils.makeSixteenByNineImage<A>(for:)( (uint64_t)v10,  (uint64_t (*)(void))&type metadata accessor for Tvpb_CoverArt,  &demangling cache variable for type metadata for Tvpb_CoverArt?,  (uint64_t (*)(uint64_t))Apple_Parsec_Siri_V2alpha_TvObject.sixteenByNineImages.getter,  (uint64_t (*)(uint64_t))&Tvpb_CoverArt.url.getter);
      uint64_t v36 = Apple_Parsec_Siri_V2alpha_TvObject.url.getter();
      uint64_t v96 = v37;
      uint64_t v97 = v36;
      v38._uint64_t countAndFlagsBits = Apple_Parsec_Siri_V2alpha_TvObject.canonicalID.getter();
      object = v38._object;
      uint64_t v101 = 0x3A636D753A6E7275LL;
      unint64_t v102 = 0xE800000000000000LL;
      String.append(_:)(v38);
      uint64_t v40 = swift_bridgeObjectRelease(object);
      uint64_t v41 = v102;
      NSString v95 = (char *)v101;
      uint64_t v42 = Apple_Parsec_Siri_V2alpha_TvObject.title.getter(v40);
      uint64_t v44 = v43;
      uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(SAVCSContentTypeShowValue);
      uint64_t v47 = v46;
      uint64_t v48 = v96;
      id v31 = specialized static VideoSnippetUtils.makeContentDetailPage(image:appURL:utsURL:canonicalID:title:contentType:index:)( (uint64_t)v35,  v97,  v96,  v98,  v99,  (uint64_t)v95,  v41,  v42,  v44,  v45,  v46,  -1LL);
      swift_bridgeObjectRelease(v48);
      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease(v44);
      swift_bridgeObjectRelease(v47);

      uint64_t v49 = *(void (**)(char *, uint64_t))(v100 + 8);
      v49(v12, v7);
      uint64_t v50 = (uint64_t)v10;
      uint64_t v51 = v7;
    }

    else
    {
      if (v33 != enum case for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object.movie(_:))
      {
        (*(void (**)(char *, uint64_t))(v26 + 8))(v21, v25);
        if (one-time initialization token for videoSnippet != -1) {
          swift_once(&one-time initialization token for videoSnippet, one-time initialization function for videoSnippet);
        }
        uint64_t v69 = type metadata accessor for Logger(0LL);
        uint64_t v70 = __swift_project_value_buffer(v69, (uint64_t)static Logger.videoSnippet);
        uint64_t v72 = v93;
        uint64_t v71 = v94;
        uint64_t v73 = v91;
        uint64_t v74 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v94 + 16))(v91, a1, v93);
        id v31 = (id)v70;
        uint64_t v75 = (os_log_s *)Logger.logObject.getter(v74);
        os_log_type_t v76 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v75, v76))
        {
          uint64_t v77 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          id v31 = v73;
          uint64_t v78 = swift_slowAlloc(32LL, -1LL);
          uint64_t v101 = v78;
          *(_DWORD *)uint64_t v77 = 136315138;
          Apple_Parsec_Siri_V2alpha_TvOrMovieObject.object.getter(v78);
          uint64_t v79 = String.init<A>(describing:)(v18, v90);
          unint64_t v81 = v80;
          uint64_t v103 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v80, &v101);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104);
          swift_bridgeObjectRelease(v81);
          (*(void (**)(id, uint64_t))(v94 + 8))(v31, v72);
          _os_log_impl(&dword_0, v75, v76, "Unknown or future payload in a TV or movie object: %s", v77, 0xCu);
          swift_arrayDestroy(v78, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v78, -1LL, -1LL);
          swift_slowDealloc(v77, -1LL, -1LL);
        }

        else
        {
          (*(void (**)(char *, uint64_t))(v71 + 8))(v73, v72);
        }

        uint64_t v24 = v89;
        goto LABEL_18;
      }

      (*(void (**)(char *, uint64_t))(v26 + 96))(v21, v25);
      uint64_t v52 = v97;
      uint64_t v53 = (uint64_t)v95;
      uint64_t v54 = v92;
      (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v95, v21, v92);
      uint64_t v55 = v96;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v96, v53, v54);
      id v56 = specialized static VideoSnippetUtils.makeSixteenByNineImage<A>(for:)( v55,  (uint64_t (*)(void))&type metadata accessor for Moviespb_CoverArt,  (uint64_t *)&demangling cache variable for type metadata for Moviespb_CoverArt?,  (uint64_t (*)(uint64_t))Apple_Parsec_Siri_V2alpha_MovieObject.sixteenByNineImages.getter,  (uint64_t (*)(uint64_t))&Moviespb_CoverArt.url.getter);
      uint64_t v57 = Apple_Parsec_Siri_V2alpha_MovieObject.url.getter();
      uint64_t v59 = v58;
      v60._uint64_t countAndFlagsBits = Apple_Parsec_Siri_V2alpha_MovieObject.canonicalID.getter();
      NSString v61 = v60._object;
      uint64_t v101 = 0x3A636D753A6E7275LL;
      unint64_t v102 = 0xE800000000000000LL;
      String.append(_:)(v60);
      uint64_t v62 = swift_bridgeObjectRelease(v61);
      uint64_t v63 = v101;
      uint64_t v64 = v102;
      uint64_t v65 = (void *)Apple_Parsec_Siri_V2alpha_MovieObject.titles.getter(v62);
      uint64_t v66 = v65;
      if (v65[2])
      {
        uint64_t v67 = v65[4];
        uint64_t v68 = v65[5];
        swift_bridgeObjectRetain(v68);
      }

      else
      {
        uint64_t v67 = 0LL;
        uint64_t v68 = 0xE000000000000000LL;
      }

      swift_bridgeObjectRelease(v66);
      uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(SAVCSContentTypeMovieValue);
      uint64_t v86 = v85;
      id v31 = specialized static VideoSnippetUtils.makeContentDetailPage(image:appURL:utsURL:canonicalID:title:contentType:index:)( (uint64_t)v56,  v57,  v59,  v98,  v99,  v63,  v64,  v67,  v68,  v84,  v85,  -1LL);
      swift_bridgeObjectRelease(v59);
      swift_bridgeObjectRelease(v64);
      swift_bridgeObjectRelease(v68);
      swift_bridgeObjectRelease(v86);

      uint64_t v49 = *(void (**)(char *, uint64_t))(v97 + 8);
      v49(v95, v54);
      uint64_t v50 = v96;
      uint64_t v51 = v54;
    }

    v49((char *)v50, v51);
    outlined destroy of Any?( (uint64_t)v89,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
    return v31;
  }

  if (one-time initialization token for videoSnippet != -1) {
    swift_once(&one-time initialization token for videoSnippet, one-time initialization function for videoSnippet);
  }
  uint64_t v27 = type metadata accessor for Logger(0LL);
  uint64_t v28 = __swift_project_value_buffer(v27, (uint64_t)static Logger.videoSnippet);
  uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
  os_log_type_t v30 = static os_log_type_t.error.getter();
  id v31 = (id)v30;
  if (os_log_type_enabled(v29, v30))
  {
    id v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v32 = 0;
    _os_log_impl(&dword_0, v29, (os_log_type_t)v31, "No TV or movie payload in a TV or movie object", v32, 2u);
    swift_slowDealloc(v32, -1LL, -1LL);
  }

LABEL_18:
  unint64_t v82 = lazy protocol witness table accessor for type VideoSnippetError and conformance VideoSnippetError();
  uint64_t v83 = swift_allocError(&type metadata for VideoSnippetError, v82, 0LL, 0LL);
  swift_willThrow(v83);
  outlined destroy of Any?( (uint64_t)v24,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
  return v31;
}

void *specialized Sequence.compactMap<A>(_:)( uint64_t a1, uint64_t (*a2)(uint64_t, char *), uint64_t a3)
{
  uint64_t v4 = v3;
  id v32 = a2;
  uint64_t v33 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Apple_Parsec_Siri_V2alpha_TvOrMovieObject));
  uint64_t v7 = __chkstk_darwin(v6);
  id v31 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  id v10 = (void *)((char *)v27 - v9);
  uint64_t v11 = _swiftEmptyArrayStorage;
  unint64_t v34 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v12 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  uint64_t v30 = v12;
  if (v12)
  {
    v27[1] = v4;
    uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_TvOrMovieObject(0LL);
    uint64_t v14 = 0LL;
    uint64_t v15 = *(void *)(v13 - 8);
    unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    v27[0] = a1;
    uint64_t v17 = a1 + v16;
    uint64_t v18 = *(void *)(v15 + 72);
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    uint64_t v29 = v18;
    do
    {
      uint64_t v20 = &v31[*(int *)(v6 + 48)];
      v28(v20, v17, v13);
      id v21 = (char *)v10 + *(int *)(v6 + 48);
      *id v10 = v14;
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v21, v20, v13);
      uint64_t v22 = v32(v14, v21);
      uint64_t v23 = outlined destroy of Any?( (uint64_t)v10,  &demangling cache variable for type metadata for (offset: Int, element: Apple_Parsec_Siri_V2alpha_TvOrMovieObject));
      if (v22)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
        unint64_t v25 = *(void *)((char *)&dword_10 + (v34 & 0xFFFFFFFFFFFFFF8LL));
        unint64_t v24 = *(void *)((char *)&dword_18 + (v34 & 0xFFFFFFFFFFFFFF8LL));
        if (v25 >= v24 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1LL);
        }
        uint64_t v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v22);
        specialized Array._endMutation()(v19);
      }

      ++v14;
      v17 += v29;
    }

    while (v30 != v14);
    uint64_t v11 = (void *)v34;
    a1 = v27[0];
  }

  swift_bridgeObjectRelease(a1);
  return v11;
}

uint64_t specialized static VideoSnippetUtils.makeContentCabinet(for:utsURL:switchProfileBuilderParams:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v65 = a2;
  uint64_t v66 = a3;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v68 = *(void *)(v8 - 8);
  uint64_t v69 = v8;
  __chkstk_darwin(v8);
  uint64_t v70 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v73 = a2;
  uint64_t v74 = a3;
  uint64_t v75 = a4;
  uint64_t v17 = swift_bridgeObjectRetain(a1);
  uint64_t v18 = specialized Sequence.compactMap<A>(_:)( v17,  (uint64_t (*)(uint64_t, char *))partial apply for closure #1 in static VideoSnippetUtils.makeContentButtons(for:utsURL:switchProfileBuilderParams:),  (uint64_t)v72);
  swift_bridgeObjectRelease(a1);
  id v19 = [objc_allocWithZone(SAVCSContentCabinet) init];
  uint64_t v20 = UUID.init()(v19);
  UUID.uuidString.getter(v20);
  uint64_t v22 = v21;
  uint64_t v23 = *(void (**)(char *, uint64_t))(v14 + 8);
  v23(v16, v13);
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v22);
  [v19 setAceId:v24];
  id v67 = v19;

  id v25 = [objc_allocWithZone(SAVCSContentShelf) init];
  uint64_t v26 = UUID.init()(v25);
  UUID.uuidString.getter(v26);
  uint64_t v28 = v27;
  v23(v16, v13);
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v28);
  [v25 setAceId:v29];

  type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAVCSContentButton,  &OBJC_CLASS___SAVCSContentButton_ptr);
  uint64_t v71 = v18;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v25 setContentHead:isa];

  URL.init(string:)(v65);
  uint64_t v31 = type metadata accessor for URL(0LL);
  uint64_t v32 = *(void *)(v31 - 8);
  unint64_t v34 = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v12, 1LL, v31) != 1)
  {
    URL._bridgeToObjectiveC()(v33);
    unint64_t v34 = v35;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v31);
  }

  [v25 setUrl:v34];

  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v37 = swift_allocObject(v36, 40LL, 7LL);
  *(_OWORD *)(v37 + 16) = xmmword_7D060;
  *(void *)(v37 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v25;
  uint64_t v76 = v37;
  specialized Array._endMutation()(v37);
  uint64_t v38 = v76;
  uint64_t v39 = type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAVCSContentShelf,  &OBJC_CLASS___SAVCSContentShelf_ptr);
  id v40 = v25;
  Class v41 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v38);
  id v42 = v67;
  [v67 setShelves:v41];

  if (one-time initialization token for videoSnippet != -1) {
    swift_once(&one-time initialization token for videoSnippet, one-time initialization function for videoSnippet);
  }
  uint64_t v43 = v69;
  uint64_t v44 = __swift_project_value_buffer(v69, (uint64_t)static Logger.videoSnippet);
  uint64_t v45 = v68;
  uint64_t v46 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v70, v44, v43);
  id v47 = v42;
  uint64_t v48 = v71;
  uint64_t v49 = swift_bridgeObjectRetain(v71);
  uint64_t v50 = (void *)Logger.logObject.getter(v49);
  os_log_type_t v51 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled((os_log_t)v50, v51))
  {

    swift_bridgeObjectRelease_n(v48, 2LL);
LABEL_13:
    (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v43);
    return (uint64_t)v47;
  }

  id v67 = v40;
  uint64_t v52 = swift_slowAlloc(22LL, -1LL);
  *(_DWORD *)uint64_t v52 = 134218240;
  id v53 = [v47 shelves];
  if (v53)
  {
    uint64_t v54 = v53;
    uint64_t v55 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v53, v39);

    if ((unint64_t)v55 >> 62)
    {
      if (v55 < 0) {
        uint64_t v60 = v55;
      }
      else {
        uint64_t v60 = v55 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v55);
      uint64_t v61 = v60;
      uint64_t v46 = v70;
      uint64_t v56 = _CocoaArrayWrapper.endIndex.getter(v61);

      swift_bridgeObjectRelease(v55);
    }

    else
    {
      uint64_t v56 = *(void *)((char *)&dword_10 + (v55 & 0xFFFFFFFFFFFFF8LL));
    }

    uint64_t v57 = (uint64_t)v71;
    swift_bridgeObjectRelease(v55);
    uint64_t v76 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);

    *(_WORD *)(v52 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2048;
    if ((unint64_t)v57 >> 62)
    {
      if (v57 < 0) {
        uint64_t v62 = v57;
      }
      else {
        uint64_t v62 = v57 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v57);
      uint64_t v63 = v62;
      uint64_t v46 = v70;
      uint64_t v58 = _CocoaArrayWrapper.endIndex.getter(v63);
      swift_bridgeObjectRelease(v57);
    }

    else
    {
      uint64_t v58 = *(void *)((char *)&dword_10 + (v57 & 0xFFFFFFFFFFFFF8LL));
    }

    swift_bridgeObjectRelease(v57);
    uint64_t v76 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
    swift_bridgeObjectRelease(v57);
    _os_log_impl( &dword_0,  (os_log_t)v50,  v51,  "Built content cabinet (%ld shelves, %ld buttons) for TV or movie objects",  (uint8_t *)v52,  0x16u);
    swift_slowDealloc(v52, -1LL, -1LL);

    goto LABEL_13;
  }

  uint64_t result = swift_bridgeObjectRelease(v71);
  __break(1u);
  return result;
}

void *specialized static VideoSnippetUtils.makeResultSnippets(for:switchProfileBuilderParams:)( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_TvOrMovieObject(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = Apple_Parsec_Siri_V2alpha_VideoObjectComponent.tvOrMovieObject.getter(v5);
  uint64_t v9 = v8;
  if (!*(void *)(v8 + 16))
  {
    swift_bridgeObjectRelease(v8);
    if (one-time initialization token for videoSnippet != -1) {
      swift_once(&one-time initialization token for videoSnippet, one-time initialization function for videoSnippet);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = __swift_project_value_buffer(v14, (uint64_t)static Logger.videoSnippet);
    unint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_0, v16, v17, "No TV or movie objects in component; cannot build result snippets", v18, 2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    return _swiftEmptyArrayStorage;
  }

  uint64_t v10 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v4 + 16))( v7,  v8 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)),  v3);
  uint64_t v12 = Apple_Parsec_Siri_V2alpha_VideoObjectComponent.relativeUtsSearchURL.getter(v10);
  unint64_t v13 = v11;
  if (*(void *)(v9 + 16) != 1LL)
  {
    uint64_t v19 = specialized static VideoSnippetUtils.makeContentCabinet(for:utsURL:switchProfileBuilderParams:)( v9,  v12,  v11,  a2);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v9);
    if (v19)
    {
      if (one-time initialization token for videoSnippet != -1) {
        swift_once(&one-time initialization token for videoSnippet, one-time initialization function for videoSnippet);
      }
      uint64_t v20 = type metadata accessor for Logger(0LL);
      uint64_t v21 = __swift_project_value_buffer(v20, (uint64_t)static Logger.videoSnippet);
      uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
      os_log_type_t v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        NSString v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)NSString v24 = 0;
        _os_log_impl(&dword_0, v22, v23, "Built content cabinet for multiple TV or movie objects", v24, 2u);
        swift_slowDealloc(v24, -1LL, -1LL);
      }

      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v26 = swift_allocObject(v25, 40LL, 7LL);
      *(_OWORD *)(v26 + 16) = xmmword_7D060;
      *(void *)(v26 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v19;
      goto LABEL_20;
    }

    if (one-time initialization token for videoSnippet != -1) {
      swift_once(&one-time initialization token for videoSnippet, one-time initialization function for videoSnippet);
    }
    uint64_t v35 = type metadata accessor for Logger(0LL);
    uint64_t v36 = __swift_project_value_buffer(v35, (uint64_t)static Logger.videoSnippet);
    uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl(&dword_0, v37, v38, "Could not construct content cabinet for TV or movie objects", v39, 2u);
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    return _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRetain(v13);
  id v27 = specialized Apple_Parsec_Siri_V2alpha_TvOrMovieObject.withSnippetObject<A>(_:)((uint64_t)v7, v12, v13);
  swift_bridgeObjectRelease_n(v13, 2LL);
  if (one-time initialization token for videoSnippet != -1) {
    swift_once(&one-time initialization token for videoSnippet, one-time initialization function for videoSnippet);
  }
  uint64_t v28 = type metadata accessor for Logger(0LL);
  uint64_t v29 = __swift_project_value_buffer(v28, (uint64_t)static Logger.videoSnippet);
  uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v32 = 0;
    _os_log_impl(&dword_0, v30, v31, "Built detail page for single TV or movie object", v32, 2u);
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v26 = swift_allocObject(v33, 40LL, 7LL);
  *(_OWORD *)(v26 + 16) = xmmword_7D060;
  *(void *)(v26 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v27;
LABEL_20:
  uint64_t v42 = v26;
  specialized Array._endMutation()(v26);
  uint64_t v34 = v42;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return (void *)v34;
}

void *specialized static VideoSnippetUtils.makeVideoSnippets(for:switchProfileBuilderParams:)( uint64_t a1, uint64_t a2)
{
  uint64_t v85 = a2;
  uint64_t v90 = a1;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoObjectComponent.VideoUseCase(0LL);
  uint64_t v87 = *(void *)(v2 - 8);
  uint64_t v88 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v86 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v84 = (char *)&v79 - v5;
  uint64_t v89 = type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoObjectComponent(0LL);
  uint64_t v6 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  uint64_t v8 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeviceClass?);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DeviceClass(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v79 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v79 - v20;
  uint64_t v22 = type metadata accessor for SiriEnvironment(0LL);
  uint64_t v23 = static SiriEnvironment.default.getter(v22);
  uint64_t v24 = SiriEnvironment.currentDevice.getter();
  uint64_t v25 = swift_release(v23);
  dispatch thunk of CurrentDevice.deviceClass.getter(v25);
  swift_release(v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
  {
    outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for DeviceClass?);
    if (one-time initialization token for videoSnippet != -1) {
      swift_once(&one-time initialization token for videoSnippet, one-time initialization function for videoSnippet);
    }
    uint64_t v26 = type metadata accessor for Logger(0LL);
    uint64_t v27 = __swift_project_value_buffer(v26, (uint64_t)static Logger.videoSnippet);
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl( &dword_0,  v28,  v29,  "Not generating video snippets for video object component; cannot determine device class",
        v30,
        2u);
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    return _swiftEmptyArrayStorage;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v21, v11, v12);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v19, enum case for DeviceClass.appleTV(_:), v12);
  char v31 = static DeviceClass.== infix(_:_:)(v21, v19);
  uint64_t v32 = *(void (**)(char *, uint64_t))(v13 + 8);
  v32(v19, v12);
  uint64_t v33 = v21;
  if ((v31 & 1) == 0)
  {
    if (one-time initialization token for videoSnippet != -1) {
      swift_once(&one-time initialization token for videoSnippet, one-time initialization function for videoSnippet);
    }
    uint64_t v52 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v52, (uint64_t)static Logger.videoSnippet);
    id v53 = *(uint64_t (**)(char *, char *, uint64_t))(v13 + 16);
    uint64_t v54 = v53(v16, v21, v12);
    uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
    os_log_type_t v56 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = swift_slowAlloc(12LL, -1LL);
      uint64_t v83 = v32;
      uint64_t v58 = (uint8_t *)v57;
      uint64_t v59 = swift_slowAlloc(32LL, -1LL);
      uint64_t v92 = (void *)v59;
      unint64_t v82 = v33;
      *(_DWORD *)uint64_t v58 = 136315138;
      v53(v19, v16, v12);
      uint64_t v60 = String.init<A>(describing:)(v19, v12);
      unint64_t v62 = v61;
      uint64_t v91 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, (uint64_t *)&v92);
      uint64_t v33 = v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);
      swift_bridgeObjectRelease(v62);
      v83(v16, v12);
      _os_log_impl( &dword_0,  v55,  v56,  "Not generating video snippets for video object component on device class: %s",  v58,  0xCu);
      swift_arrayDestroy(v59, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1LL, -1LL);
      uint64_t v63 = v58;
      uint64_t v32 = v83;
      swift_slowDealloc(v63, -1LL, -1LL);
    }

    else
    {
      v32(v16, v12);
    }

    v32(v33, v12);
    return _swiftEmptyArrayStorage;
  }

  if (one-time initialization token for videoSnippet != -1) {
    swift_once(&one-time initialization token for videoSnippet, one-time initialization function for videoSnippet);
  }
  uint64_t v34 = type metadata accessor for Logger(0LL);
  uint64_t v35 = __swift_project_value_buffer(v34, (uint64_t)static Logger.videoSnippet);
  uint64_t v37 = v89;
  uint64_t v36 = v90;
  uint64_t v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v90, v89);
  uint64_t v81 = v35;
  uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
  os_log_type_t v40 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = swift_slowAlloc(12LL, -1LL);
    uint64_t v83 = v32;
    uint64_t v42 = (uint8_t *)v41;
    uint64_t v43 = swift_slowAlloc(32LL, -1LL);
    uint64_t v80 = v43;
    uint64_t v92 = (void *)v43;
    unint64_t v82 = v33;
    *(_DWORD *)uint64_t v42 = 136315138;
    uint64_t v79 = v42 + 4;
    uint64_t v44 = v84;
    Apple_Parsec_Siri_V2alpha_VideoObjectComponent.videoUseCase.getter(v43);
    uint64_t v45 = v88;
    uint64_t v46 = String.init<A>(describing:)(v44, v88);
    unint64_t v48 = v47;
    uint64_t v91 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, (uint64_t *)&v92);
    uint64_t v33 = v82;
    uint64_t v36 = v90;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);
    swift_bridgeObjectRelease(v48);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v89);
    _os_log_impl(&dword_0, v39, v40, "Building video snippets for use case: %s", v42, 0xCu);
    uint64_t v49 = v80;
    swift_arrayDestroy(v80, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1LL, -1LL);
    uint64_t v50 = v42;
    uint64_t v32 = v83;
    swift_slowDealloc(v50, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v37);

    uint64_t v45 = v88;
  }

  uint64_t v64 = v86;
  Apple_Parsec_Siri_V2alpha_VideoObjectComponent.videoUseCase.getter(v51);
  uint64_t v65 = v87;
  uint64_t v66 = (*(uint64_t (**)(char *, uint64_t))(v87 + 88))(v64, v45);
  if ((_DWORD)v66 != enum case for Apple_Parsec_Siri_V2alpha_VideoObjectComponent.VideoUseCase.disambiguate(_:))
  {
    uint64_t v73 = specialized static VideoSnippetUtils.makeResultSnippets(for:switchProfileBuilderParams:)(v36, v85);
    v32(v33, v12);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v64, v45);
    return v73;
  }

  id v67 = v33;
  uint64_t v68 = Apple_Parsec_Siri_V2alpha_VideoObjectComponent.tvOrMovieObject.getter(v66);
  uint64_t v69 = specialized static VideoSnippetUtils.makeDisambiguationList(for:)(v68);
  uint64_t v70 = swift_bridgeObjectRelease(v68);
  if (!v69)
  {
    uint64_t v75 = v32;
    uint64_t v76 = (os_log_s *)Logger.logObject.getter(v70);
    os_log_type_t v77 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v76, v77))
    {
      uint64_t v78 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v78 = 0;
      _os_log_impl(&dword_0, v76, v77, "Could not build disambiguation list for TV or movie objects", v78, 2u);
      swift_slowDealloc(v78, -1LL, -1LL);
    }

    v75(v67, v12);
    return _swiftEmptyArrayStorage;
  }

  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v72 = swift_allocObject(v71, 40LL, 7LL);
  *(_OWORD *)(v72 + 16) = xmmword_7D060;
  *(void *)(v72 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v69;
  uint64_t v92 = (void *)v72;
  specialized Array._endMutation()(v72);
  uint64_t v73 = v92;
  v32(v67, v12);
  return v73;
}

_UNKNOWN **associated type witness table accessor for VideoSnippetObject.CoverArtType : VideoSnippetCoverArt in Apple_Parsec_Siri_V2alpha_MovieObject()
{
  return &protocol witness table for Moviespb_CoverArt;
}

_UNKNOWN **associated type witness table accessor for VideoSnippetObject.CoverArtType : VideoSnippetCoverArt in Apple_Parsec_Siri_V2alpha_TvObject()
{
  return &protocol witness table for Tvpb_CoverArt;
}

unint64_t lazy protocol witness table accessor for type VideoSnippetError and conformance VideoSnippetError()
{
  unint64_t result = lazy protocol witness table cache variable for type VideoSnippetError and conformance VideoSnippetError;
  if (!lazy protocol witness table cache variable for type VideoSnippetError and conformance VideoSnippetError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for VideoSnippetError,  &type metadata for VideoSnippetError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type VideoSnippetError and conformance VideoSnippetError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type VideoSnippetError and conformance VideoSnippetError;
  if (!lazy protocol witness table cache variable for type VideoSnippetError and conformance VideoSnippetError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for VideoSnippetError,  &type metadata for VideoSnippetError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type VideoSnippetError and conformance VideoSnippetError);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for VideoSnippetError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for VideoSnippetError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_3E5B8 + 4 * byte_7DF70[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_3E5D8 + 4 * byte_7DF75[v4]))();
  }
}

_BYTE *sub_3E5B8(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_3E5D8(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_3E5E0(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_3E5E8(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_3E5F0(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_3E5F8(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for VideoSnippetError()
{
  return &type metadata for VideoSnippetError;
}

ValueMetadata *type metadata accessor for VideoSnippetUtils()
{
  return &type metadata for VideoSnippetUtils;
}

id partial apply for closure #2 in static VideoSnippetUtils.makeDynamicURLImageResource(for:)(uint64_t a1)
{
  return closure #2 in static VideoSnippetUtils.makeDynamicURLImageResource(for:)(a1, *(void **)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #2 in static VideoSnippetUtils.makeDynamicURLImageResource(for:)( uint64_t a1)
{
  return partial apply for closure #1 in closure #2 in static VideoSnippetUtils.makeDynamicURLImageResource(for:)( a1,  (SEL *)&selRef_pixelWidth);
}

uint64_t partial apply for closure #2 in closure #2 in static VideoSnippetUtils.makeDynamicURLImageResource(for:)( uint64_t a1)
{
  return partial apply for closure #1 in closure #2 in static VideoSnippetUtils.makeDynamicURLImageResource(for:)( a1,  (SEL *)&selRef_pixelHeight);
}

uint64_t partial apply for closure #1 in closure #2 in static VideoSnippetUtils.makeDynamicURLImageResource(for:)( uint64_t a1, SEL *a2)
{
  return Searchfoundation_GraphicalFloat.doubleValue.setter([*(id *)(v2 + 16) *a2]);
}

id partial apply for closure #1 in static VideoSnippetUtils.makeSixteenByNineImage<A>(for:)@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static VideoSnippetUtils.makeSixteenByNineImage<A>(for:)( a1,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  a2);
}

uint64_t partial apply for closure #1 in static VideoSnippetUtils.makeContentButtons(for:utsURL:switchProfileBuilderParams:)( uint64_t a1, uint64_t a2)
{
  return closure #1 in static VideoSnippetUtils.makeContentButtons(for:utsURL:switchProfileBuilderParams:)( a1,  a2,  v2[2],  v2[3],  v2[4]);
}

uint64_t partial apply for closure #1 in closure #1 in static VideoSnippetUtils.makeContentButtons(for:utsURL:switchProfileBuilderParams:)@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  return closure #1 in closure #1 in static VideoSnippetUtils.makeContentButtons(for:utsURL:switchProfileBuilderParams:)( a1,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 40),  *(void **)(v2 + 48),  a2);
}

id specialized static VideoSnippetUtils.makeProfileSwitch(switchProfileBuilderParams:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of IdentifiedUser?( a1,  (uint64_t)v8,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) == 1)
  {
    outlined destroy of Any?( (uint64_t)v8,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
    return 0LL;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    id v13 = [objc_allocWithZone(SAProfileSwitch) init];
    uint64_t v14 = UUID.init()(v13);
    UUID.uuidString.getter(v14);
    uint64_t v16 = v15;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v16);
    [v13 setAceId:v17];

    Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams.userID.getter();
    uint64_t v19 = v18;
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v19);
    [v13 setSharedUserId:v20];

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  return v13;
}

id specialized static VideoSnippetUtils.makeContentButton(image:appURL:canonicalID:addViews:switchProfile:title:contentType:contentRatingValue:contentRatingSystem:contentRowDescription:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v67 = a4;
  uint64_t v68 = a5;
  uint64_t v69 = a2;
  uint64_t v70 = a3;
  uint64_t v65 = a17;
  uint64_t v66 = a1;
  uint64_t v64 = a16;
  uint64_t v73 = a15;
  uint64_t v74 = a13;
  uint64_t v71 = a14;
  uint64_t v72 = a12;
  uint64_t v75 = a10;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for UUID(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v28 = swift_allocObject(v27, 40LL, 7LL);
  *(_OWORD *)(v28 + 16) = xmmword_7D060;
  *(void *)(v28 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a6;
  uint64_t v78 = v28;
  specialized Array._endMutation()(v28);
  if (a7)
  {
    id v29 = a6;
    id v30 = a7;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v30);
    unint64_t v32 = *(void *)((char *)&dword_10 + (v78 & 0xFFFFFFFFFFFFFF8LL));
    unint64_t v31 = *(void *)((char *)&dword_18 + (v78 & 0xFFFFFFFFFFFFFF8LL));
    if (v32 >= v31 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1LL);
    }
    uint64_t v33 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v30);
    specialized Array._endMutation()(v33);
  }

  else
  {
    id v34 = a6;
  }

  id v35 = objc_allocWithZone(&OBJC_CLASS___SAVCSContentButton);
  id v36 = objc_msgSend(v35, "init", v64, v65);
  uint64_t v37 = UUID.init()(v36);
  UUID.uuidString.getter(v37);
  uint64_t v39 = v38;
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  NSString v40 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v39);
  [v36 setAceId:v40];

  id v41 = v36;
  uint64_t v42 = a8;
  NSString v43 = String._bridgeToObjectiveC()();
  [v41 setText:v43];

  NSString v44 = String._bridgeToObjectiveC()();
  [v41 setSecondaryText:v44];

  [v41 setImage:v66];
  uint64_t v45 = v78;
  id v46 = v41;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v45);
  [v46 setCommands:isa];

  uint64_t v48 = v75;
  NSString v49 = String._bridgeToObjectiveC()();
  [v46 setContentType:v49];

  NSString v50 = String._bridgeToObjectiveC()();
  [v46 setCanonicalId:v50];

  URL.init(string:)(v69);
  uint64_t v51 = type metadata accessor for URL(0LL);
  uint64_t v52 = *(void *)(v51 - 8);
  uint64_t v54 = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v22, 1LL, v51) != 1)
  {
    URL._bridgeToObjectiveC()(v53);
    uint64_t v54 = v55;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v22, v51);
  }

  [v46 setUrl:v54];

  id v56 = specialized static VideoSnippetUtils.makeContentRatingTemplate(ratingSystem:ratingValue:)(v71, v73, v72, v74);
  [v46 setContentRating:v56];

  if (one-time initialization token for videoSnippet != -1) {
    swift_once(&one-time initialization token for videoSnippet, one-time initialization function for videoSnippet);
  }
  uint64_t v57 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v57, (uint64_t)static Logger.videoSnippet);
  swift_bridgeObjectRetain_n(a11, 2LL);
  uint64_t v58 = swift_bridgeObjectRetain_n(a9, 2LL);
  uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
  os_log_type_t v60 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v59, v60))
  {
    uint64_t v61 = swift_slowAlloc(22LL, -1LL);
    uint64_t v62 = swift_slowAlloc(64LL, -1LL);
    uint64_t v77 = v62;
    *(_DWORD *)uint64_t v61 = 136315394;
    swift_bridgeObjectRetain(a11);
    uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, a11, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
    swift_bridgeObjectRelease_n(a11, 3LL);
    *(_WORD *)(v61 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    swift_bridgeObjectRetain(a9);
    uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, a9, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
    swift_bridgeObjectRelease_n(a9, 3LL);
    _os_log_impl(&dword_0, v59, v60, "Built content button for %s “%s”", (uint8_t *)v61, 0x16u);
    swift_arrayDestroy(v62, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v62, -1LL, -1LL);
    swift_slowDealloc(v61, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a9, 2LL);
    swift_bridgeObjectRelease_n(a11, 2LL);
  }

  return v46;
}

uint64_t static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(unk_A2C74);
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return v9(a1, a2, a3);
}

uint64_t static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(unk_A2C84);
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return v9(a1, a2, a3);
}

uint64_t static SuggestionsIntentDonator.donateRelatedQuestionsSuggestions(_:requestID:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(unk_A2C94);
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return v9(a1, a2, a3);
}

uint64_t static SuggestionsIntentDonator.donateServerSuggestions(_:requestID:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(unk_A2CA4);
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return v9(a1, a2, a3);
}

uint64_t static SuggestionsIntentDonator.donateAlternateQuerySuggestion(_:requestID:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(unk_A2CB4);
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return v9(a1, a2, a3);
}

uint64_t closure #1 in static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[8] = a5;
  void v6[9] = a6;
  v6[7] = a4;
  return swift_task_switch( closure #1 in static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:),  0LL,  0LL);
}

uint64_t closure #1 in static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:)()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to dispatch thunk of SiriSuggestionsEngagementAPIClient.submitEngagement(for:with:)[1]);
  v0[10] = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:);
  return dispatch thunk of SiriSuggestionsEngagementAPIClient.submitEngagement(for:with:)(v0[8], v0[9], v1, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v2 = *(void *)(*(void *)v1 + 80LL);
  *(void *)(*(void *)v1 + 88LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = closure #1 in static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:);
  }
  else {
    uint64_t v3 = closure #1 in static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:);
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = *(void *)(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  uint64_t v2 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v3 = static PerformanceUtil.shared.getter(v2);
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v1, 0LL);
  swift_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = *(void *)(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  uint64_t v2 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v3 = static PerformanceUtil.shared.getter(v2);
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v1, 0LL);
  swift_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for TaskPriority?);
    uint64_t v8 = 7168LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (!v9)
    {
LABEL_6:
      uint64_t v16 = 0LL;
      return swift_task_create(v8, v16, (char *)&type metadata for () + 8, a2, a3);
    }
  }

  else
  {
    unsigned __int8 v17 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v8 = v17 | 0x1C00LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (!v9) {
      goto LABEL_6;
    }
  }

  uint64_t v10 = *(void *)(a3 + 24);
  uint64_t ObjectType = swift_getObjectType(v9);
  swift_unknownObjectRetain(v9, v12);
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
  uint64_t v15 = v14;
  swift_unknownObjectRelease(v9);
  if (!(v15 | v13)) {
    goto LABEL_6;
  }
  v19[0] = 0LL;
  v19[1] = 0LL;
  uint64_t v16 = v19;
  _OWORD v19[2] = v13;
  __int128 v19[3] = v15;
  return swift_task_create(v8, v16, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t closure #1 in static SuggestionsIntentDonator.donateSuggestions(requestID:payloadKey:data:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[29] = v10;
  v8[30] = v11;
  v8[27] = a7;
  v8[28] = a8;
  v8[25] = a5;
  v8[26] = a6;
  v8[24] = a4;
  return swift_task_switch( closure #1 in static SuggestionsIntentDonator.donateSuggestions(requestID:payloadKey:data:),  0LL,  0LL);
}

uint64_t closure #1 in static SuggestionsIntentDonator.donateSuggestions(requestID:payloadKey:data:)()
{
  uint64_t v1 = v0[17];
  __swift_project_boxed_opaque_existential_1(v0 + 14, v1);
  if (one-time initialization token for kOwnerInformation != -1) {
    swift_once( &one-time initialization token for kOwnerInformation,  one-time initialization function for kOwnerInformation);
  }
  uint64_t v3 = v0[29];
  unint64_t v2 = v0[30];
  uint64_t v4 = v0[27];
  uint64_t v5 = v0[28];
  uint64_t v6 = static SuggestionConstants.kOwnerInformation;
  v0[22] = type metadata accessor for DomainOwner(0LL);
  v0[23] = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type DomainOwner and conformance DomainOwner,  (uint64_t (*)(uint64_t))&type metadata accessor for DomainOwner,  (uint64_t)&protocol conformance descriptor for DomainOwner);
  v0[19] = v6;
  swift_retain(v6);
  unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  v0[31] = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Decodable & Encodable & Sendable)>);
  uint64_t inited = swift_initStackObject(v8, v0 + 2);
  *(_OWORD *)(inited + 16) = xmmword_7CCD0;
  *(void *)(inited + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v4;
  *(void *)(inited + 40) = v5;
  *(void *)(inited + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = &type metadata for Data;
  *(void *)(inited + 80) = lazy protocol witness table accessor for type Data and conformance Data();
  *(void *)(inited + 88) = lazy protocol witness table accessor for type Data and conformance Data();
  *(void *)(inited + 48) = v3;
  *(void *)(inited + 56) = v2;
  swift_bridgeObjectRetain(v5);
  outlined copy of Data._Representation(v3, v2);
  unint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v0[32] = v10;
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to SiriSuggestionsBaseAPIClient.submitCurrentIntent(for:owner:intentProps:verb:executionParams:)[1]);
  v0[33] = v11;
  *uint64_t v11 = v0;
  v11[1] = closure #1 in static SuggestionsIntentDonator.donateSuggestions(requestID:payloadKey:data:);
  return SiriSuggestionsBaseAPIClient.submitCurrentIntent(for:owner:intentProps:verb:executionParams:)( v0[25],  v0[26],  v0 + 19,  v7,  0LL,  0LL,  v10,  v1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 264);
  *(void *)(*v1 + 27__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = closure #1 in static SuggestionsIntentDonator.donateSuggestions(requestID:payloadKey:data:);
  }

  else
  {
    uint64_t v5 = (void *)(v2 + 152);
    unint64_t v7 = v2 + 248;
    uint64_t v6 = *(void *)(v2 + 248);
    swift_bridgeObjectRelease(*(void *)(v7 + 8));
    swift_bridgeObjectRelease(v6);
    __swift_destroy_boxed_opaque_existential_1(v5);
    uint64_t v4 = closure #1 in static SuggestionsIntentDonator.donateSuggestions(requestID:payloadKey:data:);
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = *(void *)(v0 + 192);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 112));
  unint64_t v2 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v3 = static PerformanceUtil.shared.getter(v2);
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v1, 0LL);
  swift_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v1 = *(void *)(v0 + 248);
  unint64_t v2 = *(void *)(v0 + 192);
  swift_bridgeObjectRelease(*(void *)(v0 + 256));
  swift_bridgeObjectRelease(v1);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 152));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 112));
  uint64_t v3 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v4 = static PerformanceUtil.shared.getter(v3);
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v2, 0LL);
  swift_release(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[221] = a7;
  v7[220] = a6;
  v7[219] = a5;
  v7[213] = a4;
  uint64_t v8 = type metadata accessor for PommesLocationInfo(0LL);
  v7[222] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[223] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[224] = swift_task_alloc(v10);
  v7[225] = swift_task_alloc(v10);
  v7[226] = swift_task_alloc(v10);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesLocationInfo, LocationError>);
  v7[227] = v11;
  unint64_t v12 = (*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[228] = swift_task_alloc(v12);
  v7[229] = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for IntentType(0LL);
  v7[230] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:),  0LL,  0LL);
}

uint64_t closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:)()
{
  uint64_t v1 = *(void *)(v0 + 1752);
  type metadata accessor for PommesLocationManager(0LL);
  unint64_t v2 = (void *)static PommesLocationManager.shared.getter();
  *(void *)(v0 + 1848) = v2;
  uint64_t v3 = swift_allocObject(&unk_98880, 24LL, 7LL);
  *(void *)(v0 + 1856) = v3;
  *(void *)(v3 + 16) = v2;
  id v4 = v2;
  swift_retain(v3);
  swift_asyncLet_begin( v0 + 16,  0LL,  &type metadata for Bool,  &async function pointer to partial apply for implicit closure #1 in closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:),  v3,  v0 + 1944);
  id v5 = specialized static PegasusACEConverters.makeShowMapPoints(params:)(v1);
  *(void *)(v0 + 1864) = v5;
  unsigned int v6 = [v5 showDirections];
  unsigned int v7 = v6;
  if (v6) {
    unint64_t v8 = 0xE800000000000000LL;
  }
  else {
    unint64_t v8 = 0xE600000000000000LL;
  }
  if ((v6 & 1) == 0
    && (_stringCompareWithSmolCheck(_:_:expecting:)( 0x686372616573LL,  0xE600000000000000LL,  0x657461676976616ELL,  0xE800000000000000LL,  0LL) & 1) == 0)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);

    uint64_t v65 = v0 + 656;
    return swift_asyncLet_finish( v0 + 16,  v0 + 1944,  closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:),  v65);
  }

  id v9 = [v5 itemDestination];
  if (!v9 || (unint64_t v10 = v9, v11 = [v9 label], v10, !v11))
  {
    swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);

    swift_bridgeObjectRelease(v8);
    uint64_t v65 = v0 + 1568;
    return swift_asyncLet_finish( v0 + 16,  v0 + 1944,  closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:),  v65);
  }

  unint64_t v68 = v8;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v14 = v13;

  *(void *)(v0 + 864) = &type metadata for String;
  *(void *)(v0 + 87__swift_destroy_boxed_opaque_existential_1(v0 + 2) = &protocol witness table for String;
  *(void *)(v0 + 880) = &protocol witness table for String;
  *(void *)(v0 + 840) = v12;
  *(void *)(v0 + 848) = v14;
  outlined init with take of Decodable & Encodable & Sendable((__int128 *)(v0 + 840), (_OWORD *)(v0 + 888));
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  uint64_t v69 = &_swiftEmptyDictionarySingleton;
  uint64_t v16 = *(void *)(v0 + 912);
  uint64_t v17 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 888, v16);
  uint64_t v18 = *(void *)(v16 - 8);
  uint64_t v19 = (uint64_t *)swift_task_alloc((*(void *)(v18 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v18 + 16))(v19, v17, v16);
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)( *v19,  v19[1],  0xD000000000000010LL,  0x8000000000081270LL,  isUniquelyReferenced_nonNull_native,  &v69);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 888));
  swift_task_dealloc(v19);
  uint64_t v20 = v69;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  id v21 = [v5 itemDestination];
  if (v21)
  {
    uint64_t v22 = v21;
    id v23 = [v21 location];

    if (v23)
    {
      id v24 = [v23 latitude];

      if (v24)
      {
        [v24 doubleValue];
        *(void *)(v0 + 816) = &type metadata for Double;
        *(void *)(v0 + 824) = &protocol witness table for Double;
        *(void *)(v0 + 83__swift_destroy_boxed_opaque_existential_1(v0 + 2) = &protocol witness table for Double;
        *(void *)(v0 + 79__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v25;
        outlined init with take of Decodable & Encodable & Sendable((__int128 *)(v0 + 792), (_OWORD *)(v0 + 1320));
        char v66 = swift_isUniquelyReferenced_nonNull_native(v20);
        uint64_t v69 = v20;
        uint64_t v26 = *(void *)(v0 + 1344);
        uint64_t v27 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 1320, v26);
        uint64_t v28 = *(void *)(v26 - 8);
        id v29 = (double *)swift_task_alloc((*(void *)(v28 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(double *, uint64_t, uint64_t))(v28 + 16))(v29, v27, v26);
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)( 0x74616E6974736564LL,  0xEE0074614C6E6F69LL,  v66,  &v69,  *v29);
        __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 1320));
        swift_task_dealloc(v29);
        uint64_t v20 = v69;
        swift_bridgeObjectRelease(0x8000000000000000LL);
      }
    }
  }

  id v30 = [v5 itemDestination];
  if (v30)
  {
    unint64_t v31 = v30;
    id v32 = [v30 location];

    if (v32)
    {
      id v33 = [v32 longitude];

      if (v33)
      {
        [v33 doubleValue];
        *(void *)(v0 + 1008) = &type metadata for Double;
        *(void *)(v0 + 1016) = &protocol witness table for Double;
        *(void *)(v0 + 1024) = &protocol witness table for Double;
        *(void *)(v0 + 984) = v34;
        outlined init with take of Decodable & Encodable & Sendable((__int128 *)(v0 + 984), (_OWORD *)(v0 + 936));
        char v67 = swift_isUniquelyReferenced_nonNull_native(v20);
        uint64_t v69 = v20;
        uint64_t v35 = *(void *)(v0 + 960);
        uint64_t v36 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 936, v35);
        uint64_t v37 = *(void *)(v35 - 8);
        uint64_t v38 = (double *)swift_task_alloc((*(void *)(v37 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(double *, uint64_t, uint64_t))(v37 + 16))(v38, v36, v35);
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)( 0x74616E6974736564LL,  0xEF676E6F4C6E6F69LL,  v67,  &v69,  *v38);
        __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 936));
        swift_task_dealloc(v38);
        uint64_t v20 = v69;
        swift_bridgeObjectRelease(0x8000000000000000LL);
      }
    }
  }

  id v39 = [v5 itemDestination];
  if (v39)
  {
    NSString v40 = v39;
    id v41 = [v39 detailType];

    if (v41)
    {
      uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      uint64_t v44 = v43;

      *(void *)(v0 + 1104) = &type metadata for String;
      *(void *)(v0 + 111__swift_destroy_boxed_opaque_existential_1(v0 + 2) = &protocol witness table for String;
      *(void *)(v0 + 1120) = &protocol witness table for String;
      *(void *)(v0 + 1080) = v42;
      *(void *)(v0 + 1088) = v44;
      outlined init with take of Decodable & Encodable & Sendable((__int128 *)(v0 + 1080), (_OWORD *)(v0 + 1032));
      char v45 = swift_isUniquelyReferenced_nonNull_native(v20);
      uint64_t v69 = v20;
      uint64_t v46 = *(void *)(v0 + 1056);
      uint64_t v47 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 1032, v46);
      uint64_t v48 = *(void *)(v46 - 8);
      NSString v49 = (uint64_t *)swift_task_alloc((*(void *)(v48 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v48 + 16))(v49, v47, v46);
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)( *v49,  v49[1],  0xD000000000000015LL,  0x80000000000812B0LL,  v45,  &v69);
      __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 1032));
      swift_task_dealloc(v49);
      uint64_t v20 = v69;
      swift_bridgeObjectRelease(0x8000000000000000LL);
    }
  }

  id v50 = [v5 itemSource];
  if (v50)
  {
    uint64_t v51 = v50;
    id v52 = [v50 detailType];

    if (v52)
    {
      uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
      uint64_t v55 = v54;

      *(void *)(v0 + 1200) = &type metadata for String;
      *(void *)(v0 + 1208) = &protocol witness table for String;
      *(void *)(v0 + 1216) = &protocol witness table for String;
      *(void *)(v0 + 1176) = v53;
      *(void *)(v0 + 1184) = v55;
      outlined init with take of Decodable & Encodable & Sendable((__int128 *)(v0 + 1176), (_OWORD *)(v0 + 1128));
      char v56 = swift_isUniquelyReferenced_nonNull_native(v20);
      uint64_t v69 = v20;
      uint64_t v57 = *(void *)(v0 + 1152);
      uint64_t v58 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 1128, v57);
      uint64_t v59 = *(void *)(v57 - 8);
      os_log_type_t v60 = (uint64_t *)swift_task_alloc((*(void *)(v59 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v59 + 16))(v60, v58, v57);
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)( *v60,  v60[1],  0xD000000000000010LL,  0x8000000000081290LL,  v56,  &v69);
      __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 1128));
      swift_task_dealloc(v60);
      uint64_t v20 = v69;
      swift_bridgeObjectRelease(0x8000000000000000LL);
    }
  }

  if (v7) {
    uint64_t v61 = 0x657461676976616ELL;
  }
  else {
    uint64_t v61 = 0x686372616573LL;
  }
  *(void *)(v0 + 187__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v20;
  uint64_t v62 = *(void *)(v0 + 1840);
  static IntentType.appIntent(_:)(0x65726944776F6873LL, 0xEE00736E6F697463LL);
  uint64_t v63 = type metadata accessor for SuggestionsIntent(0LL);
  swift_allocObject(v63, *(unsigned int *)(v63 + 48), *(unsigned __int16 *)(v63 + 52));
  *(void *)(v0 + 1880) = SuggestionsIntent.init(intentName:verb:intentProps:)( v62,  v61,  v68,  &_swiftEmptyDictionarySingleton);
  return swift_asyncLet_get_throwing( v0 + 16,  v0 + 1944,  closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:),  v0 + 1616);
}

{
  return swift_task_switch( closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:),  0LL,  0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  *(void *)(v1 + 1888) = v0;
  if (v0)
  {
    swift_bridgeObjectRelease(*(void *)(v1 + 1872));
    unint64_t v2 = closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:);
  }

  else
  {
    unint64_t v2 = closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:);
  }

  return swift_task_switch(v2, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  os_log_s *v9;
  os_log_type_t v10;
  uint8_t *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  os_log_s *v41;
  os_log_type_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v1 = *(void *)(v0 + 1832);
  unint64_t v2 = *(void *)(v0 + 1824);
  uint64_t v3 = *(void *)(v0 + 1816);
  PommesLocationManager.cachedLocationInfo()();
  outlined init with copy of Result<PommesLocationInfo, LocationError>(v1, v2);
  if (swift_getEnumCaseMultiPayload(v2, v3) != 1)
  {
    uint64_t v13 = *(void *)(v0 + 1872);
    uint64_t v14 = (*(uint64_t (**)(void, void, void))(*(void *)(v0 + 1784) + 32LL))( *(void *)(v0 + 1808),  *(void *)(v0 + 1824),  *(void *)(v0 + 1776));
    uint64_t v15 = (void *)PommesLocationInfo.location.getter(v14);
    [v15 coordinate];
    uint64_t v17 = v16;

    *(void *)(v0 + 720) = &type metadata for Double;
    *(void *)(v0 + 728) = &protocol witness table for Double;
    *(void *)(v0 + 736) = &protocol witness table for Double;
    *(void *)(v0 + 696) = v17;
    outlined init with take of Decodable & Encodable & Sendable((__int128 *)(v0 + 696), (_OWORD *)(v0 + 744));
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
    uint64_t v69 = v13;
    uint64_t v19 = *(void *)(v0 + 768);
    uint64_t v20 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 744, v19);
    id v21 = *(void *)(v19 - 8);
    uint64_t v22 = (double *)swift_task_alloc((*(void *)(v21 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(double *, uint64_t, uint64_t))(v21 + 16))(v22, v20, v19);
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)( 0x4C746E6572727563LL,  0xEA00000000007461LL,  isUniquelyReferenced_nonNull_native,  &v69,  *v22);
    __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 744));
    swift_task_dealloc(v22);
    id v23 = v69;
    id v24 = swift_bridgeObjectRelease(0x8000000000000000LL);
    uint64_t v25 = (void *)PommesLocationInfo.location.getter(v24);
    [v25 coordinate];
    uint64_t v27 = v26;

    *(void *)(v0 + 1296) = &type metadata for Double;
    *(void *)(v0 + 1304) = &protocol witness table for Double;
    *(void *)(v0 + 131__swift_destroy_boxed_opaque_existential_1(v0 + 2) = &protocol witness table for Double;
    *(void *)(v0 + 127__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v27;
    outlined init with take of Decodable & Encodable & Sendable((__int128 *)(v0 + 1272), (_OWORD *)(v0 + 1224));
    LOBYTE(v25) = swift_isUniquelyReferenced_nonNull_native(v23);
    uint64_t v69 = v23;
    uint64_t v28 = *(void *)(v0 + 1248);
    id v29 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 1224, v28);
    id v30 = *(void *)(v28 - 8);
    unint64_t v31 = (double *)swift_task_alloc((*(void *)(v30 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(double *, uint64_t, uint64_t))(v30 + 16))(v31, v29, v28);
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)( 0x4C746E6572727563LL,  0xEB00000000676E6FLL,  (char)v25,  &v69,  *v31);
    __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 1224));
    swift_task_dealloc(v31);
    id v32 = v69;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    id v33 = *(void *)(v0 + 1808);
    uint64_t v34 = *(void *)(v0 + 1800);
    uint64_t v35 = *(void *)(v0 + 1792);
    uint64_t v36 = *(void *)(v0 + 1784);
    uint64_t v37 = *(void *)(v0 + 1776);
    uint64_t v38 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v38, (uint64_t)static Logger.information);
    id v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16);
    v39(v34, v33, v37);
    NSString v40 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v39)(v35, v33, v37);
    id v41 = (os_log_s *)Logger.logObject.getter(v40);
    uint64_t v42 = static os_log_type_t.info.getter();
    uint64_t v43 = os_log_type_enabled(v41, v42);
    uint64_t v44 = *(void *)(v0 + 1800);
    char v45 = *(void *)(v0 + 1792);
    uint64_t v46 = *(void *)(v0 + 1784);
    uint64_t v47 = *(void *)(v0 + 1776);
    if (v43)
    {
      unint64_t v68 = v32;
      uint64_t v48 = swift_slowAlloc(22LL, -1LL);
      *(_DWORD *)uint64_t v48 = 134218240;
      NSString v49 = (void *)PommesLocationInfo.location.getter(v48);
      [v49 coordinate];
      uint64_t v51 = v50;

      *(void *)(v0 + 1656) = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1656, v0 + 1664);
      id v52 = *(uint64_t (**)(uint64_t, uint64_t))(v46 + 8);
      uint64_t v53 = v52(v44, v47);
      *(_WORD *)(v48 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2048;
      uint64_t v54 = (void *)PommesLocationInfo.location.getter(v53);
      [v54 coordinate];
      char v56 = v55;

      *(void *)(v0 + 1608) = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1608, v0 + 1616);
      v52(v45, v47);
      _os_log_impl(&dword_0, v41, v42, "Fetched location (%f, %f)", (uint8_t *)v48, 0x16u);
      uint64_t v57 = v48;
      id v32 = v68;
      swift_slowDealloc(v57, -1LL, -1LL);
    }

    else
    {

      id v52 = *(uint64_t (**)(uint64_t, uint64_t))(v46 + 8);
      v52(v45, v47);
      v52(v44, v47);
    }

    v52(*(void *)(v0 + 1808), *(void *)(v0 + 1776));
    goto LABEL_25;
  }

  id v4 = *(void *)(v0 + 1824);
  id v5 = type metadata accessor for LocationError(0LL);
  unsigned int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 88LL))(v4, v5);
  if (v6 == enum case for LocationError.unavailable(_:))
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    unsigned int v7 = type metadata accessor for Logger(0LL);
    unint64_t v8 = __swift_project_value_buffer(v7, (uint64_t)static Logger.information);
    id v9 = (os_log_s *)Logger.logObject.getter(v8);
    unint64_t v10 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v9, v10)) {
      goto LABEL_24;
    }
    id v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v11 = 0;
    uint64_t v12 = "Location unavailable";
LABEL_23:
    _os_log_impl(&dword_0, v9, v10, v12, v11, 2u);
    swift_slowDealloc(v11, -1LL, -1LL);
LABEL_24:

    id v32 = *(void *)(v0 + 1872);
LABEL_25:
    *(void *)(v0 + 1896) = v32;
    uint64_t v62 = type metadata accessor for SiriSuggestionsAPIClients(0LL);
    *(void *)(v0 + 1904) = v62;
    static SiriSuggestionsAPIClients.get()(v62);
    uint64_t v63 = *(void *)(v0 + 1552);
    uint64_t v64 = *(void *)(v0 + 1560);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 1528), v63);
    uint64_t v65 = (void *)swift_task_alloc(async function pointer to SiriSuggestionsBaseAPIClient.submitExecutionParams(for:executionParams:)[1]);
    *(void *)(v0 + 191__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v65;
    char v66 = *(void *)(v64 + 8);
    void *v65 = v0;
    v65[1] = closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:);
    return SiriSuggestionsBaseAPIClient.submitExecutionParams(for:executionParams:)( *(void *)(v0 + 1760),  *(void *)(v0 + 1768),  v32,  v63,  v66);
  }

  if (v6 == enum case for LocationError.locationDisabled(_:))
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v58 = type metadata accessor for Logger(0LL);
    uint64_t v59 = __swift_project_value_buffer(v58, (uint64_t)static Logger.information);
    id v9 = (os_log_s *)Logger.logObject.getter(v59);
    unint64_t v10 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v9, v10)) {
      goto LABEL_24;
    }
    id v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v11 = 0;
    uint64_t v12 = "Location services disabled";
    goto LABEL_23;
  }

  if (v6 == enum case for LocationError.siriLocationDisabled(_:))
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    os_log_type_t v60 = type metadata accessor for Logger(0LL);
    uint64_t v61 = __swift_project_value_buffer(v60, (uint64_t)static Logger.information);
    id v9 = (os_log_s *)Logger.logObject.getter(v61);
    unint64_t v10 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v9, v10)) {
      goto LABEL_24;
    }
    id v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v11 = 0;
    uint64_t v12 = "Siri location sharing disabled";
    goto LABEL_23;
  }

  return _diagnoseUnexpectedEnumCase<A>(type:)(*(void *)(v0 + 1816), *(void *)(v0 + 1816));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  unint64_t v2 = *(void *)(*(void *)v1 + 1912LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 1896LL);
  *(void *)(*(void *)v1 + 192Hasher.init(_seed:)(v1, 0LL) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  if (v0) {
    id v4 = closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:);
  }
  else {
    id v4 = closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:);
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v1 = __swift_destroy_boxed_opaque_existential_1(v0 + 191);
  static SiriSuggestionsAPIClients.get()(v1);
  unint64_t v2 = v0[184];
  uint64_t v3 = v0[185];
  __swift_project_boxed_opaque_existential_1(v0 + 181, v2);
  if (one-time initialization token for kOwnerMaps != -1) {
    swift_once(&one-time initialization token for kOwnerMaps, one-time initialization function for kOwnerMaps);
  }
  id v4 = static SuggestionConstants.kOwnerMaps;
  v0[174] = type metadata accessor for DomainOwner(0LL);
  v0[175] = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type DomainOwner and conformance DomainOwner,  (uint64_t (*)(uint64_t))&type metadata accessor for DomainOwner,  (uint64_t)&protocol conformance descriptor for DomainOwner);
  v0[171] = v4;
  id v5 = async function pointer to SiriSuggestionsBaseAPIClient.submitCurrentIntent(for:intent:owner:)[1];
  swift_retain(v4);
  unsigned int v6 = (void *)swift_task_alloc(v5);
  v0[241] = v6;
  unsigned int v7 = *(void *)(v3 + 8);
  *unsigned int v6 = v0;
  v6[1] = closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:);
  return SiriSuggestionsBaseAPIClient.submitCurrentIntent(for:intent:owner:)( v0[220],  v0[221],  v0[235],  v0 + 171,  v2,  v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  unint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1928);
  *(void *)(*v1 + 1936) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    id v4 = closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:);
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_1((void *)(v2 + 1368));
    id v4 = closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:);
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 1880);
  unint64_t v2 = *(void *)(v0 + 1832);

  swift_release(v1);
  outlined destroy of Any?( v2,  &demangling cache variable for type metadata for Result<PommesLocationInfo, LocationError>);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 1448));
  return swift_asyncLet_finish( v0 + 16,  v0 + 1944,  closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:),  v0 + 1408);
}

{
  return swift_task_switch( closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:),  0LL,  0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v1 = *(void *)(v0 + 1856);

  swift_release(v1);
  unint64_t v2 = *(void *)(v0 + 1856);
  uint64_t v3 = *(void *)(v0 + 1840);
  id v4 = *(void *)(v0 + 1832);
  id v5 = *(void *)(v0 + 1824);
  unsigned int v6 = *(void *)(v0 + 1808);
  unsigned int v7 = *(void *)(v0 + 1800);
  unint64_t v8 = *(void *)(v0 + 1792);
  id v9 = *(void *)(v0 + 1704);
  type metadata accessor for PerformanceUtil(0LL);
  unint64_t v10 = static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v9, 0LL);
  swift_release(v10);
  swift_release(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 1880);

  swift_release(v1);
  return swift_asyncLet_finish( v0 + 16,  v0 + 1944,  closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:),  v0 + 1712);
}

{
  return swift_task_switch( closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:),  0LL,  0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v1 = *(void *)(v0 + 1856);

  swift_release(v1);
  unint64_t v2 = *(void *)(v0 + 1856);
  uint64_t v3 = *(void *)(v0 + 1840);
  id v4 = *(void *)(v0 + 1832);
  id v5 = *(void *)(v0 + 1824);
  unsigned int v6 = *(void *)(v0 + 1808);
  unsigned int v7 = *(void *)(v0 + 1800);
  unint64_t v8 = *(void *)(v0 + 1792);
  id v9 = *(void *)(v0 + 1704);
  type metadata accessor for PerformanceUtil(0LL);
  unint64_t v10 = static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v9, 0LL);
  swift_release(v10);
  swift_release(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 1880);
  unint64_t v2 = *(void *)(v0 + 1832);

  swift_release(v1);
  outlined destroy of Any?( v2,  &demangling cache variable for type metadata for Result<PommesLocationInfo, LocationError>);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 1528));
  return swift_asyncLet_finish( v0 + 16,  v0 + 1944,  closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:),  v0 + 1664);
}

{
  return swift_task_switch( closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:),  0LL,  0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v1 = *(void *)(v0 + 1856);

  swift_release(v1);
  unint64_t v2 = *(void *)(v0 + 1856);
  uint64_t v3 = *(void *)(v0 + 1840);
  id v4 = *(void *)(v0 + 1832);
  id v5 = *(void *)(v0 + 1824);
  unsigned int v6 = *(void *)(v0 + 1808);
  unsigned int v7 = *(void *)(v0 + 1800);
  unint64_t v8 = *(void *)(v0 + 1792);
  id v9 = *(void *)(v0 + 1704);
  type metadata accessor for PerformanceUtil(0LL);
  unint64_t v10 = static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v9, 0LL);
  swift_release(v10);
  swift_release(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 1880);
  unint64_t v2 = *(void *)(v0 + 1832);

  swift_release(v1);
  outlined destroy of Any?( v2,  &demangling cache variable for type metadata for Result<PommesLocationInfo, LocationError>);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 1368));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 1448));
  return swift_asyncLet_finish( v0 + 16,  v0 + 1944,  closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:),  v0 + 1488);
}

{
  return swift_task_switch( closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:),  0LL,  0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v1 = *(void *)(v0 + 1856);

  swift_release(v1);
  unint64_t v2 = *(void *)(v0 + 1856);
  uint64_t v3 = *(void *)(v0 + 1840);
  id v4 = *(void *)(v0 + 1832);
  id v5 = *(void *)(v0 + 1824);
  unsigned int v6 = *(void *)(v0 + 1808);
  unsigned int v7 = *(void *)(v0 + 1800);
  unint64_t v8 = *(void *)(v0 + 1792);
  id v9 = *(void *)(v0 + 1704);
  type metadata accessor for PerformanceUtil(0LL);
  unint64_t v10 = static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v9, 0LL);
  swift_release(v10);
  swift_release(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t implicit closure #1 in closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:)( uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_task_switch( implicit closure #1 in closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:),  0LL,  0LL);
}

uint64_t implicit closure #1 in closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:)()
{
  uint64_t v1 = PommesLocationManager.fetchLocation()();
  v0[4] = v1;
  uint64_t v2 = (void *)swift_task_alloc(*((unsigned int *)&async function pointer to Task.value.getter + 1));
  v0[5] = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  void *v2 = v0;
  v2[1] = implicit closure #1 in closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:);
  return Task.value.getter(v0[2], v1, &type metadata for Bool, v3, &protocol self-conformance witness table for Error);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v2 = *(void *)(*(void *)v1 + 40LL);
  *(void *)(*(void *)v1 + 48LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = implicit closure #1 in closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:);
  }
  else {
    uint64_t v3 = implicit closure #1 in closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:);
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;
  swift_release(*(void *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  swift_release(*(void *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  uint64_t v28 = &type metadata for String;
  id v29 = &protocol witness table for String;
  id v30 = &protocol witness table for String;
  *(void *)&__int128 v27 = a1;
  *((void *)&v27 + 1) = a2;
  unint64_t v10 = (void *)*a6;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = (void *)*a6;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = (void *)(v18[7] + 48 * v12);
      __swift_destroy_boxed_opaque_existential_1(v19);
      return outlined init with take of Decodable & Encodable & Sendable(&v27, v19);
    }

    goto LABEL_11;
  }

  if (v17 >= v15 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a5 & 1);
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_14:
    unint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }

  unint64_t v12 = v21;
  uint64_t v18 = (void *)*a6;
  if ((v16 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v23 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v27, (uint64_t)&type metadata for String);
  __chkstk_darwin(v23);
  uint64_t v25 = (uint64_t *)((char *)&v27 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a4, *v25, v25[1], v18);
  __swift_destroy_boxed_opaque_existential_1(&v27);
  return (_OWORD *)swift_bridgeObjectRetain(a4);
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)( uint64_t a1, uint64_t a2, char a3, void *a4, double a5)
{
  *(double *)&__int128 v26 = a5;
  __int128 v27 = &type metadata for Double;
  uint64_t v28 = &protocol witness table for Double;
  id v29 = &protocol witness table for Double;
  id v9 = (void *)*a4;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v15 = v10;
  uint64_t v16 = v9[3];
  if (v16 >= v14 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v17 = (void *)*a4;
    if ((v15 & 1) != 0)
    {
LABEL_8:
      uint64_t v18 = (void *)(v17[7] + 48 * v11);
      __swift_destroy_boxed_opaque_existential_1(v18);
      return outlined init with take of Decodable & Encodable & Sendable(&v26, v18);
    }

    goto LABEL_11;
  }

  if (v16 >= v14 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1);
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v15 & 1) != (v21 & 1))
  {
LABEL_14:
    unint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }

  unint64_t v11 = v20;
  uint64_t v17 = (void *)*a4;
  if ((v15 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v22 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v26, (uint64_t)&type metadata for Double);
  __chkstk_darwin(v22);
  uint64_t v24 = (double *)((char *)&v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(double *))(v25 + 16))(v24);
  specialized _NativeDictionary._insert(at:key:value:)(v11, a1, a2, v17, *v24);
  __swift_destroy_boxed_opaque_existential_1(&v26);
  return (_OWORD *)swift_bridgeObjectRetain(a2);
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)( unint64_t a1, uint64_t a2, uint64_t a3, void *a4, double a5)
{
  *(double *)&__int128 v11 = a5;
  uint64_t v12 = &type metadata for Double;
  BOOL v13 = &protocol witness table for Double;
  uint64_t v14 = &protocol witness table for Double;
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  unsigned int v6 = (void *)(a4[6] + 16 * a1);
  *unsigned int v6 = a2;
  v6[1] = a3;
  unint64_t result = outlined init with take of Decodable & Encodable & Sendable(&v11, (_OWORD *)(a4[7] + 48 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  BOOL v13 = &type metadata for String;
  uint64_t v14 = &protocol witness table for String;
  char v15 = &protocol witness table for String;
  *(void *)&__int128 v12 = a4;
  *((void *)&v12 + 1) = a5;
  a6[(a1 >> 6) + 8] |= 1LL << a1;
  unsigned int v7 = (void *)(a6[6] + 16 * a1);
  void *v7 = a2;
  v7[1] = a3;
  unint64_t result = outlined init with take of Decodable & Encodable & Sendable(&v12, (_OWORD *)(a6[7] + 48 * a1));
  uint64_t v9 = a6[2];
  BOOL v10 = __OFADD__(v9, 1LL);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a6[2] = v11;
  }
  return result;
}

uint64_t specialized static SuggestionsIntentDonator.donateSuggestions(requestID:payloadKey:data:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v41 = a5;
  unint64_t v42 = a6;
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for PerformanceUtil.Ticket(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v37 - v18;
  Date.init()(v17);
  char v36 = 2;
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0xD000000000000030LL,  0x8000000000081020LL,  v11,  "InformationFlowPlugin/SuggestionsIntentDonator.swift",  52LL,  2LL,  46LL,  "donateSuggestions(requestID:payloadKey:data:)",  45LL,  v36);
  uint64_t v20 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v8, 1LL, 1LL, v20);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v19, v12);
  uint64_t v21 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v22 = (v21 + 32) & ~v21;
  unint64_t v23 = (v14 + v22 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v24 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v25 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v26 = swift_allocObject(&unk_98808, v25 + 16, v21 | 7);
  *(void *)(v26 + 16) = 0LL;
  *(void *)(v26 + 24) = 0LL;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v26 + v22, v16, v12);
  __int128 v27 = (void *)(v26 + v23);
  uint64_t v28 = v38;
  *__int128 v27 = v37;
  v27[1] = v28;
  id v29 = (void *)(v26 + v24);
  uint64_t v30 = v40;
  *id v29 = v39;
  v29[1] = v30;
  unint64_t v31 = (uint64_t *)(v26 + v25);
  uint64_t v33 = v41;
  unint64_t v32 = v42;
  *unint64_t v31 = v41;
  v31[1] = v32;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v30);
  outlined copy of Data._Representation(v33, v32);
  uint64_t v34 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5( (uint64_t)v8,  (uint64_t)&async function pointer to partial apply for closure #1 in static SuggestionsIntentDonator.donateSuggestions(requestID:payloadKey:data:),  v26);
  swift_release(v34);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v19, v12);
}

uint64_t specialized static SuggestionsIntentDonator.donateAlternateQuerySuggestion(_:requestID:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestionUtterance(0LL);
  void v3[9] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[10] = v5;
  v3[11] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t SuggestionCandidate = type metadata accessor for Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestionCandidate(0LL);
  v3[12] = SuggestionCandidate;
  uint64_t v7 = *(void *)(SuggestionCandidate - 8);
  v3[13] = v7;
  v3[14] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Suggestion = type metadata accessor for Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestion(0LL);
  v3[15] = Suggestion;
  uint64_t v9 = *(void *)(Suggestion - 8);
  v3[16] = v9;
  v3[17] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Logger(0LL);
  v3[18] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[19] = v11;
  v3[20] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( specialized static SuggestionsIntentDonator.donateAlternateQuerySuggestion(_:requestID:),  0LL,  0LL);
}

uint64_t specialized static SuggestionsIntentDonator.donateAlternateQuerySuggestion(_:requestID:)()
{
  uint64_t v71 = v0 + 40;
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = *(void *)(v0 + 64);
  __swift_project_value_buffer(*(void *)(v0 + 144), (uint64_t)static Logger.information);
  uint64_t v2 = swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.info.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  unint64_t v6 = *(void *)(v0 + 64);
  if (v5)
  {
    uint64_t v7 = *(void *)(v0 + 56);
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v79 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, (uint64_t *)&v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v71, v0 + 48);
    swift_bridgeObjectRelease_n(v6, 3LL);
    _os_log_impl(&dword_0, v3, v4, "Donating alternate query against request id: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 64), 2LL);
  }

  uint64_t v11 = *(void *)(v0 + 128);
  uint64_t v10 = *(void *)(v0 + 136);
  uint64_t v12 = *(void *)(v0 + 120);
  uint64_t v13 = *(void *)(v0 + 64);
  uint64_t v14 = *(void *)(v0 + 48);
  static Logger.generatorCategory.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v14, v12);
  uint64_t v15 = swift_bridgeObjectRetain_n(v13, 2LL);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    os_log_type_t v68 = v17;
    log = v16;
    uint64_t v19 = *(void *)(v0 + 56);
    unint64_t v18 = *(void *)(v0 + 64);
    uint64_t v20 = swift_slowAlloc(22LL, -1LL);
    uint64_t v67 = swift_slowAlloc(64LL, -1LL);
    uint64_t v78 = v67;
    *(_DWORD *)uint64_t v20 = 136446466;
    swift_bridgeObjectRetain(v18);
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    uint64_t v21 = swift_bridgeObjectRelease_n(v18, 3LL);
    uint64_t v69 = (uint8_t *)v20;
    *(_WORD *)(v20 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    uint64_t v22 = Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestion.candidates.getter(v21);
    uint64_t v23 = v22;
    int64_t v24 = *(void *)(v22 + 16);
    if (v24)
    {
      uint64_t v25 = *(void *)(v0 + 104);
      uint64_t v74 = *(void *)(v0 + 80);
      uint64_t v79 = _swiftEmptyArrayStorage;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24, 0);
      uint64_t v66 = v23;
      unint64_t v26 = v23 + ((*(unsigned __int8 *)(v25 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
      uint64_t v76 = v25;
      uint64_t v72 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v25 + 16);
      uint64_t v73 = *(void *)(v25 + 72);
      do
      {
        uint64_t v27 = *(void *)(v0 + 112);
        uint64_t v29 = *(void *)(v0 + 88);
        uint64_t v28 = *(void *)(v0 + 96);
        uint64_t v30 = *(void *)(v0 + 72);
        uint64_t v31 = v72(v27, v26, v28);
        uint64_t Suggestion = Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestionCandidate.utterance.getter(v31);
        uint64_t v33 = Apple_Parsec_Siri_V2alpha_ServerSuggestionUtterance.print.getter(Suggestion);
        uint64_t v35 = v34;
        (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v29, v30);
        (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v27, v28);
        char v36 = v79;
        if ((swift_isUniquelyReferenced_nonNull_native(v79) & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v36[2] + 1LL,  1);
          char v36 = v79;
        }

        unint64_t v38 = v36[2];
        unint64_t v37 = v36[3];
        if (v38 >= v37 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v37 > 1,  v38 + 1,  1);
          char v36 = v79;
        }

        void v36[2] = v38 + 1;
        uint64_t v39 = &v36[2 * v38];
        v39[4] = v33;
        void v39[5] = v35;
        v26 += v73;
        --v24;
      }

      while (v24);
      swift_bridgeObjectRelease(v66);
    }

    else
    {
      swift_bridgeObjectRelease(v22);
      char v36 = _swiftEmptyArrayStorage;
    }

    uint64_t v46 = *(void *)(v0 + 152);
    uint64_t v47 = *(void *)(v0 + 136);
    uint64_t v75 = *(void *)(v0 + 144);
    uint64_t v77 = *(void *)(v0 + 160);
    uint64_t v49 = *(void *)(v0 + 120);
    uint64_t v48 = *(void *)(v0 + 128);
    *(void *)(v0 + 24) = v36;
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    unint64_t v51 = lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v52 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v50, v51);
    unint64_t v54 = v53;
    swift_bridgeObjectRelease(v36);
    *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v54, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v71);
    swift_bridgeObjectRelease(v54);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
    _os_log_impl( &dword_0,  log,  v68,  "Donating alternatives from Information flow plugin for requestID %{public}s:\n%s",  v69,  0x16u);
    swift_arrayDestroy(v67, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1LL, -1LL);
    swift_slowDealloc(v69, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v77, v75);
  }

  else
  {
    uint64_t v41 = *(void *)(v0 + 152);
    uint64_t v40 = *(void *)(v0 + 160);
    uint64_t v43 = *(void *)(v0 + 136);
    uint64_t v42 = *(void *)(v0 + 144);
    uint64_t v44 = *(void *)(v0 + 120);
    uint64_t v45 = *(void *)(v0 + 128);
    swift_bridgeObjectRelease_n(*(void *)(v0 + 64), 2LL);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);

    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
  }

  uint64_t v55 = *(void *)(v0 + 120);
  uint64_t v56 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestion and conformance Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestion,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestion,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestion);
  uint64_t v57 = Message.serializedData(partial:)(0LL, v55, v56);
  uint64_t v58 = *(void *)(v0 + 160);
  uint64_t v59 = *(void *)(v0 + 136);
  uint64_t v60 = *(void *)(v0 + 112);
  uint64_t v61 = *(void *)(v0 + 88);
  uint64_t v62 = v57;
  unint64_t v64 = v63;
  specialized static SuggestionsIntentDonator.donateSuggestions(requestID:payloadKey:data:)( *(void *)(v0 + 56),  *(void *)(v0 + 64),  0xD000000000000015LL,  0x80000000000810D0LL,  v57,  v63);
  outlined consume of Data._Representation(v62, v64);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[8] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Action(0LL);
  void v3[9] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[10] = v6;
  uint64_t v7 = *(void *)(v6 + 64);
  v3[11] = v7;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v3[12] = swift_task_alloc(v8);
  v3[13] = swift_task_alloc(v8);
  v3[14] = swift_task_alloc(v8);
  uint64_t v9 = type metadata accessor for Date(0LL);
  v3[15] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for PerformanceUtil.Ticket(0LL);
  v3[16] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[17] = v11;
  uint64_t v12 = *(void *)(v11 + 64);
  v3[18] = v12;
  unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v3[19] = swift_task_alloc(v13);
  v3[20] = swift_task_alloc(v13);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v3[21] = swift_task_alloc((*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for UUID(0LL);
  v3[22] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v3[23] = v16;
  uint64_t v17 = *(void *)(v16 + 64);
  _BYTE v3[24] = v17;
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v3[25] = swift_task_alloc(v18);
  v3[26] = swift_task_alloc(v18);
  uint64_t v19 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SuggestionIntent(0LL);
  v3[27] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v3[28] = v20;
  unint64_t v21 = (*(void *)(v20 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[29] = swift_task_alloc(v21);
  v3[30] = swift_task_alloc(v21);
  v3[31] = swift_task_alloc(v21);
  return swift_task_switch( specialized static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:),  0LL,  0LL);
}

uint64_t specialized static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:)()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 224);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))( v2,  enum case for Apple_Parsec_Siri_V2alpha_SuggestionIntent.unspecified(_:),  v3);
  uint64_t v5 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SuggestionIntent and conformance Apple_Parsec_Siri_V2alpha_SuggestionIntent,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_SuggestionIntent,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_SuggestionIntent);
  LOBYTE(v1) = dispatch thunk of static Equatable.== infix(_:_:)(v1, v2, v3, v5);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v2, v3);
  if ((v1 & 1) != 0)
  {
    if (one-time initialization token for information == -1)
    {
LABEL_3:
      uint64_t v7 = type metadata accessor for Logger(0LL);
      uint64_t v8 = __swift_project_value_buffer(v7, (uint64_t)static Logger.information);
      uint64_t v9 = (void *)Logger.logObject.getter(v8);
      os_log_type_t v10 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled((os_log_t)v9, v10))
      {
LABEL_17:

        goto LABEL_33;
      }

      uint64_t v11 = swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl( &dword_0,  (os_log_t)v9,  v10,  "Current intent is unspecified. not logging engagement event",  (uint8_t *)v11,  2u);
LABEL_10:
      swift_slowDealloc(v11, -1LL, -1LL);
      goto LABEL_17;
    }

LABEL_35:
    swift_once(&one-time initialization token for information, one-time initialization function for information);
    goto LABEL_3;
  }

  unint64_t v121 = (uint64_t *)(v0 + 32);
  uint64_t v13 = *(void *)(v0 + 176);
  uint64_t v12 = *(void *)(v0 + 184);
  uint64_t v14 = *(void *)(v0 + 168);
  UUID.init(uuidString:)(*(void *)(v0 + 48), *(void *)(v0 + 56));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v14, 1LL, v13) == 1)
  {
    outlined destroy of Any?(*(void *)(v0 + 168), &demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v16 = *(void *)(v0 + 224);
    uint64_t v15 = *(void *)(v0 + 232);
    uint64_t v17 = *(void *)(v0 + 216);
    uint64_t v18 = *(void *)(v0 + 56);
    uint64_t v19 = *(void *)(v0 + 40);
    uint64_t v20 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v20, (uint64_t)static Logger.information);
    unint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
    v21(v15, v19, v17);
    uint64_t v22 = swift_bridgeObjectRetain_n(v18, 2LL);
    uint64_t v9 = (void *)Logger.logObject.getter(v22);
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled((os_log_t)v9, v23))
    {
      uint64_t v41 = *(void *)(v0 + 232);
      uint64_t v42 = *(void *)(v0 + 216);
      swift_bridgeObjectRelease_n(*(void *)(v0 + 56), 2LL);
      v6(v41, v42);
      goto LABEL_17;
    }

    uint64_t v116 = *(void *)(v0 + 248);
    uint64_t v118 = *(void *)(v0 + 232);
    uint64_t v24 = *(void *)(v0 + 216);
    uint64_t v25 = *(void *)(v0 + 48);
    unint64_t v26 = *(void *)(v0 + 56);
    uint64_t v11 = swift_slowAlloc(22LL, -1LL);
    uint64_t v124 = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v11 = 136315394;
    unint64_t v133 = v124;
    swift_bridgeObjectRetain(v26);
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, (uint64_t *)&v133);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    swift_bridgeObjectRelease_n(v26, 3LL);
    *(_WORD *)(v11 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    v21(v116, v118, v24);
    uint64_t v27 = String.init<A>(describing:)(v116, v24);
    unint64_t v29 = v28;
    *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, (uint64_t *)&v133);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v121);
    swift_bridgeObjectRelease(v29);
    v6(v118, v24);
    _os_log_impl( &dword_0,  (os_log_t)v9,  v23,  "requestId: %s is not a valid UUID. Unable to submit engagement for %s",  (uint8_t *)v11,  0x16u);
    swift_arrayDestroy(v124, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v124, -1LL, -1LL);
    goto LABEL_10;
  }

  uint64_t v30 = *(void *)(v0 + 120);
  unint64_t v117 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 184) + 32LL);
  uint64_t v31 = v117(*(void *)(v0 + 208), *(void *)(v0 + 168), *(void *)(v0 + 176));
  Date.init()(v31);
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0xD00000000000003ALL,  0x8000000000081130LL,  v30,  "InformationFlowPlugin/SuggestionsIntentDonator.swift",  52LL,  2LL,  28LL,  "donateEngagementToSiriSuggestions(currentIntent:requestId:)",  59LL,  2);
  if (one-time initialization token for mathSuggestionIntents != -1) {
    swift_once( &one-time initialization token for mathSuggestionIntents,  one-time initialization function for mathSuggestionIntents);
  }
  uint64_t v32 = *(void *)(static SuggestionConstants.mathSuggestionIntents + 16);
  if (v32)
  {
    uint64_t v33 = *(void *)(v0 + 240);
    uint64_t v35 = *(void *)(v0 + 216);
    uint64_t v34 = *(void *)(v0 + 224);
    uint64_t v36 = *(void *)(v0 + 40);
    unint64_t v37 = v6;
    unint64_t v38 = (*(unsigned __int8 *)(v34 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
    uint64_t v39 = static SuggestionConstants.mathSuggestionIntents;
    uint64_t v125 = *(void (**)(uint64_t, unint64_t, uint64_t))(v34 + 16);
    v125(v33, static SuggestionConstants.mathSuggestionIntents + v38, v35);
    swift_bridgeObjectRetain(v39);
    LOBYTE(v36) = dispatch thunk of static Equatable.== infix(_:_:)(v33, v36, v35, v5);
    uint64_t v129 = v37;
    v37(v33, v35);
    if ((v36 & 1) != 0)
    {
      uint64_t v40 = v39;
LABEL_26:
      swift_bridgeObjectRelease(v40);
      unint64_t v50 = 0xD000000000000018LL;
      unint64_t v49 = 0x80000000000811D0LL;
      goto LABEL_27;
    }

    uint64_t v113 = v39;
    if (v32 != 1)
    {
      uint64_t v119 = *(void *)(*(void *)(v0 + 224) + 72LL);
      unint64_t v43 = v39 + v119 + v38;
      uint64_t v44 = 1LL;
      while (1)
      {
        v125(*(void *)(v0 + 240), v43, *(void *)(v0 + 216));
        uint64_t v45 = v44 + 1;
        if (__OFADD__(v44, 1LL)) {
          break;
        }
        uint64_t v46 = *(void *)(v0 + 240);
        uint64_t v47 = *(void *)(v0 + 216);
        char v48 = dispatch thunk of static Equatable.== infix(_:_:)(v46, *(void *)(v0 + 40), v47, v5);
        v129(v46, v47);
        if ((v48 & 1) != 0)
        {
          uint64_t v40 = v113;
          goto LABEL_26;
        }

        ++v44;
        v43 += v119;
        if (v45 == v32) {
          goto LABEL_23;
        }
      }

      __break(1u);
      goto LABEL_35;
    }

LABEL_23:
    swift_bridgeObjectRelease(v113);
  }

  unint64_t v49 = 0x80000000000811B0LL;
  unint64_t v50 = 0xD000000000000014LL;
LABEL_27:
  uint64_t v51 = *(void *)(v0 + 248);
  uint64_t v53 = *(void *)(v0 + 216);
  uint64_t v52 = *(void *)(v0 + 224);
  uint64_t v54 = *(void *)(v0 + 40);
  unint64_t v133 = v50;
  unint64_t v134 = v49;
  v55._uint64_t countAndFlagsBits = 35LL;
  v55._object = (void *)0xE100000000000000LL;
  String.append(_:)(v55);
  v56._uint64_t countAndFlagsBits = 0x614E746E65746E69LL;
  v56._object = (void *)0xEA0000000000656DLL;
  String.append(_:)(v56);
  v57._uint64_t countAndFlagsBits = 61LL;
  v57._object = (void *)0xE100000000000000LL;
  String.append(_:)(v57);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v51, v54, v53);
  v58._uint64_t countAndFlagsBits = String.init<A>(describing:)(v51, v53);
  object = v58._object;
  String.append(_:)(v58);
  swift_bridgeObjectRelease(object);
  unint64_t v60 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  Action.init(actionId:params:)(v133, v134, v60);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v62 = *(void *)(v0 + 104);
  uint64_t v61 = *(void *)(v0 + 112);
  uint64_t v64 = *(void *)(v0 + 72);
  uint64_t v63 = *(void *)(v0 + 80);
  uint64_t v65 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v65, (uint64_t)static Logger.information);
  uint64_t v120 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 16);
  uint64_t v66 = v120(v62, v61, v64);
  uint64_t v67 = (os_log_s *)Logger.logObject.getter(v66);
  os_log_type_t v68 = static os_log_type_t.debug.getter();
  BOOL v69 = os_log_type_enabled(v67, v68);
  uint64_t v70 = *(void *)(v0 + 104);
  uint64_t v71 = *(void *)(v0 + 72);
  if (v69)
  {
    uint64_t v126 = *(void *)(v0 + 80);
    uint64_t v72 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v130 = swift_slowAlloc(32LL, -1LL);
    unint64_t v133 = v130;
    *(_DWORD *)uint64_t v72 = 136315138;
    uint64_t v73 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Action and conformance Action,  (uint64_t (*)(uint64_t))&type metadata accessor for Action,  (uint64_t)&protocol conformance descriptor for Action);
    uint64_t v74 = dispatch thunk of CustomStringConvertible.description.getter(v71, v73);
    unint64_t v76 = v75;
    uint64_t *v121 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, (uint64_t *)&v133);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v121, v0 + 40);
    swift_bridgeObjectRelease(v76);
    unint64_t v122 = *(void (**)(uint64_t, uint64_t))(v126 + 8);
    v122(v70, v71);
    _os_log_impl(&dword_0, v67, v68, "Donating %s engagement event to siri suggestions", v72, 0xCu);
    swift_arrayDestroy(v130, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v130, -1LL, -1LL);
    swift_slowDealloc(v72, -1LL, -1LL);
  }

  else
  {
    unint64_t v122 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 80) + 8LL);
    v122(*(void *)(v0 + 104), *(void *)(v0 + 72));
  }

  uint64_t v127 = *(void *)(v0 + 200);
  uint64_t v131 = *(void *)(v0 + 208);
  uint64_t v77 = *(void *)(v0 + 184);
  uint64_t v110 = *(void *)(v0 + 192);
  uint64_t v111 = v77;
  uint64_t v79 = *(void *)(v0 + 152);
  uint64_t v78 = *(void *)(v0 + 160);
  uint64_t v80 = *(void *)(v0 + 136);
  uint64_t v109 = *(void *)(v0 + 144);
  uint64_t v81 = *(void *)(v0 + 128);
  uint64_t v107 = *(void *)(v0 + 176);
  uint64_t v82 = *(void *)(v0 + 112);
  uint64_t v112 = v82;
  uint64_t v114 = v78;
  uint64_t v83 = *(void *)(v0 + 96);
  uint64_t v108 = *(void *)(v0 + 88);
  uint64_t v84 = *(void *)(v0 + 72);
  uint64_t v106 = *(void *)(v0 + 80);
  uint64_t v85 = *(void *)(v0 + 64);
  uint64_t v115 = v85;
  uint64_t v86 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56LL))(v85, 1LL, 1LL, v86);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 16))(v79, v78, v81);
  v120(v83, v82, v84);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 16))(v127, v131, v107);
  uint64_t v87 = *(unsigned __int8 *)(v80 + 80);
  uint64_t v88 = v80;
  uint64_t v89 = (v87 + 32) & ~v87;
  uint64_t v90 = *(unsigned __int8 *)(v106 + 80);
  uint64_t v91 = (v109 + v90 + v89) & ~v90;
  uint64_t v92 = *(unsigned __int8 *)(v77 + 80);
  uint64_t v93 = (v108 + v92 + v91) & ~v92;
  uint64_t v94 = swift_allocObject(&unk_98830, v93 + v110, v87 | v90 | v92 | 7);
  *(void *)(v94 + 16) = 0LL;
  *(void *)(v94 + 24) = 0LL;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 32))(v94 + v89, v79, v81);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v106 + 32))(v94 + v91, v83, v84);
  v117(v94 + v93, v127, v107);
  uint64_t v95 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5( v115,  (uint64_t)&async function pointer to partial apply for closure #1 in static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:),  v94);
  swift_release(v95);
  v122(v112, v84);
  (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v114, v81);
  (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v131, v107);
LABEL_33:
  uint64_t v96 = *(void *)(v0 + 240);
  uint64_t v97 = *(void *)(v0 + 232);
  uint64_t v99 = *(void *)(v0 + 200);
  uint64_t v98 = *(void *)(v0 + 208);
  uint64_t v101 = *(void *)(v0 + 160);
  uint64_t v100 = *(void *)(v0 + 168);
  uint64_t v102 = *(void *)(v0 + 152);
  uint64_t v104 = *(void *)(v0 + 112);
  uint64_t v103 = *(void *)(v0 + 120);
  uint64_t v123 = *(void *)(v0 + 104);
  uint64_t v128 = *(void *)(v0 + 96);
  uint64_t v132 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 248));
  swift_task_dealloc(v96);
  swift_task_dealloc(v97);
  swift_task_dealloc(v98);
  swift_task_dealloc(v99);
  swift_task_dealloc(v100);
  swift_task_dealloc(v101);
  swift_task_dealloc(v102);
  swift_task_dealloc(v103);
  swift_task_dealloc(v104);
  swift_task_dealloc(v123);
  swift_task_dealloc(v128);
  swift_task_dealloc(v132);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

  __break(1u);
LABEL_24:
  unint64_t v26 = 2;
  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v26,  1092LL,  0);
  __break(1u);
  return result;
}

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v9 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8LL));
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SABaseCommand,  &OBJC_CLASS___SABaseCommand_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v9 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8LL));
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAAceView,  &OBJC_CLASS___SAAceView_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

uint64_t specialized static SuggestionsIntentDonator.donateRelatedQuestionsSuggestions(_:requestID:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestionUtterance(0LL);
  void v3[9] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[10] = v5;
  v3[11] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate(0LL);
  v3[12] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[13] = v7;
  v3[14] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion(0LL);
  v3[15] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[16] = v9;
  v3[17] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Logger(0LL);
  v3[18] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[19] = v11;
  v3[20] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( specialized static SuggestionsIntentDonator.donateRelatedQuestionsSuggestions(_:requestID:),  0LL,  0LL);
}

uint64_t specialized static SuggestionsIntentDonator.donateRelatedQuestionsSuggestions(_:requestID:)()
{
  uint64_t v71 = v0 + 40;
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = *(void *)(v0 + 64);
  __swift_project_value_buffer(*(void *)(v0 + 144), (uint64_t)static Logger.information);
  uint64_t v2 = swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.info.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  unint64_t v6 = *(void *)(v0 + 64);
  if (v5)
  {
    uint64_t v7 = *(void *)(v0 + 56);
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v79 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, (uint64_t *)&v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v71, v0 + 48);
    swift_bridgeObjectRelease_n(v6, 3LL);
    _os_log_impl(&dword_0, v3, v4, "Donating related questions against request id: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 64), 2LL);
  }

  uint64_t v11 = *(void *)(v0 + 128);
  uint64_t v10 = *(void *)(v0 + 136);
  uint64_t v12 = *(void *)(v0 + 120);
  uint64_t v13 = *(void *)(v0 + 64);
  uint64_t v14 = *(void *)(v0 + 48);
  static Logger.generatorCategory.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v14, v12);
  uint64_t v15 = swift_bridgeObjectRetain_n(v13, 2LL);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    os_log_type_t v68 = v17;
    log = v16;
    uint64_t v19 = *(void *)(v0 + 56);
    unint64_t v18 = *(void *)(v0 + 64);
    uint64_t v20 = swift_slowAlloc(22LL, -1LL);
    uint64_t v67 = swift_slowAlloc(64LL, -1LL);
    uint64_t v78 = v67;
    *(_DWORD *)uint64_t v20 = 136446466;
    swift_bridgeObjectRetain(v18);
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    uint64_t v21 = swift_bridgeObjectRelease_n(v18, 3LL);
    BOOL v69 = (uint8_t *)v20;
    *(_WORD *)(v20 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    uint64_t v22 = Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.getter(v21);
    uint64_t v23 = v22;
    int64_t v24 = *(void *)(v22 + 16);
    if (v24)
    {
      uint64_t v25 = *(void *)(v0 + 104);
      uint64_t v74 = *(void *)(v0 + 80);
      uint64_t v79 = _swiftEmptyArrayStorage;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24, 0);
      uint64_t v66 = v23;
      unint64_t v26 = v23 + ((*(unsigned __int8 *)(v25 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
      uint64_t v76 = v25;
      uint64_t v72 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v25 + 16);
      uint64_t v73 = *(void *)(v25 + 72);
      do
      {
        uint64_t v27 = *(void *)(v0 + 112);
        uint64_t v29 = *(void *)(v0 + 88);
        uint64_t v28 = *(void *)(v0 + 96);
        uint64_t v30 = *(void *)(v0 + 72);
        uint64_t v31 = v72(v27, v26, v28);
        uint64_t v32 = Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate.utterance.getter(v31);
        uint64_t v33 = Apple_Parsec_Siri_V2alpha_ServerSuggestionUtterance.print.getter(v32);
        uint64_t v35 = v34;
        (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v29, v30);
        (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v27, v28);
        uint64_t v36 = v79;
        if ((swift_isUniquelyReferenced_nonNull_native(v79) & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v36[2] + 1LL,  1);
          uint64_t v36 = v79;
        }

        unint64_t v38 = v36[2];
        unint64_t v37 = v36[3];
        if (v38 >= v37 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v37 > 1,  v38 + 1,  1);
          uint64_t v36 = v79;
        }

        void v36[2] = v38 + 1;
        uint64_t v39 = &v36[2 * v38];
        v39[4] = v33;
        void v39[5] = v35;
        v26 += v73;
        --v24;
      }

      while (v24);
      swift_bridgeObjectRelease(v66);
    }

    else
    {
      swift_bridgeObjectRelease(v22);
      uint64_t v36 = _swiftEmptyArrayStorage;
    }

    uint64_t v46 = *(void *)(v0 + 152);
    uint64_t v47 = *(void *)(v0 + 136);
    uint64_t v75 = *(void *)(v0 + 144);
    uint64_t v77 = *(void *)(v0 + 160);
    uint64_t v49 = *(void *)(v0 + 120);
    uint64_t v48 = *(void *)(v0 + 128);
    *(void *)(v0 + 24) = v36;
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    unint64_t v51 = lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v52 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v50, v51);
    unint64_t v54 = v53;
    swift_bridgeObjectRelease(v36);
    *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v54, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v71);
    swift_bridgeObjectRelease(v54);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
    _os_log_impl( &dword_0,  log,  v68,  "Donating related questions from Information flow plugin for requestID %{public}s:\n%s",  v69,  0x16u);
    swift_arrayDestroy(v67, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1LL, -1LL);
    swift_slowDealloc(v69, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v77, v75);
  }

  else
  {
    uint64_t v41 = *(void *)(v0 + 152);
    uint64_t v40 = *(void *)(v0 + 160);
    uint64_t v43 = *(void *)(v0 + 136);
    uint64_t v42 = *(void *)(v0 + 144);
    uint64_t v44 = *(void *)(v0 + 120);
    uint64_t v45 = *(void *)(v0 + 128);
    swift_bridgeObjectRelease_n(*(void *)(v0 + 64), 2LL);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);

    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
  }

  uint64_t v55 = *(void *)(v0 + 120);
  uint64_t v56 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ServerSuggestion and conformance Apple_Parsec_Siri_V2alpha_ServerSuggestion,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_ServerSuggestion);
  uint64_t v57 = Message.serializedData(partial:)(0LL, v55, v56);
  uint64_t v58 = *(void *)(v0 + 160);
  uint64_t v59 = *(void *)(v0 + 136);
  uint64_t v60 = *(void *)(v0 + 112);
  uint64_t v61 = *(void *)(v0 + 88);
  uint64_t v62 = v57;
  unint64_t v64 = v63;
  specialized static SuggestionsIntentDonator.donateSuggestions(requestID:payloadKey:data:)( *(void *)(v0 + 56),  *(void *)(v0 + 64),  0xD000000000000017LL,  0x8000000000081110LL,  v57,  v63);
  outlined consume of Data._Representation(v62, v64);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized static SuggestionsIntentDonator.donateServerSuggestions(_:requestID:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestionUtterance(0LL);
  void v3[9] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[10] = v5;
  v3[11] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate(0LL);
  v3[12] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[13] = v7;
  v3[14] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion(0LL);
  v3[15] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[16] = v9;
  v3[17] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Logger(0LL);
  v3[18] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[19] = v11;
  v3[20] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(specialized static SuggestionsIntentDonator.donateServerSuggestions(_:requestID:), 0LL, 0LL);
}

uint64_t specialized static SuggestionsIntentDonator.donateServerSuggestions(_:requestID:)()
{
  uint64_t v71 = v0 + 40;
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = *(void *)(v0 + 64);
  __swift_project_value_buffer(*(void *)(v0 + 144), (uint64_t)static Logger.information);
  uint64_t v2 = swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.info.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  unint64_t v6 = *(void *)(v0 + 64);
  if (v5)
  {
    uint64_t v7 = *(void *)(v0 + 56);
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v79 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, (uint64_t *)&v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v71, v0 + 48);
    swift_bridgeObjectRelease_n(v6, 3LL);
    _os_log_impl(&dword_0, v3, v4, "Donating Siri Suggestions claim against: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 64), 2LL);
  }

  uint64_t v11 = *(void *)(v0 + 128);
  uint64_t v10 = *(void *)(v0 + 136);
  uint64_t v12 = *(void *)(v0 + 120);
  uint64_t v13 = *(void *)(v0 + 64);
  uint64_t v14 = *(void *)(v0 + 48);
  static Logger.generatorCategory.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v14, v12);
  uint64_t v15 = swift_bridgeObjectRetain_n(v13, 2LL);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    os_log_type_t v68 = v17;
    log = v16;
    uint64_t v19 = *(void *)(v0 + 56);
    unint64_t v18 = *(void *)(v0 + 64);
    uint64_t v20 = swift_slowAlloc(22LL, -1LL);
    uint64_t v67 = swift_slowAlloc(64LL, -1LL);
    uint64_t v78 = v67;
    *(_DWORD *)uint64_t v20 = 136446466;
    swift_bridgeObjectRetain(v18);
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    uint64_t v21 = swift_bridgeObjectRelease_n(v18, 3LL);
    BOOL v69 = (uint8_t *)v20;
    *(_WORD *)(v20 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    uint64_t v22 = Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.getter(v21);
    uint64_t v23 = v22;
    int64_t v24 = *(void *)(v22 + 16);
    if (v24)
    {
      uint64_t v25 = *(void *)(v0 + 104);
      uint64_t v74 = *(void *)(v0 + 80);
      uint64_t v79 = _swiftEmptyArrayStorage;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24, 0);
      uint64_t v66 = v23;
      unint64_t v26 = v23 + ((*(unsigned __int8 *)(v25 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
      uint64_t v76 = v25;
      uint64_t v72 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v25 + 16);
      uint64_t v73 = *(void *)(v25 + 72);
      do
      {
        uint64_t v27 = *(void *)(v0 + 112);
        uint64_t v29 = *(void *)(v0 + 88);
        uint64_t v28 = *(void *)(v0 + 96);
        uint64_t v30 = *(void *)(v0 + 72);
        uint64_t v31 = v72(v27, v26, v28);
        uint64_t v32 = Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate.utterance.getter(v31);
        uint64_t v33 = Apple_Parsec_Siri_V2alpha_ServerSuggestionUtterance.print.getter(v32);
        uint64_t v35 = v34;
        (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v29, v30);
        (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v27, v28);
        uint64_t v36 = v79;
        if ((swift_isUniquelyReferenced_nonNull_native(v79) & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v36[2] + 1LL,  1);
          uint64_t v36 = v79;
        }

        unint64_t v38 = v36[2];
        unint64_t v37 = v36[3];
        if (v38 >= v37 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v37 > 1,  v38 + 1,  1);
          uint64_t v36 = v79;
        }

        void v36[2] = v38 + 1;
        uint64_t v39 = &v36[2 * v38];
        v39[4] = v33;
        void v39[5] = v35;
        v26 += v73;
        --v24;
      }

      while (v24);
      swift_bridgeObjectRelease(v66);
    }

    else
    {
      swift_bridgeObjectRelease(v22);
      uint64_t v36 = _swiftEmptyArrayStorage;
    }

    uint64_t v46 = *(void *)(v0 + 152);
    uint64_t v47 = *(void *)(v0 + 136);
    uint64_t v75 = *(void *)(v0 + 144);
    uint64_t v77 = *(void *)(v0 + 160);
    uint64_t v49 = *(void *)(v0 + 120);
    uint64_t v48 = *(void *)(v0 + 128);
    *(void *)(v0 + 24) = v36;
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    unint64_t v51 = lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v52 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v50, v51);
    unint64_t v54 = v53;
    swift_bridgeObjectRelease(v36);
    *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v54, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v71);
    swift_bridgeObjectRelease(v54);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
    _os_log_impl( &dword_0,  log,  v68,  "Donating info server suggesions from Information flow plugin for requestID %{public}s:\n%s",  v69,  0x16u);
    swift_arrayDestroy(v67, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1LL, -1LL);
    swift_slowDealloc(v69, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v77, v75);
  }

  else
  {
    uint64_t v41 = *(void *)(v0 + 152);
    uint64_t v40 = *(void *)(v0 + 160);
    uint64_t v43 = *(void *)(v0 + 136);
    uint64_t v42 = *(void *)(v0 + 144);
    uint64_t v44 = *(void *)(v0 + 120);
    uint64_t v45 = *(void *)(v0 + 128);
    swift_bridgeObjectRelease_n(*(void *)(v0 + 64), 2LL);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);

    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
  }

  uint64_t v55 = *(void *)(v0 + 120);
  uint64_t v56 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ServerSuggestion and conformance Apple_Parsec_Siri_V2alpha_ServerSuggestion,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_ServerSuggestion);
  uint64_t v57 = Message.serializedData(partial:)(0LL, v55, v56);
  uint64_t v58 = *(void *)(v0 + 160);
  uint64_t v59 = *(void *)(v0 + 136);
  uint64_t v60 = *(void *)(v0 + 112);
  uint64_t v61 = *(void *)(v0 + 88);
  uint64_t v62 = v57;
  unint64_t v64 = v63;
  specialized static SuggestionsIntentDonator.donateSuggestions(requestID:payloadKey:data:)( *(void *)(v0 + 56),  *(void *)(v0 + 64),  0xD000000000000017LL,  0x80000000000810F0LL,  v57,  v63);
  outlined consume of Data._Representation(v62, v64);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams(0LL);
  v3[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[7] = v5;
  uint64_t v6 = *(void *)(v5 + 64);
  v3[8] = v6;
  void v3[9] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[10] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Date(0LL);
  v3[11] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for PerformanceUtil.Ticket(0LL);
  v3[12] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[13] = v10;
  uint64_t v11 = *(void *)(v10 + 64);
  v3[14] = v11;
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v3[15] = swift_task_alloc(v12);
  v3[16] = swift_task_alloc(v12);
  return swift_task_switch( specialized static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:),  0LL,  0LL);
}

uint64_t specialized static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:)( uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 88);
  Date.init()(a1);
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0xD00000000000003ELL,  0x80000000000811F0LL,  v2,  "InformationFlowPlugin/SuggestionsIntentDonator.swift",  52LL,  2LL,  94LL,  "donateShowMapsPointsToSiriSuggestions(_:requestID:)",  51LL,  2);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v4, (uint64_t)static Logger.information);
  uint64_t v5 = swift_bridgeObjectRetain_n(v3, 2LL);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.info.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  unint64_t v9 = *(void *)(v1 + 40);
  if (v8)
  {
    uint64_t v10 = *(void *)(v1 + 32);
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v39 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    swift_bridgeObjectRetain(v9);
    *(void *)(v1 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24);
    swift_bridgeObjectRelease_n(v9, 3LL);
    _os_log_impl(&dword_0, v6, v7, "Donating Siri Suggestions claim against: %s for SiriGeo", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v1 + 40), 2LL);
  }

  uint64_t v14 = *(void *)(v1 + 120);
  uint64_t v13 = *(void *)(v1 + 128);
  uint64_t v15 = *(void *)(v1 + 104);
  uint64_t v16 = *(void *)(v1 + 80);
  uint64_t v35 = v16;
  uint64_t v17 = *(void *)(v1 + 72);
  uint64_t v31 = *(void *)(v1 + 96);
  uint64_t v32 = v17;
  uint64_t v33 = *(void *)(v1 + 64);
  uint64_t v34 = *(void *)(v1 + 112);
  uint64_t v19 = *(void *)(v1 + 48);
  uint64_t v18 = *(void *)(v1 + 56);
  uint64_t v37 = *(void *)(v1 + 40);
  uint64_t v38 = *(void *)(v1 + 88);
  uint64_t v20 = *(void *)(v1 + 24);
  uint64_t v36 = *(void *)(v1 + 32);
  uint64_t v21 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v16, 1LL, 1LL, v21);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v14, v13, v31);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v17, v20, v19);
  uint64_t v22 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v23 = (v22 + 32) & ~v22;
  uint64_t v24 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v25 = (v34 + v24 + v23) & ~v24;
  unint64_t v26 = (v33 + v25 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v27 = swift_allocObject(&unk_98858, v26 + 16, v22 | v24 | 7);
  *(void *)(v27 + 16) = 0LL;
  *(void *)(v27 + 24) = 0LL;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v27 + v23, v14, v31);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v27 + v25, v32, v19);
  uint64_t v28 = (void *)(v27 + v26);
  *uint64_t v28 = v36;
  v28[1] = v37;
  swift_bridgeObjectRetain(v37);
  uint64_t v29 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5( v35,  (uint64_t)&async function pointer to partial apply for closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:),  v27);
  swift_release(v29);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v31);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v38);
  swift_task_dealloc(v35);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

ValueMetadata *type metadata accessor for SuggestionsIntentDonator()
{
  return &type metadata for SuggestionsIntentDonator;
}

uint64_t sub_43DA8()
{
  uint64_t v1 = type metadata accessor for PerformanceUtil.Ticket(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v6 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v7 + 8));
  outlined consume of Data._Representation(*(void *)(v0 + v8), *(void *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v5);
}

uint64_t partial apply for closure #1 in static SuggestionsIntentDonator.donateSuggestions(requestID:payloadKey:data:)()
{
  uint64_t v2 = *(void *)(type metadata accessor for PerformanceUtil.Ticket(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v5 = (v4 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = v0 + v3;
  unint64_t v7 = (uint64_t *)(v0 + v4);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  uint64_t v10 = *(void *)(v0 + v5);
  uint64_t v11 = *(void *)(v0 + v5 + 8);
  uint64_t v12 = (uint64_t *)(v0 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  uint64_t v15 = (void *)swift_task_alloc(dword_A2CBC);
  *(void *)(v1 + 16) = v15;
  *uint64_t v15 = v1;
  v15[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  v15[29] = v13;
  v15[30] = v14;
  v15[27] = v10;
  v15[28] = v11;
  v15[25] = v8;
  v15[26] = v9;
  _BYTE v15[24] = v6;
  return swift_task_switch( closure #1 in static SuggestionsIntentDonator.donateSuggestions(requestID:payloadKey:data:),  0LL,  0LL);
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }

  return result;
}

uint64_t sub_44014()
{
  uint64_t v17 = type metadata accessor for PerformanceUtil.Ticket(0LL);
  uint64_t v1 = *(void *)(v17 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v16 = type metadata accessor for Action(0LL);
  uint64_t v5 = *(void *)(v16 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v3 + v4 + v6) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v7 + v8 + v11) & ~v11;
  uint64_t v15 = v12 + *(void *)(v10 + 64);
  uint64_t v13 = v2 | v6 | v11 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v3, v17);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v7, v16);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v12, v9);
  return swift_deallocObject(v0, v15, v13);
}

uint64_t partial apply for closure #1 in static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:)()
{
  uint64_t v2 = *(void *)(type metadata accessor for PerformanceUtil.Ticket(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(type metadata accessor for Action(0LL) - 8);
  unint64_t v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  unint64_t v9 = v6 + v7 + v8;
  uint64_t v10 = v0 + v3;
  uint64_t v11 = v0 + v6;
  uint64_t v12 = v0 + (v9 & ~v8);
  uint64_t v13 = (void *)swift_task_alloc(dword_A2D0C);
  *(void *)(v1 + 16) = v13;
  *uint64_t v13 = v1;
  v13[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  v13[8] = v11;
  v13[9] = v12;
  v13[7] = v10;
  return swift_task_switch( closure #1 in static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:),  0LL,  0LL);
}

uint64_t sub_441E0()
{
  uint64_t v1 = type metadata accessor for PerformanceUtil.Ticket(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_bridgeObjectRelease(*(void *)(v0 + v11 + 8));
  return swift_deallocObject(v0, v11 + 16, v10);
}

uint64_t partial apply for closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:)( uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for PerformanceUtil.Ticket(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams(0LL) - 8);
  unint64_t v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v10 = *(void *)(v1 + 24);
  uint64_t v11 = v1 + v5;
  uint64_t v12 = v1 + v8;
  uint64_t v13 = (uint64_t *)(v1 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  uint64_t v16 = (void *)swift_task_alloc(dword_A2D24);
  *(void *)(v2 + 16) = v16;
  *uint64_t v16 = v2;
  v16[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:)( a1,  v9,  v10,  v11,  v12,  v14,  v15);
}

uint64_t sub_44390()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t partial apply for implicit closure #1 in closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:)( uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  unint64_t v5 = (void *)swift_task_alloc(dword_A2D3C);
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  void v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch( implicit closure #1 in closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:),  0LL,  0LL);
}

uint64_t outlined init with copy of Result<PommesLocationInfo, LocationError>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesLocationInfo, LocationError>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t ContinuationResultSetFlowProvider.init(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:informationViewFactory:patternFlowProvider:patternExecutor:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, void *a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, __int128 *a12)
{
  a9[28] = a1;
  a9[29] = a2;
  *a9 = specialized GenericResultSetParamBuilder.init(parameters:)(a3);
  a9[1] = v18;
  a9[2] = v19;
  a9[3] = v20;
  a9[27] = a4;
  a9[14] = a5;
  a9[15] = a6;
  outlined init with copy of OutputPublisherAsync((uint64_t)a7, (uint64_t)(a9 + 4));
  outlined init with copy of OutputPublisherAsync((uint64_t)a8, (uint64_t)(a9 + 9));
  static PatternFlowProvidingHelper.unwrap(_:with:)(a11, (uint64_t)a7, (uint64_t *)v22);
  outlined destroy of Any?(a11, &demangling cache variable for type metadata for PatternFlowProviding?);
  __swift_destroy_boxed_opaque_existential_1(a8);
  __swift_destroy_boxed_opaque_existential_1(a7);
  outlined init with take of PatternFlowProviding(v22, (uint64_t)(a9 + 16));
  a9[21] = a10;
  return outlined init with take of PatternFlowProviding(a12, (uint64_t)(a9 + 22));
}

id ContinuationResultSetFlowProvider.bundle.getter()
{
  return *(id *)(v0 + 216);
}

uint64_t ContinuationResultSetFlowProvider.patternId.getter()
{
  uint64_t v1 = *(void *)(v0 + 224);
  swift_bridgeObjectRetain(*(void *)(v0 + 232));
  return v1;
}

uint64_t closure #1 in ContinuationResultSetFlowProvider.outputManifest.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  NLContextUpdate.init()(v4);
  uint64_t v8 = *(void *)(a2 + 112);
  unint64_t v7 = *(void *)(a2 + 120);
  outlined copy of Data?(v8, v7);
  NLContextUpdate.pegasusConversationContext.setter(v8, v7);
  uint64_t v9 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v6, 0LL, 1LL, v9);
  return OutputGenerationManifest.nlContextUpdate.setter(v6);
}

uint64_t ContinuationResultSetFlowProvider.makeEmptyResultSetFlow()()
{
  unint64_t v1 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Logger?)
                              - 8)
                  + 64LL)
      + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v0[5] = swift_task_alloc(v1);
  v0[6] = swift_task_alloc(v1);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v0[7] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v0[8] = v3;
  v0[9] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(ContinuationResultSetFlowProvider.makeEmptyResultSetFlow(), 0LL, 0LL);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  int v8;
  uint64_t v9;
  os_log_s *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  unint64_t v1 = v0[5];
  uint64_t v3 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v6 = __swift_project_value_buffer(v4, (uint64_t)static Logger.information);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v7(v2, v6, v4);
  v7(v5, v2, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v5, 0LL, 1LL, v4);
  outlined init with copy of Logger?(v5, v1);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1LL, v4);
  uint64_t v9 = v0[5];
  if (v8 == 1)
  {
    outlined destroy of Any?(v9, (uint64_t *)&demangling cache variable for type metadata for Logger?);
  }

  else
  {
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    uint64_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc(32LL, -1LL);
      uint64_t v17 = swift_slowAlloc(64LL, -1LL);
      uint64_t v18 = v17;
      *(_DWORD *)uint64_t v12 = 136315650;
      uint64_t v13 = StaticString.description.getter( "/Library/Caches/com.apple.xbs/Sources/SiriInformationPlugin/InformationFlowPlugin/Flows/Patterns/Response/ ResultSet/ContinuationResultSetFlowProvider.swift",  155LL,  2LL);
      uint64_t v15 = v14;
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3);
      swift_bridgeObjectRelease(v15);
      *(_WORD *)(v12 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2048;
      v0[3] = 70LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4);
      *(_WORD *)(v12 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
      v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD000000000000093LL,  0x80000000000812D0LL,  &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5);
      _os_log_impl(&dword_0, v10, v11, "FatalError at %s:%lu - %s", (uint8_t *)v12, 0x20u);
      swift_arrayDestroy(v17, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    (*(void (**)(void, void))(v0[8] + 8LL))(v0[5], v0[7]);
  }

  static SiriKitLifecycle._logCrashToEventBus(_:)(0xD000000000000093LL, 0x80000000000812D0LL);
  return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000093LL,  0x80000000000812D0LL,  "/Library/Caches/com.apple.xbs/Sources/SiriInformationPlugin/InformationFlowPlugin/Flows/Patterns/Response/Res ultSet/ContinuationResultSetFlowProvider.swift",  155LL,  2LL,  70LL,  0);
}

uint64_t ContinuationResultSetFlowProvider.makeSingleItemFlow()()
{
  unint64_t v1 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Logger?)
                              - 8)
                  + 64LL)
      + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v0[5] = swift_task_alloc(v1);
  v0[6] = swift_task_alloc(v1);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v0[7] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v0[8] = v3;
  v0[9] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(ContinuationResultSetFlowProvider.makeSingleItemFlow(), 0LL, 0LL);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  int v8;
  uint64_t v9;
  os_log_s *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  unint64_t v1 = v0[5];
  uint64_t v3 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v6 = __swift_project_value_buffer(v4, (uint64_t)static Logger.information);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v7(v2, v6, v4);
  v7(v5, v2, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v5, 0LL, 1LL, v4);
  outlined init with copy of Logger?(v5, v1);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1LL, v4);
  uint64_t v9 = v0[5];
  if (v8 == 1)
  {
    outlined destroy of Any?(v9, (uint64_t *)&demangling cache variable for type metadata for Logger?);
  }

  else
  {
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    uint64_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc(32LL, -1LL);
      uint64_t v17 = swift_slowAlloc(64LL, -1LL);
      uint64_t v18 = v17;
      *(_DWORD *)uint64_t v12 = 136315650;
      uint64_t v13 = StaticString.description.getter( "/Library/Caches/com.apple.xbs/Sources/SiriInformationPlugin/InformationFlowPlugin/Flows/Patterns/Response/ ResultSet/ContinuationResultSetFlowProvider.swift",  155LL,  2LL);
      uint64_t v15 = v14;
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3);
      swift_bridgeObjectRelease(v15);
      *(_WORD *)(v12 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2048;
      v0[3] = 74LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4);
      *(_WORD *)(v12 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
      v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD00000000000008FLL,  0x8000000000081410LL,  &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5);
      _os_log_impl(&dword_0, v10, v11, "FatalError at %s:%lu - %s", (uint8_t *)v12, 0x20u);
      swift_arrayDestroy(v17, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    (*(void (**)(void, void))(v0[8] + 8LL))(v0[5], v0[7]);
  }

  static SiriKitLifecycle._logCrashToEventBus(_:)(0xD00000000000008FLL, 0x8000000000081410LL);
  return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000008FLL,  0x8000000000081410LL,  "/Library/Caches/com.apple.xbs/Sources/SiriInformationPlugin/InformationFlowPlugin/Flows/Patterns/Response/Res ultSet/ContinuationResultSetFlowProvider.swift",  155LL,  2LL,  74LL,  0);
}

uint64_t ContinuationResultSetFlowProvider.makeAllResultsFlow()()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DialogPhase(0LL);
  v1[3] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for OutputGenerationManifest(0LL);
  v1[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[5] = v4;
  v1[6] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for WindowedPaginationParameters(0LL);
  v1[7] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v1[8] = v6;
  void v1[9] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Date(0LL);
  v1[10] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for PerformanceUtil.Ticket(0LL);
  v1[11] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v1[12] = v9;
  v1[13] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(ContinuationResultSetFlowProvider.makeAllResultsFlow(), 0LL, 0LL);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  unint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  uint64_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "ContinuationResultSetFlowProvider.makeAllResultsFlow", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = v0[10];
  uint64_t v7 = v0[2];

  Date.init()(v8);
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0xD000000000000025LL,  0x80000000000814A0LL,  v6,  "InformationFlowPlugin/ContinuationResultSetFlowProvider.swift",  61LL,  2LL,  79LL,  "makeAllResultsFlow()",  20LL,  2);
  uint64_t v9 = *(void *)(v7 + 24);
  WindowedPaginationParameters.init(windowSize:_:)( 0LL,  closure #1 in static ResultParamBuilder.displayPaginationParams.getter,  0LL);
  uint64_t v10 = (void *)swift_task_alloc(dword_A2D64);
  v0[14] = v10;
  *uint64_t v10 = v0;
  v10[1] = ContinuationResultSetFlowProvider.makeAllResultsFlow();
  return ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:)(v9, v0[9]);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v1 = *(void **)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v15 = *(void *)(v0 + 96);
  uint64_t v16 = *(void *)(v0 + 88);
  uint64_t v17 = *(void *)(v0 + 80);
  uint64_t v18 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v13 = *(void *)(v0 + 40);
  uint64_t v14 = *(void *)(v0 + 32);
  uint64_t v5 = *(void **)(v0 + 16);
  uint64_t v6 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v7 = static PerformanceUtil.shared.getter(v6);
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v2, 0LL);
  swift_release(v7);
  uint64_t v8 = v5[19];
  uint64_t v9 = v5[20];
  __swift_project_boxed_opaque_existential_1(v5 + 16, v8);
  static DialogPhase.completion.getter();
  uint64_t v10 = swift_task_alloc(32LL);
  *(void *)(v10 + 16) = v5;
  OutputGenerationManifest.init(dialogPhase:_:)( v4,  partial apply for closure #1 in ContinuationResultSetFlowProvider.outputManifest.getter,  v10);
  swift_task_dealloc(v10);
  uint64_t v11 = dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)( v1,  v3,  v8,  v9);

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v3, v14);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v2, v16);
  swift_task_dealloc(v2);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + 24);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 96) + 8LL))(v1, *(void *)(v0 + 88));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ContinuationResultSetFlowProvider.makeAllResultsFlow()(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 112LL);
  *(void *)(*(void *)v2 + 12Hasher.init(_seed:)(v1, 0LL) = v1;
  swift_task_dealloc(v5);
  uint64_t v7 = v4[8];
  uint64_t v6 = v4[9];
  uint64_t v8 = v4[7];
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v9 = ContinuationResultSetFlowProvider.makeAllResultsFlow();
  }

  else
  {
    v4[16] = a1;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v9 = ContinuationResultSetFlowProvider.makeAllResultsFlow();
  }

  return swift_task_switch(v9, 0LL, 0LL);
}

uint64_t ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:)( uint64_t a1, uint64_t a2)
{
  void v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  uint64_t v4 = type metadata accessor for Date(0LL);
  v3[11] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[12] = v5;
  v3[13] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:),  0LL,  0LL);
}

void ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:)()
{
  uint64_t v35 = v0 + 2;
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v34 = __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v34);
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "ContinuationResultSetFlowProvider.executePatternForWindow", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t v5 = v0[8];
  uint64_t v6 = (uint64_t *)v0[10];

  unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v8 = WindowedPaginationParameters.asCATParameters()();
  uint64_t v9 = specialized Dictionary.merging(_:uniquingKeysWith:)(v8, v7);
  uint64_t v10 = *v6;
  uint64_t v11 = v6[1];
  uint64_t v12 = v6[2];
  unint64_t v13 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v14 = swift_bridgeObjectRetain(v12);
  uint64_t v15 = specialized Dictionary.merging(_:uniquingKeysWith:)( v14,  (void (*)(_OWORD *__return_ptr, void *, _OWORD *))closure #1 in variable initialization expression of static GenericResultSetParamBuilder.duplicateHandler,  0LL,  v13);
  uint64_t v16 = specialized GenericResultSetParamBuilder.itemPatternParameters(items:)(v5);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : Any]]);
  v37[0] = (uint64_t)v16;
  swift_bridgeObjectRetain(v11);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
  uint64_t v39 = v15;
  specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(v37, v10, v11, isUniquelyReferenced_nonNull_native, v35);
  uint64_t v18 = v39;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  swift_bridgeObjectRelease(v11);
  outlined destroy of Any?((uint64_t)v35, &demangling cache variable for type metadata for Any?);
  uint64_t v19 = specialized Dictionary.merging(_:uniquingKeysWith:)(v18, v9);
  v0[14] = v19;
  uint64_t v20 = swift_bridgeObjectRetain_n(v19, 2LL);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    v37[0] = v24;
    *(_DWORD *)uint64_t v23 = 136315138;
    uint64_t v25 = swift_bridgeObjectRetain(v19);
    uint64_t v26 = Dictionary.description.getter( v25,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    unint64_t v28 = v27;
    swift_bridgeObjectRelease(v19);
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease_n(v19, 2LL);
    _os_log_impl( &dword_0,  v21,  v22,  "ContinuationResultSetFlowProvider.executePatternForWindow parameters: %s",  v23,  0xCu);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v19, 2LL);
  }

  uint64_t v29 = v0[10];
  uint64_t v30 = type metadata accessor for PerformanceUtil(0LL);
  v0[15] = static PerformanceUtil.shared.getter(v30);
  uint64_t v31 = swift_task_alloc(32LL);
  v0[16] = v31;
  *(void *)(v31 + 16) = v29;
  *(void *)(v31 + 24) = v19;
  Date.init()(v31);
  v0[17] = v32;
  unint64_t v33 = type metadata accessor for PatternExecutionResult();
  *uint64_t v32 = v0;
  v32[1] = ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:);
  uint64_t v45 = v31;
  unint64_t v46 = v33;
  uint64_t v44 = &async function pointer to partial apply for closure #2 in ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:);
  char v43 = 2;
  uint64_t v42 = 58LL;
  uint64_t v40 = 146LL;
  uint64_t v41 = "executePatternForWindow(windowItems:paginationParameters:)";
  __asm { BR              X8 }

uint64_t ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:)()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 136LL);
  *(void *)(*(void *)v1 + 144LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v2[14];
    uint64_t v5 = v2[15];
    (*(void (**)(void, void))(v2[12] + 8LL))(v2[13], v2[11]);
    swift_bridgeObjectRelease(v4);
    swift_release(v5);
    uint64_t v6 = ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:);
  }

  else
  {
    uint64_t v7 = v2[15];
    uint64_t v8 = v2[16];
    uint64_t v9 = v2[14];
    (*(void (**)(void, void))(v2[12] + 8LL))(v2[13], v2[11]);
    swift_bridgeObjectRelease(v9);
    swift_release(v7);
    swift_task_dealloc(v8);
    uint64_t v6 = ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:);
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 104));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 104);
  swift_task_dealloc(*(void *)(v0 + 128));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ContinuationResultSetFlowProvider.makeWindowingConfiguration(promptType:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptFlowProviderType<(), [GenericResultSetItem]>);
  v3[6] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for PromptType(0LL);
  v3[7] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[8] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  void v3[9] = swift_task_alloc(v7);
  v3[10] = swift_task_alloc(v7);
  v3[11] = swift_task_alloc(v7);
  return swift_task_switch(ContinuationResultSetFlowProvider.makeWindowingConfiguration(promptType:), 0LL, 0LL);
}

uint64_t ContinuationResultSetFlowProvider.makeWindowingConfiguration(promptType:)()
{
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "ContinuationResultSetFlowProvider.makeWindowingConfiguration", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v7 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v8 = *(void *)(v0 + 56);
  uint64_t v9 = *(void *)(v0 + 64);
  uint64_t v10 = *(void *)(v0 + 32);

  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  uint64_t v12 = v11(v6, v10, v8);
  static PromptType.continuation.getter(v12);
  uint64_t v13 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type PromptType and conformance PromptType,  (uint64_t (*)(uint64_t))&type metadata accessor for PromptType,  (uint64_t)&protocol conformance descriptor for PromptType);
  char v14 = dispatch thunk of static Equatable.== infix(_:_:)(v7, v6, v8, v13);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v15(v7, v8);
  v15(v6, v8);
  if ((v14 & 1) != 0)
  {
    uint64_t v16 = *(void *)(v0 + 40);
    uint64_t v17 = *(void *)(v0 + 48);
    uint64_t v18 = *(void *)(v0 + 24);
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GenericResultSetItem]);
    unint64_t v20 = lazy protocol witness table accessor for type ContinuationResultSetFlowProvider and conformance ContinuationResultSetFlowProvider();
    static PromptFlowProviderType.continuation<A>(_:)( v16,  v19,  &type metadata for ContinuationResultSetFlowProvider,  v20);
    WindowingConfiguration.init(promptFlowProviderType:padding:windowSizeOverride:)( v17,  1LL,  0LL,  1LL,  (char *)&type metadata for () + 8,  v19);
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WindowingConfiguration<(), [GenericResultSetItem]>);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v18, 0LL, 1LL, v21);
  }

  else
  {
    uint64_t v22 = v11(*(void *)(v0 + 72), *(void *)(v0 + 32), *(void *)(v0 + 56));
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.error.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    uint64_t v26 = *(void *)(v0 + 72);
    uint64_t v27 = *(void *)(v0 + 56);
    if (v25)
    {
      unint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v29 = swift_slowAlloc(32LL, -1LL);
      uint64_t v40 = v29;
      *(_DWORD *)unint64_t v28 = 136315138;
      uint64_t v30 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type PromptType and conformance PromptType,  (uint64_t (*)(uint64_t))&type metadata accessor for PromptType,  (uint64_t)&protocol conformance descriptor for PromptType);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(v27, v30);
      unint64_t v33 = v32;
      *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
      swift_bridgeObjectRelease(v33);
      v15(v26, v27);
      _os_log_impl(&dword_0, v23, v24, "Unsupported promptType '%s'. Will not support windowing.", v28, 0xCu);
      swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    else
    {
      v15(*(void *)(v0 + 72), *(void *)(v0 + 56));
    }

    uint64_t v34 = *(void *)(v0 + 24);
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WindowingConfiguration<(), [GenericResultSetItem]>);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL))(v34, 1LL, 1LL, v35);
  }

  uint64_t v36 = *(void *)(v0 + 80);
  uint64_t v37 = *(void *)(v0 + 72);
  uint64_t v38 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ContinuationResultSetFlowProvider.makeFinalWindowFlow(paginationParameters:windowContent:)( uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v3[5] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[7] = v6;
  v3[8] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( ContinuationResultSetFlowProvider.makeFinalWindowFlow(paginationParameters:windowContent:),  0LL,  0LL);
}

uint64_t ContinuationResultSetFlowProvider.makeFinalWindowFlow(paginationParameters:windowContent:)()
{
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "ContinuationResultSetFlowProvider.makeFinalWindowFlow", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = (uint64_t **)swift_task_alloc(dword_A2D64);
  v0[9] = (uint64_t)v6;
  *uint64_t v6 = v0;
  v6[1] = (uint64_t *)ContinuationResultSetFlowProvider.makeFinalWindowFlow(paginationParameters:windowContent:);
  return ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:)(v0[3], v0[2]);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v1 = *(void **)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  os_log_type_t v4 = *(void *)(v0 + 40);
  uint64_t v11 = *(void *)(v0 + 48);
  uint64_t v5 = *(void **)(v0 + 32);
  uint64_t v6 = v5[19];
  uint64_t v7 = v5[20];
  __swift_project_boxed_opaque_existential_1(v5 + 16, v6);
  static DialogPhase.completion.getter();
  uint64_t v8 = swift_task_alloc(32LL);
  *(void *)(v8 + 16) = v5;
  OutputGenerationManifest.init(dialogPhase:_:)( v4,  closure #1 in ContinuationResultSetFlowProvider.outputManifest.getterpartial apply,  v8);
  swift_task_dealloc(v8);
  uint64_t v9 = dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)( v1,  v2,  v6,  v7);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v11);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v9);
}

uint64_t ContinuationResultSetFlowProvider.makeFinalWindowFlow(paginationParameters:windowContent:)( uint64_t a1)
{
  os_log_type_t v4 = (void *)*v2;
  uint64_t v5 = *(void *)(*v2 + 72);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v7 = v4[5];
    swift_task_dealloc(v4[8]);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v6 + 8))();
  }

  else
  {
    v4[10] = a1;
    return swift_task_switch( ContinuationResultSetFlowProvider.makeFinalWindowFlow(paginationParameters:windowContent:),  0LL,  0LL);
  }

uint64_t ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:)( uint64_t a1, uint64_t a2)
{
  v3[34] = a2;
  v3[35] = v2;
  v3[33] = a1;
  uint64_t v4 = type metadata accessor for ConfirmationResponse(0LL);
  v3[36] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[37] = v5;
  v3[38] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for WindowedPaginationParameters(0LL);
  v3[39] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[40] = v7;
  uint64_t v8 = *(void *)(v7 + 64);
  v3[41] = v8;
  v3[42] = swift_task_alloc((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DialogPhase(0LL);
  v3[43] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[44] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[45] = v11;
  v3[46] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:),  0LL,  0LL);
}

uint64_t ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:)()
{
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "ContinuationResultSetFlowProvider.makeWindowFlow", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v42 = *(void *)(v0 + 368);
  uint64_t v43 = *(void *)(v0 + 360);
  uint64_t v6 = *(void *)(v0 + 344);
  uint64_t v48 = v6;
  uint64_t v7 = *(void *)(v0 + 336);
  uint64_t v9 = *(void *)(v0 + 312);
  uint64_t v8 = *(void *)(v0 + 320);
  uint64_t v44 = *(void *)(v0 + 352);
  uint64_t v45 = *(void *)(v0 + 296);
  uint64_t v10 = *(void **)(v0 + 280);
  uint64_t v46 = *(void *)(v0 + 288);
  uint64_t v47 = *(void *)(v0 + 304);
  uint64_t v11 = *(void *)(v0 + 264);
  uint64_t v40 = *(void *)(v0 + 328);
  uint64_t v41 = *(void *)(v0 + 272);

  static DialogPhase.completion.getter();
  uint64_t v12 = swift_task_alloc(32LL);
  *(void *)(v12 + 16) = v10;
  OutputGenerationManifest.init(dialogPhase:_:)( v6,  closure #1 in ContinuationResultSetFlowProvider.outputManifest.getterpartial apply,  v12);
  swift_task_dealloc(v12);
  outlined init with copy of ContinuationResultSetFlowProvider((uint64_t)v10, v0 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v11, v9);
  uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = (v13 + 264) & ~v13;
  uint64_t v15 = swift_allocObject(&unk_988A8, v14 + v40, v13 | 7);
  __int128 v16 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v15 + 208) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v15 + 224) = v16;
  *(_OWORD *)(v15 + 240) = *(_OWORD *)(v0 + 240);
  __int128 v17 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v15 + 144) = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v15 + 160) = v17;
  __int128 v18 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v15 + 176) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v15 + 19__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v18;
  __int128 v19 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v15 + 80) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v15 + 96) = v19;
  __int128 v20 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v15 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v15 + 128) = v20;
  __int128 v21 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v15 + 16) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v15 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v21;
  __int128 v22 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v15 + 48) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v15 + 64) = v22;
  *(void *)(v15 + 256) = v41;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v15 + v14, v7, v9);
  uint64_t v23 = type metadata accessor for ResponseFactory(0LL);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  uint64_t v24 = swift_bridgeObjectRetain(v41);
  uint64_t v25 = ResponseFactory.init()(v24);
  uint64_t v26 = type metadata accessor for RFSimpleYesNoPromptFlowStrategy(0LL);
  uint64_t v27 = swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  unint64_t v28 = (uint64_t *)(v27 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_responseGenerator);
  v28[3] = v23;
  v28[4] = (uint64_t)&protocol witness table for ResponseFactory;
  *unint64_t v28 = v25;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32))( v27 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_baseManifest,  v42,  v44);
  uint64_t v29 = (void *)(v27 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_rejectionOutputProducer);
  *uint64_t v29 = &async function pointer to closure #1 in default argument 2 of RFSimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:);
  v29[1] = 0LL;
  uint64_t v30 = (void *)(v27
                 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_cancellationOutputProducer);
  *uint64_t v30 = &async function pointer to closure #1 in default argument 3 of RFSimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:);
  v30[1] = 0LL;
  uint64_t v31 = (void *)(v27
                 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_promptPatternExecutionProducer);
  *uint64_t v31 = &async function pointer to partial apply for closure #1 in ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:);
  v31[1] = v15;
  uint64_t v32 = v10[19];
  uint64_t v33 = v10[20];
  __swift_project_boxed_opaque_existential_1(v10 + 16, v32);
  (*(void (**)(uint64_t, void, uint64_t))(v45 + 104))( v47,  enum case for ConfirmationResponse.confirmed(_:),  v46);
  uint64_t v34 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type RFSimpleYesNoPromptFlowStrategy and conformance RFSimpleYesNoPromptFlowStrategy,  type metadata accessor for RFSimpleYesNoPromptFlowStrategy,  (uint64_t)&protocol conformance descriptor for RFSimpleYesNoPromptFlowStrategy);
  uint64_t v35 = dispatch thunk of PatternFlowProviding.makeResponseFlowWithContinuationPrompt<A>(strategy:shouldContinueForResponse:)( v27,  v47,  v26,  v34,  v32,  v33);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v47, v46);
  *(void *)(v0 + 256) = v35;
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<WindowingAction<()>>);
  unint64_t v37 = lazy protocol witness table accessor for type AnyValueFlow<WindowingAction<()>> and conformance AnyValueFlow<A>();
  uint64_t v38 = Flow.eraseToAnyValueFlow()(v36, v37);
  swift_release(v27);
  swift_release(v35);
  swift_task_dealloc(v42);
  swift_task_dealloc(v48);
  swift_task_dealloc(v7);
  swift_task_dealloc(v47);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v38);
}

uint64_t closure #1 in ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for Date(0LL);
  v3[5] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for PerformanceUtil.Ticket(0LL);
  v3[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[7] = v6;
  v3[8] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( closure #1 in ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:),  0LL,  0LL);
}

uint64_t closure #1 in ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:)( uint64_t a1)
{
  uint64_t v2 = v1[5];
  Date.init()(a1);
  char v5 = 2;
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0xD00000000000003ALL,  0x8000000000081530LL,  v2,  "InformationFlowPlugin/ContinuationResultSetFlowProvider.swift",  61LL,  2LL,  114LL,  "makeWindowFlow(paginationParameters:windowContent:)",  51LL,  v5);
  uint64_t v3 = (uint64_t **)swift_task_alloc(dword_A2D64);
  void v1[9] = (uint64_t)v3;
  void *v3 = v1;
  v3[1] = (uint64_t *)closure #1 in ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:);
  return ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:)(v1[3], v1[4]);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v4 = *v2;
  char v5 = *(void *)(*v2 + 72);
  *(void *)(*v2 + 80) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = closure #1 in ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:);
  }

  else
  {
    *(void *)(v4 + 88) = a1;
    uint64_t v6 = closure #1 in ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:);
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t closure #1 in ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:)()
{
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  type metadata accessor for PerformanceUtil(0LL);
  uint64_t v5 = static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v1, 0LL);
  swift_release(v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 88));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 56) + 8LL))(v1, *(void *)(v0 + 48));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized Dictionary.merging(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  uint64_t v8 = a2;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)( a1,  (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B),  0LL,  isUniquelyReferenced_nonNull_native,  (uint64_t)&v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  if (v2) {
    swift_bridgeObjectRelease(v6);
  }
  return v6;
}

uint64_t closure #2 in ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch( closure #2 in ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:),  0LL,  0LL);
}

uint64_t closure #2 in ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:)()
{
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = v1[25];
  uint64_t v3 = v1[26];
  __swift_project_boxed_opaque_existential_1(v1 + 22, v2);
  uint64_t v5 = v1[28];
  uint64_t v4 = v1[29];
  uint64_t v6 = v1[27];
  uint64_t v7 = *(int **)(v3 + 8);
  uint64_t v10 = (int *)((char *)v7 + *v7);
  uint64_t v8 = (void *)swift_task_alloc(v7[1]);
  v0[5] = v8;
  *uint64_t v8 = v0;
  v8[1] = closure #2 in ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, void *, uint64_t, uint64_t))v10)( v5,  v4,  v6,  v0[4],  v1 + 9,  v2,  v3);
}

{
  uint64_t v0;
  **(void **)(v0 + 16) = *(void *)(v0 + 48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:)( uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 40);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1) {
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
  *(void *)(v4 + 48) = a1;
  return swift_task_switch( closure #2 in ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:),  0LL,  0LL);
}

uint64_t protocol witness for ResultSetFlowProvider.makeNarrowingPromptFlowIfNeeded() in conformance ContinuationResultSetFlowProvider()
{
  uint64_t v1 = ResultSetFlowProvider.makeNarrowingPromptFlowIfNeeded()();
  return protocol witness for ResultSetFlowProvider.makeNarrowingPromptFlowIfNeeded() in conformance ContinuationResultSetFlowProvider( *(uint64_t (**)(uint64_t))(v0 + 8),  v0,  v1);
}

uint64_t protocol witness for ResultSetFlowProvider.makeEmptyResultSetFlow() in conformance ContinuationResultSetFlowProvider()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_A2D4C);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for PatternExecutorProtocol.execute(pattern:in:with:) in conformance PatternExecutor;
  return ContinuationResultSetFlowProvider.makeEmptyResultSetFlow()();
}

uint64_t protocol witness for ResultSetFlowProvider.makeSingleItemFlow() in conformance ContinuationResultSetFlowProvider()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_A2D54);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for PatternExecutorProtocol.execute(pattern:in:with:) in conformance PatternExecutor;
  return ContinuationResultSetFlowProvider.makeSingleItemFlow()();
}

uint64_t protocol witness for ResultSetFlowProvider.makeAllResultsFlow() in conformance ContinuationResultSetFlowProvider()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_A2D5C);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for PatternExecutorProtocol.execute(pattern:in:with:) in conformance PatternExecutor;
  return ContinuationResultSetFlowProvider.makeAllResultsFlow()();
}

uint64_t protocol witness for ResultSetFlowProvider.makeWindowingConfiguration(promptType:) in conformance ContinuationResultSetFlowProvider( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_A2D6C);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return ContinuationResultSetFlowProvider.makeWindowingConfiguration(promptType:)(a1, a2);
}

uint64_t protocol witness for ContinuationPromptFlowProvider.makeFinalWindowFlow(paginationParameters:windowContent:) in conformance ContinuationResultSetFlowProvider( uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (void *)swift_task_alloc(dword_A2DA4);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PatternExecutorProtocol.execute(pattern:in:with:) in conformance PatternExecutor;
  return ContinuationResultSetFlowProvider.makeFinalWindowFlow(paginationParameters:windowContent:)(a1, v4);
}

uint64_t protocol witness for WindowingFlowProvider.makeWindowFlow(paginationParameters:windowContent:) in conformance ContinuationResultSetFlowProvider( uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (void *)swift_task_alloc(dword_A2DAC);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:);
  return ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:)(a1, v4);
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v10 = ~v9;
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v12 = -v9;
  uint64_t v53 = a1;
  uint64_t v54 = a1 + 64;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  else {
    uint64_t v13 = -1LL;
  }
  uint64_t v55 = v10;
  uint64_t v56 = 0LL;
  uint64_t v57 = v13 & v11;
  uint64_t v58 = a2;
  uint64_t v59 = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain(a3);
  specialized LazyMapSequence.Iterator.next()(&v51);
  uint64_t v14 = *((void *)&v51 + 1);
  if (!*((void *)&v51 + 1)) {
    goto LABEL_26;
  }
  uint64_t v15 = v51;
  outlined init with take of Any(v52, v50);
  __int128 v16 = *(void **)a5;
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v14);
  uint64_t v19 = v16[2];
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  char v22 = v17;
  if (v16[3] >= v21)
  {
    if ((a4 & 1) != 0)
    {
      if ((v17 & 1) != 0) {
        goto LABEL_12;
      }
    }

    else
    {
      specialized _NativeDictionary.copy()();
      if ((v22 & 1) != 0) {
        goto LABEL_12;
      }
    }

LABEL_26:
    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    outlined consume of [String : Any].Iterator._Variant(v53);
    return swift_release(v59);
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, a4 & 1);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v14);
  if ((v22 & 1) == (v24 & 1))
  {
    unint64_t v18 = v23;
    if ((v22 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    uint64_t v25 = 32 * v18;
    outlined init with copy of Any(*(void *)(*(void *)a5 + 56LL) + v25, (uint64_t)v49);
    __swift_destroy_boxed_opaque_existential_1(v50);
    swift_bridgeObjectRelease(v14);
    uint64_t v26 = (void *)(*(void *)(*(void *)a5 + 56LL) + v25);
    __swift_destroy_boxed_opaque_existential_1(v26);
    outlined init with take of Any(v49, v26);
    goto LABEL_16;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  *(void *)&v41[0] = 0LL;
  *((void *)&v41[0] + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  v36._object = (void *)0x80000000000824A0LL;
  v36._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v36);
  _print_unlocked<A, B>(_:_:)( v43,  v41,  &type metadata for String,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v37._uint64_t countAndFlagsBits = 39LL;
  v37._object = (void *)0xE100000000000000LL;
  String.append(_:)(v37);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  *(void *)&v41[0],  *((void *)&v41[0] + 1),  "Swift/NativeDictionary.swift",  28LL,  2LL,  783LL,  0);
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in ContinuationResultSetFlowProvider.outputManifest.getter(uint64_t a1)
{
  return closure #1 in ContinuationResultSetFlowProvider.outputManifest.getter(a1, *(void *)(v1 + 16));
}

uint64_t outlined init with copy of ContinuationResultSetFlowProvider(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_46E14()
{
  uint64_t v1 = type metadata accessor for WindowedPaginationParameters(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 48));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 88));
  unint64_t v5 = *(void *)(v0 + 136);
  if (v5 >> 60 != 15) {
    outlined consume of Data._Representation(*(void *)(v0 + 128), v5);
  }
  uint64_t v6 = (v3 + 264) & ~v3;
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 144));
  swift_release(*(void *)(v0 + 184));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 192));

  swift_bridgeObjectRelease(*(void *)(v0 + 248));
  swift_bridgeObjectRelease(*(void *)(v0 + 256));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v6, v1);
  return swift_deallocObject(v0, v6 + v4, v3 | 7);
}

uint64_t partial apply for closure #1 in ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:)()
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for WindowedPaginationParameters(0LL) - 8) + 80LL);
  uint64_t v3 = v0 + 16;
  uint64_t v4 = *(void *)(v0 + 256);
  uint64_t v5 = v0 + ((v2 + 264) & ~v2);
  uint64_t v6 = (void *)swift_task_alloc(dword_A2DB4);
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = partial apply for closure #1 in ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:);
  return closure #1 in ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:)(v3, v4, v5);
}

uint64_t partial apply for closure #1 in ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:)( uint64_t a1)
{
  uint64_t v4 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

unint64_t lazy protocol witness table accessor for type AnyValueFlow<WindowingAction<()>> and conformance AnyValueFlow<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyValueFlow<WindowingAction<()>> and conformance AnyValueFlow<A>;
  if (!lazy protocol witness table cache variable for type AnyValueFlow<WindowingAction<()>> and conformance AnyValueFlow<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyValueFlow<WindowingAction<()>>);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AnyValueFlow<A>, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnyValueFlow<WindowingAction<()>> and conformance AnyValueFlow<A>);
  }

  return result;
}

uint64_t destroy for ContinuationResultSetFlowProvider(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 120);
  if (v2 >> 60 != 15) {
    outlined consume of Data._Representation(*(void *)(a1 + 112), v2);
  }
  __swift_destroy_boxed_opaque_existential_1((void *)(a1 + 128));
  swift_release(*(void *)(a1 + 168));
  __swift_destroy_boxed_opaque_existential_1((void *)(a1 + 176));

  return swift_bridgeObjectRelease(*(void *)(a1 + 232));
}

uint64_t initializeWithCopy for ContinuationResultSetFlowProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = a2 + 32;
  __int128 v8 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v8;
  uint64_t v9 = v8;
  uint64_t v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v10(a1 + 32, v7, v9);
  __int128 v11 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 96) = v11;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 72, a2 + 72);
  uint64_t v12 = (uint64_t *)(a2 + 112);
  unint64_t v13 = *(void *)(a2 + 120);
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(_OWORD *)v12;
  }

  else
  {
    uint64_t v14 = *v12;
    outlined copy of Data._Representation(*v12, *(void *)(a2 + 120));
    *(void *)(a1 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v14;
    *(void *)(a1 + 120) = v13;
  }

  __int128 v15 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 15__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v15;
  (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1 + 128, a2 + 128);
  uint64_t v16 = *(void *)(a2 + 168);
  *(void *)(a1 + 168) = v16;
  __int128 v17 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 200) = v17;
  uint64_t v18 = v17;
  uint64_t v19 = **(void (***)(uint64_t, uint64_t, uint64_t))(v17 - 8);
  swift_retain(v16);
  v19(a1 + 176, a2 + 176, v18);
  BOOL v20 = *(void **)(a2 + 216);
  uint64_t v21 = *(void *)(a2 + 224);
  *(void *)(a1 + 216) = v20;
  *(void *)(a1 + 224) = v21;
  uint64_t v22 = *(void *)(a2 + 232);
  *(void *)(a1 + 23__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v22;
  id v23 = v20;
  swift_bridgeObjectRetain(v22);
  return a1;
}

void *assignWithCopy for ContinuationResultSetFlowProvider(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  __swift_assign_boxed_opaque_existential_1(a1 + 4, a2 + 4);
  __swift_assign_boxed_opaque_existential_1(a1 + 9, a2 + 9);
  uint64_t v10 = a2 + 14;
  unint64_t v11 = a2[15];
  if (a1[15] >> 60 != 15LL)
  {
    if (v11 >> 60 != 15)
    {
      uint64_t v13 = *v10;
      outlined copy of Data._Representation(*v10, a2[15]);
      uint64_t v14 = a1[14];
      unint64_t v15 = a1[15];
      a1[14] = v13;
      a1[15] = v11;
      outlined consume of Data._Representation(v14, v15);
      goto LABEL_8;
    }

    outlined destroy of Data((uint64_t)(a1 + 14));
    goto LABEL_6;
  }

  if (v11 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 7) = *(_OWORD *)v10;
    goto LABEL_8;
  }

  uint64_t v12 = *v10;
  outlined copy of Data._Representation(*v10, a2[15]);
  a1[14] = v12;
  a1[15] = v11;
LABEL_8:
  __swift_assign_boxed_opaque_existential_1(a1 + 16, a2 + 16);
  uint64_t v16 = a2[21];
  uint64_t v17 = a1[21];
  a1[21] = v16;
  swift_retain(v16);
  swift_release(v17);
  __swift_assign_boxed_opaque_existential_1(a1 + 22, a2 + 22);
  uint64_t v18 = (void *)a2[27];
  uint64_t v19 = (void *)a1[27];
  a1[27] = v18;
  id v20 = v18;

  a1[28] = a2[28];
  uint64_t v21 = a2[29];
  uint64_t v22 = a1[29];
  a1[29] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy240_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v3;
  *(_OWORD *)a1 = v2;
  __int128 v4 = a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __int128 v7 = a2[7];
  __int128 v8 = a2[8];
  __int128 v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  __n128 result = (__n128)a2[11];
  __int128 v11 = a2[12];
  __int128 v12 = a2[14];
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v12;
  *(__n128 *)(a1 + 176) = result;
  *(_OWORD *)(a1 + 19__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v11;
  return result;
}

uint64_t assignWithTake for ContinuationResultSetFlowProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease(v7);
  __swift_destroy_boxed_opaque_existential_1((void *)(a1 + 32));
  __int128 v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  __swift_destroy_boxed_opaque_existential_1((void *)(a1 + 72));
  *(_OWORD *)(a1 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  __int128 v9 = (void *)(a2 + 112);
  unint64_t v10 = *(void *)(a1 + 120);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = *(void *)(a2 + 120);
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *(void *)(a1 + 112);
      *(void *)(a1 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *v9;
      *(void *)(a1 + 120) = v11;
      outlined consume of Data._Representation(v12, v10);
      goto LABEL_6;
    }

    outlined destroy of Data(a1 + 112);
  }

  *(_OWORD *)(a1 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(_OWORD *)v9;
LABEL_6:
  __swift_destroy_boxed_opaque_existential_1((void *)(a1 + 128));
  __int128 v13 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v13;
  uint64_t v14 = *(void *)(a2 + 168);
  uint64_t v15 = *(void *)(a1 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v14;
  swift_release(v15);
  __swift_destroy_boxed_opaque_existential_1((void *)(a1 + 176));
  __int128 v16 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 19__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v16;
  uint64_t v17 = *(void *)(a2 + 216);
  uint64_t v18 = *(void **)(a1 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v17;

  uint64_t v19 = *(void *)(a2 + 232);
  uint64_t v20 = *(void *)(a1 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 23__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v19;
  swift_bridgeObjectRelease(v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContinuationResultSetFlowProvider(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 240)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContinuationResultSetFlowProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 23__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 15__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 240) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 240) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ContinuationResultSetFlowProvider()
{
  return &type metadata for ContinuationResultSetFlowProvider;
}

uint64_t protocol witness for ResultSetFlowProvider.makeNarrowingPromptFlowIfNeeded() in conformance ContinuationResultSetFlowProvider( uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t partial apply for closure #2 in ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:)( uint64_t a1)
{
  uint64_t v4 = swift_task_alloc(dword_A2E24);
  __int128 v5 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)(v4 + 16) = a1;
  return swift_task_switch( closure #2 in ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:),  0LL,  0LL);
}

unint64_t type metadata accessor for PatternExecutionResult()
{
  unint64_t result = lazy cache variable for type metadata for PatternExecutionResult;
  if (!lazy cache variable for type metadata for PatternExecutionResult)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___PatternExecutionResult);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PatternExecutionResult);
  }

  return result;
}

void *InformationViewFactory.__allocating_init(deviceState:commonCATs:)(__int128 *a1, uint64_t a2)
{
  __int128 v5 = (void *)swift_allocObject(v2, 104LL, 7LL);
  id v6 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
  uint64_t v7 = type metadata accessor for PommesServerFallbackPreferences(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t v8 = PommesServerFallbackPreferences.init(_:)(v6);
  v5[11] = v7;
  v5[12] = &protocol witness table for PommesServerFallbackPreferences;
  v5[8] = v8;
  outlined init with take of PatternFlowProviding(a1, (uint64_t)(v5 + 3));
  void v5[2] = a2;
  return v5;
}

void *specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    unint64_t v11 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *v4;
      v9[0] = *(v4 - 1);
      v9[1] = v5;
      swift_bridgeObjectRetain(v5);
      swift_dynamicCast(v10, v9, &type metadata for String, (char *)&type metadata for Any + 8, 7LL);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1LL, 1);
        uint64_t v2 = v11;
      }

      unint64_t v7 = v2[2];
      unint64_t v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
        uint64_t v2 = v11;
      }

      v4 += 2;
      v2[2] = v7 + 1;
      outlined init with take of Any(v10, &v2[4 * v7 + 4]);
      --v1;
    }

    while (v1);
  }

  return v2;
}

uint64_t InformationViewFactory.commonCATs.getter()
{
  return swift_retain(*(void *)(v0 + 16));
}

uint64_t InformationViewFactory.deviceState.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync(v1 + 24, a1);
}

uint64_t InformationViewFactory.serverFallbackPreferences.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 64;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return outlined init with copy of OutputPublisherAsync(v3, a1);
}

uint64_t InformationViewFactory.serverFallbackPreferences.setter(__int128 *a1)
{
  uint64_t v3 = (void *)(v1 + 64);
  swift_beginAccess(v3, v5, 33LL, 0LL);
  __swift_destroy_boxed_opaque_existential_1(v3);
  outlined init with take of PatternFlowProviding(a1, (uint64_t)v3);
  return swift_endAccess(v5);
}

void *InformationViewFactory.init(deviceState:commonCATs:)(__int128 *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  id v6 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
  uint64_t v7 = type metadata accessor for PommesServerFallbackPreferences(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t v8 = PommesServerFallbackPreferences.init(_:)(v6);
  v3[11] = v7;
  v3[12] = &protocol witness table for PommesServerFallbackPreferences;
  v3[8] = v8;
  outlined init with take of PatternFlowProviding(a1, (uint64_t)(v3 + 3));
  v3[2] = a2;
  return v3;
}

uint64_t InformationViewFactory.makeAceOutputError()(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for TemplatingResult(0LL);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  void v2[5] = v4;
  v2[6] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Date(0LL);
  v2[7] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  _BYTE v2[8] = v6;
  void v2[9] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for PerformanceUtil.Ticket(0LL);
  v2[10] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[11] = v8;
  v2[12] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(InformationViewFactory.makeAceOutputError(), 0LL, 0LL);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  void *v5;
  char v7;
  uint64_t (*v8)(void);
  uint64_t v2 = v1[9];
  uint64_t v3 = v1[3];
  Date.init()(a1);
  uint64_t v7 = 2;
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0xD000000000000025LL,  0x80000000000815B0LL,  v2,  "InformationFlowPlugin/InformationViewFactory.swift",  50LL,  2LL,  41LL,  "makeAceOutputError()",  20LL,  v7);
  uint64_t v4 = *(int **)(*(void *)v3 + 144LL);
  uint64_t v8 = (uint64_t (*)(void))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  v1[13] = v5;
  *uint64_t v5 = v1;
  v5[1] = InformationViewFactory.makeAceOutputError();
  return v8(v1[6]);
}

uint64_t InformationViewFactory.makeAceOutputError()()
{
  return swift_task_switch(InformationViewFactory.makeAceOutputError(), 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 48);
  __int128 v16 = *(void *)(v0 + 40);
  uint64_t v17 = *(void *)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v18 = *(void *)(v0 + 32);
  uint64_t v19 = *(void *)(v0 + 80);
  uint64_t v7 = *(void **)(v0 + 16);
  uint64_t v8 = type metadata accessor for PerformanceUtil(0LL);
  __int128 v9 = static PerformanceUtil.shared.getter(v8);
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v1, 0LL);
  unint64_t v10 = swift_release(v9);
  unint64_t v11 = static PerformanceUtil.shared.getter(v10);
  uint64_t v12 = swift_task_alloc(32LL);
  *(void *)(v12 + 16) = v5;
  *(void *)(v12 + 24) = v6;
  Date.init()(v12);
  __int128 v13 = type metadata accessor for AceOutput(0LL);
  uint64_t v15 = 2;
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( v7,  0xD000000000000071LL,  0x8000000000081640LL,  0LL,  v2,  "InformationFlowPlugin/InformationViewFactory.swift",  50LL,  2LL,  45LL,  "makeAceOutputError()",  20LL,  v15,  partial apply for closure #1 in InformationViewFactory.makeAceOutputError(),  v12,  v13);
  swift_release(v11);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v1, v19);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v5, v18);
  swift_task_dealloc(v12);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in InformationViewFactory.makeAceOutputError()(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a2 + 3;
  uint64_t v8 = a2[6];
  uint64_t v9 = a2[7];
  __swift_project_boxed_opaque_existential_1(a2 + 3, v8);
  LOBYTE(a__swift_destroy_boxed_opaque_existential_1(v0 + 2) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v8, v9);
  uint64_t v10 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v6, 1LL, 1LL, v10);
  uint64_t v13 = 0LL;
  memset(v12, 0, sizeof(v12));
  static AceOutputHelper.makeSummaryViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( a1,  v7,  a2 & 1,  _swiftEmptyArrayStorage,  0LL,  1LL,  v6,  _swiftEmptyArrayStorage,  v12);
  outlined destroy of Any?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  return outlined destroy of Any?((uint64_t)v6, &demangling cache variable for type metadata for NLContextUpdate?);
}

uint64_t partial apply for closure #1 in InformationViewFactory.makeAceOutputError()()
{
  return closure #1 in InformationViewFactory.makeAceOutputError()(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t InformationViewFactory.makeErrorRunInformationFlowTemplate()(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  unint64_t v3 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Logger?)
                              - 8)
                  + 64LL)
      + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[12] = swift_task_alloc(v3);
  v2[13] = swift_task_alloc(v3);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  v2[14] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[15] = v5;
  v2[16] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Date(0LL);
  v2[17] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for PerformanceUtil.Ticket(0LL);
  v2[18] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[19] = v8;
  v2[20] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(InformationViewFactory.makeErrorRunInformationFlowTemplate(), 0LL, 0LL);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  void *v5;
  char v7;
  uint64_t (*v8)(void);
  uint64_t v2 = v1[17];
  unint64_t v3 = v1[11];
  Date.init()(a1);
  uint64_t v7 = 2;
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0xD000000000000019LL,  0x80000000000816C0LL,  v2,  "InformationFlowPlugin/InformationViewFactory.swift",  50LL,  2LL,  58LL,  "makeErrorRunInformationFlowTemplate()",  37LL,  v7);
  uint64_t v4 = *(int **)(**(void **)(v3 + 16) + class metadata base offset for CommonCATs);
  uint64_t v8 = (uint64_t (*)(void))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  v1[21] = v5;
  *uint64_t v5 = v1;
  v5[1] = InformationViewFactory.makeErrorRunInformationFlowTemplate();
  return v8(v1[10]);
}

uint64_t InformationViewFactory.makeErrorRunInformationFlowTemplate()()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 168LL);
  *(void *)(*(void *)v1 + 176LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    unint64_t v3 = InformationViewFactory.makeErrorRunInformationFlowTemplate();
  }
  else {
    unint64_t v3 = InformationViewFactory.makeErrorRunInformationFlowTemplate();
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 136);
  unint64_t v3 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 128);
  uint64_t v7 = *(void *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 104);
  type metadata accessor for PerformanceUtil(0LL);
  uint64_t v8 = static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v1, 0LL);
  swift_release(v8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  os_log_s *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v29;
  uint64_t v30;
  uint64_t v29 = v0 + 8;
  (*(void (**)(void, void))(v0[19] + 8LL))(v0[20], v0[18]);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = v0[22];
  uint64_t v2 = __swift_project_value_buffer(v0[14], (uint64_t)static Logger.information);
  unint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  uint64_t v5 = static os_log_type_t.error.getter();
  uint64_t v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[22];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    BOOL v30 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_getErrorValue(v7, v29, v0 + 2);
    uint64_t v10 = Error.localizedDescription.getter(v0[3], v0[4]);
    uint64_t v12 = v11;
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl(&dword_0, v4, v5, "Unable to generate dialog due to error: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v0[22]);
    swift_errorRelease(v7);
  }

  uint64_t v14 = v0[15];
  uint64_t v13 = v0[16];
  __int128 v16 = v0[13];
  uint64_t v15 = v0[14];
  uint64_t v17 = v0[12];
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  v18(v13, v2, v15);
  v18(v16, v13, v15);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v16, 0LL, 1LL, v15);
  outlined init with copy of IdentifiedUser?( v16,  v17,  (uint64_t *)&demangling cache variable for type metadata for Logger?);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v17, 1LL, v15);
  uint64_t v20 = v0[12];
  if (v19 == 1)
  {
    outlined destroy of Any?(v20, (uint64_t *)&demangling cache variable for type metadata for Logger?);
  }

  else
  {
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    uint64_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      id v23 = swift_slowAlloc(32LL, -1LL);
      char v24 = swift_slowAlloc(64LL, -1LL);
      BOOL v30 = v24;
      *(_DWORD *)id v23 = 136315650;
      uint64_t v25 = StaticString.description.getter( "/Library/Caches/com.apple.xbs/Sources/SiriInformationPlugin/InformationFlowPlugin/Rendering/InformationViewFactory.swift",  120LL,  2LL);
      uint64_t v27 = v26;
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6);
      swift_bridgeObjectRelease(v27);
      *(_WORD *)(v23 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2048;
      v0[6] = 64LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7);
      *(_WORD *)(v23 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
      v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD000000000000040LL,  0x80000000000816E0LL,  &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v29);
      _os_log_impl(&dword_0, v21, v22, "FatalError at %s:%lu - %s", (uint8_t *)v23, 0x20u);
      swift_arrayDestroy(v24, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    (*(void (**)(void, void))(v0[15] + 8LL))(v0[12], v0[14]);
  }

  static SiriKitLifecycle._logCrashToEventBus(_:)(0xD000000000000040LL, 0x80000000000816E0LL);
  return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000040LL,  0x80000000000816E0LL,  "/Library/Caches/com.apple.xbs/Sources/SiriInformationPlugin/InformationFlowPlugin/Rendering/InformationViewFactory.swift",  120LL,  2LL,  64LL,  0);
}

void *InformationViewFactory.makeAceViewsForPegasus(layouts:dialogs:buttons:disambiguationLists:domainObjects:renderOptions:dialogPhase:requestId:pommesCandidateId:)( uint64_t a1, void *a2, unint64_t a3, unint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v250 = a7;
  id v267 = a6;
  uint64_t v264 = a5;
  unint64_t v263 = a4;
  unint64_t v261 = a3;
  v258 = a2;
  uint64_t v266 = a1;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DialogPhase?);
  __chkstk_darwin(v9);
  unint64_t v11 = &v240[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v249 = type metadata accessor for UUID(0LL);
  uint64_t v248 = *(void *)(v249 - 8);
  __chkstk_darwin(v249);
  v247 = &v240[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent(0LL);
  uint64_t v257 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = &v240[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v273 = type metadata accessor for ResponseMode(0LL);
  unint64_t v260 = *(void *)(v273 - 8);
  __chkstk_darwin(v273);
  v242 = &v240[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v262 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ResponseMode?, ResponseMode?));
  uint64_t v17 = __chkstk_darwin(v262);
  v246 = &v240[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v17);
  v255 = &v240[-v19];
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  uint64_t v21 = __chkstk_darwin(v20);
  v243 = &v240[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v23 = __chkstk_darwin(v21);
  v252 = &v240[-v24];
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = &v240[-v26];
  uint64_t v28 = __chkstk_darwin(v25);
  v244 = &v240[-v29];
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v32 = &v240[-v31];
  __chkstk_darwin(v30);
  uint64_t v34 = &v240[-v33];
  uint64_t v35 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v35);
  v274 = &v240[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v254 = type metadata accessor for PerformanceUtil.Ticket(0LL);
  uint64_t v253 = *(void *)(v254 - 8);
  uint64_t v37 = __chkstk_darwin(v254);
  v272 = &v240[-((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v39 = __chkstk_darwin(v37);
  v271 = &v240[-v40];
  uint64_t v41 = __chkstk_darwin(v39);
  v269 = &v240[-v42];
  uint64_t v43 = __chkstk_darwin(v41);
  v265 = &v240[-v44];
  __chkstk_darwin(v43);
  v270 = &v240[-v45];
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v46 = type metadata accessor for Logger(0LL);
  uint64_t v259 = __swift_project_value_buffer(v46, (uint64_t)static Logger.information);
  uint64_t v47 = (os_log_s *)Logger.logObject.getter(v259);
  os_log_type_t v48 = static os_log_type_t.debug.getter();
  BOOL v49 = os_log_type_enabled(v47, v48);
  v268 = v34;
  if (v49)
  {
    uint64_t v50 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v50 = 0;
    _os_log_impl(&dword_0, v47, v48, "PegasusViewFactory: makeAceViewsForPegasus", v50, 2u);
    __int128 v51 = v50;
    uint64_t v34 = v268;
    swift_slowDealloc(v51, -1LL, -1LL);
  }

  v256 = v27;
  v251 = v11;

  uint64_t v278 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v52 = v274;
  Date.init()(v53);
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0xD000000000000014LL,  0x80000000000817B0LL,  v52,  "InformationFlowPlugin/InformationViewFactory.swift",  50LL,  2LL,  87LL,  "makeAceViewsForPegasus(layouts:dialogs:buttons:disambiguationLists:domainObjects:renderOptions:dialogPhase:requestId :pommesCandidateId:)",  136LL,  2);
  uint64_t v54 = type metadata accessor for SiriEnvironment(0LL);
  uint64_t v55 = static SiriEnvironment.forCurrentTask.getter(v54);
  if (v55)
  {
    uint64_t v56 = v55;
    uint64_t v57 = SiriEnvironment.currentRequest.getter();
    uint64_t v58 = swift_release(v56);
    CurrentRequest.responseMode.getter(v58);
    swift_release(v57);
    unint64_t v59 = v260;
    uint64_t v60 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v260 + 56);
    uint64_t v61 = v34;
    uint64_t v62 = 0LL;
  }

  else
  {
    unint64_t v59 = v260;
    uint64_t v60 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v260 + 56);
    uint64_t v61 = v34;
    uint64_t v62 = 1LL;
  }

  uint64_t v63 = v273;
  uint64_t v64 = v60(v61, v62, 1LL, v273);
  static ResponseMode.displayForward.getter(v64);
  v245 = (void (*)(_BYTE *, void, uint64_t, uint64_t))v60;
  v60(v32, 0LL, 1LL, v63);
  uint64_t v65 = v255;
  uint64_t v66 = (uint64_t)&v255[*(int *)(v262 + 48)];
  outlined init with copy of IdentifiedUser?( (uint64_t)v34,  (uint64_t)v255,  (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  outlined init with copy of IdentifiedUser?( (uint64_t)v32,  v66,  (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  uint64_t v67 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 48);
  if (v67((uint64_t)v65, 1LL, v63) != 1)
  {
    BOOL v69 = v244;
    outlined init with copy of IdentifiedUser?( (uint64_t)v65,  (uint64_t)v244,  (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
    if (v67(v66, 1LL, v63) != 1)
    {
      uint64_t v71 = v65;
      uint64_t v72 = v242;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v59 + 32))(v242, v66, v273);
      uint64_t v73 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode,  (uint64_t (*)(uint64_t))&type metadata accessor for ResponseMode,  (uint64_t)&protocol conformance descriptor for ResponseMode);
      int v241 = dispatch thunk of static Equatable.== infix(_:_:)(v69, v72, v273, v73);
      uint64_t v74 = *(void (**)(_BYTE *, uint64_t))(v59 + 8);
      v74(v72, v273);
      outlined destroy of Any?((uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
      v74(v69, v273);
      uint64_t v75 = (uint64_t)v71;
      uint64_t v63 = v273;
      outlined destroy of Any?(v75, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
      uint64_t v68 = (uint64_t)v256;
      uint64_t v70 = outlined init with copy of IdentifiedUser?( (uint64_t)v268,  (uint64_t)v256,  (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
      if ((v241 & 1) != 0) {
        goto LABEL_15;
      }
LABEL_16:
      uint64_t v78 = v252;
      static ResponseMode.displayOnly.getter(v70);
      v245(v78, 0LL, 1LL, v63);
      uint64_t v79 = v246;
      uint64_t v80 = (uint64_t)&v246[*(int *)(v262 + 48)];
      outlined init with copy of IdentifiedUser?( v68,  (uint64_t)v246,  (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
      outlined init with copy of IdentifiedUser?( (uint64_t)v78,  v80,  (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
      if (v67((uint64_t)v79, 1LL, v63) == 1)
      {
        outlined destroy of Any?( (uint64_t)v78,  (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
        outlined destroy of Any?(v68, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
        int v81 = v67(v80, 1LL, v63);
        uint64_t v76 = v258;
        uint64_t v77 = v257;
        if (v81 == 1)
        {
          uint64_t v68 = (uint64_t)v79;
          goto LABEL_19;
        }
      }

      else
      {
        uint64_t v88 = v243;
        outlined init with copy of IdentifiedUser?( (uint64_t)v79,  (uint64_t)v243,  (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
        int v89 = v67(v80, 1LL, v63);
        uint64_t v77 = v257;
        if (v89 != 1)
        {
          uint64_t v164 = v242;
          (*(void (**)(_BYTE *, uint64_t, uint64_t))(v260 + 32))(v242, v80, v63);
          uint64_t v165 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode,  (uint64_t (*)(uint64_t))&type metadata accessor for ResponseMode,  (uint64_t)&protocol conformance descriptor for ResponseMode);
          LODWORD(v273) = dispatch thunk of static Equatable.== infix(_:_:)(v88, v164, v63, v165);
          uint64_t v166 = v68;
          uint64_t v167 = *(void (**)(_BYTE *, uint64_t))(v260 + 8);
          v167(v164, v63);
          outlined destroy of Any?( (uint64_t)v252,  (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
          outlined destroy of Any?(v166, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
          v167(v243, v63);
          outlined destroy of Any?( (uint64_t)v79,  (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
          uint64_t v76 = v258;
          if ((v273 & 1) == 0) {
            goto LABEL_28;
          }
          goto LABEL_20;
        }

        outlined destroy of Any?( (uint64_t)v252,  (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
        outlined destroy of Any?(v68, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
        (*(void (**)(_BYTE *, uint64_t))(v260 + 8))(v88, v63);
        uint64_t v76 = v258;
      }

      outlined destroy of Any?( (uint64_t)v79,  &demangling cache variable for type metadata for (ResponseMode?, ResponseMode?));
      goto LABEL_28;
    }

    outlined destroy of Any?((uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
    (*(void (**)(_BYTE *, uint64_t))(v59 + 8))(v69, v63);
LABEL_13:
    outlined destroy of Any?( (uint64_t)v65,  &demangling cache variable for type metadata for (ResponseMode?, ResponseMode?));
    uint64_t v68 = (uint64_t)v256;
    uint64_t v70 = outlined init with copy of IdentifiedUser?( (uint64_t)v268,  (uint64_t)v256,  (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
    goto LABEL_16;
  }

  outlined destroy of Any?((uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  outlined destroy of Any?((uint64_t)v65, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  uint64_t v68 = (uint64_t)v256;
  outlined init with copy of IdentifiedUser?( (uint64_t)v268,  (uint64_t)v256,  (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
LABEL_15:
  uint64_t v76 = v258;
  uint64_t v77 = v257;
LABEL_19:
  outlined destroy of Any?(v68, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
LABEL_20:
  uint64_t v82 = v76[2];
  if (v82)
  {
    uint64_t v83 = (char *)v76 + ((*(unsigned __int8 *)(v77 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80));
    uint64_t v84 = *(void *)(v77 + 72);
    uint64_t v85 = *(uint64_t (**)(_BYTE *, char *, uint64_t))(v77 + 16);
    swift_bridgeObjectRetain(v76);
    do
    {
      uint64_t v86 = v85(v15, v83, v13);
      char v87 = Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.spokenOnly.getter(v86);
      (*(void (**)(_BYTE *, uint64_t))(v77 + 8))(v15, v13);
      if ((v87 & 1) == 0) {
        break;
      }
      v83 += v84;
      --v82;
    }

    while (v82);
    swift_bridgeObjectRelease(v76);
  }

LABEL_28:
  swift_retain(v8);
  uint64_t v90 = v266;
  swift_bridgeObjectRetain(v266);
  uint64_t v91 = (uint64_t)specialized Sequence.compactMap<A>(_:)((uint64_t)v76, v8, v90);
  swift_release(v8);
  swift_bridgeObjectRelease(v90);
  uint64_t v262 = v91;
  unint64_t v260 = (unint64_t)v91 >> 62;
  if ((unint64_t)v91 >> 62)
  {
    if (v91 < 0) {
      uint64_t v213 = v91;
    }
    else {
      uint64_t v213 = v91 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v214 = type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAAceView,  &OBJC_CLASS___SAAceView_ptr);
    swift_bridgeObjectRetain(v91);
    uint64_t v93 = _bridgeCocoaArray<A>(_:)(v213, v214);
    swift_bridgeObjectRelease(v91);
  }

  else
  {
    uint64_t v92 = swift_bridgeObjectRetain(v91);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v92);
    type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAAceView,  &OBJC_CLASS___SAAceView_ptr);
    uint64_t v93 = v91;
  }

  specialized Array.append<A>(contentsOf:)(v93);
  uint64_t v94 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v95 = static PerformanceUtil.shared.getter(v94);
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v270, 0LL);
  uint64_t v96 = swift_release(v95);
  uint64_t v97 = v274;
  Date.init()(v96);
  LOBYTE(v236) = 2;
  uint64_t v98 = v265;
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0x696E7320656B614DLL,  0xED00007374657070LL,  v97,  "InformationFlowPlugin/InformationViewFactory.swift",  50LL,  2LL,  99LL,  "makeAceViewsForPegasus(layouts:dialogs:buttons:disambiguationLists:domainObjects:renderOptions:dialogPhase:requestId :pommesCandidateId:)",  136LL,  v236);
  uint64_t v99 = (uint64_t)v267;
  uint64_t v100 = v267;
  swift_retain(v8);
  uint64_t v101 = specialized Sequence.compactMap<A>(_:)(v266, v8, v99);
  swift_release(v8);
  v258 = v100;

  uint64_t v102 = swift_bridgeObjectRetain(v101);
  uint64_t v266 = (uint64_t)v101;
  uint64_t v103 = specialized Array.append<A>(contentsOf:)(v102);
  uint64_t v273 = v94;
  uint64_t v104 = static PerformanceUtil.shared.getter(v103);
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v98, 0LL);
  uint64_t v105 = swift_release(v104);
  Date.init()(v105);
  LOBYTE(v23__swift_destroy_boxed_opaque_existential_1(v0 + 7) = 2;
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0xD000000000000011LL,  0x8000000000081860LL,  v97,  "InformationFlowPlugin/InformationViewFactory.swift",  50LL,  2LL,  106LL,  "makeAceViewsForPegasus(layouts:dialogs:buttons:disambiguationLists:domainObjects:renderOptions:dialogPhase:requestId :pommesCandidateId:)",  136LL,  v237);
  uint64_t v106 = (uint64_t)_swiftEmptyArrayStorage;
  unint64_t v276 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v107 = v261;
  uint64_t v108 = *(void *)(v261 + 16);
  if (v108)
  {
    uint64_t v109 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_ButtonViewComponent(0LL) - 8);
    unint64_t v110 = v107 + ((*(unsigned __int8 *)(v109 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80));
    uint64_t v111 = *(uint64_t (**)(unint64_t))(*(void *)v8 + 168LL);
    uint64_t v112 = *(void *)(v109 + 72);
    swift_retain(v8);
    swift_bridgeObjectRetain(v107);
    do
    {
      uint64_t v113 = v111(v110);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v113);
      unint64_t v115 = *(void *)((char *)&dword_10 + (v276 & 0xFFFFFFFFFFFFFF8LL));
      unint64_t v114 = *(void *)((char *)&dword_18 + (v276 & 0xFFFFFFFFFFFFFF8LL));
      if (v115 >= v114 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v114 > 1, v115 + 1, 1LL);
      }
      uint64_t v116 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v115, v113);
      specialized Array._endMutation()(v116);
      v110 += v112;
      --v108;
    }

    while (v108);
    swift_bridgeObjectRelease(v261);
    uint64_t v117 = v276;
  }

  else
  {
    swift_retain(v8);
    uint64_t v117 = (uint64_t)_swiftEmptyArrayStorage;
  }

  swift_release(v8);
  unint64_t v261 = (unint64_t)v117 >> 62;
  if ((unint64_t)v117 >> 62)
  {
    if (v117 < 0) {
      uint64_t v215 = v117;
    }
    else {
      uint64_t v215 = v117 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v216 = type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAAceView,  &OBJC_CLASS___SAAceView_ptr);
    swift_bridgeObjectRetain(v117);
    uint64_t v119 = _bridgeCocoaArray<A>(_:)(v215, v216);
    swift_bridgeObjectRelease(v117);
  }

  else
  {
    uint64_t v118 = swift_bridgeObjectRetain(v117);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v118);
    type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAAceView,  &OBJC_CLASS___SAAceView_ptr);
    uint64_t v119 = v117;
  }

  uint64_t v120 = specialized Array.append<A>(contentsOf:)(v119);
  uint64_t v121 = static PerformanceUtil.shared.getter(v120);
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v269, 0LL);
  uint64_t v122 = swift_release(v121);
  uint64_t v123 = v274;
  Date.init()(v122);
  LOBYTE(v238) = 2;
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0xD000000000000019LL,  0x8000000000081880LL,  v123,  "InformationFlowPlugin/InformationViewFactory.swift",  50LL,  2LL,  113LL,  "makeAceViewsForPegasus(layouts:dialogs:buttons:disambiguationLists:domainObjects:renderOptions:dialogPhase:requestId :pommesCandidateId:)",  136LL,  v238);
  unint64_t v276 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v124 = v263;
  uint64_t v125 = *(void *)(v263 + 16);
  if (v125)
  {
    uint64_t v126 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_DisambiguationListComponent(0LL) - 8);
    unint64_t v127 = v124 + ((*(unsigned __int8 *)(v126 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80));
    uint64_t v128 = *(uint64_t (**)(unint64_t))(*(void *)v8 + 176LL);
    uint64_t v129 = *(void *)(v126 + 72);
    swift_retain(v8);
    swift_bridgeObjectRetain(v124);
    do
    {
      uint64_t v130 = v128(v127);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v130);
      unint64_t v132 = *(void *)((char *)&dword_10 + (v276 & 0xFFFFFFFFFFFFFF8LL));
      unint64_t v131 = *(void *)((char *)&dword_18 + (v276 & 0xFFFFFFFFFFFFFF8LL));
      if (v132 >= v131 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v131 > 1, v132 + 1, 1LL);
      }
      uint64_t v133 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v132, v130);
      specialized Array._endMutation()(v133);
      v127 += v129;
      --v125;
    }

    while (v125);
    swift_bridgeObjectRelease(v263);
    uint64_t v134 = v276;
    uint64_t v106 = (uint64_t)_swiftEmptyArrayStorage;
  }

  else
  {
    swift_retain(v8);
    uint64_t v134 = (uint64_t)_swiftEmptyArrayStorage;
  }

  swift_release(v8);
  uint64_t v135 = v262;
  unint64_t v263 = (unint64_t)v134 >> 62;
  if ((unint64_t)v134 >> 62)
  {
    if (v134 < 0) {
      uint64_t v217 = v134;
    }
    else {
      uint64_t v217 = v134 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v218 = type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAAceView,  &OBJC_CLASS___SAAceView_ptr);
    swift_bridgeObjectRetain(v134);
    uint64_t v137 = _bridgeCocoaArray<A>(_:)(v217, v218);
    swift_bridgeObjectRelease(v134);
  }

  else
  {
    uint64_t v136 = swift_bridgeObjectRetain(v134);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v136);
    type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAAceView,  &OBJC_CLASS___SAAceView_ptr);
    uint64_t v137 = v134;
  }

  uint64_t v138 = specialized Array.append<A>(contentsOf:)(v137);
  uint64_t v139 = static PerformanceUtil.shared.getter(v138);
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v271, 0LL);
  uint64_t v140 = swift_release(v139);
  uint64_t v141 = v274;
  Date.init()(v140);
  LOBYTE(v239) = 2;
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0xD00000000000001DLL,  0x80000000000818A0LL,  v141,  "InformationFlowPlugin/InformationViewFactory.swift",  50LL,  2LL,  120LL,  "makeAceViewsForPegasus(layouts:dialogs:buttons:disambiguationLists:domainObjects:renderOptions:dialogPhase:requestId :pommesCandidateId:)",  136LL,  v239);
  unint64_t v276 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v142 = v264;
  uint64_t v143 = *(void *)(v264 + 16);
  if (v143)
  {
    uint64_t v144 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent(0LL) - 8);
    uint64_t v145 = v142 + ((*(unsigned __int8 *)(v144 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v144 + 80));
    uint64_t v146 = *(uint64_t (**)(uint64_t, id))(*(void *)v8 + 184LL);
    uint64_t v147 = *(void *)(v144 + 72);
    swift_bridgeObjectRetain(v142);
    id v148 = v267;
    do
    {
      uint64_t v149 = v146(v145, v148);
      specialized Array.append<A>(contentsOf:)(v149);
      v145 += v147;
      --v143;
    }

    while (v143);
    swift_bridgeObjectRelease(v264);
    uint64_t v106 = v276;
    uint64_t v135 = v262;
  }

  uint64_t v150 = swift_bridgeObjectRetain(v106);
  uint64_t v151 = specialized Array.append<A>(contentsOf:)(v150);
  uint64_t v152 = static PerformanceUtil.shared.getter(v151);
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v272, 0LL);
  swift_release(v152);
  uint64_t v153 = v278;
  uint64_t v154 = v266;
  if (!((unint64_t)v278 >> 62))
  {
LABEL_131:
    swift_bridgeObjectRelease(v106);
    swift_bridgeObjectRelease(v134);
    swift_bridgeObjectRelease(v117);
    swift_bridgeObjectRelease(v154);
    swift_bridgeObjectRelease(v135);
    uint64_t v221 = swift_bridgeObjectRelease(v153);
    uint64_t v222 = (os_log_s *)Logger.logObject.getter(v221);
    os_log_type_t v223 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v222, v223))
    {
      uint64_t v224 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v224 = 0;
      _os_log_impl(&dword_0, v222, v223, "PegasusViewFactory: pegasusResult has no views", v224, 2u);
      swift_slowDealloc(v224, -1LL, -1LL);
    }

    uint64_t v225 = _swiftEmptyArrayStorage;
    uint64_t v184 = (uint64_t)v268;
    goto LABEL_149;
  }

  if (v278 < 0) {
    uint64_t v219 = v278;
  }
  else {
    uint64_t v219 = v278 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v278);
  uint64_t v220 = _CocoaArrayWrapper.endIndex.getter(v219);
  swift_bridgeObjectRelease(v153);
  if (!v220) {
    goto LABEL_131;
  }
LABEL_54:
  swift_bridgeObjectRetain_n(v135, 2LL);
  swift_bridgeObjectRetain_n(v154, 2LL);
  swift_bridgeObjectRetain_n(v117, 2LL);
  swift_bridgeObjectRetain_n(v134, 2LL);
  uint64_t v155 = swift_bridgeObjectRetain_n(v106, 2LL);
  id v156 = (os_log_s *)Logger.logObject.getter(v155);
  os_log_type_t v157 = static os_log_type_t.debug.getter();
  uint64_t v158 = (_BYTE *)((unint64_t)v154 >> 62);
  unint64_t v159 = (unint64_t)v106 >> 62;
  if (os_log_type_enabled(v156, v157))
  {
    uint64_t v160 = swift_slowAlloc(52LL, -1LL);
    *(_DWORD *)uint64_t v160 = 134219008;
    v274 = v158;
    if (v158)
    {
      uint64_t v161 = v266;
      if (v266 < 0) {
        uint64_t v234 = v266;
      }
      else {
        uint64_t v234 = v266 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v266);
      uint64_t v162 = _CocoaArrayWrapper.endIndex.getter(v234);
      swift_bridgeObjectRelease(v161);
    }

    else
    {
      uint64_t v161 = v266;
      uint64_t v162 = *(void *)((char *)&dword_10 + (v266 & 0xFFFFFFFFFFFFF8LL));
    }

    swift_bridgeObjectRelease(v161);
    unint64_t v276 = v162;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v276, v277);
    swift_bridgeObjectRelease(v161);
    *(_WORD *)(v160 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2048;
    if (v260)
    {
      if (v135 < 0) {
        uint64_t v168 = v135;
      }
      else {
        uint64_t v168 = v135 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v135);
      uint64_t v163 = _CocoaArrayWrapper.endIndex.getter(v168);
      swift_bridgeObjectRelease(v135);
    }

    else
    {
      uint64_t v163 = *(void *)((char *)&dword_10 + (v135 & 0xFFFFFFFFFFFFF8LL));
    }

    unint64_t v159 = (unint64_t)v106 >> 62;
    swift_bridgeObjectRelease(v135);
    unint64_t v276 = v163;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v276, v277);
    swift_bridgeObjectRelease(v135);
    *(_WORD *)(v160 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2048;
    if (v261)
    {
      if (v117 < 0) {
        uint64_t v170 = v117;
      }
      else {
        uint64_t v170 = v117 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v117);
      uint64_t v169 = _CocoaArrayWrapper.endIndex.getter(v170);
      swift_bridgeObjectRelease(v117);
    }

    else
    {
      uint64_t v169 = *(void *)((char *)&dword_10 + (v117 & 0xFFFFFFFFFFFFF8LL));
    }

    swift_bridgeObjectRelease(v117);
    unint64_t v276 = v169;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v276, v277);
    swift_bridgeObjectRelease(v117);
    *(_WORD *)(v160 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2048;
    if (v263)
    {
      if (v134 < 0) {
        uint64_t v172 = v134;
      }
      else {
        uint64_t v172 = v134 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v134);
      uint64_t v171 = _CocoaArrayWrapper.endIndex.getter(v172);
      swift_bridgeObjectRelease(v134);
    }

    else
    {
      uint64_t v171 = *(void *)((char *)&dword_10 + (v134 & 0xFFFFFFFFFFFFF8LL));
    }

    swift_bridgeObjectRelease(v134);
    unint64_t v276 = v171;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v276, v277);
    swift_bridgeObjectRelease(v134);
    *(_WORD *)(v160 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2048;
    if ((unint64_t)v106 >> 62)
    {
      if (v106 < 0) {
        uint64_t v235 = v106;
      }
      else {
        uint64_t v235 = v106 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v106);
      uint64_t v173 = _CocoaArrayWrapper.endIndex.getter(v235);
      swift_bridgeObjectRelease(v106);
    }

    else
    {
      uint64_t v173 = *(void *)((char *)&dword_10 + (v106 & 0xFFFFFFFFFFFFF8LL));
    }

    swift_bridgeObjectRelease(v106);
    unint64_t v276 = v173;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v276, v277);
    swift_bridgeObjectRelease(v106);
    _os_log_impl( &dword_0,  v156,  v157,  "PegasusViewFactory: pegasusResult generated\n snippets %ld\n utteranceViews %ld\n buttonViews %ld\n disambiguationListViews %ld\n domainObjectViews %ld",  (uint8_t *)v160,  0x34u);
    swift_slowDealloc(v160, -1LL, -1LL);

    uint64_t v154 = v266;
    uint64_t v158 = v274;
  }

  else
  {

    swift_bridgeObjectRelease_n(v154, 2LL);
    swift_bridgeObjectRelease_n(v135, 2LL);
    swift_bridgeObjectRelease_n(v117, 2LL);
    swift_bridgeObjectRelease_n(v134, 2LL);
    swift_bridgeObjectRelease_n(v106, 2LL);
  }

  uint64_t v174 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(InformationViewFactory.AceViewCategory, Int)>);
  uint64_t inited = swift_initStackObject(v174, v275);
  *(_OWORD *)(inited + 16) = xmmword_7E2A0;
  *(_BYTE *)(inited + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0;
  if (v158)
  {
    if (v154 < 0) {
      uint64_t v226 = v154;
    }
    else {
      uint64_t v226 = v154 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v154);
    uint64_t v176 = _CocoaArrayWrapper.endIndex.getter(v226);
    swift_bridgeObjectRelease(v154);
  }

  else
  {
    uint64_t v176 = *(void *)((char *)&dword_10 + (v154 & 0xFFFFFFFFFFFFF8LL));
  }

  swift_bridgeObjectRelease(v154);
  *(void *)(inited + 40) = v176;
  *(_BYTE *)(inited + 48) = 1;
  uint64_t v177 = (uint64_t)v251;
  if (v260)
  {
    if (v135 < 0) {
      uint64_t v179 = v135;
    }
    else {
      uint64_t v179 = v135 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v135);
    uint64_t v178 = _CocoaArrayWrapper.endIndex.getter(v179);
    swift_bridgeObjectRelease(v135);
  }

  else
  {
    uint64_t v178 = *(void *)((char *)&dword_10 + (v135 & 0xFFFFFFFFFFFFF8LL));
  }

  swift_bridgeObjectRelease(v135);
  *(void *)(inited + 56) = v178;
  *(_BYTE *)(inited + 64) = 2;
  if (v261)
  {
    if (v117 < 0) {
      uint64_t v181 = v117;
    }
    else {
      uint64_t v181 = v117 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v117);
    uint64_t v180 = _CocoaArrayWrapper.endIndex.getter(v181);
    swift_bridgeObjectRelease(v117);
  }

  else
  {
    uint64_t v180 = *(void *)((char *)&dword_10 + (v117 & 0xFFFFFFFFFFFFF8LL));
  }

  swift_bridgeObjectRelease(v117);
  *(void *)(inited + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v180;
  *(_BYTE *)(inited + 80) = 3;
  if (v263)
  {
    if (v134 < 0) {
      uint64_t v183 = v134;
    }
    else {
      uint64_t v183 = v134 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v134);
    uint64_t v182 = _CocoaArrayWrapper.endIndex.getter(v183);
    swift_bridgeObjectRelease(v134);
  }

  else
  {
    uint64_t v182 = *(void *)((char *)&dword_10 + (v134 & 0xFFFFFFFFFFFFF8LL));
  }

  swift_bridgeObjectRelease(v134);
  *(void *)(inited + 88) = v182;
  *(_BYTE *)(inited + 96) = 4;
  uint64_t v184 = (uint64_t)v268;
  if (v159)
  {
    if (v106 < 0) {
      uint64_t v227 = v106;
    }
    else {
      uint64_t v227 = v106 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v106);
    uint64_t v185 = _CocoaArrayWrapper.endIndex.getter(v227);
    swift_bridgeObjectRelease(v106);
  }

  else
  {
    uint64_t v185 = *(void *)((char *)&dword_10 + (v106 & 0xFFFFFFFFFFFFF8LL));
  }

  swift_bridgeObjectRelease(v106);
  *(void *)(inited + 104) = v185;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  swift_setDeallocating(inited);
  id v186 = [objc_allocWithZone(SAUIAddViews) init];
  uint64_t v187 = v247;
  uint64_t v188 = UUID.init()(v186);
  UUID.uuidString.getter(v188);
  uint64_t v190 = v189;
  (*(void (**)(_BYTE *, uint64_t))(v248 + 8))(v187, v249);
  NSString v191 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v190);
  [v186 setAceId:v191];

  uint64_t v192 = v278;
  uint64_t v193 = type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAAceView,  &OBJC_CLASS___SAAceView_ptr);
  swift_bridgeObjectRetain(v192);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v192);
  [v186 setViews:isa];

  outlined init with copy of IdentifiedUser?(v250, v177, &demangling cache variable for type metadata for DialogPhase?);
  uint64_t v195 = type metadata accessor for DialogPhase(0LL);
  uint64_t v196 = *(void *)(v195 - 8);
  uint64_t v197 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v196 + 48))(v177, 1LL, v195);
  id v198 = v267;
  if ((_DWORD)v197 == 1)
  {
    outlined destroy of Any?(v177, &demangling cache variable for type metadata for DialogPhase?);
    static String._unconditionallyBridgeFromObjectiveC(_:)(SAUIDialogPhaseSummaryValue);
    uint64_t v200 = v199;
  }

  else
  {
    DialogPhase.aceValue.getter(v197);
    uint64_t v200 = v201;
    (*(void (**)(uint64_t, uint64_t))(v196 + 8))(v177, v195);
  }

  NSString v202 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v200);
  [v186 setDialogPhase:v202];

  uint64_t v203 = specialized _arrayForceCast<A, B>(_:)((uint64_t)_swiftEmptyArrayStorage);
  Class v204 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v203);
  [v186 setCoordinationOptions:v204];

  if (!v198)
  {
    uint64_t v212 = v278;
LABEL_147:
    swift_bridgeObjectRelease(v212);
    goto LABEL_148;
  }

  uint64_t v205 = v258;
  [v186 setImmersiveExperience:PommesRenderOptions.isImmersiveExperience.getter() & 1];
  unint64_t result = [v186 views];
  if (!result) {
    goto LABEL_160;
  }
  uint64_t v207 = result;
  uint64_t v208 = static Array._unconditionallyBridgeFromObjectiveC(_:)(result, v193);

  unint64_t result = (void *)swift_bridgeObjectRelease(v278);
  if ((unint64_t)v208 >> 62)
  {
    if (v208 < 0) {
      uint64_t v228 = v208;
    }
    else {
      uint64_t v228 = v208 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v208);
    uint64_t v229 = _CocoaArrayWrapper.endIndex.getter(v228);
    unint64_t result = (void *)swift_bridgeObjectRelease(v208);
    if (v229) {
      goto LABEL_110;
    }
    goto LABEL_146;
  }

  if (!*(void *)((char *)&dword_10 + (v208 & 0xFFFFFFFFFFFFF8LL)))
  {
LABEL_146:

    uint64_t v212 = v208;
    goto LABEL_147;
  }

LABEL_110:
  if ((v208 & 0xC000000000000001LL) != 0)
  {
    id v209 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v208);
    goto LABEL_113;
  }

  if (*(void *)((char *)&dword_10 + (v208 & 0xFFFFFFFFFFFFF8LL)))
  {
    id v209 = *(id *)(v208 + 32);
LABEL_113:
    uint64_t v210 = v209;
    uint64_t v211 = swift_bridgeObjectRelease(v208);
    [v210 setPreserveResultSpaceIfPossible:PommesRenderOptions.preserveResultSpaceIfPossible.getter(v211) & 1];

LABEL_148:
    uint64_t v230 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v231 = swift_allocObject(v230, 40LL, 7LL);
    *(_OWORD *)(v231 + 16) = xmmword_7D060;
    *(void *)(v231 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v186;
    unint64_t v276 = v231;
    specialized Array._endMutation()(v231);
    uint64_t v225 = (void *)v276;
LABEL_149:
    uint64_t v232 = v254;
    v233 = *(void (**)(_BYTE *, uint64_t))(v253 + 8);
    v233(v272, v254);
    v233(v271, v232);
    v233(v269, v232);
    v233(v265, v232);
    outlined destroy of Any?(v184, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
    v233(v270, v232);
    return v225;
  }

  __break(1u);
LABEL_160:
  __break(1u);
  return result;
}

uint64_t InformationViewFactory.makeCommandForPegasusNavigation(layouts:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v4, (uint64_t)static Logger.information);
  uint64_t v5 = swift_bridgeObjectRetain(a1);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v8 = 134217984;
    uint64_t v15 = *(void *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, v16);
    swift_bridgeObjectRelease(a1);
    _os_log_impl(&dword_0, v6, v7, "PegasusViewFactory: makeCommandForPegasusNavigation %ld", v8, 0xCu);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease(a1);
  }

  swift_retain(v2);
  uint64_t CardCs5NeverOTg5057_s21InformationFlowPlugin0A11ViewFactoryC31makeCommandFord46Navigation7layoutsSaySo06SABaseG0CGSay0I3API48f1_g1_h1_i1_jkl9VG_tFSo18mnoP8CAKXEfU_0sT6Plugin0swX0CTf1cn_nTf4ng_n = (uint64_t)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10PegasusAPI48Apple_Parsec_Siri_V2alpha_LayoutSnippetComponentVG_So18SACardShowNextCardCs5NeverOTg5057_s21InformationFlowPlugin0A11ViewFactoryC31makeCommandFord46Navigation7layoutsSaySo06SABaseG0CGSay0I3API48f1_g1_h1_i1_jkl9VG_tFSo18mnoP8CAKXEfU_0sT6Plugin0swX0CTf1cn_nTf4ng_n(a1, v2);
  swift_release(v2);
  if ((unint64_t)CardCs5NeverOTg5057_s21InformationFlowPlugin0A11ViewFactoryC31makeCommandFord46Navigation7layoutsSaySo06SABaseG0CGSay0I3API48f1_g1_h1_i1_jkl9VG_tFSo18mnoP8CAKXEfU_0sT6Plugin0swX0CTf1cn_nTf4ng_n >> 62)
  {
    if (CardCs5NeverOTg5057_s21InformationFlowPlugin0A11ViewFactoryC31makeCommandFord46Navigation7layoutsSaySo06SABaseG0CGSay0I3API48f1_g1_h1_i1_jkl9VG_tFSo18mnoP8CAKXEfU_0sT6Plugin0swX0CTf1cn_nTf4ng_n < 0) {
      uint64_t v13 = CardCs5NeverOTg5057_s21InformationFlowPlugin0A11ViewFactoryC31makeCommandFord46Navigation7layoutsSaySo06SABaseG0CGSay0I3API48f1_g1_h1_i1_jkl9VG_tFSo18mnoP8CAKXEfU_0sT6Plugin0swX0CTf1cn_nTf4ng_n;
    }
    else {
      uint64_t v13 = CardCs5NeverOTg5057_s21InformationFlowPlugin0A11ViewFactoryC31makeCommandFord46Navigation7layoutsSaySo06SABaseG0CGSay0I3API48f1_g1_h1_i1_jkl9VG_tFSo18mnoP8CAKXEfU_0sT6Plugin0swX0CTf1cn_nTf4ng_n & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v14 = type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SABaseCommand,  &OBJC_CLASS___SABaseCommand_ptr);
    uint64_t v11 = _bridgeCocoaArray<A>(_:)(v13, v14);
  }

  else
  {
    uint64_t v10 = swift_bridgeObjectRetain(CardCs5NeverOTg5057_s21InformationFlowPlugin0A11ViewFactoryC31makeCommandFord46Navigation7layoutsSaySo06SABaseG0CGSay0I3API48f1_g1_h1_i1_jkl9VG_tFSo18mnoP8CAKXEfU_0sT6Plugin0swX0CTf1cn_nTf4ng_n);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v10);
    type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SABaseCommand,  &OBJC_CLASS___SABaseCommand_ptr);
    uint64_t v11 = CardCs5NeverOTg5057_s21InformationFlowPlugin0A11ViewFactoryC31makeCommandFord46Navigation7layoutsSaySo06SABaseG0CGSay0I3API48f1_g1_h1_i1_jkl9VG_tFSo18mnoP8CAKXEfU_0sT6Plugin0swX0CTf1cn_nTf4ng_n;
  }

  swift_bridgeObjectRelease(CardCs5NeverOTg5057_s21InformationFlowPlugin0A11ViewFactoryC31makeCommandFord46Navigation7layoutsSaySo06SABaseG0CGSay0I3API48f1_g1_h1_i1_jkl9VG_tFSo18mnoP8CAKXEfU_0sT6Plugin0swX0CTf1cn_nTf4ng_n);
  return v11;
}

id InformationViewFactory.makeButtonView(button:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  id v10 = [objc_allocWithZone(SAUIButton) init];
  uint64_t v11 = UUID.init()(v10);
  UUID.uuidString.getter(v11);
  uint64_t v13 = v12;
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  [v10 setAceId:v14];

  Apple_Parsec_Siri_V2alpha_ButtonViewComponent.text.getter();
  uint64_t v16 = v15;
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  [v10 setText:v17];

  uint64_t v18 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v19 = static PerformanceUtil.shared.getter(v18);
  uint64_t v26 = a1;
  Date.init()(v19);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SAClientBoundCommand]);
  char v24 = 2;
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( &v27,  0xD000000000000039LL,  0x80000000000818C0LL,  0LL,  v5,  "InformationFlowPlugin/InformationViewFactory.swift",  50LL,  2LL,  191LL,  "makeButtonView(button:)",  23LL,  v24,  partial apply for closure #1 in InformationViewFactory.makeButtonView(button:),  v25,  v20);
  swift_release(v19);
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v21 = v27;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v21);
  [v10 setCommands:isa];

  return v10;
}

id InformationViewFactory.makeDisambiguationListView(list:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DisambiguationListItem(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v4 = [objc_allocWithZone(SAUIDisambiguationList) init];
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationBuilderParams(0LL);
  uint64_t v6 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_LocationBuilderParams and conformance Apple_Parsec_Siri_V2alpha_LocationBuilderParams,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationBuilderParams,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_LocationBuilderParams);
  uint64_t v7 = static Google_Protobuf_Any.register(messageType:)(v5, v6);
  uint64_t v8 = Apple_Parsec_Siri_V2alpha_DisambiguationListComponent.items.getter(v7);
  uint64_t v9 = v8;
  id v10 = _swiftEmptyArrayStorage;
  unint64_t v27 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v11 = *(void *)(v8 + 16);
  if (v11)
  {
    unint64_t v12 = v8 + ((*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    uint64_t v13 = *(void *)(v1 + 72);
    id v24 = v4;
    uint64_t v25 = v13;
    NSString v14 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
    uint64_t v23 = v8;
    swift_bridgeObjectRetain(v8);
    do
    {
      v14(v3, v12, v0);
      closure #1 in InformationViewFactory.makeDisambiguationListView(list:)((uint64_t)v3, &v26);
      uint64_t v16 = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      uint64_t v17 = v26;
      if (v26)
      {
        uint64_t v18 = v1;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v16);
        unint64_t v20 = *(void *)((char *)&dword_10 + (v27 & 0xFFFFFFFFFFFFFF8LL));
        unint64_t v19 = *(void *)((char *)&dword_18 + (v27 & 0xFFFFFFFFFFFFFF8LL));
        if (v20 >= v19 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1LL);
        }
        uint64_t v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v17);
        specialized Array._endMutation()(v15);
        uint64_t v1 = v18;
      }

      v12 += v25;
      --v11;
    }

    while (v11);
    uint64_t v9 = v23;
    swift_bridgeObjectRelease(v23);
    id v10 = (void *)v27;
    id v4 = v24;
  }

  swift_bridgeObjectRelease(v9);
  type metadata accessor for SABaseCommand( 0LL,  (unint64_t *)&lazy cache variable for type metadata for SAUIListItem,  &OBJC_CLASS___SAUIListItem_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v10);
  [v4 setItems:isa];

  return v4;
}

void closure #1 in InformationViewFactory.makeDisambiguationListView(list:)( uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v94 = a2;
  uint64_t v93 = type metadata accessor for Date(0LL);
  uint64_t v92 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v91 = (char *)&v81 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v86 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DisambiguationListItem(0LL);
  uint64_t v85 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v84 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v88 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationBuilderParams(0LL);
  uint64_t v83 = *(void *)(v88 - 8);
  uint64_t v5 = __chkstk_darwin(v88);
  uint64_t v82 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  char v87 = (char *)&v81 - v7;
  uint64_t v8 = type metadata accessor for BinaryDecodingOptions(0LL);
  __chkstk_darwin(v8);
  uint64_t v90 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Google_Protobuf_Any(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  NSString v14 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v81 - v15;
  id v17 = [objc_allocWithZone(SAUIListItem) init];
  Apple_Parsec_Siri_V2alpha_DisambiguationListItem.title.getter();
  uint64_t v19 = v18;
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  [v17 setTitle:v20];

  Apple_Parsec_Siri_V2alpha_DisambiguationListItem.selectionText.getter();
  uint64_t v22 = v21;
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v22);
  id v95 = v17;
  [v17 setSelectionText:v23];

  uint64_t v24 = ((uint64_t (*)(void))Apple_Parsec_Siri_V2alpha_DisambiguationListItem.object.getter)();
  uint64_t v25 = Google_Protobuf_Any.typeURL.getter(v24);
  uint64_t v27 = v26;
  uint64_t v28 = *(void (**)(char *, uint64_t))(v11 + 8);
  int v81 = v16;
  v28(v16, v10);
  uint64_t v29 = static Google_Protobuf_Any.messageType(forTypeURL:)(v25, v27);
  uint64_t v31 = v30;
  uint64_t v32 = swift_bridgeObjectRelease(v27);
  if (v29)
  {
    uint64_t v89 = a1;
    uint64_t v33 = Apple_Parsec_Siri_V2alpha_DisambiguationListItem.object.getter(v32);
    uint64_t v34 = Google_Protobuf_Any.value.getter(v33);
    uint64_t v36 = v35;
    v28(v14, v10);
    uint64_t v101 = 0LL;
    __int128 v99 = 0u;
    __int128 v100 = 0u;
    uint64_t v37 = v90;
    default argument 3 of Message.init(serializedData:extensions:partial:options:)(v29, v31);
    *((void *)&v103 + 1) = v29;
    uint64_t v104 = v31;
    __swift_allocate_boxed_opaque_existential_1(&v102);
    uint64_t v38 = v96;
    Message.init(serializedData:extensions:partial:options:)(v34, v36, &v99, 0LL, v37, v29, v31);
    if (v38)
    {
      swift_errorRelease(v38);
      __swift_deallocate_boxed_opaque_existential_1(&v102);
      uint64_t v104 = 0LL;
      __int128 v102 = 0u;
      __int128 v103 = 0u;
      outlined destroy of Any?((uint64_t)&v102, &demangling cache variable for type metadata for Message?);
    }

    else
    {
      outlined init with take of PatternFlowProviding(&v102, (uint64_t)v105);
      outlined init with copy of OutputPublisherAsync((uint64_t)v105, (uint64_t)&v102);
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Message);
      uint64_t v40 = v87;
      uint64_t v41 = v88;
      if (swift_dynamicCast(v87, &v102, v39, v88, 0LL))
      {
        uint64_t v42 = v83;
        uint64_t v43 = v82;
        (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v82, v40, v41);
        id v44 = specialized static PegasusACEConverters.makeLocation(params:)();
        [v95 setObject:v44];

        (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v41);
        __swift_destroy_boxed_opaque_existential_1(v105);
      }

      else
      {
        uint64_t v90 = (char *)v10;
        uint64_t v45 = v89;
        if (one-time initialization token for information != -1) {
          swift_once(&one-time initialization token for information, one-time initialization function for information);
        }
        uint64_t v46 = type metadata accessor for Logger(0LL);
        __swift_project_value_buffer(v46, (uint64_t)static Logger.information);
        outlined init with copy of OutputPublisherAsync((uint64_t)v105, (uint64_t)&v99);
        uint64_t v47 = v85;
        os_log_type_t v48 = v84;
        uint64_t v49 = v86;
        uint64_t v50 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v85 + 16))(v84, v45, v86);
        __int128 v51 = (os_log_s *)Logger.logObject.getter(v50);
        os_log_type_t v52 = static os_log_type_t.default.getter();
        int v53 = v52;
        if (os_log_type_enabled(v51, v52))
        {
          uint64_t v54 = swift_slowAlloc(22LL, -1LL);
          uint64_t v88 = swift_slowAlloc(64LL, -1LL);
          uint64_t v106 = v88;
          *(_DWORD *)uint64_t v54 = 136315394;
          LODWORD(v8__swift_destroy_boxed_opaque_existential_1(v0 + 7) = v53;
          uint64_t v96 = 0LL;
          uint64_t v55 = *((void *)&v100 + 1);
          uint64_t v56 = __swift_project_boxed_opaque_existential_1(&v99, *((uint64_t *)&v100 + 1));
          uint64_t DynamicType = swift_getDynamicType(v56, v55, 1LL);
          uint64_t v98 = v101;
          uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Message.Type);
          uint64_t v58 = String.init<A>(describing:)(&DynamicType, v57);
          unint64_t v60 = v59;
          uint64_t DynamicType = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, &v106);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&DynamicType, &v98);
          swift_bridgeObjectRelease(v60);
          uint64_t v61 = __swift_destroy_boxed_opaque_existential_1(&v99);
          *(_WORD *)(v54 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
          uint64_t v62 = v81;
          uint64_t v63 = Apple_Parsec_Siri_V2alpha_DisambiguationListItem.object.getter(v61);
          uint64_t v64 = Google_Protobuf_Any.typeURL.getter(v63);
          uint64_t v65 = (void (*)(char *, char *))v28;
          uint64_t v66 = v48;
          uint64_t v67 = v47;
          unint64_t v69 = v68;
          v65(v62, v90);
          uint64_t DynamicType = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v69, &v106);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&DynamicType, &v98);
          swift_bridgeObjectRelease(v69);
          (*(void (**)(char *, uint64_t))(v67 + 8))(v66, v86);
          _os_log_impl( &dword_0,  v51,  (os_log_type_t)v87,  "Unknown or unsupported list item object type: %s (protobuf type url: %s)",  (uint8_t *)v54,  0x16u);
          uint64_t v70 = v88;
          swift_arrayDestroy(v88, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v70, -1LL, -1LL);
          swift_slowDealloc(v54, -1LL, -1LL);
        }

        else
        {

          (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
          __swift_destroy_boxed_opaque_existential_1(&v99);
        }

        __swift_destroy_boxed_opaque_existential_1(v105);
      }

      __swift_destroy_boxed_opaque_existential_1(&v102);
    }
  }

  uint64_t v71 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v72 = static PerformanceUtil.shared.getter(v71);
  uint64_t v73 = __chkstk_darwin(v72);
  uint64_t v74 = v91;
  Date.init()(v73);
  uint64_t v79 = &v78;
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SAClientBoundCommand]);
  LOBYTE(v78) = 2;
  ((void (*)(void *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, void *(*)@<X0>(void *@<X8>)))dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:))( v105,  0xD000000000000046LL,  0x8000000000081C70LL,  0LL,  v74,  "InformationFlowPlugin/InformationViewFactory.swift",  50LL,  2LL,  219LL,  "makeDisambiguationListView(list:)",  33LL,  v78,  partial apply for closure #1 in closure #1 in InformationViewFactory.makeDisambiguationListView(list:));
  swift_release(v72);
  (*(void (**)(char *, uint64_t))(v92 + 8))(v74, v93);
  uint64_t v75 = v105[0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v75);
  id v77 = v95;
  [v95 setCommands:isa];

  void *v94 = v77;
}

void *InformationViewFactory.makeDomainObjectComponentView(domainObject:renderOptions:)( uint64_t a1, uint64_t a2)
{
  uint64_t v36 = a2;
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent(0LL);
  uint64_t v38 = *(void *)(v3 - 8);
  uint64_t v39 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainObjectComponent.OneOf_Component?);
  uint64_t v9 = __chkstk_darwin(v37);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v36 - v12;
  uint64_t v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoObjectComponent(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Apple_Parsec_Siri_V2alpha_DomainObjectComponent.component.getter(v16);
  uint64_t v19 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent.OneOf_Component(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v13, 1LL, v19) == 1)
  {
    outlined destroy of Any?( (uint64_t)v13,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainObjectComponent.OneOf_Component?);
  }

  else
  {
    if ((*(unsigned int (**)(char *, uint64_t))(v20 + 88))(v13, v19) == enum case for Apple_Parsec_Siri_V2alpha_DomainObjectComponent.OneOf_Component.videoObjects(_:))
    {
      (*(void (**)(char *, uint64_t))(v20 + 96))(v13, v19);
      uint64_t v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v18, v13, v14);
      if (v36)
      {
        PommesRenderOptions.switchProfile.getter(v21);
      }

      else
      {
        uint64_t v34 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL))(v8, 1LL, 1LL, v34);
      }

      uint64_t v33 = specialized static VideoSnippetUtils.makeVideoSnippets(for:switchProfileBuilderParams:)( (uint64_t)v18,  (uint64_t)v8);
      outlined destroy of Any?( (uint64_t)v8,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
      return v33;
    }

    (*(void (**)(char *, uint64_t))(v20 + 8))(v13, v19);
  }

  uint64_t v23 = v38;
  uint64_t v22 = v39;
  if (one-time initialization token for videoSnippet != -1) {
    swift_once(&one-time initialization token for videoSnippet, one-time initialization function for videoSnippet);
  }
  uint64_t v24 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v24, (uint64_t)static Logger.videoSnippet);
  uint64_t v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 16))(v5, a1, v22);
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
  os_log_type_t v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v29 = swift_slowAlloc(32LL, -1LL);
    uint64_t v41 = v29;
    *(_DWORD *)uint64_t v28 = 136315138;
    Apple_Parsec_Siri_V2alpha_DomainObjectComponent.component.getter(v29);
    uint64_t v30 = String.init<A>(describing:)(v11, v37);
    unint64_t v32 = v31;
    uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);
    swift_bridgeObjectRelease(v32);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v39);
    _os_log_impl(&dword_0, v26, v27, "Ignoring unsupported domain object component: %s", v28, 0xCu);
    swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v22);
  }

  return _swiftEmptyArrayStorage;
}

uint64_t InformationViewFactory.makeSnippet(layoutSnippet:renderOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v92 = a2;
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent(0LL);
  uint64_t v94 = *(uint8_t **)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v86 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v86 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  char v87 = (char *)&v86 - v11;
  __chkstk_darwin(v10);
  uint64_t v88 = (char *)&v86 - v12;
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v90 = *(void *)(v13 - 8);
  uint64_t v91 = v13;
  __chkstk_darwin(v13);
  uint64_t v89 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails?);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v86 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v95 = a1;
  uint64_t v96 = (char *)&v86 - v23;
  uint64_t v24 = Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.perResultLayoutDetails.getter(v22);
  uint64_t v25 = *(void *)(v24 + 16);
  uint64_t v26 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  if (v25)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v27 + 16))( v17,  v24 + ((*(unsigned __int8 *)(v27 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80)),  v26);
    uint64_t v28 = 0LL;
  }

  else
  {
    uint64_t v28 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v17, v28, 1LL, v26);
  swift_bridgeObjectRelease(v24);
  type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails(0LL);
  int v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v17, 1LL, v26);
  uint64_t v30 = (uint64_t)v96;
  if (v29 == 1)
  {
    outlined destroy of Any?( (uint64_t)v17,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails?);
    uint64_t v31 = v7;
    uint64_t v32 = v6;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v30, 1LL, 1LL, v6);
  }

  else
  {
    Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.snippet.getter();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v17, v26);
    uint64_t v32 = v6;
    uint64_t v31 = v7;
  }

  outlined init with copy of IdentifiedUser?( v30,  (uint64_t)v21,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v21, 1LL, v32) != 1)
  {
    int v42 = (*(uint64_t (**)(char *, uint64_t))(v31 + 88))(v21, v32);
    if (v42 == enum case for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet.casinoSnippet(_:))
    {
      uint64_t v43 = type metadata accessor for PerformanceUtil(0LL);
      uint64_t v44 = static PerformanceUtil.shared.getter(v43);
      uint64_t v45 = v31;
      uint64_t v46 = __chkstk_darwin(v44);
      uint64_t v82 = v93;
      uint64_t v47 = v89;
      Date.init()(v46);
      uint64_t v84 = &v80;
      uint64_t v85 = type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SACardSnippet,  &OBJC_CLASS___SACardSnippet_ptr);
      uint64_t v83 = partial apply for closure #1 in InformationViewFactory.makeSnippet(layoutSnippet:renderOptions:);
      LOBYTE(v8__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2;
      uint64_t v80 = "makeSnippet(layoutSnippet:renderOptions:)";
      uint64_t v81 = 41LL;
      unint64_t v48 = 0x80000000000819D0LL;
      unint64_t v49 = 0xD000000000000021LL;
      uint64_t v50 = v47;
      uint64_t v51 = 243LL;
    }

    else if (v42 == enum case for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet.mapItemSnippet(_:))
    {
      uint64_t v57 = type metadata accessor for PerformanceUtil(0LL);
      uint64_t v44 = static PerformanceUtil.shared.getter(v57);
      uint64_t v45 = v31;
      uint64_t v58 = __chkstk_darwin(v44);
      uint64_t v47 = v89;
      Date.init()(v58);
      uint64_t v84 = (const char **)&v82;
      uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SALocalSearchMapItemSnippet?);
      uint64_t v83 = partial apply for closure #2 in InformationViewFactory.makeSnippet(layoutSnippet:renderOptions:);
      LOBYTE(v8__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2;
      uint64_t v80 = "makeSnippet(layoutSnippet:renderOptions:)";
      uint64_t v81 = 41LL;
      unint64_t v48 = 0x80000000000819B0LL;
      unint64_t v49 = 0xD00000000000001ELL;
      uint64_t v50 = v47;
      uint64_t v51 = 247LL;
    }

    else if (v42 == enum case for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet.legacySnippet(_:))
    {
      uint64_t v59 = type metadata accessor for PerformanceUtil(0LL);
      uint64_t v44 = static PerformanceUtil.shared.getter(v59);
      uint64_t v45 = v31;
      uint64_t v60 = __chkstk_darwin(v44);
      uint64_t v47 = v89;
      Date.init()(v60);
      uint64_t v84 = (const char **)&v82;
      uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAUISnippet?);
      uint64_t v83 = partial apply for closure #3 in InformationViewFactory.makeSnippet(layoutSnippet:renderOptions:);
      LOBYTE(v8__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2;
      uint64_t v80 = "makeSnippet(layoutSnippet:renderOptions:)";
      uint64_t v81 = 41LL;
      unint64_t v48 = 0x8000000000081980LL;
      unint64_t v49 = 0xD000000000000021LL;
      uint64_t v50 = v47;
      uint64_t v51 = 251LL;
    }

    else
    {
      if (v42 != enum case for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet.personSnippet(_:))
      {
        uint64_t v63 = v88;
        (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v88, v21, v32);
        if (one-time initialization token for information != -1) {
          swift_once(&one-time initialization token for information, one-time initialization function for information);
        }
        uint64_t v64 = type metadata accessor for Logger(0LL);
        __swift_project_value_buffer(v64, (uint64_t)static Logger.information);
        uint64_t v65 = *(uint64_t (**)(char *, char *, uint64_t))(v31 + 16);
        uint64_t v66 = v87;
        uint64_t v67 = v65(v87, v63, v32);
        unint64_t v68 = (os_log_s *)Logger.logObject.getter(v67);
        os_log_type_t v69 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v68, v69))
        {
          uint64_t v70 = swift_slowAlloc(12LL, -1LL);
          uint64_t v95 = v31;
          uint64_t v71 = (uint8_t *)v70;
          uint64_t v72 = swift_slowAlloc(32LL, -1LL);
          uint64_t v98 = v72;
          *(_DWORD *)uint64_t v71 = 136315138;
          uint64_t v94 = v71 + 4;
          uint64_t v73 = v86;
          v65(v86, v66, v32);
          uint64_t v74 = String.init<A>(describing:)(v73, v32);
          unint64_t v76 = v75;
          uint64_t v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, &v98);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98);
          swift_bridgeObjectRelease(v76);
          id v77 = *(void (**)(char *, uint64_t))(v95 + 8);
          v77(v66, v32);
          _os_log_impl(&dword_0, v68, v69, "InfoViewFactory unsupported snippet %s", v71, 0xCu);
          swift_arrayDestroy(v72, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v72, -1LL, -1LL);
          swift_slowDealloc(v71, -1LL, -1LL);

          v77(v88, v32);
        }

        else
        {

          int v78 = *(void (**)(char *, uint64_t))(v31 + 8);
          v78(v66, v32);
          v78(v63, v32);
        }

        goto LABEL_31;
      }

      uint64_t v61 = type metadata accessor for PerformanceUtil(0LL);
      uint64_t v44 = static PerformanceUtil.shared.getter(v61);
      uint64_t v45 = v31;
      uint64_t v62 = __chkstk_darwin(v44);
      uint64_t v47 = v89;
      Date.init()(v62);
      uint64_t v84 = (const char **)&v82;
      uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAABPersonSnippet?);
      uint64_t v83 = partial apply for closure #4 in InformationViewFactory.makeSnippet(layoutSnippet:renderOptions:);
      LOBYTE(v8__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2;
      uint64_t v80 = "makeSnippet(layoutSnippet:renderOptions:)";
      uint64_t v81 = 41LL;
      unint64_t v48 = 0x8000000000081920LL;
      unint64_t v49 = 0xD000000000000021LL;
      uint64_t v50 = v47;
      uint64_t v51 = 255LL;
    }

    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( &v98,  v49,  v48,  0LL,  v50,  "InformationFlowPlugin/InformationViewFactory.swift",  50LL,  2LL,  v51,  v80,  v81,  v82,  v83,  v84,  v85);
    swift_release(v44);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v47, v91);
    outlined destroy of Any?( v30,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
    uint64_t v56 = v98;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v21, v32);
    return v56;
  }

  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v33 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v33, (uint64_t)static Logger.information);
  uint64_t v34 = v94;
  uint64_t v35 = v95;
  uint64_t v36 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v94 + 2))(v5, v95, v3);
  uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v38 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v40 = swift_slowAlloc(32LL, -1LL);
    uint64_t v98 = v40;
    *(_DWORD *)uint64_t v39 = 136315138;
    lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent and conformance Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent);
    Swift::String v41 = Message.textFormatString()();
    uint64_t v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( v41._countAndFlagsBits,  (unint64_t)v41._object,  &v98);
    uint64_t v30 = (uint64_t)v96;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98);
    swift_bridgeObjectRelease(v41._object);
    (*((void (**)(char *, uint64_t))v94 + 1))(v5, v3);
    _os_log_impl(&dword_0, v37, v38, "InfoViewFactory missing perResultLayoutDetails snippet %s", v39, 0xCu);
    swift_arrayDestroy(v40, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v35 = v95;
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_slowDealloc(v39, -1LL, -1LL);
  }

  else
  {
    (*((void (**)(char *, uint64_t))v34 + 1))(v5, v3);
  }

  uint64_t v52 = Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.hasCompactSnippet.getter();
  if ((v52 & 1) == 0)
  {
LABEL_31:
    outlined destroy of Any?( v30,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
    return 0LL;
  }

  int v53 = (os_log_s *)Logger.logObject.getter(v52);
  os_log_type_t v54 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v55 = 0;
    _os_log_impl(&dword_0, v53, v54, "InfoViewFactory received compact snippet without perResultLayoutDetails", v55, 2u);
    swift_slowDealloc(v55, -1LL, -1LL);
  }

  uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v93 + 304LL))(v35, v92);
  outlined destroy of Any?( v30,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
  return v56;
}

id InformationViewFactory.makeMapSnippet(layoutSnippet:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_UIItemType(0LL);
  uint64_t v107 = *(void *)(v2 - 8);
  uint64_t v108 = v2;
  __chkstk_darwin(v2);
  uint64_t v106 = (char *)&v96 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v104 = *(void *)(v4 - 8);
  uint64_t v105 = v4;
  __chkstk_darwin(v4);
  __int128 v103 = (char *)&v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v114 = v10;
  uint64_t v115 = v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v112 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v96 - v15;
  __chkstk_darwin(v14);
  __int128 v102 = (char *)&v96 - v17;
  uint64_t v101 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationBuilderParams(0LL);
  uint64_t v100 = *(void *)(v101 - 8);
  __chkstk_darwin(v101);
  __int128 v99 = (char *)&v96 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails?);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v96 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v96 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemSnippet(0LL);
  uint64_t v110 = *(void *)(v25 - 8);
  uint64_t v111 = v25;
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v109 = (char *)&v96 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v113 = a1;
  uint64_t v28 = Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.perResultLayoutDetails.getter(v26);
  uint64_t v29 = *(void *)(v28 + 16);
  uint64_t v30 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails(0LL);
  uint64_t v31 = *(void *)(v30 - 8);
  if (v29)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v31 + 16))( v21,  v28 + ((*(unsigned __int8 *)(v31 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80)),  v30);
    uint64_t v32 = 0LL;
  }

  else
  {
    uint64_t v32 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v21, v32, 1LL, v30);
  swift_bridgeObjectRelease(v28);
  type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v21, 1LL, v30) == 1)
  {
    outlined destroy of Any?( (uint64_t)v21,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails?);
    uint64_t v33 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL))(v24, 1LL, 1LL, v33);
LABEL_7:
    outlined destroy of Any?( (uint64_t)v24,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
    uint64_t v36 = v114;
LABEL_8:
    uint64_t v37 = v115;
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v38 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v38, (uint64_t)static Logger.information);
    uint64_t v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 16);
    uint64_t v40 = v39(v16, v113, v36);
    Swift::String v41 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = v16;
      uint64_t v44 = v36;
      uint64_t v45 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v46 = swift_slowAlloc(32LL, -1LL);
      v116[0] = v46;
      *(_DWORD *)uint64_t v45 = 136315138;
      uint64_t v47 = v112;
      v39(v112, (uint64_t)v43, v44);
      uint64_t v48 = String.init<A>(describing:)(v47, v44);
      unint64_t v50 = v49;
      uint64_t v119 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120);
      swift_bridgeObjectRelease(v50);
      (*(void (**)(char *, uint64_t))(v115 + 8))(v43, v44);
      _os_log_impl(&dword_0, v41, v42, "InfoViewFactory invalid map snippet %s", v45, 0xCu);
      swift_arrayDestroy(v46, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1LL, -1LL);
      swift_slowDealloc(v45, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v37 + 8))(v16, v36);
    }

    return 0LL;
  }

  Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.snippet.getter();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v30);
  uint64_t v34 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet(0LL);
  uint64_t v35 = *(void *)(v34 - 8);
  int v53 = (*(uint64_t (**)(char *, uint64_t))(v35 + 88))(v24, v34);
  uint64_t v36 = v114;
  if (v53 != enum case for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet.mapItemSnippet(_:))
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(v24, v34);
    goto LABEL_8;
  }

  (*(void (**)(char *, uint64_t))(v35 + 96))(v24, v34);
  os_log_type_t v54 = v109;
  (*(void (**)(char *, char *, uint64_t))(v110 + 32))(v109, v24, v111);
  uint64_t v112 = (char *)[objc_allocWithZone(SALocalSearchMapItemSnippet) init];
  uint64_t v55 = Apple_Parsec_Siri_V2alpha_MapItemSnippet.objects.getter();
  uint64_t v56 = v55;
  uint64_t v57 = *(void *)(v55 + 16);
  if (v57)
  {
    v116[0] = (uint64_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v57);
    unint64_t v58 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v97 = v56;
    unint64_t v59 = v56 + v58;
    uint64_t v60 = *(void *)(v7 + 72);
    uint64_t v61 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v61(v9, v59, v6);
      id v62 = specialized static PegasusACEConverters.makeLocalSearchMapItem(params:)();
      uint64_t v63 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v63);
      uint64_t v64 = *(void *)(v116[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v64);
      uint64_t v65 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v64, v62);
      specialized ContiguousArray._endMutation()(v65);
      v59 += v60;
      --v57;
    }

    while (v57);
    uint64_t v66 = (void *)v116[0];
    swift_bridgeObjectRelease(v97);
    uint64_t v67 = v114;
    os_log_type_t v54 = v109;
  }

  else
  {
    swift_bridgeObjectRelease(v55);
    uint64_t v66 = _swiftEmptyArrayStorage;
    uint64_t v67 = v36;
  }

  type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SALocalSearchMapItem,  &OBJC_CLASS___SALocalSearchMapItem_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v66);
  id v69 = v112;
  [v112 setItems:isa];

  Apple_Parsec_Siri_V2alpha_MapItemSnippet.responseViewID.getter();
  uint64_t v71 = v70;
  NSString v72 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v71);
  [v69 setResponseViewId:v72];

  uint64_t v73 = v99;
  Apple_Parsec_Siri_V2alpha_MapItemSnippet.searchRegionCenter.getter();
  id v74 = specialized static PegasusACEConverters.makeLocation(params:)();
  (*(void (**)(char *, uint64_t))(v100 + 8))(v73, v101);
  [v69 setSearchRegionCenter:v74];

  type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
  Class v75 = NSNumber.init(BOOLeanLiteral:)(0).super.super.isa;
  [v69 setUserCurrentLocation:v75];

  [v69 setSearchAlongRoute:0];
  uint64_t v76 = (uint64_t)v102;
  (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v102, v113, v67);
  id v77 = v69;
  char v78 = 0;
  if ((AFIsInternalInstall() & 1) != 0)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v98 + 104LL))(v116);
    uint64_t v79 = v117;
    uint64_t v80 = v118;
    __swift_project_boxed_opaque_existential_1(v116, v117);
    char v81 = dispatch thunk of PommesServerFallbackDisabling.shouldDisableServerFallbackNL(isDomainDirected:)( 0LL,  v79,  v80);
    __swift_destroy_boxed_opaque_existential_1(v116);
    char v78 = v81 ^ 1;
  }

  type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAUISash,  &OBJC_CLASS___SAUISash_ptr);
  id v82 = SAUISash.init(layoutSnippet:showInternalPommesAttribution:)(v76, v78 & 1);
  [v77 setSash:v82];

  uint64_t v83 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v84 = static PerformanceUtil.shared.getter(v83);
  uint64_t v85 = __chkstk_darwin(v84);
  uint64_t v86 = v103;
  Date.init()(v85);
  uint64_t v94 = &v93;
  uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SAClientBoundCommand]);
  LOBYTE(v93) = 2;
  ((void (*)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, void *(*)@<X0>(void *@<X8>)))dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:))( v116,  0xD00000000000003ELL,  0x8000000000081A00LL,  0LL,  v86,  "InformationFlowPlugin/InformationViewFactory.swift",  50LL,  2LL,  286LL,  "makeMapSnippet(layoutSnippet:)",  30LL,  v93,  partial apply for closure #2 in InformationViewFactory.makeMapSnippet(layoutSnippet:));
  swift_release(v84);
  (*(void (**)(char *, uint64_t))(v104 + 8))(v86, v105);
  uint64_t v87 = v116[0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class v88 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v87);
  [v77 setProviderCommand:v88];

  id v51 = v77;
  uint64_t v89 = v106;
  Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.uiItemType.getter();
  Apple_Parsec_Siri_V2alpha_UIItemType.aceValue.getter();
  uint64_t v91 = v90;
  (*(void (**)(char *, uint64_t))(v107 + 8))(v89, v108);
  NSString v92 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v91);
  [v51 setItemType:v92];

  (*(void (**)(char *, uint64_t))(v110 + 8))(v54, v111);
  return v51;
}

id SAUISash.init(layoutSnippet:showInternalPommesAttribution:)(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_Sash(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.sash.getter(v6);
  uint64_t v10 = Apple_Parsec_Siri_V2alpha_Sash.appName.getter(v9);
  unint64_t v12 = v11;
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  uint64_t v14 = v13(v8, v4);
  uint64_t v15 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000LL) == 0) {
    uint64_t v15 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (v15 && (a2 & 1) != 0)
  {
    uint64_t v24 = v10;
    unint64_t v25 = v12;
    v16._uint64_t countAndFlagsBits = 0x454D4D4F50203A20LL;
    v16._object = (void *)0xE900000000000053LL;
    String.append(_:)(v16);
    uint64_t v10 = v24;
    unint64_t v12 = v25;
  }

  uint64_t v17 = Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.sash.getter(v14);
  uint64_t v18 = Apple_Parsec_Siri_V2alpha_Sash.appID.getter(v17);
  uint64_t v20 = v19;
  v13(v8, v4);
  id v21 = SAUISash.init(appName:appID:)(v10, v12, v18, v20);
  uint64_t v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8LL))(a1, v22);
  return v21;
}

uint64_t Apple_Parsec_Siri_V2alpha_UIItemType.aceValue.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_UIItemType(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (void *)((char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  int v6 = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for Apple_Parsec_Siri_V2alpha_UIItemType.UNRECOGNIZED(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v7 = *v5;
    v15[0] = 0LL;
    v15[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(16LL);
    swift_bridgeObjectRelease(v15[1]);
    strcpy((char *)v15, "unrecognized(");
    HIWORD(v15[1]) = -4864;
    v14[1] = v7;
    v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    object = v8._object;
    String.append(_:)(v8);
    swift_bridgeObjectRelease(object);
    v10._uint64_t countAndFlagsBits = 41LL;
    v10._object = (void *)0xE100000000000000LL;
    String.append(_:)(v10);
    return v15[0];
  }

  else
  {
    if (v6 == enum case for Apple_Parsec_Siri_V2alpha_UIItemType.unspecified(_:))
    {
      unint64_t v12 = &SAAceViewUIItemTypeItemTypeUnspecifiedValue;
    }

    else if (v6 == enum case for Apple_Parsec_Siri_V2alpha_UIItemType.conversation(_:))
    {
      unint64_t v12 = &SAAceViewUIItemTypeItemTypeConversationValue;
    }

    else if (v6 == enum case for Apple_Parsec_Siri_V2alpha_UIItemType.result(_:))
    {
      unint64_t v12 = &SAAceViewUIItemTypeItemTypeResultValue;
    }

    else if (v6 == enum case for Apple_Parsec_Siri_V2alpha_UIItemType.floating(_:))
    {
      unint64_t v12 = &SAAceViewUIItemTypeItemTypeFloatingValue;
    }

    else if (v6 == enum case for Apple_Parsec_Siri_V2alpha_UIItemType.hint(_:))
    {
      unint64_t v12 = &SAAceViewUIItemTypeItemTypeHintValue;
    }

    else
    {
      if (v6 != enum case for Apple_Parsec_Siri_V2alpha_UIItemType.announcement(_:))
      {
        uint64_t v11 = 0x6E676F6365726E75LL;
        (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
        return v11;
      }

      unint64_t v12 = &SAAceViewUIItemTypeItemTypeAnnouncementValue;
    }

    return static String._unconditionallyBridgeFromObjectiveC(_:)(*v12);
  }

id InformationViewFactory.makePersonSnippet(layoutSnippet:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v63 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v57 - v6;
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_UIItemType(0LL);
  uint64_t v61 = *(void *)(v8 - 8);
  uint64_t v62 = v8;
  __chkstk_darwin(v8);
  uint64_t v60 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails?);
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PersonSnippet(0LL);
  uint64_t v58 = *(void *)(v16 - 8);
  uint64_t v59 = v16;
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = a1;
  uint64_t v20 = Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.perResultLayoutDetails.getter(v17);
  uint64_t v21 = *(void *)(v20 + 16);
  uint64_t v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  if (v21)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))( v12,  v20 + ((*(unsigned __int8 *)(v23 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80)),  v22);
    uint64_t v24 = 0LL;
  }

  else
  {
    uint64_t v24 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v12, v24, 1LL, v22);
  swift_bridgeObjectRelease(v20);
  type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v12, 1LL, v22) == 1)
  {
    outlined destroy of Any?( (uint64_t)v12,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails?);
    uint64_t v25 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56LL))(v15, 1LL, 1LL, v25);
LABEL_7:
    outlined destroy of Any?( (uint64_t)v15,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
    goto LABEL_8;
  }

  Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.snippet.getter();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v22);
  uint64_t v26 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v27 + 88))(v15, v26) == enum case for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet.personSnippet(_:))
  {
    (*(void (**)(char *, uint64_t))(v27 + 96))(v15, v26);
    uint64_t v44 = v58;
    uint64_t v43 = v59;
    (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v19, v15, v59);
    id v45 = [objc_allocWithZone(SAABPersonSnippet) init];
    uint64_t v46 = Apple_Parsec_Siri_V2alpha_PersonSnippet.displayProperties.getter();
    uint64_t v47 = v57;
    swift_retain(v57);
    uint64_t v48 = specialized Sequence.compactMap<A>(_:)(v46, v47);
    swift_bridgeObjectRelease(v46);
    swift_release(v47);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v48);
    [v45 setDisplayProperties:isa];

    uint64_t v50 = Apple_Parsec_Siri_V2alpha_PersonSnippet.objects.getter();
    swift_retain(v47);
    id v51 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10PegasusAPI32Apple_Parsec_Siri_V2alpha_PersonVG_So8SAPersonCs5NeverOTg5047_s21InformationFlowPlugin0A11ViewFactoryC17makej32Snippet06layoutH0So010SAABPersonv5CSg10d6API032f1_g1_h1_i25_LayoutH9ComponentV_tFSo8K25CAI0m1_n1_o1_p1_G0VXEfU0_0nO6Plugin0nrS0CTf1cn_nTf4ng_n( v50,  v47);
    swift_bridgeObjectRelease(v50);
    swift_release(v47);
    type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAPerson,  &OBJC_CLASS___SAPerson_ptr);
    Class v52 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v51);
    [v45 setPersons:v52];

    id v41 = v45;
    int v53 = v60;
    Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.uiItemType.getter();
    Apple_Parsec_Siri_V2alpha_UIItemType.aceValue.getter();
    uint64_t v55 = v54;
    (*(void (**)(char *, uint64_t))(v61 + 8))(v53, v62);
    NSString v56 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v55);
    [v41 setItemType:v56];

    (*(void (**)(char *, uint64_t))(v44 + 8))(v19, v43);
    return v41;
  }

  (*(void (**)(char *, uint64_t))(v27 + 8))(v15, v26);
LABEL_8:
  uint64_t v28 = v64;
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v29 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v29, (uint64_t)static Logger.information);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v31 = v30(v7, v28, v2);
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v35 = swift_slowAlloc(32LL, -1LL);
    uint64_t v64 = v3;
    uint64_t v36 = v35;
    uint64_t v66 = v35;
    *(_DWORD *)uint64_t v34 = 136315138;
    uint64_t v37 = v63;
    v30(v63, (uint64_t)v7, v2);
    uint64_t v38 = String.init<A>(describing:)(v37, v2);
    unint64_t v40 = v39;
    uint64_t v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
    swift_bridgeObjectRelease(v40);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v7, v2);
    _os_log_impl(&dword_0, v32, v33, "InfoViewFactory invalid person snippet %s", v34, 0xCu);
    swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1LL, -1LL);
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
  }

  return 0LL;
}

uint64_t InformationViewFactory.makePersonDisplayProperty(personProperty:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v26 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v26 - v10;
  unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v12((char *)&v26 - v10, a1, v2);
  int v13 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v11, v2);
  if (v13 == enum case for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty.firstName(_:))
  {
    uint64_t v14 = &SAPersonFirstNamePListKey;
    return static String._unconditionallyBridgeFromObjectiveC(_:)(*v14);
  }

  if (v13 == enum case for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty.fullName(_:))
  {
    uint64_t v14 = &SAPersonFullNamePListKey;
    return static String._unconditionallyBridgeFromObjectiveC(_:)(*v14);
  }

  if (v13 == enum case for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty.lastName(_:))
  {
    uint64_t v14 = &SAPersonLastNamePListKey;
    return static String._unconditionallyBridgeFromObjectiveC(_:)(*v14);
  }

  if (v13 == enum case for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty.middleName(_:))
  {
    uint64_t v14 = &SAPersonMiddleNamePListKey;
    return static String._unconditionallyBridgeFromObjectiveC(_:)(*v14);
  }

  if (v13 == enum case for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty.nickName(_:))
  {
    uint64_t v14 = &SAPersonNickNamePListKey;
    return static String._unconditionallyBridgeFromObjectiveC(_:)(*v14);
  }

  if (v13 == enum case for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty.prefix(_:))
  {
    uint64_t v14 = &SAPersonPrefixPListKey;
    return static String._unconditionallyBridgeFromObjectiveC(_:)(*v14);
  }

  if (v13 == enum case for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty.suffix(_:))
  {
    uint64_t v14 = &SAPersonSuffixPListKey;
    return static String._unconditionallyBridgeFromObjectiveC(_:)(*v14);
  }

  if (v13 == enum case for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty.me(_:))
  {
    uint64_t v14 = &SAPersonMePListKey;
    return static String._unconditionallyBridgeFromObjectiveC(_:)(*v14);
  }

  if (v13 == enum case for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty.phones(_:))
  {
    uint64_t v14 = &SAPersonPhonesPListKey;
    return static String._unconditionallyBridgeFromObjectiveC(_:)(*v14);
  }

  if (v13 == enum case for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty.company(_:))
  {
    uint64_t v14 = &SAPersonCompanyPListKey;
    return static String._unconditionallyBridgeFromObjectiveC(_:)(*v14);
  }

  if (v13 == enum case for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty.addresses(_:))
  {
    uint64_t v14 = &SAPersonAddressesPListKey;
    return static String._unconditionallyBridgeFromObjectiveC(_:)(*v14);
  }

  if (v13 == enum case for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty.emails(_:))
  {
    uint64_t v14 = &SAPersonEmailsPListKey;
    return static String._unconditionallyBridgeFromObjectiveC(_:)(*v14);
  }

  if (v13 == enum case for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty.relatedNames(_:))
  {
    uint64_t v14 = &SAPersonRelatedNamesPListKey;
    return static String._unconditionallyBridgeFromObjectiveC(_:)(*v14);
  }

  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v16, (uint64_t)static Logger.information);
  uint64_t v17 = ((uint64_t (*)(char *, uint64_t, uint64_t))v12)(v9, a1, v2);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v27 = swift_slowAlloc(32LL, -1LL);
    uint64_t v29 = v27;
    *(_DWORD *)uint64_t v20 = 136315138;
    uint64_t v26 = v20 + 4;
    v12(v6, (uint64_t)v9, v2);
    uint64_t v21 = String.init<A>(describing:)(v6, v2);
    unint64_t v23 = v22;
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
    swift_bridgeObjectRelease(v23);
    uint64_t v24 = *(void (**)(char *, uint64_t))(v3 + 8);
    v24(v9, v2);
    _os_log_impl(&dword_0, v18, v19, "Unable to translate an unknown person display property key: %s", v20, 0xCu);
    uint64_t v25 = v27;
    swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  else
  {
    uint64_t v24 = *(void (**)(char *, uint64_t))(v3 + 8);
    v24(v9, v2);
  }

  v24(v11, v2);
  return 0LL;
}

id InformationViewFactory.makePerson(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v9 = [objc_allocWithZone(SAPerson) init];
  uint64_t v10 = ((uint64_t (*)(void))Apple_Parsec_Siri_V2alpha_Person.contactIdentifier.getter)();
  unint64_t v12 = v11;
  uint64_t v13 = swift_bridgeObjectRelease(v11);
  uint64_t v14 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000LL) == 0) {
    uint64_t v14 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (v14)
  {
    uint64_t v15 = Apple_Parsec_Siri_V2alpha_Person.contactIdentifier.getter(v13);
    uint64_t v17 = v16;
    URL.init(string:)(v15);
    swift_bridgeObjectRelease(v17);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
    {
      uint64_t v13 = outlined destroy of Any?((uint64_t)v4, &demangling cache variable for type metadata for URL?);
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
      id v18 = v9;
      URL._bridgeToObjectiveC()(v19);
      uint64_t v21 = v20;
      [v18 setIdentifier:v20];

      uint64_t v13 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }

  uint64_t v22 = Apple_Parsec_Siri_V2alpha_Person.givenName.getter(v13);
  unint64_t v24 = v23;
  uint64_t v25 = swift_bridgeObjectRelease(v23);
  uint64_t v26 = HIBYTE(v24) & 0xF;
  if ((v24 & 0x2000000000000000LL) == 0) {
    uint64_t v26 = v22 & 0xFFFFFFFFFFFFLL;
  }
  if (v26)
  {
    Apple_Parsec_Siri_V2alpha_Person.givenName.getter(v25);
    uint64_t v28 = v27;
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v28);
    [v9 setFirstName:v29];
  }

  uint64_t v30 = Apple_Parsec_Siri_V2alpha_Person.middleName.getter(v25);
  unint64_t v32 = v31;
  uint64_t v33 = swift_bridgeObjectRelease(v31);
  uint64_t v34 = HIBYTE(v32) & 0xF;
  if ((v32 & 0x2000000000000000LL) == 0) {
    uint64_t v34 = v30 & 0xFFFFFFFFFFFFLL;
  }
  if (v34)
  {
    Apple_Parsec_Siri_V2alpha_Person.middleName.getter(v33);
    uint64_t v36 = v35;
    NSString v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v36);
    [v9 setMiddleName:v37];
  }

  uint64_t v38 = Apple_Parsec_Siri_V2alpha_Person.familyName.getter(v33);
  unint64_t v40 = v39;
  uint64_t v41 = swift_bridgeObjectRelease(v39);
  uint64_t v42 = HIBYTE(v40) & 0xF;
  if ((v40 & 0x2000000000000000LL) == 0) {
    uint64_t v42 = v38 & 0xFFFFFFFFFFFFLL;
  }
  if (v42)
  {
    Apple_Parsec_Siri_V2alpha_Person.familyName.getter(v41);
    uint64_t v44 = v43;
    NSString v45 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v44);
    [v9 setLastName:v45];
  }

  uint64_t v46 = Apple_Parsec_Siri_V2alpha_Person.nickname.getter(v41);
  unint64_t v48 = v47;
  uint64_t v49 = swift_bridgeObjectRelease(v47);
  uint64_t v50 = HIBYTE(v48) & 0xF;
  if ((v48 & 0x2000000000000000LL) == 0) {
    uint64_t v50 = v46 & 0xFFFFFFFFFFFFLL;
  }
  if (v50)
  {
    Apple_Parsec_Siri_V2alpha_Person.nickname.getter(v49);
    uint64_t v52 = v51;
    NSString v53 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v52);
    [v9 setNickName:v53];
  }

  uint64_t v54 = Apple_Parsec_Siri_V2alpha_Person.fullName.getter(v49);
  unint64_t v56 = v55;
  uint64_t v57 = swift_bridgeObjectRelease(v55);
  uint64_t v58 = HIBYTE(v56) & 0xF;
  if ((v56 & 0x2000000000000000LL) == 0) {
    uint64_t v58 = v54 & 0xFFFFFFFFFFFFLL;
  }
  if (v58)
  {
    Apple_Parsec_Siri_V2alpha_Person.fullName.getter(v57);
    uint64_t v60 = v59;
    NSString v61 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v60);
    [v9 setFullName:v61];
  }

  uint64_t v62 = Apple_Parsec_Siri_V2alpha_Person.addresses.getter(v57);
  uint64_t v63 = *(void *)(v62 + 16);
  uint64_t v64 = swift_bridgeObjectRelease(v62);
  if (v63)
  {
    uint64_t v65 = Apple_Parsec_Siri_V2alpha_Person.addresses.getter(v64);
    unint64_t v79 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v66 = *(void *)(v65 + 16);
    if (v66)
    {
      uint64_t v67 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_ContactAddress(0LL) - 8);
      unint64_t v68 = v65 + ((*(unsigned __int8 *)(v67 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80));
      id v69 = *(uint64_t (**)(unint64_t))(*(void *)v1 + 232LL);
      uint64_t v70 = *(void *)(v67 + 72);
      swift_retain(v1);
      do
      {
        uint64_t v71 = v69(v68);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v71);
        unint64_t v73 = *(void *)((char *)&dword_10 + (v79 & 0xFFFFFFFFFFFFFF8LL));
        unint64_t v72 = *(void *)((char *)&dword_18 + (v79 & 0xFFFFFFFFFFFFFF8LL));
        if (v73 >= v72 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v72 > 1, v73 + 1, 1LL);
        }
        uint64_t v74 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v73, v71);
        specialized Array._endMutation()(v74);
        v68 += v70;
        --v66;
      }

      while (v66);
      Class v75 = (void *)v79;
    }

    else
    {
      swift_retain(v1);
      Class v75 = _swiftEmptyArrayStorage;
    }

    swift_bridgeObjectRelease(v65);
    swift_release(v1);
    type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SALocation,  &OBJC_CLASS___SALocation_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v75);
    [v9 setAddresses:isa];
  }

  return v9;
}

id InformationViewFactory.makeAddress(_:)()
{
  id v0 = [objc_allocWithZone(SALocation) init];
  uint64_t v1 = ((uint64_t (*)(void))Apple_Parsec_Siri_V2alpha_ContactAddress.addressLabel.getter)();
  unint64_t v3 = v2;
  uint64_t v4 = swift_bridgeObjectRelease(v2);
  uint64_t v5 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000LL) == 0) {
    uint64_t v5 = v1 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    Apple_Parsec_Siri_V2alpha_ContactAddress.addressLabel.getter(v4);
    uint64_t v7 = v6;
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
    [v0 setLabel:v8];
  }

  uint64_t v9 = Apple_Parsec_Siri_V2alpha_ContactAddress.street.getter(v4);
  unint64_t v11 = v10;
  uint64_t v12 = swift_bridgeObjectRelease(v10);
  uint64_t v13 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000LL) == 0) {
    uint64_t v13 = v9 & 0xFFFFFFFFFFFFLL;
  }
  if (v13)
  {
    Apple_Parsec_Siri_V2alpha_ContactAddress.street.getter(v12);
    uint64_t v15 = v14;
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v15);
    [v0 setStreet:v16];
  }

  uint64_t v17 = Apple_Parsec_Siri_V2alpha_ContactAddress.city.getter(v12);
  unint64_t v19 = v18;
  uint64_t v20 = swift_bridgeObjectRelease(v18);
  uint64_t v21 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000LL) == 0) {
    uint64_t v21 = v17 & 0xFFFFFFFFFFFFLL;
  }
  if (v21)
  {
    Apple_Parsec_Siri_V2alpha_ContactAddress.city.getter(v20);
    uint64_t v23 = v22;
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v23);
    [v0 setCity:v24];
  }

  uint64_t v25 = Apple_Parsec_Siri_V2alpha_ContactAddress.state.getter(v20);
  unint64_t v27 = v26;
  uint64_t v28 = swift_bridgeObjectRelease(v26);
  uint64_t v29 = HIBYTE(v27) & 0xF;
  if ((v27 & 0x2000000000000000LL) == 0) {
    uint64_t v29 = v25 & 0xFFFFFFFFFFFFLL;
  }
  if (v29)
  {
    Apple_Parsec_Siri_V2alpha_ContactAddress.state.getter(v28);
    uint64_t v31 = v30;
    NSString v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v31);
    [v0 setStateCode:v32];
  }

  uint64_t v33 = Apple_Parsec_Siri_V2alpha_ContactAddress.zipCode.getter(v28);
  unint64_t v35 = v34;
  uint64_t v36 = swift_bridgeObjectRelease(v34);
  uint64_t v37 = HIBYTE(v35) & 0xF;
  if ((v35 & 0x2000000000000000LL) == 0) {
    uint64_t v37 = v33 & 0xFFFFFFFFFFFFLL;
  }
  if (v37)
  {
    Apple_Parsec_Siri_V2alpha_ContactAddress.zipCode.getter(v36);
    uint64_t v39 = v38;
    NSString v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v39);
    [v0 setPostalCode:v40];
  }

  uint64_t v41 = Apple_Parsec_Siri_V2alpha_ContactAddress.countryCode.getter(v36);
  unint64_t v43 = v42;
  uint64_t v44 = swift_bridgeObjectRelease(v42);
  uint64_t v45 = HIBYTE(v43) & 0xF;
  if ((v43 & 0x2000000000000000LL) == 0) {
    uint64_t v45 = v41 & 0xFFFFFFFFFFFFLL;
  }
  if (v45)
  {
    Apple_Parsec_Siri_V2alpha_ContactAddress.countryCode.getter(v44);
    uint64_t v47 = v46;
    NSString v48 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v47);
    [v0 setCountryCode:v48];
  }

  return v0;
}

void *InformationViewFactory.makeLegacySnippet(layoutSnippet:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_UIItemType(0LL);
  uint64_t v87 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v86 = (char *)&v85 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent(0LL);
  __int128 v99 = *(uint8_t **)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v97 = (char *)&v85 - v9;
  __chkstk_darwin(v8);
  uint64_t v88 = (uint64_t)&v85 - v10;
  uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Legacy_LegacySnippet.OneOf_Snippet?);
  uint64_t v11 = __chkstk_darwin(v91);
  uint64_t v90 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v92 = (uint64_t)&v85 - v14;
  __chkstk_darwin(v13);
  uint64_t v94 = (char *)&v85 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails?);
  __chkstk_darwin(v16);
  unint64_t v18 = (char *)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v85 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v95 = type metadata accessor for Apple_Parsec_Siri_Legacy_LegacySnippet(0LL);
  uint64_t v22 = *(void *)(v95 - 8);
  uint64_t v23 = __chkstk_darwin(v95);
  int v93 = (char *)&v85 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v96 = (char *)&v85 - v26;
  uint64_t v98 = a1;
  uint64_t v27 = Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.perResultLayoutDetails.getter(v25);
  uint64_t v28 = *(void *)(v27 + 16);
  uint64_t v29 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  if (v28)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v30 + 16))( v18,  v27 + ((*(unsigned __int8 *)(v30 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80)),  v29);
    uint64_t v31 = 0LL;
  }

  else
  {
    uint64_t v31 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56))(v18, v31, 1LL, v29);
  swift_bridgeObjectRelease(v27);
  type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v18, 1LL, v29) == 1)
  {
    outlined destroy of Any?( (uint64_t)v18,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails?);
    uint64_t v32 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))(v21, 1LL, 1LL, v32);
LABEL_7:
    outlined destroy of Any?( (uint64_t)v21,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
LABEL_8:
    unint64_t v35 = v99;
    uint64_t v36 = v97;
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v37 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v37, (uint64_t)static Logger.information);
    uint64_t v38 = (uint64_t (*)(char *, uint64_t, uint64_t))*((void *)v35 + 2);
    uint64_t v39 = v38(v36, v98, v4);
    NSString v40 = (os_log_s *)Logger.logObject.getter(v39);
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      unint64_t v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v43 = swift_slowAlloc(32LL, -1LL);
      v100[0] = v43;
      *(_DWORD *)unint64_t v42 = 136315138;
      v38(v7, (uint64_t)v36, v4);
      uint64_t v44 = String.init<A>(describing:)(v7, v4);
      unint64_t v46 = v45;
      uint64_t v103 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104);
      swift_bridgeObjectRelease(v46);
      (*((void (**)(char *, uint64_t))v99 + 1))(v36, v4);
      _os_log_impl(&dword_0, v40, v41, "InfoViewFactory invalid legacy snippet %s", v42, 0xCu);
      swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1LL, -1LL);
      swift_slowDealloc(v42, -1LL, -1LL);
    }

    else
    {
      (*((void (**)(char *, uint64_t))v35 + 1))(v36, v4);
    }

    return 0LL;
  }

  Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.snippet.getter();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v18, v29);
  uint64_t v33 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet(0LL);
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v34 + 88))(v21, v33) != enum case for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet.legacySnippet(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v21, v33);
    goto LABEL_8;
  }

  uint64_t v97 = (char *)v2;
  (*(void (**)(char *, uint64_t))(v34 + 96))(v21, v33);
  uint64_t v49 = v22;
  uint64_t v51 = v95;
  uint64_t v50 = v96;
  uint64_t v52 = (*(uint64_t (**)(char *, char *, uint64_t))(v22 + 32))(v96, v21, v95);
  uint64_t v53 = (uint64_t)v94;
  Apple_Parsec_Siri_Legacy_LegacySnippet.snippet.getter(v52);
  uint64_t v54 = type metadata accessor for Apple_Parsec_Siri_Legacy_LegacySnippet.OneOf_Snippet(0LL);
  uint64_t v55 = *(void *)(v54 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v53, 1LL, v54) == 1)
  {
LABEL_24:
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v62 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v62, (uint64_t)static Logger.information);
    uint64_t v63 = v93;
    uint64_t v64 = (*(uint64_t (**)(char *, char *, uint64_t))(v49 + 16))(v93, v50, v51);
    uint64_t v65 = (os_log_s *)Logger.logObject.getter(v64);
    uint64_t v66 = v49;
    os_log_type_t v67 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v67))
    {
      unint64_t v68 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v69 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)unint64_t v68 = 136315138;
      __int128 v99 = v68 + 4;
      v100[0] = v69;
      uint64_t v70 = v53;
      uint64_t v71 = v90;
      Apple_Parsec_Siri_Legacy_LegacySnippet.snippet.getter(v69);
      unint64_t v72 = v71;
      uint64_t v53 = v70;
      uint64_t v73 = String.init<A>(describing:)(v72, v91);
      unint64_t v75 = v74;
      uint64_t v103 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104);
      swift_bridgeObjectRelease(v75);
      uint64_t v76 = *(void (**)(char *, uint64_t))(v66 + 8);
      uint64_t v77 = v95;
      v76(v63, v95);
      _os_log_impl(&dword_0, v65, v67, "InfoViewFactory unsupported legacy snippet %s", v68, 0xCu);
      swift_arrayDestroy(v69, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1LL, -1LL);
      swift_slowDealloc(v68, -1LL, -1LL);

      v76(v96, v77);
    }

    else
    {

      uint64_t v78 = *(void (**)(char *, uint64_t))(v66 + 8);
      v78(v63, v51);
      v78(v50, v51);
    }

    outlined destroy of Any?( v53,  &demangling cache variable for type metadata for Apple_Parsec_Siri_Legacy_LegacySnippet.OneOf_Snippet?);
    return 0LL;
  }

  uint64_t v56 = v92;
  outlined init with copy of IdentifiedUser?( v53,  v92,  &demangling cache variable for type metadata for Apple_Parsec_Siri_Legacy_LegacySnippet.OneOf_Snippet?);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v55 + 88))(v56, v54) != enum case for Apple_Parsec_Siri_Legacy_LegacySnippet.OneOf_Snippet.generalKnowledgeSnippet(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v56, v54);
    goto LABEL_24;
  }

  uint64_t v47 = (void *)(*(uint64_t (**)(char *))(*(void *)v89 + 248LL))(v50);
  if (v47)
  {
    (*((void (**)(uint64_t, uint64_t, uint64_t))v99 + 2))(v88, v98, v4);
    id v57 = v47;
    if (AFIsInternalInstall())
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v89 + 104LL))(v100);
      uint64_t v58 = v101;
      uint64_t v59 = v102;
      __swift_project_boxed_opaque_existential_1(v100, v101);
      char v60 = dispatch thunk of PommesServerFallbackDisabling.shouldDisableServerFallbackNL(isDomainDirected:)( 0LL,  v58,  v59);
      __swift_destroy_boxed_opaque_existential_1(v100);
      char v61 = v60 ^ 1;
    }

    else
    {
      char v61 = 0;
    }

    type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAUISash,  &OBJC_CLASS___SAUISash_ptr);
    id v79 = SAUISash.init(layoutSnippet:showInternalPommesAttribution:)(v88, v61 & 1);
    [v57 setSash:v79];

    id v80 = v57;
    char v81 = v86;
    Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.uiItemType.getter();
    Apple_Parsec_Siri_V2alpha_UIItemType.aceValue.getter();
    uint64_t v83 = v82;
    (*(void (**)(char *, char *))(v87 + 8))(v81, v97);
    NSString v84 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v83);
    [v80 setItemType:v84];

    uint64_t v50 = v96;
    uint64_t v56 = v92;
  }

  (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v51);
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v56, v54);
  outlined destroy of Any?( v53,  &demangling cache variable for type metadata for Apple_Parsec_Siri_Legacy_LegacySnippet.OneOf_Snippet?);
  return v47;
}

id InformationViewFactory.makeGeneralKnowledgeSnippet(legacySnippet:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_Legacy_LegacySnippet(0LL);
  uint64_t v61 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v57 - v6;
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_Legacy_AppPunchOut(0LL);
  uint64_t v58 = *(void *)(v8 - 8);
  uint64_t v59 = v8;
  __chkstk_darwin(v8);
  id v57 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Legacy_LegacySnippet.OneOf_Snippet?);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Apple_Parsec_Siri_Legacy_LegacySnippet.snippet.getter(v15);
  uint64_t v18 = type metadata accessor for Apple_Parsec_Siri_Legacy_LegacySnippet.OneOf_Snippet(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v12, 1LL, v18) == 1)
  {
    outlined destroy of Any?( (uint64_t)v12,  &demangling cache variable for type metadata for Apple_Parsec_Siri_Legacy_LegacySnippet.OneOf_Snippet?);
LABEL_16:
    uint64_t v45 = v61;
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v46 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v46, (uint64_t)static Logger.information);
    uint64_t v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 16);
    uint64_t v48 = v47(v7, a1, v2);
    uint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
    os_log_type_t v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v52 = swift_slowAlloc(32LL, -1LL);
      uint64_t v63 = v52;
      *(_DWORD *)uint64_t v51 = 136315138;
      v47(v5, (uint64_t)v7, v2);
      uint64_t v53 = String.init<A>(describing:)(v5, v2);
      unint64_t v55 = v54;
      uint64_t v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
      swift_bridgeObjectRelease(v55);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v7, v2);
      _os_log_impl(&dword_0, v49, v50, "InfoViewFactory invalid general knowledge snippet %s", v51, 0xCu);
      swift_arrayDestroy(v52, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1LL, -1LL);
      swift_slowDealloc(v51, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v7, v2);
    }

    return 0LL;
  }

  if ((*(unsigned int (**)(char *, uint64_t))(v19 + 88))(v12, v18) != enum case for Apple_Parsec_Siri_Legacy_LegacySnippet.OneOf_Snippet.generalKnowledgeSnippet(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v12, v18);
    goto LABEL_16;
  }

  (*(void (**)(char *, uint64_t))(v19 + 96))(v12, v18);
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v12, v13);
  id v20 = [objc_allocWithZone(SAGKSnippet) init];
  [v20 setCategory:(int)Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.category.getter()];

  uint64_t v21 = Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.title.getter();
  unint64_t v23 = v22;
  uint64_t v24 = swift_bridgeObjectRelease(v22);
  uint64_t v25 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000LL) == 0) {
    uint64_t v25 = v21 & 0xFFFFFFFFFFFFLL;
  }
  if (v25)
  {
    id v26 = v20;
    Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.title.getter();
    uint64_t v28 = v27;
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v28);
    [v26 setTitle:v29];
  }

  uint64_t v30 = Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.subtitle.getter(v24);
  unint64_t v32 = v31;
  uint64_t v33 = swift_bridgeObjectRelease(v31);
  uint64_t v34 = HIBYTE(v32) & 0xF;
  if ((v32 & 0x2000000000000000LL) == 0) {
    uint64_t v34 = v30 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v35 = v60;
  if (v34)
  {
    id v36 = v20;
    Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.subtitle.getter(v36);
    uint64_t v38 = v37;
    NSString v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v38);
    [v36 setSubtitle:v39];
  }

  uint64_t v40 = Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.pods.getter(v33);
  swift_retain(v35);
  os_log_type_t v41 = specialized Sequence.compactMap<A>(_:)(v40, v35);
  swift_bridgeObjectRelease(v40);
  swift_release(v35);
  type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAGKPodView,  &OBJC_CLASS___SAGKPodView_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v41);
  [v20 setPods:isa];

  if ((Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.hasAppPunchOut.getter() & 1) != 0)
  {
    uint64_t v43 = v57;
    Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.appPunchOut.getter();
    uint64_t v44 = (void *)(*(uint64_t (**)(char *))(*(void *)v35 + 256LL))(v43);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v43, v59);
    [v20 setAppPunchOut:v44];
  }

  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  return v20;
}

id InformationViewFactory.makeGeneralKnowledgeAppPunchOut(legacyAppPunchOut:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = &v78[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v3);
  uint64_t v7 = &v78[-v6];
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_Legacy_ImageResource(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v78[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  id v12 = [objc_allocWithZone(SAUIAppPunchOut) init];
  id v13 = [v12 setAppAvailableInStorefront:Apple_Parsec_Siri_Legacy_AppPunchOut.appAvailableStorefront.getter() & 1];
  uint64_t v14 = Apple_Parsec_Siri_Legacy_AppPunchOut.appDisplayName.getter(v13);
  unint64_t v16 = v15;
  uint64_t v17 = swift_bridgeObjectRelease(v15);
  uint64_t v18 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000LL) == 0) {
    uint64_t v18 = v14 & 0xFFFFFFFFFFFFLL;
  }
  if (v18)
  {
    Apple_Parsec_Siri_Legacy_AppPunchOut.appDisplayName.getter(v17);
    uint64_t v20 = v19;
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
    [v12 setAppDisplayName:v21];
  }

  Apple_Parsec_Siri_Legacy_AppPunchOut.appIcon.getter(v17);
  unint64_t v22 = (void *)(*(uint64_t (**)(_BYTE *))(*(void *)v1 + 264LL))(v11);
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  [v12 setAppIcon:v22];

  uint64_t v23 = Apple_Parsec_Siri_Legacy_AppPunchOut.appIconMap.getter();
  swift_retain(v1);
  uint64_t v24 = specialized _NativeDictionary.mapValues<A>(_:)(v23, v1);
  swift_bridgeObjectRelease(v23);
  swift_release(v1);
  type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAUIImageResource,  &OBJC_CLASS___SAUIImageResource_ptr);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_release(v24);
  [v12 setAppIconMap:isa];

  id v26 = [v12 setAppInstalled:Apple_Parsec_Siri_Legacy_AppPunchOut.appInstalled.getter() & 1];
  uint64_t v27 = Apple_Parsec_Siri_Legacy_AppPunchOut.appStoreUri.getter(v26);
  unint64_t v29 = v28;
  uint64_t v30 = swift_bridgeObjectRelease(v28);
  uint64_t v31 = HIBYTE(v29) & 0xF;
  if ((v29 & 0x2000000000000000LL) == 0) {
    uint64_t v31 = v27 & 0xFFFFFFFFFFFFLL;
  }
  if (v31)
  {
    uint64_t v32 = Apple_Parsec_Siri_Legacy_AppPunchOut.appStoreUri.getter(v30);
    uint64_t v34 = v33;
    URL.init(string:)(v32);
    swift_bridgeObjectRelease(v34);
    uint64_t v35 = type metadata accessor for URL(0LL);
    uint64_t v36 = *(void *)(v35 - 8);
    uint64_t v38 = 0LL;
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v36 + 48))(v7, 1LL, v35) != 1)
    {
      URL._bridgeToObjectiveC()(v37);
      uint64_t v38 = v39;
      (*(void (**)(_BYTE *, uint64_t))(v36 + 8))(v7, v35);
    }

    [v12 setAppStoreUri:v38];
  }

  uint64_t v40 = Apple_Parsec_Siri_Legacy_AppPunchOut.bundleID.getter(v30);
  unint64_t v42 = v41;
  uint64_t v43 = swift_bridgeObjectRelease(v41);
  uint64_t v44 = HIBYTE(v42) & 0xF;
  if ((v42 & 0x2000000000000000LL) == 0) {
    uint64_t v44 = v40 & 0xFFFFFFFFFFFFLL;
  }
  if (v44)
  {
    Apple_Parsec_Siri_Legacy_AppPunchOut.bundleID.getter(v43);
    uint64_t v46 = v45;
    NSString v47 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v46);
    [v12 setBundleId:v47];
  }

  uint64_t v48 = Apple_Parsec_Siri_Legacy_AppPunchOut.punchOutName.getter(v43);
  unint64_t v50 = v49;
  uint64_t v51 = swift_bridgeObjectRelease(v49);
  uint64_t v52 = HIBYTE(v50) & 0xF;
  if ((v50 & 0x2000000000000000LL) == 0) {
    uint64_t v52 = v48 & 0xFFFFFFFFFFFFLL;
  }
  if (v52)
  {
    Apple_Parsec_Siri_Legacy_AppPunchOut.punchOutName.getter(v51);
    uint64_t v54 = v53;
    NSString v55 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v54);
    [v12 setPunchOutName:v55];
  }

  uint64_t v56 = Apple_Parsec_Siri_Legacy_AppPunchOut.punchOutUri.getter(v51);
  unint64_t v58 = v57;
  uint64_t v59 = swift_bridgeObjectRelease(v57);
  uint64_t v60 = HIBYTE(v58) & 0xF;
  if ((v58 & 0x2000000000000000LL) == 0) {
    uint64_t v60 = v56 & 0xFFFFFFFFFFFFLL;
  }
  if (v60)
  {
    uint64_t v61 = Apple_Parsec_Siri_Legacy_AppPunchOut.punchOutUri.getter(v59);
    uint64_t v63 = v62;
    URL.init(string:)(v61);
    swift_bridgeObjectRelease(v63);
    uint64_t v64 = type metadata accessor for URL(0LL);
    uint64_t v65 = *(void *)(v64 - 8);
    os_log_type_t v67 = 0LL;
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v65 + 48))(v5, 1LL, v64) != 1)
    {
      URL._bridgeToObjectiveC()(v66);
      os_log_type_t v67 = v68;
      (*(void (**)(_BYTE *, uint64_t))(v65 + 8))(v5, v64);
    }

    [v12 setPunchOutUri:v67];
  }

  uint64_t v69 = Apple_Parsec_Siri_Legacy_AppPunchOut.subtitle.getter(v59);
  unint64_t v71 = v70;
  uint64_t v72 = swift_bridgeObjectRelease(v70);
  uint64_t v73 = HIBYTE(v71) & 0xF;
  if ((v71 & 0x2000000000000000LL) == 0) {
    uint64_t v73 = v69 & 0xFFFFFFFFFFFFLL;
  }
  if (v73)
  {
    Apple_Parsec_Siri_Legacy_AppPunchOut.subtitle.getter(v72);
    uint64_t v75 = v74;
    NSString v76 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v75);
    [v12 setSubtitle:v76];
  }

  return v12;
}

id InformationViewFactory.makeImageResource(legacyImageResource:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v3 = [objc_allocWithZone(SAUIImageResource) init];
  uint64_t v4 = Apple_Parsec_Siri_Legacy_ImageResource.imageData.getter();
  unint64_t v6 = v5;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v4, v6);
  [v3 setImageData:isa];

  Apple_Parsec_Siri_Legacy_ImageResource.pixelHeight.getter();
  Apple_Parsec_Siri_Legacy_ImageResource.pixelWidth.getter(objc_msgSend(v3, "setPixelHeight:"));
  uint64_t v8 = Apple_Parsec_Siri_Legacy_ImageResource.resourceURL.getter(objc_msgSend(v3, "setPixelWidth:"));
  uint64_t v10 = v9;
  URL.init(string:)(v8);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = type metadata accessor for URL(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v2, 1LL, v11) != 1)
  {
    URL._bridgeToObjectiveC()(v13);
    uint64_t v14 = v15;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v2, v11);
  }

  [v3 setResourceUrl:v14];

  Apple_Parsec_Siri_Legacy_ImageResource.scaleFactor.getter();
  Apple_Parsec_Siri_Legacy_ImageResource.urlFormatString.getter(objc_msgSend(v3, "setScaleFactor:"));
  uint64_t v17 = v16;
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  [v3 setUrlFormatString:v18];

  Apple_Parsec_Siri_Legacy_ImageResource.userAgent.getter();
  uint64_t v20 = v19;
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  [v3 setUserAgent:v21];

  return v3;
}

id InformationViewFactory.makeGeneralKnowledgePodViews(podView:)(uint64_t a1)
{
  uint64_t v2 = (void *)type metadata accessor for Apple_Parsec_Siri_Legacy_PodView(0LL);
  uint64_t v82 = *(v2 - 1);
  id v83 = v2;
  __chkstk_darwin(v2);
  char v81 = (char *)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_Legacy_ImagePod(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v71 - v9;
  uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_Legacy_ImageResource(0LL);
  uint64_t v73 = *(void *)(v11 - 8);
  uint64_t v74 = v11;
  __chkstk_darwin(v11);
  uint64_t v72 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v79 = type metadata accessor for Apple_Parsec_Siri_Legacy_SummaryPod(0LL);
  uint64_t v77 = *(void *)(v79 - 8);
  uint64_t v13 = __chkstk_darwin(v79);
  NSString v76 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v78 = (char *)&v71 - v15;
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Legacy_PodView.OneOf_Pod?);
  uint64_t v16 = __chkstk_darwin(v80);
  NSString v18 = (char *)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  NSString v21 = (char *)&v71 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v71 - v23;
  uint64_t v25 = a1;
  Apple_Parsec_Siri_Legacy_PodView.pod.getter(v22);
  uint64_t v26 = type metadata accessor for Apple_Parsec_Siri_Legacy_PodView.OneOf_Pod(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  unint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  NSString v84 = v24;
  if (v28(v24, 1LL, v26) != 1)
  {
    outlined init with copy of IdentifiedUser?( (uint64_t)v84,  (uint64_t)v21,  &demangling cache variable for type metadata for Apple_Parsec_Siri_Legacy_PodView.OneOf_Pod?);
    int v41 = (*(uint64_t (**)(char *, uint64_t))(v27 + 88))(v21, v26);
    if (v41 == enum case for Apple_Parsec_Siri_Legacy_PodView.OneOf_Pod.imagePod(_:))
    {
      (*(void (**)(char *, uint64_t))(v27 + 96))(v21, v26);
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v21, v4);
      type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAGKImagePod,  &OBJC_CLASS___SAGKImagePod_ptr);
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
      id v42 = SAGKImagePod.init(imagePod:)((uint64_t)v8);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      goto LABEL_10;
    }

    if (v41 == enum case for Apple_Parsec_Siri_Legacy_PodView.OneOf_Pod.summaryPod(_:))
    {
      (*(void (**)(char *, uint64_t))(v27 + 96))(v21, v26);
      uint64_t v44 = v77;
      uint64_t v45 = v78;
      uint64_t v46 = v79;
      uint64_t v47 = (*(uint64_t (**)(char *, char *, uint64_t))(v77 + 32))(v78, v21, v79);
      if ((Apple_Parsec_Siri_Legacy_SummaryPod.hasImageResource.getter(v47) & 1) != 0)
      {
        uint64_t v48 = v72;
        Apple_Parsec_Siri_Legacy_SummaryPod.imageResource.getter();
        unint64_t v49 = (void *)(*(uint64_t (**)(char *))(*(void *)v75 + 264LL))(v48);
        (*(void (**)(char *, uint64_t))(v73 + 8))(v48, v74);
        uint64_t v82 = type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAGKSummaryPod,  &OBJC_CLASS___SAGKSummaryPod_ptr);
        unint64_t v50 = v76;
        (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v76, v45, v46);
        id v83 = v49;
        uint64_t v51 = Apple_Parsec_Siri_Legacy_SummaryPod.title.getter(v83);
        unint64_t v53 = v52;
        uint64_t v54 = v44;
        uint64_t v55 = Apple_Parsec_Siri_Legacy_SummaryPod.text.getter();
        unint64_t v57 = v56;
        uint64_t v58 = Apple_Parsec_Siri_Legacy_SummaryPod.caption.getter();
        id v42 = SAGKSummaryPod.init(title:text:caption:imageResource:)(v51, v53, v55, v57, v58, v59, v49);
        uint64_t v60 = *(void (**)(char *, uint64_t))(v54 + 8);
        v60(v50, v46);
      }

      else
      {
        type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAGKSummaryPod,  &OBJC_CLASS___SAGKSummaryPod_ptr);
        uint64_t v61 = v76;
        uint64_t v62 = (*(uint64_t (**)(char *, char *, uint64_t))(v44 + 16))(v76, v45, v46);
        uint64_t v63 = Apple_Parsec_Siri_Legacy_SummaryPod.title.getter(v62);
        unint64_t v65 = v64;
        uint64_t v66 = Apple_Parsec_Siri_Legacy_SummaryPod.text.getter();
        unint64_t v68 = v67;
        uint64_t v69 = Apple_Parsec_Siri_Legacy_SummaryPod.caption.getter();
        id v42 = SAGKSummaryPod.init(title:text:caption:imageResource:)(v63, v65, v66, v68, v69, v70, 0LL);
        uint64_t v60 = *(void (**)(char *, uint64_t))(v44 + 8);
        v60(v61, v46);
      }

      v60(v45, v46);
      goto LABEL_10;
    }

    (*(void (**)(char *, uint64_t))(v27 + 8))(v21, v26);
  }

  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v29 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v29, (uint64_t)static Logger.information);
  uint64_t v30 = v81;
  uint64_t v31 = v82;
  id v32 = v83;
  uint64_t v33 = (*(uint64_t (**)(char *, uint64_t, id))(v82 + 16))(v81, v25, v83);
  uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
  os_log_type_t v35 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v37 = swift_slowAlloc(32LL, -1LL);
    uint64_t v86 = v37;
    *(_DWORD *)uint64_t v36 = 136315138;
    uint64_t v79 = (uint64_t)(v36 + 4);
    Apple_Parsec_Siri_Legacy_PodView.pod.getter(v37);
    uint64_t v38 = String.init<A>(describing:)(v18, v80);
    unint64_t v40 = v39;
    uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);
    swift_bridgeObjectRelease(v40);
    (*(void (**)(char *, id))(v31 + 8))(v30, v32);
    _os_log_impl(&dword_0, v34, v35, "InfoViewFactory unhandled General Knowledge Pod: %s", v36, 0xCu);
    swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_slowDealloc(v36, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, id))(v31 + 8))(v30, v32);
  }

  id v42 = 0LL;
LABEL_10:
  outlined destroy of Any?( (uint64_t)v84,  &demangling cache variable for type metadata for Apple_Parsec_Siri_Legacy_PodView.OneOf_Pod?);
  return v42;
}

void *SAGKSummaryPod.init(summaryPod:imageResource:)(uint64_t a1, void *a2)
{
  uint64_t v4 = Apple_Parsec_Siri_Legacy_SummaryPod.title.getter(a1);
  unint64_t v6 = v5;
  uint64_t v7 = Apple_Parsec_Siri_Legacy_SummaryPod.text.getter();
  unint64_t v9 = v8;
  uint64_t v10 = Apple_Parsec_Siri_Legacy_SummaryPod.caption.getter();
  uint64_t v12 = SAGKSummaryPod.init(title:text:caption:imageResource:)(v4, v6, v7, v9, v10, v11, a2);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_Legacy_SummaryPod(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(a1, v13);
  return v12;
}

id SAGKImagePod.init(imagePod:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_Legacy_PunchOut(0LL);
  __chkstk_darwin(v3);
  unint64_t v39 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_Legacy_ImageResource(0LL);
  __chkstk_darwin(v5);
  uint64_t v38 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_Legacy_ImageLinkedAnswer(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v35 - v12;
  id v14 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1)) init];
  uint64_t v15 = Apple_Parsec_Siri_Legacy_ImagePod.images.getter();
  uint64_t v16 = v15;
  int64_t v17 = *(void *)(v15 + 16);
  if (v17)
  {
    id v36 = v14;
    uint64_t v37 = a1;
    uint64_t v44 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
    uint64_t v18 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v35 = v16;
    uint64_t v19 = v16 + ((v18 + 32) & ~v18);
    uint64_t v40 = *(void *)(v8 + 72);
    uint64_t v41 = v8;
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    do
    {
      v20(v13, v19, v7);
      v20(v11, (uint64_t)v13, v7);
      id v21 = [objc_allocWithZone(SAGKImageLinkedAnswer) init];
      if ((Apple_Parsec_Siri_Legacy_ImageLinkedAnswer.hasImageResource.getter() & 1) != 0)
      {
        uint64_t v22 = type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAUIImageResource,  &OBJC_CLASS___SAUIImageResource_ptr);
        Apple_Parsec_Siri_Legacy_ImageLinkedAnswer.imageResource.getter(v22);
        uint64_t v8 = v41;
        SAUIImageResource.init(imageResource:)();
        uint64_t v24 = v23;
        objc_msgSend(v21, "setImageResource:", v23, v35);
      }

      id v25 = v21;
      if ((Apple_Parsec_Siri_Legacy_ImageLinkedAnswer.hasPunchOut.getter() & 1) != 0)
      {
        type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAUIAppPunchOut,  &OBJC_CLASS___SAUIAppPunchOut_ptr);
        uint64_t v26 = v39;
        Apple_Parsec_Siri_Legacy_ImageLinkedAnswer.punchOut.getter();
        uint64_t v27 = (uint64_t)v26;
        uint64_t v8 = v41;
        id v25 = SAUIAppPunchOut.init(punchOut:)(v27);
        [v21 setPunchOut:v25];
      }

      unint64_t v28 = *(void (**)(char *, uint64_t))(v8 + 8);
      v28(v11, v7);
      uint64_t v43 = type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAGKImageLinkedAnswer,  &OBJC_CLASS___SAGKImageLinkedAnswer_ptr);
      *(void *)&__int128 v42 = v21;
      v28(v13, v7);
      uint64_t v29 = v44;
      if ((swift_isUniquelyReferenced_nonNull_native(v44) & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1LL, 1);
        uint64_t v29 = v44;
      }

      unint64_t v31 = v29[2];
      unint64_t v30 = v29[3];
      if (v31 >= v30 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
        uint64_t v29 = v44;
      }

      v29[2] = v31 + 1;
      outlined init with take of Any(&v42, &v29[4 * v31 + 4]);
      v19 += v40;
      --v17;
    }

    while (v17);
    swift_bridgeObjectRelease(v35);
    id v14 = v36;
    a1 = v37;
  }

  else
  {
    swift_bridgeObjectRelease(v15);
    uint64_t v29 = _swiftEmptyArrayStorage;
  }

  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v29);
  [v14 setImages:isa];

  uint64_t v33 = type metadata accessor for Apple_Parsec_Siri_Legacy_ImagePod(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8LL))(a1, v33);
  return v14;
}

uint64_t InformationViewFactory.makeCard(perResultLayoutDetails:renderOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = specialized Sequence.compactMap<A>(_:)(a1, v2);
  swift_release(v2);
  uint64_t v6 = type metadata accessor for Searchfoundation_Card(0LL);
  void v9[2] = v5;
  void v9[3] = a2;
  uint64_t v7 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Searchfoundation_Card and conformance Searchfoundation_Card,  (uint64_t (*)(uint64_t))&type metadata accessor for Searchfoundation_Card,  (uint64_t)&protocol conformance descriptor for Searchfoundation_Card);
  static Message.with(_:)( partial apply for closure #2 in InformationViewFactory.makeCard(perResultLayoutDetails:renderOptions:),  v9,  v6,  v7);
  return swift_bridgeObjectRelease(v5);
}

uint64_t closure #1 in InformationViewFactory.makeCard(perResultLayoutDetails:renderOptions:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v40 = a3;
  uint64_t v36 = a2;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails(0LL);
  uint64_t v41 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v38 = *(void *)(v7 - 8);
  uint64_t v39 = v7;
  __chkstk_darwin(v7);
  uint64_t v37 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_CasinoSnippet(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.snippet.getter(v14);
  uint64_t v17 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v11, 1LL, v17) == 1)
  {
    outlined destroy of Any?( (uint64_t)v11,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
  }

  else
  {
    if ((*(unsigned int (**)(char *, uint64_t))(v18 + 88))(v11, v17) == enum case for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet.casinoSnippet(_:))
    {
      (*(void (**)(char *, uint64_t))(v18 + 96))(v11, v17);
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v11, v12);
      uint64_t v19 = type metadata accessor for PerformanceUtil(0LL);
      uint64_t v20 = static PerformanceUtil.shared.getter(v19);
      uint64_t v21 = __chkstk_darwin(v20);
      uint64_t v22 = v37;
      Date.init()(v21);
      uint64_t v34 = &v33;
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Searchfoundation_Card?);
      LOBYTE(v33) = 2;
      ((void (*)(void *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)()))dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:))( v40,  0xD000000000000018LL,  0x8000000000081A40LL,  0LL,  v22,  "InformationFlowPlugin/InformationViewFactory.swift",  50LL,  2LL,  647LL,  "makeCard(perResultLayoutDetails:renderOptions:)",  47LL,  v33,  partial apply for closure #1 in closure #1 in InformationViewFactory.makeCard(perResultLayoutDetails:renderOptions:));
      swift_release(v20);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v22, v39);
      return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v11, v17);
  }

  uint64_t v24 = v41;
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v25 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v25, (uint64_t)static Logger.information);
  uint64_t v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 16))(v6, a1, v4);
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v30 = swift_slowAlloc(32LL, -1LL);
    uint64_t v44 = v30;
    *(_DWORD *)uint64_t v29 = 136315138;
    lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails and conformance Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails);
    Swift::String v31 = Message.textFormatString()();
    uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( v31._countAndFlagsBits,  (unint64_t)v31._object,  &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43);
    swift_bridgeObjectRelease(v31._object);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v6, v4);
    _os_log_impl(&dword_0, v27, v28, "InfoViewFactory non casino snippet %s", v29, 0xCu);
    swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v4);
  }

  uint64_t v32 = type metadata accessor for Searchfoundation_Card(0LL);
  return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))( v40,  1LL,  1LL,  v32);
}

void closure #2 in InformationViewFactory.makeCard(perResultLayoutDetails:renderOptions:)( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v89 = a3;
  uint64_t v96 = a1;
  uint64_t v4 = type metadata accessor for Searchfoundation_Image(0LL);
  __chkstk_darwin(v4);
  uint64_t v88 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Searchfoundation_Color(0LL);
  __chkstk_darwin(v6);
  uint64_t v86 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Searchfoundation_Card?);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v94 = (char *)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  int v93 = (char *)&v84 - v11;
  uint64_t v12 = type metadata accessor for Searchfoundation_Card(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v102 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v87 = (char *)&v84 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v84 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v101 = (char *)&v84 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v85 = (char *)&v84 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v84 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v84 - v28;
  uint64_t v30 = type metadata accessor for Searchfoundation_CardSource(0LL);
  uint64_t v91 = *(void *)(v30 - 8);
  uint64_t v92 = v30;
  __chkstk_darwin(v30);
  uint64_t v90 = (char *)&v84 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = *(void *)(a2 + 16);
  int v33 = (char *)_swiftEmptyArrayStorage;
  uint64_t v95 = a2;
  uint64_t v103 = v13;
  uint64_t v97 = v32;
  uint64_t v98 = v20;
  if (v32)
  {
    uint64_t v34 = a2 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v35 = *(unsigned int (**)(void, void, void))(v13 + 72);
    __int128 v99 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16);
    unint64_t v100 = (unint64_t)v35;
    swift_bridgeObjectRetain(a2);
    uint64_t v36 = _swiftEmptyArrayStorage;
    uint64_t v37 = v32;
    do
    {
      uint64_t v38 = v99(v29, v34, v12);
      uint64_t v39 = Searchfoundation_Card.cardSections.getter(v38);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v29, v12);
      if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0) {
        uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v36[2] + 1LL,  1,  v36);
      }
      unint64_t v41 = v36[2];
      unint64_t v40 = v36[3];
      if (v41 >= v40 >> 1) {
        uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v40 > 1),  v41 + 1,  1,  v36);
      }
      void v36[2] = v41 + 1;
      v36[v41 + 4] = v39;
      v34 += v100;
      --v37;
      uint64_t v13 = v103;
    }

    while (v37);
    a2 = v95;
    swift_bridgeObjectRelease(v95);
    uint64_t v20 = v98;
    int v33 = (char *)_swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v36 = _swiftEmptyArrayStorage;
  }

  uint64_t v42 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v36);
  swift_bridgeObjectRelease(v36);
  Searchfoundation_Card.cardSections.setter(v42);
  uint64_t v43 = v90;
  (*(void (**)(char *, void, uint64_t))(v91 + 104))( v90,  enum case for Searchfoundation_CardSource.parsec(_:),  v92);
  Searchfoundation_Card.source.setter(v43);
  uint64_t v104 = (char *)_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a2);
  if (v97)
  {
    unint64_t v44 = (*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    uint64_t v45 = *(void *)(v13 + 72);
    uint64_t v46 = a2 + v44;
    uint64_t v48 = v97;
    __int128 v99 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16);
    uint64_t v47 = v99;
    unint64_t v100 = v44;
    for (uint64_t i = v99(v27, v46, v12); ; uint64_t i = v47(v27, v46, v12))
    {
      if ((Searchfoundation_Card.hasBackgroundColor.getter(i) & 1) != 0)
      {
        unint64_t v50 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
        v50(v101, v27, v12);
        uint64_t v51 = v104;
        if ((swift_isUniquelyReferenced_nonNull_native(v104) & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *((void *)v51 + 2) + 1LL,  1);
          uint64_t v51 = v104;
        }

        unint64_t v53 = *((void *)v51 + 2);
        unint64_t v52 = *((void *)v51 + 3);
        if (v53 >= v52 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v52 > 1,  v53 + 1,  1);
          uint64_t v51 = v104;
        }

        *((void *)v51 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v53 + 1;
        v50(&v51[v100 + v53 * v45], v101, v12);
        uint64_t v104 = v51;
        uint64_t v13 = v103;
        uint64_t v47 = v99;
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v13 + 8))(v27, v12);
      }

      v46 += v45;
      if (!--v48) {
        break;
      }
    }

    uint64_t v54 = v104;
    a2 = v95;
    uint64_t v20 = v98;
    int v33 = (char *)_swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v54 = (char *)_swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease(a2);
  uint64_t v55 = (uint64_t)v93;
  if (*((void *)v54 + 2))
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))( v93,  &v54[(*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)],  v12);
    unint64_t v56 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 56);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v56)(v55, 0LL, 1LL, v12);
  }

  else
  {
    unint64_t v56 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v56)(v93, 1LL, 1LL, v12);
  }

  swift_release(v54);
  unint64_t v100 = *(void *)(v13 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v100)(v55, 1LL, v12) == 1)
  {
    outlined destroy of Any?(v55, &demangling cache variable for type metadata for Searchfoundation_Card?);
  }

  else
  {
    unint64_t v57 = v85;
    uint64_t v58 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 32))(v85, v55, v12);
    unint64_t v59 = v86;
    Searchfoundation_Card.backgroundColor.getter(v58);
    Searchfoundation_Card.backgroundColor.setter(v59);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v57, v12);
  }

  uint64_t v60 = (uint64_t)v94;
  uint64_t v104 = (char *)_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a2);
  if (v97)
  {
    __int128 v99 = v56;
    uint64_t v61 = *(void *)(v13 + 72);
    uint64_t v101 = (char *)((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v62 = &v101[a2];
    uint64_t v63 = *(uint64_t (**)(char *, char *, uint64_t))(v13 + 16);
    uint64_t v64 = v97;
    for (uint64_t j = v63(v20, v62, v12); ; uint64_t j = v63(v20, v62, v12))
    {
      if ((Searchfoundation_Card.hasBackgroundImage.getter(j) & 1) != 0)
      {
        uint64_t v66 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
        v66(v102, v20, v12);
        unint64_t v67 = v104;
        if ((swift_isUniquelyReferenced_nonNull_native(v104) & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *((void *)v67 + 2) + 1LL,  1);
          unint64_t v67 = v104;
        }

        unint64_t v69 = *((void *)v67 + 2);
        unint64_t v68 = *((void *)v67 + 3);
        if (v69 >= v68 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v68 > 1,  v69 + 1,  1);
          unint64_t v67 = v104;
        }

        *((void *)v67 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v69 + 1;
        v66(&v101[(void)v67 + v69 * v61], v102, v12);
        uint64_t v104 = v67;
        uint64_t v13 = v103;
        uint64_t v20 = v98;
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
      }

      v62 += v61;
      if (!--v64) {
        break;
      }
    }

    int v33 = v104;
    uint64_t v60 = (uint64_t)v94;
    a2 = v95;
    unint64_t v56 = v99;
  }

  swift_bridgeObjectRelease(a2);
  if (*((void *)v33 + 2))
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))( v60,  &v33[(*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)],  v12);
    uint64_t v70 = 0LL;
  }

  else
  {
    uint64_t v70 = 1LL;
  }

  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v56)(v60, v70, 1LL, v12);
  swift_release(v33);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v100)(v60, 1LL, v12) == 1)
  {
    uint64_t v71 = outlined destroy of Any?(v60, &demangling cache variable for type metadata for Searchfoundation_Card?);
    uint64_t v72 = v89;
    if (!v89) {
      goto LABEL_55;
    }
  }

  else
  {
    uint64_t v73 = v87;
    uint64_t v74 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 32))(v87, v60, v12);
    uint64_t v75 = v88;
    Searchfoundation_Card.backgroundImage.getter(v74);
    Searchfoundation_Card.backgroundImage.setter(v75);
    uint64_t v71 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v73, v12);
    uint64_t v72 = v89;
    if (!v89)
    {
LABEL_55:
      if (v97 == 1)
      {
        uint64_t v82 = Searchfoundation_Card.fbr.getter(v71);
      }

      else
      {
        uint64_t v82 = 0LL;
        unint64_t v83 = 0xE000000000000000LL;
      }

      Searchfoundation_Card.fbr.setter(v82, v83);
      return;
    }
  }

  id v76 = v72;
  if ((PommesRenderOptions.isPhoneCallActive.getter() & 1) == 0)
  {

    goto LABEL_55;
  }

  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v77 = type metadata accessor for Logger(0LL);
  uint64_t v78 = __swift_project_value_buffer(v77, (uint64_t)static Logger.information);
  uint64_t v79 = (os_log_s *)Logger.logObject.getter(v78);
  os_log_type_t v80 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v79, v80))
  {
    char v81 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)char v81 = 0;
    _os_log_impl(&dword_0, v79, v80, "Skipping FBR; phone call is active", v81, 2u);
    swift_slowDealloc(v81, -1LL, -1LL);
  }
}

uint64_t InformationViewFactory.makeCard(casinoSnippet:renderOptions:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v73 = a3;
  uint64_t v71 = type metadata accessor for String.Encoding(0LL);
  uint64_t v5 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v70 = (char *)v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for BinaryDecodingOptions(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Google_Protobuf_Any(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v74 = type metadata accessor for Searchfoundation_Card(0LL);
  uint64_t v72 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v14 = (char *)v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_CasinoSnippet(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((Apple_Parsec_Siri_V2alpha_CasinoSnippet.hasCardData.getter(v17) & 1) != 0)
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    uint64_t v21 = __swift_project_value_buffer(v20, (uint64_t)static Logger.information);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_0, v22, v23, "One card was made with casinoSnippet.", v24, 2u);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    uint64_t v25 = Apple_Parsec_Siri_V2alpha_CasinoSnippet.cardData.getter();
    uint64_t v76 = 0LL;
    memset(v75, 0, sizeof(v75));
    BinaryDecodingOptions.init()(v25);
    uint64_t v26 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Searchfoundation_Card and conformance Searchfoundation_Card,  (uint64_t (*)(uint64_t))&type metadata accessor for Searchfoundation_Card,  (uint64_t)&protocol conformance descriptor for Searchfoundation_Card);
    uint64_t v27 = v9;
    uint64_t v28 = v74;
    uint64_t v29 = Message.init(unpackingAny:extensions:options:)(v12, v75, v27, v74, v26);
    if (!a2 || (PommesRenderOptions.isSquawkResponse.getter(v29) & 1) == 0) {
      goto LABEL_24;
    }
    v69[1] = v21;
    Searchfoundation_Card.intentMessageName.setter(0x6B7761757153LL, 0xE600000000000000LL);
    uint64_t v40 = Searchfoundation_Card.intentResponseMessageName.setter(0x65526B7761757153LL, 0xEE0065736E6F7073LL);
    unint64_t v41 = v70;
    static String.Encoding.utf8.getter(v40);
    uint64_t v42 = String.data(using:allowLossyConversion:)(v41, 0LL, 0x6B7761757153LL, 0xE600000000000000LL);
    unint64_t v44 = v43;
    uint64_t v45 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
    uint64_t v46 = v45(v41, v71);
    if (v44 >> 60 != 15)
    {
      uint64_t v47 = v70;
      static String.Encoding.utf8.getter(v46);
      uint64_t v48 = String.data(using:allowLossyConversion:)(v47, 0LL, 0x65526B7761757153LL, 0xEE0065736E6F7073LL);
      unint64_t v50 = v49;
      v45(v47, v71);
      if (v50 >> 60 != 15)
      {
        outlined copy of Data._Representation(v42, v44);
        Searchfoundation_Card.intentMessageData.setter(v42, v44);
        Searchfoundation_Card.intentResponseMessageData.setter(v48, v50);
        outlined consume of Data?(v42, v44);
LABEL_24:
        uint64_t v39 = v72;
        uint64_t v38 = v73;
        (*(void (**)(uint64_t, char *, uint64_t))(v72 + 32))(v73, v14, v28);
        uint64_t v37 = 0LL;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v38, v37, 1LL, v28);
      }

      uint64_t v46 = outlined consume of Data?(v42, v44);
    }

    uint64_t v51 = (os_log_s *)Logger.logObject.getter(v46);
    os_log_type_t v52 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v51, v52))
    {
      unint64_t v53 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)unint64_t v53 = 67109120;
      uint64_t v54 = v70;
      static String.Encoding.utf8.getter(v53);
      uint64_t v55 = String.data(using:allowLossyConversion:)(v54, 0LL, 0x6B7761757153LL, 0xE600000000000000LL);
      unint64_t v57 = v56;
      v45(v54, v71);
      outlined consume of Data?(v55, v57);
      unint64_t v58 = v57 >> 60;
      uint64_t v28 = v74;
      LODWORD(v75[0]) = v58 < 0xF;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v75, (char *)v75 + 4);
      _os_log_impl(&dword_0, v51, v52, "intentMessageData is non-nil? %{BOOL}d", v53, 8u);
      swift_slowDealloc(v53, -1LL, -1LL);
    }

    uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
    os_log_type_t v61 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v62 = 67109120;
      uint64_t v63 = v70;
      static String.Encoding.utf8.getter(v62);
      uint64_t v64 = String.data(using:allowLossyConversion:)(v63, 0LL, 0x65526B7761757153LL, 0xEE0065736E6F7073LL);
      unint64_t v66 = v65;
      v45(v63, v71);
      outlined consume of Data?(v64, v66);
      unint64_t v67 = v66 >> 60;
      uint64_t v28 = v74;
      LODWORD(v75[0]) = v67 < 0xF;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v75, (char *)v75 + 4);
      _os_log_impl(&dword_0, v60, v61, "intentResponseMessageData is non-nil? %{BOOL}d", v62, 8u);
      swift_slowDealloc(v62, -1LL, -1LL);
    }

    goto LABEL_24;
  }

  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v30 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v30, (uint64_t)static Logger.information);
  uint64_t v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, a1, v15);
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v35 = swift_slowAlloc(32LL, -1LL);
    *(void *)&v75[0] = v35;
    *(_DWORD *)uint64_t v34 = 136315138;
    lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_CasinoSnippet and conformance Apple_Parsec_Siri_V2alpha_CasinoSnippet,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_CasinoSnippet,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_CasinoSnippet);
    Swift::String v36 = Message.textFormatString()();
    uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( v36._countAndFlagsBits,  (unint64_t)v36._object,  (uint64_t *)v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
    swift_bridgeObjectRelease(v36._object);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    _os_log_impl(&dword_0, v32, v33, "InfoViewFactory casinoSnippet has no card data %s", v34, 0xCu);
    uint64_t v37 = 1LL;
    swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1LL, -1LL);
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);

    uint64_t v37 = 1LL;
  }

  uint64_t v38 = v73;
  uint64_t v28 = v74;
  uint64_t v39 = v72;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v38, v37, 1LL, v28);
}

uint64_t InformationViewFactory.attachCompactCard(cardSnippet:layoutSnippet:renderOptions:)( void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v41 = a3;
  id v37 = a1;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v39 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v36 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Searchfoundation_Card?);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = type metadata accessor for Searchfoundation_Card(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v17 = static PerformanceUtil.shared.getter(v38);
  uint64_t v43 = v40;
  uint64_t v44 = a2;
  uint64_t v45 = v41;
  Date.init()(v17);
  LOBYTE(v33) = 2;
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( v12,  0xD000000000000018LL,  0x8000000000081A40LL,  0LL,  v9,  "InformationFlowPlugin/InformationViewFactory.swift",  50LL,  2LL,  708LL,  "attachCompactCard(cardSnippet:layoutSnippet:renderOptions:)",  59LL,  v33,  partial apply for closure #1 in InformationViewFactory.attachCompactCard(cardSnippet:layoutSnippet:renderOptions:),  v42,  v10);
  swift_release(v17);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v19 = v9;
  uint64_t v20 = v13;
  uint64_t v21 = v4;
  v18(v19, v4);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v20) == 1) {
    return outlined destroy of Any?( (uint64_t)v12,  &demangling cache variable for type metadata for Searchfoundation_Card?);
  }
  uint64_t v23 = (*(uint64_t (**)(char *, void *, uint64_t))(v14 + 32))(v16, v12, v20);
  uint64_t v24 = Searchfoundation_Card.cardSections.getter(v23);
  uint64_t v25 = *(void *)(v24 + 16);
  uint64_t v26 = swift_bridgeObjectRelease(v24);
  if (v25)
  {
    uint64_t v27 = static PerformanceUtil.shared.getter(v26);
    uint64_t v28 = __chkstk_darwin(v27);
    uint64_t v29 = v39;
    Date.init()(v28);
    uint64_t v34 = &v33;
    uint64_t v35 = &type metadata for Data;
    LOBYTE(v33) = 2;
    ((void (*)(void *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t *@<X8>)))dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:))( v46,  0xD00000000000001CLL,  0x8000000000081AA0LL,  0LL,  v29,  "InformationFlowPlugin/InformationViewFactory.swift",  50LL,  2LL,  715LL,  "attachCompactCard(cardSnippet:layoutSnippet:renderOptions:)",  59LL,  v33,  partial apply for closure #2 in InformationViewFactory.attachCompactCard(cardSnippet:layoutSnippet:renderOptions:));
    v18(v29, v21);
    swift_release(v27);
    uint64_t v30 = v46[0];
    unint64_t v31 = v46[1];
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v30, v31);
    [v37 setCompactSizeCardData:isa];
  }

  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v20);
}

uint64_t closure #1 in InformationViewFactory.attachCompactCard(cardSnippet:layoutSnippet:renderOptions:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_CasinoSnippet(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.compactSnippet.getter(v7);
  (*(void (**)(char *, uint64_t))(*(void *)a1 + 288LL))(v9, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

id InformationViewFactory.makeCompactSnippet(layoutSnippet:renderOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = a1;
  uint64_t v51 = a2;
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent(0LL);
  uint64_t v49 = *(void *)(v3 - 8);
  uint64_t v50 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v47 = *(void *)(v6 - 8);
  uint64_t v48 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_CasinoSnippet(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v18 = static PerformanceUtil.shared.getter(v17);
  uint64_t v53 = a1;
  Date.init()(v18);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SAClientBoundCommand]);
  char v43 = 2;
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( v54,  0xD00000000000003DLL,  0x8000000000081AC0LL,  0LL,  v16,  "InformationFlowPlugin/InformationViewFactory.swift",  50LL,  2LL,  726LL,  "makeCompactSnippet(layoutSnippet:renderOptions:)",  48LL,  v43,  partial apply for closure #1 in InformationViewFactory.makeCompactSnippet(layoutSnippet:renderOptions:),  v52,  v19);
  swift_release(v18);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v21 = (uint64_t)v5;
  v20(v16, v13);
  uint64_t v22 = v54[0];
  id v23 = [objc_allocWithZone(SACardSnippet) init];
  uint64_t v24 = v45;
  uint64_t v25 = Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.compactSnippet.getter(v23);
  Apple_Parsec_Siri_V2alpha_CasinoSnippet.responseViewID.getter(v25);
  uint64_t v27 = v26;
  uint64_t v28 = *(void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v29 = v46;
  v28(v12, v9);
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v27);
  [v23 setResponseViewId:v30];

  id v31 = v23;
  uint64_t v32 = UUID.init()(v31);
  UUID.uuidString.getter(v32);
  uint64_t v34 = v33;
  (*(void (**)(char *, uint64_t))(v47 + 8))(v8, v48);
  NSString v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v34);
  [v31 setAceId:v35];

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v21, v24, v50);
  id v36 = v31;
  char v37 = 0;
  if (AFIsInternalInstall())
  {
    (*(void (**)(void *__return_ptr))(*(void *)v29 + 104LL))(v54);
    uint64_t v38 = v55;
    uint64_t v39 = v56;
    __swift_project_boxed_opaque_existential_1(v54, v55);
    LOBYTE(v38) = dispatch thunk of PommesServerFallbackDisabling.shouldDisableServerFallbackNL(isDomainDirected:)( 0LL,  v38,  v39);
    __swift_destroy_boxed_opaque_existential_1(v54);
    char v37 = v38 ^ 1;
  }

  type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAUISash,  &OBJC_CLASS___SAUISash_ptr);
  id v40 = SAUISash.init(layoutSnippet:showInternalPommesAttribution:)(v21, v37 & 1);
  [v36 setSash:v40];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v22);
  [v36 setReferencedCommands:isa];

  (*(void (**)(id, uint64_t, uint64_t))(*(void *)v29 + 296LL))(v36, v24, v51);
  return v36;
}

id InformationViewFactory.makeCasinoSnippet(layoutSnippet:renderOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v107 = a2;
  uint64_t v110 = a1;
  uint64_t v105 = type metadata accessor for Apple_Parsec_Siri_V2alpha_UIItemType(0LL);
  uint64_t v101 = *(void *)(v105 - 8);
  __chkstk_darwin(v105);
  unint64_t v100 = (char *)&v82 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v95 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent(0LL);
  uint64_t v94 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v96 = (char *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v93 = type metadata accessor for UUID(0LL);
  uint64_t v92 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v91 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v108 = type metadata accessor for Apple_Parsec_Siri_V2alpha_CasinoSnippet(0LL);
  uint64_t v106 = *(void *)(v108 - 8);
  __chkstk_darwin(v108);
  uint64_t v102 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v87 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails(0LL);
  uint64_t v113 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v86 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Searchfoundation_Card(0LL);
  uint64_t v98 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v90 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v82 - v15;
  uint64_t v17 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v18 = static PerformanceUtil.shared.getter(v17);
  uint64_t v119 = a1;
  Date.init()(v18);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SAClientBoundCommand]);
  LOBYTE(v79) = 2;
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( &v124,  0xD00000000000003CLL,  0x8000000000081B40LL,  0LL,  v16,  "InformationFlowPlugin/InformationViewFactory.swift",  50LL,  2LL,  747LL,  "makeCasinoSnippet(layoutSnippet:renderOptions:)",  47LL,  v79,  partial apply for closure #1 in InformationViewFactory.makeCompactSnippet(layoutSnippet:renderOptions:),  v118,  v19);
  swift_release(v18);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
  uint64_t v21 = v20(v16, v11);
  uint64_t v22 = v124;
  uint64_t v89 = v17;
  uint64_t v23 = static PerformanceUtil.shared.getter(v21);
  uint64_t v115 = v109;
  uint64_t v116 = v110;
  uint64_t v117 = v107;
  Date.init()(v23);
  uint64_t v99 = v8;
  LOBYTE(v79) = 2;
  uint64_t v97 = v10;
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( v10,  0xD00000000000002FLL,  0x8000000000081BB0LL,  0LL,  v16,  "InformationFlowPlugin/InformationViewFactory.swift",  50LL,  2LL,  752LL,  "makeCasinoSnippet(layoutSnippet:renderOptions:)",  47LL,  v79,  partial apply for closure #2 in InformationViewFactory.makeCasinoSnippet(layoutSnippet:renderOptions:),  v114,  v8);
  uint64_t v88 = 0LL;
  swift_release(v23);
  uint64_t v104 = v11;
  uint64_t v103 = (void (*)(char *, uint64_t))v20;
  v20(v16, v11);
  id v24 = [objc_allocWithZone(SACardSnippet) init];
  uint64_t v25 = Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.perResultLayoutDetails.getter(v24);
  uint64_t v26 = *(void *)(v25 + 16);
  if (v26)
  {
    id v84 = v24;
    uint64_t v85 = v22;
    unint64_t v27 = v25 + ((*(unsigned __int8 *)(v113 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80));
    uint64_t v112 = *(void *)(v113 + 72);
    uint64_t v111 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v113 + 16);
    uint64_t v83 = v25;
    swift_bridgeObjectRetain(v25);
    uint64_t v28 = 0LL;
    uint64_t v29 = v108;
    NSString v30 = v102;
    uint64_t v31 = v106;
    uint64_t v32 = v87;
    uint64_t v33 = v86;
    do
    {
      uint64_t v34 = v28;
      uint64_t v35 = v111(v33, v27, v32);
      uint64_t v36 = Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.casinoSnippet.getter(v35);
      Apple_Parsec_Siri_V2alpha_CasinoSnippet.responseViewID.getter(v36);
      uint64_t v28 = v37;
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v29);
      (*(void (**)(char *, uint64_t))(v113 + 8))(v33, v32);
      swift_bridgeObjectRelease(v34);
      v27 += v112;
      --v26;
    }

    while (v26);
    swift_bridgeObjectRelease_n(v83, 2LL);
    NSString v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v28);
    id v24 = v84;
    [v84 setResponseViewId:v38];

    uint64_t v39 = v105;
    uint64_t v22 = v85;
  }

  else
  {
    swift_bridgeObjectRelease(v25);
    uint64_t v39 = v105;
    NSString v30 = v102;
  }

  uint64_t v40 = v110;
  uint64_t v41 = Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.hasCompactSnippet.getter();
  uint64_t v42 = (uint64_t)v96;
  char v43 = v90;
  uint64_t v44 = v108;
  if ((v41 & 1) != 0)
  {
    uint64_t v45 = Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.compactSnippet.getter(v41);
    Apple_Parsec_Siri_V2alpha_CasinoSnippet.responseViewID.getter(v45);
    uint64_t v47 = v46;
    (*(void (**)(char *, uint64_t))(v106 + 8))(v30, v44);
    NSString v48 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v47);
    [v24 setResponseViewId:v48];
  }

  uint64_t v49 = static PerformanceUtil.shared.getter(v41);
  uint64_t v50 = __chkstk_darwin(v49);
  uint64_t v51 = v97;
  Date.init()(v50);
  os_log_type_t v80 = &v79;
  char v81 = &type metadata for Data;
  LOBYTE(v79) = 2;
  uint64_t v52 = v88;
  ((void (*)(void *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t *@<X8>)))dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:))( v123,  0xD000000000000015LL,  0x8000000000081BE0LL,  0LL,  v43,  "InformationFlowPlugin/InformationViewFactory.swift",  50LL,  2LL,  771LL,  "makeCasinoSnippet(layoutSnippet:renderOptions:)",  47LL,  v79,  partial apply for closure #4 in InformationViewFactory.makeCasinoSnippet(layoutSnippet:renderOptions:));
  if (v52)
  {
    v103(v43, v104);
    swift_release(v49);
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v53 = type metadata accessor for Logger(0LL);
    uint64_t v54 = __swift_project_value_buffer(v53, (uint64_t)static Logger.information);
    Class isa = (os_log_s *)Logger.logObject.getter(v54);
    os_log_type_t v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(isa, v56))
    {
      unint64_t v57 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v57 = 0;
      _os_log_impl(&dword_0, isa, v56, "Unable to serialize card for snippet. Results may appear incomplete.", v57, 2u);
      swift_slowDealloc(v57, -1LL, -1LL);
    }

    swift_errorRelease(v52);
  }

  else
  {
    v103(v43, v104);
    swift_release(v49);
    uint64_t v58 = v123[0];
    unint64_t v59 = v123[1];
    Class isa = (os_log_s *)Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v58, v59);
    [v24 setCardData:isa];
  }

  id v60 = v24;
  os_log_type_t v61 = v91;
  uint64_t v62 = UUID.init()(v60);
  UUID.uuidString.getter(v62);
  uint64_t v64 = v63;
  (*(void (**)(char *, uint64_t))(v92 + 8))(v61, v93);
  NSString v65 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v64);
  [v60 setAceId:v65];

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v94 + 16))(v42, v40, v95);
  id v66 = v60;
  if (AFIsInternalInstall())
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v109 + 104LL))(&v120);
    uint64_t v67 = v121;
    uint64_t v68 = v122;
    __swift_project_boxed_opaque_existential_1(&v120, v121);
    char v69 = dispatch thunk of PommesServerFallbackDisabling.shouldDisableServerFallbackNL(isDomainDirected:)( 0LL,  v67,  v68);
    __swift_destroy_boxed_opaque_existential_1(&v120);
    char v70 = v69 ^ 1;
  }

  else
  {
    char v70 = 0;
  }

  type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAUISash,  &OBJC_CLASS___SAUISash_ptr);
  id v71 = SAUISash.init(layoutSnippet:showInternalPommesAttribution:)(v42, v70 & 1);
  [v66 setSash:v71];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class v72 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v22);
  [v66 setReferencedCommands:v72];

  if ((Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.hasCompactSnippet.getter() & 1) != 0) {
    (*(void (**)(id, uint64_t, uint64_t))(*(void *)v109 + 296LL))(v66, v40, v107);
  }
  id v73 = v66;
  uint64_t v74 = v100;
  Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.uiItemType.getter();
  Apple_Parsec_Siri_V2alpha_UIItemType.aceValue.getter();
  uint64_t v76 = v75;
  (*(void (**)(char *, uint64_t))(v101 + 8))(v74, v39);
  NSString v77 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v76);
  [v73 setItemType:v77];

  (*(void (**)(void *, uint64_t))(v98 + 8))(v51, v99);
  return v73;
}

uint64_t closure #2 in InformationViewFactory.attachCompactCard(cardSnippet:layoutSnippet:renderOptions:)@<X0>( uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Searchfoundation_Card(0LL);
  uint64_t v4 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Searchfoundation_Card and conformance Searchfoundation_Card,  (uint64_t (*)(uint64_t))&type metadata accessor for Searchfoundation_Card,  (uint64_t)&protocol conformance descriptor for Searchfoundation_Card);
  uint64_t result = Message.serializedData(partial:)(0LL, v3, v4);
  if (!v1)
  {
    *a1 = result;
    a1[1] = v6;
  }

  return result;
}

uint64_t InformationViewFactory.makeUtteranceView(dialog:layouts:)(uint64_t a1, uint64_t a2)
{
  uint64_t v96 = a2;
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent(0LL);
  uint64_t v94 = *(void *)(v3 - 8);
  uint64_t v95 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v89 - v7;
  uint64_t v98 = type metadata accessor for ResponseMode(0LL);
  uint64_t v9 = *(void *)(v98 - 8);
  uint64_t v10 = __chkstk_darwin(v98);
  uint64_t v12 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v89 - v14;
  __chkstk_darwin(v13);
  uint64_t v97 = (char *)&v89 - v16;
  id v17 = [objc_allocWithZone(DialogElement) init];
  Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.print.getter();
  uint64_t v19 = v18;
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  [v17 setFullPrint:v20];

  Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.print.getter();
  uint64_t v22 = v21;
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v22);
  [v17 setSupportingPrint:v23];

  Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.redactedPrint.getter();
  uint64_t v25 = v24;
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v25);
  [v17 setRedactedFullPrint:v26];

  Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.redactedPrint.getter();
  uint64_t v28 = v27;
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v28);
  [v17 setRedactedSupportingPrint:v29];

  Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.speak.getter();
  uint64_t v31 = v30;
  NSString v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v31);
  [v17 setFullSpeak:v32];

  Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.speak.getter();
  uint64_t v34 = v33;
  NSString v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v34);
  [v17 setSupportingSpeak:v35];

  Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.redactedSpeak.getter();
  uint64_t v37 = v36;
  NSString v38 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v37);
  [v17 setRedactedFullSpeak:v38];

  Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.redactedSpeak.getter();
  uint64_t v40 = v39;
  NSString v41 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v40);
  [v17 setRedactedSupportingSpeak:v41];

  id v43 = [v17 setSpokenOnly:Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.spokenOnly.getter(v42) & 1];
  Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catID.getter(v43);
  uint64_t v45 = v44;
  NSString v46 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v45);
  [v17 setId:v46];

  [v17 setIsApprovedForGrading:Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.isApprovedForGrading.getter() & 1];
  uint64_t v47 = type metadata accessor for SiriEnvironment(0LL);
  uint64_t v48 = static SiriEnvironment.forCurrentTask.getter(v47);
  if (v48)
  {
    uint64_t v49 = v48;
    uint64_t v50 = SiriEnvironment.currentRequest.getter();
    uint64_t v51 = swift_release(v49);
    CurrentRequest.responseMode.getter(v51);
    swift_release(v50);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v97, v15, v98);
  }

  else
  {
    static ResponseMode.displayForward.getter(0LL);
  }

  uint64_t v52 = v95;
  uint64_t v53 = v6;
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v54 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v54, (uint64_t)static Logger.information);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v97, v98);
  uint64_t v55 = v94;
  os_log_type_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v94 + 16);
  v56(v8, a1, v52);
  uint64_t v57 = ((uint64_t (*)(char *, uint64_t, uint64_t))v56)(v53, a1, v52);
  uint64_t v58 = (os_log_s *)Logger.logObject.getter(v57);
  os_log_type_t v59 = static os_log_type_t.debug.getter();
  int v60 = v59;
  if (os_log_type_enabled(v58, v59))
  {
    uint64_t v61 = swift_slowAlloc(24LL, -1LL);
    uint64_t v92 = v53;
    uint64_t v62 = v61;
    uint64_t v93 = swift_slowAlloc(32LL, -1LL);
    uint64_t v100 = v93;
    *(_DWORD *)uint64_t v62 = 136315650;
    uint64_t v89 = v62 + 4;
    uint64_t v63 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode,  (uint64_t (*)(uint64_t))&type metadata accessor for ResponseMode,  (uint64_t)&protocol conformance descriptor for ResponseMode);
    os_log_t v90 = v58;
    int v91 = v60;
    uint64_t v64 = v12;
    uint64_t v65 = v9;
    id v66 = v8;
    uint64_t v67 = v98;
    uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter(v98, v63);
    unint64_t v70 = v69;
    uint64_t v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v69, &v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100);
    swift_bridgeObjectRelease(v70);
    uint64_t v71 = v67;
    Class v72 = *(uint64_t (**)(char *, uint64_t))(v65 + 8);
    uint64_t v73 = v72(v64, v71);
    *(_WORD *)(v62 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 1024;
    LODWORD(v70) = Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.listenAfterSpeaking.getter(v73) & 1;
    uint64_t v74 = *(void (**)(char *, uint64_t))(v55 + 8);
    v74(v66, v52);
    LODWORD(v99) = v70;
    uint64_t v75 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, (char *)&v99 + 4);
    *(_WORD *)(v62 + 18) = 1024;
    uint64_t v76 = v92;
    LODWORD(v70) = Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.spokenOnly.getter(v75) & 1;
    v74(v76, v52);
    LODWORD(v99) = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, (char *)&v99 + 4);
    uint64_t v58 = v90;
    _os_log_impl( &dword_0,  v90,  (os_log_type_t)v91,  "Calling makeUtteranceView with responseMode: %s, listenAfterSpeaking: %{BOOL}d, spokenOnly: %{BOOL}d",  (uint8_t *)v62,  0x18u);
    uint64_t v77 = v93;
    swift_arrayDestroy(v93, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v77, -1LL, -1LL);
    swift_slowDealloc(v62, -1LL, -1LL);
  }

  else
  {
    uint64_t v78 = *(void (**)(char *, uint64_t))(v55 + 8);
    v78(v53, v52);
    v78(v8, v52);
    Class v72 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
    v72(v12, v98);
  }

  char v80 = Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.listenAfterSpeaking.getter(v79);
  char v81 = Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.forcePrintDialog.getter();
  BOOL v82 = *(void *)(v96 + 16) != 0LL;
  uint64_t v83 = Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catCategory.getter();
  uint64_t v85 = v84;
  uint64_t v86 = v97;
  uint64_t v87 = static AceOutputHelper.makeUtteranceView(for:canUseServerTTS:listenAfterSpeaking:printSupportingDialogInDisplayModes:forcePrintDialog:containsVisual:responseMode:dialogCategory:)( v17,  1LL,  v80 & 1,  0LL,  v81 & 1,  v82,  v97,  v83,  v84);

  swift_bridgeObjectRelease(v85);
  v72(v86, v98);
  return v87;
}

void *InformationViewFactory.deinit()
{
  return v0;
}

uint64_t InformationViewFactory.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 104LL, 7LL);
}

id SAUISash.init(appName:appID:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    id v8 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v4)) init];
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    [v8 setTitle:v9];

    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a4);
    [v8 setApplicationBundleIdentifier:v10];
  }

  else
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    return 0LL;
  }

  return v8;
}

void *SAGKSummaryPod.init(title:text:caption:imageResource:)( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, void *a7)
{
  id v15 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v7)) init];
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v16 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v16 = a1 & 0xFFFFFFFFFFFFLL;
  }
  id v17 = v15;
  uint64_t v18 = v17;
  if (v16)
  {
    id v19 = v17;
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    [v19 setTitle:v20];
  }

  else
  {
    swift_bridgeObjectRelease(a2);
  }

  uint64_t v21 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v21 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v21)
  {
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a4);
    [v18 setText:v22];
  }

  else
  {
    swift_bridgeObjectRelease(a4);
  }

  uint64_t v23 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x2000000000000000LL) == 0) {
    uint64_t v23 = a5 & 0xFFFFFFFFFFFFLL;
  }
  if (v23)
  {
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a6);
    [v18 setCaption:v24];
  }

  else
  {
    swift_bridgeObjectRelease(a6);
  }

  [v18 setImageResource:a7];

  return v18;
}

id SAGKImageLinkedAnswer.init(imageLinkedAnswer:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_Legacy_PunchOut(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_Legacy_ImageResource(0LL);
  __chkstk_darwin(v6);
  id v7 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1)) init];
  if ((Apple_Parsec_Siri_Legacy_ImageLinkedAnswer.hasImageResource.getter() & 1) != 0)
  {
    uint64_t v8 = type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAUIImageResource,  &OBJC_CLASS___SAUIImageResource_ptr);
    Apple_Parsec_Siri_Legacy_ImageLinkedAnswer.imageResource.getter(v8);
    SAUIImageResource.init(imageResource:)();
    NSString v10 = v9;
    [v7 setImageResource:v9];
  }

  if ((Apple_Parsec_Siri_Legacy_ImageLinkedAnswer.hasPunchOut.getter() & 1) != 0)
  {
    type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAUIAppPunchOut,  &OBJC_CLASS___SAUIAppPunchOut_ptr);
    Apple_Parsec_Siri_Legacy_ImageLinkedAnswer.punchOut.getter();
    id v11 = SAUIAppPunchOut.init(punchOut:)((uint64_t)v5);
    [v7 setPunchOut:v11];

    uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_Legacy_ImageLinkedAnswer(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(a1, v12);
  }

  else
  {
    uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_Legacy_ImageLinkedAnswer(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(a1, v13);
  }

  return v7;
}

void SAUIImageResource.init(imageResource:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v2);
  id v3 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0)) init];
  Apple_Parsec_Siri_Legacy_ImageResource.imageData.getter();
  __asm { BR              X10 }

void *sub_53494()
{
  uint64_t v8 = outlined consume of Data._Representation(v1, v6);
  if ((v6 & 0xFF000000000000LL) != 0)
  {
    uint64_t v9 = ((uint64_t (*)(uint64_t))Apple_Parsec_Siri_Legacy_ImageResource.imageData.getter)(v8);
    unint64_t v11 = v10;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v9, v11);
    [v2 setImageData:isa];
  }

  if (((double (*)(uint64_t))Apple_Parsec_Siri_Legacy_ImageResource.pixelWidth.getter)(v8) > 0.0)
  {
    Apple_Parsec_Siri_Legacy_ImageResource.pixelWidth.getter(v13);
    id v13 = objc_msgSend(v2, "setPixelWidth:");
  }

  if (((double (*)(id))Apple_Parsec_Siri_Legacy_ImageResource.pixelHeight.getter)(v13) > 0.0)
  {
    Apple_Parsec_Siri_Legacy_ImageResource.pixelHeight.getter();
    id v14 = objc_msgSend(v2, "setPixelHeight:");
  }

  uint64_t v15 = Apple_Parsec_Siri_Legacy_ImageResource.resourceURL.getter(v14);
  unint64_t v17 = v16;
  uint64_t v18 = swift_bridgeObjectRelease(v16);
  uint64_t v19 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000LL) == 0) {
    uint64_t v19 = v15 & 0xFFFFFFFFFFFFLL;
  }
  if (v19)
  {
    uint64_t v20 = Apple_Parsec_Siri_Legacy_ImageResource.resourceURL.getter(v18);
    uint64_t v22 = v21;
    URL.init(string:)(v20);
    swift_bridgeObjectRelease(v22);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v4, 1LL, v3) == 1)
    {
      uint64_t v18 = outlined destroy of Any?(v4, &demangling cache variable for type metadata for URL?);
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v5, v4, v3);
      URL._bridgeToObjectiveC()(v23);
      uint64_t v25 = v24;
      [v2 setResourceUrl:v24];

      uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v5, v3);
    }
  }

  if (((double (*)(uint64_t))Apple_Parsec_Siri_Legacy_ImageResource.scaleFactor.getter)(v18) > 0.0)
  {
    Apple_Parsec_Siri_Legacy_ImageResource.scaleFactor.getter();
    id v26 = objc_msgSend(v2, "setScaleFactor:");
  }

  uint64_t v27 = Apple_Parsec_Siri_Legacy_ImageResource.urlFormatString.getter(v26);
  unint64_t v29 = v28;
  uint64_t v30 = swift_bridgeObjectRelease(v28);
  uint64_t v31 = HIBYTE(v29) & 0xF;
  if ((v29 & 0x2000000000000000LL) == 0) {
    uint64_t v31 = v27 & 0xFFFFFFFFFFFFLL;
  }
  if (v31)
  {
    Apple_Parsec_Siri_Legacy_ImageResource.urlFormatString.getter(v30);
    uint64_t v33 = v32;
    NSString v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v33);
    [v2 setUrlFormatString:v34];
  }

  uint64_t v35 = ((uint64_t (*)(uint64_t))Apple_Parsec_Siri_Legacy_ImageResource.userAgent.getter)(v30);
  unint64_t v37 = v36;
  uint64_t v38 = swift_bridgeObjectRelease(v36);
  uint64_t v39 = HIBYTE(v37) & 0xF;
  if ((v37 & 0x2000000000000000LL) == 0) {
    uint64_t v39 = v35 & 0xFFFFFFFFFFFFLL;
  }
  if (v39)
  {
    ((void (*)(uint64_t))Apple_Parsec_Siri_Legacy_ImageResource.userAgent.getter)(v38);
    uint64_t v41 = v40;
    NSString v42 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v41);
    [v2 setUserAgent:v42];

    uint64_t v43 = type metadata accessor for Apple_Parsec_Siri_Legacy_ImageResource(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v43 - 8) + 8LL))(v0, v43);
  }

  else
  {
    uint64_t v44 = type metadata accessor for Apple_Parsec_Siri_Legacy_ImageResource(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v44 - 8) + 8LL))(v0, v44);
  }

  return v2;
}

id SAUIAppPunchOut.init(punchOut:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v4 = __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v64 - v7;
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  id v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v64 - v14;
  id v16 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1)) init];
  uint64_t v17 = ((uint64_t (*)(void))Apple_Parsec_Siri_Legacy_PunchOut.subtitle.getter)();
  unint64_t v19 = v18;
  uint64_t v20 = swift_bridgeObjectRelease(v18);
  uint64_t v21 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000LL) == 0) {
    uint64_t v21 = v17 & 0xFFFFFFFFFFFFLL;
  }
  if (v21)
  {
    Apple_Parsec_Siri_Legacy_PunchOut.subtitle.getter(v20);
    uint64_t v23 = v22;
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v23);
    [v16 setSubtitle:v24];
  }

  uint64_t v25 = Apple_Parsec_Siri_Legacy_PunchOut.punchOutUri.getter(v20);
  uint64_t v27 = v26;
  URL.init(string:)(v25);
  swift_bridgeObjectRelease(v27);
  unint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v28(v8, 1LL, v9) == 1)
  {
    uint64_t v29 = outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for URL?);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v8, v9);
    URL._bridgeToObjectiveC()(v30);
    uint64_t v32 = v31;
    [v16 setPunchOutUri:v31];

    uint64_t v29 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }

  uint64_t v33 = Apple_Parsec_Siri_Legacy_PunchOut.bundleID.getter(v29);
  unint64_t v35 = v34;
  uint64_t v36 = swift_bridgeObjectRelease(v34);
  uint64_t v37 = HIBYTE(v35) & 0xF;
  if ((v35 & 0x2000000000000000LL) == 0) {
    uint64_t v37 = v33 & 0xFFFFFFFFFFFFLL;
  }
  if (v37)
  {
    Apple_Parsec_Siri_Legacy_PunchOut.bundleID.getter(v36);
    uint64_t v39 = v38;
    NSString v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v39);
    [v16 setBundleId:v40];
  }

  uint64_t v41 = Apple_Parsec_Siri_Legacy_PunchOut.appDisplayName.getter(v36);
  unint64_t v43 = v42;
  uint64_t v44 = swift_bridgeObjectRelease(v42);
  uint64_t v45 = HIBYTE(v43) & 0xF;
  if ((v43 & 0x2000000000000000LL) == 0) {
    uint64_t v45 = v41 & 0xFFFFFFFFFFFFLL;
  }
  if (v45)
  {
    Apple_Parsec_Siri_Legacy_PunchOut.appDisplayName.getter(v44);
    uint64_t v47 = v46;
    NSString v48 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v47);
    [v16 setAppDisplayName:v48];
  }

  uint64_t v49 = Apple_Parsec_Siri_Legacy_PunchOut.appStoreUri.getter(v44);
  unint64_t v51 = v50;
  uint64_t v52 = swift_bridgeObjectRelease(v50);
  uint64_t v53 = HIBYTE(v51) & 0xF;
  if ((v51 & 0x2000000000000000LL) == 0) {
    uint64_t v53 = v49 & 0xFFFFFFFFFFFFLL;
  }
  if (v53)
  {
    uint64_t v54 = Apple_Parsec_Siri_Legacy_PunchOut.appStoreUri.getter(v52);
    uint64_t v56 = v55;
    URL.init(string:)(v54);
    swift_bridgeObjectRelease(v56);
    if (v28(v6, 1LL, v9) == 1)
    {
      uint64_t v57 = type metadata accessor for Apple_Parsec_Siri_Legacy_PunchOut(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v57 - 8) + 8LL))(a1, v57);

      outlined destroy of Any?((uint64_t)v6, &demangling cache variable for type metadata for URL?);
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v6, v9);
      URL._bridgeToObjectiveC()(v59);
      uint64_t v61 = v60;
      [v16 setAppStoreUri:v60];

      uint64_t v62 = type metadata accessor for Apple_Parsec_Siri_Legacy_PunchOut(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v62 - 8) + 8LL))(a1, v62);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    }
  }

  else
  {
    uint64_t v58 = type metadata accessor for Apple_Parsec_Siri_Legacy_PunchOut(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v58 - 8) + 8LL))(a1, v58);
  }

  return v16;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Searchfoundation_CardSection?);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v48 = (uint64_t)&v44 - v6;
  uint64_t v7 = type metadata accessor for Searchfoundation_CardSection(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v49 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v52 = _swiftEmptyArrayStorage;
  uint64_t v47 = (v10 + 32) & ~v10;
  unint64_t v50 = (char *)_swiftEmptyArrayStorage + v47;
  uint64_t v45 = v10 | 7;
  uint64_t result = swift_bridgeObjectRetain(a1);
  unint64_t v53 = 0LL;
  uint64_t v12 = 0LL;
  uint64_t v51 = 0LL;
  unint64_t v13 = 0LL;
LABEL_4:
  unint64_t v16 = *(void *)(a1 + 16);
  if (v13 != v16)
  {
    if (v13 < v16)
    {
      while (1)
      {
        uint64_t v17 = v12;
        uint64_t v12 = *(void *)(a1 + 32 + 8 * v13);
        swift_bridgeObjectRetain(v12);
        uint64_t result = swift_bridgeObjectRelease(v17);
        if (v12) {
          break;
        }
LABEL_9:
        ++v13;
        unint64_t v18 = *(void *)(a1 + 16);
        if (v13 == v18) {
          goto LABEL_38;
        }
        if (v13 >= v18) {
          goto LABEL_43;
        }
      }

      unint64_t v14 = *(void *)(v12 + 16);
      if (!v14)
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v5, 1LL, 1LL, v7);
        uint64_t result = outlined destroy of Any?( (uint64_t)v5,  &demangling cache variable for type metadata for Searchfoundation_CardSection?);
        goto LABEL_9;
      }

      unint64_t v15 = 0LL;
      ++v13;
      while (1)
      {
        if (v15 >= v14) {
          goto LABEL_44;
        }
        uint64_t v19 = *(void *)(v8 + 72);
        unint64_t v53 = v15;
        (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v5, v12 + v47 + v19 * v15, v7);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0LL, 1LL, v7);
        uint64_t v20 = v48;
        outlined init with take of Searchfoundation_CardSection?((uint64_t)v5, v48);
        uint64_t v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 32);
        uint64_t result = v46(v49, v20, v7);
        if (!v51) {
          break;
        }
        uint64_t v21 = v52;
        uint64_t v22 = v51 - 1;
        if (__OFSUB__(v51, 1LL)) {
          goto LABEL_45;
        }
LABEL_37:
        uint64_t v51 = v22;
        ++v53;
        uint64_t v39 = v50;
        uint64_t result = v46(v50, (uint64_t)v49, v7);
        unint64_t v50 = &v39[v19];
        uint64_t v52 = v21;
        unint64_t v14 = *(void *)(v12 + 16);
        unint64_t v15 = v53;
        if (v53 == v14)
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v5, 1LL, 1LL, v7);
          uint64_t result = outlined destroy of Any?( (uint64_t)v5,  &demangling cache variable for type metadata for Searchfoundation_CardSection?);
          goto LABEL_4;
        }
      }

      unint64_t v23 = v52[3];
      int64_t v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
      if (v24 <= 1) {
        uint64_t v25 = 1LL;
      }
      else {
        uint64_t v25 = v24;
      }
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Searchfoundation_CardSection>);
      uint64_t v27 = v47;
      uint64_t v51 = v25;
      uint64_t v21 = (void *)swift_allocObject(v26, v47 + v25 * v19, v45);
      uint64_t result = _swift_stdlib_malloc_size(v21);
      if (!v19) {
        goto LABEL_48;
      }
      uint64_t v28 = result - v27;
      if (result - v27 == 0x8000000000000000LL && v19 == -1) {
        goto LABEL_49;
      }
      uint64_t v30 = v27;
      uint64_t v31 = v28 / v19;
      uint64_t v32 = v52;
      v21[2] = v51;
      v21[3] = 2 * (v28 / v19);
      uint64_t v33 = (char *)v21 + v30;
      uint64_t v34 = v32[3] >> 1;
      uint64_t v35 = v34 * v19;
      if (!v32[2])
      {
LABEL_36:
        unint64_t v50 = &v33[v35];
        uint64_t v37 = (v31 & 0x7FFFFFFFFFFFFFFFLL) - v34;
        uint64_t result = swift_release(v32);
        BOOL v38 = __OFSUB__(v37, 1LL);
        uint64_t v22 = v37 - 1;
        if (v38) {
          goto LABEL_45;
        }
        goto LABEL_37;
      }

      uint64_t v36 = (char *)v32 + v30;
      if (v21 < v32 || v33 >= &v36[v35])
      {
        unint64_t v50 = (char *)v21 + v30;
        uint64_t v51 = v34;
        uint64_t v44 = v34 * v19;
        swift_arrayInitWithTakeFrontToBack((char *)v21 + v30, v36, v34, v7);
      }

      else
      {
        if (v21 == v52)
        {
LABEL_35:
          uint64_t v32 = v52;
          _OWORD v52[2] = 0LL;
          goto LABEL_36;
        }

        unint64_t v50 = (char *)v21 + v30;
        uint64_t v51 = v34;
        uint64_t v44 = v34 * v19;
        swift_arrayInitWithTakeBackToFront((char *)v21 + v30);
      }

      uint64_t v35 = v44;
      uint64_t v33 = v50;
      uint64_t v34 = v51;
      goto LABEL_35;
    }

LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }

LABEL_38:
  uint64_t v20 = v48;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v48, 1LL, 1LL, v7);
LABEL_39:
  swift_bridgeObjectRelease(a1);
  NSString v40 = v52;
  swift_bridgeObjectRelease(v12);
  uint64_t result = outlined destroy of Any?(v20, &demangling cache variable for type metadata for Searchfoundation_CardSection?);
  unint64_t v41 = v40[3];
  if (v41 < 2) {
    return (uint64_t)v40;
  }
  unint64_t v42 = v41 >> 1;
  BOOL v38 = __OFSUB__(v42, v51);
  unint64_t v43 = v42 - v51;
  if (!v38)
  {
    void v40[2] = v43;
    return (uint64_t)v40;
  }

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = &_swiftEmptyArrayStorage;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v8 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent(0LL) - 8);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 320LL);
    uint64_t v11 = *(void *)(v8 + 72);
    swift_bridgeObjectRetain(a1);
    do
    {
      uint64_t v13 = v10(v9, a3);
      if (v13)
      {
        uint64_t v14 = v13;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        unint64_t v16 = *(void *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
        unint64_t v15 = *(void *)((char *)&dword_18 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
        if (v16 >= v15 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1LL);
        }
        uint64_t v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v14);
        specialized Array._endMutation()(v12);
      }

      v9 += v11;
      --v5;
    }

    while (v5);
    swift_bridgeObjectRelease(a1);
    return &_swiftEmptyArrayStorage;
  }

  return result;
}

{
  void *result;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result = &_swiftEmptyArrayStorage;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v8 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent(0LL) - 8);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 192LL);
    uint64_t v11 = *(void *)(v8 + 72);
    swift_bridgeObjectRetain(a1);
    do
    {
      uint64_t v13 = v10(v9, a3);
      if (v13)
      {
        uint64_t v14 = v13;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        unint64_t v16 = *(void *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
        unint64_t v15 = *(void *)((char *)&dword_18 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
        if (v16 >= v15 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1LL);
        }
        uint64_t v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v14);
        specialized Array._endMutation()(v12);
      }

      v9 += v11;
      --v5;
    }

    while (v5);
    swift_bridgeObjectRelease(a1);
    return &_swiftEmptyArrayStorage;
  }

  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10PegasusAPI48Apple_Parsec_Siri_V2alpha_LayoutSnippetComponentVG_So18SACardShowNextCardCs5NeverOTg5057_s21InformationFlowPlugin0A11ViewFactoryC31makeCommandFord46Navigation7layoutsSaySo06SABaseG0CGSay0I3API48f1_g1_h1_i1_jkl9VG_tFSo18mnoP8CAKXEfU_0sT6Plugin0swX0CTf1cn_nTf4ng_n( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v9)
  {
    uint64_t v31 = _swiftEmptyArrayStorage;
    uint64_t v28 = v5;
    uint64_t v29 = a2;
    uint64_t v27 = v6;
    specialized ContiguousArray.reserveCapacity(_:)(v9);
    uint64_t v11 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent(0LL) - 8);
    uint64_t v12 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v13 = type metadata accessor for PerformanceUtil(0LL);
    v26[1] = v13;
    uint64_t v14 = *(void *)(v11 + 72);
    do
    {
      uint64_t v15 = static PerformanceUtil.shared.getter(v13);
      uint64_t v16 = __chkstk_darwin(v15);
      Date.init()(v16);
      uint64_t v17 = type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SACardSnippet,  &OBJC_CLASS___SACardSnippet_ptr);
      int64_t v24 = &v23;
      uint64_t v25 = v17;
      LOBYTE(v2__swift_destroy_boxed_opaque_existential_1(v0 + 3) = 2;
      ((void (*)(void **__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t *@<X8>)))dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:))( &v30,  0xD000000000000021LL,  0x80000000000819D0LL,  0LL,  v8,  "InformationFlowPlugin/InformationViewFactory.swift",  50LL,  2LL,  173LL,  "makeCommandForPegasusNavigation(layouts:)",  41LL,  v23,  partial apply for closure #1 in closure #1 in InformationViewFactory.makeCommandForPegasusNavigation(layouts:));
      swift_release(v15);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v28);
      unint64_t v18 = v30;
      id v19 = [objc_allocWithZone(SACardShowNextCard) init];
      [v19 setCardSnippet:v18];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v20);
      uint64_t v21 = v31[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v21);
      uint64_t v22 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v19);
      uint64_t v13 = specialized ContiguousArray._endMutation()(v22);
      v12 += v14;
      --v9;
    }

    while (v9);
    return v31;
  }

  return result;
}

void *partial apply for closure #1 in InformationViewFactory.makeButtonView(button:)@<X0>(void *a1@<X8>)
{
  uint64_t result = specialized static CommandFactory.makeCommands(forComponent:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #4 in InformationViewFactory.makeSnippet(layoutSnippet:renderOptions:)@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 16) + 208LL))(*(void *)(v1 + 24));
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #3 in InformationViewFactory.makeSnippet(layoutSnippet:renderOptions:)@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 16) + 240LL))(*(void *)(v1 + 24));
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #2 in InformationViewFactory.makeSnippet(layoutSnippet:renderOptions:)@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 16) + 200LL))(*(void *)(v1 + 24));
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in InformationViewFactory.makeSnippet(layoutSnippet:renderOptions:)@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v1 + 16) + 312LL))( *(void *)(v1 + 24),  *(void *)(v1 + 32));
  *a1 = result;
  return result;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = &_swiftEmptyArrayStorage;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *(void *)(type metadata accessor for Apple_Parsec_Siri_Legacy_PodView(0LL) - 8);
    uint64_t v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 272LL);
    uint64_t v9 = *(void *)(v6 + 72);
    swift_bridgeObjectRetain(a1);
    do
    {
      uint64_t v11 = v8(v7);
      if (v11)
      {
        uint64_t v12 = v11;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
        unint64_t v14 = *(void *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
        unint64_t v13 = *(void *)((char *)&dword_18 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
        if (v14 >= v13 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1LL);
        }
        uint64_t v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
        specialized Array._endMutation()(v10);
      }

      v7 += v9;
      --v4;
    }

    while (v4);
    swift_bridgeObjectRelease(a1);
    return &_swiftEmptyArrayStorage;
  }

  return result;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty(0LL) - 8);
  uint64_t v6 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  unint64_t v18 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 216LL);
  uint64_t v7 = *(void *)(v5 + 72);
  uint64_t v17 = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v8 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v10 = v18(v6);
    if (v11)
    {
      uint64_t v12 = v10;
      unint64_t v13 = v11;
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0) {
        uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v8[2] + 1LL,  1,  v8);
      }
      uint64_t v15 = v8[2];
      unint64_t v14 = v8[3];
      if (v15 >= v14 >> 1) {
        uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v14 > 1),  v15 + 1,  1,  v8);
      }
      v8[2] = v15 + 1;
      uint64_t v9 = &v8[2 * v15];
      v9[4] = v12;
      v9[5] = v13;
    }

    v6 += v7;
    --v2;
  }

  while (v2);
  swift_bridgeObjectRelease(v17);
  return v8;
}

char *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Searchfoundation_Card?);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Searchfoundation_Card(0LL);
  uint64_t v28 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v29 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v27 = (char *)&v23 - v11;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails(0LL) - 8);
  uint64_t v14 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v15 = *(void *)(v13 + 72);
  uint64_t v24 = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v16 = (char *)_swiftEmptyArrayStorage;
  uint64_t v25 = v15;
  uint64_t v26 = a2;
  uint64_t v17 = v28;
  do
  {
    closure #1 in InformationViewFactory.makeCard(perResultLayoutDetails:renderOptions:)(v14, a2, v7);
    if (v2)
    {
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(v24);
      return v16;
    }

    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v7, 1LL, v8) == 1)
    {
      outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for Searchfoundation_Card?);
    }

    else
    {
      unint64_t v18 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
      id v19 = v27;
      v18(v27, v7, v8);
      v18(v29, v19, v8);
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0) {
        uint64_t v16 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *((void *)v16 + 2) + 1LL,  1,  (unint64_t)v16);
      }
      unint64_t v21 = *((void *)v16 + 2);
      unint64_t v20 = *((void *)v16 + 3);
      if (v21 >= v20 >> 1) {
        uint64_t v16 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v20 > 1,  v21 + 1,  1,  (unint64_t)v16);
      }
      *((void *)v16 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v21 + 1;
      uint64_t v17 = v28;
      v18( &v16[((*(unsigned __int8 *)(v17 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))
           + *(void *)(v28 + 72) * v21],
        v29,
        v8);
      uint64_t v15 = v25;
      a2 = v26;
    }

    v14 += v15;
    --v12;
  }

  while (v12);
  swift_bridgeObjectRelease(v24);
  return v16;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10PegasusAPI32Apple_Parsec_Siri_V2alpha_PersonVG_So8SAPersonCs5NeverOTg5047_s21InformationFlowPlugin0A11ViewFactoryC17makej32Snippet06layoutH0So010SAABPersonv5CSg10d6API032f1_g1_h1_i25_LayoutH9ComponentV_tFSo8K25CAI0m1_n1_o1_p1_G0VXEfU0_0nO6Plugin0nrS0CTf1cn_nTf4ng_n( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    uint64_t v6 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_Person(0LL) - 8);
    uint64_t v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 224LL);
    uint64_t v9 = *(void *)(v6 + 72);
    do
    {
      uint64_t v10 = v8(v7);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v11 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      uint64_t v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v10);
      specialized ContiguousArray._endMutation()(v12);
      v7 += v9;
      --v3;
    }

    while (v3);
    return _swiftEmptyArrayStorage;
  }

  return result;
}

void *partial apply for closure #2 in InformationViewFactory.makeMapSnippet(layoutSnippet:)@<X0>( void *a1@<X8>)
{
  uint64_t result = specialized static CommandFactory.makeCommands(forComponent:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

void *specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = a2;
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_Legacy_ImageResource(0LL);
  uint64_t v37 = *(void *)(v3 - 8);
  uint64_t v38 = v3;
  __chkstk_darwin(v3);
  uint64_t v36 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, SAUIImageResource>);
  uint64_t result = (void *)static _DictionaryStorage.copy(original:)(a1);
  int64_t v6 = 0LL;
  uint64_t v39 = a1;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v8 = a1 + 64;
  uint64_t v7 = v9;
  uint64_t v10 = 1LL << *(_BYTE *)(v8 - 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & v7;
  uint64_t v32 = v8;
  int64_t v33 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v34 = result + 8;
  uint64_t v35 = result;
  uint64_t v14 = v36;
  uint64_t v13 = v37;
  uint64_t v15 = v38;
  if ((v11 & v7) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v16 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  int64_t v41 = v6;
  for (unint64_t i = v16 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v20 << 6))
  {
    uint64_t v22 = (uint64_t *)(*(void *)(v39 + 48) + 16 * i);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))( v14,  *(void *)(v39 + 56) + *(void *)(v13 + 72) * i,  v15);
    uint64_t v25 = *(uint64_t (**)(char *))(*(void *)v40 + 264LL);
    swift_bridgeObjectRetain(v23);
    uint64_t v26 = v25(v14);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v14, v15);
    uint64_t result = v35;
    *(void *)((char *)v34 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    uint64_t v27 = (void *)(result[6] + 16 * i);
    *uint64_t v27 = v24;
    v27[1] = v23;
    *(void *)(result[7] + 8 * i) = v26;
    uint64_t v28 = result[2];
    BOOL v29 = __OFADD__(v28, 1LL);
    uint64_t v30 = v28 + 1;
    if (v29)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    result[2] = v30;
    int64_t v6 = v41;
    if (v12) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v18 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      goto LABEL_24;
    }
    if (v18 >= v33) {
      return result;
    }
    unint64_t v19 = *(void *)(v32 + 8 * v18);
    int64_t v20 = v6 + 1;
    if (!v19)
    {
      int64_t v20 = v6 + 2;
      if (v6 + 2 >= v33) {
        return result;
      }
      unint64_t v19 = *(void *)(v32 + 8 * v20);
      if (!v19)
      {
        int64_t v20 = v6 + 3;
        if (v6 + 3 >= v33) {
          return result;
        }
        unint64_t v19 = *(void *)(v32 + 8 * v20);
        if (!v19) {
          break;
        }
      }
    }

LABEL_18:
    unint64_t v12 = (v19 - 1) & v19;
    int64_t v41 = v20;
  }

  uint64_t v21 = v6 + 4;
  if (v6 + 4 >= v33) {
    return result;
  }
  unint64_t v19 = *(void *)(v32 + 8 * v21);
  if (v19)
  {
    int64_t v20 = v6 + 4;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v20 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v20 >= v33) {
      return result;
    }
    unint64_t v19 = *(void *)(v32 + 8 * v20);
    ++v21;
    if (v19) {
      goto LABEL_18;
    }
  }

LABEL_25:
  __break(1u);
  return result;
}

    unint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v19 = *v17;
    int64_t v18 = v17[1];
    int64_t v20 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    unint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v19 = *v17;
    int64_t v18 = v17[1];
    int64_t v20 = 48 * v15;
    outlined init with copy of Decodable & Encodable & Sendable(*(void *)(v2 + 56) + 48 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    outlined init with take of Decodable & Encodable & Sendable(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

void partial apply for closure #2 in InformationViewFactory.makeCard(perResultLayoutDetails:renderOptions:)( uint64_t a1)
{
}

uint64_t partial apply for closure #1 in InformationViewFactory.attachCompactCard(cardSnippet:layoutSnippet:renderOptions:)()
{
  return closure #1 in InformationViewFactory.attachCompactCard(cardSnippet:layoutSnippet:renderOptions:)( v0[2],  v0[3],  v0[4]);
}

uint64_t partial apply for closure #2 in InformationViewFactory.attachCompactCard(cardSnippet:layoutSnippet:renderOptions:)@<X0>( uint64_t *a1@<X8>)
{
  return closure #2 in InformationViewFactory.attachCompactCard(cardSnippet:layoutSnippet:renderOptions:)(a1);
}

uint64_t partial apply for closure #2 in InformationViewFactory.makeCasinoSnippet(layoutSnippet:renderOptions:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.perResultLayoutDetails.getter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 280LL))(v3, v2);
  return swift_bridgeObjectRelease(v3);
}

unint64_t lazy protocol witness table accessor for type InformationViewFactory.AceViewCategory and conformance InformationViewFactory.AceViewCategory()
{
  unint64_t result = lazy protocol witness table cache variable for type InformationViewFactory.AceViewCategory and conformance InformationViewFactory.AceViewCategory;
  if (!lazy protocol witness table cache variable for type InformationViewFactory.AceViewCategory and conformance InformationViewFactory.AceViewCategory)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for InformationViewFactory.AceViewCategory,  &type metadata for InformationViewFactory.AceViewCategory);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type InformationViewFactory.AceViewCategory and conformance InformationViewFactory.AceViewCategory);
  }

  return result;
}

uint64_t sub_54EB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 104LL))();
}

uint64_t sub_54EDC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_BYTE *))(**(void **)a2 + 112LL))(v4);
}

uint64_t type metadata accessor for InformationViewFactory()
{
  return objc_opt_self(&OBJC_CLASS____TtC21InformationFlowPlugin22InformationViewFactory);
}

uint64_t getEnumTagSinglePayload for InformationViewFactory.AceViewCategory( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

uint64_t storeEnumTagSinglePayload for InformationViewFactory.AceViewCategory( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_55018 + 4 * byte_7E2B9[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_5504C + 4 * byte_7E2B4[v4]))();
}

uint64_t sub_5504C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_55054(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x5505CLL);
  }
  return result;
}

uint64_t sub_55068(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x55070LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_55074(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_5507C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InformationViewFactory.AceViewCategory()
{
  return &type metadata for InformationViewFactory.AceViewCategory;
}

uint64_t outlined init with take of Searchfoundation_CardSection?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Searchfoundation_CardSection?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in InformationViewFactory.makeCard(perResultLayoutDetails:renderOptions:)()
{
  return (*(uint64_t (**)(void, void))(**(void **)(v0 + 16) + 288LL))(*(void *)(v0 + 24), 0LL);
}

void *partial apply for closure #1 in closure #1 in InformationViewFactory.makeDisambiguationListView(list:)@<X0>( void *a1@<X8>)
{
  unint64_t result = specialized static CommandFactory.makeCommands(forListItem:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

void *__swift_deallocate_boxed_opaque_existential_1(void *result)
{
  uint64_t v1 = *(void *)(result[3] - 8LL);
  if ((*(_DWORD *)(v1 + 80) & 0x20000) != 0) {
    return (void *)swift_slowDealloc( *result,  *(void *)(v1 + 64)
  }
                     + ((*(_DWORD *)(v1 + 80) + 16LL) & ~(unint64_t)*(_DWORD *)(v1 + 80)),
                       *(_DWORD *)(v1 + 80) | 7LL);
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in InformationViewFactory.makeCommandForPegasusNavigation(layouts:)@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v1 + 16) + 312LL))(*(void *)(v1 + 24), 0LL);
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #4 in InformationViewFactory.makeCasinoSnippet(layoutSnippet:renderOptions:)@<X0>( uint64_t *a1@<X8>)
{
  return partial apply for closure #2 in InformationViewFactory.attachCompactCard(cardSnippet:layoutSnippet:renderOptions:)(a1);
}

void *partial apply for closure #1 in InformationViewFactory.makeCompactSnippet(layoutSnippet:renderOptions:)@<X0>( void *a1@<X8>)
{
  return partial apply for closure #2 in InformationViewFactory.makeMapSnippet(layoutSnippet:)(a1);
}

uint64_t SportsPersonalizationSelection<A>.debugDescription.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  BOOL v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v9, v11);
  int v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 2LL, v3);
  if (v12)
  {
    if (v12 == 1) {
      return 0x63696C7070616E69LL;
    }
    else {
      return 0x756769626D616E75LL;
    }
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v9, v3);
    unint64_t v21 = 0LL;
    unint64_t v22 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(33LL);
    swift_bridgeObjectRelease(v22);
    unint64_t v21 = 0xD00000000000001ELL;
    unint64_t v22 = 0x8000000000081D20LL;
    char v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(v3, a2);
    BOOL v15 = (v14 & 1) == 0;
    if ((v14 & 1) != 0) {
      uint64_t v16 = 1702195828LL;
    }
    else {
      uint64_t v16 = 0x65736C6166LL;
    }
    if (v15) {
      unint64_t v17 = 0xE500000000000000LL;
    }
    else {
      unint64_t v17 = 0xE400000000000000LL;
    }
    unint64_t v18 = v17;
    String.append(_:)(*(Swift::String *)&v16);
    swift_bridgeObjectRelease(v17);
    v19._uint64_t countAndFlagsBits = 41LL;
    v19._object = (void *)0xE100000000000000LL;
    String.append(_:)(v19);
    unint64_t v13 = v21;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }

  return v13;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance <A> SportsPersonalizationSelection<A>( uint64_t a1, uint64_t a2)
{
  return SportsPersonalizationSelection<A>.debugDescription.getter(a1, *(void *)(a2 - 8));
}

uint64_t type metadata instantiation function for SportsPersonalizationSelection( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 8LL);
}

uint64_t type metadata completion function for SportsPersonalizationSelection(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 0LL, *(void *)(result - 8) + 64LL, 2LL);
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SportsPersonalizationSelection( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  unint64_t v9 = v8;
  if (v7 <= 1)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
      if (v11 > 0xFFFE)
      {
        uint64_t v10 = 4LL;
      }

      else
      {
        BOOL v12 = v11 != 0;
        BOOL v13 = v11 >= 0xFF;
        uint64_t v10 = 2LL;
        if (!v13) {
          uint64_t v10 = v12;
        }
      }
    }

    else
    {
      uint64_t v10 = 1LL;
    }

    unint64_t v9 = v10 + v8;
  }

  uint64_t v14 = *(_DWORD *)(v6 + 80);
  if (v14 <= 7 && v9 <= 0x18 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0)
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, void))(v6 + 48))(a2, 2LL, *(void *)(a3 + 16)))
    {
      if (v7 <= 1)
      {
        if (v8 <= 3)
        {
          unsigned int v19 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
          if (v19 > 0xFFFE)
          {
            uint64_t v18 = 4LL;
          }

          else
          {
            BOOL v20 = v19 != 0;
            BOOL v13 = v19 >= 0xFF;
            uint64_t v18 = 2LL;
            if (!v13) {
              uint64_t v18 = v20;
            }
          }
        }

        else
        {
          uint64_t v18 = 1LL;
        }

        v8 += v18;
      }

      memcpy(a1, a2, v8);
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0LL, 2LL, v5);
    }
  }

  else
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain(v17);
  }

  return a1;
}

uint64_t destroy for SportsPersonalizationSelection(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 2LL, v3);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return result;
}

void *initializeWithCopy for SportsPersonalizationSelection(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2LL, v5))
  {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        unsigned int v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          uint64_t v9 = 4LL;
        }

        else
        {
          BOOL v11 = v10 != 0;
          BOOL v12 = v10 >= 0xFF;
          uint64_t v9 = 2LL;
          if (!v12) {
            uint64_t v9 = v11;
          }
        }
      }

      else
      {
        uint64_t v9 = 1LL;
      }

      v8 += v9;
    }

    memcpy(a1, a2, v8);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0LL, 2LL, v5);
  }

  return a1;
}

void *assignWithCopy for SportsPersonalizationSelection(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 2LL, v5);
  int v9 = v7(a2, 2LL, v5);
  if (v8)
  {
    if (v9)
    {
      unsigned int v10 = *(_DWORD *)(v6 + 84);
      size_t v11 = *(void *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          uint64_t v12 = 1LL;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }

LABEL_9:
        unsigned int v13 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v13 > 0xFFFE)
        {
          uint64_t v12 = 4LL;
        }

        else
        {
          BOOL v14 = v13 != 0;
          BOOL v15 = v13 >= 0xFF;
          uint64_t v12 = 2LL;
          if (!v15) {
            uint64_t v12 = v14;
          }
        }

        goto LABEL_16;
      }

      goto LABEL_17;
    }

    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0LL, 2LL, v5);
  }

  else
  {
    if (v9)
    {
      (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
      unsigned int v10 = *(_DWORD *)(v6 + 84);
      size_t v11 = *(void *)(v6 + 64);
      if (v10 <= 1)
      {
        goto LABEL_9;
      }

        unsigned int v13 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v13 > 0xFFFE)
        {
          uint64_t v12 = 4LL;
        }

        else
        {
          BOOL v14 = v13 != 0;
          BOOL v15 = v13 >= 0xFF;
          uint64_t v12 = 2LL;
          if (!v15) {
            uint64_t v12 = v14;
          }
        }

        goto LABEL_16;
      }

      goto LABEL_17;
    }

    (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0LL, 2LL, v5);
  }

  else
  {
    if (v9)
    {
      (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
      unsigned int v10 = *(_DWORD *)(v6 + 84);
      size_t v11 = *(void *)(v6 + 64);
      if (v10 <= 1)
      {
        goto LABEL_9;
      }

void *initializeWithTake for SportsPersonalizationSelection(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2LL, v5))
  {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        unsigned int v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          uint64_t v9 = 4LL;
        }

        else
        {
          BOOL v11 = v10 != 0;
          BOOL v12 = v10 >= 0xFF;
          uint64_t v9 = 2LL;
          if (!v12) {
            uint64_t v9 = v11;
          }
        }
      }

      else
      {
        uint64_t v9 = 1LL;
      }

      v8 += v9;
    }

    memcpy(a1, a2, v8);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0LL, 2LL, v5);
  }

  return a1;
}

void *assignWithTake for SportsPersonalizationSelection(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 2LL, v5);
  int v9 = v7(a2, 2LL, v5);
  if (v8)
  {
    if (v9)
    {
      unsigned int v10 = *(_DWORD *)(v6 + 84);
      size_t v11 = *(void *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          uint64_t v12 = 1LL;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }

uint64_t getEnumTagSinglePayload for SportsPersonalizationSelection(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 2;
  uint64_t v7 = *(void *)(v4 + 64);
  if (v5 <= 1)
  {
    unsigned int v6 = 0;
    if (v7 <= 3)
    {
      unsigned int v9 = (~(-1 << (8 * v7)) - v5 + 2) >> (8 * v7);
      if (v9 > 0xFFFE)
      {
        uint64_t v8 = 4LL;
      }

      else
      {
        BOOL v10 = v9 != 0;
        BOOL v11 = v9 >= 0xFF;
        uint64_t v8 = 2LL;
        if (!v11) {
          uint64_t v8 = v10;
        }
      }
    }

    else
    {
      uint64_t v8 = 1LL;
    }

    v7 += v8;
  }

  if (!a2) {
    return 0LL;
  }
  int v12 = a2 - v6;
  if (a2 <= v6) {
    goto LABEL_29;
  }
  char v13 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v15 = ((v12 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)(a1 + v7);
      if (!v14) {
        goto LABEL_29;
      }
      goto LABEL_20;
    }

    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_29;
      }
      goto LABEL_20;
    }

    if (v15 < 2)
    {
LABEL_29:
      if (v6)
      {
        unsigned int v18 = (*(uint64_t (**)(void))(v4 + 48))();
        if (v18 >= 3) {
          return v18 - 2;
        }
        else {
          return 0LL;
        }
      }

      return 0LL;
    }
  }

  int v14 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_29;
  }
LABEL_20:
  int v16 = (v14 - 1) << v13;
  if ((_DWORD)v7)
  {
    else {
      int v17 = 4;
    }
    __asm { BR              X12 }
  }

  return v6 + v16 + 1;
}

void storeEnumTagSinglePayload for SportsPersonalizationSelection( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  unsigned int v8 = v7 - 2;
  size_t v9 = *(void *)(v6 + 64);
  if (v7 <= 1)
  {
    unsigned int v8 = 0;
    if (v9 <= 3)
    {
      unsigned int v11 = (~(-1 << (8 * v9)) - v7 + 2) >> (8 * v9);
      if (v11 > 0xFFFE)
      {
        uint64_t v10 = 4LL;
      }

      else
      {
        BOOL v12 = v11 != 0;
        BOOL v13 = v11 >= 0xFF;
        uint64_t v10 = 2LL;
        if (!v13) {
          uint64_t v10 = v12;
        }
      }
    }

    else
    {
      uint64_t v10 = 1LL;
    }

    v9 += v10;
  }

  BOOL v13 = a3 >= v8;
  unsigned int v14 = a3 - v8;
  if (v14 != 0 && v13)
  {
    if (v9 <= 3)
    {
      unsigned int v17 = ((v14 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v17))
      {
        unsigned int v15 = &dword_4;
      }

      else if (v17 >= 0x100)
      {
        unsigned int v15 = 2;
      }

      else
      {
        unsigned int v15 = v17 > 1;
      }
    }

    else
    {
      unsigned int v15 = &dword_0 + 1;
    }
  }

  else
  {
    unsigned int v15 = 0;
  }

  if (v8 < a2)
  {
    int v16 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        int v18 = v16 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v18;
          *((_BYTE *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = BYTE2(v18);
        }

        else if ((_DWORD)v9 == 2)
        {
          *a1 = v18;
        }

        else
        {
          *(_BYTE *)a1 = v18;
        }
      }
    }

    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v16;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t getEnumTag for SportsPersonalizationSelection(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8LL) + 48LL))(a1, 2LL);
}

uint64_t destructiveInjectEnumTag for SportsPersonalizationSelection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8LL) + 56LL))( a1,  a2,  2LL);
}

uint64_t type metadata accessor for SportsPersonalizationSelection( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for SportsPersonalizationSelection);
}

uint64_t Features.isEnabled.getter(char a1)
{
  void v4[3] = &type metadata for Features;
  v4[4] = lazy protocol witness table accessor for type Features and conformance Features();
  LOBYTE(v4[0]) = a1;
  char v2 = isFeatureEnabled(_:)(v4);
  __swift_destroy_boxed_opaque_existential_1(v4);
  return v2 & 1;
}

const char *Features.domain.getter(char a1)
{
  uint64_t v1 = "SiriInformation";
  if (a1 == 6) {
    uint64_t v1 = "Siri";
  }
  if (a1 == 5) {
    return "GenerativeAssistantTools";
  }
  else {
    return v1;
  }
}

uint64_t Features.feature.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_55F40 + 4 * byte_7E440[a1]))( "siri_suggestions",  16LL);
}

const char *sub_55F40()
{
  return "sports_personalization";
}

const char *sub_55F54()
{
  return "carplay_suggestions";
}

const char *sub_55F68()
{
  return "alternative_suggestions";
}

const char *sub_55F7C()
{
  return "alternative_suggestions_mac";
}

const char *sub_55F90()
{
  return "LowConfidenceKnowledgeRouting";
}

const char *sub_55FA4()
{
  return "siri_ifflow";
}

BOOL Features.isDisabled.getter(char a1)
{
  void v4[3] = &type metadata for Features;
  v4[4] = lazy protocol witness table accessor for type Features and conformance Features();
  LOBYTE(v4[0]) = a1;
  char v2 = isFeatureEnabled(_:)(v4);
  __swift_destroy_boxed_opaque_existential_1(v4);
  return (v2 & 1) == 0;
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance Features()
{
  int v1 = *v0;
  char v2 = "GenerativeAssistantTools";
  if (v1 != 5) {
    char v2 = "SiriInformation";
  }
  if (v1 == 6) {
    return "Siri";
  }
  else {
    return v2;
  }
}

uint64_t protocol witness for FeatureFlagsKey.feature.getter in conformance Features()
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_560C8 + 4 * byte_7E447[*v0]))( "siri_suggestions",  16LL);
}

const char *sub_560C8()
{
  return "sports_personalization";
}

const char *sub_560DC()
{
  return "carplay_suggestions";
}

const char *sub_560F0()
{
  return "alternative_suggestions";
}

const char *sub_56104()
{
  return "alternative_suggestions_mac";
}

const char *sub_56118()
{
  return "LowConfidenceKnowledgeRouting";
}

const char *sub_5612C()
{
  return "siri_ifflow";
}

uint64_t protocol witness for FeatureToggle.isEnabled.getter in conformance Features(uint64_t a1)
{
  char v2 = *v1;
  v5[3] = a1;
  v5[4] = lazy protocol witness table accessor for type Features and conformance Features();
  LOBYTE(v5[0]) = v2;
  char v3 = isFeatureEnabled(_:)(v5);
  __swift_destroy_boxed_opaque_existential_1(v5);
  return v3 & 1;
}

uint64_t getEnumTagSinglePayload for Features(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

uint64_t storeEnumTagSinglePayload for Features(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_56268 + 4 * byte_7E453[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_5629C + 4 * byte_7E44E[v4]))();
}

uint64_t sub_5629C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_562A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x562ACLL);
  }
  return result;
}

uint64_t sub_562B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x562C0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_562C4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_562CC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Features()
{
  return &type metadata for Features;
}

Swift::String *webSearchHandoffInvocationID.unsafeMutableAddressor()
{
  return &webSearchHandoffInvocationID;
}

void *static PegasusACEConverters.makeAppPunchOut(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeAppPunchOut(cmdBuilder:)( a1,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams,  (uint64_t)&enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.appPunchOut(_:),  (uint64_t (*)(char *))specialized static PegasusACEConverters.makeAppPunchOut(params:),  "Unexpected type for app punch out %s");
}

uint64_t closure #1 in static PegasusACEConverters.makeAppPunchOut(params:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v4 = __chkstk_darwin(v3);
  unsigned int v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.bundleID.getter(v4);
  unint64_t v9 = v8;
  uint64_t v10 = swift_bridgeObjectRelease(v8);
  uint64_t v11 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000LL) == 0) {
    uint64_t v11 = v7 & 0xFFFFFFFFFFFFLL;
  }
  if (v11) {
    return Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.bundleID.getter(v10);
  }
  outlined init with copy of IdentifiedUser?(a2, (uint64_t)v6, &demangling cache variable for type metadata for URL?);
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v6, 1LL, v13) == 1)
  {
    outlined destroy of Any?((uint64_t)v6, &demangling cache variable for type metadata for URL?);
  }

  else
  {
    uint64_t v15 = URL.scheme.getter();
    uint64_t v17 = v16;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v13);
    if (v17)
    {
      if (v15 == 0xD000000000000013LL && v17 == 0x8000000000081E70LL)
      {
        swift_bridgeObjectRelease(v17);
      }

      else
      {
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, 0xD000000000000013LL, 0x8000000000081E70LL, 0LL);
        swift_bridgeObjectRelease(v17);
        if ((v18 & 1) == 0) {
          return 0LL;
        }
      }

      return 0x6C7070612E6D6F63LL;
    }
  }

  return 0LL;
}

void *static PegasusACEConverters.makeShowLocalSearchResult(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeAppPunchOut(cmdBuilder:)( a1,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowLocalSearchResultBuilderParams,  (uint64_t)&enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.showLocalSearchResult(_:),  (uint64_t (*)(char *))specialized static PegasusACEConverters.makeShowLocalSearchResult(params:),  "Unexpected type for show local search result %s");
}

void *static PegasusACEConverters.makeShowMapPoints(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeAppPunchOut(cmdBuilder:)( a1,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams,  (uint64_t)&enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.showMapPoints(_:),  (uint64_t (*)(char *))specialized static PegasusACEConverters.makeShowMapPoints(params:),  "Unexpected type for show map points %s");
}

void *static PegasusACEConverters.makeStartRequest(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeStartRequest(cmdBuilder:)( a1,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_StartRequestBuilderParams,  &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.startRequest(_:),  (uint64_t (*)(char *))specialized static PegasusACEConverters.makeStartRequest(params:));
}

id static PegasusACEConverters.makeShowPlaceDetails(params:)()
{
  id v0 = [objc_allocWithZone(SALocalSearchShowPlaceDetails) init];
  [v0 setItemIndex:Apple_Parsec_Siri_V2alpha_ShowPlaceDetailsBuilderParams.itemIndex.getter()];
  return v0;
}

id static PegasusACEConverters.makeEndNavigation(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeEndNavigation(cmdBuilder:)( a1,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_NavigationEndBuilderParams,  &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.navigationEnd(_:),  (Class *)&OBJC_CLASS___SALocalSearchNavigationEnd_ptr);
}

id static PegasusACEConverters.makeEndNavigation(params:)()
{
  return [objc_allocWithZone(SALocalSearchNavigationEnd) init];
}

void *static PegasusACEConverters.makeSayIt(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeStartRequest(cmdBuilder:)( a1,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItBuilderParams,  &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.sayIt(_:),  (uint64_t (*)(char *))specialized static PegasusACEConverters.makeSayIt(params:));
}

void *static PegasusACEConverters.makeRecordLocationActivity(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeAppPunchOut(cmdBuilder:)( a1,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams,  (uint64_t)&enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.recordLocationActivity(_:),  (uint64_t (*)(char *))specialized static PegasusACEConverters.makeRecordLocationActivity(params:),  "Unexpected type for record location activity %s");
}

void *static PegasusACEConverters.makePhoneCall(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeStartRequest(cmdBuilder:)( a1,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams,  &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.phoneCall(_:),  (uint64_t (*)(char *))specialized static PegasusACEConverters.makePhoneCall(params:));
}

id static PegasusACEConverters.makeSwitchProfile(params:)(uint64_t a1)
{
  return static PegasusACEConverters.makeSwitchProfile(params:)( a1,  (Class *)&OBJC_CLASS___SAProfileSwitch_ptr,  (void (*)(void))&Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams.userID.getter,  (SEL *)&selRef_setSharedUserId_);
}

id static PegasusACEConverters.makeUnlockDevice(params:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeUnlockDevice(params:)( a1,  (Class *)&OBJC_CLASS___SAUIUnlockDevice_ptr,  (uint64_t (*)(void))&Apple_Parsec_Siri_V2alpha_UnlockDeviceBuilderParams.successCommands.getter,  (uint64_t (*)(void))&Apple_Parsec_Siri_V2alpha_UnlockDeviceBuilderParams.failureCommands.getter);
}

id static PegasusACEConverters.makeUnlockDeviceWithWatch(params:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeUnlockDevice(params:)( a1,  (Class *)&OBJC_CLASS___SAUIUnlockDeviceWithWatch_ptr,  (uint64_t (*)(void))&Apple_Parsec_Siri_V2alpha_UnlockDeviceWithWatchBuilderParams.successCommands.getter,  (uint64_t (*)(void))&Apple_Parsec_Siri_V2alpha_UnlockDeviceWithWatchBuilderParams.failureCommands.getter);
}

id static PegasusACEConverters.makeOpenLink(params:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v0);
  int v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v3 = [objc_allocWithZone(SAUIOpenLink) init];
  uint64_t v4 = Apple_Parsec_Siri_V2alpha_OpenLinkBuilderParams.ref.getter();
  uint64_t v6 = v5;
  URL.init(string:)(v4);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v2, 1LL, v7) != 1)
  {
    URL._bridgeToObjectiveC()(v9);
    uint64_t v10 = v11;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v2, v7);
  }

  [v3 setRef:v10];

  return v3;
}

id static PegasusACEConverters.makeSetSiriAuthorizationForApp(params:)(uint64_t a1)
{
  return static PegasusACEConverters.makeSwitchProfile(params:)( a1,  (Class *)&OBJC_CLASS___SASettingSetSiriAuthorizationForApp_ptr,  (void (*)(void))&Apple_Parsec_Siri_V2alpha_SetSiriAuthorizationForAppBuilderParams.appBundleID.getter,  (SEL *)&selRef_setBundleId_);
}

id static PegasusACEConverters.makeSwitchProfile(params:)(uint64_t a1, Class *a2, void (*a3)(void), SEL *a4)
{
  id v6 = [objc_allocWithZone(*a2) init];
  a3();
  uint64_t v8 = v7;
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  objc_msgSend(v6, *a4, v9);

  return v6;
}

id static PegasusACEConverters.makeExtendCurrentTTS(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeEndNavigation(cmdBuilder:)( a1,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_ExtendCurrentTTS,  &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.extendCurrentTts(_:),  (Class *)&OBJC_CLASS___SAUIExtendCurrentTTS_ptr);
}

id static PegasusACEConverters.makeExtendCurrentTTS(params:)(uint64_t a1)
{
  return static PegasusACEConverters.makeExtendCurrentTTS(params:)(a1, (Class *)&OBJC_CLASS___SAUIExtendCurrentTTS_ptr);
}

id static PegasusACEConverters.makeCancelCurrentTTS(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeEndNavigation(cmdBuilder:)( a1,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_CancelCurrentTTS,  &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.cancelCurrentTts(_:),  (Class *)&OBJC_CLASS___SAUICancelCurrentTTS_ptr);
}

id static PegasusACEConverters.makeCancelCurrentTTS(params:)(uint64_t a1)
{
  return static PegasusACEConverters.makeExtendCurrentTTS(params:)(a1, (Class *)&OBJC_CLASS___SAUICancelCurrentTTS_ptr);
}

id static PegasusACEConverters.makeExtendCurrentTTS(params:)(uint64_t a1, Class *a2)
{
  return [objc_allocWithZone(*a2) init];
}

id specialized static PegasusACEConverters.makeLocation(params:)()
{
  id v0 = [objc_allocWithZone(SALocation) init];
  Apple_Parsec_Siri_V2alpha_LocationBuilderParams.label.getter();
  uint64_t v2 = v1;
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  [v0 setLabel:v3];

  Apple_Parsec_Siri_V2alpha_LocationBuilderParams.street.getter();
  uint64_t v5 = v4;
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  [v0 setStreet:v6];

  Apple_Parsec_Siri_V2alpha_LocationBuilderParams.thoroughfare.getter();
  uint64_t v8 = v7;
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  [v0 setThoroughfare:v9];

  Apple_Parsec_Siri_V2alpha_LocationBuilderParams.subThoroughfare.getter();
  uint64_t v11 = v10;
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  [v0 setSubThoroughfare:v12];

  Apple_Parsec_Siri_V2alpha_LocationBuilderParams.city.getter();
  uint64_t v14 = v13;
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  [v0 setCity:v15];

  Apple_Parsec_Siri_V2alpha_LocationBuilderParams.stateCode.getter();
  uint64_t v17 = v16;
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  [v0 setStateCode:v18];

  Apple_Parsec_Siri_V2alpha_LocationBuilderParams.countryCode.getter();
  uint64_t v20 = v19;
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  [v0 setCountryCode:v21];

  Apple_Parsec_Siri_V2alpha_LocationBuilderParams.postalCode.getter();
  uint64_t v23 = v22;
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v23);
  [v0 setPostalCode:v24];

  float v25 = Apple_Parsec_Siri_V2alpha_LocationBuilderParams.latitude.getter();
  id v26 = objc_allocWithZone(&OBJC_CLASS___NSNumber);
  *(float *)&double v27 = v25;
  id v28 = [v26 initWithFloat:v27];
  [v0 setLatitude:v28];

  float v29 = Apple_Parsec_Siri_V2alpha_LocationBuilderParams.longitude.getter();
  id v30 = objc_allocWithZone(&OBJC_CLASS___NSNumber);
  *(float *)&double v31 = v29;
  id v32 = [v30 initWithFloat:v31];
  [v0 setLongitude:v32];

  Apple_Parsec_Siri_V2alpha_LocationBuilderParams.timezoneID.getter([v0 setRegionType:SARegionTypeAddressValue]);
  uint64_t v34 = v33;
  NSString v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v34);
  [v0 setTimezoneId:v35];

  return v0;
}

uint64_t specialized static PegasusACEConverters.makeDirectionsType(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.DirectionType(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  NSString v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  NSString v9 = (char *)&v39 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  NSString v12 = (char *)&v39 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v39 - v13;
  NSString v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v15((char *)&v39 - v13, a1, v2);
  int v16 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v14, v2);
  if (v16 == enum case for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.DirectionType.UNRECOGNIZED(_:)
    || v16 == enum case for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.DirectionType.unknown(_:))
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v18, (uint64_t)static Logger.information);
    uint64_t v19 = ((uint64_t (*)(char *, uint64_t, uint64_t))v15)(v12, a1, v2);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v23 = swift_slowAlloc(32LL, -1LL);
      uint64_t v42 = v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      uint64_t v40 = (uint64_t)(v22 + 4);
      v15(v9, (uint64_t)v12, v2);
      uint64_t v24 = String.init<A>(describing:)(v9, v2);
      unint64_t v26 = v25;
      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
      swift_bridgeObjectRelease(v26);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
      _os_log_impl(&dword_0, v20, v21, "Unknown or unrecognized direction type: %s", v22, 0xCu);
      swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1LL, -1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
    }

    return 0LL;
  }

  if (v16 != enum case for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.DirectionType.car(_:))
  {
    if (v16 == enum case for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.DirectionType.transit(_:))
    {
      double v27 = &SALocalSearchDirectionsTypeByPublicTransitValue;
      return static String._unconditionallyBridgeFromObjectiveC(_:)(*v27);
    }

    if (v16 == enum case for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.DirectionType.walking(_:))
    {
      double v27 = &SALocalSearchDirectionsTypeWalkingValue;
      return static String._unconditionallyBridgeFromObjectiveC(_:)(*v27);
    }

    if (v16 == enum case for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.DirectionType.cycling(_:))
    {
      double v27 = &SALocalSearchDirectionsTypeBikingValue;
      return static String._unconditionallyBridgeFromObjectiveC(_:)(*v27);
    }

    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v29 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v29, (uint64_t)static Logger.information);
    uint64_t v30 = ((uint64_t (*)(char *, uint64_t, uint64_t))v15)(v6, a1, v2);
    double v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v40 = swift_slowAlloc(32LL, -1LL);
      uint64_t v42 = v40;
      *(_DWORD *)uint64_t v33 = 136315138;
      uint64_t v39 = v33 + 4;
      v15(v9, (uint64_t)v6, v2);
      uint64_t v34 = String.init<A>(describing:)(v9, v2);
      unint64_t v36 = v35;
      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
      swift_bridgeObjectRelease(v36);
      uint64_t v37 = *(void (**)(char *, uint64_t))(v3 + 8);
      v37(v6, v2);
      _os_log_impl(&dword_0, v31, v32, "Unknown (future?) direction type: %s", v33, 0xCu);
      uint64_t v38 = v40;
      swift_arrayDestroy(v40, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    else
    {
      uint64_t v37 = *(void (**)(char *, uint64_t))(v3 + 8);
      v37(v6, v2);
    }

    v37(v14, v2);
    return 0LL;
  }

  double v27 = &SALocalSearchDirectionsTypeByCarValue;
  return static String._unconditionallyBridgeFromObjectiveC(_:)(*v27);
}

uint64_t specialized static PegasusACEConverters.makeMapItemType(detailType:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.DetailType(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.DetailType.UNRECOGNIZED(_:)
    || v6 == enum case for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.DetailType.unknown(_:))
  {
    goto LABEL_8;
  }

  if (v6 == enum case for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.DetailType.currentLocation(_:))
  {
    uint64_t v8 = &SALocalSearchMapItemMapItemTypeCURRENT_LOCATIONValue;
    return static String._unconditionallyBridgeFromObjectiveC(_:)(*v8);
  }

  if (v6 == enum case for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.DetailType.businessItem(_:))
  {
LABEL_8:
    uint64_t v8 = &SALocalSearchMapItemMapItemTypeBUSINESS_ITEMValue;
    return static String._unconditionallyBridgeFromObjectiveC(_:)(*v8);
  }

  if (v6 == enum case for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.DetailType.personItem(_:))
  {
    uint64_t v8 = &SALocalSearchMapItemMapItemTypePERSON_ITEMValue;
  }

  else if (v6 == enum case for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.DetailType.addressItem(_:))
  {
    uint64_t v8 = &SALocalSearchMapItemMapItemTypeADDRESS_ITEMValue;
  }

  else if (v6 == enum case for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.DetailType.homeItem(_:))
  {
    uint64_t v8 = &SALocalSearchMapItemMapItemTypeHOME_ITEMValue;
  }

  else
  {
    if (v6 != enum case for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.DetailType.parkingLocation(_:))
    {
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(SALocalSearchMapItemMapItemTypeBUSINESS_ITEMValue);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      return v9;
    }

    uint64_t v8 = &SALocalSearchMapItemMapItemTypePARKING_LOCATIONValue;
  }

  return static String._unconditionallyBridgeFromObjectiveC(_:)(*v8);
}

uint64_t specialized static PegasusACEConverters.makeDirectionRole(role:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.Role(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.Role.UNRECOGNIZED(_:)
    || v6 == enum case for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.Role.unknown(_:))
  {
    uint64_t v8 = &SALocalSearchMapItemDirectionRoleTOValue;
    return static String._unconditionallyBridgeFromObjectiveC(_:)(*v8);
  }

  int v9 = v6;
  if (v6 == enum case for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.Role.from(_:))
  {
    uint64_t v8 = &SALocalSearchMapItemDirectionRoleFROMValue;
    return static String._unconditionallyBridgeFromObjectiveC(_:)(*v8);
  }

  int v12 = enum case for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.Role.to(_:);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(SALocalSearchMapItemDirectionRoleTOValue);
  if (v9 != v12) {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return v10;
}

id specialized static PegasusACEConverters.makeActionableMapItem(params:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.Role(0LL);
  uint64_t v40 = *(void *)(v0 - 8);
  uint64_t v41 = v0;
  __chkstk_darwin(v0);
  uint64_t v39 = (char *)&v38 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationBuilderParams(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.DetailType(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  int v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v10 = [objc_allocWithZone(SALocalSearchActionableMapItem) init];
  Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.detailType.getter();
  specialized static PegasusACEConverters.makeMapItemType(detailType:)((uint64_t)v9);
  uint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  [v10 setDetailType:v13];

  id v14 = v10;
  Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.location.getter();
  id v15 = specialized static PegasusACEConverters.makeLocation(params:)();
  int v16 = *(void (**)(char *, uint64_t))(v3 + 8);
  v16(v5, v2);
  [v14 setLocation:v15];

  id v17 = v14;
  uint64_t v18 = Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.location.getter();
  Apple_Parsec_Siri_V2alpha_LocationBuilderParams.label.getter(v18);
  uint64_t v20 = v19;
  v16(v5, v2);
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  [v17 setLabel:v21];

  id v22 = v17;
  uint64_t v23 = Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.location.getter();
  Apple_Parsec_Siri_V2alpha_LocationBuilderParams.label.getter(v23);
  uint64_t v25 = v24;
  v16(v5, v2);
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v25);
  [v22 setSpokenName:v26];

  id v27 = v22;
  uint64_t v28 = Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.placeData.getter();
  unint64_t v30 = v29;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v28, v30);
  [v27 setPlaceData2:isa];

  id v32 = v27;
  uint64_t v33 = (uint64_t)v39;
  Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.directionRole.getter();
  specialized static PegasusACEConverters.makeDirectionRole(role:)(v33);
  uint64_t v35 = v34;
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v33, v41);
  NSString v36 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v35);
  [v32 setDirectionRole:v36];

  return v32;
}

id specialized static PegasusACEConverters.makeMapItemList(params:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v4 = [objc_allocWithZone(SALocalSearchMapItemList) init];
  id v5 = [objc_allocWithZone(NSNumber) initWithLongLong:Apple_Parsec_Siri_V2alpha_MapItemListBuilderParams.selectedItemIndex.getter()];
  [v4 setSelectedIndex:v5];

  id v6 = v4;
  uint64_t v7 = Apple_Parsec_Siri_V2alpha_MapItemListBuilderParams.domainObjects.getter();
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 + 16);
  if (v9)
  {
    id v23 = v6;
    uint64_t v24 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v9);
    unint64_t v10 = (*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
    uint64_t v22 = v8;
    unint64_t v11 = v8 + v10;
    uint64_t v12 = *(void *)(v1 + 72);
    NSString v13 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
    do
    {
      v13(v3, v11, v0);
      id v14 = specialized static PegasusACEConverters.makeActionableMapItem(params:)();
      uint64_t v15 = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
      uint64_t v16 = v24[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
      uint64_t v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v14);
      specialized ContiguousArray._endMutation()(v17);
      v11 += v12;
      --v9;
    }

    while (v9);
    uint64_t v18 = v24;
    swift_bridgeObjectRelease(v22);
    id v6 = v23;
  }

  else
  {
    swift_bridgeObjectRelease(v7);
    uint64_t v18 = _swiftEmptyArrayStorage;
  }

  type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SADomainObject,  &OBJC_CLASS___SADomainObject_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v18);
  [v6 setDomainObjects:isa];

  return v6;
}

id specialized static PegasusACEConverters.makeShowMapPoints(params:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemListBuilderParams(0LL);
  uint64_t v49 = *(void *)(v2 - 8);
  uint64_t v50 = v2;
  __chkstk_darwin(v2);
  uint64_t v48 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams(0LL);
  uint64_t v52 = *(void *)(v4 - 8);
  uint64_t v53 = v4;
  __chkstk_darwin(v4);
  uint64_t v51 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.DirectionType(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  NSString v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v14 = [objc_allocWithZone(SALocalSearchShowMapPoints) init];
  Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.language.getter();
  uint64_t v16 = v15;
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  [v14 setLanguage:v17];

  LOBYTE(v16) = ((uint64_t (*)(void))Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.hasItemSource.getter)();
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  if ((v16 & 1) != 0)
  {
    char v19 = Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.hasItemDestination.getter(v18);
    uint64_t v20 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    if ((v19 & 1) != 0)
    {
      id v21 = [v14 setShowDirections:Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.showDirections.getter(v20) & 1];
      Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.directionType.getter(v21);
      specialized static PegasusACEConverters.makeDirectionsType(_:)((uint64_t)v9);
      uint64_t v23 = v22;
      uint64_t v24 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if (v23)
      {
        NSString v25 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v23);
        [v14 setDirectionsType:v25];
      }

      NSString v26 = v51;
      Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.itemSource.getter(v24);
      id v27 = specialized static PegasusACEConverters.makeActionableMapItem(params:)();
      uint64_t v28 = v53;
      unint64_t v29 = *(void (**)(char *, uint64_t))(v52 + 8);
      v29(v26, v53);
      [v14 setItemSource:v27];

      Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.itemDestination.getter();
      id v30 = specialized static PegasusACEConverters.makeActionableMapItem(params:)();
      v29(v26, v28);
      [v14 setItemDestination:v30];

      id v31 = [objc_allocWithZone(SALocalSearchCarRouteOptions) init];
      id v32 = [v31 setAvoidTolls:Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.avoidTolls.getter() & 1];
      [v31 setAvoidHighways:Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.avoidHighways.getter(v32) & 1];
      [v14 setCarRouteOptions:v31];
    }
  }

  else
  {
    uint64_t v20 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  uint64_t v33 = Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.hasItemSource.getter(v20);
  if ((v33 & 1) != 0)
  {
    uint64_t v34 = v51;
    Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.itemSource.getter(v33);
    id v35 = specialized static PegasusACEConverters.makeActionableMapItem(params:)();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v34, v53);
    [v14 setItemSource:v35];

    id v36 = [v14 setShowTraffic:((uint64_t (*)(void))Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.showTraffic.getter)() & 1];
    id v37 = [v14 setSuppressNavigation:Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.shouldSuppressNavigation.getter(v36) & 1];
    id v38 = [v14 setSearchAlongRoute:Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.isSearchAlongRoute.getter(v37) & 1];
    id v39 = [v14 setChainResultSet:Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.isChainResultSet.getter(v38) & 1];
    id v40 = [objc_allocWithZone(NSNumber) initWithDouble:Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.regionOfInterestRadiusInMiles.getter(v39)];
    [v14 setRegionOfInterestRadiusInMiles:v40];
  }

  if ((Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.hasSearchItems.getter() & 1) != 0)
  {
    uint64_t v41 = v48;
    Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.searchItems.getter();
    id v42 = specialized static PegasusACEConverters.makeMapItemList(params:)();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v41, v50);
    [v14 setSearchItems:v42];

    [v14 setSearchAlongRoute:Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.isSearchAlongRoute.getter(v43) & 1];
    [v14 setItemSource:0];
    id v44 = objc_msgSend( v14,  "setSuppressNavigation:",  Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.shouldSuppressNavigation.getter(objc_msgSend(v14, "setItemDestination:", 0)) & 1);
    id v45 = [v14 setChainResultSet:Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.isChainResultSet.getter(v44) & 1];
    id v46 = [v14 setShowDirections:Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.showDirections.getter(v45) & 1];
    [v14 setShowTraffic:Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.showTraffic.getter(v46) & 1];
  }

  return v14;
}

id specialized static PegasusACEConverters.makeLocalSearchMapItem(params:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.Role(0LL);
  uint64_t v31 = *(void *)(v0 - 8);
  uint64_t v32 = v0;
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.DetailType(0LL);
  uint64_t v3 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationBuilderParams(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v10 = [objc_allocWithZone(SALocalSearchMapItem) init];
  Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.label.getter();
  uint64_t v12 = v11;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  [v10 setLabel:v13];

  Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.spokenName.getter();
  uint64_t v15 = v14;
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  [v10 setSpokenName:v16];

  Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.location.getter();
  id v17 = specialized static PegasusACEConverters.makeLocation(params:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  [v10 setLocation:v17];

  uint64_t v18 = Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.placeData.getter();
  unint64_t v20 = v19;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v18, v20);
  [v10 setPlaceData2:isa];

  Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.detailType.getter();
  specialized static PegasusACEConverters.makeMapItemType(detailType:)((uint64_t)v5);
  uint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v30);
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v23);
  [v10 setDetailType:v24];

  Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.directionRole.getter();
  specialized static PegasusACEConverters.makeDirectionRole(role:)((uint64_t)v2);
  uint64_t v26 = v25;
  (*(void (**)(char *, uint64_t))(v31 + 8))(v2, v32);
  NSString v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v26);
  [v10 setDirectionRole:v27];

  return v10;
}

id specialized static PegasusACEConverters.makeAppPunchOut(params:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v42 - v6;
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v12, (uint64_t)static Logger.information);
  uint64_t v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc(12LL, -1LL);
    uint64_t v44 = a1;
    id v17 = (uint8_t *)v16;
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    uint64_t v43 = v5;
    uint64_t v19 = v18;
    uint64_t v47 = v18;
    id v45 = v7;
    *(_DWORD *)id v17 = 136315138;
    uint64_t v20 = Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.punchOutUri.getter();
    unint64_t v22 = v21;
    uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v47);
    uint64_t v7 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47);
    swift_bridgeObjectRelease(v22);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    _os_log_impl(&dword_0, v14, v15, "PegasusViewFactory: makeAppPunchOut %s", v17, 0xCu);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v23 = v19;
    uint64_t v5 = v43;
    swift_slowDealloc(v23, -1LL, -1LL);
    NSString v24 = v17;
    a1 = v44;
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  id v25 = [objc_allocWithZone(SAUIAppPunchOut) init];
  uint64_t v26 = Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.punchOutUri.getter();
  uint64_t v28 = v27;
  URL.init(string:)(v26);
  swift_bridgeObjectRelease(v28);
  outlined init with copy of IdentifiedUser?( (uint64_t)v7,  (uint64_t)v5,  &demangling cache variable for type metadata for URL?);
  uint64_t v29 = type metadata accessor for URL(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v32 = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v5, 1LL, v29) != 1)
  {
    URL._bridgeToObjectiveC()(v31);
    uint64_t v32 = v33;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v5, v29);
  }

  [v25 setPunchOutUri:v32];

  Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.appDisplayName.getter(v34);
  uint64_t v36 = v35;
  NSString v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v36);
  [v25 setAppDisplayName:v37];

  closure #1 in static PegasusACEConverters.makeAppPunchOut(params:)(a1, (uint64_t)v7);
  if (v38)
  {
    uint64_t v39 = v38;
    NSString v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v39);
  }

  else
  {
    NSString v40 = 0LL;
  }

  [v25 setBundleId:v40];

  outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for URL?);
  return v25;
}

void *specialized static PegasusACEConverters.makeAppPunchOut(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeAppPunchOut(cmdBuilder:)( a1,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams,  (uint64_t)&enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.appPunchOut(_:),  (uint64_t (*)(char *))specialized static PegasusACEConverters.makeAppPunchOut(params:),  "Unexpected type for app punch out %s");
}

id specialized static PegasusACEConverters.makeShowLocalSearchResult(params:)(uint64_t a1)
{
  v45[1] = a1;
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v46 = *(void *)(v1 - 8);
  uint64_t v47 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v48 = (uint64_t)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v45 - v8;
  __chkstk_darwin(v7);
  uint64_t v49 = (uint64_t)v45 - v10;
  uint64_t v11 = type metadata accessor for Locale(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for TimeZone(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v19 = [objc_allocWithZone(NSDateFormatter) init];
  NSString v20 = String._bridgeToObjectiveC()();
  [v19 setDateFormat:v20];

  static TimeZone.current.getter();
  Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  [v19 setTimeZone:isa];

  static Locale.current.getter();
  Class v22 = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  [v19 setLocale:v22];

  Apple_Parsec_Siri_V2alpha_ShowLocalSearchResultBuilderParams.extSessionGuidCreatedTimestamp.getter();
  uint64_t v24 = v23;
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v24);
  id v26 = [v19 dateFromString:v25];

  if (v26)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v26);

    uint64_t v27 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v9, 0LL, 1LL, v27);
  }

  else
  {
    uint64_t v27 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v9, 1LL, 1LL, v27);
  }

  uint64_t v28 = v49;
  outlined init with take of Date?((uint64_t)v9, v49);
  id v29 = [objc_allocWithZone(SALocalSearchShowLocalSearchResult) init];
  uint64_t v30 = UUID.init()(v29);
  UUID.uuidString.getter(v30);
  uint64_t v32 = v31;
  (*(void (**)(char *, uint64_t))(v46 + 8))(v3, v47);
  NSString v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v32);
  [v29 setAceId:v33];

  uint64_t v34 = v48;
  outlined init with copy of IdentifiedUser?( v28,  v48,  (uint64_t *)&demangling cache variable for type metadata for Date?);
  type metadata accessor for Date(0LL);
  uint64_t v35 = *(void *)(v27 - 8);
  Class v36 = 0LL;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v34, 1LL, v27) != 1)
  {
    Class v36 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v27);
  }

  [v29 setExtSessionGuidCreatedTimestamp:v36];

  Apple_Parsec_Siri_V2alpha_ShowLocalSearchResultBuilderParams.extSessionGuid.getter();
  uint64_t v38 = v37;
  NSString v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v38);
  [v29 setExtSessionGuid:v39];

  uint64_t v40 = Apple_Parsec_Siri_V2alpha_ShowLocalSearchResultBuilderParams.placeData.getter();
  unint64_t v42 = v41;
  Class v43 = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v40, v42);
  [v29 setRawData:v43];

  outlined destroy of Any?(v28, (uint64_t *)&demangling cache variable for type metadata for Date?);
  return v29;
}

void *specialized static PegasusACEConverters.makeShowLocalSearchResult(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeAppPunchOut(cmdBuilder:)( a1,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowLocalSearchResultBuilderParams,  (uint64_t)&enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.showLocalSearchResult(_:),  (uint64_t (*)(char *))specialized static PegasusACEConverters.makeShowLocalSearchResult(params:),  "Unexpected type for show local search result %s");
}

void *specialized static PegasusACEConverters.makeAppPunchOut(cmdBuilder:)( uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t (*a4)(char *), const char *a5)
{
  uint64_t v48 = a5;
  uint64_t v49 = a3;
  uint64_t v46 = a4;
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v47 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v46 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = a2(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  NSString v20 = (char *)&v46 - v19;
  Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter(v18);
  uint64_t v21 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v15, 1LL, v21) == 1)
  {
    outlined destroy of Any?( (uint64_t)v15,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
LABEL_10:
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v33 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v33, (uint64_t)static Logger.information);
    uint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v35 = v34(v12, a1, v7);
    Class v36 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = swift_slowAlloc(12LL, -1LL);
      uint64_t v49 = v8;
      NSString v39 = (uint8_t *)v38;
      uint64_t v40 = swift_slowAlloc(32LL, -1LL);
      uint64_t v51 = v40;
      *(_DWORD *)NSString v39 = 136315138;
      unint64_t v41 = v47;
      v34(v47, (uint64_t)v12, v7);
      uint64_t v42 = String.init<A>(describing:)(v41, v7);
      unint64_t v44 = v43;
      uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);
      swift_bridgeObjectRelease(v44);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v12, v7);
      _os_log_impl(&dword_0, v36, v37, v48, v39, 0xCu);
      swift_arrayDestroy(v40, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1LL, -1LL);
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
    }

    return 0LL;
  }

  int v23 = (*(uint64_t (**)(char *, uint64_t))(v22 + 88))(v15, v21);
  if (v23 != *(_DWORD *)v49)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v15, v21);
    goto LABEL_10;
  }

  (*(void (**)(char *, uint64_t))(v22 + 96))(v15, v21);
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v20, v15, v16);
  uint64_t v24 = (void *)v46(v20);
  uint64_t v25 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
  unint64_t v27 = v26;
  swift_bridgeObjectRelease(v26);
  uint64_t v28 = HIBYTE(v27) & 0xF;
  if ((v27 & 0x2000000000000000LL) == 0) {
    uint64_t v28 = v25 & 0xFFFFFFFFFFFFLL;
  }
  if (v28)
  {
    id v29 = v24;
    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
    uint64_t v31 = v30;
    NSString v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v31);
    [v29 setAceId:v32];
  }

  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  return v24;
}

void *specialized static PegasusACEConverters.makeShowMapPoints(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeAppPunchOut(cmdBuilder:)( a1,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams,  (uint64_t)&enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.showMapPoints(_:),  (uint64_t (*)(char *))specialized static PegasusACEConverters.makeShowMapPoints(params:),  "Unexpected type for show map points %s");
}

uint64_t specialized static PegasusACEConverters.makeInputOrigin(from:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_InputOrigin(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.homeButton(_:))
  {
    uint64_t v7 = &SAInputOriginHomeButtonValue;
  }

  else if (v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.remoteButton(_:))
  {
    uint64_t v7 = &SAInputOriginRemoteButtonValue;
  }

  else if (v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.remoteAppButton(_:))
  {
    uint64_t v7 = &SAInputOriginRemoteAppButtonValue;
  }

  else if (v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.assistantSpeechButton(_:))
  {
    uint64_t v7 = &SAInputOriginAssistantSpeechButtonValue;
  }

  else if (v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.assistantTextInput(_:))
  {
    uint64_t v7 = &SAInputOriginAssistantTextInputValue;
  }

  else if (v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.priorRequest(_:))
  {
    uint64_t v7 = &SAInputOriginPriorRequestValue;
  }

  else
  {
    if (v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.voiceTrigger(_:)) {
      goto LABEL_14;
    }
    if (v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.serverGenerated(_:))
    {
      uint64_t v7 = &SAInputOriginServerGeneratedValue;
      return static String._unconditionallyBridgeFromObjectiveC(_:)(*v7);
    }

    if (v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.motionGesture(_:))
    {
      uint64_t v7 = &SAInputOriginMotionGestureValue;
      return static String._unconditionallyBridgeFromObjectiveC(_:)(*v7);
    }

    if (v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.raiseToSpeak(_:))
    {
      uint64_t v7 = &SAInputOriginRaiseToSpeakValue;
      return static String._unconditionallyBridgeFromObjectiveC(_:)(*v7);
    }

    if (v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.clientGenerated(_:))
    {
      uint64_t v7 = &SAInputOriginClientGeneratedValue;
      return static String._unconditionallyBridgeFromObjectiveC(_:)(*v7);
    }

    if (v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.tapToRefresh(_:))
    {
      uint64_t v7 = &SAInputOriginTapToRefreshValue;
      return static String._unconditionallyBridgeFromObjectiveC(_:)(*v7);
    }

    if (v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.backgroundRefresh(_:))
    {
      uint64_t v7 = &SAInputOriginBackgroundRefreshValue;
      return static String._unconditionallyBridgeFromObjectiveC(_:)(*v7);
    }

    if (v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.bluetoothVoiceTrigger(_:))
    {
LABEL_14:
      uint64_t v7 = &SAInputOriginBluetoothVoiceTriggerValue;
    }

    else if (v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.bluetoothDoubleTap(_:))
    {
      uint64_t v7 = &SAInputOriginBluetoothDoubleTapValue;
    }

    else if (v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.triggerlessFollowup(_:))
    {
      uint64_t v7 = &SAInputOriginTriggerlessFollowupValue;
    }

    else
    {
      if (v6 != enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.dialogButtonTap(_:))
      {
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        return 0LL;
      }

      uint64_t v7 = &SAInputOriginDialogButtonTapValue;
    }
  }

  return static String._unconditionallyBridgeFromObjectiveC(_:)(*v7);
}

id specialized static PegasusACEConverters.makeStartRequest(params:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_InputOrigin(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v4 = [objc_allocWithZone(SAStartRequest) init];
  id v5 = [v4 setEyesFree:Apple_Parsec_Siri_V2alpha_StartRequestBuilderParams.eyesFree.getter() & 1];
  Apple_Parsec_Siri_V2alpha_StartRequestBuilderParams.utterance.getter(v5);
  uint64_t v7 = v6;
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  [v4 setUtterance:v8];

  Apple_Parsec_Siri_V2alpha_StartRequestBuilderParams.inputOrigin.getter();
  specialized static PegasusACEConverters.makeInputOrigin(from:)((uint64_t)v3);
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v10)
  {
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v10);
    [v4 setInputOrigin:v11];
  }

  return v4;
}

void *specialized static PegasusACEConverters.makeStartRequest(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeStartRequest(cmdBuilder:)( a1,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_StartRequestBuilderParams,  &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.startRequest(_:),  (uint64_t (*)(char *))specialized static PegasusACEConverters.makeStartRequest(params:));
}

id specialized static PegasusACEConverters.makeShowPlaceDetails(cmdBuilder:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowPlaceDetailsBuilderParams(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter(v5);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v2, 1LL, v8) == 1)
  {
    outlined destroy of Any?( (uint64_t)v2,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
    return 0LL;
  }

  if ((*(unsigned int (**)(char *, uint64_t))(v9 + 88))(v2, v8) != enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.showPlaceDetails(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v2, v8);
    return 0LL;
  }

  (*(void (**)(char *, uint64_t))(v9 + 96))(v2, v8);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v2, v3);
  id v10 = [objc_allocWithZone(SALocalSearchShowPlaceDetails) init];
  id v11 = [v10 setItemIndex:Apple_Parsec_Siri_V2alpha_ShowPlaceDetailsBuilderParams.itemIndex.getter()];
  uint64_t v12 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter(v11);
  unint64_t v14 = v13;
  swift_bridgeObjectRelease(v13);
  uint64_t v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000LL) == 0) {
    uint64_t v15 = v12 & 0xFFFFFFFFFFFFLL;
  }
  if (v15)
  {
    id v16 = v10;
    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter(v16);
    uint64_t v18 = v17;
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v18);
    [v16 setAceId:v19];
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v10;
}

id specialized static PegasusACEConverters.makeEndNavigation(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeEndNavigation(cmdBuilder:)( a1,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_NavigationEndBuilderParams,  &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.navigationEnd(_:),  (Class *)&OBJC_CLASS___SALocalSearchNavigationEnd_ptr);
}

id specialized static PegasusACEConverters.makeAudioDescription(audioDescription:)()
{
  id v0 = [objc_allocWithZone(SAUIAudioDescription) init];
  id v1 = [objc_allocWithZone(NSNumber) initWithLongLong:Apple_Parsec_Siri_V2alpha_AudioDescription.bitsPerChannel.getter()];
  [v0 setBitsPerChannel:v1];

  id v2 = [objc_allocWithZone(NSNumber) initWithLongLong:Apple_Parsec_Siri_V2alpha_AudioDescription.bytesPerFrame.getter()];
  [v0 setBytesPerFrame:v2];

  id v3 = [objc_allocWithZone(NSNumber) initWithLongLong:Apple_Parsec_Siri_V2alpha_AudioDescription.bytesPerPacket.getter()];
  [v0 setBytesPerPacket:v3];

  id v4 = [objc_allocWithZone(NSNumber) initWithLongLong:Apple_Parsec_Siri_V2alpha_AudioDescription.channelsPerFrame.getter()];
  [v0 setChannelsPerFrame:v4];

  type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioDescription(0LL);
  lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioDescription and conformance Apple_Parsec_Siri_V2alpha_AudioDescription,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioDescription,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_AudioDescription);
  object = Message.textFormatString()()._object;
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  [v0 setFormat:v6];

  id v7 = [objc_allocWithZone(NSNumber) initWithLongLong:Apple_Parsec_Siri_V2alpha_AudioDescription.formatFlags.getter()];
  [v0 setFormatFlags:v7];

  id v8 = [objc_allocWithZone(NSNumber) initWithLongLong:Apple_Parsec_Siri_V2alpha_AudioDescription.formatID.getter()];
  [v0 setFormatID:v8];

  id v9 = [objc_allocWithZone(NSNumber) initWithLongLong:Apple_Parsec_Siri_V2alpha_AudioDescription.framesPerPacket.getter()];
  [v0 setFramesPerPacket:v9];

  id v10 = [objc_allocWithZone(NSNumber) initWithLongLong:Apple_Parsec_Siri_V2alpha_AudioDescription.reserved.getter()];
  [v0 setReserved:v10];

  id v11 = [objc_allocWithZone(NSNumber) initWithDouble:Apple_Parsec_Siri_V2alpha_AudioDescription.sampleRate.getter()];
  [v0 setSampleRate:v11];

  return v0;
}

id specialized static PegasusACEConverters.makeAudioData(audioData:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioDescription(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v4 = [objc_allocWithZone(SAUIAudioData) init];
  uint64_t v5 = Apple_Parsec_Siri_V2alpha_AudioData.audioBuffer.getter();
  unint64_t v7 = v6;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v5, v7);
  [v4 setAudioBuffer:isa];

  if ((Apple_Parsec_Siri_V2alpha_AudioData.hasDecoderStreamDescription.getter() & 1) != 0)
  {
    Apple_Parsec_Siri_V2alpha_AudioData.decoderStreamDescription.getter();
    id v9 = specialized static PegasusACEConverters.makeAudioDescription(audioDescription:)();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    [v4 setDecoderStreamDescription:v9];
  }

  if ((Apple_Parsec_Siri_V2alpha_AudioData.hasPlayerStreamDescription.getter() & 1) != 0)
  {
    Apple_Parsec_Siri_V2alpha_AudioData.playerStreamDescription.getter();
    id v10 = specialized static PegasusACEConverters.makeAudioDescription(audioDescription:)();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    [v4 setPlayerStreamDescription:v10];
  }

  return v4;
}

id specialized static PegasusACEConverters.makeSayIt(params:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioData(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v4 = [objc_allocWithZone(SAUISayIt) init];
  Apple_Parsec_Siri_V2alpha_SayItBuilderParams.message.getter();
  uint64_t v6 = v5;
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  [v4 setMessage:v7];

  Apple_Parsec_Siri_V2alpha_SayItBuilderParams.dialogIdentifier.getter();
  uint64_t v9 = v8;
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  [v4 setDialogIdentifier:v10];

  id v11 = [objc_allocWithZone(NSNumber) initWithBool:Apple_Parsec_Siri_V2alpha_SayItBuilderParams.hasListenAfterSpeaking_p.getter() & 1];
  [v4 setListenAfterSpeaking:v11];

  id v12 = [v4 setRepeatable:Apple_Parsec_Siri_V2alpha_SayItBuilderParams.isRepeatable.getter() & 1];
  Apple_Parsec_Siri_V2alpha_SayItBuilderParams.audioDataURL.getter(v12);
  uint64_t v14 = v13;
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  [v4 setAudioDataUrl:v15];

  if (Apple_Parsec_Siri_V2alpha_SayItBuilderParams.hasAudioData.getter([v4 setCanUseServerTTS:1]))
  {
    Apple_Parsec_Siri_V2alpha_SayItBuilderParams.audioData.getter();
    id v16 = specialized static PegasusACEConverters.makeAudioData(audioData:)();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    [v4 setAudioData:v16];
  }

  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v4 setCoordinationOptions:isa];

  return v4;
}

void *specialized static PegasusACEConverters.makeSayIt(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeStartRequest(cmdBuilder:)( a1,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItBuilderParams,  &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.sayIt(_:),  (uint64_t (*)(char *))specialized static PegasusACEConverters.makeSayIt(params:));
}

void *specialized static PegasusACEConverters.makeStartRequest(cmdBuilder:)( uint64_t a1, uint64_t (*a2)(void), _DWORD *a3, uint64_t (*a4)(char *))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a2(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v27 - v13;
  Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter(v12);
  uint64_t v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v9, 1LL, v15) == 1)
  {
    outlined destroy of Any?( (uint64_t)v9,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
    return 0LL;
  }

  if ((*(unsigned int (**)(char *, uint64_t))(v16 + 88))(v9, v15) != *a3)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v15);
    return 0LL;
  }

  (*(void (**)(char *, uint64_t))(v16 + 96))(v9, v15);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v9, v10);
  uint64_t v17 = (void *)a4(v14);
  uint64_t v18 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
  unint64_t v20 = v19;
  swift_bridgeObjectRelease(v19);
  uint64_t v21 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000LL) == 0) {
    uint64_t v21 = v18 & 0xFFFFFFFFFFFFLL;
  }
  if (v21)
  {
    id v22 = v17;
    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
    uint64_t v24 = v23;
    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v24);
    [v22 setAceId:v25];
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return v17;
}

id specialized static PegasusACEConverters.makePushOff(params:)()
{
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static Logger.information);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "PegasusACEConverters: In makePushOff static function helper", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  id v97 = [objc_allocWithZone(SAInitiateHandoffOnCompanion) init];
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v97);
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_0, v5, v6, "PegasusACEConverters: Setting up success callback", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  id v100 = [objc_allocWithZone(SAResultCallback) init];
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v100);
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_0, v8, v9, "PegasusACEConverters: successCallback initialized", v10, 2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  [v100 setCode:SAResultCallbackAnySuccessCodeValue];
  id v11 = [objc_allocWithZone(SAUIAddViews) init];
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_0, v12, v13, "PegasusACEConverters: successView initialized", v14, 2u);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  uint64_t v15 = SAUIDialogPhaseSummaryValue;
  [v11 setDialogPhase:SAUIDialogPhaseSummaryValue];
  id v16 = [objc_allocWithZone(SAUIAssistantUtteranceView) init];
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    unint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v19 = 0;
    _os_log_impl(&dword_0, v17, v18, "PegasusACEConverters: successAssistantView initialized", v19, 2u);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  Apple_Parsec_Siri_V2alpha_PushOffBuilderParams.pushOffMessage.getter();
  uint64_t v21 = v20;
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v21);
  [v16 setText:v22];

  id v23 = v16;
  Apple_Parsec_Siri_V2alpha_PushOffBuilderParams.pushOffMessage.getter();
  uint64_t v25 = v24;
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v25);
  [v23 setSpeakableText:v26];

  Apple_Parsec_Siri_V2alpha_PushOffBuilderParams.pushOffMessageCatID.getter();
  uint64_t v28 = v27;
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v28);
  [v23 setDialogIdentifier:v29];

  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v31 = swift_allocObject(v30, 40LL, 7LL);
  *(_OWORD *)(v31 + 16) = xmmword_7D060;
  *(void *)(v31 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v23;
  v102[0] = v31;
  specialized Array._endMutation()(v31);
  type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for SAAceView,  &OBJC_CLASS___SAAceView_ptr);
  uint64_t v96 = (os_log_s *)v23;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v102[0]);
  [v11 setViews:isa];

  uint64_t v33 = swift_allocObject(v30, 40LL, 7LL);
  *(_OWORD *)(v33 + 16) = xmmword_7D060;
  *(void *)(v33 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v11;
  v102[0] = v33;
  specialized Array._endMutation()(v33);
  id v95 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class v34 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v102[0]);
  [v100 setCommands:v34];

  Class v36 = (os_log_s *)Logger.logObject.getter(v35);
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v38 = 0;
    _os_log_impl(&dword_0, v36, v37, "PegasusACEConverters: Setting up failure callback", v38, 2u);
    swift_slowDealloc(v38, -1LL, -1LL);
  }

  id v39 = [objc_allocWithZone(SAResultCallback) init];
  [v39 setCode:SAResultCallbackAnyErrorCodeValue];
  id v40 = [objc_allocWithZone(SAUIAddViews) init];
  [v40 setDialogPhase:v15];
  id v41 = [objc_allocWithZone(SAUIAssistantUtteranceView) init];
  Apple_Parsec_Siri_V2alpha_PushOffBuilderParams.companionUnavailableMessage.getter();
  uint64_t v43 = v42;
  NSString v44 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v43);
  [v41 setText:v44];

  id v45 = v41;
  Apple_Parsec_Siri_V2alpha_PushOffBuilderParams.companionUnavailableMessage.getter();
  uint64_t v47 = v46;
  NSString v48 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v47);
  [v45 setSpeakableText:v48];

  Apple_Parsec_Siri_V2alpha_PushOffBuilderParams.companionUnavailableMessageCatID.getter();
  uint64_t v50 = v49;
  NSString v51 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v50);
  [v45 setDialogIdentifier:v51];

  uint64_t v52 = swift_allocObject(v30, 40LL, 7LL);
  *(_OWORD *)(v52 + 16) = xmmword_7D060;
  *(void *)(v52 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v45;
  v102[0] = v52;
  specialized Array._endMutation()(v52);
  uint64_t v94 = (os_log_s *)v45;
  Class v53 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v102[0]);
  [v40 setViews:v53];

  uint64_t v54 = swift_allocObject(v30, 40LL, 7LL);
  *(_OWORD *)(v54 + 16) = xmmword_7D060;
  *(void *)(v54 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v40;
  v102[0] = v54;
  specialized Array._endMutation()(v54);
  id v99 = v40;
  Class v55 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v102[0]);
  [v39 setCommands:v55];

  uint64_t v57 = (os_log_s *)Logger.logObject.getter(v56);
  os_log_type_t v58 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v57, v58))
  {
    os_log_type_t v59 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v59 = 0;
    _os_log_impl(&dword_0, v57, v58, "PegasusACEConverters: Setting callbacks", v59, 2u);
    swift_slowDealloc(v59, -1LL, -1LL);
  }

  uint64_t v60 = swift_allocObject(v30, 48LL, 7LL);
  *(_OWORD *)(v60 + 16) = xmmword_7E540;
  *(void *)(v60 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v39;
  *(void *)(v60 + 40) = v100;
  v102[0] = v60;
  specialized Array._endMutation()(v60);
  type metadata accessor for SABaseCommand( 0LL,  (unint64_t *)&lazy cache variable for type metadata for SAResultCallback,  &OBJC_CLASS___SAResultCallback_ptr);
  id v61 = v97;
  id v98 = v39;
  id v101 = v100;
  Class v62 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v102[0]);
  [v61 setCallbacks:v62];

  id v63 = objc_allocWithZone(&OBJC_CLASS___SKIDirectInvocationPayload);
  NSString v64 = String._bridgeToObjectiveC()();
  id v65 = [v63 initWithIdentifier:v64];

  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  uint64_t inited = swift_initStackObject(v66, v103);
  *(_OWORD *)(inited + 16) = xmmword_7CCD0;
  v102[0] = 0x7972657571LL;
  v102[1] = 0xE500000000000000LL;
  uint64_t v68 = AnyHashable.init<A>(_:)(v102, &type metadata for String, &protocol witness table for String);
  uint64_t v69 = Apple_Parsec_Siri_V2alpha_PushOffBuilderParams.query.getter(v68);
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v69;
  *(void *)(inited + 80) = v70;
  unint64_t v71 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  Class v72 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v71);
  [v65 setUserData:v72];

  uint64_t v73 = (void *)objc_opt_self(&OBJC_CLASS___SKIDirectInvocation);
  id v74 = [objc_allocWithZone(SKIDirectInvocationContext) init];
  id v75 = [v73 runSiriKitExecutorCommandWithContext:v74 payload:v65];

  uint64_t v76 = (os_log_s *)[objc_allocWithZone(NSKeyedArchiver) initRequiringSecureCoding:1];
  -[os_log_s encodeObject:forKey:](v76, "encodeObject:forKey:", v75, NSKeyedArchiveRootObjectKey);
  id v77 = [objc_allocWithZone(SASessionHandoffPayload) init];
  id v78 = -[os_log_s encodedData](v76, "encodedData");
  uint64_t v79 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v81 = v80;

  Class v82 = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v79, v81);
  [v77 setSessionHandoffData:v82];

  [v61 setHandoffPayload:v77];
  type metadata accessor for SABaseCommand( 0LL,  &lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
  Class v83 = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  [v61 setIsSiriXRequest:v83];

  uint64_t v85 = (os_log_s *)Logger.logObject.getter(v84);
  os_log_type_t v86 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v85, v86))
  {
    uint64_t v87 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v87 = 0;
    _os_log_impl(&dword_0, v85, v86, "PegasusACEConverters: returning from makePushOff helper", v87, 2u);
    swift_slowDealloc(v87, -1LL, -1LL);
    uint64_t v89 = v95;
    uint64_t v88 = v96;
    os_log_t v90 = v94;
    int v91 = v98;
    uint64_t v92 = v99;
  }

  else
  {
    uint64_t v88 = v85;
    uint64_t v89 = v65;
    os_log_t v90 = v76;
    uint64_t v92 = v77;
    int v91 = v75;
    id v75 = v98;
    id v77 = v99;
    uint64_t v85 = v94;
    id v65 = v95;
    uint64_t v76 = v96;
  }

  return v61;
}

void specialized static PegasusACEConverters.makePushOff(cmdBuilder:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder(0LL);
  os_log_type_t v3 = *(char **)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v69 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v65 - v6;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v67 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v66 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PushOffBuilderParams(0LL);
  uint64_t v68 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v70 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v65 = v8;
  uint64_t v15 = __swift_project_value_buffer(v8, (uint64_t)static Logger.information);
  id v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    os_log_type_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v18 = 0;
    _os_log_impl(&dword_0, v16, v17, "PegasusACEConverters: In makePushOff static function", v18, 2u);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter(v19);
  uint64_t v20 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v12, 1LL, v20) == 1)
  {
    outlined destroy of Any?( (uint64_t)v12,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  }

  else
  {
    if ((*(unsigned int (**)(char *, uint64_t))(v21 + 88))(v12, v20) == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.pushOff(_:))
    {
      (*(void (**)(char *, uint64_t))(v21 + 96))(v12, v20);
      uint64_t v22 = v68;
      id v23 = (char *)v13;
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v70, v12, v13);
      id v24 = specialized static PegasusACEConverters.makePushOff(params:)();
      uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
      os_log_type_t v26 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v27 = 0;
        _os_log_impl(&dword_0, v25, v26, "PegasusACEConverters: Was able to get pushOff object from helper", v27, 2u);
        swift_slowDealloc(v27, -1LL, -1LL);
      }

      uint64_t v28 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
      unint64_t v30 = v29;
      uint64_t v31 = swift_bridgeObjectRelease(v29);
      uint64_t v32 = HIBYTE(v30) & 0xF;
      if ((v30 & 0x2000000000000000LL) == 0) {
        uint64_t v32 = v28 & 0xFFFFFFFFFFFFLL;
      }
      if (v32)
      {
        id v33 = v24;
        Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
        uint64_t v35 = v34;
        NSString v36 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v35);
        [v33 setAceId:v36];

        uint64_t v37 = v67;
        uint64_t v38 = v66;
        uint64_t v39 = v65;
        (*(void (**)(void))(v67 + 16))();
        id v40 = v33;
        id v41 = (os_log_s *)Logger.logObject.getter(v40);
        os_log_type_t v42 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v41, v42))
        {
          uint64_t v69 = v23;
          uint64_t v43 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v44 = swift_slowAlloc(32LL, -1LL);
          uint64_t v72 = v44;
          *(_DWORD *)uint64_t v43 = 136315138;
          id v45 = [v40 aceId];
          if (v45)
          {
            uint64_t v46 = v45;
            uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
            unint64_t v49 = v48;

            uint64_t v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v49, &v72);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);

            swift_bridgeObjectRelease(v49);
            _os_log_impl(&dword_0, v41, v42, "PegasusACEConverters: pushOff aceID %s", v43, 0xCu);
            swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v44, -1LL, -1LL);
            swift_slowDealloc(v43, -1LL, -1LL);

            (*(void (**)(char *, uint64_t))(v67 + 8))(v66, v65);
            (*(void (**)(char *, char *))(v68 + 8))(v70, v69);
          }

          else
          {

            __break(1u);
          }

          return;
        }

        (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v39);
      }

      else
      {
        Class v62 = (os_log_s *)Logger.logObject.getter(v31);
        os_log_type_t v63 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v62, v63))
        {
          NSString v64 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)NSString v64 = 0;
          _os_log_impl( &dword_0,  v62,  v63,  "PegasusACEConverters: Was unable to get aceID from SiriCommandBuilder",  v64,  2u);
          swift_slowDealloc(v64, -1LL, -1LL);
        }
      }

      (*(void (**)(char *, char *))(v22 + 8))(v70, v23);
      return;
    }

    (*(void (**)(char *, uint64_t))(v21 + 8))(v12, v20);
  }

  uint64_t v50 = v3;
  NSString v51 = (uint64_t (*)(char *, uint64_t, uint64_t))*((void *)v3 + 2);
  uint64_t v52 = v51(v7, a1, v2);
  Class v53 = (os_log_s *)Logger.logObject.getter(v52);
  os_log_type_t v54 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v53, v54))
  {
    Class v55 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v56 = swift_slowAlloc(32LL, -1LL);
    uint64_t v70 = v50;
    uint64_t v57 = v56;
    uint64_t v72 = v56;
    *(_DWORD *)Class v55 = 136315138;
    os_log_type_t v58 = v69;
    v51(v69, (uint64_t)v7, v2);
    uint64_t v59 = String.init<A>(describing:)(v58, v2);
    unint64_t v61 = v60;
    uint64_t v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
    swift_bridgeObjectRelease(v61);
    (*((void (**)(char *, uint64_t))v70 + 1))(v7, v2);
    _os_log_impl(&dword_0, v53, v54, "PegasusACEConverters: Unexpected type for app punch out %s", v55, 0xCu);
    swift_arrayDestroy(v57, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1LL, -1LL);
    swift_slowDealloc(v55, -1LL, -1LL);
  }

  else
  {
    (*((void (**)(char *, uint64_t))v50 + 1))(v7, v2);
  }
}

id specialized static PegasusACEConverters.makeRecordLocationActivity(params:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams.SourceType(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v17 - v5;
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationBuilderParams(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v11 = [objc_allocWithZone(SARecordLocationActivity) init];
  Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams.location.getter();
  id v12 = specialized static PegasusACEConverters.makeLocation(params:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  [v11 setLocation:v12];

  Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams.sourceType.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v4,  enum case for Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams.SourceType.default(_:),  v0);
  uint64_t v13 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams.SourceType and conformance Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams.SourceType,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams.SourceType,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams.SourceType);
  dispatch thunk of RawRepresentable.rawValue.getter(&v18, v0, v13);
  dispatch thunk of RawRepresentable.rawValue.getter(&v17, v0, v13);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v1 + 8);
  v14(v4, v0);
  v14(v6, v0);
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xE700000000000000LL);
  [v11 setSourceType:v15];

  return v11;
}

void *specialized static PegasusACEConverters.makeRecordLocationActivity(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeAppPunchOut(cmdBuilder:)( a1,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams,  (uint64_t)&enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.recordLocationActivity(_:),  (uint64_t (*)(char *))specialized static PegasusACEConverters.makeRecordLocationActivity(params:),  "Unexpected type for record location activity %s");
}

id specialized static PegasusACEConverters.makePhoneCall(params:)()
{
  id v0 = [objc_allocWithZone(SAPhone) init];
  ((void (*)(void))Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams.phoneNumber.getter)();
  uint64_t v2 = v1;
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  [v0 setNumber:v3];

  Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams.name.getter();
  uint64_t v5 = v4;
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  [v0 setLabel:v6];

  id v7 = [objc_allocWithZone(SAPersonAttribute) init];
  NSString v8 = String._bridgeToObjectiveC()();
  [v7 setDataType:v8];

  Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams.phoneNumber.getter([v7 setTypedData:v0]);
  uint64_t v10 = v9;
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  [v7 setData:v11];

  Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams.name.getter();
  uint64_t v13 = v12;
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  [v7 setDisplayText:v14];

  id v15 = [objc_allocWithZone(SAPhoneCall) init];
  [v15 setCallRecipient:v7];

  return v15;
}

void *specialized static PegasusACEConverters.makePhoneCall(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeStartRequest(cmdBuilder:)( a1,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams,  &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.phoneCall(_:),  (uint64_t (*)(char *))specialized static PegasusACEConverters.makePhoneCall(params:));
}

id specialized static PegasusACEConverters.makeSwitchProfile(cmdBuilder:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  id v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter(v5);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v2, 1LL, v8) == 1)
  {
    outlined destroy of Any?( (uint64_t)v2,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
    return 0LL;
  }

  if ((*(unsigned int (**)(char *, uint64_t))(v9 + 88))(v2, v8) != enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.switchProfile(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v2, v8);
    return 0LL;
  }

  (*(void (**)(char *, uint64_t))(v9 + 96))(v2, v8);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v2, v3);
  id v10 = [objc_allocWithZone(SAProfileSwitch) init];
  Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams.userID.getter();
  uint64_t v12 = v11;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  [v10 setSharedUserId:v13];

  uint64_t v14 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
  unint64_t v16 = v15;
  swift_bridgeObjectRelease(v15);
  uint64_t v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000LL) == 0) {
    uint64_t v17 = v14 & 0xFFFFFFFFFFFFLL;
  }
  if (v17)
  {
    id v18 = v10;
    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
    uint64_t v20 = v19;
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
    [v18 setAceId:v21];
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v10;
}

id specialized static PegasusACEConverters.makeUnlockDevice(cmdBuilder:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_UnlockDeviceBuilderParams(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  id v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter(v5);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v2, 1LL, v8) == 1)
  {
    outlined destroy of Any?( (uint64_t)v2,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
    return 0LL;
  }

  if ((*(unsigned int (**)(char *, uint64_t))(v9 + 88))(v2, v8) != enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.unlockDevice(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v2, v8);
    return 0LL;
  }

  (*(void (**)(char *, uint64_t))(v9 + 96))(v2, v8);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v2, v3);
  id v10 = specialized static PegasusACEConverters.makeUnlockDevice(params:)( (uint64_t)v7,  (Class *)&OBJC_CLASS___SAUIUnlockDevice_ptr,  (uint64_t (*)(void))&Apple_Parsec_Siri_V2alpha_UnlockDeviceBuilderParams.successCommands.getter,  (uint64_t (*)(void))&Apple_Parsec_Siri_V2alpha_UnlockDeviceBuilderParams.failureCommands.getter);
  uint64_t v11 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
  unint64_t v13 = v12;
  swift_bridgeObjectRelease(v12);
  uint64_t v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000LL) == 0) {
    uint64_t v14 = v11 & 0xFFFFFFFFFFFFLL;
  }
  if (v14)
  {
    id v15 = v10;
    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
    uint64_t v17 = v16;
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v17);
    [v15 setAceId:v18];
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v10;
}

id specialized static PegasusACEConverters.makeUnlockDevice(params:)( uint64_t a1, Class *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v12 = (char *)v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v68 - v13;
  id v70 = [objc_allocWithZone(*a2) init];
  uint64_t v15 = a3();
  uint64_t v16 = v15;
  uint64_t v17 = _swiftEmptyArrayStorage;
  unint64_t v79 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v18 = *(void *)(v15 + 16);
  uint64_t v73 = v9;
  if (v18)
  {
    v68[1] = a1;
    uint64_t v69 = a4;
    unint64_t v19 = v15 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    *(void *)&__int128 v72 = *(void *)(v9 + 72);
    uint64_t v20 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v9 + 16);
    v68[0] = v15;
    swift_bridgeObjectRetain(v15);
    __int128 v71 = xmmword_7D060;
    while (1)
    {
      uint64_t v21 = v20(v14, v19, v8);
      uint64_t v22 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter(v21);
      if (v22)
      {
        uint64_t v23 = (void *)v22;
        id v75 = &OBJC_PROTOCOL___SAClientBoundCommand;
        id v24 = (id)swift_dynamicCastObjCProtocolConditional(v22, 1LL, &v75);
        if (v24) {
          goto LABEL_10;
        }
        id v74 = &OBJC_PROTOCOL___SAServerBoundCommand;
        uint64_t v25 = swift_dynamicCastObjCProtocolConditional(v23, 1LL, &v74);
        if (v25)
        {
          uint64_t v26 = v25;
          id v27 = objc_allocWithZone(&OBJC_CLASS___SASendCommands);
          id v28 = v23;
          id v24 = [v27 init];
          uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v30 = swift_allocObject(v29, 40LL, 7LL);
          *(_OWORD *)(v30 + 16) = v71;
          *(void *)(v30 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v26;
          uint64_t v76 = v30;
          specialized Array._endMutation()(v30);
          uint64_t v31 = v76;
          id v32 = v28;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAServerBoundCommand);
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v31);
          [v24 setCommands:isa];

          uint64_t v9 = v73;
LABEL_10:
          uint64_t v34 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v34);
          unint64_t v36 = *(void *)((char *)&dword_10 + (v79 & 0xFFFFFFFFFFFFFF8LL));
          unint64_t v35 = *(void *)((char *)&dword_18 + (v79 & 0xFFFFFFFFFFFFFF8LL));
          if (v36 >= v35 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1LL);
          }
          uint64_t v37 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v24);
          specialized Array._endMutation()(v37);
          goto LABEL_5;
        }
      }

      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
LABEL_5:
      v19 += v72;
      if (!--v18)
      {
        uint64_t v16 = v68[0];
        swift_bridgeObjectRelease(v68[0]);
        uint64_t v38 = (void *)v79;
        a4 = v69;
        uint64_t v17 = _swiftEmptyArrayStorage;
        goto LABEL_15;
      }
    }
  }

  uint64_t v38 = _swiftEmptyArrayStorage;
LABEL_15:
  swift_bridgeObjectRelease(v16);
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class v40 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v38);
  [v70 setSuccessCommands:v40];

  uint64_t v41 = a4();
  uint64_t v42 = v41;
  unint64_t v79 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v43 = *(void *)(v41 + 16);
  if (v43)
  {
    *(void *)&__int128 v71 = v39;
    uint64_t v44 = v9;
    unint64_t v45 = v41 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v46 = *(void *)(v44 + 72);
    uint64_t v47 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v44 + 16);
    uint64_t v69 = (uint64_t (*)(void))v41;
    swift_bridgeObjectRetain(v41);
    __int128 v72 = xmmword_7D060;
    while (1)
    {
      uint64_t v48 = v47(v12, v45, v8);
      uint64_t v49 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter(v48);
      if (v49)
      {
        uint64_t v50 = (void *)v49;
        id v78 = &OBJC_PROTOCOL___SAClientBoundCommand;
        id v51 = (id)swift_dynamicCastObjCProtocolConditional(v49, 1LL, &v78);
        if (v51) {
          goto LABEL_24;
        }
        id v77 = &OBJC_PROTOCOL___SAServerBoundCommand;
        uint64_t v52 = swift_dynamicCastObjCProtocolConditional(v50, 1LL, &v77);
        if (v52)
        {
          uint64_t v53 = v52;
          id v54 = objc_allocWithZone(&OBJC_CLASS___SASendCommands);
          id v55 = v50;
          id v51 = [v54 init];
          uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v57 = swift_allocObject(v56, 40LL, 7LL);
          *(_OWORD *)(v57 + 16) = v72;
          *(void *)(v57 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v53;
          uint64_t v76 = v57;
          specialized Array._endMutation()(v57);
          uint64_t v58 = v76;
          id v59 = v55;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAServerBoundCommand);
          Class v60 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v58);
          [v51 setCommands:v60];

LABEL_24:
          uint64_t v61 = (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v12, v8);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v61);
          unint64_t v63 = *(void *)((char *)&dword_10 + (v79 & 0xFFFFFFFFFFFFFF8LL));
          unint64_t v62 = *(void *)((char *)&dword_18 + (v79 & 0xFFFFFFFFFFFFFF8LL));
          if (v63 >= v62 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1LL);
          }
          uint64_t v64 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v63, v51);
          specialized Array._endMutation()(v64);
          goto LABEL_19;
        }
      }

      (*(void (**)(char *, uint64_t))(v73 + 8))(v12, v8);
LABEL_19:
      v45 += v46;
      if (!--v43)
      {
        uint64_t v42 = (uint64_t)v69;
        swift_bridgeObjectRelease(v69);
        uint64_t v17 = (void *)v79;
        break;
      }
    }
  }

  swift_bridgeObjectRelease(v42);
  Class v65 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v17);
  id v66 = v70;
  [v70 setFailureCommands:v65];

  return v66;
}

id specialized static PegasusACEConverters.makeUnlockDeviceWithWatch(cmdBuilder:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_UnlockDeviceWithWatchBuilderParams(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  id v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter(v5);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v2, 1LL, v8) == 1)
  {
    outlined destroy of Any?( (uint64_t)v2,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
    return 0LL;
  }

  if ((*(unsigned int (**)(char *, uint64_t))(v9 + 88))(v2, v8) != enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.unlockDeviceWithWatch(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v2, v8);
    return 0LL;
  }

  (*(void (**)(char *, uint64_t))(v9 + 96))(v2, v8);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v2, v3);
  id v10 = specialized static PegasusACEConverters.makeUnlockDevice(params:)( (uint64_t)v7,  (Class *)&OBJC_CLASS___SAUIUnlockDeviceWithWatch_ptr,  (uint64_t (*)(void))&Apple_Parsec_Siri_V2alpha_UnlockDeviceWithWatchBuilderParams.successCommands.getter,  (uint64_t (*)(void))&Apple_Parsec_Siri_V2alpha_UnlockDeviceWithWatchBuilderParams.failureCommands.getter);
  uint64_t v11 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
  unint64_t v13 = v12;
  swift_bridgeObjectRelease(v12);
  uint64_t v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000LL) == 0) {
    uint64_t v14 = v11 & 0xFFFFFFFFFFFFLL;
  }
  if (v14)
  {
    id v15 = v10;
    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
    uint64_t v17 = v16;
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v17);
    [v15 setAceId:v18];
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v10;
}

id specialized static PegasusACEConverters.makeOpenLink(cmdBuilder:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v31 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_OpenLinkBuilderParams(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  id v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter(v8);
  uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1LL, v11) == 1)
  {
    outlined destroy of Any?( (uint64_t)v5,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
    return 0LL;
  }

  if ((*(unsigned int (**)(char *, uint64_t))(v12 + 88))(v5, v11) != enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.openLink(_:))
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v5, v11);
    return 0LL;
  }

  (*(void (**)(char *, uint64_t))(v12 + 96))(v5, v11);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v5, v6);
  id v13 = [objc_allocWithZone(SAUIOpenLink) init];
  uint64_t v14 = Apple_Parsec_Siri_V2alpha_OpenLinkBuilderParams.ref.getter();
  uint64_t v16 = v15;
  URL.init(string:)(v14);
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = type metadata accessor for URL(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v20 = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v2, 1LL, v17) != 1)
  {
    URL._bridgeToObjectiveC()(v19);
    uint64_t v20 = v21;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v2, v17);
  }

  [v13 setRef:v20];

  uint64_t v22 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
  unint64_t v24 = v23;
  swift_bridgeObjectRelease(v23);
  uint64_t v25 = HIBYTE(v24) & 0xF;
  if ((v24 & 0x2000000000000000LL) == 0) {
    uint64_t v25 = v22 & 0xFFFFFFFFFFFFLL;
  }
  if (v25)
  {
    id v26 = v13;
    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
    uint64_t v28 = v27;
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v28);
    [v26 setAceId:v29];
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return v13;
}

id specialized static PegasusACEConverters.makeSetSiriAuthorizationForApp(cmdBuilder:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SetSiriAuthorizationForAppBuilderParams(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter(v5);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v2, 1LL, v8) == 1)
  {
    outlined destroy of Any?( (uint64_t)v2,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
    return 0LL;
  }

  if ((*(unsigned int (**)(char *, uint64_t))(v9 + 88))(v2, v8) != enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.setSiriAuthorizationForApp(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v2, v8);
    return 0LL;
  }

  (*(void (**)(char *, uint64_t))(v9 + 96))(v2, v8);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v2, v3);
  id v10 = [objc_allocWithZone(SASettingSetSiriAuthorizationForApp) init];
  Apple_Parsec_Siri_V2alpha_SetSiriAuthorizationForAppBuilderParams.appBundleID.getter();
  uint64_t v12 = v11;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  [v10 setBundleId:v13];

  uint64_t v14 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
  unint64_t v16 = v15;
  swift_bridgeObjectRelease(v15);
  uint64_t v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000LL) == 0) {
    uint64_t v17 = v14 & 0xFFFFFFFFFFFFLL;
  }
  if (v17)
  {
    id v18 = v10;
    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
    uint64_t v20 = v19;
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
    [v18 setAceId:v21];
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v10;
}

id specialized static PegasusACEConverters.makeExtendCurrentTTS(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeEndNavigation(cmdBuilder:)( a1,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_ExtendCurrentTTS,  &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.extendCurrentTts(_:),  (Class *)&OBJC_CLASS___SAUIExtendCurrentTTS_ptr);
}

id specialized static PegasusACEConverters.makeEndNavigation(cmdBuilder:)( uint64_t a1, uint64_t (*a2)(void), _DWORD *a3, Class *a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a2(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v27 - v13;
  Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter(v12);
  uint64_t v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v9, 1LL, v15) == 1)
  {
    outlined destroy of Any?( (uint64_t)v9,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
    return 0LL;
  }

  if ((*(unsigned int (**)(char *, uint64_t))(v16 + 88))(v9, v15) != *a3)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v15);
    return 0LL;
  }

  (*(void (**)(char *, uint64_t))(v16 + 96))(v9, v15);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v9, v10);
  id v17 = [objc_allocWithZone(*a4) init];
  uint64_t v18 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
  unint64_t v20 = v19;
  swift_bridgeObjectRelease(v19);
  uint64_t v21 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000LL) == 0) {
    uint64_t v21 = v18 & 0xFFFFFFFFFFFFLL;
  }
  if (v21)
  {
    id v22 = v17;
    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
    uint64_t v24 = v23;
    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v24);
    [v22 setAceId:v25];
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return v17;
}

id specialized static PegasusACEConverters.makeCancelCurrentTTS(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeEndNavigation(cmdBuilder:)( a1,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_CancelCurrentTTS,  &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.cancelCurrentTts(_:),  (Class *)&OBJC_CLASS___SAUICancelCurrentTTS_ptr);
}

id specialized static PegasusACEConverters.makeSearchMarketplace(cmdBuilder:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SearchMarketplaceParams(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter(v5);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v2, 1LL, v8) == 1)
  {
    outlined destroy of Any?( (uint64_t)v2,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
    return 0LL;
  }

  if ((*(unsigned int (**)(char *, uint64_t))(v9 + 88))(v2, v8) != enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.searchMarketplace(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v2, v8);
    return 0LL;
  }

  (*(void (**)(char *, uint64_t))(v9 + 96))(v2, v8);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v2, v3);
  id v10 = [objc_allocWithZone(SAAppsSearchMarketplace) init];
  Apple_Parsec_Siri_V2alpha_SearchMarketplaceParams.marketplace.getter();
  uint64_t v12 = v11;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  [v10 setMarketplace:v13];

  Apple_Parsec_Siri_V2alpha_SearchMarketplaceParams.keyword.getter();
  uint64_t v15 = v14;
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  [v10 setKeyword:v16];

  uint64_t v17 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
  unint64_t v19 = v18;
  swift_bridgeObjectRelease(v18);
  uint64_t v20 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000LL) == 0) {
    uint64_t v20 = v17 & 0xFFFFFFFFFFFFLL;
  }
  if (v20)
  {
    id v21 = v10;
    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
    uint64_t v23 = v22;
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v23);
    [v21 setAceId:v24];
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v10;
}

ValueMetadata *type metadata accessor for PegasusACEConverters()
{
  return &type metadata for PegasusACEConverters;
}

uint64_t outlined init with take of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t RunPommesRequestFlow.__allocating_init(pommesResponse:identifiedUser:outputPublisher:)( uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v7 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  *(void *)(v7 + 16) = a1;
  outlined init with take of IdentifiedUser?( a2,  v7 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_identifiedUser);
  outlined init with take of PatternFlowProviding( a3,  v7 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_outputPublisher);
  uint64_t v8 = v7 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_state;
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(void *)(v8 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
  *(_BYTE *)(v8 + 40) = 2;
  return v7;
}

id RunPommesRequestFlow.pommesResponse.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t RunPommesRequestFlow.identifiedUser.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of IdentifiedUser?( v1 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_identifiedUser,  a1);
}

uint64_t RunPommesRequestFlow.outputPublisher.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync( v1 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_outputPublisher,  a1);
}

uint64_t RunPommesRequestFlow.init(pommesResponse:identifiedUser:outputPublisher:)( uint64_t a1, uint64_t a2, __int128 *a3)
{
  *(void *)(v3 + 16) = a1;
  outlined init with take of IdentifiedUser?( a2,  v3 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_identifiedUser);
  outlined init with take of PatternFlowProviding( a3,  v3 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_outputPublisher);
  uint64_t v5 = v3 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_state;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(void *)(v5 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
  *(_BYTE *)(v5 + 40) = 2;
  return v3;
}

uint64_t outlined init with take of IdentifiedUser?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of IdentifiedUser?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t RunPommesRequestFlow.exitValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_state);
  swift_beginAccess(v3, v8, 0LL, 0LL);
  uint64_t result = outlined init with copy of RunPommesRequestFlow.State(v3, (uint64_t)v9);
  if (v10)
  {
    if (v10 == 1)
    {
      *(void *)a1 = *(void *)&v9[0];
    }

    else
    {
      unint64_t v6 = lazy protocol witness table accessor for type RunPommesRequestFlow.InvalidStateError and conformance RunPommesRequestFlow.InvalidStateError();
      uint64_t result = swift_allocError(&unk_98CD8, v6, 0LL, 0LL);
      void *v7 = 0xD00000000000002DLL;
      v7[1] = 0x8000000000081E90LL;
      *(void *)a1 = result;
    }

    char v5 = 1;
  }

  else
  {
    uint64_t result = outlined init with take of PatternFlowProviding(v9, a1);
    char v5 = 0;
  }

  *(_BYTE *)(a1 + 40) = v5;
  return result;
}

uint64_t outlined init with copy of RunPommesRequestFlow.State(uint64_t *a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type RunPommesRequestFlow.InvalidStateError and conformance RunPommesRequestFlow.InvalidStateError()
{
  unint64_t result = lazy protocol witness table cache variable for type RunPommesRequestFlow.InvalidStateError and conformance RunPommesRequestFlow.InvalidStateError;
  if (!lazy protocol witness table cache variable for type RunPommesRequestFlow.InvalidStateError and conformance RunPommesRequestFlow.InvalidStateError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunPommesRequestFlow.InvalidStateError,  &unk_98CD8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunPommesRequestFlow.InvalidStateError and conformance RunPommesRequestFlow.InvalidStateError);
  }

  return result;
}

uint64_t RunPommesRequestFlow.execute()(uint64_t a1)
{
  v2[42] = a1;
  v2[43] = v1;
  uint64_t v3 = type metadata accessor for ExternalActivationRequest(0LL);
  v2[44] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[45] = v4;
  v2[46] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  v2[47] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[48] = v6;
  v2[49] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
  v2[50] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for IdentifiedUser(0LL);
  v2[51] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[52] = v9;
  v2[53] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(RunPommesRequestFlow.execute(), 0LL, 0LL);
}

uint64_t RunPommesRequestFlow.execute()()
{
  id v1 = [objc_allocWithZone(SARDRunPOMMESRequest) init];
  v0[54] = v1;
  uint64_t v2 = (void *)PommesResponse.asrRecognition.getter();

  uint64_t v3 = &SARDRequestTypeTEXTValue;
  if (v2) {
    uint64_t v3 = &SARDRequestTypeSPEECHValue;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  uint64_t v5 = v4;
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  [v1 setRequestType:v6];

  uint64_t v7 = (void *)PommesResponse.asrRecognition.getter();
  [v1 setRecognition:v7];

  PommesResponse.searchRequestUtterance.getter();
  uint64_t v9 = v8;
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  [v1 setUtterance:v10];

  PommesResponse.responseVariantResult.getter();
  if (v11)
  {
    uint64_t v12 = v11;
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v12);
  }

  else
  {
    NSString v13 = 0LL;
  }

  uint64_t v14 = v0[51];
  uint64_t v15 = v0[52];
  uint64_t v16 = v0[50];
  uint64_t v17 = v0[43];
  [v1 setResponseVariantResult:v13];

  outlined init with copy of IdentifiedUser?( v17 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_identifiedUser,  v16);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v16, 1LL, v14) == 1)
  {
    uint64_t v18 = outlined destroy of IdentifiedUser?(v0[50]);
    PommesResponse.sharedUserId.getter(v18);
    if (v19)
    {
      uint64_t v20 = v19;
      NSString v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v20);
    }

    else
    {
      NSString v21 = 0LL;
    }

    [v1 setUserId:v21];
  }

  else
  {
    uint64_t v22 = (*(uint64_t (**)(void, void, void))(v0[52] + 32LL))(v0[53], v0[50], v0[51]);
    IdentifiedUser.sharedUserId.getter(v22);
    if (v23)
    {
      uint64_t v24 = v23;
      NSString v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v24);
    }

    else
    {
      NSString v25 = 0LL;
    }

    uint64_t v28 = v0[52];
    uint64_t v27 = v0[53];
    uint64_t v29 = v0[51];
    [v1 setUserId:v25];

    [v1 setUserIdentityClassification:SAUserIdentityClassificationConfidentValue];
    uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
  }

  uint64_t v30 = PommesResponse.encodedNLUserParses.getter(v26);
  if (v31 >> 60 != 15)
  {
    uint64_t v32 = v30;
    unint64_t v33 = v31;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v1 setNlUserParses:isa];

    uint64_t v30 = outlined consume of Data?(v32, v33);
  }

  uint64_t v35 = PommesResponse.encodedNLFallbackParse.getter(v30);
  if (v36 >> 60 != 15)
  {
    uint64_t v37 = v35;
    unint64_t v38 = v36;
    Class v39 = Data._bridgeToObjectiveC()().super.isa;
    [v1 setNlFallbackParse:v39];

    outlined consume of Data?(v37, v38);
  }

  uint64_t v41 = v0[48];
  uint64_t v40 = v0[49];
  uint64_t v42 = v0[47];
  id v43 = [objc_allocWithZone(SAStartLocalRequest) init];
  v0[55] = v43;
  id v44 = v43;
  uint64_t v45 = UUID.init()(v44);
  UUID.uuidString.getter(v45);
  uint64_t v47 = v46;
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
  NSString v48 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v47);
  [v44 setAceId:v48];

  [v44 setRefId:0];
  id v49 = v1;
  id v50 = [v44 aceId];
  [v49 setRefId:v50];

  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v52 = swift_allocObject(v51, 40LL, 7LL);
  *(_OWORD *)(v52 + 16) = xmmword_7D060;
  *(void *)(v52 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v49;
  *(void *)&v75[0] = v52;
  specialized Array._endMutation()(v52);
  id v53 = v49;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class v54 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(*(void *)&v75[0]);
  [v44 setClientBoundCommands:v54];

  id v55 = [objc_allocWithZone(AFRequestInfo) init];
  v0[56] = v55;
  [v55 setStartLocalRequest:v44];
  [v55 setActivationEvent:7];
  [v55 setOptions:0];
  uint64_t v76 = 0LL;
  memset(v75, 0, sizeof(v75));
  ExternalActivationRequest.init(requestInfo:flowActivity:)(v55, v75);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v56 = type metadata accessor for Logger(0LL);
  uint64_t v57 = __swift_project_value_buffer(v56, (uint64_t)static Logger.information);
  v0[57] = v57;
  uint64_t v58 = (os_log_s *)Logger.logObject.getter(v57);
  os_log_type_t v63 = static os_log_type_t.debug.getter(v58, v59, v60, v61, v62);
  if (os_log_type_enabled(v58, v63))
  {
    uint64_t v64 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v64 = 0;
    _os_log_impl(&dword_0, v58, v63, "Publishing ExternalActivationRequest from RunPommesRequestFlow", v64, 2u);
    swift_slowDealloc(v64, -1LL, -1LL);
  }

  uint64_t v66 = v0[45];
  uint64_t v65 = v0[46];
  uint64_t v68 = v0[43];
  uint64_t v67 = v0[44];

  uint64_t v69 = (void *)(v68 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_outputPublisher);
  uint64_t v70 = *(void *)(v68 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_outputPublisher + 24);
  uint64_t v71 = v69[4];
  __swift_project_boxed_opaque_existential_1(v69, v70);
  v0[29] = v67;
  v0[30] = &protocol witness table for ExternalActivationRequest;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 26);
  (*(void (**)(void *, uint64_t, uint64_t))(v66 + 16))(boxed_opaque_existential_1, v65, v67);
  uint64_t v73 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  v0[58] = v73;
  *uint64_t v73 = v0;
  v73[1] = RunPommesRequestFlow.execute();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 26, v70, v71);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 464);
  *(void *)(*v1 + 47__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = RunPommesRequestFlow.execute();
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_1((void *)(v2 + 208));
    uint64_t v4 = RunPommesRequestFlow.execute();
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *boxed_opaque_existential_1;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v2 = *(void *)(v0 + 360);
  id v1 = *(void *)(v0 + 368);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v3 = *(void *)(v0 + 352);
  *(void *)(v0 + 184) = v3;
  *(void *)(v0 + 19__swift_destroy_boxed_opaque_existential_1(v0 + 2) = &protocol witness table for ExternalActivationRequest;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v0 + 160));
  (*(void (**)(void *, uint64_t, uint64_t))(v2 + 32))(boxed_opaque_existential_1, v1, v3);
  *(_BYTE *)(v0 + 200) = 0;
  outlined init with take of RunPommesRequestFlow.State((__int128 *)(v0 + 160), (_OWORD *)(v0 + 112));
  NSString v6 = v4 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_state;
  swift_beginAccess(v4 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_state, v0 + 296, 33LL, 0LL);
  outlined assign with take of RunPommesRequestFlow.State(v0 + 112, v6);
  uint64_t v7 = swift_endAccess(v0 + 296);
  uint64_t v9 = *(void **)(v0 + 440);
  uint64_t v8 = *(void **)(v0 + 448);
  NSString v10 = *(void *)(v0 + 424);
  uint64_t v11 = *(void **)(v0 + 432);
  NSString v13 = *(void *)(v0 + 392);
  uint64_t v12 = *(void *)(v0 + 400);
  uint64_t v14 = *(void *)(v0 + 368);
  static ExecuteResponse.complete()(v7);

  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  id v1 = *(void *)(v0 + 472);
  (*(void (**)(void, void))(*(void *)(v0 + 360) + 8LL))(*(void *)(v0 + 368), *(void *)(v0 + 352));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 208));
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  uint64_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 472);
    NSString v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v23 = v7;
    *(_DWORD *)NSString v6 = 136315138;
    swift_getErrorValue(v5, v0 + 328, v0 + 248);
    uint64_t v8 = Error.localizedDescription.getter(*(void *)(v0 + 256), *(void *)(v0 + 264));
    NSString v10 = v9;
    *(void *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl(&dword_0, v3, v4, "Unable to publish AceOutput from RunPommesRequestFlow with error: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    uint64_t v11 = *(void *)(v0 + 472);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  uint64_t v12 = *(void *)(v0 + 344);
  *(void *)(v0 + 16) = *(void *)(v0 + 472);
  *(_BYTE *)(v0 + 56) = 1;
  outlined init with take of RunPommesRequestFlow.State((__int128 *)(v0 + 16), (_OWORD *)(v0 + 64));
  NSString v13 = v12 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_state;
  swift_beginAccess(v13, v0 + 272, 33LL, 0LL);
  outlined assign with take of RunPommesRequestFlow.State(v0 + 64, v13);
  uint64_t v14 = swift_endAccess(v0 + 272);
  uint64_t v16 = *(void **)(v0 + 440);
  uint64_t v15 = *(void **)(v0 + 448);
  uint64_t v17 = *(void *)(v0 + 424);
  uint64_t v18 = *(void **)(v0 + 432);
  uint64_t v20 = *(void *)(v0 + 392);
  uint64_t v19 = *(void *)(v0 + 400);
  NSString v21 = *(void *)(v0 + 368);
  static ExecuteResponse.complete()(v14);

  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t outlined destroy of IdentifiedUser?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t RunPommesRequestFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RunPommesRequestFlow(0LL);
  unint64_t v5 = lazy protocol witness table accessor for type RunPommesRequestFlow and conformance RunPommesRequestFlow();
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v5);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RunPommesRequestFlow.InvalidStateError()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t RunPommesRequestFlow.deinit()
{
  outlined destroy of IdentifiedUser?(v0 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_identifiedUser);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0
                                                      + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_outputPublisher));
  outlined destroy of RunPommesRequestFlow.State((void *)(v0
                                                          + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_state));
  return v0;
}

uint64_t RunPommesRequestFlow.__deallocating_deinit()
{
  outlined destroy of IdentifiedUser?((uint64_t)v0 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_identifiedUser);
  __swift_destroy_boxed_opaque_existential_1((id *)((char *)v0
                                                  + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_outputPublisher));
  outlined destroy of RunPommesRequestFlow.State((id *)((char *)v0
                                                      + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_state));
  return swift_deallocClassInstance(v0, *((unsigned int *)*v0 + 12), *((unsigned __int16 *)*v0 + 26));
}

uint64_t protocol witness for Flow.on(input:) in conformance RunPommesRequestFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144LL))() & 1;
}

uint64_t protocol witness for Flow.execute() in conformance RunPommesRequestFlow(uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 160LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  unint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return v7(a1);
}

_OWORD *outlined init with take of RunPommesRequestFlow.State(__int128 *a1, _OWORD *a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(__int128 *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

uint64_t outlined assign with take of RunPommesRequestFlow.State(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t type metadata accessor for RunPommesRequestFlow(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for RunPommesRequestFlow;
  if (!type metadata singleton initialization cache for RunPommesRequestFlow) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RunPommesRequestFlow);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RunPommesRequestFlow and conformance RunPommesRequestFlow()
{
  unint64_t result = lazy protocol witness table cache variable for type RunPommesRequestFlow and conformance RunPommesRequestFlow;
  if (!lazy protocol witness table cache variable for type RunPommesRequestFlow and conformance RunPommesRequestFlow)
  {
    uint64_t v1 = type metadata accessor for RunPommesRequestFlow(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for RunPommesRequestFlow, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunPommesRequestFlow and conformance RunPommesRequestFlow);
  }

  return result;
}

void *outlined destroy of RunPommesRequestFlow.State(void *a1)
{
  return a1;
}

uint64_t ObjC metadata update function for RunPommesRequestFlow()
{
  return type metadata accessor for RunPommesRequestFlow(0LL);
}

void type metadata completion function for RunPommesRequestFlow(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  type metadata accessor for IdentifiedUser?(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    void v4[2] = "(";
    void v4[3] = &unk_7E650;
    swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
  }

void *initializeBufferWithCopyOfBuffer for RunPommesRequestFlow.InvalidStateError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for RunPommesRequestFlow.InvalidStateError(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void *assignWithCopy for RunPommesRequestFlow.InvalidStateError(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for RunPommesRequestFlow.InvalidStateError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for RunPommesRequestFlow.InvalidStateError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RunPommesRequestFlow.InvalidStateError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void *type metadata accessor for RunPommesRequestFlow.InvalidStateError()
{
  return &unk_98CD8;
}

void *destroy for RunPommesRequestFlow.State(void *result)
{
  unsigned int v1 = *((unsigned __int8 *)result + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)result + 2;
  }
  if (v1 == 1) {
    return (void *)swift_errorRelease(*result);
  }
  if (!v1) {
    return (void *)__swift_destroy_boxed_opaque_existential_1(result);
  }
  return result;
}

uint64_t initializeWithCopy for RunPommesRequestFlow.State(uint64_t a1, uint64_t *a2)
{
  unsigned int v3 = *((unsigned __int8 *)a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    uint64_t v5 = *a2;
    swift_errorRetain(*a2);
    *(void *)a1 = v5;
    *(_BYTE *)(a1 + 40) = 1;
  }

  else if (v3)
  {
    __int128 v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  }

  else
  {
    __int128 v4 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 0;
  }

  return a1;
}

uint64_t assignWithCopy for RunPommesRequestFlow.State(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      swift_errorRelease(*(void *)a1);
    }

    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1((void *)a1);
    }

    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v7 = *a2;
      swift_errorRetain(v7);
      *(void *)a1 = v7;
      *(_BYTE *)(a1 + 40) = 1;
    }

    else if (v5)
    {
      __int128 v8 = *(_OWORD *)a2;
      __int128 v9 = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v9;
    }

    else
    {
      uint64_t v6 = a2[3];
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a2[4];
      (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }

  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for RunPommesRequestFlow.State(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      swift_errorRelease(*(void *)a1);
    }

    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1((void *)a1);
    }

    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(_BYTE *)(a1 + 40) = 1;
    }

    else
    {
      __int128 v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }

      else
      {
        *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(void *)(a2 + 32);
        *(_BYTE *)(a1 + 40) = 0;
      }
    }
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for RunPommesRequestFlow.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for RunPommesRequestFlow.State( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 41) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 41) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 40) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for RunPommesRequestFlow.State(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  return result;
}

uint64_t destructiveInjectEnumTag for RunPommesRequestFlow.State(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(void *)(result + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2;
  }

  *(_BYTE *)(result + 40) = a2;
  return result;
}

void *type metadata accessor for RunPommesRequestFlow.State()
{
  return &unk_98D70;
}

uint64_t Input.userConfirmationResponse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v42 = a1;
  uint64_t v1 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unsigned int v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for USOParse(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  __int128 v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Parse(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  NSString v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Input.parse.getter(v11);
  int v14 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v13, v9);
  if (v14 != enum case for Parse.directInvocation(_:))
  {
    if (v14 == enum case for Parse.uso(_:))
    {
      (*(void (**)(char *, uint64_t))(v10 + 96))(v13, v9);
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v13, v5);
      USOParse.userConfirmationResponse.getter(v42);
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }

    else
    {
      uint64_t v37 = type metadata accessor for ConfirmationResponse(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56LL))(v42, 1LL, 1LL, v37);
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    }
  }

  (*(void (**)(char *, uint64_t))(v10 + 96))(v13, v9);
  uint64_t v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v2 + 32))(v4, v13, v1);
  uint64_t v16 = Parse.DirectInvocation.identifier.getter(v15);
  uint64_t v18 = v17;
  uint64_t v19 = (void *)static SiriKitDirectInvocationPayloads.reject.getter();
  id v20 = [v19 identifier];

  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  uint64_t v23 = v22;

  if (v21 == v16 && v23 == v18)
  {
    swift_bridgeObjectRelease(v18);
    goto LABEL_13;
  }

  char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, v16, v18, 0LL);
  uint64_t v26 = swift_bridgeObjectRelease(v23);
  if ((v25 & 1) != 0)
  {
LABEL_13:
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    swift_bridgeObjectRelease(v18);
    uint64_t v34 = enum case for ConfirmationResponse.rejected(_:);
    uint64_t v35 = type metadata accessor for ConfirmationResponse(0LL);
    uint64_t v36 = *(void *)(v35 - 8);
    uint64_t v32 = v42;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 104))(v42, v34, v35);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v32, 0LL, 1LL, v35);
  }

  uint64_t v27 = (void *)static SiriKitDirectInvocationPayloads.confirm.getter(v26);
  id v28 = [v27 identifier];

  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  uint64_t v31 = v30;

  if (v29 == v16 && v31 == v18)
  {
    swift_bridgeObjectRelease_n(v18, 2LL);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    uint64_t v32 = v42;
LABEL_18:
    uint64_t v39 = enum case for ConfirmationResponse.confirmed(_:);
    uint64_t v35 = type metadata accessor for ConfirmationResponse(0LL);
    uint64_t v36 = *(void *)(v35 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 104))(v32, v39, v35);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v32, 0LL, 1LL, v35);
  }

  char v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, v16, v18, 0LL);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v31);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v32 = v42;
  if ((v38 & 1) != 0) {
    goto LABEL_18;
  }
  uint64_t v40 = type metadata accessor for ConfirmationResponse(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56LL))( v32,  1LL,  1LL,  v40);
}

uint64_t USOParse.userConfirmationResponse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v47 = a1;
  uint64_t v3 = type metadata accessor for USOParse(0LL);
  uint64_t v46 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  id v44 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v45 = (char *)&v44 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  NSString v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = USOParse.userParse.getter(v16);
  uint64_t v20 = Siri_Nlu_External_UserParse.userDialogActs.getter(v19);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (*(void *)(v20 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))( v9,  v20 + ((*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80)),  v14);
    uint64_t v21 = 0LL;
  }

  else
  {
    uint64_t v21 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v9, v21, 1LL, v14);
  swift_bridgeObjectRelease(v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v9, 1LL, v14) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?((uint64_t)v9);
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v22, (uint64_t)static Logger.information);
    uint64_t v24 = v45;
    uint64_t v23 = v46;
    char v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 16);
    uint64_t v26 = v25(v45, v2, v3);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v30 = swift_slowAlloc(32LL, -1LL);
      uint64_t v49 = v30;
      *(_DWORD *)uint64_t v29 = 136315138;
      uint64_t v31 = v44;
      v25(v44, (uint64_t)v24, v3);
      uint64_t v32 = String.init<A>(describing:)(v31, v3);
      unint64_t v34 = v33;
      uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
      swift_bridgeObjectRelease(v34);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v24, v3);
      _os_log_impl( &dword_0,  v27,  v28,  "Invalid USOParse while looking for user confirmation. Parse has no UDAs: %s",  v29,  0xCu);
      swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v3);
    }

    goto LABEL_16;
  }

  uint64_t v35 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v18, v9, v14);
  if ((Siri_Nlu_External_UserDialogAct.hasRejected.getter(v35) & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    uint64_t v36 = (unsigned int *)&enum case for ConfirmationResponse.rejected(_:);
LABEL_15:
    uint64_t v38 = *v36;
    uint64_t v39 = type metadata accessor for ConfirmationResponse(0LL);
    uint64_t v40 = *(void *)(v39 - 8);
    uint64_t v41 = v47;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 104))(v47, v38, v39);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v41, 0LL, 1LL, v39);
  }

  char v37 = Siri_Nlu_External_UserDialogAct.hasAccepted.getter();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  if ((v37 & 1) != 0)
  {
    uint64_t v36 = (unsigned int *)&enum case for ConfirmationResponse.confirmed(_:);
    goto LABEL_15;
  }

uint64_t Input.userCancelled.getter()
{
  uint64_t v0 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for USOParse(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Parse(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Input.parse.getter(v10);
  int v13 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v12, v8);
  if (v13 == enum case for Parse.directInvocation(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 96))(v12, v8);
    uint64_t v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v1 + 32))(v3, v12, v0);
    uint64_t v15 = Parse.DirectInvocation.identifier.getter(v14);
    uint64_t v17 = v16;
    uint64_t v18 = (void *)static SiriKitDirectInvocationPayloads.cancel.getter();
    id v19 = [v18 identifier];

    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    uint64_t v22 = v21;

    if (v15 == v20 && v17 == v22)
    {
      char v24 = 1;
      uint64_t v22 = v17;
    }

    else
    {
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v20, v22, 0LL);
    }

    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v22);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }

  else if (v13 == enum case for Parse.uso(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 96))(v12, v8);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v12, v4);
    char v24 = USOParse.userCancelled.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    char v24 = 0;
  }

  return v24 & 1;
}

uint64_t USOParse.userCancelled.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for USOParse(0LL);
  uint64_t v40 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v38 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v39 = (char *)&v37 - v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = USOParse.userParse.getter(v15);
  uint64_t v19 = Siri_Nlu_External_UserParse.userDialogActs.getter(v18);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (*(void *)(v19 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))( v8,  v19 + ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)),  v13);
    uint64_t v20 = 0LL;
  }

  else
  {
    uint64_t v20 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v8, v20, 1LL, v13);
  swift_bridgeObjectRelease(v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1LL, v13) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?((uint64_t)v8);
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v21, (uint64_t)static Logger.information);
    uint64_t v22 = v39;
    uint64_t v23 = v40;
    char v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 16);
    uint64_t v25 = v24(v39, v1, v2);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      os_log_type_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v29 = swift_slowAlloc(32LL, -1LL);
      uint64_t v42 = v29;
      *(_DWORD *)os_log_type_t v28 = 136315138;
      uint64_t v30 = v38;
      v24(v38, (uint64_t)v22, v2);
      uint64_t v31 = String.init<A>(describing:)(v30, v2);
      unint64_t v33 = v32;
      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
      swift_bridgeObjectRelease(v33);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v22, v2);
      _os_log_impl( &dword_0,  v26,  v27,  "Invalid USOParse while looking for user cancellation. Parse has no UDAs: %s",  v28,  0xCu);
      swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v23 + 8))(v22, v2);
    }

    char v35 = 0;
  }

  else
  {
    uint64_t v34 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v17, v8, v13);
    char v35 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter(v34);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  }

  return v35 & 1;
}

uint64_t outlined destroy of Siri_Nlu_External_UserDialogAct?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v30[1] = a2;
  v30[2] = a3;
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = __swift_project_value_buffer(v7, (uint64_t)static Logger.information);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_0, v9, v10, "CommandFactory: make direct & delayed commands", v11, 2u);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  uint64_t v12 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v13 = static PerformanceUtil.shared.getter(v12);
  uint64_t v14 = __chkstk_darwin(v13);
  Date.init()(v14);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SABaseCommand]);
  os_log_type_t v28 = &v27;
  uint64_t v29 = v15;
  LOBYTE(v2__swift_destroy_boxed_opaque_existential_1(v0 + 7) = 2;
  ((void (*)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(void *@<X8>)))dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:))( &v32,  0xD00000000000002BLL,  0x8000000000081F10LL,  0LL,  v6,  "InformationFlowPlugin/CommandFactory.swift",  42LL,  2LL,  131LL,  "makeCommands(directExecution:delayedActions:sayItComponents:)",  61LL,  v27,  partial apply for closure #1 in static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:));
  swift_release(v13);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
  uint64_t v17 = v16(v6, v3);
  v30[0] = v32;
  uint64_t v18 = static PerformanceUtil.shared.getter(v17);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v20 = v3;
  Date.init()(v19);
  os_log_type_t v28 = &v27;
  uint64_t v29 = v15;
  LOBYTE(v2__swift_destroy_boxed_opaque_existential_1(v0 + 7) = 2;
  ((void (*)(void *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(void *@<X8>)))dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:))( v31,  0xD00000000000002ALL,  0x8000000000081FB0LL,  0LL,  v6,  "InformationFlowPlugin/CommandFactory.swift",  42LL,  2LL,  134LL,  "makeCommands(directExecution:delayedActions:sayItComponents:)",  61LL,  v27,  partial apply for closure #2 in static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:));
  swift_release(v18);
  uint64_t v21 = v16(v6, v3);
  uint64_t v22 = v31[0];
  uint64_t v23 = static PerformanceUtil.shared.getter(v21);
  uint64_t v24 = __chkstk_darwin(v23);
  Date.init()(v24);
  os_log_type_t v28 = &v27;
  uint64_t v29 = v15;
  LOBYTE(v2__swift_destroy_boxed_opaque_existential_1(v0 + 7) = 2;
  ((void (*)(void *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(void *@<X8>)))dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:))( v31,  0xD00000000000002BLL,  0x8000000000081FE0LL,  0LL,  v6,  "InformationFlowPlugin/CommandFactory.swift",  42LL,  2LL,  137LL,  "makeCommands(directExecution:delayedActions:sayItComponents:)",  61LL,  v27,  partial apply for closure #3 in static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:));
  swift_release(v23);
  v16(v6, v20);
  uint64_t v25 = v31[0];
  uint64_t v32 = v30[0];
  specialized Array.append<A>(contentsOf:)( v22,  (uint64_t (*)(uint64_t, void, uint64_t))specialized Array._copyContents(initializing:));
  specialized Array.append<A>(contentsOf:)( v25,  (uint64_t (*)(uint64_t, void, uint64_t))specialized Array._copyContents(initializing:));
  return v32;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

  if (v4 <= v5) {
    int64_t v24 = v4 + v2;
  }
  else {
    int64_t v24 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v24,  1,  v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = type metadata accessor for RREntity(0LL);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v12 = *(void *)(v11 - 8);
  unint64_t v13 = (*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 72);
  unint64_t v15 = v3 + v13 + v14 * v9;
  unint64_t v16 = a1 + v13;
  uint64_t v17 = v14 * v8;
  unint64_t v18 = v15 + v17;
  unint64_t v19 = v16 + v17;
  if (v16 < v18 && v15 < v19) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy(v15);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v21 = *(void *)(v3 + 16);
  BOOL v22 = __OFADD__(v21, v8);
  uint64_t v23 = v21 + v8;
  if (!v22)
  {
    *(void *)(v3 + 16) = v23;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease(a1);
    *uint64_t v1 = v3;
    return result;
  }

{
  return specialized Array.append<A>(contentsOf:)( a1,  (uint64_t (*)(uint64_t, void, uint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)( a1,  (uint64_t (*)(uint64_t, void, uint64_t))specialized Array._copyContents(initializing:));
}

uint64_t specialized Array.append<A>(contentsOf:)( uint64_t a1, uint64_t (*a2)(uint64_t, void, uint64_t))
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v18 = a1;
    }
    else {
      uint64_t v18 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v5 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v6 = *v2;
  if (!((unint64_t)*v2 >> 62))
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFF8LL));
    uint64_t v8 = v7 + v5;
    if (!__OFADD__(v7, v5)) {
      goto LABEL_5;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (v6 < 0) {
    uint64_t v19 = *v2;
  }
  else {
    uint64_t v19 = v6 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*v2);
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease(v6);
  uint64_t v8 = v7 + v5;
  if (__OFADD__(v7, v5)) {
    goto LABEL_29;
  }
LABEL_5:
  uint64_t v6 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  uint64_t *v2 = v6;
  uint64_t v7 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000LL) == 0 && (v6 & 0x4000000000000000LL) == 0)
  {
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v7 = 1LL;
  }

  uint64_t v11 = *(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFF8LL));
  while (1)
  {
    if (v11 <= v8) {
      uint64_t v11 = v8;
    }
    swift_bridgeObjectRetain(v6);
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v11, 1LL, v6);
    swift_bridgeObjectRelease(*v2);
    uint64_t *v2 = v6;
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8LL;
LABEL_15:
    uint64_t result = a2(v10 + 8LL * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), a1);
    if (v13 >= v5) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v6 < 0) {
      uint64_t v20 = v6;
    }
    else {
      uint64_t v20 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v6);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(v6);
  }

  if (v13 < 1) {
    goto LABEL_19;
  }
  uint64_t v14 = *(void *)((char *)&dword_10 + (*v2 & 0xFFFFFFFFFFFFFF8LL));
  BOOL v15 = __OFADD__(v14, v13);
  uint64_t v16 = v14 + v13;
  if (!v15)
  {
    *(void *)((char *)&dword_10 + (*v2 & 0xFFFFFFFFFFFFFF8LL)) = v16;
LABEL_19:
    uint64_t v17 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v17);
  }

  __break(1u);
  return result;
}

void *static CommandFactory.makeCommands(forComponent:)(uint64_t a1)
{
  return specialized static CommandFactory.makeCommands(forComponent:)( a1,  (uint64_t (*)(uint64_t))&Apple_Parsec_Siri_V2alpha_ButtonViewComponent.commands.getter);
}

{
  return specialized static CommandFactory.makeCommands(forComponent:)( a1,  (uint64_t (*)(uint64_t))&Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.siriCommandBuilder.getter);
}

void *static CommandFactory.makeCommands(forListItem:)(uint64_t a1)
{
  return specialized static CommandFactory.makeCommands(forComponent:)( a1,  (uint64_t (*)(uint64_t))&Apple_Parsec_Siri_V2alpha_DisambiguationListItem.commands.getter);
}

id Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asClientBoundAceCommand.getter()
{
  uint64_t v0 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter();
  if (!v0) {
    return 0LL;
  }
  uint64_t v1 = (void *)v0;
  BOOL v15 = &OBJC_PROTOCOL___SAClientBoundCommand;
  uint64_t v2 = swift_dynamicCastObjCProtocolConditional(v0, 1LL, &v15);
  if (!v2)
  {
    uint64_t v14 = &OBJC_PROTOCOL___SAServerBoundCommand;
    uint64_t v4 = swift_dynamicCastObjCProtocolConditional(v1, 1LL, &v14);
    if (v4)
    {
      uint64_t v5 = v4;
      id v6 = objc_allocWithZone(&OBJC_CLASS___SASendCommands);
      id v7 = v1;
      id v3 = [v6 init];
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v9 = swift_allocObject(v8, 40LL, 7LL);
      *(_OWORD *)(v9 + 16) = xmmword_7D060;
      *(void *)(v9 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v5;
      uint64_t v13 = v9;
      specialized Array._endMutation()(v9);
      id v10 = v7;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAServerBoundCommand);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v13);
      [v3 setCommands:isa];

      return v3;
    }

    return 0LL;
  }

  return (id)v2;
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v111 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v3 = (char *)v102 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  __chkstk_darwin(v4);
  id v6 = (char *)v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v106 = (char *)v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v102 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v109 = (char *)v102 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)v102 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)v102 - v20;
  uint64_t v110 = v0;
  Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter(v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
  {
    outlined destroy of Any?( (uint64_t)v6,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.information);
    int64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      char v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)char v26 = 0;
      _os_log_impl(&dword_0, v24, v25, "InfoViewFactory component missing type", v26, 2u);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    return 0LL;
  }

  uint64_t v107 = v13;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v21, v6, v7);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v104 = v3;
  uint64_t v105 = v1;
  uint64_t v28 = type metadata accessor for Logger(0LL);
  uint64_t v29 = __swift_project_value_buffer(v28, (uint64_t)static Logger.information);
  uint64_t v30 = *(uint64_t (**)(char *, char *, uint64_t))(v8 + 16);
  uint64_t v108 = v21;
  uint64_t v31 = v30(v18, v21, v7);
  v102[1] = v29;
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v35 = swift_slowAlloc(32LL, -1LL);
    uint64_t v103 = (void (*)(char *, char *, uint64_t))v30;
    uint64_t v36 = v35;
    uint64_t v113 = v35;
    *(_DWORD *)uint64_t v34 = 136315138;
    uint64_t v37 = v109;
    v103(v109, v18, v7);
    uint64_t v38 = String.init<A>(describing:)(v37, v7);
    unint64_t v40 = v39;
    uint64_t v112 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113);
    swift_bridgeObjectRelease(v40);
    uint64_t v41 = *(void (**)(char *, uint64_t))(v8 + 8);
    v41(v18, v7);
    _os_log_impl(&dword_0, v32, v33, "Translating command to Ace: %s", v34, 0xCu);
    swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v42 = v36;
    uint64_t v30 = (uint64_t (*)(char *, char *, uint64_t))v103;
    swift_slowDealloc(v42, -1LL, -1LL);
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  else
  {
    uint64_t v41 = *(void (**)(char *, uint64_t))(v8 + 8);
    v41(v18, v7);
  }

  uint64_t v43 = v107;
  id v44 = v108;
  v30(v107, v108, v7);
  int v45 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v43, v7);
  if (v45 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.recordLocationActivity(_:))
  {
    uint64_t v46 = type metadata accessor for PerformanceUtil(0LL);
    uint64_t v47 = static PerformanceUtil.shared.getter(v46);
    uint64_t v48 = __chkstk_darwin(v47);
    uint64_t v49 = v104;
    Date.init()(v48);
    uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SARecordLocationActivity?);
    LOBYTE(v100) = 2;
    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( &v113,  0xD00000000000003CLL,  0x8000000000082290LL,  0LL,  v49,  "InformationFlowPlugin/CommandFactory.swift",  42LL,  2LL,  253LL,  "asBaseAceCommand",  16LL,  v100,  partial apply for closure #8 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter,  &v100,  v101);
LABEL_39:
    swift_release(v47);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v49, v105);
    v41(v44, v7);
    uint64_t v27 = v113;
    id v74 = v43;
    uint64_t v75 = v7;
LABEL_40:
    v41(v74, v75);
    return v27;
  }

  if (v45 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.appPunchOut(_:))
  {
    uint64_t v50 = type metadata accessor for PerformanceUtil(0LL);
    uint64_t v47 = static PerformanceUtil.shared.getter(v50);
    uint64_t v51 = __chkstk_darwin(v47);
    uint64_t v49 = v104;
    Date.init()(v51);
    uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAUIAppPunchOut?);
    LOBYTE(v100) = 2;
    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( &v113,  0xD000000000000031LL,  0x8000000000082440LL,  0LL,  v49,  "InformationFlowPlugin/CommandFactory.swift",  42LL,  2LL,  224LL,  "asBaseAceCommand",  16LL,  v100,  partial apply for closure #1 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter,  &v100,  v101);
    goto LABEL_39;
  }

  if (v45 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.startRequest(_:))
  {
    uint64_t v52 = type metadata accessor for PerformanceUtil(0LL);
    uint64_t v47 = static PerformanceUtil.shared.getter(v52);
    uint64_t v53 = __chkstk_darwin(v47);
    uint64_t v49 = v104;
    Date.init()(v53);
    uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAStartRequest?);
    LOBYTE(v100) = 2;
    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( &v113,  0xD000000000000032LL,  0x8000000000082310LL,  0LL,  v49,  "InformationFlowPlugin/CommandFactory.swift",  42LL,  2LL,  244LL,  "asBaseAceCommand",  16LL,  v100,  partial apply for closure #6 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter,  &v100,  v101);
    goto LABEL_39;
  }

  if (v45 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.showMapPoints(_:))
  {
    uint64_t v54 = type metadata accessor for PerformanceUtil(0LL);
    uint64_t v47 = static PerformanceUtil.shared.getter(v54);
    uint64_t v55 = __chkstk_darwin(v47);
    uint64_t v49 = v104;
    Date.init()(v55);
    uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SALocalSearchShowMapPoints?);
    LOBYTE(v100) = 2;
    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( &v113,  0xD000000000000033LL,  0x8000000000082390LL,  0LL,  v49,  "InformationFlowPlugin/CommandFactory.swift",  42LL,  2LL,  236LL,  "asBaseAceCommand",  16LL,  v100,  partial apply for closure #4 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter,  &v100,  v101);
    goto LABEL_39;
  }

  if (v45 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.phoneCall(_:))
  {
    uint64_t v56 = type metadata accessor for PerformanceUtil(0LL);
    uint64_t v47 = static PerformanceUtil.shared.getter(v56);
    uint64_t v57 = __chkstk_darwin(v47);
    uint64_t v49 = v104;
    Date.init()(v57);
    uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAPhoneCall?);
    LOBYTE(v100) = 2;
    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( &v113,  0xD00000000000002FLL,  0x80000000000821F0LL,  0LL,  v49,  "InformationFlowPlugin/CommandFactory.swift",  42LL,  2LL,  265LL,  "asBaseAceCommand",  16LL,  v100,  partial apply for closure #11 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter,  &v100,  v101);
    goto LABEL_39;
  }

  if (v45 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.extendCurrentTts(_:))
  {
    uint64_t v58 = type metadata accessor for PerformanceUtil(0LL);
    uint64_t v47 = static PerformanceUtil.shared.getter(v58);
    uint64_t v59 = __chkstk_darwin(v47);
    uint64_t v49 = v104;
    Date.init()(v59);
    uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAUIExtendCurrentTTS?);
    LOBYTE(v100) = 2;
    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( &v113,  0xD000000000000036LL,  0x80000000000821B0LL,  0LL,  v49,  "InformationFlowPlugin/CommandFactory.swift",  42LL,  2LL,  269LL,  "asBaseAceCommand",  16LL,  v100,  partial apply for closure #12 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter,  &v100,  v101);
    goto LABEL_39;
  }

  if (v45 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.setSiriAuthorizationForApp(_:))
  {
    uint64_t v60 = type metadata accessor for PerformanceUtil(0LL);
    uint64_t v47 = static PerformanceUtil.shared.getter(v60);
    uint64_t v61 = __chkstk_darwin(v47);
    uint64_t v49 = v104;
    Date.init()(v61);
    uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASettingSetSiriAuthorizationForApp?);
    LOBYTE(v100) = 2;
    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( &v113,  0xD000000000000040LL,  0x8000000000082120LL,  0LL,  v49,  "InformationFlowPlugin/CommandFactory.swift",  42LL,  2LL,  277LL,  "asBaseAceCommand",  16LL,  v100,  partial apply for closure #14 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter,  &v100,  v101);
    goto LABEL_39;
  }

  if (v45 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.sayIt(_:))
  {
    uint64_t v62 = type metadata accessor for PerformanceUtil(0LL);
    uint64_t v47 = static PerformanceUtil.shared.getter(v62);
    uint64_t v63 = __chkstk_darwin(v47);
    uint64_t v49 = v104;
    Date.init()(v63);
    uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAUISayIt?);
    LOBYTE(v100) = 2;
    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( &v113,  0xD00000000000002BLL,  0x8000000000082410LL,  0LL,  v49,  "InformationFlowPlugin/CommandFactory.swift",  42LL,  2LL,  228LL,  "asBaseAceCommand",  16LL,  v100,  partial apply for closure #2 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter,  &v100,  v101);
    goto LABEL_39;
  }

  if (v45 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.showPlaceDetails(_:))
  {
    uint64_t v64 = type metadata accessor for PerformanceUtil(0LL);
    uint64_t v47 = static PerformanceUtil.shared.getter(v64);
    uint64_t v65 = __chkstk_darwin(v47);
    uint64_t v49 = v104;
    Date.init()(v65);
    uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SALocalSearchShowPlaceDetails?);
    LOBYTE(v100) = 2;
    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( &v113,  0xD000000000000036LL,  0x80000000000823D0LL,  0LL,  v49,  "InformationFlowPlugin/CommandFactory.swift",  42LL,  2LL,  232LL,  "asBaseAceCommand",  16LL,  v100,  partial apply for closure #3 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter,  &v100,  v101);
    goto LABEL_39;
  }

  if (v45 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.unlockDevice(_:))
  {
    uint64_t v66 = type metadata accessor for PerformanceUtil(0LL);
    uint64_t v47 = static PerformanceUtil.shared.getter(v66);
    uint64_t v67 = __chkstk_darwin(v47);
    uint64_t v49 = v104;
    Date.init()(v67);
    uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAUIUnlockDevice?);
    LOBYTE(v100) = 2;
    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( &v113,  0xD000000000000032LL,  0x80000000000820E0LL,  0LL,  v49,  "InformationFlowPlugin/CommandFactory.swift",  42LL,  2LL,  281LL,  "asBaseAceCommand",  16LL,  v100,  partial apply for closure #15 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter,  &v100,  v101);
    goto LABEL_39;
  }

  if (v45 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.openLink(_:))
  {
    uint64_t v68 = type metadata accessor for PerformanceUtil(0LL);
    uint64_t v47 = static PerformanceUtil.shared.getter(v68);
    uint64_t v69 = __chkstk_darwin(v47);
    uint64_t v49 = v104;
    Date.init()(v69);
    uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAUIOpenLink?);
    LOBYTE(v100) = 2;
    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( &v113,  0xD00000000000002ELL,  0x8000000000082070LL,  0LL,  v49,  "InformationFlowPlugin/CommandFactory.swift",  42LL,  2LL,  289LL,  "asBaseAceCommand",  16LL,  v100,  partial apply for closure #17 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter,  &v100,  v101);
    goto LABEL_39;
  }

  if (v45 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.navigationEnd(_:))
  {
    uint64_t v70 = type metadata accessor for PerformanceUtil(0LL);
    uint64_t v47 = static PerformanceUtil.shared.getter(v70);
    uint64_t v71 = __chkstk_darwin(v47);
    uint64_t v49 = v104;
    Date.init()(v71);
    uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SALocalSearchNavigationEnd?);
    LOBYTE(v100) = 2;
    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( &v113,  0xD000000000000033LL,  0x80000000000822D0LL,  0LL,  v49,  "InformationFlowPlugin/CommandFactory.swift",  42LL,  2LL,  248LL,  "asBaseAceCommand",  16LL,  v100,  partial apply for closure #7 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter,  &v100,  v101);
    goto LABEL_39;
  }

  if (v45 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.unlockDeviceWithWatch(_:))
  {
    uint64_t v72 = type metadata accessor for PerformanceUtil(0LL);
    uint64_t v47 = static PerformanceUtil.shared.getter(v72);
    uint64_t v73 = __chkstk_darwin(v47);
    uint64_t v49 = v104;
    Date.init()(v73);
    uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAUIUnlockDeviceWithWatch?);
    LOBYTE(v100) = 2;
    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( &v113,  0xD00000000000003BLL,  0x80000000000820A0LL,  0LL,  v49,  "InformationFlowPlugin/CommandFactory.swift",  42LL,  2LL,  285LL,  "asBaseAceCommand",  16LL,  v100,  partial apply for closure #16 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter,  &v100,  v101);
    goto LABEL_39;
  }

  uint64_t v77 = v7;
  if (v45 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.cancelCurrentTts(_:))
  {
    uint64_t v78 = type metadata accessor for PerformanceUtil(0LL);
    uint64_t v79 = static PerformanceUtil.shared.getter(v78);
    uint64_t v80 = __chkstk_darwin(v79);
    unint64_t v81 = v104;
    Date.init()(v80);
    uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAUICancelCurrentTTS?);
    LOBYTE(v100) = 2;
    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( &v113,  0xD000000000000036LL,  0x8000000000082170LL,  0LL,  v81,  "InformationFlowPlugin/CommandFactory.swift",  42LL,  2LL,  273LL,  "asBaseAceCommand",  16LL,  v100,  partial apply for closure #13 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter,  &v100,  v101);
LABEL_52:
    swift_release(v79);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v81, v105);
    v41(v108, v7);
    uint64_t v27 = v113;
    id v74 = v107;
    uint64_t v75 = v7;
    goto LABEL_40;
  }

  if (v45 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.switchProfile(_:))
  {
    uint64_t v82 = type metadata accessor for PerformanceUtil(0LL);
    uint64_t v79 = static PerformanceUtil.shared.getter(v82);
    uint64_t v83 = __chkstk_darwin(v79);
    unint64_t v81 = v104;
    Date.init()(v83);
    uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAProfileSwitch?);
    LOBYTE(v100) = 2;
    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( &v113,  0xD000000000000033LL,  0x8000000000082220LL,  0LL,  v81,  "InformationFlowPlugin/CommandFactory.swift",  42LL,  2LL,  261LL,  "asBaseAceCommand",  16LL,  v100,  partial apply for closure #10 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter,  &v100,  v101);
    goto LABEL_52;
  }

  if (v45 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.pushOff(_:))
  {
    uint64_t v84 = type metadata accessor for PerformanceUtil(0LL);
    uint64_t v79 = static PerformanceUtil.shared.getter(v84);
    uint64_t v85 = __chkstk_darwin(v79);
    unint64_t v81 = v104;
    Date.init()(v85);
    uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAInitiateHandoffOnCompanion?);
    LOBYTE(v100) = 2;
    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( &v113,  0xD00000000000002DLL,  0x8000000000082260LL,  0LL,  v81,  "InformationFlowPlugin/CommandFactory.swift",  42LL,  2LL,  257LL,  "asBaseAceCommand",  16LL,  v100,  partial apply for closure #9 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter,  &v100,  v101);
    goto LABEL_52;
  }

  if (v45 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.searchMarketplace(_:))
  {
    uint64_t v86 = type metadata accessor for PerformanceUtil(0LL);
    uint64_t v79 = static PerformanceUtil.shared.getter(v86);
    uint64_t v87 = __chkstk_darwin(v79);
    unint64_t v81 = v104;
    Date.init()(v87);
    uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAAppsSearchMarketplace?);
    LOBYTE(v100) = 2;
    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( &v113,  0xD000000000000037LL,  0x8000000000082010LL,  0LL,  v81,  "InformationFlowPlugin/CommandFactory.swift",  42LL,  2LL,  293LL,  "asBaseAceCommand",  16LL,  v100,  partial apply for closure #18 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter,  &v100,  v101);
    goto LABEL_52;
  }

  if (v45 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.showLocalSearchResult(_:))
  {
    uint64_t v88 = type metadata accessor for PerformanceUtil(0LL);
    uint64_t v79 = static PerformanceUtil.shared.getter(v88);
    uint64_t v89 = __chkstk_darwin(v79);
    unint64_t v81 = v104;
    Date.init()(v89);
    uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SALocalSearchShowLocalSearchResult?);
    LOBYTE(v100) = 2;
    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( &v113,  0xD00000000000003BLL,  0x8000000000082350LL,  0LL,  v81,  "InformationFlowPlugin/CommandFactory.swift",  42LL,  2LL,  240LL,  "asBaseAceCommand",  16LL,  v100,  partial apply for closure #5 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter,  &v100,  v101);
    goto LABEL_52;
  }

  uint64_t v90 = v30(v106, v108, v7);
  int v91 = (os_log_s *)Logger.logObject.getter(v90);
  os_log_type_t v92 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v91, v92))
  {
    uint64_t v93 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v111 = swift_slowAlloc(32LL, -1LL);
    uint64_t v113 = v111;
    *(_DWORD *)uint64_t v93 = 136315138;
    uint64_t v110 = v93 + 4;
    uint64_t v94 = v109;
    id v95 = v106;
    v30(v109, v106, v77);
    uint64_t v96 = String.init<A>(describing:)(v94, v77);
    unint64_t v98 = v97;
    uint64_t v112 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v97, &v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113);
    swift_bridgeObjectRelease(v98);
    v41(v95, v77);
    _os_log_impl(&dword_0, v91, v92, "Unknown (future?) command type: %s", v93, 0xCu);
    uint64_t v99 = v111;
    swift_arrayDestroy(v111, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v99, -1LL, -1LL);
    swift_slowDealloc(v93, -1LL, -1LL);
  }

  else
  {

    v41(v106, v7);
  }

  v41(v108, v77);
  v41(v107, v77);
  return 0LL;
}

uint64_t closure #1 in static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:)@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of IdentifiedUser?( a1,  (uint64_t)v10,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1LL, v4);
  if ((_DWORD)result == 1)
  {
    uint64_t v12 = _swiftEmptyArrayStorage;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    uint64_t v12 = (void *)specialized static CommandFactory.makeCommands(forDirectExecution:)();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  *a2 = v12;
  return result;
}

uint64_t closure #2 in static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:)@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = _swiftEmptyArrayStorage;
  uint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v19 = a2;
    uint64_t v20 = v2;
    uint64_t v12 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v13 = *(void *)(v6 + 72);
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v18 = a1;
    swift_bridgeObjectRetain(a1);
    do
    {
      v14(v9, v12, v5);
      specialized static CommandFactory.makeCommands(forDelayedAction:viewFactory:)((uint64_t)v9, 0LL);
      uint64_t v16 = v15;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      specialized Array.append<A>(contentsOf:)( v16,  (uint64_t (*)(uint64_t, void, uint64_t))specialized Array._copyContents(initializing:));
      v12 += v13;
      --v11;
    }

    while (v11);
    uint64_t result = swift_bridgeObjectRelease(v18);
    uint64_t v10 = v21;
    a2 = v19;
  }

  *a2 = v10;
  return result;
}

uint64_t closure #3 in static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:)@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItComponent(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = _swiftEmptyArrayStorage;
  uint64_t v20 = _swiftEmptyArrayStorage;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v18 = a2;
    uint64_t v19 = v2;
    uint64_t v12 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v13 = *(void *)(v6 + 72);
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v17 = a1;
    swift_bridgeObjectRetain(a1);
    do
    {
      v14(v9, v12, v5);
      uint64_t v15 = specialized static CommandFactory.makeCommands(forSayItComponent:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      specialized Array.append<A>(contentsOf:)( v15,  (uint64_t (*)(uint64_t, void, uint64_t))specialized Array._copyContents(initializing:));
      v12 += v13;
      --v11;
    }

    while (v11);
    uint64_t result = swift_bridgeObjectRelease(v17);
    uint64_t v10 = v20;
    a2 = v18;
  }

  *a2 = v10;
  return result;
}

uint64_t partial apply for closure #1 in static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:)@<X0>( void *a1@<X8>)
{
  return closure #1 in static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:)( *(void *)(v1 + 16),  a1);
}

uint64_t partial apply for closure #2 in static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:)@<X0>( void *a1@<X8>)
{
  return closure #2 in static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:)( *(void *)(v1 + 16),  a1);
}

uint64_t partial apply for closure #3 in static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:)@<X0>( void *a1@<X8>)
{
  return closure #3 in static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:)( *(void *)(v1 + 16),  a1);
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL));
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [SAAceView] and conformance [A]( &lazy protocol witness table cache variable for type [SABaseCommand] and conformance [A],  (uint64_t *)&demangling cache variable for type metadata for [SABaseCommand]);
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SABaseCommand]);
          uint64_t v13 = specialized protocol witness for Collection.subscript.read in conformance [A](v18, i, a3);
          id v15 = *v14;
          ((void (*)(void (**)(id *), void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease(a3);
        return a3;
      }

      goto LABEL_24;
    }

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t (*v13)();
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  uint64_t (*v18[4])();
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL));
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [SAAceView] and conformance [A]( &lazy protocol witness table cache variable for type [SAAceView] and conformance [A],  (uint64_t *)&demangling cache variable for type metadata for [SAAceView]);
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SAAceView]);
          uint64_t v13 = specialized protocol witness for Collection.subscript.read in conformance [A](v18, i, a3);
          id v15 = *v14;
          ((void (*)(uint64_t (**)(), void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease(a3);
        return a3;
      }

      goto LABEL_24;
    }

void *specialized static CommandFactory.makeCommands(forComponent:)(uint64_t a1)
{
  return specialized static CommandFactory.makeCommands(forComponent:)( a1,  (uint64_t (*)(uint64_t))&Apple_Parsec_Siri_V2alpha_ButtonViewComponent.commands.getter);
}

{
  return specialized static CommandFactory.makeCommands(forComponent:)( a1,  (uint64_t (*)(uint64_t))&Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.siriCommandBuilder.getter);
}

void *specialized static CommandFactory.makeCommands(forListItem:)(uint64_t a1)
{
  return specialized static CommandFactory.makeCommands(forComponent:)( a1,  (uint64_t (*)(uint64_t))&Apple_Parsec_Siri_V2alpha_DisambiguationListItem.commands.getter);
}

void *specialized static CommandFactory.makeCommands(forComponent:)( uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2(v5);
  uint64_t v9 = v8;
  uint64_t v10 = _swiftEmptyArrayStorage;
  unint64_t v43 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v11 = *(void *)(v8 + 16);
  if (v11)
  {
    unint64_t v12 = v8 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v13 = *(void *)(v4 + 72);
    uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v37 = v8;
    swift_bridgeObjectRetain(v8);
    __int128 v38 = xmmword_7D060;
    uint64_t v39 = v13;
    while (1)
    {
      v14(v7, v12, v3);
      uint64_t v15 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter();
      if (v15)
      {
        uint64_t v16 = (void *)v15;
        uint64_t v42 = &OBJC_PROTOCOL___SAClientBoundCommand;
        uint64_t v17 = swift_dynamicCastObjCProtocolConditional(v15, 1LL, &v42);
        id v18 = (id)v17;
        if (v17) {
          goto LABEL_10;
        }
        uint64_t v41 = &OBJC_PROTOCOL___SAServerBoundCommand;
        uint64_t v19 = swift_dynamicCastObjCProtocolConditional(v16, 1LL, &v41);
        if (v19)
        {
          uint64_t v20 = v19;
          id v21 = objc_allocWithZone(&OBJC_CLASS___SASendCommands);
          id v22 = v16;
          id v18 = [v21 init];
          uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v24 = swift_allocObject(v23, 40LL, 7LL);
          *(_OWORD *)(v24 + 16) = v38;
          *(void *)(v24 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v20;
          uint64_t v40 = v24;
          specialized Array._endMutation()(v24);
          uint64_t v25 = v40;
          id v26 = v22;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAServerBoundCommand);
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v25);
          [v18 setCommands:isa];

          uint64_t v13 = v39;
LABEL_10:
          Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter(v17);
          uint64_t v29 = v28;
          NSString v30 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v29);
          [v18 setAceId:v30];

          uint64_t v31 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v31);
          unint64_t v33 = *(void *)((char *)&dword_10 + (v43 & 0xFFFFFFFFFFFFFF8LL));
          unint64_t v32 = *(void *)((char *)&dword_18 + (v43 & 0xFFFFFFFFFFFFFF8LL));
          if (v33 >= v32 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1LL);
          }
          uint64_t v34 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, v18);
          specialized Array._endMutation()(v34);
          goto LABEL_5;
        }
      }

      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
LABEL_5:
      v12 += v13;
      if (!--v11)
      {
        uint64_t v9 = v37;
        swift_bridgeObjectRelease(v37);
        uint64_t v10 = (void *)v43;
        break;
      }
    }
  }

  swift_bridgeObjectRelease(v9);
  return v10;
}

id partial apply for closure #18 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>( void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeSearchMarketplace(cmdBuilder:)();
  *a1 = result;
  return result;
}

id partial apply for closure #17 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>( void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeOpenLink(cmdBuilder:)();
  *a1 = result;
  return result;
}

id partial apply for closure #16 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>( void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeUnlockDeviceWithWatch(cmdBuilder:)();
  *a1 = result;
  return result;
}

id partial apply for closure #15 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>( void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeUnlockDevice(cmdBuilder:)();
  *a1 = result;
  return result;
}

id partial apply for closure #14 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>( void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeSetSiriAuthorizationForApp(cmdBuilder:)();
  *a1 = result;
  return result;
}

id partial apply for closure #13 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>( void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeCancelCurrentTTS(cmdBuilder:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

id partial apply for closure #12 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>( void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeExtendCurrentTTS(cmdBuilder:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

void *partial apply for closure #11 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>( void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makePhoneCall(cmdBuilder:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

id partial apply for closure #10 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>( void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeSwitchProfile(cmdBuilder:)();
  *a1 = result;
  return result;
}

void partial apply for closure #9 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter( void *a1@<X8>)
{
  *a1 = v3;
}

void *partial apply for closure #8 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>( void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeRecordLocationActivity(cmdBuilder:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

id partial apply for closure #7 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>( void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeEndNavigation(cmdBuilder:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

void *partial apply for closure #6 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>( void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeStartRequest(cmdBuilder:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

void *partial apply for closure #5 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>( void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeShowLocalSearchResult(cmdBuilder:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

void *partial apply for closure #4 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>( void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeShowMapPoints(cmdBuilder:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

id partial apply for closure #3 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>( void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeShowPlaceDetails(cmdBuilder:)();
  *a1 = result;
  return result;
}

void *partial apply for closure #2 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>( void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeSayIt(cmdBuilder:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

void *partial apply for closure #1 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>( void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeAppPunchOut(cmdBuilder:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

uint64_t specialized static CommandFactory.makeCommands(forDirectExecution:)()
{
  uint64_t v83 = type metadata accessor for UUID(0LL);
  uint64_t v81 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v82 = (char *)&v77 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = Apple_Parsec_Siri_V2alpha_DirectExecutionComponent.siriCommandBuilder.getter(v3);
  uint64_t v7 = v6;
  uint64_t v8 = (uint64_t)_swiftEmptyArrayStorage;
  unint64_t v88 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v9 = *(void *)(v6 + 16);
  uint64_t v10 = &unk_7D000;
  if (v9)
  {
    unint64_t v11 = v6 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    uint64_t v12 = *(void *)(v2 + 72);
    *(void *)&__int128 v84 = *(void *)(v2 + 16);
    uint64_t v78 = v6;
    swift_bridgeObjectRetain(v6);
    __int128 v79 = xmmword_7D060;
    uint64_t v80 = v12;
    while (1)
    {
      ((void (*)(char *, unint64_t, uint64_t))v84)(v5, v11, v1);
      uint64_t v13 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter();
      if (v13) {
        break;
      }
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
LABEL_4:
      v11 += v12;
      if (!--v9)
      {
        uint64_t v7 = v78;
        swift_bridgeObjectRelease(v78);
        uint64_t v8 = v88;
        goto LABEL_15;
      }
    }

    uint64_t v14 = (void *)v13;
    uint64_t v15 = v10;
    uint64_t v87 = &OBJC_PROTOCOL___SAClientBoundCommand;
    uint64_t v16 = swift_dynamicCastObjCProtocolConditional(v13, 1LL, &v87);
    id v17 = (id)v16;
    if (!v16)
    {
      uint64_t v86 = &OBJC_PROTOCOL___SAServerBoundCommand;
      uint64_t v18 = swift_dynamicCastObjCProtocolConditional(v14, 1LL, &v86);
      if (!v18)
      {

        (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
LABEL_12:
        uint64_t v10 = v15;
        goto LABEL_4;
      }

      uint64_t v19 = v18;
      id v20 = objc_allocWithZone(&OBJC_CLASS___SASendCommands);
      id v21 = v14;
      id v17 = [v20 init];
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v23 = swift_allocObject(v22, 40LL, 7LL);
      *(_OWORD *)(v23 + 16) = v79;
      *(void *)(v23 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v19;
      uint64_t v85 = v23;
      specialized Array._endMutation()(v23);
      uint64_t v24 = v85;
      id v25 = v21;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAServerBoundCommand);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v24);
      [v17 setCommands:isa];

      uint64_t v12 = v80;
    }

    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter(v16);
    uint64_t v28 = v27;
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v28);
    [v17 setAceId:v29];

    uint64_t v30 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v30);
    unint64_t v32 = *(void *)((char *)&dword_10 + (v88 & 0xFFFFFFFFFFFFFF8LL));
    unint64_t v31 = *(void *)((char *)&dword_18 + (v88 & 0xFFFFFFFFFFFFFF8LL));
    if (v32 >= v31 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1LL);
    }
    uint64_t v33 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v17);
    specialized Array._endMutation()(v33);
    goto LABEL_12;
  }

LABEL_15:
  swift_bridgeObjectRelease(v7);
  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0) {
      uint64_t v54 = v8;
    }
    else {
      uint64_t v54 = v8 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v8);
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(v54);
    uint64_t v34 = result;
    if (result) {
      goto LABEL_17;
    }
LABEL_38:
    swift_bridgeObjectRelease(v8);
    id v55 = [objc_allocWithZone(SAResultCallback) init];
    uint64_t v56 = v82;
    uint64_t v57 = UUID.init()(v55);
    UUID.uuidString.getter(v57);
    uint64_t v59 = v58;
    uint64_t v60 = *(void (**)(char *, uint64_t))(v81 + 8);
    uint64_t v61 = v83;
    v60(v56, v83);
    NSString v62 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v59);
    [v55 setAceId:v62];

    [v55 setCode:SAResultCallbackAnySuccessCodeValue];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    Class v63 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v8);
    [v55 setCommands:v63];

    id v64 = [objc_allocWithZone(SARequestCompleted) init];
    uint64_t v65 = UUID.init()(v64);
    UUID.uuidString.getter(v65);
    uint64_t v67 = v66;
    v60(v56, v61);
    NSString v68 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v67);
    [v64 setAceId:v68];

    uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v70 = swift_allocObject(v69, 40LL, 7LL);
    __int128 v84 = v10[6];
    *(_OWORD *)(v70 + 16) = v84;
    *(void *)(v70 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v55;
    unint64_t v88 = v70;
    specialized Array._endMutation()(v70);
    unint64_t v71 = v88;
    type metadata accessor for SABaseCommand( 0LL,  (unint64_t *)&lazy cache variable for type metadata for SAResultCallback,  &OBJC_CLASS___SAResultCallback_ptr);
    id v72 = v55;
    id v73 = v64;
    Class v74 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v71);
    [v73 setCallbacks:v74];

    uint64_t v75 = swift_allocObject(v69, 40LL, 7LL);
    *(_OWORD *)(v75 + 16) = v84;
    *(void *)(v75 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v73;
    unint64_t v88 = v75;
    specialized Array._endMutation()(v75);
    unint64_t v76 = v88;

    return v76;
  }

  uint64_t v34 = *(void *)((char *)&dword_10 + (v8 & 0xFFFFFFFFFFFFF8LL));
  uint64_t result = swift_bridgeObjectRetain(v8);
  if (!v34) {
    goto LABEL_38;
  }
LABEL_17:
  if (v34 >= 1)
  {
    uint64_t v37 = 0LL;
    while (1)
    {
      if ((v8 & 0xC000000000000001LL) != 0)
      {
        unint64_t v43 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v37, v8);
      }

      else
      {
        unint64_t v43 = *(void **)(v8 + 8 * v37 + 32);
        swift_unknownObjectRetain(v43, v36);
      }

      id v44 = [v43 aceId];
      if (v44)
      {
        int v45 = v44;
        uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
        unint64_t v48 = v47;
      }

      else
      {
        uint64_t v46 = 0LL;
        unint64_t v48 = 0xE000000000000000LL;
      }

      uint64_t v49 = swift_bridgeObjectRelease(v48);
      uint64_t v50 = HIBYTE(v48) & 0xF;
      if ((v48 & 0x2000000000000000LL) == 0) {
        uint64_t v50 = v46 & 0xFFFFFFFFFFFFLL;
      }
      if (v50)
      {
        id v51 = [v43 aceId];
        if (!v51)
        {
          NSString v42 = 0LL;
          goto LABEL_21;
        }

        uint64_t v52 = v51;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
        uint64_t v41 = v53;
      }

      else
      {
        __int128 v38 = v82;
        uint64_t v39 = UUID.init()(v49);
        UUID.uuidString.getter(v39);
        uint64_t v41 = v40;
        (*(void (**)(char *, uint64_t))(v81 + 8))(v38, v83);
      }

      NSString v42 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v41);
LABEL_21:
      ++v37;
      [v43 setAceId:v42];
      swift_unknownObjectRelease(v43);

      if (v34 == v37) {
        goto LABEL_38;
      }
    }
  }

  __break(1u);
  return result;
}

uint64_t specialized static CommandFactory.makeCommands(forSayItComponent:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItBuilderParams(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)static Logger.information);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl( &dword_0,  v6,  v7,  "SayItComponent is deprecated - we expect a command builder with SayItBuilderParams instead. Translating.",  v8,  2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  uint64_t v9 = Apple_Parsec_Siri_V2alpha_SayItBuilderParams.init()();
  uint64_t v10 = Apple_Parsec_Siri_V2alpha_SayItComponent.message.getter(v9);
  uint64_t v11 = Apple_Parsec_Siri_V2alpha_SayItBuilderParams.message.setter(v10);
  uint64_t v12 = Apple_Parsec_Siri_V2alpha_SayItComponent.dialogIdentifier.getter(v11);
  uint64_t v13 = Apple_Parsec_Siri_V2alpha_SayItBuilderParams.dialogIdentifier.setter(v12);
  char v14 = Apple_Parsec_Siri_V2alpha_SayItComponent.hasListenAfterSpeaking_p.getter(v13);
  uint64_t v15 = Apple_Parsec_Siri_V2alpha_SayItBuilderParams.hasListenAfterSpeaking_p.setter(v14 & 1);
  char v16 = Apple_Parsec_Siri_V2alpha_SayItComponent.isRepeatable.getter(v15);
  Apple_Parsec_Siri_V2alpha_SayItBuilderParams.isRepeatable.setter(v16 & 1);
  id v17 = specialized static PegasusACEConverters.makeSayIt(params:)();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v19 = swift_allocObject(v18, 40LL, 7LL);
  *(_OWORD *)(v19 + 16) = xmmword_7D060;
  *(void *)(v19 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v17;
  uint64_t v23 = v19;
  specialized Array._endMutation()(v19);
  uint64_t v20 = v23;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v20;
}

void specialized static CommandFactory.makeCommands(forDelayedAction:viewFactory:)(uint64_t a1, uint64_t a2)
{
  *(void *)&__int128 v275 = a2;
  uint64_t v263 = type metadata accessor for DeviceClass(0LL);
  uint64_t v266 = *(void *)(v263 - 8);
  __chkstk_darwin(v263);
  uint64_t v259 = (char *)&v258 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v262 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (DeviceClass?, DeviceClass?));
  __chkstk_darwin(v262);
  uint64_t v268 = (uint64_t)&v258 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeviceClass?);
  uint64_t v6 = __chkstk_darwin(v5);
  v271 = (char *)&v258 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v276 = (char *)&v258 - v9;
  __chkstk_darwin(v8);
  uint64_t v269 = (uint64_t)&v258 - v10;
  uint64_t v11 = (void *)type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder(0LL);
  *(void *)&__int128 v277 = *(v11 - 1);
  uint64_t v12 = __chkstk_darwin(v11);
  unint64_t v261 = (char *)&v258 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  v265 = (char *)&v258 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  id v267 = (char *)&v258 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v258 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (uint64_t)&v258 - v21;
  v274 = (char *)type metadata accessor for UUID(0LL);
  uint64_t v272 = *((void *)v274 - 1);
  __chkstk_darwin(v274);
  uint64_t v273 = (char *)&v258 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesCandidateId?);
  __chkstk_darwin(v24);
  *(void *)&__int128 v264 = (char *)&v258 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DialogPhase?);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v258 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v29);
  unint64_t v31 = (char *)&v258 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent(0LL);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v36 = (char *)&v258 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v37 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.hasRenderedDialog.getter(v34);
  __int128 v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 16);
  uint64_t v270 = a1;
  uint64_t v39 = v38(v36, a1, v32);
  if ((v37 & 1) != 0)
  {
    uint64_t v40 = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v36, v32);
  }

  else
  {
    uint64_t v41 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.layoutExperiences.getter(v39);
    uint64_t v42 = *(void *)(v41 + 16);
    swift_bridgeObjectRelease(v41);
    uint64_t v40 = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v36, v32);
    if (!v42)
    {
      *(void *)&__int128 v275 = _swiftEmptyArrayStorage;
      uint64_t v84 = (uint64_t)v271;
      uint64_t v85 = v269;
      uint64_t v64 = (uint64_t)v276;
      goto LABEL_28;
    }
  }

  uint64_t v43 = v275;
  if ((void)v275)
  {
    id v44 = (void *)v275;
  }

  else
  {
    static Device.current.getter(&v283, v40);
    type metadata accessor for CommonCATs(0LL);
    static CATOption.defaultMode.getter();
    uint64_t v45 = CATWrapper.__allocating_init(options:globals:)(v31, 0LL);
    uint64_t v46 = type metadata accessor for InformationViewFactory();
    id v44 = (void *)swift_allocObject(v46, 104LL, 7LL);
    id v47 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
    uint64_t v48 = type metadata accessor for PommesServerFallbackPreferences(0LL);
    swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
    uint64_t v49 = PommesServerFallbackPreferences.init(_:)(v47);
    v44[11] = v48;
    v44[12] = &protocol witness table for PommesServerFallbackPreferences;
    v44[8] = v49;
    outlined init with take of PatternFlowProviding(&v283, (uint64_t)(v44 + 3));
    v44[2] = v45;
  }

  uint64_t v50 = swift_retain(v43);
  uint64_t v51 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.layoutExperiences.getter(v50);
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_RenderedDialogComponent>);
  uint64_t v53 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent(0LL);
  uint64_t v54 = swift_allocObject( v52,  ((*(unsigned __int8 *)(*(void *)(v53 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v53 - 8) + 80LL))
        + *(void *)(*(void *)(v53 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v53 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v54 + 16) = xmmword_7CCD0;
  Apple_Parsec_Siri_V2alpha_DelayedActionComponent.renderedDialog.getter();
  uint64_t v55 = type metadata accessor for DialogPhase(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56LL))(v28, 1LL, 1LL, v55);
  uint64_t v56 = type metadata accessor for PommesCandidateId(0LL);
  uint64_t v57 = v264;
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56LL))(v264, 1LL, 1LL, v56);
  unint64_t v58 = (*(uint64_t (**)(uint64_t, uint64_t, void *, void *, void *, void, char *, void, void, uint64_t))(*v44 + 152LL))( v51,  v54,  _swiftEmptyArrayStorage,  _swiftEmptyArrayStorage,  _swiftEmptyArrayStorage,  0LL,  v28,  0LL,  0LL,  v57);
  uint64_t v60 = v59;
  swift_bridgeObjectRelease(v51);
  swift_bridgeObjectRelease(v54);
  outlined destroy of Any?(v57, (uint64_t *)&demangling cache variable for type metadata for PommesCandidateId?);
  outlined destroy of Any?((uint64_t)v28, &demangling cache variable for type metadata for DialogPhase?);
  uint64_t v61 = v60;
  uint64_t v62 = v58;
  swift_bridgeObjectRelease(v61);
  id v260 = v44;
  if (v58 >> 62) {
    goto LABEL_121;
  }
  uint64_t v63 = *(void *)((char *)&dword_10 + (v58 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(v58);
  while (1)
  {
    uint64_t v64 = (uint64_t)v276;
    *(void *)&__int128 v275 = v62;
    if (v63)
    {
      if (v63 >= 1)
      {
        uint64_t v65 = 0LL;
        unint64_t v66 = v62 & 0xC000000000000001LL;
        while (1)
        {
          if (v66) {
            id v72 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v65, v62);
          }
          else {
            id v72 = *(id *)(v62 + 8 * v65 + 32);
          }
          id v73 = v72;
          id v74 = [v73 aceId];
          if (v74)
          {
            uint64_t v75 = v74;
            uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
            unint64_t v78 = v77;
          }

          else
          {
            uint64_t v76 = 0LL;
            unint64_t v78 = 0xE000000000000000LL;
          }

          uint64_t v79 = swift_bridgeObjectRelease(v78);
          uint64_t v80 = HIBYTE(v78) & 0xF;
          if ((v78 & 0x2000000000000000LL) == 0) {
            uint64_t v80 = v76 & 0xFFFFFFFFFFFFLL;
          }
          if (v80)
          {
            id v81 = [v73 aceId];
            if (!v81)
            {
              NSString v71 = 0LL;
              goto LABEL_14;
            }

            uint64_t v82 = v81;
            static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
            uint64_t v70 = v83;
          }

          else
          {
            uint64_t v67 = v273;
            uint64_t v68 = UUID.init()(v79);
            UUID.uuidString.getter(v68);
            uint64_t v70 = v69;
            (*(void (**)(char *, char *))(v272 + 8))(v67, v274);
          }

          NSString v71 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v70);
LABEL_14:
          ++v65;
          [v73 setAceId:v71];

          uint64_t v62 = v275;
          uint64_t v64 = (uint64_t)v276;
          if (v63 == v65) {
            goto LABEL_27;
          }
        }
      }

      __break(1u);
      goto LABEL_155;
    }

ValueMetadata *type metadata accessor for CommandFactory()
{
  return &type metadata for CommandFactory;
}

unint64_t lazy protocol witness table accessor for type DeviceClass and conformance DeviceClass()
{
  unint64_t result = lazy protocol witness table cache variable for type DeviceClass and conformance DeviceClass;
  if (!lazy protocol witness table cache variable for type DeviceClass and conformance DeviceClass)
  {
    uint64_t v1 = type metadata accessor for DeviceClass(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DeviceClass, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DeviceClass and conformance DeviceClass);
  }

  return result;
}

uint64_t lazy protocol witness table accessor for type [SAAceView] and conformance [A]( unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t specialized Dictionary.merging(_:uniquingKeysWith:)( uint64_t a1, void (*a2)(_OWORD *__return_ptr, void *, _OWORD *), uint64_t a3, uint64_t a4)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a4);
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)( a1,  (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B),  0LL,  isUniquelyReferenced_nonNull_native,  a2,  a3);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  if (v4) {
    swift_bridgeObjectRelease(a4);
  }
  return a4;
}

uint64_t closure #1 in variable initialization expression of static GenericResultSetParamBuilder.duplicateHandler@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of Any(a1, a2);
}

uint64_t GenericResultSetParamBuilder.parameters.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_bridgeObjectRetain(a3);
}

uint64_t GenericResultSetParamBuilder.items.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_bridgeObjectRetain(a4);
}

InformationFlowPlugin::GenericResultSetParamBuilder __swiftcall GenericResultSetParamBuilder.init(parameters:items:itemsFieldName:)( Swift::OpaquePointer parameters, Swift::OpaquePointer items, Swift::String itemsFieldName)
{
  uint64_t countAndFlagsBits = itemsFieldName._countAndFlagsBits;
  object = itemsFieldName._object;
  rawValue = parameters._rawValue;
  uint64_t v8 = items._rawValue;
  result.items._rawValue = v8;
  result.parameters._rawValue = rawValue;
  result.itemsFieldName._object = object;
  result.itemsFieldName._uint64_t countAndFlagsBits = countAndFlagsBits;
  return result;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(_OWORD *__return_ptr, void *, _OWORD *), uint64_t a6)
{
  uint64_t v8 = v7;
  uint64_t v9 = v6;
  uint64_t v53 = a6;
  uint64_t v12 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v13 = ~v12;
  uint64_t v14 = *(void *)(a1 + 64);
  uint64_t v15 = -v12;
  uint64_t v46 = a1;
  uint64_t v47 = a1 + 64;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  else {
    uint64_t v16 = -1LL;
  }
  uint64_t v48 = v13;
  uint64_t v49 = 0LL;
  uint64_t v50 = v16 & v14;
  uint64_t v51 = a2;
  uint64_t v52 = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain(a3);
  specialized LazyMapSequence.Iterator.next()(&v44);
  uint64_t v17 = *((void *)&v44 + 1);
  if (!*((void *)&v44 + 1))
  {
LABEL_20:
    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    outlined consume of [String : Any].Iterator._Variant(v46);
    return swift_release(v52);
  }

  while (1)
  {
    uint64_t v23 = v44;
    v43[0] = v44;
    v43[1] = v17;
    outlined init with take of Any(&v45, v42);
    uint64_t v24 = *(void **)v9;
    unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v17);
    uint64_t v27 = v24[2];
    BOOL v28 = (v25 & 1) == 0;
    uint64_t v29 = v27 + v28;
    if (__OFADD__(v27, v28))
    {
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_26;
    }

    char v30 = v25;
    if (v24[3] < v29) {
      break;
    }
    if ((a4 & 1) != 0)
    {
      if ((v25 & 1) != 0) {
        goto LABEL_16;
      }
    }

    else
    {
      specialized _NativeDictionary.copy()();
      if ((v30 & 1) != 0) {
        goto LABEL_16;
      }
    }

uint64_t specialized static GenericResultSetParamBuilder.fieldName(for:)(uint64_t a1)
{
  if (*(void *)(a1 + 16)
    && (unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012LL, 0x80000000000824C0LL), (v3 & 1) != 0)
    && (outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v2, (uint64_t)v19),
        (swift_dynamicCast(&v17, v19, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0))
  {
    uint64_t v4 = v17;
    unint64_t v5 = v18;
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v6, (uint64_t)static Logger.information);
    uint64_t v7 = swift_bridgeObjectRetain_n(v5, 2LL);
    uint64_t v8 = (void *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled((os_log_t)v8, v9))
    {

      swift_bridgeObjectRelease_n(v5, 2LL);
      return v4;
    }

    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    v19[0] = v11;
    *(_DWORD *)uint64_t v10 = 136315138;
    swift_bridgeObjectRetain(v5);
    uint64_t v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
    swift_bridgeObjectRelease_n(v5, 3LL);
    _os_log_impl(&dword_0, (os_log_t)v8, v9, "Found custom item field name set in Parameters %s", v10, 0xCu);
    uint64_t v12 = (char *)&type metadata for Any + 8;
  }

  else
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    uint64_t v14 = __swift_project_value_buffer(v13, (uint64_t)static Logger.information);
    uint64_t v8 = (void *)Logger.logObject.getter(v14);
    os_log_type_t v15 = static os_log_type_t.info.getter();
    uint64_t v4 = 0x736D657469LL;
    if (!os_log_type_enabled((os_log_t)v8, v15))
    {

      return v4;
    }

    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    v19[0] = v11;
    *(_DWORD *)uint64_t v10 = 136315138;
    uint64_t v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x736D657469LL, 0xE500000000000000LL, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
    _os_log_impl(&dword_0, (os_log_t)v8, v15, "No Custom field name found. Defaulting to %s", v10, 0xCu);
    uint64_t v12 = (char *)&type metadata for Any + 8;
  }

  swift_arrayDestroy(v11, 1LL, v12);
  swift_slowDealloc(v11, -1LL, -1LL);
  swift_slowDealloc(v10, -1LL, -1LL);

  return v4;
}

uint64_t specialized GenericResultSetParamBuilder.init(parameters:)(uint64_t a1)
{
  unint64_t v2 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v3 = swift_bridgeObjectRetain(a1);
  uint64_t v29 = specialized Dictionary.merging(_:uniquingKeysWith:)( v3,  (void (*)(_OWORD *__return_ptr, void *, _OWORD *))closure #1 in variable initialization expression of static GenericResultSetParamBuilder.duplicateHandler,  0LL,  v2);
  uint64_t v4 = specialized static GenericResultSetParamBuilder.fieldName(for:)(a1);
  unint64_t v6 = v5;
  specialized Dictionary._Variant.removeValue(forKey:)(v4, v5, v27);
  if (v28)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : Any]]);
    if ((swift_dynamicCast(&v26, v27, (char *)&type metadata for Any + 8, v7, 6LL) & 1) != 0)
    {
      swift_bridgeObjectRelease(a1);
      uint64_t v8 = v26;
      int64_t v9 = *(void *)(v26 + 16);
      if (v9)
      {
        v27[0] = (uint64_t)_swiftEmptyArrayStorage;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
        uint64_t v10 = 0LL;
        uint64_t v11 = v27[0];
        do
        {
          uint64_t v12 = *(void *)(v8 + 8 * v10 + 32);
          v27[0] = v11;
          unint64_t v13 = *(void *)(v11 + 16);
          unint64_t v14 = *(void *)(v11 + 24);
          swift_bridgeObjectRetain(v12);
          if (v13 >= v14 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v14 > 1,  v13 + 1,  1);
            uint64_t v11 = v27[0];
          }

          ++v10;
          *(void *)(v11 + 16) = v13 + 1;
          *(void *)(v11 + 8 * v13 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v12;
        }

        while (v9 != v10);
        swift_bridgeObjectRelease(v8);
      }

      else
      {
        swift_bridgeObjectRelease(v26);
      }

      return v4;
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)v27);
  }

  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v15, (uint64_t)static Logger.information);
  swift_bridgeObjectRetain(a1);
  uint64_t v16 = swift_bridgeObjectRetain(v6);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc(22LL, -1LL);
    uint64_t v20 = swift_slowAlloc(64LL, -1LL);
    v27[0] = v20;
    *(_DWORD *)uint64_t v19 = 136315394;
    swift_bridgeObjectRetain(v6);
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v6, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27);
    swift_bridgeObjectRelease_n(v6, 3LL);
    *(_WORD *)(v19 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    uint64_t v21 = swift_bridgeObjectRetain(a1);
    uint64_t v22 = Dictionary.description.getter( v21,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    unint64_t v24 = v23;
    swift_bridgeObjectRelease(a1);
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27);
    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease(v24);
    _os_log_impl( &dword_0,  v17,  v18,  "GenericResultSet initialized with empty item list at %s, %s",  (uint8_t *)v19,  0x16u);
    swift_arrayDestroy(v20, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease_n(v6, 2LL);
  }

  return 0x736D657469LL;
}

void *specialized GenericResultSetParamBuilder.itemPatternParameters(items:)(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v3 = (void *)(a1 + 32);
    do
    {
      uint64_t v4 = *v3;
      unint64_t v5 = _swiftEmptyArrayStorage[2];
      unint64_t v6 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(*v3);
      if (v5 >= v6 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v5 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v5 + 1;
      _swiftEmptyArrayStorage[v5 + 4] = v4;
      ++v3;
      --v1;
    }

    while (v1);
  }

  return _swiftEmptyArrayStorage;
}

uint64_t specialized GenericResultSetParamBuilder.patternParameters(for:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v9 = swift_bridgeObjectRetain(a4);
  uint64_t v10 = specialized Dictionary.merging(_:uniquingKeysWith:)( v9,  (void (*)(_OWORD *__return_ptr, void *, _OWORD *))closure #1 in variable initialization expression of static GenericResultSetParamBuilder.duplicateHandler,  0LL,  v8);
  uint64_t v11 = specialized GenericResultSetParamBuilder.itemPatternParameters(items:)(a1);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : Any]]);
  *(void *)&__int128 v14 = v11;
  swift_bridgeObjectRetain(a3);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
  specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(&v14, a2, a3, isUniquelyReferenced_nonNull_native, v16);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  outlined destroy of Any?((uint64_t)v16);
  return v10;
}

uint64_t destroy for GenericResultSetParamBuilder(void *a1)
{
  return swift_bridgeObjectRelease(a1[3]);
}

void *initializeWithCopy for GenericResultSetParamBuilder(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  a1[2] = v4;
  a1[3] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *assignWithCopy for GenericResultSetParamBuilder(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for GenericResultSetParamBuilder(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a1[3];
  a1[3] = *(void *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericResultSetParamBuilder(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericResultSetParamBuilder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for GenericResultSetParamBuilder()
{
  return &type metadata for GenericResultSetParamBuilder;
}

ValueMetadata *type metadata accessor for GenericResultSetItem()
{
  return &type metadata for GenericResultSetItem;
}

uint64_t specialized static SportsPersonalizationMetrics.submit<A>(for:instruction:logger:)( int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v103 = a3;
  int v97 = a1;
  uint64_t v4 = type metadata accessor for SportsResolverMetrics(0LL);
  uint64_t v98 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsResolverMetrics?);
  uint64_t v8 = __chkstk_darwin(v7);
  id v96 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v101 = (uint64_t)&v92 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  uint64_t v12 = __chkstk_darwin(v11);
  __int128 v14 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v104 = (uint64_t)&v92 - v16;
  __chkstk_darwin(v15);
  os_log_type_t v18 = (char *)&v92 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v94 = (char *)&v92 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  unint64_t v23 = (char *)&v92 - v22;
  uint64_t v24 = type metadata accessor for SportsResolverConfig(0LL);
  uint64_t v99 = *(void *)(v24 - 8);
  uint64_t v100 = v24;
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v95 = (char *)&v92 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25);
  Class v105 = (char *)&v92 - v27;
  outlined init with copy of IdentifiedUser?( a2,  (uint64_t)v18,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  uint64_t v28 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  char v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  uint64_t v31 = v30(v18, 1LL, v28);
  uint64_t v102 = v6;
  if ((_DWORD)v31 == 1)
  {
    outlined destroy of Any?( (uint64_t)v18,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    unint64_t v32 = 0xE700000000000000LL;
    uint64_t v33 = 0x6E776F6E6B6E75LL;
  }

  else
  {
    uint64_t v93 = v4;
    uint64_t v34 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter(v31);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v18, v28);
    uint64_t v35 = *(void *)(v34 + 16);
    uint64_t v36 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity(0LL);
    uint64_t v37 = *(void *)(v36 - 8);
    if (v35)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))( v23,  v34 + ((*(unsigned __int8 *)(v37 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80)),  v36);
      uint64_t v38 = 0LL;
    }

    else
    {
      uint64_t v38 = 1LL;
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56))(v23, v38, 1LL, v36);
    swift_bridgeObjectRelease(v34);
    uint64_t v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48))(v23, 1LL, v36);
    if ((_DWORD)v39 == 1)
    {
      outlined destroy of Any?( (uint64_t)v23,  &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
      unint64_t v32 = 0xE700000000000000LL;
      uint64_t v33 = 0x6E776F6E6B6E75LL;
    }

    else
    {
      uint64_t v33 = Apple_Parsec_Siri_Context_ResultEntity.name.getter(v39);
      unint64_t v32 = v40;
      (*(void (**)(char *, uint64_t))(v37 + 8))(v23, v36);
    }

    uint64_t v4 = v93;
  }

  uint64_t v41 = v104;
  uint64_t v42 = v105;
  SportsResolverConfig.init(intentTypeName:bundleId:)(v33, v32, 0xD00000000000001ALL, 0x800000000007FA50LL);
  uint64_t v43 = outlined init with copy of IdentifiedUser?( a2,  v41,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  __int128 v44 = (os_log_s *)Logger.logObject.getter(v43);
  os_log_type_t v49 = static os_log_type_t.debug.getter(v44, v45, v46, v47, v48);
  if (os_log_type_enabled(v44, v49))
  {
    uint64_t v50 = v41;
    uint64_t v51 = swift_slowAlloc(22LL, -1LL);
    uint64_t v93 = swift_slowAlloc(64LL, -1LL);
    v109[0] = v93;
    *(_DWORD *)uint64_t v51 = 136315394;
    outlined init with copy of IdentifiedUser?( v50,  (uint64_t)v14,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    uint64_t v52 = v30(v14, 1LL, v28);
    if ((_DWORD)v52 == 1)
    {
      outlined destroy of Any?( (uint64_t)v14,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
      unint64_t v53 = 0xE700000000000000LL;
      uint64_t v54 = v98;
      uint64_t v55 = (uint64_t)v96;
      uint64_t v56 = 0x6E776F6E6B6E75LL;
    }

    else
    {
      uint64_t v62 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter(v52);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v28);
      uint64_t v63 = *(void *)(v62 + 16);
      uint64_t v64 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity(0LL);
      uint64_t v65 = *(void *)(v64 - 8);
      uint64_t v56 = 0x6E776F6E6B6E75LL;
      if (v63)
      {
        uint64_t v66 = (uint64_t)v94;
        (*(void (**)(char *, unint64_t, uint64_t))(v65 + 16))( v94,  v62 + ((*(unsigned __int8 *)(v65 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80)),  v64);
        uint64_t v67 = 0LL;
        uint64_t v54 = v98;
      }

      else
      {
        uint64_t v67 = 1LL;
        uint64_t v54 = v98;
        uint64_t v66 = (uint64_t)v94;
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 56))(v66, v67, 1LL, v64);
      swift_bridgeObjectRelease(v62);
      uint64_t v68 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v66, 1LL, v64);
      if ((_DWORD)v68 == 1)
      {
        outlined destroy of Any?( v66,  &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
        unint64_t v53 = 0xE700000000000000LL;
      }

      else
      {
        uint64_t v56 = Apple_Parsec_Siri_Context_ResultEntity.name.getter(v68);
        unint64_t v53 = v69;
        (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v66, v64);
      }

      uint64_t v55 = (uint64_t)v96;
    }

    uint64_t v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v53, v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107);
    swift_bridgeObjectRelease(v53);
    outlined destroy of Any?( v104,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    *(_WORD *)(v51 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    char v70 = v97;
    uint64_t v71 = specialized SportsPersonalizationSelection<A>.debugDescription.getter(v97);
    unint64_t v73 = v72;
    uint64_t v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, v109);
    char v61 = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107);
    swift_bridgeObjectRelease(v73);
    _os_log_impl( &dword_0,  v44,  v49,  "Logging sports personalization metrics: intent=%s selection=%s",  (uint8_t *)v51,  0x16u);
    uint64_t v74 = v93;
    swift_arrayDestroy(v93, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v74, -1LL, -1LL);
    swift_slowDealloc(v51, -1LL, -1LL);

    uint64_t v58 = v101;
    uint64_t v59 = v102;
    uint64_t v57 = v99;
    uint64_t v60 = v100;
    uint64_t v42 = v105;
  }

  else
  {

    outlined destroy of Any?( v41,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    uint64_t v54 = v98;
    uint64_t v57 = v99;
    uint64_t v58 = v101;
    uint64_t v59 = v102;
    uint64_t v60 = v100;
    uint64_t v55 = (uint64_t)v96;
    char v61 = v97;
  }

  if (v61 == 2)
  {
    uint64_t v79 = 1LL;
  }

  else
  {
    uint64_t v75 = v95;
    (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v95, v42, v60);
    if (v61 == 3)
    {
      uint64_t v76 = v75;
      uint64_t v77 = 0LL;
      uint64_t v78 = 0LL;
    }

    else
    {
      uint64_t v78 = v61 & 1;
      uint64_t v76 = v75;
      uint64_t v77 = 1LL;
    }

    SportsResolverMetrics.init(config:isSiriInstructionExecuted:isDisambiguation:isRecommendationFound:isTaskSuccess:)( v76,  1LL,  v77,  v78,  1LL);
    uint64_t v79 = 0LL;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 56))(v58, v79, 1LL, v4);
  outlined init with copy of IdentifiedUser?( v58,  v55,  &demangling cache variable for type metadata for SportsResolverMetrics?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v55, 1LL, v4) == 1)
  {
    outlined destroy of Any?(v58, &demangling cache variable for type metadata for SportsResolverMetrics?);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v42, v60);
    return outlined destroy of Any?(v55, &demangling cache variable for type metadata for SportsResolverMetrics?);
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 32))(v59, v55, v4);
  SportsResolverMetrics.logSportsMetric()();
  if (v81)
  {
    swift_errorRetain(v81);
    uint64_t v82 = swift_errorRetain(v81);
    uint64_t v83 = (os_log_s *)Logger.logObject.getter(v82);
    os_log_type_t v84 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v83, v84))
    {
      uint64_t v85 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v86 = swift_slowAlloc(32LL, -1LL);
      v109[0] = v86;
      *(_DWORD *)uint64_t v85 = 136315138;
      swift_getErrorValue(v81, v108, v107);
      uint64_t v87 = Error.localizedDescription.getter(v107[1], v107[2]);
      unint64_t v89 = v88;
      uint64_t v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v88, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107);
      swift_bridgeObjectRelease(v89);
      swift_errorRelease(v81);
      swift_errorRelease(v81);
      _os_log_impl(&dword_0, v83, v84, "Logging sports metrics failed with: %s", v85, 0xCu);
      swift_arrayDestroy(v86, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1LL, -1LL);
      swift_slowDealloc(v85, -1LL, -1LL);

      swift_errorRelease(v81);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v102, v4);
      outlined destroy of Any?(v101, &demangling cache variable for type metadata for SportsResolverMetrics?);
      return (*(uint64_t (**)(char *, uint64_t))(v99 + 8))(v105, v100);
    }

    swift_errorRelease(v81);
    swift_errorRelease(v81);
    swift_errorRelease(v81);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v59, v4);
    outlined destroy of Any?(v58, &demangling cache variable for type metadata for SportsResolverMetrics?);
    unint64_t v90 = *(uint64_t (**)(char *, uint64_t))(v57 + 8);
    uint64_t v91 = v105;
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v54 + 8))(v59, v4);
    outlined destroy of Any?(v58, &demangling cache variable for type metadata for SportsResolverMetrics?);
    unint64_t v90 = *(uint64_t (**)(char *, uint64_t))(v57 + 8);
    uint64_t v91 = v42;
  }

  return v90(v91, v60);
}

uint64_t specialized SportsPersonalizationSelection<A>.debugDescription.getter(char a1)
{
  if (a1 == 2) {
    return 0x63696C7070616E69LL;
  }
  if (a1 == 3) {
    return 0x756769626D616E75LL;
  }
  _StringGuts.grow(_:)(33LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  if ((a1 & 1) != 0) {
    uint64_t v3 = 1702195828LL;
  }
  else {
    uint64_t v3 = 0x65736C6166LL;
  }
  if ((a1 & 1) != 0) {
    unint64_t v4 = 0xE400000000000000LL;
  }
  else {
    unint64_t v4 = 0xE500000000000000LL;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease(v4);
  v6._uint64_t countAndFlagsBits = 41LL;
  v6._object = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  return 0xD00000000000001ELL;
}

uint64_t SportsPersonalizationEntryPoint.__allocating_init()()
{
  uint64_t v1 = swift_allocObject(v0, 136LL, 7LL);
  *(void *)(v1 + 40) = type metadata accessor for SportsResolver(0LL);
  *(void *)(v1 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = &protocol witness table for SportsResolver;
  __swift_allocate_boxed_opaque_existential_1((void *)(v1 + 16));
  SportsResolver.init()();
  *(void *)(v1 + 80) = &type metadata for Features;
  *(void *)(v1 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = &protocol witness table for Features;
  *(_BYTE *)(v1 + 56) = 1;
  uint64_t v2 = type metadata accessor for IntentDonator();
  uint64_t v3 = swift_allocObject(v2, 16LL, 7LL);
  *(void *)(v1 + 120) = v2;
  *(void *)(v1 + 12__swift_destroy_boxed_opaque_existential_1(v0 + 8) = &protocol witness table for IntentDonator;
  *(void *)(v1 + 96) = v3;
  return v1;
}

BOOL SportsPersonalizationAction.wasMutated.getter(char a1)
{
  return a1 == 3;
}

uint64_t SportsPersonalizationAction.asResultMetrics()(char a1)
{
  return 0x1000302u >> (8 * a1);
}

uint64_t SportsPersonalizationAction.SelectionMetric.recommendationFound.getter(char a1)
{
  return a1 & 1;
}

uint64_t protocol witness for SportsPersonalizationResultMetric.recommendationFound.getter in conformance SportsPersonalizationAction.SelectionMetric()
{
  return *v0;
}

uint64_t SportsPersonalizationResult.action.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t static SportsPersonalizationResult.inapplicable.getter()
{
  return 0LL;
}

uint64_t static SportsPersonalizationResult.unambiguous.getter()
{
  return 0LL;
}

uint64_t static SportsPersonalizationResult.ambiguous.getter()
{
  return 0LL;
}

uint64_t SportsPersonalizationEntryPoint.featureToggle.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync(v1 + 56, a1);
}

uint64_t SportsPersonalizationEntryPoint.intentDonator.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of IdentifiedUser?( v1 + 96,  a1,  &demangling cache variable for type metadata for SportsIntentDonator?);
}

uint64_t SportsPersonalizationEntryPoint.init()()
{
  uint64_t v5 = type metadata accessor for SportsResolver(0LL);
  Swift::String v6 = &protocol witness table for SportsResolver;
  __swift_allocate_boxed_opaque_existential_1(&v4);
  SportsResolver.init()();
  outlined init with take of PatternFlowProviding(&v4, v0 + 16);
  *(void *)(v0 + 80) = &type metadata for Features;
  *(void *)(v0 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = &protocol witness table for Features;
  *(_BYTE *)(v0 + 56) = 1;
  uint64_t v1 = type metadata accessor for IntentDonator();
  uint64_t v2 = swift_allocObject(v1, 16LL, 7LL);
  *(void *)(v0 + 120) = v1;
  *(void *)(v0 + 12__swift_destroy_boxed_opaque_existential_1(v0 + 8) = &protocol witness table for IntentDonator;
  *(void *)(v0 + 96) = v2;
  return v0;
}

uint64_t SportsPersonalizationEntryPoint.__allocating_init(inferenceApi:featureToggle:intentDonator:)( __int128 *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v7 = swift_allocObject(v3, 136LL, 7LL);
  outlined init with take of PatternFlowProviding(a1, v7 + 16);
  outlined init with take of PatternFlowProviding(a2, v7 + 56);
  outlined init with take of Flow?(a3, v7 + 96, &demangling cache variable for type metadata for SportsIntentDonator?);
  return v7;
}

uint64_t SportsPersonalizationEntryPoint.init(inferenceApi:featureToggle:intentDonator:)( __int128 *a1, __int128 *a2, uint64_t a3)
{
  return v3;
}

uint64_t SportsPersonalizationEntryPoint.flowFor(input:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v67 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  Swift::String v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Parse.PegasusResult(0LL);
  uint64_t v68 = *(void *)(v7 - 8);
  uint64_t v69 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Parse(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  __int128 v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (id *)((char *)&v62 - v16);
  Input.parse.getter(v15);
  int v18 = (*(uint64_t (**)(id *, uint64_t))(v11 + 88))(v17, v10);
  if (v18 == enum case for Parse.pegasusResults(_:))
  {
    uint64_t v64 = v14;
    uint64_t v65 = v11;
    uint64_t v62 = a1;
    uint64_t v19 = *(void (**)(id *, uint64_t))(v11 + 96);
    uint64_t v66 = v10;
    v19(v17, v10);
    (*(void (**)(char *, id *, uint64_t))(v68 + 32))(v9, v17, v69);
    uint64_t v20 = type metadata accessor for PerformanceUtil(0LL);
    uint64_t v21 = static PerformanceUtil.shared.getter(v20);
    uint64_t v22 = __chkstk_darwin(v21);
    uint64_t v63 = v2;
    Date.init()(v22);
    uint64_t v60 = (uint64_t *)&v59;
    char v61 = &type metadata for SportsPersonalizationResult;
    LOBYTE(v59) = 2;
    ((void (*)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t@<X8>)))dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:))( &v72,  0xD000000000000029LL,  0x80000000000824E0LL,  0LL,  v6,  "InformationFlowPlugin/SportsPersonalizationEntryPoint.swift",  59LL,  2LL,  114LL,  "flowFor(input:)",  15LL,  v59,  partial apply for closure #1 in SportsPersonalizationEntryPoint.flowFor(input:));
    swift_release(v21);
    unint64_t v23 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
    uint64_t v24 = v67;
    uint64_t v25 = v23(v6, v67);
    uint64_t v26 = v72;
    int v27 = v73;
    uint64_t v28 = static PerformanceUtil.shared.getter(v25);
    uint64_t v29 = __chkstk_darwin(v28);
    int v59 = v26;
    Date.init()(v29);
    uint64_t v60 = &v58;
    char v61 = (ValueMetadata *)((char *)&type metadata for () + 8);
    LOBYTE(v59) = 2;
    ((void (*)(char *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)()))dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:))( "Point.swift",  0xD00000000000003BLL,  0x8000000000082560LL,  0LL,  v6,  "InformationFlowPlugin/SportsPersonalizationEntryPoint.swift",  59LL,  2LL,  118LL,  "flowFor(input:)",  15LL,  v59,  partial apply for closure #2 in SportsPersonalizationEntryPoint.flowFor(input:));
    swift_release(v28);
    v23(v6, v24);
    if (v27 == 3)
    {
      (*(void (**)(char *, uint64_t))(v68 + 8))(v9, v69);
    }

    else
    {
      uint64_t v38 = v9;
      uint64_t v39 = v68;
      uint64_t v40 = v69;
      if (one-time initialization token for information != -1) {
        swift_once(&one-time initialization token for information, one-time initialization function for information);
      }
      uint64_t v41 = type metadata accessor for Logger(0LL);
      uint64_t v42 = __swift_project_value_buffer(v41, (uint64_t)static Logger.information);
      uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
      os_log_type_t v44 = static os_log_type_t.info.getter();
      BOOL v45 = os_log_type_enabled(v43, v44);
      uint64_t v47 = v65;
      uint64_t v46 = v66;
      uint64_t v48 = v63;
      if (v45)
      {
        os_log_type_t v49 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)os_log_type_t v49 = 0;
        _os_log_impl(&dword_0, v43, v44, "Donating pegasusResults parse in SportsPersonalizationEntryPoint", v49, 2u);
        swift_slowDealloc(v49, -1LL, -1LL);
      }

      uint64_t v50 = outlined init with copy of IdentifiedUser?( v48 + 96,  (uint64_t)v70,  &demangling cache variable for type metadata for SportsIntentDonator?);
      uint64_t v51 = (uint64_t)v64;
      if (v71)
      {
        Input.parse.getter(v50);
        SportsIntentDonator.donateIfNeeded(parse:)(v51);
        (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v51, v46);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v38, v40);
        outlined destroy of SportsIntentDonator((uint64_t)v70);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v39 + 8))(v38, v40);
        outlined destroy of Any?((uint64_t)v70, &demangling cache variable for type metadata for SportsIntentDonator?);
      }
    }
  }

  else
  {
    if (v18 == enum case for Parse.pommesResponse(_:))
    {
      (*(void (**)(id *, uint64_t))(v11 + 96))(v17, v10);

      if (one-time initialization token for information != -1) {
        swift_once(&one-time initialization token for information, one-time initialization function for information);
      }
      uint64_t v30 = type metadata accessor for Logger(0LL);
      uint64_t v31 = __swift_project_value_buffer(v30, (uint64_t)static Logger.information);
      unint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
      os_log_type_t v33 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = v14;
        uint64_t v35 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v35 = 0;
        _os_log_impl(&dword_0, v32, v33, "Donating pommesResponse parse in SportsPersonalizationEntryPoint", v35, 2u);
        uint64_t v36 = v35;
        __int128 v14 = v34;
        swift_slowDealloc(v36, -1LL, -1LL);
      }

      uint64_t v37 = outlined init with copy of IdentifiedUser?( v2 + 96,  (uint64_t)v70,  &demangling cache variable for type metadata for SportsIntentDonator?);
      if (v71)
      {
        Input.parse.getter(v37);
        SportsIntentDonator.donateIfNeeded(parse:)((uint64_t)v14);
        (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
        outlined destroy of SportsIntentDonator((uint64_t)v70);
      }

      else
      {
        outlined destroy of Any?((uint64_t)v70, &demangling cache variable for type metadata for SportsIntentDonator?);
      }
    }

    else
    {
      if (one-time initialization token for information != -1) {
        swift_once(&one-time initialization token for information, one-time initialization function for information);
      }
      uint64_t v52 = type metadata accessor for Logger(0LL);
      uint64_t v53 = __swift_project_value_buffer(v52, (uint64_t)static Logger.information);
      uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
      os_log_type_t v55 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v56 = 0;
        _os_log_impl(&dword_0, v54, v55, "Parse not supported in SportsPersonalizationEntryPoint", v56, 2u);
        swift_slowDealloc(v56, -1LL, -1LL);
      }

      (*(void (**)(id *, uint64_t))(v11 + 8))(v17, v10);
    }

    return 0LL;
  }

  return v26;
}

uint64_t closure #2 in SportsPersonalizationEntryPoint.flowFor(input:)(uint64_t a1, char a2)
{
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::String v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = Parse.PegasusResult.response.getter(v8);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter(v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v10, 0LL, 1LL, v12);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = __swift_project_value_buffer(v13, (uint64_t)static Logger.information);
  specialized static SportsPersonalizationMetrics.submit<A>(for:instruction:logger:)( 0x1000302u >> (8 * a2),  (uint64_t)v10,  v14);
  return outlined destroy of Any?( (uint64_t)v10,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
}

uint64_t SportsPersonalizationEntryPoint.makePersonalizedSportsExperience(result:)(uint64_t a1)
{
  uint64_t v373 = a1;
  v365 = *(void (**)(char *, uint64_t))v1;
  uint64_t v368 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity(0LL);
  uint64_t v363 = *(void *)(v368 - 8);
  __chkstk_darwin(v368);
  v362 = (char *)&v311 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
  uint64_t v4 = __chkstk_darwin(v3);
  v360 = (char *)&v311 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  v361 = (char *)&v311 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsPersonalizationEntity?);
  __chkstk_darwin(v7);
  v364 = (char **)((char *)&v311 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v322 = type metadata accessor for PluginAction(0LL);
  uint64_t v321 = *(void *)(v322 - 8);
  uint64_t v9 = __chkstk_darwin(v322);
  v317 = (char *)&v311 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  v320 = (char *)&v311 - v11;
  uint64_t v319 = type metadata accessor for Input(0LL);
  uint64_t v326 = *(void *)(v319 - 8);
  uint64_t v12 = __chkstk_darwin(v319);
  v315 = (char *)&v311 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  v318 = (char *)&v311 - v14;
  uint64_t v325 = type metadata accessor for Parse(0LL);
  uint64_t v324 = *(void *)(v325 - 8);
  uint64_t v15 = __chkstk_darwin(v325);
  v314 = (char *)&v311 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  v316 = (char *)&v311 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v323 = (uint64_t)&v311 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  v340 = (char *)&v311 - v21;
  uint64_t v336 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientDrivenExperience(0LL);
  uint64_t v335 = *(void *)(v336 - 8);
  __chkstk_darwin(v336);
  v334 = (char *)&v311 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
  __chkstk_darwin(v23);
  v337 = (char *)&v311 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
  uint64_t v26 = __chkstk_darwin(v25);
  v339 = (char *)&v311 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = __chkstk_darwin(v26);
  v338 = (char *)&v311 - v29;
  __chkstk_darwin(v28);
  uint64_t v341 = (uint64_t)&v311 - v30;
  uint64_t v349 = type metadata accessor for Parse.PegasusResult(0LL);
  uint64_t v347 = *(void *)(v349 - 8);
  uint64_t v31 = __chkstk_darwin(v349);
  v327 = (char *)&v311 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = __chkstk_darwin(v31);
  v350 = (char *)&v311 - v34;
  __chkstk_darwin(v33);
  v348 = (char *)&v311 - v35;
  uint64_t v370 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
  uint64_t v354 = *(void *)(v370 - 8);
  uint64_t v36 = __chkstk_darwin(v370);
  v331 = (char *)&v311 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v330 = (uint64_t)&v311 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  v343 = (char *)&v311 - v41;
  __chkstk_darwin(v40);
  v375 = (char *)&v311 - v42;
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)?);
  uint64_t v44 = __chkstk_darwin(v43);
  uint64_t v344 = (uint64_t)&v311 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v44);
  uint64_t v351 = (uint64_t)&v311 - v46;
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  uint64_t v48 = __chkstk_darwin(v47);
  uint64_t v345 = (uint64_t)&v311 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v48);
  uint64_t v353 = (uint64_t)&v311 - v50;
  uint64_t v355 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsItem?);
  uint64_t v51 = __chkstk_darwin(v355);
  v374 = (char *)&v311 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v51);
  v356 = (char **)((char *)&v311 - v53);
  uint64_t v376 = type metadata accessor for SportsItem(0LL);
  v357 = *(void **)(v376 - 8);
  uint64_t v54 = __chkstk_darwin(v376);
  v369 = (char *)&v311 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v56 = __chkstk_darwin(v54);
  v328 = (char *)&v311 - v57;
  uint64_t v58 = __chkstk_darwin(v56);
  v342 = (char *)&v311 - v59;
  __chkstk_darwin(v58);
  v371 = (char *)&v311 - v60;
  v367 = (void *)type metadata accessor for Date(0LL);
  uint64_t v359 = *(v367 - 1);
  __chkstk_darwin(v367);
  v366 = (uint8_t *)&v311 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v62 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse(0LL);
  uint64_t v63 = *(char **)(v62 - 8);
  uint64_t v64 = __chkstk_darwin(v62);
  v346 = (char *)&v311 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v64);
  uint64_t v67 = (char *)&v311 - v66;
  uint64_t v68 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction(0LL);
  uint64_t v69 = *(void *)(v68 - 8);
  uint64_t v70 = __chkstk_darwin(v68);
  uint64_t v72 = (char *)&v311 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v73 = __chkstk_darwin(v70);
  v333 = (char *)&v311 - v74;
  uint64_t v75 = __chkstk_darwin(v73);
  v332 = (char *)&v311 - v76;
  uint64_t v77 = __chkstk_darwin(v75);
  v329 = (char *)&v311 - v78;
  uint64_t v79 = __chkstk_darwin(v77);
  v352 = (char *)&v311 - v80;
  __chkstk_darwin(v79);
  uint64_t v82 = (char *)&v311 - v81;
  uint64_t v84 = *(void *)(v1 + 80);
  uint64_t v83 = *(void *)(v1 + 88);
  uint64_t v358 = v1;
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 56), v84);
  uint64_t v85 = (*(uint64_t (**)(uint64_t, uint64_t))(v83 + 8))(v84, v83);
  if ((v85 & 1) != 0)
  {
    uint64_t v86 = Parse.PegasusResult.response.getter(v85);
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter(v86);
    uint64_t v87 = (void (*)(char *, uint64_t))*((void *)v63 + 1);
    v311 = v67;
    uint64_t v313 = v62;
    v312 = v87;
    v87(v67, v62);
    char v88 = specialized static SportsPersonalizationEntryPoint.isSupportedPersonalizationInstruction(instruction:)((uint64_t)v82);
    v372 = *(void (**)(char *, uint64_t))(v69 + 8);
    v372(v82, v68);
    uint64_t v89 = v68;
    if ((v88 & 1) != 0)
    {
      uint64_t v368 = v69;
      v362 = v63;
      uint64_t v90 = type metadata accessor for PerformanceUtil(0LL);
      uint64_t v91 = static PerformanceUtil.shared.getter(v90);
      uint64_t v92 = __chkstk_darwin(v91);
      uint64_t v93 = v366;
      Date.init()(v92);
      v309 = &v308;
      uint64_t v310 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)]?);
      LOBYTE(v30__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 2;
      ((void (*)(char **__return_ptr, unint64_t, unint64_t, void, uint8_t *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(void *@<X8>)))dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:))( &v379,  0xD00000000000002BLL,  0x80000000000826E0LL,  0LL,  v93,  "InformationFlowPlugin/SportsPersonalizationEntryPoint.swift",  59LL,  2LL,  166LL,  "makePersonalizedSportsExperience(result:)",  41LL,  v308,  partial apply for closure #2 in SportsPersonalizationEntryPoint.makePersonalizedSportsExperience(result:));
      swift_release(v91);
      uint64_t v94 = *(void (**)(uint8_t *, void *))(v359 + 8);
      v94(v93, v367);
      uint64_t v95 = v379;
      if (!v379)
      {
        if (one-time initialization token for information != -1) {
          swift_once(&one-time initialization token for information, one-time initialization function for information);
        }
        uint64_t v152 = type metadata accessor for Logger(0LL);
        uint64_t v153 = __swift_project_value_buffer(v152, (uint64_t)static Logger.information);
        uint64_t v114 = (os_log_s *)Logger.logObject.getter(v153);
        os_log_type_t v158 = static os_log_type_t.debug.getter(v114, v154, v155, v156, v157);
        if (os_log_type_enabled(v114, v158))
        {
          unint64_t v159 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)unint64_t v159 = 0;
          _os_log_impl( &dword_0,  v114,  v158,  "Request doesn't have a supported (SportsEntity -> Instruction) mapping. Not performing sports personalization...",  v159,  2u);
          swift_slowDealloc(v159, -1LL, -1LL);

          return 0LL;
        }

LABEL_31:
        return 0LL;
      }

      v360 = v82;
      uint64_t v363 = v68;
      if (one-time initialization token for information != -1) {
        swift_once(&one-time initialization token for information, one-time initialization function for information);
      }
      uint64_t v96 = type metadata accessor for Logger(0LL);
      uint64_t v97 = __swift_project_value_buffer(v96, (uint64_t)static Logger.information);
      uint64_t v98 = (os_log_s *)Logger.logObject.getter(v97);
      os_log_type_t v103 = static os_log_type_t.debug.getter(v98, v99, v100, v101, v102);
      BOOL v104 = os_log_type_enabled(v98, v103);
      Class v105 = v357;
      if (v104)
      {
        uint64_t v106 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v106 = 0;
        _os_log_impl( &dword_0,  v98,  v103,  "Got a request that is applicable for sports personalization via alternative selection. Will attempt to select an alternative",  v106,  2u);
        swift_slowDealloc(v106, -1LL, -1LL);
      }

      uint64_t v108 = static PerformanceUtil.shared.getter(v107);
      uint64_t v109 = __chkstk_darwin(v108);
      unint64_t v110 = v366;
      Date.init()(v109);
      v309 = &v308;
      uint64_t v310 = v355;
      LOBYTE(v30__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 2;
      unint64_t v111 = v356;
      ((void (*)(void *__return_ptr, unint64_t, unint64_t, void, uint8_t *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t@<X8>)))dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:))( v356,  0xD000000000000043LL,  0x8000000000082710LL,  0LL,  v110,  "InformationFlowPlugin/SportsPersonalizationEntryPoint.swift",  59LL,  2LL,  178LL,  "makePersonalizedSportsExperience(result:)",  41LL,  v308,  partial apply for closure #3 in SportsPersonalizationEntryPoint.makePersonalizedSportsExperience(result:));
      swift_release(v108);
      v94(v110, v367);
      uint64_t v112 = v376;
      v367 = (void *)v105[6];
      if (((unsigned int (*)(void *, uint64_t, uint64_t))v367)(v111, 1LL, v376) == 1)
      {
        swift_bridgeObjectRelease(v95);
        uint64_t v113 = outlined destroy of Any?((uint64_t)v111, &demangling cache variable for type metadata for SportsItem?);
        uint64_t v114 = (os_log_s *)Logger.logObject.getter(v113);
        os_log_type_t v119 = static os_log_type_t.debug.getter(v114, v115, v116, v117, v118);
        if (os_log_type_enabled(v114, v119))
        {
          uint64_t v120 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v120 = 0;
          _os_log_impl( &dword_0,  v114,  v119,  "Inference was unable to recommend an alternative. Will use original instruction",  v120,  2u);
          swift_slowDealloc(v120, -1LL, -1LL);

          return 0LL;
        }

        goto LABEL_31;
      }

      v361 = v95;
      uint64_t v164 = v371;
      v364 = (void *)v105[4];
      ((void (*)(char *, void *, uint64_t))v364)(v371, v111, v112);
      uint64_t v165 = (uint64_t (*)(char *, char *, uint64_t))v105[2];
      uint64_t v166 = v342;
      uint64_t v167 = v165(v342, v164, v112);
      uint64_t v168 = (os_log_s *)Logger.logObject.getter(v167);
      os_log_type_t v173 = static os_log_type_t.debug.getter(v168, v169, v170, v171, v172);
      BOOL v174 = os_log_type_enabled(v168, v173);
      uint64_t v359 = v97;
      if (v174)
      {
        id v175 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v176 = swift_slowAlloc(32LL, -1LL);
        uint64_t v378 = v176;
        *(_DWORD *)id v175 = 136315138;
        v366 = v175 + 4;
        uint64_t v177 = v328;
        v165(v328, v166, v112);
        uint64_t v178 = String.init<A>(describing:)(v177, v112);
        unint64_t v180 = v179;
        uint64_t v377 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v178, v179, &v378);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v377, &v378);
        swift_bridgeObjectRelease(v180);
        v365 = (void (*)(char *, uint64_t))v105[1];
        v365(v166, v112);
        _os_log_impl(&dword_0, v168, v173, "Got a recommended alternative entity: %s", v175, 0xCu);
        swift_arrayDestroy(v176, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v176, -1LL, -1LL);
        swift_slowDealloc(v175, -1LL, -1LL);
      }

      else
      {
        v365 = (void (*)(char *, uint64_t))v105[1];
        v365(v166, v112);
      }

      uint64_t v181 = v363;
      id v182 = v372;
      uint64_t v183 = v375;
      uint64_t v184 = v361;
      uint64_t v185 = *((void *)v361 + 2);
      uint64_t v186 = v343;
      uint64_t v187 = v370;
      if (v185)
      {
        uint64_t v188 = (uint64_t)&v361[(*(unsigned __int8 *)(v354 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v354 + 80)];
        v366 = *(uint8_t **)(v354 + 72);
        swift_bridgeObjectRetain(v361);
        do
        {
          outlined init with copy of IdentifiedUser?( v188,  (uint64_t)v183,  &demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
          uint64_t v190 = *(int *)(v187 + 48);
          unint64_t v191 = &v186[v190];
          uint64_t v192 = &v183[v190];
          uint64_t v193 = type metadata accessor for SportsPersonalizationEntity(0LL);
          uint64_t v194 = *(void *)(v193 - 8);
          (*(void (**)(char *, char *, uint64_t))(v194 + 16))(v186, v183, v193);
          uint64_t v195 = (*(uint64_t (**)(char *, char *, uint64_t))(v368 + 16))(v191, v192, v181);
          uint64_t v196 = (uint64_t)v374;
          SportsPersonalizationEntity.sportsItem.getter(v195);
          uint64_t v197 = v376;
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v367)(v196, 1LL, v376) == 1)
          {
            outlined destroy of Any?(v196, &demangling cache variable for type metadata for SportsItem?);
            (*(void (**)(char *, uint64_t))(v194 + 8))(v186, v193);
            uint64_t v189 = v191;
            id v182 = v372;
            v372(v189, v181);
          }

          else
          {
            uint64_t v198 = v369;
            ((void (*)(char *, uint64_t, uint64_t))v364)(v369, v196, v197);
            (*(void (**)(char *, uint64_t))(v194 + 8))(v186, v193);
            uint64_t v199 = v191;
            id v182 = v372;
            v372(v199, v181);
            char v200 = static SportsItem.partiallyEqual(lhs:rhs:)(v371, v198);
            uint64_t v201 = v197;
            char v202 = v200;
            unint64_t v203 = v198;
            uint64_t v187 = v370;
            v365(v203, v201);
            if ((v202 & 1) != 0)
            {
              uint64_t v184 = v361;
              swift_bridgeObjectRelease(v361);
              uint64_t v204 = v351;
              outlined init with take of Flow?( (uint64_t)v375,  v351,  &demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
              uint64_t v205 = 0LL;
              goto LABEL_44;
            }
          }

          uint64_t v183 = v375;
          outlined destroy of Any?( (uint64_t)v375,  &demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
          v188 += (uint64_t)v366;
          --v185;
        }

        while (v185);
        uint64_t v184 = v361;
        swift_bridgeObjectRelease(v361);
      }

      uint64_t v205 = 1LL;
      uint64_t v204 = v351;
LABEL_44:
      uint64_t v206 = v354;
      uint64_t v207 = 1LL;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v354 + 56))(v204, v205, 1LL, v187);
      swift_bridgeObjectRelease(v184);
      uint64_t v208 = v344;
      outlined init with copy of IdentifiedUser?( v204,  v344,  &demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)?);
      int v209 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v206 + 48))(v208, 1LL, v187);
      uint64_t v210 = v353;
      if (v209 != 1)
      {
        uint64_t v211 = v330;
        outlined init with take of Flow?( v208,  v330,  &demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
        uint64_t v212 = *(int *)(v187 + 48);
        uint64_t v213 = v331;
        uint64_t v214 = &v331[v212];
        uint64_t v215 = v211 + v212;
        uint64_t v216 = type metadata accessor for SportsPersonalizationEntity(0LL);
        uint64_t v217 = *(void *)(v216 - 8);
        (*(void (**)(char *, uint64_t, uint64_t))(v217 + 16))(v213, v211, v216);
        uint64_t v218 = v368;
        (*(void (**)(char *, uint64_t, uint64_t))(v368 + 16))(v214, v215, v181);
        (*(void (**)(uint64_t, char *, uint64_t))(v218 + 32))(v210, v214, v181);
        uint64_t v219 = *(void (**)(char *, uint64_t))(v217 + 8);
        id v182 = v372;
        uint64_t v204 = v351;
        v219(v213, v216);
        outlined destroy of Any?( v211,  &demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
        uint64_t v207 = 0LL;
      }

      uint64_t v220 = v368;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v368 + 56))(v210, v207, 1LL, v181);
      outlined destroy of Any?( v204,  &demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)?);
      uint64_t v221 = v345;
      outlined init with copy of IdentifiedUser?( v210,  v345,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v220 + 48))(v221, 1LL, v181) == 1)
      {
        uint64_t v222 = outlined destroy of Any?( v221,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
        uint64_t v223 = (os_log_s *)Logger.logObject.getter(v222);
        os_log_type_t v224 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v223, v224))
        {
          uint64_t v225 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v225 = 0;
          _os_log_impl( &dword_0,  v223,  v224,  "Unable to map the recommended sports item back to an alternative. This is unexpected. Will continue with ori ginal instruction",  v225,  2u);
          swift_slowDealloc(v225, -1LL, -1LL);
        }

        outlined destroy of Any?( v210,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
        v365(v371, v376);
        return 0LL;
      }

      uint64_t v226 = v352;
      (*(void (**)(char *, uint64_t, uint64_t))(v220 + 32))(v352, v221, v181);
      NSString v227 = *(uint64_t (**)(char *, char *, uint64_t))(v220 + 16);
      Class v228 = v329;
      uint64_t v229 = v227(v329, v226, v181);
      BOOL v230 = (os_log_s *)Logger.logObject.getter(v229);
      os_log_type_t v235 = static os_log_type_t.debug.getter(v230, v231, v232, v233, v234);
      if (os_log_type_enabled(v230, v235))
      {
        Class v236 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v237 = (void (*)(uint64_t, uint64_t))v182;
        uint64_t v238 = swift_slowAlloc(32LL, -1LL);
        uint64_t v378 = v238;
        *(_DWORD *)Class v236 = 136315138;
        uint64_t v239 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction);
        uint64_t v240 = Message.debugDescription.getter(v363, v239);
        unint64_t v242 = v241;
        uint64_t v377 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v240, v241, &v378);
        uint64_t v181 = v363;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v377, &v378);
        swift_bridgeObjectRelease(v242);
        uint64_t v243 = v228;
        id v244 = v237;
        v237((uint64_t)v243, v181);
        _os_log_impl(&dword_0, v230, v235, "Reforming intent to use alternative instruction: %s", v236, 0xCu);
        swift_arrayDestroy(v238, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v238, -1LL, -1LL);
        swift_slowDealloc(v236, -1LL, -1LL);

        uint64_t v245 = v313;
      }

      else
      {
        v182(v228, v181);

        uint64_t v245 = v313;
        id v244 = (void (*)(uint64_t, uint64_t))v182;
      }

      v375 = *(char **)(v347 + 16);
      uint64_t v246 = ((uint64_t (*)(char *, uint64_t, uint64_t))v375)(v348, v373, v349);
      uint64_t v247 = v311;
      Parse.PegasusResult.response.getter(v246);
      uint64_t v248 = (void (*)(char *, char *, uint64_t))*((void *)v362 + 2);
      NSString v249 = v346;
      v248(v346, v247, v245);
      uint64_t v250 = (uint64_t)v360;
      v227(v360, v352, v181);
      uint64_t v251 = (void (*)(uint64_t *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.modify(&v378);
      uint64_t v253 = *v252;
      uint64_t *v252 = (uint64_t)_swiftEmptyArrayStorage;
      swift_bridgeObjectRelease(v253);
      v251(&v378, 0LL);
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.alternateSiriInstructions.setter(_swiftEmptyArrayStorage);
      id v254 = v332;
      v227(v332, (char *)v250, v181);
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.setter(v254);
      v244(v250, v181);
      v312(v247, v245);
      v248(v247, v249, v245);
      uint64_t v255 = Parse.PegasusResult.init(pegasusResponse:)(v247);
      uint64_t v256 = v333;
      uint64_t v257 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter(v255);
      uint64_t v258 = v334;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.clientDrivenExperience.getter(v257);
      uint64_t v259 = ((uint64_t (*)(char *, uint64_t))v244)(v256, v181);
      uint64_t v260 = Apple_Parsec_Siri_V2alpha_ClientDrivenExperience.components.getter(v259);
      (*(void (**)(char *, uint64_t))(v335 + 8))(v258, v336);
      uint64_t v261 = *(void *)(v260 + 16);
      uint64_t v262 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientComponent(0LL);
      uint64_t v263 = *(void *)(v262 - 8);
      if (v261)
      {
        uint64_t v264 = (uint64_t)v337;
        (*(void (**)(char *, unint64_t, uint64_t))(v263 + 16))( v337,  v260 + ((*(unsigned __int8 *)(v263 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v263 + 80)),  v262);
        uint64_t v265 = 0LL;
        uint64_t v266 = v341;
        uint64_t v267 = (uint64_t)v339;
        uint64_t v268 = (uint64_t)v338;
      }

      else
      {
        uint64_t v265 = 1LL;
        uint64_t v266 = v341;
        uint64_t v267 = (uint64_t)v339;
        uint64_t v268 = (uint64_t)v338;
        uint64_t v264 = (uint64_t)v337;
      }

      uint64_t v269 = (uint64_t)v340;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v263 + 56))(v264, v265, 1LL, v262);
      swift_bridgeObjectRelease(v260);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v263 + 48))(v264, 1LL, v262) == 1)
      {
        outlined destroy of Any?( v264,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
        uint64_t v270 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent(0LL);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v270 - 8) + 56LL))( v266,  1LL,  1LL,  v270);
      }

      else
      {
        Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
        (*(void (**)(uint64_t, uint64_t))(v263 + 8))(v264, v262);
        uint64_t v270 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent(0LL);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v270 - 8) + 56LL))(v266, 0LL, 1LL, v270);
      }

      outlined init with copy of IdentifiedUser?( v266,  v268,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
      type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent(0LL);
      uint64_t v271 = *(void *)(v270 - 8);
      uint64_t v272 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v271 + 48);
      if (v272(v268, 1LL, v270) == 1)
      {
        outlined destroy of Any?( v268,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
        uint64_t v273 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent(0LL);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v273 - 8) + 56LL))( v269,  1LL,  1LL,  v273);
LABEL_72:
        v299 = v327;
        v300 = v350;
        uint64_t v301 = v349;
        ((void (*)(char *, char *, uint64_t))v375)(v327, v350, v349);
        uint64_t v302 = type metadata accessor for InformationPassthroughFlow(0LL);
        uint64_t v303 = swift_allocObject(v302, *(unsigned int *)(v302 + 48), *(unsigned __int16 *)(v302 + 52));
        uint64_t v304 = v347;
        (*(void (**)(uint64_t, char *, uint64_t))(v347 + 32))( v303 + OBJC_IVAR____TtC21InformationFlowPluginP33_65CFA3A7C2969752B966336CF3E7884326InformationPassthroughFlow_result,  v299,  v301);
        uint64_t v378 = v303;
        uint64_t v305 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type InformationPassthroughFlow and conformance InformationPassthroughFlow,  type metadata accessor for InformationPassthroughFlow,  (uint64_t)&protocol conformance descriptor for InformationPassthroughFlow);
        uint64_t v121 = Flow.eraseToAnyFlow()(v302, v305);
        swift_release(v303);
        outlined destroy of Any?( v266,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
        v306 = *(void (**)(char *, uint64_t))(v304 + 8);
        v306(v300, v301);
        v312(v346, v313);
        v306(v348, v301);
        v372(v352, v363);
        outlined destroy of Any?( v353,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
        v365(v371, v376);
        outlined destroy of Any?( v269,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
        return v121;
      }

      Apple_Parsec_Siri_V2alpha_DomainClientComponent.domainComponent.getter();
      v274 = *(void (**)(uint64_t, uint64_t))(v271 + 8);
      v274(v268, v270);
      uint64_t v275 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent(0LL);
      uint64_t v276 = *(void *)(v275 - 8);
      uint64_t v277 = v323;
      outlined init with copy of IdentifiedUser?( v269,  v323,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v276 + 88))(v277, v275) != enum case for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent.videoClientComponent(_:))
      {
        outlined init with copy of IdentifiedUser?( v266,  v267,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
        if (v272(v267, 1LL, v270) == 1)
        {
          outlined destroy of Any?( v267,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
LABEL_71:
          (*(void (**)(uint64_t, uint64_t))(v276 + 8))(v277, v275);
          goto LABEL_72;
        }

        uint64_t v278 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        uint64_t v280 = v279;
        v274(v267, v270);
        if (v278 == 0xD000000000000029LL && v280 == 0x8000000000082760LL)
        {
          swift_bridgeObjectRelease(0x8000000000082760LL);
          uint64_t v277 = v323;
        }

        else
        {
          char v281 = _stringCompareWithSmolCheck(_:_:expecting:)( v278,  v280,  0xD000000000000029LL,  0x8000000000082760LL,  0LL);
          swift_bridgeObjectRelease(v280);
          uint64_t v277 = v323;
          if ((v281 & 1) == 0) {
            goto LABEL_71;
          }
        }
      }

      (*(void (**)(uint64_t, uint64_t))(v276 + 8))(v277, v275);
      outlined destroy of Any?( v269,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
      uint64_t v282 = v316;
      uint64_t v283 = v349;
      ((void (*)(char *, char *, uint64_t))v375)(v316, v350, v349);
      uint64_t v284 = v324;
      uint64_t v285 = v325;
      (*(void (**)(char *, void, uint64_t))(v324 + 104))(v282, enum case for Parse.pegasusResults(_:), v325);
      v286 = *(void (**)(char *, char *, uint64_t))(v284 + 16);
      v287 = v314;
      v286(v314, v282, v285);
      v288 = v318;
      Input.init(parse:)(v287);
      v289 = v315;
      uint64_t v290 = v319;
      (*(void (**)(char *, char *, uint64_t))(v326 + 16))(v315, v288, v319);
      v291 = v320;
      PluginAction.init(flowHandlerId:input:)(0xD000000000000026LL, 0x8000000000082790LL, v289);
      uint64_t v292 = v321;
      v293 = v317;
      uint64_t v294 = v322;
      (*(void (**)(char *, char *, uint64_t))(v321 + 16))(v317, v291, v322);
      uint64_t v295 = type metadata accessor for ReformerFlow(0LL);
      uint64_t v296 = swift_allocObject(v295, *(unsigned int *)(v295 + 48), *(unsigned __int16 *)(v295 + 52));
      (*(void (**)(uint64_t, char *, uint64_t))(v292 + 32))( v296 + OBJC_IVAR____TtC21InformationFlowPluginP33_65CFA3A7C2969752B966336CF3E7884312ReformerFlow_pluginAction,  v293,  v294);
      uint64_t v378 = v296;
      uint64_t v297 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type ReformerFlow and conformance ReformerFlow,  type metadata accessor for ReformerFlow,  (uint64_t)&protocol conformance descriptor for ReformerFlow);
      uint64_t v121 = Flow.eraseToAnyFlow()(v295, v297);
      swift_release(v296);
      (*(void (**)(char *, uint64_t))(v292 + 8))(v291, v294);
      (*(void (**)(char *, uint64_t))(v326 + 8))(v288, v290);
      (*(void (**)(char *, uint64_t))(v324 + 8))(v282, v325);
      outlined destroy of Any?( v341,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
      v298 = *(void (**)(char *, uint64_t))(v347 + 8);
      v298(v350, v283);
      v312(v346, v313);
      v298(v348, v283);
      v372(v352, v363);
      outlined destroy of Any?( v353,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
      v365(v371, v376);
      return v121;
    }

    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v131 = type metadata accessor for Logger(0LL);
    uint64_t v132 = __swift_project_value_buffer(v131, (uint64_t)static Logger.information);
    uint64_t v133 = (os_log_s *)Logger.logObject.getter(v132);
    os_log_type_t v138 = static os_log_type_t.debug.getter(v133, v134, v135, v136, v137);
    BOOL v139 = os_log_type_enabled(v133, v138);
    uint64_t v140 = v313;
    id v141 = v311;
    if (v139)
    {
      uint64_t v142 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v142 = 0;
      _os_log_impl( &dword_0,  v133,  v138,  "Primary instruction is unambiguous, not performing any sports personalization...",  v142,  2u);
      swift_slowDealloc(v142, -1LL, -1LL);
    }

    uint64_t v144 = Parse.PegasusResult.response.getter(v143);
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter(v144);
    uint64_t v145 = ((uint64_t (*)(char *, uint64_t))v312)(v141, v140);
    uint64_t v146 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter(v145);
    v372(v72, v89);
    uint64_t v147 = v363;
    if (*(void *)(v146 + 16))
    {
      uint64_t v148 = (uint64_t)v361;
      uint64_t v149 = v368;
      (*(void (**)(char *, unint64_t, uint64_t))(v363 + 16))( v361,  v146 + ((*(unsigned __int8 *)(v363 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v363 + 80)),  v368);
      uint64_t v150 = 0LL;
      uint64_t v151 = (uint64_t)v362;
    }

    else
    {
      uint64_t v150 = 1LL;
      uint64_t v149 = v368;
      uint64_t v151 = (uint64_t)v362;
      uint64_t v148 = (uint64_t)v361;
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v147 + 56))(v148, v150, 1LL, v149);
    swift_bridgeObjectRelease(v146);
    uint64_t v160 = (uint64_t)v360;
    outlined init with copy of IdentifiedUser?( v148,  (uint64_t)v360,  &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v147 + 48))(v160, 1LL, v149) == 1)
    {
      uint64_t v161 = type metadata accessor for SportsPersonalizationEntity(0LL);
      uint64_t v162 = v364;
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v161 - 8) + 56LL))(v364, 1LL, 1LL, v161);
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v147 + 32))(v151, v160, v149);
      uint64_t v162 = v364;
      closure #1 in SportsPersonalizationEntryPoint.makePersonalizedSportsExperience(result:)(v151, (uint64_t)v365, v364);
      (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v151, v149);
    }

    outlined destroy of Any?( v148,  &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
    uint64_t v163 = type metadata accessor for SportsPersonalizationEntity(0LL);
    (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v163 - 8) + 48LL))(v162, 1LL, v163);
    outlined destroy of Any?( (uint64_t)v162,  &demangling cache variable for type metadata for SportsPersonalizationEntity?);
    return 0LL;
  }

  else
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v122 = type metadata accessor for Logger(0LL);
    uint64_t v123 = __swift_project_value_buffer(v122, (uint64_t)static Logger.information);
    uint64_t v124 = (os_log_s *)Logger.logObject.getter(v123);
    os_log_type_t v129 = static os_log_type_t.debug.getter(v124, v125, v126, v127, v128);
    if (os_log_type_enabled(v124, v129))
    {
      uint64_t v130 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v130 = 0;
      _os_log_impl( &dword_0,  v124,  v129,  "Sports personalization feature is disabled, will not try to choose an alternative instruction...",  v130,  2u);
      swift_slowDealloc(v130, -1LL, -1LL);
    }

    return 0LL;
  }

uint64_t closure #1 in SportsPersonalizationEntryPoint.makePersonalizedSportsExperience(result:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v11 = static PerformanceUtil.shared.getter(v10);
  uint64_t v16 = a1;
  uint64_t v17 = a2;
  Date.init()(v11);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsPersonalizationEntity?);
  char v14 = 2;
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( a3,  0xD000000000000039LL,  0x80000000000827C0LL,  0LL,  v9,  "InformationFlowPlugin/SportsPersonalizationEntryPoint.swift",  59LL,  2LL,  152LL,  "makePersonalizedSportsExperience(result:)",  41LL,  v14,  partial apply for closure #1 in closure #1 in SportsPersonalizationEntryPoint.makePersonalizedSportsExperience(result:),  v15,  v12);
  swift_release(v11);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t static SportsPersonalizationEntryPoint.makeSportsEntity(entity:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalizationLevel?);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v42 - v8;
  uint64_t v10 = type metadata accessor for SportsItem(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsItem?);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v42 - v18;
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  uint64_t v21 = __swift_project_value_buffer(v20, (uint64_t)static Logger.information);
  uint64_t v22 = specialized static UsoEntity_common_SportsItem.from(resultEntity:logger:)(a1, v21);
  if (!v22)
  {
    uint64_t v35 = ((uint64_t (*)(void))type metadata accessor for SportsPersonalizationEntity)();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL))( a2,  1LL,  1LL,  v35);
  }

  uint64_t v49 = v11;
  uint64_t v50 = v22;
  uint64_t v23 = dispatch thunk of UsoEntity_common_SportsItem.associatedSportsItems.getter();
  if (v23)
  {
    uint64_t v24 = v23;
    SportsItem.init(sport:league:team:athlete:sportQId:leagueQId:teamQId:athleteQId:)( 0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL);
    uint64_t v47 = v9;
    uint64_t v48 = a2;
    uint64_t v45 = v19;
    uint64_t v46 = v7;
    uint64_t v43 = v10;
    uint64_t v44 = v17;
    if ((unint64_t)v24 >> 62)
    {
      if (v24 >= 0) {
        uint64_t v37 = v24 & 0xFFFFFFFFFFFFFF8LL;
      }
      else {
        uint64_t v37 = v24;
      }
      swift_bridgeObjectRetain(v24);
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter(v37);
      if (v25) {
        goto LABEL_7;
      }
    }

    else
    {
      uint64_t v25 = *(void *)((char *)&dword_10 + (v24 & 0xFFFFFFFFFFFFFF8LL));
      swift_bridgeObjectRetain(v24);
      if (v25)
      {
LABEL_7:
        if (v25 < 1)
        {
          __break(1u);
          JUMPOUT(0x682C4LL);
        }

        for (uint64_t i = 0LL; i != v25; ++i)
        {
          if ((v24 & 0xC000000000000001LL) != 0)
          {
            uint64_t v27 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v24);
            uint64_t v28 = v27;
          }

          else
          {
            uint64_t v28 = *(void *)(v24 + 8 * i + 32);
            uint64_t v27 = swift_retain(v28);
          }

          dispatch thunk of CodeGenListEntry.entry.getter(&v51, v27);
          uint64_t v29 = v51;
          if (v51)
          {
            swift_retain(v51);
            uint64_t v30 = specialized static SportsProperty.from(entity:)();
            uint64_t v32 = v31;
            char v34 = v33;
            swift_release_n(v29, 2LL);
            switch(v34)
            {
              case 0:
                SportsItem.team.setter(v30, v32);
                break;
              case 1:
                SportsItem.teamQId.setter(v30, v32);
                break;
              case 2:
                SportsItem.league.setter(v30, v32);
                break;
              case 3:
                SportsItem.leagueQId.setter(v30, v32);
                break;
              case 4:
                SportsItem.sport.setter(v30, v32);
                break;
              case 5:
                SportsItem.sportQId.setter(v30, v32);
                break;
              case 6:
                SportsItem.athlete.setter(v30, v32);
                break;
              case 7:
                SportsItem.athleteQId.setter(v30, v32);
                break;
              default:
                break;
            }
          }

          swift_release(v28);
        }
      }
    }

    swift_bridgeObjectRelease(v24);
    uint64_t v38 = v49;
    uint64_t v19 = v45;
    uint64_t v39 = v43;
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v45, v13, v43);
    swift_bridgeObjectRelease(v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v19, 0LL, 1LL, v39);
    uint64_t v9 = v47;
    a2 = v48;
    uint64_t v7 = v46;
    uint64_t v17 = v44;
    goto LABEL_30;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56))(v19, 1LL, 1LL, v10);
LABEL_30:
  uint64_t v40 = v50;
  static PersonalizationLevel.from(uso:)((unint64_t)v9);
  outlined init with copy of IdentifiedUser?( (uint64_t)v19,  (uint64_t)v17,  &demangling cache variable for type metadata for SportsItem?);
  outlined init with copy of IdentifiedUser?( (uint64_t)v9,  (uint64_t)v7,  &demangling cache variable for type metadata for PersonalizationLevel?);
  SportsPersonalizationEntity.init(sportsItem:personalizationLevel:)(v17, v7);
  swift_release(v40);
  outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for PersonalizationLevel?);
  outlined destroy of Any?((uint64_t)v19, &demangling cache variable for type metadata for SportsItem?);
  uint64_t v41 = type metadata accessor for SportsPersonalizationEntity(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56LL))(a2, 0LL, 1LL, v41);
}

uint64_t closure #2 in SportsPersonalizationEntryPoint.makePersonalizedSportsExperience(result:)@<X0>( void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = Parse.PegasusResult.response.getter(v4);
  uint64_t v8 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.alternateSiriInstructions.getter(v7);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  uint64_t v9 = static SportsPersonalizationEntryPoint.makeEntityInstructionMapping(alternatives:)(v8);
  uint64_t result = swift_bridgeObjectRelease(v8);
  *a1 = v9;
  return result;
}

void *static SportsPersonalizationEntryPoint.makeEntityInstructionMapping(alternatives:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v67 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v78 = (uint64_t)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v63 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsPersonalizationEntity?);
  __chkstk_darwin(v10);
  uint64_t v82 = (uint64_t)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SportsPersonalizationEntity(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v80 = v12;
  uint64_t v81 = v13;
  __chkstk_darwin(v12);
  uint64_t v66 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)?);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
  uint64_t v77 = *(void *)(v18 - 8);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v72 = (uint64_t)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v65 = (uint64_t)&v63 - v21;
  uint64_t v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction(0LL);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = *(void *)(a1 + 16);
  if (v27)
  {
    uint64_t v79 = v23;
    uint64_t v28 = a1 + ((*(unsigned __int8 *)(v24 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
    uint64_t v68 = *(void *)(v24 + 72);
    uint64_t v69 = v24;
    uint64_t v75 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 16);
    uint64_t v64 = a1;
    swift_bridgeObjectRetain(a1);
    uint64_t v73 = _swiftEmptyArrayStorage;
    uint64_t v74 = v26;
    uint64_t v63 = v27;
    uint64_t v70 = v17;
    uint64_t v71 = v2;
    uint64_t v76 = v18;
    do
    {
      uint64_t v29 = v75(v26, v28, v79);
      uint64_t v30 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter(v29);
      uint64_t v31 = v30;
      if (*(void *)(v30 + 16))
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))( v9,  v30 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)),  v2);
        uint64_t v32 = 0LL;
      }

      else
      {
        uint64_t v32 = 1LL;
      }

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v9, v32, 1LL, v2);
      swift_bridgeObjectRelease(v31);
      uint64_t v33 = v78;
      outlined init with copy of IdentifiedUser?( (uint64_t)v9,  v78,  &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v33, 1LL, v2) == 1)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56))(v82, 1LL, 1LL, v80);
      }

      else
      {
        uint64_t v34 = v2;
        uint64_t v35 = (uint64_t)v67;
        (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v67, v78, v34);
        static SportsPersonalizationEntryPoint.makeSportsEntity(entity:)(v35, v82);
        uint64_t v36 = v35;
        uint64_t v2 = v34;
        uint64_t v26 = v74;
        (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v36, v2);
      }

      outlined destroy of Any?( (uint64_t)v9,  &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v82, 1LL, v80) == 1)
      {
        outlined destroy of Any?(v82, &demangling cache variable for type metadata for SportsPersonalizationEntity?);
        uint64_t v37 = 1LL;
        uint64_t v38 = (uint64_t)v70;
        uint64_t v39 = v26;
        uint64_t v40 = v79;
      }

      else
      {
        uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v81 + 32);
        uint64_t v42 = v66;
        uint64_t v43 = v80;
        v41(v66, v82, v80);
        uint64_t v38 = (uint64_t)v70;
        uint64_t v44 = &v70[*(int *)(v76 + 48)];
        v41(v70, (uint64_t)v42, v43);
        uint64_t v18 = v76;
        uint64_t v2 = v71;
        uint64_t v45 = v26;
        uint64_t v39 = v26;
        uint64_t v40 = v79;
        v75(v44, (uint64_t)v45, v79);
        uint64_t v37 = 0LL;
      }

      uint64_t v46 = v77;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56))(v38, v37, 1LL, v18);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v39, v40);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v38, 1LL, v18) == 1)
      {
        outlined destroy of Any?( v38,  &demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)?);
        uint64_t v26 = v74;
      }

      else
      {
        uint64_t v47 = v38;
        uint64_t v48 = v65;
        outlined init with take of Flow?( v47,  v65,  &demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
        outlined init with take of Flow?( v48,  v72,  &demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
        unint64_t v49 = (unint64_t)v73;
        if ((swift_isUniquelyReferenced_nonNull_native(v73) & 1) == 0) {
          unint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v49 + 16) + 1LL,  1,  v49);
        }
        uint64_t v26 = v74;
        unint64_t v51 = *(void *)(v49 + 16);
        unint64_t v50 = *(void *)(v49 + 24);
        if (v51 >= v50 >> 1) {
          unint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v50 > 1,  v51 + 1,  1,  v49);
        }
        *(void *)(v49 + 16) = v51 + 1;
        unint64_t v52 = (*(unsigned __int8 *)(v77 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
        uint64_t v73 = (void *)v49;
        outlined init with take of Flow?( v72,  v49 + v52 + *(void *)(v77 + 72) * v51,  &demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
        uint64_t v2 = v71;
        uint64_t v18 = v76;
      }

      v28 += v68;
      --v27;
    }

    while (v27);
    swift_bridgeObjectRelease(v64);
    uint64_t v27 = v63;
    uint64_t result = v73;
  }

  else
  {
    uint64_t result = _swiftEmptyArrayStorage;
  }

  if (result[2] != v27)
  {
    swift_bridgeObjectRelease(result);
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v54 = type metadata accessor for Logger(0LL);
    uint64_t v55 = __swift_project_value_buffer(v54, (uint64_t)static Logger.information);
    uint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
    os_log_type_t v61 = static os_log_type_t.debug.getter(v56, v57, v58, v59, v60);
    if (os_log_type_enabled(v56, v61))
    {
      uint64_t v62 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v62 = 0;
      _os_log_impl( &dword_0,  v56,  v61,  "One or more alternative instruction did not have a single sports entity. Will ignore alternatives...",  v62,  2u);
      swift_slowDealloc(v62, -1LL, -1LL);
    }

    return 0LL;
  }

  return result;
}

uint64_t closure #3 in SportsPersonalizationEntryPoint.makePersonalizedSportsExperience(result:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
  uint64_t v7 = *(void *)(v42 - 8);
  uint64_t v8 = __chkstk_darwin(v42);
  uint64_t v41 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v40 = (uint64_t)v36 - v10;
  uint64_t v11 = type metadata accessor for SportsPersonalizationEntity(0LL);
  uint64_t v43 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of OutputPublisherAsync(a1 + 16, (uint64_t)v46);
  uint64_t v37 = v48;
  uint64_t v38 = v47;
  uint64_t v14 = __swift_project_boxed_opaque_existential_1(v46, v47);
  int64_t v15 = *(void *)(a2 + 16);
  uint64_t v16 = (char *)_swiftEmptyArrayStorage;
  if (v15)
  {
    v36[1] = v14;
    void v36[2] = a3;
    v36[3] = v3;
    unint64_t v49 = (char *)_swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
    uint64_t v17 = a2 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v39 = *(void *)(v7 + 72);
    uint64_t v18 = v43;
    do
    {
      uint64_t v44 = v17;
      int64_t v45 = v15;
      uint64_t v19 = v40;
      outlined init with copy of IdentifiedUser?( v17,  v40,  &demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
      uint64_t v20 = *(int *)(v42 + 48);
      uint64_t v21 = v11;
      uint64_t v22 = v41;
      uint64_t v23 = &v41[v20];
      uint64_t v24 = v19 + v20;
      (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v41, v19, v21);
      uint64_t v25 = v13;
      uint64_t v26 = v18;
      uint64_t v27 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction(0LL);
      uint64_t v28 = *(void *)(v27 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v23, v24, v27);
      uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
      uint64_t v13 = v25;
      uint64_t v30 = v29;
      uint64_t v31 = v22;
      uint64_t v11 = v21;
      v29(v13, v31, v21);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v23, v27);
      outlined destroy of Any?( v19,  &demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
      uint64_t v16 = v49;
      if ((swift_isUniquelyReferenced_nonNull_native(v49) & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *((void *)v16 + 2) + 1LL,  1);
        uint64_t v16 = v49;
      }

      unint64_t v33 = *((void *)v16 + 2);
      unint64_t v32 = *((void *)v16 + 3);
      int64_t v34 = v45;
      if (v33 >= v32 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
        uint64_t v16 = v49;
      }

      *((void *)v16 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v33 + 1;
      uint64_t v18 = v43;
      v30( &v16[((*(unsigned __int8 *)(v18 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))
           + *(void *)(v43 + 72) * v33],
        v13,
        v21);
      unint64_t v49 = v16;
      uint64_t v17 = v44 + v39;
      int64_t v15 = v34 - 1;
    }

    while (v15);
  }

  dispatch thunk of SportsInferenceQuerying.makeRecommendation(entities:)(v16, v38, v37);
  swift_bridgeObjectRelease(v16);
  return __swift_destroy_boxed_opaque_existential_1(v46);
}

uint64_t SportsPersonalizationEntryPoint.deinit()
{
  return v0;
}

uint64_t SportsPersonalizationEntryPoint.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 136LL, 7LL);
}

uint64_t protocol witness for FlowEntryPoint.flowFor(input:) in conformance SportsPersonalizationEntryPoint()
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)v0 + 120LL))();
  return protocol witness for FlowEntryPoint.flowFor(input:) in conformance InformationRoutingEntryPoint( *(uint64_t (**)(uint64_t))(v1 + 8),  v1,  v2);
}

uint64_t ReformerFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v1;
  return swift_task_switch(ReformerFlow.execute(), 0LL, 0LL);
}

uint64_t ReformerFlow.execute()()
{
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v2, (uint64_t)static Logger.information);
  uint64_t v3 = swift_retain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v9 = static os_log_type_t.debug.getter(v4, v5, v6, v7, v8);
  BOOL v10 = os_log_type_enabled(v4, v9);
  uint64_t v11 = *(void *)(v0 + 32);
  p_info = &OBJC_CLASS____TtC21InformationFlowPlugin22InformationViewFactory.info;
  if (v10)
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    uint64_t v22 = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    uint64_t v15 = type metadata accessor for PluginAction(0LL);
    uint64_t v16 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type PluginAction and conformance PluginAction,  (uint64_t (*)(uint64_t))&type metadata accessor for PluginAction,  (uint64_t)&protocol conformance descriptor for PluginAction);
    uint64_t v17 = v15;
    p_info = (__objc2_class_ro **)(&OBJC_CLASS____TtC21InformationFlowPlugin22InformationViewFactory + 32);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter(v17, v16);
    unint64_t v20 = v19;
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    swift_bridgeObjectRelease(v20);
    swift_release_n(v11, 2LL);
    _os_log_impl(&dword_0, v4, v9, "Redirecting parse: %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {
    swift_release_n(*(void *)(v0 + 32), 2LL);
  }

  static ExecuteResponse.redirect(nextPluginAction:)((char *)p_info[177] + *(void *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ReformerFlow.__deallocating_deinit()
{
  return ReformerFlow.__deallocating_deinit( &OBJC_IVAR____TtC21InformationFlowPluginP33_65CFA3A7C2969752B966336CF3E7884312ReformerFlow_pluginAction,  (uint64_t (*)(void))&type metadata accessor for PluginAction);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance ReformerFlow( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for Flow.execute(completion:) in conformance ReformerFlow( a1,  a2,  a3,  a4,  type metadata accessor for ReformerFlow);
}

uint64_t protocol witness for Flow.execute() in conformance ReformerFlow(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc(dword_A35CC);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  v5[3] = a1;
  v5[4] = v4;
  return swift_task_switch(ReformerFlow.execute(), 0LL, 0LL);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance ReformerFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for ReformerFlow(0LL);
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t InformationPassthroughFlow.__deallocating_deinit()
{
  return ReformerFlow.__deallocating_deinit( &OBJC_IVAR____TtC21InformationFlowPluginP33_65CFA3A7C2969752B966336CF3E7884326InformationPassthroughFlow_result,  (uint64_t (*)(void))&type metadata accessor for Parse.PegasusResult);
}

uint64_t ReformerFlow.__deallocating_deinit(void *a1, uint64_t (*a2)(void))
{
  uint64_t v3 = v2 + *a1;
  uint64_t v4 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  return swift_deallocClassInstance( v2,  *(unsigned int *)(*(void *)v2 + 48LL),  *(unsigned __int16 *)(*(void *)v2 + 52LL));
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance InformationPassthroughFlow( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to Flow.onAsync(input:)[1]);
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = protocol witness for Flow.onAsync(input:) in conformance InformationPassthroughFlow;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance InformationPassthroughFlow( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for Flow.execute(completion:) in conformance ReformerFlow( a1,  a2,  a3,  a4,  type metadata accessor for InformationPassthroughFlow);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance ReformerFlow( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v8 = a5(0LL);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v8, a4);
}

uint64_t protocol witness for Flow.execute() in conformance InformationPassthroughFlow(uint64_t a1)
{
  v2[3] = a1;
  uint64_t v3 = type metadata accessor for Parse.PegasusResult(0LL);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  void v2[5] = v4;
  uint64_t v5 = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *v1;
  v2[6] = v5;
  v2[7] = v6;
  return swift_task_switch(protocol witness for Flow.execute() in conformance InformationPassthroughFlow, 0LL, 0LL);
}

uint64_t protocol witness for Flow.execute() in conformance InformationPassthroughFlow()
{
  uint64_t v1 = *(void *)(v0 + 48);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 40) + 16LL))( v1,  *(void *)(v0 + 56)
  + OBJC_IVAR____TtC21InformationFlowPluginP33_65CFA3A7C2969752B966336CF3E7884326InformationPassthroughFlow_result,
    *(void *)(v0 + 32));
  int v2 = [(id)objc_opt_self(AFFeatureFlags) isSiriLocationServicesPromptingEnabled];
  uint64_t v3 = specialized InformationRoutingFlow.__allocating_init(result:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( v1,  v2);
  *(void *)(v0 + 16) = v3;
  uint64_t v4 = type metadata accessor for InformationRoutingFlow(0LL);
  uint64_t v5 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type InformationRoutingFlow and conformance InformationRoutingFlow,  type metadata accessor for InformationRoutingFlow,  (uint64_t)&protocol conformance descriptor for InformationRoutingFlow);
  static ExecuteResponse.complete<A>(next:)(v0 + 16, v4, v5);
  swift_release(v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for Flow.exitValue.getter in conformance InformationPassthroughFlow( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for InformationPassthroughFlow(0LL);
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t partial apply for closure #1 in SportsPersonalizationEntryPoint.flowFor(input:)@<X0>( uint64_t a1@<X8>)
{
  uint64_t result = SportsPersonalizationEntryPoint.makePersonalizedSportsExperience(result:)(*(void *)(v1 + 24));
  *(void *)a1 = result;
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = v4;
  return result;
}

uint64_t partial apply for closure #2 in SportsPersonalizationEntryPoint.flowFor(input:)()
{
  return closure #2 in SportsPersonalizationEntryPoint.flowFor(input:)(*(void *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t outlined destroy of SportsIntentDonator(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type SportsInactionReason and conformance SportsInactionReason()
{
  unint64_t result = lazy protocol witness table cache variable for type SportsInactionReason and conformance SportsInactionReason;
  if (!lazy protocol witness table cache variable for type SportsInactionReason and conformance SportsInactionReason)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SportsInactionReason,  &type metadata for SportsInactionReason);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SportsInactionReason and conformance SportsInactionReason);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for SportsInactionReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_693F4 + 4 * byte_7E7A5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_69428 + 4 * asc_7E7A0[v4]))();
}

uint64_t sub_69428(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_69430(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x69438LL);
  }
  return result;
}

uint64_t sub_69444(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x6944CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_69450(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_69458(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SportsInactionReason()
{
  return &type metadata for SportsInactionReason;
}

uint64_t getEnumTagSinglePayload for SportsPersonalizationAction(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD)
  {
    unsigned int v6 = *a1;
    BOOL v7 = v6 >= 3;
    unsigned int v8 = v6 - 3;
    if (!v7) {
      unsigned int v8 = -1;
    }
    if (v8 + 1 >= 2) {
      return v8;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    unsigned int v2 = a2 + 3;
    if (a2 + 3 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_694C4 + 4 * byte_7E7AA[v4]))();
  }

uint64_t storeEnumTagSinglePayload for SportsPersonalizationAction( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 3;
  if (a3 + 3 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    LODWORD(v5) = v4;
  }
  else {
    LODWORD(v5) = 0;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_6956C + 4 * byte_7E7B4[v5]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_695A0 + 4 * byte_7E7AF[v5]))();
}

uint64_t sub_695A0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_695A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x695B0LL);
  }
  return result;
}

uint64_t sub_695BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x695C4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_695C8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_695D0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for SportsPersonalizationAction(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 3) {
    return v1 - 2;
  }
  else {
    return 0LL;
  }
}

_BYTE *destructiveInjectEnumTag for SportsPersonalizationAction(_BYTE *result, int a2)
{
  if (a2) {
    *unint64_t result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsPersonalizationAction()
{
  return &type metadata for SportsPersonalizationAction;
}

uint64_t getEnumTagSinglePayload for SportsPersonalizationAction.SelectionMetric( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for SportsPersonalizationAction.SelectionMetric( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_696FC + 4 * byte_7E7BE[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_69730 + 4 * byte_7E7B9[v4]))();
}

uint64_t sub_69730(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_69738(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x69740LL);
  }
  return result;
}

uint64_t sub_6974C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x69754LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_69758(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_69760(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SportsPersonalizationAction.SelectionMetric()
{
  return &type metadata for SportsPersonalizationAction.SelectionMetric;
}

uint64_t initializeBufferWithCopyOfBuffer for SportsPersonalizationResult(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *((_BYTE *)a2 + 8);
  swift_retain(v3);
  return a1;
}

uint64_t destroy for SportsPersonalizationResult(void *a1)
{
  return swift_release(*a1);
}

uint64_t *assignWithCopy for SportsPersonalizationResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  *((_BYTE *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *((_BYTE *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t *assignWithTake for SportsPersonalizationResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *((_BYTE *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsPersonalizationResult(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 9)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsPersonalizationResult( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SportsPersonalizationResult()
{
  return &type metadata for SportsPersonalizationResult;
}

uint64_t type metadata accessor for SportsPersonalizationEntryPoint()
{
  return objc_opt_self(&OBJC_CLASS____TtC21InformationFlowPlugin31SportsPersonalizationEntryPoint);
}

uint64_t ObjC metadata update function for ReformerFlow()
{
  return type metadata accessor for ReformerFlow(0LL);
}

uint64_t type metadata accessor for ReformerFlow(uint64_t a1)
{
  return type metadata accessor for InformationRoutingFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for ReformerFlow,  (uint64_t)&nominal type descriptor for ReformerFlow);
}

uint64_t type metadata completion function for ReformerFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for ReformerFlow( a1,  a2,  a3,  (uint64_t (*)(uint64_t))&type metadata accessor for PluginAction);
}

uint64_t ObjC metadata update function for InformationPassthroughFlow()
{
  return type metadata accessor for InformationPassthroughFlow(0LL);
}

uint64_t type metadata accessor for InformationPassthroughFlow(uint64_t a1)
{
  return type metadata accessor for InformationRoutingFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for InformationPassthroughFlow,  (uint64_t)&nominal type descriptor for InformationPassthroughFlow);
}

uint64_t type metadata completion function for InformationPassthroughFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for ReformerFlow( a1,  a2,  a3,  (uint64_t (*)(uint64_t))&type metadata accessor for Parse.PegasusResult);
}

uint64_t type metadata completion function for ReformerFlow( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319LL);
  if (v6 <= 0x3F)
  {
    uint64_t v7 = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 1LL, &v7, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t specialized InformationRoutingFlow.__allocating_init(result:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( uint64_t a1, int a2)
{
  uint64_t v4 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for InformationRoutingFlow.State(0LL);
  __chkstk_darwin(v7);
  os_log_type_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Parse.PegasusResult(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v9, a1, v10);
  uint64_t v12 = swift_storeEnumTagMultiPayload(v9, v7, 1LL);
  uint64_t v13 = static AceService.currentAsync.getter(v30, v12);
  uint64_t v14 = static OutputPublisherFactory.makeOutputPublisherAsync()(v29, v13);
  static Device.current.getter(v28, v14);
  type metadata accessor for CommonCATs(0LL);
  static CATOption.defaultMode.getter();
  uint64_t v15 = CATWrapper.__allocating_init(options:globals:)(v6, 0LL);
  uint64_t v16 = type metadata accessor for InformationViewFactory();
  uint64_t v17 = (void *)swift_allocObject(v16, 104LL, 7LL);
  id v18 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
  uint64_t v19 = type metadata accessor for PommesServerFallbackPreferences(0LL);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  uint64_t v20 = PommesServerFallbackPreferences.init(_:)(v18);
  v17[11] = v19;
  v17[12] = &protocol witness table for PommesServerFallbackPreferences;
  v17[8] = v20;
  outlined init with take of PatternFlowProviding(v28, (uint64_t)(v17 + 3));
  __int128 v17[2] = v15;
  uint64_t v21 = type metadata accessor for ExperienceSelector();
  uint64_t v22 = swift_allocObject(v21, 16LL, 7LL);
  type metadata accessor for PommesResponse(0LL);
  static PommesResponse.makeDefaultInteractionStream()(v28);
  uint64_t v23 = type metadata accessor for InformationRoutingFlow(0LL);
  uint64_t v24 = swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  uint64_t v25 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( (uint64_t)v9,  v30,  v29,  (uint64_t)v17,  v22,  (uint64_t)v28,  a2,  v24);
  swift_release(v17);
  swift_release(v22);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  return v25;
}

uint64_t specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)( uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  HIDWORD(v20) = a7;
  uint64_t v21 = type metadata accessor for UtteranceNormalizer(0LL);
  uint64_t v15 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v23[3] = &type metadata for KnowledgeFallbackHelper;
  v23[4] = &protocol witness table for KnowledgeFallbackHelper;
  uint64_t v18 = a8 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_interactionStream;
  *(_OWORD *)uint64_t v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(void *)(v18 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
  outlined init with copy of InformationRoutingFlow.State( a1,  a8 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_state);
  outlined init with copy of OutputPublisherAsync((uint64_t)a2, a8 + 56);
  outlined init with copy of OutputPublisherAsync((uint64_t)a3, a8 + 16);
  *(void *)(a8 + 96) = a4;
  *(void *)(a8 + 104) = a5;
  swift_beginAccess(v18, v22, 33LL, 0LL);
  swift_retain(a4);
  swift_retain(a5);
  outlined assign with copy of CurareInteractionStream?(a6, v18);
  swift_endAccess(v22);
  *(_BYTE *)(a8 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_isSiriLocationServicesPromptingEnabled) = BYTE4(v20);
  outlined init with copy of OutputPublisherAsync( (uint64_t)v23,  a8 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_knowledgeFallbackHelper);
  UtteranceNormalizer.init(locale:)(0LL, 0LL);
  __swift_destroy_boxed_opaque_existential_1(v23);
  outlined destroy of Any?(a6, &demangling cache variable for type metadata for CurareInteractionStream?);
  __swift_destroy_boxed_opaque_existential_1(a3);
  __swift_destroy_boxed_opaque_existential_1(a2);
  outlined destroy of InformationRoutingFlow.State(a1);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))( a8 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_utteranceNormalizer,  v17,  v21);
  return a8;
}

uint64_t outlined init with copy of InformationRoutingFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InformationRoutingFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of InformationRoutingFlow.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for InformationRoutingFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t specialized static SportsPersonalizationEntryPoint.isSupportedPersonalizationInstruction(instruction:)( uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent(0LL);
  uint64_t v62 = *(void *)(v2 - 8);
  uint64_t v63 = v2;
  __chkstk_darwin(v2);
  os_log_type_t v61 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_CatDialogComponent(0LL);
  uint64_t v66 = *(void *)(v4 - 8);
  uint64_t v67 = v4;
  __chkstk_darwin(v4);
  uint64_t v65 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent(0LL);
  uint64_t v68 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v70 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v64 = (char *)&v56 - v9;
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v69 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter(v16);
  uint64_t v19 = *(void *)(v18 + 16);
  if (v19)
  {
    uint64_t v57 = v15;
    uint64_t v58 = v14;
    uint64_t v59 = a1;
    uint64_t v60 = (uint64_t (*)(char *, char *, uint64_t))v6;
    unint64_t v20 = v18 + ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v21 = *(void *)(v11 + 72);
    uint64_t v22 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v11 + 16);
    uint64_t v56 = v18;
    swift_bridgeObjectRetain(v18);
    while (1)
    {
      uint64_t v23 = v22(v13, v20, v10);
      uint64_t v24 = Apple_Parsec_Siri_Context_ResultEntity.name.getter(v23);
      uint64_t v26 = v25;
      if (v24 == 0x6769626D61736944LL && v25 == 0xEE006E6F69746175LL) {
        break;
      }
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, 0x6769626D61736944LL, 0xEE006E6F69746175LL, 0LL);
      swift_bridgeObjectRelease(v26);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      if ((v27 & 1) != 0) {
        goto LABEL_10;
      }
      v20 += v21;
      if (!--v19)
      {
        uint64_t v28 = swift_bridgeObjectRelease_n(v56, 2LL);
        uint64_t v29 = 0LL;
        goto LABEL_11;
      }
    }

    swift_bridgeObjectRelease(0xEE006E6F69746175LL);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
LABEL_10:
    uint64_t v28 = swift_bridgeObjectRelease_n(v56, 2LL);
    uint64_t v29 = 1LL;
LABEL_11:
    uint64_t v6 = (uint64_t)v60;
    uint64_t v15 = v57;
    uint64_t v14 = v58;
  }

  else
  {
    uint64_t v28 = swift_bridgeObjectRelease(v18);
    uint64_t v29 = 0LL;
  }

  uint64_t v30 = v69;
  uint64_t v31 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverDrivenExperience.getter(v28);
  uint64_t v32 = Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.components.getter(v31);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v30, v14);
  unint64_t v33 = *(char **)(v32 + 16);
  if (v33)
  {
    LODWORD(v5__swift_destroy_boxed_opaque_existential_1(v0 + 7) = v29;
    unint64_t v34 = v32 + ((*(unsigned __int8 *)(v68 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80));
    uint64_t v35 = *(uint64_t (**)(char *, char *, uint64_t))(v68 + 16);
    uint64_t v59 = *(void *)(v68 + 72);
    uint64_t v60 = v35;
    uint64_t v58 = v32;
    swift_bridgeObjectRetain(v32);
    uint64_t v36 = v64;
    while (1)
    {
      uint64_t v69 = v33;
      uint64_t v37 = v60;
      uint64_t v38 = v60(v36, (char *)v34, v6);
      uint64_t v39 = v65;
      uint64_t v40 = Apple_Parsec_Siri_V2alpha_ExperienceComponent.catDialog.getter(v38);
      Apple_Parsec_Siri_V2alpha_CatDialogComponent.catID.getter(v40);
      uint64_t v42 = v41;
      (*(void (**)(char *, uint64_t))(v66 + 8))(v39, v67);
      Swift::String v43 = String.lowercased()();
      swift_bridgeObjectRelease(v42);
      Swift::String v72 = v43;
      strcpy(v71, "disambiguation");
      v71[15] = -18;
      unint64_t v44 = lazy protocol witness table accessor for type String and conformance String();
      LOBYTE(v4__swift_destroy_boxed_opaque_existential_1(v0 + 2) = StringProtocol.contains<A>(_:)(v71, &type metadata for String, &type metadata for String, v44, v44);
      swift_bridgeObjectRelease(v43._object);
      int64_t v45 = v70;
      uint64_t v46 = v37(v70, v36, v6);
      if ((v42 & 1) != 0) {
        break;
      }
      uint64_t v47 = v61;
      uint64_t v48 = Apple_Parsec_Siri_V2alpha_ExperienceComponent.renderedDialog.getter(v46);
      Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catID.getter(v48);
      uint64_t v50 = v49;
      (*(void (**)(char *, uint64_t))(v62 + 8))(v47, v63);
      Swift::String v51 = String.lowercased()();
      swift_bridgeObjectRelease(v50);
      Swift::String v72 = v51;
      strcpy(v71, "disambiguation");
      v71[15] = -18;
      char v52 = StringProtocol.contains<A>(_:)(v71, &type metadata for String, &type metadata for String, v44, v44);
      swift_bridgeObjectRelease(v51._object);
      uint64_t v53 = *(void (**)(char *, uint64_t))(v68 + 8);
      v53(v70, v6);
      v53(v36, v6);
      if ((v52 & 1) != 0) {
        goto LABEL_20;
      }
      v34 += v59;
      unint64_t v33 = v69 - 1;
      if (v69 == (_BYTE *)&dword_0 + 1)
      {
        swift_bridgeObjectRelease_n(v58, 2LL);
        return v57;
      }
    }

    uint64_t v54 = *(void (**)(char *, uint64_t))(v68 + 8);
    v54(v45, v6);
    v54(v36, v6);
LABEL_20:
    swift_bridgeObjectRelease_n(v58, 2LL);
    return 1LL;
  }

  else
  {
    swift_bridgeObjectRelease(v32);
  }

  return v29;
}

uint64_t partial apply for closure #2 in SportsPersonalizationEntryPoint.makePersonalizedSportsExperience(result:)@<X0>( void *a1@<X8>)
{
  return closure #2 in SportsPersonalizationEntryPoint.makePersonalizedSportsExperience(result:)(a1);
}

uint64_t partial apply for closure #3 in SportsPersonalizationEntryPoint.makePersonalizedSportsExperience(result:)@<X0>( uint64_t a1@<X8>)
{
  return closure #3 in SportsPersonalizationEntryPoint.makePersonalizedSportsExperience(result:)( *(void *)(v1 + 16),  *(void *)(v1 + 24),  a1);
}

uint64_t partial apply for closure #1 in closure #1 in SportsPersonalizationEntryPoint.makePersonalizedSportsExperience(result:)@<X0>( uint64_t a1@<X8>)
{
  return static SportsPersonalizationEntryPoint.makeSportsEntity(entity:)(*(void *)(v1 + 16), a1);
}

uint64_t RenderPegasusFlow.__allocating_init(pegasusResult:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = specialized RenderPegasusFlow.__allocating_init(pegasusResult:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:)( a1,  a2,  a3,  a4,  a5,  a7);
  swift_release(a4);
  swift_release(a6);
  return v9;
}

uint64_t RenderPegasusFlow.__allocating_init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v16 = a8[3];
  uint64_t v15 = a8[4];
  uint64_t v17 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a8, v16);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v20 + 16))(v19);
  uint64_t v21 = specialized RenderPegasusFlow.__allocating_init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)( a1,  a2,  a3,  v23,  v24,  v25,  v26,  (uint64_t)v19,  a9,  a10,  v10,  v16,  v15);
  __swift_destroy_boxed_opaque_existential_1(a8);
  return v21;
}

uint64_t protocol witness for static AppResolutionUnsuccessfulResponseProducing.makeAppNotFoundOnDeviceResponse(appNameSearchTerm:) in conformance AppResolutionStrategyHelpers( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to static AppResolutionStrategyHelpers.makeAppNotFoundOnDeviceResponse(appNameSearchTerm:)[1]);
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return static AppResolutionStrategyHelpers.makeAppNotFoundOnDeviceResponse(appNameSearchTerm:)(a1, a2, a3);
}

uint64_t RenderPegasusFlow.outputPublisher.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync( v1 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_outputPublisher,  a1);
}

uint64_t RenderPegasusFlow.informationViewFactory.getter()
{
  return swift_retain(*(void *)(v0 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_informationViewFactory));
}

uint64_t closure #1 in RenderPegasusFlow.init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)( uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88LL))(a2);
}

uint64_t RenderPegasusFlow.__allocating_init(experience:pommesResponse:outputPublisher:informationViewFactory:renderComponentFlowFactory:flowTaskLogger:aceServiceInvoker:pegasusPatternFlowFactory:appChecking:responseProducerType:)( uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = v11;
  uint64_t v30 = a7;
  uint64_t v31 = a8;
  uint64_t v28 = a1;
  uint64_t v29 = a3;
  uint64_t v27 = a10;
  uint64_t v17 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  uint64_t v18 = a9[3];
  uint64_t v19 = a9[4];
  uint64_t v20 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a9, v18);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v26 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v23 + 16))(v22);
  uint64_t v24 = specialized RenderPegasusFlow.init(experience:pommesResponse:outputPublisher:informationViewFactory:renderComponentFlowFactory:flowTaskLogger:aceServiceInvoker:pegasusPatternFlowFactory:appChecking:responseProducerType:)( v28,  a2,  v29,  a4,  a5,  a6,  v30,  v31,  (uint64_t)v22,  v27,  a11,  v17,  v18,  v19);
  swift_release(a4);
  swift_release(a5);
  swift_release(a6);

  __swift_destroy_boxed_opaque_existential_1(a9);
  return v24;
}

uint64_t RenderPegasusFlow.init(experience:pommesResponse:outputPublisher:informationViewFactory:renderComponentFlowFactory:flowTaskLogger:aceServiceInvoker:pegasusPatternFlowFactory:appChecking:responseProducerType:)( uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v26 = a3;
  uint64_t v27 = a7;
  uint64_t v28 = a8;
  uint64_t v24 = a1;
  uint64_t v16 = a9[3];
  uint64_t v15 = a9[4];
  uint64_t v17 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a9, v16);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v20 + 16))(v19);
  uint64_t v21 = specialized RenderPegasusFlow.init(experience:pommesResponse:outputPublisher:informationViewFactory:renderComponentFlowFactory:flowTaskLogger:aceServiceInvoker:pegasusPatternFlowFactory:appChecking:responseProducerType:)( v24,  a2,  v26,  a4,  a5,  a6,  v27,  v28,  (uint64_t)v19,  a10,  a11,  v25,  v16,  v15);
  swift_release(a4);
  swift_release(a5);
  swift_release(a6);

  __swift_destroy_boxed_opaque_existential_1(a9);
  return v21;
}

uint64_t RenderPegasusFlow.addReferenceResolutionEntities(from:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for RREntity(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v48 = (char *)&v42 - v14;
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v44 = v4;
  if (v15)
  {
    uint64_t v16 = *(void *)(type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity(0LL) - 8);
    uint64_t v17 = a1 + ((*(unsigned __int8 *)(v16 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    uint64_t v18 = *(void *)(v16 + 72);
    uint64_t v43 = a1;
    swift_bridgeObjectRetain(a1);
    uint64_t v19 = _swiftEmptyArrayStorage;
    uint64_t v46 = v18;
    uint64_t v47 = v13;
    uint64_t v45 = v10;
    do
    {
      uint64_t v20 = v3;
      closure #1 in RenderPegasusFlow.addReferenceResolutionEntities(from:)(v17, (uint64_t)v8);
      if (v3)
      {
        swift_bridgeObjectRelease(v19);
        return swift_bridgeObjectRelease(v43);
      }

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) == 1)
      {
        outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for RREntity?);
      }

      else
      {
        uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
        uint64_t v22 = v9;
        uint64_t v23 = v48;
        v21(v48, v8, v22);
        uint64_t v24 = v23;
        uint64_t v9 = v22;
        v21(v13, v24, v22);
        if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0) {
          uint64_t v19 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v19[2] + 1LL,  1,  (unint64_t)v19);
        }
        unint64_t v26 = v19[2];
        unint64_t v25 = v19[3];
        uint64_t v27 = (uint64_t)v19;
        uint64_t v3 = v20;
        if (v26 >= v25 >> 1) {
          uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v25 > 1,  v26 + 1,  1,  (unint64_t)v19);
        }
        uint64_t v10 = v45;
        *(void *)(v27 + 16) = v26 + 1;
        uint64_t v19 = (void *)v27;
        unint64_t v28 = v27
        uint64_t v13 = v47;
        v21((char *)v28, v47, v9);
        uint64_t v18 = v46;
      }

      v17 += v18;
      --v15;
    }

    while (v15);
    swift_bridgeObjectRelease(v43);
    uint64_t v4 = v44;
  }

  else
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
  }

  uint64_t v30 = (uint64_t)v19;
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v31 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v31, (uint64_t)static Logger.information);
  uint64_t v32 = swift_bridgeObjectRetain_n(v19, 2LL);
  unint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v36 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v35 = 136315138;
    uint64_t v48 = (char *)(v35 + 4);
    v49[0] = v36;
    uint64_t v37 = swift_bridgeObjectRetain(v30);
    uint64_t v38 = Array.description.getter(v37, v9);
    unint64_t v40 = v39;
    swift_bridgeObjectRelease(v30);
    uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);
    swift_bridgeObjectRelease_n(v30, 2LL);
    unint64_t v41 = v40;
    uint64_t v4 = v44;
    swift_bridgeObjectRelease(v41);
    _os_log_impl(&dword_0, v33, v34, "Adding RR entities: %s", v35, 0xCu);
    swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1LL, -1LL);
    swift_slowDealloc(v35, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v30, 2LL);
  }

  swift_beginAccess(v4 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_rrEntities, v49, 33LL, 0LL);
  specialized Array.append<A>(contentsOf:)(v30);
  return swift_endAccess(v49);
}

uint64_t closure #1 in RenderPegasusFlow.addReferenceResolutionEntities(from:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v66 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?);
  __chkstk_darwin(v3);
  uint64_t v65 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Typespb_Domain(0LL);
  uint64_t v63 = *(void *)(v5 - 8);
  uint64_t v64 = v5;
  __chkstk_darwin(v5);
  uint64_t v62 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for GroupIdentifier(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for BinaryDecodingOptions(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Siri_Nlu_External_UsoGraph(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v67 = a1;
  uint64_t v19 = Apple_Parsec_Siri_Context_ResultEntity.usoEntity.getter(v16);
  uint64_t v21 = v20;
  uint64_t v69 = 0LL;
  memset(v68, 0, sizeof(v68));
  BinaryDecodingOptions.init()(v19);
  uint64_t v22 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph,  (uint64_t (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_UsoGraph,  (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_UsoGraph);
  uint64_t v23 = v70;
  uint64_t result = Message.init(serializedData:extensions:partial:options:)(v19, v21, v68, 0LL, v13, v14, v22);
  if (!v23)
  {
    uint64_t v60 = v7;
    uint64_t v61 = v8;
    uint64_t v70 = v15;
    uint64_t v25 = static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)(v18, 0LL);
    uint64_t v26 = static UsoConversionUtils.extractFirstEntityFromGraph(graph:)();
    if (v26)
    {
      uint64_t v58 = v26;
      uint64_t v59 = v25;
      uint64_t v27 = Apple_Parsec_Siri_Context_ResultEntity.groupID.getter();
      uint64_t v29 = v28;
      unsigned int v30 = Apple_Parsec_Siri_Context_ResultEntity.groupSequenceNumber.getter();
      uint64_t v55 = v10;
      uint64_t v31 = GroupIdentifier.init(id:seq:)(v27, v29, v30);
      uint64_t v32 = Apple_Parsec_Siri_Context_ResultEntity.id.getter(v31);
      uint64_t v56 = v33;
      uint64_t v57 = v32;
      *(void *)&v68[0] = 0LL;
      *((void *)&v68[0] + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(20LL);
      v34._object = (void *)0x8000000000080290LL;
      v34._uint64_t countAndFlagsBits = 0xD000000000000012LL;
      String.append(_:)(v34);
      uint64_t v35 = v62;
      Apple_Parsec_Siri_Context_ResultEntity.domain.getter();
      uint64_t v36 = v64;
      _print_unlocked<A, B>(_:_:)( v35,  v68,  v64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v35, v36);
      __int128 v37 = v68[0];
      uint64_t v38 = v60;
      uint64_t v39 = v61;
      unint64_t v40 = v65;
      unint64_t v41 = v55;
      (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v65, v55, v60);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v40, 0LL, 1LL, v38);
      uint64_t v53 = v40;
      uint64_t v42 = v66;
      RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)( v57,  v56,  v37,  *((void *)&v37 + 1),  v58,  0LL,  0LL,  0LL,  0xF000000000000000LL,  v53);
      swift_release(v59);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v38);
      (*(void (**)(char *, uint64_t))(v70 + 8))(v18, v14);
      uint64_t v43 = type metadata accessor for RREntity(0LL);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56LL))( v42,  0LL,  1LL,  v43);
    }

    else
    {
      if (one-time initialization token for information != -1) {
        swift_once(&one-time initialization token for information, one-time initialization function for information);
      }
      uint64_t v44 = type metadata accessor for Logger(0LL);
      uint64_t v45 = __swift_project_value_buffer(v44, (uint64_t)static Logger.information);
      uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
      os_log_type_t v47 = static os_log_type_t.error.getter();
      BOOL v48 = os_log_type_enabled(v46, v47);
      uint64_t v49 = v66;
      uint64_t v50 = v70;
      if (v48)
      {
        uint64_t v51 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v51 = 0;
        _os_log_impl(&dword_0, v46, v47, "Unable to extract entity from USO graph for RR donation", v51, 2u);
        swift_slowDealloc(v51, -1LL, -1LL);
      }

      swift_release(v25);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v18, v14);
      uint64_t v52 = type metadata accessor for RREntity(0LL);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56LL))( v49,  1LL,  1LL,  v52);
    }
  }

  return result;
}

uint64_t RenderPegasusFlow.on(input:)()
{
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static Logger.information);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "RenderPegasusFlow does not expect input", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  return 0LL;
}

uint64_t RenderPegasusFlow.execute()(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = type metadata accessor for PommesContext(0LL);
  _BYTE v2[8] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  void v2[9] = v4;
  v2[10] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Apple_Parsec_Responseframework_PatternModel(0LL);
  v2[11] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[12] = v6;
  v2[13] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v7 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesCandidateId?)
                              - 8)
                  + 64LL)
      + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[14] = swift_task_alloc(v7);
  v2[15] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for ExecuteResponse(0LL);
  v2[16] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[17] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[18] = swift_task_alloc(v10);
  v2[19] = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for Parse.DirectInvocation(0LL);
  v2[20] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[21] = v12;
  v2[22] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Date(0LL);
  v2[23] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  _BYTE v2[24] = v14;
  v2[25] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for PerformanceUtil.Ticket(0LL);
  v2[26] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v2[27] = v16;
  unint64_t v17 = (*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[28] = swift_task_alloc(v17);
  v2[29] = swift_task_alloc(v17);
  v2[30] = swift_task_alloc(v17);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
  v2[31] = swift_task_alloc((*(void *)(*(void *)(v18 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for PegasusExperience(0LL);
  v2[32] = v19;
  v2[33] = swift_task_alloc((*(void *)(*(void *)(v19 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(RenderPegasusFlow.execute(), 0LL, 0LL);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v3 = *(void *)(*(void *)v1 + 352LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 360LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 320LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 328LL);
  unint64_t v7 = *(void *)(*(void *)v1 + 304LL);
  uint64_t v6 = *(void *)(*(void *)v1 + 312LL);
  uint64_t v9 = *(void *)(*(void *)v1 + 288LL);
  uint64_t v8 = *(void *)(*(void *)v1 + 296LL);
  unint64_t v10 = *(void *)(*(void *)v1 + 280LL);
  *(void *)(*(void *)v1 + 368LL) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(RenderPegasusFlow.execute(), 0LL, 0LL);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v2 = *(void *)(*(void *)v1 + 400LL);
  *(void *)(*(void *)v1 + 408LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(RenderPegasusFlow.execute(), 0LL, 0LL);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v2 = *(void *)(v1 + 224);
  uint64_t v3 = static PerformanceUtil.shared.getter(a1);
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v2, 0LL);
  uint64_t v4 = swift_release(v3);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  unint64_t v10 = static os_log_type_t.debug.getter(v5, v6, v7, v8, v9);
  if (os_log_type_enabled(v5, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_0, v5, v10, "RenderPegasusFlow pushing render pattern flow", v11, 2u);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  uint64_t v12 = *(void *)(v1 + 408);
  uint64_t v14 = *(void *)(v1 + 376);
  uint64_t v13 = *(void *)(v1 + 384);
  uint64_t v15 = *(void *)(v1 + 224);
  uint64_t v16 = *(void *)(v1 + 208);
  unint64_t v17 = *(void *)(v1 + 216);
  uint64_t v18 = *(void *)(v1 + 96);
  Swift::String v34 = *(void *)(v1 + 104);
  unsigned int v30 = *(void *)(v1 + 232);
  uint64_t v32 = *(void *)(v1 + 88);

  static ExecuteResponse.complete(next:)(v12);
  swift_release(v12);
  outlined consume of Data?(v14, v13);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v19(v15, v16);
  v19(v30, v16);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v34, v32);
  uint64_t v20 = *(void *)(v1 + 240);
  uint64_t v21 = *(void *)(v1 + 248);
  uint64_t v23 = *(void *)(v1 + 224);
  uint64_t v22 = *(void *)(v1 + 232);
  uint64_t v24 = *(void *)(v1 + 200);
  uint64_t v25 = *(void *)(v1 + 176);
  uint64_t v27 = *(void *)(v1 + 144);
  uint64_t v26 = *(void *)(v1 + 152);
  uint64_t v28 = *(void *)(v1 + 120);
  uint64_t v31 = *(void *)(v1 + 112);
  uint64_t v33 = *(void *)(v1 + 104);
  uint64_t v35 = *(void *)(v1 + 80);
  swift_task_dealloc(*(void *)(v1 + 264));
  swift_task_dealloc(v21);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void RenderPegasusFlow.execute()()
{
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  v0[34] = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v8 = static os_log_type_t.debug.getter(v3, v4, v5, v6, v7);
  if (os_log_type_enabled(v3, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_0, v3, v8, "RenderPegasusFlow.execute", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  uint64_t v11 = v0[32];
  uint64_t v10 = v0[33];
  uint64_t v12 = v0[7];

  outlined init with copy of PegasusExperience( v12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_experience,  v10);
  uint64_t v13 = (char *)&loc_6B6CC + 4 * byte_7EA00[swift_getEnumCaseMultiPayload(v10, v11)];
  __asm { BR              X10 }

uint64_t RenderPegasusFlow.execute()(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 344LL);
  *(_BYTE *)(*(void *)v1 + 416LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(RenderPegasusFlow.execute(), 0LL, 0LL);
}

uint64_t RenderPegasusFlow.execute()()
{
  if (*(_BYTE *)(v0 + 416) != 1)
  {
    uint64_t v22 = *(void *)(v0 + 56);
    uint64_t v23 = *(void *)(v22 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_renderComponentFlowFactory);
    uint64_t v24 = (uint64_t *)(v22 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_rrEntities);
    swift_beginAccess(v22 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_rrEntities, v0 + 16, 0LL, 0LL);
    uint64_t v25 = *v24;
    *(void *)(v0 + 35__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v25;
    uint64_t v26 = *(int **)(*(void *)v23 + 104LL);
    uint64_t v27 = v26[1];
    uint64_t v35 = (char *)v26 + *v26;
    swift_bridgeObjectRetain(v25);
    uint64_t v28 = (void *)swift_task_alloc(v27);
    *(void *)(v0 + 360) = v28;
    *uint64_t v28 = v0;
    v28[1] = RenderPegasusFlow.execute();
    __asm { BR              X8 }
  }

  uint64_t v1 = *(void *)(v0 + 328);
  uint64_t v31 = *(void **)(v0 + 336);
  uint64_t v3 = *(void *)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 320);
  uint64_t v5 = *(void *)(v0 + 296);
  uint64_t v4 = *(void *)(v0 + 304);
  uint64_t v6 = *(void *)(v0 + 288);
  uint64_t v7 = *(void *)(v0 + 240);
  uint64_t v33 = *(void *)(v0 + 248);
  uint64_t v8 = *(void *)(v0 + 216);
  uint64_t v29 = *(void *)(v0 + 208);
  swift_bridgeObjectRelease(*(void *)(v0 + 280));
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  uint64_t v9 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v10 = static PerformanceUtil.shared.getter(v9);
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v7, 0LL);
  uint64_t v11 = swift_release(v10);
  static ExecuteResponse.complete()(v11);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v29);
  outlined destroy of Any?( v33,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
  uint64_t v12 = *(void *)(v0 + 240);
  uint64_t v13 = *(void *)(v0 + 248);
  uint64_t v15 = *(void *)(v0 + 224);
  uint64_t v14 = *(void *)(v0 + 232);
  uint64_t v16 = *(void *)(v0 + 200);
  uint64_t v17 = *(void *)(v0 + 176);
  uint64_t v19 = *(void *)(v0 + 144);
  uint64_t v18 = *(void *)(v0 + 152);
  uint64_t v20 = *(void *)(v0 + 120);
  uint64_t v30 = *(void *)(v0 + 112);
  uint64_t v32 = *(void *)(v0 + 104);
  uint64_t v34 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 264));
  swift_task_dealloc(v13);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v3 = static PerformanceUtil.shared.getter(v2);
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v1, 0LL);
  uint64_t v4 = swift_release(v3);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  uint64_t v10 = static os_log_type_t.debug.getter(v5, v6, v7, v8, v9);
  if (os_log_type_enabled(v5, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_0, v5, v10, "RenderPegasusFlow pushing render component flow", v11, 2u);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  uint64_t v12 = *(void *)(v0 + 368);
  uint64_t v13 = *(void **)(v0 + 336);
  uint64_t v15 = *(void *)(v0 + 240);
  uint64_t v14 = *(void *)(v0 + 248);
  uint64_t v16 = *(void *)(v0 + 208);
  uint64_t v17 = *(void *)(v0 + 216);

  static ExecuteResponse.complete(next:)(v12);
  swift_release(v12);

  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  outlined destroy of Any?( v14,  &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
  uint64_t v18 = *(void *)(v0 + 240);
  uint64_t v19 = *(void *)(v0 + 248);
  uint64_t v21 = *(void *)(v0 + 224);
  uint64_t v20 = *(void *)(v0 + 232);
  uint64_t v22 = *(void *)(v0 + 200);
  uint64_t v23 = *(void *)(v0 + 176);
  uint64_t v25 = *(void *)(v0 + 144);
  uint64_t v24 = *(void *)(v0 + 152);
  uint64_t v26 = *(void *)(v0 + 120);
  uint64_t v28 = *(void *)(v0 + 112);
  uint64_t v29 = *(void *)(v0 + 104);
  uint64_t v30 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 264));
  swift_task_dealloc(v19);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RenderPegasusFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RenderPegasusFlow(0LL);
  uint64_t v5 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type RenderPegasusFlow and conformance RenderPegasusFlow,  type metadata accessor for RenderPegasusFlow,  (uint64_t)&protocol conformance descriptor for RenderPegasusFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v5);
}

uint64_t RenderPegasusFlow.publishNoAppFoundOnCarPlayIfAppRestricted(delayedActions:disambiguationList:)( uint64_t a1, uint64_t a2)
{
  v3[14] = a2;
  v3[15] = v2;
  v3[13] = a1;
  uint64_t v4 = type metadata accessor for PommesAppStatus(0LL);
  v3[16] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[17] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[18] = swift_task_alloc(v6);
  v3[19] = swift_task_alloc(v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DisambiguationListItem?);
  v3[20] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DisambiguationListComponent(0LL);
  v3[21] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[22] = v9;
  v3[23] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams(0LL);
  _BYTE v3[24] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[25] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[26] = swift_task_alloc(v12);
  v3[27] = swift_task_alloc(v12);
  v3[28] = swift_task_alloc(v12);
  v3[29] = swift_task_alloc(v12);
  v3[30] = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder(0LL);
  v3[31] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v3[32] = v14;
  unint64_t v15 = (*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[33] = swift_task_alloc(v15);
  v3[34] = swift_task_alloc(v15);
  v3[35] = swift_task_alloc(v15);
  uint64_t v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent(0LL);
  v3[36] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v3[37] = v17;
  v3[38] = swift_task_alloc((*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( RenderPegasusFlow.publishNoAppFoundOnCarPlayIfAppRestricted(delayedActions:disambiguationList:),  0LL,  0LL);
}

uint64_t RenderPegasusFlow.publishNoAppFoundOnCarPlayIfAppRestricted(delayedActions:disambiguationList:)()
{
  uint64_t v1 = type metadata accessor for SiriEnvironment(0LL);
  uint64_t v2 = static SiriEnvironment.default.getter(v1);
  uint64_t v3 = SiriEnvironment.currentDevice.getter();
  uint64_t v4 = swift_release(v2);
  LOBYTE(v__swift_destroy_boxed_opaque_existential_1(v0 + 2) = dispatch thunk of CurrentDevice.isCarPlay.getter(v4);
  swift_release(v3);
  if ((v2 & 1) == 0) {
    goto LABEL_66;
  }
  uint64_t v5 = v0[13];
  os_log_type_t v158 = v0 + 13;
  unint64_t v6 = *(void *)(v5 + 16);
  uint64_t v170 = v0;
  if (v6)
  {
    uint64_t v7 = v0[37];
    uint64_t v190 = (void (*)(uint64_t, uint64_t))v0[32];
    uint64_t v180 = v0[25];
    uint64_t v8 = v5 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v9 = *(void *)(v7 + 72);
    id v175 = *(void (**)(void, unint64_t, void))(v7 + 16);
    swift_bridgeObjectRetain(v5);
    unint64_t v10 = 0LL;
    unint64_t v171 = v6;
    uint64_t v168 = v7;
    uint64_t v163 = v9;
    uint64_t v165 = v8;
    while (1)
    {
      uint64_t v11 = v0[13];
      v175(v0[38], v8 + v10 * v9, v0[36]);
      uint64_t v12 = swift_bridgeObjectRetain(v11);
      uint64_t v13 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter(v12);
      uint64_t v14 = (void *)v13;
      uint64_t v15 = *(void *)(v13 + 16);
      if (v15) {
        break;
      }
      swift_bridgeObjectRelease(v13);
LABEL_12:
      uint64_t v0 = v170;
      uint64_t v30 = v170[13];
      (*(void (**)(void, void))(v7 + 8))(v170[38], v170[36]);
      swift_bridgeObjectRelease(v30);
      if (++v10 == v6)
      {
        swift_bridgeObjectRelease(*v158);
        goto LABEL_14;
      }
    }

    unint64_t v173 = v10;
    unint64_t v16 = 0LL;
    unint64_t v17 = v13 + ((*((unsigned __int8 *)v190 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v190 + 80));
    uint64_t v177 = *((void *)v190 + 9);
    uint64_t v185 = (void (*)(void, unint64_t, void))*((void *)v190 + 2);
    while (1)
    {
      uint64_t v18 = v170[30];
      uint64_t v19 = v170[24];
      v185(v170[35], v17, v170[31]);
      uint64_t v20 = swift_bridgeObjectRetain(v14);
      uint64_t v21 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter(v20);
      uint64_t v22 = Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.bundleID.getter(v21);
      unint64_t v24 = v23;
      uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v180 + 8);
      v25(v18, v19);
      uint64_t v26 = swift_bridgeObjectRelease(v24);
      uint64_t v27 = HIBYTE(v24) & 0xF;
      if ((v24 & 0x2000000000000000LL) == 0) {
        uint64_t v27 = v22 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v28 = v170[35];
      uint64_t v29 = v170[31];
      if (v27) {
        break;
      }
      (*((void (**)(void, void))v190 + 1))(v170[35], v170[31]);
      swift_bridgeObjectRelease(v14);
      ++v16;
      v17 += v177;
      if (v15 == v16)
      {
        swift_bridgeObjectRelease(v14);
        unint64_t v6 = v171;
        unint64_t v10 = v173;
        uint64_t v7 = v168;
        uint64_t v9 = v163;
        uint64_t v8 = v165;
        goto LABEL_12;
      }
    }

    uint64_t v88 = v170[28];
    uint64_t v87 = v170[29];
    uint64_t v179 = v170[24];
    uint64_t v89 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter(v26);
    Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.appDisplayName.getter(v89);
    uint64_t v182 = v90;
    uint64_t v91 = ((uint64_t (*)(uint64_t, uint64_t))v25)(v87, v179);
    uint64_t v92 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter(v91);
    Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.bundleID.getter(v92);
    uint64_t v94 = v93;
    v25(v88, v179);
    uint64_t v95 = (void (*)(uint64_t, uint64_t))*((void *)v190 + 1);
    v95(v28, v29);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v182);
    swift_bridgeObjectRelease(v94);
    if (v16 >= v14[2])
    {
      __break(1u);
    }

    else
    {
      uint64_t v190 = v95;
      uint64_t v183 = v14;
      uint64_t v96 = v170[27];
      uint64_t v97 = v170[24];
      uint64_t v98 = ((uint64_t (*)(void, unint64_t, void))v185)(v170[34], v17, v170[31]);
      uint64_t v99 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter(v98);
      uint64_t v100 = Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.bundleID.getter(v99);
      unint64_t v102 = v101;
      v25(v96, v97);
      uint64_t v103 = swift_bridgeObjectRelease(v102);
      uint64_t v104 = HIBYTE(v102) & 0xF;
      if ((v102 & 0x2000000000000000LL) == 0) {
        uint64_t v104 = v100 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v14 = v170;
      if (!v104) {
        goto LABEL_69;
      }
      uint64_t v105 = v170[38];
      uint64_t v187 = v170[36];
      uint64_t v106 = v170[34];
      uint64_t v107 = v170[31];
      uint64_t v109 = v170[28];
      uint64_t v108 = v170[29];
      uint64_t v110 = v170[24];
      uint64_t v14 = (void *)v170[13];
      uint64_t v111 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter(v103);
      Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.appDisplayName.getter(v111);
      uint64_t v113 = v112;
      uint64_t v114 = ((uint64_t (*)(uint64_t, uint64_t))v25)(v108, v110);
      uint64_t v115 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter(v114);
      Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.bundleID.getter(v115);
      uint64_t v117 = v116;
      v25(v109, v110);
      v190(v106, v107);
      swift_bridgeObjectRelease(v183);
      (*(void (**)(uint64_t, uint64_t))(v168 + 8))(v105, v187);
      swift_bridgeObjectRelease(v14);
      swift_bridgeObjectRelease(v113);
      swift_bridgeObjectRelease(v117);
      if (v173 < v171)
      {
        uint64_t result = closure #1 in RenderPegasusFlow.publishNoAppFoundOnCarPlayIfAppRestricted(delayedActions:disambiguationList:)(&v194);
        unint64_t v119 = v195;
        if (v195)
        {
          uint64_t v192 = v194;
          uint64_t v120 = v196;
          uint64_t v121 = v197;
          swift_bridgeObjectRelease(*v158);
          uint64_t v0 = v170;
          goto LABEL_53;
        }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v5;
  uint64_t v2 = *(void *)(*(void *)v1 + 360LL);
  uint64_t v3 = *(void **)v1;
  v3[46] = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch( RenderPegasusFlow.publishNoAppFoundOnCarPlayIfAppRestricted(delayedActions:disambiguationList:),  0LL,  0LL);
  }
  swift_bridgeObjectRelease(v3[39]);
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  v3[47] = v5;
  *uint64_t v5 = v3;
  v5[1] = RenderPegasusFlow.publishNoAppFoundOnCarPlayIfAppRestricted(delayedActions:disambiguationList:);
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v3 + 7, v3[42], v3[43]);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v2 = (void *)(*(void *)v1 + 56LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 376LL);
  *(void *)(*(void *)v1 + 384LL) = v0;
  swift_task_dealloc(v3);
  __swift_destroy_boxed_opaque_existential_1(v2);
  if (v0) {
    uint64_t v4 = RenderPegasusFlow.publishNoAppFoundOnCarPlayIfAppRestricted(delayedActions:disambiguationList:);
  }
  else {
    uint64_t v4 = RenderPegasusFlow.publishNoAppFoundOnCarPlayIfAppRestricted(delayedActions:disambiguationList:);
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  (*(void (**)(void, void))(v0 + 320))(*(void *)(v0 + 152), *(void *)(v0 + 128));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 264);
  uint64_t v5 = *(void *)(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 240);
  uint64_t v7 = *(void *)(v0 + 216);
  unint64_t v6 = *(void *)(v0 + 224);
  uint64_t v8 = *(void *)(v0 + 208);
  uint64_t v9 = *(void *)(v0 + 184);
  uint64_t v11 = *(void *)(v0 + 160);
  uint64_t v12 = *(void *)(v0 + 152);
  uint64_t v13 = *(void *)(v0 + 144);
  swift_task_dealloc(*(void *)(v0 + 304));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  os_log_type_t v4;
  BOOL v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  swift_bridgeObjectRelease(*(void *)(v0 + 312));
  uint64_t v1 = *(void *)(v0 + 368);
  uint64_t v2 = __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  uint64_t v4 = static os_log_type_t.error.getter();
  uint64_t v5 = os_log_type_enabled(v3, v4);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
  uint64_t v7 = *(void *)(v0 + 152);
  uint64_t v8 = *(void *)(v0 + 128);
  if (v5)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_0, v3, v4, "RenderPegasusFlow: app not found publish failed", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  swift_errorRelease(v1);

  v6(v7, v8);
  unint64_t v10 = *(void *)(v0 + 272);
  uint64_t v11 = *(void *)(v0 + 280);
  uint64_t v12 = *(void *)(v0 + 264);
  uint64_t v14 = *(void *)(v0 + 232);
  uint64_t v13 = *(void *)(v0 + 240);
  unint64_t v16 = *(void *)(v0 + 216);
  uint64_t v15 = *(void *)(v0 + 224);
  unint64_t v17 = *(void *)(v0 + 208);
  uint64_t v18 = *(void *)(v0 + 184);
  uint64_t v20 = *(void *)(v0 + 160);
  uint64_t v21 = *(void *)(v0 + 152);
  uint64_t v22 = *(void *)(v0 + 144);
  swift_task_dealloc(*(void *)(v0 + 304));
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  os_log_type_t v4;
  BOOL v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v1 = *(void *)(v0 + 384);
  uint64_t v2 = __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  uint64_t v4 = static os_log_type_t.error.getter();
  uint64_t v5 = os_log_type_enabled(v3, v4);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
  uint64_t v7 = *(void *)(v0 + 152);
  uint64_t v8 = *(void *)(v0 + 128);
  if (v5)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_0, v3, v4, "RenderPegasusFlow: app not found publish failed", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  swift_errorRelease(v1);

  v6(v7, v8);
  unint64_t v10 = *(void *)(v0 + 272);
  uint64_t v11 = *(void *)(v0 + 280);
  uint64_t v12 = *(void *)(v0 + 264);
  uint64_t v14 = *(void *)(v0 + 232);
  uint64_t v13 = *(void *)(v0 + 240);
  unint64_t v16 = *(void *)(v0 + 216);
  uint64_t v15 = *(void *)(v0 + 224);
  unint64_t v17 = *(void *)(v0 + 208);
  uint64_t v18 = *(void *)(v0 + 184);
  uint64_t v20 = *(void *)(v0 + 160);
  uint64_t v21 = *(void *)(v0 + 152);
  uint64_t v22 = *(void *)(v0 + 144);
  swift_task_dealloc(*(void *)(v0 + 304));
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1LL);
}

LABEL_70:
        __break(1u);
        return result;
      }
    }

    __break(1u);
LABEL_69:
    uint64_t result = ((uint64_t (*)(void, void))v190)(v14[34], v14[31]);
    __break(1u);
    goto LABEL_70;
  }

uint64_t closure #1 in RenderPegasusFlow.publishNoAppFoundOnCarPlayIfAppRestricted(delayedActions:disambiguationList:)@<X0>( uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams(0LL);
  uint64_t v75 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v70 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v67 - v6;
  uint64_t v8 = __chkstk_darwin(v5);
  unint64_t v10 = (char *)&v67 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v67 - v11;
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v67 - v19;
  uint64_t v21 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter(v18);
  uint64_t v22 = v21;
  uint64_t v74 = *(void (**)(char *, uint64_t))(v21 + 16);
  if (v74)
  {
    uint64_t v67 = v17;
    uint64_t v68 = v10;
    uint64_t v69 = v7;
    uint64_t v76 = v2;
    unint64_t v23 = 0LL;
    unint64_t v24 = v21 + ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    uint64_t v25 = *(void *)(v14 + 72);
    uint64_t v71 = a1;
    uint64_t v72 = v25;
    uint64_t v73 = *(void (**)(char *, unint64_t, uint64_t))(v14 + 16);
    while (1)
    {
      v73(v20, v24, v13);
      uint64_t v26 = swift_bridgeObjectRetain(v22);
      uint64_t v27 = v22;
      uint64_t v28 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter(v26);
      uint64_t v29 = Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.bundleID.getter(v28);
      unint64_t v31 = v30;
      uint64_t v32 = *(void (**)(char *, uint64_t))(v75 + 8);
      v32(v12, v76);
      uint64_t v33 = swift_bridgeObjectRelease(v31);
      uint64_t v34 = HIBYTE(v31) & 0xF;
      if ((v31 & 0x2000000000000000LL) == 0) {
        uint64_t v34 = v29 & 0xFFFFFFFFFFFFLL;
      }
      if (v34) {
        break;
      }
      (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
      swift_bridgeObjectRelease(v27);
      ++v23;
      v24 += v72;
      uint64_t v22 = v27;
    }

    uint64_t v40 = v68;
    uint64_t v41 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter(v33);
    Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.appDisplayName.getter(v41);
    uint64_t v75 = v42;
    uint64_t v43 = v76;
    uint64_t v44 = ((uint64_t (*)(char *, uint64_t))v32)(v40, v76);
    uint64_t v45 = v69;
    uint64_t v46 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter(v44);
    Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.bundleID.getter(v46);
    uint64_t v48 = v47;
    v32(v45, v43);
    unint64_t v49 = *(void (**)(char *, uint64_t))(v14 + 8);
    v49(v20, v13);
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(v75);
    swift_bridgeObjectRelease(v27);
    uint64_t v22 = v27;
    if ((char *)v74 == v23)
    {
LABEL_10:
      uint64_t result = swift_bridgeObjectRelease(v22);
      uint64_t v36 = 0LL;
      uint64_t v37 = 0LL;
      uint64_t v38 = 0LL;
      uint64_t v39 = 0LL;
LABEL_16:
      a1 = v71;
      goto LABEL_17;
    }

    uint64_t v75 = v27;
    if ((unint64_t)v23 >= *(void *)(v27 + 16))
    {
      __break(1u);
    }

    else
    {
      uint64_t v74 = v49;
      unint64_t v23 = v67;
      uint64_t v50 = ((uint64_t (*)(char *, unint64_t, uint64_t))v73)(v67, v24, v13);
      uint64_t v51 = v70;
      uint64_t v52 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter(v50);
      uint64_t v53 = Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.bundleID.getter(v52);
      unint64_t v55 = v54;
      uint64_t v56 = v76;
      v32(v51, v76);
      uint64_t v57 = swift_bridgeObjectRelease(v55);
      uint64_t v58 = HIBYTE(v55) & 0xF;
      if ((v55 & 0x2000000000000000LL) == 0) {
        uint64_t v58 = v53 & 0xFFFFFFFFFFFFLL;
      }
      if (v58)
      {
        uint64_t v59 = v68;
        uint64_t v60 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter(v57);
        uint64_t v36 = Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.appDisplayName.getter(v60);
        uint64_t v37 = v61;
        uint64_t v62 = ((uint64_t (*)(char *, uint64_t))v32)(v59, v56);
        uint64_t v63 = v69;
        uint64_t v64 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter(v62);
        uint64_t v38 = Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.bundleID.getter(v64);
        uint64_t v65 = v23;
        uint64_t v39 = v66;
        v32(v63, v56);
        v74(v65, v13);
        uint64_t result = swift_bridgeObjectRelease(v75);
        goto LABEL_16;
      }
    }

    uint64_t result = ((uint64_t (*)(char *, uint64_t))v74)(v23, v13);
    __break(1u);
  }

  else
  {
    uint64_t result = swift_bridgeObjectRelease(v21);
    uint64_t v36 = 0LL;
    uint64_t v37 = 0LL;
    uint64_t v38 = 0LL;
    uint64_t v39 = 0LL;
LABEL_17:
    *a1 = v36;
    a1[1] = v37;
    a1[2] = v38;
    a1[3] = v39;
  }

  return result;
}

uint64_t RenderPegasusFlow.deinit()
{
  __swift_destroy_boxed_opaque_existential_1((void *)(v0
                                                      + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_outputPublisher));
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_informationViewFactory));
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_renderComponentFlowFactory));
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_flowTaskLogger));
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_pegasusPatternFlowFactory));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0
                                                      + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_aceServiceInvoker));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0
                                                      + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_appChecking));
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_rrEntities));
  return v0;
}

uint64_t RenderPegasusFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t protocol witness for FlowTrampolining.outputPublisher.getter in conformance RenderPegasusFlow@<X0>( uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync( *v1 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_outputPublisher,  a1);
}

uint64_t protocol witness for FlowTrampolining.informationViewFactory.getter in conformance RenderPegasusFlow()
{
  return swift_retain(*(void *)(*v0 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_informationViewFactory));
}

uint64_t specialized RenderPegasusFlow.__allocating_init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v51 = a7;
  uint64_t v47 = a6;
  uint64_t v48 = a5;
  uint64_t v49 = a3;
  uint64_t v50 = a2;
  uint64_t v45 = a9;
  uint64_t v44 = a10;
  uint64_t v43 = a11;
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for PegasusExperience(0LL);
  __chkstk_darwin(v20);
  uint64_t v22 = (uint64_t *)((char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  v58[3] = a12;
  v58[4] = a13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v58);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a12 - 8) + 32LL))( boxed_opaque_existential_1,  a8,  a12);
  uint64_t v24 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v25 = static PerformanceUtil.shared.getter(v24);
  uint64_t v46 = a4;
  uint64_t v53 = a4;
  unint64_t v54 = a1;
  Date.init()(v25);
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( v22,  0xD00000000000003ALL,  0x800000000007F790LL,  0LL,  v19,  "InformationFlowPlugin/RenderPegasusFlow.swift",  45LL,  2LL,  80LL,  "init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatt ernFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)",  183LL,  2,  _s21InformationFlowPlugin013RenderPegasusB0C14pommesResponse15outputPublisher22informationViewFactory18experienceSelector015renderComponentbL0014pegasusPatternbL017aceServiceInvoker11appChecking20responseProducerTypeAC04SiriA6Search06PommesG0C_07SiriKitB006OutputI5Async_pAA0akL0CAA010ExperienceN0CAA0dpbL0CAA0erbL0CAP03AcetU5Async_pAM09PommesAppW0_pAA025AppResolutionUnsuccessfulG9Producing_pXptcfcAA0E10ExperienceOyXEfU_TA_0,  v52,  v20);
  swift_release(v25);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  outlined init with copy of OutputPublisherAsync((uint64_t)v50, (uint64_t)v57);
  id v26 = a1;
  uint64_t v27 = v49;
  swift_retain(v49);
  uint64_t v28 = v48;
  swift_retain(v48);
  static SiriKitEventSender.current.getter(v56);
  uint64_t v29 = type metadata accessor for PegasusFlowEventLogger();
  uint64_t v30 = swift_allocObject(v29, 84LL, 7LL);
  *(void *)(v30 + 16) = a1;
  outlined init with copy of OutputPublisherAsync((uint64_t)v56, v30 + 24);
  id v31 = v26;
  uint64_t v32 = PommesResponse.metadataDomainName.getter();
  uint64_t v34 = v33;

  __swift_destroy_boxed_opaque_existential_1(v56);
  *(void *)(v30 + 64) = v32;
  *(void *)(v30 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v34;
  *(_DWORD *)(v30 + 80) = 1;
  outlined init with copy of OutputPublisherAsync((uint64_t)v51, (uint64_t)v56);
  uint64_t v35 = outlined init with copy of OutputPublisherAsync((uint64_t)v58, (uint64_t)v55);
  uint64_t v36 = default argument 5 of RenderPegasusFlow.init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)(v35);
  uint64_t v37 = (*(uint64_t (**)(void *, void *, void *, uint64_t, uint64_t, uint64_t, void *, uint64_t, _BYTE *, uint64_t, uint64_t))(v43 + 224))( v22,  a1,  v57,  v27,  v28,  v30,  v56,  v36,  v55,  v45,  v44);
  uint64_t v38 = swift_retain(v37);
  uint64_t v39 = dispatch thunk of PommesResponse.experiences.getter(v38);
  uint64_t v40 = specialized Sequence.flatMap<A>(_:)(v39);
  swift_bridgeObjectRelease(v39);
  RenderPegasusFlow.addReferenceResolutionEntities(from:)(v40);

  swift_release(v27);
  swift_release(v46);
  swift_release(v28);
  swift_release(v47);
  swift_bridgeObjectRelease(v40);
  swift_release(v37);
  __swift_destroy_boxed_opaque_existential_1(v58);
  __swift_destroy_boxed_opaque_existential_1(v51);
  __swift_destroy_boxed_opaque_existential_1(v50);
  return v37;
}

uint64_t specialized RenderPegasusFlow.init(experience:pommesResponse:outputPublisher:informationViewFactory:renderComponentFlowFactory:flowTaskLogger:aceServiceInvoker:pegasusPatternFlowFactory:appChecking:responseProducerType:)( uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v69 = a8;
  uint64_t v70 = a7;
  uint64_t v60 = a4;
  uint64_t v61 = a5;
  uint64_t v66 = a1;
  uint64_t v72 = a11;
  uint64_t v73 = a3;
  uint64_t v71 = a10;
  uint64_t v64 = a9;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for ActivityType(0LL);
  uint64_t v62 = *(void *)(v20 - 8);
  uint64_t v63 = v20;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = type metadata accessor for PerformanceUtil.Ticket(0LL);
  uint64_t v67 = *(void *)(v26 - 8);
  uint64_t v68 = v26;
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v65 = (char *)&v58 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27);
  uint64_t v59 = (char *)&v58 - v29;
  uint64_t v75 = a13;
  uint64_t v76 = a14;
  uint64_t v30 = __swift_allocate_boxed_opaque_existential_1(&v74);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a13 - 8) + 32LL))(v30, v64, a13);
  *(void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_rrEntities) = _swiftEmptyArrayStorage;
  outlined init with copy of PegasusExperience( a1,  a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_experience);
  *(void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_pommesResponse) = a2;
  outlined init with copy of OutputPublisherAsync( (uint64_t)v73,  a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_outputPublisher);
  uint64_t v32 = v60;
  uint64_t v31 = v61;
  *(void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_informationViewFactory) = v60;
  *(void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_renderComponentFlowFactory) = v31;
  uint64_t v64 = OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_flowTaskLogger;
  *(void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_flowTaskLogger) = a6;
  id v33 = a2;
  swift_retain(v32);
  swift_retain(v31);
  uint64_t v34 = swift_retain(a6);
  Date.init()(v34);
  char v56 = 2;
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0xD00000000000004ALL,  0x800000000007F8C0LL,  v25,  "InformationFlowPlugin/RenderPegasusFlow.swift",  45LL,  2LL,  121LL,  "init(experience:pommesResponse:outputPublisher:informationViewFactory:renderComponentFlowFactory:flowTaskLogger:aceS erviceInvoker:pegasusPatternFlowFactory:appChecking:responseProducerType:)",  190LL,  v56);
  uint64_t v35 = v62;
  uint64_t v36 = v63;
  (*(void (**)(char *, void, uint64_t))(v62 + 104))(v22, enum case for ActivityType.start(_:), v63);
  uint64_t v37 = enum case for SiriKitReliabilityCodes.normal(_:);
  uint64_t v38 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  uint64_t v39 = *(void *)(v38 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 104))(v19, v37, v38);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v19, 0LL, 1LL, v38);
  (*(void (**)(char *, uint64_t, unint64_t, char *, unint64_t, unint64_t, uint64_t, unint64_t))(*(void *)a6 + 120LL))( v22,  0x6C7070615F746F6ELL,  0xEE00656C62616369LL,  v19,  0xD000000000000018LL,  0x800000000007F9D0LL,  0x54746E6572727543LL,  0xEB000000006B7361LL);
  outlined destroy of Any?((uint64_t)v19, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v22, v36);
  uint64_t v40 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v41 = static PerformanceUtil.shared.getter(v40);
  uint64_t v42 = v59;
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v59, 0LL);
  uint64_t v43 = swift_release(v41);
  Date.init()(v43);
  LOBYTE(v5__swift_destroy_boxed_opaque_existential_1(v0 + 7) = 2;
  uint64_t v44 = v65;
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0xD000000000000034LL,  0x800000000007F9F0LL,  v25,  "InformationFlowPlugin/RenderPegasusFlow.swift",  45LL,  2LL,  125LL,  "init(experience:pommesResponse:outputPublisher:informationViewFactory:renderComponentFlowFactory:flowTaskLogger:aceS erviceInvoker:pegasusPatternFlowFactory:appChecking:responseProducerType:)",  190LL,  v57);
  uint64_t v45 = *(void *)(a12 + v64);
  uint64_t v46 = *(void (**)(uint64_t))(*(void *)v45 + 152LL);
  uint64_t v47 = swift_retain(v45);
  v46(v47);
  uint64_t v48 = swift_release(v45);
  uint64_t v49 = static PerformanceUtil.shared.getter(v48);
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v44, 0LL);
  swift_release(v49);
  __swift_destroy_boxed_opaque_existential_1(v73);
  outlined destroy of PegasusExperience(v66);
  uint64_t v50 = v68;
  uint64_t v51 = *(void (**)(char *, uint64_t))(v67 + 8);
  v51(v44, v68);
  v51(v42, v50);
  uint64_t v52 = v70;
  *(void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_pegasusPatternFlowFactory) = v69;
  outlined init with take of PatternFlowProviding( v52,  a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_aceServiceInvoker);
  outlined init with take of PatternFlowProviding( &v74,  a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_appChecking);
  uint64_t v53 = (void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_responseProducerType);
  uint64_t v54 = v72;
  *uint64_t v53 = v71;
  v53[1] = v54;
  return a12;
}

uint64_t specialized RenderPegasusFlow.__allocating_init(pegasusResult:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v30 = (void *)a6;
  uint64_t v33 = a5;
  uint64_t v32 = a3;
  uint64_t v31 = a1;
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for PegasusExperience(0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (void **)((char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v19 = static PerformanceUtil.shared.getter(v18);
  uint64_t v35 = a4;
  uint64_t v36 = a1;
  Date.init()(v19);
  char v29 = 2;
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( v17,  0xD00000000000003ALL,  0x80000000000829B0LL,  0LL,  v14,  "InformationFlowPlugin/RenderPegasusFlow.swift",  45LL,  2LL,  55LL,  "init(pegasusResult:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatte rnFlowFactory:aceServiceInvoker:)",  149LL,  v29,  partial apply for closure #1 in RenderPegasusFlow.init(pegasusResult:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:),  v34,  v15);
  swift_release(v19);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  outlined init with copy of OutputPublisherAsync((uint64_t)a2, (uint64_t)v39);
  static SiriKitEventSender.current.getter(v38);
  uint64_t v20 = type metadata accessor for PegasusFlowEventLogger();
  uint64_t v21 = swift_allocObject(v20, 84LL, 7LL);
  *(void *)(v21 + 16) = 0LL;
  outlined init with take of PatternFlowProviding(v38, v21 + 24);
  *(void *)(v21 + 64) = 0x54746E6572727543LL;
  *(void *)(v21 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0xEB000000006B7361LL;
  *(_DWORD *)(v21 + 80) = 2;
  uint64_t v22 = v30;
  uint64_t v23 = outlined init with copy of OutputPublisherAsync((uint64_t)v30, (uint64_t)v38);
  uint64_t v24 = default argument 5 of RenderPegasusFlow.init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)(v23);
  uint64_t v37[3] = type metadata accessor for PommesSystemAppChecking(0LL);
  v37[4] = &protocol witness table for PommesSystemAppChecking;
  __swift_allocate_boxed_opaque_existential_1(v37);
  PommesSystemAppChecking.init()();
  uint64_t v25 = type metadata accessor for AppResolutionStrategyHelpers(0LL);
  uint64_t v26 = (*(uint64_t (**)(void *, void, _BYTE *, uint64_t, uint64_t, uint64_t, __int128 *, uint64_t, void *, uint64_t, _UNKNOWN **))(v7 + 224))( v17,  0LL,  v39,  v32,  v33,  v21,  v38,  v24,  v37,  v25,  &protocol witness table for AppResolutionStrategyHelpers);
  __swift_destroy_boxed_opaque_existential_1(v22);
  __swift_destroy_boxed_opaque_existential_1(a2);
  uint64_t v27 = type metadata accessor for Parse.PegasusResult(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8LL))(v31, v27);
  return v26;
}

uint64_t outlined init with copy of PegasusExperience(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PegasusExperience(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for RenderPegasusFlow(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for RenderPegasusFlow;
  if (!type metadata singleton initialization cache for RenderPegasusFlow) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RenderPegasusFlow);
  }
  return result;
}

uint64_t outlined destroy of PegasusExperience(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PegasusExperience(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_6EC4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 176LL))();
}

uint64_t sub_6EC74(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 184LL))();
}

uint64_t ObjC metadata update function for RenderPegasusFlow()
{
  return type metadata accessor for RenderPegasusFlow(0LL);
}

uint64_t type metadata completion function for RenderPegasusFlow(uint64_t a1)
{
  v4[0] = (char *)&value witness table for () + 64;
  uint64_t result = type metadata accessor for PegasusExperience(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = "\b";
    void v4[3] = &unk_7EB10;
    void v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    void v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    void v4[8] = &unk_7EB10;
    void v4[9] = &unk_7EB10;
    v4[10] = &unk_7EB28;
    v4[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 12LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t _s21InformationFlowPlugin013RenderPegasusB0C14pommesResponse15outputPublisher22informationViewFactory18experienceSelector015renderComponentbL0014pegasusPatternbL017aceServiceInvoker11appChecking20responseProducerTypeAC04SiriA6Search06PommesG0C_07SiriKitB006OutputI5Async_pAA0akL0CAA010ExperienceN0CAA0dpbL0CAA0erbL0CAP03AcetU5Async_pAM09PommesAppW0_pAA025AppResolutionUnsuccessfulG9Producing_pXptcfcAA0E10ExperienceOyXEfU_TA_0()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + 16) + 88LL))(*(void *)(v0 + 24));
}

uint64_t partial apply for closure #1 in RenderPegasusFlow.init(pegasusResult:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:)()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + 16) + 80LL))(*(void *)(v0 + 24));
}

ValueMetadata *type metadata accessor for ParsecAlias()
{
  return &type metadata for ParsecAlias;
}

uint64_t ErrorFlowFactory.makeErrorFlow(message:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v34 = a2;
  uint64_t v33 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ActivityType(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = type metadata accessor for PerformanceUtil.Ticket(0LL);
  uint64_t v35 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = __swift_project_value_buffer(v16, (uint64_t)static Logger.information);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl(&dword_0, v18, v19, "InformationFlowPlugin: making error flow", v20, 2u);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  static SiriKitEventSender.current.getter(v39);
  uint64_t v21 = type metadata accessor for PegasusFlowEventLogger();
  uint64_t inited = swift_initStackObject(v21, v38);
  *(void *)(inited + 16) = 0LL;
  uint64_t v23 = outlined init with take of PatternFlowProviding(v39, inited + 24);
  *(void *)(inited + 64) = 0x54746E6572727543LL;
  *(void *)(inited + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0xEB000000006B7361LL;
  *(_DWORD *)(inited + 80) = 0;
  Date.init()(v23);
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0xD000000000000054LL,  0x8000000000082A90LL,  v13,  "InformationFlowPlugin/ErrorFlow.swift",  37LL,  2LL,  28LL,  "makeErrorFlow(message:)",  23LL,  2);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for ActivityType.failed(_:), v7);
  uint64_t v24 = enum case for SiriKitReliabilityCodes.genericError(_:);
  uint64_t v25 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 104))(v6, v24, v25);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v6, 0LL, 1LL, v25);
  PegasusFlowEventLogger.logGenericFlowStepEvent(stateType:parameterName:statusReason:statusReasonDescription:taskType:)( (uint64_t)v10,  0x6C7070615F746F6ELL,  0xEE00656C62616369LL,  (uint64_t)v6,  v33,  v34,  0x54746E6572727543LL,  0xEB000000006B7361LL);
  outlined destroy of SiriKitReliabilityCodes?((uint64_t)v6);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v27 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v28 = static PerformanceUtil.shared.getter(v27);
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v15, 0LL);
  swift_release(v28);
  outlined init with copy of OutputPublisherAsync(v3 + 16, (uint64_t)v37);
  uint64_t v29 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  swift_retain(v3);
  uint64_t v30 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v37,  &async function pointer to partial apply for closure #1 in ErrorFlowFactory.makeErrorFlow(message:),  v3);
  v37[0] = v30;
  uint64_t v31 = Flow.eraseToAnyFlow()(v29, &protocol witness table for SimpleOutputFlowAsync);
  swift_release(inited);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v15, v36);
  swift_release(v30);
  return v31;
}

uint64_t closure #1 in ErrorFlowFactory.makeErrorFlow(message:)(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for AceOutput(0LL);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  void v2[5] = v4;
  v2[6] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Date(0LL);
  v2[7] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for PerformanceUtil.Ticket(0LL);
  _BYTE v2[8] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  void v2[9] = v7;
  v2[10] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(closure #1 in ErrorFlowFactory.makeErrorFlow(message:), 0LL, 0LL);
}

uint64_t closure #1 in ErrorFlowFactory.makeErrorFlow(message:)(uint64_t a1)
{
  uint64_t v2 = v1[7];
  uint64_t v3 = v1[3];
  Date.init()(a1);
  char v7 = 2;
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0xD00000000000002DLL,  0x8000000000082B70LL,  v2,  "InformationFlowPlugin/ErrorFlow.swift",  37LL,  2LL,  33LL,  "makeErrorFlow(message:)",  23LL,  v7);
  uint64_t v4 = *(int **)(**(void **)(v3 + 56) + 136LL);
  uint64_t v8 = (uint64_t (*)(void))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  v1[11] = v5;
  *uint64_t v5 = v1;
  v5[1] = closure #1 in ErrorFlowFactory.makeErrorFlow(message:);
  return v8(v1[6]);
}

uint64_t closure #1 in ErrorFlowFactory.makeErrorFlow(message:)()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 88LL);
  *(void *)(*(void *)v1 + 96LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = closure #1 in ErrorFlowFactory.makeErrorFlow(message:);
  }
  else {
    uint64_t v3 = closure #1 in ErrorFlowFactory.makeErrorFlow(message:);
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *boxed_opaque_existential_1;
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 48);
  char v7 = *(void *)(v0 + 32);
  uint64_t v8 = *(void **)(v0 + 16);
  uint64_t v9 = type metadata accessor for PerformanceUtil(0LL);
  unint64_t v10 = static PerformanceUtil.shared.getter(v9);
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v1, 0LL);
  swift_release(v10);
  v8[3] = v7;
  v8[4] = &protocol witness table for AceOutput;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v8);
  (*(void (**)(void *, uint64_t, uint64_t))(v6 + 32))(boxed_opaque_existential_1, v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 48);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 72) + 8LL))(v1, *(void *)(v0 + 64));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t partial apply for closure #1 in ErrorFlowFactory.makeErrorFlow(message:)(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc(dword_A3984);
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return closure #1 in ErrorFlowFactory.makeErrorFlow(message:)(a1, v1);
}

uint64_t type metadata accessor for ErrorFlowFactory()
{
  return objc_opt_self(&OBJC_CLASS____TtC21InformationFlowPlugin16ErrorFlowFactory);
}

uint64_t FlowTrampolining.makeResponse(for:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v13 = static PerformanceUtil.shared.getter(v12);
  uint64_t v24 = a1;
  Date.init()(v13);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyFlow?);
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( &v25,  0xD000000000000024LL,  0x800000000007F700LL,  0LL,  v11,  "InformationFlowPlugin/FlowTrampolining.swift",  44LL,  2LL,  33LL,  "makeResponse(for:)",  18LL,  2,  _s21InformationFlowPlugin0B12TrampoliningPAAE12makeResponse3for07SiriKitB007ExecuteF0VAF5ParseO16DirectInvocationV_tFAF03AnyB0CSgyXEfU_TA_0,  v23,  v14);
  swift_release(v13);
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v15 = v25;
  if (v25)
  {
    uint64_t v16 = swift_retain(v25);
    static ExecuteResponse.complete(next:)(v16);
    return swift_release_n(v15, 2LL);
  }

  else
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    uint64_t v19 = __swift_project_value_buffer(v18, (uint64_t)static Logger.information);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl( &dword_0,  v20,  v21,  "Unable to locate flow for direct invocation parse/experience. Returning error flow.",  v22,  2u);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    return FlowTrampolining.makeResponse(forErrorMessage:)(0xD000000000000038LL, 0x800000000007F750LL, a2, a3, a4);
  }

uint64_t FlowTrampolining.makeResponse(forErrorMessage:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = &v21[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v16 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v17 = static PerformanceUtil.shared.getter(v16);
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t v24 = v6;
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  Date.init()(v17);
  uint64_t v18 = type metadata accessor for ExecuteResponse(0LL);
  char v20 = 2;
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)( a5,  0x72724520656B614DLL,  0xEE00776F6C46726FLL,  0LL,  v15,  "InformationFlowPlugin/FlowTrampolining.swift",  44LL,  2LL,  22LL,  "makeResponse(forErrorMessage:)",  30LL,  v20,  partial apply for closure #1 in FlowTrampolining.makeResponse(forErrorMessage:),  v21,  v18);
  swift_release(v17);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t closure #1 in FlowTrampolining.makeResponse(forErrorMessage:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a5 + 8))(v14, a4, a5);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
  uint64_t v10 = type metadata accessor for ErrorFlowFactory();
  uint64_t v11 = swift_allocObject(v10, 64LL, 7LL);
  outlined init with take of PatternFlowProviding(v14, v11 + 16);
  *(void *)(v11 + 56) = v9;
  uint64_t v12 = ErrorFlowFactory.makeErrorFlow(message:)(a2, a3);
  static ExecuteResponse.complete(next:)(v12);
  swift_release(v11);
  return swift_release(v12);
}

uint64_t closure #1 in FlowTrampolining.makeResponse(for:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static FlowLocator.findFlow(forInvocation:)();
  *a1 = result;
  return result;
}

uint64_t _s21InformationFlowPlugin0B12TrampoliningPAAE12makeResponse3for07SiriKitB007ExecuteF0VAF5ParseO16DirectInvocationV_tFAF03AnyB0CSgyXEfU_TA_0@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = static FlowLocator.findFlow(forInvocation:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in FlowTrampolining.makeResponse(forErrorMessage:)()
{
  return closure #1 in FlowTrampolining.makeResponse(forErrorMessage:)(v0[4], v0[5], v0[6], v0[2], v0[3]);
}

uint64_t Logger.information.unsafeMutableAddressor()
{
  return Logger.information.unsafeMutableAddressor( &one-time initialization token for information,  (uint64_t (*)(void))&type metadata accessor for Logger,  (uint64_t)static Logger.information,  (uint64_t)one-time initialization function for information);
}

char **LogConst.Signpost.renderPegasusResult.unsafeMutableAddressor()
{
  return &static LogConst.Signpost.renderPegasusResult;
}

uint64_t static Logger.begin(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (one-time initialization token for informationLog != -1) {
    swift_once(&one-time initialization token for informationLog, one-time initialization function for informationLog);
  }
  id v8 = (id)static Logger.informationLog;
  uint64_t v9 = OSSignpostID.init(log:)();
  uint64_t v10 = static os_signpost_type_t.begin.getter(v9);
  return os_signpost(_:dso:log:name:signpostID:)(v10, &dword_0, v8, a1, a2, a3, a4);
}

uint64_t static Logger.end(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = static os_signpost_type_t.end.getter(a1);
  if (one-time initialization token for informationLog != -1) {
    swift_once(&one-time initialization token for informationLog, one-time initialization function for informationLog);
  }
  return os_signpost(_:dso:log:name:signpostID:)(v8, &dword_0, static Logger.informationLog, a2, a3, a4, a1);
}

uint64_t Logger.videoSnippet.unsafeMutableAddressor()
{
  return Logger.information.unsafeMutableAddressor( &one-time initialization token for videoSnippet,  (uint64_t (*)(void))&type metadata accessor for Logger,  (uint64_t)static Logger.videoSnippet,  (uint64_t)one-time initialization function for videoSnippet);
}

uint64_t Logger.information.unsafeMutableAddressor( void *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  if (*a1 != -1LL) {
    swift_once(a1, a4);
  }
  uint64_t v6 = a2(0LL);
  return __swift_project_value_buffer(v6, a3);
}

uint64_t Logger.logAndCrash(_:file:line:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v40 = a6;
  unsigned int v41 = a5;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Logger?);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = &v34[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v13);
  uint64_t v17 = &v34[-v16];
  uint64_t v18 = type metadata accessor for Logger(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v19 + 16))(v17, v7, v18);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v19 + 56))(v17, 0LL, 1LL, v18);
  outlined init with copy of Logger?((uint64_t)v17, (uint64_t)v15);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v19 + 48))(v15, 1LL, v18) == 1)
  {
    outlined destroy of Logger?((uint64_t)v15);
    uint64_t v20 = v40;
  }

  else
  {
    uint64_t v21 = swift_bridgeObjectRetain_n(a2, 2LL);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.error.getter();
    int v24 = v23;
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v25 = swift_slowAlloc(32LL, -1LL);
      uint64_t v38 = a3;
      uint64_t v26 = v25;
      uint64_t v37 = swift_slowAlloc(64LL, -1LL);
      uint64_t v43 = v37;
      *(_DWORD *)uint64_t v26 = 136315650;
      uint64_t v39 = a4;
      uint64_t v27 = StaticString.description.getter(v38, a4, v41);
      os_log_t v36 = v22;
      unint64_t v29 = v28;
      uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v43);
      int v35 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43);
      swift_bridgeObjectRelease(v29);
      *(_WORD *)(v26 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2048;
      uint64_t v20 = v40;
      uint64_t v42 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43);
      *(_WORD *)(v26 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
      swift_bridgeObjectRetain(a2);
      uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v43);
      a4 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43);
      swift_bridgeObjectRelease_n(a2, 3LL);
      os_log_t v30 = v36;
      _os_log_impl(&dword_0, v36, (os_log_type_t)v35, "FatalError at %s:%lu - %s", (uint8_t *)v26, 0x20u);
      uint64_t v31 = v37;
      swift_arrayDestroy(v37, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1LL, -1LL);
      uint64_t v32 = v26;
      a3 = v38;
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a2, 2LL);

      uint64_t v20 = v40;
    }

    (*(void (**)(_BYTE *, uint64_t))(v19 + 8))(v15, v18);
  }

  static SiriKitLifecycle._logCrashToEventBus(_:)(a1, a2);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, a1, a2, a3, a4, v41, v20, 0);
  __break(1u);
  return result;
}

uint64_t one-time initialization function for informationLog()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001ALL,  0x800000000007FA50LL,  0xD000000000000015LL,  0x800000000007EBE0LL);
  static Logger.informationLog = result;
  return result;
}

void *LogConst.subsystem.unsafeMutableAddressor()
{
  return &static LogConst.subsystem;
}

void *LogConst.Category.informationPlugin.unsafeMutableAddressor()
{
  return &static LogConst.Category.informationPlugin;
}

uint64_t one-time initialization function for information()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  __swift_allocate_value_buffer(v0, static Logger.information);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.information);
  if (one-time initialization token for informationLog != -1) {
    swift_once(&one-time initialization token for informationLog, one-time initialization function for informationLog);
  }
  return Logger.init(_:)((id)static Logger.informationLog);
}

uint64_t static Logger.information.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.information.getter( &one-time initialization token for information,  (uint64_t (*)(void))&type metadata accessor for Logger,  (uint64_t)static Logger.information,  (uint64_t)one-time initialization function for information,  a1);
}

uint64_t one-time initialization function for videoSnippet()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  __swift_allocate_value_buffer(v0, static Logger.videoSnippet);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.videoSnippet);
  type metadata accessor for OS_os_log();
  uint64_t v1 = OS_os_log.init(subsystem:category:)( 0xD00000000000001ALL,  0x800000000007FA50LL,  0xD000000000000011LL,  0x8000000000082BA0LL);
  return Logger.init(_:)(v1);
}

void *LogConst.Category.videoSnippet.unsafeMutableAddressor()
{
  return &static LogConst.Category.videoSnippet;
}

uint64_t static Logger.videoSnippet.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.information.getter( &one-time initialization token for videoSnippet,  (uint64_t (*)(void))&type metadata accessor for Logger,  (uint64_t)static Logger.videoSnippet,  (uint64_t)one-time initialization function for videoSnippet,  a1);
}

uint64_t static Logger.information.getter@<X0>( void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (*a1 != -1LL) {
    swift_once(a1, a4);
  }
  uint64_t v8 = a2(0LL);
  uint64_t v9 = __swift_project_value_buffer(v8, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL))(a5, v9, v8);
}

uint64_t static Logger.generateSignpostID()()
{
  if (one-time initialization token for informationLog != -1) {
    swift_once(&one-time initialization token for informationLog, one-time initialization function for informationLog);
  }
  return OSSignpostID.init(log:)((id)static Logger.informationLog);
}

uint64_t Logger.event(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = static os_signpost_type_t.event.getter(v8);
  if (one-time initialization token for informationLog != -1) {
    swift_once(&one-time initialization token for informationLog, one-time initialization function for informationLog);
  }
  uint64_t v12 = static Logger.informationLog;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v11, &dword_0, v12, a1, a2, a3, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t one-time initialization function for information(uint64_t a1)
{
  return one-time initialization function for information( a1,  static Signposter.information,  &one-time initialization token for information,  (uint64_t)static Logger.information,  (uint64_t)one-time initialization function for information);
}

uint64_t Signposter.information.unsafeMutableAddressor()
{
  return Logger.information.unsafeMutableAddressor( &one-time initialization token for information,  (uint64_t (*)(void))&type metadata accessor for OSSignposter,  (uint64_t)static Signposter.information,  (uint64_t)one-time initialization function for information);
}

uint64_t static Signposter.information.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.information.getter( &one-time initialization token for information,  (uint64_t (*)(void))&type metadata accessor for OSSignposter,  (uint64_t)static Signposter.information,  (uint64_t)one-time initialization function for information,  a1);
}

uint64_t one-time initialization function for videoSnippet(uint64_t a1)
{
  return one-time initialization function for information( a1,  static Signposter.videoSnippet,  &one-time initialization token for videoSnippet,  (uint64_t)static Logger.videoSnippet,  (uint64_t)one-time initialization function for videoSnippet);
}

uint64_t one-time initialization function for information( uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for OSSignposter(0LL);
  __swift_allocate_value_buffer(v13, a2);
  __swift_project_value_buffer(v13, (uint64_t)a2);
  if (*a3 != -1LL) {
    swift_once(a3, a5);
  }
  uint64_t v14 = __swift_project_value_buffer(v9, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v14, v9);
  return OSSignposter.init(logger:)(v12);
}

uint64_t Signposter.videoSnippet.unsafeMutableAddressor()
{
  return Logger.information.unsafeMutableAddressor( &one-time initialization token for videoSnippet,  (uint64_t (*)(void))&type metadata accessor for OSSignposter,  (uint64_t)static Signposter.videoSnippet,  (uint64_t)one-time initialization function for videoSnippet);
}

uint64_t static Signposter.videoSnippet.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.information.getter( &one-time initialization token for videoSnippet,  (uint64_t (*)(void))&type metadata accessor for OSSignposter,  (uint64_t)static Signposter.videoSnippet,  (uint64_t)one-time initialization function for videoSnippet,  a1);
}

uint64_t OSSignposter.withIntervalSignpost<A>(_:id:around:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 64) = a7;
  *(void *)(v8 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v7;
  *(void *)(v8 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a5;
  *(void *)(v8 + 56) = a6;
  *(_BYTE *)(v8 + 12__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a4;
  *(void *)(v8 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a2;
  *(void *)(v8 + 40) = a3;
  *(void *)(v8 + 24) = a1;
  uint64_t v9 = type metadata accessor for OSSignpostID(0LL);
  *(void *)(v8 + 80) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v10;
  *(void *)(v8 + 96) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(OSSignposter.withIntervalSignpost<A>(_:id:around:), 0LL, 0LL);
}

uint64_t OSSignposter.withIntervalSignpost<A>(_:id:around:)(uint64_t a1)
{
  uint64_t v2 = (void *)OSSignposter.logHandle.getter(a1);
  os_signpost_type_t v3 = static os_signpost_type_t.begin.getter(v2);
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v5 = *(const char **)(v1 + 32);
  if ((*(_BYTE *)(v1 + 128) & 1) == 0)
  {
    if (!v5)
    {
      __break(1u);
LABEL_5:
      uint64_t v6 = *(void *)(v1 + 88);

      uint64_t v7 = *(void (**)(uint64_t, void, uint64_t))(v6 + 16);
LABEL_11:
      uint64_t v13 = *(void *)(v1 + 96);
      uint64_t v14 = *(int **)(v1 + 56);
      v7(v13, *(void *)(v1 + 48), *(void *)(v1 + 80));
      uint64_t v15 = type metadata accessor for OSSignpostIntervalState(0LL);
      swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
      *(void *)(v1 + 104) = OSSignpostIntervalState.init(id:isOpen:)(v13, 1LL);
      uint64_t v17 = (uint64_t (*)(void))((char *)v14 + *v14);
      uint64_t v16 = (void *)swift_task_alloc(v14[1]);
      *(void *)(v1 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v16;
      *uint64_t v16 = v1;
      v16[1] = OSSignposter.withIntervalSignpost<A>(_:id:around:);
      return v17(*(void *)(v1 + 24));
    }

LABEL_10:
    uint64_t v9 = *(void *)(v1 + 88);
    uint64_t v8 = *(void *)(v1 + 96);
    uint64_t v10 = *(void *)(v1 + 80);
    uint64_t v7 = *(void (**)(uint64_t, void, uint64_t))(v9 + 16);
    v7(v8, *(void *)(v1 + 48), v10);
    uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v11 = 0;
    os_signpost_id_t v12 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, (os_log_t)v2, v3, v12, v5, "", v11, 2u);
    swift_slowDealloc(v11, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    goto LABEL_11;
  }

  if ((unint64_t)v5 >> 32)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (v5 >> 11 != 27)
  {
    if (v5 >> 16 <= 0x10)
    {
      uint64_t v5 = (const char *)(v1 + 16);
      goto LABEL_10;
    }

    goto LABEL_13;
  }

    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v15(v11, a4, v7);
    uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v16 = 0;
    uint64_t v17 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, (os_log_t)v12, v13, v17, a1, "enableTelemetry=YES", v16, 2u);
    swift_slowDealloc(v16, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    v15(v11, a4, v7);
    goto LABEL_11;
  }

  if ((unint64_t)a1 >> 32)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (a1 >> 11 != 27)
  {
    if (a1 >> 16 <= 0x10)
    {
      a1 = &v20;
      goto LABEL_10;
    }

    goto LABEL_13;
  }

uint64_t OSSignposter.withIntervalSignpost<A>(_:id:around:)()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 112LL);
  *(void *)(*(void *)v1 + 12Hasher.init(_seed:)(v1, 0LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    os_signpost_type_t v3 = OSSignposter.withIntervalSignpost<A>(_:id:around:);
  }
  else {
    os_signpost_type_t v3 = OSSignposter.withIntervalSignpost<A>(_:id:around:);
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 104);
  $defer #1 <A>() in OSSignposter.withIntervalSignpost<A>(_:id:around:)( *(void *)(v0 + 72),  *(const char **)(v0 + 32),  *(void *)(v0 + 40),  *(unsigned __int8 *)(v0 + 128),  v2);
  swift_release(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 104);
  $defer #1 <A>() in OSSignposter.withIntervalSignpost<A>(_:id:around:)( *(void *)(v0 + 72),  *(const char **)(v0 + 32),  *(void *)(v0 + 40),  *(unsigned __int8 *)(v0 + 128),  v2);
  swift_release(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t OSSignposter.beginIntervalTelemetryEnabled(_:id:)(const char *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_signpost_id_t v12 = (void *)OSSignposter.logHandle.getter(v9);
  os_signpost_type_t v13 = static os_signpost_type_t.begin.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  if ((a3 & 1) == 0)
  {
    if (!a1)
    {
      __break(1u);
LABEL_5:

      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a4, v7);
LABEL_11:
      uint64_t v18 = type metadata accessor for OSSignpostIntervalState(0LL);
      swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
      return OSSignpostIntervalState.init(id:isOpen:)(v11, 1LL);
    }

void OSSignposter.withIntervalSignpostTelemetryEnabled<A>(_:id:around:)( const char *a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v9 = a1;
  if ((a3 & 1) == 0)
  {
    if (a1) {
      goto LABEL_8;
    }
    __break(1u);
  }

  if ((unint64_t)a1 >> 32)
  {
    __break(1u);
    goto LABEL_12;
  }

  if (a1 >> 11 == 27)
  {
LABEL_13:
    __break(1u);
    return;
  }

  if (a1 >> 16 > 0x10)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v9 = &v11;
LABEL_8:
  uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
  *(_WORD *)uint64_t v10 = 0;
  closure #1 in OSSignposter.withIntervalSignpost<A>(_:id:_:around:)(v10, 2u, v5, a4, v9, "enableTelemetry=YES", a5);
  if (!v6) {
    swift_slowDealloc(v10, -1LL, -1LL);
  }
}

uint64_t OSSignposter.withIntervalSignpostTelemetryEnabled<A>(_:id:around:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 56) = a7;
  *(void *)(v8 + 64) = v7;
  *(void *)(v8 + 40) = a5;
  *(void *)(v8 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a6;
  *(_BYTE *)(v8 + 96) = a4;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a3;
  *(void *)(v8 + 16) = a1;
  return swift_task_switch(OSSignposter.withIntervalSignpostTelemetryEnabled<A>(_:id:around:), 0LL, 0LL);
}

uint64_t OSSignposter.withIntervalSignpostTelemetryEnabled<A>(_:id:around:)(uint64_t a1, uint64_t a2)
{
  os_signpost_type_t v3 = *(int **)(v2 + 48);
  *(void *)(v2 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = OSSignposter.beginIntervalTelemetryEnabled(_:id:)( *(const char **)(v2 + 24),  a2,  *(_BYTE *)(v2 + 96),  *(void *)(v2 + 40));
  uint64_t v6 = (uint64_t (*)(void))((char *)v3 + *v3);
  uint64_t v4 = (void *)swift_task_alloc(v3[1]);
  *(void *)(v2 + 80) = v4;
  *uint64_t v4 = v2;
  v4[1] = OSSignposter.withIntervalSignpostTelemetryEnabled<A>(_:id:around:);
  return v6(*(void *)(v2 + 16));
}

uint64_t OSSignposter.withIntervalSignpostTelemetryEnabled<A>(_:id:around:)()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 80LL);
  *(void *)(*(void *)v1 + 88LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    os_signpost_type_t v3 = OSSignposter.withIntervalSignpostTelemetryEnabled<A>(_:id:around:);
  }
  else {
    os_signpost_type_t v3 = OSSignposter.withIntervalSignpostTelemetryEnabled<A>(_:id:around:);
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 72);
  $defer #1 <A>() in OSSignposter.withIntervalSignpost<A>(_:id:around:)( *(void *)(v0 + 64),  *(const char **)(v0 + 24),  *(void *)(v0 + 32),  *(unsigned __int8 *)(v0 + 96),  v1);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 72);
  $defer #1 <A>() in OSSignposter.withIntervalSignpost<A>(_:id:around:)( *(void *)(v0 + 64),  *(const char **)(v0 + 24),  *(void *)(v0 + 32),  *(unsigned __int8 *)(v0 + 96),  v1);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t $defer #1 <A>() in OSSignposter.withIntervalSignpost<A>(_:id:around:)( uint64_t a1, const char *a2, uint64_t a3, int a4, uint64_t a5)
{
  int v28 = a4;
  unint64_t v29 = (char *)a2;
  uint64_t v6 = type metadata accessor for OSSignpostError(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  os_signpost_id_t v17 = (char *)&v26 - v16;
  uint64_t v18 = (void *)OSSignposter.logHandle.getter(v15);
  uint64_t v19 = OSSignpostIntervalState.signpostID.getter();
  int v27 = static os_signpost_type_t.end.getter(v19);
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  if ((v28 & 1) == 0)
  {
    if (!v29)
    {
      __break(1u);
LABEL_5:

      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    }

    goto LABEL_10;
  }

  if ((unint64_t)v29 >> 32)
  {
    __break(1u);
    goto LABEL_16;
  }

  if (v29 >> 11 == 27)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  if (v29 >> 16 > 0x10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  unint64_t v29 = &v30;
LABEL_10:
  uint64_t v21 = swift_retain(a5);
  checkForErrorAndConsumeState(state:)(v21);
  swift_release(a5);
  if ((*(unsigned int (**)(char *, uint64_t))(v7 + 88))(v9, v6) == enum case for OSSignpostError.doubleEnd(_:))
  {
    uint64_t v22 = "[Error] Interval already ended";
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v22 = "";
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v17, v10);
  os_log_type_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
  *(_WORD *)os_log_type_t v23 = 0;
  os_signpost_id_t v24 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_0, (os_log_t)v18, (os_signpost_type_t)v27, v24, v29, v22, v23, 2u);
  swift_slowDealloc(v23, -1LL, -1LL);

  uint64_t v25 = *(void (**)(char *, uint64_t))(v11 + 8);
  v25(v17, v10);
  return ((uint64_t (*)(char *, uint64_t))v25)(v14, v10);
}

unint64_t static LogConst.subsystem.getter()
{
  return 0xD00000000000001ALL;
}

unint64_t static LogConst.Category.informationPlugin.getter()
{
  return 0xD000000000000015LL;
}

unint64_t static LogConst.Category.videoSnippet.getter()
{
  return 0xD000000000000011LL;
}

const char *static LogConst.Signpost.renderPegasusResult.getter()
{
  return "renderPegasusResult";
}

char **LogConst.Signpost.attemptResolveParseSearchResult.unsafeMutableAddressor()
{
  return &static LogConst.Signpost.attemptResolveParseSearchResult;
}

const char *static LogConst.Signpost.attemptResolveParseSearchResult.getter()
{
  return "attemptResolveParse";
}

char **LogConst.Signpost.selectSportsAlternative.unsafeMutableAddressor()
{
  return &static LogConst.Signpost.selectSportsAlternative;
}

const char *static LogConst.Signpost.selectSportsAlternative.getter()
{
  return "selectSportsAlternative";
}

void closure #1 in OSSignposter.withIntervalSignpost<A>(_:id:_:around:)( uint8_t *a1, uint32_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint64_t (*a7)(void))
{
  uint64_t v11 = (os_log_s *)OSSignposter.logHandle.getter(a1);
  os_signpost_type_t v12 = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v13 = OSSignpostID.rawValue.getter();
  os_signpost_id_t v17 = a5;
  _os_signpost_emit_with_name_impl(&dword_0, v11, v12, v13, a5, a6, a1, a2);
  uint64_t v14 = a7();
  if (!v19)
  {
    os_signpost_type_t v15 = static os_signpost_type_t.end.getter(v14);
    os_signpost_id_t v16 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v11, v15, v16, v17, a6, a1, a2);
  }
}

ValueMetadata *type metadata accessor for Logger()
{
  return &type metadata for Logger;
}

ValueMetadata *type metadata accessor for Signposter()
{
  return &type metadata for Signposter;
}

ValueMetadata *type metadata accessor for LogConst()
{
  return &type metadata for LogConst;
}

ValueMetadata *type metadata accessor for LogConst.Category()
{
  return &type metadata for LogConst.Category;
}

ValueMetadata *type metadata accessor for LogConst.Signpost()
{
  return &type metadata for LogConst.Signpost;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_os_log);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }

  return result;
}

uint64_t RFSimpleYesNoPromptFlowStrategy.__allocating_init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v24 = a7;
  uint64_t v25 = a8;
  uint64_t v15 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  uint64_t v17 = a2[3];
  uint64_t v16 = a2[4];
  uint64_t v18 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a2, v17);
  __chkstk_darwin(v18);
  char v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v21 + 16))(v20);
  uint64_t v22 = specialized RFSimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:)( a1,  (uint64_t)v20,  a3,  a4,  a5,  a6,  v24,  v25,  v15,  v17,  v16);
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v22;
}

uint64_t closure #1 in default argument 2 of RFSimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:)( uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return swift_task_switch( closure #1 in default argument 2 of RFSimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:),  0LL,  0LL);
}

uint64_t closure #1 in default argument 2 of RFSimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  *(void *)(v1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in default argument 3 of RFSimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:)( uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return swift_task_switch( closure #1 in default argument 3 of RFSimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:),  0LL,  0LL);
}

uint64_t RFSimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v16 = a2[3];
  uint64_t v15 = a2[4];
  uint64_t v17 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a2, v16);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v20 + 16))(v19);
  uint64_t v21 = specialized RFSimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:)( a1,  (uint64_t)v19,  a3,  a4,  a5,  a6,  v23,  v24,  v8,  v16,  v15);
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v21;
}

uint64_t RFSimpleYesNoPromptFlowStrategy.populate(manifest:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v58 = (uint64_t)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v56 - v7;
  uint64_t v57 = type metadata accessor for NLContextUpdate(0LL);
  uint64_t v9 = *(void *)(v57 - 8);
  uint64_t v10 = __chkstk_darwin(v57);
  os_signpost_type_t v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  char v56 = (char *)&v56 - v13;
  uint64_t v14 = type metadata accessor for DialogPhase(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v56 - v19;
  uint64_t v21 = type metadata accessor for OutputGenerationManifest(0LL);
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16LL))(a2, a1, v21);
  uint64_t v23 = OutputGenerationManifest.dialogPhase.getter(v22);
  static DialogPhase.clarification.getter(v23);
  uint64_t v24 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type DialogPhase and conformance DialogPhase,  (uint64_t (*)(uint64_t))&type metadata accessor for DialogPhase,  (uint64_t)&protocol conformance descriptor for DialogPhase);
  LOBYTE(a1) = dispatch thunk of static Equatable.== infix(_:_:)(v20, v18, v14, v24);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  v25(v20, v14);
  if ((a1 & 1) == 0)
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v26 = type metadata accessor for Logger(0LL);
    uint64_t v27 = __swift_project_value_buffer(v26, (uint64_t)static Logger.information);
    int v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      char v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)char v30 = 0;
      _os_log_impl( &dword_0,  v28,  v29,  "A non clarification dialog phase was inputed into a RFSimpleYesNoPromptFlowStrategy. This could cause unwanted b ehavior in the UI layer.",  v30,  2u);
      swift_slowDealloc(v30, -1LL, -1LL);
    }
  }

  uint64_t v31 = OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
  OutputGenerationManifest.nlContextUpdate.getter(v31);
  uint64_t v32 = v57;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1LL, v57) == 1)
  {
    outlined destroy of NLContextUpdate?((uint64_t)v8);
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v33 = type metadata accessor for Logger(0LL);
    uint64_t v34 = __swift_project_value_buffer(v33, (uint64_t)static Logger.information);
    int v35 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v40 = static os_log_type_t.debug.getter(v35, v36, v37, v38, v39);
    if (os_log_type_enabled(v35, v40))
    {
      unsigned int v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unsigned int v41 = 0;
      _os_log_impl( &dword_0,  v35,  v40,  "OutputGenerationManifest does not include an NL context update. Will send a standard Reader domain prompt offer.",  v41,  2u);
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    NLContextUpdate.init()(v42);
    uint64_t v43 = v58;
    RFSimpleYesNoPromptFlowStrategy.attachNLV3ReaderPrompt(to:)((uint64_t)v12, v58);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v32);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v43, 0LL, 1LL, v32);
    return OutputGenerationManifest.nlContextUpdate.setter(v43);
  }

  else
  {
    uint64_t v45 = (uint64_t)v56;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v56, v8, v32);
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v46 = type metadata accessor for Logger(0LL);
    uint64_t v47 = __swift_project_value_buffer(v46, (uint64_t)static Logger.information);
    uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
    os_log_type_t v53 = static os_log_type_t.debug.getter(v48, v49, v50, v51, v52);
    if (os_log_type_enabled(v48, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v54 = 0;
      _os_log_impl(&dword_0, v48, v53, "Attaching NL Context to existing context update provided by domain.", v54, 2u);
      swift_slowDealloc(v54, -1LL, -1LL);
    }

    uint64_t v55 = v58;
    RFSimpleYesNoPromptFlowStrategy.attachNLV3ReaderPrompt(to:)(v45, v58);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v55, 0LL, 1LL, v32);
    OutputGenerationManifest.nlContextUpdate.setter(v55);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v45, v32);
  }

void RFSimpleYesNoPromptFlowStrategy.attachNLV3ReaderPrompt(to:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  NLContextUpdate.weightedPromptTargetDomain.setter(0xD000000000000018LL, 0x80000000000800A0LL);
  NLContextUpdate.weightedPromptStrict.setter(1LL);
  NLContextUpdate.weightedPromptResponseTargets.setter(&outlined read-only object #0 of RFSimpleYesNoPromptFlowStrategy.attachNLV3ReaderPrompt(to:));
  NLContextUpdate.weightedPromptAbortValues.setter(&outlined read-only object #1 of RFSimpleYesNoPromptFlowStrategy.attachNLV3ReaderPrompt(to:));
  NLContextUpdate.weightedPromptResponseOptions.setter(&outlined read-only object #2 of RFSimpleYesNoPromptFlowStrategy.attachNLV3ReaderPrompt(to:));
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = __swift_project_value_buffer(v5, (uint64_t)static Logger.information);
  os_log_t oslog = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v11 = static os_log_type_t.debug.getter(oslog, v7, v8, v9, v10);
  if (os_log_type_enabled(oslog, v11))
  {
    os_signpost_type_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_signpost_type_t v12 = 0;
    _os_log_impl(&dword_0, oslog, v11, "#RF Built Reader Prompt hints.", v12, 2u);
    swift_slowDealloc(v12, -1LL, -1LL);
  }
}

uint64_t RFSimpleYesNoPromptFlowStrategy.makePromptForYesNoResponse()(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for Date(0LL);
  v2[4] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for PerformanceUtil.Ticket(0LL);
  void v2[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[6] = v5;
  v2[7] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OutputGenerationManifest(0LL);
  _BYTE v2[8] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  void v2[9] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[10] = swift_task_alloc(v8);
  v2[11] = swift_task_alloc(v8);
  return swift_task_switch(RFSimpleYesNoPromptFlowStrategy.makePromptForYesNoResponse(), 0LL, 0LL);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 104);
  *(void *)(v3 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a1;
  *(void *)(v3 + 120) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = RFSimpleYesNoPromptFlowStrategy.makePromptForYesNoResponse();
  }
  else {
    uint64_t v5 = RFSimpleYesNoPromptFlowStrategy.makePromptForYesNoResponse();
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t RFSimpleYesNoPromptFlowStrategy.makePromptForYesNoResponse()()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))( v1,  v5 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_baseManifest,  v3);
  RFSimpleYesNoPromptFlowStrategy.populate(manifest:)(v1, v2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  v0[12] = v7;
  uint64_t v8 = v7(v1, v3);
  Date.init()(v8);
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)( 0xD000000000000020LL,  0x8000000000082C30LL,  v6,  "InformationFlowPlugin/RFSimpleYesNoPromptFlowStrategy.swift",  59LL,  2LL,  69LL,  "makePromptForYesNoResponse()",  28LL,  2);
  uint64_t v9 = *(int **)(v5
               + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_promptPatternExecutionProducer);
  os_signpost_type_t v12 = (uint64_t (*)(void))((char *)v9 + *v9);
  uint64_t v10 = (void *)swift_task_alloc(v9[1]);
  v0[13] = v10;
  *uint64_t v10 = v0;
  v10[1] = RFSimpleYesNoPromptFlowStrategy.makePromptForYesNoResponse();
  return v12();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[3];
  uint64_t v3 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v4 = static PerformanceUtil.shared.getter(v3);
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)(v1, 0LL);
  swift_release(v4);
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_responseGenerator);
  uint64_t v6 = *(void *)(v2 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_responseGenerator + 24);
  uint64_t v7 = *(void *)(v2 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_responseGenerator + 32);
  __swift_project_boxed_opaque_existential_1(v5, v6);
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)[1]);
  v0[16] = v8;
  *uint64_t v8 = v0;
  v8[1] = RFSimpleYesNoPromptFlowStrategy.makePromptForYesNoResponse();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)( v0[2],  v0[14],  v0[11],  v6,  v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v2 = *(void *)(*(void *)v1 + 128LL);
  *(void *)(*(void *)v1 + 136LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = RFSimpleYesNoPromptFlowStrategy.makePromptForYesNoResponse();
  }
  else {
    uint64_t v3 = RFSimpleYesNoPromptFlowStrategy.makePromptForYesNoResponse();
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 48);
  uint64_t v8 = *(void *)(v0 + 32);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v2(v1, v4);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 32);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 48) + 8LL))(v5, *(void *)(v0 + 40));
  v2(v1, v4);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 32);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 48) + 8LL))(v5, *(void *)(v0 + 40));
  v2(v1, v4);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RFSimpleYesNoPromptFlowStrategy.actionForInput(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v68 = a1;
  uint64_t v1 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v63 - v6;
  uint64_t v8 = type metadata accessor for Parse(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  os_signpost_type_t v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (uint64_t *)((char *)&v63 - v14);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v63 - v17;
  Input.parse.getter(v16);
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v18, v8);
  if ((_DWORD)v19 == enum case for Parse.directInvocation(_:))
  {
    uint64_t v65 = v5;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v18, v8);
    (*(void (**)(char *, uint64_t))(v9 + 96))(v12, v8);
    uint64_t v66 = v2;
    uint64_t v67 = v1;
    uint64_t v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v2 + 16))(v7, v12, v1);
    uint64_t v21 = Parse.DirectInvocation.identifier.getter(v20);
    uint64_t v23 = v22;
    uint64_t v24 = (void *)static SiriKitDirectInvocationPayloads.cancel.getter();
    id v25 = [v24 identifier];

    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    uint64_t v28 = v27;

    if (v21 == v26 && v23 == v28)
    {
      uint64_t v31 = swift_bridgeObjectRelease_n(v23, 2LL);
    }

    else
    {
      char v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, v26, v28, 0LL);
      swift_bridgeObjectRelease(v23);
      uint64_t v31 = swift_bridgeObjectRelease(v28);
      if ((v30 & 1) == 0)
      {
        uint64_t v64 = *(uint64_t (**)(char *, uint64_t))(v66 + 8);
        uint64_t v32 = v64(v7, v67);
        uint64_t v33 = Parse.DirectInvocation.identifier.getter(v32);
        uint64_t v35 = v34;
        uint64_t v36 = (void *)static SiriKitDirectInvocationPayloads.confirm.getter();
        id v37 = [v36 identifier];

        uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        uint64_t v40 = v39;

        if (v33 == v38 && v35 == v40)
        {
          uint64_t v41 = v8;
          uint64_t v42 = v67;
LABEL_10:
          uint64_t v43 = (void (*)(char *, uint64_t))v64;
          swift_bridgeObjectRelease_n(v35, 2LL);
          v43(v12, v42);
LABEL_29:
          uint64_t v62 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v18, v41);
          return static ActionForInput.handle()(v62);
        }

        char v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v38, v40, 0LL);
        swift_bridgeObjectRelease(v35);
        swift_bridgeObjectRelease(v40);
        if ((v52 & 1) != 0)
        {
          uint64_t v41 = v8;
          v64(v12, v67);
          goto LABEL_29;
        }

        uint64_t v42 = v67;
        uint64_t v53 = (*(uint64_t (**)(char *, char *, uint64_t))(v66 + 32))(v65, v12, v67);
        uint64_t v54 = Parse.DirectInvocation.identifier.getter(v53);
        uint64_t v35 = v55;
        char v56 = (void *)static SiriKitDirectInvocationPayloads.reject.getter();
        id v57 = [v56 identifier];

        uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
        uint64_t v60 = v59;

        if (v54 == v58 && v35 == v60)
        {
          uint64_t v41 = v8;
          os_signpost_type_t v12 = v65;
          goto LABEL_10;
        }

        uint64_t v41 = v8;
        char v61 = _stringCompareWithSmolCheck(_:_:expecting:)(v54, v35, v58, v60, 0LL);
        swift_bridgeObjectRelease(v35);
        swift_bridgeObjectRelease(v60);
        if ((v61 & 1) != 0)
        {
          v64(v65, v42);
          goto LABEL_29;
        }

        uint64_t v19 = v64(v65, v42);
        goto LABEL_32;
      }
    }

    static ActionForInput.cancel()(v31);
    uint64_t v46 = v67;
    uint64_t v47 = *(void (**)(char *, uint64_t))(v66 + 8);
    v47(v7, v67);
    v47(v12, v46);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v18, v8);
  }

  uint64_t v41 = v8;
  if ((_DWORD)v19 == enum case for Parse.NLv4IntentOnly(_:))
  {
    (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(v15, v18, v8);
    (*(void (**)(uint64_t *, uint64_t))(v9 + 96))(v15, v8);
    uint64_t v44 = *v15;
    uint64_t v45 = objc_opt_self(&OBJC_CLASS___SIRINLUUserCancelled);
    if (swift_dynamicCastObjCClass(v44, v45))
    {
      ((void (*)(void))static ActionForInput.cancel())();
      swift_unknownObjectRelease(v44);
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v18, v8);
    }

    uint64_t v49 = objc_opt_self(&OBJC_CLASS___SIRINLUUserAccepted);
    if (swift_dynamicCastObjCClass(v44, v49)
      || (uint64_t v50 = objc_opt_self(&OBJC_CLASS___SIRINLUUserRejected), swift_dynamicCastObjCClass(v44, v50)))
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
      uint64_t v51 = swift_unknownObjectRelease(v44);
      return static ActionForInput.handle()(v51);
    }

    uint64_t v19 = swift_unknownObjectRelease(v44);
LABEL_32:
    static ActionForInput.ignore()(v19);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v18, v41);
  }

  if ((_DWORD)v19 != enum case for Parse.pegasusResults(_:)) {
    goto LABEL_32;
  }
  ((void (*)(void))static ActionForInput.handle())();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v18, v41);
}

uint64_t RFSimpleYesNoPromptFlowStrategy.parseConfirmationResponse(input:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for Parse.PegasusResult(0LL);
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Parse.DirectInvocation(0LL);
  v3[8] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  void v3[9] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[10] = swift_task_alloc(v8);
  v3[11] = swift_task_alloc(v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  v3[12] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Parse(0LL);
  v3[13] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[14] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[15] = swift_task_alloc(v12);
  v3[16] = swift_task_alloc(v12);
  v3[17] = swift_task_alloc(v12);
  v3[18] = swift_task_alloc(v12);
  return swift_task_switch(RFSimpleYesNoPromptFlowStrategy.parseConfirmationResponse(input:), 0LL, 0LL);
}

uint64_t RFSimpleYesNoPromptFlowStrategy.parseConfirmationResponse(input:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 144);
  uint64_t v3 = *(void *)(v1 + 104);
  uint64_t v4 = *(void *)(v1 + 112);
  Input.parse.getter(a1);
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 88))(v2, v3);
  if (v5 != enum case for Parse.directInvocation(_:))
  {
    if (v5 != enum case for Parse.NLv4IntentOnly(_:))
    {
      if (v5 == enum case for Parse.pegasusResults(_:))
      {
        uint64_t v39 = *(void *)(v1 + 112);
        uint64_t v38 = *(void *)(v1 + 120);
        uint64_t v40 = *(void *)(v1 + 104);
        uint64_t v42 = *(void *)(v1 + 48);
        uint64_t v41 = *(void *)(v1 + 56);
        uint64_t v43 = *(void *)(v1 + 40);
        uint64_t v44 = *(void *)(v1 + 16);
        (*(void (**)(uint64_t, void, uint64_t))(v39 + 16))(v38, *(void *)(v1 + 144), v40);
        (*(void (**)(uint64_t, uint64_t))(v39 + 96))(v38, v40);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v41, v38, v43);
        RFSimpleYesNoPromptFlowStrategy.parsePegasusResponse(pegasusResult:)(v44);
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
        goto LABEL_27;
      }

      goto LABEL_22;
    }

    uint64_t v21 = *(uint64_t **)(v1 + 136);
    uint64_t v22 = *(void *)(v1 + 104);
    uint64_t v23 = *(void *)(v1 + 112);
    (*(void (**)(uint64_t *, void, uint64_t))(v23 + 16))(v21, *(void *)(v1 + 144), v22);
    (*(void (**)(uint64_t *, uint64_t))(v23 + 96))(v21, v22);
    uint64_t v24 = *v21;
    uint64_t v25 = objc_opt_self(&OBJC_CLASS___SIRINLUUserAccepted);
    if (swift_dynamicCastObjCClass(v24, v25))
    {
      uint64_t v26 = *(void *)(v1 + 96);
      uint64_t v27 = (unsigned int *)&enum case for ConfirmationResponse.confirmed(_:);
    }

    else
    {
      uint64_t v59 = objc_opt_self(&OBJC_CLASS___SIRINLUUserRejected);
      if (!swift_dynamicCastObjCClass(v24, v59))
      {
        swift_unknownObjectRelease(v24);
        goto LABEL_22;
      }

      uint64_t v26 = *(void *)(v1 + 96);
      uint64_t v27 = (unsigned int *)&enum case for ConfirmationResponse.rejected(_:);
    }

    uint64_t v60 = *v27;
    uint64_t v61 = type metadata accessor for ConfirmationResponse(0LL);
    uint64_t v62 = *(void *)(v61 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 104))(v26, v60, v61);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v62 + 56))(v26, 0LL, 1LL, v61);
    SimpleConfirmationResponseProvider.init(_:)(v26);
    swift_unknownObjectRelease(v24);
    goto LABEL_27;
  }

  uint64_t v6 = *(void *)(v1 + 128);
  uint64_t v7 = *(void *)(v1 + 104);
  uint64_t v8 = *(void *)(v1 + 112);
  uint64_t v9 = *(void *)(v1 + 88);
  uint64_t v10 = *(void *)(v1 + 64);
  uint64_t v11 = *(void *)(v1 + 72);
  (*(void (**)(uint64_t, void, uint64_t))(v8 + 16))(v6, *(void *)(v1 + 144), v7);
  (*(void (**)(uint64_t, uint64_t))(v8 + 96))(v6, v7);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, v6, v10);
  uint64_t v13 = Parse.DirectInvocation.identifier.getter(v12);
  uint64_t v15 = v14;
  uint64_t v16 = (void *)static SiriKitDirectInvocationPayloads.confirm.getter(v13);
  id v17 = [v16 identifier];

  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  uint64_t v20 = v19;

  if (v13 == v18 && v15 == v20)
  {
    swift_bridgeObjectRelease_n(v15, 2LL);
LABEL_9:
    uint64_t v29 = *(void *)(v1 + 128);
    uint64_t v31 = *(void *)(v1 + 88);
    uint64_t v30 = *(void *)(v1 + 96);
    uint64_t v32 = *(void *)(v1 + 64);
    uint64_t v33 = *(void *)(v1 + 72);
    uint64_t v34 = enum case for ConfirmationResponse.confirmed(_:);
    uint64_t v35 = type metadata accessor for ConfirmationResponse(0LL);
    uint64_t v36 = *(void *)(v35 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 104))(v30, v34, v35);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v30, 0LL, 1LL, v35);
    SimpleConfirmationResponseProvider.init(_:)(v30);
    id v37 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
    v37(v31, v32);
    v37(v29, v32);
    goto LABEL_27;
  }

  char v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, v18, v20, 0LL);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v15);
  if ((v28 & 1) != 0) {
    goto LABEL_9;
  }
  uint64_t v45 = *(void *)(v1 + 128);
  uint64_t v46 = *(void *)(v1 + 80);
  uint64_t v47 = *(void *)(v1 + 64);
  uint64_t v48 = *(void *)(v1 + 72);
  uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
  v49(*(void *)(v1 + 88), v47);
  uint64_t v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 32))(v46, v45, v47);
  uint64_t v51 = Parse.DirectInvocation.identifier.getter(v50);
  uint64_t v53 = v52;
  uint64_t v54 = (void *)static SiriKitDirectInvocationPayloads.reject.getter();
  id v55 = [v54 identifier];

  uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
  uint64_t v58 = v57;

  if (v51 == v56 && v53 == v58)
  {
    swift_bridgeObjectRelease_n(v53, 2LL);
LABEL_19:
    uint64_t v64 = *(void *)(v1 + 96);
    uint64_t v65 = *(void *)(v1 + 80);
    uint64_t v66 = *(void *)(v1 + 64);
    uint64_t v67 = enum case for ConfirmationResponse.rejected(_:);
    uint64_t v68 = type metadata accessor for ConfirmationResponse(0LL);
    uint64_t v69 = *(void *)(v68 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 104))(v64, v67, v68);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v69 + 56))(v64, 0LL, 1LL, v68);
    SimpleConfirmationResponseProvider.init(_:)(v64);
    v49(v65, v66);
    goto LABEL_27;
  }

  char v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v51, v53, v56, v58, 0LL);
  swift_bridgeObjectRelease(v58);
  swift_bridgeObjectRelease(v53);
  if ((v63 & 1) != 0) {
    goto LABEL_19;
  }
  v49(*(void *)(v1 + 80), *(void *)(v1 + 64));
LABEL_22:
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v70 = type metadata accessor for Logger(0LL);
  uint64_t v71 = __swift_project_value_buffer(v70, (uint64_t)static Logger.information);
  uint64_t v72 = (os_log_s *)Logger.logObject.getter(v71);
  os_log_type_t v77 = static os_log_type_t.debug.getter(v72, v73, v74, v75, v76);
  if (os_log_type_enabled(v72, v77))
  {
    uint64_t v78 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v78 = 0;
    _os_log_impl(&dword_0, v72, v77, "Unable to parse a confirmation response from the given parse", v78, 2u);
    swift_slowDealloc(v78, -1LL, -1LL);
  }

  uint64_t v79 = *(void *)(v1 + 96);

  uint64_t v80 = type metadata accessor for ConfirmationResponse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56LL))(v79, 1LL, 1LL, v80);
  SimpleConfirmationResponseProvider.init(_:)(v79);
LABEL_27:
  uint64_t v81 = *(void *)(v1 + 136);
  uint64_t v82 = *(void *)(v1 + 144);
  uint64_t v84 = *(void *)(v1 + 120);
  uint64_t v83 = *(void *)(v1 + 128);
  uint64_t v86 = *(void *)(v1 + 88);
  uint64_t v85 = *(void *)(v1 + 96);
  uint64_t v87 = *(void *)(v1 + 80);
  uint64_t v88 = *(void *)(v1 + 56);
  (*(void (**)(uint64_t, void))(*(void *)(v1 + 112) + 8LL))(v82, *(void *)(v1 + 104));
  swift_task_dealloc(v82);
  swift_task_dealloc(v81);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void RFSimpleYesNoPromptFlowStrategy.parsePegasusResponse(pegasusResult:)(uint64_t a1@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  __chkstk_darwin(v1);
  uint64_t v26 = (char *)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for BinaryDecodingOptions(0LL);
  __chkstk_darwin(v3);
  uint64_t v23 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  v22[0] = *(void *)(v23 - 8);
  uint64_t v4 = __chkstk_darwin(v23);
  v22[1] = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerUnderstanding(0LL);
  uint64_t v24 = *(void *)(v14 - 8);
  uint64_t v25 = v14;
  uint64_t v15 = __chkstk_darwin(v14);
  id v17 = (char *)v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = Parse.PegasusResult.response.getter(v15);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter(v18);
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverUnderstanding.getter(v19);
  uint64_t v20 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  char v28 = v17;
  Apple_Parsec_Siri_V2alpha_ServerUnderstanding.userDialogActOverride.getter(v20);
  __asm { BR              X10 }

uint64_t sub_72C20()
{
  uint64_t v5 = outlined consume of Data._Representation(v0, v3);
  uint64_t v6 = *(void *)(v4 - 200);
  uint64_t v7 = *(void *)(v4 - 192);
  if ((v3 & 0xFF000000000000LL) != 0) {
    uint64_t v8 = ((uint64_t (*)(uint64_t))Apple_Parsec_Siri_V2alpha_ServerUnderstanding.userDialogActOverride.getter)(v5);
  }
  else {
    uint64_t v8 = ((uint64_t (*)(uint64_t))Apple_Parsec_Siri_V2alpha_ServerUnderstanding.userDialogAct.getter)(v5);
  }
  uint64_t v10 = v8;
  unint64_t v11 = v9;
  *(void *)(v4 - 96) = 0LL;
  *(_OWORD *)(v4 - 12__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0u;
  *(_OWORD *)(v4 - 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0u;
  uint64_t v12 = outlined copy of Data._Representation(v8, v9);
  BinaryDecodingOptions.init()(v12);
  uint64_t v13 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct,  (uint64_t (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_UserDialogAct,  (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_UserDialogAct);
  Message.init(serializedData:extensions:partial:options:)(v10, v11, v4 - 128, 0LL, v1, v7, v13);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 208) + 32LL))(v2, v6, v7);
  uint64_t v15 = ((uint64_t (*)(uint64_t))Siri_Nlu_External_UserDialogAct.hasAccepted.getter)(v14);
  if ((v15 & 1) == 0)
  {
    uint64_t v26 = Siri_Nlu_External_UserDialogAct.hasRejected.getter(v15);
    if ((v26 & 1) != 0)
    {
      if (one-time initialization token for information != -1) {
        swift_once(&one-time initialization token for information, one-time initialization function for information);
      }
      uint64_t v27 = type metadata accessor for Logger(0LL);
      uint64_t v28 = __swift_project_value_buffer(v27, (uint64_t)static Logger.information);
      uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
      os_log_type_t v34 = static os_log_type_t.debug.getter(v29, v30, v31, v32, v33);
      if (!os_log_type_enabled(v29, v34)) {
        goto LABEL_25;
      }
      uint64_t v35 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v35 = 0;
      uint64_t v36 = "Received User Rejected From Pegasus";
    }

    else if ((Siri_Nlu_External_UserDialogAct.hasCancelled.getter(v26) & 1) != 0)
    {
      if (one-time initialization token for information != -1) {
        swift_once(&one-time initialization token for information, one-time initialization function for information);
      }
      uint64_t v37 = type metadata accessor for Logger(0LL);
      uint64_t v38 = __swift_project_value_buffer(v37, (uint64_t)static Logger.information);
      uint64_t v29 = (os_log_s *)Logger.logObject.getter(v38);
      os_log_type_t v34 = static os_log_type_t.debug.getter(v29, v39, v40, v41, v42);
      if (!os_log_type_enabled(v29, v34)) {
        goto LABEL_25;
      }
      uint64_t v35 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v35 = 0;
      uint64_t v36 = "Received User Cancelled From Pegasus";
    }

    else
    {
      if (one-time initialization token for information != -1) {
        swift_once(&one-time initialization token for information, one-time initialization function for information);
      }
      uint64_t v43 = type metadata accessor for Logger(0LL);
      uint64_t v44 = __swift_project_value_buffer(v43, (uint64_t)static Logger.information);
      uint64_t v29 = (os_log_s *)Logger.logObject.getter(v44);
      os_log_type_t v34 = static os_log_type_t.debug.getter(v29, v45, v46, v47, v48);
      if (!os_log_type_enabled(v29, v34)) {
        goto LABEL_25;
      }
      uint64_t v35 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v35 = 0;
      uint64_t v36 = "Received other unsupported UDA From Pegasus";
    }

    _os_log_impl(&dword_0, v29, v34, v36, v35, 2u);
    swift_slowDealloc(v35, -1LL, -1LL);
LABEL_25:

    uint64_t v25 = (unsigned int *)&enum case for ConfirmationResponse.rejected(_:);
    goto LABEL_26;
  }

  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = __swift_project_value_buffer(v16, (uint64_t)static Logger.information);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v23 = static os_log_type_t.debug.getter(v18, v19, v20, v21, v22);
  if (os_log_type_enabled(v18, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl(&dword_0, v18, v23, "Received User Accepted UDA From Pegasus", v24, 2u);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  uint64_t v25 = (unsigned int *)&enum case for ConfirmationResponse.confirmed(_:);
LABEL_26:
  uint64_t v49 = *v25;
  uint64_t v50 = type metadata accessor for ConfirmationResponse(0LL);
  uint64_t v51 = *(void *)(v50 - 8);
  uint64_t v52 = *(void *)(v4 - 168);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 104))(v52, v49, v50);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56))(v52, 0LL, 1LL, v50);
  ((void (*)(uint64_t))SimpleConfirmationResponseProvider.init(_:))(v52);
  outlined consume of Data._Representation(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 208) + 8LL))(v2, v7);
  return (*(uint64_t (**)(void, void))(*(void *)(v4 - 184) + 8LL))( *(void *)(v4 - 152),  *(void *)(v4 - 176));
}

uint64_t RFSimpleYesNoPromptFlowStrategy.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_baseManifest;
  uint64_t v2 = type metadata accessor for OutputGenerationManifest(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0
                                                      + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_responseGenerator));
  swift_release(*(void *)(v0
                          + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_rejectionOutputProducer
                          + 8));
  swift_release(*(void *)(v0
                          + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_cancellationOutputProducer
                          + 8));
  swift_release(*(void *)(v0
                          + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_promptPatternExecutionProducer
                          + 8));
  return v0;
}

uint64_t RFSimpleYesNoPromptFlowStrategy.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_baseManifest;
  uint64_t v2 = type metadata accessor for OutputGenerationManifest(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0
                                                      + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_responseGenerator));
  swift_release(*(void *)(v0
                          + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_rejectionOutputProducer
                          + 8));
  swift_release(*(void *)(v0
                          + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_cancellationOutputProducer
                          + 8));
  swift_release(*(void *)(v0
                          + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_promptPatternExecutionProducer
                          + 8));
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t protocol witness for YesNoPromptFlowStrategy.makePromptForYesNoResponse() in conformance RFSimpleYesNoPromptFlowStrategy( uint64_t a1)
{
  unint64_t v3 = (void *)swift_task_alloc(dword_A3A64);
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return RFSimpleYesNoPromptFlowStrategy.makePromptForYesNoResponse()(a1);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.actionForInput(_:) in conformance RFSimpleYesNoPromptFlowStrategy@<X0>( uint64_t a1@<X8>)
{
  return RFSimpleYesNoPromptFlowStrategy.actionForInput(_:)(a1);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance RFSimpleYesNoPromptFlowStrategy( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_A3A84);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return RFSimpleYesNoPromptFlowStrategy.parseConfirmationResponse(input:)(a1, a2);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makePromptForConfirmation(itemToConfirm:) in conformance RFSimpleYesNoPromptFlowStrategy( uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to YesNoPromptFlowStrategy.makePromptForConfirmation(itemToConfirm:)[1]);
  *(void *)(v2 + 16) = v5;
  uint64_t v6 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type RFSimpleYesNoPromptFlowStrategy and conformance RFSimpleYesNoPromptFlowStrategy,  type metadata accessor for RFSimpleYesNoPromptFlowStrategy,  (uint64_t)&protocol conformance descriptor for RFSimpleYesNoPromptFlowStrategy);
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return YesNoPromptFlowStrategy.makePromptForConfirmation(itemToConfirm:)(a1, v4, v6);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:) in conformance RFSimpleYesNoPromptFlowStrategy( uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to YesNoPromptFlowStrategy.makeRepromptOnEmptyParse(itemToConfirm:)[1]);
  *(void *)(v2 + 16) = v5;
  uint64_t v6 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type RFSimpleYesNoPromptFlowStrategy and conformance RFSimpleYesNoPromptFlowStrategy,  type metadata accessor for RFSimpleYesNoPromptFlowStrategy,  (uint64_t)&protocol conformance descriptor for RFSimpleYesNoPromptFlowStrategy);
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return YesNoPromptFlowStrategy.makeRepromptOnEmptyParse(itemToConfirm:)(a1, v4, v6);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:) in conformance RFSimpleYesNoPromptFlowStrategy( uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to YesNoPromptFlowStrategy.makeRepromptOnLowConfidence(itemToConfirm:)[1]);
  *(void *)(v2 + 16) = v5;
  uint64_t v6 = lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type RFSimpleYesNoPromptFlowStrategy and conformance RFSimpleYesNoPromptFlowStrategy,  type metadata accessor for RFSimpleYesNoPromptFlowStrategy,  (uint64_t)&protocol conformance descriptor for RFSimpleYesNoPromptFlowStrategy);
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return YesNoPromptFlowStrategy.makeRepromptOnLowConfidence(itemToConfirm:)(a1, v4, v6);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse() in conformance RFSimpleYesNoPromptFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PromptForConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse()[1]);
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return PromptForConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse()(a1, v7, a3);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeFlowCancelledResponse() in conformance RFSimpleYesNoPromptFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PromptForConfirmationFlowStrategyAsync.makeFlowCancelledResponse()[1]);
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return PromptForConfirmationFlowStrategyAsync.makeFlowCancelledResponse()(a1, v7, a3);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeErrorResponse(_:) in conformance RFSimpleYesNoPromptFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to PromptForConfirmationFlowStrategyAsync.makeErrorResponse(_:)[1]);
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return PromptForConfirmationFlowStrategyAsync.makeErrorResponse(_:)(a1, a2, v9, a4);
}

uint64_t specialized RFSimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v19 = (void *)(a9 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_responseGenerator);
  __int128 v19[3] = a10;
  uint64_t v19[4] = a11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32LL))( boxed_opaque_existential_1,  a2,  a10);
  uint64_t v21 = a9 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_baseManifest;
  uint64_t v22 = type metadata accessor for OutputGenerationManifest(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32LL))(v21, a1, v22);
  os_log_type_t v23 = (void *)(a9 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_rejectionOutputProducer);
  *os_log_type_t v23 = a3;
  v23[1] = a4;
  uint64_t v24 = (void *)(a9
                 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_cancellationOutputProducer);
  void *v24 = a5;
  v24[1] = a6;
  uint64_t v25 = (void *)(a9
                 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_promptPatternExecutionProducer);
  *uint64_t v25 = a7;
  v25[1] = a8;
  return a9;
}

uint64_t base witness table accessor for PromptForConfirmationFlowStrategyAsync in RFSimpleYesNoPromptFlowStrategy()
{
  return lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow( &lazy protocol witness table cache variable for type RFSimpleYesNoPromptFlowStrategy and conformance RFSimpleYesNoPromptFlowStrategy,  type metadata accessor for RFSimpleYesNoPromptFlowStrategy,  (uint64_t)&protocol conformance descriptor for RFSimpleYesNoPromptFlowStrategy);
}

uint64_t type metadata accessor for RFSimpleYesNoPromptFlowStrategy(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for RFSimpleYesNoPromptFlowStrategy;
  if (!type metadata singleton initialization cache for RFSimpleYesNoPromptFlowStrategy) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RFSimpleYesNoPromptFlowStrategy);
  }
  return result;
}

void *associated type witness table accessor for PromptForConfirmationFlowStrategyAsync.AnswerType : ConfirmationResponseProviding in RFSimpleYesNoPromptFlowStrategy()
{
  return &protocol witness table for SimpleConfirmationResponseProvider;
}

uint64_t ObjC metadata update function for RFSimpleYesNoPromptFlowStrategy()
{
  return type metadata accessor for RFSimpleYesNoPromptFlowStrategy(0LL);
}

uint64_t type metadata completion function for RFSimpleYesNoPromptFlowStrategy(uint64_t a1)
{
  uint64_t result = type metadata accessor for OutputGenerationManifest(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "(";
    void v4[2] = (char *)&value witness table for () + 64;
    void v4[3] = (char *)&value witness table for () + 64;
    void v4[4] = (char *)&value witness table for () + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t outlined destroy of NLContextUpdate?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *SuggestionConstants.serverSuggestionId.unsafeMutableAddressor()
{
  return &static SuggestionConstants.serverSuggestionId;
}

uint64_t *SuggestionConstants.mathSuggestionIntents.unsafeMutableAddressor()
{
  if (one-time initialization token for mathSuggestionIntents != -1) {
    swift_once( &one-time initialization token for mathSuggestionIntents,  one-time initialization function for mathSuggestionIntents);
  }
  return &static SuggestionConstants.mathSuggestionIntents;
}

void *SuggestionConstants.serverSuggestionIdMath.unsafeMutableAddressor()
{
  return &static SuggestionConstants.serverSuggestionIdMath;
}

const char *SuggestionConstants.serverIntentName.unsafeMutableAddressor()
{
  return "intentName";
}

uint64_t *SuggestionConstants.kOwnerInformation.unsafeMutableAddressor()
{
  if (one-time initialization token for kOwnerInformation != -1) {
    swift_once( &one-time initialization token for kOwnerInformation,  one-time initialization function for kOwnerInformation);
  }
  return &static SuggestionConstants.kOwnerInformation;
}

void *SuggestionConstants.alternateQueryPayloadKey.unsafeMutableAddressor()
{
  return &static SuggestionConstants.alternateQueryPayloadKey;
}

void *SuggestionConstants.relatedQuestionsPayloadKey.unsafeMutableAddressor()
{
  return &static SuggestionConstants.relatedQuestionsPayloadKey;
}

void *SuggestionConstants.serverPayloadKey.unsafeMutableAddressor()
{
  return &static SuggestionConstants.serverPayloadKey;
}

uint64_t *SuggestionConstants.kOwnerMaps.unsafeMutableAddressor()
{
  if (one-time initialization token for kOwnerMaps != -1) {
    swift_once(&one-time initialization token for kOwnerMaps, one-time initialization function for kOwnerMaps);
  }
  return &static SuggestionConstants.kOwnerMaps;
}

unint64_t static SuggestionConstants.serverPayloadKey.getter()
{
  return 0xD000000000000017LL;
}

unint64_t static SuggestionConstants.alternateQueryPayloadKey.getter()
{
  return 0xD000000000000015LL;
}

void *SuggestionConstants.alternateSuggestionId.unsafeMutableAddressor()
{
  return &static SuggestionConstants.alternateSuggestionId;
}

unint64_t static SuggestionConstants.alternateSuggestionId.getter()
{
  return 0xD000000000000013LL;
}

unint64_t static SuggestionConstants.relatedQuestionsPayloadKey.getter()
{
  return 0xD000000000000017LL;
}

void *SuggestionConstants.relatedQuestionsSuggestionId.unsafeMutableAddressor()
{
  return &static SuggestionConstants.relatedQuestionsSuggestionId;
}

unint64_t static SuggestionConstants.relatedQuestionsSuggestionId.getter()
{
  return 0xD000000000000010LL;
}

unint64_t static SuggestionConstants.serverSuggestionId.getter()
{
  return 0xD000000000000014LL;
}

unint64_t static SuggestionConstants.serverSuggestionIdMath.getter()
{
  return 0xD000000000000018LL;
}

uint64_t static SuggestionConstants.serverIntentName.getter()
{
  return 0x614E746E65746E69LL;
}

void *SuggestionConstants.serverExampleUtterance.unsafeMutableAddressor()
{
  return &static SuggestionConstants.serverExampleUtterance;
}

unint64_t static SuggestionConstants.serverExampleUtterance.getter()
{
  return 0xD000000000000010LL;
}

uint64_t one-time initialization function for kOwnerInformation(uint64_t a1)
{
  return one-time initialization function for kOwnerInformation( a1,  0x74616D726F666E49LL,  0xEB000000006E6F69LL,  &static SuggestionConstants.kOwnerInformation);
}

uint64_t static SuggestionConstants.kOwnerInformation.getter()
{
  return static SuggestionConstants.kOwnerInformation.getter( &one-time initialization token for kOwnerInformation,  &static SuggestionConstants.kOwnerInformation);
}

uint64_t one-time initialization function for kOwnerMaps(uint64_t a1)
{
  return one-time initialization function for kOwnerInformation( a1,  0x6F654769726953LL,  0xE700000000000000LL,  &static SuggestionConstants.kOwnerMaps);
}

uint64_t one-time initialization function for kOwnerInformation( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = type metadata accessor for DomainOwner(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t result = DomainOwner.init(_:)(a2, a3);
  *a4 = result;
  return result;
}

uint64_t static SuggestionConstants.kOwnerMaps.getter()
{
  return static SuggestionConstants.kOwnerInformation.getter( &one-time initialization token for kOwnerMaps,  &static SuggestionConstants.kOwnerMaps);
}

uint64_t static SuggestionConstants.kOwnerInformation.getter(void *a1, void *a2)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  return swift_retain(*a2);
}

uint64_t one-time initialization function for mathSuggestionIntents()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_SuggestionIntent>);
  uint64_t v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SuggestionIntent(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = swift_allocObject(v0, v5 + 6 * v3, v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_7ED60;
  uint64_t v7 = v6 + v5;
  uint64_t v8 = *(void (**)(uint64_t, void, uint64_t))(v2 + 104);
  v8(v7, enum case for Apple_Parsec_Siri_V2alpha_SuggestionIntent.mathResult(_:), v1);
  v8(v7 + v3, enum case for Apple_Parsec_Siri_V2alpha_SuggestionIntent.mathDecimalToFraction(_:), v1);
  v8(v7 + 2 * v3, enum case for Apple_Parsec_Siri_V2alpha_SuggestionIntent.mathTipCalculation(_:), v1);
  v8(v7 + 3 * v3, enum case for Apple_Parsec_Siri_V2alpha_SuggestionIntent.mathPythagoreanTheorem(_:), v1);
  v8(v7 + 4 * v3, enum case for Apple_Parsec_Siri_V2alpha_SuggestionIntent.mathArithmetic(_:), v1);
  uint64_t result = ((uint64_t (*)(uint64_t, void, uint64_t))v8)( v7 + 5 * v3,  enum case for Apple_Parsec_Siri_V2alpha_SuggestionIntent.kgSimpleMathConcept(_:),  v1);
  static SuggestionConstants.mathSuggestionIntents = v6;
  return result;
}

uint64_t static SuggestionConstants.mathSuggestionIntents.getter()
{
  return static SuggestionConstants.mathSuggestionIntents.getter( &one-time initialization token for mathSuggestionIntents,  &static SuggestionConstants.mathSuggestionIntents);
}

uint64_t one-time initialization function for t41Locales()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Locale>);
  uint64_t v1 = *(void *)(type metadata accessor for Locale(0LL) - 8);
  uint64_t v2 = swift_allocObject( v0,  ((*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
       + 41LL * *(void *)(v1 + 72),
         *(unsigned __int8 *)(v1 + 80) | 7LL);
  *(_OWORD *)(v2 + 16) = xmmword_7ED70;
  Locale.init(identifier:)(0x53552D6E65LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x4E432D687ALL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x42472D6E65LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x55412D6E65LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x41432D6E65LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x4E492D6E65LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x45442D6564LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x504A2D616ALL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x52462D7266LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x584D2D7365LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x53452D7365LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x53552D7365LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x4B482D687ALL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x57542D687ALL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x4E432D657579LL, 0xE600000000000000LL);
  Locale.init(identifier:)(0x524B2D6F6BLL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x55522D7572LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x54492D7469LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x52542D7274LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x41532D7261LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x47532D6E65LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x41432D7266LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x54412D6564LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x45492D6E65LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x5A4E2D6E65LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x45422D7266LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x45422D6C6ELL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x48432D6564LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x48432D7266LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x48432D7469LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x4C4E2D6C6ELL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x45532D7673LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x4F4E2D626ELL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x4B442D6164LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x49462D6966LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x4C492D6568LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x52422D7470LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x48542D6874LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x415A2D6E65LL, 0xE500000000000000LL);
  Locale.init(identifier:)(0x4C432D7365LL, 0xE500000000000000LL);
  uint64_t result = Locale.init(identifier:)(0x594D2D736DLL, 0xE500000000000000LL);
  static SuggestionConstants.t41Locales = v2;
  return result;
}

uint64_t *SuggestionConstants.t41Locales.unsafeMutableAddressor()
{
  if (one-time initialization token for t41Locales != -1) {
    swift_once(&one-time initialization token for t41Locales, one-time initialization function for t41Locales);
  }
  return &static SuggestionConstants.t41Locales;
}

uint64_t static SuggestionConstants.t41Locales.getter()
{
  return static SuggestionConstants.mathSuggestionIntents.getter( &one-time initialization token for t41Locales,  &static SuggestionConstants.t41Locales);
}

uint64_t static SuggestionConstants.mathSuggestionIntents.getter(void *a1, void *a2)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  return swift_bridgeObjectRetain(*a2);
}

ValueMetadata *type metadata accessor for SuggestionConstants()
{
  return &type metadata for SuggestionConstants;
}

uint64_t ExperienceSelector.selectPegasusExperience(pegasusResult:)@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse(0LL);
  uint64_t v48 = *(void *)(v2 - 8);
  uint64_t v49 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)static Logger.information);
  unint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v16 = static os_log_type_t.debug.getter(v11, v12, v13, v14, v15);
  if (os_log_type_enabled(v11, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_0, v11, v16, "ExperienceSelector will select a PegasusExperience.", v17, 2u);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  uint64_t v18 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v19 = static PerformanceUtil.shared.getter(v18);
  uint64_t v20 = __chkstk_darwin(v19);
  Date.init()(v20);
  uint64_t v44 = &v43;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PegasusComponents?);
  LOBYTE(v4__swift_destroy_boxed_opaque_existential_1(v0 + 3) = 2;
  ((void (*)(void **__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t *@<X8>)))dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:))( &v50,  0xD000000000000027LL,  0x8000000000082E30LL,  0LL,  v8,  "InformationFlowPlugin/ExperienceSelector.swift",  46LL,  2LL,  52LL,  "selectPegasusExperience(pegasusResult:)",  39LL,  v43,  partial apply for closure #1 in ExperienceSelector.selectPegasusExperience(pegasusResult:));
  swift_release(v19);
  uint64_t v21 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v22 = v50;
  if (v50)
  {
    Parse.PegasusResult.response.getter(v21);
    uint64_t v47 = specialized static PegasusComponentsParser.parsePegasusRenderOptions(response:)();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v4, v49);
    os_log_type_t v23 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent], [Apple_Parsec_Siri_V2alpha_RenderedDialogComponent], [Apple_Parsec_Siri_V2alpha_ButtonViewComponent], [Apple_Parsec_Siri_V2alpha_DelayedActionComponent], Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?, [Apple_Parsec_Siri_V2alpha_SayItComponent], [Apple_Parsec_Siri_V2alpha_DisambiguationListComponent], [Apple_Parsec_Siri_V2alpha_DomainObjectComponent], PommesRenderOptions?));
    uint64_t v24 = (char *)a1 + v23[24];
    uint64_t v25 = v22[3];
    *a1 = v25;
    uint64_t v26 = v22[2];
    a1[1] = v26;
    uint64_t v48 = v22[5];
    a1[2] = v48;
    uint64_t v49 = v22[7];
    a1[3] = v49;
    uint64_t v27 = v22[6];
    uint64_t v28 = *(void *)(v27 + 16);
    uint64_t v29 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent(0LL);
    uint64_t v30 = *(void *)(v29 - 8);
    if (v28)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v30 + 16))( v24,  v27 + ((*(unsigned __int8 *)(v30 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80)),  v29);
      uint64_t v31 = 0LL;
    }

    else
    {
      uint64_t v31 = 1LL;
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56))(v24, v31, 1LL, v29);
    uint64_t v35 = v23[28];
    uint64_t v36 = v23[32];
    uint64_t v37 = v23[36];
    uint64_t v38 = v23[40];
    uint64_t v39 = v22[8];
    *(void *)((char *)a1 + v35) = v39;
    uint64_t v40 = v22[9];
    *(void *)((char *)a1 + v36) = v40;
    uint64_t v41 = v22[10];
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v48);
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v41);
    swift_release(v22);
    *(void *)((char *)a1 + v3__swift_destroy_boxed_opaque_existential_1(v0 + 7) = v41;
    *(void *)((char *)a1 + v3__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v47;
    uint64_t v32 = type metadata accessor for PegasusExperience(0LL);
    uint64_t v33 = a1;
    uint64_t v34 = 0LL;
  }

  else
  {
    uint64_t v32 = type metadata accessor for PegasusExperience(0LL);
    uint64_t v33 = a1;
    uint64_t v34 = 3LL;
  }

  return swift_storeEnumTagMultiPayload(v33, v32, v34);
}

uint64_t ExperienceSelector.selectPommesExperience(pommesResponse:)@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse.DirectInvocation?);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = dispatch thunk of PommesResponse.experiences.getter(v11);
  uint64_t v15 = v14;
  if ((unint64_t)v14 >> 62)
  {
    if (v14 >= 0) {
      v14 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    if (_CocoaArrayWrapper.endIndex.getter(v14)) {
      goto LABEL_3;
    }
  }

  else if (*(void *)((char *)&dword_10 + (v14 & 0xFFFFFFFFFFFFF8LL)))
  {
LABEL_3:
    if ((v15 & 0xC000000000000001LL) != 0)
    {
      id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v15);
LABEL_6:
      uint64_t v17 = v16;
      swift_bridgeObjectRelease(v15);
      uint64_t v18 = type metadata accessor for PhoneCallExperience(0LL);
      if (swift_dynamicCastClass(v17, v18))
      {
        uint64_t v86 = a1;
        id v19 = v17;
        PhoneCallExperience.makeDirectInvocation()((uint64_t)v8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) != 1)
        {
          uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
          v36(v13, v8, v9);
          if (one-time initialization token for information != -1) {
            swift_once(&one-time initialization token for information, one-time initialization function for information);
          }
          uint64_t v37 = type metadata accessor for Logger(0LL);
          uint64_t v38 = __swift_project_value_buffer(v37, (uint64_t)static Logger.information);
          uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
          os_log_type_t v44 = static os_log_type_t.debug.getter(v39, v40, v41, v42, v43);
          if (os_log_type_enabled(v39, v44))
          {
            uint64_t v45 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v45 = 0;
            _os_log_impl( &dword_0,  v39,  v44,  "Found phone call experience. Continuing with phone call direct invocation.",  v45,  2u);
            swift_slowDealloc(v45, -1LL, -1LL);
          }

          uint64_t v46 = v86;
          v36((char *)v86, v13, v9);
          uint64_t v47 = type metadata accessor for PegasusExperience(0LL);
          uint64_t v48 = v46;
          uint64_t v49 = 2LL;
          return swift_storeEnumTagMultiPayload(v48, v47, v49);
        }

        outlined destroy of Parse.DirectInvocation?((uint64_t)v8);
        a1 = v86;
      }

      uint64_t v20 = type metadata accessor for GenericExperience(0LL);
      if (swift_dynamicCastClass(v17, v20))
      {
        type metadata accessor for PerformanceUtil(0LL);
        id v21 = v17;
        uint64_t v22 = static PerformanceUtil.shared.getter(v21);
        uint64_t v23 = __chkstk_darwin(v22);
        Date.init()(v23);
        uint64_t v79 = &v78;
        uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PegasusComponents?);
        LOBYTE(v7__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 2;
        ((void (*)(void **__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t *@<X8>)))dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:))( &v87,  0xD000000000000036LL,  0x8000000000082EC0LL,  0LL,  v5,  "InformationFlowPlugin/ExperienceSelector.swift",  46LL,  2LL,  103LL,  "selectPommesExperience(pommesResponse:)",  39LL,  v78,  partial apply for closure #1 in ExperienceSelector.selectPommesExperience(pommesResponse:));
        swift_release(v22);
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        uint64_t v24 = v87;
        if (v87)
        {
          id v84 = v21;
          uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent], [Apple_Parsec_Siri_V2alpha_RenderedDialogComponent], [Apple_Parsec_Siri_V2alpha_ButtonViewComponent], [Apple_Parsec_Siri_V2alpha_DelayedActionComponent], Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?, [Apple_Parsec_Siri_V2alpha_SayItComponent], [Apple_Parsec_Siri_V2alpha_DisambiguationListComponent], [Apple_Parsec_Siri_V2alpha_DomainObjectComponent], PommesRenderOptions?));
          uint64_t v26 = a1;
          uint64_t v27 = (int *)v25;
          uint64_t v28 = (char *)v26 + *(int *)(v25 + 96);
          uint64_t v29 = v24[3];
          void *v26 = v29;
          uint64_t v30 = v24[2];
          v26[1] = v30;
          uint64_t v83 = v24[5];
          void v26[2] = v83;
          uint64_t v85 = v24[7];
          uint64_t v86 = v26;
          v26[3] = v85;
          uint64_t v31 = v24[6];
          uint64_t v32 = *(void *)(v31 + 16);
          uint64_t v33 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent(0LL);
          uint64_t v34 = *(void *)(v33 - 8);
          if (v32)
          {
            (*(void (**)(char *, unint64_t, uint64_t))(v34 + 16))( v28,  v31 + ((*(unsigned __int8 *)(v34 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80)),  v33);
            uint64_t v35 = 0LL;
          }

          else
          {
            uint64_t v35 = 1LL;
          }

          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56))(v28, v35, 1LL, v33);
          uint64_t v61 = v27[28];
          uint64_t v62 = v27[32];
          uint64_t v63 = v27[36];
          uint64_t v82 = v27[40];
          uint64_t v64 = v24[8];
          uint64_t v65 = v86;
          *(void *)((char *)v86 + v61) = v64;
          uint64_t v66 = v24[9];
          *(void *)((char *)v65 + v6__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v66;
          uint64_t v67 = v24[10];
          *(void *)((char *)v65 + v6__swift_destroy_boxed_opaque_existential_1(v0 + 3) = v67;
          id v68 = v84;
          swift_bridgeObjectRetain(v29);
          swift_bridgeObjectRetain(v30);
          swift_bridgeObjectRetain(v83);
          swift_bridgeObjectRetain(v85);
          swift_bridgeObjectRetain(v64);
          swift_bridgeObjectRetain(v66);
          uint64_t v69 = swift_bridgeObjectRetain(v67);
          uint64_t v70 = dispatch thunk of Experience.renderOptions.getter(v69);
          swift_release(v24);

          *(void *)((char *)v65 + v8__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v70;
          uint64_t v47 = type metadata accessor for PegasusExperience(0LL);
          uint64_t v48 = v65;
          uint64_t v49 = 0LL;
          return swift_storeEnumTagMultiPayload(v48, v47, v49);
        }

        if (one-time initialization token for information != -1) {
          swift_once(&one-time initialization token for information, one-time initialization function for information);
        }
        uint64_t v56 = type metadata accessor for Logger(0LL);
        uint64_t v57 = __swift_project_value_buffer(v56, (uint64_t)static Logger.information);
        uint64_t v52 = (os_log_s *)Logger.logObject.getter(v57);
        os_log_type_t v58 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v52, v58))
        {
          uint64_t v59 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v59 = 0;
          _os_log_impl(&dword_0, v52, v58, "ExperienceSelector no valid pegasus experience.", v59, 2u);
          swift_slowDealloc(v59, -1LL, -1LL);
          uint64_t v60 = (os_log_s *)v21;
        }

        else
        {
          uint64_t v60 = v52;
          uint64_t v52 = (os_log_s *)v21;
        }
      }

      else
      {
        if (one-time initialization token for information != -1) {
          swift_once(&one-time initialization token for information, one-time initialization function for information);
        }
        uint64_t v50 = type metadata accessor for Logger(0LL);
        uint64_t v51 = __swift_project_value_buffer(v50, (uint64_t)static Logger.information);
        uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
        os_log_type_t v53 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v52, v53))
        {
          uint64_t v54 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v54 = 0;
          _os_log_impl(&dword_0, v52, v53, "ExperienceSelector top experience not generic.", v54, 2u);
          swift_slowDealloc(v54, -1LL, -1LL);
          id v55 = (os_log_s *)v17;
        }

        else
        {
          id v55 = v52;
          uint64_t v52 = (os_log_s *)v17;
        }
      }

      uint64_t v47 = type metadata accessor for PegasusExperience(0LL);
      uint64_t v48 = a1;
      uint64_t v49 = 3LL;
      return swift_storeEnumTagMultiPayload(v48, v47, v49);
    }

    if (*(void *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFF8LL)))
    {
      id v16 = *(id *)(v15 + 32);
      goto LABEL_6;
    }

    __break(1u);
    goto LABEL_43;
  }

  swift_bridgeObjectRelease(v15);
  if (one-time initialization token for information != -1) {
LABEL_43:
  }
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  uint64_t v72 = type metadata accessor for Logger(0LL);
  uint64_t v73 = __swift_project_value_buffer(v72, (uint64_t)static Logger.information);
  uint64_t v74 = (os_log_s *)Logger.logObject.getter(v73);
  os_log_type_t v75 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v74, v75))
  {
    uint64_t v76 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v76 = 0;
    _os_log_impl(&dword_0, v74, v75, "ExperienceSelector found no experiences.", v76, 2u);
    swift_slowDealloc(v76, -1LL, -1LL);
  }

  uint64_t v77 = type metadata accessor for PegasusExperience(0LL);
  return swift_storeEnumTagMultiPayload(a1, v77, 3LL);
}

uint64_t PhoneCallExperience.makeDirectInvocation()@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = PhoneCallExperience.makeDirectInvocationPayload()();
  if (v2)
  {
    Parse.DirectInvocation.init(identifier:userData:)(0xD000000000000034LL, 0x8000000000082DF0LL, v2);
    uint64_t v3 = type metadata accessor for Parse.DirectInvocation(0LL);
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL);
    uint64_t v5 = a1;
    uint64_t v6 = 0LL;
  }

  else
  {
    if (one-time initialization token for information != -1) {
      swift_once(&one-time initialization token for information, one-time initialization function for information);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    uint64_t v8 = __swift_project_value_buffer(v7, (uint64_t)static Logger.information);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_0, v9, v10, "Unable to make direct invocation payload", v11, 2u);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    uint64_t v3 = type metadata accessor for Parse.DirectInvocation(0LL);
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL);
    uint64_t v5 = a1;
    uint64_t v6 = 1LL;
  }

  return v4(v5, v6, 1LL, v3);
}

uint64_t ExperienceSelector.selectPegasusComponents(pegasusResult:)()
{
  uint64_t v42 = type metadata accessor for Date(0LL);
  uint64_t v0 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  unint64_t v2 = (char *)&v42 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)static Logger.information);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v10 = static os_log_type_t.debug.getter(v5, v6, v7, v8, v9);
  if (os_log_type_enabled(v5, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_0, v5, v10, "ExperienceSelector will select PegasusComponents.", v11, 2u);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  uint64_t v12 = type metadata accessor for PerformanceUtil(0LL);
  uint64_t v13 = static PerformanceUtil.shared.getter(v12);
  uint64_t v14 = __chkstk_darwin(v13);
  Date.init()(v14);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PegasusComponents?);
  uint64_t v40 = &v39;
  uint64_t v41 = v15;
  LOBYTE(v39) = 2;
  ((void (*)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t *@<X8>)))dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:))( &v44,  0xD00000000000003ELL,  0x8000000000082F30LL,  0LL,  v2,  "InformationFlowPlugin/ExperienceSelector.swift",  46LL,  2LL,  132LL,  "selectPegasusComponents(pegasusResult:)",  39LL,  v39,  partial apply for closure #1 in ExperienceSelector.selectPegasusComponents(pegasusResult:));
  swift_release(v13);
  id v16 = *(uint64_t (**)(char *, uint64_t))(v0 + 8);
  uint64_t v17 = v42;
  uint64_t v18 = v16(v2, v42);
  uint64_t v19 = v44;
  if (v44)
  {
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v25 = static os_log_type_t.debug.getter(v20, v21, v22, v23, v24);
    if (os_log_type_enabled(v20, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v26 = 0;
      uint64_t v27 = "ExperienceSelector: found primary experience.";
LABEL_11:
      _os_log_impl(&dword_0, v20, v25, v27, v26, 2u);
LABEL_12:
      swift_slowDealloc(v26, -1LL, -1LL);
    }
  }

  else
  {
    uint64_t v28 = v17;
    uint64_t v29 = static PerformanceUtil.shared.getter(v18);
    uint64_t v30 = __chkstk_darwin(v29);
    Date.init()(v30);
    uint64_t v40 = &v39;
    uint64_t v41 = v15;
    LOBYTE(v39) = 2;
    ((void (*)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t *@<X8>)))dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:))( &v43,  0xD00000000000003DLL,  0x8000000000082F70LL,  0LL,  v2,  "InformationFlowPlugin/ExperienceSelector.swift",  46LL,  2LL,  139LL,  "selectPegasusComponents(pegasusResult:)",  39LL,  v39,  partial apply for closure #2 in ExperienceSelector.selectPegasusComponents(pegasusResult:));
    swift_release(v29);
    uint64_t v31 = v16(v2, v28);
    uint64_t v19 = v43;
    uint64_t v32 = Logger.logObject.getter(v31);
    uint64_t v20 = (os_log_s *)v32;
    if (!v19)
    {
      os_log_type_t v38 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v20, v38))
      {
        uint64_t v19 = 0LL;
        goto LABEL_13;
      }

      uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_0, v20, v38, "ExperienceSelector did not find a valid PegasusComponents.", v26, 2u);
      uint64_t v19 = 0LL;
      goto LABEL_12;
    }

    os_log_type_t v25 = static os_log_type_t.debug.getter(v32, v33, v34, v35, v36);
    if (os_log_type_enabled(v20, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v26 = 0;
      uint64_t v27 = "ExperienceSelector: found legacy experience.";
      goto LABEL_11;
    }
  }

uint64_t partial apply for closure #1 in ExperienceSelector.selectPegasusExperience(pegasusResult:)@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 16) + 96LL))(*(void *)(v1 + 24));
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for PegasusExperience(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for PegasusExperience;
  if (!type metadata singleton initialization cache for PegasusExperience) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PegasusExperience);
  }
  return result;
}

void *PhoneCallExperience.directInvocationIdentifier.unsafeMutableAddressor()
{
  return &static PhoneCallExperience.directInvocationIdentifier;
}

unint64_t static PhoneCallExperience.directInvocationIdentifier.getter()
{
  return 0xD000000000000034LL;
}

unint64_t PhoneCallExperience.makeDirectInvocationPayload()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  __chkstk_darwin(v0);
  unint64_t v2 = (char *)&v77 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  os_log_type_t v10 = (char *)&v77 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v77 - v11;
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v78 = __swift_project_value_buffer(v13, (uint64_t)static Logger.information);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v78);
  os_log_type_t v19 = static os_log_type_t.debug.getter(v14, v15, v16, v17, v18);
  if (os_log_type_enabled(v14, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl(&dword_0, v14, v19, "Creating INStartCallIntent", v20, 2u);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  uint64_t v21 = ((uint64_t (*)(void))PhoneCallExperience.phoneCall.getter)();
  uint64_t v22 = Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams.phoneNumber.getter(v21);
  unint64_t v24 = v23;
  os_log_type_t v25 = *(void (**)(char *, uint64_t))(v4 + 8);
  v25(v12, v3);
  uint64_t v26 = swift_bridgeObjectRelease(v24);
  uint64_t v27 = HIBYTE(v24) & 0xF;
  if ((v24 & 0x2000000000000000LL) == 0) {
    uint64_t v27 = v22 & 0xFFFFFFFFFFFFLL;
  }
  if (v27)
  {
    uint64_t v28 = PhoneCallExperience.phoneCall.getter(v26);
    Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams.phoneNumber.getter(v28);
    uint64_t v30 = v29;
    v25(v10, v3);
    id v31 = objc_allocWithZone(&OBJC_CLASS___INPersonHandle);
    NSString v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v30);
    id v33 = [v31 initWithValue:v32 type:2];
  }

  else
  {
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v39 = static os_log_type_t.debug.getter(v34, v35, v36, v37, v38);
    if (os_log_type_enabled(v34, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl(&dword_0, v34, v39, "Phone number unknown", v40, 2u);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    id v41 = objc_allocWithZone(&OBJC_CLASS___INPersonHandle);
    NSString v32 = String._bridgeToObjectiveC()();
    id v33 = [v41 initWithValue:v32 type:0];
  }

  uint64_t v42 = v33;

  uint64_t v43 = type metadata accessor for PersonNameComponents(0LL);
  uint64_t v44 = *(void *)(v43 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56))(v2, 1LL, 1LL, v43);
  id v45 = v42;
  uint64_t v46 = PhoneCallExperience.phoneCall.getter(v45);
  Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams.name.getter(v46);
  uint64_t v48 = v47;
  v25(v7, v3);
  Class isa = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v2, 1LL, v43) != 1)
  {
    Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v2, v43);
  }

  id v50 = objc_allocWithZone(&OBJC_CLASS___INPerson);
  NSString v51 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v48);
  id v52 = [v50 initWithPersonHandle:v45 nameComponents:isa displayName:v51 image:0 contactIdentifier:0 customIdentifier:0];

  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v54 = swift_allocObject(v53, 40LL, 7LL);
  *(_OWORD *)(v54 + 16) = xmmword_7D060;
  *(void *)(v54 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v52;
  uint64_t v80 = v54;
  specialized Array._endMutation()(v54);
  uint64_t v55 = v80;
  id v56 = objc_allocWithZone(&OBJC_CLASS___INStartCallIntent);
  type metadata accessor for INPerson();
  id v57 = v52;
  Class v58 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v55);
  id v59 = [v56 initWithCallRecordFilter:0 callRecordToCallBack:0 audioRoute:0 destinationType:1 preferredCallProvider:1 contacts:v58 ttyTyp e:0 callCapability:1];

  id v60 = [v59 backingStore];
  id v61 = [v60 data];

  if (v61)
  {
    uint64_t v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v61);
    unint64_t v65 = v64;

    uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject(v66, v79);
    *(_OWORD *)(inited + 16) = xmmword_7D1C0;
    *(void *)(inited + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0x6449707061LL;
    *(void *)(inited + 40) = 0xE500000000000000LL;
    *(void *)(inited + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0xD000000000000015LL;
    *(void *)(inited + 56) = 0x8000000000082FE0LL;
    *(void *)(inited + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = &type metadata for String;
    strcpy((char *)(inited + 80), "intentTypeName");
    *(_BYTE *)(inited + 95) = -18;
    id v68 = [v59 typeName];
    uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
    uint64_t v71 = v70;

    *(void *)(inited + 96) = v69;
    *(void *)(inited + 104) = v71;
    *(void *)(inited + 120) = &type metadata for String;
    *(void *)(inited + 12__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0x6144746E65746E69LL;
    *(void *)(inited + 16__swift_destroy_boxed_opaque_existential_1(v0 + 8) = &type metadata for Data;
    *(void *)(inited + 136) = 0xEA00000000006174LL;
    *(void *)(inited + 144) = v63;
    *(void *)(inited + 15__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v65;
    outlined copy of Data._Representation(v63, v65);
    unint64_t v72 = specialized Dictionary.init(dictionaryLiteral:)(inited);

    outlined consume of Data._Representation(v63, v65);
  }

  else
  {
    uint64_t v73 = (os_log_s *)Logger.logObject.getter(v62);
    os_log_type_t v74 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v73, v74))
    {
      os_log_type_t v75 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v75 = 0;
      _os_log_impl(&dword_0, v73, v74, "Unable to serialize INStartCallIntent", v75, 2u);
      swift_slowDealloc(v75, -1LL, -1LL);
    }

    else
    {
    }

    return 0LL;
  }

  return v72;
}

uint64_t partial apply for closure #1 in ExperienceSelector.selectPommesExperience(pommesResponse:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = GenericExperience.components.getter(a1);
  uint64_t v4 = specialized static PegasusComponentsParser.collateComponents(components:)(v3);
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t outlined destroy of Parse.DirectInvocation?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse.DirectInvocation?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in ExperienceSelector.selectPegasusComponents(pegasusResult:)@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = specialized static PegasusComponentsParser.parsePrimaryComponents(pegasusResult:)();
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #2 in ExperienceSelector.selectPegasusComponents(pegasusResult:)@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = specialized static PegasusComponentsParser.parseLegacyComponents(pegasusResult:)();
  *a1 = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PegasusExperience(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v20);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v22 = type metadata accessor for Parse.DirectInvocation(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v22 - 8) + 16LL))(a1, a2, v22);
      swift_storeEnumTagMultiPayload(a1, a3, 2LL);
    }

    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v23 = type metadata accessor for Apple_Parsec_Responseframework_PatternModel(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v23 - 8) + 16LL))(a1, a2, v23);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }

    else
    {
      uint64_t v9 = *a2;
      uint64_t v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      uint64_t v11 = a2[2];
      uint64_t v12 = a2[3];
      a1[2] = v11;
      a1[3] = v12;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v12);
      uint64_t v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent], [Apple_Parsec_Siri_V2alpha_RenderedDialogComponent], [Apple_Parsec_Siri_V2alpha_ButtonViewComponent], [Apple_Parsec_Siri_V2alpha_DelayedActionComponent], Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?, [Apple_Parsec_Siri_V2alpha_SayItComponent], [Apple_Parsec_Siri_V2alpha_DisambiguationListComponent], [Apple_Parsec_Siri_V2alpha_DomainObjectComponent], PommesRenderOptions?));
      uint64_t v14 = v13[24];
      uint64_t v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      uint64_t v17 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent(0LL);
      uint64_t v18 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
      {
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
        memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
      }

      uint64_t v24 = v13[28];
      uint64_t v25 = *(uint64_t *)((char *)a2 + v24);
      *(uint64_t *)((char *)a1 + v24) = v25;
      uint64_t v26 = v13[32];
      uint64_t v27 = *(uint64_t *)((char *)a2 + v26);
      *(uint64_t *)((char *)a1 + v26) = v27;
      uint64_t v28 = v13[36];
      uint64_t v29 = *(uint64_t *)((char *)a2 + v28);
      *(uint64_t *)((char *)a1 + v2__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v29;
      uint64_t v30 = v13[40];
      id v31 = *(void **)((char *)a2 + v30);
      *(uint64_t *)((char *)a1 + v30) = (uint64_t)v31;
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRetain(v29);
      id v32 = v31;
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

void destroy for PegasusExperience(void *a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v8 = type metadata accessor for Parse.DirectInvocation(0LL);
LABEL_9:
      (*(void (**)(void *, uint64_t))(*(void *)(v8 - 8) + 8LL))(a1, v8);
      return;
    case 1:
      uint64_t v8 = type metadata accessor for Apple_Parsec_Responseframework_PatternModel(0LL);
      goto LABEL_9;
    case 0:
      swift_bridgeObjectRelease(*a1);
      swift_bridgeObjectRelease(a1[1]);
      swift_bridgeObjectRelease(a1[2]);
      swift_bridgeObjectRelease(a1[3]);
      uint64_t v4 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent], [Apple_Parsec_Siri_V2alpha_RenderedDialogComponent], [Apple_Parsec_Siri_V2alpha_ButtonViewComponent], [Apple_Parsec_Siri_V2alpha_DelayedActionComponent], Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?, [Apple_Parsec_Siri_V2alpha_SayItComponent], [Apple_Parsec_Siri_V2alpha_DisambiguationListComponent], [Apple_Parsec_Siri_V2alpha_DomainObjectComponent], PommesRenderOptions?));
      uint64_t v5 = (char *)a1 + v4[24];
      uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent(0LL);
      uint64_t v7 = *(void *)(v6 - 8);
      swift_bridgeObjectRelease(*(void *)((char *)a1 + v4[28]));
      swift_bridgeObjectRelease(*(void *)((char *)a1 + v4[32]));
      swift_bridgeObjectRelease(*(void *)((char *)a1 + v4[36]));

      break;
  }

uint64_t *initializeWithCopy for PegasusExperience(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v18 = type metadata accessor for Parse.DirectInvocation(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v18 - 8) + 16LL))(a1, a2, v18);
      uint64_t v19 = a1;
      uint64_t v20 = a3;
      uint64_t v21 = 2LL;
LABEL_11:
      swift_storeEnumTagMultiPayload(v19, v20, v21);
      return a1;
    case 1:
      uint64_t v22 = type metadata accessor for Apple_Parsec_Responseframework_PatternModel(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v22 - 8) + 16LL))(a1, a2, v22);
      uint64_t v19 = a1;
      uint64_t v20 = a3;
      uint64_t v21 = 1LL;
      goto LABEL_11;
    case 0:
      uint64_t v7 = *a2;
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      uint64_t v9 = a2[2];
      uint64_t v10 = a2[3];
      a1[2] = v9;
      a1[3] = v10;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v10);
      uint64_t v11 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent], [Apple_Parsec_Siri_V2alpha_RenderedDialogComponent], [Apple_Parsec_Siri_V2alpha_ButtonViewComponent], [Apple_Parsec_Siri_V2alpha_DelayedActionComponent], Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?, [Apple_Parsec_Siri_V2alpha_SayItComponent], [Apple_Parsec_Siri_V2alpha_DisambiguationListComponent], [Apple_Parsec_Siri_V2alpha_DomainObjectComponent], PommesRenderOptions?));
      uint64_t v12 = v11[24];
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent(0LL);
      uint64_t v16 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
        memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
      }

      uint64_t v23 = v11[28];
      uint64_t v24 = *(uint64_t *)((char *)a2 + v23);
      *(uint64_t *)((char *)a1 + v2__swift_destroy_boxed_opaque_existential_1(v0 + 3) = v24;
      uint64_t v25 = v11[32];
      uint64_t v26 = *(uint64_t *)((char *)a2 + v25);
      *(uint64_t *)((char *)a1 + v25) = v26;
      uint64_t v27 = v11[36];
      uint64_t v28 = *(uint64_t *)((char *)a2 + v27);
      *(uint64_t *)((char *)a1 + v2__swift_destroy_boxed_opaque_existential_1(v0 + 7) = v28;
      uint64_t v29 = v11[40];
      uint64_t v30 = *(void **)((char *)a2 + v29);
      *(uint64_t *)((char *)a1 + v29) = (uint64_t)v30;
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v28);
      id v31 = v30;
      uint64_t v19 = a1;
      uint64_t v20 = a3;
      uint64_t v21 = 0LL;
      goto LABEL_11;
  }

  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  return a1;
}

uint64_t *assignWithCopy for PegasusExperience(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  outlined destroy of PegasusExperience((uint64_t)a1);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v18 = type metadata accessor for Parse.DirectInvocation(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v18 - 8) + 16LL))(a1, a2, v18);
      uint64_t v19 = a1;
      uint64_t v20 = a3;
      uint64_t v21 = 2LL;
LABEL_12:
      swift_storeEnumTagMultiPayload(v19, v20, v21);
      return a1;
    case 1:
      uint64_t v22 = type metadata accessor for Apple_Parsec_Responseframework_PatternModel(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v22 - 8) + 16LL))(a1, a2, v22);
      uint64_t v19 = a1;
      uint64_t v20 = a3;
      uint64_t v21 = 1LL;
      goto LABEL_12;
    case 0:
      uint64_t v7 = *a2;
      *a1 = *a2;
      uint64_t v8 = a2[1];
      a1[1] = v8;
      uint64_t v9 = a2[2];
      a1[2] = v9;
      uint64_t v10 = a2[3];
      a1[3] = v10;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v10);
      uint64_t v11 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent], [Apple_Parsec_Siri_V2alpha_RenderedDialogComponent], [Apple_Parsec_Siri_V2alpha_ButtonViewComponent], [Apple_Parsec_Siri_V2alpha_DelayedActionComponent], Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?, [Apple_Parsec_Siri_V2alpha_SayItComponent], [Apple_Parsec_Siri_V2alpha_DisambiguationListComponent], [Apple_Parsec_Siri_V2alpha_DomainObjectComponent], PommesRenderOptions?));
      uint64_t v12 = v11[24];
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent(0LL);
      uint64_t v16 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
        memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
      }

      uint64_t v23 = v11[28];
      uint64_t v24 = *(uint64_t *)((char *)a2 + v23);
      *(uint64_t *)((char *)a1 + v2__swift_destroy_boxed_opaque_existential_1(v0 + 3) = v24;
      uint64_t v25 = v11[32];
      uint64_t v26 = *(uint64_t *)((char *)a2 + v25);
      *(uint64_t *)((char *)a1 + v25) = v26;
      uint64_t v27 = v11[36];
      uint64_t v28 = *(uint64_t *)((char *)a2 + v27);
      *(uint64_t *)((char *)a1 + v2__swift_destroy_boxed_opaque_existential_1(v0 + 7) = v28;
      uint64_t v29 = v11[40];
      uint64_t v30 = *(void **)((char *)a2 + v29);
      *(uint64_t *)((char *)a1 + v29) = (uint64_t)v30;
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v28);
      id v31 = v30;
      uint64_t v19 = a1;
      uint64_t v20 = a3;
      uint64_t v21 = 0LL;
      goto LABEL_12;
  }

  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  return a1;
}

_OWORD *initializeWithTake for PegasusExperience(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v15 = type metadata accessor for Parse.DirectInvocation(0LL);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v15 - 8) + 32LL))(a1, a2, v15);
      uint64_t v16 = a1;
      uint64_t v17 = a3;
      uint64_t v18 = 2LL;
LABEL_11:
      swift_storeEnumTagMultiPayload(v16, v17, v18);
      return a1;
    case 1:
      uint64_t v19 = type metadata accessor for Apple_Parsec_Responseframework_PatternModel(0LL);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v19 - 8) + 32LL))(a1, a2, v19);
      uint64_t v16 = a1;
      uint64_t v17 = a3;
      uint64_t v18 = 1LL;
      goto LABEL_11;
    case 0:
      __int128 v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent], [Apple_Parsec_Siri_V2alpha_RenderedDialogComponent], [Apple_Parsec_Siri_V2alpha_ButtonViewComponent], [Apple_Parsec_Siri_V2alpha_DelayedActionComponent], Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?, [Apple_Parsec_Siri_V2alpha_SayItComponent], [Apple_Parsec_Siri_V2alpha_DisambiguationListComponent], [Apple_Parsec_Siri_V2alpha_DomainObjectComponent], PommesRenderOptions?));
      uint64_t v9 = v8[24];
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent(0LL);
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12))
      {
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
        memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
      }

      *(void *)((char *)a1 + v8[28]) = *(void *)((char *)a2 + v8[28]);
      *(void *)((char *)a1 + v8[32]) = *(void *)((char *)a2 + v8[32]);
      *(void *)((char *)a1 + v8[36]) = *(void *)((char *)a2 + v8[36]);
      *(void *)((char *)a1 + v8[40]) = *(void *)((char *)a2 + v8[40]);
      uint64_t v16 = a1;
      uint64_t v17 = a3;
      uint64_t v18 = 0LL;
      goto LABEL_11;
  }

  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  return a1;
}

_OWORD *assignWithTake for PegasusExperience(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  outlined destroy of PegasusExperience((uint64_t)a1);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v15 = type metadata accessor for Parse.DirectInvocation(0LL);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v15 - 8) + 32LL))(a1, a2, v15);
      uint64_t v16 = a1;
      uint64_t v17 = a3;
      uint64_t v18 = 2LL;
LABEL_12:
      swift_storeEnumTagMultiPayload(v16, v17, v18);
      return a1;
    case 1:
      uint64_t v19 = type metadata accessor for Apple_Parsec_Responseframework_PatternModel(0LL);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v19 - 8) + 32LL))(a1, a2, v19);
      uint64_t v16 = a1;
      uint64_t v17 = a3;
      uint64_t v18 = 1LL;
      goto LABEL_12;
    case 0:
      __int128 v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent], [Apple_Parsec_Siri_V2alpha_RenderedDialogComponent], [Apple_Parsec_Siri_V2alpha_ButtonViewComponent], [Apple_Parsec_Siri_V2alpha_DelayedActionComponent], Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?, [Apple_Parsec_Siri_V2alpha_SayItComponent], [Apple_Parsec_Siri_V2alpha_DisambiguationListComponent], [Apple_Parsec_Siri_V2alpha_DomainObjectComponent], PommesRenderOptions?));
      uint64_t v9 = v8[24];
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent(0LL);
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12))
      {
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
        memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
      }

      *(void *)((char *)a1 + v8[28]) = *(void *)((char *)a2 + v8[28]);
      *(void *)((char *)a1 + v8[32]) = *(void *)((char *)a2 + v8[32]);
      *(void *)((char *)a1 + v8[36]) = *(void *)((char *)a2 + v8[36]);
      *(void *)((char *)a1 + v8[40]) = *(void *)((char *)a2 + v8[40]);
      uint64_t v16 = a1;
      uint64_t v17 = a3;
      uint64_t v18 = 0LL;
      goto LABEL_12;
  }

  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  return a1;
}

void type metadata completion function for PegasusExperience(uint64_t a1)
{
  v8[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v8[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v8[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v8[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?(319LL);
  if (v3 <= 0x3F)
  {
    v8[4] = *(void *)(v2 - 8) + 64LL;
    v8[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v8[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v8[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v8[8] = "\b";
    swift_getTupleTypeLayout(v9, 0LL, 9LL, v8);
    v10[0] = v9;
    uint64_t v4 = type metadata accessor for Apple_Parsec_Responseframework_PatternModel(319LL);
    if (v5 <= 0x3F)
    {
      v10[1] = *(void *)(v4 - 8) + 64LL;
      uint64_t v6 = type metadata accessor for Parse.DirectInvocation(319LL);
      if (v7 <= 0x3F)
      {
        _OWORD v10[2] = *(void *)(v6 - 8) + 64LL;
        swift_initEnumMetadataMultiPayload(a1, 256LL, 3LL, v10);
      }
    }
  }

void type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?(uint64_t a1)
{
  if (!lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?)
  {
    uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store( v3,  (unint64_t *)&lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
    }
  }

uint64_t type metadata accessor for ExperienceSelector()
{
  return objc_opt_self(&OBJC_CLASS____TtC21InformationFlowPlugin18ExperienceSelector);
}

unint64_t type metadata accessor for INPerson()
{
  unint64_t result = lazy cache variable for type metadata for INPerson;
  if (!lazy cache variable for type metadata for INPerson)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___INPerson);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INPerson);
  }

  return result;
}

uint64_t DetailedResultProvider.init(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:informationViewFactory:patternFlowProvider:patternExecutor:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, void *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, __int128 *a12)
{
  *(void *)(a9 + 23__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a1;
  *(void *)(a9 + 240) = a2;
  uint64_t v25 = a3;
  specialized Dictionary._Variant.removeValue(forKey:)(0x64656C6961746564LL, 0xEC00000074786554LL, v23);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  int v19 = swift_dynamicCast(v24, v23, v18, &type metadata for String, 6LL);
  uint64_t v20 = v24[0];
  uint64_t v21 = v24[1];
  if (!v19)
  {
    uint64_t v21 = 0LL;
    uint64_t v20 = 0LL;
  }

  *(void *)a9 = v25;
  *(void *)(a9 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = v20;
  *(void *)(a9 + 16) = v21;
  strcpy((char *)(a9 + 24), "detailedText");
  *(_BYTE *)(a9 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 7) = 0;
  *(_WORD *)(a9 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 8) = -5120;
  *(void *)(a9 + 224) = a4;
  *(void *)(a9 + 120) = a5;
  *(void *)(a9 + 12__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a6;
  outlined init with copy of OutputPublisherAsync((uint64_t)a7, a9 + 40);
  outlined init with copy of OutputPublisherAsync((uint64_t)a8, a9 + 80);
  static PatternFlowProvidingHelper.unwrap(_:with:)(a11, (uint64_t)a7, (uint64_t *)v23);
  outlined destroy of Any?(a11, &demangling cache variable for type metadata for PatternFlowProviding?);
  __swift_destroy_boxed_opaque_existential_1(a8);
  __swift_destroy_boxed_opaque_existential_1(a7);
  outlined init with take of PatternFlowProviding(v23, a9 + 136);
  *(void *)(a9 + 176) = a10;
  return outlined init with take of PatternFlowProviding(a12, a9 + 184);
}

const char *DetailedResultProvider.contentFieldName.unsafeMutableAddressor()
{
  return "detailedText";
}

uint64_t static DetailedResultProvider.contentFieldName.getter()
{
  return 0x64656C6961746564LL;
}

id DetailedResultProvider.bundle.getter()
{
  return *(id *)(v0 + 224);
}

void DetailedResultProvider.bundle.setter(uint64_t a1)
{
  *(void *)(v1 + 224) = a1;
}

uint64_t (*DetailedResultProvider.bundle.modify())()
{
  return SportsPersonalizationResult.init(flow:action:);
}

uint64_t DetailedResultProvider.patternId.getter()
{
  uint64_t v1 = *(void *)(v0 + 232);
  swift_bridgeObjectRetain(*(void *)(v0 + 240));
  return v1;
}

uint64_t DetailedResultProvider.patternId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 240));
  *(void *)(v2 + 23__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a1;
  *(void *)(v2 + 240) = a2;
  return result;
}

uint64_t (*DetailedResultProvider.patternId.modify())()
{
  return SportsPersonalizationResult.init(flow:action:);
}

uint64_t DetailedResultProvider.content.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1) {
    uint64_t v2 = *(void *)(v0 + 8);
  }
  else {
    uint64_t v2 = 0LL;
  }
  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t closure #1 in DetailedResultProvider.outputManifest.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for PommesContext.Source(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  NLContextUpdate.init()(v11);
  uint64_t v15 = *(void *)(a2 + 120);
  unint64_t v14 = *(void *)(a2 + 128);
  *uint64_t v6 = v15;
  v6[1] = v14;
  (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))( v6,  enum case for PommesContext.Source.pegasusResponse(_:),  v3);
  outlined copy of Data?(v15, v14);
  PommesContext.init(source:domain:listenAfterSpeaking:)(v6, 0LL, 0LL, 0LL);
  uint64_t v16 = type metadata accessor for PommesContext(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v9, 0LL, 1LL, v16);
  NLContextUpdate.pommesContext.setter(v9);
  uint64_t v17 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v13, 0LL, 1LL, v17);
  return OutputGenerationManifest.nlContextUpdate.setter(v13);
}

uint64_t DetailedResultProvider.makeSingleWindowFlow()()
{
  v1[39] = v0;
  uint64_t v2 = type metadata accessor for DialogPhase(0LL);
  v1[40] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for OutputGenerationManifest(0LL);
  v1[41] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[42] = v4;
  v1[43] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for WindowedPaginationParameters(0LL);
  v1[44] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v1[45] = v6;
  v1[46] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(DetailedResultProvider.makeSingleWindowFlow(), 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v15;
  uint64_t v16;
  os_log_s *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  uint64_t v8 = static os_log_type_t.debug.getter(v3, v4, v5, v6, v7);
  if (os_log_type_enabled(v3, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_0, v3, v8, "DetailedResultFlowProvider.makeSingleWindowFlow", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  uint64_t v10 = *(void *)(v0 + 312);

  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v12 = *(void *)(*(void *)(v0 + 312) + 8LL);
    WindowedPaginationParameters.init(windowSize:_:)( 0LL,  closure #1 in static ResultParamBuilder.displayPaginationParams.getter,  0LL);
    uint64_t v13 = (void *)swift_task_alloc(dword_A3D64);
    *(void *)(v0 + 376) = v13;
    *uint64_t v13 = v0;
    v13[1] = DetailedResultProvider.makeSingleWindowFlow();
    return DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:)( v12,  v11,  *(void *)(v0 + 368));
  }

  else
  {
    uint64_t v15 = (void *)(v0 + 16);
    uint64_t v16 = outlined init with copy of DetailedResultProvider(*(uint64_t **)(v0 + 312), v0 + 16);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    uint64_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v32 = swift_slowAlloc(32LL, -1LL);
      id v33 = v32;
      *(_DWORD *)uint64_t v19 = 136315138;
      uint64_t v20 = *v15;
      uint64_t v21 = swift_bridgeObjectRetain(*v15);
      uint64_t v22 = Dictionary.description.getter( v21,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
      uint64_t v24 = v23;
      swift_bridgeObjectRelease(v20);
      *(void *)(v0 + 304) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312);
      swift_bridgeObjectRelease(v24);
      outlined destroy of DetailedResultProvider(v0 + 16);
      _os_log_impl( &dword_0,  v17,  v18,  "DetailedResultFlowProvider.makeSingleWindow: No content to display from provided parameters %s",  v19,  0xCu);
      swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
      outlined destroy of DetailedResultProvider(v0 + 16);
    }

    uint64_t v25 = *(void *)(v0 + 312);
    outlined init with copy of OutputPublisherAsync(v25 + 40, v0 + 264);
    uint64_t v26 = *(void *)(v25 + 176);
    uint64_t v27 = type metadata accessor for ErrorFlowFactory();
    uint64_t v28 = swift_allocObject(v27, 64LL, 7LL);
    outlined init with take of PatternFlowProviding((__int128 *)(v0 + 264), v28 + 16);
    *(void *)(v28 + 56) = v26;
    swift_retain(v26);
    uint64_t v29 = ErrorFlowFactory.makeErrorFlow(message:)(1701736302LL, 0xE400000000000000LL);
    swift_release(v28);
    uint64_t v30 = *(void *)(v0 + 344);
    id v31 = *(void *)(v0 + 320);
    swift_task_dealloc(*(void *)(v0 + 368));
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v29);
  }

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v1 = *(void **)(v0 + 392);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 344);
  uint64_t v4 = *(void *)(v0 + 320);
  unint64_t v14 = *(void *)(v0 + 328);
  uint64_t v5 = *(void **)(v0 + 312);
  uint64_t v6 = v5[20];
  uint64_t v7 = v5[21];
  uint64_t v8 = __swift_project_boxed_opaque_existential_1(v5 + 17, v6);
  static DialogPhase.completion.getter(v8);
  uint64_t v9 = swift_task_alloc(32LL);
  *(void *)(v9 + 16) = v5;
  OutputGenerationManifest.init(dialogPhase:_:)( v4,  partial apply for closure #1 in DetailedResultProvider.outputManifest.getter,  v9);
  swift_task_dealloc(v9);
  uint64_t v10 = dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)( v1,  v2,  v6,  v7);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v14);
  uint64_t v11 = *(void *)(v0 + 344);
  uint64_t v12 = *(void *)(v0 + 320);
  swift_task_dealloc(*(void *)(v0 + 368));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 320);
  swift_task_dealloc(*(void *)(v0 + 368));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t DetailedResultProvider.makeSingleWindowFlow()(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 376LL);
  *(void *)(*(void *)v2 + 384LL) = v1;
  swift_task_dealloc(v5);
  uint64_t v7 = v4[45];
  uint64_t v6 = v4[46];
  uint64_t v8 = v4[44];
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v9 = DetailedResultProvider.makeSingleWindowFlow();
  }

  else
  {
    v4[49] = a1;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v9 = DetailedResultProvider.makeSingleWindowFlow();
  }

  return swift_task_switch(v9, 0LL, 0LL);
}

uint64_t DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a3;
  v4[11] = v3;
  void v4[8] = a1;
  void v4[9] = a2;
  uint64_t v5 = type metadata accessor for Date(0LL);
  void v4[12] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[13] = v6;
  v4[14] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:),  0LL,  0LL);
}

void DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:)()
{
  uint64_t v38 = v0 + 2;
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v39 = __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v39);
  os_log_type_t v7 = static os_log_type_t.debug.getter(v2, v3, v4, v5, v6);
  if (os_log_type_enabled(v2, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_0, v2, v7, "DetailedResultFlowProvider.executePatternForWindow", v8, 2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  uint64_t v9 = v0[8];
  uint64_t v10 = (uint64_t *)v0[11];
  uint64_t v11 = v0[9];

  uint64_t v37 = WindowedPaginationParameters.asCATParameters()();
  uint64_t v12 = *v10;
  uint64_t v14 = v10[2];
  uint64_t v13 = v10[3];
  uint64_t v15 = v10[4];
  uint64_t v42 = &type metadata for String;
  *(void *)&__int128 v41 = v9;
  *((void *)&v41 + 1) = v11;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain_n(v12, 2LL);
  swift_bridgeObjectRetain_n(v15, 2LL);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12);
  uint64_t v43 = v12;
  specialized _NativeDictionary.updateValue(_:forKey:isUnique:)( &v41,  v13,  v15,  isUniquelyReferenced_nonNull_native,  v38);
  uint64_t v17 = v43;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  swift_bridgeObjectRelease(v15);
  outlined destroy of Any?((uint64_t)v38, &demangling cache variable for type metadata for Any?);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v18 = specialized Dictionary.merging(_:uniquingKeysWith:)(v17, v37);
  v0[15] = v18;
  uint64_t v19 = swift_bridgeObjectRetain_n(v18, 2LL);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v25 = static os_log_type_t.debug.getter(v20, v21, v22, v23, v24);
  if (os_log_type_enabled(v20, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v27 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 v41 = v27;
    *(_DWORD *)uint64_t v26 = 136315138;
    uint64_t v28 = swift_bridgeObjectRetain(v18);
    uint64_t v29 = Dictionary.description.getter( v28,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    unint64_t v31 = v30;
    swift_bridgeObjectRelease(v18);
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, (uint64_t *)&v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8);
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease_n(v18, 2LL);
    _os_log_impl(&dword_0, v20, v25, "DetailedResultFlowProvider.executePatternForWindow parameters: %s", v26, 0xCu);
    swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v18, 2LL);
  }

  uint64_t v32 = v0[11];
  uint64_t v33 = type metadata accessor for PerformanceUtil(0LL);
  v0[16] = static PerformanceUtil.shared.getter(v33);
  uint64_t v34 = swift_task_alloc(32LL);
  v0[17] = v34;
  *(void *)(v34 + 16) = v32;
  *(void *)(v34 + 24) = v18;
  Date.init()(v34);
  v0[18] = v35;
  unint64_t v36 = type metadata accessor for PatternExecutionResult();
  *uint64_t v35 = v0;
  v35[1] = DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:);
  uint64_t v49 = v34;
  unint64_t v50 = v36;
  uint64_t v48 = &async function pointer to partial apply for closure #2 in DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:);
  char v47 = 2;
  uint64_t v46 = 60LL;
  uint64_t v44 = 116LL;
  id v45 = "executePatternForWindow(windowContent:paginationParameters:)";
  __asm { BR              X8 }

uint64_t DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:)()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 144LL);
  *(void *)(*(void *)v1 + 152LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v2[15];
    uint64_t v5 = v2[16];
    (*(void (**)(void, void))(v2[13] + 8LL))(v2[14], v2[12]);
    swift_bridgeObjectRelease(v4);
    swift_release(v5);
    uint64_t v6 = DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:);
  }

  else
  {
    uint64_t v7 = v2[16];
    uint64_t v8 = v2[17];
    uint64_t v9 = v2[15];
    (*(void (**)(void, void))(v2[13] + 8LL))(v2[14], v2[12]);
    swift_bridgeObjectRelease(v9);
    swift_release(v7);
    swift_task_dealloc(v8);
    uint64_t v6 = DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:);
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 112));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 136));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t DetailedResultProvider.makeWindowingFlowProvider()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return swift_task_switch(DetailedResultProvider.makeWindowingFlowProvider(), 0LL, 0LL);
}

uint64_t DetailedResultProvider.makeWindowingFlowProvider()()
{
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v8 = static os_log_type_t.debug.getter(v3, v4, v5, v6, v7);
  if (os_log_type_enabled(v3, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_0, v3, v8, "DetailedResultFlowProvider.makeWindowingFlowProvider", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  uint64_t v11 = *(void *)(v0 + 16);
  uint64_t v10 = *(uint64_t **)(v0 + 24);

  outlined init with copy of DetailedResultProvider(v10, v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t DetailedResultProvider.makeWindowFlow(paginationParameters:windowContent:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[35] = a3;
  v4[36] = v3;
  v4[33] = a1;
  v4[34] = a2;
  uint64_t v5 = type metadata accessor for ConfirmationResponse(0LL);
  v4[37] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[38] = v6;
  v4[39] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DialogPhase(0LL);
  _BYTE v4[40] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OutputGenerationManifest(0LL);
  v4[41] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for WindowedPaginationParameters(0LL);
  v4[42] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[43] = v10;
  uint64_t v11 = *(void *)(v10 + 64);
  v4[44] = v11;
  v4[45] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(DetailedResultProvider.makeWindowFlow(paginationParameters:windowContent:), 0LL, 0LL);
}

uint64_t DetailedResultProvider.makeWindowFlow(paginationParameters:windowContent:)()
{
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v8 = static os_log_type_t.debug.getter(v3, v4, v5, v6, v7);
  if (os_log_type_enabled(v3, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_0, v3, v8, "DetailedResultFlowProvider.makeWindowFlow", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  uint64_t v10 = *(void *)(v0 + 352);
  uint64_t v11 = *(void *)(v0 + 360);
  uint64_t v12 = *(void *)(v0 + 336);
  uint64_t v13 = *(void *)(v0 + 344);
  uint64_t v42 = *(void *)(v0 + 312);
  uint64_t v43 = *(void *)(v0 + 320);
  uint64_t v14 = *(uint64_t **)(v0 + 288);
  uint64_t v40 = *(void *)(v0 + 304);
  uint64_t v41 = *(void *)(v0 + 296);
  uint64_t v15 = *(void *)(v0 + 280);
  uint64_t v38 = *(void *)(v0 + 272);
  uint64_t v39 = *(void *)(v0 + 328);
  uint64_t v16 = *(void *)(v0 + 264);

  outlined init with copy of DetailedResultProvider(v14, v0 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v11, v16, v12);
  uint64_t v17 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v18 = (v17 + 280) & ~v17;
  uint64_t v19 = swift_allocObject(&unk_99488, v18 + v10, v17 | 7);
  __int128 v20 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v19 + 20__swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v19 + 224) = v20;
  *(_OWORD *)(v19 + 240) = *(_OWORD *)(v0 + 240);
  uint64_t v21 = *(void *)(v0 + 256);
  __int128 v22 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v19 + 144) = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v19 + 160) = v22;
  __int128 v23 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v19 + 176) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v19 + 19__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v23;
  __int128 v24 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v19 + 80) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v19 + 96) = v24;
  __int128 v25 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v19 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v19 + 12__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v25;
  __int128 v26 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v19 + 16) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v19 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v26;
  __int128 v27 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v19 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v19 + 64) = v27;
  *(void *)(v19 + 256) = v21;
  *(void *)(v19 + 264) = v38;
  *(void *)(v19 + 27__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v19 + v18, v11, v12);
  uint64_t v28 = swift_bridgeObjectRetain(v15);
  static DialogPhase.clarification.getter(v28);
  OutputGenerationManifest.init(dialogPhase:_:)( v43,  closure #1 in default argument 0 of SimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:),  0LL);
  uint64_t v29 = type metadata accessor for ResponseFactory(0LL);
  uint64_t v30 = swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  v44[3] = v29;
  v44[4] = &protocol witness table for ResponseFactory;
  v44[0] = ResponseFactory.init()(v30);
  uint64_t v31 = type metadata accessor for SimpleYesNoPromptFlowStrategy(0LL);
  swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  uint64_t v32 = SimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:)( v39,  v44,  &async function pointer to closure #1 in default argument 2 of SimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:),  0LL,  &async function pointer to closure #1 in default argument 3 of SimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:),  0LL,  &async function pointer to partial apply for closure #1 in DetailedResultProvider.makeWindowFlow(paginationParameters:windowContent:),  v19);
  uint64_t v33 = v14 + 17;
  uint64_t v35 = v14[20];
  uint64_t v34 = v14[21];
  __swift_project_boxed_opaque_existential_1(v33, v35);
  (*(void (**)(uint64_t, void, uint64_t))(v40 + 104))( v42,  enum case for ConfirmationResponse.confirmed(_:),  v41);
  uint64_t v36 = dispatch thunk of PatternFlowProviding.makeResponseFlowWithContinuationPrompt<A>(strategy:shouldContinueForResponse:)( v32,  v42,  v31,  &protocol witness table for SimpleYesNoPromptFlowStrategy,  v35,  v34);
  swift_release(v32);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v42, v41);
  swift_task_dealloc(v11);
  swift_task_dealloc(v39);
  swift_task_dealloc(v43);
  swift_task_dealloc(v42);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v36);
}

uint64_t closure #1 in DetailedResultProvider.makeWindowFlow(paginationParameters:windowContent:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  os_log_type_t v8 = (void *)swift_task_alloc(dword_A3D64);
  *(void *)(v4 + 16) = v8;
  *os_log_type_t v8 = v4;
  v8[1] = ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:);
  return DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:)(a2, a3, a4);
}

uint64_t DetailedResultProvider.makeFinalWindowFlow(paginationParameters:windowContent:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  void v4[5] = v3;
  void v4[2] = a1;
  void v4[3] = a2;
  uint64_t v5 = type metadata accessor for DialogPhase(0LL);
  v4[6] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OutputGenerationManifest(0LL);
  v4[7] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  void v4[8] = v7;
  void v4[9] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(DetailedResultProvider.makeFinalWindowFlow(paginationParameters:windowContent:), 0LL, 0LL);
}

uint64_t DetailedResultProvider.makeFinalWindowFlow(paginationParameters:windowContent:)()
{
  if (one-time initialization token for information != -1) {
    swift_once(&one-time initialization token for information, one-time initialization function for information);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v8 = static os_log_type_t.debug.getter(v3, v4, v5, v6, v7);
  if (os_log_type_enabled(v3, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_0, v3, v8, "DetailedResultFlowProvider.makeFinalWindowFlow", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  uint64_t v10 = (uint64_t **)swift_task_alloc(dword_A3D64);
  v0[10] = (uint64_t)v10;
  *uint64_t v10 = v0;
  v10[1] = (uint64_t *)DetailedResultProvider.makeFinalWindowFlow(paginationParameters:windowContent:);
  return DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:)(v0[3], v0[4], v0[2]);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v1 = *(void **)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v12 = *(void *)(v0 + 56);
  uint64_t v5 = *(void **)(v0 + 40);
  uint64_t v6 = v5[20];
  uint64_t v7 = v5[21];
  os_log_type_t v8 = __swift_project_boxed_opaque_existential_1(v5 + 17, v6);
  static DialogPhase.completion.getter(v8);
  uint64_t v9 = swift_task_alloc(32LL);
  *(void *)(v9 + 16) = v5;
  OutputGenerationManifest.init(dialogPhase:_:)( v4,  closure #1 in DetailedResultProvider.outputManifest.getterpartial apply,  v9);
  swift_task_dealloc(v9);
  uint64_t v10 = dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)( v1,  v2,  v6,  v7);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v12);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v10);
}

uint64_t DetailedResultProvider.makeFinalWindowFlow(paginationParameters:windowContent:)(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  uint64_t v5 = *(void *)(*v2 + 80);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v7 = v4[6];
    swift_task_dealloc(v4[9]);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v6 + 8))();
  }

  else
  {
    v4[11] = a1;
    return swift_task_switch(DetailedResultProvider.makeFinalWindowFlow(paginationParameters:windowContent:), 0LL, 0LL);
  }

uint64_t closure #2 in DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch( closure #2 in DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:),  0LL,  0LL);
}

uint64_t closure #2 in DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:)()
{
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = v1[26];
  uint64_t v3 = v1[27];
  __swift_project_boxed_opaque_existential_1(v1 + 23, v2);
  uint64_t v5 = v1[29];
  uint64_t v4 = v1[30];
  uint64_t v6 = v1[28];
  uint64_t v7 = *(int **)(v3 + 8);
  uint64_t v10 = (int *)((char *)v7 + *v7);
  os_log_type_t v8 = (void *)swift_task_alloc(v7[1]);
  v0[5] = v8;
  *os_log_type_t v8 = v0;
  v8[1] = closure #2 in ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, void *, uint64_t, uint64_t))v10)( v5,  v4,  v6,  v0[4],  v1 + 10,  v2,  v3);
}

uint64_t protocol witness for DetailedResultFlowProvider.makeSingleWindowFlow() in conformance DetailedResultProvider()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_A3D5C);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for PatternExecutorProtocol.execute(pattern:in:with:) in conformance PatternExecutor;
  return DetailedResultProvider.makeSingleWindowFlow()();
}

uint64_t protocol witness for DetailedResultFlowProvider.makeWindowingFlowProvider() in conformance DetailedResultProvider( uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc(dword_A3D6C);
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  void v4[2] = a1;
  void v4[3] = v1;
  return swift_task_switch(DetailedResultProvider.makeWindowingFlowProvider(), 0LL, 0LL);
}

uint64_t protocol witness for ContinuationPromptFlowProvider.makeFinalWindowFlow(paginationParameters:windowContent:) in conformance DetailedResultProvider( uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = (void *)swift_task_alloc(dword_A3D9C);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = protocol witness for PatternExecutorProtocol.execute(pattern:in:with:) in conformance PatternExecutor;
  return DetailedResultProvider.makeFinalWindowFlow(paginationParameters:windowContent:)(a1, v4, v5);
}

uint64_t protocol witness for WindowingFlowProvider.makeWindowFlow(paginationParameters:windowContent:) in conformance DetailedResultProvider( uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = (void *)swift_task_alloc(dword_A3D74);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = protocol witness for PatternExecutorProtocol.execute(pattern:in:with:) in conformance PatternExecutor;
  return DetailedResultProvider.makeWindowFlow(paginationParameters:windowContent:)(a1, v4, v5);
}

uint64_t closure #1 in default argument 0 of SimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:)()
{
  return OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
}

uint64_t outlined init with copy of DetailedResultProvider(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t partial apply for closure #1 in DetailedResultProvider.outputManifest.getter(uint64_t a1)
{
  return closure #1 in DetailedResultProvider.outputManifest.getter(a1, *(void *)(v1 + 16));
}

uint64_t sub_7830C()
{
  uint64_t v1 = type metadata accessor for WindowedPaginationParameters(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  swift_bridgeObjectRelease(*(void *)(v0 + 16));
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 56));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 96));
  unint64_t v5 = *(void *)(v0 + 144);
  if (v5 >> 60 != 15) {
    outlined consume of Data._Representation(*(void *)(v0 + 136), v5);
  }
  uint64_t v6 = (v3 + 280) & ~v3;
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 152));
  swift_release(*(void *)(v0 + 192));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 200));

  swift_bridgeObjectRelease(*(void *)(v0 + 256));
  swift_bridgeObjectRelease(*(void *)(v0 + 272));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v6, v1);
  return swift_deallocObject(v0, v6 + v4, v3 | 7);
}

uint64_t partial apply for closure #1 in DetailedResultProvider.makeWindowFlow(paginationParameters:windowContent:)()
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for WindowedPaginationParameters(0LL) - 8) + 80LL);
  uint64_t v3 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 272);
  uint64_t v5 = v0 + ((v2 + 280) & ~v2);
  uint64_t v6 = (void *)swift_task_alloc(dword_A3D7C);
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = partial apply for closure #1 in ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:);
  uint64_t v7 = (void *)swift_task_alloc(dword_A3D64);
  v6[2] = v7;
  void *v7 = v6;
  v7[1] = ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:);
  return DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:)(v3, v4, v5);
}

uint64_t destroy for DetailedResultProvider(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 128);
  if (v2 >> 60 != 15) {
    outlined consume of Data._Representation(*(void *)(a1 + 120), v2);
  }
  __swift_destroy_boxed_opaque_existential_1((void *)(a1 + 136));
  swift_release(*(void *)(a1 + 176));
  __swift_destroy_boxed_opaque_existential_1((void *)(a1 + 184));

  return swift_bridgeObjectRelease(*(void *)(a1 + 240));
}

uint64_t initializeWithCopy for DetailedResultProvider(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = v5;
  uint64_t v7 = a2[2];
  uint64_t v6 = a2[3];
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v6;
  uint64_t v8 = a2[4];
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v8;
  uint64_t v9 = a2 + 5;
  __int128 v10 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 64) = v10;
  uint64_t v11 = v10;
  uint64_t v12 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v10 - 8);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v12(a1 + 40, v9, v11);
  __int128 v13 = *(_OWORD *)(a2 + 13);
  *(_OWORD *)(a1 + 104) = v13;
  (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 80, (uint64_t)(a2 + 10));
  uint64_t v14 = a2 + 15;
  unint64_t v15 = a2[16];
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 120) = *(_OWORD *)v14;
  }

  else
  {
    uint64_t v16 = *v14;
    outlined copy of Data._Representation(*v14, a2[16]);
    *(void *)(a1 + 120) = v16;
    *(void *)(a1 + 12__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v15;
  }

  __int128 v17 = *((_OWORD *)a2 + 10);
  *(_OWORD *)(a1 + 160) = v17;
  (**(void (***)(uint64_t, uint64_t))(v17 - 8))(a1 + 136, (uint64_t)(a2 + 17));
  uint64_t v18 = a2[22];
  *(void *)(a1 + 176) = v18;
  __int128 v19 = *((_OWORD *)a2 + 13);
  *(_OWORD *)(a1 + 20__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v19;
  uint64_t v20 = v19;
  uint64_t v21 = **(void (***)(uint64_t, uint64_t, uint64_t))(v19 - 8);
  swift_retain(v18);
  v21(a1 + 184, (uint64_t)(a2 + 23), v20);
  __int128 v22 = (void *)a2[28];
  uint64_t v23 = a2[29];
  *(void *)(a1 + 224) = v22;
  *(void *)(a1 + 23__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v23;
  uint64_t v24 = a2[30];
  *(void *)(a1 + 240) = v24;
  id v25 = v22;
  swift_bridgeObjectRetain(v24);
  return a1;
}

uint64_t *assignWithCopy for DetailedResultProvider(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  __swift_assign_boxed_opaque_existential_1(a1 + 5, a2 + 5);
  __swift_assign_boxed_opaque_existential_1(a1 + 10, a2 + 10);
  __int128 v10 = a2 + 15;
  unint64_t v11 = a2[16];
  if ((unint64_t)a1[16] >> 60 != 15)
  {
    if (v11 >> 60 != 15)
    {
      uint64_t v13 = *v10;
      outlined copy of Data._Representation(*v10, a2[16]);
      uint64_t v14 = a1[15];
      unint64_t v15 = a1[16];
      a1[15] = v13;
      a1[16] = v11;
      outlined consume of Data._Representation(v14, v15);
      goto LABEL_8;
    }

    outlined destroy of Data((uint64_t)(a1 + 15));
    goto LABEL_6;
  }

  if (v11 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 15) = *(_OWORD *)v10;
    goto LABEL_8;
  }

  uint64_t v12 = *v10;
  outlined copy of Data._Representation(*v10, a2[16]);
  a1[15] = v12;
  a1[16] = v11;
LABEL_8:
  __swift_assign_boxed_opaque_existential_1(a1 + 17, a2 + 17);
  uint64_t v16 = a2[22];
  uint64_t v17 = a1[22];
  a1[22] = v16;
  swift_retain(v16);
  swift_release(v17);
  __swift_assign_boxed_opaque_existential_1(a1 + 23, a2 + 23);
  uint64_t v18 = (void *)a2[28];
  __int128 v19 = (void *)a1[28];
  a1[28] = (uint64_t)v18;
  id v20 = v18;

  a1[29] = a2[29];
  uint64_t v21 = a2[30];
  uint64_t v22 = a1[30];
  a1[30] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  return a1;
}

__n128 __swift_memcpy248_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a2[2];
  *(_OWORD *)(a1 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  __int128 v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __int128 v8 = a2[8];
  __int128 v9 = a2[9];
  __int128 v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 12__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  __n128 result = (__n128)a2[12];
  __int128 v12 = a2[13];
  __int128 v13 = a2[14];
  *(void *)(a1 + 240) = *((void *)a2 + 30);
  *(_OWORD *)(a1 + 20__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 19__swift_destroy_boxed_opaque_existential_1(v0 + 2) = result;
  return result;
}

uint64_t *assignWithTake for DetailedResultProvider(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a2[2];
  uint64_t v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a2[4];
  uint64_t v8 = a1[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease(v8);
  __swift_destroy_boxed_opaque_existential_1(a1 + 5);
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 7) = *(_OWORD *)(a2 + 7);
  a1[9] = a2[9];
  __swift_destroy_boxed_opaque_existential_1(a1 + 10);
  __int128 v9 = *((_OWORD *)a2 + 6);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
  *((_OWORD *)a1 + 6) = v9;
  a1[14] = a2[14];
  __int128 v10 = a2 + 15;
  unint64_t v11 = a1[16];
  if (v11 >> 60 != 15)
  {
    unint64_t v12 = a2[16];
    if (v12 >> 60 != 15)
    {
      uint64_t v13 = a1[15];
      a1[15] = *v10;
      a1[16] = v12;
      outlined consume of Data._Representation(v13, v11);
      goto LABEL_6;
    }

    outlined destroy of Data((uint64_t)(a1 + 15));
  }

  *(_OWORD *)(a1 + 15) = *(_OWORD *)v10;
LABEL_6:
  __swift_destroy_boxed_opaque_existential_1(a1 + 17);
  *(_OWORD *)(a1 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 7) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(a1 + 19) = *(_OWORD *)(a2 + 19);
  uint64_t v14 = a2[22];
  uint64_t v15 = a1[22];
  a1[21] = a2[21];
  a1[22] = v14;
  swift_release(v15);
  __swift_destroy_boxed_opaque_existential_1(a1 + 23);
  *(_OWORD *)(a1 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 3) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  uint64_t v16 = a2[28];
  uint64_t v17 = (void *)a1[28];
  a1[27] = a2[27];
  a1[28] = v16;

  uint64_t v18 = a2[30];
  uint64_t v19 = a1[30];
  a1[29] = a2[29];
  a1[30] = v18;
  swift_bridgeObjectRelease(v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for DetailedResultProvider(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 248)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DetailedResultProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 23__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 16__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0u;
    *(_OWORD *)(result + 15__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0u;
    *(_OWORD *)(result + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DetailedResultProvider()
{
  return &type metadata for DetailedResultProvider;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, uint64_t a2)
{
  __int128 v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v34 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain(v5);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v14 << 6);
      }

      else
      {
        int64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        if (v19 >= v35) {
          goto LABEL_37;
        }
        unint64_t v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          int64_t v14 = v19 + 1;
          if (v19 + 1 >= v35) {
            goto LABEL_37;
          }
          unint64_t v20 = v36[v14];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              __int128 v3 = v34;
              if ((a2 & 1) != 0)
              {
                uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v36 = -1LL << v33;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            unint64_t v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v14 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_44;
                }
                if (v14 >= v35) {
                  goto LABEL_37;
                }
                unint64_t v20 = v36[v14];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v14 = v21;
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  void v39[9];
  __int128 v40[3];
  __int128 v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Decodable & Encodable & Sendable>);
  uint64_t v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_44;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = v3;
  uint64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v18 = v17 | (v14 << 6);
      goto LABEL_25;
    }

    int64_t v19 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    if (v19 >= v36) {
      break;
    }
    unint64_t v20 = (void *)(v5 + 64);
    int64_t v21 = *(void *)(v37 + 8 * v19);
    ++v14;
    if (!v21)
    {
      int64_t v14 = v19 + 1;
      if (v19 + 1 >= v36) {
        goto LABEL_37;
      }
      int64_t v21 = *(void *)(v37 + 8 * v14);
      if (!v21)
      {
        uint64_t v22 = v19 + 2;
        if (v22 >= v36)
        {
LABEL_37:
          swift_release(v5);
          __int128 v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        int64_t v21 = *(void *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            int64_t v14 = v22 + 1;
            if (__OFADD__(v22, 1LL)) {
              goto LABEL_46;
            }
            if (v14 >= v36) {
              goto LABEL_37;
            }
            int64_t v21 = *(void *)(v37 + 8 * v14);
            ++v22;
            if (v21) {
              goto LABEL_24;
            }
          }
        }

        int64_t v14 = v22;
      }
    }

void *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release(v2);
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }

  id v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  __int128 v26[3];
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Decodable & Encodable & Sendable>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release(v2);
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }

  id v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

uint64_t partial apply for closure #2 in DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:)( uint64_t a1)
{
  uint64_t v4 = swift_task_alloc(dword_A3DD4);
  __int128 v5 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)(v4 + 16) = a1;
  return swift_task_switch( closure #2 in DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:),  0LL,  0LL);
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>( uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  outlined init with copy of Any((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;
  return swift_bridgeObjectRetain(v3);
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    uint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&__int128 v23 = v13;
    *((void *)&v23 + 1) = v12;
    swift_bridgeObjectRetain(v12);
    goto LABEL_23;
  }

  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1LL))
  {
    __break(1u);
    return result;
  }

  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }

    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }

      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }

        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v15 != v18)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }

  uint64_t v9 = 0LL;
  memset(v24, 0, sizeof(v24));
  __int128 v23 = 0u;
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  uint64_t v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = outlined init with take of (key: String, value: Any)?((uint64_t)&v23, (uint64_t)v22);
  if (*((void *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return outlined destroy of Any?( (uint64_t)v21,  &demangling cache variable for type metadata for (key: String, value: Any));
  }

  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }

  return result;
}

uint64_t outlined init with take of (key: String, value: Any)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Any)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of Decodable & Encodable & Sendable(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

const char *LoggingConstants.defaultTaskName.unsafeMutableAddressor()
{
  return "CurrentTask";
}

const char *LoggingConstants.defaultParameterValue.unsafeMutableAddressor()
{
  return "not_applicable";
}

void *LoggingConstants.empty.unsafeMutableAddressor()
{
  return &static LoggingConstants.empty;
}

const char *LoggingConstants.none.unsafeMutableAddressor()
{
  return "none";
}

ValueMetadata *type metadata accessor for LoggingConstants()
{
  return &type metadata for LoggingConstants;
}

uint64_t static PatternFlowProvidingHelper.unwrap(_:with:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (v10)
  {
    outlined init with take of PatternFlowProviding(&v9, (uint64_t)v12);
    return outlined init with take of PatternFlowProviding(v12, (uint64_t)a3);
  }

  else
  {
    outlined destroy of PatternFlowProviding?((uint64_t)&v9);
    outlined init with copy of OutputPublisherAsync(a2, (uint64_t)v12);
    uint64_t v6 = type metadata accessor for ResponseFactory(0LL);
    swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v7 = ResponseFactory.init()();
    uint64_t v10 = v6;
    uint64_t v11 = &protocol witness table for ResponseFactory;
    *(void *)&__int128 v9 = v7;
    uint64_t v8 = type metadata accessor for PatternFlowProvider(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t result = PatternFlowProvider.init(outputPublisher:responseGenerator:)(v12, &v9);
    a3[3] = v8;
    a3[4] = (uint64_t)&protocol witness table for PatternFlowProvider;
    *a3 = result;
  }

  return result;
}

uint64_t outlined init with copy of PatternFlowProviding?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PatternFlowProviding?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for PatternFlowProvidingHelper()
{
  return &type metadata for PatternFlowProvidingHelper;
}