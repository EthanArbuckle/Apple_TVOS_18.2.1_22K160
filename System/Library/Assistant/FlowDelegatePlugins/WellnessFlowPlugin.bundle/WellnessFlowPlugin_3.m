uint64_t sub_D29E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  sub_A6254();
  sub_59AF4(*(void *)(v2 + 28296), v4);
  if (v1)
  {
    sub_36860();
    sub_6D64();
  }

  else
  {
    sub_6D64();
    *(void *)(v2 + 28304) = a1;
  }

  sub_A964();
  return sub_D954();
}

uint64_t sub_D2A48()
{
  v1 = *(void **)(v0 + 28304);
  v2 = *(void **)(v0 + 28272);
  v2541 = *(void **)(v0 + 28136);
  unsigned __int8 v2531 = *(_BYTE *)(v0 + 28517);
  uint64_t v2538 = *(void *)(v0 + 27584);
  uint64_t v2535 = *(void *)(v0 + 27576);
  uint64_t v2532 = *(void *)(v0 + 27560);
  uint64_t v2533 = *(void *)(v0 + 27568);
  uint64_t v2530 = *(void *)(v0 + 27552);
  v2528 = *(void **)(v0 + 28120);
  uint64_t v2529 = *(void *)(v0 + 27544);
  uint64_t v2527 = *(void *)(v0 + 27536);
  uint64_t v3 = *(void *)(v0 + 27528);
  uint64_t v2548 = *(void *)(v0 + 26688);
  uint64_t v2550 = *(void *)(v0 + 26728);
  uint64_t v2534 = *(void *)(v0 + 26392);
  uint64_t v2544 = *(void *)(v0 + 26328);
  uint64_t v2546 = *(void *)(v0 + 26432);
  uint64_t v4 = *(void *)(v0 + 26248);
  uint64_t v2542 = *(void *)(v0 + 26216);
  uint64_t v2543 = *(void *)(v0 + 26208);
  uint64_t v2539 = *(void *)(v0 + 26400);
  uint64_t v2540 = *(void *)(v0 + 26144);
  uint64_t v2536 = *(void *)(v0 + 26136);
  uint64_t v2537 = *(void *)(v0 + 26384);
  sub_A304(*(void *)(v0 + 25976) + 64LL, v0 + 18968);
  uint64_t v5 = *(void *)(v0 + 18992);
  uint64_t v6 = *(void *)(v0 + 19000);
  sub_500C((void *)(v0 + 18968), v5);
  id v7 = v1;
  uint64_t v8 = dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)( v7,  v4,  v5,  v6);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 18968));
  static ExecuteResponse.complete(next:)(v8);

  sub_3652C();
  sub_3561C(v3, v2527, v2529, v2530, v2532, v2533, v2535, v2538, v2531);

  (*(void (**)(uint64_t, uint64_t))(v2534 + 8))(v2539, v2537);
  sub_464D0(v2536);
  sub_464D0(v2540);
  (*(void (**)(uint64_t, uint64_t))(v2542 + 8))(v4, v2543);
  sub_26F04(v2544, type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters);
  sub_26F04(v2546, type metadata accessor for SnippetHeaderModel);
  sub_279E0(v2548, &qword_189D00);
  sub_279E0(v2550, &qword_18B168);
  swift_bridgeObjectRelease();
  uint64_t v681 = *(void *)(v0 + 27288);
  uint64_t v742 = *(void *)(v0 + 27280);
  uint64_t v802 = *(void *)(v0 + 27272);
  uint64_t v861 = *(void *)(v0 + 27264);
  uint64_t v919 = *(void *)(v0 + 27256);
  uint64_t v976 = *(void *)(v0 + 27248);
  uint64_t v1032 = *(void *)(v0 + 27240);
  uint64_t v1087 = *(void *)(v0 + 27232);
  uint64_t v1141 = *(void *)(v0 + 27224);
  uint64_t v1194 = *(void *)(v0 + 27216);
  uint64_t v1246 = *(void *)(v0 + 27208);
  uint64_t v1297 = *(void *)(v0 + 27200);
  uint64_t v1347 = *(void *)(v0 + 27192);
  uint64_t v1396 = *(void *)(v0 + 27184);
  uint64_t v1444 = *(void *)(v0 + 27176);
  uint64_t v1491 = *(void *)(v0 + 27168);
  uint64_t v1537 = *(void *)(v0 + 27160);
  uint64_t v1582 = *(void *)(v0 + 27152);
  uint64_t v1626 = *(void *)(v0 + 27144);
  uint64_t v1669 = *(void *)(v0 + 27136);
  uint64_t v1711 = *(void *)(v0 + 27128);
  uint64_t v1752 = *(void *)(v0 + 27120);
  uint64_t v1792 = *(void *)(v0 + 27112);
  uint64_t v1831 = *(void *)(v0 + 27104);
  uint64_t v1869 = *(void *)(v0 + 27096);
  uint64_t v1906 = *(void *)(v0 + 27088);
  uint64_t v1942 = *(void *)(v0 + 27080);
  uint64_t v1977 = *(void *)(v0 + 27072);
  uint64_t v2011 = *(void *)(v0 + 27064);
  uint64_t v2044 = *(void *)(v0 + 27056);
  uint64_t v2076 = *(void *)(v0 + 27048);
  uint64_t v2107 = *(void *)(v0 + 27040);
  uint64_t v2137 = *(void *)(v0 + 27032);
  uint64_t v2166 = *(void *)(v0 + 27024);
  uint64_t v2194 = *(void *)(v0 + 27016);
  uint64_t v2221 = *(void *)(v0 + 27008);
  uint64_t v2247 = *(void *)(v0 + 27000);
  uint64_t v2272 = *(void *)(v0 + 26992);
  uint64_t v2296 = *(void *)(v0 + 26984);
  uint64_t v2319 = *(void *)(v0 + 26976);
  uint64_t v2341 = *(void *)(v0 + 26968);
  uint64_t v2362 = *(void *)(v0 + 26960);
  uint64_t v2382 = *(void *)(v0 + 26952);
  uint64_t v2401 = *(void *)(v0 + 26944);
  uint64_t v2419 = *(void *)(v0 + 26936);
  uint64_t v2436 = *(void *)(v0 + 26928);
  uint64_t v2452 = *(void *)(v0 + 26920);
  uint64_t v2467 = *(void *)(v0 + 26912);
  uint64_t v2481 = *(void *)(v0 + 26904);
  uint64_t v2494 = *(void *)(v0 + 26896);
  uint64_t v2506 = *(void *)(v0 + 26888);
  uint64_t v2517 = *(void *)(v0 + 26880);
  uint64_t v2545 = *(void *)(v0 + 26024);
  uint64_t v2547 = *(void *)(v0 + 26016);
  uint64_t v2549 = *(void *)(v0 + 26008);
  uint64_t v2551 = *(void *)(v0 + 25984);
  swift_task_dealloc(*(void *)(v0 + 27368));
  sub_A8F4();
  sub_A85C();
  sub_A864();
  sub_A910();
  sub_A8EC();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  uint64_t v9 = sub_A78C();
  uint64_t v17 = sub_A854(v9, v10, v11, v12, v13, v14, v15, v16, v498, v559, v620, v681);
  uint64_t v25 = sub_A84C(v17, v18, v19, v20, v21, v22, v23, v24, v499, v560, v621, v682, v742);
  uint64_t v33 = sub_A844(v25, v26, v27, v28, v29, v30, v31, v32, v500, v561, v622, v683, v743, v802);
  uint64_t v41 = sub_A83C(v33, v34, v35, v36, v37, v38, v39, v40, v501, v562, v623, v684, v744, v803, v861);
  uint64_t v49 = sub_A95C(v41, v42, v43, v44, v45, v46, v47, v48, v502, v563, v624, v685, v745, v804, v862, v919);
  uint64_t v57 = sub_A954(v49, v50, v51, v52, v53, v54, v55, v56, v503, v564, v625, v686, v746, v805, v863, v920, v976);
  uint64_t v65 = sub_A938(v57, v58, v59, v60, v61, v62, v63, v64, v504, v565, v626, v687, v747, v806, v864, v921, v977, v1032);
  uint64_t v73 = sub_A930( v65,  v66,  v67,  v68,  v69,  v70,  v71,  v72,  v505,  v566,  v627,  v688,  v748,  v807,  v865,  v922,  v978,  v1033,  v1087);
  uint64_t v81 = sub_A928( v73,  v74,  v75,  v76,  v77,  v78,  v79,  v80,  v506,  v567,  v628,  v689,  v749,  v808,  v866,  v923,  v979,  v1034,  v1088,  v1141);
  uint64_t v89 = sub_A920( v81,  v82,  v83,  v84,  v85,  v86,  v87,  v88,  v507,  v568,  v629,  v690,  v750,  v809,  v867,  v924,  v980,  v1035,  v1089,  v1142,  v1194);
  uint64_t v97 = sub_36374( v89,  v90,  v91,  v92,  v93,  v94,  v95,  v96,  v508,  v569,  v630,  v691,  v751,  v810,  v868,  v925,  v981,  v1036,  v1090,  v1143,  v1195,  v1246);
  uint64_t v105 = sub_3636C( v97,  v98,  v99,  v100,  v101,  v102,  v103,  v104,  v509,  v570,  v631,  v692,  v752,  v811,  v869,  v926,  v982,  v1037,  v1091,  v1144,  v1196,  v1247,  v1297);
  uint64_t v113 = sub_36364( v105,  v106,  v107,  v108,  v109,  v110,  v111,  v112,  v510,  v571,  v632,  v693,  v753,  v812,  v870,  v927,  v983,  v1038,  v1092,  v1145,  v1197,  v1248,  v1298,  v1347);
  uint64_t v121 = sub_363F0( v113,  v114,  v115,  v116,  v117,  v118,  v119,  v120,  v511,  v572,  v633,  v694,  v754,  v813,  v871,  v928,  v984,  v1039,  v1093,  v1146,  v1198,  v1249,  v1299,  v1348,  v1396);
  uint64_t v129 = sub_36430( v121,  v122,  v123,  v124,  v125,  v126,  v127,  v128,  v512,  v573,  v634,  v695,  v755,  v814,  v872,  v929,  v985,  v1040,  v1094,  v1147,  v1199,  v1250,  v1300,  v1349,  v1397,  v1444);
  uint64_t v137 = sub_36428( v129,  v130,  v131,  v132,  v133,  v134,  v135,  v136,  v513,  v574,  v635,  v696,  v756,  v815,  v873,  v930,  v986,  v1041,  v1095,  v1148,  v1200,  v1251,  v1301,  v1350,  v1398,  v1445,  v1491);
  uint64_t v145 = sub_36478( v137,  v138,  v139,  v140,  v141,  v142,  v143,  v144,  v514,  v575,  v636,  v697,  v757,  v816,  v874,  v931,  v987,  v1042,  v1096,  v1149,  v1201,  v1252,  v1302,  v1351,  v1399,  v1446,  v1492,  v1537);
  uint64_t v153 = sub_36524( v145,  v146,  v147,  v148,  v149,  v150,  v151,  v152,  v515,  v576,  v637,  v698,  v758,  v817,  v875,  v932,  v988,  v1043,  v1097,  v1150,  v1202,  v1253,  v1303,  v1352,  v1400,  v1447,  v1493,  v1538,  v1582);
  uint64_t v161 = sub_3651C( v153,  v154,  v155,  v156,  v157,  v158,  v159,  v160,  v516,  v577,  v638,  v699,  v759,  v818,  v876,  v933,  v989,  v1044,  v1098,  v1151,  v1203,  v1254,  v1304,  v1353,  v1401,  v1448,  v1494,  v1539,  v1583,  v1626);
  uint64_t v169 = sub_36514( v161,  v162,  v163,  v164,  v165,  v166,  v167,  v168,  v517,  v578,  v639,  v700,  v760,  v819,  v877,  v934,  v990,  v1045,  v1099,  v1152,  v1204,  v1255,  v1305,  v1354,  v1402,  v1449,  v1495,  v1540,  v1584,  v1627,  v1669);
  uint64_t v177 = sub_3650C( v169,  v170,  v171,  v172,  v173,  v174,  v175,  v176,  v518,  v579,  v640,  v701,  v761,  v820,  v878,  v935,  v991,  v1046,  v1100,  v1153,  v1205,  v1256,  v1306,  v1355,  v1403,  v1450,  v1496,  v1541,  v1585,  v1628,  v1670,  v1711);
  uint64_t v185 = sub_36504( v177,  v178,  v179,  v180,  v181,  v182,  v183,  v184,  v519,  v580,  v641,  v702,  v762,  v821,  v879,  v936,  v992,  v1047,  v1101,  v1154,  v1206,  v1257,  v1307,  v1356,  v1404,  v1451,  v1497,  v1542,  v1586,  v1629,  v1671,  v1712,  v1752);
  uint64_t v193 = sub_364FC( v185,  v186,  v187,  v188,  v189,  v190,  v191,  v192,  v520,  v581,  v642,  v703,  v763,  v822,  v880,  v937,  v993,  v1048,  v1102,  v1155,  v1207,  v1258,  v1308,  v1357,  v1405,  v1452,  v1498,  v1543,  v1587,  v1630,  v1672,  v1713,  v1753,  v1792);
  uint64_t v201 = sub_364F4( v193,  v194,  v195,  v196,  v197,  v198,  v199,  v200,  v521,  v582,  v643,  v704,  v764,  v823,  v881,  v938,  v994,  v1049,  v1103,  v1156,  v1208,  v1259,  v1309,  v1358,  v1406,  v1453,  v1499,  v1544,  v1588,  v1631,  v1673,  v1714,  v1754,  v1793,  v1831);
  uint64_t v209 = sub_364EC( v201,  v202,  v203,  v204,  v205,  v206,  v207,  v208,  v522,  v583,  v644,  v705,  v765,  v824,  v882,  v939,  v995,  v1050,  v1104,  v1157,  v1209,  v1260,  v1310,  v1359,  v1407,  v1454,  v1500,  v1545,  v1589,  v1632,  v1674,  v1715,  v1755,  v1794,  v1832,  v1869);
  uint64_t v217 = sub_364E4( v209,  v210,  v211,  v212,  v213,  v214,  v215,  v216,  v523,  v584,  v645,  v706,  v766,  v825,  v883,  v940,  v996,  v1051,  v1105,  v1158,  v1210,  v1261,  v1311,  v1360,  v1408,  v1455,  v1501,  v1546,  v1590,  v1633,  v1675,  v1716,  v1756,  v1795,  v1833,  v1870,  v1906);
  uint64_t v225 = sub_364DC( v217,  v218,  v219,  v220,  v221,  v222,  v223,  v224,  v524,  v585,  v646,  v707,  v767,  v826,  v884,  v941,  v997,  v1052,  v1106,  v1159,  v1211,  v1262,  v1312,  v1361,  v1409,  v1456,  v1502,  v1547,  v1591,  v1634,  v1676,  v1717,  v1757,  v1796,  v1834,  v1871,  v1907,  v1942);
  uint64_t v233 = sub_364D4( v225,  v226,  v227,  v228,  v229,  v230,  v231,  v232,  v525,  v586,  v647,  v708,  v768,  v827,  v885,  v942,  v998,  v1053,  v1107,  v1160,  v1212,  v1263,  v1313,  v1362,  v1410,  v1457,  v1503,  v1548,  v1592,  v1635,  v1677,  v1718,  v1758,  v1797,  v1835,  v1872,  v1908,  v1943,  v1977);
  uint64_t v241 = sub_366F8( v233,  v234,  v235,  v236,  v237,  v238,  v239,  v240,  v526,  v587,  v648,  v709,  v769,  v828,  v886,  v943,  v999,  v1054,  v1108,  v1161,  v1213,  v1264,  v1314,  v1363,  v1411,  v1458,  v1504,  v1549,  v1593,  v1636,  v1678,  v1719,  v1759,  v1798,  v1836,  v1873,  v1909,  v1944,  v1978,  v2011);
  uint64_t v249 = sub_366F0( v241,  v242,  v243,  v244,  v245,  v246,  v247,  v248,  v527,  v588,  v649,  v710,  v770,  v829,  v887,  v944,  v1000,  v1055,  v1109,  v1162,  v1214,  v1265,  v1315,  v1364,  v1412,  v1459,  v1505,  v1550,  v1594,  v1637,  v1679,  v1720,  v1760,  v1799,  v1837,  v1874,  v1910,  v1945,  v1979,  v2012,  v2044);
  uint64_t v257 = sub_36B90( v249,  v250,  v251,  v252,  v253,  v254,  v255,  v256,  v528,  v589,  v650,  v711,  v771,  v830,  v888,  v945,  v1001,  v1056,  v1110,  v1163,  v1215,  v1266,  v1316,  v1365,  v1413,  v1460,  v1506,  v1551,  v1595,  v1638,  v1680,  v1721,  v1761,  v1800,  v1838,  v1875,  v1911,  v1946,  v1980,  v2013,  v2045,  v2076);
  uint64_t v265 = sub_36EF4( v257,  v258,  v259,  v260,  v261,  v262,  v263,  v264,  v529,  v590,  v651,  v712,  v772,  v831,  v889,  v946,  v1002,  v1057,  v1111,  v1164,  v1216,  v1267,  v1317,  v1366,  v1414,  v1461,  v1507,  v1552,  v1596,  v1639,  v1681,  v1722,  v1762,  v1801,  v1839,  v1876,  v1912,  v1947,  v1981,  v2014,  v2046,  v2077,  v2107);
  uint64_t v273 = sub_36EEC( v265,  v266,  v267,  v268,  v269,  v270,  v271,  v272,  v530,  v591,  v652,  v713,  v773,  v832,  v890,  v947,  v1003,  v1058,  v1112,  v1165,  v1217,  v1268,  v1318,  v1367,  v1415,  v1462,  v1508,  v1553,  v1597,  v1640,  v1682,  v1723,  v1763,  v1802,  v1840,  v1877,  v1913,  v1948,  v1982,  v2015,  v2047,  v2078,  v2108,  v2137);
  uint64_t v281 = sub_DD7E4( v273,  v274,  v275,  v276,  v277,  v278,  v279,  v280,  v531,  v592,  v653,  v714,  v774,  v833,  v891,  v948,  v1004,  v1059,  v1113,  v1166,  v1218,  v1269,  v1319,  v1368,  v1416,  v1463,  v1509,  v1554,  v1598,  v1641,  v1683,  v1724,  v1764,  v1803,  v1841,  v1878,  v1914,  v1949,  v1983,  v2016,  v2048,  v2079,  v2109,  v2138,  v2166);
  uint64_t v289 = sub_DD7DC( v281,  v282,  v283,  v284,  v285,  v286,  v287,  v288,  v532,  v593,  v654,  v715,  v775,  v834,  v892,  v949,  v1005,  v1060,  v1114,  v1167,  v1219,  v1270,  v1320,  v1369,  v1417,  v1464,  v1510,  v1555,  v1599,  v1642,  v1684,  v1725,  v1765,  v1804,  v1842,  v1879,  v1915,  v1950,  v1984,  v2017,  v2049,  v2080,  v2110,  v2139,  v2167,  v2194);
  uint64_t v297 = sub_DD7D4( v289,  v290,  v291,  v292,  v293,  v294,  v295,  v296,  v533,  v594,  v655,  v716,  v776,  v835,  v893,  v950,  v1006,  v1061,  v1115,  v1168,  v1220,  v1271,  v1321,  v1370,  v1418,  v1465,  v1511,  v1556,  v1600,  v1643,  v1685,  v1726,  v1766,  v1805,  v1843,  v1880,  v1916,  v1951,  v1985,  v2018,  v2050,  v2081,  v2111,  v2140,  v2168,  v2195,  v2221);
  uint64_t v305 = sub_DD7CC( v297,  v298,  v299,  v300,  v301,  v302,  v303,  v304,  v534,  v595,  v656,  v717,  v777,  v836,  v894,  v951,  v1007,  v1062,  v1116,  v1169,  v1221,  v1272,  v1322,  v1371,  v1419,  v1466,  v1512,  v1557,  v1601,  v1644,  v1686,  v1727,  v1767,  v1806,  v1844,  v1881,  v1917,  v1952,  v1986,  v2019,  v2051,  v2082,  v2112,  v2141,  v2169,  v2196,  v2222,  v2247);
  uint64_t v313 = sub_DD7C4( v305,  v306,  v307,  v308,  v309,  v310,  v311,  v312,  v535,  v596,  v657,  v718,  v778,  v837,  v895,  v952,  v1008,  v1063,  v1117,  v1170,  v1222,  v1273,  v1323,  v1372,  v1420,  v1467,  v1513,  v1558,  v1602,  v1645,  v1687,  v1728,  v1768,  v1807,  v1845,  v1882,  v1918,  v1953,  v1987,  v2020,  v2052,  v2083,  v2113,  v2142,  v2170,  v2197,  v2223,  v2248,  v2272);
  uint64_t v321 = sub_DD7BC( v313,  v314,  v315,  v316,  v317,  v318,  v319,  v320,  v536,  v597,  v658,  v719,  v779,  v838,  v896,  v953,  v1009,  v1064,  v1118,  v1171,  v1223,  v1274,  v1324,  v1373,  v1421,  v1468,  v1514,  v1559,  v1603,  v1646,  v1688,  v1729,  v1769,  v1808,  v1846,  v1883,  v1919,  v1954,  v1988,  v2021,  v2053,  v2084,  v2114,  v2143,  v2171,  v2198,  v2224,  v2249,  v2273,
           v2296);
  uint64_t v329 = sub_DD7B4( v321,  v322,  v323,  v324,  v325,  v326,  v327,  v328,  v537,  v598,  v659,  v720,  v780,  v839,  v897,  v954,  v1010,  v1065,  v1119,  v1172,  v1224,  v1275,  v1325,  v1374,  v1422,  v1469,  v1515,  v1560,  v1604,  v1647,  v1689,  v1730,  v1770,  v1809,  v1847,  v1884,  v1920,  v1955,  v1989,  v2022,  v2054,  v2085,  v2115,  v2144,  v2172,  v2199,  v2225,  v2250,  v2274,
           v2297,
           v2319);
  uint64_t v337 = sub_DD7AC( v329,  v330,  v331,  v332,  v333,  v334,  v335,  v336,  v538,  v599,  v660,  v721,  v781,  v840,  v898,  v955,  v1011,  v1066,  v1120,  v1173,  v1225,  v1276,  v1326,  v1375,  v1423,  v1470,  v1516,  v1561,  v1605,  v1648,  v1690,  v1731,  v1771,  v1810,  v1848,  v1885,  v1921,  v1956,  v1990,  v2023,  v2055,  v2086,  v2116,  v2145,  v2173,  v2200,  v2226,  v2251,  v2275,
           v2298,
           v2320,
           v2341);
  uint64_t v345 = sub_DD7A4( v337,  v338,  v339,  v340,  v341,  v342,  v343,  v344,  v539,  v600,  v661,  v722,  v782,  v841,  v899,  v956,  v1012,  v1067,  v1121,  v1174,  v1226,  v1277,  v1327,  v1376,  v1424,  v1471,  v1517,  v1562,  v1606,  v1649,  v1691,  v1732,  v1772,  v1811,  v1849,  v1886,  v1922,  v1957,  v1991,  v2024,  v2056,  v2087,  v2117,  v2146,  v2174,  v2201,  v2227,  v2252,  v2276,
           v2299,
           v2321,
           v2342,
           v2362);
  uint64_t v353 = sub_DD79C( v345,  v346,  v347,  v348,  v349,  v350,  v351,  v352,  v540,  v601,  v662,  v723,  v783,  v842,  v900,  v957,  v1013,  v1068,  v1122,  v1175,  v1227,  v1278,  v1328,  v1377,  v1425,  v1472,  v1518,  v1563,  v1607,  v1650,  v1692,  v1733,  v1773,  v1812,  v1850,  v1887,  v1923,  v1958,  v1992,  v2025,  v2057,  v2088,  v2118,  v2147,  v2175,  v2202,  v2228,  v2253,  v2277,
           v2300,
           v2322,
           v2343,
           v2363,
           v2382);
  uint64_t v361 = sub_DD794( v353,  v354,  v355,  v356,  v357,  v358,  v359,  v360,  v541,  v602,  v663,  v724,  v784,  v843,  v901,  v958,  v1014,  v1069,  v1123,  v1176,  v1228,  v1279,  v1329,  v1378,  v1426,  v1473,  v1519,  v1564,  v1608,  v1651,  v1693,  v1734,  v1774,  v1813,  v1851,  v1888,  v1924,  v1959,  v1993,  v2026,  v2058,  v2089,  v2119,  v2148,  v2176,  v2203,  v2229,  v2254,  v2278,
           v2301,
           v2323,
           v2344,
           v2364,
           v2383,
           v2401);
  uint64_t v369 = sub_DD78C( v361,  v362,  v363,  v364,  v365,  v366,  v367,  v368,  v542,  v603,  v664,  v725,  v785,  v844,  v902,  v959,  v1015,  v1070,  v1124,  v1177,  v1229,  v1280,  v1330,  v1379,  v1427,  v1474,  v1520,  v1565,  v1609,  v1652,  v1694,  v1735,  v1775,  v1814,  v1852,  v1889,  v1925,  v1960,  v1994,  v2027,  v2059,  v2090,  v2120,  v2149,  v2177,  v2204,  v2230,  v2255,  v2279,
           v2302,
           v2324,
           v2345,
           v2365,
           v2384,
           v2402,
           v2419);
  uint64_t v377 = sub_DD784( v369,  v370,  v371,  v372,  v373,  v374,  v375,  v376,  v543,  v604,  v665,  v726,  v786,  v845,  v903,  v960,  v1016,  v1071,  v1125,  v1178,  v1230,  v1281,  v1331,  v1380,  v1428,  v1475,  v1521,  v1566,  v1610,  v1653,  v1695,  v1736,  v1776,  v1815,  v1853,  v1890,  v1926,  v1961,  v1995,  v2028,  v2060,  v2091,  v2121,  v2150,  v2178,  v2205,  v2231,  v2256,  v2280,
           v2303,
           v2325,
           v2346,
           v2366,
           v2385,
           v2403,
           v2420,
           v2436);
  uint64_t v385 = sub_DD77C( v377,  v378,  v379,  v380,  v381,  v382,  v383,  v384,  v544,  v605,  v666,  v727,  v787,  v846,  v904,  v961,  v1017,  v1072,  v1126,  v1179,  v1231,  v1282,  v1332,  v1381,  v1429,  v1476,  v1522,  v1567,  v1611,  v1654,  v1696,  v1737,  v1777,  v1816,  v1854,  v1891,  v1927,  v1962,  v1996,  v2029,  v2061,  v2092,  v2122,  v2151,  v2179,  v2206,  v2232,  v2257,  v2281,
           v2304,
           v2326,
           v2347,
           v2367,
           v2386,
           v2404,
           v2421,
           v2437,
           v2452);
  uint64_t v393 = sub_DD774( v385,  v386,  v387,  v388,  v389,  v390,  v391,  v392,  v545,  v606,  v667,  v728,  v788,  v847,  v905,  v962,  v1018,  v1073,  v1127,  v1180,  v1232,  v1283,  v1333,  v1382,  v1430,  v1477,  v1523,  v1568,  v1612,  v1655,  v1697,  v1738,  v1778,  v1817,  v1855,  v1892,  v1928,  v1963,  v1997,  v2030,  v2062,  v2093,  v2123,  v2152,  v2180,  v2207,  v2233,  v2258,  v2282,
           v2305,
           v2327,
           v2348,
           v2368,
           v2387,
           v2405,
           v2422,
           v2438,
           v2453,
           v2467);
  uint64_t v401 = sub_DD76C( v393,  v394,  v395,  v396,  v397,  v398,  v399,  v400,  v546,  v607,  v668,  v729,  v789,  v848,  v906,  v963,  v1019,  v1074,  v1128,  v1181,  v1233,  v1284,  v1334,  v1383,  v1431,  v1478,  v1524,  v1569,  v1613,  v1656,  v1698,  v1739,  v1779,  v1818,  v1856,  v1893,  v1929,  v1964,  v1998,  v2031,  v2063,  v2094,  v2124,  v2153,  v2181,  v2208,  v2234,  v2259,  v2283,
           v2306,
           v2328,
           v2349,
           v2369,
           v2388,
           v2406,
           v2423,
           v2439,
           v2454,
           v2468,
           v2481);
  uint64_t v409 = sub_DD764( v401,  v402,  v403,  v404,  v405,  v406,  v407,  v408,  v547,  v608,  v669,  v730,  v790,  v849,  v907,  v964,  v1020,  v1075,  v1129,  v1182,  v1234,  v1285,  v1335,  v1384,  v1432,  v1479,  v1525,  v1570,  v1614,  v1657,  v1699,  v1740,  v1780,  v1819,  v1857,  v1894,  v1930,  v1965,  v1999,  v2032,  v2064,  v2095,  v2125,  v2154,  v2182,  v2209,  v2235,  v2260,  v2284,
           v2307,
           v2329,
           v2350,
           v2370,
           v2389,
           v2407,
           v2424,
           v2440,
           v2455,
           v2469,
           v2482,
           v2494);
  uint64_t v417 = sub_DD75C( v409,  v410,  v411,  v412,  v413,  v414,  v415,  v416,  v548,  v609,  v670,  v731,  v791,  v850,  v908,  v965,  v1021,  v1076,  v1130,  v1183,  v1235,  v1286,  v1336,  v1385,  v1433,  v1480,  v1526,  v1571,  v1615,  v1658,  v1700,  v1741,  v1781,  v1820,  v1858,  v1895,  v1931,  v1966,  v2000,  v2033,  v2065,  v2096,  v2126,  v2155,  v2183,  v2210,  v2236,  v2261,  v2285,
           v2308,
           v2330,
           v2351,
           v2371,
           v2390,
           v2408,
           v2425,
           v2441,
           v2456,
           v2470,
           v2483,
           v2495,
           v2506);
  uint64_t v425 = sub_DD754( v417,  v418,  v419,  v420,  v421,  v422,  v423,  v424,  v549,  v610,  v671,  v732,  v792,  v851,  v909,  v966,  v1022,  v1077,  v1131,  v1184,  v1236,  v1287,  v1337,  v1386,  v1434,  v1481,  v1527,  v1572,  v1616,  v1659,  v1701,  v1742,  v1782,  v1821,  v1859,  v1896,  v1932,  v1967,  v2001,  v2034,  v2066,  v2097,  v2127,  v2156,  v2184,  v2211,  v2237,  v2262,  v2286,
           v2309,
           v2331,
           v2352,
           v2372,
           v2391,
           v2409,
           v2426,
           v2442,
           v2457,
           v2471,
           v2484,
           v2496,
           v2507,
           v2517);
  uint64_t v433 = sub_DD74C( v425,  v426,  v427,  v428,  v429,  v430,  v431,  v432,  v550,  v611,  v672,  v733,  v793,  v852,  v910,  v967,  v1023,  v1078,  v1132,  v1185,  v1237,  v1288,  v1338,  v1387,  v1435,  v1482,  v1528,  v1573,  v1617,  v1660,  v1702,  v1743,  v1783,  v1822,  v1860,  v1897,  v1933,  v1968,  v2002,  v2035,  v2067,  v2098,  v2128,  v2157,  v2185,  v2212,  v2238,  v2263,  v2287,
           v2310,
           v2332,
           v2353,
           v2373,
           v2392,
           v2410,
           v2427,
           v2443,
           v2458,
           v2472,
           v2485,
           v2497,
           v2508,
           v2518);
  uint64_t v441 = sub_DD744( v433,  v434,  v435,  v436,  v437,  v438,  v439,  v440,  v551,  v612,  v673,  v734,  v794,  v853,  v911,  v968,  v1024,  v1079,  v1133,  v1186,  v1238,  v1289,  v1339,  v1388,  v1436,  v1483,  v1529,  v1574,  v1618,  v1661,  v1703,  v1744,  v1784,  v1823,  v1861,  v1898,  v1934,  v1969,  v2003,  v2036,  v2068,  v2099,  v2129,  v2158,  v2186,  v2213,  v2239,  v2264,  v2288,
           v2311,
           v2333,
           v2354,
           v2374,
           v2393,
           v2411,
           v2428,
           v2444,
           v2459,
           v2473,
           v2486,
           v2498,
           v2509,
           v2519);
  uint64_t v449 = sub_DD73C( v441,  v442,  v443,  v444,  v445,  v446,  v447,  v448,  v552,  v613,  v674,  v735,  v795,  v854,  v912,  v969,  v1025,  v1080,  v1134,  v1187,  v1239,  v1290,  v1340,  v1389,  v1437,  v1484,  v1530,  v1575,  v1619,  v1662,  v1704,  v1745,  v1785,  v1824,  v1862,  v1899,  v1935,  v1970,  v2004,  v2037,  v2069,  v2100,  v2130,  v2159,  v2187,  v2214,  v2240,  v2265,  v2289,
           v2312,
           v2334,
           v2355,
           v2375,
           v2394,
           v2412,
           v2429,
           v2445,
           v2460,
           v2474,
           v2487,
           v2499,
           v2510,
           v2520);
  uint64_t v457 = sub_DD734( v449,  v450,  v451,  v452,  v453,  v454,  v455,  v456,  v553,  v614,  v675,  v736,  v796,  v855,  v913,  v970,  v1026,  v1081,  v1135,  v1188,  v1240,  v1291,  v1341,  v1390,  v1438,  v1485,  v1531,  v1576,  v1620,  v1663,  v1705,  v1746,  v1786,  v1825,  v1863,  v1900,  v1936,  v1971,  v2005,  v2038,  v2070,  v2101,  v2131,  v2160,  v2188,  v2215,  v2241,  v2266,  v2290,
           v2313,
           v2335,
           v2356,
           v2376,
           v2395,
           v2413,
           v2430,
           v2446,
           v2461,
           v2475,
           v2488,
           v2500,
           v2511,
           v2521);
  uint64_t v465 = sub_DD72C( v457,  v458,  v459,  v460,  v461,  v462,  v463,  v464,  v554,  v615,  v676,  v737,  v797,  v856,  v914,  v971,  v1027,  v1082,  v1136,  v1189,  v1241,  v1292,  v1342,  v1391,  v1439,  v1486,  v1532,  v1577,  v1621,  v1664,  v1706,  v1747,  v1787,  v1826,  v1864,  v1901,  v1937,  v1972,  v2006,  v2039,  v2071,  v2102,  v2132,  v2161,  v2189,  v2216,  v2242,  v2267,  v2291,
           v2314,
           v2336,
           v2357,
           v2377,
           v2396,
           v2414,
           v2431,
           v2447,
           v2462,
           v2476,
           v2489,
           v2501,
           v2512,
           v2522);
  uint64_t v473 = sub_DD724( v465,  v466,  v467,  v468,  v469,  v470,  v471,  v472,  v555,  v616,  v677,  v738,  v798,  v857,  v915,  v972,  v1028,  v1083,  v1137,  v1190,  v1242,  v1293,  v1343,  v1392,  v1440,  v1487,  v1533,  v1578,  v1622,  v1665,  v1707,  v1748,  v1788,  v1827,  v1865,  v1902,  v1938,  v1973,  v2007,  v2040,  v2072,  v2103,  v2133,  v2162,  v2190,  v2217,  v2243,  v2268,  v2292,
           v2315,
           v2337,
           v2358,
           v2378,
           v2397,
           v2415,
           v2432,
           v2448,
           v2463,
           v2477,
           v2490,
           v2502,
           v2513,
           v2523);
  uint64_t v481 = sub_DD71C( v473,  v474,  v475,  v476,  v477,  v478,  v479,  v480,  v556,  v617,  v678,  v739,  v799,  v858,  v916,  v973,  v1029,  v1084,  v1138,  v1191,  v1243,  v1294,  v1344,  v1393,  v1441,  v1488,  v1534,  v1579,  v1623,  v1666,  v1708,  v1749,  v1789,  v1828,  v1866,  v1903,  v1939,  v1974,  v2008,  v2041,  v2073,  v2104,  v2134,  v2163,  v2191,  v2218,  v2244,  v2269,  v2293,
           v2316,
           v2338,
           v2359,
           v2379,
           v2398,
           v2416,
           v2433,
           v2449,
           v2464,
           v2478,
           v2491,
           v2503,
           v2514,
           v2524);
  uint64_t v489 = sub_DD714( v481,  v482,  v483,  v484,  v485,  v486,  v487,  v488,  v557,  v618,  v679,  v740,  v800,  v859,  v917,  v974,  v1030,  v1085,  v1139,  v1192,  v1244,  v1295,  v1345,  v1394,  v1442,  v1489,  v1535,  v1580,  v1624,  v1667,  v1709,  v1750,  v1790,  v1829,  v1867,  v1904,  v1940,  v1975,  v2009,  v2042,  v2074,  v2105,  v2135,  v2164,  v2192,  v2219,  v2245,  v2270,  v2294,
           v2317,
           v2339,
           v2360,
           v2380,
           v2399,
           v2417,
           v2434,
           v2450,
           v2465,
           v2479,
           v2492,
           v2504,
           v2515,
           v2525);
  sub_DD70C( v489,  v490,  v491,  v492,  v493,  v494,  v495,  v496,  v558,  v619,  v680,  v741,  v801,  v860,  v918,  v975,  v1031,  v1086,  v1140,  v1193,  v1245,  v1296,  v1346,  v1395,  v1443,  v1490,  v1536,  v1581,  v1625,  v1668,  v1710,  v1751,  v1791,  v1830,  v1868,  v1905,  v1941,  v1976,  v2010,  v2043,  v2075,  v2106,  v2136,  v2165,  v2193,  v2220,  v2246,  v2271,  v2295,
    v2318,
    v2340,
    v2361,
    v2381,
    v2400,
    v2418,
    v2435,
    v2451,
    v2466,
    v2480,
    v2493,
    v2505,
    v2516,
    v2526);
  sub_DD704();
  sub_DD6FC();
  sub_DD6F4();
  sub_DD6EC();
  sub_DD6E4();
  sub_DD6DC();
  sub_DD6D4();
  sub_DD6CC();
  sub_DD6C4();
  sub_DD6BC();
  sub_DD6B4();
  sub_DD6AC();
  sub_DD6A4();
  sub_DD69C();
  sub_DD694();
  sub_DD68C();
  sub_DD684();
  sub_DD67C();
  sub_DD674();
  sub_DD66C();
  sub_DD664();
  sub_DD65C();
  sub_DD654();
  sub_DD64C();
  sub_DD644();
  sub_DD63C();
  sub_DD634();
  sub_DD62C();
  sub_DD624();
  sub_DD61C();
  sub_DD614();
  sub_DD60C();
  sub_DD604();
  sub_DD5FC();
  sub_DD5F4();
  sub_DD5EC();
  sub_DD5E4();
  sub_DD5DC();
  sub_DD5D4();
  sub_DD5CC();
  sub_DD5C4();
  sub_DD5BC();
  sub_DD5B4();
  sub_DD5AC();
  sub_DD5A4();
  sub_DD59C();
  sub_DD594();
  sub_DD58C();
  sub_DD584();
  sub_DD57C();
  sub_DD574();
  sub_DD56C();
  sub_DD564();
  sub_DD55C();
  sub_DD554();
  sub_DD54C();
  sub_DD544();
  sub_DD53C();
  sub_DD534();
  sub_DD52C();
  sub_DD524();
  sub_DD51C();
  sub_DD514();
  sub_DD50C();
  sub_DD504();
  sub_DD4FC();
  sub_DD4F4();
  sub_DD4EC();
  sub_DD4DC();
  sub_DD4E4();
  sub_36B88();
  sub_366E8();
  sub_3677C();
  sub_36588();
  sub_36624();
  sub_3661C();
  sub_36614();
  sub_3660C();
  sub_36604();
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  sub_366B8();
  sub_366B0();
  sub_366A8();
  sub_36814();
  swift_task_dealloc(v2545);
  swift_task_dealloc(v2547);
  swift_task_dealloc(v2549);
  swift_task_dealloc(v2551);
  return sub_36148(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_D3324()
{
  os_log_type_t v5 = sub_A898();
  if (sub_46614(v5))
  {
    uint64_t v6 = (_WORD *)sub_3635C();
    sub_36908(v6);
    sub_DD494();
    sub_DA1C();
    sub_232EC( &dword_0,  v0,  v2,  "Couldn't create logspecificmedrejectedconfirmationresultset pattern, returning GenericErrorFlow",  v3);
    sub_37128();
  }

  else
  {

    swift_bridgeObjectRelease();
  }

  sub_3747C();
  id v7 = *(void **)(v1 + 28272);
  v2568 = *(void **)(v1 + 28136);
  unsigned __int8 v2558 = *(_BYTE *)(v1 + 28517);
  uint64_t v8 = *(void **)(v1 + 28120);
  uint64_t v2564 = *(void *)(v1 + 27584);
  uint64_t v2560 = *(void *)(v1 + 27568);
  uint64_t v2561 = *(void *)(v1 + 27576);
  uint64_t v2559 = *(void *)(v1 + 27560);
  uint64_t v9 = *(void *)(v1 + 27552);
  uint64_t v10 = *(void *)(v1 + 27544);
  sub_DE3C0();
  uint64_t v2565 = *(void *)(v1 + 26384);
  uint64_t v2566 = *(void *)(v1 + 26400);
  sub_DE42C();
  uint64_t v2567 = *(void *)(v1 + 26144);
  uint64_t v2562 = v11;
  uint64_t v2563 = *(void *)(v1 + 26136);
  sub_A13C((_OWORD *)(*(void *)(v1 + 25976) + 64LL), (_OWORD *)(v1 + 16288));
  sub_5A9B0((void *)(v1 + 16288), (void *)(v1 + 16128));
  sub_A178();
  sub_DEE80();

  uint64_t v12 = sub_80C98();
  sub_3561C(v12, v13, v10, v9, v2559, v2560, v2561, v2564, v2558);

  sub_A1B4((void *)(v1 + 16128));
  (*(void (**)(uint64_t, uint64_t))(v2562 + 8))(v2566, v2565);
  sub_464D0(v2563);
  sub_464D0(v2567);
  uint64_t v14 = sub_DDB08();
  sub_DDC20(v14, type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters);
  sub_DDE0C(v15, type metadata accessor for SnippetHeaderModel);
  sub_DDA68(v16, &qword_189D00);
  sub_DDBDC(v17, &qword_18B168);
  swift_bridgeObjectRelease();
  sub_DBE38();
  sub_A8F4();
  sub_A85C();
  sub_A864();
  sub_A910();
  sub_A8EC();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  uint64_t v18 = sub_A78C();
  uint64_t v26 = sub_AAD8(v18, v19, v20, v21, v22, v23, v24, v25, v524, v587);
  uint64_t v34 = sub_A888(v26, v27, v28, v29, v30, v31, v32, v33, v525, v588, v650);
  uint64_t v42 = sub_A854(v34, v35, v36, v37, v38, v39, v40, v41, v526, v589, v651, v712);
  uint64_t v50 = sub_A84C(v42, v43, v44, v45, v46, v47, v48, v49, v527, v590, v652, v713, v773);
  uint64_t v58 = sub_A844(v50, v51, v52, v53, v54, v55, v56, v57, v528, v591, v653, v714, v774, v833);
  uint64_t v66 = sub_A83C(v58, v59, v60, v61, v62, v63, v64, v65, v529, v592, v654, v715, v775, v834, v892);
  uint64_t v74 = sub_A95C(v66, v67, v68, v69, v70, v71, v72, v73, v530, v593, v655, v716, v776, v835, v893, v950);
  uint64_t v82 = sub_A954(v74, v75, v76, v77, v78, v79, v80, v81, v531, v594, v656, v717, v777, v836, v894, v951, v1007);
  uint64_t v90 = sub_A938(v82, v83, v84, v85, v86, v87, v88, v89, v532, v595, v657, v718, v778, v837, v895, v952, v1008, v1063);
  uint64_t v98 = sub_A930( v90,  v91,  v92,  v93,  v94,  v95,  v96,  v97,  v533,  v596,  v658,  v719,  v779,  v838,  v896,  v953,  v1009,  v1064,  v1118);
  uint64_t v106 = sub_A928( v98,  v99,  v100,  v101,  v102,  v103,  v104,  v105,  v534,  v597,  v659,  v720,  v780,  v839,  v897,  v954,  v1010,  v1065,  v1119,  v1172);
  uint64_t v114 = sub_A920( v106,  v107,  v108,  v109,  v110,  v111,  v112,  v113,  v535,  v598,  v660,  v721,  v781,  v840,  v898,  v955,  v1011,  v1066,  v1120,  v1173,  v1225);
  uint64_t v122 = sub_36374( v114,  v115,  v116,  v117,  v118,  v119,  v120,  v121,  v536,  v599,  v661,  v722,  v782,  v841,  v899,  v956,  v1012,  v1067,  v1121,  v1174,  v1226,  v1277);
  uint64_t v130 = sub_3636C( v122,  v123,  v124,  v125,  v126,  v127,  v128,  v129,  v537,  v600,  v662,  v723,  v783,  v842,  v900,  v957,  v1013,  v1068,  v1122,  v1175,  v1227,  v1278,  v1328);
  uint64_t v138 = sub_36364( v130,  v131,  v132,  v133,  v134,  v135,  v136,  v137,  v538,  v601,  v663,  v724,  v784,  v843,  v901,  v958,  v1014,  v1069,  v1123,  v1176,  v1228,  v1279,  v1329,  v1378);
  uint64_t v146 = sub_363F0( v138,  v139,  v140,  v141,  v142,  v143,  v144,  v145,  v539,  v602,  v664,  v725,  v785,  v844,  v902,  v959,  v1015,  v1070,  v1124,  v1177,  v1229,  v1280,  v1330,  v1379,  v1427);
  uint64_t v154 = sub_36430( v146,  v147,  v148,  v149,  v150,  v151,  v152,  v153,  v540,  v603,  v665,  v726,  v786,  v845,  v903,  v960,  v1016,  v1071,  v1125,  v1178,  v1230,  v1281,  v1331,  v1380,  v1428,  v1475);
  uint64_t v162 = sub_36428( v154,  v155,  v156,  v157,  v158,  v159,  v160,  v161,  v541,  v604,  v666,  v727,  v787,  v846,  v904,  v961,  v1017,  v1072,  v1126,  v1179,  v1231,  v1282,  v1332,  v1381,  v1429,  v1476,  v1522);
  uint64_t v170 = sub_36478( v162,  v163,  v164,  v165,  v166,  v167,  v168,  v169,  v542,  v605,  v667,  v728,  v788,  v847,  v905,  v962,  v1018,  v1073,  v1127,  v1180,  v1232,  v1283,  v1333,  v1382,  v1430,  v1477,  v1523,  v1568);
  uint64_t v178 = sub_36524( v170,  v171,  v172,  v173,  v174,  v175,  v176,  v177,  v543,  v606,  v668,  v729,  v789,  v848,  v906,  v963,  v1019,  v1074,  v1128,  v1181,  v1233,  v1284,  v1334,  v1383,  v1431,  v1478,  v1524,  v1569,  v1613);
  uint64_t v186 = sub_3651C( v178,  v179,  v180,  v181,  v182,  v183,  v184,  v185,  v544,  v607,  v669,  v730,  v790,  v849,  v907,  v964,  v1020,  v1075,  v1129,  v1182,  v1234,  v1285,  v1335,  v1384,  v1432,  v1479,  v1525,  v1570,  v1614,  v1657);
  uint64_t v194 = sub_36514( v186,  v187,  v188,  v189,  v190,  v191,  v192,  v193,  v545,  v608,  v670,  v731,  v791,  v850,  v908,  v965,  v1021,  v1076,  v1130,  v1183,  v1235,  v1286,  v1336,  v1385,  v1433,  v1480,  v1526,  v1571,  v1615,  v1658,  v1700);
  uint64_t v202 = sub_3650C( v194,  v195,  v196,  v197,  v198,  v199,  v200,  v201,  v546,  v609,  v671,  v732,  v792,  v851,  v909,  v966,  v1022,  v1077,  v1131,  v1184,  v1236,  v1287,  v1337,  v1386,  v1434,  v1481,  v1527,  v1572,  v1616,  v1659,  v1701,  v1742);
  uint64_t v210 = sub_36504( v202,  v203,  v204,  v205,  v206,  v207,  v208,  v209,  v547,  v610,  v672,  v733,  v793,  v852,  v910,  v967,  v1023,  v1078,  v1132,  v1185,  v1237,  v1288,  v1338,  v1387,  v1435,  v1482,  v1528,  v1573,  v1617,  v1660,  v1702,  v1743,  v1783);
  uint64_t v218 = sub_364FC( v210,  v211,  v212,  v213,  v214,  v215,  v216,  v217,  v548,  v611,  v673,  v734,  v794,  v853,  v911,  v968,  v1024,  v1079,  v1133,  v1186,  v1238,  v1289,  v1339,  v1388,  v1436,  v1483,  v1529,  v1574,  v1618,  v1661,  v1703,  v1744,  v1784,  v1823);
  uint64_t v226 = sub_364F4( v218,  v219,  v220,  v221,  v222,  v223,  v224,  v225,  v549,  v612,  v674,  v735,  v795,  v854,  v912,  v969,  v1025,  v1080,  v1134,  v1187,  v1239,  v1290,  v1340,  v1389,  v1437,  v1484,  v1530,  v1575,  v1619,  v1662,  v1704,  v1745,  v1785,  v1824,  v1862);
  uint64_t v234 = sub_364EC( v226,  v227,  v228,  v229,  v230,  v231,  v232,  v233,  v550,  v613,  v675,  v736,  v796,  v855,  v913,  v970,  v1026,  v1081,  v1135,  v1188,  v1240,  v1291,  v1341,  v1390,  v1438,  v1485,  v1531,  v1576,  v1620,  v1663,  v1705,  v1746,  v1786,  v1825,  v1863,  v1900);
  uint64_t v242 = sub_364E4( v234,  v235,  v236,  v237,  v238,  v239,  v240,  v241,  v551,  v614,  v676,  v737,  v797,  v856,  v914,  v971,  v1027,  v1082,  v1136,  v1189,  v1241,  v1292,  v1342,  v1391,  v1439,  v1486,  v1532,  v1577,  v1621,  v1664,  v1706,  v1747,  v1787,  v1826,  v1864,  v1901,  v1937);
  uint64_t v250 = sub_364DC( v242,  v243,  v244,  v245,  v246,  v247,  v248,  v249,  v552,  v615,  v677,  v738,  v798,  v857,  v915,  v972,  v1028,  v1083,  v1137,  v1190,  v1242,  v1293,  v1343,  v1392,  v1440,  v1487,  v1533,  v1578,  v1622,  v1665,  v1707,  v1748,  v1788,  v1827,  v1865,  v1902,  v1938,  v1973);
  uint64_t v258 = sub_364D4( v250,  v251,  v252,  v253,  v254,  v255,  v256,  v257,  v553,  v616,  v678,  v739,  v799,  v858,  v916,  v973,  v1029,  v1084,  v1138,  v1191,  v1243,  v1294,  v1344,  v1393,  v1441,  v1488,  v1534,  v1579,  v1623,  v1666,  v1708,  v1749,  v1789,  v1828,  v1866,  v1903,  v1939,  v1974,  v2008);
  uint64_t v266 = sub_366F8( v258,  v259,  v260,  v261,  v262,  v263,  v264,  v265,  v554,  v617,  v679,  v740,  v800,  v859,  v917,  v974,  v1030,  v1085,  v1139,  v1192,  v1244,  v1295,  v1345,  v1394,  v1442,  v1489,  v1535,  v1580,  v1624,  v1667,  v1709,  v1750,  v1790,  v1829,  v1867,  v1904,  v1940,  v1975,  v2009,  v2042);
  uint64_t v274 = sub_366F0( v266,  v267,  v268,  v269,  v270,  v271,  v272,  v273,  v555,  v618,  v680,  v741,  v801,  v860,  v918,  v975,  v1031,  v1086,  v1140,  v1193,  v1245,  v1296,  v1346,  v1395,  v1443,  v1490,  v1536,  v1581,  v1625,  v1668,  v1710,  v1751,  v1791,  v1830,  v1868,  v1905,  v1941,  v1976,  v2010,  v2043,  v2075);
  uint64_t v282 = sub_36B90( v274,  v275,  v276,  v277,  v278,  v279,  v280,  v281,  v556,  v619,  v681,  v742,  v802,  v861,  v919,  v976,  v1032,  v1087,  v1141,  v1194,  v1246,  v1297,  v1347,  v1396,  v1444,  v1491,  v1537,  v1582,  v1626,  v1669,  v1711,  v1752,  v1792,  v1831,  v1869,  v1906,  v1942,  v1977,  v2011,  v2044,  v2076,  v2107);
  uint64_t v290 = sub_36EF4( v282,  v283,  v284,  v285,  v286,  v287,  v288,  v289,  v557,  v620,  v682,  v743,  v803,  v862,  v920,  v977,  v1033,  v1088,  v1142,  v1195,  v1247,  v1298,  v1348,  v1397,  v1445,  v1492,  v1538,  v1583,  v1627,  v1670,  v1712,  v1753,  v1793,  v1832,  v1870,  v1907,  v1943,  v1978,  v2012,  v2045,  v2077,  v2108,  v2138);
  uint64_t v298 = sub_36EEC( v290,  v291,  v292,  v293,  v294,  v295,  v296,  v297,  v558,  v621,  v683,  v744,  v804,  v863,  v921,  v978,  v1034,  v1089,  v1143,  v1196,  v1248,  v1299,  v1349,  v1398,  v1446,  v1493,  v1539,  v1584,  v1628,  v1671,  v1713,  v1754,  v1794,  v1833,  v1871,  v1908,  v1944,  v1979,  v2013,  v2046,  v2078,  v2109,  v2139,  v2168);
  uint64_t v306 = sub_DD7E4( v298,  v299,  v300,  v301,  v302,  v303,  v304,  v305,  v559,  v622,  v684,  v745,  v805,  v864,  v922,  v979,  v1035,  v1090,  v1144,  v1197,  v1249,  v1300,  v1350,  v1399,  v1447,  v1494,  v1540,  v1585,  v1629,  v1672,  v1714,  v1755,  v1795,  v1834,  v1872,  v1909,  v1945,  v1980,  v2014,  v2047,  v2079,  v2110,  v2140,  v2169,  v2197);
  uint64_t v314 = sub_DD7DC( v306,  v307,  v308,  v309,  v310,  v311,  v312,  v313,  v560,  v623,  v685,  v746,  v806,  v865,  v923,  v980,  v1036,  v1091,  v1145,  v1198,  v1250,  v1301,  v1351,  v1400,  v1448,  v1495,  v1541,  v1586,  v1630,  v1673,  v1715,  v1756,  v1796,  v1835,  v1873,  v1910,  v1946,  v1981,  v2015,  v2048,  v2080,  v2111,  v2141,  v2170,  v2198,  v2225);
  uint64_t v322 = sub_DD7D4( v314,  v315,  v316,  v317,  v318,  v319,  v320,  v321,  v561,  v624,  v686,  v747,  v807,  v866,  v924,  v981,  v1037,  v1092,  v1146,  v1199,  v1251,  v1302,  v1352,  v1401,  v1449,  v1496,  v1542,  v1587,  v1631,  v1674,  v1716,  v1757,  v1797,  v1836,  v1874,  v1911,  v1947,  v1982,  v2016,  v2049,  v2081,  v2112,  v2142,  v2171,  v2199,  v2226,  v2252);
  uint64_t v330 = sub_DD7CC( v322,  v323,  v324,  v325,  v326,  v327,  v328,  v329,  v562,  v625,  v687,  v748,  v808,  v867,  v925,  v982,  v1038,  v1093,  v1147,  v1200,  v1252,  v1303,  v1353,  v1402,  v1450,  v1497,  v1543,  v1588,  v1632,  v1675,  v1717,  v1758,  v1798,  v1837,  v1875,  v1912,  v1948,  v1983,  v2017,  v2050,  v2082,  v2113,  v2143,  v2172,  v2200,  v2227,  v2253,  v2278);
  uint64_t v338 = sub_DD7C4( v330,  v331,  v332,  v333,  v334,  v335,  v336,  v337,  v563,  v626,  v688,  v749,  v809,  v868,  v926,  v983,  v1039,  v1094,  v1148,  v1201,  v1253,  v1304,  v1354,  v1403,  v1451,  v1498,  v1544,  v1589,  v1633,  v1676,  v1718,  v1759,  v1799,  v1838,  v1876,  v1913,  v1949,  v1984,  v2018,  v2051,  v2083,  v2114,  v2144,  v2173,  v2201,  v2228,  v2254,  v2279,  v2303);
  uint64_t v346 = sub_DD7BC( v338,  v339,  v340,  v341,  v342,  v343,  v344,  v345,  v564,  v627,  v689,  v750,  v810,  v869,  v927,  v984,  v1040,  v1095,  v1149,  v1202,  v1254,  v1305,  v1355,  v1404,  v1452,  v1499,  v1545,  v1590,  v1634,  v1677,  v1719,  v1760,  v1800,  v1839,  v1877,  v1914,  v1950,  v1985,  v2019,  v2052,  v2084,  v2115,  v2145,  v2174,  v2202,  v2229,  v2255,  v2280,  v2304,
           v2327);
  uint64_t v354 = sub_DD7B4( v346,  v347,  v348,  v349,  v350,  v351,  v352,  v353,  v565,  v628,  v690,  v751,  v811,  v870,  v928,  v985,  v1041,  v1096,  v1150,  v1203,  v1255,  v1306,  v1356,  v1405,  v1453,  v1500,  v1546,  v1591,  v1635,  v1678,  v1720,  v1761,  v1801,  v1840,  v1878,  v1915,  v1951,  v1986,  v2020,  v2053,  v2085,  v2116,  v2146,  v2175,  v2203,  v2230,  v2256,  v2281,  v2305,
           v2328,
           v2350);
  uint64_t v362 = sub_DD7AC( v354,  v355,  v356,  v357,  v358,  v359,  v360,  v361,  v566,  v629,  v691,  v752,  v812,  v871,  v929,  v986,  v1042,  v1097,  v1151,  v1204,  v1256,  v1307,  v1357,  v1406,  v1454,  v1501,  v1547,  v1592,  v1636,  v1679,  v1721,  v1762,  v1802,  v1841,  v1879,  v1916,  v1952,  v1987,  v2021,  v2054,  v2086,  v2117,  v2147,  v2176,  v2204,  v2231,  v2257,  v2282,  v2306,
           v2329,
           v2351,
           v2372);
  uint64_t v370 = sub_DD7A4( v362,  v363,  v364,  v365,  v366,  v367,  v368,  v369,  v567,  v630,  v692,  v753,  v813,  v872,  v930,  v987,  v1043,  v1098,  v1152,  v1205,  v1257,  v1308,  v1358,  v1407,  v1455,  v1502,  v1548,  v1593,  v1637,  v1680,  v1722,  v1763,  v1803,  v1842,  v1880,  v1917,  v1953,  v1988,  v2022,  v2055,  v2087,  v2118,  v2148,  v2177,  v2205,  v2232,  v2258,  v2283,  v2307,
           v2330,
           v2352,
           v2373,
           v2393);
  uint64_t v378 = sub_DD79C( v370,  v371,  v372,  v373,  v374,  v375,  v376,  v377,  v568,  v631,  v693,  v754,  v814,  v873,  v931,  v988,  v1044,  v1099,  v1153,  v1206,  v1258,  v1309,  v1359,  v1408,  v1456,  v1503,  v1549,  v1594,  v1638,  v1681,  v1723,  v1764,  v1804,  v1843,  v1881,  v1918,  v1954,  v1989,  v2023,  v2056,  v2088,  v2119,  v2149,  v2178,  v2206,  v2233,  v2259,  v2284,  v2308,
           v2331,
           v2353,
           v2374,
           v2394,
           v2413);
  uint64_t v386 = sub_DD794( v378,  v379,  v380,  v381,  v382,  v383,  v384,  v385,  v569,  v632,  v694,  v755,  v815,  v874,  v932,  v989,  v1045,  v1100,  v1154,  v1207,  v1259,  v1310,  v1360,  v1409,  v1457,  v1504,  v1550,  v1595,  v1639,  v1682,  v1724,  v1765,  v1805,  v1844,  v1882,  v1919,  v1955,  v1990,  v2024,  v2057,  v2089,  v2120,  v2150,  v2179,  v2207,  v2234,  v2260,  v2285,  v2309,
           v2332,
           v2354,
           v2375,
           v2395,
           v2414,
           v2432);
  uint64_t v394 = sub_DD78C( v386,  v387,  v388,  v389,  v390,  v391,  v392,  v393,  v570,  v633,  v695,  v756,  v816,  v875,  v933,  v990,  v1046,  v1101,  v1155,  v1208,  v1260,  v1311,  v1361,  v1410,  v1458,  v1505,  v1551,  v1596,  v1640,  v1683,  v1725,  v1766,  v1806,  v1845,  v1883,  v1920,  v1956,  v1991,  v2025,  v2058,  v2090,  v2121,  v2151,  v2180,  v2208,  v2235,  v2261,  v2286,  v2310,
           v2333,
           v2355,
           v2376,
           v2396,
           v2415,
           v2433,
           v2450);
  uint64_t v402 = sub_DD784( v394,  v395,  v396,  v397,  v398,  v399,  v400,  v401,  v571,  v634,  v696,  v757,  v817,  v876,  v934,  v991,  v1047,  v1102,  v1156,  v1209,  v1261,  v1312,  v1362,  v1411,  v1459,  v1506,  v1552,  v1597,  v1641,  v1684,  v1726,  v1767,  v1807,  v1846,  v1884,  v1921,  v1957,  v1992,  v2026,  v2059,  v2091,  v2122,  v2152,  v2181,  v2209,  v2236,  v2262,  v2287,  v2311,
           v2334,
           v2356,
           v2377,
           v2397,
           v2416,
           v2434,
           v2451,
           v2467);
  uint64_t v410 = sub_DD77C( v402,  v403,  v404,  v405,  v406,  v407,  v408,  v409,  v572,  v635,  v697,  v758,  v818,  v877,  v935,  v992,  v1048,  v1103,  v1157,  v1210,  v1262,  v1313,  v1363,  v1412,  v1460,  v1507,  v1553,  v1598,  v1642,  v1685,  v1727,  v1768,  v1808,  v1847,  v1885,  v1922,  v1958,  v1993,  v2027,  v2060,  v2092,  v2123,  v2153,  v2182,  v2210,  v2237,  v2263,  v2288,  v2312,
           v2335,
           v2357,
           v2378,
           v2398,
           v2417,
           v2435,
           v2452,
           v2468,
           v2483);
  uint64_t v418 = sub_DD774( v410,  v411,  v412,  v413,  v414,  v415,  v416,  v417,  v573,  v636,  v698,  v759,  v819,  v878,  v936,  v993,  v1049,  v1104,  v1158,  v1211,  v1263,  v1314,  v1364,  v1413,  v1461,  v1508,  v1554,  v1599,  v1643,  v1686,  v1728,  v1769,  v1809,  v1848,  v1886,  v1923,  v1959,  v1994,  v2028,  v2061,  v2093,  v2124,  v2154,  v2183,  v2211,  v2238,  v2264,  v2289,  v2313,
           v2336,
           v2358,
           v2379,
           v2399,
           v2418,
           v2436,
           v2453,
           v2469,
           v2484,
           v2498);
  uint64_t v426 = sub_DD76C( v418,  v419,  v420,  v421,  v422,  v423,  v424,  v425,  v574,  v637,  v699,  v760,  v820,  v879,  v937,  v994,  v1050,  v1105,  v1159,  v1212,  v1264,  v1315,  v1365,  v1414,  v1462,  v1509,  v1555,  v1600,  v1644,  v1687,  v1729,  v1770,  v1810,  v1849,  v1887,  v1924,  v1960,  v1995,  v2029,  v2062,  v2094,  v2125,  v2155,  v2184,  v2212,  v2239,  v2265,  v2290,  v2314,
           v2337,
           v2359,
           v2380,
           v2400,
           v2419,
           v2437,
           v2454,
           v2470,
           v2485,
           v2499,
           v2512);
  uint64_t v434 = sub_DD764( v426,  v427,  v428,  v429,  v430,  v431,  v432,  v433,  v575,  v638,  v700,  v761,  v821,  v880,  v938,  v995,  v1051,  v1106,  v1160,  v1213,  v1265,  v1316,  v1366,  v1415,  v1463,  v1510,  v1556,  v1601,  v1645,  v1688,  v1730,  v1771,  v1811,  v1850,  v1888,  v1925,  v1961,  v1996,  v2030,  v2063,  v2095,  v2126,  v2156,  v2185,  v2213,  v2240,  v2266,  v2291,  v2315,
           v2338,
           v2360,
           v2381,
           v2401,
           v2420,
           v2438,
           v2455,
           v2471,
           v2486,
           v2500,
           v2513,
           v2525);
  uint64_t v442 = sub_DD75C( v434,  v435,  v436,  v437,  v438,  v439,  v440,  v441,  v576,  v639,  v701,  v762,  v822,  v881,  v939,  v996,  v1052,  v1107,  v1161,  v1214,  v1266,  v1317,  v1367,  v1416,  v1464,  v1511,  v1557,  v1602,  v1646,  v1689,  v1731,  v1772,  v1812,  v1851,  v1889,  v1926,  v1962,  v1997,  v2031,  v2064,  v2096,  v2127,  v2157,  v2186,  v2214,  v2241,  v2267,  v2292,  v2316,
           v2339,
           v2361,
           v2382,
           v2402,
           v2421,
           v2439,
           v2456,
           v2472,
           v2487,
           v2501,
           v2514,
           v2526,
           v2537);
  uint64_t v450 = sub_DD754( v442,  v443,  v444,  v445,  v446,  v447,  v448,  v449,  v577,  v640,  v702,  v763,  v823,  v882,  v940,  v997,  v1053,  v1108,  v1162,  v1215,  v1267,  v1318,  v1368,  v1417,  v1465,  v1512,  v1558,  v1603,  v1647,  v1690,  v1732,  v1773,  v1813,  v1852,  v1890,  v1927,  v1963,  v1998,  v2032,  v2065,  v2097,  v2128,  v2158,  v2187,  v2215,  v2242,  v2268,  v2293,  v2317,
           v2340,
           v2362,
           v2383,
           v2403,
           v2422,
           v2440,
           v2457,
           v2473,
           v2488,
           v2502,
           v2515,
           v2527,
           v2538,
           v2548);
  uint64_t v458 = sub_DD74C( v450,  v451,  v452,  v453,  v454,  v455,  v456,  v457,  v578,  v641,  v703,  v764,  v824,  v883,  v941,  v998,  v1054,  v1109,  v1163,  v1216,  v1268,  v1319,  v1369,  v1418,  v1466,  v1513,  v1559,  v1604,  v1648,  v1691,  v1733,  v1774,  v1814,  v1853,  v1891,  v1928,  v1964,  v1999,  v2033,  v2066,  v2098,  v2129,  v2159,  v2188,  v2216,  v2243,  v2269,  v2294,  v2318,
           v2341,
           v2363,
           v2384,
           v2404,
           v2423,
           v2441,
           v2458,
           v2474,
           v2489,
           v2503,
           v2516,
           v2528,
           v2539,
           v2549);
  uint64_t v466 = sub_DD744( v458,  v459,  v460,  v461,  v462,  v463,  v464,  v465,  v579,  v642,  v704,  v765,  v825,  v884,  v942,  v999,  v1055,  v1110,  v1164,  v1217,  v1269,  v1320,  v1370,  v1419,  v1467,  v1514,  v1560,  v1605,  v1649,  v1692,  v1734,  v1775,  v1815,  v1854,  v1892,  v1929,  v1965,  v2000,  v2034,  v2067,  v2099,  v2130,  v2160,  v2189,  v2217,  v2244,  v2270,  v2295,  v2319,
           v2342,
           v2364,
           v2385,
           v2405,
           v2424,
           v2442,
           v2459,
           v2475,
           v2490,
           v2504,
           v2517,
           v2529,
           v2540,
           v2550);
  uint64_t v474 = sub_DD73C( v466,  v467,  v468,  v469,  v470,  v471,  v472,  v473,  v580,  v643,  v705,  v766,  v826,  v885,  v943,  v1000,  v1056,  v1111,  v1165,  v1218,  v1270,  v1321,  v1371,  v1420,  v1468,  v1515,  v1561,  v1606,  v1650,  v1693,  v1735,  v1776,  v1816,  v1855,  v1893,  v1930,  v1966,  v2001,  v2035,  v2068,  v2100,  v2131,  v2161,  v2190,  v2218,  v2245,  v2271,  v2296,  v2320,
           v2343,
           v2365,
           v2386,
           v2406,
           v2425,
           v2443,
           v2460,
           v2476,
           v2491,
           v2505,
           v2518,
           v2530,
           v2541,
           v2551);
  uint64_t v482 = sub_DD734( v474,  v475,  v476,  v477,  v478,  v479,  v480,  v481,  v581,  v644,  v706,  v767,  v827,  v886,  v944,  v1001,  v1057,  v1112,  v1166,  v1219,  v1271,  v1322,  v1372,  v1421,  v1469,  v1516,  v1562,  v1607,  v1651,  v1694,  v1736,  v1777,  v1817,  v1856,  v1894,  v1931,  v1967,  v2002,  v2036,  v2069,  v2101,  v2132,  v2162,  v2191,  v2219,  v2246,  v2272,  v2297,  v2321,
           v2344,
           v2366,
           v2387,
           v2407,
           v2426,
           v2444,
           v2461,
           v2477,
           v2492,
           v2506,
           v2519,
           v2531,
           v2542,
           v2552);
  uint64_t v490 = sub_DD72C( v482,  v483,  v484,  v485,  v486,  v487,  v488,  v489,  v582,  v645,  v707,  v768,  v828,  v887,  v945,  v1002,  v1058,  v1113,  v1167,  v1220,  v1272,  v1323,  v1373,  v1422,  v1470,  v1517,  v1563,  v1608,  v1652,  v1695,  v1737,  v1778,  v1818,  v1857,  v1895,  v1932,  v1968,  v2003,  v2037,  v2070,  v2102,  v2133,  v2163,  v2192,  v2220,  v2247,  v2273,  v2298,  v2322,
           v2345,
           v2367,
           v2388,
           v2408,
           v2427,
           v2445,
           v2462,
           v2478,
           v2493,
           v2507,
           v2520,
           v2532,
           v2543,
           v2553);
  uint64_t v498 = sub_DD724( v490,  v491,  v492,  v493,  v494,  v495,  v496,  v497,  v583,  v646,  v708,  v769,  v829,  v888,  v946,  v1003,  v1059,  v1114,  v1168,  v1221,  v1273,  v1324,  v1374,  v1423,  v1471,  v1518,  v1564,  v1609,  v1653,  v1696,  v1738,  v1779,  v1819,  v1858,  v1896,  v1933,  v1969,  v2004,  v2038,  v2071,  v2103,  v2134,  v2164,  v2193,  v2221,  v2248,  v2274,  v2299,  v2323,
           v2346,
           v2368,
           v2389,
           v2409,
           v2428,
           v2446,
           v2463,
           v2479,
           v2494,
           v2508,
           v2521,
           v2533,
           v2544,
           v2554);
  uint64_t v506 = sub_DD71C( v498,  v499,  v500,  v501,  v502,  v503,  v504,  v505,  v584,  v647,  v709,  v770,  v830,  v889,  v947,  v1004,  v1060,  v1115,  v1169,  v1222,  v1274,  v1325,  v1375,  v1424,  v1472,  v1519,  v1565,  v1610,  v1654,  v1697,  v1739,  v1780,  v1820,  v1859,  v1897,  v1934,  v1970,  v2005,  v2039,  v2072,  v2104,  v2135,  v2165,  v2194,  v2222,  v2249,  v2275,  v2300,  v2324,
           v2347,
           v2369,
           v2390,
           v2410,
           v2429,
           v2447,
           v2464,
           v2480,
           v2495,
           v2509,
           v2522,
           v2534,
           v2545,
           v2555);
  uint64_t v514 = sub_DD714( v506,  v507,  v508,  v509,  v510,  v511,  v512,  v513,  v585,  v648,  v710,  v771,  v831,  v890,  v948,  v1005,  v1061,  v1116,  v1170,  v1223,  v1275,  v1326,  v1376,  v1425,  v1473,  v1520,  v1566,  v1611,  v1655,  v1698,  v1740,  v1781,  v1821,  v1860,  v1898,  v1935,  v1971,  v2006,  v2040,  v2073,  v2105,  v2136,  v2166,  v2195,  v2223,  v2250,  v2276,  v2301,  v2325,
           v2348,
           v2370,
           v2391,
           v2411,
           v2430,
           v2448,
           v2465,
           v2481,
           v2496,
           v2510,
           v2523,
           v2535,
           v2546,
           v2556);
  sub_DD70C( v514,  v515,  v516,  v517,  v518,  v519,  v520,  v521,  v586,  v649,  v711,  v772,  v832,  v891,  v949,  v1006,  v1062,  v1117,  v1171,  v1224,  v1276,  v1327,  v1377,  v1426,  v1474,  v1521,  v1567,  v1612,  v1656,  v1699,  v1741,  v1782,  v1822,  v1861,  v1899,  v1936,  v1972,  v2007,  v2041,  v2074,  v2106,  v2137,  v2167,  v2196,  v2224,  v2251,  v2277,  v2302,  v2326,
    v2349,
    v2371,
    v2392,
    v2412,
    v2431,
    v2449,
    v2466,
    v2482,
    v2497,
    v2511,
    v2524,
    v2536,
    v2547,
    v2557);
  sub_DD704();
  sub_DD6FC();
  sub_DD6F4();
  sub_DD6EC();
  sub_DD6E4();
  sub_DD6DC();
  sub_DD6D4();
  sub_DD6CC();
  sub_DD6C4();
  sub_DD6BC();
  sub_DD6B4();
  sub_DD6AC();
  sub_DD6A4();
  sub_DD69C();
  sub_DD694();
  sub_DD68C();
  sub_DD684();
  sub_DD67C();
  sub_DD674();
  sub_DD66C();
  sub_DD664();
  sub_DD65C();
  sub_DD654();
  sub_DD64C();
  sub_DD644();
  sub_DD63C();
  sub_DD634();
  sub_DD62C();
  sub_DD624();
  sub_DD61C();
  sub_DD614();
  sub_DD60C();
  sub_DD604();
  sub_DD5FC();
  sub_DD5F4();
  sub_DD5EC();
  sub_DD5E4();
  sub_DD5DC();
  sub_DD5D4();
  sub_DD5CC();
  sub_DD5C4();
  sub_DD5BC();
  sub_DD5B4();
  sub_DD5AC();
  sub_DD5A4();
  sub_DD59C();
  sub_DD594();
  sub_DD58C();
  sub_DD584();
  sub_DD57C();
  sub_DD574();
  sub_DD56C();
  sub_DD564();
  sub_DD55C();
  sub_DD554();
  sub_DD54C();
  sub_DD544();
  sub_DD53C();
  sub_DD534();
  sub_DD52C();
  sub_DD524();
  sub_DD51C();
  sub_DD514();
  sub_DD50C();
  sub_DD504();
  sub_DD4FC();
  sub_DD4F4();
  sub_DD4EC();
  sub_DD4DC();
  sub_DD4E4();
  sub_DD868();
  sub_DD870();
  sub_36B88();
  sub_366E8();
  sub_3677C();
  sub_36588();
  sub_36624();
  sub_3661C();
  sub_36614();
  sub_3660C();
  sub_36604();
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  sub_366B8();
  sub_366B0();
  sub_366A8();
  sub_36814();
  uint64_t v522 = (uint64_t (*)(void))sub_DDBE4();
  return sub_36148(v522);
}

uint64_t sub_D37C0()
{
  uint64_t v3 = v2;
  sub_A6254();
  sub_59AF4(v1[3540], v4);
  if (v0)
  {
    sub_DE844();
    uint64_t v5 = v1[3312];
    uint64_t v6 = v1[3311];
    swift_release();
    sub_2A184();
    sub_DE8A8();
    swift_bridgeObjectRelease();
    sub_DDFD8();
    swift_bridgeObjectRelease();
    sub_DDFCC();
    swift_bridgeObjectRelease();
    sub_36860();
    sub_464D0(v6);
    sub_464D0(v5);
  }

  else
  {
    v1[3541] = v3;
    swift_release();
    uint64_t v7 = sub_80C98();
    sub_279E0(v7, v8);
    uint64_t v9 = sub_BB080();
    sub_279E0(v9, v10);
  }

  sub_A964();
  return sub_DD94C(v11, v12, v13);
}

#error "D3AE4: call analysis failed (funcsize=182)"
uint64_t sub_D3BB4()
{
  uint64_t v0;
  sub_AA10();
  sub_20264(*(void *)(v0 + 28344));
  sub_2A184();
  sub_AA20();
  sub_A964();
  return sub_D954();
}

uint64_t sub_D3C00()
{
  uint64_t v1 = *(void **)(v0 + 28328);
  uint64_t v2 = *(void **)(v0 + 28136);
  uint64_t v2540 = *(void *)(v0 + 26688);
  uint64_t v2539 = *(void *)(v0 + 26512);
  uint64_t v2538 = *(void *)(v0 + 26064);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 20008));
  sub_369CC();
  sub_DED44(v0 + 20048);
  uint64_t v3 = sub_20308((uint64_t)&unk_17FBE0, 56LL);
  sub_DDD10((__int128 *)(v0 + 19888), v3 + 16);
  *(void *)(v0 + 25736) = SimpleOutputFlowAsync.__allocating_init(outputPublisher:outputGenerator:)( &v2541,  &unk_18EA28,  v3);
  static ExecuteResponse.complete<A>(next:)();

  sub_36C34();
  sub_DE894();
  sub_DE540();
  sub_20300();
  sub_26F04(v2538, type metadata accessor for SpecificMedCompletedLogModel);
  sub_464D0(v2539);
  sub_DEC44(v4, &qword_189CF8);
  uint64_t v5 = sub_DEAC8();
  sub_DE82C(v5, type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters);
  sub_DDC20(v6, type metadata accessor for SnippetHeaderModel);
  sub_464D0(v2540);
  sub_DDA68(v7, &qword_18B168);
  sub_A37E4();
  sub_DC288();
  sub_A8F4();
  sub_A85C();
  sub_A864();
  sub_A910();
  sub_A8EC();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  uint64_t v8 = sub_A78C();
  uint64_t v16 = sub_A888(v8, v9, v10, v11, v12, v13, v14, v15, v506, v568, v630);
  uint64_t v24 = sub_A854(v16, v17, v18, v19, v20, v21, v22, v23, v507, v569, v631, v692);
  uint64_t v32 = sub_A84C(v24, v25, v26, v27, v28, v29, v30, v31, v508, v570, v632, v693, v753);
  uint64_t v40 = sub_A844(v32, v33, v34, v35, v36, v37, v38, v39, v509, v571, v633, v694, v754, v813);
  uint64_t v48 = sub_A83C(v40, v41, v42, v43, v44, v45, v46, v47, v510, v572, v634, v695, v755, v814, v872);
  uint64_t v56 = sub_A95C(v48, v49, v50, v51, v52, v53, v54, v55, v511, v573, v635, v696, v756, v815, v873, v930);
  uint64_t v64 = sub_A954(v56, v57, v58, v59, v60, v61, v62, v63, v512, v574, v636, v697, v757, v816, v874, v931, v987);
  uint64_t v72 = sub_A938(v64, v65, v66, v67, v68, v69, v70, v71, v513, v575, v637, v698, v758, v817, v875, v932, v988, v1043);
  uint64_t v80 = sub_A930( v72,  v73,  v74,  v75,  v76,  v77,  v78,  v79,  v514,  v576,  v638,  v699,  v759,  v818,  v876,  v933,  v989,  v1044,  v1098);
  uint64_t v88 = sub_A928( v80,  v81,  v82,  v83,  v84,  v85,  v86,  v87,  v515,  v577,  v639,  v700,  v760,  v819,  v877,  v934,  v990,  v1045,  v1099,  v1152);
  uint64_t v96 = sub_A920( v88,  v89,  v90,  v91,  v92,  v93,  v94,  v95,  v516,  v578,  v640,  v701,  v761,  v820,  v878,  v935,  v991,  v1046,  v1100,  v1153,  v1205);
  uint64_t v104 = sub_36374( v96,  v97,  v98,  v99,  v100,  v101,  v102,  v103,  v517,  v579,  v641,  v702,  v762,  v821,  v879,  v936,  v992,  v1047,  v1101,  v1154,  v1206,  v1257);
  uint64_t v112 = sub_3636C( v104,  v105,  v106,  v107,  v108,  v109,  v110,  v111,  v518,  v580,  v642,  v703,  v763,  v822,  v880,  v937,  v993,  v1048,  v1102,  v1155,  v1207,  v1258,  v1308);
  uint64_t v120 = sub_36364( v112,  v113,  v114,  v115,  v116,  v117,  v118,  v119,  v519,  v581,  v643,  v704,  v764,  v823,  v881,  v938,  v994,  v1049,  v1103,  v1156,  v1208,  v1259,  v1309,  v1358);
  uint64_t v128 = sub_363F0( v120,  v121,  v122,  v123,  v124,  v125,  v126,  v127,  v520,  v582,  v644,  v705,  v765,  v824,  v882,  v939,  v995,  v1050,  v1104,  v1157,  v1209,  v1260,  v1310,  v1359,  v1407);
  uint64_t v136 = sub_36430( v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v521,  v583,  v645,  v706,  v766,  v825,  v883,  v940,  v996,  v1051,  v1105,  v1158,  v1210,  v1261,  v1311,  v1360,  v1408,  v1455);
  uint64_t v144 = sub_36428( v136,  v137,  v138,  v139,  v140,  v141,  v142,  v143,  v522,  v584,  v646,  v707,  v767,  v826,  v884,  v941,  v997,  v1052,  v1106,  v1159,  v1211,  v1262,  v1312,  v1361,  v1409,  v1456,  v1502);
  uint64_t v152 = sub_36478( v144,  v145,  v146,  v147,  v148,  v149,  v150,  v151,  v523,  v585,  v647,  v708,  v768,  v827,  v885,  v942,  v998,  v1053,  v1107,  v1160,  v1212,  v1263,  v1313,  v1362,  v1410,  v1457,  v1503,  v1548);
  uint64_t v160 = sub_36524( v152,  v153,  v154,  v155,  v156,  v157,  v158,  v159,  v524,  v586,  v648,  v709,  v769,  v828,  v886,  v943,  v999,  v1054,  v1108,  v1161,  v1213,  v1264,  v1314,  v1363,  v1411,  v1458,  v1504,  v1549,  v1593);
  uint64_t v168 = sub_3651C( v160,  v161,  v162,  v163,  v164,  v165,  v166,  v167,  v525,  v587,  v649,  v710,  v770,  v829,  v887,  v944,  v1000,  v1055,  v1109,  v1162,  v1214,  v1265,  v1315,  v1364,  v1412,  v1459,  v1505,  v1550,  v1594,  v1637);
  uint64_t v176 = sub_36514( v168,  v169,  v170,  v171,  v172,  v173,  v174,  v175,  v526,  v588,  v650,  v711,  v771,  v830,  v888,  v945,  v1001,  v1056,  v1110,  v1163,  v1215,  v1266,  v1316,  v1365,  v1413,  v1460,  v1506,  v1551,  v1595,  v1638,  v1680);
  uint64_t v184 = sub_3650C( v176,  v177,  v178,  v179,  v180,  v181,  v182,  v183,  v527,  v589,  v651,  v712,  v772,  v831,  v889,  v946,  v1002,  v1057,  v1111,  v1164,  v1216,  v1267,  v1317,  v1366,  v1414,  v1461,  v1507,  v1552,  v1596,  v1639,  v1681,  v1722);
  uint64_t v192 = sub_36504( v184,  v185,  v186,  v187,  v188,  v189,  v190,  v191,  v528,  v590,  v652,  v713,  v773,  v832,  v890,  v947,  v1003,  v1058,  v1112,  v1165,  v1217,  v1268,  v1318,  v1367,  v1415,  v1462,  v1508,  v1553,  v1597,  v1640,  v1682,  v1723,  v1763);
  uint64_t v200 = sub_364FC( v192,  v193,  v194,  v195,  v196,  v197,  v198,  v199,  v529,  v591,  v653,  v714,  v774,  v833,  v891,  v948,  v1004,  v1059,  v1113,  v1166,  v1218,  v1269,  v1319,  v1368,  v1416,  v1463,  v1509,  v1554,  v1598,  v1641,  v1683,  v1724,  v1764,  v1803);
  uint64_t v208 = sub_364F4( v200,  v201,  v202,  v203,  v204,  v205,  v206,  v207,  v530,  v592,  v654,  v715,  v775,  v834,  v892,  v949,  v1005,  v1060,  v1114,  v1167,  v1219,  v1270,  v1320,  v1369,  v1417,  v1464,  v1510,  v1555,  v1599,  v1642,  v1684,  v1725,  v1765,  v1804,  v1842);
  uint64_t v216 = sub_364EC( v208,  v209,  v210,  v211,  v212,  v213,  v214,  v215,  v531,  v593,  v655,  v716,  v776,  v835,  v893,  v950,  v1006,  v1061,  v1115,  v1168,  v1220,  v1271,  v1321,  v1370,  v1418,  v1465,  v1511,  v1556,  v1600,  v1643,  v1685,  v1726,  v1766,  v1805,  v1843,  v1880);
  uint64_t v224 = sub_364E4( v216,  v217,  v218,  v219,  v220,  v221,  v222,  v223,  v532,  v594,  v656,  v717,  v777,  v836,  v894,  v951,  v1007,  v1062,  v1116,  v1169,  v1221,  v1272,  v1322,  v1371,  v1419,  v1466,  v1512,  v1557,  v1601,  v1644,  v1686,  v1727,  v1767,  v1806,  v1844,  v1881,  v1917);
  uint64_t v232 = sub_364DC( v224,  v225,  v226,  v227,  v228,  v229,  v230,  v231,  v533,  v595,  v657,  v718,  v778,  v837,  v895,  v952,  v1008,  v1063,  v1117,  v1170,  v1222,  v1273,  v1323,  v1372,  v1420,  v1467,  v1513,  v1558,  v1602,  v1645,  v1687,  v1728,  v1768,  v1807,  v1845,  v1882,  v1918,  v1953);
  uint64_t v240 = sub_364D4( v232,  v233,  v234,  v235,  v236,  v237,  v238,  v239,  v534,  v596,  v658,  v719,  v779,  v838,  v896,  v953,  v1009,  v1064,  v1118,  v1171,  v1223,  v1274,  v1324,  v1373,  v1421,  v1468,  v1514,  v1559,  v1603,  v1646,  v1688,  v1729,  v1769,  v1808,  v1846,  v1883,  v1919,  v1954,  v1988);
  uint64_t v248 = sub_366F8( v240,  v241,  v242,  v243,  v244,  v245,  v246,  v247,  v535,  v597,  v659,  v720,  v780,  v839,  v897,  v954,  v1010,  v1065,  v1119,  v1172,  v1224,  v1275,  v1325,  v1374,  v1422,  v1469,  v1515,  v1560,  v1604,  v1647,  v1689,  v1730,  v1770,  v1809,  v1847,  v1884,  v1920,  v1955,  v1989,  v2022);
  uint64_t v256 = sub_366F0( v248,  v249,  v250,  v251,  v252,  v253,  v254,  v255,  v536,  v598,  v660,  v721,  v781,  v840,  v898,  v955,  v1011,  v1066,  v1120,  v1173,  v1225,  v1276,  v1326,  v1375,  v1423,  v1470,  v1516,  v1561,  v1605,  v1648,  v1690,  v1731,  v1771,  v1810,  v1848,  v1885,  v1921,  v1956,  v1990,  v2023,  v2055);
  uint64_t v264 = sub_36B90( v256,  v257,  v258,  v259,  v260,  v261,  v262,  v263,  v537,  v599,  v661,  v722,  v782,  v841,  v899,  v956,  v1012,  v1067,  v1121,  v1174,  v1226,  v1277,  v1327,  v1376,  v1424,  v1471,  v1517,  v1562,  v1606,  v1649,  v1691,  v1732,  v1772,  v1811,  v1849,  v1886,  v1922,  v1957,  v1991,  v2024,  v2056,  v2087);
  uint64_t v272 = sub_36EF4( v264,  v265,  v266,  v267,  v268,  v269,  v270,  v271,  v538,  v600,  v662,  v723,  v783,  v842,  v900,  v957,  v1013,  v1068,  v1122,  v1175,  v1227,  v1278,  v1328,  v1377,  v1425,  v1472,  v1518,  v1563,  v1607,  v1650,  v1692,  v1733,  v1773,  v1812,  v1850,  v1887,  v1923,  v1958,  v1992,  v2025,  v2057,  v2088,  v2118);
  uint64_t v280 = sub_36EEC( v272,  v273,  v274,  v275,  v276,  v277,  v278,  v279,  v539,  v601,  v663,  v724,  v784,  v843,  v901,  v958,  v1014,  v1069,  v1123,  v1176,  v1228,  v1279,  v1329,  v1378,  v1426,  v1473,  v1519,  v1564,  v1608,  v1651,  v1693,  v1734,  v1774,  v1813,  v1851,  v1888,  v1924,  v1959,  v1993,  v2026,  v2058,  v2089,  v2119,  v2148);
  uint64_t v288 = sub_DD7E4( v280,  v281,  v282,  v283,  v284,  v285,  v286,  v287,  v540,  v602,  v664,  v725,  v785,  v844,  v902,  v959,  v1015,  v1070,  v1124,  v1177,  v1229,  v1280,  v1330,  v1379,  v1427,  v1474,  v1520,  v1565,  v1609,  v1652,  v1694,  v1735,  v1775,  v1814,  v1852,  v1889,  v1925,  v1960,  v1994,  v2027,  v2059,  v2090,  v2120,  v2149,  v2177);
  uint64_t v296 = sub_DD7DC( v288,  v289,  v290,  v291,  v292,  v293,  v294,  v295,  v541,  v603,  v665,  v726,  v786,  v845,  v903,  v960,  v1016,  v1071,  v1125,  v1178,  v1230,  v1281,  v1331,  v1380,  v1428,  v1475,  v1521,  v1566,  v1610,  v1653,  v1695,  v1736,  v1776,  v1815,  v1853,  v1890,  v1926,  v1961,  v1995,  v2028,  v2060,  v2091,  v2121,  v2150,  v2178,  v2205);
  uint64_t v304 = sub_DD7D4( v296,  v297,  v298,  v299,  v300,  v301,  v302,  v303,  v542,  v604,  v666,  v727,  v787,  v846,  v904,  v961,  v1017,  v1072,  v1126,  v1179,  v1231,  v1282,  v1332,  v1381,  v1429,  v1476,  v1522,  v1567,  v1611,  v1654,  v1696,  v1737,  v1777,  v1816,  v1854,  v1891,  v1927,  v1962,  v1996,  v2029,  v2061,  v2092,  v2122,  v2151,  v2179,  v2206,  v2232);
  uint64_t v312 = sub_DD7CC( v304,  v305,  v306,  v307,  v308,  v309,  v310,  v311,  v543,  v605,  v667,  v728,  v788,  v847,  v905,  v962,  v1018,  v1073,  v1127,  v1180,  v1232,  v1283,  v1333,  v1382,  v1430,  v1477,  v1523,  v1568,  v1612,  v1655,  v1697,  v1738,  v1778,  v1817,  v1855,  v1892,  v1928,  v1963,  v1997,  v2030,  v2062,  v2093,  v2123,  v2152,  v2180,  v2207,  v2233,  v2258);
  uint64_t v320 = sub_DD7C4( v312,  v313,  v314,  v315,  v316,  v317,  v318,  v319,  v544,  v606,  v668,  v729,  v789,  v848,  v906,  v963,  v1019,  v1074,  v1128,  v1181,  v1233,  v1284,  v1334,  v1383,  v1431,  v1478,  v1524,  v1569,  v1613,  v1656,  v1698,  v1739,  v1779,  v1818,  v1856,  v1893,  v1929,  v1964,  v1998,  v2031,  v2063,  v2094,  v2124,  v2153,  v2181,  v2208,  v2234,  v2259,  v2283);
  uint64_t v328 = sub_DD7BC( v320,  v321,  v322,  v323,  v324,  v325,  v326,  v327,  v545,  v607,  v669,  v730,  v790,  v849,  v907,  v964,  v1020,  v1075,  v1129,  v1182,  v1234,  v1285,  v1335,  v1384,  v1432,  v1479,  v1525,  v1570,  v1614,  v1657,  v1699,  v1740,  v1780,  v1819,  v1857,  v1894,  v1930,  v1965,  v1999,  v2032,  v2064,  v2095,  v2125,  v2154,  v2182,  v2209,  v2235,  v2260,  v2284,
           v2307);
  uint64_t v336 = sub_DD7B4( v328,  v329,  v330,  v331,  v332,  v333,  v334,  v335,  v546,  v608,  v670,  v731,  v791,  v850,  v908,  v965,  v1021,  v1076,  v1130,  v1183,  v1235,  v1286,  v1336,  v1385,  v1433,  v1480,  v1526,  v1571,  v1615,  v1658,  v1700,  v1741,  v1781,  v1820,  v1858,  v1895,  v1931,  v1966,  v2000,  v2033,  v2065,  v2096,  v2126,  v2155,  v2183,  v2210,  v2236,  v2261,  v2285,
           v2308,
           v2330);
  uint64_t v344 = sub_DD7AC( v336,  v337,  v338,  v339,  v340,  v341,  v342,  v343,  v547,  v609,  v671,  v732,  v792,  v851,  v909,  v966,  v1022,  v1077,  v1131,  v1184,  v1236,  v1287,  v1337,  v1386,  v1434,  v1481,  v1527,  v1572,  v1616,  v1659,  v1701,  v1742,  v1782,  v1821,  v1859,  v1896,  v1932,  v1967,  v2001,  v2034,  v2066,  v2097,  v2127,  v2156,  v2184,  v2211,  v2237,  v2262,  v2286,
           v2309,
           v2331,
           v2352);
  uint64_t v352 = sub_DD7A4( v344,  v345,  v346,  v347,  v348,  v349,  v350,  v351,  v548,  v610,  v672,  v733,  v793,  v852,  v910,  v967,  v1023,  v1078,  v1132,  v1185,  v1237,  v1288,  v1338,  v1387,  v1435,  v1482,  v1528,  v1573,  v1617,  v1660,  v1702,  v1743,  v1783,  v1822,  v1860,  v1897,  v1933,  v1968,  v2002,  v2035,  v2067,  v2098,  v2128,  v2157,  v2185,  v2212,  v2238,  v2263,  v2287,
           v2310,
           v2332,
           v2353,
           v2373);
  uint64_t v360 = sub_DD79C( v352,  v353,  v354,  v355,  v356,  v357,  v358,  v359,  v549,  v611,  v673,  v734,  v794,  v853,  v911,  v968,  v1024,  v1079,  v1133,  v1186,  v1238,  v1289,  v1339,  v1388,  v1436,  v1483,  v1529,  v1574,  v1618,  v1661,  v1703,  v1744,  v1784,  v1823,  v1861,  v1898,  v1934,  v1969,  v2003,  v2036,  v2068,  v2099,  v2129,  v2158,  v2186,  v2213,  v2239,  v2264,  v2288,
           v2311,
           v2333,
           v2354,
           v2374,
           v2393);
  uint64_t v368 = sub_DD794( v360,  v361,  v362,  v363,  v364,  v365,  v366,  v367,  v550,  v612,  v674,  v735,  v795,  v854,  v912,  v969,  v1025,  v1080,  v1134,  v1187,  v1239,  v1290,  v1340,  v1389,  v1437,  v1484,  v1530,  v1575,  v1619,  v1662,  v1704,  v1745,  v1785,  v1824,  v1862,  v1899,  v1935,  v1970,  v2004,  v2037,  v2069,  v2100,  v2130,  v2159,  v2187,  v2214,  v2240,  v2265,  v2289,
           v2312,
           v2334,
           v2355,
           v2375,
           v2394,
           v2412);
  uint64_t v376 = sub_DD78C( v368,  v369,  v370,  v371,  v372,  v373,  v374,  v375,  v551,  v613,  v675,  v736,  v796,  v855,  v913,  v970,  v1026,  v1081,  v1135,  v1188,  v1240,  v1291,  v1341,  v1390,  v1438,  v1485,  v1531,  v1576,  v1620,  v1663,  v1705,  v1746,  v1786,  v1825,  v1863,  v1900,  v1936,  v1971,  v2005,  v2038,  v2070,  v2101,  v2131,  v2160,  v2188,  v2215,  v2241,  v2266,  v2290,
           v2313,
           v2335,
           v2356,
           v2376,
           v2395,
           v2413,
           v2430);
  uint64_t v384 = sub_DD784( v376,  v377,  v378,  v379,  v380,  v381,  v382,  v383,  v552,  v614,  v676,  v737,  v797,  v856,  v914,  v971,  v1027,  v1082,  v1136,  v1189,  v1241,  v1292,  v1342,  v1391,  v1439,  v1486,  v1532,  v1577,  v1621,  v1664,  v1706,  v1747,  v1787,  v1826,  v1864,  v1901,  v1937,  v1972,  v2006,  v2039,  v2071,  v2102,  v2132,  v2161,  v2189,  v2216,  v2242,  v2267,  v2291,
           v2314,
           v2336,
           v2357,
           v2377,
           v2396,
           v2414,
           v2431,
           v2447);
  uint64_t v392 = sub_DD77C( v384,  v385,  v386,  v387,  v388,  v389,  v390,  v391,  v553,  v615,  v677,  v738,  v798,  v857,  v915,  v972,  v1028,  v1083,  v1137,  v1190,  v1242,  v1293,  v1343,  v1392,  v1440,  v1487,  v1533,  v1578,  v1622,  v1665,  v1707,  v1748,  v1788,  v1827,  v1865,  v1902,  v1938,  v1973,  v2007,  v2040,  v2072,  v2103,  v2133,  v2162,  v2190,  v2217,  v2243,  v2268,  v2292,
           v2315,
           v2337,
           v2358,
           v2378,
           v2397,
           v2415,
           v2432,
           v2448,
           v2463);
  uint64_t v400 = sub_DD774( v392,  v393,  v394,  v395,  v396,  v397,  v398,  v399,  v554,  v616,  v678,  v739,  v799,  v858,  v916,  v973,  v1029,  v1084,  v1138,  v1191,  v1243,  v1294,  v1344,  v1393,  v1441,  v1488,  v1534,  v1579,  v1623,  v1666,  v1708,  v1749,  v1789,  v1828,  v1866,  v1903,  v1939,  v1974,  v2008,  v2041,  v2073,  v2104,  v2134,  v2163,  v2191,  v2218,  v2244,  v2269,  v2293,
           v2316,
           v2338,
           v2359,
           v2379,
           v2398,
           v2416,
           v2433,
           v2449,
           v2464,
           v2478);
  uint64_t v408 = sub_DD76C( v400,  v401,  v402,  v403,  v404,  v405,  v406,  v407,  v555,  v617,  v679,  v740,  v800,  v859,  v917,  v974,  v1030,  v1085,  v1139,  v1192,  v1244,  v1295,  v1345,  v1394,  v1442,  v1489,  v1535,  v1580,  v1624,  v1667,  v1709,  v1750,  v1790,  v1829,  v1867,  v1904,  v1940,  v1975,  v2009,  v2042,  v2074,  v2105,  v2135,  v2164,  v2192,  v2219,  v2245,  v2270,  v2294,
           v2317,
           v2339,
           v2360,
           v2380,
           v2399,
           v2417,
           v2434,
           v2450,
           v2465,
           v2479,
           v2492);
  uint64_t v416 = sub_DD764( v408,  v409,  v410,  v411,  v412,  v413,  v414,  v415,  v556,  v618,  v680,  v741,  v801,  v860,  v918,  v975,  v1031,  v1086,  v1140,  v1193,  v1245,  v1296,  v1346,  v1395,  v1443,  v1490,  v1536,  v1581,  v1625,  v1668,  v1710,  v1751,  v1791,  v1830,  v1868,  v1905,  v1941,  v1976,  v2010,  v2043,  v2075,  v2106,  v2136,  v2165,  v2193,  v2220,  v2246,  v2271,  v2295,
           v2318,
           v2340,
           v2361,
           v2381,
           v2400,
           v2418,
           v2435,
           v2451,
           v2466,
           v2480,
           v2493,
           v2505);
  uint64_t v424 = sub_DD75C( v416,  v417,  v418,  v419,  v420,  v421,  v422,  v423,  v557,  v619,  v681,  v742,  v802,  v861,  v919,  v976,  v1032,  v1087,  v1141,  v1194,  v1246,  v1297,  v1347,  v1396,  v1444,  v1491,  v1537,  v1582,  v1626,  v1669,  v1711,  v1752,  v1792,  v1831,  v1869,  v1906,  v1942,  v1977,  v2011,  v2044,  v2076,  v2107,  v2137,  v2166,  v2194,  v2221,  v2247,  v2272,  v2296,
           v2319,
           v2341,
           v2362,
           v2382,
           v2401,
           v2419,
           v2436,
           v2452,
           v2467,
           v2481,
           v2494,
           v2506,
           v2517);
  uint64_t v432 = sub_DD754( v424,  v425,  v426,  v427,  v428,  v429,  v430,  v431,  v558,  v620,  v682,  v743,  v803,  v862,  v920,  v977,  v1033,  v1088,  v1142,  v1195,  v1247,  v1298,  v1348,  v1397,  v1445,  v1492,  v1538,  v1583,  v1627,  v1670,  v1712,  v1753,  v1793,  v1832,  v1870,  v1907,  v1943,  v1978,  v2012,  v2045,  v2077,  v2108,  v2138,  v2167,  v2195,  v2222,  v2248,  v2273,  v2297,
           v2320,
           v2342,
           v2363,
           v2383,
           v2402,
           v2420,
           v2437,
           v2453,
           v2468,
           v2482,
           v2495,
           v2507,
           v2518,
           v2528);
  uint64_t v440 = sub_DD74C( v432,  v433,  v434,  v435,  v436,  v437,  v438,  v439,  v559,  v621,  v683,  v744,  v804,  v863,  v921,  v978,  v1034,  v1089,  v1143,  v1196,  v1248,  v1299,  v1349,  v1398,  v1446,  v1493,  v1539,  v1584,  v1628,  v1671,  v1713,  v1754,  v1794,  v1833,  v1871,  v1908,  v1944,  v1979,  v2013,  v2046,  v2078,  v2109,  v2139,  v2168,  v2196,  v2223,  v2249,  v2274,  v2298,
           v2321,
           v2343,
           v2364,
           v2384,
           v2403,
           v2421,
           v2438,
           v2454,
           v2469,
           v2483,
           v2496,
           v2508,
           v2519,
           v2529);
  uint64_t v448 = sub_DD744( v440,  v441,  v442,  v443,  v444,  v445,  v446,  v447,  v560,  v622,  v684,  v745,  v805,  v864,  v922,  v979,  v1035,  v1090,  v1144,  v1197,  v1249,  v1300,  v1350,  v1399,  v1447,  v1494,  v1540,  v1585,  v1629,  v1672,  v1714,  v1755,  v1795,  v1834,  v1872,  v1909,  v1945,  v1980,  v2014,  v2047,  v2079,  v2110,  v2140,  v2169,  v2197,  v2224,  v2250,  v2275,  v2299,
           v2322,
           v2344,
           v2365,
           v2385,
           v2404,
           v2422,
           v2439,
           v2455,
           v2470,
           v2484,
           v2497,
           v2509,
           v2520,
           v2530);
  uint64_t v456 = sub_DD73C( v448,  v449,  v450,  v451,  v452,  v453,  v454,  v455,  v561,  v623,  v685,  v746,  v806,  v865,  v923,  v980,  v1036,  v1091,  v1145,  v1198,  v1250,  v1301,  v1351,  v1400,  v1448,  v1495,  v1541,  v1586,  v1630,  v1673,  v1715,  v1756,  v1796,  v1835,  v1873,  v1910,  v1946,  v1981,  v2015,  v2048,  v2080,  v2111,  v2141,  v2170,  v2198,  v2225,  v2251,  v2276,  v2300,
           v2323,
           v2345,
           v2366,
           v2386,
           v2405,
           v2423,
           v2440,
           v2456,
           v2471,
           v2485,
           v2498,
           v2510,
           v2521,
           v2531);
  uint64_t v464 = sub_DD734( v456,  v457,  v458,  v459,  v460,  v461,  v462,  v463,  v562,  v624,  v686,  v747,  v807,  v866,  v924,  v981,  v1037,  v1092,  v1146,  v1199,  v1251,  v1302,  v1352,  v1401,  v1449,  v1496,  v1542,  v1587,  v1631,  v1674,  v1716,  v1757,  v1797,  v1836,  v1874,  v1911,  v1947,  v1982,  v2016,  v2049,  v2081,  v2112,  v2142,  v2171,  v2199,  v2226,  v2252,  v2277,  v2301,
           v2324,
           v2346,
           v2367,
           v2387,
           v2406,
           v2424,
           v2441,
           v2457,
           v2472,
           v2486,
           v2499,
           v2511,
           v2522,
           v2532);
  uint64_t v472 = sub_DD72C( v464,  v465,  v466,  v467,  v468,  v469,  v470,  v471,  v563,  v625,  v687,  v748,  v808,  v867,  v925,  v982,  v1038,  v1093,  v1147,  v1200,  v1252,  v1303,  v1353,  v1402,  v1450,  v1497,  v1543,  v1588,  v1632,  v1675,  v1717,  v1758,  v1798,  v1837,  v1875,  v1912,  v1948,  v1983,  v2017,  v2050,  v2082,  v2113,  v2143,  v2172,  v2200,  v2227,  v2253,  v2278,  v2302,
           v2325,
           v2347,
           v2368,
           v2388,
           v2407,
           v2425,
           v2442,
           v2458,
           v2473,
           v2487,
           v2500,
           v2512,
           v2523,
           v2533);
  uint64_t v480 = sub_DD724( v472,  v473,  v474,  v475,  v476,  v477,  v478,  v479,  v564,  v626,  v688,  v749,  v809,  v868,  v926,  v983,  v1039,  v1094,  v1148,  v1201,  v1253,  v1304,  v1354,  v1403,  v1451,  v1498,  v1544,  v1589,  v1633,  v1676,  v1718,  v1759,  v1799,  v1838,  v1876,  v1913,  v1949,  v1984,  v2018,  v2051,  v2083,  v2114,  v2144,  v2173,  v2201,  v2228,  v2254,  v2279,  v2303,
           v2326,
           v2348,
           v2369,
           v2389,
           v2408,
           v2426,
           v2443,
           v2459,
           v2474,
           v2488,
           v2501,
           v2513,
           v2524,
           v2534);
  uint64_t v488 = sub_DD71C( v480,  v481,  v482,  v483,  v484,  v485,  v486,  v487,  v565,  v627,  v689,  v750,  v810,  v869,  v927,  v984,  v1040,  v1095,  v1149,  v1202,  v1254,  v1305,  v1355,  v1404,  v1452,  v1499,  v1545,  v1590,  v1634,  v1677,  v1719,  v1760,  v1800,  v1839,  v1877,  v1914,  v1950,  v1985,  v2019,  v2052,  v2084,  v2115,  v2145,  v2174,  v2202,  v2229,  v2255,  v2280,  v2304,
           v2327,
           v2349,
           v2370,
           v2390,
           v2409,
           v2427,
           v2444,
           v2460,
           v2475,
           v2489,
           v2502,
           v2514,
           v2525,
           v2535);
  uint64_t v496 = sub_DD714( v488,  v489,  v490,  v491,  v492,  v493,  v494,  v495,  v566,  v628,  v690,  v751,  v811,  v870,  v928,  v985,  v1041,  v1096,  v1150,  v1203,  v1255,  v1306,  v1356,  v1405,  v1453,  v1500,  v1546,  v1591,  v1635,  v1678,  v1720,  v1761,  v1801,  v1840,  v1878,  v1915,  v1951,  v1986,  v2020,  v2053,  v2085,  v2116,  v2146,  v2175,  v2203,  v2230,  v2256,  v2281,  v2305,
           v2328,
           v2350,
           v2371,
           v2391,
           v2410,
           v2428,
           v2445,
           v2461,
           v2476,
           v2490,
           v2503,
           v2515,
           v2526,
           v2536);
  sub_DD70C( v496,  v497,  v498,  v499,  v500,  v501,  v502,  v503,  v567,  v629,  v691,  v752,  v812,  v871,  v929,  v986,  v1042,  v1097,  v1151,  v1204,  v1256,  v1307,  v1357,  v1406,  v1454,  v1501,  v1547,  v1592,  v1636,  v1679,  v1721,  v1762,  v1802,  v1841,  v1879,  v1916,  v1952,  v1987,  v2021,  v2054,  v2086,  v2117,  v2147,  v2176,  v2204,  v2231,  v2257,  v2282,  v2306,
    v2329,
    v2351,
    v2372,
    v2392,
    v2411,
    v2429,
    v2446,
    v2462,
    v2477,
    v2491,
    v2504,
    v2516,
    v2527,
    v2537);
  sub_DD704();
  sub_DD6FC();
  sub_DD6F4();
  sub_DD6EC();
  sub_DD6E4();
  sub_DD6DC();
  sub_DD6D4();
  sub_DD6CC();
  sub_DD6C4();
  sub_DD6BC();
  sub_DD6B4();
  sub_DD6AC();
  sub_DD6A4();
  sub_DD69C();
  sub_DD694();
  sub_DD68C();
  sub_DD684();
  sub_DD67C();
  sub_DD674();
  sub_DD66C();
  sub_DD664();
  sub_DD65C();
  sub_DD654();
  sub_DD64C();
  sub_DD644();
  sub_DD63C();
  sub_DD634();
  sub_DD62C();
  sub_DD624();
  sub_DD61C();
  sub_DD614();
  sub_DD60C();
  sub_DD604();
  sub_DD5FC();
  sub_DD5F4();
  sub_DD5EC();
  sub_DD5E4();
  sub_DD5DC();
  sub_DD5D4();
  sub_DD5CC();
  sub_DD5C4();
  sub_DD5BC();
  sub_DD5B4();
  sub_DD5AC();
  sub_DD5A4();
  sub_DD59C();
  sub_DD594();
  sub_DD58C();
  sub_DD584();
  sub_DD57C();
  sub_DD574();
  sub_DD56C();
  sub_DD564();
  sub_DD55C();
  sub_DD554();
  sub_DD54C();
  sub_DD544();
  sub_DD53C();
  sub_DD534();
  sub_DD52C();
  sub_DD524();
  sub_DD51C();
  sub_DD514();
  sub_DD50C();
  sub_DD504();
  sub_DD4FC();
  sub_DD4F4();
  sub_DD4EC();
  sub_DD4DC();
  sub_DD4E4();
  sub_DD868();
  sub_DD870();
  sub_DDA48();
  sub_DDA58();
  sub_36B88();
  sub_366E8();
  sub_3677C();
  sub_36588();
  sub_36624();
  sub_3661C();
  sub_36614();
  sub_3660C();
  sub_36604();
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  sub_366B8();
  sub_366B0();
  sub_366A8();
  uint64_t v504 = (uint64_t (*)(void))sub_DE01C();
  return sub_36148(v504);
}

uint64_t sub_D4010()
{
  os_log_type_t v5 = sub_AB70();
  if (sub_46614(v5))
  {
    uint64_t v6 = (_WORD *)sub_3635C();
    sub_36908(v6);
    sub_DD494();
    sub_DA1C();
    sub_232EC(&dword_0, v0, v2, "Couldn't create specificMedicationSuccess_Dialog, returning GenericErrorFlow", v3);
    sub_37128();
  }

  else
  {

    swift_bridgeObjectRelease();
  }

  sub_3747C();
  uint64_t v7 = (void *)v1[3517];
  uint64_t v8 = (void *)v1[3515];
  sub_DE90C();
  uint64_t v9 = v1[3314];
  sub_DE42C();
  sub_DE1B4((_OWORD *)(v1[3247] + 64LL));
  sub_DE23C(v1 + 1616);
  sub_A178();
  sub_DE4CC();

  sub_82234();
  sub_249D4();

  sub_DE9FC();
  sub_464D0(v9);
  sub_72F7C(v10, &qword_189CF8);
  uint64_t v11 = sub_DDB08();
  sub_DDC20(v11, type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters);
  sub_DDE0C(v12, type metadata accessor for SnippetHeaderModel);
  sub_464D0(v2554);
  sub_DDBDC(v13, &qword_18B168);
  sub_DBE38();
  sub_A8F4();
  sub_A85C();
  sub_A864();
  sub_A910();
  sub_A8EC();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  uint64_t v14 = sub_A78C();
  uint64_t v22 = sub_AAD8(v14, v15, v16, v17, v18, v19, v20, v21, v520, v583);
  uint64_t v30 = sub_A888(v22, v23, v24, v25, v26, v27, v28, v29, v521, v584, v646);
  uint64_t v38 = sub_A854(v30, v31, v32, v33, v34, v35, v36, v37, v522, v585, v647, v708);
  uint64_t v46 = sub_A84C(v38, v39, v40, v41, v42, v43, v44, v45, v523, v586, v648, v709, v769);
  uint64_t v54 = sub_A844(v46, v47, v48, v49, v50, v51, v52, v53, v524, v587, v649, v710, v770, v829);
  uint64_t v62 = sub_A83C(v54, v55, v56, v57, v58, v59, v60, v61, v525, v588, v650, v711, v771, v830, v888);
  uint64_t v70 = sub_A95C(v62, v63, v64, v65, v66, v67, v68, v69, v526, v589, v651, v712, v772, v831, v889, v946);
  uint64_t v78 = sub_A954(v70, v71, v72, v73, v74, v75, v76, v77, v527, v590, v652, v713, v773, v832, v890, v947, v1003);
  uint64_t v86 = sub_A938(v78, v79, v80, v81, v82, v83, v84, v85, v528, v591, v653, v714, v774, v833, v891, v948, v1004, v1059);
  uint64_t v94 = sub_A930( v86,  v87,  v88,  v89,  v90,  v91,  v92,  v93,  v529,  v592,  v654,  v715,  v775,  v834,  v892,  v949,  v1005,  v1060,  v1114);
  uint64_t v102 = sub_A928( v94,  v95,  v96,  v97,  v98,  v99,  v100,  v101,  v530,  v593,  v655,  v716,  v776,  v835,  v893,  v950,  v1006,  v1061,  v1115,  v1168);
  uint64_t v110 = sub_A920( v102,  v103,  v104,  v105,  v106,  v107,  v108,  v109,  v531,  v594,  v656,  v717,  v777,  v836,  v894,  v951,  v1007,  v1062,  v1116,  v1169,  v1221);
  uint64_t v118 = sub_36374( v110,  v111,  v112,  v113,  v114,  v115,  v116,  v117,  v532,  v595,  v657,  v718,  v778,  v837,  v895,  v952,  v1008,  v1063,  v1117,  v1170,  v1222,  v1273);
  uint64_t v126 = sub_3636C( v118,  v119,  v120,  v121,  v122,  v123,  v124,  v125,  v533,  v596,  v658,  v719,  v779,  v838,  v896,  v953,  v1009,  v1064,  v1118,  v1171,  v1223,  v1274,  v1324);
  uint64_t v134 = sub_36364( v126,  v127,  v128,  v129,  v130,  v131,  v132,  v133,  v534,  v597,  v659,  v720,  v780,  v839,  v897,  v954,  v1010,  v1065,  v1119,  v1172,  v1224,  v1275,  v1325,  v1374);
  uint64_t v142 = sub_363F0( v134,  v135,  v136,  v137,  v138,  v139,  v140,  v141,  v535,  v598,  v660,  v721,  v781,  v840,  v898,  v955,  v1011,  v1066,  v1120,  v1173,  v1225,  v1276,  v1326,  v1375,  v1423);
  uint64_t v150 = sub_36430( v142,  v143,  v144,  v145,  v146,  v147,  v148,  v149,  v536,  v599,  v661,  v722,  v782,  v841,  v899,  v956,  v1012,  v1067,  v1121,  v1174,  v1226,  v1277,  v1327,  v1376,  v1424,  v1471);
  uint64_t v158 = sub_36428( v150,  v151,  v152,  v153,  v154,  v155,  v156,  v157,  v537,  v600,  v662,  v723,  v783,  v842,  v900,  v957,  v1013,  v1068,  v1122,  v1175,  v1227,  v1278,  v1328,  v1377,  v1425,  v1472,  v1518);
  uint64_t v166 = sub_36478( v158,  v159,  v160,  v161,  v162,  v163,  v164,  v165,  v538,  v601,  v663,  v724,  v784,  v843,  v901,  v958,  v1014,  v1069,  v1123,  v1176,  v1228,  v1279,  v1329,  v1378,  v1426,  v1473,  v1519,  v1564);
  uint64_t v174 = sub_36524( v166,  v167,  v168,  v169,  v170,  v171,  v172,  v173,  v539,  v602,  v664,  v725,  v785,  v844,  v902,  v959,  v1015,  v1070,  v1124,  v1177,  v1229,  v1280,  v1330,  v1379,  v1427,  v1474,  v1520,  v1565,  v1609);
  uint64_t v182 = sub_3651C( v174,  v175,  v176,  v177,  v178,  v179,  v180,  v181,  v540,  v603,  v665,  v726,  v786,  v845,  v903,  v960,  v1016,  v1071,  v1125,  v1178,  v1230,  v1281,  v1331,  v1380,  v1428,  v1475,  v1521,  v1566,  v1610,  v1653);
  uint64_t v190 = sub_36514( v182,  v183,  v184,  v185,  v186,  v187,  v188,  v189,  v541,  v604,  v666,  v727,  v787,  v846,  v904,  v961,  v1017,  v1072,  v1126,  v1179,  v1231,  v1282,  v1332,  v1381,  v1429,  v1476,  v1522,  v1567,  v1611,  v1654,  v1696);
  uint64_t v198 = sub_3650C( v190,  v191,  v192,  v193,  v194,  v195,  v196,  v197,  v542,  v605,  v667,  v728,  v788,  v847,  v905,  v962,  v1018,  v1073,  v1127,  v1180,  v1232,  v1283,  v1333,  v1382,  v1430,  v1477,  v1523,  v1568,  v1612,  v1655,  v1697,  v1738);
  uint64_t v206 = sub_36504( v198,  v199,  v200,  v201,  v202,  v203,  v204,  v205,  v543,  v606,  v668,  v729,  v789,  v848,  v906,  v963,  v1019,  v1074,  v1128,  v1181,  v1233,  v1284,  v1334,  v1383,  v1431,  v1478,  v1524,  v1569,  v1613,  v1656,  v1698,  v1739,  v1779);
  uint64_t v214 = sub_364FC( v206,  v207,  v208,  v209,  v210,  v211,  v212,  v213,  v544,  v607,  v669,  v730,  v790,  v849,  v907,  v964,  v1020,  v1075,  v1129,  v1182,  v1234,  v1285,  v1335,  v1384,  v1432,  v1479,  v1525,  v1570,  v1614,  v1657,  v1699,  v1740,  v1780,  v1819);
  uint64_t v222 = sub_364F4( v214,  v215,  v216,  v217,  v218,  v219,  v220,  v221,  v545,  v608,  v670,  v731,  v791,  v850,  v908,  v965,  v1021,  v1076,  v1130,  v1183,  v1235,  v1286,  v1336,  v1385,  v1433,  v1480,  v1526,  v1571,  v1615,  v1658,  v1700,  v1741,  v1781,  v1820,  v1858);
  uint64_t v230 = sub_364EC( v222,  v223,  v224,  v225,  v226,  v227,  v228,  v229,  v546,  v609,  v671,  v732,  v792,  v851,  v909,  v966,  v1022,  v1077,  v1131,  v1184,  v1236,  v1287,  v1337,  v1386,  v1434,  v1481,  v1527,  v1572,  v1616,  v1659,  v1701,  v1742,  v1782,  v1821,  v1859,  v1896);
  uint64_t v238 = sub_364E4( v230,  v231,  v232,  v233,  v234,  v235,  v236,  v237,  v547,  v610,  v672,  v733,  v793,  v852,  v910,  v967,  v1023,  v1078,  v1132,  v1185,  v1237,  v1288,  v1338,  v1387,  v1435,  v1482,  v1528,  v1573,  v1617,  v1660,  v1702,  v1743,  v1783,  v1822,  v1860,  v1897,  v1933);
  uint64_t v246 = sub_364DC( v238,  v239,  v240,  v241,  v242,  v243,  v244,  v245,  v548,  v611,  v673,  v734,  v794,  v853,  v911,  v968,  v1024,  v1079,  v1133,  v1186,  v1238,  v1289,  v1339,  v1388,  v1436,  v1483,  v1529,  v1574,  v1618,  v1661,  v1703,  v1744,  v1784,  v1823,  v1861,  v1898,  v1934,  v1969);
  uint64_t v254 = sub_364D4( v246,  v247,  v248,  v249,  v250,  v251,  v252,  v253,  v549,  v612,  v674,  v735,  v795,  v854,  v912,  v969,  v1025,  v1080,  v1134,  v1187,  v1239,  v1290,  v1340,  v1389,  v1437,  v1484,  v1530,  v1575,  v1619,  v1662,  v1704,  v1745,  v1785,  v1824,  v1862,  v1899,  v1935,  v1970,  v2004);
  uint64_t v262 = sub_366F8( v254,  v255,  v256,  v257,  v258,  v259,  v260,  v261,  v550,  v613,  v675,  v736,  v796,  v855,  v913,  v970,  v1026,  v1081,  v1135,  v1188,  v1240,  v1291,  v1341,  v1390,  v1438,  v1485,  v1531,  v1576,  v1620,  v1663,  v1705,  v1746,  v1786,  v1825,  v1863,  v1900,  v1936,  v1971,  v2005,  v2038);
  uint64_t v270 = sub_366F0( v262,  v263,  v264,  v265,  v266,  v267,  v268,  v269,  v551,  v614,  v676,  v737,  v797,  v856,  v914,  v971,  v1027,  v1082,  v1136,  v1189,  v1241,  v1292,  v1342,  v1391,  v1439,  v1486,  v1532,  v1577,  v1621,  v1664,  v1706,  v1747,  v1787,  v1826,  v1864,  v1901,  v1937,  v1972,  v2006,  v2039,  v2071);
  uint64_t v278 = sub_36B90( v270,  v271,  v272,  v273,  v274,  v275,  v276,  v277,  v552,  v615,  v677,  v738,  v798,  v857,  v915,  v972,  v1028,  v1083,  v1137,  v1190,  v1242,  v1293,  v1343,  v1392,  v1440,  v1487,  v1533,  v1578,  v1622,  v1665,  v1707,  v1748,  v1788,  v1827,  v1865,  v1902,  v1938,  v1973,  v2007,  v2040,  v2072,  v2103);
  uint64_t v286 = sub_36EF4( v278,  v279,  v280,  v281,  v282,  v283,  v284,  v285,  v553,  v616,  v678,  v739,  v799,  v858,  v916,  v973,  v1029,  v1084,  v1138,  v1191,  v1243,  v1294,  v1344,  v1393,  v1441,  v1488,  v1534,  v1579,  v1623,  v1666,  v1708,  v1749,  v1789,  v1828,  v1866,  v1903,  v1939,  v1974,  v2008,  v2041,  v2073,  v2104,  v2134);
  uint64_t v294 = sub_36EEC( v286,  v287,  v288,  v289,  v290,  v291,  v292,  v293,  v554,  v617,  v679,  v740,  v800,  v859,  v917,  v974,  v1030,  v1085,  v1139,  v1192,  v1244,  v1295,  v1345,  v1394,  v1442,  v1489,  v1535,  v1580,  v1624,  v1667,  v1709,  v1750,  v1790,  v1829,  v1867,  v1904,  v1940,  v1975,  v2009,  v2042,  v2074,  v2105,  v2135,  v2164);
  uint64_t v302 = sub_DD7E4( v294,  v295,  v296,  v297,  v298,  v299,  v300,  v301,  v555,  v618,  v680,  v741,  v801,  v860,  v918,  v975,  v1031,  v1086,  v1140,  v1193,  v1245,  v1296,  v1346,  v1395,  v1443,  v1490,  v1536,  v1581,  v1625,  v1668,  v1710,  v1751,  v1791,  v1830,  v1868,  v1905,  v1941,  v1976,  v2010,  v2043,  v2075,  v2106,  v2136,  v2165,  v2193);
  uint64_t v310 = sub_DD7DC( v302,  v303,  v304,  v305,  v306,  v307,  v308,  v309,  v556,  v619,  v681,  v742,  v802,  v861,  v919,  v976,  v1032,  v1087,  v1141,  v1194,  v1246,  v1297,  v1347,  v1396,  v1444,  v1491,  v1537,  v1582,  v1626,  v1669,  v1711,  v1752,  v1792,  v1831,  v1869,  v1906,  v1942,  v1977,  v2011,  v2044,  v2076,  v2107,  v2137,  v2166,  v2194,  v2221);
  uint64_t v318 = sub_DD7D4( v310,  v311,  v312,  v313,  v314,  v315,  v316,  v317,  v557,  v620,  v682,  v743,  v803,  v862,  v920,  v977,  v1033,  v1088,  v1142,  v1195,  v1247,  v1298,  v1348,  v1397,  v1445,  v1492,  v1538,  v1583,  v1627,  v1670,  v1712,  v1753,  v1793,  v1832,  v1870,  v1907,  v1943,  v1978,  v2012,  v2045,  v2077,  v2108,  v2138,  v2167,  v2195,  v2222,  v2248);
  uint64_t v326 = sub_DD7CC( v318,  v319,  v320,  v321,  v322,  v323,  v324,  v325,  v558,  v621,  v683,  v744,  v804,  v863,  v921,  v978,  v1034,  v1089,  v1143,  v1196,  v1248,  v1299,  v1349,  v1398,  v1446,  v1493,  v1539,  v1584,  v1628,  v1671,  v1713,  v1754,  v1794,  v1833,  v1871,  v1908,  v1944,  v1979,  v2013,  v2046,  v2078,  v2109,  v2139,  v2168,  v2196,  v2223,  v2249,  v2274);
  uint64_t v334 = sub_DD7C4( v326,  v327,  v328,  v329,  v330,  v331,  v332,  v333,  v559,  v622,  v684,  v745,  v805,  v864,  v922,  v979,  v1035,  v1090,  v1144,  v1197,  v1249,  v1300,  v1350,  v1399,  v1447,  v1494,  v1540,  v1585,  v1629,  v1672,  v1714,  v1755,  v1795,  v1834,  v1872,  v1909,  v1945,  v1980,  v2014,  v2047,  v2079,  v2110,  v2140,  v2169,  v2197,  v2224,  v2250,  v2275,  v2299);
  uint64_t v342 = sub_DD7BC( v334,  v335,  v336,  v337,  v338,  v339,  v340,  v341,  v560,  v623,  v685,  v746,  v806,  v865,  v923,  v980,  v1036,  v1091,  v1145,  v1198,  v1250,  v1301,  v1351,  v1400,  v1448,  v1495,  v1541,  v1586,  v1630,  v1673,  v1715,  v1756,  v1796,  v1835,  v1873,  v1910,  v1946,  v1981,  v2015,  v2048,  v2080,  v2111,  v2141,  v2170,  v2198,  v2225,  v2251,  v2276,  v2300,
           v2323);
  uint64_t v350 = sub_DD7B4( v342,  v343,  v344,  v345,  v346,  v347,  v348,  v349,  v561,  v624,  v686,  v747,  v807,  v866,  v924,  v981,  v1037,  v1092,  v1146,  v1199,  v1251,  v1302,  v1352,  v1401,  v1449,  v1496,  v1542,  v1587,  v1631,  v1674,  v1716,  v1757,  v1797,  v1836,  v1874,  v1911,  v1947,  v1982,  v2016,  v2049,  v2081,  v2112,  v2142,  v2171,  v2199,  v2226,  v2252,  v2277,  v2301,
           v2324,
           v2346);
  uint64_t v358 = sub_DD7AC( v350,  v351,  v352,  v353,  v354,  v355,  v356,  v357,  v562,  v625,  v687,  v748,  v808,  v867,  v925,  v982,  v1038,  v1093,  v1147,  v1200,  v1252,  v1303,  v1353,  v1402,  v1450,  v1497,  v1543,  v1588,  v1632,  v1675,  v1717,  v1758,  v1798,  v1837,  v1875,  v1912,  v1948,  v1983,  v2017,  v2050,  v2082,  v2113,  v2143,  v2172,  v2200,  v2227,  v2253,  v2278,  v2302,
           v2325,
           v2347,
           v2368);
  uint64_t v366 = sub_DD7A4( v358,  v359,  v360,  v361,  v362,  v363,  v364,  v365,  v563,  v626,  v688,  v749,  v809,  v868,  v926,  v983,  v1039,  v1094,  v1148,  v1201,  v1253,  v1304,  v1354,  v1403,  v1451,  v1498,  v1544,  v1589,  v1633,  v1676,  v1718,  v1759,  v1799,  v1838,  v1876,  v1913,  v1949,  v1984,  v2018,  v2051,  v2083,  v2114,  v2144,  v2173,  v2201,  v2228,  v2254,  v2279,  v2303,
           v2326,
           v2348,
           v2369,
           v2389);
  uint64_t v374 = sub_DD79C( v366,  v367,  v368,  v369,  v370,  v371,  v372,  v373,  v564,  v627,  v689,  v750,  v810,  v869,  v927,  v984,  v1040,  v1095,  v1149,  v1202,  v1254,  v1305,  v1355,  v1404,  v1452,  v1499,  v1545,  v1590,  v1634,  v1677,  v1719,  v1760,  v1800,  v1839,  v1877,  v1914,  v1950,  v1985,  v2019,  v2052,  v2084,  v2115,  v2145,  v2174,  v2202,  v2229,  v2255,  v2280,  v2304,
           v2327,
           v2349,
           v2370,
           v2390,
           v2409);
  uint64_t v382 = sub_DD794( v374,  v375,  v376,  v377,  v378,  v379,  v380,  v381,  v565,  v628,  v690,  v751,  v811,  v870,  v928,  v985,  v1041,  v1096,  v1150,  v1203,  v1255,  v1306,  v1356,  v1405,  v1453,  v1500,  v1546,  v1591,  v1635,  v1678,  v1720,  v1761,  v1801,  v1840,  v1878,  v1915,  v1951,  v1986,  v2020,  v2053,  v2085,  v2116,  v2146,  v2175,  v2203,  v2230,  v2256,  v2281,  v2305,
           v2328,
           v2350,
           v2371,
           v2391,
           v2410,
           v2428);
  uint64_t v390 = sub_DD78C( v382,  v383,  v384,  v385,  v386,  v387,  v388,  v389,  v566,  v629,  v691,  v752,  v812,  v871,  v929,  v986,  v1042,  v1097,  v1151,  v1204,  v1256,  v1307,  v1357,  v1406,  v1454,  v1501,  v1547,  v1592,  v1636,  v1679,  v1721,  v1762,  v1802,  v1841,  v1879,  v1916,  v1952,  v1987,  v2021,  v2054,  v2086,  v2117,  v2147,  v2176,  v2204,  v2231,  v2257,  v2282,  v2306,
           v2329,
           v2351,
           v2372,
           v2392,
           v2411,
           v2429,
           v2446);
  uint64_t v398 = sub_DD784( v390,  v391,  v392,  v393,  v394,  v395,  v396,  v397,  v567,  v630,  v692,  v753,  v813,  v872,  v930,  v987,  v1043,  v1098,  v1152,  v1205,  v1257,  v1308,  v1358,  v1407,  v1455,  v1502,  v1548,  v1593,  v1637,  v1680,  v1722,  v1763,  v1803,  v1842,  v1880,  v1917,  v1953,  v1988,  v2022,  v2055,  v2087,  v2118,  v2148,  v2177,  v2205,  v2232,  v2258,  v2283,  v2307,
           v2330,
           v2352,
           v2373,
           v2393,
           v2412,
           v2430,
           v2447,
           v2463);
  uint64_t v406 = sub_DD77C( v398,  v399,  v400,  v401,  v402,  v403,  v404,  v405,  v568,  v631,  v693,  v754,  v814,  v873,  v931,  v988,  v1044,  v1099,  v1153,  v1206,  v1258,  v1309,  v1359,  v1408,  v1456,  v1503,  v1549,  v1594,  v1638,  v1681,  v1723,  v1764,  v1804,  v1843,  v1881,  v1918,  v1954,  v1989,  v2023,  v2056,  v2088,  v2119,  v2149,  v2178,  v2206,  v2233,  v2259,  v2284,  v2308,
           v2331,
           v2353,
           v2374,
           v2394,
           v2413,
           v2431,
           v2448,
           v2464,
           v2479);
  uint64_t v414 = sub_DD774( v406,  v407,  v408,  v409,  v410,  v411,  v412,  v413,  v569,  v632,  v694,  v755,  v815,  v874,  v932,  v989,  v1045,  v1100,  v1154,  v1207,  v1259,  v1310,  v1360,  v1409,  v1457,  v1504,  v1550,  v1595,  v1639,  v1682,  v1724,  v1765,  v1805,  v1844,  v1882,  v1919,  v1955,  v1990,  v2024,  v2057,  v2089,  v2120,  v2150,  v2179,  v2207,  v2234,  v2260,  v2285,  v2309,
           v2332,
           v2354,
           v2375,
           v2395,
           v2414,
           v2432,
           v2449,
           v2465,
           v2480,
           v2494);
  uint64_t v422 = sub_DD76C( v414,  v415,  v416,  v417,  v418,  v419,  v420,  v421,  v570,  v633,  v695,  v756,  v816,  v875,  v933,  v990,  v1046,  v1101,  v1155,  v1208,  v1260,  v1311,  v1361,  v1410,  v1458,  v1505,  v1551,  v1596,  v1640,  v1683,  v1725,  v1766,  v1806,  v1845,  v1883,  v1920,  v1956,  v1991,  v2025,  v2058,  v2090,  v2121,  v2151,  v2180,  v2208,  v2235,  v2261,  v2286,  v2310,
           v2333,
           v2355,
           v2376,
           v2396,
           v2415,
           v2433,
           v2450,
           v2466,
           v2481,
           v2495,
           v2508);
  uint64_t v430 = sub_DD764( v422,  v423,  v424,  v425,  v426,  v427,  v428,  v429,  v571,  v634,  v696,  v757,  v817,  v876,  v934,  v991,  v1047,  v1102,  v1156,  v1209,  v1261,  v1312,  v1362,  v1411,  v1459,  v1506,  v1552,  v1597,  v1641,  v1684,  v1726,  v1767,  v1807,  v1846,  v1884,  v1921,  v1957,  v1992,  v2026,  v2059,  v2091,  v2122,  v2152,  v2181,  v2209,  v2236,  v2262,  v2287,  v2311,
           v2334,
           v2356,
           v2377,
           v2397,
           v2416,
           v2434,
           v2451,
           v2467,
           v2482,
           v2496,
           v2509,
           v2521);
  uint64_t v438 = sub_DD75C( v430,  v431,  v432,  v433,  v434,  v435,  v436,  v437,  v572,  v635,  v697,  v758,  v818,  v877,  v935,  v992,  v1048,  v1103,  v1157,  v1210,  v1262,  v1313,  v1363,  v1412,  v1460,  v1507,  v1553,  v1598,  v1642,  v1685,  v1727,  v1768,  v1808,  v1847,  v1885,  v1922,  v1958,  v1993,  v2027,  v2060,  v2092,  v2123,  v2153,  v2182,  v2210,  v2237,  v2263,  v2288,  v2312,
           v2335,
           v2357,
           v2378,
           v2398,
           v2417,
           v2435,
           v2452,
           v2468,
           v2483,
           v2497,
           v2510,
           v2522,
           v2533);
  uint64_t v446 = sub_DD754( v438,  v439,  v440,  v441,  v442,  v443,  v444,  v445,  v573,  v636,  v698,  v759,  v819,  v878,  v936,  v993,  v1049,  v1104,  v1158,  v1211,  v1263,  v1314,  v1364,  v1413,  v1461,  v1508,  v1554,  v1599,  v1643,  v1686,  v1728,  v1769,  v1809,  v1848,  v1886,  v1923,  v1959,  v1994,  v2028,  v2061,  v2093,  v2124,  v2154,  v2183,  v2211,  v2238,  v2264,  v2289,  v2313,
           v2336,
           v2358,
           v2379,
           v2399,
           v2418,
           v2436,
           v2453,
           v2469,
           v2484,
           v2498,
           v2511,
           v2523,
           v2534,
           v2544);
  uint64_t v454 = sub_DD74C( v446,  v447,  v448,  v449,  v450,  v451,  v452,  v453,  v574,  v637,  v699,  v760,  v820,  v879,  v937,  v994,  v1050,  v1105,  v1159,  v1212,  v1264,  v1315,  v1365,  v1414,  v1462,  v1509,  v1555,  v1600,  v1644,  v1687,  v1729,  v1770,  v1810,  v1849,  v1887,  v1924,  v1960,  v1995,  v2029,  v2062,  v2094,  v2125,  v2155,  v2184,  v2212,  v2239,  v2265,  v2290,  v2314,
           v2337,
           v2359,
           v2380,
           v2400,
           v2419,
           v2437,
           v2454,
           v2470,
           v2485,
           v2499,
           v2512,
           v2524,
           v2535,
           v2545);
  uint64_t v462 = sub_DD744( v454,  v455,  v456,  v457,  v458,  v459,  v460,  v461,  v575,  v638,  v700,  v761,  v821,  v880,  v938,  v995,  v1051,  v1106,  v1160,  v1213,  v1265,  v1316,  v1366,  v1415,  v1463,  v1510,  v1556,  v1601,  v1645,  v1688,  v1730,  v1771,  v1811,  v1850,  v1888,  v1925,  v1961,  v1996,  v2030,  v2063,  v2095,  v2126,  v2156,  v2185,  v2213,  v2240,  v2266,  v2291,  v2315,
           v2338,
           v2360,
           v2381,
           v2401,
           v2420,
           v2438,
           v2455,
           v2471,
           v2486,
           v2500,
           v2513,
           v2525,
           v2536,
           v2546);
  uint64_t v470 = sub_DD73C( v462,  v463,  v464,  v465,  v466,  v467,  v468,  v469,  v576,  v639,  v701,  v762,  v822,  v881,  v939,  v996,  v1052,  v1107,  v1161,  v1214,  v1266,  v1317,  v1367,  v1416,  v1464,  v1511,  v1557,  v1602,  v1646,  v1689,  v1731,  v1772,  v1812,  v1851,  v1889,  v1926,  v1962,  v1997,  v2031,  v2064,  v2096,  v2127,  v2157,  v2186,  v2214,  v2241,  v2267,  v2292,  v2316,
           v2339,
           v2361,
           v2382,
           v2402,
           v2421,
           v2439,
           v2456,
           v2472,
           v2487,
           v2501,
           v2514,
           v2526,
           v2537,
           v2547);
  uint64_t v478 = sub_DD734( v470,  v471,  v472,  v473,  v474,  v475,  v476,  v477,  v577,  v640,  v702,  v763,  v823,  v882,  v940,  v997,  v1053,  v1108,  v1162,  v1215,  v1267,  v1318,  v1368,  v1417,  v1465,  v1512,  v1558,  v1603,  v1647,  v1690,  v1732,  v1773,  v1813,  v1852,  v1890,  v1927,  v1963,  v1998,  v2032,  v2065,  v2097,  v2128,  v2158,  v2187,  v2215,  v2242,  v2268,  v2293,  v2317,
           v2340,
           v2362,
           v2383,
           v2403,
           v2422,
           v2440,
           v2457,
           v2473,
           v2488,
           v2502,
           v2515,
           v2527,
           v2538,
           v2548);
  uint64_t v486 = sub_DD72C( v478,  v479,  v480,  v481,  v482,  v483,  v484,  v485,  v578,  v641,  v703,  v764,  v824,  v883,  v941,  v998,  v1054,  v1109,  v1163,  v1216,  v1268,  v1319,  v1369,  v1418,  v1466,  v1513,  v1559,  v1604,  v1648,  v1691,  v1733,  v1774,  v1814,  v1853,  v1891,  v1928,  v1964,  v1999,  v2033,  v2066,  v2098,  v2129,  v2159,  v2188,  v2216,  v2243,  v2269,  v2294,  v2318,
           v2341,
           v2363,
           v2384,
           v2404,
           v2423,
           v2441,
           v2458,
           v2474,
           v2489,
           v2503,
           v2516,
           v2528,
           v2539,
           v2549);
  uint64_t v494 = sub_DD724( v486,  v487,  v488,  v489,  v490,  v491,  v492,  v493,  v579,  v642,  v704,  v765,  v825,  v884,  v942,  v999,  v1055,  v1110,  v1164,  v1217,  v1269,  v1320,  v1370,  v1419,  v1467,  v1514,  v1560,  v1605,  v1649,  v1692,  v1734,  v1775,  v1815,  v1854,  v1892,  v1929,  v1965,  v2000,  v2034,  v2067,  v2099,  v2130,  v2160,  v2189,  v2217,  v2244,  v2270,  v2295,  v2319,
           v2342,
           v2364,
           v2385,
           v2405,
           v2424,
           v2442,
           v2459,
           v2475,
           v2490,
           v2504,
           v2517,
           v2529,
           v2540,
           v2550);
  uint64_t v502 = sub_DD71C( v494,  v495,  v496,  v497,  v498,  v499,  v500,  v501,  v580,  v643,  v705,  v766,  v826,  v885,  v943,  v1000,  v1056,  v1111,  v1165,  v1218,  v1270,  v1321,  v1371,  v1420,  v1468,  v1515,  v1561,  v1606,  v1650,  v1693,  v1735,  v1776,  v1816,  v1855,  v1893,  v1930,  v1966,  v2001,  v2035,  v2068,  v2100,  v2131,  v2161,  v2190,  v2218,  v2245,  v2271,  v2296,  v2320,
           v2343,
           v2365,
           v2386,
           v2406,
           v2425,
           v2443,
           v2460,
           v2476,
           v2491,
           v2505,
           v2518,
           v2530,
           v2541,
           v2551);
  uint64_t v510 = sub_DD714( v502,  v503,  v504,  v505,  v506,  v507,  v508,  v509,  v581,  v644,  v706,  v767,  v827,  v886,  v944,  v1001,  v1057,  v1112,  v1166,  v1219,  v1271,  v1322,  v1372,  v1421,  v1469,  v1516,  v1562,  v1607,  v1651,  v1694,  v1736,  v1777,  v1817,  v1856,  v1894,  v1931,  v1967,  v2002,  v2036,  v2069,  v2101,  v2132,  v2162,  v2191,  v2219,  v2246,  v2272,  v2297,  v2321,
           v2344,
           v2366,
           v2387,
           v2407,
           v2426,
           v2444,
           v2461,
           v2477,
           v2492,
           v2506,
           v2519,
           v2531,
           v2542,
           v2552);
  sub_DD70C( v510,  v511,  v512,  v513,  v514,  v515,  v516,  v517,  v582,  v645,  v707,  v768,  v828,  v887,  v945,  v1002,  v1058,  v1113,  v1167,  v1220,  v1272,  v1323,  v1373,  v1422,  v1470,  v1517,  v1563,  v1608,  v1652,  v1695,  v1737,  v1778,  v1818,  v1857,  v1895,  v1932,  v1968,  v2003,  v2037,  v2070,  v2102,  v2133,  v2163,  v2192,  v2220,  v2247,  v2273,  v2298,  v2322,
    v2345,
    v2367,
    v2388,
    v2408,
    v2427,
    v2445,
    v2462,
    v2478,
    v2493,
    v2507,
    v2520,
    v2532,
    v2543,
    v2553);
  sub_DD704();
  sub_DD6FC();
  sub_DD6F4();
  sub_DD6EC();
  sub_DD6E4();
  sub_DD6DC();
  sub_DD6D4();
  sub_DD6CC();
  sub_DD6C4();
  sub_DD6BC();
  sub_DD6B4();
  sub_DD6AC();
  sub_DD6A4();
  sub_DD69C();
  sub_DD694();
  sub_DD68C();
  sub_DD684();
  sub_DD67C();
  sub_DD674();
  sub_DD66C();
  sub_DD664();
  sub_DD65C();
  sub_DD654();
  sub_DD64C();
  sub_DD644();
  sub_DD63C();
  sub_DD634();
  sub_DD62C();
  sub_DD624();
  sub_DD61C();
  sub_DD614();
  sub_DD60C();
  sub_DD604();
  sub_DD5FC();
  sub_DD5F4();
  sub_DD5EC();
  sub_DD5E4();
  sub_DD5DC();
  sub_DD5D4();
  sub_DD5CC();
  sub_DD5C4();
  sub_DD5BC();
  sub_DD5B4();
  sub_DD5AC();
  sub_DD5A4();
  sub_DD59C();
  sub_DD594();
  sub_DD58C();
  sub_DD584();
  sub_DD57C();
  sub_DD574();
  sub_DD56C();
  sub_DD564();
  sub_DD55C();
  sub_DD554();
  sub_DD54C();
  sub_DD544();
  sub_DD53C();
  sub_DD534();
  sub_DD52C();
  sub_DD524();
  sub_DD51C();
  sub_DD514();
  sub_DD50C();
  sub_DD504();
  sub_DD4FC();
  sub_DD4F4();
  sub_DD4EC();
  sub_DD4DC();
  sub_DD4E4();
  sub_DD868();
  sub_DD870();
  sub_36B88();
  sub_366E8();
  sub_3677C();
  sub_36588();
  sub_36624();
  sub_3661C();
  sub_36614();
  sub_3660C();
  sub_36604();
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  sub_366B8();
  sub_366B0();
  sub_366A8();
  sub_36814();
  uint64_t v518 = (uint64_t (*)(void))sub_DDBE4();
  return sub_36148(v518);
}

uint64_t sub_D4414()
{
  *(void *)(v0 + 28368) = v2;
  sub_36900(v3);
  if (v1)
  {
    sub_DE744(*(void *)(v0 + 28352));
    swift_bridgeObjectRelease();
    sub_DEB68();
    swift_bridgeObjectRelease();
    sub_DE3A8();
    swift_bridgeObjectRelease();
    sub_2A184();
    sub_36860();
  }

  else
  {
    swift_release();
  }

  sub_A964();
  return sub_36348(v4, v5, v6);
}

uint64_t sub_D44A0()
{
  if ((sub_DD9F0() & 1) != 0)
  {
    uint64_t v4 = sub_DDB50();
  }

  else
  {
    sub_DEBC4(*(void *)(v0 + 25976) + 24LL);
    sub_500C((void *)(v0 + 21008), *(void *)(v0 + 21032));
    sub_DDB18();
    char v7 = sub_DD9B0((void *)(v0 + 20968));
    sub_DE780();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 21048));
    uint64_t v4 = _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 21128));
    if ((v7 & 1) != 0) {
      unsigned __int8 v6 = 4;
    }
    else {
      unsigned __int8 v6 = 0;
    }
  }

  sub_DDA20(v4, v5, v6);
  sub_DE0D8();
  sub_DD83C();
  uint64_t v8 = *(void **)(v0 + 20912);
  uint64_t v9 = *(void **)(v0 + 20920);
  if ((sub_DD9D0((void *)(v0 + 20888)) & 1) != 0)
  {
    uint64_t v10 = sub_DDCC8();
  }

  else
  {
    sub_DE3F0();
    sub_500C(v9, *(void *)(v0 + 20752));
    sub_DD4CC();
    char v11 = sub_DD92C(v8);
    sub_DE760(v8);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 20888));
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 20928));
    if ((v11 & 1) != 0) {
      uint64_t v10 = 11LL;
    }
    else {
      uint64_t v10 = 9LL;
    }
  }

  char v12 = *(_BYTE *)(v0 + 28516);
  HealthApps.rawValue.getter(v10);
  uint64_t v14 = v13;
  uint64_t v15 = sub_4195C();
  getMedStatus(from:)(v15, v16, v17, v18, v19, v20);
  sub_37034();
  sub_DEEEC();
  if ((v12 & 1) != 0)
  {
    sub_DA680( *(void **)(v0 + 28136),  (SEL *)&selRef_matchingMeds,  (uint64_t (*)(void))&type metadata accessor for MatchedMedName);
    if (v21 && (id v22 = sub_DEB8C(v21), sub_249D4(), v22))
    {
      sub_DEED0();
      unint64_t v66 = v23;
    }

    else
    {
      unint64_t v66 = 0LL;
    }
  }

  else
  {
    unint64_t v66 = *(void *)(v0 + 27416);
  }

  sub_DEC80(20648LL);
  sub_DE12C(*(void *)(v0 + 28368));
  uint64_t v24 = *(void *)(v0 + 26184);
  sub_DEC0C();
  uint64_t v25 = *(void *)(v0 + 25984);
  sub_DEED8();
  uint64_t v67 = *(void *)(v0 + 25976);
  if (v28) {
    uint64_t v29 = v28;
  }
  else {
    uint64_t v29 = 0xE500000000000000LL;
  }
  sub_DEDB8(v26, v27, &qword_189CF8);
  PhoneRingsSnippet.body.getter(v30);
  uint64_t v31 = sub_11B244();
  uint64_t v32 = sub_ABE70();
  sub_98DE0(v32, v33, v34);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v25, 0LL, 1LL, v14);
  char v35 = sub_DDDBC();
  sub_DE1F4( v35,  v36,  v37,  v38,  v39,  v40,  v41,  v42,  0LL,  0LL,  v24,  v43,  v58,  v59,  HIBYTE(v59),  v60,  v61,  v62,  v63,  v64,  v29,  v25,  v65,  v66);
  sub_36878(v67 + 296);
  uint64_t v44 = sub_DE0E4();
  *(void *)(v0 + 20592) = v44;
  sub_36F4C((unint64_t *)&qword_18A468, v45, type metadata accessor for WellnessSnippets);
  *(void *)(v0 + 20600) = v46;
  uint64_t v47 = sub_72E20();
  sub_DE718(v31, v48, type metadata accessor for SpecificMedCompletedLogModel);
  sub_DE18C((uint64_t)v47, v44);
  uint64_t v49 = sub_494C(&qword_18A460);
  uint64_t v50 = sub_20308(v49, 40LL);
  uint64_t v51 = sub_373F8(v50);
  sub_DE284(v51, v52, v53);
  *(void *)(v0 + 28376) = v54;
  id v55 = v68;
  uint64_t v56 = (void *)sub_36B20();
  *(void *)(v0 + 28384) = v56;
  *uint64_t v56 = v0;
  v56[1] = sub_D4898;
  sub_DDD84();
  return sub_DDF78();
}

uint64_t sub_D4898()
{
  return sub_D954();
}

uint64_t sub_D48E4()
{
  uint64_t v1 = (void *)v0[3515];
  sub_DE98C();
  sub_DE494(v0[3280]);
  uint64_t v2538 = v0[3257];
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v2);
  sub_369CC();
  sub_36878((uint64_t)(v0 + 2581));
  uint64_t v3 = sub_20308((uint64_t)&unk_17FBB8, 56LL);
  sub_DDC44(v3);
  v0[3225] = sub_DE278((uint64_t)&v2539, (uint64_t)&unk_18EA18);
  sub_DE28C();

  sub_6D64();
  sub_2A184();
  sub_DE540();
  sub_DE48C();
  sub_DEA0C();
  sub_26F04(v2538, type metadata accessor for SpecificMedCompletedLogModel);
  sub_DE1AC(v4, &qword_189CF8);
  uint64_t v5 = sub_DDB08();
  sub_DDC20(v5, type metadata accessor for SnippetHeaderModel);
  sub_DE3DC(v6, &qword_189D00);
  sub_DDA68(v7, &qword_18B168);
  sub_3652C();
  sub_DC288();
  sub_A8F4();
  sub_A85C();
  sub_A864();
  sub_A910();
  sub_A8EC();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  uint64_t v8 = sub_A78C();
  uint64_t v16 = sub_A888(v8, v9, v10, v11, v12, v13, v14, v15, v506, v568, v630);
  uint64_t v24 = sub_A854(v16, v17, v18, v19, v20, v21, v22, v23, v507, v569, v631, v692);
  uint64_t v32 = sub_A84C(v24, v25, v26, v27, v28, v29, v30, v31, v508, v570, v632, v693, v753);
  uint64_t v40 = sub_A844(v32, v33, v34, v35, v36, v37, v38, v39, v509, v571, v633, v694, v754, v813);
  uint64_t v48 = sub_A83C(v40, v41, v42, v43, v44, v45, v46, v47, v510, v572, v634, v695, v755, v814, v872);
  uint64_t v56 = sub_A95C(v48, v49, v50, v51, v52, v53, v54, v55, v511, v573, v635, v696, v756, v815, v873, v930);
  uint64_t v64 = sub_A954(v56, v57, v58, v59, v60, v61, v62, v63, v512, v574, v636, v697, v757, v816, v874, v931, v987);
  uint64_t v72 = sub_A938(v64, v65, v66, v67, v68, v69, v70, v71, v513, v575, v637, v698, v758, v817, v875, v932, v988, v1043);
  uint64_t v80 = sub_A930( v72,  v73,  v74,  v75,  v76,  v77,  v78,  v79,  v514,  v576,  v638,  v699,  v759,  v818,  v876,  v933,  v989,  v1044,  v1098);
  uint64_t v88 = sub_A928( v80,  v81,  v82,  v83,  v84,  v85,  v86,  v87,  v515,  v577,  v639,  v700,  v760,  v819,  v877,  v934,  v990,  v1045,  v1099,  v1152);
  uint64_t v96 = sub_A920( v88,  v89,  v90,  v91,  v92,  v93,  v94,  v95,  v516,  v578,  v640,  v701,  v761,  v820,  v878,  v935,  v991,  v1046,  v1100,  v1153,  v1205);
  uint64_t v104 = sub_36374( v96,  v97,  v98,  v99,  v100,  v101,  v102,  v103,  v517,  v579,  v641,  v702,  v762,  v821,  v879,  v936,  v992,  v1047,  v1101,  v1154,  v1206,  v1257);
  uint64_t v112 = sub_3636C( v104,  v105,  v106,  v107,  v108,  v109,  v110,  v111,  v518,  v580,  v642,  v703,  v763,  v822,  v880,  v937,  v993,  v1048,  v1102,  v1155,  v1207,  v1258,  v1308);
  uint64_t v120 = sub_36364( v112,  v113,  v114,  v115,  v116,  v117,  v118,  v119,  v519,  v581,  v643,  v704,  v764,  v823,  v881,  v938,  v994,  v1049,  v1103,  v1156,  v1208,  v1259,  v1309,  v1358);
  uint64_t v128 = sub_363F0( v120,  v121,  v122,  v123,  v124,  v125,  v126,  v127,  v520,  v582,  v644,  v705,  v765,  v824,  v882,  v939,  v995,  v1050,  v1104,  v1157,  v1209,  v1260,  v1310,  v1359,  v1407);
  uint64_t v136 = sub_36430( v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v521,  v583,  v645,  v706,  v766,  v825,  v883,  v940,  v996,  v1051,  v1105,  v1158,  v1210,  v1261,  v1311,  v1360,  v1408,  v1455);
  uint64_t v144 = sub_36428( v136,  v137,  v138,  v139,  v140,  v141,  v142,  v143,  v522,  v584,  v646,  v707,  v767,  v826,  v884,  v941,  v997,  v1052,  v1106,  v1159,  v1211,  v1262,  v1312,  v1361,  v1409,  v1456,  v1502);
  uint64_t v152 = sub_36478( v144,  v145,  v146,  v147,  v148,  v149,  v150,  v151,  v523,  v585,  v647,  v708,  v768,  v827,  v885,  v942,  v998,  v1053,  v1107,  v1160,  v1212,  v1263,  v1313,  v1362,  v1410,  v1457,  v1503,  v1548);
  uint64_t v160 = sub_36524( v152,  v153,  v154,  v155,  v156,  v157,  v158,  v159,  v524,  v586,  v648,  v709,  v769,  v828,  v886,  v943,  v999,  v1054,  v1108,  v1161,  v1213,  v1264,  v1314,  v1363,  v1411,  v1458,  v1504,  v1549,  v1593);
  uint64_t v168 = sub_3651C( v160,  v161,  v162,  v163,  v164,  v165,  v166,  v167,  v525,  v587,  v649,  v710,  v770,  v829,  v887,  v944,  v1000,  v1055,  v1109,  v1162,  v1214,  v1265,  v1315,  v1364,  v1412,  v1459,  v1505,  v1550,  v1594,  v1637);
  uint64_t v176 = sub_36514( v168,  v169,  v170,  v171,  v172,  v173,  v174,  v175,  v526,  v588,  v650,  v711,  v771,  v830,  v888,  v945,  v1001,  v1056,  v1110,  v1163,  v1215,  v1266,  v1316,  v1365,  v1413,  v1460,  v1506,  v1551,  v1595,  v1638,  v1680);
  uint64_t v184 = sub_3650C( v176,  v177,  v178,  v179,  v180,  v181,  v182,  v183,  v527,  v589,  v651,  v712,  v772,  v831,  v889,  v946,  v1002,  v1057,  v1111,  v1164,  v1216,  v1267,  v1317,  v1366,  v1414,  v1461,  v1507,  v1552,  v1596,  v1639,  v1681,  v1722);
  uint64_t v192 = sub_36504( v184,  v185,  v186,  v187,  v188,  v189,  v190,  v191,  v528,  v590,  v652,  v713,  v773,  v832,  v890,  v947,  v1003,  v1058,  v1112,  v1165,  v1217,  v1268,  v1318,  v1367,  v1415,  v1462,  v1508,  v1553,  v1597,  v1640,  v1682,  v1723,  v1763);
  uint64_t v200 = sub_364FC( v192,  v193,  v194,  v195,  v196,  v197,  v198,  v199,  v529,  v591,  v653,  v714,  v774,  v833,  v891,  v948,  v1004,  v1059,  v1113,  v1166,  v1218,  v1269,  v1319,  v1368,  v1416,  v1463,  v1509,  v1554,  v1598,  v1641,  v1683,  v1724,  v1764,  v1803);
  uint64_t v208 = sub_364F4( v200,  v201,  v202,  v203,  v204,  v205,  v206,  v207,  v530,  v592,  v654,  v715,  v775,  v834,  v892,  v949,  v1005,  v1060,  v1114,  v1167,  v1219,  v1270,  v1320,  v1369,  v1417,  v1464,  v1510,  v1555,  v1599,  v1642,  v1684,  v1725,  v1765,  v1804,  v1842);
  uint64_t v216 = sub_364EC( v208,  v209,  v210,  v211,  v212,  v213,  v214,  v215,  v531,  v593,  v655,  v716,  v776,  v835,  v893,  v950,  v1006,  v1061,  v1115,  v1168,  v1220,  v1271,  v1321,  v1370,  v1418,  v1465,  v1511,  v1556,  v1600,  v1643,  v1685,  v1726,  v1766,  v1805,  v1843,  v1880);
  uint64_t v224 = sub_364E4( v216,  v217,  v218,  v219,  v220,  v221,  v222,  v223,  v532,  v594,  v656,  v717,  v777,  v836,  v894,  v951,  v1007,  v1062,  v1116,  v1169,  v1221,  v1272,  v1322,  v1371,  v1419,  v1466,  v1512,  v1557,  v1601,  v1644,  v1686,  v1727,  v1767,  v1806,  v1844,  v1881,  v1917);
  uint64_t v232 = sub_364DC( v224,  v225,  v226,  v227,  v228,  v229,  v230,  v231,  v533,  v595,  v657,  v718,  v778,  v837,  v895,  v952,  v1008,  v1063,  v1117,  v1170,  v1222,  v1273,  v1323,  v1372,  v1420,  v1467,  v1513,  v1558,  v1602,  v1645,  v1687,  v1728,  v1768,  v1807,  v1845,  v1882,  v1918,  v1953);
  uint64_t v240 = sub_364D4( v232,  v233,  v234,  v235,  v236,  v237,  v238,  v239,  v534,  v596,  v658,  v719,  v779,  v838,  v896,  v953,  v1009,  v1064,  v1118,  v1171,  v1223,  v1274,  v1324,  v1373,  v1421,  v1468,  v1514,  v1559,  v1603,  v1646,  v1688,  v1729,  v1769,  v1808,  v1846,  v1883,  v1919,  v1954,  v1988);
  uint64_t v248 = sub_366F8( v240,  v241,  v242,  v243,  v244,  v245,  v246,  v247,  v535,  v597,  v659,  v720,  v780,  v839,  v897,  v954,  v1010,  v1065,  v1119,  v1172,  v1224,  v1275,  v1325,  v1374,  v1422,  v1469,  v1515,  v1560,  v1604,  v1647,  v1689,  v1730,  v1770,  v1809,  v1847,  v1884,  v1920,  v1955,  v1989,  v2022);
  uint64_t v256 = sub_366F0( v248,  v249,  v250,  v251,  v252,  v253,  v254,  v255,  v536,  v598,  v660,  v721,  v781,  v840,  v898,  v955,  v1011,  v1066,  v1120,  v1173,  v1225,  v1276,  v1326,  v1375,  v1423,  v1470,  v1516,  v1561,  v1605,  v1648,  v1690,  v1731,  v1771,  v1810,  v1848,  v1885,  v1921,  v1956,  v1990,  v2023,  v2055);
  uint64_t v264 = sub_36B90( v256,  v257,  v258,  v259,  v260,  v261,  v262,  v263,  v537,  v599,  v661,  v722,  v782,  v841,  v899,  v956,  v1012,  v1067,  v1121,  v1174,  v1226,  v1277,  v1327,  v1376,  v1424,  v1471,  v1517,  v1562,  v1606,  v1649,  v1691,  v1732,  v1772,  v1811,  v1849,  v1886,  v1922,  v1957,  v1991,  v2024,  v2056,  v2087);
  uint64_t v272 = sub_36EF4( v264,  v265,  v266,  v267,  v268,  v269,  v270,  v271,  v538,  v600,  v662,  v723,  v783,  v842,  v900,  v957,  v1013,  v1068,  v1122,  v1175,  v1227,  v1278,  v1328,  v1377,  v1425,  v1472,  v1518,  v1563,  v1607,  v1650,  v1692,  v1733,  v1773,  v1812,  v1850,  v1887,  v1923,  v1958,  v1992,  v2025,  v2057,  v2088,  v2118);
  uint64_t v280 = sub_36EEC( v272,  v273,  v274,  v275,  v276,  v277,  v278,  v279,  v539,  v601,  v663,  v724,  v784,  v843,  v901,  v958,  v1014,  v1069,  v1123,  v1176,  v1228,  v1279,  v1329,  v1378,  v1426,  v1473,  v1519,  v1564,  v1608,  v1651,  v1693,  v1734,  v1774,  v1813,  v1851,  v1888,  v1924,  v1959,  v1993,  v2026,  v2058,  v2089,  v2119,  v2148);
  uint64_t v288 = sub_DD7E4( v280,  v281,  v282,  v283,  v284,  v285,  v286,  v287,  v540,  v602,  v664,  v725,  v785,  v844,  v902,  v959,  v1015,  v1070,  v1124,  v1177,  v1229,  v1280,  v1330,  v1379,  v1427,  v1474,  v1520,  v1565,  v1609,  v1652,  v1694,  v1735,  v1775,  v1814,  v1852,  v1889,  v1925,  v1960,  v1994,  v2027,  v2059,  v2090,  v2120,  v2149,  v2177);
  uint64_t v296 = sub_DD7DC( v288,  v289,  v290,  v291,  v292,  v293,  v294,  v295,  v541,  v603,  v665,  v726,  v786,  v845,  v903,  v960,  v1016,  v1071,  v1125,  v1178,  v1230,  v1281,  v1331,  v1380,  v1428,  v1475,  v1521,  v1566,  v1610,  v1653,  v1695,  v1736,  v1776,  v1815,  v1853,  v1890,  v1926,  v1961,  v1995,  v2028,  v2060,  v2091,  v2121,  v2150,  v2178,  v2205);
  uint64_t v304 = sub_DD7D4( v296,  v297,  v298,  v299,  v300,  v301,  v302,  v303,  v542,  v604,  v666,  v727,  v787,  v846,  v904,  v961,  v1017,  v1072,  v1126,  v1179,  v1231,  v1282,  v1332,  v1381,  v1429,  v1476,  v1522,  v1567,  v1611,  v1654,  v1696,  v1737,  v1777,  v1816,  v1854,  v1891,  v1927,  v1962,  v1996,  v2029,  v2061,  v2092,  v2122,  v2151,  v2179,  v2206,  v2232);
  uint64_t v312 = sub_DD7CC( v304,  v305,  v306,  v307,  v308,  v309,  v310,  v311,  v543,  v605,  v667,  v728,  v788,  v847,  v905,  v962,  v1018,  v1073,  v1127,  v1180,  v1232,  v1283,  v1333,  v1382,  v1430,  v1477,  v1523,  v1568,  v1612,  v1655,  v1697,  v1738,  v1778,  v1817,  v1855,  v1892,  v1928,  v1963,  v1997,  v2030,  v2062,  v2093,  v2123,  v2152,  v2180,  v2207,  v2233,  v2258);
  uint64_t v320 = sub_DD7C4( v312,  v313,  v314,  v315,  v316,  v317,  v318,  v319,  v544,  v606,  v668,  v729,  v789,  v848,  v906,  v963,  v1019,  v1074,  v1128,  v1181,  v1233,  v1284,  v1334,  v1383,  v1431,  v1478,  v1524,  v1569,  v1613,  v1656,  v1698,  v1739,  v1779,  v1818,  v1856,  v1893,  v1929,  v1964,  v1998,  v2031,  v2063,  v2094,  v2124,  v2153,  v2181,  v2208,  v2234,  v2259,  v2283);
  uint64_t v328 = sub_DD7BC( v320,  v321,  v322,  v323,  v324,  v325,  v326,  v327,  v545,  v607,  v669,  v730,  v790,  v849,  v907,  v964,  v1020,  v1075,  v1129,  v1182,  v1234,  v1285,  v1335,  v1384,  v1432,  v1479,  v1525,  v1570,  v1614,  v1657,  v1699,  v1740,  v1780,  v1819,  v1857,  v1894,  v1930,  v1965,  v1999,  v2032,  v2064,  v2095,  v2125,  v2154,  v2182,  v2209,  v2235,  v2260,  v2284,
           v2307);
  uint64_t v336 = sub_DD7B4( v328,  v329,  v330,  v331,  v332,  v333,  v334,  v335,  v546,  v608,  v670,  v731,  v791,  v850,  v908,  v965,  v1021,  v1076,  v1130,  v1183,  v1235,  v1286,  v1336,  v1385,  v1433,  v1480,  v1526,  v1571,  v1615,  v1658,  v1700,  v1741,  v1781,  v1820,  v1858,  v1895,  v1931,  v1966,  v2000,  v2033,  v2065,  v2096,  v2126,  v2155,  v2183,  v2210,  v2236,  v2261,  v2285,
           v2308,
           v2330);
  uint64_t v344 = sub_DD7AC( v336,  v337,  v338,  v339,  v340,  v341,  v342,  v343,  v547,  v609,  v671,  v732,  v792,  v851,  v909,  v966,  v1022,  v1077,  v1131,  v1184,  v1236,  v1287,  v1337,  v1386,  v1434,  v1481,  v1527,  v1572,  v1616,  v1659,  v1701,  v1742,  v1782,  v1821,  v1859,  v1896,  v1932,  v1967,  v2001,  v2034,  v2066,  v2097,  v2127,  v2156,  v2184,  v2211,  v2237,  v2262,  v2286,
           v2309,
           v2331,
           v2352);
  uint64_t v352 = sub_DD7A4( v344,  v345,  v346,  v347,  v348,  v349,  v350,  v351,  v548,  v610,  v672,  v733,  v793,  v852,  v910,  v967,  v1023,  v1078,  v1132,  v1185,  v1237,  v1288,  v1338,  v1387,  v1435,  v1482,  v1528,  v1573,  v1617,  v1660,  v1702,  v1743,  v1783,  v1822,  v1860,  v1897,  v1933,  v1968,  v2002,  v2035,  v2067,  v2098,  v2128,  v2157,  v2185,  v2212,  v2238,  v2263,  v2287,
           v2310,
           v2332,
           v2353,
           v2373);
  uint64_t v360 = sub_DD79C( v352,  v353,  v354,  v355,  v356,  v357,  v358,  v359,  v549,  v611,  v673,  v734,  v794,  v853,  v911,  v968,  v1024,  v1079,  v1133,  v1186,  v1238,  v1289,  v1339,  v1388,  v1436,  v1483,  v1529,  v1574,  v1618,  v1661,  v1703,  v1744,  v1784,  v1823,  v1861,  v1898,  v1934,  v1969,  v2003,  v2036,  v2068,  v2099,  v2129,  v2158,  v2186,  v2213,  v2239,  v2264,  v2288,
           v2311,
           v2333,
           v2354,
           v2374,
           v2393);
  uint64_t v368 = sub_DD794( v360,  v361,  v362,  v363,  v364,  v365,  v366,  v367,  v550,  v612,  v674,  v735,  v795,  v854,  v912,  v969,  v1025,  v1080,  v1134,  v1187,  v1239,  v1290,  v1340,  v1389,  v1437,  v1484,  v1530,  v1575,  v1619,  v1662,  v1704,  v1745,  v1785,  v1824,  v1862,  v1899,  v1935,  v1970,  v2004,  v2037,  v2069,  v2100,  v2130,  v2159,  v2187,  v2214,  v2240,  v2265,  v2289,
           v2312,
           v2334,
           v2355,
           v2375,
           v2394,
           v2412);
  uint64_t v376 = sub_DD78C( v368,  v369,  v370,  v371,  v372,  v373,  v374,  v375,  v551,  v613,  v675,  v736,  v796,  v855,  v913,  v970,  v1026,  v1081,  v1135,  v1188,  v1240,  v1291,  v1341,  v1390,  v1438,  v1485,  v1531,  v1576,  v1620,  v1663,  v1705,  v1746,  v1786,  v1825,  v1863,  v1900,  v1936,  v1971,  v2005,  v2038,  v2070,  v2101,  v2131,  v2160,  v2188,  v2215,  v2241,  v2266,  v2290,
           v2313,
           v2335,
           v2356,
           v2376,
           v2395,
           v2413,
           v2430);
  uint64_t v384 = sub_DD784( v376,  v377,  v378,  v379,  v380,  v381,  v382,  v383,  v552,  v614,  v676,  v737,  v797,  v856,  v914,  v971,  v1027,  v1082,  v1136,  v1189,  v1241,  v1292,  v1342,  v1391,  v1439,  v1486,  v1532,  v1577,  v1621,  v1664,  v1706,  v1747,  v1787,  v1826,  v1864,  v1901,  v1937,  v1972,  v2006,  v2039,  v2071,  v2102,  v2132,  v2161,  v2189,  v2216,  v2242,  v2267,  v2291,
           v2314,
           v2336,
           v2357,
           v2377,
           v2396,
           v2414,
           v2431,
           v2447);
  uint64_t v392 = sub_DD77C( v384,  v385,  v386,  v387,  v388,  v389,  v390,  v391,  v553,  v615,  v677,  v738,  v798,  v857,  v915,  v972,  v1028,  v1083,  v1137,  v1190,  v1242,  v1293,  v1343,  v1392,  v1440,  v1487,  v1533,  v1578,  v1622,  v1665,  v1707,  v1748,  v1788,  v1827,  v1865,  v1902,  v1938,  v1973,  v2007,  v2040,  v2072,  v2103,  v2133,  v2162,  v2190,  v2217,  v2243,  v2268,  v2292,
           v2315,
           v2337,
           v2358,
           v2378,
           v2397,
           v2415,
           v2432,
           v2448,
           v2463);
  uint64_t v400 = sub_DD774( v392,  v393,  v394,  v395,  v396,  v397,  v398,  v399,  v554,  v616,  v678,  v739,  v799,  v858,  v916,  v973,  v1029,  v1084,  v1138,  v1191,  v1243,  v1294,  v1344,  v1393,  v1441,  v1488,  v1534,  v1579,  v1623,  v1666,  v1708,  v1749,  v1789,  v1828,  v1866,  v1903,  v1939,  v1974,  v2008,  v2041,  v2073,  v2104,  v2134,  v2163,  v2191,  v2218,  v2244,  v2269,  v2293,
           v2316,
           v2338,
           v2359,
           v2379,
           v2398,
           v2416,
           v2433,
           v2449,
           v2464,
           v2478);
  uint64_t v408 = sub_DD76C( v400,  v401,  v402,  v403,  v404,  v405,  v406,  v407,  v555,  v617,  v679,  v740,  v800,  v859,  v917,  v974,  v1030,  v1085,  v1139,  v1192,  v1244,  v1295,  v1345,  v1394,  v1442,  v1489,  v1535,  v1580,  v1624,  v1667,  v1709,  v1750,  v1790,  v1829,  v1867,  v1904,  v1940,  v1975,  v2009,  v2042,  v2074,  v2105,  v2135,  v2164,  v2192,  v2219,  v2245,  v2270,  v2294,
           v2317,
           v2339,
           v2360,
           v2380,
           v2399,
           v2417,
           v2434,
           v2450,
           v2465,
           v2479,
           v2492);
  uint64_t v416 = sub_DD764( v408,  v409,  v410,  v411,  v412,  v413,  v414,  v415,  v556,  v618,  v680,  v741,  v801,  v860,  v918,  v975,  v1031,  v1086,  v1140,  v1193,  v1245,  v1296,  v1346,  v1395,  v1443,  v1490,  v1536,  v1581,  v1625,  v1668,  v1710,  v1751,  v1791,  v1830,  v1868,  v1905,  v1941,  v1976,  v2010,  v2043,  v2075,  v2106,  v2136,  v2165,  v2193,  v2220,  v2246,  v2271,  v2295,
           v2318,
           v2340,
           v2361,
           v2381,
           v2400,
           v2418,
           v2435,
           v2451,
           v2466,
           v2480,
           v2493,
           v2505);
  uint64_t v424 = sub_DD75C( v416,  v417,  v418,  v419,  v420,  v421,  v422,  v423,  v557,  v619,  v681,  v742,  v802,  v861,  v919,  v976,  v1032,  v1087,  v1141,  v1194,  v1246,  v1297,  v1347,  v1396,  v1444,  v1491,  v1537,  v1582,  v1626,  v1669,  v1711,  v1752,  v1792,  v1831,  v1869,  v1906,  v1942,  v1977,  v2011,  v2044,  v2076,  v2107,  v2137,  v2166,  v2194,  v2221,  v2247,  v2272,  v2296,
           v2319,
           v2341,
           v2362,
           v2382,
           v2401,
           v2419,
           v2436,
           v2452,
           v2467,
           v2481,
           v2494,
           v2506,
           v2517);
  uint64_t v432 = sub_DD754( v424,  v425,  v426,  v427,  v428,  v429,  v430,  v431,  v558,  v620,  v682,  v743,  v803,  v862,  v920,  v977,  v1033,  v1088,  v1142,  v1195,  v1247,  v1298,  v1348,  v1397,  v1445,  v1492,  v1538,  v1583,  v1627,  v1670,  v1712,  v1753,  v1793,  v1832,  v1870,  v1907,  v1943,  v1978,  v2012,  v2045,  v2077,  v2108,  v2138,  v2167,  v2195,  v2222,  v2248,  v2273,  v2297,
           v2320,
           v2342,
           v2363,
           v2383,
           v2402,
           v2420,
           v2437,
           v2453,
           v2468,
           v2482,
           v2495,
           v2507,
           v2518,
           v2528);
  uint64_t v440 = sub_DD74C( v432,  v433,  v434,  v435,  v436,  v437,  v438,  v439,  v559,  v621,  v683,  v744,  v804,  v863,  v921,  v978,  v1034,  v1089,  v1143,  v1196,  v1248,  v1299,  v1349,  v1398,  v1446,  v1493,  v1539,  v1584,  v1628,  v1671,  v1713,  v1754,  v1794,  v1833,  v1871,  v1908,  v1944,  v1979,  v2013,  v2046,  v2078,  v2109,  v2139,  v2168,  v2196,  v2223,  v2249,  v2274,  v2298,
           v2321,
           v2343,
           v2364,
           v2384,
           v2403,
           v2421,
           v2438,
           v2454,
           v2469,
           v2483,
           v2496,
           v2508,
           v2519,
           v2529);
  uint64_t v448 = sub_DD744( v440,  v441,  v442,  v443,  v444,  v445,  v446,  v447,  v560,  v622,  v684,  v745,  v805,  v864,  v922,  v979,  v1035,  v1090,  v1144,  v1197,  v1249,  v1300,  v1350,  v1399,  v1447,  v1494,  v1540,  v1585,  v1629,  v1672,  v1714,  v1755,  v1795,  v1834,  v1872,  v1909,  v1945,  v1980,  v2014,  v2047,  v2079,  v2110,  v2140,  v2169,  v2197,  v2224,  v2250,  v2275,  v2299,
           v2322,
           v2344,
           v2365,
           v2385,
           v2404,
           v2422,
           v2439,
           v2455,
           v2470,
           v2484,
           v2497,
           v2509,
           v2520,
           v2530);
  uint64_t v456 = sub_DD73C( v448,  v449,  v450,  v451,  v452,  v453,  v454,  v455,  v561,  v623,  v685,  v746,  v806,  v865,  v923,  v980,  v1036,  v1091,  v1145,  v1198,  v1250,  v1301,  v1351,  v1400,  v1448,  v1495,  v1541,  v1586,  v1630,  v1673,  v1715,  v1756,  v1796,  v1835,  v1873,  v1910,  v1946,  v1981,  v2015,  v2048,  v2080,  v2111,  v2141,  v2170,  v2198,  v2225,  v2251,  v2276,  v2300,
           v2323,
           v2345,
           v2366,
           v2386,
           v2405,
           v2423,
           v2440,
           v2456,
           v2471,
           v2485,
           v2498,
           v2510,
           v2521,
           v2531);
  uint64_t v464 = sub_DD734( v456,  v457,  v458,  v459,  v460,  v461,  v462,  v463,  v562,  v624,  v686,  v747,  v807,  v866,  v924,  v981,  v1037,  v1092,  v1146,  v1199,  v1251,  v1302,  v1352,  v1401,  v1449,  v1496,  v1542,  v1587,  v1631,  v1674,  v1716,  v1757,  v1797,  v1836,  v1874,  v1911,  v1947,  v1982,  v2016,  v2049,  v2081,  v2112,  v2142,  v2171,  v2199,  v2226,  v2252,  v2277,  v2301,
           v2324,
           v2346,
           v2367,
           v2387,
           v2406,
           v2424,
           v2441,
           v2457,
           v2472,
           v2486,
           v2499,
           v2511,
           v2522,
           v2532);
  uint64_t v472 = sub_DD72C( v464,  v465,  v466,  v467,  v468,  v469,  v470,  v471,  v563,  v625,  v687,  v748,  v808,  v867,  v925,  v982,  v1038,  v1093,  v1147,  v1200,  v1252,  v1303,  v1353,  v1402,  v1450,  v1497,  v1543,  v1588,  v1632,  v1675,  v1717,  v1758,  v1798,  v1837,  v1875,  v1912,  v1948,  v1983,  v2017,  v2050,  v2082,  v2113,  v2143,  v2172,  v2200,  v2227,  v2253,  v2278,  v2302,
           v2325,
           v2347,
           v2368,
           v2388,
           v2407,
           v2425,
           v2442,
           v2458,
           v2473,
           v2487,
           v2500,
           v2512,
           v2523,
           v2533);
  uint64_t v480 = sub_DD724( v472,  v473,  v474,  v475,  v476,  v477,  v478,  v479,  v564,  v626,  v688,  v749,  v809,  v868,  v926,  v983,  v1039,  v1094,  v1148,  v1201,  v1253,  v1304,  v1354,  v1403,  v1451,  v1498,  v1544,  v1589,  v1633,  v1676,  v1718,  v1759,  v1799,  v1838,  v1876,  v1913,  v1949,  v1984,  v2018,  v2051,  v2083,  v2114,  v2144,  v2173,  v2201,  v2228,  v2254,  v2279,  v2303,
           v2326,
           v2348,
           v2369,
           v2389,
           v2408,
           v2426,
           v2443,
           v2459,
           v2474,
           v2488,
           v2501,
           v2513,
           v2524,
           v2534);
  uint64_t v488 = sub_DD71C( v480,  v481,  v482,  v483,  v484,  v485,  v486,  v487,  v565,  v627,  v689,  v750,  v810,  v869,  v927,  v984,  v1040,  v1095,  v1149,  v1202,  v1254,  v1305,  v1355,  v1404,  v1452,  v1499,  v1545,  v1590,  v1634,  v1677,  v1719,  v1760,  v1800,  v1839,  v1877,  v1914,  v1950,  v1985,  v2019,  v2052,  v2084,  v2115,  v2145,  v2174,  v2202,  v2229,  v2255,  v2280,  v2304,
           v2327,
           v2349,
           v2370,
           v2390,
           v2409,
           v2427,
           v2444,
           v2460,
           v2475,
           v2489,
           v2502,
           v2514,
           v2525,
           v2535);
  uint64_t v496 = sub_DD714( v488,  v489,  v490,  v491,  v492,  v493,  v494,  v495,  v566,  v628,  v690,  v751,  v811,  v870,  v928,  v985,  v1041,  v1096,  v1150,  v1203,  v1255,  v1306,  v1356,  v1405,  v1453,  v1500,  v1546,  v1591,  v1635,  v1678,  v1720,  v1761,  v1801,  v1840,  v1878,  v1915,  v1951,  v1986,  v2020,  v2053,  v2085,  v2116,  v2146,  v2175,  v2203,  v2230,  v2256,  v2281,  v2305,
           v2328,
           v2350,
           v2371,
           v2391,
           v2410,
           v2428,
           v2445,
           v2461,
           v2476,
           v2490,
           v2503,
           v2515,
           v2526,
           v2536);
  sub_DD70C( v496,  v497,  v498,  v499,  v500,  v501,  v502,  v503,  v567,  v629,  v691,  v752,  v812,  v871,  v929,  v986,  v1042,  v1097,  v1151,  v1204,  v1256,  v1307,  v1357,  v1406,  v1454,  v1501,  v1547,  v1592,  v1636,  v1679,  v1721,  v1762,  v1802,  v1841,  v1879,  v1916,  v1952,  v1987,  v2021,  v2054,  v2086,  v2117,  v2147,  v2176,  v2204,  v2231,  v2257,  v2282,  v2306,
    v2329,
    v2351,
    v2372,
    v2392,
    v2411,
    v2429,
    v2446,
    v2462,
    v2477,
    v2491,
    v2504,
    v2516,
    v2527,
    v2537);
  sub_DD704();
  sub_DD6FC();
  sub_DD6F4();
  sub_DD6EC();
  sub_DD6E4();
  sub_DD6DC();
  sub_DD6D4();
  sub_DD6CC();
  sub_DD6C4();
  sub_DD6BC();
  sub_DD6B4();
  sub_DD6AC();
  sub_DD6A4();
  sub_DD69C();
  sub_DD694();
  sub_DD68C();
  sub_DD684();
  sub_DD67C();
  sub_DD674();
  sub_DD66C();
  sub_DD664();
  sub_DD65C();
  sub_DD654();
  sub_DD64C();
  sub_DD644();
  sub_DD63C();
  sub_DD634();
  sub_DD62C();
  sub_DD624();
  sub_DD61C();
  sub_DD614();
  sub_DD60C();
  sub_DD604();
  sub_DD5FC();
  sub_DD5F4();
  sub_DD5EC();
  sub_DD5E4();
  sub_DD5DC();
  sub_DD5D4();
  sub_DD5CC();
  sub_DD5C4();
  sub_DD5BC();
  sub_DD5B4();
  sub_DD5AC();
  sub_DD5A4();
  sub_DD59C();
  sub_DD594();
  sub_DD58C();
  sub_DD584();
  sub_DD57C();
  sub_DD574();
  sub_DD56C();
  sub_DD564();
  sub_DD55C();
  sub_DD554();
  sub_DD54C();
  sub_DD544();
  sub_DD53C();
  sub_DD534();
  sub_DD52C();
  sub_DD524();
  sub_DD51C();
  sub_DD514();
  sub_DD50C();
  sub_DD504();
  sub_DD4FC();
  sub_DD4F4();
  sub_DD4EC();
  sub_DD4DC();
  sub_DD4E4();
  sub_DD868();
  sub_DD870();
  sub_DDA48();
  sub_DDA58();
  sub_36B88();
  sub_366E8();
  sub_3677C();
  sub_36588();
  sub_36624();
  sub_3661C();
  sub_36614();
  sub_3660C();
  sub_36604();
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  sub_366B8();
  sub_366B0();
  sub_366A8();
  uint64_t v504 = (uint64_t (*)(void))sub_DE01C();
  return sub_36148(v504);
}

uint64_t sub_D4CA8()
{
  os_log_type_t v5 = sub_AB70();
  if (sub_46614(v5))
  {
    uint64_t v6 = (_WORD *)sub_3635C();
    sub_36908(v6);
    sub_DD494();
    sub_DA1C();
    sub_232EC( &dword_0,  v0,  v2,  "Couldn't create specificMedicationAllMedsLoggedAlready_Dialog, returning GenericErrorFlow",  v3);
    sub_37128();
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  sub_3747C();
  uint64_t v7 = (void *)v1[3517];
  uint64_t v8 = (void *)v1[3515];
  sub_DE3C0();
  uint64_t v2554 = v1[3280];
  uint64_t v9 = v1[3277];
  uint64_t v10 = v1[3276];
  sub_DE7C8((_OWORD *)(v1[3247] + 64LL));
  sub_5A9B0(v1 + 1056, v1 + 1036);
  sub_A178();
  sub_DDFA4();

  sub_369F4();
  sub_36C34();

  sub_BB2EC();
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v2554, v10);
  sub_DDE0C(v11, type metadata accessor for SnippetHeaderModel);
  sub_DDA68(v12, &qword_189D00);
  sub_DDBDC(v13, &qword_18B168);
  sub_DBE38();
  sub_A8F4();
  sub_A85C();
  sub_A864();
  sub_A910();
  sub_A8EC();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  uint64_t v14 = sub_A78C();
  uint64_t v22 = sub_AAD8(v14, v15, v16, v17, v18, v19, v20, v21, v520, v583);
  uint64_t v30 = sub_A888(v22, v23, v24, v25, v26, v27, v28, v29, v521, v584, v646);
  uint64_t v38 = sub_A854(v30, v31, v32, v33, v34, v35, v36, v37, v522, v585, v647, v708);
  uint64_t v46 = sub_A84C(v38, v39, v40, v41, v42, v43, v44, v45, v523, v586, v648, v709, v769);
  uint64_t v54 = sub_A844(v46, v47, v48, v49, v50, v51, v52, v53, v524, v587, v649, v710, v770, v829);
  uint64_t v62 = sub_A83C(v54, v55, v56, v57, v58, v59, v60, v61, v525, v588, v650, v711, v771, v830, v888);
  uint64_t v70 = sub_A95C(v62, v63, v64, v65, v66, v67, v68, v69, v526, v589, v651, v712, v772, v831, v889, v946);
  uint64_t v78 = sub_A954(v70, v71, v72, v73, v74, v75, v76, v77, v527, v590, v652, v713, v773, v832, v890, v947, v1003);
  uint64_t v86 = sub_A938(v78, v79, v80, v81, v82, v83, v84, v85, v528, v591, v653, v714, v774, v833, v891, v948, v1004, v1059);
  uint64_t v94 = sub_A930( v86,  v87,  v88,  v89,  v90,  v91,  v92,  v93,  v529,  v592,  v654,  v715,  v775,  v834,  v892,  v949,  v1005,  v1060,  v1114);
  uint64_t v102 = sub_A928( v94,  v95,  v96,  v97,  v98,  v99,  v100,  v101,  v530,  v593,  v655,  v716,  v776,  v835,  v893,  v950,  v1006,  v1061,  v1115,  v1168);
  uint64_t v110 = sub_A920( v102,  v103,  v104,  v105,  v106,  v107,  v108,  v109,  v531,  v594,  v656,  v717,  v777,  v836,  v894,  v951,  v1007,  v1062,  v1116,  v1169,  v1221);
  uint64_t v118 = sub_36374( v110,  v111,  v112,  v113,  v114,  v115,  v116,  v117,  v532,  v595,  v657,  v718,  v778,  v837,  v895,  v952,  v1008,  v1063,  v1117,  v1170,  v1222,  v1273);
  uint64_t v126 = sub_3636C( v118,  v119,  v120,  v121,  v122,  v123,  v124,  v125,  v533,  v596,  v658,  v719,  v779,  v838,  v896,  v953,  v1009,  v1064,  v1118,  v1171,  v1223,  v1274,  v1324);
  uint64_t v134 = sub_36364( v126,  v127,  v128,  v129,  v130,  v131,  v132,  v133,  v534,  v597,  v659,  v720,  v780,  v839,  v897,  v954,  v1010,  v1065,  v1119,  v1172,  v1224,  v1275,  v1325,  v1374);
  uint64_t v142 = sub_363F0( v134,  v135,  v136,  v137,  v138,  v139,  v140,  v141,  v535,  v598,  v660,  v721,  v781,  v840,  v898,  v955,  v1011,  v1066,  v1120,  v1173,  v1225,  v1276,  v1326,  v1375,  v1423);
  uint64_t v150 = sub_36430( v142,  v143,  v144,  v145,  v146,  v147,  v148,  v149,  v536,  v599,  v661,  v722,  v782,  v841,  v899,  v956,  v1012,  v1067,  v1121,  v1174,  v1226,  v1277,  v1327,  v1376,  v1424,  v1471);
  uint64_t v158 = sub_36428( v150,  v151,  v152,  v153,  v154,  v155,  v156,  v157,  v537,  v600,  v662,  v723,  v783,  v842,  v900,  v957,  v1013,  v1068,  v1122,  v1175,  v1227,  v1278,  v1328,  v1377,  v1425,  v1472,  v1518);
  uint64_t v166 = sub_36478( v158,  v159,  v160,  v161,  v162,  v163,  v164,  v165,  v538,  v601,  v663,  v724,  v784,  v843,  v901,  v958,  v1014,  v1069,  v1123,  v1176,  v1228,  v1279,  v1329,  v1378,  v1426,  v1473,  v1519,  v1564);
  uint64_t v174 = sub_36524( v166,  v167,  v168,  v169,  v170,  v171,  v172,  v173,  v539,  v602,  v664,  v725,  v785,  v844,  v902,  v959,  v1015,  v1070,  v1124,  v1177,  v1229,  v1280,  v1330,  v1379,  v1427,  v1474,  v1520,  v1565,  v1609);
  uint64_t v182 = sub_3651C( v174,  v175,  v176,  v177,  v178,  v179,  v180,  v181,  v540,  v603,  v665,  v726,  v786,  v845,  v903,  v960,  v1016,  v1071,  v1125,  v1178,  v1230,  v1281,  v1331,  v1380,  v1428,  v1475,  v1521,  v1566,  v1610,  v1653);
  uint64_t v190 = sub_36514( v182,  v183,  v184,  v185,  v186,  v187,  v188,  v189,  v541,  v604,  v666,  v727,  v787,  v846,  v904,  v961,  v1017,  v1072,  v1126,  v1179,  v1231,  v1282,  v1332,  v1381,  v1429,  v1476,  v1522,  v1567,  v1611,  v1654,  v1696);
  uint64_t v198 = sub_3650C( v190,  v191,  v192,  v193,  v194,  v195,  v196,  v197,  v542,  v605,  v667,  v728,  v788,  v847,  v905,  v962,  v1018,  v1073,  v1127,  v1180,  v1232,  v1283,  v1333,  v1382,  v1430,  v1477,  v1523,  v1568,  v1612,  v1655,  v1697,  v1738);
  uint64_t v206 = sub_36504( v198,  v199,  v200,  v201,  v202,  v203,  v204,  v205,  v543,  v606,  v668,  v729,  v789,  v848,  v906,  v963,  v1019,  v1074,  v1128,  v1181,  v1233,  v1284,  v1334,  v1383,  v1431,  v1478,  v1524,  v1569,  v1613,  v1656,  v1698,  v1739,  v1779);
  uint64_t v214 = sub_364FC( v206,  v207,  v208,  v209,  v210,  v211,  v212,  v213,  v544,  v607,  v669,  v730,  v790,  v849,  v907,  v964,  v1020,  v1075,  v1129,  v1182,  v1234,  v1285,  v1335,  v1384,  v1432,  v1479,  v1525,  v1570,  v1614,  v1657,  v1699,  v1740,  v1780,  v1819);
  uint64_t v222 = sub_364F4( v214,  v215,  v216,  v217,  v218,  v219,  v220,  v221,  v545,  v608,  v670,  v731,  v791,  v850,  v908,  v965,  v1021,  v1076,  v1130,  v1183,  v1235,  v1286,  v1336,  v1385,  v1433,  v1480,  v1526,  v1571,  v1615,  v1658,  v1700,  v1741,  v1781,  v1820,  v1858);
  uint64_t v230 = sub_364EC( v222,  v223,  v224,  v225,  v226,  v227,  v228,  v229,  v546,  v609,  v671,  v732,  v792,  v851,  v909,  v966,  v1022,  v1077,  v1131,  v1184,  v1236,  v1287,  v1337,  v1386,  v1434,  v1481,  v1527,  v1572,  v1616,  v1659,  v1701,  v1742,  v1782,  v1821,  v1859,  v1896);
  uint64_t v238 = sub_364E4( v230,  v231,  v232,  v233,  v234,  v235,  v236,  v237,  v547,  v610,  v672,  v733,  v793,  v852,  v910,  v967,  v1023,  v1078,  v1132,  v1185,  v1237,  v1288,  v1338,  v1387,  v1435,  v1482,  v1528,  v1573,  v1617,  v1660,  v1702,  v1743,  v1783,  v1822,  v1860,  v1897,  v1933);
  uint64_t v246 = sub_364DC( v238,  v239,  v240,  v241,  v242,  v243,  v244,  v245,  v548,  v611,  v673,  v734,  v794,  v853,  v911,  v968,  v1024,  v1079,  v1133,  v1186,  v1238,  v1289,  v1339,  v1388,  v1436,  v1483,  v1529,  v1574,  v1618,  v1661,  v1703,  v1744,  v1784,  v1823,  v1861,  v1898,  v1934,  v1969);
  uint64_t v254 = sub_364D4( v246,  v247,  v248,  v249,  v250,  v251,  v252,  v253,  v549,  v612,  v674,  v735,  v795,  v854,  v912,  v969,  v1025,  v1080,  v1134,  v1187,  v1239,  v1290,  v1340,  v1389,  v1437,  v1484,  v1530,  v1575,  v1619,  v1662,  v1704,  v1745,  v1785,  v1824,  v1862,  v1899,  v1935,  v1970,  v2004);
  uint64_t v262 = sub_366F8( v254,  v255,  v256,  v257,  v258,  v259,  v260,  v261,  v550,  v613,  v675,  v736,  v796,  v855,  v913,  v970,  v1026,  v1081,  v1135,  v1188,  v1240,  v1291,  v1341,  v1390,  v1438,  v1485,  v1531,  v1576,  v1620,  v1663,  v1705,  v1746,  v1786,  v1825,  v1863,  v1900,  v1936,  v1971,  v2005,  v2038);
  uint64_t v270 = sub_366F0( v262,  v263,  v264,  v265,  v266,  v267,  v268,  v269,  v551,  v614,  v676,  v737,  v797,  v856,  v914,  v971,  v1027,  v1082,  v1136,  v1189,  v1241,  v1292,  v1342,  v1391,  v1439,  v1486,  v1532,  v1577,  v1621,  v1664,  v1706,  v1747,  v1787,  v1826,  v1864,  v1901,  v1937,  v1972,  v2006,  v2039,  v2071);
  uint64_t v278 = sub_36B90( v270,  v271,  v272,  v273,  v274,  v275,  v276,  v277,  v552,  v615,  v677,  v738,  v798,  v857,  v915,  v972,  v1028,  v1083,  v1137,  v1190,  v1242,  v1293,  v1343,  v1392,  v1440,  v1487,  v1533,  v1578,  v1622,  v1665,  v1707,  v1748,  v1788,  v1827,  v1865,  v1902,  v1938,  v1973,  v2007,  v2040,  v2072,  v2103);
  uint64_t v286 = sub_36EF4( v278,  v279,  v280,  v281,  v282,  v283,  v284,  v285,  v553,  v616,  v678,  v739,  v799,  v858,  v916,  v973,  v1029,  v1084,  v1138,  v1191,  v1243,  v1294,  v1344,  v1393,  v1441,  v1488,  v1534,  v1579,  v1623,  v1666,  v1708,  v1749,  v1789,  v1828,  v1866,  v1903,  v1939,  v1974,  v2008,  v2041,  v2073,  v2104,  v2134);
  uint64_t v294 = sub_36EEC( v286,  v287,  v288,  v289,  v290,  v291,  v292,  v293,  v554,  v617,  v679,  v740,  v800,  v859,  v917,  v974,  v1030,  v1085,  v1139,  v1192,  v1244,  v1295,  v1345,  v1394,  v1442,  v1489,  v1535,  v1580,  v1624,  v1667,  v1709,  v1750,  v1790,  v1829,  v1867,  v1904,  v1940,  v1975,  v2009,  v2042,  v2074,  v2105,  v2135,  v2164);
  uint64_t v302 = sub_DD7E4( v294,  v295,  v296,  v297,  v298,  v299,  v300,  v301,  v555,  v618,  v680,  v741,  v801,  v860,  v918,  v975,  v1031,  v1086,  v1140,  v1193,  v1245,  v1296,  v1346,  v1395,  v1443,  v1490,  v1536,  v1581,  v1625,  v1668,  v1710,  v1751,  v1791,  v1830,  v1868,  v1905,  v1941,  v1976,  v2010,  v2043,  v2075,  v2106,  v2136,  v2165,  v2193);
  uint64_t v310 = sub_DD7DC( v302,  v303,  v304,  v305,  v306,  v307,  v308,  v309,  v556,  v619,  v681,  v742,  v802,  v861,  v919,  v976,  v1032,  v1087,  v1141,  v1194,  v1246,  v1297,  v1347,  v1396,  v1444,  v1491,  v1537,  v1582,  v1626,  v1669,  v1711,  v1752,  v1792,  v1831,  v1869,  v1906,  v1942,  v1977,  v2011,  v2044,  v2076,  v2107,  v2137,  v2166,  v2194,  v2221);
  uint64_t v318 = sub_DD7D4( v310,  v311,  v312,  v313,  v314,  v315,  v316,  v317,  v557,  v620,  v682,  v743,  v803,  v862,  v920,  v977,  v1033,  v1088,  v1142,  v1195,  v1247,  v1298,  v1348,  v1397,  v1445,  v1492,  v1538,  v1583,  v1627,  v1670,  v1712,  v1753,  v1793,  v1832,  v1870,  v1907,  v1943,  v1978,  v2012,  v2045,  v2077,  v2108,  v2138,  v2167,  v2195,  v2222,  v2248);
  uint64_t v326 = sub_DD7CC( v318,  v319,  v320,  v321,  v322,  v323,  v324,  v325,  v558,  v621,  v683,  v744,  v804,  v863,  v921,  v978,  v1034,  v1089,  v1143,  v1196,  v1248,  v1299,  v1349,  v1398,  v1446,  v1493,  v1539,  v1584,  v1628,  v1671,  v1713,  v1754,  v1794,  v1833,  v1871,  v1908,  v1944,  v1979,  v2013,  v2046,  v2078,  v2109,  v2139,  v2168,  v2196,  v2223,  v2249,  v2274);
  uint64_t v334 = sub_DD7C4( v326,  v327,  v328,  v329,  v330,  v331,  v332,  v333,  v559,  v622,  v684,  v745,  v805,  v864,  v922,  v979,  v1035,  v1090,  v1144,  v1197,  v1249,  v1300,  v1350,  v1399,  v1447,  v1494,  v1540,  v1585,  v1629,  v1672,  v1714,  v1755,  v1795,  v1834,  v1872,  v1909,  v1945,  v1980,  v2014,  v2047,  v2079,  v2110,  v2140,  v2169,  v2197,  v2224,  v2250,  v2275,  v2299);
  uint64_t v342 = sub_DD7BC( v334,  v335,  v336,  v337,  v338,  v339,  v340,  v341,  v560,  v623,  v685,  v746,  v806,  v865,  v923,  v980,  v1036,  v1091,  v1145,  v1198,  v1250,  v1301,  v1351,  v1400,  v1448,  v1495,  v1541,  v1586,  v1630,  v1673,  v1715,  v1756,  v1796,  v1835,  v1873,  v1910,  v1946,  v1981,  v2015,  v2048,  v2080,  v2111,  v2141,  v2170,  v2198,  v2225,  v2251,  v2276,  v2300,
           v2323);
  uint64_t v350 = sub_DD7B4( v342,  v343,  v344,  v345,  v346,  v347,  v348,  v349,  v561,  v624,  v686,  v747,  v807,  v866,  v924,  v981,  v1037,  v1092,  v1146,  v1199,  v1251,  v1302,  v1352,  v1401,  v1449,  v1496,  v1542,  v1587,  v1631,  v1674,  v1716,  v1757,  v1797,  v1836,  v1874,  v1911,  v1947,  v1982,  v2016,  v2049,  v2081,  v2112,  v2142,  v2171,  v2199,  v2226,  v2252,  v2277,  v2301,
           v2324,
           v2346);
  uint64_t v358 = sub_DD7AC( v350,  v351,  v352,  v353,  v354,  v355,  v356,  v357,  v562,  v625,  v687,  v748,  v808,  v867,  v925,  v982,  v1038,  v1093,  v1147,  v1200,  v1252,  v1303,  v1353,  v1402,  v1450,  v1497,  v1543,  v1588,  v1632,  v1675,  v1717,  v1758,  v1798,  v1837,  v1875,  v1912,  v1948,  v1983,  v2017,  v2050,  v2082,  v2113,  v2143,  v2172,  v2200,  v2227,  v2253,  v2278,  v2302,
           v2325,
           v2347,
           v2368);
  uint64_t v366 = sub_DD7A4( v358,  v359,  v360,  v361,  v362,  v363,  v364,  v365,  v563,  v626,  v688,  v749,  v809,  v868,  v926,  v983,  v1039,  v1094,  v1148,  v1201,  v1253,  v1304,  v1354,  v1403,  v1451,  v1498,  v1544,  v1589,  v1633,  v1676,  v1718,  v1759,  v1799,  v1838,  v1876,  v1913,  v1949,  v1984,  v2018,  v2051,  v2083,  v2114,  v2144,  v2173,  v2201,  v2228,  v2254,  v2279,  v2303,
           v2326,
           v2348,
           v2369,
           v2389);
  uint64_t v374 = sub_DD79C( v366,  v367,  v368,  v369,  v370,  v371,  v372,  v373,  v564,  v627,  v689,  v750,  v810,  v869,  v927,  v984,  v1040,  v1095,  v1149,  v1202,  v1254,  v1305,  v1355,  v1404,  v1452,  v1499,  v1545,  v1590,  v1634,  v1677,  v1719,  v1760,  v1800,  v1839,  v1877,  v1914,  v1950,  v1985,  v2019,  v2052,  v2084,  v2115,  v2145,  v2174,  v2202,  v2229,  v2255,  v2280,  v2304,
           v2327,
           v2349,
           v2370,
           v2390,
           v2409);
  uint64_t v382 = sub_DD794( v374,  v375,  v376,  v377,  v378,  v379,  v380,  v381,  v565,  v628,  v690,  v751,  v811,  v870,  v928,  v985,  v1041,  v1096,  v1150,  v1203,  v1255,  v1306,  v1356,  v1405,  v1453,  v1500,  v1546,  v1591,  v1635,  v1678,  v1720,  v1761,  v1801,  v1840,  v1878,  v1915,  v1951,  v1986,  v2020,  v2053,  v2085,  v2116,  v2146,  v2175,  v2203,  v2230,  v2256,  v2281,  v2305,
           v2328,
           v2350,
           v2371,
           v2391,
           v2410,
           v2428);
  uint64_t v390 = sub_DD78C( v382,  v383,  v384,  v385,  v386,  v387,  v388,  v389,  v566,  v629,  v691,  v752,  v812,  v871,  v929,  v986,  v1042,  v1097,  v1151,  v1204,  v1256,  v1307,  v1357,  v1406,  v1454,  v1501,  v1547,  v1592,  v1636,  v1679,  v1721,  v1762,  v1802,  v1841,  v1879,  v1916,  v1952,  v1987,  v2021,  v2054,  v2086,  v2117,  v2147,  v2176,  v2204,  v2231,  v2257,  v2282,  v2306,
           v2329,
           v2351,
           v2372,
           v2392,
           v2411,
           v2429,
           v2446);
  uint64_t v398 = sub_DD784( v390,  v391,  v392,  v393,  v394,  v395,  v396,  v397,  v567,  v630,  v692,  v753,  v813,  v872,  v930,  v987,  v1043,  v1098,  v1152,  v1205,  v1257,  v1308,  v1358,  v1407,  v1455,  v1502,  v1548,  v1593,  v1637,  v1680,  v1722,  v1763,  v1803,  v1842,  v1880,  v1917,  v1953,  v1988,  v2022,  v2055,  v2087,  v2118,  v2148,  v2177,  v2205,  v2232,  v2258,  v2283,  v2307,
           v2330,
           v2352,
           v2373,
           v2393,
           v2412,
           v2430,
           v2447,
           v2463);
  uint64_t v406 = sub_DD77C( v398,  v399,  v400,  v401,  v402,  v403,  v404,  v405,  v568,  v631,  v693,  v754,  v814,  v873,  v931,  v988,  v1044,  v1099,  v1153,  v1206,  v1258,  v1309,  v1359,  v1408,  v1456,  v1503,  v1549,  v1594,  v1638,  v1681,  v1723,  v1764,  v1804,  v1843,  v1881,  v1918,  v1954,  v1989,  v2023,  v2056,  v2088,  v2119,  v2149,  v2178,  v2206,  v2233,  v2259,  v2284,  v2308,
           v2331,
           v2353,
           v2374,
           v2394,
           v2413,
           v2431,
           v2448,
           v2464,
           v2479);
  uint64_t v414 = sub_DD774( v406,  v407,  v408,  v409,  v410,  v411,  v412,  v413,  v569,  v632,  v694,  v755,  v815,  v874,  v932,  v989,  v1045,  v1100,  v1154,  v1207,  v1259,  v1310,  v1360,  v1409,  v1457,  v1504,  v1550,  v1595,  v1639,  v1682,  v1724,  v1765,  v1805,  v1844,  v1882,  v1919,  v1955,  v1990,  v2024,  v2057,  v2089,  v2120,  v2150,  v2179,  v2207,  v2234,  v2260,  v2285,  v2309,
           v2332,
           v2354,
           v2375,
           v2395,
           v2414,
           v2432,
           v2449,
           v2465,
           v2480,
           v2494);
  uint64_t v422 = sub_DD76C( v414,  v415,  v416,  v417,  v418,  v419,  v420,  v421,  v570,  v633,  v695,  v756,  v816,  v875,  v933,  v990,  v1046,  v1101,  v1155,  v1208,  v1260,  v1311,  v1361,  v1410,  v1458,  v1505,  v1551,  v1596,  v1640,  v1683,  v1725,  v1766,  v1806,  v1845,  v1883,  v1920,  v1956,  v1991,  v2025,  v2058,  v2090,  v2121,  v2151,  v2180,  v2208,  v2235,  v2261,  v2286,  v2310,
           v2333,
           v2355,
           v2376,
           v2396,
           v2415,
           v2433,
           v2450,
           v2466,
           v2481,
           v2495,
           v2508);
  uint64_t v430 = sub_DD764( v422,  v423,  v424,  v425,  v426,  v427,  v428,  v429,  v571,  v634,  v696,  v757,  v817,  v876,  v934,  v991,  v1047,  v1102,  v1156,  v1209,  v1261,  v1312,  v1362,  v1411,  v1459,  v1506,  v1552,  v1597,  v1641,  v1684,  v1726,  v1767,  v1807,  v1846,  v1884,  v1921,  v1957,  v1992,  v2026,  v2059,  v2091,  v2122,  v2152,  v2181,  v2209,  v2236,  v2262,  v2287,  v2311,
           v2334,
           v2356,
           v2377,
           v2397,
           v2416,
           v2434,
           v2451,
           v2467,
           v2482,
           v2496,
           v2509,
           v2521);
  uint64_t v438 = sub_DD75C( v430,  v431,  v432,  v433,  v434,  v435,  v436,  v437,  v572,  v635,  v697,  v758,  v818,  v877,  v935,  v992,  v1048,  v1103,  v1157,  v1210,  v1262,  v1313,  v1363,  v1412,  v1460,  v1507,  v1553,  v1598,  v1642,  v1685,  v1727,  v1768,  v1808,  v1847,  v1885,  v1922,  v1958,  v1993,  v2027,  v2060,  v2092,  v2123,  v2153,  v2182,  v2210,  v2237,  v2263,  v2288,  v2312,
           v2335,
           v2357,
           v2378,
           v2398,
           v2417,
           v2435,
           v2452,
           v2468,
           v2483,
           v2497,
           v2510,
           v2522,
           v2533);
  uint64_t v446 = sub_DD754( v438,  v439,  v440,  v441,  v442,  v443,  v444,  v445,  v573,  v636,  v698,  v759,  v819,  v878,  v936,  v993,  v1049,  v1104,  v1158,  v1211,  v1263,  v1314,  v1364,  v1413,  v1461,  v1508,  v1554,  v1599,  v1643,  v1686,  v1728,  v1769,  v1809,  v1848,  v1886,  v1923,  v1959,  v1994,  v2028,  v2061,  v2093,  v2124,  v2154,  v2183,  v2211,  v2238,  v2264,  v2289,  v2313,
           v2336,
           v2358,
           v2379,
           v2399,
           v2418,
           v2436,
           v2453,
           v2469,
           v2484,
           v2498,
           v2511,
           v2523,
           v2534,
           v2544);
  uint64_t v454 = sub_DD74C( v446,  v447,  v448,  v449,  v450,  v451,  v452,  v453,  v574,  v637,  v699,  v760,  v820,  v879,  v937,  v994,  v1050,  v1105,  v1159,  v1212,  v1264,  v1315,  v1365,  v1414,  v1462,  v1509,  v1555,  v1600,  v1644,  v1687,  v1729,  v1770,  v1810,  v1849,  v1887,  v1924,  v1960,  v1995,  v2029,  v2062,  v2094,  v2125,  v2155,  v2184,  v2212,  v2239,  v2265,  v2290,  v2314,
           v2337,
           v2359,
           v2380,
           v2400,
           v2419,
           v2437,
           v2454,
           v2470,
           v2485,
           v2499,
           v2512,
           v2524,
           v2535,
           v2545);
  uint64_t v462 = sub_DD744( v454,  v455,  v456,  v457,  v458,  v459,  v460,  v461,  v575,  v638,  v700,  v761,  v821,  v880,  v938,  v995,  v1051,  v1106,  v1160,  v1213,  v1265,  v1316,  v1366,  v1415,  v1463,  v1510,  v1556,  v1601,  v1645,  v1688,  v1730,  v1771,  v1811,  v1850,  v1888,  v1925,  v1961,  v1996,  v2030,  v2063,  v2095,  v2126,  v2156,  v2185,  v2213,  v2240,  v2266,  v2291,  v2315,
           v2338,
           v2360,
           v2381,
           v2401,
           v2420,
           v2438,
           v2455,
           v2471,
           v2486,
           v2500,
           v2513,
           v2525,
           v2536,
           v2546);
  uint64_t v470 = sub_DD73C( v462,  v463,  v464,  v465,  v466,  v467,  v468,  v469,  v576,  v639,  v701,  v762,  v822,  v881,  v939,  v996,  v1052,  v1107,  v1161,  v1214,  v1266,  v1317,  v1367,  v1416,  v1464,  v1511,  v1557,  v1602,  v1646,  v1689,  v1731,  v1772,  v1812,  v1851,  v1889,  v1926,  v1962,  v1997,  v2031,  v2064,  v2096,  v2127,  v2157,  v2186,  v2214,  v2241,  v2267,  v2292,  v2316,
           v2339,
           v2361,
           v2382,
           v2402,
           v2421,
           v2439,
           v2456,
           v2472,
           v2487,
           v2501,
           v2514,
           v2526,
           v2537,
           v2547);
  uint64_t v478 = sub_DD734( v470,  v471,  v472,  v473,  v474,  v475,  v476,  v477,  v577,  v640,  v702,  v763,  v823,  v882,  v940,  v997,  v1053,  v1108,  v1162,  v1215,  v1267,  v1318,  v1368,  v1417,  v1465,  v1512,  v1558,  v1603,  v1647,  v1690,  v1732,  v1773,  v1813,  v1852,  v1890,  v1927,  v1963,  v1998,  v2032,  v2065,  v2097,  v2128,  v2158,  v2187,  v2215,  v2242,  v2268,  v2293,  v2317,
           v2340,
           v2362,
           v2383,
           v2403,
           v2422,
           v2440,
           v2457,
           v2473,
           v2488,
           v2502,
           v2515,
           v2527,
           v2538,
           v2548);
  uint64_t v486 = sub_DD72C( v478,  v479,  v480,  v481,  v482,  v483,  v484,  v485,  v578,  v641,  v703,  v764,  v824,  v883,  v941,  v998,  v1054,  v1109,  v1163,  v1216,  v1268,  v1319,  v1369,  v1418,  v1466,  v1513,  v1559,  v1604,  v1648,  v1691,  v1733,  v1774,  v1814,  v1853,  v1891,  v1928,  v1964,  v1999,  v2033,  v2066,  v2098,  v2129,  v2159,  v2188,  v2216,  v2243,  v2269,  v2294,  v2318,
           v2341,
           v2363,
           v2384,
           v2404,
           v2423,
           v2441,
           v2458,
           v2474,
           v2489,
           v2503,
           v2516,
           v2528,
           v2539,
           v2549);
  uint64_t v494 = sub_DD724( v486,  v487,  v488,  v489,  v490,  v491,  v492,  v493,  v579,  v642,  v704,  v765,  v825,  v884,  v942,  v999,  v1055,  v1110,  v1164,  v1217,  v1269,  v1320,  v1370,  v1419,  v1467,  v1514,  v1560,  v1605,  v1649,  v1692,  v1734,  v1775,  v1815,  v1854,  v1892,  v1929,  v1965,  v2000,  v2034,  v2067,  v2099,  v2130,  v2160,  v2189,  v2217,  v2244,  v2270,  v2295,  v2319,
           v2342,
           v2364,
           v2385,
           v2405,
           v2424,
           v2442,
           v2459,
           v2475,
           v2490,
           v2504,
           v2517,
           v2529,
           v2540,
           v2550);
  uint64_t v502 = sub_DD71C( v494,  v495,  v496,  v497,  v498,  v499,  v500,  v501,  v580,  v643,  v705,  v766,  v826,  v885,  v943,  v1000,  v1056,  v1111,  v1165,  v1218,  v1270,  v1321,  v1371,  v1420,  v1468,  v1515,  v1561,  v1606,  v1650,  v1693,  v1735,  v1776,  v1816,  v1855,  v1893,  v1930,  v1966,  v2001,  v2035,  v2068,  v2100,  v2131,  v2161,  v2190,  v2218,  v2245,  v2271,  v2296,  v2320,
           v2343,
           v2365,
           v2386,
           v2406,
           v2425,
           v2443,
           v2460,
           v2476,
           v2491,
           v2505,
           v2518,
           v2530,
           v2541,
           v2551);
  uint64_t v510 = sub_DD714( v502,  v503,  v504,  v505,  v506,  v507,  v508,  v509,  v581,  v644,  v706,  v767,  v827,  v886,  v944,  v1001,  v1057,  v1112,  v1166,  v1219,  v1271,  v1322,  v1372,  v1421,  v1469,  v1516,  v1562,  v1607,  v1651,  v1694,  v1736,  v1777,  v1817,  v1856,  v1894,  v1931,  v1967,  v2002,  v2036,  v2069,  v2101,  v2132,  v2162,  v2191,  v2219,  v2246,  v2272,  v2297,  v2321,
           v2344,
           v2366,
           v2387,
           v2407,
           v2426,
           v2444,
           v2461,
           v2477,
           v2492,
           v2506,
           v2519,
           v2531,
           v2542,
           v2552);
  sub_DD70C( v510,  v511,  v512,  v513,  v514,  v515,  v516,  v517,  v582,  v645,  v707,  v768,  v828,  v887,  v945,  v1002,  v1058,  v1113,  v1167,  v1220,  v1272,  v1323,  v1373,  v1422,  v1470,  v1517,  v1563,  v1608,  v1652,  v1695,  v1737,  v1778,  v1818,  v1857,  v1895,  v1932,  v1968,  v2003,  v2037,  v2070,  v2102,  v2133,  v2163,  v2192,  v2220,  v2247,  v2273,  v2298,  v2322,
    v2345,
    v2367,
    v2388,
    v2408,
    v2427,
    v2445,
    v2462,
    v2478,
    v2493,
    v2507,
    v2520,
    v2532,
    v2543,
    v2553);
  sub_DD704();
  sub_DD6FC();
  sub_DD6F4();
  sub_DD6EC();
  sub_DD6E4();
  sub_DD6DC();
  sub_DD6D4();
  sub_DD6CC();
  sub_DD6C4();
  sub_DD6BC();
  sub_DD6B4();
  sub_DD6AC();
  sub_DD6A4();
  sub_DD69C();
  sub_DD694();
  sub_DD68C();
  sub_DD684();
  sub_DD67C();
  sub_DD674();
  sub_DD66C();
  sub_DD664();
  sub_DD65C();
  sub_DD654();
  sub_DD64C();
  sub_DD644();
  sub_DD63C();
  sub_DD634();
  sub_DD62C();
  sub_DD624();
  sub_DD61C();
  sub_DD614();
  sub_DD60C();
  sub_DD604();
  sub_DD5FC();
  sub_DD5F4();
  sub_DD5EC();
  sub_DD5E4();
  sub_DD5DC();
  sub_DD5D4();
  sub_DD5CC();
  sub_DD5C4();
  sub_DD5BC();
  sub_DD5B4();
  sub_DD5AC();
  sub_DD5A4();
  sub_DD59C();
  sub_DD594();
  sub_DD58C();
  sub_DD584();
  sub_DD57C();
  sub_DD574();
  sub_DD56C();
  sub_DD564();
  sub_DD55C();
  sub_DD554();
  sub_DD54C();
  sub_DD544();
  sub_DD53C();
  sub_DD534();
  sub_DD52C();
  sub_DD524();
  sub_DD51C();
  sub_DD514();
  sub_DD50C();
  sub_DD504();
  sub_DD4FC();
  sub_DD4F4();
  sub_DD4EC();
  sub_DD4DC();
  sub_DD4E4();
  sub_DD868();
  sub_DD870();
  sub_36B88();
  sub_366E8();
  sub_3677C();
  sub_36588();
  sub_36624();
  sub_3661C();
  sub_36614();
  sub_3660C();
  sub_36604();
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  sub_366B8();
  sub_366B0();
  sub_366A8();
  sub_36814();
  uint64_t v518 = (uint64_t (*)(void))sub_DDBE4();
  return sub_36148(v518);
}

uint64_t sub_D5098()
{
  os_log_type_t v2 = (void *)*v1;
  sub_36578();
  v2[3551] = v3;
  v2[3552] = v0;
  sub_36900(v4);
  uint64_t v5 = v2[3310];
  uint64_t v6 = v2[3309];
  swift_release();
  if (v0) {
    sub_36860();
  }
  sub_464D0(v6);
  sub_464D0(v5);
  sub_A964();
  return sub_363F8(v7, v8, v9);
}

uint64_t sub_D5138()
{
  uint64_t v3 = sub_DDFFC();
  sub_36C4C(v3, (uint64_t)PhoneRingsSnippet.body.getter);
  uint64_t v4 = sub_368F8();
  id v5 = sub_36F04(v4, "catId");
  sub_36EE4();
  sub_DDCE8();
  sub_DDD30();
  sub_DDB48(v2);
  sub_36590((_OWORD *)(v1 + 64));
  sub_36CEC(v1 + 296);
  v0[3553] = *(void *)(v1 + 336);
  v0[3554] = *(void *)(v1 + 344);
  sub_363E8();
  sub_36C5C();
  uint64_t v6 = (void *)sub_3709C();
  v0[3555] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_D5220;
  uint64_t v7 = sub_DDD64();
  return sub_3619C(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_D5220()
{
  uint64_t v1 = (void *)(v0 + 21368);
  sub_20264(*(void *)(v0 + 28440));
  sub_36BE0();
  sub_36EBC();
  sub_36B74(v1);
  sub_36E94();
  sub_A964();
  return sub_36348(v2, v3, v4);
}

uint64_t sub_D528C()
{
  if (*(void *)(v1 + 21472))
  {
    uint64_t v3 = *(void **)(v1 + 28408);
    uint64_t v4 = *(void **)(v1 + 28120);
    uint64_t v2566 = *(void *)(v1 + 26232);
    uint64_t v2563 = *(void *)(v1 + 26216);
    uint64_t v2564 = *(void *)(v1 + 26208);
    sub_20004((__int128 *)(v1 + 21448), v1 + 21968);
    sub_369CC();
    sub_36878(v1 + 21968);
    uint64_t v5 = sub_20308((uint64_t)&unk_17FB90, 56LL);
    sub_DDAC0(v5);
    *(void *)(v1 + 25824) = SimpleOutputFlowAsync.__allocating_init(outputPublisher:outputGenerator:)( &v2568,  &unk_18EA08,  v5);
    sub_DE2C8();

    sub_82234();
    sub_DE7D8();
    sub_DE48C();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v1 + 21968));
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v2563 + 8))(v2566, v2564);
    sub_37458(v6, type metadata accessor for SnippetHeaderModel);
    sub_DE154(v7, &qword_189D00);
    sub_37450(v8, &qword_18B168);
    sub_3652C();
  }

  else
  {
    sub_DE3B4(7328LL);
    sub_DEC74(7488LL);
    uint64_t v9 = (void *)(v1 + 24848);
    sub_DE950();
    uint64_t v10 = *(void *)(v1 + 26808);
    sub_279E0(v11, &qword_18A448);
    sub_A5DC(v0, v1 + 24848);
    sub_DE2AC();
    sub_368A0();
    os_log_type_t v12 = sub_AB70();
    if (sub_46614(v12))
    {
      uint64_t v13 = *(void (**)(uint64_t))(v1 + 28112);
      uint64_t v14 = (_WORD *)sub_3635C();
      sub_DDA70(v14);
      sub_DDA34();
      sub_82234();
      sub_232EC( &dword_0,  (os_log_s *)(v1 + 24848),  (os_log_type_t)v10,  "Couldn't create output, returning GenericErrorFlow",  v2);
      sub_DDDAC();

      uint64_t v15 = sub_37104();
    }

    else
    {
      uint64_t v13 = *(void (**)(uint64_t))(v1 + 28112);
      swift_bridgeObjectRelease();

      uint64_t v15 = sub_7DFE8();
    }

    v13(v15);
    uint64_t v16 = *(void **)(v1 + 28408);
    uint64_t v17 = *(void **)(v1 + 28120);
    uint64_t v2565 = *(void *)(v1 + 26232);
    uint64_t v18 = *(void *)(v1 + 26216);
    uint64_t v19 = *(void *)(v1 + 26208);
    sub_36590((_OWORD *)(*(void *)(v1 + 25976) + 64LL));
    sub_DE348(v2567);
    sub_A178();
    sub_DE4CC();

    sub_DA1C();
    sub_369F4();
    sub_DE540();
    sub_DE9FC();
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v2565, v19);
    sub_DE9B4(v20, type metadata accessor for SnippetHeaderModel);
    sub_DE1AC(v21, &qword_189D00);
    sub_DE510(v22, &qword_18B168);
  }

  sub_DC6E0();
  sub_A8F4();
  sub_A85C();
  sub_A864();
  sub_A910();
  sub_A8EC();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  uint64_t v23 = sub_A78C();
  uint64_t v31 = sub_AAD8(v23, v24, v25, v26, v27, v28, v29, v30, v529, v592);
  uint64_t v39 = sub_A888(v31, v32, v33, v34, v35, v36, v37, v38, v530, v593, v655);
  uint64_t v47 = sub_A854(v39, v40, v41, v42, v43, v44, v45, v46, v531, v594, v656, v717);
  uint64_t v55 = sub_A84C(v47, v48, v49, v50, v51, v52, v53, v54, v532, v595, v657, v718, v778);
  uint64_t v63 = sub_A844(v55, v56, v57, v58, v59, v60, v61, v62, v533, v596, v658, v719, v779, v838);
  uint64_t v71 = sub_A83C(v63, v64, v65, v66, v67, v68, v69, v70, v534, v597, v659, v720, v780, v839, v897);
  uint64_t v79 = sub_A95C(v71, v72, v73, v74, v75, v76, v77, v78, v535, v598, v660, v721, v781, v840, v898, v955);
  uint64_t v87 = sub_A954(v79, v80, v81, v82, v83, v84, v85, v86, v536, v599, v661, v722, v782, v841, v899, v956, v1012);
  uint64_t v95 = sub_A938(v87, v88, v89, v90, v91, v92, v93, v94, v537, v600, v662, v723, v783, v842, v900, v957, v1013, v1068);
  uint64_t v103 = sub_A930( v95,  v96,  v97,  v98,  v99,  v100,  v101,  v102,  v538,  v601,  v663,  v724,  v784,  v843,  v901,  v958,  v1014,  v1069,  v1123);
  uint64_t v111 = sub_A928( v103,  v104,  v105,  v106,  v107,  v108,  v109,  v110,  v539,  v602,  v664,  v725,  v785,  v844,  v902,  v959,  v1015,  v1070,  v1124,  v1177);
  uint64_t v119 = sub_A920( v111,  v112,  v113,  v114,  v115,  v116,  v117,  v118,  v540,  v603,  v665,  v726,  v786,  v845,  v903,  v960,  v1016,  v1071,  v1125,  v1178,  v1230);
  uint64_t v127 = sub_36374( v119,  v120,  v121,  v122,  v123,  v124,  v125,  v126,  v541,  v604,  v666,  v727,  v787,  v846,  v904,  v961,  v1017,  v1072,  v1126,  v1179,  v1231,  v1282);
  uint64_t v135 = sub_3636C( v127,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v542,  v605,  v667,  v728,  v788,  v847,  v905,  v962,  v1018,  v1073,  v1127,  v1180,  v1232,  v1283,  v1333);
  uint64_t v143 = sub_36364( v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  v543,  v606,  v668,  v729,  v789,  v848,  v906,  v963,  v1019,  v1074,  v1128,  v1181,  v1233,  v1284,  v1334,  v1383);
  uint64_t v151 = sub_363F0( v143,  v144,  v145,  v146,  v147,  v148,  v149,  v150,  v544,  v607,  v669,  v730,  v790,  v849,  v907,  v964,  v1020,  v1075,  v1129,  v1182,  v1234,  v1285,  v1335,  v1384,  v1432);
  uint64_t v159 = sub_36430( v151,  v152,  v153,  v154,  v155,  v156,  v157,  v158,  v545,  v608,  v670,  v731,  v791,  v850,  v908,  v965,  v1021,  v1076,  v1130,  v1183,  v1235,  v1286,  v1336,  v1385,  v1433,  v1480);
  uint64_t v167 = sub_36428( v159,  v160,  v161,  v162,  v163,  v164,  v165,  v166,  v546,  v609,  v671,  v732,  v792,  v851,  v909,  v966,  v1022,  v1077,  v1131,  v1184,  v1236,  v1287,  v1337,  v1386,  v1434,  v1481,  v1527);
  uint64_t v175 = sub_36478( v167,  v168,  v169,  v170,  v171,  v172,  v173,  v174,  v547,  v610,  v672,  v733,  v793,  v852,  v910,  v967,  v1023,  v1078,  v1132,  v1185,  v1237,  v1288,  v1338,  v1387,  v1435,  v1482,  v1528,  v1573);
  uint64_t v183 = sub_36524( v175,  v176,  v177,  v178,  v179,  v180,  v181,  v182,  v548,  v611,  v673,  v734,  v794,  v853,  v911,  v968,  v1024,  v1079,  v1133,  v1186,  v1238,  v1289,  v1339,  v1388,  v1436,  v1483,  v1529,  v1574,  v1618);
  uint64_t v191 = sub_3651C( v183,  v184,  v185,  v186,  v187,  v188,  v189,  v190,  v549,  v612,  v674,  v735,  v795,  v854,  v912,  v969,  v1025,  v1080,  v1134,  v1187,  v1239,  v1290,  v1340,  v1389,  v1437,  v1484,  v1530,  v1575,  v1619,  v1662);
  uint64_t v199 = sub_36514( v191,  v192,  v193,  v194,  v195,  v196,  v197,  v198,  v550,  v613,  v675,  v736,  v796,  v855,  v913,  v970,  v1026,  v1081,  v1135,  v1188,  v1240,  v1291,  v1341,  v1390,  v1438,  v1485,  v1531,  v1576,  v1620,  v1663,  v1705);
  uint64_t v207 = sub_3650C( v199,  v200,  v201,  v202,  v203,  v204,  v205,  v206,  v551,  v614,  v676,  v737,  v797,  v856,  v914,  v971,  v1027,  v1082,  v1136,  v1189,  v1241,  v1292,  v1342,  v1391,  v1439,  v1486,  v1532,  v1577,  v1621,  v1664,  v1706,  v1747);
  uint64_t v215 = sub_36504( v207,  v208,  v209,  v210,  v211,  v212,  v213,  v214,  v552,  v615,  v677,  v738,  v798,  v857,  v915,  v972,  v1028,  v1083,  v1137,  v1190,  v1242,  v1293,  v1343,  v1392,  v1440,  v1487,  v1533,  v1578,  v1622,  v1665,  v1707,  v1748,  v1788);
  uint64_t v223 = sub_364FC( v215,  v216,  v217,  v218,  v219,  v220,  v221,  v222,  v553,  v616,  v678,  v739,  v799,  v858,  v916,  v973,  v1029,  v1084,  v1138,  v1191,  v1243,  v1294,  v1344,  v1393,  v1441,  v1488,  v1534,  v1579,  v1623,  v1666,  v1708,  v1749,  v1789,  v1828);
  uint64_t v231 = sub_364F4( v223,  v224,  v225,  v226,  v227,  v228,  v229,  v230,  v554,  v617,  v679,  v740,  v800,  v859,  v917,  v974,  v1030,  v1085,  v1139,  v1192,  v1244,  v1295,  v1345,  v1394,  v1442,  v1489,  v1535,  v1580,  v1624,  v1667,  v1709,  v1750,  v1790,  v1829,  v1867);
  uint64_t v239 = sub_364EC( v231,  v232,  v233,  v234,  v235,  v236,  v237,  v238,  v555,  v618,  v680,  v741,  v801,  v860,  v918,  v975,  v1031,  v1086,  v1140,  v1193,  v1245,  v1296,  v1346,  v1395,  v1443,  v1490,  v1536,  v1581,  v1625,  v1668,  v1710,  v1751,  v1791,  v1830,  v1868,  v1905);
  uint64_t v247 = sub_364E4( v239,  v240,  v241,  v242,  v243,  v244,  v245,  v246,  v556,  v619,  v681,  v742,  v802,  v861,  v919,  v976,  v1032,  v1087,  v1141,  v1194,  v1246,  v1297,  v1347,  v1396,  v1444,  v1491,  v1537,  v1582,  v1626,  v1669,  v1711,  v1752,  v1792,  v1831,  v1869,  v1906,  v1942);
  uint64_t v255 = sub_364DC( v247,  v248,  v249,  v250,  v251,  v252,  v253,  v254,  v557,  v620,  v682,  v743,  v803,  v862,  v920,  v977,  v1033,  v1088,  v1142,  v1195,  v1247,  v1298,  v1348,  v1397,  v1445,  v1492,  v1538,  v1583,  v1627,  v1670,  v1712,  v1753,  v1793,  v1832,  v1870,  v1907,  v1943,  v1978);
  uint64_t v263 = sub_364D4( v255,  v256,  v257,  v258,  v259,  v260,  v261,  v262,  v558,  v621,  v683,  v744,  v804,  v863,  v921,  v978,  v1034,  v1089,  v1143,  v1196,  v1248,  v1299,  v1349,  v1398,  v1446,  v1493,  v1539,  v1584,  v1628,  v1671,  v1713,  v1754,  v1794,  v1833,  v1871,  v1908,  v1944,  v1979,  v2013);
  uint64_t v271 = sub_366F8( v263,  v264,  v265,  v266,  v267,  v268,  v269,  v270,  v559,  v622,  v684,  v745,  v805,  v864,  v922,  v979,  v1035,  v1090,  v1144,  v1197,  v1249,  v1300,  v1350,  v1399,  v1447,  v1494,  v1540,  v1585,  v1629,  v1672,  v1714,  v1755,  v1795,  v1834,  v1872,  v1909,  v1945,  v1980,  v2014,  v2047);
  uint64_t v279 = sub_366F0( v271,  v272,  v273,  v274,  v275,  v276,  v277,  v278,  v560,  v623,  v685,  v746,  v806,  v865,  v923,  v980,  v1036,  v1091,  v1145,  v1198,  v1250,  v1301,  v1351,  v1400,  v1448,  v1495,  v1541,  v1586,  v1630,  v1673,  v1715,  v1756,  v1796,  v1835,  v1873,  v1910,  v1946,  v1981,  v2015,  v2048,  v2080);
  uint64_t v287 = sub_36B90( v279,  v280,  v281,  v282,  v283,  v284,  v285,  v286,  v561,  v624,  v686,  v747,  v807,  v866,  v924,  v981,  v1037,  v1092,  v1146,  v1199,  v1251,  v1302,  v1352,  v1401,  v1449,  v1496,  v1542,  v1587,  v1631,  v1674,  v1716,  v1757,  v1797,  v1836,  v1874,  v1911,  v1947,  v1982,  v2016,  v2049,  v2081,  v2112);
  uint64_t v295 = sub_36EF4( v287,  v288,  v289,  v290,  v291,  v292,  v293,  v294,  v562,  v625,  v687,  v748,  v808,  v867,  v925,  v982,  v1038,  v1093,  v1147,  v1200,  v1252,  v1303,  v1353,  v1402,  v1450,  v1497,  v1543,  v1588,  v1632,  v1675,  v1717,  v1758,  v1798,  v1837,  v1875,  v1912,  v1948,  v1983,  v2017,  v2050,  v2082,  v2113,  v2143);
  uint64_t v303 = sub_36EEC( v295,  v296,  v297,  v298,  v299,  v300,  v301,  v302,  v563,  v626,  v688,  v749,  v809,  v868,  v926,  v983,  v1039,  v1094,  v1148,  v1201,  v1253,  v1304,  v1354,  v1403,  v1451,  v1498,  v1544,  v1589,  v1633,  v1676,  v1718,  v1759,  v1799,  v1838,  v1876,  v1913,  v1949,  v1984,  v2018,  v2051,  v2083,  v2114,  v2144,  v2173);
  uint64_t v311 = sub_DD7E4( v303,  v304,  v305,  v306,  v307,  v308,  v309,  v310,  v564,  v627,  v689,  v750,  v810,  v869,  v927,  v984,  v1040,  v1095,  v1149,  v1202,  v1254,  v1305,  v1355,  v1404,  v1452,  v1499,  v1545,  v1590,  v1634,  v1677,  v1719,  v1760,  v1800,  v1839,  v1877,  v1914,  v1950,  v1985,  v2019,  v2052,  v2084,  v2115,  v2145,  v2174,  v2202);
  uint64_t v319 = sub_DD7DC( v311,  v312,  v313,  v314,  v315,  v316,  v317,  v318,  v565,  v628,  v690,  v751,  v811,  v870,  v928,  v985,  v1041,  v1096,  v1150,  v1203,  v1255,  v1306,  v1356,  v1405,  v1453,  v1500,  v1546,  v1591,  v1635,  v1678,  v1720,  v1761,  v1801,  v1840,  v1878,  v1915,  v1951,  v1986,  v2020,  v2053,  v2085,  v2116,  v2146,  v2175,  v2203,  v2230);
  uint64_t v327 = sub_DD7D4( v319,  v320,  v321,  v322,  v323,  v324,  v325,  v326,  v566,  v629,  v691,  v752,  v812,  v871,  v929,  v986,  v1042,  v1097,  v1151,  v1204,  v1256,  v1307,  v1357,  v1406,  v1454,  v1501,  v1547,  v1592,  v1636,  v1679,  v1721,  v1762,  v1802,  v1841,  v1879,  v1916,  v1952,  v1987,  v2021,  v2054,  v2086,  v2117,  v2147,  v2176,  v2204,  v2231,  v2257);
  uint64_t v335 = sub_DD7CC( v327,  v328,  v329,  v330,  v331,  v332,  v333,  v334,  v567,  v630,  v692,  v753,  v813,  v872,  v930,  v987,  v1043,  v1098,  v1152,  v1205,  v1257,  v1308,  v1358,  v1407,  v1455,  v1502,  v1548,  v1593,  v1637,  v1680,  v1722,  v1763,  v1803,  v1842,  v1880,  v1917,  v1953,  v1988,  v2022,  v2055,  v2087,  v2118,  v2148,  v2177,  v2205,  v2232,  v2258,  v2283);
  uint64_t v343 = sub_DD7C4( v335,  v336,  v337,  v338,  v339,  v340,  v341,  v342,  v568,  v631,  v693,  v754,  v814,  v873,  v931,  v988,  v1044,  v1099,  v1153,  v1206,  v1258,  v1309,  v1359,  v1408,  v1456,  v1503,  v1549,  v1594,  v1638,  v1681,  v1723,  v1764,  v1804,  v1843,  v1881,  v1918,  v1954,  v1989,  v2023,  v2056,  v2088,  v2119,  v2149,  v2178,  v2206,  v2233,  v2259,  v2284,  v2308);
  uint64_t v351 = sub_DD7BC( v343,  v344,  v345,  v346,  v347,  v348,  v349,  v350,  v569,  v632,  v694,  v755,  v815,  v874,  v932,  v989,  v1045,  v1100,  v1154,  v1207,  v1259,  v1310,  v1360,  v1409,  v1457,  v1504,  v1550,  v1595,  v1639,  v1682,  v1724,  v1765,  v1805,  v1844,  v1882,  v1919,  v1955,  v1990,  v2024,  v2057,  v2089,  v2120,  v2150,  v2179,  v2207,  v2234,  v2260,  v2285,  v2309,
           v2332);
  uint64_t v359 = sub_DD7B4( v351,  v352,  v353,  v354,  v355,  v356,  v357,  v358,  v570,  v633,  v695,  v756,  v816,  v875,  v933,  v990,  v1046,  v1101,  v1155,  v1208,  v1260,  v1311,  v1361,  v1410,  v1458,  v1505,  v1551,  v1596,  v1640,  v1683,  v1725,  v1766,  v1806,  v1845,  v1883,  v1920,  v1956,  v1991,  v2025,  v2058,  v2090,  v2121,  v2151,  v2180,  v2208,  v2235,  v2261,  v2286,  v2310,
           v2333,
           v2355);
  uint64_t v367 = sub_DD7AC( v359,  v360,  v361,  v362,  v363,  v364,  v365,  v366,  v571,  v634,  v696,  v757,  v817,  v876,  v934,  v991,  v1047,  v1102,  v1156,  v1209,  v1261,  v1312,  v1362,  v1411,  v1459,  v1506,  v1552,  v1597,  v1641,  v1684,  v1726,  v1767,  v1807,  v1846,  v1884,  v1921,  v1957,  v1992,  v2026,  v2059,  v2091,  v2122,  v2152,  v2181,  v2209,  v2236,  v2262,  v2287,  v2311,
           v2334,
           v2356,
           v2377);
  uint64_t v375 = sub_DD7A4( v367,  v368,  v369,  v370,  v371,  v372,  v373,  v374,  v572,  v635,  v697,  v758,  v818,  v877,  v935,  v992,  v1048,  v1103,  v1157,  v1210,  v1262,  v1313,  v1363,  v1412,  v1460,  v1507,  v1553,  v1598,  v1642,  v1685,  v1727,  v1768,  v1808,  v1847,  v1885,  v1922,  v1958,  v1993,  v2027,  v2060,  v2092,  v2123,  v2153,  v2182,  v2210,  v2237,  v2263,  v2288,  v2312,
           v2335,
           v2357,
           v2378,
           v2398);
  uint64_t v383 = sub_DD79C( v375,  v376,  v377,  v378,  v379,  v380,  v381,  v382,  v573,  v636,  v698,  v759,  v819,  v878,  v936,  v993,  v1049,  v1104,  v1158,  v1211,  v1263,  v1314,  v1364,  v1413,  v1461,  v1508,  v1554,  v1599,  v1643,  v1686,  v1728,  v1769,  v1809,  v1848,  v1886,  v1923,  v1959,  v1994,  v2028,  v2061,  v2093,  v2124,  v2154,  v2183,  v2211,  v2238,  v2264,  v2289,  v2313,
           v2336,
           v2358,
           v2379,
           v2399,
           v2418);
  uint64_t v391 = sub_DD794( v383,  v384,  v385,  v386,  v387,  v388,  v389,  v390,  v574,  v637,  v699,  v760,  v820,  v879,  v937,  v994,  v1050,  v1105,  v1159,  v1212,  v1264,  v1315,  v1365,  v1414,  v1462,  v1509,  v1555,  v1600,  v1644,  v1687,  v1729,  v1770,  v1810,  v1849,  v1887,  v1924,  v1960,  v1995,  v2029,  v2062,  v2094,  v2125,  v2155,  v2184,  v2212,  v2239,  v2265,  v2290,  v2314,
           v2337,
           v2359,
           v2380,
           v2400,
           v2419,
           v2437);
  uint64_t v399 = sub_DD78C( v391,  v392,  v393,  v394,  v395,  v396,  v397,  v398,  v575,  v638,  v700,  v761,  v821,  v880,  v938,  v995,  v1051,  v1106,  v1160,  v1213,  v1265,  v1316,  v1366,  v1415,  v1463,  v1510,  v1556,  v1601,  v1645,  v1688,  v1730,  v1771,  v1811,  v1850,  v1888,  v1925,  v1961,  v1996,  v2030,  v2063,  v2095,  v2126,  v2156,  v2185,  v2213,  v2240,  v2266,  v2291,  v2315,
           v2338,
           v2360,
           v2381,
           v2401,
           v2420,
           v2438,
           v2455);
  uint64_t v407 = sub_DD784( v399,  v400,  v401,  v402,  v403,  v404,  v405,  v406,  v576,  v639,  v701,  v762,  v822,  v881,  v939,  v996,  v1052,  v1107,  v1161,  v1214,  v1266,  v1317,  v1367,  v1416,  v1464,  v1511,  v1557,  v1602,  v1646,  v1689,  v1731,  v1772,  v1812,  v1851,  v1889,  v1926,  v1962,  v1997,  v2031,  v2064,  v2096,  v2127,  v2157,  v2186,  v2214,  v2241,  v2267,  v2292,  v2316,
           v2339,
           v2361,
           v2382,
           v2402,
           v2421,
           v2439,
           v2456,
           v2472);
  uint64_t v415 = sub_DD77C( v407,  v408,  v409,  v410,  v411,  v412,  v413,  v414,  v577,  v640,  v702,  v763,  v823,  v882,  v940,  v997,  v1053,  v1108,  v1162,  v1215,  v1267,  v1318,  v1368,  v1417,  v1465,  v1512,  v1558,  v1603,  v1647,  v1690,  v1732,  v1773,  v1813,  v1852,  v1890,  v1927,  v1963,  v1998,  v2032,  v2065,  v2097,  v2128,  v2158,  v2187,  v2215,  v2242,  v2268,  v2293,  v2317,
           v2340,
           v2362,
           v2383,
           v2403,
           v2422,
           v2440,
           v2457,
           v2473,
           v2488);
  uint64_t v423 = sub_DD774( v415,  v416,  v417,  v418,  v419,  v420,  v421,  v422,  v578,  v641,  v703,  v764,  v824,  v883,  v941,  v998,  v1054,  v1109,  v1163,  v1216,  v1268,  v1319,  v1369,  v1418,  v1466,  v1513,  v1559,  v1604,  v1648,  v1691,  v1733,  v1774,  v1814,  v1853,  v1891,  v1928,  v1964,  v1999,  v2033,  v2066,  v2098,  v2129,  v2159,  v2188,  v2216,  v2243,  v2269,  v2294,  v2318,
           v2341,
           v2363,
           v2384,
           v2404,
           v2423,
           v2441,
           v2458,
           v2474,
           v2489,
           v2503);
  uint64_t v431 = sub_DD76C( v423,  v424,  v425,  v426,  v427,  v428,  v429,  v430,  v579,  v642,  v704,  v765,  v825,  v884,  v942,  v999,  v1055,  v1110,  v1164,  v1217,  v1269,  v1320,  v1370,  v1419,  v1467,  v1514,  v1560,  v1605,  v1649,  v1692,  v1734,  v1775,  v1815,  v1854,  v1892,  v1929,  v1965,  v2000,  v2034,  v2067,  v2099,  v2130,  v2160,  v2189,  v2217,  v2244,  v2270,  v2295,  v2319,
           v2342,
           v2364,
           v2385,
           v2405,
           v2424,
           v2442,
           v2459,
           v2475,
           v2490,
           v2504,
           v2517);
  uint64_t v439 = sub_DD764( v431,  v432,  v433,  v434,  v435,  v436,  v437,  v438,  v580,  v643,  v705,  v766,  v826,  v885,  v943,  v1000,  v1056,  v1111,  v1165,  v1218,  v1270,  v1321,  v1371,  v1420,  v1468,  v1515,  v1561,  v1606,  v1650,  v1693,  v1735,  v1776,  v1816,  v1855,  v1893,  v1930,  v1966,  v2001,  v2035,  v2068,  v2100,  v2131,  v2161,  v2190,  v2218,  v2245,  v2271,  v2296,  v2320,
           v2343,
           v2365,
           v2386,
           v2406,
           v2425,
           v2443,
           v2460,
           v2476,
           v2491,
           v2505,
           v2518,
           v2530);
  uint64_t v447 = sub_DD75C( v439,  v440,  v441,  v442,  v443,  v444,  v445,  v446,  v581,  v644,  v706,  v767,  v827,  v886,  v944,  v1001,  v1057,  v1112,  v1166,  v1219,  v1271,  v1322,  v1372,  v1421,  v1469,  v1516,  v1562,  v1607,  v1651,  v1694,  v1736,  v1777,  v1817,  v1856,  v1894,  v1931,  v1967,  v2002,  v2036,  v2069,  v2101,  v2132,  v2162,  v2191,  v2219,  v2246,  v2272,  v2297,  v2321,
           v2344,
           v2366,
           v2387,
           v2407,
           v2426,
           v2444,
           v2461,
           v2477,
           v2492,
           v2506,
           v2519,
           v2531,
           v2542);
  uint64_t v455 = sub_DD754( v447,  v448,  v449,  v450,  v451,  v452,  v453,  v454,  v582,  v645,  v707,  v768,  v828,  v887,  v945,  v1002,  v1058,  v1113,  v1167,  v1220,  v1272,  v1323,  v1373,  v1422,  v1470,  v1517,  v1563,  v1608,  v1652,  v1695,  v1737,  v1778,  v1818,  v1857,  v1895,  v1932,  v1968,  v2003,  v2037,  v2070,  v2102,  v2133,  v2163,  v2192,  v2220,  v2247,  v2273,  v2298,  v2322,
           v2345,
           v2367,
           v2388,
           v2408,
           v2427,
           v2445,
           v2462,
           v2478,
           v2493,
           v2507,
           v2520,
           v2532,
           v2543,
           v2553);
  uint64_t v463 = sub_DD74C( v455,  v456,  v457,  v458,  v459,  v460,  v461,  v462,  v583,  v646,  v708,  v769,  v829,  v888,  v946,  v1003,  v1059,  v1114,  v1168,  v1221,  v1273,  v1324,  v1374,  v1423,  v1471,  v1518,  v1564,  v1609,  v1653,  v1696,  v1738,  v1779,  v1819,  v1858,  v1896,  v1933,  v1969,  v2004,  v2038,  v2071,  v2103,  v2134,  v2164,  v2193,  v2221,  v2248,  v2274,  v2299,  v2323,
           v2346,
           v2368,
           v2389,
           v2409,
           v2428,
           v2446,
           v2463,
           v2479,
           v2494,
           v2508,
           v2521,
           v2533,
           v2544,
           v2554);
  uint64_t v471 = sub_DD744( v463,  v464,  v465,  v466,  v467,  v468,  v469,  v470,  v584,  v647,  v709,  v770,  v830,  v889,  v947,  v1004,  v1060,  v1115,  v1169,  v1222,  v1274,  v1325,  v1375,  v1424,  v1472,  v1519,  v1565,  v1610,  v1654,  v1697,  v1739,  v1780,  v1820,  v1859,  v1897,  v1934,  v1970,  v2005,  v2039,  v2072,  v2104,  v2135,  v2165,  v2194,  v2222,  v2249,  v2275,  v2300,  v2324,
           v2347,
           v2369,
           v2390,
           v2410,
           v2429,
           v2447,
           v2464,
           v2480,
           v2495,
           v2509,
           v2522,
           v2534,
           v2545,
           v2555);
  uint64_t v479 = sub_DD73C( v471,  v472,  v473,  v474,  v475,  v476,  v477,  v478,  v585,  v648,  v710,  v771,  v831,  v890,  v948,  v1005,  v1061,  v1116,  v1170,  v1223,  v1275,  v1326,  v1376,  v1425,  v1473,  v1520,  v1566,  v1611,  v1655,  v1698,  v1740,  v1781,  v1821,  v1860,  v1898,  v1935,  v1971,  v2006,  v2040,  v2073,  v2105,  v2136,  v2166,  v2195,  v2223,  v2250,  v2276,  v2301,  v2325,
           v2348,
           v2370,
           v2391,
           v2411,
           v2430,
           v2448,
           v2465,
           v2481,
           v2496,
           v2510,
           v2523,
           v2535,
           v2546,
           v2556);
  uint64_t v487 = sub_DD734( v479,  v480,  v481,  v482,  v483,  v484,  v485,  v486,  v586,  v649,  v711,  v772,  v832,  v891,  v949,  v1006,  v1062,  v1117,  v1171,  v1224,  v1276,  v1327,  v1377,  v1426,  v1474,  v1521,  v1567,  v1612,  v1656,  v1699,  v1741,  v1782,  v1822,  v1861,  v1899,  v1936,  v1972,  v2007,  v2041,  v2074,  v2106,  v2137,  v2167,  v2196,  v2224,  v2251,  v2277,  v2302,  v2326,
           v2349,
           v2371,
           v2392,
           v2412,
           v2431,
           v2449,
           v2466,
           v2482,
           v2497,
           v2511,
           v2524,
           v2536,
           v2547,
           v2557);
  uint64_t v495 = sub_DD72C( v487,  v488,  v489,  v490,  v491,  v492,  v493,  v494,  v587,  v650,  v712,  v773,  v833,  v892,  v950,  v1007,  v1063,  v1118,  v1172,  v1225,  v1277,  v1328,  v1378,  v1427,  v1475,  v1522,  v1568,  v1613,  v1657,  v1700,  v1742,  v1783,  v1823,  v1862,  v1900,  v1937,  v1973,  v2008,  v2042,  v2075,  v2107,  v2138,  v2168,  v2197,  v2225,  v2252,  v2278,  v2303,  v2327,
           v2350,
           v2372,
           v2393,
           v2413,
           v2432,
           v2450,
           v2467,
           v2483,
           v2498,
           v2512,
           v2525,
           v2537,
           v2548,
           v2558);
  uint64_t v503 = sub_DD724( v495,  v496,  v497,  v498,  v499,  v500,  v501,  v502,  v588,  v651,  v713,  v774,  v834,  v893,  v951,  v1008,  v1064,  v1119,  v1173,  v1226,  v1278,  v1329,  v1379,  v1428,  v1476,  v1523,  v1569,  v1614,  v1658,  v1701,  v1743,  v1784,  v1824,  v1863,  v1901,  v1938,  v1974,  v2009,  v2043,  v2076,  v2108,  v2139,  v2169,  v2198,  v2226,  v2253,  v2279,  v2304,  v2328,
           v2351,
           v2373,
           v2394,
           v2414,
           v2433,
           v2451,
           v2468,
           v2484,
           v2499,
           v2513,
           v2526,
           v2538,
           v2549,
           v2559);
  uint64_t v511 = sub_DD71C( v503,  v504,  v505,  v506,  v507,  v508,  v509,  v510,  v589,  v652,  v714,  v775,  v835,  v894,  v952,  v1009,  v1065,  v1120,  v1174,  v1227,  v1279,  v1330,  v1380,  v1429,  v1477,  v1524,  v1570,  v1615,  v1659,  v1702,  v1744,  v1785,  v1825,  v1864,  v1902,  v1939,  v1975,  v2010,  v2044,  v2077,  v2109,  v2140,  v2170,  v2199,  v2227,  v2254,  v2280,  v2305,  v2329,
           v2352,
           v2374,
           v2395,
           v2415,
           v2434,
           v2452,
           v2469,
           v2485,
           v2500,
           v2514,
           v2527,
           v2539,
           v2550,
           v2560);
  uint64_t v519 = sub_DD714( v511,  v512,  v513,  v514,  v515,  v516,  v517,  v518,  v590,  v653,  v715,  v776,  v836,  v895,  v953,  v1010,  v1066,  v1121,  v1175,  v1228,  v1280,  v1331,  v1381,  v1430,  v1478,  v1525,  v1571,  v1616,  v1660,  v1703,  v1745,  v1786,  v1826,  v1865,  v1903,  v1940,  v1976,  v2011,  v2045,  v2078,  v2110,  v2141,  v2171,  v2200,  v2228,  v2255,  v2281,  v2306,  v2330,
           v2353,
           v2375,
           v2396,
           v2416,
           v2435,
           v2453,
           v2470,
           v2486,
           v2501,
           v2515,
           v2528,
           v2540,
           v2551,
           v2561);
  sub_DD70C( v519,  v520,  v521,  v522,  v523,  v524,  v525,  v526,  v591,  v654,  v716,  v777,  v837,  v896,  v954,  v1011,  v1067,  v1122,  v1176,  v1229,  v1281,  v1332,  v1382,  v1431,  v1479,  v1526,  v1572,  v1617,  v1661,  v1704,  v1746,  v1787,  v1827,  v1866,  v1904,  v1941,  v1977,  v2012,  v2046,  v2079,  v2111,  v2142,  v2172,  v2201,  v2229,  v2256,  v2282,  v2307,  v2331,
    v2354,
    v2376,
    v2397,
    v2417,
    v2436,
    v2454,
    v2471,
    v2487,
    v2502,
    v2516,
    v2529,
    v2541,
    v2552,
    v2562);
  sub_DD704();
  sub_DD6FC();
  sub_DD6F4();
  sub_DD6EC();
  sub_DD6E4();
  sub_DD6DC();
  sub_DD6D4();
  sub_DD6CC();
  sub_DD6C4();
  sub_DD6BC();
  sub_DD6B4();
  sub_DD6AC();
  sub_DD6A4();
  sub_DD69C();
  sub_DD694();
  sub_DD68C();
  sub_DD684();
  sub_DD67C();
  sub_DD674();
  sub_DD66C();
  sub_DD664();
  sub_DD65C();
  sub_DD654();
  sub_DD64C();
  sub_DD644();
  sub_DD63C();
  sub_DD634();
  sub_DD62C();
  sub_DD624();
  sub_DD61C();
  sub_DD614();
  sub_DD60C();
  sub_DD604();
  sub_DD5FC();
  sub_DD5F4();
  sub_DD5EC();
  sub_DD5E4();
  sub_DD5DC();
  sub_DD5D4();
  sub_DD5CC();
  sub_DD5C4();
  sub_DD5BC();
  sub_DD5B4();
  sub_DD5AC();
  sub_DD5A4();
  sub_DD59C();
  sub_DD594();
  sub_DD58C();
  sub_DD584();
  sub_DD57C();
  sub_DD574();
  sub_DD56C();
  sub_DD564();
  sub_DD55C();
  sub_DD554();
  sub_DD54C();
  sub_DD544();
  sub_DD53C();
  sub_DD534();
  sub_DD52C();
  sub_DD524();
  sub_DD51C();
  sub_DD514();
  sub_DD50C();
  sub_DD504();
  sub_DD4FC();
  sub_DD4F4();
  sub_DD4EC();
  sub_DD4DC();
  sub_DD4E4();
  sub_DD868();
  sub_DD870();
  sub_DDA48();
  sub_DDA58();
  sub_DDE30();
  sub_DDE28();
  sub_36B88();
  sub_366E8();
  sub_3677C();
  sub_36588();
  sub_36624();
  sub_3661C();
  sub_36614();
  sub_3660C();
  sub_36604();
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  uint64_t v527 = (uint64_t (*)(void))sub_DE600();
  return sub_36148(v527);
}

uint64_t sub_D57E4()
{
  os_log_type_t v5 = sub_AB70();
  if (sub_46614(v5))
  {
    uint64_t v6 = (_WORD *)sub_3635C();
    sub_36908(v6);
    sub_DD494();
    sub_DA1C();
    sub_232EC(&dword_0, v0, v2, "Couldn't create specificMedicationLogFailed_Dialog, returning GenericErrorFlow", v3);
    sub_37128();
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  sub_3747C();
  uint64_t v7 = (void *)v1[3517];
  uint64_t v8 = (void *)v1[3515];
  uint64_t v9 = (_OWORD *)sub_DE244();
  sub_36590(v9);
  sub_DE348(v1 + 756);
  sub_A178();
  sub_DDE00();

  sub_36C34();
  sub_1EBF4();

  uint64_t v10 = sub_DE304();
  sub_990D4((uint64_t)v10, type metadata accessor for SnippetHeaderModel);
  sub_279E0((uint64_t)v3, &qword_189D00);
  sub_DDBDC(v11, &qword_18B168);
  sub_DBE38();
  sub_A8F4();
  sub_A85C();
  sub_A864();
  sub_A910();
  sub_A8EC();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  uint64_t v12 = sub_A78C();
  uint64_t v20 = sub_AAD8(v12, v13, v14, v15, v16, v17, v18, v19, v518, v581);
  uint64_t v28 = sub_A888(v20, v21, v22, v23, v24, v25, v26, v27, v519, v582, v644);
  uint64_t v36 = sub_A854(v28, v29, v30, v31, v32, v33, v34, v35, v520, v583, v645, v706);
  uint64_t v44 = sub_A84C(v36, v37, v38, v39, v40, v41, v42, v43, v521, v584, v646, v707, v767);
  uint64_t v52 = sub_A844(v44, v45, v46, v47, v48, v49, v50, v51, v522, v585, v647, v708, v768, v827);
  uint64_t v60 = sub_A83C(v52, v53, v54, v55, v56, v57, v58, v59, v523, v586, v648, v709, v769, v828, v886);
  uint64_t v68 = sub_A95C(v60, v61, v62, v63, v64, v65, v66, v67, v524, v587, v649, v710, v770, v829, v887, v944);
  uint64_t v76 = sub_A954(v68, v69, v70, v71, v72, v73, v74, v75, v525, v588, v650, v711, v771, v830, v888, v945, v1001);
  uint64_t v84 = sub_A938(v76, v77, v78, v79, v80, v81, v82, v83, v526, v589, v651, v712, v772, v831, v889, v946, v1002, v1057);
  uint64_t v92 = sub_A930( v84,  v85,  v86,  v87,  v88,  v89,  v90,  v91,  v527,  v590,  v652,  v713,  v773,  v832,  v890,  v947,  v1003,  v1058,  v1112);
  uint64_t v100 = sub_A928( v92,  v93,  v94,  v95,  v96,  v97,  v98,  v99,  v528,  v591,  v653,  v714,  v774,  v833,  v891,  v948,  v1004,  v1059,  v1113,  v1166);
  uint64_t v108 = sub_A920( v100,  v101,  v102,  v103,  v104,  v105,  v106,  v107,  v529,  v592,  v654,  v715,  v775,  v834,  v892,  v949,  v1005,  v1060,  v1114,  v1167,  v1219);
  uint64_t v116 = sub_36374( v108,  v109,  v110,  v111,  v112,  v113,  v114,  v115,  v530,  v593,  v655,  v716,  v776,  v835,  v893,  v950,  v1006,  v1061,  v1115,  v1168,  v1220,  v1271);
  uint64_t v124 = sub_3636C( v116,  v117,  v118,  v119,  v120,  v121,  v122,  v123,  v531,  v594,  v656,  v717,  v777,  v836,  v894,  v951,  v1007,  v1062,  v1116,  v1169,  v1221,  v1272,  v1322);
  uint64_t v132 = sub_36364( v124,  v125,  v126,  v127,  v128,  v129,  v130,  v131,  v532,  v595,  v657,  v718,  v778,  v837,  v895,  v952,  v1008,  v1063,  v1117,  v1170,  v1222,  v1273,  v1323,  v1372);
  uint64_t v140 = sub_363F0( v132,  v133,  v134,  v135,  v136,  v137,  v138,  v139,  v533,  v596,  v658,  v719,  v779,  v838,  v896,  v953,  v1009,  v1064,  v1118,  v1171,  v1223,  v1274,  v1324,  v1373,  v1421);
  uint64_t v148 = sub_36430( v140,  v141,  v142,  v143,  v144,  v145,  v146,  v147,  v534,  v597,  v659,  v720,  v780,  v839,  v897,  v954,  v1010,  v1065,  v1119,  v1172,  v1224,  v1275,  v1325,  v1374,  v1422,  v1469);
  uint64_t v156 = sub_36428( v148,  v149,  v150,  v151,  v152,  v153,  v154,  v155,  v535,  v598,  v660,  v721,  v781,  v840,  v898,  v955,  v1011,  v1066,  v1120,  v1173,  v1225,  v1276,  v1326,  v1375,  v1423,  v1470,  v1516);
  uint64_t v164 = sub_36478( v156,  v157,  v158,  v159,  v160,  v161,  v162,  v163,  v536,  v599,  v661,  v722,  v782,  v841,  v899,  v956,  v1012,  v1067,  v1121,  v1174,  v1226,  v1277,  v1327,  v1376,  v1424,  v1471,  v1517,  v1562);
  uint64_t v172 = sub_36524( v164,  v165,  v166,  v167,  v168,  v169,  v170,  v171,  v537,  v600,  v662,  v723,  v783,  v842,  v900,  v957,  v1013,  v1068,  v1122,  v1175,  v1227,  v1278,  v1328,  v1377,  v1425,  v1472,  v1518,  v1563,  v1607);
  uint64_t v180 = sub_3651C( v172,  v173,  v174,  v175,  v176,  v177,  v178,  v179,  v538,  v601,  v663,  v724,  v784,  v843,  v901,  v958,  v1014,  v1069,  v1123,  v1176,  v1228,  v1279,  v1329,  v1378,  v1426,  v1473,  v1519,  v1564,  v1608,  v1651);
  uint64_t v188 = sub_36514( v180,  v181,  v182,  v183,  v184,  v185,  v186,  v187,  v539,  v602,  v664,  v725,  v785,  v844,  v902,  v959,  v1015,  v1070,  v1124,  v1177,  v1229,  v1280,  v1330,  v1379,  v1427,  v1474,  v1520,  v1565,  v1609,  v1652,  v1694);
  uint64_t v196 = sub_3650C( v188,  v189,  v190,  v191,  v192,  v193,  v194,  v195,  v540,  v603,  v665,  v726,  v786,  v845,  v903,  v960,  v1016,  v1071,  v1125,  v1178,  v1230,  v1281,  v1331,  v1380,  v1428,  v1475,  v1521,  v1566,  v1610,  v1653,  v1695,  v1736);
  uint64_t v204 = sub_36504( v196,  v197,  v198,  v199,  v200,  v201,  v202,  v203,  v541,  v604,  v666,  v727,  v787,  v846,  v904,  v961,  v1017,  v1072,  v1126,  v1179,  v1231,  v1282,  v1332,  v1381,  v1429,  v1476,  v1522,  v1567,  v1611,  v1654,  v1696,  v1737,  v1777);
  uint64_t v212 = sub_364FC( v204,  v205,  v206,  v207,  v208,  v209,  v210,  v211,  v542,  v605,  v667,  v728,  v788,  v847,  v905,  v962,  v1018,  v1073,  v1127,  v1180,  v1232,  v1283,  v1333,  v1382,  v1430,  v1477,  v1523,  v1568,  v1612,  v1655,  v1697,  v1738,  v1778,  v1817);
  uint64_t v220 = sub_364F4( v212,  v213,  v214,  v215,  v216,  v217,  v218,  v219,  v543,  v606,  v668,  v729,  v789,  v848,  v906,  v963,  v1019,  v1074,  v1128,  v1181,  v1233,  v1284,  v1334,  v1383,  v1431,  v1478,  v1524,  v1569,  v1613,  v1656,  v1698,  v1739,  v1779,  v1818,  v1856);
  uint64_t v228 = sub_364EC( v220,  v221,  v222,  v223,  v224,  v225,  v226,  v227,  v544,  v607,  v669,  v730,  v790,  v849,  v907,  v964,  v1020,  v1075,  v1129,  v1182,  v1234,  v1285,  v1335,  v1384,  v1432,  v1479,  v1525,  v1570,  v1614,  v1657,  v1699,  v1740,  v1780,  v1819,  v1857,  v1894);
  uint64_t v236 = sub_364E4( v228,  v229,  v230,  v231,  v232,  v233,  v234,  v235,  v545,  v608,  v670,  v731,  v791,  v850,  v908,  v965,  v1021,  v1076,  v1130,  v1183,  v1235,  v1286,  v1336,  v1385,  v1433,  v1480,  v1526,  v1571,  v1615,  v1658,  v1700,  v1741,  v1781,  v1820,  v1858,  v1895,  v1931);
  uint64_t v244 = sub_364DC( v236,  v237,  v238,  v239,  v240,  v241,  v242,  v243,  v546,  v609,  v671,  v732,  v792,  v851,  v909,  v966,  v1022,  v1077,  v1131,  v1184,  v1236,  v1287,  v1337,  v1386,  v1434,  v1481,  v1527,  v1572,  v1616,  v1659,  v1701,  v1742,  v1782,  v1821,  v1859,  v1896,  v1932,  v1967);
  uint64_t v252 = sub_364D4( v244,  v245,  v246,  v247,  v248,  v249,  v250,  v251,  v547,  v610,  v672,  v733,  v793,  v852,  v910,  v967,  v1023,  v1078,  v1132,  v1185,  v1237,  v1288,  v1338,  v1387,  v1435,  v1482,  v1528,  v1573,  v1617,  v1660,  v1702,  v1743,  v1783,  v1822,  v1860,  v1897,  v1933,  v1968,  v2002);
  uint64_t v260 = sub_366F8( v252,  v253,  v254,  v255,  v256,  v257,  v258,  v259,  v548,  v611,  v673,  v734,  v794,  v853,  v911,  v968,  v1024,  v1079,  v1133,  v1186,  v1238,  v1289,  v1339,  v1388,  v1436,  v1483,  v1529,  v1574,  v1618,  v1661,  v1703,  v1744,  v1784,  v1823,  v1861,  v1898,  v1934,  v1969,  v2003,  v2036);
  uint64_t v268 = sub_366F0( v260,  v261,  v262,  v263,  v264,  v265,  v266,  v267,  v549,  v612,  v674,  v735,  v795,  v854,  v912,  v969,  v1025,  v1080,  v1134,  v1187,  v1239,  v1290,  v1340,  v1389,  v1437,  v1484,  v1530,  v1575,  v1619,  v1662,  v1704,  v1745,  v1785,  v1824,  v1862,  v1899,  v1935,  v1970,  v2004,  v2037,  v2069);
  uint64_t v276 = sub_36B90( v268,  v269,  v270,  v271,  v272,  v273,  v274,  v275,  v550,  v613,  v675,  v736,  v796,  v855,  v913,  v970,  v1026,  v1081,  v1135,  v1188,  v1240,  v1291,  v1341,  v1390,  v1438,  v1485,  v1531,  v1576,  v1620,  v1663,  v1705,  v1746,  v1786,  v1825,  v1863,  v1900,  v1936,  v1971,  v2005,  v2038,  v2070,  v2101);
  uint64_t v284 = sub_36EF4( v276,  v277,  v278,  v279,  v280,  v281,  v282,  v283,  v551,  v614,  v676,  v737,  v797,  v856,  v914,  v971,  v1027,  v1082,  v1136,  v1189,  v1241,  v1292,  v1342,  v1391,  v1439,  v1486,  v1532,  v1577,  v1621,  v1664,  v1706,  v1747,  v1787,  v1826,  v1864,  v1901,  v1937,  v1972,  v2006,  v2039,  v2071,  v2102,  v2132);
  uint64_t v292 = sub_36EEC( v284,  v285,  v286,  v287,  v288,  v289,  v290,  v291,  v552,  v615,  v677,  v738,  v798,  v857,  v915,  v972,  v1028,  v1083,  v1137,  v1190,  v1242,  v1293,  v1343,  v1392,  v1440,  v1487,  v1533,  v1578,  v1622,  v1665,  v1707,  v1748,  v1788,  v1827,  v1865,  v1902,  v1938,  v1973,  v2007,  v2040,  v2072,  v2103,  v2133,  v2162);
  uint64_t v300 = sub_DD7E4( v292,  v293,  v294,  v295,  v296,  v297,  v298,  v299,  v553,  v616,  v678,  v739,  v799,  v858,  v916,  v973,  v1029,  v1084,  v1138,  v1191,  v1243,  v1294,  v1344,  v1393,  v1441,  v1488,  v1534,  v1579,  v1623,  v1666,  v1708,  v1749,  v1789,  v1828,  v1866,  v1903,  v1939,  v1974,  v2008,  v2041,  v2073,  v2104,  v2134,  v2163,  v2191);
  uint64_t v308 = sub_DD7DC( v300,  v301,  v302,  v303,  v304,  v305,  v306,  v307,  v554,  v617,  v679,  v740,  v800,  v859,  v917,  v974,  v1030,  v1085,  v1139,  v1192,  v1244,  v1295,  v1345,  v1394,  v1442,  v1489,  v1535,  v1580,  v1624,  v1667,  v1709,  v1750,  v1790,  v1829,  v1867,  v1904,  v1940,  v1975,  v2009,  v2042,  v2074,  v2105,  v2135,  v2164,  v2192,  v2219);
  uint64_t v316 = sub_DD7D4( v308,  v309,  v310,  v311,  v312,  v313,  v314,  v315,  v555,  v618,  v680,  v741,  v801,  v860,  v918,  v975,  v1031,  v1086,  v1140,  v1193,  v1245,  v1296,  v1346,  v1395,  v1443,  v1490,  v1536,  v1581,  v1625,  v1668,  v1710,  v1751,  v1791,  v1830,  v1868,  v1905,  v1941,  v1976,  v2010,  v2043,  v2075,  v2106,  v2136,  v2165,  v2193,  v2220,  v2246);
  uint64_t v324 = sub_DD7CC( v316,  v317,  v318,  v319,  v320,  v321,  v322,  v323,  v556,  v619,  v681,  v742,  v802,  v861,  v919,  v976,  v1032,  v1087,  v1141,  v1194,  v1246,  v1297,  v1347,  v1396,  v1444,  v1491,  v1537,  v1582,  v1626,  v1669,  v1711,  v1752,  v1792,  v1831,  v1869,  v1906,  v1942,  v1977,  v2011,  v2044,  v2076,  v2107,  v2137,  v2166,  v2194,  v2221,  v2247,  v2272);
  uint64_t v332 = sub_DD7C4( v324,  v325,  v326,  v327,  v328,  v329,  v330,  v331,  v557,  v620,  v682,  v743,  v803,  v862,  v920,  v977,  v1033,  v1088,  v1142,  v1195,  v1247,  v1298,  v1348,  v1397,  v1445,  v1492,  v1538,  v1583,  v1627,  v1670,  v1712,  v1753,  v1793,  v1832,  v1870,  v1907,  v1943,  v1978,  v2012,  v2045,  v2077,  v2108,  v2138,  v2167,  v2195,  v2222,  v2248,  v2273,  v2297);
  uint64_t v340 = sub_DD7BC( v332,  v333,  v334,  v335,  v336,  v337,  v338,  v339,  v558,  v621,  v683,  v744,  v804,  v863,  v921,  v978,  v1034,  v1089,  v1143,  v1196,  v1248,  v1299,  v1349,  v1398,  v1446,  v1493,  v1539,  v1584,  v1628,  v1671,  v1713,  v1754,  v1794,  v1833,  v1871,  v1908,  v1944,  v1979,  v2013,  v2046,  v2078,  v2109,  v2139,  v2168,  v2196,  v2223,  v2249,  v2274,  v2298,
           v2321);
  uint64_t v348 = sub_DD7B4( v340,  v341,  v342,  v343,  v344,  v345,  v346,  v347,  v559,  v622,  v684,  v745,  v805,  v864,  v922,  v979,  v1035,  v1090,  v1144,  v1197,  v1249,  v1300,  v1350,  v1399,  v1447,  v1494,  v1540,  v1585,  v1629,  v1672,  v1714,  v1755,  v1795,  v1834,  v1872,  v1909,  v1945,  v1980,  v2014,  v2047,  v2079,  v2110,  v2140,  v2169,  v2197,  v2224,  v2250,  v2275,  v2299,
           v2322,
           v2344);
  uint64_t v356 = sub_DD7AC( v348,  v349,  v350,  v351,  v352,  v353,  v354,  v355,  v560,  v623,  v685,  v746,  v806,  v865,  v923,  v980,  v1036,  v1091,  v1145,  v1198,  v1250,  v1301,  v1351,  v1400,  v1448,  v1495,  v1541,  v1586,  v1630,  v1673,  v1715,  v1756,  v1796,  v1835,  v1873,  v1910,  v1946,  v1981,  v2015,  v2048,  v2080,  v2111,  v2141,  v2170,  v2198,  v2225,  v2251,  v2276,  v2300,
           v2323,
           v2345,
           v2366);
  uint64_t v364 = sub_DD7A4( v356,  v357,  v358,  v359,  v360,  v361,  v362,  v363,  v561,  v624,  v686,  v747,  v807,  v866,  v924,  v981,  v1037,  v1092,  v1146,  v1199,  v1251,  v1302,  v1352,  v1401,  v1449,  v1496,  v1542,  v1587,  v1631,  v1674,  v1716,  v1757,  v1797,  v1836,  v1874,  v1911,  v1947,  v1982,  v2016,  v2049,  v2081,  v2112,  v2142,  v2171,  v2199,  v2226,  v2252,  v2277,  v2301,
           v2324,
           v2346,
           v2367,
           v2387);
  uint64_t v372 = sub_DD79C( v364,  v365,  v366,  v367,  v368,  v369,  v370,  v371,  v562,  v625,  v687,  v748,  v808,  v867,  v925,  v982,  v1038,  v1093,  v1147,  v1200,  v1252,  v1303,  v1353,  v1402,  v1450,  v1497,  v1543,  v1588,  v1632,  v1675,  v1717,  v1758,  v1798,  v1837,  v1875,  v1912,  v1948,  v1983,  v2017,  v2050,  v2082,  v2113,  v2143,  v2172,  v2200,  v2227,  v2253,  v2278,  v2302,
           v2325,
           v2347,
           v2368,
           v2388,
           v2407);
  uint64_t v380 = sub_DD794( v372,  v373,  v374,  v375,  v376,  v377,  v378,  v379,  v563,  v626,  v688,  v749,  v809,  v868,  v926,  v983,  v1039,  v1094,  v1148,  v1201,  v1253,  v1304,  v1354,  v1403,  v1451,  v1498,  v1544,  v1589,  v1633,  v1676,  v1718,  v1759,  v1799,  v1838,  v1876,  v1913,  v1949,  v1984,  v2018,  v2051,  v2083,  v2114,  v2144,  v2173,  v2201,  v2228,  v2254,  v2279,  v2303,
           v2326,
           v2348,
           v2369,
           v2389,
           v2408,
           v2426);
  uint64_t v388 = sub_DD78C( v380,  v381,  v382,  v383,  v384,  v385,  v386,  v387,  v564,  v627,  v689,  v750,  v810,  v869,  v927,  v984,  v1040,  v1095,  v1149,  v1202,  v1254,  v1305,  v1355,  v1404,  v1452,  v1499,  v1545,  v1590,  v1634,  v1677,  v1719,  v1760,  v1800,  v1839,  v1877,  v1914,  v1950,  v1985,  v2019,  v2052,  v2084,  v2115,  v2145,  v2174,  v2202,  v2229,  v2255,  v2280,  v2304,
           v2327,
           v2349,
           v2370,
           v2390,
           v2409,
           v2427,
           v2444);
  uint64_t v396 = sub_DD784( v388,  v389,  v390,  v391,  v392,  v393,  v394,  v395,  v565,  v628,  v690,  v751,  v811,  v870,  v928,  v985,  v1041,  v1096,  v1150,  v1203,  v1255,  v1306,  v1356,  v1405,  v1453,  v1500,  v1546,  v1591,  v1635,  v1678,  v1720,  v1761,  v1801,  v1840,  v1878,  v1915,  v1951,  v1986,  v2020,  v2053,  v2085,  v2116,  v2146,  v2175,  v2203,  v2230,  v2256,  v2281,  v2305,
           v2328,
           v2350,
           v2371,
           v2391,
           v2410,
           v2428,
           v2445,
           v2461);
  uint64_t v404 = sub_DD77C( v396,  v397,  v398,  v399,  v400,  v401,  v402,  v403,  v566,  v629,  v691,  v752,  v812,  v871,  v929,  v986,  v1042,  v1097,  v1151,  v1204,  v1256,  v1307,  v1357,  v1406,  v1454,  v1501,  v1547,  v1592,  v1636,  v1679,  v1721,  v1762,  v1802,  v1841,  v1879,  v1916,  v1952,  v1987,  v2021,  v2054,  v2086,  v2117,  v2147,  v2176,  v2204,  v2231,  v2257,  v2282,  v2306,
           v2329,
           v2351,
           v2372,
           v2392,
           v2411,
           v2429,
           v2446,
           v2462,
           v2477);
  uint64_t v412 = sub_DD774( v404,  v405,  v406,  v407,  v408,  v409,  v410,  v411,  v567,  v630,  v692,  v753,  v813,  v872,  v930,  v987,  v1043,  v1098,  v1152,  v1205,  v1257,  v1308,  v1358,  v1407,  v1455,  v1502,  v1548,  v1593,  v1637,  v1680,  v1722,  v1763,  v1803,  v1842,  v1880,  v1917,  v1953,  v1988,  v2022,  v2055,  v2087,  v2118,  v2148,  v2177,  v2205,  v2232,  v2258,  v2283,  v2307,
           v2330,
           v2352,
           v2373,
           v2393,
           v2412,
           v2430,
           v2447,
           v2463,
           v2478,
           v2492);
  uint64_t v420 = sub_DD76C( v412,  v413,  v414,  v415,  v416,  v417,  v418,  v419,  v568,  v631,  v693,  v754,  v814,  v873,  v931,  v988,  v1044,  v1099,  v1153,  v1206,  v1258,  v1309,  v1359,  v1408,  v1456,  v1503,  v1549,  v1594,  v1638,  v1681,  v1723,  v1764,  v1804,  v1843,  v1881,  v1918,  v1954,  v1989,  v2023,  v2056,  v2088,  v2119,  v2149,  v2178,  v2206,  v2233,  v2259,  v2284,  v2308,
           v2331,
           v2353,
           v2374,
           v2394,
           v2413,
           v2431,
           v2448,
           v2464,
           v2479,
           v2493,
           v2506);
  uint64_t v428 = sub_DD764( v420,  v421,  v422,  v423,  v424,  v425,  v426,  v427,  v569,  v632,  v694,  v755,  v815,  v874,  v932,  v989,  v1045,  v1100,  v1154,  v1207,  v1259,  v1310,  v1360,  v1409,  v1457,  v1504,  v1550,  v1595,  v1639,  v1682,  v1724,  v1765,  v1805,  v1844,  v1882,  v1919,  v1955,  v1990,  v2024,  v2057,  v2089,  v2120,  v2150,  v2179,  v2207,  v2234,  v2260,  v2285,  v2309,
           v2332,
           v2354,
           v2375,
           v2395,
           v2414,
           v2432,
           v2449,
           v2465,
           v2480,
           v2494,
           v2507,
           v2519);
  uint64_t v436 = sub_DD75C( v428,  v429,  v430,  v431,  v432,  v433,  v434,  v435,  v570,  v633,  v695,  v756,  v816,  v875,  v933,  v990,  v1046,  v1101,  v1155,  v1208,  v1260,  v1311,  v1361,  v1410,  v1458,  v1505,  v1551,  v1596,  v1640,  v1683,  v1725,  v1766,  v1806,  v1845,  v1883,  v1920,  v1956,  v1991,  v2025,  v2058,  v2090,  v2121,  v2151,  v2180,  v2208,  v2235,  v2261,  v2286,  v2310,
           v2333,
           v2355,
           v2376,
           v2396,
           v2415,
           v2433,
           v2450,
           v2466,
           v2481,
           v2495,
           v2508,
           v2520,
           v2531);
  uint64_t v444 = sub_DD754( v436,  v437,  v438,  v439,  v440,  v441,  v442,  v443,  v571,  v634,  v696,  v757,  v817,  v876,  v934,  v991,  v1047,  v1102,  v1156,  v1209,  v1261,  v1312,  v1362,  v1411,  v1459,  v1506,  v1552,  v1597,  v1641,  v1684,  v1726,  v1767,  v1807,  v1846,  v1884,  v1921,  v1957,  v1992,  v2026,  v2059,  v2091,  v2122,  v2152,  v2181,  v2209,  v2236,  v2262,  v2287,  v2311,
           v2334,
           v2356,
           v2377,
           v2397,
           v2416,
           v2434,
           v2451,
           v2467,
           v2482,
           v2496,
           v2509,
           v2521,
           v2532,
           v2542);
  uint64_t v452 = sub_DD74C( v444,  v445,  v446,  v447,  v448,  v449,  v450,  v451,  v572,  v635,  v697,  v758,  v818,  v877,  v935,  v992,  v1048,  v1103,  v1157,  v1210,  v1262,  v1313,  v1363,  v1412,  v1460,  v1507,  v1553,  v1598,  v1642,  v1685,  v1727,  v1768,  v1808,  v1847,  v1885,  v1922,  v1958,  v1993,  v2027,  v2060,  v2092,  v2123,  v2153,  v2182,  v2210,  v2237,  v2263,  v2288,  v2312,
           v2335,
           v2357,
           v2378,
           v2398,
           v2417,
           v2435,
           v2452,
           v2468,
           v2483,
           v2497,
           v2510,
           v2522,
           v2533,
           v2543);
  uint64_t v460 = sub_DD744( v452,  v453,  v454,  v455,  v456,  v457,  v458,  v459,  v573,  v636,  v698,  v759,  v819,  v878,  v936,  v993,  v1049,  v1104,  v1158,  v1211,  v1263,  v1314,  v1364,  v1413,  v1461,  v1508,  v1554,  v1599,  v1643,  v1686,  v1728,  v1769,  v1809,  v1848,  v1886,  v1923,  v1959,  v1994,  v2028,  v2061,  v2093,  v2124,  v2154,  v2183,  v2211,  v2238,  v2264,  v2289,  v2313,
           v2336,
           v2358,
           v2379,
           v2399,
           v2418,
           v2436,
           v2453,
           v2469,
           v2484,
           v2498,
           v2511,
           v2523,
           v2534,
           v2544);
  uint64_t v468 = sub_DD73C( v460,  v461,  v462,  v463,  v464,  v465,  v466,  v467,  v574,  v637,  v699,  v760,  v820,  v879,  v937,  v994,  v1050,  v1105,  v1159,  v1212,  v1264,  v1315,  v1365,  v1414,  v1462,  v1509,  v1555,  v1600,  v1644,  v1687,  v1729,  v1770,  v1810,  v1849,  v1887,  v1924,  v1960,  v1995,  v2029,  v2062,  v2094,  v2125,  v2155,  v2184,  v2212,  v2239,  v2265,  v2290,  v2314,
           v2337,
           v2359,
           v2380,
           v2400,
           v2419,
           v2437,
           v2454,
           v2470,
           v2485,
           v2499,
           v2512,
           v2524,
           v2535,
           v2545);
  uint64_t v476 = sub_DD734( v468,  v469,  v470,  v471,  v472,  v473,  v474,  v475,  v575,  v638,  v700,  v761,  v821,  v880,  v938,  v995,  v1051,  v1106,  v1160,  v1213,  v1265,  v1316,  v1366,  v1415,  v1463,  v1510,  v1556,  v1601,  v1645,  v1688,  v1730,  v1771,  v1811,  v1850,  v1888,  v1925,  v1961,  v1996,  v2030,  v2063,  v2095,  v2126,  v2156,  v2185,  v2213,  v2240,  v2266,  v2291,  v2315,
           v2338,
           v2360,
           v2381,
           v2401,
           v2420,
           v2438,
           v2455,
           v2471,
           v2486,
           v2500,
           v2513,
           v2525,
           v2536,
           v2546);
  uint64_t v484 = sub_DD72C( v476,  v477,  v478,  v479,  v480,  v481,  v482,  v483,  v576,  v639,  v701,  v762,  v822,  v881,  v939,  v996,  v1052,  v1107,  v1161,  v1214,  v1266,  v1317,  v1367,  v1416,  v1464,  v1511,  v1557,  v1602,  v1646,  v1689,  v1731,  v1772,  v1812,  v1851,  v1889,  v1926,  v1962,  v1997,  v2031,  v2064,  v2096,  v2127,  v2157,  v2186,  v2214,  v2241,  v2267,  v2292,  v2316,
           v2339,
           v2361,
           v2382,
           v2402,
           v2421,
           v2439,
           v2456,
           v2472,
           v2487,
           v2501,
           v2514,
           v2526,
           v2537,
           v2547);
  uint64_t v492 = sub_DD724( v484,  v485,  v486,  v487,  v488,  v489,  v490,  v491,  v577,  v640,  v702,  v763,  v823,  v882,  v940,  v997,  v1053,  v1108,  v1162,  v1215,  v1267,  v1318,  v1368,  v1417,  v1465,  v1512,  v1558,  v1603,  v1647,  v1690,  v1732,  v1773,  v1813,  v1852,  v1890,  v1927,  v1963,  v1998,  v2032,  v2065,  v2097,  v2128,  v2158,  v2187,  v2215,  v2242,  v2268,  v2293,  v2317,
           v2340,
           v2362,
           v2383,
           v2403,
           v2422,
           v2440,
           v2457,
           v2473,
           v2488,
           v2502,
           v2515,
           v2527,
           v2538,
           v2548);
  uint64_t v500 = sub_DD71C( v492,  v493,  v494,  v495,  v496,  v497,  v498,  v499,  v578,  v641,  v703,  v764,  v824,  v883,  v941,  v998,  v1054,  v1109,  v1163,  v1216,  v1268,  v1319,  v1369,  v1418,  v1466,  v1513,  v1559,  v1604,  v1648,  v1691,  v1733,  v1774,  v1814,  v1853,  v1891,  v1928,  v1964,  v1999,  v2033,  v2066,  v2098,  v2129,  v2159,  v2188,  v2216,  v2243,  v2269,  v2294,  v2318,
           v2341,
           v2363,
           v2384,
           v2404,
           v2423,
           v2441,
           v2458,
           v2474,
           v2489,
           v2503,
           v2516,
           v2528,
           v2539,
           v2549);
  uint64_t v508 = sub_DD714( v500,  v501,  v502,  v503,  v504,  v505,  v506,  v507,  v579,  v642,  v704,  v765,  v825,  v884,  v942,  v999,  v1055,  v1110,  v1164,  v1217,  v1269,  v1320,  v1370,  v1419,  v1467,  v1514,  v1560,  v1605,  v1649,  v1692,  v1734,  v1775,  v1815,  v1854,  v1892,  v1929,  v1965,  v2000,  v2034,  v2067,  v2099,  v2130,  v2160,  v2189,  v2217,  v2244,  v2270,  v2295,  v2319,
           v2342,
           v2364,
           v2385,
           v2405,
           v2424,
           v2442,
           v2459,
           v2475,
           v2490,
           v2504,
           v2517,
           v2529,
           v2540,
           v2550);
  sub_DD70C( v508,  v509,  v510,  v511,  v512,  v513,  v514,  v515,  v580,  v643,  v705,  v766,  v826,  v885,  v943,  v1000,  v1056,  v1111,  v1165,  v1218,  v1270,  v1321,  v1371,  v1420,  v1468,  v1515,  v1561,  v1606,  v1650,  v1693,  v1735,  v1776,  v1816,  v1855,  v1893,  v1930,  v1966,  v2001,  v2035,  v2068,  v2100,  v2131,  v2161,  v2190,  v2218,  v2245,  v2271,  v2296,  v2320,
    v2343,
    v2365,
    v2386,
    v2406,
    v2425,
    v2443,
    v2460,
    v2476,
    v2491,
    v2505,
    v2518,
    v2530,
    v2541,
    v2551);
  sub_DD704();
  sub_DD6FC();
  sub_DD6F4();
  sub_DD6EC();
  sub_DD6E4();
  sub_DD6DC();
  sub_DD6D4();
  sub_DD6CC();
  sub_DD6C4();
  sub_DD6BC();
  sub_DD6B4();
  sub_DD6AC();
  sub_DD6A4();
  sub_DD69C();
  sub_DD694();
  sub_DD68C();
  sub_DD684();
  sub_DD67C();
  sub_DD674();
  sub_DD66C();
  sub_DD664();
  sub_DD65C();
  sub_DD654();
  sub_DD64C();
  sub_DD644();
  sub_DD63C();
  sub_DD634();
  sub_DD62C();
  sub_DD624();
  sub_DD61C();
  sub_DD614();
  sub_DD60C();
  sub_DD604();
  sub_DD5FC();
  sub_DD5F4();
  sub_DD5EC();
  sub_DD5E4();
  sub_DD5DC();
  sub_DD5D4();
  sub_DD5CC();
  sub_DD5C4();
  sub_DD5BC();
  sub_DD5B4();
  sub_DD5AC();
  sub_DD5A4();
  sub_DD59C();
  sub_DD594();
  sub_DD58C();
  sub_DD584();
  sub_DD57C();
  sub_DD574();
  sub_DD56C();
  sub_DD564();
  sub_DD55C();
  sub_DD554();
  sub_DD54C();
  sub_DD544();
  sub_DD53C();
  sub_DD534();
  sub_DD52C();
  sub_DD524();
  sub_DD51C();
  sub_DD514();
  sub_DD50C();
  sub_DD504();
  sub_DD4FC();
  sub_DD4F4();
  sub_DD4EC();
  sub_DD4DC();
  sub_DD4E4();
  sub_DD868();
  sub_DD870();
  sub_36B88();
  sub_366E8();
  sub_3677C();
  sub_36588();
  sub_36624();
  sub_3661C();
  sub_36614();
  sub_3660C();
  sub_36604();
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  sub_366B8();
  sub_366B0();
  sub_366A8();
  sub_36814();
  uint64_t v516 = (uint64_t (*)(void))sub_DDBE4();
  return sub_36148(v516);
}

uint64_t sub_D5BAC()
{
  *(void *)(v0 + 28464) = v2;
  *(void *)(v0 + 28472) = v1;
  uint64_t v4 = sub_36900(v3);
  if (v1)
  {
    sub_367AC();
    uint64_t v5 = sub_36860();
    sub_36A94(v5, &qword_189D00);
  }

  else
  {
    sub_36A94(v4, &qword_189D00);
    sub_367AC();
  }

  sub_A964();
  return sub_363F8(v6, v7, v8);
}

uint64_t sub_D5C2C()
{
  uint64_t v3 = sub_DDFFC();
  sub_36C4C(v3, (uint64_t)PhoneRingsSnippet.body.getter);
  uint64_t v4 = sub_368F8();
  id v5 = sub_36F04(v4, "catId");
  sub_36EE4();
  sub_DDCE8();
  sub_DDD30();
  sub_DDB48(v2);
  sub_36590((_OWORD *)(v1 + 64));
  sub_36CEC(v1 + 296);
  v0[3560] = *(void *)(v1 + 336);
  v0[3561] = *(void *)(v1 + 344);
  sub_363E8();
  sub_36C5C();
  uint64_t v6 = (void *)sub_3709C();
  v0[3562] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_D5D10;
  uint64_t v7 = sub_DDD64();
  return sub_3619C(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_D5D10()
{
  uint64_t v1 = (void *)(v0 + 22608);
  sub_20264(*(void *)(v0 + 28496));
  sub_36BE0();
  sub_36EBC();
  sub_36B74(v1);
  sub_36E94();
  sub_A964();
  return sub_36348(v2, v3, v4);
}

uint64_t sub_D5D78()
{
  if (*(void *)(v2 + 22752))
  {
    uint64_t v4 = *(void **)(v2 + 28464);
    uint64_t v2560 = *(void *)(v2 + 26224);
    uint64_t v5 = *(void *)(v2 + 26216);
    sub_20004((__int128 *)(v2 + 22728), v2 + 22768);
    sub_369CC();
    sub_36878(v2 + 22768);
    uint64_t v6 = sub_20308((uint64_t)&unk_17F8F8, 56LL);
    uint64_t v7 = sub_DDAC0(v6);
    *(void *)(v2 + 25904) = sub_DE268((uint64_t)v7, (uint64_t)&unk_18E9E0);
    sub_DE29C();

    sub_9BC44();
    uint64_t v8 = sub_DE028(v2560, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    sub_37458(v8, type metadata accessor for SnippetHeaderModel);
    sub_DE154(v9, &qword_189D00);
    sub_37450(v10, &qword_18B168);
    sub_3652C();
  }

  else
  {
    sub_DEA58();
    uint64_t v11 = *(void *)(v2 + 26760);
    sub_279E0(v12, &qword_18A448);
    sub_A5DC(v1, (uint64_t)v0);
    sub_36A9C();
    sub_368A0();
    os_log_type_t v13 = sub_AB70();
    if (sub_46614(v13))
    {
      uint64_t v14 = (_WORD *)sub_3635C();
      sub_DDA70(v14);
      sub_DDA34();
      sub_82234();
      sub_232EC(&dword_0, v0, (os_log_type_t)v11, "Couldn't create output, returning GenericErrorFlow", v3);
      sub_DDDAC();

      sub_DE60C();
    }

    else
    {
      swift_bridgeObjectRelease();

      sub_DE30C();
    }

    uint64_t v15 = *(void **)(v2 + 28464);
    uint64_t v16 = *(void *)(v2 + 26216);
    sub_36590((_OWORD *)(*(void *)(v2 + 25976) + 64LL));
    sub_DE348((void *)(v2 + 3168));
    sub_A178();
    sub_36C08();

    sub_36DD8();
    uint64_t v17 = sub_89E0C(*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8));
    sub_992F0(v17, type metadata accessor for SnippetHeaderModel);
    sub_72F7C(v18, &qword_189D00);
    sub_DE154(v19, &qword_18B168);
  }

  sub_DC6E0();
  sub_A8F4();
  sub_A85C();
  sub_A864();
  sub_A910();
  sub_A8EC();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  uint64_t v20 = sub_A78C();
  uint64_t v28 = sub_AAD8(v20, v21, v22, v23, v24, v25, v26, v27, v526, v589);
  uint64_t v36 = sub_A888(v28, v29, v30, v31, v32, v33, v34, v35, v527, v590, v652);
  uint64_t v44 = sub_A854(v36, v37, v38, v39, v40, v41, v42, v43, v528, v591, v653, v714);
  uint64_t v52 = sub_A84C(v44, v45, v46, v47, v48, v49, v50, v51, v529, v592, v654, v715, v775);
  uint64_t v60 = sub_A844(v52, v53, v54, v55, v56, v57, v58, v59, v530, v593, v655, v716, v776, v835);
  uint64_t v68 = sub_A83C(v60, v61, v62, v63, v64, v65, v66, v67, v531, v594, v656, v717, v777, v836, v894);
  uint64_t v76 = sub_A95C(v68, v69, v70, v71, v72, v73, v74, v75, v532, v595, v657, v718, v778, v837, v895, v952);
  uint64_t v84 = sub_A954(v76, v77, v78, v79, v80, v81, v82, v83, v533, v596, v658, v719, v779, v838, v896, v953, v1009);
  uint64_t v92 = sub_A938(v84, v85, v86, v87, v88, v89, v90, v91, v534, v597, v659, v720, v780, v839, v897, v954, v1010, v1065);
  uint64_t v100 = sub_A930( v92,  v93,  v94,  v95,  v96,  v97,  v98,  v99,  v535,  v598,  v660,  v721,  v781,  v840,  v898,  v955,  v1011,  v1066,  v1120);
  uint64_t v108 = sub_A928( v100,  v101,  v102,  v103,  v104,  v105,  v106,  v107,  v536,  v599,  v661,  v722,  v782,  v841,  v899,  v956,  v1012,  v1067,  v1121,  v1174);
  uint64_t v116 = sub_A920( v108,  v109,  v110,  v111,  v112,  v113,  v114,  v115,  v537,  v600,  v662,  v723,  v783,  v842,  v900,  v957,  v1013,  v1068,  v1122,  v1175,  v1227);
  uint64_t v124 = sub_36374( v116,  v117,  v118,  v119,  v120,  v121,  v122,  v123,  v538,  v601,  v663,  v724,  v784,  v843,  v901,  v958,  v1014,  v1069,  v1123,  v1176,  v1228,  v1279);
  uint64_t v132 = sub_3636C( v124,  v125,  v126,  v127,  v128,  v129,  v130,  v131,  v539,  v602,  v664,  v725,  v785,  v844,  v902,  v959,  v1015,  v1070,  v1124,  v1177,  v1229,  v1280,  v1330);
  uint64_t v140 = sub_36364( v132,  v133,  v134,  v135,  v136,  v137,  v138,  v139,  v540,  v603,  v665,  v726,  v786,  v845,  v903,  v960,  v1016,  v1071,  v1125,  v1178,  v1230,  v1281,  v1331,  v1380);
  uint64_t v148 = sub_363F0( v140,  v141,  v142,  v143,  v144,  v145,  v146,  v147,  v541,  v604,  v666,  v727,  v787,  v846,  v904,  v961,  v1017,  v1072,  v1126,  v1179,  v1231,  v1282,  v1332,  v1381,  v1429);
  uint64_t v156 = sub_36430( v148,  v149,  v150,  v151,  v152,  v153,  v154,  v155,  v542,  v605,  v667,  v728,  v788,  v847,  v905,  v962,  v1018,  v1073,  v1127,  v1180,  v1232,  v1283,  v1333,  v1382,  v1430,  v1477);
  uint64_t v164 = sub_36428( v156,  v157,  v158,  v159,  v160,  v161,  v162,  v163,  v543,  v606,  v668,  v729,  v789,  v848,  v906,  v963,  v1019,  v1074,  v1128,  v1181,  v1233,  v1284,  v1334,  v1383,  v1431,  v1478,  v1524);
  uint64_t v172 = sub_36478( v164,  v165,  v166,  v167,  v168,  v169,  v170,  v171,  v544,  v607,  v669,  v730,  v790,  v849,  v907,  v964,  v1020,  v1075,  v1129,  v1182,  v1234,  v1285,  v1335,  v1384,  v1432,  v1479,  v1525,  v1570);
  uint64_t v180 = sub_36524( v172,  v173,  v174,  v175,  v176,  v177,  v178,  v179,  v545,  v608,  v670,  v731,  v791,  v850,  v908,  v965,  v1021,  v1076,  v1130,  v1183,  v1235,  v1286,  v1336,  v1385,  v1433,  v1480,  v1526,  v1571,  v1615);
  uint64_t v188 = sub_3651C( v180,  v181,  v182,  v183,  v184,  v185,  v186,  v187,  v546,  v609,  v671,  v732,  v792,  v851,  v909,  v966,  v1022,  v1077,  v1131,  v1184,  v1236,  v1287,  v1337,  v1386,  v1434,  v1481,  v1527,  v1572,  v1616,  v1659);
  uint64_t v196 = sub_36514( v188,  v189,  v190,  v191,  v192,  v193,  v194,  v195,  v547,  v610,  v672,  v733,  v793,  v852,  v910,  v967,  v1023,  v1078,  v1132,  v1185,  v1237,  v1288,  v1338,  v1387,  v1435,  v1482,  v1528,  v1573,  v1617,  v1660,  v1702);
  uint64_t v204 = sub_3650C( v196,  v197,  v198,  v199,  v200,  v201,  v202,  v203,  v548,  v611,  v673,  v734,  v794,  v853,  v911,  v968,  v1024,  v1079,  v1133,  v1186,  v1238,  v1289,  v1339,  v1388,  v1436,  v1483,  v1529,  v1574,  v1618,  v1661,  v1703,  v1744);
  uint64_t v212 = sub_36504( v204,  v205,  v206,  v207,  v208,  v209,  v210,  v211,  v549,  v612,  v674,  v735,  v795,  v854,  v912,  v969,  v1025,  v1080,  v1134,  v1187,  v1239,  v1290,  v1340,  v1389,  v1437,  v1484,  v1530,  v1575,  v1619,  v1662,  v1704,  v1745,  v1785);
  uint64_t v220 = sub_364FC( v212,  v213,  v214,  v215,  v216,  v217,  v218,  v219,  v550,  v613,  v675,  v736,  v796,  v855,  v913,  v970,  v1026,  v1081,  v1135,  v1188,  v1240,  v1291,  v1341,  v1390,  v1438,  v1485,  v1531,  v1576,  v1620,  v1663,  v1705,  v1746,  v1786,  v1825);
  uint64_t v228 = sub_364F4( v220,  v221,  v222,  v223,  v224,  v225,  v226,  v227,  v551,  v614,  v676,  v737,  v797,  v856,  v914,  v971,  v1027,  v1082,  v1136,  v1189,  v1241,  v1292,  v1342,  v1391,  v1439,  v1486,  v1532,  v1577,  v1621,  v1664,  v1706,  v1747,  v1787,  v1826,  v1864);
  uint64_t v236 = sub_364EC( v228,  v229,  v230,  v231,  v232,  v233,  v234,  v235,  v552,  v615,  v677,  v738,  v798,  v857,  v915,  v972,  v1028,  v1083,  v1137,  v1190,  v1242,  v1293,  v1343,  v1392,  v1440,  v1487,  v1533,  v1578,  v1622,  v1665,  v1707,  v1748,  v1788,  v1827,  v1865,  v1902);
  uint64_t v244 = sub_364E4( v236,  v237,  v238,  v239,  v240,  v241,  v242,  v243,  v553,  v616,  v678,  v739,  v799,  v858,  v916,  v973,  v1029,  v1084,  v1138,  v1191,  v1243,  v1294,  v1344,  v1393,  v1441,  v1488,  v1534,  v1579,  v1623,  v1666,  v1708,  v1749,  v1789,  v1828,  v1866,  v1903,  v1939);
  uint64_t v252 = sub_364DC( v244,  v245,  v246,  v247,  v248,  v249,  v250,  v251,  v554,  v617,  v679,  v740,  v800,  v859,  v917,  v974,  v1030,  v1085,  v1139,  v1192,  v1244,  v1295,  v1345,  v1394,  v1442,  v1489,  v1535,  v1580,  v1624,  v1667,  v1709,  v1750,  v1790,  v1829,  v1867,  v1904,  v1940,  v1975);
  uint64_t v260 = sub_364D4( v252,  v253,  v254,  v255,  v256,  v257,  v258,  v259,  v555,  v618,  v680,  v741,  v801,  v860,  v918,  v975,  v1031,  v1086,  v1140,  v1193,  v1245,  v1296,  v1346,  v1395,  v1443,  v1490,  v1536,  v1581,  v1625,  v1668,  v1710,  v1751,  v1791,  v1830,  v1868,  v1905,  v1941,  v1976,  v2010);
  uint64_t v268 = sub_366F8( v260,  v261,  v262,  v263,  v264,  v265,  v266,  v267,  v556,  v619,  v681,  v742,  v802,  v861,  v919,  v976,  v1032,  v1087,  v1141,  v1194,  v1246,  v1297,  v1347,  v1396,  v1444,  v1491,  v1537,  v1582,  v1626,  v1669,  v1711,  v1752,  v1792,  v1831,  v1869,  v1906,  v1942,  v1977,  v2011,  v2044);
  uint64_t v276 = sub_366F0( v268,  v269,  v270,  v271,  v272,  v273,  v274,  v275,  v557,  v620,  v682,  v743,  v803,  v862,  v920,  v977,  v1033,  v1088,  v1142,  v1195,  v1247,  v1298,  v1348,  v1397,  v1445,  v1492,  v1538,  v1583,  v1627,  v1670,  v1712,  v1753,  v1793,  v1832,  v1870,  v1907,  v1943,  v1978,  v2012,  v2045,  v2077);
  uint64_t v284 = sub_36B90( v276,  v277,  v278,  v279,  v280,  v281,  v282,  v283,  v558,  v621,  v683,  v744,  v804,  v863,  v921,  v978,  v1034,  v1089,  v1143,  v1196,  v1248,  v1299,  v1349,  v1398,  v1446,  v1493,  v1539,  v1584,  v1628,  v1671,  v1713,  v1754,  v1794,  v1833,  v1871,  v1908,  v1944,  v1979,  v2013,  v2046,  v2078,  v2109);
  uint64_t v292 = sub_36EF4( v284,  v285,  v286,  v287,  v288,  v289,  v290,  v291,  v559,  v622,  v684,  v745,  v805,  v864,  v922,  v979,  v1035,  v1090,  v1144,  v1197,  v1249,  v1300,  v1350,  v1399,  v1447,  v1494,  v1540,  v1585,  v1629,  v1672,  v1714,  v1755,  v1795,  v1834,  v1872,  v1909,  v1945,  v1980,  v2014,  v2047,  v2079,  v2110,  v2140);
  uint64_t v300 = sub_36EEC( v292,  v293,  v294,  v295,  v296,  v297,  v298,  v299,  v560,  v623,  v685,  v746,  v806,  v865,  v923,  v980,  v1036,  v1091,  v1145,  v1198,  v1250,  v1301,  v1351,  v1400,  v1448,  v1495,  v1541,  v1586,  v1630,  v1673,  v1715,  v1756,  v1796,  v1835,  v1873,  v1910,  v1946,  v1981,  v2015,  v2048,  v2080,  v2111,  v2141,  v2170);
  uint64_t v308 = sub_DD7E4( v300,  v301,  v302,  v303,  v304,  v305,  v306,  v307,  v561,  v624,  v686,  v747,  v807,  v866,  v924,  v981,  v1037,  v1092,  v1146,  v1199,  v1251,  v1302,  v1352,  v1401,  v1449,  v1496,  v1542,  v1587,  v1631,  v1674,  v1716,  v1757,  v1797,  v1836,  v1874,  v1911,  v1947,  v1982,  v2016,  v2049,  v2081,  v2112,  v2142,  v2171,  v2199);
  uint64_t v316 = sub_DD7DC( v308,  v309,  v310,  v311,  v312,  v313,  v314,  v315,  v562,  v625,  v687,  v748,  v808,  v867,  v925,  v982,  v1038,  v1093,  v1147,  v1200,  v1252,  v1303,  v1353,  v1402,  v1450,  v1497,  v1543,  v1588,  v1632,  v1675,  v1717,  v1758,  v1798,  v1837,  v1875,  v1912,  v1948,  v1983,  v2017,  v2050,  v2082,  v2113,  v2143,  v2172,  v2200,  v2227);
  uint64_t v324 = sub_DD7D4( v316,  v317,  v318,  v319,  v320,  v321,  v322,  v323,  v563,  v626,  v688,  v749,  v809,  v868,  v926,  v983,  v1039,  v1094,  v1148,  v1201,  v1253,  v1304,  v1354,  v1403,  v1451,  v1498,  v1544,  v1589,  v1633,  v1676,  v1718,  v1759,  v1799,  v1838,  v1876,  v1913,  v1949,  v1984,  v2018,  v2051,  v2083,  v2114,  v2144,  v2173,  v2201,  v2228,  v2254);
  uint64_t v332 = sub_DD7CC( v324,  v325,  v326,  v327,  v328,  v329,  v330,  v331,  v564,  v627,  v689,  v750,  v810,  v869,  v927,  v984,  v1040,  v1095,  v1149,  v1202,  v1254,  v1305,  v1355,  v1404,  v1452,  v1499,  v1545,  v1590,  v1634,  v1677,  v1719,  v1760,  v1800,  v1839,  v1877,  v1914,  v1950,  v1985,  v2019,  v2052,  v2084,  v2115,  v2145,  v2174,  v2202,  v2229,  v2255,  v2280);
  uint64_t v340 = sub_DD7C4( v332,  v333,  v334,  v335,  v336,  v337,  v338,  v339,  v565,  v628,  v690,  v751,  v811,  v870,  v928,  v985,  v1041,  v1096,  v1150,  v1203,  v1255,  v1306,  v1356,  v1405,  v1453,  v1500,  v1546,  v1591,  v1635,  v1678,  v1720,  v1761,  v1801,  v1840,  v1878,  v1915,  v1951,  v1986,  v2020,  v2053,  v2085,  v2116,  v2146,  v2175,  v2203,  v2230,  v2256,  v2281,  v2305);
  uint64_t v348 = sub_DD7BC( v340,  v341,  v342,  v343,  v344,  v345,  v346,  v347,  v566,  v629,  v691,  v752,  v812,  v871,  v929,  v986,  v1042,  v1097,  v1151,  v1204,  v1256,  v1307,  v1357,  v1406,  v1454,  v1501,  v1547,  v1592,  v1636,  v1679,  v1721,  v1762,  v1802,  v1841,  v1879,  v1916,  v1952,  v1987,  v2021,  v2054,  v2086,  v2117,  v2147,  v2176,  v2204,  v2231,  v2257,  v2282,  v2306,
           v2329);
  uint64_t v356 = sub_DD7B4( v348,  v349,  v350,  v351,  v352,  v353,  v354,  v355,  v567,  v630,  v692,  v753,  v813,  v872,  v930,  v987,  v1043,  v1098,  v1152,  v1205,  v1257,  v1308,  v1358,  v1407,  v1455,  v1502,  v1548,  v1593,  v1637,  v1680,  v1722,  v1763,  v1803,  v1842,  v1880,  v1917,  v1953,  v1988,  v2022,  v2055,  v2087,  v2118,  v2148,  v2177,  v2205,  v2232,  v2258,  v2283,  v2307,
           v2330,
           v2352);
  uint64_t v364 = sub_DD7AC( v356,  v357,  v358,  v359,  v360,  v361,  v362,  v363,  v568,  v631,  v693,  v754,  v814,  v873,  v931,  v988,  v1044,  v1099,  v1153,  v1206,  v1258,  v1309,  v1359,  v1408,  v1456,  v1503,  v1549,  v1594,  v1638,  v1681,  v1723,  v1764,  v1804,  v1843,  v1881,  v1918,  v1954,  v1989,  v2023,  v2056,  v2088,  v2119,  v2149,  v2178,  v2206,  v2233,  v2259,  v2284,  v2308,
           v2331,
           v2353,
           v2374);
  uint64_t v372 = sub_DD7A4( v364,  v365,  v366,  v367,  v368,  v369,  v370,  v371,  v569,  v632,  v694,  v755,  v815,  v874,  v932,  v989,  v1045,  v1100,  v1154,  v1207,  v1259,  v1310,  v1360,  v1409,  v1457,  v1504,  v1550,  v1595,  v1639,  v1682,  v1724,  v1765,  v1805,  v1844,  v1882,  v1919,  v1955,  v1990,  v2024,  v2057,  v2089,  v2120,  v2150,  v2179,  v2207,  v2234,  v2260,  v2285,  v2309,
           v2332,
           v2354,
           v2375,
           v2395);
  uint64_t v380 = sub_DD79C( v372,  v373,  v374,  v375,  v376,  v377,  v378,  v379,  v570,  v633,  v695,  v756,  v816,  v875,  v933,  v990,  v1046,  v1101,  v1155,  v1208,  v1260,  v1311,  v1361,  v1410,  v1458,  v1505,  v1551,  v1596,  v1640,  v1683,  v1725,  v1766,  v1806,  v1845,  v1883,  v1920,  v1956,  v1991,  v2025,  v2058,  v2090,  v2121,  v2151,  v2180,  v2208,  v2235,  v2261,  v2286,  v2310,
           v2333,
           v2355,
           v2376,
           v2396,
           v2415);
  uint64_t v388 = sub_DD794( v380,  v381,  v382,  v383,  v384,  v385,  v386,  v387,  v571,  v634,  v696,  v757,  v817,  v876,  v934,  v991,  v1047,  v1102,  v1156,  v1209,  v1261,  v1312,  v1362,  v1411,  v1459,  v1506,  v1552,  v1597,  v1641,  v1684,  v1726,  v1767,  v1807,  v1846,  v1884,  v1921,  v1957,  v1992,  v2026,  v2059,  v2091,  v2122,  v2152,  v2181,  v2209,  v2236,  v2262,  v2287,  v2311,
           v2334,
           v2356,
           v2377,
           v2397,
           v2416,
           v2434);
  uint64_t v396 = sub_DD78C( v388,  v389,  v390,  v391,  v392,  v393,  v394,  v395,  v572,  v635,  v697,  v758,  v818,  v877,  v935,  v992,  v1048,  v1103,  v1157,  v1210,  v1262,  v1313,  v1363,  v1412,  v1460,  v1507,  v1553,  v1598,  v1642,  v1685,  v1727,  v1768,  v1808,  v1847,  v1885,  v1922,  v1958,  v1993,  v2027,  v2060,  v2092,  v2123,  v2153,  v2182,  v2210,  v2237,  v2263,  v2288,  v2312,
           v2335,
           v2357,
           v2378,
           v2398,
           v2417,
           v2435,
           v2452);
  uint64_t v404 = sub_DD784( v396,  v397,  v398,  v399,  v400,  v401,  v402,  v403,  v573,  v636,  v698,  v759,  v819,  v878,  v936,  v993,  v1049,  v1104,  v1158,  v1211,  v1263,  v1314,  v1364,  v1413,  v1461,  v1508,  v1554,  v1599,  v1643,  v1686,  v1728,  v1769,  v1809,  v1848,  v1886,  v1923,  v1959,  v1994,  v2028,  v2061,  v2093,  v2124,  v2154,  v2183,  v2211,  v2238,  v2264,  v2289,  v2313,
           v2336,
           v2358,
           v2379,
           v2399,
           v2418,
           v2436,
           v2453,
           v2469);
  uint64_t v412 = sub_DD77C( v404,  v405,  v406,  v407,  v408,  v409,  v410,  v411,  v574,  v637,  v699,  v760,  v820,  v879,  v937,  v994,  v1050,  v1105,  v1159,  v1212,  v1264,  v1315,  v1365,  v1414,  v1462,  v1509,  v1555,  v1600,  v1644,  v1687,  v1729,  v1770,  v1810,  v1849,  v1887,  v1924,  v1960,  v1995,  v2029,  v2062,  v2094,  v2125,  v2155,  v2184,  v2212,  v2239,  v2265,  v2290,  v2314,
           v2337,
           v2359,
           v2380,
           v2400,
           v2419,
           v2437,
           v2454,
           v2470,
           v2485);
  uint64_t v420 = sub_DD774( v412,  v413,  v414,  v415,  v416,  v417,  v418,  v419,  v575,  v638,  v700,  v761,  v821,  v880,  v938,  v995,  v1051,  v1106,  v1160,  v1213,  v1265,  v1316,  v1366,  v1415,  v1463,  v1510,  v1556,  v1601,  v1645,  v1688,  v1730,  v1771,  v1811,  v1850,  v1888,  v1925,  v1961,  v1996,  v2030,  v2063,  v2095,  v2126,  v2156,  v2185,  v2213,  v2240,  v2266,  v2291,  v2315,
           v2338,
           v2360,
           v2381,
           v2401,
           v2420,
           v2438,
           v2455,
           v2471,
           v2486,
           v2500);
  uint64_t v428 = sub_DD76C( v420,  v421,  v422,  v423,  v424,  v425,  v426,  v427,  v576,  v639,  v701,  v762,  v822,  v881,  v939,  v996,  v1052,  v1107,  v1161,  v1214,  v1266,  v1317,  v1367,  v1416,  v1464,  v1511,  v1557,  v1602,  v1646,  v1689,  v1731,  v1772,  v1812,  v1851,  v1889,  v1926,  v1962,  v1997,  v2031,  v2064,  v2096,  v2127,  v2157,  v2186,  v2214,  v2241,  v2267,  v2292,  v2316,
           v2339,
           v2361,
           v2382,
           v2402,
           v2421,
           v2439,
           v2456,
           v2472,
           v2487,
           v2501,
           v2514);
  uint64_t v436 = sub_DD764( v428,  v429,  v430,  v431,  v432,  v433,  v434,  v435,  v577,  v640,  v702,  v763,  v823,  v882,  v940,  v997,  v1053,  v1108,  v1162,  v1215,  v1267,  v1318,  v1368,  v1417,  v1465,  v1512,  v1558,  v1603,  v1647,  v1690,  v1732,  v1773,  v1813,  v1852,  v1890,  v1927,  v1963,  v1998,  v2032,  v2065,  v2097,  v2128,  v2158,  v2187,  v2215,  v2242,  v2268,  v2293,  v2317,
           v2340,
           v2362,
           v2383,
           v2403,
           v2422,
           v2440,
           v2457,
           v2473,
           v2488,
           v2502,
           v2515,
           v2527);
  uint64_t v444 = sub_DD75C( v436,  v437,  v438,  v439,  v440,  v441,  v442,  v443,  v578,  v641,  v703,  v764,  v824,  v883,  v941,  v998,  v1054,  v1109,  v1163,  v1216,  v1268,  v1319,  v1369,  v1418,  v1466,  v1513,  v1559,  v1604,  v1648,  v1691,  v1733,  v1774,  v1814,  v1853,  v1891,  v1928,  v1964,  v1999,  v2033,  v2066,  v2098,  v2129,  v2159,  v2188,  v2216,  v2243,  v2269,  v2294,  v2318,
           v2341,
           v2363,
           v2384,
           v2404,
           v2423,
           v2441,
           v2458,
           v2474,
           v2489,
           v2503,
           v2516,
           v2528,
           v2539);
  uint64_t v452 = sub_DD754( v444,  v445,  v446,  v447,  v448,  v449,  v450,  v451,  v579,  v642,  v704,  v765,  v825,  v884,  v942,  v999,  v1055,  v1110,  v1164,  v1217,  v1269,  v1320,  v1370,  v1419,  v1467,  v1514,  v1560,  v1605,  v1649,  v1692,  v1734,  v1775,  v1815,  v1854,  v1892,  v1929,  v1965,  v2000,  v2034,  v2067,  v2099,  v2130,  v2160,  v2189,  v2217,  v2244,  v2270,  v2295,  v2319,
           v2342,
           v2364,
           v2385,
           v2405,
           v2424,
           v2442,
           v2459,
           v2475,
           v2490,
           v2504,
           v2517,
           v2529,
           v2540,
           v2550);
  uint64_t v460 = sub_DD74C( v452,  v453,  v454,  v455,  v456,  v457,  v458,  v459,  v580,  v643,  v705,  v766,  v826,  v885,  v943,  v1000,  v1056,  v1111,  v1165,  v1218,  v1270,  v1321,  v1371,  v1420,  v1468,  v1515,  v1561,  v1606,  v1650,  v1693,  v1735,  v1776,  v1816,  v1855,  v1893,  v1930,  v1966,  v2001,  v2035,  v2068,  v2100,  v2131,  v2161,  v2190,  v2218,  v2245,  v2271,  v2296,  v2320,
           v2343,
           v2365,
           v2386,
           v2406,
           v2425,
           v2443,
           v2460,
           v2476,
           v2491,
           v2505,
           v2518,
           v2530,
           v2541,
           v2551);
  uint64_t v468 = sub_DD744( v460,  v461,  v462,  v463,  v464,  v465,  v466,  v467,  v581,  v644,  v706,  v767,  v827,  v886,  v944,  v1001,  v1057,  v1112,  v1166,  v1219,  v1271,  v1322,  v1372,  v1421,  v1469,  v1516,  v1562,  v1607,  v1651,  v1694,  v1736,  v1777,  v1817,  v1856,  v1894,  v1931,  v1967,  v2002,  v2036,  v2069,  v2101,  v2132,  v2162,  v2191,  v2219,  v2246,  v2272,  v2297,  v2321,
           v2344,
           v2366,
           v2387,
           v2407,
           v2426,
           v2444,
           v2461,
           v2477,
           v2492,
           v2506,
           v2519,
           v2531,
           v2542,
           v2552);
  uint64_t v476 = sub_DD73C( v468,  v469,  v470,  v471,  v472,  v473,  v474,  v475,  v582,  v645,  v707,  v768,  v828,  v887,  v945,  v1002,  v1058,  v1113,  v1167,  v1220,  v1272,  v1323,  v1373,  v1422,  v1470,  v1517,  v1563,  v1608,  v1652,  v1695,  v1737,  v1778,  v1818,  v1857,  v1895,  v1932,  v1968,  v2003,  v2037,  v2070,  v2102,  v2133,  v2163,  v2192,  v2220,  v2247,  v2273,  v2298,  v2322,
           v2345,
           v2367,
           v2388,
           v2408,
           v2427,
           v2445,
           v2462,
           v2478,
           v2493,
           v2507,
           v2520,
           v2532,
           v2543,
           v2553);
  uint64_t v484 = sub_DD734( v476,  v477,  v478,  v479,  v480,  v481,  v482,  v483,  v583,  v646,  v708,  v769,  v829,  v888,  v946,  v1003,  v1059,  v1114,  v1168,  v1221,  v1273,  v1324,  v1374,  v1423,  v1471,  v1518,  v1564,  v1609,  v1653,  v1696,  v1738,  v1779,  v1819,  v1858,  v1896,  v1933,  v1969,  v2004,  v2038,  v2071,  v2103,  v2134,  v2164,  v2193,  v2221,  v2248,  v2274,  v2299,  v2323,
           v2346,
           v2368,
           v2389,
           v2409,
           v2428,
           v2446,
           v2463,
           v2479,
           v2494,
           v2508,
           v2521,
           v2533,
           v2544,
           v2554);
  uint64_t v492 = sub_DD72C( v484,  v485,  v486,  v487,  v488,  v489,  v490,  v491,  v584,  v647,  v709,  v770,  v830,  v889,  v947,  v1004,  v1060,  v1115,  v1169,  v1222,  v1274,  v1325,  v1375,  v1424,  v1472,  v1519,  v1565,  v1610,  v1654,  v1697,  v1739,  v1780,  v1820,  v1859,  v1897,  v1934,  v1970,  v2005,  v2039,  v2072,  v2104,  v2135,  v2165,  v2194,  v2222,  v2249,  v2275,  v2300,  v2324,
           v2347,
           v2369,
           v2390,
           v2410,
           v2429,
           v2447,
           v2464,
           v2480,
           v2495,
           v2509,
           v2522,
           v2534,
           v2545,
           v2555);
  uint64_t v500 = sub_DD724( v492,  v493,  v494,  v495,  v496,  v497,  v498,  v499,  v585,  v648,  v710,  v771,  v831,  v890,  v948,  v1005,  v1061,  v1116,  v1170,  v1223,  v1275,  v1326,  v1376,  v1425,  v1473,  v1520,  v1566,  v1611,  v1655,  v1698,  v1740,  v1781,  v1821,  v1860,  v1898,  v1935,  v1971,  v2006,  v2040,  v2073,  v2105,  v2136,  v2166,  v2195,  v2223,  v2250,  v2276,  v2301,  v2325,
           v2348,
           v2370,
           v2391,
           v2411,
           v2430,
           v2448,
           v2465,
           v2481,
           v2496,
           v2510,
           v2523,
           v2535,
           v2546,
           v2556);
  uint64_t v508 = sub_DD71C( v500,  v501,  v502,  v503,  v504,  v505,  v506,  v507,  v586,  v649,  v711,  v772,  v832,  v891,  v949,  v1006,  v1062,  v1117,  v1171,  v1224,  v1276,  v1327,  v1377,  v1426,  v1474,  v1521,  v1567,  v1612,  v1656,  v1699,  v1741,  v1782,  v1822,  v1861,  v1899,  v1936,  v1972,  v2007,  v2041,  v2074,  v2106,  v2137,  v2167,  v2196,  v2224,  v2251,  v2277,  v2302,  v2326,
           v2349,
           v2371,
           v2392,
           v2412,
           v2431,
           v2449,
           v2466,
           v2482,
           v2497,
           v2511,
           v2524,
           v2536,
           v2547,
           v2557);
  uint64_t v516 = sub_DD714( v508,  v509,  v510,  v511,  v512,  v513,  v514,  v515,  v587,  v650,  v712,  v773,  v833,  v892,  v950,  v1007,  v1063,  v1118,  v1172,  v1225,  v1277,  v1328,  v1378,  v1427,  v1475,  v1522,  v1568,  v1613,  v1657,  v1700,  v1742,  v1783,  v1823,  v1862,  v1900,  v1937,  v1973,  v2008,  v2042,  v2075,  v2107,  v2138,  v2168,  v2197,  v2225,  v2252,  v2278,  v2303,  v2327,
           v2350,
           v2372,
           v2393,
           v2413,
           v2432,
           v2450,
           v2467,
           v2483,
           v2498,
           v2512,
           v2525,
           v2537,
           v2548,
           v2558);
  sub_DD70C( v516,  v517,  v518,  v519,  v520,  v521,  v522,  v523,  v588,  v651,  v713,  v774,  v834,  v893,  v951,  v1008,  v1064,  v1119,  v1173,  v1226,  v1278,  v1329,  v1379,  v1428,  v1476,  v1523,  v1569,  v1614,  v1658,  v1701,  v1743,  v1784,  v1824,  v1863,  v1901,  v1938,  v1974,  v2009,  v2043,  v2076,  v2108,  v2139,  v2169,  v2198,  v2226,  v2253,  v2279,  v2304,  v2328,
    v2351,
    v2373,
    v2394,
    v2414,
    v2433,
    v2451,
    v2468,
    v2484,
    v2499,
    v2513,
    v2526,
    v2538,
    v2549,
    v2559);
  sub_DD704();
  sub_DD6FC();
  sub_DD6F4();
  sub_DD6EC();
  sub_DD6E4();
  sub_DD6DC();
  sub_DD6D4();
  sub_DD6CC();
  sub_DD6C4();
  sub_DD6BC();
  sub_DD6B4();
  sub_DD6AC();
  sub_DD6A4();
  sub_DD69C();
  sub_DD694();
  sub_DD68C();
  sub_DD684();
  sub_DD67C();
  sub_DD674();
  sub_DD66C();
  sub_DD664();
  sub_DD65C();
  sub_DD654();
  sub_DD64C();
  sub_DD644();
  sub_DD63C();
  sub_DD634();
  sub_DD62C();
  sub_DD624();
  sub_DD61C();
  sub_DD614();
  sub_DD60C();
  sub_DD604();
  sub_DD5FC();
  sub_DD5F4();
  sub_DD5EC();
  sub_DD5E4();
  sub_DD5DC();
  sub_DD5D4();
  sub_DD5CC();
  sub_DD5C4();
  sub_DD5BC();
  sub_DD5B4();
  sub_DD5AC();
  sub_DD5A4();
  sub_DD59C();
  sub_DD594();
  sub_DD58C();
  sub_DD584();
  sub_DD57C();
  sub_DD574();
  sub_DD56C();
  sub_DD564();
  sub_DD55C();
  sub_DD554();
  sub_DD54C();
  sub_DD544();
  sub_DD53C();
  sub_DD534();
  sub_DD52C();
  sub_DD524();
  sub_DD51C();
  sub_DD514();
  sub_DD50C();
  sub_DD504();
  sub_DD4FC();
  sub_DD4F4();
  sub_DD4EC();
  sub_DD4DC();
  sub_DD4E4();
  sub_DD868();
  sub_DD870();
  sub_DDA48();
  sub_DDA58();
  sub_DDE30();
  sub_DDE28();
  sub_36B88();
  sub_366E8();
  sub_3677C();
  sub_36588();
  sub_36624();
  sub_3661C();
  sub_36614();
  sub_3660C();
  sub_36604();
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  uint64_t v524 = (uint64_t (*)(void))sub_DE600();
  return sub_36148(v524);
}

uint64_t sub_D6254()
{
  os_log_type_t v4 = sub_AB70();
  if (sub_46614(v4))
  {
    uint64_t v5 = (_WORD *)sub_3635C();
    sub_36908(v5);
    sub_DD494();
    sub_DA1C();
    sub_232EC(&dword_0, v0, v1, "Couldn't create logMedConfirmationRejected_Dialog, returning GenericErrorFlow", v2);
    sub_37128();
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  sub_3747C();
  sub_DDC00();
  sub_DE704();
  sub_A178();
  sub_DE4C0();
  uint64_t v6 = sub_36784();
  sub_992F0((uint64_t)v6, type metadata accessor for SnippetHeaderModel);
  sub_73370(v7, &qword_189D00);
  sub_72F7C(v8, &qword_18B168);
  sub_DBE38();
  sub_A8F4();
  sub_A85C();
  sub_A864();
  sub_A910();
  sub_A8EC();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  uint64_t v9 = sub_A78C();
  uint64_t v17 = sub_AAD8(v9, v10, v11, v12, v13, v14, v15, v16, v515, v578);
  uint64_t v25 = sub_A888(v17, v18, v19, v20, v21, v22, v23, v24, v516, v579, v641);
  uint64_t v33 = sub_A854(v25, v26, v27, v28, v29, v30, v31, v32, v517, v580, v642, v703);
  uint64_t v41 = sub_A84C(v33, v34, v35, v36, v37, v38, v39, v40, v518, v581, v643, v704, v764);
  uint64_t v49 = sub_A844(v41, v42, v43, v44, v45, v46, v47, v48, v519, v582, v644, v705, v765, v824);
  uint64_t v57 = sub_A83C(v49, v50, v51, v52, v53, v54, v55, v56, v520, v583, v645, v706, v766, v825, v883);
  uint64_t v65 = sub_A95C(v57, v58, v59, v60, v61, v62, v63, v64, v521, v584, v646, v707, v767, v826, v884, v941);
  uint64_t v73 = sub_A954(v65, v66, v67, v68, v69, v70, v71, v72, v522, v585, v647, v708, v768, v827, v885, v942, v998);
  uint64_t v81 = sub_A938(v73, v74, v75, v76, v77, v78, v79, v80, v523, v586, v648, v709, v769, v828, v886, v943, v999, v1054);
  uint64_t v89 = sub_A930( v81,  v82,  v83,  v84,  v85,  v86,  v87,  v88,  v524,  v587,  v649,  v710,  v770,  v829,  v887,  v944,  v1000,  v1055,  v1109);
  uint64_t v97 = sub_A928( v89,  v90,  v91,  v92,  v93,  v94,  v95,  v96,  v525,  v588,  v650,  v711,  v771,  v830,  v888,  v945,  v1001,  v1056,  v1110,  v1163);
  uint64_t v105 = sub_A920( v97,  v98,  v99,  v100,  v101,  v102,  v103,  v104,  v526,  v589,  v651,  v712,  v772,  v831,  v889,  v946,  v1002,  v1057,  v1111,  v1164,  v1216);
  uint64_t v113 = sub_36374( v105,  v106,  v107,  v108,  v109,  v110,  v111,  v112,  v527,  v590,  v652,  v713,  v773,  v832,  v890,  v947,  v1003,  v1058,  v1112,  v1165,  v1217,  v1268);
  uint64_t v121 = sub_3636C( v113,  v114,  v115,  v116,  v117,  v118,  v119,  v120,  v528,  v591,  v653,  v714,  v774,  v833,  v891,  v948,  v1004,  v1059,  v1113,  v1166,  v1218,  v1269,  v1319);
  uint64_t v129 = sub_36364( v121,  v122,  v123,  v124,  v125,  v126,  v127,  v128,  v529,  v592,  v654,  v715,  v775,  v834,  v892,  v949,  v1005,  v1060,  v1114,  v1167,  v1219,  v1270,  v1320,  v1369);
  uint64_t v137 = sub_363F0( v129,  v130,  v131,  v132,  v133,  v134,  v135,  v136,  v530,  v593,  v655,  v716,  v776,  v835,  v893,  v950,  v1006,  v1061,  v1115,  v1168,  v1220,  v1271,  v1321,  v1370,  v1418);
  uint64_t v145 = sub_36430( v137,  v138,  v139,  v140,  v141,  v142,  v143,  v144,  v531,  v594,  v656,  v717,  v777,  v836,  v894,  v951,  v1007,  v1062,  v1116,  v1169,  v1221,  v1272,  v1322,  v1371,  v1419,  v1466);
  uint64_t v153 = sub_36428( v145,  v146,  v147,  v148,  v149,  v150,  v151,  v152,  v532,  v595,  v657,  v718,  v778,  v837,  v895,  v952,  v1008,  v1063,  v1117,  v1170,  v1222,  v1273,  v1323,  v1372,  v1420,  v1467,  v1513);
  uint64_t v161 = sub_36478( v153,  v154,  v155,  v156,  v157,  v158,  v159,  v160,  v533,  v596,  v658,  v719,  v779,  v838,  v896,  v953,  v1009,  v1064,  v1118,  v1171,  v1223,  v1274,  v1324,  v1373,  v1421,  v1468,  v1514,  v1559);
  uint64_t v169 = sub_36524( v161,  v162,  v163,  v164,  v165,  v166,  v167,  v168,  v534,  v597,  v659,  v720,  v780,  v839,  v897,  v954,  v1010,  v1065,  v1119,  v1172,  v1224,  v1275,  v1325,  v1374,  v1422,  v1469,  v1515,  v1560,  v1604);
  uint64_t v177 = sub_3651C( v169,  v170,  v171,  v172,  v173,  v174,  v175,  v176,  v535,  v598,  v660,  v721,  v781,  v840,  v898,  v955,  v1011,  v1066,  v1120,  v1173,  v1225,  v1276,  v1326,  v1375,  v1423,  v1470,  v1516,  v1561,  v1605,  v1648);
  uint64_t v185 = sub_36514( v177,  v178,  v179,  v180,  v181,  v182,  v183,  v184,  v536,  v599,  v661,  v722,  v782,  v841,  v899,  v956,  v1012,  v1067,  v1121,  v1174,  v1226,  v1277,  v1327,  v1376,  v1424,  v1471,  v1517,  v1562,  v1606,  v1649,  v1691);
  uint64_t v193 = sub_3650C( v185,  v186,  v187,  v188,  v189,  v190,  v191,  v192,  v537,  v600,  v662,  v723,  v783,  v842,  v900,  v957,  v1013,  v1068,  v1122,  v1175,  v1227,  v1278,  v1328,  v1377,  v1425,  v1472,  v1518,  v1563,  v1607,  v1650,  v1692,  v1733);
  uint64_t v201 = sub_36504( v193,  v194,  v195,  v196,  v197,  v198,  v199,  v200,  v538,  v601,  v663,  v724,  v784,  v843,  v901,  v958,  v1014,  v1069,  v1123,  v1176,  v1228,  v1279,  v1329,  v1378,  v1426,  v1473,  v1519,  v1564,  v1608,  v1651,  v1693,  v1734,  v1774);
  uint64_t v209 = sub_364FC( v201,  v202,  v203,  v204,  v205,  v206,  v207,  v208,  v539,  v602,  v664,  v725,  v785,  v844,  v902,  v959,  v1015,  v1070,  v1124,  v1177,  v1229,  v1280,  v1330,  v1379,  v1427,  v1474,  v1520,  v1565,  v1609,  v1652,  v1694,  v1735,  v1775,  v1814);
  uint64_t v217 = sub_364F4( v209,  v210,  v211,  v212,  v213,  v214,  v215,  v216,  v540,  v603,  v665,  v726,  v786,  v845,  v903,  v960,  v1016,  v1071,  v1125,  v1178,  v1230,  v1281,  v1331,  v1380,  v1428,  v1475,  v1521,  v1566,  v1610,  v1653,  v1695,  v1736,  v1776,  v1815,  v1853);
  uint64_t v225 = sub_364EC( v217,  v218,  v219,  v220,  v221,  v222,  v223,  v224,  v541,  v604,  v666,  v727,  v787,  v846,  v904,  v961,  v1017,  v1072,  v1126,  v1179,  v1231,  v1282,  v1332,  v1381,  v1429,  v1476,  v1522,  v1567,  v1611,  v1654,  v1696,  v1737,  v1777,  v1816,  v1854,  v1891);
  uint64_t v233 = sub_364E4( v225,  v226,  v227,  v228,  v229,  v230,  v231,  v232,  v542,  v605,  v667,  v728,  v788,  v847,  v905,  v962,  v1018,  v1073,  v1127,  v1180,  v1232,  v1283,  v1333,  v1382,  v1430,  v1477,  v1523,  v1568,  v1612,  v1655,  v1697,  v1738,  v1778,  v1817,  v1855,  v1892,  v1928);
  uint64_t v241 = sub_364DC( v233,  v234,  v235,  v236,  v237,  v238,  v239,  v240,  v543,  v606,  v668,  v729,  v789,  v848,  v906,  v963,  v1019,  v1074,  v1128,  v1181,  v1233,  v1284,  v1334,  v1383,  v1431,  v1478,  v1524,  v1569,  v1613,  v1656,  v1698,  v1739,  v1779,  v1818,  v1856,  v1893,  v1929,  v1964);
  uint64_t v249 = sub_364D4( v241,  v242,  v243,  v244,  v245,  v246,  v247,  v248,  v544,  v607,  v669,  v730,  v790,  v849,  v907,  v964,  v1020,  v1075,  v1129,  v1182,  v1234,  v1285,  v1335,  v1384,  v1432,  v1479,  v1525,  v1570,  v1614,  v1657,  v1699,  v1740,  v1780,  v1819,  v1857,  v1894,  v1930,  v1965,  v1999);
  uint64_t v257 = sub_366F8( v249,  v250,  v251,  v252,  v253,  v254,  v255,  v256,  v545,  v608,  v670,  v731,  v791,  v850,  v908,  v965,  v1021,  v1076,  v1130,  v1183,  v1235,  v1286,  v1336,  v1385,  v1433,  v1480,  v1526,  v1571,  v1615,  v1658,  v1700,  v1741,  v1781,  v1820,  v1858,  v1895,  v1931,  v1966,  v2000,  v2033);
  uint64_t v265 = sub_366F0( v257,  v258,  v259,  v260,  v261,  v262,  v263,  v264,  v546,  v609,  v671,  v732,  v792,  v851,  v909,  v966,  v1022,  v1077,  v1131,  v1184,  v1236,  v1287,  v1337,  v1386,  v1434,  v1481,  v1527,  v1572,  v1616,  v1659,  v1701,  v1742,  v1782,  v1821,  v1859,  v1896,  v1932,  v1967,  v2001,  v2034,  v2066);
  uint64_t v273 = sub_36B90( v265,  v266,  v267,  v268,  v269,  v270,  v271,  v272,  v547,  v610,  v672,  v733,  v793,  v852,  v910,  v967,  v1023,  v1078,  v1132,  v1185,  v1237,  v1288,  v1338,  v1387,  v1435,  v1482,  v1528,  v1573,  v1617,  v1660,  v1702,  v1743,  v1783,  v1822,  v1860,  v1897,  v1933,  v1968,  v2002,  v2035,  v2067,  v2098);
  uint64_t v281 = sub_36EF4( v273,  v274,  v275,  v276,  v277,  v278,  v279,  v280,  v548,  v611,  v673,  v734,  v794,  v853,  v911,  v968,  v1024,  v1079,  v1133,  v1186,  v1238,  v1289,  v1339,  v1388,  v1436,  v1483,  v1529,  v1574,  v1618,  v1661,  v1703,  v1744,  v1784,  v1823,  v1861,  v1898,  v1934,  v1969,  v2003,  v2036,  v2068,  v2099,  v2129);
  uint64_t v289 = sub_36EEC( v281,  v282,  v283,  v284,  v285,  v286,  v287,  v288,  v549,  v612,  v674,  v735,  v795,  v854,  v912,  v969,  v1025,  v1080,  v1134,  v1187,  v1239,  v1290,  v1340,  v1389,  v1437,  v1484,  v1530,  v1575,  v1619,  v1662,  v1704,  v1745,  v1785,  v1824,  v1862,  v1899,  v1935,  v1970,  v2004,  v2037,  v2069,  v2100,  v2130,  v2159);
  uint64_t v297 = sub_DD7E4( v289,  v290,  v291,  v292,  v293,  v294,  v295,  v296,  v550,  v613,  v675,  v736,  v796,  v855,  v913,  v970,  v1026,  v1081,  v1135,  v1188,  v1240,  v1291,  v1341,  v1390,  v1438,  v1485,  v1531,  v1576,  v1620,  v1663,  v1705,  v1746,  v1786,  v1825,  v1863,  v1900,  v1936,  v1971,  v2005,  v2038,  v2070,  v2101,  v2131,  v2160,  v2188);
  uint64_t v305 = sub_DD7DC( v297,  v298,  v299,  v300,  v301,  v302,  v303,  v304,  v551,  v614,  v676,  v737,  v797,  v856,  v914,  v971,  v1027,  v1082,  v1136,  v1189,  v1241,  v1292,  v1342,  v1391,  v1439,  v1486,  v1532,  v1577,  v1621,  v1664,  v1706,  v1747,  v1787,  v1826,  v1864,  v1901,  v1937,  v1972,  v2006,  v2039,  v2071,  v2102,  v2132,  v2161,  v2189,  v2216);
  uint64_t v313 = sub_DD7D4( v305,  v306,  v307,  v308,  v309,  v310,  v311,  v312,  v552,  v615,  v677,  v738,  v798,  v857,  v915,  v972,  v1028,  v1083,  v1137,  v1190,  v1242,  v1293,  v1343,  v1392,  v1440,  v1487,  v1533,  v1578,  v1622,  v1665,  v1707,  v1748,  v1788,  v1827,  v1865,  v1902,  v1938,  v1973,  v2007,  v2040,  v2072,  v2103,  v2133,  v2162,  v2190,  v2217,  v2243);
  uint64_t v321 = sub_DD7CC( v313,  v314,  v315,  v316,  v317,  v318,  v319,  v320,  v553,  v616,  v678,  v739,  v799,  v858,  v916,  v973,  v1029,  v1084,  v1138,  v1191,  v1243,  v1294,  v1344,  v1393,  v1441,  v1488,  v1534,  v1579,  v1623,  v1666,  v1708,  v1749,  v1789,  v1828,  v1866,  v1903,  v1939,  v1974,  v2008,  v2041,  v2073,  v2104,  v2134,  v2163,  v2191,  v2218,  v2244,  v2269);
  uint64_t v329 = sub_DD7C4( v321,  v322,  v323,  v324,  v325,  v326,  v327,  v328,  v554,  v617,  v679,  v740,  v800,  v859,  v917,  v974,  v1030,  v1085,  v1139,  v1192,  v1244,  v1295,  v1345,  v1394,  v1442,  v1489,  v1535,  v1580,  v1624,  v1667,  v1709,  v1750,  v1790,  v1829,  v1867,  v1904,  v1940,  v1975,  v2009,  v2042,  v2074,  v2105,  v2135,  v2164,  v2192,  v2219,  v2245,  v2270,  v2294);
  uint64_t v337 = sub_DD7BC( v329,  v330,  v331,  v332,  v333,  v334,  v335,  v336,  v555,  v618,  v680,  v741,  v801,  v860,  v918,  v975,  v1031,  v1086,  v1140,  v1193,  v1245,  v1296,  v1346,  v1395,  v1443,  v1490,  v1536,  v1581,  v1625,  v1668,  v1710,  v1751,  v1791,  v1830,  v1868,  v1905,  v1941,  v1976,  v2010,  v2043,  v2075,  v2106,  v2136,  v2165,  v2193,  v2220,  v2246,  v2271,  v2295,
           v2318);
  uint64_t v345 = sub_DD7B4( v337,  v338,  v339,  v340,  v341,  v342,  v343,  v344,  v556,  v619,  v681,  v742,  v802,  v861,  v919,  v976,  v1032,  v1087,  v1141,  v1194,  v1246,  v1297,  v1347,  v1396,  v1444,  v1491,  v1537,  v1582,  v1626,  v1669,  v1711,  v1752,  v1792,  v1831,  v1869,  v1906,  v1942,  v1977,  v2011,  v2044,  v2076,  v2107,  v2137,  v2166,  v2194,  v2221,  v2247,  v2272,  v2296,
           v2319,
           v2341);
  uint64_t v353 = sub_DD7AC( v345,  v346,  v347,  v348,  v349,  v350,  v351,  v352,  v557,  v620,  v682,  v743,  v803,  v862,  v920,  v977,  v1033,  v1088,  v1142,  v1195,  v1247,  v1298,  v1348,  v1397,  v1445,  v1492,  v1538,  v1583,  v1627,  v1670,  v1712,  v1753,  v1793,  v1832,  v1870,  v1907,  v1943,  v1978,  v2012,  v2045,  v2077,  v2108,  v2138,  v2167,  v2195,  v2222,  v2248,  v2273,  v2297,
           v2320,
           v2342,
           v2363);
  uint64_t v361 = sub_DD7A4( v353,  v354,  v355,  v356,  v357,  v358,  v359,  v360,  v558,  v621,  v683,  v744,  v804,  v863,  v921,  v978,  v1034,  v1089,  v1143,  v1196,  v1248,  v1299,  v1349,  v1398,  v1446,  v1493,  v1539,  v1584,  v1628,  v1671,  v1713,  v1754,  v1794,  v1833,  v1871,  v1908,  v1944,  v1979,  v2013,  v2046,  v2078,  v2109,  v2139,  v2168,  v2196,  v2223,  v2249,  v2274,  v2298,
           v2321,
           v2343,
           v2364,
           v2384);
  uint64_t v369 = sub_DD79C( v361,  v362,  v363,  v364,  v365,  v366,  v367,  v368,  v559,  v622,  v684,  v745,  v805,  v864,  v922,  v979,  v1035,  v1090,  v1144,  v1197,  v1249,  v1300,  v1350,  v1399,  v1447,  v1494,  v1540,  v1585,  v1629,  v1672,  v1714,  v1755,  v1795,  v1834,  v1872,  v1909,  v1945,  v1980,  v2014,  v2047,  v2079,  v2110,  v2140,  v2169,  v2197,  v2224,  v2250,  v2275,  v2299,
           v2322,
           v2344,
           v2365,
           v2385,
           v2404);
  uint64_t v377 = sub_DD794( v369,  v370,  v371,  v372,  v373,  v374,  v375,  v376,  v560,  v623,  v685,  v746,  v806,  v865,  v923,  v980,  v1036,  v1091,  v1145,  v1198,  v1250,  v1301,  v1351,  v1400,  v1448,  v1495,  v1541,  v1586,  v1630,  v1673,  v1715,  v1756,  v1796,  v1835,  v1873,  v1910,  v1946,  v1981,  v2015,  v2048,  v2080,  v2111,  v2141,  v2170,  v2198,  v2225,  v2251,  v2276,  v2300,
           v2323,
           v2345,
           v2366,
           v2386,
           v2405,
           v2423);
  uint64_t v385 = sub_DD78C( v377,  v378,  v379,  v380,  v381,  v382,  v383,  v384,  v561,  v624,  v686,  v747,  v807,  v866,  v924,  v981,  v1037,  v1092,  v1146,  v1199,  v1251,  v1302,  v1352,  v1401,  v1449,  v1496,  v1542,  v1587,  v1631,  v1674,  v1716,  v1757,  v1797,  v1836,  v1874,  v1911,  v1947,  v1982,  v2016,  v2049,  v2081,  v2112,  v2142,  v2171,  v2199,  v2226,  v2252,  v2277,  v2301,
           v2324,
           v2346,
           v2367,
           v2387,
           v2406,
           v2424,
           v2441);
  uint64_t v393 = sub_DD784( v385,  v386,  v387,  v388,  v389,  v390,  v391,  v392,  v562,  v625,  v687,  v748,  v808,  v867,  v925,  v982,  v1038,  v1093,  v1147,  v1200,  v1252,  v1303,  v1353,  v1402,  v1450,  v1497,  v1543,  v1588,  v1632,  v1675,  v1717,  v1758,  v1798,  v1837,  v1875,  v1912,  v1948,  v1983,  v2017,  v2050,  v2082,  v2113,  v2143,  v2172,  v2200,  v2227,  v2253,  v2278,  v2302,
           v2325,
           v2347,
           v2368,
           v2388,
           v2407,
           v2425,
           v2442,
           v2458);
  uint64_t v401 = sub_DD77C( v393,  v394,  v395,  v396,  v397,  v398,  v399,  v400,  v563,  v626,  v688,  v749,  v809,  v868,  v926,  v983,  v1039,  v1094,  v1148,  v1201,  v1253,  v1304,  v1354,  v1403,  v1451,  v1498,  v1544,  v1589,  v1633,  v1676,  v1718,  v1759,  v1799,  v1838,  v1876,  v1913,  v1949,  v1984,  v2018,  v2051,  v2083,  v2114,  v2144,  v2173,  v2201,  v2228,  v2254,  v2279,  v2303,
           v2326,
           v2348,
           v2369,
           v2389,
           v2408,
           v2426,
           v2443,
           v2459,
           v2474);
  uint64_t v409 = sub_DD774( v401,  v402,  v403,  v404,  v405,  v406,  v407,  v408,  v564,  v627,  v689,  v750,  v810,  v869,  v927,  v984,  v1040,  v1095,  v1149,  v1202,  v1254,  v1305,  v1355,  v1404,  v1452,  v1499,  v1545,  v1590,  v1634,  v1677,  v1719,  v1760,  v1800,  v1839,  v1877,  v1914,  v1950,  v1985,  v2019,  v2052,  v2084,  v2115,  v2145,  v2174,  v2202,  v2229,  v2255,  v2280,  v2304,
           v2327,
           v2349,
           v2370,
           v2390,
           v2409,
           v2427,
           v2444,
           v2460,
           v2475,
           v2489);
  uint64_t v417 = sub_DD76C( v409,  v410,  v411,  v412,  v413,  v414,  v415,  v416,  v565,  v628,  v690,  v751,  v811,  v870,  v928,  v985,  v1041,  v1096,  v1150,  v1203,  v1255,  v1306,  v1356,  v1405,  v1453,  v1500,  v1546,  v1591,  v1635,  v1678,  v1720,  v1761,  v1801,  v1840,  v1878,  v1915,  v1951,  v1986,  v2020,  v2053,  v2085,  v2116,  v2146,  v2175,  v2203,  v2230,  v2256,  v2281,  v2305,
           v2328,
           v2350,
           v2371,
           v2391,
           v2410,
           v2428,
           v2445,
           v2461,
           v2476,
           v2490,
           v2503);
  uint64_t v425 = sub_DD764( v417,  v418,  v419,  v420,  v421,  v422,  v423,  v424,  v566,  v629,  v691,  v752,  v812,  v871,  v929,  v986,  v1042,  v1097,  v1151,  v1204,  v1256,  v1307,  v1357,  v1406,  v1454,  v1501,  v1547,  v1592,  v1636,  v1679,  v1721,  v1762,  v1802,  v1841,  v1879,  v1916,  v1952,  v1987,  v2021,  v2054,  v2086,  v2117,  v2147,  v2176,  v2204,  v2231,  v2257,  v2282,  v2306,
           v2329,
           v2351,
           v2372,
           v2392,
           v2411,
           v2429,
           v2446,
           v2462,
           v2477,
           v2491,
           v2504,
           v2516);
  uint64_t v433 = sub_DD75C( v425,  v426,  v427,  v428,  v429,  v430,  v431,  v432,  v567,  v630,  v692,  v753,  v813,  v872,  v930,  v987,  v1043,  v1098,  v1152,  v1205,  v1257,  v1308,  v1358,  v1407,  v1455,  v1502,  v1548,  v1593,  v1637,  v1680,  v1722,  v1763,  v1803,  v1842,  v1880,  v1917,  v1953,  v1988,  v2022,  v2055,  v2087,  v2118,  v2148,  v2177,  v2205,  v2232,  v2258,  v2283,  v2307,
           v2330,
           v2352,
           v2373,
           v2393,
           v2412,
           v2430,
           v2447,
           v2463,
           v2478,
           v2492,
           v2505,
           v2517,
           v2528);
  uint64_t v441 = sub_DD754( v433,  v434,  v435,  v436,  v437,  v438,  v439,  v440,  v568,  v631,  v693,  v754,  v814,  v873,  v931,  v988,  v1044,  v1099,  v1153,  v1206,  v1258,  v1309,  v1359,  v1408,  v1456,  v1503,  v1549,  v1594,  v1638,  v1681,  v1723,  v1764,  v1804,  v1843,  v1881,  v1918,  v1954,  v1989,  v2023,  v2056,  v2088,  v2119,  v2149,  v2178,  v2206,  v2233,  v2259,  v2284,  v2308,
           v2331,
           v2353,
           v2374,
           v2394,
           v2413,
           v2431,
           v2448,
           v2464,
           v2479,
           v2493,
           v2506,
           v2518,
           v2529,
           v2539);
  uint64_t v449 = sub_DD74C( v441,  v442,  v443,  v444,  v445,  v446,  v447,  v448,  v569,  v632,  v694,  v755,  v815,  v874,  v932,  v989,  v1045,  v1100,  v1154,  v1207,  v1259,  v1310,  v1360,  v1409,  v1457,  v1504,  v1550,  v1595,  v1639,  v1682,  v1724,  v1765,  v1805,  v1844,  v1882,  v1919,  v1955,  v1990,  v2024,  v2057,  v2089,  v2120,  v2150,  v2179,  v2207,  v2234,  v2260,  v2285,  v2309,
           v2332,
           v2354,
           v2375,
           v2395,
           v2414,
           v2432,
           v2449,
           v2465,
           v2480,
           v2494,
           v2507,
           v2519,
           v2530,
           v2540);
  uint64_t v457 = sub_DD744( v449,  v450,  v451,  v452,  v453,  v454,  v455,  v456,  v570,  v633,  v695,  v756,  v816,  v875,  v933,  v990,  v1046,  v1101,  v1155,  v1208,  v1260,  v1311,  v1361,  v1410,  v1458,  v1505,  v1551,  v1596,  v1640,  v1683,  v1725,  v1766,  v1806,  v1845,  v1883,  v1920,  v1956,  v1991,  v2025,  v2058,  v2090,  v2121,  v2151,  v2180,  v2208,  v2235,  v2261,  v2286,  v2310,
           v2333,
           v2355,
           v2376,
           v2396,
           v2415,
           v2433,
           v2450,
           v2466,
           v2481,
           v2495,
           v2508,
           v2520,
           v2531,
           v2541);
  uint64_t v465 = sub_DD73C( v457,  v458,  v459,  v460,  v461,  v462,  v463,  v464,  v571,  v634,  v696,  v757,  v817,  v876,  v934,  v991,  v1047,  v1102,  v1156,  v1209,  v1261,  v1312,  v1362,  v1411,  v1459,  v1506,  v1552,  v1597,  v1641,  v1684,  v1726,  v1767,  v1807,  v1846,  v1884,  v1921,  v1957,  v1992,  v2026,  v2059,  v2091,  v2122,  v2152,  v2181,  v2209,  v2236,  v2262,  v2287,  v2311,
           v2334,
           v2356,
           v2377,
           v2397,
           v2416,
           v2434,
           v2451,
           v2467,
           v2482,
           v2496,
           v2509,
           v2521,
           v2532,
           v2542);
  uint64_t v473 = sub_DD734( v465,  v466,  v467,  v468,  v469,  v470,  v471,  v472,  v572,  v635,  v697,  v758,  v818,  v877,  v935,  v992,  v1048,  v1103,  v1157,  v1210,  v1262,  v1313,  v1363,  v1412,  v1460,  v1507,  v1553,  v1598,  v1642,  v1685,  v1727,  v1768,  v1808,  v1847,  v1885,  v1922,  v1958,  v1993,  v2027,  v2060,  v2092,  v2123,  v2153,  v2182,  v2210,  v2237,  v2263,  v2288,  v2312,
           v2335,
           v2357,
           v2378,
           v2398,
           v2417,
           v2435,
           v2452,
           v2468,
           v2483,
           v2497,
           v2510,
           v2522,
           v2533,
           v2543);
  uint64_t v481 = sub_DD72C( v473,  v474,  v475,  v476,  v477,  v478,  v479,  v480,  v573,  v636,  v698,  v759,  v819,  v878,  v936,  v993,  v1049,  v1104,  v1158,  v1211,  v1263,  v1314,  v1364,  v1413,  v1461,  v1508,  v1554,  v1599,  v1643,  v1686,  v1728,  v1769,  v1809,  v1848,  v1886,  v1923,  v1959,  v1994,  v2028,  v2061,  v2093,  v2124,  v2154,  v2183,  v2211,  v2238,  v2264,  v2289,  v2313,
           v2336,
           v2358,
           v2379,
           v2399,
           v2418,
           v2436,
           v2453,
           v2469,
           v2484,
           v2498,
           v2511,
           v2523,
           v2534,
           v2544);
  uint64_t v489 = sub_DD724( v481,  v482,  v483,  v484,  v485,  v486,  v487,  v488,  v574,  v637,  v699,  v760,  v820,  v879,  v937,  v994,  v1050,  v1105,  v1159,  v1212,  v1264,  v1315,  v1365,  v1414,  v1462,  v1509,  v1555,  v1600,  v1644,  v1687,  v1729,  v1770,  v1810,  v1849,  v1887,  v1924,  v1960,  v1995,  v2029,  v2062,  v2094,  v2125,  v2155,  v2184,  v2212,  v2239,  v2265,  v2290,  v2314,
           v2337,
           v2359,
           v2380,
           v2400,
           v2419,
           v2437,
           v2454,
           v2470,
           v2485,
           v2499,
           v2512,
           v2524,
           v2535,
           v2545);
  uint64_t v497 = sub_DD71C( v489,  v490,  v491,  v492,  v493,  v494,  v495,  v496,  v575,  v638,  v700,  v761,  v821,  v880,  v938,  v995,  v1051,  v1106,  v1160,  v1213,  v1265,  v1316,  v1366,  v1415,  v1463,  v1510,  v1556,  v1601,  v1645,  v1688,  v1730,  v1771,  v1811,  v1850,  v1888,  v1925,  v1961,  v1996,  v2030,  v2063,  v2095,  v2126,  v2156,  v2185,  v2213,  v2240,  v2266,  v2291,  v2315,
           v2338,
           v2360,
           v2381,
           v2401,
           v2420,
           v2438,
           v2455,
           v2471,
           v2486,
           v2500,
           v2513,
           v2525,
           v2536,
           v2546);
  uint64_t v505 = sub_DD714( v497,  v498,  v499,  v500,  v501,  v502,  v503,  v504,  v576,  v639,  v701,  v762,  v822,  v881,  v939,  v996,  v1052,  v1107,  v1161,  v1214,  v1266,  v1317,  v1367,  v1416,  v1464,  v1511,  v1557,  v1602,  v1646,  v1689,  v1731,  v1772,  v1812,  v1851,  v1889,  v1926,  v1962,  v1997,  v2031,  v2064,  v2096,  v2127,  v2157,  v2186,  v2214,  v2241,  v2267,  v2292,  v2316,
           v2339,
           v2361,
           v2382,
           v2402,
           v2421,
           v2439,
           v2456,
           v2472,
           v2487,
           v2501,
           v2514,
           v2526,
           v2537,
           v2547);
  sub_DD70C( v505,  v506,  v507,  v508,  v509,  v510,  v511,  v512,  v577,  v640,  v702,  v763,  v823,  v882,  v940,  v997,  v1053,  v1108,  v1162,  v1215,  v1267,  v1318,  v1368,  v1417,  v1465,  v1512,  v1558,  v1603,  v1647,  v1690,  v1732,  v1773,  v1813,  v1852,  v1890,  v1927,  v1963,  v1998,  v2032,  v2065,  v2097,  v2128,  v2158,  v2187,  v2215,  v2242,  v2268,  v2293,  v2317,
    v2340,
    v2362,
    v2383,
    v2403,
    v2422,
    v2440,
    v2457,
    v2473,
    v2488,
    v2502,
    v2515,
    v2527,
    v2538,
    v2548);
  sub_DD704();
  sub_DD6FC();
  sub_DD6F4();
  sub_DD6EC();
  sub_DD6E4();
  sub_DD6DC();
  sub_DD6D4();
  sub_DD6CC();
  sub_DD6C4();
  sub_DD6BC();
  sub_DD6B4();
  sub_DD6AC();
  sub_DD6A4();
  sub_DD69C();
  sub_DD694();
  sub_DD68C();
  sub_DD684();
  sub_DD67C();
  sub_DD674();
  sub_DD66C();
  sub_DD664();
  sub_DD65C();
  sub_DD654();
  sub_DD64C();
  sub_DD644();
  sub_DD63C();
  sub_DD634();
  sub_DD62C();
  sub_DD624();
  sub_DD61C();
  sub_DD614();
  sub_DD60C();
  sub_DD604();
  sub_DD5FC();
  sub_DD5F4();
  sub_DD5EC();
  sub_DD5E4();
  sub_DD5DC();
  sub_DD5D4();
  sub_DD5CC();
  sub_DD5C4();
  sub_DD5BC();
  sub_DD5B4();
  sub_DD5AC();
  sub_DD5A4();
  sub_DD59C();
  sub_DD594();
  sub_DD58C();
  sub_DD584();
  sub_DD57C();
  sub_DD574();
  sub_DD56C();
  sub_DD564();
  sub_DD55C();
  sub_DD554();
  sub_DD54C();
  sub_DD544();
  sub_DD53C();
  sub_DD534();
  sub_DD52C();
  sub_DD524();
  sub_DD51C();
  sub_DD514();
  sub_DD50C();
  sub_DD504();
  sub_DD4FC();
  sub_DD4F4();
  sub_DD4EC();
  sub_DD4DC();
  sub_DD4E4();
  sub_DD868();
  sub_DD870();
  sub_36B88();
  sub_366E8();
  sub_3677C();
  sub_36588();
  sub_36624();
  sub_3661C();
  sub_36614();
  sub_3660C();
  sub_36604();
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  sub_366B8();
  sub_366B0();
  sub_366A8();
  sub_36814();
  uint64_t v513 = (uint64_t (*)(void))sub_DDBE4();
  return sub_36148(v513);
}

uint64_t sub_D65E0()
{
  os_log_type_t v6 = sub_A898();
  if (sub_46614(v6))
  {
    uint64_t v7 = (_WORD *)sub_3635C();
    sub_36908(v7);
    sub_DD494();
    sub_DA1C();
    sub_232EC(&dword_0, v0, v2, "Couldn't create logMedConfirmationRejected_Dialog, returning GenericErrorFlow", v3);
    sub_37128();
  }

  else
  {

    swift_bridgeObjectRelease();
  }

  sub_3747C();
  uint64_t v8 = *(void **)(v1 + 28136);
  sub_DD7EC();
  sub_DE1C4(v3);
  sub_A178();
  sub_DE2BC();

  sub_DA1C();
  sub_B25F0();

  uint64_t v9 = sub_DE9BC();
  sub_36A94((uint64_t)v9, &qword_189CF8);
  uint64_t v10 = sub_DE4FC();
  sub_DDC20(v10, type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters);
  sub_DDE0C(v11, type metadata accessor for SnippetHeaderModel);
  sub_DDA68(v12, &qword_189D00);
  sub_DDBDC(v13, &qword_18B168);
  sub_DBE38();
  sub_A8F4();
  sub_A85C();
  sub_A864();
  sub_A910();
  sub_A8EC();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  uint64_t v14 = sub_A78C();
  uint64_t v22 = sub_AAD8(v14, v15, v16, v17, v18, v19, v20, v21, v520, v583);
  uint64_t v30 = sub_A888(v22, v23, v24, v25, v26, v27, v28, v29, v521, v584, v646);
  uint64_t v38 = sub_A854(v30, v31, v32, v33, v34, v35, v36, v37, v522, v585, v647, v708);
  uint64_t v46 = sub_A84C(v38, v39, v40, v41, v42, v43, v44, v45, v523, v586, v648, v709, v769);
  uint64_t v54 = sub_A844(v46, v47, v48, v49, v50, v51, v52, v53, v524, v587, v649, v710, v770, v829);
  uint64_t v62 = sub_A83C(v54, v55, v56, v57, v58, v59, v60, v61, v525, v588, v650, v711, v771, v830, v888);
  uint64_t v70 = sub_A95C(v62, v63, v64, v65, v66, v67, v68, v69, v526, v589, v651, v712, v772, v831, v889, v946);
  uint64_t v78 = sub_A954(v70, v71, v72, v73, v74, v75, v76, v77, v527, v590, v652, v713, v773, v832, v890, v947, v1003);
  uint64_t v86 = sub_A938(v78, v79, v80, v81, v82, v83, v84, v85, v528, v591, v653, v714, v774, v833, v891, v948, v1004, v1059);
  uint64_t v94 = sub_A930( v86,  v87,  v88,  v89,  v90,  v91,  v92,  v93,  v529,  v592,  v654,  v715,  v775,  v834,  v892,  v949,  v1005,  v1060,  v1114);
  uint64_t v102 = sub_A928( v94,  v95,  v96,  v97,  v98,  v99,  v100,  v101,  v530,  v593,  v655,  v716,  v776,  v835,  v893,  v950,  v1006,  v1061,  v1115,  v1168);
  uint64_t v110 = sub_A920( v102,  v103,  v104,  v105,  v106,  v107,  v108,  v109,  v531,  v594,  v656,  v717,  v777,  v836,  v894,  v951,  v1007,  v1062,  v1116,  v1169,  v1221);
  uint64_t v118 = sub_36374( v110,  v111,  v112,  v113,  v114,  v115,  v116,  v117,  v532,  v595,  v657,  v718,  v778,  v837,  v895,  v952,  v1008,  v1063,  v1117,  v1170,  v1222,  v1273);
  uint64_t v126 = sub_3636C( v118,  v119,  v120,  v121,  v122,  v123,  v124,  v125,  v533,  v596,  v658,  v719,  v779,  v838,  v896,  v953,  v1009,  v1064,  v1118,  v1171,  v1223,  v1274,  v1324);
  uint64_t v134 = sub_36364( v126,  v127,  v128,  v129,  v130,  v131,  v132,  v133,  v534,  v597,  v659,  v720,  v780,  v839,  v897,  v954,  v1010,  v1065,  v1119,  v1172,  v1224,  v1275,  v1325,  v1374);
  uint64_t v142 = sub_363F0( v134,  v135,  v136,  v137,  v138,  v139,  v140,  v141,  v535,  v598,  v660,  v721,  v781,  v840,  v898,  v955,  v1011,  v1066,  v1120,  v1173,  v1225,  v1276,  v1326,  v1375,  v1423);
  uint64_t v150 = sub_36430( v142,  v143,  v144,  v145,  v146,  v147,  v148,  v149,  v536,  v599,  v661,  v722,  v782,  v841,  v899,  v956,  v1012,  v1067,  v1121,  v1174,  v1226,  v1277,  v1327,  v1376,  v1424,  v1471);
  uint64_t v158 = sub_36428( v150,  v151,  v152,  v153,  v154,  v155,  v156,  v157,  v537,  v600,  v662,  v723,  v783,  v842,  v900,  v957,  v1013,  v1068,  v1122,  v1175,  v1227,  v1278,  v1328,  v1377,  v1425,  v1472,  v1518);
  uint64_t v166 = sub_36478( v158,  v159,  v160,  v161,  v162,  v163,  v164,  v165,  v538,  v601,  v663,  v724,  v784,  v843,  v901,  v958,  v1014,  v1069,  v1123,  v1176,  v1228,  v1279,  v1329,  v1378,  v1426,  v1473,  v1519,  v1564);
  uint64_t v174 = sub_36524( v166,  v167,  v168,  v169,  v170,  v171,  v172,  v173,  v539,  v602,  v664,  v725,  v785,  v844,  v902,  v959,  v1015,  v1070,  v1124,  v1177,  v1229,  v1280,  v1330,  v1379,  v1427,  v1474,  v1520,  v1565,  v1609);
  uint64_t v182 = sub_3651C( v174,  v175,  v176,  v177,  v178,  v179,  v180,  v181,  v540,  v603,  v665,  v726,  v786,  v845,  v903,  v960,  v1016,  v1071,  v1125,  v1178,  v1230,  v1281,  v1331,  v1380,  v1428,  v1475,  v1521,  v1566,  v1610,  v1653);
  uint64_t v190 = sub_36514( v182,  v183,  v184,  v185,  v186,  v187,  v188,  v189,  v541,  v604,  v666,  v727,  v787,  v846,  v904,  v961,  v1017,  v1072,  v1126,  v1179,  v1231,  v1282,  v1332,  v1381,  v1429,  v1476,  v1522,  v1567,  v1611,  v1654,  v1696);
  uint64_t v198 = sub_3650C( v190,  v191,  v192,  v193,  v194,  v195,  v196,  v197,  v542,  v605,  v667,  v728,  v788,  v847,  v905,  v962,  v1018,  v1073,  v1127,  v1180,  v1232,  v1283,  v1333,  v1382,  v1430,  v1477,  v1523,  v1568,  v1612,  v1655,  v1697,  v1738);
  uint64_t v206 = sub_36504( v198,  v199,  v200,  v201,  v202,  v203,  v204,  v205,  v543,  v606,  v668,  v729,  v789,  v848,  v906,  v963,  v1019,  v1074,  v1128,  v1181,  v1233,  v1284,  v1334,  v1383,  v1431,  v1478,  v1524,  v1569,  v1613,  v1656,  v1698,  v1739,  v1779);
  uint64_t v214 = sub_364FC( v206,  v207,  v208,  v209,  v210,  v211,  v212,  v213,  v544,  v607,  v669,  v730,  v790,  v849,  v907,  v964,  v1020,  v1075,  v1129,  v1182,  v1234,  v1285,  v1335,  v1384,  v1432,  v1479,  v1525,  v1570,  v1614,  v1657,  v1699,  v1740,  v1780,  v1819);
  uint64_t v222 = sub_364F4( v214,  v215,  v216,  v217,  v218,  v219,  v220,  v221,  v545,  v608,  v670,  v731,  v791,  v850,  v908,  v965,  v1021,  v1076,  v1130,  v1183,  v1235,  v1286,  v1336,  v1385,  v1433,  v1480,  v1526,  v1571,  v1615,  v1658,  v1700,  v1741,  v1781,  v1820,  v1858);
  uint64_t v230 = sub_364EC( v222,  v223,  v224,  v225,  v226,  v227,  v228,  v229,  v546,  v609,  v671,  v732,  v792,  v851,  v909,  v966,  v1022,  v1077,  v1131,  v1184,  v1236,  v1287,  v1337,  v1386,  v1434,  v1481,  v1527,  v1572,  v1616,  v1659,  v1701,  v1742,  v1782,  v1821,  v1859,  v1896);
  uint64_t v238 = sub_364E4( v230,  v231,  v232,  v233,  v234,  v235,  v236,  v237,  v547,  v610,  v672,  v733,  v793,  v852,  v910,  v967,  v1023,  v1078,  v1132,  v1185,  v1237,  v1288,  v1338,  v1387,  v1435,  v1482,  v1528,  v1573,  v1617,  v1660,  v1702,  v1743,  v1783,  v1822,  v1860,  v1897,  v1933);
  uint64_t v246 = sub_364DC( v238,  v239,  v240,  v241,  v242,  v243,  v244,  v245,  v548,  v611,  v673,  v734,  v794,  v853,  v911,  v968,  v1024,  v1079,  v1133,  v1186,  v1238,  v1289,  v1339,  v1388,  v1436,  v1483,  v1529,  v1574,  v1618,  v1661,  v1703,  v1744,  v1784,  v1823,  v1861,  v1898,  v1934,  v1969);
  uint64_t v254 = sub_364D4( v246,  v247,  v248,  v249,  v250,  v251,  v252,  v253,  v549,  v612,  v674,  v735,  v795,  v854,  v912,  v969,  v1025,  v1080,  v1134,  v1187,  v1239,  v1290,  v1340,  v1389,  v1437,  v1484,  v1530,  v1575,  v1619,  v1662,  v1704,  v1745,  v1785,  v1824,  v1862,  v1899,  v1935,  v1970,  v2004);
  uint64_t v262 = sub_366F8( v254,  v255,  v256,  v257,  v258,  v259,  v260,  v261,  v550,  v613,  v675,  v736,  v796,  v855,  v913,  v970,  v1026,  v1081,  v1135,  v1188,  v1240,  v1291,  v1341,  v1390,  v1438,  v1485,  v1531,  v1576,  v1620,  v1663,  v1705,  v1746,  v1786,  v1825,  v1863,  v1900,  v1936,  v1971,  v2005,  v2038);
  uint64_t v270 = sub_366F0( v262,  v263,  v264,  v265,  v266,  v267,  v268,  v269,  v551,  v614,  v676,  v737,  v797,  v856,  v914,  v971,  v1027,  v1082,  v1136,  v1189,  v1241,  v1292,  v1342,  v1391,  v1439,  v1486,  v1532,  v1577,  v1621,  v1664,  v1706,  v1747,  v1787,  v1826,  v1864,  v1901,  v1937,  v1972,  v2006,  v2039,  v2071);
  uint64_t v278 = sub_36B90( v270,  v271,  v272,  v273,  v274,  v275,  v276,  v277,  v552,  v615,  v677,  v738,  v798,  v857,  v915,  v972,  v1028,  v1083,  v1137,  v1190,  v1242,  v1293,  v1343,  v1392,  v1440,  v1487,  v1533,  v1578,  v1622,  v1665,  v1707,  v1748,  v1788,  v1827,  v1865,  v1902,  v1938,  v1973,  v2007,  v2040,  v2072,  v2103);
  uint64_t v286 = sub_36EF4( v278,  v279,  v280,  v281,  v282,  v283,  v284,  v285,  v553,  v616,  v678,  v739,  v799,  v858,  v916,  v973,  v1029,  v1084,  v1138,  v1191,  v1243,  v1294,  v1344,  v1393,  v1441,  v1488,  v1534,  v1579,  v1623,  v1666,  v1708,  v1749,  v1789,  v1828,  v1866,  v1903,  v1939,  v1974,  v2008,  v2041,  v2073,  v2104,  v2134);
  uint64_t v294 = sub_36EEC( v286,  v287,  v288,  v289,  v290,  v291,  v292,  v293,  v554,  v617,  v679,  v740,  v800,  v859,  v917,  v974,  v1030,  v1085,  v1139,  v1192,  v1244,  v1295,  v1345,  v1394,  v1442,  v1489,  v1535,  v1580,  v1624,  v1667,  v1709,  v1750,  v1790,  v1829,  v1867,  v1904,  v1940,  v1975,  v2009,  v2042,  v2074,  v2105,  v2135,  v2164);
  uint64_t v302 = sub_DD7E4( v294,  v295,  v296,  v297,  v298,  v299,  v300,  v301,  v555,  v618,  v680,  v741,  v801,  v860,  v918,  v975,  v1031,  v1086,  v1140,  v1193,  v1245,  v1296,  v1346,  v1395,  v1443,  v1490,  v1536,  v1581,  v1625,  v1668,  v1710,  v1751,  v1791,  v1830,  v1868,  v1905,  v1941,  v1976,  v2010,  v2043,  v2075,  v2106,  v2136,  v2165,  v2193);
  uint64_t v310 = sub_DD7DC( v302,  v303,  v304,  v305,  v306,  v307,  v308,  v309,  v556,  v619,  v681,  v742,  v802,  v861,  v919,  v976,  v1032,  v1087,  v1141,  v1194,  v1246,  v1297,  v1347,  v1396,  v1444,  v1491,  v1537,  v1582,  v1626,  v1669,  v1711,  v1752,  v1792,  v1831,  v1869,  v1906,  v1942,  v1977,  v2011,  v2044,  v2076,  v2107,  v2137,  v2166,  v2194,  v2221);
  uint64_t v318 = sub_DD7D4( v310,  v311,  v312,  v313,  v314,  v315,  v316,  v317,  v557,  v620,  v682,  v743,  v803,  v862,  v920,  v977,  v1033,  v1088,  v1142,  v1195,  v1247,  v1298,  v1348,  v1397,  v1445,  v1492,  v1538,  v1583,  v1627,  v1670,  v1712,  v1753,  v1793,  v1832,  v1870,  v1907,  v1943,  v1978,  v2012,  v2045,  v2077,  v2108,  v2138,  v2167,  v2195,  v2222,  v2248);
  uint64_t v326 = sub_DD7CC( v318,  v319,  v320,  v321,  v322,  v323,  v324,  v325,  v558,  v621,  v683,  v744,  v804,  v863,  v921,  v978,  v1034,  v1089,  v1143,  v1196,  v1248,  v1299,  v1349,  v1398,  v1446,  v1493,  v1539,  v1584,  v1628,  v1671,  v1713,  v1754,  v1794,  v1833,  v1871,  v1908,  v1944,  v1979,  v2013,  v2046,  v2078,  v2109,  v2139,  v2168,  v2196,  v2223,  v2249,  v2274);
  uint64_t v334 = sub_DD7C4( v326,  v327,  v328,  v329,  v330,  v331,  v332,  v333,  v559,  v622,  v684,  v745,  v805,  v864,  v922,  v979,  v1035,  v1090,  v1144,  v1197,  v1249,  v1300,  v1350,  v1399,  v1447,  v1494,  v1540,  v1585,  v1629,  v1672,  v1714,  v1755,  v1795,  v1834,  v1872,  v1909,  v1945,  v1980,  v2014,  v2047,  v2079,  v2110,  v2140,  v2169,  v2197,  v2224,  v2250,  v2275,  v2299);
  uint64_t v342 = sub_DD7BC( v334,  v335,  v336,  v337,  v338,  v339,  v340,  v341,  v560,  v623,  v685,  v746,  v806,  v865,  v923,  v980,  v1036,  v1091,  v1145,  v1198,  v1250,  v1301,  v1351,  v1400,  v1448,  v1495,  v1541,  v1586,  v1630,  v1673,  v1715,  v1756,  v1796,  v1835,  v1873,  v1910,  v1946,  v1981,  v2015,  v2048,  v2080,  v2111,  v2141,  v2170,  v2198,  v2225,  v2251,  v2276,  v2300,
           v2323);
  uint64_t v350 = sub_DD7B4( v342,  v343,  v344,  v345,  v346,  v347,  v348,  v349,  v561,  v624,  v686,  v747,  v807,  v866,  v924,  v981,  v1037,  v1092,  v1146,  v1199,  v1251,  v1302,  v1352,  v1401,  v1449,  v1496,  v1542,  v1587,  v1631,  v1674,  v1716,  v1757,  v1797,  v1836,  v1874,  v1911,  v1947,  v1982,  v2016,  v2049,  v2081,  v2112,  v2142,  v2171,  v2199,  v2226,  v2252,  v2277,  v2301,
           v2324,
           v2346);
  uint64_t v358 = sub_DD7AC( v350,  v351,  v352,  v353,  v354,  v355,  v356,  v357,  v562,  v625,  v687,  v748,  v808,  v867,  v925,  v982,  v1038,  v1093,  v1147,  v1200,  v1252,  v1303,  v1353,  v1402,  v1450,  v1497,  v1543,  v1588,  v1632,  v1675,  v1717,  v1758,  v1798,  v1837,  v1875,  v1912,  v1948,  v1983,  v2017,  v2050,  v2082,  v2113,  v2143,  v2172,  v2200,  v2227,  v2253,  v2278,  v2302,
           v2325,
           v2347,
           v2368);
  uint64_t v366 = sub_DD7A4( v358,  v359,  v360,  v361,  v362,  v363,  v364,  v365,  v563,  v626,  v688,  v749,  v809,  v868,  v926,  v983,  v1039,  v1094,  v1148,  v1201,  v1253,  v1304,  v1354,  v1403,  v1451,  v1498,  v1544,  v1589,  v1633,  v1676,  v1718,  v1759,  v1799,  v1838,  v1876,  v1913,  v1949,  v1984,  v2018,  v2051,  v2083,  v2114,  v2144,  v2173,  v2201,  v2228,  v2254,  v2279,  v2303,
           v2326,
           v2348,
           v2369,
           v2389);
  uint64_t v374 = sub_DD79C( v366,  v367,  v368,  v369,  v370,  v371,  v372,  v373,  v564,  v627,  v689,  v750,  v810,  v869,  v927,  v984,  v1040,  v1095,  v1149,  v1202,  v1254,  v1305,  v1355,  v1404,  v1452,  v1499,  v1545,  v1590,  v1634,  v1677,  v1719,  v1760,  v1800,  v1839,  v1877,  v1914,  v1950,  v1985,  v2019,  v2052,  v2084,  v2115,  v2145,  v2174,  v2202,  v2229,  v2255,  v2280,  v2304,
           v2327,
           v2349,
           v2370,
           v2390,
           v2409);
  uint64_t v382 = sub_DD794( v374,  v375,  v376,  v377,  v378,  v379,  v380,  v381,  v565,  v628,  v690,  v751,  v811,  v870,  v928,  v985,  v1041,  v1096,  v1150,  v1203,  v1255,  v1306,  v1356,  v1405,  v1453,  v1500,  v1546,  v1591,  v1635,  v1678,  v1720,  v1761,  v1801,  v1840,  v1878,  v1915,  v1951,  v1986,  v2020,  v2053,  v2085,  v2116,  v2146,  v2175,  v2203,  v2230,  v2256,  v2281,  v2305,
           v2328,
           v2350,
           v2371,
           v2391,
           v2410,
           v2428);
  uint64_t v390 = sub_DD78C( v382,  v383,  v384,  v385,  v386,  v387,  v388,  v389,  v566,  v629,  v691,  v752,  v812,  v871,  v929,  v986,  v1042,  v1097,  v1151,  v1204,  v1256,  v1307,  v1357,  v1406,  v1454,  v1501,  v1547,  v1592,  v1636,  v1679,  v1721,  v1762,  v1802,  v1841,  v1879,  v1916,  v1952,  v1987,  v2021,  v2054,  v2086,  v2117,  v2147,  v2176,  v2204,  v2231,  v2257,  v2282,  v2306,
           v2329,
           v2351,
           v2372,
           v2392,
           v2411,
           v2429,
           v2446);
  uint64_t v398 = sub_DD784( v390,  v391,  v392,  v393,  v394,  v395,  v396,  v397,  v567,  v630,  v692,  v753,  v813,  v872,  v930,  v987,  v1043,  v1098,  v1152,  v1205,  v1257,  v1308,  v1358,  v1407,  v1455,  v1502,  v1548,  v1593,  v1637,  v1680,  v1722,  v1763,  v1803,  v1842,  v1880,  v1917,  v1953,  v1988,  v2022,  v2055,  v2087,  v2118,  v2148,  v2177,  v2205,  v2232,  v2258,  v2283,  v2307,
           v2330,
           v2352,
           v2373,
           v2393,
           v2412,
           v2430,
           v2447,
           v2463);
  uint64_t v406 = sub_DD77C( v398,  v399,  v400,  v401,  v402,  v403,  v404,  v405,  v568,  v631,  v693,  v754,  v814,  v873,  v931,  v988,  v1044,  v1099,  v1153,  v1206,  v1258,  v1309,  v1359,  v1408,  v1456,  v1503,  v1549,  v1594,  v1638,  v1681,  v1723,  v1764,  v1804,  v1843,  v1881,  v1918,  v1954,  v1989,  v2023,  v2056,  v2088,  v2119,  v2149,  v2178,  v2206,  v2233,  v2259,  v2284,  v2308,
           v2331,
           v2353,
           v2374,
           v2394,
           v2413,
           v2431,
           v2448,
           v2464,
           v2479);
  uint64_t v414 = sub_DD774( v406,  v407,  v408,  v409,  v410,  v411,  v412,  v413,  v569,  v632,  v694,  v755,  v815,  v874,  v932,  v989,  v1045,  v1100,  v1154,  v1207,  v1259,  v1310,  v1360,  v1409,  v1457,  v1504,  v1550,  v1595,  v1639,  v1682,  v1724,  v1765,  v1805,  v1844,  v1882,  v1919,  v1955,  v1990,  v2024,  v2057,  v2089,  v2120,  v2150,  v2179,  v2207,  v2234,  v2260,  v2285,  v2309,
           v2332,
           v2354,
           v2375,
           v2395,
           v2414,
           v2432,
           v2449,
           v2465,
           v2480,
           v2494);
  uint64_t v422 = sub_DD76C( v414,  v415,  v416,  v417,  v418,  v419,  v420,  v421,  v570,  v633,  v695,  v756,  v816,  v875,  v933,  v990,  v1046,  v1101,  v1155,  v1208,  v1260,  v1311,  v1361,  v1410,  v1458,  v1505,  v1551,  v1596,  v1640,  v1683,  v1725,  v1766,  v1806,  v1845,  v1883,  v1920,  v1956,  v1991,  v2025,  v2058,  v2090,  v2121,  v2151,  v2180,  v2208,  v2235,  v2261,  v2286,  v2310,
           v2333,
           v2355,
           v2376,
           v2396,
           v2415,
           v2433,
           v2450,
           v2466,
           v2481,
           v2495,
           v2508);
  uint64_t v430 = sub_DD764( v422,  v423,  v424,  v425,  v426,  v427,  v428,  v429,  v571,  v634,  v696,  v757,  v817,  v876,  v934,  v991,  v1047,  v1102,  v1156,  v1209,  v1261,  v1312,  v1362,  v1411,  v1459,  v1506,  v1552,  v1597,  v1641,  v1684,  v1726,  v1767,  v1807,  v1846,  v1884,  v1921,  v1957,  v1992,  v2026,  v2059,  v2091,  v2122,  v2152,  v2181,  v2209,  v2236,  v2262,  v2287,  v2311,
           v2334,
           v2356,
           v2377,
           v2397,
           v2416,
           v2434,
           v2451,
           v2467,
           v2482,
           v2496,
           v2509,
           v2521);
  uint64_t v438 = sub_DD75C( v430,  v431,  v432,  v433,  v434,  v435,  v436,  v437,  v572,  v635,  v697,  v758,  v818,  v877,  v935,  v992,  v1048,  v1103,  v1157,  v1210,  v1262,  v1313,  v1363,  v1412,  v1460,  v1507,  v1553,  v1598,  v1642,  v1685,  v1727,  v1768,  v1808,  v1847,  v1885,  v1922,  v1958,  v1993,  v2027,  v2060,  v2092,  v2123,  v2153,  v2182,  v2210,  v2237,  v2263,  v2288,  v2312,
           v2335,
           v2357,
           v2378,
           v2398,
           v2417,
           v2435,
           v2452,
           v2468,
           v2483,
           v2497,
           v2510,
           v2522,
           v2533);
  uint64_t v446 = sub_DD754( v438,  v439,  v440,  v441,  v442,  v443,  v444,  v445,  v573,  v636,  v698,  v759,  v819,  v878,  v936,  v993,  v1049,  v1104,  v1158,  v1211,  v1263,  v1314,  v1364,  v1413,  v1461,  v1508,  v1554,  v1599,  v1643,  v1686,  v1728,  v1769,  v1809,  v1848,  v1886,  v1923,  v1959,  v1994,  v2028,  v2061,  v2093,  v2124,  v2154,  v2183,  v2211,  v2238,  v2264,  v2289,  v2313,
           v2336,
           v2358,
           v2379,
           v2399,
           v2418,
           v2436,
           v2453,
           v2469,
           v2484,
           v2498,
           v2511,
           v2523,
           v2534,
           v2544);
  uint64_t v454 = sub_DD74C( v446,  v447,  v448,  v449,  v450,  v451,  v452,  v453,  v574,  v637,  v699,  v760,  v820,  v879,  v937,  v994,  v1050,  v1105,  v1159,  v1212,  v1264,  v1315,  v1365,  v1414,  v1462,  v1509,  v1555,  v1600,  v1644,  v1687,  v1729,  v1770,  v1810,  v1849,  v1887,  v1924,  v1960,  v1995,  v2029,  v2062,  v2094,  v2125,  v2155,  v2184,  v2212,  v2239,  v2265,  v2290,  v2314,
           v2337,
           v2359,
           v2380,
           v2400,
           v2419,
           v2437,
           v2454,
           v2470,
           v2485,
           v2499,
           v2512,
           v2524,
           v2535,
           v2545);
  uint64_t v462 = sub_DD744( v454,  v455,  v456,  v457,  v458,  v459,  v460,  v461,  v575,  v638,  v700,  v761,  v821,  v880,  v938,  v995,  v1051,  v1106,  v1160,  v1213,  v1265,  v1316,  v1366,  v1415,  v1463,  v1510,  v1556,  v1601,  v1645,  v1688,  v1730,  v1771,  v1811,  v1850,  v1888,  v1925,  v1961,  v1996,  v2030,  v2063,  v2095,  v2126,  v2156,  v2185,  v2213,  v2240,  v2266,  v2291,  v2315,
           v2338,
           v2360,
           v2381,
           v2401,
           v2420,
           v2438,
           v2455,
           v2471,
           v2486,
           v2500,
           v2513,
           v2525,
           v2536,
           v2546);
  uint64_t v470 = sub_DD73C( v462,  v463,  v464,  v465,  v466,  v467,  v468,  v469,  v576,  v639,  v701,  v762,  v822,  v881,  v939,  v996,  v1052,  v1107,  v1161,  v1214,  v1266,  v1317,  v1367,  v1416,  v1464,  v1511,  v1557,  v1602,  v1646,  v1689,  v1731,  v1772,  v1812,  v1851,  v1889,  v1926,  v1962,  v1997,  v2031,  v2064,  v2096,  v2127,  v2157,  v2186,  v2214,  v2241,  v2267,  v2292,  v2316,
           v2339,
           v2361,
           v2382,
           v2402,
           v2421,
           v2439,
           v2456,
           v2472,
           v2487,
           v2501,
           v2514,
           v2526,
           v2537,
           v2547);
  uint64_t v478 = sub_DD734( v470,  v471,  v472,  v473,  v474,  v475,  v476,  v477,  v577,  v640,  v702,  v763,  v823,  v882,  v940,  v997,  v1053,  v1108,  v1162,  v1215,  v1267,  v1318,  v1368,  v1417,  v1465,  v1512,  v1558,  v1603,  v1647,  v1690,  v1732,  v1773,  v1813,  v1852,  v1890,  v1927,  v1963,  v1998,  v2032,  v2065,  v2097,  v2128,  v2158,  v2187,  v2215,  v2242,  v2268,  v2293,  v2317,
           v2340,
           v2362,
           v2383,
           v2403,
           v2422,
           v2440,
           v2457,
           v2473,
           v2488,
           v2502,
           v2515,
           v2527,
           v2538,
           v2548);
  uint64_t v486 = sub_DD72C( v478,  v479,  v480,  v481,  v482,  v483,  v484,  v485,  v578,  v641,  v703,  v764,  v824,  v883,  v941,  v998,  v1054,  v1109,  v1163,  v1216,  v1268,  v1319,  v1369,  v1418,  v1466,  v1513,  v1559,  v1604,  v1648,  v1691,  v1733,  v1774,  v1814,  v1853,  v1891,  v1928,  v1964,  v1999,  v2033,  v2066,  v2098,  v2129,  v2159,  v2188,  v2216,  v2243,  v2269,  v2294,  v2318,
           v2341,
           v2363,
           v2384,
           v2404,
           v2423,
           v2441,
           v2458,
           v2474,
           v2489,
           v2503,
           v2516,
           v2528,
           v2539,
           v2549);
  uint64_t v494 = sub_DD724( v486,  v487,  v488,  v489,  v490,  v491,  v492,  v493,  v579,  v642,  v704,  v765,  v825,  v884,  v942,  v999,  v1055,  v1110,  v1164,  v1217,  v1269,  v1320,  v1370,  v1419,  v1467,  v1514,  v1560,  v1605,  v1649,  v1692,  v1734,  v1775,  v1815,  v1854,  v1892,  v1929,  v1965,  v2000,  v2034,  v2067,  v2099,  v2130,  v2160,  v2189,  v2217,  v2244,  v2270,  v2295,  v2319,
           v2342,
           v2364,
           v2385,
           v2405,
           v2424,
           v2442,
           v2459,
           v2475,
           v2490,
           v2504,
           v2517,
           v2529,
           v2540,
           v2550);
  uint64_t v502 = sub_DD71C( v494,  v495,  v496,  v497,  v498,  v499,  v500,  v501,  v580,  v643,  v705,  v766,  v826,  v885,  v943,  v1000,  v1056,  v1111,  v1165,  v1218,  v1270,  v1321,  v1371,  v1420,  v1468,  v1515,  v1561,  v1606,  v1650,  v1693,  v1735,  v1776,  v1816,  v1855,  v1893,  v1930,  v1966,  v2001,  v2035,  v2068,  v2100,  v2131,  v2161,  v2190,  v2218,  v2245,  v2271,  v2296,  v2320,
           v2343,
           v2365,
           v2386,
           v2406,
           v2425,
           v2443,
           v2460,
           v2476,
           v2491,
           v2505,
           v2518,
           v2530,
           v2541,
           v2551);
  uint64_t v510 = sub_DD714( v502,  v503,  v504,  v505,  v506,  v507,  v508,  v509,  v581,  v644,  v706,  v767,  v827,  v886,  v944,  v1001,  v1057,  v1112,  v1166,  v1219,  v1271,  v1322,  v1372,  v1421,  v1469,  v1516,  v1562,  v1607,  v1651,  v1694,  v1736,  v1777,  v1817,  v1856,  v1894,  v1931,  v1967,  v2002,  v2036,  v2069,  v2101,  v2132,  v2162,  v2191,  v2219,  v2246,  v2272,  v2297,  v2321,
           v2344,
           v2366,
           v2387,
           v2407,
           v2426,
           v2444,
           v2461,
           v2477,
           v2492,
           v2506,
           v2519,
           v2531,
           v2542,
           v2552);
  sub_DD70C( v510,  v511,  v512,  v513,  v514,  v515,  v516,  v517,  v582,  v645,  v707,  v768,  v828,  v887,  v945,  v1002,  v1058,  v1113,  v1167,  v1220,  v1272,  v1323,  v1373,  v1422,  v1470,  v1517,  v1563,  v1608,  v1652,  v1695,  v1737,  v1778,  v1818,  v1857,  v1895,  v1932,  v1968,  v2003,  v2037,  v2070,  v2102,  v2133,  v2163,  v2192,  v2220,  v2247,  v2273,  v2298,  v2322,
    v2345,
    v2367,
    v2388,
    v2408,
    v2427,
    v2445,
    v2462,
    v2478,
    v2493,
    v2507,
    v2520,
    v2532,
    v2543,
    v2553);
  sub_DD704();
  sub_DD6FC();
  sub_DD6F4();
  sub_DD6EC();
  sub_DD6E4();
  sub_DD6DC();
  sub_DD6D4();
  sub_DD6CC();
  sub_DD6C4();
  sub_DD6BC();
  sub_DD6B4();
  sub_DD6AC();
  sub_DD6A4();
  sub_DD69C();
  sub_DD694();
  sub_DD68C();
  sub_DD684();
  sub_DD67C();
  sub_DD674();
  sub_DD66C();
  sub_DD664();
  sub_DD65C();
  sub_DD654();
  sub_DD64C();
  sub_DD644();
  sub_DD63C();
  sub_DD634();
  sub_DD62C();
  sub_DD624();
  sub_DD61C();
  sub_DD614();
  sub_DD60C();
  sub_DD604();
  sub_DD5FC();
  sub_DD5F4();
  sub_DD5EC();
  sub_DD5E4();
  sub_DD5DC();
  sub_DD5D4();
  sub_DD5CC();
  sub_DD5C4();
  sub_DD5BC();
  sub_DD5B4();
  sub_DD5AC();
  sub_DD5A4();
  sub_DD59C();
  sub_DD594();
  sub_DD58C();
  sub_DD584();
  sub_DD57C();
  sub_DD574();
  sub_DD56C();
  sub_DD564();
  sub_DD55C();
  sub_DD554();
  sub_DD54C();
  sub_DD544();
  sub_DD53C();
  sub_DD534();
  sub_DD52C();
  sub_DD524();
  sub_DD51C();
  sub_DD514();
  sub_DD50C();
  sub_DD504();
  sub_DD4FC();
  sub_DD4F4();
  sub_DD4EC();
  sub_DD4DC();
  sub_DD4E4();
  sub_DD868();
  sub_DD870();
  sub_36B88();
  sub_366E8();
  sub_3677C();
  sub_36588();
  sub_36624();
  sub_3661C();
  sub_36614();
  sub_3660C();
  sub_36604();
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  sub_366B8();
  sub_366B0();
  sub_366A8();
  sub_36814();
  uint64_t v518 = (uint64_t (*)(void))sub_DDBE4();
  return sub_36148(v518);
}

id sub_D69A8(double a1)
{
  return [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1)) initWithDouble:a1];
}

void sub_D69DC(void *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6 = sub_494C(&qword_189D00);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v63 - v10;
  getMedStatus(from:)(a2, v12, v13, v14, v15, v16);
  *a3 = v17 & 1;
  id v18 = [a1 medCount];
  uint64_t v24 = v18;
  if (v18)
  {
    [v18 doubleValue];
    double v26 = v25;

    BOOL v27 = v26 == 1.0;
  }

  else
  {
    BOOL v27 = 0;
    double v26 = 0.0;
  }

  a3[1] = v27;
  getLocalizedMedName(from:)(a2, v19, v20, v21, v22, v23);
  if (v29)
  {
    uint64_t v30 = v29;
    String.toSpeakableString.getter(v28, v29);
    swift_bridgeObjectRelease(v30);
    uint64_t v31 = type metadata accessor for SpeakableString(0LL);
    uint64_t v32 = 0LL;
  }

  else
  {
    uint64_t v31 = type metadata accessor for SpeakableString(0LL);
    uint64_t v32 = 1LL;
  }

  BOOL v33 = v24 == 0LL;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, v32, 1LL, v31);
  uint64_t v34 = (int *)type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters(0LL);
  sub_DADFC((uint64_t)v11, (uint64_t)&a3[v34[6]], &qword_189D00);
  uint64_t v35 = (double *)&a3[v34[7]];
  *uint64_t v35 = v26;
  *((_BYTE *)v35 + 8) = v33;
  hasDosageEdit(from:)(a2, v36, v37, v38, v39, v40);
  a3[v34[8]] = v41 & 1;
  id v42 = [a1 dosage];
  uint64_t v43 = v42;
  if (v42)
  {
    [v42 doubleValue];
    uint64_t v45 = v44;
  }

  else
  {
    uint64_t v45 = 0LL;
  }

  uint64_t v46 = &a3[v34[9]];
  *(void *)uint64_t v46 = v45;
  v46[8] = v43 == 0LL;
  sub_DA6D8(a1, (SEL *)&selRef_dosageUnit);
  if (v48)
  {
    uint64_t v49 = v48;
    String.toSpeakableString.getter(v47, v48);
    swift_bridgeObjectRelease(v49);
    uint64_t v50 = 0LL;
  }

  else
  {
    uint64_t v50 = 1LL;
  }

  uint64_t v51 = type metadata accessor for SpeakableString(0LL);
  BOOL v52 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, v50, 1LL, v51);
  sub_DADFC((uint64_t)v9, (uint64_t)&a3[v34[10]], &qword_189D00);
  sub_DA680(a1, (SEL *)&selRef_matchingMeds, (uint64_t (*)(void))&type metadata accessor for MatchedMedName);
  if (!v53) {
    goto LABEL_23;
  }
  uint64_t v54 = v53;
  if ((unint64_t)v53 >> 62)
  {
    if (v53 >= 0) {
      v53 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v55 = _CocoaArrayWrapper.endIndex.getter(v53);
  }

  else
  {
    uint64_t v55 = *(void *)((char *)&dword_10 + (v53 & 0xFFFFFFFFFFFFFF8LL));
  }

  BOOL v52 = v55 == 0;
  if (!v55) {
    goto LABEL_21;
  }
  sub_398E0(0LL, (v54 & 0xC000000000000001LL) == 0, v54);
  if ((v54 & 0xC000000000000001LL) != 0) {
    id v56 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v54);
  }
  else {
    id v56 = *(id *)(v54 + 32);
  }
  uint64_t v57 = v56;
  swift_bridgeObjectRelease(v54);
  sub_DA4FC(v57);
  if (v58)
  {
    uint64_t v54 = v58;
LABEL_21:
    swift_bridgeObjectRelease(v54);
    goto LABEL_23;
  }

  BOOL v52 = 1;
LABEL_23:
  a3[v34[11]] = v52;
  id v59 = [a1 matchingMeds];
  if (v59)
  {
    uint64_t v60 = v59;
    uint64_t v61 = type metadata accessor for MatchedMedName(0LL);
    uint64_t v62 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v60, v61);
    swift_release();
  }

  else
  {
    swift_release();

    uint64_t v62 = 0LL;
  }

  *(void *)&a3[v34[12]] = v62;
}

BOOL sub_D6D50()
{
  uint64_t v0 = swift_retain();
  getUSOMedNames(from:)(v0, v1, v2, v3, v4, v5);
  uint64_t v7 = v6;
  swift_release();
  if (!v7) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(v7 + 16);
  swift_bridgeObjectRelease(v7);
  return v8 != 0;
}

uint64_t sub_D6DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0LL;
  }
  Hasher.init(_seed:)(v16, *(void *)(a3 + 40));
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(a2);
    String.hash(into:)(v16, a1, a2);
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
  unint64_t v8 = v6 & ~v7;
  uint64_t v9 = a3 + 56;
  if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
    return 0LL;
  }
  uint64_t v10 = ~v7;
  uint64_t v11 = *(void *)(a3 + 48);
  while (1)
  {
    uint64_t v12 = (void *)(v11 + 16 * v8);
    uint64_t v13 = v12[1];
    if (v13) {
      break;
    }
    if (!a2) {
      return 1LL;
    }
LABEL_16:
    unint64_t v8 = (v8 + 1) & v10;
    if (((*(void *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
      return 0LL;
    }
  }

  if (!a2) {
    goto LABEL_16;
  }
  BOOL v14 = *v12 == a1 && v13 == a2;
  if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a1, a2, 0LL) & 1) == 0) {
    goto LABEL_16;
  }
  return 1LL;
}

void sub_D6ECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v6 = sub_494C(a4);
  sub_A72C(v6);
  a5(0LL);
  sub_DE7FC();
  uint64_t v7 = sub_BAFCC();
  PromptForDisambiguationFlowAsync.init<A>(items:strategy:outputPublisher:)(v7);
  sub_24A0C();
}

uint64_t (*sub_D6F3C( uint64_t a1))(int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)
{
  return sub_DAE30;
}

uint64_t (*sub_D6F6C( uint64_t a1))(int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)
{
  return sub_DAE7C;
}

uint64_t (*sub_D6F9C(uint64_t a1))()
{
  return sub_DAE80;
}

uint64_t (*sub_D6FCC(uint64_t a1))()
{
  return sub_DAE84;
}

uint64_t sub_D6FFC(void (*a1)(void), uint64_t (*a2)(uint64_t, void))
{
  return a2(v2, 0LL);
}

void sub_D7060(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ResponseFactory(0LL);
  uint64_t v3 = sub_A72C(v2);
  uint64_t v4 = ResponseFactory.init()(v3);
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for ResponseFactory;
  *a1 = v4;
  sub_1EB0C();
}

uint64_t (*sub_D70A4(uint64_t a1))()
{
  return sub_DAE88;
}

uint64_t (*sub_D70D4( uint64_t a1))(int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)
{
  return sub_DAE8C;
}

uint64_t sub_D7104(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  v5[0] = v2;
  v5[1] = v1;
  swift_bridgeObjectRetain(v1);
  uint64_t v3 = sub_494C(&qword_18B170);
  return String.init<A>(describing:)(v5, v3);
}

uint64_t sub_D7140(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain(*(void *)(a1 + 24));
  return v1;
}

uint64_t sub_D716C(uint64_t a1)
{
  char v1 = *(_BYTE *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = v1;
  uint64_t v2 = sub_494C(qword_189C90);
  return String.init<A>(describing:)(&v4, v2);
}

uint64_t sub_D71AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v1 = *(void *)(a1 + 56);
  v5[0] = v2;
  v5[1] = v1;
  swift_bridgeObjectRetain(v1);
  uint64_t v3 = sub_494C(&qword_18B170);
  return String.init<A>(describing:)(v5, v3);
}

uint64_t sub_D71E8(uint64_t a1)
{
  char v2 = *(_BYTE *)(a1 + 64);
  return String.init<A>(describing:)(&v2, &unk_180630);
}

uint64_t sub_D7218(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t (*sub_D7248(uint64_t a1))()
{
  return sub_DBD64;
}

uint64_t (*sub_D7278(uint64_t a1))()
{
  return sub_DBD68;
}

uint64_t (*sub_D72A8(uint64_t a1))()
{
  return sub_DBD6C;
}

uint64_t sub_D72D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  swift_bridgeObjectRetain(a3);
  uint64_t v3 = sub_494C(&qword_18EB20);
  return String.init<A>(describing:)(&v5, v3);
}

uint64_t sub_D7314(void *a1)
{
  uint64_t v2 = v1;
  if (v1)
  {
    if ((unint64_t)v1 >> 62)
    {
      if (v1 >= 0) {
        v1 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v1);
    }

    else
    {
      uint64_t v3 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8LL));
    }

    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  uint64_t v6 = v3;
  BOOL v7 = v2 == 0;
  uint64_t v4 = sub_494C(&qword_18AE18);
  return String.init<A>(describing:)(&v6, v4);
}

void sub_D73AC(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v10 = type metadata accessor for SpeakableString(0LL);
  uint64_t v62 = *(void *)(v10 - 8);
  sub_D978();
  __chkstk_darwin(v11);
  uint64_t v61 = (char *)v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_494C(&qword_189D00);
  sub_D978();
  __chkstk_darwin(v13);
  sub_AA58();
  uint64_t v16 = v14 - v15;
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)v60 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)v60 - v21;
  uint64_t v23 = *a2;
  if ((unint64_t)v23 >> 62)
  {
    if (v23 < 0) {
      uint64_t v34 = v23;
    }
    else {
      uint64_t v34 = v23 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_A38F8();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter(v34);
    sub_1EBF4();
  }

  else
  {
    uint64_t v24 = *(void *)((char *)&dword_10 + (v23 & 0xFFFFFFFFFFFFF8LL));
  }

  double v25 = (int *)type metadata accessor for WellnessLoggingLogSpecificMedRejectedConfirmationResultSetParameters(0LL);
  uint64_t v26 = a1 + v25[14];
  *(double *)uint64_t v26 = (double)v24;
  *(_BYTE *)(v26 + 8) = 0;
  sub_DA680(a3, (SEL *)&selRef_matchingMeds, (uint64_t (*)(void))&type metadata accessor for MatchedMedName);
  if (!v27) {
    goto LABEL_19;
  }
  uint64_t v28 = v27;
  if ((unint64_t)v27 >> 62)
  {
    if (v27 >= 0) {
      v27 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    if (_CocoaArrayWrapper.endIndex.getter(v27)) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  if (!*(void *)((char *)&dword_10 + (v27 & 0xFFFFFFFFFFFFFF8LL)))
  {
LABEL_18:
    sub_36C34();
LABEL_19:
    uint64_t v33 = 1LL;
    goto LABEL_20;
  }

uint64_t (*sub_D7764( uint64_t a1))(int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)
{
  return sub_DBD70;
}

void sub_D7794()
{
  uint64_t v2 = v0;
  uint64_t v117 = sub_D984();
  uint64_t v116 = *(void *)(v117 - 8);
  sub_D978();
  __chkstk_darwin(v3);
  sub_DE7AC();
  uint64_t v5 = __chkstk_darwin(v4);
  BOOL v7 = (char *)&v112 - v6;
  __chkstk_darwin(v5);
  uint64_t v9 = (void (*)(uint64_t))((char *)&v112 - v8);
  uint64_t v10 = sub_494C(&qword_18E9C8);
  __chkstk_darwin(v10);
  sub_AA58();
  uint64_t v13 = v11 - v12;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v112 - v15;
  sub_DED4C((uint64_t)&v112 - v15);
  uint64_t v17 = sub_BAFCC();
  uint64_t v19 = v18(v17);
  if ((_DWORD)v19 != enum case for PromptResult.answered<A>(_:))
  {
    uint64_t v50 = Logger.wellness.unsafeMutableAddressor(v19);
    sub_A5DC(v50, (uint64_t)v124);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v116 + 16))(v1, v50, v117);
    sub_DED4C(v13);
    uint64_t v51 = (os_log_s *)sub_37018();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = (_DWORD *)sub_A5E8(12LL);
      uint64_t v115 = (char *)sub_A5E8(32LL);
      v123[0] = (uint64_t)v115;
      v114.i64[0] = (uint64_t)v53;
      *uint64_t v53 = 136315138;
      uint64_t v113 = v53 + 1;
      sub_3586C(&qword_18E9D0, &qword_18E9C8);
      uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter(v10, v54);
      uint64_t v9 = (void (*)(uint64_t))v56;
      uint64_t v120 = sub_39178(v55, v56, v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121, v113, v53 + 3);
      sub_249D4();
      sub_DE884();
      uint64_t v57 = v114.i64[0];
      sub_DA24( &dword_0,  v51,  v52,  "processNameDisambiguationResult() received unknown result: %s. Setting flow to .failure state.",  (uint8_t *)v114.i64[0]);
      uint64_t v58 = (uint64_t)v115;
      sub_A81C((uint64_t)v115);
      sub_5050(v58);
      sub_5050(v57);
    }

    else
    {
      sub_DE884();
    }

    (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v1, v117);
    uint64_t v59 = *(void *)(v2 + 224);
    uint64_t v60 = *(void *)(v2 + 232);
    uint64_t v61 = v2 + 224;
    uint64_t v62 = *(void *)(v61 + 16);
    uint64_t v63 = *(void *)(v61 + 24);
    uint64_t v64 = *(void *)(v61 + 32);
    uint64_t v65 = *(void *)(v61 + 40);
    uint64_t v66 = *(void *)(v61 + 48);
    uint64_t v67 = *(void *)(v61 + 56);
    unsigned __int8 v68 = *(_BYTE *)(v61 + 64);
    *(void *)uint64_t v61 = 8LL;
    *(_OWORD *)(v61 + 8) = 0u;
    *(_OWORD *)(v61 + 24) = 0u;
    *(_OWORD *)(v61 + 40) = 0u;
    *(void *)(v61 + 56) = 0LL;
    *(_BYTE *)(v61 + 64) = -64;
    sub_3561C(v59, v60, v62, v63, v64, v65, v66, v67, v68);
    uint64_t v69 = sub_BAFCC();
    v9(v69);
    goto LABEL_39;
  }

  uint64_t v115 = v7;
  uint64_t v20 = sub_BAFCC();
  v21(v20);
  uint64_t v22 = *(void *)v16;
  uint64_t v23 = *((void *)v16 + 1);
  uint64_t v24 = *((void *)v16 + 2);
  uint64_t v25 = *((void *)v16 + 3);
  double v26 = *((double *)v16 + 4);
  char v27 = v16[40];
  *(void *)uint64_t v124 = *(void *)v16;
  *(void *)&v124[8] = v23;
  *(void *)&v124[16] = v24;
  unint64_t v125 = v25;
  double v126 = v26;
  char v127 = v27;
  __int128 v128 = *((_OWORD *)v16 + 3);
  if (v23)
  {
    BOOL v28 = v22 == 0x64656863536C696ELL && v23 == 0xEB00000000656C75LL;
    if (v28 || (uint64_t v22 = sub_58F94(v22, v23, 0x64656863536C696ELL, 0xEB00000000656C75LL), (v22 & 1) != 0))
    {
      uint64_t v22 = sub_369F4();
      *(void *)uint64_t v124 = 0LL;
      *(void *)&v124[8] = 0LL;
    }
  }

  BOOL v29 = v24 == 0x636964654D6C696ELL && v25 == 0xEF44496E6F697461LL;
  if (v29 || (uint64_t v22 = sub_58F94(v24, v25, 0x636964654D6C696ELL, 0xEF44496E6F697461LL), (v22 & 1) != 0))
  {
    uint64_t v30 = Logger.wellness.unsafeMutableAddressor(v22);
    sub_A5DC(v30, (uint64_t)&v118);
    uint64_t v31 = sub_BB080();
    uint64_t v34 = sub_DA14(v31, v32, v33);
    uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (sub_DDAB8(v35))
    {
      uint64_t v37 = (uint8_t *)sub_A5E8(2LL);
      *(_WORD *)uint64_t v37 = 0;
      sub_232EC( &dword_0,  v35,  v36,  "processNameDisambiguationResult() received nilMedicationID. Setting flow to .failure state.",  v37);
      sub_5050((uint64_t)v37);
    }

    uint64_t v38 = sub_BB0AC();
    v39(v38);
    uint64_t v40 = *(void *)(v2 + 224);
    uint64_t v41 = *(void *)(v2 + 232);
    uint64_t v42 = *(void *)(v2 + 240);
    uint64_t v43 = *(void *)(v2 + 248);
    uint64_t v44 = *(void *)(v2 + 256);
    uint64_t v45 = *(void *)(v2 + 264);
    uint64_t v46 = *(void *)(v2 + 272);
    uint64_t v47 = *(void *)(v2 + 280);
    unsigned __int8 v48 = *(_BYTE *)(v2 + 288);
    *(void *)(v2 + 224) = 8LL;
    *(_OWORD *)(v2 + 232) = 0u;
    *(_OWORD *)(v2 + 248) = 0u;
    *(_OWORD *)(v2 + 264) = 0u;
    *(void *)(v2 + 280) = 0LL;
    *(_BYTE *)(v2 + 288) = -64;
    sub_3561C(v40, v41, v42, v43, v44, v45, v46, v47, v48);
    double v26 = v126;
    if ((v127 & 1) != 0) {
      goto LABEL_17;
    }
  }

  else if ((v27 & 1) != 0)
  {
LABEL_17:
    int64x2_t v49 = vdupq_n_s64(1uLL);
LABEL_26:
    *(double *)v49.i64 = v26;
    goto LABEL_27;
  }

  if (v26 != -1.0)
  {
    v49.i64[1] = 0LL;
    goto LABEL_26;
  }

  double v126 = 0.0;
  char v127 = 1;
  int64x2_t v49 = (int64x2_t)xmmword_13D4F0;
LABEL_27:
  uint64_t v70 = *((void *)&v128 + 1);
  uint64_t v71 = v128;
  if (*((void *)&v128 + 1))
  {
    int64x2_t v114 = v49;
    BOOL v72 = (void)v128 == 0x6E657274536C696ELL && *((void *)&v128 + 1) == 0xEF74696E55687467LL;
    if (v72 || (uint64_t v73 = sub_BB080(), (sub_58F94(v73, v74, 0x6E657274536C696ELL, 0xEF74696E55687467LL) & 1) != 0))
    {
      sub_2A184();
      uint64_t v71 = 0LL;
      uint64_t v70 = 0LL;
      __int128 v128 = 0uLL;
    }

    int64x2_t v49 = v114;
  }

  unint64_t v75 = v125;
  uint64_t v76 = *(void *)(v2 + 224);
  uint64_t v77 = *(void *)(v2 + 232);
  uint64_t v78 = *(void *)(v2 + 240);
  uint64_t v79 = *(void *)(v2 + 248);
  uint64_t v80 = *(void *)(v2 + 256);
  v114.i64[0] = *(void *)(v2 + 264);
  uint64_t v113 = *(_DWORD **)(v2 + 272);
  uint64_t v112 = *(void *)(v2 + 280);
  unsigned __int8 v81 = *(_BYTE *)(v2 + 288);
  *(void *)(v2 + 224) = *(void *)v124;
  *(_OWORD *)(v2 + 232) = *(_OWORD *)&v124[8];
  *(void *)(v2 + 248) = v75;
  *(int64x2_t *)(v2 + 256) = v49;
  *(void *)(v2 + 272) = v71;
  *(void *)(v2 + 280) = v70;
  *(_BYTE *)(v2 + 288) = 0;
  swift_bridgeObjectRetain(v70);
  sub_1EB6C();
  sub_A38F8();
  uint64_t v82 = sub_3561C(v76, v77, v78, v79, v80, v114.i64[0], (uint64_t)v113, v112, v81);
  uint64_t v83 = Logger.wellness.unsafeMutableAddressor(v82);
  sub_A5DC(v83, (uint64_t)v123);
  uint64_t v84 = (uint64_t)v115;
  uint64_t v85 = sub_DA14((uint64_t)v115, v83, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 16));
  uint64_t v86 = (os_log_s *)Logger.logObject.getter(v85);
  os_log_type_t v87 = static os_log_type_t.debug.getter();
  if (sub_DDAB8(v86))
  {
    uint64_t v88 = sub_A5E8(42LL);
    v114.i64[0] = sub_A5E8(128LL);
    uint64_t v122 = v114.i64[0];
    *(_DWORD *)uint64_t v88 = 136315906;
    sub_A5DC((uint64_t)v124, (uint64_t)&v120);
    __int128 v119 = *(_OWORD *)v124;
    swift_bridgeObjectRetain(*(void *)&v124[8]);
    sub_494C(&qword_18B170);
    uint64_t v89 = sub_DEC18();
    *(void *)&__int128 v119 = sub_DE5B0(v89, v90);
    sub_DE834(v119, v91, v92, v88 + 12);
    sub_6D64();
    *(_WORD *)(v88 + 12) = 2080;
    uint64_t v93 = *(void *)&v124[16];
    unint64_t v94 = v125;
    swift_bridgeObjectRetain(v125);
    *(void *)&__int128 v119 = sub_39178(v93, v94, &v122);
    sub_DE834(v119, v95, v96, v88 + 22);
    sub_B25F0();
    *(_WORD *)(v88 + 22) = 2080;
    *(double *)&__int128 v119 = v126;
    BYTE8(v119) = v127;
    uint64_t v97 = sub_494C(qword_189C90);
    uint64_t v98 = String.init<A>(describing:)(&v119, v97);
    uint64_t v100 = sub_DE5B0(v98, v99);
    sub_DE52C(v100, v101, v102, v88 + 32);
    sub_6D64();
    *(_WORD *)(v88 + 32) = 2080;
    __int128 v119 = v128;
    swift_bridgeObjectRetain(*((void *)&v128 + 1));
    uint64_t v103 = sub_DEC18();
    uint64_t v105 = sub_DE5B0(v103, v104);
    sub_DE52C(v105, v106, v107, v88 + 42);
    sub_6D64();
    _os_log_impl( &dword_0,  v86,  v87,  "processNameDisambiguationResult() received selected scheduleID (%s), medicationID (%s), strength (%s), strengthUnit (%s)",  (uint8_t *)v88,  0x2Au);
    uint64_t v108 = v114.i64[0];
    swift_arrayDestroy(v114.i64[0], 4LL);
    sub_5050(v108);
    sub_5050(v88);

    (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v84, v117);
  }

  else
  {

    uint64_t v109 = sub_BB0AC();
    v111(v109, v110);
  }

  swift_bridgeObjectRelease(v125);
  sub_2A184();
  sub_249D4();
LABEL_39:
  sub_D8FC();
}

void sub_D7F9C()
{
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v5 = sub_D984();
  uint64_t v70 = *(void *)(v5 - 8);
  sub_D978();
  __chkstk_darwin(v6);
  sub_AA58();
  uint64_t v9 = v7 - v8;
  __chkstk_darwin(v10);
  uint64_t v68 = (uint64_t)&v66 - v11;
  uint64_t v12 = sub_494C(&qword_18E9B8);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_DE7AC();
  __chkstk_darwin(v14);
  uint64_t v16 = (uint64_t *)((char *)&v66 - v15);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v17((char *)&v66 - v15, v4, v12);
  uint64_t v18 = (*(uint64_t (**)(uint64_t *, uint64_t))(v13 + 88))(v16, v12);
  if ((_DWORD)v18 == enum case for PromptResult.answered<A>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v13 + 96))(v16, v12);
    uint64_t v19 = *v16;
    unint64_t v20 = v16[1];
    uint64_t v21 = *(void *)(v2 + 224);
    uint64_t v22 = *(void *)(v2 + 232);
    uint64_t v23 = *(void *)(v2 + 240);
    uint64_t v24 = *(void *)(v2 + 248);
    uint64_t v69 = v5;
    uint64_t v26 = *(void *)(v2 + 256);
    uint64_t v25 = *(void *)(v2 + 264);
    uint64_t v66 = (_DWORD *)v19;
    uint64_t v67 = (_DWORD *)v25;
    uint64_t v28 = *(void *)(v2 + 272);
    uint64_t v27 = *(void *)(v2 + 280);
    unsigned __int8 v29 = *(_BYTE *)(v2 + 288);
    *(void *)(v2 + 224) = v19;
    *(void *)(v2 + 232) = v20;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_OWORD *)(v2 + 256) = 0u;
    *(_OWORD *)(v2 + 272) = 0u;
    *(_BYTE *)(v2 + 288) = 64;
    sub_DED08();
    uint64_t v30 = sub_3561C(v21, v22, v23, v24, v26, (uint64_t)v67, v28, v27, v29);
    uint64_t v31 = Logger.wellness.unsafeMutableAddressor(v30);
    sub_A5DC(v31, (uint64_t)v72);
    uint64_t v32 = v68;
    sub_566C0(v68, v31, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v70 + 16));
    sub_DED08();
    uint64_t v33 = (os_log_s *)sub_DECA0();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (sub_DDAB8(v33))
    {
      uint64_t v35 = (_DWORD *)sub_A5E8(12LL);
      uint64_t v36 = sub_A5E8(32LL);
      uint64_t v71 = v36;
      *uint64_t v35 = 136315138;
      sub_DED08();
      uint64_t v37 = sub_39178((uint64_t)v66, v20, &v71);
      uint64_t v38 = sub_A38D8(v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v38, v39, v35 + 1, v35 + 3);
      swift_bridgeObjectRelease_n(v20, 3LL);
      sub_DDDF4(&dword_0, v33, v34, "processScheduleDisambiguationResult() received selected scheduleID (%s)");
      sub_A81C(v36);
      sub_5050(v36);
      sub_5050((uint64_t)v35);
    }

    else
    {

      swift_bridgeObjectRelease_n(v20, 2LL);
    }

    sub_DE028(v32, *(uint64_t (**)(uint64_t, uint64_t))(v70 + 8));
  }

  else
  {
    uint64_t v40 = Logger.wellness.unsafeMutableAddressor(v18);
    sub_A5DC(v40, (uint64_t)v72);
    uint64_t v41 = sub_DEDA4();
    v42(v41);
    uint64_t v43 = sub_37104();
    ((void (*)(uint64_t))v17)(v43);
    uint64_t v44 = (os_log_s *)sub_368A0();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (_DWORD *)sub_A5E8(12LL);
      uint64_t v68 = sub_A5E8(32LL);
      uint64_t v71 = v68;
      uint64_t v69 = v5;
      *uint64_t v46 = 136315138;
      uint64_t v66 = v46 + 1;
      uint64_t v67 = v46;
      sub_3586C(&qword_18E9C0, &qword_18E9B8);
      uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter(v12, v47);
      uint64_t v50 = sub_39178(v48, v49, &v71);
      uint64_t v51 = sub_A38D8(v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v51, v52, v66, v46 + 3);
      sub_249D4();
      sub_DE484(v1);
      os_log_type_t v53 = v45;
      uint64_t v54 = (uint64_t)v67;
      sub_DDDF4( &dword_0,  v44,  v53,  "processScheduleDisambiguationResult() received unknown result: %s. Setting flow to .failure state.");
      uint64_t v55 = v68;
      sub_A81C(v68);
      sub_5050(v55);
      sub_5050(v54);

      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v9, v69);
    }

    else
    {
      sub_DE484(v1);

      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v9, v5);
    }

    uint64_t v56 = *(void *)(v2 + 224);
    uint64_t v57 = *(void *)(v2 + 232);
    uint64_t v58 = v2 + 224;
    uint64_t v59 = *(void *)(v58 + 16);
    uint64_t v60 = *(void *)(v58 + 24);
    uint64_t v61 = *(void *)(v58 + 32);
    uint64_t v62 = *(void *)(v58 + 40);
    uint64_t v63 = *(void *)(v58 + 48);
    uint64_t v64 = *(void *)(v58 + 56);
    unsigned __int8 v65 = *(_BYTE *)(v58 + 64);
    *(void *)uint64_t v58 = 8LL;
    *(_OWORD *)(v58 + 8) = 0u;
    *(_OWORD *)(v58 + 24) = 0u;
    *(_OWORD *)(v58 + 40) = 0u;
    *(void *)(v58 + 56) = 0LL;
    *(_BYTE *)(v58 + 64) = -64;
    sub_3561C(v56, v57, v59, v60, v61, v62, v63, v64, v65);
    sub_DE484((uint64_t)v16);
  }

  sub_D8FC();
}

void sub_D83D4(uint64_t a1)
{
}

void sub_D83EC(uint64_t a1)
{
}

void sub_D8404(uint64_t a1, const char *a2, const char *a3, int a4)
{
  int v100 = a4;
  uint64_t v102 = a2;
  uint64_t v6 = v4;
  uint64_t v8 = sub_494C(&qword_18AE40);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_3751C();
  uint64_t v108 = v10;
  sub_A794();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v96 - v12;
  uint64_t v14 = sub_D984();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  sub_3751C();
  uint64_t v103 = v16;
  sub_A794();
  __chkstk_darwin(v17);
  sub_1C6B8();
  uint64_t v104 = v18;
  sub_A794();
  __chkstk_darwin(v19);
  sub_1C6B8();
  uint64_t v99 = v20;
  sub_A794();
  __chkstk_darwin(v21);
  sub_1C6B8();
  uint64_t v101 = (void *)v22;
  sub_A794();
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v96 - v25;
  uint64_t v27 = Logger.wellness.unsafeMutableAddressor(v24);
  sub_A5DC(v27, (uint64_t)v115);
  uint64_t v105 = v15;
  uint64_t v109 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v110 = (uint8_t *)v27;
  v109(v26, v27, v14);
  uint64_t v111 = v9;
  uint64_t v106 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v107 = a1;
  v106(v13, a1, v8);
  uint64_t v28 = (os_log_s *)sub_DECA0();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  BOOL v30 = os_log_type_enabled(v28, v29);
  uint64_t v98 = a3;
  if (v30)
  {
    uint64_t v31 = (_DWORD *)sub_A5E8(12LL);
    uint64_t v32 = sub_A5E8(32LL);
    v114[0] = v32;
    uint64_t v97 = v6;
    *uint64_t v31 = 136315138;
    uint64_t v96 = v31 + 1;
    sub_3586C(&qword_18AE48, &qword_18AE40);
    uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter(v8, v33);
    uint64_t v112 = sub_39178(v34, v35, v114);
    uint64_t v6 = v97;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v96, v31 + 3);
    sub_249D4();
    uint64_t v36 = *(void *)(v111 + 8);
    sub_DE484((uint64_t)v13);
    sub_DDDF4(&dword_0, v28, v29, v102);
    sub_A81C(v32);
    sub_5050(v32);
    sub_5050((uint64_t)v31);
  }

  else
  {
    uint64_t v36 = *(void *)(v111 + 8);
    sub_DE484((uint64_t)v13);
  }

  (*(void (**)(char *, uint64_t))(v105 + 8))(v26, v14);
  uint64_t v37 = v108;
  v106((char *)v108, v107, v8);
  if ((*(unsigned int (**)(unsigned __int8 *, uint64_t))(v111 + 88))(v37, v8) != enum case for PromptResult.answered<A>(_:))
  {
    sub_DE484((uint64_t)v37);
    uint64_t v66 = v110;
    sub_A5DC((uint64_t)v110, (uint64_t)v114);
    uint64_t v38 = v103;
    sub_DDF94(v103);
    sub_466E0();
    os_log_type_t v67 = sub_A898();
    if (sub_232DC(v67))
    {
      uint64_t v68 = (_WORD *)sub_A5E8(2LL);
      sub_DE478(v68);
      uint64_t v69 = "PromptForValueFlowAsync was unanswered, erroring out";
LABEL_35:
      sub_232EC(&dword_0, (os_log_s *)v36, (os_log_type_t)v28, v69, v66);
      sub_5050((uint64_t)v66);
    }

void sub_D8AB4(uint64_t a1)
{
}

void sub_D8ACC()
{
  uint64_t v122 = v0;
  uint64_t v2 = v1;
  uint64_t v3 = sub_494C(&qword_18E9A8);
  unint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_AA58();
  uint64_t v7 = (uint64_t *)(v5 - v6);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v115 - v9;
  uint64_t v11 = sub_D984();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_3751C();
  uint64_t v121 = v13;
  sub_A794();
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v115 - v16;
  __chkstk_darwin(v15);
  sub_1C6B8();
  uint64_t v118 = v18;
  sub_A794();
  __chkstk_darwin(v19);
  sub_1C6B8();
  uint64_t v117 = v20;
  sub_A794();
  __chkstk_darwin(v21);
  sub_1C6B8();
  uint64_t v120 = (void *)v22;
  sub_A794();
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v26 = (uint64_t)&v115 - v25;
  uint64_t v27 = (uint8_t *)Logger.wellness.unsafeMutableAddressor(v24);
  sub_A5DC((uint64_t)v27, (uint64_t)&v132);
  uint64_t v123 = v12;
  uint64_t v28 = sub_80C98();
  double v126 = v29;
  uint64_t v127 = v11;
  v29(v28);
  uint64_t v128 = v4;
  uint64_t v124 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  uint64_t v125 = v2;
  sub_566C0((uint64_t)v10, v2, v124);
  BOOL v30 = (os_log_s *)sub_A86C();
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  if (sub_DDAB8(v30))
  {
    uint64_t v32 = sub_A5E8(12LL);
    __int128 v119 = v27;
    uint64_t v33 = (_DWORD *)v32;
    uint64_t v34 = sub_A5E8(32LL);
    uint64_t v116 = v17;
    uint64_t v35 = v34;
    v131[0] = v34;
    *uint64_t v33 = 136315138;
    uint64_t v115 = v33 + 1;
    sub_3586C(&qword_18E9B0, &qword_18E9A8);
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter(v3, v36);
    unint64_t v4 = v38;
    uint64_t v129 = sub_39178(v37, v38, v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130, v115, v33 + 3);
    sub_249D4();
    sub_DE518();
    sub_DDDF4( &dword_0,  v30,  v31,  "Received response from PromptForValueFlowAsync for LogMedScheduleMixedStatusConfirmationStrategy: %s");
    sub_A81C(v35);
    uint64_t v39 = v35;
    uint64_t v17 = v116;
    sub_5050(v39);
    uint64_t v40 = (uint64_t)v33;
    uint64_t v27 = v119;
    sub_5050(v40);
  }

  else
  {
    sub_DE518();
  }

  uint64_t v41 = *(void *)(v123 + 8);
  sub_DED58(v26);
  sub_566C0((uint64_t)v7, v125, v124);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v128 + 88))(v7, v3) != enum case for PromptResult.answered<A>(_:))
  {
    ((void (*)(uint64_t *, uint64_t))v4)(v7, v3);
    sub_A5DC((uint64_t)v27, (uint64_t)v131);
    uint64_t v45 = v121;
    sub_DE2D8(v121);
    sub_466E0();
    os_log_type_t v46 = sub_A898();
    if (sub_232DC(v46))
    {
      uint64_t v47 = (_WORD *)sub_A5E8(2LL);
      sub_DE478(v47);
      sub_232EC( &dword_0,  (os_log_s *)v4,  (os_log_type_t)v26,  "PromptForValueFlowAsync was unanswered, erroring out",  v27);
      sub_5050((uint64_t)v27);
    }

    uint64_t v48 = v45;
    goto LABEL_34;
  }

  sub_DE028((uint64_t)v7, *(uint64_t (**)(uint64_t, uint64_t))(v128 + 96));
  uint64_t v42 = v7[1];
  if (!v42)
  {
LABEL_31:
    sub_A5DC((uint64_t)v27, (uint64_t)v131);
    sub_DE2D8((uint64_t)v17);
    sub_37018();
    os_log_type_t v74 = sub_A898();
    if (sub_232DC(v74))
    {
      unint64_t v75 = (_WORD *)sub_A5E8(2LL);
      sub_DE478(v75);
      sub_232EC( &dword_0,  (os_log_s *)v4,  (os_log_type_t)v26,  "PromptForValueFlowAsync returned incorrect values, erroring out",  v27);
      sub_5050((uint64_t)v27);
    }

    uint64_t v48 = (uint64_t)v17;
LABEL_34:
    sub_DED58(v48);
    uint64_t v76 = *(void *)(v122 + 224);
    uint64_t v77 = *(void *)(v122 + 232);
    uint64_t v78 = v122 + 224;
    uint64_t v79 = *(void *)(v122 + 240);
    uint64_t v80 = *(void *)(v122 + 248);
    uint64_t v81 = *(void *)(v122 + 256);
    uint64_t v82 = *(void *)(v122 + 264);
    uint64_t v83 = *(void *)(v122 + 272);
    uint64_t v84 = *(void *)(v122 + 280);
    unsigned __int8 v85 = *(_BYTE *)(v122 + 288);
    *(void *)(v122 + 224) = 8LL;
    *(_OWORD *)(v78 + 8) = 0u;
    *(_OWORD *)(v78 + 24) = 0u;
    *(_OWORD *)(v78 + 40) = 0u;
    *(void *)(v78 + 56) = 0LL;
    *(_BYTE *)(v78 + 64) = -64;
    sub_3561C(v76, v77, v79, v80, v81, v82, v83, v84, v85);
LABEL_35:
    sub_D8FC();
    return;
  }

  uint64_t v43 = *v7;
  uint64_t v44 = v7[3];
  if (*v7 == 2LL)
  {
    sub_DA724(v43, v7[1], v7[2], v44);
    goto LABEL_31;
  }

  if (!v44)
  {
    sub_DA1C();
    goto LABEL_31;
  }

  uint64_t v125 = v7[2];
  uint64_t v128 = v44;
  unint64_t v49 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(v43 & 1);
  sub_A5DC((uint64_t)v27, (uint64_t)v131);
  uint64_t v50 = v120;
  uint64_t v51 = sub_BB080();
  uint64_t v52 = v126(v51);
  Logger.logObject.getter(v52);
  os_log_type_t v53 = sub_AB70();
  if (sub_232DC(v53))
  {
    os_log_type_t v54 = v27;
    uint64_t v55 = (_DWORD *)sub_A5E8(8LL);
    *uint64_t v55 = 67109120;
    LODWORD(v129) = (_DWORD)v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, (char *)&v129 + 4, v55 + 1, v55 + 2);
    sub_DE648(&dword_0, v56, v57, "PromptForValueFlowAsync returned: %{BOOL}d");
    uint64_t v58 = (uint64_t)v55;
    uint64_t v27 = v54;
    sub_5050(v58);
  }

  sub_DED58((uint64_t)v120);
  if ((unint64_t)v42 >> 62)
  {
    uint64_t v112 = v27;
    if (v42 >= 0) {
      uint64_t v113 = v42 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v113 = v42;
    }
    swift_bridgeObjectRetain(v42);
    uint64_t v114 = v113;
    uint64_t v27 = v112;
    uint64_t v59 = (os_log_s *)_CocoaArrayWrapper.endIndex.getter(v114);
    sub_DA1C();
  }

  else
  {
    uint64_t v59 = *(os_log_s **)((char *)&dword_10 + (v42 & 0xFFFFFFFFFFFFFF8LL));
  }

  __int128 v119 = v27;
  uint64_t v123 = v41;
  uint64_t v124 = v49;
  if (!v59)
  {
    uint64_t v60 = _swiftEmptyArrayStorage;
LABEL_37:
    sub_DA1C();
    if (v124)
    {
      uint64_t v91 = v119;
      sub_A5DC((uint64_t)v119, (uint64_t)&v129);
      sub_DE798();
      sub_AB5C();
      os_log_type_t v92 = sub_AB70();
      if (sub_232DC(v92))
      {
        uint64_t v93 = (_WORD *)sub_A5E8(2LL);
        sub_DE478(v93);
        sub_232EC(&dword_0, v59, (os_log_type_t)v26, "User wanted to overwrite existing statuses, switching state", v91);
        sub_5050((uint64_t)v91);
      }

      sub_DEBF4();
      uint64_t v90 = v122;
      uint64_t v94 = sub_4195C();
      getMedStatus(from:)(v94, v95, v96, v97, v98, v99);
      char v101 = v100;
      sub_37034();
      uint64_t v89 = 3LL;
      if ((v101 & 1) != 0) {
        uint64_t v89 = 4LL;
      }
    }

    else
    {
      uint64_t v86 = v119;
      sub_A5DC((uint64_t)v119, (uint64_t)&v129);
      sub_DE798();
      sub_AB5C();
      os_log_type_t v87 = sub_AB70();
      if (sub_232DC(v87))
      {
        uint64_t v88 = (_WORD *)sub_A5E8(2LL);
        sub_DE478(v88);
        sub_232EC( &dword_0,  v59,  (os_log_type_t)v26,  "User didn't want to overwrite existing statuses, switching state",  v86);
        sub_5050((uint64_t)v86);
      }

      sub_DEBF4();
      uint64_t v89 = 5LL;
      uint64_t v90 = v122;
    }

    uint64_t v102 = *(void *)(v90 + 224);
    uint64_t v103 = *(void *)(v90 + 232);
    uint64_t v104 = *(void *)(v90 + 240);
    uint64_t v105 = *(void *)(v90 + 248);
    uint64_t v106 = *(void *)(v90 + 256);
    uint64_t v107 = *(void *)(v90 + 264);
    uint64_t v108 = *(void *)(v90 + 272);
    uint64_t v109 = *(void *)(v90 + 280);
    unsigned __int8 v110 = *(_BYTE *)(v90 + 288);
    uint64_t v111 = v128;
    *(void *)(v90 + 224) = v125;
    *(void *)(v90 + 232) = v111;
    *(void *)(v90 + 240) = v60;
    *(void *)(v90 + 248) = v89;
    *(_OWORD *)(v90 + 256) = 0u;
    *(_OWORD *)(v90 + 272) = 0u;
    *(_BYTE *)(v90 + 288) = 64;
    sub_3561C(v102, v103, v104, v105, v106, v107, v108, v109, v110);
    goto LABEL_35;
  }

  if ((uint64_t)v59 >= 1)
  {
    uint64_t v26 = 0LL;
    uint64_t v60 = _swiftEmptyArrayStorage;
    do
    {
      if ((v42 & 0xC000000000000001LL) != 0)
      {
        uint64_t v61 = sub_DEB1C();
        id v63 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v61, v62);
      }

      else
      {
        id v63 = sub_DEEE4(v42 + 8 * v26);
      }

      unsigned __int8 v64 = v63;
      sub_DA6D8(v63, (SEL *)&selRef_medicationID);
      if (v66)
      {
        uint64_t v67 = v65;
        uint64_t v68 = v66;
        if ((swift_isUniquelyReferenced_nonNull_native(v60) & 1) == 0)
        {
          sub_DECE8(0, v60[2] + 1LL);
          uint64_t v60 = v72;
        }

        unint64_t v70 = v60[2];
        unint64_t v69 = v60[3];
        if (v70 >= v69 >> 1)
        {
          sub_DECE8(v69 > 1, v70 + 1);
          uint64_t v60 = v73;
        }

        void v60[2] = v70 + 1;
        uint64_t v71 = &v60[2 * v70];
        v71[4] = v67;
        v71[5] = v68;
      }

      ++v26;
    }

    while (v59 != (os_log_s *)v26);
    goto LABEL_37;
  }

  __break(1u);
}

uint64_t sub_D91E4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_D984();
  __chkstk_darwin(v4);
  sub_AA58();
  os_log_type_t v7 = v5 - v6;
  __chkstk_darwin(v8);
  type metadata accessor for SiriEnvironment(0LL);
  if (static SiriEnvironment.forCurrentTask.getter())
  {
    SiriEnvironment.correctionsClientProvider.getter();
    uint64_t v9 = sub_3652C();
    dispatch thunk of SiriCorrectionsClientProvider.correctionsClient.getter(&v31, v9);
    sub_37110();
    if (*((void *)&v32 + 1))
    {
      uint64_t v10 = sub_20004(&v31, (uint64_t)v34);
      uint64_t v11 = (os_log_s *)Logger.wellness.unsafeMutableAddressor(v10);
      sub_A5DC((uint64_t)v11, (uint64_t)v30);
      uint64_t v12 = sub_DEA34();
      v13(v12);
      sub_368A0();
      os_log_type_t v14 = sub_AB70();
      if (sub_A634(v14))
      {
        uint64_t v15 = (uint8_t *)sub_A5E8(2LL);
        *(_WORD *)uint64_t v15 = 0;
        sub_232EC(&dword_0, v11, v7, "SpecificMedLoggingFlow: Registering corrections flow", v15);
        sub_5050((uint64_t)v15);
      }

      uint64_t v16 = sub_DEDA4();
      v17(v16);
      sub_A304(v2 + 360, (uint64_t)v29);
      sub_500C(v29, v29[3]);
      sub_AA22C(a1, (uint64_t *)&v31);
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v29);
      uint64_t v18 = v35;
      uint64_t v19 = v36;
      sub_500C(v34, v35);
      dispatch thunk of SiriCorrectionsClient.register(flow:)(&v31, v18, v19);
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(&v31);
      return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v34);
    }
  }

  else
  {
    uint64_t v33 = 0LL;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
  }

  sub_279E0((uint64_t)&v31, &qword_18AE50);
  uint64_t v22 = (os_log_s *)Logger.wellness.unsafeMutableAddressor(v21);
  sub_A5DC((uint64_t)v22, (uint64_t)v34);
  uint64_t v23 = sub_DEBE8();
  v24(v23);
  sub_AB5C();
  os_log_type_t v25 = sub_A898();
  if (sub_232DC(v25))
  {
    uint64_t v26 = (uint8_t *)sub_A5E8(2LL);
    *(_WORD *)uint64_t v26 = 0;
    sub_232EC( &dword_0,  v22,  (os_log_type_t)a1,  "SpecificMedLoggingFlow: No corrections client available. Continuing without registering corrections flow.",  v26);
    sub_5050((uint64_t)v26);
  }

  uint64_t v27 = sub_ABE70();
  return v28(v27);
}

uint64_t sub_D9428()
{
  return v0;
}

uint64_t sub_D94A8()
{
  return swift_deallocClassInstance(v0, 440LL, 7LL);
}

uint64_t type metadata accessor for SpecificMedLoggingFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC18WellnessFlowPlugin22SpecificMedLoggingFlow);
}

uint64_t sub_D94E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  int v10 = a9 >> 6;
  if (v10 == 1)
  {
    a4 = a2;
  }

  else
  {
    if (v10) {
      return result;
    }
    swift_bridgeObjectRetain(a8);
    a3 = a2;
  }

  swift_bridgeObjectRetain(a3);
  return swift_bridgeObjectRetain(a4);
}

uint64_t sub_D9548(uint64_t a1)
{
  return sub_3561C( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(_BYTE *)(a1 + 64));
}

uint64_t sub_D9580(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  unsigned __int8 v11 = *(_BYTE *)(a2 + 64);
  sub_D94E8(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  return a1;
}

uint64_t sub_D9618(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  unsigned __int8 v11 = *(_BYTE *)(a2 + 64);
  sub_D94E8(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  unsigned __int8 v20 = *(_BYTE *)(a1 + 64);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  sub_3561C(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

void *sub_D96CC(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x41uLL);
}

uint64_t sub_D96D4(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 64);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  unsigned __int8 v12 = *(_BYTE *)(a1 + 64);
  __int128 v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  __int128 v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 64) = v3;
  sub_3561C(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t sub_D9738(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 65))
    {
      int v3 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *(void *)(a1 + 40) >> 1;
      else {
        int v3 = -1;
      }
    }
  }

  else
  {
    int v3 = -1;
  }

  return (v3 + 1);
}

double sub_D9780(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 56) = 0LL;
    double result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 64) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(a1 + 65) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 32) = 0LL;
      *(void *)(a1 + 40) = 2LL * -a2;
      *(void *)(a1 + 48) = 0LL;
      *(void *)(a1 + 56) = 0LL;
      *(_BYTE *)(a1 + 64) = 0;
      return result;
    }

    *(_BYTE *)(a1 + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t sub_D97E8(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 64) >> 6;
  if (v1 == 3) {
    return (*(_DWORD *)a1 + 3);
  }
  else {
    return v1;
  }
}

uint64_t sub_D9804(uint64_t result)
{
  *(_BYTE *)(result + 64) &= 0x3Fu;
  return result;
}

uint64_t sub_D9814(uint64_t result, unsigned int a2)
{
  if (a2 < 3)
  {
    char v2 = *(_BYTE *)(result + 64) & 7 | ((_BYTE)a2 << 6);
    *(void *)(result + 40) &= 1uLL;
    *(_BYTE *)(result + 64) = v2;
  }

  else
  {
    *(void *)double result = a2 - 3;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(void *)(result + 56) = 0LL;
    *(_BYTE *)(result + 64) = -64;
  }

  return result;
}

void type metadata accessor for State()
{
}

uint64_t sub_D986C()
{
  return sub_C004C();
}

uint64_t sub_D988C(uint64_t a1)
{
  int v3 = (void *)swift_task_alloc(dword_18E794);
  *(void *)(v1 + 16) = v3;
  *int v3 = v1;
  v3[1] = sub_1FF58;
  return sub_C00B8(a1);
}

uint64_t sub_D98E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for SpecificMedLoggingFlow();
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t sub_D9904(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    uint64_t v8 = result;
    uint64_t v9 = swift_bridgeObjectRetain(result) + 40;
    do
    {
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 - 8);
      sub_363E8();
      v10(a2, a3, a4);
      swift_release();
      v9 += 16LL;
      --v4;
    }

    while (v4);
    return swift_bridgeObjectRelease(v8);
  }

  return result;
}

void sub_D9990(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_DEA98();
    sub_DE414( (uint64_t)"Fatal error",  v3,  v4,  (uint64_t)"Can't construct Array with count < 0",  v5,  v6,  (uint64_t)"Swift/Array.swift");
    __break(1u);
  }

  else
  {
    if (a1)
    {
      uint64_t v2 = sub_494C(&qword_18EB28);
      *(void *)(sub_DEEBC(v2) + 16) = a1;
    }

    sub_DEDF0();
  }

void sub_D99FC(uint64_t a1)
{
}

void sub_D9A08(uint64_t a1)
{
}

void sub_D9A14(uint64_t a1, uint64_t (*a2)(void))
{
  if (a1 < 0)
  {
    sub_DEA98();
    sub_DE414( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"Can't construct Array with count < 0",  v6,  v7,  (uint64_t)"Swift/Array.swift");
    __break(1u);
  }

  else
  {
    if (a1)
    {
      uint64_t v3 = a2(0LL);
      *(void *)((char *)&dword_10 + (sub_DEEBC(v3) & 0xFFFFFFFFFFFFF8LL)) = a1;
    }

    sub_DEDF0();
  }

void sub_D9A84()
{
  uint64_t v1 = *v0;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
  *uint64_t v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_388C0(0, *(void *)(v1 + 16) + 1LL, 1, v1);
    *uint64_t v0 = v3;
  }

uint64_t sub_D9ACC(uint64_t result)
{
  unint64_t v2 = *(void *)((char *)&dword_18 + (*v1 & 0xFFFFFFFFFFFFF8LL));
  return result;
}

void sub_D9AF8(uint64_t a1)
{
  unint64_t v2 = *(void *)(*v1 + 24);
  if (a1 + 1 > (uint64_t)(v2 >> 1))
  {
    sub_388C0(v2 > 1, a1 + 1, 1, *v1);
    uint64_t *v1 = v3;
  }

uint64_t sub_D9B34(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v21, *(void *)(*v3 + 40LL));
  if (a3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(a3);
    String.hash(into:)(v21, a2, a3);
    swift_bridgeObjectRelease(a3);
  }

  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain(v7);
  }

  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0)
  {
LABEL_16:
    swift_bridgeObjectRelease(v7);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v21[0] = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    swift_bridgeObjectRetain(a3);
    sub_D9FA4(a2, a3, v10, isUniquelyReferenced_nonNull_native);
    uint64_t v17 = *v3;
    *uint64_t v3 = v21[0];
    swift_bridgeObjectRelease(v17);
    *a1 = a2;
    a1[1] = a3;
    return 1LL;
  }

  uint64_t v11 = ~v9;
  uint64_t v12 = *(void *)(v7 + 48);
  while (1)
  {
    __int128 v13 = (void *)(v12 + 16 * v10);
    uint64_t v14 = v13[1];
    if (v14) {
      break;
    }
    if (!a3) {
      goto LABEL_18;
    }
LABEL_15:
    unint64_t v10 = (v10 + 1) & v11;
    if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
      goto LABEL_16;
    }
  }

  if (!a3) {
    goto LABEL_15;
  }
  BOOL v15 = *v13 == a2 && v14 == a3;
  if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v13, v14, a2, a3, 0LL) & 1) == 0) {
    goto LABEL_15;
  }
  swift_bridgeObjectRelease(a3);
LABEL_18:
  swift_bridgeObjectRelease(v7);
  uint64_t v19 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
  uint64_t v20 = v19[1];
  *a1 = *v19;
  a1[1] = v20;
  swift_bridgeObjectRetain(v20);
  return 0LL;
}

unint64_t sub_D9CFC(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_494C(&qword_18EAF8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  if (*(void *)(v3 + 16))
  {
    uint64_t v6 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v7 = (void *)(v3 + 56);
    uint64_t v8 = -1LL;
    if (v6 < 64) {
      uint64_t v8 = ~(-1LL << v6);
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v6 + 63) >> 6;
    unint64_t result = swift_retain();
    int64_t v12 = 0LL;
    if (!v9) {
      goto LABEL_9;
    }
LABEL_8:
    unint64_t v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
    {
      unint64_t result = sub_D9ECC(*(void *)(*(void *)(v3 + 48) + 16 * i), *(void *)(*(void *)(v3 + 48) + 16 * i + 8), v5);
      if (v9) {
        goto LABEL_8;
      }
LABEL_9:
      int64_t v15 = v12 + 1;
      if (__OFADD__(v12, 1LL))
      {
        __break(1u);
LABEL_31:
        __break(1u);
        return result;
      }

      if (v15 >= v10) {
        goto LABEL_25;
      }
      unint64_t v16 = v7[v15];
      ++v12;
      if (!v16)
      {
        int64_t v12 = v15 + 1;
        if (v15 + 1 >= v10) {
          goto LABEL_25;
        }
        unint64_t v16 = v7[v12];
        if (!v16)
        {
          int64_t v12 = v15 + 2;
          if (v15 + 2 >= v10) {
            goto LABEL_25;
          }
          unint64_t v16 = v7[v12];
          if (!v16)
          {
            int64_t v17 = v15 + 3;
            if (v17 >= v10)
            {
LABEL_25:
              swift_release();
              uint64_t v18 = 1LL << *(_BYTE *)(v3 + 32);
              if (v18 > 63) {
                sub_DA158(0LL, (unint64_t)(v18 + 63) >> 6, (void *)(v3 + 56));
              }
              else {
                *uint64_t v7 = -1LL << v18;
              }
              *(void *)(v3 + 16) = 0LL;
              break;
            }

            unint64_t v16 = v7[v17];
            if (!v16)
            {
              while (1)
              {
                int64_t v12 = v17 + 1;
                if (__OFADD__(v17, 1LL)) {
                  goto LABEL_31;
                }
                if (v12 >= v10) {
                  goto LABEL_25;
                }
                unint64_t v16 = v7[v12];
                ++v17;
                if (v16) {
                  goto LABEL_22;
                }
              }
            }

            int64_t v12 = v17;
          }
        }
      }

unint64_t sub_D9ECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(a2);
    String.hash(into:)(v9, a1, a2);
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Swift::Int v6 = Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v6 & ~(-1LL << *(_BYTE *)(a3 + 32)), a3 + 56, ~(-1LL << *(_BYTE *)(a3 + 32)));
  *(void *)(a3 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  uint64_t v8 = (void *)(*(void *)(a3 + 48) + 16 * result);
  *uint64_t v8 = a1;
  v8[1] = a2;
  ++*(void *)(a3 + 16);
  return result;
}

uint64_t sub_D9FA4(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 <= v9 || (a4 & 1) == 0)
  {
    uint64_t v11 = v9 + 1;
    if ((a4 & 1) != 0)
    {
      sub_D9CFC(v11);
    }

    else
    {
      if (v10 > v9)
      {
        unint64_t result = (uint64_t)sub_DA174();
        goto LABEL_23;
      }

      sub_DA320(v11);
    }

    uint64_t v12 = *v4;
    Hasher.init(_seed:)(v26, *(void *)(*v4 + 40));
    if (a2)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(a2);
      String.hash(into:)(v26, v8, a2);
      swift_bridgeObjectRelease(a2);
    }

    else
    {
      Hasher._combine(_:)(0);
    }

    unint64_t result = Hasher._finalize()();
    uint64_t v13 = -1LL << *(_BYTE *)(v12 + 32);
    a3 = result & ~v13;
    uint64_t v14 = v12 + 56;
    if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
    {
      uint64_t v15 = ~v13;
      uint64_t v16 = *(void *)(v12 + 48);
      do
      {
        int64_t v17 = (void *)(v16 + 16 * a3);
        uint64_t v18 = v17[1];
        if (v18)
        {
          if (a2)
          {
            if (*v17 == v8 && v18 == a2) {
              goto LABEL_26;
            }
            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, v8, a2, 0LL);
            if ((result & 1) != 0) {
              goto LABEL_26;
            }
          }
        }

        else if (!a2)
        {
          goto LABEL_26;
        }

        a3 = (a3 + 1) & v15;
      }

      while (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0);
    }
  }

uint64_t sub_DA158(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }

  return result;
}

void *sub_DA174()
{
  uint64_t v1 = v0;
  sub_494C(&qword_18EAF8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1LL;
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    __int128 v20 = *(_OWORD *)(*(void *)(v2 + 48) + 16 * i);
    *(_OWORD *)(*(void *)(v4 + 48) + 16 * i) = v20;
    unint64_t result = (void *)swift_bridgeObjectRetain(*((void *)&v20 + 1));
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }

unint64_t sub_DA320(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_494C(&qword_18EAF8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    unint64_t result = swift_release();
    uint64_t *v2 = v5;
    return result;
  }

  uint64_t v6 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v7 = v3 + 56;
  uint64_t v8 = -1LL;
  if (v6 < 64) {
    uint64_t v8 = ~(-1LL << v6);
  }
  unint64_t v9 = v8 & *(void *)(v3 + 56);
  int64_t v10 = (unint64_t)(v6 + 63) >> 6;
  unint64_t result = swift_retain();
  int64_t v12 = 0LL;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    unint64_t v18 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    swift_bridgeObjectRetain(v20);
    unint64_t result = sub_D9ECC(v19, v20, v5);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v15 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v15 >= v10) {
      goto LABEL_25;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v15);
    ++v12;
    if (!v16)
    {
      int64_t v12 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_25;
      }
      unint64_t v16 = *(void *)(v7 + 8 * v12);
      if (!v16)
      {
        int64_t v12 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_25;
        }
        unint64_t v16 = *(void *)(v7 + 8 * v12);
        if (!v16) {
          break;
        }
      }
    }

void sub_DA4CC(void *a1)
{
}

void sub_DA4D8(void *a1)
{
}

void sub_DA4E4(void *a1)
{
}

void sub_DA4F0(void *a1)
{
}

void sub_DA4FC(void *a1)
{
  id v2 = [a1 scheduleID];

  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  }

  sub_BB0AC();
  sub_1EB0C();
}

void sub_DA55C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setScheduleID:v4];
}

void sub_DA5A0(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  [a2 setMedicationIDs:isa];
}

void sub_DA5F8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setStrengthUnit:v4];
}

void sub_DA63C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setDosageUnit:v4];
}

void sub_DA680(void *a1, SEL *a2, uint64_t (*a3)(void))
{
  id v4 = [a1 *a2];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = a3(0LL);
    static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);
  }

  sub_A890();
}

void sub_DA6D8(void *a1, SEL *a2)
{
  id v3 = [a1 *a2];
  if (v3)
  {
    sub_DEDFC((uint64_t)v3);
  }

  sub_1EB8C();
  sub_1EB0C();
}

uint64_t sub_DA724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }

  return result;
}

uint64_t type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters(uint64_t a1)
{
  uint64_t result = qword_18EB88;
  if (!qword_18EB88) {
    return swift_getSingletonMetadata( a1,  &nominal type descriptor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters);
  }
  return result;
}

uint64_t sub_DA78C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_DA7B0()
{
  uint64_t v0 = swift_task_alloc(dword_18E9DC);
  uint64_t v1 = (void *)sub_36A28(v0);
  uint64_t v2 = sub_3637C(v1);
  return sub_310E8(v2, v3);
}

uint64_t sub_DA7F8()
{
  return sub_1EB8C();
}

uint64_t sub_DA820()
{
  return sub_D72D8(v0[2], v0[3], v0[4]);
}

uint64_t sub_DA834()
{
  return swift_deallocObject(v0, 41LL, 7LL);
}

uint64_t sub_DA85C()
{
  char v2 = *(_BYTE *)(v0 + 40);
  return String.init<A>(describing:)(&v2, &unk_180630);
}

_BYTE **sub_DA890(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  return sub_390DC(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_DA89C()
{
  return sub_390EC(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_DA8A4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return sub_3910C(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_DA8BC()
{
  uint64_t v0 = swift_task_alloc(dword_18EA04);
  uint64_t v1 = (void *)sub_36A28(v0);
  uint64_t v2 = sub_3637C(v1);
  return sub_310E8(v2, v3);
}

uint64_t sub_DA900()
{
  uint64_t v0 = swift_task_alloc(dword_18EA14);
  uint64_t v1 = (void *)sub_36A28(v0);
  uint64_t v2 = sub_3637C(v1);
  return sub_310E8(v2, v3);
}

uint64_t sub_DA944()
{
  uint64_t v0 = swift_task_alloc(dword_18EA24);
  uint64_t v1 = (void *)sub_36A28(v0);
  uint64_t v2 = sub_3637C(v1);
  return sub_310E8(v2, v3);
}

uint64_t sub_DA988()
{
  return sub_D7314(*(void **)(v0 + 16));
}

uint64_t sub_DA998()
{
  uint64_t v0 = swift_task_alloc(dword_18EA34);
  uint64_t v1 = (void *)sub_36A28(v0);
  uint64_t v2 = sub_3637C(v1);
  return sub_310E8(v2, v3);
}

uint64_t sub_DA9DC()
{
  uint64_t v0 = swift_task_alloc(dword_18EA44);
  uint64_t v1 = (void *)sub_36A28(v0);
  uint64_t v2 = sub_3637C(v1);
  return sub_310E8(v2, v3);
}

uint64_t sub_DAA24()
{
  return sub_DAAA0((uint64_t (*)(_OWORD *))sub_D7104);
}

uint64_t sub_DAA34()
{
  return sub_DAAA0((uint64_t (*)(_OWORD *))sub_D7140);
}

uint64_t sub_DAA44()
{
  return sub_DAAA0((uint64_t (*)(_OWORD *))sub_D716C);
}

uint64_t sub_DAA54()
{
  return sub_DAAA0((uint64_t (*)(_OWORD *))sub_D71AC);
}

uint64_t sub_DAA64()
{
  return swift_deallocObject(v0, 81LL, 7LL);
}

uint64_t sub_DAA94()
{
  return sub_DAAA0((uint64_t (*)(_OWORD *))sub_D71E8);
}

uint64_t sub_DAAA0(uint64_t (*a1)(_OWORD *))
{
  uint64_t v2 = *(void *)(v1 + 48);
  char v3 = *(_BYTE *)(v1 + 56);
  char v4 = *(_BYTE *)(v1 + 80);
  __int128 v5 = *(_OWORD *)(v1 + 32);
  v7[0] = *(_OWORD *)(v1 + 16);
  v7[1] = v5;
  uint64_t v8 = v2;
  char v9 = v3;
  __int128 v10 = *(_OWORD *)(v1 + 64);
  char v11 = v4;
  return a1(v7);
}

uint64_t sub_DAAF4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_DAB38()
{
  uint64_t v0 = swift_task_alloc(dword_18EA54);
  uint64_t v1 = (void *)sub_36A28(v0);
  uint64_t v2 = sub_3637C(v1);
  return sub_310E8(v2, v3);
}

uint64_t sub_DAB7C()
{
  uint64_t v0 = swift_task_alloc(dword_18EA64);
  uint64_t v1 = (void *)sub_36A28(v0);
  uint64_t v2 = sub_3637C(v1);
  return sub_310E8(v2, v3);
}

void sub_DABC0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_6DF0(a1, a2, a3);
  sub_9926C(v3);
  sub_A890();
}

uint64_t sub_DABE0()
{
  uint64_t v0 = swift_task_alloc(dword_18EA74);
  uint64_t v1 = (void *)sub_36A28(v0);
  uint64_t v2 = sub_3637C(v1);
  return sub_310E8(v2, v3);
}

uint64_t sub_DAC24()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_DAC44()
{
  return sub_D7218(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_DAC54()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

id sub_DAC78()
{
  return *(id *)(v0 + 16);
}

void sub_DAC88()
{
}

void sub_DAC90(uint64_t *a1, void **a2, uint64_t a3)
{
}

uint64_t sub_DAC98()
{
  uint64_t v0 = swift_task_alloc(dword_18EA84);
  uint64_t v1 = (void *)sub_36A28(v0);
  uint64_t v2 = sub_3637C(v1);
  return sub_310E8(v2, v3);
}

uint64_t sub_DACDC()
{
  uint64_t v0 = swift_task_alloc(dword_18EA94);
  uint64_t v1 = (void *)sub_36A28(v0);
  uint64_t v2 = sub_3637C(v1);
  return sub_310E8(v2, v3);
}

uint64_t sub_DAD20()
{
  uint64_t v0 = swift_task_alloc(dword_18EAC4);
  uint64_t v1 = (void *)sub_36A28(v0);
  uint64_t v2 = sub_3637C(v1);
  return sub_310E8(v2, v3);
}

uint64_t sub_DAD64()
{
  uint64_t v0 = swift_task_alloc(dword_18EAD4);
  uint64_t v1 = (void *)sub_36A28(v0);
  uint64_t v2 = sub_3637C(v1);
  return sub_34F70(v2, v3);
}

uint64_t sub_DADA8()
{
  uint64_t v0 = swift_task_alloc(dword_18EAE4);
  uint64_t v1 = (void *)sub_36A28(v0);
  uint64_t v2 = sub_3637C(v1);
  return sub_310E8(v2, v3);
}

void sub_DADFC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_6DF0(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(v3, v4, v5);
  sub_A890();
}

void *sub_DAE34(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[7];
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t sub_DAE90( uint64_t a1, __int128 *a2, _OWORD *a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v37 = a13;
  uint64_t v38 = a15;
  uint64_t v21 = sub_B76C(&v36);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a13 - 8) + 32LL))(v21, a5, a13);
  uint64_t v34 = a14;
  uint64_t v35 = a16;
  uint64_t v22 = sub_B76C(&v33);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a14 - 8) + 32LL))(v22, a9, a14);
  *(void *)(a11 + 16) = a1;
  sub_A304((uint64_t)a2, a11 + 24);
  sub_A13C(a3, (_OWORD *)(a11 + 64));
  sub_35A9C(a4, (void *)(a11 + 224));
  sub_20004(&v36, a11 + 296);
  *(void *)(a11 + 336) = a6;
  *(void *)(a11 + 344) = a7;
  *(void *)(a11 + 352) = a8;
  sub_20004(&v33, a11 + 400);
  sub_20004(a2, (uint64_t)v29);
  memcpy(__dst, a3, sizeof(__dst));
  if (*(void *)(a10 + 24))
  {
    sub_D878(__dst);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v29);
    sub_20004((__int128 *)a10, (uint64_t)&v30);
  }

  else
  {
    __int128 v31 = &type metadata for MedsCorrectionsFlowProvider;
    __int128 v32 = &off_17F1C8;
    uint64_t v23 = swift_allocObject(&unk_180598, 216LL, 7LL);
    *(void *)&__int128 v30 = v23;
    sub_20004(v29, v23 + 16);
    memcpy((void *)(v23 + 56), __dst, 0xA0uLL);
    sub_279E0(a10, &qword_18AF10);
  }

  sub_20004(&v30, a11 + 360);
  return a11;
}

uint64_t sub_DB048()
{
  return swift_deallocObject(v0, 216LL, 7LL);
}

void *sub_DB08C(_WORD *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *a1 = *(_WORD *)a2;
    uint64_t v7 = a3[6];
    uint64_t v8 = (char *)a1 + v7;
    char v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for SpeakableString(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v9, 1LL, v10))
    {
      uint64_t v11 = sub_494C(&qword_189D00);
      memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v8, 0LL, 1LL, v10);
    }

    uint64_t v13 = a3[7];
    uint64_t v14 = a3[8];
    int64_t v15 = (char *)v4 + v13;
    unint64_t v16 = (char *)a2 + v13;
    *(void *)int64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    *((_BYTE *)v4 + v14) = *((_BYTE *)a2 + v14);
    uint64_t v17 = a3[9];
    uint64_t v18 = a3[10];
    uint64_t v19 = (char *)v4 + v17;
    uint64_t v20 = (char *)a2 + v17;
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = (char *)v4 + v18;
    uint64_t v22 = (char *)a2 + v18;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v18, 1LL, v10))
    {
      uint64_t v23 = sub_494C(&qword_189D00);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v21, v22, v10);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0LL, 1LL, v10);
    }

    uint64_t v24 = a3[12];
    *((_BYTE *)v4 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    uint64_t v25 = *(void *)((char *)a2 + v24);
    *(void *)((char *)v4 + v24) = v25;
    swift_bridgeObjectRetain(v25);
  }

  return v4;
}

uint64_t sub_DB238(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for SpeakableString(0LL);
  uint64_t v6 = a1 + *(int *)(a2 + 40);
  return swift_bridgeObjectRelease();
}

_WORD *sub_DB2D4(_WORD *a1, _WORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0LL, 1LL, v9);
  }

  uint64_t v11 = a3[7];
  uint64_t v12 = a3[8];
  uint64_t v13 = (char *)a1 + v11;
  uint64_t v14 = (char *)a2 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  *((_BYTE *)a1 + v1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *((_BYTE *)a2 + v12);
  uint64_t v15 = a3[9];
  uint64_t v16 = a3[10];
  uint64_t v17 = (char *)a1 + v15;
  uint64_t v18 = (char *)a2 + v15;
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = (char *)a1 + v16;
  uint64_t v20 = (char *)a2 + v16;
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v16, 1LL, v9))
  {
    uint64_t v21 = sub_494C(&qword_189D00);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v19, v20, v9);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v19, 0LL, 1LL, v9);
  }

  uint64_t v22 = a3[12];
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  uint64_t v23 = *(void *)((char *)a2 + v22);
  *(void *)((char *)a1 + v2_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v23;
  swift_bridgeObjectRetain(v23);
  return a1;
}

_BYTE *sub_DB454(_BYTE *a1, _BYTE *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = a3[6];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  int v10 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v7, 1LL, v9);
  int v11 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1LL, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0LL, 1LL, v9);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = sub_494C(&qword_189D00);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v14 = a3[7];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = *(void *)v16;
  v15[8] = v16[8];
  *(void *)uint64_t v15 = v17;
  a1[a3[8]] = a2[a3[8]];
  uint64_t v18 = a3[9];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = *(void *)v20;
  v19[8] = v20[8];
  *(void *)uint64_t v19 = v21;
  uint64_t v22 = a3[10];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  int v25 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v22], 1LL, v9);
  int v26 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1LL, v9);
  if (!v25)
  {
    uint64_t v27 = *(void *)(v9 - 8);
    if (!v26)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v27 + 24))(v23, v24, v9);
      goto LABEL_13;
    }

    (*(void (**)(_BYTE *, uint64_t))(v27 + 8))(v23, v9);
    goto LABEL_12;
  }

  if (v26)
  {
LABEL_12:
    uint64_t v28 = sub_494C(&qword_189D00);
    memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v23, v24, v9);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v23, 0LL, 1LL, v9);
LABEL_13:
  a1[a3[11]] = a2[a3[11]];
  uint64_t v29 = a3[12];
  uint64_t v30 = *(void *)&a2[v29];
  *(void *)&a1[v29] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease();
  return a1;
}

_WORD *sub_DB68C(_WORD *a1, _WORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0LL, 1LL, v9);
  }

  uint64_t v11 = a3[7];
  uint64_t v12 = a3[8];
  uint64_t v13 = (char *)a1 + v11;
  uint64_t v14 = (char *)a2 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  *((_BYTE *)a1 + v1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *((_BYTE *)a2 + v12);
  uint64_t v15 = a3[9];
  uint64_t v16 = a3[10];
  uint64_t v17 = (char *)a1 + v15;
  uint64_t v18 = (char *)a2 + v15;
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = (char *)a1 + v16;
  uint64_t v20 = (char *)a2 + v16;
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v16, 1LL, v9))
  {
    uint64_t v21 = sub_494C(&qword_189D00);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v19, v20, v9);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v19, 0LL, 1LL, v9);
  }

  uint64_t v22 = a3[12];
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *(void *)((char *)a1 + v2_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)((char *)a2 + v22);
  return a1;
}

_BYTE *sub_DB808(_BYTE *a1, _BYTE *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = a3[6];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  int v10 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v7, 1LL, v9);
  int v11 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1LL, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0LL, 1LL, v9);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = sub_494C(&qword_189D00);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  a1[v15] = a2[v15];
  uint64_t v18 = a3[9];
  uint64_t v19 = a3[10];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = &a1[v19];
  uint64_t v23 = &a2[v19];
  int v24 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v19], 1LL, v9);
  int v25 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v23, 1LL, v9);
  if (!v24)
  {
    uint64_t v26 = *(void *)(v9 - 8);
    if (!v25)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v26 + 40))(v22, v23, v9);
      goto LABEL_13;
    }

    (*(void (**)(_BYTE *, uint64_t))(v26 + 8))(v22, v9);
    goto LABEL_12;
  }

  if (v25)
  {
LABEL_12:
    uint64_t v27 = sub_494C(&qword_189D00);
    memcpy(v22, v23, *(void *)(*(void *)(v27 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v22, v23, v9);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v22, 0LL, 1LL, v9);
LABEL_13:
  uint64_t v28 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  *(void *)&a1[v28] = *(void *)&a2[v28];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_DBA2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_DBA38);
}

uint64_t sub_DBA38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_494C(&qword_189D00);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1 + *(int *)(a3 + 24), a2, v6);
  }
  unint64_t v8 = *(void *)(a1 + *(int *)(a3 + 48));
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(v8) = -1;
  }
  int v9 = v8 - 1;
  if (v9 < 0) {
    int v9 = -1;
  }
  return (v9 + 1);
}

uint64_t sub_DBAC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_DBAD0);
}

void sub_DBAD0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_494C(&qword_189D00);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
  {
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1 + *(int *)(a4 + 24), a2, a2, v8);
  }

  else
  {
    *(void *)(a1 + *(int *)(a4 + 48)) = a2;
    sub_1EB0C();
  }

void sub_DBB44(uint64_t a1)
{
  v4[0] = &unk_13D428;
  v4[1] = &unk_13D428;
  sub_671D8(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(v2 - 8) + 64LL;
    uint64_t v6 = &unk_13D440;
    uint64_t v7 = &unk_13D428;
    uint64_t v8 = &unk_13D440;
    uint64_t v9 = v5;
    int v10 = &unk_13D428;
    int v11 = &unk_13D458;
    swift_initStructMetadata(a1, 256LL, 9LL, v4, a1 + 16);
  }

uint64_t getEnumTagSinglePayload for CycleTrackingLogModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }

uint64_t sub_DBC5C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(sub_A5DC((uint64_t)v0, v4) = 1;
  }
  else {
    LODWORD(sub_A5DC((uint64_t)v0, v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_DBCA8 + 4 * byte_13D303[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_DBCDC + 4 * byte_13D2FE[v4]))();
}

uint64_t sub_DBCDC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_DBCE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xDBCECLL);
  }
  return result;
}

uint64_t sub_DBCF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xDBD00LL);
  }
  *(_BYTE *)uint64_t result = a2 + 5;
  return result;
}

uint64_t sub_DBD04(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_DBD0C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ConfirmationStatus()
{
}

unint64_t sub_DBD28()
{
  unint64_t result = qword_18EBE0;
  if (!qword_18EBE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_13D4C4, &unk_180630);
    atomic_store(result, (unint64_t *)&qword_18EBE0);
  }

  return result;
}

uint64_t sub_DBE38()
{
  uint64_t v2 = v0[3421];
  STACK[0x200] = v0[3348];
  STACK[0x208] = v0[3347];
  STACK[0x210] = v0[3346];
  STACK[0x218] = v0[3345];
  STACK[0x220] = v0[3344];
  STACK[0x228] = v0[3341];
  STACK[0x230] = v0[3340];
  STACK[0x238] = v0[3339];
  STACK[0x240] = v0[3338];
  STACK[0x248] = v0[3337];
  STACK[0x250] = v0[3336];
  STACK[0x258] = v0[3335];
  STACK[0x260] = v0[3334];
  STACK[0x268] = v0[3333];
  STACK[0x270] = v0[3332];
  STACK[0x278] = v0[3331];
  STACK[0x280] = v0[3330];
  STACK[0x288] = v0[3329];
  STACK[0x290] = v0[3328];
  STACK[0x298] = v0[3327];
  STACK[0x2A0] = v0[3326];
  STACK[0x2A8] = v0[3325];
  STACK[0x2B0] = v0[3324];
  STACK[0x2B8] = v0[3323];
  STACK[0x2C0] = v0[3322];
  STACK[0x2C8] = v0[3321];
  STACK[0x2D0] = v0[3320];
  STACK[0x2D8] = v0[3319];
  STACK[0x2E0] = v0[3318];
  STACK[0x2E8] = v0[3317];
  STACK[0x2F0] = v0[3316];
  STACK[0x2F8] = v0[3315];
  STACK[0x300] = v0[3314];
  STACK[0x308] = v0[3313];
  STACK[0x310] = v0[3312];
  STACK[0x318] = v0[3311];
  STACK[0x320] = v0[3310];
  STACK[0x328] = v0[3309];
  STACK[0x330] = v0[3308];
  STACK[0x338] = v0[3307];
  STACK[0x340] = v0[3306];
  STACK[0x348] = v0[3305];
  STACK[0x350] = v0[3304];
  STACK[0x358] = v0[3302];
  STACK[0x360] = v0[3301];
  STACK[0x368] = v0[3300];
  STACK[0x370] = v0[3297];
  STACK[0x378] = v0[3296];
  STACK[0x380] = v0[3294];
  STACK[0x388] = v0[3293];
  STACK[0x390] = v0[3292];
  STACK[0x398] = v0[3291];
  STACK[0x3A0] = v0[3289];
  STACK[0x3A8] = v0[3288];
  STACK[0x3B0] = v0[3287];
  STACK[0x3B8] = v0[3286];
  STACK[0x3C0] = v0[3285];
  STACK[0x3C8] = v0[3284];
  STACK[0x3D0] = v0[3283];
  STACK[0x3D8] = v0[3282];
  STACK[0x3E0] = v0[3281];
  STACK[0x3E8] = v0[3280];
  STACK[0x3F0] = v0[3279];
  STACK[0x3F8] = v0[3278];
  STACK[0x400] = v0[3275];
  STACK[0x408] = v0[3274];
  STACK[0x410] = v0[3273];
  STACK[0x418] = v0[3272];
  STACK[0x420] = v0[3271];
  STACK[0x428] = v0[3270];
  STACK[0x430] = v0[3269];
  STACK[0x438] = v0[3268];
  uint64_t v3 = v0[3266];
  *(void *)(v1 - 256) = v0[3267];
  *(void *)(v1 - 248) = v3;
  uint64_t v4 = v0[3264];
  *(void *)(v1 - 240) = v0[3265];
  *(void *)(v1 - 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v4;
  uint64_t v5 = v0[3262];
  *(void *)(v1 - 224) = v0[3263];
  *(void *)(v1 - 216) = v5;
  uint64_t v6 = v0[3260];
  *(void *)(v1 - 208) = v0[3261];
  *(void *)(v1 - 200) = v6;
  uint64_t v7 = v0[3258];
  *(void *)(v1 - 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0[3259];
  *(void *)(v1 - 184) = v7;
  uint64_t v8 = v0[3256];
  *(void *)(v1 - 176) = v0[3257];
  *(void *)(v1 - 168) = v8;
  uint64_t v9 = v0[3254];
  *(void *)(v1 - 160) = v0[3255];
  *(void *)(v1 - 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v9;
  uint64_t v10 = v0[3252];
  *(void *)(v1 - 144) = v0[3253];
  *(void *)(v1 - 136) = v10;
  uint64_t v11 = v0[3248];
  *(void *)(v1 - 128) = v0[3251];
  *(void *)(v1 - 120) = v11;
  return swift_task_dealloc(v2);
}

uint64_t sub_DC288()
{
  uint64_t v2 = v0[3421];
  STACK[0x200] = v0[3349];
  STACK[0x208] = v0[3348];
  STACK[0x210] = v0[3347];
  STACK[0x218] = v0[3346];
  STACK[0x220] = v0[3345];
  STACK[0x228] = v0[3344];
  STACK[0x230] = v0[3341];
  STACK[0x238] = v0[3340];
  STACK[0x240] = v0[3339];
  STACK[0x248] = v0[3338];
  STACK[0x250] = v0[3337];
  STACK[0x258] = v0[3336];
  STACK[0x260] = v0[3335];
  STACK[0x268] = v0[3334];
  STACK[0x270] = v0[3333];
  STACK[0x278] = v0[3332];
  STACK[0x280] = v0[3331];
  STACK[0x288] = v0[3330];
  STACK[0x290] = v0[3329];
  STACK[0x298] = v0[3328];
  STACK[0x2A0] = v0[3327];
  STACK[0x2A8] = v0[3326];
  STACK[0x2B0] = v0[3325];
  STACK[0x2B8] = v0[3324];
  STACK[0x2C0] = v0[3323];
  STACK[0x2C8] = v0[3322];
  STACK[0x2D0] = v0[3321];
  STACK[0x2D8] = v0[3320];
  STACK[0x2E0] = v0[3319];
  STACK[0x2E8] = v0[3318];
  STACK[0x2F0] = v0[3317];
  STACK[0x2F8] = v0[3316];
  STACK[0x300] = v0[3315];
  STACK[0x308] = v0[3314];
  STACK[0x310] = v0[3313];
  STACK[0x318] = v0[3312];
  STACK[0x320] = v0[3311];
  STACK[0x328] = v0[3310];
  STACK[0x330] = v0[3309];
  STACK[0x338] = v0[3308];
  STACK[0x340] = v0[3307];
  STACK[0x348] = v0[3306];
  STACK[0x350] = v0[3305];
  STACK[0x358] = v0[3304];
  STACK[0x360] = v0[3302];
  STACK[0x368] = v0[3301];
  STACK[0x370] = v0[3300];
  STACK[0x378] = v0[3297];
  STACK[0x380] = v0[3296];
  STACK[0x388] = v0[3294];
  STACK[0x390] = v0[3293];
  STACK[0x398] = v0[3292];
  STACK[0x3A0] = v0[3291];
  STACK[0x3A8] = v0[3289];
  STACK[0x3B0] = v0[3288];
  STACK[0x3B8] = v0[3287];
  STACK[0x3C0] = v0[3286];
  STACK[0x3C8] = v0[3285];
  STACK[0x3D0] = v0[3284];
  STACK[0x3D8] = v0[3283];
  STACK[0x3E0] = v0[3282];
  STACK[0x3E8] = v0[3281];
  STACK[0x3F0] = v0[3280];
  STACK[0x3F8] = v0[3279];
  STACK[0x400] = v0[3278];
  STACK[0x408] = v0[3275];
  STACK[0x410] = v0[3274];
  STACK[0x418] = v0[3273];
  STACK[0x420] = v0[3272];
  STACK[0x428] = v0[3271];
  STACK[0x430] = v0[3270];
  STACK[0x438] = v0[3269];
  STACK[0x440] = v0[3268];
  STACK[0x448] = v0[3267];
  uint64_t v3 = v0[3265];
  *(void *)(v1 - 256) = v0[3266];
  *(void *)(v1 - 248) = v3;
  uint64_t v4 = v0[3263];
  *(void *)(v1 - 240) = v0[3264];
  *(void *)(v1 - 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v4;
  uint64_t v5 = v0[3261];
  *(void *)(v1 - 224) = v0[3262];
  *(void *)(v1 - 216) = v5;
  uint64_t v6 = v0[3259];
  *(void *)(v1 - 208) = v0[3260];
  *(void *)(v1 - 200) = v6;
  uint64_t v7 = v0[3257];
  *(void *)(v1 - 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0[3258];
  *(void *)(v1 - 184) = v7;
  uint64_t v8 = v0[3255];
  *(void *)(v1 - 176) = v0[3256];
  *(void *)(v1 - 168) = v8;
  uint64_t v9 = v0[3253];
  *(void *)(v1 - 160) = v0[3254];
  *(void *)(v1 - 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v9;
  uint64_t v10 = v0[3251];
  *(void *)(v1 - 144) = v0[3252];
  *(void *)(v1 - 136) = v10;
  *(void *)(v1 - 128) = v0[3248];
  return swift_task_dealloc(v2);
}

uint64_t sub_DC6E0()
{
  uint64_t v2 = v0[3421];
  STACK[0x200] = v0[3348];
  STACK[0x208] = v0[3347];
  STACK[0x210] = v0[3346];
  STACK[0x218] = v0[3345];
  STACK[0x220] = v0[3344];
  STACK[0x228] = v0[3341];
  STACK[0x230] = v0[3340];
  STACK[0x238] = v0[3339];
  STACK[0x240] = v0[3338];
  STACK[0x248] = v0[3337];
  STACK[0x250] = v0[3336];
  STACK[0x258] = v0[3335];
  STACK[0x260] = v0[3334];
  STACK[0x268] = v0[3333];
  STACK[0x270] = v0[3332];
  STACK[0x278] = v0[3331];
  STACK[0x280] = v0[3330];
  STACK[0x288] = v0[3329];
  STACK[0x290] = v0[3328];
  STACK[0x298] = v0[3327];
  STACK[0x2A0] = v0[3326];
  STACK[0x2A8] = v0[3325];
  STACK[0x2B0] = v0[3324];
  STACK[0x2B8] = v0[3323];
  STACK[0x2C0] = v0[3322];
  STACK[0x2C8] = v0[3321];
  STACK[0x2D0] = v0[3320];
  STACK[0x2D8] = v0[3319];
  STACK[0x2E0] = v0[3318];
  STACK[0x2E8] = v0[3317];
  STACK[0x2F0] = v0[3316];
  STACK[0x2F8] = v0[3315];
  STACK[0x300] = v0[3314];
  STACK[0x308] = v0[3313];
  STACK[0x310] = v0[3312];
  STACK[0x318] = v0[3311];
  STACK[0x320] = v0[3310];
  STACK[0x328] = v0[3309];
  STACK[0x330] = v0[3308];
  STACK[0x338] = v0[3307];
  STACK[0x340] = v0[3306];
  STACK[0x348] = v0[3305];
  STACK[0x350] = v0[3304];
  STACK[0x358] = v0[3302];
  STACK[0x360] = v0[3301];
  STACK[0x368] = v0[3300];
  STACK[0x370] = v0[3297];
  STACK[0x378] = v0[3296];
  STACK[0x380] = v0[3294];
  STACK[0x388] = v0[3293];
  STACK[0x390] = v0[3292];
  STACK[0x398] = v0[3291];
  STACK[0x3A0] = v0[3289];
  STACK[0x3A8] = v0[3288];
  STACK[0x3B0] = v0[3287];
  STACK[0x3B8] = v0[3286];
  STACK[0x3C0] = v0[3285];
  STACK[0x3C8] = v0[3284];
  STACK[0x3D0] = v0[3283];
  STACK[0x3D8] = v0[3282];
  STACK[0x3E0] = v0[3281];
  STACK[0x3E8] = v0[3280];
  STACK[0x3F0] = v0[3279];
  STACK[0x3F8] = v0[3278];
  STACK[0x400] = v0[3275];
  STACK[0x408] = v0[3274];
  STACK[0x410] = v0[3273];
  STACK[0x418] = v0[3272];
  STACK[0x420] = v0[3271];
  STACK[0x428] = v0[3270];
  STACK[0x430] = v0[3269];
  STACK[0x438] = v0[3268];
  STACK[0x440] = v0[3267];
  STACK[0x448] = v0[3266];
  STACK[0x450] = v0[3265];
  STACK[0x458] = v0[3264];
  uint64_t v3 = v0[3262];
  *(void *)(v1 - 256) = v0[3263];
  *(void *)(v1 - 248) = v3;
  uint64_t v4 = v0[3260];
  *(void *)(v1 - 240) = v0[3261];
  *(void *)(v1 - 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v4;
  uint64_t v5 = v0[3258];
  *(void *)(v1 - 224) = v0[3259];
  *(void *)(v1 - 216) = v5;
  uint64_t v6 = v0[3256];
  *(void *)(v1 - 208) = v0[3257];
  *(void *)(v1 - 200) = v6;
  uint64_t v7 = v0[3254];
  *(void *)(v1 - 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0[3255];
  *(void *)(v1 - 184) = v7;
  uint64_t v8 = v0[3252];
  *(void *)(v1 - 176) = v0[3253];
  *(void *)(v1 - 168) = v8;
  uint64_t v9 = v0[3248];
  *(void *)(v1 - 160) = v0[3251];
  *(void *)(v1 - 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v9;
  return swift_task_dealloc(v2);
}

uint64_t sub_DCB38(uint64_t a1)
{
  uint64_t v3 = v1[3266];
  *(void *)(v2 - 256) = v1[3267];
  *(void *)(v2 - 248) = v3;
  uint64_t v4 = v1[3264];
  *(void *)(v2 - 240) = v1[3265];
  *(void *)(v2 - 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v4;
  uint64_t v5 = v1[3262];
  *(void *)(v2 - 224) = v1[3263];
  *(void *)(v2 - 216) = v5;
  uint64_t v6 = v1[3260];
  *(void *)(v2 - 208) = v1[3261];
  *(void *)(v2 - 200) = v6;
  uint64_t v7 = v1[3258];
  *(void *)(v2 - 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v1[3259];
  *(void *)(v2 - 184) = v7;
  uint64_t v8 = v1[3256];
  *(void *)(v2 - 176) = v1[3257];
  *(void *)(v2 - 168) = v8;
  uint64_t v9 = v1[3254];
  *(void *)(v2 - 160) = v1[3255];
  *(void *)(v2 - 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v9;
  uint64_t v10 = v1[3252];
  *(void *)(v2 - 144) = v1[3253];
  *(void *)(v2 - 136) = v10;
  uint64_t v11 = v1[3248];
  *(void *)(v2 - 128) = v1[3251];
  *(void *)(v2 - 120) = v11;
  return swift_task_dealloc(a1);
}

uint64_t sub_DCBA8()
{
  uint64_t v2 = v0[3421];
  STACK[0x200] = v0[3348];
  STACK[0x208] = v0[3347];
  STACK[0x210] = v0[3346];
  STACK[0x218] = v0[3345];
  STACK[0x220] = v0[3344];
  STACK[0x228] = v0[3341];
  STACK[0x230] = v0[3340];
  STACK[0x238] = v0[3339];
  STACK[0x240] = v0[3338];
  STACK[0x248] = v0[3337];
  STACK[0x250] = v0[3336];
  STACK[0x258] = v0[3335];
  STACK[0x260] = v0[3334];
  STACK[0x268] = v0[3333];
  STACK[0x270] = v0[3332];
  STACK[0x278] = v0[3331];
  STACK[0x280] = v0[3330];
  STACK[0x288] = v0[3329];
  STACK[0x290] = v0[3328];
  STACK[0x298] = v0[3327];
  STACK[0x2A0] = v0[3326];
  STACK[0x2A8] = v0[3325];
  STACK[0x2B0] = v0[3324];
  STACK[0x2B8] = v0[3323];
  STACK[0x2C0] = v0[3322];
  STACK[0x2C8] = v0[3321];
  STACK[0x2D0] = v0[3320];
  STACK[0x2D8] = v0[3319];
  STACK[0x2E0] = v0[3318];
  STACK[0x2E8] = v0[3317];
  STACK[0x2F0] = v0[3316];
  STACK[0x2F8] = v0[3315];
  STACK[0x300] = v0[3314];
  STACK[0x308] = v0[3313];
  STACK[0x310] = v0[3312];
  STACK[0x318] = v0[3311];
  STACK[0x320] = v0[3310];
  STACK[0x328] = v0[3309];
  STACK[0x330] = v0[3308];
  STACK[0x338] = v0[3307];
  STACK[0x340] = v0[3306];
  STACK[0x348] = v0[3305];
  STACK[0x350] = v0[3304];
  STACK[0x358] = v0[3302];
  STACK[0x360] = v0[3301];
  STACK[0x368] = v0[3300];
  STACK[0x370] = v0[3297];
  STACK[0x378] = v0[3296];
  STACK[0x380] = v0[3294];
  STACK[0x388] = v0[3293];
  STACK[0x390] = v0[3292];
  STACK[0x398] = v0[3291];
  STACK[0x3A0] = v0[3289];
  STACK[0x3A8] = v0[3288];
  STACK[0x3B0] = v0[3287];
  STACK[0x3B8] = v0[3286];
  STACK[0x3C0] = v0[3285];
  STACK[0x3C8] = v0[3284];
  STACK[0x3D0] = v0[3283];
  STACK[0x3D8] = v0[3282];
  STACK[0x3E0] = v0[3281];
  STACK[0x3E8] = v0[3280];
  STACK[0x3F0] = v0[3279];
  STACK[0x3F8] = v0[3278];
  STACK[0x400] = v0[3275];
  STACK[0x408] = v0[3274];
  STACK[0x410] = v0[3273];
  STACK[0x418] = v0[3272];
  STACK[0x420] = v0[3271];
  STACK[0x428] = v0[3270];
  STACK[0x430] = v0[3269];
  STACK[0x438] = v0[3268];
  STACK[0x440] = v0[3267];
  STACK[0x448] = v0[3266];
  uint64_t v3 = v0[3264];
  *(void *)(v1 - 256) = v0[3265];
  *(void *)(v1 - 248) = v3;
  uint64_t v4 = v0[3262];
  *(void *)(v1 - 240) = v0[3263];
  *(void *)(v1 - 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v4;
  uint64_t v5 = v0[3260];
  *(void *)(v1 - 224) = v0[3261];
  *(void *)(v1 - 216) = v5;
  uint64_t v6 = v0[3258];
  *(void *)(v1 - 208) = v0[3259];
  *(void *)(v1 - 200) = v6;
  uint64_t v7 = v0[3256];
  *(void *)(v1 - 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0[3257];
  *(void *)(v1 - 184) = v7;
  uint64_t v8 = v0[3254];
  *(void *)(v1 - 176) = v0[3255];
  *(void *)(v1 - 168) = v8;
  uint64_t v9 = v0[3252];
  *(void *)(v1 - 160) = v0[3253];
  *(void *)(v1 - 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v9;
  uint64_t v10 = v0[3248];
  *(void *)(v1 - 144) = v0[3251];
  *(void *)(v1 - 136) = v10;
  return swift_task_dealloc(v2);
}

uint64_t sub_DCFFC()
{
  uint64_t result = v0[3421];
  STACK[0x200] = v0[3349];
  STACK[0x208] = v0[3348];
  STACK[0x210] = v0[3347];
  STACK[0x218] = v0[3346];
  STACK[0x220] = v0[3345];
  STACK[0x228] = v0[3344];
  STACK[0x230] = v0[3341];
  STACK[0x238] = v0[3340];
  STACK[0x240] = v0[3339];
  STACK[0x248] = v0[3338];
  STACK[0x250] = v0[3337];
  STACK[0x258] = v0[3336];
  STACK[0x260] = v0[3335];
  STACK[0x268] = v0[3334];
  STACK[0x270] = v0[3333];
  STACK[0x278] = v0[3332];
  STACK[0x280] = v0[3331];
  STACK[0x288] = v0[3330];
  STACK[0x290] = v0[3329];
  STACK[0x298] = v0[3328];
  STACK[0x2A0] = v0[3327];
  STACK[0x2A8] = v0[3326];
  STACK[0x2B0] = v0[3325];
  STACK[0x2B8] = v0[3324];
  STACK[0x2C0] = v0[3323];
  STACK[0x2C8] = v0[3322];
  STACK[0x2D0] = v0[3321];
  STACK[0x2D8] = v0[3320];
  STACK[0x2E0] = v0[3319];
  STACK[0x2E8] = v0[3318];
  STACK[0x2F0] = v0[3317];
  STACK[0x2F8] = v0[3316];
  STACK[0x300] = v0[3315];
  STACK[0x308] = v0[3314];
  STACK[0x310] = v0[3313];
  STACK[0x318] = v0[3312];
  STACK[0x320] = v0[3311];
  STACK[0x328] = v0[3310];
  STACK[0x330] = v0[3309];
  STACK[0x338] = v0[3308];
  STACK[0x340] = v0[3307];
  STACK[0x348] = v0[3306];
  STACK[0x350] = v0[3305];
  STACK[0x358] = v0[3304];
  STACK[0x360] = v0[3302];
  STACK[0x368] = v0[3301];
  STACK[0x370] = v0[3300];
  STACK[0x378] = v0[3297];
  STACK[0x380] = v0[3296];
  STACK[0x388] = v0[3294];
  STACK[0x390] = v0[3293];
  STACK[0x398] = v0[3292];
  STACK[0x3A0] = v0[3291];
  STACK[0x3A8] = v0[3289];
  STACK[0x3B0] = v0[3288];
  STACK[0x3B8] = v0[3287];
  STACK[0x3C0] = v0[3286];
  STACK[0x3C8] = v0[3285];
  STACK[0x3D0] = v0[3284];
  STACK[0x3D8] = v0[3283];
  STACK[0x3E0] = v0[3282];
  STACK[0x3E8] = v0[3281];
  STACK[0x3F0] = v0[3280];
  STACK[0x3F8] = v0[3279];
  STACK[0x400] = v0[3278];
  STACK[0x408] = v0[3275];
  STACK[0x410] = v0[3274];
  STACK[0x418] = v0[3273];
  STACK[0x420] = v0[3272];
  STACK[0x428] = v0[3271];
  STACK[0x430] = v0[3270];
  STACK[0x438] = v0[3269];
  STACK[0x440] = v0[3268];
  STACK[0x448] = v0[3267];
  STACK[0x450] = v0[3266];
  STACK[0x458] = v0[3265];
  STACK[0x460] = v0[3264];
  STACK[0x468] = v0[3263];
  STACK[0x470] = v0[3262];
  STACK[0x478] = v0[3261];
  STACK[0x480] = v0[3260];
  STACK[0x488] = v0[3259];
  return result;
}

uint64_t sub_DD42C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_DD43C()
{
  return sub_387E0((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 - 120), v0 - 128, v0 - 104, v0 - 96);
}

_WORD *sub_DD450(_WORD *result)
{
  *(void *)(v1 - 144) = 0LL;
  STACK[0x4D8] = 0LL;
  *uint64_t result = 0;
  *(void *)(v1 - 104) = result + 1;
  return result;
}

uint64_t sub_DD468()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t sub_DD494()
{
  return sub_D9904(v0, v1 - 112, v1 - 104, v1 - 96);
}

_WORD *sub_DD4AC(_WORD *result)
{
  *uint64_t result = 0;
  *(void *)(v1 - 104) = result + 1;
  return result;
}

_WORD *sub_DD4BC(_WORD *result)
{
  *uint64_t result = 0;
  *(void *)(v1 - 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = result + 1;
  return result;
}

uint64_t sub_DD4CC()
{
  return v0(v1, v2);
}

uint64_t sub_DD4DC()
{
  return swift_task_dealloc(STACK[0x420]);
}

uint64_t sub_DD4E4()
{
  return swift_task_dealloc(STACK[0x428]);
}

uint64_t sub_DD4EC()
{
  return swift_task_dealloc(STACK[0x418]);
}

uint64_t sub_DD4F4()
{
  return swift_task_dealloc(STACK[0x410]);
}

uint64_t sub_DD4FC()
{
  return swift_task_dealloc(STACK[0x408]);
}

uint64_t sub_DD504()
{
  return swift_task_dealloc(STACK[0x400]);
}

uint64_t sub_DD50C()
{
  return swift_task_dealloc(STACK[0x3F8]);
}

uint64_t sub_DD514()
{
  return swift_task_dealloc(STACK[0x3F0]);
}

uint64_t sub_DD51C()
{
  return swift_task_dealloc(STACK[0x3E8]);
}

uint64_t sub_DD524()
{
  return swift_task_dealloc(STACK[0x3E0]);
}

uint64_t sub_DD52C()
{
  return swift_task_dealloc(STACK[0x3D8]);
}

uint64_t sub_DD534()
{
  return swift_task_dealloc(STACK[0x3D0]);
}

uint64_t sub_DD53C()
{
  return swift_task_dealloc(STACK[0x3C8]);
}

uint64_t sub_DD544()
{
  return swift_task_dealloc(STACK[0x3C0]);
}

uint64_t sub_DD54C()
{
  return swift_task_dealloc(STACK[0x3B8]);
}

uint64_t sub_DD554()
{
  return swift_task_dealloc(STACK[0x3B0]);
}

uint64_t sub_DD55C()
{
  return swift_task_dealloc(STACK[0x3A8]);
}

uint64_t sub_DD564()
{
  return swift_task_dealloc(STACK[0x3A0]);
}

uint64_t sub_DD56C()
{
  return swift_task_dealloc(STACK[0x398]);
}

uint64_t sub_DD574()
{
  return swift_task_dealloc(STACK[0x390]);
}

uint64_t sub_DD57C()
{
  return swift_task_dealloc(STACK[0x388]);
}

uint64_t sub_DD584()
{
  return swift_task_dealloc(STACK[0x380]);
}

uint64_t sub_DD58C()
{
  return swift_task_dealloc(STACK[0x378]);
}

uint64_t sub_DD594()
{
  return swift_task_dealloc(STACK[0x370]);
}

uint64_t sub_DD59C()
{
  return swift_task_dealloc(STACK[0x368]);
}

uint64_t sub_DD5A4()
{
  return swift_task_dealloc(STACK[0x360]);
}

uint64_t sub_DD5AC()
{
  return swift_task_dealloc(STACK[0x358]);
}

uint64_t sub_DD5B4()
{
  return swift_task_dealloc(STACK[0x350]);
}

uint64_t sub_DD5BC()
{
  return swift_task_dealloc(STACK[0x348]);
}

uint64_t sub_DD5C4()
{
  return swift_task_dealloc(STACK[0x340]);
}

uint64_t sub_DD5CC()
{
  return swift_task_dealloc(STACK[0x338]);
}

uint64_t sub_DD5D4()
{
  return swift_task_dealloc(STACK[0x330]);
}

uint64_t sub_DD5DC()
{
  return swift_task_dealloc(STACK[0x328]);
}

uint64_t sub_DD5E4()
{
  return swift_task_dealloc(STACK[0x320]);
}

uint64_t sub_DD5EC()
{
  return swift_task_dealloc(STACK[0x318]);
}

uint64_t sub_DD5F4()
{
  return swift_task_dealloc(STACK[0x310]);
}

uint64_t sub_DD5FC()
{
  return swift_task_dealloc(STACK[0x308]);
}

uint64_t sub_DD604()
{
  return swift_task_dealloc(STACK[0x300]);
}

uint64_t sub_DD60C()
{
  return swift_task_dealloc(STACK[0x2F8]);
}

uint64_t sub_DD614()
{
  return swift_task_dealloc(STACK[0x2F0]);
}

uint64_t sub_DD61C()
{
  return swift_task_dealloc(STACK[0x2E8]);
}

uint64_t sub_DD624()
{
  return swift_task_dealloc(STACK[0x2E0]);
}

uint64_t sub_DD62C()
{
  return swift_task_dealloc(STACK[0x2D8]);
}

uint64_t sub_DD634()
{
  return swift_task_dealloc(STACK[0x2D0]);
}

uint64_t sub_DD63C()
{
  return swift_task_dealloc(STACK[0x2C8]);
}

uint64_t sub_DD644()
{
  return swift_task_dealloc(STACK[0x2C0]);
}

uint64_t sub_DD64C()
{
  return swift_task_dealloc(STACK[0x2B8]);
}

uint64_t sub_DD654()
{
  return swift_task_dealloc(STACK[0x2B0]);
}

uint64_t sub_DD65C()
{
  return swift_task_dealloc(STACK[0x2A8]);
}

uint64_t sub_DD664()
{
  return swift_task_dealloc(STACK[0x2A0]);
}

uint64_t sub_DD66C()
{
  return swift_task_dealloc(STACK[0x298]);
}

uint64_t sub_DD674()
{
  return swift_task_dealloc(STACK[0x290]);
}

uint64_t sub_DD67C()
{
  return swift_task_dealloc(STACK[0x288]);
}

uint64_t sub_DD684()
{
  return swift_task_dealloc(STACK[0x280]);
}

uint64_t sub_DD68C()
{
  return swift_task_dealloc(STACK[0x278]);
}

uint64_t sub_DD694()
{
  return swift_task_dealloc(STACK[0x270]);
}

uint64_t sub_DD69C()
{
  return swift_task_dealloc(STACK[0x268]);
}

uint64_t sub_DD6A4()
{
  return swift_task_dealloc(STACK[0x260]);
}

uint64_t sub_DD6AC()
{
  return swift_task_dealloc(STACK[0x258]);
}

uint64_t sub_DD6B4()
{
  return swift_task_dealloc(STACK[0x250]);
}

uint64_t sub_DD6BC()
{
  return swift_task_dealloc(STACK[0x248]);
}

uint64_t sub_DD6C4()
{
  return swift_task_dealloc(STACK[0x240]);
}

uint64_t sub_DD6CC()
{
  return swift_task_dealloc(STACK[0x238]);
}

uint64_t sub_DD6D4()
{
  return swift_task_dealloc(STACK[0x230]);
}

uint64_t sub_DD6DC()
{
  return swift_task_dealloc(STACK[0x228]);
}

uint64_t sub_DD6E4()
{
  return swift_task_dealloc(STACK[0x220]);
}

uint64_t sub_DD6EC()
{
  return swift_task_dealloc(STACK[0x218]);
}

uint64_t sub_DD6F4()
{
  return swift_task_dealloc(STACK[0x210]);
}

uint64_t sub_DD6FC()
{
  return swift_task_dealloc(STACK[0x208]);
}

uint64_t sub_DD704()
{
  return swift_task_dealloc(STACK[0x200]);
}

uint64_t sub_DD70C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  return swift_task_dealloc(a72);
}

uint64_t sub_DD714( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  return swift_task_dealloc(a71);
}

uint64_t sub_DD71C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  return swift_task_dealloc(a70);
}

uint64_t sub_DD724( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  return swift_task_dealloc(a69);
}

uint64_t sub_DD72C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  return swift_task_dealloc(a68);
}

uint64_t sub_DD734( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  return swift_task_dealloc(a67);
}

uint64_t sub_DD73C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  return swift_task_dealloc(a66);
}

uint64_t sub_DD744( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  return swift_task_dealloc(a65);
}

uint64_t sub_DD74C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  return swift_task_dealloc(a64);
}

uint64_t sub_DD754( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  return swift_task_dealloc(a63);
}

uint64_t sub_DD75C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  return swift_task_dealloc(a62);
}

uint64_t sub_DD764( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  return swift_task_dealloc(a61);
}

uint64_t sub_DD76C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  return swift_task_dealloc(a60);
}

uint64_t sub_DD774( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  return swift_task_dealloc(a59);
}

uint64_t sub_DD77C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  return swift_task_dealloc(a58);
}

uint64_t sub_DD784( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  return swift_task_dealloc(a57);
}

uint64_t sub_DD78C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  return swift_task_dealloc(a56);
}

uint64_t sub_DD794( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  return swift_task_dealloc(a55);
}

uint64_t sub_DD79C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  return swift_task_dealloc(a54);
}

uint64_t sub_DD7A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  return swift_task_dealloc(a53);
}

uint64_t sub_DD7AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52)
{
  return swift_task_dealloc(a52);
}

uint64_t sub_DD7B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51)
{
  return swift_task_dealloc(a51);
}

uint64_t sub_DD7BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50)
{
  return swift_task_dealloc(a50);
}

uint64_t sub_DD7C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49)
{
  return swift_task_dealloc(a49);
}

uint64_t sub_DD7CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48)
{
  return swift_task_dealloc(a48);
}

uint64_t sub_DD7D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47)
{
  return swift_task_dealloc(a47);
}

uint64_t sub_DD7DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46)
{
  return swift_task_dealloc(a46);
}

uint64_t sub_DD7E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45)
{
  return swift_task_dealloc(a45);
}

_OWORD *sub_DD7EC()
{
  uint64_t v3 = v0[3341];
  *(void *)(v2 - 128) = v0[3336];
  *(void *)(v2 - 120) = v3;
  uint64_t v4 = v0[3304];
  *(void *)(v2 - 144) = v0[3291];
  *(void *)(v2 - 136) = v4;
  uint64_t v5 = v0[3281];
  *(void *)(v2 - 160) = v0[3276];
  *(void *)(v2 - 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v5;
  return sub_A13C((_OWORD *)(v0[3247] + 64LL), v1);
}

uint64_t sub_DD83C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t sub_DD868()
{
  return swift_task_dealloc(STACK[0x430]);
}

uint64_t sub_DD870()
{
  return swift_task_dealloc(STACK[0x438]);
}

  ;
}

uint64_t sub_DD888@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned __int8 a9@<W8>)
{
  *(void *)uint64_t v10 = v9;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(void *)(v10 + 56) = 0LL;
  *(_BYTE *)(v10 + 64) = -64;
  return sub_3561C(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_DD8B0()
{
  return sub_D9904(v0, v1 - 104, v1 - 144, (uint64_t)&STACK[0x4D8]);
}

uint64_t sub_DD8C4()
{
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
}

uint64_t sub_DD8F8()
{
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
}

uint64_t sub_DD92C(void *a1)
{
  return dispatch thunk of DeviceState.isPad.getter(v1, v2);
}

uint64_t sub_DD94C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_DD964()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

  ;
}

uint64_t sub_DD9B0(void *a1)
{
  return dispatch thunk of DeviceState.isPad.getter(v1, v2);
}

uint64_t sub_DD9D0(void *a1)
{
  return dispatch thunk of DeviceState.isPhone.getter(v1, v2);
}

uint64_t sub_DD9F0()
{
  return dispatch thunk of DeviceState.isPhone.getter(v1, v2);
}

id sub_DDA14(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_DDA20(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return sub_12BE9C(0LL, 0LL, a3);
}

uint64_t sub_DDA34()
{
  return sub_D9904(v0, v1 - 144, v1 - 136, v1 - 128);
}

uint64_t sub_DDA48()
{
  return swift_task_dealloc(STACK[0x440]);
}

void sub_DDA50()
{
}

uint64_t sub_DDA58()
{
  return swift_task_dealloc(STACK[0x448]);
}

uint64_t sub_DDA60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_D9904(v4, a2, a3, a4);
}

void sub_DDA68(uint64_t a1, uint64_t *a2)
{
}

_WORD *sub_DDA70(_WORD *result)
{
  *(void *)(v1 - 136) = 0LL;
  *(void *)(v1 - 128) = 0LL;
  *uint64_t result = 0;
  *(void *)(v1 - 144) = result + 1;
  return result;
}

uint64_t sub_DDA88()
{
  STACK[0x4B0] = v0[3451];
  STACK[0x4C8] = v0[3341];
  STACK[0x4C0] = v0[3336];
  STACK[0x4B8] = v0[3304];
  return 0LL;
}

BOOL sub_DDAB8(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

void *sub_DDAC0(uint64_t a1)
{
  return j___s11SiriKitFlow22OutputPublisherFactoryO04makedE5AsyncAA0deH0_pyFZ((void *)(v2 - 128));
}

uint64_t sub_DDADC()
{
  return ((uint64_t (*)(void))dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:))();
}

void sub_DDAF8()
{
}

uint64_t sub_DDB08()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 168) + 8LL))( *(void *)(v0 - 152),  *(void *)(v0 - 160));
}

uint64_t sub_DDB18()
{
  return v0(v1, v2);
}

  ;
}

void sub_DDB48(uint64_t a1)
{
}

uint64_t sub_DDB50()
{
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
}

void sub_DDB70(uint64_t a1@<X8>)
{
}

uint64_t sub_DDB84()
{
  uint64_t v1 = *(void *)(v0 + 25976);
  uint64_t v2 = *(void *)(v1 + 224);
  uint64_t v3 = *(void *)(v1 + 232);
  v1 += 224LL;
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  unsigned __int8 v10 = *(_BYTE *)(v1 + 64);
  *(void *)uint64_t v1 = 6LL;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(void *)(v1 + 56) = 0LL;
  *(_BYTE *)(v1 + 64) = -64;
  return sub_3561C(v2, v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_DDBC8()
{
  return sub_D9904(v0, v1 - 104, v1 - 184, v1 - 144);
}

void sub_DDBDC(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_DDBE4()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_DDBF0()
{
  return v3(v1, v0, v2);
}

_OWORD *sub_DDC00()
{
  return sub_A13C((_OWORD *)(*(void *)(v1 + 25976) + 64LL), v0);
}

void sub_DDC20(uint64_t a1, uint64_t (*a2)(void))
{
}

uint64_t sub_DDC28(uint64_t result)
{
  *(void *)(result + 16) = v5;
  *(void *)(result + 24) = v6;
  *(void *)(result + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v7;
  *(void *)(result + 40) = v9;
  *(void *)(result + 48) = v3;
  *(_BYTE *)(result + 56) = v1;
  *(void *)(result + 64) = v8;
  *(void *)(result + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v2;
  *(_BYTE *)(result + 80) = v4;
  return result;
}

void *sub_DDC44(uint64_t a1)
{
  return j___s11SiriKitFlow22OutputPublisherFactoryO04makedE5AsyncAA0deH0_pyFZ((void *)(v2 - 120));
}

  ;
}

uint64_t sub_DDC80()
{
  uint64_t v3 = v1[3444];
  *(void *)(v2 - 240) = v1[3448];
  *(void *)(v2 - 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v3;
  uint64_t v4 = v1[3442];
  *(void *)(v2 - 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v1[3341];
  uint64_t v5 = v1[3336];
  *(void *)(v2 - 208) = v0;
  *(void *)(v2 - 200) = v5;
  uint64_t v6 = v1[3304];
  *(void *)(v2 - 224) = v4;
  *(void *)(v2 - 216) = v6;
  return 0LL;
}

uint64_t sub_DDCC0(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_DDCC8()
{
  return 11LL;
}

void sub_DDCE8()
{
}

uint64_t sub_DDCF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  return sub_D94E8(a1, a2, v12, v14, v9, v11, v13, v10, a9);
}

void *sub_DDD10(__int128 *a1, uint64_t a2)
{
  return j___s11SiriKitFlow22OutputPublisherFactoryO04makedE5AsyncAA0deH0_pyFZ((void *)(v2 - 120));
}

  ;
}

uint64_t sub_DDD30()
{
  return OutputGenerationManifest.responseViewId.setter(v0, v1);
}

uint64_t sub_DDD3C()
{
  return sub_D9904(v0, v1 - 104, v1 - 144, (uint64_t)&STACK[0x4D8]);
}

  ;
}

uint64_t sub_DDD64()
{
  return *(void *)(v0 + 24);
}

uint64_t sub_DDD84()
{
  return *(void *)(v0 - 88);
}

uint64_t sub_DDDA4(uint64_t a1)
{
  return OutputGenerationManifest.responseViewId.setter(a1, v1);
}

uint64_t sub_DDDAC()
{
  return sub_5050(v0);
}

uint64_t sub_DDDB4(uint64_t a1, uint64_t a2)
{
  return sub_A627C(a1, a2, 0LL);
}

uint64_t sub_DDDBC()
{
  return *(_DWORD *)(v0 - 116) & 1;
}

void sub_DDDF4(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t sub_DDE00()
{
  return static ExecuteResponse.complete<A>(next:)(v0);
}

void sub_DDE0C(uint64_t a1, uint64_t (*a2)(void))
{
}

uint64_t sub_DDE14()
{
  return v0(v1, v2);
}

_OWORD *sub_DDE20(_OWORD *a1)
{
  return sub_A13C(a1, v1);
}

uint64_t sub_DDE28()
{
  return swift_task_dealloc(STACK[0x458]);
}

uint64_t sub_DDE30()
{
  return swift_task_dealloc(STACK[0x450]);
}

_OWORD *sub_DDE38()
{
  return sub_A13C((_OWORD *)(*(void *)(v0 + 25976) + 64LL), (_OWORD *)STACK[0x4C8]);
}

uint64_t sub_DDE60()
{
  return Logger.logObject.getter();
}

void sub_DDE68(uint64_t a1, SEL *a2, uint64_t (*a3)(void))
{
}

uint64_t sub_DDE70(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, uint64_t a8)
{
  return sub_132434(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_DDE8C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_DDEA8(uint64_t a1)
{
  return sub_1328CC(a1);
}

uint64_t sub_DDEC4(uint64_t a1, uint64_t a2)
{
  return sub_1320A4(a1, a2);
}

uint64_t sub_DDEE0(uint64_t a1)
{
  return swift_errorRelease(a1);
}

uint64_t sub_DDEFC()
{
  return ((uint64_t (*)(void))dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:))();
}

uint64_t sub_DDF18()
{
  return ((uint64_t (*)(void))swift_continuation_await)();
}

void sub_DDF34()
{
  STACK[0x4C8] = v1 + v0;
}

uint64_t sub_DDF50@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned __int8 a9@<W8>)
{
  *(void *)uint64_t v10 = v9;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(void *)(v10 + 56) = 0LL;
  *(_BYTE *)(v10 + 64) = -64;
  return sub_3561C(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_DDF78()
{
  return ((uint64_t (*)(void))dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:))();
}

uint64_t sub_DDF94(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 200))(a1, v1, v2);
}

uint64_t sub_DDFA4()
{
  return static ExecuteResponse.complete<A>(next:)(v0);
}

uint64_t sub_DDFAC()
{
  return v2(v0, v1, v3);
}

uint64_t sub_DDFBC()
{
  return v3(v0, v1, v2);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_DDFF0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  return sub_D94E8(a1, a2, a3, a4, a5, a6, v10, v9, a9);
}

uint64_t sub_DDFFC()
{
  return static DialogPhase.error.getter();
}

id sub_DE010(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_DE01C()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_DE028@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

void sub_DE030()
{
}

void sub_DE03C()
{
  STACK[0x498] = v0[3446];
  STACK[0x490] = v0[3445];
  STACK[0x488] = v0[3444];
  STACK[0x480] = v0[3443];
  STACK[0x470] = v0[3442];
}

uint64_t sub_DE068(uint64_t a1)
{
  return String.init(format:_:)(1714433573LL, 0xE400000000000000LL, a1);
}

uint64_t sub_DE07C()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, 1LL, 1LL, v1);
}

uint64_t sub_DE090()
{
  return sub_D9904(v0, v1 - 104, v1 - 144, (uint64_t)&STACK[0x4D8]);
}

_WORD *sub_DE0A4(_WORD *result)
{
  *(void *)(v1 - 120) = 0LL;
  *uint64_t result = 0;
  *(void *)(v1 - 104) = result + 1;
  *(void *)(v1 - 96) = 0LL;
  return result;
}

uint64_t sub_DE0B8()
{
  return type metadata accessor for WellnessSnippets(0LL);
}

void sub_DE0D8()
{
}

uint64_t sub_DE0E4()
{
  return type metadata accessor for WellnessSnippets(0LL);
}

void sub_DE104()
{
}

uint64_t sub_DE10C()
{
  return *(void *)(v0 + 224);
}

void sub_DE124()
{
}

void sub_DE12C(uint64_t a1@<X8>)
{
  *(void *)(v1 - 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a1;
}

void sub_DE154(uint64_t a1, uint64_t *a2)
{
}

void sub_DE15C()
{
}

uint64_t sub_DE164()
{
  *(_BYTE *)(v0 + 16) = 1;
  return *(void *)(v0 + 24);
}

uint64_t sub_DE18C(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 13LL);
}

  ;
}

void sub_DE1AC(uint64_t a1, uint64_t *a2)
{
}

_OWORD *sub_DE1B4(_OWORD *a1)
{
  return sub_A13C(a1, v1);
}

_OWORD *sub_DE1BC(_OWORD *a1)
{
  return sub_A13C(a1, v1);
}

void *sub_DE1C4@<X0>(void *a1@<X8>)
{
  return sub_5A9B0(v1, a1);
}

uint64_t sub_DE1CC()
{
  uint64_t result = *(void *)(v0 + 27928);
  *(void *)(v1 - 200) = *(void *)(v0 + 27384);
  return result;
}

void sub_DE1F4( char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14, unsigned __int8 a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, unint64_t a24)
{
}

void sub_DE214(uint64_t a1)
{
}

uint64_t sub_DE21C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  return sub_3561C( a1,  STACK[0x470],  STACK[0x480],  STACK[0x488],  STACK[0x490],  STACK[0x498],  STACK[0x4A0],  STACK[0x4A8],  a9);
}

void *sub_DE23C@<X0>(void *a1@<X8>)
{
  return sub_5A9B0(v1, a1);
}

uint64_t sub_DE244()
{
  return *(void *)(v0 + 25976) + 64LL;
}

  ;
}

uint64_t sub_DE268(uint64_t a1, uint64_t a2)
{
  return SimpleOutputFlowAsync.__allocating_init(outputPublisher:outputGenerator:)(v3 - 128, a2, v2);
}

uint64_t sub_DE278(uint64_t a1, uint64_t a2)
{
  return SimpleOutputFlowAsync.__allocating_init(outputPublisher:outputGenerator:)(a1, a2, v2);
}

void sub_DE284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = v3;
  sub_57F08(a1, a2, a3);
}

uint64_t sub_DE28C()
{
  return static ExecuteResponse.complete<A>(next:)(v0);
}

uint64_t sub_DE29C()
{
  return static ExecuteResponse.complete<A>(next:)(v0);
}

uint64_t sub_DE2AC()
{
  return v0(v2, v1, v3);
}

uint64_t sub_DE2BC()
{
  return static ExecuteResponse.complete<A>(next:)(v0);
}

uint64_t sub_DE2C8()
{
  return static ExecuteResponse.complete<A>(next:)(v0);
}

uint64_t sub_DE2D8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 184))(a1, v1, v2);
}

uint64_t sub_DE2E8()
{
  return v0(v1, v2);
}

uint64_t sub_DE2F4()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1LL, v0);
}

void *sub_DE304()
{
  return sub_A1B4(v0);
}

uint64_t sub_DE30C()
{
  return v2(v0, v1);
}

uint64_t sub_DE318()
{
  return v0(v2, v1, v3);
}

uint64_t sub_DE328()
{
  return sub_5050(v0);
}

uint64_t sub_DE330(uint64_t a1)
{
  return v1(a1, v2);
}

void *sub_DE338@<X0>(void *a1@<X8>)
{
  return sub_5A9B0(v1, a1);
}

uint64_t sub_DE340()
{
  return sub_5050(v0);
}

void *sub_DE348@<X0>(void *a1@<X8>)
{
  return sub_5A9B0(v1, a1);
}

  ;
}

uint64_t sub_DE35C()
{
  return sub_387E0((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 - 120), v0 - 128, v0 - 104, v0 - 96);
}

void sub_DE374()
{
  uint64_t v2 = v0[3341];
  *(void *)(v1 - 176) = v0[3336];
  *(void *)(v1 - 168) = v2;
  *(void *)(v1 - 184) = v0[3304];
}

void sub_DE394()
{
  uint64_t v2 = *(void *)(v0 + 26728);
  *(void *)(v1 - 160) = *(void *)(v0 + 26688);
  *(void *)(v1 - 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v2;
}

  ;
}

void sub_DE3B4(uint64_t a1@<X8>)
{
  *(void *)(v2 - 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v1 + a1;
}

void sub_DE3C0()
{
  uint64_t v2 = *(void *)(v0 + 26728);
  *(void *)(v1 - 128) = *(void *)(v0 + 26688);
  *(void *)(v1 - 120) = v2;
}

NSNumber sub_DE3D4()
{
  return NSNumber.init(BOOLeanLiteral:)(0);
}

void sub_DE3DC(uint64_t a1, uint64_t *a2)
{
}

  ;
}

void sub_DE3F0()
{
}

  ;
}

uint64_t sub_DE414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, 36LL, 2LL, a7, 17LL);
}

void sub_DE42C()
{
  *(void *)(v2 - 144) = v1[3291];
  *(void *)(v2 - 136) = v0;
  uint64_t v3 = v1[3281];
  *(void *)(v2 - 168) = v1[3277];
  *(void *)(v2 - 160) = v1[3276];
  *(void *)(v2 - 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v3;
}

  ;
}

void sub_DE464(uint64_t a1)
{
}

uint64_t sub_DE46C()
{
  return v0;
}

_WORD *sub_DE478(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_DE484(uint64_t a1)
{
  return v1(a1, v2);
}

void sub_DE48C()
{
}

void sub_DE494(uint64_t a1@<X8>)
{
  *(void *)(v3 - 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a1;
  *(void *)(v3 - 144) = v1;
  uint64_t v4 = *(void *)(v2 + 26208);
  *(void *)(v3 - 168) = *(void *)(v2 + 26216);
  *(void *)(v3 - 160) = v4;
}

uint64_t sub_DE4A8()
{
  return v0;
}

void *sub_DE4B8()
{
  return static OutputPublisherFactory.makeOutputPublisherAsync()(&STACK[0x4D8]);
}

uint64_t sub_DE4C0()
{
  return static ExecuteResponse.complete<A>(next:)(v0);
}

uint64_t sub_DE4CC()
{
  return static ExecuteResponse.complete<A>(next:)(v0);
}

uint64_t sub_DE4D8(uint64_t a1)
{
  return sub_58F80(a1, 3LL);
}

uint64_t sub_DE4E0()
{
  return *(void *)(v0 + 25976) + 64LL;
}

uint64_t sub_DE4FC()
{
  return (*(uint64_t (**)(void, void))(v0 + 8))(*(void *)(v1 - 152), *(void *)(v1 - 160));
}

uint64_t sub_DE508(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

void sub_DE510(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_DE518()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 168) + 8LL))(v1, v0);
}

uint64_t sub_DE52C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v6 - 224) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 224, v5 + 8, v4, a4);
}

void sub_DE540()
{
}

uint64_t sub_DE548(uint64_t a1)
{
  return swift_bridgeObjectRetain_n(a1, 2LL);
}

void sub_DE550(uint64_t a1@<X8>)
{
  *(void *)(v2 + 24) = v1 + a1;
}

void sub_DE55C()
{
  uint64_t v2 = *(void *)(v0 + 26728);
  *(void *)(v1 - 128) = *(void *)(v0 + 26688);
  *(void *)(v1 - 120) = v2;
}

uint64_t sub_DE578()
{
  return sub_D9904(v0, v1 - 112, v1 - 160, (uint64_t)&STACK[0x4D0]);
}

uint64_t sub_DE58C()
{
  return sub_A5E8(12LL);
}

  ;
}

uint64_t sub_DE5B0(uint64_t a1, unint64_t a2)
{
  return sub_39178(a1, a2, (uint64_t *)(v2 - 184));
}

uint64_t sub_DE5BC()
{
  return static DialogPhase.error.getter();
}

uint64_t sub_DE5D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return static DialogPhase.completion.getter(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_DE5E4()
{
  return swift_release(v0);
}

uint64_t sub_DE5EC()
{
  return swift_retain(v0);
}

uint64_t sub_DE5F4()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_DE600()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_DE60C()
{
  return v0(v1, v2);
}

uint64_t sub_DE618()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v1, v2);
}

void sub_DE62C(uint64_t a1)
{
}

uint64_t sub_DE634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_D9904(v4, a2, a3, a4);
}

uint64_t sub_DE63C(uint64_t a1, uint64_t a2)
{
  return static ExecuteResponse.ongoing<A>(next:childCompletion:)(a1, a2, v2, v3);
}

void sub_DE648(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

void sub_DE65C()
{
  *(void *)(v2 - 200) = v1 + v0;
}

uint64_t sub_DE678()
{
  return v0;
}

uint64_t sub_DE694()
{
  return swift_task_dealloc(STACK[0x488]);
}

uint64_t sub_DE69C()
{
  return swift_task_dealloc(STACK[0x480]);
}

uint64_t sub_DE6A4()
{
  return swift_task_dealloc(STACK[0x478]);
}

uint64_t sub_DE6AC()
{
  return swift_task_dealloc(STACK[0x470]);
}

uint64_t sub_DE6B4()
{
  return swift_task_dealloc(STACK[0x468]);
}

uint64_t sub_DE6BC()
{
  return swift_task_dealloc(STACK[0x460]);
}

id sub_DE6C4(uint64_t a1)
{
  return sub_91120(a1);
}

void sub_DE6CC()
{
  STACK[0x4C8] = v0[3341];
  STACK[0x4B0] = v0[3336];
  STACK[0x4A8] = v0[3304];
}

void sub_DE6E8()
{
  STACK[0x4C8] = v0[3341];
  STACK[0x4C0] = v0[3336];
  STACK[0x4B0] = v0[3304];
}

void *sub_DE704()
{
  return sub_5A9B0(v1, v0);
}

uint64_t sub_DE710(uint64_t a1)
{
  return String.toSpeakableString.getter(a1, v1);
}

void sub_DE718(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

uint64_t sub_DE720(uint64_t a1)
{
  return swift_retain(a1);
}

uint64_t sub_DE728()
{
  return v0;
}

uint64_t sub_DE744(uint64_t a1)
{
  return swift_release(a1);
}

NSNumber sub_DE758()
{
  return NSNumber.init(BOOLeanLiteral:)(1);
}

uint64_t sub_DE760(void *a1)
{
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
}

void sub_DE774(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

uint64_t sub_DE780()
{
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
}

uint64_t sub_DE798()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v2 - 184))(v1, v0, *(void *)(v2 - 176));
}

  ;
}

_OWORD *sub_DE7C8(_OWORD *a1)
{
  return sub_A13C(a1, v1);
}

void sub_DE7D0(uint64_t a1, SEL *a2, uint64_t (*a3)(void))
{
}

uint64_t sub_DE7D8()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 208));
}

BOOL sub_DE7E0(uint64_t a1, os_log_type_t a2)
{
  return os_log_type_enabled(v2, a2);
}

uint64_t sub_DE7E8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 200))(v0, v1, v2);
}

void sub_DE7FC()
{
}

uint64_t sub_DE810()
{
  return sub_387E0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&STACK[0x4D0], v0 - 120, v0 - 112, v0 - 160);
}

void sub_DE824()
{
}

void sub_DE82C(uint64_t a1, uint64_t (*a2)(void))
{
}

uint64_t sub_DE834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 224, v5, v4, a4);
}

  ;
}

uint64_t sub_DE854(uint64_t result)
{
  *(void *)(result + 16) = v1;
  *(void *)(result + 24) = v2;
  *(void *)(result + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v3;
  *(_BYTE *)(result + 40) = v4;
  return result;
}

uint64_t sub_DE864()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_DE874(uint64_t a1, uint64_t a2)
{
  return SimpleOutputFlowAsync.__allocating_init(outputPublisher:outputGenerator:)(v3 - 120, a2, v2);
}

uint64_t sub_DE884()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_DE894()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 216));
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_DE8D8@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))((char *)&stru_20.maxprot + (v1 & a1)))();
}

uint64_t sub_DE8E8(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

void sub_DE8F0(uint64_t a1@<X8>)
{
  STACK[0x4C0] = v1 + a1;
}

uint64_t sub_DE8FC()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 184) + 8LL))( *(void *)(v0 - 168),  *(void *)(v0 - 176));
}

void sub_DE90C()
{
  uint64_t v2 = *(void *)(v0 + 26728);
  *(void *)(v1 - 128) = *(void *)(v0 + 26688);
  *(void *)(v1 - 120) = v2;
}

uint64_t sub_DE91C(uint64_t result)
{
  *(_BYTE *)(result + 16) = 8;
  return result;
}

uint64_t sub_DE928()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 200) + 8LL))( *(void *)(v0 - 184),  *(void *)(v0 - 192));
}

  ;
}

  ;
}

uint64_t sub_DE95C@<X0>(char a1@<W8>)
{
  return a1 & 1;
}

uint64_t sub_DE974@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2 & 1;
}

void sub_DE98C()
{
  *(void *)(v2 - 136) = *(void *)(v1 + 26688);
  *(void *)(v2 - 128) = v0;
}

uint64_t sub_DE99C(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 1LL, 1LL, v1);
}

void sub_DE9AC(uint64_t a1, SEL *a2)
{
}

void sub_DE9B4(uint64_t a1, uint64_t (*a2)(void))
{
}

void *sub_DE9BC()
{
  return sub_A1B4(v0);
}

uint64_t sub_DE9C4()
{
  return v0(v2, v1, v3);
}

uint64_t sub_DE9D4(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_DE9DC()
{
  return *(void *)(v0 + 25976) + 64LL;
}

uint64_t sub_DE9EC()
{
  return *(void *)(v0 + 25976) + 64LL;
}

void *sub_DE9FC()
{
  return sub_A1B4(v0);
}

uint64_t sub_DEA04()
{
  return swift_retain(v0);
}

uint64_t sub_DEA0C()
{
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
}

uint64_t sub_DEA14(uint64_t a1)
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(a1, v1);
}

uint64_t sub_DEA1C()
{
  return v0;
}

void sub_DEA2C(uint64_t a1, SEL *a2, uint64_t (*a3)(void))
{
}

uint64_t sub_DEA34()
{
  return v0;
}

uint64_t sub_DEA40()
{
  return swift_task_alloc(v0);
}

uint64_t sub_DEA48()
{
  return static ExecuteResponse.complete<A>(next:)(v0);
}

void *sub_DEA50()
{
  return sub_A1B4(v0);
}

  ;
}

uint64_t sub_DEA68()
{
  return swift_task_dealloc(STACK[0x4A0]);
}

uint64_t sub_DEA70()
{
  return swift_task_dealloc(STACK[0x498]);
}

uint64_t sub_DEA78()
{
  return swift_task_dealloc(STACK[0x490]);
}

  ;
}

  ;
}

uint64_t sub_DEAB0()
{
  return *(void *)(v0 + 25976) + 64LL;
}

uint64_t sub_DEAC8()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 176) + 8LL))( *(void *)(v0 - 160),  *(void *)(v0 - 168));
}

  ;
}

uint64_t sub_DEAF4@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

void sub_DEB04()
{
}

uint64_t sub_DEB0C()
{
  return v0;
}

uint64_t sub_DEB1C()
{
  return v0;
}

uint64_t sub_DEB28()
{
  return static DialogPhase.error.getter();
}

  ;
}

uint64_t sub_DEB50()
{
  return swift_task_dealloc(STACK[0x4A8]);
}

uint64_t sub_DEB58()
{
  return sub_494C(v0);
}

  ;
}

uint64_t sub_DEB74()
{
  return *(void *)(v0 + 224);
}

id sub_DEB8C(uint64_t a1)
{
  return sub_91120(a1);
}

uint64_t sub_DEB94()
{
  return v0(v1, v2);
}

uint64_t sub_DEBA4()
{
  return dispatch thunk of DeviceState.isPhone.getter(v0, v1);
}

uint64_t sub_DEBB4()
{
  return v0(v2, v1, v3);
}

void sub_DEBC4(uint64_t a1)
{
}

uint64_t sub_DEBCC()
{
  return v0;
}

uint64_t sub_DEBDC()
{
  return v0;
}

uint64_t sub_DEBE8()
{
  return v0;
}

uint64_t sub_DEBF4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 208))(v1, v0);
}

void sub_DEC04(uint64_t a1)
{
}

  ;
}

uint64_t sub_DEC18()
{
  return String.init<A>(describing:)(v1 - 224, v0);
}

  ;
}

uint64_t sub_DEC38(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

void sub_DEC44(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_DEC4C()
{
  return (*(uint64_t (**)(void, void))(v0 + 8))(*(void *)(v1 - 176), *(void *)(v1 - 184));
}

uint64_t sub_DEC58()
{
  return swift_release(*(void *)(v0 - 144));
}

void sub_DEC60()
{
  uint64_t v2 = *(void *)(v0 + 26728);
  *(void *)(v1 - 136) = *(void *)(v0 + 26688);
  *(void *)(v1 - 128) = v2;
}

void sub_DEC74(uint64_t a1@<X8>)
{
  *(void *)(v2 - 160) = v1 + a1;
}

void sub_DEC80(uint64_t a1@<X8>)
{
  *(void *)(v2 - 88) = v1 + a1;
}

uint64_t sub_DEC8C()
{
  return v0;
}

uint64_t sub_DECA0()
{
  return Logger.logObject.getter();
}

uint64_t sub_DECA8(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_DECB0(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_DECB8()
{
  return *(_DWORD *)(v0 - 116) & 1;
}

uint64_t sub_DECCC(unsigned __int16 a1)
{
  return a1 | 0x64657070690000LL;
}

uint64_t sub_DECE0(uint64_t a1)
{
  return sub_58F80(a1, 1LL);
}

void sub_DECE8(char a1, uint64_t a2)
{
}

uint64_t sub_DECF4@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

uint64_t sub_DECFC()
{
  return type metadata accessor for LogSpecificMedicationsIntent(0LL);
}

uint64_t sub_DED08()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_DED10()
{
  return v0;
}

void *sub_DED1C()
{
  return sub_A1B4(v0);
}

void sub_DED24(uint64_t a1, uint64_t (*a2)(void))
{
}

uint64_t sub_DED2C()
{
  return static ExecuteResponse.complete<A>(next:)(v0);
}

uint64_t sub_DED34()
{
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
}

uint64_t sub_DED3C(uint64_t a1)
{
  return v1(a1, v2);
}

void sub_DED44(uint64_t a1)
{
}

uint64_t sub_DED4C(uint64_t a1)
{
  return v3(a1, v2, v1);
}

uint64_t sub_DED58(uint64_t a1)
{
  return v2(a1, v1);
}

void sub_DED60(uint64_t a1)
{
}

  ;
}

void sub_DED74(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void sub_DED7C(uint64_t a1)
{
}

  ;
}

uint64_t sub_DED98()
{
  return v2(v0, v1);
}

uint64_t sub_DEDA4()
{
  return v0;
}

uint64_t sub_DEDB0(uint64_t a1, uint64_t a2)
{
  return sub_398E0(a1, a2, v2);
}

void sub_DEDB8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void sub_DEDC0()
{
}

uint64_t sub_DEDC8(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

  ;
}

uint64_t sub_DEDDC()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 24));
}

uint64_t sub_DEDE4@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  a1[3] = a2;
  a1[4] = v2;
  *a1 = v3;
  return PhoneRingsSnippet.body.getter();
}

  ;
}

uint64_t sub_DEDFC(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

void *sub_DEE04()
{
  return static OutputPublisherFactory.makeOutputPublisherAsync()((void *)(v0 - 144));
}

uint64_t sub_DEE0C()
{
  return v2(v0, v1);
}

void sub_DEE18(uint64_t a1, SEL *a2, uint64_t (*a3)(void))
{
}

id sub_DEE20(uint64_t a1)
{
  return sub_91120(a1);
}

  ;
}

unint64_t sub_DEE34()
{
  return sub_35684();
}

  ;
}

uint64_t sub_DEE48()
{
  return LogSpecificMedicationsIntent.__allocating_init()();
}

uint64_t sub_DEE50(uint64_t a1, uint64_t a2)
{
  return String.toSpeakableString.getter(a1, a2);
}

uint64_t sub_DEE5C()
{
  return sub_494C(v0);
}

uint64_t sub_DEE68(uint64_t a1, uint64_t a2)
{
  return static ExecuteResponse.ongoing<A>(next:childCompletion:)(a1, a2, v2, v3);
}

void sub_DEE74()
{
}

uint64_t sub_DEE80()
{
  return static ExecuteResponse.complete<A>(next:)(v0);
}

uint64_t sub_DEE88()
{
  return swift_continuation_init(v0, 0LL);
}

uint64_t sub_DEE94()
{
  return v0(v1, v2);
}

uint64_t sub_DEEA0(uint64_t a1)
{
  return swift_retain(a1);
}

void sub_DEEA8()
{
  STACK[0x498] = *(void *)(v0 + 27576);
  STACK[0x490] = *(void *)(v0 + 27568);
}

uint64_t sub_DEEBC(uint64_t a1)
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)(v1, a1);
}

void sub_DEEC8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void sub_DEED0()
{
}

  ;
}

id sub_DEEE4@<X0>(uint64_t a1@<X8>)
{
  return *(id *)(a1 + 32);
}

uint64_t sub_DEEEC()
{
  return Date.init()();
}

  ;
}

  ;
}

uint64_t type metadata accessor for WellnessLoggingCATPatternsExecutor(uint64_t a1)
{
  return sub_70F74(a1, (uint64_t *)&unk_18EBE8, (uint64_t)&nominal type descriptor for WellnessLoggingCATPatternsExecutor);
}

uint64_t sub_DEF1C(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_19C3A0);
}

void sub_DEF58()
{
  uint64_t v2 = v1;
  sub_494C(&qword_189D00);
  sub_6D20();
  __chkstk_darwin(v3);
  sub_AA40();
  uint64_t v4 = sub_494C(&qword_18A6A0);
  uint64_t v5 = sub_20308(v4, 80LL);
  *(_OWORD *)(v5 + 16) = xmmword_137250;
  uint64_t v6 = (void *)(v5 + 48);
  sub_E87FC();
  *(void *)(v7 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v8;
  *(void *)(v7 + 40) = v9;
  sub_41850(v2, v0, &qword_189D00);
  uint64_t v10 = sub_ABF4();
  uint64_t v11 = sub_72A20(v0);
  if (v12)
  {
    sub_36A94(v11, &qword_189D00);
    *(_OWORD *)uint64_t v6 = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
  }

  else
  {
    *(void *)(v5 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v10;
    uint64_t v13 = sub_B76C(v6);
    sub_DA34((uint64_t)v13, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL));
  }

  sub_73078();
}

void sub_DF02C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v24;
  a20 = v25;
  sub_732B0();
  sub_6D20();
  __chkstk_darwin(v26);
  sub_72EAC();
  __chkstk_darwin(v27);
  sub_ABA4();
  __chkstk_darwin(v28);
  sub_E891C();
  __chkstk_darwin(v29);
  __int128 v31 = (int *)((char *)&a9 - v30);
  uint64_t v32 = sub_494C(&qword_18A6A0);
  uint64_t v33 = sub_20308(v32, 368LL);
  *(_OWORD *)(v33 + 16) = xmmword_13AB30;
  *(void *)(v33 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0xD000000000000016LL;
  *(void *)(v33 + 40) = 0x8000000000144A60LL;
  sub_E8AD0(v21, (uint64_t)v31);
  uint64_t v34 = sub_ABF4();
  uint64_t v35 = sub_72A20((uint64_t)v31);
  if (v36)
  {
    sub_73370(v35, &qword_189D00);
    sub_730FC();
  }

  else
  {
    *(void *)(v33 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v34;
    uint64_t v37 = sub_72FD0();
    sub_DA34( (uint64_t)v37,  (uint64_t)v31,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 32LL));
  }

  sub_73318();
  *(void *)(v33 + 80) = 0xD000000000000016LL;
  *(void *)(v33 + 88) = v38;
  uint64_t v39 = type metadata accessor for WellnessLoggingBloodPressureParameters(0LL);
  uint64_t v40 = sub_E8B3C(v39);
  sub_E8A84(v40, v41, &qword_189D00);
  uint64_t v42 = sub_72A20(v23);
  if (v36)
  {
    sub_E8A7C(v42, &qword_189D00);
    sub_730FC();
  }

  else
  {
    *(void *)(v33 + 120) = v34;
    uint64_t v43 = sub_72FD0();
    sub_DA34((uint64_t)v43, v23, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 32LL));
  }

  sub_E87FC();
  *(void *)(v33 + 128) = v44;
  *(void *)(v33 + 136) = v45;
  sub_7317C(v21 + v31[6], v46, &qword_189D00);
  uint64_t v47 = sub_72A20(v22);
  if (v36)
  {
    sub_73240(v47, &qword_189D00);
    sub_72E84();
  }

  else
  {
    *(void *)(v33 + 168) = v34;
    uint64_t v48 = sub_72E20();
    sub_E84BC((uint64_t)v48, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 32LL));
  }

  *(void *)(v33 + 176) = 0x696C6F7473616964LL;
  *(void *)(v33 + 184) = 0xE900000000000063LL;
  sub_72CE8();
  if ((v50 & 1) != 0)
  {
    uint64_t v51 = 0LL;
    *(void *)(v33 + 200) = 0LL;
    *(void *)(v33 + 208) = 0LL;
    uint64_t v52 = 0LL;
  }

  else
  {
    uint64_t v52 = *v49;
    uint64_t v51 = &type metadata for Double;
  }

  *(void *)(v33 + 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v52;
  *(void *)(v33 + 216) = v51;
  *(void *)(v33 + 224) = 0x6144646567676F6CLL;
  *(void *)(v33 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0xEA00000000006574LL;
  uint64_t v53 = *(void *)(v21 + v31[8]);
  if (v53)
  {
    uint64_t v54 = sub_73678();
    uint64_t v55 = v53;
  }

  else
  {
    uint64_t v54 = sub_73610();
    *(void *)(v33 + 248) = 0LL;
    *(void *)(v33 + 256) = 0LL;
  }

  *(void *)(v33 + 240) = v55;
  *(void *)(v33 + 264) = v54;
  *(void *)(v33 + 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0x63696C6F74737973LL;
  *(void *)(v33 + 280) = 0xE800000000000000LL;
  sub_72CE8();
  if ((v58 & 1) != 0)
  {
    uint64_t v59 = 0LL;
    *(void *)(v33 + 296) = 0LL;
    *(void *)(v33 + 304) = 0LL;
    uint64_t v60 = 0LL;
  }

  else
  {
    uint64_t v60 = *v57;
    uint64_t v59 = &type metadata for Double;
  }

  *(void *)(v33 + 288) = v60;
  *(void *)(v33 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v59;
  *(void *)(v33 + 320) = 1953066613LL;
  *(void *)(v33 + 328) = 0xE400000000000000LL;
  sub_73438(v21 + v31[10], v56, &qword_189D00);
  sub_72A20(v20);
  if (v36)
  {
    uint64_t v61 = sub_72C38();
    sub_36A94(v61, &qword_189D00);
    sub_72E84();
  }

  else
  {
    *(void *)(v33 + 360) = v34;
    uint64_t v62 = sub_72E20();
    sub_DA34((uint64_t)v62, v20, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 32LL));
    sub_72C38();
  }

  sub_D8FC();
}

void sub_DF330( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_DF33C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_DF348( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v24;
  a20 = v25;
  uint64_t v27 = v26;
  sub_732B0();
  sub_6D20();
  __chkstk_darwin(v28);
  sub_D938();
  __chkstk_darwin(v29);
  sub_ABA4();
  __chkstk_darwin(v30);
  sub_E891C();
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)&a9 - v32;
  uint64_t v34 = sub_494C(&qword_18A6A0);
  uint64_t v35 = sub_20308(v34, 368LL);
  *(_OWORD *)(v35 + 16) = xmmword_13AB30;
  sub_E89D4(v35, (uint64_t)"actionAceCommandString");
  uint64_t v36 = sub_ABF4();
  sub_72A20((uint64_t)v33);
  if (v37)
  {
    sub_279E0((uint64_t)v33, &qword_189D00);
    *(_OWORD *)(v35 + 48) = 0u;
    *(_OWORD *)(v35 + 64) = 0u;
  }

  else
  {
    *(void *)(v35 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v36;
    uint64_t v38 = sub_E8BA0();
    sub_DA34( (uint64_t)v38,  (uint64_t)v33,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 32LL));
  }

  uint64_t v39 = sub_E8A8C((uint64_t)"changeAceCommandString");
  uint64_t v40 = sub_E8B3C(v39);
  sub_E8A84(v40, v41, &qword_189D00);
  uint64_t v42 = sub_72A20(v23);
  if (v37)
  {
    sub_E8A7C(v42, &qword_189D00);
    sub_730FC();
  }

  else
  {
    *(void *)(v35 + 120) = v36;
    uint64_t v43 = sub_72FD0();
    sub_DA34((uint64_t)v43, v23, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 32LL));
  }

  uint64_t v44 = sub_E8958();
  sub_7317C(v44, v45, &qword_189D00);
  uint64_t v46 = sub_72A20(v22);
  if (v37)
  {
    sub_73240(v46, &qword_189D00);
    sub_72E84();
  }

  else
  {
    *(void *)(v35 + 168) = v36;
    uint64_t v47 = sub_72E20();
    sub_E84BC((uint64_t)v47, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 32LL));
  }

  sub_E8930();
  if (v22)
  {
    uint64_t v49 = sub_73678();
    uint64_t v50 = v22;
  }

  else
  {
    uint64_t v50 = 0LL;
    uint64_t v49 = 0LL;
    *(void *)(v35 + 200) = 0LL;
    *(void *)(v35 + 208) = 0LL;
  }

  *(void *)(v35 + 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v50;
  *(void *)(v35 + 216) = v49;
  strcpy((char *)(v35 + 224), "lowConfidence");
  *(_WORD *)(v35 + 238) = -4864;
  *(_BYTE *)(v35 + 240) = *(_BYTE *)(v20 + *(int *)(v27 + 32));
  *(void *)(v35 + 264) = &type metadata for Bool;
  *(void *)(v35 + 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 1953066613LL;
  *(void *)(v35 + 280) = 0xE400000000000000LL;
  sub_73238(v20 + *(int *)(v27 + 36), v48, &qword_189D00);
  sub_72A20(v21);
  if (v37)
  {
    uint64_t v51 = sub_72C38();
    sub_72F7C(v51, &qword_189D00);
    sub_72E84();
  }

  else
  {
    *(void *)(v35 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v36;
    uint64_t v52 = sub_72E20();
    sub_DA34((uint64_t)v52, v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 32LL));
    sub_72C38();
  }

  sub_E8B6C();
  *(void *)(v35 + 320) = v53;
  *(void *)(v35 + 328) = v54;
  sub_72CE8();
  if ((v56 & 1) != 0)
  {
    uint64_t v57 = 0LL;
    *(void *)(v35 + 344) = 0LL;
    *(void *)(v35 + 35_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0LL;
    uint64_t v58 = 0LL;
  }

  else
  {
    uint64_t v58 = *v55;
    uint64_t v57 = &type metadata for Double;
  }

  *(void *)(v35 + 336) = v58;
  *(void *)(v35 + 360) = v57;
  sub_D8FC();
}

void sub_DF5EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_DF5F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_DF604( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_DF610( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v24;
  a20 = v25;
  uint64_t v26 = v21;
  sub_732B0();
  sub_6D20();
  __chkstk_darwin(v27);
  sub_72EAC();
  __chkstk_darwin(v28);
  sub_E8A5C();
  __chkstk_darwin(v29);
  sub_E891C();
  __chkstk_darwin(v30);
  uint64_t v32 = (char *)&a9 - v31;
  uint64_t v33 = sub_494C(&qword_18A6A0);
  uint64_t v34 = sub_20308(v33, 320LL);
  *(_OWORD *)(v34 + 16) = xmmword_13AB60;
  *(void *)(v34 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0xD000000000000016LL;
  *(void *)(v34 + 40) = 0x8000000000144A60LL;
  sub_E8AD0(v26, (uint64_t)v32);
  uint64_t v35 = sub_ABF4();
  uint64_t v36 = sub_72A20((uint64_t)v32);
  if (v37)
  {
    sub_73240(v36, &qword_189D00);
    sub_730FC();
  }

  else
  {
    *(void *)(v34 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v35;
    uint64_t v38 = sub_72FD0();
    sub_E84BC((uint64_t)v38, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 32LL));
  }

  sub_73318();
  *(void *)(v34 + 80) = 0xD000000000000016LL;
  *(void *)(v34 + 88) = v39;
  uint64_t v40 = (int *)type metadata accessor for WellnessLoggingHeightParameters(0LL);
  sub_E8A84(v26 + v40[5], v41, &qword_189D00);
  uint64_t v42 = sub_72A20(v23);
  if (v37)
  {
    sub_E8A7C(v42, &qword_189D00);
    sub_730FC();
  }

  else
  {
    *(void *)(v34 + 120) = v35;
    uint64_t v43 = sub_72FD0();
    sub_DA34((uint64_t)v43, v23, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 32LL));
  }

  sub_E87FC();
  *(void *)(v34 + 128) = v44;
  *(void *)(v34 + 136) = v45;
  sub_E8B8C(v26 + v40[6], v46, &qword_189D00);
  uint64_t v47 = sub_72A20(v22);
  if (v37)
  {
    sub_73370(v47, &qword_189D00);
    sub_72E84();
  }

  else
  {
    *(void *)(v34 + 168) = v35;
    uint64_t v48 = sub_72E20();
    sub_DA34((uint64_t)v48, v22, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 32LL));
  }

  *(void *)(v34 + 176) = 0x746867696568LL;
  *(void *)(v34 + 184) = 0xE600000000000000LL;
  uint64_t v49 = *(void *)(v26 + v40[7]);
  if (v49)
  {
    uint64_t v50 = type metadata accessor for DialogPersonHeight(0LL);
    uint64_t v51 = v49;
  }

  else
  {
    uint64_t v50 = sub_73610();
    *(void *)(v34 + 200) = 0LL;
    *(void *)(v34 + 208) = 0LL;
  }

  *(void *)(v34 + 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v51;
  *(void *)(v34 + 216) = v50;
  *(void *)(v34 + 224) = 0x6144646567676F6CLL;
  *(void *)(v34 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0xEA00000000006574LL;
  uint64_t v52 = *(void *)(v26 + v40[8]);
  if (v52)
  {
    uint64_t v53 = sub_73678();
    uint64_t v55 = v52;
  }

  else
  {
    uint64_t v53 = sub_73610();
    *(void *)(v34 + 248) = 0LL;
    *(void *)(v34 + 256) = 0LL;
  }

  *(void *)(v34 + 240) = v55;
  *(void *)(v34 + 264) = v53;
  *(void *)(v34 + 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 1953066613LL;
  *(void *)(v34 + 280) = 0xE400000000000000LL;
  sub_73438(v26 + v40[9], v54, &qword_189D00);
  sub_72A20(v20);
  if (v37)
  {
    swift_retain();
    uint64_t v56 = sub_732B8();
    sub_36A94(v56, &qword_189D00);
    sub_730FC();
  }

  else
  {
    *(void *)(v34 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v35;
    uint64_t v57 = sub_72FD0();
    sub_DA34((uint64_t)v57, v20, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 32LL));
    swift_retain();
    sub_732B8();
  }

  sub_D8FC();
}

void sub_DF8DC()
{
  uint64_t v4 = v3 - v2;
  uint64_t v5 = sub_494C(&qword_18A6A0);
  uint64_t v6 = sub_20308(v5, 128LL);
  *(_OWORD *)(v6 + 16) = xmmword_138D90;
  uint64_t v7 = (void *)(v6 + 48);
  sub_73318();
  *(void *)(v8 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0xD000000000000010LL;
  *(void *)(v8 + 40) = v9;
  sub_41850(v0, v4, &qword_189D00);
  uint64_t v10 = sub_ABF4();
  uint64_t v11 = sub_A614(v4, 1LL, v10);
  if (v12)
  {
    sub_72F7C(v11, &qword_189D00);
    *(_OWORD *)uint64_t v7 = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
  }

  else
  {
    *(void *)(v6 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v10;
    uint64_t v13 = sub_B76C(v7);
    sub_E8B80((uint64_t)v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL));
  }

  sub_A0A28();
  *(void *)(v6 + 80) = v14;
  *(void *)(v6 + 88) = v15;
  char v16 = *(_BYTE *)(v0
                 + *(int *)(type metadata accessor for WellnessLoggingLogMedAsScheduledConfirmationParameters(0LL) + 20));
  *(void *)(v6 + 120) = &type metadata for Bool;
  *(_BYTE *)(v6 + 96) = v16;
  sub_73078();
}

void sub_DF9FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_DFA08( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_DFA14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  uint64_t v26 = v25;
  sub_494C(&qword_189D00);
  sub_6D20();
  __chkstk_darwin(v27);
  sub_D938();
  __chkstk_darwin(v28);
  sub_E8A5C();
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&a9 - v30;
  uint64_t v32 = sub_494C(&qword_18A6A0);
  uint64_t v33 = sub_20308(v32, 704LL);
  *(_OWORD *)(v33 + 16) = xmmword_13D500;
  uint64_t v34 = sub_E8BB4(v33, 0xD000000000000020LL);
  *(_BYTE *)(v34 + 48) = v35;
  *(void *)(v34 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = &type metadata for Bool;
  *(void *)(v34 + 80) = 0x6E69577473726966LL;
  *(void *)(v34 + 88) = 0xEF657A6953776F64LL;
  if ((*(_BYTE *)(v20 + 16) & 1) != 0)
  {
    uint64_t v36 = 0LL;
    *(void *)(v33 + 104) = 0LL;
    *(void *)(v33 + 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0LL;
    uint64_t v37 = 0LL;
  }

  else
  {
    uint64_t v37 = *(void *)(v20 + 8);
    uint64_t v36 = &type metadata for Double;
  }

  *(void *)(v33 + 120) = v36;
  strcpy((char *)(v33 + 128), "isConclusion");
  *(_BYTE *)(v33 + 141) = 0;
  *(_WORD *)(v33 + 14_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = -5120;
  *(_BYTE *)(v33 + 144) = *(_BYTE *)(v20 + 17);
  *(void *)(v33 + 168) = &type metadata for Bool;
  strcpy((char *)(v33 + 176), "isFirstWindow");
  *(_WORD *)(v33 + 190) = -4864;
  *(_BYTE *)(v33 + 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(_BYTE *)(v20 + 18);
  *(void *)(v33 + 216) = &type metadata for Bool;
  strcpy((char *)(v33 + 224), "isLastWindow");
  *(_BYTE *)(v33 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = 0;
  *(_WORD *)(v33 + 238) = -5120;
  *(_BYTE *)(v33 + 240) = *(_BYTE *)(v20 + 19);
  *(void *)(v33 + 264) = &type metadata for Bool;
  *(void *)(v33 + 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0xD000000000000016LL;
  *(void *)(v33 + 96) = v37;
  sub_A0A28();
  *(void *)(v33 + 280) = v38;
  *(_BYTE *)(v33 + 288) = *(_BYTE *)(v20 + 20);
  *(void *)(v33 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v39;
  *(void *)(v33 + 320) = 0x736D657469LL;
  *(void *)(v33 + 328) = 0xE500000000000000LL;
  uint64_t v40 = *(void *)(v20 + 24);
  uint64_t v41 = sub_494C(&qword_18CD58);
  *(void *)(v33 + 336) = v40;
  *(void *)(v33 + 360) = v41;
  *(void *)(v33 + 368) = 0xD000000000000010LL;
  sub_73318();
  *(void *)(v33 + 376) = v42;
  uint64_t v43 = (int *)v26(0LL);
  sub_E8A84(v20 + v43[11], v44, &qword_189D00);
  uint64_t v45 = sub_ABF4();
  sub_A614((uint64_t)v31, 1LL, v45);
  if (v46)
  {
    uint64_t v47 = swift_bridgeObjectRetain(v40);
    sub_E8A7C(v47, &qword_189D00);
    *(_OWORD *)(v33 + 384) = 0u;
    *(_OWORD *)(v33 + 400) = 0u;
  }

  else
  {
    *(void *)(v33 + 408) = v45;
    uint64_t v48 = sub_E8BA0();
    sub_81CCC( (uint64_t)v48,  (uint64_t)v31,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 32LL));
    swift_bridgeObjectRetain(v40);
  }

  *(void *)(v33 + 416) = 0x656D695464656DLL;
  *(void *)(v33 + 424) = 0xE700000000000000LL;
  sub_E8B8C(v20 + v43[12], v49, &qword_189D00);
  uint64_t v50 = sub_A614(v22, 1LL, v45);
  if (v46)
  {
    sub_73370(v50, &qword_189D00);
    sub_72E84();
  }

  else
  {
    *(void *)(v33 + 456) = v45;
    uint64_t v51 = sub_72E20();
    sub_81CCC((uint64_t)v51, v22, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 32LL));
  }

  sub_A0A28();
  *(void *)(v33 + 464) = v52;
  *(void *)(v33 + 47_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v53;
  sub_72CE8();
  if ((v55 & 1) != 0)
  {
    uint64_t v56 = 0LL;
    *(void *)(v33 + 488) = 0LL;
    *(void *)(v33 + 496) = 0LL;
    uint64_t v57 = 0LL;
  }

  else
  {
    uint64_t v57 = *v54;
    uint64_t v56 = &type metadata for Double;
  }

  *(void *)(v33 + 480) = v57;
  *(void *)(v33 + 504) = v56;
  *(void *)(v33 + 51_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0xD000000000000011LL;
  sub_73318();
  *(void *)(v33 + 520) = v58;
  sub_72CE8();
  if ((v61 & 1) != 0)
  {
    uint64_t v62 = 0LL;
    *(_OWORD *)(v33 + 536) = 0u;
    uint64_t v63 = 0LL;
  }

  else
  {
    uint64_t v63 = *v60;
    uint64_t v62 = &type metadata for Double;
  }

  *(void *)(v33 + 528) = v63;
  *(void *)(v33 + 55_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v62;
  *(void *)(v33 + 560) = 0xD000000000000018LL;
  *(void *)(v33 + 568) = 0x80000000001464D0LL;
  sub_73238(v20 + v43[15], v59, &qword_189D00);
  uint64_t v64 = sub_A614(v21, 1LL, v45);
  if (v46)
  {
    sub_72F7C(v64, &qword_189D00);
    *(_OWORD *)(v33 + 576) = 0u;
    *(_OWORD *)(v33 + 59_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
  }

  else
  {
    *(void *)(v33 + 600) = v45;
    uint64_t v65 = sub_E8C04();
    sub_81CCC((uint64_t)v65, v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 32LL));
  }

  *(void *)(v33 + 608) = 0x6574496C61746F74LL;
  *(void *)(v33 + 616) = 0xEA0000000000736DLL;
  uint64_t v66 = (uint64_t *)(v20 + v43[16]);
  if ((v66[1] & 1) != 0)
  {
    uint64_t v67 = 0LL;
    *(_OWORD *)(v33 + 63_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
    uint64_t v68 = 0LL;
  }

  else
  {
    uint64_t v68 = *v66;
    uint64_t v67 = &type metadata for Double;
  }

  *(void *)(v33 + 624) = v68;
  *(void *)(v33 + 648) = v67;
  *(void *)(v33 + 656) = 0x6953776F646E6977LL;
  *(void *)(v33 + 664) = 0xEA0000000000657ALL;
  sub_72CE8();
  if ((v70 & 1) != 0)
  {
    uint64_t v71 = 0LL;
    *(_OWORD *)(v33 + 680) = 0u;
    uint64_t v72 = 0LL;
  }

  else
  {
    uint64_t v72 = *v69;
    uint64_t v71 = &type metadata for Double;
  }

  *(void *)(v33 + 67_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v72;
  *(void *)(v33 + 696) = v71;
  sub_D8FC();
}

void sub_DFEAC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  a17 = v21;
  a18 = v22;
  uint64_t v23 = v19;
  sub_732B0();
  sub_6D20();
  __chkstk_darwin(v24);
  sub_72EAC();
  __chkstk_darwin(v25);
  sub_E8A5C();
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&a9 - v27;
  uint64_t v29 = sub_494C(&qword_18A6A0);
  uint64_t v30 = sub_20308(v29, 320LL);
  *(_OWORD *)(v30 + 16) = xmmword_13AB60;
  sub_73318();
  *(void *)(v31 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0xD000000000000016LL;
  *(void *)(v31 + 40) = v32;
  sub_E8AD0(v23, (uint64_t)v28);
  uint64_t v33 = sub_ABF4();
  uint64_t v34 = sub_72A20((uint64_t)v28);
  if (v35)
  {
    sub_73240(v34, &qword_189D00);
    sub_72E84();
  }

  else
  {
    *(void *)(v30 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v33;
    uint64_t v36 = sub_72E20();
    sub_E84BC((uint64_t)v36, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 32LL));
  }

  sub_E87FC();
  *(void *)(v30 + 80) = v37;
  *(void *)(v30 + 88) = v38;
  uint64_t v39 = (int *)type metadata accessor for WellnessLoggingMenstruationParameters(0LL);
  sub_E8B8C(v23 + v39[5], v40, &qword_189D00);
  uint64_t v41 = sub_72A20(v20);
  if (v35)
  {
    sub_73370(v41, &qword_189D00);
    sub_72E84();
  }

  else
  {
    *(void *)(v30 + 120) = v33;
    uint64_t v42 = sub_72E20();
    sub_DA34((uint64_t)v42, v20, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 32LL));
  }

  *(void *)(v30 + 128) = 1702125924LL;
  *(void *)(v30 + 136) = 0xE400000000000000LL;
  uint64_t v43 = *(void *)(v23 + v39[6]);
  if (v43)
  {
    uint64_t v44 = sub_73678();
    uint64_t v45 = v43;
  }

  else
  {
    uint64_t v44 = sub_73610();
    *(void *)(v30 + 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0LL;
    *(void *)(v30 + 160) = 0LL;
  }

  *(void *)(v30 + 144) = v45;
  *(void *)(v30 + 168) = v44;
  *(void *)(v30 + 176) = 0xD000000000000017LL;
  sub_73318();
  *(void *)(v30 + 184) = v47;
  *(_BYTE *)(v30 + 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(_BYTE *)(v23 + v39[7]);
  *(void *)(v30 + 216) = &type metadata for Bool;
  *(void *)(v30 + 224) = 2003790950LL;
  *(void *)(v30 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0xE400000000000000LL;
  uint64_t v48 = v23 + v39[8];
  if ((*(_BYTE *)(v48 + 8) & 1) != 0)
  {
    uint64_t v49 = 0LL;
    *(void *)(v30 + 248) = 0LL;
    *(void *)(v30 + 256) = 0LL;
    uint64_t v50 = 0LL;
  }

  else
  {
    uint64_t v50 = *(void *)v48;
    uint64_t v49 = &type metadata for Double;
  }

  *(void *)(v30 + 240) = v50;
  *(void *)(v30 + 264) = v49;
  *(void *)(v30 + 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0xD000000000000016LL;
  *(void *)(v30 + 280) = 0x8000000000146300LL;
  sub_73438(v23 + v39[9], v46, &qword_189D00);
  sub_72A20(v18);
  if (v35)
  {
    uint64_t v51 = sub_732B8();
    sub_36A94(v51, &qword_189D00);
    sub_72E84();
  }

  else
  {
    *(void *)(v30 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v33;
    uint64_t v52 = sub_72E20();
    sub_DA34((uint64_t)v52, v18, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 32LL));
    sub_732B8();
  }

  sub_24A0C();
}

void sub_E011C()
{
  uint64_t v3 = sub_494C(&qword_18A6A0);
  uint64_t v4 = sub_20308(v3, 176LL);
  *(_OWORD *)(v4 + 16) = xmmword_13A2F0;
  *(void *)(v4 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0xD000000000000013LL;
  *(void *)(v4 + 40) = 0x8000000000146590LL;
  *(_BYTE *)(v4 + 48) = *v1;
  *(void *)(v4 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = &type metadata for Bool;
  strcpy((char *)(v4 + 80), "isQueryByName");
  *(_WORD *)(v4 + 94) = -4864;
  *(_BYTE *)(v4 + 96) = v1[1];
  sub_E8BDC();
  *(void *)(v5 + 120) = v7;
  *(void *)(v5 + 128) = v6;
  sub_E8BF0();
  *(void *)(v8 + 136) = v9;
  uint64_t v10 = type metadata accessor for WellnessLoggingPhoneMedicationQueryingErrorParameters(0LL);
  sub_E8B1C(*(int *)(v10 + 24));
  uint64_t v11 = sub_ABF4();
  uint64_t v12 = sub_A614(v0, 1LL, v11);
  if (v13)
  {
    sub_36A94(v12, &qword_189D00);
    *(_OWORD *)(v4 + 144) = 0u;
    *(_OWORD *)(v4 + 160) = 0u;
  }

  else
  {
    *(void *)(v4 + 168) = v11;
    uint64_t v14 = sub_E8C04();
    sub_E8AD8((uint64_t)v14);
  }

  sub_73078();
}

void sub_E0248( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_E0254()
{
  uint64_t v3 = sub_494C(&qword_18A6A0);
  uint64_t v4 = sub_20308(v3, 368LL);
  uint64_t v5 = sub_E8BB4(v4, 0xD000000000000013LL);
  *(_BYTE *)(v5 + 48) = v6;
  *(_OWORD *)(v5 + 16) = v7;
  sub_A0A28();
  *(void *)(v8 + 80) = v9;
  *(void *)(v8 + 88) = v10;
  *(_BYTE *)(v8 + 96) = v1[1];
  *(void *)(v8 + 120) = v11;
  *(void *)(v8 + 128) = v9 + 9;
  *(void *)(v8 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v11;
  sub_A0A28();
  *(void *)(v12 + 136) = v13;
  *(_BYTE *)(v12 + 144) = v1[2];
  *(void *)(v12 + 168) = v14;
  strcpy((char *)(v12 + 176), "isQueryByName");
  *(_WORD *)(v12 + 190) = -4864;
  *(_BYTE *)(v12 + 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v1[3];
  *(void *)(v12 + 216) = v14;
  strcpy((char *)(v12 + 224), "medDoesntExist");
  *(_BYTE *)(v12 + 239) = -18;
  *(_BYTE *)(v12 + 240) = v1[4];
  *(void *)(v12 + 264) = v14;
  *(void *)(v12 + 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v15 + 3;
  *(void *)(v12 + 280) = 0x8000000000146620LL;
  *(_BYTE *)(v12 + 288) = v1[5];
  char v16 = (_OWORD *)(v12 + 336);
  sub_E8BDC();
  *(void *)(v17 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v19;
  *(void *)(v17 + 320) = v18;
  sub_E8BF0();
  *(void *)(v20 + 328) = v21;
  uint64_t v22 = sub_E8BD4();
  sub_E8B1C(*(int *)(v22 + 40));
  uint64_t v23 = sub_ABF4();
  uint64_t v24 = sub_A614(v0, 1LL, v23);
  if (v25)
  {
    sub_36A94(v24, &qword_189D00);
    *char v16 = 0u;
    v16[1] = 0u;
  }

  else
  {
    *(void *)(v4 + 360) = v23;
    uint64_t v26 = sub_E8C04();
    sub_E8AD8((uint64_t)v26);
  }

  sub_73078();
}

void sub_E0400( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_E040C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v24;
  a20 = v25;
  uint64_t v27 = v26;
  sub_732B0();
  sub_6D20();
  __chkstk_darwin(v28);
  sub_D938();
  __chkstk_darwin(v29);
  sub_ABA4();
  __chkstk_darwin(v30);
  sub_E891C();
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)&a9 - v32;
  uint64_t v34 = sub_494C(&qword_18A6A0);
  uint64_t v35 = sub_20308(v34, 320LL);
  *(_OWORD *)(v35 + 16) = xmmword_13AB60;
  sub_E89D4(v35, (uint64_t)"actionAceCommandString");
  uint64_t v36 = sub_ABF4();
  sub_72A20((uint64_t)v33);
  if (v37)
  {
    sub_279E0((uint64_t)v33, &qword_189D00);
    *(_OWORD *)(v35 + 48) = 0u;
    *(_OWORD *)(v35 + 64) = 0u;
  }

  else
  {
    *(void *)(v35 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v36;
    uint64_t v38 = sub_E8BA0();
    sub_DA34( (uint64_t)v38,  (uint64_t)v33,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 32LL));
  }

  uint64_t v39 = sub_E8A8C((uint64_t)"changeAceCommandString");
  uint64_t v40 = sub_E8B3C(v39);
  sub_E8A84(v40, v41, &qword_189D00);
  uint64_t v42 = sub_72A20(v23);
  if (v37)
  {
    sub_E8A7C(v42, &qword_189D00);
    sub_730FC();
  }

  else
  {
    *(void *)(v35 + 120) = v36;
    uint64_t v43 = sub_72FD0();
    sub_DA34((uint64_t)v43, v23, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 32LL));
  }

  uint64_t v44 = sub_E8958();
  sub_7317C(v44, v45, &qword_189D00);
  uint64_t v46 = sub_72A20(v22);
  if (v37)
  {
    sub_73240(v46, &qword_189D00);
    sub_72E84();
  }

  else
  {
    *(void *)(v35 + 168) = v36;
    uint64_t v47 = sub_72E20();
    sub_E84BC((uint64_t)v47, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 32LL));
  }

  sub_E8930();
  if (v22)
  {
    uint64_t v49 = sub_73678();
    uint64_t v50 = v22;
  }

  else
  {
    uint64_t v50 = 0LL;
    uint64_t v49 = 0LL;
    *(void *)(v35 + 200) = 0LL;
    *(void *)(v35 + 208) = 0LL;
  }

  *(void *)(v35 + 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v50;
  *(void *)(v35 + 216) = v49;
  *(void *)(v35 + 224) = 1953066613LL;
  *(void *)(v35 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0xE400000000000000LL;
  sub_73238(v20 + *(int *)(v27 + 32), v48, &qword_189D00);
  sub_72A20(v21);
  if (v37)
  {
    uint64_t v51 = sub_72C38();
    sub_72F7C(v51, &qword_189D00);
    sub_72E84();
  }

  else
  {
    *(void *)(v35 + 264) = v36;
    uint64_t v52 = sub_72E20();
    sub_DA34((uint64_t)v52, v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 32LL));
    sub_72C38();
  }

  sub_E8B6C();
  *(void *)(v35 + 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v53;
  *(void *)(v35 + 280) = v54;
  sub_72CE8();
  if ((v56 & 1) != 0)
  {
    uint64_t v57 = 0LL;
    *(void *)(v35 + 296) = 0LL;
    *(void *)(v35 + 304) = 0LL;
    uint64_t v58 = 0LL;
  }

  else
  {
    uint64_t v58 = *v55;
    uint64_t v57 = &type metadata for Double;
  }

  *(void *)(v35 + 288) = v58;
  *(void *)(v35 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v57;
  sub_D8FC();
}

uint64_t sub_E0674(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = sub_494C(&qword_189D00);
  v2[4] = sub_36390(v3);
  uint64_t v4 = type metadata accessor for WellnessLoggingAskForValueParameters(0LL);
  v2[5] = sub_36390(v4);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_E06C4()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v4 = sub_ABF4();
  sub_AA204(v2);
  uint64_t v5 = sub_27CC8(*(_BYTE *)(v3 + 16));
  uint64_t v7 = v6;
  String.toSpeakableString.getter(v5, v6);
  swift_bridgeObjectRelease(v7);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 0LL, 1LL, v4);
  sub_A384(v1, v2);
  sub_DEF58();
  sub_E8BA8(v8);
  uint64_t v9 = (void *)sub_729E8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[7] = v9;
  sub_E8A70(v9, (uint64_t)sub_E0788);
  return sub_E8A0C(0xD00000000000001BLL, 0x8000000000146400LL, v1, v11);
}

uint64_t sub_E0788()
{
  if (!v1) {
    *(void *)(v2 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_E07D0(uint64_t a1)
{
  uint64_t v1 = sub_E8B5C();
  return sub_3D6F8(v1, v2);
}

uint64_t sub_E0814(uint64_t a1)
{
  return sub_B2410(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_E085C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_72AA4(a1, a2);
  uint64_t v4 = type metadata accessor for WellnessLoggingAskForValueParameters(v3);
  *(void *)(v2 + 40) = sub_36390(v4);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_E0894()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = (void (*)(uint64_t))v0[2];
  uint64_t v3 = sub_ABF4();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1LL, 1LL, v3);
  v2(v1);
  sub_DEF58();
  sub_E8BA8(v4);
  uint64_t v5 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[7] = v5;
  sub_72C40(v5, (uint64_t)sub_E092C);
  unint64_t v6 = sub_72F6C(27LL);
  return v7(v6);
}

uint64_t sub_E092C()
{
  if (!v1) {
    *(void *)(v2 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_E0974(uint64_t a1)
{
  uint64_t v1 = sub_E8B5C();
  return sub_729A4(v1, v2);
}

uint64_t sub_E09A8(uint64_t a1)
{
  return sub_202A8(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_E09E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_72AA4(a1, a2);
  uint64_t v4 = type metadata accessor for WellnessLoggingBloodPressureParameters(v3);
  *(void *)(v2 + 40) = v4;
  *(void *)(v2 + 48) = sub_36390(v4);
  sub_A964();
  return sub_A5D0();
}

#error "E0A78: call analysis failed (funcsize=39)"
uint64_t sub_E0AC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_728C8();
  sub_6D64();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_E0B08(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_E0B3C(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_E0B70(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_E87CC(a1, a2, a3);
  uint64_t v5 = type metadata accessor for WellnessLoggingDistanceCyclingParameters(v4);
  *(void *)(v3 + 40) = v5;
  *(void *)(v3 + 48) = sub_36390(v5);
  sub_A964();
  return sub_A5D0();
}

#error "E0BE0: call analysis failed (funcsize=31)"
uint64_t sub_E0C34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_728C8();
  sub_6D64();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_E0C7C(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_E0CB0(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_E0CE4(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_E87CC(a1, a2, a3);
  uint64_t v5 = type metadata accessor for WellnessLoggingDistanceWalkingRunningParameters(v4);
  *(void *)(v3 + 40) = v5;
  *(void *)(v3 + 48) = sub_36390(v5);
  sub_A964();
  return sub_A5D0();
}

#error "E0D54: call analysis failed (funcsize=29)"
uint64_t sub_E0DA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_728C8();
  sub_6D64();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_E0DE8(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_E0E1C(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_E0E50(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_E87CC(a1, a2, a3);
  uint64_t v5 = type metadata accessor for WellnessLoggingDistanceWheelchairParameters(v4);
  *(void *)(v3 + 40) = v5;
  *(void *)(v3 + 48) = sub_36390(v5);
  sub_A964();
  return sub_A5D0();
}

#error "E0EC0: call analysis failed (funcsize=29)"
uint64_t sub_E0F0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_728C8();
  sub_6D64();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_E0F54(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_E0F88(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_E0FBC(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_E87CC(a1, a2, a3);
  uint64_t v5 = type metadata accessor for WellnessLoggingFlightsClimbedParameters(v4);
  *(void *)(v3 + 40) = v5;
  *(void *)(v3 + 48) = sub_36390(v5);
  sub_A964();
  return sub_A5D0();
}

#error "E102C: call analysis failed (funcsize=29)"
uint64_t sub_E1078()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_728C8();
  sub_6D64();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_E10C0(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_E10F4(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_E1128(uint64_t a1, char a2, uint64_t a3)
{
  *(_BYTE *)(v3 + 80) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a3;
  uint64_t v4 = type metadata accessor for WellnessLoggingGenericDatatypeParameters(0LL);
  *(void *)(v3 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v4;
  *(void *)(v3 + 40) = sub_36390(v4);
  sub_A964();
  return sub_A5D0();
}

#error "E11A4: call analysis failed (funcsize=31)"
uint64_t sub_E11F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_E874C();
  sub_6D64();
  if (!v1) {
    *(void *)(v2 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_E123C(uint64_t a1, char a2, uint64_t a3)
{
  *(_BYTE *)(v3 + 80) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a3;
  uint64_t v4 = type metadata accessor for WellnessLoggingGenericDatatypeParameters(0LL);
  *(void *)(v3 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v4;
  *(void *)(v3 + 40) = sub_36390(v4);
  sub_A964();
  return sub_A5D0();
}

#error "E12B8: call analysis failed (funcsize=31)"
uint64_t sub_E1308()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_E874C();
  sub_6D64();
  if (!v1) {
    *(void *)(v2 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_E1350(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 24);
  sub_72A50(a1, type metadata accessor for WellnessLoggingGenericDatatypeParameters);

  sub_A78C();
  uint64_t v3 = sub_E8B5C();
  return sub_55F88(v3, v4);
}

uint64_t sub_E138C(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 24);
  sub_72A50(a1, type metadata accessor for WellnessLoggingGenericDatatypeParameters);

  sub_A78C();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_E13D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_72AA4(a1, a2);
  uint64_t v4 = type metadata accessor for WellnessLoggingHeightParameters(v3);
  *(void *)(v2 + 40) = v4;
  *(void *)(v2 + 48) = sub_36390(v4);
  sub_A964();
  return sub_A5D0();
}

#error "E149C: call analysis failed (funcsize=53)"
uint64_t sub_E14EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_728C8();
  sub_6D64();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_E1534(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_E1568(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_E159C(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a2;
  *(void *)(v3 + 24) = a3;
  *(_BYTE *)(v3 + 88) = a1;
  uint64_t v4 = sub_494C(&qword_189D00);
  *(void *)(v3 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_36390(v4);
  uint64_t v5 = type metadata accessor for WellnessLoggingLogMedAsScheduledConfirmationParameters(0LL);
  *(void *)(v3 + 40) = v5;
  *(void *)(v3 + 48) = sub_36390(v5);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_E15F4()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 24);
  char v4 = *(_BYTE *)(v0 + 88);
  sub_ABF4();
  uint64_t v5 = 1LL;
  sub_36F38(v1, 1LL);
  *(_BYTE *)(v1 + *(int *)(v2 + 20)) = v4;
  uint64_t v6 = *(void *)(v3 + 24);
  if (v6)
  {
    uint64_t v7 = *(void *)(*(void *)(v0 + 24) + 16LL);
    swift_bridgeObjectRetain(*(void *)(v3 + 24));
    String.toSpeakableString.getter(v7, v6);
    sub_6D64();
    uint64_t v5 = 0LL;
  }

  uint64_t v8 = *(void *)(v0 + 48);
  uint64_t v9 = *(void *)(v0 + 32);
  sub_36F38(v9, v5);
  sub_A384(v9, v8);
  sub_DF8DC();
  sub_72C4C(v10);
  uint64_t v11 = (void *)sub_729E8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 64) = v11;
  sub_E8A70(v11, (uint64_t)sub_E16D4);
  sub_3D80C();
  unint64_t v12 = sub_72AE8(45LL);
  return sub_729DC(v12, v13, v14, v15);
}

uint64_t sub_E16D4()
{
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_E171C(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_3D6F8(v1, v2);
}

uint64_t sub_E1760(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_B2410(v1);
}

uint64_t sub_E17A4(char a1, char a2, char a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = sub_E88F0(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = type metadata accessor for WellnessLoggingLogSpecificMedRejectedConfirmationResultSetParameters(v9);
  *(void *)(v8 + 56) = v10;
  *(void *)(v8 + 64) = sub_36390(v10);
  sub_A964();
  return sub_E8834(v11, v12, v13);
}

uint64_t sub_E17E0()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v28 = *(void **)(v0 + 40);
  uint64_t v29 = *(void *)(v0 + 48);
  uint64_t v27 = *(uint64_t **)(v0 + 32);
  int v24 = *(unsigned __int8 *)(v0 + 107);
  char v26 = *(_BYTE *)(v0 + 108);
  uint64_t v2 = sub_ABF4();
  sub_E8598(v2, v3, v4, v5, v6, v7, v8, v9, v22, v24, SHIWORD(v24), v26);
  sub_D73AC(v1, v27, v28, v29);
  sub_DFA14( (uint64_t)type metadata accessor for WellnessLoggingLogSpecificMedRejectedConfirmationResultSetParameters,  v10,  v11,  v12,  v13,  v14,  v15,  v16,  v23,  v25,  (uint64_t)v27,  (uint64_t)v28,  v29,  v31,  v32,  v33,  v34,  v35,  v36,  v37);
  uint64_t v18 = v17;
  *(void *)(v0 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v17;
  uint64_t v19 = (void *)sub_E8B08((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 80) = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_E18B0;
  sub_3D80C();
  return sub_E8840(0xD00000000000003BLL, v20, v18, v30);
}

uint64_t sub_E18B0()
{
  if (!v1) {
    *(void *)(v2 + 96) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_E18F8(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 40);
  sub_72A50(a1, type metadata accessor for WellnessLoggingLogSpecificMedRejectedConfirmationResultSetParameters);

  sub_37034();
  sub_A78C();
  return sub_3D6F8(*(void *)(v1 + 96), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_E1944(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 40);
  sub_72A50(a1, type metadata accessor for WellnessLoggingLogSpecificMedRejectedConfirmationResultSetParameters);

  sub_37034();
  sub_A78C();
  return sub_B2410(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_E198C(char a1, char a2, char a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = sub_E88F0(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = type metadata accessor for WellnessLoggingLogGenericMedRejectedConfirmationResultSetParameters(v9);
  *(void *)(v8 + 56) = v10;
  *(void *)(v8 + 64) = sub_36390(v10);
  sub_A964();
  return sub_E8834(v11, v12, v13);
}

uint64_t sub_E19C8()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v28 = *(void *)(v0 + 40);
  uint64_t v29 = *(void *)(v0 + 48);
  uint64_t v27 = *(uint64_t **)(v0 + 32);
  int v24 = *(unsigned __int8 *)(v0 + 107);
  char v26 = *(_BYTE *)(v0 + 108);
  uint64_t v2 = sub_ABF4();
  sub_E8598(v2, v3, v4, v5, v6, v7, v8, v9, v22, v24, SHIWORD(v24), v26);
  sub_34FB4(v1, v27);
  sub_DFA14( (uint64_t)type metadata accessor for WellnessLoggingLogGenericMedRejectedConfirmationResultSetParameters,  v10,  v11,  v12,  v13,  v14,  v15,  v16,  v23,  v25,  (uint64_t)v27,  v28,  v29,  v31,  v32,  v33,  v34,  v35,  v36,  v37);
  uint64_t v18 = v17;
  *(void *)(v0 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v17;
  uint64_t v19 = (void *)sub_E8B08((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 80) = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_E1A98;
  sub_3D80C();
  return sub_E8840(0xD00000000000003ALL, v20, v18, v30);
}

uint64_t sub_E1A98()
{
  if (!v1) {
    *(void *)(v2 + 96) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_E1AE0(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 48);
  sub_72A50(a1, type metadata accessor for WellnessLoggingLogGenericMedRejectedConfirmationResultSetParameters);
  sub_37034();

  sub_A78C();
  return sub_3D6F8(*(void *)(v1 + 96), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_E1B2C(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 48);
  sub_72A50(a1, type metadata accessor for WellnessLoggingLogGenericMedRejectedConfirmationResultSetParameters);
  sub_37034();

  sub_A78C();
  return sub_B2410(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_E1B74(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_E87CC(a1, a2, a3);
  uint64_t v5 = type metadata accessor for WellnessLoggingMenstruationParameters(v4);
  *(void *)(v3 + 40) = v5;
  *(void *)(v3 + 48) = sub_36390(v5);
  sub_A964();
  return sub_A5D0();
}

#error "E1C38: call analysis failed (funcsize=51)"
uint64_t sub_E1C84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_728C8();
  sub_6D64();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_E1CCC(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_E1D00(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_E1D34(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 24) = a4;
  *(void *)(v5 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a5;
  *(void *)(v5 + 16) = a3;
  *(_BYTE *)(v5 + 9_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = a2;
  *(_BYTE *)(v5 + 96) = a1;
  uint64_t v6 = sub_494C(&qword_189D00);
  *(void *)(v5 + 40) = sub_36390(v6);
  uint64_t v7 = type metadata accessor for WellnessLoggingPhoneMedicationQueryingErrorParameters(0LL);
  *(void *)(v5 + 48) = v7;
  *(void *)(v5 + 56) = sub_36390(v7);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_E1D94()
{
  uint64_t v1 = *(_BYTE **)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 32);
  char v3 = *(_BYTE *)(v0 + 97);
  char v4 = *(_BYTE *)(v0 + 96);
  uint64_t v5 = sub_ABF4();
  sub_E89F0(v5);
  _BYTE *v1 = v4;
  v1[1] = v3;
  if (v2) {
    sub_E8C18();
  }
  sub_E8980();
  sub_E011C();
  *(void *)(v0 + 64) = v6;
  uint64_t v7 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v7;
  sub_E8A70(v7, (uint64_t)sub_E1E3C);
  unint64_t v8 = sub_72F6C(44LL);
  return sub_729DC(v8, v9, v10, v11);
}

uint64_t sub_E1E3C()
{
  if (!v1) {
    *(void *)(v2 + 88) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_E1E84()
{
  return sub_3D6F8(*(void *)(v0 + 88), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_E1ECC()
{
  return sub_B2410(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_E1F10(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_E87CC(a1, a2, a3);
  uint64_t v5 = type metadata accessor for WellnessLoggingPushCountParameters(v4);
  *(void *)(v3 + 40) = v5;
  *(void *)(v3 + 48) = sub_36390(v5);
  sub_A964();
  return sub_A5D0();
}

#error "E1F80: call analysis failed (funcsize=29)"
uint64_t sub_E1FCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_728C8();
  sub_6D64();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_E2014(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_E2048(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_E207C()
{
  uint64_t v1 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_76520;
  return v3(0xD000000000000014LL, 0x80000000001462A0LL, _swiftEmptyArrayStorage);
}

uint64_t sub_E20E4(char a1, char a2, char a3, char a4, char a5, char a6, uint64_t a7)
{
  *(void *)(v7 + 16) = a7;
  *(_BYTE *)(v7 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = a6;
  *(_BYTE *)(v7 + 76) = a5;
  *(_BYTE *)(v7 + 75) = a4;
  *(_BYTE *)(v7 + 74) = a3;
  *(_BYTE *)(v7 + 73) = a2;
  *(_BYTE *)(v7 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a1;
  uint64_t v8 = sub_E8BD4();
  *(void *)(v7 + 24) = v8;
  *(void *)(v7 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_36390(v8);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_E2138()
{
  uint64_t v1 = *(_BYTE **)(v0 + 32);
  char v2 = *(_BYTE *)(v0 + 77);
  char v3 = *(_BYTE *)(v0 + 76);
  char v4 = *(_BYTE *)(v0 + 75);
  char v5 = *(_BYTE *)(v0 + 74);
  char v6 = *(_BYTE *)(v0 + 73);
  char v7 = *(_BYTE *)(v0 + 72);
  uint64_t v8 = (uint64_t)&v1[*(int *)(*(void *)(v0 + 24) + 40LL)];
  sub_ABF4();
  uint64_t v9 = sub_AA204(v8);
  _BYTE *v1 = v7;
  v1[1] = v6;
  v1[2] = v5;
  v1[3] = v4;
  v1[4] = v3;
  v1[5] = v2;
  sub_36A94(v9, &qword_189D00);
  sub_AA204(v8);
  sub_E0254();
  *(void *)(v0 + 40) = v10;
  uint64_t v11 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 48) = v11;
  sub_E8A70(v11, (uint64_t)sub_E2220);
  unint64_t v12 = sub_72F6C(44LL);
  return v13(v12);
}

uint64_t sub_E2220(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 48);
  *(void *)(*v2 + 56) = v1;
  swift_task_dealloc(v5);
  sub_6D64();
  if (!v1) {
    *(void *)(v4 + 64) = a1;
  }
  sub_A964();
  return sub_55F28(v6, v7, v8);
}

uint64_t sub_E2288(uint64_t a1)
{
  return sub_729A4(*(void *)(v1 + 64), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_E22C4(uint64_t a1)
{
  return sub_202A8(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_E22FC(char a1, char a2, char a3, char a4, char a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 24) = a8;
  *(void *)(v9 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a9;
  *(void *)(v9 + 16) = a7;
  *(_BYTE *)(v9 + 101) = a6;
  *(_BYTE *)(v9 + 100) = a5;
  *(_BYTE *)(v9 + 99) = a4;
  *(_BYTE *)(v9 + 98) = a3;
  *(_BYTE *)(v9 + 9_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = a2;
  *(_BYTE *)(v9 + 96) = a1;
  uint64_t v10 = sub_494C(&qword_189D00);
  *(void *)(v9 + 40) = sub_36390(v10);
  uint64_t v11 = sub_E8BD4();
  *(void *)(v9 + 48) = v11;
  *(void *)(v9 + 56) = sub_36390(v11);
  sub_A964();
  return sub_E8834(v12, v13, v14);
}

uint64_t sub_E236C()
{
  uint64_t v1 = *(_BYTE **)(v0 + 56);
  uint64_t v13 = *(void *)(v0 + 32);
  char v12 = *(_BYTE *)(v0 + 101);
  char v2 = *(_BYTE *)(v0 + 100);
  char v3 = *(_BYTE *)(v0 + 99);
  char v4 = *(_BYTE *)(v0 + 98);
  char v5 = *(_BYTE *)(v0 + 97);
  char v6 = *(_BYTE *)(v0 + 96);
  uint64_t v7 = sub_ABF4();
  sub_E89F0(v7);
  _BYTE *v1 = v6;
  v1[1] = v5;
  v1[2] = v4;
  v1[3] = v3;
  v1[4] = v2;
  v1[5] = v12;
  if (v13) {
    sub_E8C18();
  }
  sub_E8980();
  sub_E0254();
  uint64_t v9 = v8;
  *(void *)(v0 + 64) = v8;
  *(void *)(v0 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v10;
  sub_E8A70(v10, (uint64_t)sub_E2474);
  return v14(0xD00000000000002CLL, 0x80000000001465B0LL, v9);
}

uint64_t sub_E2474()
{
  if (!v1) {
    *(void *)(v2 + 88) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_E24BC()
{
  return sub_3D6F8(*(void *)(v0 + 88), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_E2504()
{
  return sub_B2410(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_E2548(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_72AA4(a1, a2);
  uint64_t v4 = type metadata accessor for WellnessLoggingWeightParameters(v3);
  *(void *)(v2 + 40) = v4;
  *(void *)(v2 + 48) = sub_36390(v4);
  sub_A964();
  return sub_A5D0();
}

#error "E25E0: call analysis failed (funcsize=40)"
uint64_t sub_E2630()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_728C8();
  sub_6D64();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_E2678(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_E26AC(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

void sub_E26E0()
{
}

void sub_E2730()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_6D44();
  uint64_t v10 = v9 - v8;
  sub_494C(&qword_189CF8);
  sub_6D20();
  __chkstk_darwin(v11);
  sub_6D44();
  uint64_t v14 = v13 - v12;
  sub_41850(v5, v13 - v12, &qword_189CF8);
  sub_E8B80(v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
  CATWrapper.init(templateDir:options:globals:)(v14, v10, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
  sub_279E0(v5, &qword_189CF8);
  sub_D8FC();
}

uint64_t sub_E2808()
{
  return type metadata accessor for WellnessLoggingCATPatternsExecutor(0LL);
}

uint64_t type metadata accessor for WellnessLoggingGenericDatatypeParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18F588, (uint64_t)&nominal type descriptor for WellnessLoggingGenericDatatypeParameters);
}

uint64_t type metadata accessor for WellnessLoggingWeightParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18F4E8, (uint64_t)&nominal type descriptor for WellnessLoggingWeightParameters);
}

uint64_t type metadata accessor for WellnessLoggingPushCountParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18F100, (uint64_t)&nominal type descriptor for WellnessLoggingPushCountParameters);
}

uint64_t type metadata accessor for WellnessLoggingMenstruationParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18F060, (uint64_t)&nominal type descriptor for WellnessLoggingMenstruationParameters);
}

uint64_t type metadata accessor for WellnessLoggingHeightParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18F1A8, (uint64_t)&nominal type descriptor for WellnessLoggingHeightParameters);
}

uint64_t type metadata accessor for WellnessLoggingFlightsClimbedParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18F248, (uint64_t)&nominal type descriptor for WellnessLoggingFlightsClimbedParameters);
}

uint64_t type metadata accessor for WellnessLoggingDistanceWheelchairParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18F2F0, (uint64_t)&nominal type descriptor for WellnessLoggingDistanceWheelchairParameters);
}

uint64_t type metadata accessor for WellnessLoggingDistanceWalkingRunningParameters(uint64_t a1)
{
  return sub_70F74( a1,  qword_18F398,  (uint64_t)&nominal type descriptor for WellnessLoggingDistanceWalkingRunningParameters);
}

uint64_t type metadata accessor for WellnessLoggingDistanceCyclingParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18F440, (uint64_t)&nominal type descriptor for WellnessLoggingDistanceCyclingParameters);
}

uint64_t type metadata accessor for WellnessLoggingBloodPressureParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18EFB8, (uint64_t)&nominal type descriptor for WellnessLoggingBloodPressureParameters);
}

uint64_t type metadata accessor for WellnessLoggingAskForValueParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18EF28, (uint64_t)&nominal type descriptor for WellnessLoggingAskForValueParameters);
}

uint64_t type metadata accessor for WellnessLoggingLogSpecificMedRejectedConfirmationResultSetParameters( uint64_t a1)
{
  return sub_70F74( a1,  qword_18EE68,  (uint64_t)&nominal type descriptor for WellnessLoggingLogSpecificMedRejectedConfirmationResultSetParameters);
}

uint64_t type metadata accessor for WellnessLoggingLogMedAsScheduledConfirmationParameters(uint64_t a1)
{
  return sub_70F74( a1,  qword_18EDD8,  (uint64_t)&nominal type descriptor for WellnessLoggingLogMedAsScheduledConfirmationParameters);
}

uint64_t type metadata accessor for WellnessLoggingLogGenericMedRejectedConfirmationResultSetParameters( uint64_t a1)
{
  return sub_70F74( a1,  qword_18ED18,  (uint64_t)&nominal type descriptor for WellnessLoggingLogGenericMedRejectedConfirmationResultSetParameters);
}

uint64_t sub_E2940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E294C);
}

uint64_t sub_E2950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E295C);
}

uint64_t *sub_E2964(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_494C(&qword_189D00);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v7);
    }

    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }

  return a1;
}

void *sub_E2A40(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *sub_E2AEC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *sub_E2BE8(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *sub_E2C94(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_E2D90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E2D9C);
}

void sub_E2D9C()
{
  if (v0)
  {
    uint64_t v1 = sub_73270();
    sub_72CBC(v1, v2, v3);
  }

  else
  {
    sub_1EB0C();
  }

uint64_t sub_E2E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E2E0C);
}

void sub_E2E0C()
{
  if (v3)
  {
    uint64_t v4 = sub_72F90();
    sub_72CC8(v4, v5, v6, v7);
  }

  else
  {
    *(_BYTE *)(v1 + *(int *)(v2 + 20)) = v0 + 1;
    sub_1EB0C();
  }

void sub_E2E54(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = &unk_13D5F8;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
  }

void sub_E2EC4()
{
  if ((v4 & 0x20000) != 0)
  {
    sub_E87E0();
  }

  else
  {
    uint64_t v5 = v3;
    *(_BYTE *)uint64_t v0 = *(_BYTE *)v1;
    *(void *)(v0 + 8) = *(void *)(v1 + 8);
    *(_BYTE *)(v0 + 16) = *(_BYTE *)(v1 + 16);
    *(_DWORD *)(v0 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = *(_DWORD *)(v1 + 17);
    *(void *)(v0 + 24) = *(void *)(v1 + 24);
    sub_ABF4();
    sub_E8BC8();
    if (sub_E8588())
    {
      uint64_t v6 = sub_494C(&qword_189D00);
      sub_72A3C(v6);
    }

    else
    {
      sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL));
      sub_E8474();
    }

    if (sub_E8588())
    {
      uint64_t v7 = sub_494C(&qword_189D00);
      sub_72A3C(v7);
    }

    else
    {
      sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL));
      sub_E8474();
    }

    uint64_t v8 = v5[13];
    uint64_t v9 = v5[14];
    uint64_t v10 = v0 + v8;
    uint64_t v11 = v1 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
    uint64_t v12 = v0 + v9;
    uint64_t v13 = v1 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
    if (sub_E8588())
    {
      uint64_t v14 = sub_494C(&qword_189D00);
      sub_72A3C(v14);
    }

    else
    {
      sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL));
      sub_E8474();
    }

    uint64_t v15 = v5[16];
    uint64_t v16 = v5[17];
    uint64_t v17 = v0 + v15;
    uint64_t v18 = v1 + v15;
    *(void *)uint64_t v17 = *(void *)v18;
    *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
    uint64_t v19 = v0 + v16;
    uint64_t v20 = v1 + v16;
    *(void *)uint64_t v19 = *(void *)v20;
    *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  }

  sub_24A0C();
}

void sub_E3038(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[11];
  sub_ABF4();
  if (sub_72FC4(a1 + a2[15]))
  {
    sub_1EB0C();
  }

  else
  {
    uint64_t v5 = sub_735FC();
    sub_732C0(v5, v6, v7);
  }

void sub_E30B8()
{
  uint64_t v6 = sub_E885C(v4, v5);
  *(void *)(v6 + 24) = *(void *)(v7 + 24);
  sub_ABF4();
  sub_E8BC8();
  if (sub_E8588())
  {
    uint64_t v8 = sub_494C(&qword_189D00);
    sub_72A3C(v8);
  }

  else
  {
    sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
    sub_E8474();
  }

  if (sub_E8588())
  {
    uint64_t v9 = sub_494C(&qword_189D00);
    sub_72A3C(v9);
  }

  else
  {
    sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
    sub_E8474();
  }

  uint64_t v10 = *(int *)(v2 + 52);
  uint64_t v11 = *(int *)(v2 + 56);
  uint64_t v12 = v0 + v10;
  uint64_t v13 = v1 + v10;
  *(void *)uint64_t v12 = *(void *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  uint64_t v14 = v0 + v11;
  uint64_t v15 = v1 + v11;
  *(void *)uint64_t v14 = *(void *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  if (sub_E8588())
  {
    uint64_t v16 = sub_494C(&qword_189D00);
    sub_72A3C(v16);
  }

  else
  {
    sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
    sub_E8474();
  }

  sub_E8710();
  sub_24A0C();
}

void sub_E31C8()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  *(_BYTE *)uint64_t v3 = *(_BYTE *)v5;
  uint64_t v6 = *(void *)(v5 + 8);
  *(_BYTE *)(v3 + 16) = *(_BYTE *)(v5 + 16);
  *(void *)(v3 + 8) = v6;
  sub_E89B0((_BYTE *)v3, (_BYTE *)v5);
  uint64_t v8 = *(void *)(v7 + 24);
  *(void *)(v4 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  uint64_t v9 = sub_ABF4();
  int v10 = sub_E855C();
  if (v0)
  {
    if (!v10)
    {
      sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL));
      sub_E8474();
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v11 = *(void *)(v9 - 8);
  if (v10)
  {
    sub_730E4(v11);
LABEL_6:
    uint64_t v12 = sub_494C(&qword_189D00);
    sub_72A3C(v12);
    goto LABEL_7;
  }

  sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 24));
LABEL_7:
  int v13 = sub_E8488(v2[12]);
  if (v0)
  {
    if (!v13)
    {
      sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL));
      sub_E8474();
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v14 = *(void *)(v9 - 8);
  if (v13)
  {
    sub_730E4(v14);
LABEL_12:
    uint64_t v15 = sub_494C(&qword_189D00);
    sub_72A3C(v15);
    goto LABEL_13;
  }

  sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 24));
LABEL_13:
  sub_E888C(v2[13]);
  sub_E888C(v2[14]);
  int v16 = sub_E8488(v2[15]);
  if (!v0)
  {
    uint64_t v17 = *(void *)(v9 - 8);
    if (!v16)
    {
      sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 24));
      goto LABEL_19;
    }

    sub_730E4(v17);
    goto LABEL_18;
  }

  if (v16)
  {
LABEL_18:
    uint64_t v18 = sub_494C(&qword_189D00);
    sub_72A3C(v18);
    goto LABEL_19;
  }

  sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL));
  sub_E8474();
LABEL_19:
  sub_E888C(v2[16]);
  sub_E8814(v2[17]);
  sub_24A0C();
}

void sub_E3338(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_E885C(a1, a2);
  *(void *)(v5 + 24) = *(void *)(v6 + 24);
  uint64_t v7 = sub_ABF4();
  if (sub_E8588())
  {
    uint64_t v8 = sub_494C(&qword_189D00);
    sub_72A3C(v8);
  }

  else
  {
    sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL));
    sub_E8474();
  }

  if (sub_E8588())
  {
    uint64_t v9 = sub_494C(&qword_189D00);
    sub_72A3C(v9);
  }

  else
  {
    sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL));
    sub_E8474();
  }

  uint64_t v10 = *(int *)(v4 + 52);
  uint64_t v11 = *(int *)(v4 + 56);
  uint64_t v12 = v2 + v10;
  uint64_t v13 = v3 + v10;
  *(void *)uint64_t v12 = *(void *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  uint64_t v14 = v2 + v11;
  uint64_t v15 = v3 + v11;
  *(void *)uint64_t v14 = *(void *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  if (sub_E8588())
  {
    uint64_t v16 = sub_494C(&qword_189D00);
    sub_72A3C(v16);
  }

  else
  {
    sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL));
    sub_E8474();
  }

  sub_E8710();
  sub_73078();
}

void sub_E3448()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  *(_BYTE *)uint64_t v5 = *(_BYTE *)v3;
  *(void *)(v5 + 8) = *(void *)(v3 + 8);
  *(_BYTE *)(v5 + 16) = *(_BYTE *)(v3 + 16);
  sub_E89B0((_BYTE *)v5, (_BYTE *)v3);
  *(void *)(v6 + 24) = *(void *)(v7 + 24);
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_ABF4();
  int v9 = sub_E855C();
  if (v0)
  {
    if (!v9)
    {
      sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL));
      sub_E8474();
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v10 = *(void *)(v8 - 8);
  if (v9)
  {
    sub_730E4(v10);
LABEL_6:
    uint64_t v11 = sub_494C(&qword_189D00);
    sub_72A3C(v11);
    goto LABEL_7;
  }

  sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 40));
LABEL_7:
  int v12 = sub_E8488(v2[12]);
  if (v0)
  {
    if (!v12)
    {
      sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL));
      sub_E8474();
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v13 = *(void *)(v8 - 8);
  if (v12)
  {
    sub_730E4(v13);
LABEL_12:
    uint64_t v14 = sub_494C(&qword_189D00);
    sub_72A3C(v14);
    goto LABEL_13;
  }

  sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 40));
LABEL_13:
  uint64_t v15 = v2[13];
  uint64_t v16 = v2[14];
  uint64_t v17 = v6 + v15;
  uint64_t v18 = v4 + v15;
  *(void *)uint64_t v17 = *(void *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  uint64_t v19 = v6 + v16;
  uint64_t v20 = v4 + v16;
  *(void *)uint64_t v19 = *(void *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  int v21 = sub_E8488(v2[15]);
  if (!v0)
  {
    uint64_t v22 = *(void *)(v8 - 8);
    if (!v21)
    {
      sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 40));
      goto LABEL_19;
    }

    sub_730E4(v22);
    goto LABEL_18;
  }

  if (v21)
  {
LABEL_18:
    uint64_t v23 = sub_494C(&qword_189D00);
    sub_72A3C(v23);
    goto LABEL_19;
  }

  sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL));
  sub_E8474();
LABEL_19:
  sub_E8710();
  sub_24A0C();
}

uint64_t sub_E35C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E35D4);
}

void sub_E35D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_1EB0C();
  }

  else
  {
    uint64_t v6 = sub_494C(&qword_189D00);
    sub_72CBC(a1 + *(int *)(a3 + 44), a2, v6);
  }

uint64_t sub_E3640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E364C);
}

void sub_E3650(uint64_t a1, int a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + 24) = (a2 - 1);
    sub_1EB0C();
  }

  else
  {
    sub_494C(&qword_189D00);
    uint64_t v5 = sub_E8B2C(*(int *)(a4 + 44));
    sub_72CC8(v5, v6, v7, v8);
  }

void sub_E36A8(uint64_t a1)
{
  v5[0] = &unk_13D5F8;
  v5[1] = &unk_13D610;
  void v5[2] = &unk_13D5F8;
  v5[3] = &unk_13D5F8;
  v5[4] = &unk_13D5F8;
  v5[5] = &unk_13D5F8;
  v5[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_671D8(319LL);
  if (v2 <= 0x3F)
  {
    sub_E8B4C();
    v5[7] = v3;
    v5[8] = v3;
    v5[9] = &unk_13D610;
    v5[10] = &unk_13D610;
    v5[11] = v3;
    v5[12] = &unk_13D610;
    v5[13] = &unk_13D610;
    swift_initStructMetadata(a1, 256LL, 14LL, v5, v4);
  }

uint64_t *sub_E3740(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(sub_494C(&qword_189D00) - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v6 = type metadata accessor for SpeakableString(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
    {
      memcpy(a1, a2, *(void *)(v4 + 64));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
    }
  }

  return a1;
}

uint64_t sub_E3804(uint64_t a1)
{
  uint64_t v2 = sub_ABF4();
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1LL, v2);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  }
  return result;
}

void *sub_E3858(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v4))
  {
    uint64_t v5 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v4);
  }

  return a1;
}

void *sub_E38F4(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  int v5 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v4);
  int v6 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v4);
  if (!v5)
  {
    uint64_t v7 = *(void *)(v4 - 8);
    if (!v6)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 24))(a1, a2, v4);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v4);
    goto LABEL_6;
  }

  if (v6)
  {
LABEL_6:
    uint64_t v8 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v4);
  return a1;
}

void *sub_E39D8(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v4))
  {
    uint64_t v5 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v4);
  }

  return a1;
}

void *sub_E3A74(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  int v5 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v4);
  int v6 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v4);
  if (!v5)
  {
    uint64_t v7 = *(void *)(v4 - 8);
    if (!v6)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 40))(a1, a2, v4);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v4);
    goto LABEL_6;
  }

  if (v6)
  {
LABEL_6:
    uint64_t v8 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v4);
  return a1;
}

uint64_t sub_E3B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E3B64);
}

uint64_t sub_E3B64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_494C(&qword_189D00);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, a2, v4);
}

uint64_t sub_E3B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E3BA8);
}

uint64_t sub_E3BA8()
{
  uint64_t v0 = sub_72F90();
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, v1, v2, v3);
}

void sub_E3BD8(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(v2 - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
  }

uint64_t *sub_E3C40(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_494C(&qword_189D00);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    int v12 = (char *)a2 + v10;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v10, 1LL, v7))
    {
      uint64_t v13 = sub_494C(&qword_189D00);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v11, v12, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0LL, 1LL, v7);
    }

    uint64_t v14 = a3[6];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v14, 1LL, v7))
    {
      uint64_t v17 = sub_494C(&qword_189D00);
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v15, v16, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v15, 0LL, 1LL, v7);
    }

    uint64_t v18 = a3[7];
    uint64_t v19 = a3[8];
    uint64_t v20 = (char *)a1 + v18;
    int v21 = (char *)a2 + v18;
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    *(uint64_t *)((char *)a1 + v19) = *(uint64_t *)((char *)a2 + v19);
    uint64_t v22 = a3[9];
    uint64_t v23 = a3[10];
    int v24 = (char *)a1 + v22;
    uint64_t v25 = (char *)a2 + v22;
    *(void *)int v24 = *(void *)v25;
    v24[8] = v25[8];
    char v26 = (char *)a1 + v23;
    uint64_t v27 = (char *)a2 + v23;
    swift_retain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1LL, v7))
    {
      uint64_t v28 = sub_494C(&qword_189D00);
      memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v26, v27, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v26, 0LL, 1LL, v7);
    }
  }

  return a1;
}

uint64_t sub_E3EA4(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = a1 + a2[6];
  swift_release();
  uint64_t v7 = a1 + a2[10];
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v7, 1LL, v4);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v7, v4);
  }
  return result;
}

char *sub_E3FA8(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v12], 1LL, v6))
  {
    uint64_t v15 = sub_494C(&qword_189D00);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v13, v14, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v13, 0LL, 1LL, v6);
  }

  uint64_t v16 = a3[7];
  uint64_t v17 = a3[8];
  uint64_t v18 = &a1[v16];
  uint64_t v19 = &a2[v16];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  *(void *)&a1[v17] = *(void *)&a2[v17];
  uint64_t v20 = a3[9];
  uint64_t v21 = a3[10];
  uint64_t v22 = &a1[v20];
  uint64_t v23 = &a2[v20];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  int v24 = &a1[v21];
  uint64_t v25 = &a2[v21];
  swift_retain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v25, 1LL, v6))
  {
    uint64_t v26 = sub_494C(&qword_189D00);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v24, v25, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v24, 0LL, 1LL, v6);
  }

  return a1;
}

char *sub_E41E0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
LABEL_13:
  uint64_t v18 = a3[6];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  int v21 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v18], 1LL, v6);
  int v22 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v20, 1LL, v6);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v19, v20, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v19, 0LL, 1LL, v6);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  uint64_t v23 = *(void *)(v6 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v6);
LABEL_18:
    uint64_t v24 = sub_494C(&qword_189D00);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v19, v20, v6);
LABEL_19:
  uint64_t v25 = a3[7];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  uint64_t v28 = *(void *)v27;
  v26[8] = v27[8];
  *(void *)uint64_t v26 = v28;
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_retain();
  swift_release();
  uint64_t v29 = a3[9];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = &a2[v29];
  uint64_t v32 = *(void *)v31;
  v30[8] = v31[8];
  *(void *)uint64_t v30 = v32;
  uint64_t v33 = a3[10];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  int v36 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v33], 1LL, v6);
  int v37 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v35, 1LL, v6);
  if (!v36)
  {
    uint64_t v38 = *(void *)(v6 - 8);
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 24))(v34, v35, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v38 + 8))(v34, v6);
    goto LABEL_24;
  }

  if (v37)
  {
LABEL_24:
    uint64_t v39 = sub_494C(&qword_189D00);
    memcpy(v34, v35, *(void *)(*(void *)(v39 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v34, v35, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v34, 0LL, 1LL, v6);
  return a1;
}

char *sub_E4554(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  int v14 = &a2[v12];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v12], 1LL, v6))
  {
    uint64_t v15 = sub_494C(&qword_189D00);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v13, v14, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v13, 0LL, 1LL, v6);
  }

  uint64_t v16 = a3[7];
  uint64_t v17 = a3[8];
  uint64_t v18 = &a1[v16];
  uint64_t v19 = &a2[v16];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  *(void *)&a1[v17] = *(void *)&a2[v17];
  uint64_t v20 = a3[9];
  uint64_t v21 = a3[10];
  int v22 = &a1[v20];
  uint64_t v23 = &a2[v20];
  *(void *)int v22 = *(void *)v23;
  v22[8] = v23[8];
  uint64_t v24 = &a1[v21];
  uint64_t v25 = &a2[v21];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v25, 1LL, v6))
  {
    uint64_t v26 = sub_494C(&qword_189D00);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v24, v25, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v24, 0LL, 1LL, v6);
  }

  return a1;
}

char *sub_E4788(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
LABEL_13:
  uint64_t v18 = a3[6];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  int v21 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v18], 1LL, v6);
  int v22 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v20, 1LL, v6);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v19, v20, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v19, 0LL, 1LL, v6);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  uint64_t v23 = *(void *)(v6 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v6);
LABEL_18:
    uint64_t v24 = sub_494C(&qword_189D00);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v19, v20, v6);
LABEL_19:
  uint64_t v25 = a3[7];
  uint64_t v26 = a3[8];
  uint64_t v27 = &a1[v25];
  uint64_t v28 = &a2[v25];
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v28[8];
  *(void *)&a1[v26] = *(void *)&a2[v26];
  swift_release();
  uint64_t v29 = a3[9];
  uint64_t v30 = a3[10];
  uint64_t v31 = &a1[v29];
  uint64_t v32 = &a2[v29];
  *(void *)uint64_t v31 = *(void *)v32;
  v31[8] = v32[8];
  uint64_t v33 = &a1[v30];
  uint64_t v34 = &a2[v30];
  int v35 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v30], 1LL, v6);
  int v36 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v34, 1LL, v6);
  if (!v35)
  {
    uint64_t v37 = *(void *)(v6 - 8);
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v33, v34, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v37 + 8))(v33, v6);
    goto LABEL_24;
  }

  if (v36)
  {
LABEL_24:
    uint64_t v38 = sub_494C(&qword_189D00);
    memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v33, v34, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v33, 0LL, 1LL, v6);
  return a1;
}

uint64_t sub_E4AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E4AF8);
}

void sub_E4AF8()
{
  if (v1)
  {
    uint64_t v2 = sub_73270();
    sub_72CBC(v2, v3, v4);
  }

  else
  {
    sub_72B3C(*(int *)(v0 + 32));
    sub_1EB0C();
  }

uint64_t sub_E4B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E4B48);
}

void sub_E4B48()
{
  if (v3)
  {
    uint64_t v4 = sub_72F90();
    sub_72CC8(v4, v5, v6, v7);
  }

  else
  {
    *(void *)(v1 + *(int *)(v2 + 32)) = v0;
    sub_1EB0C();
  }

void sub_E4B90(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = v4[0];
    void v4[2] = v4[0];
    v4[3] = &unk_13D610;
    v4[4] = "\b";
    v4[5] = &unk_13D610;
    v4[6] = v4[0];
    swift_initStructMetadata(a1, 256LL, 7LL, v4, a1 + 16);
  }

uint64_t *sub_E4C14(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_494C(&qword_189D00);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v10, 1LL, v7))
    {
      uint64_t v13 = sub_494C(&qword_189D00);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v11, v12, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0LL, 1LL, v7);
    }

    uint64_t v14 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
    uint64_t v15 = a3[8];
    uint64_t v16 = a3[9];
    uint64_t v17 = (char *)a1 + v15;
    uint64_t v18 = (char *)a2 + v15;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
    uint64_t v19 = (char *)a1 + v16;
    uint64_t v20 = (char *)a2 + v16;
    swift_retain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v20, 1LL, v7))
    {
      uint64_t v21 = sub_494C(&qword_189D00);
      memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v19, v20, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v19, 0LL, 1LL, v7);
    }
  }

  return a1;
}

uint64_t sub_E4DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  swift_release();
  uint64_t v6 = a1 + *(int *)(a2 + 36);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1LL, v4);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v6, v4);
  }
  return result;
}

char *sub_E4ECC(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[8];
  uint64_t v14 = a3[9];
  uint64_t v15 = &a1[v13];
  uint64_t v16 = &a2[v13];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = &a1[v14];
  uint64_t v18 = &a2[v14];
  swift_retain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v18, 1LL, v6))
  {
    uint64_t v19 = sub_494C(&qword_189D00);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v17, v18, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v17, 0LL, 1LL, v6);
  }

  return a1;
}

char *sub_E5084(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_retain();
  swift_release();
  a1[a3[7]] = a2[a3[7]];
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  char v21 = v20[8];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v21;
  uint64_t v22 = a3[9];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  int v25 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v22], 1LL, v6);
  int v26 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1LL, v6);
  if (!v25)
  {
    uint64_t v27 = *(void *)(v6 - 8);
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 24))(v23, v24, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v27 + 8))(v23, v6);
    goto LABEL_18;
  }

  if (v26)
  {
LABEL_18:
    uint64_t v28 = sub_494C(&qword_189D00);
    memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v23, v24, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v23, 0LL, 1LL, v6);
  return a1;
}

char *sub_E5330(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[8];
  uint64_t v14 = a3[9];
  int v15 = &a1[v13];
  uint64_t v16 = &a2[v13];
  *(void *)int v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = &a1[v14];
  uint64_t v18 = &a2[v14];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v18, 1LL, v6))
  {
    uint64_t v19 = sub_494C(&qword_189D00);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v17, v18, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v17, 0LL, 1LL, v6);
  }

  return a1;
}

char *sub_E54E4(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  uint64_t v18 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  int v24 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v21], 1LL, v6);
  int v25 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v23, 1LL, v6);
  if (!v24)
  {
    uint64_t v26 = *(void *)(v6 - 8);
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 40))(v22, v23, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v6);
    goto LABEL_18;
  }

  if (v25)
  {
LABEL_18:
    uint64_t v27 = sub_494C(&qword_189D00);
    memcpy(v22, v23, *(void *)(*(void *)(v27 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v22, v23, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v22, 0LL, 1LL, v6);
  return a1;
}

uint64_t sub_E5784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E5790);
}

void sub_E5790()
{
  if (v1)
  {
    uint64_t v2 = sub_73270();
    sub_72CBC(v2, v3, v4);
  }

  else
  {
    sub_72B3C(*(int *)(v0 + 24));
    sub_1EB0C();
  }

uint64_t sub_E57D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E57E0);
}

void sub_E57E0()
{
  if (v3)
  {
    uint64_t v4 = sub_72F90();
    sub_72CC8(v4, v5, v6, v7);
  }

  else
  {
    *(void *)(v1 + *(int *)(v2 + swift_release(*(void *)(v0 + 24)) = v0;
    sub_1EB0C();
  }

void sub_E5828(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = v4[0];
    void v4[2] = "\b";
    v4[3] = &unk_13D5F8;
    v4[4] = &unk_13D610;
    v4[5] = v4[0];
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
  }

uint64_t sub_E58C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E58D4);
}

uint64_t sub_E58D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E58E4);
}

uint64_t *sub_E58EC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_494C(&qword_189D00);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v10, 1LL, v7))
    {
      uint64_t v13 = sub_494C(&qword_189D00);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v11, v12, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0LL, 1LL, v7);
    }

    uint64_t v14 = a3[6];
    int v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v14, 1LL, v7))
    {
      uint64_t v17 = sub_494C(&qword_189D00);
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v15, v16, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v15, 0LL, 1LL, v7);
    }

    uint64_t v18 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)a1 + v18) = *(uint64_t *)((char *)a2 + v18);
    uint64_t v19 = a3[9];
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    swift_retain();
    swift_retain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v21, 1LL, v7))
    {
      uint64_t v22 = sub_494C(&qword_189D00);
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v20, v21, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v20, 0LL, 1LL, v7);
    }
  }

  return a1;
}

uint64_t sub_E5B30(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = a1 + a2[6];
  swift_release();
  swift_release();
  uint64_t v7 = a1 + a2[9];
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v7, 1LL, v4);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v7, v4);
  }
  return result;
}

char *sub_E5C40(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v12], 1LL, v6))
  {
    uint64_t v15 = sub_494C(&qword_189D00);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v13, v14, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v13, 0LL, 1LL, v6);
  }

  uint64_t v16 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v16] = *(void *)&a2[v16];
  uint64_t v17 = a3[9];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  swift_retain();
  swift_retain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v19, 1LL, v6))
  {
    uint64_t v20 = sub_494C(&qword_189D00);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v18, v19, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v18, 0LL, 1LL, v6);
  }

  return a1;
}

char *sub_E5E58(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
LABEL_13:
  uint64_t v18 = a3[6];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  int v21 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v18], 1LL, v6);
  int v22 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v20, 1LL, v6);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v19, v20, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v19, 0LL, 1LL, v6);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  uint64_t v23 = *(void *)(v6 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v6);
LABEL_18:
    uint64_t v24 = sub_494C(&qword_189D00);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v19, v20, v6);
LABEL_19:
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_retain();
  swift_release();
  uint64_t v25 = a3[9];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  int v28 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v25], 1LL, v6);
  int v29 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1LL, v6);
  if (!v28)
  {
    uint64_t v30 = *(void *)(v6 - 8);
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 24))(v26, v27, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v30 + 8))(v26, v6);
    goto LABEL_24;
  }

  if (v29)
  {
LABEL_24:
    uint64_t v31 = sub_494C(&qword_189D00);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v26, v27, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v26, 0LL, 1LL, v6);
  return a1;
}

char *sub_E61B0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  int v14 = &a2[v12];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v12], 1LL, v6))
  {
    uint64_t v15 = sub_494C(&qword_189D00);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v13, v14, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v13, 0LL, 1LL, v6);
  }

  uint64_t v16 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v16] = *(void *)&a2[v16];
  uint64_t v17 = a3[9];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v19, 1LL, v6))
  {
    uint64_t v20 = sub_494C(&qword_189D00);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v18, v19, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v18, 0LL, 1LL, v6);
  }

  return a1;
}

char *sub_E63BC(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
LABEL_13:
  uint64_t v18 = a3[6];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  int v21 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v18], 1LL, v6);
  int v22 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v20, 1LL, v6);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v19, v20, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v19, 0LL, 1LL, v6);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  uint64_t v23 = *(void *)(v6 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v6);
LABEL_18:
    uint64_t v24 = sub_494C(&qword_189D00);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v19, v20, v6);
LABEL_19:
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_release();
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_release();
  uint64_t v25 = a3[9];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  int v28 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v25], 1LL, v6);
  int v29 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1LL, v6);
  if (!v28)
  {
    uint64_t v30 = *(void *)(v6 - 8);
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 40))(v26, v27, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v30 + 8))(v26, v6);
    goto LABEL_24;
  }

  if (v29)
  {
LABEL_24:
    uint64_t v31 = sub_494C(&qword_189D00);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v26, v27, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v26, 0LL, 1LL, v6);
  return a1;
}

uint64_t sub_E6704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E6710);
}

uint64_t sub_E6714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E6720);
}

void sub_E6724(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = v4[0];
    void v4[2] = v4[0];
    v4[3] = "\b";
    v4[4] = "\b";
    v4[5] = v4[0];
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
  }

uint64_t sub_E679C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E67A8);
}

uint64_t sub_E67AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E67B8);
}

uint64_t sub_E67BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E67C8);
}

uint64_t sub_E67CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E67D8);
}

uint64_t sub_E67DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E67E8);
}

uint64_t sub_E67EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E67F8);
}

void sub_E67FC()
{
  if ((v3 & 0x20000) != 0)
  {
    sub_E87E0();
  }

  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = sub_ABF4();
    if (sub_72B30(v1))
    {
      uint64_t v6 = sub_494C(&qword_189D00);
      sub_72DE4(v6);
    }

    else
    {
      sub_DA34(v0, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL));
      sub_72A84(v0);
    }

    if (sub_E8588())
    {
      uint64_t v7 = sub_494C(&qword_189D00);
      sub_72A3C(v7);
    }

    else
    {
      sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL));
      sub_E8474();
    }

    if (sub_E8588())
    {
      uint64_t v8 = sub_494C(&qword_189D00);
      sub_72A3C(v8);
    }

    else
    {
      sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL));
      sub_E8474();
    }

    sub_E88A8();
    if (sub_E8588())
    {
      uint64_t v9 = sub_494C(&qword_189D00);
      sub_72A3C(v9);
    }

    else
    {
      sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL));
      sub_E8474();
    }

    sub_E8AEC(*(int *)(v4 + 40));
  }

  sub_73078();
}

void sub_E691C(uint64_t a1, int *a2)
{
  if (sub_72FC4(a1 + a2[9]))
  {
    sub_1EB0C();
  }

  else
  {
    uint64_t v4 = sub_735FC();
    sub_732C0(v4, v5, v6);
  }

void sub_E69A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_ABF4();
  if (sub_72B30(a2))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    sub_72DE4(v7);
  }

  else
  {
    sub_DA34(a1, a2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
    sub_72A84(a1);
  }

  if (sub_E8588())
  {
    uint64_t v8 = sub_494C(&qword_189D00);
    sub_72A3C(v8);
  }

  else
  {
    sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
    sub_E8474();
  }

  if (sub_E8588())
  {
    uint64_t v9 = sub_494C(&qword_189D00);
    sub_72A3C(v9);
  }

  else
  {
    sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
    sub_E8474();
  }

  sub_E88A8();
  if (sub_E8588())
  {
    uint64_t v10 = sub_494C(&qword_189D00);
    sub_72A3C(v10);
  }

  else
  {
    sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
    sub_E8474();
  }

  sub_E86F0(*(int *)(a3 + 40));
  sub_73078();
}

void sub_E6ABC()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_ABF4();
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1LL, v7);
  int v9 = sub_72B30(v4);
  if (v8)
  {
    if (!v9)
    {
      sub_DA34(v6, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL));
      sub_72A84(v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v10 = *(void *)(v7 - 8);
  if (v9)
  {
    sub_ADC8C(v6, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
LABEL_6:
    uint64_t v11 = sub_494C(&qword_189D00);
    sub_72DE4(v11);
    goto LABEL_7;
  }

  sub_DA34(v6, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 24));
LABEL_7:
  int v12 = sub_E8488(v2[5]);
  if (v0)
  {
    if (!v12)
    {
      sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL));
      sub_E8474();
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v13 = *(void *)(v7 - 8);
  if (v12)
  {
    sub_730E4(v13);
LABEL_12:
    uint64_t v14 = sub_494C(&qword_189D00);
    sub_72A3C(v14);
    goto LABEL_13;
  }

  sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 24));
LABEL_13:
  int v15 = sub_E8488(v2[6]);
  if (v0)
  {
    if (!v15)
    {
      sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL));
      sub_E8474();
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  uint64_t v16 = *(void *)(v7 - 8);
  if (v15)
  {
    sub_730E4(v16);
LABEL_18:
    uint64_t v17 = sub_494C(&qword_189D00);
    sub_72A3C(v17);
    goto LABEL_19;
  }

  sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 24));
LABEL_19:
  sub_E8AA0();
  swift_release();
  *(_BYTE *)(v6 + v2[8]) = *(_BYTE *)(v4 + v2[8]);
  int v18 = sub_E8488(v2[9]);
  if (!v0)
  {
    uint64_t v19 = *(void *)(v7 - 8);
    if (!v18)
    {
      sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 24));
      goto LABEL_25;
    }

    sub_730E4(v19);
    goto LABEL_24;
  }

  if (v18)
  {
LABEL_24:
    uint64_t v20 = sub_494C(&qword_189D00);
    sub_72A3C(v20);
    goto LABEL_25;
  }

  sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL));
  sub_E8474();
LABEL_25:
  sub_E8814(v2[10]);
  sub_24A0C();
}

void sub_E6C6C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_ABF4();
  if (sub_72B30(a2))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    sub_72DE4(v7);
  }

  else
  {
    sub_DA34(a1, a2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
    sub_72A84(a1);
  }

  if (sub_E8588())
  {
    uint64_t v8 = sub_494C(&qword_189D00);
    sub_72A3C(v8);
  }

  else
  {
    sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
    sub_E8474();
  }

  if (sub_E8588())
  {
    uint64_t v9 = sub_494C(&qword_189D00);
    sub_72A3C(v9);
  }

  else
  {
    sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
    sub_E8474();
  }

  uint64_t v10 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  if (sub_E8588())
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    sub_72A3C(v11);
  }

  else
  {
    sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
    sub_E8474();
  }

  sub_E86F0(a3[10]);
  sub_73078();
}

void sub_E6D9C()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_ABF4();
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1LL, v7);
  int v9 = sub_72B30(v4);
  if (v8)
  {
    if (!v9)
    {
      sub_DA34(v6, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL));
      sub_72A84(v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v10 = *(void *)(v7 - 8);
  if (v9)
  {
    sub_ADC8C(v6, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
LABEL_6:
    uint64_t v11 = sub_494C(&qword_189D00);
    sub_72DE4(v11);
    goto LABEL_7;
  }

  sub_DA34(v6, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 40));
LABEL_7:
  int v12 = sub_E8488(v2[5]);
  if (v0)
  {
    if (!v12)
    {
      sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL));
      sub_E8474();
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v13 = *(void *)(v7 - 8);
  if (v12)
  {
    sub_730E4(v13);
LABEL_12:
    uint64_t v14 = sub_494C(&qword_189D00);
    sub_72A3C(v14);
    goto LABEL_13;
  }

  sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 40));
LABEL_13:
  int v15 = sub_E8488(v2[6]);
  if (v0)
  {
    if (!v15)
    {
      sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL));
      sub_E8474();
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  uint64_t v16 = *(void *)(v7 - 8);
  if (v15)
  {
    sub_730E4(v16);
LABEL_18:
    uint64_t v17 = sub_494C(&qword_189D00);
    sub_72A3C(v17);
    goto LABEL_19;
  }

  sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 40));
LABEL_19:
  sub_E8AB4();
  *(_BYTE *)(v6 + v2[8]) = *(_BYTE *)(v4 + v2[8]);
  int v18 = sub_E855C();
  if (!v0)
  {
    uint64_t v19 = *(void *)(v7 - 8);
    if (!v18)
    {
      sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 40));
      goto LABEL_25;
    }

    sub_730E4(v19);
    goto LABEL_24;
  }

  if (v18)
  {
LABEL_24:
    uint64_t v20 = sub_494C(&qword_189D00);
    sub_72A3C(v20);
    goto LABEL_25;
  }

  sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL));
  sub_E8474();
LABEL_25:
  sub_E86F0(v2[10]);
  sub_24A0C();
}

uint64_t sub_E6F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E6F54);
}

uint64_t sub_E6F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E6F64);
}

void sub_E6F68()
{
  if (v1 <= 0x3F)
  {
    sub_E8B4C();
    v4[0] = v2;
    v4[1] = v2;
    void v4[2] = v2;
    v4[3] = "\b";
    v4[4] = &unk_13D5F8;
    v4[5] = v2;
    void v4[6] = &unk_13D610;
    swift_initStructMetadata(v0, 256LL, 7LL, v4, v3);
  }

uint64_t sub_E6FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E7008);
}

uint64_t sub_E700C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E7018);
}

void sub_E7020()
{
  if ((v3 & 0x20000) != 0)
  {
    sub_E87E0();
  }

  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = sub_ABF4();
    if (sub_72B30(v1))
    {
      uint64_t v6 = sub_494C(&qword_189D00);
      sub_72DE4(v6);
    }

    else
    {
      sub_DA34(v0, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL));
      sub_72A84(v0);
    }

    if (sub_E8588())
    {
      uint64_t v7 = sub_494C(&qword_189D00);
      sub_72A3C(v7);
    }

    else
    {
      sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL));
      sub_E8474();
    }

    if (sub_E8588())
    {
      uint64_t v8 = sub_494C(&qword_189D00);
      sub_72A3C(v8);
    }

    else
    {
      sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL));
      sub_E8474();
    }

    sub_E8A18();
    if (sub_E8588())
    {
      uint64_t v9 = sub_494C(&qword_189D00);
      sub_72A3C(v9);
    }

    else
    {
      sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL));
      sub_E8474();
    }

    sub_E8AEC(*(int *)(v4 + 36));
  }

  sub_73078();
}

void sub_E7140(uint64_t a1, int *a2)
{
  if (sub_72FC4(a1 + a2[8]))
  {
    sub_1EB0C();
  }

  else
  {
    uint64_t v4 = sub_735FC();
    sub_732C0(v4, v5, v6);
  }

void sub_E71CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_ABF4();
  if (sub_72B30(a2))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    sub_72DE4(v7);
  }

  else
  {
    sub_DA34(a1, a2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
    sub_72A84(a1);
  }

  if (sub_E8588())
  {
    uint64_t v8 = sub_494C(&qword_189D00);
    sub_72A3C(v8);
  }

  else
  {
    sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
    sub_E8474();
  }

  if (sub_E8588())
  {
    uint64_t v9 = sub_494C(&qword_189D00);
    sub_72A3C(v9);
  }

  else
  {
    sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
    sub_E8474();
  }

  sub_E8A18();
  if (sub_E8588())
  {
    uint64_t v10 = sub_494C(&qword_189D00);
    sub_72A3C(v10);
  }

  else
  {
    sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
    sub_E8474();
  }

  sub_E86F0(*(int *)(a3 + 36));
  sub_73078();
}

void sub_E72E0()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_ABF4();
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1LL, v7);
  int v9 = sub_72B30(v4);
  if (v8)
  {
    if (!v9)
    {
      sub_DA34(v6, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL));
      sub_72A84(v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v10 = *(void *)(v7 - 8);
  if (v9)
  {
    sub_ADC8C(v6, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
LABEL_6:
    uint64_t v11 = sub_494C(&qword_189D00);
    sub_72DE4(v11);
    goto LABEL_7;
  }

  sub_DA34(v6, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 24));
LABEL_7:
  int v12 = sub_E8488(v2[5]);
  if (v0)
  {
    if (!v12)
    {
      sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL));
      sub_E8474();
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v13 = *(void *)(v7 - 8);
  if (v12)
  {
    sub_730E4(v13);
LABEL_12:
    uint64_t v14 = sub_494C(&qword_189D00);
    sub_72A3C(v14);
    goto LABEL_13;
  }

  sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 24));
LABEL_13:
  int v15 = sub_E8488(v2[6]);
  if (v0)
  {
    if (!v15)
    {
      sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL));
      sub_E8474();
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  uint64_t v16 = *(void *)(v7 - 8);
  if (v15)
  {
    sub_730E4(v16);
LABEL_18:
    uint64_t v17 = sub_494C(&qword_189D00);
    sub_72A3C(v17);
    goto LABEL_19;
  }

  sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 24));
LABEL_19:
  sub_E8AA0();
  swift_release();
  int v18 = sub_E8488(v2[8]);
  if (!v0)
  {
    uint64_t v19 = *(void *)(v7 - 8);
    if (!v18)
    {
      sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 24));
      goto LABEL_25;
    }

    sub_730E4(v19);
    goto LABEL_24;
  }

  if (v18)
  {
LABEL_24:
    uint64_t v20 = sub_494C(&qword_189D00);
    sub_72A3C(v20);
    goto LABEL_25;
  }

  sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL));
  sub_E8474();
LABEL_25:
  sub_E8814(v2[9]);
  sub_24A0C();
}

void sub_E7484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_ABF4();
  if (sub_72B30(a2))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    sub_72DE4(v7);
  }

  else
  {
    sub_DA34(a1, a2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
    sub_72A84(a1);
  }

  if (sub_E8588())
  {
    uint64_t v8 = sub_494C(&qword_189D00);
    sub_72A3C(v8);
  }

  else
  {
    sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
    sub_E8474();
  }

  if (sub_E8588())
  {
    uint64_t v9 = sub_494C(&qword_189D00);
    sub_72A3C(v9);
  }

  else
  {
    sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
    sub_E8474();
  }

  *(void *)(a1 + *(int *)(a3 + 28)) = *(void *)(a2 + *(int *)(a3 + 28));
  if (sub_E8588())
  {
    uint64_t v10 = sub_494C(&qword_189D00);
    sub_72A3C(v10);
  }

  else
  {
    sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
    sub_E8474();
  }

  sub_E86F0(*(int *)(a3 + 36));
  sub_73078();
}

void sub_E75A8()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_ABF4();
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1LL, v7);
  int v9 = sub_72B30(v4);
  if (v8)
  {
    if (!v9)
    {
      sub_DA34(v6, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL));
      sub_72A84(v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v10 = *(void *)(v7 - 8);
  if (v9)
  {
    sub_ADC8C(v6, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
LABEL_6:
    uint64_t v11 = sub_494C(&qword_189D00);
    sub_72DE4(v11);
    goto LABEL_7;
  }

  sub_DA34(v6, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 40));
LABEL_7:
  int v12 = sub_E8488(v2[5]);
  if (v0)
  {
    if (!v12)
    {
      sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL));
      sub_E8474();
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v13 = *(void *)(v7 - 8);
  if (v12)
  {
    sub_730E4(v13);
LABEL_12:
    uint64_t v14 = sub_494C(&qword_189D00);
    sub_72A3C(v14);
    goto LABEL_13;
  }

  sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 40));
LABEL_13:
  int v15 = sub_E8488(v2[6]);
  if (v0)
  {
    if (!v15)
    {
      sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL));
      sub_E8474();
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  uint64_t v16 = *(void *)(v7 - 8);
  if (v15)
  {
    sub_730E4(v16);
LABEL_18:
    uint64_t v17 = sub_494C(&qword_189D00);
    sub_72A3C(v17);
    goto LABEL_19;
  }

  sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 40));
LABEL_19:
  sub_E8AB4();
  int v18 = sub_E8488(v2[8]);
  if (!v0)
  {
    uint64_t v19 = *(void *)(v7 - 8);
    if (!v18)
    {
      sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 40));
      goto LABEL_25;
    }

    sub_730E4(v19);
    goto LABEL_24;
  }

  if (v18)
  {
LABEL_24:
    uint64_t v20 = sub_494C(&qword_189D00);
    sub_72A3C(v20);
    goto LABEL_25;
  }

  sub_E8464(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL));
  sub_E8474();
LABEL_25:
  sub_E86F0(v2[9]);
  sub_24A0C();
}

uint64_t sub_E7744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E7750);
}

uint64_t sub_E7754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E7760);
}

void sub_E7764()
{
  if (v3)
  {
    uint64_t v4 = sub_72F90();
    sub_72CC8(v4, v5, v6, v7);
  }

  else
  {
    *(void *)(v1 + *(int *)(v2 + 28)) = v0;
    sub_1EB0C();
  }

void sub_E77AC()
{
  if (v1 <= 0x3F)
  {
    sub_E8B4C();
    v4[0] = v2;
    v4[1] = v2;
    void v4[2] = v2;
    v4[3] = "\b";
    v4[4] = v2;
    v4[5] = &unk_13D610;
    swift_initStructMetadata(v0, 256LL, 6LL, v4, v3);
  }

uint64_t type metadata accessor for WellnessLoggingPhoneMedicationQueryingErrorParameters(uint64_t a1)
{
  return sub_70F74( a1,  qword_18F6E8,  (uint64_t)&nominal type descriptor for WellnessLoggingPhoneMedicationQueryingErrorParameters);
}

uint64_t type metadata accessor for WellnessLoggingWatchMedicationQueryingErrorParameters(uint64_t a1)
{
  return sub_70F74( a1,  qword_18F640,  (uint64_t)&nominal type descriptor for WellnessLoggingWatchMedicationQueryingErrorParameters);
}

void *sub_E7844(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v10 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain();
  }

  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
    uint64_t v5 = *(int *)(a3 + 40);
    uint64_t v6 = (void *)(a1 + v5);
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for SpeakableString(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v7, 1LL, v8))
    {
      uint64_t v9 = sub_494C(&qword_189D00);
      memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v6, 0LL, 1LL, v8);
    }
  }

  return v3;
}

uint64_t sub_E7924(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 40);
  uint64_t v3 = type metadata accessor for SpeakableString(0LL);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v2, 1LL, v3);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  }
  return result;
}

uint64_t sub_E7980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  uint64_t v4 = *(int *)(a3 + 40);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v6, 1LL, v7))
  {
    uint64_t v8 = sub_494C(&qword_189D00);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v5, v6, v7);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v5, 0LL, 1LL, v7);
  }

  return a1;
}

_BYTE *sub_E7A34(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  uint64_t v4 = *(int *)(a3 + 40);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for SpeakableString(0LL);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v5, 1LL, v7);
  int v9 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v6, 1LL, v7);
  if (!v8)
  {
    uint64_t v10 = *(void *)(v7 - 8);
    if (!v9)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24))(v5, v6, v7);
      return a1;
    }

    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v5, v7);
    goto LABEL_6;
  }

  if (v9)
  {
LABEL_6:
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v5, v6, *(void *)(*(void *)(v11 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v5, v6, v7);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v5, 0LL, 1LL, v7);
  return a1;
}

uint64_t sub_E7B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  uint64_t v4 = *(int *)(a3 + 40);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v6, 1LL, v7))
  {
    uint64_t v8 = sub_494C(&qword_189D00);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v5, 0LL, 1LL, v7);
  }

  return a1;
}

_BYTE *sub_E7C0C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  uint64_t v4 = *(int *)(a3 + 40);
  uint64_t v5 = &a2[v4];
  uint64_t v6 = &a1[v4];
  a1[5] = a2[5];
  uint64_t v7 = type metadata accessor for SpeakableString(0LL);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v6, 1LL, v7);
  int v9 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v5, 1LL, v7);
  if (!v8)
  {
    uint64_t v10 = *(void *)(v7 - 8);
    if (!v9)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40))(v6, v5, v7);
      return a1;
    }

    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v6, v7);
    goto LABEL_6;
  }

  if (v9)
  {
LABEL_6:
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v6, v5, *(void *)(*(void *)(v11 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v6, v5, v7);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v6, 0LL, 1LL, v7);
  return a1;
}

uint64_t sub_E7D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E7D3C);
}

void sub_E7D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 254)
  {
    sub_1EB0C();
  }

  else
  {
    uint64_t v6 = sub_494C(&qword_189D00);
    sub_72CBC(a1 + *(int *)(a3 + 40), a2, v6);
  }

uint64_t sub_E7DA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E7DB0);
}

void sub_E7DB0(_BYTE *a1, char a2, int a3, uint64_t a4)
{
  if (a3 == 254)
  {
    *a1 = a2 + 1;
    sub_1EB0C();
  }

  else
  {
    sub_494C(&qword_189D00);
    uint64_t v5 = sub_E8B2C(*(int *)(a4 + 40));
    sub_72CC8(v5, v6, v7, v8);
  }

void sub_E7E04(uint64_t a1)
{
  v4[0] = &unk_13D5F8;
  v4[1] = &unk_13D5F8;
  void v4[2] = &unk_13D5F8;
  v4[3] = &unk_13D5F8;
  v4[4] = &unk_13D5F8;
  v4[5] = &unk_13D5F8;
  sub_671D8(319LL);
  if (v3 <= 0x3F)
  {
    void v4[6] = *(void *)(v2 - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 7LL, v4, a1 + 16);
  }

uint64_t *sub_E7E80(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v10 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain();
  }

  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for SpeakableString(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v7, 1LL, v8))
    {
      uint64_t v9 = sub_494C(&qword_189D00);
      memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v6, 0LL, 1LL, v8);
    }
  }

  return v3;
}

uint64_t sub_E7F58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = type metadata accessor for SpeakableString(0LL);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v2, 1LL, v3);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  }
  return result;
}

_WORD *sub_E7FB4(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v6, 1LL, v7))
  {
    uint64_t v8 = sub_494C(&qword_189D00);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v5, v6, v7);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v5, 0LL, 1LL, v7);
  }

  return a1;
}

_BYTE *sub_E8060(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for SpeakableString(0LL);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v5, 1LL, v7);
  int v9 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v6, 1LL, v7);
  if (!v8)
  {
    uint64_t v10 = *(void *)(v7 - 8);
    if (!v9)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24))(v5, v6, v7);
      return a1;
    }

    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v5, v7);
    goto LABEL_6;
  }

  if (v9)
  {
LABEL_6:
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v5, v6, *(void *)(*(void *)(v11 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v5, v6, v7);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v5, 0LL, 1LL, v7);
  return a1;
}

_WORD *sub_E8164(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v6, 1LL, v7))
  {
    uint64_t v8 = sub_494C(&qword_189D00);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v5, 0LL, 1LL, v7);
  }

  return a1;
}

_BYTE *sub_E8210(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for SpeakableString(0LL);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v5, 1LL, v7);
  int v9 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v6, 1LL, v7);
  if (!v8)
  {
    uint64_t v10 = *(void *)(v7 - 8);
    if (!v9)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40))(v5, v6, v7);
      return a1;
    }

    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v5, v7);
    goto LABEL_6;
  }

  if (v9)
  {
LABEL_6:
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v5, v6, *(void *)(*(void *)(v11 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v5, 0LL, 1LL, v7);
  return a1;
}

uint64_t sub_E8314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E8320);
}

void sub_E8320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 254)
  {
    sub_1EB0C();
  }

  else
  {
    uint64_t v6 = sub_494C(&qword_189D00);
    sub_72CBC(a1 + *(int *)(a3 + 24), a2, v6);
  }

uint64_t sub_E8388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E8394);
}

void sub_E8394(_BYTE *a1, char a2, int a3, uint64_t a4)
{
  if (a3 == 254)
  {
    *a1 = a2 + 1;
    sub_1EB0C();
  }

  else
  {
    sub_494C(&qword_189D00);
    uint64_t v5 = sub_E8B2C(*(int *)(a4 + 24));
    sub_72CC8(v5, v6, v7, v8);
  }

void sub_E83E8(uint64_t a1)
{
  v4[0] = &unk_13D5F8;
  v4[1] = &unk_13D5F8;
  sub_671D8(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(v2 - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
  }

uint64_t sub_E8464@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v3, v1);
}

uint64_t sub_E8474()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 0LL, 1LL, v0);
}

uint64_t sub_E8488@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = v2 + a1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1 + a1, 1LL, v3);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v4, 1LL, v3);
}

uint64_t sub_E84BC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v3, v2);
}

uint64_t sub_E84C8(uint64_t a1)
{
  *(void *)(v1 + v2[7]) = 0LL;
  *(_BYTE *)(v1 + v2[8]) = v4;
  uint64_t v6 = v1 + v2[10];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  return v3(v1);
}

uint64_t sub_E855C()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v2, 1LL, v0);
}

uint64_t sub_E8588()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1LL, v0);
}

uint64_t sub_E8598( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, __int16 a11, char a12)
{
  *(_BYTE *)uint64_t v12 = v18;
  *(void *)(v12 + 8) = 0LL;
  *(_BYTE *)(v12 + 16) = 1;
  *(_BYTE *)(v12 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = v14;
  *(_BYTE *)(v12 + 18) = v13;
  *(_BYTE *)(v12 + 19) = a10;
  *(_BYTE *)(v12 + 20) = a12;
  *(void *)(v12 + 24) = v15;
  uint64_t v20 = v12 + v17[13];
  *(void *)uint64_t v20 = 0LL;
  *(_BYTE *)(v20 + 8) = 1;
  uint64_t v21 = v12 + v17[14];
  *(void *)uint64_t v21 = 0LL;
  *(_BYTE *)(v21 + 8) = 1;
  uint64_t v22 = v12 + v17[16];
  *(void *)uint64_t v22 = 0LL;
  *(_BYTE *)(v22 + 8) = 1;
  uint64_t v23 = v12 + v17[17];
  *(void *)uint64_t v23 = 0LL;
  *(_BYTE *)(v23 + 8) = 1;
  return swift_bridgeObjectRetain(v15);
}

uint64_t sub_E865C(uint64_t a1)
{
  *(void *)(v1 + v2[7]) = 0LL;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + v2[8], 1LL, 1LL, a1);
  uint64_t v4 = v1 + v2[9];
  *(void *)uint64_t v4 = 0LL;
  *(_BYTE *)(v4 + 8) = 1;
  return v1;
}

uint64_t sub_E86F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + a1;
  uint64_t v4 = v2 + a1;
  *(void *)uint64_t v3 = *(void *)v4;
  *(_BYTE *)(v3 + 8) = *(_BYTE *)(v4 + 8);
  return v1;
}

uint64_t sub_E8710()
{
  uint64_t v3 = *(int *)(v2 + 64);
  uint64_t v4 = *(int *)(v2 + 68);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = v1 + v3;
  *(void *)uint64_t v5 = *(void *)v6;
  *(_BYTE *)(v5 + 8) = *(_BYTE *)(v6 + 8);
  uint64_t v7 = v0 + v4;
  uint64_t v8 = v1 + v4;
  *(void *)uint64_t v7 = *(void *)v8;
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  return v0;
}

uint64_t sub_E874C()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 56);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 64) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_E8770(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + *(int *)(v2 + 24), 1LL, 1LL, a1);
}

uint64_t sub_E87CC(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v3;
  *(void *)(v4 + 16) = a2;
  *(_BYTE *)(v4 + 88) = a1;
  return 0LL;
}

uint64_t sub_E87E0()
{
  uint64_t v2 = *v1;
  *uint64_t v0 = *v1;
  return swift_retain(v2);
}

  ;
}

uint64_t sub_E8814@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + a1;
  uint64_t v4 = (uint64_t *)(v2 + a1);
  uint64_t v5 = *v4;
  *(_BYTE *)(v3 + 8) = *((_BYTE *)v4 + 8);
  *(void *)uint64_t v3 = v5;
  return v1;
}

uint64_t sub_E8834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_E8840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_E885C(uint64_t result, uint64_t a2)
{
  *(_BYTE *)uint64_t result = *(_BYTE *)a2;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(result + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = *(_DWORD *)(a2 + 17);
  return result;
}

void sub_E888C(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + a1;
  uint64_t v4 = (uint64_t *)(v2 + a1);
  uint64_t v5 = *v4;
  *(_BYTE *)(v3 + 8) = *((_BYTE *)v4 + 8);
  *(void *)uint64_t v3 = v5;
}

uint64_t sub_E88A8()
{
  uint64_t v3 = *(int *)(v2 + 28);
  uint64_t v4 = *(int *)(v2 + 32);
  uint64_t v5 = *(void *)(v1 + v3);
  *(void *)(v0 + sub_A5DC((uint64_t)v0, v3) = v5;
  *(_BYTE *)(v0 + sub_A5DC((uint64_t)v0, v4) = *(_BYTE *)(v1 + v4);
  return swift_retain(v5);
}

uint64_t sub_E88CC()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 72);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 80) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_E88F0(char a1, char a2, char a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void *)(v9 + 24);
  *(void *)(v8 + 40) = *(void *)(v9 + 16);
  *(void *)(v8 + 48) = v10;
  *(void *)(v8 + 24) = a7;
  *(void *)(v8 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a8;
  *(void *)(v8 + 16) = a6;
  *(_BYTE *)(v8 + 108) = a5;
  *(_BYTE *)(v8 + 10_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = a4;
  *(_BYTE *)(v8 + 106) = a3;
  *(_BYTE *)(v8 + 105) = a2;
  *(_BYTE *)(v8 + 104) = a1;
  return 0LL;
}

  ;
}

void sub_E8930()
{
  *(void *)(v0 + 176) = 0x6144646567676F6CLL;
  *(void *)(v0 + 184) = 0xEA00000000006574LL;
}

uint64_t sub_E8958()
{
  *(void *)(v0 + 128) = 0x6570795461746164LL;
  *(void *)(v0 + 136) = 0xE800000000000000LL;
  return v1 + *(int *)(v2 + 24);
}

uint64_t sub_E8980()
{
  uint64_t v4 = *(void *)(v2 + 40);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v4, v1, 1LL, v0);
  return sub_A384(v4, v3);
}

_BYTE *sub_E89B0(_BYTE *result, _BYTE *a2)
{
  result[17] = a2[17];
  result[18] = a2[18];
  result[19] = a2[19];
  result[20] = a2[20];
  return result;
}

void sub_E89D4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v5;
  *(void *)(a1 + 40) = (a2 - 32) | 0x8000000000000000LL;
  sub_41850(v2, v4, v3);
}

uint64_t sub_E89F0(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1LL, 1LL, a1);
}

uint64_t sub_E8A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_E8A18()
{
  uint64_t v3 = *(int *)(v2 + 28);
  uint64_t v4 = *(void *)(v1 + v3);
  *(void *)(v0 + sub_A5DC((uint64_t)v0, v3) = v4;
  return swift_retain(v4);
}

  ;
}

uint64_t sub_E8A44()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0 + *(int *)(v2 + 36), 1LL, 1LL, v1);
}

  ;
}

void *sub_E8A70@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *uint64_t result = v2;
  result[1] = a2;
  return result;
}

void sub_E8A7C(uint64_t a1, uint64_t *a2)
{
}

void sub_E8A84(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_E8A8C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 80) = v3;
  *(void *)(v1 + 88) = (a1 - 32) | 0x8000000000000000LL;
  return v2(0LL);
}

uint64_t sub_E8AA0()
{
  uint64_t v3 = *(int *)(v2 + 28);
  uint64_t v4 = *(void *)(v1 + v3);
  *(void *)(v0 + sub_A5DC((uint64_t)v0, v3) = v4;
  return swift_retain(v4);
}

uint64_t sub_E8AB4()
{
  uint64_t v3 = *(int *)(v2 + 28);
  uint64_t v4 = *(void *)(v0 + v3);
  *(void *)(v0 + sub_A5DC((uint64_t)v0, v3) = *(void *)(v1 + v3);
  return swift_release(v4);
}

void sub_E8AC8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_E8AD0(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_E8AD8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32LL))(a1, v1, v2);
}

void sub_E8AEC(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + a1;
  uint64_t v4 = v2 + a1;
  *(void *)uint64_t v3 = *(void *)v4;
  *(_BYTE *)(v3 + 8) = *(_BYTE *)(v4 + 8);
}

uint64_t sub_E8B08@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

void sub_E8B1C(uint64_t a1@<X8>)
{
}

uint64_t sub_E8B2C@<X0>(uint64_t a1@<X8>)
{
  return v1 + a1;
}

uint64_t sub_E8B3C(uint64_t a1)
{
  return v1 + *(int *)(a1 + 20);
}

  ;
}

uint64_t sub_E8B5C()
{
  return *(void *)(v0 + 72);
}

  ;
}

uint64_t sub_E8B80@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

void sub_E8B8C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_E8B94()
{
  return swift_release(*(void *)(v0 + *(int *)(v1 + 28)));
}

void *sub_E8BA0()
{
  return sub_B76C(v0);
}

uint64_t sub_E8BA8(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t sub_E8BB4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(result + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a2;
  *(void *)(result + 40) = (v2 - 32) | 0x8000000000000000LL;
  return result;
}

uint64_t sub_E8BC8()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_E8BD4()
{
  return type metadata accessor for WellnessLoggingWatchMedicationQueryingErrorParameters(0LL);
}

  ;
}

  ;
}

void *sub_E8C04()
{
  return sub_B76C(v0);
}

  ;
}

uint64_t sub_E8C18()
{
  return String.toSpeakableString.getter(*(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_E8C24()
{
  uint64_t v1 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v36 = *(void *)(v1 - 8);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v34 - v5;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v37 = *(void *)(v7 - 8);
  uint64_t v38 = v7;
  __chkstk_darwin(v7);
  sub_6D44();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = sub_494C(&qword_18B900);
  __chkstk_darwin(v11);
  sub_6D44();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  sub_6D44();
  uint64_t v19 = v18 - v17;
  uint64_t v20 = Siri_Nlu_External_UserParse.userDialogActs.getter();
  sub_9109C(v20, v14);
  swift_bridgeObjectRelease(v20);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v14, 1LL, v15) == 1)
  {
    uint64_t v21 = sub_8F830(v14);
    uint64_t v22 = Logger.wellness.unsafeMutableAddressor(v21);
    swift_beginAccess(v22, v41, 0LL, 0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v10, v22, v38);
    uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 16);
    uint64_t v24 = v23(v6, v0, v1);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v35 = swift_slowAlloc(32LL, -1LL);
      uint64_t v40 = v35;
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v34 = v27 + 4;
      v23(v4, (uint64_t)v6, v1);
      uint64_t v28 = String.init<A>(describing:)(v4, v1);
      unint64_t v30 = v29;
      uint64_t v39 = sub_39178(v28, v29, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v34, v27 + 12);
      swift_bridgeObjectRelease(v30);
      sub_E8F24();
      _os_log_impl(&dword_0, v25, v26, "No user dialog act found in userParse %s", v27, 0xCu);
      uint64_t v31 = v35;
      swift_arrayDestroy(v35, 1LL);
      sub_5050(v31);
      sub_5050((uint64_t)v27);
    }

    else
    {
      sub_E8F24();
    }

    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v10, v38);
    return 0LL;
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v19, v14, v15);
    uint64_t v32 = sub_81CF0();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v19, v15);
  }

  return v32;
}

uint64_t sub_E8F24()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 144) + 8LL))(v1, v0);
}

uint64_t sub_E8F38(char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  *(void *)(v8 + 80) = v18;
  *(void *)(v8 + 88) = v19;
  *(_BYTE *)(v8 + 46_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v16;
  *(void *)(v8 + 64) = v15;
  *(void *)(v8 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v17;
  *(_BYTE *)(v8 + 461) = v14;
  *(_BYTE *)(v8 + 460) = v12;
  *(void *)(v8 + 48) = v11;
  *(void *)(v8 + 56) = v13;
  *(_BYTE *)(v8 + 459) = a8;
  *(_BYTE *)(v8 + 458) = a6;
  *(void *)(v8 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a5;
  *(void *)(v8 + 40) = a7;
  *(_BYTE *)(v8 + 45_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = a4;
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  *(_BYTE *)(v8 + 456) = a1;
  unint64_t v9 = (*(void *)(*(void *)(sub_494C(&qword_189D00) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v8 + 96) = swift_task_alloc(v9);
  *(void *)(v8 + 104) = swift_task_alloc(v9);
  return swift_task_switch(sub_E8FF0, 0LL, 0LL);
}

uint64_t sub_E8FF0()
{
  int v1 = *(unsigned __int8 *)(v0 + 456);
  switch(*(_BYTE *)(v0 + 456))
  {
    case 'Y':
      if (qword_189AF8 != -1) {
        swift_once(&qword_189AF8, sub_EA24C);
      }
      sub_EA478();
      *(void *)(v0 + 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = qword_19C3B0;
      sub_363E8();
      char v12 = (void *)sub_36B20();
      *(void *)(v0 + 200) = v12;
      sub_EA400(v12, (uint64_t)sub_E9B30);
      sub_EA424();
      return sub_9D39C(v13, v14, v15, v16, v17, v18, v19);
    case 'Z':
      if (qword_189AF8 != -1) {
        swift_once(&qword_189AF8, sub_EA24C);
      }
      sub_EA478();
      *(void *)(v0 + 288) = qword_19C3B0;
      sub_363E8();
      unint64_t v29 = (void *)sub_36B20();
      *(void *)(v0 + 296) = v29;
      sub_EA400(v29, (uint64_t)sub_E9CE0);
      sub_EA424();
      return sub_9E6EC(v30, v31, v32, v33, v34, v35, v36);
    case '[':
    case '\\':
    case '^':
    case '_':
    case 'b':
    case 'c':
    case 'd':
    case 'e':
    case 'f':
      goto LABEL_19;
    case ']':
      if (qword_189B00 != -1) {
        swift_once(&qword_189B00, sub_EA260);
      }
      uint64_t v37 = *(void *)(v0 + 104);
      *(void *)(v0 + 304) = qword_19C3B8;
      uint64_t v38 = sub_27CC8(0x5Du);
      uint64_t v40 = v39;
      swift_retain();
      String.toSpeakableString.getter(v38, v40);
      swift_bridgeObjectRelease();
      uint64_t v41 = type metadata accessor for SpeakableString(0LL);
      *(void *)(v0 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v41;
      sub_A66C(v37, 0LL, v42, v41);
      uint64_t v43 = (void *)swift_task_alloc(dword_18B09C);
      *(void *)(v0 + 320) = v43;
      *uint64_t v43 = v0;
      v43[1] = sub_E9D28;
      sub_EA454(*(void *)(v0 + 104));
      sub_EA424();
      return sub_3CB90(v44);
      if (qword_189AF8 != -1) {
        swift_once(&qword_189AF8, sub_EA24C);
      }
      uint64_t v45 = *(void *)(v0 + 88);
      uint64_t v47 = *(void *)(v0 + 64);
      uint64_t v46 = *(void *)(v0 + 72);
      char v48 = *(_BYTE *)(v0 + 462) & 1;
      *(void *)(v0 + 43_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = qword_19C3B0;
      swift_retain();
      *(void *)(v0 + 440) = sub_EA274(v47, v48, v46, 0x60u, v45);
      uint64_t v49 = (void *)swift_task_alloc(dword_18DB9C);
      *(void *)(v0 + 448) = v49;
      *uint64_t v49 = v0;
      v49[1] = sub_EA10C;
      sub_EA454(*(void *)(v0 + 16));
      sub_EA424();
      return sub_9D554(v50, v51, v52);
    case 'a':
      if (qword_189AF8 != -1) {
        swift_once(&qword_189AF8, sub_EA24C);
      }
      sub_EA478();
      *(void *)(v0 + 256) = qword_19C3B0;
      sub_363E8();
      uint64_t v53 = (void *)sub_36B20();
      *(void *)(v0 + 264) = v53;
      sub_EA400(v53, (uint64_t)sub_E9C50);
      sub_EA424();
      return sub_9F0B4(v54, v55, v56, v57, v58, v59, v60);
    case 'g':
      if (qword_189AF8 != -1) {
        swift_once(&qword_189AF8, sub_EA24C);
      }
      sub_EA494();
      *(void *)(v0 + 208) = qword_19C3B0;
      sub_363E8();
      char v61 = (void *)sub_36B20();
      *(void *)(v0 + 216) = v61;
      *char v61 = v0;
      v61[1] = sub_E9B78;
      sub_EA454(*(void *)(v0 + 16));
      sub_371E0();
      return sub_9D748(v62, v63, v64, v65, v66, v67, v68, v69);
    default:
      switch(*(_BYTE *)(v0 + 456))
      {
        case 0x96:
          if (qword_189AF8 != -1) {
            swift_once(&qword_189AF8, sub_EA24C);
          }
          sub_EA478();
          *(void *)(v0 + 160) = qword_19C3B0;
          sub_363E8();
          uint64_t v20 = (void *)sub_36B20();
          *(void *)(v0 + 168) = v20;
          sub_EA400(v20, (uint64_t)sub_E9AA0);
          sub_EA424();
          return sub_9E40C(v21, v22, v23, v24, v25, v26, v27);
        case 0x97:
          if (qword_189AF8 != -1) {
            swift_once(&qword_189AF8, sub_EA24C);
          }
          sub_EA478();
          *(void *)(v0 + 240) = qword_19C3B0;
          sub_363E8();
          char v70 = (void *)sub_36B20();
          *(void *)(v0 + 248) = v70;
          sub_EA400(v70, (uint64_t)sub_E9C08);
          sub_EA424();
          return sub_9E57C(v71, v72, v73, v74, v75, v76, v77);
        case 0x98:
        case 0x99:
        case 0x9A:
        case 0x9C:
        case 0x9D:
        case 0x9E:
          goto LABEL_19;
        case 0x9B:
          if (qword_189AF8 != -1) {
            swift_once(&qword_189AF8, sub_EA24C);
          }
          sub_EA478();
          *(void *)(v0 + 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = qword_19C3B0;
          sub_363E8();
          uint64_t v78 = (void *)sub_36B20();
          *(void *)(v0 + 280) = v78;
          *uint64_t v78 = v0;
          v78[1] = sub_E9C98;
          sub_EA440();
          sub_EA424();
          return sub_9E860(v79, v80, v81, v82, v83, v84);
        case 0x9F:
          if (qword_189AF8 != -1) {
            swift_once(&qword_189AF8, sub_EA24C);
          }
          sub_EA494();
          *(void *)(v0 + 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = qword_19C3B0;
          sub_363E8();
          unsigned __int8 v85 = (void *)sub_36B20();
          *(void *)(v0 + 120) = v85;
          *unsigned __int8 v85 = v0;
          v85[1] = sub_E99C8;
          sub_EA454(*(void *)(v0 + 16));
          sub_371E0();
          return sub_9E9BC(v86, v87, v88, v89, v90, v91, v92, v93);
        default:
          switch(v1)
          {
            case 107:
              if (qword_189AF8 != -1) {
                swift_once(&qword_189AF8, sub_EA24C);
              }
              uint64_t v94 = *(void *)(v0 + 48);
              uint64_t v135 = *(void *)(v0 + 56);
              uint64_t v96 = *(void *)(v0 + 32);
              uint64_t v95 = *(void *)(v0 + 40);
              char v136 = *(_BYTE *)(v0 + 461) & 1;
              char v97 = *(_BYTE *)(v0 + 460) & 1;
              char v98 = *(_BYTE *)(v0 + 459) & 1;
              char v99 = *(_BYTE *)(v0 + 458) & 1;
              *(void *)(v0 + 384) = qword_19C3B0;
              sub_363E8();
              *(void *)(v0 + 39_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_EA468(v96, v99);
              *(void *)(v0 + 400) = sub_EA468(v95, v98);
              *(void *)(v0 + 408) = sub_EA468(v94, v97);
              *(void *)(v0 + 416) = sub_EA468(v135, v136);
              char v100 = (void *)swift_task_alloc(dword_18DBC4);
              *(void *)(v0 + 424) = v100;
              *char v100 = v0;
              v100[1] = sub_EA084;
              sub_EA454(*(void *)(v0 + 16));
              sub_EA424();
              return sub_9DED8(v101, v102, v103, v104, v105, v106);
            case 147:
              if (qword_189AF8 != -1) {
                swift_once(&qword_189AF8, sub_EA24C);
              }
              sub_EA478();
              *(void *)(v0 + 176) = qword_19C3B0;
              sub_363E8();
              uint64_t v107 = (void *)sub_36B20();
              *(void *)(v0 + 184) = v107;
              sub_EA400(v107, (uint64_t)sub_E9AE8);
              sub_EA424();
              return sub_9E0E4(v108, v109, v110, v111, v112, v113, v114);
            case 173:
              if (qword_189AF8 != -1) {
                swift_once(&qword_189AF8, sub_EA24C);
              }
              sub_EA478();
              *(void *)(v0 + 224) = qword_19C3B0;
              sub_363E8();
              uint64_t v115 = (void *)sub_36B20();
              *(void *)(v0 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v115;
              *uint64_t v115 = v0;
              v115[1] = sub_E9BC0;
              sub_EA440();
              sub_EA424();
              return sub_9EE50(v116, v117, v118, v119, v120, v121);
            case 174:
              if (qword_189AF8 != -1) {
                swift_once(&qword_189AF8, sub_EA24C);
              }
              uint64_t v122 = (uint64_t *)(v0 + 32);
              if ((*(_BYTE *)(v0 + 457) & 1) == 0) {
                uint64_t v122 = (uint64_t *)(v0 + 24);
              }
              uint64_t v123 = *v122;
              *(void *)(v0 + 368) = qword_19C3B0;
              uint64_t v124 = dword_18DC14;
              sub_363E8();
              uint64_t v125 = (void *)swift_task_alloc(v124);
              *(void *)(v0 + 376) = v125;
              *uint64_t v125 = v0;
              v125[1] = sub_EA030;
              uint64_t v126 = sub_EA454(*(void *)(v0 + 16));
              return sub_9EF68(v126, v123);
            case 184:
              if (qword_189AF8 != -1) {
                swift_once(&qword_189AF8, sub_EA24C);
              }
              sub_EA478();
              *(void *)(v0 + 128) = qword_19C3B0;
              sub_363E8();
              uint64_t v127 = (void *)sub_36B20();
              *(void *)(v0 + 136) = v127;
              sub_EA400(v127, (uint64_t)sub_E9A10);
              sub_EA424();
              return sub_9FD70(v128, v129, v130, v131, v132, v133, v134);
            default:
              if (v1 != 193)
              {
LABEL_19:
                swift_task_dealloc(*(void *)(v0 + 104));
                sub_A78C();
                sub_EA424();
                __asm { BR              X1 }
              }

              if (qword_189AF8 != -1) {
                swift_once(&qword_189AF8, sub_EA24C);
              }
              *(void *)(v0 + 144) = qword_19C3B0;
              sub_363E8();
              uint64_t v2 = (void *)sub_36B20();
              *(void *)(v0 + 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v2;
              void *v2 = v0;
              v2[1] = sub_E9A58;
              sub_EA454(*(void *)(v0 + 16));
              sub_371E0();
              return sub_9FF54(v3, v4, v5, v6, v7, v8, v9, v10);
          }
      }
  }

uint64_t sub_E99C8()
{
  if (v0) {
    sub_36860();
  }
  sub_EA460();
  sub_A78C();
  uint64_t v3 = sub_3D7AC();
  return sub_59AC8(v3, v4);
}

uint64_t sub_E9A10()
{
  if (v0) {
    sub_36860();
  }
  sub_EA460();
  sub_A78C();
  uint64_t v3 = sub_3D7AC();
  return sub_59AC8(v3, v4);
}

uint64_t sub_E9A58()
{
  if (v0) {
    sub_36860();
  }
  sub_EA460();
  sub_A78C();
  uint64_t v3 = sub_3D7AC();
  return sub_59AC8(v3, v4);
}

uint64_t sub_E9AA0()
{
  if (v0) {
    sub_36860();
  }
  sub_EA460();
  sub_A78C();
  uint64_t v3 = sub_3D7AC();
  return sub_59AC8(v3, v4);
}

uint64_t sub_E9AE8()
{
  if (v0) {
    sub_36860();
  }
  sub_EA460();
  sub_A78C();
  uint64_t v3 = sub_3D7AC();
  return sub_59AC8(v3, v4);
}

uint64_t sub_E9B30()
{
  if (v0) {
    sub_36860();
  }
  sub_EA460();
  sub_A78C();
  uint64_t v3 = sub_3D7AC();
  return sub_59AC8(v3, v4);
}

uint64_t sub_E9B78()
{
  if (v0) {
    sub_36860();
  }
  sub_EA460();
  sub_A78C();
  uint64_t v3 = sub_3D7AC();
  return sub_59AC8(v3, v4);
}

uint64_t sub_E9BC0()
{
  if (v0) {
    sub_36860();
  }
  sub_EA460();
  sub_A78C();
  uint64_t v3 = sub_3D7AC();
  return sub_59AC8(v3, v4);
}

uint64_t sub_E9C08()
{
  if (v0) {
    sub_36860();
  }
  sub_EA460();
  sub_A78C();
  uint64_t v3 = sub_3D7AC();
  return sub_59AC8(v3, v4);
}

uint64_t sub_E9C50()
{
  if (v0) {
    sub_36860();
  }
  sub_EA460();
  sub_A78C();
  uint64_t v3 = sub_3D7AC();
  return sub_59AC8(v3, v4);
}

uint64_t sub_E9C98()
{
  if (v0) {
    sub_36860();
  }
  sub_EA460();
  sub_A78C();
  uint64_t v3 = sub_3D7AC();
  return sub_59AC8(v3, v4);
}

uint64_t sub_E9CE0()
{
  if (v0) {
    sub_36860();
  }
  sub_EA460();
  sub_A78C();
  uint64_t v3 = sub_3D7AC();
  return sub_59AC8(v3, v4);
}

uint64_t sub_E9D28(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  uint64_t v8 = v4;
  sub_59AF4(v4[40], &v8);
  uint64_t v5 = v4[13];
  if (v1)
  {
    sub_36BE0();
    sub_36860();
    sub_59A88(v5);
    uint64_t v6 = sub_EA160;
  }

  else
  {
    v4[41] = a1;
    sub_59A88(v5);
    sub_36BE0();
    uint64_t v6 = sub_E9DBC;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_E9DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)v3[41];
  if (!v4)
  {
    uint64_t v15 = 0LL;
    uint64_t v14 = 1LL;
    goto LABEL_14;
  }

  id v5 = [v4 dialog];
  unint64_t v6 = sub_5EBA0();
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0) {
      uint64_t v16 = v7;
    }
    else {
      uint64_t v16 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v7);
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v16);
    sub_249D4();
    if (v17) {
      goto LABEL_4;
    }
  }

  else if (*(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8LL)))
  {
LABEL_4:
    sub_398E0(0LL, (v7 & 0xC000000000000001LL) == 0, v7);
    if ((v7 & 0xC000000000000001LL) != 0) {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v7);
    }
    else {
      id v8 = *(id *)(v7 + 32);
    }
    char v9 = v8;
    sub_249D4();
    id v10 = [v9 fullPrint];

    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v13 = v12;

    String.toSpeakableString.getter(v11, v13);
    uint64_t v14 = 0LL;
    goto LABEL_13;
  }

  uint64_t v14 = 1LL;
LABEL_13:
  sub_249D4();
  uint64_t v15 = v3[41];
LABEL_14:
  v3[42] = v15;
  sub_A66C(v3[12], v14, a3, v3[39]);
  if (qword_189AF8 != -1) {
    swift_once(&qword_189AF8, sub_EA24C);
  }
  sub_EA478();
  v3[43] = qword_19C3B0;
  sub_363E8();
  uint64_t v18 = (void *)sub_36B20();
  v3[44] = (uint64_t)v18;
  *uint64_t v18 = v3;
  v18[1] = sub_E9F74;
  uint64_t v19 = sub_EA440();
  return sub_EA484(v19, v20, v21, v22, v23, v24, v25, v26);
}

uint64_t sub_E9F74()
{
  if (v1)
  {
    sub_36860();
    sub_367AC();
    uint64_t v4 = sub_EA200;
  }

  else
  {
    sub_367AC();
    *(void *)(v2 + 360) = v0;
    uint64_t v4 = sub_E9FE0;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_E9FE0()
{
  uint64_t v1 = *(void *)(v0 + 360);

  sub_59A88(*(void *)(v0 + 96));
  uint64_t v2 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 104));
  swift_task_dealloc(v2);
  return sub_73380(v1, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_EA030()
{
  if (v0) {
    sub_36860();
  }
  sub_367AC();
  sub_EA460();
  sub_A78C();
  uint64_t v3 = sub_3D7AC();
  return sub_59AC8(v3, v4);
}

uint64_t sub_EA084()
{
  uint64_t v2 = *v1;
  uint64_t v6 = v2;
  sub_59AF4(*(void *)(v2 + 424), &v6);
  sub_367AC();
  swift_release();
  sub_367AC();
  sub_36BE0();
  swift_release();
  if (v0) {
    sub_36860();
  }
  swift_task_dealloc(*(void *)(v2 + 104));
  sub_A78C();
  uint64_t v3 = sub_3D7AC();
  return sub_73380(v3, v4);
}

uint64_t sub_EA10C()
{
  if (v0) {
    sub_36860();
  }
  sub_EA460();
  sub_A78C();
  uint64_t v3 = sub_3D7AC();
  return sub_59AC8(v3, v4);
}

uint64_t sub_EA160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[42] = 0LL;
  sub_A66C(v3[12], 1LL, a3, v3[39]);
  if (qword_189AF8 != -1) {
    swift_once(&qword_189AF8, sub_EA24C);
  }
  sub_EA478();
  v3[43] = qword_19C3B0;
  sub_363E8();
  uint64_t v4 = (void *)sub_36B20();
  v3[44] = (uint64_t)v4;
  *uint64_t v4 = v3;
  v4[1] = sub_E9F74;
  uint64_t v5 = sub_EA440();
  return sub_EA484(v5, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_EA200()
{
  sub_59A88(*(void *)(v0 + 96));
  swift_task_dealloc(*(void *)(v0 + 104));
  sub_A78C();
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_EA24C(uint64_t a1)
{
  return sub_5EB1C( a1,  (void (*)(void))type metadata accessor for WellnessQueryingCATsSimple,  &qword_19C3B0);
}

uint64_t sub_EA260(uint64_t a1)
{
  return sub_5EB1C(a1, (void (*)(void))type metadata accessor for WellnessCATsSimple, &qword_19C3B8);
}

uint64_t sub_EA274(uint64_t a1, char a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t v10 = sub_494C(&qword_189D00);
  __chkstk_darwin(v10);
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v13 = (char *)&v24 - v12;
  if ((a2 & 1) == 0)
  {
    sub_79734(a3, (uint64_t)&v24 - v12);
    uint64_t v14 = type metadata accessor for SpeakableString(0LL);
    uint64_t v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v14);
    if ((_DWORD)v15 == 1)
    {
      sub_59A88((uint64_t)v13);
    }

    else
    {
      uint64_t v16 = SpeakableString.print.getter(v15);
      uint64_t v18 = v17;
      (*(void (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8LL))(v13, v14);
      if (a4 != 205)
      {
        uint64_t v21 = type metadata accessor for DialogTemperature.Builder(0LL);
        swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
        DialogTemperature.Builder.init()();
        double v22 = sub_90668(v16, v18, a4, *(double *)&a1);
        swift_bridgeObjectRelease();
        dispatch thunk of DialogConvertibleMeasurement.Builder.withValue(_:)(*(void *)&v22, 0LL);
        swift_release();
        dispatch thunk of DialogConvertibleMeasurement.Builder.withUnits(_:)(a5);
        uint64_t v23 = swift_release();
        uint64_t v19 = dispatch thunk of DialogConvertibleMeasurement.Builder.build()(v23);
        swift_release();
        return v19;
      }

      swift_bridgeObjectRelease();
    }
  }

  return 0LL;
}

uint64_t sub_EA400@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 16);
}

  ;
}

uint64_t sub_EA440()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_EA454@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_EA460()
{
  return swift_task_dealloc(*(void *)(v0 + 104));
}

uint64_t sub_EA468(uint64_t a1, char a2)
{
  return sub_EA274(a1, a2, v3, 0x6Bu, v2);
}

  ;
}

uint64_t sub_EA484(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_9FAA4(a1, a2, a3, a4, a5, a6, a7, a8);
}

  ;
}

uint64_t destroy for GetActivitySummaryFlow(void *a1)
{
  return swift_release();
}

uint64_t initializeWithCopy for GetActivitySummaryFlow(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  __int128 v5 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 48, a2 + 48);
  __int128 v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 88, a2 + 88);
  __int128 v7 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 128, a2 + 128);
  __int128 v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 168, a2 + 168);
  __int128 v9 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 208, a2 + 208);
  uint64_t v10 = *(void *)(a2 + 248);
  *(void *)(a1 + 248) = v10;
  uint64_t v12 = *(void *)(a2 + 280);
  uint64_t v11 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = v12;
  *(void *)(a1 + 288) = v11;
  uint64_t v13 = **(void (***)(uint64_t, uint64_t, uint64_t))(v12 - 8);
  swift_unknownObjectRetain(v10);
  v13(a1 + 256, a2 + 256, v12);
  uint64_t v14 = *(void *)(a2 + 296);
  uint64_t v15 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = v14;
  *(void *)(a1 + 304) = v15;
  uint64_t v16 = *(void *)(a2 + 312);
  *(void *)(a1 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v16;
  swift_retain(v14);
  swift_retain(v15);
  swift_retain(v16);
  return a1;
}

uint64_t assignWithCopy for GetActivitySummaryFlow(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  sub_7030((void *)(a1 + 8), (void *)(a2 + 8));
  sub_7030((void *)(a1 + 48), (void *)(a2 + 48));
  sub_7030((void *)(a1 + 88), (void *)(a2 + 88));
  sub_7030((void *)(a1 + 128), (void *)(a2 + 128));
  sub_7030((void *)(a1 + 168), (void *)(a2 + 168));
  sub_7030((void *)(a1 + 208), (void *)(a2 + 208));
  uint64_t v4 = *(void *)(a2 + 248);
  uint64_t v5 = *(void *)(a1 + 248);
  *(void *)(a1 + 248) = v4;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v5);
  sub_7030((void *)(a1 + 256), (void *)(a2 + 256));
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  swift_retain();
  swift_release();
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_retain();
  swift_release();
  *(void *)(a1 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 312);
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for GetActivitySummaryFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x140uLL);
}

uint64_t assignWithTake for GetActivitySummaryFlow(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 48));
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 88));
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 128));
  __int128 v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 168));
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 208));
  __int128 v6 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v6;
  uint64_t v7 = *(void *)(a2 + 248);
  uint64_t v8 = *(void *)(a1 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v7;
  swift_unknownObjectRelease(v8);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 256));
  __int128 v9 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v9;
  uint64_t v10 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v10;
  swift_release();
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_release();
  *(void *)(a1 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 312);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GetActivitySummaryFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 320))
    {
      LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GetActivitySummaryFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 320) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 320) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for GetActivitySummaryFlow()
{
  return &type metadata for GetActivitySummaryFlow;
}

uint64_t sub_EA948()
{
  uint64_t v0 = sub_80C98();
  return Flow.deferToExecuteAsync(_:)(v0, v1, v2, v3);
}

uint64_t sub_EA984(uint64_t a1)
{
  v2[197] = v1;
  v2[196] = a1;
  uint64_t v3 = type metadata accessor for UnavailableDataFlow(0LL);
  v2[198] = v3;
  v2[199] = sub_A5C0(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for CATOption(0LL);
  v2[200] = sub_A5C0(*(void *)(v4 - 8));
  uint64_t v5 = sub_D984();
  v2[201] = v5;
  v2[202] = *(void *)(v5 - 8);
  v2[203] = sub_A5B8();
  v2[204] = sub_A5B8();
  v2[205] = sub_A5B8();
  v2[206] = sub_A5B8();
  uint64_t v6 = sub_A8E4();
  v2[207] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[208] = v7;
  v2[209] = sub_A5C0(v7);
  uint64_t v8 = type metadata accessor for Calendar(0LL);
  v2[210] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[211] = v9;
  v2[212] = sub_A5C0(v9);
  uint64_t v10 = sub_494C(&qword_189BA0);
  v2[213] = sub_A5C0(*(void *)(v10 - 8));
  uint64_t v11 = type metadata accessor for DateInterval(0LL);
  v2[214] = v11;
  v2[215] = *(void *)(v11 - 8);
  v2[216] = sub_A5B8();
  v2[217] = sub_A5B8();
  v2[218] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

void sub_EAAA0()
{
  uint64_t v1 = sub_12BAB0(**(_WORD **)(v0 + 1576));
  *(_BYTE *)(v0 + 1233) = v1;
  if (v1 == 205)
  {
    uint64_t v2 = (void *)(v0 + 1440);
    uint64_t v3 = *(void *)(v0 + 1624);
    uint64_t v4 = *(void *)(v0 + 1616);
    uint64_t v5 = *(void *)(v0 + 1608);
    uint64_t v6 = *(void *)(v0 + 1576);
    uint64_t v7 = Logger.wellness.unsafeMutableAddressor(v1);
    sub_A5DC(v7, v0 + 1440);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v7, v5);
    sub_F1174(v6, v0 + 80);
    sub_A86C();
    os_log_type_t v8 = sub_A898();
    BOOL v9 = sub_561AC(v8);
    uint64_t v10 = *(void *)(v0 + 1624);
    uint64_t v11 = *(void *)(v0 + 1616);
    uint64_t v12 = *(void *)(v0 + 1608);
    if (v9)
    {
      uint64_t v137 = *(void *)(v0 + 1608);
      uint64_t v132 = *(void *)(v0 + 1624);
      uint64_t v13 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v143 = sub_A5E8(32LL);
      uint64_t v14 = v143;
      *(_DWORD *)uint64_t v13 = 136315138;
      uint64_t v15 = sub_10F1C0(*(_WORD *)(v0 + 80));
      *(void *)(v0 + 155_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_39178(v15, v16, &v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1552, v0 + 1560, v13 + 4, v13 + 12);
      sub_1EBF4();
      sub_F11A8((void *)(v0 + 80));
      sub_F1C00();
      sub_DA24(v17, v18, v19, v20, v13);
      sub_A81C(v14);
      sub_5050(v14);
      sub_5050((uint64_t)v13);

      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v132, v137);
    }

    else
    {
      sub_F11A8((void *)(v0 + 80));

      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    }

    sub_F1174(*(void *)(v0 + 1576), v0 + 400);
    uint64_t v143 = 0LL;
    unint64_t v144 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(72LL);
    v26._countAndFlagsBits = sub_10F1C0(*(_WORD *)(v0 + 400));
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._object = (void *)0x80000000001456A0LL;
    v27._countAndFlagsBits = 0xD000000000000046LL;
    String.append(_:)(v27);
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v143,  v144,  "WellnessFlowPlugin/GetActivitySummaryFlow.swift",  47LL,  2LL,  36LL,  0);
    sub_56400();
    return;
  }

  uint64_t v21 = *(void *)(v0 + 1712);
  uint64_t v22 = *(void *)(v0 + 1704);
  uint64_t v23 = *(void **)(v0 + 1576);
  uint64_t v24 = v23[4];
  uint64_t v25 = v23[5];
  sub_500C(v23 + 1, v24);
  (*(void (**)(uint64_t, uint64_t))(v25 + 32))(v24, v25);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v22, 1LL, v21) != 1)
  {
    uint64_t v28 = *(void *)(v0 + 1744);
    uint64_t v138 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1736);
    uint64_t v29 = *(void *)(v0 + 1720);
    uint64_t v30 = *(void *)(v0 + 1712);
    uint64_t v31 = *(void *)(v0 + 1696);
    uint64_t v32 = *(void *)(v0 + 1688);
    uint64_t v133 = *(void (**)(uint64_t))(v0 + 1680);
    uint64_t v33 = *(void *)(v0 + 1672);
    uint64_t v34 = *(void *)(v0 + 1664);
    uint64_t v35 = *(void *)(v0 + 1656);
    uint64_t v36 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v29 + 32))(v28, *(void *)(v0 + 1704), v30);
    uint64_t v37 = static Calendar.current.getter(v36);
    DateInterval.start.getter(v37);
    char v38 = Calendar.isDateInToday(_:)(v33);
    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v39(v33, v35);
    uint64_t v40 = *(void (**)(uint64_t, void (*)(uint64_t)))(v32 + 8);
    v40(v31, v133);
    uint64_t v41 = *(uint64_t (**)(uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t))(v29 + 16);
    uint64_t v42 = v41(v138, v28, v30);
    if ((v38 & 1) != 0)
    {
      uint64_t v43 = *(void *)(v0 + 1696);
      uint64_t v133 = (void (*)(uint64_t))v39;
      uint64_t v138 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1680);
      uint64_t v44 = *(void *)(v0 + 1672);
      uint64_t v45 = static Calendar.current.getter(v42);
      DateInterval.end.getter(v45);
      char v46 = Calendar.isDateInToday(_:)(v44);
      uint64_t v47 = sub_A6264();
      v133(v47);
      v40(v43, (void (*)(uint64_t))v138);
      uint64_t v48 = sub_F1A8C();
      if ((v46 & 1) != 0)
      {
        v138(*(void *)(v0 + 1744), *(void *)(v0 + 1712));
        goto LABEL_11;
      }

      char v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v41;
    }

    else
    {
      char v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v41;
      uint64_t v48 = sub_F1A8C();
    }

    uint64_t v65 = *(void *)(v0 + 1744);
    uint64_t v66 = *(void *)(v0 + 1728);
    uint64_t v67 = *(void *)(v0 + 1712);
    uint64_t v68 = *(void *)(v0 + 1648);
    uint64_t v69 = *(void *)(v0 + 1616);
    uint64_t v70 = *(void *)(v0 + 1608);
    uint64_t v71 = Logger.wellness.unsafeMutableAddressor(v48);
    sub_A5DC(v71, v0 + 1488);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 16))(v68, v71, v70);
    uint64_t v72 = v64(v66, v65, v67);
    char v73 = (os_log_s *)Logger.logObject.getter(v72);
    os_log_type_t v74 = static os_log_type_t.debug.getter();
    BOOL v75 = os_log_type_enabled(v73, v74);
    uint64_t v83 = *(void *)(v0 + 1712);
    uint64_t v84 = *(void *)(v0 + 1648);
    uint64_t v85 = *(void *)(v0 + 1616);
    uint64_t v86 = *(void *)(v0 + 1608);
    if (v75)
    {
      uint64_t v134 = *(void *)(v0 + 1616);
      uint64_t v129 = *(void *)(v0 + 1608);
      uint64_t v87 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v88 = sub_A5E8(32LL);
      uint64_t v143 = v88;
      *(_DWORD *)uint64_t v87 = 136315138;
      sub_A410( &qword_18E5C8,  (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval,  (uint64_t)&protocol conformance descriptor for DateInterval);
      uint64_t v90 = dispatch thunk of CustomStringConvertible.description.getter(v83, v89);
      *(void *)(v0 + 1560) = sub_39178(v90, v91, &v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1560, v0 + 1568, v87 + 4, v87 + 12);
      uint64_t v92 = sub_36C34();
      sub_F1B44(v92, v93, v94, v95, v96, v97, v98, v99, v119, v122, (uint64_t)(v87 + 4), v129, v134, v138);
      sub_DA24( &dword_0,  v73,  v74,  "Received rings request outside of today. Punching out instead. (dateInteval: %s)",  v87);
      sub_A81C(v88);
      sub_5050(v88);
      sub_5050((uint64_t)v87);

      (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v84, v130);
    }

    else
    {
      sub_F1B44(v75, v76, v77, v78, v79, v80, v81, v82, v119, v122, v125, v128, (uint64_t)v133, v138);

      (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v84, v86);
    }

    uint64_t v100 = *(void *)(v0 + 1744);
    uint64_t v101 = *(void *)(v0 + 1712);
    sub_A304(*(void *)(v0 + 1576) + 48LL, v0 + 992);
    *(void *)(v0 + 1056) = &type metadata for WellnessCATProvider;
    *(void *)(v0 + 1064) = &off_182110;
    uint64_t v102 = sub_20308((uint64_t)&unk_180898, 48LL);
    *(void *)(v0 + 103_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v102;
    sub_F1BE4((uint64_t *)(v0 + 1072), v102);
    *(_WORD *)(v0 + 984) = 231;
    *(_BYTE *)(v0 + 123_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0;
    sub_3BFE4();
    static ExecuteResponse.complete<A>(next:)();
    sub_9BBBC((void *)(v0 + 984));
    v139(v100, v101);
    uint64_t v140 = *(void *)(v0 + 1600);
    uint64_t v142 = *(void *)(v0 + 1592);
    swift_task_dealloc(*(void *)(v0 + 1744));
    sub_A78C();
    sub_A67C();
    sub_A7C8();
    sub_A760();
    sub_A8EC();
    sub_A910();
    sub_A864();
    sub_A85C();
    uint64_t v103 = sub_A8F4();
    uint64_t v111 = sub_A844(v103, v104, v105, v106, v107, v108, v109, v110, v120, v123, v126, v130, v135, v140);
    sub_A83C(v111, v112, v113, v114, v115, v116, v117, v118, v121, v124, v127, v131, v136, v141, v142);
    sub_80A90(*(uint64_t (**)(void))(v0 + 8));
    return;
  }

  sub_F1270(*(void *)(v0 + 1704), &qword_189BA0);
LABEL_11:
  uint64_t v49 = *(void *)(v0 + 1640);
  uint64_t v50 = *(void *)(v0 + 1616);
  uint64_t v51 = *(uint8_t **)(v0 + 1608);
  id v52 = [objc_allocWithZone((Class)type metadata accessor for GetAcitivitySummaryIntent(0)) init];
  *(void *)(v0 + 175_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v52;
  uint64_t v53 = Logger.wellness.unsafeMutableAddressor(v52);
  *(void *)(v0 + 1760) = v53;
  sub_A5DC(v53, v0 + 1512);
  uint64_t v54 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 16);
  *(void *)(v0 + 1768) = v54;
  sub_464D8(v54);
  sub_A86C();
  os_log_type_t v55 = sub_AB70();
  if (sub_232DC(v55))
  {
    char v56 = (_WORD *)sub_232D0();
    sub_36A44(v56);
    sub_232EC(&dword_0, (os_log_s *)(v0 + 1512), (os_log_type_t)v49, "Trying to fetch Activity Summary", v51);
    sub_5050((uint64_t)v51);
  }

  uint64_t v57 = *(void *)(v0 + 1640);
  uint64_t v58 = *(void *)(v0 + 1616);
  uint64_t v59 = *(void *)(v0 + 1608);
  uint64_t v60 = *(void *)(v0 + 1576);

  char v61 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
  *(void *)(v0 + 1776) = v61;
  v61(v57, v59);
  uint64_t v62 = *(void **)(v60 + 248);
  *(void *)(v0 + 56) = v0 + 1544;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_EB23C;
  *(void *)(v0 + 143_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = swift_continuation_init(v0 + 16, 0LL);
  *(void *)(v0 + 1400) = _NSConcreteStackBlock;
  *(void *)(v0 + 1408) = 0x40000000LL;
  *(void *)(v0 + 1416) = sub_7ED0;
  *(void *)(v0 + 1424) = &unk_180870;
  [v62 handleGetAcitivitySummary:v52 completion:v0 + 1400];
  sub_56400();
  swift_continuation_await(v63);
}

uint64_t sub_EB23C()
{
  return sub_A5D0();
}

uint64_t sub_EB274()
{
  uint64_t v1 = *(void (**)(uint64_t, os_log_s *, uint64_t))(v0 + 1768);
  uint64_t v2 = *(os_log_s **)(v0 + 1760);
  uint64_t v3 = *(void *)(v0 + 1632);
  uint64_t v4 = *(void *)(v0 + 1608);
  uint64_t v5 = *(void **)(v0 + 1544);
  *(void *)(v0 + 1784) = v5;
  sub_A5DC((uint64_t)v2, v0 + 1464);
  v1(v3, v2, v4);
  uint64_t v6 = v5;
  sub_A86C();
  os_log_type_t v7 = sub_AB70();
  if (sub_A634(v7))
  {
    uint64_t v57 = v0 + 1544;
    os_log_type_t v8 = (uint8_t *)sub_A5E8(12LL);
    BOOL v9 = (void *)sub_A5E8(8LL);
    *(_DWORD *)os_log_type_t v8 = 138412290;
    *(void *)(v0 + 1536) = v6;
    uint64_t v10 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1536, v0 + 1544, v8 + 4, v8 + 12);
    *BOOL v9 = v6;

    sub_DA24(&dword_0, v2, (os_log_type_t)v1, "Received response: %@", v8);
    sub_494C(&qword_189CB8);
    sub_A81C((uint64_t)v9);
    sub_5050((uint64_t)v9);
    sub_5050((uint64_t)v8);
  }

  else
  {

    uint64_t v2 = (os_log_s *)v6;
  }

  uint64_t v11 = *(void *)(v0 + 1632);

  uint64_t v12 = sub_F1980(v11);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))((char *)&stru_20.maxprot + (swift_isaMask & *v6)))(v12);
  if (v13 == 4)
  {
    uint64_t v23 = (void *)swift_task_alloc(dword_18F74C);
    *(void *)(v0 + 179_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_EB688;
    return sub_EB75C((uint64_t)v6, *(_BYTE *)(v0 + 1233));
  }

  else
  {
    if (v13 == 102)
    {
      uint64_t v25 = *(void **)(v0 + 1752);
      char v26 = *(_BYTE *)(v0 + 1233);
      uint64_t v27 = *(void *)(v0 + 1600);
      uint64_t v28 = *(_BYTE **)(v0 + 1592);
      uint64_t v29 = *(int **)(v0 + 1584);
      uint64_t v30 = *(void *)(v0 + 1576);
      sub_A66C((uint64_t)&v28[v29[5]], 1LL, v14, *(void *)(v0 + 1712));
      sub_A304(v30 + 48, (uint64_t)&v28[v29[6]]);
      sub_A13C((_OWORD *)(v30 + 88), &v28[v29[7]]);
      uint64_t v31 = type metadata accessor for ResponseFactory(0LL);
      uint64_t v32 = sub_A72C(v31);
      uint64_t v33 = ResponseFactory.init()(v32);
      uint64_t v34 = (uint64_t *)&v28[v29[8]];
      void v34[3] = v31;
      v34[4] = (uint64_t)&protocol witness table for ResponseFactory;
      *uint64_t v34 = v33;
      type metadata accessor for WellnessCATsSimple(0LL);
      sub_A774();
      CATWrapperSimple.__allocating_init(options:globals:)(v27, 0LL);
      sub_A874();
      sub_A774();
      uint64_t v35 = CATWrapper.__allocating_init(options:globals:)(v27, 0LL);
      *uint64_t v28 = v26;
      *(void *)&v28[v29[9]] = v31;
      *(void *)&v28[v29[10]] = v35;
      sub_A410(&qword_189CC8, type metadata accessor for UnavailableDataFlow, (uint64_t)&unk_13FD60);
      sub_23340();
      static ExecuteResponse.complete<A>(next:)();

      sub_F12A0((uint64_t)v28, type metadata accessor for UnavailableDataFlow);
    }

    else if (v13 == 101)
    {
      uint64_t v15 = *(void **)(v0 + 1752);
      char v16 = *(_BYTE *)(v0 + 1233);
      uint64_t v17 = *(void *)(v0 + 1600);
      uint64_t v18 = *(void *)(v0 + 1576);
      sub_A304(v18 + 48, v0 + 728);
      sub_A13C((_OWORD *)(v18 + 88), (_OWORD *)(v0 + 768));
      uint64_t v19 = type metadata accessor for ResponseFactory(0LL);
      uint64_t v20 = sub_A72C(v19);
      uint64_t v21 = ResponseFactory.init()(v20);
      *(void *)(v0 + 95_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v19;
      *(void *)(v0 + 960) = &protocol witness table for ResponseFactory;
      *(void *)(v0 + 928) = v21;
      type metadata accessor for WellnessCATsSimple(0LL);
      sub_A768();
      CATWrapperSimple.__allocating_init(options:globals:)(v17, 0LL);
      sub_A874();
      sub_A768();
      uint64_t v22 = CATWrapper.__allocating_init(options:globals:)(v17, 0LL);
      *(_BYTE *)(v0 + 720) = v16;
      *(void *)(v0 + 968) = v19;
      *(void *)(v0 + 976) = v22;
      sub_A294();
      static ExecuteResponse.complete<A>(next:)();

      sub_A2D0((void *)(v0 + 720));
    }

    else
    {
      uint64_t v36 = *(void **)(v0 + 1752);
      sub_F1A80(*(void *)(v0 + 1576));
      sub_A178();
      static ExecuteResponse.complete<A>(next:)();

      sub_36DD8();
    }

    sub_F1814();
    sub_A78C();
    sub_A67C();
    sub_A7C8();
    sub_A760();
    sub_A8EC();
    sub_A910();
    sub_A864();
    sub_A85C();
    uint64_t v37 = sub_A8F4();
    uint64_t v45 = sub_AAD8(v37, v38, v39, v40, v41, v42, v43, v44, v53, v55);
    sub_A888(v45, v46, v47, v48, v49, v50, v51, v52, v54, v56, v57);
    return sub_F18D4(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_EB688(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1792LL);
  *(void *)(*(void *)v1 + 1800LL) = a1;
  sub_36900(v2);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_EB6D4()
{
  uint64_t v1 = *(void **)(v0 + 1784);
  uint64_t v2 = *(void **)(v0 + 1752);
  static ExecuteResponse.complete(next:)(*(void *)(v0 + 1800));
  swift_release();

  sub_F1814();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  uint64_t v3 = sub_A8F4();
  uint64_t v11 = sub_AAD8(v3, v4, v5, v6, v7, v8, v9, v10, v20, v22);
  sub_A888(v11, v12, v13, v14, v15, v16, v17, v18, v21, v23, v24);
  return sub_F18D4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_EB75C(uint64_t a1, char a2)
{
  *(void *)(v3 + 3216) = v2;
  *(_BYTE *)(v3 + 585) = a2;
  *(void *)(v3 + 3208) = a1;
  uint64_t v4 = sub_494C(&qword_18A1A8);
  *(void *)(v3 + 3224) = sub_A5C0(*(void *)(v4 - 8));
  uint64_t v5 = sub_A8E4();
  *(void *)(v3 + 323_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v3 + 3240) = v6;
  *(void *)(v3 + 3248) = sub_A5C0(v6);
  *(void *)(v3 + 3256) = type metadata accessor for SingleActivitySummaryModel(0LL);
  *(void *)(v3 + 3264) = sub_A5B8();
  *(void *)(v3 + 327_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_A5B8();
  *(void *)(v3 + 3280) = sub_A5B8();
  *(void *)(v3 + 3288) = type metadata accessor for SnippetHeaderModel(0LL);
  *(void *)(v3 + 3296) = sub_A5B8();
  *(void *)(v3 + 3304) = sub_A5B8();
  *(void *)(v3 + 331_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_A5B8();
  uint64_t v7 = sub_ABF4();
  *(void *)(v3 + 3320) = v7;
  *(void *)(v3 + 3328) = *(void *)(v7 - 8);
  *(void *)(v3 + 3336) = sub_A5B8();
  *(void *)(v3 + 3344) = sub_A5B8();
  *(void *)(v3 + 335_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_A5B8();
  *(void *)(v3 + 3360) = sub_A5B8();
  *(void *)(v3 + 3368) = sub_A5B8();
  *(void *)(v3 + 3376) = sub_A5B8();
  sub_494C(&qword_189D00);
  *(void *)(v3 + 3384) = sub_A5B8();
  *(void *)(v3 + 339_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_A5B8();
  *(void *)(v3 + 3400) = sub_A5B8();
  *(void *)(v3 + 3408) = sub_A5B8();
  *(void *)(v3 + 3416) = sub_A5B8();
  uint64_t v8 = type metadata accessor for DialogPhase(0LL);
  *(void *)(v3 + 3424) = v8;
  *(void *)(v3 + 343_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(v8 - 8);
  *(void *)(v3 + 3440) = sub_A5B8();
  *(void *)(v3 + 3448) = sub_A5B8();
  uint64_t v9 = type metadata accessor for OutputGenerationManifest(0LL);
  *(void *)(v3 + 3456) = v9;
  *(void *)(v3 + 3464) = *(void *)(v9 - 8);
  *(void *)(v3 + 347_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_A5B8();
  *(void *)(v3 + 3480) = sub_A5B8();
  uint64_t v10 = sub_D984();
  *(void *)(v3 + 3488) = v10;
  *(void *)(v3 + 3496) = *(void *)(v10 - 8);
  *(void *)(v3 + 3504) = sub_A5B8();
  *(void *)(v3 + 351_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_A5B8();
  *(void *)(v3 + 3520) = sub_A5B8();
  *(void *)(v3 + 3528) = sub_A5B8();
  *(void *)(v3 + 3536) = sub_A5B8();
  *(void *)(v3 + 3544) = sub_A5B8();
  *(void *)(v3 + 355_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_A5B8();
  *(void *)(v3 + 3560) = sub_A5B8();
  *(void *)(v3 + 3568) = sub_A5B8();
  *(void *)(v3 + 3576) = sub_A5B8();
  *(void *)(v3 + 3584) = sub_A5B8();
  *(void *)(v3 + 359_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_A5B8();
  *(void *)(v3 + 3600) = sub_A5B8();
  sub_494C(&qword_18F750);
  *(void *)(v3 + 3608) = sub_A5B8();
  *(void *)(v3 + 3616) = sub_A5B8();
  *(void *)(v3 + 3624) = sub_A5B8();
  *(void *)(v3 + 363_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_A5B8();
  *(void *)(v3 + 3640) = sub_A5B8();
  *(void *)(v3 + 3648) = sub_A5B8();
  *(void *)(v3 + 3656) = sub_A5B8();
  *(void *)(v3 + 3664) = sub_A5B8();
  *(void *)(v3 + 367_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_A5B8();
  *(void *)(v3 + 3680) = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_EBA08()
{
  id v1 = sub_F1BD0(*(void **)(v0 + 3208));
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = sub_F19F0((uint64_t)v1, &qword_18F7A0, &OBJC_CLASS___NSUnitEnergy_ptr);
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

    uint64_t v4 = 0LL;
  }

  else
  {
    uint64_t v4 = 1LL;
  }

  uint64_t v5 = *(void *)(v0 + 3680);
  uint64_t v6 = *(void *)(v0 + 3672);
  uint64_t v7 = sub_494C(&qword_18F758);
  sub_A66C(v6, v4, v8, v7);
  uint64_t v9 = sub_80C98();
  sub_F1394(v9, v10, v11);
  uint64_t v12 = sub_494C(&qword_18F758);
  double v13 = 0.0;
  if (!sub_F1A60(v5))
  {
    sub_F1A6C();
    double v13 = v14;
  }

  unsigned __int8 v15 = *(_BYTE *)(v0 + 585);
  sub_F1270(*(void *)(v0 + 3680), &qword_18F750);
  id v17 = sub_566D0(v16, "appleExerciseTimeGoal");
  double v19 = v18;
  sub_566D0((uint64_t)v17, "appleStandHoursGoal");
  if ((sub_EF574(v15, v13, v19, v20) & 1) != 0)
  {
    sub_A304(*(void *)(v0 + 3216) + 48LL, v0 + 344);
    *(void *)(v0 + 408) = &type metadata for WellnessCATProvider;
    *(void *)(v0 + 416) = &off_182110;
    uint64_t v21 = sub_20308((uint64_t)&unk_180898, 48LL);
    *(void *)(v0 + 384) = v21;
    sub_F1BE4((uint64_t *)(v0 + 424), v21);
    *(_WORD *)(v0 + 336) = 249;
    *(_BYTE *)(v0 + 584) = 0;
    sub_3BFE4();
    Flow.eraseToAnyFlow()(&type metadata for DataTypePunchoutFlow);
    sub_9BBBC((void *)(v0 + 336));
    uint64_t v356 = *(void *)(v0 + 3600);
    uint64_t v383 = *(void *)(v0 + 3592);
    uint64_t v409 = *(void *)(v0 + 3584);
    uint64_t v434 = *(void *)(v0 + 3576);
    uint64_t v458 = *(void *)(v0 + 3568);
    uint64_t v481 = *(void *)(v0 + 3560);
    uint64_t v503 = *(void *)(v0 + 3552);
    uint64_t v524 = *(void *)(v0 + 3544);
    uint64_t v544 = *(void *)(v0 + 3536);
    uint64_t v563 = *(void *)(v0 + 3528);
    uint64_t v581 = *(void *)(v0 + 3520);
    uint64_t v598 = *(void *)(v0 + 3512);
    uint64_t v614 = *(void *)(v0 + 3504);
    uint64_t v629 = *(void *)(v0 + 3480);
    uint64_t v643 = *(void *)(v0 + 3472);
    uint64_t v656 = *(void *)(v0 + 3448);
    uint64_t v668 = *(void *)(v0 + 3440);
    uint64_t v679 = *(void *)(v0 + 3416);
    uint64_t v689 = *(void *)(v0 + 3408);
    uint64_t v698 = *(void *)(v0 + 3400);
    uint64_t v706 = *(void *)(v0 + 3392);
    uint64_t v713 = *(void *)(v0 + 3384);
    uint64_t v719 = *(void *)(v0 + 3376);
    uint64_t v724 = *(void *)(v0 + 3368);
    uint64_t v728 = *(void *)(v0 + 3360);
    uint64_t v731 = *(void *)(v0 + 3352);
    uint64_t v733 = *(void *)(v0 + 3344);
    sub_F1C48(*(void *)(v0 + 3680));
    sub_A85C();
    sub_A8F4();
    sub_A78C();
    sub_A864();
    sub_A910();
    sub_A8EC();
    sub_A760();
    sub_A7C8();
    uint64_t v22 = sub_A67C();
    uint64_t v30 = sub_A970(v22, v23, v24, v25, v26, v27, v28, v29, v356);
    uint64_t v38 = sub_AAD8(v30, v31, v32, v33, v34, v35, v36, v37, v357, v383);
    uint64_t v46 = sub_A888(v38, v39, v40, v41, v42, v43, v44, v45, v358, v384, v409);
    uint64_t v54 = sub_A854(v46, v47, v48, v49, v50, v51, v52, v53, v359, v385, v410, v434);
    uint64_t v62 = sub_A84C(v54, v55, v56, v57, v58, v59, v60, v61, v360, v386, v411, v435, v458);
    uint64_t v70 = sub_A844(v62, v63, v64, v65, v66, v67, v68, v69, v361, v387, v412, v436, v459, v481);
    uint64_t v78 = sub_A83C(v70, v71, v72, v73, v74, v75, v76, v77, v362, v388, v413, v437, v460, v482, v503);
    uint64_t v86 = sub_A95C(v78, v79, v80, v81, v82, v83, v84, v85, v363, v389, v414, v438, v461, v483, v504, v524);
    uint64_t v94 = sub_A954(v86, v87, v88, v89, v90, v91, v92, v93, v364, v390, v415, v439, v462, v484, v505, v525, v544);
    uint64_t v102 = sub_A938( v94,  v95,  v96,  v97,  v98,  v99,  v100,  v101,  v365,  v391,  v416,  v440,  v463,  v485,  v506,  v526,  v545,  v563);
    uint64_t v110 = sub_A930( v102,  v103,  v104,  v105,  v106,  v107,  v108,  v109,  v366,  v392,  v417,  v441,  v464,  v486,  v507,  v527,  v546,  v564,  v581);
    uint64_t v118 = sub_A928( v110,  v111,  v112,  v113,  v114,  v115,  v116,  v117,  v367,  v393,  v418,  v442,  v465,  v487,  v508,  v528,  v547,  v565,  v582,  v598);
    uint64_t v126 = sub_A920( v118,  v119,  v120,  v121,  v122,  v123,  v124,  v125,  v368,  v394,  v419,  v443,  v466,  v488,  v509,  v529,  v548,  v566,  v583,  v599,  v614);
    uint64_t v134 = sub_36374( v126,  v127,  v128,  v129,  v130,  v131,  v132,  v133,  v369,  v395,  v420,  v444,  v467,  v489,  v510,  v530,  v549,  v567,  v584,  v600,  v615,  v629);
    uint64_t v142 = sub_3636C( v134,  v135,  v136,  v137,  v138,  v139,  v140,  v141,  v370,  v396,  v421,  v445,  v468,  v490,  v511,  v531,  v550,  v568,  v585,  v601,  v616,  v630,  v643);
    uint64_t v150 = sub_36364( v142,  v143,  v144,  v145,  v146,  v147,  v148,  v149,  v371,  v397,  v422,  v446,  v469,  v491,  v512,  v532,  v551,  v569,  v586,  v602,  v617,  v631,  v644,  v656);
    uint64_t v158 = sub_363F0( v150,  v151,  v152,  v153,  v154,  v155,  v156,  v157,  v372,  v398,  v423,  v447,  v470,  v492,  v513,  v533,  v552,  v570,  v587,  v603,  v618,  v632,  v645,  v657,  v668);
    uint64_t v166 = sub_36430( v158,  v159,  v160,  v161,  v162,  v163,  v164,  v165,  v373,  v399,  v424,  v448,  v471,  v493,  v514,  v534,  v553,  v571,  v588,  v604,  v619,  v633,  v646,  v658,  v669,  v679);
    uint64_t v174 = sub_36428( v166,  v167,  v168,  v169,  v170,  v171,  v172,  v173,  v374,  v400,  v425,  v449,  v472,  v494,  v515,  v535,  v554,  v572,  v589,  v605,  v620,  v634,  v647,  v659,  v670,  v680,  v689);
    uint64_t v182 = sub_36478( v174,  v175,  v176,  v177,  v178,  v179,  v180,  v181,  v375,  v401,  v426,  v450,  v473,  v495,  v516,  v536,  v555,  v573,  v590,  v606,  v621,  v635,  v648,  v660,  v671,  v681,  v690,  v698);
    uint64_t v190 = sub_36524( v182,  v183,  v184,  v185,  v186,  v187,  v188,  v189,  v376,  v402,  v427,  v451,  v474,  v496,  v517,  v537,  v556,  v574,  v591,  v607,  v622,  v636,  v649,  v661,  v672,  v682,  v691,  v699,  v706);
    uint64_t v198 = sub_3651C( v190,  v191,  v192,  v193,  v194,  v195,  v196,  v197,  v377,  v403,  v428,  v452,  v475,  v497,  v518,  v538,  v557,  v575,  v592,  v608,  v623,  v637,  v650,  v662,  v673,  v683,  v692,  v700,  v707,  v713);
    uint64_t v206 = sub_36514( v198,  v199,  v200,  v201,  v202,  v203,  v204,  v205,  v378,  v404,  v429,  v453,  v476,  v498,  v519,  v539,  v558,  v576,  v593,  v609,  v624,  v638,  v651,  v663,  v674,  v684,  v693,  v701,  v708,  v714,  v719);
    uint64_t v214 = sub_3650C( v206,  v207,  v208,  v209,  v210,  v211,  v212,  v213,  v379,  v405,  v430,  v454,  v477,  v499,  v520,  v540,  v559,  v577,  v594,  v610,  v625,  v639,  v652,  v664,  v675,  v685,  v694,  v702,  v709,  v715,  v720,  v724);
    uint64_t v222 = sub_36504( v214,  v215,  v216,  v217,  v218,  v219,  v220,  v221,  v380,  v406,  v431,  v455,  v478,  v500,  v521,  v541,  v560,  v578,  v595,  v611,  v626,  v640,  v653,  v665,  v676,  v686,  v695,  v703,  v710,  v716,  v721,  v725,  v728);
    uint64_t v230 = sub_364FC( v222,  v223,  v224,  v225,  v226,  v227,  v228,  v229,  v381,  v407,  v432,  v456,  v479,  v501,  v522,  v542,  v561,  v579,  v596,  v612,  v627,  v641,  v654,  v666,  v677,  v687,  v696,  v704,  v711,  v717,  v722,  v726,  v729,  v731);
    sub_364F4( v230,  v231,  v232,  v233,  v234,  v235,  v236,  v237,  v382,  v408,  v433,  v457,  v480,  v502,  v523,  v543,  v562,  v580,  v597,  v613,  v628,  v642,  v655,  v667,  v678,  v688,  v697,  v705,  v712,  v718,  v723,  v727,  v730,  v732,  v733);
    sub_3660C();
    sub_36604();
    sub_365FC();
    sub_365F4();
    sub_365EC();
    sub_365E4();
    sub_365DC();
    sub_366B8();
    sub_366B0();
    sub_F189C();
    __asm { BR              X1 }
  }

  uint64_t v239 = *(void **)(v0 + 3208);
  *(void *)(v0 + 3096) = 0LL;
  *(_BYTE *)(v0 + 3104) = 1;
  *(void *)(v0 + 311_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0LL;
  *(_BYTE *)(v0 + 3120) = 1;
  id v240 = [v239 isWheelchairUser];
  if (v240)
  {
    uint64_t v241 = v240;
    unsigned __int8 v242 = [v240 BOOLValue];
  }

  else
  {
    unsigned __int8 v242 = 0;
  }

  *(_BYTE *)(v0 + 586) = v242;
  int v243 = *(unsigned __int8 *)(v0 + 585);
  uint64_t v244 = sub_F1210(*(void **)(v0 + 3208));
  uint64_t v245 = v244;
  uint64_t v247 = v246;
  *(void *)(v0 + 3688) = v244;
  *(void *)(v0 + 3696) = v246;
  if (v243)
  {
    uint64_t v248 = (BOOL *)(v0 + 3104);
    if (v243 == 91)
    {
      id v263 = [*(id *)(v0 + 3208) activeEnergyBurned];
      if (v263)
      {
        uint64_t v264 = v263;
        uint64_t v265 = sub_F19F0((uint64_t)v263, &qword_18F7A0, &OBJC_CLASS___NSUnitEnergy_ptr);
        sub_F19D0(v265);

        uint64_t v266 = 0LL;
      }

      else
      {
        uint64_t v266 = 1LL;
      }

      uint64_t v270 = *(void *)(v0 + 3664);
      uint64_t v271 = sub_9A688(*(void *)(v0 + 3656), v266);
      sub_F1A74(v271, v272, &qword_18F750);
      uint64_t v273 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v270, 1LL, v12);
      int v274 = v273;
      if ((_DWORD)v273)
      {
        sub_F195C(v273, &qword_18F750);
        double v275 = 0.0;
      }

      else
      {
        uint64_t v276 = sub_F1A6C();
        sub_F195C(v276, &qword_18F750);
        double v275 = sub_F1AA0();
      }

      uint64_t v277 = *(void **)(v0 + 3208);
      *(double *)(v0 + 3096) = v275;
      *uint64_t v248 = v274 != 0;
      id v278 = sub_F1BD0(v277);
      if (v278)
      {
        uint64_t v279 = v278;
        uint64_t v280 = sub_F19F0((uint64_t)v278, &qword_18F7A0, &OBJC_CLASS___NSUnitEnergy_ptr);
        sub_F19D0(v280);

        uint64_t v281 = 0LL;
      }

      else
      {
        uint64_t v281 = 1LL;
      }

      uint64_t v282 = *(void *)(v0 + 3648);
      uint64_t v283 = sub_9A688(*(void *)(v0 + 3640), v281);
      sub_F1A74(v283, v284, &qword_18F750);
      uint64_t v285 = sub_F1A60(v282);
      BOOL v269 = (_DWORD)v285 != 0;
      if ((_DWORD)v285)
      {
        sub_F195C(v285, &qword_18F750);
        double v286 = 0.0;
      }

      else
      {
        uint64_t v287 = sub_F1A6C();
        sub_F195C(v287, &qword_18F750);
        double v286 = sub_F1AA0();
      }

      *(double *)(v0 + 311_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v286;
    }

    else
    {
      if (v243 == 90)
      {
        sub_566D0(v244, "appleExerciseTime");
        *(double *)(v0 + 3096) = sub_90668(v245, (uint64_t)v247, 0x5Au, v267);
        *uint64_t v248 = 0;
        sub_566D0(v268, "appleExerciseTimeGoal");
        uint64_t v252 = v245;
        uint64_t v253 = (uint64_t)v247;
        unsigned __int8 v254 = 90;
      }

      else
      {
        if (v243 != 4)
        {
LABEL_34:
          uint64_t v288 = *(os_log_s **)(v0 + 3568);
          uint64_t v289 = *(void *)(v0 + 3496);
          uint64_t v290 = *(void *)(v0 + 3488);
          uint64_t v291 = Logger.wellness.unsafeMutableAddressor(v244);
          *(void *)(v0 + 3840) = v291;
          sub_A5DC(v291, v0 + 2960);
          uint64_t v292 = *(uint64_t (**)(os_log_s *, uint64_t, uint64_t))(v289 + 16);
          *(void *)(v0 + 3848) = v292;
          uint64_t v293 = v292(v288, v291, v290);
          uint64_t v294 = v288;
          Logger.logObject.getter(v293);
          os_log_type_t v295 = sub_AB70();
          if (os_log_type_enabled(v294, v295))
          {
            uint64_t v296 = (uint8_t *)sub_232D0();
            *(_WORD *)uint64_t v296 = 0;
            sub_232EC(&dword_0, v294, v295, "Creating pattern result for single ring query.", v296);
            sub_5050((uint64_t)v296);
          }

          uint64_t v297 = *(void *)(v0 + 3496);

          uint64_t v298 = *(void (**)(uint64_t))(v297 + 8);
          *(void *)(v0 + 3856) = v298;
          uint64_t v299 = sub_A6264();
          v298(v299);
          *(void *)(v0 + 243_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = &type metadata for WellnessFeatureFlagsKey;
          *(void *)(v0 + 2440) = sub_354B0();
          *(_BYTE *)(v0 + 2408) = 4;
          char v300 = isFeatureEnabled(_:)(v0 + 2408);
          sub_F1BF8();
          if ((v300 & 1) == 0)
          {
            sub_500C((void *)(*(void *)(v0 + 3216) + 208LL), *(void *)(*(void *)(v0 + 3216) + 232LL));
            uint64_t v314 = unk_18CAF4;
            uint64_t v734 = (char *)&dword_18CAF0 + dword_18CAF0;
            swift_bridgeObjectRetain(v247);
            uint64_t v315 = (void *)swift_task_alloc(v314);
            *(void *)(v0 + 3864) = v315;
            *uint64_t v315 = v0;
            v315[1] = sub_ED71C;
            __asm { BR              X8 }
          }

          uint64_t v301 = *(os_log_s **)(v0 + 3560);
          uint64_t v302 = *(void *)(v0 + 3488);
          sub_A5DC(v291, v0 + 2912);
          uint64_t v303 = v292(v301, v291, v302);
          Logger.logObject.getter(v303);
          os_log_type_t v304 = sub_AB70();
          if (sub_232DC(v304))
          {
            uint64_t v305 = (_WORD *)sub_232D0();
            sub_36A44(v305);
            sub_232EC( &dword_0,  v301,  (os_log_type_t)v302,  "#GetActivitySummaryFlow: Creating smart result for single ring query.",  v247);
            sub_5050((uint64_t)v247);
          }

          uint64_t v306 = *(void *)(v0 + 3416);
          unsigned __int8 v307 = *(_BYTE *)(v0 + 585);

          sub_DEE0C();
          uint64_t v308 = sub_27CC8(v307);
          String.toSpeakableString.getter(v308, v309);
          sub_6D64();
          sub_F19E0(v306);
          uint64_t v310 = (void *)swift_task_alloc(dword_18B0CC);
          *(void *)(v0 + 3880) = v310;
          *uint64_t v310 = v0;
          v310[1] = sub_EDA68;
          sub_EA454(*(void *)(v0 + 3416));
          sub_F189C();
          return sub_3D18C(v311, v312);
        }

        sub_566D0(v244, "appleStandHours");
        *(double *)(v0 + 3096) = sub_90668(v245, (uint64_t)v247, 4u, v249);
        *uint64_t v248 = 0;
        sub_566D0(v250, "appleStandHoursGoal");
        uint64_t v252 = v245;
        uint64_t v253 = (uint64_t)v247;
        unsigned __int8 v254 = 4;
      }

      BOOL v269 = 0;
      *(double *)(v0 + 311_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_90668(v252, v253, v254, v251);
    }

    *(_BYTE *)(v0 + 3120) = v269;
    goto LABEL_34;
  }

  uint64_t v255 = *(void **)(v0 + 3208);
  sub_566D0(v244, "appleExerciseTime");
  *(double *)(v0 + 3704) = sub_F18C4(v256);
  sub_566D0(v257, "appleExerciseTimeGoal");
  *(double *)(v0 + 371_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_F18C4(v258);
  id v259 = [v255 activeEnergyBurned];
  if (v259)
  {
    uint64_t v260 = v259;
    uint64_t v261 = sub_F19F0((uint64_t)v259, &qword_18F7A0, &OBJC_CLASS___NSUnitEnergy_ptr);
    sub_F19D0(v261);

    uint64_t v262 = 0LL;
  }

  else
  {
    uint64_t v262 = 1LL;
  }

  uint64_t v316 = *(void *)(v0 + 3632);
  uint64_t v317 = sub_9A688(*(void *)(v0 + 3624), v262);
  sub_F1A74(v317, v318, &qword_18F750);
  uint64_t v319 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v316, 1LL, v12);
  int v320 = v319;
  if ((_DWORD)v319)
  {
    sub_F195C(v319, &qword_18F750);
    double v321 = 0.0;
  }

  else
  {
    uint64_t v322 = sub_F1A6C();
    double v324 = v323;
    sub_F195C(v322, &qword_18F750);
    double v321 = sub_90668(v245, (uint64_t)v247, 0, v324);
  }

  *(double *)(v0 + 3720) = v321;
  id v325 = sub_F1BD0(*(void **)(v0 + 3208));
  if (v325)
  {
    uint64_t v326 = v325;
    uint64_t v327 = sub_F19F0((uint64_t)v325, &qword_18F7A0, &OBJC_CLASS___NSUnitEnergy_ptr);
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)(v326, v327);

    uint64_t v328 = 0LL;
  }

  else
  {
    uint64_t v328 = 1LL;
  }

  uint64_t v329 = *(void *)(v0 + 3616);
  uint64_t v330 = *(void *)(v0 + 3608);
  sub_9A688(v330, v328);
  sub_F1394(v330, v329, &qword_18F750);
  uint64_t v331 = sub_F1A60(v329);
  int v332 = v331;
  if ((_DWORD)v331)
  {
    sub_F195C(v331, &qword_18F750);
    double v334 = 0.0;
  }

  else
  {
    uint64_t v335 = sub_F1A6C();
    double v337 = v336;
    sub_F195C(v335, &qword_18F750);
    double v334 = sub_90668(v245, (uint64_t)v247, 0, v337);
  }

  *(double *)(v0 + 3728) = v334;
  sub_566D0(v333, "appleStandHours");
  *(double *)(v0 + 3736) = sub_F18C4(v338);
  sub_566D0(v339, "appleStandHoursGoal");
  *(double *)(v0 + 3744) = sub_F18C4(v340);
  if (v332 | v320) {
    goto LABEL_34;
  }
  uint64_t v341 = *(void *)(v0 + 3600);
  uint64_t v342 = *(void *)(v0 + 3496);
  uint64_t v343 = *(uint8_t **)(v0 + 3488);
  uint64_t v344 = Logger.wellness.unsafeMutableAddressor(v244);
  *(void *)(v0 + 375_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v344;
  sub_A5DC(v344, v0 + 2864);
  uint64_t v345 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v342 + 16);
  *(void *)(v0 + 3760) = v345;
  sub_464D8(v345);
  sub_A86C();
  os_log_type_t v346 = sub_AB70();
  if (sub_232DC(v346))
  {
    uint64_t v347 = (_WORD *)sub_232D0();
    sub_36A44(v347);
    sub_232EC( &dword_0,  (os_log_s *)(v0 + 2864),  (os_log_type_t)v341,  "Creating output result for multiple ring query.",  v343);
    sub_5050((uint64_t)v343);
  }

  uint64_t v348 = *(void *)(v0 + 3496);

  *(void *)(v0 + 3768) = *(void *)(v348 + 8);
  uint64_t v349 = sub_23340();
  v350(v349);
  uint64_t v351 = (void *)swift_task_alloc(dword_18DC24);
  *(void *)(v0 + 3776) = v351;
  *uint64_t v351 = v0;
  v351[1] = sub_EC57C;
  sub_F189C();
  return sub_9F224(v352, v353, v354, v355);
}

uint64_t sub_EC57C()
{
  *(void *)(v0 + 3784) = v2;
  sub_36900(v3);
  if (v1)
  {
    swift_bridgeObjectRelease();
    sub_36860();
  }

  sub_A964();
  return sub_D954();
}

#error "EC98C: call analysis failed (funcsize=268)"
uint64_t sub_ECA2C()
{
  uint64_t v0;
  sub_AA10();
  sub_20264(*(void *)(v0 + 3792));
  sub_249D4();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_ECA74()
{
  uint64_t v1 = *(void **)(v0 + 2064);
  if (!v1)
  {
    uint64_t v36 = *(void **)(v0 + 3752);
    uint64_t v37 = *(void *)(v0 + 3488);
    sub_A5DC((uint64_t)v36, v0 + 3056);
    sub_36170();
    sub_23374();
    os_log_type_t v38 = sub_AB70();
    if (sub_A988(v38))
    {
      uint64_t v39 = (_WORD *)sub_232D0();
      sub_366C0(v39);
      sub_A940(&dword_0, v40, v41, "Call to getLabels() returned nil, returning GenericErrorFlow");
      sub_5050(v37);
    }

    uint64_t v42 = *(void **)(v0 + 3784);
    uint64_t v43 = *(void (**)(uint64_t))(v0 + 3768);
    uint64_t v624 = *(void *)(v0 + 3480);
    uint64_t v44 = *(void *)(v0 + 3464);
    uint64_t v45 = *(void *)(v0 + 3456);
    uint64_t v46 = *(void *)(v0 + 3216);

    uint64_t v47 = sub_23340();
    v43(v47);
    sub_36590((_OWORD *)(v46 + 88));
    sub_A178();
    sub_B25C0();

    sub_36784();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v624, v45);
    uint64_t v358 = *(void *)(v0 + 3600);
    uint64_t v380 = *(void *)(v0 + 3592);
    uint64_t v401 = *(void *)(v0 + 3584);
    uint64_t v421 = *(void *)(v0 + 3576);
    uint64_t v440 = *(void *)(v0 + 3568);
    uint64_t v458 = *(void *)(v0 + 3560);
    uint64_t v475 = *(void *)(v0 + 3552);
    uint64_t v491 = *(void *)(v0 + 3544);
    uint64_t v506 = *(void *)(v0 + 3536);
    uint64_t v520 = *(void *)(v0 + 3528);
    uint64_t v533 = *(void *)(v0 + 3520);
    uint64_t v545 = *(void *)(v0 + 3512);
    uint64_t v556 = *(void *)(v0 + 3504);
    uint64_t v566 = *(void *)(v0 + 3480);
    uint64_t v575 = *(void *)(v0 + 3472);
    uint64_t v583 = *(void *)(v0 + 3448);
    uint64_t v590 = *(void *)(v0 + 3440);
    uint64_t v596 = *(void *)(v0 + 3416);
    uint64_t v601 = *(void *)(v0 + 3408);
    uint64_t v605 = *(void *)(v0 + 3400);
    uint64_t v608 = *(void *)(v0 + 3392);
    uint64_t v610 = *(void *)(v0 + 3384);
    uint64_t v611 = *(void *)(v0 + 3376);
    uint64_t v612 = *(void *)(v0 + 3368);
    uint64_t v613 = *(void *)(v0 + 3360);
    uint64_t v614 = *(void *)(v0 + 3352);
    uint64_t v615 = *(void *)(v0 + 3344);
    uint64_t v616 = *(void *)(v0 + 3336);
    uint64_t v618 = *(void *)(v0 + 3312);
    swift_task_dealloc(*(void *)(v0 + 3680));
    sub_A85C();
    sub_A8F4();
    sub_A78C();
    sub_A864();
    sub_A910();
    sub_A8EC();
    sub_A760();
    sub_A7C8();
    uint64_t v48 = sub_A67C();
    uint64_t v56 = sub_A83C( v48,  v49,  v50,  v51,  v52,  v53,  v54,  v55,  standLabel,  standLabel_8,  standUnitLabel,  standUnitLabel_8,  isSmartEnabled,  v336,  v358);
    uint64_t v64 = sub_A95C( v56,  v57,  v58,  v59,  v60,  v61,  v62,  v63,  standLabela,  standLabel_8a,  standUnitLabelb,  standUnitLabel_8a,  isSmartEnableda,  v337,  v359,  v380);
    uint64_t v72 = sub_A954( v64,  v65,  v66,  v67,  v68,  v69,  v70,  v71,  standLabelb,  standLabel_8b,  standUnitLabelc,  standUnitLabel_8b,  isSmartEnabledb,  v338,  v360,  v381,  v401);
    uint64_t v80 = sub_A938( v72,  v73,  v74,  v75,  v76,  v77,  v78,  v79,  standLabelc,  standLabel_8c,  standUnitLabeld,  standUnitLabel_8c,  isSmartEnabledc,  v339,  v361,  v382,  v402,  v421);
    uint64_t v88 = sub_A930( v80,  v81,  v82,  v83,  v84,  v85,  v86,  v87,  standLabeld,  standLabel_8d,  standUnitLabele,  standUnitLabel_8d,  isSmartEnabledd,  v340,  v362,  v383,  v403,  v422,  v440);
    uint64_t v96 = sub_A928( v88,  v89,  v90,  v91,  v92,  v93,  v94,  v95,  standLabele,  standLabel_8e,  standUnitLabelf,  standUnitLabel_8e,  isSmartEnablede,  v341,  v363,  v384,  v404,  v423,  v441,  v458);
    uint64_t v104 = sub_A920( v96,  v97,  v98,  v99,  v100,  v101,  v102,  v103,  standLabelf,  standLabel_8f,  standUnitLabelg,  standUnitLabel_8f,  isSmartEnabledf,  v342,  v364,  v385,  v405,  v424,  v442,  v459,  v475);
    uint64_t v112 = sub_36374( v104,  v105,  v106,  v107,  v108,  v109,  v110,  v111,  standLabelg,  standLabel_8g,  standUnitLabelh,  standUnitLabel_8g,  isSmartEnabledg,  v343,  v365,  v386,  v406,  v425,  v443,  v460,  v476,  v491);
    uint64_t v120 = sub_3636C( v112,  v113,  v114,  v115,  v116,  v117,  v118,  v119,  standLabelh,  standLabel_8h,  standUnitLabeli,  standUnitLabel_8h,  isSmartEnabledh,  v344,  v366,  v387,  v407,  v426,  v444,  v461,  v477,  v492,  v506);
    uint64_t v128 = sub_36364( v120,  v121,  v122,  v123,  v124,  v125,  v126,  v127,  standLabeli,  standLabel_8i,  standUnitLabelj,  standUnitLabel_8i,  isSmartEnabledi,  v345,  v367,  v388,  v408,  v427,  v445,  v462,  v478,  v493,  v507,  v520);
    uint64_t v136 = sub_363F0( v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  standLabelj,  standLabel_8j,  standUnitLabelk,  standUnitLabel_8j,  isSmartEnabledj,  v346,  v368,  v389,  v409,  v428,  v446,  v463,  v479,  v494,  v508,  v521,  v533);
    uint64_t v144 = sub_36430( v136,  v137,  v138,  v139,  v140,  v141,  v142,  v143,  standLabelk,  standLabel_8k,  standUnitLabell,  standUnitLabel_8k,  isSmartEnabledk,  v347,  v369,  v390,  v410,  v429,  v447,  v464,  v480,  v495,  v509,  v522,  v534,  v545);
    uint64_t v152 = sub_36428( v144,  v145,  v146,  v147,  v148,  v149,  v150,  v151,  standLabell,  standLabel_8l,  standUnitLabelm,  standUnitLabel_8l,  isSmartEnabledl,  v348,  v370,  v391,  v411,  v430,  v448,  v465,  v481,  v496,  v510,  v523,  v535,  v546,  v556);
    uint64_t v160 = sub_36478( v152,  v153,  v154,  v155,  v156,  v157,  v158,  v159,  standLabelm,  standLabel_8m,  standUnitLabeln,  standUnitLabel_8m,  isSmartEnabledm,  v349,  v371,  v392,  v412,  v431,  v449,  v466,  v482,  v497,  v511,  v524,  v536,  v547,  v557,  v566);
    uint64_t v168 = sub_36524( v160,  v161,  v162,  v163,  v164,  v165,  v166,  v167,  standLabeln,  standLabel_8n,  standUnitLabelo,  standUnitLabel_8n,  isSmartEnabledn,  v350,  v372,  v393,  v413,  v432,  v450,  v467,  v483,  v498,  v512,  v525,  v537,  v548,  v558,  v567,  v575);
    uint64_t v176 = sub_3651C( v168,  v169,  v170,  v171,  v172,  v173,  v174,  v175,  standLabelo,  standLabel_8o,  standUnitLabelp,  standUnitLabel_8o,  isSmartEnabledo,  v351,  v373,  v394,  v414,  v433,  v451,  v468,  v484,  v499,  v513,  v526,  v538,  v549,  v559,  v568,  v576,  v583);
    uint64_t v184 = sub_36514( v176,  v177,  v178,  v179,  v180,  v181,  v182,  v183,  standLabelp,  standLabel_8p,  standUnitLabelq,  standUnitLabel_8p,  isSmartEnabledp,  v352,  v374,  v395,  v415,  v434,  v452,  v469,  v485,  v500,  v514,  v527,  v539,  v550,  v560,  v569,  v577,  v584,  v590);
    uint64_t v192 = sub_3650C( v184,  v185,  v186,  v187,  v188,  v189,  v190,  v191,  standLabelq,  standLabel_8q,  standUnitLabelr,  standUnitLabel_8q,  isSmartEnabledq,  v353,  v375,  v396,  v416,  v435,  v453,  v470,  v486,  v501,  v515,  v528,  v540,  v551,  v561,  v570,  v578,  v585,  v591,  v596);
    uint64_t v200 = sub_36504( v192,  v193,  v194,  v195,  v196,  v197,  v198,  v199,  standLabelr,  standLabel_8r,  standUnitLabels,  standUnitLabel_8r,  isSmartEnabledr,  v354,  v376,  v397,  v417,  v436,  v454,  v471,  v487,  v502,  v516,  v529,  v541,  v552,  v562,  v571,  v579,  v586,  v592,  v597,  v601);
    uint64_t v208 = sub_364FC( v200,  v201,  v202,  v203,  v204,  v205,  v206,  v207,  standLabels,  standLabel_8s,  standUnitLabelt,  standUnitLabel_8s,  isSmartEnableds,  v355,  v377,  v398,  v418,  v437,  v455,  v472,  v488,  v503,  v517,  v530,  v542,  v553,  v563,  v572,  v580,  v587,  v593,  v598,  v602,  v605);
    uint64_t v216 = sub_364F4( v208,  v209,  v210,  v211,  v212,  v213,  v214,  v215,  standLabelt,  standLabel_8t,  standUnitLabelu,  standUnitLabel_8t,  isSmartEnabledt,  v356,  v378,  v399,  v419,  v438,  v456,  v473,  v489,  v504,  v518,  v531,  v543,  v554,  v564,  v573,  v581,  v588,  v594,  v599,  v603,  v606,  v608);
    sub_364EC( v216,  v217,  v218,  v219,  v220,  v221,  v222,  v223,  standLabelu,  standLabel_8u,  standUnitLabelv,  standUnitLabel_8u,  isSmartEnabledu,  v357,  v379,  v400,  v420,  v439,  v457,  v474,  v490,  v505,  v519,  v532,  v544,  v555,  v565,  v574,  v582,  v589,  v595,  v600,  v604,  v607,  v609,  v610);
    swift_task_dealloc(v611);
    swift_task_dealloc(v612);
    swift_task_dealloc(v613);
    swift_task_dealloc(v614);
    swift_task_dealloc(v615);
    swift_task_dealloc(v616);
    swift_task_dealloc(v618);
    sub_3660C();
    sub_36604();
    sub_365FC();
    sub_365F4();
    sub_365EC();
    sub_365E4();
    sub_365DC();
    sub_F1AC8();
    __asm { BR              X1 }
  }

  uint64_t v623 = *(void **)(v0 + 3784);
  Swift::Double v2 = *(double *)(v0 + 3744);
  Swift::Double v3 = *(double *)(v0 + 3736);
  Swift::Double v4 = *(double *)(v0 + 3728);
  Swift::Double v5 = *(double *)(v0 + 3720);
  Swift::Double v6 = *(double *)(v0 + 3712);
  Swift::Double v7 = *(double *)(v0 + 3704);
  uint64_t v8 = *(void *)(v0 + 3216);
  uint64_t v9 = *(void *)(v0 + 2056);
  uint64_t v10 = *(void **)(v0 + 2080);
  uint64_t v11 = *(void *)(v0 + 2088);
  uint64_t v621 = *(void **)(v0 + 2096);
  uint64_t v622 = *(void *)(v0 + 2072);
  uint64_t v619 = *(void **)(v0 + 2112);
  uint64_t v620 = *(void *)(v0 + 2104);
  Swift::String v617 = *(Swift::String *)(v0 + 2120);
  uint64_t v12 = *(void *)(v0 + 2136);
  double v13 = *(void **)(v0 + 2144);
  *(void *)(v0 + 239_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = &type metadata for WellnessFeatureFlagsKey;
  *(void *)(v0 + 2400) = sub_354B0();
  *(_BYTE *)(v0 + 2368) = 4;
  char v14 = isFeatureEnabled(_:)(v0 + 2368);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 2368));
  standUnitLabela._countAndFlagsBits = v12;
  standUnitLabela._object = v13;
  v15._countAndFlagsBits = v622;
  v16._countAndFlagsBits = v9;
  v16._object = v1;
  v15._object = v10;
  v17._countAndFlagsBits = v11;
  v18._countAndFlagsBits = v620;
  v17._object = v621;
  v18._object = v619;
  PhoneRingsModel.init(exerciseGoalValue:exerciseTotalValue:moveGoalValue:moveTotalValue:standGoalValue:standTotalValue:exerciseLabel:exerciseUnitLabel:moveLabel:moveUnitLabel:standLabel:standUnitLabel:isSmartEnabled:)( (WellnessFlowPlugin::PhoneRingsModel *)(v0 + 848),  v6,  v7,  v4,  v5,  v2,  v3,  v16,  v15,  v17,  v18,  v617,  standUnitLabela,  v14 & 1);
  sub_500C((void *)(v8 + 256), *(void *)(v8 + 280));
  uint64_t v19 = type metadata accessor for WellnessSnippets(0LL);
  *(void *)(v0 + 231_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v19;
  sub_A410( (unint64_t *)&qword_18A468,  type metadata accessor for WellnessSnippets,  (uint64_t)&protocol conformance descriptor for WellnessSnippets);
  *(void *)(v0 + 2320) = v20;
  uint64_t v21 = sub_B76C((void *)(v0 + 2288));
  memcpy(v21, (const void *)(v0 + 848), 0xF1uLL);
  swift_storeEnumTagMultiPayload(v21, v19, 10LL);
  uint64_t v22 = sub_494C(&qword_18A460);
  uint64_t v23 = sub_20308(v22, 40LL);
  *(_OWORD *)(v23 + 16) = xmmword_138BA0;
  *(void *)(v23 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v623;
  uint64_t v625 = v23;
  specialized Array._endMutation()(v23, v24, v25);
  *(void *)(v0 + 3800) = v625;
  uint64_t v26 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)[1];
  id v27 = v623;
  uint64_t v28 = (void *)swift_task_alloc(v26);
  *(void *)(v0 + 3808) = v28;
  *uint64_t v28 = v0;
  v28[1] = sub_ECF7C;
  sub_F1AC8();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)( v29,  v30,  v31,  v32,  v33,  v34);
}

uint64_t sub_ECF7C()
{
  uint64_t v1 = (void *)(v0 + 2288);
  sub_20264(*(void *)(v0 + 3808));
  sub_2A184();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
  sub_A964();
  return sub_D954();
}

#error "ED0A4: call analysis failed (funcsize=93)"
uint64_t sub_ED144()
{
  uint64_t v0;
  sub_AA10();
  sub_20264(*(void *)(v0 + 3832));
  sub_249D4();
  sub_A964();
  return sub_A5D0();
}

#error "ED50C: call analysis failed (funcsize=261)"
#error "ED680: call analysis failed (funcsize=89)"
uint64_t sub_ED71C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  sub_56884();
  sub_56254(*(void *)(v2 + 3864), v3);
  if (v1)
  {
    sub_36860();
    sub_6D64();
  }

  else
  {
    sub_6D64();
    *(void *)(v2 + 387_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0;
  }

  sub_A964();
  return sub_D954();
}

#error "ED8C8: call analysis failed (funcsize=119)"
#error "ED9CC: call analysis failed (funcsize=64)"
uint64_t sub_EDA68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  sub_56884();
  Swift::Double v4 = sub_56254(*(void *)(v2 + 3880), v3);
  if (v1) {
    Swift::Double v4 = sub_36860();
  }
  else {
    *(void *)(v2 + 3888) = v0;
  }
  sub_F1C54(v4, &qword_189D00);
  sub_A964();
  return sub_D954();
}

uint64_t sub_EDAE0()
{
  v0[487] = v0[486];
  uint64_t v2 = sub_F1964();
  sub_F1C5C(v2, v3);
  sub_2A184();
  sub_F19F8();
  if (v1)
  {
    sub_F1A40();
    sub_F1B08();
    sub_2A184();
  }

  sub_F1A2C();
  Swift::Double v4 = (uint64_t **)swift_task_alloc(dword_18B0C4);
  v0[488] = (uint64_t)v4;
  *Swift::Double v4 = v0;
  v4[1] = (uint64_t *)sub_EDB5C;
  uint64_t v5 = sub_EA454(v0[426]);
  return sub_F1928(v5, v6);
}

uint64_t sub_EDB5C(uint64_t a1)
{
  uint64_t v5 = v2[426];
  uint64_t v6 = v2[425];
  if (v1) {
    sub_36860();
  }
  else {
    v2[489] = a1;
  }
  sub_F180C(v6);
  sub_F180C(v5);
  sub_A964();
  return sub_36348(v7, v8, v9);
}

uint64_t sub_EDBF0()
{
  uint64_t v1 = *(void **)(v0 + 3912);
  if (!v1)
  {
    sub_F1C34();
    id v27 = 0LL;
LABEL_36:
    uint64_t v136 = *(void **)(v0 + 3840);
    uint64_t v137 = *(void *)(v0 + 3488);
    sub_A5DC((uint64_t)v136, v0 + 2768);
    sub_36170();
    sub_23374();
    os_log_type_t v138 = sub_A898();
    if (sub_A988(v138))
    {
      uint64_t v139 = (_WORD *)sub_232D0();
      sub_366C0(v139);
      sub_A940(&dword_0, v140, v141, "#GetActivitySummaryFlow: Unable to get the ring unit label");
      sub_5050(v137);
    }

    uint64_t v142 = *(void **)(v0 + 3896);
    uint64_t v143 = *(void (**)(uint64_t))(v0 + 3856);
    uint64_t v144 = *(void *)(v0 + 3216);

    uint64_t v145 = sub_23340();
    v143(v145);
    sub_36590((_OWORD *)(v144 + 88));
    sub_A178();
    uint64_t v725 = sub_B25C0();

    sub_36784();
    uint64_t v354 = *(void *)(v0 + 3600);
    uint64_t v380 = *(void *)(v0 + 3592);
    uint64_t v405 = *(void *)(v0 + 3584);
    uint64_t v429 = *(void *)(v0 + 3576);
    uint64_t v452 = *(void *)(v0 + 3568);
    uint64_t v474 = *(void *)(v0 + 3560);
    uint64_t v495 = *(void *)(v0 + 3552);
    uint64_t v515 = *(void *)(v0 + 3544);
    uint64_t v534 = *(void *)(v0 + 3536);
    uint64_t v552 = *(void *)(v0 + 3528);
    uint64_t v569 = *(void *)(v0 + 3520);
    uint64_t v585 = *(void *)(v0 + 3512);
    uint64_t v600 = *(void *)(v0 + 3504);
    uint64_t v614 = *(void *)(v0 + 3480);
    uint64_t v627 = *(void *)(v0 + 3472);
    uint64_t v639 = *(void *)(v0 + 3448);
    uint64_t v650 = *(void *)(v0 + 3440);
    uint64_t v660 = *(void *)(v0 + 3416);
    uint64_t v669 = *(void *)(v0 + 3408);
    uint64_t v677 = *(void *)(v0 + 3400);
    uint64_t v684 = *(void *)(v0 + 3392);
    uint64_t v690 = *(void *)(v0 + 3384);
    uint64_t v695 = *(void *)(v0 + 3376);
    uint64_t v700 = *(void *)(v0 + 3368);
    uint64_t v704 = *(void *)(v0 + 3360);
    uint64_t v706 = *(void *)(v0 + 3352);
    swift_task_dealloc(*(void *)(v0 + 3680));
    sub_A85C();
    sub_A8F4();
    sub_A78C();
    sub_A864();
    sub_A910();
    sub_A8EC();
    sub_A760();
    sub_A7C8();
    uint64_t v146 = sub_A67C();
    uint64_t v154 = sub_A970(v146, v147, v148, v149, v150, v151, v152, v153, v354);
    uint64_t v162 = sub_AAD8(v154, v155, v156, v157, v158, v159, v160, v161, v355, v380);
    uint64_t v170 = sub_A888(v162, v163, v164, v165, v166, v167, v168, v169, v356, v381, v405);
    uint64_t v178 = sub_A854(v170, v171, v172, v173, v174, v175, v176, v177, v357, v382, v406, v429);
    uint64_t v186 = sub_A84C(v178, v179, v180, v181, v182, v183, v184, v185, v358, v383, v407, v430, v452);
    uint64_t v194 = sub_A844(v186, v187, v188, v189, v190, v191, v192, v193, v359, v384, v408, v431, v453, v474);
    uint64_t v202 = sub_A83C(v194, v195, v196, v197, v198, v199, v200, v201, v360, v385, v409, v432, v454, v475, v495);
    uint64_t v210 = sub_A95C(v202, v203, v204, v205, v206, v207, v208, v209, v361, v386, v410, v433, v455, v476, v496, v515);
    uint64_t v218 = sub_A954( v210,  v211,  v212,  v213,  v214,  v215,  v216,  v217,  v362,  v387,  v411,  v434,  v456,  v477,  v497,  v516,  v534);
    uint64_t v226 = sub_A938( v218,  v219,  v220,  v221,  v222,  v223,  v224,  v225,  v363,  v388,  v412,  v435,  v457,  v478,  v498,  v517,  v535,  v552);
    uint64_t v234 = sub_A930( v226,  v227,  v228,  v229,  v230,  v231,  v232,  v233,  v364,  v389,  v413,  v436,  v458,  v479,  v499,  v518,  v536,  v553,  v569);
    uint64_t v242 = sub_A928( v234,  v235,  v236,  v237,  v238,  v239,  v240,  v241,  v365,  v390,  v414,  v437,  v459,  v480,  v500,  v519,  v537,  v554,  v570,  v585);
    uint64_t v250 = sub_A920( v242,  v243,  v244,  v245,  v246,  v247,  v248,  v249,  v366,  v391,  v415,  v438,  v460,  v481,  v501,  v520,  v538,  v555,  v571,  v586,  v600);
    uint64_t v258 = sub_36374( v250,  v251,  v252,  v253,  v254,  v255,  v256,  v257,  v367,  v392,  v416,  v439,  v461,  v482,  v502,  v521,  v539,  v556,  v572,  v587,  v601,  v614);
    uint64_t v266 = sub_3636C( v258,  v259,  v260,  v261,  v262,  v263,  v264,  v265,  v368,  v393,  v417,  v440,  v462,  v483,  v503,  v522,  v540,  v557,  v573,  v588,  v602,  v615,  v627);
    uint64_t v274 = sub_36364( v266,  v267,  v268,  v269,  v270,  v271,  v272,  v273,  v369,  v394,  v418,  v441,  v463,  v484,  v504,  v523,  v541,  v558,  v574,  v589,  v603,  v616,  v628,  v639);
    uint64_t v282 = sub_363F0( v274,  v275,  v276,  v277,  v278,  v279,  v280,  v281,  v370,  v395,  v419,  v442,  v464,  v485,  v505,  v524,  v542,  v559,  v575,  v590,  v604,  v617,  v629,  v640,  v650);
    uint64_t v290 = sub_36430( v282,  v283,  v284,  v285,  v286,  v287,  v288,  v289,  v371,  v396,  v420,  v443,  v465,  v486,  v506,  v525,  v543,  v560,  v576,  v591,  v605,  v618,  v630,  v641,  v651,  v660);
    uint64_t v298 = sub_36428( v290,  v291,  v292,  v293,  v294,  v295,  v296,  v297,  v372,  v397,  v421,  v444,  v466,  v487,  v507,  v526,  v544,  v561,  v577,  v592,  v606,  v619,  v631,  v642,  v652,  v661,  v669);
    uint64_t v306 = sub_36478( v298,  v299,  v300,  v301,  v302,  v303,  v304,  v305,  v373,  v398,  v422,  v445,  v467,  v488,  v508,  v527,  v545,  v562,  v578,  v593,  v607,  v620,  v632,  v643,  v653,  v662,  v670,  v677);
    uint64_t v314 = sub_36524( v306,  v307,  v308,  v309,  v310,  v311,  v312,  v313,  v374,  v399,  v423,  v446,  v468,  v489,  v509,  v528,  v546,  v563,  v579,  v594,  v608,  v621,  v633,  v644,  v654,  v663,  v671,  v678,  v684);
    uint64_t v322 = sub_3651C( v314,  v315,  v316,  v317,  v318,  v319,  v320,  v321,  v375,  v400,  v424,  v447,  v469,  v490,  v510,  v529,  v547,  v564,  v580,  v595,  v609,  v622,  v634,  v645,  v655,  v664,  v672,  v679,  v685,  v690);
    uint64_t v330 = sub_36514( v322,  v323,  v324,  v325,  v326,  v327,  v328,  v329,  v376,  v401,  v425,  v448,  v470,  v491,  v511,  v530,  v548,  v565,  v581,  v596,  v610,  v623,  v635,  v646,  v656,  v665,  v673,  v680,  v686,  v691,  v695);
    uint64_t v338 = sub_3650C( v330,  v331,  v332,  v333,  v334,  v335,  v336,  v337,  v377,  v402,  v426,  v449,  v471,  v492,  v512,  v531,  v549,  v566,  v582,  v597,  v611,  v624,  v636,  v647,  v657,  v666,  v674,  v681,  v687,  v692,  v696,  v700);
    uint64_t v346 = sub_36504( v338,  v339,  v340,  v341,  v342,  v343,  v344,  v345,  v378,  v403,  v427,  v450,  v472,  v493,  v513,  v532,  v550,  v567,  v583,  v598,  v612,  v625,  v637,  v648,  v658,  v667,  v675,  v682,  v688,  v693,  v697,  v701,  v704);
    sub_364FC( v346,  v347,  v348,  v349,  v350,  v351,  v352,  v353,  v379,  v404,  v428,  v451,  v473,  v494,  v514,  v533,  v551,  v568,  v584,  v599,  v613,  v626,  v638,  v649,  v659,  v668,  v676,  v683,  v689,  v694,  v698,  v702,  v705,  v706);
    sub_36604();
    sub_365FC();
    sub_365F4();
    sub_365EC();
    sub_365E4();
    sub_365DC();
    sub_366B8();
    sub_366B0();
    sub_366A8();
    sub_36814();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v725);
  }

  id v2 = [v1 dialog];
  unint64_t v3 = sub_F19F0((uint64_t)v2, &qword_18B6F0, &OBJC_CLASS___DialogElement_ptr);
  *(void *)(v0 + 3920) = v3;
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if (!((unint64_t)v4 >> 62))
  {
LABEL_30:
    sub_2A184();
    sub_249D4();
    goto LABEL_35;
  }

  if (v4 < 0) {
    uint64_t v130 = v4;
  }
  else {
    uint64_t v130 = v4 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v4);
  uint64_t v131 = _CocoaArrayWrapper.endIndex.getter(v130);
  sub_2A184();
  if (!v131) {
    goto LABEL_30;
  }
LABEL_4:
  sub_398E0(0LL, (v4 & 0xC000000000000001LL) == 0, v4);
  if ((v4 & 0xC000000000000001LL) != 0) {
    id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v4);
  }
  else {
    id v5 = *(id *)(v4 + 32);
  }
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v0 + 3896);
  uint64_t v8 = *(void *)(v0 + 3376);
  uint64_t v9 = *(void *)(v0 + 3368);
  uint64_t v10 = *(void *)(v0 + 3328);
  uint64_t v11 = *(void *)(v0 + 3320);
  sub_2A184();
  id v12 = [v6 fullPrint];

  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  uint64_t v15 = v14;

  String.toSpeakableString.getter(v13, v15);
  sub_DA1C();
  Swift::String v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  v16(v8, v9, v11);
  if (!v7) {
    goto LABEL_34;
  }
  sub_F184C((uint64_t)[*(id *)(v0 + 3896) dialog]);
  sub_5F15C();
  if (v3 >> 62)
  {
    sub_5F098();
    uint64_t v132 = sub_5F138();
    sub_249D4();
    if (v132) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }

  sub_F1A20();
  if (!v12)
  {
LABEL_33:
    sub_249D4();
LABEL_34:
    uint64_t v133 = *(void *)(v0 + 3376);
    uint64_t v134 = *(void *)(v0 + 3328);
    uint64_t v135 = *(void *)(v0 + 3320);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v133, v135);
    goto LABEL_35;
  }

uint64_t sub_EE938(uint64_t a1)
{
  uint64_t v5 = v2[424];
  uint64_t v6 = v2[423];
  if (v1) {
    sub_36860();
  }
  else {
    v2[493] = a1;
  }
  sub_F180C(v6);
  sub_F180C(v5);
  sub_A964();
  return sub_36348(v7, v8, v9);
}

#error "EEDD8: call analysis failed (funcsize=290)"
uint64_t sub_EEE88()
{
  uint64_t v0;
  void *v1;
  sub_AA10();
  uint64_t v1 = (void *)(v0 + 2568);
  sub_20264(*(void *)(v0 + 3960));
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
  sub_A964();
  return sub_A5D0();
}

#error "EEFF8: call analysis failed (funcsize=112)"
uint64_t sub_EF098()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  v0[487] = 0LL;
  id v2 = sub_F1964();
  sub_F1C5C(v2, v3);
  sub_2A184();
  sub_F19F8();
  if (v1)
  {
    sub_F1A40();
    sub_F1B08();
    sub_2A184();
  }

  sub_F1A2C();
  uint64_t v4 = (uint64_t **)swift_task_alloc(dword_18B0C4);
  v0[488] = (uint64_t)v4;
  *uint64_t v4 = v0;
  v4[1] = (uint64_t *)sub_EDB5C;
  uint64_t v5 = sub_EA454(v0[426]);
  return sub_F1928(v5, v6);
}

#error "EF200: call analysis failed (funcsize=96)"
#error "EF4D4: call analysis failed (funcsize=174)"
uint64_t sub_EF574(unsigned __int8 a1, double a2, double a3, double a4)
{
  BOOL v4;
  BOOL v5;
  BOOL v7;
  if (!a1 || a1 == 199)
  {
    uint64_t v7 = a2 == 0.0;
    if (a3 == 0.0) {
      uint64_t v7 = 1;
    }
    return a4 == 0.0 || v7;
  }

  else
  {
    uint64_t v4 = a2 == 0.0;
    uint64_t v5 = a4 == 0.0;
    if (a1 != 4) {
      uint64_t v5 = 0;
    }
    if (a1 != 91) {
      uint64_t v4 = v5;
    }
    if (a1 == 90) {
      return a3 == 0.0;
    }
    else {
      return v4;
    }
  }

uint64_t sub_EF5D4(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  uint64_t v37 = a4;
  uint64_t v9 = sub_A8E4();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_494C(&qword_189D00);
  uint64_t v14 = __chkstk_darwin(v13);
  Swift::String v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v36 - v17;
  uint64_t v19 = sub_27CC8(a2);
  String.toSpeakableString.getter(v19, v20);
  sub_DA1C();
  sub_ABF4();
  sub_A628((uint64_t)v18, 0LL);
  id v21 = (int *)type metadata accessor for WellnessQueryingRingsParameters(0LL);
  sub_A384((uint64_t)v18, a1 + v21[5]);
  uint64_t v22 = type metadata accessor for DialogCalendar(0LL);
  Date.init()(v22);
  uint64_t v23 = static DialogCalendar.make(date:)(v12);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v24 = v21[6];
  swift_release();
  *(void *)(a1 + v24) = v23;
  double v25 = *(double *)a3;
  char v26 = *(_BYTE *)(a3 + 8);
  uint64_t v27 = v37;
  uint64_t v28 = v38;
  if ((v26 & 1) == 0) {
    double v25 = sub_90668(v37, v38, a2, v25);
  }
  uint64_t v29 = v39;
  uint64_t v30 = a1 + v21[11];
  *(double *)uint64_t v30 = v25;
  *(_BYTE *)(v30 + 8) = v26;
  double v31 = *(double *)v29;
  char v32 = *(_BYTE *)(v29 + 8);
  if ((v32 & 1) == 0) {
    double v31 = sub_90668(v27, v28, a2, v31);
  }
  uint64_t v33 = a1 + v21[8];
  *(double *)uint64_t v33 = v31;
  *(_BYTE *)(v33 + 8) = v32;
  if (v28)
  {
    String.toSpeakableString.getter(v27, v28);
    uint64_t v34 = 0LL;
  }

  else
  {
    uint64_t v34 = 1LL;
  }

  sub_A628((uint64_t)v16, v34);
  return sub_A384((uint64_t)v16, a1 + v21[12]);
}

uint64_t sub_EF7D8(uint64_t result)
{
  double v1 = (double)result;
  if ((double)result >= 9.22337204e18)
  {
    *(double *)&uint64_t result = 0.0;
    return result;
  }

  if ((~*(void *)&v1 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v1 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    return result;
  }

  else {
    *(double *)&uint64_t result = 0.0;
  }
  return result;
}

uint64_t sub_EF834(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v5 + 600) = a4;
  *(void *)(v5 + 224) = a3;
  *(void *)(v5 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v4;
  *(void *)(v5 + 208) = a1;
  *(void *)(v5 + 216) = a2;
  uint64_t v6 = sub_D984();
  *(void *)(v5 + 240) = v6;
  *(void *)(v5 + 248) = *(void *)(v6 - 8);
  *(void *)(v5 + 256) = sub_A5B8();
  *(void *)(v5 + 264) = sub_A5B8();
  *(void *)(v5 + 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_A5B8();
  *(void *)(v5 + 280) = sub_A5B8();
  *(void *)(v5 + 288) = sub_A5B8();
  *(void *)(v5 + 296) = sub_A5B8();
  *(void *)(v5 + 304) = sub_A5B8();
  sub_494C(&qword_189D00);
  *(void *)(v5 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_A5B8();
  *(void *)(v5 + 320) = sub_A5B8();
  *(void *)(v5 + 328) = sub_A5B8();
  *(void *)(v5 + 336) = sub_A5B8();
  *(void *)(v5 + 344) = sub_A5B8();
  *(void *)(v5 + 35_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_A5B8();
  *(void *)(v5 + 360) = sub_A5B8();
  *(void *)(v5 + 368) = sub_A5B8();
  *(void *)(v5 + 376) = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_EF920()
{
  uint64_t v1 = v0[47];
  uint64_t v2 = sub_F1B94();
  String.toSpeakableString.getter(v2, 0xE800000000000000LL);
  uint64_t v3 = sub_ABF4();
  v0[48] = v3;
  sub_A66C(v1, 0LL, v4, v3);
  uint64_t v5 = (uint64_t **)swift_task_alloc(dword_18B084);
  v0[49] = (uint64_t)v5;
  *uint64_t v5 = v0;
  v5[1] = (uint64_t *)sub_EF99C;
  uint64_t v6 = sub_EA454(v0[47]);
  return sub_3C954(v6);
}

uint64_t sub_EF99C()
{
  *(void *)(v0 + 400) = v2;
  uint64_t v4 = sub_36900(v3);
  if (v1) {
    uint64_t v4 = sub_36860();
  }
  sub_F1BC8(v4, &qword_189D00);
  sub_A964();
  return sub_D954();
}

#error "EFBBC: call analysis failed (funcsize=114)"
uint64_t sub_EFBEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  sub_364AC();
  sub_36578();
  *(void *)(v0 + 440) = v2;
  sub_36900(v3);
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_36860();
    sub_F1BC8(v4, &qword_189D00);
  }

  else
  {
    sub_F1270(*(void *)(v0 + 368), &qword_189D00);
  }

  sub_A964();
  return sub_D954();
}

#error "EFE24: call analysis failed (funcsize=117)"
uint64_t sub_EFE54()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v2 = *v1;
  sub_36578();
  *(void *)(v2 + 47_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v3;
  sub_36900(v4);
  if (v0)
  {
    swift_bridgeObjectRelease();
    sub_2A184();
    uint64_t v5 = sub_36860();
    sub_F1C54(v5, &qword_189D00);
  }

  else
  {
    sub_F1270(*(void *)(v2 + 360), &qword_189D00);
  }

  sub_A964();
  return swift_task_switch(v6, v7, v8);
}

uint64_t sub_EFEEC()
{
  unint64_t v3 = *(void *)(v1 + 408);
  sub_F184C((uint64_t)[*(id *)(v1 + 472) dialog]);
  sub_5F15C();
  if (v3 >> 62)
  {
    sub_5F098();
    uint64_t v42 = sub_5F138();
    sub_249D4();
    if (v42) {
      goto LABEL_3;
    }
  }

  else
  {
    sub_F1A20();
    if (v0)
    {
LABEL_3:
      sub_5F0AC();
      sub_370B0();
      uint64_t v4 = *(void *)(v1 + 456);
      uint64_t v5 = *(void *)(v1 + 424);
      uint64_t v6 = *(void **)(v1 + 304);
      uint64_t v7 = *(void *)(v1 + 248);
      uint64_t v8 = sub_249D4();
      id v9 = sub_5693C(v8, "fullPrint");
      sub_5F15C();
      uint64_t v10 = sub_F1A10();
      unint64_t v12 = v11;

      *(void *)(v1 + 480) = v10;
      *(void *)(v1 + 488) = v12;
      uint64_t v14 = Logger.wellness.unsafeMutableAddressor(v13);
      *(void *)(v1 + 496) = v14;
      sub_A5DC(v14, v1 + 88);
      uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
      *(void *)(v1 + 504) = v15;
      sub_568B8((uint64_t)v6, v14, v15);
      sub_DE548(v5);
      sub_DE548(v4);
      uint64_t v16 = sub_DE548(v12);
      uint64_t v17 = v6;
      Logger.logObject.getter(v16);
      os_log_type_t v18 = sub_AB70();
      BOOL v19 = sub_561AC(v18);
      unint64_t v20 = *(void *)(v1 + 456);
      if (v19)
      {
        uint64_t v123 = *(void *)(v1 + 448);
        uint64_t v135 = v10;
        uint64_t v22 = *(void *)(v1 + 416);
        unint64_t v21 = *(void *)(v1 + 424);
        uint64_t v140 = *(void *)(v1 + 248);
        uint64_t v144 = *(void *)(v1 + 240);
        uint64_t v147 = *(void *)(v1 + 304);
        uint64_t v23 = sub_A5E8(32LL);
        uint64_t v24 = sub_A5E8(96LL);
        uint64_t v149 = v24;
        *(_DWORD *)uint64_t v23 = 136315650;
        swift_bridgeObjectRetain(v21);
        *(void *)(v1 + 184) = sub_39178(v22, v21, &v149);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 184, v1 + 192, v23 + 4, v23 + 12);
        sub_F1C14(v21);
        *(_WORD *)(v23 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2080;
        swift_bridgeObjectRetain(v20);
        *(void *)(v1 + 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_39178(v123, v20, &v149);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 192, v1 + 200, v23 + 14, v23 + 22);
        sub_F1C14(v20);
        *(_WORD *)(v23 + 2_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2080;
        swift_bridgeObjectRetain(v12);
        *(void *)(v1 + 200) = sub_39178(v135, v12, &v149);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 200, v1 + 208, v23 + 24, v23 + 32);
        sub_F1C14(v12);
        sub_F1C00();
        _os_log_impl(v25, v26, v27, v28, (uint8_t *)v23, 0x20u);
        swift_arrayDestroy(v24, 3LL);
        sub_5050(v24);
        sub_5050(v23);

        uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v140 + 8);
        v29(v147, v144);
      }

      else
      {
        uint64_t v30 = *(void *)(v1 + 304);
        uint64_t v31 = *(void *)(v1 + 240);
        uint64_t v32 = *(void *)(v1 + 248);
        sub_A3868(*(void *)(v1 + 424));
        sub_A3868(v20);
        sub_A3868(v12);

        uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
        v29(v30, v31);
      }

      *(void *)(v1 + 51_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v29;
      uint64_t v34 = *(void *)(v1 + 344);
      uint64_t v33 = *(void *)(v1 + 352);
      uint64_t v35 = sub_F1B94();
      String.toSpeakableString.getter(v35, 0xEF736574756E694DLL);
      sub_F19E0(v34);
      uint64_t v36 = sub_BAFCC();
      String.toSpeakableString.getter(v36, v37);
      sub_F19E0(v33);
      uint64_t v38 = (void *)swift_task_alloc(dword_18B0D4);
      *(void *)(v1 + 520) = v38;
      *uint64_t v38 = v1;
      v38[1] = sub_F0358;
      sub_EA454(*(void *)(v1 + 344));
      sub_56400();
      return sub_3D2B0(v39, v40);
    }
  }

  uint64_t v43 = *(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v1 + 472);
  uint64_t v44 = *(void *)(v1 + 456);
  sub_249D4();
  sub_1EBF4();
  sub_6D64();

  uint64_t v45 = *(void *)(v1 + 272);
  uint64_t v46 = (void *)sub_F1B80();
  sub_A5DC((uint64_t)v46, v1 + 64);
  uint64_t v47 = sub_F1858(v45, v43[2]);
  Logger.logObject.getter(v47);
  os_log_type_t v48 = sub_A898();
  if (sub_A988(v48))
  {
    os_log_type_t v49 = (_WORD *)sub_232D0();
    sub_366C0(v49);
    sub_A940(&dword_0, v50, v51, "Couldn't create stand label by executing cat.");
    sub_5050(v44);
  }

  sub_F1AB4();

  sub_202F4(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  uint64_t v116 = *(void *)(v1 + 304);
  uint64_t v124 = *(void *)(v1 + 296);
  uint64_t v130 = *(void *)(v1 + 288);
  uint64_t v136 = *(void *)(v1 + 280);
  uint64_t v141 = *(void *)(v1 + 272);
  uint64_t v145 = *(void *)(v1 + 264);
  uint64_t v148 = *(void *)(v1 + 256);
  swift_task_dealloc(*(void *)(v1 + 376));
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  uint64_t v52 = sub_A78C();
  uint64_t v60 = sub_AAD8(v52, v53, v54, v55, v56, v57, v58, v59, v109, v116);
  uint64_t v68 = sub_A888(v60, v61, v62, v63, v64, v65, v66, v67, v110, v117, v124);
  uint64_t v76 = sub_A854(v68, v69, v70, v71, v72, v73, v74, v75, v111, v118, v125, v130);
  uint64_t v84 = sub_A84C(v76, v77, v78, v79, v80, v81, v82, v83, v112, v119, v126, v131, v136);
  uint64_t v92 = sub_A844(v84, v85, v86, v87, v88, v89, v90, v91, v113, v120, v127, v132, v137, v141);
  uint64_t v100 = sub_A83C(v92, v93, v94, v95, v96, v97, v98, v99, v114, v121, v128, v133, v138, v142, v145);
  sub_A95C(v100, v101, v102, v103, v104, v105, v106, v107, v115, v122, v129, v134, v139, v143, v146, v148);
  uint64_t v108 = (uint64_t (*)(void))sub_F1778();
  return sub_80A90(v108);
}

uint64_t sub_F0358()
{
  v1[66] = v2;
  sub_36900(v3);
  if (v0)
  {
    uint64_t v6 = v1 + 43;
    uint64_t v5 = v1[43];
    uint64_t v4 = v6[1];
    swift_bridgeObjectRelease();
    sub_2A184();
    sub_6D64();
    sub_36860();
    sub_F180C(v4);
    sub_F180C(v5);
  }

  else
  {
    uint64_t v7 = v1[43];
    sub_F1A18(v1[44]);
    sub_F1A18(v7);
  }

  sub_A964();
  return sub_36348(v8, v9, v10);
}

#error "F05B4: call analysis failed (funcsize=116)"
uint64_t sub_F05E4()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v2 = *v1;
  sub_36578();
  v2[70] = v3;
  sub_36900(v4);
  if (v0)
  {
    uint64_t v7 = v2 + 41;
    uint64_t v6 = v2[41];
    uint64_t v5 = v7[1];
    swift_bridgeObjectRelease();
    sub_2A184();
    sub_6D64();
    sub_1EBF4();
    sub_36860();
    sub_F180C(v6);
    sub_F180C(v5);
  }

  else
  {
    uint64_t v8 = v2[42];
    sub_F1A18(v2[41]);
    sub_F1A18(v8);
  }

  sub_A964();
  return sub_D954();
}

#error "F0868: call analysis failed (funcsize=118)"
uint64_t sub_F0898()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v2 = *v1;
  sub_36578();
  v2[74] = v3;
  sub_36900(v4);
  if (v0)
  {
    uint64_t v7 = v2 + 39;
    uint64_t v6 = v2[39];
    uint64_t v5 = v7[1];
    swift_bridgeObjectRelease();
    sub_2A184();
    sub_6D64();
    sub_1EBF4();
    sub_36C34();
    sub_36860();
    sub_F180C(v6);
    sub_F180C(v5);
  }

  else
  {
    uint64_t v8 = v2[40];
    sub_F1A18(v2[39]);
    sub_F1A18(v8);
  }

  sub_A964();
  return swift_task_switch(v9, v10, v11);
}

uint64_t sub_F096C()
{
  unint64_t v2 = *(void *)(v1 + 408);
  sub_F184C((uint64_t)[*(id *)(v1 + 592) dialog]);
  sub_5F15C();
  if (v2 >> 62)
  {
    sub_5F098();
    uint64_t v14 = sub_5F138();
    sub_249D4();
    if (v14) {
      goto LABEL_3;
    }
  }

  else
  {
    sub_F1A20();
    if (v0)
    {
LABEL_3:
      sub_5F0AC();
      uint64_t v3 = (void *)sub_370B0();
      uint64_t v4 = *(void **)(v1 + 592);
      uint64_t v5 = *(void **)(v1 + 560);
      uint64_t v121 = *(void *)(v1 + 544);
      uint64_t v122 = *(void *)(v1 + 576);
      uint64_t v6 = *(void **)(v1 + 528);
      uint64_t v7 = *(void **)(v1 + 472);
      uint64_t v119 = *(void *)(v1 + 456);
      uint64_t v120 = *(void *)(v1 + 488);
      uint64_t v8 = *(void **)(v1 + 440);
      uint64_t v118 = *(void *)(v1 + 424);
      uint64_t v9 = *(void **)(v1 + 400);
      uint64_t v10 = sub_249D4();
      id v11 = sub_5693C(v10, "fullPrint");

      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      uint64_t v116 = v13;
      uint64_t v117 = v12;

      uint64_t v114 = *(void *)(v1 + 536);
      uint64_t v115 = *(void *)(v1 + 568);
      uint64_t v112 = *(void *)(v1 + 448);
      uint64_t v113 = *(void *)(v1 + 480);
      uint64_t v111 = *(void *)(v1 + 416);
      goto LABEL_8;
    }
  }

  uint64_t v15 = *(void **)(v1 + 592);
  uint64_t v16 = *(void **)(v1 + 424);
  sub_249D4();
  sub_1EBF4();
  sub_6D64();
  sub_36C34();
  sub_369F4();
  sub_DA1C();

  uint64_t v17 = *(void **)(v1 + 496);
  os_log_type_t v18 = *(void **)(v1 + 504);
  uint64_t v19 = *(void *)(v1 + 296);
  unint64_t v20 = *(void **)(v1 + 240);
  sub_A5DC((uint64_t)v17, v1 + 160);
  sub_36868();
  sub_A86C();
  os_log_type_t v21 = sub_A898();
  if (sub_A988(v21))
  {
    uint64_t v22 = (_WORD *)sub_232D0();
    sub_366C0(v22);
    sub_A940( &dword_0,  v23,  v24,  "Couldn't create stand unit label by executing unit_Label cat for multiple ring query.");
    sub_5050(v19);
  }

  sub_F1904();

  sub_F1BBC();
  uint64_t v111 = 0LL;
  uint64_t v118 = 0LL;
  uint64_t v114 = 0LL;
  uint64_t v121 = 0LL;
  uint64_t v112 = 0LL;
  uint64_t v119 = 0LL;
  uint64_t v115 = 0LL;
  uint64_t v122 = 0LL;
  uint64_t v113 = 0LL;
  uint64_t v120 = 0LL;
  uint64_t v116 = 0LL;
  uint64_t v117 = 0LL;
LABEL_8:
  uint64_t v83 = *(void *)(v1 + 304);
  uint64_t v90 = *(void *)(v1 + 296);
  uint64_t v96 = *(void *)(v1 + 288);
  uint64_t v101 = *(void *)(v1 + 280);
  uint64_t v105 = *(void *)(v1 + 272);
  uint64_t v108 = *(void *)(v1 + 264);
  uint64_t v110 = *(void *)(v1 + 256);
  double v25 = *(void **)(v1 + 208);
  swift_task_dealloc(*(void *)(v1 + 376));
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  sub_A78C();
  sub_A67C();
  uint64_t v26 = sub_A7C8();
  uint64_t v34 = sub_A970(v26, v27, v28, v29, v30, v31, v32, v33, v83);
  uint64_t v42 = sub_AAD8(v34, v35, v36, v37, v38, v39, v40, v41, v84, v90);
  uint64_t v50 = sub_A888(v42, v43, v44, v45, v46, v47, v48, v49, v85, v91, v96);
  uint64_t v58 = sub_A854(v50, v51, v52, v53, v54, v55, v56, v57, v86, v92, v97, v101);
  uint64_t v66 = sub_A84C(v58, v59, v60, v61, v62, v63, v64, v65, v87, v93, v98, v102, v105);
  uint64_t v74 = sub_A844(v66, v67, v68, v69, v70, v71, v72, v73, v88, v94, v99, v103, v106, v108);
  sub_A83C(v74, v75, v76, v77, v78, v79, v80, v81, v89, v95, v100, v104, v107, v109, v110);
  *double v25 = v111;
  v25[1] = v118;
  v25[2] = v114;
  v25[3] = v121;
  v25[4] = v112;
  v25[5] = v119;
  v25[6] = v115;
  v25[7] = v122;
  v25[8] = v113;
  v25[9] = v120;
  v25[10] = v117;
  v25[11] = v116;
  return (*(uint64_t (**)(void))(v1 + 8))();
}

#error "F0CF4: call analysis failed (funcsize=49)"
#error "F0DC0: call analysis failed (funcsize=49)"
#error "F0E90: call analysis failed (funcsize=50)"
#error "F0F5C: call analysis failed (funcsize=49)"
#error "F1028: call analysis failed (funcsize=49)"
#error "F10F8: call analysis failed (funcsize=50)"
uint64_t sub_F1124(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v3 = (void *)swift_task_alloc(dword_18F744);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1FF58;
  return sub_EA984(a1);
}

uint64_t sub_F1174(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_F11A8(void *a1)
{
  return a1;
}

uint64_t sub_F11D4()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_F1210(void *a1)
{
  id v1 = [a1 activeEnergyBurnedUnit];
  if (!v1) {
    return 0LL;
  }
  unint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void sub_F1270(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = sub_494C(a2);
  sub_23334(*(void *)(v2 - 8));
  sub_A890();
}

void sub_F12A0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2(0LL);
  sub_23334(*(void *)(v2 - 8));
  sub_A890();
}

uint64_t sub_F12D0()
{
  id v1 = (void *)swift_task_alloc(dword_18F764);
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_20098;
  uint64_t v2 = sub_90540();
  return sub_34F70(v2, v3);
}

uint64_t sub_F1320()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_F1344()
{
  id v1 = (void *)swift_task_alloc(dword_18F774);
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_35B20;
  uint64_t v2 = sub_90540();
  return sub_310E8(v2, v3);
}

void sub_F1394(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_494C(a3);
  sub_6E0C(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_A890();
}

uint64_t sub_F13CC()
{
  id v1 = (void *)swift_task_alloc(dword_18F794);
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_35B20;
  uint64_t v2 = sub_90540();
  return sub_310E8(v2, v3);
}

uint64_t sub_F1424()
{
  uint64_t v2 = v0[460];
  uint64_t v3 = v0[419];
  *(void *)(v1 - 184) = v0[420];
  *(void *)(v1 - 176) = v3;
  uint64_t v4 = v0[417];
  *(void *)(v1 - 168) = v0[418];
  *(void *)(v1 - 160) = v4;
  uint64_t v5 = v0[413];
  *(void *)(v1 - 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0[414];
  *(void *)(v1 - 144) = v5;
  uint64_t v6 = v0[410];
  *(void *)(v1 - 136) = v0[412];
  *(void *)(v1 - 128) = v6;
  uint64_t v7 = v0[408];
  *(void *)(v1 - 120) = v0[409];
  *(void *)(v1 - 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v7;
  uint64_t v8 = v0[403];
  *(void *)(v1 - 104) = v0[406];
  *(void *)(v1 - 96) = v8;
  return swift_task_dealloc(v2);
}

uint64_t sub_F1528()
{
  return swift_task_dealloc(*(void *)(v0 + 376));
}

uint64_t sub_F156C()
{
  uint64_t v2 = v0[460];
  uint64_t v3 = v0[418];
  *(void *)(v1 - 184) = v0[419];
  *(void *)(v1 - 176) = v3;
  uint64_t v4 = v0[414];
  *(void *)(v1 - 168) = v0[417];
  *(void *)(v1 - 160) = v4;
  uint64_t v5 = v0[412];
  *(void *)(v1 - 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0[413];
  *(void *)(v1 - 144) = v5;
  uint64_t v6 = v0[409];
  *(void *)(v1 - 136) = v0[410];
  *(void *)(v1 - 128) = v6;
  uint64_t v7 = v0[406];
  *(void *)(v1 - 120) = v0[408];
  *(void *)(v1 - 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v7;
  *(void *)(v1 - 104) = v0[403];
  return swift_task_dealloc(v2);
}

uint64_t sub_F1674()
{
  uint64_t v2 = v0[460];
  uint64_t v3 = v0[417];
  *(void *)(v1 - 208) = v0[418];
  *(void *)(v1 - 200) = v3;
  uint64_t v4 = v0[413];
  *(void *)(v1 - 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0[414];
  *(void *)(v1 - 184) = v4;
  uint64_t v5 = v0[410];
  *(void *)(v1 - 176) = v0[412];
  *(void *)(v1 - 168) = v5;
  uint64_t v6 = v0[408];
  *(void *)(v1 - 160) = v0[409];
  *(void *)(v1 - 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v6;
  uint64_t v7 = v0[403];
  *(void *)(v1 - 144) = v0[406];
  *(void *)(v1 - 136) = v7;
  return swift_task_dealloc(v2);
}

uint64_t sub_F1778()
{
  v0[4] = 0u;
  v0[5] = 0u;
  v0[2] = 0u;
  v0[3] = 0u;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return *(void *)(v1 + 8);
}

uint64_t sub_F1790(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_F17AC()
{
  uint64_t v3 = v1[489];
  uint64_t v4 = v1[422];
  *(void *)(v2 - 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v1[420];
  *(void *)(v2 - 104) = v4;
  uint64_t v5 = v1[414];
  *(void *)(v2 - 128) = v3;
  *(void *)(v2 - 120) = v5;
  *(void *)(v2 - 136) = v1[410];
}

  ;
}

void sub_F180C(uint64_t a1)
{
}

uint64_t sub_F1814()
{
  return swift_task_dealloc(*(void *)(v0 + 1744));
}

uint64_t sub_F184C(uint64_t a1)
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, v1);
}

uint64_t sub_F1858@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v3, v2);
}

uint64_t sub_F1864(uint64_t a1)
{
  return sub_3C954(a1);
}

uint64_t sub_F1880(uint64_t a1, uint64_t a2)
{
  return sub_3D2B0(a1, a2);
}

  ;
}

double sub_F18C4(double a1)
{
  return sub_90668(v1, v2, 0, a1);
}

uint64_t sub_F18D4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_F18F0()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 0LL, 1LL, v0);
}

void sub_F1904()
{
}

uint64_t sub_F1928(uint64_t a1, uint64_t a2)
{
  return sub_3CFE0(a1, a2);
}

void sub_F193C()
{
}

void sub_F195C(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_F1964()
{
  return sub_27CC8(*(_BYTE *)(v0 + 585));
}

uint64_t sub_F1980(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_F1988()
{
  return String.toSpeakableString.getter(v3, v2);
}

void sub_F19B4()
{
}

uint64_t sub_F19D0(uint64_t a1)
{
  return static Measurement._unconditionallyBridgeFromObjectiveC(_:)(v1, a1);
}

uint64_t sub_F19E0(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 0LL, 1LL, v1);
}

uint64_t sub_F19F0(uint64_t a1, unint64_t *a2, void *a3)
{
  return sub_55CC4(0LL, a2, a3);
}

uint64_t sub_F19F8()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, 0LL, 1LL, v1);
}

uint64_t sub_F1A10()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

void sub_F1A18(uint64_t a1)
{
}

  ;
}

uint64_t sub_F1A2C()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v1 + 3400), v0, 1LL, *(void *)(v1 + 3320));
}

uint64_t sub_F1A40()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 3696));
}

uint64_t sub_F1A54(uint64_t a1, unint64_t a2)
{
  return sub_39178(a1, a2, (uint64_t *)(v2 - 104));
}

uint64_t sub_F1A60(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1LL, v1);
}

uint64_t sub_F1A6C()
{
  return Measurement.value.getter(v0);
}

void sub_F1A74(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

_OWORD *sub_F1A80@<X0>(uint64_t a1@<X8>)
{
  return sub_A13C((_OWORD *)(a1 + 88), v1);
}

uint64_t sub_F1A8C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

double sub_F1AA0()
{
  return sub_90668(v0, v1, 0x5Bu, v2);
}

void sub_F1AB4()
{
}

  ;
}

void sub_F1AF0()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_F1B00(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_F1B08()
{
  return String.toSpeakableString.getter(v1, v0);
}

uint64_t sub_F1B18()
{
  return v3(v0, v1, v2);
}

  ;
}

uint64_t sub_F1B44( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t (*a14)(uint64_t, uint64_t))
{
  return a14(v14, v15);
}

  ;
}

void sub_F1B70()
{
}

uint64_t sub_F1B80()
{
  return Logger.wellness.unsafeMutableAddressor();
}

void sub_F1B88()
{
}

uint64_t sub_F1B94()
{
  return 0x6573696372657865LL;
}

void sub_F1BA8()
{
}

uint64_t sub_F1BB0()
{
  return v2(v0, v1);
}

uint64_t sub_F1BBC()
{
  return v2(v0, v1);
}

void sub_F1BC8(uint64_t a1, uint64_t *a2)
{
}

id sub_F1BD0(void *a1)
{
  return [a1 *(SEL *)(v1 + 3744)];
}

uint64_t sub_F1BD8()
{
  return v2(v0, v1);
}

uint64_t sub_F1BE4@<X0>(uint64_t *a1@<X8>, uint64_t a2@<X0>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
  return sub_3BDD8(a1);
}

void sub_F1BF0()
{
}

uint64_t sub_F1BF8()
{
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
}

  ;
}

uint64_t sub_F1C0C()
{
  return (*(uint64_t (**)(void))(v0 - 112))();
}

uint64_t sub_F1C14(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 3LL);
}

uint64_t sub_F1C1C()
{
  return *(void *)(v0 - 88);
}

_OWORD *sub_F1C28()
{
  return sub_A13C((_OWORD *)(v1 + 88), v0);
}

uint64_t sub_F1C34()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 3696));
}

uint64_t sub_F1C3C(uint64_t a1, uint64_t a2)
{
  return OutputGenerationManifest.init(dialogPhase:_:)(v2, a2, 0LL);
}

uint64_t sub_F1C48(uint64_t a1)
{
  *(void *)(v2 - 136) = *(void *)(v1 + 3224);
  return swift_task_dealloc(a1);
}

void sub_F1C54(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_F1C5C(uint64_t a1, uint64_t a2)
{
  return String.toSpeakableString.getter(a1, a2);
}

uint64_t GenericButtonModel.init(label:punchout:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  sub_F2A40();
  uint64_t v6 = sub_F2A1C();
  return sub_F2A14((uint64_t)a4, a3, v6, *(uint64_t (**)(void))(*(void *)(v6 - 8) + 32LL));
}

uint64_t type metadata accessor for GenericButtonModel(uint64_t a1)
{
  uint64_t result = qword_18F818;
  if (!qword_18F818) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for GenericButtonModel);
  }
  return result;
}

uint64_t GenericButtonModel.label.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t GenericButtonModel.punchout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_F2A1C();
  return sub_F2A14(a1, v1, v3, *(uint64_t (**)(void))(*(void *)(v3 - 8) + 16LL));
}

uint64_t GenericButtonModel.punchout.setter(uint64_t a1)
{
  uint64_t v3 = sub_F2A1C();
  return sub_F2A14(v1, a1, v3, *(uint64_t (**)(void))(*(void *)(v3 - 8) + 40LL));
}

uint64_t (*GenericButtonModel.punchout.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

BOOL sub_F1D94(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_F1DA4(uint64_t a1, char a2)
{
}

uint64_t sub_F1DC8(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6C6562616CLL && a2 == 0xE500000000000000LL;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6562616CLL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  else if (a1 == 0x74756F68636E7570LL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74756F68636E7570LL, 0xE800000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_F1EA4()
{
  return 2LL;
}

Swift::Int sub_F1EAC(char a1)
{
  return Hasher._finalize()();
}

uint64_t sub_F1EF0(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x74756F68636E7570LL;
  }
  else {
    return 0x6C6562616CLL;
  }
}

BOOL sub_F1F24(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_F1D94(*a1, *a2);
}

Swift::Int sub_F1F30()
{
  return sub_F1EAC(*v0);
}

void sub_F1F38(uint64_t a1)
{
}

uint64_t sub_F1F40()
{
  return sub_F1EF0(*v0);
}

uint64_t sub_F1F48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_F1DC8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_F1F6C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_F1EA4();
  *a1 = result;
  return result;
}

uint64_t sub_F1F90(uint64_t a1)
{
  unint64_t v2 = sub_F2124();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F1FB8(uint64_t a1)
{
  unint64_t v2 = sub_F2124();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GenericButtonModel.encode(to:)(void *a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = sub_494C(&qword_18F7A8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_27AD8();
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_500C(a1, v8);
  unint64_t v10 = sub_F2124();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for GenericButtonModel.CodingKeys,  &type metadata for GenericButtonModel.CodingKeys,  v10,  v8,  v9);
  uint64_t v11 = *v4;
  uint64_t v12 = v4[1];
  char v18 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v11, v12, &v18, v6);
  if (!v2)
  {
    uint64_t v13 = (char *)v4 + *(int *)(type metadata accessor for GenericButtonModel(0LL) + 20);
    char v17 = 1;
    uint64_t v14 = type metadata accessor for URL(0LL);
    uint64_t v15 = sub_2322C( &qword_18D668,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v13, &v17, v6, v14, v15);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
}

unint64_t sub_F2124()
{
  unint64_t result = qword_18F7B0;
  if (!qword_18F7B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_13DBB4, &type metadata for GenericButtonModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18F7B0);
  }

  return result;
}

uint64_t GenericButtonModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v24 = *(void *)(v5 - 8);
  uint64_t v25 = v5;
  __chkstk_darwin(v5);
  uint64_t v23 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = sub_494C(&qword_18F7B8);
  uint64_t v7 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v8 = type metadata accessor for GenericButtonModel(0LL);
  __chkstk_darwin(v8);
  sub_27AD8();
  uint64_t v10 = a1[3];
  uint64_t v9 = a1[4];
  sub_500C(a1, v10);
  unint64_t v11 = sub_F2124();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for GenericButtonModel.CodingKeys,  &type metadata for GenericButtonModel.CodingKeys,  v11,  v10,  v9);
  if (v2) {
    return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  }
  unint64_t v20 = a1;
  uint64_t v21 = v7;
  uint64_t v12 = v3;
  uint64_t v14 = v23;
  uint64_t v13 = v24;
  uint64_t v15 = v25;
  uint64_t v16 = v26;
  char v28 = 0;
  *(void *)uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v28, v26);
  *((void *)v12 + 1) = v17;
  char v27 = 1;
  sub_2322C( &qword_18D678,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v15, &v27, v16, v15);
  sub_F2A2C();
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v12[*(int *)(v8 + 20)], v14, v15);
  sub_201A8((uint64_t)v12, v22);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v20);
  return sub_201EC((uint64_t)v12);
}

uint64_t sub_F2378()
{
  return sub_2322C( &qword_18A168,  type metadata accessor for GenericButtonModel,  (uint64_t)&protocol conformance descriptor for GenericButtonModel);
}

uint64_t sub_F23A4()
{
  return sub_2322C( &qword_18A038,  type metadata accessor for GenericButtonModel,  (uint64_t)&protocol conformance descriptor for GenericButtonModel);
}

uint64_t sub_F23D0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return GenericButtonModel.init(from:)(a1, a2);
}

uint64_t sub_F23E4(void *a1)
{
  return GenericButtonModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for GenericButtonModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v11);
  }

  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for URL(0LL);
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }

  return v3;
}

uint64_t destroy for GenericButtonModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

void *initializeWithCopy for GenericButtonModel(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for GenericButtonModel(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  return a1;
}

_OWORD *initializeWithTake for GenericButtonModel(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

void *assignWithTake for GenericButtonModel(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericButtonModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_F269C);
}

uint64_t sub_F269C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(sub_56254(v2[492], v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for URL(0LL);
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1 + *(int *)(a3 + 20), a2, v8);
  }

uint64_t storeEnumTagSinglePayload for GenericButtonModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_F271C);
}

void sub_F271C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + 8) = (a2 - 1);
    sub_1EB0C();
  }

  else
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1 + *(int *)(a4 + 20), a2, a2, v7);
  }

uint64_t sub_F2780(uint64_t a1)
{
  v4[0] = &unk_13DAD8;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for GenericButtonModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for GenericButtonModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(sub_56254(v2[492], v4) = 1;
  }
  else {
    LODWORD(sub_56254(v2[492], v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_F28C8 + 4 * byte_13DA15[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_F28FC + 4 * byte_13DA10[v4]))();
}

uint64_t sub_F28FC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_F2904(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xF290CLL);
  }
  return result;
}

uint64_t sub_F2918(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xF2920LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_F2924(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_F292C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_F2938(_BYTE *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GenericButtonModel.CodingKeys()
{
  return &type metadata for GenericButtonModel.CodingKeys;
}

unint64_t sub_F2958()
{
  unint64_t result = qword_18F850;
  if (!qword_18F850)
  {
    unint64_t result = swift_getWitnessTable(&unk_13DB8C, &type metadata for GenericButtonModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18F850);
  }

  return result;
}

unint64_t sub_F2998()
{
  unint64_t result = qword_18F858;
  if (!qword_18F858)
  {
    unint64_t result = swift_getWitnessTable(&unk_13DAFC, &type metadata for GenericButtonModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18F858);
  }

  return result;
}

unint64_t sub_F29D8()
{
  unint64_t result = qword_18F860[0];
  if (!qword_18F860[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_13DB24, &type metadata for GenericButtonModel.CodingKeys);
    atomic_store(result, qword_18F860);
  }

  return result;
}

uint64_t sub_F2A14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_F2A1C()
{
  return type metadata accessor for URL(0LL);
}

uint64_t sub_F2A2C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 128) + 8LL))(v1, v0);
}

uint64_t sub_F2A40()
{
  return type metadata accessor for GenericButtonModel(0LL);
}

uint64_t destroy for MedLaunchHealthAppFlow(void *a1)
{
  uint64_t v2 = a1 + 11;
  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 1);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 6);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v2);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 16);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 21);
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 26);
}

uint64_t initializeWithCopy for MedLaunchHealthAppFlow(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  int v5 = a2 + 1;
  __int128 v6 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v6;
  uint64_t v7 = v6;
  uint64_t v8 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v6 - 8);
  swift_retain(v4);
  v8(a1 + 8, v5, v7);
  __int128 v9 = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(a1 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 48, (uint64_t)(a2 + 6));
  __int128 v10 = *((_OWORD *)a2 + 7);
  *(_OWORD *)(a1 + 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v10;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 88, (uint64_t)(a2 + 11));
  __int128 v11 = *(_OWORD *)(a2 + 19);
  *(_OWORD *)(a1 + 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v11;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 128, (uint64_t)(a2 + 16));
  __int128 v12 = *((_OWORD *)a2 + 12);
  *(_OWORD *)(a1 + 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v12;
  (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 168, (uint64_t)(a2 + 21));
  __int128 v13 = *(_OWORD *)(a2 + 29);
  *(_OWORD *)(a1 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v13;
  (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 208, (uint64_t)(a2 + 26));
  *(_BYTE *)(a1 + 248) = *((_BYTE *)a2 + 248);
  return a1;
}

uint64_t assignWithCopy for MedLaunchHealthAppFlow(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  sub_7030((void *)(a1 + 8), (void *)(a2 + 8));
  sub_7030((void *)(a1 + 48), (void *)(a2 + 48));
  sub_7030((void *)(a1 + 88), (void *)(a2 + 88));
  sub_7030((void *)(a1 + 128), (void *)(a2 + 128));
  sub_7030((void *)(a1 + 168), (void *)(a2 + 168));
  sub_7030((void *)(a1 + 208), (void *)(a2 + 208));
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  return a1;
}

uint64_t assignWithTake for MedLaunchHealthAppFlow(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 48));
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 88));
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 128));
  __int128 v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 168));
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 208));
  __int128 v6 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v6;
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  return a1;
}

uint64_t getEnumTagSinglePayload for MedLaunchHealthAppFlow(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 249))
    {
      LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MedLaunchHealthAppFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 248) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 249) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 249) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for MedLaunchHealthAppFlow()
{
  return &type metadata for MedLaunchHealthAppFlow;
}

uint64_t sub_F2DF8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_89258();
  return Flow.deferToExecuteAsync(_:)(a1, a2, &type metadata for MedLaunchHealthAppFlow, v4);
}

uint64_t sub_F2E38(uint64_t a1)
{
  v2[212] = v1;
  v2[211] = a1;
  v2[213] = sub_494C(&qword_18F880);
  v2[214] = sub_A5B8();
  v2[215] = sub_A5B8();
  uint64_t v3 = type metadata accessor for Date(0LL);
  v2[216] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[217] = v4;
  v2[218] = sub_A5C0(v4);
  uint64_t v5 = type metadata accessor for AppPunchOutFlow(0LL);
  v2[219] = v5;
  v2[220] = sub_A5C0(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v2[221] = v6;
  v2[222] = *(void *)(v6 - 8);
  v2[223] = sub_A5B8();
  v2[224] = sub_A5B8();
  v2[225] = sub_A5B8();
  v2[226] = sub_A5B8();
  v2[227] = sub_A5B8();
  v2[228] = sub_A5B8();
  v2[229] = sub_A5B8();
  v2[230] = sub_A5B8();
  v2[231] = sub_A5B8();
  uint64_t v7 = sub_494C(&qword_189CF8);
  v2[232] = sub_A5C0(*(void *)(v7 - 8));
  uint64_t v8 = type metadata accessor for URL(0LL);
  v2[233] = v8;
  v2[234] = *(void *)(v8 - 8);
  v2[235] = sub_A5B8();
  v2[236] = sub_A5B8();
  v2[237] = sub_A5B8();
  uint64_t v9 = type metadata accessor for DialogPhase(0LL);
  v2[238] = v9;
  v2[239] = *(void *)(v9 - 8);
  v2[240] = sub_A5B8();
  v2[241] = sub_A5B8();
  uint64_t v10 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[242] = v10;
  v2[243] = *(void *)(v10 - 8);
  v2[244] = sub_A5B8();
  v2[245] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

void sub_F2FE4()
{
  uint64_t v1 = *(uint64_t **)(v0 + 1696);
  uint64_t v2 = v1 + 1;
  uint64_t v3 = v1[4];
  uint64_t v4 = v1[5];
  sub_500C(v1 + 1, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  isSpecificMedRequest(from:deviceState:)();
  char v6 = v5;
  *(_BYTE *)(v0 + 265) = v5 & 1;
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 1392));
  uint64_t v7 = *v1;
  getLocalizedMedName(from:)(*v1, v8, v9, v10, v11, v12);
  *(void *)(v0 + 1968) = v13;
  getUSOMedNames(from:)(v7, v13, v14, v15, v16, v17);
  if (v18)
  {
    if (v18[2])
    {
      uint64_t v19 = (void *)(v0 + 16);
      uint64_t v20 = v18[4];
      uint64_t v21 = v18[5];
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }

    uint64_t v19 = (void *)(v0 + 16);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v19 = (void *)(v0 + 16);
  }

  uint64_t v20 = 0LL;
  uint64_t v21 = 0LL;
LABEL_7:
  char v259 = v6 ^ 1;
  uint64_t v263 = v21;
  *(void *)(v0 + 1984) = v21;
  *(void *)(v0 + 1976) = v20;
  uint64_t v22 = *(uint64_t **)(v0 + 1696);
  uint64_t v24 = v1[4];
  uint64_t v23 = v1[5];
  sub_500C(v1 + 1, v24);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v24, v23);
  uint64_t v25 = *(void *)(v0 + 1256);
  uint64_t v26 = *(void *)(v0 + 1264);
  sub_500C((void *)(v0 + 1232), v25);
  char v27 = dispatch thunk of DeviceState.isPhone.getter(v25, v26);
  sub_F4B8C(v22, (uint64_t)v19);
  if ((v27 & 1) != 0)
  {
    sub_892B0(v19);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 1232));
  }

  else
  {
    uint64_t v28 = *(void *)(v0 + 48);
    uint64_t v29 = *(void *)(v0 + 56);
    sub_500C((void *)(v0 + 24), v28);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v29);
    uint64_t v30 = *(void *)(v0 + 1376);
    uint64_t v31 = *(void *)(v0 + 1384);
    unsigned __int8 v32 = sub_500C((void *)(v0 + 1352), v30);
    dispatch thunk of DeviceState.isPad.getter(v30, v31);
    sub_F4E74();
    sub_892B0(v19);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 1232));
    if ((v32 & 1) == 0)
    {
      uint64_t v43 = v1[4];
      uint64_t v44 = v1[5];
      sub_3C788(v2);
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v44);
      uint64_t v45 = *(void *)(v0 + 1296);
      unsigned __int8 v46 = sub_3C788((void *)(v0 + 1272));
      dispatch thunk of DeviceState.isWatch.getter(v45);
      uint64_t v47 = sub_F4E74();
      if ((v46 & 1) != 0)
      {
        uint64_t v48 = *(void *)(v0 + 1928);
        uint64_t v49 = *(void *)(v0 + 1920);
        uint64_t v50 = *(void *)(v0 + 1912);
        uint64_t v51 = *(void *)(v0 + 1904);
        uint64_t v52 = *(void *)(v0 + 1696);
        static DialogPhase.error.getter(v47);
        uint64_t v53 = sub_DA2C(v49, v48, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 16));
        sub_B3FC4(v53, (uint64_t)sub_A633C);
        uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 8))(v48, v51);
        if ((*(_BYTE *)(v52 + 248) & 1) != 0)
        {
          uint64_t v55 = *(void *)(v0 + 1744);
          uint64_t v56 = **(void **)(v0 + 1696);
          Date.init()(v54);
          isLoggingTimeframeToday(from:todayDate:)(v56, v55, v57, v58, v59, v60);
          if ((v66 & 1) != 0) {
            char v67 = 1;
          }
          else {
            isLoggingTimeframeNone(from:)(v56, v61, v62, v63, v64, v65);
          }
          *(_BYTE *)(v0 + 266) = v67 & 1;
          uint64_t v166 = *(uint64_t **)(v0 + 1696);
          (*(void (**)(void, void))(*(void *)(v0 + 1736) + 8LL))( *(void *)(v0 + 1744),  *(void *)(v0 + 1728));
          uint64_t v167 = *v166;
          isQueryAboutStatusOrSchedule(from:)(*v166, v168, v169, v170, v171, v172);
          *(_BYTE *)(v0 + 26_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = v173 & 1;
          isQueryAboutDetails(from:)(v167, v174, v175, v176, v177, v178);
          *(_BYTE *)(v0 + 207_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v179 & 1;
          sub_500C(v166 + 16, v166[19]);
          uint64_t v180 = unk_18F5DC;
          sub_F4DE4((uint64_t)&dword_18F5D8);
          uint64_t v181 = (void *)swift_task_alloc(v180);
          *(void *)(v0 + 2040) = v181;
          *uint64_t v181 = v0;
          v181[1] = sub_F3FBC;
          sub_F4EF0( (uint64_t)v181,  v182,  v183,  v184,  v185,  v186,  v187,  v188,  v189,  v199,  v210,  v220,  v229,  v237,  v244,  v250,  v255,  v259);
          __asm { BR              X8 }
        }

        uint64_t v163 = *(void *)(v0 + 1696);
        sub_2A184();
        swift_bridgeObjectRelease();
        sub_500C((void *)(v163 + 128), *(void *)(v163 + 152));
        uint64_t v164 = (void *)swift_task_alloc(unk_18F5E4);
        *(void *)(v0 + 2024) = v164;
        *uint64_t v164 = v0;
        v164[1] = sub_F3CF8;
        sub_F4E30();
        __asm { BR              X7 }
      }

      uint64_t v68 = *(void *)(v0 + 1784);
      uint64_t v69 = *(void *)(v0 + 1776);
      uint64_t v70 = *(void *)(v0 + 1768);
      sub_2A184();
      uint64_t v71 = swift_bridgeObjectRelease();
      uint64_t v72 = Logger.wellness.unsafeMutableAddressor(v71);
      sub_A5DC(v72, v0 + 1552);
      uint64_t v73 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 16))(v68, v72, v70);
      Logger.logObject.getter(v73);
      os_log_type_t v74 = sub_AB70();
      if (sub_A988(v74))
      {
        uint64_t v75 = (_WORD *)sub_232D0();
        sub_366C0(v75);
        sub_A940(&dword_0, v76, v77, "Incorrect device state, this shouldn't get executed.");
        sub_92030();
      }

      uint64_t v78 = *(void *)(v0 + 1784);
      sub_F4DF8();
      sub_D970(v78, *(uint64_t (**)(uint64_t, uint64_t))(v69 + 8));
      sub_A13C((_OWORD *)(v44 + 48), (_OWORD *)(v0 + 432));
      sub_A178();
      sub_B25C0();
      sub_F4CA0();
      sub_F4D90();
      sub_3652C();
      uint64_t v79 = sub_F4CAC();
      uint64_t v200 = v81;
      uint64_t v211 = v80;
      uint64_t v221 = *(void *)(v0 + 1816);
      uint64_t v230 = *(void *)(v0 + 1808);
      uint64_t v238 = *(void *)(v0 + 1800);
      uint64_t v245 = *(void *)(v0 + 1792);
      uint64_t v251 = *(void *)(v0 + 1784);
      uint64_t v256 = *(void *)(v0 + 1760);
      uint64_t v260 = *(void *)(v0 + 1744);
      uint64_t v262 = *(void *)(v0 + 1720);
      uint64_t v264 = *(void *)(v0 + 1712);
      swift_task_dealloc(v79);
      sub_A8F4();
      sub_A78C();
      sub_A67C();
      sub_A7C8();
      sub_A760();
      sub_A8EC();
      sub_A910();
      sub_A864();
      uint64_t v82 = sub_A85C();
      uint64_t v90 = sub_AAD8(v82, v83, v84, v85, v86, v87, v88, v89, v189, v200);
      uint64_t v98 = sub_A888(v90, v91, v92, v93, v94, v95, v96, v97, v190, v201, v211);
      uint64_t v106 = sub_A854(v98, v99, v100, v101, v102, v103, v104, v105, v191, v202, v212, v221);
      uint64_t v114 = sub_A84C(v106, v107, v108, v109, v110, v111, v112, v113, v192, v203, v213, v222, v230);
      uint64_t v122 = sub_A844(v114, v115, v116, v117, v118, v119, v120, v121, v193, v204, v214, v223, v231, v238);
      uint64_t v130 = sub_A83C(v122, v123, v124, v125, v126, v127, v128, v129, v194, v205, v215, v224, v232, v239, v245);
      uint64_t v138 = sub_A95C(v130, v131, v132, v133, v134, v135, v136, v137, v195, v206, v216, v225, v233, v240, v246, v251);
      uint64_t v146 = sub_A954( v138,  v139,  v140,  v141,  v142,  v143,  v144,  v145,  v196,  v207,  v217,  v226,  v234,  v241,  v247,  v252,  v256);
      uint64_t v154 = sub_A938( v146,  v147,  v148,  v149,  v150,  v151,  v152,  v153,  v197,  v208,  v218,  v227,  v235,  v242,  v248,  v253,  v257,  v260);
      sub_A930( v154,  v155,  v156,  v157,  v158,  v159,  v160,  v161,  v198,  v209,  v219,  v228,  v236,  v243,  v249,  v254,  v258,  v261,  v262);
      swift_task_dealloc(v264);
      sub_F4E30();
      __asm { BR              X0 }
    }
  }

  sub_D7EC(*(void *)(v0 + 1696) + 128LL, v0 + 1312);
  sub_500C((void *)(v0 + 1312), *(void *)(v0 + 1336));
  uint64_t v33 = unk_18F5D4;
  sub_F4DE4((uint64_t)&dword_18F5D0);
  uint64_t v34 = (void *)swift_task_alloc(v33);
  *(void *)(v0 + 199_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v34;
  *uint64_t v34 = v0;
  v34[1] = sub_F35F4;
  sub_F4EF0((uint64_t)v34, v35, v36, v37, v38, v39, v40, v41, v189, v199, v210, v220, v229, v237, v244, v250, v255, v259);
  sub_F4E30();
  __asm { BR              X5 }

uint64_t sub_F35F4(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v2 + 1992LL);
  *(void *)(*(void *)v2 + 200Hasher.init(_seed:)(v3, 0LL) = a1;
  sub_36900(v3);
  if (v1)
  {
    sub_F4EB8();
    sub_36860();
    sub_2A184();
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  sub_A964();
  return sub_A810();
}

uint64_t sub_F3664()
{
  uint64_t v1 = *(void **)(v0 + 2000);
  uint64_t v2 = *(void *)(v0 + 1968);
  char v11 = *(_BYTE *)(v0 + 265);
  uint64_t v3 = *(void *)(v0 + 1928);
  uint64_t v4 = *(void *)(v0 + 1920);
  uint64_t v5 = *(void *)(v0 + 1912);
  uint64_t v6 = *(void *)(v0 + 1904);
  uint64_t v7 = _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 1312));
  static DialogPhase.error.getter(v7);
  uint64_t v8 = sub_DA2C(v4, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
  sub_B3FC4(v8, (uint64_t)sub_A633C);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v6);
  static String._unconditionallyBridgeFromObjectiveC(_:)([v1 patternId]);
  sub_F4E80();
  sub_F4EAC();
  *(void *)(v0 + 2008) = sub_F4D40();
  uint64_t v9 = (void *)swift_task_alloc(dword_18F894);
  *(void *)(v0 + 2016) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_F3788;
  return sub_F4804(*(void *)(v0 + 1856), (v11 & 1) == 0, *(void *)(v0 + 1976), *(void *)(v0 + 1984), v2 != 0);
}

uint64_t sub_F3788()
{
  return sub_A5D0();
}

uint64_t sub_F37D8()
{
  uint64_t v1 = *(void *)(v0 + 1864);
  uint64_t v2 = *(void *)(v0 + 1856);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v2, 1LL, v1) == 1)
  {
    uint64_t v3 = sub_F4BC0(v2, &qword_189CF8);
    uint64_t v4 = (void *)Logger.wellness.unsafeMutableAddressor(v3);
    sub_A5DC((uint64_t)v4, v0 + 1576);
    sub_F4DD0();
    sub_AB5C();
    os_log_type_t v5 = sub_AB70();
    if (sub_232DC(v5))
    {
      uint64_t v6 = (_WORD *)sub_232D0();
      *uint64_t v6 = 0;
      sub_3A440( &dword_0,  v7,  v8,  "Phone medication querying error's punchout URL construction failed, starting GenericErrorFlow.");
      sub_5050((uint64_t)v6);
    }

    uint64_t v9 = *(void **)(v0 + 2000);
    uint64_t v183 = *(void *)(v0 + 1944);
    uint64_t v186 = *(void *)(v0 + 1936);
    uint64_t v188 = *(void *)(v0 + 1960);
    uint64_t v10 = *(void *)(v0 + 1776);

    sub_89E0C(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
    sub_F4D74();
    sub_A178();
    sub_B25C0();
    sub_F4CA0();
    sub_F4D90();
    swift_release();

    sub_3652C();
    (*(void (**)(uint64_t, uint64_t))(v183 + 8))(v188, v186);
  }

  else
  {
    uint64_t v168 = v0 + 1672;
    uint64_t v188 = v0 + 1680;
    uint64_t v11 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(v0 + 1872) + 32LL))( *(void *)(v0 + 1896),  v2,  v1);
    uint64_t v12 = (void *)Logger.wellness.unsafeMutableAddressor(v11);
    sub_A5DC((uint64_t)v12, v0 + 1528);
    sub_F4DD0();
    sub_AB5C();
    os_log_type_t v13 = sub_AB70();
    if (sub_A988(v13))
    {
      uint64_t v14 = (_WORD *)sub_232D0();
      sub_366C0(v14);
      sub_A940(&dword_0, v15, v16, "Creating sequence flow.");
      sub_92030();
    }

    uint64_t v17 = *(void *)(v0 + 2008);
    uint64_t v174 = *(void **)(v0 + 2000);
    uint64_t v179 = *(void *)(v0 + 1944);
    uint64_t v183 = *(void *)(v0 + 1936);
    uint64_t v186 = *(void *)(v0 + 1960);
    uint64_t v18 = *(void *)(v0 + 1888);
    uint64_t v123 = *(void *)(v0 + 1872);
    uint64_t v134 = *(void *)(v0 + 1864);
    uint64_t v144 = *(void *)(v0 + 1896);
    uint64_t v19 = *(void *)(v0 + 1840);
    uint64_t v20 = *(void *)(v0 + 1776);
    uint64_t v21 = *(void *)(v0 + 1768);
    uint64_t v22 = *(void *)(v0 + 1760);
    uint64_t v23 = *(void **)(v0 + 1696);
    uint64_t v153 = *(void *)(v0 + 1752);
    uint64_t v161 = *(void *)(v0 + 1688);

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    uint64_t v24 = v23[4];
    uint64_t v25 = v23[5];
    sub_3C788(v23 + 1);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v25 + 16))(v189, v24, v25);
    uint64_t v26 = sub_494C(&qword_18A460);
    uint64_t v27 = sub_20308(v26, 48LL);
    *(_OWORD *)(v27 + 16) = xmmword_139EC0;
    *(void *)(v0 + 167_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v17;
    uint64_t v28 = sub_F4EA4();
    *(void *)(v27 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = Flow.eraseToAnyFlow()(v28);
    sub_500C(v23 + 1, v23[4]);
    sub_F4D98();
    sub_DA2C(v18, v144, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v123 + 16));
    sub_F4EC4((uint64_t)v190, v18);
    sub_2322C( &qword_18AFC8,  (uint64_t (*)(uint64_t))&type metadata accessor for AppPunchOutFlow,  (uint64_t)&protocol conformance descriptor for AppPunchOutFlow);
    uint64_t v29 = sub_B25C0();
    uint64_t v30 = sub_F4BF4(v22);
    *(void *)(v27 + 40) = v29;
    v190[0] = v27;
    specialized Array._endMutation()(v30, v31, v32);
    uint64_t v33 = sub_F4ED0();
    sub_20308(v33, 64LL);
    *(void *)(v0 + 1680) = sub_F4E98((uint64_t)v189);
    sub_2322C( &qword_18AFD8,  (uint64_t (*)(uint64_t))&type metadata accessor for SequenceFlow,  (uint64_t)&protocol conformance descriptor for SequenceFlow);
    static ExecuteResponse.complete<A>(next:)();
    swift_release();

    sub_A7A0(*(uint64_t (**)(uint64_t, uint64_t))(v123 + 8));
    (*(void (**)(uint64_t, uint64_t))(v179 + 8))(v186, v183);
    sub_3652C();
  }

  sub_F4C30();
  sub_A8F4();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  uint64_t v34 = sub_A85C();
  uint64_t v42 = sub_A970(v34, v35, v36, v37, v38, v39, v40, v41, v123);
  uint64_t v50 = sub_AAD8(v42, v43, v44, v45, v46, v47, v48, v49, v124, v134);
  uint64_t v58 = sub_A888(v50, v51, v52, v53, v54, v55, v56, v57, v125, v135, v144);
  uint64_t v66 = sub_A854(v58, v59, v60, v61, v62, v63, v64, v65, v126, v136, v145, v153);
  uint64_t v74 = sub_A84C(v66, v67, v68, v69, v70, v71, v72, v73, v127, v137, v146, v154, v161);
  uint64_t v82 = sub_A844(v74, v75, v76, v77, v78, v79, v80, v81, v128, v138, v147, v155, v162, v168);
  uint64_t v90 = sub_A83C(v82, v83, v84, v85, v86, v87, v88, v89, v129, v139, v148, v156, v163, v169, (uint64_t)v174);
  uint64_t v98 = sub_A95C(v90, v91, v92, v93, v94, v95, v96, v97, v130, v140, v149, v157, v164, v170, v175, v179);
  uint64_t v106 = sub_A954(v98, v99, v100, v101, v102, v103, v104, v105, v131, v141, v150, v158, v165, v171, v176, v180, v183);
  uint64_t v114 = sub_A938( v106,  v107,  v108,  v109,  v110,  v111,  v112,  v113,  v132,  v142,  v151,  v159,  v166,  v172,  v177,  v181,  v184,  v186);
  sub_A930( v114,  v115,  v116,  v117,  v118,  v119,  v120,  v121,  v133,  v143,  v152,  v160,  v167,  v173,  v178,  v182,  v185,  v187,  v188);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

#error "F3CC0: call analysis failed (funcsize=67)"
uint64_t sub_F3CF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v4 = *v2;
  swift_task_dealloc(*(void *)(*v2 + 2024));
  if (v1) {
    sub_36860();
  }
  else {
    *(void *)(v4 + 203_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a1;
  }
  sub_A964();
  return swift_task_switch(v5, v6, v7);
}

#error "F3E70: call analysis failed (funcsize=80)"
#error "F3F84: call analysis failed (funcsize=66)"
uint64_t sub_F3FBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v3 = *(void *)(*(void *)v2 + 2040LL);
  *(void *)(*(void *)v2 + 2048LL) = a1;
  sub_36900(v3);
  if (v1)
  {
    sub_F4EB8();
    sub_36860();
    sub_2A184();
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  sub_A964();
  return sub_A810();
}

uint64_t sub_F402C()
{
  uint64_t v4 = *(void *)(v0 + 1968);
  char v5 = *(_BYTE *)(v0 + 265);
  uint64_t v1 = *(void *)(v0 + 1704);
  static String._unconditionallyBridgeFromObjectiveC(_:)([*(id *)(v0 + 2048) patternId]);
  sub_F4E80();
  sub_F4EAC();
  *(void *)(v0 + 2056) = sub_F4D40();
  *(_DWORD *)(v0 + 268) = *(_DWORD *)(v1 + 48);
  uint64_t v2 = (void *)swift_task_alloc(dword_18F88C);
  *(void *)(v0 + 2064) = v2;
  void *v2 = v0;
  v2[1] = sub_F4128;
  return sub_F4964( *(void *)(v0 + 1720),  (v5 & 1) == 0,  *(void *)(v0 + 1976),  *(void *)(v0 + 1984),  v4 != 0,  *(_BYTE *)(v0 + 266),  *(_BYTE *)(v0 + 267),  *(_BYTE *)(v0 + 2072));
}

uint64_t sub_F4128(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 2064LL);
  *(_BYTE *)(*(void *)v1 + 2073LL) = a1;
  sub_36900(v2);
  sub_249D4();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_F417C()
{
  char v1 = *(_BYTE *)(v0 + 2073);
  uint64_t v2 = *(void *)(v0 + 1864);
  uint64_t v3 = *(void *)(v0 + 1720);
  uint64_t v4 = *(void *)(v0 + 1712);
  uint64_t v5 = *(void *)(v0 + 1704);
  *(_BYTE *)(v3 + *(int *)(v0 + 268)) = v1;
  uint64_t v6 = *(int *)(v5 + 48);
  sub_35468(v3, v4);
  *(_BYTE *)(v4 + v6) = v1;
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v4, 1LL, v2) == 1)
  {
    char v7 = *(_BYTE *)(v0 + 2073);
    uint64_t v8 = *(void *)(v0 + 1776);
    uint64_t v9 = sub_F4BC0(*(void *)(v0 + 1712), &qword_189CF8);
    uint64_t v10 = Logger.wellness.unsafeMutableAddressor(v9);
    uint64_t v11 = (void *)v10;
    if ((v7 & 1) != 0)
    {
      uint64_t v12 = *(void *)(v0 + 1792);
      sub_A5DC(v10, v0 + 1456);
      sub_F4E8C(v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16));
      sub_AB5C();
      os_log_type_t v13 = sub_AB70();
      if (sub_232DC(v13))
      {
        uint64_t v14 = (_WORD *)sub_232D0();
        *uint64_t v14 = 0;
        sub_3A440(&dword_0, v15, v16, "Punchout was expected but URL construction failed, returning GenericErrorFlow.");
        sub_5050((uint64_t)v14);
      }

      uint64_t v17 = *(void **)(v0 + 2048);
      uint64_t v200 = *(void *)(v0 + 1936);
      uint64_t v204 = *(void *)(v0 + 1952);
      uint64_t v18 = *(void *)(v0 + 1776);
      uint64_t v193 = *(void *)(v0 + 1720);
      uint64_t v197 = *(void *)(v0 + 1944);

      sub_89E0C(*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
      sub_F4D74();
      sub_A178();
      sub_B25C0();
      sub_F4CA0();
      sub_F4D90();
      swift_release();

      sub_3652C();
      sub_F4BC0(v193, &qword_18F880);
      (*(void (**)(uint64_t, uint64_t))(v197 + 8))(v204, v200);
    }

    else
    {
      uint64_t v42 = *(void *)(v0 + 1800);
      sub_A5DC(v10, v0 + 1432);
      sub_F4E8C(v42, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16));
      sub_23374();
      os_log_type_t v43 = sub_AB70();
      if (sub_A988(v43))
      {
        uint64_t v44 = (_WORD *)sub_232D0();
        sub_366C0(v44);
        sub_A940(&dword_0, v45, v46, "Punchout not required, producing response flow.");
        sub_92030();
      }

      uint64_t v47 = *(void *)(v0 + 2056);
      uint64_t v48 = *(void **)(v0 + 2048);
      uint64_t v49 = *(void *)(v0 + 1944);
      uint64_t v202 = *(void *)(v0 + 1936);
      uint64_t v205 = *(void *)(v0 + 1952);
      uint64_t v50 = *(void *)(v0 + 1776);
      uint64_t v51 = *(void *)(v0 + 1720);

      sub_A7A0(*(uint64_t (**)(uint64_t, uint64_t))(v50 + 8));
      static ExecuteResponse.complete(next:)(v47);
      swift_release();

      sub_F4BC0(v51, &qword_18F880);
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v205, v202);
    }
  }

  else
  {
    uint64_t v19 = (*(uint64_t (**)(void, void, void))(*(void *)(v0 + 1872) + 32LL))( *(void *)(v0 + 1880),  *(void *)(v0 + 1712),  *(void *)(v0 + 1864));
    uint64_t v20 = Logger.wellness.unsafeMutableAddressor(v19);
    sub_A5DC(v20, v0 + 1504);
    sub_232F4();
    sub_23374();
    os_log_type_t v21 = sub_AB70();
    if (sub_A988(v21))
    {
      uint64_t v22 = (_WORD *)sub_232D0();
      sub_366C0(v22);
      sub_A940(&dword_0, v23, v24, "Punchout is required, creating sequence flow.");
      sub_92030();
    }

    uint64_t v25 = *(void *)(v0 + 2056);
    uint64_t v189 = *(void **)(v0 + 2048);
    uint64_t v194 = *(void *)(v0 + 1944);
    uint64_t v198 = *(void *)(v0 + 1936);
    uint64_t v201 = *(void *)(v0 + 1952);
    uint64_t v26 = *(void *)(v0 + 1888);
    uint64_t v137 = *(void *)(v0 + 1872);
    uint64_t v146 = *(void *)(v0 + 1864);
    uint64_t v156 = *(void *)(v0 + 1880);
    uint64_t v27 = *(void *)(v0 + 1808);
    uint64_t v28 = *(void *)(v0 + 1776);
    uint64_t v29 = *(void *)(v0 + 1768);
    uint64_t v30 = *(void *)(v0 + 1760);
    uint64_t v184 = *(void *)(v0 + 1720);
    uint64_t v31 = *(void **)(v0 + 1696);
    uint64_t v165 = *(void *)(v0 + 1752);

    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    uint64_t v32 = v31[4];
    uint64_t v33 = v31[5];
    sub_3C788(v31 + 1);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v33 + 16))(v207, v32, v33);
    uint64_t v34 = sub_494C(&qword_18A460);
    uint64_t v35 = sub_20308(v34, 48LL);
    *(_OWORD *)(v35 + 16) = xmmword_139EC0;
    *(void *)(v0 + 1664) = v25;
    uint64_t v36 = sub_F4EA4();
    *(void *)(v35 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = Flow.eraseToAnyFlow()(v36);
    sub_500C(v31 + 1, v31[4]);
    sub_F4D98();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v137 + 16))(v26, v156, v146);
    sub_F4EC4((uint64_t)v208, v26);
    sub_2322C( &qword_18AFC8,  (uint64_t (*)(uint64_t))&type metadata accessor for AppPunchOutFlow,  (uint64_t)&protocol conformance descriptor for AppPunchOutFlow);
    uint64_t v37 = Flow.eraseToAnyFlow()(v165);
    uint64_t v38 = sub_F4BF4(v30);
    *(void *)(v35 + 40) = v37;
    v208[0] = v35;
    specialized Array._endMutation()(v38, v39, v40);
    uint64_t v41 = sub_F4ED0();
    sub_20308(v41, 64LL);
    *(void *)(v0 + 1656) = sub_F4E98((uint64_t)v207);
    sub_2322C( &qword_18AFD8,  (uint64_t (*)(uint64_t))&type metadata accessor for SequenceFlow,  (uint64_t)&protocol conformance descriptor for SequenceFlow);
    static ExecuteResponse.complete<A>(next:)();
    swift_release();

    sub_D970(v156, *(uint64_t (**)(uint64_t, uint64_t))(v137 + 8));
    sub_F4BC0(v184, &qword_18F880);
    (*(void (**)(uint64_t, uint64_t))(v194 + 8))(v201, v198);
    sub_3652C();
  }

  uint64_t v52 = sub_F4CAC();
  uint64_t v147 = v54;
  uint64_t v157 = v53;
  uint64_t v166 = *(void *)(v0 + 1816);
  uint64_t v173 = *(void *)(v0 + 1808);
  uint64_t v179 = *(void *)(v0 + 1800);
  uint64_t v185 = *(void *)(v0 + 1792);
  uint64_t v190 = *(void *)(v0 + 1784);
  uint64_t v195 = *(void *)(v0 + 1760);
  uint64_t v199 = *(void *)(v0 + 1744);
  uint64_t v203 = *(void *)(v0 + 1720);
  uint64_t v206 = *(void *)(v0 + 1712);
  swift_task_dealloc(v52);
  sub_A8F4();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  uint64_t v55 = sub_A85C();
  uint64_t v63 = sub_A888(v55, v56, v57, v58, v59, v60, v61, v62, v128, v137, v147);
  uint64_t v71 = sub_A854(v63, v64, v65, v66, v67, v68, v69, v70, v129, v138, v148, v157);
  uint64_t v79 = sub_A84C(v71, v72, v73, v74, v75, v76, v77, v78, v130, v139, v149, v158, v166);
  uint64_t v87 = sub_A844(v79, v80, v81, v82, v83, v84, v85, v86, v131, v140, v150, v159, v167, v173);
  uint64_t v95 = sub_A83C(v87, v88, v89, v90, v91, v92, v93, v94, v132, v141, v151, v160, v168, v174, v179);
  uint64_t v103 = sub_A95C(v95, v96, v97, v98, v99, v100, v101, v102, v133, v142, v152, v161, v169, v175, v180, v185);
  uint64_t v111 = sub_A954(v103, v104, v105, v106, v107, v108, v109, v110, v134, v143, v153, v162, v170, v176, v181, v186, v190);
  uint64_t v119 = sub_A938( v111,  v112,  v113,  v114,  v115,  v116,  v117,  v118,  v135,  v144,  v154,  v163,  v171,  v177,  v182,  v187,  v191,  v195);
  sub_A930( v119,  v120,  v121,  v122,  v123,  v124,  v125,  v126,  v136,  v145,  v155,  v164,  v172,  v178,  v183,  v188,  v192,  v196,  v199);
  swift_task_dealloc(v203);
  swift_task_dealloc(v206);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

#error "F47CC: call analysis failed (funcsize=66)"
uint64_t sub_F4804(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  *(_BYTE *)(v6 + 73) = a5;
  *(void *)(v6 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a4;
  *(void *)(v6 + 40) = v5;
  *(_BYTE *)(v6 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a2;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a3;
  return swift_task_switch(sub_F4828, 0LL, 0LL);
}

uint64_t sub_F4828()
{
  if ((*(_BYTE *)(v0 + 72) & 1) == 0 && *(_BYTE *)(v0 + 73) == 1 && *(void *)(v0 + 32))
  {
    char v1 = (void *)sub_F4D08();
    *(void *)(v0 + 48) = v1;
    uint64_t v2 = sub_F4DB0(v1, (uint64_t)sub_F48B0);
    return sub_F4D80(v2, v3, v4, v5, v6);
  }

  else
  {
    URL.init(string:)();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_F48B0(uint64_t a1, uint64_t a2)
{
  return sub_A5D0();
}

uint64_t sub_F48DC()
{
  v2._object = (void *)0x80000000001466A0LL;
  v2._countAndFlagsBits = 0xD00000000000006ELL;
  String.append(_:)(v2);
  swift_bridgeObjectRetain(v0);
  sub_F4E4C();
  uint64_t v3 = sub_2A184();
  sub_F4E20(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);
  sub_249D4();
  sub_2A184();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_F4964(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, char a6, char a7, char a8)
{
  *(_BYTE *)(v9 + 76) = a8;
  *(_BYTE *)(v9 + 75) = a7;
  *(_BYTE *)(v9 + 74) = a6;
  *(_BYTE *)(v9 + 73) = a5;
  *(void *)(v9 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a4;
  *(void *)(v9 + 40) = v8;
  *(_BYTE *)(v9 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a2;
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a3;
  return swift_task_switch(sub_F4994, 0LL, 0LL);
}

uint64_t sub_F4994()
{
  if ((*(_BYTE *)(v0 + 72) & 1) != 0)
  {
    if (*(_BYTE *)(v0 + 74) == 1 && *(_BYTE *)(v0 + 75) != 0) {
      goto LABEL_14;
    }
LABEL_15:
    uint64_t v11 = *(void *)(v0 + 16);
    uint64_t v12 = type metadata accessor for URL(0LL);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v11, 1LL, 1LL, v12);
    uint64_t v10 = 0LL;
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v10);
  }

  int v2 = *(unsigned __int8 *)(v0 + 74);
  if (v2 == 1 && ((*(_BYTE *)(v0 + 75) | *(_BYTE *)(v0 + 76)) & 1) != 0)
  {
    if (*(void *)(v0 + 32))
    {
      uint64_t v3 = (void *)sub_F4D08();
      *(void *)(v0 + 48) = v3;
      uint64_t v4 = sub_F4DB0(v3, (uint64_t)sub_F4A80);
      return sub_F4D80(v4, v5, v6, v7, v8);
    }

    goto LABEL_14;
  }

  if ((*(_BYTE *)(v0 + 73) & 1) != 0 || ((v2 ^ 1) & 1) != 0) {
    goto LABEL_15;
  }
LABEL_14:
  URL.init(string:)();
  uint64_t v10 = 1LL;
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v10);
}

uint64_t sub_F4A80(uint64_t a1, uint64_t a2)
{
  return sub_A5D0();
}

uint64_t sub_F4AAC()
{
  v2._object = (void *)0x8000000000145600LL;
  v2._countAndFlagsBits = 0xD000000000000044LL;
  String.append(_:)(v2);
  swift_bridgeObjectRetain(v0);
  sub_F4E4C();
  uint64_t v3 = sub_2A184();
  sub_F4E20(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);
  sub_249D4();
  sub_2A184();
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(1LL);
}

uint64_t sub_F4B3C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18F87C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_A108;
  return sub_F2E38(a1);
}

uint64_t sub_F4B8C(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_F4BC0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_494C(a2);
  sub_23334(*(void *)(v3 - 8));
  return a1;
}

uint64_t sub_F4BF4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AppPunchOutFlow(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_F4C30()
{
  return swift_task_dealloc(*(void *)(v0 + 1960));
}

void *sub_F4CA0()
{
  return sub_A1B4(v0);
}

uint64_t sub_F4CAC()
{
  return *(void *)(v0 + 1960);
}

uint64_t sub_F4CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v2;
  *(void *)(v3 - 8) = *v2;
  uint64_t v5 = v4[6];
  *(void *)(v3 - 8) = *v2;
  void v4[7] = a1;
  v4[8] = a2;
  return swift_task_dealloc(v5);
}

uint64_t sub_F4D08()
{
  uint64_t v1 = *(void **)(v0 + 40);
  uint64_t v2 = v1[30];
  sub_500C(v1 + 26, v1[29]);
  return swift_task_alloc(*(unsigned int *)(*(void *)(v2 + 8) + 4LL));
}

uint64_t sub_F4D40()
{
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(void *)(v3 + 80);
  sub_500C(v2, v4);
  return dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)( v0,  v1,  v4,  v5);
}

_OWORD *sub_F4D74()
{
  return sub_A13C(v1, v0);
}

uint64_t sub_F4D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t sub_F4D90()
{
  return static ExecuteResponse.complete(next:)(v0);
}

uint64_t sub_F4D98()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(v0, v1);
}

uint64_t sub_F4DB0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 24);
}

uint64_t sub_F4DD0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v0, v2);
}

uint64_t sub_F4DE4@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v3 + 24) = v1 + a1;
  return swift_bridgeObjectRetain(v2);
}

void sub_F4DF8()
{
}

void sub_F4E0C()
{
}

uint64_t sub_F4E20( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return URL.init(string:)(a9, a10);
}

  ;
}

void sub_F4E4C()
{
  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

  ;
}

uint64_t sub_F4E74()
{
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
}

void sub_F4E80()
{
}

uint64_t sub_F4E8C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

uint64_t sub_F4E98(uint64_t a1)
{
  return SequenceFlow.init(aceService:flows:)(a1, v1);
}

uint64_t sub_F4EA4()
{
  return type metadata accessor for AnyFlow(0LL);
}

uint64_t sub_F4EAC()
{
  return OutputGenerationManifest.responseViewId.setter(v0, v1);
}

uint64_t sub_F4EB8()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 1984));
}

uint64_t sub_F4EC4(uint64_t a1, uint64_t a2)
{
  return AppPunchOutFlow.init(aceService:url:instrumentationTask:)(a1, a2, 0LL, 0LL);
}

uint64_t sub_F4ED0()
{
  return type metadata accessor for SequenceFlow(0LL);
}

  ;
}

uint64_t sub_F4EF0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  return a18 & 1;
}

uint64_t sub_F4F04()
{
  return Logger.wellness.unsafeMutableAddressor();
}

uint64_t sub_F4F14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = Logger.wellness.unsafeMutableAddressor(v4);
  swift_beginAccess(v7, v15, 0LL, 0LL);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v7, v2);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_0, v9, v10, "Tried building deeplink on unsupported platform", v11, 2u);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  uint64_t v12 = type metadata accessor for URL(0LL);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 1LL, 1LL, v12);
}

uint64_t SnippetHeaderModel.init(categoryLabel:categoryListIconName:categoryIdentifier:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = sub_ABF4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL))(a6, a1, v12);
  uint64_t result = type metadata accessor for SnippetHeaderModel(0LL);
  uint64_t v14 = (void *)(a6 + *(int *)(result + 20));
  *uint64_t v14 = a2;
  v14[1] = a3;
  uint64_t v15 = (void *)(a6 + *(int *)(result + 24));
  *uint64_t v15 = a4;
  v15[1] = a5;
  return result;
}

uint64_t type metadata accessor for SnippetHeaderModel(uint64_t a1)
{
  uint64_t result = qword_18F908;
  if (!qword_18F908) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SnippetHeaderModel);
  }
  return result;
}

uint64_t sub_F5100(uint64_t a1, unint64_t a2)
{
  BOOL v3 = a1 == 0x79726F6765746163LL && a2 == 0xED00006C6562614CLL;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x79726F6765746163LL, 0xED00006C6562614CLL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  if (a1 == 0xD000000000000014LL && a2 == 0x8000000000146710LL)
  {
    unint64_t v6 = 0x8000000000146710LL;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x8000000000146710LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_12;
  }

  if (a1 == 0xD000000000000012LL && a2 == 0x8000000000146730LL)
  {
    swift_bridgeObjectRelease(0x8000000000146730LL);
    return 2LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000000146730LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_F525C(char a1)
{
  if (!a1) {
    return 0x79726F6765746163LL;
  }
  if (a1 == 1) {
    return 0xD000000000000014LL;
  }
  return 0xD000000000000012LL;
}

uint64_t sub_F52C4()
{
  return sub_F525C(*v0);
}

uint64_t sub_F52CC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_F5100(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_F52F0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = variable initialization expression of LogHealthKitQuantityFlow.taskLogger();
  *a1 = result;
  return result;
}

uint64_t sub_F5314(uint64_t a1)
{
  unint64_t v2 = sub_F54CC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F533C(uint64_t a1)
{
  unint64_t v2 = sub_F54CC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SnippetHeaderModel.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_494C(&qword_18F898);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_6D44();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_500C(a1, v10);
  unint64_t v12 = sub_F54CC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SnippetHeaderModel.CodingKeys,  &type metadata for SnippetHeaderModel.CodingKeys,  v12,  v10,  v11);
  char v25 = 0;
  uint64_t v13 = type metadata accessor for SpeakableString(0LL);
  uint64_t v14 = sub_2322C( &qword_18AAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString,  (uint64_t)&protocol conformance descriptor for SpeakableString);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v25, v5, v13, v14);
  if (!v2)
  {
    uint64_t v15 = type metadata accessor for SnippetHeaderModel(0LL);
    uint64_t v16 = (uint64_t *)(v3 + *(int *)(v15 + 20));
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    char v24 = 1;
    sub_5A978(v17, v18, (uint64_t)&v24);
    uint64_t v19 = (uint64_t *)(v3 + *(int *)(v15 + 24));
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    char v23 = 2;
    sub_5A978(v20, v21, (uint64_t)&v23);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

unint64_t sub_F54CC()
{
  unint64_t result = qword_18F8A0;
  if (!qword_18F8A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_13DE44, &type metadata for SnippetHeaderModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18F8A0);
  }

  return result;
}

uint64_t SnippetHeaderModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = type metadata accessor for SpeakableString(0LL);
  uint64_t v3 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  sub_6D44();
  uint64_t v27 = v5 - v4;
  uint64_t v28 = sub_494C(&qword_18F8A8);
  uint64_t v6 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  sub_6D44();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for SnippetHeaderModel(0LL);
  __chkstk_darwin(v10);
  sub_6D44();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  sub_500C(a1, v14);
  unint64_t v16 = sub_F54CC();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SnippetHeaderModel.CodingKeys,  &type metadata for SnippetHeaderModel.CodingKeys,  v16,  v14,  v15);
  if (v29) {
    return sub_36EC4();
  }
  uint64_t v30 = v6;
  char v33 = 0;
  sub_2322C( &qword_18AAC0,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString,  (uint64_t)&protocol conformance descriptor for SpeakableString);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v26, &v33, v28, v26);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v13, v27, v26);
  char v32 = 1;
  uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)(&v32, v28);
  uint64_t v18 = (uint64_t *)(v13 + *(int *)(v10 + 20));
  *uint64_t v18 = v17;
  v18[1] = v19;
  char v31 = 2;
  uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)(&v31, v28);
  uint64_t v22 = v21;
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v9, v28);
  char v23 = (uint64_t *)(v13 + *(int *)(v10 + 24));
  *char v23 = v20;
  v23[1] = v22;
  sub_F5788(v13, a2);
  sub_36EC4();
  return sub_F57CC(v13);
}

uint64_t sub_F5788(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SnippetHeaderModel(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_F57CC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SnippetHeaderModel(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_F5808()
{
  return sub_2322C( &qword_18AAC8,  type metadata accessor for SnippetHeaderModel,  (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
}

uint64_t sub_F5834()
{
  return sub_2322C( &qword_18AAA8,  type metadata accessor for SnippetHeaderModel,  (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
}

uint64_t sub_F5860@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SnippetHeaderModel.init(from:)(a1, a2);
}

uint64_t sub_F5874(void *a1)
{
  return SnippetHeaderModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for SnippetHeaderModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v16);
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)a1 + v9);
    uint64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v15);
  }

  return a1;
}

uint64_t destroy for SnippetHeaderModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 20) + 8));
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t initializeWithCopy for SnippetHeaderModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  return a1;
}

uint64_t assignWithCopy for SnippetHeaderModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  *uint64_t v13 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t initializeWithTake for SnippetHeaderModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for SnippetHeaderModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v12 = v8[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  uint64_t v18 = v14[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for SnippetHeaderModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_F5BAC);
}

uint64_t sub_F5BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_ABF4();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, a2, v6);
  }
  unint64_t v8 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(v8) = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SnippetHeaderModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_F5C30);
}

uint64_t sub_F5C30(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_ABF4();
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3) {
    return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_F5CA4(uint64_t a1)
{
  uint64_t result = type metadata accessor for SpeakableString(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_13DD68;
    void v4[2] = &unk_13DD68;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for SnippetHeaderModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(sub_56254(v2[492], v4) = 1;
  }
  else {
    LODWORD(sub_56254(v2[492], v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_F5D64 + 4 * byte_13DCA5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_F5D98 + 4 * byte_13DCA0[v4]))();
}

uint64_t sub_F5D98(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_F5DA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xF5DA8LL);
  }
  return result;
}

uint64_t sub_F5DB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xF5DBCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_F5DC0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_F5DC8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SnippetHeaderModel.CodingKeys()
{
  return &type metadata for SnippetHeaderModel.CodingKeys;
}

unint64_t sub_F5DE8()
{
  unint64_t result = qword_18F948;
  if (!qword_18F948)
  {
    unint64_t result = swift_getWitnessTable(&unk_13DE1C, &type metadata for SnippetHeaderModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18F948);
  }

  return result;
}

unint64_t sub_F5E28()
{
  unint64_t result = qword_18F950;
  if (!qword_18F950)
  {
    unint64_t result = swift_getWitnessTable(&unk_13DD8C, &type metadata for SnippetHeaderModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18F950);
  }

  return result;
}

unint64_t sub_F5E68()
{
  unint64_t result = qword_18F958[0];
  if (!qword_18F958[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_13DDB4, &type metadata for SnippetHeaderModel.CodingKeys);
    atomic_store(result, qword_18F958);
  }

  return result;
}

uint64_t sub_F5EA4()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 88) + 8LL))(v0, *(void *)(v1 - 96));
}

uint64_t destroy for GetHealthQuantityFlow(void *a1)
{
  return swift_unknownObjectRelease(a1[31]);
}

uint64_t initializeWithCopy for GetHealthQuantityFlow(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  __int128 v5 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 48, a2 + 48);
  __int128 v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 88, a2 + 88);
  __int128 v7 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 128, a2 + 128);
  __int128 v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 168, a2 + 168);
  __int128 v9 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 208, a2 + 208);
  uint64_t v10 = *(void *)(a2 + 248);
  *(void *)(a1 + 248) = v10;
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  swift_unknownObjectRetain(v10);
  return a1;
}

uint64_t assignWithCopy for GetHealthQuantityFlow(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  sub_7030((void *)(a1 + 8), (void *)(a2 + 8));
  sub_7030((void *)(a1 + 48), (void *)(a2 + 48));
  sub_7030((void *)(a1 + 88), (void *)(a2 + 88));
  sub_7030((void *)(a1 + 128), (void *)(a2 + 128));
  sub_7030((void *)(a1 + 168), (void *)(a2 + 168));
  sub_7030((void *)(a1 + 208), (void *)(a2 + 208));
  uint64_t v4 = *(void *)(a2 + 248);
  uint64_t v5 = *(void *)(a1 + 248);
  *(void *)(a1 + 248) = v4;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v5);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  return a1;
}

void *initializeWithTake for GetHealthQuantityFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x101uLL);
}

uint64_t assignWithTake for GetHealthQuantityFlow(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 48));
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 88));
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 128));
  __int128 v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 168));
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 208));
  __int128 v6 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v6;
  uint64_t v7 = *(void *)(a2 + 248);
  uint64_t v8 = *(void *)(a1 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v7;
  swift_unknownObjectRelease(v8);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  return a1;
}

uint64_t getEnumTagSinglePayload for GetHealthQuantityFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 257))
    {
      LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GetHealthQuantityFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 248) = 0LL;
    *(_OWORD *)(result + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 256) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 25_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 25_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for GetHealthQuantityFlow()
{
  return &type metadata for GetHealthQuantityFlow;
}

uint64_t sub_F624C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_8957C();
  return Flow.deferToExecuteAsync(_:)(a1, a2, &type metadata for GetHealthQuantityFlow, v4);
}

uint64_t sub_F628C(uint64_t a1)
{
  v2[103] = v1;
  v2[102] = a1;
  uint64_t v3 = type metadata accessor for UnavailableDataFlow(0LL);
  v2[104] = v3;
  v2[105] = sub_A5C0(*(void *)(v3 - 8));
  uint64_t v4 = sub_494C(&qword_189BA0);
  v2[106] = sub_D8CC(*(void *)(v4 - 8));
  v2[107] = sub_A5B8();
  uint64_t v5 = type metadata accessor for CATOption(0LL);
  v2[108] = sub_A5C0(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v2[109] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[110] = v7;
  v2[111] = sub_D8CC(v7);
  v2[112] = sub_A5B8();
  uint64_t v8 = sub_ABEC();
  v2[113] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[114] = v9;
  v2[115] = sub_A5C0(v9);
  uint64_t v10 = sub_494C(&qword_189CE8);
  v2[116] = sub_D8CC(*(void *)(v10 - 8));
  v2[117] = sub_A5B8();
  v2[118] = sub_A5B8();
  v2[119] = sub_A5B8();
  uint64_t v11 = sub_A8E4();
  v2[120] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[121] = v12;
  v2[122] = sub_D8CC(v12);
  v2[123] = sub_A5B8();
  v2[124] = sub_A5B8();
  v2[125] = sub_A5B8();
  v2[126] = sub_A5B8();
  v2[127] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_F63B4()
{
  uint64_t v1 = *(void **)(v0 + 824);
  unint64_t v2 = sub_F6FF4(*(unsigned __int8 *)v1, v1 + 1);
  *(void *)(v0 + 1024) = v2;
  FlowTaskLogger.taskStart()();
  uint64_t v3 = v1[9];
  uint64_t v4 = v1[10];
  sub_3A484(v1 + 6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  uint64_t v5 = *(void *)(v0 + 728);
  sub_3A484((void *)(v0 + 704));
  char v6 = dispatch thunk of DeviceState.isWatch.getter(v5);
  uint64_t v7 = _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 704));
  if ((v6 & 1) == 0) {
    goto LABEL_13;
  }
  id v8 = sub_5693C(v7, "start");
  if (!v8)
  {
    sub_6D78(*(void *)(v0 + 952), v9, v10, *(void *)(v0 + 960));
    goto LABEL_9;
  }

  uint64_t v11 = v8;
  uint64_t v12 = *(void *)(v0 + 968);
  uint64_t v13 = *(void *)(v0 + 960);
  uint64_t v14 = *(void *)(v0 + 952);
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v8);

  uint64_t v15 = *(uint64_t (**)(uint64_t, void, uint64_t))(v12 + 32);
  sub_F861C();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v14, 0LL, 1LL, v13);
  sub_A614(v14, 1LL, v13);
  if (v16)
  {
LABEL_9:
    uint64_t v32 = *(void *)(v0 + 952);
LABEL_12:
    sub_A4A4(v32, &qword_189CE8);
    goto LABEL_13;
  }

  uint64_t v17 = v15(*(void *)(v0 + 1016), *(void *)(v0 + 952), *(void *)(v0 + 960));
  id v18 = sub_5693C(v17, "end");
  if (!v18)
  {
    sub_6D78(*(void *)(v0 + 944), v19, v20, *(void *)(v0 + 960));
    goto LABEL_11;
  }

  uint64_t v21 = v18;
  uint64_t v22 = *(void *)(v0 + 960);
  uint64_t v23 = *(void *)(v0 + 944);
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v18);

  sub_F861C();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v23, 0LL, 1LL, v22);
  sub_A614(v23, 1LL, v22);
  if (v16)
  {
LABEL_11:
    uint64_t v33 = *(void *)(v0 + 944);
    (*(void (**)(void, void))(*(void *)(v0 + 968) + 8LL))( *(void *)(v0 + 1016),  *(void *)(v0 + 960));
    uint64_t v32 = v33;
    goto LABEL_12;
  }

  uint64_t v24 = *(void *)(v0 + 1008);
  uint64_t v25 = *(void *)(v0 + 1000);
  uint64_t v26 = *(void *)(v0 + 992);
  uint64_t v27 = *(void *)(v0 + 968);
  uint64_t v28 = *(void *)(v0 + 960);
  uint64_t v29 = *(void *)(v0 + 920);
  uint64_t v132 = *(void *)(v0 + 1016);
  uint64_t v135 = *(void *)(v0 + 912);
  uint64_t v137 = *(void *)(v0 + 904);
  v15(v25, *(void *)(v0 + 944), v28);
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16);
  v30(v24, v132, v28);
  v30(v26, v25, v28);
  DateInterval.init(start:end:)(v24, v26);
  LOBYTE(v30) = ((uint64_t (*)(uint64_t))isWithinGenericRetentionPolicy(dateInterval:))(v29);
  (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v29, v137);
  if ((v30 & 1) == 0)
  {
    uint64_t v52 = *(void *)(v0 + 1016);
    uint64_t v53 = *(void *)(v0 + 1000);
    FlowTaskLogger.unsupported()();
    sub_5A9C0((uint64_t *)(v0 + 344));
    sub_A928C();
    static ExecuteResponse.complete<A>(next:)();

    sub_BA7A8((void *)(v0 + 344));
    sub_BB04C(v53);
    sub_BB04C(v52);
    sub_F8538();
    sub_A760();
    sub_A8EC();
    sub_A910();
    sub_A864();
    sub_A85C();
    sub_A8F4();
    sub_A78C();
    sub_A67C();
    uint64_t v54 = sub_A7C8();
    uint64_t v62 = sub_A970(v54, v55, v56, v57, v58, v59, v60, v61, v110);
    uint64_t v70 = sub_AAD8(v62, v63, v64, v65, v66, v67, v68, v69, v111, v117);
    uint64_t v78 = sub_A888(v70, v71, v72, v73, v74, v75, v76, v77, v112, v118, v123);
    uint64_t v86 = sub_A854(v78, v79, v80, v81, v82, v83, v84, v85, v113, v119, v124, v128);
    uint64_t v94 = sub_A84C(v86, v87, v88, v89, v90, v91, v92, v93, v114, v120, v125, v129, v132);
    uint64_t v102 = sub_A844(v94, v95, v96, v97, v98, v99, v100, v101, v115, v121, v126, v130, v133, v135);
    sub_A83C(v102, v103, v104, v105, v106, v107, v108, v109, v116, v122, v127, v131, v134, v136, v137);
    return sub_57E74(*(uint64_t (**)(void))(v0 + 8));
  }

  uint64_t v31 = *(void *)(v0 + 1016);
  sub_F1980(*(void *)(v0 + 1000));
  uint64_t v7 = sub_F1980(v31);
LABEL_13:
  uint64_t v34 = (void *)(v0 + 744);
  uint64_t v35 = *(void *)(v0 + 896);
  uint64_t v36 = *(void *)(v0 + 880);
  uint64_t v37 = *(void *)(v0 + 872);
  uint64_t v38 = Logger.wellness.unsafeMutableAddressor(v7);
  *(void *)(v0 + 103_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v38;
  sub_A5DC(v38, v0 + 744);
  uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16);
  *(void *)(v0 + 1040) = v39;
  v39(v35, v38, v37);
  id v40 = v2;
  sub_A86C();
  os_log_type_t v41 = sub_AB70();
  if (sub_A634(v41))
  {
    uint64_t v42 = (uint8_t *)sub_A5E8(12LL);
    os_log_type_t v43 = (void *)sub_A5E8(8LL);
    *(_DWORD *)uint64_t v42 = 138412290;
    *(void *)(v0 + 808) = v40;
    id v44 = v40;
    sub_A738(v0 + 808, v0 + 816);
    *os_log_type_t v43 = v40;

    sub_DA24(&dword_0, (os_log_s *)(v0 + 744), (os_log_type_t)v37, "Executing intent: %@", v42);
    sub_494C(&qword_189CB8);
    sub_A81C((uint64_t)v43);
    sub_5050((uint64_t)v43);
    sub_5050((uint64_t)v42);
  }

  else
  {

    uint64_t v34 = v40;
  }

  uint64_t v45 = *(void *)(v0 + 896);
  uint64_t v46 = *(void *)(v0 + 880);
  uint64_t v47 = *(void *)(v0 + 872);
  uint64_t v48 = *(void *)(v0 + 824);

  uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
  *(void *)(v0 + 1048) = v49;
  v49(v45, v47);
  uint64_t v50 = *(void **)(v48 + 248);
  *(void *)(v0 + 56) = v0 + 792;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_F68A8;
  *(void *)(v0 + 696) = swift_continuation_init(v0 + 16, 0LL);
  *(void *)(v0 + 664) = _NSConcreteStackBlock;
  *(void *)(v0 + 67_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0x40000000LL;
  *(void *)(v0 + 680) = sub_7ED0;
  *(void *)(v0 + 688) = &unk_180D78;
  [v50 handleGetHealthQuantity:v40 completion:v0 + 664];
  return swift_continuation_await(v0 + 16);
}

uint64_t sub_F68A8()
{
  return sub_A5D0();
}

uint64_t sub_F68E8()
{
  uint64_t v1 = *(void (**)(uint64_t, os_log_s *, uint64_t))(v0 + 1040);
  unint64_t v2 = *(os_log_s **)(v0 + 1032);
  uint64_t v3 = *(void *)(v0 + 888);
  uint64_t v4 = *(void *)(v0 + 872);
  uint64_t v5 = *(void **)(v0 + 792);
  *(void *)(v0 + 1056) = v5;
  sub_A5DC((uint64_t)v2, v0 + 768);
  v1(v3, v2, v4);
  char v6 = v5;
  sub_A86C();
  os_log_type_t v7 = sub_AB70();
  if (sub_A634(v7))
  {
    uint64_t v148 = (void *)(v0 + 800);
    id v8 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v9 = (void *)sub_A5E8(8LL);
    *(_DWORD *)id v8 = 138412290;
    *(void *)(v0 + 800) = v6;
    uint64_t v10 = v6;
    sub_A738(v0 + 800, v0 + 808);
    *uint64_t v9 = v6;

    sub_DA24(&dword_0, v2, (os_log_type_t)v1, "Received response: %@", v8);
    sub_494C(&qword_189CB8);
    sub_A81C((uint64_t)v9);
    sub_5050((uint64_t)v9);
    sub_5050((uint64_t)v8);
  }

  else
  {

    unint64_t v2 = (os_log_s *)v6;
  }

  uint64_t v11 = *(void *)(v0 + 888);

  uint64_t v12 = sub_F1980(v11);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))((char *)&stru_20.maxprot + (swift_isaMask & *v6)))(v12);
  if (v13 == 4)
  {
    uint64_t v24 = (void *)swift_task_alloc(dword_18F97C);
    *(void *)(v0 + 1064) = v24;
    *uint64_t v24 = v0;
    v24[1] = sub_F6F04;
    return sub_F7630(*(void *)(v0 + 1024), (uint64_t)v6);
  }

  if (v13 != 102)
  {
    if (v13 == 101)
    {
      char v16 = *(void **)(v0 + 1024);
      uint64_t v17 = *(void *)(v0 + 864);
      id v18 = *(char **)(v0 + 824);
      FlowTaskLogger.taskNeedsAuthorization()();
      char v19 = *v18;
      sub_A304((uint64_t)(v18 + 48), v0 + 88);
      sub_A13C(v18 + 88, (_OWORD *)(v0 + 128));
      uint64_t v20 = type metadata accessor for ResponseFactory(0LL);
      uint64_t v21 = sub_A72C(v20);
      uint64_t v22 = ResponseFactory.init()(v21);
      *(void *)(v0 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v20;
      *(void *)(v0 + 320) = &protocol witness table for ResponseFactory;
      *(void *)(v0 + 288) = v22;
      type metadata accessor for WellnessCATsSimple(0LL);
      sub_A768();
      CATWrapperSimple.__allocating_init(options:globals:)(v17, 0LL);
      sub_A874();
      sub_A768();
      uint64_t v23 = CATWrapper.__allocating_init(options:globals:)(v17, 0LL);
      *(_BYTE *)(v0 + 80) = v19;
      *(void *)(v0 + 328) = v20;
      *(void *)(v0 + 336) = v23;
      sub_A294();
      static ExecuteResponse.complete<A>(next:)();

      sub_A2D0((void *)(v0 + 80));
    }

    else
    {
      uint64_t v49 = *(void **)(v0 + 1024);
      uint64_t v50 = *(void *)(v0 + 824);
      FlowTaskLogger.genericError()();
      sub_A13C((_OWORD *)(v50 + 88), (_OWORD *)(v0 + 504));
      sub_A178();
      static ExecuteResponse.complete<A>(next:)();

      sub_A1B4((void *)(v0 + 504));
    }

    goto LABEL_21;
  }

  uint64_t v148 = v6;
  uint64_t v26 = *(void **)(v0 + 1024);
  sub_6D78(*(void *)(v0 + 856), v14, v15, *(void *)(v0 + 904));
  id v27 = [v26 start];
  if (!v27)
  {
    sub_6D78(*(void *)(v0 + 936), v28, v29, *(void *)(v0 + 960));
    goto LABEL_16;
  }

  uint64_t v30 = v27;
  uint64_t v31 = *(void *)(v0 + 968);
  uint64_t v32 = *(void *)(v0 + 960);
  uint64_t v33 = *(void *)(v0 + 936);
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v27);

  uint64_t v34 = *(void (**)(void, void, void))(v31 + 32);
  sub_BB170();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v33, 0LL, 1LL, v32);
  sub_F8590(v33);
  if (v35)
  {
LABEL_16:
    uint64_t v51 = *(void *)(v0 + 936);
LABEL_19:
    sub_A4A4(v51, &qword_189CE8);
    goto LABEL_20;
  }

  uint64_t v36 = *(void **)(v0 + 1024);
  v34(*(void *)(v0 + 984), *(void *)(v0 + 936), *(void *)(v0 + 960));
  id v37 = [v36 end];
  if (!v37)
  {
    sub_6D78(*(void *)(v0 + 928), v38, v39, *(void *)(v0 + 960));
    goto LABEL_18;
  }

  id v40 = v37;
  uint64_t v41 = *(void *)(v0 + 960);
  uint64_t v42 = *(void *)(v0 + 928);
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v37);

  sub_BB170();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v42, 0LL, 1LL, v41);
  sub_F8590(v42);
  if (v35)
  {
LABEL_18:
    uint64_t v52 = *(void *)(v0 + 928);
    (*(void (**)(void, void))(*(void *)(v0 + 968) + 8LL))(*(void *)(v0 + 984), *(void *)(v0 + 960));
    uint64_t v51 = v52;
    goto LABEL_19;
  }

  uint64_t v43 = *(void *)(v0 + 1008);
  uint64_t v44 = *(void *)(v0 + 992);
  uint64_t v45 = *(void *)(v0 + 984);
  uint64_t v46 = *(void *)(v0 + 976);
  uint64_t v146 = *(void *)(v0 + 904);
  uint64_t v47 = *(void *)(v0 + 856);
  uint64_t v48 = *(void *)(v0 + 848);
  sub_BAF40(v46, *(void *)(v0 + 928));
  sub_BAF40(v43, v45);
  sub_BAF40(v44, v46);
  DateInterval.init(start:end:)(v43, v44);
  sub_BB04C(v46);
  sub_BB04C(v45);
  sub_A4A4(v47, &qword_189BA0);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v48, 0LL, 1LL, v146);
  sub_F83C4(v48, v47);
LABEL_20:
  uint64_t v53 = *(void **)(v0 + 1024);
  uint64_t v54 = *(void *)(v0 + 864);
  uint64_t v55 = *(void *)(v0 + 856);
  uint64_t v56 = *(_BYTE **)(v0 + 840);
  uint64_t v57 = *(int **)(v0 + 832);
  uint64_t v58 = *(char **)(v0 + 824);
  FlowTaskLogger.taskFailed()();
  char v59 = *v58;
  sub_41850(v55, (uint64_t)&v56[v57[5]], &qword_189BA0);
  sub_A304((uint64_t)(v58 + 48), (uint64_t)&v56[v57[6]]);
  sub_A13C(v58 + 88, &v56[v57[7]]);
  uint64_t v60 = type metadata accessor for ResponseFactory(0LL);
  uint64_t v61 = sub_A72C(v60);
  uint64_t v62 = ResponseFactory.init()(v61);
  uint64_t v63 = (uint64_t *)&v56[v57[8]];
  v63[3] = v60;
  v63[4] = (uint64_t)&protocol witness table for ResponseFactory;
  *uint64_t v63 = v62;
  type metadata accessor for WellnessCATsSimple(0LL);
  sub_BB2A8();
  CATWrapperSimple.__allocating_init(options:globals:)(v54, 0LL);
  sub_A874();
  sub_BB2A8();
  uint64_t v64 = CATWrapper.__allocating_init(options:globals:)(v54, 0LL);
  *uint64_t v56 = v59;
  *(void *)&v56[v57[9]] = v60;
  *(void *)&v56[v57[10]] = v64;
  sub_F8384();
  static ExecuteResponse.complete<A>(next:)();

  sub_A258((uint64_t)v56);
  sub_A4A4(v55, &qword_189BA0);
LABEL_21:
  sub_F8538();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  sub_A78C();
  sub_A67C();
  uint64_t v65 = sub_A7C8();
  uint64_t v73 = sub_A970(v65, v66, v67, v68, v69, v70, v71, v72, v121);
  uint64_t v81 = sub_AAD8(v73, v74, v75, v76, v77, v78, v79, v80, v122, v128);
  uint64_t v89 = sub_A888(v81, v82, v83, v84, v85, v86, v87, v88, v123, v129, v134);
  uint64_t v97 = sub_A854(v89, v90, v91, v92, v93, v94, v95, v96, v124, v130, v135, v139);
  uint64_t v105 = sub_A84C(v97, v98, v99, v100, v101, v102, v103, v104, v125, v131, v136, v140, v143);
  uint64_t v113 = sub_A844(v105, v106, v107, v108, v109, v110, v111, v112, v126, v132, v137, v141, v144, v146);
  sub_A83C(v113, v114, v115, v116, v117, v118, v119, v120, v127, v133, v138, v142, v145, v147, (uint64_t)v148);
  return sub_57E74(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_F6F04(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1064LL);
  *(void *)(*(void *)v1 + 1072LL) = a1;
  swift_task_dealloc(v2);
  sub_A964();
  return sub_A5D0();
}

#error "F6FCC: call analysis failed (funcsize=40)"
void *sub_F6FF4(int a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  Class v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  NSDate v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  Class isa;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v4 = type metadata accessor for Calendar(0LL);
  uint64_t v84 = *(void *)(v4 - 8);
  uint64_t v85 = v4;
  sub_D978();
  __chkstk_darwin(v5);
  sub_6D30();
  uint64_t v83 = v6;
  sub_494C(&qword_189CE8);
  sub_D978();
  __chkstk_darwin(v7);
  sub_3751C();
  uint64_t v82 = v8;
  sub_A794();
  __chkstk_darwin(v9);
  sub_1C6B8();
  uint64_t v80 = v10;
  sub_A794();
  __chkstk_darwin(v11);
  sub_1C6B8();
  uint64_t v88 = v12;
  sub_A794();
  __chkstk_darwin(v13);
  uint64_t v87 = (uint64_t)&v78 - v14;
  uint64_t v15 = sub_A8E4();
  char v16 = *(void *)(v15 - 8);
  uint64_t v90 = v15;
  uint64_t v91 = v16;
  sub_D978();
  __chkstk_darwin(v17);
  sub_3751C();
  uint64_t v86 = v18;
  sub_A794();
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v78 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v78 - v23;
  sub_494C(&qword_189BA0);
  sub_D978();
  __chkstk_darwin(v25);
  sub_3751C();
  uint64_t v81 = v26;
  sub_A794();
  __chkstk_darwin(v27);
  sub_1C6B8();
  uint64_t v79 = v28;
  sub_A794();
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v32 = (char *)&v78 - v31;
  uint64_t v33 = __chkstk_darwin(v30);
  char v35 = (char *)&v78 - v34;
  uint64_t v36 = __chkstk_darwin(v33);
  uint64_t v38 = (char *)&v78 - v37;
  __chkstk_darwin(v36);
  id v40 = (char *)&v78 - v39;
  uint64_t v41 = [objc_allocWithZone((Class)type metadata accessor for GetHealthQuantityIntent(0)) init];
  uint64_t v42 = sub_27CC8(a1);
  uint64_t v89 = v41;
  sub_F84E8(v42, v43, v41);
  uint64_t v45 = a2[3];
  uint64_t v44 = a2[4];
  sub_3A484(a2);
  (*(void (**)(uint64_t, uint64_t))(v44 + 32))(v45, v44);
  uint64_t v46 = (uint64_t)v40;
  sub_F8080((uint64_t)v38, a1, (uint64_t)v40);
  sub_A4A4((uint64_t)v38, &qword_189BA0);
  if ((a1 - 89 > 0x3E
     || ((1LL << (a1 - 89)) & 0x6400000000000113LL) == 0)
    && (a1 - 155 > 0x1D || ((1 << (a1 + 101)) & 0x20040001) == 0))
  {
    uint64_t v48 = (uint64_t)v40;
    uint64_t v65 = v79;
    sub_41850((uint64_t)v40, v79, &qword_189BA0);
    uint64_t v66 = sub_ABEC();
    uint64_t v67 = sub_F8590(v65);
    if (v52)
    {
      sub_A4A4(v65, &qword_189BA0);
      uint64_t v74 = sub_F860C(v80, 1LL);
      Class isa = 0LL;
      uint64_t v55 = v89;
      uint64_t v69 = v91;
      uint64_t v71 = v81;
      uint64_t v70 = v82;
    }

    else
    {
      uint64_t v72 = v80;
      DateInterval.start.getter(v67);
      sub_24A50(v65, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v66 - 8) + 8LL));
      sub_F860C(v72, 0LL);
      uint64_t v74 = sub_A614(v72, 1LL, (uint64_t)v40);
      uint64_t v55 = v89;
      uint64_t v69 = v91;
      uint64_t v71 = v81;
      uint64_t v70 = v82;
      if (v73)
      {
        Class isa = 0LL;
      }

      else
      {
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        uint64_t v74 = (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 8))(v72, v46);
      }
    }

    sub_F8634(v74, "setStart:");

    sub_7317C(v46, v75, &qword_189BA0);
    uint64_t v76 = sub_F8590(v71);
    if (v52)
    {
      sub_F8654(v76, &qword_189BA0);
      uint64_t v63 = sub_7DF0C(v70, 1LL);
    }

    else
    {
      DateInterval.end.getter(v76);
      sub_F85CC();
      sub_7DF0C(v70, 0LL);
      uint64_t v63 = sub_A614(v70, 1LL, v46);
      if (!v77)
      {
        v62.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
        uint64_t v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 8))(v70, v46);
        goto LABEL_18;
      }
    }

    v62.super.Class isa = 0LL;
    goto LABEL_18;
  }

  uint64_t v48 = (uint64_t)v40;
  sub_7317C((uint64_t)v40, v47, &qword_189BA0);
  uint64_t v49 = sub_ABEC();
  uint64_t v50 = sub_F8590((uint64_t)v35);
  if (v52)
  {
    sub_F8654(v50, &qword_189BA0);
    uint64_t v51 = v87;
    uint64_t v53 = sub_F85FC(v87, 1LL);
  }

  else
  {
    uint64_t v51 = v87;
    DateInterval.start.getter(v50);
    sub_F85CC();
    sub_F85FC(v51, 0LL);
    uint64_t v53 = sub_A614(v51, 1LL, (uint64_t)v35);
    if (!v52)
    {
      sub_F8648((uint64_t)v24, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v91 + 32));
      goto LABEL_11;
    }
  }

  uint64_t v54 = Date.init()(v53);
  static Calendar.current.getter(v54);
  Calendar.startOfDay(for:)(v22);
  sub_5B2D0(v84);
  (*(void (**)(char *, char *))(v91 + 8))(v22, v35);
  sub_A4A4(v51, &qword_189CE8);
LABEL_11:
  uint64_t v55 = v89;
  uint64_t v56 = Date._bridgeToObjectiveC()().super.isa;
  sub_F8640((uint64_t)v24);
  [v55 setStart:v56];

  sub_41850(v48, (uint64_t)v32, &qword_189BA0);
  uint64_t v57 = sub_F8590((uint64_t)v32);
  if (v52)
  {
    sub_A4A4((uint64_t)v32, &qword_189BA0);
    uint64_t v58 = v88;
    uint64_t v60 = sub_9A688(v88, 1LL);
LABEL_16:
    Date.init()(v60);
    uint64_t v61 = v86;
    sub_77A8C(v86);
    sub_F8640((uint64_t)v22);
    sub_A4A4(v58, &qword_189CE8);
    goto LABEL_17;
  }

  uint64_t v58 = v88;
  DateInterval.end.getter(v57);
  sub_24A50((uint64_t)v32, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8LL));
  sub_9A688(v58, 0LL);
  uint64_t v60 = sub_A614(v58, 1LL, (uint64_t)v35);
  if (v59) {
    goto LABEL_16;
  }
  uint64_t v61 = v86;
  sub_F8648(v86, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v91 + 32));
LABEL_17:
  v62.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v63 = sub_F8640(v61);
LABEL_18:
  sub_F8634(v63, "setEnd:");

  sub_A4A4(v48, &qword_189BA0);
  return v55;
}

uint64_t sub_F7630(uint64_t a1, uint64_t a2)
{
  v3[119] = v2;
  v3[118] = a2;
  v3[117] = a1;
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v3[120] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[121] = v5;
  v3[122] = sub_D8CC(v5);
  v3[123] = sub_A5B8();
  uint64_t v6 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[124] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[125] = v7;
  v3[126] = sub_A5C0(v7);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  v3[127] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[128] = v9;
  v3[129] = sub_D8CC(v9);
  v3[130] = sub_A5B8();
  v3[131] = sub_A5B8();
  v3[132] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_F76D8()
{
  *(void *)(v0 + 704) = &type metadata for WellnessFeatureFlagsKey;
  *(void *)(v0 + 71_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_354B0();
  *(_BYTE *)(v0 + 680) = 4;
  char v1 = isFeatureEnabled(_:)(v0 + 680);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 680));
  if ((v1 & 1) != 0)
  {
    char v2 = **(_BYTE **)(v0 + 952);
    uint64_t v3 = (void *)swift_task_alloc(dword_18D9C4);
    *(void *)(v0 + 1064) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_F77CC;
    return sub_92140(v0 + 600, v2, *(void *)(v0 + 936), *(void *)(v0 + 944));
  }

  else
  {
    uint64_t v5 = *(char **)(v0 + 952);
    char v6 = *v5;
    uint64_t v7 = (void *)swift_task_alloc(dword_18B42C);
    *(void *)(v0 + 107_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_F7E14;
    return sub_46710(v6, *(void *)(v0 + 936), *(void *)(v0 + 944), (uint64_t)(v5 + 88));
  }

uint64_t sub_F77CC()
{
  return sub_A5D0();
}

uint64_t sub_F7814(uint64_t a1)
{
  uint64_t v2 = v1 + 872;
  uint64_t v3 = *(os_log_s **)(v1 + 1056);
  uint64_t v4 = *(void *)(v1 + 1024);
  uint64_t v5 = *(void *)(v1 + 1016);
  char v6 = (id *)(v1 + 936);
  uint64_t v7 = *(void **)(v1 + 936);
  uint64_t v8 = Logger.wellness.unsafeMutableAddressor(a1);
  sub_A5DC(v8, v1 + 848);
  uint64_t v92 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v92((uint64_t)v3, v8, v5);
  id v9 = v3;
  Logger.logObject.getter(v7);
  os_log_type_t v10 = sub_AB70();
  uint64_t v89 = v8;
  if (os_log_type_enabled(v3, v10))
  {
    uint64_t v11 = *(void **)(v1 + 936);
    uint64_t v12 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v13 = (void *)sub_A5E8(8LL);
    *(_DWORD *)uint64_t v12 = 138412290;
    *(void *)(v1 + 928) = v11;
    id v14 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 928, v1 + 936, v12 + 4, v12 + 12);
    *uint64_t v13 = v11;
    uint64_t v2 = v1 + 872;

    sub_DA24(&dword_0, v3, v10, "#GetHealthQuantityFlow: In successResponseFlow intent is %@", v12);
    sub_494C(&qword_189CB8);
    sub_A81C((uint64_t)v13);
    uint64_t v15 = (uint64_t)v13;
    uint64_t v8 = v89;
    sub_5050(v15);
    sub_5050((uint64_t)v12);
  }

  else
  {

    id v9 = *v6;
  }

  uint64_t v16 = *(void *)(v1 + 1056);
  uint64_t v17 = *(void *)(v1 + 1024);
  uint64_t v18 = *(void *)(v1 + 1016);
  char v19 = *(void **)(v1 + 944);

  uint64_t v86 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v86(v16, v18);
  uint64_t v20 = sub_A5DC(v8, v2);
  sub_F85E0( v20,  v21,  v22,  v23,  v24,  v25,  v26,  v27,  v72,  v74,  v1 + 16,  v1 + 824,  v1 + 720,  v1 + 920,  v1 + 600,  (uint64_t)v86,  v89,  v92);
  id v28 = v19;
  sub_A86C();
  os_log_type_t v29 = sub_AB70();
  BOOL v30 = sub_A988(v29);
  uint64_t v31 = *(void **)(v1 + 944);
  if (v30)
  {
    uint64_t v32 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v33 = (void *)sub_A5E8(8LL);
    *(_DWORD *)uint64_t v32 = 138412290;
    *(void *)(v1 + 920) = v31;
    id v34 = v31;
    uint64_t v8 = v90;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v82, v1 + 928, v32 + 4, v32 + 12);
    *uint64_t v33 = v31;

    sub_DA24( &dword_0,  (os_log_s *)v9,  (os_log_type_t)v16,  "#GetHealthQuantityFlow: In successResponseFlow intent response is %@",  v32);
    sub_494C(&qword_189CB8);
    sub_A81C((uint64_t)v33);
    sub_5050((uint64_t)v33);
    sub_5050((uint64_t)v32);
  }

  else
  {

    id v9 = *(id *)(v1 + 944);
  }

  uint64_t v35 = *(void *)(v1 + 1048);
  uint64_t v36 = *(void *)(v1 + 1016);
  uint64_t v37 = *(void *)(v1 + 952);

  uint64_t v38 = v87;
  v87(v35, v36);
  uint64_t v39 = sub_A5DC(v8, v78);
  sub_F85E0(v39, v40, v41, v42, v43, v44, v45, v46, v73, v75, v76, v78, v80, v82, v84, (uint64_t)v87, v90, v93);
  sub_F840C(v37, (uint64_t)v77);
  sub_A86C();
  os_log_type_t v47 = sub_AB70();
  BOOL v48 = sub_A634(v47);
  uint64_t v49 = *(void *)(v1 + 1040);
  uint64_t v50 = *(void *)(v1 + 1016);
  if (v48)
  {
    uint64_t v79 = *(void *)(v1 + 1040);
    uint64_t v51 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v52 = sub_A5E8(32LL);
    v95[0] = v52;
    *(_DWORD *)uint64_t v51 = 136315138;
    uint64_t v53 = sub_27CC8(*v77);
    *(void *)(v1 + 91_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_39178(v53, v54, v95);
    uint64_t v38 = v88;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 912, v83, v51 + 4, v51 + 12);
    swift_bridgeObjectRelease();
    sub_F8440(v77);
    sub_DA24( &dword_0,  (os_log_s *)v9,  (os_log_type_t)v36,  "#GetHealthQuantityFlow: In successResponseFlow identifier is %s",  v51);
    sub_A81C(v52);
    sub_5050(v52);
    uint64_t v55 = (uint64_t)v51;
    uint64_t v8 = v91;
    sub_5050(v55);

    uint64_t v56 = v79;
  }

  else
  {
    sub_F8440(v77);

    uint64_t v56 = v49;
  }

  v38(v56, v50);
  sub_7317C(v85, v57, &qword_18A448);
  if (*(void *)(v1 + 744))
  {
    sub_20004(v81, v1 + 760);
    sub_A304(v1 + 760, v1 + 640);
    uint64_t v59 = swift_allocObject(&unk_180DA0, 56LL, 7LL);
    sub_20004((__int128 *)(v1 + 640), v59 + 16);
    static OutputPublisherFactory.makeOutputPublisherAsync()(v95);
    uint64_t v60 = type metadata accessor for SimpleOutputFlowAsync(0LL);
    sub_A72C(v60);
    *(void *)(v1 + 904) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)(v95, &unk_18F988, v59);
    uint64_t v61 = Flow.eraseToAnyFlow()(v60);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v1 + 760));
    sub_A4A4(v85, &qword_18A448);
    swift_release();
  }

  else
  {
    uint64_t v62 = *(void *)(v1 + 1032);
    uint64_t v63 = *(void *)(v1 + 1016);
    sub_F8654(v58, &qword_18A448);
    sub_A5DC(v8, v1 + 800);
    uint64_t v64 = v94(v62, v8, v63);
    uint64_t v65 = (os_log_s *)Logger.logObject.getter(v64);
    os_log_type_t v66 = static os_log_type_t.error.getter();
    if (sub_A988(v66))
    {
      uint64_t v67 = (uint8_t *)sub_A5E8(2LL);
      *(_WORD *)uint64_t v67 = 0;
      _os_log_impl( &dword_0,  v65,  (os_log_type_t)v62,  "#GetHealthQuantityFlow: Invalid responseOutput, triggering error response",  v67,  2u);
      sub_5050((uint64_t)v67);
    }

    uint64_t v68 = *(void *)(v1 + 1032);
    uint64_t v69 = *(void *)(v1 + 1016);
    uint64_t v70 = *(void *)(v1 + 952);

    v38(v68, v69);
    FlowTaskLogger.genericError()();
    sub_A13C((_OWORD *)(v70 + 88), (_OWORD *)(v1 + 280));
    sub_A178();
    uint64_t v61 = Flow.eraseToAnyFlow()(&type metadata for GenericErrorFlow);
    sub_A1B4((void *)(v1 + 280));
    sub_A4A4(v85, &qword_18A448);
  }

  sub_F85AC();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v61);
}

uint64_t sub_F7E14(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1072LL);
  *(void *)(*(void *)v1 + 108Hasher.init(_seed:)(v3, 0LL) = a1;
  swift_task_dealloc(v2);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_F7E64( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v9 = *(void **)(v8 + 1080);
  if (v9)
  {
    uint64_t v10 = *(void *)(v8 + 1008);
    uint64_t v27 = *(void *)(v8 + 1000);
    uint64_t v28 = *(void *)(v8 + 992);
    uint64_t v11 = *(void *)(v8 + 984);
    uint64_t v12 = *(void *)(v8 + 976);
    uint64_t v13 = *(void *)(v8 + 968);
    uint64_t v14 = *(void *)(v8 + 960);
    uint64_t v15 = *(void **)(v8 + 952);
    static DialogPhase.completion.getter(a1, a2, a3, a4, a5, a6, a7, a8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v11, v14);
    OutputGenerationManifest.init(dialogPhase:_:)(v12, sub_A633C, 0LL);
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v11, v14);
    id v17 = sub_5693C(v16, "patternId");
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    uint64_t v20 = v19;

    OutputGenerationManifest.responseViewId.setter(v18, v20);
    uint64_t v21 = v15[14];
    uint64_t v22 = v15[15];
    sub_500C(v15 + 11, v21);
    *(void *)(v8 + 896) = dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)( v9,  v10,  v21,  v22);
    uint64_t v23 = type metadata accessor for AnyFlow(0LL);
    uint64_t v24 = Flow.eraseToAnyFlow()(v23);

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v10, v28);
    swift_release();
  }

  else
  {
    uint64_t v25 = (_OWORD *)(*(void *)(v8 + 952) + 88LL);
    FlowTaskLogger.genericError()();
    sub_A13C(v25, (_OWORD *)(v8 + 440));
    sub_A178();
    uint64_t v24 = Flow.eraseToAnyFlow()(&type metadata for GenericErrorFlow);
    sub_A1B4((void *)(v8 + 440));
  }

  sub_F85AC();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  return (*(uint64_t (**)(uint64_t))(v8 + 8))(v24);
}

uint64_t sub_F8030(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18F974);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_A108;
  return sub_F628C(a1);
}

void sub_F8080(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v43 = a2;
  uint64_t v44 = a3;
  uint64_t v4 = type metadata accessor for Calendar(0LL);
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  sub_D978();
  __chkstk_darwin(v5);
  sub_6D30();
  uint64_t v39 = v6;
  uint64_t v7 = sub_A8E4();
  __chkstk_darwin(v7);
  sub_3751C();
  uint64_t v42 = v8;
  sub_A794();
  __chkstk_darwin(v9);
  sub_1C6B8();
  uint64_t v38 = v10;
  sub_A794();
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v37 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v37 - v15;
  sub_494C(&qword_189BA0);
  sub_D978();
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_ABEC();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_41850(a1, (uint64_t)v19, &qword_189BA0);
  sub_F8590((uint64_t)v19);
  if (v24)
  {
    sub_A4A4((uint64_t)v19, &qword_189BA0);
    sub_41850(a1, v44, &qword_189BA0);
    return;
  }

  uint64_t v25 = v44;
  uint64_t v37 = v21;
  uint64_t v26 = v19;
  uint64_t v27 = *(uint64_t (**)(char *, char *, uint64_t))(v21 + 32);
  uint64_t v28 = v27(v23, v26, v20);
  uint64_t v29 = DateInterval.end.getter(v28);
  double v30 = Date.timeIntervalSinceReferenceDate.getter(v29);
  sub_F862C((uint64_t)v16);
  uint64_t v31 = sub_F85F4();
  double v32 = Date.timeIntervalSinceReferenceDate.getter(v31);
  sub_F862C((uint64_t)v14);
  double v33 = v30 - v32;
  if (v43 != 103 && v43 != 174 && v43 != 159)
  {
    if (v33 < 86399.0)
    {
      uint64_t v34 = sub_F85F4();
      static Calendar.current.getter(v34);
      Calendar.startOfDay(for:)(v16);
      sub_5B2D0(v40);
      sub_F862C((uint64_t)v16);
      uint64_t v35 = v38;
      sub_F85F4();
      uint64_t v36 = v42;
      sub_77A8C(v42);
      sub_F862C(v35);
      DateInterval.init(start:end:)(v14, v36);
      goto LABEL_11;
    }

unint64_t sub_F8384()
{
  unint64_t result = qword_189CC8;
  if (!qword_189CC8)
  {
    uint64_t v1 = type metadata accessor for UnavailableDataFlow(255LL);
    unint64_t result = swift_getWitnessTable(&unk_13FD60, v1);
    atomic_store(result, &qword_189CC8);
  }

  return result;
}

uint64_t sub_F83C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_494C(&qword_189BA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_F840C(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_F8440(void *a1)
{
  return a1;
}

uint64_t sub_F846C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_F8490(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc(dword_18F984);
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_7564C;
  return sub_34F70(a1, v1 + 16);
}

void sub_F84E8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  [a3 setQuantityIdentifier:v5];
}

uint64_t sub_F8538()
{
  return swift_task_dealloc(*(void *)(v0 + 1016));
}

uint64_t sub_F8590(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1LL, v1);
}

uint64_t sub_F85AC()
{
  return swift_task_dealloc(*(void *)(v0 + 1056));
}

uint64_t sub_F85CC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v0 - 8) + 8LL))(v1, v0);
}

uint64_t sub_F85E0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t (*a18)(uint64_t, uint64_t, uint64_t))
{
  return a18(v18, v20, v19);
}

uint64_t sub_F85F4()
{
  return DateInterval.start.getter();
}

uint64_t sub_F85FC(uint64_t a1, uint64_t a2)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, 1LL, *(void *)(v2 - 96));
}

uint64_t sub_F860C(uint64_t a1, uint64_t a2)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, 1LL, *(void *)(v2 - 96));
}

uint64_t sub_F861C()
{
  return v3(v2, v0, v1);
}

uint64_t sub_F862C(uint64_t a1)
{
  return v1(a1, v2);
}

id sub_F8634(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_F8640(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_F8648@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

void sub_F8654(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_F865C()
{
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
  uint64_t v1 = v0 + OBJC_IVAR____TtCC18WellnessFlowPlugin12WellnessTime7Builder_calendarIdentifier;
  uint64_t v2 = sub_ABF4();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1LL, 1LL, v2);
  return v0;
}

uint64_t sub_F86A4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  swift_retain();
  sub_37034();
  return sub_F99FC(v1);
}

uint64_t sub_F86CC(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  swift_retain();
  sub_37034();
  return sub_F99FC(v1);
}

uint64_t sub_F86F4(uint64_t a1)
{
  *(void *)(v1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a1;
  swift_retain();
  sub_37034();
  return sub_F99FC(v1);
}

uint64_t sub_F871C(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  swift_retain();
  sub_37034();
  return sub_F99FC(v1);
}

uint64_t sub_F8744()
{
  return v0;
}

uint64_t sub_F8788()
{
  return sub_78D14((void (*)(void))sub_F8744);
}

uint64_t sub_F8794()
{
  return 0x7373656E6C6C6577LL;
}

void *sub_F87B8(void *a1)
{
  uint64_t v6 = v5 - v4;
  v1[2] = 0LL;
  v1[3] = a1[2];
  v1[4] = a1[3];
  v1[5] = a1[4];
  v1[6] = a1[5];
  sub_79734((uint64_t)a1 + OBJC_IVAR____TtCC18WellnessFlowPlugin12WellnessTime7Builder_calendarIdentifier, v5 - v4);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_37034();
  sub_7977C(v6, (uint64_t)v1 + OBJC_IVAR____TtC18WellnessFlowPlugin12WellnessTime_calendarIdentifier);
  return v1;
}

void sub_F888C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v42 - v11;
  uint64_t v13 = "dialogQueryStartDate";
  if (a1 == 0xD000000000000014LL && (sub_F9998(), v23)
    || (sub_58F84(0xD000000000000014LL, (unint64_t)(v13 - 32) | 0x8000000000000000LL) & 1) != 0)
  {
    uint64_t v14 = v3[3];
    if (v14)
    {
LABEL_5:
      *(void *)(a3 + 24) = type metadata accessor for DialogCalendar(0LL);
      *(void *)a3 = v14;
      swift_retain();
      return;
    }

    goto LABEL_10;
  }

  uint64_t v15 = "dialogQueryEndDate";
  if (a1 == 0xD000000000000012LL && (sub_F9998(), v23)
    || (sub_58F84(0xD000000000000012LL, (unint64_t)(v15 - 32) | 0x8000000000000000LL) & 1) != 0)
  {
    uint64_t v14 = v3[4];
    if (v14) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

  uint64_t v16 = 0xD000000000000015LL;
  uint64_t v17 = "dialogSampleStartDate";
  if (a1 == 0xD000000000000015LL && (sub_F9998(), v23)
    || (sub_58F84(v16, (unint64_t)(v17 - 32) | 0x8000000000000000LL) & 1) != 0)
  {
    uint64_t v14 = v3[5];
    if (v14) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

  uint64_t v18 = "dialogSampleEndDate";
  if (a1 == 0xD000000000000013LL && (sub_F9998(), v23)
    || (sub_58F84(0xD000000000000013LL, (unint64_t)(v18 - 32) | 0x8000000000000000LL) & 1) != 0)
  {
    uint64_t v14 = v3[6];
    if (v14) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

  uint64_t v19 = "calendarIdentifier";
  if (a1 == 0xD000000000000012LL && (sub_F9998(), v23)
    || (sub_58F84(0xD000000000000012LL, (unint64_t)(v19 - 32) | 0x8000000000000000LL) & 1) != 0)
  {
    sub_79734((uint64_t)v3 + OBJC_IVAR____TtC18WellnessFlowPlugin12WellnessTime_calendarIdentifier, (uint64_t)v12);
    uint64_t v20 = sub_ABF4();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v12, 1LL, v20) == 1)
    {
      uint64_t v21 = (uint64_t)v12;
LABEL_26:
      sub_59A88(v21);
LABEL_10:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      return;
    }

    uint64_t v22 = sub_AA214();
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v20 - 8) + 32LL))(v22, v12, v20);
  }

  else
  {
    BOOL v23 = a1 == 0x53736574756E696DLL && a2 == 0xEF776F4E65636E69LL;
    if (v23 || (sub_58F84(0x53736574756E696DLL, 0xEF776F4E65636E69LL) & 1) != 0)
    {
      uint64_t v24 = sub_128C44();
      if ((v25 & 1) != 0) {
        goto LABEL_10;
      }
      *(void *)(a3 + 24) = &type metadata for Double;
      *(void *)a3 = v24;
    }

    else
    {
      BOOL v26 = a1 == 0x6D617266656D6974LL && a2 == 0xE900000000000065LL;
      if (!v26 && (sub_58F84(0x6D617266656D6974LL, 0xE900000000000065LL) & 1) == 0)
      {
        uint64_t v29 = "isThisWeekTimeframe";
        if (a1 == 0xD000000000000013LL && (sub_F9998(), v23)
          || (sub_58F84(0xD000000000000013LL, (unint64_t)(v29 - 32) | 0x8000000000000000LL) & 1) != 0)
        {
          sub_128CE4();
        }

        else
        {
          uint64_t v31 = "isLastWeekTimeframe";
          if (a1 == 0xD000000000000013LL && (sub_F9998(), v23)
            || (sub_58F84(0xD000000000000013LL, (unint64_t)(v31 - 32) | 0x8000000000000000LL) & 1) != 0)
          {
            sub_128E1C();
          }

          else
          {
            double v32 = "isThisMonthTimeframe";
            if (a1 == 0xD000000000000014LL && (sub_F9998(), v23)
              || (sub_58F84(0xD000000000000014LL, (unint64_t)(v32 - 32) | 0x8000000000000000LL) & 1) != 0)
            {
              sub_1290B8();
            }

            else
            {
              double v33 = "isLastMonthTimeframe";
              if (a1 == 0xD000000000000014LL && (sub_F9998(), v23)
                || (sub_58F84(0xD000000000000014LL, (unint64_t)(v33 - 32) | 0x8000000000000000LL) & 1) != 0)
              {
                sub_1291F4();
              }

              else
              {
                uint64_t v34 = "isThisYearTimeframe";
                if (a1 == 0xD000000000000013LL && (sub_F9998(), v23)
                  || (sub_58F84(0xD000000000000013LL, (unint64_t)(v34 - 32) | 0x8000000000000000LL) & 1) != 0)
                {
                  sub_12956C();
                }

                else
                {
                  uint64_t v35 = "isLastYearTimeframe";
                  if (a1 == 0xD000000000000013LL && (sub_F9998(), v23)
                    || (sub_58F84(0xD000000000000013LL, (unint64_t)(v35 - 32) | 0x8000000000000000LL) & 1) != 0)
                  {
                    sub_1296A8();
                  }

                  else
                  {
                    uint64_t v36 = "isCurrentTimeframe";
                    if (a1 == 0xD000000000000012LL && (sub_F9998(), v23)
                      || (sub_58F84(0xD000000000000012LL, (unint64_t)(v36 - 32) | 0x8000000000000000LL) & 1) != 0)
                    {
                      BOOL v37 = sub_12AB68() < 3u;
                      *(void *)(a3 + 24) = &type metadata for Bool;
                      *(_BYTE *)a3 = v37;
                      return;
                    }

                    uint64_t v38 = "isPreviousTimeframe";
                    if (a1 != 0xD000000000000013LL || (sub_F9998(), !v23))
                    {
                      if ((sub_58F84(0xD000000000000013LL, (unint64_t)(v38 - 32) | 0x8000000000000000LL) & 1) == 0)
                      {
                        BOOL v39 = a1 == 0x636E6953656D6974LL && a2 == 0xEC000000776F4E65LL;
                        if (!v39 && (sub_58F84(0x636E6953656D6974LL, 0xEC000000776F4E65LL) & 1) == 0) {
                          goto LABEL_10;
                        }
                        uint64_t v40 = sub_129944();
                        if (!v40) {
                          goto LABEL_10;
                        }
                        uint64_t v41 = v40;
                        *(void *)(a3 + 24) = type metadata accessor for DialogDuration(0LL);
                        *(void *)a3 = v41;
                        return;
                      }
                    }

                    char v30 = sub_128C14();
                  }
                }
              }
            }
          }
        }

        *(void *)(a3 + 24) = &type metadata for Bool;
        *(_BYTE *)a3 = v30 & 1;
        return;
      }

      sub_128C7C((uint64_t)v10);
      uint64_t v27 = sub_ABF4();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v10, 1LL, v27) == 1)
      {
        uint64_t v21 = (uint64_t)v10;
        goto LABEL_26;
      }

      uint64_t v28 = sub_AA214();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v27 - 8) + 32LL))(v28, v10, v27);
    }
  }

unint64_t sub_F8E18(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_17B228, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5) {
    return 5LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_F8E64()
{
  return 5LL;
}

uint64_t sub_F8E6C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_F8EA8 + 4 * byte_13DF50[a1]))( 0xD000000000000014LL,  0x80000000001409F0LL);
}

unint64_t sub_F8EA8()
{
  return 0xD000000000000012LL;
}

uint64_t sub_F8EF0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_F8F2C + 4 * byte_13DF55[a1]))( 0xD000000000000014LL,  0x80000000001409F0LL);
}

unint64_t sub_F8F2C()
{
  return 0xD000000000000012LL;
}

void sub_F8F74(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_F8F80()
{
}

uint64_t sub_F8F88(uint64_t a1)
{
  return sub_12BCB4(a1, *v1);
}

void sub_F8F90(uint64_t a1)
{
}

unint64_t sub_F8F98@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_F8E18(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_F8FC4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_F8E6C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_F8FEC()
{
  return sub_F8EF0(*v0);
}

uint64_t sub_F8FF4@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_F8E60(a1);
  *a2 = result;
  return result;
}

void sub_F9018(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_F9024(uint64_t a1)
{
  unint64_t v2 = sub_F97D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F904C(uint64_t a1)
{
  unint64_t v2 = sub_F97D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F9074()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_59A88(v0 + OBJC_IVAR____TtC18WellnessFlowPlugin12WellnessTime_calendarIdentifier);
  return v0;
}

uint64_t sub_F90C0()
{
  return sub_78D14((void (*)(void))sub_F9074);
}

uint64_t type metadata accessor for WellnessTime(uint64_t a1)
{
  return sub_70F74(a1, qword_18F9B8, (uint64_t)&nominal type descriptor for WellnessTime);
}

void sub_F90E0(uint64_t a1)
{
  v4[0] = "\b";
  v4[1] = "\b";
  void v4[2] = "\b";
  void v4[3] = "\b";
  v4[4] = "\b";
  sub_671D8(319LL);
  if (v3 <= 0x3F)
  {
    v4[5] = *(void *)(v2 - 8) + 64LL;
    swift_updateClassMetadata2(a1, 256LL, 6LL, v4, a1 + 80);
  }

uint64_t sub_F9160(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_494C(&qword_18FC70);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_6D44();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_500C(a1, v10);
  unint64_t v12 = sub_F97D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for WellnessTime.CodingKeys,  &type metadata for WellnessTime.CodingKeys,  v12,  v10,  v11);
  uint64_t v16 = v3[3];
  type metadata accessor for DialogCalendar(0LL);
  sub_2322C( &qword_18E2F8,  (uint64_t (*)(uint64_t))&type metadata accessor for DialogCalendar,  (uint64_t)&protocol conformance descriptor for DialogCalendar);
  sub_F99A8();
  if (!v2)
  {
    uint64_t v16 = v3[4];
    sub_F99A8();
    uint64_t v16 = v3[5];
    sub_F99A8();
    uint64_t v16 = v3[6];
    sub_F99A8();
    uint64_t v13 = (char *)v3 + OBJC_IVAR____TtC18WellnessFlowPlugin12WellnessTime_calendarIdentifier;
    LOBYTE(v16) = 4;
    uint64_t v14 = type metadata accessor for SpeakableString(0LL);
    sub_2322C( &qword_18AAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString,  (uint64_t)&protocol conformance descriptor for SpeakableString);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v13, &v16, v5, v14);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_F931C(void *a1)
{
  uint64_t v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_F9400(a1);
  return v3;
}

uint64_t sub_F9368()
{
  return type metadata accessor for WellnessTime.Builder(0LL);
}

uint64_t type metadata accessor for WellnessTime.Builder(uint64_t a1)
{
  return sub_70F74(a1, qword_18FAD8, (uint64_t)&nominal type descriptor for WellnessTime.Builder);
}

void sub_F9384(uint64_t a1)
{
  v4[0] = "\b";
  v4[1] = "\b";
  void v4[2] = "\b";
  void v4[3] = "\b";
  sub_671D8(319LL);
  if (v3 <= 0x3F)
  {
    v4[4] = *(void *)(v2 - 8) + 64LL;
    swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
  }

void *sub_F9400(void *a1)
{
  unint64_t v3 = v1;
  sub_494C(&qword_189D00);
  sub_6D20();
  __chkstk_darwin(v5);
  sub_6D44();
  uint64_t v6 = sub_494C(&qword_18FC60);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_6D44();
  v3[2] = 0LL;
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v16 = a1;
  sub_500C(a1, v8);
  unint64_t v10 = sub_F97D0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for WellnessTime.CodingKeys,  &type metadata for WellnessTime.CodingKeys,  v10,  v8,  v9);
  if (v2)
  {
    sub_F9A04();
    uint64_t v12 = type metadata accessor for WellnessTime(0LL);
    swift_deallocPartialClassInstance(v3, v12, *(unsigned int *)(*v3 + 48LL), *(unsigned __int16 *)(*v3 + 52LL));
    uint64_t v15 = (void *)v6;
  }

  else
  {
    uint64_t v11 = type metadata accessor for DialogCalendar(0LL);
    sub_2322C( &qword_18E308,  (uint64_t (*)(uint64_t))&type metadata accessor for DialogCalendar,  (uint64_t)&protocol conformance descriptor for DialogCalendar);
    sub_F99C8();
    v3[3] = v18;
    sub_F99C8();
    v3[4] = v18;
    char v17 = 2;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v11, &v17, v6, v11);
    v3[5] = v18;
    char v17 = 3;
    sub_F99C8();
    v3[6] = v18;
    uint64_t v14 = type metadata accessor for SpeakableString(0LL);
    LOBYTE(v18) = 4;
    sub_2322C( &qword_18AAC0,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString,  (uint64_t)&protocol conformance descriptor for SpeakableString);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v14, &v18, v6, v14);
    sub_F99EC(v7);
    sub_7977C(0LL, (uint64_t)v3 + OBJC_IVAR____TtC18WellnessFlowPlugin12WellnessTime_calendarIdentifier);
    uint64_t v15 = v16;
  }

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v15);
  return v3;
}

uint64_t sub_F96FC()
{
  return sub_F8794();
}

void sub_F9710(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t sub_F9730@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_F931C(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_F9758(void *a1)
{
  return sub_F9160(a1);
}

uint64_t sub_F9778()
{
  return sub_2322C(&qword_18FC50, type metadata accessor for WellnessTime, (uint64_t)&unk_13E048);
}

uint64_t sub_F97A4()
{
  return sub_2322C(&qword_18FC58, type metadata accessor for WellnessTime, (uint64_t)&unk_13E020);
}

unint64_t sub_F97D0()
{
  unint64_t result = qword_18FC68;
  if (!qword_18FC68)
  {
    unint64_t result = swift_getWitnessTable(&unk_13E1E4, &type metadata for WellnessTime.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18FC68);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for WellnessTime.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(sub_56254(v2[492], v4) = 1;
  }
  else {
    LODWORD(sub_56254(v2[492], v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_F9858 + 4 * byte_13DF5F[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_F988C + 4 * byte_13DF5A[v4]))();
}

uint64_t sub_F988C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_F9894(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xF989CLL);
  }
  return result;
}

uint64_t sub_F98A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xF98B0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_F98B4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_F98BC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WellnessTime.CodingKeys()
{
  return &type metadata for WellnessTime.CodingKeys;
}

unint64_t sub_F98DC()
{
  unint64_t result = qword_18FC78;
  if (!qword_18FC78)
  {
    unint64_t result = swift_getWitnessTable(&unk_13E1BC, &type metadata for WellnessTime.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18FC78);
  }

  return result;
}

unint64_t sub_F991C()
{
  unint64_t result = qword_18FC80;
  if (!qword_18FC80)
  {
    unint64_t result = swift_getWitnessTable(&unk_13E0F4, &type metadata for WellnessTime.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18FC80);
  }

  return result;
}

unint64_t sub_F995C()
{
  unint64_t result = qword_18FC88[0];
  if (!qword_18FC88[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_13E11C, &type metadata for WellnessTime.CodingKeys);
    atomic_store(result, qword_18FC88);
  }

  return result;
}

  ;
}

uint64_t sub_F99A8()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v2 - 72, v2 - 73, v0, v1);
}

uint64_t sub_F99C8()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v1, v2 - 81, v0, v1);
}

uint64_t sub_F99EC@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_F99FC(uint64_t a1)
{
  return swift_retain(a1);
}

void sub_F9A04()
{
}

ValueMetadata *type metadata accessor for RegionNotSupportedForMedsFlow()
{
  return &type metadata for RegionNotSupportedForMedsFlow;
}

uint64_t sub_F9A20(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_890A4();
  return Flow.deferToExecuteAsync(_:)(a1, a2, &type metadata for RegionNotSupportedForMedsFlow, v4);
}

uint64_t sub_F9A60(uint64_t a1)
{
  v2[147] = v1;
  v2[146] = a1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[148] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[149] = v4;
  v2[150] = sub_D8CC(v4);
  v2[151] = sub_A5B8();
  v2[152] = sub_A5B8();
  uint64_t v5 = type metadata accessor for GenericButtonModel(0LL);
  v2[153] = v5;
  v2[154] = sub_A5C0(*(void *)(v5 - 8));
  uint64_t v6 = sub_494C(&qword_189CF8);
  v2[155] = sub_D8CC(*(void *)(v6 - 8));
  v2[156] = sub_A5B8();
  uint64_t v7 = type metadata accessor for URL(0LL);
  v2[157] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[158] = v8;
  v2[159] = sub_D8CC(v8);
  v2[160] = sub_A5B8();
  uint64_t v9 = type metadata accessor for DialogPhase(0LL);
  v2[161] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[162] = v10;
  v2[163] = sub_D8CC(v10);
  v2[164] = sub_A5B8();
  uint64_t v11 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[165] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[166] = v12;
  v2[167] = sub_A5C0(v12);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_F9B58()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_18B0BC);
  *(void *)(v0 + 1344) = v1;
  void *v1 = v0;
  v1[1] = sub_F9BA4;
  return sub_3CF88();
}

uint64_t sub_F9BA4(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 1344);
  *(void *)(v3 + 135_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a1;
  *(void *)(v3 + 1360) = v1;
  swift_task_dealloc(v4);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_F9C08(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 1312);
  uint64_t v3 = *(void *)(v1 + 1304);
  uint64_t v4 = *(void *)(v1 + 1296);
  uint64_t v5 = *(void *)(v1 + 1288);
  uint64_t v6 = *(void *)(v1 + 1176);
  static DialogPhase.error.getter(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  OutputGenerationManifest.init(dialogPhase:_:)(v3, sub_A633C, 0LL);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v5);
  sub_745A4();
  sub_202B4();
  uint64_t v7 = *(void *)(v1 + 776);
  uint64_t v8 = *(void *)(v1 + 784);
  sub_500C((void *)(v1 + 752), v7);
  char v9 = dispatch thunk of DeviceState.isPhone.getter(v7, v8);
  sub_FA740(v6, v1 + 16);
  if ((v9 & 1) != 0)
  {
    sub_FA774((void *)(v1 + 16));
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v1 + 752));
LABEL_4:
    uint64_t v13 = *(void *)(v1 + 1256);
    uint64_t v14 = *(void *)(v1 + 1248);
    uint64_t v15 = sub_90E74(0x616548206E65704FLL, 0xEB0000000068746CLL, 0x6C6165486E65706FLL, (void *)0xED00007070416874LL);
    uint64_t v17 = v16;
    sub_FA970( 0xD00000000000005CLL,  (uint64_t)"x-apple-health://MedicationsHealthAppPlugin.healthplugin/categoryRoom?presentWithAnimation=1");
    uint64_t v18 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v14, 1LL, v13);
    if ((_DWORD)v18 == 1)
    {
      uint64_t v96 = (_OWORD *)(v1 + 272);
      uint64_t v19 = *(void *)(v1 + 1248);
      uint64_t v20 = (uint64_t *)(v1 + 1216);
      uint64_t v21 = *(void *)(v1 + 1216);
      sub_FA9E0();
      uint64_t v22 = sub_41F24(v19);
      uint64_t v23 = Logger.wellness.unsafeMutableAddressor(v22);
      sub_FA8E8(v23);
      uint64_t v24 = sub_FA924();
      char v25 = (os_log_s *)Logger.logObject.getter(v24);
      os_log_type_t v26 = static os_log_type_t.debug.getter(v25);
      uint64_t v95 = v25;
      if (sub_A634(v26))
      {
        uint64_t v27 = (uint8_t *)sub_A5E8(2LL);
        *(_WORD *)uint64_t v27 = 0;
        uint64_t v28 = "Couldn't create URL for Phone or iPad Medications";
LABEL_11:
        _os_log_impl(&dword_0, v25, (os_log_type_t)v21, v28, v27, 2u);
        sub_5050((uint64_t)v27);
        goto LABEL_12;
      }

      goto LABEL_12;
    }

    uint64_t v97 = v1 + 952;
    uint64_t v93 = *(void *)(v1 + 1336);
    uint64_t v29 = *(void **)(v1 + 1264);
    char v30 = *(uint64_t **)(v1 + 1232);
    uint64_t v31 = *(void *)(v1 + 1224);
    sub_FA938(v18, *(void *)(v1 + 1248));
    uint64_t v32 = sub_FA8F8();
    *char v30 = v15;
    v30[1] = v17;
    id v33 = sub_FAA34(v32, "catId");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    sub_FA9F0();
    sub_FA980();
    *(void *)(v1 + 1056) = sub_FA94C();
    unint64_t v34 = sub_20168();
    *(void *)(v1 + 1064) = v34;
    uint64_t v42 = sub_FAA28(v34, v35, v36, v37, v38, v39, v40, v41, v92, v93, (void *)(v1 + 1032));
    sub_FA9D0((uint64_t)v42);
    sub_FA9B0();
    uint64_t v43 = sub_494C(&qword_18A460);
    uint64_t v44 = (__n128 *)sub_20308(v43, 40LL);
    sub_FA910(v44, v45, v46, (__n128)xmmword_138BA0);
    uint64_t v47 = v99;
    *(void *)(v1 + 1368) = v99;
    uint64_t v48 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)[1];
    id v49 = v29;
    uint64_t v50 = (void *)swift_task_alloc(v48);
    *(void *)(v1 + 1376) = v50;
    uint64_t v51 = sub_FA224;
    goto LABEL_14;
  }

  sub_500C((void *)(v1 + 16), *(void *)(v1 + 40));
  sub_202B4();
  uint64_t v10 = *(void *)(v1 + 816);
  uint64_t v11 = *(void *)(v1 + 824);
  sub_745A4();
  char v12 = dispatch thunk of DeviceState.isPad.getter(v10, v11);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v1 + 792));
  sub_FA774((void *)(v1 + 16));
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v1 + 752));
  if ((v12 & 1) != 0) {
    goto LABEL_4;
  }
  uint64_t v52 = *(void *)(v1 + 1256);
  uint64_t v53 = *(void *)(v1 + 1240);
  uint64_t v54 = sub_90E74(0xD000000000000010LL, 0x8000000000145450LL, 0xD000000000000012LL, (void *)0x8000000000145470LL);
  uint64_t v56 = v55;
  sub_FA970(0xD000000000000033LL, (uint64_t)"nanomedications://NanoMedications.app/categoryRoom?");
  uint64_t v57 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v53, 1LL, v52);
  if ((_DWORD)v57 == 1)
  {
    uint64_t v96 = (_OWORD *)(v1 + 592);
    uint64_t v58 = *(void *)(v1 + 1240);
    uint64_t v20 = (uint64_t *)(v1 + 1208);
    uint64_t v21 = *(void *)(v1 + 1208);
    sub_FA9E0();
    uint64_t v59 = sub_41F24(v58);
    uint64_t v60 = Logger.wellness.unsafeMutableAddressor(v59);
    sub_FA8E8(v60);
    uint64_t v61 = sub_FA924();
    char v25 = (os_log_s *)Logger.logObject.getter(v61);
    os_log_type_t v62 = static os_log_type_t.debug.getter(v25);
    uint64_t v95 = v25;
    if (sub_A634(v62))
    {
      uint64_t v27 = (uint8_t *)sub_A5E8(2LL);
      *(_WORD *)uint64_t v27 = 0;
      uint64_t v28 = "Couldn't create URL for Watch Medications";
      goto LABEL_11;
    }

uint64_t sub_FA224()
{
  uint64_t v1 = (void *)(*(void *)v0 + 1032LL);
  sub_20264(*(void *)(*(void *)v0 + 1376LL));
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
  sub_A964();
  return sub_A810();
}

uint64_t sub_FA278()
{
  uint64_t v2 = *(void **)(v0 + 1352);
  sub_FA9FC();
  sub_FA8C4();
  uint64_t v3 = sub_20308((uint64_t)&unk_1810F8, 56LL);
  sub_20004((__int128 *)(v0 + 872), v3 + 16);
  static OutputPublisherFactory.makeOutputPublisherAsync()(v39);
  uint64_t v4 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  uint64_t v5 = sub_FA9C0(v4);
  *(void *)(v0 + 1160) = sub_FAA1C(v5, (uint64_t)&unk_18FCC0, v6, v7, v8, v9, v10, v11);
  sub_FA9A0();

  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 952));
  uint64_t v12 = sub_201EC(v1);
  uint64_t v20 = sub_FAA10(v12, v13, v14, v15, v16, v17, v18, v19, v29, v31, v33);
  sub_FA990(v20, v21, v22, v23, v24, v25, v26, v27, v30, v32, v34, v35, v36, v37);
  sub_FA860();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  swift_task_dealloc(v38);
  return sub_98F84(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_FA370()
{
  uint64_t v1 = (void *)(*(void *)v0 + 832LL);
  sub_20264(*(void *)(*(void *)v0 + 1392LL));
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
  sub_A964();
  return sub_A810();
}

uint64_t sub_FA3C4()
{
  uint64_t v2 = *(void **)(v0 + 1352);
  sub_FA9FC();
  sub_FA8C4();
  uint64_t v3 = sub_20308((uint64_t)&unk_1810D0, 56LL);
  sub_20004((__int128 *)(v0 + 992), v3 + 16);
  static OutputPublisherFactory.makeOutputPublisherAsync()(v39);
  uint64_t v4 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  uint64_t v5 = sub_FA9C0(v4);
  *(void *)(v0 + 1144) = sub_FAA1C(v5, (uint64_t)&unk_18FCB0, v6, v7, v8, v9, v10, v11);
  sub_FA9A0();

  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 912));
  uint64_t v12 = sub_201EC(v1);
  uint64_t v20 = sub_FAA10(v12, v13, v14, v15, v16, v17, v18, v19, v29, v31, v33);
  sub_FA990(v20, v21, v22, v23, v24, v25, v26, v27, v30, v32, v34, v35, v36, v37);
  sub_FA860();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  swift_task_dealloc(v38);
  return sub_98F84(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_FA4BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 1360);
  uint64_t v3 = *(void *)(v1 + 1200);
  uint64_t v4 = *(void *)(v1 + 1192);
  uint64_t v5 = *(void *)(v1 + 1184);
  uint64_t v6 = Logger.wellness.unsafeMutableAddressor(a1);
  sub_FA8E8(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  swift_errorRetain(v2);
  uint64_t v7 = swift_errorRetain(v2);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = *(void *)(v1 + 1360);
    uint64_t v11 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v12 = (void *)sub_A5E8(8LL);
    *(_DWORD *)uint64_t v11 = 138412290;
    swift_errorRetain(v10);
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError(v10);
    *(void *)(v1 + 115_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 1152, v1 + 1160, v11 + 4, v11 + 12);
    *uint64_t v12 = v13;
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl(&dword_0, v8, v9, "Couldn't execute wellness#regionNotSupportedForMeds pattern. Error: %@", v11, 0xCu);
    sub_494C(&qword_189CB8);
    swift_arrayDestroy(v12, 1LL);
    sub_5050((uint64_t)v12);
    sub_5050((uint64_t)v11);
  }

  else
  {
    uint64_t v14 = *(void *)(v1 + 1360);
    swift_errorRelease(v14);
    swift_errorRelease(v14);
  }

  uint64_t v15 = *(void *)(v1 + 1360);
  uint64_t v16 = *(void *)(v1 + 1200);
  uint64_t v17 = *(void *)(v1 + 1192);
  uint64_t v18 = *(void *)(v1 + 1184);
  uint64_t v19 = *(void *)(v1 + 1176);

  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  sub_A13C((_OWORD *)(v19 + 40), (_OWORD *)(v1 + 432));
  sub_A178();
  static ExecuteResponse.complete<A>(next:)();
  swift_errorRelease(v15);
  sub_A1B4((void *)(v1 + 432));
  uint64_t v20 = sub_FA894();
  uint64_t v23 = v21;
  swift_task_dealloc(v20);
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_FA6F0(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18FCA4);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_A108;
  return sub_F9A60(a1);
}

uint64_t sub_FA740(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_FA774(void *a1)
{
  return a1;
}

uint64_t sub_FA7A0()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_FA7C4()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_18FCAC);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_3637C(v1);
  return sub_1FE14(v2, v3);
}

uint64_t sub_FA810()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_18FCBC);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_3637C(v1);
  return sub_903E4(v2, v3);
}

uint64_t sub_FA860()
{
  return swift_task_dealloc(*(void *)(v0 + 1336));
}

uint64_t sub_FA894()
{
  return *(void *)(v0 + 1336);
}

uint64_t sub_FA8C4()
{
  return sub_D7EC(v1, v0);
}

uint64_t sub_FA8E8(uint64_t a1)
{
  return swift_beginAccess(a1, v1, 0LL, 0LL);
}

uint64_t sub_FA8F8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v3 + *(int *)(v0 + 20), v2, v4);
}

uint64_t sub_FA910(__n128 *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  a1[1] = a4;
  a1[2].n128_u64[0] = v4;
  return specialized Array._endMutation()(a1, a2, a3);
}

uint64_t sub_FA924()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v0, v2);
}

uint64_t sub_FA938(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v3, a2, v4);
}

uint64_t sub_FA94C()
{
  return type metadata accessor for WellnessSnippets(0LL);
}

uint64_t sub_FA970@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return URL.init(string:)(a1, (a2 - 32) | 0x8000000000000000LL);
}

uint64_t sub_FA980()
{
  return OutputGenerationManifest.responseViewId.setter(v0, v1);
}

uint64_t sub_FA990( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a12 + 8))(a14, a13);
}

uint64_t sub_FA9A0()
{
  return static ExecuteResponse.complete<A>(next:)(v0);
}

uint64_t sub_FA9B0()
{
  return swift_storeEnumTagMultiPayload(v1, v0, 4LL);
}

uint64_t sub_FA9C0(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

uint64_t sub_FA9D0(uint64_t a1)
{
  return sub_201A8(v1, a1);
}

uint64_t sub_FA9E0()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_FA9F0()
{
}

  ;
}

uint64_t sub_FAA10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(a11, a10);
}

uint64_t sub_FAA1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  return SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)(va, a2, v8);
}

void *sub_FAA28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  return sub_B76C(a11);
}

id sub_FAA34(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

void sub_FAA40(void *a1, uint64_t a2)
{
  uint64_t v99 = a2;
  uint64_t v4 = sub_494C(&qword_189D00);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v97 - v9;
  __chkstk_darwin(v8);
  sub_FB534();
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v97 - v13;
  __chkstk_darwin(v12);
  uint64_t v98 = (uint64_t)&v97 - v15;
  sub_A794();
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v97 - v17;
  sub_A794();
  __chkstk_darwin(v19);
  uint64_t v101 = (char *)&v97 - v20;
  sub_A794();
  __chkstk_darwin(v21);
  uint64_t v97 = (char *)&v97 - v22;
  sub_A794();
  __chkstk_darwin(v23);
  sub_1C6B8();
  uint64_t v100 = v24;
  sub_A794();
  __chkstk_darwin(v25);
  sub_1C6B8();
  uint64_t v27 = v26;
  sub_A794();
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v97 - v29;
  sub_DA4CC(a1);
  if (v32)
  {
    uint64_t v33 = v31;
    uint64_t v34 = v32;
    uint64_t v35 = sub_FB42C(a1);
    if (v36)
    {
      uint64_t v37 = v27;
      String.toSpeakableString.getter(v35, v36);
      sub_249D4();
      sub_ABF4();
      sub_FB528();
      uint64_t v41 = (uint64_t)v18;
    }

    else
    {
      sub_ABF4();
      sub_FB51C();
      uint64_t v41 = (uint64_t)v18;
      uint64_t v37 = v27;
    }

    uint64_t v51 = 1LL;
    sub_A66C(v37, v38, v39, v40);
    uint64_t v102 = v33;
    uint64_t v103 = v34;
    swift_bridgeObjectRetain(v34);
    sub_FB48C();
    swift_bridgeObjectRelease(v34);
    uint64_t v52 = (uint64_t)v97;
    String.toSpeakableString.getter(v102, v103);
    sub_249D4();
    uint64_t v53 = sub_ABF4();
    sub_37150(v52);
    sub_DA4D8(a1);
    uint64_t v56 = (uint64_t)v101;
    uint64_t v57 = (uint64_t)v100;
    if (v55)
    {
      sub_FB504(v54, v55);
      sub_249D4();
      uint64_t v51 = 0LL;
    }

    uint64_t v58 = 1LL;
    sub_FB4E8(v57, v51);
    if (v60)
    {
      uint64_t v61 = v60;
      sub_FB50C(v59, v60);
      swift_bridgeObjectRelease(v61);
      uint64_t v58 = 0LL;
    }

    sub_9A688(v56, v58);
    id v62 = [a1 strength];
    uint64_t v63 = v62;
    if (v62)
    {
      [v62 doubleValue];
      uint64_t v65 = v64;

      uint64_t v66 = v65;
    }

    else
    {
      uint64_t v66 = 0LL;
    }

    sub_DA4F0(a1);
    if (v68)
    {
      sub_FB514(v67, v68);
      sub_B25F0();
      uint64_t v69 = 0LL;
    }

    else
    {
      uint64_t v69 = 1LL;
    }

    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v41, v69, 1LL, v53);
    uint64_t v70 = *(void *)(v53 - 8);
    uint64_t v71 = v98;
    sub_FB4D0(v98, *(uint64_t (**)(uint64_t, void, uint64_t))(v70 + 16));
    sub_37150(v71);
    uint64_t v72 = v37;
    uint64_t v73 = v52;
    uint64_t v74 = (uint64_t)v100;
    uint64_t v75 = (uint64_t)v101;
    uint64_t v76 = v66;
    char v77 = v63 == 0LL;
    uint64_t v78 = v41;
    uint64_t v79 = v71;
  }

  else
  {
    uint64_t v97 = v30;
    uint64_t v100 = v14;
    uint64_t v101 = v10;
    uint64_t v42 = sub_FB42C(a1);
    if (v43)
    {
      uint64_t v44 = v43;
      uint64_t v45 = (uint64_t)v97;
      sub_FB50C(v42, v43);
      swift_bridgeObjectRelease(v44);
      sub_ABF4();
      sub_FB528();
      uint64_t v41 = (uint64_t)v100;
      uint64_t v49 = (uint64_t)v101;
      uint64_t v50 = (uint64_t)v7;
    }

    else
    {
      sub_ABF4();
      sub_FB51C();
      uint64_t v41 = (uint64_t)v100;
      uint64_t v49 = (uint64_t)v101;
      uint64_t v50 = (uint64_t)v7;
      uint64_t v45 = (uint64_t)v97;
    }

    uint64_t v80 = 1LL;
    sub_A66C(v45, v46, v47, v48);
    sub_FB4B0();
    uint64_t v53 = sub_ABF4();
    sub_37150(v2);
    sub_DA4D8(a1);
    if (v82)
    {
      uint64_t v83 = v82;
      sub_FB514(v81, v82);
      swift_bridgeObjectRelease(v83);
      uint64_t v80 = 0LL;
    }

    uint64_t v84 = 1LL;
    sub_FB4E8(v41, v80);
    if (v86)
    {
      uint64_t v87 = v86;
      String.toSpeakableString.getter(v85, v86);
      swift_bridgeObjectRelease(v87);
      uint64_t v84 = 0LL;
    }

    sub_9A688(v49, v84);
    id v88 = [a1 strength];
    uint64_t v89 = v88;
    uint64_t v90 = v98;
    if (v88)
    {
      [v88 doubleValue];
      uint64_t v92 = v91;

      uint64_t v93 = v92;
    }

    else
    {
      uint64_t v93 = 0LL;
    }

    sub_DA4F0(a1);
    if (v95)
    {
      uint64_t v41 = v95;
      sub_FB4E0(v94, v95);
      sub_369F4();
      uint64_t v96 = 0LL;
    }

    else
    {
      uint64_t v96 = 1LL;
    }

    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v50, v96, 1LL, v53);
    uint64_t v70 = *(void *)(v53 - 8);
    sub_FB4D0(v90, *(uint64_t (**)(uint64_t, void, uint64_t))(v70 + 16));
    sub_37150(v90);
    uint64_t v72 = (uint64_t)v97;
    uint64_t v73 = v2;
    uint64_t v74 = (uint64_t)v100;
    uint64_t v75 = (uint64_t)v101;
    uint64_t v76 = v93;
    char v77 = v89 == 0LL;
    uint64_t v78 = v50;
    uint64_t v79 = v90;
  }

  sub_78548(v72, v73, v74, v75, v76, v77, v78, v79);

  (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v41, v53);
  sub_A744();
}

void sub_FAF24(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v104 = a3;
  uint64_t v103 = a2;
  uint64_t v5 = sub_494C(&qword_189D00);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v99 - v10;
  __chkstk_darwin(v9);
  sub_FB534();
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v99 - v14;
  __chkstk_darwin(v13);
  uint64_t v102 = (char *)&v99 - v16;
  sub_A794();
  __chkstk_darwin(v17);
  sub_1C6B8();
  uint64_t v100 = v18;
  sub_A794();
  __chkstk_darwin(v19);
  uint64_t v105 = (char *)&v99 - v20;
  sub_A794();
  __chkstk_darwin(v21);
  uint64_t v101 = (char *)&v99 - v22;
  sub_A794();
  __chkstk_darwin(v23);
  sub_1C6B8();
  uint64_t v25 = v24;
  sub_A794();
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v99 - v27;
  sub_A794();
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v99 - v30;
  sub_DA4CC(a1);
  if (v33)
  {
    uint64_t v34 = v32;
    uint64_t v35 = v33;
    uint64_t v36 = sub_FB42C(a1);
    if (v37)
    {
      sub_FB50C(v36, v37);
      sub_249D4();
      sub_ABF4();
      sub_FB528();
    }

    else
    {
      sub_ABF4();
      sub_FB51C();
    }

    uint64_t v51 = v100;
    uint64_t v52 = v25;
    uint64_t v53 = 1LL;
    sub_A66C((uint64_t)v28, v38, v39, v40);
    uint64_t v106 = v34;
    uint64_t v107 = v35;
    swift_bridgeObjectRetain(v35);
    sub_FB48C();
    sub_369F4();
    uint64_t v54 = (uint64_t)v101;
    String.toSpeakableString.getter(v106, v107);
    sub_249D4();
    sub_ABF4();
    sub_36F38(v54, 0LL);
    sub_DA4D8(a1);
    if (v56)
    {
      uint64_t v57 = v52;
      sub_FB4E0(v55, v56);
      sub_369F4();
      uint64_t v53 = 0LL;
      uint64_t v58 = (uint64_t)v105;
    }

    else
    {
      uint64_t v58 = (uint64_t)v105;
      uint64_t v57 = v52;
    }

    uint64_t v59 = 1LL;
    sub_36F38(v57, v53);
    sub_DA4E4(a1);
    if (v61)
    {
      uint64_t v62 = v61;
      sub_FB504(v60, v61);
      swift_bridgeObjectRelease(v62);
      uint64_t v59 = 0LL;
    }

    sub_36F38(v58, v59);
    id v63 = [a1 strength];
    uint64_t v64 = v63;
    if (v63)
    {
      [v63 doubleValue];
      uint64_t v66 = v65;

      uint64_t v67 = v66;
    }

    else
    {
      uint64_t v67 = 0LL;
    }

    sub_DA4F0(a1);
    if (v69)
    {
      String.toSpeakableString.getter(v68, v69);
      sub_B25F0();
      uint64_t v70 = 0LL;
    }

    else
    {
      uint64_t v70 = 1LL;
    }

    sub_36F38(v51, v70);
    uint64_t v71 = v51;
    uint64_t v72 = (uint64_t)v102;
    String.toSpeakableString.getter(v103, v104);
    sub_B25F0();
    sub_36F38(v72, 0LL);
    uint64_t v73 = (uint64_t)v28;
    uint64_t v74 = v54;
    uint64_t v75 = v57;
    uint64_t v76 = (uint64_t)v105;
    uint64_t v77 = v67;
    char v78 = v64 == 0LL;
    uint64_t v79 = v71;
  }

  else
  {
    uint64_t v105 = v31;
    uint64_t v41 = v15;
    uint64_t v42 = sub_FB42C(a1);
    if (v43)
    {
      uint64_t v44 = v43;
      uint64_t v45 = (uint64_t)v105;
      String.toSpeakableString.getter(v42, v43);
      swift_bridgeObjectRelease(v44);
      sub_ABF4();
      sub_FB528();
      uint64_t v49 = (uint64_t)v8;
      uint64_t v50 = (uint64_t)v11;
    }

    else
    {
      sub_ABF4();
      sub_FB51C();
      uint64_t v49 = (uint64_t)v8;
      uint64_t v50 = (uint64_t)v11;
      uint64_t v45 = (uint64_t)v105;
    }

    uint64_t v80 = 1LL;
    sub_A66C(v45, v46, v47, v48);
    uint64_t v81 = v3;
    sub_FB4B0();
    uint64_t v82 = sub_ABF4();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v3, 0LL, 1LL, v82);
    sub_DA4D8(a1);
    if (v84)
    {
      uint64_t v85 = v84;
      uint64_t v86 = (uint64_t)v41;
      sub_FB514(v83, v84);
      swift_bridgeObjectRelease(v85);
      uint64_t v80 = 0LL;
    }

    else
    {
      uint64_t v86 = (uint64_t)v41;
    }

    uint64_t v87 = 1LL;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v86, v80, 1LL, v82);
    sub_DA4E4(a1);
    if (v89)
    {
      uint64_t v90 = v89;
      sub_FB4E0(v88, v89);
      swift_bridgeObjectRelease(v90);
      uint64_t v87 = 0LL;
    }

    sub_ABEF4(v50, v87);
    id v91 = [a1 strength];
    uint64_t v92 = v91;
    if (v91)
    {
      [v91 doubleValue];
      uint64_t v94 = v93;

      uint64_t v95 = v94;
    }

    else
    {
      uint64_t v95 = 0LL;
    }

    sub_DA4F0(a1);
    if (v97)
    {
      sub_FB504(v96, v97);
      sub_369F4();
      uint64_t v98 = 0LL;
    }

    else
    {
      uint64_t v98 = 1LL;
    }

    sub_ABEF4(v49, v98);
    uint64_t v72 = (uint64_t)v102;
    String.toSpeakableString.getter(v103, v104);
    sub_369F4();
    sub_ABEF4(v72, 0LL);
    uint64_t v73 = (uint64_t)v105;
    uint64_t v74 = v81;
    uint64_t v75 = v86;
    uint64_t v76 = v50;
    uint64_t v77 = v95;
    char v78 = v92 == 0LL;
    uint64_t v79 = v49;
  }

  sub_78548(v73, v74, v75, v76, v77, v78, v79, v72);

  sub_A744();
}

uint64_t sub_FB42C(void *a1)
{
  id v1 = [a1 name];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void sub_FB48C()
{
  v0._object = (void *)0xE900000000000065LL;
  v0._countAndFlagsBits = 0x6C75646568635320LL;
  String.append(_:)(v0);
}

uint64_t sub_FB4B0()
{
  return String.toSpeakableString.getter(0x656465654E207341LL, 0xE900000000000064LL);
}

uint64_t sub_FB4D0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, void, uint64_t)@<X8>)
{
  return a2(a1, *(void *)(v3 - 136), v2);
}

uint64_t sub_FB4E0(uint64_t a1, uint64_t a2)
{
  return String.toSpeakableString.getter(a1, a2);
}

void sub_FB4E8(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_FB504(uint64_t a1, uint64_t a2)
{
  return String.toSpeakableString.getter(a1, a2);
}

uint64_t sub_FB50C(uint64_t a1, uint64_t a2)
{
  return String.toSpeakableString.getter(a1, a2);
}

uint64_t sub_FB514(uint64_t a1, uint64_t a2)
{
  return String.toSpeakableString.getter(a1, a2);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_FB548@<X0>( uint64_t a1@<X0>, char a2@<W1>, char a3@<W3>, char a4@<W5>, char a5@<W7>, uint64_t a6@<X8>, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  BOOL v18 = (a2 & 1) == 0;
  BOOL v19 = (a3 & 1) == 0;
  BOOL v59 = (a4 & 1) == 0;
  BOOL v61 = (a5 & 1) == 0;
  sub_494C(&qword_18A1A0);
  sub_6D20();
  __chkstk_darwin(v20);
  sub_27AD8();
  uint64_t v63 = type metadata accessor for AppPunchout(0LL);
  sub_6D78(a6, v21, v22, v63);
  uint64_t v23 = (int *)sub_FEE48();
  uint64_t v24 = a6 + v23[10];
  uint64_t v56 = v24;
  uint64_t v25 = type metadata accessor for SpeakableString(0LL);
  sub_6D78(v24, v26, v27, v25);
  uint64_t v28 = (void *)(a6 + v23[11]);
  *uint64_t v28 = 0LL;
  v28[1] = 0LL;
  uint64_t v64 = (void *)(a6 + v23[12]);
  *uint64_t v64 = 0LL;
  v64[1] = 0LL;
  uint64_t v65 = (void *)(a6 + v23[13]);
  *uint64_t v65 = 0LL;
  v65[1] = 0LL;
  uint64_t v66 = (uint64_t *)(a6 + v23[14]);
  *uint64_t v66 = 0LL;
  v66[1] = 0LL;
  uint64_t v29 = (void *)(a6 + v23[15]);
  *uint64_t v29 = 0LL;
  v29[1] = 0LL;
  uint64_t v30 = (void *)(a6 + v23[17]);
  *uint64_t v30 = 0LL;
  v30[1] = 0LL;
  uint64_t v31 = a6 + v23[18];
  uint64_t v55 = v31;
  uint64_t v32 = type metadata accessor for SnippetHeaderModel(0LL);
  sub_6D78(v31, v33, v34, v32);
  if (v18 && (a1 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
    uint64_t v35 = 0LL;
  }
  else {
    uint64_t v35 = a1;
  }
  uint64_t v36 = a6 + v23[5];
  *(void *)uint64_t v36 = v35;
  *(_BYTE *)(v36 + 8) = a2 & 1 | ((a1 & 0x7FFFFFFFFFFFFFFFLL) == 0);
  sub_BED9C();
  if ((v19 & v37) != 0) {
    uint64_t v38 = 0LL;
  }
  uint64_t v39 = a6 + v23[6];
  *(void *)uint64_t v39 = v38;
  *(_BYTE *)(v39 + 8) = (a3 | v37) & 1;
  sub_BED9C();
  if ((v59 & v40) != 0) {
    uint64_t v41 = 0LL;
  }
  uint64_t v42 = a6 + v23[7];
  *(void *)uint64_t v42 = v41;
  *(_BYTE *)(v42 + 8) = (a4 | v40) & 1;
  sub_BED9C();
  if ((v61 & v43) != 0) {
    uint64_t v44 = 0LL;
  }
  uint64_t v45 = a6 + v23[8];
  *(void *)uint64_t v45 = v44;
  *(_BYTE *)(v45 + 8) = (a5 | v43) & 1;
  sub_BED9C();
  if ((((a8 & 1) == 0) & v46) != 0) {
    uint64_t v47 = 0LL;
  }
  uint64_t v48 = v23[16];
  uint64_t v49 = a6 + v23[9];
  *(void *)uint64_t v49 = v47;
  *(_BYTE *)(v49 + 8) = (a8 | v46) & 1;
  uint64_t v50 = (void *)(a6 + v48);
  *uint64_t v50 = a9;
  v50[1] = a10;
  sub_279B4(a11, v56, &qword_189D00);
  sub_2521C(a12);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v15, 0LL, 1LL, v63);
  sub_24D88(v15, a6, &qword_18A1A0);
  swift_bridgeObjectRelease();
  *uint64_t v30 = a13;
  v30[1] = a14;
  sub_279B4(a15, v55, &qword_18A1A8);
  sub_FC000(*(void *)v49, *(_BYTE *)(v49 + 8));
  sub_BED84();
  swift_bridgeObjectRelease();
  *uint64_t v29 = v30;
  v29[1] = v15;
  sub_FC000(*(void *)v36, *(_BYTE *)(v36 + 8));
  sub_BED84();
  swift_bridgeObjectRelease();
  *uint64_t v28 = v30;
  v28[1] = v15;
  sub_FC000(*(void *)v39, *(_BYTE *)(v39 + 8));
  sub_BED84();
  swift_bridgeObjectRelease();
  *uint64_t v64 = v30;
  v64[1] = v15;
  sub_FC000(*(void *)v42, *(_BYTE *)(v42 + 8));
  sub_BED84();
  swift_bridgeObjectRelease();
  *uint64_t v65 = v30;
  v65[1] = v15;
  uint64_t v51 = sub_FC000(*(void *)v45, *(_BYTE *)(v45 + 8));
  uint64_t v53 = v52;
  sub_279E0(a15, &qword_18A1A8);
  sub_279E0(a12, &qword_189CF8);
  sub_279E0(a11, &qword_189D00);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v66 = v51;
  v66[1] = v53;
  return result;
}

uint64_t GenericQueryModel.averageValue.getter()
{
  uint64_t v1 = sub_FEE48();
  return sub_27A9C(v0 + *(int *)(v1 + 20));
}

uint64_t type metadata accessor for GenericQueryModel(uint64_t a1)
{
  uint64_t result = qword_18FD38;
  if (!qword_18FD38) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for GenericQueryModel);
  }
  return result;
}

void GenericQueryModel.averageValue.setter()
{
  uint64_t v0 = sub_FEE48();
  sub_27A40(*(int *)(v0 + 20));
  sub_1EB0C();
}

uint64_t (*GenericQueryModel.averageValue.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t GenericQueryModel.maxValue.getter()
{
  uint64_t v1 = sub_FEE48();
  return sub_27A9C(v0 + *(int *)(v1 + 24));
}

void GenericQueryModel.maxValue.setter()
{
  uint64_t v0 = sub_FEE48();
  sub_27A40(*(int *)(v0 + 24));
  sub_1EB0C();
}

uint64_t (*GenericQueryModel.maxValue.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t GenericQueryModel.minValue.getter()
{
  uint64_t v1 = sub_FEE48();
  return sub_27A9C(v0 + *(int *)(v1 + 28));
}

void GenericQueryModel.minValue.setter()
{
  uint64_t v0 = sub_FEE48();
  sub_27A40(*(int *)(v0 + 28));
  sub_1EB0C();
}

uint64_t (*GenericQueryModel.minValue.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t GenericQueryModel.mostRecentValue.getter()
{
  uint64_t v1 = sub_FEE48();
  return sub_27A9C(v0 + *(int *)(v1 + 32));
}

void GenericQueryModel.mostRecentValue.setter()
{
  uint64_t v0 = sub_FEE48();
  sub_27A40(*(int *)(v0 + 32));
  sub_1EB0C();
}

uint64_t (*GenericQueryModel.mostRecentValue.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t GenericQueryModel.totalValue.getter()
{
  uint64_t v1 = sub_FEE48();
  return sub_27A9C(v0 + *(int *)(v1 + 36));
}

void GenericQueryModel.totalValue.setter()
{
  uint64_t v0 = sub_FEE48();
  sub_27A40(*(int *)(v0 + 36));
  sub_1EB0C();
}

uint64_t (*GenericQueryModel.totalValue.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void GenericQueryModel.dateLabel.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_FEE48();
  sub_A44C(v1 + *(int *)(v3 + 40), a1, &qword_189D00);
  sub_A890();
}

void GenericQueryModel.dateLabel.setter(uint64_t a1)
{
  uint64_t v3 = sub_FEE48();
  sub_24D88(a1, v1 + *(int *)(v3 + 40), &qword_189D00);
  sub_A890();
}

uint64_t (*GenericQueryModel.dateLabel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void GenericQueryModel.averageValueString.getter()
{
  uint64_t v0 = sub_FEE48();
  sub_27A30(*(int *)(v0 + 44));
  sub_1EB8C();
  sub_A890();
}

void GenericQueryModel.averageValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_FEE48();
  sub_27AB4(*(int *)(v5 + 44));
  void *v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*GenericQueryModel.averageValueString.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void GenericQueryModel.maxValueString.getter()
{
  uint64_t v0 = sub_FEE48();
  sub_27A30(*(int *)(v0 + 48));
  sub_1EB8C();
  sub_A890();
}

void GenericQueryModel.maxValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_FEE48();
  sub_27AB4(*(int *)(v5 + 48));
  void *v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*GenericQueryModel.maxValueString.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void GenericQueryModel.minValueString.getter()
{
  uint64_t v0 = sub_FEE48();
  sub_27A30(*(int *)(v0 + 52));
  sub_1EB8C();
  sub_A890();
}

void GenericQueryModel.minValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_FEE48();
  sub_27AB4(*(int *)(v5 + 52));
  void *v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*GenericQueryModel.minValueString.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void GenericQueryModel.mostRecentValueString.getter()
{
  uint64_t v0 = sub_FEE48();
  sub_27A30(*(int *)(v0 + 56));
  sub_1EB8C();
  sub_A890();
}

void GenericQueryModel.mostRecentValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_FEE48();
  sub_27AB4(*(int *)(v5 + 56));
  void *v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*GenericQueryModel.mostRecentValueString.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void GenericQueryModel.totalValueString.getter()
{
  uint64_t v0 = sub_FEE48();
  sub_27A30(*(int *)(v0 + 60));
  sub_1EB8C();
  sub_A890();
}

void GenericQueryModel.totalValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_FEE48();
  sub_27AB4(*(int *)(v5 + 60));
  void *v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*GenericQueryModel.totalValueString.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void GenericQueryModel.unit.getter()
{
  uint64_t v0 = sub_FEE48();
  sub_27A30(*(int *)(v0 + 64));
  sub_1EB8C();
  sub_A890();
}

void GenericQueryModel.unit.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_FEE48();
  sub_27AB4(*(int *)(v5 + 64));
  void *v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*GenericQueryModel.unit.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void GenericQueryModel.averageLabelString.getter()
{
  uint64_t v0 = sub_FEE48();
  sub_27A30(*(int *)(v0 + 68));
  sub_1EB8C();
  sub_A890();
}

void GenericQueryModel.averageLabelString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_FEE48();
  sub_27AB4(*(int *)(v5 + 68));
  void *v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*GenericQueryModel.averageLabelString.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void GenericQueryModel.snippetHeaderModel.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_FEE48();
  sub_A44C(v1 + *(int *)(v3 + 72), a1, &qword_18A1A8);
  sub_A890();
}

void GenericQueryModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t v3 = sub_FEE48();
  sub_24D88(a1, v1 + *(int *)(v3 + 72), &qword_18A1A8);
  sub_A890();
}

uint64_t (*GenericQueryModel.snippetHeaderModel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t sub_FC000(uint64_t a1, char a2)
{
  uint64_t v5 = sub_494C(&qword_18A1A8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Model = type metadata accessor for GenericQueryModel(0LL);
  sub_A44C(v2 + *(int *)(Model + 72), (uint64_t)v7, &qword_18A1A8);
  uint64_t v9 = type metadata accessor for SnippetHeaderModel(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v7, 1LL, v9) == 1)
  {
    sub_279E0((uint64_t)v7, &qword_18A1A8);
    return 0LL;
  }

  char v11 = a2 & 1;
  uint64_t v12 = &v7[*(int *)(v9 + 24)];
  uint64_t v14 = *(void *)v12;
  uint64_t v13 = *((void *)v12 + 1);
  swift_bridgeObjectRetain(v13);
  sub_26F04((uint64_t)v7, type metadata accessor for SnippetHeaderModel);
  if (v14 == 0xD000000000000021LL && v13 == 0x8000000000143A20LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021LL, 0x8000000000143A20LL, v14, v13, 0LL) & 1) != 0
    || v14 == 0xD000000000000029LL && v13 == 0x8000000000142910LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000029LL, 0x8000000000142910LL, v14, v13, 0LL) & 1) != 0
    || v14 == 0xD00000000000002ALL && v13 == 0x8000000000142770LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002ALL, 0x8000000000142770LL, v14, v13, 0LL) & 1) != 0
    || v14 == 0xD000000000000029LL && v13 == 0x80000000001427A0LL)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000029LL, 0x80000000001427A0LL, v14, v13, 0LL);
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0) {
      return sub_FC248(a1, v11);
    }
  }

  return sub_FC35C(a1, v11);
}

uint64_t sub_FC248(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return 0LL;
  }
  uint64_t v2 = result;
  double v3 = trunc(*(double *)&result);
  if (*(double *)&result <= -9.22337204e18 || *(double *)&result >= 9.22337204e18 || v3 != *(double *)&result)
  {
    uint64_t v6 = sub_494C(&qword_18D778);
    uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
    *(_OWORD *)(v7 + 16) = xmmword_137250;
    *(void *)(v7 + 56) = &type metadata for Double;
    *(void *)(v7 + 64) = &protocol witness table for Double;
    *(void *)(v7 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v2;
    uint64_t v8 = String.init(format:arguments:)(1714499109LL, 0xE400000000000000LL, v7);
    swift_bridgeObjectRelease();
    return v8;
  }

  if ((~result & 0x7FF0000000000000LL) != 0) {
    return dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  }
  __break(1u);
  return result;
}

uint64_t sub_FC35C(uint64_t a1, char a2)
{
  id v3 = [objc_allocWithZone(NSNumberFormatter) init];
  [v3 setNumberStyle:1];
  [v3 setMaximumFractionDigits:1];
  id v4 = [objc_allocWithZone(NSNumber) initWithDouble:*(double *)&a1];
  id v5 = [v3 stringFromNumber:v4];

  if (v5)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  }

  else
  {

    return 0LL;
  }

  return v6;
}

uint64_t sub_FC458(uint64_t a1, unint64_t a2)
{
  BOOL v3 = a1 == 0x68636E7550707061LL && a2 == 0xEB0000000074756FLL;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x68636E7550707061LL, 0xEB0000000074756FLL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  BOOL v6 = a1 == 0x5665676172657661LL && a2 == 0xEC00000065756C61LL;
  if (v6
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x5665676172657661LL, 0xEC00000065756C61LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  BOOL v7 = a1 == 0x65756C615678616DLL && a2 == 0xE800000000000000LL;
  if (v7
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x65756C615678616DLL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 2LL;
  }

  BOOL v8 = a1 == 0x65756C61566E696DLL && a2 == 0xE800000000000000LL;
  if (v8
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x65756C61566E696DLL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 3LL;
  }

  BOOL v9 = a1 == 0x6563655274736F6DLL && a2 == 0xEF65756C6156746ELL;
  if (v9
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6563655274736F6DLL, 0xEF65756C6156746ELL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 4LL;
  }

  BOOL v10 = a1 == 0x6C61566C61746F74LL && a2 == 0xEA00000000006575LL;
  if (v10
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6C61566C61746F74LL, 0xEA00000000006575LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 5LL;
  }

  BOOL v11 = a1 == 0x6562614C65746164LL && a2 == 0xE90000000000006CLL;
  if (v11
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6562614C65746164LL, 0xE90000000000006CLL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 6LL;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v12 = 0x80000000001448F0LL;
    if (a2 == 0x80000000001448F0LL) {
      goto LABEL_47;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x80000000001448F0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
LABEL_47:
    swift_bridgeObjectRelease(v12);
    return 7LL;
  }

  BOOL v13 = a1 == 0x65756C615678616DLL && a2 == 0xEE00676E69727453LL;
  if (v13
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x65756C615678616DLL, 0xEE00676E69727453LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 8LL;
  }

  BOOL v14 = a1 == 0x65756C61566E696DLL && a2 == 0xEE00676E69727453LL;
  if (v14
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x65756C61566E696DLL, 0xEE00676E69727453LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 9LL;
  }

  if (a1 == 0xD000000000000015LL && a2 == 0x80000000001460B0LL)
  {
    unint64_t v15 = 0x80000000001460B0LL;
LABEL_65:
    swift_bridgeObjectRelease(v15);
    return 10LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x80000000001460B0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
    goto LABEL_65;
  }

  if (a1 == 0xD000000000000010LL && a2 == 0x80000000001468F0LL)
  {
    unint64_t v16 = 0x80000000001468F0LL;
LABEL_71:
    swift_bridgeObjectRelease(v16);
    return 11LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000000001468F0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v16 = a2;
    goto LABEL_71;
  }

  BOOL v17 = a1 == 1953066613 && a2 == 0xE400000000000000LL;
  if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(1953066613LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 12LL;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v18 = 0x80000000001460F0LL;
    if (a2 == 0x80000000001460F0LL) {
      goto LABEL_82;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x80000000001460F0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v18 = a2;
LABEL_82:
    swift_bridgeObjectRelease(v18);
    return 13LL;
  }

  if (a1 == 0xD000000000000012LL && a2 == 0x8000000000141630LL)
  {
    swift_bridgeObjectRelease(0x8000000000141630LL);
    return 14LL;
  }

  else
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000000141630LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v19 & 1) != 0) {
      return 14LL;
    }
    else {
      return 15LL;
    }
  }

uint64_t sub_FCA14(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_FCA4C + 4 * byte_13E2E0[a1]))( 0xD000000000000012LL,  0x80000000001448F0LL);
}

uint64_t sub_FCA4C()
{
  return 0x68636E7550707061LL;
}

uint64_t sub_FCA6C()
{
  return 0x5665676172657661LL;
}

uint64_t sub_FCA8C()
{
  return 0x65756C615678616DLL;
}

uint64_t sub_FCAB4()
{
  return 0x6563655274736F6DLL;
}

uint64_t sub_FCAD8()
{
  return 0x6C61566C61746F74LL;
}

uint64_t sub_FCAF4()
{
  return 0x6562614C65746164LL;
}

uint64_t sub_FCB10()
{
  return 0x65756C615678616DLL;
}

uint64_t sub_FCB40(uint64_t a1)
{
  return a1 + 3;
}

uint64_t sub_FCB90()
{
  return sub_FCA14(*v0);
}

uint64_t sub_FCB98@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_FC458(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_FCBBC(uint64_t a1)
{
  unint64_t v2 = sub_FCF60();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_FCBE4(uint64_t a1)
{
  unint64_t v2 = sub_FCF60();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GenericQueryModel.encode(to:)(void *a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = sub_494C(&qword_18FCC8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_27AD8();
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_500C(a1, v8);
  unint64_t v10 = sub_FCF60();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for GenericQueryModel.CodingKeys,  &type metadata for GenericQueryModel.CodingKeys,  v10,  v8,  v9);
  char v56 = 0;
  uint64_t v11 = type metadata accessor for AppPunchout(0LL);
  sub_A410( &qword_18AA98,  (uint64_t (*)(uint64_t))&type metadata accessor for AppPunchout,  (uint64_t)&protocol conformance descriptor for AppPunchout);
  sub_5E21C(v4, (uint64_t)&v56, v6, v11);
  if (!v2)
  {
    uint64_t Model = (int *)type metadata accessor for GenericQueryModel(0LL);
    uint64_t v13 = sub_27A9C(v4 + Model[5]);
    char v55 = 1;
    sub_27A20(v13, v14, (uint64_t)&v55);
    uint64_t v15 = sub_27A9C(v4 + Model[6]);
    char v54 = 2;
    sub_27A20(v15, v16, (uint64_t)&v54);
    uint64_t v17 = sub_27A9C(v4 + Model[7]);
    char v53 = 3;
    sub_27A20(v17, v18, (uint64_t)&v53);
    uint64_t v19 = sub_27A9C(v4 + Model[8]);
    char v52 = 4;
    sub_27A20(v19, v20, (uint64_t)&v52);
    uint64_t v21 = sub_27A9C(v4 + Model[9]);
    char v51 = 5;
    sub_27A20(v21, v22, (uint64_t)&v51);
    uint64_t v23 = v4 + Model[10];
    char v50 = 6;
    uint64_t v24 = type metadata accessor for SpeakableString(0LL);
    sub_A410( &qword_18AAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString,  (uint64_t)&protocol conformance descriptor for SpeakableString);
    sub_5E21C(v23, (uint64_t)&v50, v6, v24);
    uint64_t v25 = sub_5E260(Model[11]);
    char v49 = 7;
    sub_27A10(v25, v26, (uint64_t)&v49);
    uint64_t v27 = sub_5E260(Model[12]);
    char v48 = 8;
    sub_27A10(v27, v28, (uint64_t)&v48);
    uint64_t v29 = sub_5E260(Model[13]);
    char v47 = 9;
    sub_27A10(v29, v30, (uint64_t)&v47);
    uint64_t v31 = sub_5E260(Model[14]);
    char v46 = 10;
    sub_27A10(v31, v32, (uint64_t)&v46);
    uint64_t v33 = sub_5E260(Model[15]);
    char v45 = 11;
    sub_27A10(v33, v34, (uint64_t)&v45);
    uint64_t v35 = sub_5E260(Model[16]);
    char v44 = 12;
    sub_27A10(v35, v36, (uint64_t)&v44);
    uint64_t v37 = sub_5E260(Model[17]);
    char v43 = 13;
    sub_27A10(v37, v38, (uint64_t)&v43);
    uint64_t v39 = v4 + Model[18];
    char v42 = 14;
    uint64_t v40 = type metadata accessor for SnippetHeaderModel(0LL);
    sub_A410( &qword_18AAA8,  type metadata accessor for SnippetHeaderModel,  (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    sub_5E21C(v39, (uint64_t)&v42, v6, v40);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
}

unint64_t sub_FCF60()
{
  unint64_t result = qword_18FCD0;
  if (!qword_18FCD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_13E4AC, &type metadata for GenericQueryModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18FCD0);
  }

  return result;
}

void GenericQueryModel.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v71 = a2;
  sub_494C(&qword_18A1A8);
  sub_6D20();
  __chkstk_darwin(v3);
  sub_6D30();
  uint64_t v72 = v4;
  sub_494C(&qword_189D00);
  sub_6D20();
  __chkstk_darwin(v5);
  sub_6D30();
  uint64_t v78 = v6;
  sub_494C(&qword_18A1A0);
  sub_6D20();
  __chkstk_darwin(v7);
  sub_6D30();
  uint64_t v85 = v8;
  uint64_t v9 = sub_494C(&qword_18FCD8);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v86 = v9;
  uint64_t v87 = v10;
  __chkstk_darwin(v9);
  sub_6D30();
  uint64_t v91 = v11;
  uint64_t Model = (int *)type metadata accessor for GenericQueryModel(0LL);
  sub_6D20();
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v84 = type metadata accessor for AppPunchout(0LL);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v15, 1LL, 1LL, v84);
  sub_FEE60(Model[5]);
  uint64_t v82 = v16;
  *(_BYTE *)(v16 + 8) = 1;
  sub_FEE60(Model[6]);
  uint64_t v81 = v17;
  *(_BYTE *)(v17 + 8) = 1;
  sub_FEE60(Model[7]);
  uint64_t v80 = v18;
  *(_BYTE *)(v18 + 8) = 1;
  sub_FEE60(Model[8]);
  uint64_t v79 = v19;
  *(_BYTE *)(v19 + 8) = 1;
  sub_FEE60(Model[9]);
  uint64_t v76 = v20;
  *(_BYTE *)(v20 + 8) = 1;
  uint64_t v21 = (uint64_t)&v15[Model[10]];
  uint64_t v22 = type metadata accessor for SpeakableString(0LL);
  uint64_t v75 = v21;
  uint64_t v77 = v22;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v21, 1LL, 1LL, v22);
  uint64_t v23 = &v15[Model[11]];
  *(void *)uint64_t v23 = 0LL;
  *((void *)v23 + 1) = 0LL;
  uint64_t v74 = v23;
  uint64_t v24 = &v15[Model[12]];
  *(void *)uint64_t v24 = 0LL;
  *((void *)v24 + 1) = 0LL;
  uint64_t v73 = v24;
  uint64_t v25 = &v15[Model[13]];
  *(void *)uint64_t v25 = 0LL;
  *((void *)v25 + 1) = 0LL;
  uint64_t v26 = &v15[Model[14]];
  *(void *)uint64_t v26 = 0LL;
  *((void *)v26 + 1) = 0LL;
  uint64_t v27 = &v15[Model[15]];
  *(void *)uint64_t v27 = 0LL;
  *((void *)v27 + 1) = 0LL;
  uint64_t v28 = &v15[Model[16]];
  *(void *)uint64_t v28 = 0LL;
  *((void *)v28 + 1) = 0LL;
  uint64_t v29 = &v15[Model[17]];
  *(void *)uint64_t v29 = 0LL;
  *((void *)v29 + 1) = 0LL;
  uint64_t v30 = Model[18];
  uint64_t v90 = v15;
  uint64_t v31 = (uint64_t)&v15[v30];
  uint64_t v32 = type metadata accessor for SnippetHeaderModel(0LL);
  uint64_t v83 = v31;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v31, 1LL, 1LL, v32);
  uint64_t v33 = a1;
  uint64_t v34 = a1[3];
  uint64_t v35 = a1[4];
  uint64_t v89 = v33;
  sub_500C(v33, v34);
  unint64_t v36 = sub_FCF60();
  uint64_t v37 = v88;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for GenericQueryModel.CodingKeys,  &type metadata for GenericQueryModel.CodingKeys,  v36,  v34,  v35);
  if (v37)
  {
    uint64_t v67 = (uint64_t)v90;
  }

  else
  {
    uint64_t v88 = v25;
    uint64_t v70 = v26;
    uint64_t v69 = v27;
    uint64_t v38 = v83;
    uint64_t v39 = v87;
    char v106 = 0;
    sub_A410( &qword_18AAB8,  (uint64_t (*)(uint64_t))&type metadata accessor for AppPunchout,  (uint64_t)&protocol conformance descriptor for AppPunchout);
    uint64_t v40 = v85;
    uint64_t v41 = v86;
    uint64_t v42 = v91;
    sub_FEE6C(v84, (uint64_t)&v106, v86, v84);
    sub_24D88(v40, (uint64_t)v90, &qword_18A1A0);
    char v105 = 1;
    uint64_t v43 = sub_BED38((uint64_t)&v105);
    sub_BED44(v43, v44);
    char v104 = 2;
    uint64_t v45 = sub_BED38((uint64_t)&v104);
    sub_BED44(v45, v46);
    char v103 = 3;
    uint64_t v47 = sub_BED38((uint64_t)&v103);
    sub_BED44(v47, v48);
    char v102 = 4;
    uint64_t v49 = sub_BED38((uint64_t)&v102);
    sub_BED44(v49, v50);
    char v101 = 5;
    uint64_t v51 = sub_BED38((uint64_t)&v101);
    sub_BED44(v51, v52);
    char v100 = 6;
    sub_A410( &qword_18AAC0,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString,  (uint64_t)&protocol conformance descriptor for SpeakableString);
    sub_FEE6C(v77, (uint64_t)&v100, v41, v77);
    sub_24D88(v78, v75, &qword_189D00);
    char v99 = 7;
    uint64_t v53 = sub_BED60((uint64_t)&v99, v41);
    char v54 = (uint64_t *)v74;
    uint64_t v84 = v55;
    uint64_t v85 = v53;
    swift_bridgeObjectRelease();
    uint64_t v56 = v86;
    uint64_t v57 = v84;
    *char v54 = v85;
    v54[1] = v57;
    v98[0] = 8;
    uint64_t v85 = sub_BED60((uint64_t)v98, v56);
    uint64_t v59 = v58;
    uint64_t v60 = (uint64_t *)v73;
    sub_8DEA8();
    uint64_t v61 = v86;
    *uint64_t v60 = v85;
    v60[1] = v59;
    char v97 = 9;
    sub_BED60((uint64_t)&v97, v61);
    sub_992AC();
    uint64_t v62 = v88;
    sub_8DEA8();
    *(void *)uint64_t v62 = v42;
    *((void *)v62 + 1) = v59;
    char v96 = 10;
    sub_FEE50((uint64_t)&v96);
    sub_992AC();
    uint64_t v63 = v70;
    sub_8DEA8();
    *(void *)uint64_t v63 = v42;
    *((void *)v63 + 1) = v59;
    char v95 = 11;
    sub_FEE50((uint64_t)&v95);
    sub_992AC();
    uint64_t v64 = v69;
    sub_8DEA8();
    *(void *)uint64_t v64 = v42;
    *((void *)v64 + 1) = v59;
    char v94 = 12;
    sub_FEE50((uint64_t)&v94);
    sub_992AC();
    swift_bridgeObjectRelease();
    *(void *)uint64_t v28 = v42;
    *((void *)v28 + 1) = v59;
    char v93 = 13;
    sub_FEE50((uint64_t)&v93);
    sub_992AC();
    swift_bridgeObjectRelease();
    *(void *)uint64_t v29 = v42;
    *((void *)v29 + 1) = v59;
    char v92 = 14;
    sub_A410( &qword_18AAC8,  type metadata accessor for SnippetHeaderModel,  (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    uint64_t v65 = v86;
    uint64_t v66 = v91;
    sub_FEE6C(v32, (uint64_t)&v92, v86, v32);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v66, v65);
    uint64_t v67 = (uint64_t)v90;
    sub_24D88(v72, v38, &qword_18A1A8);
    sub_FD5F4(v67, v71);
  }

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v89);
  sub_26F04(v67, type metadata accessor for GenericQueryModel);
}

uint64_t sub_FD5F4(uint64_t a1, uint64_t a2)
{
  uint64_t Model = type metadata accessor for GenericQueryModel(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Model - 8) + 16LL))(a2, a1, Model);
  return a2;
}

void sub_FD638()
{
}

void sub_FD664()
{
}

void sub_FD690(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_FD6A4(void *a1)
{
  return GenericQueryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for GenericQueryModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for AppPunchout(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_494C(&qword_18A1A0);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[5];
    uint64_t v11 = a3[6];
    unint64_t v12 = (char *)a1 + v10;
    uint64_t v13 = (char *)a2 + v10;
    *(void *)unint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = (char *)a1 + v11;
    uint64_t v15 = (char *)a2 + v11;
    *(void *)uint64_t v14 = *(void *)v15;
    v14[8] = v15[8];
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = (char *)a1 + v16;
    uint64_t v19 = (char *)a2 + v16;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = (char *)a1 + v17;
    uint64_t v21 = (char *)a2 + v17;
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    uint64_t v22 = a3[9];
    uint64_t v23 = a3[10];
    uint64_t v24 = (char *)a1 + v22;
    uint64_t v25 = (char *)a2 + v22;
    v24[8] = v25[8];
    *(void *)uint64_t v24 = *(void *)v25;
    uint64_t v26 = (char *)a1 + v23;
    uint64_t v27 = (char *)a2 + v23;
    uint64_t v28 = type metadata accessor for SpeakableString(0LL);
    uint64_t v71 = v28;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1LL, v28))
    {
      uint64_t v29 = sub_494C(&qword_189D00);
      memcpy(v26, v27, *(void *)(*(void *)(v29 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16LL))(v26, v27, v28);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v26, 0LL, 1LL, v28);
    }

    uint64_t v30 = a3[11];
    uint64_t v31 = a3[12];
    uint64_t v32 = (uint64_t *)((char *)a1 + v30);
    uint64_t v33 = (uint64_t *)((char *)a2 + v30);
    uint64_t v34 = v33[1];
    *uint64_t v32 = *v33;
    v32[1] = v34;
    uint64_t v35 = (uint64_t *)((char *)a1 + v31);
    unint64_t v36 = (uint64_t *)((char *)a2 + v31);
    uint64_t v37 = v36[1];
    *uint64_t v35 = *v36;
    v35[1] = v37;
    uint64_t v38 = a3[13];
    uint64_t v39 = a3[14];
    uint64_t v40 = (uint64_t *)((char *)a1 + v38);
    uint64_t v41 = (uint64_t *)((char *)a2 + v38);
    uint64_t v42 = v41[1];
    *uint64_t v40 = *v41;
    v40[1] = v42;
    uint64_t v43 = (uint64_t *)((char *)a1 + v39);
    char v44 = (uint64_t *)((char *)a2 + v39);
    uint64_t v45 = v44[1];
    *uint64_t v43 = *v44;
    v43[1] = v45;
    uint64_t v46 = a3[15];
    uint64_t v47 = a3[16];
    char v48 = (uint64_t *)((char *)a1 + v46);
    uint64_t v49 = (uint64_t *)((char *)a2 + v46);
    uint64_t v50 = v49[1];
    *char v48 = *v49;
    v48[1] = v50;
    uint64_t v51 = (uint64_t *)((char *)a1 + v47);
    char v52 = (uint64_t *)((char *)a2 + v47);
    uint64_t v53 = v52[1];
    *uint64_t v51 = *v52;
    v51[1] = v53;
    uint64_t v54 = a3[17];
    uint64_t v55 = a3[18];
    uint64_t v56 = (uint64_t *)((char *)a1 + v54);
    uint64_t v57 = (uint64_t *)((char *)a2 + v54);
    uint64_t v58 = v57[1];
    uint64_t v59 = (char *)a2 + v55;
    __dst = (char *)a1 + v55;
    *uint64_t v56 = *v57;
    v56[1] = v58;
    uint64_t v60 = type metadata accessor for SnippetHeaderModel(0LL);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v50);
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRetain(v58);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v59, 1LL, v60))
    {
      uint64_t v61 = sub_494C(&qword_18A1A8);
      memcpy(__dst, v59, *(void *)(*(void *)(v61 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *))(*(void *)(v71 - 8) + 16LL))(__dst, v59);
      uint64_t v62 = *(int *)(v60 + 20);
      uint64_t v63 = &__dst[v62];
      uint64_t v64 = &v59[v62];
      uint64_t v65 = *((void *)v64 + 1);
      *(void *)uint64_t v63 = *(void *)v64;
      *((void *)v63 + 1) = v65;
      uint64_t v66 = *(int *)(v60 + 24);
      uint64_t v67 = &__dst[v66];
      uint64_t v68 = &v59[v66];
      uint64_t v69 = *((void *)v68 + 1);
      *(void *)uint64_t v67 = *(void *)v68;
      *((void *)v67 + 1) = v69;
      swift_bridgeObjectRetain(v65);
      swift_bridgeObjectRetain(v69);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dst, 0LL, 1LL, v60);
    }
  }

  return a1;
}

uint64_t destroy for GenericQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppPunchout(0LL);
  uint64_t v5 = a1 + *(int *)(a2 + 40);
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(a2 + 72);
  uint64_t v8 = type metadata accessor for SnippetHeaderModel(0LL);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v7, 1LL, v8);
  if (!(_DWORD)result)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v7, v6);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

char *initializeWithCopy for GenericQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_18A1A0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  unint64_t v12 = &a1[v9];
  uint64_t v13 = &a2[v9];
  *(void *)unint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = &a1[v15];
  uint64_t v19 = &a2[v15];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = a3[10];
  uint64_t v22 = &a1[v20];
  uint64_t v23 = &a2[v20];
  v22[8] = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v24 = &a1[v21];
  uint64_t v25 = &a2[v21];
  uint64_t v26 = type metadata accessor for SpeakableString(0LL);
  uint64_t v69 = v26;
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v25, 1LL, v26))
  {
    uint64_t v27 = sub_494C(&qword_189D00);
    memcpy(v24, v25, *(void *)(*(void *)(v27 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16LL))(v24, v25, v26);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v24, 0LL, 1LL, v26);
  }

  uint64_t v28 = a3[11];
  uint64_t v29 = a3[12];
  uint64_t v30 = &a1[v28];
  uint64_t v31 = &a2[v28];
  uint64_t v32 = *((void *)v31 + 1);
  *(void *)uint64_t v30 = *(void *)v31;
  *((void *)v30 + 1) = v32;
  uint64_t v33 = &a1[v29];
  uint64_t v34 = &a2[v29];
  uint64_t v35 = *((void *)v34 + 1);
  *(void *)uint64_t v33 = *(void *)v34;
  *((void *)v33 + 1) = v35;
  uint64_t v36 = a3[13];
  uint64_t v37 = a3[14];
  uint64_t v38 = &a1[v36];
  uint64_t v39 = &a2[v36];
  uint64_t v40 = *((void *)v39 + 1);
  *(void *)uint64_t v38 = *(void *)v39;
  *((void *)v38 + 1) = v40;
  uint64_t v41 = &a1[v37];
  uint64_t v42 = &a2[v37];
  uint64_t v43 = *((void *)v42 + 1);
  *(void *)uint64_t v41 = *(void *)v42;
  *((void *)v41 + 1) = v43;
  uint64_t v44 = a3[15];
  uint64_t v45 = a3[16];
  uint64_t v46 = &a1[v44];
  uint64_t v47 = &a2[v44];
  uint64_t v48 = *((void *)v47 + 1);
  *(void *)uint64_t v46 = *(void *)v47;
  *((void *)v46 + 1) = v48;
  uint64_t v49 = &a1[v45];
  uint64_t v50 = &a2[v45];
  uint64_t v51 = *((void *)v50 + 1);
  *(void *)uint64_t v49 = *(void *)v50;
  *((void *)v49 + 1) = v51;
  uint64_t v52 = a3[17];
  uint64_t v53 = a3[18];
  uint64_t v54 = &a1[v52];
  uint64_t v55 = &a2[v52];
  uint64_t v56 = *((void *)v55 + 1);
  uint64_t v57 = &a2[v53];
  __dst = &a1[v53];
  *(void *)uint64_t v54 = *(void *)v55;
  *((void *)v54 + 1) = v56;
  uint64_t v58 = type metadata accessor for SnippetHeaderModel(0LL);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRetain(v56);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v57, 1LL, v58))
  {
    uint64_t v59 = sub_494C(&qword_18A1A8);
    memcpy(__dst, v57, *(void *)(*(void *)(v59 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *))(*(void *)(v69 - 8) + 16LL))(__dst, v57);
    uint64_t v60 = *(int *)(v58 + 20);
    uint64_t v61 = &__dst[v60];
    uint64_t v62 = &v57[v60];
    uint64_t v63 = *((void *)v62 + 1);
    *(void *)uint64_t v61 = *(void *)v62;
    *((void *)v61 + 1) = v63;
    uint64_t v64 = *(int *)(v58 + 24);
    uint64_t v65 = &__dst[v64];
    uint64_t v66 = &v57[v64];
    uint64_t v67 = *((void *)v66 + 1);
    *(void *)uint64_t v65 = *(void *)v66;
    *((void *)v65 + 1) = v67;
    swift_bridgeObjectRetain(v63);
    swift_bridgeObjectRetain(v67);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dst, 0LL, 1LL, v58);
  }

  return a1;
}

char *assignWithCopy for GenericQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_18A1A0);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  unint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = *(void *)v13;
  v12[8] = v13[8];
  *(void *)unint64_t v12 = v14;
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)uint64_t v16 = v18;
  uint64_t v19 = a3[7];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = *(void *)v21;
  v20[8] = v21[8];
  *(void *)uint64_t v20 = v22;
  uint64_t v23 = a3[8];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = *(void *)v25;
  v24[8] = v25[8];
  *(void *)uint64_t v24 = v26;
  uint64_t v27 = a3[9];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v30 = *(void *)v29;
  v28[8] = v29[8];
  *(void *)uint64_t v28 = v30;
  uint64_t v31 = a3[10];
  uint64_t v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  uint64_t v34 = type metadata accessor for SpeakableString(0LL);
  int v35 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v32, 1LL, v34);
  int v36 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v33, 1LL, v34);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16LL))(v32, v33, v34);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v32, 0LL, 1LL, v34);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v37 = *(void *)(v34 - 8);
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v32, v34);
LABEL_12:
    uint64_t v38 = sub_494C(&qword_189D00);
    memcpy(v32, v33, *(void *)(*(void *)(v38 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v37 + 24))(v32, v33, v34);
LABEL_13:
  uint64_t v39 = a3[11];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  *(void *)uint64_t v40 = *(void *)v41;
  uint64_t v42 = *((void *)v41 + 1);
  *((void *)v40 + 1) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[12];
  uint64_t v44 = &a1[v43];
  uint64_t v45 = &a2[v43];
  *(void *)uint64_t v44 = *(void *)v45;
  uint64_t v46 = *((void *)v45 + 1);
  *((void *)v44 + 1) = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease();
  uint64_t v47 = a3[13];
  uint64_t v48 = &a1[v47];
  uint64_t v49 = &a2[v47];
  *(void *)uint64_t v48 = *(void *)v49;
  uint64_t v50 = *((void *)v49 + 1);
  *((void *)v48 + 1) = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease();
  uint64_t v51 = a3[14];
  uint64_t v52 = &a1[v51];
  uint64_t v53 = &a2[v51];
  *(void *)uint64_t v52 = *(void *)v53;
  uint64_t v54 = *((void *)v53 + 1);
  *((void *)v52 + 1) = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease();
  uint64_t v55 = a3[15];
  uint64_t v56 = &a1[v55];
  uint64_t v57 = &a2[v55];
  *(void *)uint64_t v56 = *(void *)v57;
  uint64_t v58 = *((void *)v57 + 1);
  *((void *)v56 + 1) = v58;
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRelease();
  uint64_t v59 = a3[16];
  uint64_t v60 = &a1[v59];
  uint64_t v61 = &a2[v59];
  *(void *)uint64_t v60 = *(void *)v61;
  uint64_t v62 = *((void *)v61 + 1);
  *((void *)v60 + 1) = v62;
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRelease();
  uint64_t v63 = a3[17];
  uint64_t v64 = &a1[v63];
  uint64_t v65 = &a2[v63];
  *(void *)uint64_t v64 = *(void *)v65;
  uint64_t v66 = *((void *)v65 + 1);
  *((void *)v64 + 1) = v66;
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRelease();
  uint64_t v67 = a3[18];
  uint64_t v68 = &a1[v67];
  uint64_t v69 = &a2[v67];
  uint64_t v70 = type metadata accessor for SnippetHeaderModel(0LL);
  int v71 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v68, 1LL, v70);
  int v72 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v69, 1LL, v70);
  if (!v71)
  {
    if (!v72)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 24LL))(v68, v69, v34);
      uint64_t v83 = *(int *)(v70 + 20);
      uint64_t v84 = &v68[v83];
      uint64_t v85 = &v69[v83];
      *(void *)uint64_t v84 = *(void *)v85;
      uint64_t v86 = *((void *)v85 + 1);
      *((void *)v84 + 1) = v86;
      swift_bridgeObjectRetain(v86);
      swift_bridgeObjectRelease();
      uint64_t v87 = *(int *)(v70 + 24);
      uint64_t v88 = &v68[v87];
      uint64_t v89 = &v69[v87];
      *(void *)uint64_t v88 = *(void *)v89;
      uint64_t v90 = *((void *)v89 + 1);
      *((void *)v88 + 1) = v90;
      swift_bridgeObjectRetain(v90);
      swift_bridgeObjectRelease();
      return a1;
    }

    sub_26F04((uint64_t)v68, type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }

  if (v72)
  {
LABEL_18:
    uint64_t v81 = sub_494C(&qword_18A1A8);
    memcpy(v68, v69, *(void *)(*(void *)(v81 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16LL))(v68, v69, v34);
  uint64_t v73 = *(int *)(v70 + 20);
  uint64_t v74 = &v68[v73];
  uint64_t v75 = &v69[v73];
  *(void *)uint64_t v74 = *(void *)v75;
  uint64_t v76 = *((void *)v75 + 1);
  *((void *)v74 + 1) = v76;
  uint64_t v77 = *(int *)(v70 + 24);
  uint64_t v78 = &v68[v77];
  uint64_t v79 = &v69[v77];
  *(void *)uint64_t v78 = *(void *)v79;
  uint64_t v80 = *((void *)v79 + 1);
  *((void *)v78 + 1) = v80;
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRetain(v80);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v68, 0LL, 1LL, v70);
  return a1;
}

char *initializeWithTake for GenericQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_18A1A0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  unint64_t v12 = &a1[v9];
  uint64_t v13 = &a2[v9];
  *(void *)unint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = &a1[v15];
  uint64_t v19 = &a2[v15];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = a3[10];
  uint64_t v22 = &a1[v20];
  uint64_t v23 = &a2[v20];
  v22[8] = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v24 = &a1[v21];
  uint64_t v25 = &a2[v21];
  uint64_t v26 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v25, 1LL, v26))
  {
    uint64_t v27 = sub_494C(&qword_189D00);
    memcpy(v24, v25, *(void *)(*(void *)(v27 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32LL))(v24, v25, v26);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v24, 0LL, 1LL, v26);
  }

  uint64_t v28 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  *(_OWORD *)&a1[v28] = *(_OWORD *)&a2[v28];
  uint64_t v29 = a3[14];
  *(_OWORD *)&a1[a3[13]] = *(_OWORD *)&a2[a3[13]];
  *(_OWORD *)&a1[v29] = *(_OWORD *)&a2[v29];
  uint64_t v30 = a3[16];
  *(_OWORD *)&a1[a3[15]] = *(_OWORD *)&a2[a3[15]];
  *(_OWORD *)&a1[v30] = *(_OWORD *)&a2[v30];
  uint64_t v31 = a3[17];
  uint64_t v32 = a3[18];
  __int128 v33 = *(_OWORD *)&a2[v31];
  uint64_t v34 = &a2[v32];
  int v35 = &a1[v32];
  *(_OWORD *)&a1[v31] = v33;
  uint64_t v36 = type metadata accessor for SnippetHeaderModel(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v34, 1LL, v36))
  {
    uint64_t v37 = sub_494C(&qword_18A1A8);
    memcpy(v35, v34, *(void *)(*(void *)(v37 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32LL))(v35, v34, v26);
    *(_OWORD *)&v35[*(int *)(v36 + 20)] = *(_OWORD *)&v34[*(int *)(v36 + 20)];
    *(_OWORD *)&v35[*(int *)(v36 + 24)] = *(_OWORD *)&v34[*(int *)(v36 + 24)];
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v35, 0LL, 1LL, v36);
  }

  return a1;
}

char *assignWithTake for GenericQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_18A1A0);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v11];
  uint64_t v14 = &a2[v11];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = &a1[v12];
  uint64_t v16 = &a2[v12];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = a3[7];
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v17];
  uint64_t v20 = &a2[v17];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = &a1[v18];
  uint64_t v22 = &a2[v18];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  uint64_t v23 = a3[9];
  uint64_t v24 = a3[10];
  uint64_t v25 = &a1[v23];
  uint64_t v26 = &a2[v23];
  v25[8] = v26[8];
  *(void *)uint64_t v25 = *(void *)v26;
  uint64_t v27 = &a1[v24];
  uint64_t v28 = &a2[v24];
  uint64_t v29 = type metadata accessor for SpeakableString(0LL);
  int v30 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1LL, v29);
  int v31 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v28, 1LL, v29);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32LL))(v27, v28, v29);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v27, 0LL, 1LL, v29);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v32 = *(void *)(v29 - 8);
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v27, v29);
LABEL_12:
    uint64_t v33 = sub_494C(&qword_189D00);
    memcpy(v27, v28, *(void *)(*(void *)(v33 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v32 + 40))(v27, v28, v29);
LABEL_13:
  uint64_t v34 = a3[11];
  int v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  uint64_t v38 = *(void *)v36;
  uint64_t v37 = *((void *)v36 + 1);
  *(void *)int v35 = v38;
  *((void *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  uint64_t v39 = a3[12];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  uint64_t v43 = *(void *)v41;
  uint64_t v42 = *((void *)v41 + 1);
  *(void *)uint64_t v40 = v43;
  *((void *)v40 + 1) = v42;
  swift_bridgeObjectRelease();
  uint64_t v44 = a3[13];
  uint64_t v45 = &a1[v44];
  uint64_t v46 = &a2[v44];
  uint64_t v48 = *(void *)v46;
  uint64_t v47 = *((void *)v46 + 1);
  *(void *)uint64_t v45 = v48;
  *((void *)v45 + 1) = v47;
  swift_bridgeObjectRelease();
  uint64_t v49 = a3[14];
  uint64_t v50 = &a1[v49];
  uint64_t v51 = &a2[v49];
  uint64_t v53 = *(void *)v51;
  uint64_t v52 = *((void *)v51 + 1);
  *(void *)uint64_t v50 = v53;
  *((void *)v50 + 1) = v52;
  swift_bridgeObjectRelease();
  uint64_t v54 = a3[15];
  uint64_t v55 = &a1[v54];
  uint64_t v56 = &a2[v54];
  uint64_t v58 = *(void *)v56;
  uint64_t v57 = *((void *)v56 + 1);
  *(void *)uint64_t v55 = v58;
  *((void *)v55 + 1) = v57;
  swift_bridgeObjectRelease();
  uint64_t v59 = a3[16];
  uint64_t v60 = &a1[v59];
  uint64_t v61 = &a2[v59];
  uint64_t v63 = *(void *)v61;
  uint64_t v62 = *((void *)v61 + 1);
  *(void *)uint64_t v60 = v63;
  *((void *)v60 + 1) = v62;
  swift_bridgeObjectRelease();
  uint64_t v64 = a3[17];
  uint64_t v65 = &a1[v64];
  uint64_t v66 = &a2[v64];
  uint64_t v68 = *(void *)v66;
  uint64_t v67 = *((void *)v66 + 1);
  *(void *)uint64_t v65 = v68;
  *((void *)v65 + 1) = v67;
  swift_bridgeObjectRelease();
  uint64_t v69 = a3[18];
  uint64_t v70 = &a1[v69];
  int v71 = &a2[v69];
  uint64_t v72 = type metadata accessor for SnippetHeaderModel(0LL);
  int v73 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v70, 1LL, v72);
  int v74 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v71, 1LL, v72);
  if (!v73)
  {
    if (!v74)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 40LL))(v70, v71, v29);
      uint64_t v77 = *(int *)(v72 + 20);
      uint64_t v78 = &v70[v77];
      uint64_t v79 = &v71[v77];
      uint64_t v81 = *(void *)v79;
      uint64_t v80 = *((void *)v79 + 1);
      *(void *)uint64_t v78 = v81;
      *((void *)v78 + 1) = v80;
      swift_bridgeObjectRelease();
      uint64_t v82 = *(int *)(v72 + 24);
      uint64_t v83 = &v70[v82];
      uint64_t v84 = &v71[v82];
      uint64_t v86 = *(void *)v84;
      uint64_t v85 = *((void *)v84 + 1);
      *(void *)uint64_t v83 = v86;
      *((void *)v83 + 1) = v85;
      swift_bridgeObjectRelease();
      return a1;
    }

    sub_26F04((uint64_t)v70, type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }

  if (v74)
  {
LABEL_18:
    uint64_t v75 = sub_494C(&qword_18A1A8);
    memcpy(v70, v71, *(void *)(*(void *)(v75 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32LL))(v70, v71, v29);
  *(_OWORD *)&v70[*(int *)(v72 + 20)] = *(_OWORD *)&v71[*(int *)(v72 + 20)];
  *(_OWORD *)&v70[*(int *)(v72 + 24)] = *(_OWORD *)&v71[*(int *)(v72 + 24)];
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v70, 0LL, 1LL, v72);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericQueryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_FEA1C);
}

uint64_t sub_FEA1C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_494C(&qword_18A1A0);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = a1;
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v8, a2, v7);
  }

  uint64_t v9 = sub_494C(&qword_189D00);
  if (*(_DWORD *)(*(void *)(v9 - 8) + 84LL) == (_DWORD)a2)
  {
    uint64_t v7 = v9;
    uint64_t v10 = a3[10];
LABEL_12:
    uint64_t v8 = a1 + v10;
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v8, a2, v7);
  }

  if ((_DWORD)a2 != 2147483646)
  {
    uint64_t v7 = sub_494C(&qword_18A1A8);
    uint64_t v10 = a3[18];
    goto LABEL_12;
  }

  unint64_t v11 = *(void *)(a1 + a3[11] + 8);
  if (v11 >= 0xFFFFFFFF) {
    LODWORD(v11) = -1;
  }
  int v12 = v11 - 1;
  if (v12 < 0) {
    int v12 = -1;
  }
  return (v12 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericQueryModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_FEB04);
}

void sub_FEB04(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_494C(&qword_18A1A0);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    if (*(_DWORD *)(*(void *)(v11 - 8) + 84LL) == a3)
    {
      uint64_t v9 = v11;
      uint64_t v12 = a4[10];
    }

    else
    {
      if (a3 == 2147483646)
      {
        *(void *)(a1 + a4[11] + 8) = a2;
        sub_1EB0C();
        return;
      }

      uint64_t v9 = sub_494C(&qword_18A1A8);
      uint64_t v12 = a4[18];
    }

    uint64_t v10 = a1 + v12;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v10, a2, a2, v9);
}

void sub_FEBC8(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v8[0] = *(void *)(v2 - 8) + 64LL;
    v8[1] = "\t";
    v8[2] = "\t";
    v8[3] = "\t";
    v8[4] = "\t";
    v8[5] = "\t";
    sub_27758( 319LL,  (unint64_t *)&qword_18AB40,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString);
    if (v5 <= 0x3F)
    {
      v8[6] = *(void *)(v4 - 8) + 64LL;
      v8[7] = &unk_13E3D0;
      v8[8] = &unk_13E3D0;
      v8[9] = &unk_13E3D0;
      v8[10] = &unk_13E3D0;
      v8[11] = &unk_13E3D0;
      v8[12] = &unk_13E3D0;
      v8[13] = &unk_13E3D0;
      sub_27758(319LL, (unint64_t *)&qword_18AB48, type metadata accessor for SnippetHeaderModel);
      if (v7 <= 0x3F)
      {
        v8[14] = *(void *)(v6 - 8) + 64LL;
        swift_initStructMetadata(a1, 256LL, 15LL, v8, a1 + 16);
      }
    }
  }

uint64_t storeEnumTagSinglePayload for GenericQueryModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    LODWORD(sub_56254(v2[492], v4) = 1;
  }
  else {
    LODWORD(sub_56254(v2[492], v4) = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF1) {
    return ((uint64_t (*)(void))((char *)&loc_FED08 + 4 * byte_13E2F4[v4]))();
  }
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_FED3C + 4 * byte_13E2EF[v4]))();
}

uint64_t sub_FED3C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_FED44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xFED4CLL);
  }
  return result;
}

uint64_t sub_FED58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xFED60LL);
  }
  *(_BYTE *)uint64_t result = a2 + 14;
  return result;
}

uint64_t sub_FED64(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_FED6C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GenericQueryModel.CodingKeys()
{
  return &type metadata for GenericQueryModel.CodingKeys;
}

unint64_t sub_FED8C()
{
  unint64_t result = qword_18FDA8;
  if (!qword_18FDA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_13E484, &type metadata for GenericQueryModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18FDA8);
  }

  return result;
}

unint64_t sub_FEDCC()
{
  unint64_t result = qword_18FDB0;
  if (!qword_18FDB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_13E3F4, &type metadata for GenericQueryModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18FDB0);
  }

  return result;
}

unint64_t sub_FEE0C()
{
  unint64_t result = qword_18FDB8;
  if (!qword_18FDB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_13E41C, &type metadata for GenericQueryModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18FDB8);
  }

  return result;
}

uint64_t sub_FEE48()
{
  return type metadata accessor for GenericQueryModel(0LL);
}

uint64_t sub_FEE50(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, *(void *)(v1 - 144));
}

void sub_FEE60(uint64_t a1@<X8>)
{
  *(void *)(v1 + a1) = 0LL;
}

uint64_t sub_FEE6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4);
}

void BloodPressureLogModel.init(url:date:dateLabel:systolic:diastolic:loggedLabel:snippetHeaderModel:unitLabel:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9@<D0>, uint64_t a10@<D1>, uint64_t a11)
{
  uint64_t v64 = a7;
  uint64_t v68 = a1;
  uint64_t v69 = a6;
  uint64_t v61 = a4;
  uint64_t v62 = a5;
  sub_494C(&qword_189CF8);
  sub_6D20();
  __chkstk_darwin(v16);
  sub_101370(v17, v56);
  sub_494C(&qword_18A1A0);
  sub_6D20();
  __chkstk_darwin(v18);
  sub_6D30();
  uint64_t v65 = v19;
  sub_494C(&qword_189D00);
  sub_6D20();
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v60 = (char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v56 - v23;
  swift_bridgeObjectRelease(a3);
  type metadata accessor for AppPunchout(0LL);
  uint64_t v25 = sub_4A04();
  uint64_t v63 = v26;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v25, v27, v28, v26);
  uint64_t v29 = (int *)sub_10134C();
  int v30 = (uint64_t *)(a8 + v29[5]);
  *int v30 = 0LL;
  v30[1] = 0LL;
  int v31 = (uint64_t *)(a8 + v29[6]);
  *int v31 = 0LL;
  v31[1] = 0LL;
  uint64_t v32 = (void *)(a8 + v29[7]);
  *uint64_t v32 = 0LL;
  v32[1] = 0LL;
  uint64_t v33 = a8 + v29[8];
  uint64_t v58 = type metadata accessor for SnippetHeaderModel(0LL);
  uint64_t v34 = _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v33, 1LL, 1LL, v58);
  int v35 = (uint64_t *)(a8 + v29[9]);
  *int v35 = 0LL;
  v35[1] = 0LL;
  uint64_t v36 = (void *)(a8 + v29[10]);
  *uint64_t v36 = 0LL;
  v36[1] = 0LL;
  uint64_t v59 = v36;
  uint64_t v66 = a2;
  dispatch thunk of DialogCalendar.dateDescriptive.getter(v34);
  uint64_t v37 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1LL, v37) == 1)
  {
    sub_279E0((uint64_t)v24, &qword_189D00);
    uint64_t v38 = 0LL;
    uint64_t v39 = 0LL;
  }

  else
  {
    SpeakableString.print.getter();
    sub_10139C();
    (*(void (**)(char *, uint64_t))(*(void *)(v37 - 8) + 8LL))(v24, v37);
    uint64_t v70 = v24;
    uint64_t v71 = a2;
    unint64_t v40 = sub_B6D8();
    uint64_t v38 = StringProtocol.capitalized.getter(&type metadata for String, v40);
    uint64_t v39 = v41;
    swift_bridgeObjectRelease(a2);
  }

  uint64_t v57 = a11;
  swift_bridgeObjectRelease(v30[1]);
  *int v30 = v38;
  v30[1] = v39;
  sub_FF5D0(a9, 0, a10, 0);
  sub_10139C();
  swift_bridgeObjectRelease(v31[1]);
  *int v31 = a8;
  v31[1] = a2;
  swift_bridgeObjectRelease(v32[1]);
  uint64_t v42 = v62;
  *uint64_t v32 = v61;
  v32[1] = v42;
  sub_279E0(v33, &qword_18A1A8);
  uint64_t v43 = v69;
  sub_98DE0(v69, v33, type metadata accessor for SnippetHeaderModel);
  uint64_t v44 = _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v33, 0LL, 1LL, v58);
  uint64_t v45 = (uint64_t)v60;
  dispatch thunk of DialogCalendar.timeDescriptive.getter(v44);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v45, 1LL, v37) == 1)
  {
    sub_279E0(v45, &qword_189D00);
    uint64_t v46 = 0LL;
    uint64_t v47 = 0LL;
  }

  else
  {
    uint64_t v46 = SpeakableString.print.getter();
    uint64_t v47 = v48;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v37 - 8) + 8LL))(v45, v37);
  }

  swift_bridgeObjectRelease(v35[1]);
  *int v35 = v46;
  v35[1] = v47;
  uint64_t v49 = v59;
  swift_bridgeObjectRelease(v59[1]);
  uint64_t v50 = v57;
  *uint64_t v49 = v64;
  v49[1] = v50;
  uint64_t v51 = type metadata accessor for URL(0LL);
  uint64_t v52 = *(void *)(v51 - 8);
  uint64_t v54 = v67;
  uint64_t v53 = v68;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v67, v68, v51);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v54, 0LL, 1LL, v51);
  uint64_t v55 = v65;
  sub_FF6A8(v54);
  swift_release();
  sub_26F04(v43, type metadata accessor for SnippetHeaderModel);
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v53, v51);
  sub_279E0(v54, &qword_189CF8);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v55, 0LL, 1LL, v63);
  sub_FF804(v55, a8, &qword_18A1A0);
}

uint64_t type metadata accessor for BloodPressureLogModel(uint64_t a1)
{
  uint64_t result = qword_18FE30;
  if (!qword_18FE30) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BloodPressureLogModel);
  }
  return result;
}

void BloodPressureLogModel.appPunchout.getter(uint64_t a1@<X8>)
{
}

void BloodPressureLogModel.appPunchout.setter(uint64_t a1)
{
}

void BloodPressureLogModel.dateLabel.getter()
{
  uint64_t v0 = sub_10134C();
  sub_27A30(*(int *)(v0 + 20));
  sub_1EB8C();
  sub_A890();
}

void BloodPressureLogModel.dateLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10134C();
  sub_27AB4(*(int *)(v5 + 20));
  void *v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*BloodPressureLogModel.dateLabel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void BloodPressureLogModel.dataLabel.getter()
{
  uint64_t v0 = sub_10134C();
  sub_27A30(*(int *)(v0 + 24));
  sub_1EB8C();
  sub_A890();
}

void BloodPressureLogModel.dataLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10134C();
  sub_27AB4(*(int *)(v5 + 24));
  void *v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*BloodPressureLogModel.dataLabel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void BloodPressureLogModel.loggedLabel.getter()
{
  uint64_t v0 = sub_10134C();
  sub_27A30(*(int *)(v0 + 28));
  sub_1EB8C();
  sub_A890();
}

void BloodPressureLogModel.loggedLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10134C();
  sub_27AB4(*(int *)(v5 + 28));
  void *v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*BloodPressureLogModel.loggedLabel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void BloodPressureLogModel.snippetHeaderModel.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10134C();
  sub_DABC0(v1 + *(int *)(v3 + 32), a1, &qword_18A1A8);
}

void BloodPressureLogModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t v3 = sub_10134C();
  sub_FF804(a1, v1 + *(int *)(v3 + 32), &qword_18A1A8);
}

uint64_t (*BloodPressureLogModel.snippetHeaderModel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void BloodPressureLogModel.timeLabel.getter()
{
  uint64_t v0 = sub_10134C();
  sub_27A30(*(int *)(v0 + 36));
  sub_1EB8C();
  sub_A890();
}

void BloodPressureLogModel.timeLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10134C();
  sub_27AB4(*(int *)(v5 + 36));
  void *v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*BloodPressureLogModel.timeLabel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void BloodPressureLogModel.unitLabel.getter()
{
  uint64_t v0 = sub_10134C();
  sub_27A30(*(int *)(v0 + 40));
  sub_1EB8C();
  sub_A890();
}

void BloodPressureLogModel.unitLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10134C();
  sub_27AB4(*(int *)(v5 + 40));
  void *v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*BloodPressureLogModel.unitLabel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t sub_FF5D0(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v6 = sub_8AC68(a1, a2 & 1);
  if (!v7) {
    return 0LL;
  }
  uint64_t v8 = v6;
  uint64_t v9 = v7;
  uint64_t v10 = sub_8AC68(a3, a4 & 1);
  if (v11)
  {
    uint64_t v12 = v10;
    uint64_t v13 = v11;
    swift_bridgeObjectRetain(v9);
    v14._countAndFlagsBits = 47LL;
    v14._object = (void *)0xE100000000000000LL;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRetain(v9);
    v15._countAndFlagsBits = v12;
    v15._object = v13;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v9);
    return v8;
  }

  else
  {
    swift_bridgeObjectRelease(v9);
    return 0LL;
  }

uint64_t sub_FF6A8(uint64_t a1)
{
  uint64_t v2 = sub_494C(&qword_189CF8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_DABC0(a1, (uint64_t)v4, &qword_189CF8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v4, 1LL, v5) == 1)
  {
    sub_279E0((uint64_t)v4, &qword_189CF8);
    return AppPunchout.init(punchOutUri:bundleId:appDisplayName:)(0xD00000000000001ELL);
  }

  else
  {
    uint64_t v10 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    uint64_t v11 = URL.absoluteString.getter(v10);
    AppPunchout.init(punchOutUri:bundleId:appDisplayName:)(v11);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

void sub_FF804(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_6DF0(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v3, v4, v5);
  sub_A890();
}

uint64_t sub_FF838(uint64_t a1, unint64_t a2)
{
  BOOL v3 = a1 == 0x68636E7550707061LL && a2 == 0xEB0000000074756FLL;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x68636E7550707061LL, 0xEB0000000074756FLL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  BOOL v6 = a1 == 0x6562614C65746164LL && a2 == 0xE90000000000006CLL;
  if (v6
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6562614C65746164LL, 0xE90000000000006CLL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  BOOL v7 = a1 == 0x6562614C61746164LL && a2 == 0xE90000000000006CLL;
  if (v7
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6562614C61746164LL, 0xE90000000000006CLL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 2LL;
  }

  BOOL v8 = a1 == 0x614C646567676F6CLL && a2 == 0xEB000000006C6562LL;
  if (v8
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x614C646567676F6CLL, 0xEB000000006C6562LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 3LL;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v9 = 0x8000000000141630LL;
    if (a2 == 0x8000000000141630LL) {
      goto LABEL_29;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000000141630LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
LABEL_29:
    swift_bridgeObjectRelease(v9);
    return 4LL;
  }

  BOOL v10 = a1 == 0x6562614C656D6974LL && a2 == 0xE90000000000006CLL;
  if (v10
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6562614C656D6974LL, 0xE90000000000006CLL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 5LL;
  }

  else if (a1 == 0x6562614C74696E75LL && a2 == 0xE90000000000006CLL)
  {
    swift_bridgeObjectRelease(a2);
    return 6LL;
  }

  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6562614C74696E75LL, 0xE90000000000006CLL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0) {
      return 6LL;
    }
    else {
      return 7LL;
    }
  }

uint64_t sub_FFB08(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_FFB40 + 4 * byte_13E500[a1]))( 0xD000000000000012LL,  0x8000000000141630LL);
}

uint64_t sub_FFB40()
{
  return 0x68636E7550707061LL;
}

uint64_t sub_FFB60()
{
  return 0x6562614C65746164LL;
}

uint64_t sub_FFBC0()
{
  return sub_FFB08(*v0);
}

uint64_t sub_FFBC8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_FF838(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_FFBEC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_78B7C();
  *a1 = result;
  return result;
}

uint64_t sub_FFC10(uint64_t a1)
{
  unint64_t v2 = sub_FFE70();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_FFC38(uint64_t a1)
{
  unint64_t v2 = sub_FFE70();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t BloodPressureLogModel.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_494C(&qword_18FDC0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_6D44();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_500C(a1, v10);
  unint64_t v12 = sub_FFE70();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for BloodPressureLogModel.CodingKeys,  &type metadata for BloodPressureLogModel.CodingKeys,  v12,  v10,  v11);
  char v34 = 0;
  uint64_t v13 = type metadata accessor for AppPunchout(0LL);
  sub_A410( &qword_18AA98,  (uint64_t (*)(uint64_t))&type metadata accessor for AppPunchout,  (uint64_t)&protocol conformance descriptor for AppPunchout);
  sub_5E21C(v3, (uint64_t)&v34, v5, v13);
  if (!v2)
  {
    Swift::String v14 = (int *)type metadata accessor for BloodPressureLogModel(0LL);
    uint64_t v15 = sub_5E260(v14[5]);
    char v33 = 1;
    sub_27A10(v15, v16, (uint64_t)&v33);
    uint64_t v17 = sub_5E260(v14[6]);
    char v32 = 2;
    sub_27A10(v17, v18, (uint64_t)&v32);
    uint64_t v19 = sub_5E260(v14[7]);
    char v31 = 3;
    sub_27A10(v19, v20, (uint64_t)&v31);
    uint64_t v21 = v3 + v14[8];
    char v30 = 4;
    uint64_t v22 = type metadata accessor for SnippetHeaderModel(0LL);
    sub_A410( &qword_18AAA8,  type metadata accessor for SnippetHeaderModel,  (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    sub_5E21C(v21, (uint64_t)&v30, v5, v22);
    uint64_t v23 = sub_5E260(v14[9]);
    char v29 = 5;
    sub_27A10(v23, v24, (uint64_t)&v29);
    uint64_t v25 = sub_5E260(v14[10]);
    char v28 = 6;
    sub_27A10(v25, v26, (uint64_t)&v28);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

unint64_t sub_FFE70()
{
  unint64_t result = qword_18FDC8;
  if (!qword_18FDC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_13E6B4, &type metadata for BloodPressureLogModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18FDC8);
  }

  return result;
}

void BloodPressureLogModel.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v43 = v6;
  uint64_t v44 = sub_494C(&qword_18FDD0);
  __chkstk_darwin(v44);
  sub_6D44();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = (int *)type metadata accessor for BloodPressureLogModel(0LL);
  sub_6D20();
  __chkstk_darwin(v11);
  sub_6D44();
  uint64_t v14 = v13 - v12;
  type metadata accessor for AppPunchout(0LL);
  uint64_t v15 = sub_4A04();
  uint64_t v41 = v16;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v15, v17, v18, v16);
  uint64_t v19 = (void *)(v14 + v10[5]);
  *uint64_t v19 = 0LL;
  v19[1] = 0LL;
  uint64_t v20 = (void *)(v14 + v10[6]);
  *uint64_t v20 = 0LL;
  v20[1] = 0LL;
  uint64_t v21 = (void *)(v14 + v10[7]);
  *uint64_t v21 = 0LL;
  v21[1] = 0LL;
  uint64_t v39 = v14 + v10[8];
  uint64_t v40 = type metadata accessor for SnippetHeaderModel(0LL);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v39, 1LL, 1LL, v40);
  uint64_t v22 = (uint64_t *)(v14 + v10[9]);
  *uint64_t v22 = 0LL;
  v22[1] = 0LL;
  uint64_t v47 = v14;
  uint64_t v23 = (uint64_t *)(v14 + v10[10]);
  *uint64_t v23 = 0LL;
  v23[1] = 0LL;
  uint64_t v24 = a1;
  uint64_t v26 = a1[3];
  uint64_t v25 = a1[4];
  uint64_t v45 = v24;
  uint64_t v27 = sub_500C(v24, v26);
  unint64_t v28 = sub_FFE70();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for BloodPressureLogModel.CodingKeys,  &type metadata for BloodPressureLogModel.CodingKeys,  v28,  v26,  v25);
  if (v46)
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v45);
  }

  else
  {
    char v54 = 0;
    sub_A410( &qword_18AAB8,  (uint64_t (*)(uint64_t))&type metadata accessor for AppPunchout,  (uint64_t)&protocol conformance descriptor for AppPunchout);
    sub_10135C(v41, (uint64_t)&v54);
    sub_FF804(v43, v47, &qword_18A1A0);
    char v53 = 1;
    sub_101354((uint64_t)&v53, v44);
    sub_10139C();
    swift_bridgeObjectRelease();
    *uint64_t v19 = v27;
    v19[1] = v43;
    char v52 = 2;
    sub_101354((uint64_t)&v52, v44);
    sub_10139C();
    swift_bridgeObjectRelease();
    *uint64_t v20 = v9;
    v20[1] = v43;
    char v51 = 3;
    sub_101354((uint64_t)&v51, v44);
    sub_10139C();
    swift_bridgeObjectRelease();
    *uint64_t v21 = v9;
    v21[1] = v43;
    char v50 = 4;
    sub_A410( &qword_18AAC8,  type metadata accessor for SnippetHeaderModel,  (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    sub_10135C(v40, (uint64_t)&v50);
    sub_FF804(v42, v39, &qword_18A1A8);
    char v49 = 5;
    uint64_t v29 = sub_101354((uint64_t)&v49, v44);
    uint64_t v31 = v30;
    swift_bridgeObjectRelease();
    *uint64_t v22 = v29;
    v22[1] = v31;
    char v48 = 6;
    uint64_t v32 = sub_101354((uint64_t)&v48, v44);
    uint64_t v34 = v33;
    uint64_t v35 = sub_10138C();
    v36(v35);
    swift_bridgeObjectRelease();
    *uint64_t v23 = v32;
    v23[1] = v34;
    sub_98DE0(v47, a2, type metadata accessor for BloodPressureLogModel);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v45);
  }

  sub_26F04(v47, type metadata accessor for BloodPressureLogModel);
}

void sub_1002B4()
{
}

void sub_1002E0()
{
}

void sub_10030C(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_100320(void *a1)
{
  return BloodPressureLogModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for BloodPressureLogModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for AppPunchout(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_494C(&qword_18A1A0);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[5];
    uint64_t v11 = a3[6];
    uint64_t v12 = (uint64_t *)((char *)a1 + v10);
    uint64_t v13 = (uint64_t *)((char *)a2 + v10);
    uint64_t v14 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v14;
    uint64_t v15 = (uint64_t *)((char *)a1 + v11);
    uint64_t v16 = (uint64_t *)((char *)a2 + v11);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = a3[7];
    uint64_t v19 = a3[8];
    uint64_t v20 = (uint64_t *)((char *)a1 + v18);
    uint64_t v21 = (uint64_t *)((char *)a2 + v18);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = (char *)a1 + v19;
    uint64_t v24 = (char *)a2 + v19;
    uint64_t v25 = type metadata accessor for SnippetHeaderModel(0LL);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v22);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1LL, v25))
    {
      uint64_t v26 = sub_494C(&qword_18A1A8);
      memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64LL));
    }

    else
    {
      uint64_t v27 = type metadata accessor for SpeakableString(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16LL))(v23, v24, v27);
      uint64_t v28 = *(int *)(v25 + 20);
      uint64_t v29 = &v23[v28];
      uint64_t v30 = &v24[v28];
      uint64_t v31 = *((void *)v30 + 1);
      *(void *)uint64_t v29 = *(void *)v30;
      *((void *)v29 + 1) = v31;
      uint64_t v32 = *(int *)(v25 + 24);
      uint64_t v33 = &v23[v32];
      uint64_t v34 = &v24[v32];
      uint64_t v35 = *((void *)v34 + 1);
      *(void *)uint64_t v33 = *(void *)v34;
      *((void *)v33 + 1) = v35;
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRetain(v35);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v23, 0LL, 1LL, v25);
    }

    uint64_t v36 = a3[9];
    uint64_t v37 = a3[10];
    uint64_t v38 = (uint64_t *)((char *)a1 + v36);
    uint64_t v39 = (uint64_t *)((char *)a2 + v36);
    uint64_t v40 = v39[1];
    *uint64_t v38 = *v39;
    v38[1] = v40;
    uint64_t v41 = (uint64_t *)((char *)a1 + v37);
    uint64_t v42 = (uint64_t *)((char *)a2 + v37);
    uint64_t v43 = v42[1];
    *uint64_t v41 = *v42;
    v41[1] = v43;
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v43);
  }

  return a1;
}

uint64_t destroy for BloodPressureLogModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppPunchout(0LL);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 32);
  uint64_t v6 = type metadata accessor for SnippetHeaderModel(0LL);
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1LL, v6))
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v5, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for BloodPressureLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_18A1A0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  uint64_t v12 = *((void *)v11 + 1);
  *(void *)uint64_t v10 = *(void *)v11;
  *((void *)v10 + 1) = v12;
  uint64_t v13 = &a1[v9];
  uint64_t v14 = &a2[v9];
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = v15;
  uint64_t v16 = a3[7];
  uint64_t v17 = a3[8];
  uint64_t v18 = &a1[v16];
  uint64_t v19 = &a2[v16];
  uint64_t v20 = *((void *)v19 + 1);
  *(void *)uint64_t v18 = *(void *)v19;
  *((void *)v18 + 1) = v20;
  uint64_t v21 = &a1[v17];
  uint64_t v22 = &a2[v17];
  uint64_t v23 = type metadata accessor for SnippetHeaderModel(0LL);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v20);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1LL, v23))
  {
    uint64_t v24 = sub_494C(&qword_18A1A8);
    memcpy(v21, v22, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    uint64_t v25 = type metadata accessor for SpeakableString(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16LL))(v21, v22, v25);
    uint64_t v26 = *(int *)(v23 + 20);
    uint64_t v27 = &v21[v26];
    uint64_t v28 = &v22[v26];
    uint64_t v29 = *((void *)v28 + 1);
    *(void *)uint64_t v27 = *(void *)v28;
    *((void *)v27 + 1) = v29;
    uint64_t v30 = *(int *)(v23 + 24);
    uint64_t v31 = &v21[v30];
    uint64_t v32 = &v22[v30];
    uint64_t v33 = *((void *)v32 + 1);
    *(void *)uint64_t v31 = *(void *)v32;
    *((void *)v31 + 1) = v33;
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v33);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0LL, 1LL, v23);
  }

  uint64_t v34 = a3[9];
  uint64_t v35 = a3[10];
  uint64_t v36 = &a1[v34];
  uint64_t v37 = &a2[v34];
  uint64_t v38 = *((void *)v37 + 1);
  *(void *)uint64_t v36 = *(void *)v37;
  *((void *)v36 + 1) = v38;
  uint64_t v39 = &a1[v35];
  uint64_t v40 = &a2[v35];
  uint64_t v41 = *((void *)v40 + 1);
  *(void *)uint64_t v39 = *(void *)v40;
  *((void *)v39 + 1) = v41;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v41);
  return a1;
}

char *assignWithCopy for BloodPressureLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_18A1A0);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  *(void *)uint64_t v12 = *(void *)v13;
  uint64_t v14 = *((void *)v13 + 1);
  *((void *)v12 + 1) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  uint64_t v18 = *((void *)v17 + 1);
  *((void *)v16 + 1) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[7];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  *(void *)uint64_t v20 = *(void *)v21;
  uint64_t v22 = *((void *)v21 + 1);
  *((void *)v20 + 1) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[8];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = type metadata accessor for SnippetHeaderModel(0LL);
  int v27 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1LL, v26);
  int v28 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v25, 1LL, v26);
  if (!v27)
  {
    if (!v28)
    {
      uint64_t v48 = type metadata accessor for SpeakableString(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 24LL))(v24, v25, v48);
      uint64_t v49 = *(int *)(v26 + 20);
      char v50 = &v24[v49];
      char v51 = &v25[v49];
      *(void *)char v50 = *(void *)v51;
      uint64_t v52 = *((void *)v51 + 1);
      *((void *)v50 + 1) = v52;
      swift_bridgeObjectRetain(v52);
      swift_bridgeObjectRelease();
      uint64_t v53 = *(int *)(v26 + 24);
      char v54 = &v24[v53];
      uint64_t v55 = &v25[v53];
      *(void *)char v54 = *(void *)v55;
      uint64_t v56 = *((void *)v55 + 1);
      *((void *)v54 + 1) = v56;
      swift_bridgeObjectRetain(v56);
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }

    sub_26F04((uint64_t)v24, type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }

  if (v28)
  {
LABEL_12:
    uint64_t v38 = sub_494C(&qword_18A1A8);
    memcpy(v24, v25, *(void *)(*(void *)(v38 - 8) + 64LL));
    goto LABEL_13;
  }

  uint64_t v29 = type metadata accessor for SpeakableString(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16LL))(v24, v25, v29);
  uint64_t v30 = *(int *)(v26 + 20);
  uint64_t v31 = &v24[v30];
  uint64_t v32 = &v25[v30];
  *(void *)uint64_t v31 = *(void *)v32;
  uint64_t v33 = *((void *)v32 + 1);
  *((void *)v31 + 1) = v33;
  uint64_t v34 = *(int *)(v26 + 24);
  uint64_t v35 = &v24[v34];
  uint64_t v36 = &v25[v34];
  *(void *)uint64_t v35 = *(void *)v36;
  uint64_t v37 = *((void *)v36 + 1);
  *((void *)v35 + 1) = v37;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v37);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v24, 0LL, 1LL, v26);
LABEL_13:
  uint64_t v39 = a3[9];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  *(void *)uint64_t v40 = *(void *)v41;
  uint64_t v42 = *((void *)v41 + 1);
  *((void *)v40 + 1) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[10];
  uint64_t v44 = &a1[v43];
  uint64_t v45 = &a2[v43];
  *(void *)uint64_t v44 = *(void *)v45;
  uint64_t v46 = *((void *)v45 + 1);
  *((void *)v44 + 1) = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for BloodPressureLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_18A1A0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v8] = *(_OWORD *)&a2[v8];
  uint64_t v9 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for SnippetHeaderModel(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v11, 1LL, v12))
  {
    uint64_t v13 = sub_494C(&qword_18A1A8);
    memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    uint64_t v14 = type metadata accessor for SpeakableString(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32LL))(v10, v11, v14);
    *(_OWORD *)&v10[*(int *)(v12 + 20)] = *(_OWORD *)&v11[*(int *)(v12 + 20)];
    *(_OWORD *)&v10[*(int *)(v12 + 24)] = *(_OWORD *)&v11[*(int *)(v12 + 24)];
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v10, 0LL, 1LL, v12);
  }

  uint64_t v15 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  *(_OWORD *)&a1[v15] = *(_OWORD *)&a2[v15];
  return a1;
}

char *assignWithTake for BloodPressureLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_18A1A0);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *((void *)v13 + 1);
  *(void *)uint64_t v12 = v15;
  *((void *)v12 + 1) = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[6];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v20 = *(void *)v18;
  uint64_t v19 = *((void *)v18 + 1);
  *(void *)uint64_t v17 = v20;
  *((void *)v17 + 1) = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[7];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v25 = *(void *)v23;
  uint64_t v24 = *((void *)v23 + 1);
  *(void *)uint64_t v22 = v25;
  *((void *)v22 + 1) = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[8];
  int v27 = &a1[v26];
  int v28 = &a2[v26];
  uint64_t v29 = type metadata accessor for SnippetHeaderModel(0LL);
  int v30 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1LL, v29);
  int v31 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v28, 1LL, v29);
  if (!v30)
  {
    if (!v31)
    {
      uint64_t v45 = type metadata accessor for SpeakableString(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 40LL))(v27, v28, v45);
      uint64_t v46 = *(int *)(v29 + 20);
      uint64_t v47 = &v27[v46];
      uint64_t v48 = &v28[v46];
      uint64_t v50 = *(void *)v48;
      uint64_t v49 = *((void *)v48 + 1);
      *(void *)uint64_t v47 = v50;
      *((void *)v47 + 1) = v49;
      swift_bridgeObjectRelease();
      uint64_t v51 = *(int *)(v29 + 24);
      uint64_t v52 = &v27[v51];
      uint64_t v53 = &v28[v51];
      uint64_t v55 = *(void *)v53;
      uint64_t v54 = *((void *)v53 + 1);
      *(void *)uint64_t v52 = v55;
      *((void *)v52 + 1) = v54;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }

    sub_26F04((uint64_t)v27, type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }

  if (v31)
  {
LABEL_12:
    uint64_t v33 = sub_494C(&qword_18A1A8);
    memcpy(v27, v28, *(void *)(*(void *)(v33 - 8) + 64LL));
    goto LABEL_13;
  }

  uint64_t v32 = type metadata accessor for SpeakableString(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32LL))(v27, v28, v32);
  *(_OWORD *)&v27[*(int *)(v29 + 20)] = *(_OWORD *)&v28[*(int *)(v29 + 20)];
  *(_OWORD *)&v27[*(int *)(v29 + 24)] = *(_OWORD *)&v28[*(int *)(v29 + 24)];
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v27, 0LL, 1LL, v29);
LABEL_13:
  uint64_t v34 = a3[9];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  uint64_t v38 = *(void *)v36;
  uint64_t v37 = *((void *)v36 + 1);
  *(void *)uint64_t v35 = v38;
  *((void *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  uint64_t v39 = a3[10];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  uint64_t v43 = *(void *)v41;
  uint64_t v42 = *((void *)v41 + 1);
  *(void *)uint64_t v40 = v43;
  *((void *)v40 + 1) = v42;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BloodPressureLogModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100FB0);
}

uint64_t sub_100FB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_494C(&qword_18A1A0);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = a1;
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v8, a2, v7);
  }

  if ((_DWORD)a2 != 2147483646)
  {
    uint64_t v7 = sub_494C(&qword_18A1A8);
    uint64_t v8 = a1 + *(int *)(a3 + 32);
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v8, a2, v7);
  }

  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  int v10 = v9 - 1;
  if (v10 < 0) {
    int v10 = -1;
  }
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for BloodPressureLogModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_101070);
}

void sub_101070(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_494C(&qword_18A1A0);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = a1;
  }

  else
  {
    if (a3 == 2147483646)
    {
      *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
      sub_1EB0C();
      return;
    }

    uint64_t v9 = sub_494C(&qword_18A1A8);
    uint64_t v10 = a1 + *(int *)(a4 + 32);
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v10, a2, a2, v9);
}

void sub_10110C(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    v6[1] = &unk_13E5D8;
    v6[2] = &unk_13E5D8;
    v6[3] = &unk_13E5D8;
    sub_27758(319LL, (unint64_t *)&qword_18AB48, type metadata accessor for SnippetHeaderModel);
    if (v5 <= 0x3F)
    {
      v6[4] = *(void *)(v4 - 8) + 64LL;
      v6[5] = &unk_13E5D8;
      v6[6] = &unk_13E5D8;
      swift_initStructMetadata(a1, 256LL, 7LL, v6, a1 + 16);
    }
  }

uint64_t storeEnumTagSinglePayload for BloodPressureLogModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(sub_56254(v2[492], v4) = 1;
  }
  else {
    LODWORD(sub_56254(v2[492], v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_10120C + 4 * byte_13E50C[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_101240 + 4 * byte_13E507[v4]))();
}

uint64_t sub_101240(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_101248(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x101250LL);
  }
  return result;
}

uint64_t sub_10125C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x101264LL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_101268(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_101270(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BloodPressureLogModel.CodingKeys()
{
  return &type metadata for BloodPressureLogModel.CodingKeys;
}

unint64_t sub_101290()
{
  unint64_t result = qword_18FE80;
  if (!qword_18FE80)
  {
    unint64_t result = swift_getWitnessTable(&unk_13E68C, &type metadata for BloodPressureLogModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18FE80);
  }

  return result;
}

unint64_t sub_1012D0()
{
  unint64_t result = qword_18FE88;
  if (!qword_18FE88)
  {
    unint64_t result = swift_getWitnessTable(&unk_13E5FC, &type metadata for BloodPressureLogModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18FE88);
  }

  return result;
}

unint64_t sub_101310()
{
  unint64_t result = qword_18FE90[0];
  if (!qword_18FE90[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_13E624, &type metadata for BloodPressureLogModel.CodingKeys);
    atomic_store(result, qword_18FE90);
  }

  return result;
}

uint64_t sub_10134C()
{
  return type metadata accessor for BloodPressureLogModel(0LL);
}

uint64_t sub_101354(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, a2);
}

uint64_t sub_10135C(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, v2, a1);
}

void sub_101370(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_10138C()
{
  return v0;
}

  ;
}

void sub_1013A8()
{
  qword_19C3D0 = (uint64_t)&off_17ADC8;
}

uint64_t sub_1013BC@<X0>(__int128 *a1@<X1>, const void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (__int128 *)sub_DEDA4();
  sub_20004(v11, v12);
  sub_20004(a1, a4 + 40);
  memcpy((void *)(a4 + 80), a2, 0xA0uLL);
  *(void *)(a4 + 240) = a3;
  *(_BYTE *)(a4 + 248) = 0;
  uint64_t v13 = sub_AA80();
  sub_A72C(v13);
  uint64_t v14 = sub_A9C8();
  *(void *)(a4 + 280) = v13;
  *(void *)(a4 + 288) = &protocol witness table for ResponseFactory;
  *(void *)(a4 + 256) = v14;
  sub_AA78();
  sub_36E30();
  *(void *)(a4 + 296) = sub_AAF8((uint64_t)v10);
  type metadata accessor for WellnessQueryingCATsSimple(0LL);
  sub_36E30();
  uint64_t result = sub_AAF8((uint64_t)v10);
  *(void *)(a4 + 304) = result;
  *(_BYTE *)(a4 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 82;
  return result;
}

uint64_t destroy for GetBloodPressureFlow(void *a1)
{
  return swift_release();
}

uint64_t initializeWithCopy for GetBloodPressureFlow(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  __int128 v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  __int128 v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 144) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 120, a2 + 120);
  __int128 v8 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 184) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 160, a2 + 160);
  __int128 v9 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 224) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 200, a2 + 200);
  uint64_t v10 = *(void *)(a2 + 240);
  *(void *)(a1 + 240) = v10;
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  uint64_t v12 = *(void *)(a2 + 280);
  uint64_t v11 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = v12;
  *(void *)(a1 + 288) = v11;
  uint64_t v13 = **(void (***)(uint64_t, uint64_t, uint64_t))(v12 - 8);
  swift_unknownObjectRetain(v10);
  v13(a1 + 256, a2 + 256, v12);
  uint64_t v14 = *(void *)(a2 + 296);
  uint64_t v15 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = v14;
  *(void *)(a1 + 304) = v15;
  *(_BYTE *)(a1 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(_BYTE *)(a2 + 312);
  swift_retain(v14);
  swift_retain(v15);
  return a1;
}

uint64_t assignWithCopy for GetBloodPressureFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 240);
  uint64_t v5 = *(void *)(a1 + 240);
  *(void *)(a1 + 240) = v4;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v5);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  sub_7030((void *)(a1 + 256), (void *)(a2 + 256));
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  swift_retain();
  swift_release();
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(_BYTE *)(a2 + 312);
  return a1;
}

void *initializeWithTake for GetBloodPressureFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x139uLL);
}

uint64_t assignWithTake for GetBloodPressureFlow(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 72);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 80));
  __int128 v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 112);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 120));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 152);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 160));
  __int128 v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v6;
  *(void *)(a1 + 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 192);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 200));
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  uint64_t v7 = *(void *)(a2 + 240);
  uint64_t v8 = *(void *)(a1 + 240);
  *(void *)(a1 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v7;
  swift_unknownObjectRelease(v8);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 256));
  __int128 v9 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v9;
  uint64_t v10 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v10;
  swift_release();
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_release();
  *(_BYTE *)(a1 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(_BYTE *)(a2 + 312);
  return a1;
}

uint64_t getEnumTagSinglePayload for GetBloodPressureFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 313))
    {
      LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GetBloodPressureFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 313) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 313) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for GetBloodPressureFlow()
{
  return &type metadata for GetBloodPressureFlow;
}

uint64_t sub_101920(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_89508();
  return Flow.deferToExecuteAsync(_:)(a1, a2, &type metadata for GetBloodPressureFlow, v4);
}

uint64_t sub_101960(uint64_t a1)
{
  v2[103] = v1;
  v2[102] = a1;
  uint64_t v3 = type metadata accessor for UnavailableDataFlow(0LL);
  v2[104] = v3;
  v2[105] = sub_A5C0(*(void *)(v3 - 8));
  uint64_t v4 = sub_494C(&qword_189BA0);
  v2[106] = sub_D8CC(*(void *)(v4 - 8));
  v2[107] = sub_A5B8();
  uint64_t v5 = type metadata accessor for CATOption(0LL);
  v2[108] = sub_A5C0(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v2[109] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[110] = v7;
  v2[111] = sub_D8CC(v7);
  v2[112] = sub_A5B8();
  uint64_t v8 = sub_ABEC();
  v2[113] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[114] = v9;
  v2[115] = sub_A5C0(v9);
  uint64_t v10 = sub_494C(&qword_189CE8);
  v2[116] = sub_D8CC(*(void *)(v10 - 8));
  v2[117] = sub_A5B8();
  v2[118] = sub_A5B8();
  v2[119] = sub_A5B8();
  uint64_t v11 = sub_A8E4();
  v2[120] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[121] = v12;
  v2[122] = sub_D8CC(v12);
  v2[123] = sub_A5B8();
  v2[124] = sub_A5B8();
  v2[125] = sub_A5B8();
  v2[126] = sub_A5B8();
  v2[127] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_101A88()
{
  uint64_t v1 = *(void *)(v0 + 824);
  FlowTaskLogger.taskStart()();
  id v2 = sub_1026CC();
  *(void *)(v0 + 1024) = v2;
  sub_3C788((void *)(v1 + 40));
  uint64_t v3 = sub_37084();
  v4(v3);
  sub_3C788((void *)(v0 + 704));
  uint64_t v5 = sub_37084();
  char v6 = dispatch thunk of DeviceState.isWatch.getter(v5);
  uint64_t v7 = _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 704));
  if ((v6 & 1) == 0) {
    goto LABEL_13;
  }
  id v8 = sub_5693C(v7, "startDate");
  if (!v8)
  {
    sub_6D78(*(void *)(v0 + 952), v9, v10, *(void *)(v0 + 960));
    goto LABEL_9;
  }

  uint64_t v11 = v8;
  uint64_t v12 = *(void *)(v0 + 1008);
  uint64_t v13 = *(void *)(v0 + 968);
  uint64_t v14 = *(void *)(v0 + 960);
  uint64_t v15 = *(void *)(v0 + 952);
  sub_56968((uint64_t)v8);

  uint64_t v16 = *(uint64_t (**)(uint64_t, void, uint64_t))(v13 + 32);
  sub_BAF40(v15, v12);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v15, 0LL, 1LL, v14);
  sub_A614(v15, 1LL, v14);
  if (v17)
  {
LABEL_9:
    uint64_t v36 = *(void *)(v0 + 952);
LABEL_12:
    sub_279E0(v36, &qword_189CE8);
    goto LABEL_13;
  }

  uint64_t v18 = v16(*(void *)(v0 + 1016), *(void *)(v0 + 952), *(void *)(v0 + 960));
  id v19 = sub_5693C(v18, "endDate");
  if (!v19)
  {
    sub_6D78(*(void *)(v0 + 944), v20, v21, *(void *)(v0 + 960));
    goto LABEL_11;
  }

  uint64_t v22 = v19;
  uint64_t v23 = *(void *)(v0 + 1008);
  uint64_t v24 = *(void *)(v0 + 960);
  uint64_t v25 = *(void *)(v0 + 944);
  sub_56968((uint64_t)v19);

  sub_BAF40(v25, v23);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v25, 0LL, 1LL, v24);
  sub_A614(v25, 1LL, v24);
  if (v17)
  {
LABEL_11:
    uint64_t v37 = *(void *)(v0 + 944);
    sub_565A8(*(void *)(v0 + 968));
    uint64_t v36 = v37;
    goto LABEL_12;
  }

  uint64_t v26 = *(void *)(v0 + 1008);
  uint64_t v27 = *(void *)(v0 + 1000);
  uint64_t v28 = *(void *)(v0 + 992);
  uint64_t v29 = *(void *)(v0 + 968);
  uint64_t v30 = *(void *)(v0 + 960);
  uint64_t v31 = *(void *)(v0 + 920);
  uint64_t v138 = *(void *)(v0 + 1016);
  uint64_t v141 = *(void *)(v0 + 912);
  uint64_t v143 = *(void *)(v0 + 904);
  v16(v27, *(void *)(v0 + 944), v30);
  uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16);
  v32(v26, v138, v30);
  v32(v28, v27, v30);
  DateInterval.init(start:end:)(v26, v28);
  LOBYTE(v3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = ((uint64_t (*)(uint64_t))isWithinGenericRetentionPolicy(dateInterval:))(v31);
  (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v31, v143);
  if ((v32 & 1) == 0)
  {
    uint64_t v55 = *(void *)(v0 + 1016);
    uint64_t v56 = *(void *)(v0 + 968);
    uint64_t v57 = *(void *)(v0 + 960);
    FlowTaskLogger.taskFailed()();
    sub_5A9C0((uint64_t *)(v0 + 344));
    sub_A928C();
    static ExecuteResponse.complete<A>(next:)();

    sub_BA7A8((void *)(v0 + 344));
    uint64_t v58 = *(void (**)(uint64_t))(v56 + 8);
    uint64_t v59 = sub_37084();
    v58(v59);
    ((void (*)(uint64_t, uint64_t))v58)(v55, v57);
    sub_F8538();
    sub_A760();
    sub_A8EC();
    sub_A910();
    sub_A864();
    sub_A85C();
    sub_A8F4();
    sub_A78C();
    sub_A67C();
    uint64_t v60 = sub_A7C8();
    uint64_t v68 = sub_A970(v60, v61, v62, v63, v64, v65, v66, v67, v116);
    uint64_t v76 = sub_AAD8(v68, v69, v70, v71, v72, v73, v74, v75, v117, v123);
    uint64_t v84 = sub_A888(v76, v77, v78, v79, v80, v81, v82, v83, v118, v124, v129);
    uint64_t v92 = sub_A854(v84, v85, v86, v87, v88, v89, v90, v91, v119, v125, v130, v134);
    uint64_t v100 = sub_A84C(v92, v93, v94, v95, v96, v97, v98, v99, v120, v126, v131, v135, v138);
    uint64_t v108 = sub_A844(v100, v101, v102, v103, v104, v105, v106, v107, v121, v127, v132, v136, v139, v141);
    sub_A83C(v108, v109, v110, v111, v112, v113, v114, v115, v122, v128, v133, v137, v140, v142, v143);
    return sub_57E74(*(uint64_t (**)(void))(v0 + 8));
  }

  uint64_t v33 = *(void *)(v0 + 1016);
  uint64_t v34 = *(void *)(v0 + 960);
  uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v0 + 968) + 8LL);
  v35(*(void *)(v0 + 1000), v34);
  uint64_t v7 = v35(v33, v34);
LABEL_13:
  uint64_t v38 = (void *)(v0 + 744);
  uint64_t v39 = *(void *)(v0 + 896);
  uint64_t v40 = *(void *)(v0 + 880);
  uint64_t v41 = *(void *)(v0 + 872);
  uint64_t v42 = Logger.wellness.unsafeMutableAddressor(v7);
  *(void *)(v0 + 103_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v42;
  sub_A5DC(v42, v0 + 744);
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16);
  *(void *)(v0 + 1040) = v43;
  v43(v39, v42, v41);
  id v44 = v2;
  sub_A86C();
  os_log_type_t v45 = sub_AB70();
  if (sub_A634(v45))
  {
    uint64_t v46 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v47 = (void *)sub_A5E8(8LL);
    *(_DWORD *)uint64_t v46 = 138412290;
    *(void *)(v0 + 808) = v44;
    id v48 = v44;
    sub_A738(v0 + 808, v0 + 816);
    *uint64_t v47 = v44;

    sub_DA24(&dword_0, (os_log_s *)(v0 + 744), (os_log_type_t)v41, "Created intent: %@", v46);
    sub_494C(&qword_189CB8);
    sub_A81C((uint64_t)v47);
    sub_5050((uint64_t)v47);
    sub_5050((uint64_t)v46);
  }

  else
  {

    uint64_t v38 = v44;
  }

  uint64_t v49 = *(void *)(v0 + 880);
  uint64_t v50 = *(void *)(v0 + 824);

  *(void *)(v0 + 1048) = *(void *)(v49 + 8);
  uint64_t v51 = sub_37084();
  v52(v51);
  uint64_t v53 = *(void **)(v50 + 240);
  *(void *)(v0 + 56) = v0 + 792;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_101F7C;
  *(void *)(v0 + 696) = swift_continuation_init(v0 + 16, 0LL);
  *(void *)(v0 + 664) = _NSConcreteStackBlock;
  *(void *)(v0 + 67_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0x40000000LL;
  *(void *)(v0 + 680) = sub_7ED0;
  *(void *)(v0 + 688) = &unk_1814A0;
  [v53 handleGetBloodPressure:v44 completion:v0 + 664];
  return swift_continuation_await(v0 + 16);
}

uint64_t sub_101F7C()
{
  return sub_A5D0();
}

uint64_t sub_101FB4()
{
  uint64_t v1 = *(void (**)(uint64_t, os_log_s *, uint64_t))(v0 + 1040);
  id v2 = *(os_log_s **)(v0 + 1032);
  uint64_t v3 = *(void *)(v0 + 888);
  uint64_t v4 = *(void *)(v0 + 872);
  uint64_t v5 = *(void **)(v0 + 792);
  *(void *)(v0 + 1056) = v5;
  sub_A5DC((uint64_t)v2, v0 + 768);
  v1(v3, v2, v4);
  char v6 = v5;
  sub_A86C();
  os_log_type_t v7 = sub_AB70();
  if (sub_A634(v7))
  {
    uint64_t v152 = (void *)(v0 + 800);
    id v8 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v9 = (void *)sub_A5E8(8LL);
    *(_DWORD *)id v8 = 138412290;
    *(void *)(v0 + 800) = v6;
    uint64_t v10 = v6;
    sub_A738(v0 + 800, v0 + 808);
    *uint64_t v9 = v6;

    sub_DA24(&dword_0, v2, (os_log_type_t)v1, "Received response: %@", v8);
    sub_494C(&qword_189CB8);
    sub_A81C((uint64_t)v9);
    sub_5050((uint64_t)v9);
    sub_5050((uint64_t)v8);
  }

  else
  {

    id v2 = (os_log_s *)v6;
  }

  uint64_t v11 = *(uint64_t (**)(uint64_t))(v0 + 1048);

  uint64_t v12 = sub_372A0();
  uint64_t v13 = v11(v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))((char *)&stru_20.maxprot + (swift_isaMask & *v6)))(v13);
  if (v14 == 4)
  {
    uint64_t v22 = (void *)swift_task_alloc(dword_18FEB4);
    *(void *)(v0 + 1064) = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_1025F0;
    return sub_102B2C(*(void *)(v0 + 1024), (uint64_t)v6);
  }

  if (v14 != 102)
  {
    if (v14 == 101)
    {
      uint64_t v15 = *(void **)(v0 + 1024);
      uint64_t v16 = *(void *)(v0 + 864);
      uint64_t v17 = *(void *)(v0 + 824);
      FlowTaskLogger.taskNeedsAuthorization()();
      char v18 = *(_BYTE *)(v17 + 312);
      sub_A304(v17 + 40, v0 + 88);
      sub_A13C((_OWORD *)(v17 + 80), (_OWORD *)(v0 + 128));
      uint64_t v19 = sub_AA80();
      sub_A72C(v19);
      uint64_t v20 = sub_A9C8();
      *(void *)(v0 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v19;
      *(void *)(v0 + 320) = &protocol witness table for ResponseFactory;
      *(void *)(v0 + 288) = v20;
      sub_AA78();
      sub_A768();
      sub_AAF8(v16);
      sub_A874();
      sub_A768();
      uint64_t v21 = CATWrapper.__allocating_init(options:globals:)(v16, 0LL);
      *(_BYTE *)(v0 + 80) = v18;
      *(void *)(v0 + 328) = v19;
      *(void *)(v0 + 336) = v21;
      sub_A294();
      static ExecuteResponse.complete<A>(next:)();

      sub_A2D0((void *)(v0 + 80));
    }

    else
    {
      uint64_t v54 = *(void **)(v0 + 1024);
      uint64_t v55 = *(void *)(v0 + 824);
      FlowTaskLogger.taskFailed()();
      sub_A13C((_OWORD *)(v55 + 80), (_OWORD *)(v0 + 504));
      sub_A178();
      static ExecuteResponse.complete<A>(next:)();

      sub_A1B4((void *)(v0 + 504));
    }

    goto LABEL_21;
  }

  uint64_t v152 = v6;
  uint64_t v24 = *(void **)(v0 + 1024);
  uint64_t v25 = *(void *)(v0 + 856);
  FlowTaskLogger.taskFailed()();
  sub_DE99C(v25);
  id v26 = [v24 startDate];
  if (!v26)
  {
    sub_6D78(*(void *)(v0 + 936), v27, v28, *(void *)(v0 + 960));
    goto LABEL_16;
  }

  uint64_t v29 = v26;
  uint64_t v30 = *(void *)(v0 + 968);
  uint64_t v31 = *(void *)(v0 + 960);
  uint64_t v32 = *(void *)(v0 + 936);
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v26);

  uint64_t v33 = *(void (**)(void, void, void))(v30 + 32);
  sub_BB170();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v32, 0LL, 1LL, v31);
  sub_A614(v32, 1LL, v31);
  if (v34)
  {
LABEL_16:
    uint64_t v56 = *(void *)(v0 + 936);
LABEL_19:
    sub_279E0(v56, &qword_189CE8);
    goto LABEL_20;
  }

  uint64_t v35 = *(void **)(v0 + 1024);
  v33(*(void *)(v0 + 984), *(void *)(v0 + 936), *(void *)(v0 + 960));
  id v36 = [v35 endDate];
  if (!v36)
  {
    sub_6D78(*(void *)(v0 + 928), v37, v38, *(void *)(v0 + 960));
    goto LABEL_18;
  }

  uint64_t v39 = v36;
  uint64_t v40 = *(void *)(v0 + 960);
  uint64_t v41 = *(void *)(v0 + 928);
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v36);

  sub_BB170();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v41, 0LL, 1LL, v40);
  sub_A614(v41, 1LL, v40);
  if (v34)
  {
LABEL_18:
    uint64_t v57 = *(void *)(v0 + 928);
    sub_565A8(*(void *)(v0 + 968));
    uint64_t v56 = v57;
    goto LABEL_19;
  }

  uint64_t v42 = *(void *)(v0 + 1008);
  uint64_t v43 = *(void *)(v0 + 992);
  uint64_t v44 = *(void *)(v0 + 984);
  uint64_t v45 = *(void *)(v0 + 976);
  uint64_t v46 = *(void *)(v0 + 968);
  uint64_t v47 = *(void *)(v0 + 960);
  uint64_t v150 = *(void *)(v0 + 904);
  uint64_t v48 = *(void *)(v0 + 856);
  uint64_t v49 = *(void *)(v0 + 848);
  sub_BAF40(v45, *(void *)(v0 + 928));
  sub_BAF40(v42, v44);
  sub_BAF40(v43, v45);
  DateInterval.init(start:end:)(v42, v43);
  uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
  v50(v45, v47);
  v50(v44, v47);
  sub_279E0(v48, &qword_189BA0);
  sub_99194();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v51, v52, v53, v150);
  sub_DADFC(v49, v48, &qword_189BA0);
LABEL_20:
  uint64_t v58 = *(void **)(v0 + 1024);
  uint64_t v59 = *(void *)(v0 + 864);
  uint64_t v60 = *(void *)(v0 + 856);
  uint64_t v61 = *(_BYTE **)(v0 + 840);
  uint64_t v62 = *(int **)(v0 + 832);
  uint64_t v63 = *(void *)(v0 + 824);
  char v64 = *(_BYTE *)(v63 + 312);
  sub_DABC0(v60, (uint64_t)&v61[v62[5]], &qword_189BA0);
  sub_A304(v63 + 40, (uint64_t)&v61[v62[6]]);
  sub_A13C((_OWORD *)(v63 + 80), &v61[v62[7]]);
  uint64_t v65 = sub_AA80();
  sub_A72C(v65);
  uint64_t v66 = sub_A9C8();
  uint64_t v67 = (uint64_t *)&v61[v62[8]];
  v67[3] = v65;
  v67[4] = (uint64_t)&protocol witness table for ResponseFactory;
  *uint64_t v67 = v66;
  sub_AA78();
  sub_BB2A8();
  sub_AAF8(v59);
  sub_A874();
  sub_BB2A8();
  uint64_t v68 = CATWrapper.__allocating_init(options:globals:)(v59, 0LL);
  *uint64_t v61 = v64;
  *(void *)&v61[v62[9]] = v65;
  *(void *)&v61[v62[10]] = v68;
  sub_A410(&qword_189CC8, type metadata accessor for UnavailableDataFlow, (uint64_t)&unk_13FD60);
  static ExecuteResponse.complete<A>(next:)();

  sub_26F04((uint64_t)v61, type metadata accessor for UnavailableDataFlow);
  sub_279E0(v60, &qword_189BA0);
LABEL_21:
  sub_F8538();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  sub_A78C();
  sub_A67C();
  uint64_t v69 = sub_A7C8();
  uint64_t v77 = sub_A970(v69, v70, v71, v72, v73, v74, v75, v76, v125);
  uint64_t v85 = sub_AAD8(v77, v78, v79, v80, v81, v82, v83, v84, v126, v132);
  uint64_t v93 = sub_A888(v85, v86, v87, v88, v89, v90, v91, v92, v127, v133, v138);
  uint64_t v101 = sub_A854(v93, v94, v95, v96, v97, v98, v99, v100, v128, v134, v139, v143);
  uint64_t v109 = sub_A84C(v101, v102, v103, v104, v105, v106, v107, v108, v129, v135, v140, v144, v147);
  uint64_t v117 = sub_A844(v109, v110, v111, v112, v113, v114, v115, v116, v130, v136, v141, v145, v148, v150);
  sub_A83C(v117, v118, v119, v120, v121, v122, v123, v124, v131, v137, v142, v146, v149, v151, (uint64_t)v152);
  return sub_57E74(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1025F0()
{
  *(void *)(v1 + 107_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0;
  sub_36900(v2);
  sub_A964();
  return sub_A5D0();
}

#error "1026A4: call analysis failed (funcsize=40)"
id sub_1026CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Class isa;
  uint64_t (*v46)(char *, uint64_t);
  uint64_t v47;
  id v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Class v55;
  uint64_t v56;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v1 = type metadata accessor for Calendar(0LL);
  uint64_t v60 = *(void *)(v1 - 8);
  uint64_t v61 = v1;
  sub_D978();
  __chkstk_darwin(v2);
  uint64_t v59 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_494C(&qword_189CE8);
  sub_D978();
  __chkstk_darwin(v4);
  sub_3751C();
  uint64_t v67 = v5;
  __chkstk_darwin(v6);
  uint64_t v62 = (uint64_t)&v58 - v7;
  id v8 = sub_A8E4();
  char v64 = *(void *)(v8 - 8);
  sub_D978();
  __chkstk_darwin(v9);
  sub_3751C();
  uint64_t v66 = v10;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v65 = (char *)&v58 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v58 - v14;
  sub_494C(&qword_189BA0);
  sub_D978();
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v58 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v58 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v58 - v26;
  uint64_t v63 = [objc_allocWithZone((Class)type metadata accessor for GetBloodPressureIntent(0)) init];
  uint64_t v29 = *(void *)(v0 + 24);
  uint64_t v28 = *(void *)(v0 + 32);
  sub_3C788((void *)v0);
  (*(void (**)(uint64_t, uint64_t))(v28 + 32))(v29, v28);
  sub_F8080((uint64_t)v25, *(unsigned __int8 *)(v0 + 312), (uint64_t)v27);
  uint64_t v30 = (uint64_t)v25;
  uint64_t v31 = (uint64_t)v27;
  sub_279E0(v30, &qword_189BA0);
  sub_DABC0((uint64_t)v27, (uint64_t)v22, &qword_189BA0);
  uint64_t v32 = sub_ABEC();
  uint64_t v33 = sub_A614((uint64_t)v22, 1LL, v32);
  if (v35)
  {
    sub_279E0((uint64_t)v22, &qword_189BA0);
    id v36 = sub_DE99C(v62);
  }

  else
  {
    char v34 = v62;
    DateInterval.start.getter(v33);
    (*(void (**)(char *, uint64_t))(*(void *)(v32 - 8) + 8LL))(v22, v32);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v34, 0LL, 1LL, v8);
    id v36 = sub_A614(v34, 1LL, v8);
    if (!v35)
    {
      uint64_t v43 = v64;
      sub_106D80((uint64_t)v15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v64 + 32));
      uint64_t v44 = v67;
      goto LABEL_7;
    }
  }

  uint64_t v37 = v65;
  uint64_t v38 = Date.init()(v36);
  uint64_t v39 = v59;
  static Calendar.current.getter(v38);
  Calendar.startOfDay(for:)(v37);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v39, v61);
  uint64_t v43 = v64;
  uint64_t v40 = sub_DEDA4();
  uint64_t v42 = v41(v40);
  sub_73370(v42, &qword_189CE8);
  uint64_t v44 = v67;
LABEL_7:
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v46 = *(uint64_t (**)(char *, uint64_t))(v43 + 8);
  uint64_t v47 = v46(v15, v8);
  uint64_t v48 = v63;
  sub_106D8C(v47, "setStartDate:");

  sub_DABC0(v31, (uint64_t)v19, &qword_189BA0);
  uint64_t v49 = sub_A614((uint64_t)v19, 1LL, v32);
  if (v35)
  {
    sub_279E0((uint64_t)v19, &qword_189BA0);
    uint64_t v51 = sub_DE99C(v44);
LABEL_12:
    Date.init()(v51);
    uint64_t v54 = v66;
    sub_77A8C(v66);
    uint64_t v52 = sub_DEDA4();
    uint64_t v53 = ((uint64_t (*)(uint64_t))v46)(v52);
    sub_73370(v53, &qword_189CE8);
    goto LABEL_13;
  }

  DateInterval.end.getter(v49);
  (*(void (**)(char *, uint64_t))(*(void *)(v32 - 8) + 8LL))(v19, v32);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v44, 0LL, 1LL, v8);
  uint64_t v51 = sub_A614(v44, 1LL, v8);
  if (v50) {
    goto LABEL_12;
  }
  uint64_t v54 = v66;
  sub_106D80(v66, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 32));
LABEL_13:
  uint64_t v55 = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v56 = v46((char *)v54, v8);
  sub_106D8C(v56, "setEndDate:");

  sub_279E0(v31, &qword_189BA0);
  return v48;
}

uint64_t sub_102B2C(uint64_t a1, uint64_t a2)
{
  v3[57] = a2;
  v3[58] = v2;
  v3[56] = a1;
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v3[59] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[60] = v5;
  v3[61] = sub_D8CC(v5);
  v3[62] = sub_A5B8();
  uint64_t v6 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[63] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[64] = v7;
  v3[65] = sub_A5C0(v7);
  uint64_t v8 = sub_494C(&qword_189CF8);
  v3[66] = sub_A5C0(*(void *)(v8 - 8));
  uint64_t v9 = type metadata accessor for Logger(0LL);
  v3[67] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[68] = v10;
  v3[69] = sub_D8CC(v10);
  v3[70] = sub_A5B8();
  v3[71] = sub_A5B8();
  uint64_t v11 = sub_494C(&qword_189CE8);
  v3[72] = sub_D8CC(*(void *)(v11 - 8));
  v3[73] = sub_A5B8();
  v3[74] = sub_A5B8();
  v3[75] = sub_A5B8();
  v3[76] = sub_A5B8();
  v3[77] = sub_A5B8();
  uint64_t v12 = sub_A8E4();
  v3[78] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v3[79] = v13;
  v3[80] = sub_D8CC(v13);
  v3[81] = sub_A5B8();
  v3[82] = sub_A5B8();
  v3[83] = sub_A5B8();
  uint64_t v14 = sub_494C(&qword_189BA0);
  v3[84] = sub_D8CC(*(void *)(v14 - 8));
  v3[85] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_102C70( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
  a29 = v31;
  a30 = v32;
  a28 = v30;
  uint64_t v33 = *(void *)(v30 + 680);
  char v34 = (id *)(v30 + 448);
  uint64_t v35 = sub_ABEC();
  uint64_t v36 = _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v33, 1LL, 1LL, v35);
  id v37 = sub_565D4(v36, "startDate");
  p_type = (char **)(&stru_187FF0 + 16);
  if (!v37)
  {
    sub_6D78(*(void *)(v30 + 616), v38, v39, *(void *)(v30 + 624));
    goto LABEL_7;
  }

  uint64_t v41 = v37;
  uint64_t v42 = *(void *)(v30 + 632);
  uint64_t v43 = *(void *)(v30 + 624);
  uint64_t v44 = *(void *)(v30 + 616);
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v37);

  uint64_t v45 = *(uint64_t (**)(void, void, void))(v42 + 32);
  p_type = &stru_187FF0.type;
  sub_106CF8();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v44, 0LL, 1LL, v43);
  sub_A614(v44, 1LL, v43);
  if (v46)
  {
LABEL_7:
    uint64_t v70 = *(void *)(v30 + 616);
    goto LABEL_10;
  }

  uint64_t v47 = v45(*(void *)(v30 + 664), *(void *)(v30 + 616), *(void *)(v30 + 624));
  id v48 = sub_5693C(v47, "endDate");
  if (v48)
  {
    uint64_t v51 = v48;
    uint64_t v52 = *(void *)(v30 + 624);
    uint64_t v53 = *(void *)(v30 + 608);
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v48);

    sub_106CF8();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v53, 0LL, 1LL, v52);
    sub_A614(v53, 1LL, v52);
    if (!v46)
    {
      uint64_t v151 = *(void *)(v30 + 672);
      uint64_t v153 = *(void *)(v30 + 680);
      uint64_t v54 = *(void *)(v30 + 664);
      uint64_t v55 = *(void *)(v30 + 656);
      uint64_t v56 = *(void *)(v30 + 648);
      uint64_t v57 = *(void *)(v30 + 640);
      uint64_t v58 = *(void *)(v30 + 632);
      uint64_t v59 = *(void *)(v30 + 624);
      sub_106DDC(v56, *(void *)(v30 + 608));
      sub_106DDC(v55, v54);
      sub_106DDC(v57, v56);
      uint64_t v60 = sub_DEDA4();
      DateInterval.init(start:end:)(v60, v61);
      uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
      uint64_t v63 = v56;
      p_type = (char **)(&stru_187FF0 + 16);
      v62(v63, v59);
      uint64_t v64 = v59;
      char v34 = (id *)(v30 + 448);
      v62(v54, v64);
      uint64_t v65 = sub_BAFA0();
      sub_279E0(v65, v66);
      sub_99194();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v67, v68, v69, v35);
      sub_DADFC(v151, v153, &qword_189BA0);
      goto LABEL_11;
    }
  }

  else
  {
    sub_6D78(*(void *)(v30 + 608), v49, v50, *(void *)(v30 + 624));
  }

  uint64_t v71 = *(void *)(v30 + 608);
  sub_565A8(*(void *)(v30 + 632));
  uint64_t v70 = v71;
LABEL_10:
  sub_279E0(v70, &qword_189CE8);
LABEL_11:
  id v72 = [*v34 startDate];
  if (v72)
  {
    uint64_t v74 = v72;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v72);

    uint64_t v75 = 0LL;
  }

  else
  {
    uint64_t v75 = 1LL;
  }

  uint64_t v76 = 1LL;
  uint64_t v77 = sub_A66C(*(void *)(v30 + 600), v75, v73, *(void *)(v30 + 624));
  id v78 = sub_5693C(v77, p_type[485]);
  if (v78)
  {
    uint64_t v80 = v78;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v78);

    uint64_t v76 = 0LL;
  }

  uint64_t v81 = 1LL;
  uint64_t v82 = sub_A66C(*(void *)(v30 + 592), v76, v79, *(void *)(v30 + 624));
  id v83 = sub_565D4(v82, "sampleStartDate");
  if (v83)
  {
    uint64_t v85 = v83;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v83);

    uint64_t v81 = 0LL;
  }

  uint64_t v154 = (void *)(v30 + 216);
  uint64_t v86 = 1LL;
  uint64_t v87 = sub_A66C(*(void *)(v30 + 584), v81, v84, *(void *)(v30 + 624));
  id v88 = sub_565D4(v87, "sampleEndDate");
  if (v88)
  {
    uint64_t v90 = v88;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v88);

    uint64_t v86 = 0LL;
  }

  uint64_t v91 = *(os_log_s **)(v30 + 568);
  uint64_t v92 = *(void *)(v30 + 544);
  uint64_t v93 = *(void *)(v30 + 536);
  sub_A66C(*(void *)(v30 + 576), v86, v89, *(void *)(v30 + 624));
  uint64_t v94 = type metadata accessor for WellnessTime(0LL);
  sub_12892C();
  uint64_t v96 = v95;
  *(void *)(v30 + 688) = v95;
  uint64_t v97 = Logger.wellness.unsafeMutableAddressor(v95);
  sub_A5DC(v97, v30 + 296);
  (*(void (**)(os_log_s *, uint64_t, uint64_t))(v92 + 16))(v91, v97, v93);
  uint64_t v98 = swift_retain_n(v96, 2LL);
  uint64_t v99 = v91;
  Logger.logObject.getter(v98);
  os_log_type_t v100 = sub_AB70();
  BOOL v101 = os_log_type_enabled(v91, v100);
  uint64_t v102 = *(void *)(v30 + 568);
  uint64_t v103 = *(void *)(v30 + 544);
  uint64_t v104 = *(void *)(v30 + 536);
  if (v101)
  {
    uint64_t v150 = *(void *)(v30 + 544);
    uint64_t v149 = *(void *)(v30 + 568);
    uint64_t v105 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v152 = v97;
    uint64_t v106 = sub_A5E8(32LL);
    a19 = v106;
    *(_DWORD *)uint64_t v105 = 136315138;
    *(void *)(v30 + 43_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v96;
    swift_retain();
    uint64_t v107 = String.init<A>(describing:)(v30 + 432, v94);
    *(void *)(v30 + 440) = sub_39178(v107, v108, &a19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v30 + 440, v30 + 448, v105 + 4, v105 + 12);
    swift_bridgeObjectRelease();
    sub_106DC4();
    sub_DA24(&dword_0, v99, v100, "Constructed wellness Time:  %s", v105);
    sub_A81C(v106);
    uint64_t v109 = v106;
    uint64_t v97 = v152;
    sub_5050(v109);
    sub_5050((uint64_t)v105);

    (*(void (**)(uint64_t, uint64_t))(v150 + 8))(v149, v104);
  }

  else
  {
    sub_106DC4();

    (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v102, v104);
  }

  sub_F4F10(*(unsigned __int8 *)(*(void *)(v30 + 464) + 312LL), *(void *)(v30 + 680));
  *(void *)(v30 + 240) = &type metadata for WellnessFeatureFlagsKey;
  *(void *)(v30 + 248) = sub_354B0();
  *(_BYTE *)(v30 + 216) = 4;
  char v110 = isFeatureEnabled(_:)(v154);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v154);
  if ((v110 & 1) != 0)
  {
    uint64_t v111 = (void *)swift_task_alloc(dword_18FEBC);
    *(void *)(v30 + 696) = v111;
    *uint64_t v111 = v30;
    v111[1] = sub_10340C;
    sub_106C80();
    return sub_103980(v112, v113, v114, v115);
  }

  else if (sub_12AB68() < 3u || (sub_128C14() & 1) != 0)
  {
    uint64_t v117 = v96;
    uint64_t v118 = *(void **)(v30 + 560);
    sub_A5DC(v97, v30 + 344);
    uint64_t v119 = sub_106C50();
    Logger.logObject.getter(v119);
    os_log_type_t v120 = sub_AB70();
    if (sub_A988(v120))
    {
      uint64_t v121 = (_WORD *)sub_A5E8(2LL);
      sub_366C0(v121);
      sub_A940(&dword_0, v122, v123, "Has time frame, providing detailed result");
      sub_5050((uint64_t)v154);
    }

    uint64_t v124 = *(void *)(v30 + 528);
    uint64_t v125 = *(void *)(v30 + 464);
    int8x16_t v155 = *(int8x16_t *)(v30 + 448);

    sub_374D0();
    uint64_t v126 = sub_DEDA4();
    sub_A304(v126, v127);
    sub_500C((void *)(v30 + 256), *(void *)(v30 + 280));
    uint64_t v128 = (int8x16_t *)sub_106DAC();
    *(void *)(v30 + 71_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v128;
    v128[1].i64[0] = v125;
    v128[1].i64[1] = v117;
    v128[2] = vextq_s8(v155, v155, 8uLL);
    v128[3].i64[0] = v124;
    uint64_t v129 = (void *)swift_task_alloc(dword_18B944);
    *(void *)(v30 + 720) = v129;
    *uint64_t v129 = v30;
    v129[1] = sub_103508;
    sub_106C80();
    return sub_648F4(v130, v131, v132, v133, v134);
  }

  else
  {
    uint64_t v156 = v96;
    uint64_t v135 = *(void **)(v30 + 552);
    sub_A5DC(v97, v30 + 320);
    uint64_t v136 = sub_106C50();
    Logger.logObject.getter(v136);
    os_log_type_t v137 = sub_AB70();
    if (sub_A988(v137))
    {
      uint64_t v138 = (_WORD *)sub_A5E8(2LL);
      sub_366C0(v138);
      sub_A940(&dword_0, v139, v140, "Providing Simple Result");
      sub_5050(v30 + 216);
    }

    uint64_t v141 = *(void *)(v30 + 528);
    uint64_t v143 = *(void *)(v30 + 456);
    uint64_t v142 = *(void *)(v30 + 464);
    uint64_t v144 = *(void *)(v30 + 448);

    sub_374D0();
    sub_A304(v142 + 200, v30 + 176);
    sub_500C((void *)(v30 + 176), *(void *)(v30 + 200));
    uint64_t v145 = (void *)sub_106DAC();
    *(void *)(v30 + 728) = v145;
    v145[2] = v156;
    v145[3] = v143;
    v145[4] = v142;
    v145[5] = v144;
    v145[6] = v141;
    uint64_t v146 = (void *)swift_task_alloc(dword_18B94C);
    *(void *)(v30 + 736) = v146;
    *uint64_t v146 = v30;
    v146[1] = sub_103744;
    sub_106C80();
    return sub_64B18(v147, v148);
  }

uint64_t sub_10340C()
{
  *(void *)(v1 + 704) = v0;
  sub_36900(v2);
  sub_A964();
  return sub_A5D0();
}

#error "1034D8: call analysis failed (funcsize=46)"
uint64_t sub_103508(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v5;
  uint64_t v3 = (void *)*v2;
  uint64_t v5 = v3;
  v3[46] = v2;
  v3[47] = a1;
  v3[48] = v1;
  sub_56254(v3[90], &v5);
  if (v1) {
    sub_36860();
  }
  sub_A67C();
  sub_A964();
  return sub_D954();
}

#error "1035A0: call analysis failed (funcsize=67)"
#error "103714: call analysis failed (funcsize=43)"
uint64_t sub_103744(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v5;
  uint64_t v3 = (void *)*v2;
  uint64_t v5 = v3;
  v3[49] = v2;
  v3[50] = a1;
  v3[51] = v1;
  sub_56254(v3[92], &v5);
  if (v1) {
    sub_36860();
  }
  sub_A67C();
  sub_A964();
  return sub_D954();
}

#error "1037DC: call analysis failed (funcsize=67)"
#error "103950: call analysis failed (funcsize=43)"
uint64_t sub_103980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t Model;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  v5[88] = v4;
  v5[87] = a4;
  v5[86] = a3;
  v5[85] = a2;
  v5[84] = a1;
  uint64_t v6 = sub_494C(&qword_18A1A8);
  v5[89] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_494C(&qword_189CF8);
  v5[90] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = (*(void *)(*(void *)(sub_494C(&qword_189D00) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[91] = swift_task_alloc(v8);
  v5[92] = swift_task_alloc(v8);
  uint64_t Model = type metadata accessor for BloodPressureQueryModel(0LL);
  v5[93] = Model;
  uint64_t v10 = (*(void *)(*(void *)(Model - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[94] = swift_task_alloc(v10);
  v5[95] = swift_task_alloc(v10);
  v5[96] = swift_task_alloc(v10);
  v5[97] = swift_task_alloc(v10);
  v5[98] = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for SnippetHeaderModel(0LL);
  v5[99] = v11;
  uint64_t v12 = (*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[100] = swift_task_alloc(v12);
  v5[101] = swift_task_alloc(v12);
  v5[102] = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for Date(0LL);
  v5[103] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v5[104] = v14;
  v5[105] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = (*(void *)(*(void *)(sub_494C(&qword_189CE8) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[106] = swift_task_alloc(v15);
  v5[107] = swift_task_alloc(v15);
  v5[108] = swift_task_alloc(v15);
  v5[109] = swift_task_alloc(v15);
  v5[110] = swift_task_alloc(v15);
  uint64_t v16 = type metadata accessor for Logger(0LL);
  v5[111] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v5[112] = v17;
  char v18 = (*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[113] = swift_task_alloc(v18);
  v5[114] = swift_task_alloc(v18);
  v5[115] = swift_task_alloc(v18);
  v5[116] = swift_task_alloc(v18);
  v5[117] = swift_task_alloc(v18);
  uint64_t v19 = type metadata accessor for SpeakableString(0LL);
  v5[118] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v5[119] = v20;
  v5[120] = swift_task_alloc((*(void *)(v20 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_103BE0, 0LL, 0LL);
}

uint64_t sub_103BE0()
{
  uint64_t v1 = sub_7D950(*(void **)(v0 + 680));
  if (v2)
  {
    uint64_t v3 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000LL) == 0) {
      uint64_t v3 = v1 & 0xFFFFFFFFFFFFLL;
    }
    if (v3)
    {
      uint64_t v4 = *(void *)(v0 + 960);
      uint64_t v5 = *(void *)(v0 + 952);
      uint64_t v6 = *(void *)(v0 + 944);
      String.toSpeakableString.getter(v1, v2);
      uint64_t v7 = sub_249D4();
      uint64_t v8 = SpeakableString.print.getter(v7);
      uint64_t v10 = v9;
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
      goto LABEL_10;
    }

    uint64_t v1 = sub_249D4();
  }

  uint64_t v11 = *(void **)(v0 + 936);
  uint64_t v12 = *(void *)(v0 + 888);
  uint64_t v13 = Logger.wellness.unsafeMutableAddressor(v1);
  sub_A5DC(v13, v0 + 528);
  uint64_t v14 = sub_BAFA0();
  uint64_t v16 = v15(v14);
  uint64_t v17 = v11;
  Logger.logObject.getter(v16);
  os_log_type_t v18 = sub_AB70();
  if (sub_A988(v18))
  {
    uint64_t v19 = (_WORD *)sub_A5E8(2LL);
    sub_366C0(v19);
    sub_A940(&dword_0, v20, v21, "#GetBloodPressureFlow: intentResponse.unit is empty");
    sub_5050(v12);
  }

  uint64_t v22 = *(void *)(v0 + 960);
  uint64_t v23 = *(void *)(v0 + 952);
  uint64_t v24 = *(void *)(v0 + 944);
  uint64_t v25 = *(void *)(v0 + 936);
  uint64_t v26 = *(void *)(v0 + 896);
  uint64_t v27 = *(void *)(v0 + 888);

  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
  uint64_t v28 = String.toSpeakableString.getter(1732799853LL, 0xE400000000000000LL);
  uint64_t v8 = SpeakableString.print.getter(v28);
  uint64_t v10 = v29;
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
LABEL_10:
  uint64_t v30 = *(void **)(v0 + 672);
  *(void *)(v0 + 968) = v10;
  *(void *)(v0 + 976) = v8;
  uint64_t v31 = type metadata accessor for DialogCalendarRange.Builder(0LL);
  sub_A72C(v31);
  DialogCalendarRange.Builder.init()();
  id v32 = [v30 startDate];
  if (v32)
  {
    uint64_t v33 = v32;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v32);

    uint64_t v34 = 0LL;
  }

  else
  {
    uint64_t v34 = 1LL;
  }

  uint64_t v35 = *(void *)(v0 + 880);
  uint64_t v36 = *(void *)(v0 + 872);
  sub_5F150(v36, v34);
  sub_DADFC(v36, v35, &qword_189CE8);
  uint64_t v37 = sub_106C40();
  int v38 = v37;
  if ((_DWORD)v37)
  {
    sub_57F00(v37, &qword_189CE8);
    double v39 = 0.0;
  }

  else
  {
    uint64_t v40 = sub_106AD4();
    sub_57F00(v40, &qword_189CE8);
    double v42 = Date.timeIntervalSince1970.getter(v41);
    sub_106B54();
    double v39 = v42;
  }

  uint64_t v43 = *(void **)(v0 + 672);
  dispatch thunk of DialogCalendarRange.Builder.withStartSecs(_:)(*(void *)&v39, v38 != 0);
  sub_367AC();
  id v44 = [v43 endDate];
  if (v44)
  {
    uint64_t v45 = v44;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v44);

    uint64_t v46 = 0LL;
  }

  else
  {
    uint64_t v46 = 1LL;
  }

  uint64_t v47 = *(void *)(v0 + 864);
  uint64_t v48 = *(void *)(v0 + 856);
  sub_5F150(v48, v46);
  sub_DADFC(v48, v47, &qword_189CE8);
  uint64_t v49 = sub_106C40();
  int v50 = v49;
  if ((_DWORD)v49)
  {
    sub_57F00(v49, &qword_189CE8);
    double v51 = 0.0;
  }

  else
  {
    uint64_t v52 = sub_106AD4();
    sub_57F00(v52, &qword_189CE8);
    double v54 = Date.timeIntervalSince1970.getter(v53);
    sub_106B54();
    double v51 = v54;
  }

  dispatch thunk of DialogCalendarRange.Builder.withEndSecs(_:)(*(void *)&v51, v50 != 0);
  uint64_t v55 = sub_37034();
  uint64_t v56 = dispatch thunk of DialogCalendarRange.Builder.build()(v55);
  *(void *)(v0 + 984) = v56;
  uint64_t v57 = swift_release();
  id v58 = sub_565D4(v57, "startDate");
  uint64_t v61 = *(void *)(v0 + 848);
  if (v58)
  {
    uint64_t v62 = v58;
    uint64_t v63 = *(void *)(v0 + 840);
    uint64_t v64 = *(void *)(v0 + 832);
    uint64_t v65 = *(void *)(v0 + 824);
    sub_56968((uint64_t)v58);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 32))(v61, v63, v65);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v61, 0LL, 1LL, v65);
    sub_A614(v61, 1LL, v65);
    if (v66) {
      char v67 = 1;
    }
    else {
      char v67 = 0;
    }
  }

  else
  {
    char v67 = 1;
    sub_6D78(*(void *)(v0 + 848), v59, v60, *(void *)(v0 + 824));
  }

  sub_279E0(*(void *)(v0 + 848), &qword_189CE8);
  uint64_t v68 = (void *)swift_task_alloc(dword_18B70C);
  *(void *)(v0 + 99_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v68;
  *uint64_t v68 = v0;
  v68[1] = sub_103FC4;
  return sub_5EC2C(v56, v67, *(void *)(v0 + 688));
}

uint64_t sub_103FC4()
{
  *(void *)(v1 + 1000) = v0;
  *(void *)(v1 + 1008) = v2;
  sub_36900(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_104004()
{
  uint64_t v1 = sub_27CC8(*(_BYTE *)(v0[88] + 312LL));
  uint64_t v3 = v2;
  v0[127] = v2;
  uint64_t v4 = (void *)swift_task_alloc(dword_18B704);
  v0[128] = v4;
  sub_BB018(v4, (uint64_t)sub_104064);
  return sub_5E5E4(v1, v3);
}

uint64_t sub_104064()
{
  v1[72] = v0;
  v1[73] = v2;
  v1[74] = v3;
  uint64_t v4 = v1[128];
  *uint64_t v5 = *v0;
  v1[129] = v3;
  swift_task_dealloc(v4);
  sub_249D4();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_1040B8()
{
  if (*(void *)(v0 + 1032))
  {
    uint64_t v1 = *(void *)(v0 + 816);
    uint64_t v2 = *(void *)(v0 + 792);
    uint64_t v3 = *(void *)(v0 + 704);
    String.toSpeakableString.getter(*(void *)(v0 + 584), *(void *)(v0 + 1032));
    sub_2A184();
    unsigned __int8 v4 = *(_BYTE *)(v3 + 312);
    unint64_t v5 = sub_2A044(v4);
    unint64_t v7 = v6;
    uint64_t v8 = sub_27CC8(v4);
    uint64_t v9 = (unint64_t *)(v1 + *(int *)(v2 + 20));
    *uint64_t v9 = v5;
    v9[1] = v7;
    uint64_t v10 = (uint64_t *)(v1 + *(int *)(v2 + 24));
    *uint64_t v10 = v8;
    v10[1] = v11;
    if (sub_12AB68() < 3u || (sub_128C14() & 1) != 0)
    {
      uint64_t v12 = (void *)swift_task_alloc(dword_18B6EC);
      *(void *)(v0 + 1048) = v12;
      sub_BB018(v12, (uint64_t)sub_104638);
      sub_106BB0();
      return sub_5E408(v13, v14);
    }

    [*(id *)(v0 + 680) systolic];
    if ((v16 & 0x7FFFFFFFFFFFFFFFLL) == 0
      || (id v17 = [*(id *)(v0 + 680) diastolic], (v18 & 0x7FFFFFFFFFFFFFFFLL) == 0))
    {
      uint64_t v53 = *(void *)(v0 + 928);
      uint64_t v54 = *(void *)(v0 + 896);
      uint64_t v55 = *(void *)(v0 + 888);
      swift_bridgeObjectRelease();
      uint64_t v56 = sub_2A184();
      uint64_t v57 = Logger.wellness.unsafeMutableAddressor(v56);
      sub_A5DC(v57, v0 + 552);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v53, v57, v55);
      sub_A86C();
      os_log_type_t v58 = sub_A898();
      if (sub_A988(v58))
      {
        uint64_t v59 = (_WORD *)sub_A5E8(2LL);
        sub_366C0(v59);
        sub_A940(&dword_0, v60, v61, "#GetBloodPressureFlow: systolic or diastolic values is/are empty");
        sub_5050(v53);
      }

      sub_106B54();
      sub_106B64();
      sub_A178();
      sub_B25C0();
      sub_367AC();
      uint64_t v62 = sub_36784();
      sub_991F0((uint64_t)v62, type metadata accessor for SnippetHeaderModel);
      uint64_t v85 = *(void *)(v0 + 848);
      uint64_t v86 = *(void *)(v0 + 840);
      uint64_t v87 = *(void *)(v0 + 816);
      uint64_t v88 = *(void *)(v0 + 808);
      uint64_t v89 = *(void *)(v0 + 800);
      uint64_t v90 = *(void *)(v0 + 784);
      uint64_t v92 = *(void *)(v0 + 776);
      uint64_t v93 = *(void *)(v0 + 768);
      uint64_t v94 = *(void *)(v0 + 760);
      uint64_t v96 = *(void *)(v0 + 752);
      uint64_t v98 = *(void *)(v0 + 736);
      uint64_t v99 = *(void *)(v0 + 728);
      uint64_t v100 = *(void *)(v0 + 720);
      uint64_t v101 = *(void *)(v0 + 712);
      swift_task_dealloc(*(void *)(v0 + 960));
      sub_A8EC();
      sub_A910();
      sub_A864();
      sub_A85C();
      sub_A8F4();
      sub_A78C();
      sub_A67C();
      sub_A7C8();
      uint64_t v63 = sub_A760();
      sub_36374( v63,  v64,  v65,  v66,  v67,  v68,  v69,  v70,  v72,  v73,  v74,  v75,  v76,  v77,  v78,  v79,  v80,  v81,  v82,  v83,  v84,  v85);
      swift_task_dealloc(v86);
      swift_task_dealloc(v87);
      swift_task_dealloc(v88);
      swift_task_dealloc(v89);
      swift_task_dealloc(v90);
      swift_task_dealloc(v92);
      swift_task_dealloc(v93);
      swift_task_dealloc(v94);
      swift_task_dealloc(v96);
      swift_task_dealloc(v98);
      swift_task_dealloc(v99);
      swift_task_dealloc(v100);
      swift_task_dealloc(v101);
      sub_106BB0();
      __asm { BR              X1 }
    }

    uint64_t v19 = *(void *)(v0 + 1008);
    uint64_t v20 = *(void **)(v0 + 680);
    sub_566D0((uint64_t)v17, "systolic");
    uint64_t v21 = sub_106B70();
    uint64_t v23 = sub_106B44(v21, v22);
    uint64_t v24 = sub_6D64();
    sub_566D0(v24, "diastolic");
    double v26 = v25;
    uint64_t v27 = sub_7D950(v20);
    uint64_t v29 = sub_90668(v27, v28, v4, v26);
    sub_249D4();
    if (v19)
    {
      uint64_t v95 = *(void *)(v0 + 968);
      uint64_t v97 = *(void *)(v0 + 976);
      uint64_t v30 = *(void *)(v0 + 944);
      uint64_t v31 = *(void *)(v0 + 816);
      uint64_t v91 = *(void *)(v0 + 792);
      uint64_t v32 = *(void *)(v0 + 784);
      uint64_t v33 = *(void *)(v0 + 768);
      uint64_t v34 = *(void *)(v0 + 728);
      uint64_t v35 = *(void *)(v0 + 720);
      uint64_t v36 = *(void *)(v0 + 712);
      uint64_t v37 = *(void *)(v0 + 696);
      String.toSpeakableString.getter(*(void *)(v0 + 1000), *(void *)(v0 + 1008));
      swift_bridgeObjectRelease();
      sub_99194();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v38, v39, v40, v30);
      sub_DABC0(v37, v35, &qword_189CF8);
      sub_106CF0(v31, v41, type metadata accessor for SnippetHeaderModel);
      sub_99194();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v42, v43, v44, v91);
      BloodPressureQueryModel.init(systolic:diastolic:systolicMin:systolicMax:diastolicMin:diastolicMax:unitLabel:systolicLabel:diastolicLabel:dateLabel:url:headerModel:)( v23,  0,  v29,  0,  0LL,  1,  0LL,  1,  v33,  0LL,  1,  0LL,  1,  v97,  v95,  0LL,  0LL,  0LL,  0LL,  v34,  v35,  v36);
      sub_1068A0(v33, v32);
      uint64_t v45 = dword_18DBBC;
      swift_retain();
      uint64_t v46 = (void *)swift_task_alloc(v45);
      *(void *)(v0 + 107_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v46;
      sub_BB018(v46, (uint64_t)sub_104DE0);
      sub_106BB0();
      return sub_9DD18(v47, v48, v49, v50, v51, v52);
    }
  }

  else
  {
    sub_106DA4();
    __break(1u);
  }

  uint64_t result = sub_106DA4();
  __break(1u);
  return result;
}

uint64_t sub_1045D4()
{
  if (v1) {
    sub_36860();
  }
  else {
    *(void *)(v2 + 1064) = v0;
  }
  sub_A964();
  return sub_D954();
}

uint64_t sub_104638()
{
  v1[75] = v0;
  v1[76] = v2;
  v1[77] = v3;
  sub_20264(v1[131]);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_104678()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  *(void *)(v0 + 1056) = v1;
  sub_BB018(v1, (uint64_t)sub_1046D0);
  return sub_5E408(0x696C6F7473616964LL, 0xE900000000000063LL);
}

uint64_t sub_1046D0()
{
  v1[78] = v0;
  v1[79] = v2;
  v1[80] = v3;
  sub_20264(v1[132]);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_104710(uint64_t a1)
{
  uint64_t v3 = v1[126];
  uint64_t v4 = v1[88];
  unint64_t v5 = (void *)v1[85];
  sub_566D0(a1, "systolicMinimum");
  uint64_t v6 = sub_106B70();
  LOBYTE(sub_56254(v2[492], v4) = *(_BYTE *)(v4 + 312);
  uint64_t v8 = sub_90668(v6, v7, v4, v2);
  uint64_t v9 = sub_6D64();
  sub_566D0(v9, "systolicMaximum");
  uint64_t v10 = sub_106B70();
  uint64_t v12 = sub_106B44(v10, v11);
  uint64_t v13 = sub_6D64();
  sub_566D0(v13, "diastolicMinimum");
  uint64_t v14 = sub_106B70();
  uint64_t v16 = sub_106B44(v14, v15);
  uint64_t v17 = sub_6D64();
  sub_566D0(v17, "diastolicMaximum");
  double v19 = v18;
  uint64_t v20 = sub_7D950(v5);
  uint64_t v22 = sub_90668(v20, v21, v4, v19);
  sub_249D4();
  if (v3)
  {
    uint64_t v57 = v1[79];
    uint64_t v55 = v1[80];
    uint64_t v56 = v1[76];
    uint64_t v54 = v1[77];
    uint64_t v51 = v1[121];
    uint64_t v23 = v1[118];
    uint64_t v50 = v1[99];
    uint64_t v24 = v1[98];
    uint64_t v52 = v1[97];
    uint64_t v53 = v1[122];
    double v25 = (int *)v1[93];
    uint64_t v26 = v1[92];
    uint64_t v27 = v1[90];
    uint64_t v28 = v1[89];
    uint64_t v29 = v1[87];
    uint64_t v58 = v1[86];
    String.toSpeakableString.getter(v1[125], v1[126]);
    swift_bridgeObjectRelease();
    sub_99194();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v30, v31, v32, v23);
    sub_DABC0(v29, v27, &qword_189CF8);
    sub_106C34(v33, v34, type metadata accessor for SnippetHeaderModel);
    sub_99194();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v35, v36, v37, v50);
    BloodPressureQueryModel.init(systolic:diastolic:systolicMin:systolicMax:diastolicMin:diastolicMax:unitLabel:systolicLabel:diastolicLabel:dateLabel:url:headerModel:)( 0LL,  1,  0LL,  1,  v8,  0,  v12,  0,  v52,  v16,  0,  v22,  0,  v53,  v51,  v56,  v54,  v57,  v55,  v26,  v27,  v28);
    sub_1068A0(v52, v24);
    uint64_t v38 = v24 + v25[6];
    uint64_t v39 = *(void *)v38;
    uint64_t v40 = *(unsigned __int8 *)(v38 + 8);
    uint64_t v41 = v24 + v25[7];
    uint64_t v42 = *(void *)v41;
    LODWORD(v5_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = *(unsigned __int8 *)(v41 + 8);
    uint64_t v43 = v24 + v25[9];
    uint64_t v44 = *(void *)v43;
    uint64_t v45 = *(unsigned __int8 *)(v43 + 8);
    uint64_t v46 = *(void *)(v24 + v25[10]);
    uint64_t v47 = dword_18DBB4;
    swift_retain();
    uint64_t v48 = (void *)swift_task_alloc(v47);
    v1[130] = v48;
    *uint64_t v48 = v1;
    v48[1] = sub_1045D4;
    return sub_9DAFC(v58, v39, v40, v42, v57, v44, v45, v46);
  }

  else
  {
    uint64_t result = sub_106DA4();
    __break(1u);
  }

  return result;
}

#error "104AA8: call analysis failed (funcsize=229)"
uint64_t sub_104DE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  sub_56884();
  sub_56254(*(void *)(v2 + 1072), v3);
  sub_367AC();
  if (v1) {
    sub_36860();
  }
  else {
    *(void *)(v2 + 1080) = v0;
  }
  sub_A964();
  return sub_D954();
}

#error "104EF8: call analysis failed (funcsize=229)"
uint64_t sub_105230()
{
  void *v0;
  void *v1;
  void *v2;
  sub_AA10();
  uint64_t v1 = v0 + 42;
  double v2 = (void *)v0[136];
  sub_20264(v0[137]);

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
  sub_A964();
  return sub_D954();
}

uint64_t sub_10527C()
{
  uint64_t v1 = *(void **)(v0 + 1088);
  uint64_t v2 = *(void *)(v0 + 816);
  uint64_t v3 = *(void *)(v0 + 784);
  sub_A304(v0 + 416, v0 + 376);
  uint64_t v4 = swift_allocObject(&unk_1814C8, 56LL, 7LL);
  sub_20004((__int128 *)(v0 + 376), v4 + 16);
  static OutputPublisherFactory.makeOutputPublisherAsync()(v217);
  uint64_t v5 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  sub_A72C(v5);
  *(void *)(v0 + 664) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)(v217, &unk_18FEC8, v4);
  uint64_t v216 = Flow.eraseToAnyFlow()(v5);
  swift_release();

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 416));
  sub_26F04(v3, type metadata accessor for BloodPressureQueryModel);
  sub_26F04(v2, type metadata accessor for SnippetHeaderModel);
  swift_release();
  uint64_t v124 = *(void *)(v0 + 848);
  uint64_t v137 = *(void *)(v0 + 840);
  uint64_t v149 = *(void *)(v0 + 816);
  uint64_t v160 = *(void *)(v0 + 808);
  uint64_t v170 = *(void *)(v0 + 800);
  uint64_t v179 = *(void *)(v0 + 784);
  uint64_t v187 = *(void *)(v0 + 776);
  uint64_t v194 = *(void *)(v0 + 768);
  uint64_t v200 = *(void *)(v0 + 760);
  uint64_t v205 = *(void *)(v0 + 752);
  uint64_t v209 = *(void *)(v0 + 736);
  uint64_t v212 = *(void *)(v0 + 728);
  uint64_t v214 = *(void *)(v0 + 720);
  uint64_t v215 = *(void *)(v0 + 712);
  swift_task_dealloc(*(void *)(v0 + 960));
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  uint64_t v6 = sub_A760();
  uint64_t v14 = sub_AAD8(v6, v7, v8, v9, v10, v11, v12, v13, v111, v124);
  uint64_t v22 = sub_A888(v14, v15, v16, v17, v18, v19, v20, v21, v112, v125, v137);
  uint64_t v30 = sub_A854(v22, v23, v24, v25, v26, v27, v28, v29, v113, v126, v138, v149);
  uint64_t v38 = sub_A84C(v30, v31, v32, v33, v34, v35, v36, v37, v114, v127, v139, v150, v160);
  uint64_t v46 = sub_A844(v38, v39, v40, v41, v42, v43, v44, v45, v115, v128, v140, v151, v161, v170);
  uint64_t v54 = sub_A83C(v46, v47, v48, v49, v50, v51, v52, v53, v116, v129, v141, v152, v162, v171, v179);
  uint64_t v62 = sub_A95C(v54, v55, v56, v57, v58, v59, v60, v61, v117, v130, v142, v153, v163, v172, v180, v187);
  uint64_t v70 = sub_A954(v62, v63, v64, v65, v66, v67, v68, v69, v118, v131, v143, v154, v164, v173, v181, v188, v194);
  uint64_t v78 = sub_A938(v70, v71, v72, v73, v74, v75, v76, v77, v119, v132, v144, v155, v165, v174, v182, v189, v195, v200);
  uint64_t v86 = sub_A930( v78,  v79,  v80,  v81,  v82,  v83,  v84,  v85,  v120,  v133,  v145,  v156,  v166,  v175,  v183,  v190,  v196,  v201,  v205);
  uint64_t v94 = sub_A928( v86,  v87,  v88,  v89,  v90,  v91,  v92,  v93,  v121,  v134,  v146,  v157,  v167,  v176,  v184,  v191,  v197,  v202,  v206,  v209);
  uint64_t v102 = sub_A920( v94,  v95,  v96,  v97,  v98,  v99,  v100,  v101,  v122,  v135,  v147,  v158,  v168,  v177,  v185,  v192,  v198,  v203,  v207,  v210,  v212);
  sub_36374( v102,  v103,  v104,  v105,  v106,  v107,  v108,  v109,  v123,  v136,  v148,  v159,  v169,  v178,  v186,  v193,  v199,  v204,  v208,  v211,  v213,  v214);
  swift_task_dealloc(v215);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v216);
}

#error "105898: call analysis failed (funcsize=263)"
uint64_t sub_1058E0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  double v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  void *v62;
  uint64_t v63;
  int v64;
  double v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  double v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  NSURL *v88;
  void *v89;
  void *v90;
  id v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  void *v98;
  void *v99;
  id v100;
  id v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  Swift::String v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  void *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  id v125;
  uint64_t v121 = a6;
  uint64_t v118 = a5;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v114 = *(void *)(v10 - 8);
  uint64_t v115 = v10;
  __chkstk_darwin(v10);
  uint64_t v113 = (char *)&v112 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_494C(&qword_189CF8);
  __chkstk_darwin(v12);
  uint64_t v124 = (char *)&v112 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v117 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v116 = (char *)&v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_494C(&qword_189CE8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v119 = (char *)&v112 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v120 = (char *)&v112 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v112 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v112 - v24;
  uint64_t v26 = sub_494C(&qword_189D00);
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v123 = (char *)&v112 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v112 - v29;
  uint64_t v31 = sub_27CC8(*(_BYTE *)(a2 + 312));
  String.toSpeakableString.getter(v31, v32);
  swift_bridgeObjectRelease();
  uint64_t v122 = type metadata accessor for SpeakableString(0LL);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v30, 0LL, 1LL, v122);
  uint64_t v33 = (int *)type metadata accessor for WellnessQueryingBloodPressure_DetailedResultParameters(0LL);
  sub_A384((uint64_t)v30, a1 + v33[5]);
  uint64_t v34 = v33[16];
  swift_retain();
  swift_release();
  *(void *)(a1 + v34) = a3;
  [a4 systolicMinimum];
  uint64_t v36 = v35;
  uint64_t v37 = sub_7D950(a4);
  LOBYTE(a3) = *(_BYTE *)(a2 + 312);
  uint64_t v38 = v118;
  uint64_t v40 = sub_90668(v37, v39, a3, v36);
  swift_bridgeObjectRelease();
  uint64_t v41 = a1 + v33[15];
  *(double *)uint64_t v41 = v40;
  *(_BYTE *)(v41 + 8) = 0;
  [a4 systolicMaximum];
  uint64_t v43 = v42;
  uint64_t v44 = sub_7D950(a4);
  uint64_t v46 = sub_90668(v44, v45, a3, v43);
  swift_bridgeObjectRelease();
  uint64_t v47 = a1 + v33[14];
  *(double *)uint64_t v47 = v46;
  *(_BYTE *)(v47 + 8) = 0;
  [a4 diastolicMinimum];
  uint64_t v49 = v48;
  uint64_t v50 = sub_7D950(a4);
  uint64_t v52 = sub_90668(v50, v51, a3, v49);
  swift_bridgeObjectRelease();
  uint64_t v53 = a1 + v33[7];
  *(double *)uint64_t v53 = v52;
  *(_BYTE *)(v53 + 8) = 0;
  [a4 diastolicMaximum];
  uint64_t v55 = v54;
  uint64_t v56 = sub_7D950(a4);
  uint64_t v58 = sub_90668(v56, v57, a3, v55);
  swift_bridgeObjectRelease();
  uint64_t v59 = a1 + v33[6];
  *(double *)uint64_t v59 = v58;
  *(_BYTE *)(v59 + 8) = 0;
  uint64_t v60 = type metadata accessor for DialogCalendarRange.Builder(0LL);
  swift_allocObject(v60, *(unsigned int *)(v60 + 48), *(unsigned __int16 *)(v60 + 52));
  DialogCalendarRange.Builder.init()();
  uint64_t v61 = [v38 startDate];
  if (v61)
  {
    uint64_t v62 = v61;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v61);

    uint64_t v63 = 0LL;
  }

  else
  {
    uint64_t v63 = 1LL;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v23, v63, 1LL, v14);
  sub_DADFC((uint64_t)v23, (uint64_t)v25, &qword_189CE8);
  uint64_t v64 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v25, 1LL, v14);
  if (v64)
  {
    sub_279E0((uint64_t)v25, &qword_189CE8);
    uint64_t v65 = 0.0;
  }

  else
  {
    uint64_t v66 = v116;
    uint64_t v67 = v117;
    (*(void (**)(char *, char *, uint64_t))(v117 + 16))(v116, v25, v14);
    sub_279E0((uint64_t)v25, &qword_189CE8);
    uint64_t v69 = Date.timeIntervalSince1970.getter(v68);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v66, v14);
    uint64_t v65 = v69;
  }

  uint64_t v70 = (uint64_t)v124;
  dispatch thunk of DialogCalendarRange.Builder.withStartSecs(_:)(*(void *)&v65, v64 != 0);
  swift_release();
  uint64_t v71 = [v38 endDate];
  uint64_t v72 = (uint64_t)v119;
  if (v71)
  {
    uint64_t v73 = v71;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v71);

    uint64_t v74 = 0LL;
  }

  else
  {
    uint64_t v74 = 1LL;
  }

  uint64_t v75 = (uint64_t)v120;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v72, v74, 1LL, v14);
  sub_DADFC(v72, v75, &qword_189CE8);
  uint64_t v76 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v75, 1LL, v14);
  if (v76)
  {
    sub_279E0(v75, &qword_189CE8);
    uint64_t v77 = 0.0;
  }

  else
  {
    uint64_t v78 = v116;
    uint64_t v79 = v117;
    (*(void (**)(char *, uint64_t, uint64_t))(v117 + 16))(v116, v75, v14);
    sub_279E0(v75, &qword_189CE8);
    uint64_t v81 = Date.timeIntervalSince1970.getter(v80);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v78, v14);
    uint64_t v77 = v81;
  }

  uint64_t v82 = (uint64_t)v123;
  dispatch thunk of DialogCalendarRange.Builder.withEndSecs(_:)(*(void *)&v77, v76 != 0);
  uint64_t v83 = swift_release();
  uint64_t v84 = dispatch thunk of DialogCalendarRange.Builder.build()(v83);
  swift_release();
  uint64_t v85 = v33[13];
  swift_release();
  *(void *)(a1 + v85) = v84;
  sub_DABC0(v121, v70, &qword_189CF8);
  uint64_t v86 = type metadata accessor for URL(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v70, 1LL, v86) == 1)
  {
    sub_279E0(v70, &qword_189CF8);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v82, 1LL, 1LL, v122);
  }

  else
  {
    uint64_t v87 = [objc_allocWithZone(SAUIAppPunchOut) init];
    URL._bridgeToObjectiveC()(v88);
    uint64_t v90 = v89;
    [v87 setPunchOutUri:v89];

    uint64_t v91 = v87;
    uint64_t v92 = v113;
    uint64_t v93 = UUID.init()();
    uint64_t v94 = UUID.uuidString.getter(v93);
    uint64_t v96 = v95;
    (*(void (**)(char *, uint64_t))(v114 + 8))(v92, v115);
    sub_125B84(v94, v96, v91);

    uint64_t v97 = [v91 dictionary];
    if (v97)
    {
      uint64_t v98 = v97;
      uint64_t v99 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
      uint64_t v125 = 0LL;
      uint64_t v100 = [v99 dataWithPropertyList:v98 format:200 options:0 error:&v125];
      uint64_t v101 = v125;
      if (v100)
      {
        uint64_t v102 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v100);
        uint64_t v104 = v103;

        uint64_t v105 = Data.base64EncodedString(options:)(0LL);
        String.toSpeakableString.getter(v105._countAndFlagsBits, v105._object);

        sub_A3CC(v102, v104);
        swift_bridgeObjectRelease();
        uint64_t v106 = v82;
        uint64_t v107 = 0LL;
      }

      else
      {
        uint64_t v108 = v101;
        uint64_t v109 = _convertNSErrorToError(_:)();

        swift_willThrow(v110);
        swift_errorRelease(v109);
        uint64_t v106 = v82;
        uint64_t v107 = 1LL;
      }

      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v106, v107, 1LL, v122);
    }

    else
    {
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v82, 1LL, 1LL, v122);
    }

    (*(void (**)(uint64_t, uint64_t))(*(void *)(v86 - 8) + 8LL))(v70, v86);
  }

  return sub_A384(v82, a1);
}

uint64_t sub_1060F0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v107 = a6;
  uint64_t v104 = a5;
  uint64_t v105 = a4;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v100 = *(void *)(v9 - 8);
  uint64_t v101 = v9;
  __chkstk_darwin(v9);
  uint64_t v99 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_494C(&qword_189CF8);
  __chkstk_darwin(v11);
  uint64_t v108 = (uint64_t)&v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_494C(&qword_189D00);
  __chkstk_darwin(v13);
  uint64_t v109 = (char *)&v99 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t v103 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v102 = (char *)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_494C(&qword_189CE8);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v106 = (char *)&v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v99 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v99 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v99 - v26;
  uint64_t v28 = type metadata accessor for WellnessQueryingBloodPressure_SimpleResultParameters(0LL);
  uint64_t v29 = *(int *)(v28 + 36);
  swift_retain();
  uint64_t v30 = a1;
  uint64_t v31 = (int *)v28;
  uint64_t v32 = v104;
  swift_release();
  *(void *)(v30 + v29) = a2;
  [a3 systolic];
  double v34 = v33;
  uint64_t v35 = sub_7D950(a3);
  LOBYTE(v29) = *(_BYTE *)(v105 + 312);
  double v37 = sub_90668(v35, v36, v29, v34);
  swift_bridgeObjectRelease();
  uint64_t v38 = v30 + v31[8];
  *(double *)uint64_t v38 = v37;
  *(_BYTE *)(v38 + 8) = 0;
  [a3 diastolic];
  double v40 = v39;
  uint64_t v41 = sub_7D950(a3);
  double v43 = sub_90668(v41, v42, v29, v40);
  swift_bridgeObjectRelease();
  uint64_t v44 = v30 + v31[7];
  *(double *)uint64_t v44 = v43;
  *(_BYTE *)(v44 + 8) = 0;
  uint64_t v45 = type metadata accessor for DialogCalendarRange.Builder(0LL);
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  DialogCalendarRange.Builder.init()();
  id v46 = [v32 startDate];
  if (v46)
  {
    uint64_t v47 = v46;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v46);

    uint64_t v48 = 0LL;
  }

  else
  {
    uint64_t v48 = 1LL;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v25, v48, 1LL, v15);
  sub_DADFC((uint64_t)v25, (uint64_t)v27, &qword_189CE8);
  int v49 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1LL, v15);
  if (v49)
  {
    sub_279E0((uint64_t)v27, &qword_189CE8);
    double v50 = 0.0;
  }

  else
  {
    uint64_t v51 = v102;
    uint64_t v52 = v103;
    (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v102, v27, v15);
    sub_279E0((uint64_t)v27, &qword_189CE8);
    double v54 = Date.timeIntervalSince1970.getter(v53);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v51, v15);
    double v50 = v54;
  }

  dispatch thunk of DialogCalendarRange.Builder.withStartSecs(_:)(*(void *)&v50, v49 != 0);
  swift_release();
  id v55 = [v32 endDate];
  if (v55)
  {
    uint64_t v56 = v55;
    uint64_t v57 = (uint64_t)v106;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v55);

    uint64_t v58 = 0LL;
    uint64_t v59 = (uint64_t)v109;
  }

  else
  {
    uint64_t v58 = 1LL;
    uint64_t v59 = (uint64_t)v109;
    uint64_t v57 = (uint64_t)v106;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v57, v58, 1LL, v15);
  sub_DADFC(v57, (uint64_t)v22, &qword_189CE8);
  int v60 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1LL, v15);
  if (v60)
  {
    sub_279E0((uint64_t)v22, &qword_189CE8);
    double v61 = 0.0;
  }

  else
  {
    uint64_t v62 = v102;
    uint64_t v63 = v103;
    (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v102, v22, v15);
    sub_279E0((uint64_t)v22, &qword_189CE8);
    double v65 = Date.timeIntervalSince1970.getter(v64);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v15);
    double v61 = v65;
  }

  dispatch thunk of DialogCalendarRange.Builder.withEndSecs(_:)(*(void *)&v61, v60 != 0);
  uint64_t v66 = swift_release();
  uint64_t v67 = dispatch thunk of DialogCalendarRange.Builder.build()(v66);
  swift_release();
  uint64_t v68 = v31[6];
  swift_release();
  *(void *)(v30 + v68) = v67;
  uint64_t v69 = v108;
  sub_DABC0(v107, v108, &qword_189CF8);
  uint64_t v70 = type metadata accessor for URL(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v69, 1LL, v70) == 1)
  {
    sub_279E0(v69, &qword_189CF8);
    uint64_t v71 = type metadata accessor for SpeakableString(0LL);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v59, 1LL, 1LL, v71);
  }

  else
  {
    id v72 = [objc_allocWithZone(SAUIAppPunchOut) init];
    URL._bridgeToObjectiveC()(v73);
    uint64_t v75 = v74;
    [v72 setPunchOutUri:v74];

    id v76 = v72;
    uint64_t v77 = v99;
    uint64_t v78 = UUID.init()();
    uint64_t v79 = UUID.uuidString.getter(v78);
    uint64_t v81 = v80;
    (*(void (**)(char *, uint64_t))(v100 + 8))(v77, v101);
    sub_125B84(v79, v81, v76);

    id v82 = [v76 dictionary];
    if (v82)
    {
      uint64_t v83 = v82;
      uint64_t v84 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
      id v110 = 0LL;
      id v85 = [v84 dataWithPropertyList:v83 format:200 options:0 error:&v110];
      id v86 = v110;
      if (v85)
      {
        uint64_t v87 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v85);
        unint64_t v89 = v88;

        Swift::String v90 = Data.base64EncodedString(options:)(0LL);
        String.toSpeakableString.getter(v90._countAndFlagsBits, v90._object);

        sub_A3CC(v87, v89);
        swift_bridgeObjectRelease();
        uint64_t v91 = type metadata accessor for SpeakableString(0LL);
        uint64_t v92 = v59;
        uint64_t v93 = 0LL;
      }

      else
      {
        uint64_t v95 = v86;
        uint64_t v96 = _convertNSErrorToError(_:)();

        swift_willThrow(v97);
        swift_errorRelease(v96);
        uint64_t v91 = type metadata accessor for SpeakableString(0LL);
        uint64_t v92 = v59;
        uint64_t v93 = 1LL;
      }

      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v92, v93, 1LL, v91);
    }

    else
    {
      uint64_t v94 = type metadata accessor for SpeakableString(0LL);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v59, 1LL, 1LL, v94);
    }

    (*(void (**)(uint64_t, uint64_t))(*(void *)(v70 - 8) + 8LL))(v69, v70);
  }

  return sub_A384(v59, v30);
}

uint64_t sub_106830(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18FEAC);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1FF58;
  return sub_101960(a1);
}

uint64_t sub_106880(uint64_t a1)
{
  return sub_1060F0( a1,  *(void *)(v1 + 16),  *(void **)(v1 + 24),  *(void *)(v1 + 32),  *(void **)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_106890(uint64_t a1)
{
  return sub_1058E0( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void **)(v1 + 32),  *(void **)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_1068A0(uint64_t a1, uint64_t a2)
{
  uint64_t Model = type metadata accessor for BloodPressureQueryModel(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Model - 8) + 32LL))(a2, a1, Model);
  return a2;
}

uint64_t sub_1068E4()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_106908(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc(dword_18FEC4);
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_20098;
  return sub_34F70(a1, v1 + 16);
}

uint64_t sub_106964()
{
  return swift_task_dealloc(*(void *)(v0 + 680));
}

uint64_t sub_1069C8()
{
  uint64_t v2 = *(void *)(v0 + 960);
  *(void *)(v1 - 96) = *(void *)(v0 + 712);
  return swift_task_dealloc(v2);
}

void sub_106A4C()
{
}

uint64_t sub_106A6C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 88))(v1, v2, v0);
}

uint64_t sub_106A80(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 88))(a1, a2, v2);
}

id sub_106A8C@<X0>(void *a1@<X8>)
{
  return a1;
}

uint64_t sub_106AB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_5E844(a1, a2, a3);
}

uint64_t sub_106AD4()
{
  return (*(uint64_t (**)(void, uint64_t, void))(v1[104] + 16LL))(v1[105], v0, v1[103]);
}

uint64_t sub_106AF4@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 96) = a1;
  *(void *)(v1 + 1088) = a1;
  return Logger.wellness.unsafeMutableAddressor();
}

uint64_t sub_106B14()
{
  uint64_t v3 = v1[13];
  uint64_t v4 = v1[14];
  sub_500C(v1 + 10, v3);
  return dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)( v2,  v0,  v3,  v4);
}

double sub_106B44(uint64_t a1, uint64_t a2)
{
  return sub_90668(a1, a2, v2, v3);
}

uint64_t sub_106B54()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

_OWORD *sub_106B64()
{
  return sub_A13C((_OWORD *)(v1 + 80), v0);
}

uint64_t sub_106B70()
{
  return sub_7D950(v0);
}

_OWORD *sub_106B7C()
{
  return sub_A13C((_OWORD *)(*(void *)(v1 + 464) + 80LL), v0);
}

uint64_t sub_106B98()
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16);
  *(void *)(v4 - 88) = v5;
  return v5(v1, v3, v2);
}

  ;
}

uint64_t sub_106BD0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  *(void *)(v20 + 656) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a20, v20 + 664, v21, v22);
}

uint64_t sub_106BE8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  *(void *)(v18 + 648) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a16, v17, v16, v19);
}

uint64_t sub_106C00()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v1, v0);
}

void sub_106C14(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

uint64_t sub_106C20()
{
  return type metadata accessor for WellnessSnippets(0LL);
}

void sub_106C34(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

uint64_t sub_106C40()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v0, 1LL, v1);
}

uint64_t sub_106C50()
{
  return v3(v1, v2, v0);
}

uint64_t sub_106C60( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a15 + 8))(v16, a16);
}

uint64_t sub_106C70()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

  ;
}

uint64_t sub_106C9C(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_106CB4()
{
  return OutputGenerationManifest.responseViewId.setter(v0, v1);
}

uint64_t sub_106CC4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return a19;
}

uint64_t sub_106CD0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t (*a21)(uint64_t, uint64_t))
{
  return a21(v21, v22);
}

uint64_t sub_106CE0(uint64_t a1, uint64_t a2)
{
  return OutputGenerationManifest.init(dialogPhase:_:)(v2, a2, 0LL);
}

void sub_106CF0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

uint64_t sub_106CF8()
{
  return v3(v2, v0, v1);
}

uint64_t sub_106D08()
{
  return swift_storeEnumTagMultiPayload(v1, v0, 1LL);
}

uint64_t sub_106D18(uint64_t a1)
{
  *(void *)(v1 + 416) = a1;
  return type metadata accessor for AnyFlow(0LL);
}

void sub_106D28(float a1)
{
  float *v1 = a1;
}

uint64_t sub_106D3C()
{
  return swift_task_alloc(v0);
}

uint64_t sub_106D48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return static DialogPhase.completion.getter(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

  ;
}

void sub_106D68(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

void sub_106D74(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

uint64_t sub_106D80@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v3, v2);
}

id sub_106D8C(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_106D98( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return String.init<A>(describing:)(v15, a15);
}

uint64_t sub_106DA4()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 968));
}

uint64_t sub_106DAC()
{
  return swift_task_alloc(64LL);
}

uint64_t sub_106DB8()
{
  return String.init<A>(describing:)(v0, v1);
}

uint64_t sub_106DC4()
{
  return swift_release_n(v0, 2LL);
}

void *sub_106DD0(uint64_t a1)
{
  *(void *)(v2 + 368) = a1;
  return sub_B76C(v1);
}

uint64_t sub_106DDC(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_106DE4(uint64_t result)
{
  *(void *)(v1 - 80) = result;
  return result;
}

uint64_t sub_106DF0()
{
  return *(void *)(v0 + 760);
}

BOOL LogHealthKitQuantityFlow.on(input:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v70 = *(void *)(v4 - 8);
  uint64_t v71 = v4;
  sub_D978();
  __chkstk_darwin(v5);
  sub_6D30();
  uint64_t v69 = v6;
  uint64_t v76 = type metadata accessor for Parse(0LL);
  uint64_t v74 = *(void *)(v76 - 8);
  sub_D978();
  __chkstk_darwin(v7);
  sub_6D30();
  uint64_t v75 = v8;
  uint64_t v9 = type metadata accessor for USOParse(0LL);
  uint64_t v67 = *(void *)(v9 - 8);
  uint64_t v68 = v9;
  sub_D978();
  __chkstk_darwin(v10);
  sub_6D30();
  uint64_t v66 = v11;
  uint64_t v12 = type metadata accessor for Input(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_6D44();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = sub_D984();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  sub_3751C();
  uint64_t v77 = v19;
  sub_A794();
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)v62 - v22;
  uint64_t v24 = Logger.wellness.unsafeMutableAddressor(v21);
  sub_A5DC(v24, (uint64_t)v80);
  uint64_t v73 = v18;
  uint64_t v25 = *(void (**)(uint64_t, os_log_s *, uint64_t))(v18 + 16);
  double v65 = (os_log_s *)v24;
  uint64_t v64 = v25;
  v25((uint64_t)v23, (os_log_s *)v24, v17);
  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v16, a1, v12);
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.error.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  uint64_t v63 = v3;
  if (v29)
  {
    uint64_t v30 = sub_A5E8(22LL);
    v62[1] = a1;
    uint64_t v31 = v30;
    v62[0] = sub_A5E8(64LL);
    v79[0] = v62[0];
    *(_DWORD *)uint64_t v31 = 136315394;
    uint64_t v32 = sub_D914(v3);
    uint64_t v72 = v17;
    uint64_t v78 = sub_10A18C(v32, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, v79, v31 + 4, v31 + 12);
    sub_1EBF4();
    *(_WORD *)(v31 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2080;
    sub_35A68( (unint64_t *)&qword_189EE8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for Input);
    uint64_t v35 = sub_10A1F4(v34, v34);
    uint64_t v78 = sub_10A18C(v35, v36);
    uint64_t v17 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, v79, v31 + 14, v31 + 22);
    sub_249D4();
    sub_ADC8C(v16, *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
    _os_log_impl(&dword_0, v27, v28, "%s received input:%s", (uint8_t *)v31, 0x16u);
    uint64_t v37 = v62[0];
    swift_arrayDestroy(v62[0], 2LL);
    sub_5050(v37);
    sub_5050(v31);
  }

  else
  {
    sub_ADC8C(v16, *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
  }

  uint64_t v38 = *(uint64_t (**)(char *, uint64_t))(v73 + 8);
  uint64_t v39 = v38(v23, v17);
  uint64_t v40 = v75;
  Input.parse.getter(v39);
  uint64_t v41 = v74;
  int v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v74 + 88))(v40, v76);
  int v43 = enum case for Parse.uso(_:);
  uint64_t v44 = v77;
  if (v42 == enum case for Parse.uso(_:))
  {
    sub_10A1E8(*(uint64_t (**)(uint64_t, uint64_t))(v41 + 96));
    uint64_t v46 = v66;
    uint64_t v45 = v67;
    uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 32))(v66, v40, v68);
    uint64_t v48 = v69;
    USOParse.userParse.getter(v47);
    sub_E8C24();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v48, v71);
    sub_ADC8C(v46, *(uint64_t (**)(uint64_t, uint64_t))(v45 + 8));
  }

  else
  {
    sub_10A1E8(*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8));
    int v49 = v65;
    sub_A5DC((uint64_t)v65, (uint64_t)v79);
    v64((uint64_t)v44, v49, v17);
    sub_A86C();
    os_log_type_t v50 = sub_A898();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v52 = sub_A5E8(32LL);
      uint64_t v72 = v17;
      uint64_t v53 = v52;
      uint64_t v78 = v52;
      *(_DWORD *)uint64_t v51 = 136315138;
      uint64_t v54 = sub_D914(v63);
      uint64_t v56 = sub_39178(v54, v55, &v78);
      uint64_t v57 = sub_10A1A0(v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v57, v58, v51 + 4, v51 + 12);
      swift_bridgeObjectRelease();
      sub_DA24(&dword_0, v49, v50, "%s rejecting unsupported input", v51);
      sub_A81C(v53);
      sub_5050(v53);
      sub_5050((uint64_t)v51);

      uint64_t v59 = v77;
      uint64_t v60 = v72;
    }

    else
    {

      uint64_t v59 = v44;
      uint64_t v60 = v17;
    }

    v38(v59, v60);
  }

  return v42 == v43;
}

uint64_t LogHealthKitQuantityFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LogHealthKitQuantityFlow();
  sub_35A68(&qword_18B3D8, v5, (uint64_t (*)(uint64_t))type metadata accessor for LogHealthKitQuantityFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v6);
}

uint64_t LogHealthKitQuantityFlow.execute()(uint64_t a1)
{
  v2[202] = v1;
  v2[201] = a1;
  v2[203] = *v1;
  uint64_t v3 = type metadata accessor for CATOption(0LL);
  v2[204] = sub_A5C0(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for Calendar(0LL);
  v2[205] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[206] = v5;
  v2[207] = sub_A5C0(v5);
  uint64_t v6 = sub_494C(&qword_189BA0);
  v2[208] = sub_D8CC(*(void *)(v6 - 8));
  v2[209] = sub_A5B8();
  uint64_t v7 = sub_494C(&qword_189CE8);
  v2[210] = sub_D8CC(*(void *)(v7 - 8));
  v2[211] = sub_A5B8();
  uint64_t v8 = type metadata accessor for Date(0LL);
  v2[212] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[213] = v9;
  v2[214] = sub_D8CC(v9);
  v2[215] = sub_A5B8();
  uint64_t v10 = sub_D984();
  v2[216] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[217] = v11;
  v2[218] = sub_D8CC(v11);
  v2[219] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_10743C()
{
  *(_BYTE *)(v2 + 1824) = *(_BYTE *)(v3 + 336);
  FlowTaskLogger.taskStart()();
  uint64_t v6 = Logger.wellness.unsafeMutableAddressor(v5);
  sub_A5DC(v6, v2 + 1528);
  uint64_t v7 = *(void (**)(os_log_s *, uint64_t, uint64_t))(v4 + 16);
  v7(v0, v6, v1);
  uint64_t v8 = sub_10A1C0(v3);
  Logger.logObject.getter(v8);
  os_log_type_t v9 = sub_AB70();
  uint64_t v10 = v9;
  if (os_log_type_enabled(v0, v9))
  {
    uint64_t v105 = *(void *)(v2 + 1736);
    uint64_t v106 = *(void *)(v2 + 1728);
    uint64_t v108 = *(os_log_s **)(v2 + 1752);
    uint64_t v11 = *(void *)(v2 + 1624);
    uint64_t v12 = *(void *)(v2 + 1616);
    uint64_t v13 = sub_A5E8(22LL);
    uint64_t v109 = v7;
    uint64_t v14 = sub_A5E8(64LL);
    uint64_t v110 = v14;
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v15 = sub_D914(v11);
    *(void *)(v2 + 159_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_10A194(v15, v16, v17, v18, v19, v20, v21, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 1592, v2 + 1600, v13 + 4, v13 + 12);
    sub_1EBF4();
    *(_WORD *)(v13 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2080;
    uint64_t v23 = sub_27CC8(*(_BYTE *)(v12 + 16));
    *(void *)(v2 + 1600) = sub_10A194(v23, v24, v25, v26, v27, v28, v29, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 1600, v2 + 1608, v13 + 14, v13 + 22);
    sub_41AD0(v12);
    sub_1EBF4();
    _os_log_impl(&dword_0, v0, (os_log_type_t)v10, "Executing %s for datatype: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2LL);
    uint64_t v31 = v14;
    uint64_t v7 = v109;
    sub_5050(v31);
    sub_5050(v13);

    uint64_t v32 = *(void (**)(os_log_s *, uint64_t))(v105 + 8);
    v32(v108, v106);
  }

  else
  {
    sub_10A1C8();

    sub_41AD0(v3);
    uint64_t v32 = *(void (**)(os_log_s *, uint64_t))(v10 + 8);
    v32(v0, v1);
  }

  uint64_t v33 = *(unsigned __int8 *)(*(void *)(v2 + 1616) + 16LL);
  *(_BYTE *)(v2 + 1825) = v33;
  uint64_t v34 = sub_20460();
  sub_58030(v33, (uint64_t)v34);
  char v36 = v35;
  sub_249D4();
  if ((v36 & 1) != 0)
  {
    uint64_t v37 = (void *)(v2 + 312);
    uint64_t v38 = *(os_log_s **)(v2 + 1744);
    uint64_t v39 = *(void *)(v2 + 1728);
    uint64_t v40 = *(void *)(v2 + 1616);
    sub_A5DC(v6, v2 + 1552);
    v7(v38, v6, v39);
    uint64_t v41 = sub_10A1C0(v40);
    Logger.logObject.getter(v41);
    os_log_type_t v42 = sub_AB70();
    BOOL v43 = os_log_type_enabled(v38, v42);
    uint64_t v44 = *(os_log_s **)(v2 + 1744);
    uint64_t v45 = *(void *)(v2 + 1728);
    uint64_t v46 = *(void *)(v2 + 1616);
    if (v43)
    {
      uint64_t v107 = *(os_log_s **)(v2 + 1744);
      uint64_t v47 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v48 = sub_A5E8(32LL);
      uint64_t v110 = v48;
      *(_DWORD *)uint64_t v47 = 136315138;
      uint64_t v49 = sub_27CC8(v33);
      *(void *)(v2 + 1584) = sub_39178(v49, v50, &v110);
      uint64_t v37 = (void *)(v2 + 312);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 1584, v2 + 1592, v47 + 4, v47 + 12);
      sub_41AD0(v46);
      swift_bridgeObjectRelease();
      sub_DA24(&dword_0, v38, v42, "Manual logging is not supported for %s. Returning UnsupportedLoggingFlow.", v47);
      sub_A81C(v48);
      sub_5050(v48);
      sub_5050((uint64_t)v47);

      uint64_t v51 = v107;
      uint64_t v52 = v45;
    }

    else
    {

      sub_41AD0(v46);
      uint64_t v51 = v44;
      uint64_t v52 = v45;
    }

    v32(v51, v52);
    uint64_t v59 = *(void *)(v2 + 1632);
    uint64_t v60 = *(void *)(v2 + 1616);
    FlowTaskLogger.unsupported()();
    sub_A304(v60 + 24, (uint64_t)v37);
    sub_A304(v60 + 64, v2 + 352);
    sub_A13C((_OWORD *)(v60 + 104), (_OWORD *)(v2 + 392));
    uint64_t v61 = sub_AA80();
    sub_A72C(v61);
    uint64_t v62 = sub_A9C8();
    *(void *)(v2 + 576) = v61;
    sub_7DF74(v62, (uint64_t)&protocol witness table for ResponseFactory);
    sub_3C77C();
    uint64_t v63 = sub_AAF8(v59);
    sub_217D4();
    sub_3C77C();
    uint64_t v64 = sub_AAF0(v59);
    *(void *)(v2 + 59_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v63;
    *(void *)(v2 + 600) = v64;
    sub_20228();
    static ExecuteResponse.complete<A>(next:)();
    sub_20100(v37);
    goto LABEL_11;
  }

  uint64_t v53 = *(void *)(v2 + 1672);
  uint64_t v54 = *(void **)(v2 + 1616);
  uint64_t v55 = v54[6];
  uint64_t v56 = v54[7];
  sub_500C(v54 + 3, v55);
  (*(void (**)(uint64_t, uint64_t))(v56 + 32))(v55, v56);
  uint64_t v57 = type metadata accessor for DateInterval(0LL);
  uint64_t v58 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v53, 1LL, v57);
  if ((_DWORD)v58 == 1)
  {
    sub_F1270(*(void *)(v2 + 1672), &qword_189BA0);
    sub_10A140();
LABEL_14:
    sub_F1270(*(void *)(v2 + 1688), &qword_189CE8);
    goto LABEL_15;
  }

  DateInterval.start.getter(v58);
  sub_10A12C();
  sub_10A0A8();
  if (v66) {
    goto LABEL_14;
  }
  uint64_t v75 = *(void *)(v2 + 1656);
  uint64_t v76 = *(void *)(v2 + 1648);
  uint64_t v77 = *(void *)(v2 + 1640);
  uint64_t v78 = sub_7DFC0(*(void *)(v2 + 1704));
  static Calendar.current.getter(v78);
  char v79 = sub_10A1DC();
  (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v75, v77);
  if ((v79 & 1) == 0)
  {
    uint64_t v90 = *(void *)(v2 + 1632);
    uint64_t v91 = *(void *)(v2 + 1616);
    FlowTaskLogger.unsupported()();
    sub_10A210();
    sub_A304(v91 + 64, v2 + 648);
    sub_A13C((_OWORD *)(v91 + 104), (_OWORD *)(v2 + 688));
    uint64_t v92 = sub_AA80();
    sub_A72C(v92);
    uint64_t v93 = sub_A9C8();
    *(void *)(v2 + 87_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v92;
    *(void *)(v2 + 880) = &protocol witness table for ResponseFactory;
    *(void *)(v2 + 848) = v93;
    type metadata accessor for WellnessLoggingCATsSimple(0LL);
    sub_3C77C();
    uint64_t v94 = sub_AAF8(v90);
    sub_217D4();
    sub_3C77C();
    uint64_t v95 = sub_AAF0(v90);
    *(void *)(v2 + 888) = v94;
    *(void *)(v2 + 896) = v95;
    sub_20228();
    sub_10A15C();
    sub_20100((void *)(v2 + 608));
    uint64_t v96 = sub_37104();
    goto LABEL_27;
  }

  uint64_t v80 = sub_37104();
  v81(v80);
LABEL_15:
  uint64_t v67 = *(void *)(v2 + 1664);
  sub_500C(v54 + 3, v54[6]);
  uint64_t v68 = sub_37104();
  v69(v68);
  uint64_t v70 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v67, 1LL, v57);
  if ((_DWORD)v70 != 1)
  {
    DateInterval.end.getter(v70);
    sub_10A12C();
    sub_10A0A8();
    if (v66) {
      goto LABEL_19;
    }
    uint64_t v82 = *(void *)(v2 + 1656);
    uint64_t v83 = *(void *)(v2 + 1648);
    uint64_t v84 = *(void *)(v2 + 1640);
    uint64_t v85 = sub_7DFC0(*(void *)(v2 + 1704));
    static Calendar.current.getter(v85);
    char v86 = sub_10A1DC();
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v82, v84);
    uint64_t v87 = *(void *)(v2 + 1712);
    uint64_t v88 = *(void *)(v2 + 1704);
    uint64_t v89 = *(void *)(v2 + 1696);
    if ((v86 & 1) != 0)
    {
      sub_A7A0(*(uint64_t (**)(uint64_t, uint64_t))(v88 + 8));
      goto LABEL_20;
    }

    uint64_t v99 = *(void *)(v2 + 1632);
    uint64_t v100 = *(void *)(v2 + 1616);
    FlowTaskLogger.unsupported()();
    sub_10A210();
    sub_A304(v100 + 64, v2 + 56);
    sub_A13C((_OWORD *)(v100 + 104), (_OWORD *)(v2 + 96));
    uint64_t v101 = sub_AA80();
    sub_A72C(v101);
    uint64_t v102 = sub_A9C8();
    *(void *)(v2 + 280) = v101;
    *(void *)(v2 + 288) = &protocol witness table for ResponseFactory;
    *(void *)(v2 + 256) = v102;
    type metadata accessor for WellnessLoggingCATsSimple(0LL);
    sub_3C77C();
    uint64_t v103 = sub_AAF8(v99);
    sub_217D4();
    sub_3C77C();
    uint64_t v104 = sub_AAF0(v99);
    *(void *)(v2 + 296) = v103;
    *(void *)(v2 + 304) = v104;
    sub_20228();
    sub_10A15C();
    sub_20100((void *)(v2 + 16));
    uint64_t v98 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
    uint64_t v96 = v87;
    uint64_t v97 = v89;
LABEL_27:
    v98(v96, v97);
LABEL_11:
    sub_10A07C();
    sub_A78C();
    sub_A67C();
    sub_A7C8();
    sub_A760();
    sub_A8EC();
    sub_A910();
    sub_A864();
    sub_A85C();
    sub_A8F4();
    return (*(uint64_t (**)(void))(v2 + 8))();
  }

  sub_F1270(*(void *)(v2 + 1664), &qword_189BA0);
  sub_10A140();
LABEL_19:
  sub_F1270(*(void *)(v2 + 1680), &qword_189CE8);
LABEL_20:
  HealthKitPersistor.init()();
  uint64_t v71 = sub_494C(&qword_18AF58);
  uint64_t v72 = sub_20308(v71, 48LL);
  *(void *)(v2 + 1760) = v72;
  *(_OWORD *)(v72 + 16) = xmmword_137250;
  *(void *)(v72 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_27CC8(v33);
  *(void *)(v72 + 40) = v73;
  uint64_t v74 = (void *)swift_task_alloc(async function pointer to HealthKitPersistor.isLoggingAuthorized(for:)[1]);
  *(void *)(v2 + 1768) = v74;
  *uint64_t v74 = v2;
  v74[1] = sub_107C34;
  return HealthKitPersistor.isLoggingAuthorized(for:)(v72);
}

uint64_t sub_107C34()
{
  *(_BYTE *)(v1 + 1826) = v0;
  sub_36900(v2);
  sub_249D4();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_107C78()
{
  if ((*(_BYTE *)(v0 + 1826) & 1) == 0)
  {
    char v15 = *(_BYTE *)(v0 + 1825);
    uint64_t v16 = *(void *)(v0 + 1632);
    uint64_t v17 = *(void *)(v0 + 1616);
    FlowTaskLogger.taskNeedsAuthorization()();
    sub_A304(v17 + 64, v0 + 912);
    sub_A13C((_OWORD *)(v17 + 104), (_OWORD *)(v0 + 952));
    uint64_t v18 = sub_AA80();
    sub_A72C(v18);
    uint64_t v19 = sub_A9C8();
    *(void *)(v0 + 1136) = v18;
    *(void *)(v0 + 1144) = &protocol witness table for ResponseFactory;
    *(void *)(v0 + 111_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v19;
    type metadata accessor for WellnessCATsSimple(0LL);
    sub_7DF94();
    uint64_t v20 = sub_AAF8(v16);
    sub_217D4();
    sub_7DF94();
    uint64_t v21 = sub_AAF0(v16);
    *(_BYTE *)(v0 + 904) = v15;
    *(void *)(v0 + 115_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v20;
    *(void *)(v0 + 1160) = v21;
    sub_A294();
    static ExecuteResponse.complete<A>(next:)();
    sub_A2D0((void *)(v0 + 904));
LABEL_7:
    sub_10A07C();
    sub_A78C();
    sub_A67C();
    sub_A7C8();
    sub_A760();
    sub_A8EC();
    sub_A910();
    sub_A864();
    sub_A85C();
    sub_A8F4();
    sub_10A0F8();
    __asm { BR              X0 }
  }

  uint64_t v1 = *(void *)(v0 + 1616);
  uint64_t v2 = *(void *)(v1 + 328);
  *(void *)(v0 + 1776) = v2;
  uint64_t v3 = (void *)(v1 + 312);
  switch(v2)
  {
    case 1LL:
      uint64_t v4 = *(void *)(v1 + 48);
      uint64_t v5 = *(void *)(v1 + 56);
      sub_500C((void *)(v1 + 24), v4);
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 64))(v4, v5);
      if ((v7 & 1) != 0)
      {
        uint64_t v41 = *(void *)(v1 + 312);
        uint64_t v42 = *(void *)(v1 + 320);
        uint64_t v43 = *(void *)(v1 + 328);
        *uint64_t v3 = 0LL;
        *(void *)(v1 + 320) = 0LL;
        *(void *)(v1 + 328) = 2LL;
        sub_109CD0(v41, v42, v43);
        uint64_t v44 = (void *)swift_task_alloc(dword_18FED4);
        *(void *)(v0 + 1816) = v44;
      }

      else
      {
        uint64_t v8 = v6;
        os_log_type_t v9 = *(void **)(v0 + 1616);
        uint64_t v10 = v9[6];
        uint64_t v11 = v9[7];
        sub_500C(v9 + 3, v10);
        char v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 48))(v10, v11);
        if (v12 == 61)
        {
          uint64_t v13 = 0LL;
          uint64_t v14 = 0LL;
        }

        else
        {
          uint64_t v13 = sub_37538(v12);
        }

        uint64_t v45 = *(void *)(v1 + 312);
        uint64_t v46 = *(void *)(v1 + 320);
        uint64_t v47 = *(void *)(v1 + 328);
        *(void *)(v1 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v8;
        *(void *)(v1 + 320) = v13;
        *(void *)(v1 + 328) = v14;
        sub_109CD0(v45, v46, v47);
        uint64_t v44 = (void *)swift_task_alloc(dword_18FED4);
        *(void *)(v0 + 1808) = v44;
      }

      sub_10A1FC(v44);
      sub_10A0F8();
      return LogHealthKitQuantityFlow.execute()();
    case 2LL:
      char v30 = *(_BYTE *)(v0 + 1825);
      sub_A13C((_OWORD *)(v1 + 104), (_OWORD *)(v0 + 1328));
      uint64_t v31 = sub_AA80();
      sub_A72C(v31);
      uint64_t v32 = sub_A9C8();
      uint64_t v33 = type metadata accessor for LogQuantityPromptStrategy();
      uint64_t v34 = sub_20308(v33, 224LL);
      *(void *)(v0 + 151_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v31;
      *(void *)(v0 + 1520) = &protocol witness table for ResponseFactory;
      *(void *)(v0 + 1488) = v32;
      *(_BYTE *)(v34 + 16) = v30;
      memcpy((void *)(v34 + 24), (const void *)(v0 + 1328), 0xA0uLL);
      sub_20004((__int128 *)(v0 + 1488), v34 + 184);
      swift_retain();
      static OutputPublisherFactory.makeOutputPublisherAsync()(v48);
      uint64_t v35 = sub_494C(&qword_18FEE0);
      sub_A72C(v35);
      sub_35A68( &qword_18FEE8,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for LogQuantityPromptStrategy);
      uint64_t v37 = PromptForValueFlowAsync.init<A>(strategy:outputPublisher:)(v34, v48, v33, v36);
      uint64_t v38 = *(void *)(v1 + 312);
      uint64_t v39 = *(void *)(v1 + 320);
      uint64_t v40 = *(void *)(v1 + 328);
      *uint64_t v3 = 0LL;
      *(void *)(v1 + 320) = 0LL;
      *(void *)(v1 + 328) = 3LL;
      sub_109CD0(v38, v39, v40);
      FlowTaskLogger.taskDisambiguate()();
      *(void *)(v0 + 1576) = v37;
      sub_3586C(qword_18FEF0, &qword_18FEE0);
      swift_retain();
      static ExecuteResponse.ongoing<A>(next:childCompletion:)(v0 + 1576, sub_109CE8, v1, v35);
      sub_3652C();
      swift_release();
      swift_release();
      goto LABEL_7;
    case 3LL:
      static ExecuteResponse.ongoing(requireInput:)(0LL);
      goto LABEL_7;
    case 4LL:
      FlowTaskLogger.taskFailed()();
      sub_A13C((_OWORD *)(v1 + 104), (_OWORD *)(v0 + 1168));
      sub_A178();
      static ExecuteResponse.complete<A>(next:)();
      sub_A1B4((void *)(v0 + 1168));
      goto LABEL_7;
    default:
      *(void *)(v0 + 1784) = *(void *)(v1 + 320);
      *(void *)(v0 + 179_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(v1 + 312);
      uint64_t v23 = dword_18FEDC;
      swift_bridgeObjectRetain(v2);
      unint64_t v24 = (void *)swift_task_alloc(v23);
      *(void *)(v0 + 1800) = v24;
      sub_10A1FC(v24);
      sub_10A0F8();
      return sub_108218(v25, v26, v27, v28);
  }

uint64_t sub_1080E8()
{
  uint64_t v2 = v1[224];
  uint64_t v3 = v1[223];
  uint64_t v4 = v1[222];
  uint64_t v5 = *v0;
  sub_56254(v1[225], v6);
  sub_109CD0(v2, v3, v4);
  sub_10A050();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  return sub_36148(*(uint64_t (**)(void))(v5 + 8));
}

uint64_t sub_108160()
{
  uint64_t v2 = *v0;
  sub_56254(*(void *)(v1 + 1808), v3);
  sub_10A050();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  return sub_36148(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_1081BC()
{
  uint64_t v2 = *v0;
  sub_56254(*(void *)(v1 + 1816), v3);
  sub_10A050();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  return sub_36148(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_108218(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  *(void *)(v5 + 75_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v4;
  *(void *)(v5 + 744) = a3;
  *(void *)(v5 + 736) = a2;
  *(double *)(v5 + 728) = a4;
  *(void *)(v5 + 720) = a1;
  uint64_t v6 = sub_494C(&qword_190040);
  *(void *)(v5 + 760) = sub_A5C0(*(void *)(v6 - 8));
  uint64_t v7 = type metadata accessor for CATOption(0LL);
  *(void *)(v5 + 768) = sub_A5C0(*(void *)(v7 - 8));
  uint64_t v8 = sub_D984();
  *(void *)(v5 + 776) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v5 + 784) = v9;
  *(void *)(v5 + 79_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_D8CC(v9);
  *(void *)(v5 + 800) = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_1082A0()
{
  uint64_t v1 = *(void *)(v0 + 800);
  uint64_t v2 = *(void *)(v0 + 784);
  uint64_t v3 = *(void *)(v0 + 776);
  id v4 = sub_108E74(*(double *)(v0 + 728), *(void *)(v0 + 736), *(void *)(v0 + 744));
  *(void *)(v0 + 808) = v4;
  uint64_t v5 = Logger.wellness.unsafeMutableAddressor(v4);
  *(void *)(v0 + 816) = v5;
  sub_A5DC(v5, v0 + 648);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  *(void *)(v0 + 824) = v6;
  v6(v1, v5, v3);
  id v7 = v4;
  sub_A86C();
  os_log_type_t v8 = sub_AB70();
  if (sub_A634(v8))
  {
    uint64_t v9 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v10 = (void *)sub_A5E8(8LL);
    *(_DWORD *)uint64_t v9 = 138412290;
    *(void *)(v0 + 71_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v7;
    id v11 = v7;
    sub_46578(v0 + 712, v0 + 720, (uint64_t)(v9 + 4));
    *uint64_t v10 = v7;

    sub_DA24(&dword_0, (os_log_s *)v4, (os_log_type_t)v3, "Executing intent: %@", v9);
    sub_494C(&qword_189CB8);
    sub_A81C((uint64_t)v10);
    sub_5050((uint64_t)v10);
    sub_5050((uint64_t)v9);
  }

  else
  {

    id v4 = v7;
  }

  uint64_t v12 = *(void *)(v0 + 784);
  uint64_t v13 = *(void *)(v0 + 752);

  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
  *(void *)(v0 + 83_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v14;
  sub_A7A0(v14);
  char v15 = *(void **)(v13 + 264);
  *(void *)(v0 + 56) = v0 + 696;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_1084A4;
  *(void *)(v0 + 640) = swift_continuation_init(v0 + 16, 0LL);
  *(void *)(v0 + 608) = _NSConcreteStackBlock;
  *(void *)(v0 + 616) = 0x40000000LL;
  *(void *)(v0 + 624) = sub_7ED0;
  *(void *)(v0 + 63_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = &unk_1815D8;
  [v15 handleLogQuantity:v7 completion:v0 + 608];
  return swift_continuation_await(v0 + 16);
}

uint64_t sub_1084A4()
{
  return sub_A5D0();
}

uint64_t sub_1084E4()
{
  uint64_t v2 = *(void (**)(uint64_t, os_log_s *, uint64_t))(v0 + 824);
  uint64_t v3 = *(os_log_s **)(v0 + 816);
  uint64_t v4 = *(void *)(v0 + 792);
  uint64_t v5 = *(void *)(v0 + 776);
  uint64_t v6 = *(void **)(v0 + 696);
  *(void *)(v0 + 840) = v6;
  sub_A5DC((uint64_t)v3, v0 + 672);
  v2(v4, v3, v5);
  id v7 = v6;
  sub_A86C();
  os_log_type_t v8 = sub_AB70();
  if (sub_A634(v8))
  {
    uint64_t v9 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v1 = (void *)sub_A5E8(8LL);
    *(_DWORD *)uint64_t v9 = 138412290;
    *(void *)(v0 + 704) = v7;
    uint64_t v6 = (void *)(v0 + 712);
    uint64_t v10 = v7;
    sub_46578(v0 + 704, v0 + 712, (uint64_t)(v9 + 4));
    void *v1 = v7;

    sub_DA24(&dword_0, v3, (os_log_type_t)v2, "Received intent response: %@", v9);
    sub_494C(&qword_189CB8);
    sub_A81C((uint64_t)v1);
    sub_5050((uint64_t)v1);
    sub_5050((uint64_t)v9);
  }

  else
  {

    uint64_t v3 = (os_log_s *)v7;
  }

  id v11 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 832);
  uint64_t v12 = *(void *)(v0 + 792);
  uint64_t v13 = *(void *)(v0 + 776);

  uint64_t v14 = v11(v12, v13);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))((char *)&stru_20.maxprot + (swift_isaMask & *v7)))(v14);
  if (v15 == 4)
  {
    id v21 = [v7 uuidOfLastSavedSample];
    if (v21)
    {
      uint64_t v22 = v21;
      ((void (*)(void))static UUID._unconditionallyBridgeFromObjectiveC(_:))();

      uint64_t v23 = 0LL;
    }

    else
    {
      uint64_t v23 = 1LL;
    }

    uint64_t v32 = *(void *)(v0 + 760);
    uint64_t v33 = *(void *)(v0 + 752);
    uint64_t v34 = type metadata accessor for UUID(0LL);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v32, v23, 1LL, v34);
    sub_1097B8(v32, *(unsigned __int8 *)(v33 + 16), v33 + 24);
    sub_F1270(v32, &qword_190040);
    FlowTaskLogger.success()();
    uint64_t v35 = (void *)swift_task_alloc(dword_18FF34);
    *(void *)(v0 + 848) = v35;
    *uint64_t v35 = v0;
    v35[1] = sub_1088CC;
    return sub_108F20((uint64_t)v7);
  }

  else
  {
    if (v15 == 102)
    {
      sub_10A164();
      FlowTaskLogger.unsupported()();
      char v24 = *((_BYTE *)v7 + 16);
      sub_A304((uint64_t)(v7 + 8), v0 + 512);
      uint64_t v25 = sub_AA80();
      sub_A72C(v25);
      uint64_t v26 = sub_A9C8();
      *(void *)(v0 + 576) = v25;
      sub_7DF74(v26, (uint64_t)&protocol witness table for ResponseFactory);
      sub_A768();
      uint64_t v27 = sub_AAF8((uint64_t)v6);
      sub_217D4();
      sub_A768();
      uint64_t v28 = sub_AAF0((uint64_t)v6);
      *(_BYTE *)(v0 + 504) = v24;
      *(void *)(v0 + 59_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v27;
      *(void *)(v0 + 600) = v28;
      sub_7DCBC();
      sub_10A15C();

      sub_7DCF8(v0 + 504);
    }

    else if (v15 == 101)
    {
      sub_10A164();
      FlowTaskLogger.taskNeedsAuthorization()();
      char v16 = *((_BYTE *)v7 + 16);
      sub_A304((uint64_t)(v7 + 8), v0 + 88);
      sub_A13C(v7 + 13, (_OWORD *)(v0 + 128));
      uint64_t v17 = sub_AA80();
      sub_A72C(v17);
      uint64_t v18 = sub_A9C8();
      *(void *)(v0 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v17;
      *(void *)(v0 + 320) = &protocol witness table for ResponseFactory;
      *(void *)(v0 + 288) = v18;
      type metadata accessor for WellnessCATsSimple(0LL);
      sub_A768();
      uint64_t v19 = sub_AAF8((uint64_t)v6);
      sub_217D4();
      sub_A768();
      uint64_t v20 = sub_AAF0((uint64_t)v6);
      *(_BYTE *)(v0 + 80) = v16;
      *(void *)(v0 + 328) = v19;
      *(void *)(v0 + 336) = v20;
      sub_A294();
      sub_10A15C();

      sub_A2D0((void *)(v0 + 80));
    }

    else
    {
      uint64_t v29 = *(void **)(v0 + 808);
      uint64_t v30 = *(void *)(v0 + 752);
      FlowTaskLogger.genericError()();
      sub_A13C((_OWORD *)(v30 + 104), (_OWORD *)(v0 + 344));
      sub_A178();
      static ExecuteResponse.complete<A>(next:)();

      sub_A1B4((void *)(v0 + 344));
    }

    sub_10A118();
    sub_A78C();
    sub_A67C();
    sub_A7C8();
    return sub_36148(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_1088CC()
{
  *(void *)(v1 + 856) = v0;
  sub_36900(v2);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_108908()
{
  uint64_t v1 = *(void **)(v0 + 840);
  uint64_t v2 = *(void **)(v0 + 808);
  static ExecuteResponse.complete(next:)(*(void *)(v0 + 856));
  sub_3652C();

  sub_10A118();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10896C(uint64_t a1)
{
  uint64_t v2 = sub_494C(&qword_190058);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_3751C();
  uint64_t v82 = v4;
  sub_A794();
  uint64_t v6 = __chkstk_darwin(v5);
  os_log_type_t v8 = (uint64_t *)((char *)&v71 - v7);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v71 - v9;
  uint64_t v11 = sub_D984();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_3751C();
  uint64_t v74 = v13;
  sub_A794();
  __chkstk_darwin(v14);
  uint64_t v76 = (uint64_t)&v71 - v15;
  sub_A794();
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v71 - v18;
  uint64_t v20 = Logger.wellness.unsafeMutableAddressor(v17);
  sub_A5DC(v20, (uint64_t)v86);
  uint64_t v78 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  char v79 = (uint8_t *)v20;
  v78(v19, v20, v11);
  uint64_t v80 = v3;
  uint64_t v81 = a1;
  uint64_t v77 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v21 = v77(v10, a1, v2);
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.debug.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = sub_A5E8(12LL);
    uint64_t v73 = v12;
    uint64_t v25 = (uint8_t *)v24;
    uint64_t v26 = sub_A5E8(32LL);
    uint64_t v75 = v11;
    uint64_t v27 = v26;
    v85[0] = v26;
    *(_DWORD *)uint64_t v25 = 136315138;
    uint64_t v72 = v25 + 4;
    sub_3586C(&qword_190060, &qword_190058);
    uint64_t v29 = sub_10A1F4(v28, v28);
    uint64_t v84 = sub_10A18C(v29, v30);
    sub_46578((uint64_t)&v84, (uint64_t)v85, (uint64_t)v72);
    sub_249D4();
    uint64_t v31 = v80;
    sub_10A154((uint64_t)v10);
    os_log_type_t v32 = v23;
    uint64_t v33 = v31;
    sub_DA24(&dword_0, v22, v32, "Received response from PromptForValueFlowAsync: %s", v25);
    sub_A81C(v27);
    uint64_t v34 = v27;
    uint64_t v11 = v75;
    sub_5050(v34);
    sub_5050((uint64_t)v25);

    uint64_t v35 = *(void (**)(char *, uint64_t))(v73 + 8);
  }

  else
  {
    uint64_t v33 = v80;
    sub_10A154((uint64_t)v10);

    uint64_t v35 = *(void (**)(char *, uint64_t))(v12 + 8);
  }

  v35(v19, v11);
  uint64_t v36 = v81;
  uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v77;
  v77((char *)v8, v81, v2);
  int v38 = (*(uint64_t (**)(uint64_t *, uint64_t))(v33 + 88))(v8, v2);
  uint64_t v39 = v82;
  if (v38 == enum case for PromptResult.answered<A>(_:))
  {
    sub_ADC8C((uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t))(v33 + 96));
    uint64_t v40 = *v8;
    uint64_t v80 = v8[1];
    uint64_t v74 = v8[2];
    uint64_t v41 = (uint64_t)v79;
    sub_A5DC((uint64_t)v79, (uint64_t)v85);
    uint64_t v42 = v76;
    sub_10A21C(v76, v41);
    uint64_t v43 = v37(v39, v36, v2);
    uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
    os_log_type_t v45 = static os_log_type_t.debug.getter(v44);
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = v39;
      uint64_t v47 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v48 = sub_A5E8(32LL);
      uint64_t v75 = v11;
      uint64_t v49 = v48;
      uint64_t v84 = v48;
      uint64_t v81 = v40;
      *(_DWORD *)uint64_t v47 = 136315138;
      char v79 = v47 + 4;
      sub_3586C(&qword_190060, &qword_190058);
      uint64_t v51 = sub_10A1F4(v50, v50);
      uint64_t v53 = sub_39178(v51, v52, &v84);
      uint64_t v54 = sub_10A1A0(v53);
      uint64_t v40 = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v54, v55, v79, v47 + 12);
      sub_249D4();
      sub_10A154(v46);
      sub_DA24(&dword_0, v44, v45, "PromptForValueFlowAsync returned: %s", v47);
      sub_A81C(v49);
      sub_5050(v49);
      sub_5050((uint64_t)v47);

      uint64_t v57 = v75;
      uint64_t v56 = v76;
    }

    else
    {
      sub_10A154(v39);

      uint64_t v56 = v42;
      uint64_t v57 = v11;
    }

    v35((char *)v56, v57);
    uint64_t v69 = v83;
    uint64_t v66 = v83[39];
    uint64_t v67 = v83[40];
    uint64_t v68 = v83[41];
    uint64_t v70 = v80;
    v83[39] = v40;
    v69[40] = v70;
    v69[41] = v74;
  }

  else
  {
    sub_10A154((uint64_t)v8);
    uint64_t v58 = (uint64_t)v79;
    sub_A5DC((uint64_t)v79, (uint64_t)v85);
    uint64_t v59 = v74;
    uint64_t v60 = v11;
    uint64_t v61 = sub_10A21C(v74, v58);
    uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
    os_log_type_t v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = (uint8_t *)sub_A5E8(2LL);
      *(_WORD *)uint64_t v64 = 0;
      _os_log_impl( &dword_0,  v62,  v63,  "PromptForValueFlowAsync did not return the needed values, erroring out",  v64,  2u);
      sub_5050((uint64_t)v64);
    }

    v35((char *)v59, v60);
    double v65 = v83;
    uint64_t v66 = v83[39];
    uint64_t v67 = v83[40];
    uint64_t v68 = v83[41];
    v83[39] = 0LL;
    v65[40] = 0LL;
    v65[41] = 4LL;
  }

  sub_109CD0(v66, v67, v68);
  sub_D8FC();
}

id sub_108E74(double a1, uint64_t a2, uint64_t a3)
{
  id v6 = [objc_allocWithZone((Class)type metadata accessor for LogQuantityIntent(0)) init];
  uint64_t v7 = sub_27CC8(*(_BYTE *)(v3 + 16));
  sub_F84E8(v7, v8, v6);
  [v6 setValue:a1];
  if (a3) {
    NSString v9 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v9 = 0LL;
  }
  [v6 setUnits:v9];

  return v6;
}

uint64_t sub_108F20(uint64_t a1)
{
  v2[81] = v1;
  v2[80] = a1;
  uint64_t v3 = type metadata accessor for DialogPhase(0LL);
  v2[82] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[83] = v4;
  v2[84] = sub_D8CC(v4);
  v2[85] = sub_A5B8();
  uint64_t v5 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[86] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[87] = v6;
  v2[88] = sub_A5C0(v6);
  uint64_t v7 = sub_D984();
  v2[89] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[90] = v8;
  v2[91] = sub_D8CC(v8);
  v2[92] = sub_A5B8();
  v2[93] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_108FB8()
{
  *(void *)(v0 + 480) = &type metadata for WellnessFeatureFlagsKey;
  *(void *)(v0 + 488) = sub_354B0();
  *(_BYTE *)(v0 + 456) = 4;
  char v1 = isFeatureEnabled(_:)(v0 + 456);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 456));
  if ((v1 & 1) != 0)
  {
    char v2 = *(_BYTE *)(*(void *)(v0 + 648) + 16LL);
    *(_BYTE *)(v0 + 776) = v2;
    uint64_t v3 = (void *)swift_task_alloc(dword_18B4DC);
    *(void *)(v0 + 75_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10909C;
    return sub_56B6C(v0 + 376, v2, *(void *)(v0 + 640));
  }

  else
  {
    uint64_t v5 = *(void *)(v0 + 648);
    uint64_t v6 = v5 + 104;
    char v7 = *(_BYTE *)(v5 + 16);
    uint64_t v8 = (void *)swift_task_alloc(dword_1907FC);
    *(void *)(v0 + 760) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_1095B4;
    return sub_122E24(v7, *(void *)(v0 + 640), v6);
  }

uint64_t sub_10909C()
{
  uint64_t v2 = *v0;
  sub_56254(*(void *)(v2 + 752), &v2);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_1090E0(uint64_t a1)
{
  uint64_t v46 = v1 + 376;
  uint64_t v2 = *(os_log_s **)(v1 + 744);
  uint64_t v3 = *(void *)(v1 + 720);
  uint64_t v4 = *(void *)(v1 + 712);
  uint64_t v5 = (id *)(v1 + 640);
  uint64_t v6 = *(void **)(v1 + 640);
  uint64_t v7 = Logger.wellness.unsafeMutableAddressor(a1);
  sub_A5DC(v7, v1 + 584);
  uint64_t v47 = *(void (**)(os_log_s *, uint64_t, uint64_t))(v3 + 16);
  v47(v2, v7, v4);
  id v8 = v2;
  Logger.logObject.getter(v6);
  os_log_type_t v9 = sub_AB70();
  uint64_t v44 = v7;
  if (os_log_type_enabled(v2, v9))
  {
    uint64_t v10 = *(void **)(v1 + 640);
    uint64_t v11 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v12 = (void *)sub_A5E8(8LL);
    *(_DWORD *)uint64_t v11 = 138412290;
    *(void *)(v1 + 63_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v10;
    id v13 = v10;
    sub_46578(v1 + 632, v1 + 640, (uint64_t)(v11 + 4));
    *uint64_t v12 = v10;
    uint64_t v7 = v44;

    sub_DA24(&dword_0, v2, v9, "#LogHealthKitQuantityFlow: In successfulResponse intent response is %@", v11);
    sub_494C(&qword_189CB8);
    sub_A81C((uint64_t)v12);
    sub_5050((uint64_t)v12);
    sub_5050((uint64_t)v11);
  }

  else
  {

    id v8 = *v5;
  }

  uint64_t v14 = *(void *)(v1 + 744);
  uint64_t v15 = *(os_log_s **)(v1 + 736);
  uint64_t v16 = *(void *)(v1 + 720);
  uint64_t v17 = *(void *)(v1 + 712);
  uint64_t v18 = *(void *)(v1 + 648);

  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v19(v14, v17);
  sub_A5DC(v7, v1 + 560);
  v47(v15, v7, v17);
  sub_10A1C0(v18);
  sub_A86C();
  os_log_type_t v20 = sub_AB70();
  if (os_log_type_enabled((os_log_t)v8, v20))
  {
    uint64_t v42 = *(void *)(v1 + 712);
    uint64_t v43 = *(void *)(v1 + 736);
    uint64_t v41 = *(void *)(v1 + 648);
    unsigned __int8 v21 = *(_BYTE *)(v1 + 776);
    uint64_t v22 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v23 = sub_A5E8(32LL);
    v48[0] = v23;
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v24 = sub_27CC8(v21);
    *(void *)(v1 + 624) = sub_39178(v24, v25, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 624, v1 + 632, v22 + 4, v22 + 12);
    sub_1EBF4();
    sub_41AD0(v41);
    sub_DA24(&dword_0, (os_log_s *)v8, v20, "#LogHealthKitQuantityFlow: In successfulResponse identifier is %s", v22);
    sub_A81C(v23);
    uint64_t v26 = v23;
    uint64_t v7 = v44;
    sub_5050(v26);
    sub_5050((uint64_t)v22);

    v19(v43, v42);
  }

  else
  {
    sub_41AD0(*(void *)(v1 + 648));

    sub_10A1B4();
  }

  os_log_type_t v45 = (__int128 *)(v1 + 336);
  uint64_t v27 = sub_37104();
  sub_41850(v27, v28, v29);
  if (*(void *)(v1 + 360))
  {
    sub_20004(v45, v1 + 496);
    sub_A304(v1 + 496, v1 + 416);
    uint64_t v30 = sub_20308((uint64_t)&unk_1815C0, 56LL);
    sub_20004((__int128 *)(v1 + 416), v30 + 16);
    static OutputPublisherFactory.makeOutputPublisherAsync()(v48);
    uint64_t v31 = type metadata accessor for SimpleOutputFlowAsync(0LL);
    sub_A72C(v31);
    *(void *)(v1 + 616) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)(v48, &unk_190050, v30);
    uint64_t v32 = Flow.eraseToAnyFlow()(v31);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v1 + 496));
    sub_F1270(v46, &qword_18A448);
    swift_release();
  }

  else
  {
    uint64_t v33 = *(os_log_s **)(v1 + 728);
    uint64_t v34 = *(void *)(v1 + 712);
    sub_F1270((uint64_t)v45, &qword_18A448);
    sub_A5DC(v7, v1 + 536);
    uint64_t v35 = ((uint64_t (*)(os_log_s *, uint64_t, uint64_t))v47)(v33, v7, v34);
    uint64_t v36 = v33;
    Logger.logObject.getter(v35);
    os_log_type_t v37 = sub_A898();
    if (sub_232DC(v37))
    {
      int v38 = (uint8_t *)sub_A5E8(2LL);
      *(_WORD *)int v38 = 0;
      _os_log_impl(&dword_0, v36, (os_log_type_t)v34, "#LogHealthKitQuantityFlow: Invalid response output", v38, 2u);
      sub_5050((uint64_t)v38);
    }

    uint64_t v39 = *(void *)(v1 + 648);

    sub_10A1B4();
    FlowTaskLogger.genericError()();
    sub_A13C((_OWORD *)(v39 + 104), (_OWORD *)(v1 + 16));
    sub_A178();
    uint64_t v32 = Flow.eraseToAnyFlow()(&type metadata for GenericErrorFlow);
    sub_A1B4((void *)(v1 + 16));
    sub_F1270(v46, &qword_18A448);
  }

  sub_10A0DC();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v32);
}

uint64_t sub_1095B4()
{
  *(void *)(v1 + 768) = v0;
  sub_36900(v2);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_1095F0()
{
  uint64_t v1 = *(void **)(v0 + 768);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 704);
    uint64_t v28 = *(void *)(v0 + 696);
    uint64_t v3 = *(void *)(v0 + 680);
    uint64_t v4 = *(void *)(v0 + 672);
    uint64_t v5 = *(void *)(v0 + 664);
    uint64_t v6 = *(void *)(v0 + 656);
    uint64_t v7 = *(void *)(v0 + 648);
    id v8 = v1;
    static DialogPhase.completion.getter(v8, v9, v10, v11, v12, v13, v14, v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v6);
    OutputGenerationManifest.init(dialogPhase:_:)(v4, sub_A633C, 0LL);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v6);
    id v16 = [v8 patternId];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    uint64_t v19 = v18;

    OutputGenerationManifest.responseViewId.setter(v17, v19);
    uint64_t v20 = *(void *)(v7 + 128);
    uint64_t v21 = *(void *)(v7 + 136);
    uint64_t v22 = (void *)sub_37104();
    sub_500C(v22, v23);
    *(void *)(v0 + 608) = dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)( v8,  v2,  v20,  v21);
    uint64_t v24 = type metadata accessor for AnyFlow(0LL);
    uint64_t v25 = Flow.eraseToAnyFlow()(v24);

    sub_23334(v28);
    swift_release();
  }

  else
  {
    uint64_t v26 = (_OWORD *)(*(void *)(v0 + 648) + 104LL);
    FlowTaskLogger.genericError()();
    sub_A13C(v26, (_OWORD *)(v0 + 176));
    sub_A178();
    uint64_t v25 = Flow.eraseToAnyFlow()(&type metadata for GenericErrorFlow);
    sub_A1B4((void *)(v0 + 176));
  }

  sub_10A0DC();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v25);
}

void sub_1097B8(uint64_t a1, int a2, uint64_t a3)
{
  int v51 = a2;
  uint64_t v52 = a1;
  uint64_t v4 = sub_D984();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  id v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v48 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v48 - v12;
  sub_494C(&qword_190040);
  sub_D978();
  __chkstk_darwin(v14);
  sub_6D44();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = type metadata accessor for UUID(0LL);
  uint64_t v49 = *(void *)(v18 - 8);
  sub_D978();
  __chkstk_darwin(v19);
  sub_6D44();
  uint64_t v22 = v21 - v20;
  type metadata accessor for SiriEnvironment(0LL);
  if (static SiriEnvironment.forCurrentTask.getter())
  {
    uint64_t v48 = a3;
    SiriEnvironment.correctionsClientProvider.getter();
    uint64_t v23 = sub_3652C();
    dispatch thunk of SiriCorrectionsClientProvider.correctionsClient.getter(&v54, v23);
    swift_release();
    if (*((void *)&v55 + 1))
    {
      sub_20004(&v54, (uint64_t)v57);
      sub_41850(v52, v17, &qword_190040);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v17, 1LL, v18) == 1)
      {
        sub_F1270(v17, &qword_190040);
        uint64_t v25 = Logger.wellness.unsafeMutableAddressor(v24);
        sub_A5DC(v25, (uint64_t)&v54);
        uint64_t v26 = sub_89D50((uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
        Logger.logObject.getter(v26);
        os_log_type_t v27 = sub_A898();
        if (sub_232DC(v27))
        {
          uint64_t v28 = (_WORD *)sub_A5E8(2LL);
          *uint64_t v28 = 0;
          sub_41964( &dword_0,  v29,  v30,  "LogHealthKitQuantityFlow: No uuidOfLastSavedSample. Continuing without registering corrections flow.");
          sub_5050((uint64_t)v28);
        }

        (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
      }

      else
      {
        uint64_t v38 = v49;
        uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(v22, v17, v18);
        uint64_t v40 = Logger.wellness.unsafeMutableAddressor(v39);
        sub_A5DC(v40, (uint64_t)v53);
        uint64_t v41 = sub_89D50((uint64_t)v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
        Logger.logObject.getter(v41);
        os_log_type_t v42 = sub_AB70();
        if (sub_232DC(v42))
        {
          uint64_t v43 = (_WORD *)sub_A5E8(2LL);
          *uint64_t v43 = 0;
          sub_41964(&dword_0, v44, v45, "LogHealthKitQuantityFlow: Registering corrections flow");
          sub_5050((uint64_t)v43);
        }

        (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
        sub_500C((void *)(v50 + 272), *(void *)(v50 + 296));
        sub_AA300(v22, v51, v48, (uint64_t *)&v54);
        uint64_t v46 = v58;
        uint64_t v47 = v59;
        sub_500C(v57, v58);
        dispatch thunk of SiriCorrectionsClient.register(flow:)(&v54, v46, v47);
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(&v54);
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v22, v18);
      }

      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v57);
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v56 = 0LL;
    __int128 v54 = 0u;
    __int128 v55 = 0u;
  }

  sub_F1270((uint64_t)&v54, &qword_18AE50);
  uint64_t v32 = Logger.wellness.unsafeMutableAddressor(v31);
  sub_A5DC(v32, (uint64_t)v57);
  uint64_t v33 = sub_89D50((uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
  Logger.logObject.getter(v33);
  os_log_type_t v34 = sub_A898();
  if (sub_232DC(v34))
  {
    uint64_t v35 = (_WORD *)sub_A5E8(2LL);
    *uint64_t v35 = 0;
    sub_41964( &dword_0,  v36,  v37,  "LogHealthKitQuantityFlow: No corrections client available. Continuing without registering corrections flow.");
    sub_5050((uint64_t)v35);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
LABEL_15:
  sub_D8FC();
}

void *LogHealthKitQuantityFlow.deinit()
{
  return v0;
}

uint64_t LogHealthKitQuantityFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 337LL, 7LL);
}

BOOL sub_109BB4(uint64_t a1)
{
  return LogHealthKitQuantityFlow.on(input:)(a1);
}

uint64_t sub_109BD8(uint64_t a1, uint64_t a2)
{
  return LogHealthKitQuantityFlow.execute(completion:)(a1, a2);
}

uint64_t sub_109BF8(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18FED4);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_A108;
  return LogHealthKitQuantityFlow.execute()(a1);
}

uint64_t sub_109C4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for LogHealthKitQuantityFlow();
  return Flow<>.exitValue.getter(v3, a2);
}

void sub_109C70(void (*a1)(void))
{
}

uint64_t sub_109C8C(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  return _typeName(_:qualified:)(v1, 0LL);
}

uint64_t type metadata accessor for LogHealthKitQuantityFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC18WellnessFlowPlugin24LogHealthKitQuantityFlow);
}

uint64_t sub_109CD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return result;
}

unint64_t destroy for LogHealthKitQuantityFlow.State(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 16);
  int v2 = -1;
  if (result < 0xFFFFFFFF) {
    int v2 = result;
  }
  if (v2 - 1 < 0) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

void _s18WellnessFlowPlugin24LogHealthKitQuantityFlowC5StateOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 16);
  LODWORD(sub_56254(v2[492], v4) = -1;
  if (v3 < 0xFFFFFFFF) {
    uint64_t v4 = *(void *)(a2 + 16);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if ((int)v4 - 1 < 0)
  {
    *(void *)(a1 + 16) = v3;
    swift_bridgeObjectRetain(v3);
  }

  else
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
  }

  sub_A890();
}

void *assignWithCopy for LogHealthKitQuantityFlow.State(void *a1, void *a2)
{
  unint64_t v4 = a1[2];
  LODWORD(sub_A5DC((uint64_t)v0, v5) = -1;
  if (v4 >= 0xFFFFFFFF) {
    LODWORD(v6) = -1;
  }
  else {
    uint64_t v6 = a1[2];
  }
  int v7 = v6 - 1;
  if (a2[2] < 0xFFFFFFFFuLL) {
    uint64_t v5 = a2[2];
  }
  int v8 = v5 - 1;
  if (v7 < 0)
  {
    if (v8 < 0)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      uint64_t v12 = a2[2];
      a1[2] = v12;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRelease(v4);
      return a1;
    }

    swift_bridgeObjectRelease(a1[2]);
    goto LABEL_11;
  }

  if ((v8 & 0x80000000) == 0)
  {
LABEL_11:
    __int128 v10 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v10;
    return a1;
  }

  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v9 = a2[2];
  a1[2] = v9;
  swift_bridgeObjectRetain(v9);
  return a1;
}

__n128 initializeWithTake for LogHealthKitQuantityFlow.State(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for LogHealthKitQuantityFlow.State(void *a1, void *a2)
{
  unint64_t v4 = a1[2];
  int v5 = -1;
  if (v4 < 0xFFFFFFFF) {
    int v5 = v4;
  }
  if (v5 - 1 < 0)
  {
    unint64_t v6 = a2[2];
    LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = -1;
    if (v6 < 0xFFFFFFFF) {
      uint64_t v7 = a2[2];
    }
    if ((int)v7 - 1 < 0)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = v6;
      swift_bridgeObjectRelease(v4);
      return a1;
    }

    swift_bridgeObjectRelease(v4);
  }

  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for LogHealthKitQuantityFlow.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 > 0x7FFFFFFA && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 2147483643);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(sub_56254(*(void *)(v2 + 1040), v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  unsigned int v5 = v4 + 1;
  unsigned int v6 = v4 - 3;
  if (v5 >= 5) {
    return v6;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for LogHealthKitQuantityFlow.State( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(void *)__n128 result = 0LL;
    *(void *)(result + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_DWORD *)__n128 result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFB) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2 + 4;
    }
  }

  return result;
}

uint64_t sub_109F70(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(sub_35A68(v0, 255LL, v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

void *sub_109F94(void *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    result[1] = 0LL;
    result[2] = 0LL;
    *__n128 result = a2 - 0x7FFFFFFF;
  }

  else if (a2)
  {
    result[2] = a2;
  }

  return result;
}

ValueMetadata *type metadata accessor for LogHealthKitQuantityFlow.State()
{
  return &type metadata for LogHealthKitQuantityFlow.State;
}

uint64_t sub_109FD4()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_109FF8(uint64_t a1)
{
  int v4 = (void *)swift_task_alloc(dword_19004C);
  *(void *)(v2 + 16) = v4;
  *int v4 = v2;
  v4[1] = sub_7564C;
  return sub_34F70(a1, v1 + 16);
}

uint64_t sub_10A050()
{
  return swift_task_dealloc(*(void *)(v0 + 1752));
}

uint64_t sub_10A07C()
{
  return swift_task_dealloc(*(void *)(v0 + 1752));
}

uint64_t sub_10A0A8()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1LL, v0);
}

uint64_t sub_10A0DC()
{
  return swift_task_dealloc(*(void *)(v0 + 744));
}

  ;
}

uint64_t sub_10A118()
{
  return swift_task_dealloc(*(void *)(v0 + 800));
}

uint64_t sub_10A12C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v0, v1);
}

uint64_t sub_10A140()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1LL, 1LL, v0);
}

uint64_t sub_10A154(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_10A15C()
{
  return static ExecuteResponse.complete<A>(next:)(v0);
}

uint64_t sub_10A164()
{
  return *(unsigned __int8 *)(*(void *)(v0 + 752) + 336LL);
}

void sub_10A17C()
{
  *(void *)(v1 - _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *v0;
}

uint64_t sub_10A18C(uint64_t a1, unint64_t a2)
{
  return sub_39178(a1, a2, (uint64_t *)(v2 - 136));
}

uint64_t sub_10A194( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  return sub_39178(a1, a2, (uint64_t *)va);
}

uint64_t sub_10A1A0(uint64_t a1)
{
  *(void *)(v1 - 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a1;
  return v1 - 152;
}

uint64_t sub_10A1B4()
{
  return v2(v0, v1);
}

uint64_t sub_10A1C0(uint64_t a1)
{
  return swift_retain_n(a1, 2LL);
}

  ;
}

uint64_t sub_10A1DC()
{
  return Calendar.isDateInToday(_:)(v0);
}

uint64_t sub_10A1E8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_10A1F4(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v2, a2);
}

uint64_t sub_10A1FC(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 1608);
}

void sub_10A210()
{
}

uint64_t sub_10A21C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 200))(a1, a2, v2);
}

void sub_10A228(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    Swift::String v2 = String.lowercased()();
    BOOL v3 = v2._countAndFlagsBits == 1667720548 && v2._object == (void *)0xE400000000000000LL;
    if (v3
      || (sub_10A528(1667720548LL, 0xE400000000000000LL) & 1) != 0
      || (v2._countAndFlagsBits == 6533314 ? (BOOL v4 = v2._object == (void *)0xA300000000000000LL) : (BOOL v4 = 0),
          v4
       || (sub_10A528(6533314LL, 0xA300000000000000LL) & 1) != 0
       || (v2._countAndFlagsBits == 1718052196 ? (BOOL v5 = v2._object == (void *)0xE400000000000000LL) : (BOOL v5 = 0),
           v5
        || (sub_10A528(1718052196LL, 0xE400000000000000LL) & 1) != 0
        || (v2._countAndFlagsBits == 6729922 ? (BOOL v6 = v2._object == (void *)0xA300000000000000LL) : (BOOL v6 = 0),
            v6
         || (sub_10A528(6729922LL, 0xA300000000000000LL) & 1) != 0
         || (v2._countAndFlagsBits == 107 ? (BOOL v7 = v2._object == (void *)0xE100000000000000LL) : (BOOL v7 = 0),
             v7 || (sub_10A528(107LL, 0xE100000000000000LL) & 1) != 0)))))
    {
      swift_bridgeObjectRelease();
    }
  }

  sub_1EB0C();
}

void sub_10A39C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    BOOL v4 = a1 == 29798 && a2 == 0xE200000000000000LL;
    if (!v4 && (sub_10A514(29798LL) & 1) == 0)
    {
      BOOL v5 = a1 == 28265 && a2 == 0xE200000000000000LL;
      if (!v5 && (sub_10A514(28265LL) & 1) == 0)
      {
        BOOL v6 = a1 == 25721 && a2 == 0xE200000000000000LL;
        if (!v6 && (sub_10A514(25721LL) & 1) == 0)
        {
          BOOL v7 = a1 == 26989 && a2 == 0xE200000000000000LL;
          if (!v7 && (sub_10A514(26989LL) & 1) == 0)
          {
            BOOL v8 = a1 == 109 && a2 == 0xE100000000000000LL;
            if (!v8 && (_stringCompareWithSmolCheck(_:_:expecting:)(109LL, 0xE100000000000000LL, a1, a2, 0LL) & 1) == 0)
            {
              BOOL v9 = a1 == 28003 && a2 == 0xE200000000000000LL;
              if (!v9 && (sub_10A514(28003LL) & 1) == 0) {
                swift_bridgeObjectRetain(a2);
              }
            }
          }
        }
      }
    }
  }

  sub_1EB0C();
}

uint64_t sub_10A514(uint64_t a1)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, 0xE200000000000000LL, v1, v2, 0LL);
}

uint64_t sub_10A528(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v2, v3, 0LL);
}

uint64_t initializeWithCopy for DateTimeInferenceUtils(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

void *assignWithCopy for DateTimeInferenceUtils(void *a1, void *a2)
{
  return a1;
}

__n128 initializeWithTake for DateTimeInferenceUtils(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DateTimeInferenceUtils(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for DateTimeInferenceUtils(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DateTimeInferenceUtils(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DateTimeInferenceUtils()
{
  return &type metadata for DateTimeInferenceUtils;
}

uint64_t sub_10A67C()
{
  uint64_t v159 = v1;
  uint64_t v160 = v2;
  uint64_t v3 = v0;
  uint64_t v149 = v4;
  int v140 = v5;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  sub_494C(&qword_190080);
  sub_D978();
  __chkstk_darwin(v10);
  sub_3751C();
  sub_1C65C();
  __chkstk_darwin(v11);
  sub_D9EC();
  uint64_t v13 = sub_41A8C(v12);
  uint64_t v14 = type metadata accessor for DateTimeResolutionSpec.DateTimeConvergenceStrategy(v13);
  sub_1C66C(v14, (uint64_t)&v158);
  uint64_t v139 = v15;
  sub_D978();
  __chkstk_darwin(v16);
  sub_6D30();
  sub_1C680(v17);
  sub_494C(&qword_189BA0);
  sub_D978();
  __chkstk_darwin(v18);
  sub_3751C();
  sub_1C65C();
  __chkstk_darwin(v19);
  sub_D9EC();
  uint64_t v21 = sub_41A8C(v20);
  uint64_t v22 = type metadata accessor for Date(v21);
  uint64_t v135 = *(void *)(v22 - 8);
  sub_D978();
  __chkstk_darwin(v23);
  sub_3751C();
  uint64_t v144 = v24;
  sub_A794();
  __chkstk_darwin(v25);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v127 - v27;
  uint64_t v29 = type metadata accessor for Logger(0LL);
  uint64_t v30 = *(void **)(v29 - 8);
  __chkstk_darwin(v29);
  sub_3751C();
  sub_1C65C();
  __chkstk_darwin(v31);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v32);
  sub_1C6B8();
  uint64_t v145 = v33;
  sub_A794();
  uint64_t v35 = __chkstk_darwin(v34);
  uint64_t v37 = (char *)&v127 - v36;
  uint64_t v38 = Logger.wellness.unsafeMutableAddressor(v35);
  sub_A5DC(v38, (uint64_t)&v155);
  uint64_t v39 = (void (*)(void, void, void))v30[2];
  uint64_t v146 = v38;
  uint64_t v148 = v39;
  v39(v37, v38, v29);
  uint64_t v150 = v7;
  uint64_t v40 = sub_10A1C0(v7);
  uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
  os_log_type_t v42 = static os_log_type_t.debug.getter();
  BOOL v43 = os_log_type_enabled(v41, v42);
  uint64_t v142 = v3;
  uint64_t v143 = v9;
  uint64_t v141 = v28;
  if (v43)
  {
    uint64_t v44 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v45 = sub_A5E8(32LL);
    v154[0] = v45;
    *(_DWORD *)uint64_t v44 = 136315138;
    uint64_t v129 = v22;
    uint64_t v128 = v44 + 4;
    uint64_t v46 = v150;
    uint64_t v152 = v150;
    uint64_t v47 = sub_10EFE8();
    uint64_t v147 = v30;
    uint64_t v48 = v47;
    sub_A410( &qword_18B140,  (uint64_t (*)(uint64_t))&type metadata accessor for DateTime,  (uint64_t)&protocol conformance descriptor for DateTime);
    uint64_t v50 = v49;
    uint64_t v51 = v48;
    uint64_t v52 = v46;
    uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter(v51, v50);
    uint64_t v152 = sub_39178(v53, v54, v154);
    uint64_t v22 = v129;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &v153, v128, v44 + 12);
    sub_41AD0(v52);
    sub_249D4();
    sub_DA24(&dword_0, v41, v42, "given date before conversion: %s", v44);
    sub_A81C(v45);
    sub_5050(v45);
    uint64_t v55 = (uint64_t)v44;
    uint64_t v28 = v141;
    sub_5050(v55);

    uint64_t v56 = (void *)v147[1];
  }

  else
  {

    sub_41AD0(v150);
    uint64_t v56 = (void *)v30[1];
  }

  uint64_t v147 = v56;
  ((void (*)(char *, uint64_t))v56)(v37, v29);
  uint64_t v58 = v145;
  uint64_t v57 = v146;
  uint64_t v59 = v144;
  uint64_t v60 = v135;
  uint64_t v61 = v134;
  uint64_t v62 = v149;
  sub_10AE64();
  sub_A5DC(v57, (uint64_t)v154);
  sub_10ED0C(v58);
  os_log_type_t v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16);
  v63(v61, v62, v22);
  uint64_t v64 = ((uint64_t (*)(void (*)(uint64_t, uint64_t), char *, uint64_t))v63)(v59, v28, v22);
  Logger.logObject.getter(v64);
  os_log_type_t v65 = sub_4662C();
  if (sub_41C30(v65))
  {
    uint64_t v66 = sub_A5E8(22LL);
    uint64_t v134 = sub_A5E8(64LL);
    uint64_t v152 = v134;
    *(_DWORD *)uint64_t v66 = 136315394;
    sub_A410( &qword_1900B0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v68 = v67;
    LODWORD(v129) = v58;
    uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter(v22, v67);
    uint64_t v151 = sub_10F1AC(v69, v70);
    uint64_t v135 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v66 + 4, v66 + 12);
    sub_249D4();
    uint64_t v71 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
    v71(v61, v22);
    *(_WORD *)(v66 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2080;
    uint64_t v72 = v144;
    uint64_t v73 = v68;
    uint64_t v28 = v141;
    uint64_t v74 = dispatch thunk of CustomStringConvertible.description.getter(v22, v73);
    uint64_t v151 = sub_10F1AC(v74, v75);
    uint64_t v57 = v146;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v66 + 14, v66 + 22);
    sub_249D4();
    uint64_t v144 = v71;
    v71((uint64_t)v72, v22);
    _os_log_impl(&dword_0, (os_log_t)v63, (os_log_type_t)v129, "now date: %s , given date: %s", (uint8_t *)v66, 0x16u);
    uint64_t v76 = v134;
    sub_DA04(v134);
    sub_5050(v76);
    sub_5050(v66);

    uint64_t v77 = v145;
  }

  else
  {
    uint64_t v78 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
    v78(v61, v22);
    uint64_t v144 = v78;
    v78((uint64_t)v59, v22);

    uint64_t v77 = v58;
  }

  sub_10EF08(v77);
  uint64_t v79 = v143;
  if ((((uint64_t (*)(uint64_t, char *))static Date.> infix(_:_:))(v149, v28) & 1) != 0)
  {
    sub_A5DC(v57, (uint64_t)&v152);
    uint64_t v80 = v130;
    uint64_t v81 = sub_10ED0C(v130);
    Logger.logObject.getter(v81);
    os_log_type_t v82 = sub_4662C();
    if (sub_41C30(v82))
    {
      uint64_t v83 = (_WORD *)sub_A5E8(2LL);
      sub_366C0(v83);
      sub_10EB24(&dword_0, v84, v85, "using .past strategy");
      sub_5050(v57);
    }

    uint64_t v86 = sub_10EF08(v80);
    uint64_t v87 = sub_10EBFC(v86, enum case for DateTimeResolutionSpec.DateTimeConvergenceStrategy.past(_:));
    sub_10EE10( v87,  v140 & 1,  v88,  v89,  v90,  v91,  v92,  v93,  v127,  (uint64_t)v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v136,  v137,  v138);
    uint64_t v94 = sub_10F070();
    if (DateTime.occurringIn.getter(v94))
    {
      uint64_t v95 = v132;
      sub_10F1A4();
      sub_3652C();
      uint64_t v96 = sub_10EE08();
      uint64_t v97 = sub_A614(v95, 1LL, v96);
      if (!v98)
      {
        sub_10EC64(v97, &qword_190080);
        sub_10EBEC();
        uint64_t v99 = &v156;
LABEL_18:
        sub_F83C4(*(v99 - 32), v79);
        return 0LL;
      }
    }

    else
    {
      uint64_t v118 = type metadata accessor for DateTime.DateTimeRange.DefinedDateTimeRange(0LL);
      uint64_t v97 = sub_6D78(v132, v119, v120, v118);
    }

    sub_10EC64(v97, &qword_190080);
    uint64_t v121 = sub_10F0A8(v79);
    sub_10EC64(v121, &qword_189BA0);
    sub_10EBEC();
    return 0LL;
  }

  sub_A5DC(v57, (uint64_t)&v152);
  uint64_t v100 = v131;
  uint64_t v101 = sub_10ED0C(v131);
  Logger.logObject.getter(v101);
  os_log_type_t v102 = sub_4662C();
  if (sub_41C30(v102))
  {
    uint64_t v103 = (_WORD *)sub_A5E8(2LL);
    sub_366C0(v103);
    sub_10EB24(&dword_0, v104, v105, "using .future strategy");
    sub_5050(v57);
  }

  uint64_t v106 = sub_10EF08(v100);
  uint64_t v107 = sub_10EBFC(v106, enum case for DateTimeResolutionSpec.DateTimeConvergenceStrategy.future(_:));
  sub_10EE10( v107,  v140 & 1,  v108,  v109,  v110,  v111,  v112,  v113,  v127,  (uint64_t)v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v136,  v137,  v138);
  uint64_t v114 = sub_10F070();
  if (DateTime.occurringIn.getter(v114))
  {
    uint64_t v115 = v133;
    sub_10F1A4();
    sub_3652C();
    uint64_t v116 = sub_10EE08();
    uint64_t v117 = sub_A614(v115, 1LL, v116);
    if (!v98)
    {
      sub_10EC64(v117, &qword_190080);
      sub_10EBEC();
      uint64_t v99 = &v157;
      goto LABEL_18;
    }
  }

  else
  {
    uint64_t v123 = type metadata accessor for DateTime.DateTimeRange.DefinedDateTimeRange(0LL);
    uint64_t v117 = sub_6D78(v133, v124, v125, v123);
  }

  sub_10EC64(v117, &qword_190080);
  uint64_t v126 = sub_10F0A8(v79);
  sub_10EC64(v126, &qword_189BA0);
  sub_10EBEC();
  return 1LL;
}

void sub_10AE64()
{
  uint64_t v107 = v2;
  uint64_t v113 = v3;
  uint64_t v102 = v4;
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v110 = *(void *)(v5 - 8);
  uint64_t v111 = v5;
  sub_D978();
  __chkstk_darwin(v6);
  sub_6D30();
  uint64_t v109 = v7;
  uint64_t v8 = sub_10EEE4();
  uint64_t v104 = *(void *)(v8 - 8);
  sub_D978();
  __chkstk_darwin(v9);
  sub_3751C();
  uint64_t v103 = v10;
  sub_A794();
  __chkstk_darwin(v11);
  sub_D9EC();
  uint64_t v105 = v12;
  sub_494C(&qword_189CE8);
  sub_D978();
  __chkstk_darwin(v13);
  sub_6D30();
  uint64_t v106 = v14;
  uint64_t v15 = type metadata accessor for DateTime.Time.Meridiem(0LL);
  uint64_t v112 = *(void *)(v15 - 8);
  sub_D978();
  __chkstk_darwin(v16);
  uint64_t v96 = (char *)&v96 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v98 = sub_494C(&qword_190098);
  sub_D978();
  __chkstk_darwin(v18);
  sub_6D44();
  uint64_t v21 = v20 - v19;
  sub_494C(&qword_1900A0);
  sub_D978();
  __chkstk_darwin(v22);
  uint64_t v97 = (uint64_t)&v96 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_A794();
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v96 - v26;
  __chkstk_darwin(v25);
  uint64_t v99 = (uint64_t)&v96 - v28;
  sub_494C(&qword_190080);
  sub_D978();
  __chkstk_darwin(v29);
  sub_AA58();
  uint64_t v32 = v30 - v31;
  __chkstk_darwin(v33);
  uint64_t v35 = (char *)&v96 - v34;
  sub_494C(&qword_18CED0);
  sub_D978();
  __chkstk_darwin(v36);
  sub_6D44();
  uint64_t v39 = v38 - v37;
  sub_494C(&qword_18CED8);
  sub_D978();
  __chkstk_darwin(v40);
  uint64_t v41 = sub_10EF14();
  uint64_t v42 = type metadata accessor for DateComponents(v41);
  uint64_t v100 = *(void *)(v42 - 8);
  uint64_t v101 = v42;
  sub_D978();
  __chkstk_darwin(v43);
  sub_10F018();
  sub_41C80();
  uint64_t v108 = v8;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v44, v45, v46, v8);
  uint64_t v47 = type metadata accessor for TimeZone(0LL);
  sub_6D78(v39, v48, v49, v47);
  uint64_t v50 = DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( v1,  v39,  0LL,  1LL,  0LL,  1LL,  0LL,  1LL);
  if (!DateTime.occurringIn.getter(v50))
  {
    uint64_t v57 = type metadata accessor for DateTime.DateTimeRange.DefinedDateTimeRange(0LL);
    sub_6D78((uint64_t)v35, v58, v59, v57);
    uint64_t v52 = v112;
    goto LABEL_6;
  }

  sub_10F1A4();
  sub_3652C();
  uint64_t v51 = sub_10EE08();
  sub_A614((uint64_t)v35, 1LL, v51);
  uint64_t v52 = v112;
  if (v68)
  {
LABEL_6:
    if (!sub_10F080() || (uint64_t v60 = DateTime.Time.hour.getter(), v62 = v61, sub_3652C(), (v62 & 1) != 0))
    {
      uint64_t v112 = 0LL;
    }

    else
    {
      if (v60 == 12) {
        uint64_t v63 = 0LL;
      }
      else {
        uint64_t v63 = v60;
      }
      uint64_t v112 = v63;
    }

    uint64_t v64 = sub_10F080();
    uint64_t v65 = v99;
    if (v64)
    {
      DateTime.Time.meridiem.getter();
      sub_3652C();
    }

    else
    {
      sub_41A40(v99, 1LL);
    }

    (*(void (**)(char *, void, uint64_t))(v52 + 104))(v27, enum case for DateTime.Time.Meridiem.pm(_:), v15);
    sub_41A40((uint64_t)v27, 0LL);
    uint64_t v66 = v21 + *(int *)(v98 + 48);
    sub_41850(v65, v21, &qword_1900A0);
    sub_41850((uint64_t)v27, v66, &qword_1900A0);
    sub_A614(v21, 1LL, v15);
    if (v68)
    {
      sub_A9F0((uint64_t)v27);
      sub_A9F0(v65);
      sub_A614(v66, 1LL, v15);
      if (v68)
      {
        sub_A4A4(v21, &qword_1900A0);
LABEL_26:
        uint64_t v56 = v112 + 12;
        if (!__OFADD__(v112, 12LL)) {
          goto LABEL_30;
        }
        __break(1u);
        goto LABEL_29;
      }
    }

    else
    {
      uint64_t v67 = v97;
      sub_41850(v21, v97, &qword_1900A0);
      sub_A614(v66, 1LL, v15);
      if (!v68)
      {
        uint64_t v71 = v67;
        uint64_t v72 = v96;
        (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v96, v66, v15);
        sub_A410( &qword_1900A8,  (uint64_t (*)(uint64_t))&type metadata accessor for DateTime.Time.Meridiem,  (uint64_t)&protocol conformance descriptor for DateTime.Time.Meridiem);
        char v74 = dispatch thunk of static Equatable.== infix(_:_:)(v71, v72, v15, v73);
        unint64_t v75 = *(void (**)(char *, uint64_t))(v52 + 8);
        v75(v72, v15);
        sub_A9F0((uint64_t)v27);
        sub_A9F0(v99);
        v75((char *)v71, v15);
        sub_A9F0(v21);
        if ((v74 & 1) != 0) {
          goto LABEL_26;
        }
LABEL_29:
        uint64_t v56 = v112;
        goto LABEL_30;
      }

      sub_A4A4((uint64_t)v27, &qword_1900A0);
      uint64_t v69 = sub_10F11C();
      sub_A4A4(v69, v70);
      sub_24A50(v67, *(uint64_t (**)(uint64_t, uint64_t))(v52 + 8));
    }

    sub_A4A4(v21, &qword_190098);
    goto LABEL_29;
  }

  sub_41850((uint64_t)v35, v32, &qword_190080);
  uint64_t v53 = sub_10F11C();
  uint64_t v55 = v54(v53);
  if ((_DWORD)v55 != enum case for DateTime.DateTimeRange.DefinedDateTimeRange.afternoon(_:))
  {
    if ((_DWORD)v55 == enum case for DateTime.DateTimeRange.DefinedDateTimeRange.evening(_:)) {
      goto LABEL_40;
    }
    if ((_DWORD)v55 == enum case for DateTime.DateTimeRange.DefinedDateTimeRange.morning(_:))
    {
      uint64_t v56 = 0LL;
      goto LABEL_30;
    }

    if ((_DWORD)v55 == enum case for DateTime.DateTimeRange.DefinedDateTimeRange.night(_:))
    {
LABEL_40:
      sub_10EC64(v55, &qword_190080);
      sub_10F198(17LL);
      goto LABEL_31;
    }

    uint64_t v94 = sub_10F11C();
    v95(v94);
    goto LABEL_6;
  }

  uint64_t v56 = 12LL;
LABEL_30:
  uint64_t v76 = sub_10F198(v56);
  sub_10EC64(v76, &qword_190080);
LABEL_31:
  uint64_t v77 = sub_10F080();
  uint64_t v78 = v106;
  if (!v77 || (uint64_t v79 = DateTime.Time.minute.getter(), v81 = v80, sub_3652C(), (v81 & 1) != 0)) {
    uint64_t v79 = 0LL;
  }
  DateComponents.minute.setter(v79, 0LL);
  if (!sub_10F080() || (uint64_t v82 = DateTime.Time.second.getter(), v84 = v83, sub_3652C(), (v84 & 1) != 0)) {
    uint64_t v82 = 0LL;
  }
  uint64_t v85 = DateComponents.second.setter(v82, 0LL);
  uint64_t v86 = v105;
  uint64_t v87 = static Calendar.current.getter(v85);
  uint64_t v88 = v103;
  static Calendar.current.getter(v87);
  uint64_t v89 = v109;
  Calendar.startOfDay(for:)(v107);
  uint64_t v90 = *(void (**)(uint64_t, uint64_t))(v104 + 8);
  uint64_t v91 = v108;
  v90(v88, v108);
  Calendar.date(byAdding:to:wrappingComponents:)(v0, v89, 0LL);
  uint64_t v93 = v110;
  uint64_t v92 = v111;
  (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v89, v111);
  v90(v86, v91);
  sub_A614(v78, 1LL, v92);
  if (v68)
  {
    __break(1u);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v0, v101);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 32))(v102, v78, v92);
    sub_D8FC();
  }

uint64_t sub_10B5B8()
{
  uint64_t v54 = v0;
  uint64_t v55 = v1;
  sub_494C(&qword_190078);
  sub_D978();
  __chkstk_darwin(v2);
  sub_6D30();
  uint64_t v52 = v3;
  sub_494C(&qword_190080);
  sub_D978();
  __chkstk_darwin(v4);
  sub_6D44();
  uint64_t v7 = v6 - v5;
  sub_494C(&qword_190088);
  sub_D978();
  __chkstk_darwin(v8);
  sub_6D30();
  uint64_t v51 = v9;
  sub_494C(&qword_190090);
  sub_D978();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_494C(&qword_189B90);
  sub_D978();
  __chkstk_darwin(v13);
  sub_6D44();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = type metadata accessor for UsoEntity_common_ListPosition.DefinedValues(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  sub_AA58();
  uint64_t v21 = v19 - v20;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v50 - v23;
  uint64_t v53 = ((uint64_t (*)(void))UsoEntity_common_DateTime.toDateTime(recurrencePattern:))(0LL);
  if (!dispatch thunk of UsoEntity_common_DateTime.date.getter()
    || (uint64_t v25 = ((uint64_t (*)(void))dispatch thunk of UsoEntity_common_Date.monthOfYear.getter)(), sub_3652C(), !v25))
  {
    if (!dispatch thunk of UsoEntity_common_DateTime.date.getter()) {
      return v53;
    }
    uint64_t v26 = ((uint64_t (*)(void))dispatch thunk of UsoEntity_common_Date.year.getter)();
    sub_3652C();
    if (!v26) {
      return v53;
    }
    uint64_t v27 = swift_retain();
    uint64_t v28 = ((uint64_t (*)(uint64_t))dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter)(v27);
    uint64_t v29 = sub_A37E4();
    if (v28)
    {
      ((void (*)(uint64_t))dispatch thunk of UsoEntity_common_ListPosition.definedValue.getter)(v29);
      sub_3652C();
      sub_A614(v16, 1LL, v17);
      if (!v30)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v24, v16, v17);
        (*(void (**)(uint64_t, void, uint64_t))(v18 + 104))( v21,  enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Last(_:),  v17);
        char v31 = sub_584D0((uint64_t)v24, v21);
        sub_10F0D4(v21);
        if ((v31 & 1) != 0)
        {
          uint64_t v32 = ((uint64_t (*)(void))type metadata accessor for DateTime.DefinedDateTime)(0LL);
          sub_6D78((uint64_t)v12, v33, v34, v32);
          uint64_t v35 = ((uint64_t (*)(void))type metadata accessor for DateTime.TemporalIntent)(0LL);
          uint64_t v36 = v51;
          sub_6D78(v51, v37, v38, v35);
          uint64_t v39 = sub_10EE08();
          sub_10F0C8(v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 104LL));
          sub_72A94(v7);
          uint64_t v40 = ((uint64_t (*)(void))type metadata accessor for DateTime.Qualifier)(0LL);
          uint64_t v41 = v52;
          sub_10F0C8(v52, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 104LL));
          sub_72A94(v41);
          uint64_t v42 = type metadata accessor for DateTime.DateTimeRange(0LL);
          sub_A72C(v42);
          uint64_t v43 = ((uint64_t (*)(void, void, void, void, void, uint64_t, uint64_t))DateTime.DateTimeRange.init(at:start:end:duration:interval:definedValue:qualifier:))( 0LL,  0LL,  0LL,  0LL,  0LL,  v7,  v41);
          uint64_t v44 = sub_10EFE8();
          sub_A72C(v44);
          uint64_t v45 = ((uint64_t (*)(void, void, char *, void, uint64_t, uint64_t))DateTime.init(withDate:time:definedValue:recurrencePattern:temporalIntent:occurringIn:))( 0LL,  0LL,  v12,  0LL,  v36,  v43);
          sub_A37E4();
          swift_release();
          sub_10F0D4((uint64_t)v24);
          return v45;
        }

        sub_10F0D4((uint64_t)v24);
        goto LABEL_3;
      }
    }

    else
    {
      sub_41C80();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v47, v48, v49, v17);
    }

    sub_A37E4();
    sub_A4A4(v16, &qword_189B90);
    return v53;
  }

void sub_10B944( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v24;
  a20 = v25;
  uint64_t v194 = v26;
  int v193 = v27;
  uint64_t v196 = v28;
  uint64_t v181 = v29;
  uint64_t v169 = sub_494C(&qword_189BA0);
  sub_D978();
  __chkstk_darwin(v30);
  sub_3751C();
  sub_1C65C();
  __chkstk_darwin(v31);
  sub_D9EC();
  uint64_t v200 = sub_10EFF0(v32);
  uint64_t v195 = *(void *)(v200 - 8);
  sub_D978();
  __chkstk_darwin(v33);
  uint64_t v197 = (uint64_t (*)(uint64_t *, uint64_t))((char *)&v168 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_A794();
  __chkstk_darwin(v35);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v36);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v37);
  sub_1C65C();
  __chkstk_darwin(v38);
  sub_1C680((uint64_t)&v168 - v39);
  uint64_t v176 = sub_494C(&qword_190068);
  uint64_t v175 = *(uint64_t (***)(uint64_t *, uint64_t))(v176 - 8);
  sub_D978();
  __chkstk_darwin(v40);
  sub_3751C();
  sub_1C65C();
  __chkstk_darwin(v41);
  uint64_t v199 = (uint64_t)&v168 - v42;
  uint64_t v192 = sub_10EEF0();
  uint64_t v191 = *(void *)(v192 - 8);
  sub_D978();
  __chkstk_darwin(v43);
  sub_6D30();
  uint64_t v190 = v44;
  uint64_t v189 = type metadata accessor for DateTimeResolutionSpec.ExpandToType(0LL);
  uint64_t v188 = *(void *)(v189 - 8);
  sub_D978();
  __chkstk_darwin(v45);
  uint64_t v47 = sub_10ED2C(v46, v168);
  uint64_t v180 = type metadata accessor for DateTimeResolutionSpec(v47);
  uint64_t v179 = *(void *)(v180 - 8);
  sub_D978();
  __chkstk_darwin(v48);
  sub_6D30();
  uint64_t v198 = v49;
  sub_10EEFC();
  sub_D978();
  __chkstk_darwin(v50);
  sub_6D30();
  uint64_t v52 = sub_41A8C(v51);
  type metadata accessor for Calendar(v52);
  sub_D978();
  __chkstk_darwin(v53);
  sub_6D30();
  uint64_t v55 = sub_41A8C(v54);
  uint64_t v56 = type metadata accessor for DateTimeResolutionContext.Hemisphere(v55);
  sub_1C66C(v56, (uint64_t)&a11);
  uint64_t v183 = v57;
  sub_D978();
  __chkstk_darwin(v58);
  sub_10F018();
  type metadata accessor for TimeZone(0LL);
  sub_D978();
  __chkstk_darwin(v59);
  uint64_t v60 = sub_27A80();
  type metadata accessor for Locale(v60);
  sub_D978();
  __chkstk_darwin(v61);
  sub_AA58();
  uint64_t v64 = v62 - v63;
  uint64_t v66 = __chkstk_darwin(v65);
  char v68 = (char *)&v168 - v67;
  __chkstk_darwin(v66);
  unint64_t v70 = (char *)&v168 - v69;
  uint64_t v178 = type metadata accessor for DateTimeResolver(0LL);
  uint64_t v182 = *(void *)(v178 - 8);
  sub_D978();
  __chkstk_darwin(v71);
  sub_10ED50();
  uint64_t v73 = v20[3];
  uint64_t v72 = v20[4];
  sub_500C(v20, v73);
  dispatch thunk of DeviceState.siriLocale.getter(v73, v72);
  sub_500C(v20, v20[3]);
  sub_10F060();
  uint64_t v74 = v196;
  sub_500C(v20, v20[3]);
  uint64_t v75 = sub_10F060();
  static TimeZone.current.getter(v75);
  uint64_t v76 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v183 + 104))( v21,  enum case for DateTimeResolutionContext.Hemisphere.north(_:),  v184);
  uint64_t v77 = v185;
  uint64_t v78 = static Calendar.current.getter(v76);
  uint64_t v79 = v186;
  Date.init()(v78);
  uint64_t v80 = type metadata accessor for DateTimeResolutionContext(0LL);
  sub_A72C(v80);
  char v81 = v68;
  uint64_t v82 = v21;
  uint64_t v84 = v198;
  uint64_t v83 = v199;
  uint64_t v85 = DateTimeResolutionContext.init(with:regionFormat:regionAwareLanguage:timeZone:hemisphere:calendar:date:)( v70,  v81,  v64,  v23,  v82,  v77,  v79);
  uint64_t v86 = (unsigned int *)&enum case for DateTimeResolutionSpec.ExpandToType.range(_:);
  if ((v193 & 1) == 0) {
    uint64_t v86 = (unsigned int *)&enum case for DateTimeResolutionSpec.ExpandToType.pointInTime(_:);
  }
  uint64_t v87 = v187;
  (*(void (**)(uint64_t, void, uint64_t))(v188 + 104))(v187, *v86, v189);
  uint64_t v88 = v190;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v191 + 16))(v190, v194, v192);
  uint64_t v89 = sub_10EE08();
  uint64_t v90 = (os_log_s *)sub_10EFE8();
  sub_A410( &qword_190070,  (uint64_t (*)(uint64_t))&type metadata accessor for DateTime.DateTimeRange.DefinedDateTimeRange,  (uint64_t)&protocol conformance descriptor for DateTime.DateTimeRange.DefinedDateTimeRange);
  uint64_t v92 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v89, v90, v91);
  sub_10F0B8(v87, v88, v92);
  DateTimeResolver.makeRecommendation(value:context:spec:)(v74, v85, v84);
  uint64_t v93 = v174;
  uint64_t v94 = v195;
  uint64_t v95 = v175;
  uint64_t v96 = v177;
  uint64_t v97 = v176;
  ((void (*)(uint64_t *, uint64_t, uint64_t))v175[2])(v177, v83, v176);
  int v98 = v95[11](v96, v97);
  uint64_t v186 = v85;
  if (v98 == enum case for Recommendation.confident<A>(_:))
  {
    uint64_t v194 = v22;
    uint64_t v99 = v177;
    uint64_t v100 = v95[12](v177, v97);
    uint64_t v101 = *v99;
    uint64_t v102 = Logger.wellness.unsafeMutableAddressor(v100);
    sub_A5DC(v102, (uint64_t)v206);
    uint64_t v103 = *(uint64_t (**)(uint64_t *, uint64_t))(v94 + 16);
    uint64_t v104 = (uint64_t *)v171;
    uint64_t v197 = v103;
    ((void (*)(uint64_t, uint64_t, uint64_t))v103)(v171, v102, v200);
    uint64_t v105 = sub_10A1C0(v101);
    uint64_t v106 = v104;
    uint64_t v107 = (os_log_s *)Logger.logObject.getter(v105);
    os_log_type_t v108 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v107, v108))
    {
      uint64_t v84 = sub_A5E8(12LL);
      uint64_t v109 = sub_A5E8(32LL);
      v205[0] = v109;
      *(_DWORD *)uint64_t v84 = 136315138;
      uint64_t v202 = v101;
      sub_A410( &qword_18B140,  (uint64_t (*)(uint64_t))&type metadata accessor for DateTime,  (uint64_t)&protocol conformance descriptor for DateTime);
      uint64_t v106 = &v202;
      uint64_t v111 = dispatch thunk of CustomStringConvertible.description.getter(v90, v110);
      uint64_t v90 = (os_log_s *)v112;
      uint64_t v113 = sub_39178(v111, v112, v205);
      uint64_t v114 = sub_10EC6C(v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v114, v115, v116, v84 + 12);
      sub_41AD0(v101);
      swift_bridgeObjectRelease(v90);
      sub_DA24(&dword_0, v107, v108, "Recommendation: %s", (uint8_t *)v84);
      sub_A81C(v109);
      sub_5050(v109);
      sub_5050(v84);

      uint64_t v117 = v171;
    }

    else
    {

      sub_41AD0(v101);
      uint64_t v117 = (uint64_t)v104;
    }

    sub_10EF90(v117);
    sub_A5DC(v102, (uint64_t)v205);
    sub_10EDA8((uint64_t)&v203);
    uint64_t v132 = swift_retain();
    Logger.logObject.getter(v132);
    os_log_type_t v133 = sub_4662C();
    if (sub_10EF70(v133))
    {
      uint64_t v134 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v135 = (void *)sub_A5E8(8LL);
      *(_DWORD *)uint64_t v134 = 138412290;
      Class isa = sub_10F190().super.isa;
      uint64_t v137 = sub_10EFA8((uint64_t)isa);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v137, v138, v139, v134 + 12);
      *uint64_t v135 = isa;
      sub_367AC();
      sub_DA24(&dword_0, v90, (os_log_type_t)v84, "Recommended INDateComponentsRange: %@", v134);
      sub_494C(&qword_189CB8);
      sub_A81C((uint64_t)v135);
      sub_5050((uint64_t)v135);
      uint64_t v106 = v172;
      sub_5050((uint64_t)v134);
    }

    else
    {

      sub_367AC();
    }

    sub_10EF90((uint64_t)v106);
    sub_A5DC(v102, (uint64_t)&v202);
    sub_10EDA8((uint64_t)&v204);
    uint64_t v144 = sub_10A1C0(v101);
    Logger.logObject.getter(v144);
    os_log_type_t v145 = sub_4662C();
    if (sub_10F148(v145))
    {
      uint64_t v146 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v84 = sub_A5E8(32LL);
      uint64_t v201 = v84;
      *(_DWORD *)uint64_t v146 = 136315138;
      Class v147 = sub_10F190().super.isa;
      id v148 = -[objc_class dateInterval](v147, "dateInterval");

      if (v148)
      {
        uint64_t v149 = v168;
        static DateInterval._unconditionallyBridgeFromObjectiveC(_:)(v148);

        uint64_t v150 = 0LL;
        uint64_t v151 = v169;
      }

      else
      {
        uint64_t v150 = 1LL;
        uint64_t v151 = v169;
        uint64_t v149 = v168;
      }

      uint64_t v152 = sub_ABEC();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v149, v150, 1LL, v152);
      uint64_t v153 = String.init<A>(describing:)(v149, v151);
      unint64_t v155 = v154;
      uint64_t v156 = sub_39178(v153, v154, &v201);
      sub_10EDD8(v156, v157, v158, (uint64_t)(v146 + 12));
      sub_41AD0(v101);
      swift_bridgeObjectRelease(v155);
      sub_DA24(&dword_0, v90, v145, "Recommended dateInterval: %s", v146);
      sub_A81C(v84);
      sub_5050(v84);
      sub_5050((uint64_t)v146);

      sub_10EF90(v173);
    }

    else
    {

      sub_41AD0(v101);
      sub_10EF90((uint64_t)v106);
    }

    v159.super.Class isa = sub_10F190().super.isa;
    id v160 = -[objc_class dateInterval](v159.super.isa, "dateInterval");

    uint64_t v161 = v176;
    uint64_t v162 = v199;
    uint64_t v163 = v182;
    if (v160)
    {
      uint64_t v164 = v170;
      static DateInterval._unconditionallyBridgeFromObjectiveC(_:)(v160);
      sub_367AC();

      uint64_t v165 = 0LL;
      sub_10EE28();
    }

    else
    {
      sub_367AC();
      uint64_t v165 = 1LL;
      sub_10EE28();
      uint64_t v164 = v170;
    }

    uint64_t v166 = v178;
    sub_10EB1C((uint64_t)&a13);
    v175[1]((uint64_t *)v162, v161);
    sub_24A50(v198, *(uint64_t (**)(uint64_t, uint64_t))(v84 + 8));
    (*(void (**)(uint64_t, uint64_t))(v163 + 8))(v194, v166);
    uint64_t v167 = sub_ABEC();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v164, v165, 1LL, v167);
    sub_F83C4(v164, (uint64_t)v159.super.isa);
  }

  else
  {
    uint64_t v197 = v95[1];
    uint64_t v118 = v197(v177, v97);
    uint64_t v119 = (os_log_s *)Logger.wellness.unsafeMutableAddressor(v118);
    sub_A5DC((uint64_t)v119, (uint64_t)v206);
    (*(void (**)(uint64_t, os_log_s *, uint64_t))(v94 + 16))(v93, v119, v200);
    uint64_t v120 = v196;
    sub_10A1C0(v196);
    sub_A86C();
    os_log_type_t v121 = sub_3C790();
    if (sub_10F030(v121))
    {
      uint64_t v123 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v124 = sub_A5E8(32LL);
      v205[0] = v124;
      *(_DWORD *)uint64_t v123 = 136315138;
      uint64_t v194 = v22;
      uint64_t v125 = dispatch thunk of DateTime.description.getter();
      uint64_t v127 = sub_10EC38(v125, v126);
      sub_10ECD4(v127);
      sub_41AD0(v120);
      sub_249D4();
      sub_DA24(&dword_0, v119, (os_log_type_t)v85, "Not confident about the inferred DateTime: %s", v123);
      sub_A81C(v124);
      sub_5050(v124);
      sub_5050((uint64_t)v123);

      sub_10EB1C((uint64_t)&a13);
      (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v174, v200);
      sub_10F0DC(v199);
      uint64_t v128 = sub_10F098();
      sub_10EB08(v128, v129);
      uint64_t v130 = *(void (**)(uint64_t, uint64_t))(v182 + 8);
      uint64_t v131 = v194;
    }

    else
    {
      sub_41AD0(v120);

      sub_10EB1C((uint64_t)&a13);
      (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v93, v200);
      sub_10F0DC(v83);
      sub_10EB08(v84, *(uint64_t (**)(uint64_t, void))(v179 + 8));
      uint64_t v131 = sub_10F17C();
    }

    v130(v131, v178);
    uint64_t v140 = v181;
    uint64_t v141 = sub_ABEC();
    sub_6D78(v140, v142, v143, v141);
  }

  sub_D8FC();
}

void sub_10C63C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v24;
  a20 = v25;
  uint64_t v390 = v26;
  LODWORD(v389) = v27;
  uint64_t v396 = v28;
  v377[0] = v29;
  uint64_t v366 = sub_494C(&qword_189BA0);
  sub_D978();
  __chkstk_darwin(v30);
  sub_3751C();
  sub_1C65C();
  __chkstk_darwin(v31);
  sub_D9EC();
  uint64_t v33 = sub_41A8C(v32);
  uint64_t v391 = type metadata accessor for DateInterval(v33);
  uint64_t v358 = *(void *)(v391 - 8);
  sub_D978();
  __chkstk_darwin(v34);
  sub_3751C();
  sub_1C65C();
  __chkstk_darwin(v35);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v36);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v37);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v38);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v39);
  sub_D9EC();
  sub_1C680(v40);
  sub_494C(&qword_189CE8);
  sub_D978();
  __chkstk_darwin(v41);
  sub_3751C();
  sub_1C65C();
  __chkstk_darwin(v42);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v43);
  sub_D9EC();
  uint64_t v45 = sub_41A8C(v44);
  uint64_t v46 = type metadata accessor for DateTime.Time.Meridiem(v45);
  sub_1C66C(v46, (uint64_t)&v389);
  uint64_t v362 = v47;
  sub_D978();
  __chkstk_darwin(v48);
  sub_6D30();
  sub_1C680(v49);
  sub_494C(&qword_190080);
  sub_D978();
  __chkstk_darwin(v50);
  sub_3751C();
  sub_1C65C();
  __chkstk_darwin(v51);
  uint64_t v53 = sub_10EFF0((uint64_t)&v347 - v52);
  uint64_t v398 = *(void *)(v53 - 8);
  uint64_t v399 = v53;
  sub_D978();
  __chkstk_darwin(v54);
  sub_3751C();
  uint64_t v394 = v55;
  sub_A794();
  __chkstk_darwin(v56);
  sub_1C65C();
  __chkstk_darwin(v57);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v58);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v59);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v60);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v61);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v62);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v63);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v64);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v65);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v66);
  sub_D9EC();
  sub_1C680(v67);
  uint64_t v376 = sub_494C(&qword_190068);
  uint64_t v375 = *(void *)(v376 - 8);
  sub_D978();
  __chkstk_darwin(v68);
  sub_3751C();
  sub_1C65C();
  __chkstk_darwin(v69);
  sub_D9EC();
  uint64_t v397 = (uint64_t *)v70;
  uint64_t v388 = (os_log_s *)sub_10EEF0();
  uint64_t v387 = (os_log_s *)*((void *)v388 - 1);
  sub_D978();
  __chkstk_darwin(v71);
  uint64_t v73 = sub_10ED2C(v72, (uint64_t)v347);
  uint64_t v74 = type metadata accessor for DateTimeResolutionSpec.ExpandToType(v73);
  sub_1C66C(v74, (uint64_t)&a13);
  uint64_t v384 = v75;
  sub_D978();
  __chkstk_darwin(v76);
  sub_6D30();
  uint64_t v383 = v77;
  uint64_t v379 = type metadata accessor for DateTimeResolutionSpec(0LL);
  uint64_t v378 = *(void *)(v379 - 8);
  sub_D978();
  __chkstk_darwin(v78);
  uint64_t v395 = (char *)&v347 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v80 = sub_10EEFC();
  sub_1C66C(v80, (uint64_t)&v392);
  uint64_t v359 = v81;
  sub_D978();
  __chkstk_darwin(v82);
  sub_3751C();
  sub_1C65C();
  __chkstk_darwin(v83);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v84);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v85);
  sub_D9EC();
  uint64_t v392 = v86;
  uint64_t v87 = sub_10EEE4();
  sub_1C66C(v87, (uint64_t)&v394);
  uint64_t v361 = v88;
  sub_D978();
  __chkstk_darwin(v89);
  uint64_t v90 = sub_27A80();
  uint64_t v382 = type metadata accessor for DateTimeResolutionContext.Hemisphere(v90);
  uint64_t v381 = *(void *)(v382 - 8);
  sub_D978();
  __chkstk_darwin(v91);
  sub_6D30();
  uint64_t v93 = sub_41A8C(v92);
  uint64_t v94 = type metadata accessor for TimeZone(v93);
  sub_1C66C(v94, (uint64_t)&v393);
  uint64_t v360 = v95;
  sub_D978();
  __chkstk_darwin(v96);
  uint64_t v97 = sub_10EF14();
  type metadata accessor for Locale(v97);
  sub_D978();
  __chkstk_darwin(v98);
  sub_AA58();
  uint64_t v101 = v99 - v100;
  uint64_t v103 = __chkstk_darwin(v102);
  uint64_t v105 = (char *)&v347 - v104;
  __chkstk_darwin(v103);
  uint64_t v107 = (char *)&v347 - v106;
  uint64_t v108 = type metadata accessor for DateTimeResolver(0LL);
  sub_1C66C(v108, (uint64_t)&v406);
  uint64_t v393 = v109;
  sub_D978();
  __chkstk_darwin(v110);
  sub_10ED50();
  uint64_t v112 = v20[3];
  uint64_t v111 = v20[4];
  sub_500C(v20, v112);
  dispatch thunk of DeviceState.siriLocale.getter(v112, v111);
  sub_10F088();
  sub_10F050();
  sub_10F088();
  uint64_t v113 = sub_10F050();
  static TimeZone.current.getter(v113);
  uint64_t v114 = v396;
  uint64_t v115 = v380;
  uint64_t v116 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v381 + 104))( v380,  enum case for DateTimeResolutionContext.Hemisphere.north(_:),  v382);
  uint64_t v117 = static Calendar.current.getter(v116);
  uint64_t v118 = v392;
  Date.init()(v117);
  uint64_t v119 = type metadata accessor for DateTimeResolutionContext(0LL);
  sub_A72C(v119);
  uint64_t v120 = v107;
  uint64_t v121 = v21;
  uint64_t v381 = v22;
  uint64_t v122 = v115;
  uint64_t v123 = (uint64_t)v395;
  uint64_t v382 = v23;
  uint64_t v124 = DateTimeResolutionContext.init(with:regionFormat:regionAwareLanguage:timeZone:hemisphere:calendar:date:)( v120,  v105,  v101,  v22,  v122,  v23,  v118);
  uint64_t v125 = (unsigned int *)&enum case for DateTimeResolutionSpec.ExpandToType.range(_:);
  if ((v389 & 1) == 0) {
    uint64_t v125 = (unsigned int *)&enum case for DateTimeResolutionSpec.ExpandToType.pointInTime(_:);
  }
  uint64_t v126 = v383;
  (*(void (**)(uint64_t, void, uint64_t))(v384 + 104))(v383, *v125, v385);
  uint64_t v127 = (uint64_t)v386;
  (*((void (**)(uint64_t (*)(uint64_t, uint64_t), uint64_t, os_log_s *))v387 + 2))(v386, v390, v388);
  uint64_t v128 = sub_10EE08();
  uint64_t v129 = sub_10EFE8();
  uint64_t v130 = (uint64_t)v397;
  sub_A410( &qword_190070,  (uint64_t (*)(uint64_t))&type metadata accessor for DateTime.DateTimeRange.DefinedDateTimeRange,  (uint64_t)&protocol conformance descriptor for DateTime.DateTimeRange.DefinedDateTimeRange);
  uint64_t v132 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v128, v129, v131);
  sub_10F0B8(v126, v127, v132);
  DateTimeResolver.makeRecommendation(value:context:spec:)(v114, v124, v123);
  uint64_t v389 = v128;
  uint64_t v133 = v374;
  uint64_t v134 = v398;
  uint64_t v390 = v124;
  uint64_t v394 = v121;
  uint64_t v135 = v375;
  uint64_t v136 = v373;
  uint64_t v137 = v376;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v375 + 16))(v373, v130, v376);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v135 + 88))(v136, v137) != enum case for Recommendation.confident<A>(_:))
  {
    uint64_t v158 = *(uint64_t (**)(uint64_t *, uint64_t))(v135 + 8);
    uint64_t v159 = v158(v136, v137);
    id v160 = (os_log_s *)Logger.wellness.unsafeMutableAddressor(v159);
    sub_A5DC((uint64_t)v160, (uint64_t)&v405);
    uint64_t v161 = v372;
    uint64_t v162 = v399;
    (*(void (**)(uint64_t, os_log_s *, uint64_t))(v134 + 16))(v372, v160, v399);
    uint64_t v163 = v396;
    sub_10A1C0((uint64_t)v396);
    sub_A86C();
    os_log_type_t v164 = sub_3C790();
    if (sub_10F030(v164))
    {
      uint64_t v165 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v166 = sub_A5E8(32LL);
      v403[0] = v166;
      *(_DWORD *)uint64_t v165 = 136315138;
      uint64_t v167 = sub_10F1B8();
      uint64_t v169 = sub_10EC38(v167, v168);
      sub_10ECD4(v169);
      sub_41AD0((uint64_t)v163);
      sub_249D4();
      sub_DA24(&dword_0, v160, (os_log_type_t)v121, "Not confident about the inferred DateTime: %s", v165);
      sub_A81C(v166);
      sub_5050(v166);
      sub_5050((uint64_t)v165);

      sub_10EB10();
      (*(void (**)(uint64_t, uint64_t))(v398 + 8))(v372, v162);
      sub_10F140((uint64_t)v397, (uint64_t)&v404);
      uint64_t v170 = *(uint64_t (**)(uint64_t, void))(v378 + 8);
      uint64_t v171 = (uint64_t)v395;
    }

    else
    {
      sub_41AD0((uint64_t)v163);

      sub_10EB10();
      (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v161, v162);
      v158(v397, v137);
      uint64_t v170 = *(uint64_t (**)(uint64_t, void))(v378 + 8);
      uint64_t v171 = v123;
    }

    sub_10EB08(v171, v170);
    sub_10EB08(v394, *(uint64_t (**)(uint64_t, void))(v393 + 8));
    sub_41C80();
    goto LABEL_19;
  }

  uint64_t v138 = sub_41BBC((uint64_t)v136, *(uint64_t (**)(uint64_t, uint64_t))(v135 + 96));
  uint64_t v139 = *v136;
  uint64_t v140 = (os_log_s *)Logger.wellness.unsafeMutableAddressor(v138);
  sub_A5DC((uint64_t)v140, (uint64_t)&v405);
  uint64_t v141 = *(os_log_s **)(v134 + 16);
  uint64_t v387 = v140;
  uint64_t v142 = v399;
  uint64_t v388 = v141;
  ((void (*)(uint64_t, os_log_s *, uint64_t))v141)(v133, v140, v399);
  sub_10A1C0(v139);
  sub_A86C();
  os_log_type_t v143 = sub_4662C();
  BOOL v144 = sub_10EF70(v143);
  uint64_t v385 = v129;
  if (v144)
  {
    os_log_type_t v145 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v146 = sub_A5E8(32LL);
    v403[0] = v146;
    uint64_t v133 = v139;
    *(_DWORD *)os_log_type_t v145 = 136315138;
    uint64_t v401 = v139;
    sub_A410( &qword_18B140,  (uint64_t (*)(uint64_t))&type metadata accessor for DateTime,  (uint64_t)&protocol conformance descriptor for DateTime);
    uint64_t v148 = dispatch thunk of CustomStringConvertible.description.getter(v129, v147);
    uint64_t v150 = sub_10EC38(v148, v149);
    uint64_t v151 = sub_10EC6C(v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v151, v152, v153, v145 + 12);
    sub_41AD0(v139);
    sub_249D4();
    sub_DA24(&dword_0, v140, (os_log_type_t)v136, "Initial Recommendation: %s", v145);
    sub_A81C(v146);
    uint64_t v154 = v146;
    uint64_t v137 = v376;
    sub_5050(v154);
    uint64_t v155 = (uint64_t)v145;
    uint64_t v123 = (uint64_t)v395;
    sub_5050(v155);

    uint64_t v156 = *(uint64_t (**)(uint64_t, uint64_t))(v134 + 8);
    uint64_t v157 = v156(v374, v399);
  }

  else
  {

    sub_41AD0(v139);
    uint64_t v156 = *(uint64_t (**)(uint64_t, uint64_t))(v134 + 8);
    uint64_t v157 = v156(v133, v142);
  }

  uint64_t v172 = v393;
  uint64_t v173 = DateTime.date.getter(v157);
  if (!v173)
  {
    uint64_t v211 = v387;
    sub_A5DC((uint64_t)v387, (uint64_t)v403);
    uint64_t v212 = v367;
    uint64_t v213 = sub_10EB44();
    Logger.logObject.getter(v213);
    os_log_type_t v214 = sub_3C790();
    if (sub_41C30(v214))
    {
      uint64_t v215 = (_WORD *)sub_A5E8(2LL);
      sub_366C0(v215);
      sub_10EB24(&dword_0, v216, v217, "there was no date in resultDateTime, returning nil");
      sub_5050(v133);
    }

    sub_10EB10();
    sub_39BAC();
    v156(v212, v399);
    uint64_t v218 = sub_10F098();
    sub_41BBC(v218, v219);
    sub_10EB08(v123, *(uint64_t (**)(uint64_t, void))(v378 + 8));
    uint64_t v220 = *(void (**)(uint64_t, void))(v172 + 8);
    goto LABEL_24;
  }

  uint64_t v174 = v173;
  uint64_t v175 = DateTime.occurringIn.getter(v173);
  uint64_t v398 = v174;
  if (!v175)
  {
    sub_41C80();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v221, v222, v223, v389);
    goto LABEL_26;
  }

  uint64_t v176 = v371;
  DateTime.DateTimeRange.definedValue.getter();
  sub_3652C();
  uint64_t v177 = v389;
  sub_A614(v176, 1LL, v389);
  if (v178)
  {
LABEL_26:
    uint64_t v224 = v387;
    sub_A5DC((uint64_t)v387, (uint64_t)v403);
    uint64_t v225 = v369;
    sub_BB080();
    sub_10EB44();
    uint64_t v226 = swift_retain();
    Logger.logObject.getter(v226);
    os_log_type_t v227 = sub_4662C();
    if (sub_10ECB4(v227))
    {
      uint64_t v228 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v229 = (void *)sub_A5E8(8LL);
      *(_DWORD *)uint64_t v228 = 138412290;
      Class isa = DateTime.toINDateComponentsRange()().super.isa;
      uint64_t v401 = (uint64_t)isa;
      sub_9933C((uint64_t)&v401, (uint64_t)&v402, (uint64_t)(v228 + 4));
      *uint64_t v229 = isa;
      uint64_t v225 = v369;
      sub_39BAC();
      sub_DA24(&dword_0, v224, (os_log_type_t)v123, "Recommended INDateComponentsRange: %@", v228);
      sub_494C(&qword_189CB8);
      sub_A81C((uint64_t)v229);
      sub_5050((uint64_t)v229);
      sub_5050((uint64_t)v228);
    }

    else
    {

      sub_39BAC();
    }

    uint64_t v231 = v399;
    v156(v225, v399);
    uint64_t v232 = v387;
    sub_A5DC((uint64_t)v387, (uint64_t)&v401);
    uint64_t v233 = v370;
    sub_BB080();
    sub_10EB44();
    uint64_t v234 = sub_10A1C0(v139);
    Logger.logObject.getter(v234);
    os_log_type_t v235 = sub_4662C();
    if (sub_10F148(v235))
    {
      uint64_t v236 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v237 = sub_A5E8(32LL);
      uint64_t v400 = v237;
      *(_DWORD *)uint64_t v236 = 136315138;
      v238.super.Class isa = DateTime.toINDateComponentsRange()().super.isa;
      id v239 = -[objc_class dateInterval](v238.super.isa, "dateInterval");

      uint64_t v386 = v156;
      if (v239)
      {
        uint64_t v240 = v365;
        static DateInterval._unconditionallyBridgeFromObjectiveC(_:)(v239);

        sub_10EFD0();
      }

      else
      {
        sub_10EFD0();
        uint64_t v240 = v365;
      }

      sub_10F154(v240, v241);
      uint64_t v269 = String.init<A>(describing:)(v240, v238.super.isa);
      unint64_t v271 = v270;
      uint64_t v272 = sub_39178(v269, v270, &v400);
      sub_10EDD8(v272, v273, v274, (uint64_t)(v236 + 12));
      sub_41AD0(v139);
      swift_bridgeObjectRelease(v271);
      sub_DA24(&dword_0, v232, v235, "Recommended dateInterval: %s", v236);
      sub_A81C(v237);
      sub_5050(v237);
      sub_5050((uint64_t)v236);

      sub_10EB38();
      uint64_t v242 = v395;
    }

    else
    {

      sub_41AD0(v139);
      v156(v233, v231);
      uint64_t v156 = (uint64_t (*)(uint64_t, uint64_t))v377[0];
      uint64_t v242 = v395;
    }

    Class v275 = DateTime.toINDateComponentsRange()().super.isa;
    id v276 = -[objc_class dateInterval](v275, "dateInterval");

    uint64_t v277 = v368;
    if (v276)
    {
      static DateInterval._unconditionallyBridgeFromObjectiveC(_:)(v276);
      sub_39BAC();

      uint64_t v278 = 0LL;
    }

    else
    {
      sub_39BAC();
      uint64_t v278 = 1LL;
    }

    uint64_t v279 = v379;
    uint64_t v280 = v277;
    uint64_t v281 = v376;
    uint64_t v282 = v378;
    uint64_t v283 = v394;
    sub_10F000();
    sub_10EB10();
    uint64_t v284 = sub_10F098();
    v285(v284, v281);
    (*(void (**)(char *, uint64_t))(v282 + 8))(v242, v279);
    sub_89D84(v283, *(uint64_t (**)(uint64_t, uint64_t))(v393 + 8));
    sub_10F154(v280, v278);
    sub_F83C4(v280, (uint64_t)v156);
    uint64_t v286 = v371;
    goto LABEL_44;
  }

  uint64_t v179 = v363;
  sub_41850(v176, v363, &qword_190080);
  uint64_t v180 = *(void *)(v177 - 8);
  int v181 = (*(uint64_t (**)(uint64_t, uint64_t))(v180 + 88))(v179, v177);
  uint64_t v386 = v156;
  uint64_t v384 = v139;
  if (v181 == enum case for DateTime.DateTimeRange.DefinedDateTimeRange.afternoon(_:))
  {
    sub_10EC84();
    uint64_t v182 = sub_10F160();
    sub_A72C(v182);
    sub_10EF3C();
    uint64_t v183 = (void *)sub_10EF68(12LL);
    sub_A72C(v385);
    sub_10ED7C();
    sub_10EB6C();
    sub_10F008();
    uint64_t v184 = sub_10F0F0();
    sub_3652C();
    sub_10ECF0();
    uint64_t v185 = sub_10EB50();
    id v186 = sub_56344(v185, "startDate");
    sub_10F130();
    if (v183)
    {
      sub_10EE80();

      uint64_t v187 = v359;
      uint64_t v188 = *(void **)(v359 + 32);
      sub_10ED8C((uint64_t)&v385);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v156, 0LL, 1LL, v184);
      uint64_t v189 = sub_A614((uint64_t)v156, 1LL, v184);
      if (!v178)
      {
        sub_10F168();
        sub_10EEBC((uint64_t)&v378);
        sub_10EE6C();
        sub_10F040();
        sub_A5DC((uint64_t)v387, (uint64_t)v403);
        uint64_t v190 = v356;
        sub_10EB44();
        uint64_t v191 = v358;
        sub_10ED6C(*(uint64_t (**)(void, uint64_t, void))(v358 + 16));
        uint64_t v192 = v398;
        uint64_t v193 = sub_10A1C0(v398);
        Logger.logObject.getter(v193);
        os_log_type_t v194 = sub_4662C();
        if (sub_41C30(v194))
        {
          uint64_t v195 = sub_A5E8(22LL);
          uint64_t v401 = sub_A5E8(64LL);
          uint64_t v196 = v401;
          sub_10EB9C(4.8151e-34);
          sub_10ECC4();
          LODWORD(v396) = (_DWORD)v190;
          sub_10EF48();
          uint64_t v190 = (void *)DateTime.Time.init(withHour:meridiem:)(12LL, v176);
          sub_A72C(v385);
          sub_10EC24();
          sub_10EF54();
          sub_10ED1C();
          sub_10F0E8(v176);
          sub_3652C();
          sub_10EDC0();
          uint64_t v197 = sub_10EBC8(v176);
          id v198 = sub_10F138(v197, "description");
          sub_BB2A0((uint64_t)v198);
          sub_10EFC0();

          uint64_t v199 = sub_10ECA4();
          sub_10EC44(v199);
          sub_41AD0(v192);
          sub_DA1C();
          sub_10EF80();
          sub_A410( &qword_18E5C8,  (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval,  (uint64_t)&protocol conformance descriptor for DateInterval);
          uint64_t v201 = sub_10EE58(v200, v200);
          uint64_t v203 = sub_10EF30(v201, v202);
          sub_10EBD4(v203);
          sub_249D4();
          sub_24A50(v191, *(uint64_t (**)(uint64_t, uint64_t))(v137 + 8));
          sub_10EE44( &dword_0,  v204,  v205,  "Got a defined value of afternoon, got a new start date (%s) with new Recommendation: %s");
          sub_DA04(v196);
          sub_5050(v196);
          sub_5050(v195);
          sub_10EB1C((uint64_t)&a12);
          sub_A37E4();

          sub_10EB10();
          sub_10EB38();
          sub_10EF98();
          sub_10EB08(v355, v206);
        }

        else
        {

          sub_10EB10();
          sub_24A50(v357, *(uint64_t (**)(uint64_t, uint64_t))(v191 + 8));
          sub_10EB1C((uint64_t)&a12);
          sub_10EE94();
          sub_10EB38();
          sub_89D84(v355, *(uint64_t (**)(uint64_t, uint64_t))(v187 + 8));
        }

        sub_10EAD0();
        sub_10EAEC();
        sub_10EB08(v394, *(uint64_t (**)(uint64_t, void))(v393 + 8));
        sub_10F110();
        sub_10EED0((uint64_t)&v381);
        uint64_t v336 = sub_10F0FC();
LABEL_62:
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v336, v337, v338, v339);
        uint64_t v286 = (uint64_t)v190;
LABEL_44:
        sub_A4A4(v286, &qword_190080);
        goto LABEL_20;
      }
    }

    else
    {
      uint64_t v189 = sub_10EB80((uint64_t)&v385);
    }

    sub_10F128(v189, &qword_189CE8);
    uint64_t v324 = v387;
    sub_A5DC((uint64_t)v387, (uint64_t)v403);
    sub_10EB44();
    sub_AB5C();
    os_log_type_t v325 = sub_3C790();
    BOOL v326 = sub_41C30(v325);
    uint64_t v327 = v371;
    if (v326)
    {
      uint64_t v328 = (_WORD *)sub_A5E8(2LL);
      sub_366C0(v328);
      sub_10EB24(&dword_0, v329, v330, "couldn't create modifiedStartDate, returning nil");
      sub_5050(v176);
    }

    sub_10EB1C((uint64_t)&a12);
    sub_10F000();

    sub_10EB10();
    sub_10EB38();
    sub_10EAD0();
    sub_10EAEC();
    sub_10EB08(v394, *(uint64_t (**)(uint64_t, void))(v393 + 8));
    sub_10EDF0();
    uint64_t v286 = v327;
    goto LABEL_44;
  }

  if (v181 != enum case for DateTime.DateTimeRange.DefinedDateTimeRange.evening(_:))
  {
    if (v181 == enum case for DateTime.DateTimeRange.DefinedDateTimeRange.morning(_:))
    {
      uint64_t v287 = *(void (**)(uint64_t))(v362 + 104);
      uint64_t v288 = sub_10EEA0();
      v287(v288);
      uint64_t v289 = sub_10F160();
      sub_A72C(v289);
      sub_10EF3C();
      uint64_t v290 = (void *)sub_10EF68(0LL);
      sub_A72C(v385);
      sub_10ED7C();
      uint64_t v291 = sub_10EB6C();
      uint64_t v292 = v381;
      static TimeZone.current.getter(v291);
      DateTime.toINDateComponentsRange(calendar:timeZone:)(v290, v292);
      sub_3652C();
      sub_10F140(v292, (uint64_t)&v393);
      uint64_t v293 = sub_10EB50();
      id v294 = sub_56344(v293, "startDate");
      sub_10F130();
      if (v290)
      {
        uint64_t v396 = v287;
        uint64_t v295 = v392;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v290);

        uint64_t v296 = v359;
        uint64_t v297 = *(void (**)(uint64_t))(v359 + 32);
        uint64_t v298 = v351;
        uint64_t v299 = sub_10F11C();
        uint64_t v292 = v364;
        v297(v299);
        sub_41A40(v298, 0LL);
        uint64_t v300 = sub_A614(v298, 1LL, v292);
        uint64_t v301 = v371;
        if (!v178)
        {
          uint64_t v302 = v349;
          ((void (*)(uint64_t, uint64_t, uint64_t))v297)(v349, v298, v292);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v296 + 16))(v295, v302, v292);
          uint64_t v303 = v348;
          DateInterval.init(start:duration:)(v295);
          sub_A5DC((uint64_t)v387, (uint64_t)v403);
          uint64_t v190 = v347;
          sub_10EB44();
          sub_10ED6C(*(uint64_t (**)(void, uint64_t, void))(v358 + 16));
          uint64_t v304 = v398;
          uint64_t v305 = sub_10A1C0(v398);
          Logger.logObject.getter(v305);
          os_log_type_t v306 = sub_4662C();
          LODWORD(v39_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v306;
          if (os_log_type_enabled(v303, v306))
          {
            uint64_t v307 = (uint8_t *)sub_A5E8(22LL);
            uint64_t v389 = sub_A5E8(64LL);
            uint64_t v401 = v389;
            *(_DWORD *)uint64_t v307 = 136315394;
            uint64_t v387 = (os_log_s *)(v307 + 4);
            uint64_t v388 = v303;
            uint64_t v308 = sub_10EEA0();
            v396(v308);
            sub_10ECC4();
            sub_10EF48();
            uint64_t v309 = (void *)sub_10EF68(0LL);
            sub_A72C(v385);
            sub_10EC24();
            sub_10EB6C();
            sub_10ED1C();
            uint64_t v310 = (void *)sub_10F0E8((uint64_t)v303);
            sub_3652C();
            sub_10F140(v289, (uint64_t)&v393);
            uint64_t v311 = sub_10EBC8((uint64_t)v303);
            id v312 = sub_10F138(v311, "description");
            sub_BB2A0((uint64_t)v312);

            uint64_t v400 = sub_10ECA4();
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v400, &v401, v387, v307 + 12);
            sub_41AD0(v304);
            sub_DA1C();
            sub_10EF80();
            sub_A410( &qword_18E5C8,  (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval,  (uint64_t)&protocol conformance descriptor for DateInterval);
            uint64_t v313 = v350;
            uint64_t v314 = v391;
            uint64_t v316 = dispatch thunk of CustomStringConvertible.description.getter(v391, v315);
            uint64_t v318 = sub_10EF30(v316, v317);
            sub_10EBD4(v318);
            sub_249D4();
            uint64_t v319 = v358;
            sub_41BBC(v313, *(uint64_t (**)(uint64_t, uint64_t))(v358 + 8));
            os_log_t v320 = v388;
            _os_log_impl( &dword_0,  v388,  (os_log_type_t)v392,  "Got a defined value of morning, got a new start date (%s) with new Recommendation: %s",  v307,  0x16u);
            uint64_t v190 = (void *)v389;
            sub_DA04(v389);
            sub_5050((uint64_t)v190);
            sub_10F110();
            sub_5050(v321);
            sub_10EB1C((uint64_t)&a12);
            sub_A37E4();

            sub_10EB10();
            sub_10EB38();
            sub_10EF98();
            sub_24A50(v349, v322);
            sub_10EAD0();
            sub_10EAEC();
            sub_10EB08(v394, *(uint64_t (**)(uint64_t, void))(v393 + 8));
            uint64_t v323 = v319;
          }

          else
          {

            sub_10EB10();
            uint64_t v345 = v358;
            uint64_t v314 = v391;
            sub_41BBC(v350, *(uint64_t (**)(uint64_t, uint64_t))(v358 + 8));
            sub_10EB1C((uint64_t)&a12);
            sub_10EE94();
            sub_10EB38();
            sub_24A50(v349, *(uint64_t (**)(uint64_t, uint64_t))(v296 + 8));
            sub_10EAD0();
            sub_10EAEC();
            sub_10EB08(v394, *(uint64_t (**)(uint64_t, void))(v393 + 8));
            uint64_t v323 = v345;
            sub_10F110();
          }

          uint64_t v346 = v377[0];
          (*(void (**)(void, os_log_s *, uint64_t))(v323 + 32))(v377[0], v348, v314);
          uint64_t v336 = v346;
          uint64_t v337 = 0LL;
          uint64_t v338 = 1LL;
          uint64_t v339 = v314;
          goto LABEL_62;
        }
      }

      else
      {
        uint64_t v300 = sub_10EB80((uint64_t)&v373);
        uint64_t v301 = v371;
      }

      sub_10F128(v300, &qword_189CE8);
      uint64_t v340 = v387;
      sub_A5DC((uint64_t)v387, (uint64_t)v403);
      sub_10EB44();
      sub_AB5C();
      os_log_type_t v341 = sub_3C790();
      if (sub_41C30(v341))
      {
        uint64_t v342 = (_WORD *)sub_A5E8(2LL);
        sub_366C0(v342);
        sub_10EB24(&dword_0, v343, v344, "couldn't create modifiedStartDate, returning nil");
        sub_5050(v292);
      }

      sub_10EB1C((uint64_t)&a12);
      sub_10F000();

      sub_10EB10();
      sub_10EB38();
      sub_10EAD0();
      sub_10EAEC();
      sub_10EB08(v394, *(uint64_t (**)(uint64_t, void))(v393 + 8));
      sub_10EDF0();
      uint64_t v286 = v301;
      goto LABEL_44;
    }

    if (v181 != enum case for DateTime.DateTimeRange.DefinedDateTimeRange.night(_:))
    {
      sub_10EB08(v179, *(uint64_t (**)(uint64_t, void))(v180 + 8));
      goto LABEL_26;
    }
  }

  sub_A4A4(v176, &qword_190080);
  sub_10EC84();
  uint64_t v243 = sub_10F160();
  sub_A72C(v243);
  sub_10EF3C();
  uint64_t v244 = (void *)sub_10EF68(5LL);
  sub_A72C(v385);
  sub_10ED7C();
  sub_10EB6C();
  sub_10F008();
  uint64_t v245 = sub_10F0F0();
  sub_3652C();
  sub_10ECF0();
  uint64_t v246 = sub_10EB50();
  id v247 = sub_56344(v246, "startDate");
  sub_10F130();
  if (v244)
  {
    sub_10EE80();

    uint64_t v248 = v359;
    uint64_t v249 = *(void **)(v359 + 32);
    sub_10ED8C((uint64_t)&v382);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v156, 0LL, 1LL, v245);
    uint64_t v250 = sub_A614((uint64_t)v156, 1LL, v245);
    if (!v178)
    {
      sub_10F168();
      sub_10EEBC((uint64_t)&v374);
      sub_10EE6C();
      sub_10F040();
      sub_A5DC((uint64_t)v387, (uint64_t)v403);
      int v251 = v353;
      sub_10EB44();
      uint64_t v252 = v358;
      sub_10ED6C(*(uint64_t (**)(void, uint64_t, void))(v358 + 16));
      uint64_t v253 = v398;
      uint64_t v254 = sub_10A1C0(v398);
      Logger.logObject.getter(v254);
      os_log_type_t v255 = sub_4662C();
      if (sub_41C30(v255))
      {
        uint64_t v256 = sub_A5E8(22LL);
        uint64_t v401 = sub_A5E8(64LL);
        uint64_t v257 = v401;
        sub_10EB9C(4.8151e-34);
        sub_10ECC4();
        LODWORD(v396) = v251;
        sub_10EF48();
        uint64_t v258 = (void *)DateTime.Time.init(withHour:meridiem:)(5LL, v176);
        sub_A72C(v385);
        sub_10EC24();
        sub_10EF54();
        sub_10ED1C();
        sub_10F0E8(v176);
        sub_3652C();
        sub_10EDC0();
        uint64_t v259 = sub_10EBC8(v176);
        id v260 = sub_10F138(v259, "description");
        sub_BB2A0((uint64_t)v260);
        sub_10EFC0();

        uint64_t v261 = sub_10ECA4();
        sub_10EC44(v261);
        sub_41AD0(v253);
        sub_DA1C();
        sub_10EF80();
        sub_A410( &qword_18E5C8,  (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval,  (uint64_t)&protocol conformance descriptor for DateInterval);
        uint64_t v263 = sub_10EE58(v262, v262);
        uint64_t v265 = sub_10EF30(v263, v264);
        sub_10EBD4(v265);
        sub_249D4();
        sub_24A50(v252, *(uint64_t (**)(uint64_t, uint64_t))(v137 + 8));
        sub_10EE44( &dword_0,  v266,  v267,  "Got a defined value of evening/night, got a new start date (%s) with new Recommendation: %s");
        sub_DA04(v257);
        sub_5050(v257);
        sub_5050(v256);
        sub_10EB1C((uint64_t)&a12);
        sub_A37E4();

        sub_10EB10();
        sub_10EB38();
        sub_10EF98();
        sub_10EB08(v352, v268);
      }

      else
      {

        sub_10EB10();
        sub_24A50(v354, *(uint64_t (**)(uint64_t, uint64_t))(v252 + 8));
        sub_10EB1C((uint64_t)&a12);
        sub_10EE94();
        sub_10EB38();
        sub_89D84(v352, *(uint64_t (**)(uint64_t, uint64_t))(v248 + 8));
      }

      sub_10EAD0();
      sub_10EAEC();
      sub_10EB08(v394, *(uint64_t (**)(uint64_t, void))(v393 + 8));
      sub_10EED0((uint64_t)v377);
      uint64_t v207 = sub_10F0FC();
      goto LABEL_19;
    }
  }

  else
  {
    uint64_t v250 = sub_10EB80((uint64_t)&v382);
  }

  sub_10F128(v250, &qword_189CE8);
  uint64_t v331 = v387;
  sub_A5DC((uint64_t)v387, (uint64_t)v403);
  sub_10EB44();
  sub_AB5C();
  os_log_type_t v332 = sub_3C790();
  if (sub_41C30(v332))
  {
    uint64_t v333 = (_WORD *)sub_A5E8(2LL);
    sub_366C0(v333);
    sub_10EB24(&dword_0, v334, v335, "couldn't create modifiedStartDate, returning nil");
    sub_5050(v176);
  }

  sub_10EB1C((uint64_t)&a12);
  sub_10F000();

  sub_10EB10();
  sub_10EB38();
  sub_10EAD0();
  sub_10EAEC();
  uint64_t v220 = *(void (**)(uint64_t, void))(v393 + 8);
LABEL_24:
  v220(v394, v377[1]);
  uint64_t v207 = v377[0];
  uint64_t v208 = 1LL;
  uint64_t v209 = 1LL;
  uint64_t v210 = v391;
LABEL_19:
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v207, v208, v209, v210);
LABEL_20:
  sub_D8FC();
}

uint64_t sub_10E558@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v80 = a2;
  uint64_t v81 = a1;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v78 = *(void *)(v2 - 8);
  uint64_t v79 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v73 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v70 = (char *)&v69 - v5;
  uint64_t v6 = type metadata accessor for Calendar.Component(0LL);
  uint64_t v75 = *(void *)(v6 - 8);
  uint64_t v76 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v74 = type metadata accessor for Calendar(0LL);
  uint64_t v72 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v10 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_494C(&qword_189CE8);
  __chkstk_darwin(v11);
  uint64_t v71 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v77 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v69 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v69 - v20;
  uint64_t v22 = sub_494C(&qword_189BA0);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for DateInterval(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v69 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = v29;
  sub_41850(v81, (uint64_t)v24, &qword_189BA0);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1LL, v30) == 1)
  {
    uint64_t v31 = v30;
    sub_A4A4((uint64_t)v24, &qword_189BA0);
    uint64_t v33 = Logger.wellness.unsafeMutableAddressor(v32);
    swift_beginAccess(v33, v82, 0LL, 0LL);
    uint64_t v34 = v78;
    uint64_t v35 = v79;
    uint64_t v36 = v73;
    uint64_t v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v78 + 16))(v73, v33, v79);
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.error.getter();
    uint64_t v40 = v36;
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl(&dword_0, v38, v39, "nil interval passed into getFirstMinuteOfInterval, returning nil", v41, 2u);
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v34 + 8))(v40, v35);
    uint64_t v42 = 1LL;
    uint64_t v43 = v80;
    uint64_t v44 = v31;
  }

  else
  {
    uint64_t v69 = v21;
    uint64_t v73 = v16;
    uint64_t v45 = (*(uint64_t (**)(char *, char *, uint64_t))(v26 + 32))(v28, v24, v30);
    static Calendar.current.getter(v45);
    uint64_t v46 = v75;
    uint64_t v47 = v76;
    uint64_t v48 = (*(uint64_t (**)(char *, void, uint64_t))(v75 + 104))( v8,  enum case for Calendar.Component.second(_:),  v76);
    uint64_t v81 = v30;
    DateInterval.start.getter(v48);
    uint64_t v49 = (uint64_t)v71;
    Calendar.date(byAdding:value:to:wrappingComponents:)(v8, 59LL, v19, 0LL);
    uint64_t v50 = *(void (**)(char *, uint64_t))(v77 + 8);
    v50(v19, v13);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v8, v47);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v10, v74);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v49, 1LL, v13) == 1)
    {
      uint64_t v51 = v28;
      uint64_t v52 = v26;
      uint64_t v44 = v81;
      sub_A4A4(v49, &qword_189CE8);
      uint64_t v54 = Logger.wellness.unsafeMutableAddressor(v53);
      swift_beginAccess(v54, v82, 0LL, 0LL);
      uint64_t v56 = v78;
      uint64_t v55 = v79;
      uint64_t v57 = v70;
      uint64_t v58 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v78 + 16))(v70, v54, v79);
      uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
      os_log_type_t v60 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v61 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v61 = 0;
        _os_log_impl(&dword_0, v59, v60, "couldn't create newEnd in getFirstMinuteOfInterval, returning nil", v61, 2u);
        swift_slowDealloc(v61, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v55);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v51, v44);
      uint64_t v42 = 1LL;
      uint64_t v43 = v80;
    }

    else
    {
      uint64_t v62 = v77;
      uint64_t v63 = v69;
      uint64_t v64 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v77 + 32))(v69, v49, v13);
      uint64_t v65 = v50;
      DateInterval.start.getter(v64);
      uint64_t v66 = v73;
      (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v73, v63, v13);
      uint64_t v43 = v80;
      DateInterval.init(start:end:)(v19, v66);
      v65(v63, v13);
      uint64_t v67 = *(void (**)(char *, uint64_t))(v26 + 8);
      uint64_t v44 = v81;
      v67(v28, v81);
      uint64_t v42 = 0LL;
    }
  }

  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v43, v42, 1LL, v44);
}

uint64_t sub_10EAD0()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 392) + 8LL))( *(void *)(v0 - 208),  *(void *)(v0 - 384));
}

uint64_t sub_10EAEC()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 360) + 8LL))( *(void *)(v0 - 224),  *(void *)(v0 - 352));
}

uint64_t sub_10EB08@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, void)@<X8>)
{
  return a2(a1, *(void *)(v2 - 256));
}

uint64_t sub_10EB10()
{
  return swift_release(*(void *)(v0 - 264));
}

uint64_t sub_10EB1C@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(void *)(a1 - 256));
}

void sub_10EB24(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_10EB38()
{
  return (*(uint64_t (**)(void))(v0 - 296))();
}

uint64_t sub_10EB44()
{
  return (*(uint64_t (**)(void))(v0 - 280))();
}

uint64_t sub_10EB50()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 536) + 8LL))(v0, *(void *)(v1 - 488));
}

uint64_t sub_10EB6C()
{
  return static Calendar.current.getter();
}

uint64_t sub_10EB80@<X0>(uint64_t a1@<X8>)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(a1 - 256), 1LL, 1LL, *(void *)(v1 - 504));
}

uint64_t sub_10EB9C(float a1)
{
  float *v2 = a1;
  *(void *)(v3 - 24_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v2 + 1;
  return (*(uint64_t (**)(void, void, uint64_t))(v3 - 272))( *(void *)(v3 - 480),  *(unsigned int *)(v3 - 216),  v1);
}

uint64_t sub_10EBC8(uint64_t a1)
{
  return v1(a1, *(void *)(v2 - 488));
}

uint64_t sub_10EBD4(uint64_t a1)
{
  *(void *)(v4 - 176) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 176, v1, v2, v3 + 22);
}

uint64_t sub_10EBEC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 224))(v0, v1);
}

uint64_t sub_10EBFC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(v2 - 272) + 104LL))( *(void *)(v2 - 280),  a2,  *(void *)(v2 - 264));
}

uint64_t sub_10EC24()
{
  return DateTime.init(withDate:time:)(v1, v0);
}

uint64_t sub_10EC38(uint64_t a1, unint64_t a2)
{
  return sub_39178(a1, a2, (uint64_t *)(v2 - 144));
}

uint64_t sub_10EC44(uint64_t a1)
{
  *(void *)(v2 - 176) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 176, v2 - 168, *(void *)(v2 - 248), v1 + 12);
}

void sub_10EC64(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_10EC6C(uint64_t a1)
{
  *(void *)(v1 - 16_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a1;
  return v1 - 168;
}

uint64_t sub_10EC84()
{
  return v0(*(void *)(v2 - 480), v1, *(void *)(v2 - 528));
}

uint64_t sub_10ECA4()
{
  return sub_39178(v0, v1, (uint64_t *)(v2 - 168));
}

BOOL sub_10ECB4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10ECC4()
{
  return swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
}

uint64_t sub_10ECD4(uint64_t a1)
{
  *(void *)(v3 - 16_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 168, v3 - 160, v2, v1);
}

uint64_t sub_10ECF0()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 544) + 8LL))(v0, *(void *)(v1 - 496));
}

uint64_t sub_10ED0C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 192))(a1, v1, v2);
}

uint64_t sub_10ED1C()
{
  return static TimeZone.current.getter();
}

uint64_t sub_10ED2C@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 296) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return 0LL;
}

uint64_t sub_10ED50()
{
  return DateTimeResolver.init()();
}

uint64_t sub_10ED6C@<X0>(uint64_t (*a1)(void, uint64_t, void)@<X8>)
{
  return a1(*(void *)(v1 - 256), v2, *(void *)(v3 - 256));
}

uint64_t sub_10ED7C()
{
  return DateTime.init(withDate:time:)(v1, v0);
}

uint64_t sub_10ED8C@<X0>(uint64_t a1@<X8>)
{
  return v1(*(void *)(a1 - 256), v2, *(void *)(v3 - 504));
}

uint64_t sub_10EDA8@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(v3 - 216))(*(void *)(a1 - 256), v1, v2);
}

uint64_t sub_10EDC0()
{
  return (*(uint64_t (**)(uint64_t, void))(v1 - 320))(v0, *(void *)(v1 - 496));
}

uint64_t sub_10EDD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 - 184) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 184, v5 - 176, v4, a4);
}

uint64_t sub_10EDF0()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 - 376), 1LL, 1LL, *(void *)(v0 - 256));
}

uint64_t sub_10EE08()
{
  return type metadata accessor for DateTime.DateTimeRange.DefinedDateTimeRange(0LL);
}

void sub_10EE10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

  ;
}

void sub_10EE44(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_10EE58(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of CustomStringConvertible.description.getter(*(void *)(v2 - 256), a2);
}

uint64_t sub_10EE6C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v0, v1);
}

uint64_t sub_10EE80()
{
  *(_DWORD *)(v2 - 216) = v1;
  return static Date._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

uint64_t sub_10EE94()
{
  return swift_release_n(v0, 3LL);
}

uint64_t sub_10EEA0()
{
  return *(void *)(v0 - 480);
}

uint64_t sub_10EEBC@<X0>(uint64_t a1@<X8>)
{
  return v1(*(void *)(a1 - 256), v3, v2);
}

uint64_t sub_10EED0@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(v3 + 32))(v1, *(void *)(a1 - 256), v2);
}

uint64_t sub_10EEE4()
{
  return type metadata accessor for Calendar(0LL);
}

uint64_t sub_10EEF0()
{
  return type metadata accessor for DateTimeResolutionSpec.DateTimeConvergenceStrategy(0LL);
}

uint64_t sub_10EEFC()
{
  return type metadata accessor for Date(0LL);
}

uint64_t sub_10EF08(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 200))(a1, v1);
}

uint64_t sub_10EF14()
{
  return 0LL;
}

uint64_t sub_10EF30(uint64_t a1, unint64_t a2)
{
  return sub_39178(a1, a2, (uint64_t *)(v2 - 168));
}

uint64_t sub_10EF3C()
{
  return swift_retain(v0);
}

uint64_t sub_10EF48()
{
  return swift_retain(v0);
}

uint64_t sub_10EF54()
{
  return static Calendar.current.getter();
}

uint64_t sub_10EF68(uint64_t a1)
{
  return DateTime.Time.init(withHour:meridiem:)(a1, v1);
}

BOOL sub_10EF70(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_10EF80()
{
  *(_WORD *)(v0 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2080;
}

uint64_t sub_10EF90(uint64_t a1)
{
  return v2(a1, v1);
}

  ;
}

uint64_t sub_10EFA8(uint64_t a1)
{
  *(void *)(v1 - 16_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a1;
  return v1 - 168;
}

void sub_10EFC0()
{
}

  ;
}

uint64_t sub_10EFE8()
{
  return type metadata accessor for DateTime(0LL);
}

uint64_t sub_10EFF0@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return type metadata accessor for Logger(0LL);
}

uint64_t sub_10F000()
{
  return swift_release(*(void *)(v0 - 200));
}

uint64_t sub_10F008()
{
  return static TimeZone.current.getter();
}

  ;
}

BOOL sub_10F030(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10F040()
{
  return DateInterval.init(start:duration:)(v0);
}

uint64_t sub_10F050()
{
  return dispatch thunk of DeviceState.siriLocale.getter(v0, v1);
}

uint64_t sub_10F060()
{
  return dispatch thunk of DeviceState.siriLocale.getter(v0, v1);
}

uint64_t sub_10F070()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_10F080()
{
  return DateTime.time.getter();
}

void *sub_10F088()
{
  return sub_500C(v0, v0[3]);
}

uint64_t sub_10F098()
{
  return *(void *)(v0 - 208);
}

uint64_t sub_10F0A8@<X0>(uint64_t a1@<X8>)
{
  return sub_10E558(*(void *)(v1 - 256), a1);
}

uint64_t sub_10F0B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DateTimeResolutionSpec.init(expandToType:dateTimeConvergenceStrategy:overridesForDefinedDateTimeRanges:inferDurationAsInterval:witchingHourRoundOffEnabled:convergeToOperatingHours:)( a1,  a2,  a3,  1LL,  0LL,  0LL);
}

uint64_t sub_10F0C8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

uint64_t sub_10F0D4(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_10F0DC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 216))(a1, v1);
}

uint64_t sub_10F0E8(uint64_t a1)
{
  return DateTime.toINDateComponentsRange(calendar:timeZone:)(a1, v1);
}

uint64_t sub_10F0F0()
{
  return DateTime.toINDateComponentsRange(calendar:timeZone:)(v0, v1);
}

uint64_t sub_10F0FC()
{
  return v0;
}

  ;
}

uint64_t sub_10F11C()
{
  return v0;
}

void sub_10F128(uint64_t a1, uint64_t *a2)
{
}

void sub_10F130()
{
}

id sub_10F138(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_10F140@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return v2(a1, *(void *)(a2 - 256));
}

BOOL sub_10F148(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10F154(uint64_t a1, uint64_t a2)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, 1LL, v2);
}

uint64_t sub_10F160()
{
  return type metadata accessor for DateTime.Time(0LL);
}

void sub_10F168()
{
  *(void *)(v2 - 320) = v0;
  *(void *)(v2 - 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v1;
}

uint64_t sub_10F17C()
{
  return v0;
}

INDateComponentsRange sub_10F190()
{
  return DateTime.toINDateComponentsRange()();
}

uint64_t sub_10F198(uint64_t a1)
{
  return DateComponents.hour.setter(a1, 0LL);
}

uint64_t sub_10F1A4()
{
  return DateTime.DateTimeRange.definedValue.getter();
}

uint64_t sub_10F1AC(uint64_t a1, unint64_t a2)
{
  return sub_39178(a1, a2, (uint64_t *)(v2 - 160));
}

uint64_t sub_10F1B8()
{
  return dispatch thunk of DateTime.description.getter();
}

uint64_t sub_10F1C0(unsigned __int16 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10F1F8 + 4 * word_13E900[a1]))( 0xD000000000000010LL,  0x8000000000147C50LL);
}

uint64_t sub_10F1F8()
{
  return 1701733217LL;
}

uint64_t sub_10F208()
{
  return 0x7369685F62696661LL;
}

uint64_t sub_10F228()
{
  return 0x5F6C6F686F636C61LL;
}

uint64_t sub_1103E0(uint64_t a1)
{
  return a1 + 10;
}

uint64_t sub_1103F0(uint64_t a1)
{
  return a1 + 4;
}

uint64_t sub_110400(uint64_t a1)
{
  return a1 + 1;
}

void sub_110410()
{
}

uint64_t sub_110428()
{
  return sub_1124C8();
}

uint64_t sub_11043C()
{
  return 0x5F6E696D61746976LL;
}

uint64_t sub_110468()
{
  return sub_1124C8();
}

uint64_t sub_11047C()
{
  return sub_1124C8();
}

uint64_t sub_110490()
{
  return sub_1124C8();
}

uint64_t sub_1104A4()
{
  return sub_1124C8();
}

uint64_t sub_1104B8()
{
  return 0x78616D5F326F76LL;
}

void sub_1104D0()
{
}

uint64_t sub_1104E4(uint64_t a1)
{
  return a1 + 3;
}

uint64_t sub_1104F4(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_110504(uint64_t a1)
{
  return a1 + 17;
}

uint64_t sub_110514(uint64_t a1)
{
  return a1 + 10;
}

void sub_110524()
{
}

uint64_t sub_110544(uint64_t a1)
{
  return a1 + 2;
}

uint64_t sub_110554(uint64_t a1)
{
  return a1 + 5;
}

void sub_110564()
{
}

uint64_t sub_110578(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_110588()
{
  return 0x6168636C65656877LL;
}

void sub_1105C0()
{
}

uint64_t sub_1105D8(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_1105E8()
{
  return 1668180346LL;
}

uint64_t sub_1105F8()
{
  return 0x655F657669746361LL;
}

void sub_11061C()
{
}

uint64_t sub_110634(uint64_t a1)
{
  return a1 + 6;
}

uint64_t sub_110644(uint64_t a1)
{
  return a1 + 3;
}

uint64_t sub_110654()
{
  return 0x73616D5F79646F62LL;
}

  ;
}

uint64_t sub_110684(uint64_t a1)
{
  return a1 + 1;
}

void sub_110694()
{
}

uint64_t sub_1106B8()
{
  return 0x6573696372657865LL;
}

  ;
}

uint64_t sub_1106E8()
{
  return 0x6573696372657865LL;
}

uint64_t sub_110710()
{
  return 0x61725F7472616568LL;
}

uint64_t sub_110730()
{
  return 0x746867696568LL;
}

uint64_t sub_110744()
{
  return 1702260589LL;
}

uint64_t sub_110754()
{
  return 0x616F675F65766F6DLL;
}

uint64_t sub_11076C()
{
  return 0x6E69725F65766F6DLL;
}

uint64_t sub_110784(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_110794()
{
  return 0x756F635F68737570LL;
}

uint64_t sub_1107B4()
{
  return 0x5F676E6974736572LL;
}

void sub_1107D8()
{
}

uint64_t sub_1107F8()
{
  return 0x616F675F6C6C6F72LL;
}

void sub_110810()
{
}

uint64_t sub_11082C()
{
  return 7890291LL;
}

uint64_t sub_11083C()
{
  return 0x756E696D5F786973LL;
}

uint64_t sub_110860()
{
  return 0x646E617473LL;
}

uint64_t sub_110874()
{
  return 0x6F675F646E617473LL;
}

uint64_t sub_110894()
{
  return 0x69725F646E617473LL;
}

void sub_1108B4()
{
}

uint64_t sub_1108D4()
{
  return 0x676E696D6D697773LL;
}

uint64_t sub_1108F8(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_110908()
{
  return 0x5F676E696B6C6177LL;
}

uint64_t sub_11092C()
{
  return 0x746867696577LL;
}

void sub_110944()
{
}

void sub_11095C()
{
}

uint64_t sub_11097C()
{
  return 7239026LL;
}

uint64_t sub_11098C()
{
  return 0x635F737269617473LL;
}

uint64_t sub_1109B0()
{
  return 1835628403LL;
}

uint64_t sub_1109CC()
{
  return 0x6168636C65656877LL;
}

uint64_t sub_1109EC()
{
  return 0x6E756F4370657473LL;
}

uint64_t sub_110A0C(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_494C(&qword_18ABC8);
  uint64_t v4 = swift_allocObject(v3, 6512LL, 7LL);
  uint64_t v5 = sub_58F80(v4, 270LL);
  *(void *)uint64_t v6 = "abdominal_cramps";
  *(void *)(v6 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 16LL;
  *(_BYTE *)(v6 + 16) = 2;
  *(void *)(v6 + 24) = "acne";
  *(void *)(v6 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 4LL;
  *(_BYTE *)(v6 + 40) = 2;
  *(void *)(v6 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "afib_history";
  *(void *)(v6 + 56) = 12LL;
  *(_BYTE *)(v6 + 64) = 2;
  *(void *)(v6 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "alcohol_log";
  *(void *)(v6 + 80) = 11LL;
  *(_BYTE *)(v6 + 8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 96) = "allergies";
  *(void *)(v6 + 104) = 9LL;
  *(_BYTE *)(v6 + 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 120) = "anxiety_risk";
  *(void *)(v6 + 12_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 12LL;
  *(_BYTE *)(v6 + 136) = 2;
  *(void *)(v6 + 144) = "appetite_changes";
  *(void *)(v6 + 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 16LL;
  *(_BYTE *)(v6 + 160) = 2;
  *(void *)(v6 + 16_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "atrial_fibrillation";
  *(void *)(v6 + 176) = 19LL;
  *(_BYTE *)(v6 + 184) = 2;
  *(void *)(v6 + 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "audio_exposure";
  *(void *)(v6 + 200) = 14LL;
  *(_BYTE *)(v6 + 20_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 216) = "audiogram";
  *(void *)(v6 + 224) = 9LL;
  *(_BYTE *)(v6 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 240) = "beryllium";
  *(void *)(v6 + 24_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 9LL;
  *(_BYTE *)(v6 + 256) = 2;
  *(void *)(v6 + 264) = "biological_sex";
  *(void *)(v6 + 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 14LL;
  *(_BYTE *)(v6 + 280) = 2;
  *(void *)(v6 + 28_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "biotin";
  *(void *)(v6 + 296) = 6LL;
  *(_BYTE *)(v6 + 304) = 2;
  *(void *)(v6 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "bladder_incontinence";
  *(void *)(v6 + 320) = 20LL;
  *(_BYTE *)(v6 + 32_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 336) = "bloating";
  *(void *)(v6 + 344) = 8LL;
  *(_BYTE *)(v6 + 35_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 360) = "blood_alcohol_content";
  *(void *)(v6 + 36_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 21LL;
  *(_BYTE *)(v6 + 376) = 2;
  *(void *)(v6 + 384) = "blood_cholesterol";
  *(void *)(v6 + 39_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 17LL;
  *(_BYTE *)(v6 + 400) = 2;
  *(void *)(v6 + 40_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "blood_glucose";
  *(void *)(v6 + 416) = 13LL;
  *(_BYTE *)(v6 + 424) = 2;
  *(void *)(v6 + 43_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "blood_pressure";
  *(void *)(v6 + 440) = 14LL;
  *(_BYTE *)(v6 + 44_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 456) = "blood_pressure_diastolic";
  *(void *)(v6 + 464) = 24LL;
  *(_BYTE *)(v6 + 47_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 480) = "blood_pressure_systolic";
  *(void *)(v6 + 48_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 23LL;
  *(_BYTE *)(v6 + 496) = 2;
  *(void *)(v6 + 504) = "blood_type";
  *(void *)(v6 + 51_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 10LL;
  *(_BYTE *)(v6 + 520) = 2;
  *(void *)(v6 + 52_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "blurred_vision";
  *(void *)(v6 + 536) = 14LL;
  *(_BYTE *)(v6 + 544) = 2;
  *(void *)(v6 + 55_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "body_and_muscle_ache";
  *(void *)(v6 + 560) = 20LL;
  *(_BYTE *)(v6 + 56_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 576) = "body_fat_percentage";
  *(void *)(v6 + 584) = 19LL;
  *(_BYTE *)(v6 + 59_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 600) = "breast_general";
  *(void *)(v6 + 60_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 14LL;
  *(_BYTE *)(v6 + 616) = 2;
  *(void *)(v6 + 624) = "breast_pain";
  *(void *)(v6 + 63_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 11LL;
  *(_BYTE *)(v6 + 640) = 2;
  *(void *)(v6 + 64_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "caffeine";
  *(void *)(v6 + 656) = 8LL;
  *(_BYTE *)(v6 + 664) = 2;
  *(void *)(v6 + 67_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "calcium";
  *(void *)(v6 + 680) = 7LL;
  *(_BYTE *)(v6 + 68_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 696) = "carbohydrates";
  *(void *)(v6 + 704) = 13LL;
  *(_BYTE *)(v6 + 71_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 720) = "cardio_fitness";
  *(void *)(v6 + 72_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 14LL;
  *(_BYTE *)(v6 + 736) = 2;
  *(void *)(v6 + 744) = "cervical_mucus_quality";
  *(void *)(v6 + 75_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 22LL;
  *(_BYTE *)(v6 + 760) = 2;
  *(void *)(v6 + 76_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "chest_tightness_or_pain";
  *(void *)(v6 + 776) = 23LL;
  *(_BYTE *)(v6 + 784) = 2;
  *(void *)(v6 + 79_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "chills";
  *(void *)(v6 + 800) = 6LL;
  *(_BYTE *)(v6 + 80_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 816) = "chloride";
  *(void *)(v6 + 824) = 8LL;
  *(_BYTE *)(v6 + 83_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 840) = "chromium";
  *(void *)(v6 + 84_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 8LL;
  *(_BYTE *)(v6 + 856) = 2;
  *(void *)(v6 + 864) = "clinical_documents";
  *(void *)(v6 + 87_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 18LL;
  *(_BYTE *)(v6 + 880) = 2;
  *(void *)(v6 + 88_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "clinical_vitals";
  *(void *)(v6 + 896) = 15LL;
  *(_BYTE *)(v6 + 904) = 2;
  *(void *)(v6 + 91_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "condition_record";
  *(void *)(v6 + 920) = 16LL;
  *(_BYTE *)(v6 + 92_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 936) = "congestion";
  *(void *)(v6 + 944) = 10LL;
  *(_BYTE *)(v6 + 95_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 960) = "constipation";
  *(void *)(v6 + 96_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 12LL;
  *(_BYTE *)(v6 + 976) = 2;
  *(void *)(v6 + 984) = "contraceptives";
  *(void *)(v6 + 99_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 14LL;
  *(_BYTE *)(v6 + 1000) = 2;
  *(void *)(v6 + 100_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "copper";
  *(void *)(v6 + 1016) = 6LL;
  *(_BYTE *)(v6 + 1024) = 2;
  *(void *)(v6 + 103_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "coughing";
  *(void *)(v6 + 1040) = 8LL;
  *(_BYTE *)(v6 + 104_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 1056) = "cycling_cadence";
  *(void *)(v6 + 1064) = 15LL;
  *(_BYTE *)(v6 + 107_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 1080) = "cycling_functional_threshold_power";
  *(void *)(v6 + 108_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 34LL;
  *(_BYTE *)(v6 + 1096) = 2;
  *(void *)(v6 + 1104) = "cycling_pace";
  *(void *)(v6 + 111_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 12LL;
  *(_BYTE *)(v6 + 1120) = 2;
  *(void *)(v6 + 112_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "depression_risk";
  *(void *)(v6 + 1136) = 15LL;
  *(_BYTE *)(v6 + 1144) = 2;
  *(void *)(v6 + 115_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "diagnostic_test_report";
  *(void *)(v6 + 1160) = 22LL;
  *(_BYTE *)(v6 + 116_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 1176) = "diagnostic_test_result";
  *(void *)(v6 + 1184) = 22LL;
  *(_BYTE *)(v6 + 119_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 1200) = "diarrhea";
  *(void *)(v6 + 120_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 8LL;
  *(_BYTE *)(v6 + 1216) = 2;
  *(void *)(v6 + 1224) = "dietary_calories";
  *(void *)(v6 + 123_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 16LL;
  *(_BYTE *)(v6 + 1240) = 2;
  *(void *)(v6 + 124_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "dietary_cholesterol";
  *(void *)(v6 + 1256) = 19LL;
  *(_BYTE *)(v6 + 1264) = 2;
  *(void *)(v6 + 127_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "dietary_energy";
  *(void *)(v6 + 1280) = 14LL;
  *(_BYTE *)(v6 + 128_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 1296) = "dietary_sugar";
  *(void *)(v6 + 1304) = 13LL;
  *(_BYTE *)(v6 + 131_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 1320) = "dizziness";
  *(void *)(v6 + 132_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 9LL;
  *(_BYTE *)(v6 + 1336) = 2;
  *(void *)(v6 + 1344) = "double_support";
  *(void *)(v6 + 135_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 14LL;
  *(_BYTE *)(v6 + 1360) = 2;
  *(void *)(v6 + 136_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "dry_skin";
  *(void *)(v6 + 1376) = 8LL;
  *(_BYTE *)(v6 + 1384) = 2;
  *(void *)(v6 + 139_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "electrocardiogram";
  *(void *)(v6 + 1400) = 17LL;
  *(_BYTE *)(v6 + 140_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 1416) = "electrodermal_activity";
  *(void *)(v6 + 1424) = 22LL;
  *(_BYTE *)(v6 + 143_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 1440) = "elevation";
  *(void *)(v6 + 144_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 9LL;
  *(_BYTE *)(v6 + 1456) = 2;
  *(void *)(v6 + 1464) = "elevation_gain";
  *(void *)(v6 + 147_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 14LL;
  *(_BYTE *)(v6 + 1480) = 2;
  *(void *)(v6 + 148_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "energy_consumed";
  *(void *)(v6 + 1496) = 15LL;
  *(_BYTE *)(v6 + 1504) = 2;
  *(void *)(v6 + 151_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "environment_noise";
  *(void *)(v6 + 1520) = 17LL;
  *(_BYTE *)(v6 + 152_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 1536) = "environmental_sound_reduction";
  *(void *)(v6 + 1544) = 29LL;
  *(_BYTE *)(v6 + 155_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 1560) = "eye_prescription";
  *(void *)(v6 + 1584) = "fainting";
  *(void *)(v6 + 160_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "fat";
  *(void *)(v6 + 163_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "fat_monounsaturated";
  *(void *)(v6 + 1656) = "fat_polyunsaturated";
  *(void *)(v6 + 1680) = "fat_saturated";
  *(void *)(v6 + 1704) = "fatigue";
  *(void *)(v6 + 172_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "fertile_window";
  *(void *)(v6 + 175_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "fever";
  *(void *)(v6 + 1776) = "fiber";
  *(void *)(v6 + 1800) = "fitzpatrick_skin_type";
  *(void *)(v6 + 1824) = "flights_climbed";
  *(void *)(v6 + 184_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "folate";
  *(void *)(v6 + 187_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "forced_expiratory_volume";
  *(void *)(v6 + 1896) = "forced_vital_capacity";
  *(void *)(v6 + 1920) = "general_symptom";
  *(void *)(v6 + 1944) = "genomes";
  *(void *)(v6 + 196_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "ground_contact_time";
  *(void *)(v6 + 199_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "hair";
  *(void *)(v6 + 2256) = "heartbeat_rapid_pounding_or_fluttering";
  *(void *)(v6 + 2424) = "immunizations";
  *(void *)(v6 + 2520) = "insulin_delivery";
  *(void *)(v6 + 2616) = "irregular_heart_beat";
  *(void *)(v6 + 271_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "lean_body_mass";
  *(void *)(v6 + 280_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "lower_back_pain";
  *(void *)(v6 + 2904) = "medication_dose_event";
  *(void *)(v6 + 295_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "medications_that_affect_heart_rate";
  *(void *)(v6 + 2976) = "memory_lapse";
  *(void *)(v6 + 304_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "menstrual_period_length";
  *(void *)(v6 + 307_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "menstruation";
  *(void *)(v6 + 3096) = "menstruation_prediction";
  *(void *)(v6 + 3120) = "menstruation_product";
  *(void *)(v6 + 3144) = "menstruation_symptoms";
  *(void *)(v6 + 316_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "mindful";
  *(void *)(v6 + 319_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "molybdenum";
  *(void *)(v6 + 3216) = "mood_change";
  *(void *)(v6 + 3240) = "nausea";
  *(void *)(v6 + 3264) = "niacin";
  *(void *)(v6 + 328_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "night_sweats";
  *(void *)(v6 + 331_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "nikeFuel";
  *(void *)(v6 + 3336) = "number_of_times_fallen";
  *(void *)(v6 + 3360) = "ovulation";
  *(void *)(v6 + 3384) = "ovulation_estimate";
  *(void *)(v6 + 340_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "ovulation_test_result";
  *(void *)(v6 + 343_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "pantothenic_acid";
  *(void *)(v6 + 3456) = "peak_expiratory_flow_rate";
  *(void *)(v6 + 3464) = 25LL;
  *(void *)(v6 + 3480) = "pelvic_pain";
  *(void *)(v6 + 3504) = "peripheral_perfusion_index";
  *(void *)(v6 + 3576) = "phosphorus";
  *(void *)(v6 + 367_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "pregnancy_factor";
  *(void *)(v6 + 376_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "prologned_periods";
  *(void *)(v6 + 3864) = "resting_heart_rate";
  *(void *)(v6 + 3960) = "running_stride_length";
  *(void *)(v6 + 4056) = "shortness_of_breath";
  *(void *)(v6 + 4416) = "sleep_stage_light";
  *(void *)(v6 + 4400) = 16LL;
  *(_BYTE *)(v6 + 440_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 436_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "sleep_stage_core";
  *(void *)(v6 + 4376) = 16LL;
  *(_BYTE *)(v6 + 4384) = 2;
  *(void *)(v6 + 439_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "sleep_stage_deep";
  *(_BYTE *)(v6 + 4336) = 2;
  *(void *)(v6 + 4344) = "sleep_stage_awake";
  *(void *)(v6 + 435_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 17LL;
  *(_BYTE *)(v6 + 4360) = 2;
  *(void *)(v6 + 4304) = 14LL;
  *(_BYTE *)(v6 + 431_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 4320) = "sleep_score";
  *(void *)(v6 + 432_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 11LL;
  *(void *)(v6 + 4296) = "sleep_schedule";
  *(void *)(v6 + 4280) = 13LL;
  *(_BYTE *)(v6 + 428_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 408_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 27LL;
  *(void *)(v6 + 4256) = 9LL;
  *(_BYTE *)(v6 + 4264) = 2;
  *(void *)(v6 + 427_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "sleep_quality";
  *(void *)(v6 + 4224) = "sleep_changes";
  *(void *)(v6 + 423_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 13LL;
  *(_BYTE *)(v6 + 4240) = 2;
  *(void *)(v6 + 424_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "sleep_end";
  *(void *)(v6 + 420_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 11LL;
  *(_BYTE *)(v6 + 4216) = 2;
  *(void *)(v6 + 4176) = "sleep";
  *(void *)(v6 + 4184) = 5LL;
  *(_BYTE *)(v6 + 419_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 4200) = "sleep_apnea";
  *(void *)(v6 + 415_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "skin";
  *(void *)(v6 + 4160) = 4LL;
  *(_BYTE *)(v6 + 416_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 412_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "sit";
  *(_BYTE *)(v6 + 4120) = 2;
  *(void *)(v6 + 4136) = 3LL;
  *(_BYTE *)(v6 + 4144) = 2;
  *(void *)(v6 + 156_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 16LL;
  *(void *)(v6 + 4104) = "sinus_congestion";
  *(_BYTE *)(v6 + 4096) = 2;
  *(void *)(v6 + 411_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 16LL;
  *(_BYTE *)(v6 + 1576) = 2;
  *(void *)(v6 + 4080) = "signed_clinical_data_record";
  *(void *)(v6 + 4064) = 19LL;
  *(_BYTE *)(v6 + 407_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 403_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "sexual_activity";
  *(_BYTE *)(v6 + 4024) = 2;
  *(void *)(v6 + 4040) = 15LL;
  *(_BYTE *)(v6 + 404_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 400_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "selenium";
  *(void *)(v6 + 399_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 10LL;
  *(_BYTE *)(v6 + 4000) = 2;
  *(void *)(v6 + 4016) = 8LL;
  *(void *)(v6 + 159_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 8LL;
  *(void *)(v6 + 3984) = "runny_nose";
  *(void *)(v6 + 396_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 21LL;
  *(_BYTE *)(v6 + 3976) = 2;
  *(void *)(v6 + 3936) = "running_power";
  *(_BYTE *)(v6 + 392_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 3944) = 13LL;
  *(_BYTE *)(v6 + 395_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 391_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "running_pace";
  *(void *)(v6 + 3896) = 10LL;
  *(_BYTE *)(v6 + 3904) = 2;
  *(void *)(v6 + 3920) = 12LL;
  *(_BYTE *)(v6 + 1600) = 2;
  *(void *)(v6 + 388_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "riboflavin";
  *(void *)(v6 + 387_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 18LL;
  *(_BYTE *)(v6 + 3880) = 2;
  *(void *)(v6 + 3840) = "resting_energy_level";
  *(_BYTE *)(v6 + 383_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 384_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 20LL;
  *(_BYTE *)(v6 + 3856) = 2;
  *(void *)(v6 + 3816) = "respiratory_rate";
  *(void *)(v6 + 3800) = 7LL;
  *(_BYTE *)(v6 + 380_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 3824) = 16LL;
  *(void *)(v6 + 1616) = 3LL;
  *(void *)(v6 + 379_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "protein";
  *(void *)(v6 + 3776) = 17LL;
  *(_BYTE *)(v6 + 3784) = 2;
  *(void *)(v6 + 3744) = "progesterone_test_result";
  *(_BYTE *)(v6 + 3736) = 2;
  *(void *)(v6 + 375_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 24LL;
  *(_BYTE *)(v6 + 3760) = 2;
  *(void *)(v6 + 3720) = "procedure_record";
  *(void *)(v6 + 3704) = 21LL;
  *(_BYTE *)(v6 + 371_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 372_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 16LL;
  *(_BYTE *)(v6 + 1624) = 2;
  *(void *)(v6 + 3696) = "pregnancy_test_result";
  *(void *)(v6 + 3680) = 16LL;
  *(_BYTE *)(v6 + 368_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 364_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "pregnancy";
  *(_BYTE *)(v6 + 3640) = 2;
  *(void *)(v6 + 3656) = 9LL;
  *(_BYTE *)(v6 + 3664) = 2;
  *(void *)(v6 + 3624) = "potassium";
  *(void *)(v6 + 360_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 15LL;
  *(_BYTE *)(v6 + 3616) = 2;
  *(void *)(v6 + 363_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 9LL;
  *(void *)(v6 + 1640) = 19LL;
  *(void *)(v6 + 3600) = "physical_effort";
  *(void *)(v6 + 3584) = 10LL;
  *(_BYTE *)(v6 + 359_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 355_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "persistent_spotting";
  *(_BYTE *)(v6 + 3544) = 2;
  *(void *)(v6 + 3560) = 19LL;
  *(_BYTE *)(v6 + 356_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(_BYTE *)(v6 + 3496) = 2;
  *(void *)(v6 + 352_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "persistent_intermenstrual_bleeding";
  *(void *)(v6 + 351_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 26LL;
  *(_BYTE *)(v6 + 3520) = 2;
  *(void *)(v6 + 3536) = 34LL;
  *(_BYTE *)(v6 + 164_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 1664) = 19LL;
  *(_BYTE *)(v6 + 167_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(_BYTE *)(v6 + 344_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(_BYTE *)(v6 + 347_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 348_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 11LL;
  *(void *)(v6 + 168_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 13LL;
  *(_BYTE *)(v6 + 1696) = 2;
  *(_BYTE *)(v6 + 3400) = 2;
  *(void *)(v6 + 3416) = 21LL;
  *(_BYTE *)(v6 + 3424) = 2;
  *(void *)(v6 + 3440) = 16LL;
  *(void *)(v6 + 171_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 7LL;
  *(_BYTE *)(v6 + 1720) = 2;
  *(_BYTE *)(v6 + 335_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 336_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 9LL;
  *(_BYTE *)(v6 + 3376) = 2;
  *(void *)(v6 + 339_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 18LL;
  *(void *)(v6 + 1736) = 14LL;
  *(_BYTE *)(v6 + 1744) = 2;
  *(_BYTE *)(v6 + 3304) = 2;
  *(void *)(v6 + 3320) = 8LL;
  *(_BYTE *)(v6 + 332_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 3344) = 22LL;
  *(void *)(v6 + 1760) = 5LL;
  *(_BYTE *)(v6 + 176_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(_BYTE *)(v6 + 3256) = 2;
  *(void *)(v6 + 327_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 6LL;
  *(_BYTE *)(v6 + 3280) = 2;
  *(void *)(v6 + 3296) = 12LL;
  *(void *)(v6 + 1784) = 5LL;
  *(_BYTE *)(v6 + 179_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(_BYTE *)(v6 + 320_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 3224) = 11LL;
  *(_BYTE *)(v6 + 323_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 324_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 6LL;
  *(void *)(v6 + 180_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 21LL;
  *(_BYTE *)(v6 + 1816) = 2;
  *(_BYTE *)(v6 + 3160) = 2;
  *(void *)(v6 + 3176) = 7LL;
  *(_BYTE *)(v6 + 3184) = 2;
  *(void *)(v6 + 3200) = 10LL;
  *(void *)(v6 + 183_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 15LL;
  *(_BYTE *)(v6 + 1840) = 2;
  *(_BYTE *)(v6 + 311_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 312_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 20LL;
  *(_BYTE *)(v6 + 3136) = 2;
  *(void *)(v6 + 315_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 21LL;
  *(void *)(v6 + 1856) = 6LL;
  *(_BYTE *)(v6 + 1864) = 2;
  *(void *)(v6 + 1880) = 24LL;
  *(void *)(v6 + 3080) = 12LL;
  *(_BYTE *)(v6 + 308_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 3104) = 23LL;
  *(_BYTE *)(v6 + 188_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 3056) = 23LL;
  *(_BYTE *)(v6 + 3040) = 2;
  *(_BYTE *)(v6 + 3064) = 2;
  *(void *)(v6 + 3024) = "menstrual_pain";
  *(void *)(v6 + 300_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 22LL;
  *(_BYTE *)(v6 + 3016) = 2;
  *(void *)(v6 + 303_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 14LL;
  *(void *)(v6 + 3000) = "menstrual_cycle_length";
  *(_BYTE *)(v6 + 296_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 2984) = 12LL;
  *(_BYTE *)(v6 + 299_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 1904) = 21LL;
  *(void *)(v6 + 2960) = 34LL;
  *(void *)(v6 + 2936) = 11LL;
  *(_BYTE *)(v6 + 2944) = 2;
  *(_BYTE *)(v6 + 191_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 292_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "medications";
  *(void *)(v6 + 291_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 21LL;
  *(_BYTE *)(v6 + 2920) = 2;
  *(void *)(v6 + 2880) = "manganese";
  *(_BYTE *)(v6 + 287_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 288_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 9LL;
  *(_BYTE *)(v6 + 2896) = 2;
  *(void *)(v6 + 2856) = "magnesium";
  *(void *)(v6 + 2840) = 4LL;
  *(_BYTE *)(v6 + 284_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 2864) = 9LL;
  *(void *)(v6 + 192_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 15LL;
  *(void *)(v6 + 283_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "lynx";
  *(void *)(v6 + 2816) = 15LL;
  *(_BYTE *)(v6 + 2824) = 2;
  *(void *)(v6 + 2784) = "low_heart_rate";
  *(_BYTE *)(v6 + 2776) = 2;
  *(void *)(v6 + 279_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 14LL;
  *(_BYTE *)(v6 + 2800) = 2;
  *(void *)(v6 + 2760) = "loss_of_taste";
  *(void *)(v6 + 2744) = 13LL;
  *(_BYTE *)(v6 + 275_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 276_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 13LL;
  *(_BYTE *)(v6 + 1936) = 2;
  *(void *)(v6 + 2736) = "loss_of_smell";
  *(void *)(v6 + 2720) = 14LL;
  *(_BYTE *)(v6 + 272_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 268_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "lactation";
  *(_BYTE *)(v6 + 2680) = 2;
  *(void *)(v6 + 2696) = 9LL;
  *(_BYTE *)(v6 + 2704) = 2;
  *(void *)(v6 + 2664) = "lab_results";
  *(void *)(v6 + 264_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 16LL;
  *(_BYTE *)(v6 + 2656) = 2;
  *(void *)(v6 + 267_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 11LL;
  *(void *)(v6 + 195_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 7LL;
  *(void *)(v6 + 2640) = "irregular_period";
  *(void *)(v6 + 2624) = 20LL;
  *(_BYTE *)(v6 + 263_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 259_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "iron";
  *(_BYTE *)(v6 + 2584) = 2;
  *(void *)(v6 + 2600) = 4LL;
  *(_BYTE *)(v6 + 260_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 256_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "iodine";
  *(void *)(v6 + 255_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 9LL;
  *(_BYTE *)(v6 + 2560) = 2;
  *(void *)(v6 + 2576) = 6LL;
  *(_BYTE *)(v6 + 1960) = 2;
  *(void *)(v6 + 2544) = "insurance";
  *(void *)(v6 + 252_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 16LL;
  *(_BYTE *)(v6 + 2536) = 2;
  *(void *)(v6 + 2496) = "inhaler_usage";
  *(_BYTE *)(v6 + 248_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 2504) = 13LL;
  *(_BYTE *)(v6 + 251_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 247_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "infrequent_period";
  *(void *)(v6 + 2456) = 6LL;
  *(_BYTE *)(v6 + 2464) = 2;
  *(void *)(v6 + 2480) = 17LL;
  *(void *)(v6 + 1976) = 19LL;
  *(void *)(v6 + 244_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "in_bed";
  *(void *)(v6 + 243_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 13LL;
  *(_BYTE *)(v6 + 2440) = 2;
  *(void *)(v6 + 2400) = "hypertension_event";
  *(_BYTE *)(v6 + 239_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 240_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 18LL;
  *(_BYTE *)(v6 + 2416) = 2;
  *(void *)(v6 + 2376) = "hot_flashes";
  *(void *)(v6 + 2360) = 15LL;
  *(_BYTE *)(v6 + 236_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 2384) = 11LL;
  *(_BYTE *)(v6 + 1984) = 2;
  *(void *)(v6 + 235_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "high_heart_rate";
  *(void *)(v6 + 2336) = 10LL;
  *(_BYTE *)(v6 + 2344) = 2;
  *(void *)(v6 + 2304) = "heartburn";
  *(void *)(v6 + 231_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 9LL;
  *(_BYTE *)(v6 + 2320) = 2;
  *(void *)(v6 + 232_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "hemoglobin";
  *(_BYTE *)(v6 + 227_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 2280) = "heartbeat_skipped";
  *(void *)(v6 + 228_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 17LL;
  *(_BYTE *)(v6 + 2296) = 2;
  *(void *)(v6 + 2264) = 38LL;
  *(void *)(v6 + 2240) = 22LL;
  *(_BYTE *)(v6 + 224_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 2000) = 4LL;
  *(void *)(v6 + 223_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "heart_rate_variability";
  *(void *)(v6 + 2216) = 19LL;
  *(_BYTE *)(v6 + 2224) = 2;
  *(void *)(v6 + 2184) = "heart_rate_range";
  *(void *)(v6 + 219_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 16LL;
  *(_BYTE *)(v6 + 2200) = 2;
  *(void *)(v6 + 220_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "heart_rate_recovery";
  *(_BYTE *)(v6 + 215_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 2160) = "hearing";
  *(void *)(v6 + 216_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 7LL;
  *(_BYTE *)(v6 + 2176) = 2;
  *(void *)(v6 + 2120) = 24LL;
  *(_BYTE *)(v6 + 212_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 2136) = "health_trends";
  *(void *)(v6 + 2144) = 13LL;
  *(_BYTE *)(v6 + 200_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 2096) = 15LL;
  *(_BYTE *)(v6 + 2104) = 2;
  *(void *)(v6 + 211_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "headphone_audio_exposure";
  *(void *)(v6 + 2064) = "headache";
  *(void *)(v6 + 207_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 8LL;
  *(_BYTE *)(v6 + 2080) = 2;
  *(void *)(v6 + 208_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "headphone_audio";
  *(_BYTE *)(v6 + 203_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 2040) = "handwash";
  *(void *)(v6 + 204_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 8LL;
  *(_BYTE *)(v6 + 2056) = 2;
  *(void *)(v6 + 2016) = "hair_loss";
  *(void *)(v6 + 2024) = 9LL;
  *(void *)(v6 + 4424) = 17LL;
  *(_BYTE *)(v6 + 443_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 4440) = "sleep_stage_rem";
  *(void *)(v6 + 444_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 15LL;
  *(_BYTE *)(v6 + 4456) = 2;
  *(void *)(v6 + 4464) = "sleep_start";
  *(void *)(v6 + 447_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 11LL;
  *(_BYTE *)(v6 + 4480) = 2;
  *(void *)(v6 + 448_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "sleeping_wrist_temperature";
  *(void *)(v6 + 4496) = 26LL;
  *(_BYTE *)(v6 + 4504) = 2;
  *(void *)(v6 + 451_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "snoring";
  *(void *)(v6 + 4520) = 7LL;
  *(_BYTE *)(v6 + 452_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 4536) = "sodium";
  *(void *)(v6 + 4544) = 6LL;
  *(_BYTE *)(v6 + 455_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 4560) = "sore_throat";
  *(void *)(v6 + 456_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 11LL;
  *(_BYTE *)(v6 + 4576) = 2;
  *(void *)(v6 + 4584) = "spotting";
  *(void *)(v6 + 459_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 8LL;
  *(_BYTE *)(v6 + 4600) = 2;
  *(void *)(v6 + 460_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "stair_speed_down";
  *(void *)(v6 + 4616) = 16LL;
  *(_BYTE *)(v6 + 4624) = 2;
  *(void *)(v6 + 463_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "stair_speed_up";
  *(void *)(v6 + 4640) = 14LL;
  *(_BYTE *)(v6 + 464_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 4656) = "step_length";
  *(void *)(v6 + 4664) = 11LL;
  *(_BYTE *)(v6 + 467_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 4680) = "stress";
  *(void *)(v6 + 468_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 6LL;
  *(_BYTE *)(v6 + 4696) = 2;
  *(void *)(v6 + 4704) = "thiamin";
  *(void *)(v6 + 471_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 7LL;
  *(_BYTE *)(v6 + 4720) = 2;
  *(void *)(v6 + 472_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "time_in_daylight";
  *(void *)(v6 + 4736) = 16LL;
  *(_BYTE *)(v6 + 4744) = 2;
  *(void *)(v6 + 475_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "toothbrushing";
  *(void *)(v6 + 4760) = 13LL;
  *(_BYTE *)(v6 + 476_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 4776) = "underwater_depth";
  *(void *)(v6 + 4784) = 16LL;
  *(_BYTE *)(v6 + 479_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 4800) = "uv_index";
  *(void *)(v6 + 480_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 8LL;
  *(_BYTE *)(v6 + 4816) = 2;
  *(void *)(v6 + 4824) = "vaccination_record";
  *(void *)(v6 + 483_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 18LL;
  *(_BYTE *)(v6 + 4840) = 2;
  *(void *)(v6 + 484_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "vaginal_dryness";
  *(void *)(v6 + 4856) = 15LL;
  *(_BYTE *)(v6 + 4864) = 2;
  *(void *)(v6 + 487_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "verifiable_clinical_record";
  *(void *)(v6 + 4880) = 26LL;
  *(_BYTE *)(v6 + 488_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 4896) = "vertical_oscillation";
  *(void *)(v6 + 4904) = 20LL;
  *(_BYTE *)(v6 + 491_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 4920) = "vital_sign_record";
  *(void *)(v6 + 492_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 17LL;
  *(_BYTE *)(v6 + 4936) = 2;
  *(void *)(v6 + 4944) = "vitamin";
  *(void *)(v6 + 495_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 7LL;
  *(_BYTE *)(v6 + 4960) = 2;
  *(void *)(v6 + 496_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "vitamin_a";
  *(void *)(v6 + 4976) = 9LL;
  *(_BYTE *)(v6 + 4984) = 2;
  *(void *)(v6 + 499_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "vitamin_b12";
  *(void *)(v6 + 5000) = 11LL;
  *(_BYTE *)(v6 + 500_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 5016) = "vitamin_b6";
  *(void *)(v6 + 5024) = 10LL;
  *(_BYTE *)(v6 + 503_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 5040) = "vitamin_c";
  *(void *)(v6 + 504_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 9LL;
  *(_BYTE *)(v6 + 5056) = 2;
  *(void *)(v6 + 5064) = "vitamin_d";
  *(void *)(v6 + 507_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 9LL;
  *(_BYTE *)(v6 + 5080) = 2;
  *(void *)(v6 + 508_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "vitamin_e";
  *(void *)(v6 + 5096) = 9LL;
  *(_BYTE *)(v6 + 5104) = 2;
  *(void *)(v6 + 511_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "vitamin_k";
  *(void *)(v6 + 5120) = 9LL;
  *(_BYTE *)(v6 + 512_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 5136) = "vo2_max";
  *(void *)(v6 + 5144) = 7LL;
  *(_BYTE *)(v6 + 515_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 5160) = "vomiting";
  *(void *)(v6 + 516_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 8LL;
  *(_BYTE *)(v6 + 5176) = 2;
  *(void *)(v6 + 5184) = "waist_circumference";
  *(void *)(v6 + 519_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 19LL;
  *(_BYTE *)(v6 + 5200) = 2;
  *(void *)(v6 + 520_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "walking_asymmetry";
  *(void *)(v6 + 5216) = 17LL;
  *(_BYTE *)(v6 + 5224) = 2;
  *(void *)(v6 + 523_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "walking_double_support_percentage";
  *(void *)(v6 + 5240) = 33LL;
  *(_BYTE *)(v6 + 524_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 5256) = "walking_heart_rate_average";
  *(void *)(v6 + 5264) = 26LL;
  *(_BYTE *)(v6 + 527_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 5280) = "walking_pace";
  *(void *)(v6 + 528_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 12LL;
  *(_BYTE *)(v6 + 5296) = 2;
  *(void *)(v6 + 5304) = "walking_steadiness";
  *(void *)(v6 + 531_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 18LL;
  *(_BYTE *)(v6 + 5320) = 2;
  *(void *)(v6 + 532_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "walking_stride_length";
  *(void *)(v6 + 5336) = 21LL;
  *(_BYTE *)(v6 + 5344) = 2;
  *(void *)(v6 + 535_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "water";
  *(void *)(v6 + 5360) = 5LL;
  *(_BYTE *)(v6 + 536_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 5376) = "water_temperature";
  *(void *)(v6 + 5384) = 17LL;
  *(_BYTE *)(v6 + 539_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 5400) = "wheelchair_pace";
  *(void *)(v6 + 540_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 15LL;
  *(_BYTE *)(v6 + 5416) = 2;
  *(void *)(v6 + 5424) = "wheelchair_use";
  *(void *)(v6 + 543_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 14LL;
  *(_BYTE *)(v6 + 5440) = 2;
  *(void *)(v6 + 544_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "wheezing";
  *(void *)(v6 + 5456) = 8LL;
  *(_BYTE *)(v6 + 5464) = 2;
  *(void *)(v6 + 547_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "wrist_temperature";
  *(void *)(v6 + 5480) = 17LL;
  *(_BYTE *)(v6 + 548_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 5496) = "zinc";
  *(void *)(v6 + 5504) = 4LL;
  *(_BYTE *)(v6 + 551_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 5520) = "active_energy";
  *(void *)(v6 + 552_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 13LL;
  *(_BYTE *)(v6 + 5536) = 2;
  *(void *)(v6 + 5544) = "activity";
  *(void *)(v6 + 555_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 8LL;
  *(_BYTE *)(v6 + 5560) = 2;
  *(void *)(v6 + 556_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "basal_body_temperature";
  *(void *)(v6 + 5576) = 22LL;
  *(_BYTE *)(v6 + 5584) = 2;
  *(void *)(v6 + 559_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "basal_energy_burned";
  *(void *)(v6 + 5600) = 19LL;
  *(_BYTE *)(v6 + 560_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 5616) = "body_mass_index";
  *(void *)(v6 + 5624) = 15LL;
  *(_BYTE *)(v6 + 563_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 5640) = "body_temperature";
  *(void *)(v6 + 564_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 16LL;
  *(_BYTE *)(v6 + 5656) = 2;
  *(void *)(v6 + 5664) = "brisk_minute_goal";
  *(void *)(v6 + 567_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 17LL;
  *(_BYTE *)(v6 + 5680) = 2;
  *(void *)(v6 + 568_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "burned_generic";
  *(void *)(v6 + 5696) = 14LL;
  *(_BYTE *)(v6 + 5704) = 2;
  *(void *)(v6 + 571_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "exercise_goal";
  *(void *)(v6 + 5720) = 13LL;
  *(_BYTE *)(v6 + 572_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 5736) = "exercise_minutes";
  *(void *)(v6 + 5744) = 16LL;
  *(_BYTE *)(v6 + 575_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 5760) = "exercise_ring";
  *(void *)(v6 + 576_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 13LL;
  *(_BYTE *)(v6 + 5776) = 2;
  *(void *)(v6 + 5784) = "heart_rate";
  *(void *)(v6 + 579_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 10LL;
  *(_BYTE *)(v6 + 5800) = 2;
  *(void *)(v6 + 580_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "height";
  *(void *)(v6 + 5816) = 6LL;
  *(_BYTE *)(v6 + 5824) = 2;
  *(void *)(v6 + 583_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "move";
  *(void *)(v6 + 5840) = 4LL;
  *(_BYTE *)(v6 + 584_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 5856) = "move_goal";
  *(void *)(v6 + 5864) = 9LL;
  *(_BYTE *)(v6 + 587_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 5880) = "move_ring";
  *(void *)(v6 + 588_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 9LL;
  *(_BYTE *)(v6 + 5896) = 2;
  *(void *)(v6 + 5904) = "oxygen_saturation";
  *(void *)(v6 + 591_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 17LL;
  *(_BYTE *)(v6 + 5920) = 2;
  *(void *)(v6 + 592_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "push_count";
  *(void *)(v6 + 5936) = 10LL;
  *(_BYTE *)(v6 + 5944) = 2;
  *(void *)(v6 + 595_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "resting_energy";
  *(void *)(v6 + 5960) = 14LL;
  *(_BYTE *)(v6 + 596_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 5976) = "ring_general";
  *(void *)(v6 + 5984) = 12LL;
  *(_BYTE *)(v6 + 599_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 6000) = "roll_goal";
  *(void *)(v6 + 600_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 9LL;
  *(_BYTE *)(v6 + 6016) = 2;
  *(void *)(v6 + 6024) = "roll_ring";
  *(void *)(v6 + 603_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 9LL;
  *(_BYTE *)(v6 + 6040) = 2;
  *(void *)(v6 + 604_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "sex";
  *(void *)(v6 + 6056) = 3LL;
  *(_BYTE *)(v6 + 6064) = 2;
  *(void *)(v6 + 607_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "six_minute_walk";
  *(void *)(v6 + 6080) = 15LL;
  *(_BYTE *)(v6 + 608_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 6096) = "stand";
  *(void *)(v6 + 6104) = 5LL;
  *(_BYTE *)(v6 + 611_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 6120) = "stand_goal";
  *(void *)(v6 + 612_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 10LL;
  *(_BYTE *)(v6 + 6136) = 2;
  *(void *)(v6 + 6144) = "stand_ring";
  *(void *)(v6 + 615_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 10LL;
  *(_BYTE *)(v6 + 6160) = 2;
  *(void *)(v6 + 616_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "step_goal";
  *(void *)(v6 + 6176) = 9LL;
  *(_BYTE *)(v6 + 6184) = 2;
  *(void *)(v6 + 619_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "swimming_stroke";
  *(void *)(v6 + 6200) = 15LL;
  *(_BYTE *)(v6 + 620_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 6216) = "walk_run_distance";
  *(void *)(v6 + 6224) = 17LL;
  *(_BYTE *)(v6 + 623_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 6240) = "walking_speed";
  *(void *)(v6 + 624_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 13LL;
  *(_BYTE *)(v6 + 6256) = 2;
  *(void *)(v6 + 6264) = "weight";
  *(void *)(v6 + 627_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 6LL;
  *(_BYTE *)(v6 + 6280) = 2;
  *(void *)(v6 + 628_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "wheelchair_distance";
  *(void *)(v6 + 6296) = 19LL;
  *(_BYTE *)(v6 + 6304) = 2;
  *(void *)(v6 + 631_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "bicycling";
  *(void *)(v6 + 6320) = 9LL;
  *(_BYTE *)(v6 + 632_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 6336) = "run";
  *(void *)(v6 + 6344) = 3LL;
  *(_BYTE *)(v6 + 635_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  *(void *)(v6 + 6360) = "stairs_climbing";
  *(void *)(v6 + 636_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 15LL;
  *(_BYTE *)(v6 + 6376) = 2;
  *(void *)(v6 + 6384) = "swim";
  *(void *)(v6 + 639_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 4LL;
  *(_BYTE *)(v6 + 6400) = 2;
  *(void *)(v6 + 640_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = "walk";
  *(void *)(v6 + 6416) = 4LL;
  *(_BYTE *)(v6 + 6424) = 2;
  *(void *)(v6 + 643_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = "wheelchair";
  *(void *)(v6 + 6440) = 10LL;
  *(_BYTE *)(v6 + 644_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 2;
  *(void *)(v6 + 6456) = "stepCount";
  *(void *)(v6 + 6464) = 9LL;
  *(_BYTE *)(v6 + 647_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2;
  v7._rawValue = (void *)PhoneRingsSnippet.body.getter(v5);
  v8._countAndFlagsBits = a1;
  v8._object = a2;
  unint64_t v9 = _findStringSwitchCase(cases:string:)(v7, v8);
  swift_bridgeObjectRelease(v7._rawValue);
  swift_bridgeObjectRelease(a2);
  unint64_t v10 = v9 - 128;
  if (v9 < 0x80) {
    return v9;
  }
  uint64_t result = 183LL;
  unint64_t v9 = 128LL;
  switch(v10)
  {
    case 0uLL:
      return v9;
    case 1uLL:
      return 129LL;
    case 2uLL:
      return 130LL;
    case 3uLL:
      return 131LL;
    case 4uLL:
      return 132LL;
    case 5uLL:
      return 133LL;
    case 6uLL:
      return 134LL;
    case 7uLL:
      return 135LL;
    case 8uLL:
      return 136LL;
    case 9uLL:
      return 137LL;
    case 0xAuLL:
      return 138LL;
    case 0xBuLL:
      return 139LL;
    case 0xCuLL:
      return 140LL;
    case 0xDuLL:
      return 141LL;
    case 0xEuLL:
      return 142LL;
    case 0xFuLL:
      return 143LL;
    case 0x10uLL:
      return 144LL;
    case 0x11uLL:
      return 145LL;
    case 0x12uLL:
      return 146LL;
    case 0x13uLL:
      return 147LL;
    case 0x14uLL:
      return 148LL;
    case 0x15uLL:
      return 149LL;
    case 0x16uLL:
      return 150LL;
    case 0x17uLL:
      return 151LL;
    case 0x18uLL:
      return 152LL;
    case 0x19uLL:
      return 153LL;
    case 0x1AuLL:
      return 154LL;
    case 0x1BuLL:
      return 155LL;
    case 0x1CuLL:
      return 156LL;
    case 0x1DuLL:
      return 157LL;
    case 0x1EuLL:
      return 158LL;
    case 0x1FuLL:
      return 159LL;
    case 0x20uLL:
      return 160LL;
    case 0x21uLL:
      return 161LL;
    case 0x22uLL:
      return 162LL;
    case 0x23uLL:
      return 163LL;
    case 0x24uLL:
      return 164LL;
    case 0x25uLL:
      return 165LL;
    case 0x26uLL:
      return 166LL;
    case 0x27uLL:
      return 167LL;
    case 0x28uLL:
      return 168LL;
    case 0x29uLL:
      return 169LL;
    case 0x2AuLL:
      return 170LL;
    case 0x2BuLL:
      return 171LL;
    case 0x2CuLL:
      return 172LL;
    case 0x2DuLL:
      return 173LL;
    case 0x2EuLL:
      return 174LL;
    case 0x2FuLL:
      return 175LL;
    case 0x30uLL:
      return 176LL;
    case 0x31uLL:
      return 177LL;
    case 0x32uLL:
      return 178LL;
    case 0x33uLL:
      return 179LL;
    case 0x34uLL:
      return 180LL;
    case 0x35uLL:
      return 181LL;
    case 0x36uLL:
      return 182LL;
    case 0x37uLL:
      return result;
    case 0x38uLL:
      uint64_t result = 184LL;
      break;
    case 0x39uLL:
      uint64_t result = 185LL;
      break;
    case 0x3AuLL:
      uint64_t result = 186LL;
      break;
    case 0x3BuLL:
      uint64_t result = 187LL;
      break;
    case 0x3CuLL:
      uint64_t result = 188LL;
      break;
    case 0x3DuLL:
      uint64_t result = 189LL;
      break;
    case 0x3EuLL:
      uint64_t result = 190LL;
      break;
    case 0x3FuLL:
      uint64_t result = 191LL;
      break;
    default:
      uint64_t result = 270LL;
      break;
  }

  return result;
}

_UNKNOWN **sub_112234()
{
  return &off_17B2C0;
}

void sub_112240(unsigned __int16 *a1, unsigned __int16 *a2)
{
}

void sub_11224C()
{
}

uint64_t sub_112254(uint64_t a1)
{
  return sub_12BC8C(a1, *v1);
}

void sub_11225C(uint64_t a1)
{
}

uint64_t sub_112264@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t result = sub_110A0C(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_112290@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10F1C0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1122B8(void *a1@<X8>)
{
  *a1 = &off_17B2C0;
}

_WORD *initializeBufferWithCopyOfBuffer for HealthDataType(_WORD *result, _WORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for HealthDataType(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFEF3)
  {
    if (a2 + 269 <= 0xFFFEFFFF) {
      int v2 = 2;
    }
    else {
      int v2 = 4;
    }
    if (a2 + 269 < 0xFF0000) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = *((unsigned __int8 *)a1 + 2);
      if (!*((_BYTE *)a1 + 2)) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 16)) - 270;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for HealthDataType(_WORD *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 269 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 269 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFEF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (a2 <= 0xFEF2) {
    return ((uint64_t (*)(void))((char *)&loc_1123AC + 4 * byte_13EB61[v5]))();
  }
  *a1 = a2 + 269;
  return ((uint64_t (*)(void))((char *)sub_1123E4 + 4 * byte_13EB5C[v5]))();
}

uint64_t sub_1123E4(uint64_t result)
{
  *(_BYTE *)(result + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v1;
  return result;
}

uint64_t sub_1123EC(uint64_t result, int a2)
{
  *(_WORD *)(result + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0;
  if (a2) {
    JUMPOUT(0x1123F4LL);
  }
  return result;
}

uint64_t sub_112400(uint64_t result, int a2)
{
  *(_DWORD *)(result + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0;
  if (!a2) {
    JUMPOUT(0x112408LL);
  }
  *(_WORD *)uint64_t result = a2 + 269;
  return result;
}

uint64_t sub_11240C(uint64_t result)
{
  *(_DWORD *)(result + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v1;
  return result;
}

uint64_t sub_112414(uint64_t result)
{
  *(_WORD *)(result + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v1;
  return result;
}

uint64_t sub_112420(unsigned __int16 *a1)
{
  return *a1;
}

_WORD *sub_112428(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for HealthDataType()
{
  return &type metadata for HealthDataType;
}

unint64_t sub_112444()
{
  unint64_t result = qword_1900B8;
  if (!qword_1900B8)
  {
    uint64_t v1 = sub_B64C(&qword_1900C0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1900B8);
  }

  return result;
}

unint64_t sub_11248C()
{
  unint64_t result = qword_1900C8;
  if (!qword_1900C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_13EC04, &type metadata for HealthDataType);
    atomic_store(result, (unint64_t *)&qword_1900C8);
  }

  return result;
}

uint64_t sub_1124C8()
{
  return 0x5F6E696D61746976LL;
}

void *sub_1124E4(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t v11 = (void *)swift_allocObject(v5, 240LL, 7LL);
  v11[2] = a1;
  memcpy(v11 + 3, a2, 0xA0uLL);
  v11[23] = a3;
  v11[24] = a4;
  sub_20004(a5, (uint64_t)(v11 + 25));
  return v11;
}

void *sub_11255C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  void v5[2] = a1;
  memcpy(v5 + 3, a2, 0xA0uLL);
  v5[23] = a3;
  v5[24] = a4;
  sub_20004(a5, (uint64_t)(v5 + 25));
  return v5;
}

uint64_t sub_1125AC(uint64_t a1)
{
  v2[17] = a1;
  v2[18] = v1;
  v2[19] = *v1;
  uint64_t v3 = type metadata accessor for Parse.DirectInvocation(0LL);
  v2[20] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[21] = v4;
  v2[22] = sub_A5C0(v4);
  uint64_t v5 = sub_494C(&qword_18B900);
  v2[23] = sub_A5C0(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  v2[24] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[25] = v7;
  v2[26] = sub_A5C0(v7);
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  v2[27] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[28] = v9;
  v2[29] = sub_D8CC(v9);
  v2[30] = sub_A5B8();
  uint64_t v10 = type metadata accessor for Parse(0LL);
  v2[31] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[32] = v11;
  v2[33] = sub_D8CC(v11);
  v2[34] = sub_A5B8();
  uint64_t v12 = type metadata accessor for USOParse(0LL);
  v2[35] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[36] = v13;
  v2[37] = sub_A5C0(v13);
  uint64_t v14 = type metadata accessor for Input(0LL);
  v2[38] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v2[39] = v15;
  v2[40] = sub_A5C0(v15);
  uint64_t v16 = sub_D984();
  v2[41] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v2[42] = v17;
  v2[43] = sub_D8CC(v17);
  v2[44] = sub_A5B8();
  v2[45] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_1126D8()
{
  uint64_t v1 = v0;
  uint64_t v3 = *(void *)(v0 + 136);
  int v2 = (void *)(v0 + 136);
  uint64_t v4 = v2[28];
  uint64_t v5 = v2[24];
  uint64_t v6 = v2[25];
  uint64_t v7 = v2[22];
  uint64_t v8 = v2[23];
  uint64_t v9 = v2[21];
  uint64_t v10 = Logger.workout.unsafeMutableAddressor();
  sub_A5DC(v10, (uint64_t)(v2 - 8));
  uint64_t v110 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v110(v4, v10, v5);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v8, v3, v9);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.debug.getter(v12);
  int v14 = v13;
  uint64_t v111 = v2;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v113 = *(void *)(v1 + 360);
    uint64_t v15 = *(void *)(v1 + 320);
    uint64_t v107 = *(void *)(v1 + 336);
    uint64_t v108 = *(void *)(v1 + 328);
    uint64_t v16 = *(void *)(v1 + 304);
    uint64_t v106 = *(void *)(v1 + 312);
    uint64_t v17 = *(void *)(v1 + 152);
    uint64_t v18 = sub_A5E8(22LL);
    uint64_t v105 = sub_A5E8(64LL);
    uint64_t v116 = v105;
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v19 = _typeName(_:qualified:)(v17, 0LL);
    *(void *)(v1 + 120) = sub_39178(v19, v20, &v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 120, v1 + 128, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2080;
    uint64_t v21 = sub_2322C( (unint64_t *)&qword_189EE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
    HIDWORD(v104) = v14;
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter(v16, v21);
    *(void *)(v1 + 12_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_39178(v22, v23, &v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v2, v18 + 14, v18 + 22);
    sub_249D4();
    (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v15, v16);
    sub_D9B0(&dword_0, v12, (os_log_type_t)v14, "%s Parsing Input: %s", (uint8_t *)v18);
    swift_arrayDestroy(v105, 2LL);
    sub_5050(v105);
    sub_5050(v18);

    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v107 + 8);
    v24(v113, v108);
  }

  else
  {
    uint64_t v25 = *(void *)(v1 + 360);
    uint64_t v27 = *(void *)(v1 + 328);
    uint64_t v26 = *(void *)(v1 + 336);
    sub_565A8(*(void *)(v1 + 312));

    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v24(v25, v27);
  }

  sub_114384();
  if (sub_DEE0C() == enum case for Parse.uso(_:))
  {
    uint64_t v108 = (uint64_t)v24;
    uint64_t v28 = *(void *)(v1 + 288);
    uint64_t v29 = *(void *)(v1 + 296);
    uint64_t v30 = *(void *)(v1 + 272);
    uint64_t v31 = *(void *)(v1 + 208);
    uint64_t v114 = *(void *)(v1 + 216);
    uint64_t v33 = *(void *)(v1 + 192);
    uint64_t v32 = *(void *)(v1 + 200);
    uint64_t v34 = *(void *)(v1 + 184);
    (*(void (**)(uint64_t, void))(*(void *)(v1 + 256) + 96LL))(v30, *(void *)(v1 + 248));
    uint64_t v35 = sub_DA14(v29, v30, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 32));
    uint64_t v36 = USOParse.userParse.getter(v35);
    uint64_t v37 = Siri_Nlu_External_UserParse.userDialogActs.getter(v36);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    sub_9109C(v37, v34);
    sub_249D4();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v34, 1LL, v114) == 1)
    {
      uint64_t v38 = *(void *)(v1 + 184);
      sub_565A8(*(void *)(v1 + 288));
      sub_2012C(v38, &qword_18B900);
      goto LABEL_8;
    }

    uint64_t v63 = (*(uint64_t (**)(void, void, void))(*(void *)(v1 + 224) + 32LL))( *(void *)(v1 + 240),  *(void *)(v1 + 184),  *(void *)(v1 + 216));
    if ((Siri_Nlu_External_UserDialogAct.hasAccepted.getter(v63) & 1) != 0)
    {
      uint64_t v65 = *(void *)(v1 + 288);
      uint64_t v64 = *(void *)(v1 + 296);
      uint64_t v66 = *(void *)(v1 + 280);
      uint64_t v67 = *(void *)(v1 + 144);
      sub_565A8(*(void *)(v1 + 224));
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
      uint64_t v110 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 16);
      swift_bridgeObjectRetain(v110);
      uint64_t v68 = 1LL;
LABEL_30:
      uint64_t v109 = v68;
      goto LABEL_24;
    }

    uint64_t v91 = *(void *)(v1 + 232);
    uint64_t v92 = *(void *)(v1 + 240);
    uint64_t v93 = *(void *)(v1 + 224);
    char v94 = Siri_Nlu_External_UserDialogAct.hasRejected.getter();
    uint64_t v95 = sub_DA14(v91, v92, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 16));
    uint64_t v96 = *(void *)(v1 + 288);
    uint64_t v97 = *(void *)(v1 + 232);
    uint64_t v98 = *(void *)(v1 + 240);
    uint64_t v99 = *(void *)(v1 + 216);
    uint64_t v100 = *(void *)(v1 + 224);
    if ((v94 & 1) != 0)
    {
      uint64_t v101 = *(void (**)(uint64_t, uint64_t))(v100 + 8);
      v101(*(void *)(v1 + 232), *(void *)(v1 + 216));
      v101(v98, v99);
      sub_202F4(*(uint64_t (**)(uint64_t, uint64_t))(v96 + 8));
    }

    else
    {
      char v102 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter(v95);
      uint64_t v103 = *(void (**)(uint64_t, uint64_t))(v100 + 8);
      v103(v97, v99);
      v103(v98, v99);
      sub_202F4(*(uint64_t (**)(uint64_t, uint64_t))(v96 + 8));
      if ((v102 & 1) == 0)
      {
        sub_114374();
        uint64_t v68 = 2LL;
        goto LABEL_30;
      }
    }

    sub_114374();
    uint64_t v109 = 0LL;
    goto LABEL_24;
  }

  sub_565A8(*(void *)(v1 + 256));
LABEL_8:
  sub_114384();
  if (sub_DEE0C() != enum case for Parse.directInvocation(_:))
  {
    uint64_t v48 = sub_565A8(*(void *)(v1 + 256));
    uint64_t v49 = Logger.wellness.unsafeMutableAddressor(v48);
    uint64_t v50 = sub_A5DC(v49, (uint64_t)(v111 - 11));
    sub_114360(v50, v51, v52, v53, v54, v55, v56, v57, v104, v105, v106, v107, v108, v110);
    uint64_t v58 = (void *)sub_23374();
    os_log_type_t v59 = static os_log_type_t.error.getter();
    if (sub_A988(v59))
    {
      os_log_type_t v60 = (_WORD *)sub_A5E8(2LL);
      *os_log_type_t v60 = 0;
      sub_A940(&dword_0, v61, v62, "Received unsupported type of input");
      sub_5050((uint64_t)v60);
    }

    sub_995CC();
    goto LABEL_23;
  }

  os_log_type_t v39 = v111 - 15;
  uint64_t v40 = *(void *)(v1 + 264);
  uint64_t v41 = *(void *)(v1 + 168);
  uint64_t v42 = *(void *)(v1 + 176);
  uint64_t v43 = *(void *)(v1 + 160);
  (*(void (**)(uint64_t, void))(*(void *)(v1 + 256) + 96LL))(v40, *(void *)(v1 + 248));
  uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v42, v40, v43);
  uint64_t v45 = Parse.DirectInvocation.userData.getter(v44);
  if (!v45)
  {
    *os_log_type_t v39 = 0u;
    *(_OWORD *)(v111 - 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 3) = 0u;
    goto LABEL_19;
  }

  sub_12BE4C(0xD000000000000012LL, 0x8000000000141130LL, v45, v39);
  sub_249D4();
  if (!*(void *)(v1 + 40))
  {
LABEL_19:
    uint64_t v46 = sub_2012C((uint64_t)v39, &qword_18AA78);
    goto LABEL_20;
  }

  uint64_t v46 = swift_dynamicCast(v111 + 29, v39, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL);
  if ((v46 & 1) == 0)
  {
LABEL_20:
    uint64_t v69 = Logger.wellness.unsafeMutableAddressor(v46);
    uint64_t v70 = sub_A5DC(v69, (uint64_t)(v111 - 5));
    sub_114360(v70, v71, v72, v73, v74, v75, v76, v77, v104, v105, v106, v107, v108, v110);
    uint64_t v78 = (void *)sub_23374();
    os_log_type_t v79 = static os_log_type_t.error.getter();
    if (sub_A988(v79))
    {
      uint64_t v80 = (_WORD *)sub_A5E8(2LL);
      *uint64_t v80 = 0;
      sub_A940(&dword_0, v81, v82, "MedUpdateLogStatusStrategy failed to unpack directInvocation, returning nil");
      sub_5050((uint64_t)v80);
    }

    uint64_t v84 = *(void *)(v1 + 168);
    uint64_t v83 = *(void *)(v1 + 176);
    uint64_t v85 = *(void *)(v1 + 160);

    sub_995CC();
    (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v83, v85);
LABEL_23:
    uint64_t v109 = 0LL;
    uint64_t v110 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(&dword_0 + 1);
    goto LABEL_24;
  }

  uint64_t v47 = *(void *)(v1 + 144);
  uint64_t v109 = *((unsigned __int8 *)v111 + 232);
  sub_565A8(*(void *)(v1 + 168));
  uint64_t v110 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 16);
  swift_bridgeObjectRetain(v110);
LABEL_24:
  uint64_t v86 = *(void *)(v1 + 320);
  uint64_t v88 = *(void *)(v1 + 264);
  uint64_t v87 = *(void *)(v1 + 272);
  uint64_t v89 = *(void *)(v1 + 240);
  uint64_t v112 = *(void *)(v1 + 184);
  uint64_t v115 = *(void *)(v1 + 176);
  swift_task_dealloc(*(void *)(v1 + 360));
  sub_A7C8();
  sub_A760();
  swift_task_dealloc(v86);
  sub_A910();
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  sub_A67C();
  sub_A78C();
  swift_task_dealloc(v112);
  swift_task_dealloc(v115);
  return (*(uint64_t (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(v1 + 8))(v109, v110);
}

void sub_112DAC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Input(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_D984();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_27AD8();
  uint64_t v11 = Logger.workout.unsafeMutableAddressor();
  sub_A5DC(v11, (uint64_t)v31);
  uint64_t v27 = v10;
  uint64_t v28 = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v2, v11, v9);
  uint64_t v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  os_log_type_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.debug.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = sub_A5E8(22LL);
    uint64_t v26 = a2;
    uint64_t v16 = v15;
    uint64_t v25 = sub_A5E8(64LL);
    uint64_t v30 = v25;
    *(_DWORD *)uint64_t v16 = 136315394;
    uint64_t v17 = sub_618E8();
    uint64_t v29 = sub_39178(v17, v18, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2080;
    uint64_t v19 = sub_2322C( (unint64_t *)&qword_189EE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v5, v19);
    uint64_t v29 = sub_39178(v20, v21, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v16 + 14, v16 + 22);
    sub_249D4();
    sub_8F958(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    sub_D9B0(&dword_0, v13, v14, "%s Handling Input: %s", (uint8_t *)v16);
    uint64_t v22 = v25;
    swift_arrayDestroy(v25, 2LL);
    sub_5050(v22);
    sub_5050(v16);
  }

  else
  {
    sub_8F958(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  }

  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v2, v28);
  static ActionForInput.handle()(v23);
  sub_D8FC();
}

uint64_t sub_112FE8(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  v3[15] = *v2;
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v3[16] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[17] = v5;
  v3[18] = sub_D8CC(v5);
  v3[19] = sub_A5B8();
  uint64_t v6 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[20] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[21] = v7;
  v3[22] = sub_A5C0(v7);
  uint64_t v8 = sub_D984();
  v3[23] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[24] = v9;
  v3[25] = sub_A5C0(v9);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_113078(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = (uint64_t)(v1 + 7);
  uint64_t v6 = v1 + 24;
  uint64_t v5 = v1[24];
  uint64_t v4 = v6[1];
  uint64_t v7 = v2[13];
  uint64_t v8 = Logger.wellness.unsafeMutableAddressor(a1);
  sub_A5DC(v8, v3);
  sub_DA14(v4, v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
  swift_errorRetain(v7);
  swift_errorRetain(v7);
  uint64_t v9 = (os_log_s *)sub_23374();
  os_log_type_t v10 = static os_log_type_t.debug.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v24 = v2[24];
    uint64_t v25 = v2[23];
    uint64_t v26 = v2[25];
    uint64_t v11 = v2[13];
    uint64_t v12 = sub_A5E8(22LL);
    os_log_type_t v13 = (void *)sub_A5E8(8LL);
    uint64_t v23 = sub_A5E8(32LL);
    uint64_t v27 = v23;
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v14 = sub_618E8();
    v2[10] = sub_39178(v14, v15, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 10, v2 + 11, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2112;
    swift_errorRetain(v11);
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError(v11);
    v2[11] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 11, v2 + 12, v12 + 14, v12 + 22);
    *os_log_type_t v13 = v16;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    sub_D9B0(&dword_0, v9, v10, "%s makeErrorResponse called with error: %@", (uint8_t *)v12);
    sub_494C(&qword_189CB8);
    swift_arrayDestroy(v13, 1LL);
    sub_5050((uint64_t)v13);
    swift_arrayDestroy(v23, 1LL);
    sub_5050(v23);
    sub_5050(v12);

    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v26, v25);
  }

  else
  {
    uint64_t v18 = v2[24];
    uint64_t v17 = v2[25];
    uint64_t v19 = v2[23];
    uint64_t v20 = v2[13];
    swift_errorRelease(v20);
    swift_errorRelease(v20);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  }

  sub_500C((void *)(v2[14] + 64LL), *(void *)(v2[14] + 88LL));
  unint64_t v21 = (void *)swift_task_alloc(dword_18CCDC);
  v2[26] = v21;
  *unint64_t v21 = v2;
  v21[1] = sub_1132DC;
  return sub_764C8();
}

uint64_t sub_1132DC()
{
  uint64_t v3 = v2[26];
  uint64_t v4 = *v1;
  v2[27] = v5;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_task_dealloc(v2[25]);
    sub_A67C();
    sub_A7C8();
    sub_A760();
    return sub_D8C4(*(uint64_t (**)(void))(v4 + 8));
  }

  else
  {
    sub_A964();
    return sub_D954();
  }

uint64_t sub_113364(uint64_t a1)
{
  uint64_t v2 = (void *)v1[27];
  uint64_t v4 = v1[18];
  uint64_t v3 = v1[19];
  uint64_t v5 = v1[16];
  uint64_t v6 = v1[17];
  uint64_t v7 = v1[14];
  static DialogPhase.error.getter(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v3, v5);
  OutputGenerationManifest.init(dialogPhase:_:)(v4, sub_A633C, 0LL);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v5);
  OutputGenerationManifest.canUseServerTTS.setter(0LL);
  id v8 = [v2 patternId];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  uint64_t v11 = v10;

  OutputGenerationManifest.responseViewId.setter(v9, v11);
  sub_D7EC(v7 + 200, (uint64_t)(v1 + 2));
  uint64_t v12 = v1[5];
  uint64_t v13 = v1[6];
  sub_500C(v1 + 2, v12);
  uint64_t v14 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)[1]);
  v1[28] = v14;
  *uint64_t v14 = v1;
  v14[1] = sub_113498;
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)( v1[12],  v1[27],  v1[22],  v12,  v13);
}

uint64_t sub_113498()
{
  uint64_t v3 = *(void *)(v2 + 224);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0;
  swift_task_dealloc(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_1134E8()
{
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 160);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_AA20();
  sub_A67C();
  sub_A7C8();
  sub_A8EC();
  sub_A910();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_11356C()
{
  uint64_t v1 = *(void *)(v0 + 168);

  sub_202F4(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_AA20();
  swift_task_dealloc(*(void *)(v0 + 200));
  sub_A67C();
  sub_A7C8();
  sub_A760();
  return sub_D8C4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1135D8(uint64_t a1)
{
  v2[26] = a1;
  v2[27] = v1;
  uint64_t v3 = sub_D984();
  v2[28] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[29] = v4;
  v2[30] = sub_A5C0(v4);
  uint64_t v5 = sub_494C(&qword_189EE0);
  v2[31] = sub_A5C0(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for DialogPhase(0LL);
  v2[32] = sub_A5C0(*(void *)(v6 - 8));
  uint64_t v7 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[33] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[34] = v8;
  v2[35] = sub_A5C0(v8);
  uint64_t v9 = sub_494C(&qword_189D00);
  v2[36] = sub_D8CC(*(void *)(v9 - 8));
  v2[37] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_113684()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = *(void *)(v1 + 16);
  if (!((unint64_t)v2 >> 62))
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain(*(void *)(v1 + 16));
    if (v3) {
      goto LABEL_3;
    }
LABEL_11:
    sub_249D4();
    goto LABEL_12;
  }

  if (v2 < 0) {
    uint64_t v9 = *(void *)(v1 + 16);
  }
  else {
    uint64_t v9 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*(void *)(v1 + 16));
  if (!_CocoaArrayWrapper.endIndex.getter(v9)) {
    goto LABEL_11;
  }
LABEL_3:
  sub_398E0(0LL, (v2 & 0xC000000000000001LL) == 0, v2);
  if ((v2 & 0xC000000000000001LL) != 0) {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v2);
  }
  else {
    id v4 = *(id *)(v2 + 32);
  }
  uint64_t v5 = v4;
  sub_249D4();
  sub_134BD8(v5);
  if (v7)
  {
    String.toSpeakableString.getter(v6, v7);
    sub_249D4();
    uint64_t v8 = 0LL;
    goto LABEL_13;
  }

uint64_t sub_113868(uint64_t a1)
{
  if (v1) {
    swift_errorRelease(v1);
  }
  else {
    *(void *)(v2 + 320) = a1;
  }
  sub_A964();
  return sub_D954();
}

uint64_t sub_1138D4()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  *(void *)(v0 + 32_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v1;
  void *v1 = v0;
  v1[1] = sub_113920;
  return sub_36164(0x6C65636E6163LL, 0xE600000000000000LL);
}

uint64_t sub_113920()
{
  v2[20] = v0;
  v2[21] = v1;
  v2[22] = v3;
  uint64_t v4 = v2[41];
  *uint64_t v5 = *v0;
  v2[42] = v3;
  swift_task_dealloc(v4);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_113968()
{
  v0[43] = v0[21];
  uint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  v0[44] = v1;
  void *v1 = v0;
  v1[1] = sub_1139C0;
  return sub_36164(0x6D7269666E6F63LL, 0xE700000000000000LL);
}

uint64_t sub_1139C0()
{
  v2[23] = v0;
  v2[24] = v1;
  v2[25] = v3;
  uint64_t v4 = v2[44];
  *uint64_t v5 = *v0;
  v2[45] = v3;
  swift_task_dealloc(v4);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_113A08()
{
  unint64_t v1 = v0[45];
  unint64_t v3 = v0[42];
  uint64_t v2 = v0[43];
  uint64_t v4 = (void *)v0[40];
  uint64_t v5 = v0[31];
  uint64_t v6 = v0[32];
  uint64_t v7 = v0[27];
  BOOL v8 = v3 == 0;
  if (!v3) {
    unint64_t v3 = 0xE600000000000000LL;
  }
  unint64_t v31 = v3;
  if (v8) {
    uint64_t v2 = 0x6C65636E6143LL;
  }
  uint64_t v30 = v2;
  if (v1) {
    uint64_t v9 = v0[24];
  }
  else {
    uint64_t v9 = 0x6D7269666E6F43LL;
  }
  if (!v1) {
    unint64_t v1 = 0xE700000000000000LL;
  }
  unint64_t v28 = v1;
  uint64_t v29 = v9;
  v0[5] = &type metadata for WellnessFeatureFlagsKey;
  v0[6] = sub_354B0();
  *((_BYTE *)v0 + 16) = 4;
  char v10 = isFeatureEnabled(_:)(v0 + 2);
  uint64_t v11 = _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2);
  static DialogPhase.clarification.getter(v11);
  OutputGenerationManifest.init(dialogPhase:_:)(v6, PhoneRingsSnippet.body.getter, 0LL);
  sub_8F508();
  uint64_t v12 = type metadata accessor for NLContextUpdate(0LL);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v5, 0LL, 1LL, v12);
  OutputGenerationManifest.nlContextUpdate.setter(v5);
  OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
  OutputGenerationManifest.canUseServerTTS.setter(0LL);
  id v13 = [v4 catId];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  uint64_t v16 = v15;

  OutputGenerationManifest.responseViewId.setter(v14, v16);
  OutputGenerationManifest.printSupportingDialogInDisplayModes.setter(1LL);
  sub_D7EC(v7 + 200, (uint64_t)(v0 + 7));
  uint64_t v17 = v0[10];
  sub_500C(v0 + 7, v17);
  uint64_t v18 = type metadata accessor for WellnessSnippets(0LL);
  v0[15] = v18;
  v0[16] = sub_2322C( (unint64_t *)&qword_18A468,  type metadata accessor for WellnessSnippets,  (uint64_t)&protocol conformance descriptor for WellnessSnippets);
  uint64_t v19 = sub_B76C(v0 + 12);
  *uint64_t v19 = 0xD000000000000031LL;
  v19[1] = 0x80000000001449C0LL;
  v19[2] = v30;
  v19[3] = v31;
  v19[4] = v29;
  v19[5] = v28;
  *((_BYTE *)v19 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v10 & 1;
  swift_storeEnumTagMultiPayload(v19, v18, 5LL);
  uint64_t v20 = sub_494C(&qword_18A460);
  uint64_t v21 = swift_allocObject(v20, 40LL, 7LL);
  *(_OWORD *)(v21 + 16) = xmmword_138BA0;
  *(void *)(v21 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v4;
  uint64_t v32 = v21;
  specialized Array._endMutation()(v21, v22, v23);
  v0[46] = v32;
  uint64_t v24 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)[1];
  id v25 = v4;
  uint64_t v26 = (void *)swift_task_alloc(v24);
  v0[47] = v26;
  *uint64_t v26 = v0;
  v26[1] = sub_113CB0;
  return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)( v0[26],  v0 + 12,  v32,  v0[35],  v17);
}

uint64_t sub_113CB0()
{
  return sub_D954();
}

uint64_t sub_113CFC()
{
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v1 = *(void *)(v0 + 296);
  uint64_t v4 = *(void *)(v0 + 272);
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v5 = *(void *)(v0 + 264);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_2012C(v2, &qword_189D00);
  sub_2012C(v1, &qword_189D00);
  sub_AA20();
  sub_61880();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  return sub_D8C4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_113D98(uint64_t a1)
{
  uint64_t v3 = v1[29];
  uint64_t v2 = v1[30];
  uint64_t v4 = Logger.wellness.unsafeMutableAddressor(a1);
  sub_A5DC(v4, (uint64_t)(v1 + 17));
  sub_DA14(v2, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  uint64_t v5 = (void *)sub_23374();
  os_log_type_t v6 = static os_log_type_t.debug.getter(v5);
  if (sub_A988(v6))
  {
    uint64_t v7 = (_WORD *)sub_A5E8(2LL);
    *uint64_t v7 = 0;
    sub_A940( &dword_0,  v8,  v9,  "Couldn't create logMedUpdateToStatusConfirmation_Dialog, returning generic error output.");
    sub_5050((uint64_t)v7);
  }

  uint64_t v10 = v1[29];

  sub_202F4(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
  unint64_t v11 = sub_114248();
  uint64_t v12 = swift_allocError(&type metadata for MedUpdateLogStatusStrategyError, v11, 0LL, 0LL);
  v1[48] = v12;
  id v13 = (uint64_t **)swift_task_alloc(dword_190104);
  v1[49] = (uint64_t)v13;
  *id v13 = v1;
  v13[1] = (uint64_t *)sub_113E9C;
  return sub_112FE8(v1[26], v12);
}

uint64_t sub_113E9C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 392);
  *(void *)(*v1 + 400) = v0;
  swift_task_dealloc(v3);
  if (!v0) {
    swift_errorRelease(*(void *)(v2 + 384));
  }
  sub_A964();
  return sub_D954();
}

uint64_t sub_113F00()
{
  uint64_t v1 = *(void *)(v0 + 296);
  sub_2012C(*(void *)(v0 + 288), &qword_189D00);
  sub_2012C(v1, &qword_189D00);
  sub_61880();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_113F74()
{
  uint64_t v1 = *(void *)(v0 + 384);
  uint64_t v2 = *(void *)(v0 + 296);
  uint64_t v3 = *(void *)(v0 + 240);
  sub_2012C(*(void *)(v0 + 288), &qword_189D00);
  sub_2012C(v2, &qword_189D00);
  swift_errorRelease(v1);
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  swift_task_dealloc(v3);
  return sub_D8C4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_11400C()
{
  return v0;
}

uint64_t sub_114048()
{
  return swift_deallocClassInstance(v0, 240LL, 7LL);
}

uint64_t type metadata accessor for MedUpdateLogStatusStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC18WellnessFlowPlugin26MedUpdateLogStatusStrategy);
}

uint64_t sub_11408C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v4 = (void *)swift_task_alloc(dword_1900FC);
  *(void *)(v2 + 24) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1140DC;
  return sub_1125AC(a2);
}

uint64_t sub_1140DC(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *v3;
  sub_56254(*(void *)(v4 + 24), v8);
  if (!v2)
  {
    uint64_t v9 = *(void **)(v4 + 16);
    *uint64_t v9 = a1;
    v9[1] = a2;
  }

  return sub_D8C4(*(uint64_t (**)(void))(v7 + 8));
}

uint64_t sub_11412C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_19010C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_61840;
  return sub_1135D8(a1);
}

uint64_t sub_11417C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_190104);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_61840;
  return sub_112FE8(a1, a2);
}

uint64_t sub_1141DC(void *a1)
{
  id v2 = [a1 loggedTime];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

unint64_t sub_114248()
{
  unint64_t result = qword_190280;
  if (!qword_190280)
  {
    unint64_t result = swift_getWitnessTable(&unk_13EDD8, &type metadata for MedUpdateLogStatusStrategyError);
    atomic_store(result, (unint64_t *)&qword_190280);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for MedUpdateLogStatusStrategyError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(sub_56254(*(void *)(v2 + 312), v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1142C4 + 4 * byte_13EC70[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1142E4 + 4 * byte_13EC75[v4]))();
  }
}

_BYTE *sub_1142C4(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1142E4(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1142EC(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1142F4(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1142FC(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_114304(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MedUpdateLogStatusStrategyError()
{
  return &type metadata for MedUpdateLogStatusStrategyError;
}

unint64_t sub_114324()
{
  unint64_t result = qword_190288;
  if (!qword_190288)
  {
    unint64_t result = swift_getWitnessTable(&unk_13EDB0, &type metadata for MedUpdateLogStatusStrategyError);
    atomic_store(result, (unint64_t *)&qword_190288);
  }

  return result;
}

uint64_t sub_114360( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t (*a14)(uint64_t, uint64_t, uint64_t))
{
  return a14(v14, v16, v15);
}

uint64_t sub_114374()
{
  return swift_bridgeObjectRetain(*(void *)(*(void *)(v0 + 144) + 16LL));
}

uint64_t sub_114384()
{
  return Input.parse.getter();
}

void SpecificMedCompletedLogModel.init(medStatus:givenTime:requestedMedName:requestedMedSchedule:dosage:dosageUnit:url:sashBundleID:dontDisplayGranularTime:isSmartEnabled:loggedLabel:skippedLabel:takenLabel:snippetHeaderModel:)( char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned __int8 a15, unsigned __int8 a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  int v66 = a8;
  uint64_t v65 = a7;
  uint64_t v64 = a4;
  v63[1] = a3;
  uint64_t v86 = a22;
  uint64_t v87 = a23;
  uint64_t v84 = a20;
  uint64_t v85 = a21;
  uint64_t v82 = a18;
  uint64_t v83 = a19;
  uint64_t v81 = a17;
  int v79 = a15;
  int v80 = a16;
  uint64_t v77 = a13;
  uint64_t v78 = a14;
  uint64_t v73 = a12;
  uint64_t v67 = a11;
  sub_494C(&qword_18A1A0);
  sub_6D20();
  __chkstk_darwin(v28);
  uint64_t v75 = (char *)v63 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = (int *)sub_11775C();
  uint64_t v31 = a9 + v30[8];
  uint64_t v32 = type metadata accessor for AppPunchout(0LL);
  uint64_t v74 = v31;
  uint64_t v70 = v32;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v31, 1LL, 1LL, v32);
  sub_11784C();
  sub_1177E4(v33);
  uint64_t v72 = v34;
  uint64_t v69 = v30[14];
  *(_BYTE *)(a9 + v69) = 0;
  uint64_t v68 = v30[15];
  *(_BYTE *)(a9 + v6_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0;
  uint64_t v35 = (void *)(a9 + v30[16]);
  *uint64_t v35 = 0LL;
  v35[1] = 0LL;
  uint64_t v36 = (void *)(a9 + v30[17]);
  *uint64_t v36 = 0LL;
  v36[1] = 0LL;
  uint64_t v37 = (void *)(a9 + v30[18]);
  *uint64_t v37 = 0LL;
  v37[1] = 0LL;
  uint64_t v38 = a9 + v30[19];
  uint64_t v39 = type metadata accessor for SnippetHeaderModel(0LL);
  uint64_t v71 = v38;
  sub_6D78(v38, v40, v41, v39);
  *(_BYTE *)a9 = a1;
  uint64_t v76 = a2;
  *(void *)(a9 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_A6AE8();
  *(void *)(a9 + 16) = v42;
  sub_117804();
  *(void *)(a9 + 24) = v44;
  *(void *)(a9 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v43;
  uint64_t v64 = a5;
  *(void *)(a9 + 40) = a5;
  *(void *)(a9 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a6;
  if (a6) {
    uint64_t v45 = 0LL;
  }
  else {
    uint64_t v45 = v65;
  }
  char v46 = (a6 != 0) | v66;
  uint64_t v47 = a9 + v30[9];
  uint64_t v48 = (uint64_t *)(a9 + v30[10]);
  uint64_t v49 = (void *)(a9 + v30[11]);
  *(void *)uint64_t v47 = v45;
  char v50 = v46 & 1;
  *(_BYTE *)(v47 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v46 & 1;
  swift_bridgeObjectRetain(a6);
  *uint64_t v48 = sub_114FF8(v45, v50);
  v48[1] = v51;
  if (a6)
  {
    swift_bridgeObjectRelease(v67);
    *uint64_t v49 = 0LL;
    v49[1] = 0LL;
    uint64_t v52 = v64;
  }

  else
  {
    uint64_t v53 = v67;
    *uint64_t v49 = a10;
    v49[1] = v53;
    a6 = 0xE900000000000064LL;
    sub_117824();
  }

  uint64_t v54 = (void *)(a9 + v30[12]);
  *uint64_t v54 = v52;
  v54[1] = a6;
  uint64_t v55 = (uint64_t)v75;
  uint64_t v56 = v73;
  sub_2521C(v73);
  sub_279E0(v56, &qword_189CF8);
  uint64_t v57 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v57 - 8) + 8LL))(v76, v57);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v55, 0LL, 1LL, v70);
  sub_24D88(v55, v74, &qword_18A1A0);
  swift_bridgeObjectRelease(*(void *)(v72 + 8));
  sub_1177CC();
  *(_BYTE *)(a9 + v69) = v58;
  *(_BYTE *)(a9 + v6_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v80 & 1;
  swift_bridgeObjectRelease(v35[1]);
  uint64_t v59 = v82;
  *uint64_t v35 = v81;
  v35[1] = v59;
  swift_bridgeObjectRelease(v36[1]);
  uint64_t v60 = v84;
  *uint64_t v36 = v83;
  v36[1] = v60;
  swift_bridgeObjectRelease(v37[1]);
  uint64_t v62 = v86;
  uint64_t v61 = v87;
  *uint64_t v37 = v85;
  v37[1] = v62;
  sub_24D88(v61, v71, &qword_18A1A8);
  sub_D8FC();
}

uint64_t type metadata accessor for SpecificMedCompletedLogModel(uint64_t a1)
{
  uint64_t result = qword_190300;
  if (!qword_190300) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SpecificMedCompletedLogModel);
  }
  return result;
}

void SpecificMedCompletedLogModel.init(medStatus:givenTimeString:requestedMedName:requestedMedSchedule:dosage:dosageUnit:url:sashBundleID:dontDisplayGranularTime:isSmartEnabled:loggedLabel:skippedLabel:takenLabel:snippetHeaderModel:)( char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int8 a16, unsigned __int8 a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v66 = a5;
  uint64_t v67 = a8;
  uint64_t v65 = a4;
  v64[2] = a3;
  v64[1] = a2;
  uint64_t v86 = a23;
  uint64_t v87 = a24;
  uint64_t v84 = a21;
  uint64_t v85 = a22;
  uint64_t v82 = a19;
  uint64_t v83 = a20;
  uint64_t v81 = a18;
  int v79 = a16;
  int v80 = a17;
  uint64_t v77 = a14;
  uint64_t v78 = a15;
  uint64_t v76 = a13;
  uint64_t v68 = a12;
  sub_494C(&qword_18A1A0);
  sub_6D20();
  __chkstk_darwin(v28);
  uint64_t v75 = (char *)v64 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = (int *)sub_11775C();
  uint64_t v31 = a9 + v30[8];
  uint64_t v32 = type metadata accessor for AppPunchout(0LL);
  uint64_t v74 = v31;
  uint64_t v71 = v32;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v31, 1LL, 1LL, v32);
  sub_11784C();
  sub_1177E4(v33);
  uint64_t v73 = v34;
  uint64_t v70 = v30[14];
  *(_BYTE *)(a9 + v70) = 0;
  uint64_t v69 = v30[15];
  *(_BYTE *)(a9 + v69) = 0;
  uint64_t v35 = (void *)(a9 + v30[16]);
  *uint64_t v35 = 0LL;
  v35[1] = 0LL;
  uint64_t v36 = (void *)(a9 + v30[17]);
  *uint64_t v36 = 0LL;
  v36[1] = 0LL;
  uint64_t v37 = (void *)(a9 + v30[18]);
  *uint64_t v37 = 0LL;
  v37[1] = 0LL;
  uint64_t v38 = a9 + v30[19];
  uint64_t v39 = type metadata accessor for SnippetHeaderModel(0LL);
  uint64_t v72 = v38;
  sub_6D78(v38, v40, v41, v39);
  *(_BYTE *)a9 = a1;
  sub_117804();
  *(void *)(a9 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v43;
  *(void *)(a9 + 16) = v42;
  uint64_t v44 = v66;
  uint64_t v45 = v67;
  *(void *)(a9 + 24) = v65;
  *(void *)(a9 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v44;
  uint64_t v66 = a6;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a7;
  unint64_t v46 = a7;
  BOOL v47 = a7 != 0;
  if (a7) {
    uint64_t v48 = 0LL;
  }
  else {
    uint64_t v48 = v45;
  }
  uint64_t v49 = a9 + v30[9];
  char v50 = (uint64_t *)(a9 + v30[10]);
  uint64_t v51 = (void *)(a9 + v30[11]);
  *(void *)uint64_t v49 = v48;
  char v52 = (v47 | a10) & 1;
  *(_BYTE *)(v49 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v52;
  swift_bridgeObjectRetain(v46);
  *char v50 = sub_114FF8(v48, v52);
  v50[1] = v53;
  if (v46)
  {
    swift_bridgeObjectRelease(v68);
    *uint64_t v51 = 0LL;
    v51[1] = 0LL;
    uint64_t v54 = v66;
  }

  else
  {
    uint64_t v55 = v68;
    *uint64_t v51 = a11;
    v51[1] = v55;
    unint64_t v46 = 0xE900000000000064LL;
    sub_117824();
  }

  uint64_t v56 = (void *)(a9 + v30[12]);
  *uint64_t v56 = v54;
  v56[1] = v46;
  uint64_t v58 = (uint64_t)v75;
  uint64_t v57 = v76;
  sub_2521C(v76);
  sub_279E0(v57, &qword_189CF8);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v58, 0LL, 1LL, v71);
  sub_24D88(v58, v74, &qword_18A1A0);
  swift_bridgeObjectRelease(*(void *)(v73 + 8));
  sub_1177CC();
  *(_BYTE *)(a9 + v70) = v59;
  *(_BYTE *)(a9 + v69) = v80 & 1;
  swift_bridgeObjectRelease(v35[1]);
  uint64_t v60 = v82;
  *uint64_t v35 = v81;
  v35[1] = v60;
  swift_bridgeObjectRelease(v36[1]);
  uint64_t v61 = v84;
  *uint64_t v36 = v83;
  v36[1] = v61;
  swift_bridgeObjectRelease(v37[1]);
  uint64_t v63 = v86;
  uint64_t v62 = v87;
  *uint64_t v37 = v85;
  v37[1] = v63;
  sub_24D88(v62, v72, &qword_18A1A8);
  sub_D8FC();
}

void SpecificMedCompletedLogModel.time.getter()
{
}

void SpecificMedCompletedLogModel.requestedMedName.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a2;
  sub_1EB0C();
}

void SpecificMedCompletedLogModel.requestedMedSchedule.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a2;
  sub_1EB0C();
}

void SpecificMedCompletedLogModel.appPunchout.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_11775C();
  sub_A44C(v1 + *(int *)(v3 + 32), a1, &qword_18A1A0);
  sub_A890();
}

void SpecificMedCompletedLogModel.appPunchout.setter(uint64_t a1)
{
  uint64_t v3 = sub_11775C();
  sub_24D88(a1, v1 + *(int *)(v3 + 32), &qword_18A1A0);
  sub_A890();
}

uint64_t (*SpecificMedCompletedLogModel.appPunchout.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t SpecificMedCompletedLogModel.dosage.getter()
{
  return *(void *)(v0 + *(int *)(sub_11775C() + 36));
}

void SpecificMedCompletedLogModel.dosage.setter(uint64_t a1, char a2)
{
  uint64_t v5 = v2 + *(int *)(sub_11775C() + 36);
  *(void *)uint64_t v5 = a1;
  *(_BYTE *)(v5 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a2 & 1;
  sub_1EB0C();
}

uint64_t (*SpecificMedCompletedLogModel.dosage.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void SpecificMedCompletedLogModel.dosageString.getter()
{
  uint64_t v0 = sub_11775C();
  sub_27A30(*(int *)(v0 + 40));
  sub_1EB8C();
  sub_A890();
}

void SpecificMedCompletedLogModel.dosageString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_11775C();
  sub_27AB4(*(int *)(v5 + 40));
  void *v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*SpecificMedCompletedLogModel.dosageString.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void SpecificMedCompletedLogModel.dosageUnit.getter()
{
  uint64_t v0 = sub_11775C();
  sub_27A30(*(int *)(v0 + 44));
  sub_1EB8C();
  sub_A890();
}

void SpecificMedCompletedLogModel.dosageUnit.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_11775C();
  sub_27AB4(*(int *)(v5 + 44));
  void *v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*SpecificMedCompletedLogModel.dosageUnit.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void SpecificMedCompletedLogModel.medType.getter()
{
  uint64_t v0 = sub_11775C();
  sub_27A30(*(int *)(v0 + 48));
  sub_1EB8C();
  sub_A890();
}

void SpecificMedCompletedLogModel.medType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_11775C();
  sub_27AB4(*(int *)(v5 + 48));
  void *v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*SpecificMedCompletedLogModel.medType.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void SpecificMedCompletedLogModel.sashBundleID.getter()
{
  uint64_t v0 = sub_11775C();
  sub_27A30(*(int *)(v0 + 52));
  sub_1EB8C();
  sub_A890();
}

void SpecificMedCompletedLogModel.sashBundleID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_11775C();
  sub_27AB4(*(int *)(v5 + 52));
  void *v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*SpecificMedCompletedLogModel.sashBundleID.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t SpecificMedCompletedLogModel.dontDisplayGranularTime.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(sub_11775C() + 56));
}

void SpecificMedCompletedLogModel.dontDisplayGranularTime.setter(char a1)
{
  *(_BYTE *)(v1 + *(int *)(sub_11775C() + 56)) = a1;
  sub_A890();
}

uint64_t (*SpecificMedCompletedLogModel.dontDisplayGranularTime.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t SpecificMedCompletedLogModel.isSmartEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(sub_11775C() + 60));
}

void SpecificMedCompletedLogModel.isSmartEnabled.setter(char a1)
{
  *(_BYTE *)(v1 + *(int *)(sub_11775C() + 60)) = a1;
  sub_A890();
}

uint64_t (*SpecificMedCompletedLogModel.isSmartEnabled.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void SpecificMedCompletedLogModel.loggedLabel.getter()
{
  uint64_t v0 = sub_11775C();
  sub_27A30(*(int *)(v0 + 64));
  sub_1EB8C();
  sub_A890();
}

void SpecificMedCompletedLogModel.loggedLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_11775C();
  sub_27AB4(*(int *)(v5 + 64));
  void *v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*SpecificMedCompletedLogModel.loggedLabel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void SpecificMedCompletedLogModel.skippedLabel.getter()
{
  uint64_t v0 = sub_11775C();
  sub_27A30(*(int *)(v0 + 68));
  sub_1EB8C();
  sub_A890();
}

void SpecificMedCompletedLogModel.skippedLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_11775C();
  sub_27AB4(*(int *)(v5 + 68));
  void *v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*SpecificMedCompletedLogModel.skippedLabel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void SpecificMedCompletedLogModel.takenLabel.getter()
{
  uint64_t v0 = sub_11775C();
  sub_27A30(*(int *)(v0 + 72));
  sub_1EB8C();
  sub_A890();
}

void SpecificMedCompletedLogModel.takenLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_11775C();
  sub_27AB4(*(int *)(v5 + 72));
  void *v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*SpecificMedCompletedLogModel.takenLabel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void SpecificMedCompletedLogModel.snippetHeaderModel.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_11775C();
  sub_A44C(v1 + *(int *)(v3 + 76), a1, &qword_18A1A8);
  sub_A890();
}

void SpecificMedCompletedLogModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t v3 = sub_11775C();
  sub_24D88(a1, v1 + *(int *)(v3 + 76), &qword_18A1A8);
  sub_A890();
}

uint64_t (*SpecificMedCompletedLogModel.snippetHeaderModel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t sub_114FF8(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return 0LL;
  }
  uint64_t v2 = result;
  double v3 = trunc(*(double *)&result);
  if (*(double *)&result <= -9.22337204e18 || *(double *)&result >= 9.22337204e18 || v3 != *(double *)&result)
  {
    uint64_t v6 = sub_494C(&qword_18D778);
    uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
    *(_OWORD *)(v7 + 16) = xmmword_137250;
    *(void *)(v7 + 56) = &type metadata for Double;
    *(void *)(v7 + 64) = &protocol witness table for Double;
    *(void *)(v7 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v2;
    uint64_t v8 = String.init(format:arguments:)(1714499109LL, 0xE400000000000000LL, v7);
    swift_bridgeObjectRelease(v7);
    return v8;
  }

  if ((~result & 0x7FF0000000000000LL) != 0) {
    return dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  }
  __break(1u);
  return result;
}

uint64_t sub_115104(uint64_t a1, unint64_t a2)
{
  BOOL v3 = a1 == 0x757461745364656DLL && a2 == 0xE900000000000073LL;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x757461745364656DLL, 0xE900000000000073LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  BOOL v6 = a1 == 1701669236 && a2 == 0xE400000000000000LL;
  if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)(1701669236LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v7 = 0x80000000001415D0LL;
    if (a2 == 0x80000000001415D0LL) {
      goto LABEL_17;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000000001415D0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if (a1 == 0xD000000000000014LL && a2 == 0x8000000000145160LL)
  {
    unint64_t v8 = 0x8000000000145160LL;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x8000000000145160LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_23;
  }

  BOOL v9 = a1 == 0x68636E7550707061LL && a2 == 0xEB0000000074756FLL;
  if (v9
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x68636E7550707061LL, 0xEB0000000074756FLL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 4LL;
  }

  BOOL v10 = a1 == 0x656761736F64LL && a2 == 0xE600000000000000LL;
  if (v10
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x656761736F64LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 5LL;
  }

  BOOL v11 = a1 == 0x7453656761736F64LL && a2 == 0xEC000000676E6972LL;
  if (v11
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7453656761736F64LL, 0xEC000000676E6972LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 6LL;
  }

  BOOL v12 = a1 == 0x6E55656761736F64LL && a2 == 0xEA00000000007469LL;
  if (v12
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E55656761736F64LL, 0xEA00000000007469LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 7LL;
  }

  BOOL v13 = a1 == 0x6570795464656DLL && a2 == 0xE700000000000000LL;
  if (v13
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6570795464656DLL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 8LL;
  }

  BOOL v14 = a1 == 0x646E754268736173LL && a2 == 0xEC0000004449656CLL;
  if (v14
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x646E754268736173LL, 0xEC0000004449656CLL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 9LL;
  }

  if (a1 == 0xD000000000000017LL && a2 == 0x8000000000145EC0LL)
  {
    unint64_t v15 = 0x8000000000145EC0LL;
LABEL_65:
    swift_bridgeObjectRelease(v15);
    return 10LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x8000000000145EC0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
    goto LABEL_65;
  }

  BOOL v16 = a1 == 0x457472616D537369LL && a2 == 0xEE0064656C62616ELL;
  if (v16
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x457472616D537369LL, 0xEE0064656C62616ELL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 11LL;
  }

  else
  {
    BOOL v17 = a1 == 0x614C646567676F6CLL && a2 == 0xEB000000006C6562LL;
    if (v17
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x614C646567676F6CLL, 0xEB000000006C6562LL, a1, a2, 0LL) & 1) != 0)
    {
      swift_bridgeObjectRelease(a2);
      return 12LL;
    }

    else
    {
      BOOL v18 = a1 == 0x4C64657070696B73LL && a2 == 0xEC0000006C656261LL;
      if (v18
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x4C64657070696B73LL, 0xEC0000006C656261LL, a1, a2, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(a2);
        return 13LL;
      }

      else
      {
        BOOL v19 = a1 == 0x62614C6E656B6174LL && a2 == 0xEA00000000006C65LL;
        if (v19
          || (_stringCompareWithSmolCheck(_:_:expecting:)(0x62614C6E656B6174LL, 0xEA00000000006C65LL, a1, a2, 0LL) & 1) != 0)
        {
          swift_bridgeObjectRelease(a2);
          return 14LL;
        }

        else if (a1 == 0xD000000000000012LL && a2 == 0x8000000000141630LL)
        {
          swift_bridgeObjectRelease(0x8000000000141630LL);
          return 15LL;
        }

        else
        {
          char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000000141630LL, a1, a2, 0LL);
          swift_bridgeObjectRelease(a2);
          if ((v20 & 1) != 0) {
            return 15LL;
          }
          else {
            return 16LL;
          }
        }
      }
    }
  }

uint64_t sub_115718(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_115750 + 4 * byte_13EE20[a1]))( 0xD000000000000010LL,  0x80000000001415D0LL);
}

uint64_t sub_115750()
{
  return 0x757461745364656DLL;
}

uint64_t sub_11576C()
{
  return 1701669236LL;
}

uint64_t sub_11577C(uint64_t a1)
{
  return a1 + 4;
}

uint64_t sub_1158E0()
{
  return sub_115718(*v0);
}

uint64_t sub_1158E8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_115104(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_11590C(uint64_t a1)
{
  unint64_t v2 = sub_115C24();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_115934(uint64_t a1)
{
  unint64_t v2 = sub_115C24();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SpecificMedCompletedLogModel.encode(to:)(void *a1)
{
  BOOL v3 = v1;
  uint64_t v5 = sub_494C(&qword_190290);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_6D44();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_500C(a1, v10);
  unint64_t v12 = sub_115C24();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SpecificMedCompletedLogModel.CodingKeys,  &type metadata for SpecificMedCompletedLogModel.CodingKeys,  v12,  v10,  v11);
  uint64_t v13 = *(unsigned __int8 *)v3;
  char v43 = 0;
  sub_1177A0(v13);
  if (!v2)
  {
    sub_117764(v3[1], v3[2], 1);
    sub_1EAB8(v3[3], v3[4], 2);
    sub_1EAB8(v3[5], v3[6], 3);
    BOOL v14 = (int *)type metadata accessor for SpecificMedCompletedLogModel(0LL);
    char v43 = 4;
    uint64_t v15 = type metadata accessor for AppPunchout(0LL);
    sub_A410( &qword_18AA98,  (uint64_t (*)(uint64_t))&type metadata accessor for AppPunchout,  (uint64_t)&protocol conformance descriptor for AppPunchout);
    uint64_t v16 = sub_8DED4();
    sub_8DE8C(v16, v17, v18, v15);
    BOOL v19 = (char *)v3 + v14[9];
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = v19[8];
    char v43 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v43, v5);
    uint64_t v22 = sub_5E260(v14[10]);
    sub_117764(v22, v23, 6);
    uint64_t v24 = sub_5E260(v14[11]);
    sub_1EAB8(v24, v25, 7);
    uint64_t v26 = sub_5E260(v14[12]);
    sub_117764(v26, v27, 8);
    uint64_t v28 = sub_5E260(v14[13]);
    sub_117764(v28, v29, 9);
    uint64_t v30 = *((unsigned __int8 *)v3 + v14[14]);
    char v43 = 10;
    sub_1177A0(v30);
    uint64_t v31 = *((unsigned __int8 *)v3 + v14[15]);
    char v43 = 11;
    sub_1177A0(v31);
    uint64_t v32 = sub_5E260(v14[16]);
    sub_1EAB8(v32, v33, 12);
    uint64_t v34 = sub_5E260(v14[17]);
    sub_1EAB8(v34, v35, 13);
    uint64_t v36 = sub_5E260(v14[18]);
    sub_1EAB8(v36, v37, 14);
    char v43 = 15;
    uint64_t v38 = type metadata accessor for SnippetHeaderModel(0LL);
    sub_A410( &qword_18AAA8,  type metadata accessor for SnippetHeaderModel,  (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    uint64_t v39 = sub_8DED4();
    sub_8DE8C(v39, v40, v41, v38);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

unint64_t sub_115C24()
{
  unint64_t result = qword_190298;
  if (!qword_190298)
  {
    unint64_t result = swift_getWitnessTable(&unk_13F024, &type metadata for SpecificMedCompletedLogModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_190298);
  }

  return result;
}

void SpecificMedCompletedLogModel.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v45 = v4;
  sub_494C(&qword_18A1A0);
  sub_6D20();
  __chkstk_darwin(v5);
  sub_6D30();
  uint64_t v48 = v6;
  uint64_t v49 = sub_494C(&qword_1902A0);
  uint64_t v50 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  sub_6D44();
  uint64_t v7 = (int *)type metadata accessor for SpecificMedCompletedLogModel(0LL);
  sub_6D20();
  __chkstk_darwin(v8);
  sub_6D44();
  uint64_t v11 = v10 - v9;
  *(void *)(v11 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0LL;
  *(void *)(v11 + 16) = 0xE000000000000000LL;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  uint64_t v61 = v10 - v9 + *(int *)(v12 + 32);
  uint64_t v47 = type metadata accessor for AppPunchout(0LL);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v61, 1LL, 1LL, v47);
  uint64_t v13 = v11 + v7[9];
  *(void *)uint64_t v13 = 0LL;
  *(_BYTE *)(v13 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 1;
  BOOL v14 = (uint64_t *)(v11 + v7[10]);
  *BOOL v14 = 0LL;
  v14[1] = 0xE000000000000000LL;
  uint64_t v60 = v14;
  sub_A8D20(v7[11]);
  char v59 = v15;
  uint64_t v16 = (uint64_t *)(v11 + v7[12]);
  *uint64_t v16 = 0LL;
  v16[1] = 0xE000000000000000LL;
  uint64_t v58 = v16;
  sub_1177E4(0xD000000000000010LL);
  uint64_t v46 = v7[14];
  *(_BYTE *)(v11 + v46) = 0;
  uint64_t v17 = v7[15];
  *(_BYTE *)(v11 + v1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = 0;
  sub_A8D20(v7[16]);
  uint64_t v56 = v18;
  uint64_t v57 = v19;
  sub_A8D20(v7[17]);
  uint64_t v55 = v20;
  sub_A8D20(v7[18]);
  char v52 = v21;
  uint64_t v22 = v11 + v7[19];
  uint64_t v23 = type metadata accessor for SnippetHeaderModel(0LL);
  uint64_t v53 = v22;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v22, 1LL, 1LL, v23);
  uint64_t v25 = a1[3];
  uint64_t v24 = a1[4];
  uint64_t v54 = a1;
  sub_500C(a1, v25);
  unint64_t v26 = sub_115C24();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SpecificMedCompletedLogModel.CodingKeys,  &type metadata for SpecificMedCompletedLogModel.CodingKeys,  v26,  v25,  v24);
  if (v51)
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_279E0(v61, &qword_18A1A0);
    sub_A8D10();
    swift_bridgeObjectRelease();
    sub_DECF4((uint64_t)v58);
    sub_DECF4((uint64_t)v57);
    sub_DECF4((uint64_t)v56);
    sub_DECF4((uint64_t)v55);
    sub_DECF4((uint64_t)v52);
    sub_279E0(v22, &qword_18A1A8);
  }

  else
  {
    uint64_t v27 = sub_117838();
    *(_BYTE *)uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)(v27, v28) & 1;
    *(void *)(v11 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_117788(1);
    *(void *)(v11 + 16) = v29;
    char v62 = 2;
    *(void *)(v11 + 24) = sub_11777C((uint64_t)&v62, v49);
    *(void *)(v11 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v30;
    char v62 = 3;
    *(void *)(v11 + 40) = sub_11777C((uint64_t)&v62, v49);
    *(void *)(v11 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v31;
    char v62 = 4;
    sub_A410( &qword_18AAB8,  (uint64_t (*)(uint64_t))&type metadata accessor for AppPunchout,  (uint64_t)&protocol conformance descriptor for AppPunchout);
    sub_1177F4(v47, (uint64_t)&v62, v49);
    sub_24D88(v48, v61, &qword_18A1A0);
    char v62 = 5;
    uint64_t v32 = sub_117838();
    *(void *)uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v32, v33);
    *(_BYTE *)(v13 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v34 & 1;
    char v62 = 6;
    uint64_t v35 = KeyedDecodingContainer.decode(_:forKey:)(&v62, v49);
    uint64_t v37 = v36;
    sub_A8D10();
    *uint64_t v60 = v35;
    v60[1] = v37;
    char v62 = 7;
    uint64_t v38 = sub_11777C((uint64_t)&v62, v49);
    uint64_t v40 = v39;
    swift_bridgeObjectRelease();
    *char v59 = v38;
    v59[1] = v40;
    uint64_t v41 = sub_117788(8);
    uint64_t v43 = v42;
    sub_A8D10();
    *uint64_t v58 = v41;
    v58[1] = v43;
    sub_117788(9);
    sub_10139C();
    sub_A8D10();
    *uint64_t v57 = v41;
    v57[1] = v61;
    *(_BYTE *)(v11 + v46) = sub_1177B4(10) & 1;
    *(_BYTE *)(v11 + v1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = sub_1177B4(11) & 1;
    char v62 = 12;
    sub_11777C((uint64_t)&v62, v49);
    sub_10139C();
    sub_A8D10();
    *uint64_t v56 = v41;
    v56[1] = v61;
    char v62 = 13;
    sub_11777C((uint64_t)&v62, v49);
    sub_10139C();
    sub_A8D10();
    *uint64_t v55 = v41;
    v55[1] = v61;
    char v62 = 14;
    sub_11777C((uint64_t)&v62, v49);
    sub_10139C();
    sub_A8D10();
    *char v52 = v41;
    v52[1] = v61;
    char v62 = 15;
    sub_A410( &qword_18AAC8,  type metadata accessor for SnippetHeaderModel,  (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    sub_1177F4(v23, (uint64_t)&v62, v49);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v41, v49);
    sub_24D88(v45, v53, &qword_18A1A8);
    sub_116290(v11, a2);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v54);
    sub_26F04(v11, type metadata accessor for SpecificMedCompletedLogModel);
  }

uint64_t sub_116290(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpecificMedCompletedLogModel(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_1162D4()
{
}

void sub_116300()
{
}

void sub_11632C(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_116340(void *a1)
{
  return SpecificMedCompletedLogModel.encode(to:)(a1);
}

void *initializeBufferWithCopyOfBuffer for SpecificMedCompletedLogModel(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    uint64_t v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    uint64_t v8 = a2[4];
    a1[3] = a2[3];
    a1[4] = v8;
    uint64_t v9 = a2[6];
    uint64_t v10 = a3[8];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    a1[5] = a2[5];
    a1[6] = v9;
    uint64_t v13 = type metadata accessor for AppPunchout(0LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v12, 1LL, v13))
    {
      uint64_t v14 = sub_494C(&qword_18A1A0);
      memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, v12, v13);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0LL, 1LL, v13);
    }

    uint64_t v16 = a3[9];
    uint64_t v17 = a3[10];
    uint64_t v18 = (char *)v4 + v16;
    BOOL v19 = (char *)a2 + v16;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = (void *)((char *)v4 + v17);
    uint64_t v21 = (void *)((char *)a2 + v17);
    uint64_t v63 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v63;
    uint64_t v22 = a3[11];
    uint64_t v23 = a3[12];
    uint64_t v24 = (void *)((char *)v4 + v22);
    uint64_t v25 = (void *)((char *)a2 + v22);
    uint64_t v26 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v26;
    uint64_t v27 = (void *)((char *)v4 + v23);
    uint64_t v28 = (void *)((char *)a2 + v23);
    uint64_t v29 = v28[1];
    *uint64_t v27 = *v28;
    v27[1] = v29;
    uint64_t v30 = a3[13];
    uint64_t v31 = a3[14];
    uint64_t v32 = (void *)((char *)v4 + v30);
    uint64_t v33 = (void *)((char *)a2 + v30);
    uint64_t v34 = v33[1];
    *uint64_t v32 = *v33;
    v32[1] = v34;
    *((_BYTE *)v4 + v31) = *((_BYTE *)a2 + v31);
    uint64_t v35 = a3[16];
    *((_BYTE *)v4 + a3[15]) = *((_BYTE *)a2 + a3[15]);
    uint64_t v36 = (void *)((char *)v4 + v35);
    uint64_t v37 = (void *)((char *)a2 + v35);
    uint64_t v38 = v37[1];
    *uint64_t v36 = *v37;
    v36[1] = v38;
    uint64_t v39 = a3[17];
    uint64_t v40 = a3[18];
    uint64_t v41 = (void *)((char *)v4 + v39);
    uint64_t v42 = (void *)((char *)a2 + v39);
    uint64_t v43 = v42[1];
    *uint64_t v41 = *v42;
    v41[1] = v43;
    uint64_t v44 = (void *)((char *)v4 + v40);
    uint64_t v45 = (void *)((char *)a2 + v40);
    uint64_t v46 = *v45;
    uint64_t v47 = v45[1];
    uint64_t v48 = a3[19];
    uint64_t v49 = (char *)a2 + v48;
    uint64_t v50 = (char *)v4 + v48;
    *uint64_t v44 = v46;
    v44[1] = v47;
    uint64_t v51 = type metadata accessor for SnippetHeaderModel(0LL);
    swift_bridgeObjectRetain(v63);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v47);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v49, 1LL, v51))
    {
      uint64_t v52 = sub_494C(&qword_18A1A8);
      memcpy(v50, v49, *(void *)(*(void *)(v52 - 8) + 64LL));
    }

    else
    {
      uint64_t v53 = type metadata accessor for SpeakableString(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16LL))(v50, v49, v53);
      uint64_t v54 = *(int *)(v51 + 20);
      uint64_t v55 = &v50[v54];
      uint64_t v56 = &v49[v54];
      uint64_t v57 = *((void *)v56 + 1);
      *(void *)uint64_t v55 = *(void *)v56;
      *((void *)v55 + 1) = v57;
      uint64_t v58 = *(int *)(v51 + 24);
      char v59 = &v50[v58];
      uint64_t v60 = &v49[v58];
      uint64_t v61 = *((void *)v60 + 1);
      *(void *)char v59 = *(void *)v60;
      *((void *)v59 + 1) = v61;
      swift_bridgeObjectRetain(v57);
      swift_bridgeObjectRetain(v61);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v50, 0LL, 1LL, v51);
    }
  }

  return v4;
}

uint64_t destroy for SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for AppPunchout(0LL);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + *(int *)(a2 + 76);
  uint64_t v7 = type metadata accessor for SnippetHeaderModel(0LL);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1LL, v7);
  if (!(_DWORD)result)
  {
    uint64_t v9 = type metadata accessor for SpeakableString(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v6, v9);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t initializeWithCopy for SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = a3[8];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v8;
  uint64_t v12 = type metadata accessor for AppPunchout(0LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v11, 1LL, v12))
  {
    uint64_t v13 = sub_494C(&qword_18A1A0);
    memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v10, 0LL, 1LL, v12);
  }

  uint64_t v14 = a3[9];
  uint64_t v15 = a3[10];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(_BYTE *)(v16 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *(_BYTE *)(v17 + 8);
  uint64_t v18 = (void *)(a1 + v15);
  BOOL v19 = (void *)(a2 + v15);
  uint64_t v61 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v61;
  uint64_t v20 = a3[11];
  uint64_t v21 = a3[12];
  uint64_t v22 = (void *)(a1 + v20);
  uint64_t v23 = (void *)(a2 + v20);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = (void *)(a1 + v21);
  uint64_t v26 = (void *)(a2 + v21);
  uint64_t v27 = v26[1];
  *uint64_t v25 = *v26;
  v25[1] = v27;
  uint64_t v28 = a3[13];
  uint64_t v29 = a3[14];
  uint64_t v30 = (void *)(a1 + v28);
  uint64_t v31 = (void *)(a2 + v28);
  uint64_t v32 = v31[1];
  *uint64_t v30 = *v31;
  v30[1] = v32;
  *(_BYTE *)(a1 + v29) = *(_BYTE *)(a2 + v29);
  uint64_t v33 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (void *)(a2 + v33);
  uint64_t v36 = v35[1];
  *uint64_t v34 = *v35;
  v34[1] = v36;
  uint64_t v37 = a3[17];
  uint64_t v38 = a3[18];
  uint64_t v39 = (void *)(a1 + v37);
  uint64_t v40 = (void *)(a2 + v37);
  uint64_t v41 = v40[1];
  *uint64_t v39 = *v40;
  v39[1] = v41;
  uint64_t v42 = (void *)(a1 + v38);
  uint64_t v43 = (uint64_t *)(a2 + v38);
  uint64_t v44 = *v43;
  uint64_t v45 = v43[1];
  uint64_t v46 = a3[19];
  uint64_t v47 = (char *)(a2 + v46);
  uint64_t v48 = (char *)(a1 + v46);
  *uint64_t v42 = v44;
  v42[1] = v45;
  uint64_t v49 = type metadata accessor for SnippetHeaderModel(0LL);
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v45);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v47, 1LL, v49))
  {
    uint64_t v50 = sub_494C(&qword_18A1A8);
    memcpy(v48, v47, *(void *)(*(void *)(v50 - 8) + 64LL));
  }

  else
  {
    uint64_t v51 = type metadata accessor for SpeakableString(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16LL))(v48, v47, v51);
    uint64_t v52 = *(int *)(v49 + 20);
    uint64_t v53 = &v48[v52];
    uint64_t v54 = &v47[v52];
    uint64_t v55 = *((void *)v54 + 1);
    *(void *)uint64_t v53 = *(void *)v54;
    *((void *)v53 + 1) = v55;
    uint64_t v56 = *(int *)(v49 + 24);
    uint64_t v57 = &v48[v56];
    uint64_t v58 = &v47[v56];
    uint64_t v59 = *((void *)v58 + 1);
    *(void *)uint64_t v57 = *(void *)v58;
    *((void *)v57 + 1) = v59;
    swift_bridgeObjectRetain(v55);
    swift_bridgeObjectRetain(v59);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v48, 0LL, 1LL, v49);
  }

  return a1;
}

uint64_t assignWithCopy for SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  uint64_t v9 = a3[8];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for AppPunchout(0LL);
  int v13 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v10, 1LL, v12);
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v11, 1LL, v12);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v10, 0LL, 1LL, v12);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v15 = *(void *)(v12 - 8);
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v10, v12);
LABEL_6:
    uint64_t v16 = sub_494C(&qword_18A1A0);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(v15 + 24))(v10, v11, v12);
LABEL_7:
  uint64_t v17 = a3[9];
  uint64_t v18 = a1 + v17;
  BOOL v19 = (uint64_t *)(a2 + v17);
  uint64_t v20 = *v19;
  *(_BYTE *)(v18 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *((_BYTE *)v19 + 8);
  *(void *)uint64_t v18 = v20;
  uint64_t v21 = a3[10];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  *uint64_t v22 = *v23;
  uint64_t v24 = v23[1];
  v22[1] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[11];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (void *)(a2 + v25);
  *uint64_t v26 = *v27;
  uint64_t v28 = v27[1];
  v26[1] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[12];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (void *)(a2 + v29);
  *uint64_t v30 = *v31;
  uint64_t v32 = v31[1];
  v30[1] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[13];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (void *)(a2 + v33);
  *uint64_t v34 = *v35;
  uint64_t v36 = v35[1];
  v34[1] = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  uint64_t v37 = a3[16];
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = (void *)(a2 + v37);
  *uint64_t v38 = *v39;
  uint64_t v40 = v39[1];
  v38[1] = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[17];
  uint64_t v42 = (void *)(a1 + v41);
  uint64_t v43 = (void *)(a2 + v41);
  *uint64_t v42 = *v43;
  uint64_t v44 = v43[1];
  v42[1] = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease();
  uint64_t v45 = a3[18];
  uint64_t v46 = (void *)(a1 + v45);
  uint64_t v47 = (void *)(a2 + v45);
  *uint64_t v46 = *v47;
  uint64_t v48 = v47[1];
  v46[1] = v48;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRelease();
  uint64_t v49 = a3[19];
  uint64_t v50 = (char *)(a1 + v49);
  uint64_t v51 = (char *)(a2 + v49);
  uint64_t v52 = type metadata accessor for SnippetHeaderModel(0LL);
  int v53 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v50, 1LL, v52);
  int v54 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v51, 1LL, v52);
  if (!v53)
  {
    if (!v54)
    {
      uint64_t v66 = type metadata accessor for SpeakableString(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 24LL))(v50, v51, v66);
      uint64_t v67 = *(int *)(v52 + 20);
      uint64_t v68 = &v50[v67];
      uint64_t v69 = &v51[v67];
      *(void *)uint64_t v68 = *(void *)v69;
      uint64_t v70 = *((void *)v69 + 1);
      *((void *)v68 + 1) = v70;
      swift_bridgeObjectRetain(v70);
      swift_bridgeObjectRelease();
      uint64_t v71 = *(int *)(v52 + 24);
      uint64_t v72 = &v50[v71];
      uint64_t v73 = &v51[v71];
      *(void *)uint64_t v72 = *(void *)v73;
      uint64_t v74 = *((void *)v73 + 1);
      *((void *)v72 + 1) = v74;
      swift_bridgeObjectRetain(v74);
      swift_bridgeObjectRelease();
      return a1;
    }

    sub_26F04((uint64_t)v50, type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }

  if (v54)
  {
LABEL_12:
    uint64_t v64 = sub_494C(&qword_18A1A8);
    memcpy(v50, v51, *(void *)(*(void *)(v64 - 8) + 64LL));
    return a1;
  }

  uint64_t v55 = type metadata accessor for SpeakableString(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 16LL))(v50, v51, v55);
  uint64_t v56 = *(int *)(v52 + 20);
  uint64_t v57 = &v50[v56];
  uint64_t v58 = &v51[v56];
  *(void *)uint64_t v57 = *(void *)v58;
  uint64_t v59 = *((void *)v58 + 1);
  *((void *)v57 + 1) = v59;
  uint64_t v60 = *(int *)(v52 + 24);
  uint64_t v61 = &v50[v60];
  char v62 = &v51[v60];
  *(void *)uint64_t v61 = *(void *)v62;
  uint64_t v63 = *((void *)v62 + 1);
  *((void *)v61 + 1) = v63;
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRetain(v63);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v50, 0LL, 1LL, v52);
  return a1;
}

uint64_t initializeWithTake for SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v6 = a3[8];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for AppPunchout(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = sub_494C(&qword_18A1A0);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0LL, 1LL, v9);
  }

  uint64_t v11 = a3[9];
  uint64_t v12 = a3[10];
  uint64_t v13 = a1 + v11;
  uint64_t v14 = a2 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  *(_BYTE *)(v13 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *(_BYTE *)(v14 + 8);
  *(_OWORD *)(a1 + v1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(_OWORD *)(a2 + v12);
  uint64_t v15 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  uint64_t v16 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  uint64_t v17 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_OWORD *)(a1 + v1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = *(_OWORD *)(a2 + v17);
  uint64_t v19 = a3[18];
  uint64_t v18 = a3[19];
  uint64_t v20 = (char *)(a1 + v18);
  uint64_t v21 = (char *)(a2 + v18);
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  uint64_t v22 = type metadata accessor for SnippetHeaderModel(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v21, 1LL, v22))
  {
    uint64_t v23 = sub_494C(&qword_18A1A8);
    memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    uint64_t v24 = type metadata accessor for SpeakableString(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32LL))(v20, v21, v24);
    *(_OWORD *)&v20[*(int *)(v22 + 20)] = *(_OWORD *)&v21[*(int *)(v22 + 20)];
    *(_OWORD *)&v20[*(int *)(v22 + 24)] = *(_OWORD *)&v21[*(int *)(v22 + 24)];
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v20, 0LL, 1LL, v22);
  }

  return a1;
}

uint64_t assignWithTake for SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a3[8];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for AppPunchout(0LL);
  int v13 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v10, 1LL, v12);
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v11, 1LL, v12);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32LL))(v10, v11, v12);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v10, 0LL, 1LL, v12);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v15 = *(void *)(v12 - 8);
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v10, v12);
LABEL_6:
    uint64_t v16 = sub_494C(&qword_18A1A0);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(v15 + 40))(v10, v11, v12);
LABEL_7:
  uint64_t v17 = a3[9];
  uint64_t v18 = a3[10];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  *(void *)uint64_t v19 = *(void *)v20;
  *(_BYTE *)(v19 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *(_BYTE *)(v20 + 8);
  uint64_t v21 = (void *)(a1 + v18);
  uint64_t v22 = (uint64_t *)(a2 + v18);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[11];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (uint64_t *)(a2 + v25);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  *uint64_t v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[12];
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (uint64_t *)(a2 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[13];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (uint64_t *)(a2 + v35);
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  *uint64_t v36 = v39;
  v36[1] = v38;
  swift_bridgeObjectRelease();
  uint64_t v40 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + v40) = *(_BYTE *)(a2 + v40);
  uint64_t v41 = a3[16];
  uint64_t v42 = (void *)(a1 + v41);
  uint64_t v43 = (uint64_t *)(a2 + v41);
  uint64_t v45 = *v43;
  uint64_t v44 = v43[1];
  *uint64_t v42 = v45;
  v42[1] = v44;
  swift_bridgeObjectRelease();
  uint64_t v46 = a3[17];
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = (uint64_t *)(a2 + v46);
  uint64_t v50 = *v48;
  uint64_t v49 = v48[1];
  *uint64_t v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease();
  uint64_t v51 = a3[18];
  uint64_t v52 = (void *)(a1 + v51);
  int v53 = (uint64_t *)(a2 + v51);
  uint64_t v55 = *v53;
  uint64_t v54 = v53[1];
  *uint64_t v52 = v55;
  v52[1] = v54;
  swift_bridgeObjectRelease();
  uint64_t v56 = a3[19];
  uint64_t v57 = (char *)(a1 + v56);
  uint64_t v58 = (char *)(a2 + v56);
  uint64_t v59 = type metadata accessor for SnippetHeaderModel(0LL);
  int v60 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v57, 1LL, v59);
  int v61 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v58, 1LL, v59);
  if (!v60)
  {
    if (!v61)
    {
      uint64_t v65 = type metadata accessor for SpeakableString(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 40LL))(v57, v58, v65);
      uint64_t v66 = *(int *)(v59 + 20);
      uint64_t v67 = &v57[v66];
      uint64_t v68 = &v58[v66];
      uint64_t v70 = *(void *)v68;
      uint64_t v69 = *((void *)v68 + 1);
      *(void *)uint64_t v67 = v70;
      *((void *)v67 + 1) = v69;
      swift_bridgeObjectRelease();
      uint64_t v71 = *(int *)(v59 + 24);
      uint64_t v72 = &v57[v71];
      uint64_t v73 = &v58[v71];
      uint64_t v75 = *(void *)v73;
      uint64_t v74 = *((void *)v73 + 1);
      *(void *)uint64_t v72 = v75;
      *((void *)v72 + 1) = v74;
      swift_bridgeObjectRelease();
      return a1;
    }

    sub_26F04((uint64_t)v57, type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }

  if (v61)
  {
LABEL_12:
    uint64_t v63 = sub_494C(&qword_18A1A8);
    memcpy(v57, v58, *(void *)(*(void *)(v63 - 8) + 64LL));
    return a1;
  }

  uint64_t v62 = type metadata accessor for SpeakableString(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 32LL))(v57, v58, v62);
  *(_OWORD *)&v57[*(int *)(v59 + 20)] = *(_OWORD *)&v58[*(int *)(v59 + 20)];
  *(_OWORD *)&v57[*(int *)(v59 + 24)] = *(_OWORD *)&v58[*(int *)(v59 + 24)];
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v57, 0LL, 1LL, v59);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1173A8);
}

uint64_t sub_1173A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(sub_56254(*(void *)(v2 + 312), v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_494C(&qword_18A1A0);
    if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == (_DWORD)a2)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(int *)(a3 + 32);
    }

    else
    {
      uint64_t v9 = sub_494C(&qword_18A1A8);
      uint64_t v10 = *(int *)(a3 + 76);
    }

    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1 + v10, a2, v9);
  }

uint64_t storeEnumTagSinglePayload for SpecificMedCompletedLogModel( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_117454);
}

void sub_117454(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + 16) = (a2 - 1);
    sub_1EB0C();
  }

  else
  {
    uint64_t v8 = sub_494C(&qword_18A1A0);
    if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(int *)(a4 + 32);
    }

    else
    {
      uint64_t v9 = sub_494C(&qword_18A1A8);
      uint64_t v10 = *(int *)(a4 + 76);
    }

    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1 + v10, a2, a2, v9);
  }

void sub_1174E8(uint64_t a1)
{
  v6[0] = &unk_13EF00;
  v6[1] = &unk_13EF18;
  v6[2] = &unk_13EF30;
  v6[3] = &unk_13EF30;
  sub_27758(319LL, &qword_18AB38, (uint64_t (*)(uint64_t))&type metadata accessor for AppPunchout);
  if (v3 <= 0x3F)
  {
    v6[4] = *(void *)(v2 - 8) + 64LL;
    v6[5] = &unk_13EF48;
    v6[6] = &unk_13EF18;
    void v6[7] = &unk_13EF30;
    v6[8] = &unk_13EF18;
    v6[9] = &unk_13EF18;
    v6[10] = &unk_13EF00;
    v6[11] = &unk_13EF00;
    v6[12] = &unk_13EF30;
    v6[13] = &unk_13EF30;
    v6[14] = &unk_13EF30;
    sub_27758(319LL, (unint64_t *)&qword_18AB48, type metadata accessor for SnippetHeaderModel);
    if (v5 <= 0x3F)
    {
      v6[15] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 16LL, v6, a1 + 16);
    }
  }

uint64_t storeEnumTagSinglePayload for SpecificMedCompletedLogModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    LODWORD(sub_56254(*(void *)(v2 + 312), v4) = 1;
  }
  else {
    LODWORD(sub_56254(*(void *)(v2 + 312), v4) = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF0) {
    return ((uint64_t (*)(void))((char *)&loc_11761C + 4 * byte_13EE35[v4]))();
  }
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_117650 + 4 * byte_13EE30[v4]))();
}

uint64_t sub_117650(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_117658(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x117660LL);
  }
  return result;
}

uint64_t sub_11766C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x117674LL);
  }
  *(_BYTE *)uint64_t result = a2 + 15;
  return result;
}

uint64_t sub_117678(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_117680(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SpecificMedCompletedLogModel.CodingKeys()
{
  return &type metadata for SpecificMedCompletedLogModel.CodingKeys;
}

unint64_t sub_1176A0()
{
  unint64_t result = qword_190370;
  if (!qword_190370)
  {
    unint64_t result = swift_getWitnessTable(&unk_13EFFC, &type metadata for SpecificMedCompletedLogModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_190370);
  }

  return result;
}

unint64_t sub_1176E0()
{
  unint64_t result = qword_190378;
  if (!qword_190378)
  {
    unint64_t result = swift_getWitnessTable(&unk_13EF6C, &type metadata for SpecificMedCompletedLogModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_190378);
  }

  return result;
}

unint64_t sub_117720()
{
  unint64_t result = qword_190380;
  if (!qword_190380)
  {
    unint64_t result = swift_getWitnessTable(&unk_13EF94, &type metadata for SpecificMedCompletedLogModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_190380);
  }

  return result;
}

uint64_t sub_11775C()
{
  return type metadata accessor for SpecificMedCompletedLogModel(0LL);
}

uint64_t sub_117764@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(_BYTE *)(v4 - 65) = a3;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v4 - 65, v3);
}

uint64_t sub_11777C(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, a2);
}

uint64_t sub_117788@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v2 - 65) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v2 - 65, v1);
}

uint64_t sub_1177A0(uint64_t a1)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, v2 - 65, v1);
}

uint64_t sub_1177B4@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v1 - 65) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v1 - 65, *(void *)(v1 - 200));
}

void sub_1177CC()
{
  uint64_t v2 = *(void *)(v1 - 160);
  *uint64_t v0 = *(void *)(v1 - 168);
  v0[1] = v2;
}

void sub_1177E4(uint64_t a1@<X8>)
{
  void *v2 = a1;
  v2[1] = (v1 - 32) | 0x8000000000000000LL;
}

uint64_t sub_1177F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a1);
}

  ;
}

uint64_t sub_117818@<X0>(uint64_t (*a1)(void, uint64_t)@<X8>)
{
  return a1(*(void *)(v2 - 184), v1);
}

  ;
}

uint64_t sub_117838()
{
  return v0 - 65;
}

  ;
}

uint64_t HealthDataLogModel.init(snippetHeaderModel:date:unitLabel:dataValue:url:loggedButtonLabel:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v70 = a8;
  uint64_t v68 = a7;
  uint64_t v62 = a4;
  uint64_t v63 = a5;
  uint64_t v61 = a3;
  int v60 = a6 & 1;
  sub_494C(&qword_18A1A0);
  sub_6D20();
  __chkstk_darwin(v13);
  sub_6D30();
  uint64_t v67 = v14;
  sub_494C(&qword_189D00);
  sub_6D20();
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v59 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v59 - v18;
  uint64_t v20 = type metadata accessor for SnippetHeaderModel(0LL);
  sub_6D78(a9, v21, v22, v20);
  uint64_t v23 = (int *)sub_119C10();
  uint64_t v24 = v23[5];
  *(void *)(a9 + v24) = 0LL;
  uint64_t v25 = (uint64_t *)(a9 + v23[6]);
  *uint64_t v25 = 0LL;
  v25[1] = 0LL;
  uint64_t v26 = (uint64_t *)(a9 + v23[7]);
  *uint64_t v26 = 0LL;
  v26[1] = 0LL;
  uint64_t v64 = v26;
  uint64_t v27 = (void *)(a9 + v23[8]);
  *uint64_t v27 = 0LL;
  v27[1] = 0LL;
  uint64_t v28 = (uint64_t *)(a9 + v23[9]);
  *uint64_t v28 = 0LL;
  v28[1] = 0LL;
  uint64_t v29 = a9 + v23[10];
  uint64_t v65 = type metadata accessor for AppPunchout(0LL);
  uint64_t v66 = v29;
  sub_6D78(v29, v30, v31, v65);
  uint64_t v32 = (void *)(a9 + v23[11]);
  *uint64_t v32 = 0LL;
  v32[1] = 0LL;
  uint64_t v69 = a1;
  sub_8AC20(a1, a9);
  *(void *)(a9 + v24) = a2;
  swift_retain();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v34 = v62;
  uint64_t v33 = v63;
  *uint64_t v27 = v61;
  v27[1] = v34;
  uint64_t v35 = sub_8AC68(v33, v60);
  uint64_t v37 = v36;
  swift_bridgeObjectRelease();
  *uint64_t v28 = v35;
  v28[1] = v37;
  if (!a2) {
    goto LABEL_4;
  }
  uint64_t v38 = swift_retain();
  dispatch thunk of DialogCalendar.dateDescriptive.getter(v38);
  swift_release();
  uint64_t v39 = type metadata accessor for SpeakableString(0LL);
  uint64_t v40 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v19, 1LL, v39);
  if ((_DWORD)v40 == 1)
  {
    sub_279E0((uint64_t)v19, &qword_189D00);
LABEL_4:
    uint64_t v41 = 0LL;
    uint64_t v42 = 0LL;
    goto LABEL_6;
  }

  uint64_t v43 = SpeakableString.print.getter(v40);
  uint64_t v45 = v44;
  (*(void (**)(char *, uint64_t))(*(void *)(v39 - 8) + 8LL))(v19, v39);
  uint64_t v71 = v43;
  uint64_t v72 = v45;
  unint64_t v46 = sub_B6D8();
  uint64_t v41 = StringProtocol.capitalized.getter(&type metadata for String, v46);
  uint64_t v42 = v47;
  swift_bridgeObjectRelease();
LABEL_6:
  swift_bridgeObjectRelease();
  *uint64_t v25 = v41;
  v25[1] = v42;
  uint64_t v48 = *(void *)(a9 + v24);
  if (v48)
  {
    uint64_t v49 = swift_retain();
    uint64_t v50 = (uint64_t)v59;
    dispatch thunk of DialogCalendar.timeDescriptive.getter(v49);
    swift_release();
    uint64_t v51 = type metadata accessor for SpeakableString(0LL);
    uint64_t v52 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v50, 1LL, v51);
    if ((_DWORD)v52 == 1)
    {
      sub_279E0(v50, &qword_189D00);
      uint64_t v53 = 0LL;
      uint64_t v48 = 0LL;
    }

    else
    {
      uint64_t v53 = SpeakableString.print.getter(v52);
      uint64_t v48 = v54;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8LL))(v50, v51);
    }
  }

  else
  {
    uint64_t v53 = 0LL;
  }

  uint64_t v55 = v64;
  swift_bridgeObjectRelease();
  *uint64_t v55 = v53;
  v55[1] = v48;
  uint64_t v57 = v67;
  uint64_t v56 = v68;
  sub_2521C(v68);
  swift_release();
  sub_279E0(v56, &qword_189CF8);
  sub_279E0(v69, &qword_18A1A8);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v57, 0LL, 1LL, v65);
  sub_24D88(v57, v66, &qword_18A1A0);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v32 = v70;
  v32[1] = a10;
  return result;
}

uint64_t type metadata accessor for HealthDataLogModel(uint64_t a1)
{
  uint64_t result = qword_1903F8;
  if (!qword_1903F8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HealthDataLogModel);
  }
  return result;
}

void HealthDataLogModel.snippetHeaderModel.getter(uint64_t a1@<X8>)
{
}

void HealthDataLogModel.snippetHeaderModel.setter(uint64_t a1)
{
}

uint64_t HealthDataLogModel.date.getter()
{
  return swift_retain();
}

void HealthDataLogModel.date.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(sub_119C10() + 20);
  swift_release();
  *(void *)(v1 + sub_56254(*(void *)(v2 + 1040), v3) = a1;
  sub_1EB0C();
}

uint64_t (*HealthDataLogModel.date.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void HealthDataLogModel.dateLabel.getter()
{
  uint64_t v0 = sub_119C10();
  sub_27A30(*(int *)(v0 + 24));
  sub_1EB8C();
  sub_A890();
}

void HealthDataLogModel.dateLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_119C10();
  sub_27AB4(*(int *)(v5 + 24));
  void *v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*HealthDataLogModel.dateLabel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void HealthDataLogModel.timeLabel.getter()
{
  uint64_t v0 = sub_119C10();
  sub_27A30(*(int *)(v0 + 28));
  sub_1EB8C();
  sub_A890();
}

void HealthDataLogModel.timeLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_119C10();
  sub_27AB4(*(int *)(v5 + 28));
  void *v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*HealthDataLogModel.timeLabel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void HealthDataLogModel.unitLabel.getter()
{
  uint64_t v0 = sub_119C10();
  sub_27A30(*(int *)(v0 + 32));
  sub_1EB8C();
  sub_A890();
}

void HealthDataLogModel.unitLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_119C10();
  sub_27AB4(*(int *)(v5 + 32));
  void *v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*HealthDataLogModel.unitLabel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void HealthDataLogModel.dataLabel.getter()
{
  uint64_t v0 = sub_119C10();
  sub_27A30(*(int *)(v0 + 36));
  sub_1EB8C();
  sub_A890();
}

void HealthDataLogModel.dataLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_119C10();
  sub_27AB4(*(int *)(v5 + 36));
  void *v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*HealthDataLogModel.dataLabel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void HealthDataLogModel.appPunchout.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_119C10();
  sub_A44C(v1 + *(int *)(v3 + 40), a1, &qword_18A1A0);
}

void HealthDataLogModel.appPunchout.setter(uint64_t a1)
{
  uint64_t v3 = sub_119C10();
  sub_24D88(a1, v1 + *(int *)(v3 + 40), &qword_18A1A0);
}

uint64_t (*HealthDataLogModel.appPunchout.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void HealthDataLogModel.loggedLabel.getter()
{
  uint64_t v0 = sub_119C10();
  sub_27A30(*(int *)(v0 + 44));
  sub_1EB8C();
  sub_A890();
}

void HealthDataLogModel.loggedLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_119C10();
  sub_27AB4(*(int *)(v5 + 44));
  void *v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*HealthDataLogModel.loggedLabel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t sub_117FC8(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v4 = 0x8000000000141630LL;
    if (a2 == 0x8000000000141630LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000000141630LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  BOOL v6 = a1 == 1702125924 && a2 == 0xE400000000000000LL;
  if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)(1702125924LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  else
  {
    BOOL v7 = a1 == 0x6562614C65746164LL && a2 == 0xE90000000000006CLL;
    if (v7
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6562614C65746164LL, 0xE90000000000006CLL, a1, a2, 0LL) & 1) != 0)
    {
      swift_bridgeObjectRelease(a2);
      return 2LL;
    }

    else
    {
      BOOL v8 = a1 == 0x6562614C656D6974LL && a2 == 0xE90000000000006CLL;
      if (v8
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6562614C656D6974LL, 0xE90000000000006CLL, a1, a2, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(a2);
        return 3LL;
      }

      else
      {
        BOOL v9 = a1 == 0x6562614C74696E75LL && a2 == 0xE90000000000006CLL;
        if (v9
          || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6562614C74696E75LL, 0xE90000000000006CLL, a1, a2, 0LL) & 1) != 0)
        {
          swift_bridgeObjectRelease(a2);
          return 4LL;
        }

        else
        {
          BOOL v10 = a1 == 0x6562614C61746164LL && a2 == 0xE90000000000006CLL;
          if (v10
            || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6562614C61746164LL, 0xE90000000000006CLL, a1, a2, 0LL) & 1) != 0)
          {
            swift_bridgeObjectRelease(a2);
            return 5LL;
          }

          else
          {
            BOOL v11 = a1 == 0x68636E7550707061LL && a2 == 0xEB0000000074756FLL;
            if (v11
              || (_stringCompareWithSmolCheck(_:_:expecting:)(0x68636E7550707061LL, 0xEB0000000074756FLL, a1, a2, 0LL) & 1) != 0)
            {
              swift_bridgeObjectRelease(a2);
              return 6LL;
            }

            else if (a1 == 0x614C646567676F6CLL && a2 == 0xEB000000006C6562LL)
            {
              swift_bridgeObjectRelease(a2);
              return 7LL;
            }

            else
            {
              char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x614C646567676F6CLL, 0xEB000000006C6562LL, a1, a2, 0LL);
              swift_bridgeObjectRelease(a2);
              if ((v13 & 1) != 0) {
                return 7LL;
              }
              else {
                return 8LL;
              }
            }
          }
        }
      }
    }
  }

uint64_t sub_1182E0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_118318 + 4 * byte_13F080[a1]))( 0xD000000000000012LL,  0x8000000000141630LL);
}

uint64_t sub_118318()
{
  return 1702125924LL;
}

uint64_t sub_118328()
{
  return 0x6562614C65746164LL;
}

uint64_t sub_118368()
{
  return 0x68636E7550707061LL;
}

uint64_t sub_118388()
{
  return 0x614C646567676F6CLL;
}

uint64_t sub_1183A8()
{
  return sub_1182E0(*v0);
}

uint64_t sub_1183B0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_117FC8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1183D4(uint64_t a1)
{
  unint64_t v2 = sub_118658();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1183FC(uint64_t a1)
{
  unint64_t v2 = sub_118658();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t HealthDataLogModel.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_494C(&qword_190388);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_6D44();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_500C(a1, v10);
  unint64_t v12 = sub_118658();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for HealthDataLogModel.CodingKeys,  &type metadata for HealthDataLogModel.CodingKeys,  v12,  v10,  v11);
  LOBYTE(v30) = 0;
  type metadata accessor for SnippetHeaderModel(0LL);
  sub_A410( &qword_18AAA8,  type metadata accessor for SnippetHeaderModel,  (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
  sub_119C64();
  sub_119C2C(v3, v13);
  if (!v2)
  {
    uint64_t v14 = (int *)type metadata accessor for HealthDataLogModel(0LL);
    uint64_t v30 = *(void *)(v3 + v14[5]);
    char v29 = 1;
    type metadata accessor for DialogCalendar(0LL);
    sub_A410( &qword_18E2F8,  (uint64_t (*)(uint64_t))&type metadata accessor for DialogCalendar,  (uint64_t)&protocol conformance descriptor for DialogCalendar);
    sub_119C2C((uint64_t)&v30, (uint64_t)&v29);
    uint64_t v15 = sub_5E260(v14[6]);
    sub_ADC4C(v15, v16, 2);
    uint64_t v17 = sub_5E260(v14[7]);
    sub_ADC4C(v17, v18, 3);
    uint64_t v19 = sub_5E260(v14[8]);
    sub_ADC4C(v19, v20, 4);
    uint64_t v21 = sub_5E260(v14[9]);
    sub_ADC4C(v21, v22, 5);
    uint64_t v23 = v3 + v14[10];
    LOBYTE(v30) = 6;
    uint64_t v24 = type metadata accessor for AppPunchout(0LL);
    sub_A410( &qword_18AA98,  (uint64_t (*)(uint64_t))&type metadata accessor for AppPunchout,  (uint64_t)&protocol conformance descriptor for AppPunchout);
    sub_119C64();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v23, v25, v5, v24);
    uint64_t v26 = sub_5E260(v14[11]);
    sub_ADC4C(v26, v27, 7);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

unint64_t sub_118658()
{
  unint64_t result = qword_190390;
  if (!qword_190390)
  {
    unint64_t result = swift_getWitnessTable(&unk_13F24C, &type metadata for HealthDataLogModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_190390);
  }

  return result;
}

void HealthDataLogModel.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = v4;
  sub_494C(&qword_18A1A8);
  sub_6D20();
  __chkstk_darwin(v5);
  sub_6D30();
  uint64_t v39 = v6;
  uint64_t v40 = sub_494C(&qword_190398);
  uint64_t v36 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  sub_6D44();
  uint64_t v7 = (int *)type metadata accessor for HealthDataLogModel(0LL);
  sub_6D20();
  __chkstk_darwin(v8);
  sub_6D44();
  uint64_t v11 = v10 - v9;
  uint64_t v38 = type metadata accessor for SnippetHeaderModel(0LL);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v11, 1LL, 1LL, v38);
  uint64_t v35 = v7[5];
  *(void *)(v11 + v35) = 0LL;
  unint64_t v12 = (void *)(v11 + v7[6]);
  *unint64_t v12 = 0LL;
  v12[1] = 0LL;
  uint64_t v13 = (void *)(v11 + v7[7]);
  *uint64_t v13 = 0LL;
  v13[1] = 0LL;
  uint64_t v14 = (void *)(v11 + v7[8]);
  *uint64_t v14 = 0LL;
  v14[1] = 0LL;
  uint64_t v15 = (void *)(v11 + v7[9]);
  *uint64_t v15 = 0LL;
  v15[1] = 0LL;
  uint64_t v33 = v11 + v7[10];
  uint64_t v37 = type metadata accessor for AppPunchout(0LL);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v33, 1LL, 1LL, v37);
  uint64_t v42 = v11;
  uint64_t v16 = (uint64_t *)(v11 + v7[11]);
  *uint64_t v16 = 0LL;
  v16[1] = 0LL;
  uint64_t v17 = a1;
  uint64_t v18 = a1[3];
  uint64_t v19 = v17[4];
  uint64_t v41 = v17;
  sub_500C(v17, v18);
  unint64_t v20 = sub_118658();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for HealthDataLogModel.CodingKeys,  &type metadata for HealthDataLogModel.CodingKeys,  v20,  v18,  v19);
  if (v43)
  {
    uint64_t v26 = v41;
    uint64_t v22 = v42;
  }

  else
  {
    uint64_t v31 = v13;
    uint64_t v30 = v16;
    LOBYTE(v45) = 0;
    sub_A410( &qword_18AAC8,  type metadata accessor for SnippetHeaderModel,  (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    sub_119C64();
    sub_119C70(v38, v21, v40, v38);
    uint64_t v22 = v42;
    sub_24D88(v39, v42, &qword_18A1A8);
    uint64_t v23 = type metadata accessor for DialogCalendar(0LL);
    char v44 = 1;
    sub_A410( &qword_18E308,  (uint64_t (*)(uint64_t))&type metadata accessor for DialogCalendar,  (uint64_t)&protocol conformance descriptor for DialogCalendar);
    sub_119C70(v23, (uint64_t)&v44, v40, v23);
    uint64_t v24 = v45;
    swift_release();
    *(void *)(v42 + v35) = v24;
    sub_119C18(2);
    sub_119C78();
    sub_8DEA8();
    *unint64_t v12 = v24;
    v12[1] = v14;
    sub_119C18(3);
    sub_119C78();
    sub_8DEA8();
    *uint64_t v31 = v24;
    v31[1] = v14;
    sub_119C18(4);
    sub_119C78();
    sub_8DEA8();
    *uint64_t v14 = v24;
    v14[1] = v14;
    sub_119C18(5);
    sub_119C78();
    sub_8DEA8();
    *uint64_t v15 = v24;
    v15[1] = v14;
    LOBYTE(v45) = 6;
    sub_A410( &qword_18AAB8,  (uint64_t (*)(uint64_t))&type metadata accessor for AppPunchout,  (uint64_t)&protocol conformance descriptor for AppPunchout);
    sub_119C64();
    sub_119C70(v37, v25, v40, v37);
    sub_24D88(v34, v33, &qword_18A1A0);
    uint64_t v26 = v41;
    uint64_t v27 = sub_119C18(7);
    uint64_t v29 = v28;
    sub_119C54(v36);
    swift_bridgeObjectRelease();
    *uint64_t v30 = v27;
    v30[1] = v29;
    sub_118AA4(v42, a2);
  }

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v26);
  sub_26F04(v22, type metadata accessor for HealthDataLogModel);
}