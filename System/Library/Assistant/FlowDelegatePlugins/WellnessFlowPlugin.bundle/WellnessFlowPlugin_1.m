uint64_t sub_5EBDC()
{
  uint64_t v0;
  uint64_t result;
  v0 = type metadata accessor for ResponseFactory(0LL);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = ResponseFactory.init()();
  qword_19C298 = v0;
  unk_19C2A0 = &protocol witness table for ResponseFactory;
  qword_19C280 = result;
  return result;
}

uint64_t sub_5EC2C(uint64_t a1, char a2, uint64_t a3)
{
  *(_BYTE *)(v3 + 48) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a3;
  return sub_5F0F0((uint64_t)sub_5EC40);
}

uint64_t sub_5EC40()
{
  if (qword_189AD0 != -1) {
    swift_once(&qword_189AD0, sub_5EAF4);
  }
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = (void *)swift_task_alloc(dword_18DBD4);
  *(void *)(v0 + 32) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_5ECCC;
  return sub_9E258(v1, *(_BYTE *)(v0 + 48), v2);
}

uint64_t sub_5ECCC()
{
  *(void *)(v2 + 40) = v1;
  sub_36900(v3);
  if (v0)
  {
    swift_errorRelease(v0);
    uint64_t v4 = sub_5F0E0();
    return sub_5F07C(v4, v5, v6);
  }

  else
  {
    sub_A964();
    return sub_A5D0();
  }

uint64_t sub_5ED18()
{
  id v3 = [*(id *)(v2 + 40) dialog];
  unint64_t v4 = sub_5F108();
  sub_5F0FC(v4);
  sub_5F15C();
  if (v0 >> 62)
  {
    sub_5F098();
    uint64_t v7 = sub_5F138();
    sub_249D4();
    if (v7) {
      goto LABEL_3;
    }
LABEL_5:
    v8 = *(void **)(v2 + 40);
    sub_249D4();

    goto LABEL_6;
  }

uint64_t sub_5EDE4(uint64_t a1, uint64_t a2)
{
  v3[2] = a1;
  v3[3] = a2;
  uint64_t v4 = sub_494C(&qword_189D00);
  v3[4] = sub_D8CC(*(void *)(v4 - 8));
  v3[5] = swift_task_alloc(v2);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_5EE34()
{
  if (qword_189AD8 != -1) {
    swift_once(&qword_189AD8, sub_5EB08);
  }
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  String.toSpeakableString.getter(v0[2], v0[3]);
  type metadata accessor for SpeakableString(0LL);
  sub_5F150(v2, 0LL);
  sub_5F150(v1, 1LL);
  id v3 = (void *)swift_task_alloc(dword_18B0D4);
  v0[6] = v3;
  *id v3 = v0;
  v3[1] = sub_5EEEC;
  return sub_3D2B0(v0[5], v0[4]);
}

uint64_t sub_5EEEC(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 48);
  uint64_t v5 = *(void *)(*v2 + 32);
  *(void *)(v3 + 56) = a1;
  *(void *)(v3 + 64) = v1;
  sub_36900(v4);
  sub_59A88(v5);
  sub_5F130();
  sub_A964();
  return swift_task_switch(v6, v7, v8);
}

uint64_t sub_5EF68()
{
  id v3 = [*(id *)(v2 + 56) dialog];
  unint64_t v4 = sub_5F108();
  sub_5F0FC(v4);
  sub_5F15C();
  if (v0 >> 62)
  {
    sub_5F098();
    uint64_t v7 = sub_5F138();
    sub_249D4();
    if (v7) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v8 = *(void **)(v2 + 56);
    sub_249D4();

    goto LABEL_6;
  }

uint64_t sub_5F044()
{
  uint64_t v1 = v0[4];
  swift_task_dealloc(v0[5]);
  swift_task_dealloc(v1);
  uint64_t v2 = sub_5F0E0();
  return sub_5F07C(v2, v3, v4);
}

uint64_t sub_5F07C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_5F088(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_5F098()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_5F0AC()
{
  return sub_398E0(0LL, (v0 & 0xC000000000000001LL) == 0, v0);
}

void sub_5F0C0()
{
  *(void *)(v1 - 8) = *v0;
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_5F0E0()
{
  return 0LL;
}

uint64_t sub_5F0F0(uint64_t a1)
{
  return swift_task_switch(a1, 0LL, 0LL);
}

uint64_t sub_5F0FC(uint64_t a1)
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, a1);
}

unint64_t sub_5F108()
{
  return sub_5EBA0();
}

void sub_5F114()
{
}

uint64_t sub_5F120()
{
  return v0;
}

uint64_t sub_5F130()
{
  return sub_59A88(v0);
}

uint64_t sub_5F138()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_5F140()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

void sub_5F148()
{
}

uint64_t sub_5F150(uint64_t a1, uint64_t a2)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, 1LL, v2);
}

void sub_5F15C()
{
}

Swift::Int sub_5F164()
{
  return Hasher._finalize()();
}

uint64_t sub_5F1B8(char a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, __int128 *a6)
{
  uint64_t v13 = swift_allocObject(v6, 248LL, 7LL);
  sub_5F234(a1, a2, a3, a4, a5, a6);
  return v13;
}

uint64_t sub_5F234(char a1, uint64_t a2, void *__src, uint64_t a4, uint64_t a5, __int128 *a6)
{
  *(_BYTE *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  memcpy((void *)(v6 + 32), __src, 0xA0uLL);
  *(void *)(v6 + 192) = a4;
  *(void *)(v6 + 200) = a5;
  sub_20004(a6, v6 + 208);
  return v6;
}

uint64_t sub_5F28C(uint64_t a1)
{
  v2[17] = a1;
  v2[18] = v1;
  v2[19] = *v1;
  uint64_t v3 = type metadata accessor for Parse.DirectInvocation(0LL);
  v2[20] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[21] = v4;
  v2[22] = sub_A5C0(v4);
  uint64_t v5 = sub_494C(&qword_18B900);
  v2[23] = sub_A5C0(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  v2[24] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[25] = v7;
  v2[26] = sub_A5C0(v7);
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  v2[27] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[28] = v9;
  v2[29] = sub_D8CC(v9);
  v2[30] = sub_A5B8();
  uint64_t v10 = type metadata accessor for Parse(0LL);
  v2[31] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[32] = v11;
  v2[33] = sub_D8CC(v11);
  v2[34] = sub_A5B8();
  uint64_t v12 = type metadata accessor for USOParse(0LL);
  v2[35] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[36] = v13;
  v2[37] = sub_A5C0(v13);
  uint64_t v14 = type metadata accessor for Input(0LL);
  v2[38] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v2[39] = v15;
  v2[40] = sub_A5C0(v15);
  uint64_t v16 = sub_D984();
  v2[41] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v2[42] = v17;
  v2[43] = sub_D8CC(v17);
  v2[44] = sub_A5B8();
  v2[45] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_5F3B8(uint64_t a1)
{
  uint64_t v3 = v1 + 17;
  uint64_t v2 = v1[17];
  uint64_t v4 = (uint64_t)(v1 + 9);
  uint64_t v5 = v1[45];
  uint64_t v6 = v1[42];
  uint64_t v8 = v3[22];
  uint64_t v7 = v3[23];
  uint64_t v9 = v3[21];
  uint64_t v10 = Logger.wellness.unsafeMutableAddressor(a1);
  sub_A5DC(v10, v4);
  v290 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  uint64_t v299 = v10;
  sub_61900(v5, v10, v290);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v2, v9);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  uint64_t v14 = v325;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v15 = v325[40];
    uint64_t v321 = v325[41];
    uint64_t v323 = v325[45];
    uint64_t v16 = v325[38];
    uint64_t v309 = v325[39];
    uint64_t v318 = v325[42];
    uint64_t v17 = v325[19];
    uint64_t v18 = sub_A5E8(22LL);
    uint64_t v280 = sub_A5E8(64LL);
    uint64_t v327 = v280;
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v19 = _typeName(_:qualified:)(v17, 0LL);
    uint64_t v21 = sub_39178(v19, v20, &v327);
    v325[15] = v21;
    sub_618F4(v21, v22, v18 + 4, v18 + 12);
    sub_1EBF4();
    *(_WORD *)(v18 + 12) = 2080;
    uint64_t v23 = sub_2322C( (unint64_t *)&qword_189EE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v16, v23);
    v325[16] = sub_39178(v24, v25, &v327);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v325 + 16, v3, v18 + 14, v18 + 22);
    sub_249D4();
    (*(void (**)(uint64_t, uint64_t))(v309 + 8))(v15, v16);
    sub_D9B0(&dword_0, v12, v13, "%s Parsing Input: %s", (uint8_t *)v18);
    swift_arrayDestroy(v280, 2LL);
    sub_5050(v280);
    sub_5050(v18);

    uint64_t v26 = v321;
    v27 = *(void (**)(uint64_t, uint64_t))(v318 + 8);
    uint64_t v28 = v323;
  }

  else
  {
    uint64_t v29 = v325[45];
    uint64_t v31 = v325[41];
    uint64_t v30 = v325[42];
    sub_565A8(v325[39]);

    v27 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    uint64_t v28 = v29;
    uint64_t v26 = v31;
  }

  uint64_t v281 = (uint64_t)v27;
  v27(v28, v26);
  uint64_t v32 = v325[18];
  v310 = sub_60EE4();
  uint64_t v319 = v33;
  uint64_t v35 = v34;
  uint64_t v272 = v32;
  uint64_t v36 = *(void *)(v32 + 24);
  if ((unint64_t)v36 >> 62)
  {
    if (v36 < 0) {
      uint64_t v44 = v36;
    }
    else {
      uint64_t v44 = v36 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1EB6C();
    uint64_t v38 = _CocoaArrayWrapper.endIndex.getter(v44);
    uint64_t v37 = v38;
    if (v38) {
      goto LABEL_6;
    }
LABEL_13:
    sub_249D4();
    uint64_t v43 = 0LL;
    goto LABEL_14;
  }

  uint64_t v37 = *(void *)((char *)&dword_10 + (v36 & 0xFFFFFFFFFFFFF8LL));
  uint64_t v38 = sub_1EB6C();
  if (!v37) {
    goto LABEL_13;
  }
LABEL_6:
  sub_370C8(v38, (v36 & 0xC000000000000001LL) == 0);
  if ((v36 & 0xC000000000000001LL) != 0) {
    id v39 = (id)sub_370B0();
  }
  else {
    id v39 = *(id *)(v36 + 32);
  }
  v40 = v39;
  sub_249D4();
  sub_DA4FC(v40);
  uint64_t v37 = v41;
  uint64_t v43 = v42;
LABEL_14:
  uint64_t v45 = v325[34];
  uint64_t v47 = v325[31];
  uint64_t v46 = v325[32];
  sub_61914();
  v48 = *(unsigned int (**)(uint64_t, uint64_t))(v46 + 88);
  if (v48(v45, v47) == enum case for Parse.uso(_:))
  {
    uint64_t v322 = v37;
    uint64_t v324 = v43;
    uint64_t v326 = v35;
    uint64_t v50 = v14[36];
    uint64_t v49 = v14[37];
    uint64_t v52 = v14[34];
    uint64_t v51 = v14[35];
    uint64_t v53 = v14[26];
    uint64_t v54 = v14[25];
    uint64_t v258 = v14[24];
    uint64_t v265 = v14[27];
    uint64_t v55 = v14[23];
    (*(void (**)(uint64_t, void))(v14[32] + 96LL))(v52, v14[31]);
    uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v49, v52, v51);
    uint64_t v57 = USOParse.userParse.getter(v56);
    uint64_t v58 = Siri_Nlu_External_UserParse.userDialogActs.getter(v57);
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v258);
    sub_9109C(v58, v55);
    sub_249D4();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v55, 1LL, v265) == 1)
    {
      uint64_t v59 = v14[23];
      sub_565A8(v14[36]);
      sub_2012C(v59, &qword_18B900);
      uint64_t v43 = v324;
      uint64_t v35 = v326;
      uint64_t v37 = v322;
      goto LABEL_18;
    }

    uint64_t v128 = (*(uint64_t (**)(void, void, void))(v14[28] + 32LL))(v14[30], v14[23], v14[27]);
    if ((Siri_Nlu_External_UserDialogAct.hasAccepted.getter(v128) & 1) != 0)
    {
      int v129 = *(unsigned __int8 *)(v14[18] + 16LL);
      uint64_t v130 = v14[36];
      uint64_t v131 = v14[37];
      uint64_t v132 = v14[35];
      uint64_t v133 = v14[30];
      v134 = v14;
      v137 = v14 + 27;
      uint64_t v136 = v14[27];
      uint64_t v135 = v137[1];
      if (v129 == 1)
      {
        sub_61908();
        unint64_t v138 = sub_61894();
        uint64_t v139 = sub_A5D60(v138);
        sub_6185C( v139,  v140,  v141,  v142,  v143,  v144,  v145,  v146,  v251,  v258,  v265,  v272,  v281,  (uint64_t)v290,  v299,  (uint64_t)v310);
      }

      else
      {
        uint64_t v196 = sub_61908();
        sub_618DC( v196,  v197,  v198,  v199,  v200,  v201,  v202,  v203,  v251,  v258,  v265,  v272,  v281,  (uint64_t)v290,  v299,  (unint64_t)v310);
      }

      swift_bridgeObjectRelease(v319);
      sub_1EBF4();
      uint64_t v326 = v327;
      (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v133, v136);
      (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v131, v132);
      uint64_t v204 = 1LL;
      goto LABEL_42;
    }

    uint64_t v155 = v14[28];
    char v156 = Siri_Nlu_External_UserDialogAct.hasRejected.getter();
    uint64_t v157 = sub_618AC(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v155 + 16));
    v158 = v14;
    uint64_t v159 = v14[30];
    uint64_t v161 = v158[28];
    uint64_t v160 = v158[29];
    v134 = v158;
    uint64_t v162 = v158[27];
    if ((v156 & 1) != 0)
    {
      v163 = *(void (**)(uint64_t, uint64_t))(v161 + 8);
      v163(v158[29], v158[27]);
      v163(v159, v162);
      uint64_t v164 = sub_618BC();
    }

    else
    {
      char v205 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter(v157);
      v206 = *(void (**)(uint64_t, uint64_t))(v161 + 8);
      v206(v160, v162);
      v206(v159, v162);
      uint64_t v164 = sub_618BC();
      if ((v205 & 1) == 0)
      {
        uint64_t v235 = sub_6185C( v164,  v165,  v166,  v167,  v168,  v169,  v170,  v171,  v251,  v258,  v265,  v272,  v281,  (uint64_t)v290,  v299,  (uint64_t)v310);
        sub_61864(v235, v236, v237, v238, v239, v240, v241, v242, v257, v264, v271, v278, v289, v298, v308, v317, v319);
        swift_bridgeObjectRelease(v326);
        uint64_t v326 = *(void *)(v279 + 24);
        swift_bridgeObjectRetain(v326);
        uint64_t v204 = 2LL;
LABEL_42:
        uint64_t v305 = v204;
LABEL_45:
        uint64_t v14 = v134;
        goto LABEL_46;
      }
    }

    uint64_t v207 = sub_61864( v164,  v165,  v166,  v167,  v168,  v169,  v170,  v171,  v251,  v258,  v265,  v272,  v281,  (uint64_t)v290,  v299,  (uint64_t)v310,  v319);
    sub_6185C(v207, v208, v209, v210, v211, v212, v213, v214, v255, v262, v269, v276, v287, v296, v306, v314);
    uint64_t v305 = 0LL;
    goto LABEL_45;
  }

  sub_565A8(v325[32]);
LABEL_18:
  uint64_t v60 = v14[33];
  uint64_t v61 = v14[31];
  sub_61914();
  uint64_t v62 = ((uint64_t (*)(uint64_t, uint64_t))v48)(v60, v61);
  if ((_DWORD)v62 != enum case for Parse.directInvocation(_:))
  {
    uint64_t v104 = (uint64_t)(v3 - 11);
    uint64_t v105 = v14[43];
    uint64_t v106 = v14[41];
    v107 = v14;
    v110 = v14 + 32;
    uint64_t v109 = v14[32];
    uint64_t v108 = v110[1];
    v111 = v107;
    uint64_t v112 = sub_6185C( v62,  v63,  v64,  v65,  v66,  v67,  v68,  v69,  v251,  v258,  v265,  v272,  v281,  (uint64_t)v290,  v299,  (uint64_t)v310);
    sub_61864(v112, v113, v114, v115, v116, v117, v118, v119, v252, v259, v266, v273, v282, v291, v300, v311, v319);
    sub_DA1C();
    swift_bridgeObjectRelease(v43);
    sub_D970(v108, *(uint64_t (**)(uint64_t, uint64_t))(v109 + 8));
    sub_A5DC(v301, v104);
    uint64_t v120 = v292(v105, v301, v106);
    v121 = (void *)Logger.logObject.getter(v120);
    os_log_type_t v122 = static os_log_type_t.error.getter();
    if (sub_A988(v122))
    {
      v123 = (_WORD *)sub_A5E8(2LL);
      _WORD *v123 = 0;
      sub_6186C(&dword_0, v124, v125, "Received unsupported type of input");
      sub_5050((uint64_t)v123);
    }

    uint64_t v14 = v111;
    uint64_t v126 = v111[43];
    uint64_t v127 = v111[41];

    v283(v126, v127);
    goto LABEL_39;
  }

  uint64_t v70 = v37;
  uint64_t v71 = v14[21];
  (*(void (**)(void, void))(v14[32] + 96LL))(v14[33], v14[31]);
  uint64_t v72 = sub_618AC(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v71 + 32));
  uint64_t v73 = Parse.DirectInvocation.userData.getter(v72);
  if (!v73)
  {
    *(_OWORD *)(v3 - 15) = 0u;
    *(_OWORD *)(v3 - 13) = 0u;
    goto LABEL_32;
  }

  sub_12BE4C(0xD000000000000012LL, 0x8000000000141130LL, v73, v3 - 15);
  uint64_t v73 = sub_249D4();
  if (!v14[5])
  {
LABEL_32:
    uint64_t v147 = sub_6185C( v73,  v74,  v75,  v76,  v77,  v78,  v79,  v80,  v251,  v258,  v265,  v272,  v281,  (uint64_t)v290,  v299,  (uint64_t)v310);
    sub_61864(v147, v148, v149, v150, v151, v152, v153, v154, v253, v260, v267, v274, v284, v293, v302, v312, v319);
    sub_DA1C();
    sub_1EBF4();
    sub_2012C((uint64_t)(v3 - 15), &qword_18AA78);
LABEL_36:
    uint64_t v180 = v14[44];
    uint64_t v181 = v14[41];
    sub_A5DC(v303, (uint64_t)(v3 - 5));
    uint64_t v182 = v294(v180, v303, v181);
    v183 = (void *)Logger.logObject.getter(v182);
    os_log_type_t v184 = static os_log_type_t.error.getter();
    if (sub_A988(v184))
    {
      v185 = (_WORD *)sub_A5E8(2LL);
      _WORD *v185 = 0;
      sub_6186C( &dword_0,  v186,  v187,  "LogMedAsNeededConfirmationStrategy failed to unpack directInvocation, returning nil");
      sub_5050((uint64_t)v185);
    }

    uint64_t v188 = v14[44];
    uint64_t v189 = v14[41];
    v190 = v14;
    v193 = v14 + 21;
    uint64_t v192 = v14[21];
    uint64_t v191 = v193[1];
    uint64_t v194 = v190[20];

    v285(v188, v189);
    v195 = *(void (**)(uint64_t, uint64_t))(v192 + 8);
    uint64_t v14 = v190;
    v195(v191, v194);
LABEL_39:
    uint64_t v305 = 0LL;
    uint64_t v322 = 0LL;
    uint64_t v324 = 0LL;
    uint64_t v326 = 1LL;
    goto LABEL_46;
  }

  uint64_t v81 = swift_dynamicCast(v3 + 29, v3 - 15, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL);
  if ((v81 & 1) == 0)
  {
    uint64_t v172 = sub_6185C( v81,  v82,  v83,  v84,  v85,  v86,  v87,  v88,  v251,  v258,  v265,  v272,  v281,  (uint64_t)v290,  v299,  (uint64_t)v310);
    sub_61864(v172, v173, v174, v175, v176, v177, v178, v179, v254, v261, v268, v275, v286, v295, v304, v313, v319);
    sub_DA1C();
    sub_1EBF4();
    goto LABEL_36;
  }

  uint64_t v322 = v70;
  uint64_t v324 = v43;
  if (*((_BYTE *)v3 + 232) == 1)
  {
    int v89 = *(unsigned __int8 *)(v14[18] + 16LL);
    v90 = v14;
    uint64_t v91 = v14[22];
    uint64_t v93 = v90[20];
    uint64_t v92 = v90[21];
    v94 = v90;
    uint64_t v327 = v35;
    if (v89 == 1)
    {
      sub_61894();
      unint64_t v95 = swift_bridgeObjectRetain(v319);
      uint64_t v96 = sub_A5D60(v95);
      sub_6185C( v96,  v97,  v98,  v99,  v100,  v101,  v102,  v103,  v251,  v258,  v265,  v272,  v281,  (uint64_t)v290,  v299,  (uint64_t)v310);
    }

    else
    {
      uint64_t v243 = sub_61894();
      sub_618DC( v243,  v244,  v245,  v246,  v247,  v248,  v249,  v250,  v251,  v258,  v265,  v272,  v281,  (uint64_t)v290,  v299,  (unint64_t)v310);
    }

    swift_bridgeObjectRelease(v319);
    sub_DA1C();
    uint64_t v326 = v327;
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v91, v93);
    uint64_t v305 = 1LL;
    uint64_t v14 = v94;
  }

  else
  {
    uint64_t v219 = sub_565A8(v14[21]);
    uint64_t v227 = sub_61864( v219,  v220,  v221,  v222,  v223,  v224,  v225,  v226,  v251,  v258,  v265,  v272,  v281,  (uint64_t)v290,  v299,  (uint64_t)v310,  v319);
    sub_6185C(v227, v228, v229, v230, v231, v232, v233, v234, v256, v263, v270, v277, v288, v297, v307, v316);
    uint64_t v305 = 0LL;
    uint64_t v326 = v35;
  }

LABEL_46:
  uint64_t v215 = v14[33];
  uint64_t v217 = v14[29];
  uint64_t v216 = v14[30];
  uint64_t v315 = v14[23];
  uint64_t v320 = v14[22];
  swift_task_dealloc(v14[45]);
  sub_A910();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  swift_task_dealloc(v215);
  swift_task_dealloc(v216);
  swift_task_dealloc(v217);
  sub_A78C();
  swift_task_dealloc(v315);
  swift_task_dealloc(v320);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v14[1])(v305, v326, v322, v324);
}

void sub_5FCBC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Input(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_D984();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_27AD8();
  uint64_t v11 = Logger.workout.unsafeMutableAddressor();
  sub_A5DC(v11, (uint64_t)v32);
  uint64_t v28 = v10;
  uint64_t v29 = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v2, v11, v9);
  uint64_t v12 = sub_61900((uint64_t)v8, a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
  os_log_type_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = sub_A5E8(22LL);
    uint64_t v27 = a2;
    uint64_t v16 = v15;
    uint64_t v26 = sub_A5E8(64LL);
    uint64_t v31 = v26;
    *(_DWORD *)uint64_t v16 = 136315394;
    uint64_t v17 = sub_618E8();
    unint64_t v19 = v18;
    uint64_t v30 = sub_39178(v17, v18, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v16 + 12) = 2080;
    uint64_t v20 = sub_2322C( (unint64_t *)&qword_189EE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter(v5, v20);
    uint64_t v30 = sub_39178(v21, v22, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v16 + 14, v16 + 22);
    sub_249D4();
    sub_D970((uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    sub_D9B0(&dword_0, v13, v14, "%s Handling Input: %s", (uint8_t *)v16);
    uint64_t v23 = v26;
    swift_arrayDestroy(v26, 2LL);
    sub_5050(v23);
    sub_5050(v16);
  }

  else
  {
    sub_D970((uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  }

  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v2, v29);
  static ActionForInput.handle()(v24);
  sub_D8FC();
}

uint64_t sub_5FEFC(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  v3[15] = *v2;
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v3[16] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[17] = v5;
  v3[18] = sub_D8CC(v5);
  v3[19] = sub_A5B8();
  uint64_t v6 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[20] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[21] = v7;
  v3[22] = sub_A5C0(v7);
  uint64_t v8 = sub_D984();
  v3[23] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[24] = v9;
  v3[25] = sub_A5C0(v9);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_5FF8C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = (uint64_t)(v1 + 7);
  uint64_t v6 = v1 + 24;
  uint64_t v5 = v1[24];
  uint64_t v4 = v6[1];
  uint64_t v7 = v2[13];
  uint64_t v8 = Logger.wellness.unsafeMutableAddressor(a1);
  sub_A5DC(v8, v3);
  sub_DA14(v4, v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
  swift_errorRetain(v7);
  uint64_t v9 = swift_errorRetain(v7);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v28 = v2[24];
    uint64_t v29 = v2[23];
    uint64_t v30 = v2[25];
    uint64_t v12 = v2[13];
    uint64_t v13 = sub_A5E8(22LL);
    os_log_type_t v14 = (void *)sub_A5E8(8LL);
    uint64_t v27 = sub_A5E8(32LL);
    uint64_t v31 = v27;
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v15 = sub_618E8();
    unint64_t v17 = v16;
    uint64_t v18 = sub_39178(v15, v16, &v31);
    v2[10] = v18;
    sub_618F4(v18, v19, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v13 + 12) = 2112;
    swift_errorRetain(v12);
    uint64_t v20 = _swift_stdlib_bridgeErrorToNSError(v12);
    v2[11] = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 11, v2 + 12, v13 + 14, v13 + 22);
    *os_log_type_t v14 = v20;
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    sub_D9B0(&dword_0, v10, v11, "%s makeErrorResponse called with error: %@", (uint8_t *)v13);
    sub_494C(&qword_189CB8);
    swift_arrayDestroy(v14, 1LL);
    sub_5050((uint64_t)v14);
    swift_arrayDestroy(v27, 1LL);
    sub_5050(v27);
    sub_5050(v13);

    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v29);
  }

  else
  {
    uint64_t v22 = v2[24];
    uint64_t v21 = v2[25];
    uint64_t v23 = v2[23];
    uint64_t v24 = v2[13];
    swift_errorRelease(v24);
    swift_errorRelease(v24);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  }

  sub_500C((void *)(v2[14] + 72LL), *(void *)(v2[14] + 96LL));
  uint64_t v25 = (void *)swift_task_alloc(dword_18CCDC);
  v2[26] = v25;
  *uint64_t v25 = v2;
  v25[1] = sub_601EC;
  return sub_764C8();
}

uint64_t sub_601EC(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v2 + 208);
  uint64_t v4 = *v2;
  *(void *)(v4 + 216) = a1;
  swift_task_dealloc(v3);
  if (v1)
  {
    swift_task_dealloc(*(void *)(v4 + 200));
    sub_A67C();
    sub_A7C8();
    sub_A760();
    return sub_D8C4(*(uint64_t (**)(void))(v4 + 8));
  }

  else
  {
    sub_A964();
    return sub_D954();
  }

uint64_t sub_6027C()
{
  uint64_t v1 = (void *)v0[27];
  uint64_t v3 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v4 = v0[16];
  uint64_t v5 = v0[17];
  uint64_t v6 = v0[14];
  static DialogPhase.error.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
  OutputGenerationManifest.init(dialogPhase:_:)(v3, sub_A633C, 0LL);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  OutputGenerationManifest.canUseServerTTS.setter(0LL);
  id v7 = [v1 patternId];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v10 = v9;

  OutputGenerationManifest.responseViewId.setter(v8, v10);
  sub_D7EC(v6 + 208, (uint64_t)(v0 + 2));
  uint64_t v11 = v0[5];
  uint64_t v12 = v0[6];
  sub_500C(v0 + 2, v11);
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)[1]);
  v0[28] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_603B0;
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)( v0[12],  v0[27],  v0[22],  v11,  v12);
}

uint64_t sub_603B0()
{
  uint64_t v3 = *(void *)(v2 + 224);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 232) = v0;
  swift_task_dealloc(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_60400()
{
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);

  sub_D970(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_AA20();
  sub_A67C();
  sub_A7C8();
  sub_A8EC();
  sub_A910();
  return sub_61844(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_6046C(uint64_t a1)
{
  v2[26] = a1;
  v2[27] = v1;
  uint64_t v3 = sub_D984();
  v2[28] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[29] = v4;
  v2[30] = sub_A5C0(v4);
  uint64_t v5 = sub_494C(&qword_189EE0);
  v2[31] = sub_A5C0(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for DialogPhase(0LL);
  v2[32] = sub_A5C0(*(void *)(v6 - 8));
  uint64_t v7 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[33] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[34] = v8;
  v2[35] = sub_A5C0(v8);
  uint64_t v9 = sub_494C(&qword_189D00);
  v2[36] = sub_D8CC(*(void *)(v9 - 8));
  v2[37] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_60518()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = *(void *)(v1 + 24);
  if (!((unint64_t)v2 >> 62))
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
    uint64_t v4 = sub_1EB6C();
    if (v3) {
      goto LABEL_3;
    }
LABEL_11:
    sub_249D4();
    goto LABEL_12;
  }

  if (v2 < 0) {
    uint64_t v10 = *(void *)(v1 + 24);
  }
  else {
    uint64_t v10 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_1EB6C();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v10);
  if (!v4) {
    goto LABEL_11;
  }
LABEL_3:
  sub_370C8(v4, (v2 & 0xC000000000000001LL) == 0);
  if ((v2 & 0xC000000000000001LL) != 0) {
    id v5 = (id)sub_370B0();
  }
  else {
    id v5 = *(id *)(v2 + 32);
  }
  uint64_t v6 = v5;
  sub_249D4();
  sub_134BCC(v6);
  if (v8)
  {
    String.toSpeakableString.getter(v7, v8);
    sub_249D4();
    uint64_t v9 = 0LL;
    goto LABEL_13;
  }

uint64_t sub_6074C(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  uint64_t v10 = v4;
  sub_56254(v4[39], &v10);
  uint64_t v5 = v4[36];
  if (v1)
  {
    swift_release();
    swift_errorRelease(v1);
    sub_2012C(v5, &qword_189D00);
  }

  else
  {
    v4[40] = a1;
    sub_2012C(v5, &qword_189D00);
    swift_release();
  }

  sub_A964();
  return swift_task_switch(v6, v7, v8);
}

uint64_t sub_607FC()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  *(void *)(v0 + 328) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_60848;
  return sub_36164(0x6C65636E6163LL, 0xE600000000000000LL);
}

uint64_t sub_60848()
{
  v2[20] = v0;
  v2[21] = v1;
  v2[22] = v3;
  uint64_t v4 = v2[41];
  *uint64_t v5 = *v0;
  v2[42] = v3;
  swift_task_dealloc(v4);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_60890()
{
  v0[43] = v0[21];
  uint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  v0[44] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_608E8;
  return sub_36164(0x6D7269666E6F63LL, 0xE700000000000000LL);
}

uint64_t sub_608E8()
{
  v2[23] = v0;
  v2[24] = v1;
  v2[25] = v3;
  uint64_t v4 = v2[44];
  *uint64_t v5 = *v0;
  v2[45] = v3;
  swift_task_dealloc(v4);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_60930()
{
  unint64_t v1 = v0[45];
  unint64_t v3 = v0[42];
  uint64_t v2 = v0[43];
  uint64_t v4 = (void *)v0[40];
  uint64_t v5 = v0[31];
  uint64_t v6 = v0[32];
  uint64_t v7 = v0[27];
  BOOL v8 = v3 == 0;
  if (!v3) {
    unint64_t v3 = 0xE600000000000000LL;
  }
  unint64_t v31 = v3;
  if (v8) {
    uint64_t v2 = 0x6C65636E6143LL;
  }
  uint64_t v30 = v2;
  if (v1) {
    uint64_t v9 = v0[24];
  }
  else {
    uint64_t v9 = 0x6D7269666E6F43LL;
  }
  if (!v1) {
    unint64_t v1 = 0xE700000000000000LL;
  }
  unint64_t v28 = v1;
  uint64_t v29 = v9;
  v0[5] = &type metadata for WellnessFeatureFlagsKey;
  v0[6] = sub_354B0();
  *((_BYTE *)v0 + 16) = 4;
  char v10 = isFeatureEnabled(_:)(v0 + 2);
  uint64_t v11 = _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2);
  static DialogPhase.clarification.getter(v11);
  OutputGenerationManifest.init(dialogPhase:_:)(v6, PhoneRingsSnippet.body.getter, 0LL);
  OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
  sub_61270();
  uint64_t v12 = type metadata accessor for NLContextUpdate(0LL);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v5, 0LL, 1LL, v12);
  OutputGenerationManifest.nlContextUpdate.setter(v5);
  OutputGenerationManifest.canUseServerTTS.setter(0LL);
  id v13 = [v4 catId];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  uint64_t v16 = v15;

  OutputGenerationManifest.responseViewId.setter(v14, v16);
  OutputGenerationManifest.printSupportingDialogInDisplayModes.setter(1LL);
  sub_D7EC(v7 + 208, (uint64_t)(v0 + 7));
  uint64_t v17 = v0[10];
  sub_500C(v0 + 7, v17);
  uint64_t v18 = type metadata accessor for WellnessSnippets(0LL);
  v0[15] = v18;
  v0[16] = sub_2322C( (unint64_t *)&qword_18A468,  type metadata accessor for WellnessSnippets,  (uint64_t)&protocol conformance descriptor for WellnessSnippets);
  uint64_t v19 = sub_B76C(v0 + 12);
  *uint64_t v19 = 0xD000000000000031LL;
  v19[1] = 0x80000000001449C0LL;
  v19[2] = v30;
  v19[3] = v31;
  v19[4] = v29;
  v19[5] = v28;
  *((_BYTE *)v19 + 48) = v10 & 1;
  swift_storeEnumTagMultiPayload(v19, v18, 5LL);
  uint64_t v20 = sub_494C(&qword_18A460);
  uint64_t v21 = swift_allocObject(v20, 40LL, 7LL);
  *(_OWORD *)(v21 + 16) = xmmword_138BA0;
  *(void *)(v21 + 32) = v4;
  uint64_t v32 = v21;
  specialized Array._endMutation()(v21, v22, v23);
  v0[46] = v32;
  uint64_t v24 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)[1];
  id v25 = v4;
  uint64_t v26 = (void *)swift_task_alloc(v24);
  v0[47] = v26;
  *uint64_t v26 = v0;
  v26[1] = sub_60BD8;
  return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)( v0[26],  v0 + 12,  v32,  v0[35],  v17);
}

uint64_t sub_60BD8()
{
  return sub_D954();
}

uint64_t sub_60C24()
{
  uint64_t v1 = *(void *)(v0 + 296);
  uint64_t v3 = *(void *)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 280);

  sub_D970(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_2012C(v1, &qword_189D00);
  sub_AA20();
  sub_61880();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  return sub_D8B0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_60CA0(uint64_t a1)
{
  uint64_t v3 = v1[29];
  uint64_t v2 = v1[30];
  uint64_t v4 = Logger.wellness.unsafeMutableAddressor(a1);
  sub_A5DC(v4, (uint64_t)(v1 + 17));
  uint64_t v5 = sub_DA14(v2, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (sub_A988(v7))
  {
    BOOL v8 = (uint8_t *)sub_A5E8(2LL);
    *(_WORD *)BOOL v8 = 0;
    _os_log_impl( &dword_0,  v6,  (os_log_type_t)v2,  "Couldn't create logMedScheduleMixedStatusConfirmation_Dialog, returning generic error output.",  v8,  2u);
    sub_5050((uint64_t)v8);
  }

  sub_D9B8();
  unint64_t v9 = sub_61728();
  uint64_t v10 = swift_allocError(&type metadata for LogMedScheduleMixedStatusConfirmationStrategyError, v9, 0LL, 0LL);
  v1[48] = v10;
  uint64_t v11 = (uint64_t **)swift_task_alloc(dword_18B74C);
  v1[49] = (uint64_t)v11;
  *uint64_t v11 = v1;
  v11[1] = (uint64_t *)sub_60DB4;
  return sub_5FEFC(v1[26], v10);
}

uint64_t sub_60DB4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 392);
  *(void *)(*v1 + 400) = v0;
  swift_task_dealloc(v3);
  if (!v0) {
    swift_errorRelease(*(void *)(v2 + 384));
  }
  sub_A964();
  return sub_D954();
}

uint64_t sub_60E18()
{
  return sub_D8B0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_60E6C()
{
  uint64_t v1 = *(void *)(v0 + 384);
  uint64_t v2 = *(void *)(v0 + 240);
  sub_2012C(*(void *)(v0 + 296), &qword_189D00);
  swift_errorRelease(v1);
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  swift_task_dealloc(v2);
  return sub_61844(*(uint64_t (**)(void))(v0 + 8));
}

void *sub_60EE4()
{
  uint64_t v2 = *(void *)(v0 + 24);
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0) {
      uint64_t v30 = *(void *)(v0 + 24);
    }
    else {
      uint64_t v30 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain_n(v2, 2LL);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v30);
    result = (void *)sub_2A184();
    if (v3) {
      goto LABEL_3;
    }
LABEL_31:
    sub_2A184();
    return _swiftEmptyArrayStorage;
  }

  uint64_t v3 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
  result = (void *)swift_bridgeObjectRetain(*(void *)(v0 + 24));
  if (!v3) {
    goto LABEL_31;
  }
LABEL_3:
  if (v3 >= 1)
  {
    uint64_t v5 = 0LL;
    while (1)
    {
      if ((v2 & 0xC000000000000001LL) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v2);
      }
      else {
        id v6 = *(id *)(v2 + 8 * v5 + 32);
      }
      os_log_type_t v7 = v6;
      uint64_t v8 = sub_A5EEC(v6);
      if (v9)
      {
        if (v8 == 0x6E656B6174LL && v9 == 0xE500000000000000LL)
        {
          sub_249D4();
LABEL_24:
          id v16 = v7;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v16);
          sub_6189C();
          if (v18)
          {
            BOOL v24 = sub_618CC(v19);
            sub_61920(v24, v25);
          }

          goto LABEL_30;
        }

        char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, 0x6E656B6174LL, 0xE500000000000000LL, 0LL);
        sub_249D4();
        if ((v11 & 1) != 0) {
          goto LABEL_24;
        }
      }

      uint64_t v12 = sub_A5EEC(v7);
      if (v13)
      {
        if (v12 == 0x64657070696B73LL && v13 == 0xE700000000000000LL)
        {
          sub_249D4();
LABEL_28:
          id v16 = v7;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v16);
          sub_6189C();
          if (v18)
          {
            BOOL v28 = sub_618CC(v20);
            sub_61920(v28, v29);
          }

          goto LABEL_30;
        }

        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, 0x64657070696B73LL, 0xE700000000000000LL, 0LL);
        sub_249D4();
        if ((v15 & 1) != 0) {
          goto LABEL_28;
        }
      }

      id v16 = v7;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v16);
      sub_6189C();
      if (v18)
      {
        BOOL v26 = sub_618CC(v17);
        sub_61920(v26, v27);
      }

LABEL_30:
      uint64_t v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v16);
      ++v5;
      specialized Array._endMutation()(v21, v22, v23);

      if (v3 == v5) {
        goto LABEL_31;
      }
    }
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_6115C()
{
  uint64_t v0 = (uint64_t)sub_60EE4();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  if ((unint64_t)v0 >> 62)
  {
    if (v0 < 0) {
      uint64_t v7 = v0;
    }
    else {
      uint64_t v7 = v0 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v0);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v7);
  }

  else
  {
    uint64_t v5 = *(void *)((char *)&dword_10 + (v0 & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain(v0);
  }

  swift_bridgeObjectRetain(v2);
  sub_58F9C();
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0) {
      uint64_t v8 = v2;
    }
    else {
      uint64_t v8 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    _CocoaArrayWrapper.endIndex.getter(v8);
    sub_58F9C();
  }

  sub_58F9C();
  swift_bridgeObjectRelease_n(v2, 2LL);
  if ((unint64_t)v4 >> 62)
  {
    if (v4 < 0) {
      uint64_t v9 = v4;
    }
    else {
      uint64_t v9 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    _CocoaArrayWrapper.endIndex.getter(v9);
    sub_2A184();
  }

  sub_2A184();
  return v5;
}

void sub_61270()
{
  uint64_t v1 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_27AD8();
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_SystemOffered(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v17 - v9;
  uint64_t v11 = Siri_Nlu_External_SystemOffered.init()(v8);
  Siri_Nlu_External_SystemDialogAct.init()(v11);
  sub_61900((uint64_t)v7, (uint64_t)v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
  uint64_t v12 = Siri_Nlu_External_SystemDialogAct.offered.setter(v7);
  NLContextUpdate.init()(v12);
  uint64_t v13 = sub_494C(&qword_189ED8);
  uint64_t v14 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v15 = (v14 + 32) & ~v14;
  uint64_t v16 = swift_allocObject(v13, v15 + *(void *)(v2 + 72), v14 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_137250;
  sub_DA14(v16 + v15, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  NLContextUpdate.nluSystemDialogActs.setter(v16);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  sub_D970((uint64_t)v10, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_D8FC();
}

void *sub_613BC()
{
  return v0;
}

uint64_t sub_613F8()
{
  return swift_deallocClassInstance(v0, 248LL, 7LL);
}

uint64_t type metadata accessor for LogMedScheduleMixedStatusConfirmationStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC18WellnessFlowPlugin45LogMedScheduleMixedStatusConfirmationStrategy);
}

uint64_t sub_6143C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v4 = (void *)swift_task_alloc(dword_18B744);
  *(void *)(v2 + 2sub_D878(v0 + 4) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_6148C;
  return sub_5F28C(a2);
}

uint64_t sub_6148C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *v5;
  uint64_t v14 = v10;
  uint64_t v11 = *v5;
  sub_56254(*(void *)(v10 + 24), &v14);
  if (!v4)
  {
    uint64_t v12 = *(void **)(v10 + 16);
    *uint64_t v12 = a1;
    v12[1] = a2;
    v12[2] = a3;
    v12[3] = a4;
  }

  return sub_D8C4(*(uint64_t (**)(void))(v11 + 8));
}

uint64_t sub_614F8(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18B754);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_61840;
  return sub_6046C(a1);
}

uint64_t sub_61548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse()[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_61840;
  return PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse()(a1, a2, a3);
}

uint64_t sub_615B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to PromptForValueFlowStrategyAsync.makeRepromptOnLowConfidence()[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_61840;
  return PromptForValueFlowStrategyAsync.makeRepromptOnLowConfidence()(a1, a2, a3);
}

uint64_t sub_61620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to PromptForValueFlowStrategyAsync.makeFlowCancelledResponse()[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_6168C;
  return PromptForValueFlowStrategyAsync.makeFlowCancelledResponse()(a1, a2, a3);
}

uint64_t sub_6168C()
{
  uint64_t v2 = *v0;
  sub_56254(*(void *)(v1 + 16), &v4);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_616C8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_18B74C);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_61840;
  return sub_5FEFC(a1, a2);
}

unint64_t sub_61728()
{
  unint64_t result = qword_18B8F8;
  if (!qword_18B8F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_13AACC, &type metadata for LogMedScheduleMixedStatusConfirmationStrategyError);
    atomic_store(result, (unint64_t *)&qword_18B8F8);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for LogMedScheduleMixedStatusConfirmationStrategyError( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(vsub_D878(v0 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_617A4 + 4 * byte_13A940[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_617C4 + 4 * byte_13A945[v4]))();
  }
}

_BYTE *sub_617A4(_BYTE *result, char a2)
{
  void *result = a2;
  return result;
}

_BYTE *sub_617C4(_BYTE *result)
{
  void *result = 0;
  return result;
}

_DWORD *sub_617CC(_DWORD *result, int a2)
{
  void *result = a2;
  return result;
}

_WORD *sub_617D4(_WORD *result, __int16 a2)
{
  void *result = a2;
  return result;
}

_WORD *sub_617DC(_WORD *result)
{
  void *result = 0;
  return result;
}

_DWORD *sub_617E4(_DWORD *result)
{
  void *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LogMedScheduleMixedStatusConfirmationStrategyError()
{
  return &type metadata for LogMedScheduleMixedStatusConfirmationStrategyError;
}

unint64_t sub_61804()
{
  unint64_t result = qword_18B908;
  if (!qword_18B908)
  {
    unint64_t result = swift_getWitnessTable(&unk_13AAA4, &type metadata for LogMedScheduleMixedStatusConfirmationStrategyError);
    atomic_store(result, (unint64_t *)&qword_18B908);
  }

  return result;
}

uint64_t sub_61844(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_6185C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return swift_bridgeObjectRelease(a16);
}

uint64_t sub_61864( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return swift_bridgeObjectRelease(a17);
}

void sub_6186C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_61880()
{
  return swift_task_dealloc(*(void *)(v0 + 296));
}

uint64_t sub_61894()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

uint64_t sub_618AC@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v3, v2, v1);
}

uint64_t sub_618BC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

BOOL sub_618CC@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_618DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16)
{
  return sub_A5D60(a16);
}

uint64_t sub_618E8()
{
  return _typeName(_:qualified:)(v0, 0LL);
}

uint64_t sub_618F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v5, v4, a3, a4);
}

uint64_t sub_61900@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_61908()
{
  *(void *)(v1 - 80) = v0;
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_61914()
{
  return Input.parse.getter();
}

uint64_t sub_61920(uint64_t a1, uint64_t a2)
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1LL);
}

uint64_t type metadata accessor for WellnessQueryingCATPatternsExecutor(uint64_t a1)
{
  return sub_70F74( a1,  (uint64_t *)&unk_18B910,  (uint64_t)&nominal type descriptor for WellnessQueryingCATPatternsExecutor);
}

uint64_t sub_6193C(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_19C2A8);
}

void sub_61978( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_61984()
{
  uint64_t v5 = sub_494C(&qword_18A6A0);
  uint64_t v6 = sub_20308(v5, 272LL);
  *(_OWORD *)(v6 + 16) = xmmword_13A300;
  sub_72F34(v6, 0xD000000000000016LL);
  uint64_t v7 = sub_ABF4();
  uint64_t v8 = sub_72A58(v2);
  if (v9)
  {
    sub_73248(v8, &qword_189D00);
    sub_72F84();
  }

  else
  {
    uint64_t v10 = sub_72E78();
    sub_72B10((uint64_t)v10);
  }

  uint64_t v11 = sub_72AB4();
  uint64_t v12 = type metadata accessor for WellnessQueryingBasalBodyTemperatureParameters(v11);
  uint64_t v13 = sub_73324(v12);
  sub_73238(v13, v14, &qword_189D00);
  uint64_t v15 = sub_72A58(v1);
  if (v9)
  {
    sub_72F7C(v15, &qword_189D00);
    sub_72F84();
  }

  else
  {
    *(void *)(v6 + 120) = v7;
    uint64_t v16 = sub_72F08();
    sub_72AD4((uint64_t)v16);
  }

  sub_734E0((uint64_t)"queriedCalendarRange");
  if (v1)
  {
    uint64_t v17 = sub_72F10();
    uint64_t v18 = v1;
  }

  else
  {
    uint64_t v17 = sub_73228();
  }

  *(void *)(v6 + 14sub_D878(v0 + 4) = v18;
  *(void *)(v6 + 168) = v17;
  *(void *)(v6 + 176) = 0x74617265706D6574LL;
  *(void *)(v6 + 18sub_D878(v0 + 4) = 0xEB00000000657275LL;
  uint64_t v19 = *(void *)(v0 + *(int *)(v12 + 28));
  if (v19)
  {
    sub_733C4();
    uint64_t v20 = v19;
  }

  else
  {
    sub_732E8();
  }

  *(void *)(v6 + 192) = v20;
  sub_732A4();
  *(void *)(v6 + 216) = v21;
  *(void *)(v6 + 22sub_D878(v0 + 4) = v22;
  sub_735D4();
  if (v0)
  {
    uint64_t v23 = sub_72EEC();
  }

  else
  {
    uint64_t v23 = 0LL;
    *(void *)(v6 + 248) = 0LL;
    *(void *)(v6 + 256) = 0LL;
  }

  *(void *)(v6 + 240) = v0;
  *(void *)(v6 + 26sub_D878(v0 + 4) = v23;
  sub_732B8();
  sub_363E8();
  sub_372CC();
  sub_731D4();
  sub_24A0C();
}

void sub_61B2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_61B38()
{
  uint64_t v9 = sub_494C(&qword_18A6A0);
  uint64_t v10 = (__n128 *)sub_20308(v9, 464LL);
  uint64_t v11 = sub_73560(v10, (__n128)xmmword_13AB10);
  uint64_t v13 = sub_7369C((uint64_t)v11, v12);
  sub_72FB8(v13);
  uint64_t v14 = sub_ABF4();
  uint64_t v15 = sub_72A20(v2);
  if (v16)
  {
    sub_73370(v15, &qword_189D00);
    sub_72E84();
  }

  else
  {
    v10[4].n128_u64[1] = v14;
    uint64_t v17 = sub_72E20();
    sub_DA34((uint64_t)v17, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32LL));
  }

  uint64_t v18 = sub_72DF8();
  uint64_t v19 = type metadata accessor for WellnessQueryingBloodOxygenParameters(v18);
  sub_72CE8();
  if ((v21 & 1) != 0)
  {
    uint64_t v22 = 0LL;
    v10[6].n128_u64[1] = 0LL;
    v10[7].n128_u64[0] = 0LL;
    double v23 = 0.0;
  }

  else
  {
    double v23 = *v20;
    uint64_t v22 = &type metadata for Double;
  }

  sub_73184((uint64_t)v22, v23);
  sub_7317C(v0 + *(int *)(v19 + 24), v24, &qword_189D00);
  uint64_t v25 = sub_72A20(v3);
  if (v16)
  {
    sub_73240(v25, &qword_189D00);
    sub_72E84();
  }

  else
  {
    v10[10].n128_u64[1] = v14;
    BOOL v26 = sub_72E20();
    sub_DA34((uint64_t)v26, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32LL));
  }

  v10[11].n128_u64[0] = v5;
  v10[11].n128_u64[1] = 0x8000000000144550LL;
  uint64_t v27 = *(void *)(v0 + *(int *)(v19 + 28));
  if (v27)
  {
    uint64_t v28 = sub_72F10();
    uint64_t v29 = v27;
  }

  else
  {
    uint64_t v28 = sub_732E8();
  }

  sub_72EC8(v28, v29);
  sub_72CE8();
  if ((v31 & 1) != 0)
  {
    double v33 = sub_73208();
  }

  else
  {
    double v33 = *v30;
    uint64_t v32 = &type metadata for Double;
  }

  v10[15].n128_f64[0] = v33;
  v10[16].n128_u64[1] = (unint64_t)v32;
  v10[17].n128_u64[0] = 0x65756C61566E696DLL;
  v10[17].n128_u64[1] = 0xE800000000000000LL;
  sub_72CE8();
  if ((v35 & 1) != 0)
  {
    double v37 = sub_73218();
  }

  else
  {
    double v37 = *v34;
    uint64_t v36 = &type metadata for Double;
  }

  sub_73280((uint64_t)v36, v37);
  if (v4)
  {
    uint64_t v38 = sub_72EEC();
    uint64_t v39 = v4;
  }

  else
  {
    uint64_t v38 = sub_730B8();
  }

  uint64_t v40 = sub_73144(v38, v39);
  sub_73238(v40, v41, &qword_189D00);
  sub_72A20(v1);
  if (v16)
  {
    sub_36C5C();
    uint64_t v42 = sub_72C38();
    sub_72F7C(v42, &qword_189D00);
    sub_730FC();
  }

  else
  {
    v10[25].n128_u64[1] = v14;
    uint64_t v43 = sub_72FD0();
    sub_DA34((uint64_t)v43, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32LL));
    sub_36C5C();
    sub_72C38();
  }

  v10[26].n128_u64[0] = 0x65756C6176LL;
  v10[26].n128_u64[1] = 0xE500000000000000LL;
  sub_72CE8();
  if ((v45 & 1) != 0)
  {
    double v47 = sub_73470();
  }

  else
  {
    double v47 = *v44;
    uint64_t v46 = &type metadata for Double;
  }

  v10[27].n128_f64[0] = v47;
  v10[28].n128_u64[1] = (unint64_t)v46;
  sub_731D4();
  sub_24A0C();
}

void sub_61DD4()
{
  uint64_t v7 = sub_494C(&qword_18A6A0);
  uint64_t v8 = sub_20308(v7, 752LL);
  *(_OWORD *)(v8 + 16) = xmmword_13AB20;
  *(void *)(v8 + 32) = 0xD000000000000016LL;
  *(void *)(v8 + 40) = 0x8000000000144A60LL;
  sub_72FB8(v0);
  uint64_t v9 = sub_ABF4();
  uint64_t v10 = sub_72A20(v2);
  if (v11)
  {
    sub_73370(v10, &qword_189D00);
    sub_72E84();
  }

  else
  {
    *(void *)(v8 + 72) = v9;
    uint64_t v12 = sub_72E20();
    sub_DA34((uint64_t)v12, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL));
  }

  uint64_t v13 = sub_72AB4();
  uint64_t v14 = (int *)type metadata accessor for WellnessQueryingBloodPressure_DetailedResultParameters(v13);
  uint64_t v15 = sub_73324((uint64_t)v14);
  sub_7317C(v15, v16, &qword_189D00);
  uint64_t v17 = sub_72A20(v3);
  if (v11)
  {
    sub_73240(v17, &qword_189D00);
    sub_72E84();
  }

  else
  {
    *(void *)(v8 + 120) = v9;
    uint64_t v18 = sub_72E20();
    sub_DA34((uint64_t)v18, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL));
  }

  sub_7358C();
  *(void *)(v8 + 128) = v19;
  *(void *)(v8 + 136) = 0xEC00000078614D63LL;
  uint64_t v20 = v0 + v14[6];
  if ((*(_BYTE *)(v20 + 8) & 1) != 0)
  {
    char v21 = 0LL;
    *(void *)(v8 + 152) = 0LL;
    *(void *)(v8 + 160) = 0LL;
    uint64_t v22 = 0LL;
  }

  else
  {
    uint64_t v22 = *(void *)v20;
    char v21 = &type metadata for Double;
  }

  *(void *)(v8 + 14sub_D878(v0 + 4) = v22;
  *(void *)(v8 + 168) = v21;
  *(void *)(v8 + 176) = v19;
  *(void *)(v8 + 18sub_D878(v0 + 4) = 0xEC0000006E694D63LL;
  sub_72CE8();
  if ((v24 & 1) != 0)
  {
    uint64_t v25 = 0LL;
    *(void *)(v8 + 200) = 0LL;
    *(void *)(v8 + 208) = 0LL;
    uint64_t v26 = 0LL;
  }

  else
  {
    uint64_t v26 = *v23;
    uint64_t v25 = &type metadata for Double;
  }

  *(void *)(v8 + 192) = v26;
  *(void *)(v8 + 216) = v25;
  *(void *)(v8 + 22sub_D878(v0 + 4) = 0x6E69577473726966LL;
  *(void *)(v8 + 232) = 0xEF657A6953776F64LL;
  sub_72CE8();
  if ((v28 & 1) != 0)
  {
    double v30 = sub_73208();
  }

  else
  {
    double v30 = *v27;
    uint64_t v29 = &type metadata for Double;
  }

  *(double *)(v8 + 240) = v30;
  *(void *)(v8 + 26sub_D878(v0 + 4) = v29;
  *(void *)(v8 + 272) = 0xD000000000000012LL;
  sub_73510((uint64_t)"followupWindowSize");
  sub_72CE8();
  if ((v32 & 1) != 0)
  {
    double v34 = sub_73218();
  }

  else
  {
    double v34 = *v31;
    double v33 = &type metadata for Double;
  }

  sub_73008((uint64_t)v33, v34);
  sub_73110(*(_BYTE *)(v0 + v14[10]));
  *(_BYTE *)(v8 + 38sub_D878(v0 + 4) = *(_BYTE *)(v0 + v14[11]);
  *(void *)(v8 + 408) = v35;
  *(void *)(v8 + 416) = 0xD000000000000016LL;
  *(void *)(v8 + 42sub_D878(v0 + 4) = 0x8000000000144BC0LL;
  *(_BYTE *)(v8 + 432) = *(_BYTE *)(v0 + v14[12]);
  *(void *)(v8 + 456) = v35;
  *(void *)(v8 + 46sub_D878(v0 + 4) = 0xD000000000000014LL;
  sub_73538((uint64_t)"queriedCalendarRange");
  uint64_t v36 = *(void *)(v0 + v14[13]);
  if (v36)
  {
    uint64_t v37 = sub_72F10();
    uint64_t v38 = v36;
  }

  else
  {
    uint64_t v38 = 0LL;
    uint64_t v37 = 0LL;
    *(void *)(v8 + 488) = 0LL;
    *(void *)(v8 + 496) = 0LL;
  }

  *(void *)(v8 + 480) = v38;
  *(void *)(v8 + 50sub_D878(v0 + 4) = v37;
  *(void *)(v8 + 512) = 0x63696C6F74737973LL;
  *(void *)(v8 + 520) = 0xEB0000000078614DLL;
  uint64_t v39 = v0 + v14[14];
  if ((*(_BYTE *)(v39 + 8) & 1) != 0)
  {
    uint64_t v40 = 0LL;
    *(_OWORD *)(v8 + 536) = 0u;
    uint64_t v41 = 0LL;
  }

  else
  {
    uint64_t v41 = *(void *)v39;
    uint64_t v40 = &type metadata for Double;
  }

  *(void *)(v8 + 528) = v41;
  *(void *)(v8 + 552) = v40;
  *(void *)(v8 + 560) = 0x63696C6F74737973LL;
  *(void *)(v8 + 568) = 0xEB000000006E694DLL;
  sub_72CE8();
  if ((v43 & 1) != 0)
  {
    double v45 = sub_73548();
  }

  else
  {
    double v45 = *v42;
    uint64_t v44 = &type metadata for Double;
  }

  *(double *)(v8 + 576) = v45;
  *(void *)(v8 + 600) = v44;
  sub_732A4();
  *(void *)(v8 + 608) = v46;
  *(void *)(v8 + 616) = 0xE400000000000000LL;
  uint64_t v47 = *(void *)(v0 + v14[16]);
  if (v47)
  {
    uint64_t v48 = sub_72EEC();
    uint64_t v50 = v47;
  }

  else
  {
    uint64_t v48 = sub_73610();
    *(_OWORD *)(v8 + 632) = 0u;
  }

  *(void *)(v8 + 62sub_D878(v0 + 4) = v50;
  *(void *)(v8 + 648) = v48;
  *(void *)(v8 + 656) = 1953066613LL;
  *(void *)(v8 + 66sub_D878(v0 + 4) = 0xE400000000000000LL;
  sub_73238(v0 + v14[17], v49, &qword_189D00);
  sub_72A20(v1);
  if (v11)
  {
    sub_36C5C();
    uint64_t v51 = sub_72C38();
    sub_72F7C(v51, &qword_189D00);
    sub_730FC();
  }

  else
  {
    *(void *)(v8 + 696) = v9;
    uint64_t v52 = sub_72FD0();
    sub_DA34((uint64_t)v52, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL));
    sub_36C5C();
    sub_72C38();
  }

  sub_7361C();
  *(void *)(v8 + 70sub_D878(v0 + 4) = v53;
  *(void *)(v8 + 712) = 0xEA0000000000657ALL;
  sub_72CE8();
  if ((v55 & 1) != 0)
  {
    double v57 = sub_73548();
  }

  else
  {
    double v57 = *v54;
    uint64_t v56 = &type metadata for Double;
  }

  *(double *)(v8 + 720) = v57;
  *(void *)(v8 + 74sub_D878(v0 + 4) = v56;
  sub_731D4();
  sub_24A0C();
}

void sub_6223C()
{
  uint64_t v5 = v1;
  sub_735C8();
  sub_732B0();
  sub_6D20();
  __chkstk_darwin(v6);
  sub_72EAC();
  __chkstk_darwin(v7);
  sub_ABA4();
  __chkstk_darwin(v8);
  sub_AA00();
  uint64_t v9 = sub_494C(&qword_18A6A0);
  uint64_t v10 = (__n128 *)sub_20308(v9, 368LL);
  char v11 = sub_73560(v10, (__n128)xmmword_13AB30);
  sub_72F50((uint64_t)v11, v12);
  uint64_t v13 = sub_ABF4();
  uint64_t v14 = sub_72A20(v2);
  if (v15)
  {
    sub_73370(v14, &qword_189D00);
    sub_72E84();
  }

  else
  {
    v10[4].n128_u64[1] = v13;
    uint64_t v16 = sub_72E20();
    sub_DA34((uint64_t)v16, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL));
  }

  uint64_t v17 = sub_73658(0x795461746164LL);
  uint64_t v18 = (int *)type metadata accessor for WellnessQueryingBloodPressure_SimpleResultParameters(v17);
  sub_7317C(v5 + v18[5], v19, &qword_189D00);
  uint64_t v20 = sub_72A20(v3);
  if (v15)
  {
    sub_73240(v20, &qword_189D00);
    sub_72E84();
  }

  else
  {
    v10[7].n128_u64[1] = v13;
    char v21 = sub_72E20();
    sub_DA34((uint64_t)v21, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL));
  }

  sub_73318();
  v10[8].n128_u64[0] = v4;
  v10[8].n128_u64[1] = v22;
  unint64_t v23 = *(void *)(v5 + v18[6]);
  if (v23)
  {
    sub_72F10();
    unint64_t v24 = v23;
  }

  else
  {
    unint64_t v24 = 0LL;
    v10[9].n128_u64[1] = 0LL;
    v10[10].n128_u64[0] = 0LL;
  }

  v10[9].n128_u64[0] = v24;
  sub_7358C();
  v10[10].n128_u64[1] = v25;
  v10[11].n128_u64[0] = v26;
  v10[11].n128_u64[1] = 0xE900000000000063LL;
  sub_732DC();
  if ((v28 & 1) != 0)
  {
    uint64_t v29 = 0LL;
    v10[12].n128_u64[1] = 0LL;
    v10[13].n128_u64[0] = 0LL;
    unint64_t v30 = 0LL;
  }

  else
  {
    unint64_t v30 = *v27;
    uint64_t v29 = &type metadata for Double;
  }

  v10[12].n128_u64[0] = v30;
  v10[13].n128_u64[1] = (unint64_t)v29;
  v10[14].n128_u64[0] = 0x63696C6F74737973LL;
  v10[14].n128_u64[1] = 0xE800000000000000LL;
  sub_732DC();
  if ((v32 & 1) != 0)
  {
    double v33 = 0LL;
    v10[15].n128_u64[1] = 0LL;
    v10[16].n128_u64[0] = 0LL;
    unint64_t v34 = 0LL;
  }

  else
  {
    unint64_t v34 = *v31;
    double v33 = &type metadata for Double;
  }

  v10[15].n128_u64[0] = v34;
  v10[16].n128_u64[1] = (unint64_t)v33;
  v10[17].n128_u64[0] = 1701669236LL;
  v10[17].n128_u64[1] = 0xE400000000000000LL;
  unint64_t v35 = *(void *)(v5 + v18[9]);
  if (v35)
  {
    uint64_t v36 = sub_72EEC();
    unint64_t v37 = v35;
  }

  else
  {
    unint64_t v37 = 0LL;
    uint64_t v36 = 0LL;
    v10[18].n128_u64[1] = 0LL;
    v10[19].n128_u64[0] = 0LL;
  }

  v10[18].n128_u64[0] = v37;
  v10[19].n128_u64[1] = v36;
  v10[20].n128_u64[0] = 1953066613LL;
  uint64_t v38 = sub_735E8();
  sub_73438(v38, v39, &qword_189D00);
  sub_72A20(v0);
  if (v15)
  {
    sub_36C5C();
    uint64_t v40 = sub_72C38();
    sub_36A94(v40, &qword_189D00);
    sub_730FC();
  }

  else
  {
    v10[22].n128_u64[1] = v13;
    uint64_t v41 = sub_72FD0();
    sub_DA34((uint64_t)v41, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL));
    sub_36C5C();
    sub_72C38();
  }

  sub_24A0C();
}

void sub_624E4()
{
  uint64_t v7 = sub_494C(&qword_18A6A0);
  uint64_t v8 = (__n128 *)sub_20308(v7, 416LL);
  uint64_t v9 = sub_736B0(v8, (__n128)xmmword_13AB40);
  sub_72F18((uint64_t)v9, v4 | 2);
  uint64_t v10 = sub_ABF4();
  uint64_t v11 = sub_72A58((uint64_t)v1);
  if (v12)
  {
    sub_72F7C(v11, &qword_189D00);
    sub_72F84();
  }

  else
  {
    uint64_t v13 = sub_72E78();
    sub_72AD4((uint64_t)v13);
  }

  uint64_t v14 = sub_72DF8();
  type metadata accessor for WellnessQueryingBodyTemperatureParameters(v14);
  sub_73428();
  if (v3)
  {
    uint64_t v15 = sub_733C4();
    unint64_t v17 = v3;
  }

  else
  {
    uint64_t v15 = sub_73480();
  }

  v8[6].n128_u64[0] = v17;
  v8[7].n128_u64[1] = v15;
  v8[8].n128_u64[0] = 0x6570795461746164LL;
  v8[8].n128_u64[1] = 0xE800000000000000LL;
  sub_73558(v0 + v1[6], v16, &qword_189D00);
  sub_72A58(v2);
  if (v12)
  {
    uint64_t v18 = sub_72C38();
    sub_73248(v18, &qword_189D00);
    sub_72E84();
  }

  else
  {
    v8[10].n128_u64[1] = v10;
    uint64_t v19 = sub_72E20();
    sub_72B10((uint64_t)v19);
    sub_72C38();
  }

  v8[11].n128_u64[0] = v4;
  v8[11].n128_u64[1] = 0x8000000000144550LL;
  uint64_t v20 = *(void *)(v0 + v1[7]);
  if (v20)
  {
    uint64_t v21 = sub_72F10();
    uint64_t v22 = v20;
  }

  else
  {
    uint64_t v21 = sub_732E8();
  }

  sub_72EC8(v21, v22);
  unint64_t v23 = *(void *)(v0 + v1[8]);
  if (v23)
  {
    uint64_t v24 = sub_733C4();
    unint64_t v25 = v23;
  }

  else
  {
    uint64_t v24 = sub_73490();
  }

  v8[15].n128_u64[0] = v25;
  v8[16].n128_u64[1] = v24;
  v8[17].n128_u64[0] = 0x65756C61566E696DLL;
  v8[17].n128_u64[1] = 0xE800000000000000LL;
  unint64_t v26 = *(void *)(v0 + v1[9]);
  if (v26)
  {
    sub_733C4();
    unint64_t v27 = v26;
  }

  else
  {
    sub_734A0();
  }

  v8[18].n128_u64[0] = v27;
  sub_732A4();
  v8[19].n128_u64[1] = v28;
  v8[20].n128_u64[0] = v29;
  v8[20].n128_u64[1] = 0xE400000000000000LL;
  unint64_t v30 = *(void *)(v0 + v1[10]);
  if (v30)
  {
    uint64_t v31 = sub_72EEC();
    unint64_t v32 = v30;
  }

  else
  {
    uint64_t v31 = sub_730B8();
  }

  v8[21].n128_u64[0] = v32;
  v8[22].n128_u64[1] = v31;
  v8[23].n128_u64[0] = 0x65756C6176LL;
  v8[23].n128_u64[1] = 0xE500000000000000LL;
  unint64_t v33 = *(void *)(v0 + v1[11]);
  if (v33)
  {
    uint64_t v34 = sub_733C4();
  }

  else
  {
    uint64_t v34 = 0LL;
    v8[24].n128_u64[1] = 0LL;
    v8[25].n128_u64[0] = 0LL;
  }

  v8[24].n128_u64[0] = v33;
  v8[25].n128_u64[1] = v34;
  sub_36C5C();
  sub_363E8();
  sub_41A9C();
  sub_732B8();
  sub_72C38();
  sub_731D4();
  sub_24A0C();
}

void sub_62738()
{
  uint64_t v5 = sub_494C(&qword_18A6A0);
  uint64_t v6 = sub_20308(v5, 272LL);
  *(_OWORD *)(v6 + 16) = xmmword_13A300;
  sub_72F34(v6, 0xD000000000000016LL);
  uint64_t v7 = sub_ABF4();
  uint64_t v8 = sub_72A58(v2);
  if (v9)
  {
    sub_73248(v8, &qword_189D00);
    sub_72F84();
  }

  else
  {
    uint64_t v10 = sub_72E78();
    sub_72B10((uint64_t)v10);
  }

  uint64_t v11 = sub_72AB4();
  uint64_t v12 = type metadata accessor for WellnessQueryingCardioFitnessParameters(v11);
  uint64_t v13 = sub_73324(v12);
  sub_73238(v13, v14, &qword_189D00);
  uint64_t v15 = sub_72A58(v1);
  if (v9)
  {
    sub_72F7C(v15, &qword_189D00);
    sub_72F84();
  }

  else
  {
    *(void *)(v6 + 120) = v7;
    uint64_t v16 = sub_72F08();
    sub_72AD4((uint64_t)v16);
  }

  sub_734E0((uint64_t)"queriedCalendarRange");
  if (v1)
  {
    uint64_t v17 = sub_72F10();
    uint64_t v18 = v1;
  }

  else
  {
    uint64_t v17 = sub_73228();
  }

  *(void *)(v6 + 14sub_D878(v0 + 4) = v18;
  *(void *)(v6 + 168) = v17;
  *(void *)(v6 + 176) = 0x6C6576656CLL;
  *(void *)(v6 + 18sub_D878(v0 + 4) = 0xE500000000000000LL;
  sub_72CE8();
  if ((v20 & 1) != 0)
  {
    uint64_t v21 = 0LL;
    *(void *)(v6 + 200) = 0LL;
    *(void *)(v6 + 208) = 0LL;
    uint64_t v22 = 0LL;
  }

  else
  {
    uint64_t v22 = *v19;
    uint64_t v21 = &type metadata for Double;
  }

  *(void *)(v6 + 192) = v22;
  *(void *)(v6 + 216) = v21;
  *(void *)(v6 + 22sub_D878(v0 + 4) = 1701669236LL;
  sub_735D4();
  if (v0)
  {
    uint64_t v23 = sub_72EEC();
  }

  else
  {
    uint64_t v23 = 0LL;
    *(void *)(v6 + 248) = 0LL;
    *(void *)(v6 + 256) = 0LL;
  }

  *(void *)(v6 + 240) = v0;
  *(void *)(v6 + 26sub_D878(v0 + 4) = v23;
  sub_372CC();
  sub_363E8();
  sub_731D4();
  sub_24A0C();
}

void sub_628E0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_628EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  unint64_t v26 = v25;
  uint64_t v27 = v21;
  sub_732B0();
  sub_6D20();
  __chkstk_darwin(v28);
  sub_72EAC();
  __chkstk_darwin(v29);
  sub_ABA4();
  __chkstk_darwin(v30);
  unint64_t v32 = (char *)&a9 - v31;
  uint64_t v33 = sub_494C(&qword_18A6A0);
  uint64_t v34 = sub_20308(v33, 368LL);
  *(_OWORD *)(v34 + 16) = xmmword_13AB30;
  *(void *)(v34 + 32) = 0xD000000000000016LL;
  *(void *)(v34 + 40) = 0x8000000000144A60LL;
  sub_41850(v27, (uint64_t)v32, &qword_189D00);
  uint64_t v35 = sub_ABF4();
  sub_72A20((uint64_t)v32);
  if (v36)
  {
    sub_279E0((uint64_t)v32, &qword_189D00);
    sub_730FC();
  }

  else
  {
    *(void *)(v34 + 72) = v35;
    unint64_t v37 = sub_72FD0();
    sub_DA34( (uint64_t)v37,  (uint64_t)v32,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 32LL));
  }

  uint64_t v38 = sub_731AC();
  uint64_t v39 = v26(v38);
  sub_732DC();
  if ((v41 & 1) != 0)
  {
    uint64_t v42 = 0LL;
    *(void *)(v34 + 10sub_D878(v0 + 4) = 0LL;
    *(void *)(v34 + 112) = 0LL;
    double v43 = 0.0;
  }

  else
  {
    double v43 = *v40;
    uint64_t v42 = &type metadata for Double;
  }

  uint64_t v44 = sub_72FD8((uint64_t)v42, v43);
  sub_7317C(v44, v45, &qword_189D00);
  uint64_t v46 = sub_72A20(v22);
  if (v36)
  {
    sub_73240(v46, &qword_189D00);
    sub_72E84();
  }

  else
  {
    *(void *)(v34 + 168) = v35;
    uint64_t v47 = sub_72E20();
    sub_DA34((uint64_t)v47, v22, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 32LL));
  }

  sub_73318();
  *(void *)(v34 + 176) = 0xD000000000000014LL;
  *(void *)(v34 + 18sub_D878(v0 + 4) = v48;
  uint64_t v49 = *(void *)(v27 + *(int *)(v39 + 28));
  if (v49)
  {
    sub_72F10();
    uint64_t v50 = v49;
  }

  else
  {
    uint64_t v50 = 0LL;
    *(void *)(v34 + 200) = 0LL;
    *(void *)(v34 + 208) = 0LL;
  }

  *(void *)(v34 + 192) = v50;
  sub_732A4();
  *(void *)(v34 + 216) = v51;
  *(void *)(v34 + 22sub_D878(v0 + 4) = v52;
  *(void *)(v34 + 232) = 0xE400000000000000LL;
  uint64_t v53 = *(void *)(v27 + *(int *)(v39 + 32));
  if (v53)
  {
    sub_72EEC();
    uint64_t v54 = v53;
  }

  else
  {
    uint64_t v54 = 0LL;
    *(void *)(v34 + 248) = 0LL;
    *(void *)(v34 + 256) = 0LL;
  }

  *(void *)(v34 + 240) = v54;
  sub_735A0();
  *(void *)(v34 + 26sub_D878(v0 + 4) = v55;
  *(void *)(v34 + 272) = v56;
  *(void *)(v34 + 280) = 0xEA00000000006575LL;
  sub_732DC();
  if ((v58 & 1) != 0)
  {
    uint64_t v59 = 0LL;
    *(void *)(v34 + 296) = 0LL;
    *(void *)(v34 + 30sub_D878(v0 + 4) = 0LL;
    uint64_t v60 = 0LL;
  }

  else
  {
    uint64_t v60 = *v57;
    uint64_t v59 = &type metadata for Double;
  }

  *(void *)(v34 + 288) = v60;
  *(void *)(v34 + 312) = v59;
  *(void *)(v34 + 320) = 1953066613LL;
  uint64_t v61 = sub_735E8();
  sub_73438(v61, v62, &qword_189D00);
  sub_72A20(v20);
  if (v36)
  {
    sub_36C5C();
    uint64_t v63 = sub_72C38();
    sub_36A94(v63, &qword_189D00);
    sub_730FC();
  }

  else
  {
    *(void *)(v34 + 360) = v35;
    uint64_t v64 = sub_72FD0();
    sub_DA34((uint64_t)v64, v20, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 32LL));
    sub_36C5C();
    sub_72C38();
  }

  sub_D8FC();
}

void sub_62B90( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_62B9C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_62BA8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_62BB4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_62BC0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_62BCC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  unint64_t v26 = v25;
  sub_7313C();
  sub_6D20();
  __chkstk_darwin(v27);
  sub_D938();
  __chkstk_darwin(v28);
  sub_ABA4();
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&a9 - v30;
  uint64_t v32 = sub_494C(&qword_18A6A0);
  uint64_t v33 = sub_20308(v32, 512LL);
  *(_OWORD *)(v33 + 16) = xmmword_13AB50;
  uint64_t v34 = sub_7369C(v33, 0xD000000000000016LL);
  sub_73108(v34, (uint64_t)v31);
  uint64_t v35 = sub_ABF4();
  sub_72A58((uint64_t)v31);
  if (v36)
  {
    sub_279E0((uint64_t)v31, &qword_189D00);
    sub_730FC();
  }

  else
  {
    *(void *)(v33 + 72) = v35;
    unint64_t v37 = sub_72FD0();
    sub_61900( (uint64_t)v37,  (uint64_t)v31,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 32LL));
  }

  uint64_t v38 = sub_72DF8();
  uint64_t v39 = (int *)v26(v38);
  sub_72CE8();
  if ((v41 & 1) != 0)
  {
    uint64_t v42 = 0LL;
    *(void *)(v33 + 10sub_D878(v0 + 4) = 0LL;
    *(void *)(v33 + 112) = 0LL;
    double v43 = 0.0;
  }

  else
  {
    double v43 = *v40;
    uint64_t v42 = &type metadata for Double;
  }

  sub_73184((uint64_t)v42, v43);
  sub_7317C(v20 + v39[6], v44, &qword_189D00);
  uint64_t v45 = sub_72A58(v22);
  if (v36)
  {
    sub_73240(v45, &qword_189D00);
    sub_72E84();
  }

  else
  {
    *(void *)(v33 + 168) = v35;
    uint64_t v46 = sub_72E20();
    sub_61900((uint64_t)v46, v22, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 32LL));
  }

  *(void *)(v33 + 176) = 0xD000000000000014LL;
  *(void *)(v33 + 18sub_D878(v0 + 4) = 0x8000000000144550LL;
  uint64_t v47 = *(void *)(v20 + v39[7]);
  if (v47)
  {
    uint64_t v48 = sub_72F10();
    uint64_t v49 = v47;
  }

  else
  {
    uint64_t v48 = sub_732E8();
  }

  sub_72EC8(v48, v49);
  sub_72CE8();
  if ((v51 & 1) != 0)
  {
    double v53 = sub_73208();
  }

  else
  {
    double v53 = *v50;
    uint64_t v52 = &type metadata for Double;
  }

  *(double *)(v33 + 240) = v53;
  *(void *)(v33 + 26sub_D878(v0 + 4) = v52;
  *(void *)(v33 + 272) = 0x65756C61566E696DLL;
  *(void *)(v33 + 280) = 0xE800000000000000LL;
  sub_72CE8();
  if ((v55 & 1) != 0)
  {
    double v57 = sub_73218();
  }

  else
  {
    double v57 = *v54;
    uint64_t v56 = &type metadata for Double;
  }

  *(double *)(v33 + 288) = v57;
  *(void *)(v33 + 312) = v56;
  *(void *)(v33 + 320) = 1701669236LL;
  *(void *)(v33 + 328) = 0xE400000000000000LL;
  uint64_t v58 = *(void *)(v20 + v39[10]);
  if (v58)
  {
    uint64_t v59 = sub_72EEC();
    uint64_t v61 = v58;
  }

  else
  {
    uint64_t v59 = sub_730B8();
  }

  *(void *)(v33 + 336) = v61;
  *(void *)(v33 + 360) = v59;
  *(void *)(v33 + 368) = 1953066613LL;
  *(void *)(v33 + 376) = 0xE400000000000000LL;
  sub_73238(v20 + v39[11], v60, &qword_189D00);
  sub_72A58(v21);
  if (v36)
  {
    sub_36C5C();
    uint64_t v62 = sub_72C38();
    sub_72F7C(v62, &qword_189D00);
    sub_730FC();
  }

  else
  {
    *(void *)(v33 + 408) = v35;
    uint64_t v63 = sub_72FD0();
    sub_72AD4((uint64_t)v63);
    sub_36C5C();
    sub_72C38();
  }

  *(void *)(v33 + 416) = 0x65756C6176LL;
  *(void *)(v33 + 42sub_D878(v0 + 4) = 0xE500000000000000LL;
  sub_72CE8();
  if ((v65 & 1) != 0)
  {
    double v67 = sub_73470();
  }

  else
  {
    double v67 = *v64;
    uint64_t v66 = &type metadata for Double;
  }

  *(double *)(v33 + 432) = v67;
  *(void *)(v33 + 456) = v66;
  *(void *)(v33 + 46sub_D878(v0 + 4) = 0xD000000000000010LL;
  sub_73538((uint64_t)"mostRecentSample");
  int v69 = *(unsigned __int8 *)(v20 + v39[13]);
  if (v69 == 2)
  {
    uint64_t v70 = 0LL;
    *uint64_t v68 = 0LL;
    v68[1] = 0LL;
    v68[2] = 0LL;
  }

  else
  {
    *(_BYTE *)uint64_t v68 = v69 & 1;
    uint64_t v70 = &type metadata for Bool;
  }

  *(void *)(v33 + 50sub_D878(v0 + 4) = v70;
  sub_D8FC();
}

void sub_62F04()
{
  uint64_t v5 = sub_494C(&qword_18A6A0);
  uint64_t v6 = (__n128 *)sub_20308(v5, 464LL);
  uint64_t v7 = sub_736B0(v6, (__n128)xmmword_13AB10);
  uint64_t v8 = sub_73644((uint64_t)v7, (uint64_t)"actionAceCommandString");
  sub_73108(v8, v1);
  uint64_t v9 = sub_ABF4();
  uint64_t v10 = sub_72A58(v1);
  if (v11)
  {
    sub_72F7C(v10, &qword_189D00);
    sub_72F84();
  }

  else
  {
    uint64_t v12 = sub_72E78();
    sub_72AD4((uint64_t)v12);
  }

  uint64_t v13 = sub_72AB4();
  uint64_t v14 = (int *)type metadata accessor for WellnessQueryingHeightParameters(v13);
  uint64_t v15 = sub_73324((uint64_t)v14);
  sub_73558(v15, v16, &qword_189D00);
  uint64_t v17 = sub_72A58(v2);
  if (v11)
  {
    sub_73248(v17, &qword_189D00);
    sub_72F84();
  }

  else
  {
    v6[7].n128_u64[1] = v9;
    uint64_t v18 = sub_72F08();
    sub_72B10((uint64_t)v18);
  }

  v6[8].n128_u64[0] = 0xD000000000000016LL;
  v6[8].n128_u64[1] = 0x8000000000144A80LL;
  v6[9].n128_u8[0] = *(_BYTE *)(v0 + v14[6]);
  v6[10].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v6[11].n128_u64[0] = 0xD000000000000017LL;
  v6[11].n128_u64[1] = 0x8000000000144CA0LL;
  v6[12].n128_u8[0] = *(_BYTE *)(v0 + v14[7]);
  v6[13].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v6[14].n128_u64[0] = 0x746867696568LL;
  v6[14].n128_u64[1] = 0xE600000000000000LL;
  unint64_t v19 = *(void *)(v0 + v14[8]);
  if (v19)
  {
    uint64_t v20 = sub_73680();
    unint64_t v21 = v19;
  }

  else
  {
    uint64_t v20 = sub_73490();
  }

  v6[15].n128_u64[0] = v21;
  v6[16].n128_u64[1] = v20;
  v6[17].n128_u64[0] = 0x686769654878616DLL;
  v6[17].n128_u64[1] = 0xE900000000000074LL;
  unint64_t v22 = *(void *)(v0 + v14[9]);
  if (v22)
  {
    uint64_t v23 = sub_73680();
    unint64_t v24 = v22;
  }

  else
  {
    uint64_t v23 = sub_734A0();
  }

  v6[18].n128_u64[0] = v24;
  v6[19].n128_u64[1] = v23;
  v6[20].n128_u64[0] = 0x68676965486E696DLL;
  v6[20].n128_u64[1] = 0xE900000000000074LL;
  unint64_t v25 = *(void *)(v0 + v14[10]);
  if (v25)
  {
    uint64_t v26 = sub_73680();
    unint64_t v27 = v25;
  }

  else
  {
    uint64_t v26 = sub_730B8();
  }

  v6[21].n128_u64[0] = v27;
  v6[22].n128_u64[1] = v26;
  v6[23].n128_u64[0] = 0xD000000000000014LL;
  sub_73630((uint64_t)"queriedCalendarRange");
  unint64_t v29 = *(void *)(v0 + v28);
  if (v29)
  {
    sub_72F10();
    unint64_t v30 = v29;
  }

  else
  {
    sub_73610();
    v6[24].n128_u64[1] = 0LL;
    v6[25].n128_u64[0] = 0LL;
  }

  v6[24].n128_u64[0] = v30;
  sub_732A4();
  v6[25].n128_u64[1] = v31;
  v6[26].n128_u64[0] = v32;
  v6[26].n128_u64[1] = 0xE400000000000000LL;
  unint64_t v33 = *(void *)(v0 + v14[12]);
  if (v33)
  {
    uint64_t v34 = sub_72EEC();
  }

  else
  {
    uint64_t v34 = 0LL;
    v6[27].n128_u64[1] = 0LL;
    v6[28].n128_u64[0] = 0LL;
  }

  v6[27].n128_u64[0] = v33;
  v6[28].n128_u64[1] = v34;
  sub_36C5C();
  sub_363E8();
  sub_41A9C();
  sub_732B8();
  sub_72C38();
  sub_731D4();
  sub_24A0C();
}

void sub_6318C()
{
  uint64_t v4 = sub_494C(&qword_18A6A0);
  uint64_t v5 = (__n128 *)sub_20308(v4, 272LL);
  uint64_t v6 = sub_736B0(v5, (__n128)xmmword_13A300);
  sub_72F34((uint64_t)v6, 0xD000000000000016LL);
  uint64_t v7 = sub_ABF4();
  uint64_t v8 = sub_72A58(v1);
  if (v9)
  {
    sub_73248(v8, &qword_189D00);
    sub_72F84();
  }

  else
  {
    uint64_t v10 = sub_72E78();
    sub_72B10((uint64_t)v10);
  }

  uint64_t v11 = sub_72AB4();
  uint64_t v12 = type metadata accessor for WellnessQueryingMenstruationEndParameters(v11);
  uint64_t v13 = sub_73324(v12);
  sub_73238(v13, v14, &qword_189D00);
  uint64_t v15 = sub_72A58(v0);
  if (v9)
  {
    sub_72F7C(v15, &qword_189D00);
    sub_72F84();
  }

  else
  {
    v5[7].n128_u64[1] = v7;
    uint64_t v16 = sub_72F08();
    sub_72AD4((uint64_t)v16);
  }

  sub_733D8();
  if (v0)
  {
    uint64_t v17 = sub_73678();
  }

  else
  {
    uint64_t v17 = 0LL;
    v5[9].n128_u64[1] = 0LL;
    v5[10].n128_u64[0] = 0LL;
  }

  v5[9].n128_u64[0] = v0;
  v5[10].n128_u64[1] = v17;
  v5[11].n128_u64[0] = 0xD000000000000017LL;
  sub_734C8((uint64_t)"executeSashGroupOnWatch");
  v5[12].n128_u8[0] = v18;
  v5[13].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v5[14].n128_u64[0] = 0xD000000000000013LL;
  sub_73520((uint64_t)"isInPredictedWindow");
  v5[16].n128_u64[1] = v19;
  v5[15].n128_u8[0] = v20;
  sub_372CC();
  sub_731D4();
  sub_24A0C();
}

void sub_632EC()
{
  uint64_t v5 = sub_494C(&qword_18A6A0);
  uint64_t v6 = (__n128 *)sub_20308(v5, 320LL);
  uint64_t v7 = sub_736B0(v6, (__n128)xmmword_13AB60);
  uint64_t v8 = sub_73644((uint64_t)v7, (uint64_t)"actionAceCommandString");
  sub_73108(v8, v2);
  uint64_t v9 = sub_ABF4();
  uint64_t v10 = sub_72A58(v2);
  if (v11)
  {
    sub_73248(v10, &qword_189D00);
    sub_72F84();
  }

  else
  {
    uint64_t v12 = sub_72E78();
    sub_72B10((uint64_t)v12);
  }

  uint64_t v13 = sub_72AB4();
  uint64_t started = type metadata accessor for WellnessQueryingMenstruationStartParameters(v13);
  uint64_t v15 = sub_73324(started);
  sub_73238(v15, v16, &qword_189D00);
  uint64_t v17 = sub_72A58(v1);
  if (v11)
  {
    sub_72F7C(v17, &qword_189D00);
    sub_72F84();
  }

  else
  {
    v6[7].n128_u64[1] = v9;
    unsigned __int8 v18 = sub_72F08();
    sub_72AD4((uint64_t)v18);
  }

  sub_733D8();
  if (v1)
  {
    uint64_t v19 = sub_73678();
  }

  else
  {
    uint64_t v19 = 0LL;
    v6[9].n128_u64[1] = 0LL;
    v6[10].n128_u64[0] = 0LL;
  }

  v6[9].n128_u64[0] = v1;
  v6[10].n128_u64[1] = v19;
  v6[11].n128_u64[0] = 0xD000000000000017LL;
  sub_734C8((uint64_t)"executeSashGroupOnWatch");
  v6[12].n128_u8[0] = v20;
  v6[13].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v6[14].n128_u64[0] = 0xD000000000000021LL;
  sub_73520((uint64_t)"isInMostLikelyDaysPredictedWindow");
  v6[15].n128_u8[0] = v21;
  v6[16].n128_u64[1] = v22;
  v6[17].n128_u64[0] = 0xD000000000000022LL;
  sub_73510((uint64_t)"isInTrailingAllDaysPredictedWindow");
  unsigned __int8 v23 = *(_BYTE *)(v0 + *(int *)(started + 36));
  v6[19].n128_u64[1] = v24;
  v6[18].n128_u8[0] = v23;
  sub_372CC();
  sub_731D4();
  sub_24A0C();
}

void sub_63474( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_63480( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_6348C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_63498()
{
  uint64_t v4 = v1;
  sub_732B0();
  sub_6D20();
  __chkstk_darwin(v5);
  sub_72EAC();
  __chkstk_darwin(v6);
  sub_ABA4();
  __chkstk_darwin(v7);
  sub_AA00();
  uint64_t v8 = sub_494C(&qword_18A6A0);
  uint64_t v9 = sub_20308(v8, 464LL);
  *(_OWORD *)(v9 + 16) = xmmword_13AB10;
  sub_72F50(v9, 0xD000000000000016LL);
  uint64_t v10 = sub_ABF4();
  uint64_t v11 = sub_72A20(v2);
  if (v12)
  {
    sub_73370(v11, &qword_189D00);
    sub_72E84();
  }

  else
  {
    *(void *)(v9 + 72) = v10;
    uint64_t v13 = sub_72E20();
    sub_DA34((uint64_t)v13, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL));
  }

  uint64_t v14 = sub_73658(0x797461746164LL);
  uint64_t v15 = (int *)type metadata accessor for WellnessQueryingRingsParameters(v14);
  sub_7317C(v4 + v15[5], v16, &qword_189D00);
  uint64_t v17 = sub_72A20(v3);
  if (v12)
  {
    sub_73240(v17, &qword_189D00);
    sub_72E84();
  }

  else
  {
    *(void *)(v9 + 120) = v10;
    unsigned __int8 v18 = sub_72E20();
    sub_DA34((uint64_t)v18, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL));
  }

  *(void *)(v9 + 128) = 1702125924LL;
  *(void *)(v9 + 136) = 0xE400000000000000LL;
  uint64_t v19 = *(void *)(v4 + v15[6]);
  if (v19)
  {
    uint64_t v20 = sub_73678();
    uint64_t v21 = v19;
  }

  else
  {
    uint64_t v21 = 0LL;
    uint64_t v20 = 0LL;
    *(void *)(v9 + 152) = 0LL;
    *(void *)(v9 + 160) = 0LL;
  }

  *(void *)(v9 + 14sub_D878(v0 + 4) = v21;
  *(void *)(v9 + 168) = v20;
  *(void *)(v9 + 176) = 0xD000000000000017LL;
  sub_73318();
  *(void *)(v9 + 18sub_D878(v0 + 4) = v22;
  *(_BYTE *)(v9 + 192) = *(_BYTE *)(v4 + v15[7]);
  *(void *)(v9 + 216) = &type metadata for Bool;
  *(void *)(v9 + 22sub_D878(v0 + 4) = 0x756C61566C616F67LL;
  *(void *)(v9 + 232) = 0xE900000000000065LL;
  unsigned __int8 v23 = (uint64_t *)(v4 + v15[8]);
  if ((v23[1] & 1) != 0)
  {
    unint64_t v24 = 0LL;
    *(void *)(v9 + 248) = 0LL;
    *(void *)(v9 + 256) = 0LL;
    uint64_t v25 = 0LL;
  }

  else
  {
    uint64_t v25 = *v23;
    unint64_t v24 = &type metadata for Double;
  }

  *(void *)(v9 + 240) = v25;
  *(void *)(v9 + 26sub_D878(v0 + 4) = v24;
  strcpy((char *)(v9 + 272), "isRingClosed");
  *(_BYTE *)(v9 + 285) = 0;
  *(_WORD *)(v9 + 286) = -5120;
  *(_BYTE *)(v9 + 288) = *(_BYTE *)(v4 + v15[9]);
  *(void *)(v9 + 312) = &type metadata for Bool;
  *(void *)(v9 + 320) = 0xD000000000000010LL;
  *(void *)(v9 + 328) = 0x80000000001444C0LL;
  *(_BYTE *)(v9 + 336) = *(_BYTE *)(v4 + v15[10]);
  *(void *)(v9 + 360) = &type metadata for Bool;
  *(void *)(v9 + 368) = 0x6C61566C61746F74LL;
  *(void *)(v9 + 376) = 0xEA00000000006575LL;
  sub_732DC();
  if ((v28 & 1) != 0)
  {
    unint64_t v29 = 0LL;
    *(void *)(v9 + 392) = 0LL;
    *(void *)(v9 + 400) = 0LL;
    uint64_t v30 = 0LL;
  }

  else
  {
    uint64_t v30 = *v27;
    unint64_t v29 = &type metadata for Double;
  }

  *(void *)(v9 + 38sub_D878(v0 + 4) = v30;
  *(void *)(v9 + 408) = v29;
  *(void *)(v9 + 416) = 1953066613LL;
  *(void *)(v9 + 42sub_D878(v0 + 4) = 0xE400000000000000LL;
  sub_73438(v4 + v15[12], v26, &qword_189D00);
  sub_72A20(v0);
  if (v12)
  {
    uint64_t v31 = sub_72C38();
    sub_36A94(v31, &qword_189D00);
    sub_72E84();
  }

  else
  {
    *(void *)(v9 + 456) = v10;
    unint64_t v32 = sub_72E20();
    sub_DA34((uint64_t)v32, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL));
    sub_72C38();
  }

  sub_24A0C();
}

void sub_637A8()
{
  uint64_t v6 = sub_494C(&qword_18A6A0);
  uint64_t v7 = sub_20308(v6, 656LL);
  *(_OWORD *)(v7 + 16) = xmmword_13AB70;
  sub_72F18(v7, 0xD000000000000016LL);
  uint64_t v8 = sub_ABF4();
  uint64_t v9 = sub_72A58((uint64_t)v1);
  if (v10)
  {
    sub_72F7C(v9, &qword_189D00);
    sub_72F84();
  }

  else
  {
    uint64_t v11 = sub_72E78();
    sub_72AD4((uint64_t)v11);
  }

  uint64_t v12 = sub_73688(0xD000000000000015LL);
  type metadata accessor for WellnessQueryingSleep_DetailedResultParameters(v12);
  sub_73428();
  if (v7 == -48)
  {
    uint64_t v13 = sub_73480();
  }

  else
  {
    uint64_t v13 = sub_73348();
    uint64_t v14 = v7 + 48;
  }

  *(void *)(v7 + 96) = v14;
  *(void *)(v7 + 120) = v13;
  *(void *)(v7 + 128) = 0xD000000000000014LL;
  sub_734F8((uint64_t)"averageInBedDuration");
  if (v3)
  {
    uint64_t v15 = sub_73348();
    uint64_t v16 = v3;
  }

  else
  {
    uint64_t v15 = sub_73228();
  }

  uint64_t v17 = sub_73088(v15, v16);
  sub_73558(v17, v18, &qword_189D00);
  sub_72A58(v2);
  if (v10)
  {
    sub_36C5C();
    uint64_t v19 = sub_72C38();
    sub_73248(v19, &qword_189D00);
    sub_730FC();
  }

  else
  {
    *(void *)(v7 + 216) = v8;
    uint64_t v20 = sub_72FD0();
    sub_72B10((uint64_t)v20);
    sub_36C5C();
    sub_72C38();
  }

  *(void *)(v7 + 22sub_D878(v0 + 4) = 0x6E69577473726966LL;
  *(void *)(v7 + 232) = 0xEF657A6953776F64LL;
  sub_72CE8();
  if ((v22 & 1) != 0)
  {
    double v24 = sub_73208();
  }

  else
  {
    double v24 = *v21;
    unsigned __int8 v23 = &type metadata for Double;
  }

  *(double *)(v7 + 240) = v24;
  *(void *)(v7 + 26sub_D878(v0 + 4) = v23;
  *(void *)(v7 + 272) = 0xD000000000000012LL;
  sub_73510((uint64_t)"followupWindowSize");
  sub_72CE8();
  if ((v26 & 1) != 0)
  {
    double v28 = sub_73218();
  }

  else
  {
    double v28 = *v25;
    unint64_t v27 = &type metadata for Double;
  }

  sub_73008((uint64_t)v27, v28);
  sub_73110(*(_BYTE *)(v0 + v1[10]));
  *(_BYTE *)(v7 + 38sub_D878(v0 + 4) = *(_BYTE *)(v0 + v1[11]);
  *(void *)(v7 + 408) = v29;
  *(void *)(v7 + 416) = 0xD000000000000016LL;
  *(void *)(v7 + 42sub_D878(v0 + 4) = 0x8000000000144BC0LL;
  *(_BYTE *)(v7 + 432) = *(_BYTE *)(v0 + v1[12]);
  *(void *)(v7 + 456) = v29;
  *(void *)(v7 + 46sub_D878(v0 + 4) = 0xD000000000000018LL;
  sub_73538((uint64_t)"percentDaysWithSleepData");
  sub_72CE8();
  if ((v31 & 1) != 0)
  {
    unint64_t v32 = 0LL;
    *(void *)(v7 + 488) = 0LL;
    *(void *)(v7 + 496) = 0LL;
    uint64_t v33 = 0LL;
  }

  else
  {
    uint64_t v33 = *v30;
    unint64_t v32 = &type metadata for Double;
  }

  *(void *)(v7 + 480) = v33;
  *(void *)(v7 + 50sub_D878(v0 + 4) = v32;
  *(void *)(v7 + 512) = 0xD000000000000014LL;
  sub_73318();
  *(void *)(v7 + 520) = v34;
  uint64_t v35 = *(void *)(v0 + v1[14]);
  if (v35)
  {
    uint64_t v36 = sub_72F10();
    uint64_t v37 = v35;
  }

  else
  {
    uint64_t v36 = sub_73610();
    *(_OWORD *)(v7 + 536) = 0u;
  }

  *(void *)(v7 + 528) = v37;
  *(void *)(v7 + 552) = v36;
  sub_732A4();
  *(void *)(v7 + 560) = v38;
  *(void *)(v7 + 568) = 0xE400000000000000LL;
  uint64_t v39 = *(void *)(v0 + v1[15]);
  if (v39)
  {
    uint64_t v40 = sub_72EEC();
    uint64_t v41 = v39;
  }

  else
  {
    uint64_t v40 = sub_73610();
    *(_OWORD *)(v7 + 58sub_D878(v0 + 4) = 0u;
  }

  *(void *)(v7 + 576) = v41;
  *(void *)(v7 + 600) = v40;
  sub_7361C();
  *(void *)(v7 + 608) = v42;
  *(void *)(v7 + 616) = 0xEA0000000000657ALL;
  sub_72CE8();
  if ((v44 & 1) != 0)
  {
    double v46 = sub_73548();
  }

  else
  {
    double v46 = *v43;
    uint64_t v45 = &type metadata for Double;
  }

  *(double *)(v7 + 62sub_D878(v0 + 4) = v46;
  *(void *)(v7 + 648) = v45;
  sub_732B8();
  sub_41A9C();
  sub_D8FC();
}

void sub_63AE4()
{
  uint64_t v6 = sub_494C(&qword_18A6A0);
  uint64_t v7 = sub_20308(v6, 416LL);
  *(_OWORD *)(v7 + 16) = xmmword_13AB40;
  sub_72F18(v7, 0xD000000000000016LL);
  uint64_t v8 = sub_ABF4();
  uint64_t v9 = sub_72A58((uint64_t)v1);
  if (v10)
  {
    sub_72F7C(v9, &qword_189D00);
    sub_72F84();
  }

  else
  {
    uint64_t v11 = sub_72E78();
    sub_72AD4((uint64_t)v11);
  }

  uint64_t v12 = sub_73688(0xD000000000000015LL);
  type metadata accessor for WellnessQueryingSleep_SimpleResultParameters(v12);
  sub_73428();
  if (v7 == -48)
  {
    uint64_t v13 = sub_73480();
  }

  else
  {
    uint64_t v13 = sub_73348();
    uint64_t v14 = v7 + 48;
  }

  *(void *)(v7 + 96) = v14;
  *(void *)(v7 + 120) = v13;
  *(void *)(v7 + 128) = 0xD000000000000014LL;
  sub_734F8((uint64_t)"averageInBedDuration");
  if (v3)
  {
    uint64_t v15 = sub_73348();
    uint64_t v16 = v3;
  }

  else
  {
    uint64_t v15 = sub_73228();
  }

  uint64_t v17 = sub_73088(v15, v16);
  sub_73558(v17, v18, &qword_189D00);
  sub_72A58(v2);
  if (v10)
  {
    sub_36C5C();
    uint64_t v19 = sub_72C38();
    sub_73248(v19, &qword_189D00);
    sub_730FC();
  }

  else
  {
    *(void *)(v7 + 216) = v8;
    uint64_t v20 = sub_72FD0();
    sub_72B10((uint64_t)v20);
    sub_36C5C();
    sub_72C38();
  }

  sub_73318();
  *(void *)(v7 + 22sub_D878(v0 + 4) = 0xD000000000000014LL;
  *(void *)(v7 + 232) = v21;
  uint64_t v22 = *(void *)(v0 + v1[8]);
  if (v22)
  {
    sub_72F10();
    uint64_t v23 = v22;
  }

  else
  {
    sub_73490();
  }

  *(void *)(v7 + 240) = v23;
  sub_732A4();
  *(void *)(v7 + 26sub_D878(v0 + 4) = v24;
  *(void *)(v7 + 272) = v25;
  *(void *)(v7 + 280) = 0xE400000000000000LL;
  uint64_t v26 = *(void *)(v0 + v1[9]);
  if (v26)
  {
    uint64_t v27 = sub_72EEC();
    uint64_t v28 = v26;
  }

  else
  {
    uint64_t v27 = sub_734A0();
  }

  *(void *)(v7 + 288) = v28;
  *(void *)(v7 + 312) = v27;
  *(void *)(v7 + 320) = 0xD000000000000013LL;
  sub_73318();
  *(void *)(v7 + 328) = v29;
  uint64_t v30 = *(void *)(v0 + v1[10]);
  if (v30)
  {
    uint64_t v31 = sub_73348();
    uint64_t v32 = v30;
  }

  else
  {
    uint64_t v31 = sub_730B8();
  }

  *(void *)(v7 + 336) = v32;
  *(void *)(v7 + 360) = v31;
  *(void *)(v7 + 368) = 0xD000000000000012LL;
  sub_73630((uint64_t)"totalInBedDuration");
  uint64_t v34 = *(void *)(v0 + v33);
  if (v34)
  {
    uint64_t v35 = sub_73348();
  }

  else
  {
    uint64_t v35 = 0LL;
    *(void *)(v7 + 392) = 0LL;
    *(void *)(v7 + 400) = 0LL;
  }

  *(void *)(v7 + 38sub_D878(v0 + 4) = v34;
  *(void *)(v7 + 408) = v35;
  sub_72C38();
  sub_363E8();
  sub_41A9C();
  sub_732B8();
  sub_D8FC();
}

void sub_63D24( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_63D30()
{
  uint64_t v5 = v1;
  sub_735C8();
  sub_732B0();
  sub_6D20();
  __chkstk_darwin(v6);
  sub_72EAC();
  __chkstk_darwin(v7);
  sub_ABA4();
  __chkstk_darwin(v8);
  sub_AA00();
  uint64_t v9 = sub_494C(&qword_18A6A0);
  uint64_t v10 = sub_20308(v9, 416LL);
  uint64_t v11 = sub_73560((__n128 *)v10, (__n128)xmmword_13AB40);
  sub_72F50((uint64_t)v11, v12);
  uint64_t v13 = sub_ABF4();
  uint64_t v14 = sub_72A20(v2);
  if (v15)
  {
    sub_73370(v14, &qword_189D00);
    sub_72E84();
  }

  else
  {
    *(void *)(v10 + 72) = v13;
    uint64_t v16 = sub_72E20();
    sub_DA34((uint64_t)v16, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL));
  }

  uint64_t v17 = sub_731AC();
  uint64_t v18 = (int *)type metadata accessor for WellnessQueryingStepsParameters(v17);
  sub_732DC();
  if ((v20 & 1) != 0)
  {
    uint64_t v21 = 0LL;
    *(void *)(v10 + 10sub_D878(v0 + 4) = 0LL;
    *(void *)(v10 + 112) = 0LL;
    double v22 = 0.0;
  }

  else
  {
    double v22 = *v19;
    uint64_t v21 = &type metadata for Double;
  }

  uint64_t v23 = sub_72FD8((uint64_t)v21, v22);
  sub_7317C(v23, v24, &qword_189D00);
  uint64_t v25 = sub_72A20(v3);
  if (v15)
  {
    sub_73240(v25, &qword_189D00);
    sub_72E84();
  }

  else
  {
    *(void *)(v10 + 168) = v13;
    uint64_t v26 = sub_72E20();
    sub_DA34((uint64_t)v26, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL));
  }

  sub_73318();
  *(void *)(v10 + 176) = v4;
  *(void *)(v10 + 18sub_D878(v0 + 4) = v27;
  uint64_t v28 = *(void *)(v5 + v18[7]);
  if (v28)
  {
    uint64_t v29 = sub_72F10();
    uint64_t v30 = v28;
  }

  else
  {
    uint64_t v30 = 0LL;
    uint64_t v29 = 0LL;
    *(void *)(v10 + 200) = 0LL;
    *(void *)(v10 + 208) = 0LL;
  }

  *(void *)(v10 + 192) = v30;
  *(void *)(v10 + 216) = v29;
  strcpy((char *)(v10 + 224), "lastQueryDate");
  *(_WORD *)(v10 + 238) = -4864;
  uint64_t v31 = *(void *)(v5 + v18[8]);
  if (v31)
  {
    sub_72EEC();
    uint64_t v32 = v31;
  }

  else
  {
    uint64_t v32 = 0LL;
    *(void *)(v10 + 248) = 0LL;
    *(void *)(v10 + 256) = 0LL;
  }

  *(void *)(v10 + 240) = v32;
  sub_732A4();
  *(void *)(v10 + 26sub_D878(v0 + 4) = v33;
  *(void *)(v10 + 272) = v34;
  *(void *)(v10 + 280) = 0xE400000000000000LL;
  uint64_t v35 = *(void *)(v5 + v18[9]);
  if (v35)
  {
    sub_72EEC();
    uint64_t v36 = v35;
  }

  else
  {
    uint64_t v36 = 0LL;
    *(void *)(v10 + 296) = 0LL;
    *(void *)(v10 + 30sub_D878(v0 + 4) = 0LL;
  }

  *(void *)(v10 + 288) = v36;
  sub_735A0();
  *(void *)(v10 + 312) = v37;
  *(void *)(v10 + 320) = v38;
  *(void *)(v10 + 328) = 0xEA00000000006575LL;
  sub_732DC();
  if ((v41 & 1) != 0)
  {
    uint64_t v42 = 0LL;
    *(void *)(v10 + 34sub_D878(v0 + 4) = 0LL;
    *(void *)(v10 + 352) = 0LL;
    uint64_t v43 = 0LL;
  }

  else
  {
    uint64_t v43 = *v40;
    uint64_t v42 = &type metadata for Double;
  }

  *(void *)(v10 + 336) = v43;
  *(void *)(v10 + 360) = v42;
  *(void *)(v10 + 368) = 1953066613LL;
  *(void *)(v10 + 376) = 0xE400000000000000LL;
  sub_73438(v5 + v18[11], v39, &qword_189D00);
  sub_72A20(v0);
  if (v15)
  {
    swift_retain();
    sub_72C38();
    uint64_t v44 = sub_36C5C();
    sub_36A94(v44, &qword_189D00);
    *(_OWORD *)(v10 + 38sub_D878(v0 + 4) = 0u;
    *(_OWORD *)(v10 + 400) = 0u;
  }

  else
  {
    *(void *)(v10 + 408) = v13;
    uint64_t v45 = sub_B76C((void *)(v10 + 384));
    sub_DA34((uint64_t)v45, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL));
    swift_retain();
    sub_72C38();
    sub_36C5C();
  }

  sub_D8FC();
}

void sub_64014( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_64020()
{
  uint64_t v7 = sub_494C(&qword_18A6A0);
  uint64_t v8 = sub_20308(v7, 464LL);
  *(_OWORD *)(v8 + 16) = xmmword_13AB10;
  *(void *)(v8 + 32) = 0xD000000000000016LL;
  *(void *)(v8 + 40) = 0x8000000000144A60LL;
  sub_72FB8(v0);
  uint64_t v9 = sub_ABF4();
  uint64_t v10 = sub_72A20(v2);
  if (v11)
  {
    sub_73370(v10, &qword_189D00);
    sub_72E84();
  }

  else
  {
    *(void *)(v8 + 72) = v9;
    uint64_t v12 = sub_72E20();
    sub_DA34((uint64_t)v12, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL));
  }

  uint64_t v13 = sub_72AB4();
  uint64_t v14 = type metadata accessor for WellnessQueryingWeightParameters(v13);
  uint64_t v15 = sub_73324(v14);
  sub_7317C(v15, v16, &qword_189D00);
  uint64_t v17 = sub_72A20(v3);
  if (v11)
  {
    sub_73240(v17, &qword_189D00);
    sub_72E84();
  }

  else
  {
    *(void *)(v8 + 120) = v9;
    uint64_t v18 = sub_72E20();
    sub_DA34((uint64_t)v18, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL));
  }

  *(void *)(v8 + 128) = 0xD000000000000014LL;
  *(void *)(v8 + 136) = 0x8000000000144550LL;
  uint64_t v19 = *(void *)(v0 + *(int *)(v14 + 24));
  if (v19)
  {
    uint64_t v20 = sub_72F10();
    uint64_t v21 = v19;
  }

  else
  {
    uint64_t v20 = sub_73228();
  }

  *(void *)(v8 + 14sub_D878(v0 + 4) = v21;
  *(void *)(v8 + 168) = v20;
  *(void *)(v8 + 176) = 0xD000000000000016LL;
  *(void *)(v8 + 18sub_D878(v0 + 4) = 0x8000000000144A80LL;
  *(_BYTE *)(v8 + 192) = *(_BYTE *)(v0 + *(int *)(v14 + 28));
  *(void *)(v8 + 216) = &type metadata for Bool;
  *(void *)(v8 + 22sub_D878(v0 + 4) = 0x65756C615678616DLL;
  *(void *)(v8 + 232) = 0xE800000000000000LL;
  sub_72CE8();
  if ((v23 & 1) != 0)
  {
    double v25 = sub_73208();
  }

  else
  {
    double v25 = *v22;
    uint64_t v24 = &type metadata for Double;
  }

  *(double *)(v8 + 240) = v25;
  *(void *)(v8 + 26sub_D878(v0 + 4) = v24;
  *(void *)(v8 + 272) = 0x65756C61566E696DLL;
  *(void *)(v8 + 280) = 0xE800000000000000LL;
  sub_72CE8();
  if ((v27 & 1) != 0)
  {
    double v29 = sub_73218();
  }

  else
  {
    double v29 = *v26;
    uint64_t v28 = &type metadata for Double;
  }

  sub_73280((uint64_t)v28, v29);
  if (v8 == -96)
  {
    uint64_t v30 = sub_730B8();
  }

  else
  {
    uint64_t v30 = sub_72EEC();
    uint64_t v31 = v8 + 96;
  }

  uint64_t v32 = sub_73144(v30, v31);
  sub_73238(v32, v33, &qword_189D00);
  sub_72A20(v1);
  if (v11)
  {
    sub_36C5C();
    uint64_t v34 = sub_72C38();
    sub_72F7C(v34, &qword_189D00);
    sub_730FC();
  }

  else
  {
    *(void *)(v8 + 408) = v9;
    uint64_t v35 = sub_72FD0();
    sub_DA34((uint64_t)v35, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL));
    sub_36C5C();
    sub_72C38();
  }

  *(void *)(v8 + 416) = 0x65756C6176LL;
  *(void *)(v8 + 42sub_D878(v0 + 4) = 0xE500000000000000LL;
  sub_72CE8();
  if ((v37 & 1) != 0)
  {
    double v39 = sub_73470();
  }

  else
  {
    double v39 = *v36;
    uint64_t v38 = &type metadata for Double;
  }

  *(double *)(v8 + 432) = v39;
  *(void *)(v8 + 456) = v38;
  sub_731D4();
  sub_24A0C();
}

uint64_t sub_642F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_72AA4(a1, a2);
  uint64_t active = type metadata accessor for WellnessQueryingActiveEnergyParameters(v3);
  *(void *)(v2 + 48) = sub_729B0(active);
  sub_A964();
  return sub_A5D0();
}

#error "64358: call analysis failed (funcsize=27)"
uint64_t sub_643A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_728C8();
  sub_6D64();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_643E8(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_6441C(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_64450(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_72AA4(a1, a2);
  uint64_t v4 = type metadata accessor for WellnessQueryingBasalBodyTemperatureParameters(v3);
  *(void *)(v2 + 48) = sub_729B0(v4);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_64488()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = sub_ABF4();
  sub_72BF0(v3);
  *(void *)(v1 + vsub_D878(v0 + 4) = 0LL;
  *(void *)(v1 + *(int *)(v2 + 32)) = 0LL;
  sub_72CF4();
  sub_61984();
  sub_72C4C(v5);
  uint64_t v6 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[8] = v6;
  sub_72C40(v6, (uint64_t)sub_64510);
  unint64_t v7 = sub_72F6C(37LL);
  return sub_3D6D0(v7, v8, v9, v10);
}

uint64_t sub_64510()
{
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_64558(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_6458C(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_645C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_72AA4(a1, a2);
  uint64_t v4 = type metadata accessor for WellnessQueryingBloodGlucoseParameters(v3);
  *(void *)(v2 + 48) = sub_729B0(v4);
  sub_A964();
  return sub_A5D0();
}

#error "64628: call analysis failed (funcsize=27)"
uint64_t sub_64670()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_728C8();
  sub_6D64();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_646B8(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_646EC(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_64720(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_72AA4(a1, a2);
  uint64_t v4 = type metadata accessor for WellnessQueryingBloodOxygenParameters(v3);
  *(void *)(v2 + 48) = sub_729B0(v4);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_64758()
{
  uint64_t v2 = (int *)v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = sub_ABF4();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1LL, 1LL, v3);
  uint64_t v4 = v1 + v2[5];
  *(void *)uint64_t v4 = 0LL;
  *(_BYTE *)(v4 + 8) = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + v2[6], 1LL, 1LL, v3);
  *(void *)(v1 + v2[7]) = 0LL;
  sub_735B4(v2[8]);
  uint64_t v6 = v1 + v5;
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  *(void *)(v1 + v2[10]) = 0LL;
  sub_72D28(v2[11]);
  uint64_t v7 = v1 + v2[12];
  *(void *)uint64_t v7 = 0LL;
  *(_BYTE *)(v7 + 8) = 1;
  sub_72CF4();
  sub_61B38();
  sub_72C4C(v8);
  uint64_t v9 = (void *)sub_729E8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[8] = v9;
  sub_72C40(v9, (uint64_t)sub_64844);
  sub_3D80C();
  unint64_t v10 = sub_72AE8(28LL);
  return sub_729C8(v10, v11, v12, v13);
}

uint64_t sub_64844()
{
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_6488C(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_648C0(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_648F4(char a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = sub_730C8(a1, a2, a3, a4, a5);
  uint64_t v7 = type metadata accessor for WellnessQueryingBloodPressure_DetailedResultParameters(v6);
  *(void *)(v5 + 48) = sub_729B0(v7);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_6492C()
{
  uint64_t v2 = *(int **)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void (**)(uint64_t))(v0 + 16);
  char v4 = *(_BYTE *)(v0 + 90);
  char v5 = *(_BYTE *)(v0 + 89);
  char v6 = *(_BYTE *)(v0 + 88);
  uint64_t v7 = sub_ABF4();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1LL, 1LL, v7);
  sub_72D28(v2[5]);
  sub_72D28(v2[17]);
  sub_7316C(v2[6]);
  sub_7316C(v2[7]);
  uint64_t v8 = v1 + v2[8];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = v1 + v2[9];
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(v1 + v2[10]) = v6;
  *(_BYTE *)(v1 + v2[11]) = v5;
  *(_BYTE *)(v1 + v2[12]) = v4;
  *(void *)(v1 + v2[13]) = 0LL;
  sub_7316C(v2[14]);
  sub_7316C(v2[15]);
  *(void *)(v1 + v2[16]) = 0LL;
  uint64_t v10 = v1 + v2[18];
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  v3(v1);
  sub_61DD4();
  sub_72C4C(v11);
  uint64_t v12 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 6sub_D878(v0 + 4) = v12;
  sub_72C40(v12, (uint64_t)sub_64A68);
  sub_3D80C();
  unint64_t v13 = sub_72F6C(45LL);
  return sub_72CD4(v13, v14, v15, v16);
}

uint64_t sub_64A68()
{
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_64AB0(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_64AE4(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_64B18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_72AA4(a1, a2);
  uint64_t v4 = type metadata accessor for WellnessQueryingBloodPressure_SimpleResultParameters(v3);
  *(void *)(v2 + 48) = sub_729B0(v4);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_64B50()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = sub_ABF4();
  sub_72D3C(v3);
  sub_735B4(v4);
  *(void *)(v1 + v5) = 0LL;
  sub_729FC(*(int *)(v2 + 40));
  sub_6223C();
  sub_72C4C(v6);
  uint64_t v7 = (void *)sub_729E8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[8] = v7;
  sub_72C40(v7, (uint64_t)sub_64BCC);
  sub_3D80C();
  unint64_t v8 = sub_72AE8(43LL);
  return sub_729C8(v8, v9, v10, v11);
}

uint64_t sub_64BCC()
{
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_64C14(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_64C48(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_64C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_72AA4(a1, a2);
  uint64_t v4 = type metadata accessor for WellnessQueryingBodyTemperatureParameters(v3);
  *(void *)(v2 + 48) = sub_729B0(v4);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_64CB4()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = sub_ABF4();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1LL, 1LL, v3);
  *(void *)(v1 + *(int *)(v2 + 20)) = 0LL;
  sub_73038();
  *(void *)(v1 + vsub_D878(v0 + 4) = 0LL;
  *(void *)(v1 + *(int *)(v2 + 44)) = 0LL;
  sub_72CF4();
  sub_624E4();
  sub_72C4C(v5);
  uint64_t v6 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[8] = v6;
  sub_72C40(v6, (uint64_t)sub_64D5C);
  unint64_t v7 = sub_72F6C(32LL);
  return sub_3D6D0(v7, v8, v9, v10);
}

uint64_t sub_64D5C()
{
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_64DA4(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_64DD8(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_64E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_72AA4(a1, a2);
  uint64_t v4 = type metadata accessor for WellnessQueryingCardioFitnessParameters(v3);
  *(void *)(v2 + 48) = sub_729B0(v4);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_64E44()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = sub_ABF4();
  sub_72D3C(v2);
  *(void *)(v1 + v3) = 0LL;
  sub_72CF4();
  sub_62738();
  sub_72C4C(v4);
  uint64_t v5 = (void *)sub_729E8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 6sub_D878(v0 + 4) = v5;
  sub_72C40(v5, (uint64_t)sub_64EC0);
  unint64_t v6 = sub_72AE8(30LL);
  return sub_729C8(v6, v7, v8, v9);
}

uint64_t sub_64EC0()
{
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_64F08(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_64F3C(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_64F70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_72AA4(a1, a2);
  uint64_t v4 = type metadata accessor for WellnessQueryingCyclingDistanceParameters(v3);
  *(void *)(v2 + 48) = sub_729B0(v4);
  sub_A964();
  return sub_A5D0();
}

#error "64FD8: call analysis failed (funcsize=27)"
uint64_t sub_65020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_728C8();
  sub_6D64();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_65068(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_6509C(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_650D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_72AA4(a1, a2);
  uint64_t v4 = type metadata accessor for WellnessQueryingDistanceWalkingAndRunningParameters(v3);
  *(void *)(v2 + 48) = sub_729B0(v4);
  sub_A964();
  return sub_A5D0();
}

#error "65138: call analysis failed (funcsize=25)"
uint64_t sub_65178()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_728C8();
  sub_6D64();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_651C0(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_651F4(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_65228(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_72AA4(a1, a2);
  uint64_t v4 = type metadata accessor for WellnessQueryingDistanceWheelchairParameters(v3);
  *(void *)(v2 + 48) = sub_729B0(v4);
  sub_A964();
  return sub_A5D0();
}

#error "65290: call analysis failed (funcsize=27)"
uint64_t sub_652D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_728C8();
  sub_6D64();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_65320(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_65354(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_65388(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_72AA4(a1, a2);
  uint64_t v4 = type metadata accessor for WellnessQueryingExerciseMinutesParameters(v3);
  *(void *)(v2 + 48) = sub_729B0(v4);
  sub_A964();
  return sub_A5D0();
}

#error "653F0: call analysis failed (funcsize=27)"
uint64_t sub_65438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_728C8();
  sub_6D64();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_65480(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_654B4(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_654E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_72AA4(a1, a2);
  uint64_t v4 = type metadata accessor for WellnessQueryingFlightsClimbedParameters(v3);
  *(void *)(v2 + 48) = sub_729B0(v4);
  sub_A964();
  return sub_A5D0();
}

#error "65550: call analysis failed (funcsize=25)"
uint64_t sub_65590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_728C8();
  sub_6D64();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_655D8(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_6560C(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_65640(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_72AA4(a1, a2);
  uint64_t v4 = type metadata accessor for WellnessQueryingHeartRateParameters(v3);
  *(void *)(v2 + 48) = sub_729B0(v4);
  sub_A964();
  return sub_A5D0();
}

#error "656A8: call analysis failed (funcsize=25)"
uint64_t sub_656E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_728C8();
  sub_6D64();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_65730(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_65764(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_65798(char a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = sub_734B0(a1, a2, a3, a4);
  uint64_t v6 = type metadata accessor for WellnessQueryingHeightParameters(v5);
  *(void *)(v4 + 48) = sub_729B0(v6);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_657D0()
{
  uint64_t v2 = *(int **)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  char v3 = *(_BYTE *)(v0 + 89);
  char v4 = *(_BYTE *)(v0 + 88);
  uint64_t v5 = sub_ABF4();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1LL, 1LL, v5);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + v2[5], 1LL, 1LL, v5);
  *(_BYTE *)(v1 + v2[6]) = v3;
  *(_BYTE *)(v1 + v2[7]) = v4;
  *(void *)(v1 + v2[8]) = 0LL;
  *(void *)(v1 + v2[9]) = 0LL;
  *(void *)(v1 + v2[10]) = 0LL;
  *(void *)(v1 + v2[11]) = 0LL;
  *(void *)(v1 + v2[12]) = 0LL;
  sub_72CF4();
  sub_62F04();
  sub_72C4C(v6);
  uint64_t v7 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 6sub_D878(v0 + 4) = v7;
  sub_72C40(v7, (uint64_t)sub_658C8);
  unint64_t v8 = sub_72F6C(23LL);
  return sub_729DC(v8, v9, v10, v11);
}

uint64_t sub_658C8()
{
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_65910(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_65944(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_65978(char a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = sub_734B0(a1, a2, a3, a4);
  uint64_t v6 = type metadata accessor for WellnessQueryingMenstruationEndParameters(v5);
  *(void *)(v4 + 48) = sub_729B0(v6);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_659B0()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  char v3 = *(_BYTE *)(v0 + 89);
  char v4 = *(_BYTE *)(v0 + 88);
  uint64_t v5 = sub_ABF4();
  sub_72BF0(v5);
  *(_BYTE *)(v1 + v6) = v4;
  *(_BYTE *)(v1 + *(int *)(v2 + 32)) = v3;
  sub_72CF4();
  sub_6318C();
  sub_72C4C(v7);
  unint64_t v8 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 6sub_D878(v0 + 4) = v8;
  sub_72C40(v8, (uint64_t)sub_65A50);
  unint64_t v9 = sub_72F6C(32LL);
  return sub_729DC(v9, v10, v11, v12);
}

uint64_t sub_65A50()
{
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_65A98(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_65ACC(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_65B00(char a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = sub_730C8(a1, a2, a3, a4, a5);
  uint64_t started = type metadata accessor for WellnessQueryingMenstruationStartParameters(v6);
  *(void *)(v5 + 48) = sub_729B0(started);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_65B38( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t v12 = *(void *)(v10 + 40);
  uint64_t v11 = *(void *)(v10 + 48);
  char v13 = *(_BYTE *)(v10 + 90);
  char v14 = *(_BYTE *)(v10 + 89);
  char v15 = *(_BYTE *)(v10 + 88);
  uint64_t v16 = sub_ABF4();
  sub_72BF0(v16);
  *(_BYTE *)(v11 + v17) = v15;
  *(_BYTE *)(v11 + *(int *)(v12 + 32)) = v14;
  *(_BYTE *)(v11 + *(int *)(v12 + 36)) = v13;
  sub_72CF4();
  sub_632EC();
  sub_72C4C(v18);
  uint64_t v19 = (void *)sub_729E8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v10 + 6sub_D878(v0 + 4) = v19;
  sub_72C40(v19, (uint64_t)sub_65BDC);
  sub_3D80C();
  return sub_72CD4(0xD000000000000022LL, v20, v11, a10);
}

uint64_t sub_65BDC()
{
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_65C24(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_65C58(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_65C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_72AA4(a1, a2);
  uint64_t v4 = type metadata accessor for WellnessQueryingPushesParameters(v3);
  *(void *)(v2 + 48) = sub_729B0(v4);
  sub_A964();
  return sub_A5D0();
}

#error "65CF4: call analysis failed (funcsize=27)"
uint64_t sub_65D3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_728C8();
  sub_6D64();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_65D84(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_65DB8(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_65DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_72AA4(a1, a2);
  uint64_t v4 = type metadata accessor for WellnessQueryingRespiratoryRateParameters(v3);
  *(void *)(v2 + 48) = sub_729B0(v4);
  sub_A964();
  return sub_A5D0();
}

#error "65E54: call analysis failed (funcsize=27)"
uint64_t sub_65E9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_728C8();
  sub_6D64();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_65EE4(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_65F18(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_65F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_72AA4(a1, a2);
  uint64_t v4 = type metadata accessor for WellnessQueryingRestingEnergyParameters(v3);
  *(void *)(v2 + 48) = sub_729B0(v4);
  sub_A964();
  return sub_A5D0();
}

#error "65FB4: call analysis failed (funcsize=27)"
uint64_t sub_65FFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_728C8();
  sub_6D64();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_66044(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_66078(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_660AC(char a1, char a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 40) = a8;
  *(void *)(v8 + 48) = v14;
  *(void *)(v8 + 2sub_D878(v0 + 4) = a6;
  *(void *)(v8 + 32) = a7;
  *(_BYTE *)(v8 + 107) = a5;
  *(void *)(v8 + 16) = a4;
  *(_BYTE *)(v8 + 106) = a3;
  *(_BYTE *)(v8 + 105) = a2;
  *(_BYTE *)(v8 + 10sub_D878(v0 + 4) = a1;
  uint64_t v9 = type metadata accessor for WellnessQueryingRingsParameters(0LL);
  *(void *)(v8 + 56) = v9;
  *(void *)(v8 + 6sub_D878(v0 + 4) = sub_36390(v9);
  sub_A964();
  return swift_task_switch(v10, v11, v12);
}

uint64_t sub_66110()
{
  uint64_t v2 = *(int **)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v16 = *(void *)(v0 + 40);
  uint64_t v17 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 24);
  char v5 = *(_BYTE *)(v0 + 106);
  char v6 = *(_BYTE *)(v0 + 105);
  char v7 = *(_BYTE *)(v0 + 104);
  unsigned __int8 v8 = *(_BYTE *)(v0 + 107);
  uint64_t v9 = sub_ABF4();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1LL, 1LL, v9);
  sub_733B0(v2[5]);
  sub_733B0(v2[12]);
  *(void *)(v1 + v2[6]) = 0LL;
  *(_BYTE *)(v1 + v2[7]) = v7;
  uint64_t v10 = v1 + v2[8];
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  *(_BYTE *)(v1 + v2[9]) = v6;
  *(_BYTE *)(v1 + v2[10]) = v5;
  uint64_t v11 = v1 + v2[11];
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  sub_EF5D4(v1, v8, v4, v3, v16, v17);
  sub_63498();
  uint64_t v13 = v12;
  *(void *)(v0 + 72) = v12;
  *(void *)(v0 + 80) = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_66260;
  return v18(0xD000000000000016LL, 0x8000000000145040LL, v13);
}

uint64_t sub_66260()
{
  if (!v1) {
    *(void *)(v2 + 96) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_662A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 40);
  sub_72A50(a1, type metadata accessor for WellnessQueryingRingsParameters);
  swift_bridgeObjectRelease(v2);
  sub_A78C();
  return sub_73380(*(void *)(v1 + 96), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_662F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 40);
  sub_72A50(a1, type metadata accessor for WellnessQueryingRingsParameters);
  swift_bridgeObjectRelease(v2);
  sub_A78C();
  return sub_D8C4(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_6633C(char a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = sub_730C8(a1, a2, a3, a4, a5);
  uint64_t v7 = type metadata accessor for WellnessQueryingSleep_DetailedResultParameters(v6);
  *(void *)(v5 + 48) = sub_729B0(v7);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_66374()
{
  uint64_t v2 = *(int **)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void (**)(uint64_t))(v0 + 16);
  char v4 = *(_BYTE *)(v0 + 90);
  char v5 = *(_BYTE *)(v0 + 89);
  char v6 = *(_BYTE *)(v0 + 88);
  uint64_t v7 = sub_ABF4();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1LL, 1LL, v7);
  sub_72D28(v2[7]);
  *(void *)(v1 + v2[5]) = 0LL;
  *(void *)(v1 + v2[6]) = 0LL;
  sub_732CC(v2[8]);
  sub_732CC(v2[9]);
  *(_BYTE *)(v1 + v2[10]) = v6;
  *(_BYTE *)(v1 + v2[11]) = v5;
  *(_BYTE *)(v1 + v2[12]) = v4;
  sub_732CC(v2[13]);
  *(void *)(v1 + v2[14]) = 0LL;
  *(void *)(v1 + v2[15]) = 0LL;
  sub_732CC(v2[16]);
  v3(v1);
  sub_637A8();
  sub_72C4C(v8);
  uint64_t v9 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 6sub_D878(v0 + 4) = v9;
  sub_72C40(v9, (uint64_t)sub_66490);
  unint64_t v10 = sub_72F6C(37LL);
  return sub_72CD4(v10, v11, v12, v13);
}

uint64_t sub_66490()
{
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_664D8(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_6650C(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_66540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  *(void *)(v6 + 40) = a4;
  *(void *)(v6 + 48) = a6;
  *(_BYTE *)(v6 + 10sub_D878(v0 + 4) = a5;
  *(void *)(v6 + 2sub_D878(v0 + 4) = a2;
  *(void *)(v6 + 32) = a3;
  *(void *)(v6 + 16) = a1;
  uint64_t v7 = type metadata accessor for WellnessQueryingSleep_SimpleResultParameters(0LL);
  *(void *)(v6 + 56) = v7;
  *(void *)(v6 + 6sub_D878(v0 + 4) = sub_36390(v7);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_6658C()
{
  uint64_t v1 = sub_ABF4();
  uint64_t v2 = sub_72B60(v1);
  sub_B9CB4(v2, v3, v4, v5, v6);
  sub_63AE4();
  *(void *)(v0 + 72) = v7;
  uint64_t v8 = (void *)sub_729E8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 80) = v8;
  void *v8 = v0;
  v8[1] = sub_6660C;
  unint64_t v9 = sub_732F8();
  return sub_72CD4(v9, v10, v11, v12);
}

uint64_t sub_6660C()
{
  if (!v1) {
    *(void *)(v2 + 96) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_66654(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 48);
  sub_72A50(a1, type metadata accessor for WellnessQueryingSleep_SimpleResultParameters);
  swift_release();
  swift_release();

  sub_A78C();
  return sub_73380(*(void *)(v1 + 96), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_666B8(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 48);
  sub_72A50(a1, type metadata accessor for WellnessQueryingSleep_SimpleResultParameters);
  swift_release();
  swift_release();

  sub_A78C();
  return sub_D8C4(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_66718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  *(void *)(v6 + 40) = a4;
  *(void *)(v6 + 48) = a6;
  *(_BYTE *)(v6 + 10sub_D878(v0 + 4) = a5;
  *(void *)(v6 + 2sub_D878(v0 + 4) = a2;
  *(void *)(v6 + 32) = a3;
  *(void *)(v6 + 16) = a1;
  uint64_t v7 = type metadata accessor for WellnessQueryingSleep_SimpleResultParameters(0LL);
  *(void *)(v6 + 56) = v7;
  *(void *)(v6 + 6sub_D878(v0 + 4) = sub_36390(v7);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_66764()
{
  uint64_t v1 = sub_ABF4();
  uint64_t v2 = sub_72B60(v1);
  sub_B9FCC(v2, v3, v4, v5, v6, v7);
  sub_63AE4();
  *(void *)(v0 + 72) = v8;
  unint64_t v9 = (void *)sub_729E8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 80) = v9;
  *unint64_t v9 = v0;
  v9[1] = sub_667E4;
  unint64_t v10 = sub_732F8();
  return sub_72CD4(v10, v11, v12, v13);
}

uint64_t sub_667E4()
{
  if (!v1) {
    *(void *)(v2 + 96) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_6682C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_72AA4(a1, a2);
  uint64_t v4 = type metadata accessor for WellnessQueryingStandMinutesParameters(v3);
  *(void *)(v2 + 48) = sub_729B0(v4);
  sub_A964();
  return sub_A5D0();
}

#error "66894: call analysis failed (funcsize=27)"
uint64_t sub_668DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_728C8();
  sub_6D64();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_66924(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_66958(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_6698C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_72AA4(a1, a2);
  uint64_t v4 = type metadata accessor for WellnessQueryingStepsParameters(v3);
  *(void *)(v2 + 48) = sub_729B0(v4);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_669C4()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = sub_ABF4();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1LL, 1LL, v3);
  uint64_t v4 = v1 + *(int *)(v2 + 20);
  *(void *)uint64_t v4 = 0LL;
  *(_BYTE *)(v4 + 8) = 1;
  sub_73038();
  sub_7316C(v5);
  sub_729FC(*(int *)(v2 + 44));
  sub_63D30();
  sub_72C4C(v6);
  uint64_t v7 = (void *)sub_729E8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[8] = v7;
  sub_72C40(v7, (uint64_t)sub_66A70);
  unint64_t v8 = sub_72AE8(22LL);
  return sub_729C8(v8, v9, v10, v11);
}

uint64_t sub_66A70()
{
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_66AB8(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_66AEC(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_66B20(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_72AA4(a1, a2);
  uint64_t v4 = type metadata accessor for WellnessQueryingWalkingHeartRateAverageParameters(v3);
  *(void *)(v2 + 48) = sub_729B0(v4);
  sub_A964();
  return sub_A5D0();
}

#error "66B88: call analysis failed (funcsize=25)"
uint64_t sub_66BC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_728C8();
  sub_6D64();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_66C10(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_66C44(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

uint64_t sub_66C78(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 2sub_D878(v0 + 4) = a3;
  *(void *)(v4 + 32) = v3;
  *(void *)(v4 + 16) = a2;
  *(_BYTE *)(v4 + 88) = a1;
  uint64_t v5 = type metadata accessor for WellnessQueryingWeightParameters(0LL);
  *(void *)(v4 + 48) = sub_729B0(v5);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_66CBC()
{
  uint64_t v2 = *(int **)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  char v3 = *(_BYTE *)(v0 + 88);
  uint64_t v4 = sub_ABF4();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1LL, 1LL, v4);
  sub_72D28(v2[5]);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + v2[11], 1LL, 1LL, v4);
  *(void *)(v1 + v2[6]) = 0LL;
  *(_BYTE *)(v1 + v2[7]) = v3;
  sub_733FC(v2[8]);
  sub_733FC(v2[9]);
  *(void *)(v1 + v2[10]) = 0LL;
  sub_733FC(v2[12]);
  sub_72CF4();
  sub_64020();
  sub_72C4C(v5);
  uint64_t v6 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 6sub_D878(v0 + 4) = v6;
  sub_72C40(v6, (uint64_t)sub_66DB4);
  unint64_t v7 = sub_72F6C(23LL);
  return sub_729DC(v7, v8, v9, v10);
}

uint64_t sub_66DB4()
{
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_66DFC(uint64_t a1)
{
  uint64_t v1 = sub_72A74();
  return sub_729A4(v1, v2);
}

uint64_t sub_66E30(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_72C58();
  return sub_202A8(v1);
}

#error "66EA0: call analysis failed (funcsize=20)"
void sub_66EB4( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  sub_41C8C();
  a19 = v20;
  a20 = v21;
  char v23 = v22;
  double v25 = v24;
  char v27 = v26;
  uint64_t v28 = type metadata accessor for CATOption(0LL);
  double v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v31 = (char *)&a9 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_494C(&qword_189CF8);
  sub_6D20();
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)&a9 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_41850(v27, (uint64_t)v34, &qword_189CF8);
  sub_61900((uint64_t)v31, v25, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 16));
  CATWrapper.init(templateDir:options:globals:)(v34, v31, v23);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v25, v28);
  sub_279E0(v27, &qword_189CF8);
  sub_D8FC();
}

uint64_t sub_66FA0()
{
  return type metadata accessor for WellnessQueryingCATPatternsExecutor(0LL);
}

uint64_t type metadata accessor for WellnessQueryingWeightParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18CA88, (uint64_t)&nominal type descriptor for WellnessQueryingWeightParameters);
}

uint64_t type metadata accessor for WellnessQueryingWalkingHeartRateAverageParameters(uint64_t a1)
{
  return sub_70F74( a1,  qword_18C9D8,  (uint64_t)&nominal type descriptor for WellnessQueryingWalkingHeartRateAverageParameters);
}

uint64_t type metadata accessor for WellnessQueryingStepsParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18C930, (uint64_t)&nominal type descriptor for WellnessQueryingStepsParameters);
}

uint64_t type metadata accessor for WellnessQueryingStandMinutesParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18C888, (uint64_t)&nominal type descriptor for WellnessQueryingStandMinutesParameters);
}

uint64_t type metadata accessor for WellnessQueryingSleep_DetailedResultParameters(uint64_t a1)
{
  return sub_70F74( a1,  qword_18C7C8,  (uint64_t)&nominal type descriptor for WellnessQueryingSleep_DetailedResultParameters);
}

uint64_t type metadata accessor for WellnessQueryingRestingEnergyParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18C720, (uint64_t)&nominal type descriptor for WellnessQueryingRestingEnergyParameters);
}

uint64_t type metadata accessor for WellnessQueryingRespiratoryRateParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18C670, (uint64_t)&nominal type descriptor for WellnessQueryingRespiratoryRateParameters);
}

uint64_t type metadata accessor for WellnessQueryingPushesParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18C5C8, (uint64_t)&nominal type descriptor for WellnessQueryingPushesParameters);
}

uint64_t type metadata accessor for WellnessQueryingMenstruationStartParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18C528, (uint64_t)&nominal type descriptor for WellnessQueryingMenstruationStartParameters);
}

uint64_t type metadata accessor for WellnessQueryingMenstruationEndParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18C488, (uint64_t)&nominal type descriptor for WellnessQueryingMenstruationEndParameters);
}

uint64_t type metadata accessor for WellnessQueryingHeightParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18C3D8, (uint64_t)&nominal type descriptor for WellnessQueryingHeightParameters);
}

uint64_t type metadata accessor for WellnessQueryingHeartRateParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18C328, (uint64_t)&nominal type descriptor for WellnessQueryingHeartRateParameters);
}

uint64_t type metadata accessor for WellnessQueryingFlightsClimbedParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18C280, (uint64_t)&nominal type descriptor for WellnessQueryingFlightsClimbedParameters);
}

uint64_t type metadata accessor for WellnessQueryingExerciseMinutesParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18C1D8, (uint64_t)&nominal type descriptor for WellnessQueryingExerciseMinutesParameters);
}

uint64_t type metadata accessor for WellnessQueryingDistanceWheelchairParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18C130, (uint64_t)&nominal type descriptor for WellnessQueryingDistanceWheelchairParameters);
}

uint64_t type metadata accessor for WellnessQueryingDistanceWalkingAndRunningParameters(uint64_t a1)
{
  return sub_70F74( a1,  qword_18C088,  (uint64_t)&nominal type descriptor for WellnessQueryingDistanceWalkingAndRunningParameters);
}

uint64_t type metadata accessor for WellnessQueryingCyclingDistanceParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18BFE0, (uint64_t)&nominal type descriptor for WellnessQueryingCyclingDistanceParameters);
}

uint64_t type metadata accessor for WellnessQueryingCardioFitnessParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18BF40, (uint64_t)&nominal type descriptor for WellnessQueryingCardioFitnessParameters);
}

uint64_t type metadata accessor for WellnessQueryingBodyTemperatureParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18BE98, (uint64_t)&nominal type descriptor for WellnessQueryingBodyTemperatureParameters);
}

uint64_t type metadata accessor for WellnessQueryingBloodPressure_SimpleResultParameters(uint64_t a1)
{
  return sub_70F74( a1,  qword_18BDF0,  (uint64_t)&nominal type descriptor for WellnessQueryingBloodPressure_SimpleResultParameters);
}

uint64_t type metadata accessor for WellnessQueryingBloodPressure_DetailedResultParameters(uint64_t a1)
{
  return sub_70F74( a1,  qword_18BD28,  (uint64_t)&nominal type descriptor for WellnessQueryingBloodPressure_DetailedResultParameters);
}

uint64_t type metadata accessor for WellnessQueryingBloodOxygenParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18BC78, (uint64_t)&nominal type descriptor for WellnessQueryingBloodOxygenParameters);
}

uint64_t type metadata accessor for WellnessQueryingBloodGlucoseParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18BBC8, (uint64_t)&nominal type descriptor for WellnessQueryingBloodGlucoseParameters);
}

uint64_t type metadata accessor for WellnessQueryingBasalBodyTemperatureParameters(uint64_t a1)
{
  return sub_70F74( a1,  qword_18BB28,  (uint64_t)&nominal type descriptor for WellnessQueryingBasalBodyTemperatureParameters);
}

uint64_t type metadata accessor for WellnessQueryingActiveEnergyParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18BA80, (uint64_t)&nominal type descriptor for WellnessQueryingActiveEnergyParameters);
}

uint64_t sub_671B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_671C0);
}

uint64_t sub_671C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_671D0);
}

void sub_671D8(uint64_t a1)
{
  if (!qword_18AB40)
  {
    uint64_t v2 = type metadata accessor for SpeakableString(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_18AB40);
    }
  }

char *sub_6722C(char *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = (char *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_494C(&qword_189D00);
      memcpy(v4, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v4, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v4, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[5];
    uint64_t v11 = &v4[v10];
    uint64_t v12 = (char *)a2 + v10;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v10, 1LL, v7))
    {
      uint64_t v13 = sub_494C(&qword_189D00);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v11, v12, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0LL, 1LL, v7);
    }

    uint64_t v14 = a3[7];
    *(void *)&v4[a3[6]] = *(uint64_t *)((char *)a2 + a3[6]);
    *(void *)&v4[v14] = *(uint64_t *)((char *)a2 + v14);
    *(void *)&v4[a3[8]] = *(uint64_t *)((char *)a2 + a3[8]);
    swift_retain();
    swift_retain();
  }

  swift_retain();
  return v4;
}

uint64_t sub_673A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  swift_release();
  swift_release();
  return swift_release();
}

char *sub_6744C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

char *sub_67598(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_retain();
  swift_release();
  return a1;
}

char *sub_6779C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  return a1;
}

char *sub_678D4(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_release();
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_release();
  return a1;
}

uint64_t sub_67AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_67ACC);
}

uint64_t sub_67AD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_67ADC);
}

void sub_67AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_67B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_67B14);
}

uint64_t sub_67B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_67B24);
}

uint64_t *sub_67B2C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_494C(&qword_189D00);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[5];
    uint64_t v11 = a3[6];
    uint64_t v12 = (char *)a1 + v10;
    uint64_t v13 = (char *)a2 + v10;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    int v14 = (char *)a1 + v11;
    int v15 = (char *)a2 + v11;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v11, 1LL, v7))
    {
      uint64_t v16 = sub_494C(&qword_189D00);
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v14, v15, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v14, 0LL, 1LL, v7);
    }

    uint64_t v17 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = a3[9];
    uint64_t v21 = a3[10];
    double v22 = (char *)a1 + v20;
    char v23 = (char *)a2 + v20;
    *(void *)double v22 = *(void *)v23;
    uint64_t v24 = *(uint64_t *)((char *)a2 + v21);
    v22[8] = v23[8];
    *(uint64_t *)((char *)a1 + v21) = v24;
    uint64_t v25 = a3[11];
    uint64_t v26 = (char *)a1 + v25;
    char v27 = (char *)a2 + v25;
    swift_retain();
    swift_retain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1LL, v7))
    {
      uint64_t v28 = sub_494C(&qword_189D00);
      memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v26, v27, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v26, 0LL, 1LL, v7);
    }

    uint64_t v29 = a3[12];
    uint64_t v30 = (char *)a1 + v29;
    uint64_t v31 = (char *)a2 + v29;
    *(void *)uint64_t v30 = *(void *)v31;
    v30[8] = v31[8];
  }

  return a1;
}

char *sub_67D70(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = &a1[v9];
  uint64_t v13 = &a2[v9];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v9], 1LL, v6))
  {
    uint64_t v14 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v12, v13, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
  }

  uint64_t v15 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = a3[9];
  uint64_t v19 = a3[10];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  uint64_t v22 = *(void *)&a2[v19];
  v20[8] = v21[8];
  *(void *)&a1[v19] = v22;
  uint64_t v23 = a3[11];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  swift_retain();
  swift_retain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v25, 1LL, v6))
  {
    uint64_t v26 = sub_494C(&qword_189D00);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v24, v25, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v24, 0LL, 1LL, v6);
  }

  uint64_t v27 = a3[12];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  *(void *)uint64_t v28 = *(void *)v29;
  v28[8] = v29[8];
  return a1;
}

char *sub_67F88(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = *(void *)v13;
  v12[8] = v13[8];
  *(void *)uint64_t v12 = v14;
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  int v18 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v15], 1LL, v6);
  int v19 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v17, 1LL, v6);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v16, v17, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v16, 0LL, 1LL, v6);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v20 = *(void *)(v6 - 8);
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v16, v6);
LABEL_12:
    uint64_t v21 = sub_494C(&qword_189D00);
    memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v16, v17, v6);
LABEL_13:
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_retain();
  swift_release();
  uint64_t v22 = a3[8];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *(void *)v24;
  v23[8] = v24[8];
  *(void *)uint64_t v23 = v25;
  uint64_t v26 = a3[9];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  uint64_t v29 = *(void *)v28;
  v27[8] = v28[8];
  *(void *)uint64_t v27 = v29;
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_retain();
  swift_release();
  uint64_t v30 = a3[11];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  int v33 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v30], 1LL, v6);
  int v34 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v32, 1LL, v6);
  if (!v33)
  {
    uint64_t v35 = *(void *)(v6 - 8);
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 24))(v31, v32, v6);
      goto LABEL_19;
    }

    (*(void (**)(char *, uint64_t))(v35 + 8))(v31, v6);
    goto LABEL_18;
  }

  if (v34)
  {
LABEL_18:
    uint64_t v36 = sub_494C(&qword_189D00);
    memcpy(v31, v32, *(void *)(*(void *)(v36 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v31, v32, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v31, 0LL, 1LL, v6);
LABEL_19:
  uint64_t v37 = a3[12];
  uint64_t v38 = &a1[v37];
  double v39 = &a2[v37];
  uint64_t v40 = *(void *)v39;
  v38[8] = v39[8];
  *(void *)uint64_t v38 = v40;
  return a1;
}

char *sub_68298(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = &a1[v9];
  uint64_t v13 = &a2[v9];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v9], 1LL, v6))
  {
    uint64_t v14 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v12, v13, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
  }

  uint64_t v15 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = a3[9];
  uint64_t v19 = a3[10];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  uint64_t v22 = *(void *)&a2[v19];
  v20[8] = v21[8];
  *(void *)&a1[v19] = v22;
  uint64_t v23 = a3[11];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v23], 1LL, v6))
  {
    uint64_t v26 = sub_494C(&qword_189D00);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v24, v25, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v24, 0LL, 1LL, v6);
  }

  uint64_t v27 = a3[12];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  *(void *)uint64_t v28 = *(void *)v29;
  v28[8] = v29[8];
  return a1;
}

char *sub_6849C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v11];
  uint64_t v14 = &a2[v11];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = &a1[v12];
  uint64_t v16 = &a2[v12];
  int v17 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v12], 1LL, v6);
  int v18 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v16, 1LL, v6);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v15, v16, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v15, 0LL, 1LL, v6);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v19 = *(void *)(v6 - 8);
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v6);
LABEL_12:
    uint64_t v20 = sub_494C(&qword_189D00);
    memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v15, v16, v6);
LABEL_13:
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_release();
  uint64_t v21 = a3[8];
  uint64_t v22 = a3[9];
  uint64_t v23 = &a1[v21];
  uint64_t v24 = &a2[v21];
  v23[8] = v24[8];
  *(void *)uint64_t v23 = *(void *)v24;
  uint64_t v25 = &a1[v22];
  uint64_t v26 = &a2[v22];
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v26[8];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_release();
  uint64_t v27 = a3[11];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  int v30 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v27], 1LL, v6);
  int v31 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v29, 1LL, v6);
  if (!v30)
  {
    uint64_t v32 = *(void *)(v6 - 8);
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 40))(v28, v29, v6);
      goto LABEL_19;
    }

    (*(void (**)(char *, uint64_t))(v32 + 8))(v28, v6);
    goto LABEL_18;
  }

  if (v31)
  {
LABEL_18:
    uint64_t v33 = sub_494C(&qword_189D00);
    memcpy(v28, v29, *(void *)(*(void *)(v33 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v28, v29, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v28, 0LL, 1LL, v6);
LABEL_19:
  uint64_t v34 = a3[12];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  *(void *)uint64_t v35 = *(void *)v36;
  v35[8] = v36[8];
  return a1;
}

uint64_t sub_68794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_687A0);
}

uint64_t sub_687A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_687B0);
}

void sub_687B4(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = "\t";
    v4[2] = v4[0];
    v4[3] = &unk_13AC60;
    v4[4] = "\t";
    v4[5] = "\t";
    v4[6] = &unk_13AC60;
    v4[7] = v4[0];
    v4[8] = "\t";
    swift_initStructMetadata(a1, 256LL, 9LL, v4, a1 + 16);
  }

uint64_t *sub_6883C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_494C(&qword_189D00);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v10, 1LL, v7))
    {
      uint64_t v13 = sub_494C(&qword_189D00);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v11, v12, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0LL, 1LL, v7);
    }

    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    uint64_t v16 = (char *)a1 + v14;
    int v17 = (char *)a2 + v14;
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = v17[8];
    int v18 = (char *)a1 + v15;
    uint64_t v19 = (char *)a2 + v15;
    *(void *)int v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = a3[8];
    uint64_t v21 = a3[9];
    uint64_t v22 = (char *)a1 + v20;
    uint64_t v23 = (char *)a2 + v20;
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    uint64_t v24 = (char *)a1 + v21;
    uint64_t v25 = (char *)a2 + v21;
    v24[8] = v25[8];
    *(void *)uint64_t v24 = *(void *)v25;
    uint64_t v26 = a3[11];
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    *((_BYTE *)a1 + v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 26) = *((_BYTE *)a2 + v26);
    uint64_t v27 = a3[13];
    *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
    *(uint64_t *)((char *)a1 + v27) = *(uint64_t *)((char *)a2 + v27);
    uint64_t v28 = a3[14];
    uint64_t v29 = a3[15];
    int v30 = (char *)a1 + v28;
    int v31 = (char *)a2 + v28;
    *(void *)int v30 = *(void *)v31;
    v30[8] = v31[8];
    uint64_t v32 = (char *)a1 + v29;
    uint64_t v33 = (char *)a2 + v29;
    *(void *)uint64_t v32 = *(void *)v33;
    v32[8] = v33[8];
    uint64_t v34 = a3[17];
    *(uint64_t *)((char *)a1 + a3[16]) = *(uint64_t *)((char *)a2 + a3[16]);
    uint64_t v35 = (char *)a1 + v34;
    uint64_t v36 = (char *)a2 + v34;
    swift_retain();
    swift_retain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v36, 1LL, v7))
    {
      uint64_t v37 = sub_494C(&qword_189D00);
      memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v35, v36, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v35, 0LL, 1LL, v7);
    }

    uint64_t v38 = a3[18];
    double v39 = (char *)a1 + v38;
    uint64_t v40 = (char *)a2 + v38;
    *(void *)double v39 = *(void *)v40;
    v39[8] = v40[8];
  }

  return a1;
}

uint64_t sub_68AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  swift_release();
  swift_release();
  uint64_t v6 = a1 + *(int *)(a2 + 68);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1LL, v4);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v6, v4);
  }
  return result;
}

char *sub_68BCC(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = &a1[v12];
  uint64_t v15 = &a2[v12];
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = &a1[v13];
  int v17 = &a2[v13];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = a3[8];
  uint64_t v19 = a3[9];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = &a1[v19];
  uint64_t v23 = &a2[v19];
  v22[8] = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v24 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  a1[v24] = a2[v24];
  uint64_t v25 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  *(void *)&a1[v25] = *(void *)&a2[v25];
  uint64_t v26 = a3[14];
  uint64_t v27 = a3[15];
  uint64_t v28 = &a1[v26];
  uint64_t v29 = &a2[v26];
  *(void *)uint64_t v28 = *(void *)v29;
  v28[8] = v29[8];
  int v30 = &a1[v27];
  int v31 = &a2[v27];
  *(void *)int v30 = *(void *)v31;
  v30[8] = v31[8];
  uint64_t v32 = a3[17];
  *(void *)&a1[a3[16]] = *(void *)&a2[a3[16]];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  swift_retain();
  swift_retain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v34, 1LL, v6))
  {
    uint64_t v35 = sub_494C(&qword_189D00);
    memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v33, v34, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v33, 0LL, 1LL, v6);
  }

  uint64_t v36 = a3[18];
  uint64_t v37 = &a1[v36];
  uint64_t v38 = &a2[v36];
  *(void *)uint64_t v37 = *(void *)v38;
  v37[8] = v38[8];
  return a1;
}

char *sub_68E50(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
LABEL_13:
  uint64_t v18 = a3[6];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = *(void *)v20;
  v19[8] = v20[8];
  *(void *)uint64_t v19 = v21;
  uint64_t v22 = a3[7];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *(void *)v24;
  v23[8] = v24[8];
  *(void *)uint64_t v23 = v25;
  uint64_t v26 = a3[8];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  uint64_t v29 = *(void *)v28;
  v27[8] = v28[8];
  *(void *)uint64_t v27 = v29;
  uint64_t v30 = a3[9];
  int v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v33 = *(void *)v32;
  v31[8] = v32[8];
  *(void *)int v31 = v33;
  a1[a3[10]] = a2[a3[10]];
  a1[a3[11]] = a2[a3[11]];
  a1[a3[12]] = a2[a3[12]];
  *(void *)&a1[a3[13]] = *(void *)&a2[a3[13]];
  swift_retain();
  swift_release();
  uint64_t v34 = a3[14];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  uint64_t v37 = *(void *)v36;
  v35[8] = v36[8];
  *(void *)uint64_t v35 = v37;
  uint64_t v38 = a3[15];
  double v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  uint64_t v41 = *(void *)v40;
  v39[8] = v40[8];
  *(void *)double v39 = v41;
  *(void *)&a1[a3[16]] = *(void *)&a2[a3[16]];
  swift_retain();
  swift_release();
  uint64_t v42 = a3[17];
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  int v45 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v42], 1LL, v6);
  int v46 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v44, 1LL, v6);
  if (!v45)
  {
    uint64_t v47 = *(void *)(v6 - 8);
    if (!v46)
    {
      (*(void (**)(char *, char *, uint64_t))(v47 + 24))(v43, v44, v6);
      goto LABEL_19;
    }

    (*(void (**)(char *, uint64_t))(v47 + 8))(v43, v6);
    goto LABEL_18;
  }

  if (v46)
  {
LABEL_18:
    uint64_t v48 = sub_494C(&qword_189D00);
    memcpy(v43, v44, *(void *)(*(void *)(v48 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v43, v44, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v43, 0LL, 1LL, v6);
LABEL_19:
  uint64_t v49 = a3[18];
  uint64_t v50 = &a1[v49];
  char v51 = &a2[v49];
  uint64_t v52 = *(void *)v51;
  v50[8] = v51[8];
  *(void *)uint64_t v50 = v52;
  return a1;
}

char *sub_691D8(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  int v14 = &a1[v12];
  int v15 = &a2[v12];
  *(void *)int v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = &a1[v13];
  uint64_t v17 = &a2[v13];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = a3[8];
  uint64_t v19 = a3[9];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = &a1[v19];
  uint64_t v23 = &a2[v19];
  v22[8] = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v24 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  a1[v24] = a2[v24];
  uint64_t v25 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  *(void *)&a1[v25] = *(void *)&a2[v25];
  uint64_t v26 = a3[14];
  uint64_t v27 = a3[15];
  uint64_t v28 = &a1[v26];
  uint64_t v29 = &a2[v26];
  *(void *)uint64_t v28 = *(void *)v29;
  v28[8] = v29[8];
  uint64_t v30 = &a1[v27];
  int v31 = &a2[v27];
  *(void *)uint64_t v30 = *(void *)v31;
  v30[8] = v31[8];
  uint64_t v32 = a3[17];
  *(void *)&a1[a3[16]] = *(void *)&a2[a3[16]];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v32], 1LL, v6))
  {
    uint64_t v35 = sub_494C(&qword_189D00);
    memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v33, v34, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v33, 0LL, 1LL, v6);
  }

  uint64_t v36 = a3[18];
  uint64_t v37 = &a1[v36];
  uint64_t v38 = &a2[v36];
  *(void *)uint64_t v37 = *(void *)v38;
  v37[8] = v38[8];
  return a1;
}

char *sub_69448(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
LABEL_13:
  uint64_t v18 = a3[6];
  uint64_t v19 = a3[7];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = &a1[v19];
  uint64_t v23 = &a2[v19];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  uint64_t v24 = a3[8];
  uint64_t v25 = a3[9];
  uint64_t v26 = &a1[v24];
  uint64_t v27 = &a2[v24];
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  uint64_t v28 = &a1[v25];
  uint64_t v29 = &a2[v25];
  v28[8] = v29[8];
  *(void *)uint64_t v28 = *(void *)v29;
  uint64_t v30 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  a1[v30] = a2[v30];
  uint64_t v31 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  *(void *)&a1[v31] = *(void *)&a2[v31];
  swift_release();
  uint64_t v32 = a3[14];
  uint64_t v33 = a3[15];
  uint64_t v34 = &a1[v32];
  uint64_t v35 = &a2[v32];
  v34[8] = v35[8];
  *(void *)uint64_t v34 = *(void *)v35;
  uint64_t v36 = &a1[v33];
  uint64_t v37 = &a2[v33];
  v36[8] = v37[8];
  *(void *)uint64_t v36 = *(void *)v37;
  *(void *)&a1[a3[16]] = *(void *)&a2[a3[16]];
  swift_release();
  uint64_t v38 = a3[17];
  double v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  int v41 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v38], 1LL, v6);
  int v42 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v40, 1LL, v6);
  if (!v41)
  {
    uint64_t v43 = *(void *)(v6 - 8);
    if (!v42)
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 40))(v39, v40, v6);
      goto LABEL_19;
    }

    (*(void (**)(char *, uint64_t))(v43 + 8))(v39, v6);
    goto LABEL_18;
  }

  if (v42)
  {
LABEL_18:
    uint64_t v44 = sub_494C(&qword_189D00);
    memcpy(v39, v40, *(void *)(*(void *)(v44 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v39, v40, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v39, 0LL, 1LL, v6);
LABEL_19:
  uint64_t v45 = a3[18];
  int v46 = &a1[v45];
  uint64_t v47 = &a2[v45];
  *(void *)int v46 = *(void *)v47;
  v46[8] = v47[8];
  return a1;
}

uint64_t sub_697AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_697B8);
}

void sub_697B8()
{
  if (v1)
  {
    uint64_t v2 = sub_73270();
    sub_72CBC(v2, v3, v4);
  }

  else
  {
    sub_72B3C(*(int *)(v0 + 52));
    sub_1EB0C();
  }

uint64_t sub_697FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_69808);
}

void sub_69808()
{
  if (v1)
  {
    uint64_t v2 = sub_72F90();
    sub_72CC8(v2, v3, v4, v5);
  }

  else
  {
    sub_73570(*(int *)(v0 + 52));
    sub_1EB0C();
  }

void sub_6984C(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = v4[0];
    v4[2] = "\t";
    v4[3] = "\t";
    v4[4] = "\t";
    v4[5] = "\t";
    v4[6] = &unk_13AD58;
    v4[7] = &unk_13AD58;
    v4[8] = &unk_13AD58;
    void v4[9] = &unk_13AC60;
    v4[10] = "\t";
    v4[11] = "\t";
    v4[12] = &unk_13AC60;
    v4[13] = v4[0];
    v4[14] = "\t";
    swift_initStructMetadata(a1, 256LL, 15LL, v4, a1 + 16);
  }

uint64_t *sub_698E8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_494C(&qword_189D00);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v10, 1LL, v7))
    {
      uint64_t v13 = sub_494C(&qword_189D00);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v11, v12, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0LL, 1LL, v7);
    }

    uint64_t v14 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    int v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    *(void *)int v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = a3[8];
    uint64_t v18 = a3[9];
    uint64_t v19 = (char *)a1 + v17;
    uint64_t v20 = (char *)a2 + v17;
    *(void *)uint64_t v19 = *(void *)v20;
    uint64_t v21 = *(uint64_t *)((char *)a2 + v18);
    v19[8] = v20[8];
    *(uint64_t *)((char *)a1 + v18) = v21;
    uint64_t v22 = a3[10];
    uint64_t v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    swift_retain();
    swift_retain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1LL, v7))
    {
      uint64_t v25 = sub_494C(&qword_189D00);
      memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v23, v24, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v23, 0LL, 1LL, v7);
    }
  }

  return a1;
}

uint64_t sub_69AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  swift_release();
  swift_release();
  uint64_t v6 = a1 + *(int *)(a2 + 40);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1LL, v4);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v6, v4);
  }
  return result;
}

char *sub_69BD0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = a3[8];
  uint64_t v16 = a3[9];
  uint64_t v17 = &a1[v15];
  uint64_t v18 = &a2[v15];
  *(void *)uint64_t v17 = *(void *)v18;
  uint64_t v19 = *(void *)&a2[v16];
  v17[8] = v18[8];
  *(void *)&a1[v16] = v19;
  uint64_t v20 = a3[10];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  swift_retain();
  swift_retain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1LL, v6))
  {
    uint64_t v23 = sub_494C(&qword_189D00);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v21, v22, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0LL, 1LL, v6);
  }

  return a1;
}

char *sub_69DAC(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_retain();
  swift_release();
  uint64_t v18 = a3[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = *(void *)v20;
  v19[8] = v20[8];
  *(void *)uint64_t v19 = v21;
  uint64_t v22 = a3[8];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *(void *)v24;
  v23[8] = v24[8];
  *(void *)uint64_t v23 = v25;
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_retain();
  swift_release();
  uint64_t v26 = a3[10];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  int v29 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v26], 1LL, v6);
  int v30 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v28, 1LL, v6);
  if (!v29)
  {
    uint64_t v31 = *(void *)(v6 - 8);
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 24))(v27, v28, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v31 + 8))(v27, v6);
    goto LABEL_18;
  }

  if (v30)
  {
LABEL_18:
    uint64_t v32 = sub_494C(&qword_189D00);
    memcpy(v27, v28, *(void *)(*(void *)(v32 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v27, v28, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v27, 0LL, 1LL, v6);
  return a1;
}

char *sub_6A084(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  uint64_t v13 = &a1[v12];
  int v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = a3[8];
  uint64_t v16 = a3[9];
  uint64_t v17 = &a1[v15];
  uint64_t v18 = &a2[v15];
  *(void *)uint64_t v17 = *(void *)v18;
  uint64_t v19 = *(void *)&a2[v16];
  v17[8] = v18[8];
  *(void *)&a1[v16] = v19;
  uint64_t v20 = a3[10];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1LL, v6))
  {
    uint64_t v23 = sub_494C(&qword_189D00);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v21, v22, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0LL, 1LL, v6);
  }

  return a1;
}

char *sub_6A254(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  uint64_t v18 = a3[7];
  uint64_t v19 = a3[8];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  v20[8] = v21[8];
  *(void *)uint64_t v20 = *(void *)v21;
  uint64_t v22 = &a1[v19];
  uint64_t v23 = &a2[v19];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_release();
  uint64_t v24 = a3[10];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  int v27 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v24], 1LL, v6);
  int v28 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v26, 1LL, v6);
  if (!v27)
  {
    uint64_t v29 = *(void *)(v6 - 8);
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 40))(v25, v26, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v29 + 8))(v25, v6);
    goto LABEL_18;
  }

  if (v28)
  {
LABEL_18:
    uint64_t v30 = sub_494C(&qword_189D00);
    memcpy(v25, v26, *(void *)(*(void *)(v30 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v25, v26, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v25, 0LL, 1LL, v6);
  return a1;
}

uint64_t sub_6A518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6A524);
}

uint64_t sub_6A528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6A534);
}

void sub_6A538(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = v4[0];
    v4[2] = &unk_13AC60;
    v4[3] = "\t";
    v4[4] = "\t";
    v4[5] = &unk_13AC60;
    v4[6] = v4[0];
    swift_initStructMetadata(a1, 256LL, 7LL, v4, a1 + 16);
  }

char *sub_6A5BC(char *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = (char *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_494C(&qword_189D00);
      memcpy(v4, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v4, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v4, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[6];
    *(void *)&v4[a3[5]] = *(uint64_t *)((char *)a2 + a3[5]);
    uint64_t v11 = &v4[v10];
    uint64_t v12 = (char *)a2 + v10;
    swift_retain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v12, 1LL, v7))
    {
      uint64_t v13 = sub_494C(&qword_189D00);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v11, v12, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0LL, 1LL, v7);
    }

    uint64_t v14 = a3[8];
    *(void *)&v4[a3[7]] = *(uint64_t *)((char *)a2 + a3[7]);
    *(void *)&v4[v14] = *(uint64_t *)((char *)a2 + v14);
    uint64_t v15 = a3[10];
    *(void *)&v4[a3[9]] = *(uint64_t *)((char *)a2 + a3[9]);
    *(void *)&v4[v15] = *(uint64_t *)((char *)a2 + v15);
    *(void *)&v4[a3[11]] = *(uint64_t *)((char *)a2 + a3[11]);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }

  swift_retain();
  return v4;
}

uint64_t sub_6A760(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  swift_release();
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

char *sub_6A830(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  swift_retain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v10, 1LL, v6))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  uint64_t v13 = a3[10];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

char *sub_6A9AC(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_retain();
  swift_release();
  uint64_t v11 = a3[6];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
LABEL_13:
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  swift_retain();
  swift_release();
  return a1;
}

char *sub_6AC04(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  uint64_t v13 = a3[10];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  return a1;
}

char *sub_6AD58(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_release();
  uint64_t v11 = a3[6];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
LABEL_13:
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_release();
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_release();
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_release();
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_release();
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  swift_release();
  return a1;
}

uint64_t sub_6AF80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6AF8C);
}

uint64_t sub_6AF90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6AF9C);
}

void sub_6AFA0(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = &unk_13AC60;
    v4[2] = v4[0];
    v4[3] = &unk_13AC60;
    v4[4] = &unk_13AC60;
    v4[5] = &unk_13AC60;
    v4[6] = &unk_13AC60;
    void v4[7] = &unk_13AC60;
    swift_initStructMetadata(a1, 256LL, 8LL, v4, a1 + 16);
  }

char *sub_6B01C(char *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = (char *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_494C(&qword_189D00);
      memcpy(v4, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v4, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v4, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[5];
    uint64_t v11 = &v4[v10];
    uint64_t v12 = (char *)a2 + v10;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v10, 1LL, v7))
    {
      uint64_t v13 = sub_494C(&qword_189D00);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v11, v12, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0LL, 1LL, v7);
    }

    uint64_t v14 = a3[7];
    *(void *)&v4[a3[6]] = *(uint64_t *)((char *)a2 + a3[6]);
    int v15 = &v4[v14];
    uint64_t v16 = (char *)a2 + v14;
    *(void *)int v15 = *(void *)v16;
    v15[8] = v16[8];
    *(void *)&v4[a3[8]] = *(uint64_t *)((char *)a2 + a3[8]);
    swift_retain();
  }

  swift_retain();
  return v4;
}

uint64_t sub_6B198(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  swift_release();
  return swift_release();
}

char *sub_6B238(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_retain();
  swift_retain();
  return a1;
}

char *sub_6B38C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_retain();
  swift_release();
  uint64_t v18 = a3[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = *(void *)v20;
  v19[8] = v20[8];
  *(void *)uint64_t v19 = v21;
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_retain();
  swift_release();
  return a1;
}

char *sub_6B590(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  uint64_t v13 = &a1[v12];
  int v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  return a1;
}

char *sub_6B6D8(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  uint64_t v18 = a3[7];
  uint64_t v19 = a3[8];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  *(void *)&a1[v19] = *(void *)&a2[v19];
  swift_release();
  return a1;
}

uint64_t sub_6B8C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6B8D4);
}

uint64_t sub_6B8D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6B8E4);
}

void sub_6B8E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_6B8FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6B908);
}

uint64_t sub_6B90C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6B918);
}

uint64_t sub_6B91C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6B928);
}

uint64_t sub_6B92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6B938);
}

uint64_t sub_6B93C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6B948);
}

uint64_t sub_6B94C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6B958);
}

uint64_t sub_6B95C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6B968);
}

uint64_t sub_6B96C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6B978);
}

uint64_t sub_6B97C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6B988);
}

uint64_t sub_6B98C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6B998);
}

uint64_t sub_6B99C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6B9A8);
}

uint64_t sub_6B9AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6B9B8);
}

char *sub_6B9BC(char *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = (char *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_494C(&qword_189D00);
      memcpy(v4, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v4, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v4, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[5];
    uint64_t v11 = &v4[v10];
    uint64_t v12 = (char *)a2 + v10;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v10, 1LL, v7))
    {
      uint64_t v13 = sub_494C(&qword_189D00);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v11, v12, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0LL, 1LL, v7);
    }

    uint64_t v14 = a3[7];
    v4[a3[6]] = *((_BYTE *)a2 + a3[6]);
    v4[v14] = *((_BYTE *)a2 + v14);
    uint64_t v15 = a3[9];
    *(void *)&v4[a3[8]] = *(uint64_t *)((char *)a2 + a3[8]);
    *(void *)&v4[v15] = *(uint64_t *)((char *)a2 + v15);
    uint64_t v16 = a3[11];
    *(void *)&v4[a3[10]] = *(uint64_t *)((char *)a2 + a3[10]);
    *(void *)&v4[v16] = *(uint64_t *)((char *)a2 + v16);
    *(void *)&v4[a3[12]] = *(uint64_t *)((char *)a2 + a3[12]);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }

  swift_retain();
  return v4;
}

uint64_t sub_6BB68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

char *sub_6BC2C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  uint64_t v14 = a3[11];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  *(void *)&a1[v14] = *(void *)&a2[v14];
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

char *sub_6BDB0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
LABEL_13:
  a1[a3[6]] = a2[a3[6]];
  a1[a3[7]] = a2[a3[7]];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  swift_retain();
  swift_release();
  return a1;
}

char *sub_6C004(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  uint64_t v14 = a3[11];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  *(void *)&a1[v14] = *(void *)&a2[v14];
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  return a1;
}

char *sub_6C164(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
LABEL_13:
  uint64_t v18 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  a1[v18] = a2[v18];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_release();
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_release();
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_release();
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  swift_release();
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  swift_release();
  return a1;
}

uint64_t sub_6C38C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6C398);
}

void sub_6C398()
{
  if (v1)
  {
    uint64_t v2 = sub_73270();
    sub_72CBC(v2, v3, v4);
  }

  else
  {
    sub_72B3C(*(int *)(v0 + 32));
    sub_1EB0C();
  }

uint64_t sub_6C3DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6C3E8);
}

void sub_6C3E8()
{
  if (v1)
  {
    uint64_t v2 = sub_72F90();
    sub_72CC8(v2, v3, v4, v5);
  }

  else
  {
    sub_73570(*(int *)(v0 + 32));
    sub_1EB0C();
  }

void sub_6C42C(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = v4[0];
    v4[2] = &unk_13AD58;
    v4[3] = &unk_13AD58;
    v4[4] = &unk_13AC60;
    v4[5] = &unk_13AC60;
    v4[6] = &unk_13AC60;
    void v4[7] = &unk_13AC60;
    void v4[8] = &unk_13AC60;
    swift_initStructMetadata(a1, 256LL, 9LL, v4, a1 + 16);
  }

uint64_t *sub_6C4B4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_494C(&qword_189D00);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v10, 1LL, v7))
    {
      uint64_t v13 = sub_494C(&qword_189D00);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v11, v12, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0LL, 1LL, v7);
    }

    uint64_t v14 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *((_BYTE *)a1 + v1sub_D878(v0 + 4) = *((_BYTE *)a2 + v14);
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  }

  swift_retain();
  return a1;
}

char *sub_6C61C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[v12] = a2[v12];
  a1[a3[8]] = a2[a3[8]];
  swift_retain();
  return a1;
}

char *sub_6C758(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_retain();
  swift_release();
  a1[a3[7]] = a2[a3[7]];
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

char *sub_6C93C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[v12] = a2[v12];
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

char *sub_6CA74(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  uint64_t v18 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v18] = a2[v18];
  return a1;
}

uint64_t sub_6CC4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6CC58);
}

uint64_t sub_6CC5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6CC68);
}

void sub_6CC6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_6CC7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (v9 <= 0x3F)
  {
    v10[0] = *(void *)(v8 - 8) + 64LL;
    v10[1] = v10[0];
    v10[2] = &unk_13AC60;
    v10[3] = a4;
    v10[4] = a5;
    swift_initStructMetadata(v5, 256LL, 5LL, v10, v5 + 16);
  }

uint64_t *sub_6CCFC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_494C(&qword_189D00);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v10, 1LL, v7))
    {
      uint64_t v13 = sub_494C(&qword_189D00);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v11, v12, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0LL, 1LL, v7);
    }

    uint64_t v14 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *((_BYTE *)a1 + v1sub_D878(v0 + 4) = *((_BYTE *)a2 + v14);
    uint64_t v15 = a3[9];
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
  }

  swift_retain();
  return a1;
}

uint64_t sub_6CE68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_ABF4();
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  return swift_release();
}

char *sub_6CEE8(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  a1[v13] = a2[v13];
  swift_retain();
  return a1;
}

char *sub_6D02C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_retain();
  swift_release();
  a1[a3[7]] = a2[a3[7]];
  a1[a3[8]] = a2[a3[8]];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

char *sub_6D21C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  a1[v13] = a2[v13];
  return a1;
}

char *sub_6D35C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  uint64_t v18 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v18] = a2[v18];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

uint64_t sub_6D540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6D54C);
}

uint64_t sub_6D550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6D55C);
}

void sub_6D560(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = v4[0];
    v4[2] = &unk_13AC60;
    v4[3] = &unk_13AD58;
    v4[4] = &unk_13AD58;
    v4[5] = &unk_13AD58;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
  }

uint64_t sub_6D5E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6D5EC);
}

uint64_t sub_6D5F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6D5FC);
}

uint64_t sub_6D600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6D60C);
}

uint64_t sub_6D610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6D61C);
}

uint64_t sub_6D620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6D62C);
}

uint64_t sub_6D630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6D63C);
}

char *sub_6D640(char *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = (char *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_494C(&qword_189D00);
      memcpy(v4, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v4, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v4, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[6];
    *(void *)&v4[a3[5]] = *(uint64_t *)((char *)a2 + a3[5]);
    *(void *)&v4[v10] = *(uint64_t *)((char *)a2 + v10);
    uint64_t v11 = a3[7];
    uint64_t v12 = &v4[v11];
    uint64_t v13 = (char *)a2 + v11;
    swift_retain();
    swift_retain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v7))
    {
      uint64_t v14 = sub_494C(&qword_189D00);
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v12, v13, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v7);
    }

    uint64_t v15 = a3[8];
    uint64_t v16 = a3[9];
    uint64_t v17 = &v4[v15];
    uint64_t v18 = (char *)a2 + v15;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
    uint64_t v19 = &v4[v16];
    uint64_t v20 = (char *)a2 + v16;
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = a3[11];
    v4[a3[10]] = *((_BYTE *)a2 + a3[10]);
    v4[v21] = *((_BYTE *)a2 + v21);
    uint64_t v22 = a3[13];
    v4[a3[12]] = *((_BYTE *)a2 + a3[12]);
    uint64_t v23 = &v4[v22];
    uint64_t v24 = (char *)a2 + v22;
    *(void *)uint64_t v23 = *(void *)v24;
    v23[8] = v24[8];
    uint64_t v25 = a3[15];
    *(void *)&v4[a3[14]] = *(uint64_t *)((char *)a2 + a3[14]);
    *(void *)&v4[v25] = *(uint64_t *)((char *)a2 + v25);
    uint64_t v26 = a3[16];
    int v27 = &v4[v26];
    int v28 = (char *)a2 + v26;
    *(void *)int v27 = *(void *)v28;
    v27[8] = v28[8];
    swift_retain();
  }

  swift_retain();
  return v4;
}

uint64_t sub_6D850(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  swift_release();
  swift_release();
  uint64_t v5 = a1 + *(int *)(a2 + 28);
  swift_release();
  return swift_release();
}

char *sub_6D908(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  uint64_t v9 = a3[7];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  swift_retain();
  swift_retain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v11, 1LL, v6))
  {
    uint64_t v12 = sub_494C(&qword_189D00);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v10, v11, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v10, 0LL, 1LL, v6);
  }

  uint64_t v13 = a3[8];
  uint64_t v14 = a3[9];
  uint64_t v15 = &a1[v13];
  uint64_t v16 = &a2[v13];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = &a1[v14];
  uint64_t v18 = &a2[v14];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  a1[v19] = a2[v19];
  uint64_t v20 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  uint64_t v23 = a3[15];
  *(void *)&a1[a3[14]] = *(void *)&a2[a3[14]];
  *(void *)&a1[v23] = *(void *)&a2[v23];
  uint64_t v24 = a3[16];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v26[8];
  swift_retain();
  swift_retain();
  return a1;
}

char *sub_6DAF0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_retain();
  swift_release();
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
LABEL_13:
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = *(void *)v20;
  v19[8] = v20[8];
  *(void *)uint64_t v19 = v21;
  uint64_t v22 = a3[9];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *(void *)v24;
  v23[8] = v24[8];
  *(void *)uint64_t v23 = v25;
  a1[a3[10]] = a2[a3[10]];
  a1[a3[11]] = a2[a3[11]];
  a1[a3[12]] = a2[a3[12]];
  uint64_t v26 = a3[13];
  int v27 = &a1[v26];
  int v28 = &a2[v26];
  uint64_t v29 = *(void *)v28;
  v27[8] = v28[8];
  *(void *)int v27 = v29;
  *(void *)&a1[a3[14]] = *(void *)&a2[a3[14]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[15]] = *(void *)&a2[a3[15]];
  swift_retain();
  swift_release();
  uint64_t v30 = a3[16];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v33 = *(void *)v32;
  v31[8] = v32[8];
  *(void *)uint64_t v31 = v33;
  return a1;
}

char *sub_6DDA4(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  uint64_t v9 = a3[7];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v9], 1LL, v6))
  {
    uint64_t v12 = sub_494C(&qword_189D00);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v10, v11, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v10, 0LL, 1LL, v6);
  }

  uint64_t v13 = a3[8];
  uint64_t v14 = a3[9];
  int v15 = &a1[v13];
  uint64_t v16 = &a2[v13];
  *(void *)int v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = &a1[v14];
  uint64_t v18 = &a2[v14];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  a1[v19] = a2[v19];
  uint64_t v20 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  uint64_t v23 = a3[15];
  *(void *)&a1[a3[14]] = *(void *)&a2[a3[14]];
  *(void *)&a1[v23] = *(void *)&a2[v23];
  uint64_t v24 = a3[16];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v26[8];
  return a1;
}

char *sub_6DF6C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_release();
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
LABEL_13:
  uint64_t v18 = a3[8];
  uint64_t v19 = a3[9];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = &a1[v19];
  uint64_t v23 = &a2[v19];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  uint64_t v24 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  a1[v24] = a2[v24];
  uint64_t v25 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  uint64_t v26 = &a1[v25];
  int v27 = &a2[v25];
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  *(void *)&a1[a3[14]] = *(void *)&a2[a3[14]];
  swift_release();
  *(void *)&a1[a3[15]] = *(void *)&a2[a3[15]];
  swift_release();
  uint64_t v28 = a3[16];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  *(void *)uint64_t v29 = *(void *)v30;
  v29[8] = v30[8];
  return a1;
}

uint64_t sub_6E1F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6E200);
}

uint64_t sub_6E204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6E210);
}

void sub_6E214(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = &unk_13AC60;
    v4[2] = &unk_13AC60;
    v4[3] = v4[0];
    v4[4] = "\t";
    v4[5] = "\t";
    void v4[6] = &unk_13AD58;
    void v4[7] = &unk_13AD58;
    void v4[8] = &unk_13AD58;
    void v4[9] = "\t";
    v4[10] = &unk_13AC60;
    v4[11] = &unk_13AC60;
    v4[12] = "\t";
    swift_initStructMetadata(a1, 256LL, 13LL, v4, a1 + 16);
  }

void sub_6E2AC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if ((*(_DWORD *)(*(void *)(a3 - 8) + 80LL) & 0x20000) != 0)
  {
    sub_73330(*a2);
  }

  else
  {
    uint64_t v6 = sub_ABF4();
    if (sub_72B24((uint64_t)a2))
    {
      uint64_t v7 = sub_494C(&qword_189D00);
      sub_72DD0(v7);
    }

    else
    {
      sub_72BE4(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
      sub_72A94(a1);
    }

    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    *(_BYTE *)(v10 + 8) = v11[8];
    uint64_t v12 = a1 + v9;
    uint64_t v13 = (uint64_t)a2 + v9;
    if (sub_72B24((uint64_t)a2 + v9))
    {
      uint64_t v14 = sub_494C(&qword_189D00);
      sub_72A3C(v14);
    }

    else
    {
      sub_72CE0(v12, v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
      sub_72A94(v12);
    }

    sub_72E3C();
    sub_732B8();
    if (sub_72B24((uint64_t)a2))
    {
      uint64_t v15 = sub_494C(&qword_189D00);
      sub_72DBC(v15);
    }

    else
    {
      sub_72BE4(a3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
      sub_72A94(a3);
    }
  }

  sub_73078();
}

void sub_6E3D0(uint64_t a1, int *a2)
{
  if (sub_72FC4(a1 + a2[10]))
  {
    sub_1EB0C();
  }

  else
  {
    uint64_t v4 = sub_735FC();
    sub_732C0(v4, v5, v6);
  }

void sub_6E450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_ABF4();
  if (sub_72B24(a2))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    sub_72DD0(v7);
  }

  else
  {
    sub_72BE4(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
    sub_72A94(a1);
  }

  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  if (sub_72B24(a2 + v9))
  {
    uint64_t v14 = sub_494C(&qword_189D00);
    sub_72A3C(v14);
  }

  else
  {
    sub_72CE0(v12, v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
    sub_72A94(v12);
  }

  sub_72E3C();
  sub_732B8();
  if (sub_72B24(a2))
  {
    uint64_t v15 = sub_494C(&qword_189D00);
    sub_72DBC(v15);
  }

  else
  {
    sub_72BE4(a3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
    sub_72A94(a3);
  }

  sub_73078();
}

void sub_6E55C()
{
  char v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = sub_ABF4();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1LL, v6);
  int v8 = sub_72B24(v3);
  if (v7)
  {
    if (!v8)
    {
      sub_72BE4(v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
      sub_72A94(v5);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    sub_73378(v5, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    sub_72DD0(v10);
    goto LABEL_7;
  }

  sub_72BE4(v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 24));
LABEL_7:
  sub_72E28((uint64_t *)(v3 + v1[5]));
  uint64_t v11 = v1[6];
  uint64_t v12 = v5 + v11;
  uint64_t v13 = v3 + v11;
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5 + v11, 1LL, v6);
  int v15 = sub_72B24(v13);
  if (v14)
  {
    if (!v15)
    {
      sub_72CE0(v12, v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
      sub_72A94(v12);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    sub_73378(v12, *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8));
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    sub_72A3C(v17);
    goto LABEL_13;
  }

  sub_72CE0(v12, v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 24));
LABEL_13:
  sub_73448(v1[7]);
  sub_36BE0();
  sub_73448(v1[8]);
  sub_36BE0();
  sub_72E28((uint64_t *)(v3 + v1[9]));
  uint64_t v18 = v1[10];
  uint64_t v19 = v5 + v18;
  uint64_t v20 = v3 + v18;
  int v21 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5 + v18, 1LL, v6);
  int v22 = sub_72B24(v20);
  if (!v21)
  {
    uint64_t v23 = *(void *)(v6 - 8);
    if (!v22)
    {
      sub_72BE4(v19, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 24));
      goto LABEL_19;
    }

    sub_73378(v19, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
    goto LABEL_18;
  }

  if (v22)
  {
LABEL_18:
    uint64_t v24 = sub_494C(&qword_189D00);
    sub_72DBC(v24);
    goto LABEL_19;
  }

  sub_72BE4(v19, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
  sub_72A94(v19);
LABEL_19:
  sub_24A0C();
}

void sub_6E744(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_ABF4();
  if (sub_72B24(a2))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    sub_72DD0(v7);
  }

  else
  {
    sub_72BE4(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
    sub_72A94(a1);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  if (sub_72B24(a2 + v9))
  {
    uint64_t v14 = sub_494C(&qword_189D00);
    sub_72A3C(v14);
  }

  else
  {
    sub_72CE0(v12, v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
    sub_72A94(v12);
  }

  uint64_t v15 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  sub_731E0();
  if (sub_72B24(a2))
  {
    uint64_t v16 = sub_494C(&qword_189D00);
    sub_72DBC(v16);
  }

  else
  {
    sub_72BE4((uint64_t)a3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
    sub_72A94((uint64_t)a3);
  }

  sub_73078();
}

void sub_6E860()
{
  char v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = sub_ABF4();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1LL, v6);
  int v8 = sub_72B24(v3);
  if (v7)
  {
    if (!v8)
    {
      sub_72BE4(v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
      sub_72A94(v5);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    sub_73378(v5, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    sub_72DD0(v10);
    goto LABEL_7;
  }

  sub_72BE4(v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 40));
LABEL_7:
  uint64_t v11 = v1[5];
  uint64_t v12 = v1[6];
  uint64_t v13 = v5 + v11;
  uint64_t v14 = v3 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  uint64_t v15 = v5 + v12;
  uint64_t v16 = v3 + v12;
  int v17 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5 + v12, 1LL, v6);
  int v18 = sub_72B24(v16);
  if (v17)
  {
    if (!v18)
    {
      sub_72CE0(v15, v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
      sub_72A94(v15);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v19 = *(void *)(v6 - 8);
  if (v18)
  {
    sub_73378(v15, *(uint64_t (**)(uint64_t, uint64_t))(v19 + 8));
LABEL_12:
    uint64_t v20 = sub_494C(&qword_189D00);
    sub_72A3C(v20);
    goto LABEL_13;
  }

  sub_72CE0(v15, v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 40));
LABEL_13:
  sub_73440(*(void *)(v5 + v1[7]), v1[7]);
  sub_73440(*(void *)(v5 + v1[8]), v1[8]);
  sub_731E0();
  int v21 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v1, 1LL, v6);
  int v22 = sub_72B24(v3);
  if (!v21)
  {
    uint64_t v23 = *(void *)(v6 - 8);
    if (!v22)
    {
      sub_72BE4((uint64_t)v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 40));
      goto LABEL_19;
    }

    sub_73378((uint64_t)v1, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
    goto LABEL_18;
  }

  if (v22)
  {
LABEL_18:
    uint64_t v24 = sub_494C(&qword_189D00);
    sub_72DBC(v24);
    goto LABEL_19;
  }

  sub_72BE4((uint64_t)v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
  sub_72A94((uint64_t)v1);
LABEL_19:
  sub_24A0C();
}

uint64_t sub_6EA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6EA4C);
}

uint64_t sub_6EA50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6EA5C);
}

void sub_6EA60()
{
  if (v2 <= 0x3F)
  {
    v3[0] = *(void *)(v1 - 8) + 64LL;
    v3[1] = "\t";
    v3[2] = v3[0];
    v3[3] = &unk_13AC60;
    v3[4] = &unk_13AC60;
    v3[5] = "\t";
    v3[6] = v3[0];
    swift_initStructMetadata(v0, 256LL, 7LL, v3, v0 + 16);
  }

uint64_t *sub_6EADC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_494C(&qword_189D00);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[5];
    uint64_t v11 = a3[6];
    uint64_t v12 = (char *)a1 + v10;
    uint64_t v13 = (char *)a2 + v10;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = (char *)a1 + v11;
    uint64_t v15 = (char *)a2 + v11;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v11, 1LL, v7))
    {
      uint64_t v16 = sub_494C(&qword_189D00);
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v14, v15, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v14, 0LL, 1LL, v7);
    }

    uint64_t v17 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)a1 + v17) = *(uint64_t *)((char *)a2 + v17);
    uint64_t v18 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = a3[11];
    int v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    swift_retain();
    swift_retain();
    swift_retain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v23, 1LL, v7))
    {
      uint64_t v24 = sub_494C(&qword_189D00);
      memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v22, v23, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v22, 0LL, 1LL, v7);
    }
  }

  return a1;
}

uint64_t sub_6ECF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v6 = a1 + *(int *)(a2 + 44);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1LL, v4);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v6, v4);
  }
  return result;
}

char *sub_6EDE0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = &a1[v9];
  uint64_t v13 = &a2[v9];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v9], 1LL, v6))
  {
    uint64_t v14 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v12, v13, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
  }

  uint64_t v15 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v15] = *(void *)&a2[v15];
  uint64_t v16 = a3[10];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = a3[11];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  swift_retain();
  swift_retain();
  swift_retain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v21, 1LL, v6))
  {
    uint64_t v22 = sub_494C(&qword_189D00);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v20, v21, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v20, 0LL, 1LL, v6);
  }

  return a1;
}

char *sub_6EFCC(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = *(void *)v13;
  v12[8] = v13[8];
  *(void *)uint64_t v12 = v14;
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  int v18 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v15], 1LL, v6);
  int v19 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v17, 1LL, v6);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v16, v17, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v16, 0LL, 1LL, v6);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v20 = *(void *)(v6 - 8);
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v16, v6);
LABEL_12:
    uint64_t v21 = sub_494C(&qword_189D00);
    memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v16, v17, v6);
LABEL_13:
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_retain();
  swift_release();
  uint64_t v22 = a3[10];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *(void *)v24;
  v23[8] = v24[8];
  *(void *)uint64_t v23 = v25;
  uint64_t v26 = a3[11];
  int v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  int v29 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v26], 1LL, v6);
  int v30 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v28, 1LL, v6);
  if (!v29)
  {
    uint64_t v31 = *(void *)(v6 - 8);
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 24))(v27, v28, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v31 + 8))(v27, v6);
    goto LABEL_18;
  }

  if (v30)
  {
LABEL_18:
    uint64_t v32 = sub_494C(&qword_189D00);
    memcpy(v27, v28, *(void *)(*(void *)(v32 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v27, v28, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v27, 0LL, 1LL, v6);
  return a1;
}

char *sub_6F2C0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = &a1[v9];
  uint64_t v13 = &a2[v9];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v9], 1LL, v6))
  {
    uint64_t v14 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v12, v13, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
  }

  uint64_t v15 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v15] = *(void *)&a2[v15];
  uint64_t v16 = a3[10];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  uint64_t v17 = &a1[v16];
  int v18 = &a2[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = a3[11];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v21, 1LL, v6))
  {
    uint64_t v22 = sub_494C(&qword_189D00);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v20, v21, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v20, 0LL, 1LL, v6);
  }

  return a1;
}

char *sub_6F498(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v11];
  uint64_t v14 = &a2[v11];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = &a1[v12];
  uint64_t v16 = &a2[v12];
  int v17 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v12], 1LL, v6);
  int v18 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v16, 1LL, v6);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v15, v16, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v15, 0LL, 1LL, v6);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v19 = *(void *)(v6 - 8);
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v6);
LABEL_12:
    uint64_t v20 = sub_494C(&qword_189D00);
    memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v15, v16, v6);
LABEL_13:
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_release();
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_release();
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_release();
  uint64_t v21 = a3[10];
  uint64_t v22 = a3[11];
  uint64_t v23 = &a1[v21];
  uint64_t v24 = &a2[v21];
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v24[8];
  uint64_t v25 = &a1[v22];
  uint64_t v26 = &a2[v22];
  int v27 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v22], 1LL, v6);
  int v28 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v26, 1LL, v6);
  if (!v27)
  {
    uint64_t v29 = *(void *)(v6 - 8);
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 40))(v25, v26, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v29 + 8))(v25, v6);
    goto LABEL_18;
  }

  if (v28)
  {
LABEL_18:
    uint64_t v30 = sub_494C(&qword_189D00);
    memcpy(v25, v26, *(void *)(*(void *)(v30 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v25, v26, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v25, 0LL, 1LL, v6);
  return a1;
}

uint64_t sub_6F76C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6F778);
}

uint64_t sub_6F77C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6F788);
}

void sub_6F78C(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = "\t";
    v4[2] = v4[0];
    v4[3] = &unk_13AC60;
    v4[4] = &unk_13AC60;
    v4[5] = &unk_13AC60;
    void v4[6] = "\t";
    void v4[7] = v4[0];
    swift_initStructMetadata(a1, 256LL, 8LL, v4, a1 + 16);
  }

void sub_6F810()
{
  uint64_t v2 = (uint64_t)v0;
  uint64_t v4 = v3;
  if ((*(_DWORD *)(*((void *)v1 - 1) + 80LL) & 0x20000) != 0)
  {
    sub_73330(*v0);
  }

  else
  {
    uint64_t v5 = v1;
    uint64_t v6 = sub_ABF4();
    if (sub_72B30(v2))
    {
      uint64_t v7 = sub_494C(&qword_189D00);
      sub_72DE4(v7);
    }

    else
    {
      sub_DA34(v4, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
      sub_72A84(v4);
    }

    uint64_t v8 = v5[5];
    uint64_t v9 = v5[6];
    uint64_t v10 = v4 + v8;
    uint64_t v11 = v2 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
    uint64_t v12 = v4 + v9;
    uint64_t v13 = v2 + v9;
    if (sub_72B30(v2 + v9))
    {
      uint64_t v14 = sub_494C(&qword_189D00);
      sub_72A3C(v14);
    }

    else
    {
      sub_DA34(v12, v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
      sub_72A84(v12);
    }

    sub_72C64();
    sub_36C5C();
    if (sub_72B30(v13))
    {
      uint64_t v15 = sub_494C(&qword_189D00);
      sub_72A3C(v15);
    }

    else
    {
      sub_DA34(v12, v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
      sub_72A84(v12);
    }

    uint64_t v16 = v5[12];
    uint64_t v17 = v5[13];
    uint64_t v18 = v4 + v16;
    uint64_t v19 = v2 + v16;
    *(void *)uint64_t v18 = *(void *)v19;
    *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
    *(_BYTE *)(v4 + v17) = *(_BYTE *)(v2 + v17);
  }

  sub_24A0C();
}

void sub_6F960(uint64_t a1, int *a2)
{
  if (sub_72FC4(a1 + a2[11]))
  {
    sub_1EB0C();
  }

  else
  {
    uint64_t v4 = sub_735FC();
    sub_732C0(v4, v5, v6);
  }

void sub_6F9E0()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = sub_ABF4();
  if (sub_72B30(v3))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    sub_72DE4(v7);
  }

  else
  {
    sub_DA34(v5, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
    sub_72A84(v5);
  }

  uint64_t v8 = *(int *)(v1 + 20);
  uint64_t v9 = *(int *)(v1 + 24);
  uint64_t v10 = v5 + v8;
  uint64_t v11 = v3 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  uint64_t v12 = v5 + v9;
  uint64_t v13 = v3 + v9;
  if (sub_72B30(v3 + v9))
  {
    uint64_t v14 = sub_494C(&qword_189D00);
    sub_72A3C(v14);
  }

  else
  {
    sub_DA34(v12, v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
    sub_72A84(v12);
  }

  sub_72C64();
  sub_36C5C();
  if (sub_72B30(v13))
  {
    uint64_t v15 = sub_494C(&qword_189D00);
    sub_72A3C(v15);
  }

  else
  {
    sub_DA34(v12, v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
    sub_72A84(v12);
  }

  sub_72CFC();
  sub_24A0C();
}

void sub_6FAF4()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = sub_ABF4();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1LL, v6);
  int v8 = sub_72B30(v3);
  if (v7)
  {
    if (!v8)
    {
      sub_DA34(v5, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
      sub_72A84(v5);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    sub_7357C(v9);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    sub_72DE4(v10);
    goto LABEL_7;
  }

  sub_DA34(v5, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 24));
LABEL_7:
  sub_72E28((uint64_t *)(v3 + v1[5]));
  uint64_t v11 = v1[6];
  uint64_t v12 = v5 + v11;
  uint64_t v13 = v3 + v11;
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5 + v11, 1LL, v6);
  int v15 = sub_72B30(v13);
  if (v14)
  {
    if (!v15)
    {
      sub_DA34(v12, v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
      sub_72A84(v12);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    sub_730E4(v16);
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    sub_72A3C(v17);
    goto LABEL_13;
  }

  sub_DA34(v12, v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 24));
LABEL_13:
  sub_73458(v1[7]);
  sub_36BE0();
  sub_72E28((uint64_t *)(v3 + v1[8]));
  sub_72E28((uint64_t *)(v3 + v1[9]));
  sub_73458(v1[10]);
  sub_36BE0();
  uint64_t v18 = v1[11];
  uint64_t v19 = v5 + v18;
  uint64_t v20 = v3 + v18;
  int v21 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5 + v18, 1LL, v6);
  int v22 = sub_72B30(v20);
  if (!v21)
  {
    uint64_t v23 = *(void *)(v6 - 8);
    if (!v22)
    {
      sub_DA34(v19, v20, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 24));
      goto LABEL_19;
    }

    sub_730E4(v23);
    goto LABEL_18;
  }

  if (v22)
  {
LABEL_18:
    uint64_t v24 = sub_494C(&qword_189D00);
    sub_72A3C(v24);
    goto LABEL_19;
  }

  sub_DA34(v19, v20, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
  sub_72A84(v19);
LABEL_19:
  sub_72E28((uint64_t *)(v3 + v1[12]));
  *(_BYTE *)(v5 + v1[13]) = *(_BYTE *)(v3 + v1[13]);
  sub_24A0C();
}

void sub_6FD00(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_ABF4();
  if (sub_72B30(a2))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    sub_72DE4(v7);
  }

  else
  {
    sub_DA34(a1, a2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
    sub_72A84(a1);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  if (sub_72B30(a2 + v9))
  {
    uint64_t v14 = sub_494C(&qword_189D00);
    sub_72A3C(v14);
  }

  else
  {
    sub_DA34(v12, v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
    sub_72A84(v12);
  }

  uint64_t v15 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  *(void *)uint64_t v16 = *(void *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  uint64_t v18 = a3[9];
  uint64_t v19 = a3[10];
  uint64_t v20 = a1 + v18;
  uint64_t v21 = a2 + v18;
  *(void *)uint64_t v20 = *(void *)v21;
  uint64_t v22 = *(void *)(a2 + v19);
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  *(void *)(a1 + v19) = v22;
  uint64_t v23 = a3[11];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  if (sub_72B30(a2 + v23))
  {
    uint64_t v26 = sub_494C(&qword_189D00);
    sub_72A3C(v26);
  }

  else
  {
    sub_DA34(v24, v25, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
    sub_72A84(v24);
  }

  sub_72CFC();
  sub_73078();
}

void sub_6FE60()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = sub_ABF4();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1LL, v6);
  int v8 = sub_72B30(v3);
  if (v7)
  {
    if (!v8)
    {
      sub_DA34(v5, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
      sub_72A84(v5);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    sub_7357C(v9);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    sub_72DE4(v10);
    goto LABEL_7;
  }

  sub_DA34(v5, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 40));
LABEL_7:
  uint64_t v11 = v1[5];
  uint64_t v12 = v1[6];
  uint64_t v13 = v5 + v11;
  uint64_t v14 = v3 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  uint64_t v15 = v5 + v12;
  uint64_t v16 = v3 + v12;
  int v17 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5 + v12, 1LL, v6);
  int v18 = sub_72B30(v16);
  if (v17)
  {
    if (!v18)
    {
      sub_DA34(v15, v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
      sub_72A84(v15);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v19 = *(void *)(v6 - 8);
  if (v18)
  {
    sub_730E4(v19);
LABEL_12:
    uint64_t v20 = sub_494C(&qword_189D00);
    sub_72A3C(v20);
    goto LABEL_13;
  }

  sub_DA34(v15, v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 40));
LABEL_13:
  sub_73440(*(void *)(v5 + v1[7]), v1[7]);
  uint64_t v21 = v1[8];
  uint64_t v22 = v1[9];
  uint64_t v23 = v5 + v21;
  uint64_t v24 = v3 + v21;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  *(void *)uint64_t v23 = *(void *)v24;
  uint64_t v25 = v5 + v22;
  uint64_t v26 = v3 + v22;
  *(void *)uint64_t v25 = *(void *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  sub_73440(*(void *)(v5 + v1[10]), v1[10]);
  uint64_t v27 = v1[11];
  uint64_t v28 = v5 + v27;
  uint64_t v29 = v3 + v27;
  int v30 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5 + v27, 1LL, v6);
  int v31 = sub_72B30(v29);
  if (!v30)
  {
    uint64_t v32 = *(void *)(v6 - 8);
    if (!v31)
    {
      sub_DA34(v28, v29, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 40));
      goto LABEL_19;
    }

    sub_730E4(v32);
    goto LABEL_18;
  }

  if (v31)
  {
LABEL_18:
    uint64_t v33 = sub_494C(&qword_189D00);
    sub_72A3C(v33);
    goto LABEL_19;
  }

  sub_DA34(v28, v29, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
  sub_72A84(v28);
LABEL_19:
  sub_72CFC();
  sub_24A0C();
}

uint64_t sub_70074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_70080);
}

void sub_70084()
{
  if (v1)
  {
    uint64_t v2 = sub_73270();
    sub_72CBC(v2, v3, v4);
  }

  else
  {
    sub_72B3C(*(int *)(v0 + 28));
    sub_1EB0C();
  }

uint64_t sub_700C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_700D4);
}

void sub_700D8()
{
  if (v1)
  {
    uint64_t v2 = sub_72F90();
    sub_72CC8(v2, v3, v4, v5);
  }

  else
  {
    sub_73570(*(int *)(v0 + 28));
    sub_1EB0C();
  }

void sub_7011C()
{
  if (v2 <= 0x3F)
  {
    v3[0] = *(void *)(v1 - 8) + 64LL;
    v3[1] = "\t";
    v3[2] = v3[0];
    v3[3] = &unk_13AC60;
    v3[4] = "\t";
    v3[5] = "\t";
    v3[6] = &unk_13AC60;
    void v3[7] = v3[0];
    v3[8] = "\t";
    v3[9] = &unk_13ACD8;
    swift_initStructMetadata(v0, 256LL, 10LL, v3, v0 + 16);
  }

uint64_t *sub_701A4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_494C(&qword_189D00);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v10, 1LL, v7))
    {
      uint64_t v13 = sub_494C(&qword_189D00);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v11, v12, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0LL, 1LL, v7);
    }

    uint64_t v14 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *((_BYTE *)a1 + v1sub_D878(v0 + 4) = *((_BYTE *)a2 + v14);
    uint64_t v15 = a3[8];
    uint64_t v16 = a3[9];
    int v17 = (char *)a1 + v15;
    int v18 = (char *)a2 + v15;
    *(void *)int v17 = *(void *)v18;
    v17[8] = v18[8];
    uint64_t v19 = (char *)a1 + v16;
    uint64_t v20 = (char *)a2 + v16;
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = a3[11];
    *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    uint64_t v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    swift_retain();
    swift_retain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v23, 1LL, v7))
    {
      uint64_t v24 = sub_494C(&qword_189D00);
      memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v22, v23, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v22, 0LL, 1LL, v7);
    }

    uint64_t v25 = a3[12];
    uint64_t v26 = (char *)a1 + v25;
    uint64_t v27 = (char *)a2 + v25;
    *(void *)uint64_t v26 = *(void *)v27;
    v26[8] = v27[8];
  }

  return a1;
}

uint64_t sub_703D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  swift_release();
  swift_release();
  uint64_t v6 = a1 + *(int *)(a2 + 44);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1LL, v4);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v6, v4);
  }
  return result;
}

char *sub_704B8(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[8];
  uint64_t v14 = a3[9];
  uint64_t v15 = &a1[v13];
  uint64_t v16 = &a2[v13];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  int v17 = &a1[v14];
  int v18 = &a2[v14];
  *(void *)int v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = a3[11];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  swift_retain();
  swift_retain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v21, 1LL, v6))
  {
    uint64_t v22 = sub_494C(&qword_189D00);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v20, v21, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v20, 0LL, 1LL, v6);
  }

  uint64_t v23 = a3[12];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  return a1;
}

char *sub_706C0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_retain();
  swift_release();
  a1[a3[7]] = a2[a3[7]];
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  char v21 = v20[8];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v21;
  uint64_t v22 = a3[9];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *(void *)v24;
  v23[8] = v24[8];
  *(void *)uint64_t v23 = v25;
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_retain();
  swift_release();
  uint64_t v26 = a3[11];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  int v29 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v26], 1LL, v6);
  int v30 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v28, 1LL, v6);
  if (!v29)
  {
    uint64_t v31 = *(void *)(v6 - 8);
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 24))(v27, v28, v6);
      goto LABEL_19;
    }

    (*(void (**)(char *, uint64_t))(v31 + 8))(v27, v6);
    goto LABEL_18;
  }

  if (v30)
  {
LABEL_18:
    uint64_t v32 = sub_494C(&qword_189D00);
    memcpy(v27, v28, *(void *)(*(void *)(v32 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v27, v28, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v27, 0LL, 1LL, v6);
LABEL_19:
  uint64_t v33 = a3[12];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  uint64_t v36 = *(void *)v35;
  v34[8] = v35[8];
  *(void *)uint64_t v34 = v36;
  return a1;
}

char *sub_709C0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[8];
  uint64_t v14 = a3[9];
  int v15 = &a1[v13];
  uint64_t v16 = &a2[v13];
  *(void *)int v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = &a1[v14];
  uint64_t v18 = &a2[v14];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = a3[11];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  uint64_t v20 = &a1[v19];
  char v21 = &a2[v19];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v19], 1LL, v6))
  {
    uint64_t v22 = sub_494C(&qword_189D00);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v20, v21, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v20, 0LL, 1LL, v6);
  }

  uint64_t v23 = a3[12];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  return a1;
}

char *sub_70BB4(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  uint64_t v18 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = a3[10];
  uint64_t v23 = &a1[v21];
  uint64_t v24 = &a2[v21];
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v24[8];
  *(void *)&a1[v22] = *(void *)&a2[v22];
  swift_release();
  uint64_t v25 = a3[11];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  int v28 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v25], 1LL, v6);
  int v29 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1LL, v6);
  if (!v28)
  {
    uint64_t v30 = *(void *)(v6 - 8);
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 40))(v26, v27, v6);
      goto LABEL_19;
    }

    (*(void (**)(char *, uint64_t))(v30 + 8))(v26, v6);
    goto LABEL_18;
  }

  if (v29)
  {
LABEL_18:
    uint64_t v31 = sub_494C(&qword_189D00);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v26, v27, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v26, 0LL, 1LL, v6);
LABEL_19:
  uint64_t v32 = a3[12];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  *(void *)uint64_t v33 = *(void *)v34;
  v33[8] = v34[8];
  return a1;
}

uint64_t sub_70E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_70EA8);
}

uint64_t sub_70EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_70EB8);
}

void sub_70EBC(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(v2 - 8);
    v5[2] = &unk_13AC60;
    v5[3] = &unk_13AD58;
    v5[0] = v4 + 64;
    v5[1] = v4 + 64;
    v5[4] = "\t";
    v5[5] = "\t";
    v5[6] = &unk_13AC60;
    v5[7] = v4 + 64;
    v5[8] = "\t";
    swift_initStructMetadata(a1, 256LL, 9LL, v5, a1 + 16);
  }

uint64_t type metadata accessor for WellnessQueryingSleep_SimpleResultParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18CC00, (uint64_t)&nominal type descriptor for WellnessQueryingSleep_SimpleResultParameters);
}

uint64_t type metadata accessor for WellnessQueryingRingsParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18CB50, (uint64_t)&nominal type descriptor for WellnessQueryingRingsParameters);
}

uint64_t sub_70F74(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t *sub_70FA4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_494C(&qword_189D00);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v10, 1LL, v7))
    {
      uint64_t v13 = sub_494C(&qword_189D00);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v11, v12, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0LL, 1LL, v7);
    }

    uint64_t v14 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *((_BYTE *)a1 + v1sub_D878(v0 + 4) = *((_BYTE *)a2 + v14);
    uint64_t v15 = a3[8];
    uint64_t v16 = a3[9];
    uint64_t v17 = (char *)a1 + v15;
    uint64_t v18 = (char *)a2 + v15;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
    *((_BYTE *)a1 + v16) = *((_BYTE *)a2 + v16);
    uint64_t v19 = a3[11];
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    *(void *)uint64_t v20 = *(void *)v21;
    uint64_t v22 = a3[12];
    uint64_t v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    v20[8] = v21[8];
    swift_retain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1LL, v7))
    {
      uint64_t v25 = sub_494C(&qword_189D00);
      memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v23, v24, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v23, 0LL, 1LL, v7);
    }
  }

  return a1;
}

uint64_t sub_711B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  swift_release();
  uint64_t v6 = a1 + *(int *)(a2 + 48);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1LL, v4);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v6, v4);
  }
  return result;
}

char *sub_7128C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[8];
  uint64_t v14 = a3[9];
  uint64_t v15 = &a1[v13];
  uint64_t v16 = &a2[v13];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  a1[v14] = a2[v14];
  uint64_t v17 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  uint64_t v20 = a3[12];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  v18[8] = v19[8];
  swift_retain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1LL, v6))
  {
    uint64_t v23 = sub_494C(&qword_189D00);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v21, v22, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0LL, 1LL, v6);
  }

  return a1;
}

char *sub_71474(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_retain();
  swift_release();
  a1[a3[7]] = a2[a3[7]];
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  char v21 = v20[8];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v21;
  a1[a3[9]] = a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  uint64_t v22 = a3[11];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *(void *)v24;
  v23[8] = v24[8];
  *(void *)uint64_t v23 = v25;
  uint64_t v26 = a3[12];
  uint64_t v27 = &a1[v26];
  int v28 = &a2[v26];
  int v29 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v26], 1LL, v6);
  int v30 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v28, 1LL, v6);
  if (!v29)
  {
    uint64_t v31 = *(void *)(v6 - 8);
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 24))(v27, v28, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v31 + 8))(v27, v6);
    goto LABEL_18;
  }

  if (v30)
  {
LABEL_18:
    uint64_t v32 = sub_494C(&qword_189D00);
    memcpy(v27, v28, *(void *)(*(void *)(v32 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v27, v28, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v27, 0LL, 1LL, v6);
  return a1;
}

char *sub_71754(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[8];
  uint64_t v14 = a3[9];
  int v15 = &a1[v13];
  uint64_t v16 = &a2[v13];
  *(void *)int v15 = *(void *)v16;
  v15[8] = v16[8];
  a1[v14] = a2[v14];
  uint64_t v17 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  uint64_t v20 = a3[12];
  char v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  v18[8] = v19[8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1LL, v6))
  {
    uint64_t v23 = sub_494C(&qword_189D00);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v21, v22, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0LL, 1LL, v6);
  }

  return a1;
}

char *sub_71938(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  uint64_t v18 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v21] = a2[v21];
  uint64_t v22 = a3[11];
  uint64_t v23 = a3[12];
  uint64_t v24 = &a1[v22];
  uint64_t v25 = &a2[v22];
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  uint64_t v26 = &a1[v23];
  uint64_t v27 = &a2[v23];
  int v28 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v23], 1LL, v6);
  int v29 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1LL, v6);
  if (!v28)
  {
    uint64_t v30 = *(void *)(v6 - 8);
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 40))(v26, v27, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v30 + 8))(v26, v6);
    goto LABEL_18;
  }

  if (v29)
  {
LABEL_18:
    uint64_t v31 = sub_494C(&qword_189D00);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v26, v27, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v26, 0LL, 1LL, v6);
  return a1;
}

uint64_t sub_71C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_71C10);
}

void sub_71C14()
{
  if (v1)
  {
    uint64_t v2 = sub_73270();
    sub_72CBC(v2, v3, v4);
  }

  else
  {
    sub_72B3C(*(int *)(v0 + 24));
    sub_1EB0C();
  }

uint64_t sub_71C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_71C64);
}

void sub_71C68()
{
  if (v1)
  {
    uint64_t v2 = sub_72F90();
    sub_72CC8(v2, v3, v4, v5);
  }

  else
  {
    sub_73570(*(int *)(v0 + 24));
    sub_1EB0C();
  }

void sub_71CAC(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = v4[0];
    v4[2] = &unk_13AC60;
    v4[3] = &unk_13AD58;
    v4[4] = "\t";
    v4[5] = &unk_13AD58;
    void v4[6] = &unk_13AD58;
    void v4[7] = "\t";
    void v4[8] = v4[0];
    swift_initStructMetadata(a1, 256LL, 9LL, v4, a1 + 16);
  }

char *sub_71D3C(char *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = (char *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_494C(&qword_189D00);
      memcpy(v4, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v4, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v4, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[6];
    *(void *)&v4[a3[5]] = *(uint64_t *)((char *)a2 + a3[5]);
    *(void *)&v4[v10] = *(uint64_t *)((char *)a2 + v10);
    uint64_t v11 = a3[7];
    uint64_t v12 = &v4[v11];
    uint64_t v13 = (char *)a2 + v11;
    swift_retain();
    swift_retain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v7))
    {
      uint64_t v14 = sub_494C(&qword_189D00);
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v12, v13, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v7);
    }

    uint64_t v15 = a3[9];
    *(void *)&v4[a3[8]] = *(uint64_t *)((char *)a2 + a3[8]);
    *(void *)&v4[v15] = *(uint64_t *)((char *)a2 + v15);
    uint64_t v16 = a3[11];
    *(void *)&v4[a3[10]] = *(uint64_t *)((char *)a2 + a3[10]);
    *(void *)&v4[v16] = *(uint64_t *)((char *)a2 + v16);
    swift_retain();
    swift_retain();
    swift_retain();
  }

  swift_retain();
  return v4;
}

uint64_t sub_71EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  swift_release();
  swift_release();
  uint64_t v5 = a1 + *(int *)(a2 + 28);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

char *sub_71FB8(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  uint64_t v9 = a3[7];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  swift_retain();
  swift_retain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v11, 1LL, v6))
  {
    uint64_t v12 = sub_494C(&qword_189D00);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v10, v11, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v10, 0LL, 1LL, v6);
  }

  uint64_t v13 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  uint64_t v14 = a3[11];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  *(void *)&a1[v14] = *(void *)&a2[v14];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

char *sub_7213C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_retain();
  swift_release();
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
LABEL_13:
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  swift_retain();
  swift_release();
  return a1;
}

char *sub_72394(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  uint64_t v9 = a3[7];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v9], 1LL, v6))
  {
    uint64_t v12 = sub_494C(&qword_189D00);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v10, v11, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v10, 0LL, 1LL, v6);
  }

  uint64_t v13 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  uint64_t v14 = a3[11];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  *(void *)&a1[v14] = *(void *)&a2[v14];
  return a1;
}

char *sub_724E8(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_189D00);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_release();
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v6);
LABEL_13:
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_release();
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_release();
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_release();
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  swift_release();
  return a1;
}

uint64_t sub_72710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_7271C);
}

void sub_72720()
{
  if (v1)
  {
    uint64_t v2 = sub_73270();
    sub_72CBC(v2, v3, v4);
  }

  else
  {
    sub_72B3C(*(int *)(v0 + 20));
    sub_1EB0C();
  }

uint64_t sub_72764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_72770);
}

void sub_72774()
{
  if (v1)
  {
    uint64_t v2 = sub_72F90();
    sub_72CC8(v2, v3, v4, v5);
  }

  else
  {
    sub_73570(*(int *)(v0 + 20));
    sub_1EB0C();
  }

void sub_727B8(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = &unk_13AC60;
    v4[2] = &unk_13AC60;
    v4[3] = v4[0];
    v4[4] = &unk_13AC60;
    v4[5] = &unk_13AC60;
    void v4[6] = &unk_13AC60;
    void v4[7] = &unk_13AC60;
    swift_initStructMetadata(a1, 256LL, 8LL, v4, a1 + 16);
  }

uint64_t sub_7283C(uint64_t a1)
{
  uint64_t v5 = v1 + v2[5];
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + v2[6], 1LL, 1LL, a1);
  *(void *)(v1 + v2[7]) = 0LL;
  *(void *)(v1 + v2[8]) = 0LL;
  uint64_t v6 = v1 + v2[9];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + v2[10], 1LL, 1LL, a1);
  return v3(v1);
}

uint64_t sub_728C8()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 64);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 72) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_728EC(uint64_t a1)
{
  uint64_t v5 = v1 + v3[5];
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + v3[6], 1LL, 1LL, a1);
  *(void *)(v1 + v3[7]) = 0LL;
  uint64_t v6 = v1 + v3[8];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = v1 + v3[9];
  *(void *)uint64_t v7 = 0LL;
  *(_BYTE *)(v7 + 8) = 1;
  *(void *)(v1 + v3[10]) = 0LL;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + v3[11], 1LL, 1LL, a1);
  uint64_t v8 = v1 + v3[12];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  *(_BYTE *)(v1 + v3[13]) = 2;
  return v2(v1);
}

uint64_t sub_729A4(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_729B0(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return swift_task_alloc((*(void *)(*(void *)(a1 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_729C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_729DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_729E8@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

uint64_t sub_729FC@<X0>(uint64_t a1@<X8>)
{
  return v3(v1);
}

uint64_t sub_72A20(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1LL, v1);
}

void *sub_72A3C(uint64_t a1)
{
  return memcpy(v1, v2, *(void *)(*(void *)(a1 - 8) + 64LL));
}

void sub_72A50(uint64_t a1, uint64_t (*a2)(void))
{
}

uint64_t sub_72A58(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1LL, v1);
}

uint64_t sub_72A74()
{
  return *(void *)(v0 + 80);
}

uint64_t sub_72A84(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 0LL, 1LL, v1);
}

uint64_t sub_72A94(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 0LL, 1LL, v1);
}

uint64_t sub_72AA4(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return 0LL;
}

uint64_t sub_72AB4()
{
  *(void *)(v0 + 80) = 0x6570795461746164LL;
  *(void *)(v0 + 88) = 0xE800000000000000LL;
  return 0LL;
}

uint64_t sub_72AD4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32LL))(a1, v1, v2);
}

unint64_t sub_72AE8(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
}

  ;
}

uint64_t sub_72B10(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32LL))(a1, v1, v2);
}

uint64_t sub_72B24(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1LL, v1);
}

uint64_t sub_72B30(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1LL, v1);
}

uint64_t sub_72B3C@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = *(void *)(v1 + a1);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  int v3 = v2 - 1;
  if (v3 < 0) {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t sub_72B60(uint64_t a1)
{
  *(void *)(v1 + v2[5]) = 0LL;
  *(void *)(v1 + v2[6]) = 0LL;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + v2[7], 1LL, 1LL, a1);
  *(void *)(v1 + v2[8]) = 0LL;
  *(void *)(v1 + v2[9]) = 0LL;
  *(void *)(v1 + v2[10]) = 0LL;
  *(void *)(v1 + v2[11]) = 0LL;
  return v1;
}

uint64_t sub_72BE4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v3, v2);
}

uint64_t sub_72BF0(uint64_t a1)
{
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + *(int *)(v2 + 20), 1LL, 1LL, a1);
  *(void *)(v1 + *(int *)(v2 + 24)) = 0LL;
  return result;
}

uint64_t sub_72C38()
{
  return swift_retain(v0);
}

void *sub_72C40@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  void *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_72C4C(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t sub_72C58()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_72C64()
{
  uint64_t v3 = v2[7];
  uint64_t v4 = v2[8];
  uint64_t v5 = *(void *)(v1 + v3);
  *(void *)(v0 + v3) = v5;
  uint64_t v6 = v0 + v4;
  uint64_t v7 = v1 + v4;
  *(void *)uint64_t v6 = *(void *)v7;
  *(_BYTE *)(v6 + 8) = *(_BYTE *)(v7 + 8);
  uint64_t v8 = v2[9];
  uint64_t v9 = v2[10];
  uint64_t v10 = v0 + v8;
  uint64_t v11 = v1 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  uint64_t v12 = *(void *)(v1 + v9);
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  *(void *)(v0 + v9) = v12;
  return swift_retain(v5);
}

uint64_t sub_72CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, a2, a3);
}

uint64_t sub_72CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, a3, a4);
}

uint64_t sub_72CD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_72CE0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

  ;
}

uint64_t sub_72CF4()
{
  return v1(v0);
}

uint64_t sub_72CFC()
{
  uint64_t v3 = *(int *)(v2 + 48);
  uint64_t v4 = *(int *)(v2 + 52);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = v1 + v3;
  *(void *)uint64_t v5 = *(void *)v6;
  *(_BYTE *)(v5 + 8) = *(_BYTE *)(v6 + 8);
  *(_BYTE *)(v0 + vsub_D878(v0 + 4) = *(_BYTE *)(v1 + v4);
  return v0;
}

uint64_t sub_72D28@<X0>(uint64_t a1@<X8>)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + a1, 1LL, 1LL, v2);
}

uint64_t sub_72D3C(uint64_t a1)
{
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + v2[5], 1LL, 1LL, a1);
  *(void *)(v1 + v2[6]) = 0LL;
  uint64_t v5 = v1 + v2[7];
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  return result;
}

uint64_t sub_72D98()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 80);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 88) = v0;
  return swift_task_dealloc(v5);
}

void *sub_72DBC(uint64_t a1)
{
  return memcpy(v2, v1, *(void *)(*(void *)(a1 - 8) + 64LL));
}

void *sub_72DD0(uint64_t a1)
{
  return memcpy(v1, v2, *(void *)(*(void *)(a1 - 8) + 64LL));
}

void *sub_72DE4(uint64_t a1)
{
  return memcpy(v1, v2, *(void *)(*(void *)(a1 - 8) + 64LL));
}

uint64_t sub_72DF8()
{
  *(_BYTE *)(v0 + 93) = 0;
  *(_WORD *)(v0 + 9sub_D878(v0 + 4) = -5120;
  return 0LL;
}

void *sub_72E20()
{
  return sub_B76C(v0);
}

void sub_72E28(uint64_t *a1@<X8>)
{
  uint64_t v2 = *a1;
  *(_BYTE *)(v1 + 8) = *((_BYTE *)a1 + 8);
  *(void *)uint64_t v1 = v2;
}

uint64_t sub_72E3C()
{
  uint64_t v3 = v2[7];
  uint64_t v4 = v2[8];
  uint64_t v5 = *(void *)(v1 + v3);
  *(void *)(v0 + v3) = v5;
  *(void *)(v0 + vsub_D878(v0 + 4) = *(void *)(v1 + v4);
  uint64_t v6 = v2[9];
  uint64_t v7 = v0 + v6;
  uint64_t v8 = v1 + v6;
  *(void *)uint64_t v7 = *(void *)v8;
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  return swift_retain(v5);
}

void *sub_72E78()
{
  *(void *)(v0 + 72) = v1;
  return sub_B76C(v2);
}

double sub_72E84()
{
  double result = 0.0;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return result;
}

  ;
}

  ;
}

uint64_t sub_72EC8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v2[24] = a2;
  v2[27] = result;
  v2[28] = 0x65756C615678616DLL;
  v2[29] = 0xE800000000000000LL;
  return result;
}

uint64_t sub_72EEC()
{
  return type metadata accessor for WellnessTime(0LL);
}

  ;
}

void *sub_72F08()
{
  return sub_B76C(v0);
}

uint64_t sub_72F10()
{
  return type metadata accessor for DialogCalendarRange(0LL);
}

void sub_72F18(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = (v2 - 32) | 0x8000000000000000LL;
  sub_41850(v3, v4, v5);
}

void sub_72F34(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = (v2 - 32) | 0x8000000000000000LL;
  sub_41850(v3, v4, v5);
}

void sub_72F50(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = (v2 - 32) | 0x8000000000000000LL;
  sub_41850(v3, v5, v4);
}

unint64_t sub_72F6C(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
}

void sub_72F7C(uint64_t a1, uint64_t *a2)
{
}

double sub_72F84()
{
  double result = 0.0;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return result;
}

uint64_t sub_72F90()
{
  return v0;
}

  ;
}

void sub_72FB8(uint64_t a1)
{
}

uint64_t sub_72FC4(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1LL, v1);
}

void *sub_72FD0()
{
  return sub_B76C(v0);
}

uint64_t sub_72FD8@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)(v2 + 96) = a2;
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = 0x6570795461746164LL;
  *(void *)(v2 + 136) = 0xE800000000000000LL;
  return v3 + *(int *)(v4 + 24);
}

void sub_73008(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)(v2 + 288) = a2;
  *(void *)(v2 + 312) = a1;
  strcpy((char *)(v2 + 320), "isFirstWindow");
  *(_WORD *)(v2 + 33sub_D878(v0 + 4) = -4864;
}

uint64_t sub_73038()
{
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0 + v2[6], 1LL, 1LL, v1);
  *(void *)(v0 + v2[7]) = 0LL;
  *(void *)(v0 + v2[8]) = 0LL;
  *(void *)(v0 + v2[9]) = 0LL;
  return result;
}

  ;
}

uint64_t sub_73088@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v2[18] = a2;
  v2[21] = a1;
  v2[22] = 0x6570795461746164LL;
  v2[23] = 0xE800000000000000LL;
  return v3 + *(int *)(v4 + 28);
}

uint64_t sub_730B8()
{
  uint64_t result = 0LL;
  *(void *)(v0 + 34sub_D878(v0 + 4) = 0LL;
  *(void *)(v0 + 352) = 0LL;
  return result;
}

uint64_t sub_730C8(char a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 2sub_D878(v0 + 4) = a5;
  *(void *)(v6 + 32) = v5;
  *(void *)(v6 + 16) = a4;
  *(_BYTE *)(v6 + 90) = a3;
  *(_BYTE *)(v6 + 89) = a2;
  *(_BYTE *)(v6 + 88) = a1;
  return 0LL;
}

uint64_t sub_730E4@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

void sub_730F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

double sub_730FC()
{
  double result = 0.0;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return result;
}

void sub_73108(uint64_t a1, uint64_t a2)
{
}

void sub_73110(char a1@<W8>)
{
  *(_BYTE *)(v2 + 336) = a1;
  *(void *)(v2 + 360) = v1;
  strcpy((char *)(v2 + 368), "isLastWindow");
  *(_BYTE *)(v2 + 381) = 0;
  *(_WORD *)(v2 + 382) = -5120;
}

uint64_t sub_7313C()
{
  return sub_494C(v0);
}

uint64_t sub_73144@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v2[42] = a2;
  v2[45] = a1;
  v2[46] = 1953066613LL;
  v2[47] = 0xE400000000000000LL;
  return v3 + *(int *)(v4 + 44);
}

void sub_7316C(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + a1;
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = v2;
}

void sub_7317C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void sub_73184(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)(v2 + 96) = a2;
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = 0x6570795461746164LL;
  *(void *)(v2 + 136) = 0xE800000000000000LL;
}

uint64_t sub_731AC()
{
  *(_BYTE *)(v0 + 93) = 0;
  *(_WORD *)(v0 + 9sub_D878(v0 + 4) = -5120;
  return 0LL;
}

uint64_t sub_731D4()
{
  return v0;
}

void sub_731E0()
{
  uint64_t v3 = *(int *)(v2 + 36);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = v1 + v3;
  *(void *)uint64_t v4 = *(void *)v5;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(v5 + 8);
}

double sub_73208()
{
  *(void *)(v0 + 248) = 0LL;
  *(void *)(v0 + 256) = 0LL;
  return 0.0;
}

double sub_73218()
{
  *(void *)(v0 + 296) = 0LL;
  *(void *)(v0 + 30sub_D878(v0 + 4) = 0LL;
  return 0.0;
}

uint64_t sub_73228()
{
  uint64_t result = 0LL;
  *(void *)(v0 + 152) = 0LL;
  *(void *)(v0 + 160) = 0LL;
  return result;
}

void sub_73238(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void sub_73240(uint64_t a1, uint64_t *a2)
{
}

void sub_73248(uint64_t a1, uint64_t *a2)
{
}

  ;
}

  ;
}

uint64_t sub_73270()
{
  return v0;
}

void sub_73280(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)(v2 + 288) = a2;
  *(void *)(v2 + 312) = a1;
  *(void *)(v2 + 320) = 1701669236LL;
  *(void *)(v2 + 328) = 0xE400000000000000LL;
}

  ;
}

uint64_t sub_732B0()
{
  return sub_494C(v0);
}

uint64_t sub_732B8()
{
  return swift_retain(v0);
}

uint64_t sub_732C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

void sub_732CC(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + a1;
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = v2;
}

  ;
}

uint64_t sub_732E8()
{
  uint64_t result = 0LL;
  *(void *)(v0 + 200) = 0LL;
  *(void *)(v0 + 208) = 0LL;
  return result;
}

unint64_t sub_732F8()
{
  return 0xD000000000000023LL;
}

  ;
}

uint64_t sub_73324(uint64_t a1)
{
  return v1 + *(int *)(a1 + 20);
}

uint64_t sub_73330(uint64_t a1)
{
  *uint64_t v1 = a1;
  return swift_retain(a1);
}

uint64_t sub_73348()
{
  return type metadata accessor for DialogDuration(0LL);
}

  ;
}

  ;
}

void sub_73370(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_73378@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_73380(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_73388()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v0 - 8) + 8LL))(v1, v0);
}

uint64_t sub_7339C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v0 - 8) + 8LL))(v1, v0);
}

uint64_t sub_733B0@<X0>(uint64_t a1@<X8>)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + a1, 1LL, 1LL, v2);
}

uint64_t sub_733C4()
{
  return type metadata accessor for DialogTemperature(0LL);
}

void sub_733CC()
{
}

void sub_733D8()
{
  *(void *)(v0 + 128) = 1702125924LL;
  *(void *)(v0 + 136) = 0xE400000000000000LL;
}

void sub_733F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_733FC(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + a1;
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = v2;
}

  ;
}

  ;
}

void sub_73438(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_73440@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v3 + a2) = v2;
  return swift_release(a1);
}

uint64_t sub_73448@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v2 + a1);
  *(void *)(v1 + a1) = v3;
  return swift_retain(v3);
}

uint64_t sub_73458@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v2 + a1);
  *(void *)(v1 + a1) = v3;
  return swift_retain(v3);
}

uint64_t sub_73468@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(void *)(v1 + a1));
}

double sub_73470()
{
  *(void *)(v0 + 440) = 0LL;
  *(void *)(v0 + 448) = 0LL;
  return 0.0;
}

uint64_t sub_73480()
{
  uint64_t result = 0LL;
  *(void *)(v0 + 10sub_D878(v0 + 4) = 0LL;
  *(void *)(v0 + 112) = 0LL;
  return result;
}

uint64_t sub_73490()
{
  uint64_t result = 0LL;
  *(void *)(v0 + 248) = 0LL;
  *(void *)(v0 + 256) = 0LL;
  return result;
}

uint64_t sub_734A0()
{
  uint64_t result = 0LL;
  *(void *)(v0 + 296) = 0LL;
  *(void *)(v0 + 30sub_D878(v0 + 4) = 0LL;
  return result;
}

uint64_t sub_734B0(char a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 2sub_D878(v0 + 4) = a4;
  *(void *)(v5 + 32) = v4;
  *(void *)(v5 + 16) = a3;
  *(_BYTE *)(v5 + 89) = a2;
  *(_BYTE *)(v5 + 88) = a1;
  return 0LL;
}

void sub_734C8(uint64_t a1@<X8>)
{
  *(void *)(v1 + 18sub_D878(v0 + 4) = (a1 - 32) | 0x8000000000000000LL;
}

void sub_734E0(uint64_t a1@<X8>)
{
  *(void *)(v1 + 128) = v2;
  *(void *)(v1 + 136) = (a1 - 32) | 0x8000000000000000LL;
}

void sub_734F8(uint64_t a1@<X8>)
{
  *(void *)(v1 + 136) = (a1 - 32) | 0x8000000000000000LL;
}

void sub_73510(uint64_t a1@<X8>)
{
  *(void *)(v1 + 280) = (a1 - 32) | 0x8000000000000000LL;
}

void sub_73520(uint64_t a1@<X8>)
{
  *(void *)(v1 + 232) = (a1 - 32) | 0x8000000000000000LL;
}

void sub_73538(uint64_t a1@<X8>)
{
  *(void *)(v1 + 472) = (a1 - 32) | 0x8000000000000000LL;
}

double sub_73548()
{
  *uint64_t v0 = 0u;
  return 0.0;
}

void sub_73558(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

__n128 *sub_73560(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

void sub_73570(uint64_t a1@<X8>)
{
  *(void *)(v2 + a1) = v1;
}

uint64_t sub_7357C@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

  ;
}

  ;
}

void sub_735B4(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + a1;
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = v2;
}

  ;
}

void sub_735D4()
{
  *(void *)(v0 + 232) = 0xE400000000000000LL;
}

uint64_t sub_735E8()
{
  *(void *)(v0 + 328) = 0xE400000000000000LL;
  return v1 + *(int *)(v2 + 40);
}

uint64_t sub_735FC()
{
  return v0;
}

uint64_t sub_73610()
{
  return 0LL;
}

  ;
}

void sub_73630(uint64_t a1@<X8>)
{
  *(void *)(v1 + 376) = (a1 - 32) | 0x8000000000000000LL;
}

uint64_t sub_73644@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = (a2 - 32) | 0x8000000000000000LL;
  return v2;
}

uint64_t sub_73658@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 80) = a1 & 0xFFFFFFFFFFFFLL | 0x6570000000000000LL;
  *(void *)(v1 + 88) = 0xE800000000000000LL;
  return 0LL;
}

uint64_t sub_7366C(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1LL, v1);
}

uint64_t sub_73678()
{
  return type metadata accessor for DialogCalendar(0LL);
}

uint64_t sub_73680()
{
  return type metadata accessor for DialogPersonHeight(0LL);
}

uint64_t sub_73688@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = (v1 - 32) | 0x8000000000000000LL;
  return 0LL;
}

uint64_t sub_7369C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = (v2 - 32) | 0x8000000000000000LL;
  return v3;
}

__n128 *sub_736B0(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

uint64_t destroy for MedNotSupportedFlow(void *a1)
{
  return swift_release(a1[31]);
}

uint64_t initializeWithCopy for MedNotSupportedFlow(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 2sub_D878(v0 + 4) = v4;
  (**(void (***)(void))(v4 - 8))();
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 6sub_D878(v0 + 4) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  __int128 v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 10sub_D878(v0 + 4) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  __int128 v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 14sub_D878(v0 + 4) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 120, a2 + 120);
  __int128 v8 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 18sub_D878(v0 + 4) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 160, a2 + 160);
  __int128 v9 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 22sub_D878(v0 + 4) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 200, a2 + 200);
  uint64_t v10 = *(void *)(a2 + 240);
  uint64_t v11 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = v10;
  *(void *)(a1 + 248) = v11;
  swift_retain(v10);
  swift_retain(v11);
  return a1;
}

void *assignWithCopy for MedNotSupportedFlow(void *a1, void *a2)
{
  a1[30] = a2[30];
  swift_retain();
  swift_release();
  a1[31] = a2[31];
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for MedNotSupportedFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x100uLL);
}

uint64_t assignWithTake for MedNotSupportedFlow(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 80));
  __int128 v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 120));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 160));
  __int128 v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v6;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 200));
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  uint64_t v7 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v7;
  swift_release();
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MedNotSupportedFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 256))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MedNotSupportedFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 248) = 0LL;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 18sub_D878(v0 + 4) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 10sub_D878(v0 + 4) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 2sub_D878(v0 + 4) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 256) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 2sub_D878(v0 + 4) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 256) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for MedNotSupportedFlow()
{
  return &type metadata for MedNotSupportedFlow;
}

uint64_t sub_73A54(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_74550();
  return Flow.deferToExecuteAsync(_:)(a1, a2, &type metadata for MedNotSupportedFlow, v4);
}

uint64_t sub_73A94(uint64_t a1)
{
  v2[59] = a1;
  v2[60] = v1;
  uint64_t v3 = type metadata accessor for GenericButtonModel(0LL);
  v2[61] = v3;
  v2[62] = sub_A5C0(*(void *)(v3 - 8));
  uint64_t v4 = sub_494C(&qword_189CF8);
  v2[63] = sub_A5C0(*(void *)(v4 - 8));
  uint64_t v5 = type metadata accessor for URL(0LL);
  v2[64] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[65] = v6;
  v2[66] = sub_A5C0(v6);
  uint64_t v7 = type metadata accessor for DialogPhase(0LL);
  v2[67] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[68] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[69] = swift_task_alloc(v9);
  v2[70] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[71] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[72] = v11;
  v2[73] = sub_A5C0(v11);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_73B60()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_190C14);
  *(void *)(v0 + 592) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_73BAC;
  return sub_131E08();
}

uint64_t sub_73BAC(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v2 + 592LL);
  *(void *)(*(void *)v2 + 60Hasher.init(_seed:)(v1, 0LL) = a1;
  swift_task_dealloc(v3);
  if (v1) {
    swift_errorRelease(v1);
  }
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_73C14()
{
  uint64_t v1 = (void *)v0[75];
  uint64_t v2 = v0[70];
  uint64_t v3 = v0[69];
  uint64_t v4 = v0[68];
  uint64_t v5 = v0[67];
  uint64_t v6 = v0[60];
  static DialogPhase.error.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  OutputGenerationManifest.init(dialogPhase:_:)(v3, sub_A633C, 0LL);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v5);
  OutputGenerationManifest.printSupportingDialogInDisplayModes.setter(1LL);
  id v7 = [v1 catId];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v10 = v9;

  OutputGenerationManifest.responseViewId.setter(v8, v10);
  sub_745A4();
  sub_202B4();
  uint64_t v11 = v0[37];
  uint64_t v12 = v0[38];
  sub_500C(v0 + 34, v11);
  char v13 = dispatch thunk of DeviceState.isPhone.getter(v11, v12);
  sub_744F0(v6, (uint64_t)(v0 + 2));
  if ((v13 & 1) != 0)
  {
    sub_74524(v0 + 2);
    sub_20300();
  }

  else
  {
    sub_500C(v0 + 2, v0[5]);
    sub_202B4();
    uint64_t v14 = v0[42];
    uint64_t v15 = v0[43];
    sub_745A4();
    char v16 = dispatch thunk of DeviceState.isPad.getter(v14, v15);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 39);
    sub_74524(v0 + 2);
    sub_20300();
    if ((v16 & 1) == 0)
    {
      double v39 = (void *)v0[75];
      uint64_t v40 = v0[60];
      uint64_t v41 = *(void *)(v40 + 224);
      sub_500C((void *)(v40 + 200), v41);
      uint64_t v42 = sub_494C(&qword_18A460);
      uint64_t v43 = sub_20308(v42, 40LL);
      *(_OWORD *)(v43 + 16) = xmmword_138BA0;
      *(void *)(v43 + 32) = v39;
      sub_202E8(v43, v44, v45);
      v0[78] = v50;
      uint64_t v46 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)[1];
      id v47 = v39;
      uint64_t v48 = (void *)swift_task_alloc(v46);
      v0[79] = v48;
      *uint64_t v48 = v0;
      v48[1] = sub_74124;
      return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)( v0 + 44,  v50,  v0[73],  v41);
    }
  }

  uint64_t v18 = v0[63];
  uint64_t v17 = v0[64];
  uint64_t v19 = sub_90E74(0x616548206E65704FLL, 0xEB0000000068746CLL, 0x6C6165486E65706FLL, (void *)0xED00007070416874LL);
  uint64_t v21 = v20;
  URL.init(string:)(0xD00000000000005CLL, 0x8000000000144070LL);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v18, 1LL, v17);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v49 = (void *)v0[75];
    uint64_t v23 = v0[66];
    uint64_t v24 = v0[65];
    uint64_t v25 = v0[64];
    uint64_t v26 = v0[61];
    uint64_t v27 = (uint64_t *)v0[62];
    uint64_t v28 = v0[60];
    (*(void (**)(uint64_t, void, uint64_t))(v24 + 32))(v23, v0[63], v25);
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))((char *)v27 + *(int *)(v26 + 20), v23, v25);
    *uint64_t v27 = v19;
    v27[1] = v21;
    uint64_t v29 = *(void *)(v28 + 224);
    sub_500C((void *)(v28 + 200), v29);
    uint64_t v30 = type metadata accessor for WellnessSnippets(0LL);
    v0[57] = v30;
    v0[58] = sub_20168();
    uint64_t v31 = sub_B76C(v0 + 54);
    sub_201A8((uint64_t)v27, (uint64_t)v31);
    swift_storeEnumTagMultiPayload(v31, v30, 4LL);
    uint64_t v32 = sub_494C(&qword_18A460);
    uint64_t v33 = sub_20308(v32, 40LL);
    *(_OWORD *)(v33 + 16) = xmmword_138BA0;
    *(void *)(v33 + 32) = v49;
    sub_202E8(v33, v34, v35);
    v0[76] = v50;
    uint64_t v36 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)[1];
    id v37 = v49;
    uint64_t v38 = (void *)swift_task_alloc(v36);
    v0[77] = v38;
    *uint64_t v38 = v0;
    v38[1] = sub_74018;
    return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)( v0 + 49,  v0 + 54,  v50,  v0[73],  v29);
  }

  return result;
}

uint64_t sub_74018()
{
  uint64_t v1 = v0 + 54;
  uint64_t v2 = v0[76];
  sub_20264(v0[77]);
  swift_bridgeObjectRelease(v2);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
  sub_A964();
  return swift_task_switch(v3, v4, v5);
}

uint64_t sub_7406C()
{
  uint64_t v1 = *(void *)(v0 + 576);
  uint64_t v2 = *(void *)(v0 + 528);
  uint64_t v3 = *(void *)(v0 + 520);
  uint64_t v4 = *(void *)(v0 + 512);
  uint64_t v5 = *(void *)(v0 + 496);
  uint64_t v6 = *(void *)(v0 + 472);

  sub_201EC(v5);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_202F4(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_20004((__int128 *)(v0 + 392), v6);
  sub_7458C();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_74124()
{
  uint64_t v1 = *(void *)(v0 + 624);
  sub_20264(*(void *)(v0 + 632));
  swift_bridgeObjectRelease(v1);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_74164()
{
  uint64_t v1 = *(void *)(v0 + 576);
  uint64_t v2 = *(void *)(v0 + 472);

  sub_202F4(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_20004((__int128 *)(v0 + 352), v2);
  sub_7458C();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  return sub_D8B0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_741D4()
{
  uint64_t v1 = *(void *)(v0 + 472);
  *(void *)(v1 + 32) = 0LL;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  sub_7458C();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  return sub_D8B0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_74224(uint64_t a1)
{
  v2[38] = a1;
  v2[39] = v1;
  uint64_t v3 = (void *)swift_task_alloc(dword_18CC6C);
  v2[40] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_74278;
  return sub_73A94((uint64_t)(v2 + 27));
}

uint64_t sub_74278()
{
  return sub_A5D0();
}

uint64_t sub_742AC()
{
  uint64_t v1 = (__int128 *)(v0 + 216);
  if (*(void *)(v0 + 240))
  {
    sub_20004(v1, v0 + 176);
    sub_D7EC(v0 + 176, v0 + 256);
    uint64_t v2 = sub_20308((uint64_t)&unk_17DAF8, 56LL);
    sub_20004((__int128 *)(v0 + 256), v2 + 16);
    static OutputPublisherFactory.makeOutputPublisherAsync()(v6);
    uint64_t v3 = type metadata accessor for SimpleOutputFlowAsync(0LL);
    swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
    *(void *)(v0 + 296) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)(v6, &unk_18CC78, v2);
    static ExecuteResponse.complete<A>(next:)(v0 + 296);
    sub_20300();
    swift_release();
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 312);
    sub_74434((uint64_t)v1);
    sub_A13C((_OWORD *)(v4 + 40), (_OWORD *)(v0 + 16));
    sub_A178();
    static ExecuteResponse.complete<A>(next:)(v0 + 16);
    sub_A1B4((void *)(v0 + 16));
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_743E4(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18CC64);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1FF58;
  return sub_74224(a1);
}

uint64_t sub_74434(uint64_t a1)
{
  uint64_t v2 = sub_494C(&qword_18A448);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_74474()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_74498(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc(dword_18CC74);
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_20098;
  return sub_1FE14(a1, v1 + 16);
}

uint64_t sub_744F0(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_74524(void *a1)
{
  return a1;
}

unint64_t sub_74550()
{
  unint64_t result = qword_18CC80[0];
  if (!qword_18CC80[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_13B1D4, &type metadata for MedNotSupportedFlow);
    atomic_store(result, qword_18CC80);
  }

  return result;
}

uint64_t sub_7458C()
{
  return swift_task_dealloc(*(void *)(v0 + 584));
}

void *sub_745A4()
{
  return sub_500C(v0, v1);
}

uint64_t destroy for AskAuthorizationFlow(void *a1)
{
  return swift_release(a1[32]);
}

uint64_t initializeWithCopy for AskAuthorizationFlow(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  __int128 v5 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 48, a2 + 48);
  __int128 v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 112) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 88, a2 + 88);
  __int128 v7 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 152) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 128, a2 + 128);
  __int128 v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 192) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 168, a2 + 168);
  __int128 v9 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 232) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 208, a2 + 208);
  uint64_t v10 = *(void *)(a2 + 248);
  uint64_t v11 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = v10;
  *(void *)(a1 + 256) = v11;
  swift_retain(v10);
  swift_retain(v11);
  return a1;
}

uint64_t assignWithCopy for AskAuthorizationFlow(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  sub_7030((void *)(a1 + 8), (void *)(a2 + 8));
  sub_7030((void *)(a1 + 48), (void *)(a2 + 48));
  sub_7030((void *)(a1 + 88), (void *)(a2 + 88));
  sub_7030((void *)(a1 + 128), (void *)(a2 + 128));
  sub_7030((void *)(a1 + 168), (void *)(a2 + 168));
  sub_7030((void *)(a1 + 208), (void *)(a2 + 208));
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_retain();
  swift_release();
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for AskAuthorizationFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x108uLL);
}

uint64_t assignWithTake for AskAuthorizationFlow(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 2sub_D878(v0 + 4) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 48));
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 6sub_D878(v0 + 4) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 88));
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 10sub_D878(v0 + 4) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 128));
  __int128 v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 14sub_D878(v0 + 4) = v5;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 168));
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 18sub_D878(v0 + 4) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 208));
  __int128 v6 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 22sub_D878(v0 + 4) = v6;
  uint64_t v7 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v7;
  swift_release();
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AskAuthorizationFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 264))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AskAuthorizationFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 18sub_D878(v0 + 4) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 10sub_D878(v0 + 4) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 2sub_D878(v0 + 4) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 248) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 26sub_D878(v0 + 4) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 26sub_D878(v0 + 4) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AskAuthorizationFlow()
{
  return &type metadata for AskAuthorizationFlow;
}

uint64_t sub_74964@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ResponseFactory(0LL);
  uint64_t v3 = sub_A72C(v2);
  uint64_t result = ResponseFactory.init()(v3);
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for ResponseFactory;
  *a1 = result;
  return result;
}

uint64_t sub_749B0()
{
  return sub_749D8( (void (*)(void))type metadata accessor for WellnessCATsSimple,  (uint64_t (*)(char *, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t sub_749C4()
{
  return sub_749D8( (void (*)(void))type metadata accessor for WellnessCATs,  (uint64_t (*)(char *, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t sub_749D8(void (*a1)(void), uint64_t (*a2)(char *, void))
{
  __int128 v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1(0LL);
  static CATOption.defaultMode.getter();
  return a2(v5, 0LL);
}

uint64_t sub_74A58@<X0>( char a1@<W0>, __int128 *a2@<X1>, const void *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(_BYTE *)a7 = a1;
  sub_20004(a2, a7 + 8);
  memcpy((void *)(a7 + 48), a3, 0xA0uLL);
  uint64_t result = sub_20004(a4, a7 + 208);
  *(void *)(a7 + 248) = a5;
  *(void *)(a7 + 256) = a6;
  return result;
}

uint64_t sub_74ACC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_A294();
  return Flow.deferToExecuteAsync(_:)(a1, a2, &type metadata for AskAuthorizationFlow, v4);
}

uint64_t sub_74B0C(uint64_t a1)
{
  v2[7] = a1;
  _BYTE v2[8] = v1;
  uint64_t v3 = type metadata accessor for GenericButtonModel(0LL);
  v2[9] = v3;
  v2[10] = sub_A5C0(*(void *)(v3 - 8));
  uint64_t v4 = sub_494C(&qword_189CF8);
  v2[11] = sub_A5C0(*(void *)(v4 - 8));
  uint64_t v5 = type metadata accessor for URL(0LL);
  v2[12] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[13] = v6;
  v2[14] = sub_A5C0(v6);
  uint64_t v7 = type metadata accessor for DialogPhase(0LL);
  v2[15] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[16] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[17] = swift_task_alloc(v9);
  v2[18] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[19] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[20] = v11;
  v2[21] = sub_A5C0(v11);
  uint64_t v12 = sub_494C(&qword_189D00);
  v2[22] = sub_A5C0(*(void *)(v12 - 8));
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_74BF0()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = sub_27CC8(**(_BYTE **)(v0 + 64));
  uint64_t v4 = v3;
  String.toSpeakableString.getter(v2, v3);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = type metadata accessor for SpeakableString(0LL);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 0LL, 1LL, v5);
  uint64_t v6 = (void *)swift_task_alloc(dword_18B07C);
  *(void *)(v0 + 18sub_D878(v0 + 4) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_74C88;
  return sub_3C81C(*(void *)(v0 + 176));
}

uint64_t sub_74C88(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v5 = *(void *)(*v2 + 176);
  uint64_t v4 = *(void *)(*v2 + 184);
  *(void *)(v3 + 192) = a1;
  *(void *)(v3 + 200) = v1;
  swift_task_dealloc(v4);
  sub_2012C(v5, &qword_189D00);
  sub_A964();
  return sub_A810();
}

uint64_t sub_74CF8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9 = (void *)v8[24];
  uint64_t v11 = v8[17];
  uint64_t v10 = v8[18];
  uint64_t v12 = v8[15];
  uint64_t v13 = v8[16];
  uint64_t v15 = v8[11];
  uint64_t v14 = v8[12];
  static DialogPhase.completion.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v11, v10, v12);
  OutputGenerationManifest.init(dialogPhase:_:)(v11, sub_A633C, 0LL);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v10, v12);
  OutputGenerationManifest.printSupportingDialogInDisplayModes.setter(1LL);
  id v16 = [v9 catId];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  uint64_t v19 = v18;

  OutputGenerationManifest.responseViewId.setter(v17, v19);
  URL.init(string:)(0xD00000000000002FLL, 0x8000000000145060LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v15, 1LL, v14) == 1)
  {
    uint64_t v20 = (void *)v8[24];
    uint64_t v21 = v8[8];
    sub_2012C(v8[11], &qword_189CF8);
    uint64_t v22 = *(void *)(v21 + 232);
    sub_500C((void *)(v21 + 208), v22);
    uint64_t v23 = sub_494C(&qword_18A460);
    uint64_t v24 = sub_20308(v23, 40LL);
    *(_OWORD *)(v24 + 16) = xmmword_138BA0;
    *(void *)(v24 + 32) = v20;
    sub_202E8(v24, v25, v26);
    v8[28] = v50;
    uint64_t v27 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)[1];
    id v28 = v20;
    uint64_t v29 = (void *)swift_task_alloc(v27);
    v8[29] = v29;
    *uint64_t v29 = v8;
    v29[1] = sub_75100;
    return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)( v8[7],  v50,  v8[21],  v22);
  }

  else
  {
    uint64_t v49 = (void *)v8[24];
    uint64_t v32 = v8[13];
    uint64_t v31 = v8[14];
    uint64_t v34 = v8[9];
    uint64_t v33 = (uint64_t *)v8[10];
    uint64_t v35 = v8[8];
    sub_61900(v31, v8[11], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 32));
    uint64_t v36 = sub_90E74(0xD000000000000014LL, 0x8000000000145090LL, 0xD000000000000012LL, (void *)0x80000000001450B0LL);
    uint64_t v38 = v37;
    sub_61900((uint64_t)v33 + *(int *)(v34 + 20), v31, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 16));
    *uint64_t v33 = v36;
    v33[1] = v38;
    uint64_t v39 = *(void *)(v35 + 232);
    sub_500C((void *)(v35 + 208), v39);
    uint64_t v40 = type metadata accessor for WellnessSnippets(0LL);
    v8[5] = v40;
    v8[6] = sub_20168();
    uint64_t v41 = sub_B76C(v8 + 2);
    sub_201A8((uint64_t)v33, (uint64_t)v41);
    swift_storeEnumTagMultiPayload(v41, v40, 4LL);
    uint64_t v42 = sub_494C(&qword_18A460);
    uint64_t v43 = sub_20308(v42, 40LL);
    *(_OWORD *)(v43 + 16) = xmmword_138BA0;
    *(void *)(v43 + 32) = v49;
    sub_202E8(v43, v44, v45);
    v8[26] = v50;
    uint64_t v46 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)[1];
    id v47 = v49;
    uint64_t v48 = (void *)swift_task_alloc(v46);
    v8[27] = v48;
    *uint64_t v48 = v8;
    v48[1] = sub_75024;
    return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)( v8[7],  v8 + 2,  v50,  v8[21],  v39);
  }

uint64_t sub_75024()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = v0[26];
  sub_20264(v0[27]);
  swift_bridgeObjectRelease(v2);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
  sub_A964();
  return sub_A810();
}

uint64_t sub_7506C()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 80);

  sub_201EC(v3);
  sub_75690(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_7569C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_75670();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_75100()
{
  uint64_t v1 = *(void *)(v0 + 224);
  sub_20264(*(void *)(v0 + 232));
  swift_bridgeObjectRelease(v1);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_7513C()
{
  uint64_t v1 = *(void *)(v0 + 160);

  sub_7569C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_75670();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  return sub_20294(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_7519C()
{
  return sub_20294(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_751E4(uint64_t a1)
{
  v1[17] = a1;
  uint64_t v2 = type metadata accessor for FlowUnhandledReason(0LL);
  v1[18] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[19] = v3;
  v1[20] = sub_A5C0(v3);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  v1[21] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[22] = v5;
  v1[23] = sub_A5C0(v5);
  uint64_t v6 = (void *)swift_task_alloc(dword_18CCA4);
  v1[24] = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_75270;
  return sub_74B0C((uint64_t)(v1 + 2));
}

uint64_t sub_75270()
{
  uint64_t v3 = *(void *)(v2 + 192);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 200) = v0;
  swift_task_dealloc(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_752C0()
{
  uint64_t v1 = sub_20308((uint64_t)&unk_17DBF0, 56LL);
  sub_20004((__int128 *)(v0 + 56), v1 + 16);
  static OutputPublisherFactory.makeOutputPublisherAsync()(v4);
  uint64_t v2 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  sub_A72C(v2);
  *(void *)(v0 + 128) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)(v4, &unk_18CCB0, v1);
  static ExecuteResponse.complete<A>(next:)(v0 + 128);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 16));
  swift_release();
  sub_756A8();
  sub_A78C();
  return sub_75684(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_75390(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 200);
  uint64_t v4 = *(void *)(v1 + 176);
  uint64_t v3 = *(void *)(v1 + 184);
  uint64_t v5 = Logger.wellness.unsafeMutableAddressor(a1);
  swift_beginAccess(v5, v1 + 96, 0LL, 0LL);
  sub_61900(v3, v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
  swift_errorRetain(v2);
  uint64_t v6 = swift_errorRetain(v2);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = *(void *)(v1 + 200);
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v10 = 138412290;
    swift_errorRetain(v9);
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(void *)(v1 + 120) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 120, v1 + 128, v10 + 4, v10 + 12);
    *uint64_t v11 = v12;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl(&dword_0, v7, v8, "Caught unexpected exception %@, attempting server fallback", v10, 0xCu);
    sub_494C(&qword_189CB8);
    swift_arrayDestroy(v11, 1LL);
    sub_5050((uint64_t)v11);
    sub_5050((uint64_t)v10);
  }

  else
  {
    sub_A604();
    sub_A604();
  }

  uint64_t v13 = *(void *)(v1 + 176);
  uint64_t v14 = *(void *)(v1 + 160);
  uint64_t v15 = *(void *)(v1 + 144);
  uint64_t v16 = *(void *)(v1 + 152);

  sub_75690(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
  (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))( v14,  enum case for FlowUnhandledReason.needsServerExecution(_:),  v15);
  static ExecuteResponse.unhandled(reason:)(v14);
  sub_A604();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  sub_756A8();
  sub_A78C();
  return sub_75684(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_75580(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18CC9C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_A108;
  return sub_751E4(a1);
}

uint64_t sub_755D0()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_755F4(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc(dword_18CCAC);
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_7564C;
  return sub_1FE14(a1, v1 + 16);
}

uint64_t sub_7564C()
{
  return sub_202A8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_75670()
{
  return swift_task_dealloc(*(void *)(v0 + 176));
}

uint64_t sub_75684(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_75690@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_7569C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_756A8()
{
  return swift_task_dealloc(*(void *)(v0 + 184));
}

uint64_t type metadata accessor for WellnessCATPatternsExecutor(uint64_t a1)
{
  return sub_70F74(a1, (uint64_t *)&unk_18CCB8, (uint64_t)&nominal type descriptor for WellnessCATPatternsExecutor);
}

uint64_t sub_756C8(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_19C2B8);
}

uint64_t sub_75704(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_75740 + 4 * byte_13B2C0[a1]))( 0xD000000000000015LL,  0x80000000001452B0LL);
}

void sub_75740()
{
}

void sub_75810()
{
  uint64_t v3 = sub_494C(&qword_18A6A0);
  uint64_t v4 = sub_20308(v3, 608LL);
  sub_77920((__n128 *)v4, (__n128)xmmword_13B3F0);
  if ((v5 & 1) != 0)
  {
    uint64_t v6 = 0LL;
    *(void *)(v4 + sub_D7EC(v0 + 16, v0 + 56) = 0LL;
    *(void *)(v4 + 6sub_D878(v0 + 4) = 0LL;
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v7 = *v0;
    uint64_t v6 = &type metadata for Double;
  }

  *(void *)(v4 + 48) = v7;
  sub_77980((uint64_t)v6);
  sub_77A08(v8);
  *(void *)(v4 + 120) = &type metadata for Bool;
  *(void *)(v4 + 128) = v9;
  sub_77950();
  *(void *)(v4 + 168) = &type metadata for Bool;
  *(void *)(v4 + 176) = v10;
  sub_779E4();
  *(void *)(v4 + 216) = &type metadata for Bool;
  *(void *)(v4 + 22sub_D878(v0 + 4) = 0xD000000000000016LL;
  sub_779AC((uint64_t)"isNextWindowLastWindow");
  *(void *)(v4 + 26sub_D878(v0 + 4) = &type metadata for Bool;
  *(void *)(v4 + 272) = v11;
  *(void *)(v4 + 280) = 0xE500000000000000LL;
  uint64_t v12 = v0[2];
  uint64_t v13 = sub_494C(&qword_18CD58);
  *(void *)(v4 + 288) = v12;
  *(void *)(v4 + 312) = v13;
  *(void *)(v4 + 320) = 0xD000000000000013LL;
  sub_77A50((uint64_t)"nextWindowItemCount");
  if ((v14 & 1) != 0)
  {
    uint64_t v15 = 0LL;
    *(void *)(v4 + 34sub_D878(v0 + 4) = 0LL;
    *(void *)(v4 + 352) = 0LL;
    uint64_t v16 = 0LL;
  }

  else
  {
    uint64_t v16 = v0[3];
    uint64_t v15 = &type metadata for Double;
  }

  *(void *)(v4 + 336) = v16;
  *(void *)(v4 + 360) = v15;
  *(void *)(v4 + 368) = 0x64654D664F6D756ELL;
  *(void *)(v4 + 376) = 0xE800000000000000LL;
  if ((v0[6] & 1) != 0)
  {
    uint64_t v17 = 0LL;
    *(void *)(v4 + 392) = 0LL;
    *(void *)(v4 + 400) = 0LL;
    uint64_t v18 = 0LL;
  }

  else
  {
    uint64_t v18 = v0[5];
    uint64_t v17 = &type metadata for Double;
  }

  *(void *)(v4 + 38sub_D878(v0 + 4) = v18;
  *(void *)(v4 + 408) = v17;
  *(void *)(v4 + 416) = 0xD000000000000010LL;
  uint64_t v19 = sub_77A64((uint64_t)"requestedMedName");
  uint64_t v20 = (int *)type metadata accessor for WellnessDisambiguateMedNameParameters(v19);
  sub_41850((uint64_t)v0 + v20[12], v1, &qword_189D00);
  uint64_t v21 = sub_ABF4();
  sub_77A2C(v21);
  if (v22)
  {
    sub_77A00();
    sub_279E0(v1, &qword_189D00);
    *(_OWORD *)(v4 + 432) = 0u;
    *(_OWORD *)(v4 + 448) = 0u;
  }

  else
  {
    uint64_t v23 = sub_77A20();
    sub_779D0((uint64_t)v23);
    sub_77A00();
  }

  *(void *)(v4 + 46sub_D878(v0 + 4) = 0xD000000000000016LL;
  *(void *)(v4 + 472) = 0x80000000001415F0LL;
  *(_BYTE *)(v4 + 480) = *((_BYTE *)v0 + v20[13]);
  sub_77A78();
  *(void *)(v4 + 50sub_D878(v0 + 4) = &type metadata for Bool;
  *(void *)(v4 + 512) = v25;
  *(void *)(v4 + 520) = v24 + 3571;
  uint64_t v26 = (uint64_t *)((char *)v0 + v20[14]);
  if ((v26[1] & 1) != 0)
  {
    uint64_t v27 = 0LL;
    *(_OWORD *)(v4 + 536) = 0u;
    uint64_t v28 = 0LL;
  }

  else
  {
    uint64_t v28 = *v26;
    uint64_t v27 = &type metadata for Double;
  }

  *(void *)(v4 + 528) = v28;
  *(void *)(v4 + 552) = v27;
  *(void *)(v4 + 560) = 0x6953776F646E6977LL;
  *(void *)(v4 + 568) = v24;
  uint64_t v29 = (uint64_t *)((char *)v0 + v20[15]);
  if ((v29[1] & 1) != 0)
  {
    uint64_t v30 = 0LL;
    *(_OWORD *)(v4 + 58sub_D878(v0 + 4) = 0u;
    uint64_t v31 = 0LL;
  }

  else
  {
    uint64_t v31 = *v29;
    uint64_t v30 = &type metadata for Double;
  }

  *(void *)(v4 + 576) = v31;
  *(void *)(v4 + 600) = v30;
  sub_D8FC();
}

uint64_t sub_75AB0()
{
  uint64_t v3 = sub_494C(&qword_18A6A0);
  uint64_t v4 = sub_20308(v3, 560LL);
  sub_77920((__n128 *)v4, (__n128)xmmword_13B400);
  if ((v5 & 1) != 0)
  {
    uint64_t v6 = 0LL;
    *(void *)(v4 + sub_D7EC(v0 + 16, v0 + 56) = 0LL;
    *(void *)(v4 + 6sub_D878(v0 + 4) = 0LL;
  }

  else
  {
    uint64_t v6 = &type metadata for Double;
  }

  sub_77980((uint64_t)v6);
  sub_77A08(v7);
  *(void *)(v4 + 120) = v9;
  *(void *)(v4 + 128) = v8;
  sub_77950();
  *(void *)(v4 + 168) = v11;
  *(void *)(v4 + 176) = v10;
  sub_779E4();
  *(void *)(v4 + 216) = v12;
  *(void *)(v4 + 22sub_D878(v0 + 4) = 0xD000000000000016LL;
  *(void *)(v4 + 48) = v13;
  sub_779AC((uint64_t)"isNextWindowLastWindow");
  *(void *)(v4 + 26sub_D878(v0 + 4) = v15;
  *(void *)(v4 + 272) = v14;
  *(void *)(v4 + 280) = 0xE500000000000000LL;
  uint64_t v16 = *(void *)(v0 + 16);
  uint64_t v17 = sub_494C(&qword_18CD48);
  *(void *)(v4 + 288) = v16;
  *(void *)(v4 + 312) = v17;
  *(void *)(v4 + 320) = 0xD000000000000013LL;
  sub_77A50((uint64_t)"nextWindowItemCount");
  if ((v18 & 1) != 0)
  {
    uint64_t v19 = 0LL;
    *(void *)(v4 + 34sub_D878(v0 + 4) = 0LL;
    *(void *)(v4 + 352) = 0LL;
    uint64_t v20 = 0LL;
  }

  else
  {
    uint64_t v20 = *(void *)(v0 + 24);
    uint64_t v19 = &type metadata for Double;
  }

  *(void *)(v4 + 336) = v20;
  *(void *)(v4 + 360) = v19;
  strcpy((char *)(v4 + 368), "numOfSchedule");
  *(_WORD *)(v4 + 382) = -4864;
  if ((*(_BYTE *)(v0 + 48) & 1) != 0)
  {
    uint64_t v21 = 0LL;
    *(void *)(v4 + 392) = 0LL;
    *(void *)(v4 + 400) = 0LL;
    uint64_t v22 = 0LL;
  }

  else
  {
    uint64_t v22 = *(void *)(v0 + 40);
    uint64_t v21 = &type metadata for Double;
  }

  *(void *)(v4 + 38sub_D878(v0 + 4) = v22;
  *(void *)(v4 + 408) = v21;
  *(void *)(v4 + 416) = 0xD000000000000014LL;
  uint64_t v23 = sub_77A64((uint64_t)"requestedMedSchedule");
  uint64_t v24 = (int *)type metadata accessor for WellnessDisambiguateMedScheduleParameters(v23);
  sub_41850(v0 + v24[12], v1, &qword_189D00);
  uint64_t v25 = sub_ABF4();
  sub_77A2C(v25);
  if (v26)
  {
    sub_77A00();
    sub_279E0(v1, &qword_189D00);
    *(_OWORD *)(v4 + 432) = 0u;
    *(_OWORD *)(v4 + 448) = 0u;
  }

  else
  {
    uint64_t v27 = sub_77A20();
    sub_779D0((uint64_t)v27);
    sub_77A00();
  }

  sub_77A78();
  *(void *)(v4 + 46sub_D878(v0 + 4) = v29;
  *(void *)(v4 + 472) = v28 + 3571;
  uint64_t v30 = (uint64_t *)(v0 + v24[13]);
  if ((v30[1] & 1) != 0)
  {
    uint64_t v31 = 0LL;
    *(void *)(v4 + 488) = 0LL;
    *(void *)(v4 + 496) = 0LL;
    uint64_t v32 = 0LL;
  }

  else
  {
    uint64_t v32 = *v30;
    uint64_t v31 = &type metadata for Double;
  }

  *(void *)(v4 + 480) = v32;
  *(void *)(v4 + 50sub_D878(v0 + 4) = v31;
  *(void *)(v4 + 512) = 0x6953776F646E6977LL;
  *(void *)(v4 + 520) = v28;
  uint64_t v33 = (uint64_t *)(v0 + v24[14]);
  if ((v33[1] & 1) != 0)
  {
    uint64_t v34 = 0LL;
    *(_OWORD *)(v4 + 536) = 0u;
    uint64_t v35 = 0LL;
  }

  else
  {
    uint64_t v35 = *v33;
    uint64_t v34 = &type metadata for Double;
  }

  *(void *)(v4 + 528) = v35;
  *(void *)(v4 + 552) = v34;
  return v4;
}

uint64_t sub_75D38(char a1)
{
  *(void *)(v2 + 16) = v1;
  *(_BYTE *)(v2 + 48) = a1;
  sub_A964();
  return swift_task_switch(v3, v4, v5);
}

uint64_t sub_75D58()
{
  char v1 = *(_BYTE *)(v0 + 48);
  uint64_t v2 = sub_494C(&qword_18A6A0);
  uint64_t v3 = sub_20308(v2, 80LL);
  *(void *)(v3 + 32) = 0xD000000000000017LL;
  *(void *)(v3 + 40) = 0x8000000000144CA0LL;
  *(void *)(v3 + 72) = &type metadata for Bool;
  *(_BYTE *)(v3 + 48) = v1;
  *(void *)(v0 + 2sub_D878(v0 + 4) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_137250;
  uint64_t v5 = (void *)swift_task_alloc(v4);
  *(void *)(v0 + 32) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_75E28;
  sub_3D80C();
  return v7(0xD000000000000016LL);
}

uint64_t sub_75E28(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 32);
  uint64_t v5 = *v2;
  *(void *)(v5 + 40) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    sub_A964();
    return swift_task_switch(v6, v7, v8);
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v5 + 24));
    return sub_3D6F8(a1, *(uint64_t (**)(void))(v5 + 8));
  }

uint64_t sub_75EA0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_75ED4()
{
  uint64_t v1 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_7791C;
  sub_3D874();
  unint64_t v2 = sub_3D860(25LL);
  return sub_3D72C(v2, v3, v4, v5);
}

uint64_t sub_75F2C(char a1, char a2, char a3, char a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 2sub_D878(v0 + 4) = a7;
  *(void *)(v8 + 32) = a8;
  *(_BYTE *)(v8 + 100) = a6;
  *(void *)(v8 + 16) = a5;
  *(_BYTE *)(v8 + 99) = a4;
  *(_BYTE *)(v8 + 98) = a3;
  *(_BYTE *)(v8 + 97) = a2;
  *(_BYTE *)(v8 + 96) = a1;
  uint64_t v9 = sub_494C(&qword_189D00);
  *(void *)(v8 + 40) = sub_36390(v9);
  uint64_t v10 = type metadata accessor for WellnessDisambiguateMedNameParameters(0LL);
  *(void *)(v8 + 48) = v10;
  *(void *)(v8 + sub_D7EC(v0 + 16, v0 + 56) = sub_36390(v10);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_75F98()
{
  unint64_t v2 = *(int **)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 16);
  char v19 = *(_BYTE *)(v0 + 99);
  char v20 = *(_BYTE *)(v0 + 100);
  char v5 = *(_BYTE *)(v0 + 98);
  char v6 = *(_BYTE *)(v0 + 97);
  char v7 = *(_BYTE *)(v0 + 96);
  uint64_t v8 = v1 + v2[12];
  uint64_t v21 = *(void **)(v0 + 32);
  uint64_t v22 = v8;
  uint64_t v9 = sub_ABF4();
  uint64_t v10 = v8;
  uint64_t v11 = v9;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v10, 1LL, 1LL, v9);
  *(void *)uint64_t v1 = 0LL;
  *(_BYTE *)(v1 + 8) = 1;
  *(_BYTE *)(v1 + 9) = v7;
  *(_BYTE *)(v1 + 10) = v6;
  *(_BYTE *)(v1 + 11) = v5;
  *(_BYTE *)(v1 + 12) = v19;
  *(void *)(v1 + 16) = v4;
  *(void *)(v1 + 2sub_D878(v0 + 4) = 0LL;
  *(_BYTE *)(v1 + 32) = 1;
  *(void *)(v1 + 40) = 0LL;
  *(_BYTE *)(v1 + 48) = 1;
  *(_BYTE *)(v1 + v2[13]) = v20;
  uint64_t v12 = v1 + v2[14];
  *(void *)uint64_t v12 = 0LL;
  *(_BYTE *)(v12 + 8) = 1;
  uint64_t v13 = v1 + v2[15];
  *(void *)uint64_t v13 = 0LL;
  *(_BYTE *)(v13 + 8) = 1;
  uint64_t v14 = v21[32];
  uint64_t v15 = v21[33];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v15);
  String.toSpeakableString.getter(v14, v15);
  swift_bridgeObjectRelease(v15);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v3, 0LL, 1LL, v11);
  sub_A384(v3, v22);
  *(double *)(v1 + 40) = (double)(uint64_t)v21[34];
  *(_BYTE *)(v1 + 48) = 0;
  sub_75810();
  *(void *)(v0 + 6sub_D878(v0 + 4) = v16;
  *(void *)(v0 + 72) = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_7613C;
  sub_3D80C();
  return v23(0xD00000000000001CLL);
}

uint64_t sub_7613C()
{
  uint64_t v5 = v3[8];
  uint64_t v4 = v3[9];
  *char v6 = *v2;
  void v3[10] = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(v5);
  if (!v1) {
    v3[11] = v0;
  }
  sub_A964();
  return sub_55F28(v7, v8, v9);
}

uint64_t sub_7619C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 40);
  sub_72A50(a1, type metadata accessor for WellnessDisambiguateMedNameParameters);
  swift_release();
  sub_A78C();
  swift_task_dealloc(v2);
  return sub_3D6F8(*(void *)(v1 + 88), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_761F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 40);
  sub_72A50(a1, type metadata accessor for WellnessDisambiguateMedNameParameters);
  swift_release();
  sub_A78C();
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_7624C(char a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 2sub_D878(v0 + 4) = a6;
  *(void *)(v7 + 32) = a7;
  *(void *)(v7 + 16) = a5;
  *(_BYTE *)(v7 + 91) = a4;
  *(_BYTE *)(v7 + 90) = a3;
  *(_BYTE *)(v7 + 89) = a2;
  *(_BYTE *)(v7 + 88) = a1;
  uint64_t v8 = type metadata accessor for WellnessDisambiguateMedScheduleParameters(0LL);
  *(void *)(v7 + 40) = v8;
  *(void *)(v7 + 48) = sub_36390(v8);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_762A0()
{
  uint64_t v2 = *(int **)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v14 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 16);
  char v4 = *(_BYTE *)(v0 + 91);
  char v5 = *(_BYTE *)(v0 + 90);
  char v6 = *(_BYTE *)(v0 + 89);
  char v7 = *(_BYTE *)(v0 + 88);
  uint64_t v8 = v1 + v2[12];
  uint64_t v9 = sub_ABF4();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v8, 1LL, 1LL, v9);
  *(void *)uint64_t v1 = 0LL;
  *(_BYTE *)(v1 + 8) = 1;
  *(_BYTE *)(v1 + 9) = v7;
  *(_BYTE *)(v1 + 10) = v6;
  *(_BYTE *)(v1 + 11) = v5;
  *(_BYTE *)(v1 + 12) = v4;
  *(void *)(v1 + 16) = v3;
  *(void *)(v1 + 2sub_D878(v0 + 4) = 0LL;
  *(_BYTE *)(v1 + 32) = 1;
  *(void *)(v1 + 40) = 0LL;
  *(_BYTE *)(v1 + 48) = 1;
  uint64_t v10 = v1 + v2[13];
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  uint64_t v11 = v1 + v2[14];
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  *(double *)(v1 + 40) = (double)*(uint64_t *)(v14 + 16);
  *(_BYTE *)(v1 + 48) = 0;
  swift_bridgeObjectRetain(v3);
  *(void *)(v0 + sub_D7EC(v0 + 16, v0 + 56) = sub_75AB0();
  uint64_t v12 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 6sub_D878(v0 + 4) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_763D4;
  sub_3D80C();
  return ((uint64_t (*)(unint64_t))v14)(0xD000000000000020LL);
}

uint64_t sub_763D4()
{
  uint64_t v5 = v3[7];
  uint64_t v4 = v3[8];
  *char v6 = *v2;
  v3[9] = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(v5);
  if (!v1) {
    void v3[10] = v0;
  }
  sub_A964();
  return sub_55F28(v7, v8, v9);
}

uint64_t sub_76434(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 32);
  sub_72A50(a1, type metadata accessor for WellnessDisambiguateMedScheduleParameters);
  swift_bridgeObjectRelease(v2);
  sub_A78C();
  return sub_55F88(*(void *)(v1 + 80), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_7647C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 32);
  sub_72A50(a1, type metadata accessor for WellnessDisambiguateMedScheduleParameters);
  swift_bridgeObjectRelease(v2);
  sub_A78C();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_764C8()
{
  uint64_t v1 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_76520;
  sub_3D874();
  unint64_t v2 = sub_3D860(21LL);
  return sub_3D72C(v2, v3, v4, v5);
}

uint64_t sub_76520(uint64_t a1)
{
  uint64_t v6 = *v2;
  uint64_t v4 = swift_task_dealloc(*(void *)(*v2 + 16));
  if (!v1) {
    uint64_t v4 = a1;
  }
  return sub_55F88(v4, *(uint64_t (**)(void))(v6 + 8));
}

uint64_t sub_7656C()
{
  uint64_t v1 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_7791C;
  sub_3D874();
  unint64_t v2 = sub_3D860(28LL);
  return sub_3D72C(v2, v3, v4, v5);
}

uint64_t sub_765C4()
{
  uint64_t v1 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_7791C;
  sub_3D874();
  unint64_t v2 = sub_3D860(31LL);
  return sub_3D72C(v2, v3, v4, v5);
}

uint64_t sub_7661C()
{
  uint64_t v1 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_7791C;
  sub_3D874();
  unint64_t v2 = sub_3D860(28LL);
  return sub_3D72C(v2, v3, v4, v5);
}

uint64_t sub_76674()
{
  uint64_t v1 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_7791C;
  sub_3D874();
  unint64_t v2 = sub_3D860(26LL);
  return sub_3D72C(v2, v3, v4, v5);
}

void sub_766CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_7671C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_494C(&qword_189CF8);
  sub_6D20();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v13 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_41850(a1, (uint64_t)v12, &qword_189CF8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  CATWrapper.init(templateDir:options:globals:)(v12, v9, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_279E0(a1, &qword_189CF8);
  sub_D8FC();
}

uint64_t sub_76814()
{
  return type metadata accessor for WellnessCATPatternsExecutor(0LL);
}

uint64_t type metadata accessor for WellnessDisambiguateMedScheduleParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18CE70, (uint64_t)&nominal type descriptor for WellnessDisambiguateMedScheduleParameters);
}

uint64_t type metadata accessor for WellnessDisambiguateMedNameParameters(uint64_t a1)
{
  return sub_70F74(a1, qword_18CDB8, (uint64_t)&nominal type descriptor for WellnessDisambiguateMedNameParameters);
}

void *sub_76844(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *(void *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_DWORD *)(a1 + 9) = *(_DWORD *)((char *)a2 + 9);
    uint64_t v8 = a2[2];
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 2sub_D878(v0 + 4) = v7;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(void *)(a1 + 40) = a2[5];
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    uint64_t v9 = a3[12];
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for SpeakableString(0LL);
    swift_bridgeObjectRetain(v8);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v11, 1LL, v12))
    {
      uint64_t v13 = sub_494C(&qword_189D00);
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v10, 0LL, 1LL, v12);
    }

    uint64_t v15 = a3[14];
    *((_BYTE *)v4 + a3[13]) = *((_BYTE *)a2 + a3[13]);
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (uint64_t)a2 + v15;
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = *(_BYTE *)(v17 + 8);
    uint64_t v18 = a3[15];
    char v19 = (char *)v4 + v18;
    uint64_t v20 = (uint64_t)a2 + v18;
    *(void *)char v19 = *(void *)v20;
    v19[8] = *(_BYTE *)(v20 + 8);
  }

  return v4;
}

uint64_t sub_769B0(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 9);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 2sub_D878(v0 + 4) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v8 = a3[12];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for SpeakableString(0LL);
  swift_bridgeObjectRetain(v7);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v10, 1LL, v11))
  {
    uint64_t v12 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v11);
  }

  uint64_t v13 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  uint64_t v16 = a3[15];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(void *)uint64_t v17 = *(void *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  return a1;
}

uint64_t sub_76AEC(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v6;
  *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
  *(_BYTE *)(a1 + 10) = *((_BYTE *)a2 + 10);
  *(_BYTE *)(a1 + 11) = *((_BYTE *)a2 + 11);
  *(_BYTE *)(a1 + 12) = *((_BYTE *)a2 + 12);
  uint64_t v7 = a2[2];
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a2[3];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(void *)(a1 + 2sub_D878(v0 + 4) = v9;
  uint64_t v10 = a2[5];
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(void *)(a1 + 40) = v10;
  uint64_t v11 = a3[12];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for SpeakableString(0LL);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v12, 1LL, v14);
  int v16 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v14);
  if (!v15)
  {
    uint64_t v17 = *(void *)(v14 - 8);
    if (!v16)
    {
      (*(void (**)(void *, char *, uint64_t))(v17 + 24))(v12, v13, v14);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v17 + 8))(v12, v14);
    goto LABEL_6;
  }

  if (v16)
  {
LABEL_6:
    uint64_t v18 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v14);
LABEL_7:
  *(_BYTE *)(a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  uint64_t v19 = a3[14];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  uint64_t v22 = *v21;
  *(_BYTE *)(v20 + 8) = *((_BYTE *)v21 + 8);
  *(void *)uint64_t v20 = v22;
  uint64_t v23 = a3[15];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = (uint64_t *)((char *)a2 + v23);
  uint64_t v26 = *v25;
  *(_BYTE *)(v24 + 8) = *((_BYTE *)v25 + 8);
  *(void *)uint64_t v24 = v26;
  return a1;
}

uint64_t sub_76C9C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 9);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 2sub_D878(v0 + 4) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v7 = a3[12];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v9, 1LL, v10))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v8, 0LL, 1LL, v10);
  }

  uint64_t v12 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  uint64_t v15 = a3[15];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  *(void *)uint64_t v16 = *(void *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  return a1;
}

uint64_t sub_76DC8(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v6);
  *(void *)(a1 + 2sub_D878(v0 + 4) = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v7 = a3[12];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for SpeakableString(0LL);
  int v11 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1LL, v10);
  int v12 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v9, 1LL, v10);
  if (!v11)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }

  if (v12)
  {
LABEL_6:
    uint64_t v14 = sub_494C(&qword_189D00);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v8, 0LL, 1LL, v10);
LABEL_7:
  uint64_t v15 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  *(void *)uint64_t v16 = *(void *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  uint64_t v18 = a3[15];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(void *)uint64_t v19 = *(void *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  return a1;
}

uint64_t sub_76F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_76F78);
}

uint64_t sub_76F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_76F88);
}

void sub_76F8C(uint64_t a1)
{
  v4[0] = "\t";
  v4[1] = &unk_13B3A0;
  v4[2] = &unk_13B3A0;
  v4[3] = &unk_13B3A0;
  v4[4] = &unk_13B3A0;
  void v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
  void v4[6] = "\t";
  void v4[7] = "\t";
  sub_671D8(319LL);
  if (v3 <= 0x3F)
  {
    void v4[8] = *(void *)(v2 - 8) + 64LL;
    void v4[9] = &unk_13B3A0;
    v4[10] = "\t";
    v4[11] = "\t";
    swift_initStructMetadata(a1, 256LL, 12LL, v4, a1 + 16);
  }

void *sub_7702C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *(void *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_DWORD *)(a1 + 9) = *(_DWORD *)((char *)a2 + 9);
    uint64_t v8 = a2[2];
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 2sub_D878(v0 + 4) = v7;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(void *)(a1 + 40) = a2[5];
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    uint64_t v9 = a3[12];
    uint64_t v10 = (void *)(a1 + v9);
    int v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for SpeakableString(0LL);
    swift_bridgeObjectRetain(v8);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v11, 1LL, v12))
    {
      uint64_t v13 = sub_494C(&qword_189D00);
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v10, 0LL, 1LL, v12);
    }

    uint64_t v15 = a3[13];
    uint64_t v16 = a3[14];
    uint64_t v17 = (char *)v4 + v15;
    uint64_t v18 = (uint64_t)a2 + v15;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = *(_BYTE *)(v18 + 8);
    uint64_t v19 = (char *)v4 + v16;
    uint64_t v20 = (uint64_t)a2 + v16;
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = *(_BYTE *)(v20 + 8);
  }

  return v4;
}

uint64_t sub_77188(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 48);
  uint64_t v5 = sub_ABF4();
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v4, 1LL, v5);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  }
  return result;
}

uint64_t sub_771F0(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 9);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 2sub_D878(v0 + 4) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v8 = a3[12];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for SpeakableString(0LL);
  swift_bridgeObjectRetain(v7);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v10, 1LL, v11))
  {
    uint64_t v12 = sub_494C(&qword_189D00);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v11);
  }

  uint64_t v13 = a3[13];
  uint64_t v14 = a3[14];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  return a1;
}

uint64_t sub_77320(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v6;
  *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
  *(_BYTE *)(a1 + 10) = *((_BYTE *)a2 + 10);
  *(_BYTE *)(a1 + 11) = *((_BYTE *)a2 + 11);
  *(_BYTE *)(a1 + 12) = *((_BYTE *)a2 + 12);
  uint64_t v7 = a2[2];
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a2[3];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(void *)(a1 + 2sub_D878(v0 + 4) = v9;
  uint64_t v10 = a2[5];
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(void *)(a1 + 40) = v10;
  uint64_t v11 = a3[12];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for SpeakableString(0LL);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v12, 1LL, v14);
  int v16 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v14);
  if (!v15)
  {
    uint64_t v17 = *(void *)(v14 - 8);
    if (!v16)
    {
      (*(void (**)(void *, char *, uint64_t))(v17 + 24))(v12, v13, v14);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v17 + 8))(v12, v14);
    goto LABEL_6;
  }

  if (v16)
  {
LABEL_6:
    uint64_t v18 = sub_494C(&qword_189D00);
    memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v14);
LABEL_7:
  uint64_t v19 = a3[13];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  uint64_t v22 = *v21;
  *(_BYTE *)(v20 + 8) = *((_BYTE *)v21 + 8);
  *(void *)uint64_t v20 = v22;
  uint64_t v23 = a3[14];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = (uint64_t *)((char *)a2 + v23);
  uint64_t v26 = *v25;
  *(_BYTE *)(v24 + 8) = *((_BYTE *)v25 + 8);
  *(void *)uint64_t v24 = v26;
  return a1;
}

uint64_t sub_774C4(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 9);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 2sub_D878(v0 + 4) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v7 = a3[12];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v9, 1LL, v10))
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v8, 0LL, 1LL, v10);
  }

  uint64_t v12 = a3[13];
  uint64_t v13 = a3[14];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  *(void *)uint64_t v14 = *(void *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  uint64_t v16 = a1 + v13;
  uint64_t v17 = a2 + v13;
  *(void *)uint64_t v16 = *(void *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  return a1;
}

uint64_t sub_775E4(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v6);
  *(void *)(a1 + 2sub_D878(v0 + 4) = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v7 = a3[12];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for SpeakableString(0LL);
  int v11 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1LL, v10);
  int v12 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v9, 1LL, v10);
  if (!v11)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }

  if (v12)
  {
LABEL_6:
    uint64_t v14 = sub_494C(&qword_189D00);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v8, 0LL, 1LL, v10);
LABEL_7:
  uint64_t v15 = a3[13];
  uint64_t v16 = a3[14];
  uint64_t v17 = a1 + v15;
  uint64_t v18 = a2 + v15;
  *(void *)uint64_t v17 = *(void *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  uint64_t v19 = a1 + v16;
  uint64_t v20 = a2 + v16;
  *(void *)uint64_t v19 = *(void *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  return a1;
}

uint64_t sub_7777C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_77788);
}

uint64_t sub_7778C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(vsub_D878(v0 + 4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_494C(&qword_189D00);
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1 + *(int *)(a3 + 48), a2, v8);
  }

uint64_t sub_77804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_77810);
}

uint64_t sub_77814(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_494C(&qword_189D00);
    return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v5 + *(int *)(a4 + 48), a2, a2, v7);
  }

  return result;
}

void sub_77884(uint64_t a1)
{
  v4[0] = "\t";
  v4[1] = &unk_13B3A0;
  v4[2] = &unk_13B3A0;
  v4[3] = &unk_13B3A0;
  v4[4] = &unk_13B3A0;
  void v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
  void v4[6] = "\t";
  void v4[7] = "\t";
  sub_671D8(319LL);
  if (v3 <= 0x3F)
  {
    void v4[8] = *(void *)(v2 - 8) + 64LL;
    void v4[9] = "\t";
    v4[10] = "\t";
    swift_initStructMetadata(a1, 256LL, 11LL, v4, a1 + 16);
  }

__n128 *sub_77920(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x6E69577473726966LL;
  result[2].n128_u64[1] = 0xEF657A6953776F64LL;
  return result;
}

void sub_77950()
{
  *(void *)(v0 + 136) = 0xED0000776F646E69LL;
  *(_BYTE *)(v0 + 14sub_D878(v0 + 4) = *(_BYTE *)(v1 + 10);
}

void sub_77980(uint64_t a1@<X8>)
{
  *(void *)(v1 + 72) = a1;
  strcpy((char *)(v1 + 80), "isConclusion");
  *(_BYTE *)(v1 + 93) = 0;
  *(_WORD *)(v1 + 9sub_D878(v0 + 4) = -5120;
}

void sub_779AC(uint64_t a1@<X8>)
{
  *(void *)(v1 + 232) = (a1 - 32) | 0x8000000000000000LL;
  *(_BYTE *)(v1 + 240) = *(_BYTE *)(v2 + 12);
}

uint64_t sub_779D0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32LL))(a1, v1, v2);
}

void sub_779E4()
{
  *(void *)(v0 + 18sub_D878(v0 + 4) = 0xEC000000776F646ELL;
  *(_BYTE *)(v0 + 192) = *(_BYTE *)(v1 + 11);
}

uint64_t sub_77A00()
{
  return swift_bridgeObjectRetain(v0);
}

void sub_77A08(char a1@<W8>)
{
  *(_BYTE *)(v1 + 96) = a1;
}

void *sub_77A20()
{
  *(void *)(v0 + 4sub_D7EC(v0 + 16, v0 + 56) = v2;
  return sub_B76C(v1);
}

uint64_t sub_77A2C(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1LL, a1);
}

void sub_77A50(uint64_t a1@<X8>)
{
  *(void *)(v1 + 328) = (a1 - 32) | 0x8000000000000000LL;
}

uint64_t sub_77A64@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 42sub_D878(v0 + 4) = (a1 - 32) | 0x8000000000000000LL;
  return 0LL;
}

  ;
}

uint64_t sub_77A8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v38 = a1;
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v41 = *(void *)(v1 - 8);
  sub_D978();
  __chkstk_darwin(v2);
  sub_6D44();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = type metadata accessor for Calendar(0LL);
  uint64_t v39 = *(void *)(v6 - 8);
  sub_D978();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  int v12 = (char *)&v36 - v11;
  sub_494C(&qword_189CE8);
  sub_D978();
  __chkstk_darwin(v13);
  sub_6D44();
  uint64_t v16 = v15 - v14;
  sub_494C(&qword_18CED0);
  sub_D978();
  __chkstk_darwin(v17);
  sub_6D44();
  uint64_t v20 = v19 - v18;
  sub_494C(&qword_18CED8);
  sub_D978();
  __chkstk_darwin(v21);
  sub_6D44();
  uint64_t v24 = v23 - v22;
  uint64_t v25 = type metadata accessor for DateComponents(0LL);
  uint64_t v36 = *(void *)(v25 - 8);
  uint64_t v37 = v25;
  sub_D978();
  __chkstk_darwin(v26);
  sub_6D44();
  uint64_t v29 = v28 - v27;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v24, 1LL, 1LL, v6);
  uint64_t v30 = type metadata accessor for TimeZone(0LL);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v20, 1LL, 1LL, v30);
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( v24,  v20,  0LL,  1LL,  0LL,  1LL,  0LL,  1LL);
  DateComponents.day.setter(1LL, 0LL);
  uint64_t v31 = DateComponents.second.setter(-1LL, 0LL);
  uint64_t v32 = static Calendar.current.getter(v31);
  static Calendar.current.getter(v32);
  Calendar.startOfDay(for:)(v40);
  uint64_t v33 = *(void (**)(char *, uint64_t))(v39 + 8);
  v33(v10, v6);
  Calendar.date(byAdding:to:wrappingComponents:)(v29, v5, 0LL);
  uint64_t v34 = v41;
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v5, v1);
  v33(v12, v6);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v16, 1LL, v1);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v29, v37);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v38, v16, v1);
  }

  return result;
}

uint64_t sub_77D8C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_77DC4 + 4 * byte_13B410[a1]))( 0xD000000000000031LL,  0x80000000001449C0LL);
}

uint64_t sub_77DC4()
{
  return 0x656C756465686373LL;
}

uint64_t sub_77DE0()
{
  return 0x697461636964656DLL;
}

uint64_t sub_77E00()
{
  return 0x6874676E65727473LL;
}

uint64_t sub_77E28@<X0>( uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9 = 0x64656863536C696ELL;
  if (a2) {
    uint64_t v9 = result;
  }
  unint64_t v10 = 0xEB00000000656C75LL;
  if (a2) {
    unint64_t v10 = a2;
  }
  uint64_t v11 = 0x636964654D6C696ELL;
  if (a4) {
    uint64_t v11 = a3;
  }
  unint64_t v12 = 0xEF44496E6F697461LL;
  if (a4) {
    unint64_t v12 = a4;
  }
  uint64_t v13 = 0x6E657274536C696ELL;
  if (a8) {
    uint64_t v13 = a7;
  }
  *(void *)a9 = v9;
  *(void *)(a9 + 8) = v10;
  unint64_t v14 = 0xEF74696E55687467LL;
  if (a8) {
    unint64_t v14 = a8;
  }
  *(void *)(a9 + 16) = v11;
  *(void *)(a9 + 2sub_D878(v0 + 4) = v12;
  unint64_t v15 = 0xBFF0000000000000LL;
  if ((a6 & 1) == 0) {
    unint64_t v15 = a5;
  }
  *(void *)(a9 + 32) = v15;
  *(_BYTE *)(a9 + 40) = 0;
  *(void *)(a9 + 48) = v13;
  *(void *)(a9 + sub_D7EC(v0 + 16, v0 + 56) = v14;
  return result;
}

uint64_t sub_77ECC(void *a1)
{
  uint64_t v2 = v1;
  sub_781A4();
  id v16 = sub_781E0(0xD000000000000031LL, 0x80000000001449C0LL);
  uint64_t v4 = sub_494C(&qword_189D60);
  uint64_t inited = swift_initStackObject(v4, v17);
  *(_OWORD *)(inited + 16) = xmmword_13A310;
  strcpy((char *)v21, "medicationID");
  HIBYTE(v21[6]) = 0;
  v21[7] = -5120;
  sub_782BC((uint64_t)v21);
  sub_782C8(v2 + 16, (uint64_t)v21);
  uint64_t v6 = sub_494C(&qword_18B170);
  *(void *)(inited + 96) = v6;
  sub_782C8((uint64_t)v21, inited + 72);
  strcpy((char *)v19, "strength");
  BYTE1(v19[2]) = 0;
  HIWORD(v19[2]) = 0;
  v19[3] = -402653184;
  sub_B6B0((uint64_t)v21);
  sub_782BC((uint64_t)v19);
  sub_55C74(v2 + 32, (uint64_t)v20, qword_189C90);
  *(void *)(inited + 168) = sub_494C(qword_189C90);
  sub_55C74((uint64_t)v20, inited + 144, qword_189C90);
  strcpy((char *)v19, "strengthUnit");
  BYTE1(v19[3]) = 0;
  HIWORD(v19[3]) = -5120;
  sub_782BC((uint64_t)v19);
  sub_782C8(v2 + 48, (uint64_t)v19);
  *(void *)(inited + 240) = v6;
  sub_782C8((uint64_t)v19, inited + 216);
  v18[0] = 0x656C756465686373LL;
  v18[1] = 0xEA00000000004449LL;
  sub_B6B0((uint64_t)v19);
  sub_782BC((uint64_t)v18);
  sub_782C8(v2, (uint64_t)v18);
  *(void *)(inited + 312) = v6;
  sub_782C8((uint64_t)v18, inited + 288);
  sub_B6B0((uint64_t)v18);
  uint64_t v7 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  sub_78250(v7, v16);
  uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___SKIDirectInvocation);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_500C(a1, v9);
  uint64_t v11 = (void *)DeviceState.asInvocationContext.getter(v9, v10);
  id v12 = [v8 runSiriKitExecutorCommandWithContext:v11 payload:v16];

  id v13 = [v8 wrapCommandInStartLocalRequest:v12];
  uint64_t countAndFlagsBits = AceObject.serializeToBase64()().value._countAndFlagsBits;

  return countAndFlagsBits;
}

unint64_t sub_781A4()
{
  unint64_t result = qword_18CEE0;
  if (!qword_18CEE0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___SKIDirectInvocationPayload);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_18CEE0);
  }

  return result;
}

id sub_781E0(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [v4 initWithIdentifier:v5];

  return v6;
}

void sub_78250(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  [a2 setUserData:isa];
}

uint64_t sub_782BC(uint64_t a1)
{
  return AnyHashable.init<A>(_:)(a1, v1, v2);
}

uint64_t sub_782C8(uint64_t a1, uint64_t a2)
{
  return sub_55C74(a1, a2, v2);
}

void sub_782D0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_name;
  uint64_t v2 = sub_ABF4();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1LL, 1LL, v2);
  sub_79A3C(OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_scheduleString);
  sub_79A3C(OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_scheduleID);
  sub_79A3C(OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_medicationID);
  uint64_t v3 = v0 + OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_strength;
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  sub_79A3C(OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_strengthUnit);
  sub_79A3C(OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_onSelectCommand);
  sub_1EB0C();
}

uint64_t sub_78368()
{
  return v0;
}

uint64_t sub_783C4()
{
  return sub_78D14((void (*)(void))sub_78368);
}

unint64_t sub_783D0()
{
  return 0xD00000000000001FLL;
}

void sub_783EC(uint64_t a1)
{
  *(void *)(v1 + 16) = 0LL;
  sub_79A50(v4, (uint64_t)v17);
  sub_79AC8();
  uint64_t v5 = sub_79AE0(OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_name);
  sub_79A50(v5, (uint64_t)v16);
  sub_79AC8();
  uint64_t v6 = sub_79AE0(OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_scheduleString);
  sub_79A50(v6, (uint64_t)v15);
  sub_79AC8();
  uint64_t v7 = sub_79AE0(OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_scheduleID);
  sub_79A50(v7, (uint64_t)v14);
  sub_79AC8();
  uint64_t v8 = sub_79AE0(OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_medicationID);
  char v9 = *(_BYTE *)(a1 + OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_strength + 8);
  uint64_t v10 = v1 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_strength;
  *(void *)uint64_t v10 = *(void *)(a1
                             + OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_strength);
  *(_BYTE *)(v10 + 8) = v9;
  sub_79A50(v8, (uint64_t)v13);
  sub_79AC8();
  uint64_t v11 = sub_79AE0(OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_strengthUnit);
  sub_79A50(v11, (uint64_t)v12);
  sub_79AC8();
  swift_release();
  sub_79AE0(OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_onSelectCommand);
  sub_1EB0C();
}

uint64_t sub_78548( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = type metadata accessor for WellnessMedicationDialogObject.Builder(0LL);
  uint64_t v17 = sub_A72C(v16);
  sub_782D0();
  sub_79A60(OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_name, v30);
  uint64_t v18 = sub_79B40(a1);
  sub_79B18(v18);
  sub_79A60(OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_scheduleString, v31);
  uint64_t v19 = sub_79B40(a2);
  sub_79B18(v19);
  sub_79A60(OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_scheduleID, v32);
  uint64_t v20 = sub_79B40(a3);
  sub_79B18(v20);
  sub_79A60(OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_medicationID, v33);
  uint64_t v21 = sub_79B40(a4);
  sub_79B18(v21);
  uint64_t v22 = v17 + OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_strength;
  *(void *)uint64_t v22 = a5;
  *(_BYTE *)(v22 + 8) = a6 & 1;
  uint64_t v23 = v17 + OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_strengthUnit;
  sub_79AD4( v17 + OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_strengthUnit,  (uint64_t)v34);
  uint64_t v24 = sub_796EC(a7, v23);
  sub_79B18(v24);
  uint64_t v25 = v17 + OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_onSelectCommand;
  sub_79AD4( v17 + OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_onSelectCommand,  (uint64_t)v34);
  uint64_t v26 = sub_796EC(a8, v25);
  sub_79B18(v26);
  uint64_t v27 = type metadata accessor for WellnessMedicationDialogObject(0LL);
  uint64_t v28 = sub_A72C(v27);
  sub_783EC(v17);
  sub_59A88(a8);
  sub_59A88(a7);
  sub_59A88(a4);
  sub_59A88(a3);
  sub_59A88(a2);
  sub_59A88(a1);
  return v28;
}

double sub_786D4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v40 = a3;
  sub_494C(&qword_189D00);
  sub_6D20();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  id v13 = (char *)&v39 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v39 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v39 - v18;
  __chkstk_darwin(v17);
  sub_56AEC();
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v39 - v21;
  BOOL v23 = a1 == 1701667182 && a2 == 0xE400000000000000LL;
  if (v23 || (sub_79A2C(1701667182LL, 0xE400000000000000LL) & 1) != 0)
  {
    sub_79734(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_name, (uint64_t)v22);
    sub_ABF4();
    sub_79A98((uint64_t)v22);
    if (!v23) {
      goto LABEL_56;
    }
    uint64_t v24 = (uint64_t)v22;
    goto LABEL_33;
  }

  BOOL v25 = a1 == 0x656C756465686373LL && a2 == 0xEE00676E69727453LL;
  if (v25 || (uint64_t v26 = sub_79B48(), (sub_79A2C(v26, 0xEE00676E69727453LL) & 1) != 0))
  {
    sub_79734(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_scheduleString, v4);
    sub_ABF4();
    sub_79A98(v4);
    if (!v23) {
      goto LABEL_56;
    }
    uint64_t v24 = v4;
    goto LABEL_33;
  }

  BOOL v27 = a1 == 0x656C756465686373LL && a2 == 0xEA00000000004449LL;
  if (v27 || (uint64_t v28 = sub_79B48(), (sub_79A2C(v28, 0xEA00000000004449LL) & 1) != 0))
  {
    sub_79734(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_scheduleID, (uint64_t)v19);
    sub_ABF4();
    sub_79A98((uint64_t)v19);
    if (!v23) {
      goto LABEL_56;
    }
    uint64_t v24 = (uint64_t)v19;
    goto LABEL_33;
  }

  BOOL v29 = a1 == 0x697461636964656DLL && a2 == 0xEC00000044496E6FLL;
  if (v29 || (sub_79A2C(0x697461636964656DLL, 0xEC00000044496E6FLL) & 1) != 0)
  {
    sub_79734(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_medicationID, (uint64_t)v16);
    sub_ABF4();
    sub_79A98((uint64_t)v16);
    if (!v23) {
      goto LABEL_56;
    }
    uint64_t v24 = (uint64_t)v16;
    goto LABEL_33;
  }

  BOOL v33 = a1 == 0x6874676E65727473LL && a2 == 0xE800000000000000LL;
  if (v33 || (uint64_t v34 = sub_79B5C(), (sub_79A2C(v34, 0xE800000000000000LL) & 1) != 0))
  {
    if ((*(_BYTE *)(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_strength + 8) & 1) == 0)
    {
      double result = *(double *)(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_strength);
      uint64_t v35 = (double *)v40;
      *(void *)(v40 + 2sub_D878(v0 + 4) = &type metadata for Double;
      *uint64_t v35 = result;
      return result;
    }

LABEL_56:
  sub_79ABC();
  sub_79B20();
  v32();
  return result;
}

unint64_t sub_78B30(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_17B0B8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7) {
    return 7LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_78B7C()
{
  return 7LL;
}

uint64_t sub_78B84(char a1)
{
  return *(void *)&aName_1[8 * a1];
}

void sub_78BA4(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_78BB0()
{
}

uint64_t sub_78BB8(uint64_t a1)
{
  return sub_12BCC0(a1, *v1);
}

void sub_78BC0(uint64_t a1)
{
}

unint64_t sub_78BC8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_78B30(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_78BF4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_78B84(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_78C1C()
{
  return sub_78B84(*v0);
}

uint64_t sub_78C24@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_78B78(a1);
  *a2 = result;
  return result;
}

void sub_78C48(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_78C54(uint64_t a1)
{
  unint64_t v2 = sub_797C4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_78C7C(uint64_t a1)
{
  unint64_t v2 = sub_797C4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_78CA4()
{
  sub_79AB4(OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_name);
  sub_79AB4(OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_scheduleString);
  sub_79AB4(OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_scheduleID);
  sub_79AB4(OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_medicationID);
  sub_79AB4(OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_strengthUnit);
  sub_79AB4(OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_onSelectCommand);
  return v0;
}

uint64_t sub_78D08()
{
  return sub_78D14((void (*)(void))sub_78CA4);
}

uint64_t sub_78D14(void (*a1)(void))
{
  return swift_deallocClassInstance( v1,  *(unsigned int *)(*(void *)v1 + 48LL),  *(unsigned __int16 *)(*(void *)v1 + 52LL));
}

uint64_t sub_78D38()
{
  return type metadata accessor for WellnessMedicationDialogObject(0LL);
}

uint64_t type metadata accessor for WellnessMedicationDialogObject(uint64_t a1)
{
  return sub_70F74(a1, qword_18CF10, (uint64_t)&nominal type descriptor for WellnessMedicationDialogObject);
}

void sub_78D54(uint64_t a1)
{
  uint64_t v4 = "\b";
  sub_671D8(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(v2 - 8) + 64LL;
    uint64_t v6 = v5;
    uint64_t v7 = v5;
    uint64_t v8 = v5;
    uint64_t v9 = &unk_13B498;
    uint64_t v10 = v5;
    uint64_t v11 = v5;
    swift_updateClassMetadata2(a1, 256LL, 8LL, &v4, a1 + 80);
  }

uint64_t sub_78DE0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_494C(&qword_18D230);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_6D44();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_500C(a1, v10);
  unint64_t v12 = sub_797C4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for WellnessMedicationDialogObject.CodingKeys,  &type metadata for WellnessMedicationDialogObject.CodingKeys,  v12,  v10,  v11);
  uint64_t v13 = v3 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_name;
  char v23 = 0;
  type metadata accessor for SpeakableString(0LL);
  sub_2322C( &qword_18AAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString,  (uint64_t)&protocol conformance descriptor for SpeakableString);
  sub_79A14(v13, (uint64_t)&v23);
  if (!v2)
  {
    char v22 = 1;
    sub_79A14(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_scheduleString, (uint64_t)&v22);
    char v21 = 2;
    sub_79A14(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_scheduleID, (uint64_t)&v21);
    char v20 = 3;
    sub_79A14(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_medicationID, (uint64_t)&v20);
    uint64_t v14 = *(void *)(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_strength);
    uint64_t v15 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_strength + 8);
    char v19 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v19, v5);
    char v18 = 5;
    sub_79A14(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_strengthUnit, (uint64_t)&v18);
    char v17 = 6;
    sub_79A14(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_onSelectCommand, (uint64_t)&v17);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_78FDC(void *a1)
{
  uint64_t v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_790C4(a1);
  return v3;
}

uint64_t sub_79028()
{
  return type metadata accessor for WellnessMedicationDialogObject.Builder(0LL);
}

uint64_t type metadata accessor for WellnessMedicationDialogObject.Builder(uint64_t a1)
{
  return sub_70F74(a1, qword_18D040, (uint64_t)&nominal type descriptor for WellnessMedicationDialogObject.Builder);
}

void sub_79044(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = v4[0];
    v4[2] = v4[0];
    v4[3] = v4[0];
    v4[4] = &unk_13B498;
    void v4[5] = v4[0];
    void v4[6] = v4[0];
    swift_updateClassMetadata2(a1, 256LL, 7LL, v4, a1 + 80);
  }

uint64_t sub_790C4(void *a1)
{
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v39 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v36 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  unint64_t v12 = (char *)v36 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)v36 - v14;
  __chkstk_darwin(v13);
  sub_56AEC();
  __chkstk_darwin(v16);
  uint64_t v40 = (char *)v36 - v17;
  uint64_t v41 = sub_494C(&qword_18D220);
  __chkstk_darwin(v41);
  sub_6D44();
  uint64_t v42 = a1;
  uint64_t v43 = v1;
  *(void *)(v1 + 16) = 0LL;
  uint64_t v18 = a1[3];
  uint64_t v19 = a1[4];
  sub_500C(a1, v18);
  unint64_t v20 = sub_797C4();
  uint64_t v21 = v44;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for WellnessMedicationDialogObject.CodingKeys,  &type metadata for WellnessMedicationDialogObject.CodingKeys,  v20,  v18,  v19);
  if (v21)
  {
    uint64_t v27 = v43;

    uint64_t v32 = v42;
    uint64_t v25 = type metadata accessor for WellnessMedicationDialogObject(0LL);
    swift_deallocPartialClassInstance( v27,  v25,  *(unsigned int *)(*(void *)v27 + 48LL),  *(unsigned __int16 *)(*(void *)v27 + 52LL));
  }

  else
  {
    uint64_t v44 = v2;
    uint64_t v37 = v12;
    BOOL v38 = v15;
    v36[1] = v9;
    uint64_t v22 = type metadata accessor for SpeakableString(0LL);
    char v51 = 0;
    uint64_t v23 = sub_2322C( &qword_18AAC0,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString,  (uint64_t)&protocol conformance descriptor for SpeakableString);
    uint64_t v24 = v41;
    sub_79A78(v23, (uint64_t)&v51);
    uint64_t v27 = v43;
    uint64_t v28 = sub_79B34(OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_name);
    char v50 = 1;
    sub_79A78(v28, (uint64_t)&v50);
    sub_79B34(OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_scheduleString);
    char v49 = 2;
    uint64_t v44 = 0LL;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v22, &v49, v24, v22);
    uint64_t v29 = sub_79B34(OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_scheduleID);
    char v48 = 3;
    uint64_t v30 = (uint64_t)v37;
    sub_79A78(v29, (uint64_t)&v48);
    uint64_t v40 = (char *)v23;
    BOOL v38 = (char *)v22;
    sub_7977C(v30, v27 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_medicationID);
    char v47 = 4;
    uint64_t v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v47, v24);
    uint64_t v32 = v42;
    uint64_t v33 = v27 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_strength;
    *(void *)uint64_t v33 = v31;
    *(_BYTE *)(v33 + 8) = v34 & 1;
    char v46 = 5;
    uint64_t v35 = (uint64_t)v38;
    sub_79AFC((uint64_t)v38, (uint64_t)&v46, v41, (uint64_t)v38);
    sub_79B70(OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_strengthUnit);
    char v45 = 6;
    sub_79AFC(v35, (uint64_t)&v45, v41, v35);
    sub_79B08();
    sub_79B70(OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_onSelectCommand);
  }

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v32);
  return v27;
}

unint64_t sub_79540()
{
  return 0xD00000000000001FLL;
}

void *sub_7955C()
{
  uint64_t v1 = *v0;
  swift_beginAccess(*v0 + 16, v5, 0LL, 0LL);
  uint64_t v2 = *(void **)(v1 + 16);
  id v3 = v2;
  return v2;
}

void sub_795A0(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_beginAccess(v3 + 16, v5, 1LL, 0LL);
  uint64_t v4 = *(void **)(v3 + 16);
  *(void *)(v3 + 16) = a1;
}

void *sub_795E8(uint64_t a1)
{
  return &j__swift_endAccess;
}

double sub_7962C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_786D4(a1, a2, a3);
}

uint64_t sub_7964C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_78FDC(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_79674(void *a1)
{
  return sub_78DE0(a1);
}

uint64_t sub_79694()
{
  return sub_2322C(&qword_18D210, type metadata accessor for WellnessMedicationDialogObject, (uint64_t)&unk_13B4E0);
}

uint64_t sub_796C0()
{
  return sub_2322C(&qword_18D218, type metadata accessor for WellnessMedicationDialogObject, (uint64_t)&unk_13B4B8);
}

uint64_t sub_796EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_494C(&qword_189D00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_79734(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_494C(&qword_189D00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_7977C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_494C(&qword_189D00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_797C4()
{
  unint64_t result = qword_18D228;
  if (!qword_18D228)
  {
    unint64_t result = swift_getWitnessTable(&unk_13B66C, &type metadata for WellnessMedicationDialogObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18D228);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for WellnessMedicationDialogObject.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 6) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for WellnessMedicationDialogObject.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(vsub_D878(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_D878(v0 + 4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_798D4 + 4 * byte_13B425[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_79908 + 4 * byte_13B420[v4]))();
}

uint64_t sub_79908(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_79910(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x79918LL);
  }
  return result;
}

uint64_t sub_79924(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x7992CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_79930(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_79938(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WellnessMedicationDialogObject.CodingKeys()
{
  return &type metadata for WellnessMedicationDialogObject.CodingKeys;
}

unint64_t sub_79958()
{
  unint64_t result = qword_18D238;
  if (!qword_18D238)
  {
    unint64_t result = swift_getWitnessTable(&unk_13B644, &type metadata for WellnessMedicationDialogObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18D238);
  }

  return result;
}

unint64_t sub_79998()
{
  unint64_t result = qword_18D240;
  if (!qword_18D240)
  {
    unint64_t result = swift_getWitnessTable(&unk_13B57C, &type metadata for WellnessMedicationDialogObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18D240);
  }

  return result;
}

unint64_t sub_799D8()
{
  unint64_t result = qword_18D248;
  if (!qword_18D248)
  {
    unint64_t result = swift_getWitnessTable(&unk_13B5A4, &type metadata for WellnessMedicationDialogObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18D248);
  }

  return result;
}

uint64_t sub_79A14(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(a1, a2, v2, v3);
}

uint64_t sub_79A2C(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_79A3C@<X0>(uint64_t a1@<X8>)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v2 + a1, 1LL, 1LL, v1);
}

uint64_t sub_79A50(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(v2, a2, 0LL, 0LL);
}

uint64_t sub_79A60@<X0>(uint64_t a1@<X8>, uint64_t a2, ...)
{
  return swift_beginAccess(v2 + a1, va, 33LL, 0LL);
}

uint64_t sub_79A78(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v2, a2, v3, v2);
}

uint64_t sub_79A98(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1LL, v1);
}

uint64_t sub_79AB4@<X0>(uint64_t a1@<X8>)
{
  return sub_59A88(v1 + a1);
}

void *sub_79ABC()
{
  uint64_t v2 = *(void **)(v1 - 88);
  v2[3] = v0;
  return sub_B76C(v2);
}

uint64_t sub_79AC8()
{
  return sub_79734(v1, v0);
}

uint64_t sub_79AD4(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 33LL, 0LL);
}

uint64_t sub_79AE0@<X0>(uint64_t a1@<X8>)
{
  return sub_7977C(v2, v1 + a1);
}

uint64_t sub_79AEC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_79AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_79B08()
{
  return (*(uint64_t (**)(uint64_t, void))(v0 + 8))(v1, *(void *)(v2 - 112));
}

uint64_t sub_79B18(uint64_t a1, ...)
{
  return swift_endAccess(va);
}

  ;
}

uint64_t sub_79B2C@<X0>(uint64_t a1@<X8>)
{
  return sub_59A88(v1 + a1);
}

uint64_t sub_79B34@<X0>(uint64_t a1@<X8>)
{
  return sub_7977C(v2, v1 + a1);
}

uint64_t sub_79B40(uint64_t a1)
{
  return sub_796EC(a1, v1);
}

uint64_t sub_79B48()
{
  return 0x656C756465686373LL;
}

uint64_t sub_79B5C()
{
  return 0x6874676E65727473LL;
}

uint64_t sub_79B70@<X0>(uint64_t a1@<X8>)
{
  return sub_7977C(v2, v1 + a1);
}

uint64_t LogBloodPressureFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LogBloodPressureFlow();
  sub_35A68(&qword_18D250, v5, (uint64_t (*)(uint64_t))type metadata accessor for LogBloodPressureFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v6);
}

uint64_t type metadata accessor for LogBloodPressureFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC18WellnessFlowPlugin20LogBloodPressureFlow);
}

uint64_t LogBloodPressureFlow.execute()(uint64_t a1)
{
  v2[151] = v1;
  v2[150] = a1;
  uint64_t v3 = type metadata accessor for Calendar(0LL);
  v2[152] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[153] = v4;
  v2[154] = sub_A5C0(v4);
  uint64_t v5 = sub_494C(&qword_189BA0);
  v2[155] = sub_D8CC(*(void *)(v5 - 8));
  v2[156] = sub_A5B8();
  uint64_t v6 = sub_494C(&qword_189CE8);
  v2[157] = sub_D8CC(*(void *)(v6 - 8));
  v2[158] = sub_A5B8();
  uint64_t v7 = type metadata accessor for Date(0LL);
  v2[159] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[160] = v8;
  v2[161] = sub_D8CC(v8);
  v2[162] = sub_A5B8();
  uint64_t v9 = type metadata accessor for CATOption(0LL);
  v2[163] = sub_A5C0(*(void *)(v9 - 8));
  sub_A964();
  return sub_A5D0();
}

void sub_79CD0()
{
  __asm { BR              X10 }

uint64_t sub_79D14()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to BloodPressurePersistor.isLoggingAuthorized()[1]);
  *(void *)(v0 + 1312) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_79F18;
  sub_7DE98();
  return BloodPressurePersistor.isLoggingAuthorized()();
}

uint64_t sub_79D50( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = sub_AA80();
  sub_A72C(v11);
  uint64_t v12 = sub_A9C8();
  uint64_t v13 = type metadata accessor for LogBloodPressurePromptStartegy();
  uint64_t v14 = swift_allocObject(v13, 224LL, 7LL);
  uint64_t v15 = sub_7D9B0((const void *)(v10 + 1032), v12, v14);
  swift_retain();
  static OutputPublisherFactory.makeOutputPublisherAsync()(&a9);
  uint64_t v16 = sub_494C(&qword_18D268);
  sub_A72C(v16);
  sub_35A68( &qword_18D270,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for LogBloodPressurePromptStartegy);
  uint64_t v18 = PromptForValueFlowAsync.init<A>(strategy:outputPublisher:)(v15, &a9, v13, v17);
  *(_BYTE *)(v9 + 272) = 2;
  *(void *)(v10 + 1192) = v18;
  sub_3586C(qword_18D278, &qword_18D268);
  swift_retain();
  static ExecuteResponse.ongoing<A>(next:childCompletion:)(v10 + 1192, sub_7DA24, v9, v16);
  sub_3652C();
  sub_37034();
  sub_36EBC();
  sub_7DE74();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_7DE98();
  return v19();
}

uint64_t sub_79F18()
{
  *(_BYTE *)(v1 + 134sub_D878(v0 + 4) = v0;
  sub_36900(v2);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_79F54()
{
  if ((*(_BYTE *)(v0 + 1344) & 1) == 0)
  {
    uint64_t v15 = *(void *)(v0 + 1304);
    uint64_t v16 = *(void *)(v0 + 1208);
    char v17 = *(_BYTE *)(v16 + 288);
    sub_A304(v16 + 56, v0 + 616);
    sub_A13C((_OWORD *)(v16 + 96), (_OWORD *)(v0 + 656));
    uint64_t v18 = sub_AA80();
    sub_A72C(v18);
    uint64_t v19 = sub_A9C8();
    *(void *)(v0 + 840) = v18;
    *(void *)(v0 + 848) = &protocol witness table for ResponseFactory;
    *(void *)(v0 + 816) = v19;
    type metadata accessor for WellnessCATsSimple(0LL);
    sub_7DF94();
    uint64_t v20 = sub_AAF8(v15);
    type metadata accessor for WellnessCATs(0LL);
    sub_7DF94();
    uint64_t v21 = sub_AAF0(v15);
    *(_BYTE *)(v0 + 608) = v17;
    *(void *)(v0 + 8sub_D7EC(v0 + 16, v0 + 56) = v20;
    *(void *)(v0 + 86sub_D878(v0 + 4) = v21;
    sub_A294();
    static ExecuteResponse.complete<A>(next:)(v0 + 608);
    sub_A2D0((void *)(v0 + 608));
LABEL_5:
    sub_7DE74();
    sub_A78C();
    sub_A67C();
    sub_A7C8();
    sub_A760();
    sub_A8EC();
    sub_A910();
    sub_A864();
    return sub_D8C4(*(uint64_t (**)(void))(v0 + 8));
  }

  uint64_t v1 = *(void *)(v0 + 1248);
  uint64_t v2 = *(void **)(v0 + 1208);
  uint64_t v3 = v2 + 2;
  uint64_t v4 = v2[5];
  uint64_t v5 = v2[6];
  uint64_t v6 = sub_500C(v2 + 2, v4);
  uint64_t v7 = *(void *)(v4 - 8);
  uint64_t v8 = sub_46524(*(void *)(v7 + 64));
  sub_DA14(v8, (uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  sub_24A50(v8, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  uint64_t v9 = type metadata accessor for DateInterval(0LL);
  int v10 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1LL, v9);
  uint64_t v11 = *(void *)(v0 + 1272);
  uint64_t v12 = *(void *)(v0 + 1264);
  uint64_t v13 = *(void *)(v0 + 1248);
  if (v10 == 1)
  {
    uint64_t v14 = sub_A760();
    sub_57F00(v14, &qword_189BA0);
    sub_7DF40();
LABEL_8:
    sub_279E0(*(void *)(v0 + 1264), &qword_189CE8);
    goto LABEL_9;
  }

  DateInterval.start.getter();
  sub_24A50(v13, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL));
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v12, 0LL, 1LL, v11);
  sub_A760();
  sub_7DE54();
  if (v23) {
    goto LABEL_8;
  }
  uint64_t v39 = *(void *)(v0 + 1296);
  uint64_t v40 = *(void *)(v0 + 1232);
  uint64_t v41 = *(void *)(v0 + 1224);
  uint64_t v42 = *(void *)(v0 + 1216);
  uint64_t v43 = sub_7DFC0(*(void *)(v0 + 1280));
  static Calendar.current.getter(v43);
  uint64_t v44 = Calendar.isDateInToday(_:)(v39);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
  if ((v44 & 1) == 0)
  {
    char v49 = (void *)(v0 + 312);
    uint64_t v50 = *(void *)(v0 + 1304);
    sub_7DEB4();
    sub_A304(v44 + 56, v0 + 352);
    sub_A13C((_OWORD *)(v44 + 96), (_OWORD *)(v0 + 392));
    uint64_t v51 = sub_AA80();
    sub_A72C(v51);
    uint64_t v52 = sub_A9C8();
    *(void *)(v0 + 576) = v51;
    sub_7DF74(v52, (uint64_t)&protocol witness table for ResponseFactory);
    sub_37504();
    sub_AAF8(v50);
    sub_A874();
    sub_37504();
    uint64_t v53 = sub_AAF0(v50);
    *(void *)(v0 + 592) = v51;
    *(void *)(v0 + 600) = v53;
LABEL_25:
    sub_20228();
    static ExecuteResponse.complete<A>(next:)(v49);
    sub_20100(v49);
    sub_75690(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
    goto LABEL_5;
  }

  sub_565A8(*(void *)(v0 + 1280));
LABEL_9:
  uint64_t v24 = *(void *)(v0 + 1240);
  uint64_t v25 = v2[5];
  uint64_t v26 = v2[6];
  uint64_t v27 = sub_500C(v3, v25);
  uint64_t v7 = *(void *)(v25 - 8);
  uint64_t v28 = sub_46524(*(void *)(v7 + 64));
  (*(void (**)(uint64_t, void *, uint64_t))(v7 + 16))(v28, v27, v25);
  (*(void (**)(uint64_t, uint64_t))(v26 + 32))(v25, v26);
  sub_41BBC(v28, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  int v29 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v24, 1LL, v9);
  uint64_t v30 = *(void *)(v0 + 1272);
  uint64_t v31 = *(void *)(v0 + 1256);
  uint64_t v32 = *(void *)(v0 + 1240);
  if (v29 == 1)
  {
    uint64_t v33 = sub_A760();
    sub_57F00(v33, &qword_189BA0);
    sub_7DF40();
LABEL_13:
    sub_279E0(*(void *)(v0 + 1256), &qword_189CE8);
    goto LABEL_14;
  }

  DateInterval.end.getter();
  sub_24A50(v32, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL));
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v31, 0LL, 1LL, v30);
  sub_A760();
  sub_7DE54();
  if (v23) {
    goto LABEL_13;
  }
  uint64_t v45 = *(void *)(v0 + 1288);
  uint64_t v46 = *(void *)(v0 + 1224);
  uint64_t v47 = sub_7DFC0(*(void *)(v0 + 1280));
  static Calendar.current.getter(v47);
  uint64_t v48 = Calendar.isDateInToday(_:)(v45);
  sub_75690(*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8));
  if ((v48 & 1) == 0)
  {
    char v49 = (void *)(v0 + 16);
    uint64_t v54 = *(void *)(v0 + 1304);
    sub_7DEB4();
    sub_A304(v48 + 56, v0 + 56);
    sub_A13C((_OWORD *)(v48 + 96), (_OWORD *)(v0 + 96));
    uint64_t v55 = sub_AA80();
    sub_A72C(v55);
    uint64_t v56 = sub_A9C8();
    *(void *)(v0 + 280) = v55;
    *(void *)(v0 + 288) = &protocol witness table for ResponseFactory;
    *(void *)(v0 + 2sub_D7EC(v0 + 16, v0 + 56) = v56;
    type metadata accessor for WellnessLoggingCATsSimple(0LL);
    sub_37504();
    sub_AAF8(v54);
    sub_A874();
    sub_37504();
    uint64_t v57 = sub_AAF0(v54);
    *(void *)(v0 + 296) = v55;
    *(void *)(v0 + 30sub_D878(v0 + 4) = v57;
    goto LABEL_25;
  }

  sub_565A8(*(void *)(v0 + 1280));
LABEL_14:
  uint64_t v34 = *(void *)(v0 + 1208);
  sub_7B150();
  [*(id *)(v34 + 264) systolic];
  if (v35 == 0.0 && ([*(id *)(v34 + 264) diastolic], v36 == 0.0))
  {
    *(_BYTE *)(*(void *)(v0 + 1208) + 272LL) = 1;
    uint64_t v37 = (void *)swift_task_alloc(dword_18D25C);
    *(void *)(v0 + 1328) = v37;
  }

  else
  {
    *(_BYTE *)(*(void *)(v0 + 1208) + 272LL) = 3;
    uint64_t v37 = (void *)swift_task_alloc(dword_18D25C);
    *(void *)(v0 + 1320) = v37;
  }

  uint64_t v38 = sub_7DFD4(v37);
  return LogBloodPressureFlow.execute()(v38);
}

uint64_t sub_7A4A8()
{
  uint64_t v2 = *v0;
  sub_56254(*(void *)(v1 + 1320), v3);
  sub_7DDFC();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  return sub_61844(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_7A504()
{
  uint64_t v2 = *v0;
  sub_56254(*(void *)(v1 + 1328), v3);
  sub_7DDFC();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  return sub_61844(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_7A560()
{
  uint64_t v2 = *v0;
  sub_56254(*(void *)(v1 + 1336), v3);
  sub_7DDFC();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  return sub_61844(*(uint64_t (**)(void))(v2 + 8));
}

void sub_7A5BC(unint64_t a1)
{
  uint64_t v2 = sub_494C(&qword_18D450);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_3751C();
  uint64_t v65 = v4;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (double *)((char *)&v61 - v7);
  __chkstk_darwin(v6);
  int v10 = (char *)&v61 - v9;
  uint64_t v11 = sub_D984();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_3751C();
  uint64_t v64 = v13;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v67 = (uint64_t)&v61 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v61 - v18;
  uint64_t v20 = Logger.wellness.unsafeMutableAddressor(v17);
  sub_A5DC(v20, (uint64_t)v77);
  int v69 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  uint64_t v70 = v20;
  sub_DA14((uint64_t)v19, v20, v69);
  uint64_t v71 = v3;
  uint64_t v72 = (char *)a1;
  uint64_t v68 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
  v68(v10, a1, v2);
  uint64_t v21 = (os_log_s *)sub_23374();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  char v23 = "nessFlowPlugin  PROJECT:SiriWellness-\n";
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v24 = sub_A5E8(12LL);
    uint64_t v63 = v12;
    uint64_t v25 = (uint8_t *)v24;
    uint64_t v26 = sub_A5E8(32LL);
    uint64_t v66 = v11;
    uint64_t v27 = v26;
    v76[0] = v26;
    *(_DWORD *)uint64_t v25 = 136315138;
    char v23 = (char *)(v25 + 12);
    uint64_t v62 = v25 + 4;
    sub_3586C(&qword_18D458, &qword_18D450);
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter(v2, v28);
    a1 = v30;
    uint64_t v75 = sub_39178(v29, v30, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v62, v25 + 12);
    sub_249D4();
    sub_7DF18();
    sub_DA24(&dword_0, v21, v22, "Received response from PromptForValueFlowAsync: %s", v25);
    sub_A81C(v27);
    uint64_t v31 = v27;
    uint64_t v11 = v66;
    sub_5050(v31);
    sub_5050((uint64_t)v25);

    uint64_t v32 = *(void (**)(char *, uint64_t))(v63 + 8);
  }

  else
  {
    sub_7DF18();

    uint64_t v32 = *(void (**)(char *, uint64_t))(v12 + 8);
  }

  v32(v19, v11);
  uint64_t v33 = v72;
  uint64_t v34 = (uint64_t (*)(uint64_t, char *, uint64_t))v68;
  v68((char *)v8, (unint64_t)v72, v2);
  if ((*(unsigned int (**)(double *, uint64_t))(a1 + 88))(v8, v2) == enum case for PromptResult.answered<A>(_:))
  {
    (*(void (**)(double *, uint64_t))(a1 + 96))(v8, v2);
    double v36 = *v8;
    double v35 = v8[1];
    uint64_t v37 = v70;
    sub_A5DC(v70, (uint64_t)v76);
    uint64_t v38 = v67;
    sub_7DFB4(v67, v37);
    uint64_t v39 = v65;
    uint64_t v40 = v34(v65, v33, v2);
    uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v42 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v44 = sub_A5E8(32LL);
      uint64_t v66 = v11;
      uint64_t v45 = v44;
      uint64_t v75 = v44;
      uint64_t v72 = v23;
      *(_DWORD *)uint64_t v43 = 136315138;
      sub_3586C(&qword_18D458, &qword_18D450);
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter(v2, v46);
      uint64_t v74 = sub_39178(v47, v48, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v43 + 4, v43 + 12);
      sub_249D4();
      ((void (*)(uint64_t, uint64_t))v72)(v39, v2);
      sub_DA24(&dword_0, v41, v42, "PromptForValueFlowAsync returned: %s", v43);
      sub_A81C(v45);
      sub_5050(v45);
      sub_5050((uint64_t)v43);

      uint64_t v50 = v66;
      uint64_t v49 = v67;
    }

    else
    {
      sub_7DFA8();

      uint64_t v49 = v38;
      uint64_t v50 = v11;
    }

    v32((char *)v49, v50);
    uint64_t v60 = v73;
    [*(id *)(v73 + 264) setSystolic:v36];
    [*(id *)(v60 + 264) setDiastolic:v35];
    char v59 = 3;
  }

  else
  {
    sub_7DFA8();
    uint64_t v51 = v70;
    sub_A5DC(v70, (uint64_t)v76);
    uint64_t v52 = v64;
    uint64_t v53 = sub_7DFB4(v64, v51);
    uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = v11;
      uint64_t v57 = (uint8_t *)sub_A5E8(2LL);
      *(_WORD *)uint64_t v57 = 0;
      _os_log_impl( &dword_0,  v54,  v55,  "PromptForValueFlowAsync did not return the needed values, erroring out",  v57,  2u);
      uint64_t v58 = (uint64_t)v57;
      uint64_t v11 = v56;
      sub_5050(v58);
    }

    v32((char *)v52, v11);
    char v59 = 4;
  }

  *(_BYTE *)(v73 + 272) = v59;
  sub_A744();
}

uint64_t sub_7AAC8(uint64_t a1)
{
  v2[91] = v1;
  v2[90] = a1;
  uint64_t v3 = type metadata accessor for CATOption(0LL);
  v2[92] = sub_A5C0(*(void *)(v3 - 8));
  uint64_t v4 = sub_D984();
  v2[93] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[94] = v5;
  v2[95] = sub_D8CC(v5);
  v2[96] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_7AB2C(uint64_t a1)
{
  uint64_t v2 = v1[96];
  uint64_t v3 = v1[94];
  uint64_t v4 = v1[91];
  uint64_t v5 = Logger.wellness.unsafeMutableAddressor(a1);
  v1[97] = v5;
  sub_A5DC(v5, (uint64_t)(v1 + 81));
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v1[98] = v6;
  sub_DA14(v2, v5, v6);
  swift_retain_n(v4, 2LL);
  sub_23374();
  os_log_type_t v7 = sub_AB70();
  if (os_log_type_enabled((os_log_t)(v1 + 81), v7))
  {
    uint64_t v8 = v1[91];
    uint64_t v9 = (uint8_t *)sub_A5E8(12LL);
    int v10 = (void *)sub_A5E8(8LL);
    *(_DWORD *)uint64_t v9 = 138412290;
    uint64_t v11 = *(void **)(v8 + 264);
    v1[89] = v11;
    id v12 = v11;
    sub_A738((uint64_t)(v1 + 89), (uint64_t)(v1 + 90));
    *int v10 = v11;
    swift_release_n(v8, 2LL);
    sub_DA24(&dword_0, (os_log_s *)(v1 + 81), v7, "Executing intent: %@", v9);
    sub_494C(&qword_189CB8);
    sub_A81C((uint64_t)v10);
    sub_5050((uint64_t)v10);
    sub_5050((uint64_t)v9);
  }

  else
  {
    swift_release_n(v1[91], 2LL);
  }

  uint64_t v13 = v1[96];
  uint64_t v14 = v1[93];
  uint64_t v15 = v1[91];
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v1[94] + 8LL);
  v1[99] = v16;
  v16(v13, v14);
  uint64_t v17 = *(void **)(v15 + 256);
  v1[100] = v17;
  uint64_t v18 = *(void **)(v15 + 264);
  v1[101] = v18;
  v1[7] = v1 + 87;
  v1[2] = v1;
  v1[3] = sub_7AD3C;
  v1[80] = swift_continuation_init(v1 + 2, 0LL);
  v1[76] = _NSConcreteStackBlock;
  v1[77] = 0x40000000LL;
  v1[78] = sub_7ED0;
  v1[79] = &unk_17DF38;
  swift_unknownObjectRetain(v17);
  [v17 handleLogBloodPressure:v18 completion:v1 + 76];
  sub_371E0();
  return swift_continuation_await(v19);
}

uint64_t sub_7AD3C()
{
  return sub_A5D0();
}

uint64_t sub_7AD7C()
{
  uint64_t v1 = (void *)(v0 + 672);
  uint64_t v2 = *(void **)(v0 + 808);
  uint64_t v3 = *(void *)(v0 + 800);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 784);
  uint64_t v5 = *(void *)(v0 + 776);
  uint64_t v6 = *(void *)(v0 + 760);
  uint64_t v7 = *(void *)(v0 + 744);
  uint64_t v8 = *(void **)(v0 + 696);
  *(void *)(v0 + 816) = v8;
  swift_unknownObjectRelease(v3);

  sub_A5DC(v5, v0 + 672);
  v4(v6, v5, v7);
  uint64_t v9 = v8;
  sub_A86C();
  os_log_type_t v10 = sub_AB70();
  if (sub_A634(v10))
  {
    uint64_t v11 = (uint8_t *)sub_A5E8(12LL);
    id v12 = (void *)sub_A5E8(8LL);
    *(_DWORD *)uint64_t v11 = 138412290;
    *(void *)(v0 + 70sub_D878(v0 + 4) = v9;
    uint64_t v13 = v9;
    sub_A738(v0 + 704, v0 + 712);
    *id v12 = v9;

    sub_DA24(&dword_0, (os_log_s *)(v0 + 672), (os_log_type_t)v7, "Received intent response: %@", v11);
    sub_494C(&qword_189CB8);
    sub_A81C((uint64_t)v12);
    sub_5050((uint64_t)v12);
    sub_5050((uint64_t)v11);
  }

  else
  {

    uint64_t v1 = v9;
  }

  uint64_t v14 = sub_36D90();
  uint64_t v15 = (*(uint64_t (**)(uint64_t))((char *)&stru_20.maxprot + (swift_isaMask & *v9)))(v14);
  if (v15 != 4)
  {
    if (v15 == 102)
    {
      uint64_t v25 = *(void *)(v0 + 736);
      uint64_t v26 = *(void *)(v0 + 728);
      char v27 = *(_BYTE *)(v26 + 288);
      sub_A304(v26 + 56, v0 + 512);
      uint64_t v28 = sub_AA80();
      sub_A72C(v28);
      uint64_t v29 = sub_A9C8();
      *(void *)(v0 + 576) = v28;
      sub_7DF74(v29, (uint64_t)&protocol witness table for ResponseFactory);
      sub_A768();
      sub_AAF8(v25);
      sub_A874();
      sub_A768();
      uint64_t v30 = sub_AAF0(v25);
      *(_BYTE *)(v0 + 50sub_D878(v0 + 4) = v27;
      *(void *)(v0 + 592) = v28;
      *(void *)(v0 + 600) = v30;
      sub_7DCBC();
      sub_AC08();

      sub_7DCF8(v0 + 504);
    }

    else if (v15 == 101)
    {
      uint64_t v16 = *(void *)(v0 + 736);
      uint64_t v17 = *(void *)(v0 + 728);
      char v18 = *(_BYTE *)(v17 + 288);
      sub_A304(v17 + 56, v0 + 88);
      sub_A13C((_OWORD *)(v17 + 96), (_OWORD *)(v0 + 128));
      uint64_t v19 = sub_AA80();
      sub_A72C(v19);
      uint64_t v20 = sub_A9C8();
      *(void *)(v0 + 312) = v19;
      *(void *)(v0 + 320) = &protocol witness table for ResponseFactory;
      *(void *)(v0 + 288) = v20;
      type metadata accessor for WellnessCATsSimple(0LL);
      sub_A768();
      sub_AAF8(v16);
      sub_A874();
      sub_A768();
      uint64_t v21 = sub_AAF0(v16);
      *(_BYTE *)(v0 + 80) = v18;
      *(void *)(v0 + 328) = v19;
      *(void *)(v0 + 336) = v21;
      sub_A294();
      sub_AC08();

      sub_A2D0((void *)(v0 + 80));
    }

    else
    {
      sub_7DFCC((_OWORD *)(*(void *)(v0 + 728) + 96LL));
      sub_A178();
      static ExecuteResponse.complete<A>(next:)(v0 + 344);

      sub_36DD8();
    }

    sub_7DF64();
    sub_A78C();
    sub_A67C();
    sub_371E0();
    __asm { BR              X0 }
  }

  os_log_type_t v22 = (void *)swift_task_alloc(dword_18D2BC);
  *(void *)(v0 + 82sub_D878(v0 + 4) = v22;
  *os_log_type_t v22 = v0;
  v22[1] = sub_7B0C8;
  sub_371E0();
  return sub_7B4B4(v23);
}

uint64_t sub_7B0C8()
{
  *(void *)(v1 + 832) = v0;
  sub_36900(v2);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_7B104()
{
  uint64_t v1 = *(void **)(v0 + 816);
  static ExecuteResponse.complete(next:)(*(void *)(v0 + 832));
  sub_3652C();

  sub_7DF64();
  sub_A78C();
  sub_A67C();
  return sub_D8C4(*(uint64_t (**)(void))(v0 + 8));
}

void sub_7B150()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_D984();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_6D44();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = v0 + 2;
  uint64_t v9 = v0[5];
  uint64_t v8 = v0[6];
  os_log_type_t v10 = sub_500C(v0 + 2, v9);
  uint64_t v11 = *(void *)(v9 - 8);
  __chkstk_darwin(v10);
  sub_6D44();
  uint64_t v14 = v13 - v12;
  (*(void (**)(uint64_t))(v11 + 16))(v13 - v12);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 56))(v9, v8);
  sub_41BBC(v14, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  if ((unint64_t)v15 >> 62)
  {
    if (v15 < 0) {
      uint64_t v48 = v15;
    }
    else {
      uint64_t v48 = v15 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v15);
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v48);
    sub_36C34();
  }

  else
  {
    uint64_t v16 = *(void *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFF8LL));
  }

  if (v16 < 2) {
    goto LABEL_10;
  }
  unint64_t v17 = v15 & 0xC000000000000001LL;
  sub_398E0(0LL, (v15 & 0xC000000000000001LL) == 0, v15);
  uint64_t v18 = (v15 & 0xC000000000000001LL) != 0 ? specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v15) : swift_retain();
  uint64_t v19 = dispatch thunk of UsoEntity_common_MeasurementComponent.value.getter(v18);
  uint64_t v20 = sub_3652C();
  if (!v19
    || (double v21 = COERCE_DOUBLE(UsoEntity_common_Number.asDouble.getter(v20)), v23 = v22, swift_release(), (v23 & 1) != 0))
  {
LABEL_10:
    uint64_t v24 = sub_36C34();
  }

  else
  {
    sub_398E0(1LL, v17 == 0, v15);
    if (v17) {
      specialized _ArrayBuffer._getElementSlowPath(_:)(1LL, v15);
    }
    else {
      swift_retain();
    }
    uint64_t v28 = sub_36C34();
    uint64_t v29 = dispatch thunk of UsoEntity_common_MeasurementComponent.value.getter(v28);
    uint64_t v24 = sub_3652C();
    if (v29)
    {
      double v30 = COERCE_DOUBLE(UsoEntity_common_Number.asDouble.getter(v24));
      char v32 = v31;
      uint64_t v24 = sub_36EBC();
      if ((v32 & 1) == 0)
      {
        [(id)v1[33] setSystolic:v21];
        [(id)v1[33] setDiastolic:v30];
        uint64_t v33 = (void *)v1[33];
        uint64_t v34 = v1[5];
        uint64_t v35 = v1[6];
        double v36 = sub_500C(v7, v34);
        uint64_t v37 = *(void *)(v34 - 8);
        __chkstk_darwin(v36);
        sub_6D44();
        uint64_t v40 = v39 - v38;
        sub_DA14(v39 - v38, v41, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 16));
        os_log_type_t v42 = *(uint64_t (**)(uint64_t, uint64_t))(v35 + 48);
        id v43 = v33;
        unsigned __int8 v44 = v42(v34, v35);
        sub_24A50(v40, *(uint64_t (**)(uint64_t, uint64_t))(v37 + 8));
        if (v44 == 61)
        {
          NSString v45 = 0LL;
        }

        else
        {
          sub_375B4(v44);
          uint64_t v47 = v46;
          NSString v45 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v47);
        }

        [v43 setUnit:v45];

        goto LABEL_14;
      }
    }
  }

  uint64_t v25 = (os_log_s *)Logger.wellness.unsafeMutableAddressor(v24);
  sub_A5DC((uint64_t)v25, (uint64_t)v49);
  (*(void (**)(uint64_t, os_log_s *, uint64_t))(v3 + 16))(v6, v25, v2);
  sub_A86C();
  os_log_type_t v26 = sub_A898();
  if (os_log_type_enabled(v25, v26))
  {
    char v27 = (uint8_t *)sub_A5E8(2LL);
    *(_WORD *)char v27 = 0;
    _os_log_impl( &dword_0,  v25,  v26,  "Failed to populate LogBloodPressureIntent: missing systolic/diastolic values",  v27,  2u);
    sub_5050((uint64_t)v27);
  }

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
LABEL_14:
  sub_A744();
}

uint64_t sub_7B4B4(uint64_t a1)
{
  v2[115] = v1;
  v2[114] = a1;
  uint64_t v3 = type metadata accessor for DialogPhase(0LL);
  v2[116] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[117] = v4;
  v2[118] = sub_D8CC(v4);
  v2[119] = sub_A5B8();
  uint64_t v5 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[120] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[121] = v6;
  v2[122] = sub_A5C0(v6);
  uint64_t v7 = sub_494C(&qword_189D00);
  v2[123] = sub_A5C0(*(void *)(v7 - 8));
  uint64_t v8 = type metadata accessor for BloodPressureLogModel(0LL);
  v2[124] = v8;
  v2[125] = sub_D8CC(*(void *)(v8 - 8));
  v2[126] = sub_A5B8();
  v2[127] = sub_A5B8();
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  v2[128] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[129] = v10;
  v2[130] = sub_A5C0(v10);
  uint64_t v11 = sub_D984();
  v2[131] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[132] = v12;
  v2[133] = sub_D8CC(v12);
  v2[134] = sub_A5B8();
  v2[135] = sub_A5B8();
  v2[136] = sub_A5B8();
  v2[137] = sub_A5B8();
  uint64_t v13 = type metadata accessor for SnippetHeaderModel(0LL);
  v2[138] = v13;
  v2[139] = sub_D8CC(*(void *)(v13 - 8));
  v2[140] = sub_A5B8();
  v2[141] = sub_A5B8();
  uint64_t v14 = type metadata accessor for URL(0LL);
  v2[142] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v2[143] = v15;
  v2[144] = sub_D8CC(v15);
  v2[145] = sub_A5B8();
  uint64_t v16 = sub_494C(&qword_189CF8);
  v2[146] = sub_D8CC(*(void *)(v16 - 8));
  v2[147] = sub_A5B8();
  uint64_t v17 = sub_494C(&qword_189CE8);
  v2[148] = sub_D8CC(*(void *)(v17 - 8));
  v2[149] = sub_A5B8();
  v2[150] = sub_A5B8();
  v2[151] = sub_A5B8();
  v2[152] = sub_A5B8();
  uint64_t v18 = type metadata accessor for Date(0LL);
  v2[153] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v2[154] = v19;
  v2[155] = sub_D8CC(v19);
  v2[156] = sub_A5B8();
  v2[157] = sub_A5B8();
  v2[158] = sub_A5B8();
  v2[159] = sub_A5B8();
  uint64_t v20 = sub_494C(&qword_189BA0);
  v2[160] = sub_D8CC(*(void *)(v20 - 8));
  v2[161] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_7B6B8()
{
  uint64_t v1 = *(void *)(v0 + 1288);
  uint64_t v2 = *(void **)(v0 + 912);
  type metadata accessor for DateInterval(0LL);
  sub_7DF0C(v1, 1LL);
  id v3 = [v2 sampleStart];
  if (!v3)
  {
    sub_6D78(*(void *)(v0 + 1216), v4, v5, *(void *)(v0 + 1224));
    goto LABEL_7;
  }

  uint64_t v6 = v3;
  uint64_t v7 = *(void *)(v0 + 1232);
  uint64_t v8 = *(void *)(v0 + 1224);
  uint64_t v9 = *(void *)(v0 + 1216);
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v3);

  uint64_t v10 = *(void (**)(void, void, void))(v7 + 32);
  sub_7DF84();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v9, 0LL, 1LL, v8);
  sub_7DE54();
  if (v11)
  {
LABEL_7:
    uint64_t v28 = *(void *)(v0 + 1216);
    goto LABEL_10;
  }

  uint64_t v12 = *(void **)(v0 + 912);
  v10(*(void *)(v0 + 1272), *(void *)(v0 + 1216), *(void *)(v0 + 1224));
  id v13 = [v12 sampleEnd];
  if (v13)
  {
    uint64_t v16 = v13;
    uint64_t v17 = *(void *)(v0 + 1224);
    uint64_t v18 = *(void *)(v0 + 1208);
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v13);

    sub_7DF84();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v18, 0LL, 1LL, v17);
    sub_7DE54();
    if (!v11)
    {
      uint64_t v43 = *(void *)(v0 + 1280);
      uint64_t v44 = *(void *)(v0 + 1288);
      uint64_t v19 = *(void *)(v0 + 1272);
      uint64_t v20 = *(void *)(v0 + 1264);
      uint64_t v21 = *(void *)(v0 + 1256);
      uint64_t v22 = *(void *)(v0 + 1248);
      uint64_t v23 = *(void *)(v0 + 1232);
      uint64_t v24 = *(void *)(v0 + 1224);
      sub_7DFA0(v21, *(void *)(v0 + 1208));
      sub_7DFA0(v20, v19);
      sub_7DFA0(v22, v21);
      DateInterval.init(start:end:)(v20, v22);
      uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
      v25(v21, v24);
      v25(v19, v24);
      uint64_t v26 = sub_7DFE8();
      sub_279E0(v26, v27);
      sub_7DF0C(v43, 0LL);
      sub_7DC80(v43, v44, &qword_189BA0);
      goto LABEL_11;
    }
  }

  else
  {
    sub_6D78(*(void *)(v0 + 1208), v14, v15, *(void *)(v0 + 1224));
  }

  uint64_t v29 = *(void *)(v0 + 1208);
  sub_565A8(*(void *)(v0 + 1232));
  uint64_t v28 = v29;
LABEL_10:
  sub_279E0(v28, &qword_189CE8);
LABEL_11:
  uint64_t v30 = *(void *)(v0 + 1288);
  uint64_t v31 = *(unsigned __int8 *)(*(void *)(v0 + 920) + 288LL);
  *(_BYTE *)(v0 + 1440) = v31;
  sub_F4F10(v31, v30);
  *(void *)(v0 + 680) = &type metadata for WellnessFeatureFlagsKey;
  *(void *)(v0 + 688) = sub_354B0();
  *(_BYTE *)(v0 + 6sub_D7EC(v0 + 16, v0 + 56) = 4;
  char v32 = isFeatureEnabled(_:)(v0 + 656);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 656));
  if ((v32 & 1) != 0)
  {
    uint64_t v33 = sub_27CC8(v31);
    uint64_t v35 = v34;
    *(void *)(v0 + 1296) = v34;
    double v36 = (void *)swift_task_alloc(dword_18B704);
    *(void *)(v0 + 130sub_D878(v0 + 4) = v36;
    *double v36 = v0;
    v36[1] = sub_7BA0C;
    return sub_5E5E4(v33, v35);
  }

  else
  {
    uint64_t v38 = *(void *)(v0 + 1176);
    uint64_t v39 = *(void *)(v0 + 920);
    uint64_t v40 = *(void *)(v0 + 912);
    sub_A304(v39 + 176, v0 + 616);
    sub_500C((void *)(v0 + 616), *(void *)(v0 + 640));
    uint64_t v41 = (void *)swift_task_alloc(48LL);
    *(void *)(v0 + 1416) = v41;
    v41[2] = v40;
    v41[3] = v39;
    v41[4] = v38;
    os_log_type_t v42 = (void *)swift_task_alloc(dword_18EC04);
    *(void *)(v0 + 142sub_D878(v0 + 4) = v42;
    *os_log_type_t v42 = v0;
    v42[1] = sub_7CE78;
    return sub_E09E0((uint64_t)sub_7DBBC, (uint64_t)v41);
  }

uint64_t sub_7BA0C()
{
  *(void *)(v1 + 1312) = v0;
  *(void *)(v1 + 1320) = v2;
  sub_36900(v3);
  sub_249D4();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_7BA54()
{
  uint64_t v388 = v1;
  uint64_t v389 = v2;
  uint64_t v387 = v0;
  uint64_t v3 = *(void *)(v0 + 1168);
  uint64_t v4 = *(void *)(v0 + 1136);
  sub_35468(*(void *)(v0 + 1176), v3);
  int v5 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v3, 1LL, v4);
  uint64_t v6 = *(void *)(v0 + 1320);
  if (v5 == 1)
  {
    uint64_t v7 = sub_2A184();
    uint64_t v8 = &qword_189CF8;
LABEL_13:
    sub_57F00(v7, v8);
    goto LABEL_14;
  }

  sub_73378(*(void *)(v0 + 1160), *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v0 + 1144) + 32LL));
  if (!v6)
  {
    uint64_t v48 = sub_7DF2C();
LABEL_14:
    uint64_t v50 = *(void *)(v0 + 1064);
    uint64_t v51 = *(void *)(v0 + 1056);
    uint64_t v52 = Logger.wellness.unsafeMutableAddressor(v48);
    sub_A5DC(v52, v0 + 808);
    sub_DA14(v50, v52, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 16));
    sub_23374();
    os_log_type_t v53 = sub_A898();
    if (sub_A988(v53))
    {
      uint64_t v54 = (_WORD *)sub_A5E8(2LL);
      *uint64_t v54 = 0;
      sub_A940(&dword_0, v55, v56, "#LogBloodPressureFlow: Invalid link or labels or response unit/start time");
      sub_5050((uint64_t)v54);
    }

    uint64_t v57 = *(void *)(v0 + 1288);
    uint64_t v58 = *(void *)(v0 + 1176);
    uint64_t v59 = *(void *)(v0 + 1064);
    uint64_t v60 = *(void *)(v0 + 1056);
    uint64_t v61 = *(void *)(v0 + 920);

    sub_41BBC(v59, *(uint64_t (**)(uint64_t, uint64_t))(v60 + 8));
    sub_A13C((_OWORD *)(v61 + 96), (_OWORD *)(v0 + 176));
    sub_A178();
    uint64_t v385 = Flow.eraseToAnyFlow()(&type metadata for GenericErrorFlow);
    sub_A1B4((void *)(v0 + 176));
    sub_279E0(v57, &qword_189BA0);
    sub_279E0(v58, &qword_189CF8);
    uint64_t v62 = sub_7DE20();
    uint64_t v206 = v64;
    uint64_t v223 = v63;
    uint64_t v240 = *(void *)(v0 + 1176);
    uint64_t v256 = *(void *)(v0 + 1168);
    uint64_t v271 = *(void *)(v0 + 1160);
    uint64_t v285 = *(void *)(v0 + 1152);
    uint64_t v298 = *(void *)(v0 + 1128);
    uint64_t v310 = *(void *)(v0 + 1120);
    uint64_t v321 = *(void *)(v0 + 1112);
    uint64_t v331 = *(void *)(v0 + 1096);
    uint64_t v340 = *(void *)(v0 + 1088);
    uint64_t v348 = *(void *)(v0 + 1080);
    uint64_t v355 = *(void *)(v0 + 1072);
    uint64_t v361 = *(void *)(v0 + 1064);
    uint64_t v366 = *(void *)(v0 + 1040);
    uint64_t v370 = *(void *)(v0 + 1016);
    uint64_t v374 = *(void *)(v0 + 1008);
    uint64_t v378 = *(void *)(v0 + 1000);
    swift_task_dealloc(v62);
    sub_A864();
    sub_A85C();
    sub_A8F4();
    sub_A78C();
    sub_A67C();
    sub_A7C8();
    sub_A760();
    sub_A8EC();
    sub_A910();
    uint64_t v65 = swift_task_dealloc(v206);
    uint64_t v73 = sub_AAD8(v65, v66, v67, v68, v69, v70, v71, v72, v206, v223);
    uint64_t v81 = sub_A888(v73, v74, v75, v76, v77, v78, v79, v80, v207, v224, v240);
    uint64_t v89 = sub_A854(v81, v82, v83, v84, v85, v86, v87, v88, v208, v225, v241, v256);
    uint64_t v97 = sub_A84C(v89, v90, v91, v92, v93, v94, v95, v96, v209, v226, v242, v257, v271);
    uint64_t v105 = sub_A844(v97, v98, v99, v100, v101, v102, v103, v104, v210, v227, v243, v258, v272, v285);
    uint64_t v113 = sub_A83C(v105, v106, v107, v108, v109, v110, v111, v112, v211, v228, v244, v259, v273, v286, v298);
    uint64_t v121 = sub_A95C(v113, v114, v115, v116, v117, v118, v119, v120, v212, v229, v245, v260, v274, v287, v299, v310);
    uint64_t v129 = sub_A954( v121,  v122,  v123,  v124,  v125,  v126,  v127,  v128,  v213,  v230,  v246,  v261,  v275,  v288,  v300,  v311,  v321);
    uint64_t v137 = sub_A938( v129,  v130,  v131,  v132,  v133,  v134,  v135,  v136,  v214,  v231,  v247,  v262,  v276,  v289,  v301,  v312,  v322,  v331);
    uint64_t v145 = sub_A930( v137,  v138,  v139,  v140,  v141,  v142,  v143,  v144,  v215,  v232,  v248,  v263,  v277,  v290,  v302,  v313,  v323,  v332,  v340);
    uint64_t v153 = sub_A928( v145,  v146,  v147,  v148,  v149,  v150,  v151,  v152,  v216,  v233,  v249,  v264,  v278,  v291,  v303,  v314,  v324,  v333,  v341,  v348);
    uint64_t v161 = sub_A920( v153,  v154,  v155,  v156,  v157,  v158,  v159,  v160,  v217,  v234,  v250,  v265,  v279,  v292,  v304,  v315,  v325,  v334,  v342,  v349,  v355);
    uint64_t v169 = sub_36374( v161,  v162,  v163,  v164,  v165,  v166,  v167,  v168,  v218,  v235,  v251,  v266,  v280,  v293,  v305,  v316,  v326,  v335,  v343,  v350,  v356,  v361);
    uint64_t v177 = sub_3636C( v169,  v170,  v171,  v172,  v173,  v174,  v175,  v176,  v219,  v236,  v252,  v267,  v281,  v294,  v306,  v317,  v327,  v336,  v344,  v351,  v357,  v362,  v366);
    uint64_t v185 = sub_36364( v177,  v178,  v179,  v180,  v181,  v182,  v183,  v184,  v220,  v237,  v253,  v268,  v282,  v295,  v307,  v318,  v328,  v337,  v345,  v352,  v358,  v363,  v367,  v370);
    uint64_t v193 = sub_363F0( v185,  v186,  v187,  v188,  v189,  v190,  v191,  v192,  v221,  v238,  v254,  v269,  v283,  v296,  v308,  v319,  v329,  v338,  v346,  v353,  v359,  v364,  v368,  v371,  v374);
    sub_36430( v193,  v194,  v195,  v196,  v197,  v198,  v199,  v200,  v222,  v239,  v255,  v270,  v284,  v297,  v309,  v320,  v330,  v339,  v347,  v354,  v360,  v365,  v369,  v372,  v375,  v378);
    sub_366A8();
    sub_36814();
    sub_3680C();
    sub_36804();
    return sub_7DDE0(v385, *(uint64_t (**)(void))(v0 + 8));
  }

  uint64_t v9 = *(void *)(v0 + 1320);
  uint64_t v10 = sub_7D950(*(void **)(v0 + 912));
  if (!v11)
  {
    sub_7DF2C();
    uint64_t v48 = sub_36C34();
    goto LABEL_14;
  }

  uint64_t v12 = v10;
  uint64_t v13 = v11;
  id v14 = [*(id *)(v0 + 912) sampleStart];
  if (!v14)
  {
    sub_6D78(*(void *)(v0 + 1200), v15, v16, *(void *)(v0 + 1224));
    goto LABEL_12;
  }

  uint64_t v17 = v14;
  uint64_t v18 = *(void *)(v0 + 1264);
  uint64_t v19 = *(void *)(v0 + 1232);
  uint64_t v20 = *(void *)(v0 + 1224);
  uint64_t v21 = *(void *)(v0 + 1200);
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v14);

  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32);
  v22(v21, v18, v20);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v21, 0LL, 1LL, v20);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v21, 1LL, v20) == 1)
  {
LABEL_12:
    uint64_t v49 = *(void *)(v0 + 1144);
    sub_36C34();
    sub_2A184();
    uint64_t v7 = sub_75690(*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8));
    uint64_t v8 = &qword_189CE8;
    goto LABEL_13;
  }

  uint64_t v384 = v12;
  uint64_t v373 = *(void *)(v0 + 1312);
  uint64_t v23 = *(void *)(v0 + 1128);
  uint64_t v382 = *(void *)(v0 + 1120);
  uint64_t v24 = *(void *)(v0 + 1104);
  uint64_t v379 = *(void *)(v0 + 1096);
  uint64_t v376 = *(void *)(v0 + 1056);
  unsigned __int8 v25 = *(_BYTE *)(v0 + 1440);
  v22(*(void *)(v0 + 1240), *(void *)(v0 + 1200), *(void *)(v0 + 1224));
  uint64_t v26 = type metadata accessor for DialogCalendar.Builder(0LL);
  *(void *)(v0 + 1328) = v26;
  sub_A72C(v26);
  DialogCalendar.Builder.init()();
  double v27 = Date.timeIntervalSince1970.getter();
  dispatch thunk of DialogCalendar.Builder.withSecs(_:)(*(void *)&v27, 0LL);
  uint64_t v28 = swift_release();
  *(void *)(v0 + 1336) = dispatch thunk of DialogCalendar.Builder.build()(v28);
  sub_3652C();
  String.toSpeakableString.getter(v373, v9);
  sub_36C34();
  unint64_t v29 = sub_2A044(v25);
  unint64_t v31 = v30;
  uint64_t v32 = sub_27CC8(v25);
  uint64_t v33 = (unint64_t *)(v23 + *(int *)(v24 + 20));
  *uint64_t v33 = v29;
  v33[1] = v31;
  uint64_t v34 = (uint64_t *)(v23 + *(int *)(v24 + 24));
  *uint64_t v34 = v32;
  v34[1] = v35;
  double v36 = (os_log_s *)Logger.wellness.unsafeMutableAddressor(v32);
  *(void *)(v0 + 134sub_D878(v0 + 4) = v36;
  sub_A5DC((uint64_t)v36, v0 + 760);
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t))(v376 + 16);
  *(void *)(v0 + 1352) = v37;
  sub_73378(v379, v37);
  sub_7DBC8(v23, v382, type metadata accessor for SnippetHeaderModel);
  sub_A86C();
  os_log_type_t v38 = sub_AB70();
  BOOL v39 = os_log_type_enabled(v36, v38);
  uint64_t v40 = *(void *)(v0 + 1120);
  if (v39)
  {
    uint64_t v41 = *(void *)(v0 + 1112);
    uint64_t v377 = *(void *)(v0 + 1104);
    uint64_t v380 = *(void *)(v0 + 1056);
    uint64_t v381 = *(void *)(v0 + 1048);
    uint64_t v383 = *(void *)(v0 + 1096);
    os_log_type_t v42 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v43 = sub_A5E8(32LL);
    uint64_t v386 = v43;
    *(_DWORD *)os_log_type_t v42 = 136315138;
    sub_7DBC8(v40, v41, type metadata accessor for SnippetHeaderModel);
    uint64_t v44 = String.init<A>(describing:)(v41, v377);
    unint64_t v46 = v45;
    *(void *)(v0 + 90sub_D878(v0 + 4) = sub_39178(v44, v45, &v386);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 904, v0 + 912, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease(v46);
    sub_26F04(v40, type metadata accessor for SnippetHeaderModel);
    sub_DA24(&dword_0, v36, v38, "#LogBloodPressureFlow: Snippet header model %s", v42);
    sub_A81C(v43);
    sub_5050(v43);
    sub_5050((uint64_t)v42);

    uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v380 + 8);
    v47(v383, v381);
  }

  else
  {
    uint64_t v202 = *(void *)(v0 + 1096);
    uint64_t v203 = *(void *)(v0 + 1056);
    uint64_t v204 = *(void *)(v0 + 1048);
    sub_26F04(*(void *)(v0 + 1120), type metadata accessor for SnippetHeaderModel);

    uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v203 + 8);
    v47(v202, v204);
  }

  *(void *)(v0 + 1360) = v47;
  String.toSpeakableString.getter(v384, v13);
  sub_2A184();
  char v205 = (void *)swift_task_alloc(dword_18B6EC);
  *(void *)(v0 + 1368) = v205;
  *char v205 = v0;
  v205[1] = sub_7C098;
  return sub_5E408(0x646567676F6CLL, 0xE600000000000000LL);
}

uint64_t sub_7C098()
{
  *(void *)(v1 + 1376) = v0;
  *(void *)(v1 + 138sub_D878(v0 + 4) = v2;
  sub_36900(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_7C0D8()
{
  uint64_t v1 = v0[166];
  uint64_t v2 = (void *)v0[114];
  (*(void (**)(void, void, void))(v0[143] + 16LL))(v0[144], v0[145], v0[142]);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  DialogCalendar.Builder.init()();
  id v3 = [v2 sampleEnd];
  if (v3)
  {
    uint64_t v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v3);

    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v5 = 1LL;
  }

  uint64_t v6 = v0[153];
  uint64_t v7 = v0[149];
  uint64_t v8 = v0[148];
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v8, v5, 1LL, v6);
  sub_7DC80(v8, v7, &qword_189CE8);
  int v9 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v7, 1LL, v6);
  if (v9)
  {
    sub_279E0(v0[149], &qword_189CE8);
    double v10 = 0.0;
  }

  else
  {
    uint64_t v11 = v0[158];
    uint64_t v12 = v0[154];
    uint64_t v13 = v0[153];
    uint64_t v14 = v0[149];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v14, v13);
    sub_279E0(v14, &qword_189CE8);
    double v15 = Date.timeIntervalSince1970.getter();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    double v10 = v15;
  }

  uint64_t v16 = v0[173];
  uint64_t v17 = v0[172];
  uint64_t v18 = v0[168];
  uint64_t v19 = v0[141];
  uint64_t v20 = v0[139];
  uint64_t v57 = v0[144];
  uint64_t v58 = (os_log_s *)v0[136];
  uint64_t v59 = v0[131];
  uint64_t v21 = v0[127];
  uint64_t v60 = v0[126];
  uint64_t v61 = (void (*)(os_log_s *, uint64_t, uint64_t))v0[169];
  uint64_t v22 = (void *)v0[114];
  dispatch thunk of DialogCalendar.Builder.withSecs(_:)(*(void *)&v10, v9 != 0);
  uint64_t v23 = sub_37034();
  uint64_t v24 = dispatch thunk of DialogCalendar.Builder.build()(v23);
  sub_3652C();
  [v22 systolic];
  uint64_t v26 = v25;
  [v22 diastolic];
  uint64_t v28 = v27;
  if (v16) {
    uint64_t v29 = v17;
  }
  else {
    uint64_t v29 = 0x646567676F4CLL;
  }
  if (!v16) {
    uint64_t v16 = 0xE600000000000000LL;
  }
  sub_7DBC8(v19, v20, type metadata accessor for SnippetHeaderModel);
  uint64_t v30 = SpeakableString.print.getter();
  BloodPressureLogModel.init(url:date:dateLabel:systolic:diastolic:loggedLabel:snippetHeaderModel:unitLabel:)( v57,  v24,  0LL,  v29,  v16,  v20,  v30,  v21,  v26,  v28,  v31);
  sub_A5DC(v18, (uint64_t)(v0 + 92));
  v61(v58, v18, v59);
  sub_7DBC8(v21, v60, type metadata accessor for BloodPressureLogModel);
  Logger.logObject.getter(v32);
  os_log_type_t v33 = sub_AB70();
  BOOL v34 = sub_A634(v33);
  uint64_t v35 = (void (*)(uint64_t))v0[170];
  uint64_t v36 = v0[136];
  uint64_t v37 = v0[131];
  uint64_t v38 = v0[126];
  if (v34)
  {
    uint64_t v39 = v0[125];
    uint64_t v40 = v0[124];
    uint64_t v62 = (void (*)(uint64_t, uint64_t))v0[170];
    uint64_t v41 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v42 = sub_A5E8(32LL);
    uint64_t v63 = v42;
    *(_DWORD *)uint64_t v41 = 136315138;
    sub_7DBC8(v38, v39, type metadata accessor for BloodPressureLogModel);
    uint64_t v43 = String.init<A>(describing:)(v39, v40);
    unint64_t v45 = v44;
    v0[112] = sub_39178(v43, v44, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 113, v41 + 4, v41 + 12);
    swift_bridgeObjectRelease(v45);
    sub_26F04(v38, type metadata accessor for BloodPressureLogModel);
    sub_DA24(&dword_0, v58, (os_log_type_t)v16, "#LogBloodPressureFlow: Snippet model %s", v41);
    sub_A81C(v42);
    sub_5050(v42);
    sub_5050((uint64_t)v41);

    v62(v36, v37);
  }

  else
  {
    sub_26F04(v0[126], type metadata accessor for BloodPressureLogModel);

    uint64_t v46 = sub_7DFE8();
    v35(v46);
  }

  uint64_t v47 = v0[123];
  uint64_t v48 = (void *)v0[114];
  [v48 systolic];
  uint64_t v50 = v49;
  [v48 diastolic];
  uint64_t v52 = v51;
  uint64_t v53 = sub_7DFE8();
  v54(v53);
  sub_7DF0C(v47, 0LL);
  uint64_t v55 = (void *)swift_task_alloc(dword_190B74);
  v0[174] = v55;
  *uint64_t v55 = v0;
  v55[1] = sub_7C558;
  return sub_13033C(v50, 0, v52, 0, v0[123]);
}

uint64_t sub_7C558(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v2 + 1392LL);
  *(void *)(*(void *)v2 + 140Hasher.init(_seed:)(v1, 0LL) = a1;
  uint64_t v4 = sub_36900(v3);
  if (v1) {
    uint64_t v4 = swift_errorRelease(v1);
  }
  sub_36A94(v4, &qword_189D00);
  sub_A964();
  return sub_D954();
}

uint64_t sub_7C5DC()
{
  uint64_t v1 = (void *)v0[175];
  uint64_t v2 = (void (*)(uint64_t, os_log_s *, uint64_t))v0[169];
  uint64_t v3 = (os_log_s *)v0[168];
  uint64_t v4 = v0[135];
  uint64_t v5 = v0[131];
  sub_A5DC((uint64_t)v3, (uint64_t)(v0 + 98));
  v2(v4, v3, v5);
  id v6 = v1;
  sub_23374();
  os_log_type_t v7 = sub_AB70();
  BOOL v8 = os_log_type_enabled(v3, v7);
  int v9 = (void *)v0[175];
  if (v8)
  {
    double v10 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v39 = sub_A5E8(32LL);
    uint64_t v40 = v39;
    *(_DWORD *)double v10 = 136315138;
    id v11 = [v9 dialog];
    unint64_t v12 = sub_5EBA0();
    uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

    if ((unint64_t)v13 >> 62)
    {
      if (v13 < 0) {
        uint64_t v20 = v13;
      }
      else {
        uint64_t v20 = v13 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v13);
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v20);
      sub_DA1C();
      if (v14) {
        goto LABEL_4;
      }
    }

    else
    {
      uint64_t v14 = *(void *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFF8LL));
      if (v14)
      {
LABEL_4:
        sub_398E0(0LL, (v13 & 0xC000000000000001LL) == 0, v13);
        if ((v13 & 0xC000000000000001LL) != 0) {
          id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v13);
        }
        else {
          id v15 = *(id *)(v13 + 32);
        }
        uint64_t v16 = v15;
        sub_DA1C();
        id v17 = [v16 fullPrint];

        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
        uint64_t v14 = v19;

        goto LABEL_13;
      }
    }

    sub_DA1C();
    uint64_t v18 = 0LL;
LABEL_13:
    uint64_t v21 = (void *)v0[175];
    uint64_t v38 = (void (*)(uint64_t, uint64_t))v0[170];
    uint64_t v22 = v0[135];
    uint64_t v23 = v0[131];
    v0[107] = v18;
    v0[108] = v14;
    uint64_t v24 = sub_494C(&qword_18B170);
    uint64_t v25 = String.init<A>(describing:)(v0 + 107, v24);
    v0[111] = sub_39178(v25, v26, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 111, v0 + 112, v10 + 4, v10 + 12);
    sub_36C34();

    sub_DA24(&dword_0, v3, v7, "#GenerateLoggingResponseOutput: Snippet dialog is %s", v10);
    sub_A81C(v39);
    sub_5050(v39);
    sub_5050((uint64_t)v10);

    v38(v22, v23);
    goto LABEL_14;
  }

  sub_36D90();
LABEL_14:
  uint64_t v27 = type metadata accessor for WellnessSnippets(0LL);
  v0[75] = v27;
  sub_35A68((unint64_t *)&qword_18A468, 255LL, type metadata accessor for WellnessSnippets);
  v0[76] = v28;
  uint64_t v29 = sub_B76C(v0 + 72);
  uint64_t v30 = sub_7DFE8();
  sub_7DBC8(v30, v31, v32);
  swift_storeEnumTagMultiPayload(v29, v27, 2LL);
  os_log_type_t v33 = (void *)swift_task_alloc(dword_18B6FC);
  v0[176] = v33;
  *os_log_type_t v33 = v0;
  v33[1] = sub_7C90C;
  sub_7DE98();
  return sub_5E844(v34, v35, v36);
}

uint64_t sub_7C90C()
{
  uint64_t v3 = *v0;
  uint64_t v1 = (void *)(v3 + 576);
  sub_56254(*(void *)(v3 + 1408), &v3);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_7C95C()
{
  uint64_t v1 = *(void **)(v0 + 1400);
  uint64_t v319 = *(void *)(v0 + 1288);
  uint64_t v306 = *(void *)(v0 + 1232);
  uint64_t v311 = *(void *)(v0 + 1224);
  uint64_t v313 = *(void *)(v0 + 1240);
  uint64_t v321 = *(void *)(v0 + 1176);
  uint64_t v317 = *(void *)(v0 + 1160);
  uint64_t v309 = *(void *)(v0 + 1144);
  uint64_t v315 = *(void *)(v0 + 1136);
  uint64_t v297 = *(void *)(v0 + 1040);
  uint64_t v302 = *(void *)(v0 + 1128);
  uint64_t v2 = *(void *)(v0 + 1032);
  uint64_t v291 = *(void *)(v0 + 1024);
  uint64_t v3 = *(void *)(v0 + 1016);
  sub_A304(v0 + 536, v0 + 696);
  uint64_t v4 = swift_allocObject(&unk_17DF20, 56LL, 7LL);
  sub_20004((__int128 *)(v0 + 696), v4 + 16);
  static OutputPublisherFactory.makeOutputPublisherAsync()(v324);
  uint64_t v5 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  sub_A72C(v5);
  *(void *)(v0 + 872) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)(v324, &unk_18D448, v4);
  uint64_t v323 = Flow.eraseToAnyFlow()(v5);
  sub_36EBC();

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 536));
  sub_26F04(v3, type metadata accessor for BloodPressureLogModel);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v297, v291);
  sub_26F04(v302, type metadata accessor for SnippetHeaderModel);
  (*(void (**)(uint64_t, uint64_t))(v306 + 8))(v313, v311);
  (*(void (**)(uint64_t, uint64_t))(v309 + 8))(v317, v315);
  sub_279E0(v319, &qword_189BA0);
  sub_279E0(v321, &qword_189CF8);
  swift_release();
  uint64_t v6 = sub_7DE20();
  uint64_t v170 = v8;
  uint64_t v186 = v7;
  uint64_t v201 = *(void *)(v0 + 1176);
  uint64_t v215 = *(void *)(v0 + 1168);
  uint64_t v228 = *(void *)(v0 + 1160);
  uint64_t v240 = *(void *)(v0 + 1152);
  uint64_t v251 = *(void *)(v0 + 1128);
  uint64_t v261 = *(void *)(v0 + 1120);
  uint64_t v270 = *(void *)(v0 + 1112);
  uint64_t v278 = *(void *)(v0 + 1096);
  uint64_t v285 = *(void *)(v0 + 1088);
  uint64_t v292 = *(void *)(v0 + 1080);
  uint64_t v298 = *(void *)(v0 + 1072);
  uint64_t v303 = *(void *)(v0 + 1064);
  uint64_t v307 = *(void *)(v0 + 1040);
  uint64_t v310 = *(void *)(v0 + 1016);
  uint64_t v312 = *(void *)(v0 + 1008);
  uint64_t v314 = *(void *)(v0 + 1000);
  uint64_t v316 = *(void *)(v0 + 984);
  uint64_t v318 = *(void *)(v0 + 976);
  uint64_t v320 = *(void *)(v0 + 952);
  uint64_t v322 = *(void *)(v0 + 944);
  swift_task_dealloc(v6);
  sub_A864();
  sub_A85C();
  sub_A8F4();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  uint64_t v9 = sub_A910();
  uint64_t v17 = sub_A888(v9, v10, v11, v12, v13, v14, v15, v16, v138, v154, v170);
  uint64_t v25 = sub_A854(v17, v18, v19, v20, v21, v22, v23, v24, v139, v155, v171, v186);
  uint64_t v33 = sub_A84C(v25, v26, v27, v28, v29, v30, v31, v32, v140, v156, v172, v187, v201);
  uint64_t v41 = sub_A844(v33, v34, v35, v36, v37, v38, v39, v40, v141, v157, v173, v188, v202, v215);
  uint64_t v49 = sub_A83C(v41, v42, v43, v44, v45, v46, v47, v48, v142, v158, v174, v189, v203, v216, v228);
  uint64_t v57 = sub_A95C(v49, v50, v51, v52, v53, v54, v55, v56, v143, v159, v175, v190, v204, v217, v229, v240);
  uint64_t v65 = sub_A954(v57, v58, v59, v60, v61, v62, v63, v64, v144, v160, v176, v191, v205, v218, v230, v241, v251);
  uint64_t v73 = sub_A938(v65, v66, v67, v68, v69, v70, v71, v72, v145, v161, v177, v192, v206, v219, v231, v242, v252, v261);
  uint64_t v81 = sub_A930( v73,  v74,  v75,  v76,  v77,  v78,  v79,  v80,  v146,  v162,  v178,  v193,  v207,  v220,  v232,  v243,  v253,  v262,  v270);
  uint64_t v89 = sub_A928( v81,  v82,  v83,  v84,  v85,  v86,  v87,  v88,  v147,  v163,  v179,  v194,  v208,  v221,  v233,  v244,  v254,  v263,  v271,  v278);
  uint64_t v97 = sub_A920( v89,  v90,  v91,  v92,  v93,  v94,  v95,  v96,  v148,  v164,  v180,  v195,  v209,  v222,  v234,  v245,  v255,  v264,  v272,  v279,  v285);
  uint64_t v105 = sub_36374( v97,  v98,  v99,  v100,  v101,  v102,  v103,  v104,  v149,  v165,  v181,  v196,  v210,  v223,  v235,  v246,  v256,  v265,  v273,  v280,  v286,  v292);
  uint64_t v113 = sub_3636C( v105,  v106,  v107,  v108,  v109,  v110,  v111,  v112,  v150,  v166,  v182,  v197,  v211,  v224,  v236,  v247,  v257,  v266,  v274,  v281,  v287,  v293,  v298);
  uint64_t v121 = sub_36364( v113,  v114,  v115,  v116,  v117,  v118,  v119,  v120,  v151,  v167,  v183,  v198,  v212,  v225,  v237,  v248,  v258,  v267,  v275,  v282,  v288,  v294,  v299,  v303);
  uint64_t v129 = sub_363F0( v121,  v122,  v123,  v124,  v125,  v126,  v127,  v128,  v152,  v168,  v184,  v199,  v213,  v226,  v238,  v249,  v259,  v268,  v276,  v283,  v289,  v295,  v300,  v304,  v307);
  sub_36430( v129,  v130,  v131,  v132,  v133,  v134,  v135,  v136,  v153,  v169,  v185,  v200,  v214,  v227,  v239,  v250,  v260,  v269,  v277,  v284,  v290,  v296,  v301,  v305,  v308,  v310);
  swift_task_dealloc(v312);
  swift_task_dealloc(v314);
  swift_task_dealloc(v316);
  swift_task_dealloc(v318);
  swift_task_dealloc(v320);
  swift_task_dealloc(v322);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v323);
}

#error "7CE10: call analysis failed (funcsize=136)"
uint64_t sub_7CE78(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v4 = *v2;
  uint64_t v6 = v4;
  sub_56254(*(void *)(v4 + 1424), &v6);
  if (v1) {
    swift_errorRelease(v1);
  }
  else {
    *(void *)(v4 + 1432) = a1;
  }
  sub_A7C8();
  sub_A964();
  return sub_D954();
}

#error "7D098: call analysis failed (funcsize=129)"
#error "7D19C: call analysis failed (funcsize=62)"
uint64_t sub_7D204(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  double v31;
  int *v32;
  uint64_t v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  int v50;
  double v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  NSURL *v62;
  void *v63;
  void *v64;
  id v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  void *v72;
  void *v73;
  id v74;
  id v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  Swift::String v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  id v95;
  uint64_t v92 = a4;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v90 = *(void *)(v7 - 8);
  uint64_t v91 = v7;
  __chkstk_darwin(v7);
  uint64_t v89 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_494C(&qword_189CF8);
  __chkstk_darwin(v9);
  uint64_t v94 = (uint64_t)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v88 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_494C(&qword_189CE8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v88 - v18;
  uint64_t v20 = sub_494C(&qword_189D00);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v93 = (char *)&v88 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v88 - v23;
  [a2 systolic];
  uint64_t v26 = v25;
  uint64_t v27 = sub_7D950(a2);
  uint64_t v29 = v28;
  uint64_t v30 = *(_BYTE *)(a3 + 288);
  uint64_t v31 = sub_90668(v27, v28, v30, v26);
  swift_bridgeObjectRelease(v29);
  uint64_t v32 = (int *)type metadata accessor for WellnessLoggingBloodPressureParameters(0LL);
  uint64_t v33 = a1 + v32[9];
  *(double *)uint64_t v33 = v31;
  *(_BYTE *)(v33 + 8) = 0;
  [a2 diastolic];
  uint64_t v35 = v34;
  uint64_t v36 = sub_7D950(a2);
  uint64_t v38 = v37;
  uint64_t v39 = sub_90668(v36, v37, v30, v35);
  swift_bridgeObjectRelease(v38);
  uint64_t v40 = a1 + v32[7];
  *(double *)uint64_t v40 = v39;
  *(_BYTE *)(v40 + 8) = 0;
  uint64_t v41 = sub_7D950(a2);
  if (v42)
  {
    uint64_t v43 = v42;
    String.toSpeakableString.getter(v41, v42);
    swift_bridgeObjectRelease(v43);
    uint64_t v44 = type metadata accessor for SpeakableString(0LL);
    uint64_t v45 = 0LL;
  }

  else
  {
    uint64_t v44 = type metadata accessor for SpeakableString(0LL);
    uint64_t v45 = 1LL;
  }

  uint64_t v46 = 1LL;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v24, v45, 1LL, v44);
  sub_A384((uint64_t)v24, a1 + v32[10]);
  uint64_t v47 = type metadata accessor for DialogCalendar.Builder(0LL);
  swift_allocObject(v47, *(unsigned int *)(v47 + 48), *(unsigned __int16 *)(v47 + 52));
  DialogCalendar.Builder.init()();
  uint64_t v48 = [a2 sampleEnd];
  if (v48)
  {
    uint64_t v49 = v48;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v48);

    uint64_t v46 = 0LL;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v17, v46, 1LL, v11);
  sub_7DC80((uint64_t)v17, (uint64_t)v19, &qword_189CE8);
  uint64_t v50 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v19, 1LL, v11);
  if (v50)
  {
    sub_279E0((uint64_t)v19, &qword_189CE8);
    uint64_t v51 = 0.0;
  }

  else
  {
    uint64_t v52 = v88;
    (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v13, v19, v11);
    sub_279E0((uint64_t)v19, &qword_189CE8);
    uint64_t v53 = Date.timeIntervalSince1970.getter();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v13, v11);
    uint64_t v51 = v53;
  }

  uint64_t v54 = (uint64_t)v93;
  dispatch thunk of DialogCalendar.Builder.withSecs(_:)(*(void *)&v51, v50 != 0);
  uint64_t v55 = swift_release();
  uint64_t v56 = dispatch thunk of DialogCalendar.Builder.build()(v55);
  swift_release();
  uint64_t v57 = v32[8];
  swift_release();
  *(void *)(a1 + v57) = v56;
  uint64_t v58 = v94;
  sub_35468(v92, v94);
  uint64_t v59 = type metadata accessor for URL(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v58, 1LL, v59) == 1)
  {
    sub_279E0(v58, &qword_189CF8);
    uint64_t v60 = type metadata accessor for SpeakableString(0LL);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v54, 1LL, 1LL, v60);
  }

  else
  {
    uint64_t v61 = [objc_allocWithZone(SAUIAppPunchOut) init];
    URL._bridgeToObjectiveC()(v62);
    uint64_t v64 = v63;
    [v61 setPunchOutUri:v63];

    uint64_t v65 = v61;
    uint64_t v66 = v89;
    uint64_t v67 = UUID.init()();
    uint64_t v68 = UUID.uuidString.getter(v67);
    uint64_t v70 = v69;
    (*(void (**)(char *, uint64_t))(v90 + 8))(v66, v91);
    sub_125B84(v68, v70, v65);

    uint64_t v71 = [v65 dictionary];
    if (v71)
    {
      uint64_t v72 = v71;
      uint64_t v73 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
      uint64_t v95 = 0LL;
      uint64_t v74 = [v73 dataWithPropertyList:v72 format:200 options:0 error:&v95];
      uint64_t v75 = v95;
      if (v74)
      {
        uint64_t v76 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v74);
        uint64_t v78 = v77;

        uint64_t v79 = Data.base64EncodedString(options:)(0LL);
        String.toSpeakableString.getter(v79._countAndFlagsBits, v79._object);

        sub_A3CC(v76, v78);
        swift_bridgeObjectRelease(v79._object);
        uint64_t v80 = type metadata accessor for SpeakableString(0LL);
        uint64_t v81 = v54;
        uint64_t v82 = 0LL;
      }

      else
      {
        uint64_t v84 = v75;
        uint64_t v85 = _convertNSErrorToError(_:)();

        swift_willThrow(v86);
        swift_errorRelease(v85);
        uint64_t v80 = type metadata accessor for SpeakableString(0LL);
        uint64_t v81 = v54;
        uint64_t v82 = 1LL;
      }

      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v81, v82, 1LL, v80);
    }

    else
    {
      uint64_t v83 = type metadata accessor for SpeakableString(0LL);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v54, 1LL, 1LL, v83);
    }

    (*(void (**)(uint64_t, uint64_t))(*(void *)(v59 - 8) + 8LL))(v58, v59);
  }

  return sub_A384(v54, a1);
}

uint64_t LogBloodPressureFlow.deinit()
{
  swift_release();
  return v0;
}

uint64_t LogBloodPressureFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 289LL, 7LL);
}

uint64_t sub_7D8B8(uint64_t a1, uint64_t a2)
{
  return LogBloodPressureFlow.execute(completion:)(a1, a2);
}

uint64_t sub_7D8D8(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18D25C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_A108;
  return LogBloodPressureFlow.execute()(a1);
}

uint64_t sub_7D92C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for LogBloodPressureFlow();
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t sub_7D950(void *a1)
{
  id v1 = [a1 unit];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_7D9B0(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = type metadata accessor for ResponseFactory(0LL);
  uint64_t v9 = &protocol witness table for ResponseFactory;
  *(void *)&__int128 v7 = a2;
  *(_BYTE *)(a3 + 16) = 82;
  memcpy((void *)(a3 + 24), a1, 0xA0uLL);
  sub_20004(&v7, a3 + 184);
  return a3;
}

uint64_t getEnumTagSinglePayload for LogBloodPressureFlow.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for LogBloodPressureFlow.State( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(vsub_D878(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_D878(v0 + 4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_7DAFC + 4 * byte_13B73A[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_7DB30 + 4 * byte_13B735[v4]))();
}

uint64_t sub_7DB30(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_7DB38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x7DB40LL);
  }
  return result;
}

uint64_t sub_7DB4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x7DB54LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_7DB58(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_7DB60(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LogBloodPressureFlow.State()
{
  return &type metadata for LogBloodPressureFlow.State;
}

unint64_t sub_7DB80()
{
  unint64_t result = qword_18D438;
  if (!qword_18D438)
  {
    unint64_t result = swift_getWitnessTable(&unk_13B868, &type metadata for LogBloodPressureFlow.State);
    atomic_store(result, &qword_18D438);
  }

  return result;
}

uint64_t sub_7DBBC(uint64_t a1)
{
  return sub_7D204(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

void sub_7DBC8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = a3(0LL);
  sub_73378(a2, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL));
  sub_A890();
}

uint64_t sub_7DC04()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_7DC28(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc(dword_18D444);
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_7564C;
  return sub_34F70(a1, v1 + 16);
}

void sub_7DC80(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = sub_494C(a3);
  sub_73378(a2, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL));
  sub_A890();
}

unint64_t sub_7DCBC()
{
  unint64_t result = qword_18D460[0];
  if (!qword_18D460[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_13F8C4, &type metadata for InvalidUnitsFlow);
    atomic_store(result, qword_18D460);
  }

  return result;
}

uint64_t sub_7DCF8(uint64_t a1)
{
  return a1;
}

uint64_t sub_7DD2C()
{
  uint64_t v2 = v0[161];
  uint64_t v3 = v0[123];
  *(void *)(v1 - 128) = v0[125];
  *(void *)(v1 - 120) = v3;
  uint64_t v4 = v0[119];
  *(void *)(v1 - 112) = v0[122];
  *(void *)(v1 - 10sub_D878(v0 + 4) = v4;
  *(void *)(v1 - 96) = v0[118];
  return swift_task_dealloc(v2);
}

uint64_t sub_7DDE0(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_7DDFC()
{
  return swift_task_dealloc(*(void *)(v0 + 1304));
}

uint64_t sub_7DE20()
{
  return *(void *)(v0 + 1288);
}

uint64_t sub_7DE54()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1LL, v0);
}

uint64_t sub_7DE74()
{
  return swift_task_dealloc(*(void *)(v0 + 1304));
}

  ;
}

void sub_7DEB4()
{
}

  ;
}

void sub_7DEEC()
{
  *(void *)(v1 - 8) = *v0;
}

void sub_7DEFC()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_7DF0C(uint64_t a1, uint64_t a2)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, 1LL, v2);
}

uint64_t sub_7DF18()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 192) + 8LL))(v1, v0);
}

uint64_t sub_7DF2C()
{
  return (*(uint64_t (**)(void, void))(v0[143] + 8LL))(v0[145], v0[142]);
}

uint64_t sub_7DF40()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1LL, 1LL, v0);
}

void sub_7DF54()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_7DF64()
{
  return swift_task_dealloc(*(void *)(v0 + 768));
}

uint64_t sub_7DF74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + 58sub_D878(v0 + 4) = a2;
  *(void *)(v2 + 552) = a1;
  return type metadata accessor for WellnessLoggingCATsSimple(0LL);
}

uint64_t sub_7DF84()
{
  return v3(v2, v0, v1);
}

uint64_t sub_7DF94()
{
  return static CATOption.defaultMode.getter();
}

uint64_t sub_7DFA0(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_7DFA8()
{
  return v1(v2, v0);
}

uint64_t sub_7DFB4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 208))(a1, a2, v2);
}

uint64_t sub_7DFC0@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(v1);
}

_OWORD *sub_7DFCC(_OWORD *a1)
{
  return sub_A13C(a1, v1);
}

uint64_t sub_7DFD4(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 1200);
}

uint64_t sub_7DFE8()
{
  return v0;
}

uint64_t sub_7DFF4()
{
  uint64_t v0 = sub_80C98();
  return Flow.deferToExecuteAsync(_:)(v0, v1, v2, v3);
}

uint64_t sub_7E030(uint64_t a1)
{
  v2[43] = a1;
  v2[44] = v1;
  uint64_t v3 = sub_494C(&qword_18B168);
  v2[45] = sub_A5C0(*(void *)(v3 - 8));
  sub_A964();
  return sub_A5D0();
}

#error "7E0F8: call analysis failed (funcsize=66)"
uint64_t sub_7E188()
{
  uint64_t v0;
  sub_AA10();
  sub_20264(*(void *)(v0 + 368));
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_7E1BC()
{
  uint64_t v1 = (__int128 *)(v0 + 256);
  if (*(void *)(v0 + 280))
  {
    sub_20004(v1, v0 + 216);
    sub_D7EC(v0 + 216, v0 + 296);
    uint64_t v2 = swift_allocObject(&unk_17E078, 56LL, 7LL);
    sub_20004((__int128 *)(v0 + 296), v2 + 16);
    static OutputPublisherFactory.makeOutputPublisherAsync()(v6);
    uint64_t v3 = type metadata accessor for SimpleOutputFlowAsync(0LL);
    sub_A72C(v3);
    *(void *)(v0 + 336) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)(v6, &unk_18D490, v2);
    static ExecuteResponse.complete<A>(next:)(v0 + 336);
    sub_20300();
    swift_release();
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 352);
    sub_2012C((uint64_t)v1, &qword_18A448);
    sub_A13C((_OWORD *)(v4 + 8), (_OWORD *)(v0 + 16));
    sub_A178();
    static ExecuteResponse.complete<A>(next:)(v0 + 16);
    sub_A1B4((void *)(v0 + 16));
  }

  swift_task_dealloc(*(void *)(v0 + 360));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_7E2FC(uint64_t a1, char a2, char a3)
{
  *(void *)(v4 + 640) = v3;
  *(_BYTE *)(v4 + 921) = a3;
  *(_BYTE *)(v4 + 920) = a2;
  *(void *)(v4 + 632) = a1;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  *(void *)(v4 + 648) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v4 + 6sub_D7EC(v0 + 16, v0 + 56) = v6;
  *(void *)(v4 + 66sub_D878(v0 + 4) = sub_A5C0(v6);
  uint64_t v7 = type metadata accessor for GenericButtonModel(0LL);
  *(void *)(v4 + 672) = v7;
  *(void *)(v4 + 680) = sub_A5C0(*(void *)(v7 - 8));
  uint64_t v8 = sub_494C(&qword_189CF8);
  *(void *)(v4 + 688) = sub_D8CC(*(void *)(v8 - 8));
  *(void *)(v4 + 696) = sub_A5B8();
  *(void *)(v4 + 70sub_D878(v0 + 4) = sub_A5B8();
  *(void *)(v4 + 712) = sub_A5B8();
  uint64_t v9 = sub_3C798();
  *(void *)(v4 + 720) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v4 + 728) = v10;
  *(void *)(v4 + 736) = sub_D8CC(v10);
  *(void *)(v4 + 74sub_D878(v0 + 4) = sub_A5B8();
  uint64_t v11 = type metadata accessor for DialogPhase(0LL);
  *(void *)(v4 + 752) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v4 + 760) = v12;
  *(void *)(v4 + 768) = sub_D8CC(v12);
  *(void *)(v4 + 776) = sub_A5B8();
  uint64_t v13 = type metadata accessor for OutputGenerationManifest(0LL);
  *(void *)(v4 + 78sub_D878(v0 + 4) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v4 + 792) = v14;
  *(void *)(v4 + 800) = sub_A5C0(v14);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_7E3F8()
{
  char v1 = *(_BYTE *)(*(void *)(v0 + 640) + 208LL);
  uint64_t v2 = (void *)swift_task_alloc(dword_190B7C);
  *(void *)(v0 + 808) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_7E44C;
  return sub_130540(v1);
}

uint64_t sub_7E44C()
{
  *(void *)(v2 + 816) = v1;
  sub_36900(v3);
  if (v0) {
    swift_errorRelease(v0);
  }
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_7E4A0()
{
  uint64_t v1 = *(void **)(v0 + 816);
  uint64_t v2 = *(void *)(v0 + 800);
  uint64_t v3 = *(void *)(v0 + 776);
  uint64_t v4 = *(void *)(v0 + 768);
  uint64_t v5 = *(void *)(v0 + 760);
  uint64_t v6 = *(void *)(v0 + 752);
  static DialogPhase.error.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v6);
  OutputGenerationManifest.init(dialogPhase:_:)(v4, sub_A633C, 0LL);
  sub_80C60(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  OutputGenerationManifest.printSupportingDialogInDisplayModes.setter(1LL);
  id v7 = [v1 catId];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v10 = v9;

  OutputGenerationManifest.responseViewId.setter(v8, v10);
  sub_8093C();
  sub_80A38();
  sub_80AC8();
  if ((v2 & 1) != 0)
  {
    sub_80B40();
    sub_20300();
LABEL_4:
    uint64_t v12 = *(uint64_t **)(v0 + 640);
    *(void *)(v0 + 82sub_D878(v0 + 4) = sub_90E74( 0x616548206E65704FLL,  0xEB0000000068746CLL,  0x6C6165486E65706FLL,  (void *)0xED00007070416874LL);
    *(void *)(v0 + 832) = v13;
    BOOL v18 = hasTimeEdit(from:)(*v12, v13, v14, v15, v16, v17);
    uint64_t v19 = (void *)swift_task_alloc(dword_18D49C);
    *(void *)(v0 + 840) = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_7E7C4;
    uint64_t v20 = *(void *)(v0 + 712);
    return sub_7EDA8(v20, *(_BYTE *)(v0 + 920), *(_BYTE *)(v0 + 921), v18);
  }

  sub_500C((void *)(v0 + 184), *(void *)(v0 + 208));
  sub_202B4();
  char v11 = sub_80A14();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 408));
  sub_80B40();
  sub_20300();
  if ((v11 & 1) != 0) {
    goto LABEL_4;
  }
  uint64_t v22 = *(void *)(v0 + 640);
  if (*(_BYTE *)(v22 + 208) != 1)
  {
    *(void *)(v0 + 880) = sub_90E74( 0xD000000000000010LL,  0x8000000000145450LL,  0xD000000000000012LL,  (void *)0x8000000000145470LL);
    *(void *)(v0 + 888) = v32;
    BOOL v18 = hasTimeEdit(from:)(*(void *)v22, v32, v33, v34, v35, v36);
    uint64_t v37 = (void *)swift_task_alloc(dword_18D49C);
    *(void *)(v0 + 896) = v37;
    *uint64_t v37 = v0;
    v37[1] = sub_7EAB0;
    uint64_t v20 = *(void *)(v0 + 696);
    return sub_7EDA8(v20, *(_BYTE *)(v0 + 920), *(_BYTE *)(v0 + 921), v18);
  }

  uint64_t v23 = *(void **)(v0 + 816);
  uint64_t v24 = *(void *)(v22 + 240);
  sub_500C((void *)(v22 + 216), v24);
  uint64_t v25 = sub_494C(&qword_18A460);
  uint64_t v26 = sub_80BF8(v25);
  *(_OWORD *)(v26 + 16) = xmmword_138BA0;
  *(void *)(v26 + 32) = v23;
  uint64_t v38 = v26;
  specialized Array._endMutation()(v26, v27, v28);
  *(void *)(v0 + 86sub_D878(v0 + 4) = v38;
  uint64_t v29 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)[1];
  id v30 = v23;
  uint64_t v31 = (void *)swift_task_alloc(v29);
  *(void *)(v0 + 872) = v31;
  *uint64_t v31 = v0;
  v31[1] = sub_7E9F4;
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)( v0 + 528,  v38,  *(void *)(v0 + 800),  v24);
}

uint64_t sub_7E7C4()
{
  return sub_A5D0();
}

uint64_t sub_7E7F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!v10)
  {
    uint64_t v13 = sub_80BD0(v9[93]);
LABEL_5:
    uint64_t v14 = (void *)v9[102];
    sub_80AD8(v13, v9[93]);
    v9[59] = sub_80BA8();
    v9[60] = sub_20168();
    uint64_t v15 = sub_B76C(v9 + 56);
    sub_80C40((uint64_t)v15);
    sub_80C30();
    uint64_t v16 = sub_494C(&qword_18A460);
    uint64_t v17 = (__n128 *)sub_80BF8(v16);
    sub_80BE4(v17, v18, v19, (__n128)xmmword_138BA0);
    v9[106] = a9;
    uint64_t v20 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)[1];
    id v21 = v14;
    uint64_t v22 = (void *)swift_task_alloc(v20);
    v9[107] = v22;
    sub_80AFC(v22);
    return sub_80AAC();
  }

  URL.init(string:)(0xD00000000000005CLL, 0x8000000000144070LL);
  uint64_t result = sub_80A5C();
  if (!v10)
  {
    uint64_t v12 = v9[89];
    (*(void (**)(void, void, void))(v9[91] + 32LL))(v9[93], v9[88], v9[90]);
    uint64_t v13 = sub_2012C(v12, &qword_189CF8);
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

uint64_t sub_7E920()
{
  uint64_t v1 = (void *)(v0 + 448);
  sub_20264(*(void *)(v0 + 856));
  sub_2A184();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
  sub_A964();
  return sub_A810();
}

#error "7E9E4: call analysis failed (funcsize=35)"
uint64_t sub_7E9F4()
{
  uint64_t v0;
  sub_AA10();
  sub_20264(*(void *)(v0 + 872));
  sub_249D4();
  sub_A964();
  return sub_A5D0();
}

#error "7EAA0: call analysis failed (funcsize=32)"
uint64_t sub_7EAB0()
{
  uint64_t v0;
  sub_AA10();
  sub_20264(*(void *)(v0 + 896));
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_7EAE4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!v10)
  {
    uint64_t v13 = sub_80BD0(v9[92]);
LABEL_5:
    uint64_t v14 = (void *)v9[102];
    sub_80AD8(v13, v9[92]);
    v9[64] = sub_80BA8();
    v9[65] = sub_20168();
    uint64_t v15 = sub_B76C(v9 + 61);
    sub_80C40((uint64_t)v15);
    sub_80C30();
    uint64_t v16 = sub_494C(&qword_18A460);
    uint64_t v17 = (__n128 *)sub_80BF8(v16);
    sub_80BE4(v17, v18, v19, (__n128)xmmword_138BA0);
    v9[113] = a9;
    uint64_t v20 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)[1];
    id v21 = v14;
    uint64_t v22 = (void *)swift_task_alloc(v20);
    v9[114] = v22;
    sub_80AFC(v22);
    return sub_80AAC();
  }

  URL.init(string:)(0xD000000000000033LL, 0x8000000000143FD0LL);
  uint64_t result = sub_80A5C();
  if (!v10)
  {
    uint64_t v12 = v9[87];
    (*(void (**)(void, void, void))(v9[91] + 32LL))(v9[92], v9[86], v9[90]);
    uint64_t v13 = sub_2012C(v12, &qword_189CF8);
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

uint64_t sub_7EC0C()
{
  uint64_t v1 = (void *)(v0 + 488);
  sub_20264(*(void *)(v0 + 912));
  sub_2A184();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
  sub_A964();
  return sub_A810();
}

#error "7ECD0: call analysis failed (funcsize=35)"
#error "7ED98: call analysis failed (funcsize=48)"
uint64_t sub_7EDA8(uint64_t a1, char a2, char a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  *(void *)(v5 + 920) = v4;
  *(_BYTE *)(v5 + 1218) = a4;
  *(_BYTE *)(v5 + 1217) = a3;
  *(_BYTE *)(v5 + 1216) = a2;
  *(void *)(v5 + 912) = a1;
  uint64_t v6 = type metadata accessor for DateInterval(0LL);
  *(void *)(v5 + 928) = v6;
  id v7 = *(void *)(v6 - 8);
  *(void *)(v5 + 936) = v7;
  *(void *)(v5 + 94sub_D878(v0 + 4) = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Calendar(0LL);
  *(void *)(v5 + 952) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v5 + 960) = v9;
  *(void *)(v5 + 968) = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  char v10 = sub_494C(&qword_189CE8);
  *(void *)(v5 + 976) = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  char v11 = type metadata accessor for Date(0LL);
  *(void *)(v5 + 98sub_D878(v0 + 4) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v5 + 992) = v12;
  uint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v5 + 1000) = swift_task_alloc(v13);
  *(void *)(v5 + 1008) = swift_task_alloc(v13);
  uint64_t v14 = sub_494C(&qword_18CED0);
  *(void *)(v5 + 1016) = swift_task_alloc((*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_494C(&qword_18CED8);
  *(void *)(v5 + 102sub_D878(v0 + 4) = swift_task_alloc((*(void *)(*(void *)(v15 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DateComponents(0LL);
  *(void *)(v5 + 1032) = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  *(void *)(v5 + 1040) = v17;
  *(void *)(v5 + 1048) = swift_task_alloc((*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_494C(&qword_18D4A0);
  *(void *)(v5 + 10sub_D7EC(v0 + 16, v0 + 56) = swift_task_alloc((*(void *)(*(void *)(v18 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_494C(&qword_18B138);
  *(void *)(v5 + 106sub_D878(v0 + 4) = v19;
  uint64_t v20 = (*(void *)(*(void *)(v19 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v5 + 1072) = swift_task_alloc(v20);
  *(void *)(v5 + 1080) = swift_task_alloc(v20);
  id v21 = (*(void *)(*(void *)(sub_494C(&qword_18B168) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v5 + 1088) = swift_task_alloc(v21);
  *(void *)(v5 + 1096) = swift_task_alloc(v21);
  uint64_t v22 = type metadata accessor for Logger(0LL);
  *(void *)(v5 + 110sub_D878(v0 + 4) = v22;
  uint64_t v23 = *(void *)(v22 - 8);
  *(void *)(v5 + 1112) = v23;
  uint64_t v24 = (*(void *)(v23 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v5 + 1120) = swift_task_alloc(v24);
  *(void *)(v5 + 1128) = swift_task_alloc(v24);
  *(void *)(v5 + 1136) = swift_task_alloc(v24);
  return swift_task_switch(sub_7EFE0, 0LL, 0LL);
}

uint64_t sub_7EFE0()
{
  if (*(_BYTE *)(v2 + 1218) == 1)
  {
    uint64_t v3 = sub_80C8C();
    sub_80A7C(v3);
    sub_232F4();
    sub_23374();
    os_log_type_t v4 = sub_AB70();
    if (sub_A988(v4))
    {
      uint64_t v5 = (_WORD *)sub_232D0();
      sub_366C0(v5);
      sub_A940(&dword_0, v6, v7, "getPunchoutURL had isPrefilled=true, returning getPrefilledPunchoutURL");
      sub_5050(v1);
    }

    uint64_t v8 = *(void *)(v2 + 1112);

    sub_202F4(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
    uint64_t v9 = (void *)swift_task_alloc(dword_18D4AC);
    *(void *)(v2 + 114sub_D878(v0 + 4) = v9;
    *uint64_t v9 = v2;
    v9[1] = sub_7F6F0;
    sub_80B24();
    return sub_7FB34(v10);
  }

  if (*(_BYTE *)(v2 + 1216) == 1)
  {
    sub_8093C();
    sub_80A38();
    sub_80AC8();
    if ((v0 & 1) != 0)
    {
      char v12 = 1;
    }

    else
    {
      sub_500C((void *)(v2 + 184), *(void *)(v2 + 208));
      sub_202B4();
      char v12 = sub_80A14();
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v2 + 640));
    }

    *(_BYTE *)(v2 + 1219) = v12 & 1;
    uint64_t v29 = *(uint64_t **)(v2 + 920);
    sub_80B40();
    sub_20300();
    getUSOMedNames(from:)(*v29, v30, v31, v32, v33, v34);
    if (v35)
    {
      if (*(void *)(v35 + 16))
      {
        uint64_t v36 = *(void *)(v35 + 40);
        *(void *)(v2 + 1152) = v36;
        swift_bridgeObjectRetain(v36);
        sub_2A184();
        uint64_t v37 = sub_80B78();
        uint64_t v38 = (void *)swift_task_alloc(v37);
        *(void *)(v2 + 1160) = v38;
        sub_80B58(v38, (uint64_t)sub_7F7C8);
        sub_80B24();
        __asm { BR              X4 }
      }

      sub_2A184();
    }

    URL.init(string:)();
LABEL_26:
    uint64_t v100 = *(void *)(v2 + 1016);
    uint64_t v102 = *(void *)(v2 + 1008);
    uint64_t v104 = *(void *)(v2 + 1000);
    uint64_t v106 = *(void *)(v2 + 976);
    uint64_t v108 = *(void *)(v2 + 968);
    uint64_t v110 = *(void *)(v2 + 944);
    swift_task_dealloc(*(void *)(v2 + 1136));
    sub_A7C8();
    sub_A760();
    sub_A8EC();
    sub_A910();
    sub_A864();
    sub_A85C();
    sub_A8F4();
    sub_A78C();
    sub_A67C();
    swift_task_dealloc(v100);
    swift_task_dealloc(v102);
    swift_task_dealloc(v104);
    swift_task_dealloc(v106);
    swift_task_dealloc(v108);
    swift_task_dealloc(v110);
    sub_80B24();
    __asm { BR              X0 }
  }

  if (*(_BYTE *)(v2 + 1217) != 1)
  {
    uint64_t v40 = sub_80C8C();
    sub_80A7C(v40);
    sub_232F4();
    sub_23374();
    os_log_type_t v41 = sub_AB70();
    if (sub_A988(v41))
    {
      uint64_t v42 = (_WORD *)sub_232D0();
      sub_366C0(v42);
      sub_A940( &dword_0,  v43,  v44,  "ComplexMedLoggingErrorFlow: both isLogByName and isLogBySchedule were false, but at least one needs to be true, so returning nil, and this will generally punchout to Meds Room.");
      sub_5050(v1);
    }

    uint64_t v45 = *(void *)(v2 + 1112);
    uint64_t v46 = *(void *)(v2 + 912);

    sub_202F4(*(uint64_t (**)(uint64_t, uint64_t))(v45 + 8));
    uint64_t v49 = sub_3C798();
    uint64_t v50 = v46;
    goto LABEL_23;
  }

  uint64_t v13 = *(void *)(v2 + 1096);
  uint64_t v14 = *(void *)(v2 + 1088);
  uint64_t v15 = *(uint64_t **)(v2 + 920);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[24];
  uint64_t v18 = v15[25];
  sub_500C(v15 + 21, v17);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
  getMedScheduleWithDefinedValues(from:deviceState:)( v16,  v2 + 720,  v19,  v20,  v21,  v22,  v23,  v24,  v88,  v89,  v90,  v91,  v92,  v93,  v94,  v95,  v96,  v97,  v98,  v99);
  sub_20300();
  sub_8083C(v13, v14);
  uint64_t v25 = sub_494C(&qword_18B130);
  int v26 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v14, 1LL, v25);
  uint64_t v27 = *(void *)(v2 + 1064);
  uint64_t v28 = *(void *)(v2 + 1056);
  if (v26 == 1)
  {
    sub_2012C(*(void *)(v2 + 1088), &qword_18B168);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v28, 1LL, 1LL, v27);
LABEL_20:
    uint64_t v54 = *(void *)(v2 + 1104);
    uint64_t v55 = sub_2012C(*(void *)(v2 + 1056), &qword_18D4A0);
    uint64_t v56 = Logger.wellness.unsafeMutableAddressor(v55);
    sub_80A7C(v56);
    sub_232F4();
    sub_23374();
    os_log_type_t v57 = sub_AB70();
    if (sub_A988(v57))
    {
      uint64_t v58 = (_WORD *)sub_232D0();
      sub_366C0(v58);
      sub_A940( &dword_0,  v59,  v60,  "ComplexMedLoggingErrorFlow: isLogBySchedule is true, but schedule?.dateInterval is nil. Returning nil");
      sub_5050(v54);
    }

    uint64_t v61 = *(void *)(v2 + 1112);
    uint64_t v62 = *(void *)(v2 + 1096);
    uint64_t v63 = *(void *)(v2 + 912);

    sub_202F4(*(uint64_t (**)(uint64_t, uint64_t))(v61 + 8));
    sub_2012C(v62, &qword_18B168);
    uint64_t v49 = sub_3C798();
    uint64_t v50 = v63;
LABEL_23:
    sub_6D78(v50, v47, v48, v49);
    goto LABEL_26;
  }

  swift_bridgeObjectRelease(*(void *)(*(void *)(v2 + 1088) + *(int *)(v25 + 48) + 8LL));
  uint64_t v51 = sub_80C98();
  sub_80884(v51, v52);
  sub_80A5C();
  if (v53) {
    goto LABEL_20;
  }
  uint64_t v65 = *(void *)(v2 + 1048);
  uint64_t v66 = *(void *)(v2 + 1024);
  uint64_t v103 = *(void *)(v2 + 1064);
  uint64_t v105 = *(void *)(v2 + 1016);
  uint64_t v67 = *(void *)(v2 + 984);
  uint64_t v109 = *(void *)(v2 + 976);
  uint64_t v111 = *(void *)(v2 + 960);
  uint64_t v68 = *(void *)(v2 + 952);
  uint64_t v107 = *(void *)(v2 + 1080);
  uint64_t v69 = v107 + *(int *)(v103 + 48);
  uint64_t v70 = *(void (**)(void))(*(void *)(v2 + 992) + 32LL);
  v70();
  uint64_t v101 = v69;
  uint64_t v71 = sub_80C98();
  ((void (*)(uint64_t))v70)(v71);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v66, 1LL, 1LL, v68);
  uint64_t v72 = type metadata accessor for TimeZone(0LL);
  sub_6D78(v105, v73, v74, v72);
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( v66,  v105,  0LL,  1LL,  0LL,  1LL,  0LL,  1LL);
  uint64_t v75 = DateComponents.second.setter(-1LL, 0LL);
  static Calendar.current.getter(v75);
  Calendar.date(byAdding:to:wrappingComponents:)(v65, v107, 0LL);
  sub_80C60(*(uint64_t (**)(uint64_t, uint64_t))(v111 + 8));
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v109, 1LL, v67);
  if ((_DWORD)result != 1)
  {
    uint64_t v76 = *(void *)(v2 + 1080);
    uint64_t v77 = *(void *)(v2 + 1072);
    uint64_t v78 = *(void *)(v2 + 1008);
    uint64_t v79 = *(void *)(v2 + 1000);
    uint64_t v80 = *(void *)(v2 + 992);
    uint64_t v81 = *(void *)(v2 + 984);
    uint64_t v82 = *(void **)(v2 + 920);
    sub_80C28(v78, *(void *)(v2 + 976));
    sub_80C28(v79, v78);
    uint64_t v83 = v77 + *(int *)(v103 + 48);
    sub_80C28(v77, v76);
    sub_80C28(v83, v101);
    DateInterval.init(start:end:)(v79, v83);
    uint64_t v84 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
    *(void *)(v2 + 118sub_D878(v0 + 4) = v84;
    v84(v77, v81);
    uint64_t v85 = v82[38];
    sub_500C(v82 + 34, v82[37]);
    uint64_t v86 = (void *)swift_task_alloc(*(unsigned int *)(*(void *)(v85 + 16) + 4LL));
    *(void *)(v2 + 1192) = v86;
    *uint64_t v86 = v2;
    v86[1] = sub_7F92C;
    sub_80B24();
    __asm { BR              X3 }
  }

  __break(1u);
  return result;
}

uint64_t sub_7F6F0()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v78 = *(void **)v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 1144LL));
  uint64_t v57 = v1[128];
  uint64_t v63 = v1[127];
  uint64_t v68 = v1[126];
  uint64_t v72 = v1[125];
  uint64_t v75 = v1[122];
  uint64_t v77 = v1[121];
  swift_task_dealloc(v1[142]);
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  uint64_t v2 = sub_A78C();
  uint64_t v10 = sub_AAD8(v2, v3, v4, v5, v6, v7, v8, v9, v51, v57);
  uint64_t v18 = sub_A888(v10, v11, v12, v13, v14, v15, v16, v17, v52, v58, v63);
  uint64_t v26 = sub_A854(v18, v19, v20, v21, v22, v23, v24, v25, v53, v59, v64, v68);
  uint64_t v34 = sub_A84C(v26, v27, v28, v29, v30, v31, v32, v33, v54, v60, v65, v69, v72);
  uint64_t v42 = sub_A844(v34, v35, v36, v37, v38, v39, v40, v41, v55, v61, v66, v70, v73, v75);
  sub_A83C(v42, v43, v44, v45, v46, v47, v48, v49, v56, v62, v67, v71, v74, v76, v77);
  sub_A67C();
  return sub_57E74((uint64_t (*)(void))v78[1]);
}

uint64_t sub_7F7C8()
{
  *(void *)(v1 + 1168) = v0;
  *(void *)(v1 + 1176) = v2;
  sub_36900(v3);
  sub_249D4();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_7F810()
{
  uint64_t v1 = *(void *)(v0 + 1176);
  if (*(_BYTE *)(v0 + 1219) == 1)
  {
    _StringGuts.grow(_:)(105LL);
    sub_80C6C();
    sub_80B48();
  }

  else
  {
    _StringGuts.grow(_:)(63LL);
    sub_80C6C();
    sub_80B48();
    unint64_t v2 = 0xD00000000000003DLL;
  }

  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRetain(v1);
  v4._uint64_t countAndFlagsBits = sub_80C98();
  String.append(_:)(v4);
  sub_2A184();
  URL.init(string:)(0LL, 0xE000000000000000LL);
  sub_249D4();
  sub_2A184();
  sub_8096C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  sub_A78C();
  uint64_t v5 = sub_A67C();
  uint64_t v13 = sub_AAD8(v5, v6, v7, v8, v9, v10, v11, v12, v54, v60);
  uint64_t v21 = sub_A888(v13, v14, v15, v16, v17, v18, v19, v20, v55, v61, v66);
  uint64_t v29 = sub_A854(v21, v22, v23, v24, v25, v26, v27, v28, v56, v62, v67, v71);
  uint64_t v37 = sub_A84C(v29, v30, v31, v32, v33, v34, v35, v36, v57, v63, v68, v72, v75);
  uint64_t v45 = sub_A844(v37, v38, v39, v40, v41, v42, v43, v44, v58, v64, v69, v73, v76, v78);
  sub_A83C(v45, v46, v47, v48, v49, v50, v51, v52, v59, v65, v70, v74, v77, v79, v80);
  return sub_80A90(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_7F92C()
{
  *(void *)(v1 + 1200) = v0;
  *(void *)(v1 + 1208) = v2;
  sub_36900(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_7F96C()
{
  uint64_t v5 = *(void *)(v1 + 704);
  uint64_t v6 = *(void **)(v1 + 712);
  sub_80A38();
  sub_80AC8();
  if ((v0 & 1) != 0)
  {
    sub_80B40();
    sub_20300();
  }

  else
  {
    sub_500C((void *)(v1 + 496), *(void *)(v1 + 520));
    sub_202B4();
    uint64_t v5 = *(void *)(v1 + 784);
    uint64_t v6 = *(void **)(v1 + 792);
    char v7 = sub_80A14();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v1 + 760));
    sub_80B40();
    sub_20300();
    if ((v7 & 1) == 0)
    {
      sub_809BC();
      _StringGuts.grow(_:)(71LL);
      sub_80C6C();
      sub_80B48();
      unint64_t v8 = 0xD000000000000045LL;
      goto LABEL_6;
    }
  }

  sub_809BC();
  _StringGuts.grow(_:)(113LL);
  sub_80C6C();
  sub_80B48();
LABEL_6:
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRetain(v6);
  v10._uint64_t countAndFlagsBits = v1 + 328;
  v10._object = v6;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v6);
  URL.init(string:)();
  sub_249D4();
  swift_bridgeObjectRelease(v6);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v1 + 680);
  v81(v2, v3);
  (*(void (**)())(v66 + 8))();
  sub_2012C(v84, &qword_18B138);
  sub_2012C(v86, &qword_18B168);
  sub_8096C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  sub_A78C();
  uint64_t v11 = sub_A67C();
  uint64_t v19 = sub_AAD8(v11, v12, v13, v14, v15, v16, v17, v18, v60, v66);
  uint64_t v27 = sub_A888(v19, v20, v21, v22, v23, v24, v25, v26, v61, v67, v72);
  uint64_t v35 = sub_A854(v27, v28, v29, v30, v31, v32, v33, v34, v62, v68, v73, v77);
  uint64_t v43 = sub_A84C(v35, v36, v37, v38, v39, v40, v41, v42, v63, v69, v74, v78, (uint64_t)v81);
  uint64_t v51 = sub_A844(v43, v44, v45, v46, v47, v48, v49, v50, v64, v70, v75, v79, v82, v84);
  sub_A83C(v51, v52, v53, v54, v55, v56, v57, v58, v65, v71, v76, v80, v83, v85, v86);
  return sub_80A90(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_7FB34(uint64_t a1)
{
  v2[67] = v1;
  v2[66] = a1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[68] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[69] = v4;
  v2[70] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_494C(&qword_189CE8);
  v2[71] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Date(0LL);
  v2[72] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[73] = v7;
  v2[74] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_7FBE4, 0LL, 0LL);
}

uint64_t sub_7FBE4()
{
  if ((v0 & 1) != 0)
  {
    sub_80B40();
    sub_20300();
    unint64_t v7 = 0x8000000000145590LL;
    unint64_t v8 = 0xD000000000000067LL;
  }

  else
  {
    sub_500C((void *)(v1 + 184), *(void *)(v1 + 208));
    sub_202B4();
    char v9 = sub_80A14();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v1 + 368));
    sub_80B40();
    sub_20300();
    unint64_t v8 = 0xD000000000000044LL;
    if ((v9 & 1) != 0)
    {
      unint64_t v8 = 0xD000000000000067LL;
      unint64_t v7 = 0x8000000000145590LL;
    }

    else
    {
      unint64_t v7 = 0x8000000000145600LL;
    }
  }

  Swift::String v10 = *(uint64_t **)(v1 + 536);
  *(void *)(v1 + 496) = v8;
  *(void *)(v1 + 50sub_D878(v0 + 4) = v7;
  getUSOMedNames(from:)(*v10, v2, v3, v4, v5, v6);
  if (v11)
  {
    if (*(void *)(v11 + 16))
    {
      uint64_t v12 = *(void *)(v11 + 40);
      *(void *)(v1 + 600) = v12;
      swift_bridgeObjectRetain(v12);
      sub_2A184();
      uint64_t v13 = sub_80B78();
      uint64_t v18 = v14;
      uint64_t v15 = (void *)swift_task_alloc(v13);
      *(void *)(v1 + 608) = v15;
      uint64_t v16 = sub_80B58(v15, (uint64_t)sub_7FD80);
      return v18(v16);
    }

    sub_2A184();
  }

  sub_249D4();
  URL.init(string:)();
  sub_80C50();
  sub_A78C();
  sub_A67C();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_7FD80()
{
  *(void *)(v1 + 616) = v0;
  *(void *)(v1 + 62sub_D878(v0 + 4) = v2;
  sub_36900(v3);
  sub_249D4();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_7FDC8()
{
  uint64_t v1 = *(uint64_t **)(v0 + 536);
  sub_80CA4(*(void *)(v0 + 616));
  sub_1EBF4();
  *(double *)&uint64_t result = COERCE_DOUBLE(getMedDosageValue(from:)(*v1, v2, v3, v4, v5, v6));
  if ((v8 & 1) == 0)
  {
    if ((~result & 0x7FF0000000000000LL) != 0)
    {
      if (*(double *)&result > -9.22337204e18)
      {
        if (*(double *)&result < 9.22337204e18)
        {
          uint64_t v9 = (uint64_t)*(double *)&result;
          _StringGuts.grow(_:)(17LL);
          swift_bridgeObjectRelease(0xE000000000000000LL);
          sub_80C78();
          uint64_t v47 = v10;
          unint64_t v48 = 0xEF3D656761736F44LL;
          *(void *)(v0 + 520) = v9;
          v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
          String.append(_:)(v11);
          sub_1EBF4();
          sub_80CA4(v47);
          sub_1EBF4();
          goto LABEL_6;
        }

LABEL_6:
  uint64_t v12 = *(void *)(v0 + 576);
  uint64_t v13 = *(void *)(v0 + 568);
  uint64_t v14 = *(void **)(v0 + 536);
  uint64_t v16 = v14[24];
  uint64_t v15 = v14[25];
  sub_500C(v14 + 21, v16);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v15);
  getMedEventDate(from:deviceState:)();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 408));
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v13, 1LL, v12) == 1)
  {
    uint64_t v17 = sub_2012C(*(void *)(v0 + 568), &qword_189CE8);
  }

  else
  {
    uint64_t v18 = *(void *)(v0 + 592);
    uint64_t v19 = *(void *)(v0 + 584);
    uint64_t v20 = *(void *)(v0 + 576);
    (*(void (**)(uint64_t, void, uint64_t))(v19 + 32))(v18, *(void *)(v0 + 568), v20);
    id v21 = [objc_allocWithZone(NSISO8601DateFormatter) init];
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v23 = [v21 stringFromDate:isa];

    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    uint64_t v26 = v25;

    sub_80C78();
    uint64_t v47 = v27;
    unint64_t v48 = 0xED00003D65746144LL;
    v28._uint64_t countAndFlagsBits = v24;
    v28._object = v26;
    String.append(_:)(v28);
    swift_bridgeObjectRelease(v26);
    v29._uint64_t countAndFlagsBits = v47;
    v29._object = (void *)0xED00003D65746144LL;
    String.append(_:)(v29);
    swift_bridgeObjectRelease(0xED00003D65746144LL);

    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }

  uint64_t v30 = *(os_log_s **)(v0 + 560);
  uint64_t v31 = *(void *)(v0 + 552);
  uint64_t v32 = *(void *)(v0 + 544);
  uint64_t v33 = Logger.wellness.unsafeMutableAddressor(v17);
  sub_A5DC(v33, v0 + 448);
  (*(void (**)(os_log_s *, uint64_t, uint64_t))(v31 + 16))(v30, v33, v32);
  uint64_t v35 = *(void *)(v0 + 496);
  unint64_t v34 = *(void *)(v0 + 504);
  uint64_t v36 = swift_bridgeObjectRetain_n(v34, 2LL);
  Logger.logObject.getter(v36);
  os_log_type_t v37 = sub_AB70();
  BOOL v38 = os_log_type_enabled(v30, v37);
  uint64_t v39 = *(void *)(v0 + 560);
  uint64_t v40 = *(void *)(v0 + 552);
  uint64_t v41 = *(void *)(v0 + 544);
  if (v38)
  {
    uint64_t v46 = *(void *)(v0 + 544);
    uint64_t v45 = *(void *)(v0 + 552);
    uint64_t v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v44 = v39;
    uint64_t v43 = swift_slowAlloc(32LL, -1LL);
    uint64_t v47 = v43;
    *(_DWORD *)uint64_t v42 = 136315138;
    swift_bridgeObjectRetain(v34);
    *(void *)(v0 + 512) = sub_39178(v35, v34, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 512, v0 + 520, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease_n(v34, 3LL);
    _os_log_impl(&dword_0, v30, v37, "Got prefilled url that looks like %s", v42, 0xCu);
    swift_arrayDestroy(v43, 1LL);
    sub_5050(v43);
    sub_5050((uint64_t)v42);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
  }

  else
  {
    swift_bridgeObjectRelease_n(v34, 2LL);

    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
  }

  sub_A5DC(v0 + 496, v0 + 472);
  URL.init(string:)();
  sub_2A184();
  sub_80C50();
  sub_A78C();
  sub_A67C();
  *(double *)&uint64_t result = COERCE_DOUBLE(sub_57E74(*(uint64_t (**)(void))(v0 + 8)));
  return result;
}

  v60[1] = a4;
  sub_DEDB0(0LL, (v28 & 0xC000000000000001LL) == 0);
  if ((v28 & 0xC000000000000001LL) != 0) {
    Swift::String v29 = (id)sub_DEA14(0LL);
  }
  else {
    Swift::String v29 = *(id *)(v28 + 32);
  }
  uint64_t v30 = v29;
  sub_36C34();
  sub_134BCC(v30);
  if (v32)
  {
    String.toSpeakableString.getter(v31, v32);
    sub_36C34();
    uint64_t v33 = 0LL;
  }

  else
  {
    uint64_t v33 = 1LL;
  }

uint64_t sub_801D0()
{
  return sub_749D8( (void (*)(void))type metadata accessor for WellnessLoggingCATsSimple,  (uint64_t (*)(char *, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t sub_801E4@<X0>( uint64_t a1@<X0>, const void *a2@<X1>, __int128 *a3@<X2>, char a4@<W3>, char a5@<W4>, __int128 *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 *a10)
{
  *(void *)a9 = a1;
  memcpy((void *)(a9 + 8), a2, 0xA0uLL);
  sub_20004(a3, a9 + 168);
  *(_BYTE *)(a9 + 208) = a4;
  *(_BYTE *)(a9 + 209) = a5;
  sub_20004(a6, a9 + 216);
  *(void *)(a9 + 2sub_D7EC(v0 + 16, v0 + 56) = a7;
  *(void *)(a9 + 26sub_D878(v0 + 4) = a8;
  return sub_20004(a10, a9 + 272);
}

uint64_t destroy for ComplexMedLoggingErrorFlow(void *a1)
{
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 34);
}

uint64_t initializeWithCopy for ComplexMedLoggingErrorFlow(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  uint64_t v5 = a2 + 1;
  __int128 v6 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v6;
  uint64_t v7 = v6;
  char v8 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v6 - 8);
  swift_retain(v4);
  v8(a1 + 8, v5, v7);
  __int128 v9 = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(a1 + 72) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 48, (uint64_t)(a2 + 6));
  __int128 v10 = *((_OWORD *)a2 + 7);
  *(_OWORD *)(a1 + 112) = v10;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 88, (uint64_t)(a2 + 11));
  __int128 v11 = *(_OWORD *)(a2 + 19);
  *(_OWORD *)(a1 + 152) = v11;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 128, (uint64_t)(a2 + 16));
  __int128 v12 = *((_OWORD *)a2 + 12);
  *(_OWORD *)(a1 + 192) = v12;
  (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 168, (uint64_t)(a2 + 21));
  *(_WORD *)(a1 + 208) = *((_WORD *)a2 + 104);
  __int128 v13 = *((_OWORD *)a2 + 15);
  *(_OWORD *)(a1 + 240) = v13;
  (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 216, (uint64_t)(a2 + 27));
  uint64_t v14 = a2[32];
  uint64_t v15 = a2[33];
  *(void *)(a1 + 2sub_D7EC(v0 + 16, v0 + 56) = v14;
  *(void *)(a1 + 26sub_D878(v0 + 4) = v15;
  uint64_t v16 = a2 + 34;
  uint64_t v18 = a2[37];
  uint64_t v17 = a2[38];
  *(void *)(a1 + 296) = v18;
  *(void *)(a1 + 30sub_D878(v0 + 4) = v17;
  uint64_t v19 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v18 - 8);
  swift_retain(v14);
  swift_retain(v15);
  v19(a1 + 272, v16, v18);
  return a1;
}

uint64_t assignWithCopy for ComplexMedLoggingErrorFlow(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  sub_7030((void *)(a1 + 8), (void *)(a2 + 8));
  sub_7030((void *)(a1 + 48), (void *)(a2 + 48));
  sub_7030((void *)(a1 + 88), (void *)(a2 + 88));
  sub_7030((void *)(a1 + 128), (void *)(a2 + 128));
  sub_7030((void *)(a1 + 168), (void *)(a2 + 168));
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_BYTE *)(a1 + 209) = *(_BYTE *)(a2 + 209);
  sub_7030((void *)(a1 + 216), (void *)(a2 + 216));
  *(void *)(a1 + 2sub_D7EC(v0 + 16, v0 + 56) = *(void *)(a2 + 256);
  swift_retain();
  swift_release();
  *(void *)(a1 + 26sub_D878(v0 + 4) = *(void *)(a2 + 264);
  swift_retain();
  swift_release();
  sub_7030((void *)(a1 + 272), (void *)(a2 + 272));
  return a1;
}

void *initializeWithTake for ComplexMedLoggingErrorFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x138uLL);
}

uint64_t assignWithTake for ComplexMedLoggingErrorFlow(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 2sub_D878(v0 + 4) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 48));
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 6sub_D878(v0 + 4) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 88));
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 10sub_D878(v0 + 4) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 128));
  __int128 v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 14sub_D878(v0 + 4) = v5;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 168));
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 18sub_D878(v0 + 4) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_BYTE *)(a1 + 209) = *(_BYTE *)(a2 + 209);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 216));
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  uint64_t v6 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 2sub_D7EC(v0 + 16, v0 + 56) = v6;
  swift_release();
  *(void *)(a1 + 26sub_D878(v0 + 4) = *(void *)(a2 + 264);
  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 272));
  __int128 v7 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v7;
  *(void *)(a1 + 30sub_D878(v0 + 4) = *(void *)(a2 + 304);
  return a1;
}

uint64_t getEnumTagSinglePayload for ComplexMedLoggingErrorFlow(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 312))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ComplexMedLoggingErrorFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 18sub_D878(v0 + 4) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 10sub_D878(v0 + 4) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + sub_D7EC(v0 + 16, v0 + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 2sub_D878(v0 + 4) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 26sub_D878(v0 + 4) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 312) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 312) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ComplexMedLoggingErrorFlow()
{
  return &type metadata for ComplexMedLoggingErrorFlow;
}

uint64_t sub_80710(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18D47C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1FF58;
  return sub_7E030(a1);
}

uint64_t sub_80760()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_80784(uint64_t a1)
{
  __int128 v4 = (void *)swift_task_alloc(dword_18D48C);
  *(void *)(v2 + 16) = v4;
  *__int128 v4 = v2;
  v4[1] = sub_20098;
  return sub_1FE14(a1, v1 + 16);
}

uint64_t sub_807DC(uint64_t *a1, uint64_t a2)
{
  return a2;
}

void *sub_80810(void *a1)
{
  return a1;
}

uint64_t sub_8083C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_494C(&qword_18B168);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_80884(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_494C(&qword_18D4A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_808CC()
{
  unint64_t result = qword_18D4B0[0];
  if (!qword_18D4B0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_13B8CC, &type metadata for ComplexMedLoggingErrorFlow);
    atomic_store(result, qword_18D4B0);
  }

  return result;
}

uint64_t sub_80908()
{
  return swift_task_dealloc(*(void *)(v0 + 800));
}

uint64_t sub_8093C()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[25];
  sub_500C(v0 + 21, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t sub_8096C()
{
  return swift_task_dealloc(*(void *)(v0 + 1136));
}

  ;
}

uint64_t sub_80A14()
{
  return dispatch thunk of DeviceState.isPad.getter(v1, v2);
}

uint64_t sub_80A38()
{
  return dispatch thunk of DeviceState.isPhone.getter(v1, v2);
}

uint64_t sub_80A5C()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v0, 1LL, v1);
}

uint64_t sub_80A7C(uint64_t a1)
{
  return swift_beginAccess(a1, v1, 0LL, 0LL);
}

uint64_t sub_80A90(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_80AAC()
{
  return ((uint64_t (*)(void))dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:))();
}

uint64_t sub_80AC8()
{
  return sub_807DC(v1, v0);
}

uint64_t sub_80AD8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(v2[91] + 16LL))( v2[85] + *(int *)(v2[84] + 20LL),  a2,  v2[90]);
}

uint64_t sub_80AFC(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

  ;
}

void *sub_80B40()
{
  return sub_80810(v0);
}

  ;
}

uint64_t sub_80B58@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_80B78()
{
  uint64_t v1 = v0 + 34;
  uint64_t v2 = v0[37];
  uint64_t v3 = v0[38];
  sub_500C(v1, v2);
  return *(unsigned int *)(*(void *)(v3 + 8) + 4LL);
}

uint64_t sub_80BA8()
{
  *uint64_t v0 = v2;
  v0[1] = v1;
  sub_500C((void *)(v3 + 216), *(void *)(v3 + 240));
  return type metadata accessor for WellnessSnippets(0LL);
}

uint64_t sub_80BD0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 728) + 32LL))(a1, v1, v2);
}

uint64_t sub_80BE4(__n128 *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  a1[1] = a4;
  a1[2].n128_u64[0] = v4;
  return specialized Array._endMutation()(a1, a2, a3);
}

uint64_t sub_80BF8(uint64_t a1)
{
  return swift_allocObject(a1, 40LL, 7LL);
}

void sub_80C04(void *a1@<X8>)
{
}

uint64_t sub_80C18()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_80C28(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_80C30()
{
  return swift_storeEnumTagMultiPayload(v1, v0, 4LL);
}

uint64_t sub_80C40(uint64_t a1)
{
  return sub_201A8(v1, a1);
}

uint64_t sub_80C50()
{
  return swift_task_dealloc(*(void *)(v0 + 592));
}

uint64_t sub_80C60@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

  ;
}

  ;
}

uint64_t sub_80C8C()
{
  return Logger.wellness.unsafeMutableAddressor();
}

uint64_t sub_80C98()
{
  return v0;
}

void sub_80CA4(uint64_t a1)
{
  uint64_t v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t destroy for InstallAppFlow(void *a1)
{
  return swift_release();
}

uint64_t initializeWithCopy for InstallAppFlow(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 2sub_D878(v0 + 4) = v4;
  (**(void (***)(void))(v4 - 8))();
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 6sub_D878(v0 + 4) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  uint64_t v6 = *(void *)(a2 + 80);
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = v7;
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

void *assignWithCopy for InstallAppFlow(void *a1, void *a2)
{
  a1[10] = a2[10];
  swift_retain();
  swift_release();
  a1[11] = a2[11];
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for InstallAppFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

uint64_t assignWithTake for InstallAppFlow(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + sub_D7EC(v0 + 16, v0 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for InstallAppFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 96))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InstallAppFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0LL;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + sub_D7EC(v0 + 16, v0 + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 2sub_D878(v0 + 4) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 96) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 2sub_D878(v0 + 4) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for InstallAppFlow()
{
  return &type metadata for InstallAppFlow;
}

uint64_t sub_80EE0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_81C18();
  return Flow.deferToExecuteAsync(_:)(a1, a2, &type metadata for InstallAppFlow, v4);
}

uint64_t sub_80F20(uint64_t a1)
{
  v2[40] = a1;
  v2[41] = v1;
  uint64_t v3 = type metadata accessor for GenericButtonModel(0LL);
  v2[42] = v3;
  v2[43] = sub_A5C0(*(void *)(v3 - 8));
  uint64_t v4 = sub_494C(&qword_189CF8);
  v2[44] = sub_A5C0(*(void *)(v4 - 8));
  uint64_t v5 = type metadata accessor for URL(0LL);
  v2[45] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[46] = v6;
  v2[47] = sub_A5C0(v6);
  uint64_t v7 = type metadata accessor for DialogPhase(0LL);
  v2[48] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[49] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[50] = swift_task_alloc(v9);
  v2[51] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[52] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[53] = v11;
  v2[54] = sub_A5C0(v11);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_80FEC()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_18B08C);
  *(void *)(v0 + 440) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_81038;
  return sub_3CAE0();
}

uint64_t sub_81038(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc(*(void *)(*v2 + 440));
  if (v1) {
    swift_errorRelease(v1);
  }
  else {
    *(void *)(v4 + 448) = a1;
  }
  sub_A964();
  return swift_task_switch(v5, v6, v7);
}

uint64_t sub_810AC()
{
  uint64_t v1 = (void *)v0[56];
  v0[57] = v1;
  uint64_t v3 = v0[50];
  uint64_t v2 = v0[51];
  uint64_t v4 = v0[48];
  uint64_t v5 = v0[49];
  static DialogPhase.error.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
  OutputGenerationManifest.init(dialogPhase:_:)(v3, sub_A633C, 0LL);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  OutputGenerationManifest.printSupportingDialogInDisplayModes.setter(1LL);
  if (v1)
  {
    id v6 = [v1 catId];
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    uint64_t v9 = v8;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v9 = 0LL;
  }

  uint64_t v10 = (void *)v0[41];
  OutputGenerationManifest.responseViewId.setter(v7, v9);
  uint64_t v11 = v10[3];
  uint64_t v12 = v10[4];
  sub_500C(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  uint64_t v13 = v0[17];
  uint64_t v14 = v0[18];
  sub_81CE4();
  char v15 = dispatch thunk of DeviceState.isPhone.getter(v13, v14);
  sub_81BB8((uint64_t)v10, (uint64_t)(v0 + 2));
  if ((v15 & 1) != 0)
  {
    sub_81BEC(v0 + 2);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 14);
LABEL_7:
    uint64_t v50 = v1;
    uint64_t v22 = v0[44];
    uint64_t v21 = v0[45];
    _StringGuts.grow(_:)(33LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    v0[39] = 1242545199LL;
    v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    object = v23._object;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(object);
    URL.init(string:)();
    sub_249D4();
    uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v22, 1LL, v21);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }

    else
    {
      uint64_t v27 = v0[46];
      uint64_t v26 = v0[47];
      uint64_t v29 = v0[42];
      Swift::String v28 = (uint64_t *)v0[43];
      uint64_t v30 = v0[41];
      sub_81CCC(v26, v0[44], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 32));
      uint64_t v31 = sub_81C54();
      uint64_t v33 = v32;
      sub_81CCC((uint64_t)v28 + *(int *)(v29 + 20), v26, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 16));
      *Swift::String v28 = v31;
      v28[1] = v33;
      sub_D7EC(v30 + 40, (uint64_t)(v0 + 29));
      uint64_t v34 = v0[32];
      sub_500C(v0 + 29, v34);
      uint64_t v35 = type metadata accessor for WellnessSnippets(0LL);
      v0[37] = v35;
      v0[38] = sub_20168();
      uint64_t v36 = sub_B76C(v0 + 34);
      sub_201A8((uint64_t)v28, (uint64_t)v36);
      swift_storeEnumTagMultiPayload(v36, v35, 4LL);
      uint64_t v37 = sub_494C(&qword_18A460);
      uint64_t result = sub_80BF8(v37);
      *(_OWORD *)(result + 16) = xmmword_138BA0;
      if (v50)
      {
        sub_81CD4(result, v38, v39);
        v0[58] = 0xD00000000000001FLL;
        uint64_t v40 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)[1];
        id v41 = v50;
        uint64_t v42 = (void *)swift_task_alloc(v40);
        v0[59] = v42;
        *uint64_t v42 = v0;
        v42[1] = sub_8150C;
        return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)( v0[40],  v0 + 34,  0xD00000000000001FLL,  v0[54],  v34);
      }
    }

    __break(1u);
    goto LABEL_14;
  }

  uint64_t v16 = v0[5];
  uint64_t v17 = v0[6];
  sub_500C(v0 + 2, v16);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
  uint64_t v18 = v0[22];
  uint64_t v19 = v0[23];
  sub_500C(v0 + 19, v18);
  uint64_t v20 = dispatch thunk of DeviceState.isPad.getter(v18, v19);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 19);
  sub_81BEC(v0 + 2);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 14);
  if ((v20 & 1) != 0) {
    goto LABEL_7;
  }
  sub_81C94();
  uint64_t v43 = v0[27];
  sub_500C((void *)v20, v43);
  uint64_t v44 = sub_494C(&qword_18A460);
  uint64_t result = sub_80BF8(v44);
  *(_OWORD *)(result + 16) = xmmword_138BA0;
  if (v1)
  {
    sub_81CD4(result, v45, v46);
    v0[60] = v51;
    uint64_t v47 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)[1];
    id v48 = v1;
    uint64_t v49 = (void *)swift_task_alloc(v47);
    v0[61] = v49;
    *uint64_t v49 = v0;
    v49[1] = sub_81608;
    return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)( v0[40],  v51,  v0[54],  v43);
  }

uint64_t sub_8150C()
{
  uint64_t v1 = v0 + 34;
  uint64_t v2 = v0[58];
  sub_20264(v0[59]);
  swift_bridgeObjectRelease(v2);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
  sub_A964();
  return swift_task_switch(v3, v4, v5);
}

uint64_t sub_8155C()
{
  uint64_t v2 = *(void *)(v0 + 424);
  uint64_t v1 = *(void *)(v0 + 432);
  uint64_t v3 = *(void *)(v0 + 416);
  uint64_t v5 = *(void *)(v0 + 368);
  uint64_t v4 = *(void *)(v0 + 376);
  uint64_t v6 = *(void *)(v0 + 360);
  uint64_t v7 = *(void *)(v0 + 344);

  sub_201EC(v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_202F4(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_81CA8();
  swift_task_dealloc(v0 + 232);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_81608()
{
  return sub_A5D0();
}

uint64_t sub_81640()
{
  uint64_t v3 = *(void *)(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 432);
  uint64_t v4 = *(void *)(v0 + 416);

  sub_202F4(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_81CA8();
  swift_task_dealloc(v0 + 192);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_816C0()
{
  v0[57] = 0LL;
  uint64_t v2 = v0[50];
  uint64_t v1 = v0[51];
  uint64_t v3 = v0[48];
  uint64_t v4 = v0[49];
  static DialogPhase.error.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  OutputGenerationManifest.init(dialogPhase:_:)(v2, sub_A633C, 0LL);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  OutputGenerationManifest.printSupportingDialogInDisplayModes.setter(1LL);
  uint64_t v5 = v0[41];
  OutputGenerationManifest.responseViewId.setter(0LL, 0LL);
  sub_745A4();
  sub_202B4();
  uint64_t v6 = v0[17];
  uint64_t v7 = v0[18];
  sub_500C(v0 + 14, v6);
  char v8 = dispatch thunk of DeviceState.isPhone.getter(v6, v7);
  sub_81BB8(v5, (uint64_t)(v0 + 2));
  if ((v8 & 1) != 0)
  {
    sub_81BEC(v0 + 2);
    sub_20300();
  }

  else
  {
    sub_81CE4();
    sub_202B4();
    uint64_t v9 = v0[22];
    uint64_t v10 = v0[23];
    sub_745A4();
    uint64_t v11 = dispatch thunk of DeviceState.isPad.getter(v9, v10);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 19);
    sub_81BEC(v0 + 2);
    sub_20300();
    if ((v11 & 1) == 0) {
      goto LABEL_7;
    }
  }

  uint64_t v13 = v0[44];
  uint64_t v12 = v0[45];
  _StringGuts.grow(_:)(33LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v0[39] = 1242545199LL;
  v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(object);
  URL.init(string:)();
  sub_249D4();
  uint64_t v17 = v0[46];
  uint64_t v16 = v0[47];
  uint64_t v19 = v0[42];
  uint64_t v18 = (uint64_t *)v0[43];
  uint64_t v20 = v0[41];
  sub_81CCC(v16, v0[44], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 32));
  uint64_t v21 = sub_81C54();
  uint64_t v23 = v22;
  sub_81CCC((uint64_t)v18 + *(int *)(v19 + 20), v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 16));
  *uint64_t v18 = v21;
  v18[1] = v23;
  sub_D7EC(v20 + 40, (uint64_t)(v0 + 29));
  sub_500C(v0 + 29, v0[32]);
  uint64_t v24 = type metadata accessor for WellnessSnippets(0LL);
  v0[37] = v24;
  v0[38] = sub_20168();
  uint64_t v11 = (uint64_t)sub_B76C(v0 + 34);
  sub_201A8((uint64_t)v18, v11);
  swift_storeEnumTagMultiPayload(v11, v24, 4LL);
  uint64_t v25 = sub_494C(&qword_18A460);
  sub_80BF8(v25);
  __break(1u);
LABEL_7:
  sub_81C94();
  sub_500C((void *)v11, v0[27]);
  uint64_t v26 = sub_494C(&qword_18A460);
  uint64_t result = sub_80BF8(v26);
  __break(1u);
  return result;
}

uint64_t sub_81988(uint64_t a1)
{
  *(void *)(v1 + 10sub_D878(v0 + 4) = a1;
  uint64_t v2 = (void *)swift_task_alloc(dword_18D4D4);
  *(void *)(v1 + 112) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_819DC;
  return sub_80F20(v1 + 16);
}

uint64_t sub_819DC()
{
  return sub_A5D0();
}

uint64_t sub_81A10()
{
  uint64_t v1 = swift_allocObject(&unk_17E168, 56LL, 7LL);
  sub_20004((__int128 *)(v0 + 56), v1 + 16);
  static OutputPublisherFactory.makeOutputPublisherAsync()(v4);
  uint64_t v2 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  *(void *)(v0 + 96) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)(v4, &unk_18D4E0, v1);
  static ExecuteResponse.complete<A>(next:)(v0 + 96);
  sub_20300();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_81AEC(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18D4CC);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1FF58;
  return sub_81988(a1);
}

uint64_t sub_81B3C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_81B60(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc(dword_18D4DC);
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_20098;
  return sub_1FE14(a1, v1 + 16);
}

uint64_t sub_81BB8(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_81BEC(void *a1)
{
  return a1;
}

unint64_t sub_81C18()
{
  unint64_t result = qword_18D4E8;
  if (!qword_18D4E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_13B954, &type metadata for InstallAppFlow);
    atomic_store(result, (unint64_t *)&qword_18D4E8);
  }

  return result;
}

uint64_t sub_81C54()
{
  return sub_90E74(0x707041206E65704FLL, 0xEE0065726F745320LL, 0x537070416E65706FLL, (void *)0xEC00000065726F74LL);
}

uint64_t sub_81C94()
{
  return sub_D7EC(*(void *)(v0 + 328) + 40LL, v0 + 192);
}

uint64_t sub_81CA8()
{
  return swift_task_dealloc(*(void *)(v1 + 432));
}

uint64_t sub_81CCC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_81CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = v3;
  return specialized Array._endMutation()(a1, a2, a3);
}

void *sub_81CE4()
{
  return sub_500C(v0, v1);
}

uint64_t sub_81CF0()
{
  uint64_t v1 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v2 = *(char **)(v1 - 8);
  v44[4] = v1;
  uint64_t v45 = v2;
  uint64_t v3 = __chkstk_darwin(v1);
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)v44 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v44 - v10;
  uint64_t v12 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)(v0);
  uint64_t v13 = v12;
  if ((unint64_t)v12 >> 62)
  {
    if (v12 < 0) {
      uint64_t v35 = v12;
    }
    else {
      uint64_t v35 = v12 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v12);
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter(v35);
    sub_82234();
    if (v36) {
      goto LABEL_3;
    }
  }

  else if (*(void *)((char *)&dword_10 + (v12 & 0xFFFFFFFFFFFFF8LL)))
  {
LABEL_3:
    sub_398E0(0LL, (v13 & 0xC000000000000001LL) == 0, v13);
    if ((v13 & 0xC000000000000001LL) != 0)
    {
      uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v13);
    }

    else
    {
      uint64_t v14 = *(void *)(v13 + 32);
      swift_retain();
    }

    char v15 = v11;
    uint64_t v16 = sub_82234();
    uint64_t v17 = Logger.wellness.unsafeMutableAddressor(v16);
    sub_821F4(v17);
    uint64_t v18 = v4;
    sub_566C0((uint64_t)v11, v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
    uint64_t v19 = swift_retain_n(v14, 4LL);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = sub_A5E8(22LL);
      uint64_t v45 = v15;
      uint64_t v23 = v5;
      uint64_t v24 = v22;
      uint64_t v25 = sub_A5E8(64LL);
      uint64_t v47 = v25;
      *(_DWORD *)uint64_t v24 = 136315394;
      uint64_t v26 = UsoTask.baseEntityAsString.getter();
      uint64_t v46 = sub_82228(v26, v27);
      sub_82218(v46, v28, v29, v24 + 12);
      sub_D8F0();
      uint64_t v30 = swift_bridgeObjectRelease(v14);
      *(_WORD *)(v24 + 12) = 2080;
      uint64_t v31 = UsoTask.verbString.getter(v30);
      uint64_t v46 = sub_82228(v31, v32);
      sub_82218(v46, v33, v34, v24 + 22);
      sub_D8F0();
      swift_bridgeObjectRelease(v14);
      _os_log_impl(&dword_0, v20, v21, "NLv4 Wellness Parse: Input is entity=%s verb=%s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy(v25, 2LL);
      sub_5050(v25);
      sub_5050(v24);

      (*(void (**)(char *, uint64_t))(v23 + 8))(v45, v18);
    }

    else
    {

      swift_release_n(v14, 4LL);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v15, v4);
    }

    return v14;
  }

  uint64_t v37 = sub_82234();
  uint64_t v38 = Logger.wellness.unsafeMutableAddressor(v37);
  sub_821F4(v38);
  uint64_t v39 = sub_566C0((uint64_t)v9, v38, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
  uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
  os_log_type_t v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = (uint8_t *)sub_A5E8(2LL);
    *(_WORD *)uint64_t v42 = 0;
    _os_log_impl(&dword_0, v40, v41, "NLv4 Wellness Parse: No tasks in input", v42, 2u);
    sub_5050((uint64_t)v42);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  return 0LL;
}

uint64_t sub_821F4(uint64_t a1)
{
  return swift_beginAccess(a1, v1 - 112, 0LL, 0LL);
}

uint64_t sub_82204()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 136) + 8LL))(v0, v1);
}

uint64_t sub_82218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 128, v5, v4, a4);
}

uint64_t sub_82228(uint64_t a1, unint64_t a2)
{
  return sub_39178(a1, a2, (uint64_t *)(v2 - 120));
}

uint64_t sub_82234()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_8223C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_89E20();
  sub_A410((unint64_t *)&qword_18D650, type metadata accessor for MainFlow, (uint64_t)&unk_13BA50);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v5);
}

uint64_t sub_82298(uint64_t a1)
{
  v2[118] = v1;
  v2[117] = a1;
  uint64_t v3 = sub_494C(&qword_18D5A0);
  v2[119] = sub_A5C0(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for Locale(0LL);
  v2[120] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[121] = v5;
  v2[122] = sub_A5C0(v5);
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  v2[123] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[124] = v7;
  v2[125] = sub_A5C0(v7);
  uint64_t v8 = sub_89DAC();
  v2[126] = v8;
  v2[127] = *(void *)(v8 - 8);
  v2[128] = sub_A5B8();
  v2[129] = sub_A5B8();
  uint64_t v9 = type metadata accessor for USOParse(0LL);
  v2[130] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[131] = v10;
  v2[132] = sub_A5C0(v10);
  uint64_t v11 = type metadata accessor for ExecutionLocation(0LL);
  v2[133] = v11;
  v2[134] = *(void *)(v11 - 8);
  v2[135] = sub_A5B8();
  v2[136] = sub_A5B8();
  v2[137] = sub_A5B8();
  v2[138] = sub_A5B8();
  v2[139] = sub_A5B8();
  v2[140] = sub_A5B8();
  v2[141] = sub_A5B8();
  uint64_t v12 = sub_D984();
  v2[142] = v12;
  v2[143] = *(void *)(v12 - 8);
  v2[144] = sub_A5B8();
  v2[145] = sub_A5B8();
  v2[146] = sub_A5B8();
  v2[147] = sub_A5B8();
  v2[148] = sub_A5B8();
  v2[149] = sub_A5B8();
  v2[150] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_8240C(uint64_t a1)
{
  uint64_t v2 = v1[150];
  uint64_t v3 = v1[143];
  uint64_t v4 = v1[142];
  uint64_t v5 = Logger.wellness.unsafeMutableAddressor(a1);
  v1[151] = v5;
  sub_A5DC(v5, (uint64_t)(v1 + 96));
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v1[152] = v6;
  v6(v2, v5, v4);
  sub_AB5C();
  os_log_type_t v7 = sub_AB70();
  if (sub_A634(v7))
  {
    uint64_t v8 = (uint8_t *)sub_A5E8(2LL);
    *(_WORD *)uint64_t v8 = 0;
    sub_232EC(&dword_0, (os_log_s *)(v1 + 96), (os_log_type_t)v2, " ", v8);
    sub_5050((uint64_t)v8);
  }

  uint64_t v9 = v1[150];
  uint64_t v10 = (os_log_s *)v1[149];
  uint64_t v11 = v1[143];
  uint64_t v12 = v1[142];

  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v1[153] = v13;
  v13(v9, v12);
  sub_A5DC(v5, (uint64_t)(v1 + 111));
  uint64_t v14 = ((uint64_t (*)(os_log_s *, uint64_t, uint64_t))v6)(v10, v5, v12);
  char v15 = v10;
  Logger.logObject.getter(v14);
  os_log_type_t v16 = sub_AB70();
  BOOL v17 = sub_A634(v16);
  uint64_t v18 = v1[149];
  uint64_t v19 = v1[142];
  if (v17)
  {
    uint64_t v20 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v21 = sub_A5E8(32LL);
    uint64_t v24 = v21;
    *(_DWORD *)uint64_t v20 = 136315138;
    v1[116] = sub_39178(0x776F6C466E69614DLL, 0xE800000000000000LL, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 116, v1 + 117, v20 + 4, v20 + 12);
    sub_DA24( &dword_0,  v15,  (os_log_type_t)v9,  "🏳️‍🌈=====Executing %s from WellnessFlowPlugin=====🏳️‍🌈",  v20);
    sub_A81C(v21);
    sub_5050(v21);
    sub_5050((uint64_t)v20);
  }

  v13(v18, v19);
  uint64_t v22 = (void *)swift_task_alloc(dword_18D5AC);
  v1[154] = v22;
  *uint64_t v22 = v1;
  v22[1] = sub_8261C;
  return sub_8318C();
}

uint64_t sub_8261C(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1232LL);
  *(_BYTE *)(*(void *)v1 + 537LL) = a1;
  swift_task_dealloc(v2);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_8266C()
{
  uint64_t v1 = *(os_log_s **)(v0 + 1208);
  uint64_t v2 = *(void *)(v0 + 1136);
  if (*(_BYTE *)(v0 + 537) != 1)
  {
    uint64_t v42 = (_OWORD *)(v0 + 336);
    uint64_t v43 = *(uint8_t **)(v0 + 1152);
    sub_A5DC(*(void *)(v0 + 1208), v0 + 864);
    sub_89D5C((uint64_t)v43);
    sub_AB5C();
    os_log_type_t v44 = sub_A898();
    if (sub_232DC(v44))
    {
      uint64_t v45 = (_WORD *)sub_A5E8(2LL);
      sub_36A44(v45);
      sub_232EC( &dword_0,  v1,  (os_log_type_t)v2,  "🚨 Could not enable redaction of SELF messages for siri session, returning Generic Error 🚨",  v43);
      sub_5050((uint64_t)v43);
    }

    uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v0 + 1224);
    uint64_t v47 = *(void *)(v0 + 1152);
    goto LABEL_13;
  }

  uint64_t v3 = *(void *)(v0 + 1184);
  sub_A5DC(*(void *)(v0 + 1208), v0 + 840);
  sub_89D5C(v3);
  sub_23374();
  os_log_type_t v4 = sub_AB70();
  if (sub_A988(v4))
  {
    uint64_t v5 = (uint8_t *)sub_A5E8(2LL);
    *(_WORD *)uint64_t v5 = 0;
    sub_232EC( &dword_0,  v1,  (os_log_type_t)v3,  "✅ Successfully enabled redaction of SELF messages for the Siri session",  v5);
    sub_5050((uint64_t)v5);
  }

  uint64_t v6 = *(uint8_t **)(v0 + 1224);
  uint64_t v7 = *(void *)(v0 + 1184);
  uint64_t v8 = *(void *)(v0 + 1136);

  ((void (*)(uint64_t, uint64_t))v6)(v7, v8);
  type metadata accessor for SiriEnvironment(0LL);
  uint64_t v9 = static SiriEnvironment.forCurrentTask.getter();
  uint64_t v10 = *(uint64_t (**)(os_log_s *, uint64_t, uint64_t))(v0 + 1216);
  uint64_t v11 = *(void *)(v0 + 1208);
  uint64_t v12 = *(void *)(v0 + 1136);
  if (!v9)
  {
    uint64_t v42 = (_OWORD *)(v0 + 16);
    uint64_t v1 = *(os_log_s **)(v0 + 1160);
    sub_A5DC(*(void *)(v0 + 1208), v0 + 816);
    uint64_t v48 = v10(v1, v11, v12);
    Logger.logObject.getter(v48);
    os_log_type_t v49 = sub_A898();
    if (sub_232DC(v49))
    {
      uint64_t v50 = (_WORD *)sub_A5E8(2LL);
      sub_36A44(v50);
      sub_232EC( &dword_0,  v1,  (os_log_type_t)v11,  "Could not find information about current request in Siri Environment, returning Generic Error",  v6);
      sub_5050((uint64_t)v6);
    }

    uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v0 + 1224);
    uint64_t v47 = *(void *)(v0 + 1160);
LABEL_13:
    uint64_t v51 = *(void *)(v0 + 1136);
    uint64_t v52 = *(void *)(v0 + 944);

    v46(v47, v51);
    uint64_t v53 = sub_89E20();
    sub_A13C((_OWORD *)(v52 + *(int *)(v53 + 28)), v42);
    sub_A178();
    static ExecuteResponse.complete<A>(next:)(v42);
    sub_A1B4(v42);
    goto LABEL_41;
  }

  uint64_t v130 = *(os_log_s **)(v0 + 1176);
  uint64_t v13 = *(void *)(v0 + 1128);
  uint64_t v14 = *(void *)(v0 + 1120);
  uint64_t v138 = *(void *)(v0 + 1112);
  uint64_t v144 = *(void *)(v0 + 1104);
  uint64_t v15 = *(void *)(v0 + 1072);
  uint64_t v134 = *(void *)(v0 + 1064);
  SiriEnvironment.currentRequest.getter();
  swift_release();
  sub_9D218();
  uint64_t v16 = sub_494C(&qword_18D5B0);
  uint64_t v17 = *(void *)(v15 + 72);
  uint64_t v18 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v19 = (v18 + 32) & ~v18;
  uint64_t v20 = swift_allocObject(v16, v19 + 2 * v17, v18 | 7);
  *(_OWORD *)(v20 + 16) = xmmword_138D90;
  uint64_t v142 = v20;
  uint64_t v21 = v20 + v19;
  uint64_t v22 = ((uint64_t (*)(void))static ExecutionLocation.device.getter)();
  uint64_t v118 = v17;
  uint64_t v23 = static ExecutionLocation.none.getter(v22);
  uint64_t v24 = CurrentRequest.asrExecutionLocation.getter(v23);
  CurrentRequest.nlExecutionLocation.getter(v24);
  sub_A5DC(v11, v0 + 792);
  v10(v130, v11, v12);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  v25(v138, v13, v134);
  uint64_t v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v25;
  v25(v144, v14, v134);
  uint64_t v26 = (os_log_s *)sub_23374();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1224);
  uint64_t v30 = *(void *)(v0 + 1176);
  uint64_t v31 = *(void *)(v0 + 1112);
  uint64_t v32 = *(void *)(v0 + 1104);
  uint64_t v33 = *(void *)(v0 + 1072);
  if (v28)
  {
    uint64_t v145 = *(void *)(v0 + 1136);
    uint64_t v135 = *(void *)(v0 + 1176);
    uint64_t v34 = sub_A5E8(22LL);
    uint64_t v127 = sub_A5E8(64LL);
    uint64_t v148 = v127;
    *(_DWORD *)uint64_t v34 = 136315394;
    sub_A410( &qword_18D5C0,  (uint64_t (*)(uint64_t))&type metadata accessor for ExecutionLocation,  (uint64_t)&protocol conformance descriptor for ExecutionLocation);
    uint64_t v35 = sub_89E00();
    os_log_type_t type = v27;
    *(void *)(v0 + 912) = sub_39178(v35, v36, &v148);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 912, v0 + 920, v34 + 4, v34 + 12);
    sub_DA1C();
    uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
    sub_89D8C(v31);
    *(_WORD *)(v34 + 12) = 2080;
    uint64_t v38 = sub_89E00();
    unint64_t v40 = v39;
    *(void *)(v0 + 920) = sub_39178(v38, v39, &v148);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 920, v0 + 928, v34 + 14, v34 + 22);
    swift_bridgeObjectRelease(v40);
    sub_89D8C(v32);
    _os_log_impl(&dword_0, v26, type, "ASR Location: %s, NL Location: %s", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy(v127, 2LL);
    sub_5050(v127);
    sub_5050(v34);

    uint64_t v41 = v29(v135, v145);
  }

  else
  {
    uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
    uint64_t v54 = *(void *)(v0 + 1136);
    sub_89D8C(*(void *)(v0 + 1112));
    sub_89D8C(v32);

    uint64_t v41 = v29(v30, v54);
  }

  uint64_t v55 = *(void *)(v0 + 1128);
  uint64_t v56 = *(void *)(v0 + 1120);
  uint64_t v57 = *(void *)(v0 + 1096);
  uint64_t v58 = *(void *)(v0 + 1088);
  uint64_t v59 = *(void *)(v0 + 1064);
  static ExecutionLocation.unknown.getter(v41);
  LOBYTE(v55) = static ExecutionLocation.== infix(_:_:)(v55, v57);
  sub_89D8C(v57);
  uint64_t v60 = v139(v58, v56, v59);
  if ((v55 & 1) != 0)
  {
    uint64_t v61 = *(void *)(v0 + 1096);
    uint64_t v62 = *(void *)(v0 + 1088);
    uint64_t v63 = *(void *)(v0 + 1064);
    static ExecutionLocation.device.getter(v60);
    char v64 = static ExecutionLocation.== infix(_:_:)(v62, v61);
    v37(v61, v63);
  }

  else
  {
    char v64 = 0;
  }

  uint64_t v65 = *(os_log_s **)(v0 + 1208);
  uint64_t v66 = *(void *)(v0 + 1168);
  uint64_t v146 = v37;
  v37(*(void *)(v0 + 1088), *(void *)(v0 + 1064));
  sub_A5DC((uint64_t)v65, v0 + 744);
  sub_89D5C(v66);
  sub_23374();
  os_log_type_t v67 = sub_AB70();
  if (sub_A988(v67))
  {
    uint64_t v68 = (uint8_t *)sub_A5E8(8LL);
    *(_DWORD *)uint64_t v68 = 67109120;
    *(_DWORD *)(v0 + 540) = v64 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 540, v0 + 544, v68 + 4, v68 + 8);
    sub_89E18(&dword_0, v65, (os_log_type_t)v66, "Is text request: %{BOOL}d", v68);
    sub_5050((uint64_t)v68);
  }

  char v136 = v64;
  uint64_t v123 = (uint64_t *)(v0 + 176);
  log = (uint64_t *)(v0 + 496);
  uint64_t v128 = (void *)(v0 + 584);
  uint64_t v131 = (void *)(v0 + 544);
  uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v0 + 1224);
  uint64_t v70 = *(void *)(v0 + 1168);
  uint64_t v121 = (uint64_t *)(v0 + 704);
  uint64_t v71 = *(void *)(v0 + 1136);
  uint64_t v72 = *(void *)(v0 + 1032);
  uint64_t v73 = *(void *)(v0 + 1016);
  uint64_t v74 = *(void *)(v0 + 1008);
  uint64_t v75 = *(void *)(v0 + 944);

  v69(v70, v71);
  uint64_t v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16);
  v76(v72, v75, v74);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v73 + 88))(v72, v74) == enum case for Parse.uso(_:))
  {
    uint64_t v77 = *(void *)(v0 + 1056);
    uint64_t v78 = *(void *)(v0 + 1048);
    uint64_t v79 = *(void *)(v0 + 992);
    (*(void (**)(void, void))(*(void *)(v0 + 1016) + 96LL))( *(void *)(v0 + 1032),  *(void *)(v0 + 1008));
    uint64_t v80 = sub_89C98(v77, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 32));
    USOParse.userParse.getter(v80);
    uint64_t v81 = sub_E8C24();
    sub_89E0C(*(uint64_t (**)(uint64_t, uint64_t))(v79 + 8));
    sub_89D84(v77, *(uint64_t (**)(uint64_t, uint64_t))(v78 + 8));
    uint64_t v82 = v118;
    if (v81) {
      swift_release();
    }
  }

  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 1016) + 8LL))( *(void *)(v0 + 1032),  *(void *)(v0 + 1008));
    uint64_t v82 = v118;
  }

  uint64_t v83 = *(void *)(v142 + 16);
  if (v83)
  {
    sub_A410( &qword_18D5B8,  (uint64_t (*)(uint64_t))&type metadata accessor for ExecutionLocation,  (uint64_t)&protocol conformance descriptor for ExecutionLocation);
    uint64_t v84 = v21;
    uint64_t v85 = v83;
    while ((sub_89DD0(v84, *(void *)(v0 + 1128), *(void *)(v0 + 1064)) & 1) == 0)
    {
      v84 += v82;
      if (!--v85) {
        goto LABEL_28;
      }
    }

    sub_89D34();
    while ((sub_89DD0(v21, *(void *)(v0 + 1080), *(void *)(v0 + 1064)) & 1) == 0)
    {
      v21 += v82;
      if (!--v83) {
        goto LABEL_34;
      }
    }

    char v136 = 1;
  }

  else
  {
LABEL_28:
    sub_89D34();
  }

uint64_t sub_8318C()
{
  uint64_t v1 = sub_D984();
  v0[19] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[20] = v2;
  v0[21] = sub_A5C0(v2);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_831CC()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = mach_absolute_time();
  id v3 = [(id)objc_opt_self(AssistantSiriAnalytics) sharedAnalytics];
  v0[22] = v3;
  v0[7] = v0 + 24;
  v0[2] = v0;
  v0[3] = sub_8329C;
  uint64_t v4 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v5 = v0 + 10;
  v5[1] = 0x40000000LL;
  v5[2] = sub_85B04;
  v5[3] = &unk_17E440;
  v5[4] = v4;
  [v3 sensitiveCondition:4 startedAt:v2 completion:v5];
  return swift_continuation_await(v1);
}

uint64_t sub_8329C()
{
  *(void *)(*(void *)v0 + 184LL) = *(void *)(*(void *)v0 + 48LL);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_832F0()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 192);

  swift_task_dealloc(*(void *)(v0 + 168));
  return sub_729A4(v1, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_83328(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 152);
  uint64_t v4 = *(void **)(v1 + 176);
  uint64_t v3 = *(void *)(v1 + 184);
  uint64_t v6 = *(void *)(v1 + 160);
  uint64_t v5 = *(os_log_s **)(v1 + 168);
  swift_willThrow(a1);

  uint64_t v8 = Logger.wellness.unsafeMutableAddressor(v7);
  sub_A5DC(v8, v1 + 120);
  (*(void (**)(os_log_s *, uint64_t, uint64_t))(v6 + 16))(v5, v8, v2);
  swift_errorRetain(v3);
  uint64_t v9 = swift_errorRetain(v3);
  uint64_t v10 = v5;
  Logger.logObject.getter(v9);
  os_log_type_t v11 = sub_A898();
  if (os_log_type_enabled(v5, v11))
  {
    uint64_t v12 = *(void *)(v1 + 184);
    uint64_t v13 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v14 = (void *)sub_A5E8(8LL);
    *(_DWORD *)uint64_t v13 = 138412290;
    swift_errorRetain(v12);
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError(v12);
    *(void *)(v1 + 14sub_D878(v0 + 4) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 152, v13 + 4, v13 + 12);
    *uint64_t v14 = v15;
    sub_5B2A8();
    sub_5B2A8();
    sub_DA24( &dword_0,  v10,  v11,  "🚨 Got an error while trying to mark Siri session as Health sensitive! 🚨 \nError:%@",  v13);
    sub_494C(&qword_189CB8);
    sub_A81C((uint64_t)v14);
    sub_5050((uint64_t)v14);
    sub_5050((uint64_t)v13);

    sub_5B2A8();
  }

  else
  {
    sub_A604();
    sub_A604();
    sub_A604();
  }

  (*(void (**)(void, void))(*(void *)(v1 + 160) + 8LL))(*(void *)(v1 + 168), *(void *)(v1 + 152));
  swift_task_dealloc(*(void *)(v1 + 168));
  return (*(uint64_t (**)(void))(v1 + 8))(0LL);
}

void sub_834D4( uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v180 = a5;
  uint64_t v198 = a3;
  int v186 = a2;
  uint64_t v206 = a1;
  uint64_t v203 = a6;
  uint64_t v8 = type metadata accessor for Locale.Region(0LL);
  sub_1C66C(v8, (uint64_t)v213);
  uint64_t v178 = v9;
  sub_D978();
  __chkstk_darwin(v10);
  sub_6D30();
  uint64_t v176 = v11;
  uint64_t v12 = sub_494C(&qword_18D638);
  sub_1C66C(v12, (uint64_t)&v209);
  sub_D978();
  __chkstk_darwin(v13);
  sub_6D30();
  uint64_t v181 = v14;
  sub_494C(&qword_18D5A0);
  sub_D978();
  __chkstk_darwin(v15);
  sub_3751C();
  sub_1C65C();
  __chkstk_darwin(v16);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v17);
  uint64_t v19 = sub_41A8C((uint64_t)&v176 - v18);
  uint64_t v20 = type metadata accessor for Siri_Nlu_External_UserParse(v19);
  sub_1C66C(v20, (uint64_t)v220);
  uint64_t v193 = v21;
  sub_D978();
  __chkstk_darwin(v22);
  sub_6D30();
  uint64_t v24 = sub_41A8C(v23);
  uint64_t v25 = type metadata accessor for USOParse(v24);
  sub_1C66C(v25, (uint64_t)&v223);
  uint64_t v196 = v26;
  sub_D978();
  __chkstk_darwin(v27);
  sub_3751C();
  sub_1C65C();
  __chkstk_darwin(v28);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v29);
  uint64_t v31 = sub_41A8C((uint64_t)&v176 - v30);
  uint64_t v32 = type metadata accessor for Parse(v31);
  sub_1C66C(v32, (uint64_t)&v224);
  unint64_t v204 = v33;
  sub_D978();
  __chkstk_darwin(v34);
  sub_3751C();
  sub_1C65C();
  __chkstk_darwin(v35);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v36);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v37);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v38);
  uint64_t v40 = sub_41A8C((uint64_t)&v176 - v39);
  uint64_t v41 = type metadata accessor for Logger(v40);
  uint64_t v42 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  sub_3751C();
  sub_1C65C();
  __chkstk_darwin(v43);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v44);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v45);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v46);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v47);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v48);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v49);
  sub_56AEC();
  uint64_t v51 = __chkstk_darwin(v50);
  uint64_t v53 = (char *)&v176 - v52;
  uint64_t v54 = Logger.wellness.unsafeMutableAddressor(v51);
  sub_A5DC(v54, (uint64_t)v222);
  uint64_t v55 = *(void (**)(void))(v42 + 16);
  uint64_t v56 = sub_89CA4((uint64_t)v53);
  uint64_t v57 = (os_log_s *)Logger.logObject.getter(v56);
  os_log_type_t v58 = static os_log_type_t.debug.getter();
  BOOL v59 = os_log_type_enabled(v57, v58);
  uint64_t v211 = v41;
  uint64_t v210 = v54;
  if (v59)
  {
    uint64_t v60 = (uint8_t *)sub_A5E8(8LL);
    *(_DWORD *)uint64_t v60 = 67109120;
    uint64_t v41 = (uint64_t)(v60 + 8);
    uint64_t v216 = &type metadata for WellnessFeatureFlagsKey;
    unint64_t v217 = sub_354B0();
    sub_89CBC(2);
    sub_89CB0();
    LODWORD(v215) = 0;
    sub_89B88((uint64_t)&v215, (uint64_t)&v215 + 4, (uint64_t)(v60 + 4));
    sub_89E18(&dword_0, v57, v58, "Server Fallback is Enabled: %{BOOL}d", v60);
    uint64_t v61 = (uint64_t)v60;
    uint64_t v54 = v210;
    sub_5050(v61);
  }

  uint64_t v62 = *(void (**)(char *, uint64_t))(v42 + 8);
  v62(v53, v41);
  sub_A5DC(v54, (uint64_t)v221);
  sub_89CA4((uint64_t)v6);
  uint64_t v63 = swift_bridgeObjectRetain_n(a4, 2LL);
  Logger.logObject.getter(v63);
  os_log_type_t v64 = sub_AB70();
  BOOL v65 = os_log_type_enabled(v6, v64);
  unint64_t v182 = a4;
  if (v65)
  {
    uint64_t v66 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    os_log_type_t v67 = v55;
    uint64_t v68 = sub_A5E8(32LL);
    uint64_t v215 = v68;
    *(_DWORD *)uint64_t v66 = 136315138;
    uint64_t v41 = (uint64_t)(v66 + 12);
    swift_bridgeObjectRetain(a4);
    uint64_t v218 = sub_39178(v198, a4, &v215);
    uint64_t v54 = v210;
    sub_89B88((uint64_t)&v218, (uint64_t)v219, (uint64_t)(v66 + 4));
    swift_bridgeObjectRelease_n(a4, 3LL);
    sub_DA24(&dword_0, v6, v64, "localeIdentifier received in plugin is: %s", v66);
    sub_A81C(v68);
    uint64_t v69 = v68;
    uint64_t v55 = v67;
    sub_5050(v69);
    sub_5050((uint64_t)v66);
  }

  else
  {

    swift_bridgeObjectRelease_n(a4, 2LL);
  }

  v62((char *)v6, v41);
  uint64_t v70 = v209;
  unint64_t v71 = v204;
  uint64_t v72 = (uint64_t)v208;
  sub_A5DC(v54, (uint64_t)&v218);
  sub_89CA4(v72);
  sub_23374();
  os_log_type_t v73 = sub_AB70();
  if (os_log_type_enabled(v6, v73))
  {
    uint64_t v74 = (uint8_t *)sub_A5E8(8LL);
    *(_DWORD *)uint64_t v74 = 67109120;
    uint64_t v41 = (uint64_t)(v74 + 8);
    uint64_t v216 = &type metadata for WellnessFeatureFlagsKey;
    unint64_t v217 = sub_354B0();
    LOBYTE(v215) = 3;
    char v75 = isFeatureEnabled(_:)(&v215);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(&v215);
    int v76 = v75 & 1;
    uint64_t v54 = v210;
    LODWORD(v215) = v76;
    uint64_t v70 = v209;
    sub_89B88((uint64_t)&v215, (uint64_t)&v215 + 4, (uint64_t)(v74 + 4));
    sub_89E18(&dword_0, v6, v73, "overrideOnDeviceCheckFlagIsEnabled: %{BOOL}d", v74);
    uint64_t v77 = (uint64_t)v74;
    uint64_t v72 = (uint64_t)v208;
    sub_5050(v77);
  }

  uint64_t v209 = v62;
  v62((char *)v72, v41);
  uint64_t v216 = &type metadata for WellnessFeatureFlagsKey;
  unint64_t v78 = sub_354B0();
  unint64_t v217 = v78;
  unsigned int v187 = sub_89CBC(3);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(&v215);
  uint64_t v216 = &type metadata for WellnessFeatureFlagsKey;
  unint64_t v217 = v78;
  unint64_t v204 = v78;
  sub_89CBC(2);
  sub_89CB0();
  uint64_t v79 = *(void (**)(uint64_t, uint64_t, void (*)(void, void)))(v71 + 16);
  uint64_t v80 = (uint64_t)v205;
  os_log_type_t v81 = v206;
  sub_89C8C((uint64_t)v205);
  if ((v78 & 1) != 0)
  {
    uint64_t v82 = (os_log_s *)isProbablyWorkout(from:requireWorkoutIdentifier:)(v80, 1LL);
    sub_89D08();
    if ((v82 & 1) != 0)
    {
      sub_A5DC(v54, (uint64_t)&v215);
      v55();
      uint64_t v83 = v191;
      uint64_t v84 = sub_89C8C(v191);
      Logger.logObject.getter(v84);
      os_log_type_t v85 = sub_4662C();
      if (sub_3C758(v85))
      {
        uint64_t v86 = (uint8_t *)sub_A5E8(12LL);
        uint64_t v87 = sub_A5E8(32LL);
        uint64_t v214 = v87;
        *(_DWORD *)uint64_t v86 = 136315138;
        v79(v195, v83, (void (*)(void, void))v70);
        uint64_t v88 = sub_89DE8();
        uint64_t v90 = sub_89DF4(v88, v89);
        uint64_t v91 = sub_89D20(v90);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v91, v92, v86 + 4, v86 + 12);
        sub_DA1C();
        sub_89B98(v83);
        sub_DA24(&dword_0, v82, v81, "Server Fallback for %s", v86);
        sub_A81C(v87);
        sub_5050(v87);
        sub_5050((uint64_t)v86);
      }

      else
      {
        sub_89B98(v83);
      }

      sub_89C78((uint64_t)&v224);
      uint64_t v124 = 2LL;
      goto LABEL_26;
    }
  }

  else
  {
    sub_89D08();
  }

  uint64_t v93 = (uint64_t)v200;
  uint64_t v94 = v199;
  sub_89C8C((uint64_t)v199);
  if ((*(unsigned int (**)(os_log_s *, void))(v71 + 88))(v94, v70) != enum case for Parse.uso(_:))
  {
    sub_89B98((uint64_t)v94);
LABEL_19:
    sub_A5DC(v54, (uint64_t)&v215);
    sub_89CA4(v201);
    uint64_t v113 = v197;
    uint64_t v114 = sub_89C8C(v197);
    Logger.logObject.getter(v114);
    os_log_type_t v115 = sub_3C790();
    if (sub_3C758(v115))
    {
      uint64_t v116 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v117 = sub_A5E8(32LL);
      uint64_t v214 = v117;
      *(_DWORD *)uint64_t v116 = 136315138;
      v79(v195, v113, (void (*)(void, void))v70);
      uint64_t v118 = sub_89DE8();
      uint64_t v120 = sub_89DF4(v118, v119);
      uint64_t v121 = sub_89D20(v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v121, v122, v116 + 4, v116 + 12);
      sub_DA1C();
      sub_89B98(v113);
      sub_DA24(&dword_0, v94, v81, "Scribe received unsupported parse: %s", v116);
      sub_A81C(v117);
      sub_5050(v117);
      sub_5050((uint64_t)v116);
    }

    else
    {
      sub_89B98(v113);
    }

    sub_89C78((uint64_t)&v224);
    goto LABEL_23;
  }

  uint64_t v205 = v55;
  (*(void (**)(os_log_s *, void))(v71 + 96))(v94, v70);
  uint64_t v95 = v196;
  uint64_t v96 = (*(uint64_t (**)(uint64_t, os_log_s *, uint64_t))(v196 + 32))(v202, v94, v207);
  unint64_t v97 = v192;
  USOParse.userParse.getter(v96);
  uint64_t v94 = (os_log_s *)sub_E8C24();
  (*(void (**)(unint64_t, uint64_t))(v193 + 8))(v97, v194);
  uint64_t v200 = v94;
  if (!v94)
  {
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v202, v207);
    os_log_type_t v81 = v206;
    goto LABEL_19;
  }

  sub_A5DC(v54, (uint64_t)&v214);
  sub_89B74(v93);
  unint64_t v98 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v95 + 16);
  uint64_t v99 = v190;
  uint64_t v100 = v98(v190, v202, v207);
  Logger.logObject.getter(v100);
  os_log_type_t v101 = sub_4662C();
  if (sub_89DA4(v94))
  {
    uint64_t v102 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v103 = sub_A5E8(32LL);
    uint64_t v215 = v103;
    *(_DWORD *)uint64_t v102 = 136315138;
    uint64_t v41 = (uint64_t)(v102 + 12);
    uint64_t v104 = v207;
    uint64_t v208 = v102 + 4;
    unint64_t v97 = v184;
    v98(v184, v99, v207);
    uint64_t v105 = String.init<A>(describing:)(v97, v104);
    unint64_t v107 = v106;
    uint64_t v108 = sub_39178(v105, v106, &v215);
    uint64_t v109 = sub_89D20(v108);
    sub_89B88(v109, v110, (uint64_t)v208);
    swift_bridgeObjectRelease(v107);
    uint64_t v111 = *(uint8_t **)(v196 + 8);
    ((void (*)(uint64_t, uint64_t))v111)(v99, v104);
    sub_DA24(&dword_0, v94, v101, "Received uso parse: %s", v102);
    sub_A81C(v103);
    uint64_t v112 = v103;
    uint64_t v54 = v210;
    sub_5050(v112);
    sub_5050((uint64_t)v102);
  }

  else
  {
    uint64_t v111 = *(uint8_t **)(v95 + 8);
    ((void (*)(uint64_t, uint64_t))v111)(v99, v207);
  }

  sub_89C78((uint64_t)&v224);
  uint64_t v125 = v188;
  sub_A5DC(v54, (uint64_t)v213);
  sub_89B74(v125);
  uint64_t v126 = swift_retain_n(v200, 3LL);
  Logger.logObject.getter(v126);
  uint64_t v127 = sub_4662C();
  if (sub_89DA4(v94))
  {
    uint64_t v208 = v111;
    uint64_t v128 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v129 = sub_A5E8(32LL);
    uint64_t v215 = v129;
    *(_DWORD *)uint64_t v128 = 136315138;
    uint64_t v41 = (uint64_t)(v128 + 12);
    uint64_t v130 = (uint64_t)v200;
    swift_retain();
    uint64_t v131 = sub_A1D18();
    unint64_t v97 = v132;
    swift_release();
    uint64_t v212 = sub_39178(v131, v97, &v215);
    sub_89B88((uint64_t)&v212, (uint64_t)v213, (uint64_t)(v128 + 4));
    swift_release_n(v130, 2LL);
    swift_bridgeObjectRelease(v97);
    sub_DA24(&dword_0, v94, (os_log_type_t)v127, "%s", v128);
    sub_A81C(v129);
    uint64_t v133 = v129;
    uint64_t v54 = v210;
    sub_5050(v133);
    sub_5050((uint64_t)v128);
  }

  else
  {

    sub_89CC8();
  }

  uint64_t v134 = sub_89C78((uint64_t)&v224);
  uint64_t v135 = v189;
  unint64_t v136 = v204;
  unint64_t v137 = v187;
  if (((AFDeviceSupportsSiriUOD(v134) | v137) & 1) == 0)
  {
    sub_A5DC(v54, (uint64_t)&v215);
    sub_89B74(v185);
    sub_466E0();
    os_log_type_t v149 = sub_3C790();
    if (!sub_41C30(v149))
    {
LABEL_47:

      sub_89C78((uint64_t)&v224);
      *(void *)(v137 + 32) = sub_89D94((uint64_t)&type metadata for WellnessTask);
      sub_89CD8();
      *(void *)unint64_t v137 = v136;
      sub_89B60();
      *(_BYTE *)(v137 + 40) = 4;
      goto LABEL_28;
    }

    uint64_t v150 = (uint8_t *)sub_A5E8(2LL);
    *(_WORD *)uint64_t v150 = 0;
    uint64_t v151 = "⚠️ This device does not support Siri X, we are going to provide the legacy experience ⚠️";
LABEL_46:
    sub_232EC(&dword_0, (os_log_s *)v137, (os_log_type_t)v136, v151, v150);
    sub_5050((uint64_t)v150);
    goto LABEL_47;
  }

  if (((v186 | v137) & 1) == 0)
  {
    sub_89B60();
    sub_89CC8();
LABEL_23:
    uint64_t v123 = v203;
    v203[4] = 0LL;
    *(_OWORD *)uint64_t v123 = 0u;
    *((_OWORD *)v123 + 1) = 0u;
LABEL_27:
    *((_BYTE *)v123 + 40) = 5;
    goto LABEL_28;
  }

  uint64_t v216 = &type metadata for WellnessFeatureFlagsKey;
  unint64_t v217 = v136;
  LOBYTE(v215) = 0;
  isFeatureEnabled(_:)(&v215);
  sub_89CB0();
  if ((v137 & 1) == 0)
  {
    sub_A5DC(v54, (uint64_t)&v215);
    sub_89B74(v183);
    sub_466E0();
    os_log_type_t v152 = sub_3C790();
    if (!sub_41C30(v152)) {
      goto LABEL_47;
    }
    uint64_t v150 = (uint8_t *)sub_A5E8(2LL);
    *(_WORD *)uint64_t v150 = 0;
    uint64_t v151 = "⚠️ Scribe feature flag is disabled, going to legacy experience ⚠️";
    goto LABEL_46;
  }

  isMedicationRequest(from:)((uint64_t)v200, v138, v139, v140, v141, v142);
  if ((v143 & 1) != 0)
  {
    uint64_t v216 = &type metadata for WellnessFeatureFlagsKey;
    unint64_t v217 = v136;
    sub_89CBC(1);
    sub_89CB0();
    if ((v137 & 1) == 0)
    {
      sub_89B60();
      sub_89CC8();
      uint64_t v124 = 3LL;
LABEL_26:
      uint64_t v123 = v203;
      *uint64_t v203 = v124;
      *(_OWORD *)(v123 + 1) = 0u;
      *(_OWORD *)(v123 + 3) = 0u;
      goto LABEL_27;
    }

    BOOL v144 = v198 == 0x53552D6E65LL && v182 == 0xE500000000000000LL;
    if (v144)
    {
      sub_89DB4(v198, v182, &qword_18D5A0);
      sub_89D68();
    }

    else
    {
      uint64_t v145 = sub_89CE8(v198, v182);
      char v146 = v145;
      sub_89DB4(v145, v147, &qword_18D5A0);
      sub_89D68();
      if ((v146 & 1) == 0)
      {
        sub_89C80();
        sub_A4A4(v135, &qword_18D5A0);
        sub_89B60();
        uint64_t v148 = v203;
LABEL_85:
        sub_89C80();
        *uint64_t v148 = 1LL;
        *(_OWORD *)(v148 + 1) = 0u;
        *(_OWORD *)(v148 + 3) = 0u;
        char v175 = 5;
        goto LABEL_86;
      }
    }

    Locale.Region.init(stringLiteral:)(21333LL, 0xE200000000000000LL);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v97, 0LL, 1LL, v127);
    uint64_t v167 = v41 + *(int *)(v179 + 48);
    sub_41850(v135, v41, &qword_18D5A0);
    sub_41850(v97, v167, &qword_18D5A0);
    sub_72A20(v41);
    if (v144)
    {
      sub_89C80();
      sub_A674(v97);
      sub_A674(v135);
      sub_89B60();
      sub_72A20(v167);
      uint64_t v148 = v203;
      if (v144)
      {
        sub_A4A4(v41, &qword_18D5A0);
        goto LABEL_84;
      }
    }

    else
    {
      uint64_t v168 = v177;
      sub_41850(v41, v177, &qword_18D5A0);
      sub_72A20(v167);
      if (!v169)
      {
        uint64_t v170 = v178;
        uint64_t v171 = v176;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v178 + 32))(v176, v167, v127);
        sub_A410( &qword_18D640,  (uint64_t (*)(uint64_t))&type metadata accessor for Locale.Region,  (uint64_t)&protocol conformance descriptor for Locale.Region);
        char v173 = dispatch thunk of static Equatable.== infix(_:_:)(v168, v171, v127, v172);
        sub_89C80();
        uint64_t v174 = *(void (**)(uint64_t, uint64_t))(v170 + 8);
        v174(v171, v127);
        sub_A674(v97);
        sub_A674(v135);
        sub_89B60();
        v174(v168, v127);
        sub_A674(v41);
        uint64_t v148 = v203;
        if ((v173 & 1) == 0) {
          goto LABEL_85;
        }
LABEL_84:
        *uint64_t v148 = (uint64_t)v200;
        char v175 = 1;
LABEL_86:
        *((_BYTE *)v148 + 40) = v175;
        goto LABEL_28;
      }

      sub_89C80();
      sub_A4A4(v97, &qword_18D5A0);
      sub_A4A4(v135, &qword_18D5A0);
      sub_89B60();
      (*(void (**)(uint64_t, uint64_t))(v178 + 8))(v168, v127);
      uint64_t v148 = v203;
    }

    sub_A4A4(v41, &qword_18D638);
    goto LABEL_85;
  }

  uint64_t v153 = v198;
  uint64_t v154 = v182;
  BOOL v155 = v198 == 0x53552D6E65LL && v182 == 0xE500000000000000LL;
  if (v155
    || ((char v156 = sub_89CE8(v198, v182), v153 == 0x4E432D687ALL) ? (v157 = v154 == 0xE500000000000000LL) : (v157 = 0),
        !v157 ? (char v158 = 0) : (char v158 = 1),
        (v156 & 1) != 0
     || (v158 & 1) != 0
     || (_stringCompareWithSmolCheck(_:_:expecting:)(v153, v154, 0x4E432D687ALL, 0xE500000000000000LL, 0LL) & 1) != 0))
  {
    uint64_t v159 = sub_A1430((uint64_t)v200);
    sub_A0F84();
    if (v160 == 270)
    {
      unint64_t v161 = 0xE800000000000000LL;
      uint64_t v162 = 0x646E756F46746F6ELL;
    }

    else
    {
      uint64_t v162 = sub_10F1C0(v160);
      unint64_t v161 = v163;
    }

    uint64_t v164 = v203;
    FlowTaskLogger.federatedStats(kind:dataTypeString:)(v159, v162, v161, 5LL);
    swift_bridgeObjectRelease(v161);
    char v165 = hasMoodLoggingIdentifier(from:)(v206);
    v164[3] = (uint64_t)&type metadata for WellnessTask;
    v164[4] = sub_46300();
    sub_89CD8();
    *uint64_t v164 = v161;
    sub_89B60();
    if ((v165 & 1) != 0) {
      char v166 = 2;
    }
    else {
      char v166 = 3;
    }
    *((_BYTE *)v164 + 40) = v166;
  }

  else
  {
    MEMORY[0xE500000000000020] = sub_89D94((uint64_t)&type metadata for WellnessTask);
    sub_89CD8();
    MEMORY[0xE500000000000000] = 0x4E432D687ALL;
    sub_89B60();
    MEMORY[0xE500000000000028] = 0;
  }

LABEL_28:
  sub_D8FC();
}

  sub_A2FB4();
  uint64_t v18 = v19;
  uint64_t v21 = v20;
  sub_367AC();
  if ((v21 & 1) == 0 && v18 > 0.0)
  {
    sub_A0D74(a1);
    sub_A3850();
    if (!v5)
    {
      uint64_t v24 = sub_375B4(v22);
      if (v24 == 0x6C696B5F666C6168LL && v25 == 0xED00006D6172676FLL)
      {
        sub_2A184();
LABEL_40:
        uint64_t v18 = v18 * 0.5;
        return *(void *)&v18;
      }

      uint64_t v27 = sub_58F94(v24, v25, 0x6C696B5F666C6168LL, 0xED00006D6172676FLL);
      sub_2A184();
      if ((v27 & 1) != 0) {
        goto LABEL_40;
      }
    }
  }

  return *(void *)&v18;
}

  __break(1u);
  return result;
}

void sub_8478C(uint64_t *a1)
{
  uint64_t v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  sub_56AEC();
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v10 = __chkstk_darwin(v9);
  __chkstk_darwin(v10);
  sub_85C08(a1, (uint64_t)v11);
  __asm { BR              X10 }

void sub_848F8()
{
  uint64_t v6 = sub_20004((__int128 *)(v5 - 136), v5 - 176);
  uint64_t v7 = Logger.wellness.unsafeMutableAddressor(v6);
  sub_A5DC(v7, v5 - 200);
  sub_89DDC();
  uint64_t v9 = v8(v1, v7, v3);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (sub_89DA4(v10))
  {
    uint64_t v12 = (_WORD *)sub_A5E8(2LL);
    sub_36A44(v12);
    sub_232EC(&dword_0, v10, v11, "This is an unsupported Siri locale", v2);
    sub_5050((uint64_t)v2);
  }

  sub_89D84(v1, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_89DC4();
  sub_89D48(v13, v0 + 264);
  sub_89D00(v14, (_OWORD *)(v0 + 64));
  uint64_t v15 = sub_AA80();
  sub_A72C(v15);
  uint64_t v16 = sub_A9C8();
  *(void *)(v0 + 248) = v15;
  *(void *)(v0 + 2sub_D7EC(v0 + 16, v0 + 56) = &protocol witness table for ResponseFactory;
  *(void *)(v0 + 22sub_D878(v0 + 4) = v16;
  sub_217D4();
  uint64_t v17 = *(void *)(v0 + 8);
  static CATOption.defaultMode.getter();
  uint64_t v18 = sub_AAF0(v17);
  sub_AA78();
  static CATOption.defaultMode.getter();
  uint64_t v19 = sub_AAF8(v17);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v5 - 176));
  uint64_t v20 = *(void **)(v0 + 40);
  v20[3] = &type metadata for RegionNotSupportedFlow;
  v20[4] = sub_890E4();
  uint64_t v21 = (void *)sub_20308((uint64_t)&unk_17E2C0, 312LL);
  *uint64_t v20 = v21;
  sub_20004((__int128 *)(v5 - 240), (uint64_t)(v21 + 2));
  sub_20004((__int128 *)(v0 + 264), (uint64_t)(v21 + 7));
  memcpy(v21 + 12, (const void *)(v0 + 64), 0xA0uLL);
  sub_20004((__int128 *)(v0 + 224), (uint64_t)(v21 + 32));
  v21[37] = v18;
  v21[38] = v19;
  sub_D8FC();
}

void sub_84D94(uint64_t a1)
{
  uint64_t v10 = *(void *)(v8 - 128);
  uint64_t v9 = *(void *)(v8 - 120);
  uint64_t v11 = *(void *)(v8 - 112) | *(void *)(v8 - 104);
  if (v11 | v7 | v9 | v10)
  {
    uint64_t v12 = v11 | v9 | v10;
    if (v7 != 1 || v12)
    {
      if (v7 != 2 || v12)
      {
        uint64_t v35 = (os_log_s *)Logger.wellness.unsafeMutableAddressor(a1);
        sub_A5DC((uint64_t)v35, (uint64_t)(v1 + 8));
        sub_89DDC();
        sub_89C98(v3, v36);
        sub_466E0();
        os_log_type_t v37 = sub_AB70();
        if (sub_232DC(v37))
        {
          uint64_t v38 = (_WORD *)sub_A5E8(2LL);
          sub_36A44(v38);
          sub_232EC(&dword_0, v35, (os_log_type_t)v2, "Meds checks didn't pass, returning UnavailableDataFlow.", v4);
          sub_5050((uint64_t)v4);
        }

        sub_89D84(v3, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
        uint64_t v39 = (int *)type metadata accessor for UnavailableDataFlow(0LL);
        uint64_t v40 = (void *)v1[5];
        v40[3] = v39;
        sub_A410(&qword_189CC8, type metadata accessor for UnavailableDataFlow, (uint64_t)&unk_13FD60);
        v40[4] = v41;
        uint64_t v42 = sub_B76C(v40);
        uint64_t v43 = (uint64_t)v42 + v39[5];
        uint64_t v44 = type metadata accessor for DateInterval(0LL);
        uint64_t v45 = _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v43, 1LL, 1LL, v44);
        sub_89D48(v45, (uint64_t)v42 + v39[6]);
        sub_89D00(v46, (void *)((char *)v42 + v39[7]));
        uint64_t v47 = sub_AA80();
        sub_A72C(v47);
        uint64_t v48 = sub_A9C8();
        uint64_t v49 = (void *)((char *)v42 + v39[8]);
        v49[3] = v47;
        v49[4] = (uint64_t)&protocol witness table for ResponseFactory;
        *uint64_t v49 = v48;
        sub_AA78();
        uint64_t v50 = v1[1];
        static CATOption.defaultMode.getter();
        uint64_t v51 = sub_AAF8(v50);
        sub_217D4();
        static CATOption.defaultMode.getter();
        uint64_t v52 = sub_AAF0(v50);
        *(_BYTE *)uint64_t v42 = 88;
        *(void *)((char *)v42 + v39[9]) = v51;
        *(void *)((char *)v42 + v39[10]) = v52;
      }

      else
      {
        uint64_t v34 = v1[5];
        *(void *)(v34 + 2sub_D878(v0 + 4) = &type metadata for ServerFallbackFlow;
        *(void *)(v34 + 32) = sub_8914C();
      }
    }

    else
    {
      uint64_t v13 = Logger.wellness.unsafeMutableAddressor(a1);
      sub_A5DC(v13, (uint64_t)(v1 + 8));
      sub_89DDC();
      uint64_t v15 = sub_89C98((uint64_t)v2, v14);
      Logger.logObject.getter(v15);
      os_log_type_t v16 = sub_A898();
      if (sub_89DA4(v2))
      {
        uint64_t v17 = (_WORD *)sub_A5E8(2LL);
        sub_36A44(v17);
        sub_232EC(&dword_0, v2, v16, "This is an unsupported Siri locale or Device Region for Meds", v4);
        sub_5050((uint64_t)v4);
      }

      sub_89D84((uint64_t)v2, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
      uint64_t v18 = (uint64_t *)v1[5];
      v18[3] = (uint64_t)&type metadata for RegionNotSupportedForMedsFlow;
      v18[4] = sub_890A4();
      uint64_t v19 = sub_20308((uint64_t)&unk_17E298, 272LL);
      *uint64_t v18 = v19;
      sub_89D48(v19, v19 + 16);
      sub_89D00(v20, (_OWORD *)(v19 + 56));
      uint64_t v21 = sub_AA80();
      sub_A72C(v21);
      uint64_t v22 = sub_A9C8();
      *(void *)(v19 + 240) = v21;
      *(void *)(v19 + 248) = &protocol witness table for ResponseFactory;
      *(void *)(v19 + 216) = v22;
      sub_217D4();
      uint64_t v23 = v1[1];
      static CATOption.defaultMode.getter();
      uint64_t v24 = sub_AAF0(v23);
      sub_AA78();
      static CATOption.defaultMode.getter();
      uint64_t v25 = sub_AAF8(v23);
      *(void *)(v19 + 2sub_D7EC(v0 + 16, v0 + 56) = v24;
      *(void *)(v19 + 26sub_D878(v0 + 4) = v25;
    }
  }

  else
  {
    uint64_t v26 = Logger.wellness.unsafeMutableAddressor(a1);
    sub_A5DC(v26, (uint64_t)(v1 + 8));
    uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, void))(v1[6] + 16LL))(v6, v26, v1[7]);
    Logger.logObject.getter(v27);
    os_log_type_t v28 = sub_A898();
    if (sub_232DC(v28))
    {
      uint64_t v29 = (_WORD *)sub_A5E8(2LL);
      sub_36DE0(v29);
      sub_41964( &dword_0,  v30,  v31,  "It seems like the request did not fully run on device. We are going to show an error message.");
      sub_5050(v3);
    }

    (*(void (**)(void *, void))(v1[6] + 8LL))(v6, v1[7]);
    uint64_t v32 = (uint64_t *)v1[5];
    v32[3] = (uint64_t)&type metadata for GenericNotSupportedFlow;
    v32[4] = sub_1FF94();
    uint64_t v33 = sub_20308((uint64_t)&unk_17E270, 177LL);
    *uint64_t v32 = v33;
    sub_89D00(v33, (_OWORD *)(v33 + 16));
    *(_BYTE *)(v33 + 176) = 0;
  }

  JUMPOUT(0x84D88LL);
}

uint64_t sub_85124@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v15 = 0LL;
  memset(v14, 0, sizeof(v14));
  uint64_t v13 = 0LL;
  memset(v12, 0, sizeof(v12));
  uint64_t v11 = 0LL;
  memset(v10, 0, sizeof(v10));
  uint64_t v9 = 0LL;
  memset(v8, 0, sizeof(v8));
  uint64_t v7 = 0LL;
  memset(v6, 0, sizeof(v6));
  uint64_t v5 = 0LL;
  memset(v4, 0, sizeof(v4));
  uint64_t v3 = 0LL;
  memset(v2, 0, sizeof(v2));
  a1[3] = (uint64_t)&type metadata for FlowConfigModel;
  a1[4] = (uint64_t)&protocol witness table for FlowConfigModel;
  *a1 = sub_20308((uint64_t)&unk_17E1D0, 296LL);
  return FlowConfigModel.init(deviceState:aceService:aceServiceAsync:sharedContextService:outputPublisher:flowFinder:networkStatusProvider:)( v14,  v12,  v10,  v8,  v6,  v4,  v2);
}

void sub_851D0(uint64_t *a1@<X8>)
{
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_ADD58(a1);
  type metadata accessor for WellnessCATPatternsExecutor(0LL);
  sub_36E30();
  uint64_t v6 = sub_AAF0((uint64_t)v5);
  a1[8] = v1;
  a1[9] = (uint64_t)&off_17DC48;
  a1[5] = v6;
  type metadata accessor for WellnessLoggingCATPatternsExecutor(0LL);
  sub_36E30();
  uint64_t v7 = sub_AAF0((uint64_t)v5);
  a1[13] = v1;
  a1[14] = (uint64_t)&off_1806B8;
  a1[10] = v7;
  type metadata accessor for WellnessQueryingCATPatternsExecutor(0LL);
  sub_36E30();
  uint64_t v8 = sub_AAF0((uint64_t)v5);
  a1[18] = v1;
  a1[19] = (uint64_t)&off_17D960;
  a1[15] = v8;
  sub_1EB0C();
}

uint64_t sub_85294()
{
  if (v0[5]) {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2);
  }
  if (v0[10]) {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7);
  }
  if (v0[15]) {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 12);
  }
  if (v0[20]) {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 17);
  }
  if (v0[25]) {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 22);
  }
  if (v0[30]) {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 27);
  }
  if (v0[35]) {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 32);
  }
  return swift_deallocObject(v0, 296LL, 7LL);
}

char *sub_85320(char *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *(void *)a1 = *a2;
    a1 = (char *)(v19 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v19);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Parse(0LL);
    (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    __int128 v9 = *(_OWORD *)((char *)a2 + v8 + 24);
    *(_OWORD *)&a1[v8 + 24] = v9;
    (**(void (***)(void))(v9 - 8))();
    uint64_t v10 = a3[6];
    __int128 v11 = *(_OWORD *)((char *)a2 + v10 + 24);
    *(_OWORD *)&a1[v10 + 24] = v11;
    (**(void (***)(void))(v11 - 8))();
    uint64_t v12 = a3[7];
    uint64_t v13 = &a1[v12];
    uint64_t v14 = (_OWORD *)((char *)a2 + v12);
    __int128 v15 = *(_OWORD *)((char *)v14 + 24);
    *(_OWORD *)&a1[v12 + 24] = v15;
    (**(void (***)(char *, _OWORD *))(v15 - 8))(&a1[v12], v14);
    __int128 v16 = v14[4];
    *((_OWORD *)v13 + sub_D878(v0 + 4) = v16;
    (**(void (***)(uint64_t, uint64_t))(v16 - 8))((uint64_t)(v13 + 40), (uint64_t)v14 + 40);
    __int128 v17 = *(_OWORD *)((char *)v14 + 104);
    *(_OWORD *)(v13 + 10sub_D878(v0 + 4) = v17;
    (**(void (***)(uint64_t, uint64_t))(v17 - 8))((uint64_t)(v13 + 80), (uint64_t)(v14 + 5));
    __int128 v18 = v14[9];
    *((_OWORD *)v13 + 9) = v18;
    (**(void (***)(uint64_t, uint64_t))(v18 - 8))((uint64_t)(v13 + 120), (uint64_t)v14 + 120);
  }

  return a1;
}

uint64_t sub_85470(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for Parse(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + a2[5]));
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + a2[6]));
  int v5 = (void *)(a1 + a2[7]);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v5);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v5 + 5);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v5 + 10);
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v5 + 15);
}

uint64_t sub_854E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Parse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  __int128 v8 = *(_OWORD *)(a2 + v7 + 24);
  *(_OWORD *)(a1 + v7 + 2sub_D878(v0 + 4) = v8;
  (**(void (***)(void))(v8 - 8))();
  uint64_t v9 = a3[6];
  __int128 v10 = *(_OWORD *)(a2 + v9 + 24);
  *(_OWORD *)(a1 + v9 + 2sub_D878(v0 + 4) = v10;
  (**(void (***)(void))(v10 - 8))();
  uint64_t v11 = a3[7];
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  __int128 v14 = *(_OWORD *)((char *)v13 + 24);
  *(_OWORD *)(a1 + v11 + 2sub_D878(v0 + 4) = v14;
  (**(void (***)(uint64_t, _OWORD *))(v14 - 8))(a1 + v11, v13);
  __int128 v15 = v13[4];
  v12[4] = v15;
  (**(void (***)(uint64_t, uint64_t))(v15 - 8))((uint64_t)v12 + 40, (uint64_t)v13 + 40);
  __int128 v16 = *(_OWORD *)((char *)v13 + 104);
  *(_OWORD *)((char *)v12 + 10sub_D878(v0 + 4) = v16;
  (**(void (***)(uint64_t, uint64_t))(v16 - 8))((uint64_t)(v12 + 5), (uint64_t)(v13 + 5));
  __int128 v17 = v13[9];
  v12[9] = v17;
  (**(void (***)(uint64_t, uint64_t))(v17 - 8))((uint64_t)v12 + 120, (uint64_t)v13 + 120);
  return a1;
}

uint64_t sub_8560C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Parse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  sub_7030((void *)(a1 + a3[5]), (void *)(a2 + a3[5]));
  sub_7030((void *)(a1 + a3[6]), (void *)(a2 + a3[6]));
  uint64_t v7 = a3[7];
  __int128 v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  sub_7030((void *)(a1 + v7), v9);
  sub_7030(v8 + 5, v9 + 5);
  sub_7030(v8 + 10, v9 + 10);
  sub_7030(v8 + 15, v9 + 15);
  return a1;
}

uint64_t sub_856B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Parse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  __int128 v10 = (__int128 *)(a2 + v7);
  __int128 v11 = *v10;
  __int128 v12 = v10[1];
  *(void *)(v9 + 32) = *((void *)v10 + 4);
  *(_OWORD *)uint64_t v9 = v11;
  *(_OWORD *)(v9 + 16) = v12;
  uint64_t v13 = a1 + v8;
  uint64_t v14 = a2 + v8;
  __int128 v15 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v15;
  *(void *)(v13 + 32) = *(void *)(v14 + 32);
  memcpy((void *)(a1 + a3[7]), (const void *)(a2 + a3[7]), 0xA0uLL);
  return a1;
}

uint64_t sub_85750(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Parse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + v7));
  __int128 v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + v11));
  __int128 v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + v15));
  __int128 v18 = *(_OWORD *)(v17 + 16);
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *(_OWORD *)(v16 + 16) = v18;
  *(void *)(v16 + 32) = *(void *)(v17 + 32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v16 + 40));
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(v17 + 40);
  *(_OWORD *)(v16 + sub_D7EC(v0 + 16, v0 + 56) = *(_OWORD *)(v17 + 56);
  *(void *)(v16 + 72) = *(void *)(v17 + 72);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v16 + 80));
  __int128 v19 = *(_OWORD *)(v17 + 96);
  *(_OWORD *)(v16 + 80) = *(_OWORD *)(v17 + 80);
  *(_OWORD *)(v16 + 96) = v19;
  *(void *)(v16 + 112) = *(void *)(v17 + 112);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v16 + 120));
  *(_OWORD *)(v16 + 120) = *(_OWORD *)(v17 + 120);
  *(_OWORD *)(v16 + 136) = *(_OWORD *)(v17 + 136);
  *(void *)(v16 + 152) = *(void *)(v17 + 152);
  return a1;
}

uint64_t sub_8586C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_85878);
}

uint64_t sub_85878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_89DAC();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, a2, v6);
  }
  unint64_t v8 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(v8) = -1;
  }
  return (v8 + 1);
}

uint64_t sub_858F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_858FC);
}

void sub_858FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_89DAC();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
  {
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, a2, v8);
  }

  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 2sub_D878(v0 + 4) = (a2 - 1);
    sub_1EB0C();
  }

uint64_t type metadata accessor for MainFlow(uint64_t a1)
{
  uint64_t result = qword_18D548;
  if (!qword_18D548) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MainFlow);
  }
  return result;
}

uint64_t sub_859A0(uint64_t a1)
{
  uint64_t result = type metadata accessor for Parse(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "(";
    _OWORD v4[2] = "(";
    v4[3] = &unk_13BA38;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_85A1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to Flow.onAsync(input:)[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_85A84;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t sub_85A84(uint64_t a1)
{
  return sub_729A4(a1, *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_85AB4(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18D59C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_A108;
  return sub_82298(a1);
}

uint64_t sub_85B04(uint64_t a1, char a2, void *a3)
{
  if (a3) {
    return sub_85B40(*(void *)(a1 + 32), (uint64_t)a3);
  }
  else {
    return sub_85B90(*(void *)(a1 + 32), a2);
  }
}

uint64_t sub_85B40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_494C(&qword_18D648);
  uint64_t v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0LL, 0LL);
  *uint64_t v6 = a2;
  return swift_continuation_throwingResumeWithError(a1, v5);
}

uint64_t sub_85B90(uint64_t a1, char a2)
{
  **(_BYTE **)(*(void *)(a1 + 64) + 4Hasher.init(_seed:)(v1, 0LL) = a2;
  return swift_continuation_throwingResume();
}

uint64_t sub_85BA0()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_85BDC(uint64_t a1)
{
  return a1;
}

uint64_t sub_85C08(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_85C3C()
{
  uint64_t v1 = sub_89C30();
  swift_bridgeObjectRelease(v1);
  return swift_deallocObject(v0, 304LL, 7LL);
}

uint64_t sub_85C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = a1;
  uint64_t v28 = type metadata accessor for OutputFlow(0LL);
  __chkstk_darwin(v28);
  uint64_t v26 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_494C(&qword_18AFC0);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v25 - v14;
  v30[3] = &type metadata for WellnessCATProvider;
  v30[4] = &off_182110;
  uint64_t v16 = (void *)swift_allocObject(&unk_17E1F8, 48LL, 7LL);
  v30[0] = v16;
  v16[2] = a2;
  v16[3] = a3;
  v16[4] = a4;
  v16[5] = a5;
  uint64_t v17 = sub_500C(v30, (uint64_t)&type metadata for WellnessCATProvider);
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  uint64_t v20 = v17[2];
  uint64_t v21 = v17[3];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_11ECC4(v18, v19, v20, v21);
  sub_59BB0();
  swift_release();
  sub_41850((uint64_t)v15, (uint64_t)v13, &qword_18AFC0);
  sub_A304(v27, (uint64_t)v29);
  uint64_t v22 = (uint64_t)v26;
  OutputFlow.init(templatingResult:snippets:flowConfig:rrEntities:)(v13, _swiftEmptyArrayStorage, v29, 0LL);
  sub_A410( &qword_18AFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for OutputFlow,  (uint64_t)&protocol conformance descriptor for OutputFlow);
  uint64_t v23 = Flow.eraseToAnyFlow()(v28);
  sub_895D8(v22);
  sub_A4A4((uint64_t)v15, &qword_18AFC0);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v30);
  return v23;
}

uint64_t sub_85E68(void *a1, void *a2, _OWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for WellnessLoggingCATsSimple(0LL);
  static CATOption.defaultMode.getter();
  *(void *)(a5 + 280) = CATWrapperSimple.__allocating_init(options:globals:)(v12, 0LL);
  *(_BYTE *)(a5 + 288) = 82;
  sub_A304((uint64_t)a1, a5 + 16);
  sub_A304((uint64_t)a2, a5 + 56);
  sub_A13C(a3, (_OWORD *)(a5 + 96));
  *(void *)(a5 + 2sub_D7EC(v0 + 16, v0 + 56) = a4;
  id v13 = [objc_allocWithZone((Class)type metadata accessor for LogBloodPressureIntent(0)) init];
  sub_D878(a3);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a2);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  *(void *)(a5 + 26sub_D878(v0 + 4) = v13;
  *(_BYTE *)(a5 + 272) = 0;
  return a5;
}

void sub_85F7C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v26[5] = a7;
  v26[6] = a2;
  uint64_t v12 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v12);
  v26[2] = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Logger(0LL);
  v26[3] = *(void *)(v14 - 8);
  v26[4] = v14;
  uint64_t v15 = __chkstk_darwin(v14);
  v26[0] = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  v26[1] = (char *)v26 - v17;
  v26[64] = &type metadata for WellnessCATProvider;
  v26[65] = &off_182110;
  uint64_t v18 = (void *)swift_allocObject(&unk_17E1F8, 48LL, 7LL);
  v26[61] = v18;
  void v18[2] = a3;
  v18[3] = a4;
  v18[4] = a5;
  v18[5] = a6;
  uint64_t v19 = a1[3];
  uint64_t v20 = a1[4];
  sub_500C(a1, v19);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 24);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  LOWORD(a3) = v21(v19, v20);
  uint64_t v22 = a1[3];
  uint64_t v23 = a1[4];
  sub_500C(a1, v22);
  unsigned __int8 v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(v22, v23);
  uint64_t v25 = (char *)sub_8611C
      + 4 * byte_13B9BC[sub_4F64((unsigned __int16)a3 | ((unint64_t)v24 << 16) | 0x2000000)];
  __asm { BR              X10 }

uint64_t sub_8611C()
{
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  sub_500C(v1, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
  if ((unsigned __int16)v5 == 270 || (uint64_t v5 = sub_12BAB0(v5), v5 == 205))
  {
    uint64_t v18 = Logger.wellness.unsafeMutableAddressor(v5);
    swift_beginAccess(v18, v0 + 104, 0LL, 0LL);
    (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 24) + 16LL))( *(void *)v0,  v18,  *(void *)(v0 + 32));
    sub_A304((uint64_t)v1, v0 + 192);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v23 = swift_slowAlloc(32LL, -1LL);
      *(void *)(v0 + 14sub_D878(v0 + 4) = v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      *(void *)(v0 + 48) = v22 + 4;
      uint64_t v25 = *(void *)(v0 + 216);
      uint64_t v24 = *(void *)(v0 + 224);
      sub_500C((void *)(v0 + 192), v25);
      *(_WORD *)(v0 + 6sub_D878(v0 + 4) = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 24))(v25, v24);
      uint64_t v26 = sub_494C(&qword_189C80);
      uint64_t v27 = String.init<A>(describing:)(v0 + 64, v26);
      unint64_t v29 = v28;
      *(void *)(v0 + 6sub_D878(v0 + 4) = sub_39178(v27, v28, (uint64_t *)(v0 + 144));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, *(void *)(v0 + 48), v22 + 12);
      swift_bridgeObjectRelease(v29);
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 192));
      _os_log_impl( &dword_0,  v20,  v21,  "%s does not have a HealthKitIdentifier to create a GetHealthQuantityFlow",  v22,  0xCu);
      swift_arrayDestroy(v23, 1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    else
    {
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 192));
    }

    (*(void (**)(void, void))(*(void *)(v0 + 24) + 8LL))(*(void *)v0, *(void *)(v0 + 32));
    sub_A304((uint64_t)v1, v0 + 144);
    *(void *)(v0 + 6sub_D878(v0 + 4) = 0LL;
    *(void *)(v0 + 72) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(72LL);
    uint64_t v30 = *(void *)(v0 + 72);
    *(void *)(v0 + 6sub_D878(v0 + 4) = *(void *)(v0 + 64);
    *(void *)(v0 + 72) = v30;
    uint64_t v31 = *(void *)(v0 + 168);
    uint64_t v32 = *(void *)(v0 + 176);
    sub_500C((void *)(v0 + 144), v31);
    *(_WORD *)(v0 + 62) = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 24))(v31, v32);
    uint64_t v33 = sub_494C(&qword_189C80);
    v34._uint64_t countAndFlagsBits = String.init<A>(describing:)(v0 + 62, v33);
    object = v34._object;
    String.append(_:)(v34);
    swift_bridgeObjectRelease(object);
    v36._object = (void *)0x80000000001456A0LL;
    v36._uint64_t countAndFlagsBits = 0xD000000000000046LL;
    String.append(_:)(v36);
    uint64_t result = ((uint64_t (*)(const char *, uint64_t, uint64_t, void, void, const char *, uint64_t, uint64_t, uint64_t, _DWORD))_assertionFailure(_:_:file:line:flags:))( "Fatal error",  11LL,  2LL,  *(void *)(v0 + 64),  *(void *)(v0 + 72),  "WellnessFlowPlugin/FlowRouter.swift",  35LL,  2LL,  378LL,  0);
    __break(1u);
  }

  else
  {
    char v6 = v5;
    sub_A304((uint64_t)v1, v0 + 144);
    sub_A304(*(void *)(v0 + 48), v0 + 104);
    sub_A13C(*(_OWORD **)(v0 + 40), (_OWORD *)(v0 + 192));
    uint64_t v7 = (objc_class *)type metadata accessor for LogQuantityIntentHandler(0LL);
    *(_OWORD *)(v0 + 6sub_D878(v0 + 4) = 0u;
    *(_OWORD *)(v0 + 80) = 0u;
    *(void *)(v0 + 96) = 0LL;
    id v8 = [objc_allocWithZone(v7) init];
    uint64_t v9 = type metadata accessor for LogHealthKitQuantityFlow();
    uint64_t v10 = swift_allocObject(v9, 337LL, 7LL);
    uint64_t v11 = sub_46140(v6, (__int128 *)(v0 + 144), (__int128 *)(v0 + 104), (_OWORD *)(v0 + 192), (uint64_t)v8, v0 + 64, v10);
    *(void *)(v0 + 168) = v9;
    sub_A410( &qword_18B3D8,  (uint64_t (*)(uint64_t))type metadata accessor for LogHealthKitQuantityFlow,  (uint64_t)&protocol conformance descriptor for LogHealthKitQuantityFlow);
    *(void *)(v0 + 176) = v12;
    *(void *)(v0 + 14sub_D878(v0 + 4) = v11;
    uint64_t v13 = sub_494C(&qword_18D5E8);
    uint64_t v14 = type metadata accessor for CommonFlowGuard(0LL);
    uint64_t v15 = swift_allocObject( v13,  ((*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL))
          + *(void *)(*(void *)(v14 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v15 + 16) = xmmword_137250;
    static CommonFlowGuard.ensuringDeviceIsAuthenticated.getter();
    GuardedFlow.init(mainFlow:guards:enforceProtectedHealthApp:)((void *)(v0 + 192), v0 + 144, v15, 1LL);
    sub_891E8();
    uint64_t v16 = Flow.eraseToAnyFlow()(&type metadata for GuardedFlow);
    sub_89224(v0 + 192);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v2 - 136));
    return v16;
  }

  return result;
}

void sub_86824(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v38[10] = a7;
  v38[11] = a2;
  uint64_t v12 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v12);
  v38[2] = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  v38[12] = v14;
  v38[13] = v15;
  uint64_t v16 = __chkstk_darwin(v14);
  v38[9] = (char *)v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  v38[8] = (char *)v38 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  v38[1] = (char *)v38 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  v38[7] = (char *)v38 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  v38[6] = (char *)v38 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  v38[5] = (char *)v38 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v38[4] = (char *)v38 - v29;
  __chkstk_darwin(v28);
  v38[3] = (char *)v38 - v30;
  v38[57] = &type metadata for WellnessCATProvider;
  v38[58] = &off_182110;
  uint64_t v31 = (void *)swift_allocObject(&unk_17E1F8, 48LL, 7LL);
  v38[54] = v31;
  v31[2] = a3;
  v31[3] = a4;
  v31[4] = a5;
  v31[5] = a6;
  uint64_t v32 = a1[3];
  uint64_t v33 = a1[4];
  sub_500C(a1, v32);
  Swift::String v34 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 24);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  LOWORD(v32) = v34(v32, v33);
  uint64_t v35 = a1[3];
  uint64_t v36 = a1[4];
  sub_500C(a1, v35);
  (*(void (**)(uint64_t, uint64_t))(v36 + 16))(v35, v36);
  os_log_type_t v37 = (char *)sub_86A80 + 4 * word_13B9C2[sub_4BC4(v32)];
  __asm { BR              X10 }

uint64_t sub_86A80()
{
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  sub_500C(v1, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
  uint64_t v6 = *(void *)(v0 + 96);
  if ((unsigned __int16)v5 == 270 || (v7 = v5, uint64_t v5 = sub_12BAB0(v5), v5 == 205))
  {
    uint64_t v30 = Logger.wellness.unsafeMutableAddressor(v5);
    swift_beginAccess(v30, v2 - 240, 0LL, 0LL);
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v0 + 104) + 16LL))(*(void *)(v0 + 8), v30, v6);
    *(void *)(v0 + 72) = v1;
    sub_A304((uint64_t)v1, v0 + 112);
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      Swift::String v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v35 = swift_slowAlloc(32LL, -1LL);
      *(void *)(v2 - 176) = v35;
      *(_DWORD *)Swift::String v34 = 136315138;
      uint64_t v36 = *(void *)(v0 + 136);
      uint64_t v37 = *(void *)(v0 + 144);
      sub_500C((void *)(v0 + 112), v36);
      *(_WORD *)(v0 + 280) = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 24))(v36, v37);
      uint64_t v38 = sub_494C(&qword_189C80);
      uint64_t v39 = String.init<A>(describing:)(v0 + 280, v38);
      unint64_t v41 = v40;
      *(void *)(v0 + 280) = sub_39178(v39, v40, (uint64_t *)(v2 - 176));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v34 + 4, v34 + 12);
      swift_bridgeObjectRelease(v41);
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 112));
      _os_log_impl( &dword_0,  v32,  v33,  "%s does not have a HealthKitIdentifier to create a GetHealthQuantityFlow",  v34,  0xCu);
      swift_arrayDestroy(v35, 1LL);
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    else
    {
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 112));
    }

    (*(void (**)(void, void))(*(void *)(v0 + 104) + 8LL))(*(void *)(v0 + 8), *(void *)(v0 + 96));
    sub_A304(*(void *)(v0 + 72), v2 - 176);
    *(void *)(v0 + 280) = 0LL;
    *(void *)(v0 + 288) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(72LL);
    uint64_t v42 = *(void *)(v0 + 288);
    *(void *)(v0 + 280) = *(void *)(v0 + 280);
    *(void *)(v0 + 288) = v42;
    uint64_t v44 = *(void *)(v2 - 152);
    uint64_t v43 = *(void *)(v2 - 144);
    uint64_t v45 = sub_500C((void *)(v2 - 176), v44);
    ((void (*)(void *, uint64_t, void))DefaultStringInterpolation.appendInterpolation<A>(_:))( v45,  v44,  *(void *)(v43 + 8));
    v46._uint64_t countAndFlagsBits = 0xD000000000000046LL;
    v46._object = (void *)0x80000000001456A0LL;
    String.append(_:)(v46);
    uint64_t result = ((uint64_t (*)(const char *, uint64_t, uint64_t, void, void, const char *, uint64_t, uint64_t, uint64_t, _DWORD))_assertionFailure(_:_:file:line:flags:))( "Fatal error",  11LL,  2LL,  *(void *)(v0 + 280),  *(void *)(v0 + 288),  "WellnessFlowPlugin/FlowRouter.swift",  35LL,  2LL,  154LL,  0);
    __break(1u);
  }

  else
  {
    char v8 = v5;
    uint64_t v9 = Logger.wellness.unsafeMutableAddressor(v5);
    swift_beginAccess(v9, v2 - 240, 0LL, 0LL);
    uint64_t v10 = *(void *)(v0 + 104);
    uint64_t v11 = *(void *)(v0 + 56);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v11, v9, v6);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc(12LL, -1LL);
      *(void *)(v0 + 72) = v1;
      uint64_t v16 = (uint8_t *)v15;
      uint64_t v17 = swift_slowAlloc(32LL, -1LL);
      *(void *)(v0 + 112) = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      uint64_t v18 = sub_10F1C0(v7);
      unint64_t v20 = v19;
      *(void *)(v2 - 176) = sub_39178(v18, v19, (uint64_t *)(v0 + 112));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 176, v2 - 168, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease(v20);
      _os_log_impl(&dword_0, v13, v14, "%s gets GetHealthQuantityFlow", v16, 0xCu);
      swift_arrayDestroy(v17, 1LL);
      swift_slowDealloc(v17, -1LL, -1LL);
      uint64_t v21 = v16;
      uint64_t v1 = *(void **)(v0 + 72);
      swift_slowDealloc(v21, -1LL, -1LL);

      (*(void (**)(void, uint64_t))(*(void *)(v0 + 104) + 8LL))(*(void *)(v0 + 56), v6);
    }

    else
    {

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v6);
    }

    uint64_t v22 = *(void *)(v0 + 88);
    *(void *)(v2 - 152) = &type metadata for GetHealthQuantityFlow;
    *(void *)(v2 - 14sub_D878(v0 + 4) = sub_8957C();
    uint64_t v23 = swift_allocObject(&unk_17E428, 273LL, 7LL);
    *(void *)(v2 - 176) = v23;
    sub_A304((uint64_t)v1, v23 + 24);
    sub_A304(v22, v23 + 64);
    sub_A13C(*(_OWORD **)(v0 + 80), (_OWORD *)(v23 + 104));
    id v24 = [objc_allocWithZone((Class)((uint64_t (*)(void))type metadata accessor for GetHealthQuantityIntentHandler)(0)) init];
    *(_BYTE *)(v23 + 16) = v8;
    *(void *)(v23 + 26sub_D878(v0 + 4) = v24;
    *(_BYTE *)(v23 + 272) = 4;
    uint64_t v25 = sub_494C(&qword_18D5E8);
    uint64_t v26 = type metadata accessor for CommonFlowGuard(0LL);
    uint64_t v27 = swift_allocObject( v25,  ((*(unsigned __int8 *)(*(void *)(v26 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v26 - 8) + 80LL))
          + *(void *)(*(void *)(v26 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v26 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v27 + 16) = xmmword_137250;
    static CommonFlowGuard.ensuringDeviceIsAuthenticated.getter();
    GuardedFlow.init(mainFlow:guards:enforceProtectedHealthApp:)((void *)(v0 + 112), v2 - 176, v27, 1LL);
    sub_891E8();
    uint64_t v28 = Flow.eraseToAnyFlow()(&type metadata for GuardedFlow);
    sub_89224(v0 + 112);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v2 - 128));
    return v28;
  }

  return result;
}

uint64_t sub_87EB0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _OWORD *a7)
{
  uint64_t v10 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[4];
  sub_500C(a2, v13);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v14 + 8))(v93, v13, v14);
  uint64_t v15 = v94;
  uint64_t v16 = v95;
  sub_500C(v93, v94);
  char v17 = dispatch thunk of DeviceState.isPhone.getter(v15, v16);
  sub_A304((uint64_t)a2, (uint64_t)v90);
  if ((v17 & 1) != 0)
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v90);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v93);
  }

  else
  {
    uint64_t v18 = v91;
    uint64_t v19 = v92;
    sub_500C(v90, v91);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v19 + 8))(&v71, v18, v19);
    uint64_t v20 = v72;
    uint64_t v21 = v73;
    sub_500C(&v71, v72);
    char v22 = dispatch thunk of DeviceState.isPad.getter(v20, v21);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(&v71);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v90);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v93);
    if ((v22 & 1) == 0) {
      goto LABEL_7;
    }
  }

  if ((HealthApps.isInstalled.getter(11LL) & 1) == 0) {
    goto LABEL_14;
  }
  if ((HealthApps.isRestricted.getter(11LL) & 1) != 0)
  {
    sub_A13C(a7, &v71);
    sub_2380C();
    uint64_t v23 = Flow.eraseToAnyFlow()(&type metadata for HealthAppRestrictedFlow);
    sub_892E4(&v71);
    return v23;
  }

LABEL_11:
  uint64_t v34 = a2[3];
  uint64_t v35 = a2[4];
  sub_500C(a2, v34);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v35 + 8))(v84, v34, v35);
  uint64_t v36 = v85;
  sub_500C(v84, v85);
  if ((dispatch thunk of DeviceState.isWatch.getter(v36) & 1) != 0)
  {
    char v37 = HealthApps.isInstalled.getter(9LL);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v84);
    if ((v37 & 1) == 0)
    {
      sub_A304((uint64_t)a2, (uint64_t)&v71 + 8);
      sub_A13C(a7, &v75);
      uint64_t v38 = (objc_class *)type metadata accessor for MedStorageHelper(0LL);
      id v39 = objc_allocWithZone(v38);
      swift_retain();
      id v40 = [v39 init];
      os_log_type_t v81 = v38;
      uint64_t v82 = &protocol witness table for MedStorageHelper;
      id v80 = v40;
      *(void *)&__int128 v71 = a1;
      char v83 = 0;
      sub_89258();
      uint64_t v23 = Flow.eraseToAnyFlow()(&type metadata for MedLaunchHealthAppFlow);
      sub_892B0(&v71);
      return v23;
    }
  }

  else
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v84);
  }

  if ((isLoggingTask(from:)() & 1) != 0) {
    return sub_9A708(a1, a2, a7);
  }
  isQueryingTask(from:)(a1, v47, v48, v49, v50, v51);
  if ((v52 & 1) != 0)
  {
    uint64_t v88 = &type metadata for MedLaunchHealthAppFlow;
    unint64_t v89 = sub_89258();
    uint64_t v53 = swift_allocObject(&unk_17E310, 265LL, 7LL);
    v87[0] = v53;
    sub_A304((uint64_t)a2, v53 + 24);
    sub_A13C(a7, (_OWORD *)(v53 + 64));
    uint64_t v54 = (objc_class *)type metadata accessor for MedStorageHelper(0LL);
    id v55 = objc_allocWithZone(v54);
    swift_retain();
    id v56 = [v55 init];
    *(void *)(v53 + 248) = v54;
    *(void *)(v53 + 2sub_D7EC(v0 + 16, v0 + 56) = &protocol witness table for MedStorageHelper;
    *(void *)(v53 + 22sub_D878(v0 + 4) = v56;
    *(void *)(v53 + 16) = a1;
    *(_BYTE *)(v53 + 26sub_D878(v0 + 4) = 1;
    uint64_t v57 = sub_494C(&qword_18D5E8);
    uint64_t v58 = type metadata accessor for CommonFlowGuard(0LL);
    uint64_t v59 = swift_allocObject( v57,  ((*(unsigned __int8 *)(*(void *)(v58 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v58 - 8) + 80LL))
          + *(void *)(*(void *)(v58 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v58 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v59 + 16) = xmmword_137250;
    static CommonFlowGuard.ensuringDeviceIsAuthenticated.getter();
    uint64_t v60 = v59;
    uint64_t v61 = 1LL;
  }

  else
  {
    uint64_t v88 = &type metadata for MedNotSupportedFlow;
    unint64_t v89 = sub_74550();
    uint64_t v62 = swift_allocObject(&unk_17E2E8, 272LL, 7LL);
    v87[0] = v62;
    sub_A304((uint64_t)a2, v62 + 16);
    sub_A13C(a7, (_OWORD *)(v62 + 56));
    uint64_t v63 = type metadata accessor for ResponseFactory(0LL);
    uint64_t v64 = swift_allocObject(v63, *(unsigned int *)(v63 + 48), *(unsigned __int16 *)(v63 + 52));
    uint64_t v65 = ResponseFactory.init()(v64);
    *(void *)(v62 + 240) = v63;
    *(void *)(v62 + 248) = &protocol witness table for ResponseFactory;
    *(void *)(v62 + 216) = v65;
    type metadata accessor for WellnessLoggingCATsSimple(0LL);
    static CATOption.defaultMode.getter();
    uint64_t v66 = CATWrapperSimple.__allocating_init(options:globals:)(v12, 0LL);
    type metadata accessor for WellnessCATs(0LL);
    static CATOption.defaultMode.getter();
    uint64_t v67 = CATWrapper.__allocating_init(options:globals:)(v12, 0LL);
    *(void *)(v62 + 2sub_D7EC(v0 + 16, v0 + 56) = v66;
    *(void *)(v62 + 26sub_D878(v0 + 4) = v67;
    uint64_t v68 = sub_494C(&qword_18D5E8);
    uint64_t v69 = type metadata accessor for CommonFlowGuard(0LL);
    uint64_t v70 = swift_allocObject( v68,  ((*(unsigned __int8 *)(*(void *)(v69 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v69 - 8) + 80LL))
          + *(void *)(*(void *)(v69 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v69 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v70 + 16) = xmmword_137250;
    static CommonFlowGuard.ensuringDeviceIsAuthenticated.getter();
    uint64_t v60 = v70;
    uint64_t v61 = 0LL;
  }

  GuardedFlow.init(mainFlow:guards:enforceProtectedHealthApp:)(&v71, v87, v60, v61);
  sub_891E8();
  uint64_t v23 = Flow.eraseToAnyFlow()(&type metadata for GuardedFlow);
  sub_89224((uint64_t)&v71);
  return v23;
}

  char v52 = *(void *)(v0 + 184);
  uint64_t v54 = *(void *)(v0 + 152);
  uint64_t v53 = *(void *)(v0 + 160);
  id v55 = *(void *)(v0 + 128);
  id v56 = *(void *)(v0 + 104);
  swift_task_dealloc(*(void *)(v0 + 264));
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v51, v85);
}

void sub_88554(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v68 = a7;
  uint64_t v72 = a2;
  uint64_t v73 = a1;
  uint64_t v11 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v11);
  uint64_t v63 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = *(void **)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v65 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v62 = (char *)&v58 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v61 = (char *)&v58 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v58 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v58 - v24;
  id v80 = &type metadata for WellnessCATProvider;
  os_log_type_t v81 = &off_182110;
  uint64_t v26 = (void *)swift_allocObject(&unk_17E1F8, 48LL, 7LL);
  uint64_t v79 = v26;
  v26[2] = a3;
  v26[3] = a4;
  v26[4] = a5;
  v26[5] = a6;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v27 = swift_retain();
  uint64_t v28 = Logger.wellness.unsafeMutableAddressor(v27);
  swift_beginAccess(v28, v78, 0LL, 0LL);
  uint64_t v70 = v14;
  uint64_t v66 = (void (*)(char *, uint64_t, uint64_t))v14[2];
  uint64_t v67 = v28;
  v66(v25, v28, v13);
  sub_A304((uint64_t)v73, (uint64_t)v75);
  uint64_t v69 = v25;
  unint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  BOOL v32 = os_log_type_enabled(v30, v31);
  __int128 v71 = v23;
  if (v32)
  {
    char v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v60 = swift_slowAlloc(32LL, -1LL);
    v74[0] = v60;
    *(_DWORD *)char v33 = 136315138;
    uint64_t v59 = v33 + 4;
    uint64_t v34 = sub_500C(v75, v75[3]);
    uint64_t v64 = v13;
    __chkstk_darwin(v34);
    uint64_t v36 = (char *)&v58 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v37 + 16))(v36);
    uint64_t v38 = String.init<A>(describing:)(v36);
    unint64_t v40 = v39;
    uint64_t v41 = v64;
    uint64_t v76 = sub_39178(v38, v39, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v59, v33 + 12);
    swift_bridgeObjectRelease(v40);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v75);
    _os_log_impl(&dword_0, v30, v31, "Getting flow for: %s", v33, 0xCu);
    uint64_t v42 = v60;
    swift_arrayDestroy(v60, 1LL);
    swift_slowDealloc(v42, -1LL, -1LL);
    swift_slowDealloc(v33, -1LL, -1LL);

    uint64_t v43 = v69;
    uint64_t v44 = (void *)v70[1];
    uint64_t v45 = v41;
  }

  else
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v75);

    uint64_t v43 = v69;
    uint64_t v44 = (void *)v70[1];
    uint64_t v45 = v13;
  }

  uint64_t v70 = v44;
  ((void (*)(char *, uint64_t))v44)(v43, v45);
  uint64_t v46 = v72[3];
  uint64_t v47 = v72[4];
  sub_500C(v72, v46);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v47 + 8))(v75, v46, v47);
  char v48 = HealthApps.isInstalled.getter(11LL);
  char v49 = HealthApps.isRestricted.getter(11LL);
  unint64_t v50 = sub_4A54(v75, v48 & 1, v49 & 1);
  uint64_t v51 = v73;
  uint64_t v52 = v73[3];
  uint64_t v53 = v73[4];
  sub_500C(v73, v52);
  LOWORD(v52) = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 24))(v52, v53);
  uint64_t v54 = v51[3];
  uint64_t v55 = v51[4];
  sub_500C(v51, v54);
  unsigned __int8 v56 = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 16))(v54, v55);
  uint64_t v57 = (char *)sub_8899C
      + 4
      * word_13B9D0[sub_4B48((v50 << 24) & 0x101010101010101LL | ((unint64_t)v56 << 16) | (unsigned __int16)v52)];
  __asm { BR              X10 }

uint64_t sub_8899C()
{
  uint64_t v3 = sub_500C((void *)(v2 - 128), *(void *)(v2 - 104));
  sub_86824(*(void **)(v0 + 120), v1, *v3, v3[1], v3[2], v3[3], *(void *)(v0 + 80));
  uint64_t v5 = v4;
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v2 - 128));
  return v5;
}

unint64_t sub_88FD8()
{
  unint64_t result = qword_18D5C8;
  if (!qword_18D5C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_13BF84, &type metadata for MoodPunchoutFlow);
    atomic_store(result, (unint64_t *)&qword_18D5C8);
  }

  return result;
}

uint64_t sub_89014()
{
  return swift_deallocObject(v0, 296LL, 7LL);
}

uint64_t sub_89068()
{
  return swift_deallocObject(v0, 177LL, 7LL);
}

unint64_t sub_890A4()
{
  unint64_t result = qword_18D5D0;
  if (!qword_18D5D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_13E280, &type metadata for RegionNotSupportedForMedsFlow);
    atomic_store(result, (unint64_t *)&qword_18D5D0);
  }

  return result;
}

unint64_t sub_890E4()
{
  unint64_t result = qword_18D5D8;
  if (!qword_18D5D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_13BE18, &type metadata for RegionNotSupportedFlow);
    atomic_store(result, (unint64_t *)&qword_18D5D8);
  }

  return result;
}

uint64_t sub_89120()
{
  return swift_deallocObject(v0, 312LL, 7LL);
}

unint64_t sub_8914C()
{
  unint64_t result = qword_18D5E0;
  if (!qword_18D5E0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ServerFallbackFlow,  &type metadata for ServerFallbackFlow);
    atomic_store(result, (unint64_t *)&qword_18D5E0);
  }

  return result;
}

uint64_t sub_8918C()
{
  return swift_deallocObject(v0, 272LL, 7LL);
}

unint64_t sub_891E8()
{
  unint64_t result = qword_18D5F0;
  if (!qword_18D5F0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GuardedFlow, &type metadata for GuardedFlow);
    atomic_store(result, (unint64_t *)&qword_18D5F0);
  }

  return result;
}

uint64_t sub_89224(uint64_t a1)
{
  return a1;
}

unint64_t sub_89258()
{
  unint64_t result = qword_18D5F8;
  if (!qword_18D5F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_13DC48, &type metadata for MedLaunchHealthAppFlow);
    atomic_store(result, (unint64_t *)&qword_18D5F8);
  }

  return result;
}

uint64_t sub_89294()
{
  uint64_t v0 = sub_89BA8();
  return swift_deallocObject(v0, v1, v2);
}

void *sub_892B0(void *a1)
{
  return a1;
}

void *sub_892E4(void *a1)
{
  return a1;
}

unint64_t sub_89318()
{
  unint64_t result = qword_18D600;
  if (!qword_18D600)
  {
    unint64_t result = swift_getWitnessTable(&unk_13F4F8, &type metadata for UnsupportedDeviceFlow);
    atomic_store(result, (unint64_t *)&qword_18D600);
  }

  return result;
}

void *sub_89354(void *a1)
{
  return a1;
}

unint64_t sub_89388()
{
  unint64_t result = qword_18D610;
  if (!qword_18D610)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LogPeriodFlow, &type metadata for LogPeriodFlow);
    atomic_store(result, (unint64_t *)&qword_18D610);
  }

  return result;
}

uint64_t sub_893C4()
{
  return swift_deallocObject(v0, 280LL, 7LL);
}

uint64_t sub_893EC()
{
  uint64_t v0 = sub_89BA8();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_89400()
{
  return swift_deallocObject(v0, 266LL, 7LL);
}

unint64_t sub_89420()
{
  unint64_t result = qword_18D618;
  if (!qword_18D618)
  {
    unint64_t result = swift_getWitnessTable(&unk_13CF90, &type metadata for GetSleepAnalysisFlow);
    atomic_store(result, (unint64_t *)&qword_18D618);
  }

  return result;
}

uint64_t sub_8945C()
{
  return swift_deallocObject(v0, 289LL, 7LL);
}

unint64_t sub_8948C()
{
  unint64_t result = qword_18D620;
  if (!qword_18D620)
  {
    unint64_t result = swift_getWitnessTable(&unk_13D9B0, &type metadata for GetActivitySummaryFlow);
    atomic_store(result, (unint64_t *)&qword_18D620);
  }

  return result;
}

uint64_t sub_894C8()
{
  return swift_deallocObject(v0, 336LL, 7LL);
}

unint64_t sub_89508()
{
  unint64_t result = qword_18D628;
  if (!qword_18D628)
  {
    unint64_t result = swift_getWitnessTable(&unk_13E750, &type metadata for GetBloodPressureFlow);
    atomic_store(result, (unint64_t *)&qword_18D628);
  }

  return result;
}

uint64_t sub_89544()
{
  return swift_deallocObject(v0, 329LL, 7LL);
}

unint64_t sub_8957C()
{
  unint64_t result = qword_18D630;
  if (!qword_18D630)
  {
    unint64_t result = swift_getWitnessTable(&unk_13DEF0, &type metadata for GetHealthQuantityFlow);
    atomic_store(result, (unint64_t *)&qword_18D630);
  }

  return result;
}

uint64_t sub_895B8()
{
  return swift_deallocObject(v0, 273LL, 7LL);
}

uint64_t sub_895D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OutputFlow(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t destroy for WellnessAction(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 40);
  if (v1 >= 5) {
    unsigned int v1 = *(_DWORD *)result + 5;
  }
  switch(v1)
  {
    case 0u:
    case 2u:
    case 3u:
    case 4u:
      unint64_t result = _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)result);
      break;
    case 1u:
      unint64_t result = swift_release();
      break;
    default:
      return result;
  }

  return result;
}

uint64_t initializeWithCopy for WellnessAction(uint64_t a1, uint64_t *a2)
{
  unsigned int v3 = *((unsigned __int8 *)a2 + 40);
  if (v3 >= 5) {
    unsigned int v3 = *(_DWORD *)a2 + 5;
  }
  switch(v3)
  {
    case 0u:
      __int128 v4 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 2sub_D878(v0 + 4) = v4;
      (**(void (***)(uint64_t))(v4 - 8))(a1);
      *(_BYTE *)(a1 + 40) = 0;
      return a1;
    case 1u:
      uint64_t v6 = *a2;
      *(void *)a1 = *a2;
      *(_BYTE *)(a1 + 40) = 1;
      swift_retain(v6);
      return a1;
    case 2u:
      __int128 v7 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 2sub_D878(v0 + 4) = v7;
      (**(void (***)(uint64_t))(v7 - 8))(a1);
      char v8 = 2;
      goto LABEL_10;
    case 3u:
      __int128 v9 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 2sub_D878(v0 + 4) = v9;
      (**(void (***)(uint64_t))(v9 - 8))(a1);
      char v8 = 3;
      goto LABEL_10;
    case 4u:
      __int128 v10 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 2sub_D878(v0 + 4) = v10;
      (**(void (***)(uint64_t))(v10 - 8))(a1);
      char v8 = 4;
LABEL_10:
      *(_BYTE *)(a1 + 40) = v8;
      break;
    default:
      __int128 v5 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
      break;
  }

  return a1;
}

uint64_t assignWithCopy for WellnessAction(uint64_t a1, __int128 *a2)
{
  if ((__int128 *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 5) {
      unsigned int v4 = *(_DWORD *)a1 + 5;
    }
    switch(v4)
    {
      case 0u:
      case 2u:
      case 3u:
      case 4u:
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)a1);
        break;
      case 1u:
        swift_release();
        break;
      default:
        break;
    }

    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 5) {
      unsigned int v5 = *(_DWORD *)a2 + 5;
    }
    switch(v5)
    {
      case 0u:
        uint64_t v6 = *((void *)a2 + 3);
        *(void *)(a1 + 2sub_D878(v0 + 4) = v6;
        *(void *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *((void *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
        *(_BYTE *)(a1 + 40) = 0;
        return a1;
      case 1u:
        *(void *)a1 = *(void *)a2;
        *(_BYTE *)(a1 + 40) = 1;
        swift_retain();
        return a1;
      case 2u:
        uint64_t v9 = *((void *)a2 + 3);
        *(void *)(a1 + 2sub_D878(v0 + 4) = v9;
        *(void *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *((void *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v9 - 8))(a1, a2);
        char v10 = 2;
        goto LABEL_16;
      case 3u:
        uint64_t v11 = *((void *)a2 + 3);
        *(void *)(a1 + 2sub_D878(v0 + 4) = v11;
        *(void *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *((void *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v11 - 8))(a1, a2);
        char v10 = 3;
        goto LABEL_16;
      case 4u:
        uint64_t v12 = *((void *)a2 + 3);
        *(void *)(a1 + 2sub_D878(v0 + 4) = v12;
        *(void *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *((void *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v12 - 8))(a1, a2);
        char v10 = 4;
LABEL_16:
        *(_BYTE *)(a1 + 40) = v10;
        break;
      default:
        __int128 v7 = *a2;
        __int128 v8 = a2[1];
        *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
        *(_OWORD *)a1 = v7;
        *(_OWORD *)(a1 + 16) = v8;
        break;
    }
  }

  return a1;
}

__n128 initializeWithTake for WellnessAction(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for WellnessAction(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 5) {
      unsigned int v4 = *(_DWORD *)a1 + 5;
    }
    switch(v4)
    {
      case 0u:
      case 2u:
      case 3u:
      case 4u:
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)a1);
        break;
      case 1u:
        swift_release();
        break;
      default:
        break;
    }

    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 5) {
      unsigned int v5 = *(_DWORD *)a2 + 5;
    }
    switch(v5)
    {
      case 0u:
        __int128 v6 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v6;
        *(void *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 32);
        *(_BYTE *)(a1 + 40) = 0;
        return a1;
      case 1u:
        *(void *)a1 = *(void *)a2;
        char v8 = 1;
        goto LABEL_16;
      case 2u:
        __int128 v9 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v9;
        *(void *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 32);
        char v8 = 2;
        goto LABEL_16;
      case 3u:
        __int128 v10 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v10;
        *(void *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 32);
        char v8 = 3;
        goto LABEL_16;
      case 4u:
        __int128 v11 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v11;
        *(void *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 32);
        char v8 = 4;
LABEL_16:
        *(_BYTE *)(a1 + 40) = v8;
        break;
      default:
        __int128 v7 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v7;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
        break;
    }
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for WellnessAction(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 6) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for WellnessAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 251;
    if (a3 >= 0xFB) {
      *(_BYTE *)(result + 41) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFB) {
      *(_BYTE *)(result + 41) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 40) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_89ACC(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  return result;
}

uint64_t sub_89AE8(uint64_t result, unsigned int a2)
{
  if (a2 > 4)
  {
    *(void *)(result + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0LL;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 5;
    LOBYTE(a_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 5;
  }

  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for WellnessAction()
{
  return &type metadata for WellnessAction;
}

uint64_t sub_89B20()
{
  return swift_unknownObjectRelease(v0[32]);
}

uint64_t sub_89B60()
{
  return v0(*(void *)(v1 - 336), *(void *)(v1 - 296));
}

uint64_t sub_89B74(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 312))(a1, v2, v1);
}

uint64_t sub_89B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, v3);
}

uint64_t sub_89B98(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 288))(a1, v1);
}

void *sub_89BA8()
{
  return v0;
}

uint64_t sub_89BF0()
{
  return swift_unknownObjectRelease(v0[33]);
}

uint64_t sub_89C30()
{
  return v0[37];
}

uint64_t sub_89C78@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 - 256))();
}

uint64_t sub_89C80()
{
  return swift_release(*(void *)(v0 - 352));
}

uint64_t sub_89C8C(uint64_t a1)
{
  return v3(a1, v1, v2);
}

uint64_t sub_89C98@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

uint64_t sub_89CA4(uint64_t a1)
{
  return v3(a1, v2, v1);
}

uint64_t sub_89CB0()
{
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 - 200));
}

uint64_t sub_89CBC@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v1 - 200) = a1;
  return isFeatureEnabled(_:)(v1 - 200);
}

uint64_t sub_89CC8()
{
  return swift_release_n(*(void *)(v0 - 352), 2LL);
}

uint64_t sub_89CD8()
{
  return swift_release(*(void *)(v0 - 352));
}

uint64_t sub_89CE8(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0x53552D6E65LL, 0xE500000000000000LL, 0LL);
}

_OWORD *sub_89D00(uint64_t a1, _OWORD *a2)
{
  return sub_A13C(*(_OWORD **)(v2 + 32), a2);
}

uint64_t sub_89D08()
{
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  *(void *)(v3 - 28_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v4;
  return v4(v0, v1);
}

uint64_t sub_89D20(uint64_t a1)
{
  *(void *)(v1 - 24_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a1;
  return v1 - 248;
}

uint64_t sub_89D34()
{
  return (*(uint64_t (**)(void, void, void))(v1 - 104))(v0[135], v0[140], v0[133]);
}

void sub_89D48(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_89D50@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

uint64_t sub_89D5C(uint64_t a1)
{
  return v3(a1, v1, v2);
}

  ;
}

uint64_t sub_89D84@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_89D8C(uint64_t a1)
{
  return v2(a1, v1);
}

unint64_t sub_89D94@<X0>(uint64_t a1@<X8>)
{
  *(void *)(*(void *)(v1 - 328) + 24LL) = a1;
  return sub_46300();
}

BOOL sub_89DA4(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_89DAC()
{
  return type metadata accessor for Parse(0LL);
}

void sub_89DB4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void sub_89DC4()
{
}

uint64_t sub_89DD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, a3, v3);
}

  ;
}

uint64_t sub_89DE8()
{
  return String.init<A>(describing:)(v1, v0);
}

uint64_t sub_89DF4(uint64_t a1, unint64_t a2)
{
  return sub_39178(a1, a2, (uint64_t *)(v2 - 224));
}

uint64_t sub_89E00()
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, v0);
}

uint64_t sub_89E0C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

void sub_89E18(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_89E20()
{
  return type metadata accessor for MainFlow(0LL);
}

uint64_t sub_89E28()
{
  return type metadata accessor for AnyFlow(0LL);
}

uint64_t BloodPressureQueryModel.systolic.getter()
{
  uint64_t v1 = sub_8DDFC();
  return sub_27A9C(v0 + *(int *)(v1 + 20));
}

uint64_t type metadata accessor for BloodPressureQueryModel(uint64_t a1)
{
  uint64_t result = qword_18D6D8;
  if (!qword_18D6D8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BloodPressureQueryModel);
  }
  return result;
}

void BloodPressureQueryModel.systolic.setter()
{
  uint64_t v0 = sub_8DDFC();
  sub_27A40(*(int *)(v0 + 20));
  sub_1EB0C();
}

uint64_t (*BloodPressureQueryModel.systolic.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t BloodPressureQueryModel.systolicMin.getter()
{
  uint64_t v1 = sub_8DDFC();
  return sub_27A9C(v0 + *(int *)(v1 + 24));
}

void BloodPressureQueryModel.systolicMin.setter()
{
  uint64_t v0 = sub_8DDFC();
  sub_27A40(*(int *)(v0 + 24));
  sub_1EB0C();
}

uint64_t (*BloodPressureQueryModel.systolicMin.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t BloodPressureQueryModel.systolicMax.getter()
{
  uint64_t v1 = sub_8DDFC();
  return sub_27A9C(v0 + *(int *)(v1 + 28));
}

void BloodPressureQueryModel.systolicMax.setter()
{
  uint64_t v0 = sub_8DDFC();
  sub_27A40(*(int *)(v0 + 28));
  sub_1EB0C();
}

uint64_t (*BloodPressureQueryModel.systolicMax.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t BloodPressureQueryModel.diastolic.getter()
{
  uint64_t v1 = sub_8DDFC();
  return sub_27A9C(v0 + *(int *)(v1 + 32));
}

void BloodPressureQueryModel.diastolic.setter()
{
  uint64_t v0 = sub_8DDFC();
  sub_27A40(*(int *)(v0 + 32));
  sub_1EB0C();
}

uint64_t (*BloodPressureQueryModel.diastolic.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t BloodPressureQueryModel.diastolicMin.getter()
{
  uint64_t v1 = sub_8DDFC();
  return sub_27A9C(v0 + *(int *)(v1 + 36));
}

void BloodPressureQueryModel.diastolicMin.setter()
{
  uint64_t v0 = sub_8DDFC();
  sub_27A40(*(int *)(v0 + 36));
  sub_1EB0C();
}

uint64_t (*BloodPressureQueryModel.diastolicMin.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t BloodPressureQueryModel.diastolicMax.getter()
{
  uint64_t v1 = sub_8DDFC();
  return sub_27A9C(v0 + *(int *)(v1 + 40));
}

void BloodPressureQueryModel.diastolicMax.setter()
{
  uint64_t v0 = sub_8DDFC();
  sub_27A40(*(int *)(v0 + 40));
  sub_1EB0C();
}

uint64_t (*BloodPressureQueryModel.diastolicMax.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void BloodPressureQueryModel.systolicString.getter()
{
  uint64_t v0 = sub_8DDFC();
  sub_27A30(*(int *)(v0 + 44));
  sub_1EB8C();
  sub_A890();
}

void BloodPressureQueryModel.systolicString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_8DDFC();
  sub_27AB4(*(int *)(v5 + 44));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*BloodPressureQueryModel.systolicString.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void BloodPressureQueryModel.diastolicString.getter()
{
  uint64_t v0 = sub_8DDFC();
  sub_27A30(*(int *)(v0 + 48));
  sub_1EB8C();
  sub_A890();
}

void BloodPressureQueryModel.diastolicString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_8DDFC();
  sub_27AB4(*(int *)(v5 + 48));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*BloodPressureQueryModel.diastolicString.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void BloodPressureQueryModel.systolicMinString.getter()
{
  uint64_t v0 = sub_8DDFC();
  sub_27A30(*(int *)(v0 + 52));
  sub_1EB8C();
  sub_A890();
}

void BloodPressureQueryModel.systolicMinString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_8DDFC();
  sub_27AB4(*(int *)(v5 + 52));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*BloodPressureQueryModel.systolicMinString.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void BloodPressureQueryModel.systolicMaxString.getter()
{
  uint64_t v0 = sub_8DDFC();
  sub_27A30(*(int *)(v0 + 56));
  sub_1EB8C();
  sub_A890();
}

void BloodPressureQueryModel.systolicMaxString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_8DDFC();
  sub_27AB4(*(int *)(v5 + 56));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*BloodPressureQueryModel.systolicMaxString.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void BloodPressureQueryModel.diastolicMinString.getter()
{
  uint64_t v0 = sub_8DDFC();
  sub_27A30(*(int *)(v0 + 60));
  sub_1EB8C();
  sub_A890();
}

void BloodPressureQueryModel.diastolicMinString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_8DDFC();
  sub_27AB4(*(int *)(v5 + 60));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*BloodPressureQueryModel.diastolicMinString.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void BloodPressureQueryModel.diastolicMaxString.getter()
{
  uint64_t v0 = sub_8DDFC();
  sub_27A30(*(int *)(v0 + 64));
  sub_1EB8C();
  sub_A890();
}

void BloodPressureQueryModel.diastolicMaxString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_8DDFC();
  sub_27AB4(*(int *)(v5 + 64));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*BloodPressureQueryModel.diastolicMaxString.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void BloodPressureQueryModel.unitLabelString.getter()
{
  uint64_t v0 = sub_8DDFC();
  sub_27A30(*(int *)(v0 + 68));
  sub_1EB8C();
  sub_A890();
}

void BloodPressureQueryModel.unitLabelString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_8DDFC();
  sub_27AB4(*(int *)(v5 + 68));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*BloodPressureQueryModel.unitLabelString.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void BloodPressureQueryModel.systolicLabel.getter()
{
  uint64_t v0 = sub_8DDFC();
  sub_27A30(*(int *)(v0 + 72));
  sub_1EB8C();
  sub_A890();
}

void BloodPressureQueryModel.systolicLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_8DDFC();
  sub_27AB4(*(int *)(v5 + 72));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*BloodPressureQueryModel.systolicLabel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void BloodPressureQueryModel.diastolicLabel.getter()
{
  uint64_t v0 = sub_8DDFC();
  sub_27A30(*(int *)(v0 + 76));
  sub_1EB8C();
  sub_A890();
}

void BloodPressureQueryModel.diastolicLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_8DDFC();
  sub_27AB4(*(int *)(v5 + 76));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*BloodPressureQueryModel.diastolicLabel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void BloodPressureQueryModel.url.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_8DDFC();
  sub_A44C(v1 + *(int *)(v3 + 80), a1, &qword_189CF8);
  sub_A890();
}

void BloodPressureQueryModel.url.setter(uint64_t a1)
{
  uint64_t v3 = sub_8DDFC();
  sub_24D88(a1, v1 + *(int *)(v3 + 80), &qword_189CF8);
  sub_A890();
}

uint64_t (*BloodPressureQueryModel.url.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void BloodPressureQueryModel.dateLabel.getter()
{
  uint64_t v0 = sub_8DDFC();
  sub_27A30(*(int *)(v0 + 84));
  sub_1EB8C();
  sub_A890();
}

void BloodPressureQueryModel.dateLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_8DDFC();
  sub_27AB4(*(int *)(v5 + 84));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*BloodPressureQueryModel.dateLabel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void BloodPressureQueryModel.unitLabel.getter()
{
  uint64_t v0 = sub_8DDFC();
  sub_27A30(*(int *)(v0 + 88));
  sub_1EB8C();
  sub_A890();
}

void BloodPressureQueryModel.unitLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_8DDFC();
  sub_27AB4(*(int *)(v5 + 88));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*BloodPressureQueryModel.unitLabel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void BloodPressureQueryModel.snippetHeaderModel.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_8DDFC();
  sub_A44C(v1 + *(int *)(v3 + 92), a1, &qword_18A1A8);
  sub_A890();
}

void BloodPressureQueryModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t v3 = sub_8DDFC();
  sub_24D88(a1, v1 + *(int *)(v3 + 92), &qword_18A1A8);
  sub_A890();
}

uint64_t (*BloodPressureQueryModel.snippetHeaderModel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void BloodPressureQueryModel.init(systolic:diastolic:systolicMin:systolicMax:diastolicMin:diastolicMax:unitLabel:systolicLabel:diastolicLabel:dateLabel:url:headerModel:)( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v101 = v24;
  sub_494C(&qword_189D00);
  sub_6D20();
  __chkstk_darwin(v25);
  sub_6D44();
  uint64_t v28 = v27 - v26;
  type metadata accessor for AppPunchout(0LL);
  uint64_t v29 = sub_8DE98();
  uint64_t v100 = v30;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v29, v31, v32, v30);
  char v33 = (int *)sub_8DDFC();
  sub_8DE3C(v33[5]);
  uint64_t v86 = v34;
  *(_BYTE *)(v34 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 1;
  sub_8DE3C(*(int *)(v35 + 24));
  uint64_t v85 = v36;
  *(_BYTE *)(v36 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 1;
  sub_8DE3C(*(int *)(v37 + 28));
  sub_8DEB0(v38);
  sub_8DE3C(*(int *)(v39 + 32));
  sub_8DEB0(v40);
  sub_8DE3C(*(int *)(v41 + 36));
  sub_8DEB0(v42);
  sub_8DE3C(*(int *)(v43 + 40));
  sub_8DEB0(v44);
  uint64_t v46 = (uint64_t *)(a9 + v45[11]);
  *uint64_t v46 = 0LL;
  v46[1] = 0LL;
  uint64_t v84 = v46;
  uint64_t v47 = (uint64_t *)(a9 + v45[12]);
  *uint64_t v47 = 0LL;
  v47[1] = 0LL;
  uint64_t v87 = v47;
  char v48 = (uint64_t *)(a9 + v45[13]);
  *char v48 = 0LL;
  v48[1] = 0LL;
  uint64_t v88 = v48;
  sub_8DE64(v45[14]);
  unint64_t v89 = v49;
  sub_8DE64(*(int *)(v50 + 60));
  uint64_t v90 = v51;
  sub_8DE64(*(int *)(v52 + 64));
  uint64_t v91 = v53;
  sub_8DE64(*(int *)(v54 + 68));
  unsigned __int8 v56 = (void *)(a9 + v55[18]);
  uint64_t v57 = (void *)(a9 + v55[19]);
  uint64_t v58 = a9 + v55[20];
  uint64_t v59 = type metadata accessor for URL(0LL);
  sub_6D78(v58, v60, v61, v59);
  uint64_t v62 = (uint64_t *)(a9 + v33[21]);
  *uint64_t v62 = 0LL;
  v62[1] = 0LL;
  uint64_t v63 = (void *)(a9 + v33[22]);
  uint64_t v64 = a9 + v33[23];
  uint64_t v65 = type metadata accessor for SnippetHeaderModel(0LL);
  sub_6D78(v64, v66, v67, v65);
  *uint64_t v63 = a14;
  v63[1] = a15;
  *unsigned __int8 v56 = a16;
  v56[1] = a17;
  *uint64_t v57 = a18;
  v57[1] = a19;
  sub_A44C(a20, v28, &qword_189D00);
  uint64_t v68 = type metadata accessor for SpeakableString(0LL);
  uint64_t v69 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v28, 1LL, v68);
  if ((_DWORD)v69 == 1)
  {
    sub_279E0(v28, &qword_189D00);
    uint64_t v70 = 0LL;
    uint64_t v71 = 0LL;
  }

  else
  {
    uint64_t v70 = SpeakableString.print.getter(v69);
    uint64_t v71 = v72;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v68 - 8) + 8LL))(v28, v68);
  }

  char v95 = a6 & 1;
  swift_bridgeObjectRelease();
  *uint64_t v62 = v70;
  v62[1] = v71;
  sub_8AC20(a22, v64);
  *(void *)uint64_t v86 = a1;
  *(_BYTE *)(v86 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a2 & 1;
  *(void *)uint64_t v85 = a5;
  *(_BYTE *)(v85 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v95;
  *(void *)uint64_t v83 = a7;
  *(_BYTE *)(v83 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a8 & 1;
  *(void *)uint64_t v82 = a3;
  *(_BYTE *)(v82 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a4 & 1;
  *(void *)uint64_t v81 = a10;
  *(_BYTE *)(v81 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a11 & 1;
  *(void *)uint64_t v80 = a12;
  *(_BYTE *)(v80 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a13 & 1;
  uint64_t v73 = sub_8DE78(a1, a2 & 1);
  uint64_t v75 = v74;
  swift_bridgeObjectRelease();
  *uint64_t v84 = v73;
  v84[1] = v75;
  uint64_t v76 = sub_8DE78(a3, a4 & 1);
  uint64_t v78 = v77;
  swift_bridgeObjectRelease();
  *uint64_t v87 = v76;
  v87[1] = v78;
  sub_8DE78(a5, v95);
  sub_8DEF0();
  sub_8DEA8();
  *uint64_t v88 = v76;
  v88[1] = a11 & 1;
  sub_8DE78(a7, a8 & 1);
  sub_8DEF0();
  sub_8DEA8();
  *unint64_t v89 = v76;
  v89[1] = a11 & 1;
  sub_8DE78(a10, a11 & 1);
  sub_8DEF0();
  sub_8DEA8();
  uint64_t *v90 = v76;
  v90[1] = a11 & 1;
  sub_8DE78(a12, a13 & 1);
  sub_8DEF0();
  sub_8DEA8();
  *uint64_t v91 = v76;
  v91[1] = a11 & 1;
  sub_2521C(a21);
  sub_279E0(a22, &qword_18A1A8);
  sub_279E0(a21, &qword_189CF8);
  sub_279E0(a20, &qword_189D00);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v101, 0LL, 1LL, v100);
  sub_24D88(v101, a9, &qword_18A1A0);
}

uint64_t sub_8AC20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_494C(&qword_18A1A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_8AC68(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return 0LL;
  }
  uint64_t v2 = result;
  double v3 = trunc(*(double *)&result);
  if (*(double *)&result <= -9.22337204e18 || *(double *)&result >= 9.22337204e18 || v3 != *(double *)&result)
  {
    uint64_t v6 = sub_494C(&qword_18D778);
    uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
    *(_OWORD *)(v7 + 16) = xmmword_137250;
    *(void *)(v7 + sub_D7EC(v0 + 16, v0 + 56) = &type metadata for Double;
    *(void *)(v7 + 6sub_D878(v0 + 4) = &protocol witness table for Double;
    *(void *)(v7 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v2;
    uint64_t v8 = String.init(format:arguments:)(1714499109LL, 0xE400000000000000LL, v7);
    swift_bridgeObjectRelease(v7);
    return v8;
  }

  if ((~result & 0x7FF0000000000000LL) != 0) {
    return dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  }
  __break(1u);
  return result;
}

uint64_t sub_8AD74(uint64_t a1, unint64_t a2)
{
  BOOL v3 = a1 == 0x68636E7550707061LL && a2 == 0xEB0000000074756FLL;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x68636E7550707061LL, 0xEB0000000074756FLL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  BOOL v6 = a1 == 0x63696C6F74737973LL && a2 == 0xE800000000000000LL;
  if (v6
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x63696C6F74737973LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  BOOL v7 = a1 == 0x63696C6F74737973LL && a2 == 0xEB000000006E694DLL;
  if (v7
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x63696C6F74737973LL, 0xEB000000006E694DLL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 2LL;
  }

  BOOL v8 = a1 == 0x63696C6F74737973LL && a2 == 0xEB0000000078614DLL;
  if (v8
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x63696C6F74737973LL, 0xEB0000000078614DLL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 3LL;
  }

  BOOL v9 = a1 == 0x696C6F7473616964LL && a2 == 0xE900000000000063LL;
  if (v9
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x696C6F7473616964LL, 0xE900000000000063LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 4LL;
  }

  BOOL v10 = a1 == 0x696C6F7473616964LL && a2 == 0xEC0000006E694D63LL;
  if (v10
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x696C6F7473616964LL, 0xEC0000006E694D63LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 5LL;
  }

  BOOL v11 = a1 == 0x696C6F7473616964LL && a2 == 0xEC00000078614D63LL;
  if (v11
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x696C6F7473616964LL, 0xEC00000078614D63LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 6LL;
  }

  BOOL v12 = a1 == 0x63696C6F74737973LL && a2 == 0xEE00676E69727453LL;
  if (v12
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x63696C6F74737973LL, 0xEE00676E69727453LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 7LL;
  }

  BOOL v13 = a1 == 0x696C6F7473616964LL && a2 == 0xEF676E6972745363LL;
  if (v13
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x696C6F7473616964LL, 0xEF676E6972745363LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 8LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v14 = 0x8000000000145740LL;
    if (a2 == 0x8000000000145740LL) {
      goto LABEL_59;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000000145740LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
LABEL_59:
    swift_bridgeObjectRelease(v14);
    return 9LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v15 = 0x8000000000145760LL;
    if (a2 == 0x8000000000145760LL) {
      goto LABEL_64;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000000145760LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
LABEL_64:
    swift_bridgeObjectRelease(v15);
    return 10LL;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v16 = 0x8000000000145780LL;
    if (a2 == 0x8000000000145780LL) {
      goto LABEL_69;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000000145780LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v16 = a2;
LABEL_69:
    swift_bridgeObjectRelease(v16);
    return 11LL;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v17 = 0x80000000001457A0LL;
    if (a2 == 0x80000000001457A0LL) {
      goto LABEL_74;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x80000000001457A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v17 = a2;
LABEL_74:
    swift_bridgeObjectRelease(v17);
    return 12LL;
  }

  BOOL v18 = a1 == 0x6562614C74696E75LL && a2 == 0xEF676E697274536CLL;
  if (v18
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6562614C74696E75LL, 0xEF676E697274536CLL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 13LL;
  }

  else
  {
    BOOL v19 = a1 == 0x63696C6F74737973LL && a2 == 0xED00006C6562614CLL;
    if (v19
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x63696C6F74737973LL, 0xED00006C6562614CLL, a1, a2, 0LL) & 1) != 0)
    {
      swift_bridgeObjectRelease(a2);
      return 14LL;
    }

    else
    {
      BOOL v20 = a1 == 0x696C6F7473616964LL && a2 == 0xEE006C6562614C63LL;
      if (v20
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x696C6F7473616964LL, 0xEE006C6562614C63LL, a1, a2, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(a2);
        return 15LL;
      }

      else
      {
        BOOL v21 = a1 == 7107189 && a2 == 0xE300000000000000LL;
        if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(7107189LL, 0xE300000000000000LL, a1, a2, 0LL) & 1) != 0)
        {
          swift_bridgeObjectRelease(a2);
          return 16LL;
        }

        else
        {
          BOOL v22 = a1 == 0x6562614C65746164LL && a2 == 0xE90000000000006CLL;
          if (v22
            || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6562614C65746164LL, 0xE90000000000006CLL, a1, a2, 0LL) & 1) != 0)
          {
            swift_bridgeObjectRelease(a2);
            return 17LL;
          }

          else
          {
            BOOL v23 = a1 == 0x6562614C74696E75LL && a2 == 0xE90000000000006CLL;
            if (v23
              || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6562614C74696E75LL, 0xE90000000000006CLL, a1, a2, 0LL) & 1) != 0)
            {
              swift_bridgeObjectRelease(a2);
              return 18LL;
            }

            else if (a1 == 0xD000000000000012LL && a2 == 0x8000000000141630LL)
            {
              swift_bridgeObjectRelease(0x8000000000141630LL);
              return 19LL;
            }

            else
            {
              char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000000141630LL, a1, a2, 0LL);
              swift_bridgeObjectRelease(a2);
              if ((v24 & 1) != 0) {
                return 19LL;
              }
              else {
                return 20LL;
              }
            }
          }
        }
      }
    }
  }

uint64_t sub_8B4BC()
{
  return 20LL;
}

uint64_t sub_8B4C4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_8B500 + 4 * byte_13BAC0[a1]))( 0xD000000000000011LL,  0x8000000000145740LL);
}

uint64_t sub_8B500()
{
  return 0x68636E7550707061LL;
}

uint64_t sub_8B520()
{
  return 0x63696C6F74737973LL;
}

uint64_t sub_8B654()
{
  return 7107189LL;
}

uint64_t sub_8B664()
{
  return 0x6562614C65746164LL;
}

uint64_t sub_8B6A8()
{
  return sub_8B4C4(*v0);
}

uint64_t sub_8B6B0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_8AD74(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_8B6D4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_8B4BC();
  *a1 = result;
  return result;
}

uint64_t sub_8B6F8(uint64_t a1)
{
  unint64_t v2 = sub_8BAA4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_8B720(uint64_t a1)
{
  unint64_t v2 = sub_8BAA4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t BloodPressureQueryModel.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_494C(&qword_18D658);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_6D44();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_500C(a1, v10);
  unint64_t v12 = sub_8BAA4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for BloodPressureQueryModel.CodingKeys,  &type metadata for BloodPressureQueryModel.CodingKeys,  v12,  v10,  v11);
  uint64_t v13 = type metadata accessor for AppPunchout(0LL);
  sub_A410( &qword_18AA98,  (uint64_t (*)(uint64_t))&type metadata accessor for AppPunchout,  (uint64_t)&protocol conformance descriptor for AppPunchout);
  sub_8DEC8();
  sub_8DE8C(v3, v14, v5, v13);
  if (!v2)
  {
    Model = (int *)type metadata accessor for BloodPressureQueryModel(0LL);
    uint64_t v16 = sub_27A9C(v3 + Model[5]);
    sub_1EAF4(v16, v17, 1);
    uint64_t v18 = sub_27A9C(v3 + Model[6]);
    sub_1EAF4(v18, v19, 2);
    uint64_t v20 = sub_27A9C(v3 + Model[7]);
    sub_1EAF4(v20, v21, 3);
    uint64_t v22 = sub_27A9C(v3 + Model[8]);
    sub_1EAF4(v22, v23, 4);
    uint64_t v24 = sub_27A9C(v3 + Model[9]);
    sub_1EAF4(v24, v25, 5);
    uint64_t v26 = sub_27A9C(v3 + Model[10]);
    sub_1EAF4(v26, v27, 6);
    uint64_t v28 = sub_5E260(Model[11]);
    sub_1EAB8(v28, v29, 7);
    uint64_t v30 = sub_5E260(Model[12]);
    sub_1EAB8(v30, v31, 8);
    uint64_t v32 = sub_5E260(Model[13]);
    sub_1EAB8(v32, v33, 9);
    uint64_t v34 = sub_5E260(Model[14]);
    sub_1EAB8(v34, v35, 10);
    uint64_t v36 = sub_5E260(Model[15]);
    sub_1EAB8(v36, v37, 11);
    uint64_t v38 = sub_5E260(Model[16]);
    sub_1EAB8(v38, v39, 12);
    uint64_t v40 = sub_5E260(Model[17]);
    sub_1EAB8(v40, v41, 13);
    uint64_t v42 = sub_5E260(Model[18]);
    sub_1EAB8(v42, v43, 14);
    uint64_t v44 = sub_5E260(Model[19]);
    sub_1EAB8(v44, v45, 15);
    uint64_t v46 = type metadata accessor for URL(0LL);
    sub_A410( &qword_18D668,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v47 = sub_8DED4();
    sub_8DE8C(v47, v48, v49, v46);
    uint64_t v50 = sub_5E260(Model[21]);
    sub_1EAB8(v50, v51, 17);
    uint64_t v52 = sub_5E260(Model[22]);
    sub_1EAB8(v52, v53, 18);
    uint64_t v54 = type metadata accessor for SnippetHeaderModel(0LL);
    sub_A410( &qword_18AAA8,  type metadata accessor for SnippetHeaderModel,  (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    uint64_t v55 = sub_8DED4();
    sub_8DE8C(v55, v56, v57, v54);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

unint64_t sub_8BAA4()
{
  unint64_t result = qword_18D660;
  if (!qword_18D660)
  {
    unint64_t result = swift_getWitnessTable(&unk_13BC9C, &type metadata for BloodPressureQueryModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18D660);
  }

  return result;
}

void BloodPressureQueryModel.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v62 = v4;
  sub_494C(&qword_189CF8);
  sub_6D20();
  __chkstk_darwin(v5);
  sub_6D30();
  uint64_t v73 = v6;
  sub_494C(&qword_18A1A0);
  sub_6D20();
  __chkstk_darwin(v7);
  sub_6D30();
  uint64_t v74 = v8;
  uint64_t v75 = sub_494C(&qword_18D670);
  uint64_t v76 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  sub_6D30();
  Model = (int *)type metadata accessor for BloodPressureQueryModel(0LL);
  sub_6D20();
  __chkstk_darwin(v10);
  sub_6D44();
  uint64_t v13 = v12 - v11;
  type metadata accessor for AppPunchout(0LL);
  uint64_t v14 = sub_8DE98();
  uint64_t v72 = v15;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v14, v16, v17, v15);
  sub_8DE3C(Model[5]);
  *(_BYTE *)(v18 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 1;
  sub_8DE3C(Model[6]);
  *(_BYTE *)(v19 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 1;
  sub_8DE3C(Model[7]);
  *(_BYTE *)(v20 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 1;
  sub_8DE3C(Model[8]);
  *(_BYTE *)(v21 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 1;
  sub_8DE3C(Model[9]);
  *(_BYTE *)(v22 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 1;
  sub_8DE3C(Model[10]);
  *(_BYTE *)(v23 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 1;
  uint64_t v24 = (void *)(v13 + Model[11]);
  *uint64_t v24 = 0LL;
  v24[1] = 0LL;
  uint64_t v70 = v24;
  uint64_t v25 = (void *)(v13 + Model[12]);
  *uint64_t v25 = 0LL;
  v25[1] = 0LL;
  uint64_t v69 = v25;
  sub_8DE64(Model[13]);
  uint64_t v68 = v26;
  sub_8DE64(Model[14]);
  uint64_t v67 = v27;
  uint64_t v28 = (void *)(v13 + Model[15]);
  *uint64_t v28 = 0LL;
  v28[1] = 0LL;
  uint64_t v66 = v28;
  sub_8DE64(Model[16]);
  uint64_t v65 = v29;
  sub_8DE64(Model[17]);
  uint64_t v64 = v30;
  uint64_t v31 = (void *)(v13 + Model[18]);
  *uint64_t v31 = 0LL;
  v31[1] = 0LL;
  uint64_t v32 = (void *)(v13 + Model[19]);
  *uint64_t v32 = 0LL;
  v32[1] = 0LL;
  uint64_t v61 = v13 + Model[20];
  uint64_t v71 = type metadata accessor for URL(0LL);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v61, 1LL, 1LL, v71);
  uint64_t v33 = (void *)(v13 + Model[21]);
  *uint64_t v33 = 0LL;
  v33[1] = 0LL;
  uint64_t v34 = (void *)(v13 + Model[22]);
  *uint64_t v34 = 0LL;
  v34[1] = 0LL;
  uint64_t v79 = v13;
  uint64_t v35 = v13 + Model[23];
  uint64_t v36 = type metadata accessor for SnippetHeaderModel(0LL);
  uint64_t v37 = sub_8DE98();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v37, v38, v39, v36);
  uint64_t v40 = a1;
  uint64_t v41 = a1[3];
  uint64_t v42 = v40[4];
  uint64_t v78 = v40;
  uint64_t v43 = sub_500C(v40, v41);
  unint64_t v44 = sub_8BAA4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for BloodPressureQueryModel.CodingKeys,  &type metadata for BloodPressureQueryModel.CodingKeys,  v44,  v41,  v42);
  if (v77)
  {
    uint64_t v60 = v79;
  }

  else
  {
    sub_A410( &qword_18AAB8,  (uint64_t (*)(uint64_t))&type metadata accessor for AppPunchout,  (uint64_t)&protocol conformance descriptor for AppPunchout);
    sub_8DEC8();
    sub_8DE80(v72, v45, v75, v72);
    sub_24D88(v74, v79, &qword_18A1A0);
    uint64_t v46 = sub_8DE1C(1);
    sub_8DE54(v46, v47);
    uint64_t v48 = sub_8DE1C(2);
    sub_8DE54(v48, v49);
    uint64_t v50 = sub_8DE1C(3);
    sub_8DE54(v50, v51);
    uint64_t v52 = sub_8DE1C(4);
    sub_8DE54(v52, v53);
    uint64_t v54 = sub_8DE1C(5);
    sub_8DE54(v54, v55);
    uint64_t v56 = sub_8DE1C(6);
    sub_8DE54(v56, v57);
    char v81 = 7;
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v81, v75);
    sub_8DE48();
    sub_8DEE8();
    *uint64_t v70 = v43;
    v70[1] = v79;
    char v81 = 8;
    sub_8DE30((uint64_t)&v81, v75);
    sub_8DE48();
    sub_8DEE8();
    *uint64_t v69 = v43;
    v69[1] = v79;
    char v81 = 9;
    sub_8DE30((uint64_t)&v81, v75);
    sub_8DE48();
    sub_8DEE8();
    *uint64_t v68 = v43;
    v68[1] = v79;
    sub_8DE04(10);
    sub_8DE48();
    sub_8DE70();
    *uint64_t v67 = v43;
    v67[1] = v79;
    sub_8DE04(11);
    sub_8DE48();
    sub_8DE70();
    *uint64_t v66 = v43;
    v66[1] = v79;
    sub_8DE04(12);
    sub_8DE48();
    sub_8DE70();
    *uint64_t v65 = v43;
    v65[1] = v79;
    sub_8DE04(13);
    sub_8DE48();
    sub_8DE70();
    *uint64_t v64 = v43;
    v64[1] = v79;
    sub_8DE04(14);
    sub_8DE48();
    sub_8DE70();
    *uint64_t v31 = v43;
    v31[1] = v79;
    sub_8DE04(15);
    sub_8DE48();
    sub_8DE70();
    *uint64_t v32 = v43;
    v32[1] = v79;
    char v81 = 16;
    sub_A410( &qword_18D678,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    sub_8DEC8();
    sub_8DE80(v71, v58, v75, v71);
    sub_24D88((uint64_t)v73, v61, &qword_189CF8);
    sub_8DE04(17);
    sub_8DE48();
    sub_8DEBC((uint64_t)v80);
    *uint64_t v73 = v43;
    v73[1] = v79;
    sub_8DE04(18);
    sub_8DE48();
    sub_8DEBC((uint64_t)&v82);
    *uint64_t v73 = v43;
    v73[1] = v79;
    char v81 = 19;
    sub_A410( &qword_18AAC8,  type metadata accessor for SnippetHeaderModel,  (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    sub_8DEC8();
    sub_8DE80(v36, v59, v75, v36);
    (*(void (**)(void *, uint64_t))(v76 + 8))(v43, v75);
    uint64_t v60 = v79;
    sub_24D88(v62, v35, &qword_18A1A8);
    sub_8C1D0(v79, a2);
  }

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v78);
  sub_26F04(v60, type metadata accessor for BloodPressureQueryModel);
}

uint64_t sub_8C1D0(uint64_t a1, uint64_t a2)
{
  uint64_t Model = type metadata accessor for BloodPressureQueryModel(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Model - 8) + 16LL))(a2, a1, Model);
  return a2;
}

void sub_8C214()
{
}

void sub_8C240()
{
}

void sub_8C26C(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_8C280(void *a1)
{
  return BloodPressureQueryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for BloodPressureQueryModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for AppPunchout(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_494C(&qword_18A1A0);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[5];
    uint64_t v11 = a3[6];
    uint64_t v12 = (char *)a1 + v10;
    uint64_t v13 = (char *)a2 + v10;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = (char *)a1 + v11;
    uint64_t v15 = (char *)a2 + v11;
    *(void *)uint64_t v14 = *(void *)v15;
    v14[8] = v15[8];
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = (char *)a1 + v16;
    uint64_t v19 = (char *)a2 + v16;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = (char *)a1 + v17;
    uint64_t v21 = (char *)a2 + v17;
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    uint64_t v22 = a3[9];
    uint64_t v23 = a3[10];
    uint64_t v24 = (char *)a1 + v22;
    uint64_t v25 = (char *)a2 + v22;
    uint64_t v26 = *(void *)v25;
    v24[8] = v25[8];
    *(void *)uint64_t v24 = v26;
    uint64_t v27 = (char *)a1 + v23;
    uint64_t v28 = (char *)a2 + v23;
    v27[8] = v28[8];
    *(void *)uint64_t v27 = *(void *)v28;
    uint64_t v29 = a3[11];
    uint64_t v30 = a3[12];
    uint64_t v31 = (uint64_t *)((char *)a1 + v29);
    uint64_t v32 = (uint64_t *)((char *)a2 + v29);
    uint64_t v90 = v32[1];
    *uint64_t v31 = *v32;
    v31[1] = v90;
    uint64_t v33 = (uint64_t *)((char *)a1 + v30);
    uint64_t v34 = (uint64_t *)((char *)a2 + v30);
    uint64_t v91 = v34[1];
    *uint64_t v33 = *v34;
    v33[1] = v91;
    uint64_t v35 = a3[13];
    uint64_t v36 = a3[14];
    uint64_t v37 = (uint64_t *)((char *)a1 + v35);
    uint64_t v38 = (uint64_t *)((char *)a2 + v35);
    uint64_t v88 = v38[1];
    *uint64_t v37 = *v38;
    v37[1] = v88;
    uint64_t v39 = (uint64_t *)((char *)a1 + v36);
    uint64_t v40 = (uint64_t *)((char *)a2 + v36);
    uint64_t v89 = v40[1];
    *uint64_t v39 = *v40;
    v39[1] = v89;
    uint64_t v41 = a3[15];
    uint64_t v42 = a3[16];
    uint64_t v43 = (uint64_t *)((char *)a1 + v41);
    unint64_t v44 = (uint64_t *)((char *)a2 + v41);
    uint64_t v45 = v44[1];
    *uint64_t v43 = *v44;
    v43[1] = v45;
    uint64_t v46 = (uint64_t *)((char *)a1 + v42);
    char v47 = (uint64_t *)((char *)a2 + v42);
    uint64_t v48 = v47[1];
    *uint64_t v46 = *v47;
    v46[1] = v48;
    uint64_t v49 = a3[17];
    uint64_t v50 = a3[18];
    char v51 = (uint64_t *)((char *)a1 + v49);
    uint64_t v52 = (uint64_t *)((char *)a2 + v49);
    uint64_t v53 = v52[1];
    *char v51 = *v52;
    v51[1] = v53;
    uint64_t v54 = (uint64_t *)((char *)a1 + v50);
    char v55 = (uint64_t *)((char *)a2 + v50);
    uint64_t v56 = v55[1];
    *uint64_t v54 = *v55;
    v54[1] = v56;
    uint64_t v57 = a3[19];
    uint64_t v58 = a3[20];
    uint64_t v59 = (uint64_t *)((char *)a1 + v57);
    uint64_t v60 = (uint64_t *)((char *)a2 + v57);
    uint64_t v61 = v60[1];
    *uint64_t v59 = *v60;
    v59[1] = v61;
    __dst = (char *)a1 + v58;
    uint64_t v62 = (char *)a2 + v58;
    uint64_t v63 = type metadata accessor for URL(0LL);
    swift_bridgeObjectRetain(v90);
    swift_bridgeObjectRetain(v91);
    swift_bridgeObjectRetain(v88);
    swift_bridgeObjectRetain(v89);
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v48);
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v61);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v62, 1LL, v63))
    {
      uint64_t v64 = sub_494C(&qword_189CF8);
      memcpy(__dst, v62, *(void *)(*(void *)(v64 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 16LL))(__dst, v62, v63);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dst, 0LL, 1LL, v63);
    }

    uint64_t v65 = a3[21];
    uint64_t v66 = a3[22];
    uint64_t v67 = (uint64_t *)((char *)a1 + v65);
    uint64_t v68 = (uint64_t *)((char *)a2 + v65);
    uint64_t v69 = v68[1];
    *uint64_t v67 = *v68;
    v67[1] = v69;
    uint64_t v70 = (uint64_t *)((char *)a1 + v66);
    uint64_t v71 = (uint64_t *)((char *)a2 + v66);
    uint64_t v72 = v71[1];
    *uint64_t v70 = *v71;
    v70[1] = v72;
    uint64_t v73 = a3[23];
    uint64_t v74 = (char *)a1 + v73;
    uint64_t v75 = (char *)a2 + v73;
    uint64_t v76 = type metadata accessor for SnippetHeaderModel(0LL);
    swift_bridgeObjectRetain(v69);
    swift_bridgeObjectRetain(v72);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v75, 1LL, v76))
    {
      uint64_t v77 = sub_494C(&qword_18A1A8);
      memcpy(v74, v75, *(void *)(*(void *)(v77 - 8) + 64LL));
    }

    else
    {
      uint64_t v78 = type metadata accessor for SpeakableString(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 16LL))(v74, v75, v78);
      uint64_t v79 = *(int *)(v76 + 20);
      uint64_t v80 = &v74[v79];
      char v81 = &v75[v79];
      uint64_t v82 = *((void *)v81 + 1);
      *(void *)uint64_t v80 = *(void *)v81;
      *((void *)v80 + 1) = v82;
      uint64_t v83 = *(int *)(v76 + 24);
      uint64_t v84 = &v74[v83];
      uint64_t v85 = &v75[v83];
      uint64_t v86 = *((void *)v85 + 1);
      *(void *)uint64_t v84 = *(void *)v85;
      *((void *)v84 + 1) = v86;
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRetain(v86);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v74, 0LL, 1LL, v76);
    }
  }

  return a1;
}

uint64_t destroy for BloodPressureQueryModel(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for AppPunchout(0LL);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[11] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[12] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[13] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[14] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[15] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[16] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[17] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[18] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[19] + 8));
  uint64_t v5 = a1 + a2[20];
  uint64_t v6 = type metadata accessor for URL(0LL);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[21] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[22] + 8));
  uint64_t v7 = a1 + a2[23];
  uint64_t v8 = type metadata accessor for SnippetHeaderModel(0LL);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v7, 1LL, v8);
  if (!(_DWORD)result)
  {
    uint64_t v10 = type metadata accessor for SpeakableString(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v7, v10);
    swift_bridgeObjectRelease(*(void *)(v7 + *(int *)(v8 + 20) + 8));
    return swift_bridgeObjectRelease(*(void *)(v7 + *(int *)(v8 + 24) + 8));
  }

  return result;
}

char *initializeWithCopy for BloodPressureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_18A1A0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = &a1[v9];
  uint64_t v13 = &a2[v9];
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = &a1[v15];
  uint64_t v19 = &a2[v15];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = a3[10];
  uint64_t v22 = &a1[v20];
  uint64_t v23 = &a2[v20];
  uint64_t v24 = *(void *)v23;
  v22[8] = v23[8];
  *(void *)uint64_t v22 = v24;
  uint64_t v25 = &a1[v21];
  uint64_t v26 = &a2[v21];
  v25[8] = v26[8];
  *(void *)uint64_t v25 = *(void *)v26;
  uint64_t v27 = a3[11];
  uint64_t v28 = a3[12];
  uint64_t v29 = &a1[v27];
  uint64_t v30 = &a2[v27];
  uint64_t v88 = *((void *)v30 + 1);
  *(void *)uint64_t v29 = *(void *)v30;
  *((void *)v29 + 1) = v88;
  uint64_t v31 = &a1[v28];
  uint64_t v32 = &a2[v28];
  uint64_t v89 = *((void *)v32 + 1);
  *(void *)uint64_t v31 = *(void *)v32;
  *((void *)v31 + 1) = v89;
  uint64_t v33 = a3[13];
  uint64_t v34 = a3[14];
  uint64_t v35 = &a1[v33];
  uint64_t v36 = &a2[v33];
  uint64_t v86 = *((void *)v36 + 1);
  *(void *)uint64_t v35 = *(void *)v36;
  *((void *)v35 + 1) = v86;
  uint64_t v37 = &a1[v34];
  uint64_t v38 = &a2[v34];
  uint64_t v87 = *((void *)v38 + 1);
  *(void *)uint64_t v37 = *(void *)v38;
  *((void *)v37 + 1) = v87;
  uint64_t v39 = a3[15];
  uint64_t v40 = a3[16];
  uint64_t v41 = &a1[v39];
  uint64_t v42 = &a2[v39];
  uint64_t v43 = *((void *)v42 + 1);
  *(void *)uint64_t v41 = *(void *)v42;
  *((void *)v41 + 1) = v43;
  unint64_t v44 = &a1[v40];
  uint64_t v45 = &a2[v40];
  uint64_t v46 = *((void *)v45 + 1);
  *(void *)unint64_t v44 = *(void *)v45;
  *((void *)v44 + 1) = v46;
  uint64_t v47 = a3[17];
  uint64_t v48 = a3[18];
  uint64_t v49 = &a1[v47];
  uint64_t v50 = &a2[v47];
  uint64_t v51 = *((void *)v50 + 1);
  *(void *)uint64_t v49 = *(void *)v50;
  *((void *)v49 + 1) = v51;
  uint64_t v52 = &a1[v48];
  uint64_t v53 = &a2[v48];
  uint64_t v54 = *((void *)v53 + 1);
  *(void *)uint64_t v52 = *(void *)v53;
  *((void *)v52 + 1) = v54;
  uint64_t v55 = a3[19];
  uint64_t v56 = a3[20];
  uint64_t v57 = &a1[v55];
  uint64_t v58 = &a2[v55];
  uint64_t v59 = *((void *)v58 + 1);
  *(void *)uint64_t v57 = *(void *)v58;
  *((void *)v57 + 1) = v59;
  __dst = &a1[v56];
  uint64_t v60 = &a2[v56];
  uint64_t v61 = type metadata accessor for URL(0LL);
  swift_bridgeObjectRetain(v88);
  swift_bridgeObjectRetain(v89);
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRetain(v59);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v60, 1LL, v61))
  {
    uint64_t v62 = sub_494C(&qword_189CF8);
    memcpy(__dst, v60, *(void *)(*(void *)(v62 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16LL))(__dst, v60, v61);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dst, 0LL, 1LL, v61);
  }

  uint64_t v63 = a3[21];
  uint64_t v64 = a3[22];
  uint64_t v65 = &a1[v63];
  uint64_t v66 = &a2[v63];
  uint64_t v67 = *((void *)v66 + 1);
  *(void *)uint64_t v65 = *(void *)v66;
  *((void *)v65 + 1) = v67;
  uint64_t v68 = &a1[v64];
  uint64_t v69 = &a2[v64];
  uint64_t v70 = *((void *)v69 + 1);
  *(void *)uint64_t v68 = *(void *)v69;
  *((void *)v68 + 1) = v70;
  uint64_t v71 = a3[23];
  uint64_t v72 = &a1[v71];
  uint64_t v73 = &a2[v71];
  uint64_t v74 = type metadata accessor for SnippetHeaderModel(0LL);
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRetain(v70);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v73, 1LL, v74))
  {
    uint64_t v75 = sub_494C(&qword_18A1A8);
    memcpy(v72, v73, *(void *)(*(void *)(v75 - 8) + 64LL));
  }

  else
  {
    uint64_t v76 = type metadata accessor for SpeakableString(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 16LL))(v72, v73, v76);
    uint64_t v77 = *(int *)(v74 + 20);
    uint64_t v78 = &v72[v77];
    uint64_t v79 = &v73[v77];
    uint64_t v80 = *((void *)v79 + 1);
    *(void *)uint64_t v78 = *(void *)v79;
    *((void *)v78 + 1) = v80;
    uint64_t v81 = *(int *)(v74 + 24);
    uint64_t v82 = &v72[v81];
    uint64_t v83 = &v73[v81];
    uint64_t v84 = *((void *)v83 + 1);
    *(void *)uint64_t v82 = *(void *)v83;
    *((void *)v82 + 1) = v84;
    swift_bridgeObjectRetain(v80);
    swift_bridgeObjectRetain(v84);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v72, 0LL, 1LL, v74);
  }

  return a1;
}

char *assignWithCopy for BloodPressureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_18A1A0);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = *(void *)v13;
  v12[8] = v13[8];
  *(void *)uint64_t v12 = v14;
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)uint64_t v16 = v18;
  uint64_t v19 = a3[7];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = *(void *)v21;
  v20[8] = v21[8];
  *(void *)uint64_t v20 = v22;
  uint64_t v23 = a3[8];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = *(void *)v25;
  v24[8] = v25[8];
  *(void *)uint64_t v24 = v26;
  uint64_t v27 = a3[9];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v30 = *(void *)v29;
  v28[8] = v29[8];
  *(void *)uint64_t v28 = v30;
  uint64_t v31 = a3[10];
  uint64_t v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  uint64_t v34 = *(void *)v33;
  v32[8] = v33[8];
  *(void *)uint64_t v32 = v34;
  uint64_t v35 = a3[11];
  uint64_t v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  *(void *)uint64_t v36 = *(void *)v37;
  uint64_t v38 = *((void *)v37 + 1);
  uint64_t v39 = *((void *)v36 + 1);
  *((void *)v36 + 1) = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  uint64_t v40 = a3[12];
  uint64_t v41 = &a1[v40];
  uint64_t v42 = &a2[v40];
  *(void *)uint64_t v41 = *(void *)v42;
  uint64_t v43 = *((void *)v42 + 1);
  uint64_t v44 = *((void *)v41 + 1);
  *((void *)v41 + 1) = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v44);
  uint64_t v45 = a3[13];
  uint64_t v46 = &a1[v45];
  uint64_t v47 = &a2[v45];
  *(void *)uint64_t v46 = *(void *)v47;
  uint64_t v48 = *((void *)v47 + 1);
  uint64_t v49 = *((void *)v46 + 1);
  *((void *)v46 + 1) = v48;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRelease(v49);
  uint64_t v50 = a3[14];
  uint64_t v51 = &a1[v50];
  uint64_t v52 = &a2[v50];
  *(void *)uint64_t v51 = *(void *)v52;
  uint64_t v53 = *((void *)v52 + 1);
  uint64_t v54 = *((void *)v51 + 1);
  *((void *)v51 + 1) = v53;
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRelease(v54);
  uint64_t v55 = a3[15];
  uint64_t v56 = &a1[v55];
  uint64_t v57 = &a2[v55];
  *(void *)uint64_t v56 = *(void *)v57;
  uint64_t v58 = *((void *)v57 + 1);
  uint64_t v59 = *((void *)v56 + 1);
  *((void *)v56 + 1) = v58;
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRelease(v59);
  uint64_t v60 = a3[16];
  uint64_t v61 = &a1[v60];
  uint64_t v62 = &a2[v60];
  *(void *)uint64_t v61 = *(void *)v62;
  uint64_t v63 = *((void *)v62 + 1);
  uint64_t v64 = *((void *)v61 + 1);
  *((void *)v61 + 1) = v63;
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRelease(v64);
  uint64_t v65 = a3[17];
  uint64_t v66 = &a1[v65];
  uint64_t v67 = &a2[v65];
  *(void *)uint64_t v66 = *(void *)v67;
  uint64_t v68 = *((void *)v67 + 1);
  uint64_t v69 = *((void *)v66 + 1);
  *((void *)v66 + 1) = v68;
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRelease(v69);
  uint64_t v70 = a3[18];
  uint64_t v71 = &a1[v70];
  uint64_t v72 = &a2[v70];
  *(void *)uint64_t v71 = *(void *)v72;
  uint64_t v73 = *((void *)v72 + 1);
  uint64_t v74 = *((void *)v71 + 1);
  *((void *)v71 + 1) = v73;
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRelease(v74);
  uint64_t v75 = a3[19];
  uint64_t v76 = &a1[v75];
  uint64_t v77 = &a2[v75];
  *(void *)uint64_t v76 = *(void *)v77;
  uint64_t v78 = *((void *)v77 + 1);
  uint64_t v79 = *((void *)v76 + 1);
  *((void *)v76 + 1) = v78;
  swift_bridgeObjectRetain(v78);
  swift_bridgeObjectRelease(v79);
  uint64_t v80 = a3[20];
  uint64_t v81 = &a1[v80];
  uint64_t v82 = &a2[v80];
  uint64_t v83 = type metadata accessor for URL(0LL);
  int v84 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v81, 1LL, v83);
  int v85 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v82, 1LL, v83);
  if (v84)
  {
    if (!v85)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v83 - 8) + 16LL))(v81, v82, v83);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v81, 0LL, 1LL, v83);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v86 = *(void *)(v83 - 8);
  if (v85)
  {
    (*(void (**)(char *, uint64_t))(v86 + 8))(v81, v83);
LABEL_12:
    uint64_t v87 = sub_494C(&qword_189CF8);
    memcpy(v81, v82, *(void *)(*(void *)(v87 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v86 + 24))(v81, v82, v83);
LABEL_13:
  uint64_t v88 = a3[21];
  uint64_t v89 = &a1[v88];
  uint64_t v90 = &a2[v88];
  *(void *)uint64_t v89 = *(void *)v90;
  uint64_t v91 = *((void *)v90 + 1);
  uint64_t v92 = *((void *)v89 + 1);
  *((void *)v89 + 1) = v91;
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRelease(v92);
  uint64_t v93 = a3[22];
  uint64_t v94 = &a1[v93];
  char v95 = &a2[v93];
  *(void *)uint64_t v94 = *(void *)v95;
  uint64_t v96 = *((void *)v95 + 1);
  uint64_t v97 = *((void *)v94 + 1);
  *((void *)v94 + 1) = v96;
  swift_bridgeObjectRetain(v96);
  swift_bridgeObjectRelease(v97);
  uint64_t v98 = a3[23];
  uint64_t v99 = &a1[v98];
  uint64_t v100 = &a2[v98];
  uint64_t v101 = type metadata accessor for SnippetHeaderModel(0LL);
  int v102 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v99, 1LL, v101);
  int v103 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v100, 1LL, v101);
  if (!v102)
  {
    if (!v103)
    {
      uint64_t v115 = type metadata accessor for SpeakableString(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v115 - 8) + 24LL))(v99, v100, v115);
      uint64_t v116 = *(int *)(v101 + 20);
      uint64_t v117 = &v99[v116];
      uint64_t v118 = &v100[v116];
      *(void *)uint64_t v117 = *(void *)v118;
      uint64_t v119 = *((void *)v118 + 1);
      uint64_t v120 = *((void *)v117 + 1);
      *((void *)v117 + 1) = v119;
      swift_bridgeObjectRetain(v119);
      swift_bridgeObjectRelease(v120);
      uint64_t v121 = *(int *)(v101 + 24);
      uint64_t v122 = &v99[v121];
      uint64_t v123 = &v100[v121];
      *(void *)uint64_t v122 = *(void *)v123;
      uint64_t v124 = *((void *)v123 + 1);
      uint64_t v125 = *((void *)v122 + 1);
      *((void *)v122 + 1) = v124;
      swift_bridgeObjectRetain(v124);
      swift_bridgeObjectRelease(v125);
      return a1;
    }

    sub_26F04((uint64_t)v99, type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }

  if (v103)
  {
LABEL_18:
    uint64_t v113 = sub_494C(&qword_18A1A8);
    memcpy(v99, v100, *(void *)(*(void *)(v113 - 8) + 64LL));
    return a1;
  }

  uint64_t v104 = type metadata accessor for SpeakableString(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v104 - 8) + 16LL))(v99, v100, v104);
  uint64_t v105 = *(int *)(v101 + 20);
  unint64_t v106 = &v99[v105];
  unint64_t v107 = &v100[v105];
  *(void *)unint64_t v106 = *(void *)v107;
  uint64_t v108 = *((void *)v107 + 1);
  *((void *)v106 + 1) = v108;
  uint64_t v109 = *(int *)(v101 + 24);
  uint64_t v110 = &v99[v109];
  uint64_t v111 = &v100[v109];
  *(void *)uint64_t v110 = *(void *)v111;
  uint64_t v112 = *((void *)v111 + 1);
  *((void *)v110 + 1) = v112;
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRetain(v112);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v99, 0LL, 1LL, v101);
  return a1;
}

char *initializeWithTake for BloodPressureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_18A1A0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = &a1[v9];
  uint64_t v13 = &a2[v9];
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = &a1[v15];
  uint64_t v19 = &a2[v15];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = a3[10];
  uint64_t v22 = &a1[v20];
  uint64_t v23 = &a2[v20];
  v22[8] = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v24 = &a1[v21];
  uint64_t v25 = &a2[v21];
  v24[8] = v25[8];
  *(void *)uint64_t v24 = *(void *)v25;
  uint64_t v26 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  *(_OWORD *)&a1[v26] = *(_OWORD *)&a2[v26];
  uint64_t v27 = a3[14];
  *(_OWORD *)&a1[a3[13]] = *(_OWORD *)&a2[a3[13]];
  *(_OWORD *)&a1[v27] = *(_OWORD *)&a2[v27];
  uint64_t v28 = a3[16];
  *(_OWORD *)&a1[a3[15]] = *(_OWORD *)&a2[a3[15]];
  *(_OWORD *)&a1[v28] = *(_OWORD *)&a2[v28];
  uint64_t v29 = a3[18];
  *(_OWORD *)&a1[a3[17]] = *(_OWORD *)&a2[a3[17]];
  *(_OWORD *)&a1[v29] = *(_OWORD *)&a2[v29];
  uint64_t v30 = a3[20];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  *(_OWORD *)&a1[a3[19]] = *(_OWORD *)&a2[a3[19]];
  uint64_t v33 = type metadata accessor for URL(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v32, 1LL, v33))
  {
    uint64_t v34 = sub_494C(&qword_189CF8);
    memcpy(v31, v32, *(void *)(*(void *)(v34 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32LL))(v31, v32, v33);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v31, 0LL, 1LL, v33);
  }

  uint64_t v35 = a3[22];
  *(_OWORD *)&a1[a3[21]] = *(_OWORD *)&a2[a3[21]];
  *(_OWORD *)&a1[v35] = *(_OWORD *)&a2[v35];
  uint64_t v36 = a3[23];
  uint64_t v37 = &a1[v36];
  uint64_t v38 = &a2[v36];
  uint64_t v39 = type metadata accessor for SnippetHeaderModel(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v38, 1LL, v39))
  {
    uint64_t v40 = sub_494C(&qword_18A1A8);
    memcpy(v37, v38, *(void *)(*(void *)(v40 - 8) + 64LL));
  }

  else
  {
    uint64_t v41 = type metadata accessor for SpeakableString(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32LL))(v37, v38, v41);
    *(_OWORD *)&v37[*(int *)(v39 + 20)] = *(_OWORD *)&v38[*(int *)(v39 + 20)];
    *(_OWORD *)&v37[*(int *)(v39 + 24)] = *(_OWORD *)&v38[*(int *)(v39 + 24)];
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v37, 0LL, 1LL, v39);
  }

  return a1;
}

char *assignWithTake for BloodPressureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_18A1A0);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v11];
  uint64_t v14 = &a2[v11];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = &a1[v12];
  uint64_t v16 = &a2[v12];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = a3[7];
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v17];
  uint64_t v20 = &a2[v17];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = &a1[v18];
  uint64_t v22 = &a2[v18];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  uint64_t v23 = a3[9];
  uint64_t v24 = a3[10];
  uint64_t v25 = &a1[v23];
  uint64_t v26 = &a2[v23];
  uint64_t v27 = *(void *)v26;
  v25[8] = v26[8];
  *(void *)uint64_t v25 = v27;
  uint64_t v28 = &a1[v24];
  uint64_t v29 = &a2[v24];
  v28[8] = v29[8];
  *(void *)uint64_t v28 = *(void *)v29;
  uint64_t v30 = a3[11];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v34 = *(void *)v32;
  uint64_t v33 = *((void *)v32 + 1);
  uint64_t v35 = *((void *)v31 + 1);
  *(void *)uint64_t v31 = v34;
  *((void *)v31 + 1) = v33;
  swift_bridgeObjectRelease(v35);
  uint64_t v36 = a3[12];
  uint64_t v37 = &a1[v36];
  uint64_t v38 = &a2[v36];
  uint64_t v40 = *(void *)v38;
  uint64_t v39 = *((void *)v38 + 1);
  uint64_t v41 = *((void *)v37 + 1);
  *(void *)uint64_t v37 = v40;
  *((void *)v37 + 1) = v39;
  swift_bridgeObjectRelease(v41);
  uint64_t v42 = a3[13];
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  uint64_t v46 = *(void *)v44;
  uint64_t v45 = *((void *)v44 + 1);
  uint64_t v47 = *((void *)v43 + 1);
  *(void *)uint64_t v43 = v46;
  *((void *)v43 + 1) = v45;
  swift_bridgeObjectRelease(v47);
  uint64_t v48 = a3[14];
  uint64_t v49 = &a1[v48];
  uint64_t v50 = &a2[v48];
  uint64_t v52 = *(void *)v50;
  uint64_t v51 = *((void *)v50 + 1);
  uint64_t v53 = *((void *)v49 + 1);
  *(void *)uint64_t v49 = v52;
  *((void *)v49 + 1) = v51;
  swift_bridgeObjectRelease(v53);
  uint64_t v54 = a3[15];
  uint64_t v55 = &a1[v54];
  uint64_t v56 = &a2[v54];
  uint64_t v58 = *(void *)v56;
  uint64_t v57 = *((void *)v56 + 1);
  uint64_t v59 = *((void *)v55 + 1);
  *(void *)uint64_t v55 = v58;
  *((void *)v55 + 1) = v57;
  swift_bridgeObjectRelease(v59);
  uint64_t v60 = a3[16];
  uint64_t v61 = &a1[v60];
  uint64_t v62 = &a2[v60];
  uint64_t v64 = *(void *)v62;
  uint64_t v63 = *((void *)v62 + 1);
  uint64_t v65 = *((void *)v61 + 1);
  *(void *)uint64_t v61 = v64;
  *((void *)v61 + 1) = v63;
  swift_bridgeObjectRelease(v65);
  uint64_t v66 = a3[17];
  uint64_t v67 = &a1[v66];
  uint64_t v68 = &a2[v66];
  uint64_t v70 = *(void *)v68;
  uint64_t v69 = *((void *)v68 + 1);
  uint64_t v71 = *((void *)v67 + 1);
  *(void *)uint64_t v67 = v70;
  *((void *)v67 + 1) = v69;
  swift_bridgeObjectRelease(v71);
  uint64_t v72 = a3[18];
  uint64_t v73 = &a1[v72];
  uint64_t v74 = &a2[v72];
  uint64_t v76 = *(void *)v74;
  uint64_t v75 = *((void *)v74 + 1);
  uint64_t v77 = *((void *)v73 + 1);
  *(void *)uint64_t v73 = v76;
  *((void *)v73 + 1) = v75;
  swift_bridgeObjectRelease(v77);
  uint64_t v78 = a3[19];
  uint64_t v79 = &a1[v78];
  uint64_t v80 = &a2[v78];
  uint64_t v82 = *(void *)v80;
  uint64_t v81 = *((void *)v80 + 1);
  uint64_t v83 = *((void *)v79 + 1);
  *(void *)uint64_t v79 = v82;
  *((void *)v79 + 1) = v81;
  swift_bridgeObjectRelease(v83);
  uint64_t v84 = a3[20];
  int v85 = &a1[v84];
  uint64_t v86 = &a2[v84];
  uint64_t v87 = type metadata accessor for URL(0LL);
  int v88 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v85, 1LL, v87);
  int v89 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v86, 1LL, v87);
  if (v88)
  {
    if (!v89)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v87 - 8) + 32LL))(v85, v86, v87);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v85, 0LL, 1LL, v87);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v90 = *(void *)(v87 - 8);
  if (v89)
  {
    (*(void (**)(char *, uint64_t))(v90 + 8))(v85, v87);
LABEL_12:
    uint64_t v91 = sub_494C(&qword_189CF8);
    memcpy(v85, v86, *(void *)(*(void *)(v91 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v90 + 40))(v85, v86, v87);
LABEL_13:
  uint64_t v92 = a3[21];
  uint64_t v93 = &a1[v92];
  uint64_t v94 = &a2[v92];
  uint64_t v96 = *(void *)v94;
  uint64_t v95 = *((void *)v94 + 1);
  uint64_t v97 = *((void *)v93 + 1);
  *(void *)uint64_t v93 = v96;
  *((void *)v93 + 1) = v95;
  swift_bridgeObjectRelease(v97);
  uint64_t v98 = a3[22];
  uint64_t v99 = &a1[v98];
  uint64_t v100 = &a2[v98];
  uint64_t v102 = *(void *)v100;
  uint64_t v101 = *((void *)v100 + 1);
  uint64_t v103 = *((void *)v99 + 1);
  *(void *)uint64_t v99 = v102;
  *((void *)v99 + 1) = v101;
  swift_bridgeObjectRelease(v103);
  uint64_t v104 = a3[23];
  uint64_t v105 = &a1[v104];
  unint64_t v106 = &a2[v104];
  uint64_t v107 = type metadata accessor for SnippetHeaderModel(0LL);
  int v108 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v105, 1LL, v107);
  int v109 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v106, 1LL, v107);
  if (!v108)
  {
    if (!v109)
    {
      uint64_t v113 = type metadata accessor for SpeakableString(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v113 - 8) + 40LL))(v105, v106, v113);
      uint64_t v114 = *(int *)(v107 + 20);
      uint64_t v115 = &v105[v114];
      uint64_t v116 = &v106[v114];
      uint64_t v118 = *(void *)v116;
      uint64_t v117 = *((void *)v116 + 1);
      uint64_t v119 = *((void *)v115 + 1);
      *(void *)uint64_t v115 = v118;
      *((void *)v115 + 1) = v117;
      swift_bridgeObjectRelease(v119);
      uint64_t v120 = *(int *)(v107 + 24);
      uint64_t v121 = &v105[v120];
      uint64_t v122 = &v106[v120];
      uint64_t v124 = *(void *)v122;
      uint64_t v123 = *((void *)v122 + 1);
      uint64_t v125 = *((void *)v121 + 1);
      *(void *)uint64_t v121 = v124;
      *((void *)v121 + 1) = v123;
      swift_bridgeObjectRelease(v125);
      return a1;
    }

    sub_26F04((uint64_t)v105, type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }

  if (v109)
  {
LABEL_18:
    uint64_t v111 = sub_494C(&qword_18A1A8);
    memcpy(v105, v106, *(void *)(*(void *)(v111 - 8) + 64LL));
    return a1;
  }

  uint64_t v110 = type metadata accessor for SpeakableString(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v110 - 8) + 32LL))(v105, v106, v110);
  *(_OWORD *)&v105[*(int *)(v107 + 20)] = *(_OWORD *)&v106[*(int *)(v107 + 20)];
  *(_OWORD *)&v105[*(int *)(v107 + 24)] = *(_OWORD *)&v106[*(int *)(v107 + 24)];
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v105, 0LL, 1LL, v107);
  return a1;
}

uint64_t getEnumTagSinglePayload for BloodPressureQueryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_8D93C);
}

uint64_t sub_8D93C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_494C(&qword_18A1A0);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = a1;
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v8, a2, v7);
  }

  if ((_DWORD)a2 != 2147483646)
  {
    uint64_t v12 = sub_494C(&qword_189CF8);
    if (*(_DWORD *)(*(void *)(v12 - 8) + 84LL) == (_DWORD)a2)
    {
      uint64_t v7 = v12;
      uint64_t v13 = a3[20];
    }

    else
    {
      uint64_t v7 = sub_494C(&qword_18A1A8);
      uint64_t v13 = a3[23];
    }

    uint64_t v8 = a1 + v13;
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v8, a2, v7);
  }

  unint64_t v9 = *(void *)(a1 + a3[11] + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  int v10 = v9 - 1;
  if (v10 < 0) {
    int v10 = -1;
  }
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for BloodPressureQueryModel( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_8DA24);
}

void sub_8DA24(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_494C(&qword_18A1A0);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = a1;
  }

  else
  {
    if (a3 == 2147483646)
    {
      *(void *)(a1 + a4[11] + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a2;
      sub_1EB0C();
      return;
    }

    uint64_t v11 = sub_494C(&qword_189CF8);
    if (*(_DWORD *)(*(void *)(v11 - 8) + 84LL) == a3)
    {
      uint64_t v9 = v11;
      uint64_t v12 = a4[20];
    }

    else
    {
      uint64_t v9 = sub_494C(&qword_18A1A8);
      uint64_t v12 = a4[23];
    }

    uint64_t v10 = a1 + v12;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v10, a2, a2, v9);
}

void sub_8DAE8(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v8[0] = *(void *)(v2 - 8) + 64LL;
    v8[1] = "\t";
    _OWORD v8[2] = "\t";
    v8[3] = "\t";
    v8[4] = "\t";
    v8[5] = "\t";
    v8[6] = "\t";
    v8[7] = &unk_13BBC0;
    v8[8] = &unk_13BBC0;
    v8[9] = &unk_13BBC0;
    v8[10] = &unk_13BBC0;
    v8[11] = &unk_13BBC0;
    v8[12] = &unk_13BBC0;
    v8[13] = &unk_13BBC0;
    v8[14] = &unk_13BBC0;
    v8[15] = &unk_13BBC0;
    sub_27758(319LL, (unint64_t *)&unk_18D6E8, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    if (v5 <= 0x3F)
    {
      v8[16] = *(void *)(v4 - 8) + 64LL;
      v8[17] = &unk_13BBC0;
      v8[18] = &unk_13BBC0;
      sub_27758(319LL, (unint64_t *)&qword_18AB48, type metadata accessor for SnippetHeaderModel);
      if (v7 <= 0x3F)
      {
        v8[19] = *(void *)(v6 - 8) + 64LL;
        swift_initStructMetadata(a1, 256LL, 20LL, v8, a1 + 16);
      }
    }
  }

uint64_t getEnumTagSinglePayload for BloodPressureQueryModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xED)
  {
    if (a2 + 19 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 19) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 20;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for BloodPressureQueryModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 19 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 19) >> 8 < 0xFF) {
    LODWORD(vsub_D878(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_D878(v0 + 4) = v3;
  }
  if (a3 >= 0xED) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xEC) {
    return ((uint64_t (*)(void))((char *)&loc_8DCBC + 4 * byte_13BAD9[v4]))();
  }
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_8DCF0 + 4 * byte_13BAD4[v4]))();
}

uint64_t sub_8DCF0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_8DCF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x8DD00LL);
  }
  return result;
}

uint64_t sub_8DD0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x8DD14LL);
  }
  *(_BYTE *)uint64_t result = a2 + 19;
  return result;
}

uint64_t sub_8DD18(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_8DD20(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BloodPressureQueryModel.CodingKeys()
{
  return &type metadata for BloodPressureQueryModel.CodingKeys;
}

unint64_t sub_8DD40()
{
  unint64_t result = qword_18D760;
  if (!qword_18D760)
  {
    unint64_t result = swift_getWitnessTable(&unk_13BC74, &type metadata for BloodPressureQueryModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18D760);
  }

  return result;
}

unint64_t sub_8DD80()
{
  unint64_t result = qword_18D768;
  if (!qword_18D768)
  {
    unint64_t result = swift_getWitnessTable(&unk_13BBE4, &type metadata for BloodPressureQueryModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18D768);
  }

  return result;
}

unint64_t sub_8DDC0()
{
  unint64_t result = qword_18D770;
  if (!qword_18D770)
  {
    unint64_t result = swift_getWitnessTable(&unk_13BC0C, &type metadata for BloodPressureQueryModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18D770);
  }

  return result;
}

uint64_t sub_8DDFC()
{
  return type metadata accessor for BloodPressureQueryModel(0LL);
}

uint64_t sub_8DE04@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v1 - 65) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v1 - 65, *(void *)(v1 - 136));
}

uint64_t sub_8DE1C@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v2 - 65) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v2 - 65, v1);
}

uint64_t sub_8DE30(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, a2);
}

void sub_8DE3C(uint64_t a1@<X8>)
{
  *(void *)(v1 + a1) = 0LL;
}

  ;
}

uint64_t sub_8DE54(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(_BYTE *)(v2 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a2 & 1;
  return result;
}

void sub_8DE64(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)(v1 + a1);
  *uint64_t v2 = 0LL;
  v2[1] = 0LL;
}

uint64_t sub_8DE70()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 8));
}

uint64_t sub_8DE78(uint64_t result, char a2)
{
  return sub_8AC68(result, a2);
}

uint64_t sub_8DE80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_8DE8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_8DE98()
{
  return v0;
}

uint64_t sub_8DEA8()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 8));
}

void sub_8DEB0(uint64_t a1@<X8>)
{
  *(void *)(v1 - 2sub_D7EC(v0 + 16, v0 + 56) = a1;
  *(_BYTE *)(a1 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v2;
}

uint64_t sub_8DEBC@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(*(void *)(a1 - 256) + 8LL));
}

  ;
}

uint64_t sub_8DED4()
{
  return v0;
}

uint64_t sub_8DEE8()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 8));
}

  ;
}

uint64_t getMedScheduleDateTime(from:)(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = ((uint64_t (*)(void))dispatch thunk of UsoEntity_common_MedicationSchedule.schedule.getter)();
  if (v1)
  {
    uint64_t v2 = dispatch thunk of UsoEntity_common_RecurringDateTime.recurrenceDateTimes.getter();
    uint64_t v1 = sub_367AC();
    if (v2)
    {
      if ((unint64_t)v2 >> 62)
      {
        if (v2 >= 0) {
          uint64_t v3 = v2 & 0xFFFFFFFFFFFFFF8LL;
        }
        else {
          uint64_t v3 = v2;
        }
        swift_bridgeObjectRetain(v2);
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v3);
        sub_249D4();
        if (v4) {
          goto LABEL_6;
        }
      }

      else if (*(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8LL)))
      {
LABEL_6:
        sub_398E0(0LL, (v2 & 0xC000000000000001LL) == 0, v2);
        if ((v2 & 0xC000000000000001LL) != 0) {
          specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v2);
        }
        else {
          swift_retain();
        }
        sub_249D4();
        dispatch thunk of CodeGenListEntry.entry.getter(&v8);
        uint64_t v1 = sub_367AC();
        goto LABEL_15;
      }

      uint64_t v1 = sub_249D4();
    }
  }

unint64_t medScheduleHasOneMed(from:)(unint64_t result)
{
  if (result)
  {
    unint64_t result = dispatch thunk of UsoEntity_common_MedicationSchedule.medications.getter(result);
    if (result)
    {
      if (result >> 62) {
        uint64_t v1 = sub_8E1BC(result & 0xFFFFFFFFFFFFFF8LL);
      }
      else {
        uint64_t v1 = *(void *)((char *)&dword_10 + (result & 0xFFFFFFFFFFFFFF8LL));
      }
      sub_2A184();
      return v1 == 1;
    }
  }

  return result;
}

unint64_t getMedEntity(from:)(unint64_t result)
{
  if (!result) {
    return result;
  }
  unint64_t result = dispatch thunk of UsoEntity_common_MedicationSchedule.medications.getter(result);
  if (!result) {
    return result;
  }
  unint64_t v1 = result;
  if (result >> 62)
  {
    if (sub_8E1BC(result & 0xFFFFFFFFFFFFFF8LL)) {
      goto LABEL_5;
    }
LABEL_9:
    sub_2A184();
    return 0LL;
  }

LABEL_5:
  sub_398E0(0LL, (v1 & 0xC000000000000001LL) == 0, v1);
  if ((v1 & 0xC000000000000001LL) != 0) {
    sub_41D50();
  }
  else {
    sub_8E1B0();
  }
  sub_2A184();
  dispatch thunk of CodeGenListEntry.entry.getter(&v2);
  sub_3652C();
  return v2;
}

  sub_398E0(0LL, (v13 & 0xC000000000000001LL) == 0, v13);
  if ((v13 & 0xC000000000000001LL) != 0)
  {
    uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v13);
  }

  else
  {
    uint64_t v14 = *(void *)(v13 + 32);
    sub_363E8();
  }

  sub_2A184();
LABEL_13:
  uint64_t v15 = getMeasurementUnit(from:)(v14);
  sub_3652C();
  uint64_t v16 = *(void *)(v15 + 16);
  if (!v16)
  {
LABEL_18:
    uint64_t v8 = sub_2A184();
LABEL_19:
    sub_418B8(v8, v9, &qword_18AA78, v10, v11);
    if (v35)
    {
      uint64_t v22 = type metadata accessor for UsoTask_requestLog_common_HealthLog(0LL);
      if ((sub_A3788(v22, v23) & 1) != 0)
      {
        uint64_t v24 = sub_363E8();
        uint64_t v25 = dispatch thunk of Uso_VerbTemplate_ReferenceMeasurementUnit.measurementUnit.getter(v24);
        sub_3652C();
        uint64_t v26 = getMeasurementUnit(from:)(v25);
        sub_367AC();
        uint64_t v27 = *(void *)(v26 + 16);
        if (v27)
        {
          uint64_t v28 = (uint64_t *)(v26 + 40);
          while (1)
          {
            uint64_t v30 = *(v28 - 1);
            uint64_t v29 = *v28;
            sub_A3814();
            sub_37558(v30, v29);
            sub_A3850();
            if (!v21) {
              break;
            }
            v28 += 2;
            if (!--v27) {
              goto LABEL_26;
            }
          }

          uint64_t v33 = v31;
          sub_2A184();
          sub_3652C();
          goto LABEL_29;
        }

uint64_t getLocalizedScheduleName(from:)(uint64_t result)
{
  if (result) {
    return dispatch thunk of UsoEntity_common_MedicationSchedule.name.getter();
  }
  return result;
}

uint64_t sub_8E1B0()
{
  return swift_retain(*(void *)(v0 + 32));
}

uint64_t sub_8E1BC@<X0>(uint64_t a1@<X8>)
{
  if (v1 >= 0) {
    return _CocoaArrayWrapper.endIndex.getter(a1);
  }
  else {
    return _CocoaArrayWrapper.endIndex.getter(v1);
  }
}

uint64_t sub_8E1C8( uint64_t a1, uint64_t a2, char a3, uint64_t a4, const void *a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v24 = a6;
  uint64_t v25 = a7;
  uint64_t v15 = swift_allocObject(v8, 264LL, 7LL);
  uint64_t v17 = a8[3];
  uint64_t v16 = a8[4];
  uint64_t v18 = sub_8F930((uint64_t)a8, v17);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v21 + 16))(v20);
  uint64_t v22 = sub_8F870(a1, a2, a3, a4, a5, v24, v25, (uint64_t)v20, v15, v17, v16);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a8);
  return v22;
}

uint64_t sub_8E2C8(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  v2[12] = *v1;
  uint64_t v3 = sub_494C(&qword_18B900);
  v2[13] = sub_A5C0(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  v2[14] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[15] = v5;
  v2[16] = sub_A5C0(v5);
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  v2[17] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[18] = v7;
  v2[19] = sub_D8CC(v7);
  v2[20] = sub_A5B8();
  uint64_t v8 = type metadata accessor for Parse(0LL);
  v2[21] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[22] = v9;
  v2[23] = sub_A5C0(v9);
  uint64_t v10 = type metadata accessor for USOParse(0LL);
  v2[24] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[25] = v11;
  v2[26] = sub_A5C0(v11);
  uint64_t v12 = type metadata accessor for Input(0LL);
  v2[27] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[28] = v13;
  v2[29] = sub_A5C0(v13);
  uint64_t v14 = sub_D984();
  v2[30] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v2[31] = v15;
  v2[32] = sub_D8CC(v15);
  v2[33] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_8E3C8()
{
  uint64_t v83 = *(void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v5 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 232);
  uint64_t v6 = *(void *)(v0 + 216);
  uint64_t v7 = Logger.workout.unsafeMutableAddressor();
  sub_A5DC(v7, v0 + 16);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  uint64_t v81 = v7;
  v8(v1, v7, v3);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v83, v6);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  uint64_t v82 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v8;
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v84 = *(void *)(v0 + 264);
    uint64_t v12 = *(void *)(v0 + 232);
    uint64_t v78 = *(void *)(v0 + 248);
    uint64_t v79 = *(void *)(v0 + 240);
    uint64_t v13 = *(void *)(v0 + 216);
    uint64_t v76 = *(void *)(v0 + 224);
    uint64_t v14 = *(void *)(v0 + 96);
    uint64_t v15 = sub_A5E8(22LL);
    uint64_t v77 = sub_A5E8(64LL);
    uint64_t v86 = v77;
    *(_DWORD *)uint64_t v15 = 136315394;
    uint64_t v16 = sub_D914(v14);
    unint64_t v18 = v17;
    *(void *)(v0 + 6sub_D878(v0 + 4) = sub_39178(v16, v17, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v15 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2080;
    unint64_t v19 = sub_D838();
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v13, v19);
    *(void *)(v0 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_39178(v20, v21, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v15 + 14, v15 + 22);
    sub_249D4();
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v12, v13);
    sub_D9B0(&dword_0, v10, v11, "%s Parsing Input: %s", (uint8_t *)v15);
    swift_arrayDestroy(v77, 2LL);
    sub_5050(v77);
    sub_5050(v15);

    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(v78 + 8);
    uint64_t v23 = v22(v84, v79);
  }

  else
  {
    uint64_t v24 = *(void *)(v0 + 264);
    uint64_t v25 = *(void *)(v0 + 240);
    uint64_t v26 = *(void *)(v0 + 248);
    sub_565A8(*(void *)(v0 + 224));

    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8);
    uint64_t v23 = v22(v24, v25);
  }

  uint64_t v28 = *(void *)(v0 + 176);
  uint64_t v27 = *(void *)(v0 + 184);
  uint64_t v29 = *(void *)(v0 + 168);
  Input.parse.getter(v23);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v28 + 88))(v27, v29) != enum case for Parse.uso(_:))
  {
    sub_565A8(*(void *)(v0 + 176));
    uint64_t v42 = v81;
    goto LABEL_8;
  }

  uint64_t v80 = v22;
  uint64_t v31 = *(void *)(v0 + 200);
  uint64_t v30 = *(void *)(v0 + 208);
  uint64_t v33 = *(void *)(v0 + 184);
  uint64_t v32 = *(void *)(v0 + 192);
  uint64_t v34 = *(void *)(v0 + 128);
  uint64_t v85 = *(void *)(v0 + 136);
  uint64_t v36 = *(void *)(v0 + 112);
  uint64_t v35 = *(void *)(v0 + 120);
  uint64_t v37 = *(void *)(v0 + 104);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 176) + 96LL))(v33, *(void *)(v0 + 168));
  uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v30, v33, v32);
  uint64_t v39 = USOParse.userParse.getter(v38);
  uint64_t v40 = Siri_Nlu_External_UserParse.userDialogActs.getter(v39);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
  sub_9109C(v40, v37);
  sub_249D4();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v37, 1LL, v85) == 1)
  {
    uint64_t v41 = *(void *)(v0 + 104);
    sub_565A8(*(void *)(v0 + 200));
    sub_8F830(v41);
    uint64_t v22 = v80;
    uint64_t v42 = v81;
LABEL_8:
    uint64_t v43 = *(void *)(v0 + 256);
    uint64_t v44 = *(void *)(v0 + 240);
    sub_A5DC(v42, v0 + 40);
    uint64_t v45 = v82(v43, v42, v44);
    uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)sub_A5E8(2LL);
      *(_WORD *)uint64_t v48 = 0;
      _os_log_impl(&dword_0, v46, v47, "Received unsupported type of input", v48, 2u);
      sub_5050((uint64_t)v48);
    }

    uint64_t v49 = *(void *)(v0 + 256);
    uint64_t v50 = *(void *)(v0 + 240);

    v22(v49, v50);
    uint64_t v51 = 0LL;
    uint64_t v85 = 1LL;
    goto LABEL_11;
  }

  uint64_t v58 = (*(uint64_t (**)(void, void, void))(*(void *)(v0 + 144) + 32LL))( *(void *)(v0 + 160),  *(void *)(v0 + 104),  *(void *)(v0 + 136));
  if ((Siri_Nlu_External_UserDialogAct.hasAccepted.getter(v58) & 1) != 0)
  {
    uint64_t v60 = *(void *)(v0 + 200);
    uint64_t v59 = *(void *)(v0 + 208);
    uint64_t v61 = *(void *)(v0 + 192);
    uint64_t v62 = *(void *)(v0 + 88);
    sub_565A8(*(void *)(v0 + 144));
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v61);
    uint64_t v85 = *(void *)(v62 + 40);
    swift_bridgeObjectRetain(v85);
    uint64_t v51 = 1LL;
  }

  else
  {
    uint64_t v63 = *(void *)(v0 + 152);
    uint64_t v64 = *(void *)(v0 + 160);
    uint64_t v65 = *(void *)(v0 + 144);
    char v66 = Siri_Nlu_External_UserDialogAct.hasRejected.getter();
    uint64_t v67 = sub_DA14(v63, v64, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v65 + 16));
    uint64_t v68 = *(void *)(v0 + 200);
    uint64_t v69 = *(void *)(v0 + 152);
    uint64_t v70 = *(void *)(v0 + 160);
    uint64_t v71 = *(void *)(v0 + 136);
    uint64_t v72 = *(void *)(v0 + 144);
    if ((v66 & 1) != 0)
    {
      uint64_t v73 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
      v73(*(void *)(v0 + 152), *(void *)(v0 + 136));
      v73(v70, v71);
      sub_202F4(*(uint64_t (**)(uint64_t, uint64_t))(v68 + 8));
    }

    else
    {
      char v74 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter(v67);
      uint64_t v75 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
      v75(v69, v71);
      v75(v70, v71);
      sub_202F4(*(uint64_t (**)(uint64_t, uint64_t))(v68 + 8));
      if ((v74 & 1) == 0)
      {
        sub_8F96C();
        uint64_t v51 = 2LL;
        goto LABEL_11;
      }
    }

    sub_8F96C();
    uint64_t v51 = 0LL;
  }

void sub_8E900(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = *v2;
  uint64_t v7 = type metadata accessor for Input(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_D984();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_27AD8();
  uint64_t v13 = Logger.workout.unsafeMutableAddressor();
  sub_A5DC(v13, (uint64_t)v34);
  uint64_t v30 = v12;
  uint64_t v31 = v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v3, v13, v11);
  uint64_t v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = sub_A5E8(22LL);
    uint64_t v29 = a2;
    uint64_t v18 = v17;
    uint64_t v28 = sub_A5E8(64LL);
    uint64_t v33 = v28;
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v19 = sub_D914(v6);
    unint64_t v21 = v20;
    uint64_t v32 = sub_39178(v19, v20, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v21);
    *(_WORD *)(v18 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2080;
    unint64_t v22 = sub_D838();
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v7, v22);
    uint64_t v32 = sub_39178(v23, v24, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v18 + 14, v18 + 22);
    sub_249D4();
    sub_8F958(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
    sub_D9B0(&dword_0, v15, v16, "%s Handling Input: %s", (uint8_t *)v18);
    uint64_t v25 = v28;
    swift_arrayDestroy(v28, 2LL);
    sub_5050(v25);
    sub_5050(v18);
  }

  else
  {
    sub_8F958(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  }

  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v3, v31);
  static ActionForInput.handle()(v26);
  sub_D8FC();
}

uint64_t sub_8EB28(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  v3[15] = *v2;
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v3[16] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[17] = v5;
  v3[18] = sub_D8CC(v5);
  v3[19] = sub_A5B8();
  uint64_t v6 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[20] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[21] = v7;
  v3[22] = sub_A5C0(v7);
  uint64_t v8 = sub_D984();
  v3[23] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[24] = v9;
  v3[25] = sub_A5C0(v9);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_8EBB8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = (uint64_t)(v1 + 7);
  uint64_t v6 = v1 + 24;
  uint64_t v5 = v1[24];
  uint64_t v4 = v6[1];
  uint64_t v7 = v2[13];
  uint64_t v8 = Logger.wellness.unsafeMutableAddressor(a1);
  sub_A5DC(v8, v3);
  sub_DA14(v4, v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
  swift_errorRetain(v7);
  uint64_t v9 = swift_errorRetain(v7);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v27 = v2[24];
    uint64_t v28 = v2[23];
    uint64_t v29 = v2[25];
    uint64_t v12 = v2[15];
    uint64_t v13 = v2[13];
    uint64_t v14 = sub_A5E8(22LL);
    uint64_t v15 = (void *)sub_A5E8(8LL);
    uint64_t v26 = sub_A5E8(32LL);
    uint64_t v30 = v26;
    *(_DWORD *)uint64_t v14 = 136315394;
    uint64_t v16 = sub_D914(v12);
    unint64_t v18 = v17;
    v2[10] = sub_39178(v16, v17, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 10, v2 + 11, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v14 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2112;
    swift_errorRetain(v13);
    uint64_t v19 = _swift_stdlib_bridgeErrorToNSError(v13);
    v2[11] = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 11, v2 + 12, v14 + 14, v14 + 22);
    *uint64_t v15 = v19;
    swift_errorRelease(v13);
    swift_errorRelease(v13);
    sub_D9B0(&dword_0, v10, v11, "%s makeErrorResponse called with error: %@", (uint8_t *)v14);
    sub_494C(&qword_189CB8);
    swift_arrayDestroy(v15, 1LL);
    sub_5050((uint64_t)v15);
    swift_arrayDestroy(v26, 1LL);
    sub_5050(v26);
    sub_5050(v14);

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v29, v28);
  }

  else
  {
    uint64_t v21 = v2[24];
    uint64_t v20 = v2[25];
    uint64_t v22 = v2[23];
    uint64_t v23 = v2[13];
    swift_errorRelease(v23);
    swift_errorRelease(v23);

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  }

  sub_500C((void *)(v2[14] + 88LL), *(void *)(v2[14] + 112LL));
  unint64_t v24 = (void *)swift_task_alloc(dword_18CCDC);
  v2[26] = v24;
  *unint64_t v24 = v2;
  v24[1] = sub_8EE24;
  return sub_764C8();
}

uint64_t sub_8EE24(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v2 + 208);
  uint64_t v4 = *v2;
  *(void *)(v4 + 216) = a1;
  swift_task_dealloc(v3);
  if (v1)
  {
    swift_task_dealloc(*(void *)(v4 + 200));
    sub_A67C();
    sub_A7C8();
    sub_A760();
    return sub_2499C(*(uint64_t (**)(void))(v4 + 8));
  }

  else
  {
    sub_A964();
    return swift_task_switch(v6, v7, v8);
  }

uint64_t sub_8EEB0()
{
  uint64_t v1 = (void *)v0[27];
  uint64_t v3 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v4 = v0[16];
  uint64_t v5 = v0[17];
  uint64_t v6 = v0[14];
  static DialogPhase.error.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
  OutputGenerationManifest.init(dialogPhase:_:)(v3, sub_A633C, 0LL);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  OutputGenerationManifest.canUseServerTTS.setter(0LL);
  static String._unconditionallyBridgeFromObjectiveC(_:)([v1 patternId]);
  sub_DA44();
  sub_D9F8();
  sub_D7EC(v6 + 224, (uint64_t)(v0 + 2));
  sub_500C(v0 + 2, v0[5]);
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)[1]);
  v0[28] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_8EFC4;
  sub_8F988();
  return sub_8F964();
}

uint64_t sub_8EFC4()
{
  uint64_t v3 = *(void *)(v2 + 224);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0;
  swift_task_dealloc(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_8F014()
{
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 144);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 16));
  sub_A67C();
  sub_A7C8();
  sub_A8EC();
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_8F0A0()
{
  uint64_t v1 = *(void *)(v0 + 168);

  sub_202F4(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 16));
  swift_task_dealloc(*(void *)(v0 + 200));
  sub_A67C();
  sub_A7C8();
  sub_A760();
  return sub_2499C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_8F108(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  uint64_t v3 = sub_494C(&qword_189EE0);
  v2[14] = sub_A5C0(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v2[15] = sub_A5C0(*(void *)(v4 - 8));
  uint64_t v5 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[16] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[17] = v6;
  v2[18] = sub_A5C0(v6);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_8F17C()
{
  uint64_t v1 = v0[13];
  sub_D7EC(v1 + 128, (uint64_t)(v0 + 2));
  uint64_t v2 = sub_500C(v0 + 2, v0[5]);
  uint64_t v3 = *(unsigned __int8 *)(v1 + 32);
  uint64_t v4 = *v2;
  uint64_t v5 = unk_18ECB4;
  uint64_t v8 = (char *)&dword_18ECB0 + dword_18ECB0;
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc(v5);
  v0[19] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_8F220;
  return ((uint64_t (*)(uint64_t, uint64_t, void))v8)(v3, v4, v0[13]);
}

uint64_t sub_8F220(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 152);
  *(void *)(v3 + 160) = a1;
  *(void *)(v3 + 16_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v1;
  swift_task_dealloc(v4);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_8F280()
{
  uint64_t v1 = (void *)v0[20];
  uint64_t v3 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v4 = v0[13];
  uint64_t v5 = _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2);
  static DialogPhase.clarification.getter(v5);
  OutputGenerationManifest.init(dialogPhase:_:)(v2, PhoneRingsSnippet.body.getter, 0LL);
  OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
  sub_8F508();
  uint64_t v6 = type metadata accessor for NLContextUpdate(0LL);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v3, 0LL, 1LL, v6);
  OutputGenerationManifest.nlContextUpdate.setter(v3);
  OutputGenerationManifest.canUseServerTTS.setter(0LL);
  OutputGenerationManifest.printSupportingDialogInDisplayModes.setter(1LL);
  static String._unconditionallyBridgeFromObjectiveC(_:)([v1 patternId]);
  sub_DA44();
  sub_D9F8();
  sub_D7EC(v4 + 224, (uint64_t)(v0 + 7));
  sub_500C(v0 + 7, v0[10]);
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)[1]);
  v0[22] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_8F3A8;
  sub_8F988();
  return sub_8F964();
}

uint64_t sub_8F3A8()
{
  uint64_t v3 = *(void *)(v2 + 176);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 18sub_D878(v0 + 4) = v0;
  swift_task_dealloc(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_8F3F8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_8F440()
{
  uint64_t v1 = *(void *)(v0 + 136);

  sub_202F4(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 56));
  sub_A67C();
  sub_A760();
  sub_A8EC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_8F4B0()
{
  uint64_t v1 = *(void *)(v0 + 136);

  sub_202F4(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 56));
  sub_8F97C();
  sub_A67C();
  sub_A7C8();
  return sub_2499C(*(uint64_t (**)(void))(v0 + 8));
}

void sub_8F508()
{
  uint64_t v1 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_27AD8();
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_SystemOffered(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v17 - v9;
  uint64_t v11 = Siri_Nlu_External_SystemOffered.init()(v8);
  Siri_Nlu_External_SystemDialogAct.init()(v11);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v10, v3);
  uint64_t v12 = Siri_Nlu_External_SystemDialogAct.offered.setter(v7);
  NLContextUpdate.init()(v12);
  uint64_t v13 = sub_494C(&qword_189ED8);
  uint64_t v14 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v15 = (v14 + 32) & ~v14;
  uint64_t v16 = swift_allocObject(v13, v15 + *(void *)(v2 + 72), v14 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_137250;
  sub_DA14(v16 + v15, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  NLContextUpdate.nluSystemDialogActs.setter(v16);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  sub_8F958(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_D8FC();
}

void *sub_8F654()
{
  return v0;
}

uint64_t sub_8F698()
{
  return swift_deallocClassInstance(v0, 264LL, 7LL);
}

uint64_t type metadata accessor for LogMedAsScheduledConfirmationStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC18WellnessFlowPlugin37LogMedAsScheduledConfirmationStrategy);
}

uint64_t sub_8F6DC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 1sub_D878(v0 + 6) = a1;
  uint64_t v4 = (void *)swift_task_alloc(dword_18D7AC);
  *(void *)(v2 + 2sub_D878(v0 + 4) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_8F72C;
  return sub_8E2C8(a2);
}

uint64_t sub_8F72C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(*v3 + 24);
  uint64_t v8 = *v3;
  swift_task_dealloc(v7);
  if (!v2)
  {
    uint64_t v9 = *(void **)(v6 + 16);
    *uint64_t v9 = a1;
    v9[1] = a2;
  }

  return sub_2499C(*(uint64_t (**)(void))(v8 + 8));
}

uint64_t sub_8F780(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18D7BC);
  *(void *)(v1 + 1sub_D878(v0 + 6) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_D8AC;
  return sub_8F108(a1);
}

uint64_t sub_8F7D0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_18D7B4);
  *(void *)(v2 + 1sub_D878(v0 + 6) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_D8AC;
  return sub_8EB28(a1, a2);
}

uint64_t sub_8F830(uint64_t a1)
{
  uint64_t v2 = sub_494C(&qword_18B900);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_8F870( uint64_t a1, uint64_t a2, char a3, uint64_t a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v22 = a10;
  uint64_t v23 = a11;
  uint64_t v19 = sub_B76C(&v21);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32LL))(v19, a8, a10);
  *(void *)(a9 + 1sub_D878(v0 + 6) = a1;
  *(void *)(a9 + 2sub_D878(v0 + 4) = a2;
  swift_bridgeObjectRelease(0LL);
  *(_BYTE *)(a9 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a3;
  *(void *)(a9 + 40) = a4;
  memcpy((void *)(a9 + 48), a5, 0xA0uLL);
  *(void *)(a9 + 20_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a6;
  *(void *)(a9 + 21sub_D878(v0 + 6) = a7;
  sub_20004(&v21, a9 + 224);
  return a9;
}

uint64_t sub_8F930(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

uint64_t sub_8F958@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_8F964()
{
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)();
}

uint64_t sub_8F96C()
{
  return swift_bridgeObjectRetain(*(void *)(*(void *)(v0 + 88) + 40LL));
}

uint64_t sub_8F97C()
{
  return swift_task_dealloc(*(void *)(v0 + 144));
}

uint64_t sub_8F988()
{
  return *(void *)(v0 + 96);
}

ValueMetadata *type metadata accessor for RegionNotSupportedFlow()
{
  return &type metadata for RegionNotSupportedFlow;
}

uint64_t sub_8F9AC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_890E4();
  return Flow.deferToExecuteAsync(_:)(a1, a2, &type metadata for RegionNotSupportedFlow, v4);
}

uint64_t sub_8F9EC(uint64_t a1)
{
  v2[53] = a1;
  v2[54] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[55] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[56] = v4;
  v2[57] = sub_A5C0(v4);
  uint64_t v5 = type metadata accessor for GenericButtonModel(0LL);
  v2[58] = v5;
  v2[59] = sub_A5C0(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for URL(0LL);
  v2[60] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[61] = v7;
  v2[62] = sub_A5C0(v7);
  uint64_t v8 = sub_494C(&qword_189CF8);
  v2[63] = sub_D8CC(*(void *)(v8 - 8));
  v2[64] = swift_task_alloc(v1);
  uint64_t v9 = type metadata accessor for DialogPhase(0LL);
  v2[65] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[66] = v10;
  v2[67] = sub_D8CC(v10);
  v2[68] = swift_task_alloc(v1);
  uint64_t v11 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[69] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[70] = v12;
  v2[71] = sub_A5C0(v12);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_8FAD0()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_18B0B4);
  *(void *)(v0 + 57sub_D878(v0 + 6) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_8FB1C;
  return sub_3CF30();
}

uint64_t sub_8FB1C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 576);
  *(void *)(v3 + 58sub_D878(v0 + 4) = a1;
  *(void *)(v3 + 59_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v1;
  swift_task_dealloc(v4);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_8FB80()
{
  uint64_t v1 = (void *)v0[73];
  uint64_t v2 = v0[68];
  uint64_t v3 = v0[67];
  uint64_t v4 = v0[66];
  uint64_t v5 = v0[65];
  uint64_t v6 = v0[63];
  uint64_t v7 = v0[64];
  uint64_t v8 = v0[60];
  static DialogPhase.error.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  OutputGenerationManifest.init(dialogPhase:_:)(v3, sub_A633C, 0LL);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v5);
  OutputGenerationManifest.printSupportingDialogInDisplayModes.setter(1LL);
  id v9 = [v1 catId];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  OutputGenerationManifest.responseViewId.setter(v10, v12);
  URL.init(string:)();
  sub_35468(v7, v6);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1LL, v8) == 1)
  {
    uint64_t v13 = (void *)v0[73];
    uint64_t v14 = v0[54];
    sub_41F24(v0[63]);
    uint64_t v15 = *(void *)(v14 + 264);
    sub_500C((void *)(v14 + 240), v15);
    uint64_t v16 = sub_494C(&qword_18A460);
    uint64_t v17 = sub_20308(v16, 40LL);
    *(_OWORD *)(v17 + 1sub_D878(v0 + 6) = xmmword_138BA0;
    *(void *)(v17 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v13;
    sub_202E8(v17, v18, v19);
    v0[77] = v47;
    uint64_t v20 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)[1];
    id v21 = v13;
    uint64_t v22 = (void *)swift_task_alloc(v20);
    v0[78] = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_90074;
    uint64_t v23 = sub_90540();
    return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v23, v24, v25, v15);
  }

  else
  {
    uint64_t v46 = (void *)v0[73];
    uint64_t v27 = v0[62];
    uint64_t v28 = v0[60];
    uint64_t v29 = v0[61];
    uint64_t v31 = v0[58];
    uint64_t v30 = (uint64_t *)v0[59];
    uint64_t v32 = v0[54];
    (*(void (**)(uint64_t, void, uint64_t))(v29 + 32))(v27, v0[63], v28);
    uint64_t v33 = sub_90E74(0xD000000000000012LL, 0x8000000000145830LL, 0xD000000000000010LL, (void *)0x8000000000145850LL);
    uint64_t v35 = v34;
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))((char *)v30 + *(int *)(v31 + 20), v27, v28);
    *uint64_t v30 = v33;
    v30[1] = v35;
    uint64_t v36 = *(void *)(v32 + 264);
    sub_500C((void *)(v32 + 240), v36);
    uint64_t v37 = type metadata accessor for WellnessSnippets(0LL);
    v0[45] = v37;
    v0[46] = sub_20168();
    uint64_t v38 = sub_B76C(v0 + 42);
    sub_201A8((uint64_t)v30, (uint64_t)v38);
    swift_storeEnumTagMultiPayload(v38, v37, 4LL);
    uint64_t v39 = sub_494C(&qword_18A460);
    uint64_t v40 = sub_20308(v39, 40LL);
    *(_OWORD *)(v40 + 1sub_D878(v0 + 6) = xmmword_138BA0;
    *(void *)(v40 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v46;
    sub_202E8(v40, v41, v42);
    v0[75] = v47;
    uint64_t v43 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)[1];
    id v44 = v46;
    uint64_t v45 = (void *)swift_task_alloc(v43);
    v0[76] = v45;
    *uint64_t v45 = v0;
    v45[1] = sub_8FEC4;
    return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)( v0 + 32,  v0 + 42,  v47,  v0[71],  v36);
  }

uint64_t sub_8FEC4()
{
  uint64_t v1 = (void *)(*(void *)v0 + 336LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 600LL);
  sub_20264(*(void *)(*(void *)v0 + 608LL));
  swift_bridgeObjectRelease(v2);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
  sub_A964();
  return swift_task_switch(v3, v4, v5);
}

uint64_t sub_8FF20()
{
  uint64_t v1 = *(void **)(v0 + 584);
  uint64_t v11 = *(void *)(v0 + 552);
  uint64_t v12 = *(void *)(v0 + 568);
  uint64_t v9 = *(void *)(v0 + 512);
  uint64_t v10 = *(void *)(v0 + 560);
  uint64_t v2 = *(void *)(v0 + 488);
  uint64_t v3 = *(void *)(v0 + 472);
  uint64_t v7 = *(void *)(v0 + 480);
  uint64_t v8 = *(void *)(v0 + 496);
  sub_D7EC(v0 + 256, v0 + 216);
  uint64_t v4 = sub_20308((uint64_t)&unk_17E790, 56LL);
  sub_90550(v4);
  static OutputPublisherFactory.makeOutputPublisherAsync()(v13);
  uint64_t v5 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  sub_A72C(v5);
  *(void *)(v0 + 41sub_D878(v0 + 6) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)(v13, &unk_18D9A0, v4);
  static ExecuteResponse.complete<A>(next:)(v0 + 416);

  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 256));
  sub_201EC(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v8, v7);
  sub_41F24(v9);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v11);
  sub_90520();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_90074()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 616LL);
  sub_20264(*(void *)(*(void *)v0 + 624LL));
  swift_bridgeObjectRelease(v1);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_900BC()
{
  uint64_t v1 = *(void **)(v0 + 584);
  uint64_t v2 = *(void *)(v0 + 560);
  uint64_t v7 = *(void *)(v0 + 552);
  uint64_t v8 = *(void *)(v0 + 568);
  uint64_t v3 = *(void *)(v0 + 512);
  sub_D7EC(v0 + 176, v0 + 296);
  uint64_t v4 = sub_20308((uint64_t)&unk_17E768, 56LL);
  sub_90550(v4);
  static OutputPublisherFactory.makeOutputPublisherAsync()(v9);
  uint64_t v5 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  sub_A72C(v5);
  *(void *)(v0 + 400) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)(v9, &unk_18D990, v4);
  static ExecuteResponse.complete<A>(next:)(v0 + 400);

  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 176));
  sub_41F24(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v8, v7);
  sub_90520();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_901E8(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 448);
  uint64_t v2 = *(void *)(v1 + 456);
  uint64_t v4 = *(void *)(v1 + 440);
  uint64_t v5 = Logger.wellness.unsafeMutableAddressor(a1);
  swift_beginAccess(v5, v1 + 376, 0LL, 0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  sub_A7E8();
  uint64_t v6 = sub_A7E8();
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = *(void *)(v1 + 592);
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v10 = 138412290;
    sub_A7E8();
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(void *)(v1 + 40_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 408, v1 + 416, v10 + 4, v10 + 12);
    *uint64_t v11 = v12;
    sub_A604();
    sub_A604();
    _os_log_impl(&dword_0, v7, v8, "Couldn't execute wellness#regionNotSupported pattern. Error: %@", v10, 0xCu);
    sub_494C(&qword_189CB8);
    swift_arrayDestroy(v11, 1LL);
    sub_5050((uint64_t)v11);
    sub_5050((uint64_t)v10);

    sub_A604();
  }

  else
  {
    sub_A604();
    sub_A604();
    sub_A604();
  }

  uint64_t v13 = *(void *)(v1 + 432);
  (*(void (**)(void, void))(*(void *)(v1 + 448) + 8LL))(*(void *)(v1 + 456), *(void *)(v1 + 440));
  sub_A13C((_OWORD *)(v13 + 80), (_OWORD *)(v1 + 16));
  sub_A178();
  static ExecuteResponse.complete<A>(next:)(v1 + 16);
  sub_A1B4((void *)(v1 + 16));
  sub_90520();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_903E4(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 1sub_D878(v0 + 6) = a1;
  *(void *)(v2 + 2sub_D878(v0 + 4) = a2;
  return swift_task_switch(sub_90514, 0LL, 0LL);
}

uint64_t sub_90400(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18D984);
  *(void *)(v1 + 1sub_D878(v0 + 6) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_A108;
  return sub_8F9EC(a1);
}

uint64_t sub_90450()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_90474()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_18D98C);
  *(void *)(v0 + 1sub_D878(v0 + 6) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_7564C;
  uint64_t v2 = sub_90540();
  return sub_1FE14(v2, v3);
}

uint64_t sub_904C4()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_18D99C);
  *(void *)(v0 + 1sub_D878(v0 + 6) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_90518;
  uint64_t v2 = sub_90540();
  return sub_903E4(v2, v3);
}

uint64_t sub_90520()
{
  return swift_task_dealloc(*(void *)(v0 + 568));
}

uint64_t sub_90540()
{
  return v0;
}

uint64_t sub_90550(uint64_t a1)
{
  return sub_20004(v1, a1 + 16);
}

uint64_t storeEnumTagSinglePayload for WellnessIntentTemporalDirection( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(vsub_D878(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_D878(v0 + 4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_905A8 + 4 * byte_13BE75[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_905DC + 4 * byte_13BE70[v4]))();
}

uint64_t sub_905DC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_905E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x905ECLL);
  }
  return result;
}

uint64_t sub_905F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x90600LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_90604(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_9060C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WellnessIntentTemporalDirection()
{
  return &type metadata for WellnessIntentTemporalDirection;
}

unint64_t sub_9062C()
{
  unint64_t result = qword_18D9A8;
  if (!qword_18D9A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_13BF20, &type metadata for WellnessIntentTemporalDirection);
    atomic_store(result, (unint64_t *)&qword_18D9A8);
  }

  return result;
}

double sub_90668(uint64_t a1, uint64_t a2, unsigned __int8 a3, double a4)
{
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for FloatingPointRoundingRule(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v49 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v23 = (char *)&v49 - v22;
  if (a2)
  {
    uint64_t v24 = sub_90B9C(a1, a2, a3);
    double v25 = __exp10((double)v24);
    int v26 = a3;
    if ((a3 - 89 > 0x3E || (sub_90E54(), v27))
      && ((v26 - 155) > 0x2B || (sub_90E18(), v27))
      && v26
      && v26 != 4)
    {
      int v28 = enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:);
      sub_23360( (uint64_t)v23,  enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 104));
    }

    else
    {
      sub_23360( (uint64_t)v23,  enum case for FloatingPointRoundingRule.down(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 104));
      int v28 = enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:);
    }

    double v29 = v25 * a4;
    v52[0] = v29;
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v18, v23, v12);
    int v30 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v18, v12);
    if (v30 == v28)
    {
      double v31 = round(v29);
    }

    else if (v30 == enum case for FloatingPointRoundingRule.toNearestOrEven(_:))
    {
      double v31 = rint(v29);
    }

    else if (v30 == enum case for FloatingPointRoundingRule.up(_:))
    {
      double v31 = ceil(v29);
    }

    else if (v30 == enum case for FloatingPointRoundingRule.down(_:))
    {
      double v31 = floor(v29);
    }

    else
    {
      if (v30 != enum case for FloatingPointRoundingRule.towardZero(_:))
      {
        if (v30 == enum case for FloatingPointRoundingRule.awayFromZero(_:))
        {
          char v45 = Double.sign.getter(v29);
          sub_90E34();
          double v46 = ceil(v29);
          double v47 = floor(v29);
          if ((v45 & 1) != 0) {
            double v31 = v47;
          }
          else {
            double v31 = v46;
          }
        }

        else
        {
          Double._roundSlowPath(_:)(v23);
          sub_90E6C((uint64_t)v23);
          sub_90E6C((uint64_t)v18);
          double v31 = v52[0];
        }

        return v31 / v25;
      }

      double v31 = trunc(v29);
    }

    sub_90E34();
    return v31 / v25;
  }

  uint64_t v50 = v21;
  uint64_t v32 = v20;
  uint64_t v33 = Logger.wellness.unsafeMutableAddressor(v19);
  swift_beginAccess(v33, v52, 0LL, 0LL);
  uint64_t v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v33, v8);
  uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v37 = 0;
    _os_log_impl(&dword_0, v35, v36, "Missing unit for decimalPlaces lookup. Rounding to 0 places.", v37, 2u);
    swift_slowDealloc(v37, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  int v38 = a3;
  if ((a3 - 89 > 0x3E || (sub_90E54(), v27))
    && ((v38 - 155) > 0x2B || (sub_90E18(), v27))
    && v38
    && v38 != 4)
  {
    int v40 = enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:);
    uint64_t v39 = v32;
    sub_23360( v32,  enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 104));
  }

  else
  {
    uint64_t v39 = v32;
    sub_23360( v32,  enum case for FloatingPointRoundingRule.down(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 104));
    int v40 = enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:);
  }

  uint64_t v41 = v50;
  double v51 = a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v50, v39, v12);
  int v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 88))(v41, v12);
  if (v42 == v40)
  {
    double v43 = round(a4);
LABEL_44:
    sub_90E44();
    return v43;
  }

  if (v42 == enum case for FloatingPointRoundingRule.toNearestOrEven(_:))
  {
    double v43 = rint(a4);
    goto LABEL_44;
  }

  if (v42 == enum case for FloatingPointRoundingRule.up(_:))
  {
    double v43 = ceil(a4);
    goto LABEL_44;
  }

  if (v42 == enum case for FloatingPointRoundingRule.down(_:))
  {
    double v43 = floor(a4);
    goto LABEL_44;
  }

  if (v42 == enum case for FloatingPointRoundingRule.towardZero(_:))
  {
    double v43 = trunc(a4);
    goto LABEL_44;
  }

  if (v42 == enum case for FloatingPointRoundingRule.awayFromZero(_:))
  {
    char v48 = Double.sign.getter(a4);
    sub_90E44();
    if ((v48 & 1) != 0) {
      return floor(a4);
    }
    else {
      return ceil(a4);
    }
  }

  else
  {
    Double._roundSlowPath(_:)(v39);
    sub_90E6C(v39);
    sub_90E6C(v41);
    return v51;
  }

void sub_90B70()
{
  qword_19C338 = 0x2FA081E26C6F6D6DLL;
  unk_19C340 = 0xAC0000004CA081E2LL;
}

uint64_t sub_90B9C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 - 147 <= 0x1B)
  {
    if (((1 << (a3 + 109)) & 0x8800019) != 0) {
      return 1LL;
    }
    if (a3 == 162)
    {
      BOOL v6 = a1 == 109 && a2 == 0xE100000000000000LL;
      if (!v6 && (sub_90E08(109LL, 0xE100000000000000LL) & 1) == 0)
      {
        BOOL v7 = a1 == 28003 && a2 == 0xE200000000000000LL;
        if (!v7 && (sub_90E08(28003LL, 0xE200000000000000LL) & 1) == 0)
        {
          if (a1 == 29798 && a2 == 0xE200000000000000LL) {
            return 1LL;
          }
          uint64_t v9 = 29798LL;
          uint64_t v10 = 0xE200000000000000LL;
          return (sub_90E08(v9, v10) & 1) != 0;
        }
      }

      return 2LL;
    }
  }

  uint64_t result = 2LL;
  if (a3 != 107 && a3 != 96)
  {
    if (a3 == 103)
    {
      if (qword_189AE8 != -1) {
        swift_once(&qword_189AE8, sub_90B70);
      }
      BOOL v16 = qword_19C338 == a1 && qword_19C340 == a2;
      if (v16 || (sub_90E08(qword_19C338, qword_19C340) & 1) != 0) {
        return 2LL;
      }
      if (a1 == 0x4C642F676DLL && a2 == 0xE500000000000000LL) {
        return 0LL;
      }
      uint64_t v14 = 0x4C642F676DLL;
      uint64_t v15 = 0xE500000000000000LL;
LABEL_52:
      sub_90E08(v14, v15);
      return 0LL;
    }

    if (a3 != 105)
    {
      if (a3 != 89) {
        return 0LL;
      }
      BOOL v11 = a1 == 7102787 && a2 == 0xE300000000000000LL;
      if (v11 || (sub_90E08(7102787LL, 0xE300000000000000LL) & 1) != 0) {
        return 1LL;
      }
      BOOL v12 = a1 == 1818321771 && a2 == 0xE400000000000000LL;
      if (v12 || (sub_90E08(1818321771LL, 0xE400000000000000LL) & 1) != 0) {
        return 1LL;
      }
      if (a1 == 19051 && a2 == 0xE200000000000000LL) {
        return 0LL;
      }
      uint64_t v14 = 19051LL;
      uint64_t v15 = 0xE200000000000000LL;
      goto LABEL_52;
    }

    if (a1 == 26475 && a2 == 0xE200000000000000LL) {
      return 2LL;
    }
    char v19 = sub_90E08(26475LL, 0xE200000000000000LL);
    BOOL v21 = a1 == 29811 && a2 == 0xE200000000000000LL;
    uint64_t result = 2LL;
    if ((v19 & 1) == 0 && !v21)
    {
      if ((sub_90E08(29811LL, 0xE200000000000000LL) & 1) == 0)
      {
        if (a1 == 7561836 && a2 == 0xE300000000000000LL) {
          return 1LL;
        }
        uint64_t v9 = 7561836LL;
        uint64_t v10 = 0xE300000000000000LL;
        return (sub_90E08(v9, v10) & 1) != 0;
      }

      return 2LL;
    }
  }

  return result;
}

uint64_t sub_90E08(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

  ;
}

uint64_t sub_90E34()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_90E44()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

  ;
}

uint64_t sub_90E6C(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_90E74(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = type metadata accessor for TemplatingText(0LL);
  uint64_t v33 = *(void *)(v6 - 8);
  uint64_t v34 = v6;
  __chkstk_darwin(v6);
  sub_6D44();
  uint64_t v9 = v8 - v7;
  sub_494C(&qword_18D9B0);
  sub_6D20();
  __chkstk_darwin(v10);
  sub_6D44();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = sub_494C(&qword_18AFC0);
  sub_6D20();
  __chkstk_darwin(v15);
  sub_6D44();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  sub_6D44();
  uint64_t v23 = v22 - v21;
  sub_21640();
  if (swift_getEnumCaseMultiPayload(v18, v14) == 1)
  {
    uint64_t v24 = &qword_18AFC0;
    uint64_t v25 = v18;
  }

  else
  {
    uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v23, v18, v19);
    uint64_t v27 = TemplatingResult.sections.getter(v26);
    swift_bridgeObjectRetain(a4);
    uint64_t v28 = sub_91D88(v27, a3, a4);
    sub_910A8(v28, (uint64_t (*)(void))&type metadata accessor for TemplatingSection, v13);
    swift_bridgeObjectRelease(v28);
    uint64_t v29 = type metadata accessor for TemplatingSection(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v13, 1LL, v29) != 1)
    {
      TemplatingSection.content.getter();
      uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8LL))(v13, v29);
      uint64_t v30 = TemplatingText.text.getter(v31);
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v9, v34);
      sub_A9E0();
      return v30;
    }

    sub_A9E0();
    uint64_t v24 = &qword_18D9B0;
    uint64_t v25 = v13;
  }

  sub_2012C(v25, v24);
  swift_bridgeObjectRetain(a2);
  return a1;
}

uint64_t sub_91090@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_910A8(a1, (uint64_t (*)(void))&type metadata accessor for UsoIdentifier, a2);
}

uint64_t sub_9109C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_910A8(a1, (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct, a2);
}

uint64_t sub_910A8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = a2(0LL);
  uint64_t v7 = v6;
  if (v5)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))( a3,  a1 + ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL)),  v6);
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v8 = 1LL;
  }

  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a3, v8, 1LL, v7);
}

id sub_91120(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v3 = a1;
    }
    else {
      uint64_t v3 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v3);
    sub_2A184();
    if (v4) {
      goto LABEL_3;
    }
    return 0LL;
  }

uint64_t sub_911B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_BYTE *)(v8 + 52_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v21;
  *(void *)(v8 + 33sub_D878(v0 + 6) = a6;
  *(void *)(v8 + 34sub_D878(v0 + 4) = a8;
  *(void *)(v8 + 320) = a3;
  *(void *)(v8 + 32_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a4;
  *(void *)(v8 + 30sub_D878(v0 + 4) = a1;
  *(void *)(v8 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a2;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  *(void *)(v8 + 35_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 360) = v10;
  *(void *)(v8 + 36_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_D8CC(v10);
  *(void *)(v8 + 37sub_D878(v0 + 6) = sub_A5B8();
  uint64_t v11 = type metadata accessor for GenericButtonModel(0LL);
  *(void *)(v8 + 38sub_D878(v0 + 4) = v11;
  *(void *)(v8 + 39_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OutputGenerationManifest(0LL);
  *(void *)(v8 + 400) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v8 + 40_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v13;
  *(void *)(v8 + 41sub_D878(v0 + 6) = sub_D8CC(v13);
  *(void *)(v8 + 42sub_D878(v0 + 4) = sub_A5B8();
  uint64_t v14 = sub_494C(&qword_189CF8);
  *(void *)(v8 + 43_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_D8CC(*(void *)(v14 - 8));
  *(void *)(v8 + 440) = sub_A5B8();
  uint64_t v15 = type metadata accessor for URL(0LL);
  *(void *)(v8 + 44_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  *(void *)(v8 + 4sub_D7EC(v0 + 16, v0 + 56) = v16;
  *(void *)(v8 + 46sub_D878(v0 + 4) = sub_D8CC(v16);
  *(void *)(v8 + 47_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_A5B8();
  sub_A964();
  return swift_task_switch(v17, v18, v19);
}

uint64_t sub_912A4()
{
  uint64_t v1 = *(void *)(v0 + 328);
  sub_745A4();
  sub_202B4();
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  sub_500C((void *)(v0 + 16), v2);
  char v4 = dispatch thunk of DeviceState.isPhone.getter(v2, v3);
  sub_D7EC(v1, v0 + 56);
  if ((v4 & 1) != 0)
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 56));
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 16));
LABEL_4:
    uint64_t v8 = *(void *)(v0 + 440);
    uint64_t v9 = *(void *)(v0 + 448);
    uint64_t v10 = sub_90E74(0x616548206E65704FLL, 0xEB0000000068746CLL, 0x6C6165486E65706FLL, (void *)0xED00007070416874LL);
    uint64_t v12 = v11;
    URL.init(string:)(0xD00000000000005CLL, 0x8000000000144070LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v8, 1LL, v9) == 1)
    {
      uint64_t v13 = *(void *)(v0 + 440);
      swift_bridgeObjectRelease(v12);
      uint64_t v14 = sub_2012C(v13, &qword_189CF8);
      uint64_t v15 = Logger.wellness.unsafeMutableAddressor(v14);
      sub_9201C(v15);
      uint64_t v16 = sub_92008();
      uint64_t v17 = (void *)Logger.logObject.getter(v16);
      os_log_type_t v18 = static os_log_type_t.debug.getter();
      if (sub_A988(v18))
      {
        *(_WORD *)sub_232D0() = 0;
        sub_A940(&dword_0, v19, v20, "Couldn't create URL for phoneMedications, returning GenericErrorFlow");
        sub_92030();
      }

      uint64_t v21 = *(void *)(v0 + 360);
      uint64_t v22 = *(void *)(v0 + 304);

      uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 8);
      goto LABEL_8;
    }

    uint64_t v107 = v10;
    uint64_t v25 = *(void *)(v0 + 448);
    uint64_t v26 = *(void *)(v0 + 456);
    uint64_t v27 = *(void *)(v0 + 424);
    uint64_t v28 = *(void *)(v0 + 400);
    uint64_t v29 = *(void *)(v0 + 408);
    uint64_t v30 = *(uint64_t **)(v0 + 392);
    uint64_t v104 = *(void *)(v0 + 472);
    uint64_t v105 = *(void *)(v0 + 384);
    uint64_t v31 = *(void **)(v0 + 336);
    uint64_t v106 = v12;
    uint64_t v33 = *(void **)(v0 + 312);
    uint64_t v32 = *(void *)(v0 + 320);
    (*(void (**)(void))(v26 + 32))();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v27, v32, v28);
    id v34 = [v33 catId];
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    uint64_t v37 = v36;

    OutputGenerationManifest.responseViewId.setter(v35, v37);
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))((char *)v30 + *(int *)(v105 + 20), v104, v25);
    *uint64_t v30 = v107;
    v30[1] = v106;
    sub_500C(v31, v31[3]);
    *(void *)(v0 + 160) = type metadata accessor for WellnessSnippets(0LL);
    *(void *)(v0 + 16_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_20168();
    int v38 = sub_B76C((void *)(v0 + 136));
    sub_201A8((uint64_t)v30, (uint64_t)v38);
    sub_92050((uint64_t)v38);
    uint64_t v39 = sub_494C(&qword_18A460);
    uint64_t v40 = sub_80BF8(v39);
    *(_OWORD *)(v40 + 1sub_D878(v0 + 6) = xmmword_138BA0;
    *(void *)(v40 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v33;
    sub_91FFC(v40, v41, v42);
    *(void *)(v0 + 480) = v108;
    uint64_t v43 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)[1];
    id v44 = v33;
    char v45 = (void *)swift_task_alloc(v43);
    *(void *)(v0 + 48_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v45;
    *char v45 = v0;
    v45[1] = sub_919F0;
LABEL_10:
    sub_56400();
    return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)( v46,  v47,  v48,  v49,  v50);
  }

  sub_500C((void *)(v0 + 56), *(void *)(v0 + 80));
  sub_202B4();
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 128);
  sub_745A4();
  char v7 = dispatch thunk of DeviceState.isPad.getter(v5, v6);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 96));
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 56));
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 16));
  if ((v7 & 1) != 0) {
    goto LABEL_4;
  }
  int v52 = *(unsigned __int8 *)(v0 + 528);
  (*(void (**)(void, void, void))(*(void *)(v0 + 408) + 16LL))( *(void *)(v0 + 416),  *(void *)(v0 + 320),  *(void *)(v0 + 400));
  if (v52 == 1)
  {
    uint64_t v53 = *(void *)(v0 + 448);
    uint64_t v54 = *(void *)(v0 + 432);
    uint64_t v55 = sub_90E74(0xD000000000000010LL, 0x8000000000145450LL, 0xD000000000000012LL, (void *)0x8000000000145470LL);
    uint64_t v57 = v56;
    URL.init(string:)(0xD000000000000033LL, 0x8000000000143FD0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v54, 1LL, v53) == 1)
    {
      uint64_t v58 = *(void *)(v0 + 432);
      swift_bridgeObjectRelease(v57);
      uint64_t v59 = sub_2012C(v58, &qword_189CF8);
      uint64_t v60 = Logger.wellness.unsafeMutableAddressor(v59);
      sub_9201C(v60);
      uint64_t v61 = sub_92008();
      uint64_t v62 = (void *)Logger.logObject.getter(v61);
      os_log_type_t v63 = static os_log_type_t.debug.getter();
      if (sub_A988(v63))
      {
        *(_WORD *)sub_232D0() = 0;
        sub_A940(&dword_0, v64, v65, "Couldn't create URL for watchMedications, returning GenericErrorFlow");
        sub_92030();
      }

      uint64_t v66 = *(void *)(v0 + 408);
      uint64_t v22 = *(void *)(v0 + 304);

      sub_92040();
      uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v66 + 8);
LABEL_8:
      sub_202F4(v23);
      *(void *)(v22 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0LL;
      *(_OWORD *)uint64_t v22 = 0u;
      *(_OWORD *)(v22 + 1sub_D878(v0 + 6) = 0u;
      sub_91FE4();
      sub_A78C();
      sub_A67C();
      sub_A7C8();
      sub_A760();
      sub_A8EC();
      sub_A910();
      sub_A864();
      sub_A85C();
      sub_56400();
      __asm { BR              X0 }
    }

    uint64_t v84 = *(void *)(v0 + 456);
    uint64_t v85 = *(void *)(v0 + 464);
    uint64_t v86 = *(void *)(v0 + 448);
    uint64_t v87 = v55;
    uint64_t v88 = *(void *)(v0 + 384);
    int v89 = *(uint64_t **)(v0 + 392);
    uint64_t v90 = *(void **)(v0 + 336);
    uint64_t v91 = *(void **)(v0 + 312);
    (*(void (**)(uint64_t, void, uint64_t))(v84 + 32))(v85, *(void *)(v0 + 432), v86);
    (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))((char *)v89 + *(int *)(v88 + 20), v85, v86);
    *int v89 = v87;
    v89[1] = v57;
    id v92 = [v91 catId];
    uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
    uint64_t v95 = v94;

    OutputGenerationManifest.responseViewId.setter(v93, v95);
    sub_500C(v90, v90[3]);
    *(void *)(v0 + 200) = type metadata accessor for WellnessSnippets(0LL);
    *(void *)(v0 + 20_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_20168();
    uint64_t v96 = sub_B76C((void *)(v0 + 176));
    sub_201A8((uint64_t)v89, (uint64_t)v96);
    sub_92050((uint64_t)v96);
    uint64_t v97 = sub_494C(&qword_18A460);
    uint64_t v98 = sub_80BF8(v97);
    *(_OWORD *)(v98 + 1sub_D878(v0 + 6) = xmmword_138BA0;
    *(void *)(v98 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v91;
    sub_91FFC(v98, v99, v100);
    *(void *)(v0 + 49sub_D878(v0 + 6) = v108;
    uint64_t v101 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)[1];
    id v102 = v91;
    uint64_t v103 = (void *)swift_task_alloc(v101);
    *(void *)(v0 + 50sub_D878(v0 + 4) = v103;
    *uint64_t v103 = v0;
    v103[1] = sub_91ABC;
    goto LABEL_10;
  }

  uint64_t v67 = *(void **)(v0 + 336);
  uint64_t v68 = *(void **)(v0 + 312);
  id v69 = [v68 catId];
  uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
  uint64_t v72 = v71;

  OutputGenerationManifest.responseViewId.setter(v70, v72);
  sub_500C(v67, v67[3]);
  uint64_t v73 = sub_494C(&qword_18A460);
  uint64_t v74 = sub_80BF8(v73);
  *(_OWORD *)(v74 + 1sub_D878(v0 + 6) = xmmword_138BA0;
  *(void *)(v74 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v68;
  sub_91FFC(v74, v75, v76);
  *(void *)(v0 + 51_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v108;
  uint64_t v77 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)[1];
  id v78 = v68;
  uint64_t v79 = (void *)swift_task_alloc(v77);
  *(void *)(v0 + 520) = v79;
  *uint64_t v79 = v0;
  v79[1] = sub_91B7C;
  sub_56400();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v80, v81, v82, v83);
}

uint64_t sub_919F0()
{
  uint64_t v1 = (void *)(v0 + 136);
  sub_20264(*(void *)(v0 + 488));
  sub_2A184();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
  sub_A964();
  return sub_A810();
}

uint64_t sub_91A34()
{
  uint64_t v1 = *(void *)(v0 + 456);
  uint64_t v2 = *(void *)(v0 + 304);
  sub_201EC(*(void *)(v0 + 392));
  sub_92040();
  sub_202F4(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_20004((__int128 *)(v0 + 216), v2);
  sub_91FE4();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  return sub_3C700(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_91ABC()
{
  uint64_t v1 = (void *)(v0 + 176);
  sub_20264(*(void *)(v0 + 504));
  sub_2A184();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
  sub_A964();
  return sub_A810();
}

uint64_t sub_91B00()
{
  uint64_t v1 = *(void *)(v0 + 456);
  uint64_t v3 = *(void *)(v0 + 408);
  uint64_t v2 = *(void *)(v0 + 416);
  uint64_t v4 = *(void *)(v0 + 400);
  sub_201EC(*(void *)(v0 + 392));
  sub_7569C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_91FE4();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  return sub_3C700(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_91B7C()
{
  uint64_t v1 = *(void *)(v0 + 512);
  sub_20264(*(void *)(v0 + 520));
  swift_bridgeObjectRelease(v1);
  sub_A964();
  return swift_task_switch(v2, v3, v4);
}

uint64_t sub_91BC4()
{
  return sub_3C700(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_91C24(uint64_t a1)
{
  uint64_t v5 = v4 - v3;
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_6D44();
  uint64_t v10 = v9 - v8;
  sub_91F9C(a1, v5);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1LL, v6) == 1)
  {
    sub_2012C(v5, &qword_189CE8);
    return 0LL;
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v10, v5, v6);
    id v12 = [objc_allocWithZone(NSDateFormatter) init];
    [v12 setTimeStyle:1];
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v14 = [v12 stringFromDate:isa];

    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    sub_7569C(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  }

  return v11;
}

uint64_t sub_91D88(uint64_t a1, uint64_t a2, void *a3)
{
  v31._uint64_t countAndFlagsBits = a2;
  v31._object = a3;
  uint64_t v5 = type metadata accessor for TemplatingSection(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v30 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v26 - v10;
  id v12 = _swiftEmptyArrayStorage;
  uint64_t v32 = _swiftEmptyArrayStorage;
  uint64_t v29 = *(void *)(a1 + 16);
  if (v29)
  {
    v26[1] = v3;
    uint64_t v27 = v5;
    unint64_t v13 = 0LL;
    uint64_t v28 = a1;
    while (v13 < *(void *)(a1 + 16))
    {
      unint64_t v14 = (*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      uint64_t v15 = *(void *)(v6 + 72);
      uint64_t v16 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v6 + 16))(v11, a1 + v14 + v15 * v13, v5);
      TemplatingSection.id.getter(v16);
      uint64_t v18 = v17;
      uint64_t v19 = v5;
      Swift::Bool v20 = String.hasSuffix(_:)(v31);
      swift_bridgeObjectRelease(v18);
      if (v20)
      {
        uint64_t v21 = v19;
        uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
        v22(v30, v11, v21);
        uint64_t v23 = v32;
        if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) == 0)
        {
          sub_39934(0, v23[2] + 1LL, 1);
          uint64_t v23 = v32;
        }

        unint64_t v25 = v23[2];
        unint64_t v24 = v23[3];
        if (v25 >= v24 >> 1)
        {
          sub_39934(v24 > 1, v25 + 1, 1);
          uint64_t v23 = v32;
        }

        v23[2] = v25 + 1;
        uint64_t v5 = v27;
        uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v22)((char *)v23 + v14 + v25 * v15, v30, v27);
        uint64_t v32 = v23;
        a1 = v28;
      }

      else
      {
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v19);
        uint64_t v5 = v19;
      }

      if (v29 == ++v13)
      {
        id v12 = v32;
        goto LABEL_13;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_13:
    swift_bridgeObjectRelease(v31._object);
    swift_bridgeObjectRelease(a1);
    return (uint64_t)v12;
  }

  return result;
}

uint64_t sub_91F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_494C(&qword_189CE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_91FE4()
{
  return swift_task_dealloc(*(void *)(v0 + 472));
}

uint64_t sub_91FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Array._endMutation()(a1, a2, a3);
}

uint64_t sub_92008()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v0, v2);
}

uint64_t sub_9201C(uint64_t a1)
{
  return swift_beginAccess(a1, v1, 0LL, 0LL);
}

uint64_t sub_92030()
{
  return swift_slowDealloc(v0, -1LL, -1LL);
}

uint64_t sub_92040()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_92050(uint64_t a1)
{
  return swift_storeEnumTagMultiPayload(a1, v1, 4LL);
}

id sub_9205C()
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0));
  NSString v2 = String._bridgeToObjectiveC()();
  sub_2A184();
  id v3 = [v1 initWithSymbol:v2];

  return v3;
}

uint64_t sub_920C8()
{
  uint64_t v0 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v0);
  NSString v2 = (char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for WellnessQueryingCATsSimple(0LL);
  static CATOption.defaultMode.getter();
  uint64_t result = CATWrapperSimple.__allocating_init(options:globals:)(v2, 0LL);
  qword_19C348 = result;
  return result;
}

uint64_t sub_92140(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 12_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a3;
  *(void *)(v4 + 13sub_D878(v0 + 6) = a4;
  *(_BYTE *)(v4 + 20_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a2;
  *(void *)(v4 + 120) = a1;
  uint64_t v5 = sub_D984();
  *(void *)(v4 + 14sub_D878(v0 + 4) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v4 + 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v6;
  *(void *)(v4 + 160) = sub_A5C0(v6);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_9218C()
{
  int v3 = *(unsigned __int8 *)(v0 + 208);
  uint64_t v4 = (v3 - 89);
  if (v4 <= 0x3E)
  {
    if (((1LL << (v3 - 89)) & 0x6400000000004113LL) != 0)
    {
LABEL_9:
      uint64_t v17 = (void *)swift_task_alloc(dword_18D9EC);
      *(void *)(v0 + 16_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v17;
      sub_99428(v17);
      sub_9950C();
      return sub_95BC8(v18, v19, v20, v21);
    }

    if (((1LL << (v3 - 89)) & 0x40080) != 0)
    {
      uint64_t v5 = (void *)swift_task_alloc(dword_18D9E4);
      *(void *)(v0 + 17sub_D878(v0 + 6) = v5;
      sub_99428(v5);
      sub_9950C();
      return sub_971CC(v6, v7, v8, v9);
    }

    if (v4 == 16)
    {
      uint64_t v11 = (void *)swift_task_alloc(dword_18D9CC);
      *(void *)(v0 + 200) = v11;
      sub_99258(v11);
      sub_9950C();
      return sub_94620(v12, v13, v14, v15);
    }
  }

  uint64_t v16 = (v3 - 155);
  if (v16 <= 0x26)
  {
    if (((1LL << v16) & 0x40200C0011LL) != 0) {
      goto LABEL_9;
    }
    if (v16 == 7)
    {
      uint64_t v27 = (void *)swift_task_alloc(dword_18D9DC);
      *(void *)(v0 + 18sub_D878(v0 + 4) = v27;
      sub_99258(v27);
      sub_9950C();
      return sub_925AC(v28, v29, v30, v31);
    }

    if (v16 == 15)
    {
      uint64_t v22 = (void *)swift_task_alloc(dword_18D9D4);
      *(void *)(v0 + 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v22;
      sub_99258(v22);
      sub_9950C();
      return sub_93564(v23, v24, v25, v26);
    }
  }

  *(void *)(v0 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0LL;
  *(_OWORD *)(v0 + 1sub_D878(v0 + 6) = 0u;
  *(_OWORD *)(v0 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
  sub_99494();
  sub_993E0();
  if (v1)
  {
    sub_57EF4();
  }

  else
  {
    uint64_t v32 = sub_993D0();
    sub_A5DC(v32, v0 + 56);
    sub_3A42C();
    sub_A86C();
    os_log_type_t v33 = sub_A898();
    if (sub_232DC(v33))
    {
      id v34 = (_WORD *)sub_A5E8(2LL);
      sub_36A44(v34);
      sub_3A440( &dword_0,  v35,  v36,  "#GenerateQueryResponseOutput: Snippet model cannot be created. Possibly unsupported usecase.");
      sub_5050(0LL);
    }

    sub_9939C();
    uint64_t v37 = sub_57E90();
    sub_36A94(v37, &qword_18A448);
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + 1sub_D878(v0 + 6) = 0u;
    *(void *)(v2 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0LL;
  }

  swift_task_dealloc(*(void *)(v0 + 160));
  return sub_20294(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_923E8()
{
  return sub_A5D0();
}

uint64_t sub_9241C()
{
  return sub_A5D0();
}

uint64_t sub_92450()
{
  return sub_A5D0();
}

uint64_t sub_92484()
{
  return sub_A5D0();
}

uint64_t sub_924B8()
{
  return sub_A5D0();
}

uint64_t sub_924EC()
{
  if (v1)
  {
    sub_57EF4();
  }

  else
  {
    uint64_t v3 = sub_993D0();
    sub_A5DC(v3, v0 + 56);
    sub_3A42C();
    sub_A86C();
    os_log_type_t v4 = sub_A898();
    if (sub_232DC(v4))
    {
      uint64_t v5 = (_WORD *)sub_A5E8(2LL);
      sub_36A44(v5);
      sub_3A440( &dword_0,  v6,  v7,  "#GenerateQueryResponseOutput: Snippet model cannot be created. Possibly unsupported usecase.");
      sub_5050(0LL);
    }

    sub_9939C();
    uint64_t v8 = sub_57E90();
    sub_36A94(v8, &qword_18A448);
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + 1sub_D878(v0 + 6) = 0u;
    *(void *)(v2 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0LL;
  }

  swift_task_dealloc(*(void *)(v0 + 160));
  return sub_20294(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_925AC(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 200) = a3;
  *(void *)(v4 + 20_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a4;
  *(_BYTE *)(v4 + 60_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a2;
  *(void *)(v4 + 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a1;
  uint64_t v5 = sub_D984();
  *(void *)(v4 + 21sub_D878(v0 + 6) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v4 + 22sub_D878(v0 + 4) = v6;
  *(void *)(v4 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_D8CC(v6);
  *(void *)(v4 + sub_A304(v0 - 176, v0 - 240) = sub_A5B8();
  *(void *)(v4 + 24_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_A5B8();
  *(void *)(v4 + 2sub_D7EC(v0 + 16, v0 + 56) = sub_A5B8();
  *(void *)(v4 + 26sub_D878(v0 + 4) = sub_A5B8();
  uint64_t v7 = sub_494C(&qword_18A1A8);
  *(void *)(v4 + 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_A5C0(*(void *)(v7 - 8));
  uint64_t v8 = sub_494C(&qword_189D00);
  *(void *)(v4 + 280) = sub_D8CC(*(void *)(v8 - 8));
  *(void *)(v4 + 28_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_A5B8();
  uint64_t Model = type metadata accessor for HeightQueryModel(0LL);
  *(void *)(v4 + 29sub_D878(v0 + 6) = Model;
  *(void *)(v4 + 30sub_D878(v0 + 4) = sub_D8CC(*(void *)(Model - 8));
  *(void *)(v4 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_A5B8();
  *(void *)(v4 + 320) = sub_A5B8();
  uint64_t v10 = sub_995B0();
  *(void *)(v4 + 32_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v10;
  *(void *)(v4 + 33sub_D878(v0 + 6) = sub_D8CC(*(void *)(v10 - 8));
  *(void *)(v4 + 34sub_D878(v0 + 4) = sub_A5B8();
  *(void *)(v4 + 35_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_A5B8();
  uint64_t v11 = sub_3C798();
  *(void *)(v4 + 360) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v4 + 36_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v12;
  *(void *)(v4 + 37sub_D878(v0 + 6) = sub_A5C0(v12);
  uint64_t v13 = sub_A8E4();
  *(void *)(v4 + 38sub_D878(v0 + 4) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v4 + 39_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v14;
  *(void *)(v4 + 400) = sub_A5C0(v14);
  uint64_t v15 = sub_494C(&qword_189CE8);
  *(void *)(v4 + 40_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_A5C0(*(void *)(v15 - 8));
  uint64_t v16 = sub_494C(&qword_189CF8);
  *(void *)(v4 + 41sub_D878(v0 + 6) = sub_D8CC(*(void *)(v16 - 8));
  *(void *)(v4 + 42sub_D878(v0 + 4) = sub_A5B8();
  *(void *)(v4 + 43_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_9270C()
{
  *(void *)(v0 + 440) = v3;
  sub_992B8();
  uint64_t v4 = sub_992A4();
  uint64_t v6 = v5;
  sub_10A39C(v4, v5);
  uint64_t v8 = v7;
  *(void *)(v0 + 44_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v9;
  *(void *)(v0 + 4sub_D7EC(v0 + 16, v0 + 56) = v7;
  sub_249D4();
  if (v8)
  {
    uint64_t v10 = sub_99330();
    *(void *)(v0 + 46sub_D878(v0 + 4) = v10;
    id v11 = sub_373D8(v10, "start");
    if (v11)
    {
      uint64_t v14 = v11;
      sub_995F8((uint64_t)v11);

      sub_991A0();
      sub_99010();
    }

    else
    {
      sub_99114(0LL, v12, v13, *(void *)(v0 + 384));
    }

    sub_279E0(*(void *)(v0 + 408), &qword_189CE8);
    id v102 = (void *)swift_task_alloc(dword_18B70C);
    *(void *)(v0 + 47_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v102;
    uint64_t v103 = sub_991B4(v102, (uint64_t)sub_928D4);
    return sub_5EC2C(v103, v104, v105);
  }

  else
  {
    uint64_t v15 = sub_99484();
    sub_A5DC(v15, v6);
    sub_3A42C();
    sub_A86C();
    os_log_type_t v16 = sub_A898();
    if (sub_232DC(v16))
    {
      uint64_t v17 = (_WORD *)sub_A5E8(2LL);
      sub_36A44(v17);
      sub_3A440(&dword_0, v18, v19, "Failed to execute height pattern: no unit found in intent response.");
      sub_5050(0LL);
    }

    sub_99474();
    sub_37034();
    uint64_t v20 = sub_AB64(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    sub_72F7C(v20, &qword_189CF8);
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + 1sub_D878(v0 + 6) = 0u;
    *(void *)(v2 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0LL;
    sub_98E4C();
    sub_A85C();
    sub_A8F4();
    sub_A78C();
    sub_A67C();
    sub_A7C8();
    sub_A760();
    sub_A8EC();
    sub_A910();
    uint64_t v21 = sub_A864();
    uint64_t v29 = sub_AAD8(v21, v22, v23, v24, v25, v26, v27, v28, v106, v116);
    uint64_t v37 = sub_A888(v29, v30, v31, v32, v33, v34, v35, v36, v107, v117, v126);
    uint64_t v45 = sub_A854(v37, v38, v39, v40, v41, v42, v43, v44, v108, v118, v127, v135);
    uint64_t v53 = sub_A84C(v45, v46, v47, v48, v49, v50, v51, v52, v109, v119, v128, v136, v143);
    uint64_t v61 = sub_A844(v53, v54, v55, v56, v57, v58, v59, v60, v110, v120, v129, v137, v144, v150);
    uint64_t v69 = sub_A83C(v61, v62, v63, v64, v65, v66, v67, v68, v111, v121, v130, v138, v145, v151, v156);
    uint64_t v77 = sub_A95C(v69, v70, v71, v72, v73, v74, v75, v76, v112, v122, v131, v139, v146, v152, v157, v161);
    uint64_t v85 = sub_A954(v77, v78, v79, v80, v81, v82, v83, v84, v113, v123, v132, v140, v147, v153, v158, v162, v165);
    uint64_t v93 = sub_A938(v85, v86, v87, v88, v89, v90, v91, v92, v114, v124, v133, v141, v148, v154, v159, v163, v166, v168);
    sub_A930(v93, v94, v95, v96, v97, v98, v99, v100, v115, v125, v134, v142, v149, v155, v160, v164, v167, v169, v170);
    return sub_98F84(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_928D4()
{
  *(void *)(v2 + 480) = v0;
  *(void *)(v2 + 48_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v1;
  sub_36900(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_92910()
{
  *(void *)(v0 + 49sub_D878(v0 + 6) = v1;
  uint64_t v2 = (void *)swift_task_alloc(dword_18B704);
  *(void *)(v0 + 50sub_D878(v0 + 4) = v2;
  uint64_t v3 = sub_36E5C(v2, (uint64_t)sub_92958);
  return sub_366DC(v3, v4);
}

uint64_t sub_92958()
{
  *(void *)(v1 + 51_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0;
  *(void *)(v1 + 520) = v2;
  sub_36900(v3);
  sub_249D4();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_9299C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v3 + 520);
  uint64_t v6 = *(void *)(v3 + 488);
  if (!v5)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    swift_bridgeObjectRelease();
LABEL_9:
    uint64_t v9 = sub_993F8();
    sub_A5DC(v9, (uint64_t)v2);
    sub_232F4();
    sub_23374();
    os_log_type_t v10 = sub_A898();
    if (sub_A988(v10))
    {
      id v11 = (_WORD *)sub_A5E8(2LL);
      sub_366C0(v11);
      sub_A940(&dword_0, v12, v13, "Couldn't create data or date dialog labels or deeplink");
      sub_5050(v5);
    }

    sub_993C0(*(void *)(v3 + 440));

    sub_37034();
    uint64_t v14 = sub_AB64(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    sub_72F7C(v14, &qword_189CF8);
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v4 + 1sub_D878(v0 + 6) = 0u;
    *(void *)(v4 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0LL;
    uint64_t v227 = *(void *)(v3 + 312);
    uint64_t v234 = *(void *)(v3 + 304);
    uint64_t v240 = *(void *)(v3 + 288);
    uint64_t v246 = *(void *)(v3 + 280);
    uint64_t v251 = *(void *)(v3 + 272);
    uint64_t v255 = *(void *)(v3 + 264);
    sub_9959C();
    uint64_t v260 = v16;
    uint64_t v264 = v15;
    uint64_t v267 = *(void *)(v3 + 240);
    swift_task_dealloc(v17);
    sub_A85C();
    sub_A8F4();
    sub_A78C();
    sub_A67C();
    sub_A7C8();
    sub_A760();
    sub_A8EC();
    sub_A910();
    uint64_t v18 = sub_A864();
    uint64_t v26 = sub_A930( v18,  v19,  v20,  v21,  v22,  v23,  v24,  v25,  v160,  v166,  v172,  v178,  v185,  v192,  v199,  v206,  v213,  v220,  v227);
    uint64_t v34 = sub_A928( v26,  v27,  v28,  v29,  v30,  v31,  v32,  v33,  v161,  v167,  v173,  v179,  v186,  v193,  v200,  v207,  v214,  v221,  v228,  v234);
    uint64_t v42 = sub_A920( v34,  v35,  v36,  v37,  v38,  v39,  v40,  v41,  v162,  v168,  v174,  v180,  v187,  v194,  v201,  v208,  v215,  v222,  v229,  v235,  v240);
    sub_36374( v42,  v43,  v44,  v45,  v46,  v47,  v48,  v49,  v163,  v169,  v175,  v181,  v188,  v195,  v202,  v209,  v216,  v223,  v230,  v236,  v241,  v246);
    swift_task_dealloc(v251);
    swift_task_dealloc(v255);
    uint64_t v50 = swift_task_dealloc(v260);
    uint64_t v58 = sub_36430( v50,  v51,  v52,  v53,  v54,  v55,  v56,  v57,  v164,  v170,  v176,  v182,  v189,  v196,  v203,  v210,  v217,  v224,  v231,  v237,  v242,  v247,  v251,  v255,  v260,  v264);
    sub_36428( v58,  v59,  v60,  v61,  v62,  v63,  v64,  v65,  v165,  v171,  v177,  v183,  v190,  v197,  v204,  v211,  v218,  v225,  v232,  v238,  v243,  v248,  v252,  v256,  v261,  v265,  v267);
    sub_366B0();
    sub_99374();
    __asm { BR              X0 }
  }

  if (!v6)
  {
    uint64_t v2 = *(void **)(v3 + 456);
    sub_6D64();
    goto LABEL_8;
  }

  sub_993F0(*(void *)(v3 + 432), a2, &qword_189CF8);
  sub_99124();
  if (v7)
  {
    uint64_t v2 = *(void **)(v3 + 456);
    sub_6D64();
    sub_369F4();
    uint64_t v8 = sub_249D4();
    sub_36A94(v8, &qword_189CF8);
    goto LABEL_9;
  }

  uint64_t v268 = v3 + 184;
  uint64_t v184 = *(void *)(v3 + 480);
  uint64_t v269 = *(void *)(v3 + 456);
  uint64_t v219 = *(void *)(v3 + 448);
  uint64_t v226 = *(void *)(v3 + 416);
  uint64_t v205 = *(void *)(v3 + 368);
  uint64_t v212 = *(void *)(v3 + 376);
  uint64_t v67 = *(void *)(v3 + 352);
  uint64_t v68 = *(void *)(v3 + 328);
  uint64_t v69 = *(void *)(v3 + 288);
  uint64_t v198 = *(void *)(v3 + 280);
  uint64_t v233 = *(void *)(v3 + 272);
  uint64_t v239 = *(void *)(v3 + 320);
  uint64_t v244 = *(void *)(v3 + 224);
  uint64_t v249 = *(os_log_s **)(v3 + 264);
  uint64_t v70 = *(void **)(v3 + 208);
  uint64_t v253 = *(void *)(v3 + 216);
  uint64_t v257 = *(void *)(v3 + 312);
  unsigned __int8 v71 = *(_BYTE *)(v3 + 608);
  sub_23360(v212, *(void *)(v3 + 424), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v205 + 32));
  uint64_t v72 = sub_993B4();
  String.toSpeakableString.getter(v72, v73);
  sub_6D64();
  unint64_t v74 = sub_2A044(v71);
  unint64_t v76 = v75;
  uint64_t v77 = sub_994D0();
  uint64_t v191 = v68;
  uint64_t v78 = (unint64_t *)(v67 + *(int *)(v68 + 20));
  *uint64_t v78 = v74;
  v78[1] = v76;
  uint64_t v79 = (uint64_t *)(v67 + *(int *)(v68 + 24));
  *uint64_t v79 = v77;
  v79[1] = v80;
  sub_50DA4(v70);
  uint64_t v81 = sub_99448();
  uint64_t v83 = sub_56734(v81, v82, v71);
  uint64_t v84 = sub_6D64();
  sub_56344(v84, "maximum");
  double v86 = v85;
  uint64_t v87 = sub_99448();
  uint64_t v89 = sub_90668(v87, v88, v71, v86);
  uint64_t v90 = sub_6D64();
  sub_56344(v90, "minimum");
  double v92 = v91;
  uint64_t v93 = sub_99448();
  uint64_t v95 = sub_90668(v93, v94, v71, v92);
  sub_6D64();
  String.toSpeakableString.getter(v184, v6);
  sub_369F4();
  uint64_t v96 = sub_ABF4();
  uint64_t v97 = sub_72A94(v69);
  id v98 = sub_56344(v97, "minimum");
  sub_56344((uint64_t)v98, "maximum");
  sub_99448();
  BOOL v99 = sub_50DF0();
  sub_1EBF4();
  String.toSpeakableString.getter(v219, v269);
  sub_99194();
  uint64_t v270 = v96;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v100, v101, v102, v96);
  sub_23360(v226, v212, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v205 + 16));
  sub_990C4(v226);
  sub_98DE0(v67, v233, type metadata accessor for SnippetHeaderModel);
  sub_99194();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v103, v104, v105, v191);
  uint64_t v106 = sub_24F4C(v83, 0, v89, 0, v95, 0, v69, v99, v239, v198, v226, v233);
  uint64_t v107 = Logger.wellness.unsafeMutableAddressor(v106);
  *(void *)(v3 + 52_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v107;
  sub_A5DC(v107, v3 + 80);
  uint64_t v108 = v249;
  uint64_t v109 = *(void (**)(os_log_s *, uint64_t, uint64_t))(v244 + 16);
  *(void *)(v3 + 53sub_D878(v0 + 6) = v109;
  v109(v249, v107, v253);
  sub_98DE0(v239, v257, type metadata accessor for HeightQueryModel);
  Logger.logObject.getter(v110);
  os_log_type_t v111 = sub_AB70();
  BOOL v112 = sub_46614(v111);
  uint64_t v113 = *(void *)(v3 + 312);
  if (v112)
  {
    uint64_t v114 = *(void *)(v3 + 304);
    uint64_t v245 = *(void *)(v3 + 296);
    uint64_t v250 = *(void *)(v3 + 224);
    uint64_t v254 = *(void *)(v3 + 216);
    uint64_t v258 = *(void *)(v3 + 264);
    uint64_t v115 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v262 = v109;
    uint64_t v116 = sub_A5E8(32LL);
    v271[0] = v116;
    *(_DWORD *)uint64_t v115 = 136315138;
    sub_991E4(v116, v117, type metadata accessor for HeightQueryModel);
    uint64_t v118 = String.init<A>(describing:)(v114, v245);
    *(void *)(v3 + 18sub_D878(v0 + 4) = sub_39178(v118, v119, v271);
    sub_9933C(v268, v3 + 192, (uint64_t)(v115 + 4));
    swift_bridgeObjectRelease();
    sub_26F04(v113, type metadata accessor for HeightQueryModel);
    sub_DA24(&dword_0, v108, (os_log_type_t)v89, "Query snippet model is: %s", v115);
    sub_A81C(v116);
    uint64_t v120 = v116;
    uint64_t v109 = v262;
    sub_5050(v120);
    sub_5050((uint64_t)v115);

    uint64_t v121 = *(void (**)(uint64_t, uint64_t))(v250 + 8);
    v121(v258, v254);
  }

  else
  {
    uint64_t v122 = *(void *)(v3 + 264);
    uint64_t v123 = *(void *)(v3 + 216);
    uint64_t v124 = *(void *)(v3 + 224);
    sub_990D4(v112, type metadata accessor for HeightQueryModel);

    uint64_t v121 = *(void (**)(uint64_t, uint64_t))(v124 + 8);
    v121(v122, v123);
  }

  *(void *)(v3 + 54sub_D878(v0 + 4) = v121;
  uint64_t v125 = *(void *)(v3 + 352);
  uint64_t v126 = *(os_log_s **)(v3 + 256);
  uint64_t v127 = *(void *)(v3 + 216);
  sub_A5DC(v107, v3 + 104);
  v109(v126, v107, v127);
  sub_992DC(v125, v128, type metadata accessor for SnippetHeaderModel);
  Logger.logObject.getter(v129);
  os_log_type_t v130 = sub_AB70();
  BOOL v131 = sub_A634(v130);
  uint64_t v132 = *(void *)(v3 + 344);
  if (v131)
  {
    uint64_t v263 = *(void *)(v3 + 216);
    uint64_t v266 = *(void *)(v3 + 256);
    uint64_t v133 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v259 = v121;
    uint64_t v134 = sub_A5E8(32LL);
    v271[0] = v134;
    *(_DWORD *)uint64_t v133 = 136315138;
    sub_99578(v134, v135, type metadata accessor for SnippetHeaderModel);
    uint64_t v136 = sub_99304();
    *(void *)(v3 + 17sub_D878(v0 + 6) = sub_39178(v136, v137, v271);
    sub_994F0(v3 + 176, v268, (uint64_t)(v133 + 4));
    sub_2A184();
    sub_26F04(v132, type metadata accessor for SnippetHeaderModel);
    sub_DA24(&dword_0, v126, (os_log_type_t)v126, "Query snippet header model is: %s", v133);
    sub_A81C(v134);
    sub_5050(v134);
    sub_5050((uint64_t)v133);

    v259(v266, v263);
  }

  else
  {
    sub_991F0(v131, type metadata accessor for SnippetHeaderModel);

    sub_995CC();
  }

  if (qword_189AF0 != -1) {
    swift_once(&qword_189AF0, sub_920C8);
  }
  uint64_t v138 = *(void *)(v3 + 320);
  uint64_t v139 = *(int **)(v3 + 296);
  uint64_t v140 = *(void *)(v3 + 280);
  *(void *)(v3 + 55_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = qword_19C348;
  uint64_t v141 = v138 + v139[5];
  uint64_t v142 = *(void *)v141;
  char v143 = *(_BYTE *)(v141 + 8);
  swift_retain();
  sub_4195C();
  sub_363E8();
  sub_99234();
  sub_99194();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v144, v145, v146, v270);
  *(void *)(v3 + 560) = sub_995F0(v142, v143);
  sub_992F8();
  uint64_t v147 = v138 + v139[7];
  uint64_t v148 = *(void *)v147;
  char v149 = *(_BYTE *)(v147 + 8);
  sub_99234();
  sub_990C4(v140);
  *(void *)(v3 + 56_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_995F0(v148, v149);
  sub_992F8();
  uint64_t v150 = v138 + v139[6];
  uint64_t v151 = *(void *)v150;
  LOBYTE(v13_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *(_BYTE *)(v150 + 8);
  sub_99234();
  sub_369F4();
  sub_990C4(v140);
  *(void *)(v3 + 57sub_D878(v0 + 6) = sub_995F0(v151, v138);
  sub_992F8();
  uint64_t v152 = (void *)swift_task_alloc(dword_18DC04);
  *(void *)(v3 + 58sub_D878(v0 + 4) = v152;
  *uint64_t v152 = v3;
  v152[1] = sub_93210;
  sub_99374();
  return sub_9EBE8(v153, v154, v155, v156, v157, v158);
}

uint64_t sub_93210()
{
  if (v1)
  {
    swift_release();
    sub_36BE0();
    sub_367AC();
    sub_36860();
  }

  else
  {
    *(void *)(v2 + 59_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0;
    swift_release();
    sub_36BE0();
    sub_367AC();
  }

  sub_A964();
  return sub_D954();
}

uint64_t sub_932B0()
{
  uint64_t v1 = sub_370D4();
  unint64_t v2 = sub_99228(v1);
  uint64_t v3 = sub_991D8(v2);
  sub_9921C((uint64_t)v3, v4, type metadata accessor for HeightQueryModel);
  uint64_t v5 = sub_993B4();
  swift_storeEnumTagMultiPayload(v5, v6, 9LL);
  char v7 = (void *)swift_task_alloc(dword_18B6FC);
  *(void *)(v0 + 600) = v7;
  *char v7 = v0;
  v7[1] = sub_9332C;
  sub_99520();
  return sub_990A8(v8, v9, v10);
}

uint64_t sub_9332C()
{
  return sub_A5D0();
}

#error "933F4: call analysis failed (funcsize=46)"
#error "93530: call analysis failed (funcsize=74)"
uint64_t sub_93564(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Model;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  *(void *)(v4 + 200) = a3;
  *(void *)(v4 + 20_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a4;
  *(_BYTE *)(v4 + 600) = a2;
  *(void *)(v4 + 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a1;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  *(void *)(v4 + 21sub_D878(v0 + 6) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v4 + 22sub_D878(v0 + 4) = v6;
  char v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v4 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = swift_task_alloc(v7);
  *(void *)(v4 + sub_A304(v0 - 176, v0 - 240) = swift_task_alloc(v7);
  *(void *)(v4 + 24_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = swift_task_alloc(v7);
  *(void *)(v4 + 2sub_D7EC(v0 + 16, v0 + 56) = swift_task_alloc(v7);
  *(void *)(v4 + 26sub_D878(v0 + 4) = swift_task_alloc(v7);
  uint64_t v8 = sub_494C(&qword_18A1A8);
  *(void *)(v4 + 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_494C(&qword_189D00);
  *(void *)(v4 + 280) = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Model = type metadata accessor for OxygenSaturationQueryModel(0LL);
  *(void *)(v4 + 28_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = Model;
  id v11 = (*(void *)(*(void *)(Model - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v4 + 29sub_D878(v0 + 6) = swift_task_alloc(v11);
  *(void *)(v4 + 30sub_D878(v0 + 4) = swift_task_alloc(v11);
  *(void *)(v4 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = swift_task_alloc(v11);
  uint64_t v12 = type metadata accessor for SnippetHeaderModel(0LL);
  *(void *)(v4 + 320) = v12;
  uint64_t v13 = (*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v4 + 32_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = swift_task_alloc(v13);
  *(void *)(v4 + 33sub_D878(v0 + 6) = swift_task_alloc(v13);
  *(void *)(v4 + 34sub_D878(v0 + 4) = swift_task_alloc(v13);
  uint64_t v14 = type metadata accessor for URL(0LL);
  *(void *)(v4 + 35_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  *(void *)(v4 + 360) = v15;
  *(void *)(v4 + 36_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for Date(0LL);
  *(void *)(v4 + 37sub_D878(v0 + 6) = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  *(void *)(v4 + 38sub_D878(v0 + 4) = v17;
  *(void *)(v4 + 39_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = swift_task_alloc((*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_494C(&qword_189CE8);
  *(void *)(v4 + 400) = swift_task_alloc((*(void *)(*(void *)(v18 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = (*(void *)(*(void *)(sub_494C(&qword_189CF8) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v4 + 40_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = swift_task_alloc(v19);
  *(void *)(v4 + 41sub_D878(v0 + 6) = swift_task_alloc(v19);
  *(void *)(v4 + 42sub_D878(v0 + 4) = swift_task_alloc(v19);
  return swift_task_switch(sub_9377C, 0LL, 0LL);
}

uint64_t sub_9377C()
{
  *(void *)(v0 + 43_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v3;
  sub_992B8();
  uint64_t v4 = sub_992A4();
  uint64_t v6 = v5;
  sub_10A39C(v4, v5);
  uint64_t v8 = v7;
  *(void *)(v0 + 440) = v9;
  *(void *)(v0 + 44_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v7;
  sub_249D4();
  if (v8)
  {
    uint64_t v10 = sub_99330();
    *(void *)(v0 + 4sub_D7EC(v0 + 16, v0 + 56) = v10;
    id v11 = sub_373D8(v10, "start");
    if (v11)
    {
      uint64_t v14 = v11;
      sub_995F8((uint64_t)v11);

      sub_991A0();
      sub_99010();
    }

    else
    {
      sub_99114(0LL, v12, v13, *(void *)(v0 + 376));
    }

    sub_279E0(*(void *)(v0 + 400), &qword_189CE8);
    uint64_t v94 = (void *)swift_task_alloc(dword_18B70C);
    *(void *)(v0 + 46sub_D878(v0 + 4) = v94;
    uint64_t v95 = sub_991B4(v94, (uint64_t)sub_93940);
    return sub_5EC2C(v95, v96, v97);
  }

  else
  {
    uint64_t v15 = sub_99484();
    sub_A5DC(v15, v6);
    sub_3A42C();
    sub_A86C();
    os_log_type_t v16 = sub_A898();
    if (sub_232DC(v16))
    {
      uint64_t v17 = (_WORD *)sub_A5E8(2LL);
      sub_36A44(v17);
      sub_3A440(&dword_0, v18, v19, "Failed to execute height pattern: no unit found in intent response.");
      sub_5050(0LL);
    }

    sub_99474();
    sub_37034();
    uint64_t v20 = sub_AB64(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    sub_72F7C(v20, &qword_189CF8);
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + 1sub_D878(v0 + 6) = 0u;
    *(void *)(v2 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0LL;
    sub_98EA4();
    sub_A864();
    sub_A85C();
    sub_A8F4();
    sub_A78C();
    sub_A67C();
    sub_A7C8();
    sub_A760();
    sub_A8EC();
    uint64_t v21 = sub_A910();
    uint64_t v29 = sub_A970(v21, v22, v23, v24, v25, v26, v27, v28, v98);
    uint64_t v37 = sub_AAD8(v29, v30, v31, v32, v33, v34, v35, v36, v99, v107);
    uint64_t v45 = sub_A888(v37, v38, v39, v40, v41, v42, v43, v44, v100, v108, v115);
    uint64_t v53 = sub_A854(v45, v46, v47, v48, v49, v50, v51, v52, v101, v109, v116, v122);
    uint64_t v61 = sub_A84C(v53, v54, v55, v56, v57, v58, v59, v60, v102, v110, v117, v123, v128);
    uint64_t v69 = sub_A844(v61, v62, v63, v64, v65, v66, v67, v68, v103, v111, v118, v124, v129, v133);
    uint64_t v77 = sub_A83C(v69, v70, v71, v72, v73, v74, v75, v76, v104, v112, v119, v125, v130, v134, v137);
    uint64_t v85 = sub_A95C(v77, v78, v79, v80, v81, v82, v83, v84, v105, v113, v120, v126, v131, v135, v138, v140);
    sub_A954(v85, v86, v87, v88, v89, v90, v91, v92, v106, v114, v121, v127, v132, v136, v139, v141, v142);
    return sub_80A90(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_93940()
{
  *(void *)(v2 + 47_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0;
  *(void *)(v2 + 480) = v1;
  sub_36900(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_9397C()
{
  *(void *)(v0 + 48_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v1;
  uint64_t v2 = (void *)swift_task_alloc(dword_18B704);
  *(void *)(v0 + 49sub_D878(v0 + 6) = v2;
  uint64_t v3 = sub_36E5C(v2, (uint64_t)sub_939C4);
  return sub_366DC(v3, v4);
}

uint64_t sub_939C4()
{
  *(void *)(v2 + 50sub_D878(v0 + 4) = v0;
  *(void *)(v2 + 51_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v1;
  sub_36900(v3);
  sub_249D4();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_93A04()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  *(void *)(v0 + 520) = v1;
  uint64_t v2 = sub_99064(v1, (uint64_t)sub_93A3C);
  return sub_36164(v2, v3);
}

uint64_t sub_93A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 520);
  *(void *)(v3 + 52_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a1;
  *(void *)(v3 + 53sub_D878(v0 + 6) = a2;
  sub_36900(v4);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_93A8C()
{
  uint64_t v4 = *(void **)(v1 + 512);
  if (!v4)
  {
    uint64_t v4 = *(void **)(v1 + 536);
    swift_bridgeObjectRelease();
    sub_1EBF4();
LABEL_7:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }

  if (!*(void *)(v1 + 480))
  {
    uint64_t v0 = *(void *)(v1 + 448);
    sub_249D4();
    sub_6D64();
    goto LABEL_7;
  }

  uint64_t v5 = *(void *)(v1 + 416);
  uint64_t v6 = *(void *)(v1 + 352);
  sub_98DB4(*(void *)(v1 + 424), v5, &qword_189CF8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1LL, v6) == 1)
  {
    uint64_t v0 = *(void *)(v1 + 448);
    uint64_t v7 = *(void *)(v1 + 416);
    sub_249D4();
    sub_1EBF4();
    sub_6D64();
    sub_2A184();
    sub_279E0(v7, &qword_189CF8);
LABEL_8:
    uint64_t v8 = sub_993F8();
    sub_A5DC(v8, (uint64_t)v4);
    sub_232F4();
    sub_23374();
    os_log_type_t v9 = sub_A898();
    if (sub_A988(v9))
    {
      uint64_t v10 = (_WORD *)sub_A5E8(2LL);
      sub_366C0(v10);
      sub_A940(&dword_0, v11, v12, "Couldn't create data or date dialog labels or deeplink");
      sub_5050(v0);
    }

    sub_993C0(*(void *)(v1 + 432));

    sub_37034();
    uint64_t v13 = sub_AB64(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    sub_72F7C(v13, &qword_189CF8);
    *(_OWORD *)uint64_t v3 = 0u;
    *(_OWORD *)(v3 + 1sub_D878(v0 + 6) = 0u;
    *(void *)(v3 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0LL;
    uint64_t v210 = *(void *)(v1 + 304);
    uint64_t v215 = *(void *)(v1 + 296);
    uint64_t v219 = *(void *)(v1 + 280);
    uint64_t v222 = *(void *)(v1 + 272);
    swift_task_dealloc(*(void *)(v1 + 424));
    sub_A864();
    sub_A85C();
    sub_A8F4();
    sub_A78C();
    sub_A67C();
    sub_A7C8();
    sub_A760();
    sub_A8EC();
    uint64_t v14 = sub_A910();
    uint64_t v22 = sub_36430( v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21,  v133,  v137,  v141,  v145,  v149,  v153,  v157,  v161,  v165,  v170,  v175,  v180,  v185,  v190,  v195,  v200,  v205,  v210);
    uint64_t v30 = sub_36428( v22,  v23,  v24,  v25,  v26,  v27,  v28,  v29,  v134,  v138,  v142,  v146,  v150,  v154,  v158,  v162,  v166,  v171,  v176,  v181,  v186,  v191,  v196,  v201,  v206,  v211,  v215);
    uint64_t v38 = sub_36478( v30,  v31,  v32,  v33,  v34,  v35,  v36,  v37,  v135,  v139,  v143,  v147,  v151,  v155,  v159,  v163,  v167,  v172,  v177,  v182,  v187,  v192,  v197,  v202,  v207,  v212,  v216,  v219);
    sub_36524( v38,  v39,  v40,  v41,  v42,  v43,  v44,  v45,  v136,  v140,  v144,  v148,  v152,  v156,  v160,  v164,  v168,  v173,  v178,  v183,  v188,  v193,  v198,  v203,  v208,  v213,  v217,  v220,  v222);
    sub_365DC();
    sub_366B8();
    sub_366B0();
    sub_366A8();
    sub_36814();
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  uint64_t v235 = v1 + 184;
  uint64_t v47 = *(void *)(v1 + 504);
  uint64_t v48 = *(void *)(v1 + 344);
  uint64_t v49 = *(void *)(v1 + 320);
  unsigned __int8 v50 = *(_BYTE *)(v1 + 600);
  (*(void (**)(void, void, void))(*(void *)(v1 + 360) + 32LL))( *(void *)(v1 + 368),  *(void *)(v1 + 416),  *(void *)(v1 + 352));
  String.toSpeakableString.getter(v47, v4);
  sub_249D4();
  sub_2A044(v50);
  sub_992AC();
  uint64_t v51 = sub_27CC8(v50);
  uint64_t v52 = (void *)(v48 + *(int *)(v49 + 20));
  *uint64_t v52 = v4;
  v52[1] = v47;
  uint64_t v53 = (uint64_t *)(v48 + *(int *)(v49 + 24));
  *uint64_t v53 = v51;
  v53[1] = v54;
  id v55 = sub_56344(v51, "minimum");
  double v57 = v56;
  uint64_t v58 = (uint64_t)sub_56344((uint64_t)v55, "maximum");
  double v60 = v59;
  if (v57 != v59)
  {
    unsigned __int8 v61 = *(_BYTE *)(v1 + 600);
    sub_566D0(v58, "average");
    double v63 = v62 * 100.0;
    uint64_t v64 = sub_568FC();
    sub_90668(v64, v65, v61, v63);
    uint64_t v58 = sub_249D4();
  }

  char v214 = v57 == v60;
  uint64_t v194 = *(void *)(v1 + 528);
  uint64_t v199 = *(void *)(v1 + 536);
  uint64_t v66 = *(void *)(v1 + 472);
  uint64_t v204 = *(void *)(v1 + 440);
  uint64_t v209 = *(void *)(v1 + 448);
  uint64_t v67 = *(void *)(v1 + 408);
  uint64_t v169 = *(void *)(v1 + 360);
  uint64_t v174 = *(void *)(v1 + 368);
  uint64_t v179 = *(void *)(v1 + 344);
  uint64_t v184 = *(void *)(v1 + 320);
  uint64_t v189 = *(void *)(v1 + 312);
  uint64_t v227 = *(void *)(v1 + 304);
  uint64_t v69 = *(void *)(v1 + 272);
  uint64_t v68 = *(void *)(v1 + 280);
  uint64_t v223 = *(os_log_s **)(v1 + 264);
  uint64_t v218 = *(void *)(v1 + 224);
  uint64_t v225 = *(void *)(v1 + 216);
  sub_36F04(v58, "maximum");
  uint64_t v70 = sub_992E4();
  sub_990B8(v70, v71);
  uint64_t v72 = sub_82234();
  sub_36F04(v72, "minimum");
  uint64_t v73 = sub_992E4();
  sub_990B8(v73, v74);
  uint64_t v75 = sub_82234();
  sub_36F04(v75, "mostRecent");
  uint64_t v76 = sub_992E4();
  os_log_type_t v78 = COERCE_UNSIGNED_INT64(sub_990B8(v76, v77));
  sub_369F4();
  sub_994D8(v66);
  sub_1EBF4();
  sub_ABF4();
  sub_99194();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v79, v80, v81, v82);
  sub_23360(v67, v174, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v169 + 16));
  sub_990C4(v67);
  sub_98DE0(v179, v69, type metadata accessor for SnippetHeaderModel);
  sub_99194();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v83, v84, v85, v184);
  uint64_t v86 = sub_12D168(v214, 0, 0, 0, v189, v204, v209, v68, v67, v194, v199, v69);
  uint64_t v87 = Logger.wellness.unsafeMutableAddressor(v86);
  *(void *)(v1 + 54sub_D878(v0 + 4) = v87;
  sub_A5DC(v87, v1 + 80);
  uint64_t v88 = *(void (**)(os_log_s *, uint64_t, uint64_t))(v218 + 16);
  *(void *)(v1 + 55_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v88;
  uint64_t v89 = v223;
  v88(v223, v87, v225);
  sub_98DE0(v189, v227, type metadata accessor for OxygenSaturationQueryModel);
  Logger.logObject.getter(v90);
  os_log_type_t v91 = sub_AB70();
  BOOL v92 = sub_46614(v91);
  uint64_t v93 = *(void *)(v1 + 304);
  if (v92)
  {
    uint64_t v94 = *(void *)(v1 + 296);
    uint64_t v221 = *(void *)(v1 + 288);
    uint64_t v228 = *(void *)(v1 + 264);
    uint64_t v224 = *(void *)(v1 + 224);
    uint64_t v226 = *(void *)(v1 + 216);
    uint64_t v95 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v230 = v88;
    uint64_t v96 = sub_A5E8(32LL);
    v237[0] = v96;
    *(_DWORD *)uint64_t v95 = 136315138;
    sub_991E4(v96, v97, type metadata accessor for OxygenSaturationQueryModel);
    uint64_t v98 = String.init<A>(describing:)(v94, v221);
    *(void *)(v1 + 18sub_D878(v0 + 4) = sub_39178(v98, v99, v237);
    sub_9933C(v235, v1 + 192, (uint64_t)(v95 + 4));
    swift_bridgeObjectRelease();
    sub_26F04(v93, type metadata accessor for OxygenSaturationQueryModel);
    sub_DA24(&dword_0, v89, v78, "Query snippet model is: %s", v95);
    sub_A81C(v96);
    uint64_t v100 = v96;
    uint64_t v88 = v230;
    sub_5050(v100);
    sub_5050((uint64_t)v95);

    uint64_t v101 = *(void (**)(uint64_t, uint64_t))(v224 + 8);
    v101(v228, v226);
  }

  else
  {
    uint64_t v102 = *(void *)(v1 + 224);
    sub_990D4(v92, type metadata accessor for OxygenSaturationQueryModel);

    uint64_t v101 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
    uint64_t v103 = sub_372A0();
    v101(v103, v104);
  }

  *(void *)(v1 + 560) = v101;
  uint64_t v105 = *(os_log_s **)(v1 + 344);
  uint64_t v106 = *(void *)(v1 + 256);
  uint64_t v107 = *(void *)(v1 + 216);
  sub_A5DC(v87, v1 + 104);
  uint64_t v108 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v88)(v106, v87, v107);
  sub_99188(v108, v109, type metadata accessor for SnippetHeaderModel);
  sub_A86C();
  os_log_type_t v110 = sub_AB70();
  BOOL v111 = sub_A634(v110);
  uint64_t v112 = *(void *)(v1 + 336);
  if (v111)
  {
    uint64_t v231 = *(void *)(v1 + 216);
    uint64_t v233 = *(void *)(v1 + 256);
    uint64_t v113 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v229 = v101;
    uint64_t v114 = sub_A5E8(32LL);
    v237[0] = v114;
    *(_DWORD *)uint64_t v113 = 136315138;
    sub_99578(v114, v115, type metadata accessor for SnippetHeaderModel);
    uint64_t v116 = sub_99304();
    *(void *)(v1 + 17sub_D878(v0 + 6) = sub_39178(v116, v117, v237);
    sub_994F0(v1 + 176, v235, (uint64_t)(v113 + 4));
    sub_2A184();
    sub_26F04(v112, type metadata accessor for SnippetHeaderModel);
    sub_DA24(&dword_0, v105, (os_log_type_t)v87, "Query snippet header model is: %s", v113);
    sub_A81C(v114);
    sub_5050(v114);
    sub_5050((uint64_t)v113);

    v229(v233, v231);
  }

  else
  {
    sub_991F0(v111, type metadata accessor for SnippetHeaderModel);

    sub_995CC();
  }

  if (qword_189AF0 != -1) {
    swift_once(&qword_189AF0, sub_920C8);
  }
  uint64_t v118 = *(void *)(v1 + 456);
  uint64_t v119 = *(void *)(v1 + 432);
  uint64_t v120 = *(void *)(v1 + 312);
  uint64_t v121 = *(int **)(v1 + 288);
  *(void *)(v1 + 56_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = qword_19C348;
  uint64_t v122 = v121[7];
  uint64_t v123 = (uint64_t *)(v120 + v121[8]);
  uint64_t v124 = *v123;
  unsigned int v234 = *((unsigned __int8 *)v123 + 8);
  uint64_t v232 = *(void *)(v120 + v122);
  unsigned int v236 = *(unsigned __int8 *)(v120 + v122 + 8);
  uint64_t v125 = (uint64_t *)(v120 + v121[6]);
  uint64_t v126 = *v125;
  uint64_t v127 = *((unsigned __int8 *)v125 + 8);
  uint64_t v128 = (uint64_t *)(v120 + v121[5]);
  uint64_t v129 = *v128;
  char v130 = *((_BYTE *)v128 + 8);
  uint64_t v131 = dword_18DBAC;
  sub_372CC();
  sub_4195C();
  sub_363E8();
  uint64_t v132 = (void *)swift_task_alloc(v131);
  *(void *)(v1 + 57sub_D878(v0 + 6) = v132;
  *uint64_t v132 = v1;
  v132[1] = sub_942F8;
  uint64_t v239 = v118;
  char v238 = v130;
  return sub_9D944(v119, v124, v234, v232, v236, v126, v127, v129);
}

uint64_t sub_942F8()
{
  if (v1) {
    sub_36860();
  }
  else {
    *(void *)(v2 + 58sub_D878(v0 + 4) = v0;
  }
  sub_A964();
  return sub_D954();
}

uint64_t sub_94374()
{
  uint64_t v1 = sub_370D4();
  unint64_t v2 = sub_99228(v1);
  uint64_t v3 = sub_991D8(v2);
  sub_9921C((uint64_t)v3, v4, type metadata accessor for OxygenSaturationQueryModel);
  uint64_t v5 = sub_993B4();
  swift_storeEnumTagMultiPayload(v5, v6, 0LL);
  uint64_t v7 = (void *)swift_task_alloc(dword_18B6FC);
  *(void *)(v0 + 59_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_943F0;
  sub_99520();
  return sub_990A8(v8, v9, v10);
}

uint64_t sub_943F0()
{
  return sub_A5D0();
}

#error "944B8: call analysis failed (funcsize=45)"
#error "945F0: call analysis failed (funcsize=73)"
uint64_t sub_94620(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t Model;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  *(void *)(v4 + 18sub_D878(v0 + 4) = a3;
  *(void *)(v4 + 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a4;
  *(_BYTE *)(v4 + 64_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a2;
  *(void *)(v4 + 17sub_D878(v0 + 6) = a1;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  *(void *)(v4 + 200) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v4 + 20_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v6;
  uint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v4 + 21sub_D878(v0 + 6) = swift_task_alloc(v7);
  *(void *)(v4 + 22sub_D878(v0 + 4) = swift_task_alloc(v7);
  *(void *)(v4 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = swift_task_alloc(v7);
  *(void *)(v4 + sub_A304(v0 - 176, v0 - 240) = swift_task_alloc(v7);
  uint64_t v8 = sub_494C(&qword_18A1A8);
  *(void *)(v4 + 24_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = (*(void *)(*(void *)(sub_494C(&qword_189D00) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v4 + 2sub_D7EC(v0 + 16, v0 + 56) = swift_task_alloc(v9);
  *(void *)(v4 + 26sub_D878(v0 + 4) = swift_task_alloc(v9);
  uint64_t Model = type metadata accessor for GenericQueryModel(0LL);
  *(void *)(v4 + 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = Model;
  uint64_t v11 = (*(void *)(*(void *)(Model - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v4 + 280) = swift_task_alloc(v11);
  *(void *)(v4 + 28_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = swift_task_alloc(v11);
  *(void *)(v4 + 29sub_D878(v0 + 6) = swift_task_alloc(v11);
  uint64_t v12 = type metadata accessor for SnippetHeaderModel(0LL);
  *(void *)(v4 + 30sub_D878(v0 + 4) = v12;
  uint64_t v13 = (*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v4 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = swift_task_alloc(v13);
  *(void *)(v4 + 320) = swift_task_alloc(v13);
  *(void *)(v4 + 32_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = swift_task_alloc(v13);
  uint64_t v14 = sub_494C(&qword_18B4C8);
  *(void *)(v4 + 33sub_D878(v0 + 6) = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  *(void *)(v4 + 34sub_D878(v0 + 4) = v15;
  uint64_t v16 = (*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v4 + 35_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = swift_task_alloc(v16);
  *(void *)(v4 + 360) = swift_task_alloc(v16);
  *(void *)(v4 + 36_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = swift_task_alloc(v16);
  *(void *)(v4 + 37sub_D878(v0 + 6) = swift_task_alloc(v16);
  *(void *)(v4 + 38sub_D878(v0 + 4) = swift_task_alloc(v16);
  uint64_t v17 = type metadata accessor for URL(0LL);
  *(void *)(v4 + 39_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  *(void *)(v4 + 400) = v18;
  *(void *)(v4 + 40_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = swift_task_alloc((*(void *)(v18 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for Date(0LL);
  *(void *)(v4 + 41sub_D878(v0 + 6) = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  *(void *)(v4 + 42sub_D878(v0 + 4) = v20;
  *(void *)(v4 + 43_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = swift_task_alloc((*(void *)(v20 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_494C(&qword_189CE8);
  *(void *)(v4 + 440) = swift_task_alloc((*(void *)(*(void *)(v21 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = (*(void *)(*(void *)(sub_494C(&qword_189CF8) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v4 + 44_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = swift_task_alloc(v22);
  *(void *)(v4 + 4sub_D7EC(v0 + 16, v0 + 56) = swift_task_alloc(v22);
  *(void *)(v4 + 46sub_D878(v0 + 4) = swift_task_alloc(v22);
  return swift_task_switch(sub_9489C, 0LL, 0LL);
}

uint64_t sub_9489C()
{
  uint64_t v1 = v0[58];
  unint64_t v2 = (void *)v0[23];
  uint64_t v3 = (void *)v0[24];
  sub_99600();
  uint64_t v5 = v4;
  v0[59] = v4;
  sub_997C8(v3, v1);
  uint64_t v6 = sub_99DB4(v3);
  v0[60] = v6;
  id v7 = [v2 start];
  uint64_t v10 = v0[55];
  if (v7)
  {
    uint64_t v11 = v7;
    uint64_t v13 = v0[53];
    uint64_t v12 = v0[54];
    uint64_t v14 = v0[52];
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v7);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v10, v12, v14);
    sub_99010();
    if (!v15) {
      goto LABEL_6;
    }
  }

  else
  {
    sub_99114(0LL, v8, v9, v0[52]);
  }

  LOBYTE(v10) = 1;
LABEL_6:
  sub_279E0(v0[55], &qword_189CE8);
  uint64_t v16 = (void *)swift_task_alloc(dword_18B70C);
  v0[61] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_94998;
  return sub_99144(v6, v10, v5);
}

uint64_t sub_94998()
{
  *(void *)(v2 + 49sub_D878(v0 + 6) = v0;
  *(void *)(v2 + 50sub_D878(v0 + 4) = v1;
  sub_36900(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_949D4()
{
  *(void *)(v0 + 51_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v1;
  uint64_t v2 = (void *)swift_task_alloc(dword_18B704);
  *(void *)(v0 + 520) = v2;
  uint64_t v3 = sub_36E5C(v2, (uint64_t)sub_94A1C);
  return sub_366DC(v3, v4);
}

uint64_t sub_94A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 520);
  *(void *)(v3 + 52_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a1;
  *(void *)(v3 + 53sub_D878(v0 + 6) = a2;
  sub_36900(v4);
  sub_249D4();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_94A74()
{
  unsigned __int8 v1 = *(_BYTE *)(v0 + 648);
  sub_50DA4(*(void **)(v0 + 192));
  uint64_t v2 = sub_568FC();
  *(double *)(v0 + 54sub_D878(v0 + 4) = sub_56734(v2, v3, v1);
  sub_249D4();
  uint64_t v4 = (void *)swift_task_alloc(dword_18B6EC);
  *(void *)(v0 + 55_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v4;
  uint64_t v5 = sub_99064(v4, (uint64_t)sub_94AE8);
  return sub_5E408(v5, v6);
}

uint64_t sub_94AE8()
{
  *(void *)(v1 + 560) = v0;
  *(void *)(v1 + 56_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v2;
  sub_36900(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_94B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 536);
  if (!v3 || !*(void *)(v2 + 504)) {
    goto LABEL_6;
  }
  sub_993F0(*(void *)(v2 + 464), a2, &qword_189CF8);
  sub_99124();
  if (!v4)
  {
    (*(void (**)(void, void, void))(*(void *)(v2 + 400) + 32LL))( *(void *)(v2 + 408),  *(void *)(v2 + 456),  *(void *)(v2 + 392));
    uint64_t v57 = sub_568FC();
    if (v58)
    {
      if (*(void *)(v2 + 568))
      {
        uint64_t v59 = v57;
        uint64_t v267 = *(void *)(v2 + 528);
        uint64_t v243 = *(void *)(v2 + 360);
        uint64_t v246 = *(void *)(v2 + 352);
        uint64_t v249 = *(void *)(v2 + 368);
        uint64_t v60 = *(void *)(v2 + 336);
        uint64_t v253 = *(void *)(v2 + 344);
        uint64_t v259 = *(void *)(v2 + 328);
        uint64_t v269 = *(void *)(v2 + 304);
        unsigned __int8 v61 = *(void **)(v2 + 192);
        unsigned __int8 v263 = *(_BYTE *)(v2 + 648);
        uint64_t v62 = v58;
        unint64_t v63 = sub_98E0C();
        swift_bridgeObjectRetain(v62);
        uint64_t v237 = v59;
        uint64_t v271 = v62;
        id v64 = sub_9205C();
        *(void *)(v2 + 57sub_D878(v0 + 6) = v64;
        [v61 minimum];
        double v66 = v65;
        id v67 = v64;
        Measurement.init(value:unit:)(v67, v63, v66);
        [v61 maximum];
        double v69 = v68;
        id v273 = v67;
        Measurement.init(value:unit:)(v273, v63, v69);
        uint64_t v70 = (void *)objc_opt_self(&OBJC_CLASS___NSUnitMass);
        id v71 = [v70 poundsMass];
        Measurement<>.converted(to:)();

        id v72 = [v70 poundsMass];
        Measurement<>.converted(to:)();

        static Measurement<>.- infix(_:_:)(v243, v246, v63);
        uint64_t v73 = *(void *)(v253 + 8);
        *(void *)(v2 + 58sub_D878(v0 + 4) = v73;
        sub_994E8(v246);
        sub_994E8(v243);
        double v74 = Measurement.value.getter(v60);
        sub_994E8(v249);
        String.toSpeakableString.getter(v267, v3);
        swift_bridgeObjectRelease();
        sub_2A044(v263);
        sub_992AC();
        uint64_t v75 = sub_27CC8(v263);
        uint64_t v76 = (uint64_t *)(v259 + *(int *)(v269 + 20));
        *uint64_t v76 = v249;
        v76[1] = v73;
        uint64_t v77 = (uint64_t *)(v259 + *(int *)(v269 + 24));
        *uint64_t v77 = v75;
        v77[1] = v78;
        id v79 = sub_566D0(v75, "minimum");
        double v81 = v80;
        uint64_t v82 = (uint64_t)sub_566D0((uint64_t)v79, "maximum");
        double v84 = v83;
        if (v81 != v83)
        {
          unsigned __int8 v85 = *(_BYTE *)(v2 + 648);
          [*(id *)(v2 + 192) minimum];
          double v87 = v86;
          swift_bridgeObjectRetain(v271);
          sub_90668(v237, v271, v85, v87);
          uint64_t v82 = sub_6D64();
        }

        uint64_t v268 = v2 + 168;
        id v88 = sub_566D0(v82, "minimum");
        double v90 = v89;
        sub_566D0((uint64_t)v88, "maximum");
        double v92 = v91;
        if (v90 == v91)
        {
          swift_bridgeObjectRelease();
        }

        else
        {
          unsigned __int8 v93 = *(_BYTE *)(v2 + 648);
          [*(id *)(v2 + 192) maximum];
          sub_90668(v237, v271, v93, v94);
          sub_2A184();
        }

        uint64_t v272 = *(void *)(v2 + 568);
        uint64_t v95 = *(void *)(v2 + 544);
        uint64_t v96 = *(void *)(v2 + 496);
        uint64_t v97 = *(void *)(v2 + 448);
        uint64_t v98 = *(void *)(v2 + 400);
        uint64_t v202 = *(void *)(v2 + 408);
        uint64_t v99 = *(void *)(v2 + 392);
        uint64_t v217 = *(void *)(v2 + 328);
        uint64_t v222 = *(void *)(v2 + 304);
        uint64_t v227 = *(void *)(v2 + 296);
        uint64_t v232 = *(void *)(v2 + 560);
        uint64_t v256 = *(void *)(v2 + 288);
        uint64_t v100 = *(void *)(v2 + 264);
        uint64_t v101 = *(void *)(v2 + 248);
        uint64_t v244 = *(void *)(v2 + 208);
        uint64_t v247 = *(os_log_s **)(v2 + 240);
        uint64_t v250 = *(void *)(v2 + 200);
        id v102 = [v273 symbol];
        uint64_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(v102);
        uint64_t v207 = v104;
        uint64_t v212 = v103;

        sub_994D8(v96);
        sub_1EBF4();
        sub_ABF4();
        sub_99194();
        uint64_t v270 = v105;
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v106, v107, v108, v105);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v98 + 16))(v97, v202, v99);
        sub_994AC(v97);
        sub_98DE0(v217, v101, type metadata accessor for SnippetHeaderModel);
        sub_99194();
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v109, v110, v111, v222);
        uint64_t v112 = sub_FB548(v95, 0, v81 == v84, v90 == v92, 1, v227, 0LL, 1, v212, v207, v100, v97, v232, v272, v101);
        uint64_t v113 = Logger.wellness.unsafeMutableAddressor(v112);
        *(void *)(v2 + 59_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v113;
        sub_A5DC(v113, v2 + 80);
        uint64_t v114 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v244 + 16);
        *(void *)(v2 + 600) = v114;
        uint64_t v266 = v114;
        v114((uint64_t)v247, v113, v250);
        sub_98DE0(v227, v256, type metadata accessor for GenericQueryModel);
        Logger.logObject.getter(v115);
        os_log_type_t v116 = sub_AB70();
        BOOL v117 = sub_46614(v116);
        uint64_t v118 = *(void *)(v2 + 288);
        if (v117)
        {
          uint64_t v119 = *(void *)(v2 + 280);
          uint64_t v251 = *(void *)(v2 + 272);
          uint64_t v254 = *(void *)(v2 + 208);
          uint64_t v257 = *(void *)(v2 + 200);
          uint64_t v260 = *(void *)(v2 + 240);
          uint64_t v120 = (uint8_t *)sub_A5E8(12LL);
          uint64_t v121 = sub_A5E8(32LL);
          v274[0] = v121;
          *(_DWORD *)uint64_t v120 = 136315138;
          sub_98DE0(v118, v119, type metadata accessor for GenericQueryModel);
          uint64_t v122 = String.init<A>(describing:)(v119, v251);
          *(void *)(v2 + 16_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_39178(v122, v123, v274);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v268, v2 + 176, v120 + 4, v120 + 12);
          sub_1EBF4();
          sub_26F04(v118, type metadata accessor for GenericQueryModel);
          sub_DA24(&dword_0, v247, (os_log_type_t)v102, "Query snippet model is: %s", v120);
          sub_A81C(v121);
          sub_5050(v121);
          sub_5050((uint64_t)v120);

          uint64_t v124 = *(void (**)(uint64_t, uint64_t))(v254 + 8);
          v124(v260, v257);
        }

        else
        {
          uint64_t v125 = *(void *)(v2 + 208);
          sub_990D4(v117, type metadata accessor for GenericQueryModel);

          uint64_t v124 = *(void (**)(uint64_t, uint64_t))(v125 + 8);
          uint64_t v126 = sub_372A0();
          v124(v126, v127);
        }

        *(void *)(v2 + 60_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v124;
        uint64_t v128 = *(os_log_s **)(v2 + 328);
        uint64_t v129 = *(void *)(v2 + 232);
        uint64_t v130 = *(void *)(v2 + 200);
        sub_A5DC(v113, v2 + 104);
        uint64_t v131 = v266(v129, v113, v130);
        sub_99188(v131, v132, type metadata accessor for SnippetHeaderModel);
        sub_A86C();
        os_log_type_t v133 = sub_AB70();
        BOOL v134 = sub_46614(v133);
        uint64_t v135 = *(void *)(v2 + 320);
        if (v134)
        {
          uint64_t v264 = *(void *)(v2 + 232);
          uint64_t v261 = *(void *)(v2 + 200);
          uint64_t v136 = (uint8_t *)sub_A5E8(12LL);
          uint64_t v137 = sub_A5E8(32LL);
          v274[0] = v137;
          *(_DWORD *)uint64_t v136 = 136315138;
          sub_991E4(v137, v138, type metadata accessor for SnippetHeaderModel);
          uint64_t v139 = sub_99304();
          *(void *)(v2 + 160) = sub_39178(v139, v140, v274);
          sub_9933C(v2 + 160, v268, (uint64_t)(v136 + 4));
          sub_2A184();
          sub_26F04(v135, type metadata accessor for SnippetHeaderModel);
          sub_DA24(&dword_0, v128, (os_log_type_t)v102, "Query snippet header model is: %s", v136);
          sub_A81C(v137);
          sub_5050(v137);
          sub_5050((uint64_t)v136);

          v124(v264, v261);
        }

        else
        {
          sub_990D4(v134, type metadata accessor for SnippetHeaderModel);

          sub_995D8();
        }

        if (qword_189AF0 != -1) {
          swift_once(&qword_189AF0, sub_920C8);
        }
        uint64_t v141 = *(void *)(v2 + 480);
        uint64_t v142 = *(void **)(v2 + 192);
        *(void *)(v2 + 61sub_D878(v0 + 6) = qword_19C348;
        sub_363E8();
        sub_4195C();
        [v142 minimum];
        [v142 maximum];
        id v143 = [v273 symbol];
        uint64_t v144 = static String._unconditionallyBridgeFromObjectiveC(_:)(v143);

        sub_995A8(v144);
        sub_82234();
        sub_99194();
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v145, v146, v147, v270);
        uint64_t v148 = dword_18DC5C;
        sub_372CC();
        uint64_t v149 = (void *)swift_task_alloc(v148);
        *(void *)(v2 + 62sub_D878(v0 + 4) = v149;
        *uint64_t v149 = v2;
        v149[1] = sub_955CC;
        uint64_t v276 = v141;
        BOOL v275 = v74 < 0.5;
        sub_99538();
        return sub_A0108(v150, v151, v152, v153, v154, v155, v156, v157);
      }

      sub_99418();
      sub_36C34();
      sub_1EBF4();
      goto LABEL_7;
    }

    sub_99418();
    sub_36C34();
LABEL_6:
    swift_bridgeObjectRelease();
LABEL_7:
    uint64_t v6 = swift_bridgeObjectRelease();
    goto LABEL_8;
  }

  sub_36C34();
  sub_1EBF4();
  uint64_t v5 = sub_249D4();
  sub_36A94(v5, &qword_189CF8);
LABEL_8:
  uint64_t v7 = *(void *)(v2 + 200);
  uint64_t v8 = Logger.wellness.unsafeMutableAddressor(v6);
  sub_A5DC(v8, v2 + 56);
  sub_232F4();
  sub_23374();
  os_log_type_t v9 = sub_A898();
  if (sub_A988(v9))
  {
    uint64_t v10 = (_WORD *)sub_A5E8(2LL);
    sub_366C0(v10);
    sub_A940(&dword_0, v11, v12, "Couldn't create data or date dialog labels or deeplink or invalid unit");
    sub_5050(v7);
  }

  uint64_t v13 = *(void *)(v2 + 208);
  uint64_t v14 = *(void *)(v2 + 176);
  swift_release();

  sub_37034();
  uint64_t v15 = sub_AB64(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
  sub_72F7C(v15, &qword_189CF8);
  *(_OWORD *)uint64_t v14 = 0u;
  *(_OWORD *)(v14 + 1sub_D878(v0 + 6) = 0u;
  *(void *)(v14 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0LL;
  sub_99084();
  uint64_t v233 = v17;
  uint64_t v238 = v16;
  uint64_t v241 = *(void *)(v2 + 320);
  uint64_t v245 = *(void *)(v2 + 312);
  sub_99590();
  uint64_t v248 = v19;
  uint64_t v252 = v18;
  uint64_t v255 = *(void *)(v2 + 280);
  uint64_t v258 = *(void *)(v2 + 264);
  sub_9959C();
  uint64_t v262 = v21;
  uint64_t v265 = v20;
  swift_task_dealloc(v22);
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  sub_A78C();
  sub_A67C();
  uint64_t v23 = sub_A7C8();
  uint64_t v31 = sub_36430( v23,  v24,  v25,  v26,  v27,  v28,  v29,  v30,  v158,  v162,  v166,  v170,  v174,  v178,  v182,  v186,  v190,  v194,  v198,  v203,  v208,  v213,  v218,  v223,  v228,  v233);
  uint64_t v39 = sub_36428( v31,  v32,  v33,  v34,  v35,  v36,  v37,  v38,  v159,  v163,  v167,  v171,  v175,  v179,  v183,  v187,  v191,  v195,  v199,  v204,  v209,  v214,  v219,  v224,  v229,  v234,  v238);
  uint64_t v47 = sub_36478( v39,  v40,  v41,  v42,  v43,  v44,  v45,  v46,  v160,  v164,  v168,  v172,  v176,  v180,  v184,  v188,  v192,  v196,  v200,  v205,  v210,  v215,  v220,  v225,  v230,  v235,  v239,  v241);
  sub_36524( v47,  v48,  v49,  v50,  v51,  v52,  v53,  v54,  v161,  v165,  v169,  v173,  v177,  v181,  v185,  v189,  v193,  v197,  v201,  v206,  v211,  v216,  v221,  v226,  v231,  v236,  v240,  v242,  v245);
  swift_task_dealloc(v248);
  swift_task_dealloc(v252);
  swift_task_dealloc(v255);
  swift_task_dealloc(v258);
  swift_task_dealloc(v262);
  swift_task_dealloc(v265);
  sub_365EC();
  sub_365E4();
  sub_365DC();
  sub_366B8();
  sub_99538();
  return v55();
}

uint64_t sub_955CC(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v11 = v4;
  uint64_t v5 = sub_56254(*(void *)(v4 + 624), &v11);
  if (v1)
  {
    swift_release();
    sub_36EBC();
    sub_37034();
    uint64_t v6 = sub_36860();
    sub_72F7C(v6, &qword_189D00);
  }

  else
  {
    *(void *)(v4 + 63_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a1;
    sub_72F7C(v5, &qword_189D00);
    swift_release();
    sub_36EBC();
    sub_37034();
  }

  sub_A964();
  return swift_task_switch(v7, v8, v9);
}

uint64_t sub_9568C()
{
  uint64_t v1 = sub_370D4();
  unint64_t v2 = sub_99228(v1);
  uint64_t v3 = sub_991D8(v2);
  sub_9921C((uint64_t)v3, v4, type metadata accessor for GenericQueryModel);
  uint64_t v5 = sub_993B4();
  swift_storeEnumTagMultiPayload(v5, v6, 8LL);
  uint64_t v7 = (void *)swift_task_alloc(dword_18B6FC);
  *(void *)(v0 + 640) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_95708;
  sub_99520();
  return sub_990A8(v8, v9, v10);
}

uint64_t sub_95708()
{
  return sub_A5D0();
}

uint64_t sub_9574C()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 584);
  unint64_t v2 = *(void **)(v0 + 576);
  uint64_t v204 = *(void *)(v0 + 408);
  uint64_t v205 = *(void *)(v0 + 464);
  uint64_t v3 = *(void *)(v0 + 384);
  uint64_t v199 = *(void *)(v0 + 400);
  uint64_t v202 = *(void *)(v0 + 392);
  uint64_t v4 = *(void *)(v0 + 376);
  uint64_t v6 = *(void *)(v0 + 328);
  uint64_t v5 = *(void *)(v0 + 336);
  uint64_t v7 = *(void *)(v0 + 296);

  sub_3652C();
  sub_37034();

  sub_26F04(v7, type metadata accessor for GenericQueryModel);
  sub_26F04(v6, type metadata accessor for SnippetHeaderModel);
  v1(v4, v5);
  v1(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v199 + 8))(v204, v202);
  sub_279E0(v205, &qword_189CF8);
  sub_99084();
  uint64_t v124 = v9;
  uint64_t v136 = v8;
  uint64_t v147 = *(void *)(v0 + 320);
  uint64_t v157 = *(void *)(v0 + 312);
  sub_99590();
  uint64_t v166 = v11;
  uint64_t v174 = v10;
  uint64_t v181 = *(void *)(v0 + 280);
  uint64_t v187 = *(void *)(v0 + 264);
  sub_9959C();
  uint64_t v192 = v13;
  uint64_t v196 = v12;
  uint64_t v200 = *(void *)(v0 + 240);
  uint64_t v203 = *(void *)(v0 + 232);
  uint64_t v206 = *(void *)(v0 + 216);
  swift_task_dealloc(v14);
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  sub_A78C();
  sub_A67C();
  uint64_t v15 = sub_A7C8();
  uint64_t v23 = sub_AAD8(v15, v16, v17, v18, v19, v20, v21, v22, v112, v124);
  uint64_t v31 = sub_A888(v23, v24, v25, v26, v27, v28, v29, v30, v113, v125, v136);
  uint64_t v39 = sub_A854(v31, v32, v33, v34, v35, v36, v37, v38, v114, v126, v137, v147);
  uint64_t v47 = sub_A84C(v39, v40, v41, v42, v43, v44, v45, v46, v115, v127, v138, v148, v157);
  uint64_t v55 = sub_A844(v47, v48, v49, v50, v51, v52, v53, v54, v116, v128, v139, v149, v158, v166);
  uint64_t v63 = sub_A83C(v55, v56, v57, v58, v59, v60, v61, v62, v117, v129, v140, v150, v159, v167, v174);
  uint64_t v71 = sub_A95C(v63, v64, v65, v66, v67, v68, v69, v70, v118, v130, v141, v151, v160, v168, v175, v181);
  uint64_t v79 = sub_A954(v71, v72, v73, v74, v75, v76, v77, v78, v119, v131, v142, v152, v161, v169, v176, v182, v187);
  uint64_t v87 = sub_A938(v79, v80, v81, v82, v83, v84, v85, v86, v120, v132, v143, v153, v162, v170, v177, v183, v188, v192);
  uint64_t v95 = sub_A930( v87,  v88,  v89,  v90,  v91,  v92,  v93,  v94,  v121,  v133,  v144,  v154,  v163,  v171,  v178,  v184,  v189,  v193,  v196);
  uint64_t v103 = sub_A928( v95,  v96,  v97,  v98,  v99,  v100,  v101,  v102,  v122,  v134,  v145,  v155,  v164,  v172,  v179,  v185,  v190,  v194,  v197,  v200);
  sub_A920( v103,  v104,  v105,  v106,  v107,  v108,  v109,  v110,  v123,  v135,  v146,  v156,  v165,  v173,  v180,  v186,  v191,  v195,  v198,  v201,  v203);
  sub_A918();
  swift_task_dealloc(v206);
  return sub_990F8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_958C4()
{
  uint64_t v1 = (os_log_s *)sub_23374();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v224 = *(void (**)(uint64_t, uint64_t))(v0 + 608);
    uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0 + 584);
    uint64_t v206 = *(void **)(v0 + 576);
    uint64_t v141 = *(void *)(v0 + 480);
    uint64_t v183 = *(void *)(v0 + 472);
    sub_9915C();
    uint64_t v4 = *(void *)(v0 + 336);
    uint64_t v215 = *(void *)(v0 + 328);
    uint64_t v195 = *(void *)(v0 + 296);
    uint64_t v156 = *(void *)(v0 + 200);
    uint64_t v170 = *(void *)(v0 + 224);
    uint64_t v5 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v250 = sub_A5E8(32LL);
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v6 = sub_994D0();
    *(void *)(v0 + 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_D9D8(v6, v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v5 + 4, v5 + 12);
    sub_82234();
    sub_DA24(&dword_0, v1, v2, "Couldn't create dialog for %s", v5);
    sub_A81C(v250);
    sub_5050(v250);
    sub_5050((uint64_t)v5);

    swift_release();
    swift_release();

    v224(v170, v156);
    sub_26F04(v195, type metadata accessor for GenericQueryModel);
    sub_9955C( v8,  type metadata accessor for SnippetHeaderModel,  v9,  v10,  v11,  v12,  v13,  v14,  v141,  v156,  v170,  v183,  v195,  (uint64_t)v206,  v215);
    v3(v232, v4);
    v3(v238, v4);
  }

  else
  {
    uint64_t v225 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 608);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v0 + 584);
    uint64_t v16 = *(void **)(v0 + 576);
    sub_9915C();
    uint64_t v17 = *(void *)(v0 + 336);
    uint64_t v216 = *(void *)(v0 + 328);
    uint64_t v18 = *(void *)(v0 + 224);
    uint64_t v19 = *(void *)(v0 + 200);

    sub_37034();
    sub_367AC();

    uint64_t v20 = v225(v18, v19);
    sub_992F0(v20, type metadata accessor for GenericQueryModel);
    sub_9955C( v21,  type metadata accessor for SnippetHeaderModel,  v22,  v23,  v24,  v25,  v26,  v27,  v140,  v155,  v169,  v182,  v194,  v205,  v216);
    v15(v232, v17);
    v15(v238, v17);
  }

  uint64_t v28 = (*(uint64_t (**)())(v243 + 8))();
  sub_99564(v28, &qword_189CF8);
  uint64_t v29 = *(void *)(v0 + 176);
  *(void *)(v29 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0LL;
  *(_OWORD *)uint64_t v29 = 0u;
  *(_OWORD *)(v29 + 1sub_D878(v0 + 6) = 0u;
  sub_99084();
  sub_994BC();
  sub_99590();
  uint64_t v196 = v31;
  uint64_t v207 = v30;
  uint64_t v217 = *(void *)(v0 + 280);
  uint64_t v226 = *(void *)(v0 + 264);
  sub_9959C();
  uint64_t v233 = v33;
  uint64_t v239 = v32;
  uint64_t v244 = *(void *)(v0 + 240);
  uint64_t v247 = *(void *)(v0 + 232);
  uint64_t v249 = *(void *)(v0 + 224);
  swift_task_dealloc(v34);
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  sub_A78C();
  sub_A67C();
  uint64_t v35 = sub_A7C8();
  uint64_t v43 = sub_A970(v35, v36, v37, v38, v39, v40, v41, v42, v142);
  uint64_t v51 = sub_AAD8(v43, v44, v45, v46, v47, v48, v49, v50, v143, v157);
  uint64_t v59 = sub_A888(v51, v52, v53, v54, v55, v56, v57, v58, v144, v158, v171);
  uint64_t v67 = sub_A854(v59, v60, v61, v62, v63, v64, v65, v66, v145, v159, v172, v184);
  uint64_t v75 = sub_A84C(v67, v68, v69, v70, v71, v72, v73, v74, v146, v160, v173, v185, v196);
  uint64_t v83 = sub_A844(v75, v76, v77, v78, v79, v80, v81, v82, v147, v161, v174, v186, v197, v207);
  uint64_t v91 = sub_A83C(v83, v84, v85, v86, v87, v88, v89, v90, v148, v162, v175, v187, v198, v208, v217);
  uint64_t v99 = sub_A95C(v91, v92, v93, v94, v95, v96, v97, v98, v149, v163, v176, v188, v199, v209, v218, v226);
  uint64_t v107 = sub_A954(v99, v100, v101, v102, v103, v104, v105, v106, v150, v164, v177, v189, v200, v210, v219, v227, v233);
  uint64_t v115 = sub_A938( v107,  v108,  v109,  v110,  v111,  v112,  v113,  v114,  v151,  v165,  v178,  v190,  v201,  v211,  v220,  v228,  v234,  v239);
  uint64_t v123 = sub_A930( v115,  v116,  v117,  v118,  v119,  v120,  v121,  v122,  v152,  v166,  v179,  v191,  v202,  v212,  v221,  v229,  v235,  v240,  v244);
  uint64_t v131 = sub_A928( v123,  v124,  v125,  v126,  v127,  v128,  v129,  v130,  v153,  v167,  v180,  v192,  v203,  v213,  v222,  v230,  v236,  v241,  v245,  v247);
  sub_A920( v131,  v132,  v133,  v134,  v135,  v136,  v137,  v138,  v154,  v168,  v181,  v193,  v204,  v214,  v223,  v231,  v237,  v242,  v246,  v248,  v249);
  sub_A918();
  return sub_990F8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_95BC8(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 22sub_D878(v0 + 4) = a3;
  *(void *)(v4 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a4;
  *(_BYTE *)(v4 + 64_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a2;
  *(void *)(v4 + 21sub_D878(v0 + 6) = a1;
  uint64_t v5 = sub_D984();
  *(void *)(v4 + sub_A304(v0 - 176, v0 - 240) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v4 + 24_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v6;
  *(void *)(v4 + 2sub_D7EC(v0 + 16, v0 + 56) = sub_D8CC(v6);
  *(void *)(v4 + 26sub_D878(v0 + 4) = sub_A5B8();
  *(void *)(v4 + 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_A5B8();
  *(void *)(v4 + 280) = sub_A5B8();
  *(void *)(v4 + 28_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_A5B8();
  uint64_t v7 = sub_494C(&qword_18A1A8);
  *(void *)(v4 + 29sub_D878(v0 + 6) = sub_A5C0(*(void *)(v7 - 8));
  uint64_t v8 = sub_494C(&qword_189D00);
  *(void *)(v4 + 30sub_D878(v0 + 4) = sub_D8CC(*(void *)(v8 - 8));
  *(void *)(v4 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_A5B8();
  *(void *)(v4 + 320) = sub_A5B8();
  uint64_t Model = type metadata accessor for GenericQueryModel(0LL);
  *(void *)(v4 + 32_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = Model;
  *(void *)(v4 + 33sub_D878(v0 + 6) = sub_D8CC(*(void *)(Model - 8));
  *(void *)(v4 + 34sub_D878(v0 + 4) = sub_A5B8();
  *(void *)(v4 + 35_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_A5B8();
  uint64_t v10 = sub_995B0();
  *(void *)(v4 + 360) = v10;
  *(void *)(v4 + 36_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_D8CC(*(void *)(v10 - 8));
  *(void *)(v4 + 37sub_D878(v0 + 6) = sub_A5B8();
  *(void *)(v4 + 38sub_D878(v0 + 4) = sub_A5B8();
  uint64_t v11 = sub_3C798();
  *(void *)(v4 + 39_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v4 + 400) = v12;
  *(void *)(v4 + 40_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_A5C0(v12);
  uint64_t v13 = sub_A8E4();
  *(void *)(v4 + 41sub_D878(v0 + 6) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v4 + 42sub_D878(v0 + 4) = v14;
  *(void *)(v4 + 43_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_A5C0(v14);
  uint64_t v15 = sub_494C(&qword_189CE8);
  *(void *)(v4 + 440) = sub_A5C0(*(void *)(v15 - 8));
  uint64_t v16 = sub_494C(&qword_189CF8);
  *(void *)(v4 + 44_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_D8CC(*(void *)(v16 - 8));
  *(void *)(v4 + 4sub_D7EC(v0 + 16, v0 + 56) = sub_A5B8();
  *(void *)(v4 + 46sub_D878(v0 + 4) = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_95D30()
{
  uint64_t v1 = *(void *)(v0 + 464);
  os_log_type_t v2 = *(void **)(v0 + 232);
  sub_994A4();
  *(void *)(v0 + 47_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v3;
  sub_997C8(v2, v1);
  uint64_t v4 = (void *)swift_task_alloc(dword_18D9F4);
  *(void *)(v0 + 480) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_95DA4;
  return sub_99C00(*(_BYTE *)(v0 + 648));
}

uint64_t sub_95DA4()
{
  *(void *)(v2 + 48_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v0;
  *(void *)(v2 + 49sub_D878(v0 + 6) = v1;
  sub_36900(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_95DE0()
{
  uint64_t v1 = (void *)*(unsigned __int8 *)(v0 + 648);
  *(void *)(v0 + 50sub_D878(v0 + 4) = sub_99330();
  uint64_t v2 = sub_9A3FC(v1);
  *(void *)(v0 + 51_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v2;
  *(_BYTE *)(v0 + 649) = v3;
  id v4 = sub_373D8(v2, "start");
  uint64_t v5 = *(void *)(v0 + 440);
  if (v4)
  {
    uint64_t v6 = v4;
    uint64_t v8 = *(void *)(v0 + 424);
    uint64_t v7 = *(void *)(v0 + 432);
    uint64_t v9 = *(void *)(v0 + 416);
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v4);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v5, v7, v9);
    sub_37150(v5);
    _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1LL, v9);
  }

  else
  {
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 440), 1LL, 1LL, *(void *)(v0 + 416));
  }

  sub_279E0(*(void *)(v0 + 440), &qword_189CE8);
  uint64_t v10 = (void *)swift_task_alloc(dword_18B70C);
  *(void *)(v0 + 520) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_95EFC;
  sub_9950C();
  return sub_5EC2C(v11, v12, v13);
}

uint64_t sub_95EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 520);
  *(void *)(v3 + 52_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a1;
  *(void *)(v3 + 53sub_D878(v0 + 6) = a2;
  sub_36900(v4);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_95F4C()
{
  *(void *)(v0 + 54sub_D878(v0 + 4) = v1;
  uint64_t v2 = (void *)swift_task_alloc(dword_18B704);
  *(void *)(v0 + 55_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v2;
  uint64_t v3 = sub_36E5C(v2, (uint64_t)sub_95F94);
  return sub_366DC(v3, v4);
}

uint64_t sub_95F94()
{
  *(void *)(v1 + 560) = v0;
  *(void *)(v1 + 56_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v2;
  sub_36900(v3);
  sub_249D4();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_95FE0()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  *(void *)(v0 + 57sub_D878(v0 + 6) = v1;
  uint64_t v2 = sub_99064(v1, (uint64_t)sub_96018);
  return sub_36164(v2, v3);
}

uint64_t sub_96018()
{
  *(void *)(v1 + 58sub_D878(v0 + 4) = v0;
  *(void *)(v1 + 59_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v2;
  sub_36900(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_96058(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 568);
  uint64_t v4 = *(void *)(v2 + 536);
  if (v3 && v4)
  {
    sub_993F0(*(void *)(v2 + 464), a2, &qword_189CF8);
    sub_99124();
    if (!v5)
    {
      uint64_t v116 = *(void *)(v2 + 592);
      uint64_t v115 = *(void *)(v2 + 584);
      uint64_t v103 = v2 + 200;
      uint64_t v102 = v2 + 208;
      uint64_t v19 = *(void *)(v2 + 560);
      uint64_t v106 = *(void *)(v2 + 528);
      uint64_t v117 = *(void *)(v2 + 512);
      uint64_t v105 = *(void *)(v2 + 496);
      uint64_t v114 = *(void *)(v2 + 488);
      uint64_t v108 = *(void *)(v2 + 408);
      uint64_t v109 = *(void *)(v2 + 448);
      uint64_t v107 = *(void *)(v2 + 400);
      uint64_t v20 = *(void *)(v2 + 384);
      uint64_t v21 = *(void *)(v2 + 392);
      uint64_t v22 = *(void *)(v2 + 360);
      uint64_t v113 = *(void *)(v2 + 352);
      uint64_t v129 = *(void *)(v2 + 344);
      uint64_t v104 = *(void *)(v2 + 320);
      uint64_t v23 = *(void *)(v2 + 296);
      uint64_t v119 = *(void *)(v2 + 248);
      uint64_t v121 = *(os_log_s **)(v2 + 288);
      uint64_t v123 = *(void *)(v2 + 240);
      char v111 = *(_BYTE *)(v2 + 649) & 1;
      unsigned __int8 v24 = *(_BYTE *)(v2 + 648);
      (*(void (**)(void))(v107 + 32))();
      String.toSpeakableString.getter(v19, v3);
      sub_369F4();
      unint64_t v25 = sub_2A044(v24);
      unint64_t v27 = v26;
      uint64_t v28 = sub_994E0();
      uint64_t v29 = (unint64_t *)(v20 + *(int *)(v22 + 20));
      *uint64_t v29 = v25;
      v29[1] = v27;
      uint64_t v30 = (uint64_t *)(v20 + *(int *)(v22 + 24));
      *uint64_t v30 = v28;
      v30[1] = v31;
      sub_A60C(v28, "maximum");
      uint64_t v32 = sub_991CC();
      sub_990B8(v32, v33);
      uint64_t v34 = sub_2A184();
      sub_A60C(v34, "minimum");
      uint64_t v35 = sub_991CC();
      sub_990B8(v35, v36);
      uint64_t v37 = sub_2A184();
      sub_A60C(v37, "mostRecent");
      uint64_t v38 = sub_991CC();
      sub_990B8(v38, v39);
      uint64_t v40 = sub_2A184();
      sub_A60C(v40, "total");
      uint64_t v41 = sub_991CC();
      uint64_t v43 = sub_990B8(v41, v42);
      sub_2A184();
      swift_bridgeObjectRetain(v105);
      String.toSpeakableString.getter(v106, v4);
      sub_6D64();
      sub_ABF4();
      sub_990C4(v104);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 16))(v109, v108, v21);
      sub_99194();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v44, v45, v46, v21);
      sub_98DE0(v20, v23, type metadata accessor for SnippetHeaderModel);
      sub_994AC(v23);
      uint64_t v47 = sub_FB548(v117, v111, 0, 0, 0, v113, v43, 0, v114, v105, v104, v109, v115, v116, v23);
      uint64_t v48 = Logger.wellness.unsafeMutableAddressor(v47);
      *(void *)(v2 + 600) = v48;
      sub_A5DC(v48, v2 + 80);
      uint64_t v49 = *(void (**)(os_log_s *, uint64_t, uint64_t))(v119 + 16);
      *(void *)(v2 + 60_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v49;
      v49(v121, v48, v123);
      sub_98DE0(v113, v129, type metadata accessor for GenericQueryModel);
      Logger.logObject.getter(v50);
      os_log_type_t v51 = sub_AB70();
      BOOL v52 = sub_46614(v51);
      uint64_t v53 = *(void *)(v2 + 344);
      if (v52)
      {
        uint64_t v124 = *(void *)(v2 + 248);
        uint64_t v130 = *(void *)(v2 + 240);
        uint64_t v135 = *(void *)(v2 + 288);
        uint64_t v54 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v138 = sub_A5E8(32LL);
        *(_DWORD *)uint64_t v54 = 136315138;
        sub_992DC(v53, v55, type metadata accessor for GenericQueryModel);
        uint64_t v56 = sub_995E4();
        *(void *)(v2 + 20_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_992C4(v56, v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v102, v2 + 216, v54 + 4, v54 + 12);
        sub_6D64();
        sub_26F04(v53, type metadata accessor for GenericQueryModel);
        sub_DA24(&dword_0, v121, (os_log_type_t)v105, "Query snippet model is: %s", v54);
        sub_A81C(v138);
        sub_5050(v138);
        sub_5050((uint64_t)v54);

        uint64_t v58 = *(void (**)(uint64_t, uint64_t))(v124 + 8);
        v58(v135, v130);
      }

      else
      {
        uint64_t v59 = *(void *)(v2 + 248);
        sub_99450(v52, type metadata accessor for GenericQueryModel);

        uint64_t v58 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
        uint64_t v60 = sub_372A0();
        v58(v60, v61);
      }

      uint64_t v136 = v58;
      *(void *)(v2 + 61sub_D878(v0 + 6) = v58;
      uint64_t v62 = *(os_log_s **)(v2 + 384);
      uint64_t v63 = *(void *)(v2 + 280);
      uint64_t v64 = *(void *)(v2 + 240);
      sub_A5DC(v48, v2 + 104);
      uint64_t v65 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v49)(v63, v48, v64);
      sub_99188(v65, v66, type metadata accessor for SnippetHeaderModel);
      sub_A86C();
      os_log_type_t v67 = sub_AB70();
      BOOL v68 = sub_46614(v67);
      uint64_t v69 = *(void *)(v2 + 376);
      if (v68)
      {
        uint64_t v131 = *(void *)(v2 + 280);
        uint64_t v125 = *(void *)(v2 + 240);
        uint64_t v70 = (uint8_t *)sub_A5E8(12LL);
        uint64_t v139 = sub_A5E8(32LL);
        *(_DWORD *)uint64_t v70 = 136315138;
        sub_992DC(v69, v71, type metadata accessor for SnippetHeaderModel);
        uint64_t v72 = sub_995E4();
        *(void *)(v2 + 200) = sub_992C4(v72, v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v103, v102, v70 + 4, v70 + 12);
        sub_6D64();
        sub_26F04(v69, type metadata accessor for SnippetHeaderModel);
        sub_DA24(&dword_0, v62, (os_log_type_t)v105, "Query snippet header model is: %s", v70);
        sub_A81C(v139);
        sub_5050(v139);
        sub_5050((uint64_t)v70);

        uint64_t v75 = v125;
        uint64_t v74 = v131;
      }

      else
      {
        sub_99450(v68, type metadata accessor for SnippetHeaderModel);

        uint64_t v74 = sub_372A0();
      }

      v136(v74, v75);
      uint64_t v76 = *(os_log_s **)(v2 + 472);
      uint64_t v77 = *(os_log_s **)(v2 + 272);
      uint64_t v78 = *(void *)(v2 + 240);
      sub_A5DC(v48, v2 + 128);
      v49(v77, v48, v78);
      swift_retain_n(v76, 2LL);
      sub_23374();
      os_log_type_t v79 = sub_AB70();
      BOOL v80 = sub_46614(v79);
      uint64_t v81 = *(void *)(v2 + 472);
      if (v80)
      {
        uint64_t v132 = *(void *)(v2 + 240);
        uint64_t v126 = *(void *)(v2 + 272);
        uint64_t v82 = (uint8_t *)sub_A5E8(12LL);
        uint64_t v140 = sub_A5E8(32LL);
        *(_DWORD *)uint64_t v82 = 136315138;
        *(void *)(v2 + 18sub_D878(v0 + 4) = v81;
        uint64_t v83 = type metadata accessor for WellnessTime(0LL);
        swift_retain();
        uint64_t v84 = String.init<A>(describing:)(v2 + 184, v83);
        *(void *)(v2 + 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_992C4(v84, v85);
        sub_9933C(v2 + 192, v103, (uint64_t)(v82 + 4));
        sub_6D64();
        sub_9956C();
        sub_DA24(&dword_0, v76, (os_log_type_t)v105, "Query snippet wellness time is: %s", v82);
        sub_A81C(v140);
        sub_5050(v140);
        sub_5050((uint64_t)v82);

        v136(v126, v132);
      }

      else
      {
        sub_9956C();

        uint64_t v86 = sub_372A0();
        ((void (*)(uint64_t))v136)(v86);
      }

      uint64_t v87 = *(void *)(v2 + 352);
      uint64_t v88 = *(int **)(v2 + 328);
      uint64_t v89 = v87 + v88[9];
      uint64_t v137 = *(void *)v89;
      char v133 = *(_BYTE *)(v89 + 8);
      uint64_t v90 = v87 + v88[8];
      uint64_t v91 = *(void *)v90;
      char v127 = *(_BYTE *)(v90 + 8);
      uint64_t v92 = v87 + v88[7];
      uint64_t v120 = v91;
      uint64_t v122 = *(void *)v92;
      char v118 = *(_BYTE *)(v92 + 8);
      uint64_t v93 = (uint64_t *)(v87 + v88[16]);
      uint64_t v94 = v93[1];
      uint64_t v95 = *(void *)(v2 + 312);
      if (v94)
      {
        uint64_t v96 = *v93;
        sub_372CC();
        swift_bridgeObjectRetain(v94);
        sub_995A8(v96);
        sub_82234();
        sub_5F150(v95, 0LL);
      }

      else
      {
        sub_5F150(*(void *)(v2 + 312), 1LL);
        sub_372CC();
      }

      uint64_t v97 = *(void *)(v2 + 496);
      uint64_t v98 = *(void *)(v2 + 488);
      uint64_t v99 = *(void *)(v2 + 472);
      uint64_t v100 = *(void *)(v2 + 304);
      sub_363E8();
      String.toSpeakableString.getter(v98, v97);
      sub_6D64();
      sub_5F150(v100, 0LL);
      uint64_t v101 = (void *)swift_task_alloc(dword_18F72C);
      *(void *)(v2 + 62sub_D878(v0 + 4) = v101;
      *uint64_t v101 = v2;
      v101[1] = sub_96A54;
      return sub_E8F38(*(_BYTE *)(v2 + 648), v99, v137, v133, v120, v127, v122, v118);
    }

    swift_bridgeObjectRelease();
    sub_369F4();
    sub_6D64();
    uint64_t v6 = sub_249D4();
    sub_36A94(v6, &qword_189CF8);
  }

  else
  {
    sub_9952C();
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_249D4();
  }

  uint64_t v8 = *(void *)(v2 + 240);
  uint64_t v9 = Logger.wellness.unsafeMutableAddressor(v7);
  sub_A5DC(v9, v2 + 56);
  sub_232F4();
  sub_23374();
  os_log_type_t v10 = sub_A898();
  if (sub_A988(v10))
  {
    uint64_t v11 = (_WORD *)sub_A5E8(2LL);
    sub_366C0(v11);
    sub_A940(&dword_0, v12, v13, "Couldn't create data or date dialog labels or deeplink");
    sub_5050(v8);
  }

  uint64_t v14 = *(void *)(v2 + 248);
  uint64_t v15 = *(void *)(v2 + 216);
  swift_release();

  sub_37034();
  uint64_t v16 = sub_AB64(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
  sub_72F7C(v16, &qword_189CF8);
  *(_OWORD *)uint64_t v15 = 0u;
  *(_OWORD *)(v15 + 1sub_D878(v0 + 6) = 0u;
  *(void *)(v15 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0LL;
  uint64_t v110 = *(void *)(v2 + 344);
  uint64_t v112 = *(void *)(v2 + 336);
  sub_99590();
  uint64_t v128 = *(void *)(v2 + 264);
  uint64_t v134 = *(void *)(v2 + 256);
  swift_task_dealloc(v17);
  sub_A8F4();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  swift_task_dealloc(v110);
  swift_task_dealloc(v112);
  sub_365EC();
  sub_365E4();
  sub_365DC();
  sub_366B8();
  sub_366B0();
  sub_366A8();
  sub_36814();
  swift_task_dealloc(v128);
  swift_task_dealloc(v134);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_96A54(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 624);
  *(void *)(*v2 + 63_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a1;
  sub_36900(v4);
  sub_37034();
  sub_367AC();
  uint64_t v6 = *(void *)(v3 + 304);
  uint64_t v5 = *(void *)(v3 + 312);
  if (v1)
  {
    sub_36860();
    sub_464D0(v6);
  }

  else
  {
    sub_464D0(*(void *)(v3 + 304));
  }

  sub_464D0(v5);
  sub_A964();
  return sub_D954();
}

uint64_t sub_96B04()
{
  uint64_t v1 = *(void *)(v0 + 632);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 352);
    uint64_t v3 = sub_370D4();
    *(void *)(v0 + 40) = v3;
    *(void *)(v0 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_20168();
    uint64_t v4 = sub_B76C((void *)(v0 + 16));
    sub_98DE0(v2, (uint64_t)v4, type metadata accessor for GenericQueryModel);
    swift_storeEnumTagMultiPayload(v4, v3, 8LL);
    uint64_t v5 = (void *)swift_task_alloc(dword_18B6FC);
    *(void *)(v0 + 640) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_96DF8;
    return sub_5E844(*(void *)(v0 + 216), v0 + 16, v1);
  }

  else
  {
    sub_A5DC(*(void *)(v0 + 600), v0 + 152);
    sub_36170();
    uint64_t v7 = (os_log_s *)sub_23374();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    os_log_type_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 616);
    uint64_t v11 = *(void *)(v0 + 464);
    uint64_t v239 = *(void *)(v0 + 504);
    uint64_t v245 = *(void *)(v0 + 472);
    uint64_t v13 = *(void *)(v0 + 400);
    uint64_t v12 = *(void *)(v0 + 408);
    uint64_t v15 = *(void *)(v0 + 384);
    uint64_t v14 = *(void *)(v0 + 392);
    uint64_t v250 = *(void *)(v0 + 352);
    uint64_t v16 = *(void *)(v0 + 264);
    uint64_t v232 = *(void *)(v0 + 240);
    if (v9)
    {
      uint64_t v205 = *(void *)(v0 + 464);
      uint64_t v17 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v252 = sub_A5E8(32LL);
      *(_DWORD *)uint64_t v17 = 136315138;
      uint64_t v18 = sub_994E0();
      *(void *)(v0 + 17sub_D878(v0 + 6) = sub_D9D8(v18, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v17 + 4, v17 + 12);
      sub_36C34();
      sub_DA24(&dword_0, v7, v8, "Couldn't create dialog for %s", v17);
      sub_A81C(v252);
      sub_5050(v252);
      sub_5050((uint64_t)v17);

      uint64_t v20 = swift_release();
      sub_99440( v20,  v21,  v22,  v23,  v24,  v25,  v26,  v27,  v140,  v154,  v15,  v12,  (uint64_t)v10,  v205,  v13,  v14,  v232,  v239,  v245);
      uint64_t v28 = v194(v16, v233);
      sub_993AC( v28,  type metadata accessor for GenericQueryModel,  v29,  v30,  v31,  v32,  v33,  v34,  v141,  v155,  v169,  v182,  (uint64_t)v194,  v206,  v216,  v225,  v233,  v240,  v246,  v250);
      sub_26F04(v170, type metadata accessor for SnippetHeaderModel);
      (*(void (**)(uint64_t, uint64_t))(v217 + 8))(v183, v226);
      uint64_t v35 = v207;
    }

    else
    {

      uint64_t v36 = swift_release();
      sub_99440( v36,  v37,  v38,  v39,  v40,  v41,  v42,  v43,  v140,  v154,  v168,  v181,  v193,  v204,  v215,  v224,  v232,  v239,  v245);
      uint64_t v44 = v10(v16, v235);
      sub_993AC( v44,  type metadata accessor for GenericQueryModel,  v45,  v46,  v47,  v48,  v49,  v50,  v143,  v157,  v171,  v184,  v196,  v208,  v218,  v227,  v235,  v242,  v248,  v250);
      sub_990D4(v51, type metadata accessor for SnippetHeaderModel);
      sub_57E90();
      uint64_t v35 = v11;
    }

    sub_279E0(v35, &qword_189CF8);
    sub_98FA0();
    sub_A8F4();
    sub_A78C();
    sub_A67C();
    sub_A7C8();
    sub_A760();
    sub_A8EC();
    sub_A910();
    sub_A864();
    uint64_t v52 = sub_A85C();
    uint64_t v60 = sub_AAD8(v52, v53, v54, v55, v56, v57, v58, v59, v142, v156);
    uint64_t v68 = sub_A888(v60, v61, v62, v63, v64, v65, v66, v67, v144, v158, v170);
    uint64_t v76 = sub_A854(v68, v69, v70, v71, v72, v73, v74, v75, v145, v159, v172, v183);
    uint64_t v84 = sub_A84C(v76, v77, v78, v79, v80, v81, v82, v83, v146, v160, v173, v185, v195);
    uint64_t v92 = sub_A844(v84, v85, v86, v87, v88, v89, v90, v91, v147, v161, v174, v186, v197, v207);
    uint64_t v100 = sub_A83C(v92, v93, v94, v95, v96, v97, v98, v99, v148, v162, v175, v187, v198, v209, v217);
    uint64_t v108 = sub_A95C(v100, v101, v102, v103, v104, v105, v106, v107, v149, v163, v176, v188, v199, v210, v219, v226);
    uint64_t v116 = sub_A954( v108,  v109,  v110,  v111,  v112,  v113,  v114,  v115,  v150,  v164,  v177,  v189,  v200,  v211,  v220,  v228,  v234);
    uint64_t v124 = sub_A938( v116,  v117,  v118,  v119,  v120,  v121,  v122,  v123,  v151,  v165,  v178,  v190,  v201,  v212,  v221,  v229,  v236,  v241);
    uint64_t v132 = sub_A930( v124,  v125,  v126,  v127,  v128,  v129,  v130,  v131,  v152,  v166,  v179,  v191,  v202,  v213,  v222,  v230,  v237,  v243,  v247);
    sub_A928( v132,  v133,  v134,  v135,  v136,  v137,  v138,  v139,  v153,  v167,  v180,  v192,  v203,  v214,  v223,  v231,  v238,  v244,  v249,  v251);
    return sub_990DC(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_96DF8()
{
  return sub_A5D0();
}

#error "96F24: call analysis failed (funcsize=69)"
uint64_t sub_96F5C()
{
  uint64_t v0;
  os_log_s *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint8_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void (*v158)(uint64_t, uint64_t);
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  sub_A5DC(*(void *)(v0 + 600), v0 + 152);
  sub_36170();
  uint64_t v1 = (os_log_s *)sub_23374();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v176 = *(void *)(v0 + 408);
    uint64_t v178 = *(void *)(v0 + 464);
    uint64_t v169 = *(void *)(v0 + 400);
    uint64_t v173 = *(void *)(v0 + 392);
    uint64_t v158 = *(void (**)(uint64_t, uint64_t))(v0 + 616);
    uint64_t v164 = *(void *)(v0 + 384);
    uint64_t v143 = *(void *)(v0 + 472);
    uint64_t v151 = *(void *)(v0 + 352);
    uint64_t v3 = *(void *)(v0 + 264);
    uint64_t v134 = *(void *)(v0 + 240);
    uint64_t v4 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v179 = sub_A5E8(32LL);
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v5 = sub_994E0();
    *(void *)(v0 + 17sub_D878(v0 + 6) = sub_D9D8(v5, v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v4 + 4, v4 + 12);
    sub_36C34();
    sub_DA24(&dword_0, v1, v2, "Couldn't create dialog for %s", v4);
    sub_A81C(v179);
    sub_5050(v179);
    sub_5050((uint64_t)v4);

    swift_release();
    swift_release();
    v158(v3, v134);
    sub_26F04(v151, type metadata accessor for GenericQueryModel);
    sub_26F04(v164, type metadata accessor for SnippetHeaderModel);
    (*(void (**)(uint64_t, uint64_t))(v169 + 8))(v176, v173);
  }

  else
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 616);
    os_log_type_t v8 = *(void *)(v0 + 400);
    uint64_t v176 = *(void *)(v0 + 408);
    uint64_t v178 = *(void *)(v0 + 464);
    uint64_t v173 = *(void *)(v0 + 392);
    BOOL v9 = *(void *)(v0 + 264);
    os_log_type_t v10 = *(void *)(v0 + 240);

    sub_3652C();
    sub_367AC();
    uint64_t v11 = v7(v9, v10);
    sub_99450(v11, type metadata accessor for GenericQueryModel);
    sub_990D4(v12, type metadata accessor for SnippetHeaderModel);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v176, v173);
  }

  sub_279E0(v178, &qword_189CF8);
  sub_98FA0();
  sub_A8F4();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  uint64_t v13 = sub_A85C();
  uint64_t v21 = sub_AAD8(v13, v14, v15, v16, v17, v18, v19, v20, v102, v113);
  uint64_t v29 = sub_A888(v21, v22, v23, v24, v25, v26, v27, v28, v103, v114, v124);
  uint64_t v37 = sub_A854(v29, v30, v31, v32, v33, v34, v35, v36, v104, v115, v125, v134);
  uint64_t v45 = sub_A84C(v37, v38, v39, v40, v41, v42, v43, v44, v105, v116, v126, v135, v143);
  uint64_t v53 = sub_A844(v45, v46, v47, v48, v49, v50, v51, v52, v106, v117, v127, v136, v144, v151);
  uint64_t v61 = sub_A83C(v53, v54, v55, v56, v57, v58, v59, v60, v107, v118, v128, v137, v145, v152, (uint64_t)v158);
  uint64_t v69 = sub_A95C(v61, v62, v63, v64, v65, v66, v67, v68, v108, v119, v129, v138, v146, v153, v159, v164);
  uint64_t v77 = sub_A954(v69, v70, v71, v72, v73, v74, v75, v76, v109, v120, v130, v139, v147, v154, v160, v165, v169);
  uint64_t v85 = sub_A938(v77, v78, v79, v80, v81, v82, v83, v84, v110, v121, v131, v140, v148, v155, v161, v166, v170, v173);
  uint64_t v93 = sub_A930( v85,  v86,  v87,  v88,  v89,  v90,  v91,  v92,  v111,  v122,  v132,  v141,  v149,  v156,  v162,  v167,  v171,  v174,  v176);
  sub_A928( v93,  v94,  v95,  v96,  v97,  v98,  v99,  v100,  v112,  v123,  v133,  v142,  v150,  v157,  v163,  v168,  v172,  v175,  v177,  v178);
  return sub_990DC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_971CC(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a3;
  *(void *)(v4 + sub_A304(v0 - 176, v0 - 240) = a4;
  *(_BYTE *)(v4 + 66sub_D878(v0 + 4) = a2;
  *(void *)(v4 + 22sub_D878(v0 + 4) = a1;
  uint64_t v5 = sub_D984();
  *(void *)(v4 + 24_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v4 + 2sub_D7EC(v0 + 16, v0 + 56) = v6;
  *(void *)(v4 + 26sub_D878(v0 + 4) = sub_D8CC(v6);
  *(void *)(v4 + 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_A5B8();
  *(void *)(v4 + 280) = sub_A5B8();
  *(void *)(v4 + 28_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_A5B8();
  *(void *)(v4 + 29sub_D878(v0 + 6) = sub_A5B8();
  uint64_t v7 = sub_494C(&qword_18A1A8);
  *(void *)(v4 + 30sub_D878(v0 + 4) = sub_A5C0(*(void *)(v7 - 8));
  uint64_t Model = type metadata accessor for TemperatureQueryModel(0LL);
  *(void *)(v4 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = Model;
  *(void *)(v4 + 320) = sub_D8CC(*(void *)(Model - 8));
  *(void *)(v4 + 32_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_A5B8();
  *(void *)(v4 + 33sub_D878(v0 + 6) = sub_A5B8();
  *(void *)(v4 + 34sub_D878(v0 + 4) = sub_A5B8();
  uint64_t v9 = sub_995B0();
  *(void *)(v4 + 35_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v9;
  *(void *)(v4 + 360) = sub_D8CC(*(void *)(v9 - 8));
  *(void *)(v4 + 36_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_A5B8();
  *(void *)(v4 + 37sub_D878(v0 + 6) = sub_A5B8();
  uint64_t v10 = sub_ABF4();
  *(void *)(v4 + 38sub_D878(v0 + 4) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v4 + 39_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v11;
  *(void *)(v4 + 400) = sub_A5C0(v11);
  uint64_t v12 = sub_3C798();
  *(void *)(v4 + 40_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v4 + 41sub_D878(v0 + 6) = v13;
  *(void *)(v4 + 42sub_D878(v0 + 4) = sub_A5C0(v13);
  uint64_t v14 = sub_A8E4();
  *(void *)(v4 + 43_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  *(void *)(v4 + 440) = v15;
  *(void *)(v4 + 44_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_A5C0(v15);
  uint64_t v16 = sub_494C(&qword_189CE8);
  *(void *)(v4 + 4sub_D7EC(v0 + 16, v0 + 56) = sub_A5C0(*(void *)(v16 - 8));
  uint64_t v17 = sub_494C(&qword_189D00);
  *(void *)(v4 + 46sub_D878(v0 + 4) = sub_D8CC(*(void *)(v17 - 8));
  *(void *)(v4 + 47_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_A5B8();
  *(void *)(v4 + 480) = sub_A5B8();
  *(void *)(v4 + 48_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_A5B8();
  *(void *)(v4 + 49sub_D878(v0 + 6) = sub_A5B8();
  *(void *)(v4 + 50sub_D878(v0 + 4) = sub_A5B8();
  uint64_t v18 = sub_494C(&qword_189CF8);
  *(void *)(v4 + 51_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_D8CC(*(void *)(v18 - 8));
  *(void *)(v4 + 520) = sub_A5B8();
  *(void *)(v4 + 52_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_9736C()
{
  uint64_t v1 = *(void **)(v0 + 240);
  sub_994A4();
  *(void *)(v0 + 53sub_D878(v0 + 6) = v2;
  sub_992B8();
  uint64_t v3 = sub_992A4();
  sub_10A228(v3, v4);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  sub_36C34();
  if (v8)
  {
    String.toSpeakableString.getter(v6, v8);
    sub_249D4();
    uint64_t v9 = 0LL;
  }

  else
  {
    uint64_t v9 = 1LL;
  }

  uint64_t v11 = *(void **)(v0 + 232);
  uint64_t v10 = *(void **)(v0 + 240);
  unsigned __int8 v12 = *(_BYTE *)(v0 + 664);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 504), v9, 1LL, *(void *)(v0 + 384));
  *(void *)(v0 + 54sub_D878(v0 + 4) = sub_99DB4(v1);
  *(void *)(v0 + 55_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_98888(v12, v10);
  *(_BYTE *)(v0 + 665) = v13;
  id v14 = [v11 start];
  if (v14)
  {
    uint64_t v17 = v14;
    sub_995F8((uint64_t)v14);

    sub_991A0();
    sub_99010();
  }

  else
  {
    sub_99114(0LL, v15, v16, *(void *)(v0 + 432));
  }

  sub_279E0(*(void *)(v0 + 456), &qword_189CE8);
  uint64_t v18 = (void *)swift_task_alloc(dword_18B70C);
  *(void *)(v0 + 560) = v18;
  uint64_t v19 = sub_991B4(v18, (uint64_t)sub_974A4);
  return sub_99144(v19, v20, v21);
}

uint64_t sub_974A4()
{
  *(void *)(v1 + 56_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v0;
  *(void *)(v1 + 57sub_D878(v0 + 6) = v2;
  sub_36900(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_974E4()
{
  *(void *)(v0 + 58sub_D878(v0 + 4) = v1;
  uint64_t v2 = (void *)swift_task_alloc(dword_18B704);
  *(void *)(v0 + 59_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v2;
  uint64_t v3 = sub_36E5C(v2, (uint64_t)sub_9752C);
  return sub_366DC(v3, v4);
}

uint64_t sub_9752C()
{
  *(void *)(v1 + 600) = v0;
  *(void *)(v1 + 60_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v2;
  sub_36900(v3);
  sub_249D4();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_97574()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  *(void *)(v0 + 61sub_D878(v0 + 6) = v1;
  uint64_t v2 = sub_99064(v1, (uint64_t)sub_975AC);
  return sub_36164(v2, v3);
}

uint64_t sub_975AC()
{
  *(void *)(v1 + 62sub_D878(v0 + 4) = v0;
  *(void *)(v1 + 63_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v2;
  sub_36900(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_975EC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(v2 + 608) && *(void *)(v2 + 576))
  {
    sub_993F0(*(void *)(v2 + 528), a2, &qword_189CF8);
    sub_99124();
    if (v3)
    {
      sub_82234();
      sub_1EBF4();
      uint64_t v4 = sub_249D4();
      uint64_t v5 = &qword_189CF8;
    }

    else
    {
      uint64_t v7 = *(void *)(v2 + 496);
      uint64_t v8 = *(void *)(v2 + 504);
      uint64_t v9 = *(void *)(v2 + 384);
      (*(void (**)(void, void, void))(*(void *)(v2 + 416) + 32LL))( *(void *)(v2 + 424),  *(void *)(v2 + 520),  *(void *)(v2 + 408));
      sub_98DB4(v8, v7, &qword_189D00);
      int v10 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v7, 1LL, v9);
      if (v10 != 1)
      {
        uint64_t v182 = *(void *)(v2 + 624);
        uint64_t v184 = *(void *)(v2 + 632);
        uint64_t v59 = *(void *)(v2 + 600);
        uint64_t v168 = *(void *)(v2 + 568);
        uint64_t v185 = *(void *)(v2 + 552);
        uint64_t v190 = *(void *)(v2 + 536);
        uint64_t v178 = *(void *)(v2 + 512);
        uint64_t v155 = *(void *)(v2 + 488);
        uint64_t v164 = *(void *)(v2 + 480);
        uint64_t v186 = *(void *)(v2 + 472);
        uint64_t v188 = *(void *)(v2 + 464);
        uint64_t v171 = *(void *)(v2 + 416);
        uint64_t v173 = *(void *)(v2 + 408);
        uint64_t v175 = *(void *)(v2 + 424);
        uint64_t v60 = *(void *)(v2 + 376);
        uint64_t v62 = *(void *)(v2 + 344);
        uint64_t v61 = *(void *)(v2 + 352);
        uint64_t v179 = *(void *)(v2 + 312);
        uint64_t v177 = *(void *)(v2 + 304);
        uint64_t v63 = *(void **)(v2 + 240);
        char v180 = *(_BYTE *)(v2 + 665) & 1;
        unsigned __int8 v64 = *(_BYTE *)(v2 + 664);
        (*(void (**)(void))(*(void *)(v2 + 392) + 32LL))();
        sub_995A8(v59);
        sub_82234();
        unint64_t v65 = sub_2A044(v64);
        unint64_t v67 = v66;
        uint64_t v68 = sub_27CC8(v64);
        uint64_t v69 = (unint64_t *)(v60 + *(int *)(v61 + 20));
        *uint64_t v69 = v65;
        v69[1] = v67;
        uint64_t v70 = (uint64_t *)(v60 + *(int *)(v61 + 24));
        *uint64_t v70 = v68;
        v70[1] = v71;
        sub_565D4(v68, "maximum");
        uint64_t v72 = sub_992A4();
        sub_56734(v72, v73, v64);
        uint64_t v74 = sub_992D0();
        sub_565D4(v74, "minimum");
        uint64_t v75 = sub_992A4();
        sub_56734(v75, v76, v64);
        uint64_t v77 = sub_992D0();
        sub_565D4(v77, "mostRecent");
        uint64_t v78 = sub_992A4();
        sub_56734(v78, v79, v64);
        sub_992D0();
        uint64_t v130 = sub_989FC(v64, v190, v63);
        char v125 = v80 & 1;
        sub_99310(v155);
        sub_37150(v155);
        sub_994D8(v168);
        sub_1EBF4();
        sub_37150(v164);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v171 + 16))(v178, v175, v173);
        sub_72A94(v178);
        sub_98DE0(v60, v177, type metadata accessor for SnippetHeaderModel);
        sub_99194();
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v81, v82, v83, v61);
        sub_BB348(v185, v180, 0, 0, 0, v62, v130, v125, v155, v164, v178, v182, v184, v177);
        uint64_t v84 = v62 + *(int *)(v179 + 32);
        uint64_t v85 = *(void *)v84;
        LOBYTE(v18sub_D878(v0 + 4) = *(_BYTE *)(v84 + 8);
        uint64_t v86 = v62 + *(int *)(v179 + 28);
        uint64_t v181 = v85;
        uint64_t v183 = *(void *)v86;
        LOBYTE(v185) = *(_BYTE *)(v86 + 8);
        sub_99310(v186);
        sub_37150(v186);
        sub_99310(v188);
        sub_37150(v188);
        uint64_t v87 = dword_18F72C;
        swift_retain();
        swift_retain();
        uint64_t v88 = (void *)swift_task_alloc(v87);
        *(void *)(v2 + 640) = v88;
        *uint64_t v88 = v2;
        v88[1] = sub_97C24;
        return sub_E8F38(*(_BYTE *)(v2 + 664), v190, 0LL, 1, v181, v184, v183, v185);
      }

      (*(void (**)(void, void))(*(void *)(v2 + 416) + 8LL))( *(void *)(v2 + 424),  *(void *)(v2 + 408));
      sub_82234();
      sub_1EBF4();
      uint64_t v4 = sub_249D4();
      uint64_t v5 = &qword_189D00;
    }

    sub_36A94(v4, v5);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_249D4();
  }

  uint64_t v11 = *(void *)(v2 + 248);
  uint64_t v12 = Logger.wellness.unsafeMutableAddressor(v6);
  sub_A5DC(v12, v2 + 80);
  sub_232F4();
  sub_23374();
  os_log_type_t v13 = sub_A898();
  if (sub_A988(v13))
  {
    id v14 = (_WORD *)sub_A5E8(2LL);
    sub_366C0(v14);
    sub_A940(&dword_0, v15, v16, "Couldn't create data or date dialog labels or deeplink");
    sub_5050(v11);
  }

  uint64_t v17 = *(void *)(v2 + 504);
  uint64_t v19 = *(void *)(v2 + 256);
  uint64_t v18 = *(void *)(v2 + 264);
  uint64_t v20 = *(void *)(v2 + 248);
  uint64_t v21 = *(void *)(v2 + 224);
  swift_release();

  sub_37034();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  sub_279E0(v17, &qword_189D00);
  sub_72F7C(v22, &qword_189CF8);
  *(_OWORD *)uint64_t v21 = 0u;
  *(_OWORD *)(v21 + 1sub_D878(v0 + 6) = 0u;
  *(void *)(v21 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0LL;
  uint64_t v23 = sub_991F8();
  uint64_t v160 = v25;
  uint64_t v165 = v24;
  uint64_t v169 = *(void *)(v2 + 400);
  uint64_t v172 = *(void *)(v2 + 376);
  uint64_t v174 = *(void *)(v2 + 368);
  uint64_t v176 = *(void *)(v2 + 360);
  uint64_t v187 = *(void *)(v2 + 280);
  uint64_t v189 = *(void *)(v2 + 272);
  swift_task_dealloc(v23);
  sub_A864();
  sub_A85C();
  sub_A8F4();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  uint64_t v26 = sub_A910();
  uint64_t v34 = sub_36430( v26,  v27,  v28,  v29,  v30,  v31,  v32,  v33,  v89,  v93,  v97,  v101,  v105,  v109,  v113,  v117,  v121,  v126,  v131,  v135,  v139,  v143,  v147,  v151,  v156,  v160);
  uint64_t v42 = sub_36428( v34,  v35,  v36,  v37,  v38,  v39,  v40,  v41,  v90,  v94,  v98,  v102,  v106,  v110,  v114,  v118,  v122,  v127,  v132,  v136,  v140,  v144,  v148,  v152,  v157,  v161,  v165);
  uint64_t v50 = sub_36478( v42,  v43,  v44,  v45,  v46,  v47,  v48,  v49,  v91,  v95,  v99,  v103,  v107,  v111,  v115,  v119,  v123,  v128,  v133,  v137,  v141,  v145,  v149,  v153,  v158,  v162,  v166,  v169);
  sub_36524( v50,  v51,  v52,  v53,  v54,  v55,  v56,  v57,  v92,  v96,  v100,  v104,  v108,  v112,  v116,  v120,  v124,  v129,  v134,  v138,  v142,  v146,  v150,  v154,  v159,  v163,  v167,  v170,  v172);
  swift_task_dealloc(v174);
  swift_task_dealloc(v176);
  sub_365EC();
  sub_365E4();
  sub_365DC();
  sub_366B8();
  sub_366B0();
  sub_366A8();
  sub_36814();
  swift_task_dealloc(v187);
  swift_task_dealloc(v189);
  sub_367FC();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_97C24(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 640);
  *(void *)(*v2 + 64_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a1;
  sub_36900(v4);
  sub_37034();
  sub_367AC();
  uint64_t v6 = *(void *)(v3 + 464);
  uint64_t v5 = *(void *)(v3 + 472);
  if (v1)
  {
    sub_36860();
    sub_464D0(v6);
  }

  else
  {
    sub_464D0(*(void *)(v3 + 464));
  }

  sub_464D0(v5);
  sub_A964();
  return sub_D954();
}

uint64_t sub_97CD4()
{
  if (*(void *)(v1 + 648))
  {
    uint64_t v440 = *(void *)(v1 + 648);
    uint64_t v3 = *(os_log_s **)(v1 + 296);
    uint64_t v4 = *(void *)(v1 + 248);
    uint64_t v5 = *(void *)(v1 + 256);
    uint64_t v6 = Logger.wellness.unsafeMutableAddressor(v2);
    sub_A5DC(v6, v1 + 104);
    uint64_t v425 = v6;
    (*(void (**)(os_log_s *, uint64_t, uint64_t))(v5 + 16))(v3, v6, v4);
    uint64_t v7 = sub_372A0();
    sub_98DE0(v7, v8, v9);
    int v10 = v3;
    Logger.logObject.getter(v11);
    os_log_type_t v12 = sub_AB70();
    BOOL v13 = os_log_type_enabled(v3, v12);
    uint64_t v14 = *(void *)(v1 + 336);
    if (v13)
    {
      uint64_t v15 = *(void *)(v1 + 328);
      uint64_t v432 = *(void *)(v1 + 296);
      uint64_t v328 = *(void *)(v1 + 312);
      uint64_t v346 = *(void *)(v1 + 256);
      uint64_t v363 = *(void *)(v1 + 248);
      uint64_t v16 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v442 = sub_A5E8(32LL);
      *(_DWORD *)uint64_t v16 = 136315138;
      sub_992DC(v14, v17, type metadata accessor for TemperatureQueryModel);
      uint64_t v18 = String.init<A>(describing:)(v15, v328);
      *(void *)(v1 + 21sub_D878(v0 + 6) = sub_D9D8(v18, v19);
      sub_994F0(v1 + 216, v1 + 224, (uint64_t)(v16 + 4));
      sub_6D64();
      sub_26F04(v14, type metadata accessor for TemperatureQueryModel);
      sub_DA24(&dword_0, v3, v12, "Query snippet model is: %s", v16);
      sub_A81C(v442);
      sub_5050(v442);
      sub_5050((uint64_t)v16);

      uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v346 + 8);
      v20(v432, v363);
    }

    else
    {
      uint64_t v64 = *(void *)(v1 + 256);
      sub_990D4(v13, type metadata accessor for TemperatureQueryModel);

      uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
      uint64_t v65 = sub_372A0();
      v20(v65, v66);
    }

    unint64_t v67 = *(os_log_s **)(v1 + 344);
    sub_A5DC(v425, v1 + 128);
    uint64_t v68 = sub_9931C();
    sub_99188(v68, v69, type metadata accessor for TemperatureQueryModel);
    sub_A86C();
    os_log_type_t v70 = sub_AB70();
    BOOL v71 = os_log_type_enabled(v67, v70);
    uint64_t v72 = *(void *)(v1 + 320);
    v435 = v20;
    if (v71)
    {
      uint64_t v73 = *(void *)(v1 + 312);
      uint64_t v419 = *(void *)(v1 + 288);
      uint64_t v369 = *(void *)(v1 + 248);
      uint64_t v74 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v444 = sub_A5E8(32LL);
      *(_DWORD *)uint64_t v74 = 136315138;
      uint64_t v75 = (void *)(v72 + *(int *)(v73 + 60));
      uint64_t v76 = v75[1];
      *(void *)(v1 + 17sub_D878(v0 + 6) = *v75;
      *(void *)(v1 + 18sub_D878(v0 + 4) = v76;
      swift_bridgeObjectRetain(v76);
      uint64_t v77 = sub_494C(&qword_18B170);
      uint64_t v78 = String.init<A>(describing:)(v1 + 176, v77);
      *(void *)(v1 + 20_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_D9D8(v78, v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 208, v1 + 216, v74 + 4, v74 + 12);
      uint64_t v80 = sub_2A184();
      sub_992F0(v80, type metadata accessor for TemperatureQueryModel);
      sub_DA24(&dword_0, v67, v70, "Basal temp is: %s", v74);
      sub_A81C(v444);
      sub_5050(v444);
      sub_5050((uint64_t)v74);

      uint64_t v81 = v419;
      uint64_t v82 = v369;
    }

    else
    {
      sub_992F0(v71, type metadata accessor for TemperatureQueryModel);

      uint64_t v81 = sub_372A0();
    }

    v20(v81, v82);
    uint64_t v83 = *(os_log_s **)(v1 + 376);
    sub_A5DC(v425, v1 + 152);
    uint64_t v84 = sub_9931C();
    sub_99188(v84, v85, type metadata accessor for SnippetHeaderModel);
    sub_A86C();
    os_log_type_t v86 = sub_AB70();
    BOOL v87 = sub_46614(v86);
    uint64_t v88 = *(void *)(v1 + 368);
    if (v87)
    {
      uint64_t v89 = *(void *)(v1 + 352);
      uint64_t v90 = *(void *)(v1 + 360);
      uint64_t v441 = *(void *)(v1 + 280);
      uint64_t v439 = *(void *)(v1 + 248);
      uint64_t v91 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v445 = sub_A5E8(32LL);
      *(_DWORD *)uint64_t v91 = 136315138;
      sub_991E4(v445, v92, type metadata accessor for SnippetHeaderModel);
      uint64_t v93 = String.init<A>(describing:)(v90, v89);
      *(void *)(v1 + 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_D9D8(v93, v94);
      sub_9933C(v1 + 192, v1 + 200, (uint64_t)(v91 + 4));
      sub_6D64();
      sub_26F04(v88, type metadata accessor for SnippetHeaderModel);
      sub_DA24(&dword_0, v83, (os_log_type_t)v72, "Query snippet header model is: %s", v91);
      sub_A81C(v445);
      sub_5050(v445);
      sub_5050((uint64_t)v91);

      v435(v441, v439);
    }

    else
    {
      sub_990D4(v87, type metadata accessor for SnippetHeaderModel);

      sub_995D8();
    }

    uint64_t v95 = sub_370D4();
    unint64_t v96 = sub_99228(v95);
    uint64_t v97 = sub_991D8(v96);
    sub_9921C((uint64_t)v97, v98, type metadata accessor for TemperatureQueryModel);
    uint64_t v99 = sub_993B4();
    swift_storeEnumTagMultiPayload(v99, v100, 14LL);
    uint64_t v101 = (void *)swift_task_alloc(dword_18B6FC);
    *(void *)(v1 + 6sub_D7EC(v0 + 16, v0 + 56) = v101;
    *uint64_t v101 = v1;
    v101[1] = sub_9844C;
    sub_99520();
    return sub_5E844(v102, v103, v440);
  }

  else
  {
    uint64_t v21 = sub_99408();
    sub_A5DC(v21, (uint64_t)v0);
    sub_232F4();
    sub_23374();
    os_log_type_t v22 = sub_A898();
    BOOL v23 = os_log_type_enabled(v0, v22);
    uint64_t v394 = *(void *)(v1 + 544);
    uint64_t v415 = *(void *)(v1 + 536);
    uint64_t v24 = *(void *)(v1 + 528);
    uint64_t v25 = *(void *)(v1 + 504);
    uint64_t v27 = *(void *)(v1 + 416);
    uint64_t v26 = *(void *)(v1 + 424);
    uint64_t v28 = *(void *)(v1 + 408);
    uint64_t v437 = *(void *)(v1 + 392);
    uint64_t v426 = *(void *)(v1 + 344);
    uint64_t v433 = *(void *)(v1 + 376);
    uint64_t v347 = *(void *)(v1 + 256);
    uint64_t v364 = *(void *)(v1 + 248);
    uint64_t v380 = *(void *)(v1 + 272);
    if (v23)
    {
      uint64_t v329 = *(void *)(v1 + 528);
      uint64_t v29 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v443 = sub_A5E8(32LL);
      *(_DWORD *)uint64_t v29 = 136315138;
      uint64_t v30 = sub_994D0();
      *(void *)(v1 + 200) = sub_D9D8(v30, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 200, v1 + 208, v29 + 4, v29 + 12);
      sub_82234();
      sub_DA24(&dword_0, v0, v22, "Couldn't create dialog for %s", v29);
      sub_A81C(v443);
      sub_5050(v443);
      sub_5050((uint64_t)v29);

      uint64_t v32 = swift_release();
      uint64_t v40 = sub_99440( v32,  v33,  v34,  v35,  v36,  v37,  v38,  v39,  v28,  v25,  v27,  v26,  v329,  v347,  v364,  v380,  v394,  v405,  v415);
      uint64_t v48 = sub_99354(v40, v41, v42, v43, v44, v45, v46, v47, v250, v271, v291, v310, v330, v348, v365, v381);
      sub_993AC( v48,  type metadata accessor for TemperatureQueryModel,  v49,  v50,  v51,  v52,  v53,  v54,  v251,  v272,  v292,  v311,  v331,  v349,  v366,  v382,  v395,  v406,  v416,  v426);
      sub_26F04(v433, type metadata accessor for SnippetHeaderModel);
      sub_99344( v55,  v56,  v57,  v58,  v59,  v60,  v61,  v62,  v252,  v273,  v293,  v312,  v332,  v350,  v367,  v383,  v396,  v407,  v417,  v427,  v433,  v437);
      (*(void (**)(uint64_t, uint64_t))(v294 + 8))(v313, v253);
      sub_279E0(v274, &qword_189D00);
      uint64_t v63 = v333;
    }

    else
    {

      uint64_t v105 = swift_release();
      uint64_t v113 = sub_99440( v105,  v106,  v107,  v108,  v109,  v110,  v111,  v112,  v249,  v270,  v290,  v309,  v327,  v347,  v364,  v380,  v394,  v405,  v415);
      uint64_t v121 = sub_99354(v113, v114, v115, v116, v117, v118, v119, v120, v254, v275, v295, v314, v334, v352, v370, v385);
      sub_993AC( v121,  type metadata accessor for TemperatureQueryModel,  v122,  v123,  v124,  v125,  v126,  v127,  v255,  v276,  v296,  v315,  v335,  v353,  v371,  v386,  v398,  v409,  v420,  v426);
      sub_26F04(v433, type metadata accessor for SnippetHeaderModel);
      sub_99344( v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v256,  v277,  v297,  v316,  v336,  v354,  v372,  v387,  v399,  v410,  v421,  v429,  v433,  v437);
      uint64_t v136 = sub_AB64(*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
      sub_72F7C(v136, &qword_189D00);
      uint64_t v63 = v24;
    }

    sub_279E0(v63, &qword_189CF8);
    sub_98EF8();
    sub_A864();
    sub_A85C();
    sub_A8F4();
    sub_A78C();
    sub_A67C();
    sub_A7C8();
    sub_A760();
    sub_A8EC();
    uint64_t v137 = sub_A910();
    uint64_t v145 = sub_A970(v137, v138, v139, v140, v141, v142, v143, v144, v253);
    uint64_t v153 = sub_AAD8(v145, v146, v147, v148, v149, v150, v151, v152, v257, v274);
    uint64_t v161 = sub_A888(v153, v154, v155, v156, v157, v158, v159, v160, v258, v278, v294);
    uint64_t v169 = sub_A854(v161, v162, v163, v164, v165, v166, v167, v168, v259, v279, v298, v313);
    uint64_t v177 = sub_A84C(v169, v170, v171, v172, v173, v174, v175, v176, v260, v280, v299, v317, v333);
    uint64_t v185 = sub_A844(v177, v178, v179, v180, v181, v182, v183, v184, v261, v281, v300, v318, v337, v351);
    uint64_t v193 = sub_A83C(v185, v186, v187, v188, v189, v190, v191, v192, v262, v282, v301, v319, v338, v355, v368);
    uint64_t v201 = sub_A95C(v193, v194, v195, v196, v197, v198, v199, v200, v263, v283, v302, v320, v339, v356, v373, v384);
    uint64_t v209 = sub_A954( v201,  v202,  v203,  v204,  v205,  v206,  v207,  v208,  v264,  v284,  v303,  v321,  v340,  v357,  v374,  v388,  v397);
    uint64_t v217 = sub_A938( v209,  v210,  v211,  v212,  v213,  v214,  v215,  v216,  v265,  v285,  v304,  v322,  v341,  v358,  v375,  v389,  v400,  v408);
    uint64_t v225 = sub_A930( v217,  v218,  v219,  v220,  v221,  v222,  v223,  v224,  v266,  v286,  v305,  v323,  v342,  v359,  v376,  v390,  v401,  v411,  v418);
    uint64_t v233 = sub_A928( v225,  v226,  v227,  v228,  v229,  v230,  v231,  v232,  v267,  v287,  v306,  v324,  v343,  v360,  v377,  v391,  v402,  v412,  v422,  v428);
    uint64_t v241 = sub_A920( v233,  v234,  v235,  v236,  v237,  v238,  v239,  v240,  v268,  v288,  v307,  v325,  v344,  v361,  v378,  v392,  v403,  v413,  v423,  v430,  v434);
    sub_36374( v241,  v242,  v243,  v244,  v245,  v246,  v247,  v248,  v269,  v289,  v308,  v326,  v345,  v362,  v379,  v393,  v404,  v414,  v424,  v431,  v436,  v438);
    sub_367FC();
    sub_A918();
    return sub_99048(*(uint64_t (**)(void))(v1 + 8));
  }

uint64_t sub_9844C()
{
  return sub_A5D0();
}

#error "985B0: call analysis failed (funcsize=91)"
#error "98764: call analysis failed (funcsize=154)"
uint64_t sub_98888(unsigned __int8 a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v4 = sub_27CC8(a1);
  if (v4 == 0xD000000000000027LL && v5 == 0x8000000000142B00LL)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }

  uint64_t v6 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, 0xD000000000000027LL, 0x8000000000142B00LL, 0LL);
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
LABEL_5:
    [a2 minimum];
    uint64_t v8 = v7;
    [a2 maximum];
    if (v8 != v9) {
      goto LABEL_11;
    }
  }

  int v10 = sub_27CC8(a1);
  if (v10 == 0xD000000000000027LL && v11 == 0x8000000000142B00LL)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  os_log_type_t v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, 0xD000000000000027LL, 0x8000000000142B00LL, 0LL);
  swift_bridgeObjectRelease();
  if ((v12 & 1) != 0) {
    return 0LL;
  }
LABEL_11:
  [a2 average];
  uint64_t v15 = v14;
  uint64_t v16 = sub_7D950(a2);
  uint64_t v18 = sub_90668(v16, v17, a1, v15);
  swift_bridgeObjectRelease();
  return *(void *)&v18;
}

uint64_t sub_989FC(unsigned __int8 a1, uint64_t a2, void *a3)
{
  uint64_t v4 = sub_27CC8(a1);
  if (v4 == 0xD00000000000002CLL && v5 == 0x80000000001428E0LL)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, 0xD00000000000002CLL, 0x80000000001428E0LL, 0LL);
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0) {
      return 0LL;
    }
  }

  if (sub_12AB68() >= 3u)
  {
    uint64_t v7 = &selRef_average;
    if ((sub_128C14() & 1) == 0)
    {
      [a3 average];
      if (v8 <= 0.0) {
        uint64_t v7 = &selRef_mostRecent;
      }
    }
  }

  else
  {
    uint64_t v7 = &selRef_average;
  }

  [a3 *v7];
  return v9;
}

uint64_t sub_98AF4(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v29 = a1;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  double v8 = &v30[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = sub_494C(&qword_189D00);
  uint64_t v10 = __chkstk_darwin(v9);
  os_log_type_t v12 = &v30[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v10);
  uint64_t v14 = &v30[-v13 - 8];
  uint64_t v15 = type metadata accessor for SpeakableString(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  unint64_t v19 = &v30[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  if ((a2 & 1) == 0)
  {
    sub_98DB4(a3, (uint64_t)v14, &qword_189D00);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v14, 1LL, v15) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v14, v15);
      uint64_t v26 = type metadata accessor for DialogPersonHeight.Builder(0LL);
      swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
      DialogPersonHeight.Builder.init()();
      dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)(v29, 0LL);
      swift_release();
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v12, v19, v15);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v15);
      dispatch thunk of DialogAbstractMeasurement.Builder.withUnits(_:)(v12);
      swift_release();
      sub_279E0((uint64_t)v12, &qword_189D00);
      uint64_t v25 = dispatch thunk of DialogAbstractMeasurement.Builder.build()(v27);
      swift_release();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
      return v25;
    }

    sub_279E0((uint64_t)v14, &qword_189D00);
  }

  uint64_t v20 = Logger.wellness.unsafeMutableAddressor(v17);
  swift_beginAccess(v20, v30, 0LL, 0LL);
  uint64_t v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v20, v5);
  os_log_type_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.debug.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl( &dword_0,  v22,  v23,  "GenerateQueryResponseOutput: In getDialogPersonHeight value or unit is nil",  v24,  2u);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return 0LL;
}

void sub_98DB4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_494C(a3);
  sub_9926C(v3);
  sub_A890();
}

void sub_98DE0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3(0LL);
  sub_9926C(v3);
  sub_A890();
}

unint64_t sub_98E0C()
{
  unint64_t result = qword_18B4D0;
  if (!qword_18B4D0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSUnitMass);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, &qword_18B4D0);
  }

  return result;
}

uint64_t sub_98E4C()
{
  return swift_task_dealloc(*(void *)(v0 + 432));
}

uint64_t sub_98EA4()
{
  return swift_task_dealloc(*(void *)(v0 + 424));
}

uint64_t sub_98EF8()
{
  uint64_t v2 = v0[28];
  *(void *)(v2 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0LL;
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 1sub_D878(v0 + 6) = 0u;
  uint64_t v3 = v0[66];
  uint64_t v4 = v0[33];
  *(void *)(v1 - 9sub_D878(v0 + 6) = v0[34];
  *(void *)(v1 - 8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v4;
  return swift_task_dealloc(v3);
}

uint64_t sub_98F84(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_98FA0()
{
  uint64_t v1 = *(void *)(v0 + 216);
  *(void *)(v1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0LL;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 1sub_D878(v0 + 6) = 0u;
  return swift_task_dealloc(*(void *)(v0 + 464));
}

uint64_t sub_99010()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v0, 1LL, v1);
}

uint64_t sub_99048(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_99064@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return 0x65676172657661LL;
}

uint64_t sub_99084()
{
  return *(void *)(v0 + 464);
}

uint64_t sub_990A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_5E844(a1, a2, a3);
}

double sub_990B8(uint64_t a1, uint64_t a2)
{
  return sub_90668(a1, a2, v2, v3);
}

uint64_t sub_990C4(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 0LL, 1LL, v1);
}

void sub_990D4(uint64_t a1, uint64_t (*a2)(void))
{
}

uint64_t sub_990DC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_990F8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_99114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v4, 1LL, 1LL, a4);
}

uint64_t sub_99124()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1LL, v0);
}

uint64_t sub_99144(uint64_t a1, char a2, uint64_t a3)
{
  return sub_5EC2C(a1, a2, a3);
}

void sub_9915C()
{
  *(void *)(v1 - 8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *(void *)(v0 + 464);
}

void sub_99188(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

  ;
}

uint64_t sub_991A0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v1, v2);
}

uint64_t sub_991B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_991CC()
{
  return sub_7D950(v0);
}

void *sub_991D8(uint64_t a1)
{
  *(void *)(v2 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a1;
  return sub_B76C(v1);
}

void sub_991E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

void sub_991F0(uint64_t a1, uint64_t (*a2)(void))
{
}

uint64_t sub_991F8()
{
  return *(void *)(v0 + 528);
}

void sub_9921C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

unint64_t sub_99228(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return sub_20168();
}

uint64_t sub_99234()
{
  return String.toSpeakableString.getter(v1, v0);
}

void sub_99244()
{
  *(void *)(v1 - _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *v0;
}

uint64_t sub_99258(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_9926C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(v1, v2, a1);
}

void sub_99284()
{
  uint64_t v2 = *(void *)(v0 + 528);
  *(void *)(v1 - 9sub_D878(v0 + 6) = *(void *)(v0 + 504);
  *(void *)(v1 - 8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v2;
}

uint64_t sub_992A4()
{
  return sub_7D950(v0);
}

  ;
}

uint64_t sub_992B8()
{
  return sub_997C8(v0, v1);
}

uint64_t sub_992C4(uint64_t a1, unint64_t a2)
{
  return sub_39178(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_992D0()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_992DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

uint64_t sub_992E4()
{
  return sub_7D950(v0);
}

void sub_992F0(uint64_t a1, uint64_t (*a2)(void))
{
}

void sub_992F8()
{
}

uint64_t sub_99304()
{
  return String.init<A>(describing:)(v1, v0);
}

uint64_t sub_99310(uint64_t a1)
{
  return v2(a1, v3, v1);
}

uint64_t sub_9931C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 88))(v0, v2, v1);
}

uint64_t sub_99330()
{
  return sub_99DB4(v0);
}

uint64_t sub_9933C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, v3);
}

uint64_t sub_99344( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  return (*(uint64_t (**)(void, void))(a22 + 8))(*(void *)(v22 - 88), *(void *)(v22 - 96));
}

uint64_t sub_99354( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a14 + 8))(a16, a15);
}

uint64_t sub_99364(uint64_t a1)
{
  return swift_release(a1);
}

  ;
}

void sub_9939C()
{
}

void sub_993AC( uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

uint64_t sub_993B4()
{
  return v0;
}

uint64_t sub_993C0(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_993D0()
{
  return Logger.wellness.unsafeMutableAddressor();
}

void sub_993E0()
{
}

void sub_993F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_993F8()
{
  return Logger.wellness.unsafeMutableAddressor();
}

uint64_t sub_99408()
{
  return Logger.wellness.unsafeMutableAddressor();
}

uint64_t sub_99418()
{
  return (*(uint64_t (**)(void, void))(v0[50] + 8LL))(v0[51], v0[49]);
}

uint64_t sub_99428(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_99440( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return swift_release(a19);
}

uint64_t sub_99448()
{
  return sub_7D950(v0);
}

void sub_99450(uint64_t a1, uint64_t (*a2)(void))
{
}

  ;
}

void sub_99474()
{
}

uint64_t sub_99484()
{
  return Logger.wellness.unsafeMutableAddressor();
}

void sub_99494()
{
}

void sub_994A4()
{
}

uint64_t sub_994AC(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 0LL, 1LL, v1);
}

  ;
}

uint64_t sub_994D0()
{
  return sub_27CC8(v0);
}

uint64_t sub_994D8(uint64_t a1)
{
  return String.toSpeakableString.getter(a1, v1);
}

uint64_t sub_994E0()
{
  return sub_27CC8(v0);
}

uint64_t sub_994E8(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_994F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, v3);
}

void sub_994F8()
{
  *(void *)(v1 - _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *v0;
}

  ;
}

  ;
}

uint64_t sub_9952C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 496));
}

  ;
}

void sub_9955C( uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
}

void sub_99564(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_9956C()
{
  return swift_release_n(v0, 2LL);
}

void sub_99578(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

uint64_t sub_99584()
{
  return v0(v1, v2);
}

  ;
}

  ;
}

uint64_t sub_995A8(uint64_t a1)
{
  return String.toSpeakableString.getter(a1, v1);
}

uint64_t sub_995B0()
{
  return type metadata accessor for SnippetHeaderModel(0LL);
}

void sub_995B8()
{
  *(void *)(v1 - _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *v0;
}

uint64_t sub_995CC()
{
  return v2(v0, v1);
}

uint64_t sub_995D8()
{
  return v2(v0, v1);
}

uint64_t sub_995E4()
{
  return String.init<A>(describing:)(v0, *(void *)(v1 - 128));
}

uint64_t sub_995F0(uint64_t a1, char a2)
{
  return sub_98AF4(a1, a2, v2);
}

uint64_t sub_995F8(uint64_t a1)
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

void sub_99600()
{
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v28 - v5;
  __chkstk_darwin(v4);
  sub_9A6D4();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v28 - v9;
  id v11 = sub_56344(v8, "start");
  if (v11)
  {
    os_log_type_t v12 = v11;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v11);

    uint64_t v14 = sub_A8E4();
    uint64_t v15 = 0LL;
  }

  else
  {
    uint64_t v14 = type metadata accessor for Date(0LL);
    uint64_t v15 = 1LL;
  }

  uint64_t v16 = 1LL;
  uint64_t v17 = sub_A66C((uint64_t)v10, v15, v13, v14);
  id v18 = sub_56344(v17, "end");
  if (v18)
  {
    unint64_t v19 = v18;
    sub_9A694((uint64_t)v18);

    uint64_t v16 = 0LL;
  }

  sub_A8E4();
  uint64_t v20 = 1LL;
  uint64_t v21 = sub_9A688(v1, v16);
  id v22 = sub_373D8(v21, "sampleStartDate");
  if (v22)
  {
    os_log_type_t v23 = v22;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v22);

    uint64_t v20 = 0LL;
  }

  uint64_t v24 = 1LL;
  uint64_t v25 = sub_9A688((uint64_t)v6, v20);
  id v26 = sub_373D8(v25, "sampleEndDate");
  if (v26)
  {
    uint64_t v27 = v26;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v26);

    uint64_t v24 = 0LL;
  }

  sub_9A688(v0, v24);
  type metadata accessor for WellnessTime(0LL);
  sub_12892C();
}

uint64_t sub_997C8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v65 = a1;
  sub_494C(&qword_189CE8);
  sub_6D20();
  __chkstk_darwin(v7);
  sub_AA58();
  sub_9A6E8();
  __chkstk_darwin(v8);
  sub_56B00();
  __chkstk_darwin(v9);
  id v11 = (char *)&v60 - v10;
  uint64_t v12 = sub_A8E4();
  uint64_t v66 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_72EAC();
  uint64_t v14 = __chkstk_darwin(v13);
  sub_9A69C(v14, v15, v16, v17, v18, v19, v20, v21, v60);
  __chkstk_darwin(v22);
  sub_ABA4();
  __chkstk_darwin(v23);
  uint64_t v64 = (uint64_t)&v60 - v24;
  sub_494C(&qword_189CF8);
  sub_6D20();
  __chkstk_darwin(v25);
  sub_6D30();
  uint64_t v67 = v26;
  sub_494C(&qword_189BA0);
  sub_6D20();
  __chkstk_darwin(v27);
  sub_AA58();
  uint64_t v30 = v28 - v29;
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)&v60 - v32;
  type metadata accessor for DateInterval(0LL);
  sub_56758((uint64_t)v33, 1LL);
  uint64_t v34 = sub_9A5F4(v3);
  if (!v35 || (uint64_t v34 = sub_28A4C(v34, v35), v34 == 205))
  {
    sub_3D7BC(v34, &qword_189BA0);
    uint64_t v36 = type metadata accessor for URL(0LL);
    return sub_A66C(a2, 1LL, v37, v36);
  }

  HIDWORD(v60) = v34;
  uint64_t v61 = a2;
  id v39 = [v3 start];
  if (!v39)
  {
    uint64_t v41 = sub_41A40((uint64_t)v11, 1LL);
LABEL_13:
    uint64_t v49 = v61;
    uint64_t v47 = v67;
    uint64_t v50 = v65;
    uint64_t v51 = sub_9A680(v41, &qword_189CE8);
    if (v50)
    {
      id v52 = [v50 sampleEndDate];
      if (v52)
      {
        uint64_t v53 = v52;
        uint64_t v54 = v63;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v52);

        uint64_t v55 = 0LL;
      }

      else
      {
        uint64_t v55 = 1LL;
        uint64_t v54 = v63;
      }

      sub_41A40(v54, v55);
      uint64_t v58 = sub_F4F10(HIDWORD(v60), v54);
      uint64_t v59 = sub_9A680(v58, &qword_189CE8);
      sub_3D7BC(v59, &qword_189BA0);
    }

    else
    {
      sub_3D7BC(v51, &qword_189BA0);
      uint64_t v56 = type metadata accessor for URL(0LL);
      sub_A66C(v47, 1LL, v57, v56);
    }

    return sub_55C74(v47, v49, &qword_189CF8);
  }

  uint64_t v40 = v39;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v39);

  sub_9A6B4((uint64_t)v11, v5);
  sub_41A40((uint64_t)v11, 0LL);
  uint64_t v41 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v11, 1LL, v12);
  if ((_DWORD)v41 == 1) {
    goto LABEL_13;
  }
  sub_9A6B4(v64, (uint64_t)v11);
  id v42 = [v3 end];
  if (!v42)
  {
    sub_41A40(v4, 1LL);
    goto LABEL_12;
  }

  sub_9A6C8((uint64_t)v42);

  sub_9A6B4(v4, v5);
  sub_41A40(v4, 0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v4, 1LL, v12) == 1)
  {
LABEL_12:
    uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 8))(v64, v12);
    goto LABEL_13;
  }

  uint64_t v43 = v62;
  sub_9A6B4(v62, v4);
  uint64_t v44 = v66;
  uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16);
  uint64_t v46 = v64;
  v45(v5, v64, v12);
  v45(v2, v43, v12);
  DateInterval.init(start:end:)(v5, v2);
  sub_9A6FC();
  sub_56758(v30, 0LL);
  sub_55C74(v30, (uint64_t)v33, &qword_189BA0);
  uint64_t v47 = v67;
  sub_F4F10(HIDWORD(v60), v33);
  uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
  v48(v43, v12);
  v48(v46, v12);
  sub_9A6FC();
  uint64_t v49 = v61;
  return sub_55C74(v47, v49, &qword_189CF8);
}

uint64_t sub_99C00(char a1)
{
  *(void *)(v2 + 1sub_D878(v0 + 6) = v1;
  *(_BYTE *)(v2 + sub_D7EC(v0 + 16, v0 + 56) = a1;
  uint64_t v3 = type metadata accessor for SpeakableString(0LL);
  *(void *)(v2 + 2sub_D878(v0 + 4) = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  *(void *)(v2 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v4;
  *(void *)(v2 + 40) = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_99C64, 0LL, 0LL);
}

uint64_t sub_99C64()
{
  uint64_t v1 = sub_7D950(*(void **)(v0 + 16));
  if (v2)
  {
    uint64_t v3 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000LL) == 0) {
      uint64_t v3 = v1 & 0xFFFFFFFFFFFFLL;
    }
    if (v3)
    {
      uint64_t v5 = *(void *)(v0 + 32);
      uint64_t v4 = *(void *)(v0 + 40);
      uint64_t v6 = *(void *)(v0 + 24);
      String.toSpeakableString.getter(v1, v2);
      uint64_t v7 = sub_249D4();
      uint64_t v8 = SpeakableString.print.getter(v7);
      uint64_t v10 = v9;
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
      swift_task_dealloc(*(void *)(v0 + 40));
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v8, v10);
    }

    sub_249D4();
  }

  uint64_t v12 = (void *)swift_task_alloc(dword_18D9FC);
  *(void *)(v0 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_99D50;
  return sub_9A498(*(_BYTE *)(v0 + 56));
}

uint64_t sub_99D50(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v7 = *v2;
  swift_task_dealloc(*(void *)(*v2 + 48));
  swift_task_dealloc(*(void *)(v5 + 40));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
}

uint64_t sub_99DB4(void *a1)
{
  uint64_t v5 = v1;
  uint64_t v7 = sub_A8E4();
  uint64_t v110 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_6D30();
  uint64_t v109 = v8;
  sub_494C(&qword_189CE8);
  sub_6D20();
  __chkstk_darwin(v9);
  sub_AA58();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v103 - v12;
  __chkstk_darwin(v11);
  sub_ABA4();
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v103 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  __chkstk_darwin(v18);
  sub_9A6E8();
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v106 = (char *)&v103 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  sub_9A69C(v22, v23, v24, v25, v26, v27, v28, v29, v103);
  __chkstk_darwin(v30);
  sub_9A6D4();
  __chkstk_darwin(v31);
  sub_56B00();
  uint64_t v33 = __chkstk_darwin(v32);
  uint64_t v35 = (char *)&v103 - v34;
  __chkstk_darwin(v33);
  id v39 = (char *)&v103 - v38;
  if (a1)
  {
    uint64_t v104 = v36;
    uint64_t v40 = type metadata accessor for DialogCalendarRange.Builder(0LL);
    sub_A72C(v40);
    id v41 = a1;
    DialogCalendarRange.Builder.init()();
    id v42 = [v5 start];
    if (v42)
    {
      uint64_t v43 = v42;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v42);

      uint64_t v44 = 0LL;
    }

    else
    {
      uint64_t v44 = 1LL;
    }

    sub_7DF0C((uint64_t)v35, v44);
    sub_55C74((uint64_t)v35, (uint64_t)v39, &qword_189CE8);
    int v50 = sub_72FC4((uint64_t)v39);
    id v105 = v41;
    if (v50)
    {
      uint64_t v51 = sub_2012C((uint64_t)v39, &qword_189CE8);
      id v52 = sub_56344(v51, "sampleEndDate");
      if (v52)
      {
        uint64_t v53 = v52;
        sub_9A694((uint64_t)v52);

        uint64_t v54 = 0LL;
      }

      else
      {
        uint64_t v54 = 1LL;
      }

      uint64_t v59 = v107;
      uint64_t v62 = sub_7DF0C(v2, v54);
      sub_9A6BC(v62, v63, &qword_189CE8);
      uint64_t v64 = sub_72FC4(v3);
      if ((_DWORD)v64)
      {
        sub_9A680(v64, &qword_189CE8);
        uint64_t v56 = 0LL;
        uint64_t v57 = 1LL;
      }

      else
      {
        uint64_t v72 = sub_9A668();
        uint64_t v73 = sub_9A680(v72, &qword_189CE8);
        Date.timeIntervalSince1970.getter(v73);
        sub_9A654();
        uint64_t v56 = sub_5695C();
      }

      uint64_t v58 = v108;
    }

    else
    {
      sub_23360(v109, (uint64_t)v39, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v110 + 16));
      uint64_t v55 = sub_2012C((uint64_t)v39, &qword_189CE8);
      Date.timeIntervalSince1970.getter(v55);
      sub_9A654();
      uint64_t v56 = sub_5695C();
      uint64_t v59 = v107;
      uint64_t v58 = v108;
    }

    uint64_t v74 = (uint64_t)v106;
    dispatch thunk of DialogCalendarRange.Builder.withStartSecs(_:)(v56, v57);
    swift_release();
    id v75 = [v5 end];
    if (v75)
    {
      uint64_t v76 = v75;
      sub_9A694((uint64_t)v75);

      uint64_t v77 = 0LL;
    }

    else
    {
      uint64_t v77 = 1LL;
    }

    sub_7DF0C(v74, v77);
    sub_55C74(v74, v59, &qword_189CE8);
    if (sub_72FC4(v59))
    {
      uint64_t v78 = sub_2012C(v59, &qword_189CE8);
      unint64_t v79 = v105;
      id v80 = sub_373D8(v78, "sampleEndDate");
      if (v80)
      {
        uint64_t v81 = v80;
        uint64_t v82 = v104;
        sub_9A694((uint64_t)v80);

        uint64_t v83 = 0LL;
      }

      else
      {
        uint64_t v83 = 1LL;
        uint64_t v82 = v104;
      }

      uint64_t v90 = sub_7DF0C(v82, v83);
      sub_9A6BC(v90, v91, &qword_189CE8);
      uint64_t v92 = sub_72FC4(v58);
      if ((_DWORD)v92)
      {
        sub_9A680(v92, &qword_189CE8);
        uint64_t v85 = 0LL;
        uint64_t v86 = 1LL;
      }

      else
      {
        uint64_t v99 = sub_9A668();
        uint64_t v100 = sub_9A680(v99, &qword_189CE8);
        Date.timeIntervalSince1970.getter(v100);
        sub_9A654();
        uint64_t v85 = sub_5695C();
      }
    }

    else
    {
      sub_23360(v109, v59, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v110 + 16));
      uint64_t v84 = sub_2012C(v59, &qword_189CE8);
      Date.timeIntervalSince1970.getter(v84);
      sub_9A654();
      uint64_t v85 = sub_5695C();
      unint64_t v79 = v105;
    }

    dispatch thunk of DialogCalendarRange.Builder.withEndSecs(_:)(v85, v86);
    uint64_t v101 = swift_release();
    uint64_t v98 = dispatch thunk of DialogCalendarRange.Builder.build()(v101);
  }

  else
  {
    uint64_t v45 = v37;
    uint64_t v46 = type metadata accessor for DialogCalendarRange.Builder(0LL);
    uint64_t v47 = (void *)sub_A72C(v46);
    DialogCalendarRange.Builder.init()();
    id v48 = [v5 start];
    if (v48)
    {
      sub_9A6C8((uint64_t)v48);

      uint64_t v49 = 0LL;
    }

    else
    {
      uint64_t v49 = 1LL;
    }

    sub_7DF0C(v4, v49);
    sub_55C74(v4, (uint64_t)v17, &qword_189CE8);
    int v60 = sub_72FC4((uint64_t)v17);
    if (v60)
    {
      sub_2012C((uint64_t)v17, &qword_189CE8);
      double v61 = 0.0;
    }

    else
    {
      uint64_t v65 = v110;
      sub_23360(v109, (uint64_t)v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v110 + 16));
      uint64_t v66 = sub_2012C((uint64_t)v17, &qword_189CE8);
      double v67 = Date.timeIntervalSince1970.getter(v66);
      sub_7569C(*(uint64_t (**)(uint64_t, uint64_t))(v65 + 8));
      double v61 = v67;
    }

    dispatch thunk of DialogCalendarRange.Builder.withStartSecs(_:)(*(void *)&v61, v60 != 0);
    swift_release();
    id v68 = [v5 end];
    if (v68)
    {
      uint64_t v69 = v68;
      uint64_t v70 = v45;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v68);

      uint64_t v71 = 0LL;
    }

    else
    {
      uint64_t v71 = 1LL;
      uint64_t v70 = v45;
    }

    sub_7DF0C(v70, v71);
    sub_55C74(v70, (uint64_t)v13, &qword_189CE8);
    uint64_t v87 = sub_72FC4((uint64_t)v13);
    int v88 = v87;
    if ((_DWORD)v87)
    {
      sub_3D7BC(v87, &qword_189CE8);
      double v89 = 0.0;
    }

    else
    {
      uint64_t v93 = v110;
      uint64_t v94 = sub_23360(v109, (uint64_t)v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v110 + 16));
      uint64_t v95 = sub_3D7BC(v94, &qword_189CE8);
      double v96 = Date.timeIntervalSince1970.getter(v95);
      sub_7569C(*(uint64_t (**)(uint64_t, uint64_t))(v93 + 8));
      double v89 = v96;
    }

    dispatch thunk of DialogCalendarRange.Builder.withEndSecs(_:)(*(void *)&v89, v88 != 0);
    uint64_t v97 = swift_release();
    uint64_t v98 = dispatch thunk of DialogCalendarRange.Builder.build()(v97);
  }

  swift_release();
  return v98;
}

uint64_t sub_9A3FC(id a1)
{
  unsigned __int8 v2 = a1;
  if (a1 == 193 || a1 == 159)
  {
    id v3 = sub_566D0((uint64_t)a1, "minimum");
    double v5 = v4;
    a1 = sub_566D0((uint64_t)v3, "maximum");
    if (v5 == v6) {
      return 0LL;
    }
  }

  sub_566D0((uint64_t)a1, "average");
  double v9 = v8;
  uint64_t v10 = sub_7D950(v1);
  sub_90668(v10, v11, v2, v9);
  sub_249D4();
  return sub_5695C();
}

uint64_t sub_9A498(char a1)
{
  *(_BYTE *)(v1 + 2sub_D878(v0 + 4) = a1;
  return swift_task_switch(sub_9A4B0, 0LL, 0LL);
}

uint64_t sub_9A4B0()
{
  int v1 = *(unsigned __int8 *)(v0 + 24);
  switch(v1)
  {
    case 147:
    case 150:
      return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(26989LL, 0xE200000000000000LL);
    case 193:
      return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(5066818LL, 0xE300000000000000LL);
    case 174:
      id v3 = (void *)swift_task_alloc(dword_18B714);
      *(void *)(v0 + 1sub_D878(v0 + 6) = v3;
      *id v3 = v0;
      v3[1] = sub_9A594;
      return sub_5EDE4(0x5073687461657262LL, 0xED00006E694D7265LL);
    case 184:
      return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(0x7370657473LL, 0xE500000000000000LL);
    case 159:
      return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(5066818LL, 0xE300000000000000LL);
    default:
      return (*(uint64_t (**)(void, unint64_t))(v0 + 8))(0LL, 0xE000000000000000LL);
  }

uint64_t sub_9A594(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void *)(*v2 + 16);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (a2) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = 0LL;
  }
  if (a2) {
    unint64_t v8 = a2;
  }
  else {
    unint64_t v8 = 0xE000000000000000LL;
  }
  return (*(uint64_t (**)(uint64_t, unint64_t))(v6 + 8))(v7, v8);
}

uint64_t sub_9A5F4(void *a1)
{
  id v1 = [a1 quantityIdentifier];
  if (!v1) {
    return 0LL;
  }
  unsigned __int8 v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_9A654()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_9A668()
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(v2 - 104) + 16LL))( *(void *)(v2 - 112),  v1,  v0);
}

uint64_t sub_9A680(uint64_t a1, uint64_t *a2)
{
  return sub_2012C(v2, a2);
}

uint64_t sub_9A688(uint64_t a1, uint64_t a2)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, 1LL, v2);
}

uint64_t sub_9A694(uint64_t a1)
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

void sub_9A69C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 12_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = (char *)&a9 - v9;
}

uint64_t sub_9A6B4(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_9A6BC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_55C74(v3, v4, a3);
}

uint64_t sub_9A6C8(uint64_t a1)
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

  ;
}

void sub_9A6E8()
{
  *(void *)(v2 - 120) = v0 - v1;
}

uint64_t sub_9A6FC()
{
  return sub_2012C(v1, v0);
}

uint64_t sub_9A708(uint64_t a1, void *a2, _OWORD *a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v6);
  uint64_t v115 = (char *)&v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v116 = *(void *)(v8 - 8);
  uint64_t v117 = (void *)v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v112 = (char *)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v111 = (char *)&v110 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v110 - v18;
  uint64_t v20 = Logger.wellness.unsafeMutableAddressor(v17);
  swift_beginAccess(v20, v123, 0LL, 0LL);
  uint64_t v113 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v114 = v20;
  uint64_t v21 = v113(v19, v20, v11);
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)sub_232D0();
    uint64_t v110 = v11;
    uint64_t v25 = a2;
    uint64_t v26 = a3;
    uint64_t v27 = a1;
    uint64_t v28 = v24;
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl(&dword_0, v22, v23, "Getting Med Logging Flow", v24, 2u);
    uint64_t v29 = (uint64_t)v28;
    a1 = v27;
    a3 = v26;
    a2 = v25;
    uint64_t v11 = v110;
    sub_5050(v29);
  }

  uint64_t v30 = sub_9B170((uint64_t)v19);
  Date.init()(v30);
  isLoggingTimeframeToday(from:todayDate:)(a1, (uint64_t)v10, v31, v32, v33, v34);
  if ((v40 & 1) != 0)
  {
    sub_9B128();
  }

  else
  {
    isLoggingTimeframeNone(from:)(a1, v35, v36, v37, v38, v39);
    char v42 = v41;
    sub_9B128();
    if ((v42 & 1) == 0)
    {
      uint64_t v125 = &type metadata for ComplexMedLoggingErrorFlow;
      unint64_t v126 = sub_808CC();
      uint64_t v91 = sub_20308((uint64_t)&unk_17E8C8, 328LL);
      v124[0] = v91;
      sub_A13C(a3, (_OWORD *)(v91 + 24));
      sub_D7EC((uint64_t)a2, v91 + 184);
      uint64_t v92 = type metadata accessor for ResponseFactory(0LL);
      sub_A72C(v92);
      uint64_t v93 = sub_9B0E0();
      uint64_t v94 = ResponseFactory.init()(v93);
      *(void *)(v91 + 2sub_D7EC(v0 + 16, v0 + 56) = v92;
      *(void *)(v91 + 26sub_D878(v0 + 4) = &protocol witness table for ResponseFactory;
      *(void *)(v91 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v94;
      sub_9B15C();
      uint64_t v95 = (uint64_t)v115;
      static CATOption.defaultMode.getter();
      sub_AAF8(v95);
      uint64_t v96 = sub_9B138();
      static CATOption.defaultMode.getter();
      sub_AAF0(v95);
      uint64_t v97 = (objc_class *)sub_9B150();
      id v98 = [objc_allocWithZone(v97) init];
      *(void *)(v91 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v97;
      *(void *)(v91 + 320) = &protocol witness table for MedStorageHelper;
      *(void *)(v91 + 280) = v96;
      *(void *)(v91 + 28_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v98;
      *(void *)(v91 + 1sub_D878(v0 + 6) = a1;
      *(_WORD *)(v91 + 22sub_D878(v0 + 4) = 1;
      *(void *)(v91 + 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v92;
LABEL_18:
      sub_494C(&qword_18D5E8);
      uint64_t v107 = sub_9B144();
      double v89 = (__n128 *)sub_9B0BC(v107);
      sub_9B164(v89, (__n128)xmmword_137250);
      uint64_t v90 = (__int128 *)v124;
      goto LABEL_19;
    }
  }

  uint64_t v43 = a2[3];
  uint64_t v44 = a2[4];
  sub_500C(a2, v43);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v44 + 8))(v119, v43, v44);
  isSpecificMedRequest(from:deviceState:)();
  uint64_t v46 = v45;
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v119);
  if ((v46 & 1) == 0)
  {
    sub_9B110();
    uint64_t v79 = (uint64_t)v112;
    uint64_t v80 = v113(v112, v46, v11);
    uint64_t v81 = (void *)Logger.logObject.getter(v80);
    os_log_type_t v82 = static os_log_type_t.debug.getter();
    if (sub_232DC(v82))
    {
      uint64_t v83 = (_WORD *)sub_232D0();
      *uint64_t v83 = 0;
      sub_41964(&dword_0, v84, v85, "Got generic med request, returning GenericMedLoggingFlow.");
      sub_5050((uint64_t)v83);
    }

    sub_9B170(v79);
    sub_D7EC((uint64_t)a2, (uint64_t)&v120);
    sub_A13C(a3, v119);
    sub_9B0EC();
    uint64_t v86 = type metadata accessor for GenericMedLoggingFlow();
    sub_20308(v86, 401LL);
    uint64_t v87 = sub_9B0E0();
    uint64_t v75 = sub_2A18C(v87, &v120, v119, v124, (uint64_t)v118);
    uint64_t v121 = v86;
    uint64_t v76 = &qword_18AF08;
    uint64_t v77 = &unk_139880;
    uint64_t v78 = type metadata accessor for GenericMedLoggingFlow;
    goto LABEL_15;
  }

  uint64_t v117 = a2;
  uint64_t v47 = a3;
  hasDateEdit(from:)();
  char v49 = v48;
  BOOL v55 = hasTimeEdit(from:)(a1, v50, v51, v52, v53, v54);
  BOOL v56 = v55;
  if ((v49 & 1) != 0 || v55)
  {
    uint64_t v125 = &type metadata for ComplexMedLoggingErrorFlow;
    unint64_t v126 = sub_808CC();
    uint64_t v99 = sub_20308((uint64_t)&unk_17E8C8, 328LL);
    v124[0] = v99;
    sub_A13C(v47, (_OWORD *)(v99 + 24));
    sub_D7EC((uint64_t)v117, v99 + 184);
    uint64_t v100 = type metadata accessor for ResponseFactory(0LL);
    sub_A72C(v100);
    uint64_t v101 = sub_9B0E0();
    uint64_t v102 = ResponseFactory.init()(v101);
    *(void *)(v99 + 2sub_D7EC(v0 + 16, v0 + 56) = v100;
    *(void *)(v99 + 26sub_D878(v0 + 4) = &protocol witness table for ResponseFactory;
    *(void *)(v99 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v102;
    sub_9B15C();
    uint64_t v103 = (uint64_t)v115;
    static CATOption.defaultMode.getter();
    sub_AAF8(v103);
    uint64_t v104 = sub_9B138();
    static CATOption.defaultMode.getter();
    sub_AAF0(v103);
    id v105 = (objc_class *)sub_9B150();
    id v106 = [objc_allocWithZone(v105) init];
    *(void *)(v99 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v105;
    *(void *)(v99 + 320) = &protocol witness table for MedStorageHelper;
    *(void *)(v99 + 280) = v104;
    *(void *)(v99 + 28_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v106;
    *(void *)(v99 + 1sub_D878(v0 + 6) = a1;
    *(_BYTE *)(v99 + 22sub_D878(v0 + 4) = v49 & 1;
    *(_BYTE *)(v99 + 225) = v56;
    *(void *)(v99 + 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v100;
    goto LABEL_18;
  }

  sub_9B110();
  uint64_t v57 = (uint64_t)v111;
  uint64_t v58 = v113(v111, v46, v11);
  uint64_t v59 = (void *)Logger.logObject.getter(v58);
  os_log_type_t v60 = static os_log_type_t.debug.getter();
  if (sub_232DC(v60))
  {
    double v61 = (_WORD *)sub_232D0();
    *double v61 = 0;
    sub_41964(&dword_0, v62, v63, "Got specific med request without edits, returning SpecificMedLoggingFlow.");
    sub_5050((uint64_t)v61);
  }

  sub_9B170(v57);
  sub_D7EC((uint64_t)v117, (uint64_t)&v120);
  sub_A13C(v47, v119);
  uint64_t v64 = sub_9B0EC();
  uint64_t v65 = type metadata accessor for ResponseFactory(v64);
  sub_A72C(v65);
  uint64_t v66 = sub_9B0E0();
  uint64_t v67 = ResponseFactory.init()(v66);
  sub_9B15C();
  uint64_t v68 = (uint64_t)v115;
  static CATOption.defaultMode.getter();
  uint64_t v69 = sub_AAF8(v68);
  type metadata accessor for WellnessCATs(0LL);
  static CATOption.defaultMode.getter();
  uint64_t v70 = sub_AAF0(v68);
  id v71 = [objc_allocWithZone((Class)type metadata accessor for LogSpecificMedicationsIntentHandler(0)) init];
  id v72 = [objc_allocWithZone((Class)type metadata accessor for MedStorageHelper(0)) init];
  uint64_t v73 = type metadata accessor for SpecificMedLoggingFlow();
  uint64_t v74 = sub_20308(v73, 440LL);
  uint64_t v75 = sub_9AEAC(a1, &v120, v119, v124, v67, v69, v70, (uint64_t)v71, (uint64_t)v72, (uint64_t)v118, v74);
  uint64_t v121 = v73;
  uint64_t v76 = &qword_18AF00;
  uint64_t v77 = &unk_13D3A8;
  uint64_t v78 = type metadata accessor for SpecificMedLoggingFlow;
LABEL_15:
  uint64_t v122 = sub_2322C(v76, (uint64_t (*)(uint64_t))v78, (uint64_t)v77);
  *(void *)&__int128 v120 = v75;
  sub_494C(&qword_18D5E8);
  uint64_t v88 = sub_9B144();
  double v89 = (__n128 *)sub_9B0BC(v88);
  sub_9B164(v89, (__n128)xmmword_137250);
  uint64_t v90 = &v120;
LABEL_19:
  GuardedFlow.init(mainFlow:guards:enforceProtectedHealthApp:)(v119, v90, v89, 1LL);
  sub_891E8();
  uint64_t v108 = Flow.eraseToAnyFlow()(&type metadata for GuardedFlow);
  sub_89224((uint64_t)v119);
  return v108;
}

uint64_t sub_9AE40()
{
  return swift_deallocObject(v0, 328LL, 7LL);
}

uint64_t sub_9AEAC( uint64_t a1, __int128 *a2, _OWORD *a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v30 = type metadata accessor for ResponseFactory(0LL);
  uint64_t v31 = &protocol witness table for ResponseFactory;
  *(void *)&__int128 v29 = a5;
  uint64_t v27 = type metadata accessor for MedStorageHelper(0LL);
  uint64_t v28 = &protocol witness table for MedStorageHelper;
  *(void *)&__int128 v26 = a9;
  *(void *)(a11 + 1sub_D878(v0 + 6) = a1;
  sub_D7EC((uint64_t)a2, a11 + 24);
  sub_A13C(a3, (_OWORD *)(a11 + 64));
  sub_35A9C(a4, (void *)(a11 + 224));
  sub_20004(&v29, a11 + 296);
  *(void *)(a11 + 33sub_D878(v0 + 6) = a6;
  *(void *)(a11 + 34sub_D878(v0 + 4) = a7;
  *(void *)(a11 + 35_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a8;
  sub_20004(&v26, a11 + 400);
  sub_20004(a2, (uint64_t)v22);
  memcpy(__dst, a3, sizeof(__dst));
  if (*(void *)(a10 + 24))
  {
    sub_D878(__dst);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v22);
    sub_20004((__int128 *)a10, (uint64_t)&v23);
  }

  else
  {
    uint64_t v24 = &type metadata for MedsCorrectionsFlowProvider;
    uint64_t v25 = &off_17F1C8;
    uint64_t v18 = swift_allocObject(&unk_17E8F0, 216LL, 7LL);
    *(void *)&__int128 v23 = v18;
    sub_20004(v22, v18 + 16);
    memcpy((void *)(v18 + 56), __dst, 0xA0uLL);
    sub_9B07C(a10);
  }

  sub_20004(&v23, a11 + 360);
  return a11;
}

uint64_t sub_9B038()
{
  return swift_deallocObject(v0, 216LL, 7LL);
}

uint64_t sub_9B07C(uint64_t a1)
{
  uint64_t v2 = sub_494C(&qword_18AF10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_9B0BC(uint64_t a1)
{
  return swift_allocObject( v1,  ((*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL))
         + *(void *)(*(void *)(a1 - 8) + 72LL),
           *(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) | 7LL);
}

uint64_t sub_9B0E0()
{
  return swift_retain(v0);
}

uint64_t sub_9B0EC()
{
  *(void *)(v0 + 9sub_D878(v0 + 6) = 0LL;
  *(_OWORD *)(v0 + 6sub_D878(v0 + 4) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v1 - 160) = 0u;
  *(_OWORD *)(v1 - 14sub_D878(v0 + 4) = 0u;
  *(_OWORD *)(v1 - 12_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0u;
  *(_OWORD *)(v1 - 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
  *(_BYTE *)(v1 - 9sub_D878(v0 + 6) = -64;
  return 0LL;
}

uint64_t sub_9B110()
{
  return swift_beginAccess(*(void *)(v0 + 32), v1 - 208, 0LL, 0LL);
}

uint64_t sub_9B128()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v0 + 48) + 8LL))(v1, *(void *)(v0 + 56));
}

uint64_t sub_9B138()
{
  return type metadata accessor for WellnessCATs(0LL);
}

uint64_t sub_9B144()
{
  return type metadata accessor for CommonFlowGuard(0LL);
}

uint64_t sub_9B150()
{
  return type metadata accessor for MedStorageHelper(0LL);
}

uint64_t sub_9B15C()
{
  return type metadata accessor for WellnessLoggingCATsSimple(0LL);
}

uint64_t sub_9B164(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return static CommonFlowGuard.ensuringDeviceIsAuthenticated.getter();
}

uint64_t sub_9B170(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t destroy for MoodPunchoutFlow(void *a1)
{
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 30);
}

uint64_t initializeWithCopy for MoodPunchoutFlow(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 2sub_D878(v0 + 4) = v4;
  (**(void (***)(void))(v4 - 8))();
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 6sub_D878(v0 + 4) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  __int128 v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 10sub_D878(v0 + 4) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  __int128 v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 14sub_D878(v0 + 4) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 120, a2 + 120);
  __int128 v8 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 18sub_D878(v0 + 4) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 160, a2 + 160);
  __int128 v9 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 22sub_D878(v0 + 4) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 200, a2 + 200);
  uint64_t v10 = *(void *)(a2 + 264);
  uint64_t v11 = *(void *)(a2 + 272);
  *(void *)(a1 + 26sub_D878(v0 + 4) = v10;
  *(void *)(a1 + 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v11;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 240, a2 + 240);
  return a1;
}

void *assignWithCopy for MoodPunchoutFlow(void *a1, void *a2)
{
  return a1;
}

void *initializeWithTake for MoodPunchoutFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x118uLL);
}

uint64_t assignWithTake for MoodPunchoutFlow(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1sub_D878(v0 + 6) = v4;
  *(void *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + sub_D7EC(v0 + 16, v0 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 72);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 80));
  __int128 v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 9sub_D878(v0 + 6) = v5;
  *(void *)(a1 + 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 112);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 120));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 13sub_D878(v0 + 6) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 152);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 160));
  __int128 v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 17sub_D878(v0 + 6) = v6;
  *(void *)(a1 + 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 192);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 200));
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 21sub_D878(v0 + 6) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 232);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 240));
  __int128 v7 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + sub_A304(v0 - 176, v0 - 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 2sub_D7EC(v0 + 16, v0 + 56) = v7;
  *(void *)(a1 + 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 272);
  return a1;
}

uint64_t getEnumTagSinglePayload for MoodPunchoutFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 280))
    {
      LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MoodPunchoutFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0u;
    *(_OWORD *)(result + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + 21sub_D878(v0 + 6) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 18sub_D878(v0 + 4) = 0u;
    *(_OWORD *)(result + 16_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0u;
    *(_OWORD *)(result + 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + 13sub_D878(v0 + 6) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 10sub_D878(v0 + 4) = 0u;
    *(_OWORD *)(result + 8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0u;
    *(_OWORD *)(result + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + sub_D7EC(v0 + 16, v0 + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 2sub_D878(v0 + 4) = 0u;
    *(_OWORD *)(result + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0u;
    *(_OWORD *)(result + 26sub_D878(v0 + 4) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 280) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 2sub_D878(v0 + 4) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 280) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for MoodPunchoutFlow()
{
  return &type metadata for MoodPunchoutFlow;
}

uint64_t sub_9B4EC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_88FD8();
  return Flow.deferToExecuteAsync(_:)(a1, a2, &type metadata for MoodPunchoutFlow, v4);
}

uint64_t sub_9B52C(uint64_t a1)
{
  v2[143] = v1;
  v2[142] = a1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[144] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[145] = v4;
  v2[146] = sub_D8CC(v4);
  v2[147] = swift_task_alloc(v1);
  uint64_t v5 = sub_494C(&qword_189D00);
  v2[148] = sub_D8CC(*(void *)(v5 - 8));
  v2[149] = swift_task_alloc(v1);
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  v2[150] = sub_36390(v6);
  uint64_t v7 = sub_494C(&qword_18AFC0);
  v2[151] = sub_36390(v7);
  return swift_task_switch(sub_9B5D8, 0LL, 0LL);
}

uint64_t sub_9B5D8()
{
  uint64_t v1 = *(void **)(v0 + 1144);
  unint64_t v2 = v1 + 30;
  uint64_t v3 = v1[33];
  uint64_t v4 = v1[34];
  sub_500C(v1 + 30, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  uint64_t v5 = *(void *)(v0 + 1072);
  uint64_t v6 = *(void *)(v0 + 1080);
  sub_500C((void *)(v0 + 1048), v5);
  char v7 = dispatch thunk of DeviceState.isPhone.getter(v5, v6);
  sub_9BB5C((uint64_t)v1, v0 + 16);
  if ((v7 & 1) != 0)
  {
    sub_9BB90((void *)(v0 + 16));
    sub_9BC44();
LABEL_4:
    if ((HealthApps.isInstalled.getter(11LL) & 1) == 0)
    {
      uint64_t v34 = *(void *)(v0 + 1200);
      sub_D7EC((uint64_t)v2, v0 + 872);
      uint64_t v35 = type metadata accessor for ResponseFactory(0LL);
      uint64_t v36 = swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
      uint64_t v37 = ResponseFactory.init()(v36);
      *(void *)(v0 + 93sub_D878(v0 + 6) = v35;
      *(void *)(v0 + 94sub_D878(v0 + 4) = &protocol witness table for ResponseFactory;
      *(void *)(v0 + 91_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v37;
      type metadata accessor for WellnessCATsSimple(0LL);
      sub_A768();
      uint64_t v38 = CATWrapperSimple.__allocating_init(options:globals:)(v34, 0LL);
      type metadata accessor for WellnessCATs(0LL);
      sub_A768();
      uint64_t v39 = CATWrapper.__allocating_init(options:globals:)(v34, 0LL);
      *(void *)(v0 + 95_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v38;
      *(void *)(v0 + 960) = v39;
      sub_81C18();
      static ExecuteResponse.complete<A>(next:)(v0 + 872);
      sub_81BEC((void *)(v0 + 872));
      goto LABEL_17;
    }

    uint64_t v13 = (uint64_t *)(v0 + 1192);
    uint64_t v14 = *(void *)(v0 + 1192);
    sub_9BBF0();
    sub_9BC18();
    uint64_t v15 = type metadata accessor for SpeakableString(0LL);
    sub_9BC30(v15);
    uint64_t v16 = 11LL;
    goto LABEL_6;
  }

  uint64_t v8 = *(void *)(v0 + 280);
  uint64_t v9 = *(void *)(v0 + 288);
  sub_500C((void *)(v0 + 256), v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  uint64_t v10 = *(void *)(v0 + 1032);
  uint64_t v11 = *(void *)(v0 + 1040);
  sub_500C((void *)(v0 + 1008), v10);
  char v12 = dispatch thunk of DeviceState.isPad.getter(v10, v11);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 1008));
  sub_9BB90((void *)(v0 + 16));
  sub_9BC44();
  if ((v12 & 1) != 0) {
    goto LABEL_4;
  }
  uint64_t v41 = v1[33];
  uint64_t v40 = v1[34];
  sub_500C(v2, v41);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v40);
  uint64_t v42 = *(void *)(v0 + 992);
  sub_500C((void *)(v0 + 968), v42);
  char v43 = dispatch thunk of DeviceState.isWatch.getter(v42);
  uint64_t v44 = sub_9BC44();
  if ((v43 & 1) != 0)
  {
    if ((HealthApps.isInstalled.getter(7LL) & 1) == 0)
    {
      uint64_t v59 = *(void *)(v0 + 1144);
      sub_D7EC((uint64_t)v2, v0 + 304);
      sub_D7EC(v59 + 40, v0 + 344);
      sub_A13C((_OWORD *)(v59 + 80), (_OWORD *)(v0 + 384));
      *(_WORD *)(v0 + 29sub_D878(v0 + 6) = 132;
      *(_BYTE *)(v0 + 54sub_D878(v0 + 4) = 0;
      sub_3BFE4();
      static ExecuteResponse.complete<A>(next:)(v0 + 296);
      sub_9BBBC((void *)(v0 + 296));
      goto LABEL_17;
    }

    uint64_t v13 = (uint64_t *)(v0 + 1184);
    uint64_t v14 = *(void *)(v0 + 1184);
    sub_9BBF0();
    sub_9BC18();
    uint64_t v45 = type metadata accessor for SpeakableString(0LL);
    sub_9BC30(v45);
    uint64_t v16 = 7LL;
LABEL_6:
    uint64_t v17 = HealthApps.sirikitApp.getter(v16);
    sub_214AC(v14, v17);
    uint64_t v18 = *v13;
    uint64_t v19 = *(void *)(v0 + 1168);
    uint64_t v20 = *(void *)(v0 + 1160);
    uint64_t v21 = *(void *)(v0 + 1152);
    swift_release();
    swift_release();
    uint64_t v22 = sub_2012C(v18, &qword_189D00);
    uint64_t v23 = Logger.wellness.unsafeMutableAddressor(v22);
    sub_A5DC(v23, v0 + 1112);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v19, v23, v21);
    uint64_t v25 = (void *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (sub_232DC(v26))
    {
      *(_WORD *)sub_232D0() = 0;
      sub_3A440( &dword_0,  v27,  v28,  "Attempted to punchout for MoodLogging on device that can't import MentalHealthUI, returning Unsupported Device Flow.");
      sub_3A464();
    }

    uint64_t v29 = *(void *)(v0 + 1208);
    uint64_t v30 = *(void *)(v0 + 1168);
    uint64_t v31 = *(void *)(v0 + 1160);
    uint64_t v32 = *(void *)(v0 + 1152);
    uint64_t v33 = *(void *)(v0 + 1144);

    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    sub_A13C((_OWORD *)(v33 + 80), (_OWORD *)(v0 + 712));
    sub_89318();
    static ExecuteResponse.complete<A>(next:)(v0 + 712);
    sub_89354((void *)(v0 + 712));
    sub_2012C(v29, &qword_18AFC0);
    goto LABEL_17;
  }

  uint64_t v46 = *(void *)(v0 + 1176);
  uint64_t v47 = *(void *)(v0 + 1160);
  uint64_t v48 = *(void *)(v0 + 1152);
  uint64_t v49 = Logger.wellness.unsafeMutableAddressor(v44);
  sub_A5DC(v49, v0 + 1088);
  uint64_t v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v46, v49, v48);
  uint64_t v51 = (void *)Logger.logObject.getter(v50);
  os_log_type_t v52 = static os_log_type_t.error.getter();
  if (sub_232DC(v52))
  {
    *(_WORD *)sub_232D0() = 0;
    sub_3A440(&dword_0, v53, v54, "Could not create dialog on supported device, returning UnsupportedDeviceFlow");
    sub_3A464();
  }

  uint64_t v55 = *(void *)(v0 + 1176);
  uint64_t v56 = *(void *)(v0 + 1160);
  uint64_t v57 = *(void *)(v0 + 1152);
  uint64_t v58 = *(void *)(v0 + 1144);

  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
  sub_A13C((_OWORD *)(v58 + 80), (_OWORD *)(v0 + 552));
  sub_89318();
  static ExecuteResponse.complete<A>(next:)(v0 + 552);
  sub_89354((void *)(v0 + 552));
LABEL_17:
  uint64_t v60 = *(void *)(v0 + 1200);
  uint64_t v61 = *(void *)(v0 + 1192);
  uint64_t v62 = *(void *)(v0 + 1184);
  uint64_t v63 = *(void *)(v0 + 1176);
  uint64_t v64 = *(void *)(v0 + 1168);
  swift_task_dealloc(*(void *)(v0 + 1208));
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_9BB0C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18DA14);
  *(void *)(v1 + 1sub_D878(v0 + 6) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_A108;
  return sub_9B52C(a1);
}

uint64_t sub_9BB5C(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_9BB90(void *a1)
{
  return a1;
}

void *sub_9BBBC(void *a1)
{
  return a1;
}

void sub_9BBF0()
{
  uint64_t v1 = sub_500C((void *)(*(void *)(v0 + 1144) + 40LL), *(void *)(*(void *)(v0 + 1144) + 64LL));
  sub_11EC54(*v1);
}

uint64_t sub_9BC18()
{
  return String.toSpeakableString.getter(1685024621LL, 0xE400000000000000LL);
}

uint64_t sub_9BC30(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 0LL, 1LL, a1);
}

uint64_t sub_9BC44()
{
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
}

void sub_9BC4C(void *a1, __int128 *a2, __int128 *a3)
{
}

void sub_9BC98(void *__src, __int128 *a2, __int128 *a3)
{
}

uint64_t sub_9BCE4()
{
  uint64_t v0 = sub_D984();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = Logger.wellness.unsafeMutableAddressor(v2);
  sub_A5DC(v5, (uint64_t)v13);
  uint64_t v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 16))(v4, v5, v0);
  char v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)sub_232D0();
    *(_WORD *)uint64_t v9 = 0;
    sub_232EC(&dword_0, v7, v8, "In MedNameDisambiguationStrategy's actionForInput().", v9);
    sub_5050((uint64_t)v9);
  }

  uint64_t v10 = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return static ActionForInput.handle()(v10);
}

uint64_t sub_9BDE8(uint64_t a1, uint64_t a2)
{
  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v3[14] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[15] = v5;
  v3[16] = sub_D8CC(v5);
  v3[17] = sub_A5B8();
  uint64_t v6 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[18] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[19] = v7;
  v3[20] = sub_A5C0(v7);
  uint64_t v8 = sub_D984();
  v3[21] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[22] = v9;
  v3[23] = sub_A5C0(v9);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_9BE70(uint64_t a1)
{
  uint64_t v3 = v1[22];
  uint64_t v2 = (os_log_s *)v1[23];
  uint64_t v4 = v1[21];
  uint64_t v5 = Logger.wellness.unsafeMutableAddressor(a1);
  sub_A5DC(v5, (uint64_t)(v1 + 7));
  uint64_t v6 = (*(uint64_t (**)(os_log_s *, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  uint64_t v7 = v2;
  Logger.logObject.getter(v6);
  os_log_type_t v8 = sub_AB70();
  if (sub_A988(v8))
  {
    uint64_t v9 = (uint8_t *)sub_232D0();
    *(_WORD *)uint64_t v9 = 0;
    sub_232EC(&dword_0, v2, (os_log_type_t)v2, "MedScheduleDisambiguationStrategy: makePromptForDisambiguation", v9);
    sub_5050((uint64_t)v9);
  }

  uint64_t v10 = v1[22];
  uint64_t v11 = v1[23];
  uint64_t v12 = v1[21];
  uint64_t v14 = v1[16];
  uint64_t v13 = v1[17];
  uint64_t v16 = v1[14];
  uint64_t v15 = v1[15];
  uint64_t v25 = v1[13];

  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
  static DialogPhase.clarification.getter(v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v14, v13, v16);
  OutputGenerationManifest.init(dialogPhase:_:)(v14, sub_A633C, 0LL);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v16);
  OutputGenerationManifest.listenAfterSpeaking.setter(0LL);
  uint64_t v18 = sub_494C(&qword_18DB78);
  uint64_t v19 = PaginatedItemContainer.items.getter(v18);
  v1[24] = v19;
  uint64_t v20 = sub_9CE70( v19,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_9D1D8);
  v1[25] = v20;
  uint64_t v21 = *sub_500C((void *)(v25 + 56), *(void *)(v25 + 80));
  uint64_t v22 = unk_18CD44;
  os_log_type_t v26 = (uint64_t (*)(char, char, char, char, uint64_t, uint64_t, uint64_t))((char *)&dword_18CD40 + dword_18CD40);
  swift_bridgeObjectRetain(v19);
  uint64_t v23 = (void *)swift_task_alloc(v22);
  v1[26] = v23;
  *uint64_t v23 = v1;
  v23[1] = sub_9C05C;
  return v26(0, 1, 1, 0, (uint64_t)v20, v21, v19);
}

uint64_t sub_9C05C(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 208LL);
  v3[27] = a1;
  v3[28] = v1;
  swift_task_dealloc(v4);
  uint64_t v7 = v3 + 24;
  uint64_t v5 = v3[24];
  uint64_t v6 = v7[1];
  if (v1)
  {
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v6);
  }

  else
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v5);
  }

  sub_A964();
  return swift_task_switch(v8, v9, v10);
}

uint64_t sub_9C0F0()
{
  uint64_t v1 = *(void *)(v0 + 104);
  id v2 = [*(id *)(v0 + 216) patternId];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  uint64_t v5 = v4;

  OutputGenerationManifest.responseViewId.setter(v3, v5);
  sub_D7EC(v1 + 176, v0 + 16);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 48);
  sub_500C((void *)(v0 + 16), v6);
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)[1]);
  *(void *)(v0 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v8;
  void *v8 = v0;
  v8[1] = sub_9C1C4;
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)( *(void *)(v0 + 88),  *(void *)(v0 + 216),  *(void *)(v0 + 160),  v6,  v7);
}

uint64_t sub_9C1C4()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 232LL);
  *(void *)(*(void *)v1 + 24Hasher.init(_seed:)(v1, 0LL) = v0;
  swift_task_dealloc(v2);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_9C21C()
{
  return sub_2499C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_9C264()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 128);

  sub_9D1F8();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 16));
  sub_A67C();
  sub_A7C8();
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_9C2E8()
{
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 144);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 16));
  sub_9D208();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  return sub_2499C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_9C34C(uint64_t a1, uint64_t a2)
{
  v2[23] = a1;
  v2[24] = a2;
  uint64_t v3 = type metadata accessor for Parse.DirectInvocation(0LL);
  v2[25] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[26] = v4;
  v2[27] = sub_A5C0(v4);
  uint64_t v5 = type metadata accessor for Parse(0LL);
  v2[28] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[29] = v6;
  v2[30] = sub_D8CC(v6);
  v2[31] = sub_A5B8();
  uint64_t v7 = sub_D984();
  v2[32] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[33] = v8;
  v2[34] = sub_D8CC(v8);
  v2[35] = sub_A5B8();
  v2[36] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_9C3E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 288);
  uint64_t v3 = *(void *)(v1 + 256);
  uint64_t v4 = *(void *)(v1 + 264);
  uint64_t v5 = Logger.wellness.unsafeMutableAddressor(a1);
  sub_A5DC(v5, v1 + 72);
  uint64_t v76 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  uint64_t v77 = v5;
  uint64_t v6 = v76(v2, v5, v3);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)sub_232D0();
    *(_WORD *)uint64_t v9 = 0;
    sub_232EC(&dword_0, v7, v8, "MedScheduleDisambiguationStrategy: parseDisambiguationResponse", v9);
    sub_5050((uint64_t)v9);
  }

  uint64_t v10 = *(void *)(v1 + 288);
  uint64_t v11 = *(void *)(v1 + 256);
  uint64_t v12 = *(void *)(v1 + 264);
  uint64_t v14 = *(void *)(v1 + 240);
  uint64_t v13 = *(void *)(v1 + 248);
  uint64_t v16 = *(void *)(v1 + 224);
  uint64_t v15 = *(void *)(v1 + 232);

  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
  uint64_t v18 = v17(v10, v11);
  Input.parse.getter(v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v14, v13, v16);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v15 + 88))(v14, v16) == enum case for Parse.directInvocation(_:))
  {
    uint64_t v19 = *(void *)(v1 + 240);
    uint64_t v20 = *(void *)(v1 + 216);
    uint64_t v22 = *(void *)(v1 + 200);
    uint64_t v21 = *(void *)(v1 + 208);
    (*(void (**)(uint64_t, void))(*(void *)(v1 + 232) + 96LL))(v19, *(void *)(v1 + 224));
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v20, v19, v22);
    uint64_t v24 = Parse.DirectInvocation.userData.getter(v23);
    if (v24)
    {
      uint64_t v25 = v24;
      sub_12BE4C(0x656C756465686373LL, 0xEA00000000004449LL, v24, (_OWORD *)(v1 + 16));
      swift_bridgeObjectRelease(v25);
      if (*(void *)(v1 + 40))
      {
        if ((swift_dynamicCast(v1 + 152, v1 + 16, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
        {
          uint64_t v26 = *(void *)(v1 + 248);
          uint64_t v27 = *(void *)(v1 + 224);
          uint64_t v28 = *(void *)(v1 + 232);
          uint64_t v29 = *(void *)(v1 + 160);
          *(void *)(v1 + 16_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *(void *)(v1 + 152);
          *(void *)(v1 + 17sub_D878(v0 + 6) = v29;
          static DisambiguationResult.chosenItem(_:)(v1 + 168, &type metadata for String);
          sub_9D1F8();
          (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
          swift_bridgeObjectRelease(v29);
          goto LABEL_16;
        }

        goto LABEL_13;
      }
    }

    else
    {
      *(_OWORD *)(v1 + 1sub_D878(v0 + 6) = 0u;
      *(_OWORD *)(v1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
    }

    sub_2012C(v1 + 16, &qword_18AA78);
LABEL_13:
    uint64_t v49 = *(os_log_s **)(v1 + 280);
    uint64_t v50 = sub_A5DC(v77, v1 + 96);
    uint64_t v58 = sub_249DC(v50, v51, v52, v53, v54, v55, v56, v57, v71, v1 + 136, (uint64_t)v17, v76);
    Logger.logObject.getter(v58);
    os_log_type_t v59 = sub_AB70();
    if (sub_A988(v59))
    {
      uint64_t v60 = (uint8_t *)sub_232D0();
      *(_WORD *)uint64_t v60 = 0;
      sub_232EC( &dword_0,  v49,  (os_log_type_t)v77,  "error in parseDisambiguationResponse for medication schedule; could not unpack directInvocation.",
        v60);
      sub_5050((uint64_t)v60);
    }

    uint64_t v61 = *(void *)(v1 + 280);
    uint64_t v62 = *(void *)(v1 + 256);
    uint64_t v78 = *(void *)(v1 + 248);
    uint64_t v64 = *(void *)(v1 + 224);
    uint64_t v63 = *(void *)(v1 + 232);
    uint64_t v65 = *(void *)(v1 + 208);
    uint64_t v66 = *(void *)(v1 + 216);
    uint64_t v67 = *(void *)(v1 + 200);

    v75(v61, v62);
    *(void *)(v1 + 13sub_D878(v0 + 6) = 0LL;
    *(void *)(v1 + 14sub_D878(v0 + 4) = 0xE000000000000000LL;
    static DisambiguationResult.chosenItem(_:)(v73, &type metadata for String);
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v66, v67);
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v78, v64);
    goto LABEL_16;
  }

  uint64_t v30 = *(os_log_s **)(v1 + 272);
  uint64_t v31 = sub_A5DC(v77, v1 + 48);
  uint64_t v39 = sub_249DC(v31, v32, v33, v34, v35, v36, v37, v38, v71, v72, v1 + 120, v76);
  Logger.logObject.getter(v39);
  os_log_type_t v40 = sub_AB70();
  if (sub_A988(v40))
  {
    uint64_t v41 = (uint8_t *)sub_232D0();
    *(_WORD *)uint64_t v41 = 0;
    sub_232EC(&dword_0, v30, (os_log_type_t)v77, "error in parsing disambiguation response for medication name.", v41);
    sub_5050((uint64_t)v41);
  }

  uint64_t v42 = *(void *)(v1 + 272);
  uint64_t v44 = *(void *)(v1 + 248);
  uint64_t v43 = *(void *)(v1 + 256);
  uint64_t v46 = *(void *)(v1 + 232);
  uint64_t v45 = *(void *)(v1 + 240);
  uint64_t v47 = *(void *)(v1 + 224);

  v17(v42, v43);
  *(void *)(v1 + 120) = 0LL;
  *(void *)(v1 + 12_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0xE000000000000000LL;
  static DisambiguationResult.chosenItem(_:)(v74, &type metadata for String);
  uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
  v48(v44, v47);
  v48(v45, v47);
LABEL_16:
  uint64_t v68 = *(void *)(v1 + 280);
  uint64_t v69 = *(void *)(v1 + 216);
  swift_task_dealloc(*(void *)(v1 + 288));
  swift_task_dealloc(v68);
  sub_A67C();
  sub_A7C8();
  sub_A760();
  swift_task_dealloc(v69);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_9C7F0( uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9)
{
  os_log_type_t v82 = a8;
  uint64_t v84 = a6;
  uint64_t v83 = a5;
  uint64_t v87 = a4;
  uint64_t v80 = a9;
  uint64_t v81 = type metadata accessor for Logger(0LL);
  uint64_t v85 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v88 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_494C(&qword_189D00);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v79 - v18;
  uint64_t v20 = type metadata accessor for SpeakableString(0LL);
  uint64_t v21 = *(char **)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v79 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v79 - v27;
  __chkstk_darwin(v26);
  double v89 = (char *)&v79 - v29;
  uint64_t v30 = a1;
  uint64_t v32 = v31;
  String.toSpeakableString.getter(v30, a2);
  uint64_t v86 = v28;
  uint64_t v33 = v82;
  String.toSpeakableString.getter(a3, v87);
  uint64_t v87 = v32;
  String.toSpeakableString.getter(v83, v84);
  unint64_t v34 = 0xE100000000000000LL;
  if (a7 == 48 && v33 == (void *)0xE100000000000000LL)
  {
    uint64_t v39 = 32LL;
    uint64_t v37 = v21;
    uint64_t v38 = v80;
  }

  else
  {
    char v36 = _stringCompareWithSmolCheck(_:_:expecting:)(a7, v33, 48LL, 0xE100000000000000LL, 0LL);
    uint64_t v37 = v21;
    uint64_t v38 = v80;
    if ((v36 & 1) != 0)
    {
      uint64_t v39 = 32LL;
    }

    else
    {
      uint64_t v94 = 0x20646E6128LL;
      unint64_t v95 = 0xE500000000000000LL;
      v40._uint64_t countAndFlagsBits = a7;
      v40._object = v33;
      String.append(_:)(v40);
      v41._uint64_t countAndFlagsBits = 0x2965726F6D20LL;
      v41._object = (void *)0xE600000000000000LL;
      String.append(_:)(v41);
      uint64_t v39 = v94;
      unint64_t v34 = v95;
    }
  }

  String.toSpeakableString.getter(v39, v34);
  uint64_t v42 = swift_bridgeObjectRelease(v34);
  uint64_t v43 = SpeakableString.print.getter(v42);
  unint64_t v45 = v44;
  uint64_t v94 = v43;
  unint64_t v95 = v44;
  __int128 v96 = xmmword_13BFE0;
  unint64_t v97 = 0xBFF0000000000000LL;
  char v98 = 0;
  __int128 v99 = xmmword_13BFF0;
  sub_D7EC(v38 + 216, (uint64_t)v91);
  uint64_t v46 = v92;
  uint64_t v47 = v93;
  sub_500C(v91, v92);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v47 + 8))(v90, v46, v47);
  uint64_t v48 = sub_77ECC(v90);
  uint64_t v50 = v49;
  swift_bridgeObjectRelease(0xEF74696E55687467LL);
  swift_bridgeObjectRelease(0xEF44496E6F697461LL);
  swift_bridgeObjectRelease(v45);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v90);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v91);
  if (v50)
  {
    uint64_t v51 = (uint64_t)v19;
    String.toSpeakableString.getter(v48, v50);
    swift_bridgeObjectRelease(v50);
    uint64_t v52 = 0LL;
  }

  else
  {
    uint64_t v52 = 1LL;
    uint64_t v51 = (uint64_t)v19;
  }

  uint64_t v53 = v81;
  uint64_t v54 = v88;
  uint64_t v55 = v24;
  uint64_t v56 = _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v51, v52, 1LL, v20);
  uint64_t v57 = Logger.wellness.unsafeMutableAddressor(v56);
  swift_beginAccess(v57, v91, 0LL, 0LL);
  uint64_t v58 = v85;
  uint64_t v59 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v85 + 16))(v54, v57, v53);
  uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
  os_log_type_t v61 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v60, v61))
  {
    uint64_t v62 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v62 = 0;
    _os_log_impl(&dword_0, v60, v61, "Converted to string quartets.", v62, 2u);
    uint64_t v63 = v62;
    uint64_t v54 = v88;
    swift_slowDealloc(v63, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v58 + 8))(v54, v53);
  uint64_t v64 = type metadata accessor for WellnessDialogStringQuartet.Builder(0LL);
  swift_allocObject(v64, *(unsigned int *)(v64 + 48), *(unsigned __int16 *)(v64 + 52));
  sub_A92D8();
  uint64_t v66 = v65;
  uint64_t v67 = (void (*)(char *, char *, uint64_t))*((void *)v37 + 2);
  uint64_t v88 = v37;
  uint64_t v68 = v86;
  v67(v17, v86, v20);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v17, 0LL, 1LL, v20);
  uint64_t v69 = v66 + OBJC_IVAR____TtCC18WellnessFlowPlugin27WellnessDialogStringQuartet7Builder_first;
  swift_beginAccess( v66 + OBJC_IVAR____TtCC18WellnessFlowPlugin27WellnessDialogStringQuartet7Builder_first,  v90,  33LL,  0LL);
  sub_796EC((uint64_t)v17, v69);
  swift_endAccess(v90);
  sub_2012C((uint64_t)v17, &qword_189D00);
  uint64_t v70 = v87;
  v67(v17, v87, v20);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v17, 0LL, 1LL, v20);
  uint64_t v71 = v66 + OBJC_IVAR____TtCC18WellnessFlowPlugin27WellnessDialogStringQuartet7Builder_second;
  swift_beginAccess( v66 + OBJC_IVAR____TtCC18WellnessFlowPlugin27WellnessDialogStringQuartet7Builder_second,  v90,  33LL,  0LL);
  sub_796EC((uint64_t)v17, v71);
  swift_endAccess(v90);
  sub_2012C((uint64_t)v17, &qword_189D00);
  v67(v17, v55, v20);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v17, 0LL, 1LL, v20);
  uint64_t v72 = v66 + OBJC_IVAR____TtCC18WellnessFlowPlugin27WellnessDialogStringQuartet7Builder_third;
  swift_beginAccess( v66 + OBJC_IVAR____TtCC18WellnessFlowPlugin27WellnessDialogStringQuartet7Builder_third,  v90,  33LL,  0LL);
  sub_796EC((uint64_t)v17, v72);
  swift_endAccess(v90);
  sub_2012C((uint64_t)v17, &qword_189D00);
  uint64_t v73 = v66 + OBJC_IVAR____TtCC18WellnessFlowPlugin27WellnessDialogStringQuartet7Builder_fourth;
  swift_beginAccess( v66 + OBJC_IVAR____TtCC18WellnessFlowPlugin27WellnessDialogStringQuartet7Builder_fourth,  v90,  33LL,  0LL);
  sub_796EC(v51, v73);
  swift_endAccess(v90);
  uint64_t v74 = type metadata accessor for WellnessDialogStringQuartet(0LL);
  swift_allocObject(v74, *(unsigned int *)(v74 + 48), *(unsigned __int16 *)(v74 + 52));
  sub_A93AC();
  uint64_t v76 = v75;
  sub_2012C(v51, &qword_189D00);
  uint64_t v77 = (void (*)(char *, uint64_t))*((void *)v88 + 1);
  v77(v55, v20);
  v77(v70, v20);
  v77(v68, v20);
  v77(v89, v20);
  return v76;
}

void *sub_9CE70( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    uint64_t v5 = (uint64_t *)(a1 + 48);
    do
    {
      uint64_t v6 = *(v5 - 2);
      uint64_t v7 = *(v5 - 1);
      uint64_t v8 = *v5;
      uint64_t v9 = v5[1];
      uint64_t v10 = v5[2];
      uint64_t v11 = v5[3];
      uint64_t v12 = v5[4];
      uint64_t v13 = v5[5];
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v13);
      uint64_t v14 = a2(v6, v7, v8, v9, v10, v11, v12, v13);
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v9);
      uint64_t v15 = swift_bridgeObjectRelease(v7);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
      uint64_t v16 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
      uint64_t v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v14);
      specialized ContiguousArray._endMutation()(v17);
      v5 += 8;
      --v3;
    }

    while (v3);
    return _swiftEmptyArrayStorage;
  }

  return result;
}

void *sub_9CFA8()
{
  return v0;
}

uint64_t sub_9CFD4()
{
  return swift_deallocClassInstance(v0, 256LL, 7LL);
}

uint64_t type metadata accessor for MedScheduleDisambiguationStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC18WellnessFlowPlugin33MedScheduleDisambiguationStrategy);
}

uint64_t sub_9D014()
{
  return sub_9BCE4();
}

uint64_t sub_9D028(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_18DA4C);
  *(void *)(v2 + 1sub_D878(v0 + 6) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_24998;
  return sub_9C34C(a1, a2);
}

uint64_t sub_9D080(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_18DA44);
  *(void *)(v2 + 1sub_D878(v0 + 6) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_24998;
  return sub_9BDE8(a1, a2);
}

uint64_t sub_9D0E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PromptForDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:)[1]);
  *(void *)(v4 + 1sub_D878(v0 + 6) = v8;
  uint64_t v9 = type metadata accessor for MedScheduleDisambiguationStrategy();
  void *v8 = v4;
  v8[1] = sub_24998;
  return PromptForDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:)(a1, a2, v9, a4);
}

uint64_t sub_9D15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PromptForDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:)[1]);
  *(void *)(v4 + 1sub_D878(v0 + 6) = v8;
  uint64_t v9 = type metadata accessor for MedScheduleDisambiguationStrategy();
  void *v8 = v4;
  v8[1] = sub_24998;
  return PromptForDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:)(a1, a2, v9, a4);
}

uint64_t sub_9D1D8( uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  return sub_9C7F0(a1, a2, a3, a4, a5, a6, a7, a8, v9);
}

uint64_t sub_9D1F8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_9D208()
{
  return swift_task_dealloc(*(void *)(v0 + 184));
}

void sub_9D218()
{
  id v0 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v1 = sub_9D30C();
  uint64_t v2 = (char *)[v0 integerForKey:v1];

  if (__OFADD__(v2, 1LL))
  {
    __break(1u);
  }

  else
  {
    id v3 = sub_9D31C();
    NSString v4 = sub_9D30C();
    [v3 setInteger:v2 + 1 forKey:v4];

    id v5 = sub_9D31C();
    [v5 synchronize];
  }

NSString sub_9D30C()
{
  return String._bridgeToObjectiveC()();
}

id sub_9D31C()
{
  return [v0 *(SEL *)(v1 + 3368)];
}

uint64_t type metadata accessor for WellnessQueryingCATsSimple(uint64_t a1)
{
  uint64_t result = qword_18DB80;
  if (!qword_18DB80) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WellnessQueryingCATsSimple);
  }
  return result;
}

uint64_t sub_9D360(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_19C350);
}

uint64_t sub_9D39C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = sub_494C(&qword_189D00);
  *(void *)(v7 + 6sub_D878(v0 + 4) = sub_36390(v8);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_9D3DC()
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = sub_494C(&qword_18A6A0);
  uint64_t v6 = sub_20308(v5, 272LL);
  uint64_t v7 = (__n128 *)sub_A0914(v6);
  uint64_t v8 = sub_A0474(v7, (__n128)xmmword_13A300);
  if (v4)
  {
    uint64_t v8 = type metadata accessor for WellnessTime(v8);
  }

  else
  {
    void v3[7] = 0LL;
    v3[8] = 0LL;
  }

  sub_A0420(v8);
  if ((v9 & 1) != 0) {
    sub_A0570();
  }
  else {
    uint64_t v10 = &type metadata for Double;
  }
  sub_A044C((uint64_t)v10);
  if ((v11 & 1) != 0) {
    sub_A0580();
  }
  else {
    uint64_t v12 = &type metadata for Double;
  }
  uint64_t v13 = sub_A04AC((uint64_t)v12);
  sub_3D7C4(v13, v14, &qword_189D00);
  uint64_t v15 = sub_ABF4();
  sub_A04D4(v15);
  if (v16)
  {
    uint64_t v17 = sub_72C38();
    sub_3D7BC(v17, &qword_189D00);
    sub_3D8B0();
  }

  else
  {
    uint64_t v18 = sub_A06AC();
    sub_3D738((uint64_t)v18);
    sub_72C38();
  }

  sub_A06C8();
  uint64_t v19 = sub_A0670((uint64_t)"queriedCalendarRange");
  if (v0)
  {
    uint64_t v19 = type metadata accessor for DialogCalendarRange(v19);
  }

  else
  {
    v3[31] = 0LL;
    v3[32] = 0LL;
  }

  sub_A0958(v19);
  sub_A040C();
  uint64_t v20 = (void *)sub_3703C();
  *(void *)(v1 + 80) = v20;
  sub_A0940(v20, (uint64_t)sub_9D50C);
  uint64_t v21 = sub_A0490(v2 + 16);
  return sub_729C8(v21, v22, v23, v24);
}

uint64_t sub_9D50C()
{
  if (v0)
  {
    sub_A964();
    return sub_363F8(v1, v2, v3);
  }

  else
  {
    sub_A08E4();
    sub_A78C();
    uint64_t v5 = sub_3D7AC();
    return sub_3D6F8(v5, v6);
  }

uint64_t sub_9D554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  void v4[5] = v3;
  _OWORD v4[2] = a1;
  v4[3] = a2;
  return sub_5F0F0((uint64_t)sub_9D568);
}

uint64_t sub_9D568()
{
  unint64_t v1 = v0[2];
  uint64_t v2 = sub_494C(&qword_18A6A0);
  uint64_t v3 = (__n128 *)sub_20308(v2, 176LL);
  v0[6] = v3;
  sub_A0500(v3, (__n128)xmmword_13A2F0);
  if (v1)
  {
    uint64_t v4 = sub_72EEC();
    unint64_t v5 = v1;
  }

  else
  {
    uint64_t v4 = sub_73610();
    v3[3].n128_u64[1] = 0LL;
    v3[4].n128_u64[0] = 0LL;
  }

  unint64_t v6 = v0[3];
  v3[3].n128_u64[0] = v5;
  v3[4].n128_u64[1] = v4;
  v3[5].n128_u64[0] = 0x74617265706D6574LL;
  v3[5].n128_u64[1] = 0xEB00000000657275LL;
  if (v6)
  {
    uint64_t v7 = sub_733C4();
    unint64_t v8 = v6;
  }

  else
  {
    uint64_t v7 = sub_73610();
    v3[6].n128_u64[1] = 0LL;
    v3[7].n128_u64[0] = 0LL;
  }

  unint64_t v9 = v0[4];
  v3[6].n128_u64[0] = v8;
  v3[7].n128_u64[1] = v7;
  v3[8].n128_u64[0] = 0xD000000000000014LL;
  sub_73318();
  v3[8].n128_u64[1] = v10;
  uint64_t v11 = 0LL;
  if (v9)
  {
    uint64_t v11 = type metadata accessor for DialogCalendarRange(0LL);
  }

  else
  {
    v3[9].n128_u64[1] = 0LL;
    v3[10].n128_u64[0] = 0LL;
  }

  v3[9].n128_u64[0] = v9;
  v3[10].n128_u64[1] = v11;
  uint64_t v12 = *((unsigned int *)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:) + 1);
  sub_A09C4();
  sub_372CC();
  sub_732B8();
  uint64_t v13 = (void *)swift_task_alloc(v12);
  v0[7] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_9D6C4;
  return v15(0xD00000000000002CLL, 0x8000000000145DD0LL, v3);
}

uint64_t sub_9D6C4()
{
  *(void *)(v1 + 6sub_D878(v0 + 4) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    sub_A964();
    return sub_363F8(v4, v5, v6);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = sub_59B14();
    return sub_3D6F8(v8, v9);
  }

uint64_t sub_9D71C()
{
  return sub_202A8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_9D748(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v9 = sub_494C(&qword_189D00);
  *(void *)(v8 + 80) = sub_36390(v9);
  sub_A964();
  return sub_A0738(v10, v11, v12);
}

uint64_t sub_9D788()
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = sub_494C(&qword_18A6A0);
  uint64_t v7 = sub_20308(v6, 368LL);
  uint64_t v8 = (__n128 *)sub_A0A70(v7);
  uint64_t v9 = sub_A0474(v8, (__n128)xmmword_13AB30);
  if (v5)
  {
    uint64_t v9 = type metadata accessor for WellnessTime(v9);
  }

  else
  {
    void v4[7] = 0LL;
    void v4[8] = 0LL;
  }

  sub_A0650(v9);
  if ((v10 & 1) != 0) {
    sub_A0570();
  }
  else {
    uint64_t v11 = &type metadata for Double;
  }
  sub_A05B4((uint64_t)v11);
  if ((v12 & 1) != 0) {
    sub_A0580();
  }
  else {
    uint64_t v13 = &type metadata for Double;
  }
  sub_A0590((uint64_t)v13);
  if ((v14 & 1) != 0) {
    sub_A0904();
  }
  else {
    uint64_t v15 = &type metadata for Double;
  }
  sub_A05D8((uint64_t)v15);
  if ((v16 & 1) != 0) {
    sub_A0A18();
  }
  else {
    uint64_t v17 = &type metadata for Double;
  }
  uint64_t v18 = sub_A0684((uint64_t)v17);
  sub_3D7C4(v18, v19, &qword_189D00);
  uint64_t v20 = sub_ABF4();
  sub_A06D8(v20);
  if (v21)
  {
    uint64_t v22 = sub_72C38();
    sub_3D7BC(v22, &qword_189D00);
    sub_3D8B0();
  }

  else
  {
    v4[39] = v1;
    uint64_t v23 = sub_A0730();
    sub_3D738((uint64_t)v23);
    sub_72C38();
  }

  sub_A09D8();
  uint64_t v24 = sub_A0964((uint64_t)"queriedCalendarRange");
  if (v0)
  {
    uint64_t v24 = type metadata accessor for DialogCalendarRange(v24);
  }

  else
  {
    v4[43] = 0LL;
    v4[44] = 0LL;
  }

  sub_A0A9C(v24);
  sub_A040C();
  uint64_t v25 = (void *)sub_3703C();
  *(void *)(v2 + 9sub_D878(v0 + 6) = v25;
  *uint64_t v25 = v2;
  v25[1] = sub_9D8FC;
  uint64_t v26 = sub_A0490(v3 + 16);
  return sub_729C8(v26, v27, v28, v29);
}

uint64_t sub_9D8FC()
{
  if (v0)
  {
    sub_A964();
    return sub_363F8(v1, v2, v3);
  }

  else
  {
    sub_A0A94();
    sub_A78C();
    uint64_t v5 = sub_3D7AC();
    return sub_3D6F8(v5, v6);
  }

#error "9D948: call analysis failed (funcsize=5)"
uint64_t sub_9D95C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  sub_72AF8();
  uint64_t v4 = v1[2];
  uint64_t v5 = sub_494C(&qword_18A6A0);
  uint64_t v6 = sub_20308(v5, 320LL);
  uint64_t v7 = (__n128 *)sub_A0A7C(v6);
  sub_A0500(v7, (__n128)xmmword_13AB60);
  if (v4)
  {
    uint64_t v8 = sub_72EEC();
    uint64_t v9 = v4;
  }

  else
  {
    uint64_t v8 = sub_A0754();
  }

  sub_A08C0(v8, v9);
  if ((v10 & 1) != 0) {
    sub_A0764();
  }
  else {
    uint64_t v11 = &type metadata for Double;
  }
  sub_A0868((uint64_t)v11);
  if ((v12 & 1) != 0) {
    sub_A0A08();
  }
  else {
    uint64_t v13 = &type metadata for Double;
  }
  sub_A0890((uint64_t)v13);
  if ((v14 & 1) != 0)
  {
    uint64_t v15 = 0LL;
    v2[25] = 0LL;
    v2[26] = 0LL;
  }

  else
  {
    uint64_t v15 = &type metadata for Double;
  }

  sub_A0774((uint64_t)v15);
  if ((v16 & 1) != 0) {
    sub_A09F8();
  }
  else {
    uint64_t v17 = v1[6];
  }
  sub_A0838(v17);
  uint64_t v18 = sub_A0978((uint64_t)"queriedCalendarRange");
  if (v0)
  {
    uint64_t v18 = type metadata accessor for DialogCalendarRange(v18);
  }

  else
  {
    v2[37] = 0LL;
    v2[38] = 0LL;
  }

  v2[36] = v0;
  v2[39] = v18;
  sub_A040C();
  sub_372CC();
  uint64_t v19 = (void *)sub_A08B8();
  v1[10] = v19;
  sub_A094C(v19, (uint64_t)sub_9DA90);
  uint64_t v20 = sub_A0518(v3 + 15);
  return sub_729C8(v20, v21, v22, v23);
}

uint64_t sub_9DA90()
{
  if (v0)
  {
    sub_A964();
    return sub_363F8(v1, v2, v3);
  }

  else
  {
    sub_A09A0();
    uint64_t v5 = sub_59B14();
    return sub_3D6F8(v5, v6);
  }

uint64_t sub_9DAD4()
{
  uint64_t v1 = (uint64_t (*)(void))sub_A0A34();
  return sub_202A8(v1);
}

#error "9DB00: call analysis failed (funcsize=5)"
uint64_t sub_9DB14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char v14;
  uint64_t v15;
  void *v16;
  char v17;
  uint64_t v18;
  void *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  sub_72AF8();
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = sub_494C(&qword_18A6A0);
  uint64_t v6 = sub_20308(v5, 320LL);
  uint64_t v7 = (__n128 *)sub_A0A7C(v6);
  sub_A0500(v7, (__n128)xmmword_13AB60);
  if (v4)
  {
    sub_72EEC();
  }

  else
  {
    *(void *)(v2 + sub_D7EC(v0 + 16, v0 + 56) = 0LL;
    *(void *)(v2 + 6sub_D878(v0 + 4) = 0LL;
  }

  sub_A0A40();
  uint64_t v9 = *(_BYTE *)(v1 + 96);
  *(void *)(v2 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v10;
  *(void *)(v2 + 7sub_D878(v0 + 2) = v11;
  *(void *)(v2 + 80) = v8;
  *(void *)(v2 + 8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0xEB000000006E694DLL;
  if ((v9 & 1) != 0)
  {
    uint64_t v13 = 0LL;
    char v12 = 0LL;
    *(void *)(v2 + 10sub_D878(v0 + 4) = 0LL;
    *(void *)(v2 + 11sub_D878(v0 + 2) = 0LL;
  }

  else
  {
    char v12 = *(void *)(v1 + 24);
    uint64_t v13 = &type metadata for Double;
  }

  char v14 = *(_BYTE *)(v1 + 97);
  *(void *)(v2 + 9sub_D878(v0 + 6) = v12;
  *(void *)(v2 + 120) = v13;
  *(void *)(v2 + 12_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v8;
  *(void *)(v2 + 13sub_D878(v0 + 6) = 0xEB0000000078614DLL;
  if ((v14 & 1) != 0)
  {
    char v16 = 0LL;
    uint64_t v15 = 0LL;
    *(void *)(v2 + 15sub_D878(v0 + 2) = 0LL;
    *(void *)(v2 + 160) = 0LL;
  }

  else
  {
    uint64_t v15 = *(void *)(v1 + 32);
    char v16 = &type metadata for Double;
  }

  uint64_t v17 = *(_BYTE *)(v1 + 98);
  *(void *)(v2 + 14sub_D878(v0 + 4) = v15;
  *(void *)(v2 + 16_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v16;
  strcpy((char *)(v2 + 176), "diastolicMin");
  *(_BYTE *)(v2 + 189) = 0;
  *(_WORD *)(v2 + 190) = -5120;
  if ((v17 & 1) != 0)
  {
    uint64_t v19 = 0LL;
    uint64_t v18 = 0LL;
    *(void *)(v2 + 200) = 0LL;
    *(void *)(v2 + 20_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0LL;
  }

  else
  {
    uint64_t v18 = *(void *)(v1 + 40);
    uint64_t v19 = &type metadata for Double;
  }

  uint64_t v20 = *(_BYTE *)(v1 + 99);
  *(void *)(v2 + 19sub_D878(v0 + 2) = v18;
  *(void *)(v2 + 21sub_D878(v0 + 6) = v19;
  strcpy((char *)(v2 + 224), "diastolicMax");
  *(_BYTE *)(v2 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = 0;
  *(_WORD *)(v2 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = -5120;
  if ((v20 & 1) != 0) {
    sub_A09F8();
  }
  else {
    char v21 = *(void *)(v1 + 48);
  }
  sub_A0838(v21);
  uint64_t v22 = sub_A0978((uint64_t)"queriedCalendarRange");
  if (v0)
  {
    uint64_t v22 = type metadata accessor for DialogCalendarRange(v22);
  }

  else
  {
    *(void *)(v2 + 29sub_D878(v0 + 6) = 0LL;
    *(void *)(v2 + 30sub_D878(v0 + 4) = 0LL;
  }

  *(void *)(v2 + 28_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v0;
  *(void *)(v2 + 31sub_D878(v0 + 2) = v22;
  sub_A040C();
  sub_372CC();
  uint64_t v23 = (void *)sub_A08B8();
  *(void *)(v1 + 80) = v23;
  sub_A094C(v23, (uint64_t)sub_9DCD4);
  uint64_t v24 = sub_A0518(v3 + 32);
  return sub_729C8(v24, v25, v26, v27);
}

uint64_t sub_9DCD4()
{
  if (v0)
  {
    sub_A964();
    return sub_363F8(v1, v2, v3);
  }

  else
  {
    sub_A09A0();
    uint64_t v5 = sub_59B14();
    return sub_3D6F8(v5, v6);
  }

uint64_t sub_9DD18(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6)
{
  *(void *)(v7 + 40) = a6;
  *(void *)(v7 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v6;
  *(_BYTE *)(v7 + 81) = a5;
  *(void *)(v7 + 2sub_D878(v0 + 4) = a2;
  *(void *)(v7 + 3sub_D878(v0 + 2) = a4;
  *(_BYTE *)(v7 + 80) = a3;
  *(void *)(v7 + 1sub_D878(v0 + 6) = a1;
  return sub_5F0F0((uint64_t)sub_9DD38);
}

uint64_t sub_9DD38()
{
  unint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = sub_494C(&qword_18A6A0);
  uint64_t v5 = (__n128 *)sub_20308(v4, 224LL);
  *(void *)(v1 + sub_D7EC(v0 + 16, v0 + 56) = v5;
  sub_A0500(v5, (__n128)xmmword_13A310);
  if (v3)
  {
    sub_72EEC();
    unint64_t v6 = v3;
  }

  else
  {
    sub_A0754();
  }

  v5[3].n128_u64[0] = v6;
  sub_A0A40();
  v5[4].n128_u64[1] = v7;
  v5[5].n128_u64[0] = v8;
  v5[5].n128_u64[1] = 0xE800000000000000LL;
  if ((v9 & 1) != 0)
  {
    sub_A0764();
  }

  else
  {
    unint64_t v10 = *(void *)(v1 + 24);
    uint64_t v11 = &type metadata for Double;
  }

  char v12 = *(_BYTE *)(v1 + 81);
  v5[6].n128_u64[0] = v10;
  v5[7].n128_u64[1] = (unint64_t)v11;
  v5[8].n128_u64[0] = 0x696C6F7473616964LL;
  v5[8].n128_u64[1] = 0xE900000000000063LL;
  if ((v12 & 1) != 0) {
    sub_A09E8();
  }
  else {
    uint64_t v13 = *(void *)(v1 + 32);
  }
  sub_A0850(v13);
  uint64_t v14 = sub_A098C((uint64_t)"queriedCalendarRange");
  if (v0)
  {
    uint64_t v14 = type metadata accessor for DialogCalendarRange(v14);
  }

  else
  {
    v5[12].n128_u64[1] = 0LL;
    v5[13].n128_u64[0] = 0LL;
  }

  v5[12].n128_u64[0] = v0;
  v5[13].n128_u64[1] = v14;
  sub_A040C();
  sub_372CC();
  uint64_t v15 = (void *)sub_A08B8();
  *(void *)(v1 + 6sub_D878(v0 + 4) = v15;
  sub_A0AA8(v15, (uint64_t)sub_9DE68);
  uint64_t v16 = sub_A0518(v2 + 30);
  return sub_729C8(v16, v17, v18, v19);
}

uint64_t sub_9DE68()
{
  if (v0)
  {
    sub_A964();
    return sub_363F8(v1, v2, v3);
  }

  else
  {
    sub_A0A54();
    uint64_t v5 = sub_59B14();
    return sub_3D6F8(v5, v6);
  }

uint64_t sub_9DEAC()
{
  return sub_202A8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_9DED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return sub_5F0F0((uint64_t)sub_9DEF4);
}

uint64_t sub_9DEF4()
{
  unint64_t v2 = v0[2];
  uint64_t v3 = sub_494C(&qword_18A6A0);
  uint64_t v4 = (__n128 *)sub_20308(v3, 320LL);
  v0[9] = v4;
  sub_A0500(v4, (__n128)xmmword_13AB60);
  if (v2)
  {
    uint64_t v5 = sub_72EEC();
    unint64_t v6 = v2;
  }

  else
  {
    unint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
    v4[3].n128_u64[1] = 0LL;
    v4[4].n128_u64[0] = 0LL;
  }

  unint64_t v7 = v0[3];
  v4[3].n128_u64[0] = v6;
  v4[4].n128_u64[1] = v5;
  v4[5].n128_u64[0] = 0x65756C6176LL;
  v4[5].n128_u64[1] = 0xE500000000000000LL;
  if (v7)
  {
    uint64_t v8 = sub_733C4();
    unint64_t v9 = v7;
  }

  else
  {
    unint64_t v9 = 0LL;
    uint64_t v8 = 0LL;
    v4[6].n128_u64[1] = 0LL;
    v4[7].n128_u64[0] = 0LL;
  }

  unint64_t v10 = v0[4];
  v4[6].n128_u64[0] = v9;
  v4[7].n128_u64[1] = v8;
  v4[8].n128_u64[0] = 0x65756C61566E696DLL;
  v4[8].n128_u64[1] = 0xE800000000000000LL;
  if (v10)
  {
    uint64_t v11 = sub_733C4();
    unint64_t v12 = v10;
  }

  else
  {
    unint64_t v12 = 0LL;
    uint64_t v11 = 0LL;
    v4[9].n128_u64[1] = 0LL;
    v4[10].n128_u64[0] = 0LL;
  }

  unint64_t v13 = v0[5];
  v4[9].n128_u64[0] = v12;
  v4[10].n128_u64[1] = v11;
  v4[11].n128_u64[0] = 0x65756C615678616DLL;
  v4[11].n128_u64[1] = 0xE800000000000000LL;
  if (v13)
  {
    uint64_t v14 = sub_733C4();
    unint64_t v15 = v13;
  }

  else
  {
    unint64_t v15 = 0LL;
    uint64_t v14 = 0LL;
    v4[12].n128_u64[1] = 0LL;
    v4[13].n128_u64[0] = 0LL;
  }

  unint64_t v16 = v0[6];
  v4[12].n128_u64[0] = v15;
  v4[13].n128_u64[1] = v14;
  strcpy((char *)&v4[14], "averageValue");
  v4[14].n128_u8[13] = 0;
  v4[14].n128_u16[7] = -5120;
  if (v16)
  {
    uint64_t v17 = sub_733C4();
    unint64_t v18 = v16;
  }

  else
  {
    unint64_t v18 = 0LL;
    uint64_t v17 = 0LL;
    v4[15].n128_u64[1] = 0LL;
    v4[16].n128_u64[0] = 0LL;
  }

  unint64_t v19 = v0[7];
  v4[15].n128_u64[0] = v18;
  v4[16].n128_u64[1] = v17;
  v4[17].n128_u64[0] = 0xD000000000000014LL;
  uint64_t v20 = sub_A0AB4((uint64_t)"queriedCalendarRange");
  if (v19)
  {
    uint64_t v20 = type metadata accessor for DialogCalendarRange(v20);
  }

  else
  {
    v4[18].n128_u64[1] = 0LL;
    v4[19].n128_u64[0] = 0LL;
  }

  v4[18].n128_u64[0] = v19;
  v4[19].n128_u64[1] = v20;
  sub_A08EC();
  sub_372CC();
  sub_732B8();
  sub_72C38();
  sub_36C5C();
  swift_retain();
  char v21 = (void *)swift_task_alloc(v1);
  v0[10] = v21;
  sub_A094C(v21, (uint64_t)sub_9DCD4);
  uint64_t v22 = sub_A09A8(0xD000000000000027LL);
  return sub_A0608(v22, v23, v24, v25);
}

uint64_t sub_9E0E4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = sub_494C(&qword_189D00);
  *(void *)(v7 + 6sub_D878(v0 + 4) = sub_36390(v8);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_9E124()
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = sub_494C(&qword_18A6A0);
  uint64_t v6 = sub_20308(v5, 272LL);
  uint64_t v7 = (__n128 *)sub_A0914(v6);
  uint64_t v8 = sub_A0474(v7, (__n128)xmmword_13A300);
  if (v4)
  {
    uint64_t v8 = type metadata accessor for WellnessTime(v8);
  }

  else
  {
    void v3[7] = 0LL;
    v3[8] = 0LL;
  }

  sub_A0420(v8);
  if ((v9 & 1) != 0) {
    sub_A0570();
  }
  else {
    unint64_t v10 = &type metadata for Double;
  }
  sub_A044C((uint64_t)v10);
  if ((v11 & 1) != 0) {
    sub_A0580();
  }
  else {
    unint64_t v12 = &type metadata for Double;
  }
  uint64_t v13 = sub_A04AC((uint64_t)v12);
  sub_3D7C4(v13, v14, &qword_189D00);
  uint64_t v15 = sub_ABF4();
  sub_A04D4(v15);
  if (v16)
  {
    uint64_t v17 = sub_72C38();
    sub_3D7BC(v17, &qword_189D00);
    sub_3D8B0();
  }

  else
  {
    unint64_t v18 = sub_A06AC();
    sub_3D738((uint64_t)v18);
    sub_72C38();
  }

  sub_A06C8();
  uint64_t v19 = sub_A0670((uint64_t)"queriedCalendarRange");
  if (v0)
  {
    uint64_t v19 = type metadata accessor for DialogCalendarRange(v19);
  }

  else
  {
    v3[31] = 0LL;
    v3[32] = 0LL;
  }

  sub_A0958(v19);
  sub_A040C();
  uint64_t v20 = (void *)sub_3703C();
  *(void *)(v1 + 80) = v20;
  *uint64_t v20 = v1;
  v20[1] = sub_9D50C;
  uint64_t v21 = sub_A0490(v2 + 19);
  return sub_729C8(v21, v22, v23, v24);
}

uint64_t sub_9E258(uint64_t a1, char a2, uint64_t a3)
{
  *(void *)(v4 + 2sub_D878(v0 + 4) = a3;
  *(void *)(v4 + 3sub_D878(v0 + 2) = v3;
  *(_BYTE *)(v4 + 6sub_D878(v0 + 4) = a2;
  *(void *)(v4 + 1sub_D878(v0 + 6) = a1;
  return sub_5F0F0((uint64_t)sub_9E270);
}

uint64_t sub_9E270()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = sub_494C(&qword_18A6A0);
  uint64_t v3 = sub_20308(v2, 176LL);
  v0[5] = v3;
  *(_OWORD *)(v3 + 1sub_D878(v0 + 6) = xmmword_13A2F0;
  sub_A0A28();
  *(void *)(v4 + 3sub_D878(v0 + 2) = v5;
  *(void *)(v4 + 40) = v6;
  if (v1)
  {
    uint64_t v7 = type metadata accessor for DialogCalendarRange(0LL);
    uint64_t v8 = v1;
  }

  else
  {
    uint64_t v7 = sub_A0754();
  }

  uint64_t v9 = v0[3];
  *(void *)(v3 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v8;
  *(void *)(v3 + 7sub_D878(v0 + 2) = v7;
  *(void *)(v3 + 80) = 0xD000000000000010LL;
  sub_73318();
  *(void *)(v3 + 8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v10;
  *(_BYTE *)(v3 + 9sub_D878(v0 + 6) = v11;
  *(void *)(v3 + 120) = &type metadata for Bool;
  *(void *)(v3 + 12_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 1701669236LL;
  *(void *)(v3 + 13sub_D878(v0 + 6) = 0xE400000000000000LL;
  uint64_t v12 = 0LL;
  if (v9)
  {
    uint64_t v12 = type metadata accessor for WellnessTime(0LL);
  }

  else
  {
    *(void *)(v3 + 15sub_D878(v0 + 2) = 0LL;
    *(void *)(v3 + 160) = 0LL;
  }

  *(void *)(v3 + 14sub_D878(v0 + 4) = v9;
  *(void *)(v3 + 16_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v12;
  sub_A040C();
  sub_372CC();
  uint64_t v13 = (void *)sub_A08B8();
  v0[6] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_9E388;
  uint64_t v14 = sub_A0518(0xD000000000000021LL);
  return sub_729C8(v14, v15, v16, v17);
}

uint64_t sub_9E388()
{
  *(void *)(v1 + sub_D7EC(v0 + 16, v0 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    sub_A964();
    return sub_363F8(v4, v5, v6);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = sub_59B14();
    return sub_3D6F8(v8, v9);
  }

uint64_t sub_9E3E0()
{
  return sub_202A8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_9E40C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = sub_494C(&qword_189D00);
  *(void *)(v7 + 6sub_D878(v0 + 4) = sub_36390(v8);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_9E44C()
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = sub_494C(&qword_18A6A0);
  uint64_t v6 = sub_20308(v5, 272LL);
  uint64_t v7 = (__n128 *)sub_A0914(v6);
  uint64_t v8 = sub_A0474(v7, (__n128)xmmword_13A300);
  if (v4)
  {
    uint64_t v8 = type metadata accessor for WellnessTime(v8);
  }

  else
  {
    void v3[7] = 0LL;
    v3[8] = 0LL;
  }

  sub_A0420(v8);
  if ((v9 & 1) != 0) {
    sub_A0570();
  }
  else {
    uint64_t v10 = &type metadata for Double;
  }
  sub_A044C((uint64_t)v10);
  if ((v11 & 1) != 0) {
    sub_A0580();
  }
  else {
    uint64_t v12 = &type metadata for Double;
  }
  uint64_t v13 = sub_A04AC((uint64_t)v12);
  sub_3D7C4(v13, v14, &qword_189D00);
  uint64_t v15 = sub_ABF4();
  sub_A04D4(v15);
  if (v16)
  {
    uint64_t v17 = sub_72C38();
    sub_3D7BC(v17, &qword_189D00);
    sub_3D8B0();
  }

  else
  {
    unint64_t v18 = sub_A06AC();
    sub_3D738((uint64_t)v18);
    sub_72C38();
  }

  sub_A06C8();
  uint64_t v19 = sub_A0670((uint64_t)"queriedCalendarRange");
  if (v0)
  {
    uint64_t v19 = type metadata accessor for DialogCalendarRange(v19);
  }

  else
  {
    v3[31] = 0LL;
    v3[32] = 0LL;
  }

  sub_A0958(v19);
  sub_A040C();
  uint64_t v20 = (void *)sub_3703C();
  *(void *)(v1 + 80) = v20;
  sub_A0940(v20, (uint64_t)sub_9D50C);
  uint64_t v21 = sub_A0490(v2 + 29);
  return sub_729C8(v21, v22, v23, v24);
}

uint64_t sub_9E57C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = sub_494C(&qword_189D00);
  *(void *)(v7 + 6sub_D878(v0 + 4) = sub_36390(v8);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_9E5BC()
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = sub_494C(&qword_18A6A0);
  uint64_t v6 = sub_20308(v5, 272LL);
  uint64_t v7 = (__n128 *)sub_A0914(v6);
  uint64_t v8 = sub_A0474(v7, (__n128)xmmword_13A300);
  if (v4)
  {
    uint64_t v8 = type metadata accessor for WellnessTime(v8);
  }

  else
  {
    void v3[7] = 0LL;
    v3[8] = 0LL;
  }

  sub_A0420(v8);
  if ((v9 & 1) != 0) {
    sub_A0570();
  }
  else {
    uint64_t v10 = &type metadata for Double;
  }
  sub_A044C((uint64_t)v10);
  if ((v11 & 1) != 0) {
    sub_A0580();
  }
  else {
    uint64_t v12 = &type metadata for Double;
  }
  uint64_t v13 = sub_A04AC((uint64_t)v12);
  sub_3D7C4(v13, v14, &qword_189D00);
  uint64_t v15 = sub_ABF4();
  sub_A04D4(v15);
  if (v16)
  {
    uint64_t v17 = sub_72C38();
    sub_3D7BC(v17, &qword_189D00);
    sub_3D8B0();
  }

  else
  {
    unint64_t v18 = sub_A06AC();
    sub_3D738((uint64_t)v18);
    sub_72C38();
  }

  sub_A06C8();
  uint64_t v19 = sub_A0670((uint64_t)"queriedCalendarRange");
  if (v0)
  {
    uint64_t v19 = type metadata accessor for DialogCalendarRange(v19);
  }

  else
  {
    v3[31] = 0LL;
    v3[32] = 0LL;
  }

  sub_A0958(v19);
  sub_A040C();
  uint64_t v20 = (void *)sub_3703C();
  *(void *)(v1 + 80) = v20;
  sub_A0940(v20, (uint64_t)sub_9D50C);
  uint64_t v21 = sub_A0490(v2 + 22);
  return sub_729C8(v21, v22, v23, v24);
}

uint64_t sub_9E6EC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = sub_494C(&qword_189D00);
  *(void *)(v7 + 6sub_D878(v0 + 4) = sub_36390(v8);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_9E72C()
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = sub_494C(&qword_18A6A0);
  uint64_t v6 = sub_20308(v5, 272LL);
  uint64_t v7 = (__n128 *)sub_A0914(v6);
  uint64_t v8 = sub_A0474(v7, (__n128)xmmword_13A300);
  if (v4)
  {
    uint64_t v8 = type metadata accessor for WellnessTime(v8);
  }

  else
  {
    void v3[7] = 0LL;
    v3[8] = 0LL;
  }

  sub_A0420(v8);
  if ((v9 & 1) != 0) {
    sub_A0570();
  }
  else {
    uint64_t v10 = &type metadata for Double;
  }
  sub_A044C((uint64_t)v10);
  if ((v11 & 1) != 0) {
    sub_A0580();
  }
  else {
    uint64_t v12 = &type metadata for Double;
  }
  uint64_t v13 = sub_A04AC((uint64_t)v12);
  sub_3D7C4(v13, v14, &qword_189D00);
  uint64_t v15 = sub_ABF4();
  sub_A04D4(v15);
  if (v16)
  {
    uint64_t v17 = sub_72C38();
    sub_3D7BC(v17, &qword_189D00);
    sub_3D8B0();
  }

  else
  {
    unint64_t v18 = sub_A06AC();
    sub_3D738((uint64_t)v18);
    sub_72C38();
  }

  sub_A06C8();
  uint64_t v19 = sub_A0670((uint64_t)"queriedCalendarRange");
  if (v0)
  {
    uint64_t v19 = type metadata accessor for DialogCalendarRange(v19);
  }

  else
  {
    v3[31] = 0LL;
    v3[32] = 0LL;
  }

  sub_A0958(v19);
  sub_A040C();
  uint64_t v20 = (void *)sub_3703C();
  *(void *)(v1 + 80) = v20;
  *uint64_t v20 = v1;
  v20[1] = sub_9D50C;
  uint64_t v21 = sub_A0490(v2 + 19);
  return sub_729C8(v21, v22, v23, v24);
}

uint64_t sub_9E860(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6)
{
  *(void *)(v7 + 40) = a6;
  *(void *)(v7 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v6;
  *(_BYTE *)(v7 + 81) = a5;
  *(void *)(v7 + 2sub_D878(v0 + 4) = a2;
  *(void *)(v7 + 3sub_D878(v0 + 2) = a4;
  *(_BYTE *)(v7 + 80) = a3;
  *(void *)(v7 + 1sub_D878(v0 + 6) = a1;
  return sub_5F0F0((uint64_t)sub_9E880);
}

uint64_t sub_9E880()
{
  uint64_t v3 = v1[2];
  uint64_t v4 = sub_494C(&qword_18A6A0);
  uint64_t v5 = (__n128 *)sub_20308(v4, 224LL);
  v1[7] = v5;
  sub_A0500(v5, (__n128)xmmword_13A310);
  if (v3)
  {
    uint64_t v6 = sub_72EEC();
    uint64_t v7 = v3;
  }

  else
  {
    uint64_t v6 = sub_A0754();
  }

  sub_A07A4(v6, v7);
  if ((v8 & 1) != 0) {
    sub_A0764();
  }
  else {
    char v9 = &type metadata for Double;
  }
  sub_A080C((uint64_t)v9);
  if ((v10 & 1) != 0) {
    sub_A09E8();
  }
  else {
    uint64_t v11 = v1[4];
  }
  sub_A0850(v11);
  uint64_t v12 = sub_A098C((uint64_t)"queriedCalendarRange");
  if (v0)
  {
    uint64_t v12 = type metadata accessor for DialogCalendarRange(v12);
  }

  else
  {
    v5[12].n128_u64[1] = 0LL;
    v5[13].n128_u64[0] = 0LL;
  }

  v5[12].n128_u64[0] = v0;
  v5[13].n128_u64[1] = v12;
  sub_A040C();
  sub_372CC();
  uint64_t v13 = (void *)sub_A08B8();
  v1[8] = v13;
  sub_A0AA8(v13, (uint64_t)sub_9E978);
  uint64_t v14 = sub_A0518(v2 + 18);
  return sub_729C8(v14, v15, v16, v17);
}

uint64_t sub_9E978()
{
  if (v0)
  {
    sub_A964();
    return sub_363F8(v1, v2, v3);
  }

  else
  {
    sub_A0A54();
    uint64_t v5 = sub_59B14();
    return sub_3D6F8(v5, v6);
  }

uint64_t sub_9E9BC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v9 = sub_494C(&qword_189D00);
  *(void *)(v8 + 80) = sub_36390(v9);
  sub_A964();
  return sub_A0738(v10, v11, v12);
}

uint64_t sub_9E9FC()
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = sub_494C(&qword_18A6A0);
  uint64_t v7 = sub_20308(v6, 368LL);
  uint64_t v8 = (__n128 *)sub_A0A70(v7);
  uint64_t v9 = sub_A0474(v8, (__n128)xmmword_13AB30);
  if (v5)
  {
    uint64_t v9 = type metadata accessor for WellnessTime(v9);
  }

  else
  {
    void v4[7] = 0LL;
    void v4[8] = 0LL;
  }

  sub_A0650(v9);
  if ((v10 & 1) != 0) {
    sub_A0570();
  }
  else {
    uint64_t v11 = &type metadata for Double;
  }
  sub_A05B4((uint64_t)v11);
  if ((v12 & 1) != 0) {
    sub_A0580();
  }
  else {
    uint64_t v13 = &type metadata for Double;
  }
  sub_A0590((uint64_t)v13);
  if ((v14 & 1) != 0) {
    sub_A0904();
  }
  else {
    uint64_t v15 = &type metadata for Double;
  }
  sub_A05D8((uint64_t)v15);
  if ((v16 & 1) != 0) {
    sub_A0A18();
  }
  else {
    uint64_t v17 = &type metadata for Double;
  }
  uint64_t v18 = sub_A0684((uint64_t)v17);
  sub_3D7C4(v18, v19, &qword_189D00);
  uint64_t v20 = sub_ABF4();
  sub_A06D8(v20);
  if (v21)
  {
    uint64_t v22 = sub_72C38();
    sub_3D7BC(v22, &qword_189D00);
    sub_3D8B0();
  }

  else
  {
    v4[39] = v1;
    uint64_t v23 = sub_A0730();
    sub_3D738((uint64_t)v23);
    sub_72C38();
  }

  sub_A09D8();
  uint64_t v24 = sub_A0964((uint64_t)"queriedCalendarRange");
  if (v0)
  {
    uint64_t v24 = type metadata accessor for DialogCalendarRange(v24);
  }

  else
  {
    v4[43] = 0LL;
    v4[44] = 0LL;
  }

  sub_A0A9C(v24);
  sub_A040C();
  uint64_t v25 = (void *)sub_3703C();
  *(void *)(v2 + 9sub_D878(v0 + 6) = v25;
  *uint64_t v25 = v2;
  v25[1] = sub_9EB70;
  uint64_t v26 = sub_A0490(v3 + 13);
  return sub_729C8(v26, v27, v28, v29);
}

uint64_t sub_9EB70()
{
  if (v0)
  {
    sub_A964();
    return sub_363F8(v1, v2, v3);
  }

  else
  {
    sub_A0A94();
    sub_A78C();
    uint64_t v5 = sub_3D7AC();
    return sub_3D6F8(v5, v6);
  }

uint64_t sub_9EBB8()
{
  return sub_202A8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_9EBE8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a6;
  *(void *)(v7 + sub_D7EC(v0 + 16, v0 + 56) = v6;
  *(void *)(v7 + 3sub_D878(v0 + 2) = a4;
  *(void *)(v7 + 40) = a5;
  *(_BYTE *)(v7 + 8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a2;
  *(void *)(v7 + 1sub_D878(v0 + 6) = a1;
  *(void *)(v7 + 2sub_D878(v0 + 4) = a3;
  return sub_5F0F0((uint64_t)sub_9EC04);
}

uint64_t sub_9EC04( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(void))
{
  unint64_t v10 = v9[2];
  uint64_t v11 = sub_494C(&qword_18A6A0);
  char v12 = (__n128 *)sub_20308(v11, 320LL);
  v9[8] = v12;
  sub_A0500(v12, (__n128)xmmword_13AB60);
  if (v10)
  {
    uint64_t v13 = sub_72EEC();
    unint64_t v14 = v10;
  }

  else
  {
    uint64_t v13 = sub_73610();
    v12[3].n128_u64[1] = 0LL;
    v12[4].n128_u64[0] = 0LL;
  }

  unint64_t v15 = v9[3];
  v12[3].n128_u64[0] = v14;
  v12[4].n128_u64[1] = v13;
  v12[5].n128_u64[0] = 0xD000000000000016LL;
  sub_73318();
  v12[5].n128_u64[1] = v16;
  v12[6].n128_u8[0] = v17;
  v12[7].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v12[8].n128_u64[0] = 0xD000000000000014LL;
  sub_73318();
  v12[8].n128_u64[1] = v18;
  if (v15)
  {
    uint64_t v19 = type metadata accessor for DialogCalendarRange(0LL);
    unint64_t v20 = v15;
  }

  else
  {
    uint64_t v19 = sub_73610();
    v12[9].n128_u64[1] = 0LL;
    v12[10].n128_u64[0] = 0LL;
  }

  unint64_t v21 = v9[4];
  v12[9].n128_u64[0] = v20;
  v12[10].n128_u64[1] = v19;
  v12[11].n128_u64[0] = 0x746867696568LL;
  v12[11].n128_u64[1] = 0xE600000000000000LL;
  if (v21)
  {
    uint64_t v22 = type metadata accessor for DialogPersonHeight(0LL);
    unint64_t v23 = v21;
  }

  else
  {
    uint64_t v22 = sub_73610();
    v12[12].n128_u64[1] = 0LL;
    v12[13].n128_u64[0] = 0LL;
  }

  unint64_t v24 = v9[5];
  v12[12].n128_u64[0] = v23;
  v12[13].n128_u64[1] = v22;
  v12[14].n128_u64[0] = 0x68676965486E696DLL;
  v12[14].n128_u64[1] = 0xE900000000000074LL;
  if (v24)
  {
    uint64_t v25 = type metadata accessor for DialogPersonHeight(0LL);
    unint64_t v26 = v24;
  }

  else
  {
    uint64_t v25 = sub_73610();
    v12[15].n128_u64[1] = 0LL;
    v12[16].n128_u64[0] = 0LL;
  }

  unint64_t v27 = v9[6];
  v12[15].n128_u64[0] = v26;
  v12[16].n128_u64[1] = v25;
  v12[17].n128_u64[0] = 0x686769654878616DLL;
  v12[17].n128_u64[1] = 0xE900000000000074LL;
  uint64_t v28 = 0LL;
  if (v27)
  {
    uint64_t v28 = type metadata accessor for DialogPersonHeight(0LL);
  }

  else
  {
    v12[18].n128_u64[1] = 0LL;
    v12[19].n128_u64[0] = 0LL;
  }

  v12[18].n128_u64[0] = v27;
  v12[19].n128_u64[1] = v28;
  uint64_t v29 = *((unsigned int *)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:) + 1);
  sub_A09C4();
  sub_372CC();
  sub_732B8();
  sub_72C38();
  sub_36C5C();
  uint64_t v30 = (void *)swift_task_alloc(v29);
  v9[9] = v30;
  sub_A0940(v30, (uint64_t)sub_9EDDC);
  uint64_t v31 = sub_A0920(0xD00000000000001ELL);
  return sub_A0608(v31, v32, (uint64_t)v12, a9);
}

uint64_t sub_9EDDC()
{
  if (v0)
  {
    sub_A964();
    return sub_363F8(v2, v3, v4);
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v1 + 64));
    uint64_t v6 = sub_59B14();
    return sub_3D6F8(v6, v7);
  }

uint64_t sub_9EE24()
{
  return sub_202A8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_9EE50(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6)
{
  *(void *)(v7 + 40) = a6;
  *(void *)(v7 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v6;
  *(_BYTE *)(v7 + 81) = a5;
  *(void *)(v7 + 2sub_D878(v0 + 4) = a2;
  *(void *)(v7 + 3sub_D878(v0 + 2) = a4;
  *(_BYTE *)(v7 + 80) = a3;
  *(void *)(v7 + 1sub_D878(v0 + 6) = a1;
  return sub_5F0F0((uint64_t)sub_9EE70);
}

uint64_t sub_9EE70()
{
  uint64_t v3 = v1[2];
  uint64_t v4 = sub_494C(&qword_18A6A0);
  uint64_t v5 = (__n128 *)sub_20308(v4, 224LL);
  v1[7] = v5;
  sub_A0500(v5, (__n128)xmmword_13A310);
  if (v3)
  {
    uint64_t v6 = sub_72EEC();
    uint64_t v7 = v3;
  }

  else
  {
    uint64_t v6 = sub_A0754();
  }

  sub_A07A4(v6, v7);
  if ((v8 & 1) != 0) {
    sub_A0764();
  }
  else {
    uint64_t v9 = &type metadata for Double;
  }
  sub_A080C((uint64_t)v9);
  if ((v10 & 1) != 0) {
    sub_A09E8();
  }
  else {
    uint64_t v11 = v1[4];
  }
  sub_A0850(v11);
  uint64_t v12 = sub_A098C((uint64_t)"queriedCalendarRange");
  if (v0)
  {
    uint64_t v12 = type metadata accessor for DialogCalendarRange(v12);
  }

  else
  {
    v5[12].n128_u64[1] = 0LL;
    v5[13].n128_u64[0] = 0LL;
  }

  v5[12].n128_u64[0] = v0;
  v5[13].n128_u64[1] = v12;
  sub_A040C();
  sub_372CC();
  uint64_t v13 = (void *)sub_A08B8();
  v1[8] = v13;
  sub_A0AA8(v13, (uint64_t)sub_9E978);
  uint64_t v14 = sub_A0518(v2 + 10);
  return sub_729C8(v14, v15, v16, v17);
}

#error "9EF6C: call analysis failed (funcsize=5)"
uint64_t sub_9EF80()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  sub_72AF8();
  uint64_t v4 = v1[2];
  uint64_t v5 = sub_494C(&qword_18A6A0);
  uint64_t v6 = sub_20308(v5, 320LL);
  uint64_t v7 = (__n128 *)sub_A0A7C(v6);
  sub_A0500(v7, (__n128)xmmword_13AB60);
  if (v4)
  {
    char v8 = sub_72EEC();
    uint64_t v9 = v4;
  }

  else
  {
    char v8 = sub_A0754();
  }

  sub_A08C0(v8, v9);
  if ((v10 & 1) != 0) {
    sub_A0764();
  }
  else {
    uint64_t v11 = &type metadata for Double;
  }
  sub_A0868((uint64_t)v11);
  if ((v12 & 1) != 0) {
    sub_A0A08();
  }
  else {
    uint64_t v13 = &type metadata for Double;
  }
  sub_A0890((uint64_t)v13);
  if ((v14 & 1) != 0)
  {
    uint64_t v15 = 0LL;
    v2[25] = 0LL;
    v2[26] = 0LL;
  }

  else
  {
    uint64_t v15 = &type metadata for Double;
  }

  sub_A0774((uint64_t)v15);
  if ((v16 & 1) != 0) {
    sub_A09F8();
  }
  else {
    unsigned __int8 v17 = v1[6];
  }
  sub_A0838(v17);
  unint64_t v18 = sub_A0978((uint64_t)"queriedCalendarRange");
  if (v0)
  {
    unint64_t v18 = type metadata accessor for DialogCalendarRange(v18);
  }

  else
  {
    v2[37] = 0LL;
    v2[38] = 0LL;
  }

  v2[36] = v0;
  v2[39] = v18;
  sub_A040C();
  sub_372CC();
  uint64_t v19 = (void *)sub_A08B8();
  v1[10] = v19;
  sub_A094C(v19, (uint64_t)sub_9DCD4);
  unint64_t v20 = sub_A0518(v3 + 19);
  return sub_729C8(v20, v21, v22, v23);
}

uint64_t sub_9F0B4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = sub_494C(&qword_189D00);
  *(void *)(v7 + 6sub_D878(v0 + 4) = sub_36390(v8);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_9F0F4()
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = sub_494C(&qword_18A6A0);
  uint64_t v6 = sub_20308(v5, 272LL);
  uint64_t v7 = (__n128 *)sub_A0914(v6);
  uint64_t v8 = sub_A0474(v7, (__n128)xmmword_13A300);
  if (v4)
  {
    uint64_t v8 = type metadata accessor for WellnessTime(v8);
  }

  else
  {
    void v3[7] = 0LL;
    v3[8] = 0LL;
  }

  sub_A0420(v8);
  if ((v9 & 1) != 0) {
    sub_A0570();
  }
  else {
    char v10 = &type metadata for Double;
  }
  sub_A044C((uint64_t)v10);
  if ((v11 & 1) != 0) {
    sub_A0580();
  }
  else {
    uint64_t v12 = &type metadata for Double;
  }
  uint64_t v13 = sub_A04AC((uint64_t)v12);
  sub_3D7C4(v13, v14, &qword_189D00);
  uint64_t v15 = sub_ABF4();
  sub_A04D4(v15);
  if (v16)
  {
    uint64_t v17 = sub_72C38();
    sub_3D7BC(v17, &qword_189D00);
    sub_3D8B0();
  }

  else
  {
    unint64_t v18 = sub_A06AC();
    sub_3D738((uint64_t)v18);
    sub_72C38();
  }

  sub_A06C8();
  uint64_t v19 = sub_A0670((uint64_t)"queriedCalendarRange");
  if (v0)
  {
    uint64_t v19 = type metadata accessor for DialogCalendarRange(v19);
  }

  else
  {
    v3[31] = 0LL;
    v3[32] = 0LL;
  }

  sub_A0958(v19);
  sub_A040C();
  unint64_t v20 = (void *)sub_3703C();
  *(void *)(v1 + 80) = v20;
  sub_A0940(v20, (uint64_t)sub_9D50C);
  uint64_t v21 = sub_A0490(v2 + 17);
  return sub_729C8(v21, v22, v23, v24);
}

uint64_t sub_9F224(char a1, char a2, char a3, char a4)
{
  *(void *)(v5 + 1sub_D878(v0 + 6) = v4;
  *(_BYTE *)(v5 + 51) = a4;
  *(_BYTE *)(v5 + 50) = a3;
  *(_BYTE *)(v5 + 49) = a2;
  *(_BYTE *)(v5 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a1;
  return sub_5F0F0((uint64_t)sub_9F244);
}

uint64_t sub_9F244( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  char v11 = *(_BYTE *)(v10 + 51);
  char v12 = *(_BYTE *)(v10 + 50);
  char v13 = *(_BYTE *)(v10 + 49);
  char v14 = *(_BYTE *)(v10 + 48);
  uint64_t v15 = sub_494C(&qword_18A6A0);
  uint64_t v16 = sub_20308(v15, 224LL);
  *(void *)(v10 + 2sub_D878(v0 + 4) = v16;
  *(_OWORD *)(v16 + 1sub_D878(v0 + 6) = xmmword_13A310;
  sub_73318();
  *(void *)(v17 + 3sub_D878(v0 + 2) = 0xD000000000000010LL;
  *(void *)(v17 + 40) = v18;
  *(_BYTE *)(v17 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v14;
  *(void *)(v17 + 7sub_D878(v0 + 2) = &type metadata for Bool;
  *(void *)(v17 + 80) = 0xD000000000000014LL;
  sub_A0A28();
  *(void *)(v19 + 8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v20;
  *(_BYTE *)(v19 + 9sub_D878(v0 + 6) = v13;
  *(void *)(v19 + 120) = v21;
  *(void *)(v19 + 12_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0xD000000000000011LL;
  sub_A0A28();
  *(void *)(v22 + 13sub_D878(v0 + 6) = v23;
  *(_BYTE *)(v22 + 14sub_D878(v0 + 4) = v12;
  *(void *)(v22 + 16_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v24;
  *(void *)(v22 + 17sub_D878(v0 + 6) = 0xD000000000000010LL;
  sub_A0A28();
  *(void *)(v25 + 18sub_D878(v0 + 4) = v26;
  *(void *)(v25 + 21sub_D878(v0 + 6) = v27;
  uint64_t v28 = sub_A0A5C((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(_BYTE *)(v16 + 19sub_D878(v0 + 2) = v11;
  uint64_t v29 = (void *)swift_task_alloc(v28);
  *(void *)(v10 + 3sub_D878(v0 + 2) = v29;
  *uint64_t v29 = v10;
  v29[1] = sub_9F350;
  uint64_t v30 = sub_A0920(0xD000000000000024LL);
  return sub_729C8(v30, v31, v16, a10);
}

uint64_t sub_9F350()
{
  *(void *)(v1 + 40) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    sub_A964();
    return sub_363F8(v4, v5, v6);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = sub_59B14();
    return sub_3D6F8(v8, v9);
  }

uint64_t sub_9F3A8()
{
  return sub_202A8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_9F3D4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, char a7, uint64_t a8)
{
  *(void *)(v9 + 40) = a8;
  *(void *)(v9 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v8;
  *(_BYTE *)(v9 + 99) = a7;
  *(_BYTE *)(v9 + 9_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a6;
  *(_BYTE *)(v9 + 9_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = a5;
  *(void *)(v9 + 2sub_D878(v0 + 4) = a2;
  *(void *)(v9 + 3sub_D878(v0 + 2) = a4;
  *(_BYTE *)(v9 + 9sub_D878(v0 + 6) = a3;
  *(void *)(v9 + 1sub_D878(v0 + 6) = a1;
  uint64_t v10 = sub_494C(&qword_189D00);
  *(void *)(v9 + sub_D7EC(v0 + 16, v0 + 56) = sub_21410(v10);
  *(void *)(v9 + 6sub_D878(v0 + 4) = swift_task_alloc(v8);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_9F438()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = sub_494C(&qword_18A6A0);
  uint64_t v4 = sub_20308(v3, 320LL);
  uint64_t v5 = sub_A0A7C(v4);
  *(_OWORD *)(v5 + 1sub_D878(v0 + 6) = xmmword_13AB60;
  *(void *)(v5 + 3sub_D878(v0 + 2) = 0x6570797461746164LL;
  *(void *)(v5 + 40) = 0xE800000000000000LL;
  sub_3D7C4(v2, v6, &qword_189D00);
  uint64_t v7 = sub_ABF4();
  uint64_t v8 = sub_A0744();
  if ((_DWORD)v8 == 1)
  {
    sub_3D7BC(v8, &qword_189D00);
    sub_3D92C();
  }

  else
  {
    *(void *)(v1 + 7sub_D878(v0 + 2) = v7;
    uint64_t v9 = sub_3D86C();
    sub_3D798((uint64_t)v9);
  }

  char v10 = *(_BYTE *)(v0 + 96);
  *(void *)(v1 + 80) = 0x6C61566C61746F74LL;
  *(void *)(v1 + 8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0xEA00000000006575LL;
  if ((v10 & 1) != 0)
  {
    sub_A0764();
  }

  else
  {
    uint64_t v11 = *(void *)(v0 + 24);
    char v12 = &type metadata for Double;
  }

  char v13 = *(_BYTE *)(v0 + 97);
  *(void *)(v1 + 9sub_D878(v0 + 6) = v11;
  *(void *)(v1 + 120) = v12;
  *(void *)(v1 + 12_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0x756C61566C616F67LL;
  *(void *)(v1 + 13sub_D878(v0 + 6) = 0xE900000000000065LL;
  if ((v13 & 1) != 0)
  {
    sub_A0A08();
  }

  else
  {
    uint64_t v14 = *(void *)(v0 + 32);
    uint64_t v15 = &type metadata for Double;
  }

  char v16 = *(_BYTE *)(v0 + 98);
  *(void *)(v1 + 14sub_D878(v0 + 4) = v14;
  *(void *)(v1 + 16_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v15;
  strcpy((char *)(v1 + 176), "isRingClosed");
  *(_BYTE *)(v1 + 189) = 0;
  *(_WORD *)(v1 + 190) = -5120;
  *(_BYTE *)(v1 + 19sub_D878(v0 + 2) = v16;
  *(void *)(v1 + 21sub_D878(v0 + 6) = &type metadata for Bool;
  *(void *)(v1 + 22sub_D878(v0 + 4) = 0xD000000000000010LL;
  sub_A0A28();
  *(void *)(v1 + 23sub_D878(v0 + 2) = v17;
  *(_BYTE *)(v1 + sub_A304(v0 - 176, v0 - 240) = v18;
  *(void *)(v1 + 26sub_D878(v0 + 4) = v19;
  *(void *)(v1 + 27sub_D878(v0 + 2) = 1953066613LL;
  *(void *)(v1 + 280) = 0xE400000000000000LL;
  sub_3D7C4(v20, v21, &qword_189D00);
  uint64_t v22 = sub_A0744();
  if ((_DWORD)v22 == 1)
  {
    sub_3D7BC(v22, &qword_189D00);
    sub_3D92C();
  }

  else
  {
    *(void *)(v1 + 31sub_D878(v0 + 2) = v7;
    uint64_t v23 = sub_3D86C();
    sub_3D798((uint64_t)v23);
  }

  uint64_t v24 = sub_A0A5C((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  uint64_t v25 = (void *)swift_task_alloc(v24);
  *(void *)(v0 + 80) = v25;
  sub_A0AA8(v25, (uint64_t)sub_9F648);
  uint64_t v26 = sub_A0518(0xD00000000000001DLL);
  return sub_729C8(v26, v27, v28, v29);
}

uint64_t sub_9F648()
{
  if (v0)
  {
    sub_A964();
    return sub_363F8(v2, v3, v4);
  }

  else
  {
    uint64_t v6 = *(void *)(v1 + 56);
    swift_bridgeObjectRelease();
    sub_A78C();
    swift_task_dealloc(v6);
    uint64_t v7 = sub_3D7AC();
    return sub_3D6F8(v7, v8);
  }

uint64_t sub_9F6A0()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRelease();
  sub_A78C();
  swift_task_dealloc(v1);
  uint64_t v2 = (uint64_t (*)(void))sub_A0A34();
  return sub_A0934(v2);
}

uint64_t sub_9F6D8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a6;
  *(void *)(v7 + sub_D7EC(v0 + 16, v0 + 56) = v6;
  *(void *)(v7 + 3sub_D878(v0 + 2) = a4;
  *(void *)(v7 + 40) = a5;
  *(_BYTE *)(v7 + 8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a3;
  *(void *)(v7 + 1sub_D878(v0 + 6) = a1;
  *(void *)(v7 + 2sub_D878(v0 + 4) = a2;
  return sub_5F0F0((uint64_t)sub_9F6F4);
}

uint64_t sub_9F6F4()
{
  unint64_t v1 = v0[2];
  uint64_t v2 = sub_494C(&qword_18A6A0);
  uint64_t v3 = (__n128 *)sub_20308(v2, 272LL);
  v0[8] = v3;
  sub_A0500(v3, (__n128)xmmword_13A300);
  if (v1)
  {
    uint64_t v4 = sub_72EEC();
    unint64_t v5 = v1;
  }

  else
  {
    uint64_t v4 = sub_73610();
    v3[3].n128_u64[1] = 0LL;
    v3[4].n128_u64[0] = 0LL;
  }

  v3[3].n128_u64[0] = v5;
  v3[4].n128_u64[1] = v4;
  v3[5].n128_u64[0] = 0xD000000000000018LL;
  sub_73318();
  v3[5].n128_u64[1] = v6;
  if ((v7 & 1) != 0)
  {
    uint64_t v9 = 0LL;
    unint64_t v8 = 0LL;
    v3[6].n128_u64[1] = 0LL;
    v3[7].n128_u64[0] = 0LL;
  }

  else
  {
    unint64_t v8 = v0[3];
    uint64_t v9 = &type metadata for Double;
  }

  unint64_t v10 = v0[4];
  v3[6].n128_u64[0] = v8;
  v3[7].n128_u64[1] = (unint64_t)v9;
  v3[8].n128_u64[0] = 0xD000000000000014LL;
  sub_73318();
  v3[8].n128_u64[1] = v11;
  if (v10)
  {
    uint64_t v12 = sub_73348();
    unint64_t v13 = v10;
  }

  else
  {
    uint64_t v12 = sub_73610();
    v3[9].n128_u64[1] = 0LL;
    v3[10].n128_u64[0] = 0LL;
  }

  unint64_t v14 = v0[5];
  v3[9].n128_u64[0] = v13;
  v3[10].n128_u64[1] = v12;
  v3[11].n128_u64[0] = 0xD000000000000015LL;
  sub_73318();
  v3[11].n128_u64[1] = v15;
  if (v14)
  {
    uint64_t v16 = sub_73348();
    unint64_t v17 = v14;
  }

  else
  {
    uint64_t v16 = sub_73610();
    v3[12].n128_u64[1] = 0LL;
    v3[13].n128_u64[0] = 0LL;
  }

  unint64_t v18 = v0[6];
  v3[12].n128_u64[0] = v17;
  v3[13].n128_u64[1] = v16;
  v3[14].n128_u64[0] = 0xD000000000000014LL;
  sub_73318();
  v3[14].n128_u64[1] = v19;
  uint64_t v20 = 0LL;
  if (v18)
  {
    uint64_t v20 = type metadata accessor for DialogCalendarRange(0LL);
  }

  else
  {
    v3[15].n128_u64[1] = 0LL;
    v3[16].n128_u64[0] = 0LL;
  }

  v3[15].n128_u64[0] = v18;
  v3[16].n128_u64[1] = v20;
  uint64_t v21 = *((unsigned int *)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:) + 1);
  sub_A040C();
  sub_372CC();
  sub_732B8();
  sub_72C38();
  uint64_t v22 = (void *)swift_task_alloc(v21);
  v0[9] = v22;
  sub_A0940(v22, (uint64_t)sub_9EDDC);
  uint64_t v23 = sub_A0920(0xD00000000000002CLL);
  return v25(v23);
}

uint64_t sub_9F8B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return sub_5F0F0((uint64_t)sub_9F8CC);
}

uint64_t sub_9F8CC()
{
  unint64_t v2 = v0[2];
  uint64_t v3 = sub_494C(&qword_18A6A0);
  uint64_t v4 = (__n128 *)sub_20308(v3, 320LL);
  v0[9] = v4;
  sub_A0500(v4, (__n128)xmmword_13AB60);
  if (v2)
  {
    uint64_t v5 = sub_72EEC();
    unint64_t v6 = v2;
  }

  else
  {
    unint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
    v4[3].n128_u64[1] = 0LL;
    v4[4].n128_u64[0] = 0LL;
  }

  unint64_t v7 = v0[3];
  v4[3].n128_u64[0] = v6;
  v4[4].n128_u64[1] = v5;
  v4[5].n128_u64[0] = 0xD000000000000012LL;
  sub_73318();
  v4[5].n128_u64[1] = v8;
  if (v7)
  {
    uint64_t v9 = sub_73348();
    unint64_t v10 = v7;
  }

  else
  {
    unint64_t v10 = 0LL;
    uint64_t v9 = 0LL;
    v4[6].n128_u64[1] = 0LL;
    v4[7].n128_u64[0] = 0LL;
  }

  unint64_t v11 = v0[4];
  v4[6].n128_u64[0] = v10;
  v4[7].n128_u64[1] = v9;
  v4[8].n128_u64[0] = 0xD000000000000013LL;
  sub_73318();
  v4[8].n128_u64[1] = v12;
  if (v11)
  {
    uint64_t v13 = sub_73348();
    unint64_t v14 = v11;
  }

  else
  {
    unint64_t v14 = 0LL;
    uint64_t v13 = 0LL;
    v4[9].n128_u64[1] = 0LL;
    v4[10].n128_u64[0] = 0LL;
  }

  unint64_t v15 = v0[5];
  v4[9].n128_u64[0] = v14;
  v4[10].n128_u64[1] = v13;
  v4[11].n128_u64[0] = 0xD000000000000014LL;
  sub_73318();
  v4[11].n128_u64[1] = v16;
  if (v15)
  {
    uint64_t v17 = sub_73348();
    unint64_t v18 = v15;
  }

  else
  {
    unint64_t v18 = 0LL;
    uint64_t v17 = 0LL;
    v4[12].n128_u64[1] = 0LL;
    v4[13].n128_u64[0] = 0LL;
  }

  unint64_t v19 = v0[6];
  v4[12].n128_u64[0] = v18;
  v4[13].n128_u64[1] = v17;
  v4[14].n128_u64[0] = 0xD000000000000015LL;
  sub_73318();
  v4[14].n128_u64[1] = v20;
  if (v19)
  {
    uint64_t v21 = sub_73348();
    unint64_t v22 = v19;
  }

  else
  {
    unint64_t v22 = 0LL;
    uint64_t v21 = 0LL;
    v4[15].n128_u64[1] = 0LL;
    v4[16].n128_u64[0] = 0LL;
  }

  unint64_t v23 = v0[7];
  v4[15].n128_u64[0] = v22;
  v4[16].n128_u64[1] = v21;
  v4[17].n128_u64[0] = 0xD000000000000014LL;
  uint64_t v24 = sub_A0AB4((uint64_t)"queriedCalendarRange");
  if (v23)
  {
    uint64_t v24 = type metadata accessor for DialogCalendarRange(v24);
  }

  else
  {
    v4[18].n128_u64[1] = 0LL;
    v4[19].n128_u64[0] = 0LL;
  }

  v4[18].n128_u64[0] = v23;
  v4[19].n128_u64[1] = v24;
  sub_A08EC();
  sub_372CC();
  sub_732B8();
  sub_72C38();
  sub_36C5C();
  swift_retain();
  uint64_t v25 = (void *)swift_task_alloc(v1);
  v0[10] = v25;
  sub_A094C(v25, (uint64_t)sub_9DA90);
  uint64_t v26 = sub_A09A8(0xD00000000000002ALL);
  return sub_A0608(v26, v27, v28, v29);
}

uint64_t sub_9FAA4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + sub_D7EC(v0 + 16, v0 + 56) = a8;
  *(void *)(v9 + 6sub_D878(v0 + 4) = v8;
  *(void *)(v9 + 40) = a6;
  *(void *)(v9 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a7;
  *(_BYTE *)(v9 + 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 3) = a5;
  *(void *)(v9 + 2sub_D878(v0 + 4) = a2;
  *(void *)(v9 + 3sub_D878(v0 + 2) = a4;
  *(_BYTE *)(v9 + 11sub_D878(v0 + 2) = a3;
  *(void *)(v9 + 1sub_D878(v0 + 6) = a1;
  uint64_t v10 = sub_494C(&qword_189D00);
  *(void *)(v9 + 7sub_D878(v0 + 2) = sub_21410(v10);
  *(void *)(v9 + 80) = swift_task_alloc(v8);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_9FB04()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = sub_494C(&qword_18A6A0);
  uint64_t v4 = sub_20308(v3, 320LL);
  uint64_t v5 = (__n128 *)sub_A0A70(v4);
  uint64_t v6 = sub_A0474(v5, (__n128)xmmword_13AB60);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for WellnessTime(v6);
  }

  else
  {
    v1[7] = 0LL;
    v1[8] = 0LL;
  }

  sub_A0420(v6);
  if ((v7 & 1) != 0) {
    sub_A0570();
  }
  else {
    uint64_t v8 = &type metadata for Double;
  }
  sub_A044C((uint64_t)v8);
  if ((v10 & 1) != 0)
  {
    sub_A0580();
  }

  else
  {
    uint64_t v11 = v0[4];
    unint64_t v12 = &type metadata for Double;
  }

  uint64_t v13 = v0[5];
  v1[18] = v11;
  v1[21] = v12;
  v1[22] = 1953066613LL;
  v1[23] = 0xE400000000000000LL;
  sub_3D7C4(v13, v9, &qword_189D00);
  uint64_t v14 = sub_ABF4();
  if (sub_A0744() == 1)
  {
    uint64_t v15 = sub_72C38();
    sub_3D7BC(v15, &qword_189D00);
    sub_3D92C();
  }

  else
  {
    v1[27] = v14;
    uint64_t v17 = sub_3D86C();
    sub_3D798((uint64_t)v17);
    sub_72C38();
  }

  uint64_t v18 = v0[6];
  v1[28] = 0x6570795461746164LL;
  v1[29] = 0xE800000000000000LL;
  sub_3D7C4(v18, v16, &qword_189D00);
  uint64_t v19 = sub_A0744();
  if ((_DWORD)v19 == 1)
  {
    sub_3D7BC(v19, &qword_189D00);
    sub_3D92C();
  }

  else
  {
    v1[33] = v14;
    unint64_t v20 = sub_3D86C();
    sub_3D798((uint64_t)v20);
  }

  uint64_t v21 = v0[7];
  sub_73318();
  v1[34] = 0xD000000000000014LL;
  v1[35] = v22;
  uint64_t v23 = 0LL;
  if (v21)
  {
    uint64_t v23 = type metadata accessor for DialogCalendarRange(0LL);
  }

  else
  {
    v1[37] = 0LL;
    v1[38] = 0LL;
  }

  v1[36] = v21;
  v1[39] = v23;
  sub_A040C();
  uint64_t v24 = (void *)sub_3703C();
  v0[12] = v24;
  sub_A094C(v24, (uint64_t)sub_9FCDC);
  uint64_t v25 = sub_A0490(0xD000000000000024LL);
  return sub_729C8(v25, v26, v27, v28);
}

uint64_t sub_9FCDC()
{
  if (v0)
  {
    sub_A964();
    return sub_363F8(v2, v3, v4);
  }

  else
  {
    uint64_t v6 = *(void *)(v1 + 72);
    swift_bridgeObjectRelease();
    sub_A78C();
    swift_task_dealloc(v6);
    uint64_t v7 = sub_3D7AC();
    return sub_3D6F8(v7, v8);
  }

uint64_t sub_9FD34()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRelease();
  sub_A78C();
  swift_task_dealloc(v1);
  return sub_A0934(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_9FD70(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = sub_494C(&qword_189D00);
  *(void *)(v7 + 6sub_D878(v0 + 4) = sub_36390(v8);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_9FDB0()
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = sub_494C(&qword_18A6A0);
  uint64_t v6 = sub_20308(v5, 272LL);
  uint64_t v7 = (__n128 *)sub_A0914(v6);
  uint64_t v8 = sub_A0474(v7, (__n128)xmmword_13A300);
  if (v4)
  {
    uint64_t v8 = type metadata accessor for WellnessTime(v8);
  }

  else
  {
    void v3[7] = 0LL;
    v3[8] = 0LL;
  }

  sub_A0420(v8);
  if ((v9 & 1) != 0) {
    sub_A0570();
  }
  else {
    char v10 = &type metadata for Double;
  }
  sub_A044C((uint64_t)v10);
  if ((v11 & 1) != 0) {
    sub_A0580();
  }
  else {
    unint64_t v12 = &type metadata for Double;
  }
  uint64_t v13 = sub_A04AC((uint64_t)v12);
  sub_3D7C4(v13, v14, &qword_189D00);
  uint64_t v15 = sub_ABF4();
  sub_A04D4(v15);
  if (v16)
  {
    uint64_t v17 = sub_72C38();
    sub_3D7BC(v17, &qword_189D00);
    sub_3D8B0();
  }

  else
  {
    uint64_t v18 = sub_A06AC();
    sub_3D738((uint64_t)v18);
    sub_72C38();
  }

  sub_A06C8();
  uint64_t v19 = sub_A0670((uint64_t)"queriedCalendarRange");
  if (v0)
  {
    uint64_t v19 = type metadata accessor for DialogCalendarRange(v19);
  }

  else
  {
    v3[31] = 0LL;
    v3[32] = 0LL;
  }

  sub_A0958(v19);
  sub_A040C();
  unint64_t v20 = (void *)sub_3703C();
  *(void *)(v1 + 80) = v20;
  sub_A0940(v20, (uint64_t)sub_9FEE0);
  uint64_t v21 = sub_A0490(v2 + 9);
  return sub_729C8(v21, v22, v23, v24);
}

uint64_t sub_9FEE0()
{
  if (v0)
  {
    sub_A964();
    return sub_363F8(v1, v2, v3);
  }

  else
  {
    sub_A08E4();
    sub_A78C();
    uint64_t v5 = sub_3D7AC();
    return sub_3D6F8(v5, v6);
  }

uint64_t sub_9FF28()
{
  uint64_t v0 = (uint64_t (*)(void))sub_A0A34();
  return sub_202A8(v0);
}

uint64_t sub_9FF54(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v9 = sub_494C(&qword_189D00);
  *(void *)(v8 + 80) = sub_36390(v9);
  sub_A964();
  return sub_A0738(v10, v11, v12);
}

uint64_t sub_9FF94()
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = sub_494C(&qword_18A6A0);
  uint64_t v7 = sub_20308(v6, 368LL);
  uint64_t v8 = (__n128 *)sub_A0A70(v7);
  uint64_t v9 = sub_A0474(v8, (__n128)xmmword_13AB30);
  if (v5)
  {
    uint64_t v9 = type metadata accessor for WellnessTime(v9);
  }

  else
  {
    void v4[7] = 0LL;
    void v4[8] = 0LL;
  }

  sub_A0650(v9);
  if ((v10 & 1) != 0) {
    sub_A0570();
  }
  else {
    uint64_t v11 = &type metadata for Double;
  }
  sub_A05B4((uint64_t)v11);
  if ((v12 & 1) != 0) {
    sub_A0580();
  }
  else {
    uint64_t v13 = &type metadata for Double;
  }
  sub_A0590((uint64_t)v13);
  if ((v14 & 1) != 0) {
    sub_A0904();
  }
  else {
    uint64_t v15 = &type metadata for Double;
  }
  sub_A05D8((uint64_t)v15);
  if ((v16 & 1) != 0) {
    sub_A0A18();
  }
  else {
    uint64_t v17 = &type metadata for Double;
  }
  uint64_t v18 = sub_A0684((uint64_t)v17);
  sub_3D7C4(v18, v19, &qword_189D00);
  uint64_t v20 = sub_ABF4();
  sub_A06D8(v20);
  if (v21)
  {
    uint64_t v22 = sub_72C38();
    sub_3D7BC(v22, &qword_189D00);
    sub_3D8B0();
  }

  else
  {
    v4[39] = v1;
    uint64_t v23 = sub_A0730();
    sub_3D738((uint64_t)v23);
    sub_72C38();
  }

  sub_A09D8();
  uint64_t v24 = sub_A0964((uint64_t)"queriedCalendarRange");
  if (v0)
  {
    uint64_t v24 = type metadata accessor for DialogCalendarRange(v24);
  }

  else
  {
    v4[43] = 0LL;
    v4[44] = 0LL;
  }

  sub_A0A9C(v24);
  sub_A040C();
  uint64_t v25 = (void *)sub_3703C();
  *(void *)(v2 + 9sub_D878(v0 + 6) = v25;
  *uint64_t v25 = v2;
  v25[1] = sub_9D8FC;
  uint64_t v26 = sub_A0490(v3 + 27);
  return sub_729C8(v26, v27, v28, v29);
}

uint64_t sub_A0108(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v9 + sub_D7EC(v0 + 16, v0 + 56) = v16;
  *(void *)(v9 + 6sub_D878(v0 + 4) = v8;
  *(_BYTE *)(v9 + 10_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = v15;
  *(void *)(v9 + 40) = a6;
  *(void *)(v9 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a8;
  *(_BYTE *)(v9 + 10sub_D878(v0 + 6) = a7;
  *(_BYTE *)(v9 + 105) = a5;
  *(void *)(v9 + 2sub_D878(v0 + 4) = a2;
  *(void *)(v9 + 3sub_D878(v0 + 2) = a4;
  *(_BYTE *)(v9 + 10sub_D878(v0 + 4) = a3;
  *(void *)(v9 + 1sub_D878(v0 + 6) = a1;
  uint64_t v10 = sub_494C(&qword_189D00);
  *(void *)(v9 + 7sub_D878(v0 + 2) = sub_36390(v10);
  sub_A964();
  return swift_task_switch(v11, v12, v13);
}

uint64_t sub_A0174()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = sub_494C(&qword_18A6A0);
  uint64_t v3 = (__n128 *)sub_20308(v2, 368LL);
  *(void *)(v0 + 80) = v3;
  uint64_t v4 = sub_A0474(v3, (__n128)xmmword_13AB30);
  if (v1)
  {
    uint64_t v4 = type metadata accessor for WellnessTime(v4);
  }

  else
  {
    v3[3].n128_u64[1] = 0LL;
    v3[4].n128_u64[0] = 0LL;
  }

  sub_A0650(v4);
  if ((v5 & 1) != 0) {
    sub_A0570();
  }
  else {
    uint64_t v6 = &type metadata for Double;
  }
  sub_A05B4((uint64_t)v6);
  if ((v7 & 1) != 0) {
    sub_A0580();
  }
  else {
    uint64_t v8 = &type metadata for Double;
  }
  sub_A0590((uint64_t)v8);
  if ((v10 & 1) != 0)
  {
    sub_A0904();
  }

  else
  {
    unint64_t v11 = *(void *)(v0 + 40);
    uint64_t v12 = &type metadata for Double;
  }

  uint64_t v13 = *(void *)(v0 + 72);
  uint64_t v14 = *(void *)(v0 + 48);
  v3[12].n128_u64[0] = v11;
  v3[13].n128_u64[1] = (unint64_t)v12;
  v3[14].n128_u64[0] = 1953066613LL;
  v3[14].n128_u64[1] = 0xE400000000000000LL;
  sub_3D7C4(v14, v9, &qword_189D00);
  uint64_t v15 = sub_ABF4();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v13, 1LL, v15) == 1)
  {
    uint64_t v16 = sub_72C38();
    sub_3D7BC(v16, &qword_189D00);
    sub_3D8B0();
  }

  else
  {
    v3[16].n128_u64[1] = v15;
    uint64_t v17 = sub_A0730();
    sub_3D738((uint64_t)v17);
    sub_72C38();
  }

  uint64_t v18 = *(void *)(v0 + 56);
  unsigned __int8 v19 = *(_BYTE *)(v0 + 107);
  v3[17].n128_u64[0] = 0xD000000000000016LL;
  v3[17].n128_u64[1] = 0x8000000000144A80LL;
  v3[18].n128_u8[0] = v19;
  v3[19].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v3[20].n128_u64[0] = 0xD000000000000014LL;
  sub_73318();
  v3[20].n128_u64[1] = v20;
  uint64_t v21 = 0LL;
  if (v18)
  {
    uint64_t v21 = type metadata accessor for DialogCalendarRange(0LL);
  }

  else
  {
    v3[21].n128_u64[1] = 0LL;
    v3[22].n128_u64[0] = 0LL;
  }

  sub_A0A9C(v21);
  sub_A040C();
  uint64_t v22 = (void *)sub_3703C();
  *(void *)(v0 + 8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v22;
  sub_A094C(v22, (uint64_t)sub_A0344);
  uint64_t v23 = sub_A0490(0xD00000000000001ELL);
  return sub_729C8(v23, v24, v25, v26);
}

uint64_t sub_A0344()
{
  *(void *)(v1 + 9sub_D878(v0 + 6) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    sub_A964();
    return sub_363F8(v4, v5, v6);
  }

  else
  {
    swift_bridgeObjectRelease();
    sub_A78C();
    uint64_t v8 = sub_3D7AC();
    return sub_3D6F8(v8, v9);
  }

uint64_t sub_A03A0()
{
  return sub_202A8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_A03D0()
{
  return type metadata accessor for WellnessQueryingCATsSimple(0LL);
}

uint64_t sub_A03E8()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 80);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_A040C()
{
  return swift_retain(v0);
}

uint64_t sub_A0420(uint64_t result)
{
  *(void *)(v2 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v1;
  *(void *)(v2 + 7sub_D878(v0 + 2) = result;
  strcpy((char *)(v2 + 80), "averageValue");
  *(_BYTE *)(v2 + 9_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 3) = 0;
  *(_WORD *)(v2 + 9sub_D878(v0 + 4) = -5120;
  return result;
}

void sub_A044C(uint64_t a1@<X8>)
{
  v2[12] = v1;
  v2[15] = a1;
  v2[16] = 0x6C61566C61746F74LL;
  v2[17] = 0xEA00000000006575LL;
}

uint64_t sub_A0474(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = 1701669236LL;
  a1[2].n128_u64[1] = 0xE400000000000000LL;
  return 0LL;
}

uint64_t sub_A0490@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_A04AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = *(void *)(v2 + 40);
  v3[18] = v1;
  v3[21] = a1;
  v3[22] = 1953066613LL;
  v3[23] = 0xE400000000000000LL;
  return result;
}

uint64_t sub_A04D4(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1LL, a1);
}

__n128 *sub_A0500(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 1701669236LL;
  result[2].n128_u64[1] = 0xE400000000000000LL;
  return result;
}

uint64_t sub_A0518@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_A0534()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 96);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 10sub_D878(v0 + 4) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_A0558(uint64_t result, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a7;
  *(void *)(v8 + sub_D7EC(v0 + 16, v0 + 56) = v7;
  *(_BYTE *)(v8 + 9_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = a5;
  *(void *)(v8 + 3sub_D878(v0 + 2) = a4;
  *(void *)(v8 + 40) = a6;
  *(_BYTE *)(v8 + 9sub_D878(v0 + 6) = a3;
  *(void *)(v8 + 1sub_D878(v0 + 6) = result;
  *(void *)(v8 + 2sub_D878(v0 + 4) = a2;
  return result;
}

void sub_A0570()
{
  *(void *)(v0 + 10sub_D878(v0 + 4) = 0LL;
  *(void *)(v0 + 11sub_D878(v0 + 2) = 0LL;
}

void sub_A0580()
{
  *(void *)(v0 + 15sub_D878(v0 + 2) = 0LL;
  *(void *)(v0 + 160) = 0LL;
}

void sub_A0590(uint64_t a1@<X8>)
{
  v2[18] = v1;
  v2[21] = a1;
  v2[22] = 0x65756C615678616DLL;
  v2[23] = 0xE800000000000000LL;
}

void sub_A05B4(uint64_t a1@<X8>)
{
  v2[12] = v1;
  v2[15] = a1;
  v2[16] = 0x65756C61566E696DLL;
  v2[17] = 0xE800000000000000LL;
}

void sub_A05D8(uint64_t a1@<X8>)
{
  *(void *)(v2 + 19sub_D878(v0 + 2) = v1;
  *(void *)(v2 + 21sub_D878(v0 + 6) = a1;
  strcpy((char *)(v2 + 224), "averageValue");
  *(_BYTE *)(v2 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = 0;
  *(_WORD *)(v2 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = -5120;
}

uint64_t sub_A0608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_A0624(uint64_t result, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  char v11 = *(_BYTE *)(v10 + 16);
  uint64_t v12 = *(void *)(v10 + 24);
  *(void *)(v9 + 6sub_D878(v0 + 4) = *(void *)(v10 + 32);
  *(void *)(v9 + 7sub_D878(v0 + 2) = v8;
  *(_BYTE *)(v9 + 115) = v11;
  *(void *)(v9 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a8;
  *(void *)(v9 + sub_D7EC(v0 + 16, v0 + 56) = v12;
  *(_BYTE *)(v9 + 11sub_D878(v0 + 4) = a7;
  *(_BYTE *)(v9 + 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 3) = a5;
  *(void *)(v9 + 3sub_D878(v0 + 2) = a4;
  *(void *)(v9 + 40) = a6;
  *(_BYTE *)(v9 + 11sub_D878(v0 + 2) = a3;
  *(void *)(v9 + 1sub_D878(v0 + 6) = result;
  *(void *)(v9 + 2sub_D878(v0 + 4) = a2;
  return result;
}

uint64_t sub_A0650(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 0x65756C6176LL;
  v2[11] = 0xE500000000000000LL;
  return result;
}

uint64_t sub_A0670@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 22sub_D878(v0 + 4) = v1;
  *(void *)(v2 + 23sub_D878(v0 + 2) = (a1 - 32) | 0x8000000000000000LL;
  return 0LL;
}

uint64_t sub_A0684@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = *(void *)(v2 + 56);
  v3[30] = v1;
  v3[33] = a1;
  v3[34] = 1953066613LL;
  v3[35] = 0xE400000000000000LL;
  return result;
}

void *sub_A06AC()
{
  *(void *)(v2 + 21sub_D878(v0 + 6) = v1;
  return sub_B76C(v0);
}

uint64_t sub_A06B8(uint64_t a1)
{
  return swift_task_switch(a1, 0LL, 0LL);
}

  ;
}

uint64_t sub_A06D8(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1LL, a1);
}

uint64_t sub_A0704( uint64_t result, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, char a9, uint64_t a10)
{
  *(void *)(v11 + sub_D7EC(v0 + 16, v0 + 56) = a10;
  *(void *)(v11 + 6sub_D878(v0 + 4) = v10;
  *(_BYTE *)(v11 + 99) = a9;
  *(void *)(v11 + 40) = a6;
  *(void *)(v11 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a8;
  *(_BYTE *)(v11 + 9_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a7;
  *(_BYTE *)(v11 + 9_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = a5;
  *(void *)(v11 + 2sub_D878(v0 + 4) = a2;
  *(void *)(v11 + 3sub_D878(v0 + 2) = a4;
  *(_BYTE *)(v11 + 9sub_D878(v0 + 6) = a3;
  *(void *)(v11 + 1sub_D878(v0 + 6) = result;
  return result;
}

void *sub_A0730()
{
  return sub_B76C(v0);
}

uint64_t sub_A0738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_A0744()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1LL, v0);
}

uint64_t sub_A0754()
{
  uint64_t result = 0LL;
  *(void *)(v0 + sub_D7EC(v0 + 16, v0 + 56) = 0LL;
  *(void *)(v0 + 6sub_D878(v0 + 4) = 0LL;
  return result;
}

void sub_A0764()
{
  *(void *)(v0 + 10sub_D878(v0 + 4) = 0LL;
  *(void *)(v0 + 11sub_D878(v0 + 2) = 0LL;
}

void sub_A0774(uint64_t a1@<X8>)
{
  *(void *)(v2 + 19sub_D878(v0 + 2) = v1;
  *(void *)(v2 + 21sub_D878(v0 + 6) = a1;
  strcpy((char *)(v2 + 224), "averageValue");
  *(_BYTE *)(v2 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = 0;
  *(_WORD *)(v2 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = -5120;
}

uint64_t sub_A07A4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a2;
  *(void *)(v2 + 7sub_D878(v0 + 2) = result;
  strcpy((char *)(v2 + 80), "averageValue");
  *(_BYTE *)(v2 + 9_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 3) = 0;
  *(_WORD *)(v2 + 9sub_D878(v0 + 4) = -5120;
  return result;
}

void sub_A07D4()
{
  *(void *)(v1 - _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *v0;
}

uint64_t sub_A07E8()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 72);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 80) = v0;
  return swift_task_dealloc(v5);
}

void sub_A080C(uint64_t a1@<X8>)
{
  v2[12] = v1;
  v2[15] = a1;
  v2[16] = 0x6C61566C61746F74LL;
  v2[17] = 0xEA00000000006575LL;
}

void sub_A0838(uint64_t a1@<X8>)
{
  v2[30] = a1;
  v2[33] = v1;
  v2[34] = 0xD000000000000014LL;
}

void sub_A0850(uint64_t a1@<X8>)
{
  v2[18] = a1;
  v2[21] = v1;
  v2[22] = 0xD000000000000014LL;
}

void sub_A0868(uint64_t a1@<X8>)
{
  v2[12] = v1;
  v2[15] = a1;
  v2[16] = 0x65756C61566E696DLL;
  v2[17] = 0xE800000000000000LL;
}

void sub_A0890(uint64_t a1@<X8>)
{
  v2[18] = v1;
  v2[21] = a1;
  v2[22] = 0x65756C615678616DLL;
  v2[23] = 0xE800000000000000LL;
}

uint64_t sub_A08B8()
{
  return swift_task_alloc(v0);
}

uint64_t sub_A08C0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v2[6] = a2;
  v2[9] = result;
  v2[10] = 0x65756C6176LL;
  v2[11] = 0xE500000000000000LL;
  return result;
}

uint64_t sub_A08E4()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 72));
}

uint64_t sub_A08EC()
{
  return swift_retain(v0);
}

void sub_A0904()
{
  *(void *)(v0 + 200) = 0LL;
  *(void *)(v0 + 20_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0LL;
}

uint64_t sub_A0914(uint64_t result)
{
  *(void *)(v1 + 7sub_D878(v0 + 2) = result;
  return result;
}

uint64_t sub_A0920@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_A0934(uint64_t (*a1)(void))
{
  return a1();
}

void *sub_A0940@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  void *result = v2;
  result[1] = a2;
  return result;
}

void *sub_A094C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  void *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_A0958(uint64_t result)
{
  *(void *)(v2 + sub_A304(v0 - 176, v0 - 240) = v1;
  *(void *)(v2 + 26sub_D878(v0 + 4) = result;
  return result;
}

uint64_t sub_A0964@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 320) = v1;
  *(void *)(v2 + 32_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = (a1 - 32) | 0x8000000000000000LL;
  return 0LL;
}

uint64_t sub_A0978@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 280) = (a1 - 32) | 0x8000000000000000LL;
  return 0LL;
}

uint64_t sub_A098C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 18sub_D878(v0 + 4) = (a1 - 32) | 0x8000000000000000LL;
  return 0LL;
}

uint64_t sub_A09A0()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 72));
}

uint64_t sub_A09A8@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_A09C4()
{
  return swift_retain(v0);
}

  ;
}

void sub_A09E8()
{
  *(void *)(v0 + 15sub_D878(v0 + 2) = 0LL;
  *(void *)(v0 + 160) = 0LL;
}

void sub_A09F8()
{
  *(void *)(v0 + 24_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0LL;
  *(void *)(v0 + 2sub_D7EC(v0 + 16, v0 + 56) = 0LL;
}

void sub_A0A08()
{
  *(void *)(v0 + 15sub_D878(v0 + 2) = 0LL;
  *(void *)(v0 + 160) = 0LL;
}

void sub_A0A18()
{
  *(void *)(v0 + 24_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0LL;
  *(void *)(v0 + 2sub_D7EC(v0 + 16, v0 + 56) = 0LL;
}

  ;
}

uint64_t sub_A0A34()
{
  return *(void *)(v0 + 8);
}

  ;
}

uint64_t sub_A0A54()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 56));
}

uint64_t sub_A0A5C@<X0>(uint64_t a1@<X8>)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t sub_A0A70(uint64_t result)
{
  *(void *)(v1 + 8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = result;
  return result;
}

uint64_t sub_A0A7C(uint64_t result)
{
  *(void *)(v1 + 7sub_D878(v0 + 2) = result;
  return result;
}

void sub_A0A88(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_A0A94()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 88));
}

uint64_t sub_A0A9C(uint64_t result)
{
  *(void *)(v2 + 33sub_D878(v0 + 6) = v1;
  *(void *)(v2 + 360) = result;
  return result;
}

void *sub_A0AA8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  void *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_A0AB4@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 280) = (a1 - 32) | 0x8000000000000000LL;
  return 0LL;
}

uint64_t sub_A0AC8(uint64_t a1)
{
  if (v2 != 270)
  {
    uint64_t v3 = sub_10F1C0(v2);
    BOOL v5 = v3 == 0x61757274736E656DLL && v4 == 0xEC0000006E6F6974LL;
    if (v5)
    {
LABEL_20:
      sub_249D4();
      goto LABEL_21;
    }

    char v6 = sub_58F94(v3, v4, 0x61757274736E656DLL, 0xEC0000006E6F6974LL);
    sub_249D4();
    if ((v6 & 1) != 0)
    {
LABEL_21:
      if (getHealthLogEntity(from:)(a1))
      {
        dispatch thunk of UsoEntity_common_HealthLog.valueCategory.getter();
        sub_3652C();
      }

      sub_A28C8();
      double v18 = v17;
      sub_367AC();
      return *(void *)&v18;
    }
  }

  sub_A0F84();
  if (v7 == 270) {
    goto LABEL_8;
  }
  uint64_t v13 = sub_10F1C0(v7);
  if (v13 == 0x676E6974746F7073LL && v14 == 0xE800000000000000LL) {
    goto LABEL_20;
  }
  char v16 = sub_58F94(v13, v14, 0x676E6974746F7073LL, 0xE800000000000000LL);
  sub_249D4();
  if ((v16 & 1) != 0) {
    goto LABEL_21;
  }
LABEL_8:
  uint64_t v8 = sub_A12B4(a1);
  uint64_t v9 = v8;
  if ((unint64_t)v8 >> 62)
  {
    if (v8 >= 0) {
      v8 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    if (_CocoaArrayWrapper.endIndex.getter(v8)) {
      goto LABEL_10;
    }
LABEL_27:
    sub_249D4();
    goto LABEL_28;
  }

uint64_t sub_A0D74(uint64_t a1)
{
  unsigned __int16 v2 = static UsoTask_CodegenConverter.convert(task:)(v36);
  sub_418B8((uint64_t)v2, v3, &qword_18AA78, v4, v5);
  if (!v35)
  {
    sub_A4A4((uint64_t)v34, &qword_18AA78);
    goto LABEL_19;
  }

  uint64_t common_HealthLog = type metadata accessor for UsoTask_create_common_HealthLog(0LL);
  uint64_t v8 = sub_A3788(common_HealthLog, v7);
  if ((v8 & 1) == 0) {
    goto LABEL_19;
  }
  swift_release();
  uint64_t v12 = sub_A12B4(a1);
  uint64_t v13 = v12;
  if ((unint64_t)v12 >> 62)
  {
    if (v12 >= 0) {
      v12 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    if (_CocoaArrayWrapper.endIndex.getter(v12)) {
      goto LABEL_5;
    }
LABEL_12:
    sub_2A184();
    uint64_t v14 = 0LL;
    goto LABEL_13;
  }

void sub_A0F84()
{
  uint64_t v5 = v4;
  sub_494C(&qword_18DCA8);
  sub_6D20();
  __chkstk_darwin(v6);
  sub_6D44();
  uint64_t v9 = v8 - v7;
  sub_494C(&qword_18DCB0);
  sub_6D20();
  __chkstk_darwin(v10);
  sub_6D44();
  uint64_t v13 = v12 - v11;
  type metadata accessor for UsoEntity_common_MeasurementUnitType.DefinedValues(0LL);
  sub_A3880();
  __chkstk_darwin(v14);
  sub_AA58();
  sub_A37EC();
  __chkstk_darwin(v15);
  uint64_t v16 = sub_A37A0();
  char v17 = sub_A0D74(v5);
  sub_A2620(v16, v17);
  int v19 = v18;
  sub_39BAC();
  if (v19 == 270)
  {
    uint64_t v20 = static UsoTask_CodegenConverter.convert(task:)(&v49);
    sub_A383C((uint64_t)v20, v21, &qword_18AA78);
    if (v48)
    {
      uint64_t v22 = type metadata accessor for UsoTask_requestLog_common_HealthLog(0LL);
      uint64_t v23 = sub_A3770(v22);
      if ((v23 & 1) == 0) {
        goto LABEL_13;
      }
      uint64_t v25 = swift_retain();
      uint64_t v26 = dispatch thunk of Uso_VerbTemplate_ReferenceMeasurementUnit.measurementUnit.getter(v25);
      uint64_t v27 = sub_37110();
      if (v26 && (uint64_t v28 = dispatch thunk of UsoEntity_common_MeasurementUnit.type.getter(v27), v29 = sub_3652C(), v28))
      {
        dispatch thunk of UsoEntity_common_MeasurementUnitType.definedValue.getter(v29);
        sub_39BAC();
        sub_A614(v13, 1LL, v0);
        if (!v30)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v13, v0);
          (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))( v1,  enum case for UsoEntity_common_MeasurementUnitType.DefinedValues.common_MeasurementUnitType_WeightUnit(_:),  v0);
          char v31 = sub_584B4(v2, v1);
          sub_37110();
          uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
          v32(v1, v0);
          uint64_t v23 = ((uint64_t (*)(uint64_t, uint64_t))v32)(v2, v0);
          if ((v31 & 1) != 0)
          {
            sub_41BE0(v23, &qword_18AA78);
            goto LABEL_24;
          }

uint64_t sub_A12B4(uint64_t a1)
{
  uint64_t v1 = _swiftEmptyArrayStorage;
  if (!getHealthLogEntity(from:)(a1)) {
    return (uint64_t)v1;
  }
  if (!dispatch thunk of UsoEntity_common_HealthLog.value.getter()
    || (uint64_t v2 = dispatch thunk of UsoEntity_common_Measurement.components.getter(), sub_3652C(), !v2))
  {
    sub_37034();
    return (uint64_t)v1;
  }

  unint64_t v15 = (unint64_t)_swiftEmptyArrayStorage;
  if (!((unint64_t)v2 >> 62))
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8LL));
    uint64_t result = sub_A3814();
    if (v3) {
      goto LABEL_6;
    }
LABEL_22:
    sub_6D64();
    uint64_t v1 = _swiftEmptyArrayStorage;
LABEL_23:
    sub_37034();
    sub_6D64();
    return (uint64_t)v1;
  }

  if (v2 >= 0) {
    uint64_t v13 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  else {
    uint64_t v13 = v2;
  }
  sub_A3814();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v13);
  uint64_t v3 = result;
  if (!result) {
    goto LABEL_22;
  }
LABEL_6:
  if (v3 >= 1)
  {
    for (uint64_t i = 0LL; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001LL) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)(i, v2);
      }
      else {
        sub_363E8();
      }
      dispatch thunk of CodeGenListEntry.entry.getter(&v14);
      uint64_t v6 = sub_3652C();
      uint64_t v7 = v14;
      if (v14)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
        unint64_t v9 = *(void *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFFF8LL));
        unint64_t v8 = *(void *)((char *)&dword_18 + (v15 & 0xFFFFFFFFFFFFFF8LL));
        if (v9 >= v8 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1LL);
        }
        uint64_t v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
        specialized Array._endMutation()(v10, v11, v12);
      }
    }

    sub_6D64();
    uint64_t v1 = (void *)v15;
    goto LABEL_23;
  }

  __break(1u);
  return result;
}

uint64_t sub_A1430(uint64_t a1)
{
  v3._uint64_t countAndFlagsBits = UsoTask.verbString.getter(a1);
  unsigned __int8 v1 = sub_1262A4(v3);
  if (v1 > 9u) {
    return 0LL;
  }
  else {
    return byte_13C1B6[(char)v1];
  }
}

void sub_A1478( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  uint64_t v24 = type metadata accessor for Date(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  sub_72E90();
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&a9 - v27;
  sub_494C(&qword_189BA0);
  sub_6D20();
  __chkstk_darwin(v29);
  sub_6D44();
  uint64_t v32 = v31 - v30;
  uint64_t v33 = sub_ABEC();
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  sub_41C50();
  sub_A15E0();
  sub_A614(v32, 1LL, v33);
  if (v35)
  {
    sub_A4A4(v32, &qword_189BA0);
  }

  else
  {
    uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v20, v32, v33);
    Date.init()(v36);
    uint64_t v37 = DateInterval.contains(_:)(v28);
    if ((v37 & 1) != 0)
    {
      sub_A3834((uint64_t)v28, *(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
    }

    else
    {
      DateInterval.end.getter(v37);
      static Date.< infix(_:_:)(v21, v28);
      uint64_t v38 = *(void (**)(char *, uint64_t))(v25 + 8);
      v38(v21, v24);
      v38(v28, v24);
    }

    sub_A3824();
  }

  sub_D8FC();
}

void *sub_A15E0()
{
  uint64_t v104 = v1;
  uint64_t v105 = v2;
  uint64_t v4 = v3;
  uint64_t v101 = v5;
  uint64_t v6 = type metadata accessor for DateTimeResolutionSpec.DateTimeConvergenceStrategy(0LL);
  uint64_t v98 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_6D30();
  uint64_t v99 = v7;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v94 = *(void *)(v8 - 8);
  uint64_t v95 = v8;
  __chkstk_darwin(v8);
  sub_6D30();
  uint64_t v93 = v9;
  uint64_t v10 = type metadata accessor for UsoEntity_common_ListPosition.DefinedValues(0LL);
  uint64_t v100 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_6D30();
  uint64_t v92 = v11;
  sub_494C(&qword_18B3E8);
  sub_6D20();
  __chkstk_darwin(v12);
  sub_3751C();
  uint64_t v96 = v13;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v85 - v15;
  sub_494C(&qword_189B90);
  sub_6D20();
  __chkstk_darwin(v17);
  sub_3751C();
  uint64_t v91 = v18;
  __chkstk_darwin(v19);
  sub_A37EC();
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v97 = (uint64_t)&v85 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v85 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v28 = (char *)&v85 - v27;
  __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v85 - v29;
  uint64_t v31 = getHealthLogEntity(from:)(v4);
  if (!v31) {
    goto LABEL_15;
  }
  uint64_t v32 = v31;
  if (!((uint64_t (*)(void))dispatch thunk of UsoEntity_common_HealthLog.dateTime.getter)())
  {
    sub_37110();
LABEL_15:
    uint64_t v42 = sub_ABEC();
    return (void *)_s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v101, 1LL, 1LL, v42);
  }

  uint64_t v90 = v6;
  uint64_t v89 = sub_10B5B8();
  uint64_t v33 = sub_3652C();
  uint64_t v34 = v32;
  if (((uint64_t (*)(uint64_t))dispatch thunk of UsoEntity_common_HealthLog.dateTime.getter)(v33)
    && (uint64_t v34 = sub_A38EC(), v35 = sub_37034(), v34)
    && (uint64_t v36 = ((uint64_t (*)(uint64_t))dispatch thunk of UsoEntity_common_Date.dayOfWeek.getter)(v35),
        uint64_t v37 = sub_3652C(),
        v36)
    && (uint64_t v34 = ((uint64_t (*)(uint64_t))dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter)(v37),
        uint64_t v38 = sub_37034(),
        v34))
  {
    ((void (*)(uint64_t))dispatch thunk of UsoEntity_common_ListPosition.definedValue.getter)(v38);
    sub_3652C();
  }

  else
  {
    sub_A37D4((uint64_t)v30);
  }

  uint64_t v39 = *(void (**)(void))(v100 + 104);
  HIDWORD(v8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Previous(_:);
  uint64_t v88 = (void (*)(uint64_t, void, uint64_t))v39;
  v39(v28);
  sub_A3894((uint64_t)v28);
  sub_A381C((uint64_t)v30, (uint64_t)v16);
  sub_A381C((uint64_t)v28, v34);
  sub_A370C((uint64_t)v16);
  if (v44)
  {
    sub_A3758((uint64_t)v28);
    sub_A3758((uint64_t)v30);
    uint64_t v40 = sub_A370C(v34);
    if (v44)
    {
      uint64_t v41 = v98;
      goto LABEL_30;
    }

    goto LABEL_19;
  }

  sub_41850((uint64_t)v16, (uint64_t)v25, &qword_189B90);
  sub_A370C(v34);
  if (v44)
  {
    sub_A3758((uint64_t)v28);
    sub_A3758((uint64_t)v30);
    uint64_t v40 = (*(uint64_t (**)(char *, uint64_t))(v100 + 8))(v25, v10);
LABEL_19:
    sub_A3878(v40, &qword_18B3E8);
    uint64_t v41 = v98;
    goto LABEL_20;
  }

  uint64_t v55 = v100;
  uint64_t v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v100 + 32);
  uint64_t v86 = v32;
  uint64_t v57 = v92;
  sub_A38CC(v92, v56);
  sub_A410( &qword_18B400,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_common_ListPosition.DefinedValues,  (uint64_t)&protocol conformance descriptor for UsoEntity_common_ListPosition.DefinedValues);
  HIDWORD(v85) = sub_A385C((uint64_t)v25, v57, v59, v58);
  uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
  uint64_t v61 = v57;
  uint64_t v32 = v86;
  v60(v61, v10);
  sub_A674((uint64_t)v28);
  sub_A674((uint64_t)v30);
  v60((uint64_t)v25, v10);
  sub_A674((uint64_t)v16);
  uint64_t v41 = v98;
  if ((v85 & 0x100000000LL) != 0)
  {
LABEL_39:
    uint64_t v70 = Logger.wellness.unsafeMutableAddressor(v62);
    swift_beginAccess(v70, &v102, 0LL, 0LL);
    uint64_t v72 = v93;
    uint64_t v71 = v94;
    uint64_t v73 = v95;
    uint64_t v74 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v94 + 16))(v93, v70, v95);
    uint64_t v75 = (os_log_s *)Logger.logObject.getter(v74);
    os_log_type_t v76 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = (uint8_t *)sub_A5E8(2LL);
      *(_WORD *)uint64_t v77 = 0;
      _os_log_impl( &dword_0,  v75,  v76,  "We are forcing DateTime convergence strategy to be .future because user said previous dayOfWeek or monthOfYear",  v77,  2u);
      sub_5050((uint64_t)v77);
    }

    uint64_t v78 = (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 8))(v72, v73);
    ((void (*)(void *__return_ptr, uint64_t))static Device.current.getter)(v103, v78);
    uint64_t v54 = (unsigned int *)&enum case for DateTimeResolutionSpec.DateTimeConvergenceStrategy.future(_:);
    goto LABEL_42;
  }

LABEL_20:
  uint64_t v45 = v32;
  if (((uint64_t (*)(void))dispatch thunk of UsoEntity_common_HealthLog.dateTime.getter)()
    && (uint64_t v45 = sub_A38EC(), v46 = sub_37034(), v45)
    && (uint64_t v47 = ((uint64_t (*)(uint64_t))dispatch thunk of UsoEntity_common_Date.monthOfYear.getter)(v46),
        uint64_t v48 = sub_3652C(),
        v47)
    && (uint64_t v45 = ((uint64_t (*)(uint64_t))dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter)(v48),
        uint64_t v49 = sub_37034(),
        v45))
  {
    uint64_t v50 = v97;
    ((void (*)(uint64_t))dispatch thunk of UsoEntity_common_ListPosition.definedValue.getter)(v49);
    sub_3652C();
  }

  else
  {
    uint64_t v50 = v97;
    sub_A37D4(v97);
  }

  uint64_t v51 = v96;
  v88(v0, HIDWORD(v87), v10);
  sub_A3894(v0);
  sub_A381C(v50, v51);
  sub_A381C(v0, v45);
  sub_A370C(v51);
  if (v44)
  {
    sub_A3758(v0);
    sub_A3758(v50);
    uint64_t v40 = sub_A370C(v45);
    if (!v44) {
      goto LABEL_34;
    }
LABEL_30:
    sub_A3878(v40, &qword_189B90);
    goto LABEL_39;
  }

  uint64_t v52 = v91;
  sub_41850(v51, v91, &qword_189B90);
  sub_A370C(v45);
  if (v53)
  {
    sub_A3758(v0);
    sub_A3758(v50);
    uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v100 + 8))(v52, v10);
LABEL_34:
    sub_A3878(v40, &qword_18B3E8);
    goto LABEL_35;
  }

  uint64_t v63 = v100;
  uint64_t v64 = v52;
  uint64_t v65 = v92;
  sub_A38CC(v92, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v100 + 32));
  sub_A410( &qword_18B400,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_common_ListPosition.DefinedValues,  (uint64_t)&protocol conformance descriptor for UsoEntity_common_ListPosition.DefinedValues);
  char v68 = sub_A385C(v64, v65, v67, v66);
  uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
  v69(v65, v10);
  sub_A674(v0);
  sub_A674(v97);
  v69(v64, v10);
  sub_A674(v51);
  if ((v68 & 1) != 0) {
    goto LABEL_39;
  }
LABEL_35:
  ((void (*)(void *__return_ptr))static Device.current.getter)(v103);
  uint64_t v54 = (unsigned int *)&enum case for DateTimeResolutionSpec.DateTimeConvergenceStrategy.past(_:);
LABEL_42:
  uint64_t v79 = v99;
  (*(void (**)(uint64_t, void, uint64_t))(v41 + 104))(v99, *v54, v90);
  sub_10B944( v89,  1LL,  v79,  v80,  v81,  v82,  v83,  v84,  v85,  v86,  v87,  (uint64_t)v88,  v89,  v90,  v91,  v92,  v93,  v94,  v95,  v96);
  swift_release();
  sub_37110();
  sub_A3834(v79, *(uint64_t (**)(uint64_t, uint64_t))(v41 + 8));
  return sub_4181C(v103);
}

  sub_36F38((uint64_t)v22, v33);
  sub_A384((uint64_t)v22, a1 + v25[12]);
  uint64_t v35 = sub_72C38();
  getMedStatus(from:)(v35, v36, v37, v38, v39, v40);
  uint64_t v42 = v41;
  sub_36EBC();
  if ((v42 & 1) != 0)
  {
    uint64_t v43 = 0x6E656B6154LL;
    char v44 = 0xE500000000000000LL;
  }

  else
  {
    uint64_t v43 = sub_DECCC(0x6B53u);
  }

  String.toSpeakableString.getter(v43, v44);
  sub_99194();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v45, v46, v47, v10);
  sub_A384((uint64_t)v20, a1 + v25[15]);
  sub_DA680(a3, (SEL *)&selRef_matchingMeds, (uint64_t (*)(void))&type metadata accessor for MatchedMedName);
  if (!v48) {
    goto LABEL_34;
  }
  uint64_t v49 = v48;
  if (!((unint64_t)v48 >> 62))
  {
LABEL_33:
    uint64_t v48 = sub_369F4();
    goto LABEL_34;
  }

  if (v48 >= 0) {
    v48 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  if (!_CocoaArrayWrapper.endIndex.getter(v48)) {
    goto LABEL_33;
  }
LABEL_26:
  sub_398E0(0LL, (v49 & 0xC000000000000001LL) == 0, v49);
  if ((v49 & 0xC000000000000001LL) != 0) {
    uint64_t v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v49);
  }
  else {
    uint64_t v50 = *(id *)(v49 + 32);
  }
  uint64_t v51 = v50;
  sub_369F4();
  uint64_t v48 = sub_1141DC(v51);
  if (v52)
  {
    char v53 = v61;
    String.toSpeakableString.getter(v48, v52);
    sub_36C34();
    (*(void (**)(uint64_t, char *, uint64_t))(v62 + 32))(v16, v53, v10);
LABEL_36:
    uint64_t v55 = 0LL;
    goto LABEL_37;
  }

uint64_t sub_A1CE4(uint64_t a1)
{
  v2._uint64_t countAndFlagsBits = UsoTask.verbString.getter(a1);
  LODWORD(result) = sub_1262A4(v2);
  else {
    return result;
  }
}

uint64_t sub_A1D18()
{
  uint64_t v57 = v3;
  uint64_t v58 = v4;
  uint64_t v6 = v5;
  uint64_t v53 = sub_494C(&qword_189B90);
  sub_6D20();
  __chkstk_darwin(v7);
  sub_6D30();
  uint64_t v52 = v8;
  uint64_t v51 = sub_494C(&qword_189B98);
  sub_6D20();
  __chkstk_darwin(v9);
  sub_6D30();
  uint64_t v50 = v10;
  sub_494C(&qword_189BA0);
  sub_6D20();
  __chkstk_darwin(v11);
  sub_372F4();
  uint64_t v12 = sub_ABEC();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_A37FC();
  uint64_t v14 = type metadata accessor for TimeZone(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  sub_41C50();
  id v16 = [objc_allocWithZone(NSDateIntervalFormatter) init];
  static TimeZone.current.getter([v16 setDateStyle:1]);
  Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v0, v14);
  [v16 setTimeZone:isa];

  sub_A15E0();
  uint64_t v18 = sub_A614(v1, 1LL, v12);
  if (v45)
  {
    uint64_t v19 = 7104878LL;
    sub_41B5C(v18, &qword_189BA0);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v2, v1, v12);
    Class v20 = DateInterval._bridgeToObjectiveC()().super.isa;
    id v21 = [v16 stringFromDateInterval:v20];

    if (v21)
    {
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    }

    else
    {
      uint64_t v19 = 7104878LL;
    }

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v2, v12);
  }

  v56[0] = 0LL;
  v56[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(186LL);
  sub_6E00(0xD000000000000015LL, (uint64_t)"Wellness Task:\nverb: ");
  v59._uint64_t countAndFlagsBits = ((uint64_t (*)(void))UsoTask.verbString.getter)();
  char v22 = sub_1262A4(v59);
  if (v22 == 9) {
    char v23 = 3;
  }
  else {
    char v23 = v22;
  }
  LOBYTE(v5sub_D878(v0 + 4) = v23;
  _print_unlocked<A, B>(_:_:)( &v54,  v56,  &type metadata for Verb,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v24._uint64_t countAndFlagsBits = 0x707954617461640ALL;
  v24._object = (void *)0xEB00000000203A65LL;
  String.append(_:)(v24);
  sub_A0F84();
  LOWORD(v5sub_D878(v0 + 4) = v25;
  uint64_t v26 = sub_494C(&qword_189C80);
  v27._uint64_t countAndFlagsBits = sub_6D6C(v26);
  object = v27._object;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(object);
  v29._uint64_t countAndFlagsBits = 0x6E6152657461640ALL;
  v29._object = (void *)0xEC000000203A6567LL;
  String.append(_:)(v29);
  sub_A38B8(v19);
  sub_6D64();
  sub_A37B4((uint64_t)"\nisRequestForUser: ");
  sub_A2218();
  if ((v30 & 1) != 0) {
    uint64_t v31 = 1702195828LL;
  }
  else {
    uint64_t v31 = 0x65736C6166LL;
  }
  sub_A38B8(v31);
  sub_6D64();
  sub_6E00(0xD000000000000012LL, (uint64_t)"\nmeasurementUnit: ");
  LOBYTE(v5sub_D878(v0 + 4) = sub_A0D74(v6);
  uint64_t v32 = sub_494C(&qword_189C88);
  v33._uint64_t countAndFlagsBits = sub_6D6C(v32);
  String.append(_:)(v33);
  sub_6D64();
  sub_A37B4((uint64_t)"\nmeasurementValue: ");
  uint64_t v54 = sub_A0AC8(v6);
  char v55 = v34 & 1;
  uint64_t v35 = sub_494C(qword_189C90);
  v36._uint64_t countAndFlagsBits = sub_6D6C(v35);
  String.append(_:)(v36);
  sub_6D64();
  sub_6E00(0xD000000000000017LL, (uint64_t)"\nmeasurementQualifier: ");
  sub_A38C0( v37,  (uint64_t (*)(void))&dispatch thunk of UsoEntity_common_HealthLog.valueQualifier.getter,  (void (*)(uint64_t))&dispatch thunk of UsoEntity_common_MeasurementQualifier.definedValue.getter,  (uint64_t (*)(void))&type metadata accessor for UsoEntity_common_MeasurementQualifier.DefinedValues);
  v60._uint64_t countAndFlagsBits = String.init<A>(describing:)(v50, v51);
  sub_6E18(v60);
  sub_6D64();
  v38._uint64_t countAndFlagsBits = 0x736F507473696C0ALL;
  v38._object = (void *)0xEF203A6E6F697469LL;
  String.append(_:)(v38);
  sub_A38C0( v39,  (uint64_t (*)(void))&dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter,  (void (*)(uint64_t))&dispatch thunk of UsoEntity_common_ListPosition.definedValue.getter,  (uint64_t (*)(void))&type metadata accessor for UsoEntity_common_ListPosition.DefinedValues);
  v61._uint64_t countAndFlagsBits = String.init<A>(describing:)(v52, v53);
  sub_6E18(v61);
  sub_6D64();
  v40._uint64_t countAndFlagsBits = 0x726174537361680ALL;
  v40._object = (void *)0xEF203A6574614474LL;
  String.append(_:)(v40);
  sub_A25B0(v6, (uint64_t (*)(uint64_t))&dispatch thunk of UsoEntity_common_DateTimeRange.start.getter);
  if ((v41 & 1) != 0) {
    uint64_t v42 = 1702195828LL;
  }
  else {
    uint64_t v42 = 0x65736C6166LL;
  }
  sub_A38B8(v42);
  sub_6D64();
  v43._uint64_t countAndFlagsBits = 0x44646E457361680ALL;
  v43._object = (void *)0xED0000203A657461LL;
  String.append(_:)(v43);
  sub_A25B0(v6, (uint64_t (*)(uint64_t))&dispatch thunk of UsoEntity_common_DateTimeRange.end.getter);
  BOOL v45 = (v44 & 1) == 0;
  if ((v44 & 1) != 0) {
    uint64_t v46 = 1702195828LL;
  }
  else {
    uint64_t v46 = 0x65736C6166LL;
  }
  if (v45) {
    unint64_t v47 = 0xE500000000000000LL;
  }
  else {
    unint64_t v47 = 0xE400000000000000LL;
  }
  unint64_t v48 = v47;
  String.append(_:)(*(Swift::String *)&v46);

  sub_2A184();
  return v56[0];
}

void sub_A2218()
{
  uint64_t v4 = type metadata accessor for UsoEntity_common_Person.DefinedValues(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_A37FC();
  uint64_t v6 = sub_494C(&qword_18DCB8);
  sub_6D20();
  __chkstk_darwin(v7);
  sub_372F4();
  sub_494C(&qword_18DCC0);
  sub_6D20();
  __chkstk_darwin(v8);
  sub_72E90();
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v19 - v11;
  __chkstk_darwin(v10);
  if (sub_A37A0())
  {
    uint64_t v20 = v3;
    if (!dispatch thunk of UsoEntity_common_HealthLog.associatedPerson.getter())
    {
      sub_39BAC();
      goto LABEL_14;
    }

    dispatch thunk of UsoEntity_common_Person.definedValue.getter();
    (*(void (**)(char *, void, uint64_t))(v5 + 104))( v12,  enum case for UsoEntity_common_Person.DefinedValues.common_Person_User(_:),  v4);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0LL, 1LL, v4);
    uint64_t v13 = v0 + *(int *)(v6 + 48);
    sub_41850(v2, v0, &qword_18DCC0);
    sub_41850((uint64_t)v12, v13, &qword_18DCC0);
    sub_A614(v0, 1LL, v4);
    if (!v15)
    {
      sub_41850(v0, v1, &qword_18DCC0);
      sub_A614(v13, 1LL, v4);
      if (!v15)
      {
        uint64_t v16 = v20;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v20, v13, v4);
        sub_A410( &qword_18DCC8,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_common_Person.DefinedValues,  (uint64_t)&protocol conformance descriptor for UsoEntity_common_Person.DefinedValues);
        dispatch thunk of static Equatable.== infix(_:_:)(v1, v16, v4, v17);
        sub_A37E4();
        sub_39BAC();
        uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
        v18(v16, v4);
        sub_41AC8((uint64_t)v12);
        sub_41AC8(v2);
        v18(v1, v4);
        sub_41AC8(v0);
        goto LABEL_14;
      }

      sub_A37E4();
      sub_39BAC();
      sub_A674((uint64_t)v12);
      sub_A674(v2);
      uint64_t v14 = sub_A3834(v1, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
LABEL_13:
      sub_41B5C(v14, &qword_18DCB8);
      goto LABEL_14;
    }

    sub_A37E4();
    sub_39BAC();
    sub_A4A4((uint64_t)v12, &qword_18DCC0);
    sub_A4A4(v2, &qword_18DCC0);
    uint64_t v14 = sub_A614(v13, 1LL, v4);
    if (!v15) {
      goto LABEL_13;
    }
    sub_41B5C(v14, &qword_18DCC0);
  }

uint64_t sub_A24CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_A2504( a1,  (uint64_t (*)(void))&dispatch thunk of UsoEntity_common_HealthLog.valueQualifier.getter,  (void (*)(uint64_t))&dispatch thunk of UsoEntity_common_MeasurementQualifier.definedValue.getter,  (uint64_t (*)(void))&type metadata accessor for UsoEntity_common_MeasurementQualifier.DefinedValues,  a2);
}

uint64_t sub_A24E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_A2504( a1,  (uint64_t (*)(void))&dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter,  (void (*)(uint64_t))&dispatch thunk of UsoEntity_common_ListPosition.definedValue.getter,  (uint64_t (*)(void))&type metadata accessor for UsoEntity_common_ListPosition.DefinedValues,  a2);
}

uint64_t sub_A2504@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  if (getHealthLogEntity(from:)(a1) && (uint64_t v9 = a2(), v10 = swift_release(), v9))
  {
    a3(v10);
    return swift_release();
  }

  else
  {
    uint64_t v12 = a4(0LL);
    return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a5, 1LL, 1LL, v12);
  }

void sub_A2598(uint64_t a1)
{
}

void sub_A25A4(uint64_t a1)
{
}

void sub_A25B0(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  if (getHealthLogEntity(from:)(a1))
  {
    uint64_t v3 = dispatch thunk of UsoEntity_common_HealthLog.dateTime.getter();
    uint64_t v4 = sub_367AC();
    if (v3)
    {
      uint64_t v5 = dispatch thunk of UsoEntity_common_DateTime.occurringIn.getter(v4);
      uint64_t v6 = sub_3652C();
      if (v5)
      {
        uint64_t v7 = a2(v6);
        sub_367AC();
        if (v7) {
          sub_37034();
        }
      }
    }
  }

  sub_1EB0C();
}

void sub_A2620(uint64_t a1, char a2)
{
  if ((isExerciseRequest(in:)() & 1) != 0) {
    return;
  }
  uint64_t v4 = getHealthDataTypeName(from:)(a1);
  if (!v5)
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = (void *)0xE000000000000000LL;
  }

  uint64_t v6 = sub_110A0C(v4, v5);
  if ((unsigned __int16)v6 == 270)
  {
    sub_A349C(a2);
    return;
  }

  uint64_t v7 = v6;
  if (sub_10F1C0(v6) == 0x6168636C65656877LL && v8 == 0xEE006573755F7269LL)
  {
    sub_6D64();
  }

  else
  {
    sub_A373C();
    char v14 = sub_58F94(v11, v12, v13, v10 | 0xEE006573755F0000LL);
    sub_6D64();
    if ((v14 & 1) == 0) {
      goto LABEL_15;
    }
  }

  uint64_t v7 = 268LL;
LABEL_15:
  sub_57F38(v7, (uint64_t)&off_17A9C8);
  if ((v15 & 1) != 0 && a2 != 61)
  {
    uint64_t v16 = sub_A3870();
    if (v16 == 1885697139 && v17 == 0xE400000000000000LL)
    {
      sub_6D64();
      return;
    }

    char v19 = sub_58F94(v16, v17, 1885697139LL, 0xE400000000000000LL);
    sub_6D64();
    if ((v19 & 1) != 0) {
      return;
    }
  }

  if (sub_10F1C0(v7) == 0x6168636C65656877LL && v20 == 0xEA00000000007269LL)
  {
    sub_6D64();
    goto LABEL_29;
  }

  sub_A373C();
  char v26 = sub_58F94(v23, v24, v25, v22 & 0xFFFFFFFFFFFFLL | 0xEA00000000000000LL);
  sub_6D64();
  if ((v26 & 1) != 0)
  {
LABEL_29:
    if (a2 == 61) {
      return;
    }
    if (sub_A3870() == 0x6168636C65656877LL && v27 == 0xEF687375705F7269LL)
    {
      sub_6D64();
      return;
    }

    sub_A373C();
    char v33 = sub_58F94(v30, v31, v32, v29 | 0xEF687375705F0000LL);
    sub_6D64();
    if ((v33 & 1) != 0) {
      return;
    }
  }

  uint64_t v34 = sub_10F1C0(v7);
  if (v34 == 0x646E617473LL && v35 == 0xE500000000000000LL)
  {
    sub_6D64();
    if (a2 == 61) {
      return;
    }
  }

  else
  {
    char v37 = sub_58F94(v34, v35, 0x646E617473LL, 0xE500000000000000LL);
    sub_6D64();
    if ((v37 & 1) == 0 || a2 == 61) {
      return;
    }
  }

  uint64_t v38 = sub_A3870();
  if (v38 != 1920298856 || v39 != 0xE400000000000000LL) {
    sub_58F94(v38, v39, 1920298856LL, 0xE400000000000000LL);
  }
  sub_249D4();
}

void sub_A28C8()
{
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_AA58();
  uint64_t v7 = v5 - v6;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v84 - v10;
  __chkstk_darwin(v9);
  sub_A37EC();
  __chkstk_darwin(v12);
  char v14 = (char *)&v84 - v13;
  uint64_t v15 = type metadata accessor for UsoIdentifier(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  sub_AA58();
  uint64_t v19 = v17 - v18;
  uint64_t v21 = __chkstk_darwin(v20);
  if (!v2)
  {
    uint64_t v48 = Logger.wellness.unsafeMutableAddressor(v21);
    sub_A3728(v48);
    uint64_t v49 = sub_41CCC(v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
    uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v51 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = (uint8_t *)sub_A5E8(2LL);
      *(_WORD *)uint64_t v52 = 0;
      _os_log_impl(&dword_0, v50, v51, "Failed to parse flowDistinction: no measurementCategory entity", v52, 2u);
      sub_5050((uint64_t)v52);
    }

    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
    goto LABEL_21;
  }

  uint64_t v90 = (char *)&v84 - v22;
  sub_372CC();
  uint64_t v23 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)(1701667182LL, 0xE400000000000000LL);
  if (!v23)
  {
    uint64_t v53 = Logger.wellness.unsafeMutableAddressor(0LL);
    sub_A3728(v53);
    sub_41CCC((uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
    uint64_t v54 = swift_retain_n(v2, 2LL);
    char v55 = (os_log_s *)Logger.logObject.getter(v54);
    os_log_type_t v56 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v58 = sub_A5E8(32LL);
      uint64_t v93 = v2;
      v94[0] = v58;
      *(_DWORD *)uint64_t v57 = 136315138;
      uint64_t v88 = v3;
      uint64_t v59 = type metadata accessor for UsoEntity_common_MeasurementCategory(0LL);
      uint64_t v89 = v4;
      uint64_t v60 = v59;
      sub_372CC();
      uint64_t v61 = String.init<A>(describing:)(&v93, v60);
      unint64_t v63 = v62;
      uint64_t v93 = sub_39178(v61, v62, v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94, v57 + 4, v57 + 12);
      swift_release_n(v2, 2LL);
      swift_bridgeObjectRelease(v63);
      sub_DA24( &dword_0,  v55,  v56,  "Failed to parse flowDistinction: no 'name' UsoIdentifier found in measurementCategory: %s",  v57);
      sub_A81C(v58);
      sub_5050(v58);
      sub_5050((uint64_t)v57);
      sub_367AC();

      (*(void (**)(char *, uint64_t))(v89 + 8))(v11, v88);
    }

    else
    {

      swift_release_n(v2, 3LL);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v11, v3);
    }

    goto LABEL_21;
  }

  uint64_t v24 = v23;
  uint64_t v91 = v2;
  uint64_t v25 = *(void *)(v23 + 16);
  uint64_t v87 = v0;
  if (!v25)
  {
LABEL_11:
    uint64_t v33 = Logger.wellness.unsafeMutableAddressor(v23);
    sub_A3728(v33);
    sub_41CCC(v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
    uint64_t v34 = sub_1EB6C();
    uint64_t v35 = v24;
    Swift::String v36 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v39 = v4;
      uint64_t v40 = sub_A5E8(32LL);
      v94[0] = v40;
      *(_DWORD *)uint64_t v38 = 136315138;
      unint64_t v92 = (unint64_t)(v38 + 4);
      uint64_t v41 = sub_A3814();
      uint64_t v42 = Array.description.getter(v41, v15);
      unint64_t v44 = v43;
      sub_6D64();
      uint64_t v45 = sub_39178(v42, v44, v94);
      uint64_t v46 = sub_A38D8(v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v46, v47, v92, v38 + 12);
      sub_A3868(v35);
      swift_bridgeObjectRelease(v44);
      sub_DA24( &dword_0,  v36,  v37,  "Failed to parse flowDistinction: no identifier found with namespace 'healthLogValueCategory' in identifiers: %s",  v38);
      sub_A81C(v40);
      sub_5050(v40);
      sub_5050((uint64_t)v38);
      sub_A3848();

      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v87, v3);
    }

    else
    {

      sub_A3868(v35);
      sub_A3848();
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v3);
    }

    goto LABEL_21;
  }

  uint64_t v85 = v14;
  uint64_t v86 = v23;
  uint64_t v88 = v3;
  uint64_t v89 = v4;
  unint64_t v26 = v23 + ((*(unsigned __int8 *)(v16 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  uint64_t v27 = *(void *)(v16 + 72);
  uint64_t v28 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v16 + 16);
  sub_1EB6C();
  unint64_t v92 = 0x8000000000145E30LL;
  while (1)
  {
    uint64_t v29 = v28(v19, v26, v15);
    uint64_t v30 = UsoIdentifier.namespace.getter(v29);
    if (!v31) {
      goto LABEL_9;
    }
    if (v30 == 0xD000000000000016LL && v31 == v92) {
      break;
    }
    char v32 = sub_58F94(0xD000000000000016LL, 0x8000000000145E30LL, v30, v31);
    sub_249D4();
    if ((v32 & 1) != 0) {
      goto LABEL_23;
    }
LABEL_9:
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v19, v15);
    v26 += v27;
    if (!--v25)
    {
      uint64_t v24 = v86;
      uint64_t v23 = sub_249D4();
      uint64_t v3 = v88;
      uint64_t v4 = v89;
      uint64_t v0 = v87;
      goto LABEL_11;
    }
  }

  sub_2A184();
LABEL_23:
  uint64_t v64 = v89;
  sub_249D4();
  uint64_t v65 = v90;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v90, v19, v15);
  uint64_t v66 = sub_2A184();
  uint64_t v67 = UsoIdentifier.value.getter(v66);
  unint64_t v69 = v68;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v65, v15);
  sub_A38F8();
  uint64_t v70 = PeriodFlow.init(healthLogValueCategoryValue:)(v67, v69);
  if ((v71 & 1) != 0)
  {
    uint64_t v72 = Logger.wellness.unsafeMutableAddressor(v70);
    sub_A3728(v72);
    uint64_t v73 = v85;
    uint64_t v74 = v88;
    (*(void (**)(void))(v64 + 16))();
    uint64_t v75 = sub_A38F8();
    os_log_type_t v76 = (os_log_s *)Logger.logObject.getter(v75);
    os_log_type_t v77 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v76, v77))
    {
      uint64_t v78 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v79 = v74;
      uint64_t v80 = sub_A5E8(32LL);
      v94[0] = v80;
      *(_DWORD *)uint64_t v78 = 136315138;
      sub_A38F8();
      uint64_t v81 = sub_39178(v67, v69, v94);
      uint64_t v82 = sub_A38D8(v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v82, v83, v78 + 4, v78 + 12);
      swift_bridgeObjectRelease_n(v69, 3LL);
      sub_DA24(&dword_0, v76, v77, "Failed to parse flowDistinction: unexpected healthLogValueCategory value: %s", v78);
      sub_A81C(v80);
      sub_5050(v80);
      sub_5050((uint64_t)v78);
      sub_A3848();

      (*(void (**)(char *, uint64_t))(v89 + 8))(v85, v79);
    }

    else
    {

      sub_A3868(v69);
      sub_367AC();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v73, v74);
    }
  }

  else
  {
    sub_367AC();
    swift_bridgeObjectRelease(v69);
  }

void sub_A2FB4()
{
  uint64_t v4 = v3;
  sub_494C(&qword_18DCA0);
  sub_6D20();
  __chkstk_darwin(v5);
  sub_6D44();
  uint64_t v8 = v7 - v6;
  type metadata accessor for UsoEntity_common_Decimal.DefinedValues(0LL);
  sub_A3880();
  __chkstk_darwin(v9);
  sub_72E90();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v31 - v11;
  if (v4)
  {
    type metadata accessor for UsoEntity_common_MultipliedNumber(0LL);
    uint64_t v13 = sub_A37C8();
    uint64_t v14 = sub_A3760(v13);
    if (v32)
    {
      if (!dispatch thunk of UsoEntity_common_MultipliedNumber.value.getter(v14))
      {
        sub_37034();
        goto LABEL_21;
      }

      uint64_t v15 = CodeGenBase.entity.getter();
      uint64_t v16 = type metadata accessor for UsoEntity_common_Integer(0LL);
      static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)(v15, v16, v16);
      uint64_t v17 = sub_3652C();
      if (v32)
      {
        uint64_t v31 = dispatch thunk of UsoEntity_common_Integer.integerValue.getter(v17);
        char v19 = v18;
        sub_A37E4();
        sub_37110();
        sub_39BAC();
        if ((v19 & 1) == 0)
        {
LABEL_11:
          sub_37034();
          goto LABEL_22;
        }
      }

      else
      {
        sub_37110();
        sub_39BAC();
      }
    }

    type metadata accessor for UsoEntity_common_Integer(0LL);
    uint64_t v20 = sub_A37C8();
    sub_A3760(v20);
    uint64_t v21 = sub_37034();
    if (v32)
    {
      dispatch thunk of UsoEntity_common_Integer.integerValue.getter(v21);
      char v23 = v22;
      sub_37110();
      if ((v23 & 1) == 0) {
        goto LABEL_11;
      }
    }

    type metadata accessor for UsoEntity_common_Decimal(0LL);
    uint64_t v24 = sub_A37C8();
    sub_A3760(v24);
    uint64_t v25 = sub_37034();
    if (v32)
    {
      dispatch thunk of UsoEntity_common_Decimal.definedValue.getter(v25);
      sub_A614(v8, 1LL, v0);
      if (v26)
      {
        sub_A4A4(v8, &qword_18DCA0);
      }

      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(v12, v8, v0);
        (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))( v1,  enum case for UsoEntity_common_Decimal.DefinedValues.common_Decimal_Percent(_:),  v0);
        char v27 = sub_585A4((uint64_t)v12, v1);
        uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
        v28(v1, v0);
        v28((uint64_t)v12, v0);
        if ((v27 & 1) != 0)
        {
          sub_3652C();
          sub_37034();
          goto LABEL_22;
        }
      }

      uint64_t v29 = dispatch thunk of UsoEntity_common_Decimal.canonicalString.getter();
      if (v30)
      {
        sub_A3334(v29, v30);
        sub_3652C();
        sub_37034();
        goto LABEL_22;
      }

      sub_3652C();
    }

LABEL_22:
  sub_D8FC();
}

      uint64_t v9 = (v16 - 1) & v16;
    }
  }

  uint64_t result = swift_release();
  *uint64_t v2 = v5;
  return result;
}

    uint64_t v9 = (v16 - 1) & v16;
  }

  uint64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_25:
    swift_release();
    goto LABEL_26;
  }

  uint64_t v16 = *(void *)(v7 + 8 * v17);
  if (v16)
  {
    uint64_t v12 = v17;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v12 >= v10) {
      goto LABEL_25;
    }
    uint64_t v16 = *(void *)(v7 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_22;
    }
  }

    __break(1u);
    goto LABEL_23;
  }

  uint64_t v25 = 0LL;
LABEL_14:
  sub_A370C(v2);
  if (v21)
  {
    char v27 = 0LL;
LABEL_19:
    uint64_t v29 = type metadata accessor for WellnessTime.Builder(0LL);
    sub_A72C(v29);
    sub_F865C();
    sub_F86A4(v20);
    sub_3652C();
    sub_F86CC(v23);
    sub_12B308();
    uint64_t v30 = (void *)sub_F86F4(v25);
    sub_3652C();
    sub_F871C(v27);
    sub_12B308();
    uint64_t v31 = type metadata accessor for WellnessTime(0LL);
    sub_A72C(v31);
    sub_F87B8(v30);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_A3758(v2);
    sub_A3758(v4);
    sub_A3758(v6);
    sub_A3758(v33);
    sub_D8FC();
    return;
  }

  sub_41850(v2, (uint64_t)v12, &qword_189CE8);
  sub_A370C((uint64_t)v12);
  if (!v21)
  {
    sub_73678();
    char v27 = static DialogCalendar.make(date:)(v12);
    sub_12B328();
    sub_B2558((uint64_t)v12, v28);
    goto LABEL_19;
  }

uint64_t sub_A3230()
{
  return sub_A1CE4(*v0);
}

void sub_A3238()
{
}

void *sub_A3240()
{
  return sub_A15E0();
}

void sub_A3248()
{
}

uint64_t sub_A3250()
{
  return sub_A0D74(*v0);
}

uint64_t sub_A3258()
{
  return sub_A12B4(*v0);
}

uint64_t sub_A3260()
{
  return sub_A0AC8(*v0);
}

uint64_t sub_A327C@<X0>(uint64_t a1@<X8>)
{
  return sub_A2504( *v1,  (uint64_t (*)(void))&dispatch thunk of UsoEntity_common_HealthLog.valueQualifier.getter,  (void (*)(uint64_t))&dispatch thunk of UsoEntity_common_MeasurementQualifier.definedValue.getter,  (uint64_t (*)(void))&type metadata accessor for UsoEntity_common_MeasurementQualifier.DefinedValues,  a1);
}

uint64_t sub_A32AC@<X0>(uint64_t a1@<X8>)
{
  return sub_A2504( *v1,  (uint64_t (*)(void))&dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter,  (void (*)(uint64_t))&dispatch thunk of UsoEntity_common_ListPosition.definedValue.getter,  (uint64_t (*)(void))&type metadata accessor for UsoEntity_common_ListPosition.DefinedValues,  a1);
}

uint64_t sub_A32DC()
{
  return v1 & 1;
}

uint64_t sub_A3300()
{
  return v1 & 1;
}

void sub_A3324( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

uint64_t sub_A332C()
{
  return sub_A1D18();
}

uint64_t sub_A3334(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = 0LL;
  uint64_t v10 = &v12;
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL))
  {
    _StringGuts._slowWithCString<A>(_:)(v11, sub_A3648, v9, a1, a2, &type metadata for Bool);
    swift_bridgeObjectRelease(a2);
    char v6 = v11[0];
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    v11[0] = a1;
    v11[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    char v6 = (a1 > 0x20u || ((0x100003E01uLL >> a1) & 1) == 0)
      && (uint64_t v7 = (_BYTE *)_swift_stdlib_strtod_clocale(v11, &v12, a1)) != 0LL
      && *v7 == 0;
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    if ((a1 & 0x1000000000000000LL) != 0)
    {
      uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v4 = _StringObject.sharedUTF8.getter(a1, a2);
    }

    char v6 = sub_A35F4(v4, v5, (void (*)(uint64_t *__return_ptr))sub_A3660);
    swift_bridgeObjectRelease(a2);
  }

  if ((v6 & 1) != 0) {
    return v12;
  }
  else {
    return 0LL;
  }
}

void sub_A349C(char a1)
{
  if (v3)
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = 0LL;
    goto LABEL_4;
  }

  if (v2 != 16 && v2 != 38 && v2 != 37 && v2 != 36)
  {
    uint64_t v4 = sub_37538(a1);
    uint64_t v5 = v7;
LABEL_4:
    char v6 = getMeasurementType(for:)(v4, v5);
    sub_249D4();
    __asm { BR              X10 }
  }

  sub_1EB0C();
}

_BYTE *sub_A358C@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1LL << v3) & 0x100003E01LL;
  BOOL v6 = v4 || v5 == 0;
  BOOL v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0LL && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_A35F4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }

  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0LL, 0LL);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }

  return v4 & 1;
}

_BYTE *sub_A3648@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_A358C(a1, a2);
}

void *sub_A3660@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

ValueMetadata *type metadata accessor for WellnessTask()
{
  return &type metadata for WellnessTask;
}

unint64_t sub_A36AC(uint64_t a1)
{
  unint64_t result = sub_A36D0();
  *(void *)(a1 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = result;
  return result;
}

unint64_t sub_A36D0()
{
  unint64_t result = qword_18DCD0[0];
  if (!qword_18DCD0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_13C170, &type metadata for WellnessTask);
    atomic_store(result, qword_18DCD0);
  }

  return result;
}

uint64_t sub_A370C(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1LL, v1);
}

uint64_t sub_A3728(uint64_t a1)
{
  return swift_beginAccess(a1, v1 - 104, 0LL, 0LL);
}

  ;
}

void sub_A3758(uint64_t a1)
{
}

uint64_t sub_A3760(uint64_t a1)
{
  return static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)(a1, v1, v1);
}

uint64_t sub_A3770(uint64_t a1)
{
  return swift_dynamicCast(v2 - 152, v2 - 144, v1 + 8, a1, 6LL);
}

uint64_t sub_A3788(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v4 = va_arg(va1, void);
  return swift_dynamicCast((uint64_t *)va, va1, v2 + 8, a1, 6LL);
}

uint64_t sub_A37A0()
{
  return getHealthLogEntity(from:)(v0);
}

void sub_A37B4(uint64_t a1@<X8>)
{
  v1._object = (void *)((a1 - 32) | 0x8000000000000000LL);
  v1._uint64_t countAndFlagsBits = 0xD000000000000013LL;
  String.append(_:)(v1);
}

uint64_t sub_A37C8()
{
  return swift_retain(v0);
}

uint64_t sub_A37D4(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 1LL, 1LL, v1);
}

uint64_t sub_A37E4()
{
  return swift_release(v0);
}

  ;
}

  ;
}

uint64_t sub_A3814()
{
  return swift_bridgeObjectRetain(v0);
}

void sub_A381C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_A3824()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_A3834@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

void sub_A383C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_A3848()
{
  return swift_release(*(void *)(v0 - 136));
}

  ;
}

uint64_t sub_A385C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, a4);
}

uint64_t sub_A3868(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 2LL);
}

uint64_t sub_A3870()
{
  return sub_375B4(v0);
}

void sub_A3878(uint64_t a1, uint64_t *a2)
{
}

  ;
}

uint64_t sub_A3894(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 0LL, 1LL, v1);
}

void sub_A38B8(uint64_t a1)
{
  uint64_t v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_A38C0( uint64_t a1, uint64_t (*a2)(void), void (*a3)(uint64_t), uint64_t (*a4)(void))
{
  return sub_A2504(v4, a2, a3, a4, v5);
}

uint64_t sub_A38CC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

uint64_t sub_A38D8(uint64_t a1)
{
  *(void *)(v1 - 120) = a1;
  return v1 - 120;
}

uint64_t sub_A38EC()
{
  return dispatch thunk of UsoEntity_common_DateTime.date.getter();
}

uint64_t sub_A38F8()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t initializeWithCopy for GenericNotSupportedFlow(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 2sub_D878(v0 + 4) = v4;
  (**(void (***)(void))(v4 - 8))();
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 6sub_D878(v0 + 4) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  __int128 v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 10sub_D878(v0 + 4) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  __int128 v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 14sub_D878(v0 + 4) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 120, a2 + 120);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  return a1;
}

uint64_t assignWithCopy for GenericNotSupportedFlow(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  return a1;
}

void *initializeWithTake for GenericNotSupportedFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA1uLL);
}

uint64_t assignWithTake for GenericNotSupportedFlow(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1sub_D878(v0 + 6) = v4;
  *(void *)(a1 + 3sub_D878(v0 + 2) = *(void *)(a2 + 32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + sub_D7EC(v0 + 16, v0 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 7sub_D878(v0 + 2) = *(void *)(a2 + 72);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 80));
  __int128 v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 9sub_D878(v0 + 6) = v5;
  *(void *)(a1 + 11sub_D878(v0 + 2) = *(void *)(a2 + 112);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 120));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 13sub_D878(v0 + 6) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 15sub_D878(v0 + 2) = *(void *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericNotSupportedFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 161))
    {
      LODWORD(vsub_D878(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_D878(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(vsub_D878(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericNotSupportedFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 15sub_D878(v0 + 2) = 0LL;
    *(_OWORD *)(result + 13sub_D878(v0 + 6) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 10sub_D878(v0 + 4) = 0u;
    *(_OWORD *)(result + 8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0u;
    *(_OWORD *)(result + 7sub_D878(v0 + 2) = 0u;
    *(_OWORD *)(result + sub_D7EC(v0 + 16, v0 + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 2sub_D878(v0 + 4) = 0u;
    *(_OWORD *)(result + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0u;
    *(_BYTE *)(result + 160) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 161) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 2sub_D878(v0 + 4) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 161) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for GenericNotSupportedFlow()
{
  return &type metadata for GenericNotSupportedFlow;
}

uint64_t sub_A3B54(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1FF94();
  return Flow.deferToExecuteAsync(_:)(a1, a2, &type metadata for GenericNotSupportedFlow, v4);
}

uint64_t sub_A3B94(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[7] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  _BYTE v2[8] = v4;
  v2[9] = sub_A5C0(v4);
  uint64_t v5 = type metadata accessor for DialogPhase(0LL);
  v2[10] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[11] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[12] = swift_task_alloc(v7);
  v2[13] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[14] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[15] = v9;
  v2[16] = sub_A5C0(v9);
  return swift_task_switch(sub_A3C3C, 0LL, 0LL);
}

uint64_t sub_A3C3C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_18CCE4);
  *(void *)(v0 + 13sub_D878(v0 + 6) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_A3C94;
  return sub_7656C();
}

uint64_t sub_A3C94(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc(*(void *)(*v2 + 136));
  if (v1)
  {
    swift_errorRelease(v1);
    uint64_t v5 = sub_A3E68;
  }

  else
  {
    *(void *)(v4 + 14sub_D878(v0 + 4) = a1;
    uint64_t v5 = sub_A3D0C;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_A3D0C()
{
  uint64_t v1 = *(void **)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v17 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 80);
  uint64_t v8 = *(void **)(v0 + 48);
  static DialogPhase.error.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v4, v7);
  OutputGenerationManifest.init(dialogPhase:_:)(v6, sub_A633C, 0LL);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v7);
  id v9 = [v1 patternId];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  OutputGenerationManifest.responseViewId.setter(v10, v12);
  uint64_t v13 = v8[3];
  uint64_t v14 = v8[4];
  sub_500C(v8, v13);
  uint64_t v15 = dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)( v1,  v2,  v13,  v14);
  FlowTaskLogger.unsupported()();
  static ExecuteResponse.complete(next:)(v15);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v17);
  sub_23848();
  swift_task_dealloc(v15);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_A3E68(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v2 = *(void *)(v1 + 72);
  uint64_t v4 = *(void *)(v1 + 56);
  uint64_t v5 = Logger.wellness.unsafeMutableAddressor(a1);
  swift_beginAccess(v5, v1 + 16, 0LL, 0LL);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v9 = 0;
    _os_log_impl(&dword_0, v7, v8, "Failed to get wellness pattern for error message", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  uint64_t v11 = *(void *)(v1 + 64);
  uint64_t v10 = *(void *)(v1 + 72);
  uint64_t v12 = *(void *)(v1 + 56);

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  FlowTaskLogger.taskFailed()();
  static ExecuteResponse.complete()(v13);
  sub_23848();
  swift_task_dealloc(v7);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_A3F94(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18DCEC);
  *(void *)(v1 + 1sub_D878(v0 + 6) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_A108;
  return sub_A3B94(a1);
}

uint64_t sub_A3FE4(uint64_t a1)
{
  v2[17] = a1;
  v2[18] = v1;
  v2[19] = *v1;
  uint64_t v3 = type metadata accessor for Parse.DirectInvocation(0LL);
  v2[20] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[21] = v4;
  v2[22] = sub_A5C0(v4);
  uint64_t v5 = sub_494C(&qword_18B900);
  v2[23] = sub_A5C0(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  v2[24] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[25] = v7;
  v2[26] = sub_A5C0(v7);
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  v2[27] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[28] = v9;
  v2[29] = sub_D8CC(v9);
  v2[30] = sub_A5B8();
  uint64_t v10 = type metadata accessor for Parse(0LL);
  v2[31] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[32] = v11;
  v2[33] = sub_D8CC(v11);
  v2[34] = sub_A5B8();
  uint64_t v12 = type metadata accessor for USOParse(0LL);
  v2[35] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[36] = v13;
  v2[37] = sub_A5C0(v13);
  uint64_t v14 = type metadata accessor for Input(0LL);
  v2[38] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v2[39] = v15;
  v2[40] = sub_A5C0(v15);
  uint64_t v16 = sub_D984();
  v2[41] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v2[42] = v17;
  v2[43] = sub_D8CC(v17);
  v2[44] = sub_A5B8();
  v2[45] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_A4110(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v1 + 136);
  uint64_t v3 = (void *)(v1 + 136);
  uint64_t v5 = v3[28];
  uint64_t v6 = v3[25];
  uint64_t v7 = v3[22];
  uint64_t v8 = v3[23];
  uint64_t v9 = v3[21];
  uint64_t v10 = Logger.wellness.unsafeMutableAddressor(a1);
  sub_A5DC(v10, (uint64_t)(v3 - 8));
  uint64_t v261 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  uint64_t v270 = v10;
  sub_DA2C(v5, v10, v261);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v8, v4, v9);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  int v14 = v13;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v280 = *(void *)(v2 + 336);
    uint64_t v15 = *(void *)(v2 + 320);
    uint64_t v289 = *(void *)(v2 + 328);
    uint64_t v292 = *(void *)(v2 + 360);
    uint64_t v16 = *(void *)(v2 + 304);
    uint64_t v251 = *(void *)(v2 + 312);
    uint64_t v17 = *(void *)(v2 + 152);
    uint64_t v18 = sub_A5E8(22LL);
    uint64_t v244 = sub_A5E8(64LL);
    uint64_t v294 = v244;
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v19 = _typeName(_:qualified:)(v17, 0LL);
    unint64_t v21 = v20;
    *(void *)(v2 + 120) = sub_39178(v19, v20, &v294);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 120, v2 + 128, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v21);
    *(_WORD *)(v18 + 1sub_D878(v0 + 2) = 2080;
    uint64_t v22 = sub_2322C( (unint64_t *)&qword_189EE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
    LODWORD(v23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = v14;
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v16, v22);
    *(void *)(v2 + 12_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_39178(v23, v24, &v294);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 128, v3, v18 + 14, v18 + 22);
    sub_249D4();
    (*(void (**)(uint64_t, uint64_t))(v251 + 8))(v15, v16);
    sub_D9B0(&dword_0, v12, (os_log_type_t)v14, "%s Parsing Input: %s", (uint8_t *)v18);
    swift_arrayDestroy(v244, 2LL);
    sub_5050(v244);
    sub_5050(v18);

    uint64_t v25 = v289;
    char v26 = *(void (**)(uint64_t, uint64_t))(v280 + 8);
    uint64_t v27 = v292;
  }

  else
  {
    uint64_t v28 = *(void *)(v2 + 360);
    uint64_t v29 = *(void *)(v2 + 328);
    uint64_t v30 = *(void *)(v2 + 336);
    sub_565A8(*(void *)(v2 + 312));

    char v26 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    uint64_t v27 = v28;
    uint64_t v25 = v29;
  }

  uint64_t v252 = (uint64_t)v26;
  v26(v27, v25);
  uint64_t v31 = v3;
  uint64_t v32 = *(void *)(v2 + 272);
  uint64_t v34 = *(void *)(v2 + 248);
  uint64_t v33 = *(void *)(v2 + 256);
  uint64_t v281 = sub_60EE4();
  uint64_t v290 = v35;
  uint64_t v37 = v36;
  Input.parse.getter(v281);
  uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 88);
  if (v38(v32, v34) != enum case for Parse.uso(_:))
  {
    uint64_t v49 = sub_565A8(*(void *)(v2 + 256));
LABEL_8:
    uint64_t v50 = *(void *)(v2 + 264);
    uint64_t v51 = *(void *)(v2 + 248);
    Input.parse.getter(v49);
    uint64_t v52 = v38(v50, v51);
    if ((_DWORD)v52 != enum case for Parse.directInvocation(_:))
    {
      uint64_t v85 = (uint64_t)(v31 - 11);
      uint64_t v86 = *(void *)(v2 + 344);
      uint64_t v87 = *(void *)(v2 + 328);
      uint64_t v88 = *(void *)(v2 + 256);
      uint64_t v89 = *(void *)(v2 + 264);
      uint64_t v90 = *(void *)(v2 + 248);
      uint64_t v91 = sub_A6230(v52, v53, v54, v55, v56, v57, v58, v59, v237, v244, v252, (uint64_t)v261, v270, (uint64_t)v281);
      sub_A6238(v91, v92, v93, v94, v95, v96, v97, v98, v238, v245, v253, v262, v271, v282, v290);
      sub_58F9C();
      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v89, v90);
      sub_A5DC(v272, v85);
      uint64_t v99 = v263(v86, v272, v87);
      uint64_t v100 = (void *)Logger.logObject.getter(v99);
      os_log_type_t v101 = static os_log_type_t.error.getter();
      if (sub_A988(v101))
      {
        uint64_t v102 = (_WORD *)sub_A5E8(2LL);
        *uint64_t v102 = 0;
        sub_A940(&dword_0, v103, v104, "Received unsupported type of input");
        sub_5050((uint64_t)v102);
      }

      uint64_t v105 = *(void *)(v2 + 344);
      uint64_t v106 = *(void *)(v2 + 328);

      v254(v105, v106);
      goto LABEL_29;
    }

    uint64_t v60 = *(void *)(v2 + 264);
    uint64_t v61 = *(void *)(v2 + 168);
    uint64_t v62 = *(void *)(v2 + 176);
    uint64_t v63 = *(void *)(v2 + 160);
    (*(void (**)(uint64_t, void))(*(void *)(v2 + 256) + 96LL))(v60, *(void *)(v2 + 248));
    uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 32))(v62, v60, v63);
    uint64_t v65 = Parse.DirectInvocation.userData.getter(v64);
    if (v65)
    {
      sub_12BE4C(0xD000000000000012LL, 0x8000000000141130LL, v65, v31 - 15);
      sub_249D4();
      if (*(void *)(v2 + 40))
      {
        uint64_t v66 = swift_dynamicCast(v31 + 29, v31 - 15, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL);
        if ((v66 & 1) != 0)
        {
          if (*((_BYTE *)v31 + 232) == 1)
          {
            uint64_t v74 = *(void *)(v2 + 168);
            uint64_t v75 = *(void *)(v2 + 176);
            if (*(_BYTE *)(*(void *)(v2 + 144) + 16LL) == 1)
            {
              uint64_t v294 = v37;
              sub_77A00();
              unint64_t v76 = swift_bridgeObjectRetain(v290);
              uint64_t v77 = sub_A5D60(v76);
              sub_A6230(v77, v78, v79, v80, v81, v82, v83, v84, v237, v244, v252, (uint64_t)v261, v270, (uint64_t)v281);
            }

            else
            {
              uint64_t v294 = v37;
              uint64_t v223 = sub_77A00();
              sub_A6270( v223,  v224,  v225,  v226,  v227,  v228,  v229,  v230,  v237,  v244,  v252,  (uint64_t)v261,  v270,  (unint64_t)v281);
            }

            swift_bridgeObjectRelease(v290);
            sub_58F9C();
            uint64_t v293 = v294;
LABEL_38:
            sub_D970(v75, *(uint64_t (**)(uint64_t, uint64_t))(v74 + 8));
            uint64_t v222 = 1LL;
            goto LABEL_39;
          }

          uint64_t v197 = sub_565A8(*(void *)(v2 + 168));
          uint64_t v205 = sub_A6238( v197,  v198,  v199,  v200,  v201,  v202,  v203,  v204,  v237,  v244,  v252,  (uint64_t)v261,  v270,  (uint64_t)v281,  v290);
          sub_A6230(v205, v206, v207, v208, v209, v210, v211, v212, v242, v249, v259, v268, v278, v286);
          uint64_t v276 = 0LL;
          uint64_t v293 = v37;
          goto LABEL_40;
        }

        uint64_t v117 = v31;
        uint64_t v154 = sub_A6230(v66, v67, v68, v69, v70, v71, v72, v73, v237, v244, v252, (uint64_t)v261, v270, (uint64_t)v281);
        sub_A6238(v154, v155, v156, v157, v158, v159, v160, v161, v240, v247, v257, v266, v275, v284, v290);
        sub_58F9C();
        goto LABEL_26;
      }
    }

    else
    {
      *(_OWORD *)(v31 - 15) = 0u;
      *(_OWORD *)(v31 - 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 3) = 0u;
    }

    uint64_t v117 = v31;
    uint64_t v118 = sub_58F9C();
    uint64_t v126 = sub_A6230( v118,  v119,  v120,  v121,  v122,  v123,  v124,  v125,  v237,  v244,  v252,  (uint64_t)v261,  v270,  (uint64_t)v281);
    sub_A6238(v126, v127, v128, v129, v130, v131, v132, v133, v239, v246, v255, v264, v273, v283, v290);
    sub_2012C((uint64_t)(v31 - 15), &qword_18AA78);
LABEL_26:
    uint64_t v162 = (uint64_t)(v117 - 5);
    uint64_t v163 = *(void *)(v2 + 352);
    uint64_t v164 = *(void *)(v2 + 328);
    sub_A5DC(v274, v162);
    uint64_t v165 = v265(v163, v274, v164);
    uint64_t v166 = (void *)Logger.logObject.getter(v165);
    os_log_type_t v167 = static os_log_type_t.error.getter();
    if (sub_A988(v167))
    {
      uint64_t v168 = (_WORD *)sub_A5E8(2LL);
      *uint64_t v168 = 0;
      sub_A940( &dword_0,  v169,  v170,  "LogMedAsNeededConfirmationStrategy failed to unpack directInvocation, returning nil");
      sub_5050((uint64_t)v168);
    }

    uint64_t v171 = *(void *)(v2 + 352);
    uint64_t v172 = *(void *)(v2 + 328);
    uint64_t v174 = *(void *)(v2 + 168);
    uint64_t v173 = *(void *)(v2 + 176);
    uint64_t v175 = *(void *)(v2 + 160);

    v256(v171, v172);
    (*(void (**)(uint64_t, uint64_t))(v174 + 8))(v173, v175);
LABEL_29:
    uint64_t v276 = 0LL;
    uint64_t v293 = 1LL;
    goto LABEL_40;
  }

  uint64_t v293 = v37;
  uint64_t v40 = *(void *)(v2 + 288);
  uint64_t v39 = *(void *)(v2 + 296);
  uint64_t v41 = *(void *)(v2 + 272);
  uint64_t v42 = *(void *)(v2 + 208);
  uint64_t v43 = *(void *)(v2 + 200);
  uint64_t v237 = *(void *)(v2 + 192);
  uint64_t v244 = *(void *)(v2 + 216);
  uint64_t v44 = *(void *)(v2 + 184);
  (*(void (**)(uint64_t, void))(*(void *)(v2 + 256) + 96LL))(v41, *(void *)(v2 + 248));
  uint64_t v45 = sub_DA14(v39, v41, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 32));
  uint64_t v46 = USOParse.userParse.getter(v45);
  uint64_t v47 = Siri_Nlu_External_UserParse.userDialogActs.getter(v46);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v237);
  sub_9109C(v47, v44);
  sub_249D4();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v44, 1LL, v244) == 1)
  {
    uint64_t v48 = *(void *)(v2 + 184);
    sub_565A8(*(void *)(v2 + 288));
    uint64_t v49 = sub_2012C(v48, &qword_18B900);
    uint64_t v37 = v293;
    goto LABEL_8;
  }

  uint64_t v107 = (*(uint64_t (**)(void, void, void))(*(void *)(v2 + 224) + 32LL))( *(void *)(v2 + 240),  *(void *)(v2 + 184),  *(void *)(v2 + 216));
  if ((Siri_Nlu_External_UserDialogAct.hasAccepted.getter(v107) & 1) != 0)
  {
    uint64_t v74 = *(void *)(v2 + 288);
    uint64_t v75 = *(void *)(v2 + 296);
    if (*(_BYTE *)(*(void *)(v2 + 144) + 16LL) == 1)
    {
      uint64_t v294 = v293;
      sub_77A00();
      unint64_t v108 = swift_bridgeObjectRetain(v290);
      uint64_t v109 = sub_A5D60(v108);
      sub_A6230(v109, v110, v111, v112, v113, v114, v115, v116, v237, v244, v252, (uint64_t)v261, v270, (uint64_t)v281);
    }

    else
    {
      uint64_t v294 = v293;
      uint64_t v176 = sub_77A00();
      sub_A6270( v176,  v177,  v178,  v179,  v180,  v181,  v182,  v183,  v237,  v244,  v252,  (uint64_t)v261,  v270,  (unint64_t)v281);
    }

    swift_bridgeObjectRelease(v290);
    sub_58F9C();
    uint64_t v293 = v294;
    uint64_t v184 = sub_A6264();
    v185(v184);
    goto LABEL_38;
  }

  uint64_t v135 = *(void *)(v2 + 232);
  uint64_t v134 = *(void *)(v2 + 240);
  uint64_t v136 = *(void *)(v2 + 224);
  char v137 = Siri_Nlu_External_UserDialogAct.hasRejected.getter();
  uint64_t v138 = sub_61900(v135, v134, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v136 + 16));
  uint64_t v139 = *(void *)(v2 + 288);
  uint64_t v140 = *(void *)(v2 + 296);
  uint64_t v141 = *(void *)(v2 + 232);
  uint64_t v143 = *(void *)(v2 + 216);
  uint64_t v142 = *(void *)(v2 + 224);
  if ((v137 & 1) != 0)
  {
    uint64_t v144 = *(void (**)(void))(v142 + 8);
    ((void (*)(void, void))v144)(*(void *)(v2 + 232), *(void *)(v2 + 216));
    uint64_t v145 = sub_A6264();
    v144(v145);
    uint64_t v146 = sub_D970(v140, *(uint64_t (**)(uint64_t, uint64_t))(v139 + 8));
  }

  else
  {
    char v186 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter(v138);
    uint64_t v187 = *(void (**)(uint64_t, uint64_t))(v142 + 8);
    v187(v141, v143);
    uint64_t v188 = sub_A6264();
    ((void (*)(uint64_t))v187)(v188);
    uint64_t v146 = sub_D970(v140, *(uint64_t (**)(uint64_t, uint64_t))(v139 + 8));
    if ((v186 & 1) == 0)
    {
      uint64_t v213 = *(void *)(v2 + 144);
      uint64_t v214 = sub_A6230( v146,  v147,  v148,  v149,  v150,  v151,  v152,  v153,  v237,  v244,  v252,  (uint64_t)v261,  v270,  (uint64_t)v281);
      sub_A6238(v214, v215, v216, v217, v218, v219, v220, v221, v243, v250, v260, v269, v279, v287, v290);
      sub_58F9C();
      uint64_t v293 = *(void *)(v213 + 24);
      swift_bridgeObjectRetain(v293);
      uint64_t v222 = 2LL;
LABEL_39:
      uint64_t v276 = v222;
      goto LABEL_40;
    }
  }

  uint64_t v189 = sub_A6238( v146,  v147,  v148,  v149,  v150,  v151,  v152,  v153,  v237,  v244,  v252,  (uint64_t)v261,  v270,  (uint64_t)v281,  v290);
  sub_A6230(v189, v190, v191, v192, v193, v194, v195, v196, v241, v248, v258, v267, v277, v285);
  uint64_t v276 = 0LL;
LABEL_40:
  uint64_t v231 = *(void *)(v2 + 320);
  uint64_t v232 = *(void *)(v2 + 296);
  uint64_t v234 = *(void *)(v2 + 264);
  uint64_t v233 = *(void *)(v2 + 272);
  uint64_t v235 = *(void *)(v2 + 240);
  uint64_t v288 = *(void *)(v2 + 184);
  uint64_t v291 = *(void *)(v2 + 176);
  swift_task_dealloc(*(void *)(v2 + 360));
  sub_A7C8();
  sub_A760();
  swift_task_dealloc(v231);
  swift_task_dealloc(v232);
  swift_task_dealloc(v233);
  swift_task_dealloc(v234);
  swift_task_dealloc(v235);
  sub_A67C();
  sub_A78C();
  swift_task_dealloc(v288);
  swift_task_dealloc(v291);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v276, v293);
}

void sub_A4960(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Input(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_D984();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_27AD8();
  uint64_t v11 = Logger.workout.unsafeMutableAddressor();
  sub_A5DC(v11, (uint64_t)v32);
  uint64_t v28 = v10;
  uint64_t v29 = v9;
  sub_DA2C(v2, v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));
  uint64_t v12 = sub_61900((uint64_t)v8, a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
  os_log_type_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = sub_A5E8(22LL);
    uint64_t v27 = a2;
    uint64_t v16 = v15;
    uint64_t v26 = sub_A5E8(64LL);
    uint64_t v31 = v26;
    *(_DWORD *)uint64_t v16 = 136315394;
    uint64_t v17 = sub_618E8();
    unint64_t v19 = v18;
    uint64_t v30 = sub_39178(v17, v18, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v16 + 1sub_D878(v0 + 2) = 2080;
    uint64_t v20 = sub_2322C( (unint64_t *)&qword_189EE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter(v5, v20);
    uint64_t v30 = sub_39178(v21, v22, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v16 + 14, v16 + 22);
    sub_249D4();
    sub_D970((uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    sub_D9B0(&dword_0, v13, v14, "%s Handling Input: %s", (uint8_t *)v16);
    uint64_t v23 = v26;
    swift_arrayDestroy(v26, 2LL);
    sub_5050(v23);
    sub_5050(v16);
  }

  else
  {
    sub_D970((uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  }

  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v2, v29);
  static ActionForInput.handle()(v24);
  sub_D8FC();
}

uint64_t sub_A4B9C(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  v3[15] = *v2;
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v3[16] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[17] = v5;
  v3[18] = sub_D8CC(v5);
  v3[19] = sub_A5B8();
  uint64_t v6 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[20] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[21] = v7;
  v3[22] = sub_A5C0(v7);
  uint64_t v8 = sub_D984();
  v3[23] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[24] = v9;
  v3[25] = sub_A5C0(v9);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_A4C2C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = (uint64_t)(v1 + 7);
  uint64_t v6 = v1 + 24;
  uint64_t v5 = v1[24];
  uint64_t v4 = v6[1];
  uint64_t v7 = v2[13];
  uint64_t v8 = Logger.wellness.unsafeMutableAddressor(a1);
  sub_A5DC(v8, v3);
  sub_DA14(v4, v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
  swift_errorRetain(v7);
  uint64_t v9 = swift_errorRetain(v7);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v26 = v2[24];
    uint64_t v27 = v2[23];
    uint64_t v28 = v2[25];
    uint64_t v12 = v2[13];
    uint64_t v13 = sub_A5E8(22LL);
    os_log_type_t v14 = (void *)sub_A5E8(8LL);
    uint64_t v25 = sub_A5E8(32LL);
    uint64_t v29 = v25;
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v15 = sub_618E8();
    unint64_t v17 = v16;
    v2[10] = sub_39178(v15, v16, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 10, v2 + 11, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v13 + 1sub_D878(v0 + 2) = 2112;
    swift_errorRetain(v12);
    uint64_t v18 = _swift_stdlib_bridgeErrorToNSError(v12);
    v2[11] = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 11, v2 + 12, v13 + 14, v13 + 22);
    *os_log_type_t v14 = v18;
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    sub_D9B0(&dword_0, v10, v11, "%s makeErrorResponse called with error: %@", (uint8_t *)v13);
    sub_494C(&qword_189CB8);
    swift_arrayDestroy(v14, 1LL);
    sub_5050((uint64_t)v14);
    swift_arrayDestroy(v25, 1LL);
    sub_5050(v25);
    sub_5050(v13);

    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v27);
  }

  else
  {
    uint64_t v20 = v2[24];
    uint64_t v19 = v2[25];
    uint64_t v21 = v2[23];
    uint64_t v22 = v2[13];
    swift_errorRelease(v22);
    swift_errorRelease(v22);

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  }

  sub_500C((void *)(v2[14] + 72LL), *(void *)(v2[14] + 96LL));
  uint64_t v23 = (void *)swift_task_alloc(dword_18CCDC);
  v2[26] = v23;
  *uint64_t v23 = v2;
  v23[1] = sub_A4E94;
  return sub_764C8();
}

uint64_t sub_A4E94()
{
  uint64_t v3 = v2[26];
  uint64_t v4 = *v1;
  v2[27] = v5;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_task_dealloc(v2[25]);
    sub_A67C();
    sub_A7C8();
    sub_A760();
    return sub_2499C(*(uint64_t (**)(void))(v4 + 8));
  }

  else
  {
    sub_A964();
    return sub_D954();
  }

uint64_t sub_A4F14()
{
  uint64_t v1 = (void *)v0[27];
  uint64_t v3 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v4 = v0[16];
  uint64_t v5 = v0[17];
  uint64_t v6 = v0[14];
  static DialogPhase.error.getter();
  sub_DA2C(v3, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
  OutputGenerationManifest.init(dialogPhase:_:)(v3, sub_A633C, 0LL);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  OutputGenerationManifest.canUseServerTTS.setter(0LL);
  id v7 = [v1 patternId];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v10 = v9;

  OutputGenerationManifest.responseViewId.setter(v8, v10);
  sub_D7EC(v6 + 208, (uint64_t)(v0 + 2));
  uint64_t v11 = v0[5];
  uint64_t v12 = v0[6];
  sub_500C(v0 + 2, v11);
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)[1]);
  v0[28] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_A5044;
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)( v0[12],  v0[27],  v0[22],  v11,  v12);
}

uint64_t sub_A5044()
{
  uint64_t v3 = *(void *)(v2 + 224);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 23sub_D878(v0 + 2) = v0;
  swift_task_dealloc(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_A5094()
{
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 144);

  sub_D970(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_AA20();
  sub_A67C();
  sub_A7C8();
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_A511C()
{
  sub_D9B8();
  sub_AA20();
  swift_task_dealloc(*(void *)(v0 + 200));
  sub_A67C();
  sub_A7C8();
  sub_A760();
  return sub_2499C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_A517C(uint64_t a1)
{
  v2[26] = a1;
  v2[27] = v1;
  uint64_t v3 = sub_D984();
  v2[28] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[29] = v4;
  v2[30] = sub_A5C0(v4);
  uint64_t v5 = sub_494C(&qword_189EE0);
  v2[31] = sub_A5C0(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for DialogPhase(0LL);
  v2[32] = sub_A5C0(*(void *)(v6 - 8));
  uint64_t v7 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[33] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[34] = v8;
  v2[35] = sub_A5C0(v8);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_A5208()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = sub_A5984();
  char v5 = *(_BYTE *)(v1 + 16);
  if (v5) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = v2;
  }
  char v8 = v2 < 1 || v3 < 1;
  char v9 = v4 > 0;
  v0[36] = *(void *)(v1 + 192);
  *(double *)&uint64_t v10 = (double)v6;
  uint64_t v11 = dword_190BFC;
  swift_retain();
  uint64_t v12 = (void *)swift_task_alloc(v11);
  v0[37] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_A52B4;
  return sub_131918(v5, v10, 0, v8, v9);
}

uint64_t sub_A52B4(uint64_t a1)
{
  if (v1) {
    swift_errorRelease(v1);
  }
  else {
    *(void *)(v2 + 30sub_D878(v0 + 4) = a1;
  }
  sub_A964();
  return sub_D954();
}

uint64_t sub_A531C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  *(void *)(v0 + 31sub_D878(v0 + 2) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_A5368;
  return sub_36164(0x6C65636E6163LL, 0xE600000000000000LL);
}

uint64_t sub_A5368()
{
  v2[20] = v0;
  v2[21] = v1;
  v2[22] = v3;
  uint64_t v4 = v2[39];
  *char v5 = *v0;
  v2[40] = v3;
  swift_task_dealloc(v4);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_A53B0()
{
  v0[41] = v0[21];
  uint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  v0[42] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_A5408;
  return sub_36164(0x6D7269666E6F63LL, 0xE700000000000000LL);
}

uint64_t sub_A5408()
{
  v2[23] = v0;
  v2[24] = v1;
  v2[25] = v3;
  uint64_t v4 = v2[42];
  *char v5 = *v0;
  v2[43] = v3;
  swift_task_dealloc(v4);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_A5450()
{
  unint64_t v1 = v0[43];
  unint64_t v3 = v0[40];
  uint64_t v2 = v0[41];
  uint64_t v4 = (void *)v0[38];
  uint64_t v5 = v0[31];
  uint64_t v6 = v0[32];
  uint64_t v7 = v0[27];
  BOOL v8 = v3 == 0;
  if (!v3) {
    unint64_t v3 = 0xE600000000000000LL;
  }
  unint64_t v30 = v3;
  if (v8) {
    uint64_t v2 = 0x6C65636E6143LL;
  }
  uint64_t v29 = v2;
  if (v1) {
    uint64_t v9 = v0[24];
  }
  else {
    uint64_t v9 = 0x6D7269666E6F43LL;
  }
  if (!v1) {
    unint64_t v1 = 0xE700000000000000LL;
  }
  unint64_t v27 = v1;
  uint64_t v28 = v9;
  v0[5] = &type metadata for WellnessFeatureFlagsKey;
  v0[6] = sub_354B0();
  *((_BYTE *)v0 + 1sub_D878(v0 + 6) = 4;
  char v10 = isFeatureEnabled(_:)(v0 + 2);
  uint64_t v11 = _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2);
  static DialogPhase.clarification.getter(v11);
  OutputGenerationManifest.init(dialogPhase:_:)(v6, PhoneRingsSnippet.body.getter, 0LL);
  OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
  sub_61270();
  uint64_t v12 = type metadata accessor for NLContextUpdate(0LL);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v5, 0LL, 1LL, v12);
  OutputGenerationManifest.nlContextUpdate.setter(v5);
  OutputGenerationManifest.canUseServerTTS.setter(0LL);
  id v13 = [v4 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v13);

  uint64_t v14 = sub_A6264();
  OutputGenerationManifest.responseViewId.setter(v14, v15);
  OutputGenerationManifest.printSupportingDialogInDisplayModes.setter(1LL);
  sub_D7EC(v7 + 208, (uint64_t)(v0 + 7));
  uint64_t v16 = v0[10];
  sub_500C(v0 + 7, v16);
  uint64_t v17 = type metadata accessor for WellnessSnippets(0LL);
  v0[15] = v17;
  v0[16] = sub_2322C( (unint64_t *)&qword_18A468,  type metadata accessor for WellnessSnippets,  (uint64_t)&protocol conformance descriptor for WellnessSnippets);
  uint64_t v18 = sub_B76C(v0 + 12);
  *uint64_t v18 = 0xD000000000000031LL;
  v18[1] = 0x80000000001449C0LL;
  void v18[2] = v29;
  v18[3] = v30;
  v18[4] = v28;
  v18[5] = v27;
  *((_BYTE *)v18 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v10 & 1;
  swift_storeEnumTagMultiPayload(v18, v17, 5LL);
  uint64_t v19 = sub_494C(&qword_18A460);
  uint64_t v20 = swift_allocObject(v19, 40LL, 7LL);
  *(_OWORD *)(v20 + 1sub_D878(v0 + 6) = xmmword_138BA0;
  *(void *)(v20 + 3sub_D878(v0 + 2) = v4;
  uint64_t v31 = v20;
  specialized Array._endMutation()(v20, v21, v22);
  v0[44] = v31;
  uint64_t v23 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)[1];
  id v24 = v4;
  uint64_t v25 = (void *)swift_task_alloc(v23);
  v0[45] = v25;
  *uint64_t v25 = v0;
  v25[1] = sub_A56F4;
  return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)( v0[26],  v0 + 12,  v31,  v0[35],  v16);
}

uint64_t sub_A56F4()
{
  return sub_D954();
}

uint64_t sub_A5738()
{
  sub_D9B8();
  sub_AA20();
  swift_task_dealloc(*(void *)(v0 + 280));
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  return sub_2499C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_A5798(uint64_t a1)
{
  uint64_t v3 = v1[29];
  uint64_t v2 = v1[30];
  uint64_t v4 = Logger.wellness.unsafeMutableAddressor(a1);
  sub_A5DC(v4, (uint64_t)(v1 + 17));
  uint64_t v5 = sub_DA14(v2, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  uint64_t v6 = (void *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (sub_A988(v7))
  {
    BOOL v8 = (_WORD *)sub_A5E8(2LL);
    _WORD *v8 = 0;
    sub_A940( &dword_0,  v9,  v10,  "Couldn't create logMedGenericMixedStatusConfirmation_Dialog, returning generic error output.");
    sub_5050((uint64_t)v8);
  }

  sub_D9B8();
  unint64_t v11 = sub_A60D0();
  uint64_t v12 = swift_allocError(&type metadata for LogMedGenericMixedStatusConfirmationStrategyError, v11, 0LL, 0LL);
  v1[46] = v12;
  id v13 = (uint64_t **)swift_task_alloc(dword_18DD24);
  v1[47] = (uint64_t)v13;
  *id v13 = v1;
  v13[1] = (uint64_t *)sub_A589C;
  return sub_A4B9C(v1[26], v12);
}

uint64_t sub_A589C()
{
  uint64_t v2 = *(void *)(*v1 + 376);
  uint64_t v3 = *v1;
  *(void *)(v3 + 38sub_D878(v0 + 4) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    sub_A964();
    return swift_task_switch(v4, v5, v6);
  }

  else
  {
    swift_errorRelease(*(void *)(v3 + 368));
    swift_task_dealloc(*(void *)(v3 + 280));
    sub_A78C();
    sub_A67C();
    sub_A7C8();
    return (*(uint64_t (**)(void))(v3 + 8))();
  }

uint64_t sub_A5938()
{
  return sub_2499C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_A5984()
{
  uint64_t v0 = (uint64_t)sub_60EE4();
  uint64_t v2 = v1;
  unint64_t v4 = v3;
  if ((unint64_t)v0 >> 62)
  {
    if (v0 < 0) {
      uint64_t v7 = v0;
    }
    else {
      uint64_t v7 = v0 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_77A00();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v7);
  }

  else
  {
    uint64_t v5 = *(void *)((char *)&dword_10 + (v0 & 0xFFFFFFFFFFFFF8LL));
    sub_77A00();
  }

  swift_bridgeObjectRetain(v2);
  sub_58F9C();
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0) {
      uint64_t v8 = v2;
    }
    else {
      uint64_t v8 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    _CocoaArrayWrapper.endIndex.getter(v8);
    sub_58F9C();
  }

  sub_58F9C();
  swift_bridgeObjectRelease_n(v2, 2LL);
  if (v4 >> 62)
  {
    sub_A6240();
    _CocoaArrayWrapper.endIndex.getter(v2);
    sub_2A184();
  }

  sub_2A184();
  return v5;
}

uint64_t type metadata accessor for LogMedGenericMixedStatusConfirmationStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC18WellnessFlowPlugin44LogMedGenericMixedStatusConfirmationStrategy);
}

uint64_t sub_A5AA4(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 1sub_D878(v0 + 6) = a1;
  unint64_t v4 = (void *)swift_task_alloc(dword_18DD1C);
  *(void *)(v2 + 2sub_D878(v0 + 4) = v4;
  *unint64_t v4 = v2;
  v4[1] = sub_A5AF4;
  return sub_A3FE4(a2);
}

uint64_t sub_A5AF4(uint64_t a1, uint64_t a2)
{
  if (!v2)
  {
    uint64_t v8 = *(void **)(v4 + 16);
    void *v8 = a1;
    v8[1] = a2;
  }

  return sub_2499C(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_A5B38(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18DD2C);
  *(void *)(v1 + 1sub_D878(v0 + 6) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_A622C;
  return sub_A517C(a1);
}

uint64_t sub_A5B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse()[1]);
  *(void *)(v3 + 1sub_D878(v0 + 6) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_A622C;
  return PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse()(a1, a2, a3);
}

uint64_t sub_A5BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to PromptForValueFlowStrategyAsync.makeRepromptOnLowConfidence()[1]);
  *(void *)(v3 + 1sub_D878(v0 + 6) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_A622C;
  return PromptForValueFlowStrategyAsync.makeRepromptOnLowConfidence()(a1, a2, a3);
}

uint64_t sub_A5C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to PromptForValueFlowStrategyAsync.makeFlowCancelledResponse()[1]);
  *(void *)(v3 + 1sub_D878(v0 + 6) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_A5CCC;
  return PromptForValueFlowStrategyAsync.makeFlowCancelledResponse()(a1, a2, a3);
}

uint64_t sub_A5CCC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_A5D00(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_18DD24);
  *(void *)(v2 + 1sub_D878(v0 + 6) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_A622C;
  return sub_A4B9C(a1, a2);
}

uint64_t sub_A5D60(unint64_t a1)
{
  if (a1 >> 62)
  {
    sub_A6240();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v2);
    sub_2A184();
  }

  else
  {
    uint64_t v4 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v5 = *v1;
  if ((unint64_t)*v1 >> 62)
  {
    if (v5 < 0) {
      uint64_t v19 = *v1;
    }
    else {
      uint64_t v19 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_77A00();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v19);
    sub_58F9C();
  }

  else
  {
    uint64_t v6 = *(void *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v7 = v6 + v4;
  if (__OFADD__(v6, v4))
  {
    __break(1u);
    goto LABEL_27;
  }

  uint64_t v5 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *uint64_t v1 = v5;
  uint64_t v6 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000LL) == 0 && (v5 & 0x4000000000000000LL) == 0)
  {
    uint64_t v9 = v5 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v6 = 1LL;
  }

  uint64_t v10 = *(void *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8LL));
  while (1)
  {
    if (v10 <= v7) {
      uint64_t v10 = v7;
    }
    sub_77A00();
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v6, v10, 1LL, v5);
    swift_bridgeObjectRelease(*v1);
    *uint64_t v1 = v5;
    uint64_t v9 = v5 & 0xFFFFFFFFFFFFFF8LL;
LABEL_16:
    uint64_t result = sub_A5F4C(v9 + 8LL * *(void *)(v9 + 16) + 32, (*(void *)(v9 + 24) >> 1) - *(void *)(v9 + 16), a1);
    if (v12 >= v4) {
      break;
    }
LABEL_27:
    __break(1u);
LABEL_28:
    if (v5 < 0) {
      uint64_t v20 = v5;
    }
    else {
      uint64_t v20 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_77A00();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v20);
    sub_58F9C();
  }

  if (v12 < 1) {
    goto LABEL_20;
  }
  uint64_t v13 = *(void *)((char *)&dword_10 + (*v1 & 0xFFFFFFFFFFFFFF8LL));
  BOOL v14 = __OFADD__(v13, v12);
  uint64_t v15 = v13 + v12;
  if (!v14)
  {
    *(void *)((char *)&dword_10 + (*v1 & 0xFFFFFFFFFFFFFF8LL)) = v15;
LABEL_20:
    uint64_t v16 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v16, v17, v18);
  }

  __break(1u);
  return result;
}

uint64_t sub_A5EEC(void *a1)
{
  id v1 = [a1 completionStatus];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_A5F4C(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = result;
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v15);
    uint64_t result = swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL));
    if (!v7) {
      return a3;
    }
  }

  if (v5)
  {
    if (v6)
    {
      if (a3 < 0) {
        uint64_t v8 = a3;
      }
      else {
        uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a3);
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v8);
      uint64_t result = swift_bridgeObjectRelease(a3);
      if (v9 <= a2)
      {
        if (v7 >= 1)
        {
          sub_A610C();
          swift_bridgeObjectRetain(a3);
          for (uint64_t i = 0LL; i != v7; ++i)
          {
            sub_494C(&qword_18DED8);
            sub_134C44(v16, i, a3);
            uint64_t v12 = v11;
            id v14 = *v13;
            v12(v16, 0LL);
            *(void *)(v5 + 8 * i) = v14;
          }

          swift_bridgeObjectRelease(a3);
          return a3;
        }

        goto LABEL_22;
      }
    }

    else
    {
      if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8LL)) <= a2)
      {
        sub_3902C((a3 & 0xFFFFFFFFFFFFFF8LL) + 32, *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8LL)), v5);
        return a3;
      }

      __break(1u);
    }

    __break(1u);
LABEL_22:
    __break(1u);
  }

  __break(1u);
  return result;
}

unint64_t sub_A60D0()
{
  unint64_t result = qword_18DED0;
  if (!qword_18DED0)
  {
    unint64_t result = swift_getWitnessTable(&unk_13C3DC, &type metadata for LogMedGenericMixedStatusConfirmationStrategyError);
    atomic_store(result, (unint64_t *)&qword_18DED0);
  }

  return result;
}

unint64_t sub_A610C()
{
  unint64_t result = qword_18DEE0;
  if (!qword_18DEE0)
  {
    uint64_t v1 = sub_B64C(&qword_18DED8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_18DEE0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for LogMedGenericMixedStatusConfirmationStrategyError( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(vsub_D878(v0 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_A6190 + 4 * byte_13C250[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_A61B0 + 4 * byte_13C255[v4]))();
  }
}

_BYTE *sub_A6190(_BYTE *result, char a2)
{
  void *result = a2;
  return result;
}

_BYTE *sub_A61B0(_BYTE *result)
{
  void *result = 0;
  return result;
}

_DWORD *sub_A61B8(_DWORD *result, int a2)
{
  void *result = a2;
  return result;
}

_WORD *sub_A61C0(_WORD *result, __int16 a2)
{
  void *result = a2;
  return result;
}

_WORD *sub_A61C8(_WORD *result)
{
  void *result = 0;
  return result;
}

_DWORD *sub_A61D0(_DWORD *result)
{
  void *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LogMedGenericMixedStatusConfirmationStrategyError()
{
  return &type metadata for LogMedGenericMixedStatusConfirmationStrategyError;
}

unint64_t sub_A61F0()
{
  unint64_t result = qword_18DEE8;
  if (!qword_18DEE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_13C3B4, &type metadata for LogMedGenericMixedStatusConfirmationStrategyError);
    atomic_store(result, (unint64_t *)&qword_18DEE8);
  }

  return result;
}

uint64_t sub_A6230( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_bridgeObjectRelease(a14);
}

uint64_t sub_A6238( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return swift_bridgeObjectRelease(a15);
}

uint64_t sub_A6240()
{
  return swift_bridgeObjectRetain(v0);
}

void sub_A6254()
{
  *(void *)(v1 - _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *v0;
}

uint64_t sub_A6264()
{
  return v0;
}

uint64_t sub_A6270( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14)
{
  return sub_A5D60(a14);
}

uint64_t sub_A627C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DialogPhase(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v11[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  OutputGenerationManifest.init(dialogPhase:_:)(v9, sub_A63A0, v11);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
}

uint64_t sub_A633C()
{
  return OutputGenerationManifest.canUseServerTTS.setter(0LL);
}

uint64_t sub_A6360(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  return a2(a1);
}

uint64_t sub_A63A0(uint64_t a1)
{
  return sub_A6360(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

void GenericMedCompletedLogModel.init(medStatus:givenTime:url:dontDisplayGranularTime:sashBundleID:isSmartEnabled:loggedLabel:skippedLabel:takenLabel:allScheduledMedicationsLabel:snippetHeaderModel:)( char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v22 = v21 - v20;
  uint64_t v23 = (int *)sub_A8CC4();
  uint64_t v24 = a9 + v23[6];
  uint64_t v41 = v24;
  uint64_t v38 = type metadata accessor for AppPunchout(0LL);
  sub_6D78(v24, v25, v26, v38);
  uint64_t v39 = v23[7];
  *(_BYTE *)(a9 + v39) = 0;
  unint64_t v27 = (void *)(a9 + v23[8]);
  *unint64_t v27 = 0xD000000000000010LL;
  v27[1] = 0x8000000000140A90LL;
  uint64_t v28 = v23[9];
  *(_BYTE *)(a9 + v2_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0;
  uint64_t v29 = (void *)(a9 + v23[10]);
  *uint64_t v29 = 0LL;
  v29[1] = 0LL;
  unint64_t v30 = (void *)(a9 + v23[11]);
  *unint64_t v30 = 0LL;
  v30[1] = 0LL;
  uint64_t v31 = (void *)(a9 + v23[12]);
  *uint64_t v31 = 0LL;
  v31[1] = 0LL;
  uint64_t v32 = (void *)(a9 + v23[13]);
  *uint64_t v32 = 0LL;
  v32[1] = 0LL;
  uint64_t v42 = a9 + v23[14];
  uint64_t v33 = type metadata accessor for SnippetHeaderModel(0LL);
  sub_6D78(v42, v34, v35, v33);
  *(_BYTE *)a9 = a1;
  *(void *)(a9 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_A6AE8();
  *(void *)(a9 + 1sub_D878(v0 + 6) = v36;
  sub_2521C(a3);
  sub_279E0(a3, &qword_189CF8);
  uint64_t v37 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v37 - 8) + 8LL))(a2, v37);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v22, 0LL, 1LL, v38);
  sub_24D88(v22, v41, &qword_18A1A0);
  *(_BYTE *)(a9 + v39) = a4;
  swift_bridgeObjectRelease(v27[1]);
  *unint64_t v27 = a5;
  v27[1] = a6;
  *(_BYTE *)(a9 + v2_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a7;
  swift_bridgeObjectRelease(v29[1]);
  *uint64_t v29 = a8;
  v29[1] = a10;
  swift_bridgeObjectRelease(v30[1]);
  *unint64_t v30 = a11;
  v30[1] = a12;
  swift_bridgeObjectRelease(v31[1]);
  *uint64_t v31 = a13;
  v31[1] = a14;
  swift_bridgeObjectRelease(v32[1]);
  *uint64_t v32 = a15;
  v32[1] = a16;
  sub_24D88(a17, v42, &qword_18A1A8);
}

uint64_t type metadata accessor for GenericMedCompletedLogModel(uint64_t a1)
{
  uint64_t result = qword_18DF60;
  if (!qword_18DF60) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for GenericMedCompletedLogModel);
  }
  return result;
}

void GenericMedCompletedLogModel.time.getter()
{
}

void SpecificMedCompletedLogModel.time.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a1;
  *(void *)(v2 + 1sub_D878(v0 + 6) = a2;
  sub_1EB0C();
}

uint64_t (*SpecificMedCompletedLogModel.time.modify())()
{
  return PhoneRingsSnippet.body.getter;
}

void GenericMedCompletedLogModel.appPunchout.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_A8CC4();
  sub_A44C(v1 + *(int *)(v3 + 24), a1, &qword_18A1A0);
  sub_A890();
}

void GenericMedCompletedLogModel.appPunchout.setter(uint64_t a1)
{
  uint64_t v3 = sub_A8CC4();
  sub_24D88(a1, v1 + *(int *)(v3 + 24), &qword_18A1A0);
  sub_A890();
}

uint64_t (*GenericMedCompletedLogModel.appPunchout.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t GenericMedCompletedLogModel.dontDisplayGranularTime.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(sub_A8CC4() + 28));
}

void GenericMedCompletedLogModel.dontDisplayGranularTime.setter(char a1)
{
  *(_BYTE *)(v1 + *(int *)(sub_A8CC4() + 28)) = a1;
  sub_A890();
}

uint64_t (*GenericMedCompletedLogModel.dontDisplayGranularTime.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void GenericMedCompletedLogModel.sashBundleID.getter()
{
  uint64_t v0 = sub_A8CC4();
  sub_27A30(*(int *)(v0 + 32));
  sub_1EB8C();
  sub_A890();
}

void GenericMedCompletedLogModel.sashBundleID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_A8CC4();
  sub_27AB4(*(int *)(v5 + 32));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*GenericMedCompletedLogModel.sashBundleID.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t GenericMedCompletedLogModel.isSmartEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(sub_A8CC4() + 36));
}

void GenericMedCompletedLogModel.isSmartEnabled.setter(char a1)
{
  *(_BYTE *)(v1 + *(int *)(sub_A8CC4() + 36)) = a1;
  sub_A890();
}

uint64_t (*GenericMedCompletedLogModel.isSmartEnabled.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void GenericMedCompletedLogModel.loggedLabel.getter()
{
  uint64_t v0 = sub_A8CC4();
  sub_27A30(*(int *)(v0 + 40));
  sub_1EB8C();
  sub_A890();
}

void GenericMedCompletedLogModel.loggedLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_A8CC4();
  sub_27AB4(*(int *)(v5 + 40));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*GenericMedCompletedLogModel.loggedLabel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void GenericMedCompletedLogModel.skippedLabel.getter()
{
  uint64_t v0 = sub_A8CC4();
  sub_27A30(*(int *)(v0 + 44));
  sub_1EB8C();
  sub_A890();
}

void GenericMedCompletedLogModel.skippedLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_A8CC4();
  sub_27AB4(*(int *)(v5 + 44));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*GenericMedCompletedLogModel.skippedLabel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void GenericMedCompletedLogModel.takenLabel.getter()
{
  uint64_t v0 = sub_A8CC4();
  sub_27A30(*(int *)(v0 + 48));
  sub_1EB8C();
  sub_A890();
}

void GenericMedCompletedLogModel.takenLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_A8CC4();
  sub_27AB4(*(int *)(v5 + 48));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*GenericMedCompletedLogModel.takenLabel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void GenericMedCompletedLogModel.allScheduledMedicationsLabel.getter()
{
  uint64_t v0 = sub_A8CC4();
  sub_27A30(*(int *)(v0 + 52));
  sub_1EB8C();
  sub_A890();
}

void GenericMedCompletedLogModel.allScheduledMedicationsLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_A8CC4();
  sub_27AB4(*(int *)(v5 + 52));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*GenericMedCompletedLogModel.allScheduledMedicationsLabel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void GenericMedCompletedLogModel.snippetHeaderModel.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_A8CC4();
  sub_A44C(v1 + *(int *)(v3 + 56), a1, &qword_18A1A8);
  sub_A890();
}

void GenericMedCompletedLogModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t v3 = sub_A8CC4();
  sub_24D88(a1, v1 + *(int *)(v3 + 56), &qword_18A1A8);
  sub_A890();
}

uint64_t (*GenericMedCompletedLogModel.snippetHeaderModel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t sub_A6AE8()
{
  id v0 = [objc_allocWithZone(NSDateFormatter) init];
  [v0 setTimeStyle:1];
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v2 = [v0 stringFromDate:isa];

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  return v3;
}

uint64_t sub_A6B84(uint64_t a1, unint64_t a2)
{
  BOOL v3 = a1 == 0x757461745364656DLL && a2 == 0xE900000000000073LL;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x757461745364656DLL, 0xE900000000000073LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  BOOL v6 = a1 == 1701669236 && a2 == 0xE400000000000000LL;
  if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)(1701669236LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  BOOL v7 = a1 == 0x68636E7550707061LL && a2 == 0xEB0000000074756FLL;
  if (v7
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x68636E7550707061LL, 0xEB0000000074756FLL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 2LL;
  }

  if (a1 == 0xD000000000000017LL)
  {
    unint64_t v8 = 0x8000000000145EC0LL;
    if (a2 == 0x8000000000145EC0LL) {
      goto LABEL_23;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x8000000000145EC0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3LL;
  }

  BOOL v9 = a1 == 0x646E754268736173LL && a2 == 0xEC0000004449656CLL;
  if (v9
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x646E754268736173LL, 0xEC0000004449656CLL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 4LL;
  }

  BOOL v10 = a1 == 0x457472616D537369LL && a2 == 0xEE0064656C62616ELL;
  if (v10
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x457472616D537369LL, 0xEE0064656C62616ELL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 5LL;
  }

  BOOL v11 = a1 == 0x614C646567676F6CLL && a2 == 0xEB000000006C6562LL;
  if (v11
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x614C646567676F6CLL, 0xEB000000006C6562LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 6LL;
  }

  BOOL v12 = a1 == 0x4C64657070696B73LL && a2 == 0xEC0000006C656261LL;
  if (v12
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x4C64657070696B73LL, 0xEC0000006C656261LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 7LL;
  }

  BOOL v13 = a1 == 0x62614C6E656B6174LL && a2 == 0xEA00000000006C65LL;
  if (v13
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x62614C6E656B6174LL, 0xEA00000000006C65LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 8LL;
  }

  if (a1 == 0xD00000000000001CLL && a2 == 0x8000000000145EE0LL)
  {
    unint64_t v14 = 0x8000000000145EE0LL;
LABEL_59:
    swift_bridgeObjectRelease(v14);
    return 9LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x8000000000145EE0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
    goto LABEL_59;
  }

  if (a1 == 0xD000000000000012LL && a2 == 0x8000000000141630LL)
  {
    swift_bridgeObjectRelease(0x8000000000141630LL);
    return 10LL;
  }

  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000000141630LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v15 & 1) != 0) {
      return 10LL;
    }
    else {
      return 11LL;
    }
  }

uint64_t sub_A6FE0()
{
  return 11LL;
}

uint64_t sub_A6FE8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_A7028 + 4 * byte_13C420[a1]))( 0xD000000000000017LL,  0x8000000000145EC0LL);
}

uint64_t sub_A7028()
{
  return 0x757461745364656DLL;
}

uint64_t sub_A7044()
{
  return 1701669236LL;
}

uint64_t sub_A7054()
{
  return 0x68636E7550707061LL;
}

uint64_t sub_A7074()
{
  return 0x646E754268736173LL;
}

uint64_t sub_A7094()
{
  return 0x457472616D537369LL;
}

uint64_t sub_A70B8()
{
  return 0x614C646567676F6CLL;
}

uint64_t sub_A70D8()
{
  return 0x4C64657070696B73LL;
}

uint64_t sub_A70F8()
{
  return v0 + 10;
}

unint64_t sub_A7110()
{
  return 0xD000000000000012LL;
}

uint64_t sub_A712C()
{
  return 0x62614C6E656B6174LL;
}

uint64_t sub_A7148()
{
  return sub_A6FE8(*v0);
}

uint64_t sub_A7150@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_A6B84(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_A7174@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_A6FE0();
  *a1 = result;
  return result;
}

uint64_t sub_A7198(uint64_t a1)
{
  unint64_t v2 = sub_A7478();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_A71C0(uint64_t a1)
{
  unint64_t v2 = sub_A7478();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GenericMedCompletedLogModel.encode(to:)(void *a1)
{
  BOOL v3 = v1;
  uint64_t v5 = sub_494C(&qword_18DEF0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_6D44();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_500C(a1, v10);
  unint64_t v12 = sub_A7478();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for GenericMedCompletedLogModel.CodingKeys,  &type metadata for GenericMedCompletedLogModel.CodingKeys,  v12,  v10,  v11);
  uint64_t v13 = *v3;
  char v44 = 0;
  sub_A8CDC(v13, (uint64_t)&v44);
  if (!v2)
  {
    uint64_t v14 = *((void *)v3 + 1);
    uint64_t v15 = *((void *)v3 + 2);
    char v43 = 1;
    sub_A8D00(v14, v15, (uint64_t)&v43);
    uint64_t v16 = (int *)type metadata accessor for GenericMedCompletedLogModel(0LL);
    uint64_t v17 = (uint64_t)&v3[v16[6]];
    char v42 = 2;
    uint64_t v18 = type metadata accessor for AppPunchout(0LL);
    sub_A410( &qword_18AA98,  (uint64_t (*)(uint64_t))&type metadata accessor for AppPunchout,  (uint64_t)&protocol conformance descriptor for AppPunchout);
    sub_8DE8C(v17, (uint64_t)&v42, v5, v18);
    uint64_t v19 = v3[v16[7]];
    char v41 = 3;
    sub_A8CDC(v19, (uint64_t)&v41);
    uint64_t v20 = sub_5E260(v16[8]);
    char v40 = 4;
    sub_A8D00(v20, v21, (uint64_t)&v40);
    uint64_t v22 = v3[v16[9]];
    char v39 = 5;
    sub_A8CDC(v22, (uint64_t)&v39);
    uint64_t v23 = sub_5E260(v16[10]);
    char v38 = 6;
    sub_A8CCC(v23, v24, (uint64_t)&v38);
    uint64_t v25 = sub_5E260(v16[11]);
    char v37 = 7;
    sub_A8CCC(v25, v26, (uint64_t)&v37);
    uint64_t v27 = sub_5E260(v16[12]);
    char v36 = 8;
    sub_A8CCC(v27, v28, (uint64_t)&v36);
    uint64_t v29 = sub_5E260(v16[13]);
    char v35 = 9;
    sub_A8CCC(v29, v30, (uint64_t)&v35);
    uint64_t v31 = (uint64_t)&v3[v16[14]];
    char v34 = 10;
    uint64_t v32 = type metadata accessor for SnippetHeaderModel(0LL);
    sub_A410( &qword_18AAA8,  type metadata accessor for SnippetHeaderModel,  (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    sub_8DE8C(v31, (uint64_t)&v34, v5, v32);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

unint64_t sub_A7478()
{
  unint64_t result = qword_18DEF8;
  if (!qword_18DEF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_13C60C, &type metadata for GenericMedCompletedLogModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18DEF8);
  }

  return result;
}

void GenericMedCompletedLogModel.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = v4;
  sub_494C(&qword_18A1A0);
  sub_6D20();
  __chkstk_darwin(v5);
  sub_6D30();
  uint64_t v36 = v6;
  uint64_t v38 = sub_494C(&qword_18DF00);
  uint64_t v37 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  sub_6D44();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = (int *)type metadata accessor for GenericMedCompletedLogModel(0LL);
  sub_6D20();
  __chkstk_darwin(v11);
  sub_6D44();
  uint64_t v14 = v13 - v12;
  *(void *)(v14 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0LL;
  *(void *)(v14 + 1sub_D878(v0 + 6) = 0xE000000000000000LL;
  uint64_t v44 = v13 - v12 + *(int *)(v15 + 24);
  uint64_t v35 = type metadata accessor for AppPunchout(0LL);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v44, 1LL, 1LL, v35);
  uint64_t v16 = v10[7];
  *(_BYTE *)(v14 + v1sub_D878(v0 + 6) = 0;
  uint64_t v17 = (void *)(v14 + v10[8]);
  *uint64_t v17 = 0xD000000000000010LL;
  v17[1] = 0x8000000000140A90LL;
  uint64_t v18 = v10[9];
  *(_BYTE *)(v14 + v1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0;
  sub_A8D20(v10[10]);
  uint64_t v46 = v19;
  sub_A8D20(v10[11]);
  uint64_t v45 = v20;
  sub_A8D20(v10[12]);
  char v42 = v21;
  char v43 = v22;
  sub_A8D20(v10[13]);
  char v41 = v23;
  uint64_t v24 = v14 + v10[14];
  uint64_t v25 = type metadata accessor for SnippetHeaderModel(0LL);
  uint64_t v40 = v24;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v24, 1LL, 1LL, v25);
  uint64_t v27 = a1[3];
  uint64_t v26 = a1[4];
  sub_500C(a1, v27);
  unint64_t v28 = sub_A7478();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for GenericMedCompletedLogModel.CodingKeys,  &type metadata for GenericMedCompletedLogModel.CodingKeys,  v28,  v27,  v26);
  if (v39)
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
    swift_bridgeObjectRelease(*(void *)(v14 + 16));
    sub_279E0(v44, &qword_18A1A0);
    sub_A8D10();
    swift_bridgeObjectRelease(v46[1]);
    swift_bridgeObjectRelease(v45[1]);
    swift_bridgeObjectRelease(v42[1]);
    swift_bridgeObjectRelease(v41[1]);
    sub_279E0(v24, &qword_18A1A8);
  }

  else
  {
    v54[1] = 0;
    *(_BYTE *)uint64_t v14 = sub_A8D18() & 1;
    v54[0] = 1;
    *(void *)(v14 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = KeyedDecodingContainer.decode(_:forKey:)(v54, v38);
    *(void *)(v14 + 1sub_D878(v0 + 6) = v29;
    char v53 = 2;
    sub_A410( &qword_18AAB8,  (uint64_t (*)(uint64_t))&type metadata accessor for AppPunchout,  (uint64_t)&protocol conformance descriptor for AppPunchout);
    sub_A8D2C(v35, (uint64_t)&v53, v38);
    sub_24D88(v36, v44, &qword_18A1A0);
    v52[1] = 3;
    *(_BYTE *)(v14 + v1sub_D878(v0 + 6) = sub_A8D18() & 1;
    v52[0] = 4;
    KeyedDecodingContainer.decode(_:forKey:)(v52, v38);
    sub_8DE48();
    sub_A8D10();
    *char v43 = v9;
    v43[1] = v37;
    v51[1] = 5;
    *(_BYTE *)(v14 + v1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_A8D18() & 1;
    v51[0] = 6;
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v51, v38);
    sub_8DE48();
    swift_bridgeObjectRelease(v46[1]);
    *uint64_t v46 = v9;
    v46[1] = v37;
    char v50 = 7;
    sub_A8CEC((uint64_t)&v50);
    sub_8DE48();
    swift_bridgeObjectRelease(v45[1]);
    *uint64_t v45 = v9;
    v45[1] = v37;
    char v49 = 8;
    sub_A8CEC((uint64_t)&v49);
    sub_8DE48();
    sub_A8D10();
    *char v42 = v9;
    v42[1] = v37;
    char v48 = 9;
    uint64_t v30 = sub_A8CEC((uint64_t)&v48);
    uint64_t v32 = v31;
    sub_A8D10();
    *char v41 = v30;
    v41[1] = v32;
    char v47 = 10;
    sub_A410( &qword_18AAC8,  type metadata accessor for SnippetHeaderModel,  (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    sub_A8D2C(v25, (uint64_t)&v47, v38);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v9, v38);
    sub_24D88(v34, v40, &qword_18A1A8);
    sub_A7A14(v14, a2);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
    sub_26F04(v14, type metadata accessor for GenericMedCompletedLogModel);
  }

uint64_t sub_A7A14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GenericMedCompletedLogModel(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_A7A58()
{
}

void sub_A7A84()
{
}

void sub_A7AB0(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_A7AC4(void *a1)
{
  return GenericMedCompletedLogModel.encode(to:)(a1);
}

void *initializeBufferWithCopyOfBuffer for GenericMedCompletedLogModel(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    uint64_t v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    uint64_t v8 = a3[6];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for AppPunchout(0LL);
    swift_bridgeObjectRetain(v7);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v10, 1LL, v11))
    {
      uint64_t v12 = sub_494C(&qword_18A1A0);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v11);
    }

    uint64_t v14 = a3[8];
    *((_BYTE *)v4 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    uint64_t v15 = (void *)((char *)v4 + v14);
    uint64_t v16 = (void *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = a3[10];
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    uint64_t v19 = (void *)((char *)v4 + v18);
    uint64_t v20 = (void *)((char *)a2 + v18);
    uint64_t v21 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v21;
    uint64_t v22 = a3[11];
    uint64_t v23 = a3[12];
    uint64_t v24 = (void *)((char *)v4 + v22);
    uint64_t v25 = (void *)((char *)a2 + v22);
    uint64_t v26 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v26;
    uint64_t v27 = (void *)((char *)v4 + v23);
    unint64_t v28 = (void *)((char *)a2 + v23);
    uint64_t v29 = v28[1];
    *uint64_t v27 = *v28;
    v27[1] = v29;
    uint64_t v30 = a3[13];
    uint64_t v31 = a3[14];
    uint64_t v32 = (void *)((char *)v4 + v30);
    uint64_t v33 = (void *)((char *)a2 + v30);
    uint64_t v34 = v33[1];
    uint64_t v35 = (char *)a2 + v31;
    uint64_t v36 = (char *)v4 + v31;
    *uint64_t v32 = *v33;
    v32[1] = v34;
    uint64_t v37 = type metadata accessor for SnippetHeaderModel(0LL);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v34);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v35, 1LL, v37))
    {
      uint64_t v38 = sub_494C(&qword_18A1A8);
      memcpy(v36, v35, *(void *)(*(void *)(v38 - 8) + 64LL));
    }

    else
    {
      uint64_t v39 = type metadata accessor for SpeakableString(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16LL))(v36, v35, v39);
      uint64_t v40 = *(int *)(v37 + 20);
      char v41 = &v36[v40];
      char v42 = &v35[v40];
      uint64_t v43 = *((void *)v42 + 1);
      *(void *)char v41 = *(void *)v42;
      *((void *)v41 + 1) = v43;
      uint64_t v44 = *(int *)(v37 + 24);
      uint64_t v45 = &v36[v44];
      uint64_t v46 = &v35[v44];
      uint64_t v47 = *((void *)v46 + 1);
      *(void *)uint64_t v45 = *(void *)v46;
      *((void *)v45 + 1) = v47;
      swift_bridgeObjectRetain(v43);
      swift_bridgeObjectRetain(v47);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v36, 0LL, 1LL, v37);
    }
  }

  return v4;
}

uint64_t destroy for GenericMedCompletedLogModel(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for AppPunchout(0LL);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[8] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[10] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[11] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[12] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[13] + 8));
  uint64_t v6 = a1 + a2[14];
  uint64_t v7 = type metadata accessor for SnippetHeaderModel(0LL);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1LL, v7);
  if (!(_DWORD)result)
  {
    uint64_t v9 = type metadata accessor for SpeakableString(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v6, v9);
    swift_bridgeObjectRelease(*(void *)(v6 + *(int *)(v7 + 20) + 8));
    return swift_bridgeObjectRelease(*(void *)(v6 + *(int *)(v7 + 24) + 8));
  }

  return result;
}

uint64_t initializeWithCopy for GenericMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 1sub_D878(v0 + 6) = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for AppPunchout(0LL);
  swift_bridgeObjectRetain(v6);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v9, 1LL, v10))
  {
    uint64_t v11 = sub_494C(&qword_18A1A0);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v8, 0LL, 1LL, v10);
  }

  uint64_t v12 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = a3[11];
  uint64_t v21 = a3[12];
  uint64_t v22 = (void *)(a1 + v20);
  uint64_t v23 = (void *)(a2 + v20);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = (void *)(a1 + v21);
  uint64_t v26 = (void *)(a2 + v21);
  uint64_t v27 = v26[1];
  *uint64_t v25 = *v26;
  v25[1] = v27;
  uint64_t v28 = a3[13];
  uint64_t v29 = a3[14];
  uint64_t v30 = (void *)(a1 + v28);
  uint64_t v31 = (void *)(a2 + v28);
  uint64_t v32 = v31[1];
  uint64_t v33 = (char *)(a2 + v29);
  uint64_t v34 = (char *)(a1 + v29);
  *uint64_t v30 = *v31;
  v30[1] = v32;
  uint64_t v35 = type metadata accessor for SnippetHeaderModel(0LL);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v32);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v33, 1LL, v35))
  {
    uint64_t v36 = sub_494C(&qword_18A1A8);
    memcpy(v34, v33, *(void *)(*(void *)(v36 - 8) + 64LL));
  }

  else
  {
    uint64_t v37 = type metadata accessor for SpeakableString(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16LL))(v34, v33, v37);
    uint64_t v38 = *(int *)(v35 + 20);
    uint64_t v39 = &v34[v38];
    uint64_t v40 = &v33[v38];
    uint64_t v41 = *((void *)v40 + 1);
    *(void *)uint64_t v39 = *(void *)v40;
    *((void *)v39 + 1) = v41;
    uint64_t v42 = *(int *)(v35 + 24);
    uint64_t v43 = &v34[v42];
    uint64_t v44 = &v33[v42];
    uint64_t v45 = *((void *)v44 + 1);
    *(void *)uint64_t v43 = *(void *)v44;
    *((void *)v43 + 1) = v45;
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v45);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v34, 0LL, 1LL, v35);
  }

  return a1;
}

uint64_t assignWithCopy for GenericMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 1sub_D878(v0 + 6) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for AppPunchout(0LL);
  int v12 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v9, 1LL, v11);
  int v13 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v10, 1LL, v11);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v11);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v14 = *(void *)(v11 - 8);
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v9, v11);
LABEL_6:
    uint64_t v15 = sub_494C(&qword_18A1A0);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(v14 + 24))(v9, v10, v11);
LABEL_7:
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  *uint64_t v17 = *v18;
  uint64_t v19 = v18[1];
  uint64_t v20 = v17[1];
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  uint64_t v21 = a3[10];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  *uint64_t v22 = *v23;
  uint64_t v24 = v23[1];
  uint64_t v25 = v22[1];
  v22[1] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  uint64_t v26 = a3[11];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (void *)(a2 + v26);
  *uint64_t v27 = *v28;
  uint64_t v29 = v28[1];
  uint64_t v30 = v27[1];
  v27[1] = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  uint64_t v31 = a3[12];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (void *)(a2 + v31);
  *uint64_t v32 = *v33;
  uint64_t v34 = v33[1];
  uint64_t v35 = v32[1];
  v32[1] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  uint64_t v36 = a3[13];
  uint64_t v37 = (void *)(a1 + v36);
  uint64_t v38 = (void *)(a2 + v36);
  *uint64_t v37 = *v38;
  uint64_t v39 = v38[1];
  uint64_t v40 = v37[1];
  v37[1] = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  uint64_t v41 = a3[14];
  uint64_t v42 = (char *)(a1 + v41);
  uint64_t v43 = (char *)(a2 + v41);
  uint64_t v44 = type metadata accessor for SnippetHeaderModel(0LL);
  int v45 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v42, 1LL, v44);
  int v46 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v43, 1LL, v44);
  if (!v45)
  {
    if (!v46)
    {
      uint64_t v58 = type metadata accessor for SpeakableString(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 24LL))(v42, v43, v58);
      uint64_t v59 = *(int *)(v44 + 20);
      uint64_t v60 = &v42[v59];
      uint64_t v61 = &v43[v59];
      *(void *)uint64_t v60 = *(void *)v61;
      uint64_t v62 = *((void *)v61 + 1);
      uint64_t v63 = *((void *)v60 + 1);
      *((void *)v60 + 1) = v62;
      swift_bridgeObjectRetain(v62);
      swift_bridgeObjectRelease(v63);
      uint64_t v64 = *(int *)(v44 + 24);
      uint64_t v65 = &v42[v64];
      uint64_t v66 = &v43[v64];
      *(void *)uint64_t v65 = *(void *)v66;
      uint64_t v67 = *((void *)v66 + 1);
      uint64_t v68 = *((void *)v65 + 1);
      *((void *)v65 + 1) = v67;
      swift_bridgeObjectRetain(v67);
      swift_bridgeObjectRelease(v68);
      return a1;
    }

    sub_26F04((uint64_t)v42, type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }

  if (v46)
  {
LABEL_12:
    uint64_t v56 = sub_494C(&qword_18A1A8);
    memcpy(v42, v43, *(void *)(*(void *)(v56 - 8) + 64LL));
    return a1;
  }

  uint64_t v47 = type metadata accessor for SpeakableString(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16LL))(v42, v43, v47);
  uint64_t v48 = *(int *)(v44 + 20);
  char v49 = &v42[v48];
  char v50 = &v43[v48];
  *(void *)char v49 = *(void *)v50;
  uint64_t v51 = *((void *)v50 + 1);
  *((void *)v49 + 1) = v51;
  uint64_t v52 = *(int *)(v44 + 24);
  char v53 = &v42[v52];
  uint64_t v54 = &v43[v52];
  *(void *)char v53 = *(void *)v54;
  uint64_t v55 = *((void *)v54 + 1);
  *((void *)v53 + 1) = v55;
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRetain(v55);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v42, 0LL, 1LL, v44);
  return a1;
}

uint64_t initializeWithTake for GenericMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for AppPunchout(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = sub_494C(&qword_18A1A0);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0LL, 1LL, v9);
  }

  uint64_t v11 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  uint64_t v12 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v1sub_D878(v0 + 2) = *(_OWORD *)(a2 + v12);
  uint64_t v13 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 3) = *(_OWORD *)(a2 + v13);
  uint64_t v14 = a3[13];
  uint64_t v15 = a3[14];
  uint64_t v16 = (char *)(a1 + v15);
  uint64_t v17 = (char *)(a2 + v15);
  *(_OWORD *)(a1 + v1sub_D878(v0 + 4) = *(_OWORD *)(a2 + v14);
  uint64_t v18 = type metadata accessor for SnippetHeaderModel(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v17, 1LL, v18))
  {
    uint64_t v19 = sub_494C(&qword_18A1A8);
    memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    uint64_t v20 = type metadata accessor for SpeakableString(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32LL))(v16, v17, v20);
    *(_OWORD *)&v16[*(int *)(v18 + 20)] = *(_OWORD *)&v17[*(int *)(v18 + 20)];
    *(_OWORD *)&v16[*(int *)(v18 + 24)] = *(_OWORD *)&v17[*(int *)(v18 + 24)];
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v16, 0LL, 1LL, v18);
  }

  return a1;
}

uint64_t assignWithTake for GenericMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 1sub_D878(v0 + 6) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for AppPunchout(0LL);
  int v12 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v9, 1LL, v11);
  int v13 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v10, 1LL, v11);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0LL, 1LL, v11);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v14 = *(void *)(v11 - 8);
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v9, v11);
LABEL_6:
    uint64_t v15 = sub_494C(&qword_18A1A0);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(v14 + 40))(v9, v10, v11);
LABEL_7:
  uint64_t v16 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (uint64_t *)(a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  uint64_t v21 = v17[1];
  *uint64_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  uint64_t v27 = v23[1];
  *uint64_t v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease(v27);
  uint64_t v28 = a3[11];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (uint64_t *)(a2 + v28);
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  uint64_t v33 = v29[1];
  *uint64_t v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease(v33);
  uint64_t v34 = a3[12];
  uint64_t v35 = (void *)(a1 + v34);
  uint64_t v36 = (uint64_t *)(a2 + v34);
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  uint64_t v39 = v35[1];
  *uint64_t v35 = v38;
  v35[1] = v37;
  swift_bridgeObjectRelease(v39);
  uint64_t v40 = a3[13];
  uint64_t v41 = (void *)(a1 + v40);
  uint64_t v42 = (uint64_t *)(a2 + v40);
  uint64_t v44 = *v42;
  uint64_t v43 = v42[1];
  uint64_t v45 = v41[1];
  *uint64_t v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease(v45);
  uint64_t v46 = a3[14];
  uint64_t v47 = (char *)(a1 + v46);
  uint64_t v48 = (char *)(a2 + v46);
  uint64_t v49 = type metadata accessor for SnippetHeaderModel(0LL);
  int v50 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v47, 1LL, v49);
  int v51 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v48, 1LL, v49);
  if (!v50)
  {
    if (!v51)
    {
      uint64_t v55 = type metadata accessor for SpeakableString(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 40LL))(v47, v48, v55);
      uint64_t v56 = *(int *)(v49 + 20);
      uint64_t v57 = &v47[v56];
      uint64_t v58 = &v48[v56];
      uint64_t v60 = *(void *)v58;
      uint64_t v59 = *((void *)v58 + 1);
      uint64_t v61 = *((void *)v57 + 1);
      *(void *)uint64_t v57 = v60;
      *((void *)v57 + 1) = v59;
      swift_bridgeObjectRelease(v61);
      uint64_t v62 = *(int *)(v49 + 24);
      uint64_t v63 = &v47[v62];
      uint64_t v64 = &v48[v62];
      uint64_t v66 = *(void *)v64;
      uint64_t v65 = *((void *)v64 + 1);
      uint64_t v67 = *((void *)v63 + 1);
      *(void *)uint64_t v63 = v66;
      *((void *)v63 + 1) = v65;
      swift_bridgeObjectRelease(v67);
      return a1;
    }

    sub_26F04((uint64_t)v47, type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }

  if (v51)
  {
LABEL_12:
    uint64_t v53 = sub_494C(&qword_18A1A8);
    memcpy(v47, v48, *(void *)(*(void *)(v53 - 8) + 64LL));
    return a1;
  }

  uint64_t v52 = type metadata accessor for SpeakableString(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32LL))(v47, v48, v52);
  *(_OWORD *)&v47[*(int *)(v49 + 20)] = *(_OWORD *)&v48[*(int *)(v49 + 20)];
  *(_OWORD *)&v47[*(int *)(v49 + 24)] = *(_OWORD *)&v48[*(int *)(v49 + 24)];
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v47, 0LL, 1LL, v49);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericMedCompletedLogModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_A889C);
}

uint64_t sub_A889C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(vsub_D878(v0 + 4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_494C(&qword_18A1A0);
    if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == (_DWORD)a2)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(int *)(a3 + 24);
    }

    else
    {
      uint64_t v9 = sub_494C(&qword_18A1A8);
      uint64_t v10 = *(int *)(a3 + 56);
    }

    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1 + v10, a2, v9);
  }

uint64_t storeEnumTagSinglePayload for GenericMedCompletedLogModel( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_A8948);
}

void sub_A8948(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + 1sub_D878(v0 + 6) = (a2 - 1);
    sub_1EB0C();
  }

  else
  {
    uint64_t v8 = sub_494C(&qword_18A1A0);
    if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(int *)(a4 + 24);
    }

    else
    {
      uint64_t v9 = sub_494C(&qword_18A1A8);
      uint64_t v10 = *(int *)(a4 + 56);
    }

    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1 + v10, a2, a2, v9);
  }

void sub_A89DC(uint64_t a1)
{
  v6[0] = &unk_13C500;
  v6[1] = &unk_13C518;
  sub_27758(319LL, &qword_18AB38, (uint64_t (*)(uint64_t))&type metadata accessor for AppPunchout);
  if (v3 <= 0x3F)
  {
    _OWORD v6[2] = *(void *)(v2 - 8) + 64LL;
    v6[3] = &unk_13C500;
    v6[4] = &unk_13C518;
    void v6[5] = &unk_13C500;
    v6[6] = &unk_13C530;
    v6[7] = &unk_13C530;
    v6[8] = &unk_13C530;
    v6[9] = &unk_13C530;
    sub_27758(319LL, (unint64_t *)&qword_18AB48, type metadata accessor for SnippetHeaderModel);
    if (v5 <= 0x3F)
    {
      v6[10] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 11LL, v6, a1 + 16);
    }
  }

uint64_t getEnumTagSinglePayload for GenericMedCompletedLogModel.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF6)
  {
    if (a2 + 10 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 10) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 11;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for GenericMedCompletedLogModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    LODWORD(vsub_D878(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_D878(v0 + 4) = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF5) {
    return ((uint64_t (*)(void))((char *)&loc_A8B84 + 4 * byte_13C430[v4]))();
  }
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_A8BB8 + 4 * byte_13C42B[v4]))();
}

uint64_t sub_A8BB8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_A8BC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xA8BC8LL);
  }
  return result;
}

uint64_t sub_A8BD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xA8BDCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 10;
  return result;
}

uint64_t sub_A8BE0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_A8BE8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GenericMedCompletedLogModel.CodingKeys()
{
  return &type metadata for GenericMedCompletedLogModel.CodingKeys;
}

unint64_t sub_A8C08()
{
  unint64_t result = qword_18DFC0;
  if (!qword_18DFC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_13C5E4, &type metadata for GenericMedCompletedLogModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18DFC0);
  }

  return result;
}

unint64_t sub_A8C48()
{
  unint64_t result = qword_18DFC8;
  if (!qword_18DFC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_13C554, &type metadata for GenericMedCompletedLogModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18DFC8);
  }

  return result;
}

unint64_t sub_A8C88()
{
  unint64_t result = qword_18DFD0[0];
  if (!qword_18DFD0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_13C57C, &type metadata for GenericMedCompletedLogModel.CodingKeys);
    atomic_store(result, qword_18DFD0);
  }

  return result;
}

uint64_t sub_A8CC4()
{
  return type metadata accessor for GenericMedCompletedLogModel(0LL);
}

uint64_t sub_A8CCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_A8CDC(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v2);
}

uint64_t sub_A8CEC(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, *(void *)(v1 - 168));
}

uint64_t sub_A8CF8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, void)@<X8>)
{
  return a2(a1, *(void *)(v2 - 168));
}

uint64_t sub_A8D00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_A8D10()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 8));
}

uint64_t sub_A8D18()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

void sub_A8D20(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)(v1 + a1);
  *uint64_t v2 = 0LL;
  v2[1] = 0LL;
}

uint64_t sub_A8D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a1);
}

uint64_t sub_A8D38(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_A928C();
  return Flow.deferToExecuteAsync(_:)(a1, a2, &type metadata for RequestOutsideDataRententionPolicyFlow, v4);
}

uint64_t sub_A8D78(uint64_t a1)
{
  v2[26] = a1;
  v2[27] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[28] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[29] = v4;
  v2[30] = sub_A5C0(v4);
  uint64_t v5 = type metadata accessor for DialogPhase(0LL);
  v2[31] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[32] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[33] = swift_task_alloc(v7);
  v2[34] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[35] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[36] = v9;
  v2[37] = sub_A5C0(v9);
  return swift_task_switch(sub_A8E20, 0LL, 0LL);
}

uint64_t sub_A8E20()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_18CCEC);
  *(void *)(v0 + 30sub_D878(v0 + 4) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_A8E78;
  return sub_765C4();
}

uint64_t sub_A8E78(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 304);
  *(void *)(*v2 + 31sub_D878(v0 + 2) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_A903C;
  }

  else
  {
    *(void *)(v4 + 320) = a1;
    uint64_t v6 = sub_A8EEC;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_A8EEC()
{
  uint64_t v1 = *(void **)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 296);
  uint64_t v4 = *(void *)(v0 + 272);
  uint64_t v17 = *(void *)(v0 + 280);
  uint64_t v5 = *(void *)(v0 + 256);
  uint64_t v6 = *(void *)(v0 + 264);
  uint64_t v7 = *(void *)(v0 + 248);
  uint64_t v8 = *(void **)(v0 + 216);
  static DialogPhase.error.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v4, v7);
  OutputGenerationManifest.init(dialogPhase:_:)(v6, sub_A633C, 0LL);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v7);
  id v9 = [v1 patternId];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  OutputGenerationManifest.responseViewId.setter(v10, v12);
  uint64_t v13 = v8[3];
  uint64_t v14 = v8[4];
  sub_500C(v8, v13);
  uint64_t v15 = dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)( v1,  v2,  v13,  v14);
  static ExecuteResponse.complete(next:)(v15);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v17);
  sub_A92C8();
  swift_task_dealloc(v15);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_A903C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 232);
  uint64_t v2 = *(void *)(v1 + 240);
  uint64_t v4 = *(void *)(v1 + 224);
  uint64_t v5 = Logger.wellness.unsafeMutableAddressor(a1);
  swift_beginAccess(v5, v1 + 176, 0LL, 0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  sub_A7E8();
  uint64_t v6 = sub_A7E8();
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = *(void *)(v1 + 312);
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v10 = 138412290;
    sub_A7E8();
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(void *)(v1 + 200) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 200, v1 + 208, v10 + 4, v10 + 12);
    *uint64_t v11 = v12;
    sub_A604();
    sub_A604();
    _os_log_impl(&dword_0, v7, v8, "Couldn't execute wellness#outsideRetentionPolicy pattern. Error: %@", v10, 0xCu);
    sub_494C(&qword_189CB8);
    swift_arrayDestroy(v11, 1LL);
    sub_5050((uint64_t)v11);
    sub_5050((uint64_t)v10);

    sub_A604();
  }

  else
  {
    sub_A604();
    sub_A604();
    sub_A604();
  }

  uint64_t v13 = *(_OWORD **)(v1 + 216);
  uint64_t v14 = *(void *)(v1 + 208);
  (*(void (**)(void, void))(*(void *)(v1 + 232) + 8LL))(*(void *)(v1 + 240), *(void *)(v1 + 224));
  sub_A13C(v13, (_OWORD *)(v1 + 16));
  sub_A178();
  static ExecuteResponse.complete<A>(next:)(v1 + 16);
  sub_A1B4((void *)(v1 + 16));
  sub_A92C8();
  swift_task_dealloc(v1 + 16);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

ValueMetadata *type metadata accessor for RequestOutsideDataRententionPolicyFlow()
{
  return &type metadata for RequestOutsideDataRententionPolicyFlow;
}

uint64_t sub_A923C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18DFEC);
  *(void *)(v1 + 1sub_D878(v0 + 6) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_A108;
  return sub_A8D78(a1);
}

unint64_t sub_A928C()
{
  unint64_t result = qword_18DFF0;
  if (!qword_18DFF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_13C6A8, &type metadata for RequestOutsideDataRententionPolicyFlow);
    atomic_store(result, (unint64_t *)&qword_18DFF0);
  }

  return result;
}

uint64_t sub_A92C8()
{
  return swift_task_dealloc(*(void *)(v0 + 296));
}

void sub_A92D8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC18WellnessFlowPlugin27WellnessDialogStringQuartet7Builder_first;
  sub_ABF4();
  sub_AA204(v1);
  sub_AA204(v0 + OBJC_IVAR____TtCC18WellnessFlowPlugin27WellnessDialogStringQuartet7Builder_second);
  sub_AA204(v0 + OBJC_IVAR____TtCC18WellnessFlowPlugin27WellnessDialogStringQuartet7Builder_third);
  sub_AA204(v0 + OBJC_IVAR____TtCC18WellnessFlowPlugin27WellnessDialogStringQuartet7Builder_fourth);
  sub_1EB0C();
}

uint64_t sub_A9340()
{
  return v0;
}

uint64_t sub_A9384()
{
  return sub_78D14((void (*)(void))sub_A9340);
}

unint64_t sub_A9390()
{
  return 0xD00000000000001CLL;
}

void sub_A93AC()
{
  *(void *)(v0 + 1sub_D878(v0 + 6) = 0LL;
  sub_79A50(v2, (uint64_t)v9);
  sub_79AC8();
  uint64_t v3 = sub_79AE0(OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_first);
  sub_79A50(v3, (uint64_t)v8);
  sub_79AC8();
  uint64_t v4 = sub_79AE0(OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_second);
  sub_79A50(v4, (uint64_t)v7);
  sub_79AC8();
  uint64_t v5 = sub_79AE0(OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_third);
  sub_79A50(v5, (uint64_t)v6);
  sub_79AC8();
  swift_release();
  sub_79AE0(OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_fourth);
  sub_1EB0C();
}

uint64_t sub_A9498@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v26 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v26 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v26 - v17;
  BOOL v19 = a1 == 0x7473726966LL && a2 == 0xE500000000000000LL;
  if (v19 || (sub_79A2C(0x7473726966LL, 0xE500000000000000LL) & 1) != 0)
  {
    sub_79734(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_first, (uint64_t)v18);
    sub_ABF4();
    sub_79A98((uint64_t)v18);
    if (!v19) {
      goto LABEL_31;
    }
    uint64_t v20 = (uint64_t)v18;
  }

  else
  {
    BOOL v21 = a1 == 0x646E6F636573LL && a2 == 0xE600000000000000LL;
    if (v21 || (sub_79A2C(0x646E6F636573LL, 0xE600000000000000LL) & 1) != 0)
    {
      sub_79734(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_second, (uint64_t)v16);
      sub_ABF4();
      sub_79A98((uint64_t)v16);
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = (uint64_t)v16;
    }

    else
    {
      BOOL v22 = a1 == 0x6472696874LL && a2 == 0xE500000000000000LL;
      if (v22 || (sub_79A2C(0x6472696874LL, 0xE500000000000000LL) & 1) != 0)
      {
        sub_79734(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_third, (uint64_t)v13);
        sub_ABF4();
        sub_79A98((uint64_t)v13);
        if (!v19) {
          goto LABEL_31;
        }
        uint64_t v20 = (uint64_t)v13;
      }

      else
      {
        if (a1 != 0x687472756F66LL || a2 != 0xE600000000000000LL)
        {
          uint64_t result = sub_79A2C(0x687472756F66LL, 0xE600000000000000LL);
          if ((result & 1) == 0) {
            goto LABEL_34;
          }
        }

        sub_79734(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_fourth, (uint64_t)v10);
        sub_ABF4();
        sub_79A98((uint64_t)v10);
        if (!v19)
        {
LABEL_31:
          sub_AA214();
          sub_79B20();
          return v25();
        }

        uint64_t v20 = (uint64_t)v10;
      }
    }
  }

  uint64_t result = sub_59A88(v20);
LABEL_34:
  *a3 = 0u;
  a3[1] = 0u;
  return result;
}

unint64_t sub_A9744(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_17B180, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_A9790(char a1)
{
  return *(void *)&aFirst_2[8 * a1];
}

void sub_A97B0(char *a1, char *a2)
{
}

void sub_A97BC()
{
}

uint64_t sub_A97C4(uint64_t a1)
{
  return sub_12BCF4(a1, *v1);
}

void sub_A97CC(uint64_t a1)
{
}

unint64_t sub_A97D4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_A9744(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_A9800@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_A9790(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_A9828()
{
  return sub_A9790(*v0);
}

uint64_t sub_A9830@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_A978C(a1);
  *a2 = result;
  return result;
}

void sub_A9854(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_A9860(uint64_t a1)
{
  unint64_t v2 = sub_AA028();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_A9888(uint64_t a1)
{
  unint64_t v2 = sub_AA028();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_A98B0()
{
  sub_79AB4(OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_first);
  sub_79AB4(OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_second);
  sub_79AB4(OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_third);
  sub_79AB4(OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_fourth);
  return v0;
}

uint64_t sub_A98FC()
{
  return sub_78D14((void (*)(void))sub_A98B0);
}

uint64_t sub_A9908()
{
  return type metadata accessor for WellnessDialogStringQuartet(0LL);
}

uint64_t type metadata accessor for WellnessDialogStringQuartet(uint64_t a1)
{
  return sub_70F74(a1, qword_18E020, (uint64_t)&nominal type descriptor for WellnessDialogStringQuartet);
}

void sub_A9924(uint64_t a1)
{
  uint64_t v4 = "\b";
  sub_671D8(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(v2 - 8) + 64LL;
    uint64_t v6 = v5;
    uint64_t v7 = v5;
    uint64_t v8 = v5;
    swift_updateClassMetadata2(a1, 256LL, 5LL, &v4, a1 + 80);
  }

uint64_t sub_A99A0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_494C(&qword_18E2A0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_6D44();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_500C(a1, v10);
  unint64_t v12 = sub_AA028();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for WellnessDialogStringQuartet.CodingKeys,  &type metadata for WellnessDialogStringQuartet.CodingKeys,  v12,  v10,  v11);
  uint64_t v13 = v3 + OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_first;
  char v18 = 0;
  type metadata accessor for SpeakableString(0LL);
  sub_2322C( &qword_18AAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString,  (uint64_t)&protocol conformance descriptor for SpeakableString);
  sub_79A14(v13, (uint64_t)&v18);
  if (!v2)
  {
    char v17 = 1;
    sub_79A14(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_second, (uint64_t)&v17);
    char v16 = 2;
    sub_79A14(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_third, (uint64_t)&v16);
    char v15 = 3;
    sub_79A14(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_fourth, (uint64_t)&v15);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_A9B1C(void *a1)
{
  uint64_t v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_A9BF4(a1);
  return v3;
}

uint64_t sub_A9B68()
{
  return type metadata accessor for WellnessDialogStringQuartet.Builder(0LL);
}

uint64_t type metadata accessor for WellnessDialogStringQuartet.Builder(uint64_t a1)
{
  return sub_70F74(a1, qword_18E138, (uint64_t)&nominal type descriptor for WellnessDialogStringQuartet.Builder);
}

void sub_A9B84(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = v4[0];
    _OWORD v4[2] = v4[0];
    v4[3] = v4[0];
    swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
  }

uint64_t sub_A9BF4(void *a1)
{
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)v25 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)v25 - v11;
  uint64_t v26 = sub_494C(&qword_18E290);
  uint64_t v13 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  sub_6D44();
  uint64_t v27 = a1;
  uint64_t v28 = v1;
  *(void *)(v1 + 1sub_D878(v0 + 6) = 0LL;
  uint64_t v15 = a1[3];
  uint64_t v14 = a1[4];
  sub_500C(a1, v15);
  unint64_t v16 = sub_AA028();
  uint64_t v17 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for WellnessDialogStringQuartet.CodingKeys,  &type metadata for WellnessDialogStringQuartet.CodingKeys,  v16,  v15,  v14);
  if (v17)
  {
    uint64_t v20 = v27;
    uint64_t v23 = v28;

    uint64_t v21 = type metadata accessor for WellnessDialogStringQuartet(0LL);
    swift_deallocPartialClassInstance( v23,  v21,  *(unsigned int *)(*(void *)v23 + 48LL),  *(unsigned __int16 *)(*(void *)v23 + 52LL));
    uint64_t v24 = v20;
  }

  else
  {
    v25[0] = v6;
    v25[1] = v9;
    uint64_t v29 = v13;
    uint64_t v18 = type metadata accessor for SpeakableString(0LL);
    char v33 = 0;
    sub_2322C( &qword_18AAC0,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString,  (uint64_t)&protocol conformance descriptor for SpeakableString);
    uint64_t v19 = v26;
    sub_AA220(v18, (uint64_t)&v33, v26, v18);
    uint64_t v23 = v28;
    sub_7977C((uint64_t)v12, v28 + OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_first);
    char v32 = 1;
    sub_AA220(v18, (uint64_t)&v32, v19, v18);
    sub_79B34(OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_second);
    char v31 = 2;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v18, &v31, v19, v18);
    sub_79B34(OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_third);
    char v30 = 3;
    sub_AA220(v18, (uint64_t)&v30, v19, v18);
    sub_AA1F0();
    sub_79B34(OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_fourth);
    uint64_t v24 = v27;
  }

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v24);
  return v23;
}

unint64_t sub_A9F4C()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_A9F68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_A9498(a1, a2, a3);
}

uint64_t sub_A9F88@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_A9B1C(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_A9FB0(void *a1)
{
  return sub_A99A0(a1);
}

uint64_t sub_A9FD0()
{
  return sub_2322C(&qword_18E280, type metadata accessor for WellnessDialogStringQuartet, (uint64_t)&unk_13C7A8);
}

uint64_t sub_A9FFC()
{
  return sub_2322C(&qword_18E288, type metadata accessor for WellnessDialogStringQuartet, (uint64_t)&unk_13C780);
}

unint64_t sub_AA028()
{
  unint64_t result = qword_18E298;
  if (!qword_18E298)
  {
    unint64_t result = swift_getWitnessTable(&unk_13C934, &type metadata for WellnessDialogStringQuartet.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18E298);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for WellnessDialogStringQuartet.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(vsub_D878(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_D878(v0 + 4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_AA0B0 + 4 * byte_13C705[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_AA0E4 + 4 * byte_13C700[v4]))();
}

uint64_t sub_AA0E4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_AA0EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xAA0F4LL);
  }
  return result;
}

uint64_t sub_AA100(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xAA108LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_AA10C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_AA114(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WellnessDialogStringQuartet.CodingKeys()
{
  return &type metadata for WellnessDialogStringQuartet.CodingKeys;
}

unint64_t sub_AA134()
{
  unint64_t result = qword_18E2A8;
  if (!qword_18E2A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_13C90C, &type metadata for WellnessDialogStringQuartet.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18E2A8);
  }

  return result;
}

unint64_t sub_AA174()
{
  unint64_t result = qword_18E2B0;
  if (!qword_18E2B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_13C844, &type metadata for WellnessDialogStringQuartet.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18E2B0);
  }

  return result;
}

unint64_t sub_AA1B4()
{
  unint64_t result = qword_18E2B8;
  if (!qword_18E2B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_13C86C, &type metadata for WellnessDialogStringQuartet.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18E2B8);
  }

  return result;
}

uint64_t sub_AA1F0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 88) + 8LL))(v1, v0);
}

uint64_t sub_AA204(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 1LL, 1LL, v1);
}

void *sub_AA214()
{
  v0[3] = v1;
  return sub_B76C(v0);
}

uint64_t sub_AA220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4);
}

void sub_AA22C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  id v5 = objc_allocWithZone((Class)type metadata accessor for UndoMedsIntentHandler(0LL));
  swift_bridgeObjectRetain(a1);
  id v6 = [v5 init];
  uint64_t v7 = type metadata accessor for MedsLoggingCorrectionsFlow(0LL);
  uint64_t v8 = sub_A72C(v7);
  uint64_t v9 = sub_AA434(a1, (uint64_t)v12, v11, v6, v8);
  a2[3] = v7;
  sub_A410(&qword_18E2C8, type metadata accessor for MedsLoggingCorrectionsFlow, (uint64_t)&unk_139010);
  a2[4] = v10;
  *a2 = v9;
}

void sub_AA300(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, a1);
  sub_A304(a3, (uint64_t)v21);
  sub_A304(v5, (uint64_t)v20);
  sub_A13C((_OWORD *)(v5 + 40), v19);
  id v14 = [objc_allocWithZone((Class)type metadata accessor for DeleteHealthSampleIntentHandler(0)) init];
  uint64_t v15 = type metadata accessor for LoggingCorrectionsFlow(0LL);
  uint64_t v16 = sub_A72C(v15);
  uint64_t v17 = sub_AA798((uint64_t)v12, a2, v21, v20, v19, v14, v16);
  a4[3] = v15;
  sub_A410(&qword_18E2C0, type metadata accessor for LoggingCorrectionsFlow, (uint64_t)&unk_13A290);
  a4[4] = v18;
  *a4 = v17;
}

uint64_t sub_AA434(uint64_t a1, uint64_t a2, _OWORD *a3, void *a4, uint64_t a5)
{
  uint64_t v45 = (void *)a2;
  id v46 = a4;
  uint64_t v44 = a3;
  uint64_t v7 = type metadata accessor for CorrectionsExitValue(0LL);
  uint64_t v41 = *(void *)(v7 - 8);
  uint64_t v42 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v43 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v39 - v14;
  uint64_t v16 = (void *)(a5 + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_kWellnessFlowPluginIdentifier);
  *uint64_t v16 = 0xD000000000000021LL;
  v16[1] = 0x8000000000145FC0LL;
  uint64_t v17 = a5 + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_correctionInput;
  uint64_t v18 = type metadata accessor for Input(0LL);
  uint64_t v19 = _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v17, 1LL, 1LL, v18);
  uint64_t v20 = Logger.wellness.unsafeMutableAddressor(v19);
  swift_beginAccess(v20, v48, 0LL, 0LL);
  uint64_t v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v21 = v40(v15, v20, v10);
  BOOL v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = a1;
    uint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl(&dword_0, v22, v23, "Initializing MedsLoggingCorrectionsFlow", v25, 2u);
    uint64_t v26 = v25;
    a1 = v24;
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  uint64_t v27 = *(void (**)(char *, uint64_t))(v11 + 8);
  v27(v15, v10);
  *(void *)(a5 + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_matchingMeds) = a1;
  uint64_t v28 = v45;
  sub_A304((uint64_t)v45, a5 + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_flowConfig);
  uint64_t v29 = v44;
  sub_A13C(v44, (_OWORD *)(a5 + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_provider));
  id v30 = v46;
  *(void *)(a5 + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_intentHandler) = v46;
  *(_BYTE *)(a5 + 1sub_D878(v0 + 6) = 0;
  strcpy(v9, "initial value");
  *((_WORD *)v9 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = -4864;
  uint64_t v32 = v41;
  uint64_t v31 = v42;
  (*(void (**)(char *, void, uint64_t))(v41 + 104))(v9, enum case for CorrectionsExitValue.failure(_:), v42);
  (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))( a5 + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_correctionsExitValue,  v9,  v31);
  swift_beginAccess(v20, v47, 0LL, 0LL);
  char v33 = v43;
  v40(v43, v20, v10);
  uint64_t v34 = swift_unknownObjectRetain(v30);
  uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v37 = 0;
    _os_log_impl(&dword_0, v35, v36, "Initialized LoggingCorrectionsFlow", v37, 2u);
    swift_slowDealloc(v37, -1LL, -1LL);
  }

  sub_D878(v29);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v28);
  v27(v33, v10);
  return a5;
}

uint64_t sub_AA798(uint64_t a1, int a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7)
{
  id v44 = a6;
  uint64_t v45 = a5;
  id v46 = a4;
  uint64_t v47 = a3;
  int v39 = a2;
  uint64_t v43 = a1;
  uint64_t v41 = type metadata accessor for CorrectionsExitValue(0LL);
  uint64_t v8 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v42 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v38 - v15;
  uint64_t v17 = (void *)(a7 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_kWellnessFlowPluginIdentifier);
  *uint64_t v17 = 0xD000000000000021LL;
  v17[1] = 0x8000000000145FC0LL;
  uint64_t v18 = a7 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_correctionInput;
  uint64_t v19 = type metadata accessor for Input(0LL);
  uint64_t v20 = _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v18, 1LL, 1LL, v19);
  uint64_t v21 = Logger.wellness.unsafeMutableAddressor(v20);
  swift_beginAccess(v21, v49, 0LL, 0LL);
  uint64_t v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v22 = v38(v16, v21, v11);
  os_log_type_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.debug.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl(&dword_0, v23, v24, "Initializing LoggingCorrectionsFlow", v25, 2u);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  uint64_t v40 = *(void (**)(char *, uint64_t))(v12 + 8);
  v40(v16, v11);
  uint64_t v26 = a7 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_uuidOfLastSavedSample;
  uint64_t v27 = type metadata accessor for UUID(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = v43;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v26, v43, v27);
  *(_BYTE *)(a7 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_lastSavedSampleHKIdentifier) = v39;
  sub_A304((uint64_t)v47, a7 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_lastSavedSampleIntent);
  sub_A304((uint64_t)v46, a7 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_flowConfig);
  sub_A13C(v45, (_OWORD *)(a7 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_provider));
  id v30 = v44;
  *(void *)(a7 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_intentHandler) = v44;
  *(_BYTE *)(a7 + 6sub_D878(v0 + 4) = 0;
  *(_OWORD *)(a7 + 3sub_D878(v0 + 2) = 0u;
  *(_OWORD *)(a7 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0u;
  *(_OWORD *)(a7 + 1sub_D878(v0 + 6) = 0u;
  strcpy(v10, "initial value");
  *((_WORD *)v10 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = -4864;
  uint64_t v31 = v41;
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for CorrectionsExitValue.failure(_:), v41);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))( a7 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_correctionsExitValue,  v10,  v31);
  swift_beginAccess(v21, v48, 0LL, 0LL);
  uint64_t v32 = v42;
  v38(v42, v21, v11);
  uint64_t v33 = swift_unknownObjectRetain(v30);
  uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
  os_log_type_t v35 = static os_log_type_t.debug.getter(v34);
  if (os_log_type_enabled(v34, v35))
  {
    os_log_type_t v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v36 = 0;
    _os_log_impl(&dword_0, v34, v35, "Initialized LoggingCorrectionsFlow", v36, 2u);
    swift_slowDealloc(v36, -1LL, -1LL);
  }

  sub_D878(v45);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v46);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v47);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v27);
  v40(v32, v11);
  return a7;
}

void *initializeWithTake for CorrectionsFlowProvider(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xC8uLL);
}

ValueMetadata *type metadata accessor for CorrectionsFlowProvider()
{
  return &type metadata for CorrectionsFlowProvider;
}

uint64_t _s18WellnessFlowPlugin23CorrectionsFlowProviderVwxx_0(void *a1)
{
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 20);
}

void _s18WellnessFlowPlugin23CorrectionsFlowProviderVwcp_0(_OWORD *a1, _OWORD *a2)
{
  __int128 v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 2sub_D878(v0 + 4) = v4;
  sub_AAE0C(*(double *)&v4);
  __int128 v5 = a2[4];
  a1[4] = v5;
  sub_AAE0C(*(double *)&v5);
  __int128 v6 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a1 + 10sub_D878(v0 + 4) = v6;
  sub_AAE0C(*(double *)&v6);
  __int128 v7 = a2[9];
  a1[9] = v7;
  sub_AAE0C(*(double *)&v7);
  __int128 v8 = *(_OWORD *)((char *)a2 + 184);
  *(_OWORD *)((char *)a1 + 18sub_D878(v0 + 4) = v8;
  sub_AAE0C(*(double *)&v8);
  sub_A890();
}

void _s18WellnessFlowPlugin23CorrectionsFlowProviderVwca_0(void *a1, void *a2)
{
}

void _s18WellnessFlowPlugin23CorrectionsFlowProviderVwta_0(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1sub_D878(v0 + 6) = v4;
  *(void *)(a1 + 3sub_D878(v0 + 2) = *(void *)(a2 + 32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + sub_D7EC(v0 + 16, v0 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 7sub_D878(v0 + 2) = *(void *)(a2 + 72);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 80));
  __int128 v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 9sub_D878(v0 + 6) = v5;
  *(void *)(a1 + 11sub_D878(v0 + 2) = *(void *)(a2 + 112);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 120));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 13sub_D878(v0 + 6) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 15sub_D878(v0 + 2) = *(void *)(a2 + 152);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 160));
  __int128 v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 17sub_D878(v0 + 6) = v6;
  *(void *)(a1 + 19sub_D878(v0 + 2) = *(void *)(a2 + 192);
  sub_A890();
}

uint64_t _s18WellnessFlowPlugin23CorrectionsFlowProviderVwet_0(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 200))
    {
      LODWORD(vsub_D878(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_D878(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(vsub_D878(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_AAD88(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 16_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0u;
    *(_OWORD *)(result + 15sub_D878(v0 + 2) = 0u;
    *(_OWORD *)(result + 13sub_D878(v0 + 6) = 0u;
    *(_OWORD *)(result + 18sub_D878(v0 + 4) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 10sub_D878(v0 + 4) = 0u;
    *(_OWORD *)(result + 8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0u;
    *(_OWORD *)(result + 7sub_D878(v0 + 2) = 0u;
    *(_OWORD *)(result + sub_D7EC(v0 + 16, v0 + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 2sub_D878(v0 + 4) = 0u;
    *(_OWORD *)(result + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 200) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 2sub_D878(v0 + 4) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 200) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for MedsCorrectionsFlowProvider()
{
  return &type metadata for MedsCorrectionsFlowProvider;
}

uint64_t sub_AAE0C(double a1)
{
  return (**(uint64_t (***)(void))(*(void *)&a1 - 8LL))();
}

uint64_t hasStatusOrSchedule(from:)(uint64_t result)
{
  if (result)
  {
    unint64_t result = dispatch thunk of UsoEntity_common_MedicationEvent.medicationSchedule.getter();
    if (result || (unint64_t result = dispatch thunk of UsoEntity_common_MedicationEvent.completionStatus.getter()) != 0)
    {
      swift_release(result);
      return 1LL;
    }
  }

  return result;
}

void isTimeframeToday(from:todayDate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v154 = a2;
  uint64_t v143 = type metadata accessor for UsoEntity_common_Date.DefinedValues(0LL);
  uint64_t v149 = *(void *)(v143 - 8);
  sub_D978();
  __chkstk_darwin(v4);
  sub_6D30();
  uint64_t v133 = v5;
  uint64_t v142 = sub_494C(&qword_18B120);
  sub_6D20();
  __chkstk_darwin(v6);
  sub_3751C();
  uint64_t v139 = v7;
  sub_A794();
  __chkstk_darwin(v8);
  uint64_t v136 = (uint64_t)&v132 - v9;
  sub_494C(&qword_18B128);
  sub_6D20();
  __chkstk_darwin(v10);
  sub_3751C();
  uint64_t v135 = v11;
  sub_A794();
  __chkstk_darwin(v12);
  sub_1C6B8();
  uint64_t v137 = v13;
  sub_A794();
  __chkstk_darwin(v14);
  sub_1C6B8();
  uint64_t v138 = v15;
  sub_A794();
  __chkstk_darwin(v16);
  sub_1C6B8();
  uint64_t v134 = v17;
  sub_A794();
  __chkstk_darwin(v18);
  sub_1C6B8();
  uint64_t v141 = v19;
  sub_A794();
  __chkstk_darwin(v20);
  uint64_t v140 = (uint64_t)&v132 - v21;
  uint64_t v147 = type metadata accessor for Logger(0LL);
  uint64_t v150 = *(void *)(v147 - 8);
  sub_D978();
  __chkstk_darwin(v22);
  sub_6D30();
  uint64_t v151 = v23;
  uint64_t v24 = type metadata accessor for Calendar.Component(0LL);
  uint64_t v145 = *(void *)(v24 - 8);
  uint64_t v146 = v24;
  sub_D978();
  __chkstk_darwin(v25);
  sub_6D30();
  uint64_t v153 = v26;
  uint64_t v152 = type metadata accessor for Calendar(0LL);
  uint64_t v144 = *(void *)(v152 - 8);
  sub_D978();
  __chkstk_darwin(v27);
  sub_6D44();
  uint64_t v28 = type metadata accessor for UsoEntity_common_DateTime.DefinedValues(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  sub_372F4();
  uint64_t v30 = sub_494C(&qword_18B150);
  sub_6D20();
  __chkstk_darwin(v31);
  sub_6D44();
  uint64_t v34 = v33 - v32;
  sub_494C(&qword_18B158);
  sub_6D20();
  uint64_t v36 = __chkstk_darwin(v35);
  uint64_t v38 = (char *)&v132 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = __chkstk_darwin(v36);
  uint64_t v41 = (char *)&v132 - v40;
  uint64_t v42 = __chkstk_darwin(v39);
  id v44 = (char *)&v132 - v43;
  uint64_t v148 = a1;
  if (a1 && dispatch thunk of UsoEntity_common_MedicationEvent.dateTime.getter(v42))
  {
    dispatch thunk of UsoEntity_common_DateTime.definedValue.getter();
    sub_3652C();
  }

  else
  {
    sub_ABEF4((uint64_t)v44, 1LL);
  }

  (*(void (**)(char *, void, uint64_t))(v29 + 104))( v41,  enum case for UsoEntity_common_DateTime.DefinedValues.common_DateTime_Now(_:),  v28);
  sub_ABEF4((uint64_t)v41, 0LL);
  uint64_t v45 = v34 + *(int *)(v30 + 48);
  sub_41850((uint64_t)v44, v34, &qword_18B158);
  sub_41850((uint64_t)v41, v45, &qword_18B158);
  sub_A614(v34, 1LL, v28);
  if (v51)
  {
    sub_A3758((uint64_t)v41);
    sub_A3758((uint64_t)v44);
    sub_A614(v45, 1LL, v28);
    if (v51)
    {
      id v46 = &qword_18B158;
      uint64_t v47 = v34;
      goto LABEL_72;
    }

    goto LABEL_13;
  }

  uint64_t v48 = sub_ABE70();
  sub_41850(v48, v49, v50);
  sub_A614(v45, 1LL, v28);
  if (v51)
  {
    sub_A674((uint64_t)v41);
    sub_A674((uint64_t)v44);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v38, v28);
LABEL_13:
    sub_A4A4(v34, &qword_18B150);
    goto LABEL_14;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(v2, v45, v28);
  sub_A410( &qword_18B160,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_common_DateTime.DefinedValues,  (uint64_t)&protocol conformance descriptor for UsoEntity_common_DateTime.DefinedValues);
  char v63 = dispatch thunk of static Equatable.== infix(_:_:)(v38, v2, v28, v62);
  uint64_t v64 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
  v64(v2, v28);
  sub_ABEBC((uint64_t)v41);
  sub_ABEBC((uint64_t)v44);
  v64((uint64_t)v38, v28);
  sub_ABEBC(v34);
  if ((v63 & 1) == 0)
  {
LABEL_14:
    uint64_t v52 = v148;
    if (v148)
    {
      uint64_t v53 = sub_ABE50();
      uint64_t v54 = v154;
      uint64_t v55 = v146;
      if (v53)
      {
        uint64_t v56 = sub_ABE8C();
        uint64_t v57 = sub_3652C();
        if (v56)
        {
          dispatch thunk of UsoEntity_common_Date.year.getter(v57);
          uint64_t v58 = sub_ABE18();
          uint64_t v56 = dispatch thunk of UsoEntity_common_Integer.integerValue.getter(v58);
          char v60 = v59;
          sub_3652C();
          int v61 = v60 & 1;
          goto LABEL_23;
        }
      }

      else
      {
        uint64_t v56 = 0LL;
      }

      int v61 = 1;
    }

    else
    {
      uint64_t v56 = 0LL;
      int v61 = 1;
      uint64_t v54 = v154;
      uint64_t v55 = v146;
    }

LABEL_73:
  sub_D8FC();
}

void isTimeframeNone(from:)(uint64_t a1)
{
  if (a1)
  {
    if (dispatch thunk of UsoEntity_common_MedicationEvent.dateTime.getter(a1)) {
      swift_release();
    }
    sub_A890();
  }

uint64_t getMedEventDateTime(from:)(uint64_t result)
{
  if (result) {
    return dispatch thunk of UsoEntity_common_MedicationEvent.dateTime.getter();
  }
  return result;
}

void getMedStatus(from:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UsoEntity_common_CompletionStatus.DefinedValues(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_6D44();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = sub_494C(&qword_18E2D0);
  sub_6D20();
  __chkstk_darwin(v9);
  sub_372F4();
  sub_494C(&qword_18E2D8);
  sub_6D20();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v27 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v27 - v18;
  if (a1 && dispatch thunk of UsoEntity_common_MedicationEvent.completionStatus.getter(v17))
  {
    dispatch thunk of UsoEntity_common_CompletionStatus.definedValue.getter();
    sub_3652C();
  }

  else
  {
    sub_7DF0C((uint64_t)v19, 1LL);
  }

  (*(void (**)(char *, void, uint64_t))(v4 + 104))( v16,  enum case for UsoEntity_common_CompletionStatus.DefinedValues.common_CompletionStatus_NotCompleted(_:),  v3);
  sub_7DF0C((uint64_t)v16, 0LL);
  uint64_t v20 = v1 + *(int *)(v8 + 48);
  sub_41850((uint64_t)v19, v1, &qword_18E2D8);
  sub_41850((uint64_t)v16, v20, &qword_18E2D8);
  sub_A614(v1, 1LL, v3);
  if (!v21)
  {
    sub_41850(v1, (uint64_t)v13, &qword_18E2D8);
    sub_A614(v20, 1LL, v3);
    if (!v21)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v7, v20, v3);
      sub_A410( &qword_18E2E0,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_common_CompletionStatus.DefinedValues,  (uint64_t)&protocol conformance descriptor for UsoEntity_common_CompletionStatus.DefinedValues);
      dispatch thunk of static Equatable.== infix(_:_:)(v13, v7, v3, v24);
      uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
      v25(v7, v3);
      sub_ABE58((uint64_t)v16);
      sub_ABE58((uint64_t)v19);
      uint64_t v26 = sub_ABE70();
      ((void (*)(uint64_t))v25)(v26);
      sub_ABE58(v1);
      goto LABEL_14;
    }

    sub_A674((uint64_t)v16);
    sub_A674((uint64_t)v19);
    uint64_t v22 = sub_ABE70();
    v23(v22);
LABEL_13:
    sub_A4A4(v1, &qword_18E2D0);
    goto LABEL_14;
  }

  sub_ABE58((uint64_t)v16);
  sub_ABE58((uint64_t)v19);
  sub_A614(v20, 1LL, v3);
  if (!v21) {
    goto LABEL_13;
  }
  sub_A4A4(v1, &qword_18E2D8);
LABEL_14:
  sub_D8FC();
}

uint64_t isTimeframeTodayOrNone(from:todayDate:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_372F4();
  if (a1 && dispatch thunk of UsoEntity_common_MedicationEvent.dateTime.getter(v5))
  {
    swift_release();
    sub_ABE24();
    isTimeframeToday(from:todayDate:)(a1, v1);
    char v7 = v6;
  }

  else
  {
    sub_ABE24();
    char v7 = 1;
  }

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  return v7 & 1;
}

void sub_ABD80(uint64_t (*a1)(void))
{
}

void sub_ABD9C(uint64_t (*a1)(void))
{
}

uint64_t sub_ABDB4@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sub_ABF00(a1);
  *a2 = result;
  return result;
}

uint64_t sub_ABDD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, a4);
}

uint64_t sub_ABDFC(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1LL, v1);
}

uint64_t sub_ABE18()
{
  return swift_release(v0);
}

uint64_t sub_ABE24()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v0);
}

uint64_t sub_ABE38()
{
  return v1(v0, *(void *)(v2 - 144));
}

uint64_t sub_ABE44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 116, v4, a3, a4);
}

uint64_t sub_ABE50()
{
  return dispatch thunk of UsoEntity_common_MedicationEvent.dateTime.getter();
}

void sub_ABE58(uint64_t a1)
{
}

uint64_t sub_ABE60()
{
  return Calendar.component(_:from:)(v0, *(void *)(v1 - 128));
}

uint64_t sub_ABE70()
{
  return v0;
}

uint64_t sub_ABE7C(uint64_t a1, uint64_t a2)
{
  return v3(*(void *)(v4 - 136), a2, v2);
}

uint64_t sub_ABE8C()
{
  return dispatch thunk of UsoEntity_common_DateTime.date.getter();
}

uint64_t sub_ABE94()
{
  return v2(v0, v1);
}

uint64_t sub_ABEA4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_ABEB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, a4);
}

void sub_ABEBC(uint64_t a1)
{
}

uint64_t sub_ABEC4(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 0LL, 1LL, v1);
}

void sub_ABEE8(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_ABEF4(uint64_t a1, uint64_t a2)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, 1LL, v2);
}

uint64_t sub_ABF00(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_ABF08()
{
  return static Calendar.current.getter();
}

uint64_t SingleActivitySummaryModel.totalValue.getter()
{
  return *(void *)v0;
}

uint64_t SingleActivitySummaryModel.totalValue.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t SingleActivitySummaryModel.goalValue.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t SingleActivitySummaryModel.goalValue.setter(uint64_t result)
{
  *(void *)(v1 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = result;
  return result;
}

uint64_t SingleActivitySummaryModel.date.getter()
{
  return swift_retain(*(void *)(v0 + 16));
}

uint64_t SingleActivitySummaryModel.date.setter(uint64_t a1)
{
  uint64_t result = swift_release(*(void *)(v1 + 16));
  *(void *)(v1 + 1sub_D878(v0 + 6) = a1;
  return result;
}

void SpecificMedCompletedLogModel.requestedMedName.getter()
{
}

void SingleActivitySummaryModel.dateLabel.setter()
{
  *(void *)(v1 + 2sub_D878(v0 + 4) = v2;
  *(void *)(v1 + 3sub_D878(v0 + 2) = v0;
  sub_1EB0C();
}

uint64_t (*SpecificMedCompletedLogModel.requestedMedName.modify())()
{
  return PhoneRingsSnippet.body.getter;
}

void SpecificMedCompletedLogModel.requestedMedSchedule.getter()
{
}

void SingleActivitySummaryModel.timeLabel.setter()
{
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v0;
  sub_1EB0C();
}

uint64_t (*SpecificMedCompletedLogModel.requestedMedSchedule.modify())()
{
  return PhoneRingsSnippet.body.getter;
}

void SingleActivitySummaryModel.unitLabel.getter()
{
}

void SingleActivitySummaryModel.unitLabel.setter()
{
  *(void *)(v1 + sub_D7EC(v0 + 16, v0 + 56) = v2;
  *(void *)(v1 + 6sub_D878(v0 + 4) = v0;
  sub_1EB0C();
}

uint64_t (*SingleActivitySummaryModel.unitLabel.modify())()
{
  return PhoneRingsSnippet.body.getter;
}

void SingleActivitySummaryModel.dataLabel.getter()
{
}

void SingleActivitySummaryModel.dataLabel.setter()
{
  *(void *)(v1 + 7sub_D878(v0 + 2) = v2;
  *(void *)(v1 + 80) = v0;
  sub_1EB0C();
}

uint64_t (*SingleActivitySummaryModel.dataLabel.modify())()
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t SingleActivitySummaryModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(sub_ADC78() + 44);
  return sub_AC124(v3, a1);
}

uint64_t type metadata accessor for SingleActivitySummaryModel(uint64_t a1)
{
  uint64_t result = qword_18E368;
  if (!qword_18E368) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SingleActivitySummaryModel);
  }
  return result;
}

uint64_t sub_AC124(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_494C(&qword_18A1A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t SingleActivitySummaryModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(sub_ADC78() + 44);
  return sub_AC198(a1, v3);
}

uint64_t sub_AC198(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_494C(&qword_18A1A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t (*SingleActivitySummaryModel.snippetHeaderModel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t SingleActivitySummaryModel.init(totalValue:goalValue:date:unitLabel:snippetHeaderModel:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)v48 - v18;
  uint64_t v20 = sub_ADC78();
  *(_OWORD *)(a5 + 2sub_D878(v0 + 4) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(void *)(a5 + 7sub_D878(v0 + 2) = 0LL;
  *(void *)(a5 + 80) = 0LL;
  uint64_t v21 = a5 + *(int *)(v20 + 44);
  uint64_t v22 = type metadata accessor for SnippetHeaderModel(0LL);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v21, 1LL, 1LL, v22);
  double v23 = trunc(a6);
  if (a6 > -9.22337204e18 && a6 < 9.22337204e18 && v23 == a6)
  {
    *(void *)a5 = (uint64_t)a6;
    if (a7 <= -9.22337204e18)
    {
      uint64_t v26 = 0LL;
      goto LABEL_18;
    }
  }

  else
  {
    uint64_t v26 = 0LL;
    *(void *)a5 = 0LL;
    if (a7 <= -9.22337204e18) {
      goto LABEL_18;
    }
  }

  BOOL v27 = trunc(a7) == a7 && a7 < 9.22337204e18;
  uint64_t v26 = (uint64_t)a7;
  if (!v27) {
    uint64_t v26 = 0LL;
  }
LABEL_18:
  *(void *)(a5 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v26;
  *(void *)(a5 + 1sub_D878(v0 + 6) = a1;
  *(void *)(a5 + sub_D7EC(v0 + 16, v0 + 56) = a2;
  *(void *)(a5 + 6sub_D878(v0 + 4) = a3;
  swift_retain();
  sub_8AC20(a4, v21);
  uint64_t v28 = *(void *)(a5 + 16);
  if (!v28)
  {
LABEL_21:
    uint64_t v32 = 0LL;
    goto LABEL_23;
  }

  uint64_t v29 = swift_retain();
  dispatch thunk of DialogCalendar.dateDescriptive.getter(v29);
  swift_release();
  uint64_t v30 = type metadata accessor for SpeakableString(0LL);
  uint64_t v31 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v19, 1LL, v30);
  if ((_DWORD)v31 == 1)
  {
    sub_279E0((uint64_t)v19, &qword_189D00);
    uint64_t v28 = 0LL;
    goto LABEL_21;
  }

  uint64_t v33 = SpeakableString.print.getter(v31);
  uint64_t v35 = v34;
  (*(void (**)(char *, uint64_t))(*(void *)(v30 - 8) + 8LL))(v19, v30);
  v48[0] = v33;
  v48[1] = v35;
  unint64_t v36 = sub_B6D8();
  uint64_t v28 = StringProtocol.capitalized.getter(&type metadata for String, v36);
  uint64_t v32 = v37;
  swift_bridgeObjectRelease();
LABEL_23:
  swift_bridgeObjectRelease();
  *(void *)(a5 + 2sub_D878(v0 + 4) = v28;
  *(void *)(a5 + 3sub_D878(v0 + 2) = v32;
  uint64_t v38 = *(void *)(a5 + 16);
  if (v38)
  {
    uint64_t v39 = swift_retain();
    dispatch thunk of DialogCalendar.timeDescriptive.getter(v39);
    swift_release();
    uint64_t v40 = type metadata accessor for SpeakableString(0LL);
    uint64_t v41 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v17, 1LL, v40);
    if ((_DWORD)v41 != 1)
    {
      uint64_t v38 = SpeakableString.print.getter(v41);
      uint64_t v44 = v45;
      uint64_t v46 = sub_36BE0();
      sub_72F7C(v46, &qword_18A1A8);
      (*(void (**)(char *, uint64_t))(*(void *)(v40 - 8) + 8LL))(v17, v40);
      goto LABEL_29;
    }

    uint64_t v42 = sub_36BE0();
    sub_72F7C(v42, &qword_18A1A8);
    sub_279E0((uint64_t)v17, &qword_189D00);
    uint64_t v38 = 0LL;
  }

  else
  {
    uint64_t v43 = sub_36BE0();
    sub_72F7C(v43, &qword_18A1A8);
  }

  uint64_t v44 = 0LL;
LABEL_29:
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a5 + 40) = v38;
  *(void *)(a5 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v44;
  return result;
}

uint64_t sub_AC4EC(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6C61566C61746F74LL && a2 == 0xEA00000000006575LL;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6C61566C61746F74LL, 0xEA00000000006575LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  else
  {
    BOOL v6 = a1 == 0x756C61566C616F67LL && a2 == 0xE900000000000065LL;
    if (v6
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x756C61566C616F67LL, 0xE900000000000065LL, a1, a2, 0LL) & 1) != 0)
    {
      swift_bridgeObjectRelease(a2);
      return 1LL;
    }

    else
    {
      BOOL v7 = a1 == 1702125924 && a2 == 0xE400000000000000LL;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)(1702125924LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(a2);
        return 2LL;
      }

      else
      {
        BOOL v8 = a1 == 0x6562614C65746164LL && a2 == 0xE90000000000006CLL;
        if (v8
          || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6562614C65746164LL, 0xE90000000000006CLL, a1, a2, 0LL) & 1) != 0)
        {
          swift_bridgeObjectRelease(a2);
          return 3LL;
        }

        else
        {
          BOOL v9 = a1 == 0x6562614C656D6974LL && a2 == 0xE90000000000006CLL;
          if (v9
            || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6562614C656D6974LL, 0xE90000000000006CLL, a1, a2, 0LL) & 1) != 0)
          {
            swift_bridgeObjectRelease(a2);
            return 4LL;
          }

          else
          {
            BOOL v10 = a1 == 0x6562614C74696E75LL && a2 == 0xE90000000000006CLL;
            if (v10
              || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6562614C74696E75LL, 0xE90000000000006CLL, a1, a2, 0LL) & 1) != 0)
            {
              swift_bridgeObjectRelease(a2);
              return 5LL;
            }

            else
            {
              BOOL v11 = a1 == 0x6562614C61746164LL && a2 == 0xE90000000000006CLL;
              if (v11
                || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6562614C61746164LL, 0xE90000000000006CLL, a1, a2, 0LL) & 1) != 0)
              {
                swift_bridgeObjectRelease(a2);
                return 6LL;
              }

              else if (a1 == 0xD000000000000012LL && a2 == 0x8000000000141630LL)
              {
                swift_bridgeObjectRelease(0x8000000000141630LL);
                return 7LL;
              }

              else
              {
                char v12 = _stringCompareWithSmolCheck(_:_:expecting:)( 0xD000000000000012LL,  0x8000000000141630LL,  a1,  a2,  0LL);
                swift_bridgeObjectRelease(a2);
                if ((v12 & 1) != 0) {
                  return 7LL;
                }
                else {
                  return 8LL;
                }
              }
            }
          }
        }
      }
    }
  }

uint64_t sub_AC7E4()
{
  return 8LL;
}

uint64_t sub_AC7EC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_AC824 + 4 * byte_13CA90[a1]))( 0xD000000000000012LL,  0x8000000000141630LL);
}

uint64_t sub_AC824()
{
  return 0x6C61566C61746F74LL;
}

uint64_t sub_AC840()
{
  return 0x756C61566C616F67LL;
}

uint64_t sub_AC860()
{
  return 1702125924LL;
}

uint64_t sub_AC870()
{
  return 0x6562614C65746164LL;
}

uint64_t sub_AC8B0()
{
  return sub_AC7EC(*v0);
}

uint64_t sub_AC8B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_AC4EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_AC8DC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_AC7E4();
  *a1 = result;
  return result;
}

uint64_t sub_AC900(uint64_t a1)
{
  unint64_t v2 = sub_ACB58();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_AC928(uint64_t a1)
{
  unint64_t v2 = sub_ACB58();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SingleActivitySummaryModel.encode(to:)(void *a1)
{
  BOOL v3 = v1;
  uint64_t v5 = sub_494C(&qword_18E2E8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_6D44();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_500C(a1, v10);
  unint64_t v12 = sub_ACB58();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SingleActivitySummaryModel.CodingKeys,  &type metadata for SingleActivitySummaryModel.CodingKeys,  v12,  v10,  v11);
  uint64_t v13 = *v3;
  LOBYTE(v2sub_D878(v0 + 2) = 0;
  sub_ADC64(v13);
  if (!v2)
  {
    uint64_t v14 = v3[1];
    LOBYTE(v2sub_D878(v0 + 2) = 1;
    sub_ADC64(v14);
    uint64_t v22 = v3[2];
    char v21 = 2;
    uint64_t v15 = type metadata accessor for DialogCalendar(0LL);
    sub_A410( &qword_18E2F8,  (uint64_t (*)(uint64_t))&type metadata accessor for DialogCalendar,  (uint64_t)&protocol conformance descriptor for DialogCalendar);
    sub_5E21C((uint64_t)&v22, (uint64_t)&v21, v5, v15);
    sub_ADC4C(v3[3], v3[4], 3);
    sub_ADC4C(v3[5], v3[6], 4);
    uint64_t v16 = v3[7];
    uint64_t v17 = v3[8];
    LOBYTE(v2sub_D878(v0 + 2) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v22, v5);
    sub_ADC4C(v3[9], v3[10], 6);
    uint64_t v18 = (uint64_t)v3 + *(int *)(type metadata accessor for SingleActivitySummaryModel(0LL) + 44);
    LOBYTE(v2sub_D878(v0 + 2) = 7;
    uint64_t v19 = type metadata accessor for SnippetHeaderModel(0LL);
    sub_A410( &qword_18AAA8,  type metadata accessor for SnippetHeaderModel,  (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    sub_5E21C(v18, (uint64_t)&v22, v5, v19);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

unint64_t sub_ACB58()
{
  unint64_t result = qword_18E2F0;
  if (!qword_18E2F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_13CC7C, &type metadata for SingleActivitySummaryModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18E2F0);
  }

  return result;
}

void SingleActivitySummaryModel.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = v5 - v4;
  uint64_t v28 = sub_494C(&qword_18E300);
  uint64_t v6 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  sub_6D44();
  uint64_t v9 = v8 - v7;
  type metadata accessor for SingleActivitySummaryModel(0LL);
  sub_6D20();
  __chkstk_darwin(v10);
  sub_6D44();
  uint64_t v13 = v12 - v11;
  *(_OWORD *)(v12 - v11 + 1sub_D878(v0 + 6) = 0u;
  uint64_t v14 = (void *)(v12 - v11 + 16);
  *(void *)(v13 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0LL;
  *(_OWORD *)(v13 + 3sub_D878(v0 + 2) = 0u;
  *(void *)(v13 + 7sub_D878(v0 + 2) = 0LL;
  *(void *)(v13 + 80) = 0LL;
  uint64_t v16 = v12 - v11 + *(int *)(v15 + 44);
  uint64_t v17 = type metadata accessor for SnippetHeaderModel(0LL);
  uint64_t v29 = v16;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v16, 1LL, 1LL, v17);
  uint64_t v19 = a1[3];
  uint64_t v18 = a1[4];
  sub_500C(a1, v19);
  unint64_t v20 = sub_ACB58();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SingleActivitySummaryModel.CodingKeys,  &type metadata for SingleActivitySummaryModel.CodingKeys,  v20,  v19,  v18);
  if (v30)
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
    swift_release();
    swift_bridgeObjectRelease(*(void *)(v13 + 32));
    swift_bridgeObjectRelease(*(void *)(v13 + 48));
    swift_bridgeObjectRelease(*(void *)(v13 + 80));
    sub_279E0(v16, &qword_18A1A8);
  }

  else
  {
    LOBYTE(v3sub_D878(v0 + 2) = 0;
    *(void *)uint64_t v13 = sub_ADC80((uint64_t)&v32);
    LOBYTE(v3sub_D878(v0 + 2) = 1;
    *(void *)(v13 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_ADC80((uint64_t)&v32);
    uint64_t v21 = type metadata accessor for DialogCalendar(0LL);
    char v31 = 2;
    sub_A410( &qword_18E308,  (uint64_t (*)(uint64_t))&type metadata accessor for DialogCalendar,  (uint64_t)&protocol conformance descriptor for DialogCalendar);
    sub_ADC94(v21, (uint64_t)&v31, v28, v21);
    *uint64_t v14 = v32;
    *(void *)(v13 + 2sub_D878(v0 + 4) = sub_ADC34(3);
    *(void *)(v13 + 3sub_D878(v0 + 2) = v22;
    *(void *)(v13 + 40) = sub_ADC34(4);
    *(void *)(v13 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v23;
    LOBYTE(v3sub_D878(v0 + 2) = 5;
    *(void *)(v13 + sub_D7EC(v0 + 16, v0 + 56) = KeyedDecodingContainer.decode(_:forKey:)(&v32, v28);
    *(void *)(v13 + 6sub_D878(v0 + 4) = v24;
    *(void *)(v13 + 7sub_D878(v0 + 2) = sub_ADC34(6);
    *(void *)(v13 + 80) = v25;
    LOBYTE(v3sub_D878(v0 + 2) = 7;
    sub_A410( &qword_18AAC8,  type metadata accessor for SnippetHeaderModel,  (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    sub_ADC94(v17, (uint64_t)&v32, v28, v17);
    sub_ADC8C(v9, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    sub_AC198(v26, v29);
    sub_ACEFC(v13, a2);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
    sub_26F04(v13, type metadata accessor for SingleActivitySummaryModel);
  }

uint64_t sub_ACEFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SingleActivitySummaryModel(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_ACF40()
{
}

void sub_ACF6C()
{
}

void sub_ACF98(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_ACFAC(void *a1)
{
  return SingleActivitySummaryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for SingleActivitySummaryModel( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v18 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain();
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v5 = a2[3];
    a1[2] = a2[2];
    a1[3] = v5;
    uint64_t v7 = a2[4];
    uint64_t v6 = a2[5];
    a1[4] = v7;
    a1[5] = v6;
    uint64_t v9 = a2[6];
    uint64_t v8 = a2[7];
    a1[6] = v9;
    a1[7] = v8;
    uint64_t v11 = a2[8];
    uint64_t v10 = a2[9];
    a1[8] = v11;
    a1[9] = v10;
    uint64_t v12 = a2[10];
    uint64_t v13 = *(int *)(a3 + 44);
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    a1[10] = v12;
    uint64_t v16 = type metadata accessor for SnippetHeaderModel(0LL);
    swift_retain();
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v15, 1LL, v16))
    {
      uint64_t v17 = sub_494C(&qword_18A1A8);
      memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      uint64_t v19 = type metadata accessor for SpeakableString(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16LL))(v14, v15, v19);
      uint64_t v20 = *(int *)(v16 + 20);
      uint64_t v21 = &v14[v20];
      uint64_t v22 = &v15[v20];
      uint64_t v23 = *((void *)v22 + 1);
      *(void *)uint64_t v21 = *(void *)v22;
      *((void *)v21 + 1) = v23;
      uint64_t v24 = *(int *)(v16 + 24);
      uint64_t v25 = &v14[v24];
      uint64_t v26 = &v15[v24];
      uint64_t v27 = *((void *)v26 + 1);
      *(void *)uint64_t v25 = *(void *)v26;
      *((void *)v25 + 1) = v27;
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRetain(v27);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v14, 0LL, 1LL, v16);
    }
  }

  return v3;
}

uint64_t destroy for SingleActivitySummaryModel(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for SnippetHeaderModel(0LL);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v4, 1LL, v5);
  if (!(_DWORD)result)
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v4, v7);
    swift_bridgeObjectRelease(*(void *)(v4 + *(int *)(v5 + 20) + 8));
    return swift_bridgeObjectRelease(*(void *)(v4 + *(int *)(v5 + 24) + 8));
  }

  return result;
}

uint64_t initializeWithCopy for SingleActivitySummaryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 1sub_D878(v0 + 6) = *(void *)(a2 + 16);
  *(void *)(a1 + 2sub_D878(v0 + 4) = v4;
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_D878(v0 + 2) = v6;
  *(void *)(a1 + 40) = v5;
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v8;
  *(void *)(a1 + sub_D7EC(v0 + 16, v0 + 56) = v7;
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 6sub_D878(v0 + 4) = v10;
  *(void *)(a1 + 7sub_D878(v0 + 2) = v9;
  uint64_t v11 = *(void *)(a2 + 80);
  uint64_t v12 = *(int *)(a3 + 44);
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  *(void *)(a1 + 80) = v11;
  uint64_t v15 = type metadata accessor for SnippetHeaderModel(0LL);
  swift_retain();
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v14, 1LL, v15))
  {
    uint64_t v16 = sub_494C(&qword_18A1A8);
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    uint64_t v17 = type metadata accessor for SpeakableString(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16LL))(v13, v14, v17);
    uint64_t v18 = *(int *)(v15 + 20);
    uint64_t v19 = &v13[v18];
    uint64_t v20 = &v14[v18];
    uint64_t v21 = *((void *)v20 + 1);
    *(void *)uint64_t v19 = *(void *)v20;
    *((void *)v19 + 1) = v21;
    uint64_t v22 = *(int *)(v15 + 24);
    uint64_t v23 = &v13[v22];
    uint64_t v24 = &v14[v22];
    uint64_t v25 = *((void *)v24 + 1);
    *(void *)uint64_t v23 = *(void *)v24;
    *((void *)v23 + 1) = v25;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v25);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v13, 0LL, 1LL, v15);
  }

  return a1;
}

void *assignWithCopy for SingleActivitySummaryModel(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  uint64_t v6 = a2[4];
  uint64_t v7 = a1[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[5] = a2[5];
  uint64_t v8 = a2[6];
  uint64_t v9 = a1[6];
  a1[6] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[7] = a2[7];
  uint64_t v10 = a2[8];
  uint64_t v11 = a1[8];
  a1[8] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[9] = a2[9];
  uint64_t v12 = a2[10];
  uint64_t v13 = a1[10];
  a1[10] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(int *)(a3 + 44);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for SnippetHeaderModel(0LL);
  int v18 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v15, 1LL, v17);
  int v19 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v16, 1LL, v17);
  if (!v18)
  {
    if (!v19)
    {
      uint64_t v31 = type metadata accessor for SpeakableString(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 24LL))(v15, v16, v31);
      uint64_t v32 = *(int *)(v17 + 20);
      uint64_t v33 = &v15[v32];
      uint64_t v34 = &v16[v32];
      *(void *)uint64_t v33 = *(void *)v34;
      uint64_t v35 = *((void *)v34 + 1);
      uint64_t v36 = *((void *)v33 + 1);
      *((void *)v33 + 1) = v35;
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRelease(v36);
      uint64_t v37 = *(int *)(v17 + 24);
      uint64_t v38 = &v15[v37];
      uint64_t v39 = &v16[v37];
      *(void *)uint64_t v38 = *(void *)v39;
      uint64_t v40 = *((void *)v39 + 1);
      uint64_t v41 = *((void *)v38 + 1);
      *((void *)v38 + 1) = v40;
      swift_bridgeObjectRetain(v40);
      swift_bridgeObjectRelease(v41);
      return a1;
    }

    sub_26F04((uint64_t)v15, type metadata accessor for SnippetHeaderModel);
    goto LABEL_6;
  }

  if (v19)
  {
LABEL_6:
    uint64_t v29 = sub_494C(&qword_18A1A8);
    memcpy(v15, v16, *(void *)(*(void *)(v29 - 8) + 64LL));
    return a1;
  }

  uint64_t v20 = type metadata accessor for SpeakableString(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16LL))(v15, v16, v20);
  uint64_t v21 = *(int *)(v17 + 20);
  uint64_t v22 = &v15[v21];
  uint64_t v23 = &v16[v21];
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v24 = *((void *)v23 + 1);
  *((void *)v22 + 1) = v24;
  uint64_t v25 = *(int *)(v17 + 24);
  uint64_t v26 = &v15[v25];
  uint64_t v27 = &v16[v25];
  *(void *)uint64_t v26 = *(void *)v27;
  uint64_t v28 = *((void *)v27 + 1);
  *((void *)v26 + 1) = v28;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v28);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v15, 0LL, 1LL, v17);
  return a1;
}

uint64_t initializeWithTake for SingleActivitySummaryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 1sub_D878(v0 + 6) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 2sub_D878(v0 + 4) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + sub_D7EC(v0 + 16, v0 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v4 = *(int *)(a3 + 44);
  uint64_t v5 = (char *)(a1 + v4);
  uint64_t v6 = (char *)(a2 + v4);
  *(_OWORD *)(a1 + 7sub_D878(v0 + 2) = *(_OWORD *)(a2 + 72);
  uint64_t v7 = type metadata accessor for SnippetHeaderModel(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v6, 1LL, v7))
  {
    uint64_t v8 = sub_494C(&qword_18A1A8);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64LL));
  }

  else
  {
    uint64_t v9 = type metadata accessor for SpeakableString(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v5, v6, v9);
    *(_OWORD *)&v5[*(int *)(v7 + 20)] = *(_OWORD *)&v6[*(int *)(v7 + 20)];
    *(_OWORD *)&v5[*(int *)(v7 + 24)] = *(_OWORD *)&v6[*(int *)(v7 + 24)];
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v5, 0LL, 1LL, v7);
  }

  return a1;
}

uint64_t assignWithTake for SingleActivitySummaryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 1sub_D878(v0 + 6) = *(void *)(a2 + 16);
  swift_release();
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 2sub_D878(v0 + 4) = *(void *)(a2 + 24);
  *(void *)(a1 + 3sub_D878(v0 + 2) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a1 + 64);
  *(void *)(a1 + sub_D7EC(v0 + 16, v0 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 6sub_D878(v0 + 4) = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 80);
  uint64_t v13 = *(void *)(a1 + 80);
  *(void *)(a1 + 7sub_D878(v0 + 2) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v12;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(int *)(a3 + 44);
  uint64_t v15 = (char *)(a1 + v14);
  uint64_t v16 = (char *)(a2 + v14);
  uint64_t v17 = type metadata accessor for SnippetHeaderModel(0LL);
  int v18 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v15, 1LL, v17);
  int v19 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v16, 1LL, v17);
  if (!v18)
  {
    if (!v19)
    {
      uint64_t v23 = type metadata accessor for SpeakableString(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 40LL))(v15, v16, v23);
      uint64_t v24 = *(int *)(v17 + 20);
      uint64_t v25 = &v15[v24];
      uint64_t v26 = &v16[v24];
      uint64_t v28 = *(void *)v26;
      uint64_t v27 = *((void *)v26 + 1);
      uint64_t v29 = *((void *)v25 + 1);
      *(void *)uint64_t v25 = v28;
      *((void *)v25 + 1) = v27;
      swift_bridgeObjectRelease(v29);
      uint64_t v30 = *(int *)(v17 + 24);
      uint64_t v31 = &v15[v30];
      uint64_t v32 = &v16[v30];
      uint64_t v34 = *(void *)v32;
      uint64_t v33 = *((void *)v32 + 1);
      uint64_t v35 = *((void *)v31 + 1);
      *(void *)uint64_t v31 = v34;
      *((void *)v31 + 1) = v33;
      swift_bridgeObjectRelease(v35);
      return a1;
    }

    sub_26F04((uint64_t)v15, type metadata accessor for SnippetHeaderModel);
    goto LABEL_6;
  }

  if (v19)
  {
LABEL_6:
    uint64_t v21 = sub_494C(&qword_18A1A8);
    memcpy(v15, v16, *(void *)(*(void *)(v21 - 8) + 64LL));
    return a1;
  }

  uint64_t v20 = type metadata accessor for SpeakableString(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32LL))(v15, v16, v20);
  *(_OWORD *)&v15[*(int *)(v17 + 20)] = *(_OWORD *)&v16[*(int *)(v17 + 20)];
  *(_OWORD *)&v15[*(int *)(v17 + 24)] = *(_OWORD *)&v16[*(int *)(v17 + 24)];
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v15, 0LL, 1LL, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for SingleActivitySummaryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_AD844);
}

uint64_t sub_AD844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 64);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(vsub_D878(v0 + 4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_494C(&qword_18A1A8);
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1 + *(int *)(a3 + 44), a2, v8);
  }

uint64_t storeEnumTagSinglePayload for SingleActivitySummaryModel( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_AD8C8);
}

void sub_AD8C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + 6sub_D878(v0 + 4) = (a2 - 1);
    sub_1EB0C();
  }

  else
  {
    uint64_t v7 = sub_494C(&qword_18A1A8);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1 + *(int *)(a4 + 44), a2, a2, v7);
  }

void sub_AD930(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  _OWORD v4[2] = "\b";
  v4[3] = &unk_13CB88;
  void v4[4] = &unk_13CB88;
  void v4[5] = &unk_13CBA0;
  void v4[6] = &unk_13CB88;
  sub_AD9CC(319LL);
  if (v3 <= 0x3F)
  {
    void v4[7] = *(void *)(v2 - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 8LL, v4, a1 + 16);
  }

void sub_AD9CC(uint64_t a1)
{
  if (!qword_18AB48)
  {
    uint64_t v2 = type metadata accessor for SnippetHeaderModel(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_18AB48);
    }
  }

uint64_t getEnumTagSinglePayload for SingleActivitySummaryModel.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 7) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for SingleActivitySummaryModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(vsub_D878(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_D878(v0 + 4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_ADAF4 + 4 * byte_13CA9D[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_ADB28 + 4 * byte_13CA98[v4]))();
}

uint64_t sub_ADB28(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_ADB30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xADB38LL);
  }
  return result;
}

uint64_t sub_ADB44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xADB4CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 7;
  return result;
}

uint64_t sub_ADB50(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_ADB58(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SingleActivitySummaryModel.CodingKeys()
{
  return &type metadata for SingleActivitySummaryModel.CodingKeys;
}

unint64_t sub_ADB78()
{
  unint64_t result = qword_18E3B8;
  if (!qword_18E3B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_13CC54, &type metadata for SingleActivitySummaryModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18E3B8);
  }

  return result;
}

unint64_t sub_ADBB8()
{
  unint64_t result = qword_18E3C0;
  if (!qword_18E3C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_13CBC4, &type metadata for SingleActivitySummaryModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18E3C0);
  }

  return result;
}

unint64_t sub_ADBF8()
{
  unint64_t result = qword_18E3C8;
  if (!qword_18E3C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_13CBEC, &type metadata for SingleActivitySummaryModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18E3C8);
  }

  return result;
}

uint64_t sub_ADC34@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v2 - 7sub_D878(v0 + 2) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v2 - 72, v1);
}

uint64_t sub_ADC4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(_BYTE *)(v4 - 7sub_D878(v0 + 2) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 72, v3);
}

uint64_t sub_ADC64(uint64_t a1)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, v2 - 72, v1);
}

uint64_t sub_ADC78()
{
  return type metadata accessor for SingleActivitySummaryModel(0LL);
}

uint64_t sub_ADC80(uint64_t a1)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t sub_ADC8C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_ADC94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_ADCA0@<X0>( __int128 *a1@<X0>, __int128 *a2@<X1>, const void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v13 = v12 - v11;
  sub_20004(a1, a5);
  sub_20004(a2, a5 + 40);
  memcpy((void *)(a5 + 80), a3, 0xA0uLL);
  *(void *)(a5 + sub_A304(v0 - 176, v0 - 240) = a4;
  strcpy((char *)(a5 + 248), "* ");
  type metadata accessor for WellnessLoggingCATsSimple(0LL);
  sub_A768();
  uint64_t result = sub_AAF8(v13);
  *(void *)(a5 + 2sub_D7EC(v0 + 16, v0 + 56) = result;
  return result;
}

uint64_t sub_ADD58@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_AA80();
  sub_A72C(v2);
  v5[3] = v2;
  v5[4] = &protocol witness table for ResponseFactory;
  v5[0] = sub_A9C8();
  uint64_t v3 = type metadata accessor for PatternFlowProvider(0LL);
  sub_A72C(v3);
  uint64_t result = PatternFlowProvider.init(outputPublisher:responseGenerator:)(v6, v5);
  a1[3] = v3;
  a1[4] = (uint64_t)&protocol witness table for PatternFlowProvider;
  *a1 = result;
  return result;
}

BOOL sub_ADDDC(uint64_t a1)
{
  uint64_t v2 = sub_A8E4();
  uint64_t v57 = *(void *)(v2 - 8);
  uint64_t v58 = v2;
  sub_D978();
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v56 = (char *)v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  BOOL v7 = (char *)v53 - v6;
  uint64_t v8 = type metadata accessor for Calendar(0LL);
  uint64_t v54 = *(void *)(v8 - 8);
  uint64_t v55 = v8;
  sub_D978();
  __chkstk_darwin(v9);
  sub_6D44();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = type metadata accessor for DateComponents(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_27AD8();
  sub_494C(&qword_189BA0);
  sub_D978();
  __chkstk_darwin(v15);
  sub_6D44();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = type metadata accessor for DateInterval(0LL);
  uint64_t v59 = *(void *)(v19 - 8);
  sub_D978();
  __chkstk_darwin(v20);
  sub_6D44();
  uint64_t v23 = v22 - v21;
  sub_98DB4(a1, v18, &qword_189BA0);
  uint64_t v24 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v18, 1LL, v19);
  if ((_DWORD)v24 == 1)
  {
    sub_36A94(v24, &qword_189BA0);
    return 1LL;
  }

  v53[0] = v14;
  v53[1] = v13;
  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 32))(v23, v18, v19);
  static Calendar.current.getter(v26);
  sub_494C(&qword_18E418);
  uint64_t v27 = sub_B25E4();
  uint64_t v28 = *(void *)(type metadata accessor for Calendar.Component(v27) - 8);
  uint64_t v29 = *(void *)(v28 + 72);
  uint64_t v30 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v31 = (v30 + 32) & ~v30;
  uint64_t v32 = swift_allocObject(v18, v31 + 3 * v29, v30 | 7);
  *(_OWORD *)(v32 + 1sub_D878(v0 + 6) = xmmword_13A2F0;
  uint64_t v33 = v32 + v31;
  sub_B25DC(v33, enum case for Calendar.Component.year(_:));
  sub_B25DC(v33 + v29, enum case for Calendar.Component.month(_:));
  sub_B25DC(v33 + 2 * v29, enum case for Calendar.Component.day(_:));
  sub_12AD20();
  uint64_t v35 = v34;
  uint64_t v36 = DateInterval.start.getter(v34);
  uint64_t v37 = v56;
  DateInterval.end.getter(v36);
  Calendar.dateComponents(_:from:to:)(v35, v7, v37);
  swift_bridgeObjectRelease(v35);
  uint64_t v38 = v58;
  uint64_t v39 = *(void (**)(char *, uint64_t))(v57 + 8);
  v39(v37, v58);
  v39(v7, v38);
  uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 8))(v12, v55);
  uint64_t v41 = DateComponents.day.getter(v40);
  if ((v42 & 1) != 0)
  {
    sub_B24A4();
    uint64_t v52 = *(uint64_t (**)(uint64_t, uint64_t))(v59 + 8);
LABEL_14:
    sub_D970(v23, v52);
    return 0LL;
  }

  uint64_t v43 = v41;
  uint64_t v44 = v59;
  uint64_t v45 = DateComponents.month.getter();
  if ((v46 & 1) != 0)
  {
    sub_B24A4();
    uint64_t v52 = *(uint64_t (**)(uint64_t, uint64_t))(v44 + 8);
    goto LABEL_14;
  }

  uint64_t v47 = v45;
  uint64_t v48 = DateComponents.year.getter();
  char v50 = v49;
  sub_B24A4();
  sub_D970(v23, *(uint64_t (**)(uint64_t, uint64_t))(v44 + 8));
  if ((v50 & 1) != 0) {
    return 0LL;
  }
  return !(v48 | v47) && v43 < 2;
}

uint64_t sub_AE10C()
{
  uint64_t v1 = sub_D984();
  v0[5] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[6] = v2;
  v0[7] = sub_A5C0(v2);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_AE14C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 48);
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = Logger.wellness.unsafeMutableAddressor(a1);
  sub_A5DC(v4, v1 + 16);
  sub_37290(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  sub_23374();
  os_log_type_t v5 = sub_A898();
  if (sub_A988(v5))
  {
    uint64_t v6 = (_WORD *)sub_A5E8(2LL);
    sub_366C0(v6);
    sub_A940(&dword_0, v7, v8, "Scribe not supported. Cannot log spotting.");
    sub_5050(v3);
  }

  uint64_t v9 = sub_372A0();
  v10(v9);
  sub_A67C();
  return (*(uint64_t (**)(void))(v1 + 8))(0LL);
}

uint64_t LogPeriodFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_89388();
  return Flow.deferToExecuteAsync(_:)(a1, a2, &type metadata for LogPeriodFlow, v4);
}

uint64_t sub_AE244(uint64_t a1)
{
  v2[78] = v1;
  v2[77] = a1;
  uint64_t v3 = type metadata accessor for CATOption(0LL);
  v2[79] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  v2[80] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[81] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[82] = swift_task_alloc(v6);
  v2[83] = swift_task_alloc(v6);
  return swift_task_switch(sub_AE2D8, 0LL, 0LL);
}

uint64_t sub_AE2D8()
{
  uint64_t v1 = v0[81];
  uint64_t v2 = v0[80];
  id v3 = sub_AE848();
  v0[84] = v3;
  uint64_t v4 = Logger.wellness.unsafeMutableAddressor(v3);
  v0[85] = v4;
  sub_A5DC(v4, (uint64_t)(v0 + 71));
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
  v0[86] = v5;
  sub_464D8(v5);
  id v6 = v3;
  sub_A86C();
  os_log_type_t v7 = sub_AB70();
  if (sub_A634(v7))
  {
    uint64_t v8 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v9 = (void *)sub_A5E8(8LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    v0[76] = v6;
    id v10 = v6;
    sub_B24F8((uint64_t)v10, v11, v12, v13, v14, v15, v16, v17, (uint64_t)(v0 + 76));
    *uint64_t v9 = v6;

    sub_DA24(&dword_0, (os_log_s *)v3, (os_log_type_t)v2, "Executing intent: %@", v8);
    sub_494C(&qword_189CB8);
    sub_B245C();
    sub_5050((uint64_t)v9);
    sub_5050((uint64_t)v8);
  }

  else
  {

    id v3 = v6;
  }

  uint64_t v18 = v0[81];
  uint64_t v19 = v0[78];

  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8);
  v0[87] = v20;
  sub_A7A0(v20);
  uint64_t v21 = *(void **)(v19 + 240);
  v0[7] = v0 + 74;
  v0[2] = v0;
  v0[3] = sub_AE4AC;
  v0[67] = swift_continuation_init(v0 + 2, 0LL);
  v0[63] = _NSConcreteStackBlock;
  v0[64] = 0x40000000LL;
  v0[65] = sub_7ED0;
  v0[66] = &unk_17F3F0;
  [v21 handleLogPeriod:v6 completion:v0 + 63];
  sub_371E0();
  return swift_continuation_await(v22);
}

uint64_t sub_AE4AC()
{
  return sub_A5D0();
}

uint64_t sub_AE4E4()
{
  uint64_t v1 = *(void (**)(uint64_t, os_log_s *, uint64_t))(v0 + 688);
  uint64_t v2 = *(os_log_s **)(v0 + 680);
  uint64_t v3 = *(void *)(v0 + 656);
  uint64_t v4 = *(void *)(v0 + 640);
  uint64_t v5 = *(void **)(v0 + 592);
  *(void *)(v0 + 70sub_D878(v0 + 4) = v5;
  sub_A5DC((uint64_t)v2, v0 + 544);
  v1(v3, v2, v4);
  id v6 = v5;
  sub_A86C();
  os_log_type_t v7 = sub_AB70();
  if (sub_A634(v7))
  {
    uint64_t v8 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v9 = (void *)sub_A5E8(8LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    *(void *)(v0 + 600) = v6;
    id v10 = v6;
    sub_B24F8((uint64_t)v10, v11, v12, v13, v14, v15, v16, v17, v0 + 600);
    *uint64_t v9 = v6;

    sub_DA24(&dword_0, v2, (os_log_type_t)v1, "Received intent response: %@", v8);
    sub_494C(&qword_189CB8);
    sub_B245C();
    sub_5050((uint64_t)v9);
    sub_5050((uint64_t)v8);
  }

  else
  {

    uint64_t v2 = (os_log_s *)v6;
  }

  uint64_t v18 = sub_37044();
  uint64_t v19 = (*(uint64_t (**)(uint64_t))((char *)&stru_20.maxprot + (swift_isaMask & *v6)))(v18);
  if (v19 != 4)
  {
    if (v19 == 101)
    {
      uint64_t v20 = *(void **)(v0 + 672);
      uint64_t v21 = *(void *)(v0 + 632);
      uint64_t v22 = *(void *)(v0 + 624);
      char v23 = *(_BYTE *)(v22 + 248);
      sub_A304(v22 + 40, v0 + 88);
      sub_A13C((_OWORD *)(v22 + 80), (_OWORD *)(v0 + 128));
      uint64_t v24 = sub_AA80();
      sub_A72C(v24);
      uint64_t v25 = sub_A9C8();
      *(void *)(v0 + 31sub_D878(v0 + 2) = v24;
      *(void *)(v0 + 320) = &protocol witness table for ResponseFactory;
      *(void *)(v0 + 28_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v25;
      type metadata accessor for WellnessCATsSimple(0LL);
      sub_A768();
      uint64_t v26 = sub_AAF8(v21);
      type metadata accessor for WellnessCATs(0LL);
      sub_A768();
      uint64_t v27 = CATWrapper.__allocating_init(options:globals:)(v21, 0LL);
      *(_BYTE *)(v0 + 80) = v23;
      *(void *)(v0 + 32_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v26;
      *(void *)(v0 + 33sub_D878(v0 + 6) = v27;
      sub_A294();
      static ExecuteResponse.complete<A>(next:)(v0 + 80);

      sub_A2D0((void *)(v0 + 80));
    }

    else
    {
      uint64_t v31 = *(void **)(v0 + 672);
      uint64_t v32 = *(void *)(v0 + 624);
      FlowTaskLogger.taskFailed()();
      sub_A13C((_OWORD *)(v32 + 80), (_OWORD *)(v0 + 344));
      sub_A178();
      static ExecuteResponse.complete<A>(next:)(v0 + 344);

      sub_A1B4((void *)(v0 + 344));
    }

    sub_B2568();
    sub_A78C();
    sub_A67C();
    sub_371E0();
    __asm { BR              X0 }
  }

  FlowTaskLogger.taskCompleted()();
  uint64_t v28 = (void *)swift_task_alloc(dword_18E404);
  *(void *)(v0 + 71sub_D878(v0 + 2) = v28;
  *uint64_t v28 = v0;
  v28[1] = sub_AE7B4;
  sub_371E0();
  return sub_AEA24(v29);
}

uint64_t sub_AE7B4()
{
  *(void *)(v1 + 720) = v0;
  sub_36900(v2);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_AE7F0()
{
  uint64_t v1 = *(void **)(v0 + 704);
  uint64_t v2 = *(void **)(v0 + 672);
  static ExecuteResponse.complete(next:)(*(void *)(v0 + 720));
  swift_release();

  sub_B2568();
  sub_A78C();
  sub_A67C();
  return sub_B2410(*(uint64_t (**)(void))(v0 + 8));
}

id sub_AE848()
{
  uint64_t v2 = v0;
  sub_494C(&qword_189BA0);
  sub_D978();
  __chkstk_darwin(v3);
  sub_6D44();
  uint64_t v6 = v5 - v4;
  sub_494C(&qword_189CE8);
  sub_D978();
  __chkstk_darwin(v7);
  sub_27AD8();
  id v8 = [objc_allocWithZone((Class)type metadata accessor for LogPeriodIntent(0)) init];
  sub_500C(v0, v0[3]);
  sub_202B4();
  uint64_t v9 = type metadata accessor for DateInterval(0LL);
  uint64_t v10 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1LL, v9);
  if ((_DWORD)v10 == 1)
  {
    sub_279E0(v6, &qword_189BA0);
    uint64_t v11 = sub_A8E4();
    sub_A66C(v1, 1LL, v12, v11);
    Class isa = 0LL;
  }

  else
  {
    DateInterval.start.getter(v10);
    uint64_t v14 = sub_373E0();
    v15(v14);
    uint64_t v16 = sub_A8E4();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 0LL, 1LL, v16);
    Class isa = 0LL;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1LL, v16) != 1)
    {
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      sub_D970(v1, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8LL));
    }
  }

  [v8 setDate:isa];

  uint64_t v17 = v2[3];
  uint64_t v18 = v2[4];
  sub_500C(v2, v17);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 64))(v17, v18);
  objc_msgSend(v8, "setFlow:", PeriodFlow.init(rawDoubleValue:)(v19, v20 & 1));
  return v8;
}

uint64_t sub_AEA24(uint64_t a1)
{
  v2[147] = v1;
  v2[146] = a1;
  uint64_t v3 = type metadata accessor for DialogPhase(0LL);
  v2[148] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[149] = v4;
  v2[150] = sub_D8CC(v4);
  v2[151] = sub_A5B8();
  uint64_t v5 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[152] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[153] = v6;
  v2[154] = sub_A5C0(v6);
  uint64_t v7 = sub_D984();
  v2[155] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[156] = v8;
  v2[157] = sub_D8CC(v8);
  v2[158] = sub_A5B8();
  v2[159] = sub_A5B8();
  v2[160] = sub_A5B8();
  v2[161] = sub_A5B8();
  v2[162] = sub_A5B8();
  v2[163] = sub_A5B8();
  v2[164] = sub_A5B8();
  uint64_t v9 = sub_494C(&qword_18A1A8);
  v2[165] = sub_A5C0(*(void *)(v9 - 8));
  uint64_t v10 = type metadata accessor for CycleTrackingLogModel(0LL);
  v2[166] = v10;
  v2[167] = sub_D8CC(*(void *)(v10 - 8));
  v2[168] = sub_A5B8();
  v2[169] = sub_A5B8();
  uint64_t v11 = type metadata accessor for SnippetHeaderModel(0LL);
  v2[170] = v11;
  v2[171] = sub_A5C0(*(void *)(v11 - 8));
  uint64_t v12 = sub_494C(&qword_189D00);
  v2[172] = sub_D8CC(*(void *)(v12 - 8));
  v2[173] = sub_A5B8();
  v2[174] = sub_A5B8();
  uint64_t v13 = sub_494C(&qword_189CF8);
  v2[175] = sub_D8CC(*(void *)(v13 - 8));
  v2[176] = sub_A5B8();
  uint64_t v14 = sub_494C(&qword_189CE8);
  v2[177] = sub_D8CC(*(void *)(v14 - 8));
  v2[178] = sub_A5B8();
  uint64_t v15 = sub_A8E4();
  v2[179] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v2[180] = v16;
  v2[181] = sub_D8CC(v16);
  v2[182] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_AEBC4()
{
  id v2 = [*(id *)(v0 + 1168) date];
  if (v2)
  {
    uint64_t v4 = v2;
    uint64_t v5 = *(void *)(v0 + 1448);
    uint64_t v6 = *(void *)(v0 + 1440);
    uint64_t v7 = *(void *)(v0 + 1432);
    uint64_t v8 = *(void *)(v0 + 1424);
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v2);

    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
    v9(v8, v5, v7);
    sub_B24C4();
    if (!v15)
    {
      uint64_t v10 = *(void *)(v0 + 1176);
      v9(*(void *)(v0 + 1456), *(void *)(v0 + 1424), *(void *)(v0 + 1432));
      uint64_t v11 = *(void *)(v10 + 32);
      sub_B25F8();
      unsigned __int16 v12 = sub_B24B4(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 24));
      if (v12 != 270)
      {
        uint64_t v13 = sub_10F1C0(v12);
        BOOL v15 = v13 == 0x676E6974746F7073LL && v14 == 0xE800000000000000LL;
        if (v15)
        {
          swift_bridgeObjectRelease(0xE800000000000000LL);
        }

        else
        {
          char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, 0x676E6974746F7073LL, 0xE800000000000000LL, 0LL);
          sub_249D4();
          if ((v16 & 1) == 0) {
            goto LABEL_9;
          }
        }

        uint64_t v17 = (unsigned __int8 *)(*(void *)(v0 + 1176) + 249LL);
LABEL_17:
        uint64_t v141 = *(void *)(v0 + 1456);
        uint64_t v142 = *(void *)(v0 + 1440);
        uint64_t v143 = *(void *)(v0 + 1432);
        uint64_t v144 = *(void *)(v0 + 1416);
        uint64_t v145 = *v17;
        *(_BYTE *)(v0 + 1650) = v145;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v142 + 16))(v144, v141, v143);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v144, 0LL, 1LL, v143);
        sub_F4F10(v145, v144);
        sub_279E0(v144, &qword_189CE8);
        *(void *)(v0 + 760) = &type metadata for WellnessFeatureFlagsKey;
        *(void *)(v0 + 76_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_354B0();
        *(_BYTE *)(v0 + 73sub_D878(v0 + 6) = 4;
        LOBYTE(v14_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 3) = isFeatureEnabled(_:)(v0 + 736);
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 736));
        if ((v143 & 1) != 0)
        {
          uint64_t v146 = *(void *)(v0 + 1456);
          uint64_t v147 = *(void **)(v0 + 1168);
          type metadata accessor for DialogCalendar(0LL);
          *(void *)(v0 + 146sub_D878(v0 + 4) = static DialogCalendar.make(date:)(v146);
          *(void *)(v0 + 147sub_D878(v0 + 2) = [v147 flow];
          uint64_t v148 = (void *)swift_task_alloc(dword_18B6EC);
          *(void *)(v0 + 1480) = v148;
          *uint64_t v148 = v0;
          v148[1] = sub_AF050;
          return sub_B246C(0x617254656C637963LL, 0xED0000676E696B63LL);
        }

        else
        {
          uint64_t v149 = *(void *)(v0 + 1456);
          uint64_t v150 = *(void *)(v0 + 1408);
          uint64_t v151 = *(void *)(v0 + 1176);
          uint64_t v152 = *(void *)(v0 + 1168);
          sub_A304(v151 + 160, v0 + 816);
          sub_500C((void *)(v0 + 816), *(void *)(v0 + 840));
          uint64_t v153 = (void *)swift_task_alloc(48LL);
          *(void *)(v0 + 162sub_D878(v0 + 4) = v153;
          v153[2] = v151;
          v153[3] = v149;
          v153[4] = v152;
          v153[5] = v150;
          uint64_t v154 = (void *)swift_task_alloc(dword_18EC34);
          *(void *)(v0 + 163sub_D878(v0 + 2) = v154;
          *uint64_t v154 = v0;
          v154[1] = sub_B025C;
          return sub_E1B74(0, (uint64_t)sub_B21A0, (uint64_t)v153);
        }
      }

LABEL_9:
      uint64_t v17 = (unsigned __int8 *)(*(void *)(v0 + 1176) + 248LL);
      goto LABEL_17;
    }
  }

  else
  {
    sub_A66C(*(void *)(v0 + 1424), 1LL, v3, *(void *)(v0 + 1432));
  }

  uint64_t v18 = (void *)(v0 + 904);
  uint64_t v19 = *(void *)(v0 + 1248);
  uint64_t v20 = *(void *)(v0 + 1240);
  uint64_t v21 = *(void **)(v0 + 1168);
  sub_279E0(*(void *)(v0 + 1424), &qword_189CE8);
  uint64_t v23 = Logger.wellness.unsafeMutableAddressor(v22);
  sub_A5DC(v23, v0 + 904);
  sub_37290(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 16));
  id v24 = v21;
  sub_23374();
  os_log_type_t v25 = sub_A898();
  BOOL v26 = sub_232DC(v25);
  uint64_t v27 = *(void **)(v0 + 1168);
  if (v26)
  {
    uint64_t v28 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v29 = (void *)sub_A5E8(8LL);
    *(_DWORD *)uint64_t v28 = 138412290;
    *(void *)(v0 + 110sub_D878(v0 + 4) = v27;
    id v30 = v27;
    sub_B2510();
    *uint64_t v29 = v27;

    sub_DA24( &dword_0,  (os_log_s *)(v0 + 904),  (os_log_type_t)v20,  "LogPeriodIntentResponse missing date param: %@",  v28);
    sub_494C(&qword_189CB8);
    sub_A81C((uint64_t)v29);
    sub_5050((uint64_t)v29);
    sub_5050((uint64_t)v28);
  }

  else
  {

    uint64_t v18 = *(void **)(v0 + 1168);
  }

  uint64_t v31 = *(void *)(v0 + 1264);
  uint64_t v32 = *(void *)(v0 + 1248);
  uint64_t v33 = *(void *)(v0 + 1176);

  sub_D970(v31, *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8));
  sub_36590((_OWORD *)(v33 + 80));
  sub_A178();
  sub_B25C0();
  sub_36784();
  sub_B2328();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  uint64_t v34 = sub_A910();
  uint64_t v42 = sub_AAD8(v34, v35, v36, v37, v38, v39, v40, v41, v155, v168);
  uint64_t v50 = sub_A888(v42, v43, v44, v45, v46, v47, v48, v49, v156, v169, v181);
  uint64_t v58 = sub_A854(v50, v51, v52, v53, v54, v55, v56, v57, v157, v170, v182, v193);
  uint64_t v66 = sub_A84C(v58, v59, v60, v61, v62, v63, v64, v65, v158, v171, v183, v194, v204);
  uint64_t v74 = sub_A844(v66, v67, v68, v69, v70, v71, v72, v73, v159, v172, v184, v195, v205, v214);
  uint64_t v82 = sub_A83C(v74, v75, v76, v77, v78, v79, v80, v81, v160, v173, v185, v196, v206, v215, v223);
  uint64_t v90 = sub_A95C(v82, v83, v84, v85, v86, v87, v88, v89, v161, v174, v186, v197, v207, v216, v224, v231);
  uint64_t v98 = sub_A954(v90, v91, v92, v93, v94, v95, v96, v97, v162, v175, v187, v198, v208, v217, v225, v232, v238);
  uint64_t v106 = sub_A938( v98,  v99,  v100,  v101,  v102,  v103,  v104,  v105,  v163,  v176,  v188,  v199,  v209,  v218,  v226,  v233,  v239,  v244);
  uint64_t v114 = sub_A930( v106,  v107,  v108,  v109,  v110,  v111,  v112,  v113,  v164,  v177,  v189,  v200,  v210,  v219,  v227,  v234,  v240,  v245,  v249);
  uint64_t v122 = sub_A928( v114,  v115,  v116,  v117,  v118,  v119,  v120,  v121,  v165,  v178,  v190,  v201,  v211,  v220,  v228,  v235,  v241,  v246,  v250,  v253);
  uint64_t v130 = sub_A920( v122,  v123,  v124,  v125,  v126,  v127,  v128,  v129,  v166,  v179,  v191,  v202,  v212,  v221,  v229,  v236,  v242,  v247,  v251,  v254,  v256);
  sub_36374( v130,  v131,  v132,  v133,  v134,  v135,  v136,  v137,  v167,  v180,  v192,  v203,  v213,  v222,  v230,  v237,  v243,  v248,  v252,  v255,  v257,  v258);
  sub_367FC();
  sub_A918();
  uint64_t v138 = sub_AC14();
  return sub_B23F4(v138, v139);
}

  sub_398E0(0LL, (v36 & 0xC000000000000001LL) == 0, v36);
  if ((v36 & 0xC000000000000001LL) != 0) {
    uint64_t v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v36);
  }
  else {
    uint64_t v40 = *(id *)(v36 + 32);
  }
  uint64_t v41 = v40;
  sub_249D4();
  sub_DA6D8(v41, (SEL *)&selRef_medicationID);
  if (!v43)
  {

    uint64_t v38 = v104;
    goto LABEL_33;
  }

  uint64_t v44 = v43;
  uint64_t v111 = v42;
  uint64_t v45 = v39 & 1;
  sub_A5DC((uint64_t)v110, (uint64_t)v114);
  uint64_t v46 = v101;
  uint64_t v47 = sub_DDF94((uint64_t)v101);
  Logger.logObject.getter(v47);
  uint64_t v48 = sub_AB70();
  if (sub_232DC(v48))
  {
    uint64_t v49 = (_DWORD *)sub_A5E8(8LL);
    *uint64_t v49 = 67109120;
    LODWORD(v11sub_D878(v0 + 2) = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, (char *)&v112 + 4, v49 + 1, v49 + 2);
    sub_DE648(&dword_0, v50, v51, "PromptForValueFlowAsync returned: %{BOOL}d");
    sub_5050((uint64_t)v49);
  }

  sub_DED3C((uint64_t)v101);
  if (!v45)
  {
    sub_1EBF4();
    uint64_t v52 = v110;
    sub_A5DC((uint64_t)v110, (uint64_t)&v112);
    uint64_t v53 = v99;
    sub_DDF94(v99);
    sub_AB5C();
    uint64_t v54 = sub_A898();
    if (sub_232DC(v54))
    {
      uint64_t v55 = (_WORD *)sub_A5E8(2LL);
      sub_DE478(v55);
      sub_232EC(&dword_0, (os_log_s *)v46, (os_log_type_t)v28, v98, v52);
      sub_5050((uint64_t)v52);
    }

    sub_DED3C(v53);
    uint64_t v56 = sub_DEB74();
    uint64_t v65 = 7LL;
    goto LABEL_37;
  }

  sub_DA6D8(v41, (SEL *)&selRef_scheduleID);
  uint64_t v71 = v70;
  uint64_t v73 = v72;
  uint64_t v74 = [v41 strength];
  uint64_t v75 = v74;
  if (v74)
  {
    [v74 doubleValue];
    uint64_t v77 = v76;
  }

  else
  {
    uint64_t v77 = 0LL;
  }

  uint64_t v78 = v111;
  uint64_t v79 = [v41 strengthUnit];
  if (v79)
  {
    uint64_t v80 = v79;
    uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
    uint64_t v83 = v82;
  }

  else
  {

    uint64_t v81 = 0LL;
    uint64_t v83 = 0LL;
  }

  uint64_t v84 = *(void *)(v6 + 224);
  uint64_t v85 = *(void *)(v6 + 232);
  uint64_t v86 = *(void *)(v6 + 240);
  uint64_t v87 = *(void *)(v6 + 248);
  uint64_t v88 = *(void *)(v6 + 256);
  uint64_t v89 = *(void *)(v6 + 264);
  uint64_t v90 = *(void *)(v6 + 272);
  uint64_t v91 = *(void *)(v6 + 280);
  uint64_t v92 = *(_BYTE *)(v6 + 288);
  *(void *)(v6 + 22sub_D878(v0 + 4) = v71;
  *(void *)(v6 + 23sub_D878(v0 + 2) = v73;
  *(void *)(v6 + sub_A304(v0 - 176, v0 - 240) = v78;
  *(void *)(v6 + 24_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v44;
  *(void *)(v6 + 2sub_D7EC(v0 + 16, v0 + 56) = v77;
  *(void *)(v6 + 26sub_D878(v0 + 4) = v75 == 0LL;
  *(void *)(v6 + 27sub_D878(v0 + 2) = v81;
  *(void *)(v6 + 280) = v83;
  *(_BYTE *)(v6 + 28_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v100;
  sub_3561C(v84, v85, v86, v87, v88, v89, v90, v91, v92);
LABEL_38:
  sub_A744();
}

  sub_5F0AC();
  sub_370B0();
  uint64_t v17 = *(void *)(v0 + 3360);
  uint64_t v18 = *(void *)(v0 + 3352);
  uint64_t v19 = *(void *)(v0 + 3320);
  uint64_t v20 = sub_249D4();
  uint64_t v21 = sub_5693C(v20, "fullPrint");
  sub_5F15C();
  uint64_t v22 = sub_F1A10();
  id v24 = v23;

  String.toSpeakableString.getter(v22, v24);
  sub_369F4();
  v16(v17, v18, v19);
  if ((*(_BYTE *)(v0 + 3104) & 1) != 0 || (*(_BYTE *)(v0 + 3120) & 1) != 0)
  {
    os_log_type_t v25 = *(void *)(v0 + 3376);
    BOOL v26 = *(void *)(v0 + 3360);
    swift_bridgeObjectRelease();
    sub_F1980(v26);
    sub_F1980(v25);
LABEL_35:
    uint64_t v27 = *(void **)(v0 + 3912);
    goto LABEL_36;
  }

  uint64_t v28 = *(double *)(v0 + 3096);
  v724 = v0 + 3184;
  v718 = (uint64_t *)(v0 + 3176);
  uint64_t v29 = *(double *)(v0 + 3112);
  sub_A5DC(*(void *)(v0 + 3840), v0 + 2792);
  sub_F1B18();
  id v30 = sub_BAFCC();
  v31(v30);
  uint64_t v32 = (os_log_s *)sub_23374();
  uint64_t v33 = static os_log_type_t.debug.getter();
  uint64_t v34 = os_log_type_enabled(v32, v33);
  uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v0 + 3856);
  uint64_t v36 = *(void *)(v0 + 3552);
  v721 = *(void *)(v0 + 3488);
  uint64_t v37 = *(void *)(v0 + 3344);
  uint64_t v38 = *(void *)(v0 + 3328);
  if (v34)
  {
    v709 = *(void *)(v0 + 3320);
    v711 = *(void *)(v0 + 3552);
    uint64_t v39 = (uint8_t *)sub_A5E8(12LL);
    v707 = v32;
    uint64_t v40 = sub_A5E8(32LL);
    v726 = v40;
    *(_DWORD *)uint64_t v39 = 136315138;
    uint64_t v41 = SpeakableString.print.getter(v40);
    *(void *)(v0 + 316_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_39178(v41, v42, &v726);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3168, v718, v39 + 4, v39 + 12);
    swift_bridgeObjectRelease();
    uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v43(v37, v709);
    sub_DA24(&dword_0, v707, v33, "#GetActivitySummaryFlow: Ring unit label is: %s", v39);
    sub_A81C(v40);
    sub_5050(v40);
    sub_5050((uint64_t)v39);

    v35(v711, v721);
  }

  else
  {
    uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v43(*(void *)(v0 + 3344), *(void *)(v0 + 3320));

    v35(v36, v721);
  }

  *(void *)(v0 + 392_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v43;
  uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 3848);
  uint64_t v45 = *(void *)(v0 + 3840);
  uint64_t v46 = *(void *)(v0 + 3544);
  uint64_t v47 = *(void *)(v0 + 3488);
  sub_A5DC(v45, v0 + 2816);
  v44(v46, v45, v47);
  sub_BAFCC();
  sub_F1C0C();
  uint64_t v48 = (os_log_s *)sub_23374();
  uint64_t v49 = static os_log_type_t.debug.getter();
  uint64_t v50 = os_log_type_enabled(v48, v49);
  uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v0 + 3856);
  uint64_t v52 = *(void *)(v0 + 3544);
  uint64_t v53 = *(void *)(v0 + 3488);
  uint64_t v54 = *(void *)(v0 + 3336);
  uint64_t v55 = *(void *)(v0 + 3320);
  if (v50)
  {
    v716 = *(void *)(v0 + 3488);
    v714 = *(void (**)(uint64_t, uint64_t))(v0 + 3856);
    uint64_t v56 = (uint8_t *)sub_A5E8(12LL);
    v712 = v52;
    uint64_t v57 = sub_A5E8(32LL);
    v726 = v57;
    *(_DWORD *)uint64_t v56 = 136315138;
    uint64_t v58 = SpeakableString.print.getter(v57);
    *v718 = sub_F1A54(v58, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v718, v724, v56 + 4, v56 + 12);
    sub_B25F0();
    v43(v54, v55);
    sub_DA24(&dword_0, v48, v49, "#GetActivitySummaryFlow: Ring label is: %s", v56);
    sub_A81C(v57);
    sub_5050(v57);
    sub_5050((uint64_t)v56);

    v714(v712, v716);
  }

  else
  {
    v43(*(void *)(v0 + 3336), *(void *)(v0 + 3320));

    v51(v52, v53);
  }

  v710 = *(void *)(v0 + 3840);
  v713 = *(os_log_s **)(v0 + 3536);
  v717 = *(void *)(v0 + 3488);
  v719 = *(void (**)(os_log_s *, uint64_t, uint64_t))(v0 + 3848);
  uint64_t v60 = *(void *)(v0 + 3312);
  uint64_t v61 = *(void *)(v0 + 3288);
  v708 = *(void *)(v0 + 3280);
  v715 = *(void *)(v0 + 3272);
  uint64_t v62 = *(void *)(v0 + 3248);
  v699 = *(void *)(v0 + 3240);
  v703 = *(void *)(v0 + 3232);
  uint64_t v63 = *(void *)(v0 + 3224);
  uint64_t v64 = *(_BYTE *)(v0 + 585);
  sub_F1C0C();
  uint64_t v65 = sub_2A044(v64);
  uint64_t v67 = v66;
  uint64_t v68 = sub_27CC8(v64);
  uint64_t v69 = (unint64_t *)(v60 + *(int *)(v61 + 20));
  *uint64_t v69 = v65;
  v69[1] = v67;
  uint64_t v70 = (uint64_t *)(v60 + *(int *)(v61 + 24));
  *uint64_t v70 = v68;
  v70[1] = v71;
  sub_F1C00();
  uint64_t v75 = sub_90668(v72, v73, v74, v28);
  sub_F1C00();
  uint64_t v79 = sub_90668(v76, v77, v78, v29);
  sub_249D4();
  uint64_t v80 = type metadata accessor for DialogCalendar(0LL);
  Date.init()(v80);
  uint64_t v81 = static DialogCalendar.make(date:)(v62);
  uint64_t v82 = (*(uint64_t (**)(uint64_t, uint64_t))(v699 + 8))(v62, v703);
  uint64_t v83 = SpeakableString.print.getter(v82);
  uint64_t v85 = v84;
  sub_BA7DC(v60, v63, type metadata accessor for SnippetHeaderModel);
  sub_41A28(v63);
  SingleActivitySummaryModel.init(totalValue:goalValue:date:unitLabel:snippetHeaderModel:)( v81,  v83,  v85,  v63,  v708,  v75,  v79);
  sub_A5DC(v710, v0 + 2840);
  v719(v713, v710, v717);
  sub_BA7DC(v708, v715, type metadata accessor for SingleActivitySummaryModel);
  Logger.logObject.getter(v86);
  uint64_t v87 = sub_AB70();
  uint64_t v88 = sub_A988(v87);
  uint64_t v89 = *(void (**)(uint64_t, uint64_t))(v0 + 3856);
  uint64_t v90 = *(void *)(v0 + 3536);
  uint64_t v91 = *(void *)(v0 + 3488);
  uint64_t v92 = *(void *)(v0 + 3272);
  if (v88)
  {
    uint64_t v93 = *(void *)(v0 + 3264);
    uint64_t v94 = *(void *)(v0 + 3256);
    v722 = *(void *)(v0 + 3488);
    v720 = *(void (**)(uint64_t, uint64_t))(v0 + 3856);
    uint64_t v95 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v96 = sub_A5E8(32LL);
    v726 = v96;
    *(_DWORD *)uint64_t v95 = 136315138;
    sub_BA7DC(v92, v93, type metadata accessor for SingleActivitySummaryModel);
    uint64_t v97 = String.init<A>(describing:)(v93, v94);
    *(void *)(v0 + 318sub_D878(v0 + 4) = sub_F1A54(v97, v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v724, v0 + 3192, v95 + 4, v95 + 12);
    sub_B25F0();
    sub_F12A0(v92, type metadata accessor for SingleActivitySummaryModel);
    sub_DA24(&dword_0, v713, (os_log_type_t)v710, "#GetActivitySummaryFlow: snippet model is %s", v95);
    sub_A81C(v96);
    sub_5050(v96);
    sub_5050((uint64_t)v95);

    v720(v90, v722);
  }

  else
  {
    sub_F12A0(*(void *)(v0 + 3272), type metadata accessor for SingleActivitySummaryModel);

    v89(v90, v91);
  }

  uint64_t v99 = *(os_log_s **)(v0 + 3840);
  uint64_t v100 = *(void *)(v0 + 3312);
  uint64_t v101 = *(void *)(v0 + 3304);
  sub_A5DC((uint64_t)v99, v0 + 2936);
  sub_F1B18();
  sub_BA7DC(v100, v101, type metadata accessor for SnippetHeaderModel);
  sub_23374();
  uint64_t v102 = sub_AB70();
  uint64_t v103 = sub_A634(v102);
  uint64_t v104 = *(void (**)(uint64_t, uint64_t))(v0 + 3856);
  uint64_t v105 = *(void *)(v0 + 3528);
  uint64_t v106 = *(void *)(v0 + 3488);
  uint64_t v107 = *(void *)(v0 + 3304);
  if (v103)
  {
    uint64_t v108 = *(void *)(v0 + 3296);
    uint64_t v109 = *(void *)(v0 + 3288);
    v723 = *(void (**)(uint64_t, uint64_t))(v0 + 3856);
    uint64_t v110 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v111 = sub_A5E8(32LL);
    v726 = v111;
    *(_DWORD *)uint64_t v110 = 136315138;
    sub_BA7DC(v107, v108, type metadata accessor for SnippetHeaderModel);
    uint64_t v112 = String.init<A>(describing:)(v108, v109);
    *(void *)(v0 + 3200) = sub_F1A54(v112, v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3200, v0 + 3208, v110 + 4, v110 + 12);
    sub_B25F0();
    sub_F12A0(v107, type metadata accessor for SnippetHeaderModel);
    sub_DA24(&dword_0, v99, (os_log_type_t)v100, "#GetActivitySummaryFlow: snippet header model is %s", v110);
    sub_A81C(v111);
    sub_5050(v111);
    sub_5050((uint64_t)v110);

    v723(v105, v106);
  }

  else
  {
    sub_F12A0(*(void *)(v0 + 3304), type metadata accessor for SnippetHeaderModel);

    v104(v105, v106);
  }

  uint64_t v114 = *(void *)(v0 + 3392);
  uint64_t v115 = *(void *)(v0 + 3384);
  uint64_t v116 = *(uint64_t **)(v0 + 3280);
  uint64_t v117 = sub_27CC8(*(_BYTE *)(v0 + 585));
  String.toSpeakableString.getter(v117, v118);
  sub_369F4();
  sub_9A688(v114, 0LL);
  uint64_t v119 = sub_EF7D8(*v116);
  uint64_t v121 = v120 & 1;
  uint64_t v122 = sub_EF7D8(v116[1]);
  uint64_t v124 = v123 & 1;
  sub_F1C0C();
  sub_9A688(v115, 0LL);
  uint64_t v125 = (void *)swift_task_alloc(dword_18DC2C);
  *(void *)(v0 + 393sub_D878(v0 + 6) = v125;
  *uint64_t v125 = v0;
  v125[1] = sub_EE938;
  uint64_t v126 = sub_EA454(*(void *)(v0 + 3392));
  return sub_9F3D4(v126, v119, v121, v122, v124, 0, v127, v128);
}

uint64_t sub_AF050()
{
  *(void *)(v1 + 148_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v0;
  *(void *)(v1 + 149sub_D878(v0 + 6) = v2;
  sub_36900(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_AF090()
{
  uint64_t v1 = (void *)v0[147];
  uint64_t v2 = v1[4];
  sub_500C(v1, v1[3]);
  unsigned __int16 v3 = sub_B24B4(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24));
  if (v3 == 270)
  {
    uint64_t v4 = 1LL;
  }

  else
  {
    uint64_t v5 = sub_10F1C0(v3);
    uint64_t v7 = v6;
    String.toSpeakableString.getter(v5, v6);
    swift_bridgeObjectRelease(v7);
    uint64_t v4 = 0LL;
  }

  uint64_t v8 = v0[174];
  *(double *)&uint64_t v9 = (double)(uint64_t)v0[184];
  uint64_t v10 = type metadata accessor for SpeakableString(0LL);
  sub_A66C(v8, v4, v11, v10);
  unsigned __int16 v12 = (void *)swift_task_alloc(dword_190B8C);
  v0[188] = v12;
  *unsigned __int16 v12 = v0;
  v12[1] = sub_AF170;
  return sub_1307FC(v0[174], v9, 0);
}

uint64_t sub_AF170(uint64_t a1)
{
  unsigned __int16 v3 = *v2;
  uint64_t v4 = (*v2)[188];
  v3[189] = a1;
  v3[190] = v1;
  sub_36900(v4);
  if (v1)
  {
    uint64_t v5 = v3[174];
    swift_bridgeObjectRelease(v3[187]);
    sub_279E0(v5, &qword_189D00);
  }

  else
  {
    sub_279E0(v3[174], &qword_189D00);
  }

  sub_A964();
  return sub_D954();
}

#error "AF468: call analysis failed (funcsize=169)"
uint64_t sub_AF4C0()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  sub_AA10();
  v1[131] = v0;
  v1[132] = v2;
  v1[133] = v3;
  uint64_t v4 = v1[194];
  *uint64_t v5 = *v0;
  v1[195] = v3;
  swift_task_dealloc(v4);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_AF50C()
{
  uint64_t v1 = *(void *)(v0 + 1560);
  uint64_t v47 = *(void *)(v0 + 1536);
  uint64_t v48 = *(void *)(v0 + 1544);
  uint64_t v2 = *(void *)(v0 + 1496);
  uint64_t v3 = *(void *)(v0 + 1464);
  uint64_t v56 = *(void *)(v0 + 1408);
  uint64_t v4 = *(void *)(v0 + 1400);
  uint64_t v5 = *(void *)(v0 + 1368);
  uint64_t v6 = *(void *)(v0 + 1360);
  uint64_t v45 = *(void *)(v0 + 1056);
  uint64_t v46 = *(void *)(v0 + 1352);
  uint64_t v54 = *(void *)(v0 + 1344);
  uint64_t v7 = *(void *)(v0 + 1320);
  uint64_t v49 = *(void *)(v0 + 1248);
  uint64_t v50 = *(os_log_s **)(v0 + 1312);
  uint64_t v51 = *(void *)(v0 + 1240);
  unsigned __int8 v8 = *(_BYTE *)(v0 + 1650);
  String.toSpeakableString.getter(*(void *)(v0 + 1488), v2);
  swift_bridgeObjectRelease(v2);
  unint64_t v9 = sub_2A044(v8);
  unint64_t v11 = v10;
  uint64_t v12 = sub_27CC8(v8);
  uint64_t v13 = (unint64_t *)(v5 + *(int *)(v6 + 20));
  *uint64_t v13 = v9;
  v13[1] = v11;
  uint64_t v14 = (uint64_t *)(v5 + *(int *)(v6 + 24));
  *uint64_t v14 = v12;
  v14[1] = v15;
  if (v1) {
    uint64_t v16 = v45;
  }
  else {
    uint64_t v16 = 0x646567676F4CLL;
  }
  if (v1) {
    uint64_t v17 = v1;
  }
  else {
    uint64_t v17 = 0xE600000000000000LL;
  }
  sub_98DE0(v5, v7, type metadata accessor for SnippetHeaderModel);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v7, 0LL, 1LL, v6);
  sub_98DB4(v56, v4, &qword_189CF8);
  swift_retain();
  uint64_t v57 = v3;
  uint64_t v18 = CycleTrackingLogModel.init(date:loggedLabel:cycleTrackingType:snippetHeaderModel:url:)( v3,  v16,  v17,  v47,  v48,  v7,  v4,  v46);
  uint64_t v19 = Logger.wellness.unsafeMutableAddressor(v18);
  *(void *)(v0 + 156_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v19;
  sub_A5DC(v19, v0 + 952);
  uint64_t v20 = *(void (**)(os_log_s *, uint64_t, uint64_t))(v49 + 16);
  *(void *)(v0 + 157sub_D878(v0 + 6) = v20;
  v20(v50, v19, v51);
  sub_98DE0(v46, v54, type metadata accessor for CycleTrackingLogModel);
  Logger.logObject.getter(v21);
  os_log_type_t v22 = sub_AB70();
  if (sub_46614(v22))
  {
    uint64_t v23 = *(void *)(v0 + 1344);
    uint64_t v24 = *(void *)(v0 + 1336);
    uint64_t v25 = *(void *)(v0 + 1328);
    uint64_t v52 = *(void *)(v0 + 1248);
    uint64_t v53 = *(void *)(v0 + 1240);
    uint64_t v55 = *(void *)(v0 + 1312);
    BOOL v26 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v27 = sub_A5E8(32LL);
    uint64_t v58 = v27;
    *(_DWORD *)BOOL v26 = 136315138;
    sub_98DE0(v23, v24, type metadata accessor for CycleTrackingLogModel);
    uint64_t v28 = String.init<A>(describing:)(v24, v25);
    unint64_t v30 = v29;
    *(void *)(v0 + 1160) = sub_39178(v28, v29, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1160, v0 + 1168, v26 + 4, v26 + 12);
    swift_bridgeObjectRelease(v30);
    sub_B21AC();
    sub_DA24(&dword_0, v50, (os_log_type_t)v17, "#LogPeriodFlow: Snippet model %s", v26);
    sub_A81C(v27);
    sub_5050(v27);
    sub_5050((uint64_t)v26);

    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
    v31(v55, v53);
  }

  else
  {
    uint64_t v32 = *(void *)(v0 + 1248);
    sub_B21AC();

    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    uint64_t v33 = sub_372A0();
    v31(v33, v34);
  }

  *(void *)(v0 + 158sub_D878(v0 + 4) = v31;
  uint64_t v35 = *(void *)(v0 + 1384);
  uint64_t v36 = *(void *)(v0 + 1472);
  uint64_t v37 = sub_10F1C0(*(_WORD *)(v0 + 1648));
  uint64_t v39 = v38;
  String.toSpeakableString.getter(v37, v38);
  swift_bridgeObjectRelease(v39);
  uint64_t v40 = type metadata accessor for SpeakableString(0LL);
  *(void *)(v0 + 159sub_D878(v0 + 2) = v40;
  sub_A66C(v35, 0LL, v41, v40);
  uint64_t v42 = dword_190B84;
  swift_retain();
  uint64_t v43 = (void *)swift_task_alloc(v42);
  *(void *)(v0 + 1600) = v43;
  *uint64_t v43 = v0;
  v43[1] = sub_AF8AC;
  return sub_13065C(*(void *)(v0 + 1384), v57, COERCE__INT64((double)v36), 0);
}

uint64_t sub_AF8AC(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v2 + 1600LL);
  *(void *)(*(void *)v2 + 1608LL) = a1;
  uint64_t v4 = sub_36900(v3);
  if (v1)
  {
    sub_367AC();
    uint64_t v5 = swift_errorRelease(v1);
    sub_36A94(v5, &qword_189D00);
  }

  else
  {
    sub_36A94(v4, &qword_189D00);
    sub_367AC();
  }

  sub_A964();
  return swift_task_switch(v6, v7, v8);
}

uint64_t sub_AF948()
{
  uint64_t v1 = (uint64_t)(v0 + 125);
  uint64_t v2 = (void *)v0[201];
  uint64_t v3 = (os_log_s *)v0[196];
  sub_A5DC((uint64_t)v3, (uint64_t)(v0 + 128));
  sub_36868();
  id v4 = v2;
  sub_A86C();
  os_log_type_t v5 = sub_AB70();
  BOOL v6 = os_log_type_enabled(v3, v5);
  uint64_t v7 = (void *)v0[201];
  if (!v6)
  {
    uint64_t v18 = (void (*)(uint64_t))v0[198];

    uint64_t v19 = sub_372A0();
    v18(v19);
    goto LABEL_14;
  }

  uint64_t v8 = v0[191];
  unint64_t v9 = (uint8_t *)sub_A5E8(12LL);
  uint64_t v64 = sub_A5E8(32LL);
  *(_DWORD *)unint64_t v9 = 136315138;
  id v10 = [v7 dialog];
  uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v8);

  if ((unint64_t)v11 >> 62)
  {
    if (v11 < 0) {
      uint64_t v20 = v11;
    }
    else {
      uint64_t v20 = v11 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v11);
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v20);
    sub_B25F0();
    if (v12) {
      goto LABEL_4;
    }
  }

  else
  {
    uint64_t v12 = *(void *)((char *)&dword_10 + (v11 & 0xFFFFFFFFFFFFF8LL));
    if (v12)
    {
LABEL_4:
      sub_398E0(0LL, (v11 & 0xC000000000000001LL) == 0, v11);
      if ((v11 & 0xC000000000000001LL) != 0) {
        id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v11);
      }
      else {
        id v13 = *(id *)(v11 + 32);
      }
      uint64_t v14 = v13;
      sub_B25F0();
      id v15 = [v14 fullPrint];

      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      uint64_t v17 = v16;

      goto LABEL_13;
    }
  }

  sub_B25F0();
  uint64_t v17 = 0LL;
LABEL_13:
  uint64_t v21 = (void *)v0[201];
  uint64_t v61 = (void (*)(uint64_t, uint64_t))v0[198];
  uint64_t v22 = v0[163];
  uint64_t v23 = v0[155];
  v0[136] = v12;
  v0[137] = v17;
  uint64_t v24 = sub_494C(&qword_18B170);
  uint64_t v25 = String.init<A>(describing:)(v0 + 136, v24);
  v0[144] = sub_B25D0(v25, v26, v27, v28, v29, v30, v31, v32);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 145, v9 + 4, v9 + 12);
  swift_bridgeObjectRelease(v12);

  sub_DA24(&dword_0, v3, v5, "#LogPeriodFlow: Snippet dialog is %s", v9);
  sub_A81C(v64);
  sub_5050(v64);
  sub_5050((uint64_t)v9);

  v61(v22, v23);
  uint64_t v1 = (uint64_t)(v0 + 125);
LABEL_14:
  uint64_t v33 = v0[183];
  sub_A5DC(v0[196], v1);
  sub_36868();
  swift_retain_n(v33, 2LL);
  uint64_t v34 = (os_log_s *)sub_A86C();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = v0[199];
    uint64_t v37 = v0[172];
    uint64_t v38 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v39 = sub_A5E8(32LL);
    *(_DWORD *)uint64_t v38 = 136315138;
    dispatch thunk of DialogCalendar.dateDescriptive.getter(v39);
    uint64_t v40 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v37, 1LL, v36);
    if ((_DWORD)v40 == 1)
    {
      sub_279E0(v0[172], &qword_189D00);
      uint64_t v41 = 0LL;
      uint64_t v42 = 0LL;
    }

    else
    {
      uint64_t v43 = v0[199];
      uint64_t v44 = v0[172];
      uint64_t v41 = SpeakableString.print.getter(v40);
      uint64_t v42 = v45;
      sub_B2558(v44, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v43 - 8) + 8LL));
    }

    uint64_t v46 = v0[183];
    uint64_t v62 = v0[162];
    uint64_t v63 = (uint64_t (*)(uint64_t, uint64_t))v0[198];
    v0[134] = v41;
    v0[135] = v42;
    uint64_t v47 = sub_494C(&qword_18B170);
    uint64_t v48 = String.init<A>(describing:)(v0 + 134, v47);
    v0[142] = sub_B25D0(v48, v49, v50, v51, v52, v53, v54, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 142, v0 + 143, v38 + 4, v38 + 12);
    swift_bridgeObjectRelease(v42);
    swift_release_n(v46, 2LL);
    sub_DA24(&dword_0, v34, v35, "#LogPeriodFlow: Date is %s", v38);
    sub_A81C(v39);
    sub_5050(v39);
    sub_5050((uint64_t)v38);

    sub_B2558(v62, v63);
  }

  else
  {
    swift_release_n(v0[183], 2LL);

    sub_37044();
  }

  uint64_t v56 = v0[169];
  uint64_t v57 = type metadata accessor for WellnessSnippets(0LL);
  v0[100] = v57;
  v0[101] = sub_20168();
  uint64_t v58 = sub_B76C(v0 + 97);
  sub_98DE0(v56, (uint64_t)v58, type metadata accessor for CycleTrackingLogModel);
  swift_storeEnumTagMultiPayload(v58, v57, 3LL);
  uint64_t v59 = (void *)swift_task_alloc(dword_18B6FC);
  v0[202] = v59;
  *uint64_t v59 = v0;
  v59[1] = sub_AFE34;
  return sub_5E844((uint64_t)(v0 + 87), (uint64_t)(v0 + 97), v0[201]);
}

uint64_t sub_AFE34()
{
  uint64_t v1 = (void *)(v0 + 776);
  sub_56254(*(void *)(v0 + 1616), &v3);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_AFE7C()
{
  uint64_t v1 = *(void **)(v0 + 1608);
  uint64_t v214 = *(void *)(v0 + 1432);
  uint64_t v216 = *(void *)(v0 + 1456);
  uint64_t v207 = *(void *)(v0 + 1408);
  uint64_t v211 = *(void *)(v0 + 1440);
  sub_A304(v0 + 696, v0 + 656);
  uint64_t v2 = swift_allocObject(&unk_17F3D8, 56LL, 7LL);
  sub_20004((__int128 *)(v0 + 656), v2 + 16);
  static OutputPublisherFactory.makeOutputPublisherAsync()(v219);
  uint64_t v3 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  sub_A72C(v3);
  *(void *)(v0 + 1120) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)(v219, &unk_18E410, v2);
  uint64_t v218 = Flow.eraseToAnyFlow()(v3);

  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 696));
  sub_B21AC();
  sub_B21AC();
  sub_279E0(v207, &qword_189CF8);
  (*(void (**)(uint64_t, uint64_t))(v211 + 8))(v216, v214);
  swift_release();
  uint64_t v109 = *(void *)(v0 + 1352);
  uint64_t v122 = *(void *)(v0 + 1344);
  uint64_t v135 = *(void *)(v0 + 1336);
  uint64_t v147 = *(void *)(v0 + 1320);
  uint64_t v158 = *(void *)(v0 + 1312);
  uint64_t v168 = *(void *)(v0 + 1304);
  uint64_t v177 = *(void *)(v0 + 1296);
  uint64_t v185 = *(void *)(v0 + 1288);
  uint64_t v192 = *(void *)(v0 + 1280);
  uint64_t v198 = *(void *)(v0 + 1272);
  uint64_t v203 = *(void *)(v0 + 1264);
  uint64_t v208 = *(void *)(v0 + 1256);
  uint64_t v212 = *(void *)(v0 + 1232);
  uint64_t v215 = *(void *)(v0 + 1208);
  uint64_t v217 = *(void *)(v0 + 1200);
  swift_task_dealloc(*(void *)(v0 + 1456));
  sub_A864();
  sub_A85C();
  sub_A8F4();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  uint64_t v4 = swift_task_dealloc(v109);
  uint64_t v12 = sub_AAD8(v4, v5, v6, v7, v8, v9, v10, v11, v109, v122);
  uint64_t v20 = sub_A888(v12, v13, v14, v15, v16, v17, v18, v19, v110, v123, v135);
  uint64_t v28 = sub_A854(v20, v21, v22, v23, v24, v25, v26, v27, v111, v124, v136, v147);
  uint64_t v36 = sub_A84C(v28, v29, v30, v31, v32, v33, v34, v35, v112, v125, v137, v148, v158);
  uint64_t v44 = sub_A844(v36, v37, v38, v39, v40, v41, v42, v43, v113, v126, v138, v149, v159, v168);
  uint64_t v52 = sub_A83C(v44, v45, v46, v47, v48, v49, v50, v51, v114, v127, v139, v150, v160, v169, v177);
  uint64_t v60 = sub_A95C(v52, v53, v54, v55, v56, v57, v58, v59, v115, v128, v140, v151, v161, v170, v178, v185);
  uint64_t v68 = sub_A954(v60, v61, v62, v63, v64, v65, v66, v67, v116, v129, v141, v152, v162, v171, v179, v186, v192);
  uint64_t v76 = sub_A938(v68, v69, v70, v71, v72, v73, v74, v75, v117, v130, v142, v153, v163, v172, v180, v187, v193, v198);
  uint64_t v84 = sub_A930( v76,  v77,  v78,  v79,  v80,  v81,  v82,  v83,  v118,  v131,  v143,  v154,  v164,  v173,  v181,  v188,  v194,  v199,  v203);
  uint64_t v92 = sub_A928( v84,  v85,  v86,  v87,  v88,  v89,  v90,  v91,  v119,  v132,  v144,  v155,  v165,  v174,  v182,  v189,  v195,  v200,  v204,  v208);
  uint64_t v100 = sub_A920( v92,  v93,  v94,  v95,  v96,  v97,  v98,  v99,  v120,  v133,  v145,  v156,  v166,  v175,  v183,  v190,  v196,  v201,  v205,  v209,  v212);
  sub_36374( v100,  v101,  v102,  v103,  v104,  v105,  v106,  v107,  v121,  v134,  v146,  v157,  v167,  v176,  v184,  v191,  v197,  v202,  v206,  v210,  v213,  v215);
  swift_task_dealloc(v217);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v218);
}

#error "B0214: call analysis failed (funcsize=94)"
uint64_t sub_B025C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v4 = *v2;
  uint64_t v6 = v4;
  sub_56254(*(void *)(v4 + 1632), &v6);
  if (v1) {
    swift_errorRelease(v1);
  }
  else {
    *(void *)(v4 + 1640) = a1;
  }
  sub_A7C8();
  sub_A964();
  return sub_D954();
}

#error "B0458: call analysis failed (funcsize=113)"
#error "B0660: call analysis failed (funcsize=125)"
#error "B08D8: call analysis failed (funcsize=151)"
uint64_t sub_B0920(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  v2[132] = v1;
  v2[131] = a1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[133] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[134] = v4;
  uint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[135] = swift_task_alloc(v5);
  v2[136] = swift_task_alloc(v5);
  v2[137] = swift_task_alloc(v5);
  v2[138] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  v2[139] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Calendar(0LL);
  v2[140] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[141] = v8;
  v2[142] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DateInterval(0LL);
  v2[143] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[144] = v10;
  v2[145] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (*(void *)(*(void *)(sub_494C(&qword_189BA0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[146] = swift_task_alloc(v11);
  v2[147] = swift_task_alloc(v11);
  uint64_t v12 = (*(void *)(*(void *)(sub_494C(&qword_189CE8) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[148] = swift_task_alloc(v12);
  v2[149] = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for Date(0LL);
  v2[150] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v2[151] = v14;
  uint64_t v15 = (*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[152] = swift_task_alloc(v15);
  v2[153] = swift_task_alloc(v15);
  v2[154] = swift_task_alloc(v15);
  return swift_task_switch(sub_B0AC8, 0LL, 0LL);
}

uint64_t sub_B0AC8()
{
  uint64_t v1 = (void *)(*(void *)(v0 + 1056) + 40LL);
  sub_3A484(v1);
  sub_B2528();
  sub_3A484((void *)(v0 + 896));
  uint64_t v2 = sub_373E0();
  char v3 = dispatch thunk of DeviceState.isWatch.getter(v2);
  uint64_t v4 = _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 896));
  if ((v3 & 1) == 0) {
    goto LABEL_7;
  }
  sub_500C(*(void **)(v0 + 1056), *(void *)(*(void *)(v0 + 1056) + 24LL));
  sub_202B4();
  uint64_t v5 = sub_B2588();
  uint64_t v6 = *(void *)(v0 + 1200);
  uint64_t v7 = *(void *)(v0 + 1192);
  uint64_t v8 = *(void *)(v0 + 1176);
  if ((_DWORD)v5 == 1)
  {
    sub_279E0(*(void *)(v0 + 1176), &qword_189BA0);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v7, 1LL, 1LL, v6);
LABEL_6:
    sub_279E0(*(void *)(v0 + 1192), &qword_189CE8);
    goto LABEL_7;
  }

  uint64_t v9 = *(void *)(v0 + 1152);
  uint64_t v10 = *(void *)(v0 + 1144);
  DateInterval.start.getter(v5);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v11(v8, v10);
  sub_B24C4();
  if (v12) {
    goto LABEL_6;
  }
  uint64_t v33 = *(void *)(v0 + 1232);
  uint64_t v34 = *(void *)(v0 + 1216);
  uint64_t v35 = *(void *)(v0 + 1160);
  uint64_t v95 = *(void *)(v0 + 1144);
  uint64_t v36 = *(void *)(v0 + 1136);
  uint64_t v37 = *(void *)(v0 + 1128);
  uint64_t v38 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)(v0 + 1208) + 32LL))( v33,  *(void *)(v0 + 1192),  *(void *)(v0 + 1200));
  static Calendar.current.getter(v38);
  Calendar.startOfDay(for:)(v33);
  sub_B2558(v36, *(uint64_t (**)(uint64_t, uint64_t))(v37 + 8));
  sub_77A8C(v34);
  uint64_t v39 = sub_373E0();
  DateInterval.init(start:end:)(v39, v40);
  char v41 = ((uint64_t (*)(uint64_t))isWithinGenericRetentionPolicy(dateInterval:))(v35);
  v11(v35, v95);
  if ((v41 & 1) == 0)
  {
    uint64_t v42 = *(void *)(v0 + 1232);
    uint64_t v43 = *(void *)(v0 + 1208);
    uint64_t v44 = *(void *)(v0 + 1112);
    uint64_t v45 = *(void *)(v0 + 1056);
    FlowTaskLogger.unsupported()();
    sub_A304(v45, v0 + 16);
    sub_A304((uint64_t)v1, v0 + 56);
    sub_A13C((_OWORD *)(v45 + 80), (_OWORD *)(v0 + 96));
    uint64_t v46 = sub_AA80();
    sub_A72C(v46);
    uint64_t v47 = sub_A9C8();
    *(void *)(v0 + 280) = v46;
    *(void *)(v0 + 28_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = &protocol witness table for ResponseFactory;
    *(void *)(v0 + 2sub_D7EC(v0 + 16, v0 + 56) = v47;
    type metadata accessor for WellnessLoggingCATsSimple(0LL);
    sub_37504();
    sub_AAF8(v44);
    uint64_t v48 = sub_B25E4();
    type metadata accessor for WellnessCATs(v48);
    sub_37504();
    uint64_t v49 = CATWrapper.__allocating_init(options:globals:)(v44, 0LL);
    *(void *)(v0 + 29sub_D878(v0 + 6) = v46;
    *(void *)(v0 + 30sub_D878(v0 + 4) = v49;
    sub_20228();
    static ExecuteResponse.complete<A>(next:)(v0 + 16);
    sub_20100((void *)(v0 + 16));
    sub_D970(v42, *(uint64_t (**)(uint64_t, uint64_t))(v43 + 8));
    sub_B23B0();
    sub_A78C();
    sub_A67C();
    sub_A7C8();
    sub_A760();
    sub_A8EC();
    sub_A910();
    sub_A864();
    sub_A85C();
    uint64_t v50 = sub_A8F4();
    uint64_t v58 = sub_AAD8(v50, v51, v52, v53, v54, v55, v56, v57, v82, v86);
    uint64_t v66 = sub_A888(v58, v59, v60, v61, v62, v63, v64, v65, v83, v87, v90);
    uint64_t v74 = sub_A854(v66, v67, v68, v69, v70, v71, v72, v73, v84, v88, v91, v93);
    sub_A84C(v74, v75, v76, v77, v78, v79, v80, v81, v85, v89, v92, v94, v95);
    return sub_3C6E4(*(uint64_t (**)(void))(v0 + 8));
  }

  uint64_t v4 = (*(uint64_t (**)(void, void))(*(void *)(v0 + 1208) + 8LL))( *(void *)(v0 + 1232),  *(void *)(v0 + 1200));
LABEL_7:
  uint64_t v13 = *(void *)(v0 + 1072);
  uint64_t v14 = *(void *)(v0 + 1064);
  uint64_t v15 = Logger.wellness.unsafeMutableAddressor(v4);
  *(void *)(v0 + 1sub_A304(v0 - 176, v0 - 240) = v15;
  sub_A5DC(v15, v0 + 1008);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  *(void *)(v0 + 124_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v16;
  sub_37290(v16);
  sub_23374();
  os_log_type_t v17 = sub_AB70();
  if (sub_A988(v17))
  {
    uint64_t v18 = (_WORD *)sub_A5E8(2LL);
    sub_366C0(v18);
    sub_A940(&dword_0, v19, v20, "Handling spotting case");
    sub_5050(v14);
  }

  uint64_t v21 = *(void *)(v0 + 1072);
  uint64_t v22 = *(void **)(v0 + 1056);

  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 8);
  *(void *)(v0 + 12sub_D7EC(v0 + 16, v0 + 56) = v23;
  sub_A7A0(v23);
  sub_500C(v22, v22[3]);
  sub_202B4();
  uint64_t v24 = sub_B2588();
  if ((_DWORD)v24 == 1)
  {
    sub_279E0(*(void *)(v0 + 1168), &qword_189BA0);
    uint64_t v26 = 1LL;
  }

  else
  {
    DateInterval.start.getter(v24);
    sub_B25B0();
    uint64_t v26 = 0LL;
  }

  sub_A66C(*(void *)(v0 + 1184), v26, v25, *(void *)(v0 + 1200));
  uint64_t v28 = v22[3];
  uint64_t v27 = v22[4];
  sub_B25F8();
  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 64))(v28, v27);
  PeriodFlow.init(rawDoubleValue:)(v29, v30 & 1);
  uint64_t v31 = (void *)swift_task_alloc(dword_18E3FC);
  *(void *)(v0 + 126sub_D878(v0 + 4) = v31;
  *uint64_t v31 = v0;
  v31[1] = sub_B0EDC;
  return sub_AE10C();
}

uint64_t sub_B0EDC()
{
  *(void *)(v2 + 127sub_D878(v0 + 2) = v1;
  *(void *)(v2 + 1280) = v0;
  uint64_t v4 = sub_36900(v3);
  sub_36A94(v4, &qword_189CE8);
  sub_A964();
  return sub_D954();
}

uint64_t sub_B0F40()
{
  uint64_t v1 = *(void *)(v0 + 1272);
  if (v1)
  {
    uint64_t v2 = (void *)swift_task_alloc(dword_18E404);
    *(void *)(v0 + 128_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_B1098;
    return sub_AEA24(v1);
  }

  else
  {
    uint64_t v4 = *(void **)(v0 + 1240);
    uint64_t v5 = *(void *)(v0 + 1064);
    sub_A5DC((uint64_t)v4, v0 + 984);
    sub_36170();
    sub_23374();
    os_log_type_t v6 = sub_A898();
    if (sub_A988(v6))
    {
      uint64_t v7 = (_WORD *)sub_A5E8(2LL);
      sub_366C0(v7);
      sub_A940(&dword_0, v8, v9, "Didn't get response from spotting save");
      sub_5050(v5);
    }

    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v0 + 1256);
    uint64_t v11 = *(void *)(v0 + 1096);
    uint64_t v12 = *(void *)(v0 + 1064);
    uint64_t v13 = *(void *)(v0 + 1056);

    v10(v11, v12);
    FlowTaskLogger.taskFailed()();
    sub_36590((_OWORD *)(v13 + 80));
    sub_A178();
    sub_36748();
    sub_36784();
    sub_B23B0();
    sub_A78C();
    sub_A67C();
    sub_A7C8();
    sub_A760();
    sub_A8EC();
    sub_A910();
    sub_A864();
    sub_A85C();
    uint64_t v14 = sub_A8F4();
    uint64_t v22 = sub_AAD8(v14, v15, v16, v17, v18, v19, v20, v21, v46, v50);
    uint64_t v30 = sub_A888(v22, v23, v24, v25, v26, v27, v28, v29, v47, v51, v54);
    uint64_t v38 = sub_A854(v30, v31, v32, v33, v34, v35, v36, v37, v48, v52, v55, v57);
    sub_A84C(v38, v39, v40, v41, v42, v43, v44, v45, v49, v53, v56, v58, v59);
    return sub_3C6E4(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_B1098()
{
  *(void *)(v1 + 129sub_D878(v0 + 6) = v0;
  sub_36900(v2);
  sub_A964();
  return sub_A5D0();
}

#error "B1144: call analysis failed (funcsize=35)"
#error "B146C: call analysis failed (funcsize=193)"
uint64_t LogPeriodFlow.execute()(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  v2[50] = a1;
  v2[51] = v1;
  uint64_t v3 = type metadata accessor for CATOption(0LL);
  v2[52] = sub_A5C0(*(void *)(v3 - 8));
  uint64_t v4 = sub_D984();
  v2[53] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[54] = v5;
  v2[55] = sub_D8CC(v5);
  v2[56] = sub_A5B8();
  os_log_type_t v6 = sub_494C(&qword_189BA0);
  v2[57] = sub_A5C0(*(void *)(v6 - 8));
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_B1500()
{
  uint64_t v1 = *(void *)(v0 + 408);
  uint64_t v2 = *(void *)(v1 + 32);
  uint64_t v3 = (void *)sub_372A0();
  sub_500C(v3, v4);
  uint64_t v5 = sub_B24B4(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 104));
  BOOL v6 = sub_582B8(v5, (uint64_t)&off_17B200);
  if (!v6)
  {
    uint64_t v14 = (void *)(v0 + 16);
    uint64_t v15 = (void *)(v0 + 352);
    uint64_t v16 = *(void *)(v0 + 432);
    uint64_t v17 = Logger.wellness.unsafeMutableAddressor(v6);
    sub_A5DC(v17, v0 + 352);
    sub_464D8(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 16));
    sub_A86C();
    os_log_type_t v18 = sub_A898();
    if (sub_232DC(v18))
    {
      uint64_t v19 = (_WORD *)sub_A5E8(2LL);
      *uint64_t v19 = 0;
      sub_3A440(&dword_0, v20, v21, "Trying to save future record, which is not allowed");
      sub_5050((uint64_t)v19);
    }

    uint64_t v22 = *(void *)(v0 + 432);

    sub_A7A0(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
    FlowTaskLogger.taskUnsupported()();
    sub_ADD58((uint64_t *)(v0 + 16));
    type metadata accessor for WellnessCATPatternsExecutor(0LL);
    sub_7DF94();
    uint64_t v23 = sub_B2420();
    *(void *)(v0 + 80) = v15;
    *(void *)(v0 + 8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = &off_17DC48;
    *(void *)(v0 + sub_D7EC(v0 + 16, v0 + 56) = v23;
    type metadata accessor for WellnessLoggingCATPatternsExecutor(0LL);
    sub_7DF94();
    uint64_t v24 = sub_B2420();
    *(void *)(v0 + 120) = v15;
    *(void *)(v0 + 12_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = &off_1806B8;
    *(void *)(v0 + 9sub_D878(v0 + 6) = v24;
    type metadata accessor for WellnessQueryingCATPatternsExecutor(0LL);
    sub_7DF94();
    uint64_t v25 = sub_B2420();
    *(void *)(v0 + 160) = v15;
    *(void *)(v0 + 16_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = &off_17D960;
    *(void *)(v0 + 13sub_D878(v0 + 6) = v25;
    *(_BYTE *)(v0 + 17sub_D878(v0 + 6) = 0;
    goto LABEL_11;
  }

  uint64_t v7 = *(void *)(v0 + 456);
  sub_3A484(*(void **)(v0 + 408));
  sub_B2528();
  BOOL v8 = sub_ADDDC(v7);
  sub_279E0(v7, &qword_189BA0);
  if (!v8)
  {
    uint64_t v14 = (void *)(v0 + 184);
    uint64_t v26 = (void *)(v0 + 376);
    uint64_t v27 = *(void *)(v0 + 432);
    uint64_t v28 = Logger.wellness.unsafeMutableAddressor(v9);
    sub_A5DC(v28, v0 + 376);
    sub_464D8(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 16));
    sub_A86C();
    os_log_type_t v29 = sub_A898();
    if (sub_232DC(v29))
    {
      uint64_t v30 = (_WORD *)sub_A5E8(2LL);
      *uint64_t v30 = 0;
      sub_3A440(&dword_0, v31, v32, "Only one day is loggable");
      sub_5050((uint64_t)v30);
    }

    uint64_t v33 = *(void *)(v0 + 432);

    sub_A7A0(*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8));
    FlowTaskLogger.taskUnsupported()();
    sub_ADD58((uint64_t *)(v0 + 184));
    type metadata accessor for WellnessCATPatternsExecutor(0LL);
    sub_7DF94();
    uint64_t v34 = sub_B2420();
    *(void *)(v0 + 24_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v26;
    *(void *)(v0 + 2sub_D7EC(v0 + 16, v0 + 56) = &off_17DC48;
    *(void *)(v0 + 22sub_D878(v0 + 4) = v34;
    type metadata accessor for WellnessLoggingCATPatternsExecutor(0LL);
    sub_7DF94();
    uint64_t v35 = sub_B2420();
    *(void *)(v0 + 28_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v26;
    *(void *)(v0 + 29sub_D878(v0 + 6) = &off_1806B8;
    *(void *)(v0 + 26sub_D878(v0 + 4) = v35;
    type metadata accessor for WellnessQueryingCATPatternsExecutor(0LL);
    sub_7DF94();
    uint64_t v36 = sub_B2420();
    *(void *)(v0 + 32_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v26;
    *(void *)(v0 + 33sub_D878(v0 + 6) = &off_17D960;
    *(void *)(v0 + 30sub_D878(v0 + 4) = v36;
    *(_BYTE *)(v0 + 34sub_D878(v0 + 4) = 0;
LABEL_11:
    sub_1FF94();
    sub_36748();
    sub_1FFD0(v14);
    swift_task_dealloc(*(void *)(v0 + 456));
    sub_A78C();
    sub_A67C();
    sub_A7C8();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v10 = *(void *)(v1 + 32);
  sub_500C(*(void **)(v0 + 408), v11);
  if ((*(unsigned __int16 (**)(uint64_t, uint64_t))(v10 + 24))(v11, v10) == 191)
  {
    uint64_t v12 = (void *)swift_task_alloc(dword_18E3E4);
    *(void *)(v0 + 46sub_D878(v0 + 4) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_B187C;
    return sub_B0920(*(void *)(v0 + 400));
  }

  else
  {
    uint64_t v37 = (void *)swift_task_alloc(dword_18E3DC);
    *(void *)(v0 + 47sub_D878(v0 + 2) = v37;
    *uint64_t v37 = v0;
    v37[1] = sub_B18C8;
    return sub_AE244(*(void *)(v0 + 400));
  }

uint64_t sub_B187C()
{
  uint64_t v3 = *v0;
  uint64_t v1 = *v0;
  sub_56254(*(void *)(v3 + 464), &v3);
  sub_B25A0();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  return sub_B2410(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_B18C8()
{
  uint64_t v3 = *v0;
  uint64_t v1 = *v0;
  sub_56254(*(void *)(v3 + 472), &v3);
  sub_B25A0();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  return sub_B2410(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_B1914(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v63 = *(void *)(v10 - 8);
  uint64_t v64 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_494C(&qword_189CF8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_494C(&qword_189D00);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v65 = (uint64_t)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v63 - v19;
  uint64_t v21 = a2[3];
  uint64_t v22 = a2[4];
  sub_500C(a2, v21);
  unsigned __int16 v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 24))(v21, v22);
  if (v23 == 270)
  {
    uint64_t v24 = type metadata accessor for SpeakableString(0LL);
    uint64_t v25 = 1LL;
  }

  else
  {
    uint64_t v26 = sub_10F1C0(v23);
    uint64_t v28 = v27;
    String.toSpeakableString.getter(v26, v27);
    swift_bridgeObjectRelease(v28);
    uint64_t v24 = type metadata accessor for SpeakableString(0LL);
    uint64_t v25 = 0LL;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v20, v25, 1LL, v24);
  os_log_type_t v29 = (int *)type metadata accessor for WellnessLoggingMenstruationParameters(0LL);
  sub_A384((uint64_t)v20, a1 + v29[5]);
  type metadata accessor for DialogCalendar(0LL);
  uint64_t v30 = static DialogCalendar.make(date:)(a3);
  uint64_t v31 = v29[6];
  swift_release();
  *(void *)(a1 + v31) = v30;
  id v32 = [a4 flow];
  uint64_t v33 = a1 + v29[8];
  *(double *)uint64_t v33 = (double)(uint64_t)v32;
  *(_BYTE *)(v33 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0;
  sub_98DB4(a5, (uint64_t)v15, &qword_189CF8);
  uint64_t v34 = type metadata accessor for URL(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v15, 1LL, v34) == 1)
  {
    sub_279E0((uint64_t)v15, &qword_189CF8);
    uint64_t v35 = type metadata accessor for SpeakableString(0LL);
    uint64_t v36 = v65;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v65, 1LL, 1LL, v35);
  }

  else
  {
    id v37 = [objc_allocWithZone(SAUIAppPunchOut) init];
    URL._bridgeToObjectiveC()(v38);
    uint64_t v40 = v39;
    [v37 setPunchOutUri:v39];

    id v41 = v37;
    uint64_t v42 = UUID.init()();
    uint64_t v43 = UUID.uuidString.getter(v42);
    uint64_t v45 = v44;
    (*(void (**)(char *, uint64_t))(v63 + 8))(v12, v64);
    sub_125B84(v43, v45, v41);

    id v46 = [v41 dictionary];
    uint64_t v36 = v65;
    if (v46)
    {
      uint64_t v47 = v46;
      uint64_t v48 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
      id v66 = 0LL;
      id v49 = [v48 dataWithPropertyList:v47 format:200 options:0 error:&v66];
      id v50 = v66;
      if (v49)
      {
        uint64_t v51 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v49);
        unint64_t v53 = v52;

        Swift::String v54 = Data.base64EncodedString(options:)(0LL);
        String.toSpeakableString.getter(v54._countAndFlagsBits, v54._object);

        sub_A3CC(v51, v53);
        swift_bridgeObjectRelease(v54._object);
        uint64_t v55 = type metadata accessor for SpeakableString(0LL);
        uint64_t v56 = v36;
        uint64_t v57 = 0LL;
      }

      else
      {
        uint64_t v59 = v50;
        uint64_t v60 = _convertNSErrorToError(_:)();

        swift_willThrow(v61);
        swift_errorRelease(v60);
        uint64_t v55 = type metadata accessor for SpeakableString(0LL);
        uint64_t v56 = v36;
        uint64_t v57 = 1LL;
      }

      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v56, v57, 1LL, v55);
    }

    else
    {
      uint64_t v58 = type metadata accessor for SpeakableString(0LL);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v36, 1LL, 1LL, v58);
    }

    (*(void (**)(char *, uint64_t))(*(void *)(v34 - 8) + 8LL))(v15, v34);
  }

  return sub_A384(v36, a1);
}

uint64_t sub_B1D80(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18E3D4);
  *(void *)(v1 + 1sub_D878(v0 + 6) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_A108;
  return LogPeriodFlow.execute()(a1);
}

uint64_t destroy for LogPeriodFlow(void *a1)
{
  return swift_release();
}

uint64_t initializeWithCopy for LogPeriodFlow(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 2sub_D878(v0 + 4) = v4;
  (**(void (***)(void))(v4 - 8))();
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 6sub_D878(v0 + 4) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  __int128 v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 10sub_D878(v0 + 4) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  __int128 v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 14sub_D878(v0 + 4) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 120, a2 + 120);
  __int128 v8 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 18sub_D878(v0 + 4) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 160, a2 + 160);
  __int128 v9 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 22sub_D878(v0 + 4) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 200, a2 + 200);
  uint64_t v10 = *(void *)(a2 + 240);
  *(void *)(a1 + sub_A304(v0 - 176, v0 - 240) = v10;
  *(_BYTE *)(a1 + 24_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *(_BYTE *)(a2 + 248);
  *(_WORD *)(a1 + 249) = *(_WORD *)(a2 + 249);
  uint64_t v11 = *(void *)(a2 + 256);
  *(void *)(a1 + 2sub_D7EC(v0 + 16, v0 + 56) = v11;
  swift_unknownObjectRetain(v10);
  swift_retain(v11);
  return a1;
}

uint64_t assignWithCopy for LogPeriodFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 240);
  uint64_t v5 = *(void *)(a1 + 240);
  *(void *)(a1 + sub_A304(v0 - 176, v0 - 240) = v4;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v5);
  *(_BYTE *)(a1 + 24_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *(_BYTE *)(a2 + 248);
  *(_BYTE *)(a1 + 249) = *(_BYTE *)(a2 + 249);
  *(_BYTE *)(a1 + 250) = *(_BYTE *)(a2 + 250);
  *(void *)(a1 + 2sub_D7EC(v0 + 16, v0 + 56) = *(void *)(a2 + 256);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for LogPeriodFlow(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1sub_D878(v0 + 6) = v4;
  *(void *)(a1 + 3sub_D878(v0 + 2) = *(void *)(a2 + 32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + sub_D7EC(v0 + 16, v0 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 7sub_D878(v0 + 2) = *(void *)(a2 + 72);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 80));
  __int128 v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 9sub_D878(v0 + 6) = v5;
  *(void *)(a1 + 11sub_D878(v0 + 2) = *(void *)(a2 + 112);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 120));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 13sub_D878(v0 + 6) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 15sub_D878(v0 + 2) = *(void *)(a2 + 152);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 160));
  __int128 v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 17sub_D878(v0 + 6) = v6;
  *(void *)(a1 + 19sub_D878(v0 + 2) = *(void *)(a2 + 192);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 200));
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 21sub_D878(v0 + 6) = *(_OWORD *)(a2 + 216);
  uint64_t v7 = *(void *)(a2 + 240);
  uint64_t v8 = *(void *)(a1 + 240);
  *(void *)(a1 + 23sub_D878(v0 + 2) = *(void *)(a2 + 232);
  *(void *)(a1 + sub_A304(v0 - 176, v0 - 240) = v7;
  swift_unknownObjectRelease(v8);
  *(_BYTE *)(a1 + 24_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *(_BYTE *)(a2 + 248);
  *(_WORD *)(a1 + 249) = *(_WORD *)(a2 + 249);
  *(void *)(a1 + 2sub_D7EC(v0 + 16, v0 + 56) = *(void *)(a2 + 256);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for LogPeriodFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 264))
    {
      LODWORD(vsub_D878(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_D878(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(vsub_D878(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LogPeriodFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 23sub_D878(v0 + 2) = 0u;
    *(_OWORD *)(result + 21sub_D878(v0 + 6) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 18sub_D878(v0 + 4) = 0u;
    *(_OWORD *)(result + 16_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0u;
    *(_OWORD *)(result + 15sub_D878(v0 + 2) = 0u;
    *(_OWORD *)(result + 13sub_D878(v0 + 6) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 10sub_D878(v0 + 4) = 0u;
    *(_OWORD *)(result + 8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0u;
    *(_OWORD *)(result + 7sub_D878(v0 + 2) = 0u;
    *(_OWORD *)(result + sub_D7EC(v0 + 16, v0 + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 2sub_D878(v0 + 4) = 0u;
    *(_OWORD *)(result + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0u;
    *(_OWORD *)(result + 24_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 26sub_D878(v0 + 4) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 2sub_D878(v0 + 4) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 26sub_D878(v0 + 4) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LogPeriodFlow()
{
  return &type metadata for LogPeriodFlow;
}

uint64_t sub_B21A0(uint64_t a1)
{
  return sub_B1914(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40));
}

void sub_B21AC()
{
  uint64_t v0 = sub_B25E4();
  uint64_t v2 = v1(v0);
  sub_27A6C(v2);
  sub_A890();
}

uint64_t sub_B21D0()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_B21F4(uint64_t a1)
{
  __int128 v4 = (void *)swift_task_alloc(dword_18E40C);
  *(void *)(v2 + 1sub_D878(v0 + 6) = v4;
  *__int128 v4 = v2;
  v4[1] = sub_7564C;
  return sub_34F70(a1, v1 + 16);
}

uint64_t storeEnumTagSinglePayload for SpottingErrors(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(vsub_D878(v0 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_B228C + 4 * byte_13CCD0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_B22AC + 4 * byte_13CCD5[v4]))();
  }
}

_BYTE *sub_B228C(_BYTE *result, char a2)
{
  void *result = a2;
  return result;
}

_BYTE *sub_B22AC(_BYTE *result)
{
  void *result = 0;
  return result;
}

_DWORD *sub_B22B4(_DWORD *result, int a2)
{
  void *result = a2;
  return result;
}

_WORD *sub_B22BC(_WORD *result, __int16 a2)
{
  void *result = a2;
  return result;
}

_WORD *sub_B22C4(_WORD *result)
{
  void *result = 0;
  return result;
}

_DWORD *sub_B22CC(_DWORD *result)
{
  void *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SpottingErrors()
{
  return &type metadata for SpottingErrors;
}

unint64_t sub_B22EC()
{
  unint64_t result = qword_18E420;
  if (!qword_18E420)
  {
    unint64_t result = swift_getWitnessTable(&unk_13CE00, &type metadata for SpottingErrors);
    atomic_store(result, (unint64_t *)&qword_18E420);
  }

  return result;
}

uint64_t sub_B2328()
{
  uint64_t v2 = v0[182];
  uint64_t v3 = v0[150];
  *(void *)(v1 - 9sub_D878(v0 + 6) = v0[151];
  *(void *)(v1 - 8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v3;
  return swift_task_dealloc(v2);
}

uint64_t sub_B23B0()
{
  return swift_task_dealloc(*(void *)(v0 + 1232));
}

uint64_t sub_B23F4(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_B2410(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_B2420()
{
  return CATWrapper.__allocating_init(options:globals:)(v0, 0LL);
}

void sub_B242C()
{
  uint64_t v3 = *(void *)(v1 + 1456);
  *(void *)(v2 - 9sub_D878(v0 + 6) = *(void *)(v1 + 1432);
  *(void *)(v2 - 8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v3;
}

uint64_t sub_B245C()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t sub_B246C(uint64_t a1, uint64_t a2)
{
  return sub_5E408(a1, a2);
}

  ;
}

uint64_t sub_B24A4()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 144) + 8LL))(v0, *(void *)(v1 - 136));
}

uint64_t sub_B24B4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_B24C4()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1LL, v0);
}

uint64_t sub_B24F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a9, v11, v10, v9);
}

uint64_t sub_B2510()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(*(void *)(v3 - 80), v2, v1, v0);
}

uint64_t sub_B2528()
{
  return v0(v1, v2);
}

void sub_B253C()
{
  *(void *)(v1 - 8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *(void *)(v0 + 1456);
  *(void *)(v1 - 9sub_D878(v0 + 6) = *(void *)(v0 + 1432);
}

uint64_t sub_B2558@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_B2560@<X0>(uint64_t (*a1)(void, void)@<X8>)
{
  return a1(*(void *)(v1 - 88), *(void *)(v1 - 96));
}

uint64_t sub_B2568()
{
  return swift_task_dealloc(*(void *)(v0 + 664));
}

uint64_t sub_B2578()
{
  return v3(v2, v0, v1);
}

uint64_t sub_B2588()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v0, 1LL, v1);
}

uint64_t sub_B2598()
{
  return swift_errorRelease(v0);
}

uint64_t sub_B25A0()
{
  return swift_task_dealloc(*(void *)(v0 + 456));
}

uint64_t sub_B25B0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_B25C0()
{
  return Flow.eraseToAnyFlow()();
}

uint64_t sub_B25C8()
{
  return swift_errorRetain(v0);
}

uint64_t sub_B25D0( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  return sub_39178(a1, a2, (uint64_t *)va);
}

uint64_t sub_B25DC(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_B25E4()
{
  return 0LL;
}

uint64_t sub_B25F0()
{
  return swift_bridgeObjectRelease(v0);
}

void *sub_B25F8()
{
  return sub_500C(v0, v1);
}

uint64_t sub_B2604(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v3, v2);
}

uint64_t sub_B2610(char a1)
{
  return *(void *)&aThisweekthismo[8 * a1];
}

uint64_t sub_B2630(uint64_t a1)
{
  uint64_t v3 = *v1;
  v2[14] = a1;
  v2[15] = v3;
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  v2[16] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[17] = v5;
  v2[18] = sub_A5C0(v5);
  uint64_t v6 = type metadata accessor for Parse(0LL);
  v2[19] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[20] = v7;
  v2[21] = sub_A5C0(v7);
  uint64_t v8 = type metadata accessor for USOParse(0LL);
  v2[22] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[23] = v9;
  v2[24] = sub_A5C0(v9);
  uint64_t v10 = type metadata accessor for Input(0LL);
  v2[25] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[26] = v11;
  v2[27] = sub_A5C0(v11);
  uint64_t v12 = sub_D984();
  v2[28] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[29] = v13;
  v2[30] = sub_D8CC(v13);
  v2[31] = sub_A5B8();
  v2[32] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_B26F8(uint64_t a1)
{
  uint64_t v2 = v1 + 14;
  uint64_t v3 = v1[14];
  uint64_t v4 = (uint64_t)(v1 + 2);
  uint64_t v5 = v1[32];
  uint64_t v6 = v1[29];
  uint64_t v8 = v2[12];
  uint64_t v7 = v2[13];
  uint64_t v9 = v2[11];
  uint64_t v10 = Logger.wellness.unsafeMutableAddressor(a1);
  sub_A5DC(v10, v4);
  uint64_t v124 = v10;
  uint64_t v125 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  sub_DA2C(v5, v10, v125);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v3, v9);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  int v14 = v13;
  uint64_t v15 = v126;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v16 = v126[27];
    uint64_t v121 = v126[28];
    uint64_t v122 = v126[32];
    uint64_t v17 = v126[25];
    uint64_t v118 = v126[26];
    uint64_t v120 = v126[29];
    uint64_t v18 = v126[15];
    uint64_t v19 = sub_A5E8(22LL);
    uint64_t v129 = sub_A5E8(64LL);
    *(_DWORD *)uint64_t v19 = 136315394;
    uint64_t v20 = sub_D914(v18);
    v126[12] = sub_B3FE4(v20, v21, v22, v23, v24, v25, v26, v27, v111, v113, v129, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v126 + 12, v126 + 13, v19 + 4, v19 + 12);
    sub_369F4();
    *(_WORD *)(v19 + 1sub_D878(v0 + 2) = 2080;
    unint64_t v28 = sub_D838();
    HIDWORD(v11sub_D878(v0 + 4) = v14;
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter(v17, v28);
    unint64_t v31 = v30;
    v126[13] = sub_B3FE4(v29, v30, v32, v33, v34, v35, v36, v37, v112, v114, v116, v119);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v126 + 13, v2, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease(v31);
    (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v16, v17);
    sub_D9B0(&dword_0, v12, BYTE4(v113), "%s received input: %s", (uint8_t *)v19);
    swift_arrayDestroy(v115, 2LL);
    sub_5050(v115);
    sub_5050(v19);

    uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t))(v120 + 8);
    uint64_t v39 = v38(v122, v121);
  }

  else
  {
    uint64_t v40 = v126[32];
    uint64_t v41 = v126[28];
    uint64_t v42 = v126[29];
    (*(void (**)(void, void))(v126[26] + 8LL))(v126[27], v126[25]);

    uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t))(v42 + 8);
    uint64_t v39 = v38(v40, v41);
  }

  uint64_t v43 = v2;
  uint64_t v45 = v126 + 21;
  uint64_t v44 = v126[21];
  id v46 = v126 + 20;
  uint64_t v47 = v126[20];
  uint64_t v48 = v126[19];
  Input.parse.getter(v39);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v47 + 88))(v44, v48) == enum case for Parse.uso(_:))
  {
    id v49 = v43;
    uint64_t v127 = (void (*)(uint64_t, uint64_t))v38;
    uint64_t v45 = v15 + 24;
    uint64_t v50 = v15[24];
    uint64_t v51 = v15[23];
    uint64_t v52 = v15[21];
    uint64_t v53 = v15[18];
    uint64_t v54 = v15[17];
    uint64_t v123 = v15[16];
    (*(void (**)(uint64_t, void))(v15[20] + 96LL))(v52, v15[19]);
    uint64_t v55 = sub_DA34(v50, v52, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 32));
    USOParse.userParse.getter(v55);
    uint64_t v56 = sub_E8C24();
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v123);
    if (v56)
    {
      uint64_t v57 = swift_retain();
      uint64_t v58 = sub_A12B4(v57);
      uint64_t v59 = v58;
      if ((unint64_t)v58 >> 62)
      {
        if (v58 >= 0) {
          v58 &= 0xFFFFFFFFFFFFFF8uLL;
        }
        uint64_t v60 = _CocoaArrayWrapper.endIndex.getter(v58);
      }

      else
      {
        uint64_t v60 = *(void *)((char *)&dword_10 + (v58 & 0xFFFFFFFFFFFFF8LL));
      }

      if (v60 < 2) {
        goto LABEL_16;
      }
      unint64_t v61 = v59 & 0xC000000000000001LL;
      sub_398E0(0LL, (v59 & 0xC000000000000001LL) == 0, v59);
      uint64_t v62 = (v59 & 0xC000000000000001LL) != 0 ? specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v59) : sub_363E8();
      uint64_t v63 = dispatch thunk of UsoEntity_common_MeasurementComponent.value.getter(v62);
      uint64_t v64 = swift_release();
      if (!v63 || (uint64_t v65 = UsoEntity_common_Number.asDouble.getter(v64), v67 = v66, swift_release(), (v67 & 1) != 0))
      {
LABEL_16:
        sub_369F4();
      }

      else
      {
        sub_398E0(1LL, v61 == 0, v59);
        if (v61) {
          specialized _ArrayBuffer._getElementSlowPath(_:)(1LL, v59);
        }
        else {
          sub_363E8();
        }
        uint64_t v106 = sub_369F4();
        uint64_t v107 = dispatch thunk of UsoEntity_common_MeasurementComponent.value.getter(v106);
        uint64_t v108 = swift_release();
        if (v107)
        {
          uint64_t v81 = UsoEntity_common_Number.asDouble.getter(v108);
          char v110 = v109;
          swift_release();
          if ((v110 & 1) == 0)
          {
            sub_B3FF8(*v45, v15[23]);
            sub_B3FEC();
            uint64_t v76 = v15;
            uint64_t v101 = 0LL;
            goto LABEL_25;
          }
        }
      }

      uint64_t v69 = (uint64_t)(v49 - 6);
      uint64_t v70 = (os_log_s *)v15[31];
      uint64_t v71 = v15;
      uint64_t v72 = v15[28];
      sub_A5DC(v124, v69);
      uint64_t v73 = v125((uint64_t)v70, v124, v72);
      Logger.logObject.getter(v73);
      os_log_type_t v74 = sub_A898();
      if (os_log_type_enabled(v70, v74))
      {
        uint64_t v75 = (uint8_t *)sub_A5E8(2LL);
        *(_WORD *)uint64_t v75 = 0;
        _os_log_impl( &dword_0,  v70,  v74,  "Failed to populate LogBloodPressureIntent: missing systolic/diastolic values",  v75,  2u);
        sub_5050((uint64_t)v75);
      }

      uint64_t v76 = v71;
      uint64_t v77 = v71[31];
      uint64_t v78 = v76[28];
      uint64_t v80 = v76[23];
      uint64_t v79 = v76[24];
      sub_B3FEC();

      v127(v77, v78);
      sub_41BBC(v79, *(uint64_t (**)(uint64_t, uint64_t))(v80 + 8));
      uint64_t v65 = 0LL;
      uint64_t v81 = 0LL;
      goto LABEL_24;
    }

    uint64_t v38 = (uint64_t (*)(uint64_t, uint64_t))v127;
    uint64_t v68 = v124;
    uint64_t v43 = v49;
    id v46 = v15 + 23;
  }

  else
  {
    uint64_t v68 = v124;
  }

  sub_B3FF8(*v45, *v46);
  uint64_t v82 = (os_log_s *)v15[30];
  uint64_t v83 = v15[28];
  sub_A5DC(v68, (uint64_t)(v43 - 9));
  uint64_t v84 = v125((uint64_t)v82, v68, v83);
  uint64_t v85 = v82;
  Logger.logObject.getter(v84);
  os_log_type_t v86 = sub_A898();
  BOOL v87 = sub_46614(v86);
  uint64_t v88 = v15[30];
  uint64_t v89 = v15[28];
  if (!v87)
  {

    v38(v88, v89);
    uint64_t v65 = 0LL;
    uint64_t v81 = 0LL;
    uint64_t v76 = v15;
LABEL_24:
    uint64_t v101 = 1LL;
    goto LABEL_25;
  }

  uint64_t v90 = v15[15];
  uint64_t v76 = v15;
  uint64_t v128 = (void (*)(uint64_t, uint64_t))v38;
  uint64_t v91 = (uint8_t *)sub_A5E8(12LL);
  uint64_t v130 = sub_A5E8(32LL);
  *(_DWORD *)uint64_t v91 = 136315138;
  uint64_t v92 = sub_D914(v90);
  unint64_t v94 = v93;
  v15[11] = sub_B3FE4(v92, v93, v95, v96, v97, v98, v99, v100, v111, v113, v115, v117);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v43 - 3, v15 + 12, v91 + 4, v91 + 12);
  swift_bridgeObjectRelease(v94);
  _os_log_impl(&dword_0, v85, (os_log_type_t)v68, "%s received unsupported input", v91, 0xCu);
  uint64_t v101 = 1LL;
  sub_A81C(v130);
  sub_5050(v130);
  sub_5050((uint64_t)v91);

  v128(v88, v89);
  uint64_t v65 = 0LL;
  uint64_t v81 = 0LL;
LABEL_25:
  uint64_t v102 = v76[24];
  uint64_t v103 = v76[21];
  uint64_t v104 = v76[18];
  swift_task_dealloc(v76[32]);
  sub_A67C();
  sub_A760();
  sub_A910();
  swift_task_dealloc(v102);
  swift_task_dealloc(v103);
  swift_task_dealloc(v104);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v76[1])(v65, v81, v101);
}

void sub_B2DA4(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = type metadata accessor for Input(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_6D44();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = sub_D984();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_6D44();
  uint64_t v13 = v12 - v11;
  uint64_t v15 = Logger.wellness.unsafeMutableAddressor(v14);
  sub_A5DC(v15, (uint64_t)v33);
  uint64_t v29 = v10;
  uint64_t v30 = v9;
  sub_DA2C(v13, v15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = sub_A5E8(22LL);
    uint64_t v28 = sub_A5E8(64LL);
    uint64_t v32 = v28;
    *(_DWORD *)uint64_t v19 = 136315394;
    uint64_t v20 = sub_D914(v3);
    unint64_t v22 = v21;
    uint64_t v31 = sub_39178(v20, v21, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease(v22);
    *(_WORD *)(v19 + 1sub_D878(v0 + 2) = 2080;
    unint64_t v23 = sub_D838();
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v4, v23);
    unint64_t v26 = v25;
    uint64_t v31 = sub_39178(v24, v25, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease(v26);
    sub_B3FD4();
    sub_D9B0(&dword_0, v17, v18, "%s handling input: %s", (uint8_t *)v19);
    swift_arrayDestroy(v28, 2LL);
    sub_5050(v28);
    sub_5050(v19);
  }

  else
  {
    sub_B3FD4();
  }

  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v13, v30);
  static ActionForInput.handle()(v27);
  sub_D8FC();
}

uint64_t sub_B2FC4(uint64_t a1)
{
  v2[7] = a1;
  _BYTE v2[8] = v1;
  uint64_t v3 = sub_494C(&qword_189EE0);
  v2[9] = sub_A5C0(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v2[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[11] = v5;
  v2[12] = sub_D8CC(v5);
  v2[13] = sub_A5B8();
  uint64_t v6 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[14] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[15] = v7;
  v2[16] = sub_A5C0(v7);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_B3048()
{
  uint64_t v1 = *sub_500C((void *)(*(void *)(v0 + 64) + 104LL), *(void *)(*(void *)(v0 + 64) + 128LL));
  uint64_t v2 = unk_18ECAC;
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_18ECA8 + dword_18ECA8);
  sub_363E8();
  uint64_t v3 = (void *)swift_task_alloc(v2);
  *(void *)(v0 + 13sub_D878(v0 + 6) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_B30CC;
  return v5(v1, *(void *)(v0 + 64));
}

uint64_t sub_B30CC(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v2 + 136);
  uint64_t v4 = *v2;
  *(void *)(v4 + 14sub_D878(v0 + 4) = a1;
  swift_task_dealloc(v3);
  if (v1)
  {
    swift_task_dealloc(*(void *)(v4 + 128));
    sub_A67C();
    sub_A7C8();
    sub_A760();
    return sub_2499C(*(uint64_t (**)(void))(v4 + 8));
  }

  else
  {
    sub_A964();
    return sub_55F28(v6, v7, v8);
  }

uint64_t sub_B314C(uint64_t a1)
{
  uint64_t v2 = (void *)v1[18];
  uint64_t v4 = v1[12];
  uint64_t v3 = v1[13];
  uint64_t v5 = v1[11];
  uint64_t v7 = v1[8];
  uint64_t v6 = v1[9];
  static DialogPhase.clarification.getter(a1);
  uint64_t v8 = sub_DA2C(v4, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
  sub_B3FC4(v8, (uint64_t)sub_A633C);
  sub_41BBC(v3, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
  OutputGenerationManifest.canUseServerTTS.setter(0LL);
  sub_B3904(v6);
  uint64_t v9 = type metadata accessor for NLContextUpdate(0LL);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v6, 0LL, 1LL, v9);
  OutputGenerationManifest.nlContextUpdate.setter(v6);
  static String._unconditionallyBridgeFromObjectiveC(_:)([v2 patternId]);
  sub_DA44();
  sub_D9F8();
  sub_D7EC(v7 + 184, (uint64_t)(v1 + 2));
  uint64_t v10 = v1[5];
  uint64_t v11 = v1[6];
  sub_500C(v1 + 2, v10);
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)[1]);
  v1[19] = v12;
  *uint64_t v12 = v1;
  v12[1] = sub_B3298;
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)( v1[7],  v1[18],  v1[16],  v10,  v11);
}

uint64_t sub_B3298()
{
  uint64_t v3 = *(void *)(v2 + 152);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 160) = v0;
  swift_task_dealloc(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_B32E8()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 96);

  sub_202F4(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 16));
  sub_A67C();
  sub_A760();
  swift_task_dealloc(v2);
  sub_A910();
  return sub_61844(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_B3358()
{
  uint64_t v1 = *(void *)(v0 + 120);

  sub_202F4(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 16));
  swift_task_dealloc(*(void *)(v0 + 128));
  sub_A67C();
  sub_A7C8();
  sub_A760();
  return sub_2499C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_B33C0(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  v3[15] = *v2;
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v3[16] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[17] = v5;
  v3[18] = sub_D8CC(v5);
  v3[19] = sub_A5B8();
  uint64_t v6 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[20] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[21] = v7;
  v3[22] = sub_A5C0(v7);
  uint64_t v8 = sub_D984();
  v3[23] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[24] = v9;
  v3[25] = sub_A5C0(v9);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_B3450(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = (uint64_t)(v1 + 7);
  uint64_t v6 = v1 + 24;
  uint64_t v5 = v1[24];
  uint64_t v4 = v6[1];
  uint64_t v7 = v2[23];
  uint64_t v8 = v2[13];
  uint64_t v9 = Logger.wellness.unsafeMutableAddressor(a1);
  sub_A5DC(v9, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v9, v7);
  swift_errorRetain(v8);
  uint64_t v10 = swift_errorRetain(v8);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (sub_46614(v12))
  {
    uint64_t v28 = v2[24];
    uint64_t v29 = v2[23];
    uint64_t v30 = v2[25];
    uint64_t v13 = v2[15];
    uint64_t v14 = v2[13];
    uint64_t v15 = sub_A5E8(22LL);
    uint64_t v16 = (void *)sub_A5E8(8LL);
    uint64_t v27 = sub_A5E8(32LL);
    uint64_t v31 = v27;
    *(_DWORD *)uint64_t v15 = 136315394;
    uint64_t v17 = sub_D914(v13);
    unint64_t v19 = v18;
    v2[10] = sub_39178(v17, v18, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 10, v2 + 11, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v15 + 1sub_D878(v0 + 2) = 2112;
    swift_errorRetain(v14);
    uint64_t v20 = _swift_stdlib_bridgeErrorToNSError(v14);
    v2[11] = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 11, v2 + 12, v15 + 14, v15 + 22);
    *uint64_t v16 = v20;
    swift_errorRelease(v14);
    swift_errorRelease(v14);
    sub_D9B0(&dword_0, v11, (os_log_type_t)v9, "%s makeErrorResponse called with error: %@", (uint8_t *)v15);
    sub_494C(&qword_189CB8);
    sub_A81C((uint64_t)v16);
    sub_5050((uint64_t)v16);
    sub_A81C(v27);
    sub_5050(v27);
    sub_5050(v15);

    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v29);
  }

  else
  {
    uint64_t v22 = v2[24];
    uint64_t v21 = v2[25];
    uint64_t v23 = v2[23];
    uint64_t v24 = v2[13];
    swift_errorRelease(v24);
    swift_errorRelease(v24);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  }

  sub_500C((void *)(v2[14] + 64LL), *(void *)(v2[14] + 88LL));
  unint64_t v25 = (void *)swift_task_alloc(dword_18CCDC);
  v2[26] = v25;
  *unint64_t v25 = v2;
  v25[1] = sub_B36AC;
  return sub_764C8();
}

uint64_t sub_B36AC(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v2 + 208);
  uint64_t v4 = *v2;
  *(void *)(v4 + 21sub_D878(v0 + 6) = a1;
  swift_task_dealloc(v3);
  if (v1)
  {
    swift_task_dealloc(*(void *)(v4 + 200));
    sub_A67C();
    sub_A7C8();
    sub_A760();
    return sub_2499C(*(uint64_t (**)(void))(v4 + 8));
  }

  else
  {
    sub_A964();
    return sub_55F28(v6, v7, v8);
  }

uint64_t sub_B372C()
{
  uint64_t v1 = (void *)v0[27];
  uint64_t v3 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[14];
  static DialogPhase.error.getter();
  uint64_t v6 = sub_DA2C(v3, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
  sub_B3FC4(v6, (uint64_t)sub_A633C);
  sub_41BBC(v2, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  OutputGenerationManifest.canUseServerTTS.setter(0LL);
  static String._unconditionallyBridgeFromObjectiveC(_:)([v1 patternId]);
  sub_DA44();
  sub_D9F8();
  sub_D7EC(v5 + 184, (uint64_t)(v0 + 2));
  uint64_t v7 = v0[5];
  uint64_t v8 = v0[6];
  sub_500C(v0 + 2, v7);
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)[1]);
  v0[28] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_B383C;
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)( v0[12],  v0[27],  v0[22],  v7,  v8);
}

uint64_t sub_B383C()
{
  uint64_t v3 = *(void *)(v2 + 224);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 23sub_D878(v0 + 2) = v0;
  swift_task_dealloc(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_B388C()
{
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 160);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 16));
  sub_A67C();
  sub_A7C8();
  swift_task_dealloc(v4);
  sub_A910();
  return sub_61844(*(uint64_t (**)(void))(v0 + 8));
}

void sub_B3904(uint64_t a1@<X8>)
{
  uint64_t v80 = a1;
  uint64_t v1 = sub_D984();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_AA58();
  uint64_t v5 = (os_log_s *)(v3 - v4);
  __chkstk_darwin(v6);
  uint64_t v79 = (char *)&v67 - v7;
  uint64_t v8 = type metadata accessor for NLContextUpdate(0LL);
  uint64_t v69 = *(void *)(v8 - 8);
  uint64_t v70 = v8;
  sub_D978();
  __chkstk_darwin(v9);
  sub_6D44();
  uint64_t v12 = v11 - v10;
  uint64_t v78 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL);
  uint64_t v76 = *(void *)(v78 - 8);
  sub_D978();
  __chkstk_darwin(v13);
  sub_6D44();
  uint64_t v75 = v15 - v14;
  uint64_t v77 = type metadata accessor for Siri_Nlu_External_SystemPrompted(0LL);
  uint64_t v74 = *(void *)(v77 - 8);
  sub_D978();
  __chkstk_darwin(v16);
  sub_AA58();
  uint64_t v19 = v17 - v18;
  __chkstk_darwin(v20);
  uint64_t v73 = (char *)&v67 - v21;
  sub_494C(&qword_189ED0);
  sub_D978();
  __chkstk_darwin(v22);
  sub_6D44();
  uint64_t v25 = v24 - v23;
  uint64_t v26 = type metadata accessor for Siri_Nlu_External_UsoGraph(0LL);
  uint64_t v72 = *(void *)(v26 - 8);
  sub_D978();
  __chkstk_darwin(v27);
  sub_AA58();
  uint64_t v30 = v28 - v29;
  __chkstk_darwin(v31);
  uint64_t v71 = (uint64_t)&v67 - v32;
  type metadata accessor for UsoTask(0LL);
  uint64_t v33 = static UsoTask.createHealthLog(_:measurementNeeded:)(0LL, 0LL, 1LL);
  UsoTaskBuilder.toProtobufUsoGraph()();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v25, 1LL, v26) == 1)
  {
    uint64_t v34 = sub_D7AC(v25);
    uint64_t v35 = Logger.health.unsafeMutableAddressor(v34);
    sub_A5DC(v35, (uint64_t)v83);
    uint64_t v36 = sub_DA2C((uint64_t)v5, v35, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
    Logger.logObject.getter(v36);
    os_log_type_t v37 = sub_A898();
    if (os_log_type_enabled(v5, v37))
    {
      uint64_t v38 = (uint8_t *)sub_A5E8(2LL);
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl(&dword_0, v5, v37, "Failed to create protobuf UsoGraph from UsoTask", v38, 2u);
      sub_5050((uint64_t)v38);
    }

    uint64_t v39 = sub_41BBC((uint64_t)v5, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    NLContextUpdate.init()(v39);
    swift_release();
  }

  else
  {
    uint64_t v40 = v72;
    uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 32);
    uint64_t v68 = v1;
    uint64_t v42 = v33;
    uint64_t v43 = v71;
    uint64_t v44 = sub_DA34(v71, v25, v41);
    uint64_t v45 = v73;
    Siri_Nlu_External_SystemPrompted.init()(v44);
    uint64_t v46 = v43;
    uint64_t v47 = v42;
    sub_DA34(v30, v46, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 16));
    uint64_t v48 = Siri_Nlu_External_SystemPrompted.target.setter(v30);
    uint64_t v49 = v75;
    Siri_Nlu_External_SystemDialogAct.init()(v48);
    (*(void (**)(uint64_t, char *, uint64_t))(v74 + 16))(v19, v45, v77);
    uint64_t v50 = Siri_Nlu_External_SystemDialogAct.prompted.setter(v19);
    NLContextUpdate.init()(v50);
    uint64_t v51 = sub_494C(&qword_189ED8);
    uint64_t v52 = v76;
    uint64_t v53 = *(unsigned __int8 *)(v76 + 80);
    uint64_t v54 = (v53 + 32) & ~v53;
    uint64_t v55 = swift_allocObject(v51, v54 + *(void *)(v76 + 72), v53 | 7);
    *(_OWORD *)(v55 + 1sub_D878(v0 + 6) = xmmword_137250;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v55 + v54, v49, v78);
    uint64_t v56 = NLContextUpdate.nluSystemDialogActs.setter(v55);
    uint64_t v57 = Logger.health.unsafeMutableAddressor(v56);
    sub_A5DC(v57, (uint64_t)v83);
    uint64_t v58 = v68;
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v79, v57, v68);
    uint64_t v59 = swift_retain_n(v42, 2LL);
    uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
    os_log_type_t v61 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v63 = sub_A5E8(32LL);
      uint64_t v81 = v42;
      uint64_t v82 = v63;
      *(_DWORD *)uint64_t v62 = 136315138;
      char v67 = v62 + 4;
      uint64_t common_HealthLog = type metadata accessor for UsoTaskBuilder_create_common_HealthLog(0LL);
      swift_retain();
      uint64_t v65 = String.init<A>(describing:)(&v81, common_HealthLog);
      uint64_t v81 = sub_39178(v65, v66, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v67, v62 + 12);
      swift_release_n(v47, 2LL);
      sub_369F4();
      _os_log_impl(&dword_0, v60, v61, "Built nlContextUpdate with SystemPrompted for task: %s", v62, 0xCu);
      sub_A81C(v63);
      sub_5050(v63);
      sub_5050((uint64_t)v62);
      swift_release();

      (*(void (**)(char *, uint64_t))(v2 + 8))(v79, v68);
    }

    else
    {
      swift_release_n(v42, 3LL);

      (*(void (**)(char *, uint64_t))(v2 + 8))(v79, v58);
    }

    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v75, v78);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v73, v77);
    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v71, v26);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 32))(v80, v12, v70);
  }

  sub_D8FC();
}

uint64_t type metadata accessor for LogBloodPressurePromptStartegy()
{
  return objc_opt_self(&OBJC_CLASS____TtC18WellnessFlowPlugin30LogBloodPressurePromptStartegy);
}

uint64_t sub_B3E50(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 1sub_D878(v0 + 6) = a1;
  uint64_t v4 = (void *)swift_task_alloc(dword_18E454);
  *(void *)(v2 + 2sub_D878(v0 + 4) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_B3EA0;
  return sub_B2630(a2);
}

uint64_t sub_B3EA0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v8 = *v4;
  uint64_t v9 = *(void *)(*v4 + 24);
  uint64_t v10 = *v4;
  swift_task_dealloc(v9);
  if (!v3)
  {
    uint64_t v11 = *(void *)(v8 + 16);
    *(void *)uint64_t v11 = a1;
    *(void *)(v11 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a2;
    *(_BYTE *)(v11 + 1sub_D878(v0 + 6) = a3 & 1;
  }

  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t sub_B3F14(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18E45C);
  *(void *)(v1 + 1sub_D878(v0 + 6) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_D8AC;
  return sub_B2FC4(a1);
}

uint64_t sub_B3F64(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_18E464);
  *(void *)(v2 + 1sub_D878(v0 + 6) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_D8AC;
  return sub_B33C0(a1, a2);
}

uint64_t sub_B3FC4(uint64_t a1, uint64_t a2)
{
  return OutputGenerationManifest.init(dialogPhase:_:)(v2, a2, 0LL);
}

uint64_t sub_B3FD4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_B3FE4( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  return sub_39178(a1, a2, (uint64_t *)va);
}

uint64_t sub_B3FEC()
{
  return swift_release_n(v0, 2LL);
}

uint64_t sub_B3FF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, void))(a2 + 8))(a1, *v2);
}

uint64_t sub_B4004@<X0>( __int128 *a1@<X0>, __int128 *a2@<X1>, const void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)(a5 + sub_A304(v0 - 176, v0 - 240) = a4;
  *(_BYTE *)(a5 + 24_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0;
  sub_AA78();
  sub_A768();
  *(void *)(a5 + 2sub_D7EC(v0 + 16, v0 + 56) = sub_BAFD8();
  type metadata accessor for WellnessQueryingCATsSimple(0LL);
  sub_A768();
  uint64_t result = sub_BAFD8();
  *(void *)(a5 + 26sub_D878(v0 + 4) = result;
  *(_BYTE *)(a5 + 27sub_D878(v0 + 2) = 60;
  return result;
}

uint64_t destroy for GetSleepAnalysisFlow(void *a1)
{
  return swift_release();
}

uint64_t initializeWithCopy for GetSleepAnalysisFlow(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 2sub_D878(v0 + 4) = v4;
  (**(void (***)(void))(v4 - 8))();
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 6sub_D878(v0 + 4) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  __int128 v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 10sub_D878(v0 + 4) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  __int128 v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 14sub_D878(v0 + 4) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 120, a2 + 120);
  __int128 v8 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 18sub_D878(v0 + 4) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 160, a2 + 160);
  __int128 v9 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 22sub_D878(v0 + 4) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 200, a2 + 200);
  uint64_t v10 = *(void *)(a2 + 240);
  *(void *)(a1 + sub_A304(v0 - 176, v0 - 240) = v10;
  *(_BYTE *)(a1 + 24_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *(_BYTE *)(a2 + 248);
  uint64_t v11 = *(void *)(a2 + 256);
  uint64_t v12 = *(void *)(a2 + 264);
  *(void *)(a1 + 2sub_D7EC(v0 + 16, v0 + 56) = v11;
  *(void *)(a1 + 26sub_D878(v0 + 4) = v12;
  *(_BYTE *)(a1 + 27sub_D878(v0 + 2) = *(_BYTE *)(a2 + 272);
  swift_unknownObjectRetain(v10);
  swift_retain(v11);
  swift_retain(v12);
  return a1;
}

uint64_t assignWithCopy for GetSleepAnalysisFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 240);
  uint64_t v5 = *(void *)(a1 + 240);
  *(void *)(a1 + sub_A304(v0 - 176, v0 - 240) = v4;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v5);
  *(_BYTE *)(a1 + 24_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *(_BYTE *)(a2 + 248);
  *(void *)(a1 + 2sub_D7EC(v0 + 16, v0 + 56) = *(void *)(a2 + 256);
  swift_retain();
  swift_release();
  *(void *)(a1 + 26sub_D878(v0 + 4) = *(void *)(a2 + 264);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 27sub_D878(v0 + 2) = *(_BYTE *)(a2 + 272);
  return a1;
}

void *initializeWithTake for GetSleepAnalysisFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x111uLL);
}

uint64_t assignWithTake for GetSleepAnalysisFlow(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1sub_D878(v0 + 6) = v4;
  *(void *)(a1 + 3sub_D878(v0 + 2) = *(void *)(a2 + 32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + sub_D7EC(v0 + 16, v0 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 7sub_D878(v0 + 2) = *(void *)(a2 + 72);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 80));
  __int128 v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 9sub_D878(v0 + 6) = v5;
  *(void *)(a1 + 11sub_D878(v0 + 2) = *(void *)(a2 + 112);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 120));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 13sub_D878(v0 + 6) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 15sub_D878(v0 + 2) = *(void *)(a2 + 152);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 160));
  __int128 v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 17sub_D878(v0 + 6) = v6;
  *(void *)(a1 + 19sub_D878(v0 + 2) = *(void *)(a2 + 192);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 200));
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 21sub_D878(v0 + 6) = *(_OWORD *)(a2 + 216);
  uint64_t v7 = *(void *)(a2 + 240);
  uint64_t v8 = *(void *)(a1 + 240);
  *(void *)(a1 + 23sub_D878(v0 + 2) = *(void *)(a2 + 232);
  *(void *)(a1 + sub_A304(v0 - 176, v0 - 240) = v7;
  swift_unknownObjectRelease(v8);
  *(_BYTE *)(a1 + 24_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *(_BYTE *)(a2 + 248);
  *(void *)(a1 + 2sub_D7EC(v0 + 16, v0 + 56) = *(void *)(a2 + 256);
  swift_release();
  *(void *)(a1 + 26sub_D878(v0 + 4) = *(void *)(a2 + 264);
  swift_release();
  *(_BYTE *)(a1 + 27sub_D878(v0 + 2) = *(_BYTE *)(a2 + 272);
  return a1;
}

uint64_t getEnumTagSinglePayload for GetSleepAnalysisFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 273))
    {
      LODWORD(vsub_D878(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_D878(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(vsub_D878(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GetSleepAnalysisFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 26sub_D878(v0 + 4) = 0LL;
    *(_OWORD *)(result + 24_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0u;
    *(_OWORD *)(result + 23sub_D878(v0 + 2) = 0u;
    *(_OWORD *)(result + 21sub_D878(v0 + 6) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 18sub_D878(v0 + 4) = 0u;
    *(_OWORD *)(result + 16_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0u;
    *(_OWORD *)(result + 15sub_D878(v0 + 2) = 0u;
    *(_OWORD *)(result + 13sub_D878(v0 + 6) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 10sub_D878(v0 + 4) = 0u;
    *(_OWORD *)(result + 8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0u;
    *(_OWORD *)(result + 7sub_D878(v0 + 2) = 0u;
    *(_OWORD *)(result + sub_D7EC(v0 + 16, v0 + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 2sub_D878(v0 + 4) = 0u;
    *(_OWORD *)(result + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0u;
    *(_BYTE *)(result + 27sub_D878(v0 + 2) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 3) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 2sub_D878(v0 + 4) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 3) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for GetSleepAnalysisFlow()
{
  return &type metadata for GetSleepAnalysisFlow;
}

uint64_t sub_B44E4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_89420();
  return Flow.deferToExecuteAsync(_:)(a1, a2, &type metadata for GetSleepAnalysisFlow, v4);
}

uint64_t sub_B4524(uint64_t a1)
{
  v2[108] = v1;
  v2[107] = a1;
  uint64_t v3 = type metadata accessor for UnavailableDataFlow(0LL);
  v2[109] = v3;
  v2[110] = sub_A5C0(*(void *)(v3 - 8));
  sub_494C(&qword_189BA0);
  v2[111] = sub_A5B8();
  v2[112] = sub_A5B8();
  uint64_t v4 = type metadata accessor for CATOption(0LL);
  v2[113] = sub_A5C0(*(void *)(v4 - 8));
  uint64_t v5 = sub_D984();
  v2[114] = v5;
  v2[115] = *(void *)(v5 - 8);
  v2[116] = sub_A5B8();
  v2[117] = sub_A5B8();
  uint64_t v6 = sub_ABEC();
  v2[118] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[119] = v7;
  v2[120] = sub_A5C0(v7);
  sub_494C(&qword_189CE8);
  v2[121] = sub_A5B8();
  v2[122] = sub_A5B8();
  v2[123] = sub_A5B8();
  v2[124] = sub_A5B8();
  uint64_t v8 = sub_A8E4();
  v2[125] = v8;
  v2[126] = *(void *)(v8 - 8);
  v2[127] = sub_A5B8();
  v2[128] = sub_A5B8();
  v2[129] = sub_A5B8();
  v2[130] = sub_A5B8();
  v2[131] = sub_A5B8();
  v2[132] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

#error "B4B00: call analysis failed (funcsize=291)"
uint64_t sub_B4B28()
{
  sub_AA10();
  sub_A964();
  return sub_A5D0();
}

#error "B51B0: call analysis failed (funcsize=398)"
uint64_t sub_B51D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  sub_7DEFC();
  sub_7DEEC();
  *(void *)(v1 + 111sub_D878(v0 + 2) = v0;
  sub_36900(v2);
  sub_A964();
  return sub_A5D0();
}

#error "B5274: call analysis failed (funcsize=34)"
uint64_t sub_B529C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  sub_7DEFC();
  sub_7DEEC();
  *(void *)(v1 + 112_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v0;
  sub_36900(v2);
  sub_A964();
  return sub_A5D0();
}

#error "B5338: call analysis failed (funcsize=34)"
id sub_B5360()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Class isa;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  Class v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v1 = v0;
  unint64_t v2 = sub_BB308();
  uint64_t v43 = *(void *)(v2 - 8);
  uint64_t v44 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_494C(&qword_189BA0);
  sub_6D20();
  __chkstk_darwin(v5);
  sub_3751C();
  uint64_t v46 = v6;
  __chkstk_darwin(v7);
  __int128 v9 = (char *)&v42 - v8;
  sub_494C(&qword_189CE8);
  sub_6D20();
  __chkstk_darwin(v10);
  sub_3751C();
  uint64_t v49 = v11;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v42 - v13;
  uint64_t v15 = sub_A8E4();
  uint64_t v45 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  sub_3751C();
  uint64_t v48 = v16;
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v42 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v42 - v21;
  uint64_t v47 = [objc_allocWithZone((Class)type metadata accessor for GetSleepAnalysisIntent(0)) init];
  sub_500C(v0, v0[3]);
  sub_BB160();
  uint64_t v23 = sub_ABEC();
  uint64_t v24 = sub_72A58((uint64_t)v9);
  if (v25)
  {
    sub_279E0((uint64_t)v9, &qword_189BA0);
    uint64_t v26 = sub_7DF0C((uint64_t)v14, 1LL);
  }

  else
  {
    DateInterval.start.getter(v24);
    sub_D970((uint64_t)v9, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8LL));
    sub_7DF0C((uint64_t)v14, 0LL);
    uint64_t v26 = sub_A614((uint64_t)v14, 1LL, v15);
    if (!v25)
    {
      uint64_t v28 = v45;
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v22, v14, v15);
      goto LABEL_7;
    }
  }

  uint64_t v27 = Date.init()(v26);
  static Calendar.current.getter(v27);
  Calendar.startOfDay(for:)(v20);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v4, v44);
  uint64_t v28 = v45;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v20, v15);
  sub_279E0((uint64_t)v14, &qword_189CE8);
LABEL_7:
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  sub_BB2E4((uint64_t)v22);
  uint64_t v30 = v47;
  sub_36F44(v47, "setStart:");

  uint64_t v31 = v1[3];
  uint64_t v32 = v1[4];
  sub_500C(v1, v31);
  uint64_t v33 = v46;
  (*(void (**)(uint64_t, uint64_t))(v32 + 32))(v31, v32);
  uint64_t v34 = sub_72A58(v33);
  if (v25)
  {
    sub_279E0(v33, &qword_189BA0);
    uint64_t v38 = sub_7DF0C(v49, 1LL);
    uint64_t v35 = v48;
LABEL_12:
    Date.init()(v38);
    sub_77A8C(v35);
    uint64_t v39 = sub_BB2E4((uint64_t)v20);
    sub_72F7C(v39, &qword_189CE8);
    goto LABEL_13;
  }

  uint64_t v36 = v49;
  DateInterval.end.getter(v34);
  sub_D970(v33, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8LL));
  sub_7DF0C(v36, 0LL);
  uint64_t v38 = sub_A614(v36, 1LL, v15);
  uint64_t v35 = v48;
  if (v37) {
    goto LABEL_12;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v48, v36, v15);
LABEL_13:
  uint64_t v40 = Date._bridgeToObjectiveC()().super.isa;
  sub_BB2E4(v35);
  sub_36F44(v30, "setEnd:");

  return v30;
}

uint64_t sub_B5720(uint64_t a1, uint64_t a2)
{
  v3[151] = v2;
  v3[150] = a2;
  v3[149] = a1;
  uint64_t v4 = sub_494C(&qword_18A1A8);
  v3[152] = sub_A5C0(*(void *)(v4 - 8));
  sub_494C(&qword_189D00);
  v3[153] = sub_A5B8();
  v3[154] = sub_A5B8();
  v3[155] = type metadata accessor for SleepQueryModel(0LL);
  v3[156] = sub_A5B8();
  v3[157] = sub_A5B8();
  v3[158] = sub_A5B8();
  v3[159] = sub_A5B8();
  v3[160] = type metadata accessor for SnippetHeaderModel(0LL);
  v3[161] = sub_A5B8();
  v3[162] = sub_A5B8();
  v3[163] = sub_A5B8();
  v3[164] = sub_A5B8();
  uint64_t v5 = sub_D984();
  v3[165] = v5;
  v3[166] = *(void *)(v5 - 8);
  v3[167] = sub_A5B8();
  v3[168] = sub_A5B8();
  v3[169] = sub_A5B8();
  v3[170] = sub_A5B8();
  v3[171] = sub_A5B8();
  v3[172] = sub_A5B8();
  v3[173] = sub_A5B8();
  v3[174] = sub_A5B8();
  v3[175] = sub_A5B8();
  uint64_t v6 = type metadata accessor for Calendar.Component(0LL);
  v3[176] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[177] = v7;
  v3[178] = sub_A5C0(v7);
  uint64_t v8 = sub_BB308();
  v3[179] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[180] = v9;
  v3[181] = sub_A5C0(v9);
  uint64_t v10 = sub_ABEC();
  v3[182] = v10;
  v3[183] = *(void *)(v10 - 8);
  v3[184] = sub_A5B8();
  v3[185] = sub_A5B8();
  sub_494C(&qword_189CF8);
  v3[186] = sub_A5B8();
  v3[187] = sub_A5B8();
  sub_494C(&qword_189BA0);
  v3[188] = sub_A5B8();
  v3[189] = sub_A5B8();
  v3[190] = sub_A5B8();
  uint64_t v11 = sub_A8E4();
  v3[191] = v11;
  v3[192] = *(void *)(v11 - 8);
  v3[193] = sub_A5B8();
  v3[194] = sub_A5B8();
  v3[195] = sub_A5B8();
  v3[196] = sub_A5B8();
  v3[197] = sub_A5B8();
  sub_494C(&qword_189CE8);
  v3[198] = sub_A5B8();
  v3[199] = sub_A5B8();
  v3[200] = sub_A5B8();
  v3[201] = sub_A5B8();
  v3[202] = sub_A5B8();
  v3[203] = sub_A5B8();
  v3[204] = sub_A5B8();
  v3[205] = sub_A5B8();
  v3[206] = sub_A5B8();
  v3[207] = sub_A5B8();
  v3[208] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_B59EC(uint64_t a1)
{
  id v3 = sub_566D0(a1, "daysWithAsleepData");
  v1[209] = v3;
  id v4 = sub_566D0((uint64_t)v3, "totalInBedDuration");
  v1[210] = v5;
  id v6 = sub_566D0((uint64_t)v4, "totalAsleepDuration");
  v1[211] = v7;
  id v8 = sub_566D0((uint64_t)v6, "daysWithAsleepData");
  v1[212] = v8;
  v1[213] = sub_566D0((uint64_t)v8, "daysSummarized");
  uint64_t v9 = type metadata accessor for DialogCalendarRange.Builder(0LL);
  sub_A72C(v9);
  uint64_t v10 = DialogCalendarRange.Builder.init()();
  p_os_log_type_t type = &stru_187FF0.type;
  id v12 = sub_5693C(v10, "start");
  if (v12)
  {
    uint64_t v13 = v12;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v12);

    uint64_t v14 = 0LL;
  }

  else
  {
    uint64_t v14 = 1LL;
  }

  uint64_t v15 = (id *)(v1 + 149);
  uint64_t v16 = v1[207];
  sub_9A688(v16, v14);
  sub_BB010(v16, v17, &qword_189CE8);
  uint64_t v18 = sub_BB0D8();
  int v19 = v18;
  if ((_DWORD)v18)
  {
    sub_57F00(v18, &qword_189CE8);
    uint64_t v20 = 0LL;
  }

  else
  {
    uint64_t v21 = sub_BAD48();
    sub_57F00(v21, &qword_189CE8);
    Date.timeIntervalSince1970.getter();
    sub_BAF18();
    uint64_t v20 = v2;
  }

  id v22 = *v15;
  dispatch thunk of DialogCalendarRange.Builder.withStartSecs(_:)(v20, v19 != 0);
  sub_36BE0();
  uint64_t v23 = &stru_187FF0.type;
  id v24 = [v22 end];
  if (v24)
  {
    uint64_t v25 = v24;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v24);

    uint64_t v26 = 0LL;
  }

  else
  {
    uint64_t v26 = 1LL;
  }

  uint64_t v27 = v1[205];
  sub_9A688(v27, v26);
  sub_BB010(v27, v28, &qword_189CE8);
  uint64_t v29 = sub_BB0D8();
  int v30 = v29;
  if ((_DWORD)v29)
  {
    sub_57F00(v29, &qword_189CE8);
    uint64_t v31 = 0LL;
  }

  else
  {
    uint64_t v32 = sub_BAD48();
    sub_57F00(v32, &qword_189CE8);
    Date.timeIntervalSince1970.getter();
    sub_BAF18();
    uint64_t v31 = v2;
  }

  BOOL v33 = v30 != 0;
  uint64_t v34 = v1[190];
  uint64_t v35 = v1[182];
  uint64_t v36 = (void *)v1[149];
  dispatch thunk of DialogCalendarRange.Builder.withEndSecs(_:)(v31, v33);
  uint64_t v37 = sub_367AC();
  v1[214] = dispatch thunk of DialogCalendarRange.Builder.build()(v37);
  sub_3652C();
  sub_9A688(v34, 1LL);
  id v38 = [v36 start];
  uint64_t v41 = v1[204];
  if (!v38)
  {
    sub_6D78(v1[204], v39, v40, v1[191]);
    goto LABEL_19;
  }

  uint64_t v42 = v38;
  uint64_t v43 = v1[192];
  sub_BB1D4((uint64_t)v38);

  uint64_t v44 = *(uint64_t (**)(void, void, void))(v43 + 32);
  sub_BB09C();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v41, 0LL, 1LL, v35);
  sub_A614(v41, 1LL, v35);
  if (v45)
  {
LABEL_19:
    uint64_t v73 = v1[204];
    goto LABEL_22;
  }

  uint64_t v46 = v44(v1[196], v1[204], v1[191]);
  id v47 = sub_566D0(v46, "end");
  uint64_t v50 = v1[203];
  if (v47)
  {
    uint64_t v51 = v47;
    sub_BB1D4((uint64_t)v47);

    sub_BB09C();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v50, 0LL, 1LL, v35);
    sub_A614(v50, 1LL, v35);
    if (!v45)
    {
      uint64_t v52 = v1[197];
      uint64_t v53 = v1[196];
      uint64_t v54 = v1[195];
      uint64_t v55 = v1[194];
      uint64_t v56 = v1[192];
      uint64_t v57 = v1[191];
      uint64_t v58 = v1[190];
      uint64_t v59 = v1[189];
      uint64_t v174 = v1[182];
      sub_56AA8(v54, v1[203]);
      uint64_t v60 = sub_BB0AC();
      sub_56AA8(v60, v61);
      sub_56AA8(v55, v54);
      DateInterval.init(start:end:)(v52, v55);
      uint64_t v62 = *(void (**)(uint64_t))(v56 + 8);
      uint64_t v23 = (char **)(&stru_187FF0 + 16);
      uint64_t v63 = sub_BB2F4();
      v62(v63);
      ((void (*)(uint64_t, uint64_t))v62)(v53, v57);
      sub_464D0(v58);
      sub_BB03C(v59, v64, v65, v66, v67, v68, v69, v70, v164, v165, v166, v167, v168, v169, v172, v174);
      uint64_t v71 = v59;
      uint64_t v15 = (id *)(v1 + 149);
      uint64_t v72 = v58;
      p_os_log_type_t type = (char **)(&stru_187FF0 + 16);
      sub_BAFF8(v71, v72);
      goto LABEL_23;
    }
  }

  else
  {
    sub_6D78(v1[203], v48, v49, v1[191]);
  }

  uint64_t v74 = v1[203];
  sub_565A8(v1[192]);
  uint64_t v73 = v74;
LABEL_22:
  sub_279E0(v73, &qword_189CE8);
LABEL_23:
  uint64_t v75 = v1[188];
  uint64_t v76 = v1[151];
  sub_F4F10(*(unsigned __int8 *)(v76 + 272), v1[190]);
  uint64_t v77 = sub_BB0AC();
  sub_A44C(v77, v78, v79);
  sub_72A58(v75);
  if (v45)
  {
    sub_279E0(v1[188], &qword_189BA0);
    goto LABEL_36;
  }

  uint64_t v178 = (uint64_t)v15;
  uint64_t v80 = v1[197];
  uint64_t v81 = v1[192];
  uint64_t v82 = v1[181];
  uint64_t v83 = v1[180];
  uint64_t v173 = v76;
  uint64_t v175 = v1[179];
  uint64_t v84 = v1[178];
  uint64_t v85 = v1[177];
  uint64_t v86 = v1[176];
  uint64_t v87 = (*(uint64_t (**)(void, void, void))(v1[183] + 32LL))(v1[185], v1[188], v1[182]);
  static Calendar.current.getter(v87);
  uint64_t v88 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v85 + 104))( v84,  enum case for Calendar.Component.day(_:),  v86);
  Date.init()(v88);
  Calendar.date(byAdding:value:to:wrappingComponents:)(v84, -1LL, v80, 0LL);
  uint64_t v89 = *(void (**)(uint64_t))(v81 + 8);
  uint64_t v90 = sub_BAFCC();
  v89(v90);
  sub_24A58(*(uint64_t (**)(uint64_t, uint64_t))(v85 + 8));
  uint64_t v91 = *(uint64_t (**)(uint64_t, uint64_t))(v83 + 8);
  v91(v82, v175);
  int v92 = sub_B2588();
  if (v92 == 1)
  {
    uint64_t v93 = sub_565A8(v1[183]);
    sub_57F00(v93, &qword_189CE8);
LABEL_33:
    p_os_log_type_t type = (char **)(&stru_187FF0 + 16);
    uint64_t v15 = (id *)v178;
    uint64_t v23 = (char **)(&stru_187FF0 + 16);
    uint64_t v76 = v173;
    goto LABEL_36;
  }

  uint64_t v94 = v1[197];
  uint64_t v95 = v1[194];
  uint64_t v96 = v1[193];
  uint64_t v97 = v1[191];
  uint64_t v98 = v1[181];
  uint64_t v170 = v1[179];
  uint64_t v99 = sub_DA2C(v96, v1[202], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1[192] + 32LL));
  uint64_t v100 = static Calendar.current.getter(v99);
  uint64_t v101 = DateInterval.start.getter(v100);
  DateInterval.end.getter(v101);
  char v176 = Calendar.isDate(_:inSameDayAs:)(v94, v95);
  ((void (*)(uint64_t, uint64_t))v89)(v95, v97);
  sub_BB27C();
  uint64_t v102 = v91(v98, v170);
  uint64_t v103 = static Calendar.current.getter(v102);
  DateInterval.end.getter(v103);
  char v104 = Calendar.isDate(_:inSameDayAs:)(v94, v96);
  sub_BB27C();
  uint64_t v105 = v91(v98, v170);
  uint64_t v106 = v1[183];
  if ((v176 & 1) == 0 || (v104 & 1) == 0)
  {
    ((void (*)(void, void))v89)(v1[193], v1[191]);
    sub_6E0C(*(uint64_t (**)(uint64_t, uint64_t))(v106 + 8));
    goto LABEL_33;
  }

  uint64_t v177 = (uint64_t (*)(uint64_t, uint64_t))v89;
  uint64_t v107 = v1[175];
  uint64_t v108 = v1[166];
  uint64_t v109 = Logger.wellness.unsafeMutableAddressor(v105);
  sub_A5DC(v109, (uint64_t)(v1 + 108));
  sub_DA2C(v107, v109, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v108 + 16));
  uint64_t v110 = sub_BB180(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 16));
  uint64_t v111 = (os_log_s *)Logger.logObject.getter(v110);
  os_log_type_t v112 = static os_log_type_t.debug.getter();
  BOOL v113 = os_log_type_enabled(v111, v112);
  uint64_t v114 = v1[182];
  uint64_t v115 = v1[175];
  if (v113)
  {
    uint64_t v168 = v1[166];
    uint64_t v170 = (uint64_t)(v1 + 148);
    uint64_t v167 = v1[165];
    uint64_t v116 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v166 = v115;
    uint64_t v117 = sub_A5E8(32LL);
    uint64_t v179 = v117;
    *(_DWORD *)uint64_t v116 = 136315138;
    uint64_t v165 = (uint64_t)(v116 + 4);
    sub_A410( &qword_18E5C8,  (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval,  (uint64_t)&protocol conformance descriptor for DateInterval);
    uint64_t v119 = dispatch thunk of CustomStringConvertible.description.getter(v114, v118);
    unint64_t v121 = v120;
    v1[148] = sub_39178(v119, v120, &v179);
    sub_46578((uint64_t)(v1 + 148), v178, (uint64_t)(v116 + 4));
    swift_bridgeObjectRelease(v121);
    sub_BAFB8();
    sub_DA24(&dword_0, v111, v112, "%s seems like a request for last night, removing intervals from deep link", v116);
    sub_A81C(v117);
    sub_5050(v117);
    sub_5050((uint64_t)v116);

    (*(void (**)(uint64_t, uint64_t))(v168 + 8))(v166, v167);
  }

  else
  {
    sub_BAFB8();

    uint64_t v122 = sub_BAFA0();
    v124(v122, v123);
  }

  uint64_t v125 = v1[187];
  uint64_t v126 = v1[185];
  uint64_t v127 = v1[182];
  uint64_t v76 = v173;
  uint64_t v128 = sub_BADF0();
  sub_72F7C(v128, &qword_189BA0);
  sub_BB08C(v129, v130, v131, v132, v133, v134, v135, v136, v164, v165, v166, v167, v168, v170, v173, v177);
  v171(v126, v127);
  sub_464D0(v125);
  uint64_t v137 = sub_BAFCC();
  sub_BAFF8(v137, v138);
  p_os_log_type_t type = &stru_187FF0.type;
  uint64_t v15 = (id *)v178;
  uint64_t v23 = &stru_187FF0.type;
LABEL_36:
  id v139 = objc_msgSend(*v15, p_type[390]);
  if (v139)
  {
    uint64_t v141 = v139;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v139);

    uint64_t v142 = 0LL;
  }

  else
  {
    uint64_t v142 = 1LL;
  }

  uint64_t v143 = 1LL;
  uint64_t v144 = sub_A66C(v1[201], v142, v140, v1[191]);
  id v145 = sub_5693C(v144, v23[391]);
  if (v145)
  {
    uint64_t v147 = v145;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v145);

    uint64_t v143 = 0LL;
  }

  uint64_t v148 = 1LL;
  uint64_t v149 = sub_A66C(v1[200], v143, v146, v1[191]);
  id v150 = sub_565D4(v149, "summaryStartDate");
  if (v150)
  {
    uint64_t v152 = v150;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v150);

    uint64_t v148 = 0LL;
  }

  uint64_t v153 = sub_A66C(v1[199], v148, v151, v1[191]);
  id v154 = sub_565D4(v153, "summaryEndDate");
  if (v154)
  {
    uint64_t v157 = v154;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v154);
  }

  sub_BB130((uint64_t)v154, v155, v156, v1[191]);
  sub_BAEE8();
  v1[215] = v158;
  sub_27CC8(*(_BYTE *)(v76 + 272));
  v1[216] = v159;
  uint64_t v160 = (void *)swift_task_alloc(dword_18B704);
  v1[217] = v160;
  sub_BB018(v160, (uint64_t)sub_B6370);
  uint64_t v161 = sub_BB080();
  return sub_5E5E4(v161, v162);
}

uint64_t sub_B6370()
{
  uint64_t v1 = *(void *)(v0 + 1728);
  sub_7DEEC();
  *(void *)(v3 + 174sub_D878(v0 + 4) = v2;
  *(void *)(v3 + 175sub_D878(v0 + 2) = v4;
  sub_36900(v5);
  swift_bridgeObjectRelease(v1);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_B63BC()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  *(void *)(v0 + 1760) = v1;
  sub_BB018(v1, (uint64_t)sub_B640C);
  return sub_36164(0x6867694E7473616CLL, 0xE900000000000074LL);
}

uint64_t sub_B640C()
{
  *(void *)(v1 + 176_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v0;
  *(void *)(v1 + 177sub_D878(v0 + 6) = v2;
  sub_36900(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_B644C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  *(void *)(v0 + 178sub_D878(v0 + 4) = v1;
  sub_BB018(v1, (uint64_t)sub_B64A4);
  return sub_36164(0x6D69546C61746F74LL, 0xEF7065656C734165LL);
}

uint64_t sub_B64A4()
{
  *(void *)(v1 + 179sub_D878(v0 + 2) = v0;
  *(void *)(v1 + 1800) = v2;
  sub_36900(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_B64E4()
{
  uint64_t v1 = (void *)(v0 + 1800);
  if (!*(void *)(v0 + 1752))
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 1776));
    goto LABEL_12;
  }

  if (!*v1)
  {
    sub_6D64();
    uint64_t v1 = (void *)(v0 + 1776);
LABEL_12:
    uint64_t v16 = *(void *)(v0 + 1320);
    uint64_t v17 = swift_bridgeObjectRelease(*v1);
    uint64_t v18 = Logger.wellness.unsafeMutableAddressor(v17);
    sub_A5DC(v18, v0 + 960);
    uint64_t v19 = sub_BAFA0();
    v20(v19);
    sub_23374();
    os_log_type_t v21 = sub_A898();
    if (sub_A988(v21))
    {
      id v22 = (_WORD *)sub_A5E8(2LL);
      sub_366C0(v22);
      sub_A940(&dword_0, v23, v24, "#GetSleepAnalysisFlow: Category label or last night label is nil");
      sub_5050(v16);
    }

    uint64_t v25 = *(void *)(v0 + 1496);
    uint64_t v26 = *(void *)(v0 + 1328);
    uint64_t v27 = *(void *)(v0 + 1208);

    sub_24A58(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
    sub_A13C((_OWORD *)(v27 + 80), (_OWORD *)(v0 + 176));
    sub_A178();
    Flow.eraseToAnyFlow()(&type metadata for GenericErrorFlow);
    sub_36BE0();
    sub_367AC();
    sub_A1B4((void *)(v0 + 176));
    sub_279E0(v25, &qword_189CF8);
    sub_BB190(v28, &qword_189BA0);
    uint64_t v29 = sub_BAC6C();
    uint64_t v390 = v31;
    uint64_t v403 = v30;
    uint64_t v415 = *(void *)(v0 + 1568);
    uint64_t v426 = *(void *)(v0 + 1560);
    uint64_t v436 = *(void *)(v0 + 1552);
    uint64_t v445 = *(void *)(v0 + 1544);
    uint64_t v453 = *(void *)(v0 + 1520);
    uint64_t v460 = *(void *)(v0 + 1512);
    uint64_t v466 = *(void *)(v0 + 1504);
    uint64_t v471 = *(void *)(v0 + 1496);
    uint64_t v475 = *(void *)(v0 + 1488);
    uint64_t v478 = *(void *)(v0 + 1480);
    uint64_t v480 = *(void *)(v0 + 1472);
    uint64_t v481 = *(void *)(v0 + 1448);
    uint64_t v482 = *(void *)(v0 + 1424);
    uint64_t v483 = *(void *)(v0 + 1400);
    uint64_t v484 = *(void *)(v0 + 1392);
    uint64_t v485 = *(void *)(v0 + 1384);
    uint64_t v486 = *(void *)(v0 + 1376);
    uint64_t v487 = *(void *)(v0 + 1368);
    uint64_t v488 = *(void *)(v0 + 1360);
    uint64_t v489 = *(void *)(v0 + 1352);
    uint64_t v490 = *(void *)(v0 + 1344);
    swift_task_dealloc(v29);
    sub_A910();
    sub_A864();
    sub_A85C();
    sub_A8F4();
    sub_A8EC();
    sub_A760();
    sub_A7C8();
    sub_A67C();
    uint64_t v32 = sub_A78C();
    uint64_t v40 = sub_3636C( v32,  v33,  v34,  v35,  v36,  v37,  v38,  v39,  v208,  v221,  v234,  v247,  v260,  v273,  v286,  v299,  v312,  v325,  v338,  v351,  v364,  v377,  v390);
    uint64_t v48 = sub_36364( v40,  v41,  v42,  v43,  v44,  v45,  v46,  v47,  v209,  v222,  v235,  v248,  v261,  v274,  v287,  v300,  v313,  v326,  v339,  v352,  v365,  v378,  v391,  v403);
    uint64_t v56 = sub_363F0( v48,  v49,  v50,  v51,  v52,  v53,  v54,  v55,  v210,  v223,  v236,  v249,  v262,  v275,  v288,  v301,  v314,  v327,  v340,  v353,  v366,  v379,  v392,  v404,  v415);
    uint64_t v64 = sub_36430( v56,  v57,  v58,  v59,  v60,  v61,  v62,  v63,  v211,  v224,  v237,  v250,  v263,  v276,  v289,  v302,  v315,  v328,  v341,  v354,  v367,  v380,  v393,  v405,  v416,  v426);
    uint64_t v72 = sub_36428( v64,  v65,  v66,  v67,  v68,  v69,  v70,  v71,  v212,  v225,  v238,  v251,  v264,  v277,  v290,  v303,  v316,  v329,  v342,  v355,  v368,  v381,  v394,  v406,  v417,  v427,  v436);
    uint64_t v80 = sub_36478( v72,  v73,  v74,  v75,  v76,  v77,  v78,  v79,  v213,  v226,  v239,  v252,  v265,  v278,  v291,  v304,  v317,  v330,  v343,  v356,  v369,  v382,  v395,  v407,  v418,  v428,  v437,  v445);
    uint64_t v88 = sub_36524( v80,  v81,  v82,  v83,  v84,  v85,  v86,  v87,  v214,  v227,  v240,  v253,  v266,  v279,  v292,  v305,  v318,  v331,  v344,  v357,  v370,  v383,  v396,  v408,  v419,  v429,  v438,  v446,  v453);
    uint64_t v96 = sub_3651C( v88,  v89,  v90,  v91,  v92,  v93,  v94,  v95,  v215,  v228,  v241,  v254,  v267,  v280,  v293,  v306,  v319,  v332,  v345,  v358,  v371,  v384,  v397,  v409,  v420,  v430,  v439,  v447,  v454,  v460);
    uint64_t v104 = sub_36514( v96,  v97,  v98,  v99,  v100,  v101,  v102,  v103,  v216,  v229,  v242,  v255,  v268,  v281,  v294,  v307,  v320,  v333,  v346,  v359,  v372,  v385,  v398,  v410,  v421,  v431,  v440,  v448,  v455,  v461,  v466);
    uint64_t v112 = sub_3650C( v104,  v105,  v106,  v107,  v108,  v109,  v110,  v111,  v217,  v230,  v243,  v256,  v269,  v282,  v295,  v308,  v321,  v334,  v347,  v360,  v373,  v386,  v399,  v411,  v422,  v432,  v441,  v449,  v456,  v462,  v467,  v471);
    uint64_t v120 = sub_36504( v112,  v113,  v114,  v115,  v116,  v117,  v118,  v119,  v218,  v231,  v244,  v257,  v270,  v283,  v296,  v309,  v322,  v335,  v348,  v361,  v374,  v387,  v400,  v412,  v423,  v433,  v442,  v450,  v457,  v463,  v468,  v472,  v475);
    uint64_t v128 = sub_364FC( v120,  v121,  v122,  v123,  v124,  v125,  v126,  v127,  v219,  v232,  v245,  v258,  v271,  v284,  v297,  v310,  v323,  v336,  v349,  v362,  v375,  v388,  v401,  v413,  v424,  v434,  v443,  v451,  v458,  v464,  v469,  v473,  v476,  v478);
    sub_364F4( v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v220,  v233,  v246,  v259,  v272,  v285,  v298,  v311,  v324,  v337,  v350,  v363,  v376,  v389,  v402,  v414,  v425,  v435,  v444,  v452,  v459,  v465,  v470,  v474,  v477,  v479,  v480);
    swift_task_dealloc(v481);
    swift_task_dealloc(v482);
    swift_task_dealloc(v483);
    swift_task_dealloc(v484);
    swift_task_dealloc(v485);
    swift_task_dealloc(v486);
    swift_task_dealloc(v487);
    swift_task_dealloc(v488);
    swift_task_dealloc(v489);
    swift_task_dealloc(v490);
    sub_3660C();
    sub_36604();
    sub_365FC();
    sub_365F4();
    sub_365EC();
    sub_365E4();
    sub_365DC();
    sub_366B8();
    sub_366B0();
    sub_366A8();
    sub_36814();
    sub_3680C();
    sub_BAE90();
    __asm { BR              X1 }
  }

  uint64_t v2 = *(void *)(v0 + 1312);
  uint64_t v3 = *(void *)(v0 + 1280);
  uint64_t v4 = *(void *)(v0 + 1208);
  String.toSpeakableString.getter(*(void *)(v0 + 1744), *(void *)(v0 + 1752));
  sub_6D64();
  unsigned __int8 v5 = *(_BYTE *)(v4 + 272);
  unint64_t v6 = sub_2A044(v5);
  unint64_t v8 = v7;
  uint64_t v9 = sub_27CC8(v5);
  uint64_t v10 = (unint64_t *)(v2 + *(int *)(v3 + 20));
  *uint64_t v10 = v6;
  v10[1] = v8;
  uint64_t v11 = (uint64_t *)(v2 + *(int *)(v3 + 24));
  *uint64_t v11 = v9;
  v11[1] = v12;
  if (!dispatch thunk of DialogCalendarRange.start.getter()) {
    goto LABEL_17;
  }
  if (!dispatch thunk of DialogCalendarRange.end.getter()) {
    goto LABEL_16;
  }
  if ((dispatch thunk of DialogCalendar.isYesterday.getter() & 1) == 0
    || (dispatch thunk of DialogCalendar.isYesterday.getter() & 1) == 0
    || (dispatch thunk of DialogCalendar.isNight.getter() & 1) == 0)
  {
    sub_36BE0();
LABEL_16:
    sub_367AC();
LABEL_17:
    uint64_t v137 = swift_bridgeObjectRelease(*(void *)(v0 + 1776));
    uint64_t v138 = dispatch thunk of DialogCalendarRange.isRangeSameDay.getter(v137);
    if ((v138 & 1) != 0)
    {
      uint64_t countAndFlagsBits = *(void *)(*(void *)(v0 + 1720) + 48LL);
      if (!countAndFlagsBits)
      {
LABEL_24:
        object = 0LL;
        goto LABEL_27;
      }

      uint64_t v139 = *(void *)(v0 + 1232);
      dispatch thunk of DialogCalendar.dateDescriptive.getter(v138);
      sub_ABF4();
      uint64_t v140 = sub_7366C(v139);
      if ((_DWORD)v140 != 1)
      {
        SpeakableString.print.getter(v140);
        uint64_t v147 = v146;
        uint64_t v148 = sub_BB0AC();
        v149(v148);
        Swift::String v150 = String.firstLetterCapitalized()();
        uint64_t countAndFlagsBits = v150._countAndFlagsBits;
        object = v150._object;
        swift_bridgeObjectRelease(v147);
        goto LABEL_27;
      }

      uint64_t v141 = *(void *)(v0 + 1232);
    }

    else
    {
      dispatch thunk of DialogCalendarRange.dateRangeAbbreviated.getter();
      uint64_t v142 = sub_ABF4();
      uint64_t v143 = sub_B2588();
      uint64_t v144 = *(void *)(v0 + 1224);
      if ((_DWORD)v143 != 1)
      {
        uint64_t countAndFlagsBits = SpeakableString.print.getter(v143);
        object = v145;
        sub_D970(v144, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v142 - 8) + 8LL));
        goto LABEL_27;
      }

      uint64_t v141 = *(void *)(v0 + 1224);
    }

    sub_279E0(v141, &qword_189D00);
    uint64_t countAndFlagsBits = 0LL;
    goto LABEL_24;
  }

  char v13 = dispatch thunk of DialogCalendar.isNight.getter();
  sub_367AC();
  sub_36BE0();
  if ((v13 & 1) == 0) {
    goto LABEL_17;
  }
  object = *(void **)(v0 + 1776);
  uint64_t countAndFlagsBits = *(void *)(v0 + 1768);
LABEL_27:
  *(void *)(v0 + 181sub_D878(v0 + 6) = object;
  *(void *)(v0 + 180_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = countAndFlagsBits;
  double v151 = *(double *)(v0 + 1688);
  double v152 = *(double *)(v0 + 1680);
  if ([*(id *)(v0 + 1200) daysSummarized] == (char *)&dword_0 + 1 || v152 <= 0.0 || v151 <= 0.0)
  {
    uint64_t v157 = *(void *)(v0 + 1800);
    uint64_t v158 = *(void *)(v0 + 1792);
    uint64_t v159 = *(void *)(v0 + 1496);
    uint64_t v160 = *(void *)(v0 + 1488);
    uint64_t v161 = *(void *)(v0 + 1280);
    uint64_t v162 = *(void *)(v0 + 1272);
    uint64_t v163 = *(void *)(v0 + 1216);
    v491 = *(void **)(v0 + 1200);
    sub_BA7DC(*(void *)(v0 + 1312), v163, type metadata accessor for SnippetHeaderModel);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v163, 0LL, 1LL, v161);
    sub_A44C(v159, v160, &qword_189CF8);
    SleepQueryModel.init(snippetHeaderModel:dateLabel:sleepTypeLabel:dataLabel:avgTimeAsleepLabel:avgTimeInBedLabel:avgTimeAsleep:avgTimeInBed:totalTimeAsleep:totalTimeInBed:url:sleepDuration:avgTimeAsleepData:avgTimeInBedData:)( v163,  countAndFlagsBits,  (uint64_t)object,  v158,  v157,  0LL,  0LL,  0LL,  v162,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  v160,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL);
    if ([v491 daysSummarized] == (char *)&dword_0 + 1)
    {
      if (*(uint64_t *)(v0 + 1672) >= 1)
      {
        uint64_t v164 = *(void *)(v0 + 1272);
        uint64_t v165 = *(void *)(v0 + 1240);
        uint64_t v166 = sub_BACFC();
        sub_A72C(v166);
        uint64_t v167 = sub_BAC34();
        sub_5693C(v167, "totalAsleepDuration");
        sub_BAC08(v168);
        sub_3652C();
        sub_BAFF0();
        sub_36BE0();
        swift_release();
        sub_BAF2C();
        uint64_t v169 = sub_BAC34();
        sub_5693C(v169, "averageAsleepDuration");
        sub_BAC08(v170);
        sub_3652C();
        uint64_t v171 = sub_BB198();
        sub_37034();
        uint64_t v172 = *(int *)(v165 + 44);
        swift_release();
        *(void *)(v164 + v17sub_D878(v0 + 2) = v171;
      }

      uint64_t v173 = *(void *)(v0 + 1272);
      uint64_t v174 = *(void *)(v0 + 1240);
      uint64_t v175 = sub_BACFC();
      sub_A72C(v175);
      uint64_t v176 = sub_BAC34();
      sub_5693C(v176, "totalInBedDuration");
      sub_BAC08(v177);
      sub_3652C();
      sub_BAFF0();
      sub_36BE0();
      swift_release();
      sub_BAF2C();
      uint64_t v178 = sub_BAC34();
      sub_5693C(v178, "averageInBedDuration");
      sub_BAC08(v179);
      sub_3652C();
      uint64_t v180 = sub_BB198();
      sub_37034();
      uint64_t v181 = *(int *)(v174 + 48);
      swift_release();
      *(void *)(v173 + v181) = v180;
    }

    if (*(double *)(v0 + 1680) <= 0.0 || v151 <= 0.0)
    {
      if (*(uint64_t *)(v0 + 1672) >= 1)
      {
        uint64_t v182 = *(void *)(v0 + 1272);
        uint64_t v183 = *(void *)(v0 + 1240);
        uint64_t v184 = sub_BACFC();
        sub_A72C(v184);
        uint64_t v185 = sub_BAC34();
        sub_5693C(v185, "averageAsleepDuration");
        sub_BAC08(v186);
        sub_3652C();
        uint64_t v187 = sub_BB198();
        sub_37034();
        uint64_t v188 = *(int *)(v183 + 44);
        swift_release();
        *(void *)(v182 + v18_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v187;
      }

      uint64_t v189 = *(void *)(v0 + 1272);
      uint64_t v190 = *(void *)(v0 + 1240);
      uint64_t v191 = sub_BACFC();
      sub_A72C(v191);
      uint64_t v192 = sub_BAC34();
      sub_5693C(v192, "averageInBedDuration");
      sub_BAC08(v193);
      sub_3652C();
      uint64_t v194 = sub_BB198();
      sub_37034();
      uint64_t v195 = *(int *)(v190 + 48);
      swift_release();
      *(void *)(v189 + v195) = v194;
    }

    uint64_t v196 = *(void *)(v0 + 1272);
    uint64_t v197 = *(int **)(v0 + 1240);
    Swift::String_optional v198 = SleepQueryModel.fetchSleepDuration()();
    uint64_t v199 = (Swift::String_optional *)(v196 + v197[15]);
    swift_bridgeObjectRelease(v199->value._object);
    *uint64_t v199 = v198;
    *(void *)(v0 + 182sub_D878(v0 + 4) = *(void *)(v196 + v197[14]);
    *(void *)(v0 + 183sub_D878(v0 + 2) = *(void *)(v196 + v197[13]);
    *(void *)(v0 + 1840) = *(void *)(v196 + v197[12]);
    *(void *)(v0 + 184_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *(void *)(v196 + v197[11]);
    uint64_t v200 = dword_18DC3C;
    sub_372CC();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_363E8();
    sub_4195C();
    uint64_t v201 = (void *)swift_task_alloc(v200);
    *(void *)(v0 + 18sub_D7EC(v0 + 16, v0 + 56) = v201;
    sub_BB018(v201, (uint64_t)sub_B6DB4);
    sub_7DFE8();
    sub_BAE90();
    return sub_9F8B0(v202, v203, v204, v205, v206, v207);
  }

  else
  {
    sub_2A184();
    uint64_t v153 = (void *)swift_task_alloc(dword_18B6EC);
    *(void *)(v0 + 191sub_D878(v0 + 2) = v153;
    sub_BB024(v153, (uint64_t)sub_B7740);
    sub_BAE90();
    return sub_5E408(v154, v155);
  }

uint64_t sub_B6DB4(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v9 = v4;
  sub_56254(*(void *)(v4 + 1856), &v9);
  sub_A37E4();
  sub_367AC();
  sub_36BE0();
  sub_36EBC();
  sub_37110();
  sub_39BAC();
  if (v1) {
    sub_36860();
  }
  else {
    *(void *)(v4 + 186sub_D878(v0 + 4) = a1;
  }
  sub_A964();
  return swift_task_switch(v5, v6, v7);
}

uint64_t sub_B6E68(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + 888);
  uint64_t v4 = *(void **)(v1 + 1864);
  *(void *)(v1 + 187sub_D878(v0 + 2) = v4;
  uint64_t v5 = *(void *)(v1 + 1392);
  uint64_t v6 = *(void *)(v1 + 1328);
  uint64_t v7 = Logger.wellness.unsafeMutableAddressor(a1);
  *(void *)(v1 + 1880) = v7;
  sub_A5DC(v7, v1 + 888);
  unint64_t v8 = *(uint64_t (**)(void, void, void))(v6 + 16);
  *(void *)(v1 + 188_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v8;
  sub_BAF40(v5, v7);
  sub_AB5C();
  os_log_type_t v9 = sub_AB70();
  v587 = v4;
  v586 = v8;
  if (sub_561AC(v9))
  {
    uint64_t v580 = *(void *)(v1 + 1328);
    uint64_t v581 = *(void *)(v1 + 1320);
    uint64_t v583 = *(void *)(v1 + 1392);
    uint64_t v10 = *(void *)(v1 + 1272);
    uint64_t v11 = *(void *)(v1 + 1264);
    uint64_t v579 = *(void *)(v1 + 1240);
    uint64_t v12 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v589 = sub_A5E8(32LL);
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v13 = sub_BAFCC();
    sub_A5DC(v13, v14);
    sub_BA7DC(v10, v11, type metadata accessor for SleepQueryModel);
    uint64_t v15 = String.init<A>(describing:)(v11, v579);
    *(void *)(v1 + 116_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_BAEB0(v15, v16);
    sub_46578(v1 + 1168, v1 + 1176, (uint64_t)(v12 + 4));
    sub_6D64();
    sub_DA24(&dword_0, (os_log_s *)(v1 + 888), v2, "#GetSleepAnalysisFlow: snippet model is %s", v12);
    sub_A81C(v589);
    sub_5050(v589);
    uint64_t v17 = (uint64_t)v12;
    unint64_t v8 = v586;
    sub_5050(v17);

    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v580 + 8);
    v18(v583, v581);
  }

  else
  {
    uint64_t v19 = *(void *)(v1 + 1328);

    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    uint64_t v20 = sub_23340();
    v18(v20, v21);
  }

  *(void *)(v1 + 189sub_D878(v0 + 6) = v18;
  id v22 = *(os_log_s **)(v1 + 1384);
  uint64_t v23 = *(void *)(v1 + 1320);
  sub_A5DC(v7, v1 + 912);
  uint64_t v24 = v8(v22, v7, v23);
  sub_BAFE4(v24, v25, type metadata accessor for SnippetHeaderModel);
  Logger.logObject.getter(v26);
  os_log_type_t v27 = sub_AB70();
  BOOL v28 = os_log_type_enabled(v22, v27);
  uint64_t v29 = *(void *)(v1 + 1384);
  uint64_t v30 = *(void *)(v1 + 1304);
  if (v28)
  {
    uint64_t v31 = *(void *)(v1 + 1296);
    uint64_t v584 = *(void *)(v1 + 1384);
    uint64_t v32 = *(void *)(v1 + 1280);
    uint64_t v582 = *(void *)(v1 + 1320);
    uint64_t v33 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v590 = sub_A5E8(32LL);
    *(_DWORD *)uint64_t v33 = 136315138;
    sub_BA7DC(v30, v31, type metadata accessor for SnippetHeaderModel);
    uint64_t v34 = v31;
    unint64_t v8 = v586;
    uint64_t v35 = String.init<A>(describing:)(v34, v32);
    uint64_t v29 = v36;
    *(void *)(v1 + 115sub_D878(v0 + 2) = sub_BAEB0(v35, v36);
    sub_9933C(v1 + 1152, v1 + 1160, (uint64_t)(v33 + 4));
    sub_6D64();
    sub_26F04(v30, type metadata accessor for SnippetHeaderModel);
    sub_DA24(&dword_0, v22, v27, "#GetSleepAnalysisFlow: snippet header model is %s", v33);
    sub_A81C(v590);
    sub_5050(v590);
    sub_5050((uint64_t)v33);

    uint64_t v38 = v582;
    uint64_t v37 = v584;
  }

  else
  {
    sub_26F04(*(void *)(v1 + 1304), type metadata accessor for SnippetHeaderModel);

    uint64_t v37 = sub_23340();
  }

  v18(v37, v38);
  if (v587)
  {
    uint64_t v39 = type metadata accessor for WellnessSnippets(0LL);
    *(void *)(v1 + 560) = v39;
    sub_A410( (unint64_t *)&qword_18A468,  type metadata accessor for WellnessSnippets,  (uint64_t)&protocol conformance descriptor for WellnessSnippets);
    *(void *)(v1 + 56_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v40;
    uint64_t v41 = sub_B76C((void *)(v1 + 536));
    uint64_t v42 = sub_993B4();
    sub_A5DC(v42, v43);
    uint64_t v44 = sub_BB2F4();
    sub_BA7DC(v44, v45, v46);
    swift_storeEnumTagMultiPayload(v41, v39, 12LL);
    uint64_t v47 = dword_18B6FC;
    id v48 = v587;
    uint64_t v49 = (void *)swift_task_alloc(v47);
    *(void *)(v1 + 190sub_D878(v0 + 4) = v49;
    *uint64_t v49 = v1;
    v49[1] = sub_B73EC;
    uint64_t v50 = sub_90540();
    return sub_5E844(v50, v51, (uint64_t)v48);
  }

  else
  {
    v585 = (void (*)(uint64_t))v18;
    uint64_t v53 = *(void *)(v1 + 1368);
    uint64_t v54 = *(void *)(v1 + 1320);
    sub_A5DC(v7, v1 + 816);
    uint64_t v55 = v8(v53, v7, v54);
    Logger.logObject.getter(v55);
    os_log_type_t v56 = sub_A898();
    if (sub_A988(v56))
    {
      uint64_t v57 = (_WORD *)sub_A5E8(2LL);
      sub_366C0(v57);
      sub_A940(&dword_0, v58, v59, "Couldn't create sleep analysis dialog returning nil");
      sub_5050(v29);
    }

    sub_BAC3C();
    uint64_t v60 = sub_BB074();
    v585(v60);
    sub_BB210();
    sub_A178();
    uint64_t v588 = sub_BB1B0();
    sub_37110();
    sub_36EBC();
    uint64_t v61 = sub_BB2EC();
    sub_BB21C((uint64_t)v61, type metadata accessor for SnippetHeaderModel);
    sub_279E0(0LL, &qword_189CF8);
    sub_BB190(v62, &qword_189BA0);
    sub_26F04(v7, type metadata accessor for SleepQueryModel);
    sub_BA9EC();
    sub_A910();
    sub_A864();
    sub_A85C();
    sub_A8F4();
    sub_A8EC();
    sub_A760();
    sub_A7C8();
    sub_A67C();
    uint64_t v63 = sub_A78C();
    uint64_t v71 = sub_AAD8(v63, v64, v65, v66, v67, v68, v69, v70, v255, v279);
    uint64_t v79 = sub_A888(v71, v72, v73, v74, v75, v76, v77, v78, v256, v280, v303);
    uint64_t v87 = sub_A854(v79, v80, v81, v82, v83, v84, v85, v86, v257, v281, v304, v326);
    uint64_t v95 = sub_A84C(v87, v88, v89, v90, v91, v92, v93, v94, v258, v282, v305, v327, v348);
    uint64_t v103 = sub_A844(v95, v96, v97, v98, v99, v100, v101, v102, v259, v283, v306, v328, v349, v369);
    uint64_t v111 = sub_A83C(v103, v104, v105, v106, v107, v108, v109, v110, v260, v284, v307, v329, v350, v370, v389);
    uint64_t v119 = sub_A95C(v111, v112, v113, v114, v115, v116, v117, v118, v261, v285, v308, v330, v351, v371, v390, v408);
    uint64_t v127 = sub_A954( v119,  v120,  v121,  v122,  v123,  v124,  v125,  v126,  v262,  v286,  v309,  v331,  v352,  v372,  v391,  v409,  v426);
    uint64_t v135 = sub_A938( v127,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v263,  v287,  v310,  v332,  v353,  v373,  v392,  v410,  v427,  v443);
    uint64_t v143 = sub_A930( v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  v264,  v288,  v311,  v333,  v354,  v374,  v393,  v411,  v428,  v444,  v459);
    uint64_t v151 = sub_A928( v143,  v144,  v145,  v146,  v147,  v148,  v149,  v150,  v265,  v289,  v312,  v334,  v355,  v375,  v394,  v412,  v429,  v445,  v460,  v474);
    uint64_t v159 = sub_A920( v151,  v152,  v153,  v154,  v155,  v156,  v157,  v158,  v266,  v290,  v313,  v335,  v356,  v376,  v395,  v413,  v430,  v446,  v461,  v475,  v488);
    uint64_t v167 = sub_36374( v159,  v160,  v161,  v162,  v163,  v164,  v165,  v166,  v267,  v291,  v314,  v336,  v357,  v377,  v396,  v414,  v431,  v447,  v462,  v476,  v489,  v501);
    uint64_t v175 = sub_3636C( v167,  v168,  v169,  v170,  v171,  v172,  v173,  v174,  v268,  v292,  v315,  v337,  v358,  v378,  v397,  v415,  v432,  v448,  v463,  v477,  v490,  v502,  v513);
    uint64_t v183 = sub_36364( v175,  v176,  v177,  v178,  v179,  v180,  v181,  v182,  v269,  v293,  v316,  v338,  v359,  v379,  v398,  v416,  v433,  v449,  v464,  v478,  v491,  v503,  v514,  v524);
    uint64_t v191 = sub_363F0( v183,  v184,  v185,  v186,  v187,  v188,  v189,  v190,  v270,  v294,  v317,  v339,  v360,  v380,  v399,  v417,  v434,  v450,  v465,  v479,  v492,  v504,  v515,  v525,  v534);
    uint64_t v199 = sub_36430( v191,  v192,  v193,  v194,  v195,  v196,  v197,  v198,  v271,  v295,  v318,  v340,  v361,  v381,  v400,  v418,  v435,  v451,  v466,  v480,  v493,  v505,  v516,  v526,  v535,  v543);
    uint64_t v207 = sub_36428( v199,  v200,  v201,  v202,  v203,  v204,  v205,  v206,  v272,  v296,  v319,  v341,  v362,  v382,  v401,  v419,  v436,  v452,  v467,  v481,  v494,  v506,  v517,  v527,  v536,  v544,  v551);
    uint64_t v215 = sub_36478( v207,  v208,  v209,  v210,  v211,  v212,  v213,  v214,  v273,  v297,  v320,  v342,  v363,  v383,  v402,  v420,  v437,  v453,  v468,  v482,  v495,  v507,  v518,  v528,  v537,  v545,  v552,  v558);
    uint64_t v223 = sub_36524( v215,  v216,  v217,  v218,  v219,  v220,  v221,  v222,  v274,  v298,  v321,  v343,  v364,  v384,  v403,  v421,  v438,  v454,  v469,  v483,  v496,  v508,  v519,  v529,  v538,  v546,  v553,  v559,  v564);
    uint64_t v231 = sub_3651C( v223,  v224,  v225,  v226,  v227,  v228,  v229,  v230,  v275,  v299,  v322,  v344,  v365,  v385,  v404,  v422,  v439,  v455,  v470,  v484,  v497,  v509,  v520,  v530,  v539,  v547,  v554,  v560,  v565,  v569);
    uint64_t v239 = sub_36514( v231,  v232,  v233,  v234,  v235,  v236,  v237,  v238,  v276,  v300,  v323,  v345,  v366,  v386,  v405,  v423,  v440,  v456,  v471,  v485,  v498,  v510,  v521,  v531,  v540,  v548,  v555,  v561,  v566,  v570,  v573);
    uint64_t v247 = sub_3650C( v239,  v240,  v241,  v242,  v243,  v244,  v245,  v246,  v277,  v301,  v324,  v346,  v367,  v387,  v406,  v424,  v441,  v457,  v472,  v486,  v499,  v511,  v522,  v532,  v541,  v549,  v556,  v562,  v567,  v571,  v574,  v576);
    sub_36504( v247,  v248,  v249,  v250,  v251,  v252,  v253,  v254,  v278,  v302,  v325,  v347,  v368,  v388,  v407,  v425,  v442,  v458,  v473,  v487,  v500,  v512,  v523,  v533,  v542,  v550,  v557,  v563,  v568,  v572,  v575,  v577,  v578);
    sub_365FC();
    sub_365F4();
    sub_365EC();
    sub_365E4();
    sub_365DC();
    sub_366B8();
    sub_366B0();
    sub_366A8();
    sub_36814();
    sub_3680C();
    sub_36804();
    return sub_BACA0(v588, *(uint64_t (**)(void))(v1 + 8));
  }

uint64_t sub_B73EC()
{
  return sub_A5D0();
}

uint64_t sub_B7428()
{
  os_log_type_t v2 = *(void (**)(uint64_t, os_log_s *, uint64_t))(v0 + 1888);
  uint64_t v3 = *(os_log_s **)(v0 + 1880);
  uint64_t v4 = *(void *)(v0 + 1376);
  uint64_t v5 = *(void *)(v0 + 1320);
  sub_A5DC((uint64_t)v3, v0 + 1056);
  v2(v4, v3, v5);
  sub_A304(v0 + 776, v0 + 496);
  sub_AB5C();
  os_log_type_t v6 = sub_AB70();
  if (sub_46514(v6))
  {
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 1896);
    uint64_t v617 = *(void *)(v0 + 1376);
    uint64_t v615 = *(void *)(v0 + 1320);
    unint64_t v8 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v9 = sub_A5E8(32LL);
    v619[0] = v9;
    *(_DWORD *)unint64_t v8 = 136315138;
    uint64_t v10 = sub_23340();
    sub_A304(v10, v11);
    uint64_t v12 = sub_494C(&qword_18E5C0);
    uint64_t v13 = String.init<A>(describing:)(v0 + 576, v12);
    unint64_t v15 = v14;
    *(void *)(v0 + 114sub_D878(v0 + 4) = sub_39178(v13, v14, v619);
    sub_9933C(v0 + 1144, v0 + 1152, (uint64_t)(v8 + 4));
    swift_bridgeObjectRelease(v15);
    sub_36E94();
    sub_DA24(&dword_0, v3, v1, "#GetSleepAnalysisFlow: output is %s", v8);
    sub_A81C(v9);
    sub_5050(v9);
    sub_5050((uint64_t)v8);

    uint64_t v16 = v617;
    uint64_t v17 = v615;
  }

  else
  {
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 1896);
    uint64_t v18 = *(void *)(v0 + 1376);
    uint64_t v19 = *(void *)(v0 + 1320);
    sub_36E94();

    uint64_t v16 = v18;
    uint64_t v17 = v19;
  }

  v7(v16, v17);
  uint64_t v20 = *(void **)(v0 + 1872);
  sub_BB1B8();
  uint64_t v613 = v21;
  uint64_t v614 = v22;
  uint64_t v23 = *(void *)(v0 + 1312);
  uint64_t v616 = *(void *)(v0 + 1272);
  sub_BB294();
  uint64_t v24 = sub_364BC((uint64_t)&unk_17F668);
  sub_BB054(v24);
  uint64_t v25 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  uint64_t v26 = sub_A72C(v25);
  *(void *)(v0 + 112_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_BB33C(v26, (uint64_t)&unk_18E5B8);
  uint64_t v618 = sub_BB270();

  sub_A37E4();
  sub_39BAC();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 776));
  sub_26F04(v23, type metadata accessor for SnippetHeaderModel);
  sub_279E0(v613, &qword_189CF8);
  sub_279E0(v614, &qword_189BA0);
  sub_37034();
  sub_26F04(v616, type metadata accessor for SleepQueryModel);
  sub_BAAEC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  sub_A8EC();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  uint64_t v27 = sub_A78C();
  uint64_t v35 = sub_AAD8(v27, v28, v29, v30, v31, v32, v33, v34, v236, v262);
  uint64_t v43 = sub_A888(v35, v36, v37, v38, v39, v40, v41, v42, v237, v263, v288);
  uint64_t v51 = sub_A854(v43, v44, v45, v46, v47, v48, v49, v50, v238, v264, v289, v313);
  uint64_t v59 = sub_A84C(v51, v52, v53, v54, v55, v56, v57, v58, v239, v265, v290, v314, v337);
  uint64_t v67 = sub_A844(v59, v60, v61, v62, v63, v64, v65, v66, v240, v266, v291, v315, v338, v360);
  uint64_t v75 = sub_A83C(v67, v68, v69, v70, v71, v72, v73, v74, v241, v267, v292, v316, v339, v361, v382);
  uint64_t v83 = sub_A95C(v75, v76, v77, v78, v79, v80, v81, v82, v242, v268, v293, v317, v340, v362, v383, v403);
  uint64_t v91 = sub_A954(v83, v84, v85, v86, v87, v88, v89, v90, v243, v269, v294, v318, v341, v363, v384, v404, v423);
  uint64_t v99 = sub_A938(v91, v92, v93, v94, v95, v96, v97, v98, v244, v270, v295, v319, v342, v364, v385, v405, v424, v442);
  uint64_t v107 = sub_A930( v99,  v100,  v101,  v102,  v103,  v104,  v105,  v106,  v245,  v271,  v296,  v320,  v343,  v365,  v386,  v406,  v425,  v443,  v460);
  uint64_t v115 = sub_A928( v107,  v108,  v109,  v110,  v111,  v112,  v113,  v114,  v246,  v272,  v297,  v321,  v344,  v366,  v387,  v407,  v426,  v444,  v461,  v477);
  uint64_t v123 = sub_A920( v115,  v116,  v117,  v118,  v119,  v120,  v121,  v122,  v247,  v273,  v298,  v322,  v345,  v367,  v388,  v408,  v427,  v445,  v462,  v478,  v493);
  uint64_t v131 = sub_36374( v123,  v124,  v125,  v126,  v127,  v128,  v129,  v130,  v248,  v274,  v299,  v323,  v346,  v368,  v389,  v409,  v428,  v446,  v463,  v479,  v494,  v508);
  uint64_t v139 = sub_3636C( v131,  v132,  v133,  v134,  v135,  v136,  v137,  v138,  v249,  v275,  v300,  v324,  v347,  v369,  v390,  v410,  v429,  v447,  v464,  v480,  v495,  v509,  v522);
  uint64_t v147 = sub_36364( v139,  v140,  v141,  v142,  v143,  v144,  v145,  v146,  v250,  v276,  v301,  v325,  v348,  v370,  v391,  v411,  v430,  v448,  v465,  v481,  v496,  v510,  v523,  v535);
  uint64_t v155 = sub_363F0( v147,  v148,  v149,  v150,  v151,  v152,  v153,  v154,  v251,  v277,  v302,  v326,  v349,  v371,  v392,  v412,  v431,  v449,  v466,  v482,  v497,  v511,  v524,  v536,  v547);
  uint64_t v163 = sub_36430( v155,  v156,  v157,  v158,  v159,  v160,  v161,  v162,  v252,  v278,  v303,  v327,  v350,  v372,  v393,  v413,  v432,  v450,  v467,  v483,  v498,  v512,  v525,  v537,  v548,  v558);
  uint64_t v171 = sub_36428( v163,  v164,  v165,  v166,  v167,  v168,  v169,  v170,  v253,  v279,  v304,  v328,  v351,  v373,  v394,  v414,  v433,  v451,  v468,  v484,  v499,  v513,  v526,  v538,  v549,  v559,  v568);
  uint64_t v179 = sub_36478( v171,  v172,  v173,  v174,  v175,  v176,  v177,  v178,  v254,  v280,  v305,  v329,  v352,  v374,  v395,  v415,  v434,  v452,  v469,  v485,  v500,  v514,  v527,  v539,  v550,  v560,  v569,  v577);
  uint64_t v187 = sub_36524( v179,  v180,  v181,  v182,  v183,  v184,  v185,  v186,  v255,  v281,  v306,  v330,  v353,  v375,  v396,  v416,  v435,  v453,  v470,  v486,  v501,  v515,  v528,  v540,  v551,  v561,  v570,  v578,  v585);
  uint64_t v195 = sub_3651C( v187,  v188,  v189,  v190,  v191,  v192,  v193,  v194,  v256,  v282,  v307,  v331,  v354,  v376,  v397,  v417,  v436,  v454,  v471,  v487,  v502,  v516,  v529,  v541,  v552,  v562,  v571,  v579,  v586,  v592);
  uint64_t v203 = sub_36514( v195,  v196,  v197,  v198,  v199,  v200,  v201,  v202,  v257,  v283,  v308,  v332,  v355,  v377,  v398,  v418,  v437,  v455,  v472,  v488,  v503,  v517,  v530,  v542,  v553,  v563,  v572,  v580,  v587,  v593,  v598);
  uint64_t v211 = sub_3650C( v203,  v204,  v205,  v206,  v207,  v208,  v209,  v210,  v258,  v284,  v309,  v333,  v356,  v378,  v399,  v419,  v438,  v456,  v473,  v489,  v504,  v518,  v531,  v543,  v554,  v564,  v573,  v581,  v588,  v594,  v599,  v603);
  uint64_t v219 = sub_36504( v211,  v212,  v213,  v214,  v215,  v216,  v217,  v218,  v259,  v285,  v310,  v334,  v357,  v379,  v400,  v420,  v439,  v457,  v474,  v490,  v505,  v519,  v532,  v544,  v555,  v565,  v574,  v582,  v589,  v595,  v600,  v604,  v607);
  uint64_t v227 = sub_364FC( v219,  v220,  v221,  v222,  v223,  v224,  v225,  v226,  v260,  v286,  v311,  v335,  v358,  v380,  v401,  v421,  v440,  v458,  v475,  v491,  v506,  v520,  v533,  v545,  v556,  v566,  v575,  v583,  v590,  v596,  v601,  v605,  v608,  v610);
  sub_364F4( v227,  v228,  v229,  v230,  v231,  v232,  v233,  v234,  v261,  v287,  v312,  v336,  v359,  v381,  v402,  v422,  v441,  v459,  v476,  v492,  v507,  v521,  v534,  v546,  v557,  v567,  v576,  v584,  v591,  v597,  v602,  v606,  v609,  v611,  v612);
  sub_3660C();
  sub_36604();
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  sub_366B8();
  sub_366B0();
  return sub_BACBC(v618, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_B7740()
{
  *(void *)(v1 + 1920) = v0;
  *(void *)(v1 + 192_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v2;
  sub_36900(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_B7780()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  *(void *)(v0 + 193sub_D878(v0 + 6) = v1;
  uint64_t v2 = sub_BB024(v1, (uint64_t)sub_B77C8);
  return sub_36164(v2 & 0xFFFFFFFFFFFFLL | 0x4965000000000000LL, 0xEC0000006465426ELL);
}

uint64_t sub_B77C8()
{
  *(void *)(v1 + 194sub_D878(v0 + 4) = v0;
  *(void *)(v1 + 195sub_D878(v0 + 2) = v2;
  sub_36900(v3);
  sub_A964();
  return sub_A5D0();
}

void sub_B7808()
{
  uint64_t v83 = v0[243];
  uint64_t v85 = v0[244];
  uint64_t v80 = v0[241];
  uint64_t v90 = v0[240];
  uint64_t v87 = v0[227];
  uint64_t v77 = v0[226];
  uint64_t v1 = v0[187];
  uint64_t v2 = v0[186];
  uint64_t v3 = v0[160];
  uint64_t v4 = v0[159];
  uint64_t v88 = v0[157];
  uint64_t v5 = v0[155];
  uint64_t v6 = v0[152];
  uint64_t v7 = (void *)v0[150];
  sub_BA7DC(v0[164], v6, type metadata accessor for SnippetHeaderModel);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v6, 0LL, 1LL, v3);
  uint64_t v8 = sub_BACFC();
  sub_A72C(v8);
  sub_BAC34();
  [v7 averageAsleepDuration];
  dispatch thunk of DialogDuration.Builder.withSecs(_:)(v9, 0LL);
  uint64_t v10 = sub_36BE0();
  uint64_t v11 = dispatch thunk of DialogDuration.Builder.build()(v10);
  sub_3652C();
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  sub_BAC34();
  [v7 averageInBedDuration];
  sub_BAC08(v12);
  uint64_t v13 = sub_3652C();
  uint64_t v14 = dispatch thunk of DialogDuration.Builder.build()(v13);
  sub_367AC();
  sub_A44C(v1, v2, &qword_189CF8);
  SleepQueryModel.init(snippetHeaderModel:dateLabel:sleepTypeLabel:dataLabel:avgTimeAsleepLabel:avgTimeInBedLabel:avgTimeAsleep:avgTimeInBed:totalTimeAsleep:totalTimeInBed:url:sleepDuration:avgTimeAsleepData:avgTimeInBedData:)( v6,  v77,  v87,  0LL,  0LL,  0LL,  0LL,  v90,  v4,  v80,  v83,  v85,  v11,  v14,  0LL,  0LL,  v2,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL);
  sub_BA7DC(v4, v88, type metadata accessor for SleepQueryModel);
  uint64_t v91 = v5;
  if (!*(void *)(v4 + *(int *)(v5 + 44)))
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v15 = v0[159];
  uint64_t v16 = v0[155];
  sub_4195C();
  uint64_t v17 = SleepQueryModel.getAbbrHoursMinDialogDuration(duration:)();
  uint64_t v19 = v18;
  sub_37034();
  uint64_t v20 = sub_BB080();
  sub_26F04(v20, v21);
  uint64_t v22 = (uint64_t *)(v15 + *(int *)(v16 + 64));
  swift_bridgeObjectRelease(v22[1]);
  *uint64_t v22 = v17;
  v22[1] = v19;
  uint64_t v23 = sub_23340();
  sub_BA7DC(v23, v24, type metadata accessor for SleepQueryModel);
  uint64_t v89 = v16;
  if (!*(void *)(v15 + *(int *)(v16 + 48)))
  {
LABEL_11:
    __break(1u);
    return;
  }

  uint64_t v25 = v0[166];
  uint64_t v26 = v0[159];
  uint64_t v27 = v0[156];
  uint64_t v28 = v0[155];
  sub_372CC();
  uint64_t v29 = SleepQueryModel.getAbbrHoursMinDialogDuration(duration:)();
  uint64_t v31 = v30;
  sub_367AC();
  sub_26F04(v27, type metadata accessor for SleepQueryModel);
  uint64_t v32 = (uint64_t *)(v26 + *(int *)(v28 + 68));
  uint64_t v33 = swift_bridgeObjectRelease(v32[1]);
  *uint64_t v32 = v29;
  v32[1] = v31;
  uint64_t v34 = Logger.wellness.unsafeMutableAddressor(v33);
  v0[245] = v34;
  sub_A5DC(v34, (uint64_t)(v0 + 138));
  uint64_t v35 = *(void (**)(uint64_t))(v25 + 16);
  v0[246] = v35;
  uint64_t v36 = sub_993B4();
  v35(v36);
  sub_AB5C();
  os_log_type_t v37 = sub_AB70();
  BOOL v38 = sub_561AC(v37);
  uint64_t v39 = v0[166];
  if (v38)
  {
    uint64_t v84 = v0[170];
    uint64_t v40 = v0[159];
    uint64_t v81 = v0[165];
    uint64_t v41 = v0[158];
    uint64_t v76 = v0[155];
    uint64_t v78 = v0[166];
    uint64_t v42 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v92 = sub_A5E8(32LL);
    *(_DWORD *)uint64_t v42 = 136315138;
    sub_A5DC(v40, (uint64_t)(v0 + 105));
    sub_BA7DC(v40, v41, type metadata accessor for SleepQueryModel);
    uint64_t v43 = String.init<A>(describing:)(v41, v76);
    v0[147] = sub_BAEB0(v43, v44);
    sub_46578((uint64_t)(v0 + 147), (uint64_t)(v0 + 148), (uint64_t)(v42 + 4));
    sub_2A184();
    sub_DA24(&dword_0, (os_log_s *)v32, (os_log_type_t)v28, "#GetSleepAnalysisFlow: snippet model is %s", v42);
    sub_A81C(v92);
    sub_5050(v92);
    sub_5050((uint64_t)v42);

    uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
    v45(v84, v81);
  }

  else
  {

    uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    uint64_t v46 = sub_BAFA0();
    v45(v46, v47);
  }

  v0[247] = v45;
  uint64_t v48 = (os_log_s *)v0[169];
  uint64_t v49 = v0[165];
  uint64_t v50 = v0[164];
  sub_A5DC(v34, (uint64_t)(v0 + 135));
  uint64_t v51 = ((uint64_t (*)(os_log_s *, uint64_t, uint64_t))v35)(v48, v34, v49);
  sub_BAFE4(v51, v52, type metadata accessor for SnippetHeaderModel);
  Logger.logObject.getter(v53);
  os_log_type_t v54 = sub_AB70();
  BOOL v55 = sub_A634(v54);
  uint64_t v56 = v0[169];
  uint64_t v57 = v0[165];
  if (v55)
  {
    uint64_t v58 = v0[162];
    uint64_t v82 = v0[161];
    uint64_t v79 = v0[160];
    uint64_t v86 = v0[169];
    uint64_t v59 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v93 = sub_A5E8(32LL);
    *(_DWORD *)uint64_t v59 = 136315138;
    uint64_t v60 = sub_BB074();
    sub_BA7DC(v60, v61, v62);
    uint64_t v63 = String.init<A>(describing:)(v58, v79);
    unint64_t v65 = v64;
    v0[145] = sub_BAEB0(v63, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 145, v0 + 146, v59 + 4, v59 + 12);
    swift_bridgeObjectRelease(v65);
    sub_26F04(v82, type metadata accessor for SnippetHeaderModel);
    sub_DA24(&dword_0, v48, (os_log_type_t)v50, "#GetSleepAnalysisFlow: snippet header model is %s", v59);
    sub_A81C(v93);
    sub_5050(v93);
    sub_5050((uint64_t)v59);

    uint64_t v66 = v86;
    uint64_t v67 = v57;
  }

  else
  {
    sub_26F04(v0[161], type metadata accessor for SnippetHeaderModel);

    uint64_t v66 = v56;
    uint64_t v67 = v57;
  }

  v45(v66, v67);
  uint64_t v68 = v0[215];
  uint64_t v69 = v0[214];
  uint64_t v70 = v0[159];
  *(double *)&uint64_t v71 = (double)(uint64_t)v0[212] / (double)(uint64_t)v0[213];
  sub_A5DC(v70, (uint64_t)(v0 + 126));
  uint64_t v72 = *(void *)(v70 + *(int *)(v89 + 48));
  v0[248] = v72;
  uint64_t v73 = *(void *)(v70 + *(int *)(v91 + 44));
  v0[249] = v73;
  uint64_t v74 = dword_18DC34;
  sub_4195C();
  swift_retain();
  swift_retain();
  sub_372CC();
  uint64_t v75 = (void *)swift_task_alloc(v74);
  v0[250] = v75;
  sub_BB018(v75, (uint64_t)sub_B7E1C);
  sub_9F6D8(v68, v71, 0, v72, v73, v69);
}

uint64_t sub_B7E1C(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v9 = v4;
  sub_56254(*(void *)(v4 + 2000), &v9);
  sub_37110();
  sub_367AC();
  sub_36BE0();
  sub_36EBC();
  if (v1) {
    sub_36860();
  }
  else {
    *(void *)(v4 + 200_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a1;
  }
  sub_A964();
  return swift_task_switch(v5, v6, v7);
}

uint64_t sub_B7EB8()
{
  uint64_t v1 = (void *)v0[251];
  v0[90] = type metadata accessor for WellnessSnippets(0LL);
  sub_A410( (unint64_t *)&qword_18A468,  type metadata accessor for WellnessSnippets,  (uint64_t)&protocol conformance descriptor for WellnessSnippets);
  v0[91] = v2;
  sub_B76C(v0 + 87);
  uint64_t v3 = sub_7DFE8();
  sub_BA7DC(v3, v4, v5);
  uint64_t v6 = sub_BAFCC();
  swift_storeEnumTagMultiPayload(v6, v7, 12LL);
  uint64_t v8 = dword_18B6FC;
  id v9 = v1;
  uint64_t v10 = (void *)swift_task_alloc(v8);
  v0[252] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_B7F84;
  uint64_t v11 = sub_90540();
  return sub_5E844(v11, v12, v13);
}

uint64_t sub_B7F84()
{
  return sub_A5D0();
}

uint64_t sub_B7FC0()
{
  uint64_t v1 = *(void **)(v0 + 2008);
  sub_BB1B8();
  uint64_t v594 = v2;
  uint64_t v595 = v3;
  uint64_t v4 = *(void *)(v0 + 1312);
  uint64_t v596 = *(void *)(v0 + 1272);
  sub_BB294();
  uint64_t v5 = sub_364BC((uint64_t)&unk_17F640);
  sub_BB054(v5);
  uint64_t v6 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  uint64_t v7 = sub_A72C(v6);
  *(void *)(v0 + 113sub_D878(v0 + 6) = sub_BB33C(v7, (uint64_t)&unk_18E5A8);
  uint64_t v597 = sub_BB270();

  sub_A37E4();
  sub_39BAC();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 656));
  sub_26F04(v4, type metadata accessor for SnippetHeaderModel);
  sub_279E0(v594, &qword_189CF8);
  sub_279E0(v595, &qword_189BA0);
  sub_37034();
  sub_26F04(v596, type metadata accessor for SleepQueryModel);
  sub_BAAEC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  sub_A8EC();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  uint64_t v8 = sub_A78C();
  uint64_t v16 = sub_AAD8(v8, v9, v10, v11, v12, v13, v14, v15, v217, v243);
  uint64_t v24 = sub_A888(v16, v17, v18, v19, v20, v21, v22, v23, v218, v244, v269);
  uint64_t v32 = sub_A854(v24, v25, v26, v27, v28, v29, v30, v31, v219, v245, v270, v294);
  uint64_t v40 = sub_A84C(v32, v33, v34, v35, v36, v37, v38, v39, v220, v246, v271, v295, v318);
  uint64_t v48 = sub_A844(v40, v41, v42, v43, v44, v45, v46, v47, v221, v247, v272, v296, v319, v341);
  uint64_t v56 = sub_A83C(v48, v49, v50, v51, v52, v53, v54, v55, v222, v248, v273, v297, v320, v342, v363);
  uint64_t v64 = sub_A95C(v56, v57, v58, v59, v60, v61, v62, v63, v223, v249, v274, v298, v321, v343, v364, v384);
  uint64_t v72 = sub_A954(v64, v65, v66, v67, v68, v69, v70, v71, v224, v250, v275, v299, v322, v344, v365, v385, v404);
  uint64_t v80 = sub_A938(v72, v73, v74, v75, v76, v77, v78, v79, v225, v251, v276, v300, v323, v345, v366, v386, v405, v423);
  uint64_t v88 = sub_A930( v80,  v81,  v82,  v83,  v84,  v85,  v86,  v87,  v226,  v252,  v277,  v301,  v324,  v346,  v367,  v387,  v406,  v424,  v441);
  uint64_t v96 = sub_A928( v88,  v89,  v90,  v91,  v92,  v93,  v94,  v95,  v227,  v253,  v278,  v302,  v325,  v347,  v368,  v388,  v407,  v425,  v442,  v458);
  uint64_t v104 = sub_A920( v96,  v97,  v98,  v99,  v100,  v101,  v102,  v103,  v228,  v254,  v279,  v303,  v326,  v348,  v369,  v389,  v408,  v426,  v443,  v459,  v474);
  uint64_t v112 = sub_36374( v104,  v105,  v106,  v107,  v108,  v109,  v110,  v111,  v229,  v255,  v280,  v304,  v327,  v349,  v370,  v390,  v409,  v427,  v444,  v460,  v475,  v489);
  uint64_t v120 = sub_3636C( v112,  v113,  v114,  v115,  v116,  v117,  v118,  v119,  v230,  v256,  v281,  v305,  v328,  v350,  v371,  v391,  v410,  v428,  v445,  v461,  v476,  v490,  v503);
  uint64_t v128 = sub_36364( v120,  v121,  v122,  v123,  v124,  v125,  v126,  v127,  v231,  v257,  v282,  v306,  v329,  v351,  v372,  v392,  v411,  v429,  v446,  v462,  v477,  v491,  v504,  v516);
  uint64_t v136 = sub_363F0( v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v232,  v258,  v283,  v307,  v330,  v352,  v373,  v393,  v412,  v430,  v447,  v463,  v478,  v492,  v505,  v517,  v528);
  uint64_t v144 = sub_36430( v136,  v137,  v138,  v139,  v140,  v141,  v142,  v143,  v233,  v259,  v284,  v308,  v331,  v353,  v374,  v394,  v413,  v431,  v448,  v464,  v479,  v493,  v506,  v518,  v529,  v539);
  uint64_t v152 = sub_36428( v144,  v145,  v146,  v147,  v148,  v149,  v150,  v151,  v234,  v260,  v285,  v309,  v332,  v354,  v375,  v395,  v414,  v432,  v449,  v465,  v480,  v494,  v507,  v519,  v530,  v540,  v549);
  uint64_t v160 = sub_36478( v152,  v153,  v154,  v155,  v156,  v157,  v158,  v159,  v235,  v261,  v286,  v310,  v333,  v355,  v376,  v396,  v415,  v433,  v450,  v466,  v481,  v495,  v508,  v520,  v531,  v541,  v550,  v558);
  uint64_t v168 = sub_36524( v160,  v161,  v162,  v163,  v164,  v165,  v166,  v167,  v236,  v262,  v287,  v311,  v334,  v356,  v377,  v397,  v416,  v434,  v451,  v467,  v482,  v496,  v509,  v521,  v532,  v542,  v551,  v559,  v566);
  uint64_t v176 = sub_3651C( v168,  v169,  v170,  v171,  v172,  v173,  v174,  v175,  v237,  v263,  v288,  v312,  v335,  v357,  v378,  v398,  v417,  v435,  v452,  v468,  v483,  v497,  v510,  v522,  v533,  v543,  v552,  v560,  v567,  v573);
  uint64_t v184 = sub_36514( v176,  v177,  v178,  v179,  v180,  v181,  v182,  v183,  v238,  v264,  v289,  v313,  v336,  v358,  v379,  v399,  v418,  v436,  v453,  v469,  v484,  v498,  v511,  v523,  v534,  v544,  v553,  v561,  v568,  v574,  v579);
  uint64_t v192 = sub_3650C( v184,  v185,  v186,  v187,  v188,  v189,  v190,  v191,  v239,  v265,  v290,  v314,  v337,  v359,  v380,  v400,  v419,  v437,  v454,  v470,  v485,  v499,  v512,  v524,  v535,  v545,  v554,  v562,  v569,  v575,  v580,  v584);
  uint64_t v200 = sub_36504( v192,  v193,  v194,  v195,  v196,  v197,  v198,  v199,  v240,  v266,  v291,  v315,  v338,  v360,  v381,  v401,  v420,  v438,  v455,  v471,  v486,  v500,  v513,  v525,  v536,  v546,  v555,  v563,  v570,  v576,  v581,  v585,  v588);
  uint64_t v208 = sub_364FC( v200,  v201,  v202,  v203,  v204,  v205,  v206,  v207,  v241,  v267,  v292,  v316,  v339,  v361,  v382,  v402,  v421,  v439,  v456,  v472,  v487,  v501,  v514,  v526,  v537,  v547,  v556,  v564,  v571,  v577,  v582,  v586,  v589,  v591);
  sub_364F4( v208,  v209,  v210,  v211,  v212,  v213,  v214,  v215,  v242,  v268,  v293,  v317,  v340,  v362,  v383,  v403,  v422,  v440,  v457,  v473,  v488,  v502,  v515,  v527,  v538,  v548,  v557,  v565,  v572,  v578,  v583,  v587,  v590,  v592,  v593);
  sub_3660C();
  sub_36604();
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  sub_366B8();
  sub_366B0();
  return sub_BACBC(v597, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_B8174()
{
  uint64_t v1 = *(void (**)(uint64_t, void *, uint64_t))(v0 + 1968);
  uint64_t v2 = *(void **)(v0 + 1960);
  uint64_t v3 = *(void *)(v0 + 1344);
  uint64_t v4 = *(void *)(v0 + 1320);
  sub_A5DC((uint64_t)v2, v0 + 984);
  v1(v3, v2, v4);
  sub_23374();
  os_log_type_t v5 = sub_A898();
  if (sub_A988(v5))
  {
    uint64_t v6 = (_WORD *)sub_A5E8(2LL);
    sub_366C0(v6);
    sub_A940(&dword_0, v7, v8, "Couldn't create detailed sleep analysis dialog returning nil");
    sub_5050(v4);
  }

  uint64_t v9 = *(void (**)(uint64_t))(v0 + 1976);
  uint64_t v510 = *(void *)(v0 + 1520);
  uint64_t v511 = *(void *)(v0 + 1272);
  uint64_t v10 = *(void *)(v0 + 1208);

  uint64_t v11 = sub_BB074();
  v9(v11);
  sub_A13C((_OWORD *)(v10 + 80), (_OWORD *)(v0 + 336));
  sub_A178();
  uint64_t v512 = sub_BB1B0();
  sub_37110();
  sub_36EBC();
  uint64_t v12 = sub_BB2EC();
  sub_BB21C((uint64_t)v12, type metadata accessor for SnippetHeaderModel);
  sub_BB190(v13, &qword_189CF8);
  sub_279E0(v510, &qword_189BA0);
  sub_26F04(v511, type metadata accessor for SleepQueryModel);
  uint64_t v14 = sub_BAC6C();
  uint64_t v210 = v16;
  uint64_t v234 = v15;
  uint64_t v257 = *(void *)(v0 + 1568);
  uint64_t v279 = *(void *)(v0 + 1560);
  uint64_t v300 = *(void *)(v0 + 1552);
  uint64_t v320 = *(void *)(v0 + 1544);
  uint64_t v339 = *(void *)(v0 + 1520);
  uint64_t v357 = *(void *)(v0 + 1512);
  uint64_t v374 = *(void *)(v0 + 1504);
  uint64_t v390 = *(void *)(v0 + 1496);
  uint64_t v405 = *(void *)(v0 + 1488);
  uint64_t v419 = *(void *)(v0 + 1480);
  uint64_t v432 = *(void *)(v0 + 1472);
  uint64_t v444 = *(void *)(v0 + 1448);
  uint64_t v455 = *(void *)(v0 + 1424);
  uint64_t v465 = *(void *)(v0 + 1400);
  uint64_t v474 = *(void *)(v0 + 1392);
  uint64_t v482 = *(void *)(v0 + 1384);
  uint64_t v489 = *(void *)(v0 + 1376);
  uint64_t v495 = *(void *)(v0 + 1368);
  uint64_t v500 = *(void *)(v0 + 1360);
  uint64_t v504 = *(void *)(v0 + 1352);
  uint64_t v507 = *(void *)(v0 + 1344);
  uint64_t v509 = *(void *)(v0 + 1336);
  swift_task_dealloc(v14);
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  sub_A8EC();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  uint64_t v17 = sub_A78C();
  uint64_t v25 = sub_A970(v17, v18, v19, v20, v21, v22, v23, v24, v210);
  uint64_t v33 = sub_AAD8(v25, v26, v27, v28, v29, v30, v31, v32, v211, v234);
  uint64_t v41 = sub_A888(v33, v34, v35, v36, v37, v38, v39, v40, v212, v235, v257);
  uint64_t v49 = sub_A854(v41, v42, v43, v44, v45, v46, v47, v48, v213, v236, v258, v279);
  uint64_t v57 = sub_A84C(v49, v50, v51, v52, v53, v54, v55, v56, v214, v237, v259, v280, v300);
  uint64_t v65 = sub_A844(v57, v58, v59, v60, v61, v62, v63, v64, v215, v238, v260, v281, v301, v320);
  uint64_t v73 = sub_A83C(v65, v66, v67, v68, v69, v70, v71, v72, v216, v239, v261, v282, v302, v321, v339);
  uint64_t v81 = sub_A95C(v73, v74, v75, v76, v77, v78, v79, v80, v217, v240, v262, v283, v303, v322, v340, v357);
  uint64_t v89 = sub_A954(v81, v82, v83, v84, v85, v86, v87, v88, v218, v241, v263, v284, v304, v323, v341, v358, v374);
  uint64_t v97 = sub_A938(v89, v90, v91, v92, v93, v94, v95, v96, v219, v242, v264, v285, v305, v324, v342, v359, v375, v390);
  uint64_t v105 = sub_A930( v97,  v98,  v99,  v100,  v101,  v102,  v103,  v104,  v220,  v243,  v265,  v286,  v306,  v325,  v343,  v360,  v376,  v391,  v405);
  uint64_t v113 = sub_A928( v105,  v106,  v107,  v108,  v109,  v110,  v111,  v112,  v221,  v244,  v266,  v287,  v307,  v326,  v344,  v361,  v377,  v392,  v406,  v419);
  uint64_t v121 = sub_A920( v113,  v114,  v115,  v116,  v117,  v118,  v119,  v120,  v222,  v245,  v267,  v288,  v308,  v327,  v345,  v362,  v378,  v393,  v407,  v420,  v432);
  uint64_t v129 = sub_36374( v121,  v122,  v123,  v124,  v125,  v126,  v127,  v128,  v223,  v246,  v268,  v289,  v309,  v328,  v346,  v363,  v379,  v394,  v408,  v421,  v433,  v444);
  uint64_t v137 = sub_3636C( v129,  v130,  v131,  v132,  v133,  v134,  v135,  v136,  v224,  v247,  v269,  v290,  v310,  v329,  v347,  v364,  v380,  v395,  v409,  v422,  v434,  v445,  v455);
  uint64_t v145 = sub_36364( v137,  v138,  v139,  v140,  v141,  v142,  v143,  v144,  v225,  v248,  v270,  v291,  v311,  v330,  v348,  v365,  v381,  v396,  v410,  v423,  v435,  v446,  v456,  v465);
  uint64_t v153 = sub_363F0( v145,  v146,  v147,  v148,  v149,  v150,  v151,  v152,  v226,  v249,  v271,  v292,  v312,  v331,  v349,  v366,  v382,  v397,  v411,  v424,  v436,  v447,  v457,  v466,  v474);
  uint64_t v161 = sub_36430( v153,  v154,  v155,  v156,  v157,  v158,  v159,  v160,  v227,  v250,  v272,  v293,  v313,  v332,  v350,  v367,  v383,  v398,  v412,  v425,  v437,  v448,  v458,  v467,  v475,  v482);
  uint64_t v169 = sub_36428( v161,  v162,  v163,  v164,  v165,  v166,  v167,  v168,  v228,  v251,  v273,  v294,  v314,  v333,  v351,  v368,  v384,  v399,  v413,  v426,  v438,  v449,  v459,  v468,  v476,  v483,  v489);
  uint64_t v177 = sub_36478( v169,  v170,  v171,  v172,  v173,  v174,  v175,  v176,  v229,  v252,  v274,  v295,  v315,  v334,  v352,  v369,  v385,  v400,  v414,  v427,  v439,  v450,  v460,  v469,  v477,  v484,  v490,  v495);
  uint64_t v185 = sub_36524( v177,  v178,  v179,  v180,  v181,  v182,  v183,  v184,  v230,  v253,  v275,  v296,  v316,  v335,  v353,  v370,  v386,  v401,  v415,  v428,  v440,  v451,  v461,  v470,  v478,  v485,  v491,  v496,  v500);
  uint64_t v193 = sub_3651C( v185,  v186,  v187,  v188,  v189,  v190,  v191,  v192,  v231,  v254,  v276,  v297,  v317,  v336,  v354,  v371,  v387,  v402,  v416,  v429,  v441,  v452,  v462,  v471,  v479,  v486,  v492,  v497,  v501,  v504);
  uint64_t v201 = sub_36514( v193,  v194,  v195,  v196,  v197,  v198,  v199,  v200,  v232,  v255,  v277,  v298,  v318,  v337,  v355,  v372,  v388,  v403,  v417,  v430,  v442,  v453,  v463,  v472,  v480,  v487,  v493,  v498,  v502,  v505,  v507);
  sub_3650C( v201,  v202,  v203,  v204,  v205,  v206,  v207,  v208,  v233,  v256,  v278,  v299,  v319,  v338,  v356,  v373,  v389,  v404,  v418,  v431,  v443,  v454,  v464,  v473,  v481,  v488,  v494,  v499,  v503,  v506,  v508,  v509);
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  sub_366B8();
  sub_366B0();
  sub_366A8();
  sub_36814();
  sub_3680C();
  sub_36804();
  sub_367FC();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v512);
}

uint64_t sub_B8450(uint64_t a1)
{
  uint64_t v564 = v1 + 816;
  uint64_t v3 = (void *)(v1 + 888);
  uint64_t v4 = v1 + 912;
  *(void *)(v1 + 187sub_D878(v0 + 2) = 0LL;
  uint64_t v5 = *(void *)(v1 + 1392);
  uint64_t v6 = *(void *)(v1 + 1328);
  uint64_t v7 = Logger.wellness.unsafeMutableAddressor(a1);
  *(void *)(v1 + 1880) = v7;
  sub_A5DC(v7, v1 + 888);
  *(void *)(v1 + 188_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *(void *)(v6 + 16);
  sub_BAF40(v5, v7);
  sub_23374();
  os_log_type_t v8 = sub_AB70();
  if (sub_46514(v8))
  {
    uint64_t v560 = *(void *)(v1 + 1328);
    uint64_t v561 = *(void *)(v1 + 1320);
    uint64_t v562 = *(void *)(v1 + 1392);
    uint64_t v9 = *(void *)(v1 + 1272);
    uint64_t v10 = *(void *)(v1 + 1264);
    uint64_t v558 = *(void *)(v1 + 1240);
    uint64_t v11 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v567 = sub_A5E8(32LL);
    *(_DWORD *)uint64_t v11 = 136315138;
    sub_A5DC(v9, v1 + 936);
    uint64_t v12 = v9;
    uint64_t v4 = v1 + 912;
    sub_BA7DC(v12, v10, type metadata accessor for SleepQueryModel);
    uint64_t v13 = String.init<A>(describing:)(v10, v558);
    unint64_t v15 = v14;
    *(void *)(v1 + 116_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_BAEB0(v13, v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 1168, v1 + 1176, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v15);
    sub_DA24(&dword_0, (os_log_s *)(v1 + 888), v2, "#GetSleepAnalysisFlow: snippet model is %s", v11);
    sub_A81C(v567);
    sub_5050(v567);
    sub_5050((uint64_t)v11);

    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v560 + 8);
    v16(v562, v561);
  }

  else
  {
    uint64_t v17 = *(void *)(v1 + 1328);

    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    uint64_t v18 = sub_BAFA0();
    v16(v18, v19);
  }

  *(void *)(v1 + 189sub_D878(v0 + 6) = v16;
  uint64_t v20 = *(os_log_s **)(v1 + 1384);
  sub_A5DC(v7, v4);
  uint64_t v21 = sub_BB0B8();
  sub_BAFE4(v21, v22, type metadata accessor for SnippetHeaderModel);
  Logger.logObject.getter(v23);
  os_log_type_t v24 = sub_AB70();
  BOOL v25 = sub_561AC(v24);
  uint64_t v26 = *(void *)(v1 + 1320);
  uint64_t v27 = *(void *)(v1 + 1304);
  uint64_t v565 = v16;
  if (v25)
  {
    uint64_t v563 = *(void *)(v1 + 1384);
    uint64_t v28 = *(void *)(v1 + 1296);
    uint64_t v559 = *(void *)(v1 + 1280);
    uint64_t v29 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v568 = sub_A5E8(32LL);
    *(_DWORD *)uint64_t v29 = 136315138;
    uint64_t v16 = (void (*)(uint64_t, uint64_t))(v29 + 12);
    sub_BA7DC(v27, v28, type metadata accessor for SnippetHeaderModel);
    uint64_t v30 = String.init<A>(describing:)(v28, v559);
    *(void *)(v1 + 115sub_D878(v0 + 2) = sub_BAEB0(v30, v31);
    sub_46578(v1 + 1152, v1 + 1160, (uint64_t)(v29 + 4));
    sub_2A184();
    sub_26F04(v27, type metadata accessor for SnippetHeaderModel);
    sub_DA24(&dword_0, v20, (os_log_type_t)v4, "#GetSleepAnalysisFlow: snippet header model is %s", v29);
    sub_A81C(v568);
    sub_5050(v568);
    sub_5050((uint64_t)v29);

    v565(v563, v26);
  }

  else
  {
    sub_26F04(v27, type metadata accessor for SnippetHeaderModel);

    uint64_t v32 = sub_BAFA0();
    ((void (*)(uint64_t))v16)(v32);
  }

  sub_A5DC(v7, v564);
  uint64_t v33 = sub_BB0B8();
  Logger.logObject.getter(v33);
  os_log_type_t v34 = sub_A898();
  if (sub_A988(v34))
  {
    uint64_t v35 = (_WORD *)sub_A5E8(2LL);
    sub_366C0(v35);
    sub_A940(&dword_0, v36, v37, "Couldn't create sleep analysis dialog returning nil");
    sub_5050(v7);
  }

  sub_BAC3C();
  uint64_t v38 = sub_BB074();
  ((void (*)(uint64_t))v565)(v38);
  sub_BB210();
  sub_A178();
  uint64_t v566 = sub_BB1B0();
  sub_37110();
  sub_36EBC();
  uint64_t v39 = sub_BB2EC();
  sub_BB21C((uint64_t)v39, type metadata accessor for SnippetHeaderModel);
  sub_279E0((uint64_t)v16, &qword_189CF8);
  sub_BB190(v40, &qword_189BA0);
  sub_26F04(v564, type metadata accessor for SleepQueryModel);
  sub_BA9EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  sub_A8EC();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  uint64_t v41 = sub_A78C();
  uint64_t v49 = sub_AAD8(v41, v42, v43, v44, v45, v46, v47, v48, v234, v258);
  uint64_t v57 = sub_A888(v49, v50, v51, v52, v53, v54, v55, v56, v235, v259, v282);
  uint64_t v65 = sub_A854(v57, v58, v59, v60, v61, v62, v63, v64, v236, v260, v283, v305);
  uint64_t v73 = sub_A84C(v65, v66, v67, v68, v69, v70, v71, v72, v237, v261, v284, v306, v327);
  uint64_t v81 = sub_A844(v73, v74, v75, v76, v77, v78, v79, v80, v238, v262, v285, v307, v328, v348);
  uint64_t v89 = sub_A83C(v81, v82, v83, v84, v85, v86, v87, v88, v239, v263, v286, v308, v329, v349, v368);
  uint64_t v97 = sub_A95C(v89, v90, v91, v92, v93, v94, v95, v96, v240, v264, v287, v309, v330, v350, v369, v387);
  uint64_t v105 = sub_A954(v97, v98, v99, v100, v101, v102, v103, v104, v241, v265, v288, v310, v331, v351, v370, v388, v405);
  uint64_t v113 = sub_A938( v105,  v106,  v107,  v108,  v109,  v110,  v111,  v112,  v242,  v266,  v289,  v311,  v332,  v352,  v371,  v389,  v406,  v422);
  uint64_t v121 = sub_A930( v113,  v114,  v115,  v116,  v117,  v118,  v119,  v120,  v243,  v267,  v290,  v312,  v333,  v353,  v372,  v390,  v407,  v423,  v438);
  uint64_t v129 = sub_A928( v121,  v122,  v123,  v124,  v125,  v126,  v127,  v128,  v244,  v268,  v291,  v313,  v334,  v354,  v373,  v391,  v408,  v424,  v439,  v453);
  uint64_t v137 = sub_A920( v129,  v130,  v131,  v132,  v133,  v134,  v135,  v136,  v245,  v269,  v292,  v314,  v335,  v355,  v374,  v392,  v409,  v425,  v440,  v454,  v467);
  uint64_t v145 = sub_36374( v137,  v138,  v139,  v140,  v141,  v142,  v143,  v144,  v246,  v270,  v293,  v315,  v336,  v356,  v375,  v393,  v410,  v426,  v441,  v455,  v468,  v480);
  uint64_t v153 = sub_3636C( v145,  v146,  v147,  v148,  v149,  v150,  v151,  v152,  v247,  v271,  v294,  v316,  v337,  v357,  v376,  v394,  v411,  v427,  v442,  v456,  v469,  v481,  v492);
  uint64_t v161 = sub_36364( v153,  v154,  v155,  v156,  v157,  v158,  v159,  v160,  v248,  v272,  v295,  v317,  v338,  v358,  v377,  v395,  v412,  v428,  v443,  v457,  v470,  v482,  v493,  v503);
  uint64_t v169 = sub_363F0( v161,  v162,  v163,  v164,  v165,  v166,  v167,  v168,  v249,  v273,  v296,  v318,  v339,  v359,  v378,  v396,  v413,  v429,  v444,  v458,  v471,  v483,  v494,  v504,  v513);
  uint64_t v177 = sub_36430( v169,  v170,  v171,  v172,  v173,  v174,  v175,  v176,  v250,  v274,  v297,  v319,  v340,  v360,  v379,  v397,  v414,  v430,  v445,  v459,  v472,  v484,  v495,  v505,  v514,  v522);
  uint64_t v185 = sub_36428( v177,  v178,  v179,  v180,  v181,  v182,  v183,  v184,  v251,  v275,  v298,  v320,  v341,  v361,  v380,  v398,  v415,  v431,  v446,  v460,  v473,  v485,  v496,  v506,  v515,  v523,  v530);
  uint64_t v193 = sub_36478( v185,  v186,  v187,  v188,  v189,  v190,  v191,  v192,  v252,  v276,  v299,  v321,  v342,  v362,  v381,  v399,  v416,  v432,  v447,  v461,  v474,  v486,  v497,  v507,  v516,  v524,  v531,  v537);
  uint64_t v201 = sub_36524( v193,  v194,  v195,  v196,  v197,  v198,  v199,  v200,  v253,  v277,  v300,  v322,  v343,  v363,  v382,  v400,  v417,  v433,  v448,  v462,  v475,  v487,  v498,  v508,  v517,  v525,  v532,  v538,  v543);
  uint64_t v209 = sub_3651C( v201,  v202,  v203,  v204,  v205,  v206,  v207,  v208,  v254,  v278,  v301,  v323,  v344,  v364,  v383,  v401,  v418,  v434,  v449,  v463,  v476,  v488,  v499,  v509,  v518,  v526,  v533,  v539,  v544,  v548);
  uint64_t v217 = sub_36514( v209,  v210,  v211,  v212,  v213,  v214,  v215,  v216,  v255,  v279,  v302,  v324,  v345,  v365,  v384,  v402,  v419,  v435,  v450,  v464,  v477,  v489,  v500,  v510,  v519,  v527,  v534,  v540,  v545,  v549,  v552);
  uint64_t v225 = sub_3650C( v217,  v218,  v219,  v220,  v221,  v222,  v223,  v224,  v256,  v280,  v303,  v325,  v346,  v366,  v385,  v403,  v420,  v436,  v451,  v465,  v478,  v490,  v501,  v511,  v520,  v528,  v535,  v541,  v546,  v550,  v553,  v555);
  sub_36504( v225,  v226,  v227,  v228,  v229,  v230,  v231,  v232,  v257,  v281,  v304,  v326,  v347,  v367,  v386,  v404,  v421,  v437,  v452,  v466,  v479,  v491,  v502,  v512,  v521,  v529,  v536,  v542,  v547,  v551,  v554,  v556,  v557);
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  sub_366B8();
  sub_366B0();
  sub_366A8();
  sub_36814();
  sub_3680C();
  sub_36804();
  return sub_BACA0(v566, *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_B88EC(uint64_t a1, uint64_t a2)
{
  v3[42] = a2;
  v3[43] = v2;
  v3[41] = a1;
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v3[44] = v4;
  v3[45] = *(void *)(v4 - 8);
  v3[46] = sub_A5B8();
  v3[47] = sub_A5B8();
  uint64_t v5 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[48] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[49] = v6;
  v3[50] = sub_A5C0(v6);
  uint64_t v7 = sub_D984();
  v3[51] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[52] = v8;
  v3[53] = sub_A5C0(v8);
  uint64_t v9 = type metadata accessor for Calendar.Component(0LL);
  v3[54] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[55] = v10;
  v3[56] = sub_A5C0(v10);
  uint64_t v11 = sub_BB308();
  v3[57] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v3[58] = v12;
  v3[59] = sub_A5C0(v12);
  uint64_t v13 = sub_ABEC();
  v3[60] = v13;
  v3[61] = *(void *)(v13 - 8);
  v3[62] = sub_A5B8();
  v3[63] = sub_A5B8();
  sub_494C(&qword_189CF8);
  v3[64] = sub_A5B8();
  v3[65] = sub_A5B8();
  sub_494C(&qword_189BA0);
  v3[66] = sub_A5B8();
  v3[67] = sub_A5B8();
  v3[68] = sub_A5B8();
  uint64_t v14 = sub_A8E4();
  v3[69] = v14;
  v3[70] = *(void *)(v14 - 8);
  v3[71] = sub_A5B8();
  v3[72] = sub_A5B8();
  v3[73] = sub_A5B8();
  v3[74] = sub_A5B8();
  v3[75] = sub_A5B8();
  sub_494C(&qword_189CE8);
  v3[76] = sub_A5B8();
  v3[77] = sub_A5B8();
  v3[78] = sub_A5B8();
  v3[79] = sub_A5B8();
  v3[80] = sub_A5B8();
  v3[81] = sub_A5B8();
  v3[82] = sub_A5B8();
  v3[83] = sub_A5B8();
  v3[84] = sub_A5B8();
  v3[85] = sub_A5B8();
  v3[86] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_B8AF8(uint64_t a1)
{
  id v2 = sub_566D0(a1, "daysWithAsleepData");
  id v3 = sub_566D0((uint64_t)v2, "totalInBedDuration");
  double v5 = v4;
  id v6 = sub_566D0((uint64_t)v3, "totalAsleepDuration");
  double v8 = v7;
  id v9 = sub_566D0((uint64_t)v6, "daysWithAsleepData");
  id v214 = sub_566D0((uint64_t)v9, "daysSummarized");
  uint64_t v10 = type metadata accessor for DialogCalendarRange.Builder(0LL);
  sub_A72C(v10);
  uint64_t v11 = DialogCalendarRange.Builder.init()();
  p_os_log_type_t type = &stru_187FF0.type;
  id v13 = sub_5693C(v11, "start");
  if (v13)
  {
    uint64_t v14 = v13;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v13);

    uint64_t v15 = 0LL;
  }

  else
  {
    uint64_t v15 = 1LL;
  }

  uint64_t v215 = (id *)(v1 + 41);
  uint64_t v16 = v1[86];
  uint64_t v17 = v1[85];
  uint64_t v18 = v1[69];
  sub_41A40(v17, v15);
  sub_BB010(v17, v19, &qword_189CE8);
  uint64_t v20 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v16, 1LL, v18);
  int v21 = v20;
  if ((_DWORD)v20)
  {
    sub_57F00(v20, &qword_189CE8);
    double v22 = 0.0;
  }

  else
  {
    uint64_t v23 = v1[75];
    uint64_t v24 = v1[70];
    uint64_t v25 = sub_BB100(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 16));
    sub_57F00(v25, &qword_189CE8);
    double v26 = Date.timeIntervalSince1970.getter();
    sub_D970(v23, *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8));
    double v22 = v26;
  }

  dispatch thunk of DialogCalendarRange.Builder.withStartSecs(_:)(*(void *)&v22, v21 != 0);
  uint64_t v27 = sub_39BAC();
  id v28 = sub_5693C(v27, "end");
  if (v28)
  {
    uint64_t v29 = v28;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v28);

    uint64_t v30 = 0LL;
  }

  else
  {
    uint64_t v30 = 1LL;
  }

  uint64_t v31 = v1[84];
  uint64_t v32 = v1[83];
  uint64_t v33 = v1[69];
  sub_41A40(v32, v30);
  sub_BB010(v32, v34, &qword_189CE8);
  uint64_t v35 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v31, 1LL, v33);
  int v36 = v35;
  if ((_DWORD)v35)
  {
    sub_57F00(v35, &qword_189CE8);
    double v37 = 0.0;
  }

  else
  {
    uint64_t v38 = v1[75];
    uint64_t v39 = v1[70];
    uint64_t v40 = sub_BB100(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 16));
    sub_57F00(v40, &qword_189CE8);
    double v41 = Date.timeIntervalSince1970.getter();
    uint64_t v42 = *(uint64_t (**)(uint64_t, uint64_t))(v39 + 8);
    p_os_log_type_t type = &stru_187FF0.type;
    sub_D970(v38, v42);
    double v37 = v41;
  }

  BOOL v43 = v36 != 0;
  uint64_t v44 = v1[68];
  dispatch thunk of DialogCalendarRange.Builder.withEndSecs(_:)(*(void *)&v37, v43);
  uint64_t v45 = sub_36EBC();
  uint64_t v46 = dispatch thunk of DialogCalendarRange.Builder.build()(v45);
  v1[87] = v46;
  sub_3652C();
  uint64_t v47 = sub_41A40(v44, 1LL);
  id v48 = sub_373D8(v47, "start");
  uint64_t v51 = v1[82];
  if (!v48)
  {
    sub_6D78(v1[82], v49, v50, v1[69]);
    goto LABEL_19;
  }

  uint64_t v52 = v48;
  uint64_t v53 = v1[70];
  uint64_t v54 = v1[69];
  sub_9A694((uint64_t)v48);

  uint64_t v55 = *(uint64_t (**)(void, void, void))(v53 + 32);
  sub_BB0C8();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v51, 0LL, 1LL, v54);
  sub_72A58(v51);
  if (v56)
  {
LABEL_19:
    uint64_t v86 = v1[82];
    goto LABEL_22;
  }

  uint64_t v57 = v55(v1[74], v1[82], v1[69]);
  id v58 = sub_566D0(v57, "end");
  uint64_t v61 = v1[81];
  if (v58)
  {
    uint64_t v62 = v58;
    uint64_t v63 = v1[69];
    sub_9A694((uint64_t)v58);

    sub_BB0C8();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v61, 0LL, 1LL, v63);
    sub_72A58(v61);
    if (!v56)
    {
      uint64_t v64 = v1[75];
      uint64_t v65 = v1[74];
      uint64_t v66 = v1[73];
      uint64_t v67 = v1[72];
      uint64_t v68 = v1[70];
      uint64_t v210 = v46;
      id v212 = v9;
      uint64_t v69 = v1[69];
      uint64_t v70 = v1[68];
      uint64_t v71 = v1[67];
      uint64_t v206 = v1[60];
      sub_BB230(v66, v1[81]);
      uint64_t v72 = sub_BB080();
      sub_BB230(v72, v73);
      uint64_t v74 = sub_993B4();
      sub_BB230(v74, v75);
      DateInterval.init(start:end:)(v64, v67);
      uint64_t v76 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
      p_os_log_type_t type = (char **)(&stru_187FF0 + 16);
      v76(v66, v69);
      uint64_t v77 = v69;
      uint64_t v46 = v210;
      v76(v65, v77);
      sub_464D0(v70);
      sub_BB03C(v71, v78, v79, v80, v81, v82, v83, v84, v197, v198, v199, v200, v201, v202, v204, v206);
      uint64_t v85 = v71;
      id v9 = v212;
      sub_BAFF8(v85, v70);
      goto LABEL_23;
    }
  }

  else
  {
    sub_6D78(v1[81], v59, v60, v1[69]);
  }

  uint64_t v87 = v1[81];
  sub_565A8(v1[70]);
  uint64_t v86 = v87;
LABEL_22:
  sub_279E0(v86, &qword_189CE8);
LABEL_23:
  uint64_t v88 = v1[66];
  uint64_t v89 = v1[60];
  uint64_t v90 = v1[43];
  sub_F4F10(*(unsigned __int8 *)(v90 + 272), v1[68]);
  uint64_t v91 = sub_BB080();
  sub_A44C(v91, v92, v93);
  sub_A614(v88, 1LL, v89);
  if (v56)
  {
    sub_279E0(v1[66], &qword_189BA0);
  }

  else
  {
    uint64_t v205 = v90;
    uint64_t v211 = v46;
    id v213 = v9;
    uint64_t v94 = v1[80];
    uint64_t v95 = v1[75];
    uint64_t v96 = v1[70];
    uint64_t v98 = v1[58];
    uint64_t v97 = v1[59];
    uint64_t v99 = v1[56];
    uint64_t v207 = v1[57];
    uint64_t v101 = v1[54];
    uint64_t v100 = v1[55];
    uint64_t v102 = (*(uint64_t (**)(void, void, void))(v1[61] + 32LL))(v1[63], v1[66], v1[60]);
    static Calendar.current.getter(v102);
    uint64_t v103 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v100 + 104))( v99,  enum case for Calendar.Component.day(_:),  v101);
    Date.init()(v103);
    Calendar.date(byAdding:value:to:wrappingComponents:)(v99, -1LL, v95, 0LL);
    uint64_t v104 = *(uint64_t (**)(uint64_t, uint64_t))(v96 + 8);
    uint64_t v105 = sub_993B4();
    ((void (*)(uint64_t))v104)(v105);
    uint64_t v106 = sub_BB074();
    v107(v106);
    uint64_t v108 = *(uint64_t (**)(uint64_t, uint64_t))(v98 + 8);
    v108(v97, v207);
    int v109 = sub_7366C(v94);
    if (v109 == 1)
    {
      uint64_t v110 = sub_565A8(v1[61]);
      sub_57F00(v110, &qword_189CE8);
    }

    else
    {
      uint64_t v111 = v1[75];
      uint64_t v112 = v1[72];
      uint64_t v113 = v1[71];
      uint64_t v114 = v1[59];
      uint64_t v203 = v1[57];
      uint64_t v115 = (*(uint64_t (**)(uint64_t, void, void))(v1[70] + 32LL))(v113, v1[80], v1[69]);
      uint64_t v116 = static Calendar.current.getter(v115);
      uint64_t v117 = DateInterval.start.getter(v116);
      DateInterval.end.getter(v117);
      char v208 = Calendar.isDate(_:inSameDayAs:)(v111, v112);
      sub_BB1CC(v112);
      sub_BB1CC(v111);
      uint64_t v118 = v108(v114, v203);
      uint64_t v119 = static Calendar.current.getter(v118);
      DateInterval.end.getter(v119);
      char v120 = Calendar.isDate(_:inSameDayAs:)(v111, v113);
      sub_BB1CC(v111);
      uint64_t v121 = v108(v114, v203);
      unint64_t v122 = v1[61];
      if ((v208 & 1) != 0 && (v120 & 1) != 0)
      {
        uint64_t v209 = v104;
        uint64_t v124 = v1[52];
        uint64_t v123 = v1[53];
        uint64_t v125 = Logger.wellness.unsafeMutableAddressor(v121);
        sub_A5DC(v125, (uint64_t)(v1 + 27));
        sub_DA2C(v123, v125, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v124 + 16));
        uint64_t v126 = sub_BB180(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v122 + 16));
        uint64_t v127 = (os_log_s *)Logger.logObject.getter(v126);
        os_log_type_t v128 = static os_log_type_t.debug.getter();
        BOOL v129 = os_log_type_enabled(v127, v128);
        uint64_t v130 = v1[60];
        uint64_t v131 = v1[52];
        uint64_t v132 = v1[51];
        if (v129)
        {
          uint64_t v199 = (uint64_t)(v1 + 40);
          uint64_t v203 = v1[53];
          uint64_t v133 = (uint8_t *)sub_A5E8(12LL);
          uint64_t v201 = v131;
          uint64_t v134 = sub_A5E8(32LL);
          uint64_t v216 = v134;
          uint64_t v200 = v132;
          *(_DWORD *)uint64_t v133 = 136315138;
          uint64_t v198 = (uint64_t)(v133 + 4);
          sub_A410( &qword_18E5C8,  (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval,  (uint64_t)&protocol conformance descriptor for DateInterval);
          uint64_t v136 = dispatch thunk of CustomStringConvertible.description.getter(v130, v135);
          unint64_t v122 = v137;
          v1[40] = sub_39178(v136, v137, &v216);
          sub_9933C((uint64_t)(v1 + 40), (uint64_t)v215, (uint64_t)(v133 + 4));
          swift_bridgeObjectRelease(v122);
          sub_BB000();
          sub_DA24( &dword_0,  v127,  v128,  "%s seems like a request for last night, removing intervals from deep link",  v133);
          sub_A81C(v134);
          sub_5050(v134);
          sub_5050((uint64_t)v133);

          (*(void (**)(uint64_t, uint64_t))(v201 + 8))(v203, v132);
        }

        else
        {
          sub_BB000();

          uint64_t v138 = sub_BB2F4();
          v140(v138, v139);
        }

        uint64_t v141 = v1[63];
        uint64_t v142 = v1[60];
        uint64_t v143 = sub_BADF0();
        sub_72F7C(v143, &qword_189BA0);
        sub_BB08C(v144, v145, v146, v147, v148, v149, v150, v151, v197, v198, v199, v200, v201, v203, v205, v209);
        ((void (*)(uint64_t, uint64_t))v122)(v141, v142);
        uint64_t v152 = sub_BAFCC();
        sub_24D88(v152, v153, v154);
      }

      else
      {
        v104(v1[71], v1[69]);
        sub_6E0C(*(uint64_t (**)(uint64_t, uint64_t))(v122 + 8));
      }
    }

    id v9 = v213;
    uint64_t v46 = v211;
    p_os_log_type_t type = &stru_187FF0.type;
  }

  id v155 = objc_msgSend(*v215, p_type[390]);
  if (v155)
  {
    uint64_t v157 = v155;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v155);

    uint64_t v158 = 0LL;
  }

  else
  {
    uint64_t v158 = 1LL;
  }

  uint64_t v159 = 1LL;
  uint64_t v160 = sub_A66C(v1[79], v158, v156, v1[69]);
  id v161 = sub_5693C(v160, "end");
  if (v161)
  {
    uint64_t v163 = v161;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v161);

    uint64_t v159 = 0LL;
  }

  uint64_t v164 = 1LL;
  uint64_t v165 = sub_A66C(v1[78], v159, v162, v1[69]);
  id v166 = sub_565D4(v165, "summaryStartDate");
  if (v166)
  {
    uint64_t v168 = v166;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v166);

    uint64_t v164 = 0LL;
  }

  uint64_t v169 = sub_A66C(v1[77], v164, v167, v1[69]);
  id v170 = sub_565D4(v169, "summaryEndDate");
  if (v170)
  {
    uint64_t v173 = v170;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v170);
  }

  uint64_t v174 = (void *)v1[42];
  sub_BB130((uint64_t)v170, v171, v172, v1[69]);
  sub_BAEE8();
  uint64_t v176 = v175;
  v1[88] = v175;
  uint64_t v177 = (char *)[v174 daysSummarized];
  uint64_t v178 = v1[43];
  if (v177 == (_BYTE *)&dword_0 + 1)
  {
    uint64_t v179 = (void *)v1[42];
    sub_500C((void *)(v178 + 200), *(void *)(v178 + 224));
    sub_BAF00();
    sub_363E8();
    id v180 = v179;
    uint64_t v181 = (void *)swift_task_alloc(v178);
    v1[89] = v181;
    uint64_t v182 = sub_B95F8;
    goto LABEL_51;
  }

  uint64_t v183 = (void *)(v178 + 200);
  if (v5 <= 0.0 || v8 <= 0.0)
  {
    uint64_t v194 = (void *)v1[42];
    sub_500C(v183, *(void *)(v178 + 224));
    sub_BAF00();
    sub_363E8();
    id v195 = v194;
    uint64_t v181 = (void *)swift_task_alloc(v178);
    v1[90] = v181;
    uint64_t v182 = sub_B9864;
LABEL_51:
    *uint64_t v181 = v1;
    v181[1] = v182;
    sub_BB2C0();
    __asm { BR              X6 }
  }

  uint64_t v184 = v1[65];
  uint64_t v185 = v1[42];
  sub_A304((uint64_t)v183, (uint64_t)(v1 + 22));
  sub_500C(v1 + 22, v1[25]);
  uint64_t v186 = swift_task_alloc(64LL);
  v1[91] = v186;
  *(void *)(v186 + 1sub_D878(v0 + 6) = v178;
  *(void *)(v186 + 2sub_D878(v0 + 4) = v184;
  *(void *)(v186 + 3sub_D878(v0 + 2) = v46;
  *(void *)(v186 + 40) = v176;
  *(void *)(v186 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v185;
  *(double *)(v186 + sub_D7EC(v0 + 16, v0 + 56) = (double)(uint64_t)v9 / (double)(uint64_t)v214;
  uint64_t v187 = (void *)swift_task_alloc(dword_18B9C4);
  v1[92] = v187;
  *uint64_t v187 = v1;
  v187[1] = sub_B99EC;
  sub_BB2C0();
  return sub_6633C(v188, v189, v190, v191, v192);
}

uint64_t sub_B95F8()
{
  v3[30] = v1;
  v3[31] = v2;
  v3[32] = v0;
  sub_20264(v3[89]);
  if (v0) {
    sub_36860();
  }
  sub_A964();
  return sub_A5D0();
}

#error "B9674: call analysis failed (funcsize=75)"
#error "B9804: call analysis failed (funcsize=54)"
uint64_t sub_B9864()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  sub_AA10();
  v3[33] = v1;
  v3[34] = v2;
  v3[35] = v0;
  sub_20264(v3[90]);
  if (v0) {
    sub_36860();
  }
  sub_A964();
  return sub_A5D0();
}

#error "B98E0: call analysis failed (funcsize=75)"
uint64_t sub_B99EC(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  id v3 = (void *)*v2;
  double v8 = v3;
  v3[36] = v2;
  v3[37] = a1;
  v3[38] = v1;
  sub_56254(v3[92], &v8);
  if (v1) {
    sub_36860();
  }
  sub_A67C();
  sub_A964();
  return swift_task_switch(v4, v5, v6);
}

#error "B9B68: call analysis failed (funcsize=88)"
#error "B9C54: call analysis failed (funcsize=56)"
void sub_B9CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSURL *v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  double v50;
  uint64_t v11 = sub_BB224(__stack_chk_guard);
  uint64_t v12 = sub_BB328(v11);
  __chkstk_darwin(v12);
  sub_BAE44();
  sub_BB244();
  __chkstk_darwin(v13);
  sub_AA28();
  sub_494C(&qword_189D00);
  sub_6D20();
  __chkstk_darwin(v14);
  if (sub_BACD8())
  {
    uint64_t v15 = sub_ABF4();
    uint64_t v18 = sub_6D78(v8, v16, v17, v15);
  }

  else
  {
    sub_BAE78();
    [objc_allocWithZone(SAUIAppPunchOut) init];
    sub_BB31C(v20);
    double v22 = v21;
    sub_36F44(a5, "setPunchOutUri:");

    uint64_t v23 = a5;
    uint64_t v24 = sub_BB310();
    UUID.uuidString.getter(v24);
    sub_BAED0();
    sub_BB0E8();

    double v26 = sub_373D8(v25, "dictionary");
    if (v26)
    {
      uint64_t v27 = v26;
      id v28 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
      uint64_t v29 = sub_BAF8C(v28, "dataWithPropertyList:format:options:error:");
      uint64_t v30 = (char *)sub_BB288();
      if (v5)
      {
        static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
        sub_BB204();
        uint64_t v31 = sub_BB1A0();
        sub_56A24(v31, v32);

        sub_BB2B4();
        sub_6D64();
        uint64_t v34 = sub_ABF4();
        uint64_t v35 = v8;
        int v36 = 0LL;
      }

      else
      {
        id v6 = v30;
        uint64_t v38 = _convertNSErrorToError(_:)();

        double v5 = v38;
        swift_willThrow(v39);

        swift_errorRelease(v38);
        uint64_t v34 = sub_ABF4();
        uint64_t v35 = v8;
        int v36 = 1LL;
      }

      sub_A66C(v35, v36, v33, v34);
    }

    else
    {
      double v37 = type metadata accessor for SpeakableString(0LL);
      sub_BB110(v37);
    }

    uint64_t v18 = sub_BAF5C();
  }

  sub_BB258(v18, v19, &qword_189D00);
  type metadata accessor for WellnessQueryingSleep_SimpleResultParameters(0LL);
  sub_BAEB8();
  sub_3652C();
  sub_BAE60();
  sub_3652C();
  *(void *)&v6[a1] = v7;
  if ((a5 & 1) != 0)
  {
    uint64_t v40 = sub_BACFC();
    sub_A72C(v40);
    double v41 = sub_BAC34();
    sub_56344(v41, "totalAsleepDuration");
    sub_BAC08(v42);
    sub_3652C();
    sub_BAFF0();
    sub_36BE0();
    swift_release();
    sub_BAF48();
    BOOL v43 = sub_BAC34();
    sub_56344(v43, "averageAsleepDuration");
    uint64_t v45 = sub_BAC08(v44);
    sub_3652C();
    sub_BB0F8();
    sub_BAE1C();
    sub_BB1EC();
    *(void *)(a1 + v45) = v43;
  }

  uint64_t v46 = sub_BACFC();
  sub_A72C(v46);
  uint64_t v47 = sub_BAC34();
  sub_56344(v47, "totalInBedDuration");
  sub_BAC08(v48);
  sub_3652C();
  sub_BAFF0();
  sub_36BE0();
  swift_release();
  sub_BAF48();
  uint64_t v49 = sub_BAC34();
  sub_56344(v49, "averageInBedDuration");
  sub_BAC08(v50);
  sub_3652C();
  sub_BB0F8();
  sub_BAE1C();
  sub_BB1E0();
  *(void *)(a1 + v5) = v49;
  sub_D8FC();
}

void sub_B9FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  uint64_t v13 = sub_BB224(__stack_chk_guard);
  uint64_t v14 = sub_BB328(v13);
  __chkstk_darwin(v14);
  sub_BAE44();
  sub_BB244();
  __chkstk_darwin(v15);
  sub_AA28();
  sub_494C(&qword_189D00);
  sub_6D20();
  __chkstk_darwin(v16);
  if (sub_BACD8())
  {
    uint64_t v17 = sub_ABF4();
    uint64_t v20 = sub_6D78(v9, v18, v19, v17);
  }

  else
  {
    char v49 = a5;
    sub_BAE78();
    [objc_allocWithZone(SAUIAppPunchOut) init];
    sub_BB31C(v22);
    uint64_t v24 = v23;
    sub_36F44(a6, "setPunchOutUri:");

    id v25 = a6;
    uint64_t v26 = sub_BB310();
    UUID.uuidString.getter(v26);
    sub_BAED0();
    sub_BB0E8();

    id v28 = sub_373D8(v27, "dictionary");
    if (v28)
    {
      uint64_t v29 = v28;
      uint64_t v30 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
      id v31 = sub_BAF8C(v30, "dataWithPropertyList:format:options:error:");
      uint64_t v32 = (char *)sub_BB288();
      if (v6)
      {
        static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
        sub_BB204();
        uint64_t v33 = sub_BB1A0();
        sub_56A24(v33, v34);

        sub_BB2B4();
        sub_6D64();
        uint64_t v36 = sub_ABF4();
        uint64_t v37 = v9;
        uint64_t v38 = 0LL;
      }

      else
      {
        double v7 = v32;
        uint64_t v40 = _convertNSErrorToError(_:)();

        uint64_t v6 = v40;
        swift_willThrow(v41);

        swift_errorRelease(v40);
        uint64_t v36 = sub_ABF4();
        uint64_t v37 = v9;
        uint64_t v38 = 1LL;
      }

      sub_A66C(v37, v38, v35, v36);
    }

    else
    {
      uint64_t v39 = type metadata accessor for SpeakableString(0LL);
      sub_BB110(v39);
    }

    uint64_t v20 = sub_BAF5C();
    a5 = v49;
  }

  sub_BB258(v20, v21, &qword_189D00);
  type metadata accessor for WellnessQueryingSleep_SimpleResultParameters(0LL);
  sub_BAEB8();
  sub_3652C();
  sub_BAE60();
  sub_3652C();
  *(void *)&v7[a1] = v8;
  if ((a5 & 1) != 0)
  {
    uint64_t v42 = sub_BACFC();
    sub_A72C(v42);
    uint64_t v43 = sub_BAC34();
    [a6 averageAsleepDuration];
    uint64_t v45 = sub_BAC08(v44);
    sub_3652C();
    sub_BB0F8();
    sub_BAE1C();
    sub_BB1EC();
    *(void *)(a1 + v45) = v43;
  }

  uint64_t v46 = sub_BACFC();
  sub_A72C(v46);
  uint64_t v47 = sub_BAC34();
  [a6 averageInBedDuration];
  sub_BAC08(v48);
  sub_3652C();
  sub_BB0F8();
  sub_BAE1C();
  sub_BB1E0();
  *(void *)(a1 + vsub_D878(v0 + 6) = v47;
  sub_D8FC();
}

uint64_t sub_BA26C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, double a7)
{
  uint64_t v77 = a5;
  id v78 = a6;
  uint64_t v76 = a4;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v73 = *(void *)(v11 - 8);
  uint64_t v74 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for URL(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v75 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_494C(&qword_189D00);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  double v22 = (char *)&v70 - v21;
  uint64_t v23 = sub_27CC8(*(_BYTE *)(a2 + 272));
  uint64_t v25 = v24;
  String.toSpeakableString.getter(v23, v24);
  swift_bridgeObjectRelease(v25);
  uint64_t v26 = type metadata accessor for SpeakableString(0LL);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v22, 0LL, 1LL, v26);
  uint64_t v27 = (int *)type metadata accessor for WellnessQueryingSleep_DetailedResultParameters(0LL);
  sub_24D88((uint64_t)v22, a1 + v27[7], &qword_189D00);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a3, 1LL, v14))
  {
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v20, 1LL, 1LL, v26);
  }

  else
  {
    uint64_t v71 = v15;
    uint64_t v72 = v14;
    id v28 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    uint64_t v29 = v75;
    v28(v75, a3, v14);
    id v30 = [objc_allocWithZone(SAUIAppPunchOut) init];
    URL._bridgeToObjectiveC()(v31);
    uint64_t v33 = v32;
    [v30 setPunchOutUri:v32];

    id v34 = v30;
    uint64_t v35 = UUID.init()();
    uint64_t v36 = UUID.uuidString.getter(v35);
    uint64_t v38 = v37;
    (*(void (**)(char *, uint64_t))(v73 + 8))(v13, v74);
    sub_125B84(v36, v38, v34);

    id v39 = [v34 dictionary];
    uint64_t v40 = v29;
    if (v39)
    {
      uint64_t v41 = v39;
      uint64_t v42 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
      id v79 = 0LL;
      id v43 = [v42 dataWithPropertyList:v41 format:200 options:0 error:&v79];
      id v44 = v79;
      if (v43)
      {
        uint64_t v45 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v43);
        unint64_t v47 = v46;

        Swift::String v48 = Data.base64EncodedString(options:)(0LL);
        String.toSpeakableString.getter(v48._countAndFlagsBits, v48._object);

        sub_A3CC(v45, v47);
        swift_bridgeObjectRelease(v48._object);
        uint64_t v49 = (uint64_t)v20;
        uint64_t v50 = 0LL;
      }

      else
      {
        uint64_t v51 = v44;
        uint64_t v52 = _convertNSErrorToError(_:)();

        swift_willThrow(v53);
        swift_errorRelease(v52);
        uint64_t v49 = (uint64_t)v20;
        uint64_t v50 = 1LL;
      }

      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v49, v50, 1LL, v26);
    }

    else
    {
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v20, 1LL, 1LL, v26);
    }

    (*(void (**)(char *, uint64_t))(v71 + 8))(v40, v72);
  }

  sub_24D88((uint64_t)v20, a1, &qword_189D00);
  uint64_t v54 = v27[14];
  uint64_t v55 = v76;
  swift_retain();
  swift_release();
  *(void *)(a1 + v5sub_D878(v0 + 4) = v55;
  uint64_t v56 = v27[15];
  uint64_t v57 = v77;
  swift_retain();
  swift_release();
  *(void *)(a1 + vsub_D7EC(v0 + 16, v0 + 56) = v57;
  uint64_t v58 = type metadata accessor for DialogDuration.Builder(0LL);
  swift_allocObject(v58, *(unsigned int *)(v58 + 48), *(unsigned __int16 *)(v58 + 52));
  DialogDuration.Builder.init()();
  id v59 = v78;
  [v78 averageAsleepDuration];
  dispatch thunk of DialogDuration.Builder.withSecs(_:)(v60, 0LL);
  uint64_t v61 = swift_release();
  uint64_t v62 = dispatch thunk of DialogDuration.Builder.build()(v61);
  swift_release();
  uint64_t v63 = v27[5];
  swift_release();
  *(void *)(a1 + v6_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 3) = v62;
  swift_allocObject(v58, *(unsigned int *)(v58 + 48), *(unsigned __int16 *)(v58 + 52));
  DialogDuration.Builder.init()();
  [v59 averageInBedDuration];
  dispatch thunk of DialogDuration.Builder.withSecs(_:)(v64, 0LL);
  uint64_t v65 = swift_release();
  uint64_t v66 = dispatch thunk of DialogDuration.Builder.build()(v65);
  swift_release();
  uint64_t v67 = v27[6];
  uint64_t result = swift_release();
  *(void *)(a1 + v6_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = v66;
  uint64_t v69 = a1 + v27[13];
  *(double *)uint64_t v69 = a7;
  *(_BYTE *)(v69 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 0;
  return result;
}

uint64_t sub_BA758(uint64_t a1)
{
  id v3 = (void *)swift_task_alloc(dword_18E58C);
  *(void *)(v1 + 1sub_D878(v0 + 6) = v3;
  *id v3 = v1;
  v3[1] = sub_1FF58;
  return sub_B4524(a1);
}

void *sub_BA7A8(void *a1)
{
  return a1;
}

void sub_BA7DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3(0LL);
  sub_6E0C(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  sub_A890();
}

uint64_t sub_BA814()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_BA838()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_18E5A4);
  *(void *)(v0 + 1sub_D878(v0 + 6) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_20098;
  uint64_t v2 = sub_90540();
  return sub_34F70(v2, v3);
}

uint64_t sub_BA888()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_18E5B4);
  *(void *)(v0 + 1sub_D878(v0 + 6) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_35B20;
  uint64_t v2 = sub_90540();
  return sub_310E8(v2, v3);
}

uint64_t sub_BA8D8(uint64_t a1)
{
  return sub_BA26C( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void **)(v1 + 48),  *(double *)(v1 + 56));
}

void sub_BA8F4()
{
  uint64_t v2 = v0[50];
  *(void *)(v1 - 11sub_D878(v0 + 2) = v0[53];
  *(void *)(v1 - 10sub_D878(v0 + 4) = v2;
  uint64_t v3 = v0[46];
  *(void *)(v1 - 9sub_D878(v0 + 6) = v0[47];
  *(void *)(v1 - 8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v3;
}

uint64_t sub_BA994()
{
  return swift_task_dealloc(*(void *)(v0 + 1056));
}

uint64_t sub_BA9EC()
{
  uint64_t v2 = v0[208];
  uint64_t v3 = v0[163];
  *(void *)(v1 - 18sub_D878(v0 + 4) = v0[164];
  *(void *)(v1 - 17sub_D878(v0 + 6) = v3;
  uint64_t v4 = v0[161];
  *(void *)(v1 - 16_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v0[162];
  *(void *)(v1 - 160) = v4;
  uint64_t v5 = v0[158];
  *(void *)(v1 - 15sub_D878(v0 + 2) = v0[159];
  *(void *)(v1 - 14sub_D878(v0 + 4) = v5;
  uint64_t v6 = v0[156];
  *(void *)(v1 - 13sub_D878(v0 + 6) = v0[157];
  *(void *)(v1 - 12_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v6;
  uint64_t v7 = v0[153];
  *(void *)(v1 - 120) = v0[154];
  *(void *)(v1 - 11sub_D878(v0 + 2) = v7;
  *(void *)(v1 - 10sub_D878(v0 + 4) = v0[152];
  return swift_task_dealloc(v2);
}

uint64_t sub_BAAEC()
{
  uint64_t v2 = v0[208];
  uint64_t v3 = v0[161];
  *(void *)(v1 - 200) = v0[162];
  *(void *)(v1 - 19sub_D878(v0 + 2) = v3;
  uint64_t v4 = v0[158];
  *(void *)(v1 - 18sub_D878(v0 + 4) = v0[159];
  *(void *)(v1 - 17sub_D878(v0 + 6) = v4;
  uint64_t v5 = v0[156];
  *(void *)(v1 - 16_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v0[157];
  *(void *)(v1 - 160) = v5;
  uint64_t v6 = v0[153];
  *(void *)(v1 - 15sub_D878(v0 + 2) = v0[154];
  *(void *)(v1 - 14sub_D878(v0 + 4) = v6;
  *(void *)(v1 - 13sub_D878(v0 + 6) = v0[152];
  return swift_task_dealloc(v2);
}

uint64_t sub_BABEC(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_BAC08(double a1)
{
  return dispatch thunk of DialogDuration.Builder.withSecs(_:)(*(void *)&a1, 0LL);
}

id sub_BAC14@<X0>(void *a1@<X8>)
{
  uint64_t v4 = v2[68];
  uint64_t v5 = v2[49];
  *(void *)(v3 - 11sub_D878(v0 + 2) = v1;
  *(void *)(v3 - 10sub_D878(v0 + 4) = v5;
  *(void *)(v3 - 9sub_D878(v0 + 6) = v2[48];
  *(void *)(v3 - 8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v4;
  return a1;
}

uint64_t sub_BAC34()
{
  return DialogDuration.Builder.init()();
}

void sub_BAC3C()
{
  uint64_t v3 = *(void *)(v1 + 1272);
  *(void *)(v2 - 11sub_D878(v0 + 2) = *(void *)(v1 + 1520);
  *(void *)(v2 - 10sub_D878(v0 + 4) = v3;
}

uint64_t sub_BAC6C()
{
  return *(void *)(v0 + 1664);
}

uint64_t sub_BACA0(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_BACBC(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_BACD8()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v0, 1LL, v1);
}

uint64_t sub_BACFC()
{
  return type metadata accessor for DialogDuration.Builder(0LL);
}

uint64_t sub_BAD04()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v1, v0);
}

uint64_t sub_BAD18()
{
  uint64_t v3 = v1[13];
  uint64_t v4 = v1[14];
  sub_500C(v1 + 10, v3);
  return dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)( v2,  v0,  v3,  v4);
}

uint64_t sub_BAD48()
{
  return (*(uint64_t (**)(void, uint64_t, void))(v1[192] + 16LL))(v1[197], v0, v1[191]);
}

uint64_t sub_BAD68()
{
  return OutputGenerationManifest.responseViewId.setter(v0, v1);
}

uint64_t sub_BAD78(uint64_t a1, uint64_t a2)
{
  return OutputGenerationManifest.init(dialogPhase:_:)(v2, a2, 0LL);
}

uint64_t sub_BAD88()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_BAD98(uint64_t a1)
{
  *(void *)(v1 + 31sub_D878(v0 + 2) = a1;
  return type metadata accessor for AnyFlow(0LL);
}

_OWORD *sub_BADA8()
{
  return sub_A13C((_OWORD *)(*(void *)(v1 + 344) + 80LL), v0);
}

uint64_t sub_BADC4()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 104) + 8LL))(v0, *(void *)(v1 - 96));
}

  ;
}

uint64_t sub_BADF0()
{
  return sub_F4F10(v2, v0);
}

uint64_t sub_BAE1C()
{
  return swift_release(v0);
}

uint64_t sub_BAE28()
{
  return swift_retain(v0);
}

uint64_t sub_BAE44()
{
  return type metadata accessor for URL(0LL);
}

uint64_t sub_BAE60()
{
  *(void *)(v0 + _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, 1LL, 1LL, v1) = v2;
  return swift_retain(*(void *)(v3 - 112));
}

uint64_t sub_BAE78()
{
  *(void *)(v4 - 15sub_D878(v0 + 2) = v3;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v0, v2);
}

  ;
}

uint64_t sub_BAEB0(uint64_t a1, unint64_t a2)
{
  return sub_39178(a1, a2, (uint64_t *)(v2 - 88));
}

uint64_t sub_BAEB8()
{
  return swift_retain(*(void *)(v0 - 120));
}

uint64_t sub_BAED0()
{
  return (*(uint64_t (**)(uint64_t, void))(v0 + 8))(v1, *(void *)(v2 - 128));
}

void sub_BAEE8()
{
}

uint64_t sub_BAF00()
{
  return swift_retain(v0);
}

uint64_t sub_BAF18()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_BAF2C()
{
  *(void *)(v3 + vsub_D878(v0 + 2) = v0;
  return swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
}

uint64_t sub_BAF40(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_BAF48()
{
  *(void *)(v0 + v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 3) = v1;
  return swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
}

uint64_t sub_BAF5C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 152) + 8LL))(v0, v1);
}

uint64_t sub_BAF70@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 1064);
}

id sub_BAF8C(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2, 200, 0, v3 - 96);
}

uint64_t sub_BAFA0()
{
  return v0;
}

void sub_BAFAC()
{
}

uint64_t sub_BAFB8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_BAFCC()
{
  return v0;
}

uint64_t sub_BAFD8()
{
  return CATWrapperSimple.__allocating_init(options:globals:)(v0, 0LL);
}

void sub_BAFE4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

uint64_t sub_BAFF0()
{
  return dispatch thunk of DialogDuration.Builder.build()();
}

void sub_BAFF8(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_BB000()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_BB010(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void *sub_BB018@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  void *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_BB024@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return 0x6D6954677661LL;
}

uint64_t sub_BB03C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 0LL, 1LL, a16);
}

uint64_t sub_BB04C(uint64_t a1)
{
  return v1(a1, v2);
}

void *sub_BB054(uint64_t a1)
{
  return static OutputPublisherFactory.makeOutputPublisherAsync()((void *)(v2 - 120));
}

uint64_t sub_BB074()
{
  return v0;
}

uint64_t sub_BB080()
{
  return v0;
}

uint64_t sub_BB08C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t (*a16)(uint64_t, uint64_t))
{
  return a16(v17, v16);
}

uint64_t sub_BB09C()
{
  return v0(v1, v2, v3);
}

uint64_t sub_BB0AC()
{
  return v0;
}

uint64_t sub_BB0B8()
{
  return v3(v1, v2, v0);
}

uint64_t sub_BB0C8()
{
  return v3(v0, v1, v2);
}

uint64_t sub_BB0D8()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v0, 1LL, v1);
}

void sub_BB0E8()
{
}

uint64_t sub_BB0F8()
{
  return dispatch thunk of DialogDuration.Builder.build()();
}

uint64_t sub_BB100@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1, v3);
}

void sub_BB110(uint64_t a1)
{
}

uint64_t sub_BB130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for WellnessTime(0LL);
}

uint64_t sub_BB150()
{
  return v3(v2, v0, v1);
}

uint64_t sub_BB160()
{
  return v0(v1, v2);
}

uint64_t sub_BB170()
{
  return v3(v2, v0, v1);
}

uint64_t sub_BB180@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v3, v2, v1);
}

void sub_BB190(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_BB198()
{
  return dispatch thunk of DialogDuration.Builder.build()();
}

uint64_t sub_BB1A0()
{
  return Data.base64EncodedString(options:)(0LL)._countAndFlagsBits;
}

uint64_t sub_BB1B0()
{
  return Flow.eraseToAnyFlow()();
}

  ;
}

uint64_t sub_BB1CC(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_BB1D4(uint64_t a1)
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_BB1E0()
{
  return swift_release(*(void *)(v0 + *(int *)(v1 + 24)));
}

uint64_t sub_BB1EC()
{
  return swift_release(*(void *)(v0 + *(int *)(v1 + 20)));
}

uint64_t sub_BB1F8()
{
  return static ExecuteResponse.complete(next:)(v0);
}

void sub_BB204()
{
}

_OWORD *sub_BB210()
{
  return sub_A13C((_OWORD *)(v0 + 80), v1);
}

void sub_BB21C(uint64_t a1, uint64_t (*a2)(void))
{
}

uint64_t sub_BB224@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a1;
  return type metadata accessor for UUID(0LL);
}

uint64_t sub_BB230(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_BB238( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return static DialogPhase.completion.getter(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

  ;
}

void sub_BB258(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_BB264()
{
  return swift_release_n(v0, 2LL);
}

uint64_t sub_BB270()
{
  return Flow.eraseToAnyFlow()(v0);
}

uint64_t sub_BB27C()
{
  return v0(v1, v2);
}

id sub_BB288()
{
  return *(id *)(v0 - 96);
}

void sub_BB294()
{
}

uint64_t sub_BB2A0(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_BB2A8()
{
  return static CATOption.defaultMode.getter();
}

uint64_t sub_BB2B4()
{
  return sub_A3CC(v0, v1);
}

  ;
}

uint64_t sub_BB2E4(uint64_t a1)
{
  return v2(a1, v1);
}

void *sub_BB2EC()
{
  return sub_A1B4(v0);
}

uint64_t sub_BB2F4()
{
  return v0;
}

uint64_t sub_BB300()
{
  return swift_release(*(void *)(v0 - 112));
}

uint64_t sub_BB308()
{
  return type metadata accessor for Calendar(0LL);
}

uint64_t sub_BB310()
{
  return UUID.init()();
}

void sub_BB31C(NSURL *retstr@<X8>)
{
}

uint64_t sub_BB328(uint64_t result)
{
  *(void *)(v1 - 12_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = result;
  return result;
}

uint64_t sub_BB33C(uint64_t a1, uint64_t a2)
{
  return SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)(v3 - 120, a2, v2);
}

uint64_t sub_BB348@<X0>( uint64_t a1@<X0>, char a2@<W1>, char a3@<W3>, char a4@<W5>, char a5@<W7>, uint64_t a6@<X8>, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  BOOL v18 = (a2 & 1) == 0;
  sub_494C(&qword_18A1A0);
  sub_6D20();
  __chkstk_darwin(v19);
  sub_6D30();
  uint64_t v57 = v20;
  uint64_t v56 = type metadata accessor for AppPunchout(0LL);
  sub_6D78(a6, v21, v22, v56);
  uint64_t v23 = (int *)sub_BED30();
  uint64_t v54 = a6 + v23[10];
  type metadata accessor for SpeakableString(0LL);
  sub_AA204(v54);
  uint64_t v24 = (void *)(a6 + v23[11]);
  *uint64_t v24 = 0LL;
  v24[1] = 0LL;
  uint64_t v58 = (void *)(a6 + v23[12]);
  *uint64_t v58 = 0LL;
  v58[1] = 0LL;
  id v59 = (void *)(a6 + v23[13]);
  *id v59 = 0LL;
  v59[1] = 0LL;
  uint64_t v60 = (void *)(a6 + v23[14]);
  *uint64_t v60 = 0LL;
  v60[1] = 0LL;
  uint64_t v61 = (uint64_t *)(a6 + v23[15]);
  *uint64_t v61 = 0LL;
  v61[1] = 0LL;
  uint64_t v25 = a6 + v23[16];
  sub_AA204(v25);
  uint64_t v26 = (void *)(a6 + v23[17]);
  *uint64_t v26 = 0LL;
  v26[1] = 0LL;
  uint64_t v27 = a6 + v23[18];
  uint64_t v52 = v27;
  uint64_t v28 = type metadata accessor for SnippetHeaderModel(0LL);
  sub_6D78(v27, v29, v30, v28);
  BOOL v31 = (a1 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v18 && v31) {
    uint64_t v32 = 0LL;
  }
  else {
    uint64_t v32 = a1;
  }
  char v33 = a2 | v31;
  uint64_t v34 = a6 + v23[5];
  *(void *)uint64_t v34 = v32;
  *(_BYTE *)(v34 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v33 & 1;
  sub_BED9C();
  sub_BED90();
  char v36 = a3 | v35;
  uint64_t v37 = a6 + v23[6];
  *(void *)uint64_t v37 = v38;
  *(_BYTE *)(v37 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v36 & 1;
  sub_BED9C();
  sub_BED90();
  uint64_t v40 = a6 + v23[7];
  *(void *)uint64_t v40 = v41;
  *(_BYTE *)(v40 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = (a4 | v39) & 1;
  sub_BED9C();
  sub_BED90();
  uint64_t v43 = a6 + v23[8];
  *(void *)uint64_t v43 = v44;
  *(_BYTE *)(v43 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = (a5 | v42) & 1;
  sub_BED9C();
  sub_BED90();
  uint64_t v46 = a6 + v23[9];
  *(void *)uint64_t v46 = v47;
  *(_BYTE *)(v46 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = (a8 | v45) & 1;
  sub_BED7C(a9, v25);
  sub_BED7C(a10, v54);
  sub_2521C(a11);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v57, 0LL, 1LL, v56);
  sub_24D88(v57, a6, &qword_18A1A0);
  swift_bridgeObjectRelease();
  *uint64_t v26 = a12;
  v26[1] = a13;
  sub_BED7C(a14, v52);
  sub_BED54(*(void *)v34, *(_BYTE *)(v34 + 8));
  sub_BED84();
  sub_BED74();
  *uint64_t v24 = v26;
  v24[1] = v34;
  sub_BED54(*(void *)v37, *(_BYTE *)(v37 + 8));
  sub_BED84();
  sub_BED74();
  *uint64_t v58 = v26;
  v58[1] = v34;
  sub_BBDFC(*(void *)v40, *(_BYTE *)(v40 + 8), v25, 0);
  sub_BED84();
  sub_BED74();
  *id v59 = v26;
  v59[1] = v34;
  sub_BED54(*(void *)v43, *(_BYTE *)(v43 + 8));
  sub_BED84();
  sub_BED74();
  *uint64_t v60 = v26;
  v60[1] = v34;
  uint64_t v48 = sub_BED54(*(void *)v46, *(_BYTE *)(v46 + 8));
  uint64_t v50 = v49;
  sub_279E0(a14, &qword_18A1A8);
  sub_279E0(a11, &qword_189CF8);
  sub_279E0(a10, &qword_189D00);
  sub_279E0(a9, &qword_189D00);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v61 = v48;
  v61[1] = v50;
  return result;
}

uint64_t TemperatureQueryModel.averageValue.getter()
{
  uint64_t v1 = sub_BED30();
  return sub_27A9C(v0 + *(int *)(v1 + 20));
}

uint64_t type metadata accessor for TemperatureQueryModel(uint64_t a1)
{
  uint64_t result = qword_18E640;
  if (!qword_18E640) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TemperatureQueryModel);
  }
  return result;
}

void TemperatureQueryModel.averageValue.setter()
{
  uint64_t v0 = sub_BED30();
  sub_27A40(*(int *)(v0 + 20));
  sub_1EB0C();
}

uint64_t (*TemperatureQueryModel.averageValue.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t TemperatureQueryModel.maxValue.getter()
{
  uint64_t v1 = sub_BED30();
  return sub_27A9C(v0 + *(int *)(v1 + 24));
}

void TemperatureQueryModel.maxValue.setter()
{
  uint64_t v0 = sub_BED30();
  sub_27A40(*(int *)(v0 + 24));
  sub_1EB0C();
}

uint64_t (*TemperatureQueryModel.maxValue.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t TemperatureQueryModel.minValue.getter()
{
  uint64_t v1 = sub_BED30();
  return sub_27A9C(v0 + *(int *)(v1 + 28));
}

void TemperatureQueryModel.minValue.setter()
{
  uint64_t v0 = sub_BED30();
  sub_27A40(*(int *)(v0 + 28));
  sub_1EB0C();
}

uint64_t (*TemperatureQueryModel.minValue.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t TemperatureQueryModel.mostRecentValue.getter()
{
  uint64_t v1 = sub_BED30();
  return sub_27A9C(v0 + *(int *)(v1 + 32));
}

void TemperatureQueryModel.mostRecentValue.setter()
{
  uint64_t v0 = sub_BED30();
  sub_27A40(*(int *)(v0 + 32));
  sub_1EB0C();
}

uint64_t (*TemperatureQueryModel.mostRecentValue.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t TemperatureQueryModel.basalTemperatureValue.getter()
{
  uint64_t v1 = sub_BED30();
  return sub_27A9C(v0 + *(int *)(v1 + 36));
}

void TemperatureQueryModel.basalTemperatureValue.setter()
{
  uint64_t v0 = sub_BED30();
  sub_27A40(*(int *)(v0 + 36));
  sub_1EB0C();
}

uint64_t (*TemperatureQueryModel.basalTemperatureValue.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void TemperatureQueryModel.dateLabel.getter()
{
  uint64_t v1 = sub_BED30();
  sub_5E258(v0 + *(int *)(v1 + 40), v2, &qword_189D00);
  sub_A890();
}

void TemperatureQueryModel.dateLabel.setter()
{
  uint64_t v1 = sub_BED30();
  sub_5E244(v1, v0 + *(int *)(v1 + 40), &qword_189D00);
  sub_A890();
}

uint64_t (*TemperatureQueryModel.dateLabel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void TemperatureQueryModel.averageValueString.getter()
{
  uint64_t v0 = sub_BED30();
  sub_27A30(*(int *)(v0 + 44));
  sub_1EB8C();
  sub_A890();
}

void TemperatureQueryModel.averageValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_BED30();
  sub_27AB4(*(int *)(v5 + 44));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*TemperatureQueryModel.averageValueString.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void TemperatureQueryModel.maxValueString.getter()
{
  uint64_t v0 = sub_BED30();
  sub_27A30(*(int *)(v0 + 48));
  sub_1EB8C();
  sub_A890();
}

void TemperatureQueryModel.maxValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_BED30();
  sub_27AB4(*(int *)(v5 + 48));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*TemperatureQueryModel.maxValueString.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void TemperatureQueryModel.minValueString.getter()
{
  uint64_t v0 = sub_BED30();
  sub_27A30(*(int *)(v0 + 52));
  sub_1EB8C();
  sub_A890();
}

void TemperatureQueryModel.minValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_BED30();
  sub_27AB4(*(int *)(v5 + 52));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*TemperatureQueryModel.minValueString.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void TemperatureQueryModel.mostRecentValueString.getter()
{
  uint64_t v0 = sub_BED30();
  sub_27A30(*(int *)(v0 + 56));
  sub_1EB8C();
  sub_A890();
}

void TemperatureQueryModel.mostRecentValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_BED30();
  sub_27AB4(*(int *)(v5 + 56));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*TemperatureQueryModel.mostRecentValueString.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void TemperatureQueryModel.basalTemperatureValueString.getter()
{
  uint64_t v0 = sub_BED30();
  sub_27A30(*(int *)(v0 + 60));
  sub_1EB8C();
  sub_A890();
}

void TemperatureQueryModel.basalTemperatureValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_BED30();
  sub_27AB4(*(int *)(v5 + 60));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*TemperatureQueryModel.basalTemperatureValueString.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void TemperatureQueryModel.unitString.getter()
{
  uint64_t v1 = sub_BED30();
  sub_5E258(v0 + *(int *)(v1 + 64), v2, &qword_189D00);
  sub_A890();
}

void TemperatureQueryModel.unitString.setter()
{
  uint64_t v1 = sub_BED30();
  sub_5E244(v1, v0 + *(int *)(v1 + 64), &qword_189D00);
  sub_A890();
}

uint64_t (*TemperatureQueryModel.unitString.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void TemperatureQueryModel.averageLabelString.getter()
{
  uint64_t v0 = sub_BED30();
  sub_27A30(*(int *)(v0 + 68));
  sub_1EB8C();
  sub_A890();
}

void TemperatureQueryModel.averageLabelString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_BED30();
  sub_27AB4(*(int *)(v5 + 68));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*TemperatureQueryModel.averageLabelString.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void TemperatureQueryModel.snippetHeaderModel.getter()
{
  uint64_t v1 = sub_BED30();
  sub_5E258(v0 + *(int *)(v1 + 72), v2, &qword_18A1A8);
  sub_A890();
}

void TemperatureQueryModel.snippetHeaderModel.setter()
{
  uint64_t v1 = sub_BED30();
  sub_5E244(v1, v0 + *(int *)(v1 + 72), &qword_18A1A8);
  sub_A890();
}

uint64_t (*TemperatureQueryModel.snippetHeaderModel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t sub_BBDFC(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v8 = sub_494C(&qword_189D00);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v24 - v12;
  if ((a2 & 1) == 0)
  {
    uint64_t v14 = type metadata accessor for DialogPreciseTemperature.Builder(0LL);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    DialogPreciseTemperature.Builder.init()();
    dispatch thunk of DialogConvertibleMeasurement.Builder.withValue(_:)(a1, 0LL);
    swift_release();
    dispatch thunk of DialogConvertibleMeasurement.Builder.withUnits(_:)(a3);
    uint64_t v15 = swift_release();
    dispatch thunk of DialogConvertibleMeasurement.Builder.build()(v15);
    uint64_t v16 = swift_release();
    if ((a4 & 1) != 0)
    {
      dispatch thunk of DialogPreciseTemperature.longSpokenTwoDigits.getter(v16);
      uint64_t v17 = type metadata accessor for SpeakableString(0LL);
      uint64_t v18 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v17);
      if ((_DWORD)v18 != 1)
      {
        uint64_t v22 = SpeakableString.print.getter(v18);
        swift_release();
        (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8LL))(v13, v17);
        return v22;
      }

      swift_release();
      uint64_t v19 = (uint64_t)v13;
    }

    else
    {
      dispatch thunk of DialogPreciseTemperature.mediumSpokenTwoDigits.getter(v16);
      uint64_t v20 = type metadata accessor for SpeakableString(0LL);
      uint64_t v21 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v11, 1LL, v20);
      if ((_DWORD)v21 != 1)
      {
        uint64_t v22 = SpeakableString.print.getter(v21);
        swift_release();
        (*(void (**)(char *, uint64_t))(*(void *)(v20 - 8) + 8LL))(v11, v20);
        return v22;
      }

      swift_release();
      uint64_t v19 = (uint64_t)v11;
    }

    sub_279E0(v19, &qword_189D00);
  }

  return 0LL;
}

uint64_t sub_BBFF0(uint64_t a1, unint64_t a2)
{
  BOOL v3 = a1 == 0x68636E7550707061LL && a2 == 0xEB0000000074756FLL;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x68636E7550707061LL, 0xEB0000000074756FLL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  BOOL v6 = a1 == 0x5665676172657661LL && a2 == 0xEC00000065756C61LL;
  if (v6
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x5665676172657661LL, 0xEC00000065756C61LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  BOOL v7 = a1 == 0x65756C615678616DLL && a2 == 0xE800000000000000LL;
  if (v7
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x65756C615678616DLL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 2LL;
  }

  BOOL v8 = a1 == 0x65756C61566E696DLL && a2 == 0xE800000000000000LL;
  if (v8
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x65756C61566E696DLL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 3LL;
  }

  BOOL v9 = a1 == 0x6563655274736F6DLL && a2 == 0xEF65756C6156746ELL;
  if (v9
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6563655274736F6DLL, 0xEF65756C6156746ELL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 4LL;
  }

  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v10 = 0x8000000000146090LL;
    if (a2 == 0x8000000000146090LL) {
      goto LABEL_35;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x8000000000146090LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_35:
    swift_bridgeObjectRelease(v10);
    return 5LL;
  }

  BOOL v11 = a1 == 0x6562614C65746164LL && a2 == 0xE90000000000006CLL;
  if (v11
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6562614C65746164LL, 0xE90000000000006CLL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 6LL;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v12 = 0x80000000001448F0LL;
    if (a2 == 0x80000000001448F0LL) {
      goto LABEL_46;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x80000000001448F0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
LABEL_46:
    swift_bridgeObjectRelease(v12);
    return 7LL;
  }

  BOOL v13 = a1 == 0x65756C615678616DLL && a2 == 0xEE00676E69727453LL;
  if (v13
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x65756C615678616DLL, 0xEE00676E69727453LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 8LL;
  }

  BOOL v14 = a1 == 0x65756C61566E696DLL && a2 == 0xEE00676E69727453LL;
  if (v14
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x65756C61566E696DLL, 0xEE00676E69727453LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 9LL;
  }

  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v15 = 0x80000000001460B0LL;
    if (a2 == 0x80000000001460B0LL) {
      goto LABEL_63;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x80000000001460B0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
LABEL_63:
    swift_bridgeObjectRelease(v15);
    return 10LL;
  }

  if (a1 == 0xD00000000000001BLL && a2 == 0x80000000001460D0LL)
  {
    unint64_t v16 = 0x80000000001460D0LL;
LABEL_69:
    swift_bridgeObjectRelease(v16);
    return 11LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x80000000001460D0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v16 = a2;
    goto LABEL_69;
  }

  BOOL v17 = a1 == 0x6972745374696E75LL && a2 == 0xEA0000000000676ELL;
  if (v17
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6972745374696E75LL, 0xEA0000000000676ELL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 12LL;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v18 = 0x80000000001460F0LL;
    if (a2 == 0x80000000001460F0LL) {
      goto LABEL_80;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x80000000001460F0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v18 = a2;
LABEL_80:
    swift_bridgeObjectRelease(v18);
    return 13LL;
  }

  if (a1 == 0xD000000000000012LL && a2 == 0x8000000000141630LL)
  {
    swift_bridgeObjectRelease(0x8000000000141630LL);
    return 14LL;
  }

  else
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000000141630LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v19 & 1) != 0) {
      return 14LL;
    }
    else {
      return 15LL;
    }
  }

uint64_t sub_BC598()
{
  return 15LL;
}

uint64_t sub_BC5A0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_BC5DC + 4 * byte_13CFF0[a1]))( 0xD000000000000015LL,  0x8000000000146090LL);
}

uint64_t sub_BC5DC()
{
  return 0x68636E7550707061LL;
}

uint64_t sub_BC5FC()
{
  return 0x5665676172657661LL;
}

uint64_t sub_BC61C()
{
  return 0x65756C615678616DLL;
}

uint64_t sub_BC644()
{
  return 0x6563655274736F6DLL;
}

uint64_t sub_BC668()
{
  return 0x6562614C65746164LL;
}

unint64_t sub_BC684()
{
  return 0xD000000000000012LL;
}

uint64_t sub_BC72C()
{
  return sub_BC5A0(*v0);
}

uint64_t sub_BC734@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_BBFF0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_BC758@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_BC598();
  *a1 = result;
  return result;
}

uint64_t sub_BC77C(uint64_t a1)
{
  unint64_t v2 = sub_BCB34();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_BC7A4(uint64_t a1)
{
  unint64_t v2 = sub_BCB34();
  return CodingKey.debugDescription.getter(a1, v2);
}

void TemperatureQueryModel.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_494C(&qword_18E5D0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  BOOL v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_500C(a1, v9);
  unint64_t v11 = sub_BCB34();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for TemperatureQueryModel.CodingKeys,  &type metadata for TemperatureQueryModel.CodingKeys,  v11,  v9,  v10);
  char v56 = 0;
  uint64_t v12 = type metadata accessor for AppPunchout(0LL);
  sub_A410( &qword_18AA98,  (uint64_t (*)(uint64_t))&type metadata accessor for AppPunchout,  (uint64_t)&protocol conformance descriptor for AppPunchout);
  sub_5E21C(v3, (uint64_t)&v56, v5, v12);
  if (!v2)
  {
    uint64_t Model = (int *)type metadata accessor for TemperatureQueryModel(0LL);
    uint64_t v14 = sub_27A9C(v3 + Model[5]);
    char v55 = 1;
    sub_27A20(v14, v15, (uint64_t)&v55);
    uint64_t v16 = sub_27A9C(v3 + Model[6]);
    char v54 = 2;
    sub_27A20(v16, v17, (uint64_t)&v54);
    uint64_t v18 = sub_27A9C(v3 + Model[7]);
    char v53 = 3;
    sub_27A20(v18, v19, (uint64_t)&v53);
    uint64_t v20 = sub_27A9C(v3 + Model[8]);
    char v52 = 4;
    sub_27A20(v20, v21, (uint64_t)&v52);
    uint64_t v22 = sub_27A9C(v3 + Model[9]);
    char v51 = 5;
    sub_27A20(v22, v23, (uint64_t)&v51);
    uint64_t v24 = v3 + Model[10];
    char v50 = 6;
    uint64_t v25 = type metadata accessor for SpeakableString(0LL);
    sub_A410( &qword_18AAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString,  (uint64_t)&protocol conformance descriptor for SpeakableString);
    sub_5E21C(v24, (uint64_t)&v50, v5, v25);
    uint64_t v26 = sub_5E260(Model[11]);
    char v49 = 7;
    sub_27A10(v26, v27, (uint64_t)&v49);
    uint64_t v28 = sub_5E260(Model[12]);
    char v48 = 8;
    sub_27A10(v28, v29, (uint64_t)&v48);
    uint64_t v30 = sub_5E260(Model[13]);
    char v47 = 9;
    sub_27A10(v30, v31, (uint64_t)&v47);
    uint64_t v32 = sub_5E260(Model[14]);
    char v46 = 10;
    sub_27A10(v32, v33, (uint64_t)&v46);
    uint64_t v34 = sub_5E260(Model[15]);
    char v45 = 11;
    sub_27A10(v34, v35, (uint64_t)&v45);
    uint64_t v36 = v3 + Model[16];
    char v44 = 12;
    sub_5E21C(v36, (uint64_t)&v44, v5, v25);
    uint64_t v37 = sub_5E260(Model[17]);
    char v43 = 13;
    sub_27A10(v37, v38, (uint64_t)&v43);
    uint64_t v39 = v3 + Model[18];
    char v42 = 14;
    uint64_t v40 = type metadata accessor for SnippetHeaderModel(0LL);
    sub_A410( &qword_18AAA8,  type metadata accessor for SnippetHeaderModel,  (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    sub_5E21C(v39, (uint64_t)&v42, v5, v40);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_1C6D8();
}

unint64_t sub_BCB34()
{
  unint64_t result = qword_18E5D8;
  if (!qword_18E5D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_13D1BC, &type metadata for TemperatureQueryModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18E5D8);
  }

  return result;
}

void TemperatureQueryModel.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v85 = a2;
  sub_494C(&qword_18A1A8);
  sub_6D20();
  __chkstk_darwin(v3);
  sub_6D30();
  uint64_t v86 = v4;
  sub_494C(&qword_189D00);
  sub_6D20();
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v100 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v92 = (uint64_t)&v81 - v8;
  sub_494C(&qword_18A1A0);
  sub_6D20();
  __chkstk_darwin(v9);
  sub_6D30();
  uint64_t v101 = v10;
  uint64_t v102 = sub_494C(&qword_18E5E0);
  uint64_t v99 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  sub_6D30();
  uint64_t v106 = v11;
  uint64_t Model = (int *)type metadata accessor for TemperatureQueryModel(0LL);
  sub_6D20();
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for AppPunchout(0LL);
  sub_41C80();
  uint64_t v98 = v16;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v17, v18, v19, v16);
  sub_BED68(Model[5]);
  uint64_t v96 = v20;
  *(_BYTE *)(v20 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 1;
  sub_BED68(Model[6]);
  uint64_t v95 = v21;
  *(_BYTE *)(v21 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 1;
  sub_BED68(Model[7]);
  uint64_t v94 = v22;
  *(_BYTE *)(v22 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 1;
  sub_BED68(Model[8]);
  uint64_t v93 = v23;
  *(_BYTE *)(v23 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 1;
  sub_BED68(Model[9]);
  uint64_t v91 = v24;
  *(_BYTE *)(v24 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = 1;
  uint64_t v25 = (uint64_t)&v15[Model[10]];
  uint64_t v26 = type metadata accessor for SpeakableString(0LL);
  uint64_t v90 = v25;
  sub_41C80();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v27, v28, v29, v26);
  uint64_t v30 = &v15[Model[11]];
  *(void *)uint64_t v30 = 0LL;
  *((void *)v30 + 1) = 0LL;
  uint64_t v89 = v30;
  uint64_t v31 = &v15[Model[12]];
  *(void *)uint64_t v31 = 0LL;
  *((void *)v31 + 1) = 0LL;
  uint64_t v88 = v31;
  uint64_t v32 = &v15[Model[13]];
  *(void *)uint64_t v32 = 0LL;
  *((void *)v32 + 1) = 0LL;
  uint64_t v33 = &v15[Model[14]];
  *(void *)uint64_t v33 = 0LL;
  *((void *)v33 + 1) = 0LL;
  uint64_t v34 = &v15[Model[15]];
  *(void *)uint64_t v34 = 0LL;
  *((void *)v34 + 1) = 0LL;
  uint64_t v87 = &v15[Model[16]];
  sub_41C80();
  uint64_t v97 = v26;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v35, v36, v37, v26);
  uint64_t v38 = &v15[Model[17]];
  *(void *)uint64_t v38 = 0LL;
  *((void *)v38 + 1) = 0LL;
  uint64_t v39 = Model[18];
  uint64_t v105 = v15;
  uint64_t v40 = (uint64_t)&v15[v39];
  uint64_t v41 = type metadata accessor for SnippetHeaderModel(0LL);
  sub_41C80();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v42, v43, v44, v41);
  char v45 = a1;
  uint64_t v46 = a1[3];
  uint64_t v47 = a1[4];
  uint64_t v104 = v45;
  char v48 = sub_500C(v45, v46);
  unint64_t v49 = sub_BCB34();
  char v50 = v103;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for TemperatureQueryModel.CodingKeys,  &type metadata for TemperatureQueryModel.CodingKeys,  v49,  v46,  v47);
  if (v50)
  {
    uint64_t v80 = (uint64_t)v105;
  }

  else
  {
    uint64_t v103 = v32;
    uint64_t v84 = v33;
    uint64_t v83 = v34;
    uint64_t v51 = v97;
    uint64_t v82 = v38;
    uint64_t v81 = v40;
    uint64_t v52 = v99;
    uint64_t v53 = (uint64_t)v100;
    char v121 = 0;
    sub_A410( &qword_18AAB8,  (uint64_t (*)(uint64_t))&type metadata accessor for AppPunchout,  (uint64_t)&protocol conformance descriptor for AppPunchout);
    uint64_t v55 = v101;
    uint64_t v54 = v102;
    sub_5E238(v98, (uint64_t)&v121, v102, v98);
    sub_24D88(v55, (uint64_t)v105, &qword_18A1A0);
    char v120 = 1;
    uint64_t v56 = sub_BED38((uint64_t)&v120);
    sub_BED44(v56, v57);
    char v119 = 2;
    uint64_t v58 = sub_BED38((uint64_t)&v119);
    sub_BED44(v58, v59);
    char v118 = 3;
    uint64_t v60 = sub_BED38((uint64_t)&v118);
    sub_BED44(v60, v61);
    char v117 = 4;
    uint64_t v62 = sub_BED38((uint64_t)&v117);
    sub_BED44(v62, v63);
    char v116 = 5;
    uint64_t v64 = sub_BED38((uint64_t)&v116);
    sub_BED44(v64, v65);
    char v115 = 6;
    sub_A410( &qword_18AAC0,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString,  (uint64_t)&protocol conformance descriptor for SpeakableString);
    uint64_t v101 = v66;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v51, &v115, v54, v51);
    sub_24D88(v92, v90, &qword_189D00);
    char v114 = 7;
    uint64_t v67 = sub_BED60((uint64_t)&v114, v54);
    uint64_t v68 = v89;
    uint64_t v98 = v67;
    uint64_t v69 = *((void *)v89 + 1);
    uint64_t v96 = v70;
    swift_bridgeObjectRelease(v69);
    uint64_t v71 = v96;
    *(void *)uint64_t v68 = v98;
    *((void *)v68 + 1) = v71;
    v113[0] = 8;
    uint64_t v98 = sub_BED60((uint64_t)v113, v102);
    uint64_t v73 = v72;
    uint64_t v74 = v88;
    sub_8DEA8();
    *(void *)uint64_t v74 = v98;
    *((void *)v74 + 1) = v73;
    char v112 = 9;
    sub_BED60((uint64_t)&v112, v102);
    sub_992AC();
    uint64_t v75 = v103;
    sub_8DEA8();
    *(void *)uint64_t v75 = v48;
    *((void *)v75 + 1) = v73;
    char v111 = 10;
    sub_5E20C((uint64_t)&v111);
    sub_992AC();
    uint64_t v76 = v84;
    sub_8DEA8();
    *(void *)uint64_t v76 = v48;
    *((void *)v76 + 1) = v73;
    char v110 = 11;
    sub_5E20C((uint64_t)&v110);
    sub_992AC();
    uint64_t v77 = v83;
    sub_8DEA8();
    *(void *)uint64_t v77 = v48;
    *((void *)v77 + 1) = v73;
    char v109 = 12;
    sub_5E238(v51, (uint64_t)&v109, v102, v51);
    sub_24D88(v53, (uint64_t)v87, &qword_189D00);
    char v108 = 13;
    sub_5E20C((uint64_t)&v108);
    sub_992AC();
    id v78 = v82;
    swift_bridgeObjectRelease(*((void *)v82 + 1));
    *(void *)id v78 = v48;
    *((void *)v78 + 1) = v73;
    char v107 = 14;
    sub_A410( &qword_18AAC8,  type metadata accessor for SnippetHeaderModel,  (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    uint64_t v79 = v102;
    sub_5E238(v41, (uint64_t)&v107, v102, v41);
    (*(void (**)(void *, uint64_t))(v52 + 8))(v48, v79);
    uint64_t v80 = (uint64_t)v105;
    sub_24D88(v86, v81, &qword_18A1A8);
    sub_BD228(v80, v85);
  }

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v104);
  sub_26F04(v80, type metadata accessor for TemperatureQueryModel);
  sub_1C6D8();
}

uint64_t sub_BD228(uint64_t a1, uint64_t a2)
{
  uint64_t Model = type metadata accessor for TemperatureQueryModel(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Model - 8) + 16LL))(a2, a1, Model);
  return a2;
}

void sub_BD26C()
{
}

void sub_BD298()
{
}

void sub_BD2C4(void *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_BD2D8(void *a1)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for TemperatureQueryModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for AppPunchout(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_494C(&qword_18A1A0);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[5];
    uint64_t v11 = a3[6];
    uint64_t v12 = (char *)a1 + v10;
    uint64_t v13 = (char *)a2 + v10;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = (char *)a1 + v11;
    uint64_t v15 = (char *)a2 + v11;
    *(void *)uint64_t v14 = *(void *)v15;
    v14[8] = v15[8];
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = (char *)a1 + v16;
    uint64_t v19 = (char *)a2 + v16;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = (char *)a1 + v17;
    uint64_t v21 = (char *)a2 + v17;
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    uint64_t v22 = a3[9];
    uint64_t v23 = a3[10];
    uint64_t v24 = (char *)a1 + v22;
    uint64_t v25 = (char *)a2 + v22;
    v24[8] = v25[8];
    *(void *)uint64_t v24 = *(void *)v25;
    uint64_t v26 = (char *)a1 + v23;
    uint64_t v27 = (char *)a2 + v23;
    uint64_t v28 = type metadata accessor for SpeakableString(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1LL, v28))
    {
      uint64_t v29 = sub_494C(&qword_189D00);
      memcpy(v26, v27, *(void *)(*(void *)(v29 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16LL))(v26, v27, v28);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v26, 0LL, 1LL, v28);
    }

    uint64_t v30 = a3[11];
    uint64_t v31 = a3[12];
    uint64_t v32 = (uint64_t *)((char *)a1 + v30);
    uint64_t v33 = (uint64_t *)((char *)a2 + v30);
    uint64_t v34 = v33[1];
    *uint64_t v32 = *v33;
    v32[1] = v34;
    uint64_t v35 = (uint64_t *)((char *)a1 + v31);
    uint64_t v36 = (uint64_t *)((char *)a2 + v31);
    uint64_t v37 = v36[1];
    *uint64_t v35 = *v36;
    v35[1] = v37;
    uint64_t v38 = a3[13];
    uint64_t v39 = a3[14];
    uint64_t v40 = (uint64_t *)((char *)a1 + v38);
    uint64_t v41 = (uint64_t *)((char *)a2 + v38);
    uint64_t v42 = v41[1];
    void *v40 = *v41;
    v40[1] = v42;
    uint64_t v43 = (uint64_t *)((char *)a1 + v39);
    uint64_t v44 = (uint64_t *)((char *)a2 + v39);
    uint64_t v45 = v44[1];
    *uint64_t v43 = *v44;
    v43[1] = v45;
    uint64_t v46 = a3[15];
    uint64_t v47 = a3[16];
    char v48 = (uint64_t *)((char *)a1 + v46);
    unint64_t v49 = (uint64_t *)((char *)a2 + v46);
    uint64_t v50 = v49[1];
    *char v48 = *v49;
    v48[1] = v50;
    uint64_t v51 = (char *)a1 + v47;
    uint64_t v52 = (char *)a2 + v47;
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v50);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v52, 1LL, v28))
    {
      uint64_t v53 = sub_494C(&qword_189D00);
      memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16LL))(v51, v52, v28);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v51, 0LL, 1LL, v28);
    }

    uint64_t v54 = a3[17];
    uint64_t v55 = a3[18];
    uint64_t v56 = (uint64_t *)((char *)a1 + v54);
    char v57 = (uint64_t *)((char *)a2 + v54);
    uint64_t v58 = v57[1];
    *uint64_t v56 = *v57;
    v56[1] = v58;
    char v59 = (char *)a1 + v55;
    uint64_t v60 = (char *)a2 + v55;
    uint64_t v61 = type metadata accessor for SnippetHeaderModel(0LL);
    swift_bridgeObjectRetain(v58);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v60, 1LL, v61))
    {
      uint64_t v62 = sub_494C(&qword_18A1A8);
      memcpy(v59, v60, *(void *)(*(void *)(v62 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16LL))(v59, v60, v28);
      uint64_t v63 = *(int *)(v61 + 20);
      uint64_t v64 = &v59[v63];
      char v65 = &v60[v63];
      uint64_t v66 = *((void *)v65 + 1);
      *(void *)uint64_t v64 = *(void *)v65;
      *((void *)v64 + 1) = v66;
      uint64_t v67 = *(int *)(v61 + 24);
      uint64_t v68 = &v59[v67];
      uint64_t v69 = &v60[v67];
      uint64_t v70 = *((void *)v69 + 1);
      *(void *)uint64_t v68 = *(void *)v69;
      *((void *)v68 + 1) = v70;
      swift_bridgeObjectRetain(v66);
      swift_bridgeObjectRetain(v70);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v59, 0LL, 1LL, v61);
    }
  }

  return a1;
}

uint64_t destroy for TemperatureQueryModel(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for AppPunchout(0LL);
  uint64_t v5 = a1 + a2[10];
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[11] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[12] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[13] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[14] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[15] + 8));
  uint64_t v7 = a1 + a2[16];
  swift_bridgeObjectRelease(*(void *)(a1 + a2[17] + 8));
  uint64_t v8 = a1 + a2[18];
  uint64_t v9 = type metadata accessor for SnippetHeaderModel(0LL);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v8, 1LL, v9);
  if (!(_DWORD)result)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v8, v6);
    swift_bridgeObjectRelease(*(void *)(v8 + *(int *)(v9 + 20) + 8));
    return swift_bridgeObjectRelease(*(void *)(v8 + *(int *)(v9 + 24) + 8));
  }

  return result;
}

char *initializeWithCopy for TemperatureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_18A1A0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = &a1[v9];
  uint64_t v13 = &a2[v9];
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = &a1[v15];
  uint64_t v19 = &a2[v15];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = a3[10];
  uint64_t v22 = &a1[v20];
  uint64_t v23 = &a2[v20];
  v22[8] = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v24 = &a1[v21];
  uint64_t v25 = &a2[v21];
  uint64_t v26 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v25, 1LL, v26))
  {
    uint64_t v27 = sub_494C(&qword_189D00);
    memcpy(v24, v25, *(void *)(*(void *)(v27 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16LL))(v24, v25, v26);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v24, 0LL, 1LL, v26);
  }

  uint64_t v28 = a3[11];
  uint64_t v29 = a3[12];
  uint64_t v30 = &a1[v28];
  uint64_t v31 = &a2[v28];
  uint64_t v32 = *((void *)v31 + 1);
  *(void *)uint64_t v30 = *(void *)v31;
  *((void *)v30 + 1) = v32;
  uint64_t v33 = &a1[v29];
  uint64_t v34 = &a2[v29];
  uint64_t v35 = *((void *)v34 + 1);
  *(void *)uint64_t v33 = *(void *)v34;
  *((void *)v33 + 1) = v35;
  uint64_t v36 = a3[13];
  uint64_t v37 = a3[14];
  uint64_t v38 = &a1[v36];
  uint64_t v39 = &a2[v36];
  uint64_t v40 = *((void *)v39 + 1);
  *(void *)uint64_t v38 = *(void *)v39;
  *((void *)v38 + 1) = v40;
  uint64_t v41 = &a1[v37];
  uint64_t v42 = &a2[v37];
  uint64_t v43 = *((void *)v42 + 1);
  *(void *)uint64_t v41 = *(void *)v42;
  *((void *)v41 + 1) = v43;
  uint64_t v44 = a3[15];
  uint64_t v45 = a3[16];
  uint64_t v46 = &a1[v44];
  uint64_t v47 = &a2[v44];
  uint64_t v48 = *((void *)v47 + 1);
  *(void *)uint64_t v46 = *(void *)v47;
  *((void *)v46 + 1) = v48;
  unint64_t v49 = &a1[v45];
  uint64_t v50 = &a2[v45];
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRetain(v48);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v50, 1LL, v26))
  {
    uint64_t v51 = sub_494C(&qword_189D00);
    memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16LL))(v49, v50, v26);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v49, 0LL, 1LL, v26);
  }

  uint64_t v52 = a3[17];
  uint64_t v53 = a3[18];
  uint64_t v54 = &a1[v52];
  uint64_t v55 = &a2[v52];
  uint64_t v56 = *((void *)v55 + 1);
  *(void *)uint64_t v54 = *(void *)v55;
  *((void *)v54 + 1) = v56;
  char v57 = &a1[v53];
  uint64_t v58 = &a2[v53];
  uint64_t v59 = type metadata accessor for SnippetHeaderModel(0LL);
  swift_bridgeObjectRetain(v56);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v58, 1LL, v59))
  {
    uint64_t v60 = sub_494C(&qword_18A1A8);
    memcpy(v57, v58, *(void *)(*(void *)(v60 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16LL))(v57, v58, v26);
    uint64_t v61 = *(int *)(v59 + 20);
    uint64_t v62 = &v57[v61];
    uint64_t v63 = &v58[v61];
    uint64_t v64 = *((void *)v63 + 1);
    *(void *)uint64_t v62 = *(void *)v63;
    *((void *)v62 + 1) = v64;
    uint64_t v65 = *(int *)(v59 + 24);
    uint64_t v66 = &v57[v65];
    uint64_t v67 = &v58[v65];
    uint64_t v68 = *((void *)v67 + 1);
    *(void *)uint64_t v66 = *(void *)v67;
    *((void *)v66 + 1) = v68;
    swift_bridgeObjectRetain(v64);
    swift_bridgeObjectRetain(v68);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v57, 0LL, 1LL, v59);
  }

  return a1;
}

char *assignWithCopy for TemperatureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_18A1A0);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = *(void *)v13;
  v12[8] = v13[8];
  *(void *)uint64_t v12 = v14;
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)uint64_t v16 = v18;
  uint64_t v19 = a3[7];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = *(void *)v21;
  v20[8] = v21[8];
  *(void *)uint64_t v20 = v22;
  uint64_t v23 = a3[8];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = *(void *)v25;
  v24[8] = v25[8];
  *(void *)uint64_t v24 = v26;
  uint64_t v27 = a3[9];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v30 = *(void *)v29;
  v28[8] = v29[8];
  *(void *)uint64_t v28 = v30;
  uint64_t v31 = a3[10];
  uint64_t v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  uint64_t v34 = type metadata accessor for SpeakableString(0LL);
  int v35 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v32, 1LL, v34);
  int v36 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v33, 1LL, v34);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16LL))(v32, v33, v34);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v32, 0LL, 1LL, v34);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v37 = *(void *)(v34 - 8);
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v32, v34);
LABEL_12:
    uint64_t v38 = sub_494C(&qword_189D00);
    memcpy(v32, v33, *(void *)(*(void *)(v38 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v37 + 24))(v32, v33, v34);
LABEL_13:
  uint64_t v39 = a3[11];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  *(void *)uint64_t v40 = *(void *)v41;
  uint64_t v42 = *((void *)v41 + 1);
  uint64_t v43 = *((void *)v40 + 1);
  *((void *)v40 + 1) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  uint64_t v44 = a3[12];
  uint64_t v45 = &a1[v44];
  uint64_t v46 = &a2[v44];
  *(void *)uint64_t v45 = *(void *)v46;
  uint64_t v47 = *((void *)v46 + 1);
  uint64_t v48 = *((void *)v45 + 1);
  *((void *)v45 + 1) = v47;
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRelease(v48);
  uint64_t v49 = a3[13];
  uint64_t v50 = &a1[v49];
  uint64_t v51 = &a2[v49];
  *(void *)uint64_t v50 = *(void *)v51;
  uint64_t v52 = *((void *)v51 + 1);
  uint64_t v53 = *((void *)v50 + 1);
  *((void *)v50 + 1) = v52;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRelease(v53);
  uint64_t v54 = a3[14];
  uint64_t v55 = &a1[v54];
  uint64_t v56 = &a2[v54];
  *(void *)uint64_t v55 = *(void *)v56;
  uint64_t v57 = *((void *)v56 + 1);
  uint64_t v58 = *((void *)v55 + 1);
  *((void *)v55 + 1) = v57;
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRelease(v58);
  uint64_t v59 = a3[15];
  uint64_t v60 = &a1[v59];
  uint64_t v61 = &a2[v59];
  *(void *)uint64_t v60 = *(void *)v61;
  uint64_t v62 = *((void *)v61 + 1);
  uint64_t v63 = *((void *)v60 + 1);
  *((void *)v60 + 1) = v62;
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRelease(v63);
  uint64_t v64 = a3[16];
  uint64_t v65 = &a1[v64];
  uint64_t v66 = &a2[v64];
  int v67 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v64], 1LL, v34);
  int v68 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v66, 1LL, v34);
  if (v67)
  {
    if (!v68)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16LL))(v65, v66, v34);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v65, 0LL, 1LL, v34);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  uint64_t v69 = *(void *)(v34 - 8);
  if (v68)
  {
    (*(void (**)(char *, uint64_t))(v69 + 8))(v65, v34);
LABEL_18:
    uint64_t v70 = sub_494C(&qword_189D00);
    memcpy(v65, v66, *(void *)(*(void *)(v70 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v69 + 24))(v65, v66, v34);
LABEL_19:
  uint64_t v71 = a3[17];
  uint64_t v72 = &a1[v71];
  uint64_t v73 = &a2[v71];
  *(void *)uint64_t v72 = *(void *)v73;
  uint64_t v74 = *((void *)v73 + 1);
  uint64_t v75 = *((void *)v72 + 1);
  *((void *)v72 + 1) = v74;
  swift_bridgeObjectRetain(v74);
  swift_bridgeObjectRelease(v75);
  uint64_t v76 = a3[18];
  uint64_t v77 = &a1[v76];
  id v78 = &a2[v76];
  uint64_t v79 = type metadata accessor for SnippetHeaderModel(0LL);
  int v80 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v77, 1LL, v79);
  int v81 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v78, 1LL, v79);
  if (!v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 24LL))(v77, v78, v34);
      uint64_t v92 = *(int *)(v79 + 20);
      uint64_t v93 = &v77[v92];
      uint64_t v94 = &v78[v92];
      *(void *)uint64_t v93 = *(void *)v94;
      uint64_t v95 = *((void *)v94 + 1);
      uint64_t v96 = *((void *)v93 + 1);
      *((void *)v93 + 1) = v95;
      swift_bridgeObjectRetain(v95);
      swift_bridgeObjectRelease(v96);
      uint64_t v97 = *(int *)(v79 + 24);
      uint64_t v98 = &v77[v97];
      uint64_t v99 = &v78[v97];
      *(void *)uint64_t v98 = *(void *)v99;
      uint64_t v100 = *((void *)v99 + 1);
      uint64_t v101 = *((void *)v98 + 1);
      *((void *)v98 + 1) = v100;
      swift_bridgeObjectRetain(v100);
      swift_bridgeObjectRelease(v101);
      return a1;
    }

    sub_26F04((uint64_t)v77, type metadata accessor for SnippetHeaderModel);
    goto LABEL_24;
  }

  if (v81)
  {
LABEL_24:
    uint64_t v90 = sub_494C(&qword_18A1A8);
    memcpy(v77, v78, *(void *)(*(void *)(v90 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16LL))(v77, v78, v34);
  uint64_t v82 = *(int *)(v79 + 20);
  uint64_t v83 = &v77[v82];
  uint64_t v84 = &v78[v82];
  *(void *)uint64_t v83 = *(void *)v84;
  uint64_t v85 = *((void *)v84 + 1);
  *((void *)v83 + 1) = v85;
  uint64_t v86 = *(int *)(v79 + 24);
  uint64_t v87 = &v77[v86];
  uint64_t v88 = &v78[v86];
  *(void *)uint64_t v87 = *(void *)v88;
  uint64_t v89 = *((void *)v88 + 1);
  *((void *)v87 + 1) = v89;
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRetain(v89);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v77, 0LL, 1LL, v79);
  return a1;
}

char *initializeWithTake for TemperatureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_18A1A0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = &a1[v9];
  uint64_t v13 = &a2[v9];
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = &a1[v15];
  uint64_t v19 = &a2[v15];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = a3[10];
  uint64_t v22 = &a1[v20];
  uint64_t v23 = &a2[v20];
  v22[8] = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v24 = &a1[v21];
  uint64_t v25 = &a2[v21];
  uint64_t v26 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v25, 1LL, v26))
  {
    uint64_t v27 = sub_494C(&qword_189D00);
    memcpy(v24, v25, *(void *)(*(void *)(v27 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32LL))(v24, v25, v26);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v24, 0LL, 1LL, v26);
  }

  uint64_t v28 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  *(_OWORD *)&a1[v28] = *(_OWORD *)&a2[v28];
  uint64_t v29 = a3[14];
  *(_OWORD *)&a1[a3[13]] = *(_OWORD *)&a2[a3[13]];
  *(_OWORD *)&a1[v29] = *(_OWORD *)&a2[v29];
  uint64_t v30 = a3[16];
  *(_OWORD *)&a1[a3[15]] = *(_OWORD *)&a2[a3[15]];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v30], 1LL, v26))
  {
    uint64_t v33 = sub_494C(&qword_189D00);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32LL))(v31, v32, v26);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v31, 0LL, 1LL, v26);
  }

  uint64_t v34 = a3[18];
  *(_OWORD *)&a1[a3[17]] = *(_OWORD *)&a2[a3[17]];
  int v35 = &a1[v34];
  int v36 = &a2[v34];
  uint64_t v37 = type metadata accessor for SnippetHeaderModel(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v36, 1LL, v37))
  {
    uint64_t v38 = sub_494C(&qword_18A1A8);
    memcpy(v35, v36, *(void *)(*(void *)(v38 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32LL))(v35, v36, v26);
    *(_OWORD *)&v35[*(int *)(v37 + 20)] = *(_OWORD *)&v36[*(int *)(v37 + 20)];
    *(_OWORD *)&v35[*(int *)(v37 + 24)] = *(_OWORD *)&v36[*(int *)(v37 + 24)];
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v35, 0LL, 1LL, v37);
  }

  return a1;
}

char *assignWithTake for TemperatureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_18A1A0);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v11];
  uint64_t v14 = &a2[v11];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = &a1[v12];
  uint64_t v16 = &a2[v12];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = a3[7];
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v17];
  uint64_t v20 = &a2[v17];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = &a1[v18];
  uint64_t v22 = &a2[v18];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  uint64_t v23 = a3[9];
  uint64_t v24 = a3[10];
  uint64_t v25 = &a1[v23];
  uint64_t v26 = &a2[v23];
  v25[8] = v26[8];
  *(void *)uint64_t v25 = *(void *)v26;
  uint64_t v27 = &a1[v24];
  uint64_t v28 = &a2[v24];
  uint64_t v29 = type metadata accessor for SpeakableString(0LL);
  int v30 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1LL, v29);
  int v31 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v28, 1LL, v29);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32LL))(v27, v28, v29);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v27, 0LL, 1LL, v29);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v32 = *(void *)(v29 - 8);
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v27, v29);
LABEL_12:
    uint64_t v33 = sub_494C(&qword_189D00);
    memcpy(v27, v28, *(void *)(*(void *)(v33 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v32 + 40))(v27, v28, v29);
LABEL_13:
  uint64_t v34 = a3[11];
  int v35 = &a1[v34];
  int v36 = &a2[v34];
  uint64_t v38 = *(void *)v36;
  uint64_t v37 = *((void *)v36 + 1);
  uint64_t v39 = *((void *)v35 + 1);
  *(void *)int v35 = v38;
  *((void *)v35 + 1) = v37;
  swift_bridgeObjectRelease(v39);
  uint64_t v40 = a3[12];
  uint64_t v41 = &a1[v40];
  uint64_t v42 = &a2[v40];
  uint64_t v44 = *(void *)v42;
  uint64_t v43 = *((void *)v42 + 1);
  uint64_t v45 = *((void *)v41 + 1);
  *(void *)uint64_t v41 = v44;
  *((void *)v41 + 1) = v43;
  swift_bridgeObjectRelease(v45);
  uint64_t v46 = a3[13];
  uint64_t v47 = &a1[v46];
  uint64_t v48 = &a2[v46];
  uint64_t v50 = *(void *)v48;
  uint64_t v49 = *((void *)v48 + 1);
  uint64_t v51 = *((void *)v47 + 1);
  *(void *)uint64_t v47 = v50;
  *((void *)v47 + 1) = v49;
  swift_bridgeObjectRelease(v51);
  uint64_t v52 = a3[14];
  uint64_t v53 = &a1[v52];
  uint64_t v54 = &a2[v52];
  uint64_t v56 = *(void *)v54;
  uint64_t v55 = *((void *)v54 + 1);
  uint64_t v57 = *((void *)v53 + 1);
  *(void *)uint64_t v53 = v56;
  *((void *)v53 + 1) = v55;
  swift_bridgeObjectRelease(v57);
  uint64_t v58 = a3[15];
  uint64_t v59 = &a1[v58];
  uint64_t v60 = &a2[v58];
  uint64_t v62 = *(void *)v60;
  uint64_t v61 = *((void *)v60 + 1);
  uint64_t v63 = *((void *)v59 + 1);
  *(void *)uint64_t v59 = v62;
  *((void *)v59 + 1) = v61;
  swift_bridgeObjectRelease(v63);
  uint64_t v64 = a3[16];
  uint64_t v65 = &a1[v64];
  uint64_t v66 = &a2[v64];
  int v67 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v64], 1LL, v29);
  int v68 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v66, 1LL, v29);
  if (v67)
  {
    if (!v68)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32LL))(v65, v66, v29);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v65, 0LL, 1LL, v29);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  uint64_t v69 = *(void *)(v29 - 8);
  if (v68)
  {
    (*(void (**)(char *, uint64_t))(v69 + 8))(v65, v29);
LABEL_18:
    uint64_t v70 = sub_494C(&qword_189D00);
    memcpy(v65, v66, *(void *)(*(void *)(v70 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v69 + 40))(v65, v66, v29);
LABEL_19:
  uint64_t v71 = a3[17];
  uint64_t v72 = &a1[v71];
  uint64_t v73 = &a2[v71];
  uint64_t v75 = *(void *)v73;
  uint64_t v74 = *((void *)v73 + 1);
  uint64_t v76 = *((void *)v72 + 1);
  *(void *)uint64_t v72 = v75;
  *((void *)v72 + 1) = v74;
  swift_bridgeObjectRelease(v76);
  uint64_t v77 = a3[18];
  id v78 = &a1[v77];
  uint64_t v79 = &a2[v77];
  uint64_t v80 = type metadata accessor for SnippetHeaderModel(0LL);
  int v81 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v78, 1LL, v80);
  int v82 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v79, 1LL, v80);
  if (!v81)
  {
    if (!v82)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 40LL))(v78, v79, v29);
      uint64_t v85 = *(int *)(v80 + 20);
      uint64_t v86 = &v78[v85];
      uint64_t v87 = &v79[v85];
      uint64_t v89 = *(void *)v87;
      uint64_t v88 = *((void *)v87 + 1);
      uint64_t v90 = *((void *)v86 + 1);
      *(void *)uint64_t v86 = v89;
      *((void *)v86 + 1) = v88;
      swift_bridgeObjectRelease(v90);
      uint64_t v91 = *(int *)(v80 + 24);
      uint64_t v92 = &v78[v91];
      uint64_t v93 = &v79[v91];
      uint64_t v95 = *(void *)v93;
      uint64_t v94 = *((void *)v93 + 1);
      uint64_t v96 = *((void *)v92 + 1);
      *(void *)uint64_t v92 = v95;
      *((void *)v92 + 1) = v94;
      swift_bridgeObjectRelease(v96);
      return a1;
    }

    sub_26F04((uint64_t)v78, type metadata accessor for SnippetHeaderModel);
    goto LABEL_24;
  }

  if (v82)
  {
LABEL_24:
    uint64_t v83 = sub_494C(&qword_18A1A8);
    memcpy(v78, v79, *(void *)(*(void *)(v83 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32LL))(v78, v79, v29);
  *(_OWORD *)&v78[*(int *)(v80 + 20)] = *(_OWORD *)&v79[*(int *)(v80 + 20)];
  *(_OWORD *)&v78[*(int *)(v80 + 24)] = *(_OWORD *)&v79[*(int *)(v80 + 24)];
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v78, 0LL, 1LL, v80);
  return a1;
}

uint64_t getEnumTagSinglePayload for TemperatureQueryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_BE87C);
}

uint64_t sub_BE87C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_494C(&qword_18A1A0);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = a1;
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v8, a2, v7);
  }

  uint64_t v9 = sub_494C(&qword_189D00);
  if (*(_DWORD *)(*(void *)(v9 - 8) + 84LL) == (_DWORD)a2)
  {
    uint64_t v7 = v9;
    uint64_t v10 = a3[10];
LABEL_12:
    uint64_t v8 = a1 + v10;
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v8, a2, v7);
  }

  if ((_DWORD)a2 != 2147483646)
  {
    uint64_t v7 = sub_494C(&qword_18A1A8);
    uint64_t v10 = a3[18];
    goto LABEL_12;
  }

  unint64_t v11 = *(void *)(a1 + a3[11] + 8);
  if (v11 >= 0xFFFFFFFF) {
    LODWORD(sub_A13C((_OWORD *)(v2 + 40), v11) = -1;
  }
  int v12 = v11 - 1;
  if (v12 < 0) {
    int v12 = -1;
  }
  return (v12 + 1);
}

uint64_t storeEnumTagSinglePayload for TemperatureQueryModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_BE964);
}

void sub_BE964(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_494C(&qword_18A1A0);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    if (*(_DWORD *)(*(void *)(v11 - 8) + 84LL) == a3)
    {
      uint64_t v9 = v11;
      uint64_t v12 = a4[10];
    }

    else
    {
      if (a3 == 2147483646)
      {
        *(void *)(a1 + a4[11] + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a2;
        sub_1EB0C();
        return;
      }

      uint64_t v9 = sub_494C(&qword_18A1A8);
      uint64_t v12 = a4[18];
    }

    uint64_t v10 = a1 + v12;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v10, a2, a2, v9);
}

void sub_BEA28(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v8[0] = *(void *)(v2 - 8) + 64LL;
    v8[1] = "\t";
    _OWORD v8[2] = "\t";
    v8[3] = "\t";
    v8[4] = "\t";
    v8[5] = "\t";
    sub_27758( 319LL,  (unint64_t *)&qword_18AB40,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString);
    if (v5 <= 0x3F)
    {
      uint64_t v9 = *(void *)(v4 - 8) + 64LL;
      uint64_t v10 = &unk_13D0E0;
      uint64_t v11 = &unk_13D0E0;
      uint64_t v12 = &unk_13D0E0;
      uint64_t v13 = &unk_13D0E0;
      uint64_t v14 = &unk_13D0E0;
      uint64_t v15 = v9;
      uint64_t v16 = &unk_13D0E0;
      sub_27758(319LL, (unint64_t *)&qword_18AB48, type metadata accessor for SnippetHeaderModel);
      if (v7 <= 0x3F)
      {
        uint64_t v17 = *(void *)(v6 - 8) + 64LL;
        swift_initStructMetadata(a1, 256LL, 15LL, v8, a1 + 16);
      }
    }
  }

uint64_t getEnumTagSinglePayload for TemperatureQueryModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF2)
  {
    if (a2 + 14 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 14) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 15;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for TemperatureQueryModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    LODWORD(vsub_D878(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_D878(v0 + 4) = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF1) {
    return ((uint64_t (*)(void))((char *)&loc_BEBF0 + 4 * byte_13D004[v4]))();
  }
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_BEC24 + 4 * byte_13CFFF[v4]))();
}

uint64_t sub_BEC24(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_BEC2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xBEC34LL);
  }
  return result;
}

uint64_t sub_BEC40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xBEC48LL);
  }
  *(_BYTE *)uint64_t result = a2 + 14;
  return result;
}

uint64_t sub_BEC4C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_BEC54(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TemperatureQueryModel.CodingKeys()
{
  return &type metadata for TemperatureQueryModel.CodingKeys;
}

unint64_t sub_BEC74()
{
  unint64_t result = qword_18E6B0;
  if (!qword_18E6B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_13D194, &type metadata for TemperatureQueryModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18E6B0);
  }

  return result;
}

unint64_t sub_BECB4()
{
  unint64_t result = qword_18E6B8;
  if (!qword_18E6B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_13D104, &type metadata for TemperatureQueryModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18E6B8);
  }

  return result;
}

unint64_t sub_BECF4()
{
  unint64_t result = qword_18E6C0;
  if (!qword_18E6C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_13D12C, &type metadata for TemperatureQueryModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18E6C0);
  }

  return result;
}

uint64_t sub_BED30()
{
  return type metadata accessor for TemperatureQueryModel(0LL);
}

uint64_t sub_BED38(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, v1);
}

uint64_t sub_BED44(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(_BYTE *)(v2 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = a2 & 1;
  return result;
}

uint64_t sub_BED54(uint64_t a1, char a2)
{
  return sub_BBDFC(a1, a2, v2, 1);
}

uint64_t sub_BED60(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, a2);
}

void sub_BED68(uint64_t a1@<X8>)
{
  *(void *)(v1 + a1) = 0LL;
}

uint64_t sub_BED74()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 8));
}

void sub_BED7C(uint64_t a1, uint64_t a2)
{
}

  ;
}

  ;
}

  ;
}

void *PhoneRingsSnippet.init(model:)@<X0>(const void *a1@<X0>, void *a2@<X8>)
{
  *a2 = swift_getKeyPath(&unk_13D210);
  uint64_t v4 = sub_494C(&qword_189B28);
  swift_storeEnumTagMultiPayload(a2, v4, 0LL);
  int v5 = (char *)a2 + *(int *)(type metadata accessor for PhoneRingsSnippet(0LL) + 20);
  return memcpy(v5, a1, 0xF1uLL);
}

uint64_t type metadata accessor for PhoneRingsSnippet(uint64_t a1)
{
  uint64_t result = qword_18E728;
  if (!qword_18E728) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PhoneRingsSnippet);
  }
  return result;
}

uint64_t sub_BEE4C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2( a1,  &opaque type descriptor for <<opaque return type of PhoneRingsSnippet.body>>,  1LL);
}

uint64_t *initializeBufferWithCopyOfBuffer for PhoneRingsSnippet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = sub_494C(&qword_189B28);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      uint64_t v8 = type metadata accessor for DynamicTypeSize(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
      uint64_t v9 = a1;
      uint64_t v10 = v7;
      uint64_t v11 = 1LL;
    }

    else
    {
      *a1 = *a2;
      swift_retain();
      uint64_t v9 = a1;
      uint64_t v10 = v7;
      uint64_t v11 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 20);
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    *(void *)uint64_t v14 = *(void *)v15;
    v14[8] = v15[8];
    *((void *)v14 + sub_D878(v0 + 2) = *((void *)v15 + 2);
    _BYTE v14[24] = v15[24];
    *((void *)v14 + sub_D878(v0 + 4) = *((void *)v15 + 4);
    v14[40] = v15[40];
    v14[56] = v15[56];
    *((void *)v14 + sub_D878(v0 + 6) = *((void *)v15 + 6);
    uint64_t v16 = *((void *)v15 + 8);
    v14[72] = v15[72];
    *((void *)v14 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v16;
    *((void *)v14 + 10) = *((void *)v15 + 10);
    v14[88] = v15[88];
    uint64_t v17 = *((void *)v15 + 13);
    *((void *)v14 + 1sub_D878(v0 + 2) = *((void *)v15 + 12);
    *((void *)v14 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 3) = v17;
    uint64_t v18 = *((void *)v15 + 15);
    *((void *)v14 + 1sub_D878(v0 + 4) = *((void *)v15 + 14);
    *((void *)v14 + 15) = v18;
    uint64_t v19 = *((void *)v15 + 17);
    *((void *)v14 + 1sub_D878(v0 + 6) = *((void *)v15 + 16);
    *((void *)v14 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = v19;
    uint64_t v20 = *((void *)v15 + 19);
    *((void *)v14 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *((void *)v15 + 18);
    *((void *)v14 + 19) = v20;
    uint64_t v21 = *((void *)v15 + 21);
    *((void *)v14 + 20) = *((void *)v15 + 20);
    *((void *)v14 + 21) = v21;
    uint64_t v22 = *((void *)v15 + 23);
    *((void *)v14 + 2sub_D878(v0 + 2) = *((void *)v15 + 22);
    *((void *)v14 + 2_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 3) = v22;
    uint64_t v23 = *((void *)v15 + 25);
    *((void *)v14 + 2sub_D878(v0 + 4) = *((void *)v15 + 24);
    *((void *)v14 + 25) = v23;
    uint64_t v24 = *((void *)v15 + 27);
    *((void *)v14 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 26) = *((void *)v15 + 26);
    *((void *)v14 + 2_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = v24;
    uint64_t v25 = *((void *)v15 + 29);
    *((void *)v14 + 2_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *((void *)v15 + 28);
    *((void *)v14 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 29) = v25;
    v14[240] = v15[240];
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
  }

  return a1;
}

uint64_t destroy for PhoneRingsSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_494C(&qword_189B28);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    uint64_t v5 = type metadata accessor for DynamicTypeSize(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(a1, v5);
  }

  else
  {
    swift_release();
  }

  unsigned int v6 = (void *)(a1 + *(int *)(a2 + 20));
  swift_bridgeObjectRelease(v6[13]);
  swift_bridgeObjectRelease(v6[15]);
  swift_bridgeObjectRelease(v6[17]);
  swift_bridgeObjectRelease(v6[19]);
  swift_bridgeObjectRelease(v6[21]);
  swift_bridgeObjectRelease(v6[23]);
  swift_bridgeObjectRelease(v6[25]);
  swift_bridgeObjectRelease(v6[27]);
  return swift_bridgeObjectRelease(v6[29]);
}

void *initializeWithCopy for PhoneRingsSnippet(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_494C(&qword_189B28);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    uint64_t v7 = type metadata accessor for DynamicTypeSize(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a1;
    uint64_t v9 = v6;
    uint64_t v10 = 1LL;
  }

  else
  {
    *a1 = *a2;
    swift_retain();
    uint64_t v8 = a1;
    uint64_t v9 = v6;
    uint64_t v10 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  *((void *)v12 + sub_D878(v0 + 2) = *((void *)v13 + 2);
  _BYTE v12[24] = v13[24];
  *((void *)v12 + sub_D878(v0 + 4) = *((void *)v13 + 4);
  _BYTE v12[40] = v13[40];
  v12[56] = v13[56];
  *((void *)v12 + sub_D878(v0 + 6) = *((void *)v13 + 6);
  uint64_t v14 = *((void *)v13 + 8);
  v12[72] = v13[72];
  *((void *)v12 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v14;
  *((void *)v12 + 10) = *((void *)v13 + 10);
  v12[88] = v13[88];
  uint64_t v15 = *((void *)v13 + 13);
  *((void *)v12 + 1sub_D878(v0 + 2) = *((void *)v13 + 12);
  *((void *)v12 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 3) = v15;
  uint64_t v16 = *((void *)v13 + 15);
  *((void *)v12 + 1sub_D878(v0 + 4) = *((void *)v13 + 14);
  *((void *)v12 + 15) = v16;
  uint64_t v17 = *((void *)v13 + 17);
  *((void *)v12 + 1sub_D878(v0 + 6) = *((void *)v13 + 16);
  *((void *)v12 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = v17;
  uint64_t v18 = *((void *)v13 + 19);
  *((void *)v12 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *((void *)v13 + 18);
  *((void *)v12 + 19) = v18;
  uint64_t v19 = *((void *)v13 + 21);
  *((void *)v12 + 20) = *((void *)v13 + 20);
  *((void *)v12 + 21) = v19;
  uint64_t v20 = *((void *)v13 + 23);
  *((void *)v12 + 2sub_D878(v0 + 2) = *((void *)v13 + 22);
  *((void *)v12 + 2_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 3) = v20;
  uint64_t v21 = *((void *)v13 + 25);
  *((void *)v12 + 2sub_D878(v0 + 4) = *((void *)v13 + 24);
  *((void *)v12 + 25) = v21;
  uint64_t v22 = *((void *)v13 + 27);
  *((void *)v12 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 26) = *((void *)v13 + 26);
  *((void *)v12 + 2_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = v22;
  uint64_t v23 = *((void *)v13 + 29);
  *((void *)v12 + 2_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *((void *)v13 + 28);
  *((void *)v12 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 29) = v23;
  v12[240] = v13[240];
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  return a1;
}

void *assignWithCopy for PhoneRingsSnippet(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_BF4F0((uint64_t)a1);
    uint64_t v6 = sub_494C(&qword_189B28);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      uint64_t v7 = type metadata accessor for DynamicTypeSize(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      uint64_t v8 = a1;
      uint64_t v9 = v6;
      uint64_t v10 = 1LL;
    }

    else
    {
      *a1 = *a2;
      swift_retain();
      uint64_t v8 = a1;
      uint64_t v9 = v6;
      uint64_t v10 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }

  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = *(void *)((char *)a2 + v11);
  v12[8] = v13[8];
  *(void *)uint64_t v12 = v14;
  uint64_t v15 = *((void *)v13 + 2);
  _BYTE v12[24] = v13[24];
  *((void *)v12 + sub_D878(v0 + 2) = v15;
  uint64_t v16 = *((void *)v13 + 4);
  _BYTE v12[40] = v13[40];
  *((void *)v12 + sub_D878(v0 + 4) = v16;
  uint64_t v17 = *((void *)v13 + 6);
  v12[56] = v13[56];
  *((void *)v12 + sub_D878(v0 + 6) = v17;
  uint64_t v18 = *((void *)v13 + 8);
  v12[72] = v13[72];
  *((void *)v12 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v18;
  uint64_t v19 = *((void *)v13 + 10);
  v12[88] = v13[88];
  *((void *)v12 + 10) = v19;
  *((void *)v12 + 1sub_D878(v0 + 2) = *((void *)v13 + 12);
  uint64_t v20 = *((void *)v13 + 13);
  uint64_t v21 = *((void *)v12 + 13);
  *((void *)v12 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 3) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *((void *)v12 + 1sub_D878(v0 + 4) = *((void *)v13 + 14);
  uint64_t v22 = *((void *)v13 + 15);
  uint64_t v23 = *((void *)v12 + 15);
  *((void *)v12 + 15) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *((void *)v12 + 1sub_D878(v0 + 6) = *((void *)v13 + 16);
  uint64_t v24 = *((void *)v13 + 17);
  uint64_t v25 = *((void *)v12 + 17);
  *((void *)v12 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  *((void *)v12 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *((void *)v13 + 18);
  uint64_t v26 = *((void *)v13 + 19);
  uint64_t v27 = *((void *)v12 + 19);
  *((void *)v12 + 19) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  *((void *)v12 + 20) = *((void *)v13 + 20);
  uint64_t v28 = *((void *)v13 + 21);
  uint64_t v29 = *((void *)v12 + 21);
  *((void *)v12 + 21) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  *((void *)v12 + 2sub_D878(v0 + 2) = *((void *)v13 + 22);
  uint64_t v30 = *((void *)v13 + 23);
  uint64_t v31 = *((void *)v12 + 23);
  *((void *)v12 + 2_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 3) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  *((void *)v12 + 2sub_D878(v0 + 4) = *((void *)v13 + 24);
  uint64_t v32 = *((void *)v13 + 25);
  uint64_t v33 = *((void *)v12 + 25);
  *((void *)v12 + 25) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  *((void *)v12 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 26) = *((void *)v13 + 26);
  uint64_t v34 = *((void *)v13 + 27);
  uint64_t v35 = *((void *)v12 + 27);
  *((void *)v12 + 2_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  *((void *)v12 + 2_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *((void *)v13 + 28);
  uint64_t v36 = *((void *)v13 + 29);
  uint64_t v37 = *((void *)v12 + 29);
  *((void *)v12 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 29) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  v12[240] = v13[240];
  return a1;
}

uint64_t sub_BF4F0(uint64_t a1)
{
  uint64_t v2 = sub_494C(&qword_189B28);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

char *initializeWithTake for PhoneRingsSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_494C(&qword_189B28);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    uint64_t v7 = type metadata accessor for DynamicTypeSize(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
  }

  memcpy(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], 0xF1uLL);
  return a1;
}

char *assignWithTake for PhoneRingsSnippet(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_BF4F0((uint64_t)a1);
    uint64_t v6 = sub_494C(&qword_189B28);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      uint64_t v7 = type metadata accessor for DynamicTypeSize(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
    }
  }

  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  *(void *)uint64_t v9 = *(void *)v10;
  v9[8] = v10[8];
  *((void *)v9 + sub_D878(v0 + 2) = *((void *)v10 + 2);
  _BYTE v9[24] = v10[24];
  *((void *)v9 + sub_D878(v0 + 4) = *((void *)v10 + 4);
  v9[40] = v10[40];
  v9[56] = v10[56];
  *((void *)v9 + sub_D878(v0 + 6) = *((void *)v10 + 6);
  uint64_t v11 = *((void *)v10 + 8);
  v9[72] = v10[72];
  *((void *)v9 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v11;
  *((void *)v9 + 10) = *((void *)v10 + 10);
  v9[88] = v10[88];
  uint64_t v12 = *((void *)v10 + 13);
  uint64_t v13 = *((void *)v9 + 13);
  *((void *)v9 + 1sub_D878(v0 + 2) = *((void *)v10 + 12);
  *((void *)v9 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 3) = v12;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *((void *)v10 + 15);
  uint64_t v15 = *((void *)v9 + 15);
  *((void *)v9 + 1sub_D878(v0 + 4) = *((void *)v10 + 14);
  *((void *)v9 + 15) = v14;
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *((void *)v10 + 17);
  uint64_t v17 = *((void *)v9 + 17);
  *((void *)v9 + 1sub_D878(v0 + 6) = *((void *)v10 + 16);
  *((void *)v9 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = v16;
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = *((void *)v10 + 19);
  uint64_t v19 = *((void *)v9 + 19);
  *((void *)v9 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *((void *)v10 + 18);
  *((void *)v9 + 19) = v18;
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = *((void *)v10 + 21);
  uint64_t v21 = *((void *)v9 + 21);
  *((void *)v9 + 20) = *((void *)v10 + 20);
  *((void *)v9 + 21) = v20;
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = *((void *)v10 + 23);
  uint64_t v23 = *((void *)v9 + 23);
  *((void *)v9 + 2sub_D878(v0 + 2) = *((void *)v10 + 22);
  *((void *)v9 + 2_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 3) = v22;
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = *((void *)v10 + 25);
  uint64_t v25 = *((void *)v9 + 25);
  *((void *)v9 + 2sub_D878(v0 + 4) = *((void *)v10 + 24);
  *((void *)v9 + 25) = v24;
  swift_bridgeObjectRelease(v25);
  uint64_t v26 = *((void *)v10 + 27);
  uint64_t v27 = *((void *)v9 + 27);
  *((void *)v9 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 26) = *((void *)v10 + 26);
  *((void *)v9 + 2_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = v26;
  swift_bridgeObjectRelease(v27);
  uint64_t v28 = *((void *)v10 + 29);
  uint64_t v29 = *((void *)v9 + 29);
  *((void *)v9 + 2_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = *((void *)v10 + 28);
  *((void *)v9 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 29) = v28;
  swift_bridgeObjectRelease(v29);
  v9[240] = v10[240];
  return a1;
}

uint64_t getEnumTagSinglePayload for PhoneRingsSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_BF79C);
}

uint64_t sub_BF79C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_494C(&qword_18E6C8);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, a2, v6);
  }
  unint64_t v8 = *(void *)(a1 + *(int *)(a3 + 20) + 104);
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = -1;
  }
  int v9 = v8 - 1;
  if (v9 < 0) {
    int v9 = -1;
  }
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for PhoneRingsSnippet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_BF834);
}

uint64_t sub_BF834(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_494C(&qword_18E6C8);
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3) {
    return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20) + 10sub_D878(v0 + 4) = a2;
  return result;
}

void sub_BF8B0(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = &unk_13D2D8;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
  }

void sub_BF920(uint64_t a1)
{
  if (!qword_18E738)
  {
    uint64_t v2 = type metadata accessor for DynamicTypeSize(255LL);
    unint64_t v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_18E738);
    }
  }

void *sub_BF974()
{
  return &protocol witness table for EmptyView;
}

uint64_t sub_BF980(uint64_t a1, uint64_t a2)
{
  **(void **)(*(void *)(a1 + 64) + 4Hasher.init(_seed:)(v1, 0LL) = a2;
  return swift_continuation_resume();
}

void sub_BF990()
{
}

id sub_BF9A0(char a1)
{
  return [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1)) initWithBool:a1 & 1];
}

uint64_t sub_BF9D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v49 = v12;
  uint64_t v50 = v13;
  uint64_t v14 = v10;
  uint64_t v16 = v15;
  uint64_t v47 = v17;
  uint64_t v48 = v18;
  uint64_t v20 = v19;
  uint64_t v45 = v21;
  uint64_t v46 = v22;
  uint64_t v43 = v23;
  uint64_t v44 = v24;
  uint64_t v42 = a10;
  uint64_t v41 = sub_20308(v14, 440LL);
  uint64_t v25 = v20[3];
  uint64_t v26 = v20[4];
  uint64_t v27 = sub_372A0();
  uint64_t v29 = sub_8F930(v27, v28);
  __chkstk_darwin(v29);
  sub_27AD8();
  sub_DA14(v11, v31, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16));
  uint64_t v32 = ((uint64_t (*)(uint64_t))swift_getObjectType)(v16);
  uint64_t v33 = *(void *)(a9 + 24);
  uint64_t v34 = *(void *)(a9 + 32);
  uint64_t v35 = sub_8F930(a9, v33);
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)&v41 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v38 + 16))(v37);
  uint64_t v39 = sub_DAE90(v43, v44, v45, v46, v11, v47, v48, v16, (uint64_t)v37, v42, v41, v32, v25, v33, v26, v34);
  sub_9BC44();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v20);
  return v39;
}

uint64_t sub_BFB20()
{
  return sub_D6FFC( (void (*)(void))type metadata accessor for WellnessLoggingCATsSimple,  (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t sub_BFB34()
{
  return sub_D6FFC( (void (*)(void))type metadata accessor for WellnessLoggingCATs,  (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

void sub_BFB48(uint64_t a1, uint64_t a2)
{
}

void sub_BFB6C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v7 = sub_494C(a3);
  sub_A72C(v7);
  uint64_t v8 = a4(0LL);
  sub_DE7FC();
  PromptForValueFlowAsync.init<A>(strategy:outputPublisher:)(a1, a2, v8, v9);
  sub_24A0C();
}

void sub_BFBDC(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v1 = a1;
    }
    else {
      uint64_t v1 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    _CocoaArrayWrapper.endIndex.getter(v1);
    sub_2A184();
  }

  sub_A890();
}

uint64_t sub_BFC30(uint64_t a1)
{
  uint64_t v2 = sub_80C98();
  uint64_t v4 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v2, v3);
  return specialized Array._endMutation()(v4, v5, v6);
}

__n128 sub_BFC74(__int128 *a1)
{
  __int128 v9 = a1[1];
  __int128 v10 = *a1;
  __n128 v8 = (__n128)a1[2];
  uint64_t v2 = *((void *)a1 + 6);
  uint64_t v3 = *((void *)a1 + 7);
  sub_D9A84();
  uint64_t v4 = *(void *)(*v1 + 16);
  sub_D9AF8(v4);
  uint64_t v5 = *v1;
  *(void *)(v5 + 1sub_D878(v0 + 6) = v4 + 1;
  uint64_t v6 = v5 + (v4 << 6);
  *(_OWORD *)(v6 + 3sub_D878(v0 + 2) = v10;
  *(_OWORD *)(v6 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v9;
  __n128 result = v8;
  *(__n128 *)(v6 + 6sub_D878(v0 + 4) = v8;
  *(void *)(v6 + 80) = v2;
  *(void *)(v6 + 8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v3;
  *uint64_t v1 = v5;
  return result;
}

void sub_BFCF4(uint64_t *a1@<X8>)
{
  uint64_t v4 = sub_5B2C4();
  a1[8] = v1;
  a1[9] = (uint64_t)&off_17DC48;
  a1[5] = v4;
  type metadata accessor for WellnessLoggingCATPatternsExecutor(0LL);
  sub_36E30();
  uint64_t v5 = sub_5B2C4();
  a1[13] = v1;
  a1[14] = (uint64_t)&off_1806B8;
  a1[10] = v5;
  type metadata accessor for WellnessQueryingCATPatternsExecutor(0LL);
  sub_36E30();
  uint64_t v6 = sub_5B2C4();
  a1[18] = v1;
  a1[19] = (uint64_t)&off_17D960;
  a1[15] = v6;
  sub_1EB0C();
}

void *sub_BFD9C(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v4 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  if (v4)
  {
    while (1)
    {
      uint64_t v43 = _swiftEmptyArrayStorage;
      __n128 result = (void *)specialized ContiguousArray.reserveCapacity(_:)(v4);
      if (v4 < 0) {
        break;
      }
      unint64_t v37 = v3 & 0xC000000000000001LL;
      uint64_t v6 = 0LL;
      uint64_t v36 = a2 + 24;
      type metadata accessor for WellnessMedicationDialogObject(0LL);
      uint64_t v38 = v3;
      while (v4 != v6)
      {
        if (v37) {
          id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v3);
        }
        else {
          id v7 = *(id *)(v3 + 8 * v6 + 32);
        }
        __n128 v8 = v7;
        sub_DA6D8(v7, (SEL *)&selRef_scheduleID);
        uint64_t v10 = v9;
        unint64_t v12 = v11;
        sub_DA6D8(v8, (SEL *)&selRef_medicationID);
        uint64_t v14 = v13;
        unint64_t v16 = v15;
        id v17 = [v8 strength];
        uint64_t v18 = v17;
        if (v17)
        {
          [v17 doubleValue];
          unint64_t v20 = v19;

          unint64_t v21 = v20;
        }

        else
        {
          unint64_t v21 = 0LL;
        }

        ++v6;
        sub_DA6D8(v8, (SEL *)&selRef_strengthUnit);
        sub_77E28(v10, v12, v14, v16, v21, v18 == 0LL, v22, v23, (uint64_t)v44);
        sub_A304(v36, (uint64_t)v40);
        uint64_t v24 = v41;
        uint64_t v25 = v42;
        sub_500C(v40, v41);
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v25 + 8))(v39, v24, v25);
        uint64_t v26 = sub_77ECC(v39);
        uint64_t v28 = v27;
        sub_DAE34(v44);
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v39);
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v40);
        if (v28) {
          uint64_t v29 = v26;
        }
        else {
          uint64_t v29 = 0LL;
        }
        if (v28) {
          uint64_t v30 = v28;
        }
        else {
          uint64_t v30 = 0xE000000000000000LL;
        }
        sub_FAF24(v8, v29, v30);
        a2 = v31;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v31);
        uint64_t v32 = v43[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v32);
        uint64_t v33 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, a2);
        specialized ContiguousArray._endMutation()(v33);
        uint64_t v3 = v38;
        if (v4 == v6)
        {
          uint64_t v34 = v43;
          swift_release();
          return v34;
        }
      }

      __break(1u);
LABEL_21:
      if (v3 < 0) {
        uint64_t v35 = v3;
      }
      else {
        uint64_t v35 = v3 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v3);
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v35);
      swift_bridgeObjectRelease(v3);
      if (!v4) {
        goto LABEL_25;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_25:
    swift_release();
    return _swiftEmptyArrayStorage;
  }

  return result;
}

uint64_t sub_C004C()
{
  uint64_t v0 = type metadata accessor for SpecificMedLoggingFlow();
  sub_35A68(&qword_18AF00, v1, (uint64_t (*)(uint64_t))type metadata accessor for SpecificMedLoggingFlow);
  uint64_t v2 = sub_80C98();
  return Flow.deferToExecuteAsync(_:)(v2, v3, v0, v4);
}

uint64_t sub_C00B8(uint64_t a1)
{
  v2[3247] = v1;
  v2[3246] = a1;
  uint64_t v3 = sub_494C(&qword_18A1A8);
  v2[3248] = sub_36390(v3);
  uint64_t v4 = type metadata accessor for Date(0LL);
  v2[3249] = v4;
  v2[3250] = *(void *)(v4 - 8);
  v2[3251] = sub_A5B8();
  v2[3252] = sub_A5B8();
  v2[3253] = sub_A5B8();
  v2[3254] = sub_A5B8();
  v2[3255] = sub_A5B8();
  v2[3256] = sub_A5B8();
  type metadata accessor for SpecificMedCompletedLogModel(0LL);
  v2[3257] = sub_A5B8();
  v2[3258] = sub_A5B8();
  v2[3259] = sub_A5B8();
  v2[3260] = sub_A5B8();
  v2[3261] = sub_A5B8();
  v2[3262] = sub_A5B8();
  v2[3263] = sub_A5B8();
  v2[3264] = sub_A5B8();
  sub_494C(&qword_189CF8);
  v2[3265] = sub_A5B8();
  v2[3266] = sub_A5B8();
  v2[3267] = sub_A5B8();
  v2[3268] = sub_A5B8();
  v2[3269] = sub_A5B8();
  v2[3270] = sub_A5B8();
  v2[3271] = sub_A5B8();
  v2[3272] = sub_A5B8();
  v2[3273] = sub_A5B8();
  v2[3274] = sub_A5B8();
  uint64_t v5 = type metadata accessor for DialogPhase(0LL);
  v2[3275] = sub_36390(v5);
  uint64_t v6 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[3276] = v6;
  v2[3277] = *(void *)(v6 - 8);
  v2[3278] = sub_A5B8();
  v2[3279] = sub_A5B8();
  v2[3280] = sub_A5B8();
  v2[3281] = sub_A5B8();
  v2[3282] = sub_A5B8();
  v2[3283] = sub_A5B8();
  v2[3284] = sub_A5B8();
  v2[3285] = sub_A5B8();
  v2[3286] = sub_A5B8();
  v2[3287] = sub_A5B8();
  v2[3288] = sub_A5B8();
  v2[3289] = sub_A5B8();
  v2[3290] = type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters(0LL);
  v2[3291] = sub_A5B8();
  v2[3292] = sub_A5B8();
  v2[3293] = sub_A5B8();
  v2[3294] = sub_A5B8();
  v2[3295] = sub_494C(&qword_18B138);
  v2[3296] = sub_A5B8();
  v2[3297] = sub_A5B8();
  uint64_t v7 = type metadata accessor for SpeakableString(0LL);
  v2[3298] = v7;
  v2[3299] = *(void *)(v7 - 8);
  v2[3300] = sub_A5B8();
  v2[3301] = sub_A5B8();
  v2[3302] = sub_A5B8();
  uint64_t v8 = type metadata accessor for SnippetHeaderModel(0LL);
  v2[3303] = v8;
  v2[3304] = sub_36390(v8);
  sub_494C(&qword_18D4A0);
  v2[3305] = sub_A5B8();
  v2[3306] = sub_A5B8();
  uint64_t v9 = sub_494C(&qword_189CE8);
  v2[3307] = sub_36390(v9);
  sub_494C(&qword_189D00);
  v2[3308] = sub_A5B8();
  v2[3309] = sub_A5B8();
  v2[3310] = sub_A5B8();
  v2[3311] = sub_A5B8();
  v2[3312] = sub_A5B8();
  v2[3313] = sub_A5B8();
  v2[3314] = sub_A5B8();
  v2[3315] = sub_A5B8();
  v2[3316] = sub_A5B8();
  v2[3317] = sub_A5B8();
  v2[3318] = sub_A5B8();
  v2[3319] = sub_A5B8();
  v2[3320] = sub_A5B8();
  v2[3321] = sub_A5B8();
  v2[3322] = sub_A5B8();
  v2[3323] = sub_A5B8();
  v2[3324] = sub_A5B8();
  v2[3325] = sub_A5B8();
  v2[3326] = sub_A5B8();
  v2[3327] = sub_A5B8();
  v2[3328] = sub_A5B8();
  v2[3329] = sub_A5B8();
  v2[3330] = sub_A5B8();
  v2[3331] = sub_A5B8();
  v2[3332] = sub_A5B8();
  v2[3333] = sub_A5B8();
  v2[3334] = sub_A5B8();
  v2[3335] = sub_A5B8();
  v2[3336] = sub_A5B8();
  sub_494C(&qword_18B168);
  v2[3337] = sub_A5B8();
  v2[3338] = sub_A5B8();
  v2[3339] = sub_A5B8();
  v2[3340] = sub_A5B8();
  v2[3341] = sub_A5B8();
  uint64_t v10 = sub_D984();
  v2[3342] = v10;
  v2[3343] = *(void *)(v10 - 8);
  v2[3344] = sub_A5B8();
  v2[3345] = sub_A5B8();
  v2[3346] = sub_A5B8();
  v2[3347] = sub_A5B8();
  v2[3348] = sub_A5B8();
  v2[3349] = sub_A5B8();
  v2[3350] = sub_A5B8();
  v2[3351] = sub_A5B8();
  v2[3352] = sub_A5B8();
  v2[3353] = sub_A5B8();
  v2[3354] = sub_A5B8();
  v2[3355] = sub_A5B8();
  v2[3356] = sub_A5B8();
  v2[3357] = sub_A5B8();
  v2[3358] = sub_A5B8();
  v2[3359] = sub_A5B8();
  v2[3360] = sub_A5B8();
  v2[3361] = sub_A5B8();
  v2[3362] = sub_A5B8();
  v2[3363] = sub_A5B8();
  v2[3364] = sub_A5B8();
  v2[3365] = sub_A5B8();
  v2[3366] = sub_A5B8();
  v2[3367] = sub_A5B8();
  v2[3368] = sub_A5B8();
  v2[3369] = sub_A5B8();
  v2[3370] = sub_A5B8();
  v2[3371] = sub_A5B8();
  v2[3372] = sub_A5B8();
  v2[3373] = sub_A5B8();
  v2[3374] = sub_A5B8();
  v2[3375] = sub_A5B8();
  v2[3376] = sub_A5B8();
  v2[3377] = sub_A5B8();
  v2[3378] = sub_A5B8();
  v2[3379] = sub_A5B8();
  v2[3380] = sub_A5B8();
  v2[3381] = sub_A5B8();
  v2[3382] = sub_A5B8();
  v2[3383] = sub_A5B8();
  v2[3384] = sub_A5B8();
  v2[3385] = sub_A5B8();
  v2[3386] = sub_A5B8();
  v2[3387] = sub_A5B8();
  v2[3388] = sub_A5B8();
  v2[3389] = sub_A5B8();
  v2[3390] = sub_A5B8();
  v2[3391] = sub_A5B8();
  v2[3392] = sub_A5B8();
  v2[3393] = sub_A5B8();
  v2[3394] = sub_A5B8();
  v2[3395] = sub_A5B8();
  v2[3396] = sub_A5B8();
  v2[3397] = sub_A5B8();
  v2[3398] = sub_A5B8();
  v2[3399] = sub_A5B8();
  v2[3400] = sub_A5B8();
  v2[3401] = sub_A5B8();
  v2[3402] = sub_A5B8();
  v2[3403] = sub_A5B8();
  v2[3404] = sub_A5B8();
  v2[3405] = sub_A5B8();
  v2[3406] = sub_A5B8();
  v2[3407] = sub_A5B8();
  v2[3408] = sub_A5B8();
  v2[3409] = sub_A5B8();
  v2[3410] = sub_A5B8();
  v2[3411] = sub_A5B8();
  v2[3412] = sub_A5B8();
  v2[3413] = sub_A5B8();
  v2[3414] = sub_A5B8();
  v2[3415] = sub_A5B8();
  v2[3416] = sub_A5B8();
  v2[3417] = sub_A5B8();
  v2[3418] = sub_A5B8();
  v2[3419] = sub_A5B8();
  v2[3420] = sub_A5B8();
  v2[3421] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_C076C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 26744);
  uint64_t v3 = Logger.wellness.unsafeMutableAddressor(a1);
  *(void *)(v1 + 2737sub_D878(v0 + 6) = v3;
  sub_A5DC(v3, v1 + 24608);
  *(void *)(v1 + 2738sub_D878(v0 + 4) = *(void *)(v2 + 16);
  uint64_t v4 = sub_DE46C();
  v5(v4);
  uint64_t v6 = (os_log_s *)sub_A86C();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v1 + 27368);
  uint64_t v10 = *(void *)(v1 + 26744);
  if (v8)
  {
    unint64_t v11 = (uint8_t *)sub_3635C();
    uint64_t v58 = 0LL;
    v59[0] = 0LL;
    *(_WORD *)unint64_t v11 = 0;
    uint64_t v57 = v11 + 2;
    sub_D9904((uint64_t)_swiftEmptyArrayStorage, (uint64_t)&v57, (uint64_t)&v58, (uint64_t)v59);
    swift_bridgeObjectRelease();
    sub_232EC(&dword_0, v6, v7, "Specific med request: checking for defined value in schedule.", v11);
    sub_DDDAC();

    uint64_t v12 = *(void *)(v10 + 8);
    sub_DE330(v9);
  }

  else
  {

    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v10 + 8);
    sub_DE330(v9);
  }

  *(void *)(v1 + 27400) = v12;
  *(void *)(v1 + 2739sub_D878(v0 + 2) = 0LL;
  uint64_t v13 = *(void *)(v1 + 26728);
  uint64_t v14 = *(void *)(v1 + 25976);
  uint64_t v15 = *(void *)(v14 + 16);
  sub_DDB48(v14 + 24);
  uint64_t v16 = *(void *)(v1 + 23512);
  uint64_t v17 = *(void *)(v1 + 23520);
  sub_500C((void *)(v1 + 23488), v16);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  sub_36C5C();
  v18(v16, v17);
  getMedScheduleWithDefinedValues(from:deviceState:)( v15,  v1 + 22848,  v19,  v20,  v21,  v22,  v23,  v24,  v56,  (uint64_t)v57,  v58,  v59[0],  v59[1],  v59[2],  v59[3],  v59[4],  v59[5],  v59[6],  v59[7],  v59[8]);
  sub_37110();
  sub_DED34();
  sub_9BC44();
  sub_DEEC8(v13, v25, &qword_18B168);
  uint64_t v26 = sub_494C(&qword_18B130);
  *(void *)(v1 + 2740_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v26;
  int v27 = sub_DE2F4();
  uint64_t v28 = *(void *)(v1 + 26720);
  if (v27 == 1)
  {
    sub_279E0(v28, &qword_18B168);
    uint64_t v30 = 0LL;
  }

  else
  {
    uint64_t v31 = (uint64_t *)(v28 + *(int *)(v26 + 48));
    uint64_t v30 = *v31;
    uint64_t v32 = v31[1];
    sub_279E0(v28, &qword_18D4A0);
    if (v32)
    {
      swift_bridgeObjectRetain(v32);
      uint64_t v33 = sub_BB0AC();
      String.toSpeakableString.getter(v33, v34);
      char v35 = 0;
      uint64_t v36 = v32;
      goto LABEL_16;
    }
  }

  sub_DEEC8(*(void *)(v1 + 26728), v29, &qword_18B168);
  int v37 = sub_DE2F4();
  uint64_t v38 = *(void *)(v1 + 26712);
  if (v37 == 1)
  {
    uint64_t v39 = &qword_18B168;
    uint64_t v40 = *(void *)(v1 + 26712);
LABEL_13:
    sub_279E0(v40, v39);
    sub_A66C(*(void *)(v1 + 26456), 1LL, v44, *(void *)(v1 + 25992));
    goto LABEL_14;
  }

  uint64_t v41 = *(void *)(v1 + 26448);
  uint64_t v42 = *(void *)(v1 + 26360);
  sub_DECF4(v38 + *(int *)(v26 + 48));
  sub_DADFC(v38, v41, &qword_18D4A0);
  sub_A614(v41, 1LL, v42);
  if (v43)
  {
    uint64_t v40 = *(void *)(v1 + 26448);
    uint64_t v39 = &qword_18D4A0;
    goto LABEL_13;
  }

  uint64_t v45 = *(void *)(v1 + 26456);
  uint64_t v46 = *(void *)(v1 + 26448);
  uint64_t v47 = *(void *)(v1 + 26000);
  uint64_t v38 = *(void *)(v1 + 25992);
  uint64_t v48 = v46 + *(int *)(*(void *)(v1 + 26360) + 48LL);
  sub_DA14(v45, v46, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 32));
  sub_41A28(v45);
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v48, v38);
LABEL_14:
  sub_91C24(*(void *)(v1 + 26456));
  sub_DEE28();
  sub_73370(v49, &qword_189CE8);
  if (!v38)
  {
    uint64_t v36 = 0LL;
    uint64_t v53 = 1LL;
    char v35 = 1;
    goto LABEL_18;
  }

  uint64_t v51 = sub_372A0();
  String.toSpeakableString.getter(v51, v52);
  uint64_t v36 = 0LL;
  char v35 = 1;
LABEL_16:
  sub_6D64();
  uint64_t v53 = 0LL;
LABEL_18:
  *(void *)(v1 + 2742sub_D878(v0 + 4) = v30;
  *(void *)(v1 + 2741sub_D878(v0 + 6) = v36;
  *(_BYTE *)(v1 + 2851sub_D878(v0 + 6) = v35;
  sub_A66C(*(void *)(v1 + 26688), v53, v50, *(void *)(v1 + 26384));
  uint64_t v54 = (void *)swift_task_alloc(dword_18B6EC);
  *(void *)(v1 + 2743sub_D878(v0 + 2) = v54;
  sub_BB018(v54, (uint64_t)sub_C0B20);
  return sub_5E408(0x646567676F6CLL, 0xE600000000000000LL);
}

uint64_t sub_C0B20()
{
  v1[3205] = v0;
  v1[3206] = v2;
  v1[3207] = v3;
  sub_364C8();
  *(void *)(v5 + 27440) = v4;
  swift_task_dealloc(v6);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_C0B68()
{
  v0[3431] = v0[3206];
  uint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  v0[3432] = v1;
  sub_BB018(v1, (uint64_t)sub_C0BB0);
  uint64_t v2 = sub_DECCC(0x6B73u);
  return sub_36164(v2, v3);
}

uint64_t sub_C0BB0()
{
  v1[3208] = v0;
  v1[3209] = v2;
  v1[3210] = v3;
  sub_364C8();
  *(void *)(v5 + 2746sub_D878(v0 + 4) = v4;
  swift_task_dealloc(v6);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_C0BF8()
{
  v0[3434] = v0[3209];
  uint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  v0[3435] = v1;
  sub_BB018(v1, (uint64_t)sub_C0C48);
  return sub_36164(0x6E656B6174LL, 0xE500000000000000LL);
}

uint64_t sub_C0C48()
{
  v1[3211] = v0;
  v1[3212] = v2;
  v1[3213] = v3;
  sub_364C8();
  *(void *)(v5 + 2748_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v4;
  swift_task_dealloc(v6);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_C0C90()
{
  v0[3437] = v0[3212];
  sub_27CC8(0x58u);
  v0[3438] = v1;
  uint64_t v2 = (void *)swift_task_alloc(dword_18B704);
  v0[3439] = v2;
  sub_BB018(v2, (uint64_t)sub_C0CF0);
  uint64_t v3 = sub_BB080();
  return sub_5E5E4(v3, v4);
}

uint64_t sub_C0CF0()
{
  v1[3214] = v0;
  v1[3215] = v2;
  v1[3216] = v3;
  sub_364C8();
  *(void *)(v5 + 27520) = v4;
  swift_task_dealloc(v6);
  sub_249D4();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_C0D40( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = *(void *)(v12 + 27520);
  uint64_t v14 = *(void *)(v12 + 26416);
  uint64_t v15 = *(void *)(v12 + 25976);
  if (v13) {
    uint64_t v16 = *(void *)(v12 + 25720);
  }
  else {
    uint64_t v16 = 0x697461636964654DLL;
  }
  if (v13) {
    unint64_t v17 = *(void *)(v12 + 27520);
  }
  else {
    unint64_t v17 = 0xEB00000000736E6FLL;
  }
  String.toSpeakableString.getter(v16, v17);
  sub_6D64();
  sub_2A044(0x58u);
  uint64_t v19 = v18;
  sub_27CC8(0x58u);
  uint64_t v20 = sub_372A0();
  SnippetHeaderModel.init(categoryLabel:categoryListIconName:categoryIdentifier:)(v20, v21, v19, v22, v23, v24);
  uint64_t v25 = *(void *)(v15 + 224);
  *(void *)(v12 + 2752_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v25;
  uint64_t v26 = *(void *)(v15 + 232);
  *(void *)(v12 + 2753sub_D878(v0 + 6) = v26;
  uint64_t v27 = *(void *)(v15 + 240);
  *(void *)(v12 + 2754sub_D878(v0 + 4) = v27;
  uint64_t v28 = *(void *)(v15 + 248);
  *(void *)(v12 + 2755sub_D878(v0 + 2) = v28;
  uint64_t v29 = *(void *)(v15 + 256);
  *(void *)(v12 + 27560) = v29;
  uint64_t v30 = *(void *)(v15 + 264);
  *(void *)(v12 + 2756_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v30;
  uint64_t v31 = *(void *)(v15 + 272);
  *(void *)(v12 + 2757sub_D878(v0 + 6) = v31;
  uint64_t v32 = *(void *)(v15 + 280);
  *(void *)(v12 + 2758sub_D878(v0 + 4) = v32;
  unsigned int v33 = *(unsigned __int8 *)(v15 + 288);
  *(_BYTE *)(v12 + 2851_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = v33;
  unsigned int v34 = v33 >> 6;
  if (!(v33 >> 6))
  {
    uint64_t v56 = v26;
    v2883 = *(os_log_s **)(v12 + 27384);
    uint64_t v57 = v25;
    unsigned int v58 = v33;
    uint64_t v2889 = v30;
    swift_beginAccess(*(void *)(v12 + 27376), v12 + 25256, 0LL, 0LL);
    uint64_t v59 = sub_80C98();
    ((void (*)(uint64_t))v2883)(v59);
    uint64_t v2863 = sub_20308((uint64_t)&unk_17FD20, 81LL);
    *(void *)(v2863 + 1sub_D878(v0 + 6) = v57;
    *(void *)(v2863 + 2sub_D878(v0 + 4) = v56;
    *(void *)(v2863 + 3sub_D878(v0 + 2) = v27;
    *(void *)(v2863 + 40) = v28;
    *(void *)(v2863 + 4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v29;
    *(_BYTE *)(v2863 + sub_D7EC(v0 + 16, v0 + 56) = v2889 & 1;
    *(void *)(v2863 + 6sub_D878(v0 + 4) = v31;
    *(void *)(v2863 + 7sub_D878(v0 + 2) = v32;
    *(_BYTE *)(v2863 + 80) = v58;
    uint64_t v2877 = sub_20308((uint64_t)&unk_17FD48, 81LL);
    sub_DDC28(v2877);
    uint64_t v2873 = sub_20308((uint64_t)&unk_17FD70, 81LL);
    sub_DDC28(v2873);
    uint64_t v2865 = sub_20308((uint64_t)&unk_17FD98, 81LL);
    sub_DDC28(v2865);
    uint64_t v2853 = sub_20308((uint64_t)&unk_17FDC0, 81LL);
    sub_DDC28(v2853);
    sub_DDFF0(v57, v56, v27, v28, v29, v2889, v60, v61, v58);
    sub_DDCF4(v57, v56, v62, v63, v64, v65, v66, v67, v58);
    sub_DDCF4(v57, v56, v68, v69, v70, v71, v72, v73, v58);
    unsigned int v2884 = v58;
    uint64_t v74 = sub_37084();
    uint64_t v2871 = v27;
    sub_DDCF4(v74, v75, v76, v77, v78, v79, v80, v81, v58);
    sub_DE548(v32);
    uint64_t v2869 = v56;
    sub_DE548(v56);
    uint64_t v82 = sub_DE548(v28);
    v2860 = (os_log_s *)Logger.logObject.getter(v82);
    os_log_type_t v2854 = static os_log_type_t.debug.getter();
    uint64_t v83 = sub_20308((uint64_t)&unk_17FDE8, 17LL);
    *(_BYTE *)(v83 + 1sub_D878(v0 + 6) = 32;
    uint64_t v84 = v83;
    uint64_t v85 = sub_20308((uint64_t)&unk_17FE10, 17LL);
    *(_BYTE *)(v85 + 1sub_D878(v0 + 6) = 8;
    uint64_t v86 = v85;
    uint64_t v87 = sub_20308((uint64_t)&unk_17FE38, 32LL);
    *(void *)(v87 + 1sub_D878(v0 + 6) = sub_DAA24;
    *(void *)(v87 + 2sub_D878(v0 + 4) = v2863;
    uint64_t v88 = sub_20308((uint64_t)&unk_17FE60, 32LL);
    *(void *)(v88 + 1sub_D878(v0 + 6) = sub_DBD74;
    *(void *)(v88 + 2sub_D878(v0 + 4) = v87;
    uint64_t v89 = sub_20308((uint64_t)&unk_17FE88, 17LL);
    *(_BYTE *)(v89 + 1sub_D878(v0 + 6) = 32;
    uint64_t v2859 = sub_20308((uint64_t)&unk_17FEB0, 17LL);
    *(_BYTE *)(v2859 + 1sub_D878(v0 + 6) = 8;
    uint64_t v90 = sub_20308((uint64_t)&unk_17FED8, 32LL);
    *(void *)(v90 + 1sub_D878(v0 + 6) = sub_DAA34;
    *(void *)(v90 + 2sub_D878(v0 + 4) = v2877;
    uint64_t v91 = sub_20308((uint64_t)&unk_17FF00, 32LL);
    *(void *)(v91 + 1sub_D878(v0 + 6) = sub_DBD74;
    *(void *)(v91 + 2sub_D878(v0 + 4) = v90;
    uint64_t v2890 = sub_20308((uint64_t)&unk_17FF28, 17LL);
    *(_BYTE *)(v2890 + 1sub_D878(v0 + 6) = 32;
    uint64_t v2878 = sub_20308((uint64_t)&unk_17FF50, 17LL);
    *(_BYTE *)(v2878 + 1sub_D878(v0 + 6) = 8;
    uint64_t v92 = sub_20308((uint64_t)&unk_17FF78, 32LL);
    *(void *)(v92 + 1sub_D878(v0 + 6) = sub_DAA44;
    *(void *)(v92 + 2sub_D878(v0 + 4) = v2873;
    uint64_t v2864 = sub_20308((uint64_t)&unk_17FFA0, 32LL);
    *(void *)(v2864 + 1sub_D878(v0 + 6) = sub_DBD74;
    *(void *)(v2864 + 2sub_D878(v0 + 4) = v92;
    uint64_t v2874 = sub_20308((uint64_t)&unk_17FFC8, 17LL);
    *(_BYTE *)(v2874 + 1sub_D878(v0 + 6) = 32;
    uint64_t v2858 = sub_20308((uint64_t)&unk_17FFF0, 17LL);
    *(_BYTE *)(v2858 + 1sub_D878(v0 + 6) = 8;
    uint64_t v93 = sub_20308((uint64_t)&unk_180018, 32LL);
    *(void *)(v93 + 1sub_D878(v0 + 6) = sub_DAA54;
    *(void *)(v93 + 2sub_D878(v0 + 4) = v2865;
    uint64_t v2857 = sub_20308((uint64_t)&unk_180040, 32LL);
    *(void *)(v2857 + 1sub_D878(v0 + 6) = sub_DBD74;
    *(void *)(v2857 + 2sub_D878(v0 + 4) = v93;
    uint64_t v2856 = sub_20308((uint64_t)&unk_180068, 17LL);
    *(_BYTE *)(v2856 + 1sub_D878(v0 + 6) = 32;
    uint64_t v2866 = sub_20308((uint64_t)&unk_180090, 17LL);
    *(_BYTE *)(v2866 + 1sub_D878(v0 + 6) = 8;
    uint64_t v94 = sub_20308((uint64_t)&unk_1800B8, 32LL);
    *(void *)(v94 + 1sub_D878(v0 + 6) = sub_DAA94;
    *(void *)(v94 + 2sub_D878(v0 + 4) = v2853;
    uint64_t v95 = sub_20308((uint64_t)&unk_1800E0, 32LL);
    *(void *)(v95 + 1sub_D878(v0 + 6) = sub_DBD74;
    *(void *)(v95 + 2sub_D878(v0 + 4) = v94;
    uint64_t v96 = sub_494C(&qword_18E9E8);
    *(void *)(v12 + 2759sub_D878(v0 + 2) = v96;
    uint64_t v97 = sub_20308(v96, 272LL);
    sub_58F80(v97, 15LL);
    *uint64_t v98 = sub_DBD84;
    v98[1] = v84;
    v98[2] = sub_DBD84;
    v98[3] = v86;
    v98[4] = sub_DBD7C;
    v98[5] = v88;
    v98[6] = sub_DBD84;
    v98[7] = v89;
    v98[8] = sub_DBD84;
    v98[9] = v2859;
    v98[10] = sub_DBD7C;
    v98[11] = v91;
    v98[12] = sub_DBD84;
    v98[13] = v2890;
    v98[14] = sub_DBD84;
    v98[15] = v2878;
    v98[16] = sub_DBD7C;
    v98[17] = v2864;
    v98[18] = sub_DBD84;
    v98[19] = v2874;
    v98[20] = sub_DBD84;
    v98[21] = v2858;
    v98[22] = sub_DBD7C;
    v98[23] = v2857;
    v98[24] = sub_DBD84;
    v98[25] = v2856;
    v98[26] = sub_DBD84;
    v98[27] = v2866;
    v98[28] = sub_DBD7C;
    v98[29] = v95;
    swift_retain();
    swift_retain();
    sub_DEA04();
    swift_retain();
    sub_4195C();
    sub_72C38();
    swift_retain();
    swift_retain();
    sub_DEEA0(v2864);
    swift_retain();
    sub_36C5C();
    sub_41D48();
    sub_DE5EC();
    sub_DE720(v2866);
    sub_732B8();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v2860, v2854))
    {
      uint64_t v99 = *(void *)(v12 + 27392);
      uint64_t v100 = (uint8_t *)sub_A5E8(52LL);
      uint64_t v101 = sub_A5E8(160LL);
      uint64_t v2900 = 0LL;
      v2901[0] = v101;
      *(_WORD *)uint64_t v100 = 1282;
      v2898 = sub_DBD84;
      uint64_t v2899 = v84;
      sub_DD43C();
      if (v99) {
        return sub_DDEE0(v99);
      }
      sub_36EBC();
      sub_DD43C();
      swift_release();
      sub_DD43C();
      swift_release();
      sub_DD43C();
      swift_release();
      sub_DD43C();
      swift_release();
      sub_DD43C();
      swift_release();
      sub_DD43C();
      sub_DEC58();
      sub_DD43C();
      swift_release();
      sub_DD43C();
      sub_A37E4();
      sub_DD43C();
      swift_release();
      sub_DD43C();
      swift_release();
      sub_DD43C();
      swift_release();
      sub_DD43C();
      swift_release();
      sub_DD43C();
      swift_release();
      v2898 = sub_DBD7C;
      uint64_t v2899 = v95;
      sub_DD43C();
      sub_36BE0();
      _os_log_impl( &dword_0,  v2860,  v2854,  "Entering .nameSelected case with value (scheduleID: %s), (medicationID: %s), strength (%s), strengthUnit (%s), c onfirmationStatus (%s",  v100,  0x34u);
      swift_arrayDestroy(v101, 5LL);
      sub_5050(v101);
      sub_37128();

      sub_DE864();
      uint64_t v102 = 0LL;
    }

    else
    {
      uint64_t v2855 = *(void *)(v12 + 27088);
      uint64_t v2851 = *(void *)(v12 + 26744);
      uint64_t v2852 = *(void *)(v12 + 26736);

      sub_36BE0();
      sub_37034();
      sub_DE5E4();
      sub_39BAC();
      sub_37110();
      sub_3652C();
      sub_36EBC();
      sub_367AC();
      sub_DEC58();
      swift_release();
      sub_A37E4();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v95 = *(void *)(v2851 + 8);
      ((void (*)(uint64_t, uint64_t))v95)(v2855, v2852);
      uint64_t v102 = *(void *)(v12 + 27392);
    }

    *(void *)(v12 + 2788_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v95;
    *(void *)(v12 + 27880) = v102;
    sub_DECFC();
    v647 = (void *)sub_DEE48();
    *(void *)(v12 + 2789sub_D878(v0 + 6) = v647;
    *(void *)(v12 + 2790sub_D878(v0 + 4) = sub_DEE34();
    uint64_t v648 = sub_372CC();
    getMedStatus(from:)(v648, v649, v650, v651, v652, v653);
    char v655 = v654;
    sub_367AC();
    id v656 = sub_BF9A0(v655 & 1);
    sub_DDA14((uint64_t)v656, "setMedStatus:");

    if (v2869)
    {
      NSString v657 = String._bridgeToObjectiveC()();
      v658 = v657;
    }

    else
    {
      v658 = 0LL;
    }

    sub_DDA14((uint64_t)v657, "setScheduleID:");

    sub_DA6D8(v647, (SEL *)&selRef_scheduleID);
    uint64_t v676 = v675;
    swift_bridgeObjectRelease();
    if (!v676)
    {
      Class isa = sub_DE758().super.super.isa;
      sub_DDA14((uint64_t)isa, "setLogAsNeeded:");
    }

    if (v2884 == 3)
    {
      Class v697 = sub_DE758().super.super.isa;
      sub_DDA14((uint64_t)v697, "setConfirmedAsScheduled:");

      Class v698 = sub_DE3D4().super.super.isa;
      sub_DDA14((uint64_t)v698, "setConfirmedAsNeeded:");

      v701.super.super.Class isa = (Class)sub_BF9A0(0);
      Class v702 = v701.super.super.isa;
      v703 = &selRef_setMedStatus_;
    }

    else if (v2884 == 2)
    {
      Class v699 = sub_DE758().super.super.isa;
      sub_DDA14((uint64_t)v699, "setConfirmedAsScheduled:");

      v701.super.super.Class isa = sub_DE3D4().super.super.isa;
      Class v702 = v701.super.super.isa;
      v703 = &selRef_setConfirmedAsNeeded_;
    }

    else
    {
      Class v700 = NSNumber.init(BOOLeanLiteral:)(v2884 == 1).super.super.isa;
      sub_DDA14((uint64_t)v700, "setConfirmedAsNeeded:");

      v701.super.super.Class isa = sub_DE3D4().super.super.isa;
      Class v702 = v701.super.super.isa;
      v703 = &selRef_setConfirmedAsScheduled_;
    }

    uint64_t v704 = *(void *)(v12 + 25976);
    sub_DDA14((uint64_t)v701.super.super.isa, *v703);

    uint64_t v705 = sub_494C(&qword_18AF58);
    uint64_t v706 = sub_20308(v705, 48LL);
    uint64_t v707 = sub_58F78(v706, 1LL);
    uint64_t *v708 = v2871;
    v708[1] = v28;
    swift_bridgeObjectRetain(v28);
    uint64_t v709 = PhoneRingsSnippet.body.getter(v707);
    sub_DA5A0(v709, v647);
    sub_36878(v704 + 400);
    uint64_t v710 = *(void *)(v12 + 18840);
    sub_500C((void *)(v12 + 18808), *(void *)(v12 + 18832));
    v711 = (void *)swift_task_alloc(*(unsigned int *)(*(void *)(v710 + 8) + 4LL));
    *(void *)(v12 + 2791sub_D878(v0 + 2) = v711;
    sub_BB018(v711, (uint64_t)sub_C9B44);
    sub_371E0();
    return v716(v712, v713, v714, v715, v716, v717, v718, v719, a9, a10, a11, a12);
  }

  if (v34 == 1)
  {
    uint64_t v103 = v26;
    v2875 = *(void (**)(void))(v12 + 27384);
    uint64_t v104 = v25;
    unsigned __int8 v2885 = v33;
    uint64_t v2891 = v30;
    swift_beginAccess(*(void *)(v12 + 27376), v12 + 24368, 0LL, 0LL);
    uint64_t v105 = sub_DEDA4();
    v2875(v105);
    uint64_t v106 = sub_20308((uint64_t)&unk_17F920, 41LL);
    sub_DE854(v106);
    uint64_t v107 = sub_20308((uint64_t)&unk_17F948, 41LL);
    sub_DE854(v107);
    uint64_t v2876 = sub_20308((uint64_t)&unk_17F970, 41LL);
    sub_DE854(v2876);
    sub_DE548(v27);
    sub_DE548(v103);
    uint64_t v2862 = v104;
    char v2895 = v28;
    sub_DDFF0(v104, v103, v27, v28, v29, v2891, v108, v109, v2885);
    uint64_t v2870 = v103;
    swift_bridgeObjectRetain(v103);
    v2872 = (objc_class *)v27;
    uint64_t v110 = swift_bridgeObjectRetain(v27);
    v2886 = (os_log_s *)Logger.logObject.getter(v110);
    os_log_type_t v2879 = static os_log_type_t.debug.getter();
    uint64_t v2892 = sub_20308((uint64_t)&unk_17F998, 17LL);
    *(_BYTE *)(v2892 + 1sub_D878(v0 + 6) = 32;
    uint64_t v111 = sub_20308((uint64_t)&unk_17F9C0, 17LL);
    *(_BYTE *)(v111 + 1sub_D878(v0 + 6) = 8;
    uint64_t v112 = sub_20308((uint64_t)&unk_17F9E8, 32LL);
    *(void *)(v112 + 1sub_D878(v0 + 6) = sub_DA7F8;
    *(void *)(v112 + 2sub_D878(v0 + 4) = v106;
    uint64_t v113 = sub_20308((uint64_t)&unk_17FA10, 32LL);
    *(void *)(v113 + 1sub_D878(v0 + 6) = sub_DA89C;
    *(void *)(v113 + 2sub_D878(v0 + 4) = v112;
    uint64_t v114 = sub_20308((uint64_t)&unk_17FA38, 17LL);
    *(_BYTE *)(v114 + 1sub_D878(v0 + 6) = 32;
    uint64_t v115 = sub_20308((uint64_t)&unk_17FA60, 17LL);
    *(_BYTE *)(v115 + 1sub_D878(v0 + 6) = 8;
    uint64_t v116 = sub_20308((uint64_t)&unk_17FA88, 32LL);
    *(void *)(v116 + 1sub_D878(v0 + 6) = sub_DA820;
    *(void *)(v116 + 2sub_D878(v0 + 4) = v107;
    uint64_t v117 = sub_20308((uint64_t)&unk_17FAB0, 32LL);
    *(void *)(v117 + 1sub_D878(v0 + 6) = sub_DBD74;
    *(void *)(v117 + 2sub_D878(v0 + 4) = v116;
    uint64_t v118 = sub_20308((uint64_t)&unk_17FAD8, 17LL);
    *(_BYTE *)(v118 + 1sub_D878(v0 + 6) = 32;
    uint64_t v119 = sub_20308((uint64_t)&unk_17FB00, 17LL);
    *(_BYTE *)(v119 + 1sub_D878(v0 + 6) = 8;
    uint64_t v120 = sub_20308((uint64_t)&unk_17FB28, 32LL);
    *(void *)(v120 + 1sub_D878(v0 + 6) = sub_DA85C;
    *(void *)(v120 + 2sub_D878(v0 + 4) = v2876;
    uint64_t v121 = sub_20308((uint64_t)&unk_17FB50, 32LL);
    *(void *)(v121 + 1sub_D878(v0 + 6) = sub_DBD74;
    *(void *)(v121 + 2sub_D878(v0 + 4) = v120;
    uint64_t v122 = sub_494C(&qword_18E9E8);
    *(void *)(v12 + 27600) = v122;
    uint64_t v123 = sub_20308(v122, 176LL);
    sub_58F80(v123, 9LL);
    *uint64_t v124 = sub_DA890;
    v124[1] = v2892;
    v124[2] = sub_DBD84;
    void v124[3] = v111;
    v124[4] = sub_DA8A4;
    v124[5] = v113;
    v124[6] = sub_DBD84;
    v124[7] = v114;
    v124[8] = sub_DBD84;
    v124[9] = v115;
    v124[10] = sub_DBD7C;
    v124[11] = v117;
    v124[12] = sub_DBD84;
    v124[13] = v118;
    v124[14] = sub_DBD84;
    v124[15] = v119;
    v124[16] = sub_DBD7C;
    v124[17] = v121;
    swift_retain();
    sub_DE5EC();
    sub_DEA04();
    swift_retain();
    sub_732B8();
    sub_41D48();
    sub_72C38();
    sub_4195C();
    sub_36C5C();
    sub_6D64();
    if (os_log_type_enabled(v2886, v2879))
    {
      uint64_t v99 = *(void *)(v12 + 27392);
      uint64_t v125 = (uint8_t *)sub_A5E8(32LL);
      uint64_t v2900 = 0LL;
      v2901[0] = sub_A5E8(96LL);
      uint64_t v2861 = v2901[0];
      *(_WORD *)uint64_t v125 = 770;
      v2898 = (uint64_t (*)())sub_DA890;
      uint64_t v2899 = v2892;
      sub_DD43C();
      if (v99) {
        return sub_DDEE0(v99);
      }
      sub_37034();
      sub_DD43C();
      sub_36BE0();
      sub_DD43C();
      sub_DE5E4();
      sub_DD43C();
      sub_A37E4();
      sub_DD43C();
      sub_3652C();
      sub_DD43C();
      sub_39BAC();
      sub_DD43C();
      swift_release();
      sub_DD43C();
      swift_release();
      v2898 = sub_DBD7C;
      uint64_t v2899 = v121;
      sub_DD43C();
      sub_37110();
      uint64_t v126 = v2886;
      _os_log_impl( &dword_0,  v2886,  v2879,  "Entering .scheduleSelected case with value (scheduleID: %s), potentially medicationIDs: (%s), confirmationStatus: (%s)",  v125,  0x20u);
      swift_arrayDestroy(v2861, 3LL);
      sub_5050(v2861);
      sub_5050((uint64_t)v125);

      sub_DE864();
      uint64_t v127 = 0LL;
    }

    else
    {
      v2881 = *(uint8_t **)(v12 + 26928);
      uint64_t v659 = *(void *)(v12 + 26744);
      uint64_t v2868 = *(void *)(v12 + 26736);

      sub_37110();
      sub_37034();
      sub_36EBC();
      sub_39BAC();
      sub_3652C();
      sub_A37E4();
      sub_DE5E4();
      swift_release();
      sub_DEC58();
      uint64_t v126 = *(os_log_s **)(v659 + 8);
      ((void (*)(uint8_t *, uint64_t))v126)(v2881, v2868);
      uint64_t v127 = *(void *)(v12 + 27392);
    }

    *(void *)(v12 + 2811sub_D878(v0 + 2) = v126;
    *(void *)(v12 + 2810sub_D878(v0 + 4) = v127;
    sub_DECFC();
    v660 = (void *)sub_DEE48();
    *(void *)(v12 + 28120) = v660;
    sub_DEE34();
    uint64_t v661 = sub_372CC();
    getMedStatus(from:)(v661, v662, v663, v664, v665, v666);
    char v668 = v667;
    sub_367AC();
    id v669 = sub_BF9A0(v668 & 1);
    sub_DDA14((uint64_t)v669, "setMedStatus:");

    sub_DA55C(v2862, v2870, v660);
    Class v670 = v2872;
    if (v2872)
    {
      Class v670 = Array._bridgeToObjectiveC()().super.isa;
      Class v671 = v670;
    }

    else
    {
      Class v671 = 0LL;
    }

    sub_DDA14((uint64_t)v670, "setMedicationIDs:");

    if (v2895 != 3)
    {
      if (v2895 == 5)
      {
        Swift::Bool v693 = 1;
      }

      else
      {
        if (v2895 == 4)
        {
          Class v672 = sub_DE758().super.super.isa;
          sub_DDA14((uint64_t)v672, "setConfirmedAsScheduled:");

          Class v673 = sub_DE3D4().super.super.isa;
          sub_DDA14((uint64_t)v673, "setConfirmedAsNeeded:");

          char v674 = 1;
LABEL_54:
          v691 = sub_BF9A0(v674);
          v692 = &selRef_setMedStatus_;
LABEL_58:
          uint64_t v695 = *(void *)(v12 + 25976);
          sub_36F44(v660, *v692);

          uint64_t v696 = *(void *)(v695 + 352);
          *(void *)(v12 + 2812_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v696;
          *(void *)(v12 + 120) = v12 + 25888;
          *(void *)(v12 + 80) = v12;
          *(void *)(v12 + 8_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = sub_CEB68;
          *(void *)(v12 + 22280) = sub_DEE88();
          *(void *)(v12 + 2224_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = _NSConcreteStackBlock;
          *(void *)(v12 + 222sub_D7EC(v0 + 16, v0 + 56) = 0x40000000LL;
          *(void *)(v12 + 2226sub_D878(v0 + 4) = sub_22BB4;
          *(void *)(v12 + 2227sub_D878(v0 + 2) = &unk_17FB68;
          [(id)swift_unknownObjectRetain(v696) handleLogSpecificMedications:v660 completion:v12 + 22248];
          return sub_DDF18();
        }

        Swift::Bool v693 = 0;
      }

      Class v694 = NSNumber.init(BOOLeanLiteral:)(v693).super.super.isa;
      sub_DDA14((uint64_t)v694, "setConfirmedAsScheduled:");

      v691 = sub_DE3D4().super.super.isa;
      v692 = &selRef_setConfirmedAsNeeded_;
      goto LABEL_58;
    }

    Class v689 = sub_DE758().super.super.isa;
    sub_DDA14((uint64_t)v689, "setConfirmedAsScheduled:");

    Class v690 = sub_DE3D4().super.super.isa;
    sub_DDA14((uint64_t)v690, "setConfirmedAsNeeded:");

    char v674 = 0;
    goto LABEL_54;
  }

  if (v34 != 3) {
    goto LABEL_28;
  }
  uint64_t v35 = v29 | v30 | v31;
  if (!(v27 | v26 | v25 | v28 | v35 | v32) && v33 == 192)
  {
    type metadata accessor for LogSpecificMedicationsIntent(0LL);
    uint64_t v36 = (void *)sub_DEE48();
    *(void *)(v12 + 2760_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v36;
    sub_DEE34();
    uint64_t v37 = sub_363E8();
    getMedStatus(from:)(v37, v38, v39, v40, v41, v42);
    char v44 = v43;
    sub_3652C();
    id v45 = sub_BF9A0(v44 & 1);
    sub_DE010((uint64_t)v45, "setMedStatus:");

    uint64_t v46 = sub_363E8();
    getUSOMedNames(from:)(v46, v47, v48, v49, v50, v51);
    uint64_t v53 = v52;
    uint64_t v54 = sub_3652C();
    if (v53)
    {
      v55.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      uint64_t v54 = sub_6D64();
    }

    else
    {
      v55.super.Class isa = 0LL;
    }

    uint64_t v678 = v12 + 24128;
    uint64_t v679 = *(void *)(v12 + 27408);
    uint64_t v680 = *(void *)(v12 + 26704);
    sub_DE010(v54, "setMedicationIDs:");

    uint64_t v681 = sub_37104();
    sub_DABC0(v681, v682, v683);
    sub_A614(v680, 1LL, v679);
    v2894 = v36;
    if (v128)
    {
      uint64_t v684 = *(void *)(v12 + 26440);
      sub_279E0(*(void *)(v12 + 26704), &qword_18B168);
      sub_9A688(v684, 1LL);
    }

    else
    {
      uint64_t v685 = *(void *)(v12 + 26704);
      uint64_t v686 = *(void *)(v12 + 26440);
      uint64_t v687 = *(void *)(v12 + 26360);
      sub_DECF4(v685 + *(int *)(*(void *)(v12 + 27408) + 48LL));
      sub_DADFC(v685, v686, &qword_18D4A0);
      sub_A614(v686, 1LL, v687);
      if (!v688)
      {
        uint64_t v727 = *(void *)(v12 + 26376);
        uint64_t v728 = *(void *)(v12 + 26368);
        uint64_t v729 = *(void *)(v12 + 26360);
        uint64_t v730 = *(void *)(v12 + 25992);
        uint64_t v731 = *(int *)(v729 + 48);
        uint64_t v732 = v727 + v731;
        uint64_t v733 = *(void *)(v12 + 26440) + v731;
        v734 = *(void (**)(void))(*(void *)(v12 + 26000) + 32LL);
        v734(v727);
        ((void (*)(uint64_t, uint64_t, uint64_t))v734)(v732, v733, v730);
        uint64_t v735 = v728 + *(int *)(v729 + 48);
        sub_DE8E8(v728, v727);
        sub_DE8E8(v735, v732);
        Class v736 = Date._bridgeToObjectiveC()().super.isa;
        uint64_t v737 = v735;
        uint64_t v36 = v2894;
        sub_DE9D4(v737);
        uint64_t v738 = sub_DE9D4(v728);
        sub_DE010(v738, "setStartTime:");

        uint64_t v739 = v728 + *(int *)(v729 + 48);
        sub_DE8E8(v728, v727);
        sub_DE8E8(v739, v732);
        Class v740 = Date._bridgeToObjectiveC()().super.isa;
        sub_DE9D4(v739);
        sub_DE9D4(v728);
        uint64_t v678 = v12 + 24128;
        [v2894 setEndTime:v740];

        v741 = &qword_18B138;
        uint64_t v742 = v727;
LABEL_64:
        sub_279E0(v742, v741);
        uint64_t v743 = *(void *)(v12 + 27408);
        uint64_t v744 = *(void *)(v12 + 26696);
        sub_DED74(*(void *)(v12 + 26728), v745, &qword_18B168);
        sub_A614(v744, 1LL, v743);
        if (v128)
        {
          sub_279E0(*(void *)(v12 + 26696), &qword_18B168);
          char v748 = 0;
        }

        else
        {
          uint64_t v746 = *(void *)(v12 + 27408);
          uint64_t v747 = *(void *)(v12 + 26696);
          sub_DECF4(v747 + *(int *)(v746 + 48));
          char v748 = *(_BYTE *)(v747 + *(int *)(v746 + 64));
          sub_279E0(v747, &qword_18D4A0);
        }

        v749 = *(void (**)(void, void, void))(v12 + 27384);
        uint64_t v750 = *(void *)(v12 + 27376);
        uint64_t v751 = *(void *)(v12 + 27360);
        uint64_t v752 = *(void *)(v12 + 26736);
        id v753 = sub_BF9A0(v748);
        sub_DE010((uint64_t)v753, "setHasMeridiem:");

        sub_A5DC(v750, v678);
        v749(v751, v750, v752);
        v754 = (os_log_s *)sub_37018();
        os_log_type_t v755 = static os_log_type_t.debug.getter();
        BOOL v756 = os_log_type_enabled(v754, v755);
        v757 = *(void (**)(void))(v12 + 27400);
        if (v756)
        {
          uint64_t v758 = *(void *)(v12 + 27392);
          v759 = (uint8_t *)sub_3635C();
          sub_DE0A4(v759);
          sub_D9904((uint64_t)_swiftEmptyArrayStorage, (uint64_t)&v2900, (uint64_t)v2901, (uint64_t)&v2898);
          uint64_t v2897 = v758;
          uint64_t v36 = v2894;
          swift_bridgeObjectRelease();
          sub_232EC(&dword_0, v754, v755, "Specific med request: checking for dosage and dosageUnit in task", v759);
          sub_DDDAC();

          sub_DDE14();
        }

        else
        {

          swift_bridgeObjectRelease();
          uint64_t v760 = sub_7DFE8();
          v757(v760);
          uint64_t v2897 = *(void *)(v12 + 27392);
        }

        uint64_t v761 = sub_72C38();
        uint64_t v767 = getMedDosageValue(from:)(v761, v762, v763, v764, v765, v766);
        LOBYTE(v769) = v768;
        sub_36EBC();
        if ((v769 & 1) == 0)
        {
          uint64_t v770 = *(void *)(v12 + 27376);
          id v771 = sub_D69A8(*(double *)&v767);
          sub_DE010((uint64_t)v771, "setDosage:");
          sub_A5DC(v770, v12 + 23816);
          sub_DE318();
          uint64_t v772 = sub_20308((uint64_t)&unk_1804D0, 24LL);
          *(void *)(v772 + 1sub_D878(v0 + 6) = v771;
          v773 = (os_log_s *)v771;
          sub_DDE60();
          os_log_type_t v774 = sub_AB70();
          uint64_t v775 = sub_20308((uint64_t)&unk_1804F8, 17LL);
          *(_BYTE *)(v775 + 1sub_D878(v0 + 6) = 64;
          uint64_t v776 = sub_20308((uint64_t)&unk_180520, 17LL);
          sub_DE91C(v776);
          uint64_t v777 = sub_20308((uint64_t)&unk_180548, 32LL);
          *(void *)(v777 + 1sub_D878(v0 + 6) = sub_DBDF8;
          *(void *)(v777 + 2sub_D878(v0 + 4) = v772;
          uint64_t v769 = sub_20308((uint64_t)&unk_180570, 32LL);
          *(void *)(v769 + 1sub_D878(v0 + 6) = sub_DBD78;
          *(void *)(v769 + 2sub_D878(v0 + 4) = v777;
          uint64_t v778 = sub_494C(&qword_18E9E8);
          uint64_t v779 = sub_20308(v778, 80LL);
          sub_DE4D8(v779);
          void *v780 = sub_DBD84;
          v780[1] = v775;
          v780[2] = sub_DBD84;
          v780[3] = v776;
          v780[4] = sub_DBD80;
          v780[5] = v769;
          sub_DEA04();
          sub_41D48();
          sub_36C5C();
          uint64_t v781 = sub_1EBF4();
          if (sub_DE7E0(v781, v774))
          {
            v2887 = v773;
            v782 = (uint8_t *)sub_DE58C();
            uint64_t v783 = sub_A5E8(8LL);
            uint64_t v2900 = v783;
            v2901[0] = 0LL;
            v2882 = v782;
            *(_WORD *)v782 = 258;
            uint64_t v99 = (uint64_t)(v782 + 2);
            v2898 = sub_DBD84;
            uint64_t v2899 = v775;
            sub_DE35C();
            if (v99) {
              return sub_DDEE0(v99);
            }
            sub_A37E4();
            v2898 = sub_DBD84;
            uint64_t v2899 = v776;
            sub_DD43C();
            sub_39BAC();
            v2898 = (uint64_t (*)())sub_DBD80;
            uint64_t v2899 = v769;
            sub_DD43C();
            v784 = *(void (**)(void))(v12 + 27400);
            sub_37110();
            sub_DA24(&dword_0, (os_log_s *)v771, v774, "Specific med request: parsed dosage (%@) in task", v2882);
            sub_494C(&qword_189CB8);
            sub_A81C(v783);
            sub_5050(v783);
            sub_5050((uint64_t)v2882);

            uint64_t v785 = sub_DEB1C();
            v784(v785);
            uint64_t v2897 = 0LL;
          }

          else
          {
            sub_DEDC0();
            sub_37110();
            sub_39BAC();
            sub_A37E4();

            sub_DEE94();
          }

          uint64_t v36 = v2894;
        }

        uint64_t v786 = sub_72C38();
        getMedDosageUnit(from:)(v786, v787, v788, v789, v790, v791);
        v793 = v792;
        uint64_t v795 = v794;
        sub_36EBC();
        if (!v795)
        {
LABEL_83:
          v810 = *(void (**)(void))(v12 + 27384);
          v811 = *(os_log_s **)(v12 + 27376);
          sub_A5DC((uint64_t)v811, v12 + 24104);
          uint64_t v812 = sub_DEBE8();
          v810(v812);
          sub_AB5C();
          os_log_type_t v813 = sub_AB70();
          if (sub_561AC(v813))
          {
            v814 = (uint8_t *)sub_3635C();
            sub_DE0A4(v814);
            sub_D9904((uint64_t)_swiftEmptyArrayStorage, (uint64_t)&v2900, (uint64_t)v2901, (uint64_t)&v2898);
            sub_B25F0();
            sub_232EC( &dword_0,  v811,  (os_log_type_t)v769,  "Specific med request is being sent to intent handler for handling.",  v814);
            sub_DE328();
          }

          else
          {

            swift_bridgeObjectRelease();
          }

          sub_DEE94();
          *(void *)(v12 + 2761sub_D878(v0 + 6) = v2897;
          uint64_t v815 = *(void *)(*(void *)(v12 + 25976) + 352LL);
          *(void *)(v12 + 2762sub_D878(v0 + 4) = v815;
          *(void *)(v12 + 18sub_D878(v0 + 4) = v12 + 25936;
          *(void *)(v12 + 14sub_D878(v0 + 4) = v12;
          *(void *)(v12 + 15sub_D878(v0 + 2) = sub_C2F6C;
          *(void *)(v12 + 22400) = sub_DEE88();
          *(void *)(v12 + 2236_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = _NSConcreteStackBlock;
          *(void *)(v12 + 2237sub_D878(v0 + 6) = 0x40000000LL;
          *(void *)(v12 + 2238sub_D878(v0 + 4) = sub_22BB4;
          *(void *)(v12 + 2239sub_D878(v0 + 2) = &unk_180318;
          [(id)swift_unknownObjectRetain(v815) handleLogSpecificMedications:v36 completion:v12 + 22368];
          return sub_DDF18();
        }

        uint64_t v796 = *(void *)(v12 + 27376);
        sub_DA63C((uint64_t)v793, v795, v36);
        sub_A5DC(v796, v12 + 23912);
        sub_DE318();
        uint64_t v797 = sub_20308((uint64_t)&unk_180408, 32LL);
        *(void *)(v797 + 1sub_D878(v0 + 6) = v793;
        *(void *)(v797 + 2sub_D878(v0 + 4) = v795;
        sub_DDE60();
        os_log_type_t v798 = sub_AB70();
        uint64_t v799 = sub_20308((uint64_t)&unk_180430, 17LL);
        *(_BYTE *)(v799 + 1sub_D878(v0 + 6) = 32;
        uint64_t v769 = sub_20308((uint64_t)&unk_180458, 17LL);
        sub_DE91C(v769);
        uint64_t v800 = sub_20308((uint64_t)&unk_180480, 32LL);
        *(void *)(v800 + 1sub_D878(v0 + 6) = sub_DBE34;
        *(void *)(v800 + 2sub_D878(v0 + 4) = v797;
        uint64_t v801 = sub_20308((uint64_t)&unk_1804A8, 32LL);
        *(void *)(v801 + 1sub_D878(v0 + 6) = sub_DBD74;
        *(void *)(v801 + 2sub_D878(v0 + 4) = v800;
        uint64_t v802 = sub_494C(&qword_18E9E8);
        uint64_t v803 = sub_20308(v802, 80LL);
        sub_DE4D8(v803);
        void *v804 = sub_DBD84;
        v804[1] = v799;
        v804[2] = sub_DBD84;
        v804[3] = v769;
        v804[4] = sub_DBD7C;
        v804[5] = v801;
        sub_41D48();
        sub_36C5C();
        sub_72C38();
        uint64_t v805 = sub_B25F0();
        if (!sub_DE7E0(v805, v798))
        {
          v808 = *(void (**)(void))(v12 + 27400);

          sub_36EBC();
          sub_37110();
          sub_39BAC();
          uint64_t v809 = sub_DEBDC();
          v808(v809);
          goto LABEL_82;
        }

        v806 = (uint8_t *)sub_DE58C();
        uint64_t v807 = sub_A5E8(32LL);
        uint64_t v2900 = 0LL;
        v2901[0] = v807;
        v2888 = v806;
        *(_WORD *)v806 = 258;
        uint64_t v99 = (uint64_t)(v806 + 2);
        v2898 = sub_DBD84;
        uint64_t v2899 = v799;
        sub_DE35C();
        if (!v99)
        {
          sub_39BAC();
          v2898 = sub_DBD84;
          uint64_t v2899 = v769;
          sub_DD43C();
          sub_37110();
          v2898 = sub_DBD7C;
          uint64_t v2899 = v801;
          sub_DD43C();
          uint64_t v816 = *(void *)(v12 + 27344);
          uint64_t v769 = *(void *)(v12 + 26736);
          sub_36EBC();
          sub_DA24(&dword_0, (os_log_s *)v793, v798, "Specific med request: parsed dosageUnit (%s) in task", v2888);
          sub_A81C(v807);
          sub_5050(v807);
          sub_5050((uint64_t)v2888);

          sub_DE330(v816);
          uint64_t v2897 = 0LL;
LABEL_82:
          uint64_t v36 = v2894;
          goto LABEL_83;
        }

        return sub_DDEE0(v99);
      }
    }

    uint64_t v742 = *(void *)(v12 + 26440);
    v741 = &qword_18D4A0;
    goto LABEL_64;
  }

  BOOL v128 = v33 == 192 && v25 == 7;
  if (!v128 || v28 | v27 | v26 | v35 | v32)
  {
LABEL_28:
    uint64_t v135 = v28;
    uint64_t v2893 = *(void *)(v12 + 26728);
    uint64_t v2896 = v28;
    uint64_t v2880 = *(void *)(v12 + 26432);
    uint64_t v2867 = *(void *)(v12 + 25976);
    uint64_t v136 = v25;
    uint64_t v137 = v26;
    uint64_t v138 = v30;
    unsigned __int8 v139 = v33;
    sub_D94E8(v25, v26, v27, v135, v29, v30, v31, v32, v33);
    sub_369F4();
    sub_DE894();
    sub_DE7D8();
    swift_bridgeObjectRelease();
    sub_3561C(v136, v137, v27, v2896, v29, v138, v31, v32, v139);
    sub_36590((_OWORD *)(v2867 + 64));
    sub_DE348((void *)(v12 + 3008));
    sub_A178();
    sub_36C08();
    sub_36DD8();
    sub_26F04(v2880, type metadata accessor for SnippetHeaderModel);
    sub_37450(v140, &qword_189D00);
    sub_279E0(v2893, &qword_18B168);
    sub_DCBA8();
    sub_A8F4();
    sub_A85C();
    sub_A864();
    sub_A910();
    sub_A8EC();
    sub_A760();
    sub_A7C8();
    sub_A67C();
    uint64_t v141 = sub_A78C();
    uint64_t v149 = sub_AAD8(v141, v142, v143, v144, v145, v146, v147, v148, v817, v880);
    uint64_t v157 = sub_A888(v149, v150, v151, v152, v153, v154, v155, v156, v818, v881, v943);
    uint64_t v165 = sub_A854(v157, v158, v159, v160, v161, v162, v163, v164, v819, v882, v944, v1005);
    uint64_t v173 = sub_A84C(v165, v166, v167, v168, v169, v170, v171, v172, v820, v883, v945, v1006, v1066);
    uint64_t v181 = sub_A844(v173, v174, v175, v176, v177, v178, v179, v180, v821, v884, v946, v1007, v1067, v1126);
    uint64_t v189 = sub_A83C(v181, v182, v183, v184, v185, v186, v187, v188, v822, v885, v947, v1008, v1068, v1127, v1185);
    uint64_t v197 = sub_A95C(v189, v190, v191, v192, v193, v194, v195, v196, v823, v886, v948, v1009, v1069, v1128, v1186, v1243);
    uint64_t v205 = sub_A954( v197,  v198,  v199,  v200,  v201,  v202,  v203,  v204,  v824,  v887,  v949,  v1010,  v1070,  v1129,  v1187,  v1244,  v1300);
    uint64_t v213 = sub_A938( v205,  v206,  v207,  v208,  v209,  v210,  v211,  v212,  v825,  v888,  v950,  v1011,  v1071,  v1130,  v1188,  v1245,  v1301,  v1356);
    uint64_t v221 = sub_A930( v213,  v214,  v215,  v216,  v217,  v218,  v219,  v220,  v826,  v889,  v951,  v1012,  v1072,  v1131,  v1189,  v1246,  v1302,  v1357,  v1411);
    uint64_t v229 = sub_A928( v221,  v222,  v223,  v224,  v225,  v226,  v227,  v228,  v827,  v890,  v952,  v1013,  v1073,  v1132,  v1190,  v1247,  v1303,  v1358,  v1412,  v1465);
    uint64_t v237 = sub_A920( v229,  v230,  v231,  v232,  v233,  v234,  v235,  v236,  v828,  v891,  v953,  v1014,  v1074,  v1133,  v1191,  v1248,  v1304,  v1359,  v1413,  v1466,  v1518);
    uint64_t v245 = sub_36374( v237,  v238,  v239,  v240,  v241,  v242,  v243,  v244,  v829,  v892,  v954,  v1015,  v1075,  v1134,  v1192,  v1249,  v1305,  v1360,  v1414,  v1467,  v1519,  v1570);
    uint64_t v253 = sub_3636C( v245,  v246,  v247,  v248,  v249,  v250,  v251,  v252,  v830,  v893,  v955,  v1016,  v1076,  v1135,  v1193,  v1250,  v1306,  v1361,  v1415,  v1468,  v1520,  v1571,  v1621);
    uint64_t v261 = sub_36364( v253,  v254,  v255,  v256,  v257,  v258,  v259,  v260,  v831,  v894,  v956,  v1017,  v1077,  v1136,  v1194,  v1251,  v1307,  v1362,  v1416,  v1469,  v1521,  v1572,  v1622,  v1671);
    uint64_t v269 = sub_363F0( v261,  v262,  v263,  v264,  v265,  v266,  v267,  v268,  v832,  v895,  v957,  v1018,  v1078,  v1137,  v1195,  v1252,  v1308,  v1363,  v1417,  v1470,  v1522,  v1573,  v1623,  v1672,  v1720);
    uint64_t v277 = sub_36430( v269,  v270,  v271,  v272,  v273,  v274,  v275,  v276,  v833,  v896,  v958,  v1019,  v1079,  v1138,  v1196,  v1253,  v1309,  v1364,  v1418,  v1471,  v1523,  v1574,  v1624,  v1673,  v1721,  v1768);
    uint64_t v285 = sub_36428( v277,  v278,  v279,  v280,  v281,  v282,  v283,  v284,  v834,  v897,  v959,  v1020,  v1080,  v1139,  v1197,  v1254,  v1310,  v1365,  v1419,  v1472,  v1524,  v1575,  v1625,  v1674,  v1722,  v1769,  v1815);
    uint64_t v293 = sub_36478( v285,  v286,  v287,  v288,  v289,  v290,  v291,  v292,  v835,  v898,  v960,  v1021,  v1081,  v1140,  v1198,  v1255,  v1311,  v1366,  v1420,  v1473,  v1525,  v1576,  v1626,  v1675,  v1723,  v1770,  v1816,  v1861);
    uint64_t v301 = sub_36524( v293,  v294,  v295,  v296,  v297,  v298,  v299,  v300,  v836,  v899,  v961,  v1022,  v1082,  v1141,  v1199,  v1256,  v1312,  v1367,  v1421,  v1474,  v1526,  v1577,  v1627,  v1676,  v1724,  v1771,  v1817,  v1862,  v1906);
    uint64_t v309 = sub_3651C( v301,  v302,  v303,  v304,  v305,  v306,  v307,  v308,  v837,  v900,  v962,  v1023,  v1083,  v1142,  v1200,  v1257,  v1313,  v1368,  v1422,  v1475,  v1527,  v1578,  v1628,  v1677,  v1725,  v1772,  v1818,  v1863,  v1907,  v1950);
    uint64_t v317 = sub_36514( v309,  v310,  v311,  v312,  v313,  v314,  v315,  v316,  v838,  v901,  v963,  v1024,  v1084,  v1143,  v1201,  v1258,  v1314,  v1369,  v1423,  v1476,  v1528,  v1579,  v1629,  v1678,  v1726,  v1773,  v1819,  v1864,  v1908,  v1951,  v1993);
    uint64_t v325 = sub_3650C( v317,  v318,  v319,  v320,  v321,  v322,  v323,  v324,  v839,  v902,  v964,  v1025,  v1085,  v1144,  v1202,  v1259,  v1315,  v1370,  v1424,  v1477,  v1529,  v1580,  v1630,  v1679,  v1727,  v1774,  v1820,  v1865,  v1909,  v1952,  v1994,  v2035);
    uint64_t v333 = sub_36504( v325,  v326,  v327,  v328,  v329,  v330,  v331,  v332,  v840,  v903,  v965,  v1026,  v1086,  v1145,  v1203,  v1260,  v1316,  v1371,  v1425,  v1478,  v1530,  v1581,  v1631,  v1680,  v1728,  v1775,  v1821,  v1866,  v1910,  v1953,  v1995,  v2036,  v2076);
    uint64_t v341 = sub_364FC( v333,  v334,  v335,  v336,  v337,  v338,  v339,  v340,  v841,  v904,  v966,  v1027,  v1087,  v1146,  v1204,  v1261,  v1317,  v1372,  v1426,  v1479,  v1531,  v1582,  v1632,  v1681,  v1729,  v1776,  v1822,  v1867,  v1911,  v1954,  v1996,  v2037,  v2077,  v2116);
    uint64_t v349 = sub_364F4( v341,  v342,  v343,  v344,  v345,  v346,  v347,  v348,  v842,  v905,  v967,  v1028,  v1088,  v1147,  v1205,  v1262,  v1318,  v1373,  v1427,  v1480,  v1532,  v1583,  v1633,  v1682,  v1730,  v1777,  v1823,  v1868,  v1912,  v1955,  v1997,  v2038,  v2078,  v2117,  v2155);
    uint64_t v357 = sub_364EC( v349,  v350,  v351,  v352,  v353,  v354,  v355,  v356,  v843,  v906,  v968,  v1029,  v1089,  v1148,  v1206,  v1263,  v1319,  v1374,  v1428,  v1481,  v1533,  v1584,  v1634,  v1683,  v1731,  v1778,  v1824,  v1869,  v1913,  v1956,  v1998,  v2039,  v2079,  v2118,  v2156,  v2193);
    uint64_t v365 = sub_364E4( v357,  v358,  v359,  v360,  v361,  v362,  v363,  v364,  v844,  v907,  v969,  v1030,  v1090,  v1149,  v1207,  v1264,  v1320,  v1375,  v1429,  v1482,  v1534,  v1585,  v1635,  v1684,  v1732,  v1779,  v1825,  v1870,  v1914,  v1957,  v1999,  v2040,  v2080,  v2119,  v2157,  v2194,  v2230);
    uint64_t v373 = sub_364DC( v365,  v366,  v367,  v368,  v369,  v370,  v371,  v372,  v845,  v908,  v970,  v1031,  v1091,  v1150,  v1208,  v1265,  v1321,  v1376,  v1430,  v1483,  v1535,  v1586,  v1636,  v1685,  v1733,  v1780,  v1826,  v1871,  v1915,  v1958,  v2000,  v2041,  v2081,  v2120,  v2158,  v2195,  v2231,  v2266);
    uint64_t v381 = sub_364D4( v373,  v374,  v375,  v376,  v377,  v378,  v379,  v380,  v846,  v909,  v971,  v1032,  v1092,  v1151,  v1209,  v1266,  v1322,  v1377,  v1431,  v1484,  v1536,  v1587,  v1637,  v1686,  v1734,  v1781,  v1827,  v1872,  v1916,  v1959,  v2001,  v2042,  v2082,  v2121,  v2159,  v2196,  v2232,  v2267,  v2301);
    uint64_t v389 = sub_366F8( v381,  v382,  v383,  v384,  v385,  v386,  v387,  v388,  v847,  v910,  v972,  v1033,  v1093,  v1152,  v1210,  v1267,  v1323,  v1378,  v1432,  v1485,  v1537,  v1588,  v1638,  v1687,  v1735,  v1782,  v1828,  v1873,  v1917,  v1960,  v2002,  v2043,  v2083,  v2122,  v2160,  v2197,  v2233,  v2268,  v2302,  v2335);
    uint64_t v397 = sub_366F0( v389,  v390,  v391,  v392,  v393,  v394,  v395,  v396,  v848,  v911,  v973,  v1034,  v1094,  v1153,  v1211,  v1268,  v1324,  v1379,  v1433,  v1486,  v1538,  v1589,  v1639,  v1688,  v1736,  v1783,  v1829,  v1874,  v1918,  v1961,  v2003,  v2044,  v2084,  v2123,  v2161,  v2198,  v2234,  v2269,  v2303,  v2336,  v2368);
    uint64_t v405 = sub_36B90( v397,  v398,  v399,  v400,  v401,  v402,  v403,  v404,  v849,  v912,  v974,  v1035,  v1095,  v1154,  v1212,  v1269,  v1325,  v1380,  v1434,  v1487,  v1539,  v1590,  v1640,  v1689,  v1737,  v1784,  v1830,  v1875,  v1919,  v1962,  v2004,  v2045,  v2085,  v2124,  v2162,  v2199,  v2235,  v2270,  v2304,  v2337,  v2369,  v2400);
    uint64_t v413 = sub_36EF4( v405,  v406,  v407,  v408,  v409,  v410,  v411,  v412,  v850,  v913,  v975,  v1036,  v1096,  v1155,  v1213,  v1270,  v1326,  v1381,  v1435,  v1488,  v1540,  v1591,  v1641,  v1690,  v1738,  v1785,  v1831,  v1876,  v1920,  v1963,  v2005,  v2046,  v2086,  v2125,  v2163,  v2200,  v2236,  v2271,  v2305,  v2338,  v2370,  v2401,  v2431);
    uint64_t v421 = sub_36EEC( v413,  v414,  v415,  v416,  v417,  v418,  v419,  v420,  v851,  v914,  v976,  v1037,  v1097,  v1156,  v1214,  v1271,  v1327,  v1382,  v1436,  v1489,  v1541,  v1592,  v1642,  v1691,  v1739,  v1786,  v1832,  v1877,  v1921,  v1964,  v2006,  v2047,  v2087,  v2126,  v2164,  v2201,  v2237,  v2272,  v2306,  v2339,  v2371,  v2402,  v2432,  v2461);
    uint64_t v429 = sub_DD7E4( v421,  v422,  v423,  v424,  v425,  v426,  v427,  v428,  v852,  v915,  v977,  v1038,  v1098,  v1157,  v1215,  v1272,  v1328,  v1383,  v1437,  v1490,  v1542,  v1593,  v1643,  v1692,  v1740,  v1787,  v1833,  v1878,  v1922,  v1965,  v2007,  v2048,  v2088,  v2127,  v2165,  v2202,  v2238,  v2273,  v2307,  v2340,  v2372,  v2403,  v2433,  v2462,  v2490);
    uint64_t v437 = sub_DD7DC( v429,  v430,  v431,  v432,  v433,  v434,  v435,  v436,  v853,  v916,  v978,  v1039,  v1099,  v1158,  v1216,  v1273,  v1329,  v1384,  v1438,  v1491,  v1543,  v1594,  v1644,  v1693,  v1741,  v1788,  v1834,  v1879,  v1923,  v1966,  v2008,  v2049,  v2089,  v2128,  v2166,  v2203,  v2239,  v2274,  v2308,  v2341,  v2373,  v2404,  v2434,  v2463,  v2491,  v2518);
    uint64_t v445 = sub_DD7D4( v437,  v438,  v439,  v440,  v441,  v442,  v443,  v444,  v854,  v917,  v979,  v1040,  v1100,  v1159,  v1217,  v1274,  v1330,  v1385,  v1439,  v1492,  v1544,  v1595,  v1645,  v1694,  v1742,  v1789,  v1835,  v1880,  v1924,  v1967,  v2009,  v2050,  v2090,  v2129,  v2167,  v2204,  v2240,  v2275,  v2309,  v2342,  v2374,  v2405,  v2435,  v2464,  v2492,  v2519,  v2545);
    uint64_t v453 = sub_DD7CC( v445,  v446,  v447,  v448,  v449,  v450,  v451,  v452,  v855,  v918,  v980,  v1041,  v1101,  v1160,  v1218,  v1275,  v1331,  v1386,  v1440,  v1493,  v1545,  v1596,  v1646,  v1695,  v1743,  v1790,  v1836,  v1881,  v1925,  v1968,  v2010,  v2051,  v2091,  v2130,  v2168,  v2205,  v2241,  v2276,  v2310,  v2343,  v2375,  v2406,  v2436,  v2465,  v2493,  v2520,  v2546,  v2571);
    uint64_t v461 = sub_DD7C4( v453,  v454,  v455,  v456,  v457,  v458,  v459,  v460,  v856,  v919,  v981,  v1042,  v1102,  v1161,  v1219,  v1276,  v1332,  v1387,  v1441,  v1494,  v1546,  v1597,  v1647,  v1696,  v1744,  v1791,  v1837,  v1882,  v1926,  v1969,  v2011,  v2052,  v2092,  v2131,  v2169,  v2206,  v2242,  v2277,  v2311,  v2344,  v2376,  v2407,  v2437,  v2466,  v2494,  v2521,  v2547,  v2572,  v2596);
    uint64_t v469 = sub_DD7BC( v461,  v462,  v463,  v464,  v465,  v466,  v467,  v468,  v857,  v920,  v982,  v1043,  v1103,  v1162,  v1220,  v1277,  v1333,  v1388,  v1442,  v1495,  v1547,  v1598,  v1648,  v1697,  v1745,  v1792,  v1838,  v1883,  v1927,  v1970,  v2012,  v2053,  v2093,  v2132,  v2170,  v2207,  v2243,  v2278,  v2312,  v2345,  v2377,  v2408,  v2438,  v2467,  v2495,  v2522,  v2548,  v2573,  v2597,
             v2620);
    uint64_t v477 = sub_DD7B4( v469,  v470,  v471,  v472,  v473,  v474,  v475,  v476,  v858,  v921,  v983,  v1044,  v1104,  v1163,  v1221,  v1278,  v1334,  v1389,  v1443,  v1496,  v1548,  v1599,  v1649,  v1698,  v1746,  v1793,  v1839,  v1884,  v1928,  v1971,  v2013,  v2054,  v2094,  v2133,  v2171,  v2208,  v2244,  v2279,  v2313,  v2346,  v2378,  v2409,  v2439,  v2468,  v2496,  v2523,  v2549,  v2574,  v2598,
             v2621,
             v2643);
    uint64_t v485 = sub_DD7AC( v477,  v478,  v479,  v480,  v481,  v482,  v483,  v484,  v859,  v922,  v984,  v1045,  v1105,  v1164,  v1222,  v1279,  v1335,  v1390,  v1444,  v1497,  v1549,  v1600,  v1650,  v1699,  v1747,  v1794,  v1840,  v1885,  v1929,  v1972,  v2014,  v2055,  v2095,  v2134,  v2172,  v2209,  v2245,  v2280,  v2314,  v2347,  v2379,  v2410,  v2440,  v2469,  v2497,  v2524,  v2550,  v2575,  v2599,
             v2622,
             v2644,
             v2665);
    uint64_t v493 = sub_DD7A4( v485,  v486,  v487,  v488,  v489,  v490,  v491,  v492,  v860,  v923,  v985,  v1046,  v1106,  v1165,  v1223,  v1280,  v1336,  v1391,  v1445,  v1498,  v1550,  v1601,  v1651,  v1700,  v1748,  v1795,  v1841,  v1886,  v1930,  v1973,  v2015,  v2056,  v2096,  v2135,  v2173,  v2210,  v2246,  v2281,  v2315,  v2348,  v2380,  v2411,  v2441,  v2470,  v2498,  v2525,  v2551,  v2576,  v2600,
             v2623,
             v2645,
             v2666,
             v2686);
    uint64_t v501 = sub_DD79C( v493,  v494,  v495,  v496,  v497,  v498,  v499,  v500,  v861,  v924,  v986,  v1047,  v1107,  v1166,  v1224,  v1281,  v1337,  v1392,  v1446,  v1499,  v1551,  v1602,  v1652,  v1701,  v1749,  v1796,  v1842,  v1887,  v1931,  v1974,  v2016,  v2057,  v2097,  v2136,  v2174,  v2211,  v2247,  v2282,  v2316,  v2349,  v2381,  v2412,  v2442,  v2471,  v2499,  v2526,  v2552,  v2577,  v2601,
             v2624,
             v2646,
             v2667,
             v2687,
             v2706);
    uint64_t v509 = sub_DD794( v501,  v502,  v503,  v504,  v505,  v506,  v507,  v508,  v862,  v925,  v987,  v1048,  v1108,  v1167,  v1225,  v1282,  v1338,  v1393,  v1447,  v1500,  v1552,  v1603,  v1653,  v1702,  v1750,  v1797,  v1843,  v1888,  v1932,  v1975,  v2017,  v2058,  v2098,  v2137,  v2175,  v2212,  v2248,  v2283,  v2317,  v2350,  v2382,  v2413,  v2443,  v2472,  v2500,  v2527,  v2553,  v2578,  v2602,
             v2625,
             v2647,
             v2668,
             v2688,
             v2707,
             v2725);
    uint64_t v517 = sub_DD78C( v509,  v510,  v511,  v512,  v513,  v514,  v515,  v516,  v863,  v926,  v988,  v1049,  v1109,  v1168,  v1226,  v1283,  v1339,  v1394,  v1448,  v1501,  v1553,  v1604,  v1654,  v1703,  v1751,  v1798,  v1844,  v1889,  v1933,  v1976,  v2018,  v2059,  v2099,  v2138,  v2176,  v2213,  v2249,  v2284,  v2318,  v2351,  v2383,  v2414,  v2444,  v2473,  v2501,  v2528,  v2554,  v2579,  v2603,
             v2626,
             v2648,
             v2669,
             v2689,
             v2708,
             v2726,
             v2743);
    uint64_t v525 = sub_DD784( v517,  v518,  v519,  v520,  v521,  v522,  v523,  v524,  v864,  v927,  v989,  v1050,  v1110,  v1169,  v1227,  v1284,  v1340,  v1395,  v1449,  v1502,  v1554,  v1605,  v1655,  v1704,  v1752,  v1799,  v1845,  v1890,  v1934,  v1977,  v2019,  v2060,  v2100,  v2139,  v2177,  v2214,  v2250,  v2285,  v2319,  v2352,  v2384,  v2415,  v2445,  v2474,  v2502,  v2529,  v2555,  v2580,  v2604,
             v2627,
             v2649,
             v2670,
             v2690,
             v2709,
             v2727,
             v2744,
             v2760);
    uint64_t v533 = sub_DD77C( v525,  v526,  v527,  v528,  v529,  v530,  v531,  v532,  v865,  v928,  v990,  v1051,  v1111,  v1170,  v1228,  v1285,  v1341,  v1396,  v1450,  v1503,  v1555,  v1606,  v1656,  v1705,  v1753,  v1800,  v1846,  v1891,  v1935,  v1978,  v2020,  v2061,  v2101,  v2140,  v2178,  v2215,  v2251,  v2286,  v2320,  v2353,  v2385,  v2416,  v2446,  v2475,  v2503,  v2530,  v2556,  v2581,  v2605,
             v2628,
             v2650,
             v2671,
             v2691,
             v2710,
             v2728,
             v2745,
             v2761,
             v2776);
    uint64_t v541 = sub_DD774( v533,  v534,  v535,  v536,  v537,  v538,  v539,  v540,  v866,  v929,  v991,  v1052,  v1112,  v1171,  v1229,  v1286,  v1342,  v1397,  v1451,  v1504,  v1556,  v1607,  v1657,  v1706,  v1754,  v1801,  v1847,  v1892,  v1936,  v1979,  v2021,  v2062,  v2102,  v2141,  v2179,  v2216,  v2252,  v2287,  v2321,  v2354,  v2386,  v2417,  v2447,  v2476,  v2504,  v2531,  v2557,  v2582,  v2606,
             v2629,
             v2651,
             v2672,
             v2692,
             v2711,
             v2729,
             v2746,
             v2762,
             v2777,
             v2791);
    uint64_t v549 = sub_DD76C( v541,  v542,  v543,  v544,  v545,  v546,  v547,  v548,  v867,  v930,  v992,  v1053,  v1113,  v1172,  v1230,  v1287,  v1343,  v1398,  v1452,  v1505,  v1557,  v1608,  v1658,  v1707,  v1755,  v1802,  v1848,  v1893,  v1937,  v1980,  v2022,  v2063,  v2103,  v2142,  v2180,  v2217,  v2253,  v2288,  v2322,  v2355,  v2387,  v2418,  v2448,  v2477,  v2505,  v2532,  v2558,  v2583,  v2607,
             v2630,
             v2652,
             v2673,
             v2693,
             v2712,
             v2730,
             v2747,
             v2763,
             v2778,
             v2792,
             v2805);
    uint64_t v557 = sub_DD764( v549,  v550,  v551,  v552,  v553,  v554,  v555,  v556,  v868,  v931,  v993,  v1054,  v1114,  v1173,  v1231,  v1288,  v1344,  v1399,  v1453,  v1506,  v1558,  v1609,  v1659,  v1708,  v1756,  v1803,  v1849,  v1894,  v1938,  v1981,  v2023,  v2064,  v2104,  v2143,  v2181,  v2218,  v2254,  v2289,  v2323,  v2356,  v2388,  v2419,  v2449,  v2478,  v2506,  v2533,  v2559,  v2584,  v2608,
             v2631,
             v2653,
             v2674,
             v2694,
             v2713,
             v2731,
             v2748,
             v2764,
             v2779,
             v2793,
             v2806,
             v2818);
    uint64_t v565 = sub_DD75C( v557,  v558,  v559,  v560,  v561,  v562,  v563,  v564,  v869,  v932,  v994,  v1055,  v1115,  v1174,  v1232,  v1289,  v1345,  v1400,  v1454,  v1507,  v1559,  v1610,  v1660,  v1709,  v1757,  v1804,  v1850,  v1895,  v1939,  v1982,  v2024,  v2065,  v2105,  v2144,  v2182,  v2219,  v2255,  v2290,  v2324,  v2357,  v2389,  v2420,  v2450,  v2479,  v2507,  v2534,  v2560,  v2585,  v2609,
             v2632,
             v2654,
             v2675,
             v2695,
             v2714,
             v2732,
             v2749,
             v2765,
             v2780,
             v2794,
             v2807,
             v2819,
             v2830);
    uint64_t v573 = sub_DD754( v565,  v566,  v567,  v568,  v569,  v570,  v571,  v572,  v870,  v933,  v995,  v1056,  v1116,  v1175,  v1233,  v1290,  v1346,  v1401,  v1455,  v1508,  v1560,  v1611,  v1661,  v1710,  v1758,  v1805,  v1851,  v1896,  v1940,  v1983,  v2025,  v2066,  v2106,  v2145,  v2183,  v2220,  v2256,  v2291,  v2325,  v2358,  v2390,  v2421,  v2451,  v2480,  v2508,  v2535,  v2561,  v2586,  v2610,
             v2633,
             v2655,
             v2676,
             v2696,
             v2715,
             v2733,
             v2750,
             v2766,
             v2781,
             v2795,
             v2808,
             v2820,
             v2831,
             v2841);
    uint64_t v581 = sub_DD74C( v573,  v574,  v575,  v576,  v577,  v578,  v579,  v580,  v871,  v934,  v996,  v1057,  v1117,  v1176,  v1234,  v1291,  v1347,  v1402,  v1456,  v1509,  v1561,  v1612,  v1662,  v1711,  v1759,  v1806,  v1852,  v1897,  v1941,  v1984,  v2026,  v2067,  v2107,  v2146,  v2184,  v2221,  v2257,  v2292,  v2326,  v2359,  v2391,  v2422,  v2452,  v2481,  v2509,  v2536,  v2562,  v2587,  v2611,
             v2634,
             v2656,
             v2677,
             v2697,
             v2716,
             v2734,
             v2751,
             v2767,
             v2782,
             v2796,
             v2809,
             v2821,
             v2832,
             v2842);
    uint64_t v589 = sub_DD744( v581,  v582,  v583,  v584,  v585,  v586,  v587,  v588,  v872,  v935,  v997,  v1058,  v1118,  v1177,  v1235,  v1292,  v1348,  v1403,  v1457,  v1510,  v1562,  v1613,  v1663,  v1712,  v1760,  v1807,  v1853,  v1898,  v1942,  v1985,  v2027,  v2068,  v2108,  v2147,  v2185,  v2222,  v2258,  v2293,  v2327,  v2360,  v2392,  v2423,  v2453,  v2482,  v2510,  v2537,  v2563,  v2588,  v2612,
             v2635,
             v2657,
             v2678,
             v2698,
             v2717,
             v2735,
             v2752,
             v2768,
             v2783,
             v2797,
             v2810,
             v2822,
             v2833,
             v2843);
    uint64_t v597 = sub_DD73C( v589,  v590,  v591,  v592,  v593,  v594,  v595,  v596,  v873,  v936,  v998,  v1059,  v1119,  v1178,  v1236,  v1293,  v1349,  v1404,  v1458,  v1511,  v1563,  v1614,  v1664,  v1713,  v1761,  v1808,  v1854,  v1899,  v1943,  v1986,  v2028,  v2069,  v2109,  v2148,  v2186,  v2223,  v2259,  v2294,  v2328,  v2361,  v2393,  v2424,  v2454,  v2483,  v2511,  v2538,  v2564,  v2589,  v2613,
             v2636,
             v2658,
             v2679,
             v2699,
             v2718,
             v2736,
             v2753,
             v2769,
             v2784,
             v2798,
             v2811,
             v2823,
             v2834,
             v2844);
    uint64_t v605 = sub_DD734( v597,  v598,  v599,  v600,  v601,  v602,  v603,  v604,  v874,  v937,  v999,  v1060,  v1120,  v1179,  v1237,  v1294,  v1350,  v1405,  v1459,  v1512,  v1564,  v1615,  v1665,  v1714,  v1762,  v1809,  v1855,  v1900,  v1944,  v1987,  v2029,  v2070,  v2110,  v2149,  v2187,  v2224,  v2260,  v2295,  v2329,  v2362,  v2394,  v2425,  v2455,  v2484,  v2512,  v2539,  v2565,  v2590,  v2614,
             v2637,
             v2659,
             v2680,
             v2700,
             v2719,
             v2737,
             v2754,
             v2770,
             v2785,
             v2799,
             v2812,
             v2824,
             v2835,
             v2845);
    uint64_t v613 = sub_DD72C( v605,  v606,  v607,  v608,  v609,  v610,  v611,  v612,  v875,  v938,  v1000,  v1061,  v1121,  v1180,  v1238,  v1295,  v1351,  v1406,  v1460,  v1513,  v1565,  v1616,  v1666,  v1715,  v1763,  v1810,  v1856,  v1901,  v1945,  v1988,  v2030,  v2071,  v2111,  v2150,  v2188,  v2225,  v2261,  v2296,  v2330,  v2363,  v2395,  v2426,  v2456,  v2485,  v2513,  v2540,  v2566,  v2591,  v2615,
             v2638,
             v2660,
             v2681,
             v2701,
             v2720,
             v2738,
             v2755,
             v2771,
             v2786,
             v2800,
             v2813,
             v2825,
             v2836,
             v2846);
    uint64_t v621 = sub_DD724( v613,  v614,  v615,  v616,  v617,  v618,  v619,  v620,  v876,  v939,  v1001,  v1062,  v1122,  v1181,  v1239,  v1296,  v1352,  v1407,  v1461,  v1514,  v1566,  v1617,  v1667,  v1716,  v1764,  v1811,  v1857,  v1902,  v1946,  v1989,  v2031,  v2072,  v2112,  v2151,  v2189,  v2226,  v2262,  v2297,  v2331,  v2364,  v2396,  v2427,  v2457,  v2486,  v2514,  v2541,  v2567,  v2592,  v2616,
             v2639,
             v2661,
             v2682,
             v2702,
             v2721,
             v2739,
             v2756,
             v2772,
             v2787,
             v2801,
             v2814,
             v2826,
             v2837,
             v2847);
    uint64_t v629 = sub_DD71C( v621,  v622,  v623,  v624,  v625,  v626,  v627,  v628,  v877,  v940,  v1002,  v1063,  v1123,  v1182,  v1240,  v1297,  v1353,  v1408,  v1462,  v1515,  v1567,  v1618,  v1668,  v1717,  v1765,  v1812,  v1858,  v1903,  v1947,  v1990,  v2032,  v2073,  v2113,  v2152,  v2190,  v2227,  v2263,  v2298,  v2332,  v2365,  v2397,  v2428,  v2458,  v2487,  v2515,  v2542,  v2568,  v2593,  v2617,
             v2640,
             v2662,
             v2683,
             v2703,
             v2722,
             v2740,
             v2757,
             v2773,
             v2788,
             v2802,
             v2815,
             v2827,
             v2838,
             v2848);
    uint64_t v637 = sub_DD714( v629,  v630,  v631,  v632,  v633,  v634,  v635,  v636,  v878,  v941,  v1003,  v1064,  v1124,  v1183,  v1241,  v1298,  v1354,  v1409,  v1463,  v1516,  v1568,  v1619,  v1669,  v1718,  v1766,  v1813,  v1859,  v1904,  v1948,  v1991,  v2033,  v2074,  v2114,  v2153,  v2191,  v2228,  v2264,  v2299,  v2333,  v2366,  v2398,  v2429,  v2459,  v2488,  v2516,  v2543,  v2569,  v2594,  v2618,
             v2641,
             v2663,
             v2684,
             v2704,
             v2723,
             v2741,
             v2758,
             v2774,
             v2789,
             v2803,
             v2816,
             v2828,
             v2839,
             v2849);
    sub_DD70C( v637,  v638,  v639,  v640,  v641,  v642,  v643,  v644,  v879,  v942,  v1004,  v1065,  v1125,  v1184,  v1242,  v1299,  v1355,  v1410,  v1464,  v1517,  v1569,  v1620,  v1670,  v1719,  v1767,  v1814,  v1860,  v1905,  v1949,  v1992,  v2034,  v2075,  v2115,  v2154,  v2192,  v2229,  v2265,  v2300,  v2334,  v2367,  v2399,  v2430,  v2460,  v2489,  v2517,  v2544,  v2570,  v2595,  v2619,
      v2642,
      v2664,
      v2685,
      v2705,
      v2724,
      v2742,
      v2759,
      v2775,
      v2790,
      v2804,
      v2817,
      v2829,
      v2840,
      v2850);
    sub_DD704();
    sub_DD6FC();
    sub_DD6F4();
    sub_DD6EC();
    sub_DD6E4();
    sub_DD6DC();
    sub_DD6D4();
    sub_DD6CC();
    sub_DD6C4();
    sub_DD6BC();
    sub_DD6B4();
    sub_DD6AC();
    sub_DD6A4();
    sub_DD69C();
    sub_DD694();
    sub_DD68C();
    sub_DD684();
    sub_DD67C();
    sub_DD674();
    sub_DD66C();
    sub_DD664();
    sub_DD65C();
    sub_DD654();
    sub_DD64C();
    sub_DD644();
    sub_DD63C();
    sub_DD634();
    sub_DD62C();
    sub_DD624();
    sub_DD61C();
    sub_DD614();
    sub_DD60C();
    sub_DD604();
    sub_DD5FC();
    sub_DD5F4();
    sub_DD5EC();
    sub_DD5E4();
    sub_DD5DC();
    sub_DD5D4();
    sub_DD5CC();
    sub_DD5C4();
    sub_DD5BC();
    sub_DD5B4();
    sub_DD5AC();
    sub_DD5A4();
    sub_DD59C();
    sub_DD594();
    sub_DD58C();
    sub_DD584();
    sub_DD57C();
    sub_DD574();
    sub_DD56C();
    sub_DD564();
    sub_DD55C();
    sub_DD554();
    sub_DD54C();
    sub_DD544();
    sub_DD53C();
    sub_DD534();
    sub_DD52C();
    sub_DD524();
    sub_DD51C();
    sub_DD514();
    sub_DD50C();
    sub_DD504();
    sub_DD4FC();
    sub_DD4F4();
    sub_DD4EC();
    sub_DD4DC();
    sub_DD4E4();
    sub_DD868();
    sub_DD870();
    sub_DDA48();
    sub_DDA58();
    sub_36B88();
    sub_366E8();
    sub_3677C();
    sub_36588();
    sub_36624();
    sub_3661C();
    sub_36614();
    sub_3660C();
    sub_36604();
    sub_365FC();
    sub_365F4();
    sub_365EC();
    sub_365E4();
    sub_365DC();
    sub_366B8();
    sub_366B0();
    v645 = (uint64_t (*)(void))sub_DE01C();
    return sub_36148(v645);
  }

  sub_DD990();
  sub_DDD24();
  swift_bridgeObjectRelease();
  sub_DDFD8();
  swift_bridgeObjectRelease();
  sub_DDFCC();
  swift_bridgeObjectRelease();
  sub_2A184();
  sub_A5DC(v29, v32);
  sub_DDBF0();
  sub_AB5C();
  os_log_type_t v129 = sub_AB70();
  BOOL v130 = sub_A988(v129);
  uint64_t v131 = *(void (**)(void))(v12 + 27400);
  if (v130)
  {
    uint64_t v132 = (uint8_t *)sub_3635C();
    uint64_t v133 = sub_DE0A4(v132);
    sub_DDA60((uint64_t)v133, (uint64_t)&v2900, (uint64_t)v2901, (uint64_t)&v2898);
    sub_DA1C();
    sub_232EC( &dword_0,  (os_log_s *)v32,  (os_log_type_t)v14,  "Received .rejectedConfirmation code, creating output.",  v132);
    sub_37128();

    uint64_t v134 = sub_373E0();
  }

  else
  {
    sub_DDA50();
    swift_bridgeObjectRelease();
    uint64_t v134 = sub_372A0();
  }

  v131(v134);
  sub_DE3E4();
  *(void *)(v12 + 2844_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8) = v32;
  sub_A66C(v720, 1LL, v721, v722);
  sub_363E8();
  v723 = (void *)sub_36B20();
  *(void *)(v12 + 284sub_D7EC(v0 + 16, v0 + 56) = v723;
  void *v723 = v12;
  v723[1] = sub_D5BAC;
  sub_371E0();
  return sub_1317D4(v724, v725, v726);
}